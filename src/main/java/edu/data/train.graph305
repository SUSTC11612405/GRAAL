class C{  public AnnotatingGraphMousePlugin(RenderContext<V,E> rc,int selectionModifiers,int additionalModifiers){  super(selectionModifiers);  this.rc=rc;  this.basicTransformer=rc.getMultiLayerTransformer();  this.additionalModifiers=additionalModifiers;  this.lensPaintable=new LensPaintable();  this.annotationManager=new AnnotationManager(rc);  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  return getBitmapSize(bitmap);}  }
class C{  public static String escapeJava(String string){  int strLen=string.length();  StringBuilder sb=new StringBuilder(strLen);  for (int i=0; i < strLen; i++) {    char c=string.charAt(i);switch (c) {case '\b':      sb.append("\\b");    break;case '\t':  sb.append("\\t");break;case '\n':sb.append("\\n");break;case '\f':sb.append("\\f");break;case '\r':sb.append("\\r");break;case '\"':sb.append("\\\"");break;case '\\':sb.append("\\\\");break;default :if ((c < 32) || (c > 127)) {String hex=Integer.toHexString(c);sb.append("\\u");for (int k=hex.length(); k < 4; k++) {sb.append('0');}sb.append(hex);} else {sb.append(c);}}}return sb.toString();}  }
class C{  public void onConfigurationChanged(){  int curFirst=pager.getCurrentScreen() * PAGE_SIZE;  calPageSize();  int newPage=curFirst / PAGE_SIZE;  removeViewAt(1);  afterPlatformListGot();  pager.setCurrentScreen(newPage);}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  private boolean updateUiForKey(String configKey,DataMap config){  if (configKey.equals(BReelWatchFaceUtil.KEY_HOUR_FORMAT_TYPE)) {    String twentyFourSwitchString=config.getString(BReelWatchFaceUtil.KEY_HOUR_FORMAT_TYPE);    Log.d(TAG,"twentyFourSwitch RECEIVED: " + twentyFourSwitchString);    setIs24hours(Boolean.parseBoolean(twentyFourSwitchString));    return true;  } else {    return false;  }}  }
class C{  public OrganizationAuthorityException(){}  }
class C{  public Matrix arrayLeftDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=B.A[i][j] / A[i][j];    }  }  return this;}  }
class C{  @Override protected void creationFinished(Figure createdFigure){  getView().clearSelection();  getView().addToSelection(createdFigure);  beginEdit((TextHolderFigure)createdFigure);}  }
class C{  public Element removeEndEndModifier(){  setEndEndModifierDefined(false);  return (this);}  }
class C{  public boolean mouseMoved(MouseEvent e){  if (!active) {    return false;  }  setCurrentMouseEvent(e);  if (getMovementInterest() == null || noTimerOverOMGraphic || mouseTimerInterval <= 0) {    return updateMouseMoved(e);  } else {    if (mouseTimer == null) {      mouseTimer=new Timer(mouseTimerInterval,mouseTimerListener);      mouseTimer.setRepeats(false);    }    mouseTimerListener.setEvent(e);    mouseTimer.restart();    return false;  }}  }
class C{  public static IFn var(Object ns,Object name){  return Var.intern(asSym(ns),asSym(name));}  }
class C{  public boolean directDataPacket(DataPacket packet){  return this.directDataPacket(packet,false) != -1;}  }
class C{  public NamedStyle(){  attributes=getEmptySet();}  }
class C{  UserRecord(int inID){  super(inID);}  }
class C{  public BloomFilterFactory(final int n,final double p,final double maxP){  if (n <= 0)   throw new IllegalArgumentException();  if (p <= 0d || p > 1d)   throw new IllegalArgumentException();  if (maxP <= p || maxP > 1d)   throw new IllegalArgumentException();  this.n=n;  this.p=p;  this.maxP=maxP;  final int k=BloomFilter.getHashFunctionCount(p);  final long m=BloomFilter.getBitLength(k,n);  this.maxN=BloomFilter.getEntryCountForErrorRate(k,m,maxP);}  }
class C{  protected CompletionProposalCollector createCollector(JavaContentAssistInvocationContext context){  return new FillArgumentNamesCompletionProposalCollector(context);}  }
class C{  public static SharedScrolledComposite createScrolledComposite(Composite parent,int columns,int hspan,int marginwidth,int marginheight){  SharedScrolledComposite comp=new SharedScrolledComposite(parent,SWT.V_SCROLL | SWT.H_SCROLL){  };  GridLayout layout=new GridLayout(columns,false);  layout.marginHeight=marginheight;  layout.marginWidth=marginwidth;  comp.setLayout(layout);  GridData gd=new GridData(GridData.FILL_BOTH);  gd.horizontalSpan=hspan;  comp.setLayoutData(gd);  comp.setExpandHorizontal(true);  comp.setExpandVertical(true);  return comp;}  }
class C{  public static <E,T,V extends T>T inject(E[] self,@ClosureParams(value=FromString.class,options="E,E") Closure<V> closure){  return inject((Object)self,closure);}  }
class C{  public void onAckReceived(UUID nodeId,long threadId){  ThreadFinishSync threadSync=threadMap.get(threadId);  if (threadSync != null)   threadSync.onReceive(nodeId);}  }
class C{  public String globalInfo(){  return "Implements stochastic gradient descent for learning" + " various linear models (binary class SVM, binary class" + " logistic regression, squared loss, Huber loss and "+ "epsilon-insensitive loss linear regression)."+ " Globally replaces all missing values and transforms nominal"+ " attributes into binary ones. It also normalizes all attributes,"+ " so the coefficients in the output are based on the normalized"+ " data.\n"+ "For numeric class attributes, the squared, Huber or "+ "epsilon-insensitve loss function must be used. Epsilon-insensitive "+ "and Huber loss may require a much higher learning rate.";}  }
class C{  public int index(){  return this.lineNumber;}  }
class C{  public void sync() throws IOException {  dataStore.sync();}  }
class C{  void writeFully(ByteBuffer data) throws IOException {  while (data.hasRemaining()) {    output.write(data);  }}  }
class C{  private static void returnExpand(Instruction ret,IR ir){  PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asIA32();  if (MIR_Return.hasVal(ret)) {    Operand symb1=MIR_Return.getClearVal(ret);    TypeReference type=symb1.getType();    if (type.isFloatType() || type.isDoubleType()) {      Register r=phys.getReturnFPR();      RegisterOperand rOp=new RegisterOperand(r,type);      if (SSE2_FULL) {        if (type.isFloatType()) {          ret.insertBefore(MIR_Move.create(IA32_MOVSS,rOp,symb1));        } else {          ret.insertBefore(MIR_Move.create(IA32_MOVSD,rOp,symb1));        }      } else {        ret.insertBefore(MIR_Move.create(IA32_FMOV,rOp,symb1));      }      MIR_Return.setVal(ret,rOp.copyD2U());    } else {      Register r=phys.getFirstReturnGPR();      RegisterOperand rOp=new RegisterOperand(r,type);      ret.insertBefore(MIR_Move.create(IA32_MOV,rOp,symb1));      MIR_Return.setVal(ret,rOp.copyD2U());    }  }  if (MIR_Return.hasVal2(ret)) {    if (VM.VerifyAssertions)     VM._assert(VM.BuildFor32Addr);    Operand symb2=MIR_Return.getClearVal2(ret);    TypeReference type=symb2.getType();    Register r=phys.getSecondReturnGPR();    RegisterOperand rOp=new RegisterOperand(r,type);    ret.insertBefore(MIR_Move.create(IA32_MOV,rOp,symb2));    MIR_Return.setVal2(ret,rOp.copyD2U());  }  if (!SSE2_FULL) {    int nSave=0;    if (MIR_Return.hasVal(ret)) {      Operand symb1=MIR_Return.getClearVal(ret);      TypeReference type=symb1.getType();      if (type.isFloatType() || type.isDoubleType()) {        nSave=1;      }    }    ret.insertBefore(MIR_UnaryNoRes.create(IA32_FCLEAR,IC(nSave)));  }  MIR_Return.setPopBytes(ret,IC(ir.incomingParameterBytes()));}  }
class C{  public final void print(long i) throws IOException {  if (i == 0x8000000000000000L) {    print("-9223372036854775808");    return;  }  if (_bytes == null) {    _bytes=new byte[32];  }  if (i < 0) {    write('-');    i=-i;  } else   if (i == 0) {    write('0');    return;  }  int j=31;  while (i > 0) {    _bytes[--j]=(byte)((i % 10) + '0');    i/=10;  }  write(_bytes,j,31 - j);}  }
class C{  private AntUtils(){}  }
class C{  public static void mapErrorCodeToException(PlaceResultCode resultCode,String error) throws RpcException {switch (resultCode) {case OK:    break;case NO_SUCH_RESOURCE:  throw new NoSuchResourceException(error);case NO_CONSTRAINT_MATCHING_DATASTORE:throw new ConstraintMatchingDatastoreNotFoundException(error);case NOT_ENOUGH_CPU_RESOURCE:throw new NotEnoughCpuResourceException(error);case NOT_ENOUGH_MEMORY_RESOURCE:throw new NotEnoughMemoryResourceException(error);case NOT_ENOUGH_DATASTORE_CAPACITY:throw new NotEnoughDatastoreCapacityException(error);case RESOURCE_CONSTRAINT:throw new ResourceConstraintException(error);case SYSTEM_ERROR:throw new SystemErrorException(error);case INVALID_STATE:throw new InvalidAgentStateException(error);default :throw new RpcException(String.format("Unknown result: %s : %s",resultCode,error));}}  }
class C{  public boolean isSprogII(){  if ((sprogType >= SPROGII) && (sprogType <= SPROGIIv3)) {    return true;  }  return false;}  }
class C{  public final LinearRegression regression(Matrix y,double[] w,double ridge){  return new LinearRegression(this,y,w,ridge);}  }
class C{  private static synchronized void initTrueRandom(long adjustedTimestamp){  _rand_m=971;  _rand_ia=11113;  _rand_ib=104322;  _rand_irand=4181;  int seed=(int)(adjustedTimestamp >>> 48) ^ (int)(adjustedTimestamp >>> 32) ^ (int)(adjustedTimestamp >>> 16)^ (int)(adjustedTimestamp & 0x000000000000FFFF);  _rand_irand=_rand_irand + seed + _osProcessId;}  }
class C{  public void removeFromMergeTable(SIPServerTransaction tr){  if (isLoggingEnabled()) {    stackLogger.logDebug("Removing tx from merge table ");  }  String key=((SIPRequest)tr.getRequest()).getMergeId();  if (key != null) {    this.mergeTable.remove(key);  }}  }
class C{  public static synchronized Collection<String> allLocalMACs(){  List<String> macs=new ArrayList<>(3);  try {    Enumeration<NetworkInterface> itfs=NetworkInterface.getNetworkInterfaces();    if (itfs != null) {      for (      NetworkInterface itf : asIterable(itfs)) {        byte[] hwAddr=itf.getHardwareAddress();        if (hwAddr != null && hwAddr.length > 0) {          String mac=byteArray2HexString(hwAddr);          if (!macs.contains(mac))           macs.add(mac);        }      }    }  } catch (  SocketException ignore) {    return Collections.emptyList();  }  Collections.sort(macs);  return macs;}  }
class C{  public static boolean isWindows(){  return (getOperatingSystem() & OS_WINDOWS_MASK) != 0;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < getLocals(); ++i) {    sb.append(getLocal(i));  }  sb.append(' ');  for (int i=0; i < getStackSize(); ++i) {    sb.append(getStack(i).toString());  }  return sb.toString();}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 2:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  protected void sequence_AnnotationList(ISerializationContext context,AnnotationList semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void close(){  for (  Map.Entry<String,PluginHolder<T>> e : registry.entrySet()) {    try {      e.getValue().close();    } catch (    Exception exp) {      log.error("Error closing plugin " + e.getKey() + " of type : "+ meta.getCleanTag(),exp);    }  }}  }
class C{  public synchronized void animatePanToAbs(Point2D p,long duration){  m_tmpPoint.setLocation(0,0);  m_itransform.transform(m_tmpPoint,m_tmpPoint);  double x=p.getX();  x=(Double.isNaN(x) ? 0 : x);  double y=p.getY();  y=(Double.isNaN(y) ? 0 : y);  double w=getWidth() / (2 * m_transform.getScaleX());  double h=getHeight() / (2 * m_transform.getScaleY());  double dx=w - x + m_tmpPoint.getX();  double dy=h - y + m_tmpPoint.getY();  animatePanAbs(dx,dy,duration);}  }
class C{  public void concatenate(JavaMethod tail){  CodeAttribute codeAttr=getCode();  CodeAttribute tailCodeAttr=tail.getCode();  byte[] code=codeAttr.getCode();  byte[] tailCode=tailCodeAttr.getCode();  int codeLength=code.length;  if ((code[codeLength - 1] & 0xff) == CodeVisitor.RETURN)   codeLength=codeLength - 1;  byte[] newCode=new byte[codeLength + tailCode.length];  System.arraycopy(code,0,newCode,0,codeLength);  System.arraycopy(tailCode,0,newCode,codeLength,tailCode.length);  codeAttr.setCode(newCode);  if (codeAttr.getMaxStack() < tailCodeAttr.getMaxStack())   codeAttr.setMaxStack(tailCodeAttr.getMaxStack());  if (codeAttr.getMaxLocals() < tailCodeAttr.getMaxLocals())   codeAttr.setMaxLocals(tailCodeAttr.getMaxLocals());  ArrayList<CodeAttribute.ExceptionItem> exns=tailCodeAttr.getExceptions();  for (int i=0; i < exns.size(); i++) {    CodeAttribute.ExceptionItem exn=exns.get(i);    CodeAttribute.ExceptionItem newExn=new CodeAttribute.ExceptionItem();    newExn.setType(exn.getType());    newExn.setStart(exn.getStart() + codeLength);    newExn.setEnd(exn.getEnd() + codeLength);    newExn.setHandler(exn.getHandler() + codeLength);  }}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearProtocolStatus(){  protocolStatus=null;  fieldSetFlags()[8]=false;  return this;}  }
class C{  private void fillCompetitiveGroupFieldValues(){  updateMethod.setSelectedItem(((CompetitiveGroup)competitive).getUpdateMethod());  tfEpsilon.setText(Double.toString(((CompetitiveGroup)competitive).getLearningRate()));  tfLoserValue.setText(Double.toString(((CompetitiveGroup)competitive).getLoseValue()));  tfWinnerValue.setText(Double.toString(((CompetitiveGroup)competitive).getWinValue()));  tfLeakyEpsilon.setText(Double.toString(((CompetitiveGroup)competitive).getLeakyLearningRate()));  tfSynpaseDecayPercent.setText(Double.toString(((CompetitiveGroup)competitive).getSynpaseDecayPercent()));  cbUseLeakyLearning.setSelected(((CompetitiveGroup)competitive).getUseLeakyLearning());  cbNormalizeInputs.setSelected(((CompetitiveGroup)competitive).getNormalizeInputs());}  }
class C{  public JPolicyMappings(String title){  this.title=title;  initComponents();}  }
class C{  public static Builder disqueSocket(String socket){  Builder builder=new Builder();  builder.withSocket(socket);  return builder;}  }
class C{  public Ray(Vector2 start,double direction){  this(start,new Vector2(direction));}  }
class C{  public boolean isActive(){  return active;}  }
class C{  private static Date handleDateWithMissingLeadingZeros(String stampString,int dateLength) throws ParseException {  if (dateLength == 6) {synchronized (xep0091Date6DigitFormatter) {      return xep0091Date6DigitFormatter.parse(stampString);    }  }  Calendar now=Calendar.getInstance();  Calendar oneDigitMonth=parseXEP91Date(stampString,xep0091Date7Digit1MonthFormatter);  Calendar twoDigitMonth=parseXEP91Date(stampString,xep0091Date7Digit2MonthFormatter);  List<Calendar> dates=filterDatesBefore(now,oneDigitMonth,twoDigitMonth);  if (!dates.isEmpty()) {    return determineNearestDate(now,dates).getTime();  }  return null;}  }
class C{  public void removeTargetListener(String ns,String an,boolean isCSS,AnimationTargetListener l){  if (!isCSS) {    LinkedList ll=(LinkedList)targetListeners.get(ns,an);    ll.remove(l);  }}  }
class C{  AbstractLocation(final Id id,final Coord center){  this.id=id;  this.center=center;  if (this.center == null) {    throw new RuntimeException("Location id=" + id + " instanciate without coordinate!");  }}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  ExpressionStatement s=(ExpressionStatement)clone();  s.expr=expr.copyInline(ctx);  return s;}  }
class C{  public Logger(final LoggerType type,final String consumerName) throws LoggingException {  try {    this.type=type;    this.consumerName=consumerName;    ConfigurationManager config=ConfigurationManager.getInstance();    String path=(String)config.getConfigParameter(ConfigurationKeys.LOGGING_PATH_DIFFTOOL);switch (type) {case ARTICLE_OUTPUT:      logLevel=Level.INFO;    break;case DIFF_TOOL_ERROR:  logLevel=Level.SEVERE;break;case DIFF_TOOL:logLevel=(Level)config.getConfigParameter(ConfigurationKeys.LOGGING_LOGLEVEL_DIFFTOOL);break;default :throw ErrorFactory.createLoggingException(ErrorKeys.LOGGING_LOGGER_INITIALIZISATION_FAILED);}if (logLevel != Level.OFF) {this.writer=new FileWriter(path + consumerName + ".log");}} catch (Exception e) {throw ErrorFactory.createLoggingException(ErrorKeys.LOGGING_LOGGER_INITIALIZISATION_FAILED,e);}}  }
class C{  public void addResult(int n,boolean isRelevant,long docNameExtractTime){  if (Math.abs(numPoints + 1 - n) > 1E-6) {    throw new IllegalArgumentException("point " + n + " illegal after "+ numPoints+ " points!");  }  if (isRelevant) {    numGoodPoints+=1;    recallPoints.add(new RecallPoint(n,numGoodPoints));    if (recallPoints.size() == 1 && n <= 5) {      mrr=1.0 / n;    }  }  numPoints=n;  double p=numGoodPoints / numPoints;  if (isRelevant) {    pReleventSum+=p;  }  if (n < pAt.length) {    pAt[n]=p;  }  recall=maxGoodPoints <= 0 ? p : numGoodPoints / maxGoodPoints;  docNamesExtractTime+=docNameExtractTime;}  }
class C{  public static <E>Set<E> constrainedSet(Set<E> set,Constraint<? super E> constraint){  return new ConstrainedSet<E>(set,constraint);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tRandom number seed.\n" + "\t(default " + m_SeedDefault + ")","S",1,"-S <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.STRING_LITERAL_FOR_STE__ENTRY:    return entry != null;case ImPackage.STRING_LITERAL_FOR_STE__USE_EXPORTED_NAME:  return useExportedName != USE_EXPORTED_NAME_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void addLoader(Loader loader,int offset){  if (_loaders.indexOf(loader) >= 0) {    return;  }  if (_lifecycle.isDestroyed()) {    throw new IllegalStateException(L().l("can't add loaders after initialization"));  }  if (log().isLoggable(Level.FINEST)) {    log().finest(this + " adding loader " + loader);  }  _loaders.add(offset,loader);  if (loader.getClassLoader() == null) {    loader.setLoader(this);  } else {    assert (loader.getClassLoader() == this);  }  if (loader instanceof Dependency) {    _dependencies.add((Dependency)loader);  }  _makeList.add(loader);  if (loader.isDirectoryLoader()) {    _isDirectoryLoader=true;  }  loader.init();  _hasNewLoader=true;}  }
class C{  @Nightly public void testRandomHuge() throws Exception {  for (int iters=0; iters < 10; iters++) {    doRandomTest(2000,100);  }}  }
class C{  String[] genStrings(int len,int nstrings){  String[] strs=new String[nstrings];  char[] ca=new char[len];  Random rand=new Random(System.currentTimeMillis());  for (int i=0; i < nstrings; i++) {    for (int j=0; j < len; j++) {      ca[j]=(char)rand.nextInt();    }    strs[i]=new String(ca);  }  return strs;}  }
class C{  public TIntIntHashMap(){}  }
class C{  public void select(int selectionStart,int selectionEnd){  int docLength=getDocument().getLength();  if (selectionStart < 0) {    selectionStart=0;  }  if (selectionStart > docLength) {    selectionStart=docLength;  }  if (selectionEnd > docLength) {    selectionEnd=docLength;  }  if (selectionEnd < selectionStart) {    selectionEnd=selectionStart;  }  setCaretPosition(selectionStart);  moveCaretPosition(selectionEnd);}  }
class C{  public static String randomString(int length){  Random random=new Random();  String token="";  for (int i=0; i < length; i++) {    int x=random.nextInt(36);    token+=map(x);  }  return token;}  }
class C{  protected Field(String name){  super(name);}  }
class C{  public void testSettingANullDeployableProperty(){  Deployable deployableElement=new Deployable();  WAR war=new WAR("/some/file.war");  Map<String,String> properties=new HashMap<String,String>();  properties.put("context",null);  deployableElement.setProperties(properties);  deployableElement.setPropertiesOnDeployable(war,createDefaultProject("war",null));  assertEquals("",war.getContext());}  }
class C{  public Define(String functionName,Class<?> returnType,String name1,Class<?> type1,String name2,Class<?> type2){  this(functionName,returnType,new String[]{name1,name2},new Class<?>[]{type1,type2});}  }
class C{  public void testGetName(){  String expectedReturn="NONCE";  String actualReturn=nonceAttribute.getName();  assertEquals("getting name failed",expectedReturn,actualReturn);}  }
class C{  public boolean hasAnalyticsAccountId(){  return hasExtension(GwoAnalyticsAccountId.class);}  }
class C{  public static boolean checkClusteringByCat(List<List<DataPoint>> clusters){  Set<Integer> seenBefore=new IntSet();  for (  List<DataPoint> cluster : clusters) {    int thisClass=cluster.get(0).getCategoricalValue(0);    if (seenBefore.contains(thisClass) != false)     return false;    for (    DataPoint dp : cluster)     if (thisClass != dp.getCategoricalValue(0))     return false;  }  return true;}  }
class C{  public void addBottomGroup(@NotNull XValueGroup group){  myBottomGroups.add(group);}  }
class C{  public DetachedVarSymbol(long flags,Name name,Type type,Symbol owner){  super(flags,name,type,owner);  this.decl=null;}  }
class C{  protected void writeKMLBoundaries(XMLStreamWriter xmlWriter) throws IOException, XMLStreamException {  Iterable<? extends LatLon> outerBoundary=this.getOuterBoundary();  if (outerBoundary != null) {    xmlWriter.writeStartElement("outerBoundaryIs");    exportBoundaryAsLinearRing(xmlWriter,outerBoundary);    xmlWriter.writeEndElement();  }  for (int i=1; i < this.boundaries.size(); i++) {    xmlWriter.writeStartElement("innerBoundaryIs");    exportBoundaryAsLinearRing(xmlWriter,this.boundaries.get(i));    xmlWriter.writeEndElement();  }}  }
class C{  public TypeEditorMouseHandler(final JFrame owner,final JTree tree,final TypeManager typeManager,final TypeEditor typeEditor){  this.owner=owner;  this.tree=tree;  this.typeManager=typeManager;  this.typeEditor=typeEditor;}  }
class C{  public static double[] minmax(List<Double> values){  if (values.size() == 0) {    return new double[2];  }  double min=values.get(0);  double max=min;  int length=values.size();  for (int i=1; i < length; i++) {    double value=values.get(i);    min=Math.min(min,value);    max=Math.max(max,value);  }  return new double[]{min,max};}  }
class C{  public void write(OutStream out,boolean hasAlpha) throws IOException {  out.writeUI16(width);  if (hasAlpha) {    color.writeWithAlpha(out);  } else {    color.writeRGB(out);  }}  }
class C{  private void requestServiceForSelectedTab(){switch (tabMain.getSelectedIndex()) {case 0:    prt.setService(Kw1281Prot.SVC_NONE);  break;case 1:prt.setService(Kw1281Prot.SVC_NONE);break;case 2:prt.setService(cbFrameNum.getSelectedIndex() == 0 ? Kw1281Prot.SVC_READ_DATA_ALL : Kw1281Prot.SVC_READ_DATA_GRP);break;default :prt.setService(Kw1281Prot.SVC_NONE);}}  }
class C{  public Task<VcenterDataCenterRestRep> deactivate(URI id,boolean detachStorage){  URI deactivateUri=client.uriBuilder(getDeactivateUrl()).queryParam("detach-storage",detachStorage).build(id);  return postTaskURI(deactivateUri);}  }
class C{  private void tryInitTopology() throws GridClientException, InterruptedException {  boolean hasSrvs=routers.isEmpty();  final Collection<InetSocketAddress> connSrvs=(hasSrvs) ? new LinkedHashSet<>(srvs) : routers;  if (hasSrvs) {    try {      for (      GridClientNodeImpl node : top.nodes()) {        Collection<InetSocketAddress> endpoints=node.availableAddresses(cfg.getProtocol(),true);        List<InetSocketAddress> resolvedEndpoints=new ArrayList<>(endpoints.size());        for (        InetSocketAddress endpoint : endpoints)         if (!endpoint.isUnresolved())         resolvedEndpoints.add(endpoint);        boolean sameHost=node.attributes().isEmpty() || F.containsAny(U.allLocalMACs(),node.attribute(ATTR_MACS).toString().split(", "));        if (sameHost) {          Collections.sort(resolvedEndpoints,U.inetAddressesComparator(true));          connSrvs.addAll(resolvedEndpoints);        } else {          for (          InetSocketAddress endpoint : resolvedEndpoints)           if (!endpoint.getAddress().isLoopbackAddress())           connSrvs.add(endpoint);        }      }    } catch (    GridClientDisconnectedException ignored) {    }  }  connMgr.init(connSrvs);  Map<String,GridClientCacheMode> overallCaches=new HashMap<>();  for (  GridClientNodeImpl node : top.nodes())   overallCaches.putAll(node.caches());  for (  Map.Entry<String,GridClientCacheMode> entry : overallCaches.entrySet()) {    GridClientDataAffinity affinity=affinity(entry.getKey());    if (affinity instanceof GridClientPartitionAffinity && entry.getValue() != GridClientCacheMode.PARTITIONED)     log.warning(GridClientPartitionAffinity.class.getSimpleName() + " is used for a cache configured " + "for non-partitioned mode [cacheName="+ entry.getKey()+ ", cacheMode="+ entry.getValue()+ ']');  }}  }
class C{  private static boolean userHasRole(String privilegedRole){  Collection<? extends GrantedAuthority> authorities=SecurityContextHolder.getContext().getAuthentication().getAuthorities();  boolean result=false;  for (  GrantedAuthority authority : authorities) {    if (privilegedRole.equals(authority.getAuthority())) {      result=true;      break;    }  }  return result;}  }
class C{  protected boolean trackMessage(FunctionStreamingReplyMessage m){  this.msgsProcessed++;  if (m.isLastMessage()) {    this.numMsgs=m.getMessageNumber() + 1;  }  return this.msgsProcessed == this.numMsgs;}  }
class C{  public WriteLockedOffHeapHashMapFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory){  this(tableSource,storageEngineFactory,DEFAULT_TABLE_SIZE);}  }
class C{  protected void finalize() throws Throwable {  this.prototype=null;  this.root=null;  this.stack.clear();  this.stack=null;  super.finalize();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.339 -0500",hash_original_method="48C7554EE3F27E9D89A6C35F1696C3B9",hash_generated_method="7AABE886225F9C3DFAC6A2DE91418981") public DrmRawContent(InputStream inRawdata,int len,String mimeTypeStr) throws DrmException, IOException {  int mimeType;  id=-1;  inData=new BufferedInputStream(inRawdata,1024);  inDataLen=len;  if (DRM_MIMETYPE_MESSAGE_STRING.equals(mimeTypeStr))   mimeType=DRM_MIMETYPE_MESSAGE; else   if (DRM_MIMETYPE_CONTENT_STRING.equals(mimeTypeStr))   mimeType=DRM_MIMETYPE_CONTENT; else   throw new IllegalArgumentException("mimeType must be DRM_MIMETYPE_MESSAGE or DRM_MIMETYPE_CONTENT");  if (len <= 0)   throw new IllegalArgumentException("len must be > 0");  id=nativeConstructDrmContent(inData,inDataLen,mimeType);  if (JNI_DRM_FAILURE == id)   throw new DrmException("nativeConstructDrmContent() returned JNI_DRM_FAILURE");  rightsIssuer=nativeGetRightsAddress();  rawType=nativeGetDeliveryMethod();  if (JNI_DRM_FAILURE == rawType)   throw new DrmException("nativeGetDeliveryMethod() returned JNI_DRM_FAILURE");  mediaType=nativeGetContentType();  if (null == mediaType)   throw new DrmException("nativeGetContentType() returned null");}  }
class C{  public boolean isDeep(){  return deep;}  }
class C{  public static boolean isValidKey(byte[] key){  for (int i=0; i < KLVPacket.KEY_FIELD_SIZE; i++) {    if ((PrimerPack.KEY_MASK[i] != 0) && (PrimerPack.KEY[i] != key[i])) {      return false;    }  }  return true;}  }
class C{  public TypedPosition(int offset,int length,String type){  super(offset,length);  fType=type;}  }
class C{  public AgentInitializationException(){  super();  this.returnValue=0;}  }
class C{  public static ScoreSortBuilder scoreSort(){  return new ScoreSortBuilder();}  }
class C{  public static <TResult>TResult sendRequest(final Client client,final String uri,final Class<TResult> resultClass){  final WebTarget t=client.target(uri);  final Invocation.Builder b=t.request();  final Response r=b.get();  if (r.getStatus() == 200) {    return r.readEntity(resultClass);  } else {    throw new VstsHttpClientException(r.getStatus(),r.getStatusInfo().getReasonPhrase(),null);  }}  }
class C{  public MemberSelectTree buildNextMethodAccess(ExpressionTree iteratorExpr){  DeclaredType exprType=(DeclaredType)InternalUtils.typeOf(iteratorExpr);  assert exprType != null : "expression must be of declared type Iterator<>";  TypeElement exprElement=(TypeElement)exprType.asElement();  Symbol.MethodSymbol nextMethod=null;  for (  ExecutableElement method : ElementFilter.methodsIn(elements.getAllMembers(exprElement))) {    Name methodName=method.getSimpleName();    if (method.getParameters().size() == 0) {      if (methodName.contentEquals("next")) {        nextMethod=(Symbol.MethodSymbol)method;      }    }  }  assert nextMethod != null : "no next method declared for expression type";  Type.MethodType methodType=(Type.MethodType)nextMethod.asType();  Symbol.TypeSymbol methodClass=methodType.asElement();  Type elementType;  if (exprType.getTypeArguments().size() > 0) {    elementType=(Type)exprType.getTypeArguments().get(0);  } else {    elementType=symtab.objectType;  }  Type.MethodType updatedMethodType=new Type.MethodType(com.sun.tools.javac.util.List.<Type>nil(),elementType,com.sun.tools.javac.util.List.<Type>nil(),methodClass);  JCTree.JCFieldAccess nextAccess=(JCTree.JCFieldAccess)maker.Select((JCTree.JCExpression)iteratorExpr,nextMethod);  nextAccess.setType(updatedMethodType);  return nextAccess;}  }
class C{  private void loadDBColumnNames(){switch (mFragmentId) {case Common.ARTISTS_FRAGMENT:    mDBColumnsMap.put(GridViewCardsAdapter.TITLE_TEXT,DBAccessHelper.SONG_ARTIST);  mDBColumnsMap.put(GridViewCardsAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(GridViewCardsAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(GridViewCardsAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);mDBColumnsMap.put(GridViewCardsAdapter.FIELD_1,DBAccessHelper.ALBUMS_COUNT);break;case Common.ALBUM_ARTISTS_FRAGMENT:mDBColumnsMap.put(GridViewCardsAdapter.TITLE_TEXT,DBAccessHelper.SONG_ALBUM_ARTIST);mDBColumnsMap.put(GridViewCardsAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(GridViewCardsAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(GridViewCardsAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);mDBColumnsMap.put(GridViewCardsAdapter.FIELD_1,DBAccessHelper.ALBUMS_COUNT);break;case Common.ALBUMS_FRAGMENT:mDBColumnsMap.put(GridViewCardsAdapter.TITLE_TEXT,DBAccessHelper.SONG_ALBUM);mDBColumnsMap.put(GridViewCardsAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(GridViewCardsAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(GridViewCardsAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);mDBColumnsMap.put(GridViewCardsAdapter.FIELD_1,DBAccessHelper.SONG_ARTIST);break;case Common.PLAYLISTS_FRAGMENT:break;case Common.GENRES_FRAGMENT:mDBColumnsMap.put(GridViewCardsAdapter.TITLE_TEXT,DBAccessHelper.SONG_GENRE);mDBColumnsMap.put(GridViewCardsAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(GridViewCardsAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(GridViewCardsAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);mDBColumnsMap.put(GridViewCardsAdapter.FIELD_1,DBAccessHelper.GENRE_SONG_COUNT);break;case Common.FOLDERS_FRAGMENT:break;}}  }
class C{  @NonNull public static String join(@NonNull String delimiter,@NonNull String[] elements){  StringBuilder builder=new StringBuilder();  String separator="";  for (  String element : elements) {    builder.append(separator).append(element);    separator=delimiter;  }  return builder.toString();}  }
class C{  private static void MultiThreadedFD() throws Exception {  RandomAccessFile raf=null;  FileDescriptor fd=null;  int numThreads=2;  CountDownLatch done=new CountDownLatch(numThreads);  OpenClose[] fileOpenClose=new OpenClose[numThreads];  File MultipleThreadedFD=new File("MultipleThreadedFD");  try {    raf=new RandomAccessFile(MultipleThreadedFD,"rw");    fd=raf.getFD();    for (int count=0; count < numThreads; count++) {      fileOpenClose[count]=new OpenClose(fd,done);      fileOpenClose[count].start();    }    done.await();  }  finally {    try {      if (raf != null)       raf.close();      if (fd.valid()) {        throw new RuntimeException("FileDescriptor should not be valid");      }      if (fail) {        throw new RuntimeException("OpenClose thread tests failed.");      }    }  finally {      MultipleThreadedFD.delete();    }  }}  }
class C{  public void removeComponentSelectionListener(final ComponentSelectionListener l){  myListenerList.remove(ComponentSelectionListener.class,l);}  }
class C{  public static boolean segmentIntersects(double Ax,double Ay,double Bx,double By,double Cx,double Cy,double Dx,double Dy){  double s1_x=Bx - Ax;  double s1_y=By - Ay;  double s2_x=Dx - Cx;  double s2_y=Dy - Cy;  double s=(-s1_y * (Ax - Cx) + s1_x * (Ay - Cy)) / (-s2_x * s1_y + s1_x * s2_y);  double t=(s2_x * (Ay - Cy) - s2_y * (Ax - Cx)) / (-s2_x * s1_y + s1_x * s2_y);  return (s >= 0 && s <= 1 && t >= 0 && t <= 1);}  }
class C{  public static float min(final float a,final float b){  if (a > b) {    return b;  }  if (a < b) {    return a;  }  if (a != b) {    return Float.NaN;  }  int bits=Float.floatToRawIntBits(a);  if (bits == 0x80000000) {    return a;  }  return b;}  }
class C{  public HashAttributeSet(){  this(Attribute.class);}  }
class C{  @ConstructorProperties({"etchType","highlightColor","shadowColor"}) public EtchedBorder(int etchType,Color highlight,Color shadow){  this.etchType=etchType;  this.highlight=highlight;  this.shadow=shadow;}  }
class C{  public void paintDesktopIconBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    if (!isOpen()) {      throw new IOException("InputStreamReader is closed");    }    char[] buf=new char[1];    return read(buf,0,1) != -1 ? buf[0] : -1;  }}  }
class C{  public static void post_sticky(ModelModifiedMessage.event_type type,String package_name){  ModelModifiedMessage existing=EventBus.getDefault().getStickyEvent(ModelModifiedMessage.class);  if (existing != null) {    try {      existing.add_event(type,package_name);      EventBus.getDefault().post(new StickyUpdatedMessage());      return;    } catch (    ModelModifiedMessage.EventAlreadyProcessedException e) {      EventBus.getDefault().postSticky(new ModelModifiedMessage(type,package_name));      return;    }  }  EventBus.getDefault().postSticky(new ModelModifiedMessage(type,package_name));}  }
class C{  public CastExpression createCastExpression(){  CastExpressionImpl castExpression=new CastExpressionImpl();  return castExpression;}  }
class C{  public ViewSelectionModuleNode(final Window parent,final INaviModule module,final DefaultTreeModel model){  Preconditions.checkNotNull(module,"IE01821: Module argument can not be null");  m_dialog=parent;  m_module=module;  m_model=model;  m_module.addListener(m_internalModuleListener);  createChildren();}  }
class C{  public BuddyLabel(){  super();  initialize();  this.setText("bobbele");}  }
class C{  public synchronized void init(){  ArrayList<Warrant> tempList=new ArrayList<Warrant>();  List<String> systemNameList=_manager.getSystemNameList();  Iterator<String> iter=systemNameList.iterator();  while (iter.hasNext()) {    Warrant w=_manager.getBySystemName(iter.next());    if (!_warList.contains(w)) {      w.addPropertyChangeListener(this);    } else {      _warList.remove(w);    }    tempList.add(w);  }  for (int i=0; i < _warList.size(); i++) {    Warrant w=_warList.get(i);    if (!_warNX.contains(w)) {      w.removePropertyChangeListener(this);    }  }  for (int i=0; i < _warNX.size(); i++) {    tempList.add(_warNX.get(i));  }  _warList=tempList;}  }
class C{  public void mountDatastore(Datastore datastore){  try {    HostStorageSystem storageSystem=getStorageSystem();    String vmfsUuid=getVmfsVolumeUuid(datastore);    storageSystem.mountVmfsVolume(vmfsUuid);  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public CreateWindowClause addView(String namespace,String name,List<Expression> parameters){  views.add(View.create(namespace,name,parameters));  return this;}  }
class C{  private void afterIndexFsync(Result<Boolean> result,FsyncType fsyncType,ArrayList<SegmentFsyncCallback> fsyncListeners){  try {    if (fsyncType.isClose()) {      _isClosed=true;      _segment.finishWriting();      if (_pendingFlushEntries.size() > 0 || _pendingFsyncEntries.size() > 0) {        System.out.println("BROKEN_PEND: flush=" + _pendingFlushEntries.size() + " fsync="+ _pendingFsyncEntries.size()+ " "+ _pendingFlushEntries);      }      _readWrite.afterSequenceClose(_segment.getSequence());    }    for (    SegmentFsyncCallback listener : _fsyncListeners) {      listener.onFsync();    }    result.ok(true);  } catch (  Throwable exn) {    result.fail(exn);  }}  }
class C{  @Deprecated public boolean isRegionDefined(){  return selector.isDefined();}  }
class C{  public static void constantAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name);    if (!MiniLangUtil.isConstantAttribute(attributeValue)) {      handleError("Constant attribute \"" + name + "\" cannot contain an expression.",method,element);    }  }}  }
class C{  @Override public void start(){  schedExecutor.scheduleAtFixedRate(new Cleaner(),1,1,TimeUnit.MINUTES);}  }
class C{  public static IStatus validateIdentifier(String id,String sourceLevel,String complianceLevel){  if (scannedIdentifier(id,sourceLevel,complianceLevel) != null) {    return JavaModelStatus.VERIFIED_OK;  } else {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.bind(Messages.convention_illegalIdentifier,id),null);  }}  }
class C{  protected void ensureNotClosed() throws SQLException {  if (closed)   throw new SQLException("Statement is closed.");}  }
class C{  @Override public void close() throws IOException {  super.close();  FileUtils.forceDelete(f);}  }
class C{  @Override synchronized public void writeCV(int CV,int val,ProgListener p) throws ProgrammerException {  rcTag.setExpectedCv(cv);  progListener=p;  defaultProgrammer.writeCV(CV,val,new ProxyProgList());}  }
class C{  public void enable(){  setEnabled(true);}  }
class C{  @Override protected String defaultAssociatorString(){  return Apriori.class.getName();}  }
class C{  private ResourceUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public DocumentoInfo(){  super();}  }
class C{  String readLiteral(String source,int ofs,String token){  return readSubstring(source,ofs,ofs + token.length());}  }
class C{  @Override void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if (length != 4) {    throw new StunException("length invalid");  }  transportProtocol=attributeValue[offset];}  }
class C{  protected void computeMinMaxElevations(){  int len=this.elevations.length();  if (len == 0) {    this.minElevation=0;    this.maxElevation=0;    return;  }  double min=Double.MAX_VALUE;  double max=-min;  for (int i=0; i < len; i++) {    double v=this.elevations.getDouble(i);    if (v == this.missingDataFlag)     continue;    if (v < min)     min=v;    if (v > max)     max=v;  }  this.minElevation=min;  this.maxElevation=max;}  }
class C{  public DefaultRequest eventValue(Integer value){  setInteger(EVENT_VALUE,value);  return this;}  }
class C{  public void importClass(long pos,IdentifierToken t){  imports.addClass(t);}  }
class C{  @Transactional public <VO>VO create(Class<VO> voType,Object inputParam,User currentUser) throws Exception {  T po=transformer.param2PO(getClassT(),inputParam,getClassT().newInstance(),currentUser);  return createByPO(voType,po,currentUser);}  }
class C{  public boolean writePersistentInt(String key,int value){  try {    if (checkService()) {      return sService.writePersistentBytes(key,ByteBuffer.allocate(4).putInt(value).array());    }  } catch (  RemoteException e) {  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.LOOK_AHEAD;}  }
class C{  protected Model applyInnerLearner(ExampleSet exampleSet) throws OperatorException {  innerExampleSource.deliver(exampleSet);  executeInnerLearner();  return innerModelSink.getData(Model.class);}  }
class C{  private UiUtils(){  throw new AssertionError();}  }
class C{  @Override public void validateParameters(){  Set<String> uniqueIds=new HashSet<>();  for (  Step step : steps) {    uniqueIds.add(step.getIdentifier());  }  if (uniqueIds.size() != steps.size()) {    throw new InvalidTaskException("OrderedTask has steps with duplicate ids");  }}  }
class C{  public void registerEngineName(String name,ScriptEngineFactory factory){  if (name == null || factory == null)   throw new NullPointerException();  nameAssociations.put(name,factory);}  }
class C{  public static Deserializer coerceDeserializer(final byte[] serializedBytes,final HttpDeserializerResponseStrategy strategy) throws IOException {  final HttpResponse response=Mockito.mock(HttpResponse.class);  mockStatusCode(response,200);  final HttpEntity entity=Mockito.mock(HttpEntity.class);  final ByteArrayInputStream inputStream=new ByteArrayInputStream(serializedBytes);  Mockito.when(response.getEntity()).thenReturn(entity);  Mockito.when(entity.getContent()).thenReturn(inputStream);  return strategy.coerce(Mockito.mock(HttpRequestBase.class),response);}  }
class C{  public Boolean isWatch(){  return watch;}  }
class C{  public boolean stopAt(Object context,String key){  return false;}  }
class C{  public ReturnPrimitiveType createReturnPrimitiveType(){  ReturnPrimitiveTypeImpl returnPrimitiveType=new ReturnPrimitiveTypeImpl();  return returnPrimitiveType;}  }
class C{  @Override ObservedObject createObservedObject(ObjectName object){  final CounterMonitorObservedObject cmo=new CounterMonitorObservedObject(object);  cmo.setThreshold(initThreshold);  cmo.setModulusExceeded(false);  cmo.setEventAlreadyNotified(false);  cmo.setPreviousScanCounter(null);  return cmo;}  }
class C{  public static void removeTagFromAllNodes(final JFrame parent,final ZyGraph graph,final CTag tag){  final Collection<NaviNode> nodes=GraphHelpers.getNodes(graph);  try {    for (    final NaviNode n : nodes) {      n.getRawNode().removeTag(tag);    }  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00129: " + "Could not remove tag from nodes";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The tag '%s' could not be appended from all nodes.",tag.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The tag was removed from some nodes but not from all."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public boolean isProxyClass(String name){  return proxyClasses.get(name) != null;}  }
class C{  public SitemapsEntry(){  super();}  }
class C{  public RpfTocHandler(String parentDir){  this(parentDir,0);}  }
class C{  public static void copy(File from,OutputStream to) throws IOException {  asByteSource(from).copyTo(to);}  }
class C{  public void copyTo(@Name("destination") double[] destination,@Name("sourcePosition") @Defaulted int sourcePosition,@Name("destinationPosition") @Defaulted int destinationPosition,@Name("length") @Defaulted int length){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public void putAll(Map<ByteArrayWrapper,byte[]> copy){synchronized (myDatabase) {    myDatabase.putAll(copy);  }}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  public TreePath(TreePath initialPath,String... args){  this.addAll(initialPath);  for (  String pathElement : args) {    if (!WWUtil.isEmpty(pathElement))     this.add(pathElement);  }}  }
class C{  private void uninstallMouseListeners(){  if (mouseListener != null) {    getComponent().removeMouseListener(mouseListener);    getComponent().removeMouseMotionListener(mouseListener);    mouseListener=null;  }}  }
class C{  public static Constraint<CharSequence> regex(@NonNull final Pattern regex){  return new RegexConstraint(regex);}  }
class C{  public ExceptionHandlerBasicBlockBag(ExceptionHandlerBasicBlock[] l,ExceptionHandlerBasicBlockBag c){  local=l;  caller=c;}  }
class C{  private static void initializeMethodsForReflection(){  try {    sMethodGetSelectedText=InputConnection.class.getMethod("getSelectedText",int.class);    sMethodSetComposingRegion=InputConnection.class.getMethod("setComposingRegion",int.class,int.class);  } catch (  NoSuchMethodException exc) {  }  sMethodsInitialized=true;}  }
class C{  final public void println(String v){  try {    _out.println(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public OMGraphic edit(OMGraphic g,DrawingToolRequestor requestor){  return edit(g,requestor,g.getShowEditablePalette());}  }
class C{  public WFG5(int k,int l,int M){  super(k,l,M);}  }
class C{  public static Number mul(Number a,Number b){  if (isFloatingPoint(a) || isFloatingPoint(b)) {    return a.doubleValue() * b.doubleValue();  } else {    return a.longValue() * b.longValue();  }}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  public BranchDialog(final Shell parentShell,final TFSRepository repository,final String branchFromPath,String proposedBranchToPath,final boolean itemIsFolder){  super(parentShell);  Check.notNull(repository,"repository");  Check.notNull(branchFromPath,"branchFromPath");  this.repository=repository;  this.branchFromPath=branchFromPath;  this.itemIsFolder=itemIsFolder;  if (proposedBranchToPath == null) {    proposedBranchToPath="";  }  branchToPath=proposedBranchToPath;}  }
class C{  public int writeULong(int index,long ul){  this.writeByte(index,(byte)((ul >> 24) & 0xff));  this.writeByte(index + 1,(byte)((ul >> 16) & 0xff));  this.writeByte(index + 2,(byte)((ul >> 8) & 0xff));  this.writeByte(index + 3,(byte)(ul & 0xff));  return 4;}  }
class C{  public boolean hasValidData(){  return getFingerprint() != null && getRandValue() >= 0 && getDBTimestamp() > 1;}  }
class C{  private void calculateNonceClaim(final OAuth2Request request,final JWTClaimsSet.Builder idClaims){  final String nonce=(String)request.getExtensions().get(ConnectRequestParameters.NONCE);  if (!Strings.isNullOrEmpty(nonce)) {    idClaims.claim(ConnectRequestParameters.NONCE,nonce);    log.debug("{} is set to {}",ConnectRequestParameters.NONCE,nonce);  }}  }
class C{  public Object readMap(AbstractHessianInput in,String type) throws HessianProtocolException, IOException {  Deserializer deserializer=getDeserializer(type);  if (deserializer != null)   return deserializer.readMap(in); else   if (_hashMapDeserializer != null)   return _hashMapDeserializer.readMap(in); else {    _hashMapDeserializer=new MapDeserializer(HashMap.class);    return _hashMapDeserializer.readMap(in);  }}  }
class C{  public ChatTextSink(Document document){  this.document=document;}  }
class C{  public void invokeAndBlock(Runnable r,boolean dropEvents){  this.dropEvents=dropEvents;  try {    if (isEdt()) {      RunnableWrapper w=new RunnableWrapper(r,1);      RunnableWrapper.pushToThreadPool(w);synchronized (lock) {        try {          lock.wait(2);        } catch (        InterruptedException ex) {          ex.printStackTrace();        }      }      while (!w.isDone() && codenameOneRunning) {        edtLoopImpl();synchronized (lock) {          if (shouldEDTSleep()) {            impl.edtIdle(true);            try {              lock.wait(10);            } catch (            InterruptedException ex) {            }            impl.edtIdle(false);          }        }      }      if (w.getErr() != null) {        throw w.getErr();      }    } else {      r.run();    }  } catch (  RuntimeException re) {    Log.e(re);    throw re;  } finally {    this.dropEvents=false;  }}  }
class C{  protected String instanceToLibsvm(Instance inst){  StringBuffer result;  int i;  result=new StringBuffer("" + inst.classValue());  for (i=0; i < inst.numAttributes(); i++) {    if (i == inst.classIndex()) {      continue;    }    if (inst.value(i) == 0) {      continue;    }    result.append(" " + (i + 1) + ":"+ inst.value(i));  }  return result.toString();}  }
class C{  public void updateStorageUnitStatus(StorageUnitEntity storageUnitEntity,StorageUnitStatusEntity storageUnitStatusEntity,String reason){  storageUnitEntity.setStatus(storageUnitStatusEntity);  StorageUnitStatusHistoryEntity storageUnitStatusHistoryEntity=new StorageUnitStatusHistoryEntity();  storageUnitEntity.getHistoricalStatuses().add(storageUnitStatusHistoryEntity);  storageUnitStatusHistoryEntity.setStorageUnit(storageUnitEntity);  storageUnitStatusHistoryEntity.setStatus(storageUnitStatusEntity);  storageUnitStatusHistoryEntity.setReason(reason);  storageUnitDao.saveAndRefresh(storageUnitEntity);}  }
class C{  @Override public void clear(){  if (null != columnDictionaryInfo) {    columnDictionaryInfo.clear();    columnDictionaryInfo=null;  }}  }
class C{  public void testDoubleValuePositive2(){  String a="2746723894572364578265426346273456972";  double result=2.7467238945723645E36;  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  static int capacityForInitSize(int size){  int result=(size >> 1) + size;  return (result & ~(MAXIMUM_CAPACITY - 1)) == 0 ? result : MAXIMUM_CAPACITY;}  }
class C{  protected void customPaint(Graphics2D g,int width,int height){}  }
class C{  public Env<A> dupto(Env<A> that){  that.next=this;  that.outer=this.outer;  that.toplevel=this.toplevel;  that.enclClass=this.enclClass;  that.enclMethod=this.enclMethod;  return that;}  }
class C{  public Boolean isTrafficFilterOverrideAllowed(){  return trafficFilterOverrideAllowed;}  }
class C{  @Override public void invoke(@NotNull Project project,@NotNull PsiElement[] elements,DataContext dataContext){  final PsiElement targetContainer=dataContext == null ? null : LangDataKeys.TARGET_PSI_ELEMENT.getData(dataContext);  final Set<PsiElement> filesOrDirs=new HashSet<PsiElement>();  for (  MoveHandlerDelegate delegate : Extensions.getExtensions(MoveHandlerDelegate.EP_NAME)) {    if (delegate.canMove(dataContext) && delegate.isValidTarget(targetContainer,elements)) {      delegate.collectFilesOrDirsFromContext(dataContext,filesOrDirs);    }  }  if (!filesOrDirs.isEmpty()) {    for (    PsiElement element : elements) {      if (element instanceof PsiDirectory) {        filesOrDirs.add(element);      } else {        final PsiFile containingFile=element.getContainingFile();        if (containingFile != null) {          filesOrDirs.add(containingFile);        }      }    }    MoveFilesOrDirectoriesUtil.doMove(project,PsiUtilCore.toPsiElementArray(filesOrDirs),new PsiElement[]{targetContainer},null);    return;  }  doMove(project,elements,targetContainer,dataContext,null);}  }
class C{  public void paintSeparatorBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public AutoDeskewTransform(final List<Double> lambdas){  this(true,lambdas);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__AST_ELEMENT:    if (resolve)     return getAstElement();  return basicGetAstElement();case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__MODULE:if (resolve) return getModule();return basicGetModule();case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__DECLARED_DYNAMIC:return isDeclaredDynamic();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ZonesXMLLoader(final URI uri){  this.uri=uri;}  }
class C{  public int cacheSize(){  return this.constraints.size();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", namespace: ");  result.append(namespace);  result.append(", version: ");  result.append(version);  result.append(", description: ");  result.append(description);  result.append(", displayname: ");  result.append(displayname);  result.append(", category: ");  result.append(category);  result.append(')');  return result.toString();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String04() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  SSLContext sslContext;  for (int i=0; i < validValues.length; i++) {    sslContext=SSLContext.getInstance(validValues[i],defaultProviderName);    assertNotNull("Not SSLContext created",sslContext);    assertEquals("Invalid protocol",validValues[i],sslContext.getProtocol());    assertEquals("Invalid provider",defaultProvider,sslContext.getProvider());  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public DefaultIODescription(Class[] input,Class[] output){  this(input,output,PASS_UNUSED_INPUT_TO_OUTPUT);}  }
class C{  public synchronized boolean hasAttachment(){  return mHasAttachment;}  }
class C{  public void shutdown(ShutdownModeAmp mode){  stop(mode);  if (!_lifecycle.toDestroy()) {    return;  }  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(_classLoader);    TreeSet<SubSystem> systems=new TreeSet<SubSystem>(new StopComparator());    systems.addAll(_systemMap.values());    _systemMap.clear();    for (    SubSystem system : systems) {      try {        system.destroy();      } catch (      Throwable e) {        log.log(Level.WARNING,e.toString(),e);      }    }    WeakReference<SystemManager> globalRef=_globalSystemRef;    if (globalRef != null && globalRef.get() == this) {      _globalSystemRef=null;    }    log.fine(this + " destroyed");    _classLoader.destroy();  }  finally {    thread.setContextClassLoader(oldLoader);    _classLoader=null;  }}  }
class C{  public boolean intersects(Interval2D that){  if (!this.x.intersects(that.x))   return false;  if (!this.y.intersects(that.y))   return false;  return true;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.271 -0500",hash_original_method="5BE818A223A96394C31CAF6E13D4DDEA",hash_generated_method="94EB0F268A15AE6A6DF2A5D9518C61C6") public static void modifyRequestToAcceptGzipResponse(HttpRequest request){  request.addHeader("Accept-Encoding","gzip");}  }
class C{  private static void ImportPrefs(Preferences prefsNode,Element map){  NodeList entries=map.getChildNodes();  for (int i=0, numEntries=entries.getLength(); i < numEntries; i++) {    Element entry=(Element)entries.item(i);    prefsNode.put(entry.getAttribute("key"),entry.getAttribute("value"));  }}  }
class C{  public boolean isNativeInputSupported(){  return impl.isNativeInputSupported();}  }
class C{  public final void writeDouble(double v){  if (this.ignoreWrites)   return;  checkIfWritable();  ensureCapacity(8);  buffer.putDouble(v);}  }
class C{  public void paintLabelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  protected void saveSelectionDetail(){  Integer ID=getSelectedRowKey();  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_Product_ID",ID == null ? "0" : ID.toString());  if (isValidVObject(fPriceList_ID))   Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_PriceList_Version_ID",((Integer)fPriceList_ID.getValue()).toString());  if (isValidVObject(fWarehouse_ID))   Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_Warehouse_ID",((Integer)fWarehouse_ID.getValue()).toString());  if (m_M_AttributeSetInstance_ID == -1 || isMultipleResults()) {    Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID","0");    Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_Locator_ID","0");  } else {    Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID",String.valueOf(m_M_AttributeSetInstance_ID));    Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_Locator_ID",String.valueOf(m_M_Locator_ID));  }}  }
class C{  public void init(){  _log.info("From ECSObjectStorageDevice:init");}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  putAllImpl(map);}  }
class C{  public boolean preserveSep(){  return preserveSep;}  }
class C{  public static int[] concatAllInt(int[]... arrays){  int totalLength=0;  final int subArrayCount=arrays.length;  for (int i=0; i < subArrayCount; ++i) {    totalLength+=arrays[i].length;  }  int[] result=Arrays.copyOf(arrays[0],totalLength);  int offset=arrays[0].length;  for (int i=1; i < subArrayCount; ++i) {    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);    offset+=arrays[i].length;  }  return result;}  }
class C{  public SimpleFragmentIntent<F> putStringArrayListExtra(String name,ArrayList<String> value){  if (extras == null) {    extras=new Bundle();  }  extras.putStringArrayList(name,value);  return this;}  }
class C{  protected void testDataSetIsConsistent(String dataset,String baseTableName,String baseIdField,String buendiaTableName,String buendiaIdField) throws Exception {  executeDataSet(dataset);  Statement statement=getConnection().createStatement();  String query=String.format("SELECT origin.%2$s, origin.uuid, buendia.uuid " + "FROM %1$s origin " + "LEFT JOIN %3$s buendia ON origin.%2$s = buendia.%4$s "+ "WHERE origin.uuid <> buendia.uuid",baseTableName,baseIdField,buendiaTableName,buendiaIdField);  ResultSet results=statement.executeQuery(query);  int failures=0;  while (results.next()) {    failures++;    System.out.printf("WARNING: Record with ID #%d has inconsistent entry in " + "sync map.\nBase UUID: %s Sync Map UUID: %s\n",results.getInt(1),results.getString(2),results.getString(3));  }  if (failures > 0) {    fail(String.format("%d record(s) had inconsistent test data.",failures));  }}  }
class C{  public VisorIgfsMetrics add(VisorIgfsMetrics m){  assert m != null;  totalSpaceSz+=m.totalSpaceSz;  usedSpaceSz+=m.usedSpaceSz;  foldersCnt+=m.foldersCnt;  filesCnt+=m.filesCnt;  filesOpenedForRd+=m.filesOpenedForRd;  filesOpenedForWrt+=m.filesOpenedForWrt;  blocksRd+=m.blocksRd;  blocksRdRmt+=m.blocksRdRmt;  blocksWrt+=m.blocksWrt;  blocksWrtRmt+=m.blocksWrtRmt;  bytesRd+=m.bytesRd;  bytesRdTm+=m.bytesRdTm;  bytesWrt+=m.bytesWrt;  bytesWrtTm+=m.bytesWrtTm;  return this;}  }
class C{  public int compareTo(NameImpl obj){  if (this == obj) {    return 0;  }  int len1=size();  int len2=obj.size();  int n=Math.min(len1,len2);  int index1=0, index2=0;  while (n-- != 0) {    String comp1=get(index1++);    String comp2=obj.get(index2++);    if (syntaxTrimBlanks) {      comp1=comp1.trim();      comp2=comp2.trim();    }    int local;    if (syntaxCaseInsensitive) {      local=comp1.compareToIgnoreCase(comp2);    } else {      local=comp1.compareTo(comp2);    }    if (local != 0) {      return local;    }  }  return len1 - len2;}  }
class C{  private boolean approximateGraphsCheck(Graph g1,Graph g2){  final Iterator<Vertex> itV=g1.vertices();  final Iterator<Vertex> itVRead=g2.vertices();  while (itV.hasNext()) {    final Vertex v=itV.next();    final Vertex vRead=itVRead.next();    if (!v.equals(vRead)) {      return false;    }    final Iterator itVP=v.properties();    final Iterator itVPRead=vRead.properties();    while (itVP.hasNext()) {      final VertexProperty vp=(VertexProperty)itVP.next();      final VertexProperty vpRead=(VertexProperty)itVPRead.next();      if (!vp.value().equals(vpRead.value()) || !vp.equals(vpRead)) {        return false;      }    }  }  final Iterator<Edge> itE=g1.edges();  final Iterator<Edge> itERead=g2.edges();  while (itE.hasNext()) {    final Edge e=itE.next();    final Edge eRead=itERead.next();    if (!e.equals(eRead)) {      return false;    }    final Iterator itEP=e.properties();    final Iterator itEPRead=eRead.properties();    while (itEP.hasNext()) {      final Property ep=(Property)itEP.next();      final Property epRead=(Property)itEPRead.next();      if (!ep.value().equals(epRead.value()) || !ep.equals(epRead)) {        return false;      }    }  }  return true;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private static void addColumnValues(CatalogServiceRestRep service,ServiceFieldTableRestRep table,Map<String,String> values,Map<String,String> locked){  List<ServiceFieldRestRep> fields=ServiceDescriptorUtils.getAllFieldList(table.getItems());  int rowCount=0;  for (  ServiceFieldRestRep field : fields) {    if (!locked.containsKey(field.getName())) {      String[] columns=getColumnValue(table,field);      rowCount=Math.max(rowCount,columns.length);    }  }  for (  ServiceFieldRestRep field : fields) {    String[] columns=new String[rowCount];    if (locked.containsKey(field.getName())) {      String lockedValue=locked.get(field.getName());      for (int i=0; i < columns.length; i++) {        columns[i]=lockedValue;      }    } else {      String[] col=getColumnValue(table,field);      System.arraycopy(col,0,columns,0,col.length);    }    for (int i=0; i < columns.length; i++) {      String prefix=table.getName() + "[" + i+ "]";      ServiceFieldValidator.validateField(service,prefix,field,columns[i]);    }    values.put(field.getName(),TextUtils.formatCSV(columns));  }}  }
class C{  public void dragGestureRecognized(DragGestureEvent e){  if (log.isDebugEnabled()) {    log.debug("DragJLabel.dragGestureRecognized ");  }  if (okToDrag()) {    e.startDrag(DragSource.DefaultCopyDrop,this,this);  }}  }
class C{  public OlcbAddress[] split(){  if (aString.endsWith(";")) {    return null;  }  String[] pStrings=aString.split(";");  OlcbAddress[] retval=new OlcbAddress[pStrings.length];  for (int i=0; i < pStrings.length; i++) {    if (pStrings[i].equals("")) {      return null;    }    if (!hCode.reset(pStrings[i]).matches()) {      return null;    }    retval[i]=new OlcbAddress(pStrings[i]);    if (retval[i] == null) {      return null;    }  }  return retval;}  }
class C{  public Vector3f(Vector4f vector){  if (vector.w() != 0) {    this.points[0]=vector.x() / vector.w();    this.points[1]=vector.y() / vector.w();    this.points[2]=vector.z() / vector.w();  } else {    this.points[0]=vector.x();    this.points[1]=vector.y();    this.points[2]=vector.z();  }}  }
class C{  void composeTemplates(ElemTemplateElement templ) throws TransformerException {  templ.compose(this);  for (ElemTemplateElement child=templ.getFirstChildElem(); child != null; child=child.getNextSiblingElem()) {    composeTemplates(child);  }  templ.endCompose(this);}  }
class C{  void insertValueAtPosition(final long value,final int pos){  if (pos < 0 || pos >= getNumSamples()) {    throw new SketchesArgumentException("Insert position must be between 0 and " + getNumSamples() + ", inclusive. Received: "+ pos);  }  data_[pos]=value;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  approximation=(PolynomialApproximation)in.readObject();}  }
class C{  @SuppressWarnings("WeakerAccess") public final void clearSelections(){  if (selectedPositions.isEmpty())   return;  int oneItemPos=selectedPositions.size() == 1 ? (int)selectedPositions.toArray()[0] : -1;  selectedPositions.clear();  lastSelectedPos=-1;  if (oneItemPos != -1)   notifyItemChanged(oneItemPos); else   notifyDataSetChanged();}  }
class C{  public boolean startsWith(String str){  if (str == null) {    return false;  }  int len=str.length();  if (len == 0) {    return true;  }  if (len > size) {    return false;  }  for (int i=0; i < len; i++) {    if (buffer[i] != str.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public boolean openBufferInit(long length,long offset){  try {    if (handle == null) {      handle=MediaInfoLibrary.INSTANCE.New();    }  } catch (  LinkageError e) {    return false;  }  if (isLoaded()) {    return MediaInfoLibrary.INSTANCE.Open_Buffer_Init(handle,length,offset) > 0;  } else {    return false;  }}  }
class C{  public void addWindow(final ManagedWindow mw){  if (mw instanceof InternalManagedWindow) {    addDialog((InternalManagedWindow)mw);  } else {    throw new IllegalArgumentException("Unsupport ManagedWindow type: " + mw.getClass().getName());  }}  }
class C{  public boolean isClassInitializer(){  return methodInfo.isStaticInitializer();}  }
class C{  public void scan(Tree tree) throws E {  if (tree != null)   tree.accept(this);}  }
class C{  Instruction transform(Instruction call,Instruction prologue,BasicBlock target,IR ir){  int numParams=Call.getNumberOfParams(call);  RegisterOperand[] temps=new RegisterOperand[numParams];  for (int i=0; i < numParams; i++) {    Operand actual=Call.getClearParam(call,i);    temps[i]=ir.regpool.makeTemp(actual);    Instruction move=Move.create(IRTools.getMoveOp(temps[i].getType()),temps[i],actual);    move.copyPosition(call);    call.insertBefore(move);  }  for (int i=0; i < numParams; i++) {    RegisterOperand formal=Prologue.getFormal(prologue,i).copyD2D();    Instruction move=Move.create(IRTools.getMoveOp(formal.getType()),formal,temps[i].copyD2U());    move.copyPosition(call);    call.insertBefore(move);  }  BasicBlock myBlock=call.getBasicBlock();  Instruction dead=myBlock.lastRealInstruction();  while (dead != call) {    dead=dead.remove();  }  Instruction gotoInstr=Goto.create(GOTO,target.makeJumpTarget());  gotoInstr.copyPosition(call);  call.insertAfter(gotoInstr);  call.remove();  myBlock.deleteNormalOut();  myBlock.insertOut(target);  return myBlock.lastInstruction();}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public boolean isCarriedLoopIterator(Operand op){  return op.similar(carriedLoopIterator);}  }
class C{  public void redrawPiecesAndArtifacts(boolean forceRedraw){  if (!forceRedraw) {    for (int i=0; i < 8; i++) {      for (int j=0; j < squares[i].length; j++) {        if (squares[i][j].isDirty) {          squares[i][j].redraw();        }      }    }    for (int i=1; i < pieceJailSquares.length; i++) {      if (pieceJailSquares[i].isDirty) {        pieceJailSquares[i].redraw();      }    }  } else {    for (int i=0; i < 8; i++) {      for (int j=0; j < squares[i].length; j++) {        squares[i][j].redraw();      }    }    for (int i=1; i < pieceJailSquares.length; i++) {      pieceJailSquares[i].redraw();    }  }}  }
class C{  public CharBuffer insert(int offset,Object o){  return insert(offset,String.valueOf(o));}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public V first(K key){  key=sanitizeKey(key);  List<V> values=map.get(key);  return (values == null) ? null : values.get(0);}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static double sampleSkew(int size,double moment3,double sampleVariance){  int n=size;  double s=Math.sqrt(sampleVariance);  double m3=moment3 * n;  return n * m3 / ((n - 1) * (n - 2) * s* s* s);}  }
class C{  @Override public void firePropertyChange(String propertyName,float oldValue,float newValue){}  }
class C{  static public String nfp(int num,int digits){  return (num < 0) ? nf(num,digits) : ('+' + nf(num,digits));}  }
class C{  @LogMessageDoc(level="INFO",message="[{id}->{id}] Synchronizing local state to remote node",explanation="Normal state resynchronization is occurring") public void antientropy(Node node){  if (!rpcService.isConnected(node.getNodeId()))   return;  logger.info("[{}->{}] Synchronizing local state to remote node",getLocalNodeId(),node.getNodeId());  for (  SynchronizingStorageEngine store : storeRegistry.values()) {    if (Scope.LOCAL.equals(store.getScope())) {      if (node.getDomainId() != getClusterConfig().getNode().getDomainId())       continue;    } else     if (Scope.UNSYNCHRONIZED.equals(store.getScope())) {      continue;    }    IClosableIterator<Entry<ByteArray,List<Versioned<byte[]>>>> entries=store.entries();    try {      SyncMessage bsm=TProtocolUtil.getTSyncOfferMessage(store.getName(),store.getScope(),store.isPersistent());      int count=0;      while (entries.hasNext()) {        if (!rpcService.isConnected(node.getNodeId()))         return;        Entry<ByteArray,List<Versioned<byte[]>>> pair=entries.next();        KeyedVersions kv=TProtocolUtil.getTKeyedVersions(pair.getKey(),pair.getValue());        bsm.getSyncOffer().addToVersions(kv);        count+=1;        if (count >= 50) {          sendSyncOffer(node.getNodeId(),bsm);          bsm.getSyncOffer().unsetVersions();          count=0;        }      }      sendSyncOffer(node.getNodeId(),bsm);    } catch (    InterruptedException e) {      throw new RuntimeException(e);    } finally {      entries.close();    }  }}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public long environmentPointer(){  return envPtr;}  }
class C{  @Override public String toString(){  StringBuffer buff=new StringBuffer();  if (m_correlations == null) {    buff.append("Correlation attribute evaluator has not been built yet.");  } else {    buff.append("\tCorrelation Ranking Filter");    if (m_detailedOutput && m_detailedOutputBuff.length() > 0) {      buff.append("\n\tDetailed output for nominal attributes");      buff.append(m_detailedOutputBuff);    }  }  return buff.toString();}  }
class C{  public static String encodeString(String s){  return new String(encode(s.getBytes()));}  }
class C{  public static int[] convertIntegers(List<Integer> integers){  int[] ret=new int[integers.size()];  for (int i=0; i < ret.length; i++) {    ret[i]=integers.get(i).intValue();  }  return ret;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String resetToDefault(){  String outcome=null;  try {    String marketplaceId=model.getSelectedMarketplace();    Response response=getLandingpageService().resetLandingPage(marketplaceId);    ui.handle(INFO_SAVED);    model.setLandingpageType(defaultLandingpageType().name());    updateModelLandingpageConfig(response.getResult(POPublicLandingpageConfig.class));    updateModelAvailableServices(response.getResultList(POService.class));    loadFillinOptions(marketplaceId);  } catch (  ObjectNotFoundException e) {    ui.handleException(e);    outcome=CONCURRENT_MODIFICATION_ERROR;  }catch (  SaaSApplicationException e) {    ui.handleException(e);  }  return outcome;}  }
class C{  public void signalErrorToEnumerationAdapter(EnumerationDeletionContext aws,Throwable t){  aws.error=t;  aws.stage=AWSEnumerationDeletionStages.ERROR;  handleEnumerationRequestForDeletion(aws);}  }
class C{  public Display display(){  return display;}  }
class C{  protected YieldExpressionImpl(){  super();}  }
class C{  public void taskName(String taskName){  assert taskName != null;  this.taskName=taskName;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:44.533 -0500",hash_original_method="88F1B202F7B60E8AC7861421AE6F35A5",hash_generated_method="C5FA242F4A359EC31EDD6D0EE8CF7183") @Override public String toString(){  return mUuid.toString();}  }
class C{  public ServiceAlreadyExistsException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void open() throws IOException {  this.tuples=new TreeSet();  this.solrStreams=new ArrayList();  this.eofTuples=Collections.synchronizedMap(new HashMap());  if (this.streamContext != null && this.streamContext.getSolrClientCache() != null) {    this.cloudSolrClient=this.streamContext.getSolrClientCache().getCloudSolrClient(zkHost);  } else {    this.cloudSolrClient=new Builder().withZkHost(zkHost).build();    this.cloudSolrClient.connect();  }  constructStreams();  openStreams();}  }
class C{  public GraphWindowStream<K,EV> slice(Time size,EdgeDirection direction) throws IllegalArgumentException {switch (direction) {case IN:    return new GraphWindowStream<K,EV>(this.reverse().getEdges().keyBy(new NeighborKeySelector<K,EV>(0)).timeWindow(size));case OUT:  return new GraphWindowStream<K,EV>(getEdges().keyBy(new NeighborKeySelector<K,EV>(0)).timeWindow(size));case ALL:getEdges().keyBy(0).timeWindow(size);return new GraphWindowStream<K,EV>(this.undirected().getEdges().keyBy(new NeighborKeySelector<K,EV>(0)).timeWindow(size));default :throw new IllegalArgumentException("Illegal edge direction");}}  }
class C{  public static String addCategoryDefaults(HttpServletRequest request,HttpServletResponse response){  String itemGroupNumber=request.getParameter("itemGroupNumber");  String categoryId=request.getParameter("category_id");  String catalogId=CatalogWorker.getCurrentCatalogId(request);  ShoppingCart cart=getCartObject(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);  String controlDirective;  Map<String,Object> result;  BigDecimal totalQuantity;  Locale locale=UtilHttp.getLocale(request);  result=cartHelper.addCategoryDefaults(catalogId,categoryId,itemGroupNumber);  controlDirective=processResult(result,request);  if (controlDirective.equals(ERROR)) {    return "error";  } else {    totalQuantity=(BigDecimal)result.get("totalQuantity");    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("totalQuantity",UtilFormatOut.formatQuantity(totalQuantity.doubleValue()));    request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.add_category_defaults",messageMap,locale));    return "success";  }}  }
class C{  protected AbstractMRReply newReply(){  return null;}  }
class C{  public void onTiltLess(View view){  if (!checkReady()) {    return;  }  CameraPosition currentCameraPosition=mMap.getCameraPosition();  float currentTilt=currentCameraPosition.tilt;  float newTilt=currentTilt - 10;  newTilt=(newTilt > 0) ? newTilt : 0;  CameraPosition cameraPosition=new CameraPosition.Builder(currentCameraPosition).tilt(newTilt).build();  changeCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));}  }
class C{  protected static Class<?> testClassFor(String classname){  Class<?> result;  result=null;  try {    result=Class.forName(getTestClassname(classname));  } catch (  Exception e) {  }  return result;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String prefix;  String namespace;  String methName;  String fullName=m_arg0.execute(xctxt).str();  int indexOfNSSep=fullName.indexOf(':');  if (indexOfNSSep < 0) {    prefix="";    namespace=Constants.S_XSLNAMESPACEURL;    methName=fullName;  } else {    prefix=fullName.substring(0,indexOfNSSep);    namespace=xctxt.getNamespaceContext().getNamespaceForPrefix(prefix);    if (null == namespace)     return XBoolean.S_FALSE;    methName=fullName.substring(indexOfNSSep + 1);  }  if (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL)) {    try {      TransformerImpl transformer=(TransformerImpl)xctxt.getOwnerObject();      return transformer.getStylesheet().getAvailableElements().containsKey(new QName(namespace,methName)) ? XBoolean.S_TRUE : XBoolean.S_FALSE;    } catch (    Exception e) {      return XBoolean.S_FALSE;    }  } else {    ExtensionsProvider extProvider=(ExtensionsProvider)xctxt.getOwnerObject();    return extProvider.elementAvailable(namespace,methName) ? XBoolean.S_TRUE : XBoolean.S_FALSE;  }}  }
class C{  public RecordMakers(SourceInfo source,TopicSelector topicSelector,BlockingConsumer<SourceRecord> recorder){  this.source=source;  this.topicSelector=topicSelector;  JsonWriterSettings writerSettings=new JsonWriterSettings(JsonMode.STRICT,"","");  this.valueTransformer=null;  this.recorder=recorder;}  }
class C{  protected MeanPayloadTokenFilter(TokenStream input){  super(input);}  }
class C{  @SuppressWarnings("unchecked") public final T timeout(String timeout){  this.timeout=TimeValue.parseTimeValue(timeout,this.timeout,getClass().getSimpleName() + ".timeout");  return (T)this;}  }
class C{  public static int countArrowptErrors(Graph graph1,Graph graph2){  if (graph1 == null) {    throw new NullPointerException("The reference graph is missing.");  }  if (graph2 == null) {    throw new NullPointerException("The target graph is missing.");  }  graph2=GraphUtils.replaceNodes(graph2,graph1.getNodes());  int count=0;  for (  Edge edge1 : graph1.getEdges()) {    Node node1=edge1.getNode1();    Node node2=edge1.getNode2();    Edge edge2=graph2.getEdge(node1,node2);    if (edge1.getEndpoint1() == Endpoint.ARROW) {      if (edge2 == null) {        count++;      } else       if (edge2.getProximalEndpoint(edge1.getNode1()) != Endpoint.ARROW) {        count++;      }    }    if (edge1.getEndpoint2() == Endpoint.ARROW) {      if (edge2 == null) {        count++;      } else       if (edge2.getProximalEndpoint(edge1.getNode2()) != Endpoint.ARROW) {        count++;      }    }  }  for (  Edge edge1 : graph2.getEdges()) {    Node node1=edge1.getNode1();    Node node2=edge1.getNode2();    Edge edge2=graph1.getEdge(node1,node2);    if (edge1.getEndpoint1() == Endpoint.ARROW) {      if (edge2 == null) {        count++;      } else       if (edge2.getProximalEndpoint(edge1.getNode1()) != Endpoint.ARROW) {        count++;      }    }    if (edge1.getEndpoint2() == Endpoint.ARROW) {      if (edge2 == null) {        count++;      } else       if (edge2.getProximalEndpoint(edge1.getNode2()) != Endpoint.ARROW) {        count++;      }    }  }  return count;}  }
class C{  public Document createDocument(BufferedImage image,String identifier){  assert (image != null);  Document doc=new Document();  if (identifier != null) {    doc.add(new StringField(DocumentBuilder.FIELD_NAME_IDENTIFIER,identifier,Field.Store.YES));  }  Field[] fields=createDescriptorFields(image);  for (int i=0; i < fields.length; i++) {    doc.add(fields[i]);  }  return doc;}  }
class C{  public void clickNeverLoseBall(View view){  GameActivity.setNeverLoseBall(((CheckBox)view).isChecked());  updateControls();}  }
class C{  public TaskInfo[] taskInfo(){  if (!this.keepTaskList) {    throw new UnsupportedOperationException("Task info is not being kept!");  }  return this.taskList.toArray(new TaskInfo[this.taskList.size()]);}  }
class C{  public boolean hasManagerRole(){  for (  RoleAssignment roleAssignment : assignedRoles) {    if (roleAssignment.getRole().getRoleName().isManagerRole())     return true;  }  return false;}  }
class C{  private CorrelationMatrix(List<Node> variables,TetradMatrix matrix,int sampleSize){  super(variables,MatrixUtils.convertCovToCorr(matrix).copy(),sampleSize);}  }
class C{  public void tableChanged(WTableModelEvent e){  enableButtons();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().applyRelativeSubAdjustment(getInt(stack));  return new Long(stack.getUIMgrSafe().getVideoFrame().getSubtitleDelay());}  }
class C{  public void printRevisionEntry(RevisionEntry entry){  StringBuffer output=new StringBuffer();  output.append(" -- " + entry.getTitle().getPlainText());  output.append(", created on " + entry.getUpdated().toUiString() + " ");  output.append(" by " + entry.getModifyingUser().getName() + " - "+ entry.getModifyingUser().getEmail()+ "\n");  output.append("    " + entry.getHtmlLink().getHref());  out.println(output);}  }
class C{  public void testRandomPositions() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));  int numDocs=atLeast(47);  int max=1051;  int term=random().nextInt(max);  Integer[][] positionsInDoc=new Integer[numDocs][];  FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);  customType.setOmitNorms(true);  for (int i=0; i < numDocs; i++) {    Document doc=new Document();    ArrayList<Integer> positions=new ArrayList<>();    StringBuilder builder=new StringBuilder();    int num=atLeast(131);    for (int j=0; j < num; j++) {      int nextInt=random().nextInt(max);      builder.append(nextInt).append(" ");      if (nextInt == term) {        positions.add(Integer.valueOf(j));      }    }    if (positions.size() == 0) {      builder.append(term);      positions.add(num);    }    doc.add(newField(fieldName,builder.toString(),customType));    positionsInDoc[i]=positions.toArray(new Integer[0]);    writer.addDocument(doc);  }  IndexReader reader=writer.getReader();  writer.close();  int num=atLeast(13);  for (int i=0; i < num; i++) {    BytesRef bytes=new BytesRef("" + term);    IndexReaderContext topReaderContext=reader.getContext();    for (    LeafReaderContext leafReaderContext : topReaderContext.leaves()) {      PostingsEnum docsAndPosEnum=getDocsAndPositions(leafReaderContext.reader(),bytes);      assertNotNull(docsAndPosEnum);      int initDoc=0;      int maxDoc=leafReaderContext.reader().maxDoc();      if (random().nextBoolean()) {        initDoc=docsAndPosEnum.nextDoc();      } else {        initDoc=docsAndPosEnum.advance(random().nextInt(maxDoc));      }      do {        int docID=docsAndPosEnum.docID();        if (docID == DocIdSetIterator.NO_MORE_DOCS) {          break;        }        Integer[] pos=positionsInDoc[leafReaderContext.docBase + docID];        assertEquals(pos.length,docsAndPosEnum.freq());        final int howMany=random().nextInt(20) == 0 ? pos.length - random().nextInt(pos.length) : pos.length;        for (int j=0; j < howMany; j++) {          assertEquals("iteration: " + i + " initDoc: "+ initDoc+ " doc: "+ docID+ " base: "+ leafReaderContext.docBase+ " positions: "+ Arrays.toString(pos),pos[j].intValue(),docsAndPosEnum.nextPosition());        }        if (random().nextInt(10) == 0) {          if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {            break;          }        }      } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);    }  }  reader.close();  dir.close();}  }
class C{  public TeXFormula(String s) throws ParseException {  this(s,(String)null);}  }
class C{  public static int intCompareTo(Integer thisInt,Integer anotherInt){  int thisVal=thisInt.intValue();  int anotherVal=anotherInt.intValue();  return (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));}  }
class C{  public void addOption(Option option){synchronized (options) {    options.add(option);  }}  }
class C{  public CoreContainer(){  this(new SolrResourceLoader(SolrResourceLoader.locateSolrHome()));}  }
class C{  public boolean isPreferred(){  return preferred;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.backgroundPaint,stream);  SerialUtilities.writePaint(this.itemPaint,stream);}  }
class C{  public FPSSurfaceView removeAllChildren(){  mDisplayList.clear();  return this;}  }
class C{  public SolrCore create(CoreDescriptor dcore,boolean publishState){  if (isShutDown) {    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"Solr has shutdown.");  }  try {    if (zkSys.getZkController() != null) {      zkSys.getZkController().preRegister(dcore);    }    ConfigSet coreConfig=coreConfigService.getConfig(dcore);    log.info("Creating SolrCore '{}' using configuration from {}",dcore.getName(),coreConfig.getName());    SolrCore core=new SolrCore(dcore,coreConfig);    solrCores.addCreated(core);    if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {      core.getUpdateHandler().getUpdateLog().recoverFromLog();    }    registerCore(dcore.getName(),core,publishState);    return core;  } catch (  Exception e) {    coreInitFailures.put(dcore.getName(),new CoreLoadFailure(dcore,e));    log.error("Error creating core [{}]: {}",dcore.getName(),e.getMessage(),e);    throw new SolrException(ErrorCode.SERVER_ERROR,"Unable to create core [" + dcore.getName() + "]",e);  }}  }
class C{  public static void stripUnnecessaryComments(String lexer,String parser,Charset encoding){  try {    stripUnnecessaryComments(lexer,encoding);    stripUnnecessaryComments(parser,encoding);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.tanh(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Builder withButtonSize(int size){  params=new FrameLayout.LayoutParams(size,size);  return this;}  }
class C{  private void putInteger(long value,Address address){  if ((address.type & Op.REG) != 0) {    reg.set(address,value);  } else   if ((address.type & Op.MEM) != 0) {    if ((address.address < memAddressStart) || ((address.address + address.size) > (MEMSIZE + memAddressStart))) {      addressOutOfRange=true;      return;    }    long mask=255;    int bytebuffer=0;    for (int i=0; i < address.size; i++) {      bytebuffer=(int)(value & mask);      memory.set(address.address + i,bytebuffer);      value=value >> 8;    }  }}  }
class C{  public JPanelConfigLocale(){  initComponents();  jcboLocale.addActionListener(dirty);  jcboInteger.addActionListener(dirty);  jcboDouble.addActionListener(dirty);  jcboCurrency.addActionListener(dirty);  jcboPercent.addActionListener(dirty);  jcboDate.addActionListener(dirty);  jcboTime.addActionListener(dirty);  jcboDatetime.addActionListener(dirty);  List<Locale> availablelocales=new ArrayList<Locale>();  availablelocales.addAll(Arrays.asList(Locale.getAvailableLocales()));  addLocale(availablelocales,new Locale("eu","ES",""));  addLocale(availablelocales,new Locale("gl","ES",""));  Collections.sort(availablelocales,new LocaleComparator());  jcboLocale.addItem(new LocaleInfo(null));  for (  Locale l : availablelocales) {    jcboLocale.addItem(new LocaleInfo(l));  }  jcboInteger.addItem(DEFAULT_VALUE);  jcboInteger.addItem("#0");  jcboInteger.addItem("#,##0");  jcboDouble.addItem(DEFAULT_VALUE);  jcboDouble.addItem("#0.0");  jcboDouble.addItem("#,##0.#");  jcboCurrency.addItem(DEFAULT_VALUE);  jcboCurrency.addItem("\u00A4 #0.00");  jcboCurrency.addItem("'$' #,##0.00");  jcboPercent.addItem(DEFAULT_VALUE);  jcboPercent.addItem("#,##0.##%");  String[] dateStrings={"dd.MM.yy","dd.MM.yyyy","MM.dd.yy","MM.dd.yyyy","EEE, MMM d, yy","EEE, MMM d, yyyy","EEE, MMMM d, yy","EEE, MMMM d, yyyy","EEEE, MMMM d, yy","EEEE, MMMM d, yyyy"};  ComboBoxValModel dateListModel;  dateListModel=new ComboBoxValModel(new ArrayList<>(Arrays.asList(dateStrings)));  jcboDate.setModel(dateListModel);  String[] timeStrings={"h:mm","h:mm:ss","h:mm a","h:mm:ss a","H:mm","H:mm:ss","H:mm a","H:mm:ss a"};  ComboBoxValModel timeListModel;  timeListModel=new ComboBoxValModel(new ArrayList<>(Arrays.asList(timeStrings)));  jcboTime.setModel(timeListModel);  String[] timeDateStrings={"dd.MM.yy, H:mm","dd.MM.yy, H:mm","MM.dd.yy, H:mm","MM.dd.yy, H:mm","dd.MM.yyyy, H:mm","dd.MM.yyyy, H:mm","MM.dd.yyyy, H:mm","MM.dd.yyyy, H:mm","EEE, MMMM d yyyy, H:mm","EEEE, MMMM d yyyy, H:mm"};  ComboBoxValModel timeDateListModel;  timeDateListModel=new ComboBoxValModel(new ArrayList<>(Arrays.asList(timeDateStrings)));  jcboDatetime.setModel(timeDateListModel);}  }
class C{  static Varargs format(Varargs args){  LuaString fmt=args.checkstring(1);  final int n=fmt.length();  Buffer result=new Buffer(n);  int arg=1;  int c;  for (int i=0; i < n; ) {switch (c=fmt.luaByte(i++)) {case '\n':      result.append("\n");    break;default :  result.append((byte)c);break;case L_ESC:if (i < n) {if ((c=fmt.luaByte(i)) == L_ESC) {  ++i;  result.append((byte)L_ESC);} else {  arg++;  FormatDesc fdsc=new FormatDesc(args,fmt,i);  i+=fdsc.length;switch (fdsc.conversion) {case 'c':    fdsc.format(result,(byte)args.checkint(arg));  break;case 'i':case 'd':fdsc.format(result,args.checkint(arg));break;case 'o':case 'u':case 'x':case 'X':fdsc.format(result,args.checklong(arg));break;case 'e':case 'E':case 'f':case 'g':case 'G':fdsc.format(result,args.checkdouble(arg),fdsc.precision);break;case 'q':addquoted(result,args.checkstring(arg));break;case 's':{LuaString s=args.checkstring(arg);if (fdsc.precision == -1 && s.length() >= 100) {result.append(s);} else {fdsc.format(result,s);}}break;default :error("invalid option '%" + (char)fdsc.conversion + "' to 'format'");break;}}}}}return result.tostring();}  }
class C{  void removeInterLinksFromOtherLinkMaps(){  for (  ClusterLink l : newInterlinks.values()) {    inLinks.remove(l.getId());    outLinks.remove(l.getId());  }}  }
class C{  public boolean isUnidadRegistralVacia(){  boolean result=false;  if (StringUtils.isBlank(this.code_entity) && StringUtils.isBlank(this.name_entity) && StringUtils.isBlank(this.code_tramunit)&& StringUtils.isBlank(this.name_tramunit)) {    result=true;  }  return result;}  }
class C{  public final void removeMessages(int what,Object object){  mExec.removeMessages(what,object);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  int[] numbers=new int[10];  System.out.print("Enter ten number: ");  for (int i=0; i < numbers.length; i++)   numbers[i]=input.nextInt();  int[] distinctNumbers=eliminateDuplicates(numbers);  System.out.print("The distinct numbers are:");  for (  int e : distinctNumbers) {    if (e > 0)     System.out.print(" " + e);  }  System.out.println();}  }
class C{  public static void main(String[] argv){  runFilter(new SpreadSubsample(),argv);}  }
class C{  @Override public String toString(){  return "CUgraphicsResource[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public int intVersion(){  return uint16FromData(4);}  }
class C{  @Override public int hashCode(){  int result=rule != null ? rule.ordinal() : 0;  result=37 * result + (sources != null ? sources.hashCode() : 0);  return result;}  }
class C{  public Partial minus(ReadablePeriod period){  return withPeriodAdded(period,-1);}  }
class C{  private Symbol selectSym(JCFieldAccess tree,Symbol location,Type site,Env<AttrContext> env,ResultInfo resultInfo){  DiagnosticPosition pos=tree.pos();  Name name=tree.name;switch (site.getTag()) {case PACKAGE:    return rs.accessBase(rs.findIdentInPackage(env,site.tsym,name,resultInfo.pkind),pos,location,site,name,true);case ARRAY:case CLASS:  if (resultInfo.pt.hasTag(METHOD) || resultInfo.pt.hasTag(FORALL)) {    return rs.resolveQualifiedMethod(pos,env,location,site,name,resultInfo.pt.getParameterTypes(),resultInfo.pt.getTypeArguments());  } else   if (name == names._this || name == names._super) {    return rs.resolveSelf(pos,env,site.tsym,name);  } else   if (name == names._class) {    Type t=syms.classType;    List<Type> typeargs=allowGenerics ? List.of(types.erasure(site)) : List.<Type>nil();    t=new ClassType(t.getEnclosingType(),typeargs,t.tsym);    return new VarSymbol(STATIC | PUBLIC | FINAL,names._class,t,site.tsym);  } else {    Symbol sym=rs.findIdentInType(env,site,name,resultInfo.pkind);    if ((resultInfo.pkind & ERRONEOUS) == 0)     sym=rs.accessBase(sym,pos,location,site,name,true);    return sym;  }case WILDCARD:throw new AssertionError(tree);case TYPEVAR:Symbol sym=(site.getUpperBound() != null) ? selectSym(tree,location,capture(site.getUpperBound()),env,resultInfo) : null;if (sym == null) {log.error(pos,"type.var.cant.be.deref");return syms.errSymbol;} else {Symbol sym2=(sym.flags() & Flags.PRIVATE) != 0 ? rs.new AccessError(env,site,sym) : sym;rs.accessBase(sym2,pos,location,site,name,true);return sym;}case ERROR:return types.createErrorType(name,site.tsym,site).tsym;default :if (name == names._class) {Type t=syms.classType;Type arg=types.boxedClass(site).type;t=new ClassType(t.getEnclosingType(),List.of(arg),t.tsym);return new VarSymbol(STATIC | PUBLIC | FINAL,names._class,t,site.tsym);} else {log.error(pos,"cant.deref",site);return syms.errSymbol;}}}  }
class C{  public Enumeration<Permission> elements(){  return new PermissionsEnumerator(perms.elements());}  }
class C{  public short[][] production_table(){  return _production_table;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TFIELD;}  }
class C{  public static short[] insertAt(short[] dest,short[] src,int offset){  short[] temp=new short[dest.length + src.length - 1];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);  return temp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.377 -0500",hash_original_method="ED0B7D3300F52C8B0FEFDD6EE298A1FB",hash_generated_method="9EE9A5708759F920CC4788960746954F") public boolean arrowScroll(int direction){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJump=getMaxScrollAmount();  if (nextFocused != null && isWithinDeltaOfScreen(nextFocused,maxJump)) {    nextFocused.getDrawingRect(mTempRect);    offsetDescendantRectToMyCoords(nextFocused,mTempRect);    int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);    doScrollX(scrollDelta);    nextFocused.requestFocus(direction);  } else {    int scrollDelta=maxJump;    if (direction == View.FOCUS_LEFT && getScrollX() < scrollDelta) {      scrollDelta=getScrollX();    } else     if (direction == View.FOCUS_RIGHT && getChildCount() > 0) {      int daRight=getChildAt(0).getRight();      int screenRight=getScrollX() + getWidth();      if (daRight - screenRight < maxJump) {        scrollDelta=daRight - screenRight;      }    }    if (scrollDelta == 0) {      return false;    }    doScrollX(direction == View.FOCUS_RIGHT ? scrollDelta : -scrollDelta);  }  if (currentFocused != null && currentFocused.isFocused() && isOffScreen(currentFocused)) {    final int descendantFocusability=getDescendantFocusability();    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);    requestFocus();    setDescendantFocusability(descendantFocusability);  }  return true;}  }
class C{  public void close(){  try {    br.close();    fr.close();  } catch (  IOException ex) {    Logger.getLogger(LineReaderCtx.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  public Composer accelerationX(float accelerationX){  mAccelerationX=accelerationX;  return this;}  }
class C{  public void callGCTraceRenamed(GCTrace gcTrace){  ArgumentChecking.notNull(gcTrace,"gcTrace");  for (  GCTraceSetListener listener : listeners()) {    listener.gcTraceRenamed(gcTrace);  }}  }
class C{  public void addListener(ConnectableDeviceListener listener){  if (!listeners.contains(listener)) {    listeners.add(listener);  }}  }
class C{  private ODGFigure createPolygonFigure(Point2D.Double[] points,Map<AttributeKey,Object> a) throws IOException {  ODGPathFigure figure=new ODGPathFigure();  ODGBezierFigure bezier=new ODGBezierFigure();  for (  Point2D.Double p : points) {    bezier.addNode(new BezierPath.Node(p.x,p.y));  }  bezier.setClosed(true);  figure.removeAllChildren();  figure.add(bezier);  figure.setAttributes(a);  return figure;}  }
class C{  public void actionPerformed(ActionEvent e){  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  if (e.getSource() == bStart) {    bStart.setEnabled(false);    cmd_start();    bStart.setEnabled(true);  } else   if (e.getSource() == bSelectFile)   cmd_selectFile(); else   if (e.getSource() == fExecute)   cmd_execute();  setCursor(Cursor.getDefaultCursor());}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public void writeLocalVariableTable(Environment env,MemberDefinition field,DataOutputStream out,ConstantPool tab) throws IOException {  MemberDefinition locals[]=new MemberDefinition[maxvar];  int i=0;  if ((field != null) && (field.getArguments() != null)) {    int reg=0;    @SuppressWarnings("unchecked") Vector<MemberDefinition> v=(Vector<MemberDefinition>)field.getArguments();    for (Enumeration<MemberDefinition> e=v.elements(); e.hasMoreElements(); ) {      MemberDefinition f=e.nextElement();      locals[reg]=f;      reg+=f.getType().stackSize();    }  }  flowFields(env,first,locals);  LocalVariableTable lvtab=new LocalVariableTable();  for (i=0; i < maxvar; i++)   locals[i]=null;  if ((field != null) && (field.getArguments() != null)) {    int reg=0;    @SuppressWarnings("unchecked") Vector<MemberDefinition> v=(Vector<MemberDefinition>)field.getArguments();    for (Enumeration<MemberDefinition> e=v.elements(); e.hasMoreElements(); ) {      MemberDefinition f=e.nextElement();      locals[reg]=f;      lvtab.define(f,reg,0,maxpc);      reg+=f.getType().stackSize();    }  }  int pcs[]=new int[maxvar];  for (Instruction inst=first; inst != null; inst=inst.next) {switch (inst.opc) {case opc_istore:case opc_istore_0:case opc_istore_1:case opc_istore_2:case opc_istore_3:case opc_fstore:case opc_fstore_0:case opc_fstore_1:case opc_fstore_2:case opc_fstore_3:case opc_astore:case opc_astore_0:case opc_astore_1:case opc_astore_2:case opc_astore_3:case opc_lstore:case opc_lstore_0:case opc_lstore_1:case opc_lstore_2:case opc_lstore_3:case opc_dstore:case opc_dstore_0:case opc_dstore_1:case opc_dstore_2:case opc_dstore_3:      if (inst.value instanceof LocalVariable) {        LocalVariable v=(LocalVariable)inst.value;        int pc=(inst.next != null) ? inst.next.pc : inst.pc;        if (locals[v.slot] != null) {          lvtab.define(locals[v.slot],v.slot,pcs[v.slot],pc);        }        pcs[v.slot]=pc;        locals[v.slot]=v.field;      }    break;case opc_label:{    for (i=0; i < maxvar; i++) {      if (locals[i] != null) {        lvtab.define(locals[i],i,pcs[i],inst.pc);      }    }    int pc=inst.pc;    MemberDefinition[] labelLocals=((Label)inst).locals;    if (labelLocals == null) {      for (i=0; i < maxvar; i++)       locals[i]=null;    } else {      System.arraycopy(labelLocals,0,locals,0,maxvar);    }    for (i=0; i < maxvar; i++) {      pcs[i]=pc;    }    break;  }}}for (i=0; i < maxvar; i++) {if (locals[i] != null) {lvtab.define(locals[i],i,pcs[i],maxpc);}}lvtab.write(env,out,tab);}  }
class C{  public static void digestFile(String filename,String algorithm){  byte[] b=new byte[65536];  int read;  FileInputStream fis=null;  FileOutputStream fos=null;  try {    MessageDigest md=MessageDigest.getInstance(algorithm);    fis=new FileInputStream(filename);    while (fis.available() > 0) {      read=fis.read(b);      md.update(b,0,read);    }    byte[] digest=md.digest();    String fileNameBuffer=filename + "." + algorithm;    fos=new FileOutputStream(fileNameBuffer);    OutputStream encodedStream=MimeUtility.encode(fos,"base64");    encodedStream.write(digest);    fos.flush();  } catch (  Exception e) {    System.out.println("Error computing Digest: " + e);  } finally {    try {      fis.close();      fos.close();    } catch (    Exception ignored) {    }  }}  }
class C{  public void remove(int index){  removeTabAt(index);}  }
class C{  public UsageException(){  super();}  }
class C{  public static URL resolveURL(URL base,String target) throws MalformedURLException {  target=target.trim();  if (target.startsWith("?")) {    return fixPureQueryTargets(base,target);  }  return new URL(base,target);}  }
class C{  public static int compareTo(Number left,Number right){  return NumberMath.compareTo(left,right);}  }
class C{  public String toRFC1779String(Map<String,String> oidMap){  return toKeywordValueString(toKeyword(RFC1779,oidMap));}  }
class C{  public FixedsizeForgetfulHashMap(int size,int initialCapacity){  this(size,initialCapacity,0.75f);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public MysqlDriverManagerDataSource(String url,String username,String password){  setUrl(url);  setUsername(username);  setPassword(password);}  }
class C{  @Override public boolean isDirectory(Path f) throws IOException {  LOG.debug("is directory: {}",f.toString());  return false;}  }
class C{  public static void main(String[] args){  try {    weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Logging started");    TreeBuild builder=new TreeBuild();    Node top=null;    NodePlace arrange=new PlaceNode2();    top=builder.create(new FileReader(args[0]));    TreeVisualizer a=new TreeVisualizer(null,top,arrange);    a.setSize(800,600);    JFrame f;    f=new JFrame();    Container contentPane=f.getContentPane();    contentPane.add(a);    f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    f.setSize(800,600);    f.setVisible(true);  } catch (  IOException e) {  }}  }
class C{  public void redefine(ModelGroupDeclImpl oldMG){  modelGroup.redefine(oldMG);}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public String requestAccount(JSPRequestData reqd){  try {    RequestData rd=new RequestData(null,reqd.getUsername(),reqd.getPassword(),reqd.getRealname(),reqd.getEmail(),reqd.getAltEmail(),reqd.getHomepage(),reqd.getReason() + "\n" + "Institution: "+ reqd.getUniSchool(),reqd.getNotes());    if (!stub.requestAccount(rd))     return "Username already exists, please choose another one!";    return "";  } catch (  Exception ex) {    return checkException(ex);  }}  }
class C{  public static void copyNoClose(InputStream i,OutputStream o,int bufferSize) throws IOException {  byte[] buffer=new byte[bufferSize];  int size=i.read(buffer);  while (size > -1) {    o.write(buffer,0,size);    size=i.read(buffer);  }}  }
class C{  public static void assertNoDetachedStates(Automaton a){  Automaton a2=Operations.removeDeadStates(a);  assert a.getNumStates() == a2.getNumStates() : "automaton has " + (a.getNumStates() - a2.getNumStates()) + " detached states";}  }
class C{  public MapContext<K,V> standAloneChildStack(){  MapContext<K,V> standAloneChild=MapContext.createMapContext(this);  standAloneChild.push();  return standAloneChild;}  }
class C{  public static boolean isIntegerType(Class type){  return (type == byte.class || type == short.class || type == int.class || type == long.class);}  }
class C{  public static Config createEmptyConfigWithSomeDefaults(){  log.info("Creating an empty MATSim scenario.");  Config config=ConfigUtils.createConfig();  config.addModule(new UrbanSimParameterConfigModuleV3());  config.addModule(new M4UControlerConfigModuleV3());  config.addModule(new AccessibilityConfigGroup());  config.addModule(new MatrixBasedPtRouterConfigGroup());  config.vspExperimental().setVspDefaultsCheckingLevel(VspDefaultsCheckingLevel.abort);  config.plans().setActivityDurationInterpretation(PlansConfigGroup.ActivityDurationInterpretation.tryEndTimeThenDuration);  config.plans().setRemovingUnneccessaryPlanAttributes(true);  config.strategy().setFractionOfIterationsToDisableInnovation(0.8);  return config;}  }
class C{  @Override public double computeScoreNormalization(double cooccurrence,int similarNodeDegree,int nodeDegree){  return 1.0 / (similarNodeDegree + nodeDegree - cooccurrence);}  }
class C{  public void deleteDeployKey(Integer targetProjectId,Integer targetKeyId) throws IOException {  String tailUrl=GitlabProject.URL + "/" + targetProjectId+ GitlabSSHKey.KEYS_URL+ "/"+ targetKeyId;  retrieve().method("DELETE").to(tailUrl,Void.class);}  }
class C{  public static XMPMeta extractXMPMeta(InputStream is){  List<Section> sections=parse(is,true);  if (sections == null) {    return null;  }  for (  Section section : sections) {    if (hasXMPHeader(section.data)) {      int end=getXMPContentEnd(section.data);      byte[] buffer=new byte[end - XMP_HEADER_SIZE];      System.arraycopy(section.data,XMP_HEADER_SIZE,buffer,0,buffer.length);      try {        XMPMeta result=XMPMetaFactory.parseFromBuffer(buffer);        return result;      } catch (      XMPException e) {        Log.d(TAG,"XMP parse error",e);        return null;      }    }  }  return null;}  }
class C{  public void addMarker(AxisEnum axis,double position){  addMarker(axis,position,Color.red,1,new float[]{1});}  }
class C{  private void validateStorageUnitNotificationRegistrationUpdateRequest(StorageUnitNotificationRegistrationUpdateRequest request){  Assert.notNull(request,"A storage unit notification update request must be specified.");  Assert.hasText(request.getStorageUnitEventType(),"A storage unit event type must be specified.");  request.setStorageUnitEventType(request.getStorageUnitEventType().trim());  validateStorageUnitNotificationFilter(request.getStorageUnitNotificationFilter());  validateNotificationActions(request.getJobActions());  Assert.hasText(request.getNotificationRegistrationStatus(),"A notification registration status must be specified.");  request.setNotificationRegistrationStatus(request.getNotificationRegistrationStatus().trim());}  }
class C{  public static void printWarnings(Connection conn,PrintWriter pw){  if (conn != null) {    try {      printStackTrace(conn.getWarnings(),pw);    } catch (    SQLException e) {      printStackTrace(e,pw);    }  }}  }
class C{  private boolean validateImageDatastore(final State current,Set<String> datastoreSet){  if (datastoreSet.size() == 0) {    failTask(new Exception("No image datastore found"));    return false;  }  if (datastoreSet.size() == 1 && !datastoreSet.contains(current.sourceImageDatastore)) {    String datastore=datastoreSet.iterator().next();    failTask(new Exception("No image datastore found, sourceImageDatastore is " + current.sourceImageDatastore + ", image datastore in CloudStore is "+ datastore));    return false;  }  return true;}  }
class C{  private static Map<String,AssetFieldDescriptor> createAssetFields(List<ServiceFieldRestRep> fields,Map<String,ServiceFieldRestRep> providedFields){  Map<String,AssetFieldDescriptor> assetFields=Maps.newHashMap();  Set<String> availableTypes=Sets.newHashSet(ServiceFieldRestRep.getAssetTypes(providedFields.values()));  availableTypes.addAll(ServiceFieldRestRep.getAssetTypes(fields));  for (  ServiceFieldRestRep field : fields) {    String assetType=field.getAssetType();    List<String> dependencies=Lists.newArrayList();    for (    String requiredType : AssetOptionsApi.calculateAssetDependencies(assetType,availableTypes)) {      ServiceFieldRestRep dep=findFieldByAssetType(requiredType,fields,providedFields);      dependencies.add(dep.getName());    }    AssetFieldDescriptor assetField=createAssetField(field,dependencies);    assetFields.put(field.getName(),assetField);  }  return assetFields;}  }
class C{  private void saveWindowLocation(Point point){  if (point != null) {    if (getExtendedState() == Frame.NORMAL) {      if (logger.isDebugEnabled())       logger.debug("Saving preference " + PREF_WINDOW_POSITION + "="+ point.x+ ","+ point.y);      this.preferences.put(prefnzPrefix + PREF_WINDOW_POSITION,point.x + "," + point.y);    } else {      if (logger.isDebugEnabled())       logger.debug("Preference " + PREF_WINDOW_POSITION + " not saved, cause window state is not 'normal'.");    }  }}  }
class C{  @Override public synchronized void connect() throws IOException {  if (connected)   return;  socket=createSocket();  socket.connect(new InetSocketAddress(url.getHost(),url.getPort() != -1 ? url.getPort() : url.getDefaultPort()),getConnectTimeout());  Map<String,List<String>> requestProps=getRequestProperties();  connected=true;  headers=new HashMap<String,List<String>>();  outputStream=socket.getOutputStream();  inputStream=socket.getInputStream();  writeLine("GET " + ("".equals(url.getPath()) ? "/" : url.getPath()) + " HTTP/1.1");  writeLine("Host: " + url.getHost());  if (requestProps != null) {    for (    Map.Entry<String,List<String>> entry : requestProps.entrySet()) {      for (      String val : entry.getValue()) {        writeLine(entry.getKey() + ": " + val);      }    }  }  writeLine("");  responseLine=readResponseLine();  for (String line=readLine(); line != null && line.length() != 0; ) {    parseHeaderLine(line);    line=readLine();  }}  }
class C{  public ROCData createROCData(ExampleSet exampleSet,boolean useExampleWeights,ROCBias method){  Attribute label=exampleSet.getAttributes().getLabel();  exampleSet.recalculateAttributeStatistics(label);  Attribute predictedLabel=exampleSet.getAttributes().getPredictedLabel();  WeightedConfidenceAndLabel[] calArray=new WeightedConfidenceAndLabel[exampleSet.size()];  Attribute weightAttr=null;  if (useExampleWeights) {    weightAttr=exampleSet.getAttributes().getWeight();  }  Attribute labelAttr=exampleSet.getAttributes().getLabel();  String positiveClassName=null;  int positiveIndex=label.getMapping().getPositiveIndex();  if (label.isNominal() && (label.getMapping().size() == 2)) {    positiveClassName=labelAttr.getMapping().mapIndex(positiveIndex);  } else   if (label.isNominal() && (label.getMapping().size() == 1)) {    positiveClassName=labelAttr.getMapping().mapIndex(0);  } else {    throw new AttributeTypeException("Cannot calculate ROC data for non-classification labels or for labels with more than 2 classes.");  }  int index=0;  Iterator<Example> reader=exampleSet.iterator();  while (reader.hasNext()) {    Example example=reader.next();    WeightedConfidenceAndLabel wcl;    if (weightAttr == null) {      wcl=new WeightedConfidenceAndLabel(example.getConfidence(positiveClassName),example.getValue(labelAttr),example.getValue(predictedLabel));    } else {      wcl=new WeightedConfidenceAndLabel(example.getConfidence(positiveClassName),example.getValue(labelAttr),example.getValue(predictedLabel),example.getValue(weightAttr));    }    calArray[index++]=wcl;  }  Arrays.sort(calArray,new WeightedConfidenceAndLabel.WCALComparator(method));  double ratio=exampleSet.getStatistics(label,Statistics.COUNT,positiveClassName) / exampleSet.getStatistics(label,Statistics.COUNT,label.getMapping().mapIndex(label.getMapping().getNegativeIndex()));  slope=misclassificationCostsNegative / misclassificationCostsPositive;  slope=ratio / slope;  double truePositiveWeight=0.0d;  double totalWeight=0.0d;  double bestIsometricsTpValue=0;  bestThreshold=Double.POSITIVE_INFINITY;  double oldConfidence=1.0d;  ROCData rocData=new ROCData();  ROCPoint last=new ROCPoint(0.0d,0.0d,1.0d);  double oldLabel=-1;  for (int i=0; i < calArray.length; i++) {    WeightedConfidenceAndLabel wcl=calArray[i];    double currentConfidence=wcl.getConfidence();    boolean mustStartNewPoint=false;    mustStartNewPoint|=(currentConfidence != oldConfidence);    if (method != ROCBias.NEUTRAL) {      mustStartNewPoint|=(oldLabel != wcl.getLabel());    }    if (mustStartNewPoint) {      rocData.addPoint(last);      oldConfidence=currentConfidence;      oldLabel=wcl.getLabel();    }    double weight=wcl.getWeight();    double falsePositiveWeight=totalWeight - truePositiveWeight;    if (wcl.getLabel() == positiveIndex) {      truePositiveWeight+=weight;    } else {      double c=truePositiveWeight - (falsePositiveWeight * slope);      if (c > bestIsometricsTpValue) {        bestIsometricsTpValue=c;        bestThreshold=wcl.getConfidence();      }    }    totalWeight+=weight;    last=new ROCPoint(totalWeight - truePositiveWeight,truePositiveWeight,currentConfidence);  }  rocData.addPoint(last);  double c=truePositiveWeight - ((totalWeight - truePositiveWeight) * slope);  if (c > bestIsometricsTpValue) {    bestThreshold=Double.NEGATIVE_INFINITY;    bestIsometricsTpValue=c;  }  rocData.setTotalPositives(truePositiveWeight);  rocData.setTotalNegatives(totalWeight - truePositiveWeight);  rocData.setBestIsometricsTPValue(bestIsometricsTpValue / truePositiveWeight);  return rocData;}  }
class C{  public void testCompareToPosZero(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  assertEquals(1,aNumber.compareTo(bNumber));}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static boolean validateFlagBetweenValues(CFlags flags,String flagName,int lowValue,int highValue){  final int value=(Integer)flags.getValue(flagName);  if (value < lowValue) {    Diagnostic.error(ErrorType.INVALID_MIN_INTEGER_FLAG_VALUE,"--" + flagName,value + "",lowValue + "");    return false;  }  if (value > highValue) {    Diagnostic.error(ErrorType.INVALID_MAX_INTEGER_FLAG_VALUE,"--" + flagName,value + "",highValue + "");    return false;  }  return true;}  }
class C{  public boolean hasOption(final String option){  return getOptions().contains(StringUtils.toLowerCase(option));}  }
class C{  @Override public void addChild(WXComponent child,int index){  if (child == null || index < -1) {    return;  }  if (child instanceof WXBaseRefresh) {    if (!checkRefreshOrLoading(child)) {      mRefreshs.add(child);    }    return;  }  if (mChildren == null) {    mChildren=new ArrayList<>();  }  int count=mChildren.size();  index=index >= count ? -1 : index;  if (index == -1) {    mChildren.add(child);  } else {    mChildren.add(index,child);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof WeakProtectionDomainKey) {    Object referent=get();    return (referent != null) && (referent == ((WeakProtectionDomainKey)obj).get());  } else {    return false;  }}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public final void clear(){  items.clear();  iconCount=0;  dividerCount=0;  if (rawItems != null) {    rawItems.clear();  }  notifyOnDataSetChanged();}  }
class C{  public <T extends Serializable>int enqueue(final String topic,List<T> objects){  int messagesBuffered=0;  for (  T object : objects) {    final String value;    if (String.class.isAssignableFrom(object.getClass())) {      value=String.class.cast(object);    } else {      try {        value=_mapper.writeValueAsString(object);      } catch (      JsonProcessingException e) {        _logger.warn("Exception while serializing the object to a string. Skipping this object.",e);        continue;      }    }    try {      boolean addedToBuffer=_executorService.submit(new ProducerWorker(topic,value)).get();      if (addedToBuffer) {        messagesBuffered++;      }    } catch (    InterruptedException e) {      _logger.warn("Enqueue operation was interrupted by calling code.");      Thread.currentThread().interrupt();    }catch (    ExecutionException e) {      throw new SystemException(e);    }  }  return messagesBuffered;}  }
class C{  private HeronMasterDriverProvider(){}  }
class C{  public BBoxOverlapRatioValueSource(ValueSource rectValueSource,Rectangle queryExtent){  this(rectValueSource,true,queryExtent,0.25,0.0);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testParseUserWithEmptyField(){  try {    User.parseUser("");    fail("Should have raised an exception here");  } catch (  ContainerException expected) {    assertEquals("User property has empty value.",expected.getMessage());  }}  }
class C{  public boolean create(YouTubeVideo video){  if (checkIfExists(video.getId())) {    return false;  }  SQLiteDatabase db=dbHelper.getWritableDatabase();  ContentValues values=new ContentValues();  values.put(YouTubeVideoEntry.COLUMN_VIDEO_ID,video.getId());  values.put(YouTubeVideoEntry.COLUMN_TITLE,video.getTitle());  values.put(YouTubeVideoEntry.COLUMN_DURATION,video.getDuration());  values.put(YouTubeVideoEntry.COLUMN_THUMBNAIL_URL,video.getThumbnailURL());  values.put(YouTubeVideoEntry.COLUMN_VIEWS_NUMBER,video.getViewCount());  return db.insert(tableName,YouTubeVideoEntry.COLUMN_NAME_NULLABLE,values) > 0;}  }
class C{  protected void command(final CommandName parent,final Class<? extends BaseCommand> clazz){  CommandMetaData meta=clazz.getAnnotation(CommandMetaData.class);  if (meta == null) {    throw new IllegalStateException("no CommandMetaData annotation found");  }  if (meta.runsAt().isSupported(slaveMode)) {    bind(Commands.key(parent,meta.name(),meta.description())).to(clazz);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof GroupedStackedBarRenderer)) {    return false;  }  GroupedStackedBarRenderer that=(GroupedStackedBarRenderer)obj;  if (!this.seriesToGroupMap.equals(that.seriesToGroupMap)) {    return false;  }  return super.equals(obj);}  }
class C{  public static CountProjectionExpression count(Expression expression){  return new CountProjectionExpression(expression,false);}  }
class C{  @SuppressWarnings("unchecked") public final void testSetConstraints(){  Constraint<Object> constraint1=new ConstraintImplementation(true);  Constraint<Object> constraint2=new ConstraintImplementation(true);  Constraint<Object>[] constraints1=new Constraint[1];  constraints1[0]=constraint1;  Constraint<Object>[] constraints2=new Constraint[2];  constraints2[0]=constraint1;  constraints2[1]=constraint2;  ConjunctiveConstraint<Object> conjunctiveConstraint=new ConjunctiveConstraint<>(constraints1);  conjunctiveConstraint.setConstraints(constraints2);  assertEquals(constraints2,conjunctiveConstraint.getConstraints());}  }
class C{  public static <T extends NamedElement>T firstNamed(Collection<T> coll,String name){  for (  T t : coll) {    if (name.equals(t.getName()))     return t;  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.617 -0500",hash_original_method="3E7472F910A577F9E6FCB71153FF16E3",hash_generated_method="B67DF54C538B41794E04A6B32AF0573D") protected void stopTimer(){  try {    acquireTimerTaskSem();    try {      if (this.timerTask != null) {        this.timerTask.cancel();        this.timerTask=null;      }    }  finally {      releaseTimerTaskSem();    }  } catch (  Exception ex) {  }}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  static String generateErrorCorrection(CharSequence dataCodewords,int errorCorrectionLevel){  int k=getErrorCorrectionCodewordCount(errorCorrectionLevel);  char[] e=new char[k];  int sld=dataCodewords.length();  for (int i=0; i < sld; i++) {    int t1=(dataCodewords.charAt(i) + e[e.length - 1]) % 929;    int t2;    int t3;    for (int j=k - 1; j >= 1; j--) {      t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][j]) % 929;      t3=929 - t2;      e[j]=(char)((e[j - 1] + t3) % 929);    }    t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][0]) % 929;    t3=929 - t2;    e[0]=(char)(t3 % 929);  }  StringBuilder sb=new StringBuilder(k);  for (int j=k - 1; j >= 0; j--) {    if (e[j] != 0) {      e[j]=(char)(929 - e[j]);    }    sb.append(e[j]);  }  return sb.toString();}  }
class C{  PolynominalAttribute(String name,int valueType){  super(name,valueType);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void loadIcon(SkinSpecification spec){  iconsLoaded=true;  if (!spec.hasBackgrounds()) {    iconsLoaded=false;    return;  }  setContentAreaFilled(false);  try {    if (spec.backgrounds.size() < 2) {      System.out.println("Error: skin specification for a " + "Megamek Button does not contain at least " + "2 background images!");      iconsLoaded=false;    }    java.net.URI imgURL=new File(Configuration.widgetsDir(),spec.backgrounds.get(0)).toURI();    backgroundIcon=new ImageIcon(imgURL.toURL());    imgURL=new File(Configuration.widgetsDir(),spec.backgrounds.get(1)).toURI();    backgroundPressedIcon=new ImageIcon(imgURL.toURL());  } catch (  Exception e) {    System.out.println("Error: loading background icons for " + "a Megamekbutton!");    System.out.println("Error: " + e.getMessage());    iconsLoaded=false;  }}  }
class C{  protected long calculateStunConnCheckRTO(){  return 100;}  }
class C{  private static <T extends Comparable<T>>T max(T a,T b){  if (a == null || b == null) {    if (a == null) {      return b;    } else {      return a;    }  }  if (a.compareTo(b) >= 0) {    return a;  }  return b;}  }
class C{  public InExpression add(String propertyName){  this.getChildren().add(new PropertyValueExpression(propertyName));  return this;}  }
class C{  private void clearFrame(){  while (stack[top] != null)   top--;}  }
class C{  public void cancelAllTask(){  __cancelAllTask();}  }
class C{  public static int random(int min,int max){  int next=RANDOM.nextInt();  if ((next >= min) && (next <= max))   return next;  next+=Integer.MIN_VALUE;  if ((next >= min) && (next <= max))   return next;  final int interval=1 + max - min;  if (interval <= 0)   throw new Error("Interval [" + min + ".."+ max+ "] error");  return MathLib.abs(next % interval) + min;}  }
class C{  @Override public String unescapeName(final String name){  return name;}  }
class C{  @Override public void flush(){}  }
class C{  private static void checkBody(Vector body){  if (body == null || (body.size() == 0)) {    return;  }  if ((body.size() > 1) || !body.elementAt(0).getClass().equals(AST.LabeledStmtObj.getClass())) {    omitPC=false;    omitStutteringWhenDone=false;    return;  }  ;  AST.LabeledStmt lblStmt=(AST.LabeledStmt)body.elementAt(0);  if ((lblStmt.stmts == null) || (lblStmt.stmts.size() == 0)) {    return;  }  if ((lblStmt.stmts.size() > 1) || !lblStmt.stmts.elementAt(0).getClass().equals(AST.WhileObj.getClass())) {    omitPC=false;    omitStutteringWhenDone=false;    return;  }  ;  AST.While whileStmt=(AST.While)lblStmt.stmts.elementAt(0);  Vector tokens=whileStmt.test.tokens;  if (tokens.size() != 1) {    omitPC=false;    omitStutteringWhenDone=false;    return;  }  Vector line=(Vector)tokens.elementAt(0);  if (line.size() != 1) {    omitPC=false;    omitStutteringWhenDone=false;    return;  }  TLAToken tok=(TLAToken)line.elementAt(0);  if (!tok.string.equals("TRUE")) {    omitPC=false;    omitStutteringWhenDone=false;    return;  }  if ((whileStmt.labDo != null) && (whileStmt.labDo.size() > 0)) {    omitPC=false;  }  if (whileStmt.unlabDo == null) {    return;  }  for (int i=0; i < whileStmt.unlabDo.size(); i++) {    Object obj=whileStmt.unlabDo.elementAt(i);    if (obj.getClass().equals(AST.LabelIfObj.getClass()) || obj.getClass().equals(AST.LabelEitherObj.getClass()) || obj.getClass().equals(AST.LabeledStmtObj.getClass())) {      omitPC=false;      return;    }  }  return;}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  private static void writeHex(Word w,int bytes){  int hexDigits=bytes * (1 << LOG_HEX_DIGITS_IN_BYTE);  int nextDigit;  write(HEX_PREFIX);  for (int digitNumber=hexDigits - 1; digitNumber >= 0; digitNumber--) {    nextDigit=w.rshl(digitNumber << LOG_BITS_IN_HEX_DIGIT).toInt() & 0xf;    char nextChar=hexDigitCharacter[nextDigit];    add(nextChar);  }}  }
class C{  public void addTotalCompilationTime(long totalCompilationTime){  this.totalTotalCompilationTime+=totalCompilationTime;}  }
class C{  protected double[][] addComponents(Matrix a){  int n=this.rows();  int m=this.columns();  double[][] newComponents=new double[n][m];  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++)     newComponents[i][j]=components[i][j] + a.components[i][j];  }  return newComponents;}  }
class C{  public String toString(){  try {    String str=getAsString();    if (str != null)     return "\"" + str + "\"";    if (tag == tag_Null)     return "[DerValue, null]";    if (tag == tag_ObjectId)     return "OID." + getOID(); else     return "[DerValue, tag = " + tag + ", length = "+ length+ "]";  } catch (  IOException e) {    throw new IllegalArgumentException("misformatted DER value");  }}  }
class C{  private void takeTarget(){  state.connectTarget=connectDirect(disconnectTarget());}  }
class C{  public static IBinding resolveExpressionBinding(Expression expression,boolean goIntoCast){switch (expression.getNodeType()) {case ASTNode.SIMPLE_NAME:case ASTNode.QUALIFIED_NAME:    return ((Name)expression).resolveBinding();case ASTNode.FIELD_ACCESS:  return ((FieldAccess)expression).resolveFieldBinding();case ASTNode.SUPER_FIELD_ACCESS:return ((SuperFieldAccess)expression).resolveFieldBinding();case ASTNode.METHOD_INVOCATION:return ((MethodInvocation)expression).resolveMethodBinding();case ASTNode.SUPER_METHOD_INVOCATION:return ((SuperMethodInvocation)expression).resolveMethodBinding();case ASTNode.CLASS_INSTANCE_CREATION:return ((ClassInstanceCreation)expression).resolveConstructorBinding();case ASTNode.MARKER_ANNOTATION:case ASTNode.SINGLE_MEMBER_ANNOTATION:case ASTNode.NORMAL_ANNOTATION:return ((Annotation)expression).resolveAnnotationBinding();case ASTNode.ARRAY_ACCESS:return resolveExpressionBinding(((ArrayAccess)expression).getArray(),goIntoCast);case ASTNode.CAST_EXPRESSION:if (goIntoCast) {return resolveExpressionBinding(((CastExpression)expression).getExpression(),true);} else {return null;}case ASTNode.PARENTHESIZED_EXPRESSION:return resolveExpressionBinding(((ParenthesizedExpression)expression).getExpression(),goIntoCast);case ASTNode.PREFIX_EXPRESSION:return resolveExpressionBinding(((PrefixExpression)expression).getOperand(),goIntoCast);case ASTNode.POSTFIX_EXPRESSION:return resolveExpressionBinding(((PostfixExpression)expression).getOperand(),goIntoCast);default :return null;}}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return isHeadless() ? new BufferedImage(width,height,image.getType()) : getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  @Override public V putIfAbsent(final K k,final V v){  try {    final WeakReference<V> ref=newWeakRef(k,v,referenceQueue);    final WeakReference<V> oldRef=map.putIfAbsent(k,ref);    final V oldVal=oldRef == null ? null : oldRef.get();    if (oldRef != null && oldVal == null) {      if (map.replace(k,oldRef,ref)) {        if (queue != null) {synchronized (queue) {            if (queue.add(v) && DEBUG) {              log.debug("put: key=" + k + ", val="+ v);            }          }        }        didUpdate(k,ref,oldRef);        return null;      } else {        return putIfAbsent(k,v);      }    }    if (oldVal == null) {      if (queue != null) {synchronized (queue) {          if (queue.add(v) && DEBUG) {            log.debug("put: key=" + k + ", val="+ v);          }        }      }      didUpdate(k,ref,null);      return null;    }    return oldVal;  }  finally {    removeClearedEntries();  }}  }
class C{  public NativeAppElement findElementById(String id){  return findElement(By.id(id));}  }
class C{  public static void center(String s,PrintWriter pw){  int indent=(WIDTH / 2) - (s.length() / 2);  for (int i=0; i < indent; i++) {    pw.print(" ");  }  pw.println(s);}  }
class C{  private boolean reserveStock(MDocType dt,MOrderLine[] lines){  if (dt == null)   dt=MDocType.get(getCtx(),getC_DocType_ID());  boolean binding=!dt.isProposal();  if (DOCACTION_Void.equals(getDocAction()) || (MDocType.DOCSUBTYPESO_Quotation.equals(dt.getDocSubTypeSO()) && DOCACTION_Close.equals(getDocAction())))   binding=false;  boolean isSOTrx=isSOTrx();  log.fine("Binding=" + binding + " - IsSOTrx="+ isSOTrx);  int header_M_Warehouse_ID=getM_Warehouse_ID();  if (MDocType.DOCSUBTYPESO_StandardOrder.equals(dt.getDocSubTypeSO()) || MDocType.DOCBASETYPE_PurchaseOrder.equals(dt.getDocBaseType()))   header_M_Warehouse_ID=0;  BigDecimal Volume=Env.ZERO;  BigDecimal Weight=Env.ZERO;  for (int i=0; i < lines.length; i++) {    MOrderLine line=lines[i];    if (header_M_Warehouse_ID != 0) {      if (header_M_Warehouse_ID != line.getM_Warehouse_ID())       line.setM_Warehouse_ID(header_M_Warehouse_ID);      if (getAD_Org_ID() != line.getAD_Org_ID())       line.setAD_Org_ID(getAD_Org_ID());    }    BigDecimal target=binding ? line.getQtyOrdered() : Env.ZERO;    BigDecimal difference=target.subtract(line.getQtyReserved()).subtract(line.getQtyDelivered());    if (difference.signum() == 0) {      MProduct product=line.getProduct();      if (product != null) {        Volume=Volume.add(product.getVolume().multiply(line.getQtyOrdered()));        Weight=Weight.add(product.getWeight().multiply(line.getQtyOrdered()));      }      continue;    }    log.fine("Line=" + line.getLine() + " - Target="+ target+ ",Difference="+ difference+ " - Ordered="+ line.getQtyOrdered()+ ",Reserved="+ line.getQtyReserved()+ ",Delivered="+ line.getQtyDelivered());    MProduct product=line.getProduct();    if (product != null) {      if (product.isStocked()) {        BigDecimal ordered=isSOTrx ? Env.ZERO : difference;        BigDecimal reserved=isSOTrx ? difference : Env.ZERO;        int M_Locator_ID=0;        if (line.getM_AttributeSetInstance_ID() != 0)         M_Locator_ID=MStorage.getM_Locator_ID(line.getM_Warehouse_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),ordered,get_TrxName());        if (M_Locator_ID == 0) {          MWarehouse wh=MWarehouse.get(getCtx(),line.getM_Warehouse_ID());          M_Locator_ID=product.getM_Locator_ID();          if (M_Locator_ID != 0) {            MLocator locator=new MLocator(getCtx(),product.getM_Locator_ID(),get_TrxName());            if (locator.getM_Warehouse_ID() != wh.get_ID()) {              M_Locator_ID=wh.getDefaultLocator().getM_Locator_ID();            }          } else {            M_Locator_ID=wh.getDefaultLocator().getM_Locator_ID();          }        }        if (!MStorage.add(getCtx(),line.getM_Warehouse_ID(),M_Locator_ID,line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),line.getM_AttributeSetInstance_ID(),Env.ZERO,reserved,ordered,get_TrxName()))         return false;      }      line.setQtyReserved(line.getQtyReserved().add(difference));      if (!line.save(get_TrxName()))       return false;      Volume=Volume.add(product.getVolume().multiply(line.getQtyOrdered()));      Weight=Weight.add(product.getWeight().multiply(line.getQtyOrdered()));    }  }  setVolume(Volume);  setWeight(Weight);  return true;}  }
class C{  public Versioned<T> cloneVersioned(){  return new Versioned<T>(this.getValue(),this.version.clone());}  }
class C{  private void doDoubleSlipMouseClick(){switch (turnoutState()) {case 5:    setUpperWestToUpperEast();  break;case 7:setLowerWestToUpperEast();break;case 9:setUpperWestToLowerEast();break;case 11:setLowerWestToLowerEast();break;default :setUpperWestToLowerEast();}}  }
class C{  protected void sendFunctionGroup5(){  setSpeedSetting(this.speedSetting);  if (sendA2command) {    int locoAddr=address.getNumber();    if (address.isLongAddress()) {      locoAddr+=0xC000;    }    int data=0x00 | (f28 ? 0x80 : 0) | (f27 ? 0x40 : 0)| (f26 ? 0x20 : 0)| (f25 ? 0x10 : 0)| (f24 ? 0x08 : 0)| (f23 ? 0x04 : 0)| (f22 ? 0x02 : 0)| (f21 ? 0x01 : 0);    byte[] bl=NceBinaryCommand.nceLocoCmd(locoAddr,NceBinaryCommand.LOCO_CMD_FG5,(byte)data);    NceMessage m=NceMessage.createBinaryMessage(tc,bl);    tc.sendNceMessage(m,null);  } else {    byte[] result=jmri.NmraPacket.function21Through28Packet(address.getNumber(),address.isLongAddress(),getF21(),getF22(),getF23(),getF24(),getF25(),getF25(),getF27(),getF28());    NceMessage m=NceMessage.sendPacketMessage(tc,result);    tc.sendNceMessage(m,null);  }}  }
class C{  @PostConstruct public void init(){  initializeTableSettings();  buildComponent();  restorePreviousState();  setVisibleColumns(getVisbleColumns().toArray());  eventBus.subscribe(this);  setPageLength(SPUIDefinitions.PAGE_SIZE);}  }
class C{  static DLockGrantor createGrantor(DLockService dlock,long versionId){  return new DLockGrantor(dlock,versionId);}  }
class C{  public static String wrapWithMarkdownClassDiv(String html){  return new StringBuilder().append("<div class=\"markdown-body\">\n").append(html).append("\n</div>").toString();}  }
class C{  private void clearDataTables(){  dataTableMap.clear();}  }
class C{  public static <T>LazyDequeX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  protected void beginAnalysis(String treePath){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getAlbums();}  }
class C{  public static Range findStackedRangeBounds(TableXYDataset dataset){  return findStackedRangeBounds(dataset,0.0);}  }
class C{  private void showHideTableInfoPaneTextBinding(){  ReadOnlyBooleanProperty showingTableInfoPaneProperty=rootController.showTableInfoPaneProperty();  showHideTableInfoPaneMenuItem.textProperty().bind(Bindings.createStringBinding(null,showingTableInfoPaneProperty));}  }
class C{  private void publish(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String actionTaken=context.getString(R.string.toast_pub_success,(Object[])additionalArgs);  c.addAction(actionTaken);  Notify.toast(context,actionTaken,Toast.LENGTH_SHORT);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.277 -0400",hash_original_method="2E63AFB3890721DC23A1D2577002C0D4",hash_generated_method="CD825C828EB1BE52BC49F9B18474D5D3") private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<K,V> n=findFirst(); n != null; n=n.next) {    V v=n.getValidValue();    if (v != null) {      s.writeObject(n.key);      s.writeObject(v);    }  }  s.writeObject(null);}  }
class C{  public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == '+') {      buffer.write(' ');    } else     if (b == '%') {      try {        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          throw new DecoderException("Invalid URL encoding");        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        throw new DecoderException("Invalid URL encoding");      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  public boolean addressTypeUnique(){  return false;}  }
class C{  @Override public AbstractPropertiesHandler newPropertiesHandler(){  return new FileChooserBookmarksPropertiesHandler();}  }
class C{  public Area(final StendhalRPZone zone,int x,int y,int width,int height){  this.zone=zone;  final Rectangle2D myshape=new Rectangle2D.Double();  myshape.setRect(x,y,width,height);  this.shape=myshape;}  }
class C{  public Matrix arrayRightDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] / B.A[i][j];    }  }  return this;}  }
class C{  public void clearInputBuffer(){  if (inputBuffer != null)   inputBuffer.clear();  readableObjects.clear();}  }
class C{  public Operand popRef(){  Operand r=pop();  if (VM.VerifyAssertions)   opt_assert(r.isRef() || r.isAddress());  return r;}  }
class C{  public ProviderNotFoundException(String name,Throwable cause){  super(MessageFormat.format("no provider for {0}",name),cause);}  }
class C{  public void removeChild(RamResourceCore core){  if (children == null)   return;  RamResourceCore child;  for (int i=children.size() - 1; i >= 0; i--) {    child=(RamResourceCore)children.get(i);    if (child == core) {      children.remove(i);      break;    }  }}  }
class C{  @Override public String toString(){  return ("Compiler advice: " + className + " "+ methodName+ " "+ methodSig+ " "+ compiler+ "("+ optLevel+ ")");}  }
class C{  public Builder compressHigh(){  return set("compress",2);}  }
class C{  protected DragSupportAction(){  super("DragSupport Control");}  }
class C{  public void testGetMaxCRL(){  X509CRLSelector selector=new X509CRLSelector();  assertNull("Initially the maxCRL should be null.",selector.getMaxCRL());  BigInteger maxCRL=new BigInteger("10000");  selector.setMaxCRLNumber(maxCRL);  assertTrue("The result should be equal to specified.",maxCRL.equals(selector.getMaxCRL()));}  }
class C{  public InstructionIterator instructionIterator(){  return new InstructionIterator(firstInstruction,lastInstruction);}  }
class C{  protected Object convertPayload(Message<?> message){  Object payload=message.getPayload();  if (payload instanceof KafkaNull) {    return null;  } else {    return payload;  }}  }
class C{  private void outputIndentation(){  for (int i=0; i < m_indent; i++) {    m_out.print(m_basicIndent);  }}  }
class C{  @Override default Eval<OptionalDouble> minDouble(final ToDoubleFunction<? super T> fn){  return Eval.later(null);}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info(toString());  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setDefiniteDocumentNo();  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  public String value(int index) throws Exception {  return actualValue(index);}  }
class C{  public void put(String key,Object value){  if (key == null) {    throw new IllegalArgumentException("Key cannot be null");  }  Map<String,SabresDescriptor> schema=Schema.getSchema(name);  if (value == null && (schema == null || !schema.containsKey(key))) {    return;  }  SabresValue sabresValue=SabresValue.create(value);  if (!sabresValue.getDescriptor().getType().equals(SabresDescriptor.Type.Null)) {    if (schema != null && schema.containsKey(key)) {      if (!schema.get(key).equals(sabresValue.getDescriptor())) {        throw new IllegalArgumentException(String.format("Cannot set key %s to type %s. " + "Already set to type %s",key,sabresValue.getDescriptor().toString(),schema.get(key).toString()));      }    } else {      Map<String,SabresDescriptor> currentSchema=schemaChanges.get(name);      if (currentSchema == null) {        currentSchema=new ConcurrentHashMap<>();      }      currentSchema.put(key,sabresValue.getDescriptor());      schemaChanges.put(name,currentSchema);    }  }  values.put(key,sabresValue);  dirtyKeys.add(key);}  }
class C{  public final boolean isZero(){  int i;  for (i=0; i < size; i++) {    if (coeff[i] != null) {      if (!coeff[i].isZero()) {        return false;      }    }  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean optBoolean(String key){  return optBoolean(key,false);}  }
class C{  public void addAttribute(@NonNls final String name,final String value){  addAttributeImpl(name,StringUtil.convertLineSeparators(XmlStringUtil.escapeString(value,true,false)));}  }
class C{  @Override public boolean budgetaryCheck(final Map<String,Object> paramMap){  String cashbasedbudgetType=EMPTY_STRING, txnType=EMPTY_STRING;  BigDecimal debitAmt=null;  BigDecimal creditAmt=null;  BigDecimal txnAmt=null;  try {    String budgetCheckConfig=budgetCheckConfigService.getConfigValue();    if (budgetCheckConfig.equals("NONE"))     return true;    if (paramMap.get("mis.budgetcheckreq") != null && ((Boolean)paramMap.get("mis.budgetcheckreq")).equals(false))     return true;    if (paramMap.get("debitAmt") != null)     debitAmt=(BigDecimal)paramMap.get("debitAmt");    if (paramMap.get("creditAmt") != null)     creditAmt=(BigDecimal)paramMap.get("creditAmt");    if (debitAmt == null && creditAmt == null)     throw new ValidationException(EMPTY_STRING,"Both Debit and Credit amount is null");    if (debitAmt != null && debitAmt.compareTo(BigDecimal.ZERO) == 0 && creditAmt != null && creditAmt.compareTo(BigDecimal.ZERO) == 0)     throw new ValidationException(EMPTY_STRING,"Both Debit and Credit amount is zero");    if (debitAmt != null && debitAmt.compareTo(BigDecimal.ZERO) > 0 && creditAmt != null && creditAmt.compareTo(BigDecimal.ZERO) > 0)     throw new ValidationException(EMPTY_STRING,"Both Debit and Credit amount is greater than zero");    List<AppConfigValues> list;    list=appConfigValuesService.getConfigValuesByModuleAndKey(EGF,"budgetaryCheck_budgettype_cashbased");    if (list.isEmpty())     throw new ValidationException(EMPTY_STRING,"budgetaryCheck_budgettype_cashbased is not defined in AppConfig");    cashbasedbudgetType=list.get(0).getValue();    if (cashbasedbudgetType.equalsIgnoreCase("Y")) {      if (LOGGER.isDebugEnabled())       LOGGER.debug("cashbasedbudgetType==" + cashbasedbudgetType);    } else {      if (debitAmt != null && debitAmt.compareTo(BigDecimal.ZERO) > 0) {        txnType="debit";        txnAmt=debitAmt;      } else {        txnType="credit";        txnAmt=creditAmt;      }      paramMap.put("txnAmt",txnAmt);      paramMap.put("txnType",txnType);      return checkCondition(paramMap);    }  } catch (  final ValidationException v) {    throw v;  }catch (  final Exception e) {    throw new ValidationException(EMPTY_STRING,e.getMessage());  }  return true;}  }
class C{  public static NalUnitHeader extract(int position,byte[] h264Packet){  if (h264Packet == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid H264 packet");  }  NalUnitHeader header=new NalUnitHeader(false,0,0);  extract(position,h264Packet,header);  return header;}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (s == null)   s=new java.io.PrintWriter(System.err);  try {    super.printStackTrace(s);  } catch (  Exception e) {  }  boolean isJdk14OrHigher=false;  try {    Throwable.class.getMethod("getCause",(Class<?>)null);    isJdk14OrHigher=true;  } catch (  NoSuchMethodException nsme) {  }  if (!isJdk14OrHigher) {    Throwable exception=m_exception;    for (int i=0; (i < 10) && (null != exception); i++) {      s.println("---------");      try {        exception.printStackTrace(s);      } catch (      Exception e) {        s.println("Could not print stack trace...");      }      if (exception instanceof TransformerException) {        TransformerException se=(TransformerException)exception;        Throwable prev=exception;        exception=se.getException();        if (prev == exception) {          exception=null;          break;        }      } else {        exception=null;      }    }  }}  }
class C{  public void cancel(){  pause();  mRunnable=null;}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  public static byte[] toByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(Math.max(32,in.available()));  copy(in,out);  return out.toByteArray();}  }
class C{  public void testCreateMultipleResourceTokenValues() throws Exception {  setUpResourceFile();  Tomcat4xStandaloneLocalConfiguration conf=(Tomcat4xStandaloneLocalConfiguration)configuration;  Resource resource=new Resource("myDataSource","javax.sql.DataSource");  resource.setParameter("password","pass");  resource.setParameter("username","foo");  Resource resource2=new Resource("otherDataSource","javax.sql.DataSource");  resource2.setParameter("password","bar");  resource2.setParameter("username","gazonk");  conf.addResource(resource);  conf.addResource(resource2);  conf.configureResources(container);  String xml=configuration.getFileHandler().readTextFile(getDataSourceConfigurationFile(null),"UTF-8");  XMLAssert.assertXpathEvaluatesTo("javax.sql.DataSource","//Resource[@name='myDataSource']/@type",xml);  XMLAssert.assertXpathEvaluatesTo("Container","//Resource[@name='myDataSource']/@auth",xml);  XMLAssert.assertXpathEvaluatesTo("foo","//ResourceParams[@name='myDataSource']/parameter[name='username']/value",xml);  XMLAssert.assertXpathEvaluatesTo("pass","//ResourceParams[@name='myDataSource']/parameter[name='password']/value",xml);  XMLAssert.assertXpathEvaluatesTo("javax.sql.DataSource","//Resource[@name='otherDataSource']/@type",xml);  XMLAssert.assertXpathEvaluatesTo("Container","//Resource[@name='otherDataSource']/@auth",xml);  XMLAssert.assertXpathEvaluatesTo("gazonk","//ResourceParams[@name='otherDataSource']/parameter[name='username']/value",xml);  XMLAssert.assertXpathEvaluatesTo("bar","//ResourceParams[@name='otherDataSource']/parameter[name='password']/value",xml);}  }
class C{  public void addParameterValue(org.oscm.xsd.ServiceParameter param){  if (localParameterValue == null) {    localParameterValue=new org.oscm.xsd.ServiceParameter[]{};  }  localParameterValueTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameterValue);  list.add(param);  this.localParameterValue=(org.oscm.xsd.ServiceParameter[])list.toArray(new org.oscm.xsd.ServiceParameter[list.size()]);}  }
class C{  public static JSONValue value(Boolean value){  return value ? TRUE : FALSE;}  }
class C{  public Collection obtenerDetallesConsultaXUsuario(ServiceClient user,ConsultaVO consulta_VO){  Collection detallesConsultas=this.getDetallesConsulta(consulta_VO.getId());  return detallesConsultas;}  }
class C{  public static void checkEquals(BigDecimal expected,BigDecimal actual,int scale){  checkEqualsWithGivenScale("",expected,actual,scale);}  }
class C{  public static void main(String[] args){  int[][] matrix=getMatrix();  print(matrix);  int[] rows=allRow(matrix);  int count=0;  for (int i=0; i < rows.length; i++) {    if (rows[i] >= 0)     System.out.println("All " + rows[i] + "s on row "+ (i + 1)); else     count++;    if (count == rows.length)     System.out.println("No same numbers on a row");  }  int[] columns=allColumn(matrix);  count=0;  for (int i=0; i < columns.length; i++) {    if (columns[i] >= 0)     System.out.println("All " + columns[i] + "s on column "+ (i + 1)); else     count++;    if (count == columns.length)     System.out.println("No same numbers on a column");  }  int n=allMajorDiagonal(matrix);switch (n) {case 0:case 1:    System.out.println("All " + n + "s on the major diagonal");  break;default :System.out.println("No same numbers on the major diagonal");}n=allSubDiagonal(matrix);switch (n) {case 0:case 1:System.out.println("All " + n + "s on the sub-diagonal");break;default :System.out.println("No same numbers on the sub-diagonal");}}  }
class C{  void hide(long duration){  if (mShowing && (mTargetAlpha != 0 || durationEndsEarlier(duration))) {    if (DEBUG)     Slog.v(TAG,"hide: duration=" + duration);    show(mLayer,0,duration);  }}  }
class C{  public boolean stem(char[] word){  return stem(word,word.length);}  }
class C{  private static void usage(){  for (  String s : USAGE_MESSAGE) {    System.out.println(s);  }  for (  String s : WELCOME_MESSAGE) {    System.out.println(s);  }}  }
class C{  @ObjectiveCName("initWithAppTitle:withAppId:withAppKey:withDeviceTitle:withDeviceId:") public ApiConfiguration(String appTitle,int appId,String appKey,String deviceTitle,String deviceString){  this.appTitle=appTitle;  this.appId=appId;  this.appKey=appKey;  this.deviceTitle=deviceTitle;  this.deviceString=deviceString;}  }
class C{  @Override public QueryBase visit(final ASTAskQuery node,Object data) throws VisitorException {  final QueryBase queryRoot=getQueryBase(node,data,QueryType.ASK);  handleNamedSubqueryClause(node,queryRoot);  handleWhereClause(node,queryRoot);  final SliceNode slice=new SliceNode(0L,1L);  queryRoot.setSlice(slice);  handleBindings(node,queryRoot);  return queryRoot;}  }
class C{  IfdData(int ifdId){  mIfdId=ifdId;}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  if (!m_initialTestStructureKnown) {    m_inputHeader=new Instances(data,0);  }  m_attributeMap=null;  if (m_modelPath != null && m_modelPath.length() > 0) {    return;  }  getCapabilities().testWithFail(data);  m_Classifier.buildClassifier(data);  m_modelHeader=new Instances(data,0);}  }
class C{  public void divideEquals(Complex c){  double scale=c.real * c.real + c.imag * c.imag;  double tmp=c.real * real + c.imag * imag;  imag=c.real * imag - c.imag * real;  real=tmp;  this.divideEquals(scale);}  }
class C{  public static boolean terminateSimulation(double time){  if (time <= clock) {    return false;  } else {    terminateAt=time;  }  return true;}  }
class C{  public InlineKeyboardMarkup toKeyboard(){  InlineKeyboardMarkup.InlineKeyboardMarkupBuilder builder=InlineKeyboardMarkup.builder();  if (rows.isEmpty()) {    return null;  }  rows.stream().map(null).forEach(null);  return builder.build();}  }
class C{  private void initNamespaces(){  Stack stack;  MappingRecord nn;  nn=new MappingRecord(EMPTYSTRING,EMPTYSTRING,-1);  stack=createPrefixStack(EMPTYSTRING);  stack.push(nn);  nn=new MappingRecord(XML_PREFIX,"http://www.w3.org/XML/1998/namespace",-1);  stack=createPrefixStack(XML_PREFIX);  stack.push(nn);}  }
class C{  public static String removeDuplicateWhitespace(String text){  return WHITESPACE.matcher(text).replaceAll(" ");}  }
class C{  public boolean isBanned(){  return time < 0 || (System.currentTimeMillis() < time);}  }
class C{  public String displayModelInOldFormatTipText(){  return "Use old format for model output. The old format is " + "better when there are many clusters. The new format " + "is better when there are fewer clusters and many attributes.";}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public ActionForward redirectForwardMethod(HttpServletRequest request,String pMethodName,String methodName){  ActionForward ret=new ActionForward();  ret.setPath(request.getServletPath() + request.getPathInfo() + "?"+ pMethodName+ "="+ methodName);  ret.setRedirect(true);  return ret;}  }
class C{  public MultiTextEdit(){  super(0,Integer.MAX_VALUE);  fDefined=false;}  }
class C{  public static boolean lengthValueWrite(OutputStream outputStream,JSONObject m){  if (outputStream == null || m == null) {    return false;  }  try {    byte[] encodedMessage=Exchange.lengthValueEncode(m).array();    outputStream.write(encodedMessage);    outputStream.flush();    return true;  } catch (  IOException e) {    log.error("Length/value write failed with exception: ",e);    return false;  }}  }
class C{  public JComponent createComponent(){  return createCheckboxGroup();}  }
class C{  private void validateAndUpdateProperties(Map<String,String> propsMap,boolean bReset){  for (  Map.Entry<String,String> prop : propsMap.entrySet()) {    if (prop.getKey() == null || prop.getKey().isEmpty()) {      throw APIException.badRequests.propertyIsNullOrEmpty();    }    String validPropVal=_propertiesConfigurationValidator.getValidPropValue(prop.getKey(),prop.getValue(),true,bReset);    propsMap.put(prop.getKey(),validPropVal);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.459 -0500",hash_original_method="5B67F8BB651F008F63750FC6E33E54E8",hash_generated_method="2C3C30068D027B23EB056019115F81F5") protected void clearOrCreateWindow(String name){  if (mWindow == null) {    mWindow=new CursorWindow(name);  } else {    mWindow.clear();  }}  }
class C{  public Builder rotate(float degrees,float pivotX,float pivotY){  rotationDegrees=degrees;  rotationPivotX=pivotX;  rotationPivotY=pivotY;  hasRotationPivot=true;  return this;}  }
class C{  public CLIOutputResponse status(final StatusRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  addFlag(cliArgs,"--ignore-externals",request.isIgnoreExternals());  addFlag(cliArgs,"--no-ignore",request.isShowIgnored());  addFlag(cliArgs,"--quiet",!request.isShowUnversioned());  addFlag(cliArgs,"--show-updates",request.isShowUpdates());  addFlag(cliArgs,"--verbose",request.isVerbose());  addOptionList(cliArgs,"--changelist",request.getChangeLists());  addOption(cliArgs,"--depth",request.getDepth());  cliArgs.add("status");  final CommandLineResult result=runCommand(null,cliArgs,projectPath,addWorkingCopyPathIfNecessary(request.getPaths()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public final boolean parentOf(ThreadGroup g){  while (g != null) {    if (this == g) {      return true;    }    g=g.parent;  }  return false;}  }
class C{  BitMatrix buildFunctionPattern(){  int dimension=getDimensionForVersion();  BitMatrix bitMatrix=new BitMatrix(dimension);  bitMatrix.setRegion(0,0,9,9);  bitMatrix.setRegion(dimension - 8,0,8,9);  bitMatrix.setRegion(0,dimension - 8,9,8);  int max=alignmentPatternCenters.length;  for (int x=0; x < max; x++) {    int i=alignmentPatternCenters[x] - 2;    for (int y=0; y < max; y++) {      if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {        continue;      }      bitMatrix.setRegion(alignmentPatternCenters[y] - 2,i,5,5);    }  }  bitMatrix.setRegion(6,9,1,dimension - 17);  bitMatrix.setRegion(9,6,dimension - 17,1);  if (versionNumber > 6) {    bitMatrix.setRegion(dimension - 11,0,3,6);    bitMatrix.setRegion(0,dimension - 11,6,3);  }  return bitMatrix;}  }
class C{  default B addCanPlaceOnMaterial(final BlockMaterialData material){  this.meta().addCanPlaceOnMaterial(material);  return this.getBuilder();}  }
class C{  @Override public Response delete(){  clientRequestContext.setMethod(HttpMethod.DELETE);  return sendRequest(clientRequestContext);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (index_1: ");  result.append(index_1);  result.append(')');  return result.toString();}  }
class C{  private void deleteCurrentLicenseFileOnDisk(){  File licenseFile=new File(LicenseConstants.LICENSE_FILE_PATH);  if (licenseFile.exists()) {    licenseFile.delete();  }}  }
class C{  boolean shouldShowErrorCodeInBar(){  return !(ChromeVersionInfo.isStableBuild() || ChromeVersionInfo.isBetaBuild());}  }
class C{  public void removeTagDefinition(int tagId){  getTagInfo().delete(tagId);}  }
class C{  public static double distL2(float[] h1,float[] h2){  assert (h1.length == h2.length);  double sum=0d;  for (int i=0; i < h1.length; i++) {    sum+=(h1[i] - h2[i]) * (h1[i] - h2[i]);  }  return Math.sqrt(sum);}  }
class C{  public static Array listWithQuotesToArray(String list,String delimiter,String quotes){  if (list.length() == 0)   return new ArrayImpl();  int len=list.length();  int last=0;  char[] del=delimiter.toCharArray();  char[] quo=quotes.toCharArray();  char c;  char inside=0;  ArrayImpl array=new ArrayImpl();  try {    for (int i=0; i < len; i++) {      c=list.charAt(i);      for (int y=0; y < quo.length; y++) {        if (c == quo[y]) {          if (c == inside)           inside=0; else           if (inside == 0)           inside=c;          continue;        }      }      for (int y=0; y < del.length; y++) {        if (inside == 0 && c == del[y]) {          array._append(list.substring(last,i));          last=i + 1;          break;        }      }    }    if (last <= len)     array.append(list.substring(last));  } catch (  ExpressionException e) {  }  return array;}  }
class C{  public static JSONArray toJSONArray(JSONArray names,String string) throws JSONException {  return toJSONArray(names,new JSONTokener(string));}  }
class C{  public String readLine() throws IOException {  return readLine(false);}  }
class C{  public static Map<Integer,Set<Object[]>> createPerArityGroups(Object[] objects,int max){  Map<Integer,Set<Object[]>> result=new LinkedHashMap<>();  result.put(0,Collections.singleton(new Object[0]));  for (int i=1; i <= max; i++) {    Set<Object[]> newSet=new LinkedHashSet<>();    for (    Object[] oneSmaller : result.get(i - 1)) {      for (      Object object : objects) {        newSet.add(CollectionsExt.addToArray(oneSmaller,object));      }    }    result.put(i,newSet);  }  return result;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.FLOAT_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private static Predicate<String> fileEndsWith(String extension){  return null;}  }
class C{  public void verifyLog(String version) throws Exception {  File logDir=new File(masterLogDir,version);  if (logDir.isDirectory() && logDir.canRead()) {    logger.info("Reading from log directory: " + logDir.getAbsolutePath());  } else {    throw new Exception("Unable to find log directory: " + logDir.getAbsolutePath());  }  DiskLog log=new DiskLog();  log.setReadOnly(true);  log.setLogDir(logDir.getAbsolutePath());  log.prepare();  long maxSeqno=scanLog(log);  logger.info("Maximum seqno=" + maxSeqno);  Assert.assertEquals("Checking max seqno from log",7,maxSeqno);  log.release();}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:33.666 -0500",hash_original_method="FAE53FCD1CA8F33ECA2437ABBFBE85CF",hash_generated_method="46FBC679AB395A203BA80D20DE3C76DA") @Override public int read(byte[] buffer,int offset,int byteCount) throws IOException {  if (closed) {    throw new IOException("Stream is closed");  }  if (eos) {    return -1;  }  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  return super.read(buffer,offset,byteCount);}  }
class C{  @LargeTest public void testPropertiesMPEGVGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";  final int aspectRatio=MediaProperties.ASPECT_RATIO_4_3;  final int fileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_MPEG4;  final int duration=26933;  final int videoBitrate=533000;  final int audioBitrate=128000;  final int fps=15;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=48000;  final int audioChannel=2;  final int videoProfile=MediaProperties.MPEG4Profile.MPEG4ProfileSimple;  final int videoLevel=MediaProperties.MPEG4Level.MPEG4Level1;  final int width=640;  final int height=MediaProperties.HEIGHT_480;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  private void updatePreviewTransform(int incomingWidth,int incomingHeight){  updatePreviewTransform(incomingWidth,incomingHeight,false);}  }
class C{  private static void writeToFile(InputStream in,File file){  try {    OutputStream out=new FileOutputStream(file);    byte[] buf=new byte[1024];    int len;    while ((len=in.read(buf)) > 0) {      out.write(buf,0,len);    }    out.close();    in.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  @RequestMapping(value="/admin/tags/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteTag(@PathVariable Long id){  log.debug("REST request to delete Tag : {}",id);  tagRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("tag",id.toString())).build();}  }
class C{  public final boolean find(XSComponent c){  return c.apply(this);}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public static void add(List<String> options,char option,double value){  add(options,"" + option,value);}  }
class C{  public void testDecodeAttributeBody() throws StunException {  byte[] attributeValue=msgFixture.mappedAddress;  char offset=Attribute.HEADER_LENGTH;  char length=(char)(attributeValue.length - offset);  addressAttribute.decodeAttributeBody(attributeValue,offset,length);  assertEquals("AddressAttribute.decode() did not properly decode the port field.",MsgFixture.ADDRESS_ATTRIBUTE_PORT,addressAttribute.getPort());  assertTrue("AddressAttribute.decode() did not properly decode the address field.",Arrays.equals(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS,addressAttribute.getAddressBytes()));}  }
class C{  protected int checkGooglePlayServicesAvailable(final Context context){  return GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(context);}  }
class C{  private static int parseInt(String value,int beginIndex,int endIndex) throws NumberFormatException {  if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {    throw new NumberFormatException(value);  }  int i=beginIndex;  int result=0;  int digit;  if (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value);    }    result=-digit;  }  while (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value);    }    result*=10;    result-=digit;  }  return -result;}  }
class C{  protected void addIncludedFromResponse(OddObject oddObject,JSONObject response) throws JSONException {  JSONArray included=JSON.getJSONArray(response,"included",false);  if (included != null)   addIncluded(oddObject,included);}  }
class C{  public WritePrefReadWriteLockManager(){  super();}  }
class C{  static <T>void sort(T[] a,int lo,int hi,Comparator<? super T> c,T[] work,int workBase,int workLen){  assert c != null && a != null && lo >= 0 && lo <= hi && hi <= a.length;  int nRemaining=hi - lo;  if (nRemaining < 2)   return;  if (nRemaining < MIN_MERGE) {    int initRunLen=countRunAndMakeAscending(a,lo,hi,c);    binarySort(a,lo,hi,lo + initRunLen,c);    return;  }  TimSort<T> ts=new TimSort<>(a,c,work,workBase,workLen);  int minRun=minRunLength(nRemaining);  do {    int runLen=countRunAndMakeAscending(a,lo,hi,c);    if (runLen < minRun) {      int force=nRemaining <= minRun ? nRemaining : minRun;      binarySort(a,lo,lo + force,lo + runLen,c);      runLen=force;    }    ts.pushRun(lo,runLen);    ts.mergeCollapse();    lo+=runLen;    nRemaining-=runLen;  } while (nRemaining != 0);  assert lo == hi;  ts.mergeForceCollapse();  assert ts.stackSize == 1;}  }
class C{  private synchronized void addLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){  if (null == tableLockMap.get(absoluteTableIdentifier)) {    tableLockMap.put(absoluteTableIdentifier,new Object());  }}  }
class C{  public <T extends VCardProperty>PropertyImplAsserterImpl<T> property(Class<T> clazz){  return new PropertyImplAsserterImpl<T>(vcard.getProperties(clazz),this);}  }
class C{  private AttrInactivity(final String val) throws BOSHException {  super(val);  checkMinValue(0);}  }
class C{  public boolean compatiblePlatform(final String platform){  for (  String p : mPlatform) {    if (p.equalsIgnoreCase(platform)) {      return true;    }  }  return false;}  }
class C{  public void testSetNull() throws Exception {  PreparedStatement stmt=connection.prepareStatement("INSERT INTO test_blob(id, bin_data) VALUES(?, ?)");  try {    stmt.setInt(1,1);    stmt.setBytes(2,null);    stmt.executeUpdate();    stmt.setInt(1,2);    stmt.setBinaryStream(2,null,0);    stmt.executeUpdate();    stmt.setInt(1,3);    stmt.setString(2,null);    stmt.executeUpdate();  }  finally {    stmt.close();  }}  }
class C{  public Node item(int i){  int count=0;  for (int n=dtm.getFirstAttribute(element); n != -1; n=dtm.getNextAttribute(n)) {    if (count == i)     return dtm.getNode(n); else     ++count;  }  return null;}  }
class C{  public void writeI18N(String key,Object arg) throws IOException {  write(getString(i18n,key,arg));}  }
class C{  public int currentPc(){  return getSize();}  }
class C{  public static long[][] convertTo2DArrayForm(List<long[]> npf){  long[][] ret=null;  if (null != npf && npf.size() > 0) {    ret=npf.toArray(new long[npf.size()][]);  }  return ret;}  }
class C{  public StorageUnitStatusEntity createStorageUnitStatusEntity(String statusCode){  return createStorageUnitStatusEntity(statusCode,AbstractDaoTest.DESCRIPTION,AbstractDaoTest.STORAGE_UNIT_STATUS_AVAILABLE_FLAG_SET);}  }
class C{  public static JsonArray unmodifiableArray(JsonArray array){  return new JsonArray(array,true);}  }
class C{  public void putDoubleArray(String key,double[] value){  map.put(key,value);}  }
class C{  private void addObjectIfNotFound(Object obj,Vector v){  int n=v.size();  boolean addIt=true;  for (int i=0; i < n; i++) {    if (v.elementAt(i) == obj) {      addIt=false;      break;    }  }  if (addIt) {    v.addElement(obj);  }}  }
class C{  public static void decompressMultiBlock(byte[] block,final int outSize,final byte[] dest,final int destPos) throws InvalidMpqArchiveException {  if (block.length >= outSize) {    System.arraycopy(block,0,dest,destPos,outSize);  } else {    final byte compressionFlag=block[0];switch (compressionFlag) {case FLAG_COMPRESSION_ZLIB:{        final Inflater inflater=new Inflater();        inflater.setInput(block,1,block.length - 1);        try {          inflater.inflate(dest,destPos,outSize);          inflater.end();        } catch (        final DataFormatException dfe) {          throw new InvalidMpqArchiveException("Data format exception, failed to decompressed block!",dfe);        }        break;      }case FLAG_COMPRESSION_BZIP2:{      try (final CBZip2InputStream cis=new CBZip2InputStream(new ByteArrayInputStream(block,3,block.length - 3))){        cis.read(dest);      } catch (      final IOException ie) {        throw new InvalidMpqArchiveException("Data format exception, failed to decompressed block!",ie);      }      break;    }default :  throw new InvalidMpqArchiveException("Compression (" + compressionFlag + ") not supported!");}}}  }
class C{  private static BigInteger gcd(BigInteger n,BigInteger d){  BigInteger n1=n;  BigInteger n2=d;  BigInteger gcd=BigInteger.ONE;  for (BigInteger k=BigInteger.ONE; k.compareTo(n1) <= 0 && k.compareTo(n2) <= 0; k=k.add(BigInteger.ONE)) {    if (n1.remainder(k).compareTo(BigInteger.ZERO) == 0 && n2.remainder(k).compareTo(BigInteger.ZERO) == 0)     gcd=k;  }  return gcd;}  }
class C{  private void initValues(GLSurfaceView mGlSurfaceView){  mWidth=mGlSurfaceView.getWidth();  mHeight=mGlSurfaceView.getHeight();  mRandom=new Random(new Date().getTime());}  }
class C{  public void testDoConfigureSetsMediumLogging() throws Exception {  configuration.setProperty(GeneralPropertySet.LOGGING,LoggingLevel.MEDIUM.getLevel());  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("Info","//weblogic:log-file-severity",config);}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID) throws IllegalArgumentException {  doAddSigner(key,cert,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(),null,null);}  }
class C{  public String which(String sessionID,String path) throws DirectoryNotFoundException {  ResourceNode node=null;  try {    node=locate(sessionID,path);  } catch (  DirectoryNotFoundException d) {    return null;  }  String thePath=formatPath(getAbsolutePath(getRootNode(),node,true),true);  int paramStart=thePath.indexOf("(");  if (paramStart != -1) {    return thePath.substring(0,paramStart);  }  return thePath;}  }
class C{  public GeneralizedProvisioningRequestObjectFactory(){}  }
class C{  @Override public void closeSession(final ActiveMQRASession session) throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("closeSession(" + session + ")");  }synchronized (sessions) {    sessions.remove(session);  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.N4_GETTER_DECLARATION___GET_ANNOTATIONS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:  return N4JSPackage.N4_GETTER_DECLARATION___IS_VALID_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == FieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FIELD_ACCESSOR___IS_VALID_NAME:return N4JSPackage.N4_GETTER_DECLARATION___IS_VALID_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ModifiableElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == N4MemberDeclaration.class) {switch (baseOperationID) {case N4JSPackage.N4_MEMBER_DECLARATION___GET_DEFINED_TYPE_ELEMENT:return N4JSPackage.N4_GETTER_DECLARATION___GET_DEFINED_TYPE_ELEMENT;case N4JSPackage.N4_MEMBER_DECLARATION___IS_DECLARED_STATIC:return N4JSPackage.N4_GETTER_DECLARATION___IS_DECLARED_STATIC;case N4JSPackage.N4_MEMBER_DECLARATION___IS_STATIC:return N4JSPackage.N4_GETTER_DECLARATION___IS_STATIC;case N4JSPackage.N4_MEMBER_DECLARATION___IS_DECLARED_FINAL:return N4JSPackage.N4_GETTER_DECLARATION___IS_DECLARED_FINAL;case N4JSPackage.N4_MEMBER_DECLARATION___IS_FINAL:return N4JSPackage.N4_GETTER_DECLARATION___IS_FINAL;case N4JSPackage.N4_MEMBER_DECLARATION___IS_CONSTRUCTOR:return N4JSPackage.N4_GETTER_DECLARATION___IS_CONSTRUCTOR;case N4JSPackage.N4_MEMBER_DECLARATION___IS_CALLABLE_CONSTRUCTOR:return N4JSPackage.N4_GETTER_DECLARATION___IS_CALLABLE_CONSTRUCTOR;default :return -1;}}if (baseClass == AnnotableN4MemberDeclaration.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION___GET_ANNOTATIONS:return N4JSPackage.N4_GETTER_DECLARATION___GET_ANNOTATIONS;default :return -1;}}if (baseClass == N4FieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.N4_FIELD_ACCESSOR___IS_ABSTRACT:return N4JSPackage.N4_GETTER_DECLARATION___IS_ABSTRACT;case N4JSPackage.N4_FIELD_ACCESSOR___IS_VALID_NAME:return N4JSPackage.N4_GETTER_DECLARATION___IS_VALID_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void testSetF24Momentary(){  boolean f24Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF24Momentary(f24Momentary);}  }
class C{  public boolean removeHighlightField(String f){  boolean b=this.remove(HighlightParams.FIELDS,f);  if (this.get(HighlightParams.FIELDS) == null) {    this.setHighlight(false);  }  return b;}  }
class C{  private static void quickSort1(long x[],int off,int len,LongComparator comp){  if (len < SMALL) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && comp.compare(x[j - 1],x[j]) > 0; j--)     swap(x,j,j - 1);    return;  }  int m=off + len / 2;  if (len > SMALL) {    int l=off;    int n=off + len - 1;    if (len > MEDIUM) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s,comp);      m=med3(x,m - s,m,m + s,comp);      n=med3(x,n - 2 * s,n - s,n,comp);    }    m=med3(x,l,m,n,comp);  }  long v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    int comparison;    while (b <= c && (comparison=comp.compare(x[b],v)) <= 0) {      if (comparison == 0)       swap(x,a++,b);      b++;    }    while (c >= b && (comparison=comp.compare(x[c],v)) >= 0) {      if (comparison == 0)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   quickSort1(x,off,s,comp);  if ((s=d - c) > 1)   quickSort1(x,n - s,s,comp);}  }
class C{  public static synchronized void stopAll(boolean cancel){  for (  PlatformProcessor proc : instances.values())   Ignition.stop(proc.ignite().name(),cancel);  instances.clear();}  }
class C{  protected RelationshipTypeList(final GameData data){  super(data);  try {    createDefaultRelationship(Constants.RELATIONSHIP_TYPE_SELF,RelationshipTypeAttachment.ARCHETYPE_ALLIED,data);    createDefaultRelationship(Constants.RELATIONSHIP_TYPE_NULL,RelationshipTypeAttachment.ARCHETYPE_WAR,data);    createDefaultRelationship(Constants.RELATIONSHIP_TYPE_DEFAULT_WAR,RelationshipTypeAttachment.ARCHETYPE_WAR,data);    createDefaultRelationship(Constants.RELATIONSHIP_TYPE_DEFAULT_ALLIED,RelationshipTypeAttachment.ARCHETYPE_ALLIED,data);  } catch (  final GameParseException e) {    throw new IllegalStateException(e);  }}  }
class C{  public void rightClickAir(GlowPlayer player,ItemStack holding){}  }
class C{  private void createSceneSSBO(){  this.ssbo=glGenBuffers();  glBindBuffer(GL_SHADER_STORAGE_BUFFER,ssbo);  ByteBuffer ssboData=BufferUtils.createByteBuffer(4 * (4 + 4) * boxes.length / 2);  FloatBuffer fv=ssboData.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    Vector3f min=boxes[i];    Vector3f max=boxes[i + 1];    fv.put(min.x).put(min.y).put(min.z).put(0.0f);    fv.put(max.x).put(max.y).put(max.z).put(0.0f);  }  glBufferData(GL_SHADER_STORAGE_BUFFER,ssboData,GL_STATIC_DRAW);  glBindBuffer(GL_SHADER_STORAGE_BUFFER,0);}  }
class C{  public IsilonList<IsilonSmartQuota> listQuotas(String resumeToken,String pathBaseDir) throws IsilonException {  URI uri=URI_QUOTAS;  if (pathBaseDir != null) {    StringBuffer URLBuffer=new StringBuffer(_baseUrl.resolve(uri).toString());    URLBuffer.append("?path=").append(pathBaseDir).append("&recurse_path_children=true");    uri=URI.create(URLBuffer.toString());    sLogger.info("get list of smart quotas for pathbaseDir {} and uri {}",pathBaseDir,uri.toString());  } else {    uri=_baseUrl.resolve(uri);  }  return list(uri,"quotas",IsilonSmartQuota.class,resumeToken);}  }
class C{  public textarea removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public Gradient(int[] rgb){  this(null,rgb,null);}  }
class C{  public static String decompile(String source,int flags,UintMap properties){  int length=source.length();  if (length == 0) {    return "";  }  int indent=properties.getInt(INITIAL_INDENT_PROP,0);  if (indent < 0)   throw new IllegalArgumentException();  int indentGap=properties.getInt(INDENT_GAP_PROP,4);  if (indentGap < 0)   throw new IllegalArgumentException();  int caseGap=properties.getInt(CASE_GAP_PROP,2);  if (caseGap < 0)   throw new IllegalArgumentException();  StringBuffer result=new StringBuffer();  boolean justFunctionBody=(0 != (flags & Decompiler.ONLY_BODY_FLAG));  boolean toSource=(0 != (flags & Decompiler.TO_SOURCE_FLAG));  if (printSource) {    System.err.println("length:" + length);    for (int i=0; i < length; ++i) {      String tokenname=null;      if (Token.printNames) {        tokenname=Token.name(source.charAt(i));      }      if (tokenname == null) {        tokenname="---";      }      String pad=tokenname.length() > 7 ? "\t" : "\t\t";      System.err.println(tokenname + pad + (int)source.charAt(i)+ "\t'"+ ScriptRuntime.escapeString(source.substring(i,i + 1))+ "'");    }    System.err.println();  }  int braceNesting=0;  boolean afterFirstEOL=false;  int i=0;  int topFunctionType;  if (source.charAt(i) == Token.SCRIPT) {    ++i;    topFunctionType=-1;  } else {    topFunctionType=source.charAt(i + 1);  }  if (!toSource) {    result.append('\n');    for (int j=0; j < indent; j++)     result.append(' ');  } else {    if (topFunctionType == FunctionNode.FUNCTION_EXPRESSION) {      result.append('(');    }  }  while (i < length) {switch (source.charAt(i)) {case Token.GET:case Token.SET:      result.append(source.charAt(i) == Token.GET ? "get " : "set ");    ++i;  i=printSourceString(source,i + 1,false,result);++i;break;case Token.NAME:case Token.REGEXP:i=printSourceString(source,i + 1,false,result);continue;case Token.STRING:i=printSourceString(source,i + 1,true,result);continue;case Token.NUMBER:i=printSourceNumber(source,i + 1,result);continue;case Token.TRUE:result.append("true");break;case Token.FALSE:result.append("false");break;case Token.NULL:result.append("null");break;case Token.THIS:result.append("this");break;case Token.FUNCTION:++i;result.append("function ");break;case FUNCTION_END:break;case Token.COMMA:result.append(", ");break;case Token.LC:++braceNesting;if (Token.EOL == getNext(source,length,i)) indent+=indentGap;result.append('{');break;case Token.RC:{--braceNesting;if (justFunctionBody && braceNesting == 0) break;result.append('}');switch (getNext(source,length,i)) {case Token.EOL:case FUNCTION_END:indent-=indentGap;break;case Token.WHILE:case Token.ELSE:indent-=indentGap;result.append(' ');break;}break;}case Token.LP:result.append('(');break;case Token.RP:result.append(')');if (Token.LC == getNext(source,length,i)) result.append(' ');break;case Token.LB:result.append('[');break;case Token.RB:result.append(']');break;case Token.EOL:{if (toSource) break;boolean newLine=true;if (!afterFirstEOL) {afterFirstEOL=true;if (justFunctionBody) {result.setLength(0);indent-=indentGap;newLine=false;}}if (newLine) {result.append('\n');}if (i + 1 < length) {int less=0;int nextToken=source.charAt(i + 1);if (nextToken == Token.CASE || nextToken == Token.DEFAULT) {less=indentGap - caseGap;} else if (nextToken == Token.RC) {less=indentGap;} else if (nextToken == Token.NAME) {int afterName=getSourceStringEnd(source,i + 2);if (source.charAt(afterName) == Token.COLON) less=indentGap;}for (; less < indent; less++) result.append(' ');}break;}case Token.DOT:result.append('.');break;case Token.NEW:result.append("new ");break;case Token.DELPROP:result.append("delete ");break;case Token.IF:result.append("if ");break;case Token.ELSE:result.append("else ");break;case Token.FOR:result.append("for ");break;case Token.IN:result.append(" in ");break;case Token.WITH:result.append("with ");break;case Token.WHILE:result.append("while ");break;case Token.DO:result.append("do ");break;case Token.TRY:result.append("try ");break;case Token.CATCH:result.append("catch ");break;case Token.FINALLY:result.append("finally ");break;case Token.THROW:result.append("throw ");break;case Token.SWITCH:result.append("switch ");break;case Token.BREAK:result.append("break");if (Token.NAME == getNext(source,length,i)) result.append(' ');break;case Token.CONTINUE:result.append("continue");if (Token.NAME == getNext(source,length,i)) result.append(' ');break;case Token.CASE:result.append("case ");break;case Token.DEFAULT:result.append("default");break;case Token.RETURN:result.append("return");if (Token.SEMI != getNext(source,length,i)) result.append(' ');break;case Token.VAR:result.append("var ");break;case Token.LET:result.append("let ");break;case Token.SEMI:result.append(';');if (Token.EOL != getNext(source,length,i)) {result.append(' ');}break;case Token.ASSIGN:result.append(" = ");break;case Token.ASSIGN_ADD:result.append(" += ");break;case Token.ASSIGN_SUB:result.append(" -= ");break;case Token.ASSIGN_MUL:result.append(" *= ");break;case Token.ASSIGN_DIV:result.append(" /= ");break;case Token.ASSIGN_MOD:result.append(" %= ");break;case Token.ASSIGN_BITOR:result.append(" |= ");break;case Token.ASSIGN_BITXOR:result.append(" ^= ");break;case Token.ASSIGN_BITAND:result.append(" &= ");break;case Token.ASSIGN_LSH:result.append(" <<= ");break;case Token.ASSIGN_RSH:result.append(" >>= ");break;case Token.ASSIGN_URSH:result.append(" >>>= ");break;case Token.HOOK:result.append(" ? ");break;case Token.OBJECTLIT:result.append(':');break;case Token.COLON:if (Token.EOL == getNext(source,length,i)) result.append(':'); else result.append(" : ");break;case Token.OR:result.append(" || ");break;case Token.AND:result.append(" && ");break;case Token.BITOR:result.append(" | ");break;case Token.BITXOR:result.append(" ^ ");break;case Token.BITAND:result.append(" & ");break;case Token.SHEQ:result.append(" === ");break;case Token.SHNE:result.append(" !== ");break;case Token.EQ:result.append(" == ");break;case Token.NE:result.append(" != ");break;case Token.LE:result.append(" <= ");break;case Token.LT:result.append(" < ");break;case Token.GE:result.append(" >= ");break;case Token.GT:result.append(" > ");break;case Token.INSTANCEOF:result.append(" instanceof ");break;case Token.LSH:result.append(" << ");break;case Token.RSH:result.append(" >> ");break;case Token.URSH:result.append(" >>> ");break;case Token.TYPEOF:result.append("typeof ");break;case Token.VOID:result.append("void ");break;case Token.CONST:result.append("const ");break;case Token.YIELD:result.append("yield ");break;case Token.NOT:result.append('!');break;case Token.BITNOT:result.append('~');break;case Token.POS:result.append('+');break;case Token.NEG:result.append('-');break;case Token.INC:result.append("++");break;case Token.DEC:result.append("--");break;case Token.ADD:result.append(" + ");break;case Token.SUB:result.append(" - ");break;case Token.MUL:result.append(" * ");break;case Token.DIV:result.append(" / ");break;case Token.MOD:result.append(" % ");break;case Token.COLONCOLON:result.append("::");break;case Token.DOTDOT:result.append("..");break;case Token.DOTQUERY:result.append(".(");break;case Token.XMLATTR:result.append('@');break;case Token.DEBUGGER:result.append("debugger;\n");break;default :throw new RuntimeException("Token: " + Token.name(source.charAt(i)));}++i;}if (!toSource) {if (!justFunctionBody) result.append('\n');} else {if (topFunctionType == FunctionNode.FUNCTION_EXPRESSION) {result.append(')');}}return result.toString();}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/{id}/register") public ComputeElementRestRep registerComputeElement(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,ComputeElement.class,"id");  ComputeElement ce=_dbClient.queryObject(ComputeElement.class,id);  ArgValidator.checkEntity(ce,id,isIdEmbeddedInURL(id));  if (ce == null) {    throw APIException.badRequests.computeElementNotFound(id);  }  if (ce.getComputeSystem() == null) {    throw APIException.badRequests.computeElementNotBelongingToSystem(id,null);  } else {    ComputeSystemUtils.queryRegisteredSystem(ce.getComputeSystem(),_dbClient,isIdEmbeddedInURL(ce.getComputeSystem()));  }  if (RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(ce.getRegistrationStatus())) {    registerComputeElement(ce);    List<URI> cvpIds=_dbClient.queryByType(ComputeVirtualPool.class,true);    Iterator<ComputeVirtualPool> iter=_dbClient.queryIterativeObjects(ComputeVirtualPool.class,cvpIds);    while (iter.hasNext()) {      ComputeVirtualPool cvp=iter.next();      if (cvp.getUseMatchedElements()) {        _log.debug("Compute pool " + cvp.getLabel() + " configured to use dynamic matching -- refresh matched elements");        computeVirtualPoolService.getMatchingCEsforCVPAttributes(cvp);        _dbClient.updateAndReindexObject(cvp);      }    }  }  return map(ce);}  }
class C{  public String toStringTree(){  StringBuilder b=new StringBuilder();  toStringTree(b,"");  return b.toString();}  }
class C{  @Override public void onTokenRefresh(){  super.onTokenRefresh();  Intent intent=new Intent(this,RegistrationIntentService.class);  startService(intent);}  }
class C{  public long id(long index){  return ids.get(index) - 1;}  }
class C{  public Cursor execQuery(String sql,String[] selectionArgs){  for (int i=0, count=selectionArgs.length; i < count; i++)   sql=sql.replaceFirst("[?]",selectionArgs[i]);  LogUtils.d(sql);  return database.rawQuery(sql,null);}  }
class C{  public Word minus(Offset w2){  return null;}  }
class C{  private EditGroupRequest createEditGroupRequest(DBGroup group) throws SQLException {  EditGroupRequest r=new EditGroupRequest();  r.groupId=group.getId();  r.name=group.getName();  r.autoDelete=group.isAutoDelete();  r.publicKey=group.getPublicKeyString();  r.acls=new ArrayList<>();  for (  DBAcl acl : group.getAcls()) {    RPC.AddGroupRequest.ACL rpcAcl=new RPC.AddGroupRequest.ACL();    rpcAcl.level=acl.getLevel();    rpcAcl.groupKeyEncryptedForMe=acl.getGroupKeyEncryptedForMe();    rpcAcl.memberIdentity=acl.loadMemberIdentity(manager.identityDao).getName();    rpcAcl.myPublicKey=testIdentity.getPublicKeyString();    assert rpcAcl.memberIdentity != null;    r.acls.add(rpcAcl);  }  r.secrets=new ArrayList<>();  for (  DBGroupSecret groupSecret : group.getGroupSecrets()) {    RPC.Secret rpcSecret=new RPC.Secret();    rpcSecret.encryptedClientData="client";    rpcSecret.encryptedCriticalData="critical";    rpcSecret.secretId=groupSecret.getServerVisibleSecret().getId();    r.secrets.add(rpcSecret);  }  return r;}  }
class C{  public static void print(PrintStream stream,AST ast){  PrettyPrinter printer=new PrettyPrinter(System.out);  ast.accept(printer);}  }
class C{  private static String listify(final Collection<String> registers){  final List<String> registerList=new ArrayList<String>(registers);  Collections.sort(registerList);  return Commafier.commafy(registerList);}  }
class C{  public void onNewIntent(Intent intent){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onNewIntent(intent);    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.EIP_MODEL__OWNED_ROUTES:    getOwnedRoutes().clear();  getOwnedRoutes().addAll((Collection<? extends Route>)newValue);return;case EipPackage.EIP_MODEL__OWNED_SERVICE_REFS:getOwnedServiceRefs().clear();getOwnedServiceRefs().addAll((Collection<? extends ServiceRef>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public String login(String username,String password){  WebResource resource=client.getClient().resource(client.uriBuilder("/login").build());  resource.addFilter(new HTTPBasicAuthFilter(username,password));  ClientResponse response=resource.get(ClientResponse.class);  response.close();  client.setLoginTime(System.currentTimeMillis());  return client.getAuthToken();}  }
class C{  public void addRow(final MemberTableRowData rowData){  model.add(rowData);  validRows.add(false);  fireTableRowsInserted(model.size() - 1,model.size() - 1);}  }
class C{  protected void writeTile(String filePath,byte[] bbArray,int width,int height,LayerType layerType) throws FileNotFoundException, IOException {  if (bbArray.length != 0) {    BufferedImage bImage=null;switch (layerType) {case none:case footprint:case viewshed:case derivative:      break;case elevation:case field:    bImage=new BufferedImage(width,height,BufferedImage.TYPE_4BYTE_ABGR);  byte[] fData=((DataBufferByte)bImage.getRaster().getDataBuffer()).getData();System.arraycopy(bbArray,0,fData,0,bbArray.length);break;case colorimage:bImage=new BufferedImage(width,height,BufferedImage.TYPE_4BYTE_ABGR);byte[] iData=((DataBufferByte)bImage.getRaster().getDataBuffer()).getData();System.arraycopy(bbArray,0,iData,0,bbArray.length);break;case grayimage:bImage=new BufferedImage(width,height,BufferedImage.TYPE_BYTE_GRAY);byte[] bData=((DataBufferByte)bImage.getRaster().getDataBuffer()).getData();System.arraycopy(bbArray,0,bData,0,bbArray.length);break;}filePath+=".png";File file=new File(filePath);file.getParentFile().mkdirs();ImageOutputStream oStream=new FileImageOutputStream(file);ImageIO.write(bImage,"PNG",oStream);oStream.flush();oStream.close();} else {filePath+=".png";File file=new File(filePath);file.getParentFile().mkdirs();ImageOutputStream oStream=new FileImageOutputStream(file);oStream.flush();oStream.close();}}  }
class C{  public static Intent createPlayStoreIntent(final String packageName){  Intent i=new Intent(Intent.ACTION_VIEW);  i.setData(Uri.parse("http://play.google.com/store/apps/details?id=" + packageName));  return i;}  }
class C{  public boolean isShowLegend(){  return mShowLegend;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.CHECK_REF;}  }
class C{  public DefaultCloseFuture(IoSession session){  super(session);}  }
class C{  private void validateProjectName(){  if (NameUtils.checkProjectName(view.getProjectName())) {    view.markNameValid();  } else {    view.markNameInvalid();  }}  }
class C{  @DSComment("Backup subsystem") @DSSpec(DSCat.BACKUP_SUBSYSTEM) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:47.332 -0500",hash_original_method="1F7BD9065C295005115986DC5C5FEFFC",hash_generated_method="79DE7E7815DF8F409EA7961CDB1960A7") public int writeEntityData(byte[] data,int size) throws IOException {  int result=writeEntityData_native(mBackupWriter,data,size);  if (result >= 0) {    return result;  } else {    throw new IOException("result=0x" + Integer.toHexString(result));  }}  }
class C{  protected void sendIntensity(double intensity){  if (log.isDebugEnabled()) {    log.debug("sendIntensity(" + intensity + ")"+ " lastOutputStep: "+ lastOutputStep+ " maxDimStep: "+ maxDimStep);  }  int newStep=(int)Math.round(intensity * maxDimStep);  if ((newStep < 0) || (newStep > maxDimStep)) {    log.error("newStep wrong: " + newStep + " intensity: "+ intensity);  }  if (newStep == lastOutputStep) {    if (log.isDebugEnabled()) {      log.debug("intensity " + intensity + " within current step, return");    }    return;  }  X10Sequence out=new X10Sequence();  out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep);  tc.sendX10Sequence(out,null);  lastOutputStep=newStep;  if (log.isDebugEnabled()) {    log.debug("sendIntensity(" + intensity + ") house "+ X10Sequence.houseValueToText(housecode)+ " device "+ devicecode+ " newStep: "+ newStep);  }}  }
class C{  public String format(String key,Object... arguments){  return new Formatter(resource.getLocale()).format(getString(key),arguments).toString();}  }
class C{  void copy(){  arraycopy(toCopy.currentMessage.toByteArray(),0,toCopy.currentPosition);  toCopy=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:12.116 -0500",hash_original_method="B31DF449D9A1DA367D662873CDA0DA23",hash_generated_method="F9ACE3351C702548782D5E8CB13F7469") public boolean isValidating(){  return getFeature(XmlPullParser.FEATURE_VALIDATION);}  }
class C{  void clearCommitStateRef(){  m_commitStateRef.set(null);}  }
class C{  public RotatingGraphMousePlugin(){  this(MouseEvent.BUTTON1_MASK | MouseEvent.SHIFT_MASK);}  }
class C{  public Collection<TransactionOperation> parse(Reader in) throws SAXException, IOException {  SimpleSAXParser saxParser=new SimpleSAXParser();  TransactionSAXParser handler=new TransactionSAXParser();  saxParser.setPreserveWhitespace(true);  saxParser.setListener(handler);  saxParser.parse(in);  return handler.getTxn();}  }
class C{  public void write(double x){  write(Double.doubleToRawLongBits(x));}  }
class C{  @SuppressWarnings("unused") public static byte[] selectFontC(){  byte[] result=new byte[3];  result[0]=ESC;  result[1]=77;  result[2]=2;  return result;}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(version);  v.add(kekid);  v.add(keyEncryptionAlgorithm);  v.add(encryptedKey);  return new DERSequence(v);}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  private static JFreeChart createChart(){  Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};  CategoryDataset dataset=DatasetUtilities.createCategoryDataset("S","C",data);  return ChartFactory.createStackedBarChart3D("Stacked Bar Chart 3D","Domain","Range",dataset,PlotOrientation.HORIZONTAL,true,true,true);}  }
class C{  public FlyweightAttribute(String name,String value){  this.qname=getDocumentFactory().createQName(name);  this.value=value;}  }
class C{  public static void applyToOrSetGone(ImageHolder imageHolder,ImageView imageView){  applyToOrSetGone(imageHolder,imageView,null);}  }
class C{  private void uninstallBorder(JRootPane root){  LookAndFeel.uninstallBorder(root);}  }
class C{  public static SortClause asc(String item){  return new SortClause(item,ORDER.asc);}  }
class C{  public boolean draw(float level){  if (DEBUG) {    Slog.d(TAG,"drawFrame: level=" + level);  }  if (!mPrepared) {    return false;  }  if (mMode == MODE_FADE) {    return showSurface(1.0f - level);  }  if (!attachEglContext()) {    return false;  }  try {    GLES10.glClearColor(0f,0f,0f,1f);    GLES10.glClear(GLES10.GL_COLOR_BUFFER_BIT);    if (level < HSTRETCH_DURATION) {      drawHStretch(1.0f - (level / HSTRETCH_DURATION));    } else {      drawVStretch(1.0f - ((level - HSTRETCH_DURATION) / VSTRETCH_DURATION));    }    if (checkGlErrors("drawFrame")) {      return false;    }    EGL14.eglSwapBuffers(mEglDisplay,mEglSurface);  }  finally {    detachEglContext();  }  return showSurface(1.0f);}  }
class C{  public void test_rebuildTextIndex() throws Exception {  final String namespace="test" + UUID.randomUUID();  final Properties properties=new Properties();  properties.put(Options.TEXT_INDEX,"false");  m_mgr.createRepository(namespace,properties);  final RemoteRepository repo=m_mgr.getRepositoryForNamespace(namespace);  final ValueFactoryImpl vf=ValueFactoryImpl.getInstance();  final URI s=vf.createURI("s:s1");  final Literal o=vf.createLiteral("literal");  final Statement[] a=new Statement[]{vf.createStatement(s,RDFS.LABEL,o)};  final AddOp addOp=new AddOp(Arrays.asList(a));  repo.add(addOp);  final String sparql="select ?s where { ?s ?p ?o . ?o <http://www.bigdata.com/rdf/search#search> \"" + o.stringValue() + "\" .}";  try {    repo.prepareTupleQuery(sparql).evaluate().close();  } catch (  HttpException ex) {    assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,ex.getStatusCode());  }  boolean forceBuildTextIndex=false;  try {    m_mgr.rebuildTextIndex(namespace,forceBuildTextIndex);    fail("Expecting: " + HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  } catch (  HttpException ex) {    assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,ex.getStatusCode());  }  forceBuildTextIndex=true;  m_mgr.rebuildTextIndex(namespace,forceBuildTextIndex);  String expected=s.stringValue();  TupleQueryResult result=repo.prepareTupleQuery(sparql).evaluate();  String actual=null;  try {    actual=result.next().getBinding("s").getValue().stringValue();  }  finally {    result.close();  }  assertEquals(expected,actual);}  }
class C{  protected List<E> executeQuery(IIndexQuery indexQuery,int limit,boolean useForkJoin){  return this.executeQuery(indexQuery,null,null,limit,useForkJoin);}  }
class C{  private static boolean includeSubManifest(String subManifestFile,String[] excludedSubdirs){  boolean result=true;  if (excludedSubdirs != null && excludedSubdirs.length > 0) {    int index=subManifestFile.lastIndexOf("/");    String path=subManifestFile.substring(0,index);    String sd=path.substring(path.lastIndexOf("/") + 1);    for (    String subdir : excludedSubdirs) {      if (sd.equals(subdir)) {        result=false;        break;      }    }  }  return result;}  }
class C{  @SuppressWarnings("deprecation") private ExecutionResult execute(TestCase tc,Scope scope,int timeout){  ExecutionTracer.getExecutionTracer().clear();  resetObservers();  ExecutionObserver.setCurrentTest(tc);  MaxTestsStoppingCondition.testExecuted();  long startTime=System.currentTimeMillis();  TimeoutHandler<ExecutionResult> handler=new TimeoutHandler<ExecutionResult>();  TestRunnable callable=new TestRunnable(tc,scope,observers);  callable.storeCurrentThreads();  try {    ExecutionResult result=null;    SystemInUtil.getInstance().initForTestCase();    JOptionPaneInputs.getInstance().initForTestCase();    Sandbox.goingToExecuteSUTCode();    TestGenerationContext.getInstance().goingToExecuteSUTCode();    try {      result=handler.execute(callable,executor,timeout,Properties.CPU_TIMEOUT);    }  finally {      Sandbox.doneWithExecutingSUTCode();      TestGenerationContext.getInstance().doneWithExecutingSUTCode();    }    PermissionStatistics.getInstance().countThreads(threadGroup.activeCount());    result.setSecurityException(PermissionStatistics.getInstance().getAndResetExceptionInfo());    callable.killAndJoinClientThreads();    long endTime=System.currentTimeMillis();    timeExecuted+=endTime - startTime;    testsExecuted++;    return result;  } catch (  ThreadDeath t) {    logger.warn("Caught ThreadDeath during test execution");    ExecutionResult result=new ExecutionResult(tc,null);    result.setThrownExceptions(callable.getExceptionsThrown());    result.setTrace(ExecutionTracer.getExecutionTracer().getTrace());    ExecutionTracer.getExecutionTracer().clear();    return result;  }catch (  InterruptedException e1) {    logger.info("InterruptedException");    ExecutionResult result=new ExecutionResult(tc,null);    result.setThrownExceptions(callable.getExceptionsThrown());    result.setTrace(ExecutionTracer.getExecutionTracer().getTrace());    ExecutionTracer.getExecutionTracer().clear();    return result;  }catch (  ExecutionException e1) {    System.setOut(systemOut);    System.setErr(systemErr);    logger.error("ExecutionException (this is likely a serious error in the framework)",e1);    ExecutionResult result=new ExecutionResult(tc,null);    result.setThrownExceptions(callable.getExceptionsThrown());    result.setTrace(ExecutionTracer.getExecutionTracer().getTrace());    ExecutionTracer.getExecutionTracer().clear();    if (e1.getCause() instanceof Error) {      throw (Error)e1.getCause();    } else     if (e1.getCause() instanceof RuntimeException) {      throw (RuntimeException)e1.getCause();    }    return result;  }catch (  TimeoutException e1) {    if (Properties.LOG_TIMEOUT) {      logger.warn("Timeout occurred for " + Properties.TARGET_CLASS);    }    logger.info("TimeoutException, need to stop runner",e1);    ExecutionTracer.setKillSwitch(true);    try {      handler.getLastTask().get(Properties.SHUTDOWN_TIMEOUT,TimeUnit.MILLISECONDS);    } catch (    InterruptedException e2) {    }catch (    ExecutionException e2) {    }catch (    TimeoutException e2) {    }    if (!callable.isRunFinished()) {      logger.info("Cancelling thread:");      for (      StackTraceElement elem : currentThread.getStackTrace()) {        logger.info(elem.toString());      }      logger.info(tc.toCode());      boolean loopCounter=LoopCounter.getInstance().isActivated();      while (isInStaticInit()) {        LoopCounter.getInstance().setActive(false);        ExecutionTracer.setKillSwitch(false);        logger.info("Run still not finished, but awaiting for static initializer to finish.");        try {          executor.awaitTermination(Properties.SHUTDOWN_TIMEOUT,TimeUnit.MILLISECONDS);        } catch (        InterruptedException e) {          logger.info("Interrupted");          e.printStackTrace();        }      }      LoopCounter.getInstance().setActive(loopCounter);      ExecutionTracer.setKillSwitch(true);      if (!callable.isRunFinished()) {        handler.getLastTask().cancel(true);        logger.info("Run not finished, waiting...");        try {          executor.awaitTermination(Properties.SHUTDOWN_TIMEOUT,TimeUnit.MILLISECONDS);        } catch (        InterruptedException e) {          logger.info("Interrupted");          e.printStackTrace();        }      }      if (!callable.isRunFinished()) {        logger.info("Run still not finished, replacing executor.");        try {          executor.shutdownNow();          if (currentThread.isAlive()) {            logger.info("Thread survived - unsafe operation.");            for (            StackTraceElement element : currentThread.getStackTrace()) {              logger.info(element.toString());            }            logger.info("Killing thread:");            for (            StackTraceElement elem : currentThread.getStackTrace()) {              logger.info(elem.toString());            }            currentThread.stop();          }        } catch (        ThreadDeath t) {          logger.info("ThreadDeath.");        }catch (        Throwable t) {          logger.info("Throwable: " + t);        }        ExecutionTracer.disable();        executor=Executors.newSingleThreadExecutor(this);      }    } else {      logger.info("Run is finished - " + currentThread.isAlive() + ": "+ getNumStalledThreads());    }    ExecutionTracer.disable();    if (Sandbox.isOnAndExecutingSUTCode()) {      Sandbox.doneWithExecutingSUTCode();      TestGenerationContext.getInstance().doneWithExecutingSUTCode();    }    ExecutionResult result=new ExecutionResult(tc,null);    result.setThrownExceptions(callable.getExceptionsThrown());    result.reportNewThrownException(tc.size(),new TestCaseExecutor.TimeoutExceeded());    result.setTrace(ExecutionTracer.getExecutionTracer().getTrace());    ExecutionTracer.getExecutionTracer().clear();    ExecutionTracer.setKillSwitch(false);    ExecutionTracer.enable();    System.setOut(systemOut);    System.setErr(systemErr);    return result;  } finally {    if (threadGroup != null)     PermissionStatistics.getInstance().countThreads(threadGroup.activeCount());    TestCluster.getInstance().handleRuntimeAccesses(tc);  }}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  public EqualsBuilder append(final Object[] lhs,final Object[] rhs){  if (isEquals == false) {    return this;  }  if (lhs == rhs) {    return this;  }  if (lhs == null || rhs == null) {    this.setEquals(false);    return this;  }  if (lhs.length != rhs.length) {    this.setEquals(false);    return this;  }  for (int i=0; i < lhs.length && isEquals; ++i) {    append(lhs[i],rhs[i]);  }  return this;}  }
class C{  @Override public Object unwrapKey(Object key,AbstractSession session){  return key;}  }
class C{  protected void computeParameters(){  Debug.message("proj","Orthographic.computeParameters()");  super.computeParameters();  cosCtrLat=Math.cos(centerY);  sinCtrLat=Math.sin(centerY);  hy=height / 2;  wx=width / 2;}  }
class C{  public void testNullTransformerRemove(){  boolean caught=false;  try {    fInst.removeTransformer(null);  } catch (  NullPointerException npe) {    caught=true;  }  assertTrue(caught);}  }
class C{  public void destroy(){  HandlerList.unregisterAll(identifier);}  }
class C{  private static S2CellId fromFaceIJWrap(int face,int i,int j){  i=Math.max(-1,Math.min(MAX_SIZE,i));  j=Math.max(-1,Math.min(MAX_SIZE,j));  final double kScale=1.0 / MAX_SIZE;  double s=kScale * ((i << 1) + 1 - MAX_SIZE);  double t=kScale * ((j << 1) + 1 - MAX_SIZE);  S2Point p=S2Projections.faceUvToXyz(face,s,t);  face=S2Projections.xyzToFace(p);  R2Vector st=S2Projections.validFaceXyzToUv(face,p);  return fromFaceIJ(face,stToIJ(st.x()),stToIJ(st.y()));}  }
class C{  public boolean isStatic(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.STATIC);}  }
class C{  public static boolean namespaceIsRelative(Attr namespace){  return !namespaceIsAbsolute(namespace);}  }
class C{  private void reportException(Kind kind,Element element,Throwable t){  StringWriter buf=new StringWriter();  t.printStackTrace(new PrintWriter(buf));  buf.toString();  message(kind,element,"Exception thrown during processing: %s",buf.toString());}  }
class C{  public Enumeration keys(){  return new KeyIterator();}  }
class C{  public Out(OutputStream os){  try {    OutputStreamWriter osw=new OutputStreamWriter(os,CHARSET_NAME);    out=new PrintWriter(osw,true);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void go(){  String rmiHost=RMI_HOST;  int rmiPort=RMI_PORT;  boolean verbose=false;  String command=null;  String curArg=null;  try {    while (argvIterator.hasNext()) {      curArg=argvIterator.next();      if ("-host".equals(curArg))       rmiHost=argvIterator.next(); else       if ("-port".equals(curArg))       rmiPort=Integer.parseInt(argvIterator.next()); else       if ("-verbose".equals(curArg))       verbose=true; else       if (curArg.startsWith("-")) {        fatal("Unrecognized global option: " + curArg,null);      } else {        command=curArg;        break;      }    }  } catch (  NumberFormatException e) {    fatal("Bad numeric argument for " + curArg,null);  }catch (  ArrayIndexOutOfBoundsException e) {    fatal("Missing value for " + curArg,null);  }  OpenReplicatorManagerMBean manager=null;  try {    try {      JmxManager jmxManager=new JmxManager(rmiHost,rmiPort,ReplicatorConf.RMI_DEFAULT_SERVICE_NAME);      JMXConnector conn=jmxManager.getLocalRMIConnector();      manager=(OpenReplicatorManagerMBean)JmxManager.getMBeanProxy(conn,OpenReplicatorManager.class,false);    } catch (    ServerRuntimeException e) {      fatal("Connection failed: " + e,e);    }    if (command != null) {      if (command.equals(Commands.HELP))       manager.online(); else       if (command.equals(Commands.ERROR)) {        StringBuffer msg=new StringBuffer();        while (argvIterator.hasNext()) {          msg.append(argvIterator.next());        }        manager.signal(OpenReplicatorManagerMBean.signalError,msg.toString());      } else       if (command.equals(Commands.SYNCED)) {        StringBuffer msg=new StringBuffer();        while (argvIterator.hasNext()) {          msg.append(argvIterator.next());        }        manager.signal(OpenReplicatorManagerMBean.signalSynced,msg.toString());      } else       if (command.equals(Commands.RESTORED)) {        StringBuffer msg=new StringBuffer();        while (argvIterator.hasNext()) {          msg.append(argvIterator.next());        }        manager.signal(OpenReplicatorManagerMBean.signalRestored,msg.toString());      } else       if (command.equals(Commands.OFFLINE)) {        StringBuffer msg=new StringBuffer();        while (argvIterator.hasNext()) {          msg.append(argvIterator.next());        }        manager.signal(OpenReplicatorManagerMBean.signalOfflineReached,msg.toString());      } else       if (command.equals(Commands.SHUTDOWN)) {        StringBuffer msg=new StringBuffer();        while (argvIterator.hasNext()) {          msg.append(argvIterator.next());        }        manager.signal(OpenReplicatorManagerMBean.signalShutdown,msg.toString());      } else       if (command.equals(Commands.CONSISTENCY)) {        StringBuffer msg=new StringBuffer();        while (argvIterator.hasNext()) {          msg.append(argvIterator.next());        }        manager.signal(OpenReplicatorManagerMBean.signalConsistencyFail,msg.toString());      } else       if (command.equals(Commands.HELP)) {        printHelp();      } else {        println("Unknown command: '" + command + "'");        printHelp();      }    }    println("State: " + manager.getState());    if (manager.getPendingError() != null) {      println("Error: " + manager.getPendingError());      println("Exception Message: " + manager.getPendingExceptionMessage());    }  } catch (  ConnectException e) {    if (expectLostConnection)     println("RMI connection lost!"); else     fatal("RMI connection lost!",e);  }catch (  RemoteException e) {    if (expectLostConnection)     println("Replicator appears to be stopped"); else {      fatal("Fatal RMI communication error: " + e.getMessage(),e);    }  }catch (  Exception e) {    println("Operation failed: " + e.getMessage());    if (verbose)     e.printStackTrace();    if (manager.getPendingError() != null) {      println("Error: " + manager.getPendingError());      println("Exception Message: " + manager.getPendingExceptionMessage());    }  }catch (  Throwable t) {    fatal("Fatal error: " + t.getMessage(),t);  }}  }
class C{  public void update(DataServer ds){synchronized (this) {    this.setName(ds.getName());    this.setVendor(ds.getVendor());    this.setClusterName(ds.getClusterName());    this.notifyAll();  }}  }
class C{  public CGraphSelectionDialog(final JFrame owner,final List<INaviView> views){  super(owner,"Select a graph",ModalityType.APPLICATION_MODAL);  Preconditions.checkNotNull(views,"IE01304: Function list can't be null");  m_views=new ArrayList<INaviView>(views);  createGui(views);  new CDialogEscaper(this);  setLocationRelativeTo(null);}  }
class C{  private void createRenderables(){  this.gridElements=new ArrayList<GridElement>();  double step=sector.getDeltaLatDegrees() / this.divisions;  double lon=sector.getMinLongitude().degrees + (this.level == 0 ? 0 : step);  while (lon < sector.getMaxLongitude().degrees - step / 2) {    Angle longitude=Angle.fromDegrees(lon);    ArrayList<Position> positions=new ArrayList<Position>(2);    positions.add(new Position(this.sector.getMinLatitude(),longitude,0));    positions.add(new Position(this.sector.getMaxLatitude(),longitude,0));    Object line=createLineRenderable(positions,AVKey.LINEAR);    Sector sector=Sector.fromDegrees(this.sector.getMinLatitude().degrees,this.sector.getMaxLatitude().degrees,lon,lon);    String lineType=lon == this.sector.getMinLongitude().degrees ? GridElement.TYPE_LINE_WEST : GridElement.TYPE_LINE;    GridElement ge=new GridElement(sector,line,lineType);    ge.value=lon;    this.gridElements.add(ge);    lon+=step;  }  double lat=this.sector.getMinLatitude().degrees + (this.level == 0 ? 0 : step);  while (lat < this.sector.getMaxLatitude().degrees - step / 2) {    Angle latitude=Angle.fromDegrees(lat);    ArrayList<Position> positions=new ArrayList<Position>(2);    positions.add(new Position(latitude,this.sector.getMinLongitude(),0));    positions.add(new Position(latitude,this.sector.getMaxLongitude(),0));    Object line=createLineRenderable(positions,AVKey.LINEAR);    Sector sector=Sector.fromDegrees(lat,lat,this.sector.getMinLongitude().degrees,this.sector.getMaxLongitude().degrees);    String lineType=lat == this.sector.getMinLatitude().degrees ? GridElement.TYPE_LINE_SOUTH : GridElement.TYPE_LINE;    GridElement ge=new GridElement(sector,line,lineType);    ge.value=lat;    this.gridElements.add(ge);    lat+=step;  }  if (this.sector.getMaxLatitude().equals(Angle.POS90)) {    ArrayList<Position> positions=new ArrayList<Position>(2);    positions.add(new Position(Angle.POS90,this.sector.getMinLongitude(),0));    positions.add(new Position(Angle.POS90,this.sector.getMaxLongitude(),0));    Object line=createLineRenderable(positions,AVKey.LINEAR);    Sector sector=Sector.fromDegrees(90,90,this.sector.getMinLongitude().degrees,this.sector.getMaxLongitude().degrees);    GridElement ge=new GridElement(sector,line,GridElement.TYPE_LINE_NORTH);    ge.value=90;    this.gridElements.add(ge);  }}  }
class C{  public final boolean canGetDouble(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetDouble());}  }
class C{  public void trace(String format,Object arg1,Object arg2){  formatAndLog(Log.VERBOSE,format,arg1,arg2);}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == null) {    return false;  }  if (this == obj) {    return true;  }  if (obj instanceof Cookie) {    final Cookie that=(Cookie)obj;    return LangUtils.equals(getName(),that.getName()) && LangUtils.equals(cookieDomain,that.cookieDomain) && LangUtils.equals(cookiePath,that.cookiePath);  } else {    return false;  }}  }
class C{  public LogStream print(char c){  if (ps != null) {    indent();    lineBuffer.append(c);    if (c == '\n') {      if (lineBuffer.indexOf(LINE_SEPARATOR,lineBuffer.length() - LINE_SEPARATOR.length()) != -1) {        flushLine(false);      }    }  }  return this;}  }
class C{  public static String replaceIllegalFileNameCharacters(String s){  if (s == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return s.replaceAll(ILLEGAL_FILE_PATH_PART_CHARACTERS,"_");}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.ROOT__ROOTS:    getRoots().clear();  return;}super.eUnset(featureID);}  }
class C{  private static void handleCommandLineArgs(final String[] args){  System.getProperties().setProperty(GameRunner.TRIPLEA_HEADLESS,"true");  final String[] properties=getProperties();  boolean usagePrinted=false;  for (  final String arg2 : args) {    boolean found=false;    String arg=arg2;    final int indexOf=arg.indexOf('=');    if (indexOf > 0) {      arg=arg.substring(0,indexOf);      for (      final String propertie : properties) {        if (arg.equals(propertie)) {          final String value=getValue(arg2);          System.getProperties().setProperty(propertie,value);          System.out.println(propertie + ":" + value);          found=true;          break;        }      }    }    if (!found) {      System.out.println("Unrecogized:" + arg2);      if (!usagePrinted) {        usagePrinted=true;        usage();      }    }  }}  }
class C{  public static KeyPair readKeyPairFromPemFile(String filename) throws NoSuchAlgorithmException, InvalidKeySpecException, IOException {  File pkFile=new File(filename);  try (PEMParser pemParser=new PEMParser(new FileReader(pkFile))){    Object o=pemParser.readObject();    if (o == null || !(o instanceof PrivateKeyInfo)) {      throw new CodedException(X_INTERNAL_ERROR,"Could not read key from '%s'",filename);    }    PrivateKeyInfo pki=(PrivateKeyInfo)o;    KeyFactory kf=KeyFactory.getInstance("RSA");    final PKCS8EncodedKeySpec ks=new PKCS8EncodedKeySpec(pki.getEncoded());    final PrivateKey privateKey=kf.generatePrivate(ks);    final RSAPrivateKey rpk=RSAPrivateKey.getInstance(pki.parsePrivateKey());    final PublicKey publicKey=kf.generatePublic(new RSAPublicKeySpec(rpk.getModulus(),rpk.getPublicExponent()));    KeyPair kp=new KeyPair(publicKey,privateKey);    return kp;  } }  }
class C{  public static Font[] loadFont(File file,byte[]... expectedFingerprints) throws IOException {  Font[] fonts=loadFont(file,true);  for (int i=0; i < Math.min(fonts.length,expectedFingerprints.length); i++) {    if (expectedFingerprints[i] != fonts[i].digest()) {      throw new IOException("Did not get the expected fingerprint for font#" + i + " in "+ file.getPath()+ " Has the file changed?");    }  }  return fonts;}  }
class C{  protected void cleanupEntities(){  cntCleanupEntitiesRuns.increment();  Calendar c=Calendar.getInstance();  c.add(Calendar.MILLISECOND,-ENTITY_TIMEOUT);  Date cutoff=c.getTime();  ArrayList<Entity> toRemove=new ArrayList<Entity>();  ArrayList<Entity> toKeep=new ArrayList<Entity>();  Iterator<Device> diter=deviceMap.values().iterator();  LinkedList<DeviceUpdate> deviceUpdates=new LinkedList<DeviceUpdate>();  while (diter.hasNext()) {    Device d=diter.next();    while (true) {      deviceUpdates.clear();      toRemove.clear();      toKeep.clear();      for (      Entity e : d.getEntities()) {        if (e.getLastSeenTimestamp() != null && 0 > e.getLastSeenTimestamp().compareTo(cutoff)) {          toRemove.add(e);        } else {          toKeep.add(e);        }      }      if (toRemove.size() == 0) {        break;      }      cntEntityRemovedTimeout.increment();      for (      Entity e : toRemove) {        removeEntity(e,d.getEntityClass(),d.getDeviceKey(),toKeep);      }      if (toKeep.size() > 0) {        Device newDevice=allocateDevice(d.getDeviceKey(),d.getDHCPClientName(),d.oldAPs,d.attachmentPoints,toKeep,d.getEntityClass());        EnumSet<DeviceField> changedFields=EnumSet.noneOf(DeviceField.class);        for (        Entity e : toRemove) {          changedFields.addAll(findChangedFields(newDevice,e));        }        DeviceUpdate update=null;        if (changedFields.size() > 0) {          update=new DeviceUpdate(d,CHANGE,changedFields);        }        if (!deviceMap.replace(newDevice.getDeviceKey(),d,newDevice)) {          d=deviceMap.get(d.getDeviceKey());          if (null != d)           continue;        }        if (update != null) {          cntDeviceChanged.increment();          deviceUpdates.add(update);        }      } else {        DeviceUpdate update=new DeviceUpdate(d,DELETE,null);        if (!deviceMap.remove(d.getDeviceKey(),d)) {          d=deviceMap.get(d.getDeviceKey());          if (null != d)           continue;          cntDeviceDeleted.increment();        }        deviceUpdates.add(update);      }      processUpdates(deviceUpdates);      break;    }  }  debugEventService.flushEvents();}  }
class C{  public void service(Mail mail) throws MessagingException {  try {    MimeMessage message=mail.getMessage();    message.writeTo(System.err);  } catch (  IOException ioe) {    log("error printing message",ioe);  }}  }
class C{  public SocialHit socialActionTarget(String value){  setString(SOCIAL_ACTION_TARGET,value);  return this;}  }
class C{  public void load(){  Date now=new Date(System.currentTimeMillis());  if (lastChecked != null) {    TaskChangeRegistry.tasksAdded();  }  lastChecked=now;}  }
class C{  static void accept(final AnnotationVisitor av,final String name,final Object value){  if (av != null) {    if (value instanceof String[]) {      String[] typeconst=(String[])value;      av.visitEnum(name,typeconst[0],typeconst[1]);    } else     if (value instanceof AnnotationNode) {      AnnotationNode an=(AnnotationNode)value;      an.accept(av.visitAnnotation(name,an.desc));    } else     if (value instanceof List) {      AnnotationVisitor v=av.visitArray(name);      if (v != null) {        List<?> array=(List<?>)value;        for (int j=0; j < array.size(); ++j) {          accept(v,null,array.get(j));        }        v.visitEnd();      }    } else {      av.visit(name,value);    }  }}  }
class C{  private void validateCloumns(Map<String,Object> columnNameToTypeMap){  if (columnNameToTypeMap == null) {    throw new IllegalArgumentException("columnNameToTypeMap should not be null");  }  for (  Map.Entry<String,Object> entry : columnNameToTypeMap.entrySet()) {    Object objValue=entry.getValue();    if (objValue == null) {      throw new IllegalArgumentException("columnName=" + entry.getKey() + " has null type");    }    if (objValue instanceof Class<?>) {      continue;    }    if (objValue instanceof String) {      try {        entry.setValue(Class.forName((String)objValue));      } catch (      ClassNotFoundException e) {        throw new IllegalArgumentException("type field validation failed. e=",e);      }    }  }}  }
class C{  public boolean isArray(){  if (fType == UNKNOWN && (fChecked & ARRAY) == 0 && Signature.getTypeSignatureKind(signature) == Signature.ARRAY_TYPE_SIGNATURE)   fType=ARRAY;  fChecked|=ARRAY;  return fType == ARRAY;}  }
class C{  public void showTreeItemControlDecoration(TreeViewer treeViewer,Object data,String message){  if (null == treeViewer) {    return;  }  for (  TreeItemControlDecoration decoration : treeItemControlDecorations) {    if (data == decoration.getData()) {      decoration.show();      decoration.setDescriptionText(message);      return;    }  }  for (  TreeItem treeItem : getAllTreeItems(treeViewer)) {    if (treeItem.getData() == data) {      TreeItemControlDecoration decoration=new TreeItemControlDecoration(treeItem);      decoration.show();      decoration.setDescriptionText(message);      treeItemControlDecorations.add(decoration);      return;    }  }}  }
class C{  protected void drawResultText(PaintEvent e,String text){  if (text != null) {    e.gc.setForeground(Raptor.getInstance().getPreferences().getColor(PreferenceKeys.RESULTS_COLOR));    e.gc.setFont(getResultFont(e.height));    Point extent=e.gc.stringExtent(text);    if (frame != -1) {      e.gc.setAdvanced(true);      e.gc.setAlpha((int)(255.0 / ANIMATION_STAGES * frame));      e.gc.drawString(text,e.width / 2 - extent.x / 2,e.height / 2 - extent.y / 2,true);      e.gc.setAlpha(255);    } else {      e.gc.drawString(text,e.width / 2 - extent.x / 2,e.height / 2 - extent.y / 2,true);    }  }}  }
class C{  public PTQLink(final Link link2,QNetwork network,final QNode toNode,StopStopTime stopStopTime){  this(link2,network,toNode,new FIFOVehicleQ(),stopStopTime);}  }
class C{  @Override public void onFailure(Call call,IOException e){  Log.i("HU","======onFailure sucesss==");  callBack.onError(e,mClient);}  }
class C{  public void updateBinaryStream(int columnIndex,java.io.InputStream x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  public String removeTitleFromText(String text,String title){  return text;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  protected void engineUpdate(byte[] input,int offset,int len){  if (input == null) {    throw new IllegalArgumentException("input == null");  }  if (len <= 0) {    return;  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset > input.length || len > input.length || (len + offset) > input.length) {    throw new IllegalArgumentException();  }  SHA1Impl.updateHash(buffer,input,offset,offset + len - 1);  messageLength+=len;}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  @Override public void clearArrivedMessages(String clientHandle){  db=mqttDb.getWritableDatabase();  int rows=0;  if (clientHandle == null) {    traceHandler.traceDebug(TAG,"clearArrivedMessages: clearing the table");    rows=db.delete(ARRIVED_MESSAGE_TABLE_NAME,null,null);  } else {    traceHandler.traceDebug(TAG,"clearArrivedMessages: clearing the table of " + clientHandle + " messages");    rows=db.delete(ARRIVED_MESSAGE_TABLE_NAME,MqttServiceConstants.CLIENT_HANDLE + "='" + clientHandle+ "'",null);  }  traceHandler.traceDebug(TAG,"clearArrivedMessages: rows affected = " + rows);  return;}  }
class C{  public AnimationGIF(int loops){  this.counter=0;  this.loops=loops;  this.ios=null;  this.writer=null;  this.baos=new ByteArrayOutputStream();  Iterator<ImageWriter> writerIterator=ImageIO.getImageWritersByFormatName("GIF");  this.writer=writerIterator.next();  this.ios=new MemoryCacheImageOutputStream(baos);  this.writer.setOutput(ios);  this.iwp=writer.getDefaultWriteParam();}  }
class C{  protected void printEntityDeclaration() throws TranscoderException, XMLException, IOException {  writer.write("<!ENTITY");  type=scanner.next();  if (type != LexicalUnits.S) {    throw fatalError("space",null);  }  writer.write(getCurrentValue());  type=scanner.next();  boolean pe=false;switch (type) {default :    throw fatalError("xml",null);case LexicalUnits.NAME:  writer.write(getCurrentValue());type=scanner.next();break;case LexicalUnits.PERCENT:pe=true;writer.write('%');type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}writer.write(getCurrentValue());type=scanner.next();if (type != LexicalUnits.NAME) {throw fatalError("name",null);}writer.write(getCurrentValue());type=scanner.next();}if (type != LexicalUnits.S) {throw fatalError("space",null);}writer.write(getCurrentValue());type=scanner.next();switch (type) {case LexicalUnits.STRING:case LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT:char sd=scanner.getStringDelimiter();writer.write(sd);loop: for (; ; ) {switch (type) {case LexicalUnits.STRING:case LexicalUnits.ATTRIBUTE_FRAGMENT:case LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT:case LexicalUnits.LAST_ATTRIBUTE_FRAGMENT:writer.write(getCurrentValue());break;case LexicalUnits.ENTITY_REFERENCE:writer.write('&');writer.write(getCurrentValue());writer.write(';');break;case LexicalUnits.PARAMETER_ENTITY_REFERENCE:writer.write('&');writer.write(getCurrentValue());writer.write(';');break;default :break loop;}type=scanner.next();}writer.write(sd);if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();}if (type != LexicalUnits.END_CHAR) {throw fatalError("end",null);}writer.write(">");type=scanner.next();return;case LexicalUnits.PUBLIC_IDENTIFIER:writer.write("PUBLIC");type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}type=scanner.next();if (type != LexicalUnits.STRING) {throw fatalError("string",null);}writer.write(" \"");writer.write(getCurrentValue());writer.write("\" \"");type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}type=scanner.next();if (type != LexicalUnits.STRING) {throw fatalError("string",null);}writer.write(getCurrentValue());writer.write('"');break;case LexicalUnits.SYSTEM_IDENTIFIER:writer.write("SYSTEM");type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}type=scanner.next();if (type != LexicalUnits.STRING) {throw fatalError("string",null);}writer.write(" \"");writer.write(getCurrentValue());writer.write('"');}type=scanner.next();if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();if (!pe && type == LexicalUnits.NDATA_IDENTIFIER) {writer.write("NDATA");type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}writer.write(getCurrentValue());type=scanner.next();if (type != LexicalUnits.NAME) {throw fatalError("name",null);}writer.write(getCurrentValue());type=scanner.next();}if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();}}if (type != LexicalUnits.END_CHAR) {throw fatalError("end",null);}writer.write('>');type=scanner.next();}  }
class C{  public ClientCacheFactory(Properties props){  if (props == null) {    props=new Properties();  }  this.dsProps=props;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean x=getBool(stack);  MediaNode node=getMediaNode(stack);  int count=0;  if (node != null) {    MediaNode[] kids=node.getChildren();    for (int i=0; kids != null && i < kids.length; i++)     if (kids[i].isChecked() == x)     count++;  }  return new Integer(count);}  }
class C{  public String describeAttributes(){  StringBuilder sb=new StringBuilder();  sb.append("[");  boolean first=true;  for (  Object key : attributes.keySet()) {    if (first) {      first=false;    } else {      sb.append(", ");    }    sb.append(key);    sb.append("==");    sb.append(attributes.get(key));  }  sb.append("]");  return sb.toString();}  }
class C{  public Vector rotateZY(final double sinAngle,final double cosAngle){  return new Vector(x,z * sinAngle + y * cosAngle,z * cosAngle - y * sinAngle);}  }
class C{  public static TableView createTempView(Session session,User owner,String name,Query query,Query topQuery){  Schema mainSchema=session.getDatabase().getSchema(Constants.SCHEMA_MAIN);  String querySQL=query.getPlanSQL();  TableView v=new TableView(mainSchema,0,name,querySQL,query.getParameters(),null,session,false);  if (v.createException != null) {    throw v.createException;  }  v.setTopQuery(topQuery);  v.setOwner(owner);  v.setTemporary(true);  return v;}  }
class C{  public CZoomSourceTargetAction(final ZyGraph graph,final NaviEdge edge){  super("Zoom to Source and Destination Node");  Preconditions.checkNotNull(graph,"IE00963: Graph argument can't be null");  Preconditions.checkNotNull(edge,"IE00964: Edge argument can't be null");  m_graph=graph;  m_edge=edge;}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("jrun4x",DeployerType.INSTALLED,JRun4xInstalledLocalDeployer.class);}  }
class C{  public boolean removeFieldValues(Object[] fieldValues){  return super.remove(fieldValues);}  }
class C{  public ReceiptHeader createReceiptHeaderWithInstrument(String receiptNum,char receiptType,String statusCode,String refNum,InstrumentType instrumentType,String instrumentNum,Double instrumentAmount,Date instrumentDate,String instrumentStatusCode,String glCode,String functionName,User user,Location counter) throws NumberFormatException {  PersonalInformation emp=createPersonalInformation(user,createDept("testDepartment"));  CChartOfAccounts coaObj=createCOA(glCode);  CFunction functionObj=createFunction(functionName);  ReceiptHeader receiptHeader=createUnsavedReceiptHeader(receiptNum,receiptType,refNum,statusCode,user,null);  receiptHeader.setReceiptMisc(createUnSavedReceiptMisc(receiptHeader));  receiptHeader.addInstrument(createInstrumentHeader(instrumentType,instrumentNum,instrumentAmount,instrumentDate,instrumentStatusCode,user));  receiptHeader.setLocation(counter);  ReceiptVoucher receiptVoucher=new ReceiptVoucher();  receiptVoucher.setReceiptHeader(receiptHeader);  receiptHeader.addReceiptVoucher(receiptVoucher);  session.saveOrUpdate(receiptHeader);  return receiptHeader;}  }
class C{  public static void addEndpoint(String region,String domain){  try {    DefaultProfile.addEndpoint(region,region,"BatchCompute",domain);  } catch (  ClientException e) {    e.printStackTrace();  }}  }
class C{  @Override public byte[] rpoplpush(final byte[] srckey,final byte[] dstkey){  checkIsInMultiOrPipeline();  client.rpoplpush(srckey,dstkey);  return client.getBinaryBulkReply();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__COMMENT_1:    return getComment_1();case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__CHANGE_TYPE_1:  return getChangeType_1();case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__STATE_1:return getState_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public EaseOutIn(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.262 -0400",hash_original_method="62BDD93087776E98D3A2E48C7C1EDD64",hash_generated_method="B95685F9BFFF7CB0A56ACC5B76A57166") private void insertIndex(Node<K,V> z,int level){  HeadIndex<K,V> h=head;  int max=h.level;  if (level <= max) {    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idx=new Index<K,V>(z,idx,null);    addIndex(idx,h,level);  } else {    level=max + 1;    Index<K,V>[] idxs=(Index<K,V>[])new Index<?,?>[level + 1];    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idxs[i]=idx=new Index<K,V>(z,idx,null);    HeadIndex<K,V> oldh;    int k;    for (; ; ) {      oldh=head;      int oldLevel=oldh.level;      if (level <= oldLevel) {        k=level;        break;      }      HeadIndex<K,V> newh=oldh;      Node<K,V> oldbase=oldh.node;      for (int j=oldLevel + 1; j <= level; ++j)       newh=new HeadIndex<K,V>(oldbase,newh,idxs[j],j);      if (casHead(oldh,newh)) {        k=oldLevel;        break;      }    }    addIndex(idxs[k],oldh,k);  }}  }
class C{  public boolean equals(IBinding o){  if (o == this) {    return true;  }  if (o instanceof IBinding) {    IBinding b=(IBinding)o;    return var == b.getVar() && val.equals(b.getVal());  }  return false;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void markLastSnapshot(){  this.lastSnapshot=true;  this.nextSnapshot=false;}  }
class C{  public static void removeTransitRouteByMode(TransitSchedule schedule,Set<String> modesToRemove){  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : new HashSet<>(transitLine.getRoutes().values())) {      if (modesToRemove.contains(transitRoute.getTransportMode())) {        transitLine.removeRoute(transitRoute);      }    }  }}  }
class C{  protected void displayImageFromNetwork(String imageUri,ImageView imageView) throws IOException {  GlideUtils.display(context,imageView,imageUri);  return;}  }
class C{  public Shape evaluate(Shape v0,Shape v1,float fraction,boolean unionBounds){  if (savedV0 != v0 || savedV1 != v1) {    if (savedV0 == v1 && savedV1 == v0) {      final Geometry tmp=geom0;      geom0=geom1;      geom1=tmp;    } else {      recalculate(v0,v1);    }    savedV0=v0;    savedV1=v1;  }  return getShape(fraction,unionBounds);}  }
class C{  @Override public boolean isResetted(){  return (x == 0.0f && y == 0.0f && z == 0.0f);}  }
class C{  InvokeDynamicConstant(ConstantPool pool,int index,BootstrapMethodAttribute attr,int bootstrapMethodAttrIndex,int nameAndTypeIndex){  super(pool,index);  _attr=attr;  _bootstrapMethodAttrIndex=bootstrapMethodAttrIndex;  _nameAndTypeIndex=nameAndTypeIndex;}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  public DateTime toDateTime(LocalTime time,DateTimeZone zone){  if (time != null && getChronology() != time.getChronology()) {    throw new IllegalArgumentException("The chronology of the time does not match");  }  Chronology chrono=getChronology().withZone(zone);  long instant=DateTimeUtils.currentTimeMillis();  instant=chrono.set(this,instant);  if (time != null) {    instant=chrono.set(time,instant);  }  return new DateTime(instant,chrono);}  }
class C{  public byte readByte() throws TException {  byte b;  if (trans_.getBytesRemainingInBuffer() > 0) {    b=trans_.getBuffer()[trans_.getBufferPosition()];    trans_.consumeBuffer(1);  } else {    trans_.readAll(byteRawBuf,0,1);    b=byteRawBuf[0];  }  return b;}  }
class C{  public ObjectFactory(){}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public Axis3D(ReadonlyVec3D o,ReadonlyVec3D dir){  this.origin=o;  this.dir=dir.getNormalized();}  }
class C{  public CronCalendar(Calendar baseCalendar,String expression) throws ParseException {  this(baseCalendar,expression,null);}  }
class C{  private static void updateAccessControl(CalendarService service,String userEmail,AclRole newRole) throws ServiceException, IOException {  AclFeed aclFeed=service.getFeed(aclFeedUrl,AclFeed.class);  for (  AclEntry aclEntry : aclFeed.getEntries()) {    if (userEmail.equals(aclEntry.getScope().getValue())) {      aclEntry.setRole(newRole);      AclEntry updatedEntry=aclEntry.update();      System.out.println("Updated user's access control:");      System.out.println("\tScope: Type=" + updatedEntry.getScope().getType() + " ("+ updatedEntry.getScope().getValue()+ ")");      System.out.println("\tRole: " + updatedEntry.getRole().getValue());      break;    }  }}  }
class C{  public static boolean canInteract(Role issuer,Role target){  if (issuer.getGuild() != target.getGuild())   throw new IllegalArgumentException("The 2 Roles are not from same Guild!");  return target.getPosition() < issuer.getPosition();}  }
class C{  @Transactional protected void _setServiceEnabled(boolean enabled){synchronized (_serviceManagementRecordService) {    ServiceManagementRecord record=_serviceManagementRecordService.findServiceManagementRecord(Service.SCHEDULING);    if (record == null) {      record=new ServiceManagementRecord(_userService.findAdminUser(),Service.SCHEDULING,enabled);    }    record.setEnabled(enabled);    _serviceManagementRecordService.updateServiceManagementRecord(record);  }}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  private Workflow.Method deleteFileSharesMethod(URI systemURI,List<URI> fileShareURIs,boolean forceDelete,String deleteType,String taskId){  FileShare fsObj=_dbClient.queryObject(FileShare.class,fileShareURIs.get(0));  return new Workflow.Method("delete",fsObj.getStorageDevice(),fsObj.getPool(),fsObj.getId(),forceDelete,deleteType);}  }
class C{  public static double parseDoubleString(String st,TExecutionContext context){  double ret=0;  Matcher m=DOUBLE_PATTERN.matcher(st);  if (m.lookingAt()) {    String truncated=st.substring(0,m.end());    if (!truncated.equals(st)) {      context.reportTruncate(st,truncated);    }    try {      ret=Double.parseDouble(truncated);    } catch (    NumberFormatException e) {      context.reportBadValue(e.getMessage());    }  } else   context.reportBadValue(st);  return ret;}  }
class C{  private String convertToStoragePattern(String urlSegment){  return urlSegment.replace(requestUrlBase,"").replace("/","+").replace(".","+").replace(":","+");}  }
class C{  @SuppressWarnings("unused") private double maxDist(Vec p,Rectangle r){  if (r.contains(p))   return 0;  for (int i=0; i < dim; i++) {    double pi=p.get(i);    double si=r.lB.get(i);    double ti=r.uB.get(i);    if (pi < si)     dcScratch.set(i,ti); else     if (pi > ti)     dcScratch.set(i,si); else     dcScratch.set(i,pi);  }  return dm.dist(p,dcScratch);}  }
class C{  public int compareTo(Byte object){  return compare(value,object.value);}  }
class C{  @SuppressWarnings({"HardCodedStringLiteral"}) private boolean isInternalFrameSystemMenu(){  String actionCommand=menuItem.getActionCommand();  if (("Close".equals(actionCommand)) || ("Minimize".equals(actionCommand)) || ("Restore".equals(actionCommand))|| ("Maximize".equals(actionCommand))) {    return true;  } else {    return false;  }}  }
class C{  public short acceptNode(int n,XPathContext xctxt){  try {    xctxt.pushCurrentNode(n);    xctxt.pushIteratorRoot(m_context);    if (DEBUG) {      System.out.println("traverser: " + m_traverser);      System.out.print("node: " + n);      System.out.println(", " + m_cdtm.getNodeName(n));      System.out.println("pattern: " + m_pattern.toString());      m_pattern.debugWhatToShow(m_pattern.getWhatToShow());    }    XObject score=m_pattern.execute(xctxt);    if (DEBUG) {      System.out.println("score: " + score);      System.out.println("skip: " + (score == NodeTest.SCORE_NONE));    }    return (score == NodeTest.SCORE_NONE) ? DTMIterator.FILTER_SKIP : DTMIterator.FILTER_ACCEPT;  } catch (  javax.xml.transform.TransformerException se) {    throw new RuntimeException(se.getMessage());  } finally {    xctxt.popCurrentNode();    xctxt.popIteratorRoot();  }}  }
class C{  public void removeTickMarkSection(final Section SECTION){  if (null == SECTION)   return;  tickMarkSections.remove(SECTION);  Collections.sort(tickMarkSections,new SectionComparator());  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  private void layoutComponents(){  setLayout(new GridBagLayout());  setBorder(new CompoundBorder(new TitledBorder(DISPLAY_NAME),new EmptyBorder(6,6,6,6)));  setToolTipText(DESCRIPTION);  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridheight=1;  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy=0;  c.weightx=0.33f;  c.weighty=0;  add(new JLabel("Rows"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(rows,c);  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Columns"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(columns,c);  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Receptive field height"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(receptiveFieldHeight,c);  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Receptive field width"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(receptiveFieldWidth,c);  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Effective size"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(effectiveSize,c);  c.anchor=GridBagConstraints.NORTHWEST;  c.fill=GridBagConstraints.BOTH;  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  c.weighty=1.0f;  add(Box.createGlue(),c);}  }
class C{  static String byteArrayToAltBase64(byte[] a){  return byteArrayToBase64(a,true);}  }
class C{  public void addLine(String line) throws AdeException {  m_processor.incomingObject(line);  m_lastMessageTime=System.currentTimeMillis();  m_flushed=false;}  }
class C{  private void load(File file) throws IOException {  MatrixReader reader=null;  try {    reader=new MatrixReader(file);    A=new double[N];    B=new double[N];    C_A=new double[N][P];    C_B=new double[N][P];    for (int i=0; i < N; i++) {      A[i]=reader.next()[index];      for (int j=0; j < P; j++) {        C_A[i][j]=reader.next()[index];      }      for (int j=0; j < P; j++) {        C_B[i][j]=reader.next()[index];      }      B[i]=reader.next()[index];    }  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public Optional<Err> validate(Framework.Mapping<?> mapping,Map<String,String> data){  return validate(mapping,data,"");}  }
class C{  private void configureBounds(GalleryView view){  if (view.getDrawable() == null) {    return;  }  float dx, dy;  int dWidth=view.getDrawableWidth(), dHeight=view.getDrawableHeight(), vWidth=view.getInsetWidth(), vHeight=view.getInsetHeight();  view.setScaleType(ImageView.ScaleType.MATRIX);  Matrix matrix=new Matrix();  if (dWidth * vHeight > vWidth * dHeight) {    mCurrentScale=(float)vHeight / (float)dHeight;  } else {    mCurrentScale=(float)vWidth / (float)dWidth;  }  dx=-((dWidth * mCurrentScale * getScaleFactor()) - vWidth) * 0.5f;  dy=-((dHeight * mCurrentScale * getScaleFactor()) - vHeight) * 0.5f;  matrix.setScale(mCurrentScale * getScaleFactor(),mCurrentScale * getScaleFactor());  matrix.postTranslate((int)(dx + 0.5f),(int)(dy + 0.5f));  view.setImageMatrix(matrix);}  }
class C{  public Object evaluate(final String scriptText) throws CompilationFailedException {  return evaluate(scriptText,generateScriptName(),DEFAULT_CODE_BASE);}  }
class C{  public void writeAll(ResultSet rs,boolean includeColumnNames,boolean trim) throws SQLException, IOException {  if (includeColumnNames) {    writeColumnNames(rs);  }  while (rs.next()) {    writeNext(resultService.getColumnValues(rs,trim));  }}  }
class C{  public boolean put(AnalysisSmartCacheRequest request){  Map<String,HashSet<String>> sameAxes=lookup.get(request.getAxesSignature());  if (sameAxes == null) {    sameAxes=new ConcurrentHashMap<String,HashSet<String>>();    lookup.put(request.getAxesSignature(),sameAxes);  }  HashSet<String> sameFilters=sameAxes.get(request.getFiltersSignature());  if (sameFilters == null) {    sameFilters=new HashSet<String>();    sameAxes.put(request.getFiltersSignature(),sameFilters);  }  String key=request.getSignature().buildCacheKey();  if (!sameFilters.contains(key)) {    sameFilters.add(key);  }  if (this.cache.getIfPresent(key) == null) {    this.cache.put(key,request.getSignature());  }  return contains.add(key);}  }
class C{  public static final Geo isSegmentNearPoly(Geo s1,Geo s2,GeoArray r,double near){  int rlen=r.getSize();  Geo pl0=r.get(rlen - 1,new Geo());  Geo pl1=new Geo();  Geo check=new Geo();  for (int j=0; j < rlen; j++) {    pl1=r.get(j,pl1);    Geo ret=segmentsIntersectOrNear(s1,s2,pl0,pl1,near,check);    if (ret != null) {      return ret;    }    pl0.initialize(pl1);  }  return null;}  }
class C{  private List<KeyPair> createKeyPairBlock(final long size){  try {    final Callable<List<KeyPair>> keyGeneration=null;    return executorService.submit(keyGeneration).get();  } catch (  final ExecutionException e) {    throw new RuntimeException("The parallel execution has failed in the fork-join framework",e);  }catch (  final InterruptedException e) {    throw new RuntimeException("An executor thread got interrupted while executing the generation",e);  }}  }
class C{  public static byte[] toByteArray(String s,int family){  if (family == IPv4)   return parseV4(s); else   if (family == IPv6)   return parseV6(s); else   throw new IllegalArgumentException("unknown address family");}  }
class C{  public long version(){  return version;}  }
class C{  private void removeGroup(Group group){  PNode node=objectNodeMap.get(group);  if (node != null) {    if (node instanceof GroupNode) {      for (      InteractionBox box : ((GroupNode)node).getInteractionBoxes()) {        canvas.getCamera().removePropertyChangeListener(box.getZoomListener());      }    }    node.removeFromParent();    objectNodeMap.remove(group);    if (!group.isTopLevelGroup()) {      PNode parentGroupNode=objectNodeMap.get(group.getParentGroup());      if (parentGroupNode != null) {        if (parentGroupNode instanceof SubnetworkNode) {          ((SubnetworkNode)parentGroupNode).getOutlinedObjects().removeChild(node);        }      }    }  }  zoomToFitPage(false);}  }
class C{  public void add(ReceiveCommand cmd){  checkArgument(!cmd.getOldId().equals(cmd.getNewId()),"ref update is a no-op: %s",cmd);  ReceiveCommand old=commands.get(cmd.getRefName());  if (old == null) {    commands.put(cmd.getRefName(),cmd);    return;  }  checkArgument(old.getResult() == ReceiveCommand.Result.NOT_ATTEMPTED,"cannot chain ref update %s after update %s with result %s",cmd,old,old.getResult());  checkArgument(cmd.getOldId().equals(old.getNewId()),"cannot chain ref update %s after update %s with different new ID",cmd,old);  commands.put(cmd.getRefName(),new ReceiveCommand(old.getOldId(),cmd.getNewId(),cmd.getRefName()));}  }
class C{  public Stack(){}  }
class C{  public static JMenu leftShift(JMenu self,String str){  self.add(str);  return self;}  }
class C{  void appendComment(int m_char_current_start,int contentLength){  int w0=COMMENT_NODE;  int w1=currentParent;  int w2=m_char_current_start;  int w3=contentLength;  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;}  }
class C{  public boolean releaseLock(String lockName){  if (lockName == null || lockName.isEmpty()) {    s_logger.info("No lock name specified.");    return false;  }  try {    InterProcessLock lock=s_acquiredLocks.get(lockName);    if (lock != null) {      s_acquiredLocks.remove(lockName);      lock.release();      s_logger.info("Released lock: " + lockName);    } else {      return false;    }    return true;  } catch (  Exception e) {    s_logger.error("Release of lock: {} failed with Exception: ",lockName,e);    return false;  }}  }
class C{  public void finishActivity(Class<?> cls){  for (  Activity activity : activityStack) {    if (activity.getClass().equals(cls)) {      finishActivity(activity);    }  }}  }
class C{  public int writeBytes(int index,byte[] b){  return this.writeBytes(index,b,0,b.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:42.115 -0500",hash_original_method="4BAB8C537F83CAF09BA4245CA1B5A6A2",hash_generated_method="4BBA0B61C3FD28B33E6A4CEA5F5778FD") public String toDebugString(){  StringBuffer sb=new StringBuffer();  if (fullSyncRequested) {    sb.append("f1");  }  if (partialSyncUnavailable) {    sb.append("r1");  }  if (hasHardError()) {    sb.append("X1");  }  if (stats.numParseExceptions > 0) {    sb.append("e").append(stats.numParseExceptions);  }  if (stats.numConflictDetectedExceptions > 0) {    sb.append("c").append(stats.numConflictDetectedExceptions);  }  if (stats.numAuthExceptions > 0) {    sb.append("a").append(stats.numAuthExceptions);  }  if (tooManyDeletions) {    sb.append("D1");  }  if (tooManyRetries) {    sb.append("R1");  }  if (databaseError) {    sb.append("b1");  }  if (hasSoftError()) {    sb.append("x1");  }  if (syncAlreadyInProgress) {    sb.append("l1");  }  if (stats.numIoExceptions > 0) {    sb.append("I").append(stats.numIoExceptions);  }  return sb.toString();}  }
class C{  public UpdaterEditingTableModelObs(Node node,BayesIm bayesIm,UpdatedBayesImWizardObs wizard){  if (node == null) {    throw new NullPointerException("Node must not be null.");  }  if (bayesIm == null) {    throw new NullPointerException("Bayes IM must not be null.");  }  if (wizard == null) {    throw new NullPointerException("Wizard must not be null.");  }  this.bayesIm=bayesIm;  this.nodeIndex=bayesIm.getNodeIndex(node);  this.wizard=wizard;}  }
class C{  public void checkCanRun(){  if (!isAllowedToRun() || !worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord)) {    if (laserSat.isAlive()) {      laserSat.deactivateLaser();    }    setRunning(false);  } else   if (!laserSat.isAlive() && !finished && !laserSat.getJammed()&& worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord)&& canMachineSeeEarth()) {    int orbitDimId=((WorldProviderSpace)this.worldObj.provider).getDimensionProperties(xCoord,zCoord).getParentPlanet();    if (orbitDimId == SpaceObjectManager.WARPDIMID)     return;    WorldServer orbitWorld=DimensionManager.getWorld(orbitDimId);    if (orbitWorld == null) {      DimensionManager.initDimension(orbitDimId);      orbitWorld=DimensionManager.getWorld(orbitDimId);      if (orbitWorld == null)       return;    }    if (ticket == null) {      ticket=ForgeChunkManager.requestTicket(AdvancedRocketry.instance,this.worldObj,Type.NORMAL);      if (ticket != null)       ForgeChunkManager.forceChunk(ticket,new ChunkCoordIntPair(this.xCoord / 16 - (this.xCoord < 0 ? 1 : 0),this.zCoord / 16 - (this.zCoord < 0 ? 1 : 0)));    }    setRunning(laserSat.activateLaser(orbitWorld,laserX,laserZ));  }  if (!this.worldObj.isRemote)   PacketHandler.sendToNearby(new PacketMachine(this,(byte)12),this.xCoord,this.yCoord,this.zCoord,128,this.worldObj.provider.dimensionId);}  }
class C{  private String computeReplacementString(){  int proposalKind=fProposal.getKind();  String qualifiedTypeName=null;  char[] qualifiedType=null;  if (proposalKind == CompletionProposal.TYPE_IMPORT) {    qualifiedType=fProposal.getSignature();    qualifiedTypeName=String.valueOf(Signature.toCharArray(qualifiedType));  } else   if (proposalKind == CompletionProposal.METHOD_IMPORT || proposalKind == CompletionProposal.FIELD_IMPORT) {    qualifiedType=Signature.getTypeErasure(fProposal.getDeclarationSignature());    qualifiedTypeName=String.valueOf(Signature.toCharArray(qualifiedType));  } else {    Assert.isTrue(false);  }  fImportRewrite=createImportRewrite();  if (fImportRewrite != null) {    if (proposalKind == CompletionProposal.TYPE_IMPORT) {      String simpleType=fImportRewrite.addImport(qualifiedTypeName,fImportContext);      if (fParentProposalKind == CompletionProposal.METHOD_REF)       return simpleType + ".";    } else {      String res=fImportRewrite.addStaticImport(qualifiedTypeName,String.valueOf(fProposal.getName()),proposalKind == CompletionProposal.FIELD_IMPORT,fImportContext);      int dot=res.lastIndexOf('.');      if (dot != -1) {        String typeName=fImportRewrite.addImport(res.substring(0,dot),fImportContext);        return typeName + '.';      }    }    return "";  }  if (fCompilationUnit != null && JavaModelUtil.isImplicitImport(Signature.getQualifier(qualifiedTypeName),fCompilationUnit)) {    if (fProposal.getKind() == CompletionProposal.TYPE_IMPORT && fParentProposalKind == CompletionProposal.FIELD_REF)     return "";    qualifiedTypeName=String.valueOf(Signature.getSignatureSimpleName(qualifiedType));  }  return qualifiedTypeName + ".";}  }
class C{  private DbRepairStatus queryDbRepairStatus(String svcName) throws Exception {  int progress=-1;  DbRepairStatus.Status status=null;  Date startTime=null;  Date endTime=null;  log.info("Try to get repair status of {}",svcName);  try (DbManagerOps dbManagerOps=new DbManagerOps(svcName)){    DbRepairStatus repairState=dbManagerOps.getLastRepairStatus(false);    if (repairState != null) {      log.info("Current repair status of {} is: {}",svcName,repairState.toString());      progress=repairState.getProgress();      status=repairState.getStatus();      startTime=repairState.getStartTime();      endTime=repairState.getLastCompletionTime();    }    if (endTime != null) {      return repairState;    }    repairState=dbManagerOps.getLastSucceededRepairStatus(false);    if (repairState != null) {      log.info("Last successful repair status of {} is: {}",svcName,repairState.toString());      progress=(progress == -1) ? repairState.getProgress() : progress;      status=(status == null) ? repairState.getStatus() : status;      startTime=(startTime == null) ? repairState.getStartTime() : startTime;      endTime=(endTime == null) ? repairState.getLastCompletionTime() : endTime;    }  }   if (status != null) {    return new DbRepairStatus(status,startTime,endTime,progress);  }  return null;}  }
class C{  static void writeReqFrame(ByteBuffer bb,int methodId,long seq,int length) throws IOException {  int oldPos=bb.position();  boolean success=false;  try {    bb.order(ByteOrder.LITTLE_ENDIAN);    bb.putInt(HRPC_MAGIC);    bb.putInt(methodId);    bb.putLong(seq);    bb.putInt(length);    success=true;  }  finally {    if (!success) {      bb.position(oldPos);    }  }}  }
class C{  public static ImageTypeSpecifier createPacked(ColorSpace colorSpace,int redMask,int greenMask,int blueMask,int alphaMask,int transferType,boolean isAlphaPremultiplied){  return new ImageTypeSpecifier.Packed(colorSpace,redMask,greenMask,blueMask,alphaMask,transferType,isAlphaPremultiplied);}  }
class C{  public static int reverseBytes(int i){  i=((i >>> 8) & 0x00FF00FF) | ((i & 0x00FF00FF) << 8);  return (i >>> 16) | (i << 16);}  }
class C{  public void readAll(InputStream in) throws IOException {  assert in != null;  int read=0;  while (read >= 0) {    int free=capacity() - size;    if (free == 0) {      requestFreeSize(1);      free=capacity() - size;      assert free > 0;    }    read=in.read(data,size,free);    if (read > 0)     size+=read;  }}  }
class C{  public void onChange(boolean selfChange){}  }
class C{  @Deprecated private CharSequence buildLimitedNetworksString(){  final List<CharSequence> limited=buildLimitedNetworksList();  if (limited.isEmpty()) {    limited.add(getText(R.string.data_usage_list_none));  }  return TextUtils.join(limited);}  }
class C{  public void reset(){  lastMtd=null;  map.clear();  loadCnt.set(0);  putCnt.set(0);  putAllCnt.set(0);  ts=System.currentTimeMillis();  txs.clear();}  }
class C{  @Deprecated public void copyNote(String noteGuid,String toNotebookGuid,OnClientCallback<Note> callback){  AsyncReflector.execute(mClient,callback,"copyNote",mAuthenticationToken,noteGuid,toNotebookGuid);}  }
class C{  public boolean verifySignature(byte[] data){  if (signature != null) {    try {      if (sha_hash == null) {        sha_hash=sha.digest();      }      signature.update(sha_hash);      return signature.verify(data);    } catch (    SignatureException e) {      return false;    }  }  if (cipher != null) {    final byte[] decrypt;    try {      decrypt=cipher.doFinal(data);    } catch (    IllegalBlockSizeException e) {      return false;    }catch (    BadPaddingException e) {      return false;    }    final byte[] md5_sha;    if (sha != null && sha_hash == null) {      sha_hash=sha.digest();    }    if (md5 != null && md5_hash == null) {      md5_hash=md5.digest();    }    if (md5_hash != null && sha_hash != null) {      md5_sha=new byte[md5_hash.length + sha_hash.length];      System.arraycopy(md5_hash,0,md5_sha,0,md5_hash.length);      System.arraycopy(sha_hash,0,md5_sha,md5_hash.length,sha_hash.length);    } else     if (md5_hash != null) {      md5_sha=md5_hash;    } else {      md5_sha=sha_hash;    }    return Arrays.equals(decrypt,md5_sha);  } else   if (data == null || data.length == 0) {    return true;  } else {    return false;  }}  }
class C{  public Quaternion slerp(Quaternion end,float alpha){  if (this.equals(end)) {    return this;  }  float result=dot(end);  if (result < 0.0) {    end.mul(-1);    result=-result;  }  float scale0=1 - alpha;  float scale1=alpha;  if ((1 - result) > 0.1) {    final double theta=Math.acos(result);    final double invSinTheta=1f / Math.sin(theta);    scale0=(float)(Math.sin((1 - alpha) * theta) * invSinTheta);    scale1=(float)(Math.sin((alpha * theta)) * invSinTheta);  }  final float x=(scale0 * this.x) + (scale1 * end.x);  final float y=(scale0 * this.y) + (scale1 * end.y);  final float z=(scale0 * this.z) + (scale1 * end.z);  final float w=(scale0 * this.w) + (scale1 * end.w);  set(x,y,z,w);  return this;}  }
class C{  @POST @Path("image/install/cancel/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response cancelInstallingOrUploadingImage() throws IOException {  _log.info("cancelInstallingOrUploadingImage()");  DownloadingInfo downloadInfo=null;  boolean inProgressFlag=false;  DownloadingInfo downloadTargetInfo;  try {    downloadTargetInfo=_coordinator.getTargetInfo(DownloadingInfo.class);  } catch (  Exception e1) {    throw APIException.internalServerErrors.getObjectFromError("Target downloading info","coordinator",e1);  }  if (null == downloadTargetInfo || DownloadStatus.CANCELLED == downloadTargetInfo._status) {    inProgressFlag=false;  }  for (  String svcId : _coordinator.getAllNodes()) {    DownloadingInfo tmpInfo;    try {      tmpInfo=_coordinator.getNodeGlobalScopeInfo(DownloadingInfo.class,DOWNLOADINFO_KIND,svcId);    } catch (    Exception e) {      throw APIException.internalServerErrors.getObjectFromError("Node downloading info","coordinator",e);    }    if (null != tmpInfo && tmpInfo._status != DownloadStatus.COMPLETED) {      downloadInfo=tmpInfo;      inProgressFlag=true;      break;    }  }  if (!inProgressFlag) {    throw APIException.badRequests.noDownloadInProgress();  }  String installingVersion=downloadInfo._version;  if (installingVersion.equals(VIPR_UNKNOWN_IMAGE_VERSION)) {    throw ServiceUnavailableException.serviceUnavailable.versionOfTheImageIsUnknownSoFar();  }  _coordinator.setTargetInfo(downloadInfo.cancel(),false);  return removeImage(installingVersion,"1");}  }
class C{  public PdxInitializationException(String message){  super(message);}  }
class C{  public JavaScriptFunctionElement(String variableName){  this.functionName=variableName;}  }
class C{  @Override public boolean isSupportingLogScale(int axis){  if (axis == X_AXIS || axis == Y_AXIS) {    return true;  } else {    return super.isSupportingLogScale(axis);  }}  }
class C{  protected void parseData(Vector data){  int nLines=data.size();  llData=new float[2 * nLines];  infoData=new String[nLines];  drillData=new String[nLines];  for (int i=0, j=0, k=0; i < nLines; i++) {    String line=(String)data.elementAt(i);    StringTokenizer tokens=new StringTokenizer(line);    String sdate=tokens.nextToken();    String stime=tokens.nextToken();    String slat=tokens.nextToken();    String slon=tokens.nextToken();    if (slon.startsWith("NWSE"))     slon=tokens.nextToken();    String sdep=tokens.nextToken();    if (sdep.startsWith("NWSE"))     sdep=tokens.nextToken();    String smag=tokens.nextToken();    String q=tokens.nextToken();    String scomment=tokens.nextToken("\r\n");    if (q.length() > 1) {      scomment=q + " " + scomment;    }    infoData[j]=smag;    drillData[j++]=sdate + " " + stime+ " (UTC)  "+ slat+ " "+ slon+ " "+ smag+ " "+ scomment;    int west=slon.indexOf("W");    int south=slat.indexOf("S");    if (west >= 0)     slon=slon.replace('W','\0'); else     slon=slon.replace('E','\0');    if (south >= 0)     slat=slat.replace('S','\0'); else     slat=slat.replace('N','\0');    slon=slon.trim();    slat=slat.trim();    float flat=0, flon=0;    try {      flat=new Float(slat).floatValue();      flon=new Float(slon).floatValue();    } catch (    NumberFormatException e) {      Debug.error("EarthquakeLayer.parseData(): " + e + " line: "+ line);    }    if (south >= 0)     flat=-flat;    if (west >= 0)     flon=-flon;    llData[k++]=flat;    llData[k++]=flon;  }}  }
class C{  public JsonFlattener(String json){  source=Json.parse(json);}  }
class C{  public SVGOMFontFaceFormatElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public ChartFrame(String title,JFreeChart chart){  this(title,chart,false);}  }
class C{  @Override public void finish(){  for (  Entry<String,FileChannel> entry : fileNameAndStreamCache.entrySet()) {    try {      FileChannel channel=entry.getValue();      if (null != channel) {        channel.close();      }    } catch (    IOException exception) {      LOGGER.error(exception,exception.getMessage());    }  }}  }
class C{  public <T>T evaluate(Expression expression,Map<String,Object> variables){  return evaluate(expression,null,variables);}  }
class C{  private LimitSizeEntryList filterEntries(LimitSizeEntryList entries){  LimitSizeEntryList list=new LimitSizeEntryList(entries.capacity(),entries.getTrimSize());  if (collapsed) {    for (    ConsoleEntry entry : entries) {      if (filterEntry(entry)) {        ConsoleCollapsedEntry collapsedEntry=as(entry,ConsoleCollapsedEntry.class);        if (collapsedEntry != null) {          collapsedEntry.index=list.totalCount();          list.addObject(collapsedEntry);        } else {          collapsedEntry=entryLookup.addEntry(entry);          if (collapsedEntry.count == 1) {            collapsedEntry.index=list.totalCount();            list.addObject(collapsedEntry);          }        }      }    }  } else {    for (    ConsoleEntry entry : entries) {      if (filterEntry(entry)) {        list.addObject(entry);      }    }  }  return list;}  }
class C{  public boolean add(E e){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    Object[] newElements=Arrays.copyOf(elements,len + 1);    newElements[len]=e;    setArray(newElements);    return true;  }  finally {    lock.unlock();  }}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}labels[label].line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  public static BufferedImage scale(BufferedImage bi,double perc){  int cw=(int)(bi.getWidth() * perc / 100);  int ch=(int)(bi.getHeight() * perc / 100);  BufferedImage scaled=new BufferedImage(cw,ch,bi.getType());  Graphics g=scaled.getGraphics();  g.drawImage(bi,0,0,cw,ch,null);  return scaled;}  }
class C{  @Inject public ToolbarPresenter(ToolbarView view){  this.view=view;  this.view.setDelegate(this);}  }
class C{  private void resetSchema(boolean isSource,String newSchema){  String name=getSchemaName(isSource,newSchema);  if (isSource) {    m_sourceSchema.removeAllItems();  } else {    m_targetSchema.removeAllItems();  }  ArrayList<String> databaseSchemas=getSchemaNames(isSource);  if (databaseSchemas != null && databaseSchemas.size() > 0) {    for (    String databaseSchema : databaseSchemas) {      if (isSource) {        m_sourceSchema.addItem(databaseSchema.toLowerCase());      } else {        m_targetSchema.addItem(databaseSchema.toLowerCase());      }    }  }  if (isSource) {    m_sourceSchema.setSelectedItem(name);    m_sourceSchemaOld=name;  } else {    m_targetSchema.setSelectedItem(name);    m_targetSchemaOld=name;  }}  }
class C{  @Override public void resetLearning(){  learner.resetLearning();}  }
class C{  public void downloadSinglePatient(CrudEventBus bus,String patientId){  bus.registerCleanupSubscriber(new CrudEventBusCleanupSubscriber(bus));  mTaskFactory.newDownloadSinglePatientTask(patientId,bus).execute();}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public DecisionStump(){  gainMethod=ImpurityMeasure.INFORMATION_GAIN_RATIO;  removeContinuousAttributes=false;}  }
class C{  public static int neg(int numBits,int value){  return (-signExtend(numBits,value));}  }
class C{  public static DateTimeFormatter basicDate(){  if (bd == null) {    bd=new DateTimeFormatterBuilder().appendYear(4,4).appendFixedDecimal(DateTimeFieldType.monthOfYear(),2).appendFixedDecimal(DateTimeFieldType.dayOfMonth(),2).toFormatter();  }  return bd;}  }
class C{  public int addLinePlot(String name,Color color,double[][] XY){  return ((Plot2DCanvas)plotCanvas).addLinePlot(name,color,XY);}  }
class C{  public static Classification public_(){  return create(PUBLIC);}  }
class C{  public static Object read(String filename) throws Exception {  return read(new FileInputStream(filename));}  }
class C{  public static String toString(List<CssSelector> selectors){  StringBuilder out=new StringBuilder();  for (  CssSelector s : selectors) {    out.append(s.toString());  }  return out.toString();}  }
class C{  public boolean isValidMapping(UserMapping userMapping){  if (CollectionUtils.isEmpty(userMapping.getGroups())) {    return true;  }  for (  String group : userMapping.getGroups()) {    if (StringUtils.isBlank(group)) {      _log.warn("Invalid group in the user mapping groups list");      continue;    }    StorageOSPrincipal groupPrincipal=new StorageOSPrincipal();    groupPrincipal.setType(StorageOSPrincipal.Type.Group);    groupPrincipal.setName(group + "@" + userMapping.getDomain());    List<UserGroup> userGroupList=_permissionsHelper.getAllUserGroupByLabel(group);    if (!CollectionUtils.isEmpty(userGroupList)) {      for (      UserGroup userGroup : userGroupList) {        if (userGroup != null && userGroup.getDomain().equalsIgnoreCase(userMapping.getDomain())) {          _log.debug("Group {} is considered as user group",group);          groupPrincipal.setName(group);        }      }    }    if (!Validator.isValidPrincipal(groupPrincipal,null)) {      return false;    }  }  return true;}  }
class C{  MultiplexConnectionInfo(int id){  this.id=id;}  }
class C{  public boolean isAfterInit(){  return getState().isAfterInit();}  }
class C{  public static RealMatrix translationMatrix(double x,double y,double z){  return new Array2DRowRealMatrix(new double[][]{{1,0,0,0},{0,1,0,0},{0,0,1,0},{x,y,z,1}});}  }
class C{  public TripleAPlayer(final String name,final String type){  super(name,type);}  }
class C{  @Override public void clearCache(){  if (!clearLocalCacheOnly) {    for (    Painter<T> p : painters) {      if (p instanceof AbstractPainter) {        AbstractPainter<?> ap=(AbstractPainter<?>)p;        ap.clearCache();      }    }  }  super.clearCache();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public static void check(boolean cond,String msg){  if (!cond)   error(msg);}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#attributeDecl: " + eName + ", "+ aName+ ", etc...");  if (null != m_declHandler) {    m_declHandler.attributeDecl(eName,aName,type,valueDefault,value);  }}  }
class C{  private static boolean contains(@NotNull RangeMarker rangeMarker,@NotNull FoldRegion foldRegion){  return rangeMarker.getStartOffset() <= foldRegion.getStartOffset() && rangeMarker.getEndOffset() >= foldRegion.getEndOffset();}  }
class C{  public AnalysisResult(Map<Node,A> nodeValues,IdentityHashMap<Block,TransferInput<A,S>> stores,IdentityHashMap<Tree,Node> treeLookup,HashMap<Element,A> finalLocalValues){  this.nodeValues=new IdentityHashMap<>(nodeValues);  this.treeLookup=new IdentityHashMap<>(treeLookup);  this.stores=stores;  this.finalLocalValues=finalLocalValues;}  }
class C{  public String downloadMetadataFromGoogle(){  return null;}  }
class C{  protected void sequence_AnnotatedScriptElement_ExportClause_ExportDeclaration_ExportDeclarationImpl_ExportFromClause(ISerializationContext context,ExportDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void load(Element element,Object o){  if (log.isDebugEnabled()) {    log.debug("set roster location (2): " + element.getAttribute("directory").getValue());  }  if (element.getAttribute("directory") != null) {    Roster.getDefault().setRosterLocation(element.getAttribute("directory").getValue());  }  ConfigureManager cm=InstanceManager.getNullableDefault(jmri.ConfigureManager.class);  if (cm != null) {    cm.registerPref(new RosterConfigPane());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  int parens_index(int i){  return (int)(parens[i]);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  private void reload(){  Document doc=textPane.getDocument();  doc.putProperty(Document.StreamDescriptionProperty,null);  reference=currentReference;  loadPage(currentPage);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        IOException e) {        }        try {          gzis.close();        } catch (        IOException e) {        }        try {          bais.close();        } catch (        IOException e) {        }      }    }  }  return bytes;}  }
class C{  protected void sequence_N4EnumLiteral(ISerializationContext context,N4EnumLiteral semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.697 -0400",hash_original_method="5E16E41D2D30710800B0664BA6AD31F5",hash_generated_method="114EC3F5851B2323B437569B8F4A3B29") @Override public boolean accept(File file){  String name=file.getName();  for (  String suffix : this.suffixes) {    if (caseSensitivity.checkEndsWith(name,suffix)) {      return true;    }  }  return false;}  }
class C{  private void correctTooHigh(int childCount){  int lastPosition=mFirstPosition + childCount - 1;  if (lastPosition == mItemCount - 1 && childCount > 0) {    final int lastBottom=getScrollChildBottom();    final int end=(getBottom() - getTop()) - mListPadding.bottom;    int bottomOffset=end - lastBottom;    final int firstTop=getScrollChildTop();    if (bottomOffset > 0 && (mFirstPosition > 0 || firstTop < mListPadding.top)) {      if (mFirstPosition == 0) {        bottomOffset=Math.min(bottomOffset,mListPadding.top - firstTop);      }      tryOffsetChildrenTopAndBottom(bottomOffset);      if (mFirstPosition > 0) {        int newFirstTop=getScrollChildTop();        fillUp(mFirstPosition - 1,getFillChildTop());        adjustViewsUpOrDown();      }    }  }}  }
class C{  @Override public String[] punctuationWords(){  return punctWords;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.BINDING_PATTERN__PROPERTIES:    return getProperties();case N4JSPackage.BINDING_PATTERN__ELEMENTS:  return getElements();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private List<ReplDBMSEvent> checkBlockCommitSemantics(List<ReplDBMSEvent> events,BlockCommitPolicy policy,boolean singleBlock,TungstenProperties extraProperties) throws Exception {  int queueSize=events.size();  TungstenProperties config=helper.createDoubleQueueRuntime(queueSize,queueSize,60000);  if (policy != null) {    config.setProperty("replicator.stage.stage.blockCommitPolicy",policy.toString());  }  if (extraProperties != null) {    for (    String key : extraProperties.keyNames()) {      config.set(key,extraProperties.getObject(key));    }  }  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  InMemoryQueueStore q1=(InMemoryQueueStore)pipeline.getStore("q1");  for (  ReplDBMSEvent event : events) {    q1.put(event);  }  ReplDBMSEvent lastEvent=events.get(queueSize - 1);  if (lastEvent.getDBMSEvent().getMetadataOption(ReplOptionParams.FORCE_COMMIT) == null)   lastEvent.getDBMSEvent().setMetaDataOption(ReplOptionParams.FORCE_COMMIT,"true");  long lastSeqno=lastEvent.getSeqno();  logger.info("Added events; last seqno=" + lastSeqno);  pipeline.start(new MockEventDispatcher());  Future<ReplDBMSHeader> future=pipeline.watchForCommittedSequenceNumber(lastSeqno,false);  ReplDBMSHeader matchingEvent=future.get(5,TimeUnit.SECONDS);  assertEquals("Applied sequence number matches",lastSeqno,matchingEvent.getSeqno());  Stage stage=pipeline.getStages().get(0);  TaskProgress progress=stage.getProgressTracker().getTaskProgress(0);  long actualBlocks=progress.getBlockCount();  logger.info("Processed events, block count=" + actualBlocks);  if (singleBlock) {    Assert.assertEquals("Expect just one block",1,actualBlocks);  } else {    Assert.assertTrue("Expect blocks to be more than 1: blocks=" + actualBlocks,actualBlocks > 1);  }  InMemoryQueueStore q2=(InMemoryQueueStore)pipeline.getStore("q2");  List<ReplDBMSEvent> outputs=new ArrayList<ReplDBMSEvent>(q2.size());  while (q2.peek() != null) {    outputs.add(q2.get());  }  pipeline.shutdown(false);  pipeline.release(runtime);  return outputs;}  }
class C{  public CUnstarViewAction(final Window parent,final INaviView[] views){  super("Unstar view");  m_parent=parent;  m_views=views.clone();}  }
class C{  @Override protected void initializeCapacities(MkCoPEntry exampleLeaf){  int distanceSize=ByteArrayUtil.SIZE_DOUBLE;  double overhead=12.125;  if (getPageSize() - overhead < 0) {    throw new AbortException("Node size of " + getPageSize() + " Bytes is chosen too small!");  }  dirCapacity=(int)(getPageSize() - overhead) / (4 + 4 + distanceSize+ distanceSize+ 10) + 1;  if (dirCapacity <= 1) {    throw new RuntimeException("Node size of " + getPageSize() + " Bytes is chosen too small!");  }  if (dirCapacity < 10) {    LOG.warning("Page size is choosen too small! Maximum number of entries " + "in a directory node = " + (dirCapacity - 1));  }  leafCapacity=(int)(getPageSize() - overhead) / (4 + distanceSize + 2 * 10) + 1;  if (leafCapacity <= 1) {    throw new RuntimeException("Node size of " + getPageSize() + " Bytes is chosen too small!");  }  if (leafCapacity < 10) {    LOG.warning("Page size is choosen too small! Maximum number of entries " + "in a leaf node = " + (leafCapacity - 1));  }  initialized=true;  if (LOG.isVerbose()) {    LOG.verbose("Directory Capacity: " + (dirCapacity - 1) + "\nLeaf Capacity:    "+ (leafCapacity - 1));  }}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (!(params instanceof KeyParameter)) {    throw new IllegalArgumentException("invalid parameter passed to ISAAC init - " + params.getClass().getName());  }  KeyParameter p=(KeyParameter)params;  setKey(p.getKey());  return;}  }
class C{  public Suggestion(AutoCompleteSupport component,String displayText,String valueText,String valueSuffix,int startPosition,int endPosition){  super();  this.displayText=displayText;  this.valueText=valueText;  this.valueSuffix=valueSuffix;  this.startPosition=startPosition < 0 ? component.getCursorPosition() : startPosition;  this.endPosition=endPosition < 0 ? component.getCursorPosition() : endPosition;  Object value=component.getValue();  if (value != null) {    int l=value.toString().length();    if (startPosition > l) {      this.startPosition=l;    }    if (endPosition > l) {      this.endPosition=l;    }  }}  }
class C{  public boolean isApply(){  Object oo=get_Value(COLUMNNAME_isApply);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean equalsWithTolerance(GVector v,double tolerance){  try {    double diff;    if (length != v.length) {      return false;    }    for (int i=0; i < length; i++) {      diff=values[i] - v.values[i];      if ((diff < 0 ? -diff : diff) > tolerance) {        return false;      }    }    return true;  } catch (  NullPointerException e) {    return false;  }}  }
class C{  protected void sequence_TemplateMiddle(ISerializationContext context,TemplateSegment semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TEMPLATE_SEGMENT__RAW_VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TEMPLATE_SEGMENT__RAW_VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTemplateMiddleAccess().getRawValueTemplateMiddleLiteralParserRuleCall_1_0(),semanticObject.getRawValue());  feeder.finish();}  }
class C{  private Element createIndexedEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation,int index,Boolean isDefault) throws DOMException {  if (name == null) {    throw new IllegalArgumentException("Null name");  }  if (attrBinding == null) {    throw new IllegalArgumentException("Null binding");  }  if (attrLocation == null) {    throw new IllegalArgumentException("Null location");  }  Element indexedEndPt=doc.createElement(name);  indexedEndPt.setAttribute(SAMLNames.BINDING,attrBinding);  indexedEndPt.setAttribute(SAMLNames.LOCATION,attrLocation);  if (attrResponseLocation != null) {    indexedEndPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);  }  indexedEndPt.setAttribute(SAMLNames.INDEX,String.valueOf(index));  if (isDefault != null) {    indexedEndPt.setAttribute(SAMLNames.ISDEFAULT,isDefault.toString());  }  return indexedEndPt;}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  K key=tuple.getKey();  double tval=tuple.getValue().doubleValue();  MutableDouble val=basemap.get(key);  if (!doprocessKey(key)) {    return;  }  if (val == null) {    val=new MutableDouble(tval);    basemap.put(cloneKey(key),val);    return;  }  double change=tval - val.doubleValue();  double percent=(change / val.doubleValue()) * 100;  if (percent < 0.0) {    percent=0.0 - percent;  }  if (percent > percentThreshold) {    KeyValPair<V,Double> dmap=new KeyValPair<V,Double>(cloneValue(tuple.getValue()),percent);    KeyValPair<K,KeyValPair<V,Double>> otuple=new KeyValPair<K,KeyValPair<V,Double>>(cloneKey(key),dmap);    alert.emit(otuple);  }  val.setValue(tval);}  }
class C{  public KafkaConsumer(KafkaStream<byte[],byte[]> stream){  _logger.debug("Creating a new stream");  _stream=stream;}  }
class C{  public Long append(final String key,final String value){  checkIsInMulti();  client.append(key,value);  return client.getIntegerReply();}  }
class C{  public CAttachAction(final JFrame parent,final IFrontEndDebuggerProvider frontEndDebuggerProvider){  m_parent=Preconditions.checkNotNull(parent,"IE00269: Parent argument can not be null");  m_frontEndDebuggerProvider=Preconditions.checkNotNull(frontEndDebuggerProvider,"IE01528: Debugger argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Start Debugger");}  }
class C{  public synchronized void begin(Vector2 currentOffset,Vector2 mousePosition,Component component){  this.active=true;  this.offset=currentOffset;  component.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));  this.beginPosition=mousePosition;}  }
class C{  public static boolean saveBitmapToFile(Bitmap bitmap,String path){  File file=new File(path);  FileOutputStream fOut;  try {    fOut=new FileOutputStream(file);    bitmap.compress(Bitmap.CompressFormat.JPEG,100,fOut);    fOut.flush();    fOut.close();    return true;  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public boolean containsAll(Collection c){  Object[] elements=getArray();  int len=elements.length;  for (Iterator itr=c.iterator(); itr.hasNext(); ) {    Object e=itr.next();    if (indexOf(e,elements,0,len) < 0)     return false;  }  return true;}  }
class C{  @SuppressWarnings({"SuspiciousNameCombination"}) public double logMarginalLikelihoodSmoothed(List<Double> v,double delta,double Pdata){  final double logDelta=StrictMath.log(delta);  final double logInvDelta=StrictMath.log(1.0 - delta);  final int n=v.size();  final double logN=StrictMath.log(n);  final double offset=logInvDelta - Pdata;  double bottom=logN + logDelta - logInvDelta;  double top=bottom + Pdata;  for (int i=0; i < n; i++) {    double weight=-LogTricks.logSum(logDelta,offset + v.get(i));    top=LogTricks.logSum(top,weight + v.get(i));    bottom=LogTricks.logSum(bottom,weight);  }  return top - bottom;}  }
class C{  public JSONObject(Map map){  super(map);}  }
class C{  public int select(int attIdx,int[] indices,int left,int right,int k){  if (left == right) {    return left;  } else {    int middle=partition(attIdx,indices,left,right);    if ((middle - left + 1) >= k) {      return select(attIdx,indices,left,middle,k);    } else {      return select(attIdx,indices,middle + 1,right,k - (middle - left + 1));    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.633 -0500",hash_original_method="719CF91FD15681D04C85978CBE8B39AE",hash_generated_method="3CBB1DE415F0C19FD3572B7CD1FC83A1") public CopyOnWriteArraySet(){  al=new CopyOnWriteArrayList<E>();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== KLVPacket Header ======================");  sb.append("\n");  sb.append(String.format("key = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.key[0],this.key[1],this.key[2],this.key[3],this.key[4],this.key[5],this.key[6],this.key[7],this.key[8],this.key[9],this.key[10],this.key[11],this.key[12],this.key[13],this.key[14],this.key[15]));  sb.append(String.format("length = %d%n",this.length));  return sb.toString();}  }
class C{  public Segment skip(long entries){  assertSegmentOpen();  this.skip+=entries;  return this;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public Key(Resources res,Row parent,int x,int y,XmlResourceParser parser){  this(parent);  this.x=x;  this.y=y;  TypedArray a=res.obtainAttributes(Xml.asAttributeSet(parser),com.android.internal.R.styleable.Keyboard);  width=getDimensionOrFraction(a,com.android.internal.R.styleable.Keyboard_keyWidth,keyboard.mDisplayWidth,parent.defaultWidth);  height=getDimensionOrFraction(a,com.android.internal.R.styleable.Keyboard_keyHeight,keyboard.mDisplayHeight,parent.defaultHeight);  gap=getDimensionOrFraction(a,com.android.internal.R.styleable.Keyboard_horizontalGap,keyboard.mDisplayWidth,parent.defaultHorizontalGap);  a.recycle();  a=res.obtainAttributes(Xml.asAttributeSet(parser),com.android.internal.R.styleable.Keyboard_Key);  this.x+=gap;  TypedValue codesValue=new TypedValue();  a.getValue(com.android.internal.R.styleable.Keyboard_Key_codes,codesValue);  if (codesValue.type == TypedValue.TYPE_INT_DEC || codesValue.type == TypedValue.TYPE_INT_HEX) {    codes=new int[]{codesValue.data};  } else   if (codesValue.type == TypedValue.TYPE_STRING) {    codes=parseCSV(codesValue.string.toString());  }  iconPreview=a.getDrawable(com.android.internal.R.styleable.Keyboard_Key_iconPreview);  if (iconPreview != null) {    iconPreview.setBounds(0,0,iconPreview.getIntrinsicWidth(),iconPreview.getIntrinsicHeight());  }  popupCharacters=a.getText(com.android.internal.R.styleable.Keyboard_Key_popupCharacters);  popupResId=a.getResourceId(com.android.internal.R.styleable.Keyboard_Key_popupKeyboard,0);  repeatable=a.getBoolean(com.android.internal.R.styleable.Keyboard_Key_isRepeatable,false);  modifier=a.getBoolean(com.android.internal.R.styleable.Keyboard_Key_isModifier,false);  sticky=a.getBoolean(com.android.internal.R.styleable.Keyboard_Key_isSticky,false);  edgeFlags=a.getInt(com.android.internal.R.styleable.Keyboard_Key_keyEdgeFlags,0);  edgeFlags|=parent.rowEdgeFlags;  icon=a.getDrawable(com.android.internal.R.styleable.Keyboard_Key_keyIcon);  if (icon != null) {    icon.setBounds(0,0,icon.getIntrinsicWidth(),icon.getIntrinsicHeight());  }  label=a.getText(com.android.internal.R.styleable.Keyboard_Key_keyLabel);  text=a.getText(com.android.internal.R.styleable.Keyboard_Key_keyOutputText);  if (codes == null && !TextUtils.isEmpty(label)) {    codes=new int[]{label.charAt(0)};  }  a.recycle();}  }
class C{  public boolean validate(InputNode node) throws Exception {  Position line=node.getPosition();  String name=node.getName();  if (reader instanceof Repeater) {    Repeater repeat=(Repeater)reader;    return repeat.validate(node);  }  throw new PersistenceException("Element '%s' declared twice at %s",name,line);}  }
class C{  public OptionSet removeIfMatch(byte[] etag){  getIfMatch().remove(etag);  return this;}  }
class C{  public DoubleMatrix jblas_solvePositive(double[][] B){  return org.jblas.Solve.solvePositive(new DoubleMatrix(this.getArray()),new DoubleMatrix(B));}  }
class C{  @Deprecated public static Offset calculateElementClientOffset(Element element){  return calculateElementOffset(element,null,false);}  }
class C{  @Override protected void copyItem(Positionable p){}  }
class C{  public boolean isError(){  return isError;}  }
class C{  public static double convertMinutesToMillis(double minutes){  return (minutes * MINUTE_TO_MILLIS);}  }
class C{  byte[] encryptPayload(String payload,byte[] contentEncryptionKey,byte[] initializationVector) throws EncryptDataException {  try {    SecretKeySpec secretKey=new SecretKeySpec(contentEncryptionKey,AES_ALGORITHM_TYPE);    IvParameterSpec ivParameter=new IvParameterSpec(initializationVector);    Cipher aesCipher=Cipher.getInstance(AES_ALGORITHM_MODE);    aesCipher.init(Cipher.ENCRYPT_MODE,secretKey,ivParameter);    byte[] encryptedData=aesCipher.doFinal(payload.getBytes());    return encryptedData;  } catch (  Exception e) {    throw new EncryptDataException("Error while encrypting data ",e);  }}  }
class C{  @Override public Enumeration<AclEntry> entries(){  return entryList.elements();}  }
class C{  protected void makeBottomPanel(ActionListener doneAction){  _bottom2Panel=makeCreateNewFamilyPanel();  makeItemButtonPanel();  if (doneAction != null) {    addUpdateButtonToBottom(doneAction);  }  initIconFamiliesPanel();  add(_iconFamilyPanel);  JPanel bottomPanel=new JPanel(new FlowLayout());  bottomPanel.add(_bottom1Panel);  bottomPanel.add(_bottom2Panel);  add(bottomPanel);  if (log.isDebugEnabled()) {    log.debug("init done for family " + _family);  }}  }
class C{  default B addEffects(final FireworkEffect... effects){  this.meta().addEffects(effects);  return this.getBuilder();}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  log.info(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("AD_Org_ID"))   m_AD_Org_ID=e.getNewValue();  if (e.getPropertyName().equals("C_BPartner_ID")) {    m_C_BPartner_ID=e.getNewValue();    fBPartner.setValue(m_C_BPartner_ID);  }  executeQuery();}  }
class C{  public static void saveLongToPreference(Context context,String key,long value){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);  if (Long.MIN_VALUE == value) {    pref.edit().remove(key).apply();  } else {    pref.edit().putLong(key,value).apply();  }}  }
class C{  @Command(description="Initialize software token") public void initSoftwareToken() throws Exception {  char[] pin=System.console().readPassword("PIN: ");  char[] pin2=System.console().readPassword("retype PIN: ");  if (!Arrays.equals(pin,pin2)) {    System.out.println("ERROR: PINs do not match");    return;  }  try {    SignerClient.execute(new InitSoftwareToken(pin));    AuditLogger.log(INITIALIZE_THE_SOFTWARE_TOKEN_EVENT,XROAD_USER,null);  } catch (  Exception e) {    AuditLogger.log(INITIALIZE_THE_SOFTWARE_TOKEN_EVENT,XROAD_USER,e.getMessage(),null);    throw e;  }}  }
class C{  public TemplateSegment createTemplateSegment(){  TemplateSegmentImpl templateSegment=new TemplateSegmentImpl();  return templateSegment;}  }
class C{  private void connect(){  c.changeConnectionStatus(Connection.ConnectionStatus.CONNECTED);  c.addAction("Client Connected");}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TEXPORTABLE_ELEMENT___IS_EXPORTED:    return isExported();}return super.eInvoke(operationID,arguments);}  }
class C{  private void analyzeDependingTypes(Type type,ClassLoader classLoader){  Collection<Type> dependingTypes=type.getDependingTypes();  if (CollectionUtils.isNotEmpty(dependingTypes)) {    for (    Type dependingType : dependingTypes) {      if (!classHashHelper.isAnalyzed(dependingType.getFQN())) {        analyzeAndInstrumentInternal(null,dependingType.getFQN(),classLoader,false);      }    }  }}  }
class C{  public static void main(String[] args){  Header.printHeader(LongLinkSplitter.class.toString(),args);  Header.printFooter();}  }
class C{  public Optional<T> executeIfAbsent(Runnable action){  if (value == null)   action.run();  return this;}  }
class C{  public PubChemVocabulary(){  super();}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing) {    if (pathSegs != null) {      pathSegs.invalidate();    }    if (normalizedPathSegs != null) {      normalizedPathSegs.invalidate();    }  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public static void addPropertiesForDataMining(WarningPropertySet<WarningProperty> propertySet,ClassContext classContext,Method method,Location location){  addReceiverObjectType(propertySet,classContext,method,location);  addRecentlyCalledMethods(propertySet,classContext,method,location);}  }
class C{  public static final int previousMonthLength(int year,int month){  return (month > 0) ? monthLength(year,month - 1) : 31;}  }
class C{  public void testUserConfiguresXADataSourceAndRequestsDataSourceWithXaTransactionSupport() throws MalformedURLException {  DataSourceFixture fixture=ConfigurationFixtureFactory.createXADataSourceConfiguredDataSource();  testServletThatIssuesGetConnectionFrom(fixture,"datasource-cmt-local");}  }
class C{  public static String encodePathQuery(final String unescaped) throws URIException {  return encodePathQuery(unescaped,URI.getDefaultProtocolCharset());}  }
class C{  public void onDone(@Nullable R res){  onDone(res,null);}  }
class C{  public static Object invoke(Object o,String methodName,Class<?>[] paramClasses,Object[] paramValues){  Method m;  Object result;  result=null;  try {    m=o.getClass().getMethod(methodName,paramClasses);    result=m.invoke(o,paramValues);  } catch (  Exception e) {    e.printStackTrace();    result=null;  }  return result;}  }
class C{  public AuthenticationSuccessEvent(UserContext context,Credentials credentials){  this.context=context;  this.credentials=credentials;}  }
class C{  protected boolean endsWithCloseBracket(Word w){  return w.form.endsWith(")") || w.form.endsWith("}") || w.form.endsWith("]")|| w.form.endsWith("-RBR-");}  }
class C{  public void processList(List<E> list,int fromIndex,int toIndex){  int size=list.size();  if ((fromIndex < 0) || (fromIndex >= size)) {    throw new IllegalArgumentException("Starting index " + fromIndex + " is not valid for given list of size "+ size);  }  if ((toIndex < fromIndex) || (toIndex > size)) {    throw new IllegalArgumentException("Ending index " + toIndex + " is not valid for given list of size "+ size+ " and starting index "+ fromIndex);  }  for (int i=fromIndex; i < toIndex; i++) {    E element=list.get(i);    processElement(element);  }}  }
class C{  public boolean hasError(){  return fSeverity == FATAL || fSeverity == ERROR;}  }
class C{  public static BitVector createBitVector(byte[] data){  BitVector bv=new BitVector(data.length * 8);  bv.setBytes(data);  return bv;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:37.756 -0400",hash_original_method="4092EC8E340C70347418ABF573D4B0FE",hash_generated_method="1BDE95FC60192E649C7C7C15075C5612") public ListMenuPresenter(Context context,int itemLayoutRes){  this(itemLayoutRes,0);  mContext=context;  mInflater=LayoutInflater.from(mContext);}  }
class C{  MathEnumerationAdapter(Collection<T> col){  iter=col.iterator();}  }
class C{  AddressMessage(NetworkParameters params,byte[] payload,int offset,boolean parseLazy,boolean parseRetain,int length) throws ProtocolException {  super(params,payload,offset,parseLazy,parseRetain,length);}  }
class C{  private boolean contains(String cadena,ArrayList listaCadenas){  if (StringUtils.isBlank(cadena) || CollectionUtils.isEmpty(listaCadenas)) {    return false;  }  Iterator it=listaCadenas.iterator();  while (it.hasNext()) {    String valor=(String)it.next();    if (cadena.equals(valor)) {      return true;    }  }  return false;}  }
class C{  public ParameterizedType newParameterizedType(Type type){  ParameterizedType result=new ParameterizedType(this);  result.setType(type);  return result;}  }
class C{  public static boolean supportsTrash(){  return isWindows() || isMacOSX();}  }
class C{  public TransferEntropyCalculatorKraskov() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(COND_MI_CALCULATOR_KRASKOV1);  kraskovAlgorithmNumber=1;  props=new Hashtable<String,String>();}  }
class C{  public long toLong(int radix){  return TypeFormat.parseLong(this,radix);}  }
class C{  public void updateTextures(float partialTicks){  World world=Minecraft.getMinecraft().theWorld;  if (world != null && !Minecraft.getMinecraft().isGamePaused()) {    this.updateRepellerShieldTexture(partialTicks);    this.updateGasParticlesTexture(world,partialTicks);    this.updateStarfieldTexture(partialTicks);  }}  }
class C{  public static byte[] decryptRaw(byte[] baseKey,int usage,byte[] ivec,byte[] ciphertext,int start,int len) throws GeneralSecurityException {  return CRYPTO.decryptRaw(baseKey,usage,ivec,ciphertext,start,len);}  }
class C{  public Crypt(){  super();}  }
class C{  public static boolean ignoringBatteryOptimizations(Context context){  if (NgnApplication.getSDKVersion() < 23) {    return true;  }  final Context context_=context != null ? context : NgnApplication.getContext();  Intent intent=new Intent();  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  String ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS_=null;  try {    ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS_=(String)android.provider.Settings.class.getField("ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS").get(null);  } catch (  IllegalAccessException e) {    Log.e(TAG,e.toString());    return false;  }catch (  NoSuchFieldException e) {    Log.e(TAG,e.toString());    return false;  }  if (NgnApplication.isIgnoringBatteryOptimizations()) {    intent.setAction(ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS_);  } else {    final String UriString="package:" + context_.getPackageName();    final Uri uriObj=Uri.parse(UriString);    intent.setAction(ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS_);    intent.setData(uriObj);  }  context_.startActivity(intent);  return true;}  }
class C{  public void deleteInvalidFlows(IOFSwitch sw,Map<OFPort,List<Match>> invalidOutportAndMatch){  log.debug("Deleting invalid flows on switch : " + sw.getId());  Map<OFPort,List<Match>> invalidNeighborIngressAndMatches=new HashMap<OFPort,List<Match>>();  for (  OFPort outPort : invalidOutportAndMatch.keySet()) {    List<OFFlowStatsReply> flows=getFlows(sw,outPort);    for (    OFFlowStatsReply flow : flows) {      for (      OFFlowStatsEntry entry : flow.getEntries()) {        for (        Match match : invalidOutportAndMatch.get(outPort)) {          if (entry.getMatch().get(MatchField.ETH_DST).equals(match.get(MatchField.ETH_DST)) && entry.getMatch().get(MatchField.ETH_SRC).equals(match.get(MatchField.ETH_SRC)) && entry.getMatch().get(MatchField.ETH_TYPE).equals(match.get(MatchField.ETH_TYPE))&& entry.getMatch().get(MatchField.VLAN_VID).equals(match.get(MatchField.VLAN_VID))&& entry.getMatch().get(MatchField.IPV4_DST).equals(match.get(MatchField.IPV4_DST))&& entry.getMatch().get(MatchField.IP_PROTO).equals(match.get(MatchField.IP_PROTO))&& entry.getMatch().get(MatchField.IPV4_SRC).equals(match.get(MatchField.IPV4_SRC))&& entry.getMatch().get(MatchField.IP_DSCP).equals(match.get(MatchField.IP_DSCP))&& entry.getMatch().get(MatchField.IP_ECN).equals(match.get(MatchField.IP_ECN))) {            if (invalidNeighborIngressAndMatches.containsKey(match.get(MatchField.IN_PORT)))             invalidNeighborIngressAndMatches.get(match.get(MatchField.IN_PORT)).add(match); else {              List<Match> matches=new ArrayList<Match>();              matches.add(match);              invalidNeighborIngressAndMatches.put(match.get(MatchField.IN_PORT),matches);            }            clearFlowMods(sw,entry.getMatch(),outPort);          }        }      }    }    Map<IOFSwitch,Map<OFPort,List<Match>>> neighborSwitches=new HashMap<IOFSwitch,Map<OFPort,List<Match>>>();    for (    Link link : links.keySet()) {      if (link.getDst().equals(sw.getId())) {        for (        Entry<OFPort,List<Match>> ingressPort : invalidNeighborIngressAndMatches.entrySet()) {          if (link.getDstPort().equals(ingressPort.getKey())) {            Map<OFPort,List<Match>> invalidNeighborOutportAndMatch=new HashMap<OFPort,List<Match>>();            invalidNeighborOutportAndMatch.put(link.getSrcPort(),ingressPort.getValue());            neighborSwitches.put(switchService.getSwitch(link.getSrc()),invalidNeighborOutportAndMatch);          }        }      }    }    log.debug("We have " + neighborSwitches.size() + " neighbors to deal with!");    for (    IOFSwitch neighborSwitch : neighborSwitches.keySet()) {      log.debug("NeighborSwitch ID : " + neighborSwitch.getId());      deleteInvalidFlows(neighborSwitch,neighborSwitches.get(neighborSwitch));    }  }}  }
class C{  public void arcTo(float cX,float cY,float endX,float endY,boolean clockwise){  if (pointSize < 2) {    throw new RuntimeException("Cannot add arc to path if it doesn't already have a starting point.");  }  float startX=points[pointSize - 2];  float startY=points[pointSize - 1];  float dx=endX - cX;  float dy=endY - cY;  double r2=Math.sqrt(dx * dx + dy * dy);  double dx1=startX - cX;  double dy1=startY - cY;  double r1=Math.sqrt(dx1 * dx1 + dy1 * dy1);  if (Math.abs(r1 - r2) > 1) {    Log.e(new RuntimeException("arcTo() called with start and end points that don't lie on the same arc r1=" + r1 + ", r2="+ r2));  }  Ellipse e=new Ellipse();  Ellipse.initWithBounds(e,cX - r2,cY - r2,r2 * 2,r2 * 2);  double startAngle=e.getAngleAtPoint(startX,startY);  double endAngle=e.getAngleAtPoint(endX,endY);  double sweepAngle=endAngle - startAngle;  if (clockwise && sweepAngle > 0) {    sweepAngle=-sweepAngle;  } else   if (!clockwise && sweepAngle > 0) {    sweepAngle=2 * Math.PI - sweepAngle;  }  arc(cX - r2,cY - r2,r2 * 2,r2 * 2,-startAngle,sweepAngle,true);  lineTo(endX,endY);}  }
class C{  public static final int[] invert(int indices[],int L){  int sindices[]=Arrays.copyOf(indices,indices.length);  Arrays.sort(sindices);  int inverted[]=new int[L - sindices.length];  for (int j=0, i=0; j < L; j++) {    if (Arrays.binarySearch(sindices,j) < 0) {      inverted[i++]=j;    }  }  return inverted;}  }
class C{  public String firstValue(String cssClass){  Elements elements=element.getElementsByClass(cssClass);  return elements.isEmpty() ? null : value(elements.first());}  }
class C{  public boolean prepareElectronBeam(int mode){  if (!mElectronBeam.prepare(mode)) {    mElectronBeamPrepared=false;    mElectronBeamReady=true;    return false;  }  mElectronBeamPrepared=true;  mElectronBeamReady=false;  scheduleElectronBeamDraw();  return true;}  }
class C{  private void prepareForRepaint(){  textPanel.replaceTextRange(movesTextStart,textPanel.getCharCount() - movesTextStart,"");  moveNodes.clear();  moveNodesLengths.clear();}  }
class C{  public boolean isSourceMacAddress(){  return sourceMacAddress;}  }
class C{  protected void handleText(char text[]){}  }
class C{  public <T extends DataObject>T findById(String id){  if (id == null) {    throw new DataAccessException("ID provided was null");  }  return findById(URI.create(id));}  }
class C{  private static void reflectionAppend(Object object,Class clazz,HashCodeBuilder builder,boolean useTransients,String[] excludeFields){  if (isRegistered(object)) {    return;  }  try {    register(object);    Field[] fields=clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,true);    for (int i=0; i < fields.length; i++) {      Field field=fields[i];      if (!ArrayUtils.contains(excludeFields,field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers()))&& (!Modifier.isStatic(field.getModifiers()))) {        try {          Object fieldValue=field.get(object);          builder.append(fieldValue);        } catch (        IllegalAccessException e) {          throw new InternalError("Unexpected IllegalAccessException");        }      }    }  }  finally {    unregister(object);  }}  }
class C{  public static void main(String[] args){  int V=StdIn.readInt();  String[] name=new String[V];  EdgeWeightedDigraph G=new EdgeWeightedDigraph(V);  for (int v=0; v < V; v++) {    name[v]=StdIn.readString();    for (int w=0; w < V; w++) {      double rate=StdIn.readDouble();      DirectedEdge e=new DirectedEdge(v,w,-Math.log(rate));      G.addEdge(e);    }  }  BellmanFordSP spt=new BellmanFordSP(G,0);  if (spt.hasNegativeCycle()) {    double stake=1000.0;    for (    DirectedEdge e : spt.negativeCycle()) {      StdOut.printf("%10.5f %s ",stake,name[e.from()]);      stake*=Math.exp(-e.weight());      StdOut.printf("= %10.5f %s\n",stake,name[e.to()]);    }  } else {    StdOut.println("No arbitrage opportunity");  }}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public AbstractScriptEngine(Bindings n){  this();  if (n == null) {    throw new NullPointerException("n is null");  }  context.setBindings(n,ScriptContext.ENGINE_SCOPE);}  }
class C{  protected void finalize() throws Throwable {  try {    if (this.key != null) {      java.util.Arrays.fill(this.key,(byte)0x00);      this.key=null;    }  }  finally {    super.finalize();  }}  }
class C{  public static <T>BiMap<T,Integer> create(Collection<T> collection,int start){  BiMap<T,Integer> map=HashBiMap.<T,Integer>create();  int i=start;  for (  T t : collection) {    map.put(t,i++);  }  return map;}  }
class C{  public UUID failedNodeId(){  return failedNodeId;}  }
class C{  public void sign(KeyPair keypair) throws IOException {  if (namelist.isEmpty()) {    throw new IllegalStateException("No domain was set");  }  if (keypair == null) {    throw new IllegalArgumentException("keypair must not be null");  }  try {    GeneralName[] gns=new GeneralName[namelist.size()];    for (int ix=0; ix < namelist.size(); ix++) {      gns[ix]=new GeneralName(GeneralName.dNSName,namelist.get(ix));    }    GeneralNames subjectAltName=new GeneralNames(gns);    PKCS10CertificationRequestBuilder p10Builder=new JcaPKCS10CertificationRequestBuilder(namebuilder.build(),keypair.getPublic());    ExtensionsGenerator extensionsGenerator=new ExtensionsGenerator();    extensionsGenerator.addExtension(Extension.subjectAlternativeName,false,subjectAltName);    p10Builder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest,extensionsGenerator.generate());    PrivateKey pk=keypair.getPrivate();    JcaContentSignerBuilder csBuilder=new JcaContentSignerBuilder(pk instanceof ECKey ? EC_SIGNATURE_ALG : SIGNATURE_ALG);    ContentSigner signer=csBuilder.build(pk);    csr=p10Builder.build(signer);  } catch (  OperatorCreationException ex) {    throw new IOException("Could not generate CSR",ex);  }}  }
class C{  public void testMethodException() throws Exception {  HostAddressService has=new HostAddressService(false);  has.setTimeout(1000);  HostAddress address=HostAddressService.getByName(InetAddress.getLocalHost().getHostName());  has.addMethod("sample",SamplePingMethod.class.getName(),true);  has.addMethod(HostAddressService.DEFAULT,InetAddressPing.class.getName(),true);  SamplePingMethod.exception=false;  PingResponse response=has.isReachableByMethod("sample",address);  assertTrue("Success invocation",response.isReachable());  assertNull("Expect null exception on success",response.getNotifications().get(0).getException());  SamplePingMethod.exception=true;  PingResponse response2=has.isReachableByMethod("sample",address);  assertFalse("Exception on invocation",response2.isReachable());  assertNotNull("Expect exception on failures",response2.getNotifications().get(0).getException());  SamplePingMethod.exception=true;  PingResponse response3=has.isReachable(address);  assertTrue("Exception on invocation",response3.isReachable());  assertNotNull("Expect exception on first method notification",response3.getNotifications().get(0).getException());}  }
class C{  public static Map<URI,URI> createVolumeToOldVpoolMap(List<VolumeDescriptor> descriptors){  Map<URI,URI> volumesToOldVpoolMap=new HashMap<URI,URI>();  if (descriptors != null) {    for (    VolumeDescriptor volumeDescriptor : descriptors) {      if (volumeDescriptor.getParameters() != null) {        if (volumeDescriptor.getParameters().get(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID) != null) {          URI volumeURI=(URI)volumeDescriptor.getParameters().get(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID);          URI oldVpoolURI=(URI)volumeDescriptor.getParameters().get(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID);          volumesToOldVpoolMap.put(volumeURI,oldVpoolURI);        }      }    }  }  return volumesToOldVpoolMap;}  }
class C{  public static boolean slotOcclusionTest(PartSlot slot,Predicate<IMultipart> ignored,IMultipartContainer container){  return slotOcclusionTest(slot,ignored,container.getParts());}  }
class C{  public static ValueDate convertDate(Date x,Calendar calendar){  if (calendar == null) {    throw DbException.getInvalidValueException("calendar",null);  }  Calendar cal=(Calendar)calendar.clone();  cal.setTimeInMillis(x.getTime());  long dateValue=dateValueFromCalendar(cal);  return ValueDate.fromDateValue(dateValue);}  }
class C{  @Override public void newRound(int roundNumber){  super.newRound(roundNumber);  for (  Mounted m : getMisc()) {    EquipmentType equip=m.getType();    if (BattleArmor.MINE_LAUNCHER.equals(equip.getInternalName())) {      m.setMode("Single");    }  }}  }
class C{  public EmptyStruct(EmptyStruct other){}  }
class C{  public IteratorSpliterator(Iterator<? extends T> iterator,int characteristics){  this.collection=null;  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public int validateConnectivity(LayoutEditor panel){  if (panel == null) {    log.error("validateConnectivity called with a null LayoutEditor panel");    return -1;  }  int numErrors=0;  for (int i=0; i < mTransitSectionList.size(); i++) {    String s=mTransitSectionList.get(i).getSection().validate(panel);    if (!s.equals("")) {      log.error(s);      numErrors++;    }  }  return numErrors;}  }
class C{  protected void discoverInitiator(Host host,Initiator initiator,HostInternetScsiHba hba){  setInitiatorHost(initiator,host);  initiator.setProtocol(Protocol.iSCSI.name());  initiator.setInitiatorNode("");  initiator.setInitiatorPort(hba.getIScsiName());  initiator.setIsManualCreation(false);  initiator.setLabel(hba.getIScsiName());  save(initiator);}  }
class C{  private boolean hasDependencyTo(IResourceDescription candidate,IResourceDescription.Delta delta){  return hasDependencyTo(candidate.getURI(),delta.getUri());}  }
class C{  public void updateRectangle(float lt1,float ln1,int x1,int y1,int x2,int y2,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRectangle.write(lt1,ln1,x1,y1,x2,y2,properties,link.dos);}  }
class C{  private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){  boolean update=false;  int nodeNum=node.getNumber();  NodeRef parent=tree.getParent(node);  if (operatorNumber != null) {    operatorNumber[0]=-1;  }  if (parent != null && updateNode[nodeNum]) {    final double branchRate=branchRateModel.getBranchRate(tree,node);    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));    if (branchTime < 0.0) {      throw new RuntimeException("Negative branch length: " + branchTime);    }    if (flip) {      matrixBufferHelper.flipOffset(nodeNum);    }    final int eigenIndex=0;    final int updateCount=branchUpdateCount[eigenIndex];    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);    branchLengths[eigenIndex][updateCount]=branchTime;    branchUpdateCount[eigenIndex]++;    update=true;  }  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    final int[] op1={-1};    final boolean update1=traverse(tree,child1,op1,flip);    NodeRef child2=tree.getChild(node,1);    final int[] op2={-1};    final boolean update2=traverse(tree,child2,op2,flip);    if (update1 || update2) {      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;      if (flip) {        partialBufferHelper.flipOffset(nodeNum);      }      final int[] operations=this.operations[operationListCount];      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);      if (useScaleFactors) {        int n=nodeNum - tipCount;        if (recomputeScaleFactors) {          scaleBufferHelper.flipOffset(n);          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);          operations[x + 1]=scaleBufferIndices[n];          operations[x + 2]=Beagle.NONE;        } else {          operations[x + 1]=Beagle.NONE;          operations[x + 2]=scaleBufferIndices[n];        }      } else {        if (useAutoScaling) {          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);        }        operations[x + 1]=Beagle.NONE;        operations[x + 2]=Beagle.NONE;      }      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());      operationCount[operationListCount]++;      update=true;    }  }  return update;}  }
class C{  public static void main(String[] args) throws Exception {  new Evaluator().start(args);}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  super.encode(out,PKIXExtensions.DeltaCRLIndicator_Id,true);}  }
class C{  public void testSetF1Momentary(){  boolean f1Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF1Momentary(f1Momentary);}  }
class C{  public boolean isAdvancedCheckoutOverride(){  return advancedCheckoutOverride;}  }
class C{  public void loadLogicalCategories(){  logicalOFMessageCategories=ImmutableSet.copyOf(logicalOFMessageCategories);  numRequiredConnections=calcNumRequiredConnections();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 15:08:59.224 -0400",hash_original_method="D1D6E23E6FCCB7AA9014CE6645AEC3D5",hash_generated_method="B841C2E95C7A796ECCC7650BF6D7087D") @Override public void pausePlaying(){  if (mController != null) {    mController.pausePlaying();  }  mCallbacks.onPause();  pushControllerState();  reportPlayingChanged();}  }
class C{  public static Collection<Calscale> all(){  return enums.all();}  }
class C{  public InvitationProjectsObject(int id){  this.id=id;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("SalesMgmtValidator");  return sb.toString();}  }
class C{  public boolean hasNonProperIntersection(){  return hasNonProperIntersection;}  }
class C{  public void populateDb(){  String[] vmaxFE={"50:FE:FE:FE:FE:FE:FE:00","50:FE:FE:FE:FE:FE:FE:01","50:FE:FE:FE:FE:FE:FE:02","50:FE:FE:FE:FE:FE:FE:03"};  Network network=ExportUtilsTestUtils.createNetwork(_dbClient,vmaxFE,"VSANFE","FC+BROCADE+FE",null);  VirtualArray varray=ExportUtilsTestUtils.createVirtualArray(_dbClient,"varray1");  StorageSystem storageSystem=ExportUtilsTestUtils.createStorageSystem(_dbClient,"vmax","vmax1");  List<StoragePort> vmaxPorts=new ArrayList<StoragePort>();  for (int i=0; i < vmaxFE.length; i++) {    vmaxPorts.add(ExportUtilsTestUtils.createStoragePort(_dbClient,storageSystem,network,vmaxFE[i],varray,StoragePort.PortType.frontend.name(),"portGroupvmax" + i,"C0+FC0" + i));  }  List<Initiator> initiators=new ArrayList<Initiator>();  for (int i=0; i < NUM_INITIATORS; i++) {    initiators.add(ExportUtilsTestUtils.createInitiator(_dbClient,network,i));  }  List<Volume> volumes=new ArrayList<Volume>();  for (int i=0; i < NUM_VOLUMES; i++) {    Volume volume=ExportUtilsTestUtils.createVolume(_dbClient,varray,i);    volumes.add(volume);    _volumeIds.add(volume.getId());  }  List<ExportGroup> egs=new ArrayList<ExportGroup>();  for (int i=0; i < NUM_EXPORT_GROUPS; i++) {    egs.add(ExportUtilsTestUtils.createExportGroup(_dbClient,initiators,volumes,varray,i));  }  List<ExportMask> ems=new ArrayList<ExportMask>();  for (int i=0; i < NUM_EXPORT_MASKS; i++) {    ems.add(ExportUtilsTestUtils.createExportMask(_dbClient,egs,initiators,volumes,vmaxPorts,i));  }}  }
class C{  @Override public Object instantiateItem(ViewGroup container,int position){  LinearLayout layout=(LinearLayout)View.inflate(mContext,R.layout.swipeselector_content_item,null);  TextView title=(TextView)layout.findViewById(R.id.swipeselector_content_title);  TextView description=(TextView)layout.findViewById(R.id.swipeselector_content_description);  SwipeItem slideItem=mItems.get(position);  title.setText(slideItem.title);  if (slideItem.description == null) {    description.setVisibility(View.GONE);  } else {    description.setVisibility(View.VISIBLE);    description.setText(slideItem.description);  }  if (mCustomTypeFace != null) {    title.setTypeface(mCustomTypeFace);    description.setTypeface(mCustomTypeFace);  }  if (mTitleTextAppearance != -1) {    setTextAppearanceCompat(title,mTitleTextAppearance);  }  if (mDescriptionTextAppearance != -1) {    setTextAppearanceCompat(description,mDescriptionTextAppearance);  }  if (mDescriptionGravity != -1) {    description.setGravity(mDescriptionGravity);  }  layout.setPadding(mContentLeftPadding,mSweetSixteen,mContentRightPadding,mSweetSixteen);  container.addView(layout);  return layout;}  }
class C{  public void testBug4138() throws Exception {  try {    String[] typesToTest=new String[]{"TINYINT","SMALLINT","MEDIUMINT","INT","BIGINT","FLOAT","DOUBLE","DECIMAL"};    short[] jdbcMapping=new short[]{Types.TINYINT,Types.SMALLINT,Types.INTEGER,Types.INTEGER,Types.BIGINT,Types.REAL,Types.DOUBLE,Types.DECIMAL};    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4138");    StringBuilder createBuf=new StringBuilder();    createBuf.append("CREATE TABLE testBug4138 (");    boolean firstColumn=true;    for (int i=0; i < typesToTest.length; i++) {      if (!firstColumn) {        createBuf.append(", ");      } else {        firstColumn=false;      }      createBuf.append("field");      createBuf.append((i + 1));      createBuf.append(" ");      createBuf.append(typesToTest[i]);      createBuf.append(" UNSIGNED");    }    createBuf.append(")");    this.stmt.executeUpdate(createBuf.toString());    DatabaseMetaData dbmd=this.conn.getMetaData();    this.rs=dbmd.getColumns(this.conn.getCatalog(),null,"testBug4138","field%");    assertTrue(this.rs.next());    for (int i=0; i < typesToTest.length; i++) {      assertTrue("JDBC Data Type of " + this.rs.getShort("DATA_TYPE") + " for MySQL type '"+ this.rs.getString("TYPE_NAME")+ "' from 'DATA_TYPE' column does not match expected value of "+ jdbcMapping[i]+ ".",jdbcMapping[i] == this.rs.getShort("DATA_TYPE"));      this.rs.next();    }    this.rs.close();    StringBuilder queryBuf=new StringBuilder("SELECT ");    firstColumn=true;    for (int i=0; i < typesToTest.length; i++) {      if (!firstColumn) {        queryBuf.append(", ");      } else {        firstColumn=false;      }      queryBuf.append("field");      queryBuf.append((i + 1));    }    queryBuf.append(" FROM testBug4138");    this.rs=this.stmt.executeQuery(queryBuf.toString());    ResultSetMetaData rsmd=this.rs.getMetaData();    for (int i=0; i < typesToTest.length; i++) {      assertTrue(jdbcMapping[i] == rsmd.getColumnType(i + 1));      String desiredTypeName=typesToTest[i] + " unsigned";      assertTrue(rsmd.getColumnTypeName((i + 1)) + " != " + desiredTypeName,desiredTypeName.equalsIgnoreCase(rsmd.getColumnTypeName(i + 1)));    }  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4138");  }}  }
class C{  public ResultSetImpl(String catalog,Field[] fields,RowData tuples,MySQLConnection conn,StatementImpl creatorStmt) throws SQLException {  this.connection=conn;  this.retainOwningStatement=false;  if (this.connection != null) {    this.exceptionInterceptor=this.connection.getExceptionInterceptor();    this.useStrictFloatingPoint=this.connection.getStrictFloatingPoint();    this.connectionId=this.connection.getId();    this.useFastDateParsing=this.connection.getUseFastDateParsing();    this.profileSql=this.connection.getProfileSql();    this.retainOwningStatement=this.connection.getRetainStatementAfterResultSetClose();    this.jdbcCompliantTruncationForReads=this.connection.getJdbcCompliantTruncationForReads();    this.useFastIntParsing=this.connection.getUseFastIntParsing();    this.serverTimeZoneTz=this.connection.getServerTimezoneTZ();    this.padCharsWithSpace=this.connection.getPadCharsWithSpace();  }  this.owningStatement=creatorStmt;  this.catalog=catalog;  this.fields=fields;  this.rowData=tuples;  this.updateCount=this.rowData.size();  if (NonRegisteringDriver.DEBUG) {    System.out.println(Messages.getString("ResultSet.Retrieved__1") + this.updateCount + " rows");  }  this.reallyResult=true;  if (this.rowData.size() > 0) {    if (this.updateCount == 1) {      if (this.thisRow == null) {        this.rowData.close();        this.updateCount=-1;      }    }  } else {    this.thisRow=null;  }  this.rowData.setOwner(this);  if (this.fields != null) {    initializeWithMetadata();  }  this.useLegacyDatetimeCode=this.connection.getUseLegacyDatetimeCode();  this.useColumnNamesInFindColumn=this.connection.getUseColumnNamesInFindColumn();  setRowPositionValidity();}  }
class C{  public int nextInt(){  return org.evosuite.runtime.Random.nextInt();}  }
class C{  public void testGetEmptyParameters(){  String propertyString="";  String driverPropertyString=ResourcePropertySet.PARAMETERS + "=" + propertyString;  Resource ds=resourceConverter.fromPropertyString(driverPropertyString);  assertEquals(0,ds.getParameters().size());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:58.384 -0500",hash_original_method="93A8BD8C1053222363E314544DFAB05A",hash_generated_method="85266787FA8D5402139CE7ABC9162878") public void play(String url,int position,int videoLayerID){  if (url == null) {    return;  }  if (position > 0) {    seek(position);  }  Message message=obtainMessage(PLAY);  message.arg1=videoLayerID;  message.obj=url;  sendMessage(message);}  }
class C{  private static Object decode(Class<?> type,String value) throws Exception {  if (type.getName().equals("java.lang.String")) {    return value;  }  if (type.getName().equals("boolean")) {    return Boolean.valueOf(value);  }  if (type.getName().equals("int")) {    return Integer.valueOf(value);  }  if (type.getName().equals("long")) {    return Long.valueOf(value);  }  if (type.getName().equals("float")) {    return Float.valueOf(value);  }  if (type.getName().equals("double")) {    return Double.valueOf(value);  }  if (type.getName().equals("java.lang.Class")) {    return Class.forName(value);  }  return null;}  }
class C{  public MatsimWorldReader(final MutableScenario scenario,final World world){  this.scenario=scenario;  this.world=world;}  }
class C{  public static DoubleBuffer createDoubleBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 8);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asDoubleBuffer();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.015 -0400",hash_original_method="74F780859B824BF53F43ED9E5061E287",hash_generated_method="9BBCFFE6C41618BBFEEABC576C7B03AC") public final void fatal(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {    log(SimpleLog.LOG_LEVEL_FATAL,message,t);  }}  }
class C{  @Override public Eval<Boolean> anyMatch(final Predicate<? super T> predicate){  return Eval.later(null);}  }
class C{  public boolean checkPermission(Permission permission){  return permissionSet.contains(permission);}  }
class C{  public static synchronized KDTree generate(IPoint[] points){  if (points.length == 0) {    return null;  }  IMultiPoint others[]=new IMultiPoint[points.length];  for (int i=0; i < points.length; i++) {    if (points[i] instanceof IMultiPoint) {      others[i]=(IMultiPoint)points[i];    } else {      others[i]=new TwoDPoint(points[i].getX(),points[i].getY());    }  }  return generate(others);}  }
class C{  public void testUserLoadFails_showsSyncFailedDialog(){  mController.init();  mFakeEventBus.post(new KnownUsersLoadFailedEvent(KnownUsersLoadFailedEvent.REASON_UNKNOWN));  verify(mMockUi).showSyncFailedDialog(true);}  }
class C{  @Override public void updateClob(int columnIndex,Clob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + columnIndex + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createClob(x.getCharacterStream(),-1);    }    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static boolean couldCallBasedOnTypes(InvokeExpr invoke,SootMethod target){  if (invoke instanceof StaticInvokeExpr) {    SootMethodRef invokedMethod=invoke.getMethodRef();    SootClass invokeClass=invokedMethod.declaringClass();    if (!RefType.v(target.getDeclaringClass()).equals(RefType.v(invokeClass)))     return false;    if (!target.getName().equals(invokedMethod.name()) || target.getParameterCount() != invokedMethod.parameterTypes().size())     return false;    if (!(target.getReturnType().equals(invokedMethod.returnType())))     return false;    for (int i=0; i < target.getParameterCount(); i++)     if (!target.getParameterType(i).equals(invokedMethod.parameterType(i)))     return false;    return true;  } else   if (invoke instanceof InstanceInvokeExpr) {    InstanceInvokeExpr iie=(InstanceInvokeExpr)invoke;    SootMethodRef invokedMethod=iie.getMethodRef();    SootClass invokeClass=invokedMethod.declaringClass();    if (!isSubTypeOfIncluding(RefType.v(target.getDeclaringClass()),RefType.v(invokeClass)))     return false;    if (!target.getName().equals(invokedMethod.name()) || target.getParameterCount() != invokedMethod.parameterTypes().size())     return false;    if (!isSubTypeOfIncluding(target.getReturnType(),invokedMethod.returnType()))     return false;    for (int i=0; i < target.getParameterCount(); i++)     if (!isSubTypeOfIncluding(target.getParameterType(i),invokedMethod.parameterType(i)))     return false;    return true;  } else {    logger.error("Unknown invoke type: {}",invoke);    droidsafe.main.Main.exit(1);  }  return false;}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  private boolean isVisible(AnnotatedField f){  for (  Annotation annotation : f.getAnnotated().getDeclaredAnnotations()) {    if (isHandled(annotation)) {      return true;    }  }  XmlAccessType accessType=XmlAccessType.PUBLIC_MEMBER;  XmlAccessorType at=findAnnotation(XmlAccessorType.class,f,true,true,true);  if (at != null) {    accessType=at.value();  }  if (accessType == XmlAccessType.FIELD) {    return true;  }  if (accessType == XmlAccessType.PUBLIC_MEMBER) {    return Modifier.isPublic(f.getAnnotated().getModifiers());  }  return false;}  }
class C{  public DeleteAtTimeDetails clone(){  DeleteAtTimeDetails result=new DeleteAtTimeDetails();  result.NodeId=NodeId;  result.ReqTimes=ReqTimes == null ? null : ReqTimes.clone();  return result;}  }
class C{  public void testJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public boolean hasData(){  return hasExtension(Data.class);}  }
class C{  public void generateOptimizedLogicalOr(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  Constant condConst;  if ((this.left.implicitConversion & TypeIds.COMPILE_TYPE_MASK) == TypeIds.T_boolean) {    if ((condConst=this.left.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);        BranchLabel internalFalseLabel=new BranchLabel();        this.right.generateOptimizedBoolean(currentScope,trueLabel,internalFalseLabel,false);      } else {        this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);        this.right.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);      }      return;    }    if ((condConst=this.right.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        BranchLabel internalFalseLabel=new BranchLabel();        this.left.generateOptimizedBoolean(currentScope,trueLabel,internalFalseLabel,false);        this.right.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);      } else {        this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);        this.right.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);      }      return;    }  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  public static ParserRuleContext earliestAncestorStartingWithToken(TerminalNode node){  Token token=node.getSymbol();  ParserRuleContext p=(ParserRuleContext)node.getParent();  ParserRuleContext prev=null;  while (p != null && p.getStart() == token) {    prev=p;    p=p.getParent();  }  if (prev == null) {    return (ParserRuleContext)node.getParent();  }  return prev;}  }
class C{  public void publish(final CoreDescriptor cd,final Replica.State state,boolean updateLastState,boolean forcePublish) throws KeeperException, InterruptedException {  if (!forcePublish) {    try (SolrCore core=cc.getCore(cd.getName())){      if (core == null || core.isClosed()) {        return;      }      MDCLoggingContext.setCore(core);    }   } else {    MDCLoggingContext.setCoreDescriptor(cd);  }  try {    String collection=cd.getCloudDescriptor().getCollectionName();    log.debug("publishing state={}",state.toString());    Integer numShards=cd.getCloudDescriptor().getNumShards();    if (numShards == null) {      log.debug("numShards not found on descriptor - reading it from system property");      numShards=Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);    }    assert collection != null && collection.length() > 0;    String shardId=cd.getCloudDescriptor().getShardId();    String coreNodeName=cd.getCloudDescriptor().getCoreNodeName();    if (state != Replica.State.DOWN) {      final Replica.State lirState=getLeaderInitiatedRecoveryState(collection,shardId,coreNodeName);      if (lirState != null) {        if (state == Replica.State.ACTIVE) {          if (lirState == Replica.State.RECOVERING) {            updateLeaderInitiatedRecoveryState(collection,shardId,coreNodeName,Replica.State.ACTIVE,cd,true);          } else           if (lirState == Replica.State.DOWN) {            throw new SolrException(ErrorCode.INVALID_STATE,"Cannot publish state of core '" + cd.getName() + "' as active without recovering first!");          }        } else         if (state == Replica.State.RECOVERING) {          if (lirState == Replica.State.DOWN) {            updateLeaderInitiatedRecoveryState(collection,shardId,coreNodeName,Replica.State.RECOVERING,cd,true);          }        }      }    }    Map<String,Object> props=new HashMap<>();    props.put(Overseer.QUEUE_OPERATION,"state");    props.put(ZkStateReader.STATE_PROP,state.toString());    props.put(ZkStateReader.BASE_URL_PROP,getBaseUrl());    props.put(ZkStateReader.CORE_NAME_PROP,cd.getName());    props.put(ZkStateReader.ROLES_PROP,cd.getCloudDescriptor().getRoles());    props.put(ZkStateReader.NODE_NAME_PROP,getNodeName());    props.put(ZkStateReader.SHARD_ID_PROP,cd.getCloudDescriptor().getShardId());    props.put(ZkStateReader.COLLECTION_PROP,collection);    if (numShards != null) {      props.put(ZkStateReader.NUM_SHARDS_PROP,numShards.toString());    }    if (coreNodeName != null) {      props.put(ZkStateReader.CORE_NODE_NAME_PROP,coreNodeName);    }    try (SolrCore core=cc.getCore(cd.getName())){      if (core != null && core.getDirectoryFactory().isSharedStorage()) {        if (core != null && core.getDirectoryFactory().isSharedStorage()) {          props.put("dataDir",core.getDataDir());          UpdateLog ulog=core.getUpdateHandler().getUpdateLog();          if (ulog != null) {            props.put("ulogDir",ulog.getLogDir());          }        }      }    }     ZkNodeProps m=new ZkNodeProps(props);    if (updateLastState) {      cd.getCloudDescriptor().lastPublished=state;    }    overseerJobQueue.offer(Utils.toJSON(m));  }  finally {    MDCLoggingContext.clear();  }}  }
class C{  public static boolean isXMLVersionCharacter(char c){  return (c < 128) && (VERSION_CHARACTER[c / 32] & (1 << (c % 32))) != 0;}  }
class C{  public KDCReqBody(DerValue encoding,int msgType) throws Asn1Exception, RealmException, KrbException, IOException {  DerValue der, subDer;  addresses=null;  encAuthorizationData=null;  additionalTickets=null;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  kdcOptions=KDCOptions.parse(encoding.getData(),(byte)0x00,false);  cname=PrincipalName.parse(encoding.getData(),(byte)0x01,true,new Realm("PLACEHOLDER"));  if ((msgType != Krb5.KRB_AS_REQ) && (cname != null)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  Realm realm=Realm.parse(encoding.getData(),(byte)0x02,false);  if (cname != null) {    cname=new PrincipalName(cname.getNameType(),cname.getNameStrings(),realm);  }  sname=PrincipalName.parse(encoding.getData(),(byte)0x03,true,realm);  from=KerberosTime.parse(encoding.getData(),(byte)0x04,true);  till=KerberosTime.parse(encoding.getData(),(byte)0x05,false);  rtime=KerberosTime.parse(encoding.getData(),(byte)0x06,true);  der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x07) {    nonce=der.getData().getBigInteger().intValue();  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  Vector<Integer> v=new Vector<>();  if ((der.getTag() & (byte)0x1F) == (byte)0x08) {    subDer=der.getData().getDerValue();    if (subDer.getTag() == DerValue.tag_SequenceOf) {      while (subDer.getData().available() > 0) {        v.addElement(subDer.getData().getBigInteger().intValue());      }      eType=new int[v.size()];      for (int i=0; i < v.size(); i++) {        eType[i]=v.elementAt(i);      }    } else {      throw new Asn1Exception(Krb5.ASN1_BAD_ID);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if (encoding.getData().available() > 0) {    addresses=HostAddresses.parse(encoding.getData(),(byte)0x09,true);  }  if (encoding.getData().available() > 0) {    encAuthorizationData=EncryptedData.parse(encoding.getData(),(byte)0x0A,true);  }  if (encoding.getData().available() > 0) {    Vector<Ticket> tempTickets=new Vector<>();    der=encoding.getData().getDerValue();    if ((der.getTag() & (byte)0x1F) == (byte)0x0B) {      subDer=der.getData().getDerValue();      if (subDer.getTag() == DerValue.tag_SequenceOf) {        while (subDer.getData().available() > 0) {          tempTickets.addElement(new Ticket(subDer.getData().getDerValue()));        }      } else {        throw new Asn1Exception(Krb5.ASN1_BAD_ID);      }      if (tempTickets.size() > 0) {        additionalTickets=new Ticket[tempTickets.size()];        tempTickets.copyInto(additionalTickets);      }    } else {      throw new Asn1Exception(Krb5.ASN1_BAD_ID);    }  }  if (encoding.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public static vec3 r_sub(vec3 a,vec3 b){  float x=a.m[0] - b.m[0];  float y=a.m[1] - b.m[1];  float z=a.m[2] - b.m[2];  vec3 result=new vec3(x,y,z);  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isAdaptive(){  return isAdaptive;}  }
class C{  public String representCopiesUsingWeightsTipText(){  return "Whether to represent copies of instances using weights rather than explicitly.";}  }
class C{  public boolean isReadOnly() throws SQLException {  return mc.isReadOnly();}  }
class C{  public void emitInvokeinterface(int meth,Type mtype){  int argsize=width(mtype.getParameterTypes());  emitop(invokeinterface);  if (!alive)   return;  emit2(meth);  emit1(argsize + 1);  emit1(0);  state.pop(argsize + 1);  state.push(mtype.getReturnType());}  }
class C{  public static boolean isSuccess(int statusCode){  if (statusCode >= 200 && statusCode < 300)   return true; else   return false;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source){  this.rangeAxis.resizeRange(factor);}  }
class C{  @Override public Data execute(Data in1,Data in2) throws DMLRuntimeException {  CM_COV_Object cm1=(CM_COV_Object)in1;  CM_COV_Object cm2=(CM_COV_Object)in2;  if (cm1.isCMAllZeros()) {    cm1.w=cm2.w;    cm1.mean.set(cm2.mean);    cm1.m2.set(cm2.m2);    cm1.m3.set(cm2.m3);    cm1.m4.set(cm2.m4);    return cm1;  }  if (cm2.isCMAllZeros())   return cm1;switch (_type) {case COUNT:{      cm1.w=Math.round(cm1.w + cm2.w);      break;    }case MEAN:{    double w=cm1.w + cm2.w;    double d=cm2.mean._sum - cm1.mean._sum;    cm1.mean=(KahanObject)_plus.execute(cm1.mean,cm2.w * d / w);    cm1.w=w;    break;  }case CM2:{  double w=cm1.w + cm2.w;  double d=cm2.mean._sum - cm1.mean._sum;  cm1.mean=(KahanObject)_plus.execute(cm1.mean,cm2.w * d / w);  double t1=cm1.w * cm2.w / w * d;  double lt1=t1 * d;  _buff2.set(cm1.m2);  _buff2=(KahanObject)_plus.execute(_buff2,cm2.m2._sum,cm2.m2._correction);  _buff2=(KahanObject)_plus.execute(_buff2,lt1);  cm1.m2.set(_buff2);  cm1.w=w;  break;}case CM3:{double w=cm1.w + cm2.w;double d=cm2.mean._sum - cm1.mean._sum;cm1.mean=(KahanObject)_plus.execute(cm1.mean,cm2.w * d / w);double t1=cm1.w * cm2.w / w * d;double t2=-1 / cm1.w;double lt1=t1 * d;double lt2=Math.pow(t1,3) * (1 / Math.pow(cm2.w,2) - Math.pow(t2,2));double f1=cm1.w / w;double f2=cm2.w / w;_buff2.set(cm1.m2);_buff2=(KahanObject)_plus.execute(_buff2,cm2.m2._sum,cm2.m2._correction);_buff2=(KahanObject)_plus.execute(_buff2,lt1);_buff3.set(cm1.m3);_buff3=(KahanObject)_plus.execute(_buff3,cm2.m3._sum,cm2.m3._correction);_buff3=(KahanObject)_plus.execute(_buff3,3 * (-f2 * cm1.m2._sum + f1 * cm2.m2._sum) * d + lt2);cm1.m2.set(_buff2);cm1.m3.set(_buff3);cm1.w=w;break;}case CM4:{double w=cm1.w + cm2.w;double d=cm2.mean._sum - cm1.mean._sum;cm1.mean=(KahanObject)_plus.execute(cm1.mean,cm2.w * d / w);double t1=cm1.w * cm2.w / w * d;double t2=-1 / cm1.w;double lt1=t1 * d;double lt2=Math.pow(t1,3) * (1 / Math.pow(cm2.w,2) - Math.pow(t2,2));double lt3=Math.pow(t1,4) * (1 / Math.pow(cm2.w,3) - Math.pow(t2,3));double f1=cm1.w / w;double f2=cm2.w / w;_buff2.set(cm1.m2);_buff2=(KahanObject)_plus.execute(_buff2,cm2.m2._sum,cm2.m2._correction);_buff2=(KahanObject)_plus.execute(_buff2,lt1);_buff3.set(cm1.m3);_buff3=(KahanObject)_plus.execute(_buff3,cm2.m3._sum,cm2.m3._correction);_buff3=(KahanObject)_plus.execute(_buff3,3 * (-f2 * cm1.m2._sum + f1 * cm2.m2._sum) * d + lt2);cm1.m4=(KahanObject)_plus.execute(cm1.m4,cm2.m4._sum,cm2.m4._correction);cm1.m4=(KahanObject)_plus.execute(cm1.m4,4 * (-f2 * cm1.m3._sum + f1 * cm2.m3._sum) * d + 6 * (Math.pow(-f2,2) * cm1.m2._sum + Math.pow(f1,2) * cm2.m2._sum) * Math.pow(d,2) + lt3);cm1.m2.set(_buff2);cm1.m3.set(_buff3);cm1.w=w;break;}case VARIANCE:{double w=cm1.w + cm2.w;double d=cm2.mean._sum - cm1.mean._sum;cm1.mean=(KahanObject)_plus.execute(cm1.mean,cm2.w * d / w);double t1=cm1.w * cm2.w / w * d;double lt1=t1 * d;cm1.m2=(KahanObject)_plus.execute(cm1.m2,cm2.m2._sum,cm2.m2._correction);cm1.m2=(KahanObject)_plus.execute(cm1.m2,lt1);cm1.w=w;break;}default :throw new DMLRuntimeException("Unsupported operation type: " + _type);}return cm1;}  }
class C{  public synchronized boolean generate(Projection p,boolean forceProjectAll){  boolean isGenerated=super.generate(p,forceProjectAll);  GeneralPath projectedShape=getShape();  if (projectedShape != null) {    projectedShape.closePath();  }  return isGenerated;}  }
class C{  @GuardedBy("lock") private int writeSize(){  int count=startPosition - (writePosition + 1);  return (count < 0) ? count + buffer.length : count;}  }
class C{  public static <T>void partialEvaluationConstant(Object value){}  }
class C{  @Deprecated public static boolean hasParentType(Delegator delegator,String entityName,String primaryKey,String childType,String parentTypeField,String parentType){  return EntityTypeUtil.hasParentType(delegator,entityName,primaryKey,childType,parentTypeField,parentType);}  }
class C{  public GreekLowerCaseFilter(TokenStream in){  super(in);}  }
class C{  public void readFrom(DataInput in) throws IOException {  typeId=in.readInt();  typeName=U.readString(in);  int fieldsSize=in.readInt();  if (fieldsSize == -1)   fields=null; else {    fields=new HashMap<>();    for (int i=0; i < fieldsSize; i++) {      String fieldName=U.readString(in);      int fieldId=in.readInt();      fields.put(fieldName,fieldId);    }  }  affKeyFieldName=U.readString(in);  int schemasSize=in.readInt();  if (schemasSize == -1)   schemas=null; else {    schemas=new ArrayList<>();    for (int i=0; i < schemasSize; i++) {      BinarySchema schema=new BinarySchema();      schema.readFrom(in);      schemas.add(schema);    }  }  isEnum=in.readBoolean();}  }
class C{  @GET @Path("/public/uaf/facets") @Produces("application/fido.trusted-apps+json") public Facets facets(){  String timestamp=new Date().toString();  Dash.getInstance().stats.put(Dash.LAST_REG_REQ,timestamp);  String[] trustedIds={"https://www.head2toes.org","android:apk-key-hash:Df+2X53Z0UscvUu6obxC3rIfFyk","android:apk-key-hash:bE0f1WtRJrZv/C0y9CM73bAUqiI","android:apk-key-hash:Lir5oIjf552K/XN4bTul0VS3GfM","https://openidconnect.ebay.com"};  List<String> trustedIdsList=new ArrayList<String>(Arrays.asList(trustedIds));  trustedIdsList.addAll(Dash.getInstance().facetIds);  Facets facets=new Facets();  facets.trustedFacets=new TrustedFacets[1];  TrustedFacets trusted=new TrustedFacets();  trusted.version=new Version(1,0);  trusted.ids=trustedIdsList.toArray(new String[0]);  facets.trustedFacets[0]=trusted;  return facets;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public static int[] quantizeImage(int pixels[][],int max_colors){  Cube cube=new Cube(pixels,max_colors);  cube.classification();  cube.reduction();  cube.assignment();  return cube.colormap;}  }
class C{  public boolean isDhcpOnVnicSupported(){  return dhcpOnVnicSupported;}  }
class C{  public void resetBasicBlockMap(){  basicBlockMap=new BasicBlock[getMaxBasicBlockNumber() + 1];  for (Enumeration<BasicBlock> bbEnum=cfg.basicBlocks(); bbEnum.hasMoreElements(); ) {    BasicBlock block=bbEnum.nextElement();    basicBlockMap[block.getNumber()]=block;  }}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  public void deleteAllDistributionPreferences(org.hibernate.Session hibSession,boolean updateClass){  boolean deleted=false;  if (getDistributionObjects() == null)   return;  for (Iterator i=getDistributionObjects().iterator(); i.hasNext(); ) {    DistributionObject relatedObject=(DistributionObject)i.next();    DistributionPref distributionPref=relatedObject.getDistributionPref();    distributionPref.getDistributionObjects().remove(relatedObject);    Integer seqNo=relatedObject.getSequenceNumber();    hibSession.delete(relatedObject);    deleted=true;    if (distributionPref.getDistributionObjects().isEmpty()) {      PreferenceGroup owner=distributionPref.getOwner();      owner.getPreferences().remove(distributionPref);      getPreferences().remove(distributionPref);      hibSession.saveOrUpdate(owner);      hibSession.delete(distributionPref);    } else {      if (seqNo != null) {        for (Iterator j=distributionPref.getDistributionObjects().iterator(); j.hasNext(); ) {          DistributionObject dObj=(DistributionObject)j.next();          if (seqNo.compareTo(dObj.getSequenceNumber()) < 0) {            dObj.setSequenceNumber(new Integer(dObj.getSequenceNumber().intValue() - 1));            hibSession.saveOrUpdate(dObj);          }        }      }      if (updateClass)       hibSession.saveOrUpdate(distributionPref);    }    i.remove();  }  if (deleted && updateClass)   hibSession.saveOrUpdate(this);}  }
class C{  private void doAuthenticate(HttpServletRequest request,HttpServletResponse response){  Map<String,Cookie> mapCookies=new HashMap<String,Cookie>();  Cookie[] cookies=request.getCookies();  if (cookies == null) {    return;  }  for (  Cookie cookie : cookies) {    mapCookies.put(cookie.getName(),cookie);  }  Cookie authCookie=mapCookies.get(CookieKey.AUTHENTICATION_COOKIE_NAME);  Cookie integrityCookie=mapCookies.get(CookieKey.INTEGRITY_COOKIE_NAME);  if (authCookie == null || integrityCookie == null) {    clearCookies(request,response);    return;  }  String auth=authCookie.getValue();  String integrity=integrityCookie.getValue();  SecurityContext ctx=SecurityContextProvider.getSecurityContext(integrity);  if (ctx == null || !checkUsername(ctx,auth)) {    clearCookies(request,response);    return;  }  SecurityContextHolder.setContext(ctx);  if (request.getSession().getAttribute("integrity") == null || request.getSession().getAttribute("integrity") != integrity) {    request.getSession().setAttribute("integrity",integrity);    SecurityContextProvider.saveSecurityContext(integrity,ctx);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.404 -0500",hash_original_method="35225802D7F18BE5673FDDFDE4B70B2E",hash_generated_method="477BB45AE156B2746D84F4B04582837E") private void doubleCapacity(){  assert head == tail;  int p=head;  int n=elements.length;  int r=n - p;  int newCapacity=n << 1;  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");  Object[] a=new Object[newCapacity];  System.arraycopy(elements,p,a,0,r);  System.arraycopy(elements,0,a,r,p);  elements=(E[])a;  head=0;  tail=n;}  }
class C{  public DirectoryView(Directory<ObjectType> directory,Set<String> identifiers){  this.directory=directory;  this.identifiers=identifiers;}  }
class C{  public boolean deleteTags(){  return deleteTags;}  }
class C{  void initializeIdealPointAndIntercepts(){  idealPoint=new double[problem.getNumberOfObjectives()];  intercepts=new double[problem.getNumberOfObjectives()];  for (int i=0; i < problem.getNumberOfObjectives(); i++) {    idealPoint[i]=Double.POSITIVE_INFINITY;    intercepts[i]=Double.NEGATIVE_INFINITY;  }  Population feasibleSolutions=getFeasibleSolutions(population);  if (!feasibleSolutions.isEmpty()) {    for (int i=0; i < feasibleSolutions.size(); i++) {      for (int j=0; j < problem.getNumberOfObjectives(); j++) {        idealPoint[j]=Math.min(idealPoint[j],feasibleSolutions.get(i).getObjective(j));        intercepts[j]=Math.max(intercepts[j],feasibleSolutions.get(i).getObjective(j));      }    }  }}  }
class C{  public boolean hasSegments(){  return hasRepeatingExtension(Segment.class);}  }
class C{  public HttpRoute(HttpHost target){  this(null,target,null,false,TunnelType.PLAIN,LayerType.PLAIN);}  }
class C{  public static void addUpdaters(final CGraphModel model,final NaviNode node){  Preconditions.checkNotNull(model,"IE02236: Model argument can not be null");  Preconditions.checkNotNull(node,"IE02237: Node argument can not be null");  for (  final INodeUpdater updater : CNodeUpdaterFactory.getUpdaters()) {    updater.visit(model,node);  }}  }
class C{  public NonValidator(){  this.attributeDefaultValues=new Hashtable();  this.currentElements=new Stack();  this.parameterEntityResolver=new XMLEntityResolver();}  }
class C{  public void pO(){  indentOut();}  }
class C{  public AcceptedOptionSet(final Class[] optionalOptions,final String freeArgumentsSyntax){  Check.notNull(optionalOptions,"optionalOptions");  Check.notNull(optionalOptions,"optionalOptions");  this.freeArgumentsSyntax=freeArgumentsSyntax;  this.optionalOptions.addAll(Arrays.asList(optionalOptions));}  }
class C{  private MessageData parseAssertion(final Assertion assertion,final boolean isResponseSigned) throws MarshallingException, ValidationException, WebssoClientException {  logger.info("Parsing assertion..");  Validate.notNull(assertion);  Subject subject=assertion.getSubject();  Validate.notNull(subject,"Assertion subject");  Document token=SamlUtils.createDomFromSignable(assertion);  TokenType tokenType=TokenType.BEARER;  List<SubjectConfirmation> confirmations=subject.getSubjectConfirmations();  if (confirmations != null && !confirmations.isEmpty()) {    SubjectConfirmation confirmation=confirmations.get(0);    Validate.notNull(confirmation,"SubjectConfirmation");    tokenType=confirmation.getMethod().equals(SamlNames.URI_BEARER) ? TokenType.BEARER : TokenType.HOLDER_OF_KEY;  }  assertion.validate(true);  Signature signature=assertion.getSignature();  String issuer=assertion.getIssuer().getValue();  IDPConfiguration idpConfig=this.controller.getMetadataSettings().getIDPConfigurationByEntityID(issuer);  if (signature != null) {    X509Certificate cert=(idpConfig == null) ? null : idpConfig.getSigningCertificate();    try {      SamlUtils.ValidateSignature(signature,cert);    } catch (    Exception e) {      logger.error("SAML Assertion signature validation failed! ",e);      if (this.getValidationResult().isValid()) {        this.setValidationResult(new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,Error.BAD_REQUEST,Error.SIGNATURE));      }      throw new ValidationException(e);    }  } else   if (!isResponseSigned || this.controller.isAssertionMustBeSigned()) {    logger.error("Neither response or assertion is signed");    if (this.getValidationResult().isValid()) {      this.setValidationResult(new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,Error.BAD_REQUEST,Error.NOT_SIGNED));    }    throw new ValidationException(Error.NOT_SIGNED);  }  int clockTolerance=0;  try {    clockTolerance=(idpConfig == null) ? 600 : idpConfig.getClockTolerance();    SamlUtils.ValidateConditions(assertion.getConditions(),clockTolerance);  } catch (  ValidationException e) {    if (this.getValidationResult().isValid()) {      this.setValidationResult(new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,Error.BAD_REQUEST,Error.CONDITION));    }    throw e;  }  NameID nameID=subject.getNameID();  Validate.notNull(nameID,"NameID");  String nameIDFormat=nameID.getFormat();  String nameIDStr=nameID.getValue();  logger.info("NameID: " + nameIDStr);  logger.info("NameIDFormat: " + nameIDFormat);  SubjectData subjectData=new SubjectData(nameIDFormat,nameIDStr);  String context=null;  String sessionIndex=null;  DateTime sessionNotOnOrAfter=null;  List<AuthnStatement> statements=assertion.getAuthnStatements();  if (statements != null && !statements.isEmpty()) {    AuthnStatement statement=statements.get(0);    sessionIndex=statement.getSessionIndex();    AuthnContextClassRef authnContextRef=statement.getAuthnContext().getAuthnContextClassRef();    if (authnContextRef != null) {      context=authnContextRef.toString();    }    sessionNotOnOrAfter=statement.getSessionNotOnOrAfter();    if (sessionNotOnOrAfter != null) {      try {        SamlUtils.ValidateSessionExpiry(sessionNotOnOrAfter,clockTolerance);      } catch (      ValidationException e) {        if (this.getValidationResult().isValid()) {          this.setValidationResult(new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,Error.BAD_REQUEST,Error.IDP_SESSION_EXPIRED));        }        throw e;      }    }  }  List<Attribute> attributes=null;  List<AttributeStatement> attributeStatements=assertion.getAttributeStatements();  if (attributeStatements != null && !attributeStatements.isEmpty()) {    attributes=this.parseAttributes(attributeStatements);  }  DateTime exp=assertion.getConditions().getNotOnOrAfter();  Date expDate=(exp == null) ? null : exp.toDate();  AuthnData authnData=new AuthnData(subjectData,expDate,sessionIndex,context,attributes,tokenType,token,sessionNotOnOrAfter);  return authnData;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER:    setDefinedMember((TStructMember)null);  return;}super.eUnset(featureID);}  }
class C{  private void finishProcessingIfNecessary(){  if (table == null) {    table=code.getCatches();  }}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.setEditable(false);  }}  }
class C{  public void iterate(final int numIterations){  updater.iterate(numIterations);  updateStopped();}  }
class C{  public static void addValidator(IFrancaExternalValidator validator){  ValidatorRegistry.addValidator(validator,FAST);}  }
class C{  @Override public void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  outState.putBoolean(KEY_CHECKING_ANSWER,mCheckingAnswer);}  }
class C{  static void dumpInstruction(IR ir,Instruction instr){  VM.sysWrite(instructionToString(ir,instr));}  }
class C{  @Override public IMqttToken unsubscribe(String topic) throws MqttException {  return unsubscribe(topic,null,null);}  }
class C{  private void validateErrorInformation(ErrorInformation errorInformation,HttpStatus expectedStatus){  validateErrorInformation(errorInformation,expectedStatus,true);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, min, max;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          min=z;          max=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              if (z < min) {                min=z;              }              if (z > max) {                max=z;              }            }          }          outputFile.setValue(row,col,(max - min));        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static double logPdf(double x,double shape,double scale){  if (x < 0)   return Double.NEGATIVE_INFINITY;  if (x == 0) {    if (shape == 1.0)     return Math.log(1.0 / scale); else     return Double.NEGATIVE_INFINITY;  }  if (shape == 1.0) {    return (-x / scale) - Math.log(scale);  }  if (shape == 0.0)   return -Math.log(x);  if (shape == -0.5) {    return 0.5 * Math.log(x);  }  return ((shape - 1.0) * (Math.log(x) - Math.log(scale)) - x / scale - GammaFunction.lnGamma(shape)) - Math.log(scale);}  }
class C{  protected boolean isForegroundUnderBackgroundLayer(List<Layer> layers){  boolean foundBackgroundLayer=false;  if (layers != null) {    for (    Layer layer : layers) {      if (layer != null) {        if (layer.getAddAsBackground()) {          foundBackgroundLayer=true;        } else         if (foundBackgroundLayer) {          return true;        }      }    }  }  return false;}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,int index){  return this.optEnum(clazz,index,null);}  }
class C{  private DBInstanceInfo retrieveDBInfoFromPath(Map<String,String> pathParameters){  DBInstanceInfo dbinfo=null;  String dbgroup=pathParameters.get(Constants.URL_PATH_DBGROUP);  if (dbgroup == null || dbgroup.isEmpty())   return null;  String dbhost=pathParameters.get(Constants.URL_PATH_DBHOST);  if (dbhost == null || dbhost.isEmpty())   return null;  try {    dbinfo=this.frameworkContext.getDbInfoManager().findDB(dbgroup,dbhost);  } catch (  Exception ex) {  }  return dbinfo;}  }
class C{  public NotCondition(final ChatCondition condition){  this.condition=checkNotNull(condition);}  }
class C{  @SuppressWarnings("unchecked") public AssociativeHashTable(int tableSize,IHash<K> hashMethod){  super(tableSize,hashMethod);  table=new LinkedList[tableSize];}  }
class C{  public static void startRecording(){  View startButton=SOLO.getCurrentActivity().findViewById(R.id.track_controller_record);  if (startButton != null && startButton.isShown()) {    SOLO.clickOnView(startButton);  }  instrumentation.waitForIdleSync();}  }
class C{  public static boolean verifyFileExistence(String path){  File file=new File(path);  return file.exists() && file.isFile();}  }
class C{  public CallResponse clone(){  CallResponse result=new CallResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Results != null) {    result.Results=new CallMethodResult[Results.length];    for (int i=0; i < Results.length; i++)     result.Results[i]=Results[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  public Boolean isTrunkingMode(){  return trunkingMode;}  }
class C{  public boolean equals(Object iObj){  if (iObj instanceof IntMathVec) {    IntMathVec iVec=(IntMathVec)iObj;    if (iVec.iV.length != iV.length)     return false;    for (int i=0; i < iV.length; i++) {      if (iV[i] != iVec.iV[i])       return false;    }    return true;  }  return false;}  }
class C{  @Override public Object[] toArray(){  return nodes.keySet().toArray();}  }
class C{  public production_part rhs(int indx) throws internal_error {  if (indx >= 0 && indx < _rhs_length)   return _rhs[indx]; else   throw new internal_error("Index out of range for right hand side of production");}  }
class C{  public static void listProjects(Bigquery bigquery) throws IOException {  Bigquery.Projects.List projectListRequest=bigquery.projects().list();  ProjectList projectList=projectListRequest.execute();  if (projectList.getProjects() != null) {    List<ProjectList.Projects> projects=projectList.getProjects();    System.out.println("Project list:");    for (    ProjectList.Projects project : projects) {      System.out.format("%s\n",project.getFriendlyName());    }  }}  }
class C{  private void validateDestination(ActiveMQDestination destination) throws Exception {  if (destination.isQueue()) {    SimpleString physicalName=OpenWireUtil.toCoreAddress(destination);    BindingQueryResult result=server.bindingQuery(physicalName);    if (!result.isExists() && !result.isAutoCreateJmsQueues()) {      throw ActiveMQMessageBundle.BUNDLE.noSuchQueue(physicalName);    }  }}  }
class C{  public String handle(){  return clientHandle;}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  byte code=in[in.length - 1];  int index=in.length - 1;  while (index > 0 && in[index - 1] == code) {    index--;  }  return in.length - index;}  }
class C{  private void persistBatch(){  LOGGER.debug("ProteinLoader.persistBatch() method has been called.");  if (proteinsAwaitingPersistence.size() > 0) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Persisting " + proteinsAwaitingPersistence.size() + " proteins");    }    final ProteinDAO.PersistedProteins persistedProteins=proteinDAO.insertNewProteins(proteinsAwaitingPersistence);    bottomProteinId=persistedProteins.updateBottomProteinId(bottomProteinId);    topProteinId=persistedProteins.updateTopProteinId(topProteinId);    if (isGetOrfOutput) {      createAndPersistNewORFs(persistedProteins);    }    proteinsAwaitingPersistence.clear();  }}  }
class C{  public void close() throws IOException {  if (!this.closed) {    this.closed=true;    this.out.flush();  }}  }
class C{  @NonNull public Item2 newItem2FromCursor(@NonNull Cursor cursor){  return Item2_Schema.INSTANCE.newModelFromCursor(connection,cursor,0);}  }
class C{  @Override protected void overrideIdentifierData(EmaApiIdentifierType identifier) throws EmaException {  identifier.setEmbedLevel(EmaApi.EMA_EMBED_LEVEL_EXTERNAL_STR);}  }
class C{  public void removeCapabilitiesListener(ICapabilitiesListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mCapabilitiesBroadcaster.removeCapabilitiesListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public static Map<String,Object> alwaysNsfProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  Debug.logInfo("Test Processor NSF Credit Card",module);  String refNum=UtilDateTime.nowAsString();  result.put("authResult",Boolean.FALSE);  result.put("resultNsf",Boolean.TRUE);  result.put("processAmount",processAmount);  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authFlag","N");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestProcessor",locale));  return result;}  }
class C{  public void testFloatValueZero(){  String a="0";  float result=0.0f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public void testAddSharedClasspathWorksWithAnotherPath() throws Exception {  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  container.setFileHandler(fileHandler);  container.setSharedClasspath(new String[]{PREVIOUS_FILE});  assertEquals(1,container.getSharedClasspath().length);  assertEquals(PREVIOUS_FILE,container.getSharedClasspath()[0]);  container.addSharedClasspath(TEST_FILE);  assertEquals(2,container.getSharedClasspath().length);  assertEquals(PREVIOUS_FILE,container.getSharedClasspath()[0]);  assertEquals(TEST_FILE,container.getSharedClasspath()[1]);}  }
class C{  public Block(NetworkParameters params,byte[] payloadBytes,int offset,MessageSerializer serializer,int length) throws ProtocolException {  super(params,payloadBytes,offset,serializer,length);}  }
class C{  @Override public void addLifecycle(String lifecycleId,Lifecycle lifecycle){  getWrapped().addLifecycle(lifecycleId,lifecycle);}  }
class C{  private void jbInit() throws Exception {  this.setLayout(mainLayout);  this.add(splitPane,BorderLayout.CENTER);  splitPane.setOpaque(false);  graphPanel.setLayout(graphLayout);  splitPane.add(graphPanel,JSplitPane.LEFT);  splitPane.add(cardPanel,JSplitPane.RIGHT);  splitPane.setBorder(null);  splitPane.setName("gc_splitPane");  cardPanel.setLayout(cardLayout);  cardPanel.add(vPane,"vPane");  cardPanel.add(mrPane,"mrPane");  cardPanel.setBorder(null);  cardPanel.setName("gc_cardPanel");  xPanel.setLayout(xLayout);  xPanel.setName("gc_xPanel");  xPanel.setBorder(BorderFactory.createEmptyBorder());  xLayout.setHgap(0);  xLayout.setVgap(0);  mrPane.setBorder(null);  mrPane.getViewport().add(vTable,null);  mrPane.setName("gc_mrPane");  graphPanel.setBorder(null);  graphPanel.setName("gc_graphPanel");  vPane.setBorder(BorderFactory.createEmptyBorder());}  }
class C{  protected void adjustPosition(Balloon balloon,Point screenPoint){  Rectangle viewport=this.wwd.getView().getViewport();  double x, y;  String xUnits, yUnits;  xUnits=AVKey.FRACTION;  if (screenPoint.x > viewport.width * 0.75) {    x=1.0;  } else   if (screenPoint.x < viewport.width * 0.25) {    x=0;  } else {    x=0.5;  }  int vertOffset=this.getBalloonOffset();  y=-vertOffset;  if (screenPoint.y < viewport.height * 0.5) {    yUnits=AVKey.INSET_PIXELS;  } else {    yUnits=AVKey.PIXELS;  }  Offset offset=new Offset(x,y,xUnits,yUnits);  BalloonAttributes attributes=balloon.getAttributes();  if (attributes == null) {    attributes=new BasicBalloonAttributes();    balloon.setAttributes(attributes);  }  attributes.setOffset(offset);  BalloonAttributes highlightAttributes=balloon.getHighlightAttributes();  if (highlightAttributes != null)   highlightAttributes.setOffset(offset);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public static String displayOutputs(String name,Set<String> outputNames,LocalVariableMap symbolTable){  StringBuilder sb=new StringBuilder();  sb.append(name);  sb.append(":\n");  sb.append(displayOutputs(outputNames,symbolTable));  return sb.toString();}  }
class C{  public void moveLocalFile(OCFile file,String targetPath,String targetParentPath){  if (file != null && file.fileExists() && !OCFile.ROOT_PATH.equals(file.getFileName())) {    OCFile targetParent=getFileByPath(targetParentPath);    if (targetParent == null) {      throw new IllegalStateException("Parent folder of the target path does not exist!!");    }    Cursor c=null;    if (getContentProviderClient() != null) {      try {        c=getContentProviderClient().query(ProviderTableMeta.CONTENT_URI,null,ProviderTableMeta.FILE_ACCOUNT_OWNER + "=? AND " + ProviderTableMeta.FILE_PATH+ " LIKE ? ",new String[]{mAccount.name,file.getRemotePath() + "%"},ProviderTableMeta.FILE_PATH + " ASC ");      } catch (      RemoteException e) {        Log_OC.e(TAG,e.getMessage());      }    } else {      c=getContentResolver().query(ProviderTableMeta.CONTENT_URI,null,ProviderTableMeta.FILE_ACCOUNT_OWNER + "=? AND " + ProviderTableMeta.FILE_PATH+ " LIKE ? ",new String[]{mAccount.name,file.getRemotePath() + "%"},ProviderTableMeta.FILE_PATH + " ASC ");    }    ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>(c.getCount());    String defaultSavePath=FileStorageUtils.getSavePath(mAccount.name);    List<String> originalPathsToTriggerMediaScan=new ArrayList<String>();    List<String> newPathsToTriggerMediaScan=new ArrayList<String>();    if (c.moveToFirst()) {      int lengthOfOldPath=file.getRemotePath().length();      int lengthOfOldStoragePath=defaultSavePath.length() + lengthOfOldPath;      do {        ContentValues cv=new ContentValues();        OCFile child=createFileInstance(c);        cv.put(ProviderTableMeta.FILE_PATH,targetPath + child.getRemotePath().substring(lengthOfOldPath));        if (child.getStoragePath() != null && child.getStoragePath().startsWith(defaultSavePath)) {          String targetLocalPath=defaultSavePath + targetPath + child.getStoragePath().substring(lengthOfOldStoragePath);          cv.put(ProviderTableMeta.FILE_STORAGE_PATH,targetLocalPath);          originalPathsToTriggerMediaScan.add(child.getStoragePath());          newPathsToTriggerMediaScan.add(targetLocalPath);        }        if (child.getRemotePath().equals(file.getRemotePath())) {          cv.put(ProviderTableMeta.FILE_PARENT,targetParent.getFileId());        }        operations.add(ContentProviderOperation.newUpdate(ProviderTableMeta.CONTENT_URI).withValues(cv).withSelection(ProviderTableMeta._ID + "=?",new String[]{String.valueOf(child.getFileId())}).build());      } while (c.moveToNext());    }    c.close();    try {      if (getContentResolver() != null) {        getContentResolver().applyBatch(MainApp.getAuthority(),operations);      } else {        getContentProviderClient().applyBatch(operations);      }    } catch (    Exception e) {      Log_OC.e(TAG,"Fail to update " + file.getFileId() + " and descendants in database",e);    }    String originalLocalPath=FileStorageUtils.getDefaultSavePathFor(mAccount.name,file);    String targetLocalPath=defaultSavePath + targetPath;    File localFile=new File(originalLocalPath);    boolean renamed=false;    if (localFile.exists()) {      File targetFile=new File(targetLocalPath);      File targetFolder=targetFile.getParentFile();      if (!targetFolder.exists()) {        targetFolder.mkdirs();      }      renamed=localFile.renameTo(targetFile);    }    if (renamed) {      Iterator<String> it=originalPathsToTriggerMediaScan.iterator();      while (it.hasNext()) {        deleteFileInMediaScan(it.next());      }      it=newPathsToTriggerMediaScan.iterator();      while (it.hasNext()) {        triggerMediaScan(it.next());      }    }  }}  }
class C{  public void testTimedInvokeAll1() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    try {      e.invokeAll(null,MEDIUM_DELAY_MS,MILLISECONDS);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  private void addToTT(String ttSName,boolean startBR){  addToTT(ttSName,startBR,(Object[])null);}  }
class C{  public int toInt(){  BigDecimal _value=this.getValue();  return _value.intValue();}  }
class C{  public static LoggingFraction createDefaultLoggingFraction(){  return createDefaultLoggingFraction(Level.INFO);}  }
class C{  @Override public void onMouseClicked(final MapMouseEvent ev){  if (!isTriggerMouseButton(ev)) {    return;  }  final Rectangle paneArea=getMapPane().getBounds();  final DirectPosition2D mapPos=ev.getMapPosition();  final double scale=getMapPane().getWorldToScreenTransform().getScaleX();  final double newScale=scale / zoom;  final DirectPosition2D corner=new DirectPosition2D(mapPos.getX() - 0.5d * paneArea.width / newScale,mapPos.getY() + 0.5d * paneArea.height / newScale);  final Envelope2D newMapArea=new Envelope2D();  newMapArea.setFrameFromCenter(mapPos,corner);  getMapPane().setDisplayArea(newMapArea);}  }
class C{  public final boolean contains(final Object value){  boolean flag=false;  for (int i=0; i < current_item; i++) {    if (items[i].equals(value)) {      i=current_item + 1;      flag=true;    }  }  return flag;}  }
class C{  protected void splitIt(ValueNode<DecompoundedWord> aParent,int aDepth){  if (aDepth > maxTreeDepth) {    return;  }  for (int i=0; i < aParent.getValue().getSplits().size(); i++) {    Fragment element=aParent.getValue().getSplits().get(i);    if (element.shouldSplitAgain()) {      List<DecompoundedWord> results=makeSplit(element.getWord());      for (      DecompoundedWord result : results) {        if (result.getSplits().size() > 1) {          DecompoundedWord resultCopy1=result.createCopy();          resultCopy1.getSplits().get(0).setSplitAgain(true);          DecompoundedWord parentCopy1=aParent.getValue().createCopy();          parentCopy1.replaceSplitElement(i,resultCopy1);          ValueNode<DecompoundedWord> node1=new ValueNode<DecompoundedWord>(parentCopy1);          aParent.addChild(node1);          splitIt(node1,aDepth + 1);          DecompoundedWord resultCopy2=result.createCopy();          resultCopy2.getSplits().get(1).setSplitAgain(true);          DecompoundedWord parentCopy2=aParent.getValue().createCopy();          parentCopy2.replaceSplitElement(i,resultCopy2);          ValueNode<DecompoundedWord> node2=new ValueNode<DecompoundedWord>(parentCopy2);          aParent.addChild(node2);          splitIt(node2,aDepth + 1);        }      }    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  String cmd=e.getActionCommand();  String plaf_name=null;  if (cmd.equals("Metal")) {    plaf_name="javax.swing.plaf.metal.MetalLookAndFeel";  } else   if (cmd.equals("Windows")) {    plaf_name="com.sun.java.swing.plaf.windows.WindowsLookAndFeel";  } else   if (cmd.equals("Motif")) {    plaf_name="com.sun.java.swing.plaf.motif.MotifLookAndFeel";  } else {    Object source=e.getSource();    if (source == breakOnExceptions) {      debugGui.dim.setBreakOnExceptions(breakOnExceptions.isSelected());    } else     if (source == breakOnEnter) {      debugGui.dim.setBreakOnEnter(breakOnEnter.isSelected());    } else     if (source == breakOnReturn) {      debugGui.dim.setBreakOnReturn(breakOnReturn.isSelected());    } else {      debugGui.actionPerformed(e);    }    return;  }  try {    UIManager.setLookAndFeel(plaf_name);    SwingUtilities.updateComponentTreeUI(debugGui);    SwingUtilities.updateComponentTreeUI(debugGui.dlg);  } catch (  Exception ignored) {  }}  }
class C{  public void readFrom(ChannelBuffer data,int length){  super.readFrom(data,length);  portNumber=data.readShort();  data.readInt();  data.readShort();  int availLength=(length - MINIMUM_LENGTH);  this.queues.clear();  while (availLength > 0) {    OFPacketQueue queue=new OFPacketQueue();    queue.readFrom(data);    queues.add(queue);    availLength-=queue.getLength();  }}  }
class C{  @NoWarning("GC") public void test2(){  Map<String,String> map1=new HashMap<String,String>();  Map<String,String> map2=new HashMap<String,String>();  for (  Map.Entry<String,String> entry : map1.entrySet()) {    String s1=entry.getKey();    String s2=map2.get(s1);    System.out.println(s2);  }}  }
class C{  public String fetchArrayCgName(URI storageSystemUri){  if (storageSystemUri == null) {    return null;  }  if (systemConsistencyGroups != null && !systemConsistencyGroups.isEmpty()) {    StringSet cgNames=systemConsistencyGroups.get(storageSystemUri.toString());    if (cgNames != null && cgNames.iterator().hasNext()) {      return cgNames.iterator().next();    }  }  return null;}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedLength(null,SVG_X_ATTRIBUTE,SVG_MASK_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y=createLiveAnimatedLength(null,SVG_Y_ATTRIBUTE,SVG_MASK_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  width=createLiveAnimatedLength(null,SVG_WIDTH_ATTRIBUTE,SVG_MASK_WIDTH_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);  height=createLiveAnimatedLength(null,SVG_HEIGHT_ATTRIBUTE,SVG_MASK_WIDTH_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,true);  maskUnits=createLiveAnimatedEnumeration(null,SVG_MASK_UNITS_ATTRIBUTE,UNITS_VALUES,(short)2);  maskContentUnits=createLiveAnimatedEnumeration(null,SVG_MASK_CONTENT_UNITS_ATTRIBUTE,UNITS_VALUES,(short)1);}  }
class C{  public static Data create(DataHandler handler,int capacity){  return new Data(handler,new byte[capacity]);}  }
class C{  @Override public int hashCode(){  return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.BINARY_BITWISE_EXPRESSION;}  }
class C{  public void animatedAttributeChanged(Element e,AnimatedLiveAttributeValue alav){  BridgeUpdateHandler h=getBridgeUpdateHandler(e);  if (h != null) {    try {      h.handleAnimatedAttributeChanged(alav);    } catch (    Exception ex) {      userAgent.displayError(ex);    }  }}  }
class C{  static void write(long ptr,int hash,byte[] keyBytes,byte[] valBytes,long queueAddr,long next,GridUnsafeMemory mem){  hash(ptr,hash,mem);  writeKeyLength(ptr,keyBytes.length,mem);  writeValueLength(ptr,valBytes.length,mem);  queueAddress(ptr,queueAddr,mem);  nextAddress(ptr,next,mem);  writeKeyBytes(ptr,keyBytes,mem);  writeValueBytes(ptr,keyBytes.length,valBytes,mem);}  }
class C{  public Map<Integer,TestRecord> selectToMap(){  List<TestRecord> list=SELECT().selectByExample(this);  Map<Integer,TestRecord> m=new LinkedHashMap<Integer,TestRecord>();  for (  TestRecord x : list) {    m.put(x.getRecordId(),x);  }  return m;}  }
class C{  public AbstractRetryingMessageListenerAdapter(T delegate,RetryTemplate retryTemplate,RecoveryCallback<Void> recoveryCallback){  super(delegate);  Assert.notNull(retryTemplate,"'retryTemplate' cannot be null");  this.retryTemplate=retryTemplate;  this.recoveryCallback=recoveryCallback;}  }
class C{  public static void startShowLocationActivity(Context context,double lat,double lng){  Intent intent=new Intent(context,LocationActivity.class);  LatLng latLng=new LatLng(lat,lng);  intent.putExtra(Const.Extras.LATLNG,latLng);  context.startActivity(intent);}  }
class C{  public final Int2D discretize(final Double2D location,int discretization){  return new Int2D((int)(location.x / discretization),(int)(location.y / discretization));}  }
class C{  protected final void shiftKeys(int pos){  int last, slot;  long curr;  final long[] key=this.key;  for (; ; ) {    pos=((last=pos) + 1) & mask;    for (; ; ) {      if (((curr=key[pos]) == (0))) {        key[last]=(0);        return;      }      slot=(int)it.unimi.dsi.fastutil.HashCommon.mix((curr)) & mask;      if (last <= pos ? last >= slot || slot > pos : last >= slot && slot > pos)       break;      pos=(pos + 1) & mask;    }    key[last]=curr;    value[last]=value[pos];  }}  }
class C{  public static List<URI> refreshProviderConnections(DbClient dbClient){  List<StorageProvider> externalProviders=new ArrayList<>();  List<URI> externalProvidersUris=new ArrayList<>();  try {    driverManager=getDriverManager();    Collection<String> externalDeviceProviderTypes=driverManager.getStorageProvidersMap().values();    _log.info("Processing external provider types: {}",externalDeviceProviderTypes);    for (    String providerType : externalDeviceProviderTypes) {      externalProviders.addAll(CustomQueryUtility.getActiveStorageProvidersByInterfaceType(dbClient,providerType));    }  } catch (  Exception e) {    _log.error("Failed to refresh connections for external providers.",e);    return externalProvidersUris;  }  for (  StorageProvider storageProvider : externalProviders) {    try {      String providerIpAddress=storageProvider.getIPAddress();      Integer providerPortNumber=storageProvider.getPortNumber();      if (getExternalDevice().validateStorageProviderConnection(providerIpAddress,providerPortNumber)) {        storageProvider.setConnectionStatus(StorageProvider.ConnectionStatus.CONNECTED.name());        externalProvidersUris.add(storageProvider.getId());        _log.info("Storage Provider {}/{}:{} is reachable",storageProvider.getLabel(),providerIpAddress,providerPortNumber);      } else {        storageProvider.setConnectionStatus(StorageProvider.ConnectionStatus.NOTCONNECTED.name());        _log.error("Storage Provider {}/{}:{} is not reachable",storageProvider.getLabel(),providerIpAddress,providerPortNumber);      }    } catch (    Exception e) {      storageProvider.setConnectionStatus(StorageProvider.ConnectionStatus.NOTCONNECTED.name());      _log.error("Storage Provider {}/{}:{} is not reachable",storageProvider.getLabel(),storageProvider.getIPAddress(),storageProvider.getPortNumber(),e);    } finally {      dbClient.updateObject(storageProvider);    }  }  return externalProvidersUris;}  }
class C{  private Double formatDoubleValue(Double value,int places){  BigDecimal bd=new BigDecimal(value);  bd=bd.setScale(places,RoundingMode.HALF_UP);  return bd.doubleValue();}  }
class C{  public PrintWriter createModelFile(){  String filename=modelDir + File.separator + modelFile;  PrintWriter fout=null;  try {    fout=new PrintWriter(new OutputStreamWriter(new FileOutputStream(filename),"UTF-8"));  } catch (  IOException e) {    System.out.println(e.toString());    return null;  }  return fout;}  }
class C{  public boolean includeStackTrace(String formattedStackTrace){  return arePatternsDefault || includeMatches(formattedStackTrace) && !excludeMatches(formattedStackTrace);}  }
class C{  public void addRelation(String source,String target,String edgeLabel){  GraphNode head=getGraphNode(source);  GraphNode tail=getGraphNode(target);  Relation relation=getRelation(edgeLabel);  if (null != relation) {    builder.newDep(head,tail,relation);    return;  }  logBadEdge(source,target,edgeLabel);}  }
class C{  private void processDefiniteCandidateElement(PivotFacet pf,PivotFacetValue value){  for (int shard=pf.knownShards.nextSetBit(0); 0 <= shard; shard=pf.knownShards.nextSetBit(shard + 1)) {    if (!value.shardHasContributed(shard)) {      if (FacetParams.FACET_SORT_INDEX.equals(facetFieldSort) || (null == value.getValue() || numberOfValuesContributedByShardWasLimitedByFacetFieldLimit(shard))) {        pf.addRefinement(shard,value);      }    }  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:01.103 -0500",hash_original_method="7F0A583E3C5916ED2C2C7E0A6DE82F31",hash_generated_method="A167546E1F58D4F871FD96EDD2BE2220") public SSLHandshakeException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void actionPerformed(ActionEvent evt){  if (Debug.debugging("beanbox"))   Debug.output("Enter> actionPerformed");  Object source=evt.getSource();  if (!(source instanceof JMenuItem))   return;  JMenuItem mi=(JMenuItem)source;  String name=mi.getText();  Layer targetLayer=(Layer)layers.get(name);  if (targetLayer == null) {    System.out.println("ERROR> BBDnDC::actionPerformed: " + "no layer found with name " + name);    return;  }  BeanBox targetBeanBox=((BeanBoxHandler)targetLayer).getBeanBox();  Object bean=transferData.get(0);  BeanInfo beanInfo=(BeanInfo)transferData.get(1);  Boolean wasBeanMoved=(Boolean)transferData.get(2);  if (wasBeanMoved.booleanValue()) {    String sourceLayerName=(String)transferData.get(3);    if (sourceLayerName.equals(targetLayer.getName())) {      targetBeanBox.relocateBean(bean,beanInfo,dropLocation);    } else {      Layer sourceLayer=(Layer)layers.get(sourceLayerName);      BeanBox sourceBeanBox=((BeanBoxHandler)sourceLayer).getBeanBox();      sourceBeanBox.removeBean(bean);      Vector object=new Vector();      object.add(bean);      object.add(beanInfo);      object.add(dropLocation);      targetBeanBox.addBean(object);    }  } else {    Vector object=new Vector();    object.add(bean);    object.add(beanInfo);    object.add(dropLocation);    targetBeanBox.addBean(object);  }}  }
class C{  @RequestMapping(value=CUSTOM_DDLS_URI_PREFIX + "/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}" + "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/customDdlNames/{customDdlName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_CUSTOM_DDLS_PUT) public CustomDdl updateCustomDdl(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("customDdlName") String customDdlName,@RequestBody CustomDdlUpdateRequest request){  return customDdlService.updateCustomDdl(new CustomDdlKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,customDdlName),request);}  }
class C{  @Transactional @IsAllowed(value=Operation.DELETE,resourceType=ResourceType.MILESTONE) public static Result deleteMilestone(String userName,String projectName,Long id){  Project project=Project.findByOwnerAndProjectName(userName,projectName);  Milestone milestone=Milestone.findById(id);  if (!project.id.equals(milestone.project.id)) {    return internalServerError();  }  milestone.delete();  if (HttpUtil.isRequestedWithXHR(request())) {    response().setHeader("Location",routes.MilestoneApp.milestones(userName,projectName).toString());    return status(204);  }  return redirect(routes.MilestoneApp.milestones(userName,projectName));}  }
class C{  public boolean apply(MInvoice invoice){  if (invoice == null || invoice.get_ID() == 0) {    log.log(Level.SEVERE,"No valid invoice - " + invoice);    return false;  }  if (!isValid())   return applyNoSchedule(invoice);  getSchedule(true);  if (m_schedule.length <= 1)   return applyNoSchedule(invoice); else   return applySchedule(invoice);}  }
class C{  public void addTuple(KeyValPair<K,V> tuple,Map<K,MutableDouble> map){  K key=tuple.getKey();  if (!doprocessKey(key) || (tuple.getValue() == null)) {    return;  }  MutableDouble val=map.get(key);  if (val == null) {    val=new MutableDouble(0.0);    map.put(cloneKey(key),val);  }  val.add(tuple.getValue().doubleValue());}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:42.083 -0500",hash_original_method="A4EB0430511E7A235909D5D8195B83C3",hash_generated_method="62AA43D4C8F4ECD3CE768F32C5D2AB84") private SyncResult(boolean syncAlreadyInProgress){  this.syncAlreadyInProgress=syncAlreadyInProgress;  this.tooManyDeletions=false;  this.tooManyRetries=false;  this.fullSyncRequested=false;  this.partialSyncUnavailable=false;  this.moreRecordsToGet=false;  this.delayUntil=0;  this.stats=new SyncStats();}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  if (actions == null)   getActions();  s.defaultWriteObject();}  }
class C{  public static ProfileRequest fromEnvironment(DataFetchingEnvironment environment,ZoneId timezone){  ProfileRequest profileRequest=new ProfileRequest();  profileRequest.zoneId=timezone;  String operation=environment.getFields().get(0).getName();  if (operation.equals("profile")) {    profileRequest.profile=true;  }  profileRequest.fromZonedDateTime=environment.getArgument("fromTime");  profileRequest.toZonedDateTime=environment.getArgument("toTime");  profileRequest.setTime();  profileRequest.wheelchair=environment.getArgument("wheelchair");  if (operation.equals("plan")) {    profileRequest.searchType=environment.getArgument("searchType");  }  double walkSpeed=environment.getArgument("walkSpeed");  profileRequest.walkSpeed=(float)walkSpeed;  double bikeSpeed=environment.getArgument("bikeSpeed");  profileRequest.bikeSpeed=(float)bikeSpeed;  double carSpeed=environment.getArgument("carSpeed");  profileRequest.carSpeed=(float)carSpeed;  profileRequest.streetTime=environment.getArgument("streetTime");  profileRequest.maxWalkTime=environment.getArgument("maxWalkTime");  profileRequest.maxBikeTime=environment.getArgument("maxBikeTime");  profileRequest.maxCarTime=environment.getArgument("maxCarTime");  profileRequest.minBikeTime=environment.getArgument("minBikeTime");  profileRequest.minCarTime=environment.getArgument("minCarTime");  profileRequest.limit=environment.getArgument("limit");  profileRequest.suboptimalMinutes=environment.getArgument("suboptimalMinutes");  profileRequest.bikeTrafficStress=environment.getArgument("bikeTrafficStress");  if (profileRequest.bikeTrafficStress > 4) {    profileRequest.bikeTrafficStress=4;  } else   if (profileRequest.bikeTrafficStress < 1) {    profileRequest.bikeTrafficStress=1;  }  profileRequest.fromLat=environment.getArgument("fromLat");  profileRequest.fromLon=environment.getArgument("fromLon");  profileRequest.toLat=environment.getArgument("toLat");  profileRequest.toLon=environment.getArgument("toLon");  Collection<TransitModes> transitModes=environment.getArgument("transitModes");  if (transitModes.size() > 0) {    if (transitModes.contains(TransitModes.TRANSIT)) {      profileRequest.transitModes=EnumSet.allOf(TransitModes.class);    } else {      profileRequest.transitModes=EnumSet.copyOf(transitModes);    }  }  profileRequest.accessModes=EnumSet.copyOf((Collection<LegMode>)environment.getArgument("accessModes"));  profileRequest.egressModes=EnumSet.copyOf((Collection<LegMode>)environment.getArgument("egressModes"));  profileRequest.directModes=EnumSet.copyOf((Collection<LegMode>)environment.getArgument("directModes"));  return profileRequest;}  }
class C{  public WeakAlarm(AlarmListener listener,long delta){  this(listener);  runAfter(delta);}  }
class C{  protected AlgorithmParameters engineGetParameters(){  return core.getParameters("Blowfish");}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    URI volumeId=getTaskCompleter().getId();    Volume volumeObj=dbClient.queryObject(Volume.class,volumeId);    if (_status == JobStatus.SUCCESS || _status == JobStatus.FAILED) {      VNXeJob.updateStoragePoolCapacity(dbClient,vnxeApiClient,volumeObj.getPool(),Arrays.asList(volumeObj.getId().toString()));    }    if (_status == JobStatus.SUCCESS && volumeObj != null) {      updateVolume(volumeObj,dbClient,logMsgBuilder,vnxeApiClient);    } else     if (_status == JobStatus.FAILED && volumeObj != null) {      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s failed to expand volume: %s",opId,volumeId.toString()));    } else {      logMsgBuilder.append(String.format("The volume: %s is not found anymore",volumeId));    }    _logger.info(logMsgBuilder.toString());  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeExpandVolumeJob",e);    setErrorStatus("Encountered an internal error during expand volume job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  VcfFormatStripper(Set<String> formatList,boolean keep){  mKeepMode=keep;  mFormats=formatList;}  }
class C{  public static OpenFlags fromOptions(OpenOption... options){  return fromOptions(Arrays.asList(options));}  }
class C{  public boolean isQueued_1(){  return queued_1;}  }
class C{  public final void writeBoolean(boolean val) throws IOException {  write(val ? 1 : 0);}  }
class C{  public static void eachDirRecurse(final File self,@ClosureParams(value=SimpleType.class,options="java.io.File") final Closure closure) throws FileNotFoundException, IllegalArgumentException {  eachFileRecurse(self,FileType.DIRECTORIES,closure);}  }
class C{  public Iterator<NativeControllerCall> iterateNativeControllerCalls(){  return nativeControllers.iterator();}  }
class C{  private boolean createAllocation(int C_Currency_ID,String description,Timestamp dateAcct,BigDecimal Amount,BigDecimal DiscountAmt,BigDecimal WriteOffAmt,BigDecimal OverUnderAmt,int C_BPartner_ID,int C_Payment_ID,int C_Invoice_ID,int AD_Org_ID){  if (m_allocation != null && m_allocation.getC_Currency_ID() != C_Currency_ID)   processAllocation();  if (m_allocation == null) {    m_allocation=new MAllocationHdr(getCtx(),false,dateAcct,C_Currency_ID,"Auto " + description,get_TrxName());    m_allocation.setAD_Org_ID(AD_Org_ID);    if (!m_allocation.save())     return false;  }  MAllocationLine aLine=new MAllocationLine(m_allocation,Amount,DiscountAmt,WriteOffAmt,OverUnderAmt);  aLine.setC_BPartner_ID(C_BPartner_ID);  aLine.setC_Payment_ID(C_Payment_ID);  aLine.setC_Invoice_ID(C_Invoice_ID);  return aLine.save();}  }
class C{  public String query(String handler,SolrQueryRequest req) throws Exception {  try (SolrCore core=getCoreInc()){    SolrQueryResponse rsp=new SolrQueryResponse();    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));    core.execute(core.getRequestHandler(handler),req,rsp);    if (rsp.getException() != null) {      throw rsp.getException();    }    StringWriter sw=new StringWriter(32000);    QueryResponseWriter responseWriter=core.getQueryResponseWriter(req);    responseWriter.write(sw,req,rsp);    req.close();    return sw.toString();  }  finally {    req.close();    SolrRequestInfo.clearRequestInfo();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  double x, y, x1, x2, y1, y2;  int progress;  int oldProgress;  int i, n;  double[][] vertices=null;  int numPolys=0;  ShapeType shapeType;  int[] parts={0};  double psi=0;  Object[] rowData;  double DegreeToRad=Math.PI / 180;  double[] axes=new double[2];  double newXAxis=0;  double newYAxis=0;  double longAxis;  double shortAxis;  final double rightAngle=Math.toRadians(90);  double midX, midY;  double[] newBoundingBox=new double[4];  double slope;  double boxCentreX, boxCentreY;  double elongation;  double elongationThreshold=0.25;  double dist;  boolean outputChainVector=false;  PointsList points=new PointsList();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  String outputFile=args[1];  neighbourhoodRadius=Double.parseDouble(args[2]);  int minChainLength=Integer.parseInt(args[3]);  String outputChainVectorFile=args[4];  if (!outputChainVectorFile.toLowerCase().contains("not specified")) {    outputChainVector=true;  }  if ((inputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numPolys=input.getNumberOfRecords();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    pointLocations=new double[numPolys * 2][2];    pointAttributes=new int[numPolys * 2][4];    int[][] polyAttributes=new int[numPolys][3];    DBFField[] fields=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("GROUP_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,shapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    ShapeFile chainVector=new ShapeFile();    if (outputChainVector) {      fields=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("GROUP_ID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      chainVector=new ShapeFile(outputChainVectorFile,ShapeType.POLYLINE,fields);    }    pointsTree=new KdTree.SqrEuclid(2,new Integer(numPolys * 2));    int recordNum;    oldProgress=-1;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      vertices=record.getGeometry().getPoints();      int numVertices=vertices.length;      double east=Double.NEGATIVE_INFINITY;      double west=Double.POSITIVE_INFINITY;      double north=Double.NEGATIVE_INFINITY;      double south=Double.POSITIVE_INFINITY;      for (i=0; i < numVertices; i++) {        if (vertices[i][0] > east) {          east=vertices[i][0];        }        if (vertices[i][0] < west) {          west=vertices[i][0];        }        if (vertices[i][1] > north) {          north=vertices[i][1];        }        if (vertices[i][1] < south) {          south=vertices[i][1];        }      }      midX=west + (east - west) / 2.0;      midY=south + (north - south) / 2.0;      double[][] verticesRotated=new double[numVertices][2];      int[] keyPoints=new int[4];      axes[0]=9999999;      axes[1]=9999999;      slope=0;      boxCentreX=0;      boxCentreY=0;      for (int m=0; m <= 180; m++) {        psi=-m * 0.5 * DegreeToRad;        for (n=0; n < numVertices; n++) {          x=vertices[n][0] - midX;          y=vertices[n][1] - midY;          verticesRotated[n][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));          verticesRotated[n][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));        }        int[] currentKeyPoints=new int[4];        newBoundingBox[0]=Double.MAX_VALUE;        newBoundingBox[1]=Double.MIN_VALUE;        newBoundingBox[2]=Double.MAX_VALUE;        newBoundingBox[3]=Double.MIN_VALUE;        for (n=0; n < numVertices; n++) {          x=verticesRotated[n][0];          y=verticesRotated[n][1];          if (x < newBoundingBox[0]) {            newBoundingBox[0]=x;            currentKeyPoints[0]=n;          }          if (x > newBoundingBox[1]) {            newBoundingBox[1]=x;            currentKeyPoints[1]=n;          }          if (y < newBoundingBox[2]) {            newBoundingBox[2]=y;            currentKeyPoints[2]=n;          }          if (y > newBoundingBox[3]) {            newBoundingBox[3]=y;            currentKeyPoints[3]=n;          }        }        newXAxis=newBoundingBox[1] - newBoundingBox[0];        newYAxis=newBoundingBox[3] - newBoundingBox[2];        if ((newXAxis * newYAxis) < (axes[0] * axes[1])) {          axes[0]=newXAxis;          axes[1]=newYAxis;          if (axes[0] > axes[1]) {            slope=-psi;          } else {            slope=-(rightAngle + psi);          }          x=newBoundingBox[0] + newXAxis / 2;          y=newBoundingBox[2] + newYAxis / 2;          boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));          boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));          keyPoints=currentKeyPoints.clone();        }      }      longAxis=Math.max(axes[0],axes[1]);      shortAxis=Math.min(axes[0],axes[1]);      elongation=1 - shortAxis / longAxis;      slope=AxialData.rationalizeAxialAngle(slope);      x1=boxCentreX + longAxis / 2.0 * Math.cos(slope);      y1=boxCentreY + longAxis / 2.0 * Math.sin(slope);      x2=boxCentreX - longAxis / 2.0 * Math.cos(slope);      y2=boxCentreY - longAxis / 2.0 * Math.sin(slope);      int keyPoint1=-1;      int keyPoint2=-1;      double minDist=shortAxis * shortAxis * 1.05;      for (i=0; i < 4; i++) {        x=vertices[keyPoints[i]][0];        y=vertices[keyPoints[i]][1];        dist=(x - x1) * (x - x1) + (y - y1) * (y - y1);        if (dist < minDist) {          keyPoint1=keyPoints[i];          minDist=dist;        }      }      minDist=shortAxis * shortAxis * 1.05;      for (i=0; i < 4; i++) {        x=vertices[keyPoints[i]][0];        y=vertices[keyPoints[i]][1];        dist=(x - x2) * (x - x2) + (y - y2) * (y - y2);        if (dist < minDist) {          keyPoint2=keyPoints[i];          minDist=dist;        }      }      if (elongation > elongationThreshold) {        i=(recordNum - 1) * 2;        x=vertices[keyPoint1][0];        y=vertices[keyPoint1][1];        pointsTree.addPoint(new double[]{y,x},new Integer(i));        pointLocations[i][0]=x;        pointLocations[i][1]=y;        pointAttributes[i][0]=recordNum;        pointAttributes[i][1]=1;        x=vertices[keyPoint2][0];        y=vertices[keyPoint2][1];        pointsTree.addPoint(new double[]{y,x},new Integer(i + 1));        pointLocations[i + 1][0]=x;        pointLocations[i + 1][1]=y;        pointAttributes[i + 1][0]=recordNum;        pointAttributes[i + 1][1]=2;      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((recordNum * 100.0) / numPolys);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    oldProgress=-1;    for (i=0; i < (numPolys * 2); i++) {      if (pointAttributes[i][0] > 0) {        int neighbourID=findConnectedNeighbour(i);        if (neighbourID >= 0 && findConnectedNeighbour(neighbourID) == i) {          pointAttributes[i][2]=pointAttributes[neighbourID][0];          pointAttributes[neighbourID][2]=pointAttributes[i][0];          pointAttributes[i][3]=neighbourID;          pointAttributes[neighbourID][3]=i;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((i * 100.0) / (numPolys * 2));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    List<Integer> chainPolys=new ArrayList<Integer>();    List<Integer> chainKeyPoints=new ArrayList<Integer>();    oldProgress=-1;    int currentGroupID=1;    int activeNode=0, lastNode=0;    int currentPoly=0;    for (i=0; i < numPolys; i++) {      if (polyAttributes[i][0] == 0) {        int linkedEndNodes=0;        if (pointAttributes[i * 2][2] > 0) {          linkedEndNodes++;          activeNode=i * 2;          lastNode=i * 2 + 1;        }        if (pointAttributes[i * 2 + 1][2] > 0) {          linkedEndNodes++;          activeNode=i * 2 + 1;          lastNode=i * 2;        }        if (linkedEndNodes == 1) {          polyAttributes[i][0]=currentGroupID;          boolean flag=true;          currentPoly=i;          chainPolys.clear();          chainPolys.add(currentPoly);          chainKeyPoints.clear();          points.clear();          points.addMPoint(pointLocations[lastNode][0],pointLocations[lastNode][1]);          points.addMPoint(pointLocations[activeNode][0],pointLocations[activeNode][1]);          do {            polyAttributes[currentPoly][0]=currentGroupID;            if (pointAttributes[activeNode][0] == pointAttributes[lastNode][0]) {              if (pointAttributes[activeNode][2] > 0) {                currentPoly=pointAttributes[activeNode][2] - 1;                lastNode=activeNode;                activeNode=pointAttributes[activeNode][3];                chainPolys.add(currentPoly);              } else {                if (chainPolys.size() >= minChainLength) {                  for (                  int c : chainPolys) {                    rowData=new Object[2];                    rowData[0]=new Double(c + 1);                    rowData[1]=new Double(currentGroupID);                    output.addRecord(input.getRecord(c).getGeometry(),rowData);                  }                  chainPolys.clear();                  if (outputChainVector) {                    rowData=new Object[1];                    rowData[0]=new Double(currentGroupID);                    chainVector.addRecord(new PolyLine(parts,points.getPointsArray()),rowData);                  }                  currentGroupID++;                }                flag=false;              }            } else {              if (pointAttributes[activeNode][1] == 1) {                lastNode=activeNode;                activeNode++;              } else {                lastNode=activeNode;                activeNode--;              }              points.addMPoint(pointLocations[lastNode][0],pointLocations[lastNode][1]);              points.addMPoint(pointLocations[activeNode][0],pointLocations[activeNode][1]);            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((i * 100.0) / (numPolys));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    output.write();    if (outputChainVector) {      chainVector.write();    }    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void closeWrite() throws IOException {  if (_isCloseWrite) {    return;  }  _isCloseWrite=true;  OutputStream os=_os;  _os=null;  boolean isShutdownOutput=false;  if (_s instanceof SSLSocket) {    log.finer(L.l("sslSocket can not be half-closed"));    return;  } else   if (_s != null) {    try {      _s.shutdownOutput();      isShutdownOutput=true;    } catch (    UnsupportedOperationException e) {      log.log(Level.FINEST,e.toString(),e);    }catch (    Exception e) {      log.finer(e.toString());      log.log(Level.FINEST,e.toString(),e);    }  }  if (!isShutdownOutput && os != null) {    os.close();  }}  }
class C{  public NotificationTargetImpl(String target) throws IllegalArgumentException, UnknownHostException {  parseTarget(target);}  }
class C{  public SpinnerDateModel(long min,long max,long currentValue){  this.max=max;  this.min=min;  this.currentValue=currentValue - currentValue % DAY + 12 * 60 * 60000;}  }
class C{  public static String truncateString(String str,int len){  return str.substring(0,Math.min(len,str.length()));}  }
class C{  public static boolean areBackendInitiators(List<Initiator> initiators){  boolean backend=true;  for (  Initiator initiator : initiators) {    if (!NullColumnValueGetter.isNullURI(initiator.getHost()) && URIUtil.isType(initiator.getHost(),Host.class)) {      backend=false;      break;    }  }  return backend;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  private void popLong(GPR reg1,GPR reg2){  if (VM.BuildFor64Addr) {    asm.emitLD(reg2,spTopOffset + 2 * BYTES_IN_STACKSLOT - BYTES_IN_LONG,FP);  } else {    asm.emitLWZ(reg1,spTopOffset,FP);    asm.emitLWZ(reg2,spTopOffset + BYTES_IN_STACKSLOT,FP);  }  discardSlots(2);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (transformer.currentTemplateRuleIsNull()) {    transformer.getMsgMgr().error(this,XSLTErrorResources.ER_NO_APPLY_IMPORT_IN_FOR_EACH);  }  int sourceNode=transformer.getXPathContext().getCurrentNode();  if (DTM.NULL != sourceNode) {    ElemTemplate matchTemplate=transformer.getMatchedTemplate();    transformer.applyTemplateToNode(this,matchTemplate,sourceNode);  } else {    transformer.getMsgMgr().error(this,XSLTErrorResources.ER_NULL_SOURCENODE_APPLYIMPORTS);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
