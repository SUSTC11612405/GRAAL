class C{  public static void storeKey(SecretKey key,File file){  try {    ObjectOutputStream out=new ObjectOutputStream(new FileOutputStream(file));    out.writeObject(key);    out.flush();    out.close();  } catch (  Exception e) {    throw new EncodingException(e);  }}  }
class C{  public Jersey1UnhandledExceptionHandler(ProjectApiErrors projectApiErrors,ApiExceptionHandlerUtils utils){  super(projectApiErrors,utils);  this.singletonGenericServiceError=Collections.singleton(projectApiErrors.getGenericServiceError());  this.genericServiceErrorHttpStatusCode=projectApiErrors.getGenericServiceError().getHttpStatusCode();}  }
class C{  public DotGraph createSubGraph(String label){  DotGraph subgraph=new DotGraph(label);  subgraph.isSubGraph=true;  this.drawElements.add(subgraph);  return subgraph;}  }
class C{  public ExecuteTaskSpaceOperationRequest(){}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  Item delete(Item item,ItemDeleteType deleteType,Player actor){  if (remove(item) != null) {    item.setPersistentState(PersistentState.DELETED);    deletedItems.add(item);    setPersistentState(PersistentState.UPDATE_REQUIRED);    ItemPacketService.sendItemDeletePacket(actor,StorageType.getStorageTypeById(item.getItemLocation()),item,deleteType);    if (item.getItemTemplate().isQuestUpdateItem()) {      actor.getController().updateNearbyQuests();    }    return item;  }  return null;}  }
class C{  private void loadDatabaseHeader(ByteBuffer bb) throws IOException {  if (bb.getInt() != MAGIC) {    throw new Error("Bad magic in db");  }  if (bb.getInt() != VERSION) {    throw new Error("Bad VERSION in db");  }  sampleRate=bb.getInt();  numChannels=bb.getInt();  lpcMin=bb.getFloat();  lpcRange=bb.getFloat();}  }
class C{  void reset(){  mNewWeightSum=-1;  useWeight=false;  mClearWeights=null;}  }
class C{  private void validateDataTags(final EquipmentConfiguration conf,final EquipmentMessageSender equipmentMessageSender){  for (  SourceDataTag sourceDataTag : conf.getDataTags().values()) {    try {      log.debug("validateDataTags - validate DataTag " + sourceDataTag.getId());      sourceDataTag.validate();    } catch (    ConfigurationException e) {      log.error("Error validating configuration for DataTag " + sourceDataTag.getId(),e);      SourceDataTagQuality quality=new SourceDataTagQuality(SourceDataTagQualityCode.INCORRECT_NATIVE_ADDRESS,e.getMessage());      equipmentMessageSender.update(sourceDataTag.getId(),quality);    }  }}  }
class C{  public static DataTagCacheObject createTestDataTag(){  DataTagCacheObject cacheObject=new DataTagCacheObject();  cacheObject.setId(new Long(100000));  cacheObject.setName("Junit_test_datatag1");  cacheObject.setDescription("test description");  cacheObject.setMode(DataTagConstants.MODE_TEST);  cacheObject.setDataType("Boolean");  cacheObject.setLogged(false);  cacheObject.setUnit("test unit m/sec");  cacheObject.setDipAddress("testDIPaddress");  cacheObject.setJapcAddress("testJAPCaddress");  cacheObject.setValue(Boolean.TRUE);  cacheObject.setValueDescription("test value description");  cacheObject.setSimulated(false);  cacheObject.setEquipmentId(new Long(100));  cacheObject.setMinValue(new Float(23.3));  cacheObject.setMaxValue(new Float(12.2));  cacheObject.setValueDictionary(new DataTagValueDictionary());  cacheObject.setAddress(new DataTagAddress());  cacheObject.setDataTagQuality(createValidQuality());  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setDaqTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setSourceTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setRuleIdsString("130");  return cacheObject;}  }
class C{  @Override public void onAddIndex(AddIndexData addIndexData){  SpaceSynchronizationEndpoint endpointInterceptor=getEndpoint(addIndexData.getTypeName());  if (endpointInterceptor != null)   endpointInterceptor.onAddIndex(addIndexData);}  }
class C{  public JsonObject add(String name,int value){  add(name,Json.value(value));  return this;}  }
class C{  public static boolean isFieldsetExpanded(WebElement fieldset){  boolean isExpanded=false;  if (!fieldset.getAttribute(HtmlTags.Attributes.CLASS).contains(COLLAPSED_CLASS)) {    isExpanded=true;  }  return isExpanded;}  }
class C{  public static TimeZone toTimeZone(int gmtOffset){  if (gmtOffset > 12 || gmtOffset < -14) {    throw new IllegalArgumentException("Invalid GMT offset");  }  String tzId=gmtOffset > 0 ? "Etc/GMT+" : "Etc/GMT";  return TimeZone.getTimeZone(tzId + gmtOffset);}  }
class C{  public double taylor(final double... delta) throws MathRuntimeException {  return compiler.taylor(data,0,delta);}  }
class C{  private float parseFloat(String par1Str){  return par1Str.equals("true") ? 1.0F : (par1Str.equals("false") ? 0.0F : Float.parseFloat(par1Str));}  }
class C{  public static byte[] ledgerId2Bytes(long ledgerId){  return Long.toString(ledgerId).getBytes(UTF_8);}  }
class C{  @deprecated public double match(ULocale a,ULocale aMax,ULocale b,ULocale bMax){  double diff=0.0D;  diff+=this.languageScores.getScore(a,aMax,a.getLanguage(),aMax.getLanguage(),b,bMax,b.getLanguage(),bMax.getLanguage());  diff+=this.scriptScores.getScore(a,aMax,a.getScript(),aMax.getScript(),b,bMax,b.getScript(),bMax.getScript());  diff+=this.regionScores.getScore(a,aMax,a.getCountry(),aMax.getCountry(),b,bMax,b.getCountry(),bMax.getCountry());  if (!a.getVariant().equals(b.getVariant())) {    diff+=1.0D;  }  if (diff < 0.0D) {    diff=0.0D;  } else   if (diff > 1.0D) {    diff=1.0D;  }  return 1.0D - diff;}  }
class C{  protected void send_package(byte cmd,String group_name,String remote_filename) throws IOException {  byte[] header;  byte[] groupBytes;  byte[] filenameBytes;  byte[] bs;  int groupLen;  groupBytes=new byte[ProtoCommon.FDFS_GROUP_NAME_MAX_LEN];  bs=group_name.getBytes(ClientGlobal.g_charset);  filenameBytes=remote_filename.getBytes(ClientGlobal.g_charset);  Arrays.fill(groupBytes,(byte)0);  if (bs.length <= groupBytes.length) {    groupLen=bs.length;  } else {    groupLen=groupBytes.length;  }  System.arraycopy(bs,0,groupBytes,0,groupLen);  header=ProtoCommon.packHeader(cmd,groupBytes.length + filenameBytes.length,(byte)0);  byte[] wholePkg=new byte[header.length + groupBytes.length + filenameBytes.length];  System.arraycopy(header,0,wholePkg,0,header.length);  System.arraycopy(groupBytes,0,wholePkg,header.length,groupBytes.length);  System.arraycopy(filenameBytes,0,wholePkg,header.length + groupBytes.length,filenameBytes.length);  this.storageServer.getSocket().getOutputStream().write(wholePkg);}  }
class C{  public IllinoisSolver(final double absoluteAccuracy){  super(absoluteAccuracy,Method.ILLINOIS);}  }
class C{  public boolean isUserInRole(List<String> allowedUserRoles,ContainerRequestContext containerRequestContext){  SecurityContext securityContext=containerRequestContext.getSecurityContext();  return allowedUserRoles.stream().anyMatch(null);}  }
class C{  public TypeVariable typeVariable(Type type){  return typeVariable(ClassHierarchy.v().typeNode(type));}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  public void testSetValueMinSdk(){  VirtualFile file=myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_3.xml","res/values/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_3.xml","res/values-v17/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_4.xml","res/values-v19/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_3.xml","res/values-v22/styles.xml");  ItemResourceValue item=new ItemResourceValue("colorBackgroundCacheHint",true,"#000000",false,null);  checkSetValue(file,item,"","-v17","-v19","-v22");}  }
class C{  public static String graphToDot(UniqueVertexGraph gTree,boolean bDirected){  StringBuffer sb=new StringBuffer();  String sConnector;  boolean bDistroGraph=gTree instanceof DistributionGraph;  if (!bDirected) {    sb.append("graph {\n");    sConnector="--";  } else {    sb.append("digraph {\n");    sConnector="->";  }  Iterator iIter=gTree.getEdgeSet().iterator();  while (iIter.hasNext()) {    Edge e=(Edge)iIter.next();    String sA="_" + e.getVertexA().toString().replaceAll("\\W","_");    String sB="_" + e.getVertexB().toString().replaceAll("\\W","_");    String sLabel="";    if (e instanceof WeightedEdge) {      sLabel+=String.format("%4.2f",((WeightedEdge)e).getWeight());    }    if (bDistroGraph) {      Distribution dTmp;      if ((dTmp=(Distribution)((DistributionGraph)gTree).EdgeDistros.get(e)) != null)       sLabel+=" - Distro: " + dTmp.toString();    }    if (e instanceof WeightedEdge)     sb.append("\t" + sA + " "+ sConnector+ " "+ sB+ " [label=\""+ sLabel.replaceAll("\\s+"," ")+ "\"]\n"); else     sb.append("\t" + sA + " "+ sConnector+ " "+ sB+ "\n");    sb.append("\t" + sA + " [label=\""+ sA+ "\"] "+ "\n");  }  sb.append("}");  return sb.toString();}  }
class C{  @GET @Produces("text/plain") @Path("bad-signature") public Response badSignature() throws Exception {  DKIMSignature signature=new DKIMSignature();  signature.setDomain("samplezone.org");  signature.setSelector("test");  KeyPair keyPair=KeyPairGenerator.getInstance("RSA").generateKeyPair();  PrivateKey badKey=keyPair.getPrivate();  signature.setPrivateKey(badKey);  return Response.ok("hello world").header(DKIMSignature.DKIM_SIGNATURE,signature).build();}  }
class C{  public JPrefuseTree(Tree t,String labelField){  super();  m_tree=t;  m_field=labelField;  PrefuseTreeModel model=new PrefuseTreeModel();  super.setModel(model);  m_tree.addGraphModelListener(model);}  }
class C{  public boolean lockEnabled(){  return getModelEntity().lock();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OutofSight_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200608,skillcaster,skillname);}  }
class C{  public static List<ByteBuffer> base64StringToByteBuffer(String... base64EncodedKeys){  List<ByteBuffer> byteBuffers=new ArrayList<>(base64EncodedKeys.length);  for (  String base64EncodedKey : base64EncodedKeys) {    byteBuffers.add(base64StringToByteBuffer(base64EncodedKey));  }  return byteBuffers;}  }
class C{  @Override public int compareTo(Row o){  boolean isLocal=mySource.getProvider() instanceof LocalSourceProvider;  if (isLocal != (o.mySource.getProvider() instanceof LocalSourceProvider)) {    return isLocal ? -1 : 1;  }  if (myOriginalName == null || o.myOriginalName == null) {    return myOriginalName == null ? (o.myOriginalName == null ? 0 : 1) : -1;  }  return myOriginalName.compareTo(o.myOriginalName);}  }
class C{  public static String callDataResourcePermissionCheck(Delegator delegator,LocalDispatcher dispatcher,Map<String,Object> context){  Map<String,Object> permResults=callDataResourcePermissionCheckResult(delegator,dispatcher,context);  String permissionStatus=(String)permResults.get("permissionStatus");  return permissionStatus;}  }
class C{  private IEntryHolder updateEntrySA(Context context,IEntryHolder entry,ITemplateHolder template,boolean fromReplication,boolean origin,IServerTypeDesc typeDesc) throws SAException {  _cacheManager.insertToRecentUpdatesIfNeeded(entry,_cacheManager.requiresEvictionReplicationProtection() ? Long.MAX_VALUE : 0,null);  boolean shouldReplicate=false;  if (isReplicated())   shouldReplicate=shouldReplicate(ReplicationOperationType.UPDATE,typeDesc,false,fromReplication);  return _cacheManager.updateEntry(context,entry,template,shouldReplicate,origin);}  }
class C{  public VideoAddToAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){  super(client,"video.addToAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  videoId(videoId);}  }
class C{  private static String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString();}  }
class C{  public static void applyLocalNamedVolumeConstraints(Collection<ComponentDescription> componentDescriptions){  Map<String,ContainerVolumeDescription> volumes=filterDescriptions(ContainerVolumeDescription.class,componentDescriptions);  List<String> localVolumes=volumes.values().stream().filter(null).map(null).collect(Collectors.toList());  if (localVolumes.isEmpty()) {    return;  }  Map<String,ContainerDescription> containers=filterDescriptions(ContainerDescription.class,componentDescriptions);  List<Set<String>> localVolumeContainers=localVolumes.stream().map(null).filter(null).collect(Collectors.toList());  if (localVolumeContainers.isEmpty()) {    return;  }  localVolumeContainers=mergeSets(localVolumeContainers);  Map<String,List<ContainerVolumeDescription>> containerToVolumes=containers.values().stream().collect(Collectors.toMap(null,null));  Map<String,Integer> containerToDriverCount=containerToVolumes.entrySet().stream().collect(Collectors.toMap(null,null));  for (  Set<String> s : localVolumeContainers) {    if (s.size() > 1) {      int max=s.stream().map(null).max(null).get();      Set<String> maxDrivers=s.stream().filter(null).collect(Collectors.toSet());      String maxCont=maxDrivers.iterator().next();      s.remove(maxCont);      s.stream().forEach(null);    }  }}  }
class C{  public BoolValueProperty installed(){  return myInstalled;}  }
class C{  public ForceDirectedLayout(String group,boolean enforceBounds){  this(group,enforceBounds,false);}  }
class C{  public DOMInputImpl(String publicId,String systemId,String baseSystemId,String data,String encoding){  fPublicId=publicId;  fSystemId=systemId;  fBaseSystemId=baseSystemId;  fData=data;  fEncoding=encoding;}  }
class C{  public static <T>Predicate<T> not(Predicate<T> predicate){  return predicate.negate();}  }
class C{  public static Matrix random(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=Math.random();    }  }  return A;}  }
class C{  public AuthenticatorException(List<String> messages,Throwable nested){  super(messages,nested);}  }
class C{  public void save(String fileName){  try {    JAXBContext context=JAXBContext.newInstance("vn.vitk.tok.jaxb");    Marshaller marshaller=context.createMarshaller();    marshaller.setProperty(Marshaller.JAXB_ENCODING,"utf-8");    try {      OutputStream os=new FileOutputStream(fileName);      marshaller.marshal(createN(root),os);      os.close();    } catch (    IOException e) {      e.printStackTrace();    }  } catch (  JAXBException e) {    e.printStackTrace();  }}  }
class C{  public Outline(@NonNull Outline src){  set(src);}  }
class C{  protected void drawDataSet(Canvas c,IRadarDataSet dataSet,int mostEntries){  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  float sliceangle=mChart.getSliceAngle();  float factor=mChart.getFactor();  PointF center=mChart.getCenterOffsets();  Path surface=new Path();  boolean hasMovedToPoint=false;  for (int j=0; j < dataSet.getEntryCount(); j++) {    mRenderPaint.setColor(dataSet.getColor(j));    Entry e=dataSet.getEntryForIndex(j);    PointF p=Utils.getPosition(center,(e.getVal() - mChart.getYChartMin()) * factor * phaseY,sliceangle * j * phaseX + mChart.getRotationAngle());    if (Float.isNaN(p.x))     continue;    if (!hasMovedToPoint) {      surface.moveTo(p.x,p.y);      hasMovedToPoint=true;    } else     surface.lineTo(p.x,p.y);  }  if (dataSet.getEntryCount() > mostEntries) {    surface.lineTo(center.x,center.y);  }  surface.close();  if (dataSet.isDrawFilledEnabled()) {    final Drawable drawable=dataSet.getFillDrawable();    if (drawable != null) {      drawFilledPath(c,surface,drawable);    } else {      drawFilledPath(c,surface,dataSet.getFillColor(),dataSet.getFillAlpha());    }  }  mRenderPaint.setStrokeWidth(dataSet.getLineWidth());  mRenderPaint.setStyle(Paint.Style.STROKE);  if (!dataSet.isDrawFilledEnabled() || dataSet.getFillAlpha() < 255)   c.drawPath(surface,mRenderPaint);}  }
class C{  public void addItemToSell(int itemObjId,TradePSItem tradeItem){  items.put(itemObjId,tradeItem);}  }
class C{  private void include(final double[] x,final double wi,final double yi){  int nextr=0;  double w=wi;  double y=yi;  double xi;  double di;  double wxi;  double dpi;  double xk;  double _w;  this.rss_set=false;  sumy=smartAdd(yi,sumy);  sumsqy=smartAdd(sumsqy,yi * yi);  for (int i=0; i < x.length; i++) {    if (w == 0.0) {      return;    }    xi=x[i];    if (xi == 0.0) {      nextr+=nvars - i - 1;      continue;    }    di=d[i];    wxi=w * xi;    _w=w;    if (di != 0.0) {      dpi=smartAdd(di,wxi * xi);      final double tmp=wxi * xi / di;      if (FastMath.abs(tmp) > Precision.EPSILON) {        w=(di * w) / dpi;      }    } else {      dpi=wxi * xi;      w=0.0;    }    d[i]=dpi;    for (int k=i + 1; k < nvars; k++) {      xk=x[k];      x[k]=smartAdd(xk,-xi * r[nextr]);      if (di != 0.0) {        r[nextr]=smartAdd(di * r[nextr],(_w * xi) * xk) / dpi;      } else {        r[nextr]=xk / xi;      }      ++nextr;    }    xk=y;    y=smartAdd(xk,-xi * rhs[i]);    if (di != 0.0) {      rhs[i]=smartAdd(di * rhs[i],wxi * xk) / dpi;    } else {      rhs[i]=xk / xi;    }  }  sserr=smartAdd(sserr,w * y * y);}  }
class C{  public Builder transform(Transform transform){  actionList.add(new DataAction(transform));  return this;}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};}  }
class C{  public int readInt() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readInt();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public void run(){  try {    if (logger.isDebugEnabled()) {      logger.debug("trying to send command..");    }    String retValue=commandRunner.runCommand(sourceCommandTagValue);    if (logger.isDebugEnabled()) {      logger.debug("notifying the handler");    }synchronized (commandExecLock) {      this.returnValue=retValue;      cmdExecutionStatus=STATUS_OK;      commandExecLock.notifyAll();    }  } catch (  EqCommandTagException ex1) {    logger.error("a problem with executing command encountered. problem description: " + ex1.getErrorDescription());synchronized (commandExecLock) {      cmdExecutionStatus=STATUS_NOK_FROM_EQUIPMENTD;      cmdExecutionDescription=ex1.getErrorDescription();    }  }catch (  Exception ex2) {    logger.error("run(): Unexpected error executing the command : " + ex2.getMessage());synchronized (commandExecLock) {      cmdExecutionStatus=STATUS_NOK_FROM_EQUIPMENTD;      cmdExecutionDescription=ex2.getMessage();    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_Instant_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200380,num0,skillname);}  }
class C{  protected void overwriteBNodeEntries(List<BEntry> entries){  byte[] zeros=new byte[bitMapSize];  setBitMap(zeros);  if (entries.size() > numEntries) {    throw new BPlusTreeException("too many BEntry given to fit on page");  }  for (int i=0; i < entries.size(); i++) {    writeEntry(i,entries.get(i));  }}  }
class C{  public void pause(){  isPaused=true;}  }
class C{  private void populateAllowedTypes(Class<?> key,Class<?>[] allowedTypeArray){  allowedTypeMap.put(key,Arrays.asList(allowedTypeArray));}  }
class C{  public boolean skipWeightCheckQuery(DruidAggregationQuery<?> query){  try {    long worstCaseRows=WeightEvaluationQuery.getWorstCaseWeightEstimate(query);    double skipThreshold=getQueryWeightThreshold(query.getGranularity()) / weightCheckBypassFactor;    return worstCaseRows <= skipThreshold;  } catch (  ArithmeticException ignored) {    LOG.debug("worst case weight larger than {}",Long.MAX_VALUE);    return false;  }}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  protected int index(short val){  int hash, probe, index, length;  final byte[] states=_states;  final short[] set=_set;  length=states.length;  hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  index=hash % length;  if (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {    probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] != FREE && (states[index] == REMOVED || set[index] != val));  }  return states[index] == FREE ? -1 : index;}  }
class C{  public void putImplementationCommandTagChanger(final long equipmentId,final ICommandTagChanger commandTagChanger){  if (commandTagChanger == null)   commandTagChangers.remove(equipmentId); else   commandTagChangers.put(equipmentId,commandTagChanger);}  }
class C{  public Builder keepInnerClass(boolean val){  keepInnerClass=val;  return this;}  }
class C{  public static String stripCharsNotInBag(String s,String bag){  int i;  StringBuilder stringBuilder=new StringBuilder("");  for (i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (bag.indexOf(c) != -1)     stringBuilder.append(c);  }  return stringBuilder.toString();}  }
class C{  public JobRowFilter withOperation(FilterOperation operation){  return new JobRowFilter(jobField,operation,values);}  }
class C{  public boolean declaresMethod(String name,List<Type> parameterTypes,Type returnType){  checkLevel(SIGNATURES);  for (  SootMethod method : methodList) {    if (method.getName().equals(name) && method.getParameterTypes().equals(parameterTypes) && method.getReturnType().equals(returnType))     return true;  }  return false;}  }
class C{  public int geom_frac_base(){  return soot.PhaseOptions.getInt(options,"geom-frac-base");}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public int uninstallSilent(Context context,String packageName,boolean isKeepData){  if (packageName == null || packageName.length() == 0) {    return DELETE_FAILED_INVALID_PACKAGE;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm uninstall").append(isKeepData ? " -k " : " ").append(packageName.replace(" ","\\ "));  ShellUtil.CommandResult commandResult=ShellUtil.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.responseMsg != null && (commandResult.responseMsg.contains("Success") || commandResult.responseMsg.contains("success"))) {    return DELETE_SUCCEEDED;  }  LogUtils.e(new StringBuilder().append("uninstallSilent successMsg:").append(commandResult.responseMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return DELETE_FAILED_INTERNAL_ERROR;  }  if (commandResult.errorMsg.contains("Permission denied")) {    return DELETE_FAILED_PERMISSION_DENIED;  }  return DELETE_FAILED_INTERNAL_ERROR;}  }
class C{  public AccountSetPushSettingsQuery(VkApiClient client,UserActor actor,String deviceId){  super(client,"account.setPushSettings",OkResponse.class);  accessToken(actor.getAccessToken());  deviceId(deviceId);}  }
class C{  public String toString(){  try {    return decode(bytes,0,length);  } catch (  CharacterCodingException e) {    throw new RuntimeException("Should not have happened " + e.toString());  }}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public ResourceLoader addIncludePackages(String... packages){  Collections.addAll(includeResourcePackages,packages);  return this;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  WeekForeCastDao.createTable(db,ifNotExists);  RealWeatherDao.createTable(db,ifNotExists);  HourForeCastDao.createTable(db,ifNotExists);  AqiDao.createTable(db,ifNotExists);  ZhishuDao.createTable(db,ifNotExists);  UseAreaDao.createTable(db,ifNotExists);  AlarmsDao.createTable(db,ifNotExists);}  }
class C{  @Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.doctypeDecl(rootElement,publicId,systemId,augs);  }}  }
class C{  public void computeFromPoints(FloatBuffer points){  calcWelzl(points);}  }
class C{  public boolean isNonsingular(){  for (int j=0; j < n; j++) {    if (LU[j][j] == 0)     return false;  }  return true;}  }
class C{  public SubscriptionTopicSummaryProperties(final Boolean show,final Integer count,final T message,final int maxPayloadLength){  super(message,maxPayloadLength);  this.show=new SimpleBooleanProperty(show);  this.count=new SimpleIntegerProperty(count);}  }
class C{  public Builder(){}  }
class C{  static Object find(String factoryId,String fallbackClassName) throws ConfigurationError {  dPrint("find factoryId =" + factoryId);  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      dPrint("found system property, value=" + systemProp);      return newInstance(systemProp,null,true);    }  } catch (  SecurityException se) {    if (debug)     se.printStackTrace();  }  try {    String factoryClassName=null;    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          String configFile=ss.getSystemProperty("java.home") + File.separator + "lib"+ File.separator+ "jaxp.properties";          File f=new File(configFile);          firstTime=false;          if (ss.doesFileExist(f)) {            dPrint("Read properties file " + f);            cacheProps.load(ss.getFileInputStream(f));          }        }      }    }    factoryClassName=cacheProps.getProperty(factoryId);    if (factoryClassName != null) {      dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);      return newInstance(factoryClassName,null,true);    }  } catch (  Exception ex) {    if (debug)     ex.printStackTrace();  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  dPrint("loaded from fallback value: " + fallbackClassName);  return newInstance(fallbackClassName,null,true);}  }
class C{  public SimpleStringProperty valueProperty(){  return this.value;}  }
class C{  public void schedule(String jobName,String poolName,String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime,int maxRetry) throws JobManagerException {  schedule(jobName,poolName,serviceName,context,startTime,frequency,interval,count,endTime,maxRetry,(String)null);}  }
class C{  public Skewness(){  moment=new ThirdMoment();  incMoment=true;}  }
class C{  public void put(int b) throws IOException {  buffer.write(b);}  }
class C{  public void initializeWith(@NonNull ViewPager viewPager){  viewPager.addOnPageChangeListener(this);  adapter=viewPager.getAdapter();  if (adapter == null)   throw new IllegalArgumentException("You must set adapter to ViewPager first");  adapter.registerDataSetObserver(datasetObserver);}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  CordovaArgs cordovaArgs=new CordovaArgs(args);  return execute(action,cordovaArgs,callbackContext);}  }
class C{  public boolean sendEquipmentAlive(final SourceDataTag aliveTag){  long currentTimestamp=System.currentTimeMillis();  SourceDataTagValue aliveTagValue;  if (aliveTag != null) {    Object value=null;    if (aliveTag.getDataType().equalsIgnoreCase("Integer")) {      value=TypeConverter.cast(Long.valueOf(currentTimestamp % Integer.MAX_VALUE).toString(),aliveTag.getDataType());    } else {      value=TypeConverter.cast(currentTimestamp,aliveTag.getDataType());    }    if (value == null) {      this.equipmentLogger.warn("sendEquipmentAlive() - Could not cast current timestamp to value type " + aliveTag.getDataType() + " of alive tag #"+ aliveTag.getId()+ " => value set to null!");    }    ValueUpdate update=new ValueUpdate(value,"Auto-generated alive value of Equipment " + confName,currentTimestamp);    aliveTagValue=aliveTag.update(update);  } else {    int ttl=DataTagConstants.TTL_FOREVER;    if (aliveTagInterval <= Integer.MAX_VALUE) {      ttl=aliveTagInterval.intValue();    }    aliveTagValue=new SourceDataTagValue(this.aliveTagId,"EQUIPMENT_ALIVE_" + confName,true,currentTimestamp,null,currentTimestamp,DataTagConstants.PRIORITY_HIGH,false,"Alive tag for Equipment " + confName,ttl);  }  this.equipmentLogger.debug("sendEquipmentAlive() - Sending equipment alive message with timestamp " + currentTimestamp);  return sendEquipmentAliveFiltered(aliveTagValue,currentTimestamp);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public void removeFreeShippingProductPromoAction(GenericPK productPromoActionPK){  if (productPromoActionPK == null)   return;  Iterator<GenericValue> fsppas=this.freeShippingProductPromoActions.iterator();  while (fsppas.hasNext()) {    if (productPromoActionPK.equals((fsppas.next()).getPrimaryKey())) {      fsppas.remove();    }  }}  }
class C{  @Nullable private static File createCompilerExecutableWrapper(File blazeCompilerExecutableFile){  try {    File blazeCompilerWrapper=FileUtil.createTempFile("blaze_compiler",".sh",true);    if (!blazeCompilerWrapper.setExecutable(true)) {      return null;    }    ImmutableList<String> compilerWrapperScriptLines=ImmutableList.of("#!/bin/bash","","# The c toolchain compiler wrapper script doesn't handle arguments files, so we","# need to move the compiler arguments from the file to the command line.","","if [ $# -ne 2 ]; then","  echo \"Usage: $0 @arg-file compile-file\"","  exit 2;","fi","","if [[ $1 != @* ]]; then","  echo \"Usage: $0 @arg-file compile-file\"","  exit 3;","fi",""," # Remove the @ before the arguments file path","ARG_FILE=${1#@}","# The actual compiler wrapper script we get from blaze","EXE=" + blazeCompilerExecutableFile.getPath(),"# Read in the arguments file so we can pass the arguments on the command line.","ARGS=`cat $ARG_FILE`","$EXE $ARGS $2");    try (PrintWriter pw=new PrintWriter(blazeCompilerWrapper)){      compilerWrapperScriptLines.forEach(null);    }     return blazeCompilerWrapper;  } catch (  IOException e) {    return null;  }}  }
class C{  private String printDFormat(int x){  return printDFormat(Integer.toString(x));}  }
class C{  public boolean isSilence(){  if (isSilence == -1) {    String silenceSymbol="_";    if (name.startsWith(silenceSymbol)) {      isSilence=1;    } else {      isSilence=0;    }  }  return isSilence == 1;}  }
class C{  @Override public final void storeData(final T object){  if (log(object) && !fallbackManager.isFallbackFileEmpty()) {    if (!this.dataRecovery.isRunning()) {      dataRecovery.setPersistenceManager(this);      new Thread(dataRecovery).start();    }  }}  }
class C{  @Override public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {  if (fGrammarPool != null) {    Grammar[] grammars=fGrammarPool.retrieveInitialGrammarSet(XMLGrammarDescription.XML_DTD);    final int length=(grammars != null) ? grammars.length : 0;    for (int i=0; i < length; ++i) {      fGrammarBucket.putGrammar((DTDGrammar)grammars[i]);    }  }  fDocLocation=locator;  fNamespaceContext=namespaceContext;  if (fDocumentHandler != null) {    fDocumentHandler.startDocument(locator,encoding,namespaceContext,augs);  }}  }
class C{  public static Style orange(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_ORANGE);  return style;}  }
class C{  public CM_VERSION_CHECK(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public boolean removeAssociation(int node,int endpoint){  int associationCnt=associations.size();  for (int index=0; index < associationCnt; index++) {    ZWaveAssociation association=associations.get(index);    if (association.getNode() == node && association.getEndpoint() == endpoint) {      associations.remove(index);      return true;    }  }  return false;}  }
class C{  protected void generateInstanceId(V type){  if (getId() == null) {    String id=getBaseType() + "-" + type.getId()+ "-"+ UUID.randomUUID().toString();    setImmutableProperty(Schema.ConceptProperty.ITEM_IDENTIFIER,id);  }}  }
class C{  private void testClass(FilterConfigInterface objUnderTest){  assertNotNull(objUnderTest.getFilterConfiguration());  assertNotNull(objUnderTest.createFilter());  assertNull(objUnderTest.createLogicFilter(null));  BinaryComparisonAbstract filter=(BinaryComparisonAbstract)objUnderTest.createFilter(null);  assertNull(filter.getExpression1());  assertNull(filter.getExpression2());  List<Expression> parameterList=new ArrayList<Expression>();  parameterList.add(ff.literal("expr1"));  filter=(BinaryComparisonAbstract)objUnderTest.createFilter(parameterList);  assertNull(filter.getExpression1());  assertNull(filter.getExpression2());  parameterList.add(ff.literal("expr2"));  parameterList.add(ff.literal(false));  filter=(BinaryComparisonAbstract)objUnderTest.createFilter(parameterList);  assertNotNull(filter.getExpression1());  assertNotNull(filter.getExpression2());  System.out.println(filter.toString());}  }
class C{  public StorageGetKeysQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static void validate(ConfigAspectBase configAspect,Service serviceConfig){  ServiceControlConfigValidator validator=new ServiceControlConfigValidator(configAspect);  validator.validateMonitoredResources(serviceConfig.getMonitoredResourcesList());  validator.validateMetrics(serviceConfig.getMetricsList());  validator.validateLogs(serviceConfig.getLogsList());  validator.validateMonitoring(serviceConfig.getMonitoring());  validator.validateLogging(serviceConfig.getLogging());  validator.validateMetricsAndLogsUsed();}  }
class C{  public JsonArray add(long value){  values.add(Json.value(value));  return this;}  }
class C{  private Map<Any2<Integer,String>,String> resolve_template_args_(Matcher matcher){  return template_.getArguments().stream().collect(Collectors.toMap(null,null));}  }
class C{  public LogicalMetric(TemplateDruidQuery templateDruidQuery,ResultSetMapper calculation,String name,String longName,String category,String description){  this.calculation=calculation;  this.name=name;  this.longName=longName;  this.category=category;  this.description=description;  this.query=templateDruidQuery;}  }
class C{  public static void o(double a){  o(a,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);}  }
class C{  public String filePath(String filePath) throws FileNotFoundException {  for (  Path path : fileDirs) {    Path newPath=path.resolve(filePath);    Path rootPath=Paths.get(dmePath).getParent();    File newFile=rootPath.resolve(newPath).toFile();    if (newFile.exists() && newFile.canRead()) {      return newPath.toString();    }  }  throw new FileNotFoundException();}  }
class C{  public boolean hasOrganisationUnits(){  return organisationUnits != null && !organisationUnits.isEmpty();}  }
class C{  public static Element addChildElementNSValue(Element element,String childElementName,String childElementValue,Document document,String nameSpaceUrl){  Element newElement=document.createElementNS(nameSpaceUrl,childElementName);  newElement.appendChild(document.createTextNode(childElementValue));  element.appendChild(newElement);  return element;}  }
class C{  public Object nextToken() throws JSONException {  char c;  char q;  StringBuffer sb;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped element");case '<':  throw syntaxError("Misplaced '<'");case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;sb=new StringBuffer();for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return sb.toString();}if (c == '&') {sb.append(nextEntity(c));} else {sb.append(c);}}default :sb=new StringBuffer();for (; ; ) {sb.append(c);c=next();if (Character.isWhitespace(c)) {return sb.toString();}switch (c) {case 0:return sb.toString();case '>':case '/':case '=':case '!':case '?':case '[':case ']':back();return sb.toString();case '<':case '"':case '\'':throw syntaxError("Bad character in a name");}}}}  }
class C{  BlockId append(String fileName,IoBuffer buffer){  try {    IoChannel fileChannel=getFileChannel(fileName);    buffer.rewind();    long newSize=fileChannel.append(buffer);    return new BlockId(fileName,newSize / BLOCK_SIZE - 1);  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public ZWaveAlarmSensorCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuff_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200813,skillcaster,skillname);}  }
class C{  public Builder withPrevKV(boolean prevKV){  this.prevKV=prevKV;  return this;}  }
class C{  public boolean commit(){  myLock.writeLock().lock();  try {    assert isValid;    if (!myComponent.getTag().isValid()) {      return finishTransaction();    }    if (!ApplicationManager.getApplication().isWriteAccessAllowed()) {      ApplicationManager.getApplication().runWriteAction((Computable<Boolean>)null);    }    boolean modified=false;    for (    PendingAttribute attribute : myPendingAttributes.values()) {      String originalValue=myOriginalValues.get(attributeKey(attribute.namespace,attribute.name));      String currentValue=myComponent.getAttribute(attribute.namespace,attribute.name);      if (!StringUtil.equals(currentValue,attribute.value)) {        if (!StringUtil.equals(originalValue,currentValue)) {          if (StringUtil.isEmpty(attribute.value)) {            continue;          } else           if (StringUtil.equals(originalValue,attribute.value)) {            continue;          }        }        modified=true;        myComponent.setAttribute(attribute.namespace,attribute.name,attribute.value);      }    }    isSuccessful=true;    finishTransaction();    return modified;  }  finally {    myLock.writeLock().unlock();  }}  }
class C{  public static Intent filter(Context context,Intent intent,String filter){  if (context == null || intent == null)   return null;  List<ResolveInfo> resInfos=context.getPackageManager().queryIntentActivities(intent,0);  if (resInfos == null || resInfos.isEmpty())   return null;  Intent resultIntent=(Intent)intent.clone();  ActivityInfo activityInfo;  for (  ResolveInfo info : resInfos) {    activityInfo=info.activityInfo;    if (activityInfo.packageName.toLowerCase().contains(filter) || activityInfo.name.toLowerCase().contains(filter)) {      resultIntent.setComponent(new ComponentName(activityInfo.packageName,activityInfo.name));      return resultIntent;    }  }  return null;}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  DisjointImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new DisjointExtended();  } else {    filter=new DisjointExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public void writeTo(OutputStream os) throws Exception {  if (type.isUtterances())   throw new IOException("Cannot write out utterance-based data type!");  if (type.isXMLType()) {    if (writer == null)     writer=new MaryNormalisedWriter();    writer.output(xmlDocument,new BufferedOutputStream(os));  } else   if (type.isTextType()) {    writeTo(new OutputStreamWriter(os,"UTF-8"));  } else {    Log.d(Mary.LOG,"Writing audio output, frame length " + audio.getFrameLength());    AudioSystem.write(audio,audioFileFormat.getType(),os);    os.flush();    os.close();  }}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  JSONObject jo=ja.optJSONObject(0);  if (jo != null) {    JSONArray names=jo.names();    if (names != null) {      return rowToString(names) + toString(names,ja);    }  }  return null;}  }
class C{  public Equipment createCacheObject(final Long equipmentId,final Properties properties){  EquipmentCacheObject equipment=new EquipmentCacheObject(equipmentId);  configureCacheObject(equipment,properties);  validateConfig(equipment);  return equipment;}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapFlightStatus && getId().equals(((AirMapFlightStatus)o).getId());}  }
class C{  public final void dropDocumentReferences(){  fDocument=null;  fDocumentImpl=null;  fDeferredDocumentImpl=null;  fDocumentType=null;  fCurrentNode=null;  fCurrentCDATASection=null;  fCurrentEntityDecl=null;  fRoot=null;}  }
class C{  public TObjectLongHashMap(int initialCapacity,float loadFactor,TObjectHashingStrategy<K> strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private void renderSelectedBody(GL2 gl,SandboxBody body){  double scale=this.simulation.getCamera().getScale();  if (Preferences.isBodyAABBEnabled()) {    this.renderAABB(gl,body);  }  RenderUtilities.pushTransform(gl);  RenderUtilities.applyTransform(gl,body.getTransform());  if (body.getFixtureCount() > 1) {    if (Preferences.isBodyStenciled()) {      RenderUtilities.outlineShapes(gl,body,6,Preferences.getSelectedColor(),scale);      body.setFillColor(gl);      body.fill(gl);    } else {      RenderUtilities.outlineShapes(gl,body,4,Preferences.getSelectedColor(),scale);      body.render(gl);    }  } else {    RenderUtilities.outlineShapes(gl,body,4,Preferences.getSelectedColor(),scale);    body.render(gl);  }  if (Preferences.isBodyNormalEnabled()) {    body.renderNormals(gl);  }  if (Preferences.isBodyRotationDiscEnabled()) {    body.renderRotationDisc(gl);  }  if (Preferences.isBodyCenterEnabled()) {    body.renderCenter(gl);  }  RenderUtilities.popTransform(gl);  if (Preferences.isBodyVelocityEnabled()) {    body.renderVelocity(gl);  }}  }
class C{  public ExtensionFileComparator(IOCase caseSensitivity){  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public AdsGetAdsQuery includeDeleted(Boolean value){  return unsafeParam("include_deleted",value);}  }
class C{  public int hashCode(){  final int PRIME=59;  int result=1;  final Object $context=this.getContexts();  result=result * PRIME + ($context == null ? 43 : $context.hashCode());  result=result * PRIME + (this.isOp() ? 79 : 97);  result=result * PRIME + (this.isIncludeGlobal() ? 79 : 97);  result=result * PRIME + (this.isIncludeGlobalWorld() ? 79 : 97);  result=result * PRIME + (this.isApplyGroups() ? 79 : 97);  result=result * PRIME + (this.isApplyGlobalGroups() ? 79 : 97);  result=result * PRIME + (this.isApplyGlobalWorldGroups() ? 79 : 97);  return result;}  }
class C{  public AudioRestoreQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static void reload(){  banList=getDAO().getAllBans();  log.info("BannedIpController loaded " + banList.size() + " IP bans.");}  }
class C{  private void updateMainPanel(){  if (myDumbService.isDumb()) {    myProgressIcon.resume();    ((CardLayout)myMainPanel.getLayout()).show(myMainPanel,PROGRESS);  } else {    myProgressIcon.suspend();    ((CardLayout)myMainPanel.getLayout()).show(myMainPanel,myShowError ? ERROR : PREVIEW);  }}  }
class C{  public boolean removeByObject(T obj){  return removeByObject_impl(obj);}  }
class C{  public boolean isASingleValue(){  return false;}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  ServicePanel servicePanel=((RemoteServiceBrowser)getViewer()).getServicePanel();  if (servicePanel != null) {    TreePath[] paths=servicePanel.getFileTree().getSelectionPaths();    if (paths != null)     servicePanel.expand(paths); else     servicePanel.expand((DefaultMutableTreeNode)servicePanel.getFileTree().getModel().getRoot());  }}  }
class C{  public boolean isZero(){  return dataElement != null && dataElement.getValueType().isNumeric() && value != null && ZERO_PATTERN.matcher(value).find();}  }
class C{  public static void assertChiSquareAccept(double[] expected,long[] observed,double alpha){  String[] labels=new String[expected.length];  for (int i=0; i < labels.length; i++) {    labels[i]=Integer.toString(i + 1);  }  assertChiSquareAccept(labels,expected,observed,alpha);}  }
class C{  protected void addLanguageVariables(BundleContext context){  Language defaultLanguage=APILocator.getLanguageAPI().getLanguage("en","US");  addLanguageVariables(context,defaultLanguage);}  }
class C{  private void scanPokemon(Bitmap pokemonImage,@NonNull Optional<String> screenShotPath){  Intent info=Pokefly.createNoInfoIntent();  try {    ScanResult res=ocr.scanPokemon(pokemonImage,trainerLevel);    if (res.isFailed()) {      Toast.makeText(Pokefly.this,getString(R.string.scan_pokemon_failed),Toast.LENGTH_SHORT).show();    }    Pokefly.populateInfoIntent(info,res,screenShotPath);  }  finally {    LocalBroadcastManager.getInstance(Pokefly.this).sendBroadcast(info);  }}  }
class C{  public static String[] flattenQueryParams(Map<String,String> queryParams){  return queryParams.entrySet().stream().flatMap(null).toArray(null);}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  public void resetCropOverlayView(){  if (initializedCropWindow) {    initCropWindow(mBitmapRect);    invalidate();  }}  }
class C{  public void insert(int offset,int[] values){  insert(offset,values,0,values.length);}  }
class C{  public boolean containsSet(TupleSet set){  return m_sets.contains(set);}  }
class C{  public boolean include(Column col,String name){  return true;}  }
class C{  public void convertToBaf(JimpleToBafContext context,List<Unit> out){  Unit u=Baf.v().newPushInst(this);  u.addAllTagsOf(context.getCurrentUnit());  out.add(u);}  }
class C{  public static void w(String tag,String msg,Throwable tr){  println(WARN,tag,msg,tr);}  }
class C{  public static Boolean isDecimalQuantityOrderAllowed(Delegator delegator,String productId,String productStoreId) throws GenericEntityException {  if (UtilValidate.isEmpty(productStoreId)) {    return Boolean.TRUE;  }  String allowDecimalStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",productStoreId).cache(true).queryOne().getString("orderDecimalQuantity");  String allowDecimalProduct=EntityQuery.use(delegator).from("Product").where("productId",productId).cache(true).queryOne().getString("orderDecimalQuantity");  if ("N".equals(allowDecimalProduct) || (UtilValidate.isEmpty(allowDecimalProduct) && "N".equals(allowDecimalStore))) {    return Boolean.FALSE;  }  return Boolean.TRUE;}  }
class C{  public GenericGF(int primitive,int size,int b){  this.primitive=primitive;  this.size=size;  this.generatorBase=b;  expTable=new int[size];  logTable=new int[size];  int x=1;  for (int i=0; i < size; i++) {    expTable[i]=x;    x*=2;    if (x >= size) {      x^=primitive;      x&=size - 1;    }  }  for (int i=0; i < size - 1; i++) {    logTable[expTable[i]]=i;  }  zero=new GenericGFPoly(this,new int[]{0});  one=new GenericGFPoly(this,new int[]{1});}  }
class C{  private String splitNameWithoutGzipExtension(String split) throws IOException {  if (split == null) {    throw new IOException("Path is not a split");  }  if (split.endsWith(".gz")) {    return split.substring(0,split.length() - 3);  }  return split;}  }
class C{  public VideoGetCommentsQueryWithExtended(VkApiClient client,UserActor actor,int videoId){  super(client,"video.getComments",GetCommentsExtendedResponse.class);  accessToken(actor.getAccessToken());  videoId(videoId);  extended(true);}  }
class C{  public LocalVarNode findLocalVarNode(Object value){  if (opts.rta()) {    value=null;  } else   if (value instanceof Local) {    return localToNodeMap.get((Local)value);  }  return valToLocalVarNode.get(value);}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getPCoA() != null && viewer.getPcoaTab().getPCoA().getNumberOfPositiveEigenValues() > 3 && !(viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1) && !(viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 2) && !(viewer.getPcoaTab().getFirstPC() == 1 && viewer.getPcoaTab().getSecondPC() == 2) && !viewer.getPcoaTab().isIs3dMode();}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  @Override public StyledLayerDescriptor create(){  return DefaultSymbols.createNewLine();}  }
class C{  public static IntBuffer createIntBuffer(IntBuffer buf,int size){  if (buf != null && buf.limit() == size) {    buf.rewind();    return buf;  }  buf=createIntBuffer(size);  return buf;}  }
class C{  public static boolean isPreserveSpace(String tagName){  return isElement(tagName,PRESERVE);}  }
class C{  public static Bitmap capture(View view){  view.buildDrawingCache();  Bitmap drawingCache=view.getDrawingCache();  if (drawingCache == null) {    return null;  }  Context context=view.getContext();  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  DisplayMetrics outMetrics=new DisplayMetrics();  wm.getDefaultDisplay().getMetrics(outMetrics);  Bitmap bitmap=Bitmap.createBitmap(drawingCache,0,0,Math.min(outMetrics.widthPixels,drawingCache.getWidth()),Math.min(outMetrics.heightPixels,drawingCache.getHeight()));  if (!view.isDrawingCacheEnabled()) {    view.destroyDrawingCache();  }  return bitmap;}  }
class C{  @Inject public AuditLogImpl(final AuditLogRepository repository,final @Named("auditlog.fetchlimit") int limit){  this.repository=repository;  this.limit=limit;}  }
class C{  public String evaluateState(final Object pValue){  boolean result=(pValue != null);  if (this.minValue != null) {    result=result && this.minValue.getClass().equals(pValue.getClass()) && minValue.compareTo(pValue) <= 0;  }  if (this.maxValue != null) {    result=result && this.maxValue.getClass().equals(pValue.getClass()) && maxValue.compareTo(pValue) >= 0;  }  return result ? AlarmCondition.ACTIVE : AlarmCondition.TERMINATE;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void processFile(FileData fileData){  EngineInitializer.initializeEngine();  initializeArcGISLicenses();  ImportMXD instance=new ImportMXD();  instance.convert(fileData);}  }
class C{  @Override public WebDriver defaultContent(){  frameSwitcher.putDefaultFramePathOnStack();  return targetLocator.defaultContent();}  }
class C{  public void validateStateTransition(Experiment.State oldState,Experiment.State newState){  if (!oldState.isStateTransitionAllowed(newState)) {    throw new InvalidExperimentStateTransitionException("Invalid switch from state \"" + oldState + "\" to invalid state \""+ newState+ "\"");  }}  }
class C{  public static long sizeOfDirectory(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return 0L;  }  long size=0;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size+=sizeOf(file);        if (size < 0) {          break;        }      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public MarketGetQueryWithExtended(VkApiClient client,UserActor actor,int ownerId){  super(client,"market.get",GetExtendedResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  extended(true);}  }
class C{  protected void processLPC(LpCoeffs coeffs,double[] residual){}  }
class C{  public ImmutableTable build(){  Map<Object,Entry> tableEntries=new HashMap<>();  for (  Map.Entry<Object,Object> e : entries.entrySet()) {    Object k=e.getKey();    tableEntries.put(e.getKey(),new Entry(e.getValue(),entries.getSuccessorOf(k)));  }  return new ImmutableTable(Collections.unmodifiableMap(tableEntries),entries.getFirstKey());}  }
class C{  protected FriendsAreFriendsQuery userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  protected void updateCache(){  int needed=argPairs.size();  predToPair=new HashMap<Unit,ValueUnitPair>(needed << 1,1.0F);  for (  ValueUnitPair vup : argPairs) {    predToPair.put(vup.getUnit(),vup);  }}  }
class C{  public boolean hasNewHeader(int position,boolean isReverseLayout){  if (indexOutOfBounds(position)) {    return false;  }  long headerId=mAdapter.getHeaderId(position);  if (headerId < 0) {    return false;  }  long nextItemHeaderId=-1;  int nextItemPosition=position + (isReverseLayout ? 1 : -1);  if (!indexOutOfBounds(nextItemPosition)) {    nextItemHeaderId=mAdapter.getHeaderId(nextItemPosition);  }  int firstItemPosition=isReverseLayout ? mAdapter.getItemCount() - 1 : 0;  return position == firstItemPosition || headerId != nextItemHeaderId;}  }
class C{  @Override public boolean lock(){  try {    if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) {      FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath));    }    lockFilePath=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile;    if (!FileFactory.isFileExist(lockFilePath,FileFactory.getFileType(location))) {      FileFactory.createNewLockFile(lockFilePath,FileFactory.getFileType(location));    }    fileOutputStream=new FileOutputStream(lockFilePath);    channel=fileOutputStream.getChannel();    try {      fileLock=channel.tryLock();    } catch (    OverlappingFileLockException e) {      return false;    }    if (null != fileLock) {      return true;    } else {      return false;    }  } catch (  IOException e) {    return false;  }}  }
class C{  private void destroyNotification(int notificationId){  if (doesNotificationExist(notificationId)) {    mNotificationManager.cancel(NOTIFICATION_NAMESPACE,notificationId);    mNotifications.delete(notificationId);    updateSharedPreferencesEntry(notificationId,true);  }}  }
class C{  public SM_QUESTION_WINDOW(int code,int senderId,int range,Object... params){  this.code=code;  this.senderId=senderId;  this.range=range;  this.params=params;}  }
class C{  public static File toFile(URL url){  if (url == null || !"file".equalsIgnoreCase(url.getProtocol())) {    return null;  } else {    String filename=url.getFile().replace('/',File.separatorChar);    filename=decodeUrl(filename);    return new File(filename);  }}  }
class C{  @Override public void revertToDefaultValue(){  populateField(defaultValue);}  }
class C{  static int applyMaskPenaltyRule4(ByteMatrix matrix){  int numDarkCells=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    byte[] arrayY=array[y];    for (int x=0; x < width; x++) {      if (arrayY[x] == 1) {        numDarkCells++;      }    }  }  int numTotalCells=matrix.getHeight() * matrix.getWidth();  int fivePercentVariances=Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells;  return fivePercentVariances * N4;}  }
class C{  @Override public Node cloneNode(boolean deep){  HTMLMapElementImpl clonedNode=(HTMLMapElementImpl)super.cloneNode(deep);  clonedNode._areas=null;  return clonedNode;}  }
class C{  public void removeUnlocked(IObjectInfo<T> oi){  removeNode((ConcurrentSLObjectInfo)oi,true);}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  private void rotateCanvasWhenMove(float x,float y){  float dx=x - mCenterX;  float dy=y - mCenterY;  float percentX=dx / mCenterX;  float percentY=dy / mCenterY;  if (percentX > 1f) {    percentX=1f;  } else   if (percentX < -1f) {    percentX=-1f;  }  if (percentY > 1f) {    percentY=1f;  } else   if (percentY < -1f) {    percentY=-1f;  }  mCanvasRotateY=mCanvasMaxRotateDegree * percentX;  mCanvasRotateX=-(mCanvasMaxRotateDegree * percentY);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Search_A_TO_SELF(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200864,skilltarget,skillcaster,skillname);}  }
class C{  public void intersection(Clip c){  if (status == INVALID)   return;  if (status == EMPTY) {    setClip(c);    status=INUSE;    return;  }  clip[0]=Math.max(clip[0],c.clip[0]);  clip[1]=Math.max(clip[1],c.clip[1]);  clip[6]=Math.min(clip[6],c.clip[6]);  clip[7]=Math.min(clip[7],c.clip[7]);}  }
class C{  public void init$Children(){  children=new ASTNode[6];  setChild(new List(),1);  setChild(new List(),2);  setChild(new Opt(),3);  setChild(new List(),5);}  }
class C{  public void infoLogResponse(Response response){  String prettyResponse=prettyResponse(response);  if (responseLogLengthLimit > 0 && prettyResponse.length() > responseLogLengthLimit) {    prettyResponse=prettyResponse.substring(0,responseLogLengthLimit) + "... (cut off for the log)";  }  logger.info("Response as string: " + prettyResponse);}  }
class C{  private void decode(byte[] data,int width,int height){  if (null == mRotatedData) {    mRotatedData=new byte[width * height];  } else {    if (mRotatedData.length < width * height) {      mRotatedData=new byte[width * height];    }  }  Arrays.fill(mRotatedData,(byte)0);  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      if (x + y * width >= data.length) {        break;      }      mRotatedData[x * height + height - y - 1]=data[x + y * width];    }  }  int tmp=width;  width=height;  height=tmp;  Result rawResult=null;  try {    PlanarYUVLuminanceSource source=new PlanarYUVLuminanceSource(mRotatedData,width,height,0,0,width,height,false);    BinaryBitmap bitmap1=new BinaryBitmap(new HybridBinarizer(source));    rawResult=mQrCodeReader.decode(bitmap1,mHints);  } catch (  ReaderException e) {  } finally {    mQrCodeReader.reset();  }  if (rawResult != null) {    Message message=Message.obtain(mActivity.getCaptureActivityHandler(),R.id.decode_succeeded,rawResult);    message.sendToTarget();  } else {    Message message=Message.obtain(mActivity.getCaptureActivityHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  DefaultAndServer(int port,int timeout,Map<String,AndServerRequestHandler> requestHandlerMap){  this.mPort=port;  this.timeout=timeout;  this.mRequestHandlerMap=requestHandlerMap;}  }
class C{  public Entry(float val,int xIndex,Object data){  this(val,xIndex);  this.mData=data;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @Override public boolean isCellEditable(EventObject evt){  if (evt instanceof MouseEvent) {    return ((MouseEvent)evt).getClickCount() >= 2;  }  return true;}  }
class C{  protected boolean checkCast(AccessPath accessPath,Type type){  if (accessPath.isStaticFieldRef())   return canCastType(type,accessPath.getFirstFieldType()); else   return canCastType(type,accessPath.getBaseType());}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0.00427280075546,0.0204117166709,0.0362756163658,0.0542113174239,0.0773195272491,0.000394468852816,0.00366559696761,0.00874649473311,0.0166712508128,0.0311798227954};}  }
class C{  private void handleRecoverableDLException(StreamOp op,final Throwable cause){  AsyncLogWriter oldWriter=null;  boolean statusChanged=false;synchronized (this) {    if (StreamStatus.INITIALIZED == status) {      oldWriter=setStreamStatus(StreamStatus.FAILED,StreamStatus.INITIALIZED,null,null,cause);      statusChanged=true;    }  }  if (statusChanged) {    Abortables.asyncAbort(oldWriter,false);    logger.error("Failed to write data into stream {} : ",name,cause);    scheduleTryAcquireOnce(0L);  }  op.fail(cause);}  }
class C{  public static boolean MIUISetStatusBarLightMode(Window window,boolean dark){  boolean result=false;  if (window != null) {    Class clazz=window.getClass();    try {      int darkModeFlag=0;      Class layoutParams=Class.forName("android.view.MiuiWindowManager$LayoutParams");      Field field=layoutParams.getField("EXTRA_FLAG_STATUS_BAR_DARK_MODE");      darkModeFlag=field.getInt(layoutParams);      Method extraFlagField=clazz.getMethod("setExtraFlags",int.class,int.class);      if (dark) {        extraFlagField.invoke(window,darkModeFlag,darkModeFlag);      } else {        extraFlagField.invoke(window,0,darkModeFlag);      }      result=true;    } catch (    Exception e) {    }  }  return result;}  }
class C{  public Token(TokenType type,int start,int length,byte pairValue){  this.type=type;  this.start=start;  this.length=length;  this.pairValue=pairValue;}  }
class C{  @deprecated public void compact(){  compact(false);}  }
class C{  public LeadsGetUsersQuery(VkApiClient client,int offerId,String secret){  super(client,"leads.getUsers",Utils.buildParametrizedType(List.class,Entry.class));  offerId(offerId);  secret(secret);}  }
class C{  public static String readFile(File file,String charsetName){  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return fileContent.toString();  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }  return fileContent.toString();}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public Matrix solve(Matrix B){  return (m == n ? (new LUDecomposition(this)).solve(B) : (new QRDecomposition(this)).solve(B));}  }
class C{  protected void unknownPacket(int id,String state){  log.warn(String.format("Unknown packet received from Game server: 0x%02X state=%s",id,state));}  }
class C{  public LongElemValPair(String name,char kind,long val){  super(name,kind);  this.val=new LongCP(val);}  }
class C{  public void onDownloadFailed(String filename){  if (getSnackbarManager() == null)   return;  String message=mContext.getString(R.string.download_failed_message,filename);  Snackbar snackbar=Snackbar.make(message,this).setSingleLine(false).setDuration(SNACKBAR_DURATION_IN_MILLISECONDS);  getSnackbarManager().showSnackbar(snackbar);}  }
class C{  ConstrainableRegistrarLeaseMap(RegistrarLease lease,long duration){  super((Registrar)((RemoteMethodControl)lease.getRegistrar()).setConstraints(ConstrainableProxyUtil.translateConstraints(((RemoteMethodControl)lease).getConstraints(),methodMappings)),lease,duration);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public RowEventTaskStatus checkRunnable(int queueIdx){  boolean incrFirstElemCnt=waitingFlag.get(queueIdx).compareAndSet(false,true);  if (incrFirstElemCnt) {    int curCnt=waitingCount.incrementAndGet();    if (curCnt == waitingFlag.size()) {      return RowEventTaskStatus.RUNNABLE;    } else {      return RowEventTaskStatus.WAITING;    }  } else {    if (_isFinished) {      return RowEventTaskStatus.ALREADY_DONE;    } else {      return RowEventTaskStatus.WAITING;    }  }}  }
class C{  public VendorOptionMarkerSymbolFactory(){  list.add(vendorOptionGeoServerShape);  list.add(vendorOptionGeoServerWeather);}  }
class C{  public ZoomToFitControl(){}  }
class C{  public static void writeStringToFile(File file,String data) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),false);}  }
class C{  public Until until(Conditional cond,Task task){  return new Until(this.executor_,cond,task);}  }
class C{  public static URL resolveLocation(String location) throws MalformedURLException {  return resolveLocation(location,null);}  }
class C{  public final void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){  getChangeSupport().addPropertyChangeListener(propertyName,listener);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_DIRECT_PORTAL_BY_SLAYER_GRADE(String value0){  return new SM_SYSTEM_MESSAGE(1400149,value0);}  }
class C{  public boolean hasTransaction(){  return (txCreated != null && txCreated.transaction != null);}  }
class C{  public PhotosGetMarketAlbumUploadServerQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"photos.getMarketAlbumUploadServer",GetMarketAlbumUploadServerResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public CommitPreparedTransactionSpaceOperationResult(){}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  com.android.base.common.io.stream.ByteArrayOutputStream output=new com.android.base.common.io.stream.ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  private static boolean isSymmetricInternal(RealMatrix matrix,double relativeTolerance,boolean raiseException){  final int rows=matrix.getRowDimension();  if (rows != matrix.getColumnDimension()) {    if (raiseException) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,rows,matrix.getColumnDimension());    } else {      return false;    }  }  for (int i=0; i < rows; i++) {    for (int j=i + 1; j < rows; j++) {      final double mij=matrix.getEntry(i,j);      final double mji=matrix.getEntry(j,i);      if (FastMath.abs(mij - mji) > FastMath.max(FastMath.abs(mij),FastMath.abs(mji)) * relativeTolerance) {        if (raiseException) {          throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SYMMETRIC_MATRIX,i,j,relativeTolerance);        } else {          return false;        }      }    }  }  return true;}  }
class C{  @Override public void onDestroy(){  Log_OC.d(TAG,"onDestroy - finishing observation of favorite files");  unregisterReceiver(mDownloadReceiver);  Iterator<FolderObserver> itOCFolder=mFolderObserversMap.values().iterator();  while (itOCFolder.hasNext()) {    itOCFolder.next().stopWatching();  }  mFolderObserversMap.clear();  mFolderObserversMap=null;  super.onDestroy();}  }
class C{  public PanControl(int mouseButton){  this(mouseButton,false);}  }
class C{  private boolean do_craft(boolean fake){  Arrays.fill(craftingGrid,null);  iteratePermutations:   for (int mode=0; mode < CellInfo.length; mode++) {    boolean any=false;    int maxCraft=MAX_CRAFT;    boolean[] containerItem=new boolean[9];    for (int i=0; i < 9; i++) {      CellInfo ci=cells[i];      if (ci == null) {        craftingGrid[i]=null;        continue;      }      ItemStack is=ci.items[ci.getBestMode(mode)];      craftingGrid[i]=is;      if (is == null) {        if (!ci.airBlock) {          continue iteratePermutations;        }        continue;      }      any=true;      Item it=is.getItem();      if (it != null && is.getMaxStackSize() == 1 && it.hasContainerItem(is) && it.getMaxDamage() > 1) {        int useCount=0;        int origDamage=is.getItemDamage();        while (useCount < maxCraft) {          if (is.getItemDamage() > is.getMaxDamage()) {            break;          }          is=it.getContainerItem(is);          if (is == null || is.stackSize == 0 || is.getItemDamage() == origDamage || is.getItem() != it) {            break;          }          useCount++;        }        if (useCount > 0) {          containerItem[i]=true;        }        maxCraft=Math.min(maxCraft,useCount);      } else {        maxCraft=Math.min(maxCraft,is.stackSize);      }    }    if (!any) {      continue iteratePermutations;    }    CraftUtil.craft3x3(root,true,true,craftingGrid);    if (!CraftUtil.craft_succeeded) {      continue iteratePermutations;    }    ArrayList<ItemStack> total=new ArrayList<ItemStack>(maxCraft + 4);    int items_used=0;    for (int craftCount=0; craftCount < maxCraft; craftCount++) {      if (craftCount == 0) {        for (int i=0; i < 9; i++) {          CellInfo ci=cells[i];          if (ci == null) {            continue;          }          ci.updateBarrelExtraction(maxCraft);        }      }      List<ItemStack> result=CraftUtil.craft3x3(root,fake,!fake && craftCount != maxCraft - 1,craftingGrid);      if (!CraftUtil.craft_succeeded) {        if (craftCount == 0) {          continue iteratePermutations;        } else {          break;        }      }      for (int i=0; i < 9; i++) {        if (containerItem[i]) {          ItemStack got=craftingGrid[i];          if (got != null) {            craftingGrid[i]=got.getItem().getContainerItem(got);          }        }      }      if (fake) {        spreadCraftingAction();        return true;      }      items_used++;      total.addAll(result);    }    for (int i=0; i < 9; i++) {      CellInfo ci=cells[i];      if (ci != null) {        ci.consume(ci.getBestMode(mode),items_used);      }    }    InvUtil.collapseItemList(total);    start.buffer=total;    return true;  }  return false;}  }
class C{  public WallSearchQueryWithExtended searchExtended(){  return new WallSearchQueryWithExtended(getClient());}  }
class C{  public boolean hasFollowUp(){  return followUp != null;}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  private static void formatNames(Iterable<List<String>> names){  if (names != null) {    for (    List<String> list : names) {      String name=list.get(0);      String[] components=new String[5];      int start=0;      int end;      int componentIndex=0;      while (componentIndex < components.length - 1 && (end=name.indexOf(';',start)) >= 0) {        components[componentIndex]=name.substring(start,end);        componentIndex++;        start=end + 1;      }      components[componentIndex]=name.substring(start);      StringBuilder newName=new StringBuilder(100);      maybeAppendComponent(components,3,newName);      maybeAppendComponent(components,1,newName);      maybeAppendComponent(components,2,newName);      maybeAppendComponent(components,0,newName);      maybeAppendComponent(components,4,newName);      list.set(0,newName.toString().trim());    }  }}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  protected void startPE(String name,boolean literal) throws IOException, XNIException {  int depth=fPEDepth;  String pName="%" + name;  if (!fSeenPEReferences) {    fSeenPEReferences=true;    fEntityManager.notifyHasPEReferences();  }  if (fValidation && !fEntityManager.isDeclaredEntity(pName)) {    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"EntityNotDeclared",new Object[]{name},XMLErrorReporter.SEVERITY_ERROR);  }  fEntityManager.startEntity(fSymbolTable.addSymbol(pName),literal);  if (depth != fPEDepth && fEntityScanner.isExternal()) {    scanTextDecl();  }}  }
class C{  @Override public boolean updateLayerStyles(GeoServerLayer layer){  if (layer == null) {    return false;  }  StyleWrapper updatedStyle=layer.getStyle();  boolean ok=false;  GeoServerRESTManager manager=GeoServerRESTManagerFactory.getManager(connection);  GeoServerRESTPublisher publisher=manager.getPublisher();  if (publisher != null) {    GSLayerEncoder layerEncoder=new GSLayerEncoder();    String defaultStyle;    if (isDefaultWorkspace(updatedStyle.getWorkspace())) {      defaultStyle=updatedStyle.getStyle();    } else {      defaultStyle=updatedStyle.getWorkspace() + ":" + updatedStyle.getStyle();    }    layerEncoder.setDefaultStyle(defaultStyle);    ok=publisher.configureLayer(layer.getLayerWorkspace(),layer.getLayerName(),layerEncoder);  }  return ok;}  }
class C{  public DistributedLogClientBuilder finagleNameStr(String finagleNameStr){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(finagleNameStr);  newBuilder._enableRegionStats=false;  return newBuilder;}  }
class C{  private boolean isLegalIndex(int i){  return !isIllegalIndex(i);}  }
class C{  public void startSubreport(String subreport){  subreports.add(subreport);  addLogEntry(new SubreportStartEntry(subreport));}  }
class C{  public synchronized Set<Cell<D,D,EdgeFunction<L>>> lookupByTarget(N target){  assert target != null;  Table<D,D,EdgeFunction<L>> table=nonEmptyLookupByTargetNode.get(target);  if (table == null)   return Collections.emptySet();  Set<Cell<D,D,EdgeFunction<L>>> res=table.cellSet();  if (res == null)   return Collections.emptySet();  return res;}  }
class C{  @Override public int read(char[] buf,int offset,int len) throws IOException {  return reader.read(buf,offset,len);}  }
class C{  public VectorialCovariance(int dimension,boolean isBiasCorrected){  sums=new double[dimension];  productsSums=new double[dimension * (dimension + 1) / 2];  n=0;  this.isBiasCorrected=isBiasCorrected;}  }
class C{  private void restoreActivityList(){  boolean isMapDirty=false;  mActivityList.clear();  Set<Integer> availableWebapps=new HashSet<Integer>();  for (int i=0; i < NUM_WEBAPP_ACTIVITIES; ++i) {    availableWebapps.add(i);  }  SharedPreferences prefs=mContext.getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);  try {    final int numSavedEntries=prefs.getInt(PREF_NUM_SAVED_ENTRIES,0);    if (numSavedEntries <= NUM_WEBAPP_ACTIVITIES) {      for (int i=0; i < numSavedEntries; ++i) {        String currentActivityIndexPref=PREF_ACTIVITY_INDEX + i;        String currentWebappIdPref=PREF_WEBAPP_ID + i;        int activityIndex=prefs.getInt(currentActivityIndexPref,i);        String webappId=prefs.getString(currentWebappIdPref,null);        ActivityEntry entry=new ActivityEntry(activityIndex,webappId);        if (availableWebapps.remove(entry.mActivityIndex)) {          mActivityList.add(entry);        } else {          isMapDirty=true;        }      }    }  } catch (  ClassCastException exception) {    mActivityList.clear();    availableWebapps.clear();    for (int i=0; i < NUM_WEBAPP_ACTIVITIES; ++i) {      availableWebapps.add(i);    }  }  for (  Integer availableIndex : availableWebapps) {    ActivityEntry entry=new ActivityEntry(availableIndex,null);    mActivityList.add(entry);    isMapDirty=true;  }  if (isMapDirty) {    storeActivityList();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ENSLAVE_PET_LOSS_EXP(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1370004,value0,num1);}  }
class C{  private MP4Config testH264() throws IllegalStateException, IOException {  if (mMode != MODE_MEDIARECORDER_API)   return testMediaCodecAPI(); else   return testMediaRecorderAPI();}  }
class C{  public DocumentNGramGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){  MinSize=iMinSize;  MaxSize=iMaxSize;  CorrelationWindow=iCorrelationWindow;  InitGraphs();}  }
class C{  public int removeByCondition(Delegator delegator,ModelEntity modelEntity,EntityCondition condition) throws GenericEntityException {  if (modelEntity == null || condition == null) {    return 0;  }  return genericDAO.deleteByCondition(delegator,modelEntity,condition);}  }
class C{  public Schema(int ncols){  m_names=new String[ncols];  m_types=new Class[ncols];  m_dflts=new Object[ncols];  m_size=0;  m_locked=false;}  }
class C{  public WheelHorizontalView(Context context,AttributeSet attrs){  this(context,attrs,R.attr.abstractWheelViewStyle);}  }
class C{  @Override public void onDestroy(){  super.onDestroy();  if (mPreview != null) {    mPreview.release();  }}  }
class C{  public AudioEditQuery artist(String value){  return unsafeParam("artist",value);}  }
class C{  @Deprecated public LinkedList<Patch> patch_make(String text1,String text2,LinkedList<Diff> diffs){  return patch_make(text1,diffs);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  if (hostIp != null && hostIp.trim().length() > 0) {    sb.append(hostIp.trim());    sb.append(":");  }  if (hostPort != null && hostPort.trim().length() > 0) {    sb.append(hostPort.trim());  }  if (sb.length() > 0) {    sb.append(":");  }  sb.append(containerPort.trim());  sb.append("/");  sb.append(protocol.toString());  return sb.toString();}  }
class C{  public DiagonalMatrix inverse(double threshold) throws MathIllegalArgumentException {  if (isSingular(threshold)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SINGULAR_MATRIX);  }  final double[] result=new double[data.length];  for (int i=0; i < data.length; i++) {    result[i]=1.0 / data[i];  }  return new DiagonalMatrix(result,false);}  }
class C{  public HaltonSequenceGenerator(final int dimension,final int[] bases,final int[] weights) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(bases);  MathUtils.checkRangeInclusive(dimension,1,bases.length);  if (weights != null && weights.length != bases.length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,weights.length,bases.length);  }  this.dimension=dimension;  this.base=bases.clone();  this.weight=weights == null ? null : weights.clone();  count=0;}  }
class C{  @Override protected void checkProperty(String propertyId) throws XMLConfigurationException {  if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.XERCES_PROPERTY_PREFIX.length();    if (suffixLength == Constants.DTD_SCANNER_PROPERTY.length() && propertyId.endsWith(Constants.DTD_SCANNER_PROPERTY)) {      return;    }    if (suffixLength == Constants.SCHEMA_LOCATION.length() && propertyId.endsWith(Constants.SCHEMA_LOCATION)) {      return;    }    if (suffixLength == Constants.SCHEMA_NONS_LOCATION.length() && propertyId.endsWith(Constants.SCHEMA_NONS_LOCATION)) {      return;    }  }  if (propertyId.startsWith(Constants.JAXP_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.JAXP_PROPERTY_PREFIX.length();    if (suffixLength == Constants.SCHEMA_SOURCE.length() && propertyId.endsWith(Constants.SCHEMA_SOURCE)) {      return;    }  }  if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();    if (suffixLength == Constants.XML_STRING_PROPERTY.length() && propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,propertyId);    }  }  super.checkProperty(propertyId);}  }
class C{  public static boolean isWifiEnabled(Context context){  ConnectivityManager mgrConn=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  TelephonyManager mgrTel=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  return ((mgrConn.getActiveNetworkInfo() != null && mgrConn.getActiveNetworkInfo().getState() == NetworkInfo.State.CONNECTED) || mgrTel.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS);}  }
class C{  public SimpleTextCategory(String sName){  super();  Dictionary=new Dictionary(sName,30);  Dictionary.AddSubStrings=false;  Dictionary.RemoveSubStrings=false;  DocumentCount=0;  Name=sName;}  }
class C{  public void updateDate(int year,int monthOfYear,int dayOfMonth){  mDatePicker.updateDate(year,monthOfYear,dayOfMonth);}  }
class C{  public BoardGetTopicsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  void freeNodeListCache(NodeListCache c){  c.next=fFreeNLCache;  fFreeNLCache=c;}  }
class C{  public static synchronized DataSourceWindowManager sharedInstance(){  if (sharedInstance == null)   sharedInstance=new DataSourceWindowManager();  return sharedInstance;}  }
class C{  public RollingFileHandler(){  super();  configure();  configureOutputStream();}  }
class C{  protected void addComponent(XMLComponent component){  if (fComponents.contains(component)) {    return;  }  fComponents.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  public static String intervalToString(Interval interval,DateTimeFormatter formatter,String separator){  return interval.getStart().toString(formatter) + separator + interval.getEnd().toString(formatter);}  }
class C{  public void addObservationProducer(IObservationProducer producer){  if (this.producers == null) {    this.producers=new ArrayList<IObservationProducer>();  }  this.producers.add(producer);}  }
class C{  public boolean removeByObject(T obj){  throw new RuntimeException("RwlSegmentedStoredList::removeByObject not supported");}  }
class C{  public OpenMapRealVector add(OpenMapRealVector v) throws MathIllegalArgumentException {  checkVectorDimensions(v.getDimension());  boolean copyThis=entries.size() > v.entries.size();  OpenMapRealVector res=copyThis ? this.copy() : v.copy();  Iterator iter=copyThis ? v.entries.iterator() : entries.iterator();  OpenIntToDoubleHashMap randomAccess=copyThis ? entries : v.entries;  while (iter.hasNext()) {    iter.advance();    int key=iter.key();    if (randomAccess.containsKey(key)) {      res.setEntry(key,randomAccess.get(key) + iter.value());    } else {      res.setEntry(key,iter.value());    }  }  return res;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public VariableArityParameterDeclarationSubstituted fullCopy(){  VariableArityParameterDeclarationSubstituted tree=(VariableArityParameterDeclarationSubstituted)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public int classify(){  return nans;}  }
class C{  public boolean equals(Datagram other){  if (!(other instanceof HnmDatagram))   return false;  HnmDatagram otherHnm=(HnmDatagram)other;  if (this.duration != otherHnm.duration)   return false;  return this.frame.equals(otherHnm.frame);}  }
class C{  private void removeHelpersSpawn(){  for (  Integer object : spawnedNpc) {    VisibleObject npc=World.getInstance().findVisibleObject(object);    if (npc != null && npc.isSpawned()) {      npc.getController().onDelete();    }  }  spawnedNpc.clear();}  }
class C{  public SingularValueDecomposition(final RealMatrix matrix){  final double[][] A;  if (matrix.getRowDimension() < matrix.getColumnDimension()) {    transposed=true;    A=matrix.transpose().getData();    m=matrix.getColumnDimension();    n=matrix.getRowDimension();  } else {    transposed=false;    A=matrix.getData();    m=matrix.getRowDimension();    n=matrix.getColumnDimension();  }  singularValues=new double[n];  final double[][] U=new double[m][n];  final double[][] V=new double[n][n];  final double[] e=new double[n];  final double[] work=new double[m];  final int nct=FastMath.min(m - 1,n);  final int nrt=FastMath.max(0,n - 2);  for (int k=0; k < FastMath.max(nct,nrt); k++) {    if (k < nct) {      singularValues[k]=0;      for (int i=k; i < m; i++) {        singularValues[k]=FastMath.hypot(singularValues[k],A[i][k]);      }      if (singularValues[k] != 0) {        if (A[k][k] < 0) {          singularValues[k]=-singularValues[k];        }        for (int i=k; i < m; i++) {          A[i][k]/=singularValues[k];        }        A[k][k]+=1;      }      singularValues[k]=-singularValues[k];    }    for (int j=k + 1; j < n; j++) {      if (k < nct && singularValues[k] != 0) {        double t=0;        for (int i=k; i < m; i++) {          t+=A[i][k] * A[i][j];        }        t=-t / A[k][k];        for (int i=k; i < m; i++) {          A[i][j]+=t * A[i][k];        }      }      e[j]=A[k][j];    }    if (k < nct) {      for (int i=k; i < m; i++) {        U[i][k]=A[i][k];      }    }    if (k < nrt) {      e[k]=0;      for (int i=k + 1; i < n; i++) {        e[k]=FastMath.hypot(e[k],e[i]);      }      if (e[k] != 0) {        if (e[k + 1] < 0) {          e[k]=-e[k];        }        for (int i=k + 1; i < n; i++) {          e[i]/=e[k];        }        e[k + 1]+=1;      }      e[k]=-e[k];      if (k + 1 < m && e[k] != 0) {        for (int i=k + 1; i < m; i++) {          work[i]=0;        }        for (int j=k + 1; j < n; j++) {          for (int i=k + 1; i < m; i++) {            work[i]+=e[j] * A[i][j];          }        }        for (int j=k + 1; j < n; j++) {          final double t=-e[j] / e[k + 1];          for (int i=k + 1; i < m; i++) {            A[i][j]+=t * work[i];          }        }      }      for (int i=k + 1; i < n; i++) {        V[i][k]=e[i];      }    }  }  int p=n;  if (nct < n) {    singularValues[nct]=A[nct][nct];  }  if (m < p) {    singularValues[p - 1]=0;  }  if (nrt + 1 < p) {    e[nrt]=A[nrt][p - 1];  }  e[p - 1]=0;  for (int j=nct; j < n; j++) {    for (int i=0; i < m; i++) {      U[i][j]=0;    }    U[j][j]=1;  }  for (int k=nct - 1; k >= 0; k--) {    if (singularValues[k] != 0) {      for (int j=k + 1; j < n; j++) {        double t=0;        for (int i=k; i < m; i++) {          t+=U[i][k] * U[i][j];        }        t=-t / U[k][k];        for (int i=k; i < m; i++) {          U[i][j]+=t * U[i][k];        }      }      for (int i=k; i < m; i++) {        U[i][k]=-U[i][k];      }      U[k][k]=1 + U[k][k];      for (int i=0; i < k - 1; i++) {        U[i][k]=0;      }    } else {      for (int i=0; i < m; i++) {        U[i][k]=0;      }      U[k][k]=1;    }  }  for (int k=n - 1; k >= 0; k--) {    if (k < nrt && e[k] != 0) {      for (int j=k + 1; j < n; j++) {        double t=0;        for (int i=k + 1; i < n; i++) {          t+=V[i][k] * V[i][j];        }        t=-t / V[k + 1][k];        for (int i=k + 1; i < n; i++) {          V[i][j]+=t * V[i][k];        }      }    }    for (int i=0; i < n; i++) {      V[i][k]=0;    }    V[k][k]=1;  }  final int pp=p - 1;  while (p > 0) {    int k;    int kase;    for (k=p - 2; k >= 0; k--) {      final double threshold=TINY + EPS * (FastMath.abs(singularValues[k]) + FastMath.abs(singularValues[k + 1]));      if (!(FastMath.abs(e[k]) > threshold)) {        e[k]=0;        break;      }    }    if (k == p - 2) {      kase=4;    } else {      int ks;      for (ks=p - 1; ks >= k; ks--) {        if (ks == k) {          break;        }        final double t=(ks != p ? FastMath.abs(e[ks]) : 0) + (ks != k + 1 ? FastMath.abs(e[ks - 1]) : 0);        if (FastMath.abs(singularValues[ks]) <= TINY + EPS * t) {          singularValues[ks]=0;          break;        }      }      if (ks == k) {        kase=3;      } else       if (ks == p - 1) {        kase=1;      } else {        kase=2;        k=ks;      }    }    k++;switch (kase) {case 1:{        double f=e[p - 2];        e[p - 2]=0;        for (int j=p - 2; j >= k; j--) {          double t=FastMath.hypot(singularValues[j],f);          final double cs=singularValues[j] / t;          final double sn=f / t;          singularValues[j]=t;          if (j != k) {            f=-sn * e[j - 1];            e[j - 1]=cs * e[j - 1];          }          for (int i=0; i < n; i++) {            t=cs * V[i][j] + sn * V[i][p - 1];            V[i][p - 1]=-sn * V[i][j] + cs * V[i][p - 1];            V[i][j]=t;          }        }      }    break;case 2:{    double f=e[k - 1];    e[k - 1]=0;    for (int j=k; j < p; j++) {      double t=FastMath.hypot(singularValues[j],f);      final double cs=singularValues[j] / t;      final double sn=f / t;      singularValues[j]=t;      f=-sn * e[j];      e[j]=cs * e[j];      for (int i=0; i < m; i++) {        t=cs * U[i][j] + sn * U[i][k - 1];        U[i][k - 1]=-sn * U[i][j] + cs * U[i][k - 1];        U[i][j]=t;      }    }  }break;case 3:{final double maxPm1Pm2=FastMath.max(FastMath.abs(singularValues[p - 1]),FastMath.abs(singularValues[p - 2]));final double scale=FastMath.max(FastMath.max(FastMath.max(maxPm1Pm2,FastMath.abs(e[p - 2])),FastMath.abs(singularValues[k])),FastMath.abs(e[k]));final double sp=singularValues[p - 1] / scale;final double spm1=singularValues[p - 2] / scale;final double epm1=e[p - 2] / scale;final double sk=singularValues[k] / scale;final double ek=e[k] / scale;final double b=((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;final double c=(sp * epm1) * (sp * epm1);double shift=0;if (b != 0 || c != 0) {  shift=FastMath.sqrt(b * b + c);  if (b < 0) {    shift=-shift;  }  shift=c / (b + shift);}double f=(sk + sp) * (sk - sp) + shift;double g=sk * ek;for (int j=k; j < p - 1; j++) {  double t=FastMath.hypot(f,g);  double cs=f / t;  double sn=g / t;  if (j != k) {    e[j - 1]=t;  }  f=cs * singularValues[j] + sn * e[j];  e[j]=cs * e[j] - sn * singularValues[j];  g=sn * singularValues[j + 1];  singularValues[j + 1]=cs * singularValues[j + 1];  for (int i=0; i < n; i++) {    t=cs * V[i][j] + sn * V[i][j + 1];    V[i][j + 1]=-sn * V[i][j] + cs * V[i][j + 1];    V[i][j]=t;  }  t=FastMath.hypot(f,g);  cs=f / t;  sn=g / t;  singularValues[j]=t;  f=cs * e[j] + sn * singularValues[j + 1];  singularValues[j + 1]=-sn * e[j] + cs * singularValues[j + 1];  g=sn * e[j + 1];  e[j + 1]=cs * e[j + 1];  if (j < m - 1) {    for (int i=0; i < m; i++) {      t=cs * U[i][j] + sn * U[i][j + 1];      U[i][j + 1]=-sn * U[i][j] + cs * U[i][j + 1];      U[i][j]=t;    }  }}e[p - 2]=f;}break;default :{if (singularValues[k] <= 0) {singularValues[k]=singularValues[k] < 0 ? -singularValues[k] : 0;for (int i=0; i <= pp; i++) {V[i][k]=-V[i][k];}}while (k < pp) {if (singularValues[k] >= singularValues[k + 1]) {break;}double t=singularValues[k];singularValues[k]=singularValues[k + 1];singularValues[k + 1]=t;if (k < n - 1) {for (int i=0; i < n; i++) {  t=V[i][k + 1];  V[i][k + 1]=V[i][k];  V[i][k]=t;}}if (k < m - 1) {for (int i=0; i < m; i++) {  t=U[i][k + 1];  U[i][k + 1]=U[i][k];  U[i][k]=t;}}k++;}p--;}break;}}tol=FastMath.max(m * singularValues[0] * EPS,FastMath.sqrt(Precision.SAFE_MIN));if (!transposed) {cachedU=MatrixUtils.createRealMatrix(U);cachedV=MatrixUtils.createRealMatrix(V);} else {cachedU=MatrixUtils.createRealMatrix(V);cachedV=MatrixUtils.createRealMatrix(U);}}  }
class C{  @Override public void flush(){}  }
class C{  protected void incrementDictionaryAccessCount(DictionaryInfo dictionaryInfo){  dictionaryInfo.incrementAccessCount();}  }
class C{  private static ResultPoint[] findVertices(BitMatrix matrix,int startRow,int startColumn){  int height=matrix.getHeight();  int width=matrix.getWidth();  ResultPoint[] result=new ResultPoint[8];  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,START_PATTERN),INDEXES_START_PATTERN);  if (result[4] != null) {    startColumn=(int)result[4].getX();    startRow=(int)result[4].getY();  }  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,STOP_PATTERN),INDEXES_STOP_PATTERN);  return result;}  }
class C{  public static boolean isAttachment(String contentDisposition){  return contentDisposition != null && contentDisposition.regionMatches(true,0,"attachment",0,10);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  synchronized void registerTextChanges(){  mIgnoreTextChanges=false;}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  public synchronized void end(){  this.active=false;  this.beginPosition=null;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ElementConstantValue fullCopy(){  ElementConstantValue tree=(ElementConstantValue)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void extractSingleHighCardDims(byte[] highCardArr,int index,int highCardinalityCount,ByteBuffer outBuffer){  ByteBuffer buff=null;  short secIndex=0;  short firstIndex=0;  int length;  if (index == highCardinalityCount - 1) {    buff=ByteBuffer.wrap(highCardArr,(index * 2) + 2,2);  } else {    buff=ByteBuffer.wrap(highCardArr,(index * 2) + 2,4);  }  firstIndex=buff.getShort();  if (index == highCardinalityCount - 1) {    secIndex=(short)highCardArr.length;  } else {    secIndex=buff.getShort();  }  length=secIndex - firstIndex;  outBuffer.position(firstIndex);  outBuffer.limit(outBuffer.position() + length);}  }
class C{  public synchronized VisualTree addTree(String group,Tree tree){  return addTree(group,tree,null);}  }
class C{  public ArrayFieldVector(Field<T> field,T[] d) throws NullArgumentException {  MathUtils.checkNotNull(d);  this.field=field;  data=d.clone();}  }
class C{  public CategoriesExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void reload(){  if (delays != null && delays.size() > 0) {    for (    Future<?> delay : delays) {      delay.cancel(false);    }  }  announcements.clear();  load();}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  public Cons(T car){  this(car,null);}  }
class C{  @Override public int read(CharBuffer target) throws IOException {  try {    beforeRead(target != null ? target.length() : 0);    int n=in.read(target);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  void recoverMessages() throws RollbackFailedException {  if (m_isQueue) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,"GSSessionImpl.recoverMessages(): Recovering messages of Queue");    }    unackedMessages.clear();    if (!isAutoAck()) {      rollbackLocalTransaction();    }  } else {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,"GSSessionImpl.recoverMessages(): Recovering messages of Topic");    }    unackedMessages.addAll(recoverMessages);    LinkedList<MessageQueueElement> temp=unackedMessages;    recoverMessages.clear();    unackedMessages=recoverMessages;    recoverMessages=temp;  }}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("hide what=selected;");}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public static UShort ushort(int value) throws NumberFormatException {  return UShort.valueOf(value);}  }
class C{  public static IntBuffer clone(IntBuffer buf){  if (buf == null) {    return null;  }  buf.rewind();  IntBuffer copy;  if (buf.isDirect()) {    copy=createIntBuffer(buf.limit());  } else {    copy=IntBuffer.allocate(buf.limit());  }  copy.put(buf);  return copy;}  }
class C{  public PhotosGetQueryWithExtended(VkApiClient client){  super(client,"photos.get",GetExtendedResponse.class);  extended(true);}  }
class C{  public boolean match(ZWaveNode node){  return match(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion());}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public MyDialog contentView(View v){  mContentView=v;  mContainer.removeAllViews();  mContainer.addView(v);  return this;}  }
class C{  public CMUClusterUnitVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){  super(name,gender,age,description,locale,domain,organization,lexicon);  setRate(150f);  setPitch(100F);  setPitchRange(12F);  this.database=database;}  }
class C{  public void dump(){  System.out.println("PList");  dumpInternal(this,1);}  }
class C{  private void makeOkPath(){  path1.reset();  int w2=getMeasuredWidth() / 2;  int h2=getMeasuredHeight() / 2;  double a=Math.cos(Math.toRadians(25)) * getRadius();  double c=Math.sin(Math.toRadians(25)) * getRadius();  double l=Math.cos(Math.toRadians(53)) * 2 * a;  double b=Math.sin(Math.toRadians(53)) * l;  double m=Math.cos(Math.toRadians(53)) * l;  path1.moveTo((float)(w2 - a),(float)(h2 - c));  path1.lineTo((float)(w2 - a + m),(float)(h2 - c + Math.sin(Math.toRadians(53)) * l));  path1.lineTo((float)(w2 + a),(float)(h2 - c));  pathMeasure1.setPath(path1,false);  mMarkOklength=pathMeasure1.getLength();}  }
class C{  private boolean isProtocolMatching(URI uri){  return this.protocolFilter == null || uri.getScheme() == null || uri.getScheme().equalsIgnoreCase(this.protocolFilter);}  }
class C{  public void run(IProgressMonitor aMonitor) throws SVNException {  ISVNRepositoryLocation repository=null;  ISVNClientAdapter svnClient=null;  logEntries=null;  IProgressMonitor monitor=Policy.monitorFor(aMonitor);  monitor.beginTask(Policy.bind("RemoteFile.getLogEntries"),100);  ISVNLogMessage[] logMessages;  try {    if (callback == null) {      logMessages=remoteResource.getLogMessages(pegRevision,revisionStart,revisionEnd,stopOnCopy,!SVNProviderPlugin.getPlugin().getSVNClientManager().isFetchChangePathOnDemand(),limit,includeMergedRevisions);    } else {      repository=remoteResource.getRepository();      svnClient=repository.getSVNClient();      if (remoteResource instanceof BaseResource) {        boolean logMessagesRetrieved=false;        ISVNLocalResource svnResource=SVNWorkspaceRoot.getSVNResourceFor(remoteResource.getResource());        if (svnResource != null) {          LocalResourceStatus status=svnResource.getStatus();          if (status != null && status.isCopied()) {            ISVNInfo info=svnClient.getInfoFromWorkingCopy(svnResource.getFile());            SVNUrl copiedFromUrl=info.getCopyUrl();            if (copiedFromUrl != null) {              svnClient.getLogMessages(copiedFromUrl,SVNRevision.HEAD,revisionStart,revisionEnd,stopOnCopy,!SVNProviderPlugin.getPlugin().getSVNClientManager().isFetchChangePathOnDemand(),limit,includeMergedRevisions,ISVNClientAdapter.DEFAULT_LOG_PROPERTIES,callback);              logMessagesRetrieved=true;              GetRemoteResourceCommand getRemoteResourceCommand=new GetRemoteResourceCommand(remoteResource.getRepository(),copiedFromUrl,SVNRevision.HEAD);              getRemoteResourceCommand.run(null);              remoteResource=getRemoteResourceCommand.getRemoteResource();            }          }        }        if (!logMessagesRetrieved)         svnClient.getLogMessages(((BaseResource)remoteResource).getFile(),pegRevision,revisionStart,revisionEnd,stopOnCopy,!SVNProviderPlugin.getPlugin().getSVNClientManager().isFetchChangePathOnDemand(),limit,includeMergedRevisions,ISVNClientAdapter.DEFAULT_LOG_PROPERTIES,callback);      } else {        svnClient.getLogMessages(remoteResource.getUrl(),pegRevision,revisionStart,revisionEnd,stopOnCopy,!SVNProviderPlugin.getPlugin().getSVNClientManager().isFetchChangePathOnDemand(),limit,includeMergedRevisions,ISVNClientAdapter.DEFAULT_LOG_PROPERTIES,callback);      }      logMessages=callback.getLogMessages();    }    if (remoteResource.isFolder()) {      logEntries=LogEntry.createLogEntriesFrom((ISVNRemoteFolder)remoteResource,logMessages,getTags(logMessages));    } else {      logEntries=LogEntry.createLogEntriesFrom((ISVNRemoteFile)remoteResource,logMessages,getTags(logMessages),getUrls(logMessages));    }  } catch (  Exception e) {    throw SVNException.wrapException(e);  } finally {    if (repository != null) {      repository.returnSVNClient(svnClient);    }    monitor.done();  }}  }
class C{  protected void copyMetaData(MuleMessage message,Object result){  if (result instanceof MessageHeader) {    Iterator names=message.getPropertyNames().iterator();    while (names.hasNext()) {      String name=(String)names.next();      Object value=message.getProperty(name);      ((MessageHeader)result).setProperty(name,value);    }  }}  }
class C{  public static ExecutorService createBackgroundExecutor(){  final ExecutorService executor=Executors.newSingleThreadExecutor(new DaemonThreadFactory(DEFAULT_BACKGROUND_EXECUTOR_NAME));  BACKGROUND_EXECUTORS.add(executor);  return executor;}  }
class C{  public static boolean equal(Entry e1,Entry e2){  if (e1 == e2)   return true;  if (e1 == null || e2 == null)   return false;  if (!equal(e1.getClass(),e2.getClass()))   return false;  Field[] fields1=getFields(e1);  Field[] fields2=getFields(e2,e1,fields1);  try {    for (int i=fields1.length; --i >= 0; ) {      if (!equal(fields1[i].get(e1),fields2[i].get(e2)))       return false;    }  } catch (  IllegalAccessException ex) {    throw new IllegalArgumentException("unexpected IllegalAccessException");  }  return true;}  }
class C{  public String makeServiceCall(String url,int method,List<NameValuePair> params){  try {    DefaultHttpClient httpClient=new DefaultHttpClient();    HttpEntity httpEntity=null;    HttpResponse httpResponse=null;    if (method == POST) {      HttpPost httpPost=new HttpPost(url);      if (params != null) {        httpPost.setEntity(new UrlEncodedFormEntity(params));      }      httpResponse=httpClient.execute(httpPost);    } else     if (method == GET) {      if (params != null) {        String paramString=URLEncodedUtils.format(params,"utf-8");        url+="?" + paramString;      }      HttpGet httpGet=new HttpGet(url);      httpResponse=httpClient.execute(httpGet);    }    httpEntity=httpResponse.getEntity();    response=EntityUtils.toString(httpEntity);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }catch (  ClientProtocolException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return response;}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public static String compileProgressSuccessAction(String progressSuccessAction,HttpServletRequest request,HttpServletResponse response){  if (progressSuccessAction.startsWith("redirect;")) {    String newAction="none";    String[] parts=progressSuccessAction.split(";",3);    if (parts.length == 3) {      Boolean fullPath=null;      Boolean secure=null;      Boolean encode=null;      String[] options=parts[1].split("\\s*,\\s*");      for (      String pair : options) {        if (pair.length() > 0) {          String[] elems=pair.split("\\s*=\\s*",2);          if (elems.length == 2) {            Boolean val=null;            if ("true".equals(elems[1])) {              val=true;            } else             if ("false".equals(elems[1])) {              val=false;            }            if (val != null) {              if ("fullPath".equalsIgnoreCase(elems[0])) {                fullPath=val;              } else               if ("secure".equalsIgnoreCase(elems[0])) {                secure=val;              } else               if ("encode".equalsIgnoreCase(elems[0])) {                encode=val;              } else {                Debug.logError("Scipio: progress success action value has invalid option name: [" + pair + "] in "+ progressSuccessAction,module);              }            } else {              Debug.logError("Scipio: progress success action value has invalid option value: [" + pair + "] in "+ progressSuccessAction,module);            }          } else {            Debug.logError("Scipio: progress success action value has invalid option: [" + pair + "] in "+ progressSuccessAction,module);          }        }      }      String target=parts[2].replaceAll("&","&amp;");      StringBuilder sb=new StringBuilder();      sb.append("redirect;");      String localRequestName=StringEscapeUtils.unescapeHtml(target);      localRequestName=UtilHttp.encodeAmpersands(localRequestName);      if (request != null && response != null) {        sb.append(RequestHandler.makeUrl(request,response,localRequestName,fullPath,secure,encode));      } else {        sb.append(localRequestName);      }      newAction=sb.toString();    } else {      Debug.logError("Scipio: progress success action value has invalid format in " + progressSuccessAction,module);    }    progressSuccessAction=newAction;  }  return progressSuccessAction;}  }
class C{  public static double distanceInf(Vector3D v1,Vector3D v2){  return v1.distanceInf(v2);}  }
class C{  public void schedule(String poolName,String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime) throws JobManagerException {  schedule(null,null,serviceName,context,startTime,frequency,interval,count,endTime,-1);}  }
class C{  public void deleteData(int offset,int count) throws DOMException {  internalDeleteData(offset,count,false);}  }
class C{  private void snapEdgesToBounds(RectF edges,RectF bounds,float margin){  if (edges.left < bounds.left + margin) {    edges.offset(bounds.left - edges.left,0);  }  if (edges.top < bounds.top + margin) {    edges.offset(0,bounds.top - edges.top);  }  if (edges.right > bounds.right - margin) {    edges.offset(bounds.right - edges.right,0);  }  if (edges.bottom > bounds.bottom - margin) {    edges.offset(0,bounds.bottom - edges.bottom);  }}  }
class C{  public AdsImportTargetContactsQuery importTargetContacts(UserActor actor,int accountId,int targetGroupId,String contacts){  return new AdsImportTargetContactsQuery(getClient(),actor,accountId,targetGroupId,contacts);}  }
class C{  public GroupsGetMembersQueryWithFields offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static Set<Interval> mergeIntervalToSet(Set<Interval> intervals,Interval intervalToMerge){  LinkedHashSet<Interval> copyOfOriginalSet=new LinkedHashSet<>(intervals);  copyOfOriginalSet.add(intervalToMerge);  return mergeIntervalSet(copyOfOriginalSet);}  }
class C{  public final short readShort(){  final int byte1=bs.readByte();  final int byte2=bs.readByte();  return (short)((byte2 << 8) + byte1);}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  private boolean isPrintable0(char ch){  if (fCharsetEncoder == null && CharsetMethods.fgNIOCharsetAvailable && !fHaveTriedCharsetEncoder) {    if (fArgsForMethod == null) {      fArgsForMethod=new Object[1];    }    try {      fArgsForMethod[0]=javaName;      Object charset=CharsetMethods.fgCharsetForNameMethod.invoke(null,fArgsForMethod);      if (((Boolean)CharsetMethods.fgCharsetCanEncodeMethod.invoke(charset,(Object[])null)).booleanValue()) {        fCharsetEncoder=CharsetMethods.fgCharsetNewEncoderMethod.invoke(charset,(Object[])null);      } else {        fHaveTriedCharsetEncoder=true;      }    } catch (    Exception e) {      fHaveTriedCharsetEncoder=true;    }  }  if (fCharsetEncoder != null) {    try {      fArgsForMethod[0]=new Character(ch);      return ((Boolean)CharsetMethods.fgCharsetEncoderCanEncodeMethod.invoke(fCharsetEncoder,fArgsForMethod)).booleanValue();    } catch (    Exception e) {      fCharsetEncoder=null;      fHaveTriedCharsetEncoder=false;    }  }  if (fCharToByteConverter == null) {    if (fHaveTriedCToB || !CharToByteConverterMethods.fgConvertersAvailable) {      return false;    }    if (fArgsForMethod == null) {      fArgsForMethod=new Object[1];    }    try {      fArgsForMethod[0]=javaName;      fCharToByteConverter=CharToByteConverterMethods.fgGetConverterMethod.invoke(null,fArgsForMethod);    } catch (    Exception e) {      fHaveTriedCToB=true;      return false;    }  }  try {    fArgsForMethod[0]=new Character(ch);    return ((Boolean)CharToByteConverterMethods.fgCanConvertMethod.invoke(fCharToByteConverter,fArgsForMethod)).booleanValue();  } catch (  Exception e) {    fCharToByteConverter=null;    fHaveTriedCToB=false;    return false;  }}  }
class C{  private static void showMatch(NlGraphics g,Match m,GuidelineHandler state){  if (m == null) {    return;  }  ConstraintPainter.paintConstraint(g,state,m);}  }
class C{  private void checkColumnBounds(int col){  if (col < 0 || col >= getColumnCount()) {    throw new IndexOutOfBoundsException("Column index is out of bounds: " + col);  }}  }
class C{  public void textDecl(String version,String encoding) throws XNIException {}  }
class C{  public NotesAddQuery privacyComment(String... value){  return unsafeParam("privacy_comment",value);}  }
class C{  static boolean isCellBusy(int _x,int _y,char _ch){  if (_x < 0 || _y < 0 || _x > (field_size - 1) || _y > (field_size - 1))   return false;  if (field[_x][_y] == _ch)   return true;  return false;}  }
class C{  @Override public void refreshUsersOrGroupsListFromServer(){  showLoadingDialog(getString(R.string.common_loading));  GetShareWithUsersAsyncTask getTask=new GetShareWithUsersAsyncTask(this);  Object[] params={getFile(),getAccount(),getStorageManager()};  getTask.execute(params);}  }
class C{  public void grant(Class cl,Principal[] principals,Permission[] permissions){  Policy p=getCurrentSubPolicy();  if (p instanceof DynamicPolicy) {    ((DynamicPolicy)p).grant(cl,principals,permissions);  } else {    throw new UnsupportedOperationException("grants not supported");  }}  }
class C{  public MeProfileView(Context context){  super(context);  this.initialize();}  }
class C{  public boolean isSameItem(Item i){  return this.getObjectId().equals(i.getObjectId()) && this.getItemId() == i.getItemId();}  }
class C{  public void reset(int code){synchronized (this.keys) {    if (this.keys.containsKey(code)) {      this.keys.get(code).reset();    }  }}  }
class C{  public void addTypeAccess(Access node){  List<Access> list=(parent == null || state == null) ? getTypeAccessListNoTransform() : getTypeAccessList();  list.addChild(node);}  }
class C{  protected MarketRestoreQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_NPC_ATTACK(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1260000,value0,num2,value1);}  }
class C{  private void mapPRO(CTTree cTree,CTNode ec,Map<CTNode,Deque<CTNode>> xsubj){  CTNode np=ec.getParent();  CTNode vp=np.getParent().getFirstLowestChainedDescendant(PTBLib.M_VP);  if (vp == null)   handleSmallClause(np,ec); else {    CTNode ante;    if ((ante=ec.getAntecedent()) != null && PTBLib.isWhPhrase(ante)) {      if (cTree.getEmptyCategoryList(ante.getEmptyCategoryIndex()).size() == 1)       mapTrace(cTree,ec);    }    addXSubject(ec,xsubj);  }}  }
class C{  public void merge(RegistrySearchResponse other){  AssertUtil.assertNotNull(other,"other");  if (other.results != null) {    numResults+=other.numResults;    if (results == null) {      results=new ArrayList<Result>();    }    results.addAll(other.results);  }}  }
class C{  public NonValidatingConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  public static long tick(){  long start=System.currentTimeMillis();  long end;  do {    try {      Thread.sleep(1);    } catch (    InterruptedException e) {      throw Throwables.propagate(e);    }    end=System.currentTimeMillis();  } while (start == end);  return end;}  }
class C{  public HistorySearchDialog(Shell shell,ISVNRemoteResource remoteResource){  super(shell,"HistorySearchDialog");  this.remoteResource=remoteResource;}  }
class C{  private void notifyUpdates(){  for (  EnvVarUpdateInterface listener : listenerList) {    listener.envVarsUpdated(this.envVarList);  }}  }
class C{  public LongFileGetterPagedMemory(File file) throws IOException {  this.file=file;  limit=file.length() / 8;  System.err.println("Opening file: " + file);  raf=new RandomAccessFile(file,"r");  data=new long[(int)((limit >>> PAGE_BITS)) + 1][];  length0=(int)(Math.min(limit,1 << PAGE_BITS));}  }
class C{  public int writeEncodedArray(EncodedValue encodedValue){  int off=data.position();  write(encodedValue.data);  return off;}  }
class C{  @Override public boolean dispatch(boolean complete) throws IOException, XNIException {  fEntityManager.setEntityHandler(null);  try {    boolean again;    do {      again=false;switch (fScannerState) {case SCANNER_STATE_DTD_INTERNAL_DECLS:{          boolean completeDTD=true;          boolean readExternalSubset=(fValidation || fLoadExternalDTD) && (fValidationManager == null || !fValidationManager.isCachedDTD());          boolean moreToScan=fDTDScanner.scanDTDInternalSubset(completeDTD,fStandalone,fHasExternalDTD && readExternalSubset);          if (!moreToScan) {            if (!fEntityScanner.skipChar(']')) {              reportFatalError("EXPECTED_SQUARE_BRACKET_TO_CLOSE_INTERNAL_SUBSET",null);            }            fEntityScanner.skipSpaces();            if (!fEntityScanner.skipChar('>')) {              reportFatalError("DoctypedeclUnterminated",new Object[]{fDoctypeName});            }            fMarkupDepth--;            if (fDoctypeSystemId != null) {              fIsEntityDeclaredVC=!fStandalone;              if (readExternalSubset) {                setScannerState(SCANNER_STATE_DTD_EXTERNAL);                break;              }            } else             if (fExternalSubsetSource != null) {              fIsEntityDeclaredVC=!fStandalone;              if (readExternalSubset) {                fDTDScanner.setInputSource(fExternalSubsetSource);                fExternalSubsetSource=null;                setScannerState(SCANNER_STATE_DTD_EXTERNAL_DECLS);                break;              }            } else {              fIsEntityDeclaredVC=fEntityManager.hasPEReferences() && !fStandalone;            }            setScannerState(SCANNER_STATE_PROLOG);            setDispatcher(fPrologDispatcher);            fEntityManager.setEntityHandler(XMLDocumentScannerImpl.this);            return true;          }          break;        }case SCANNER_STATE_DTD_EXTERNAL:{        fDTDDescription.setValues(fDoctypePublicId,fDoctypeSystemId,null,null);        fDTDDescription.setRootName(fDoctypeName);        XMLInputSource xmlInputSource=fEntityManager.resolveEntity(fDTDDescription);        fDTDScanner.setInputSource(xmlInputSource);        setScannerState(SCANNER_STATE_DTD_EXTERNAL_DECLS);        again=true;        break;      }case SCANNER_STATE_DTD_EXTERNAL_DECLS:{      boolean completeDTD=true;      boolean moreToScan=fDTDScanner.scanDTDExternalSubset(completeDTD);      if (!moreToScan) {        setScannerState(SCANNER_STATE_PROLOG);        setDispatcher(fPrologDispatcher);        fEntityManager.setEntityHandler(XMLDocumentScannerImpl.this);        return true;      }      break;    }default :{    throw new XNIException("DTDDispatcher#dispatch: scanner state=" + fScannerState + " ("+ getScannerStateName(fScannerState)+ ')');  }}} while (complete || again);} catch (MalformedByteSequenceException e) {fErrorReporter.reportError(e.getDomain(),e.getKey(),e.getArguments(),XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (CharConversionException e) {fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"CharConversionFailure",null,XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (EOFException e) {reportFatalError("PrematureEOF",null);return false;} finally {fEntityManager.setEntityHandler(XMLDocumentScannerImpl.this);}return true;}  }
class C{  public static Prop use(String fileName,String encoding){  Prop result=map.get(fileName);  if (result == null) {    result=new Prop(fileName,encoding);    map.put(fileName,result);    if (Proper.prop == null)     Proper.prop=result;  }  return result;}  }
class C{  public void removeOwnership(ServiceUnitId suname){  this.ownedServiceUnitsCache.invalidate(ServiceUnitZkUtils.path(suname));}  }
class C{  public DependentLoadingTaskSpawner(Attribute[] attributes,String threadPoolName,Object sourceAttribute,Operation datedOperation,MithraRuntimeCacheController cacheController,CacheLoaderContext cacheLoaderContext,List<AdditionalOperationBuilder> additionalOperationBuilders,DateCluster dateCluster){  this.threadPoolName=threadPoolName;  this.sourceAttribute=sourceAttribute;  this.datedOperation=datedOperation;  this.cacheController=cacheController;  this.cacheLoaderContext=cacheLoaderContext;  this.attributes=attributes;  this.dateCluster=dateCluster;  this.tupleAttribute=buildMultipleAttributes(attributes);  this.additionalOperationBuilders=additionalOperationBuilders;  this.classToLoad=this.cacheController.getClassName();  this.cacheLoaderContext.getEngine().getOrCreateThreadPool(this.threadPoolName);}  }
class C{  public static List<Entry> loadEntriesFromAssets(AssetManager am,String path){  List<Entry> entries=new ArrayList<Entry>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(am.open(path),"UTF-8"));    String line=reader.readLine();    while (line != null) {      String[] split=line.split("#");      if (split.length <= 2) {        entries.add(new Entry(Float.parseFloat(split[1]),Float.parseFloat(split[0])));      } else {        float[] vals=new float[split.length - 1];        for (int i=0; i < vals.length; i++) {          vals[i]=Float.parseFloat(split[i]);        }        entries.add(new BarEntry(Integer.parseInt(split[split.length - 1]),vals));      }      line=reader.readLine();    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        Log.e(LOG,e.toString());      }    }  }  return entries;}  }
class C{  public StreamResult(File f){  setSystemId(f.toURI().toASCIIString());}  }
class C{  public RequestHandle put(String url,ResponseHandlerInterface responseHandler){  return put(null,url,null,responseHandler);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public FloatingPointLiteral fullCopy(){  FloatingPointLiteral tree=(FloatingPointLiteral)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static IndexKey prepareDefaultStartIndexKey(SegmentProperties segmentProperties) throws KeyGenException {  IndexKey startIndexKey;  long[] dictionarySurrogateKey=new long[segmentProperties.getDimensions().size() - segmentProperties.getNumberOfNoDictionaryDimension()];  byte[] dictionaryStartMdkey=segmentProperties.getDimensionKeyGenerator().generateKey(dictionarySurrogateKey);  byte[] noDictionaryStartKeyArray=getNoDictionaryDefaultStartKey(segmentProperties);  startIndexKey=new IndexKey(dictionaryStartMdkey,noDictionaryStartKeyArray);  return startIndexKey;}  }
class C{  public void onStart(){}  }
class C{  public void initializeTabUma(TabCreationState creationState){  setTabUma(new TabUma(this,creationState,mActivity.getTabModelSelector().getModel(mActivity.isIncognito())));}  }
class C{  @Override public void updateSLDContents(String sldContents){  this.sldContents=sldContents;}  }
class C{  public void start() throws StartupException {}  }
class C{  public static String removeLast(String string,String remove){  string=StringUtils.stripEnd(string," ");  return StringUtils.removeEndIgnoreCase(string,remove);}  }
class C{  public boolean trim_clinit(){  return soot.PhaseOptions.getBoolean(options,"trim-clinit");}  }
class C{  @SuppressFBWarnings("CHROMIUM_SYNCHRONIZED_METHOD") @VisibleForTesting public synchronized void detachFromThread(){  mThreadId=null;}  }
class C{  private boolean allowUploadCrashDump(){  if (isCellularExperimentEnabled())   return isUsageAndCrashReportingEnabled();  if (isMobileNetworkCapable()) {    String option=mSharedPreferences.getString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpNeverUpload);    return option.equals(mCrashDumpAlwaysUpload) || (option.equals(mCrashDumpWifiOnlyUpload) && isWiFiOrEthernetNetwork());  }  return mSharedPreferences.getBoolean(PREF_CRASH_DUMP_UPLOAD_NO_CELLULAR,false);}  }
class C{  protected static double kernelLength2bandwidth(int kernelLength){  return (double)4 / kernelLength;}  }
class C{  @Override public WebDriver parentFrame(){  return targetLocator.parentFrame();}  }
class C{  @PUT @Path("_facade/{table}/{key}") @Consumes(MediaType.APPLICATION_JSON) @RequiresPermissions("facade|update|{table}") @Timed(name="bv.emodb.sor.DataStoreResource1.replaceFacadeContent",absolute=true) @ApiOperation(value="Creates or replaces a piece of content of a facade in the data store.",notes="Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n" + " version of the content, if it exists.  Expects a literal JSON representation\n" + " of the object.",response=SuccessResponse.class) public SuccessResponse replaceFacadeContent(@PathParam("table") String table,@PathParam("key") String key,@QueryParam("changeId") TimeUUIDParam changeIdParam,Map<String,Object> json,@QueryParam("audit") AuditParam auditParam,@QueryParam("consistency") @DefaultValue("STRONG") WriteConsistencyParam consistency,@QueryParam("tag") List<String> tags,@QueryParam("debug") BooleanParam debug,@Authenticated Subject subject){  Set<String> tagsSet=(tags == null) ? ImmutableSet.<String>of() : Sets.newHashSet(tags);  return doUpdate(table,key,changeIdParam,Deltas.literal(json),auditParam,consistency,debug,true,subject,tagsSet);}  }
class C{  public BeforeExtended(){  super(null,null);}  }
class C{  @Override public String toString(){  StringBuilder outBuffer=new StringBuilder();  String endl="\n";  outBuffer.append("StatisticalSummaryValues:").append(endl);  outBuffer.append("n: ").append(getN()).append(endl);  outBuffer.append("min: ").append(getMin()).append(endl);  outBuffer.append("max: ").append(getMax()).append(endl);  outBuffer.append("mean: ").append(getMean()).append(endl);  outBuffer.append("std dev: ").append(getStandardDeviation()).append(endl);  outBuffer.append("variance: ").append(getVariance()).append(endl);  outBuffer.append("sum: ").append(getSum()).append(endl);  return outBuffer.toString();}  }
class C{  @GET @Path("{experimentID}/assignments") @Produces(TEXT_PLAIN) @ApiOperation(value="Download a list of user assignments for a given experiment ID",notes="Shows list of all user assignments for a given experiment ID. Returns both null" + "assignments as well as bucket assignments.",response=StreamingOutput.class) @Timed public Response exportAssignments(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,@QueryParam("context") @DefaultValue("PROD") @ApiParam(value="context for the experiment, eg QA, PROD") final Context context,@QueryParam("ignoreNullBucket") @DefaultValue("false") @ApiParam(value="Filtering on the null bucket") final String ignoreStringNullBucket,@QueryParam("fromDate") @ApiParam(value="from date to download assignments") final String fromStringDate,@QueryParam("toDate") @ApiParam(value="to date to download assignments") final String toStringDate,@QueryParam("timeZone") @ApiParam(value="value of the time zone") final String timeZoneString,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader) throws ParseException {  if (authorizationHeader != null) {    Username userName=authorization.getUser(authorizationHeader);    Experiment experiment=experiments.getExperiment(experimentID);    if (experiment == null) {      throw new ExperimentNotFoundException(experimentID);    }    authorization.checkUserPermissions(userName,experiment.getApplicationName(),READ);  }  Parameters parameters=new Parameters();  Boolean ignoreNullBucket=FALSE;  if (ignoreStringNullBucket != null) {    ignoreNullBucket=Boolean.parseBoolean(ignoreStringNullBucket);  }  parameters.setTimeZone(getTimeZone(defaultTimezone));  SimpleDateFormat sdf=new SimpleDateFormat(defaultTimeFormat);  if (timeZoneString != null) {    TimeZone timeZone=getTimeZone(timeZoneString);    if (!timeZone.getID().equals(timeZoneString)) {      throw new TimeZoneFormatException(timeZoneString);    }    sdf.setTimeZone(timeZone);    parameters.setTimeZone(timeZone);  }  if (fromStringDate != null) {    try {      Date fromDate=sdf.parse(fromStringDate);      parameters.setFromTime(fromDate);    } catch (    ParseException e) {      throw new TimeFormatException(fromStringDate);    }  }  if (toStringDate != null) {    try {      Date toDate=sdf.parse(toStringDate);      parameters.setToTime(toDate);    } catch (    ParseException e) {      throw new TimeFormatException(toStringDate);    }  }  StreamingOutput streamAssignment=assignments.getAssignmentStream(experimentID,context,parameters,ignoreNullBucket);  return httpHeader.headers().header("Content-Disposition","attachment; filename =\"assignments.csv\"").entity(streamAssignment).build();}  }
class C{  static CanonicalCookie createFromStream(DataInputStream in) throws IOException {  return new CanonicalCookie(in.readUTF(),in.readUTF(),in.readUTF(),in.readUTF(),in.readUTF(),in.readLong(),in.readLong(),in.readLong(),in.readBoolean(),in.readBoolean(),in.readBoolean(),in.readInt());}  }
class C{  private void handleException(final Call call,final Exception e,final Callback callback){  if (call.isCanceled()) {    callback.onCancellation();  } else {    callback.onFailure(e);  }}  }
class C{  public void revertToOriginal(){  this.minScale=this.originalMinScale;  this.maxScale=this.originalMaxScale;  this.minimumScaleUpdated=false;  this.maximumScaleUpdated=false;}  }
class C{  public static FloatBuffer createVector2Buffer(int vertices){  FloatBuffer vBuff=createFloatBuffer(2 * vertices);  return vBuff;}  }
class C{  public FinderPatternFinder(BitMatrix image){  this(image,null);}  }
class C{  public static ExpectedCondition<Boolean> noAemAjax(){  return null;}  }
class C{  public static boolean mousePressed(){synchronized (mouseLock) {    return mousePressed;  }}  }
class C{  private boolean isReplicatedFromCentralDB(Context ctx){  return _cacheManager.isCacheExternalDB() && _cacheManager.isCentralDB() && ctx.isFromReplication();}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    put(result);    index+=2;  }  return result;}  }
class C{  public EnvIsReadOnly(){  super("Read-write Txn incompatible with read-only Env");}  }
class C{  public DistributedLogNamespaceBuilder conf(DistributedLogConfiguration conf){  this._conf=conf;  return this;}  }
class C{  public boolean isStreaming(String file){  if (file.contains("http://") || file.contains("https://") || file.contains("rtsp://")) {    return true;  } else {    return false;  }}  }
class C{  public boolean isRole(Role r){  try {    return Helper.exists(W.create("uid",this.getId()).and("rid",r.getId()),UserRole.class);  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return false;}  }
class C{  public boolean isLookingForGroup(){  return lookingForGroup;}  }
class C{  public DefaultingDictionary(V defaultValue,Map<K,V> defaultingDictionaryMap){  this.defaultValue=defaultValue;  this.putAll(defaultingDictionaryMap);}  }
class C{  @VisibleForTesting @Nullable @Contract("null -> null;!null -> !null") static String makeAbsolute(String string){  if (string == null) {    return null;  } else   if (string.trim().length() == 0) {    return SdkConstants.GRADLE_PATH_SEPARATOR;  } else   if (!string.startsWith(SdkConstants.GRADLE_PATH_SEPARATOR)) {    return SdkConstants.GRADLE_PATH_SEPARATOR + string.trim();  } else {    return string.trim();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200377,skillname);}  }
class C{  protected VideoReorderAlbumsQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  public boolean isSingleColumnResult(){  return _results.getFieldNames().length == 1;}  }
class C{  public Scoop bind(Object obj,int toppingId,View view,@Nullable ColorAdapter colorAdapter,@Nullable Interpolator interpolator){  if (colorAdapter == null) {    colorAdapter=BindingUtils.getColorAdapter(view.getClass());  }  IBinding binding=new ViewBinding(toppingId,view,colorAdapter,interpolator);  return bind(obj,toppingId,binding);}  }
class C{  public UsersSearchQuery position(String value){  return unsafeParam("position",value);}  }
class C{  private void initView(){  this.progressView=(CircularProgressView)findViewById(R.id.container_loading_view_mini_progressView);  this.retryButton=(Button)findViewById(R.id.container_loading_view_mini_retryButton);  retryButton.setOnClickListener(this);  retryButton.setVisibility(GONE);  this.refreshLayout=(BothWaySwipeRefreshLayout)findViewById(R.id.container_photo_list_swipeRefreshLayout);  if (Mysplash.getInstance().isLightTheme()) {    refreshLayout.setColorSchemeColors(ContextCompat.getColor(getContext(),R.color.colorTextContent_light));    refreshLayout.setProgressBackgroundColorSchemeResource(R.color.colorPrimary_light);  } else {    refreshLayout.setColorSchemeColors(ContextCompat.getColor(getContext(),R.color.colorTextContent_dark));    refreshLayout.setProgressBackgroundColorSchemeResource(R.color.colorPrimary_dark);  }  refreshLayout.setPermitRefresh(false);  refreshLayout.setVisibility(GONE);  this.recyclerView=(RecyclerView)findViewById(R.id.container_photo_list_recyclerView);  recyclerView.setLayoutManager(new LinearLayoutManager(getContext(),LinearLayoutManager.VERTICAL,false));  recyclerView.setAdapter(collectionsPresenter.getAdapter());  recyclerView.addOnScrollListener(scrollListener);}  }
class C{  public static void main(String[] args){  GeoServerConnection connection=new GeoServerConnection();  connection.setConnectionName("Test");  try {    connection.setUrl(new URL("http://localhost/geoserver"));    connection.setUserName("admin");    connection.setPassword("geoserver");    RenderTransformationManager.getInstance().getRenderTransform(connection);  } catch (  MalformedURLException e) {    e.printStackTrace();  }}  }
class C{  public void show(){  mDialog.show();  mUsernameView.requestFocus();}  }
class C{  public static synchronized void stopC2monClient(){  ((ConfigurableApplicationContext)context).close();}  }
class C{  public static void sleep(double durationInSec){  try {    TimeUnit.SECONDS.sleep((long)(durationInSec));  } catch (  InterruptedException e) {    LOG.error("Sleep was interrupted",e);  }}  }
class C{  private void removeTemporaryTrivialEdges(PhyloGraph graph) throws NotOwnerException {  EdgeSet tempEdges=new EdgeSet(graph);  for (Edge e=graph.getFirstEdge(); e != null; e=graph.getNextEdge(e)) {    if (graph.getSplit(e) == -1)     tempEdges.add(e);  }  for (  Edge e : tempEdges) {    Node v, w;    if (graph.getDegree(graph.getSource(e)) == 1) {      v=graph.getSource(e);      w=graph.getTarget(e);    } else {      w=graph.getSource(e);      v=graph.getTarget(e);    }    for (    int t : graph.getNode2Taxa(v)) {      graph.setNode2Taxa(w,t);      graph.setTaxon2Node(t,w);    }    if (graph.getLabel(w) != null && graph.getLabel(w).length() > 0)     graph.setLabel(w,graph.getLabel(w) + ", " + graph.getLabel(v)); else     graph.setLabel(w,graph.getLabel(v));    graph.getNode2Taxa(v).clear();    graph.setLabel(v,null);    graph.deleteNode(v);  }}  }
class C{  public static <T>Set<T> toSet(T obj1,T obj2,T obj3){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  theSet.add(obj2);  theSet.add(obj3);  return theSet;}  }
class C{  public static boolean isConfigured(){  return DB.isConfigured();}  }
class C{  @Override public boolean isEmpty(){  for (; ; ) {    Node<E> node=top.get();    if (node == null) {      return true;    }    E e=node.get();    if (e == null) {      top.compareAndSet(node,node.next);    } else {      return false;    }  }}  }
class C{  public boolean isPublic(){  if (!isFramework()) {    return true;  }  IAndroidTarget target=myManager.getTarget();  if (target == null) {    LOG.error("Unable to get IAndroidTarget.");    return false;  }  AndroidTargetData androidTargetData=AndroidTargetData.getTargetData(target,myManager.getModule());  if (androidTargetData == null) {    LOG.error("Unable to get AndroidTargetData.");    return false;  }  return androidTargetData.isResourcePublic(ResourceType.STYLE.getName(),getName());}  }
class C{  public final boolean canSetFloat(String field){  return m_table.canSetFloat(field);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysResist_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200636,skillcaster,skillname);}  }
class C{  long parseBytes(String freeSpace,String path) throws IOException {  try {    long bytes=Long.parseLong(freeSpace);    if (bytes < 0) {      throw new IOException("Command line '" + DF + "' did not find free space in response "+ "for path '"+ path+ "'- check path is valid");    }    return bytes;  } catch (  NumberFormatException ex) {    throw new IOExceptionWithCause("Command line '" + DF + "' did not return numeric data as expected "+ "for path '"+ path+ "'- check path is valid",ex);  }}  }
class C{  public boolean isSuccess(){  return this.status != null && this.status.equals(ConfigConstants.Status.OK);}  }
class C{  public List<CodeMatchResult> matchResults(List<String> code,List<String> matchTerms,boolean highlightLine){  List<CodeMatchResult> resultLines=findMatchingLines(code,matchTerms,highlightLine);  List<CodeMatchResult> newResultLines=new ArrayList<>();  resultLines.sort(null);  for (int i=0; i < resultLines.size(); i++) {    CodeMatchResult match=resultLines.get(i);    match.setLineNumber(match.getLineNumber() + 1);    if (!resultExists(newResultLines,match.getLineNumber())) {      newResultLines.add(match);    }    CodeMatchResult resultBefore=getResultByLineNumber(resultLines,match.getLineNumber() - 1);    CodeMatchResult resultAfter=getResultByLineNumber(resultLines,match.getLineNumber() + 1);    if (resultBefore != null && !resultExists(newResultLines,match.getLineNumber() - 1)) {      newResultLines.add(resultBefore);    }    if (resultAfter != null && !resultExists(newResultLines,match.getLineNumber() + 1)) {      newResultLines.add(resultAfter);    }    if (newResultLines.size() >= MATCHLINES) {      break;    }  }  newResultLines.sort(null);  if (!newResultLines.isEmpty()) {    newResultLines.get(0).addBreak=false;    return newResultLines;  }  return null;}  }
class C{  public SearchPredicate(String group,boolean includeAllByDefault){  super(group);  m_incEmpty=new BooleanLiteral(includeAllByDefault);  paramCount=2;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_MEMBER'";  db.execSQL(sql);}  }
class C{  @Override public boolean isEntityUnparsed(String name){  return (fUnparsedEntityChecking) ? super.isEntityUnparsed(name) : true;}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  @Override public void mousePressed(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());    mousePressed=true;  }}  }
class C{  public static <T,D extends Number>D addAndGet(GigaSpace gigaSpace,IdQuery<T> idQuery,String path,D delta){  return addAndGet(gigaSpace,idQuery,path,delta,ChangeModifiers.NONE,0,TimeUnit.MILLISECONDS);}  }
class C{  public XMLParser(final Class classToBeBound) throws XMLException {  try {    JAXBContext jc=JAXBContext.newInstance(classToBeBound.getPackage().getName());    marshaller=jc.createMarshaller();    unmarshaller=jc.createUnmarshaller();  } catch (  JAXBException e) {    throw new XMLException("Cannot instantiate marshaller/unmarshaller for " + classToBeBound,e);  }}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  @Override public final void writeInt(int v) throws IOException {  work[0]=(byte)v;  work[1]=(byte)(v >> 8);  work[2]=(byte)(v >> 16);  work[3]=(byte)(v >> 24);  dis.write(work,0,4);}  }
class C{  public void addImplements(Access node){  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();  list.addChild(node);}  }
class C{  @Override public void startNormalization(Service.Builder builder){}  }
class C{  public EGLSurface createWindowSurface(Object surface){  if (!(surface instanceof Surface) && !(surface instanceof SurfaceTexture)) {    throw new RuntimeException("invalid surface: " + surface);  }  int[] surfaceAttribs={EGL14.EGL_NONE};  EGLSurface eglSurface=EGL14.eglCreateWindowSurface(eGLDisplay,eGLConfig,surface,surfaceAttribs,0);  checkEglError("eglCreateWindowSurface");  if (eglSurface == null) {    throw new RuntimeException("surface was null");  }  return eglSurface;}  }
class C{  private static Instance makeInstance(String text,Instances data){  DenseInstance instance=new DenseInstance(2);  Attribute messageAtt=data.attribute("text");  instance.setValue(messageAtt,messageAtt.addStringValue(text));  instance.setDataset(data);  return instance;}  }
class C{  PurityIntraproceduralAnalysis(UnitGraph g,AbstractInterproceduralAnalysis inter){  super(g);  this.inter=inter;  doAnalysis();}  }
class C{  public static boolean isDoLog(){  return doLog;}  }
class C{  public VideoGetUserVideosQuery(VkApiClient client,UserActor actor){  super(client,"video.getUserVideos",GetUserVideosResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  @Override public void clear(){  datastore=new byte[this.totalNumberOfElements * this.sizeOfEachElement];}  }
class C{  private void loadMappedBinary(FileInputStream is) throws IOException {  FileChannel fc=is.getChannel();  MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());  bb.load();  loadDatabase(bb);  is.close();}  }
class C{  public boolean gotoNext(){  if (currentIterator == null) {    gotoFirst();  } else   if (currentIterator.hasNext())   currentId=currentIterator.next(); else {    currentIterator=null;    currentId=null;  }  return isCurrentSet();}  }
class C{  public static boolean isConcreteType(@NotNull Element element){  return isConcreteType(element.asType());}  }
class C{  public Message fromJson(TransportMessage message){  if (message == null)   throw new IllegalArgumentException("Message can not be null");  return gson.fromJson(message.getContent(),Message.class);}  }
class C{  public IllegalPluginAccessException(){}  }
class C{  @Override public Object clone(){  return new RowNumNode(startIndex,endIndex);}  }
class C{  private void createResultLayout(){  createExtendedResultEvolutionSpinner();  createExtendedResultLevelSeekbar();}  }
class C{  public Builder maxWidth(Number maxWidth){  this.maxWidth=maxWidth;  return this;}  }
class C{  public static void writeChar(PacketBuffer buf,char value){  buf.writeChar(value);}  }
class C{  public BackgroundPainter(Image image,boolean fixed,boolean tile){  m_img=image;  MediaTracker mt=new MediaTracker(new Container());  mt.addImage(m_img,0);  try {    mt.waitForID(0);  } catch (  Exception e) {    e.printStackTrace();  }  mt.removeImage(m_img,0);  m_fixed=fixed;  m_tiled=tile;}  }
class C{  public void print(){  System.out.println("-----");  center.print(10,10);}  }
class C{  public DataShapeAction(String group,String field,int[] palette){  super(group,NO_SHAPE);  m_dataField=field;  m_palette=palette;}  }
class C{  private void generatePaper(IDexUnit unit){  Map<String,String> map=new HashMap<String,String>();  Set<String> set=new HashSet<String>();  String desktopPath=System.getProperty("user.home") + "/Desktop";  File classMapping=new File(desktopPath + "/classMapping.txt");  File mapping=new File(desktopPath + "/mapping.txt");  File unmatchedClasses=new File(desktopPath + "/unmatchedClasses.txt");  File conclusion=new File(desktopPath + "/conclusion.txt");  File wrongMatchedClasses=new File(desktopPath + "/wrongMatchedClasses.txt");  double totalClasses=0;  double matchedClasses=0;  double correctClasses=0;  try (BufferedReader classMappingReader=new BufferedReader(new FileReader(classMapping));BufferedReader mappingReader=new BufferedReader(new FileReader(mapping));BufferedWriter unmatchedClassesWriter=new BufferedWriter(new FileWriter(unmatchedClasses));BufferedWriter conclusionWriter=new BufferedWriter(new FileWriter(conclusion));BufferedWriter wrongMatchedClassesWriter=new BufferedWriter(new FileWriter(wrongMatchedClasses))){    String curLine=new String();    while ((curLine=mappingReader.readLine()) != null) {      if (!curLine.startsWith(" ")) {        totalClasses++;        String[] curLines=curLine.split(" -> ");        map.put(curLines[1],curLines[0]);      }    }    String curLine1=new String();    while ((curLine1=classMappingReader.readLine()) != null) {      matchedClasses++;      String[] curLines=curLine1.split(" -> ");      if (map.containsKey(curLines[1])) {        String target=map.get(curLines[1]).substring(map.get(curLines[1]).lastIndexOf(".") + 1);        String own=curLines[0].substring(curLines[0].lastIndexOf(".") + 1);        if (target.equals(own)) {          correctClasses++;          map.remove(curLines[1]);        } else {          set.add(curLine1);        }      } else {        set.add(curLine1);      }    }    for (    Map.Entry<String,String> entry : map.entrySet()) {      unmatchedClassesWriter.write(entry.getValue() + "\t" + entry.getKey()+ "\n");    }    for (    String e : set) {      wrongMatchedClassesWriter.write(e + "\n");    }    conclusionWriter.write("The number of All Signatures: " + "\n");    conclusionWriter.write("Total class number: " + totalClasses + "\n");    conclusionWriter.write("Matched class number: " + matchedClasses + "\t"+ "Percentage: "+ (matchedClasses / totalClasses)+ "\n");    conclusionWriter.write("Correctly matched class number: " + correctClasses + "\t"+ "Percentage: "+ (correctClasses / totalClasses)+ "\n");    conclusionWriter.write("Correctly matched percentage: " + (correctClasses / matchedClasses) + "\n");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean isAnnotated(){  return isSource || isSink || isNeitherNor;}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowAxes();}  }
class C{  public void validate(Map<String,Object> context,String mode,Locale locale) throws ServiceValidationException {  Map<String,String> requiredInfo=new HashMap<String,String>();  Map<String,String> optionalInfo=new HashMap<String,String>();  boolean verboseOn=Debug.verboseOn();  if (verboseOn)   Debug.logVerbose("[ModelService.validate] : {" + this.name + "} : Validating context - "+ context,module);  if (mode.equals(OUT_PARAM) && context != null && context.containsKey(RESPONSE_MESSAGE)) {    if (RESPOND_ERROR.equals(context.get(RESPONSE_MESSAGE)) || RESPOND_FAIL.equals(context.get(RESPONSE_MESSAGE))) {      if (verboseOn)       Debug.logVerbose("[ModelService.validate] : {" + this.name + "} : response was an error, not validating.",module);      return;    }  }  for (  ModelParam modelParam : this.contextParamList) {    if ("INOUT".equals(modelParam.mode) || mode.equals(modelParam.mode)) {      if (modelParam.optional) {        optionalInfo.put(modelParam.name,modelParam.type);      } else {        requiredInfo.put(modelParam.name,modelParam.type);      }    }  }  Map<String,Object> requiredTest=new HashMap<String,Object>();  Map<String,Object> optionalTest=new HashMap<String,Object>();  if (context == null)   context=new HashMap<String,Object>();  requiredTest.putAll(context);  List<String> requiredButNull=new LinkedList<String>();  List<String> keyList=new LinkedList<String>();  keyList.addAll(requiredTest.keySet());  for (  String key : keyList) {    Object value=requiredTest.get(key);    if (!requiredInfo.containsKey(key)) {      requiredTest.remove(key);      optionalTest.put(key,value);    } else     if (value == null) {      requiredButNull.add(key);    }  }  if (requiredButNull.size() > 0) {    List<String> missingMsg=new LinkedList<String>();    for (    String missingKey : requiredButNull) {      String message=this.getParam(missingKey).getPrimaryFailMessage(locale);      if (message == null) {        String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"ModelService.following_required_parameter_missing",locale);        message=errMsg + " [" + this.name+ "."+ missingKey+ "]";      }      missingMsg.add(message);    }    throw new ServiceValidationException(missingMsg,this,requiredButNull,null,mode);  }  if (verboseOn) {    StringBuilder requiredNames=new StringBuilder();    for (    String key : requiredInfo.keySet()) {      if (requiredNames.length() > 0) {        requiredNames.append(", ");      }      requiredNames.append(key);    }    Debug.logVerbose("[ModelService.validate] : required fields - " + requiredNames,module);    Debug.logVerbose("[ModelService.validate] : {" + name + "} : ("+ mode+ ") Required - "+ requiredTest.size()+ " / "+ requiredInfo.size(),module);    Debug.logVerbose("[ModelService.validate] : {" + name + "} : ("+ mode+ ") Optional - "+ optionalTest.size()+ " / "+ optionalInfo.size(),module);  }  try {    validate(requiredInfo,requiredTest,true,this,mode,locale);    validate(optionalInfo,optionalTest,false,this,mode,locale);  } catch (  ServiceValidationException e) {    Debug.logError("[ModelService.validate] : {" + name + "} : ("+ mode+ ") Required test error: "+ e.toString(),module);    throw e;  }  if ("IN".equals(mode)) {    List<String> errorMessageList=new LinkedList<String>();    for (    ModelParam modelParam : this.contextInfo.values()) {      if (context.get(modelParam.name) != null && ("String".equals(modelParam.type) || "java.lang.String".equals(modelParam.type)) && !"any".equals(modelParam.allowHtml) && ("INOUT".equals(modelParam.mode) || "IN".equals(modelParam.mode))) {        String value=(String)context.get(modelParam.name);        UtilCodec.checkStringForHtmlStrictNone(modelParam.name,value,errorMessageList);      }    }    if (errorMessageList.size() > 0) {      throw new ServiceValidationException(errorMessageList,this,mode);    }  }}  }
class C{  protected LazyNode(byte type,int startIndex){  this.startIndex=startIndex;  this.type=type;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void registerSupportNewProtocol(String serviceAddress,String serviceName,boolean support) throws RegistryException {  if (registry != null) {    registry.setSupportNewProtocol(serviceAddress,serviceName,support);  }  monitor.logEvent("PigeonService.protocol",serviceName,"support=" + support);}  }
class C{  public static double[] pageRank(MatrixInterface preparedMatrix,int maxIteration){  double[] init=new double[preparedMatrix.getRowsCount()];  for (int i=0; i != init.length; i++)   init[i]=1.0;  return pageRank(preparedMatrix,maxIteration,DEFAULT_D,init);}  }
class C{  public AemContentFinder clickMosaicView(){  getCurrentTab().clickMosaicView();  return this;}  }
class C{  public Eig(Zmat A) throws JampackException {  int i, j, k;  double norm, scale;  Z z, d;  A.getProperties();  if (A.nr != A.nc) {    throw new JampackException("Matrix not square.");  }  int n=A.nr;  Schur S=new Schur(A);  Zmat T=S.T;  D=new Zdiagmat(T);  norm=Norm.fro(A);  X=new Zmat(n,n);  for (k=n - 1; k >= 0; k--) {    d=T.get0(k,k);    X.re[k][k]=1.0;    X.im[k][k]=0.0;    for (i=k - 1; i >= 0; i--) {      X.re[i][k]=-T.re[i][k];      X.im[i][k]=-T.im[i][k];      for (j=i + 1; j < k; j++) {        X.re[i][k]=X.re[i][k] - T.re[i][j] * X.re[j][k] + T.im[i][j] * X.im[j][k];        X.im[i][k]=X.im[i][k] - T.re[i][j] * X.im[j][k] - T.im[i][j] * X.re[j][k];      }      z=T.get0(i,i);      z.Minus(z,d);      if (z.re == 0.0 && z.im == 0.0) {        z.re=1.0e-16 * norm;      }      z.Div(X.get0(i,k),z);      X.put0(i,k,z);    }    scale=1.0 / Norm.fro(X,X.bx,X.rx,X.bx + k,X.bx + k);    for (i=0; i < X.nr; i++) {      X.re[i][k]=scale * X.re[i][k];      X.im[i][k]=scale * X.im[i][k];    }  }  X=Times.o(S.U,X);}  }
class C{  public void drawScreen(int par1,int par2,float par3){  if (reinit) {    initGui();    reinit=false;  }  this.guiList.drawScreen(par1,par2,par3);  super.drawScreen(par1,par2,par3,false);}  }
class C{  public static void e(String tag,String msg){  if (isDebug) {    Log.e(tag,msg);  }}  }
class C{  @Override public float floatValue(){  return (float)doubleValue();}  }
class C{  public void allow(PermissionFlag flag,Identity<?> identity){  strictPermission.computeIfAbsent(flag,null).put(identity,DIRECT_ALLOW);}  }
class C{  public boolean dynamic_order(){  return soot.PhaseOptions.getBoolean(options,"dynamic-order");}  }
class C{  public static String upperFirstChar(String string){  if (string == null)   return null;  if (string.length() <= 1)   return string.toLowerCase();  StringBuilder sb=new StringBuilder(string);  sb.setCharAt(0,Character.toUpperCase(sb.charAt(0)));  return sb.toString();}  }
class C{  public final TestSubscriber<T> assertNonFuseableSource(){  if (qs != null) {    throw new AssertionError("Upstream was Fuseable");  }  return this;}  }
class C{  public static boolean isEmpty(Object o){  return ObjectType.isEmpty(o);}  }
class C{  private InvocationConstraints(InvocationConstraint[] reqs,int reqidx,InvocationConstraint[] prefs,int prefidx,int rel){  this.reqs=reqs;  this.prefs=prefs;  reduce(reqidx,prefidx);  this.rel=rel;}  }
class C{  public Object clone(){  return new NewStaticLock(sc);}  }
class C{  private SolrCluster createCluster(RetrieveAndRank service){  String cluster_size=System.getenv("CLUSTER_SIZE");  SolrClusterOptions options=new SolrClusterOptions(Constants.CLUSTER_NAME,cluster_size == null ? null : Integer.valueOf(cluster_size));  SolrCluster cluster=(SolrCluster)service.createSolrCluster(options).execute();  logger.info(Messages.getString("SetupThread.SOLR_CLUSTER") + cluster);  while (cluster.getStatus() == Status.NOT_AVAILABLE) {    try {      Thread.sleep(10000);    } catch (    InterruptedException e) {      logger.error(e.getMessage());    }    cluster=(SolrCluster)service.getSolrCluster(cluster.getId()).execute();    logger.info(Messages.getString("SetupThread.SOLR_CLUSTER_STATUS") + cluster.getStatus());  }  try {    Thread.sleep(30000);  } catch (  InterruptedException e) {    logger.error(e.getMessage());  }  logger.info(Messages.getString("SetupThread.SOLR_CLUSTERS") + service.getSolrClusters().execute());  return cluster;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_INTERVAL_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200646,skillcaster,num0,skillname);}  }
class C{  public AggregationSet average(String path){  return add(new AverageAggregator().setPath(path));}  }
class C{  public void sendFTPCommand(String command) throws IOException {  writer.writeLine(command);  for (Iterator iter=communicationListeners.iterator(); iter.hasNext(); ) {    FTPCommunicationListener l=(FTPCommunicationListener)iter.next();    l.sent(command);  }}  }
class C{  public static final String export(String name,Simulation simulation){  StringBuilder sb=new StringBuilder();  Map<UUID,String> idNameMap=new HashMap<UUID,String>();  World world=simulation.getWorld();  sb.append("import java.util.*;").append(NEW_LINE).append("import org.dyn4j.collision.*;").append(NEW_LINE).append("import org.dyn4j.collision.broadphase.*;").append(NEW_LINE).append("import org.dyn4j.collision.continuous.*;").append(NEW_LINE).append("import org.dyn4j.collision.manifold.*;").append(NEW_LINE).append("import org.dyn4j.collision.narrowphase.*;").append(NEW_LINE).append("import org.dyn4j.dynamics.*;").append(NEW_LINE).append("import org.dyn4j.dynamics.joint.*;").append(NEW_LINE).append("import org.dyn4j.geometry.*;").append(NEW_LINE).append(NEW_LINE).append("// ").append(world.getUserData()).append(NEW_LINE).append("// generated for dyn4j v").append(Version.getVersion()).append(NEW_LINE).append("public class ").append(name).append(" { ").append(NEW_LINE).append(NEW_LINE).append(TAB1).append("private ").append(name).append("() {}").append(NEW_LINE).append(NEW_LINE).append(TAB1).append("public static final void setup(World world) {").append(NEW_LINE).append(TAB2).append("Settings settings = world.getSettings();").append(NEW_LINE);  sb.append(export(world.getSettings()));  sb.append(NEW_LINE);  Vector2 g=world.getGravity();  if (g == World.EARTH_GRAVITY || g.equals(0.0,-9.8)) {  } else   if (g == World.ZERO_GRAVITY || g.isZero()) {    sb.append(TAB2).append("world.setGravity(World.ZERO_GRAVITY);").append(NEW_LINE);  } else {    sb.append(TAB2).append("world.setGravity(").append(export(g)).append(");").append(NEW_LINE);  }  BroadphaseDetector<?,?> bpd=world.getBroadphaseDetector();  NarrowphaseDetector npd=world.getNarrowphaseDetector();  if (bpd instanceof Sap) {    sb.append(TAB2).append("world.setBroadphaseDetector(new Sap<Body, BodyFixture>());").append(NEW_LINE);  } else   if (bpd instanceof DynamicAABBTree) {  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),bpd.getClass().getName()));  }  if (npd instanceof Sat) {    sb.append(TAB2).append("world.setNarrowphaseDetector(new Sat());").append(NEW_LINE);  } else   if (npd instanceof Gjk) {  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),npd.getClass().getName()));  }  Bounds bounds=world.getBounds();  if (bounds instanceof NullBounds || bounds == null) {  } else   if (bounds instanceof AxisAlignedBounds) {    AxisAlignedBounds aab=(AxisAlignedBounds)bounds;    double w=aab.getWidth();    double h=aab.getHeight();    sb.append(NEW_LINE).append(TAB2).append("AxisAlignedBounds bounds = new AxisAlignedBounds(").append(w).append(", ").append(h).append(");").append(NEW_LINE);    if (!aab.getTranslation().isZero()) {      sb.append(TAB2).append("bounds.translate(").append(export(aab.getTranslation())).append(");").append(NEW_LINE);    }    sb.append(TAB2).append("world.setBounds(bounds);").append(NEW_LINE).append(NEW_LINE);  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),bounds.getClass().getName()));  }  int bSize=world.getBodyCount();  for (int i=1; i < bSize + 1; i++) {    SandboxBody body=(SandboxBody)world.getBody(i - 1);    idNameMap.put(body.getId(),"body" + i);    Mass mass=body.getMass();    sb.append(TAB2).append("// ").append(body.getUserData()).append(NEW_LINE).append(TAB2).append("Body body").append(i).append(" = new Body();").append(NEW_LINE);    int fSize=body.getFixtureCount();    for (int j=0; j < fSize; j++) {      BodyFixture bf=body.getFixture(j);      sb.append(TAB2).append("{// ").append(bf.getUserData()).append(NEW_LINE).append(export(bf.getShape(),TAB3)).append(TAB3).append("BodyFixture bf = new BodyFixture(c);").append(NEW_LINE);      if (bf.isSensor()) {        sb.append(TAB3).append("bf.setSensor(").append(bf.isSensor()).append(");").append(NEW_LINE);      }      if (bf.getDensity() != BodyFixture.DEFAULT_DENSITY) {        sb.append(TAB3).append("bf.setDensity(").append(bf.getDensity()).append(");").append(NEW_LINE);      }      if (bf.getFriction() != BodyFixture.DEFAULT_FRICTION) {        sb.append(TAB3).append("bf.setFriction(").append(bf.getFriction()).append(");").append(NEW_LINE);      }      if (bf.getRestitution() != BodyFixture.DEFAULT_RESTITUTION) {        sb.append(TAB3).append("bf.setRestitution(").append(bf.getRestitution()).append(");").append(NEW_LINE);      }      sb.append(export(bf.getFilter(),TAB3)).append(TAB3).append("body").append(i).append(".addFixture(bf);").append(NEW_LINE).append(TAB2).append("}").append(NEW_LINE);    }    if (Math.abs(body.getTransform().getRotation()) > Epsilon.E) {      sb.append(TAB2).append("body").append(i).append(".rotate(Math.toRadians(").append(Math.toDegrees(body.getTransform().getRotation())).append("));").append(NEW_LINE);    }    if (!body.getTransform().getTranslation().isZero()) {      sb.append(TAB2).append("body").append(i).append(".translate(").append(export(body.getTransform().getTranslation())).append(");").append(NEW_LINE);    }    if (!body.getLinearVelocity().isZero()) {      sb.append(TAB2).append("body").append(i).append(".setVelocity(").append(export(body.getLinearVelocity())).append(");").append(NEW_LINE);    }    if (Math.abs(body.getAngularVelocity()) > Epsilon.E) {      sb.append(TAB2).append("body").append(i).append(".setAngularVelocity(Math.toRadians(").append(Math.toDegrees(body.getAngularVelocity())).append("));").append(NEW_LINE);    }    if (!body.getAccumulatedForce().isZero()) {      sb.append(TAB2).append("body").append(i).append(".applyForce(").append(export(body.getAccumulatedForce())).append(");").append(NEW_LINE);    }    if (Math.abs(body.getAccumulatedTorque()) > Epsilon.E) {      sb.append(TAB2).append("body").append(i).append(".applyTorque(").append(body.getAccumulatedTorque()).append(");").append(NEW_LINE);    }    if (!body.isActive()) {      sb.append(TAB2).append("body").append(i).append(".setActive(false);").append(NEW_LINE);    }    if (body.isAsleep()) {      sb.append(TAB2).append("body").append(i).append(".setAsleep(true);").append(NEW_LINE);    }    if (!body.isAutoSleepingEnabled()) {      sb.append(TAB2).append("body").append(i).append(".setAutoSleep(false);").append(NEW_LINE);    }    if (body.isBullet()) {      sb.append(TAB2).append("body").append(i).append(".setBullet(true);").append(NEW_LINE);    }    if (body.getLinearDamping() != Body.DEFAULT_LINEAR_DAMPING) {      sb.append(TAB2).append("body").append(i).append(".setLinearDamping(").append(body.getLinearDamping()).append(");").append(NEW_LINE);    }    if (body.getAngularDamping() != Body.DEFAULT_ANGULAR_DAMPING) {      sb.append(TAB2).append("body").append(i).append(".setAngularDamping(").append(body.getAngularDamping()).append(");").append(NEW_LINE);    }    if (body.getGravityScale() != 1.0) {      sb.append(TAB2).append("body").append(i).append(".setGravityScale(").append(body.getGravityScale()).append(");").append(NEW_LINE);    }    if (body.isMassExplicit()) {      sb.append(TAB2).append("body").append(i).append(".setMass(").append(export(mass)).append(");").append(NEW_LINE).append(TAB2).append("body").append(i).append(".setMassType(MassType.").append(mass.getType()).append(");").append(NEW_LINE);    } else {      sb.append(TAB2).append("body").append(i).append(".setMass(MassType.").append(mass.getType()).append(");").append(NEW_LINE);    }    sb.append(TAB2).append("world.addBody(body").append(i).append(");").append(NEW_LINE).append(NEW_LINE);  }  int jSize=world.getJointCount();  for (int i=1; i < jSize + 1; i++) {    Joint joint=world.getJoint(i - 1);    SandboxBody body1=(SandboxBody)joint.getBody1();    SandboxBody body2=(SandboxBody)joint.getBody2();    sb.append(TAB2).append("// ").append(joint.getUserData()).append(NEW_LINE);    if (joint instanceof AngleJoint) {      AngleJoint aj=(AngleJoint)joint;      sb.append(TAB2).append("AngleJoint joint").append(i).append(" = new AngleJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimits(Math.toRadians(").append(Math.toDegrees(aj.getLowerLimit())).append("), Math.toRadians(").append(Math.toDegrees(aj.getUpperLimit())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimitEnabled(").append(aj.isLimitEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setReferenceAngle(Math.toRadians(").append(Math.toDegrees(aj.getReferenceAngle())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setRatio(").append(aj.getRatio()).append(");").append(NEW_LINE);    } else     if (joint instanceof DistanceJoint) {      DistanceJoint dj=(DistanceJoint)joint;      sb.append(TAB2).append("DistanceJoint joint").append(i).append(" = new DistanceJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(dj.getAnchor1())).append(", ").append(export(dj.getAnchor2())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setFrequency(").append(dj.getFrequency()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setDampingRatio(").append(dj.getDampingRatio()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setDistance(").append(dj.getDistance()).append(");").append(NEW_LINE);    } else     if (joint instanceof FrictionJoint) {      FrictionJoint fj=(FrictionJoint)joint;      sb.append(TAB2).append("FrictionJoint joint").append(i).append(" = new FrictionJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(fj.getAnchor1())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumForce(").append(fj.getMaximumForce()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumTorque(").append(fj.getMaximumTorque()).append(");").append(NEW_LINE);    } else     if (joint instanceof PinJoint) {      PinJoint mj=(PinJoint)joint;      sb.append(TAB2).append("PinJoint joint").append(i).append(" = new PinJoint(").append(idNameMap.get(body1.getId())).append(", ").append(export(mj.getAnchor2())).append(", ").append(mj.getFrequency()).append(", ").append(mj.getDampingRatio()).append(", ").append(mj.getMaximumForce()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setTarget(").append(export(mj.getAnchor1())).append(");").append(NEW_LINE);    } else     if (joint instanceof PrismaticJoint) {      PrismaticJoint pj=(PrismaticJoint)joint;      sb.append(TAB2).append("PrismaticJoint joint").append(i).append(" = new PrismaticJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(pj.getAnchor1())).append(", ").append(export(pj.getAxis())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimitEnabled(").append(pj.isLimitEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimits(").append(pj.getLowerLimit()).append(", ").append(pj.getUpperLimit()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setReferenceAngle(Math.toRadians(").append(Math.toDegrees(pj.getReferenceAngle())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorEnabled(").append(pj.isMotorEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorSpeed(").append(pj.getMotorSpeed()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumMotorForce(").append(pj.getMaximumMotorForce()).append(");").append(NEW_LINE);    } else     if (joint instanceof PulleyJoint) {      PulleyJoint pj=(PulleyJoint)joint;      sb.append(TAB2).append("PulleyJoint joint").append(i).append(" = new PulleyJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(pj.getPulleyAnchor1())).append(", ").append(export(pj.getPulleyAnchor2())).append(", ").append(export(pj.getAnchor1())).append(", ").append(export(pj.getAnchor2())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setRatio(").append(pj.getRatio()).append(");").append(NEW_LINE);    } else     if (joint instanceof RevoluteJoint) {      RevoluteJoint rj=(RevoluteJoint)joint;      sb.append(TAB2).append("RevoluteJoint joint").append(i).append(" = new RevoluteJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(rj.getAnchor1())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimitEnabled(").append(rj.isLimitEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimits(Math.toRadians(").append(Math.toDegrees(rj.getLowerLimit())).append("), Math.toRadians(").append(Math.toDegrees(rj.getUpperLimit())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setReferenceAngle(Math.toRadians(").append(Math.toDegrees(rj.getReferenceAngle())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorEnabled(").append(rj.isMotorEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorSpeed(Math.toRadians(").append(Math.toDegrees(rj.getMotorSpeed())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumMotorTorque(").append(rj.getMaximumMotorTorque()).append(");").append(NEW_LINE);    } else     if (joint instanceof RopeJoint) {      RopeJoint rj=(RopeJoint)joint;      sb.append(TAB2).append("RopeJoint joint").append(i).append(" = new RopeJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(rj.getAnchor1())).append(", ").append(export(rj.getAnchor2())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimits(").append(rj.getLowerLimit()).append(", ").append(rj.getUpperLimit()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLowerLimitEnabled(").append(rj.isLowerLimitEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setUpperLimitEnabled(").append(rj.isUpperLimitEnabled()).append(");").append(NEW_LINE);    } else     if (joint instanceof WeldJoint) {      WeldJoint wj=(WeldJoint)joint;      sb.append(TAB2).append("WeldJoint joint").append(i).append(" = new WeldJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(wj.getAnchor1())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setFrequency(").append(wj.getFrequency()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setDampingRatio(").append(wj.getDampingRatio()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setReferenceAngle(Math.toRadians(").append(Math.toDegrees(wj.getReferenceAngle())).append("));").append(NEW_LINE);    } else     if (joint instanceof WheelJoint) {      WheelJoint wj=(WheelJoint)joint;      sb.append(TAB2).append("WheelJoint joint").append(i).append(" = new WheelJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(wj.getAnchor1())).append(", ").append(export(wj.getAxis())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setFrequency(").append(wj.getFrequency()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setDampingRatio(").append(wj.getDampingRatio()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorEnabled(").append(wj.isMotorEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorSpeed(Math.toRadians(").append(Math.toDegrees(wj.getMotorSpeed())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumMotorTorque(").append(wj.getMaximumMotorTorque()).append(");").append(NEW_LINE);    } else     if (joint instanceof MotorJoint) {      MotorJoint mj=(MotorJoint)joint;      sb.append(TAB2).append("MotorJoint joint").append(i).append(" = new MotorJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLinearTarget(").append(export(mj.getLinearTarget())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setAngularTarget(Math.toRadians(").append(Math.toDegrees(mj.getAngularTarget())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setCorrectionFactor(").append(mj.getCorrectionFactor()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumForce(").append(mj.getMaximumForce()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumTorque(").append(mj.getMaximumTorque()).append(");").append(NEW_LINE);    } else {      throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),joint.getClass().getName()));    }    sb.append(TAB2).append("joint").append(i).append(".setCollisionAllowed(").append(joint.isCollisionAllowed()).append(");").append(NEW_LINE);    sb.append(TAB2).append("world.addJoint(joint").append(i).append(");");    sb.append(NEW_LINE);  }  sb.append(NEW_LINE);  for (  SandboxRay ray : simulation.getRays()) {    sb.append(TAB2).append("{// ").append(ray.getName()).append(NEW_LINE).append(export(ray,TAB3)).append(TAB2).append("}").append(NEW_LINE);  }  sb.append(TAB1).append("}").append(NEW_LINE).append("}").append(NEW_LINE);  return sb.toString();}  }
class C{  public boolean isAggregationType(AggregationType aggregationType){  return this.aggregationType != null && this.aggregationType.equals(aggregationType);}  }
class C{  @Override public void onChanged(boolean status){  isConnected=status;  inflateConnectivity();}  }
class C{  public static Calendar createCalendarMidnight(final Date date){  Calendar cal=new GregorianCalendar(getTimeZone("GMT+0"));  cal.setTime(date);  cal.set(HOUR_OF_DAY,0);  cal.set(MINUTE,0);  cal.set(SECOND,0);  cal.set(MILLISECOND,0);  return cal;}  }
class C{  public UTF16Reader(InputStream inputStream,int size,boolean isBigEndian,MessageFormatter messageFormatter,Locale locale){  this(inputStream,new byte[size],isBigEndian,messageFormatter,locale);}  }
class C{  private void initDefaultTopBarParams(){  View navigationView=getNavigationView();  int titleMarginLeft=-1;  int titleMarginRight=-1;  if (navigationView != null) {    ViewGroup.LayoutParams params=navigationView.getLayoutParams();    int width=(int)getDimension(XUIConfig.getTopBarNavigationIconWidth());    if (width != params.width) {      titleMarginLeft=width;      params.width=width;      navigationView.setLayoutParams(params);    }    ((ImageView)navigationView).setImageResource(XUIConfig.getTopBarNavigationIcon());  }  View menuView=getMenuView();  if (menuView != null) {    if (menuView instanceof ImageView) {      ViewGroup.LayoutParams params=menuView.getLayoutParams();      int width=(int)getDimension(XUIConfig.getTopBarMenuIconWidth());      if (width != params.width) {        titleMarginRight=width;        params.width=width;        menuView.setLayoutParams(params);      }    } else     if (menuView instanceof TextView) {      ((TextView)menuView).setTextColor(getColor(XUIConfig.getTopBarMenuTextColor()));      ((TextView)menuView).setTextSize(TypedValue.COMPLEX_UNIT_SP,XUIConfig.getTopBarMenuTextSize());    }  }  View titleView=getTitleView();  if (titleView != null) {    ((TextView)titleView).setTextColor(getColor(XUIConfig.getTopBarTitleTextColor()));    ((TextView)titleView).setTextSize(TypedValue.COMPLEX_UNIT_SP,XUIConfig.getTopBarTitleTextSize());    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)titleView.getLayoutParams();    if (titleMarginLeft != -1) {      params.setMargins(titleMarginLeft,0,params.rightMargin,0);    }    if (titleMarginRight != -1) {      params.setMargins(params.leftMargin,0,titleMarginRight,0);    }    titleView.setLayoutParams(params);  }}  }
class C{  private static SingleCDockable create(String title,JPanel panel){  return new DefaultSingleCDockable(title,title,panel);}  }
class C{  public ClassPath(DexFile... classPath) throws IOException {  this(Lists.newArrayList(classPath),15);}  }
class C{  public Object prepareItemContext(Map<String,Object> context){  return prepareItemContext(context,MenuRenderState.retrieve(context));}  }
class C{  public EigenvalueDecomposition(Matrix Arg){  double[][] A=Arg.getArray();  n=Arg.getColumnDimension();  V=new double[n][n];  d=new double[n];  e=new double[n];  issymmetric=true;  for (int j=0; (j < n) & issymmetric; j++) {    for (int i=0; (i < n) & issymmetric; i++) {      issymmetric=(A[i][j] == A[j][i]);    }  }  if (issymmetric) {    for (int i=0; i < n; i++) {      for (int j=0; j < n; j++) {        V[i][j]=A[i][j];      }    }    tred2();    tql2();  } else {    H=new double[n][n];    ort=new double[n];    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        H[i][j]=A[i][j];      }    }    orthes();    hqr2();  }}  }
class C{  public static void flushWriter(Writer wr){  if (wr != null) {    try {      wr.flush();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public JsonWriter endArray() throws IOException {  return close(EMPTY_ARRAY,NONEMPTY_ARRAY,"]");}  }
class C{  public static AudioInputStream convertBit24ToBit16(AudioInputStream ais,int shiftBits) throws Exception {  int bitsPerSample=24;  int targetBitsPerSample=16;  int noOfbitsPerSample=ais.getFormat().getSampleSizeInBits();  if (noOfbitsPerSample != bitsPerSample) {    throw new Exception("24-Bit Audio Data Expected. But given Audio Data is " + noOfbitsPerSample + "-Bit data");  }  if (ais.getFormat().getChannels() != 1) {    throw new Exception("Expected Audio type is Mono. But given Audio Data has " + ais.getFormat().getChannels() + " channels");  }  float samplingRate=ais.getFormat().getSampleRate();  int channels=ais.getFormat().getChannels();  int nBytes=ais.available();  boolean bigEndian=ais.getFormat().isBigEndian();  byte[] byteBuf=new byte[nBytes];  int nBytesRead=ais.read(byteBuf,0,nBytes);  int currentPos=0;  int noOfSamples=nBytes / 3;  int[] sample=new int[noOfSamples];  for (int i=0; i < nBytesRead; i+=3, currentPos++) {    byte lobyte;    byte midbyte;    byte hibyte;    if (!bigEndian) {      lobyte=byteBuf[i];      midbyte=byteBuf[i + 1];      hibyte=byteBuf[i + 2];    } else {      lobyte=byteBuf[i + 2];      midbyte=byteBuf[i + 1];      hibyte=byteBuf[i];    }    sample[currentPos]=hibyte << 16 | (midbyte & 0xFF) << 8 | lobyte & 0xFF;  }  int sign;  for (int i=0; (shiftBits > 0 && i < sample.length); i++) {    if (sample[i] < 0)     sign=-1; else     sign=1;    sample[i]=sign * (Math.abs(sample[i]) >> shiftBits);  }  currentPos=0;  int nRead=sample.length;  byte[] b=new byte[2 * sample.length];  int MAX_AMPLITUDE=32767;  for (int i=0; i < nRead; i++, currentPos+=2) {    int samp=sample[i];    if (samp > MAX_AMPLITUDE || samp < -MAX_AMPLITUDE) {      System.err.println("Warning: signal amplitude out of range: " + samp);    }    byte hibyte=(byte)(samp >> 8);    byte lobyte=(byte)(samp & 0xFF);    if (!bigEndian) {      b[currentPos]=lobyte;      b[currentPos + 1]=hibyte;    } else {      b[currentPos]=hibyte;      b[currentPos + 1]=lobyte;    }  }  ByteArrayInputStream bais=new ByteArrayInputStream(b);  boolean signed=true;  AudioFormat af=new AudioFormat(samplingRate,targetBitsPerSample,channels,signed,bigEndian);  long lengthInSamples=b.length / (targetBitsPerSample / 8);  return new AudioInputStream(bais,af,lengthInSamples);}  }
class C{  protected void compileProtos(String tempDir,List<String> sourceFiles,String outputFile){  List<String> commandLine=Lists.newArrayList();  commandLine.add(PROTOCOL_COMPILER);  commandLine.add("--include_imports");  commandLine.add("--proto_path=" + tempDir);  commandLine.add("--include_source_info");  commandLine.add("-o");  commandLine.add(outputFile);  for (  String source : sourceFiles) {    commandLine.add(Paths.get(tempDir,source).toString());  }  ProcessBuilder processBuilder=new ProcessBuilder(commandLine);  Path output=Paths.get(tempDir,"_protoc.out");  processBuilder.redirectErrorStream(true);  processBuilder.redirectOutput(output.toFile());  try {    Process process=processBuilder.start();    if (process.waitFor() != 0) {      throw new IllegalArgumentException(String.format("proto compilation failed: %s:\n%s",Joiner.on(" ").join(commandLine),new String(Files.readAllBytes(output),UTF_8)));    }  } catch (  Exception e) {    throw new IllegalArgumentException(String.format("proto compilation failed with internal error: %s",e.getMessage()));  }}  }
class C{  public void doWork() throws InterruptedException {  Thread.sleep(100);}  }
class C{  public static void stopGameTime(){  startGameTime=false;}  }
class C{  protected BuildFile createBuildFile(String filePath,String... contentLines){  PsiFile file=createPsiFile(filePath,contentLines);  assertThat(file).isInstanceOf(BuildFile.class);  return (BuildFile)file;}  }
class C{  private void navigateToDetails(final Article article,final View articleView){  final ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(this,articleView,articleView.getTransitionName());  final Intent intent=new Intent(this,DetailsActivity.class);  intent.putExtra(DetailsActivity.EXTRA_ARTICLE,article);  startActivity(intent,options.toBundle());}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());}  }
class C{  public static boolean isXML11Name(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME) != 0) || (c >= 0x10000 && c < 0xF0000);}  }
class C{  public boolean topo_sort(){  return soot.PhaseOptions.getBoolean(options,"topo-sort");}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public EtcdClientBuilder endpoints(String... endpoints){  checkNotNull(endpoints,"endpoints can't be null");  checkArgument(endpoints.length > 0,"please configure at lease one endpoint ");  for (  String endpoint : endpoints) {    checkNotNull(endpoint,"endpoint can't be null");    final String trimmedEndpoint=endpoint.trim();    checkArgument(trimmedEndpoint.length() > 0,"invalid endpoint: endpoint=" + endpoint);    this.endpoints.add(trimmedEndpoint);  }  return this;}  }
class C{  public ProperBigFractionFormat(final NumberFormat wholeFormat,final NumberFormat numeratorFormat,final NumberFormat denominatorFormat){  super(numeratorFormat,denominatorFormat);  MathUtils.checkNotNull(wholeFormat,LocalizedCoreFormats.WHOLE_FORMAT);  this.wholeFormat=wholeFormat;}  }
class C{  public NotesDeleteQuery delete(UserActor actor,int noteId){  return new NotesDeleteQuery(getClient(),actor,noteId);}  }
class C{  public static void point(double x,double y){  double xs=scaleX(x);  double ys=scaleY(y);  double r=penRadius;  float scaledPenRadius=(float)(r * DEFAULT_SIZE);  if (scaledPenRadius <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - scaledPenRadius / 2,ys - scaledPenRadius / 2,scaledPenRadius,scaledPenRadius));  draw();}  }
class C{  public JsonArray(){  elements=new ArrayList<JsonElement>();}  }
class C{  public static boolean isWindows(){  return (OS.indexOf("win") >= 0);}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data");}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Dot fullCopy(){  Dot tree=(Dot)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private String readBasicTag(XmlPullParser parser,String tag) throws IOException, XmlPullParserException {  parser.require(XmlPullParser.START_TAG,ns,tag);  String result=readText(parser);  parser.require(XmlPullParser.END_TAG,ns,tag);  return result;}  }
class C{  public static InstructionFragment newInstance(Recipe recipe,int sectionNumber){  InstructionFragment fragment=new InstructionFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void hideLoadingUI(){  removeCallbacks(mDelayedShow);  removeCallbacks(mDelayedHide);  if (getVisibility() == VISIBLE) {    postDelayed(mDelayedHide,Math.max(0,mStartTime + MINIMUM_ANIMATION_SHOW_TIME_MS - SystemClock.elapsedRealtime()));  }}  }
class C{  void announceforAccessibility(){  mMessageView.announceForAccessibility(mMessageView.getContentDescription());}  }
class C{  private static long addAndCheck(long a,long b,Localizable pattern) throws MathRuntimeException {  final long result=a + b;  if (!((a ^ b) < 0 || (a ^ result) >= 0)) {    throw new MathRuntimeException(pattern,a,b);  }  return result;}  }
class C{  public Vector1D toSubSpace(Vector<Euclidean2D> vector){  return toSubSpace((Point<Euclidean2D>)vector);}  }
class C{  private void encode(OutputStream out,int[] data,int len) throws IOException {  int d1, d2, d3;switch (len) {case 0:    break;case 1:  d1=data[0];out.write(encodingTable[(d1 >>> 2) & 0x3f]);out.write(encodingTable[(d1 << 4) & 0x3f]);out.write('=');out.write('=');break;case 2:d1=data[0];d2=data[1];out.write(encodingTable[(d1 >>> 2) & 0x3f]);out.write(encodingTable[((d1 << 4) | (d2 >>> 4)) & 0x3f]);out.write(encodingTable[(d2 << 2) & 0x3f]);out.write('=');break;case 3:d1=data[0];d2=data[1];d3=data[2];out.write(encodingTable[(d1 >>> 2) & 0x3f]);out.write(encodingTable[((d1 << 4) | (d2 >>> 4)) & 0x3f]);out.write(encodingTable[((d2 << 2) | (d3 >>> 6)) & 0x3f]);out.write(encodingTable[d3 & 0x3f]);break;default :throw new IOException("unknown length in encode");}}  }
class C{  public MapCursor addCursor(int x,int y,byte direction){  return addCursor(x,y,direction,(byte)0,true);}  }
class C{  public static void main(String[] args){  Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  if (getSwitch(hSwitches,"help","").length() > 0) {    printUsage();    System.exit(0);  }  String sCorpusDir=getSwitch(hSwitches,"corpusDir","." + System.getProperty("file.separator"));  int iMinNGram=Integer.valueOf(getSwitch(hSwitches,"minNGram","3")).intValue();  int iMaxNGram=Integer.valueOf(getSwitch(hSwitches,"maxNGram","8")).intValue();  int iCategoriesForGrammar=Integer.valueOf(getSwitch(hSwitches,"categoriesForGrammar","2")).intValue();  int iWindowSize=Integer.valueOf(getSwitch(hSwitches,"windowSize",String.valueOf(2 * iMinNGram <= iMaxNGram ? iMaxNGram + 1 : 2 * iMinNGram))).intValue();  double dTrainPercent=Double.valueOf(getSwitch(hSwitches,"trainPercent","0.20")).doubleValue();  double dPartOfCorpus=Double.valueOf(getSwitch(hSwitches,"partOfCorpus","1.00")).doubleValue();  boolean bSave=Boolean.valueOf(getSwitch(hSwitches,"save",String.valueOf(false))).booleanValue();  boolean bLoad=Boolean.valueOf(getSwitch(hSwitches,"load",String.valueOf(false))).booleanValue();  boolean bCache=Boolean.valueOf(getSwitch(hSwitches,"cache",String.valueOf(false))).booleanValue();  if (bCache)   hCategoryGraphs=new HashMap<String,DocumentNGramGraph>();  String sModelDir=getSwitch(hSwitches,"modelDir","./models/");  String sOutFile=getSwitch(hSwitches,"o","");  if (sOutFile.length() > 0) {    try {      PrintStream pOut=new PrintStream(new FileOutputStream(new File(sOutFile)));      System.setOut(pOut);    } catch (    FileNotFoundException ex) {      Logger.getLogger(grammarAndContentAnalysis.class.getName()).log(Level.SEVERE,null,ex);      System.err.println("Could not redirect to output file. Using " + "standard output.");    }  }  DocumentSet dsCorpus=new DocumentSet(sCorpusDir,dTrainPercent);  dsCorpus.createSets(true,dPartOfCorpus);  INSECTFileDB<DocumentNGramGraph> db=new INSECTFileDB("",sModelDir);  INSECTFileDB<HashSet<String>> dbParams=new INSECTFileDB("params",sModelDir);  Set<String> sGrammarCategories=null;  DocumentNGramGraph categoryGraph=null;  DocumentNGramGraph gGrammar=null;  boolean bLoadedOK=false;  if (bLoad) {    System.err.print("Loading grammar...");    gGrammar=db.loadObject(GRAMMAR_NAME,GRAMMAR_TYPE);    bLoadedOK=gGrammar != null;    sGrammarCategories=dbParams.loadObject(GRAMMAR_DOCS_PARAM,PARAM_TYPE);    bLoadedOK=bLoadedOK && (sGrammarCategories != null);    if (bLoadedOK) {      if ((gGrammar.getMinSize() == iMinNGram) && (gGrammar.getMaxSize() == iMaxNGram) && (gGrammar.getWindowSize() == iWindowSize)) {        System.err.println("Loaded OK  with a size of " + gGrammar.length());      } else {        bLoadedOK=false;        System.err.println("Graph parameters differ from the parameters" + " given. Recreating grammar.");      }    } else {      System.err.println("Load failed. Continuing...");    }  }  if (!bLoadedOK) {    sGrammarCategories=new HashSet<String>();    for (    Object elem : dsCorpus.getCategories()) {      String sCurCategory=(String)elem;      categoryGraph=new DocumentNGramSymWinGraph(iMinNGram,iMaxNGram,iWindowSize);      System.err.println("Extracting graph from category " + sCurCategory);      categoryGraph=getGraphFor(sCurCategory,CATEGORY_MODEL_TYPE,db,dsCorpus.getFilesFromCategory(sCurCategory,DocumentSet.FROM_TRAINING_SET),iMinNGram,iMaxNGram,iWindowSize,bLoad,bSave);      if (sGrammarCategories.size() > 0) {        gGrammar.intersectGraph(categoryGraph);      } else {        gGrammar=categoryGraph;      }      sGrammarCategories.add(sCurCategory);      if (sGrammarCategories.size() == iCategoriesForGrammar) {        break;      }    }    System.err.println("Grammar created with a size of " + gGrammar.length() + ".");    if (bSave) {      System.err.print("Saving grammar...");      db.saveObject(gGrammar,GRAMMAR_NAME,GRAMMAR_TYPE);      dbParams.saveObject((HashSet<String>)sGrammarCategories,GRAMMAR_DOCS_PARAM,PARAM_TYPE);      System.err.println("Done.");    }  }  Distribution<String> dPerCategoryOverallCount=new Distribution<String>();  Distribution<String> dPerCategoryCorrectCount=new Distribution<String>();  for (  CategorizedFileEntry cfeCur : (List<CategorizedFileEntry>)dsCorpus.getTestSet()) {    DocumentNGramGraph dgCurDoc=new DocumentNGramSymWinGraph(iMinNGram,iMaxNGram,iWindowSize);    System.err.println("Loading file " + cfeCur.getFileName());    try {      dgCurDoc.loadDataStringFromFile(cfeCur.getFileName());    } catch (    IOException ex) {      Logger.getLogger(grammarAndContentAnalysis.class.getName()).log(Level.SEVERE,"Cannot load file.",ex);      continue;    }    if (gGrammar != null) {      System.err.println("Removing grammar...");      dgCurDoc=dgCurDoc.allNotIn(gGrammar);    }    String sRes=determineCategory(dgCurDoc,cfeCur.getFileName(),cfeCur.getCategory(),dsCorpus.getCategories(),db,dsCorpus,iMinNGram,iMaxNGram,iWindowSize,bLoad,bSave,gGrammar);    if (sRes.equals(cfeCur.getCategory())) {      dPerCategoryCorrectCount.increaseValue(cfeCur.getCategory(),1.0);    }    dPerCategoryOverallCount.increaseValue(cfeCur.getCategory(),1.0);  }  outputResults("Results ",dPerCategoryCorrectCount,dPerCategoryOverallCount);}  }
class C{  public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=Math.max(pos + 1,mKeys.length * 2);    int[] nkeys=new int[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public float[] generateTransformedValuesCandle(ICandleDataSet data,float phaseX,float phaseY,int from,int to){  final int count=(int)((to - from) * phaseX + 1) * 2;  if (valuePointsForGenerateTransformedValuesCandle.length != count) {    valuePointsForGenerateTransformedValuesCandle=new float[count];  }  float[] valuePoints=valuePointsForGenerateTransformedValuesCandle;  for (int j=0; j < count; j+=2) {    CandleEntry e=data.getEntryForIndex(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getX();      valuePoints[j + 1]=e.getHigh() * phaseY;    } else {      valuePoints[j]=0;      valuePoints[j + 1]=0;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public String encryptPin(String pin){  Cipher mwkCipher=this.getCipher(this.getMwkKey(),Cipher.ENCRYPT_MODE);  byte[] pinBytes=pin.getBytes();  byte[] random=this.getRandomBytes(7);  byte[] checkSum=this.getPinCheckSum(pinBytes);  byte[] eanBlock=new byte[16];  int i;  for (i=0; i < random.length; i++) {    eanBlock[i]=random[i];  }  eanBlock[7]=checkSum[0];  for (i=0; i < pinBytes.length; i++) {    eanBlock[i + 8]=pinBytes[i];  }  String encryptedEanHex=null;  try {    byte[] encryptedEan=mwkCipher.doFinal(eanBlock);    encryptedEanHex=StringUtil.toHexString(encryptedEan);  } catch (  IllegalStateException e) {    Debug.logError(e,module);  }catch (  IllegalBlockSizeException e) {    Debug.logError(e,module);  }catch (  BadPaddingException e) {    Debug.logError(e,module);  }  if (debug) {    Debug.logInfo("encryptPin : " + pin + " / "+ encryptedEanHex,module);  }  return encryptedEanHex;}  }
class C{  protected void resetCommon() throws XNIException {  int count=fCommonComponents.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fCommonComponents.get(i);    c.reset(this);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DELETE_CASH_TITLE_BY_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1390244,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_REJECT_ME(String value0){  return new SM_SYSTEM_MESSAGE(1300971,value0);}  }
class C{  public EncodingException(String s){  super(s);}  }
class C{  private double errorEstimation(final double[] previousState,final double[] predictedState,final double[] predictedScaled,final RealMatrix predictedNordsieck){  double error=0;  for (int i=0; i < mainSetDimension; ++i) {    final double yScale=FastMath.abs(predictedState[i]);    final double tol=(vecAbsoluteTolerance == null) ? (scalAbsoluteTolerance + scalRelativeTolerance * yScale) : (vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * yScale);    double variation=0;    int sign=predictedNordsieck.getRowDimension() % 2 == 0 ? -1 : 1;    for (int k=predictedNordsieck.getRowDimension() - 1; k >= 0; --k) {      variation+=sign * predictedNordsieck.getEntry(k,i);      sign=-sign;    }    variation-=predictedScaled[i];    final double ratio=(predictedState[i] - previousState[i] + variation) / tol;    error+=ratio * ratio;  }  return FastMath.sqrt(error / mainSetDimension);}  }
class C{  public void onPressed(){}  }
class C{  @Override public void removeFill(Symbolizer symbolizer){}  }
class C{  public GSObjectMessageImpl(GSSessionImpl session) throws JMSException {  this(session,null);}  }
class C{  public boolean isPersistent(){  return m_persist;}  }
class C{  public boolean pairedTTest(final double[] sample1,final double[] sample2,final double alpha) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  checkSignificanceLevel(alpha);  return pairedTTest(sample1,sample2) < alpha;}  }
class C{  public boolean isSPD(){  return isspd;}  }
class C{  public LtExpr newLtExpr(Value op1,Value op2){  return new GLtExpr(op1,op2);}  }
class C{  <T>Property(Function<Experiment,T> propertyExtractor,BiFunction<T,T,Integer> comparisonFunction){  this.propertyExtractor=propertyExtractor;  this.comparisonFunction=comparisonFunction;}  }
class C{  public ProcessDefinitionInfoCache(CommandExecutor commandExecutor){  this.commandExecutor=commandExecutor;  this.cache=Collections.synchronizedMap(new HashMap<String,ProcessDefinitionInfoCacheObject>());}  }
class C{  public static Bitmap blurJava(Bitmap original,int radius,boolean canReuseInBitmap){  if (radius < 1) {    return (null);  }  Bitmap bitmap=buildBitmap(original,canReuseInBitmap);  if (radius == 1) {    return bitmap;  }  StackJava.blur(bitmap,radius);  return (bitmap);}  }
class C{  protected Map<Protos.SlaveID,List<OfferRecommendation>> groupRecommendationsByAgent(List<OfferRecommendation> recommendations){  final Map<Protos.SlaveID,List<OfferRecommendation>> recommendationsGroupedByAgents=new HashMap<>();  for (  OfferRecommendation recommendation : recommendations) {    final Protos.SlaveID agentId=recommendation.getOffer().getSlaveId();    if (!recommendationsGroupedByAgents.containsKey(agentId)) {      recommendationsGroupedByAgents.put(agentId,new ArrayList<>());    }    final List<OfferRecommendation> agentRecommendations=recommendationsGroupedByAgents.get(agentId);    agentRecommendations.add(recommendation);    recommendationsGroupedByAgents.put(agentId,agentRecommendations);  }  return recommendationsGroupedByAgents;}  }
class C{  public MessagesDeleteDialogQuery(VkApiClient client,Actor actor){  super(client,"messages.deleteDialog",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public int size(){  return label2label.size();}  }
class C{  public MasterViewConfiguration(boolean isMasterAreaResizable){  this.isMasterViewResizable=isMasterAreaResizable;}  }
class C{  public static void writeSwappedFloat(byte[] data,int offset,float value){  writeSwappedInteger(data,offset,Float.floatToIntBits(value));}  }
class C{  public void select(){  checkboxElement.click();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_INTERVAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200678,num0,skillcaster,skillname);}  }
class C{  @Override public ElectionEntry clone(){  try {    ElectionEntry cloneEntry=(ElectionEntry)super.clone();    cloneEntry._actState=new ActiveElectionState();    cloneEntry.attributeSetTemplates=attributeSetTemplates.clone();    for (int i=0; i < cloneEntry.attributeSetTemplates.length; i++) {      if (cloneEntry.attributeSetTemplates[i] instanceof ActiveElectionState) {        cloneEntry.attributeSetTemplates[i]=cloneEntry._actState;        break;      }    }    return cloneEntry;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  private void updateConstraintHandlesPositions(){  for (  ConstraintHandle mConstraintHandle : mConstraintHandles) {    mConstraintHandle.updatePosition();  }}  }
class C{  public boolean isAbnormalSet(AbnormalState id){  return (abnormals & id.getId()) == id.getId();}  }
class C{  private static boolean notInstanceAvailable(){  if (sInstance == null) {    if (!sTrainingTaskFuture.isDone()) {      try {        sInstance=sTrainingTaskFuture.get();        return false;      } catch (      InterruptedException|ExecutionException e) {        e.printStackTrace();        return true;      }    } else {      return true;    }  }  return false;}  }
class C{  public void tabCreated(long time,int id,int prevId,boolean selected){  if (findTabById(id) != null)   return;  computeAndUpdateTabOrders(false);  StripLayoutTab tab=findTabById(id);  if (tab != null)   startAnimation(buildTabCreatedAnimation(tab),true);  StripLayoutTab fastExpandTab=findTabById(prevId);  boolean allowLeftExpand=false;  if (!selected) {    fastExpandTab=tab;    allowLeftExpand=true;  }  if (fastExpandTab != null) {    float delta=calculateOffsetToMakeTabVisible(fastExpandTab,false,allowLeftExpand,true);    if (delta != 0.f) {      mScroller.startScroll(mScrollOffset,0,(int)delta,0,time,EXPAND_DURATION_MS);    }  }  mUpdateHost.requestUpdate();}  }
class C{  private void createReflectedImages(){  final int width=this.wrappedViewBitmap.getWidth();  final int height=this.wrappedViewBitmap.getHeight();  final Matrix matrix=new Matrix();  matrix.postScale(1,-1);  final int scaledDownHeight=(int)(height * originalScaledownFactor);  final int invertedHeight=height - scaledDownHeight - reflectionGap;  final int invertedBitmapSourceTop=scaledDownHeight - invertedHeight;  final Bitmap invertedBitmap=Bitmap.createBitmap(this.wrappedViewBitmap,0,invertedBitmapSourceTop,width,invertedHeight,matrix,true);  this.wrappedViewDrawingCanvas.drawBitmap(invertedBitmap,0,scaledDownHeight + reflectionGap,null);  final Paint paint=new Paint();  final LinearGradient shader=new LinearGradient(0,height * imageReflectionRatio + reflectionGap,0,height,0x70ffffff,0x00ffffff,Shader.TileMode.CLAMP);  paint.setShader(shader);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));  this.wrappedViewDrawingCanvas.drawRect(0,height * (1 - imageReflectionRatio),width,height,paint);}  }
class C{  public void initialize(InputSplit split,ImageTransform imageTransform) throws IOException {  this.imageLoader=null;  this.imageTransform=imageTransform;  initialize(split);}  }
class C{  public void actionPerformed(ActionEvent ev){  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();  if (samples.size() > 0)   execute("set nodeShape=diamond sample='" + Basic.toString(samples,"' '") + "';");}  }
class C{  @Override public String toString(){  StringBuffer str=new StringBuffer();  boolean comma=false;  if (prefix != null) {    str.append("prefix=\"").append(prefix).append('"');    comma=true;  }  if (localpart != null) {    if (comma) {      str.append(',');    }    str.append("localpart=\"").append(localpart).append('"');    comma=true;  }  if (rawname != null) {    if (comma) {      str.append(',');    }    str.append("rawname=\"").append(rawname).append('"');    comma=true;  }  if (uri != null) {    if (comma) {      str.append(',');    }    str.append("uri=\"").append(uri).append('"');  }  return str.toString();}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public DataTypeException(String message){  super(message);}  }
class C{  public static boolean isInvoiceType(GenericValue invoice,String inputTypeId) throws GenericEntityException {  if (invoice == null) {    return false;  }  GenericValue invoiceType=invoice.getRelatedOne("InvoiceType",true);  if (invoiceType == null) {    throw new GenericEntityException("Cannot find InvoiceType for invoiceId " + invoice.getString("invoiceId"));  }  String invoiceTypeId=invoiceType.getString("invoiceTypeId");  if (inputTypeId.equals(invoiceTypeId)) {    return true;  }  return isInvoiceTypeRecurse(invoiceType,inputTypeId);}  }
class C{  public String optString(String key){  return optString(key,"");}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  @Override public void onDraw(Canvas canvas){  final int count=canvas.save();  final Rect bounds=getBounds();  final float centerX=bounds.centerX();  final float centerY=bounds.height() - mRadius;  canvas.scale(1.f,Math.min(getGlowScaleY(),1.f) * mBaseGlowScale,centerX,0);  final float displacement=Math.max(0,Math.min(getDisplacement(),1.f)) - 0.5f;  float translateX=bounds.width() * displacement / 2;  canvas.clipRect(bounds);  canvas.translate(translateX,0);  mPaint.setAlpha((int)(0x7f * getGlowAlpha()));  canvas.drawCircle(centerX,centerY,mRadius,mPaint);  canvas.restoreToCount(count);}  }
class C{  public MessagesGetChatUsersQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public static long subAndCheck(long a,long b){  long ret;  String msg="overflow: subtract";  if (b == Long.MIN_VALUE) {    if (a < 0) {      ret=a - b;    } else {      throw new ArithmeticException(msg);    }  } else {    ret=addAndCheck(a,-b,msg);  }  return ret;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_DEGRADE_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400138,value0);}  }
class C{  @Deployment(resources={"org/activiti/engine/test/bpmn/callactivity/CallActivity.testSubProcessEndsSuperProcess.bpmn20.xml","org/activiti/engine/test/bpmn/callactivity/simpleSubProcess.bpmn20.xml"}) public void testSubProcessEndsSuperProcess(){  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("subProcessEndsSuperProcess");  TaskQuery taskQuery=taskService.createTaskQuery();  Task taskBeforeSubProcess=taskQuery.singleResult();  assertEquals("Task in subprocess",taskBeforeSubProcess.getName());  taskService.complete(taskBeforeSubProcess.getId());  assertProcessEnded(processInstance.getId());  assertEquals(0,runtimeService.createExecutionQuery().list().size());}  }
class C{  public boolean isPaging(){  return page != null || pageSize != null;}  }
class C{  public void fixConversion(String rep){  if (sHashCode != rep.hashCode())   throw new RuntimeException("bad use of fixConversion!");  if (s == null) {    s=rep;  }}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public Builder statsLogger(StatsLogger statsLogger){  this.statsLogger=statsLogger;  return this;}  }
class C{  public static Having buildMetricHaving(LogicalMetric metric,Set<ApiHaving> havings){  LOG.trace("Building metric having using metric: {} \n\n and set of queries: {}",metric,havings);  List<Having> orHavings=havings.stream().map(null).collect(Collectors.toList());  Having newHaving=orHavings.size() == 1 ? orHavings.get(0) : new AndHaving(orHavings);  LOG.trace("Filter: {}",newHaving);  return newHaving;}  }
class C{  protected static void logParsingIssue(final String prefix,final SAXParseException e){  final StringBuilder buffer=new StringBuilder();  buffer.append(prefix);  buffer.append(" while reading UAS data: ");  buffer.append(e.getMessage());  buffer.append(" (line: ");  buffer.append(e.getLineNumber());  if (e.getSystemId() != null) {    buffer.append(" uri: ");    buffer.append(e.getSystemId());  }  buffer.append(")");  LOG.warn(buffer.toString());}  }
class C{  public boolean isTextDirty(){  SVNStatusKind theTextStatus=getTextStatus();  return ((theTextStatus.equals(SVNStatusKind.ADDED)) || (theTextStatus.equals(SVNStatusKind.DELETED)) || (theTextStatus.equals(SVNStatusKind.REPLACED))|| (theTextStatus.equals(SVNStatusKind.MODIFIED))|| (theTextStatus.equals(SVNStatusKind.MERGED))|| (theTextStatus.equals(SVNStatusKind.CONFLICTED)));}  }
class C{  public RegisterEntriesListenerSpaceOperationResult(){}  }
class C{  public void intersection(FlowSet<T> otherFlow,FlowSet<T> destFlow){  if (sameType(otherFlow) && sameType(destFlow)) {    DavaFlowSet<T> other=(DavaFlowSet<T>)otherFlow;    DavaFlowSet<T> dest=(DavaFlowSet<T>)destFlow;    DavaFlowSet<T> workingSet;    if (dest == other || dest == this)     workingSet=new DavaFlowSet<T>(); else {      workingSet=dest;      workingSet.clear();    }    for (int i=0; i < this.numElements; i++) {      if (other.contains(this.elements[i]))       workingSet.add(this.elements[i]);    }    if (workingSet != dest)     workingSet.copy(dest);  } else   super.intersection(otherFlow,destFlow);}  }
class C{  private static void try_success(String s,String e){  print(">    " + s + "success\n");  if (e != "") {    print(">      Message: " + e + "\n");  }}  }
class C{  public static CommandTag buildCreateBasicCommandTag(Properties properties){  if (properties == null) {    properties=new Properties();  }  CommandTag commandTag=CommandTag.create("CommandTag",Integer.class,new SimpleHardwareAddressImpl("testAddress"),30000,6000,200,2,"RBAC class","RBAC device","RBAC property").equipmentId(10L).mode(TagMode.TEST).build();  properties.setProperty("name","CommandTag");  properties.setProperty("description","<no description provided>");  properties.setProperty("mode",String.valueOf(TagMode.TEST.ordinal()));  properties.setProperty("dataType",Integer.class.getName());  properties.setProperty("hardwareAddress",new SimpleHardwareAddressImpl("testAddress").toConfigXML());  properties.setProperty("equipmentId",String.valueOf(10l));  properties.setProperty("clientTimeout",String.valueOf(30000));  properties.setProperty("execTimeout",String.valueOf(6000));  properties.setProperty("sourceTimeout",String.valueOf(200));  properties.setProperty("sourceRetries",String.valueOf(2));  properties.setProperty("rbacClass","RBAC class");  properties.setProperty("rbacDevice","RBAC device");  properties.setProperty("rbacProperty","RBAC property");  return commandTag;}  }
class C{  private void gatherDrawables(){  drawables=new Array<>(AtlasData.getInstance().getDrawables());  Iterator<DrawableData> iter=drawables.iterator();  while (iter.hasNext()) {    DrawableData drawable=iter.next();    if (!drawable.visible)     iter.remove();  }}  }
class C{  public V value(){  return _map._values[_index];}  }
class C{  public static String padOrTrim(Object obj,int totalChars){  return padOrTrim(obj.toString(),totalChars);}  }
class C{  public NotificationsGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public PanControl(){  this(LEFT_MOUSE_BUTTON,false);}  }
class C{  public static boolean isNumericType(Class type){  return (type == byte.class || type == short.class || type == int.class || type == long.class || type == double.class || type == float.class);}  }
class C{  public static boolean isMatchedUpdate(int mod){  return (mod & NOTIFY_MATCHED_UPDATE) != 0;}  }
class C{  public boolean isTraceEnabled(){  return this.logger.isTraceEnabled();}  }
class C{  public void cancel(){  interrupt();}  }
class C{  public static final void render(Graphics2D g,Shape shape,double scale,Color color){  if (shape == null)   return;  if (color == null)   color=Color.ORANGE;  if (shape instanceof Circle) {    Graphics2DRenderer.render(g,(Circle)shape,scale,color);  } else   if (shape instanceof Polygon) {    Graphics2DRenderer.render(g,(Polygon)shape,scale,color);  } else   if (shape instanceof Segment) {    Graphics2DRenderer.render(g,(Segment)shape,scale,color);  } else   if (shape instanceof Capsule) {    Graphics2DRenderer.render(g,(Capsule)shape,scale,color);  } else   if (shape instanceof Ellipse) {    Graphics2DRenderer.render(g,(Ellipse)shape,scale,color);  } else   if (shape instanceof Slice) {    Graphics2DRenderer.render(g,(Slice)shape,scale,color);  } else   if (shape instanceof HalfEllipse) {    Graphics2DRenderer.render(g,(HalfEllipse)shape,scale,color);  } else {  }}  }
class C{  @Override public void run(){  PreSyncEvent event=new PreSyncEvent();  plugin.getApiProvider().fireEvent(event);  if (event.isCancelled())   return;  plugin.getDatastore().loadAllGroups().getUnchecked();  String defaultGroup=plugin.getConfiguration().getDefaultGroupName();  if (!plugin.getGroupManager().isLoaded(defaultGroup)) {    plugin.getDatastore().createAndLoadGroup(defaultGroup).getUnchecked();  }  plugin.getDatastore().loadAllTracks().getUnchecked();  plugin.getUserManager().updateAllUsers();  plugin.getApiProvider().fireEvent(new PostSyncEvent());}  }
class C{  private static Class<? extends Activity> guessRestartActivityClass(Context context){  Class<? extends Activity> resolvedActivityClass;  resolvedActivityClass=CustomActivityOnCrash.getRestartActivityClassWithIntentFilter(context);  if (resolvedActivityClass == null) {    resolvedActivityClass=getLauncherActivity(context);  }  return resolvedActivityClass;}  }
class C{  public String toString(){  return getName();}  }
class C{  public static ModelRelation create(ModelEntity modelEntity,String description,String type,String title,String relEntityName,String fkName,List<ModelKeyMap> keyMaps,boolean isAutoRelation){  if (description == null) {    description="";  }  if (type == null) {    type="";  }  if (title == null) {    title="";  }  if (relEntityName == null) {    relEntityName="";  }  if (fkName == null) {    fkName="";  }  if (keyMaps == null) {    keyMaps=Collections.emptyList();  } else {    keyMaps=Collections.unmodifiableList(keyMaps);  }  return new ModelRelation(modelEntity,description,type,title,relEntityName,fkName,keyMaps,isAutoRelation);}  }
class C{  public void addGroup(GroupConfig group){  Map<GroupIdEnum,GroupConfigInterface> panelMap=groupMap.get(panelId);  if (panelMap == null) {    panelMap=new HashMap<GroupIdEnum,GroupConfigInterface>();    groupMap.put(panelId,panelMap);  }  if (group != null) {    panelMap.put(group.getId(),group);  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),1);}  }
class C{  private static void updateGraphicalSymbol(URL resourceLocator,List<GraphicalSymbol> graphicalSymbolList,List<String> externalImageList){  for (  GraphicalSymbol symbol : graphicalSymbolList) {    if (symbol instanceof ExternalGraphic) {      ExternalGraphicImpl externalGraphic=(ExternalGraphicImpl)symbol;      OnLineResourceImpl onlineResource=(OnLineResourceImpl)externalGraphic.getOnlineResource();      String currentValue=null;      try {        currentValue=onlineResource.getLinkage().toURL().toExternalForm();      } catch (      MalformedURLException e) {        ConsoleManager.getInstance().exception(SLDExternalImages.class,e);      }      if (resourceLocator == null) {        URI uri=null;        try {          uri=new URI(currentValue);          externalImageList.add(uri.toASCIIString());        } catch (        URISyntaxException e) {          ConsoleManager.getInstance().exception(SLDExternalImages.class,e);        }      } else {        String prefix=resourceLocator.toExternalForm();        try {          if (currentValue.startsWith(prefix)) {            currentValue=currentValue.substring(prefix.length());            OnLineResourceImpl updatedOnlineResource=new OnLineResourceImpl();            URI uri=new URI(currentValue);            updatedOnlineResource.setLinkage(uri);            externalGraphic.setOnlineResource(updatedOnlineResource);            externalGraphic.setURI(uri.toASCIIString());            externalImageList.add(uri.toASCIIString());          }        } catch (        URISyntaxException e) {          ConsoleManager.getInstance().exception(SLDExternalImages.class,e);        }      }    }  }}  }
class C{  protected WallGetCommentsQuery postId(int value){  return unsafeParam("post_id",value);}  }
class C{  public void putIdentifier(String name,int elementNodeIndex){  if (DEBUG_IDS) {    System.out.println("putIdentifier(" + name + ", "+ elementNodeIndex+ ')'+ " // "+ getChunkValue(fNodeName,elementNodeIndex >> CHUNK_SHIFT,elementNodeIndex & CHUNK_MASK));  }  if (fIdName == null) {    fIdName=new String[64];    fIdElement=new int[64];  }  if (fIdCount == fIdName.length) {    String idName[]=new String[fIdCount * 2];    System.arraycopy(fIdName,0,idName,0,fIdCount);    fIdName=idName;    int idElement[]=new int[idName.length];    System.arraycopy(fIdElement,0,idElement,0,fIdCount);    fIdElement=idElement;  }  fIdName[fIdCount]=name;  fIdElement[fIdCount]=elementNodeIndex;  fIdCount++;}  }
class C{  private void calculateColor(int coord){  coord=coord - mBarPointerHaloRadius;  if (coord > (mBarLength / 2) && (coord < mBarLength)) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,1 - (mPosToSVFactor * (coord - (mBarLength / 2)))});  } else   if (coord > 0 && coord < mBarLength) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],(mPosToSVFactor * coord),1f});  } else   if (coord == (mBarLength / 2)) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,1f});  } else   if (coord <= 0) {    mColor=Color.WHITE;  } else   if (coord >= mBarLength) {    mColor=Color.BLACK;  }}  }
class C{  public static void launchBatchProc(String cmdLine,String task,String filedir){  Process proc=null;  Process proctmp=null;  BufferedReader procStdout=null;  String line=null;  String tmpFile=filedir + "tmp.bat";  System.out.println("Running: " + cmdLine);  try {    FileWriter tmp=new FileWriter(tmpFile);    tmp.write(cmdLine);    tmp.close();    proctmp=Runtime.getRuntime().exec("chmod +x " + tmpFile);    proctmp.waitFor();    if (proctmp.exitValue() != 0) {      BufferedReader errReader=new BufferedReader(new InputStreamReader(proctmp.getErrorStream()));      while ((line=errReader.readLine()) != null) {        System.err.println("ERR> " + line);      }      errReader.close();      throw new RuntimeException(task + " computation failed on file [" + filedir+ "]!\n"+ "Command line was: [chmod +x "+ tmpFile+ "].");    }    proc=Runtime.getRuntime().exec(tmpFile);    InputStream procStdOut=proc.getInputStream();    InputStream procStdErr=proc.getErrorStream();    StreamLogger stdOutLogger=new StreamLogger(procStdOut,System.out);    StreamLogger stdErrLogger=new StreamLogger(procStdErr,System.err);    stdOutLogger.start();    stdErrLogger.start();    try {      stdOutLogger.join();      stdErrLogger.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }    proc.waitFor();    if (proc.exitValue() != 0) {      BufferedReader errReader=new BufferedReader(new InputStreamReader(proc.getErrorStream()));      while ((line=errReader.readLine()) != null) {        System.err.println("ERR> " + line);      }      errReader.close();      throw new RuntimeException(task + " computation failed on file [" + filedir+ "]!\n"+ "Command line was: ["+ cmdLine+ "].");    }    File batchFile=new File(tmpFile);    if (batchFile.exists()) {      batchFile.delete();    }  } catch (  IOException e) {    throw new RuntimeException(task + " computation provoked an IOException on file [" + filedir+ "].",e);  }catch (  InterruptedException e) {    throw new RuntimeException(task + " computation interrupted on file [" + filedir+ "].",e);  }}  }
class C{  public static Schema createSchema(final String schemaLocation) throws XMLException {  Schema schema=null;  final SchemaFactory schemaFactory=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);  try {    final File file=new File(schemaLocation);    if (file.exists()) {      schema=schemaFactory.newSchema(file);    } else {      final InputStream resourceAsStream=XMLParser.class.getResourceAsStream(schemaLocation);      if (resourceAsStream == null) {        throw new XMLException("Cannot load the schema from file or classpath - fix the schema or amend the location: " + schemaLocation);      }      schema=schemaFactory.newSchema(new StreamSource(resourceAsStream));    }    return schema;  } catch (  SAXException e) {    throw new XMLException("Cannot set the schema - please fix the schema or the location",e);  }}  }
class C{  public static <T extends Enum<T>>T stringToEnum(Location location,String fieldName,String value,Class<T> enumType) throws EvalException {  try {    return Enum.valueOf(enumType,value);  } catch (  IllegalArgumentException e) {    throw new EvalException(location,String.format("Invalid value '%s' for field '%s'. Valid values are: %s",value,fieldName,Joiner.on(", ").join(enumType.getEnumConstants())));  }}  }
class C{  public static Executor createTaskDistributor(){  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-"));}  }
class C{  public SecureAddAppEventQuery value(Integer value){  return unsafeParam("value",value);}  }
class C{  public Builder meanColumns(String... columns){  return add(ReduceOp.Mean,columns);}  }
class C{  public void stop(){  ThreadUtils.assertOnUiThread();  Log.d(TAG,"Disabling sync");  InvalidationController.get(mContext).stop();  mProfileSyncService.requestStop();  if (AndroidSyncSettings.isMasterSyncEnabled(mContext)) {    AndroidSyncSettings.disableChromeSync(mContext);  }}  }
class C{  public TDistribution(double degreesOfFreedom,double inverseCumAccuracy) throws MathIllegalArgumentException {  super(inverseCumAccuracy);  if (degreesOfFreedom <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DEGREES_OF_FREEDOM,degreesOfFreedom);  }  this.degreesOfFreedom=degreesOfFreedom;  final double n=degreesOfFreedom;  final double nPlus1Over2=(n + 1) / 2;  factor=Gamma.logGamma(nPlus1Over2) - 0.5 * (FastMath.log(FastMath.PI) + FastMath.log(n)) - Gamma.logGamma(n / 2);}  }
class C{  public UsersGetFollowersQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public OptimizedByteArrayOutputStream(int capacity){  if (capacity < 0)   throw new IllegalArgumentException("Negative initial size: " + capacity);  _buffer=new byte[capacity];}  }
class C{  public ConfigXmlProvider(InputStream configFile,String xmlPath) throws XmlParsingException {  this.config=XmlParser.parse(configFile,xmlPath,new String[]{CONFIG_XSD},CONFIG_PACKAGE,ConfigType.class);}  }
class C{  public XPathException(Throwable cause){  super();  this.cause=cause;  if (cause == null) {    throw new NullPointerException("cause can't be null");  }}  }
class C{  public boolean isEmpty(){  return buckets_.isEmpty();}  }
class C{  public String toStringMultiLine(){  return toStringMultiLine(false);}  }
class C{  public Matrix3f mult(Matrix3f mat){  return mult(mat,null);}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  public static boolean expressionIsTrue(String expression){  final JEP parser=getJep();  parser.parseExpression(expression);  return isEqual(parser.getValue(),1.0);}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mXAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=mRenderLimitLinesBuffer;  pts[0]=0;  pts[1]=0;  Path limitLinePath=mRenderLimitLinesPathBuffer;  limitLinePath.reset();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    pts[1]=l.getLimit();    mTrans.pointValuesToPixel(pts);    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);      float xOffset=Utils.dp2px(4f) + l.getXOffset();      float yOffset=l.getLineWidth() + labelLineHeight + l.getYOffset();      final LimitLine.LimitLabelPosition position=l.getLabelPosition();      if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] + yOffset,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.contentLeft() + xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] + yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public void recover() throws IOException {  if (version == 0)   return;  String fname=versionName(snapshotPrefix);  File file=new File(fname);  InputStream in=new BufferedInputStream(new FileInputStream(file));  try {    handler.recover(in);  } catch (  Exception e) {    throw new LogException("recovery failed",e);  } finally {    in.close();  }  snapshotBytes=file.length();  fname=versionName(logfilePrefix);  file=new File(fname);  DataInputStream din=new DataInputStream(new BufferedInputStream(new FileInputStream(file)));  long length=file.length();  try {    int updateLen=din.readInt();    if (updateLen == MAGIC) {      format=din.readInt();      if (format != FORMAT_PADDED) {        throw new LogException("corrupted log: bad log format");      }      logBytes+=(intBytes + intBytes);      updateLen=din.readInt();    }    while (true) {      if (updateLen == 0) {        break;      }      if (updateLen < 0) {        throw new LogException("corrupted log: bad update length");      }      if (length - logBytes - intBytes < updateLen) {        break;      }      try {        handler.readUpdate(new LogInputStream(din,updateLen));      } catch (      Exception e) {        throw new LogException("read update failed",e);      }      logBytes+=(intBytes + updateLen);      if (format == FORMAT_PADDED) {        int offset=(int)logBytes & 3;        if (offset > 0) {          offset=4 - offset;          logBytes+=offset;          din.skipBytes(offset);        }      }      updateLen=din.readInt();    }  } catch (  EOFException e) {  } finally {    din.close();  }  openLogFile();}  }
class C{  protected MessagesGetByIdQuery messageIds(List<Integer> value){  return unsafeParam("message_ids",value);}  }
class C{  public void saveCache(String url,byte[] bytes){  if (TextUtils.isEmpty(url) || null == bytes || bytes.length == 0) {    return;  }  if (!checkUrl(url)) {    return;  }  mInternalCache.putCache(url,bytes);}  }
class C{  public Map<String,Object> createContainer(Map<String,Object> request){  AssertUtil.assertNotNull(request.get("Cmd"),"Cmd");  Map<String,Object> response=new HashMap<>();  response.put("Id",String.format("%064d",idSequence.incrementAndGet()));  return response;}  }
class C{  private void compareTables(Table sortedTable,Table compareWith){  assertEquals("both tables have the same number of rows",sortedTable.rowCount(),compareWith.rowCount());  int maxRows=sortedTable.rowCount();  int numberOfColumns=sortedTable.columnCount();  for (int rowIndex=0; rowIndex < maxRows; rowIndex++) {    for (int columnIndex=0; columnIndex < numberOfColumns; columnIndex++) {      assertEquals("cells[" + rowIndex + ", "+ columnIndex+ "]  match",sortedTable.get(rowIndex,columnIndex),compareWith.get(rowIndex,columnIndex));    }  }}  }
class C{  @VisibleForTesting public static void ignoreBrowserProviderSystemPackageCheckForTests(boolean ignore){  sIgnoreBrowserProviderSystemPackageCheck=ignore;}  }
class C{  public boolean isShowLabel(){  if (showLabel == null) {    return false;  } else {    return showLabel;  }}  }
class C{  public JRangeSlider(int minimum,int maximum,int lowValue,int highValue,int orientation){  this(new DefaultBoundedRangeModel(lowValue,highValue - lowValue,minimum,maximum),orientation,LEFTRIGHT_TOPBOTTOM);}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public void addText(String sText){  String[] sWords=gr.demokritos.iit.jinsect.utils.splitToWords(sText);  java.util.Iterator iIter=java.util.Arrays.asList(sWords).iterator();  while (iIter.hasNext())   addWord((String)iIter.next());}  }
class C{  @Override public Node replaceChild(Node newChild,Node oldChild) throws DOMException {  if (newChild.getOwnerDocument() == null && newChild instanceof DocumentTypeImpl) {    ((DocumentTypeImpl)newChild).ownerDocument=this;  }  if (errorChecking && ((docType != null && oldChild.getNodeType() != Node.DOCUMENT_TYPE_NODE && newChild.getNodeType() == Node.DOCUMENT_TYPE_NODE) || (docElement != null && oldChild.getNodeType() != Node.ELEMENT_NODE && newChild.getNodeType() == Node.ELEMENT_NODE))) {    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null));  }  super.replaceChild(newChild,oldChild);  int type=oldChild.getNodeType();  if (type == Node.ELEMENT_NODE) {    docElement=(ElementImpl)newChild;  } else   if (type == Node.DOCUMENT_TYPE_NODE) {    docType=(DocumentTypeImpl)newChild;  }  return oldChild;}  }
class C{  public void addReader(String mimeType,CatalogReader reader){  if (readerMap.containsKey(mimeType)) {    Integer pos=(Integer)readerMap.get(mimeType);    readerArr.set(pos.intValue(),reader);  } else {    readerArr.add(reader);    Integer pos=new Integer(readerArr.size() - 1);    readerMap.put(mimeType,pos);  }}  }
class C{  private void unsubscribe(final Long processId){  LOGGER.trace("Unsubscribing from updates for Process " + processId);  if (jmsContainers.containsKey(processId)) {    DefaultMessageListenerContainer container=jmsContainers.get(processId);    container.shutdown();    jmsContainers.remove(processId);  } else {    LOGGER.warn("Attempt to remove an unrecognized JMS listener container.");  }}  }
class C{  public QueueReader listener(){  return (QueueReader)reader.clone();}  }
class C{  public TSDataScanDir filterUpgradable(){  return new TSDataScanDir(getDir(),getFiles().stream().filter(null).collect(Collectors.toList()));}  }
class C{  private void log(TaskId taskId,NotificationLevel notificationLevel,String message,boolean completed,Throwable exception){  notifier.notify(taskId,notificationLevel,message,completed);switch (notificationLevel) {case INFO:    log.info(message);  break;case WARN:log.warn(message,exception);break;case ERROR:log.error(message,exception);break;}}  }
class C{  public AemSidekick toggle(){  final boolean originalToggleState=isCollapsed();  bobcatWait.withTimeout(Timeouts.BIG).until(null,5);  return this;}  }
class C{  public void createNode(String parentNodePath,String nodeName,String nodeType,Map<String,Pair<String,Integer>> properties) throws RepositoryException {  LOG.debug("Creating node '{}' of type '{}' under '{}'",nodeName,nodeType,parentNodePath);  session.refresh(true);  Node parentNode=session.getNode(parentNodePath);  Node createdNode=parentNode.addNode(nodeName,nodeType);  if (properties != null) {    for (    Map.Entry<String,Pair<String,Integer>> mapEntry : properties.entrySet()) {      createdNode.setProperty(mapEntry.getKey(),mapEntry.getValue().getKey(),mapEntry.getValue().getValue());    }  }  session.save();}  }
class C{  public GroupsSetCallbackServerQuery serverUrl(String value){  return unsafeParam("server_url",value);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set flipH=");  boolean flip=np.getBoolean();  np.matchIgnoreCase(";");  getViewer().getPcoaTab().setFlipH(flip);  try {    getViewer().updateDistances();  } catch (  Exception ex) {    Basic.caught(ex);  }}  }
class C{  public void loadScript(){  if (script != null) {    return;  }  try {    script=FileCopyUtils.copyToString(new BufferedReader(new InputStreamReader(resourceLoader.getResource(resourceLocation).getInputStream())));  } catch (  IOException e) {    throw new ScriptingException("Failed to load script resource [" + resourceLocation + "]",e);  }}  }
class C{  public boolean verbosegc(){  return soot.PhaseOptions.getBoolean(options,"verbosegc");}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  private void deleteStorePath(){  FileFactory.FileType fileType=FileFactory.getFileType(this.carbonStorePath);  CarbonFile carbonFile=FileFactory.getCarbonFile(this.carbonStorePath,fileType);  deleteRecursiveSilent(carbonFile);}  }
class C{  @Deployment(resources={"org/activiti/engine/test/history/oneTaskProcess.bpmn20.xml"}) public void testQueryHistoricTaskIncludeBinaryVariable() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",Collections.singletonMap("binaryVariable",(Object)"It is I, le binary".getBytes()));  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.setVariableLocal(task.getId(),"binaryTaskVariable",(Object)"It is I, le binary".getBytes());  taskService.complete(task.getId());  HistoricTaskInstance historicTask=historyService.createHistoricTaskInstanceQuery().taskId(task.getId()).includeProcessVariables().singleResult();  assertNotNull(historicTask);  assertNotNull(historicTask.getProcessVariables());  byte[] bytes=(byte[])historicTask.getProcessVariables().get("binaryVariable");  assertEquals("It is I, le binary",new String(bytes));  historicTask=historyService.createHistoricTaskInstanceQuery().taskId(task.getId()).includeTaskLocalVariables().singleResult();  assertNotNull(historicTask);  assertNotNull(historicTask.getTaskLocalVariables());  bytes=(byte[])historicTask.getTaskLocalVariables().get("binaryTaskVariable");  assertEquals("It is I, le binary",new String(bytes));}  }
class C{  public boolean gotoFirst(){  if (!searchInCollapsed) {    final List<Integer> list=mainViewer.computeDisplayedIdsInSearchOrder();    currentTaxonIterator=list.iterator();    numberOfObjects=list.size();  } else {    final List<Integer> list=mainViewer.computeAllIdsInSearchOrder();    currentTaxonIterator=list.iterator();    numberOfObjects=list.size();  }  currentTaxonId=(currentTaxonIterator.hasNext() ? currentTaxonIterator.next() : null);  return isCurrentSet();}  }
class C{  protected void actionPerformed(GuiButton par1GuiButton){  if (par1GuiButton.enabled) {    if (par1GuiButton.id < 200 && par1GuiButton instanceof GuiSmallButtonEx) {      VRSettings.VrOptions num=VRSettings.VrOptions.getEnumOptions(par1GuiButton.id);      this.guivrSettings.setOptionValue(((GuiSmallButtonEx)par1GuiButton).returnVrEnumOptions(),1);      par1GuiButton.displayString=this.guivrSettings.getKeyBinding(VRSettings.VrOptions.getEnumOptions(par1GuiButton.id));    } else     if (par1GuiButton.id == ID_GENERIC_DONE) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(this.parentGuiScreen);    } else     if (par1GuiButton.id == ID_GENERIC_DEFAULTS) {      this.guivrSettings.hudDistance=1.25f;      this.guivrSettings.hudScale=1.5f;      this.guivrSettings.hudPitchOffset=-2f;      this.guivrSettings.hudYawOffset=0f;      this.guivrSettings.hideGui=false;      this.guivrSettings.hudOpacity=0.95f;      this.guivrSettings.menuBackground=false;      this.guivrSettings.vrHudLockMode=guivrSettings.HUD_LOCK_WRIST;      this.guivrSettings.hudOcclusion=false;      Minecraft.getMinecraft().vrSettings.saveOptions();      this.reinit=true;    }  }}  }
class C{  @Override public void startGeneralEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>startGeneralEntity (" + name + ")");    if (DEBUG_BASEURI) {      System.out.println("   expandedSystemId( **baseURI): " + identifier.getExpandedSystemId());      System.out.println("   baseURI:" + identifier.getBaseSystemId());    }  }  if (!fDeferNodeExpansion) {    if (fFilterReject) {      return;    }    setCharacterData(true);    EntityReference er=fDocument.createEntityReference(name);    if (fDocumentImpl != null) {      EntityReferenceImpl erImpl=(EntityReferenceImpl)er;      erImpl.setBaseURI(identifier.getExpandedSystemId());      if (fDocumentType != null) {        NamedNodeMap entities=fDocumentType.getEntities();        fCurrentEntityDecl=(EntityImpl)entities.getNamedItem(name);        if (fCurrentEntityDecl != null) {          fCurrentEntityDecl.setInputEncoding(encoding);        }      }      erImpl.needsSyncChildren(false);    }    fInEntityRef=true;    fCurrentNode.appendChild(er);    fCurrentNode=er;  } else {    int er=fDeferredDocumentImpl.createDeferredEntityReference(name,identifier.getExpandedSystemId());    if (fDocumentTypeIndex != -1) {      int node=fDeferredDocumentImpl.getLastChild(fDocumentTypeIndex,false);      while (node != -1) {        short nodeType=fDeferredDocumentImpl.getNodeType(node,false);        if (nodeType == Node.ENTITY_NODE) {          String nodeName=fDeferredDocumentImpl.getNodeName(node,false);          if (nodeName.equals(name)) {            fDeferredEntityDecl=node;            fDeferredDocumentImpl.setInputEncoding(node,encoding);            break;          }        }        node=fDeferredDocumentImpl.getRealPrevSibling(node,false);      }    }    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,er);    fCurrentNodeIndex=er;  }}  }
class C{  private void addFields(SimpleFeatureTypeBuilder b,List<DataSourceFieldInterface> fieldList){  for (  DataSourceFieldInterface field : fieldList) {    if (isGeometryField(field.getFieldType())) {      geometryField.setGeometryFieldName(field.getName());    } else {      b.add(field.getName(),field.getFieldType());    }  }}  }
class C{  @Override public int hashCode(){  int code=fName.hashCode();  if (fTargetNamespace != null)   code=(code << 16) + fTargetNamespace.hashCode();  return code;}  }
class C{  public void addParent(Permission perm,boolean value){  perm.getChildren().put(getName(),value);  perm.recalculatePermissibles();}  }
class C{  public boolean isFixed(int row){  return getBoolean(row,VisualItem.FIXED);}  }
class C{  public static String readWord(DataInputStream dis) throws IOException {  StringBuilder sb=new StringBuilder();  char c;  do {    c=readChar(dis);  } while (Character.isWhitespace(c));  do {    sb.append(c);    c=readChar(dis);  } while (!Character.isWhitespace(c));  return sb.toString();}  }
class C{  private AudioMapType generateDefaultAudioMap(String locale){  AudioMapType audioMap=new AudioMapType();  audioMap.setMainAudio(new MainAudioType());  audioMap.getMainAudio().setLocale(locale);  audioMap.getMainAudio().setName("main-audio.mov");  if (!fillDefaultAudioMapFromDescriptor(audioMap)) {    setAudioMapDefaultOptions(audioMap);  }  return audioMap;}  }
class C{  public static boolean readBool(byte b){  if (b == 0) {    return true;  } else {    return false;  }}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  public double distinctValues(){  return distVals;}  }
class C{  public LSFInterpolator(int p,double r){  super(p);  if (r < 0 || r > 1)   throw new IllegalArgumentException("Mixing ratio r must be between 0 and 1");  this.r=r;}  }
class C{  private void createUI(){  readConfigFileNoScrollPane(null,this,"symboltype/TTFSymbol.xml");  registerForTextFieldButton(FieldIdEnum.TTF_SYMBOL,this);}  }
class C{  @Override public void write(byte b[],int off,int len){  if (len == 0)   return;  ensureCapacity(len);  System.arraycopy(b,off,_buffer,_count,len);  _count+=len;}  }
class C{  public static List<Map<Object,Object>> sortMaps(List<Map<Object,Object>> listOfMaps,List<? extends String> sortKeys){  if (listOfMaps == null || sortKeys == null)   return null;  List<Map<Object,Object>> toSort=new ArrayList<Map<Object,Object>>(listOfMaps.size());  toSort.addAll(listOfMaps);  try {    MapComparator mc=new MapComparator(sortKeys);    Collections.sort(toSort,mc);  } catch (  Exception e) {    Debug.logError(e,"Problems sorting list of maps; returning null.",module);    return null;  }  return toSort;}  }
class C{  private static String convertRelevance(int relevance){  StringBuilder sb=new StringBuilder();  while (relevance > 0) {    sb.insert(0,REVERSE_CHAR_MAP[relevance % 10]);    relevance=relevance / 10;  }  return sb.toString();}  }
class C{  @Override public void revertToDefaultValue(){}  }
class C{  public void init$Children(){  children=new ASTNode[5];  setChild(new List(),1);  setChild(new Opt(),2);  setChild(new List(),3);  setChild(new List(),4);}  }
class C{  public void testQueryExcludeSubtasks() throws Exception {  TaskQuery query=taskService.createTaskQuery();  assertEquals(10,query.count());  assertEquals(10,query.list().size());  query=taskService.createTaskQuery().excludeSubtasks();  assertEquals(3,query.count());  assertEquals(3,query.list().size());}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  AfterImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new AfterExtended();  } else {    filter=new AfterExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_REMOVE_ITEM_OPTION_INVALID_OPTION_SLOT_NUMBER(String value0){  return new SM_SYSTEM_MESSAGE(1300471,value0);}  }
class C{  public void addSimpleMethod(SimpleMethod method){  this.simpleMethodNameSet.add(method.getLocationAndName());}  }
class C{  public <T>ForEach<T> forEach(Task<T> task){  return new ForEach<>(this.executor_,task);}  }
class C{  public ArrayRealVector(ArrayRealVector v1,RealVector v2){  final int l1=v1.data.length;  final int l2=v2.getDimension();  data=new double[l1 + l2];  System.arraycopy(v1.data,0,data,0,l1);  for (int i=0; i < l2; ++i) {    data[l1 + i]=v2.getEntry(i);  }}  }
class C{  public DatabaseGetCountriesQuery code(String value){  return unsafeParam("code",value);}  }
class C{  public int addNewSegment(){  return addNewSegment(0);}  }
class C{  public static void saveCredentials(String server,String user,String password){  server=server.replaceAll("/MeganServer$","");  server2Credentials.put(server,new Pair<>(user,password));  saveCredentialsToProperties();}  }
class C{  public void addFixedTimeStatistic(String message,long timetaken){  this.timeTaken=timetaken;  this.message=message;}  }
class C{  default boolean hasDataFromTls(){  return false;}  }
class C{  protected void draw(Graphics2D gc,Dimension size){  if (gc != null && doc.getNumberOfSamples() > 1) {    boolean vertical=viewer.getShowLegend().equals("vertical");    if (getFont() != null)     gc.setFont(getFont());    boolean doDraw=(size == null);    int yStart=20;    int x=3;    int maxX=x;    if (doDraw) {      String legend="Legend:";      gc.setColor(Color.BLACK);      gc.drawString(legend,x,yStart);      Dimension labelSize=Basic.getStringSize(gc,legend,gc.getFont()).getSize();      maxX=Math.max(maxX,labelSize.width);    }    int y=yStart + (int)(1.5 * gc.getFont().getSize());    int count=1;    for (    String sampleName : doc.getSampleNames()) {      String label=doc.getSampleLabelGetter().getLabel(sampleName);      if (!label.equals(sampleName))       label+=" (" + sampleName + ")";      if (style == NodeDrawer.Style.HeatMap) {        label=count + ": " + label;      }      final Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      int boxSize=0;      if (style != NodeDrawer.Style.HeatMap)       boxSize=labelSize.height - 2;      if (x + 12 + labelSize.width+ 2 > getWidth() || vertical) {        x=3;        y+=1.5 * gc.getFont().getSize();      }      if (doDraw) {switch (style) {case PieChart:case BarChart:case CoxComb:{            Color color=doc.getSampleAttributeTable().getSampleColor(sampleName);            if (color == null)             color=doc.getChartColorManager().getSampleColor(sampleName);            gc.setColor(color);            gc.fillRect(x,y - boxSize,boxSize,boxSize);            gc.setColor(color.darker());            gc.drawRect(x,y - boxSize,boxSize,boxSize);            break;          }case Circle:{          gc.setColor(Color.DARK_GRAY);          gc.drawRect(x,y - boxSize,boxSize,boxSize);          break;        }case HeatMap:{        break;      }  }  gc.setColor(getFontColor());  gc.drawString(label,x + boxSize + 2,y);}x+=boxSize + 2 + labelSize.width+ 10;maxX=Math.max(maxX,x);if (vertical) maxX=Math.max(maxX,x);count++;}if (size != null) size.setSize(maxX,y);}}  }
class C{  public void print(){  for (int i=0; i < components.length; i++) {    System.out.println("Component " + i + ":");    components[i].print();  }}  }
class C{  public synchronized int size(){  return count;}  }
class C{  private void handleSearchRequest(Operation op){  URI registryAdapterUri=HostInitRegistryAdapterServiceConfig.registryAdapterReference;  AssertUtil.assertNotNull(registryAdapterUri,"registryAdapterReference");  Map<String,String> queryParams=UriUtils.parseUriQueryParams(op.getUri());  String group=queryParams.remove(TENANT_LINKS_PARAM_NAME);  logFine("Search in group: " + group);  Consumer<Collection<String>> registryLinksConsumer=null;  Consumer<Collection<Throwable>> failureConsumer=null;  RegistryService.forEachRegistry(getHost(),group,registryLinksConsumer,failureConsumer);}  }
class C{  private boolean saveBitmap(String fullPath,Bitmap bitmap){  if (fullPath == null || bitmap == null)   return false;  boolean fileCreated=false;  boolean bitmapCompressed=false;  boolean streamClosed=false;  File imageFile=new File(fullPath);  if (imageFile.exists())   if (!imageFile.delete())   return false;  try {    fileCreated=imageFile.createNewFile();  } catch (  IOException e) {    e.printStackTrace();  }  FileOutputStream out=null;  try {    out=new FileOutputStream(imageFile);    bitmapCompressed=bitmap.compress(CompressFormat.PNG,100,out);  } catch (  Exception e) {    e.printStackTrace();    bitmapCompressed=false;  } finally {    if (out != null) {      try {        out.flush();        out.close();        streamClosed=true;      } catch (      IOException e) {        e.printStackTrace();        streamClosed=false;      }    }  }  return (fileCreated && bitmapCompressed && streamClosed);}  }
class C{  public static boolean canDebugAppOnDevice(@NotNull AndroidFacet facet,@NotNull IDevice device){  if (device.isEmulator()) {    return true;  }  Boolean isDebuggable=AndroidModuleInfo.get(facet).isDebuggable();  if (isDebuggable != null && isDebuggable) {    return true;  }  String buildType=device.getProperty(IDevice.PROP_BUILD_TYPE);  if ("userdebug".equals(buildType) || "eng".equals(buildType)) {    return true;  }  return false;}  }
class C{  public String toString(){  return new String(getType() + " with current value: " + getValue()+ " "+ units+ " (range: "+ minimum+ " - "+ maximum+ ")");}  }
class C{  public ArrayRealVector(ArrayRealVector v1,ArrayRealVector v2){  data=new double[v1.data.length + v2.data.length];  System.arraycopy(v1.data,0,data,0,v1.data.length);  System.arraycopy(v2.data,0,data,v1.data.length,v2.data.length);}  }
class C{  public final TestSubscriber<T> assertNotSubscribed(){  int s=subscriptionCount;  if (s == 1) {    throw new AssertionError("OnSubscribe called once",null);  }  if (s > 1) {    throw new AssertionError("OnSubscribe called multiple times: " + s,null);  }  return this;}  }
class C{  public XMLParseException(XMLLocator locator,String message,Exception exception){  super(message,exception);  if (locator != null) {    fPublicId=locator.getPublicId();    fLiteralSystemId=locator.getLiteralSystemId();    fExpandedSystemId=locator.getExpandedSystemId();    fBaseSystemId=locator.getBaseSystemId();    fLineNumber=locator.getLineNumber();    fColumnNumber=locator.getColumnNumber();    fCharacterOffset=locator.getCharacterOffset();  }}  }
class C{  public void removeAdditionalPartyRole(String partyId,String roleTypeId){  List<String> parties=additionalPartyRole.get(roleTypeId);  if (parties != null) {    Iterator<String> it=parties.iterator();    while (it.hasNext()) {      if ((it.next()).equals(partyId)) {        it.remove();        if (parties.isEmpty()) {          additionalPartyRole.remove(roleTypeId);        }        return;      }    }  }}  }
class C{  DenseWeightedEvaluation(final Evaluation unweighted,final RealMatrix weightSqrt){  super(weightSqrt.getColumnDimension());  this.unweighted=unweighted;  this.weightSqrt=weightSqrt;}  }
class C{  public Object clone(){  ConditionedRuleExpression clone=(ConditionedRuleExpression)super.clone();  clone.conditions=new ArrayList<IRuleCondition>();  Iterator<IRuleCondition> i=conditions.iterator();  while (i.hasNext()) {    final IRuleCondition condition=i.next();    clone.conditions.add((IRuleCondition)condition.clone());  }  return clone;}  }
class C{  public IntIterator rangeSortedBy(String field,double lo,double hi,int indexType){  Index index=getIndex(field,double.class,true);  return index.rows(lo,hi,indexType);}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  static void scheduleAt(Activity a,long startTime){  getInstance()._schedule(a,startTime);}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"MY_COLLECTION\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"COLLECTION_TYPE\" TEXT,"+ "\"CATEGORY\" TEXT,"+ "\"LINK_URL\" TEXT,"+ "\"BANGUMI_ID\" TEXT,"+ "\"NORMAL_IMAGE_URL\" TEXT,"+ "\"COVER_IMAGE_URL\" TEXT,"+ "\"LARGE_IMAGE_URL\" TEXT,"+ "\"NORMAL_NAME\" TEXT,"+ "\"SMALL_NAME\" TEXT,"+ "\"INFO\" TEXT,"+ "\"RATE_NUMBER\" TEXT,"+ "\"RATE_TOTAL\" TEXT,"+ "\"COMMENT\" TEXT,"+ "\"AIR_DAY\" TEXT);");}  }
class C{  public BoardGetTopicsQuery(VkApiClient client,int groupId){  super(client,"board.getTopics",GetTopicsResponse.class);  groupId(groupId);}  }
class C{  private void drawDownLoading(Canvas canvas,RectF arcBounds){  final float progress_degree=mProgress;  publicPaint.setColor(getProgressColor());  if (progress_degree <= 0) {    canvas.drawPoint(mRealLeft + radius,mRealTop,publicPaint);  } else {    canvas.drawArc(arcBounds,START_ANGLE,(progress_degree) * TOTAL_ANGLE,false,publicPaint);  }  drawText(canvas,progress_degree);}  }
class C{  public Builder(LatLng center,Number zoom,Number minZoom){  this.center=center;  this.zoom=zoom;  this.minZoom=minZoom;}  }
class C{  private void registerHealthChecks(DimensionConfig dimension){  healthCheckRegistry.register(dimension.getApiName() + " keyValueStore check",new KeyValueStoreHealthCheck(dimension.getKeyValueStore()));  healthCheckRegistry.register(dimension.getApiName() + " searchProvider check",new SearchProviderHealthCheck(dimension.getSearchProvider()));}  }
class C{  protected XMLDocumentScanner createDocumentScanner(){  return null;}  }
class C{  public void collapse(){  boolean verbose=pag.getOpts().verbose();  if (verbose) {    G.v().out.println("Total VarNodes: " + pag.getVarNodeNumberer().size() + ". Collapsing SCCs...");  }  new TopoSorter(pag,ignoreTypes).sort();  TreeSet<VarNode> s=new TreeSet<VarNode>();  for (  final VarNode v : pag.getVarNodeNumberer()) {    s.add(v);  }  for (  VarNode v : s) {    dfsVisit(v,v);  }  if (verbose) {    G.v().out.println("" + numCollapsed + " nodes were collapsed.");  }  visited=null;}  }
class C{  private boolean isValidIp(String s){  return Patterns.IP_ADDRESS.matcher(s).matches();}  }
class C{  @deprecated public LanguageMatcherData freeze(){  return this;}  }
class C{  private void readSortIndexFile(DictionaryInfo dictionaryInfo,ColumnIdentifier columnIdentifier) throws IOException {  CarbonDictionarySortIndexReader sortIndexReader=getSortIndexReader(columnIdentifier);  try {    dictionaryInfo.setSortOrderIndex(sortIndexReader.readSortIndex());    dictionaryInfo.setSortReverseOrderIndex(sortIndexReader.readInvertedSortIndex());  }  finally {    sortIndexReader.close();  }}  }
class C{  public boolean displayNotification(){  return true;}  }
class C{  public PhotosEditCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEEK_FORE_CAST\"";  db.execSQL(sql);}  }
class C{  public Matrix(int m,int n){  this.m=m;  this.n=n;  A=new double[m][n];}  }
class C{  public Node<K,V> first(){  Node<K,V> node=this;  Node<K,V> child=node.left;  while (child != null) {    node=child;    child=node.left;  }  return node;}  }
class C{  public boolean contains(Object o){  return objectToInts.containsKey(o);}  }
class C{  public void snapshot() throws IOException {  int oldVersion=version;  version++;  String fname=versionName(snapshotPrefix);  File snapshotFile=new File(fname);  FileOutputStream out=new FileOutputStream(snapshotFile);  try {    try {      handler.snapshot(out);      out.getFD().sync();    } catch (    Exception e) {      throw new LogException("snapshot failed",e);    }    snapshotBytes=snapshotFile.length();  }  finally {    out.close();  }  logBytes=0;  openLogFile();  writeVersionFile();  deleteSnapshot(oldVersion);  deleteLogFile(oldVersion);}  }
class C{  public Array2DRowRealMatrix(final int rowDimension,final int columnDimension) throws MathIllegalArgumentException {  super(rowDimension,columnDimension);  data=new double[rowDimension][columnDimension];}  }
class C{  public JsonPrimitive(Boolean bool){  setValue(bool);}  }
class C{  public TShortLongHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  @Nullable private static ArtifactDependencySpec findNewExternalDependency(@NotNull Project project,@NotNull Library library){  if (library.getName() == null) {    return null;  }  ArtifactDependencySpec result=null;  for (  Module module : ModuleManager.getInstance(project).getModules()) {    AndroidGradleModel androidGradleModel=AndroidGradleModel.get(module);    if (androidGradleModel != null && findLibrary(module,library.getName()) != null) {      result=findNewExternalDependency(library,androidGradleModel);      break;    }  }  if (result == null) {    result=findNewExternalDependencyByExaminingPath(library);  }  return result;}  }
class C{  private float sweep(float tan1X,float tan1Y,float tan2X,float tan2Y){  final float minorSweep=(float)Math.toDegrees(2 * (Math.asin(.5 * Geometry.distance(tan1X,tan1Y,tan2X,tan2Y) / mScaledTouchSlop)));  return 360 - minorSweep;}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  private void ensureDependenciesResolved(){  getDomainPermissions(sysDomain);}  }
class C{  public void resourceSyncInfoChanged(IResource[] changedResources){  for (int i=0; i < changedResources.length; i++) {    if (resource != null && changedResources[i].equals(resource.getIResource())) {      refresh();    }  }}  }
class C{  public boolean hasOnlyOneRule(){  boolean oneRule=false;  StyledLayer[] styledLayers=sld.getStyledLayers();  int noOfRules=0;  if (styledLayers != null) {    for (    StyledLayer styledLayer : styledLayers) {      List<Style> styleList=null;      if (styledLayer instanceof NamedLayerImpl) {        NamedLayerImpl namedLayerImpl=(NamedLayerImpl)styledLayer;        styleList=namedLayerImpl.styles();      } else       if (styledLayer instanceof UserLayerImpl) {        UserLayerImpl userLayerImpl=(UserLayerImpl)styledLayer;        styleList=userLayerImpl.userStyles();      }      if (styleList != null) {        for (        Style style : styleList) {          for (          FeatureTypeStyle fts : style.featureTypeStyles()) {            noOfRules+=fts.rules().size();          }        }      }    }  }  oneRule=(noOfRules == 1);  logger.debug(String.format("Number of rules : %d",noOfRules));  return oneRule;}  }
class C{  private void renderBody(GL2 gl,SandboxBody body){  RenderUtilities.pushTransform(gl);  RenderUtilities.applyTransform(gl,body.getTransform());  if (body.getFixtureCount() > 1) {    if (Preferences.isBodyStenciled()) {      body.stencil(gl);    } else {      body.render(gl);    }  } else {    body.render(gl);  }  if (Preferences.isBodyNormalEnabled()) {    body.renderNormals(gl);  }  if (Preferences.isBodyRotationDiscEnabled()) {    body.renderRotationDisc(gl);  }  if (Preferences.isBodyCenterEnabled()) {    body.renderCenter(gl);  }  RenderUtilities.popTransform(gl);  if (Preferences.isBodyVelocityEnabled()) {    body.renderVelocity(gl);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_ABYSS_POINT_GAIN(int num0){  return new SM_SYSTEM_MESSAGE(1320000,num0);}  }
class C{  private static StreamTokenizer createTokenizer(String s){  StreamTokenizer st=new StreamTokenizer(new StringReader(s));  st.resetSyntax();  st.wordChars('a','z');  st.wordChars('A','Z');  st.wordChars('.','.');  st.wordChars('0','9');  st.wordChars('_','_');  st.wordChars('$','$');  st.wordChars(128 + 32,255);  st.whitespaceChars(0,' ');  st.lowerCaseMode(false);  st.ordinaryChar('/');  st.slashSlashComments(false);  st.slashStarComments(false);  return st;}  }
class C{  public static boolean isCheckedException(Throwable ex){  return !(ex instanceof RuntimeException || ex instanceof Error);}  }
class C{  private void installSelectorForProtocol(ProtocolDispatchSelector ps,Properties settings,String protocol) throws NumberFormatException {  String proxyHost=settings.getProperty("network.proxy." + protocol,null);  int proxyPort=Integer.parseInt(settings.getProperty("network.proxy." + protocol + "_port","0"));  if (proxyHost != null && proxyPort != 0) {    Logger.log(getClass(),LogLevel.TRACE,"Firefox " + protocol + " proxy is {0}:{1}",proxyHost,proxyPort);    ps.setSelector(protocol,new FixedProxySelector(proxyHost,proxyPort));  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void forceDeleteOnExit(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectoryOnExit(file);  } else {    file.deleteOnExit();  }}  }
class C{  public Map<String,Object> runSync(String localName,ModelService modelService,Map<String,? extends Object> params,boolean validateOut) throws ServiceAuthException, ServiceValidationException, GenericServiceException {  long serviceStartTime=System.currentTimeMillis();  Map<String,Object> result=new HashMap<String,Object>();  ServiceSemaphore lock=null;  Map<String,List<ServiceEcaRule>> eventMap=null;  Map<String,Object> ecaContext=null;  RunningService rs=null;  DispatchContext ctx=localContext.get(localName);  GenericEngine engine=null;  Transaction parentTransaction=null;  boolean isFailure=false;  boolean isError=false;  boolean beganTrans=false;  try {    if ("wait".equals(modelService.semaphore) || "fail".equals(modelService.semaphore)) {      lock=new ServiceSemaphore(delegator,modelService);      lock.acquire();    }    if (Debug.verboseOn() || modelService.debug) {      Debug.logVerbose("[ServiceDispatcher.runSync] : invoking service " + modelService.name + " ["+ modelService.location+ "/"+ modelService.invoke+ "] ("+ modelService.engineName+ ")",module);    }    Map<String,Object> context=new HashMap<String,Object>();    if (params != null) {      context.putAll(params);    }    Locale locale=this.checkLocale(context);    rs=this.logService(localName,modelService,GenericEngine.SYNC_MODE);    eventMap=ServiceEcaUtil.getServiceEventMap(modelService.name);    engine=this.getGenericEngine(modelService.engineName);    modelService.updateDefaultValues(context,ModelService.IN_PARAM);    if (modelService.useTransaction) {      if (TransactionUtil.isTransactionInPlace()) {        if (modelService.requireNewTransaction) {          parentTransaction=TransactionUtil.suspend();          if (TransactionUtil.isTransactionInPlace()) {            throw new GenericTransactionException("In service " + modelService.name + " transaction is still in place after suspend, status is "+ TransactionUtil.getStatusString());          }          beganTrans=TransactionUtil.begin(modelService.transactionTimeout);        }      } else {        beganTrans=TransactionUtil.begin(modelService.transactionTimeout);      }      if (beganTrans && TransactionUtil.debugResources()) {        DebugXaResource dxa=new DebugXaResource(modelService.name);        try {          dxa.enlist();        } catch (        Exception e) {          Debug.logError(e,module);        }      }    }    try {      int lockRetriesRemaining=LOCK_RETRIES;      boolean needsLockRetry=false;      do {        needsLockRetry=false;        lockRetriesRemaining--;        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"global-rollback",ctx,context,result,isError,isFailure);        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"global-commit",ctx,context,result,isError,isFailure);        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"auth",ctx,context,result,isError,isFailure);        isFailure=ServiceUtil.isFailure(result);        isError=ServiceUtil.isError(result);        context=checkAuth(localName,context,modelService);        GenericValue userLogin=(GenericValue)context.get("userLogin");        if (modelService.auth && userLogin == null) {          throw new ServiceAuthException("User authorization is required for this service: " + modelService.name + modelService.debugInfo());        }        if (userLogin != null && userLogin.getString("userLoginId") != null) {          GenericDelegator.pushUserIdentifier(userLogin.getString("userLoginId"));        }        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"in-validate",ctx,context,result,isError,isFailure);        isFailure=ServiceUtil.isFailure(result);        isError=ServiceUtil.isError(result);        if (modelService.validate && !isError && !isFailure) {          try {            modelService.validate(context,ModelService.IN_PARAM,locale);          } catch (          ServiceValidationException e) {            Debug.logError(e,"Incoming context (in runSync : " + modelService.name + ") does not match expected requirements",module);            throw e;          }        }        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"invoke",ctx,context,result,isError,isFailure);        isFailure=ServiceUtil.isFailure(result);        isError=ServiceUtil.isError(result);        if (!isError && !isFailure) {          Map<String,Object> invokeResult=null;          invokeResult=engine.runSync(localName,modelService,context);          engine.sendCallbacks(modelService,context,invokeResult,GenericEngine.SYNC_MODE);          if (invokeResult != null) {            result.putAll(invokeResult);          } else {            Debug.logWarning("Service (in runSync : " + modelService.name + ") returns null result",module);          }        }        isFailure=ServiceUtil.isFailure(result);        isError=ServiceUtil.isError(result);        if (beganTrans) {          String errMsg=ServiceUtil.getErrorMessage(result);          if (errMsg != null && errMsg.toUpperCase().indexOf("DEADLOCK") >= 0) {            String retryMsg="RETRYING SERVICE [" + modelService.name + "]: Deadlock error found in message ["+ errMsg+ "]; retry ["+ (LOCK_RETRIES - lockRetriesRemaining)+ "] of ["+ LOCK_RETRIES+ "]";            TransactionUtil.rollback(beganTrans,retryMsg,null);            beganTrans=TransactionUtil.begin(modelService.transactionTimeout);            if (beganTrans && TransactionUtil.debugResources()) {              DebugXaResource dxa=new DebugXaResource(modelService.name);              try {                dxa.enlist();              } catch (              Exception e) {                Debug.logError(e,module);              }            }            if (!beganTrans) {              Debug.logError("After rollback attempt for lock retry did not begin a new transaction!",module);            } else {              needsLockRetry=true;              result=new HashMap<String,Object>();              isFailure=false;              isError=false;              Debug.logWarning(retryMsg,module);            }            if (errMsg != null && (errMsg.indexOf("A lock could not be obtained within the time requested") >= 0 || errMsg.indexOf("Lock wait timeout exceeded") >= 0)) {            }          }        }      } while (needsLockRetry && lockRetriesRemaining > 0);      ecaContext=new HashMap<String,Object>();      ecaContext.putAll(context);      ecaContext.putAll(result);      modelService.updateDefaultValues(context,ModelService.OUT_PARAM);      if (modelService.validate && validateOut) {        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"out-validate",ctx,ecaContext,result,isError,isFailure);        try {          modelService.validate(result,ModelService.OUT_PARAM,locale);        } catch (        ServiceValidationException e) {          throw new GenericServiceException("Outgoing result (in runSync : " + modelService.name + ") does not match expected requirements",e);        }      }      if (eventMap != null)       ServiceEcaUtil.evalRules(modelService.name,eventMap,"commit",ctx,ecaContext,result,isError,isFailure);      isFailure=ServiceUtil.isFailure(result);      isError=ServiceUtil.isError(result);      if (eventMap != null)       ServiceEcaUtil.evalRules(modelService.name,eventMap,"global-commit-post-run",ctx,ecaContext,result,isError,isFailure);      if (isFailure) {        Debug.logWarning("Service Failure [" + modelService.name + "]: "+ ServiceUtil.getErrorMessage(result),module);      }    } catch (    Throwable t) {      if (Debug.timingOn()) {        UtilTimer.closeTimer(localName + " / " + modelService.name,"Sync service failed...",module);      }      String errMsg="Service [" + modelService.name + "] threw an unexpected exception/error";      engine.sendCallbacks(modelService,context,t,GenericEngine.SYNC_MODE);      try {        TransactionUtil.rollback(beganTrans,errMsg,t);      } catch (      GenericTransactionException te) {        Debug.logError(te,"Cannot rollback transaction",module);      }      rs.setEndStamp();      if (t instanceof ServiceAuthException) {        throw (ServiceAuthException)t;      } else       if (t instanceof ServiceValidationException) {        throw (ServiceValidationException)t;      } else       if (t instanceof GenericServiceException) {        throw (GenericServiceException)t;      } else {        throw new GenericServiceException("Service [" + modelService.name + "] Failed"+ modelService.debugInfo(),t);      }    } finally {      if (isError) {        String errMsg="Error in Service [" + modelService.name + "]: "+ ServiceUtil.getErrorMessage(result);        Debug.logError(errMsg,module);        try {          TransactionUtil.rollback(beganTrans,errMsg,null);        } catch (        GenericTransactionException e) {          Debug.logError(e,"Could not rollback transaction: " + e.toString(),module);        }      } else {        try {          TransactionUtil.commit(beganTrans);        } catch (        GenericTransactionException e) {          GenericDelegator.popUserIdentifier();          String errMsg="Could not commit transaction for service [" + modelService.name + "] call";          Debug.logError(e,errMsg,module);          if (e.getMessage() != null) {            errMsg=errMsg + ": " + e.getMessage();          }          throw new GenericServiceException(errMsg);        }      }      modelService.evalNotifications(this.getLocalContext(localName),context,result);      GenericDelegator.popUserIdentifier();    }  } catch (  GenericTransactionException te) {    Debug.logError(te,"Problems with the transaction",module);    throw new GenericServiceException("Problems with the transaction.",te.getNested());  } finally {    if (lock != null) {      try {        lock.release();      } catch (      GenericServiceException e) {        Debug.logWarning(e,"Exception thrown while unlocking semaphore: ",module);      }    }    if (parentTransaction != null) {      try {        TransactionUtil.resume(parentTransaction);      } catch (      GenericTransactionException ite) {        Debug.logWarning(ite,"Transaction error, not resumed",module);        throw new GenericServiceException("Resume transaction exception, see logs");      }    }  }  if (eventMap != null)   ServiceEcaUtil.evalRules(modelService.name,eventMap,"return",ctx,ecaContext,result,isError,isFailure);  rs.setEndStamp();  long timeToRun=System.currentTimeMillis() - serviceStartTime;  long showServiceDurationThreshold=UtilProperties.getPropertyAsLong("service","showServiceDurationThreshold",0);  long showSlowServiceThreshold=UtilProperties.getPropertyAsLong("service","showSlowServiceThreshold",1000);  if (Debug.timingOn() && timeToRun > showServiceDurationThreshold) {    Debug.logTiming("Sync service [" + localName + "/"+ modelService.name+ "] finished in ["+ timeToRun+ "] milliseconds",module);  } else   if (Debug.infoOn() && timeToRun > showSlowServiceThreshold) {    Debug.logTiming("Slow sync service execution detected: service [" + localName + "/"+ modelService.name+ "] finished in ["+ timeToRun+ "] milliseconds",module);  }  if ((Debug.verboseOn() || modelService.debug) && timeToRun > 50 && !modelService.hideResultInLog) {    String resultStr=result.toString();    if (resultStr.length() > 10240) {      resultStr=resultStr.substring(0,10226) + "...[truncated]";    }    Debug.logVerbose("Sync service [" + localName + "/"+ modelService.name+ "] finished with response ["+ resultStr+ "]",module);  }  if (modelService.metrics != null) {    modelService.metrics.recordServiceRate(1,timeToRun);  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_EVENT_LEVELUP(int newLevel){  return new SM_SYSTEM_MESSAGE(900700,newLevel);}  }
class C{  public <RES>Partial<RES,ARG> as(RES dummy){  return new Partial<>();}  }
class C{  public boolean contains(T listener){  if (mListeners != null) {    return mListeners.contains(listener);  } else {    return false;  }}  }
class C{  public NotSetPositionException(){  super();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MASTER_SENT_OFFER_MSG_TO_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1300330,value0);}  }
class C{  @Override public void requestCollections(Context c,int page,boolean refresh){  if (!model.isRefreshing() && !model.isLoading()) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }    final String[] types=c.getResources().getStringArray(R.array.collection_type_values);    if (model.getCollectionsType().equals(types[0])) {      requestAllCollections(c,page,refresh);    } else     if (model.getCollectionsType().equals(types[1])) {      requestCuratedCollections(c,page,refresh);    } else {      requestFeaturedCollections(c,page,refresh);    }  }}  }
class C{  public void testFileCacheFreshness(){  resetScanCounter();  myFixture.copyFileToProject(LAYOUT1,"res/layout/layout.xml");  myFixture.copyFileToProject(LAYOUT1,"res/layout-xlarge-land/layout.xml");  myFixture.copyFileToProject(VALUES1,"res/values/myvalues.xml");  ResourceFolderRepository resources=createRepository();  assertNotNull(resources);  assertFalse(resources.hasFreshFileCache());  assertEquals(3,resources.getInitialScanState().numXml);  assertEquals(resources.getInitialScanState().numXml,resources.getInitialScanState().numXmlReparsed);  resources.saveStateToFile();  ResourceFolderRegistry.reset();  ResourceFolderRepository resourcesReloaded=createRepository();  assertNotSame(resources,resourcesReloaded);  assertTrue(resourcesReloaded.hasFreshFileCache());  assertEquals(3,resourcesReloaded.getInitialScanState().numXml);  assertEquals(0,resourcesReloaded.getInitialScanState().numXmlReparsed);}  }
class C{  Iterable<Submodule> listSubmodules(String currentRemoteUrl) throws RepoException {  ImmutableList.Builder<Submodule> result=ImmutableList.builder();  String rawOutput=simpleCommand("submodule--helper","list").getStdout();  for (  String line : Splitter.on('\n').split(rawOutput)) {    if (line.isEmpty()) {      continue;    }    List<String> fields=Splitter.on(SPACES).splitToList(line);    String submoduleName=fields.get(3);    if (Strings.isNullOrEmpty(submoduleName)) {      throw new RepoException("Empty submodule name for " + line);    }    String path=getSubmoduleField(submoduleName,"path");    if (path == null) {      throw new RepoException("Path is required for submodule " + submoduleName);    }    String url=getSubmoduleField(submoduleName,"url");    if (url == null) {      throw new RepoException("Url is required for submodule " + submoduleName);    }    String branch=getSubmoduleField(submoduleName,"branch");    if (branch == null) {      branch="master";    } else     if (branch.equals(".")) {      branch="HEAD";    }    FileUtil.checkNormalizedRelative(path);    if (url.startsWith("../")) {      url=siblingUrl(currentRemoteUrl,submoduleName,url.substring(3));    } else     if (url.startsWith("./")) {      url=siblingUrl(currentRemoteUrl,submoduleName,url.substring(2));    }    GitRepository.validateUrl(url);    result.add(new Submodule(url,submoduleName,branch,path));  }  return result.build();}  }
class C{  protected void initAdapter(){  try {    XmlParser parse;    if (mChangeLogFileResourceUrl != null)     parse=new XmlParser(getContext(),mChangeLogFileResourceUrl); else     parse=new XmlParser(getContext(),mChangeLogFileResourceId);    ChangeLog chg=new ChangeLog();    mAdapter=new ChangeLogAdapter(getContext(),chg.getRows());    mAdapter.setmRowLayoutId(mRowLayoutId);    mAdapter.setmRowHeaderLayoutId(mRowHeaderLayoutId);    if (mChangeLogFileResourceUrl == null || (mChangeLogFileResourceUrl != null && Util.isConnected(getContext())))     new ParseAsyncTask(mAdapter,parse).execute(); else     Toast.makeText(getContext(),R.string.changelog_internal_error_internet_connection,Toast.LENGTH_LONG).show();    setAdapter(mAdapter);  } catch (  Exception e) {    Log.e(TAG,getResources().getString(R.string.changelog_internal_error_parsing),e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeTypeBoostSkillLevel_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200387,skillname);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Deprecated public void _INVALID_setAmount(int amount){  setAmount(amount);}  }
class C{  public VideoReorderVideosQuery afterVideoId(Integer value){  return unsafeParam("after_video_id",value);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public TransformerFactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANCEL_PETITION_OK_TO_GM(String value0){  return new SM_SYSTEM_MESSAGE(1300554,value0);}  }
class C{  public boolean enterTheRoom(Client client){  if (roomClients.size() < nMaxmumClients)   if (!roomClients.contains(client)) {    client.setClientGameTag(clientGameTag++);    client.setsEnteredRoom(getsRoomName());    return roomClients.add(client);  } else   return false; else   return false;}  }
class C{  private void initialize() throws CarbonSortKeyAndGroupByException {  if (!mergerParameters.isSortFileCompressionEnabled() && !mergerParameters.isPrefetch()) {    try {      this.stream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(outPutFile),mergerParameters.getFileWriteBufferSize()));      this.stream.writeInt(this.totalNumberOfRecords);    } catch (    FileNotFoundException e) {      throw new CarbonSortKeyAndGroupByException("Problem while getting the file",e);    }catch (    IOException e) {      throw new CarbonSortKeyAndGroupByException("Problem while writing the data to file",e);    }  } else {    writer=TempSortFileWriterFactory.getInstance().getTempSortFileWriter(mergerParameters.isSortFileCompressionEnabled(),mergerParameters.getDimColCount(),mergerParameters.getComplexDimColCount(),mergerParameters.getMeasureColCount(),mergerParameters.getNoDictionaryCount(),mergerParameters.getFileWriteBufferSize());    writer.initiaize(outPutFile,totalNumberOfRecords);    if (mergerParameters.isPrefetch()) {      totalSize=mergerParameters.getBufferSize();    } else {      totalSize=mergerParameters.getSortTempFileNoOFRecordsInCompression();    }  }}  }
class C{  private Iterator<Record> readBatch(final DeltaPlacement placement,final Collection<Key> keys,final ReadConsistency consistency){  checkNotNull(keys,"keys");  List<Map.Entry<ByteBuffer,Key>> rowKeys=Lists.newArrayListWithCapacity(keys.size());  for (  Key key : keys) {    AstyanaxTable table=(AstyanaxTable)key.getTable();    AstyanaxStorage storage=table.getReadStorage();    rowKeys.add(Maps.immutableEntry(storage.getRowKey(key.getKey()),key));  }  Collections.sort(rowKeys,Ordering.natural().onResultOf(null));  List<List<Map.Entry<ByteBuffer,Key>>> batches=Lists.partition(rowKeys,MAX_RANDOM_ROWS_BATCH);  return Iterators.concat(Iterators.transform(batches.iterator(),null));}  }
class C{  public static void rollback(boolean beganTransaction,String causeMessage,Throwable causeThrowable) throws GenericTransactionException {  if (beganTransaction) {    TransactionUtil.rollback(causeThrowable);  } else {    TransactionUtil.setRollbackOnly(causeMessage,causeThrowable);  }}  }
class C{  public static float px2dp(float px){  if (mMetrics == null) {    Log.e("MPChartLib-Utils","Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before" + " calling Utils.px2dp(...). Otherwise conversion does not" + " take place.");    return px;  }  DisplayMetrics metrics=mMetrics;  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  public XMLCatalogResolver(){  this(null,true);}  }
class C{  public String toString(){  final IOutputWriter w=new OutputWriterHumanReadable(new StringWriter());  try {    write(w,null);  } catch (  IOException e) {  }  return w.toString();}  }
class C{  public void releaseActiveBody(){  activeBody=null;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  private static boolean isNonEmptyGrid(Grid grid){  return grid != null && grid.getVisibleWidth() > 0;}  }
class C{  public CollapsedSubtreeLayout(String group){  this(group,Constants.ORIENT_CENTER);}  }
class C{  public static String escape(String raw){  checkNotNull(raw,"raw");  String escaped=raw;  escaped=escaped.replaceAll(UNESCAPED_WILDCARD_REGEX,WILDCARD_ESCAPE);  escaped=escapeSeparators(escaped);  return escaped;}  }
class C{  @Override protected CombinedConfiguration createResultConfiguration() throws ConfigurationException {  CombinedConfiguration result=super.createResultConfiguration();  if (parentConfigurationWhileParsing != null) {    result.addConfiguration(parentConfigurationWhileParsing);  }  return result;}  }
class C{  public LeadsCheckUserQuery age(Integer value){  return unsafeParam("age",value);}  }
class C{  public FriendsGetOnlineQueryWithMobile listId(Integer value){  return unsafeParam("list_id",value);}  }
class C{  @Override public boolean bulkAdd(IndexRequest request){  if (bulkProcessor == null) {    log.error("bulkProcessor is null. This should not happen!");    return false;  }  if (request == null) {    return false;  }  bulkProcessor.add(request);  log.trace("bulkAdd() - BulkProcessor will handle indexing of new index.");  return true;}  }
class C{  public GroupsGetMembersQueryWithFilter(VkApiClient client,GroupsGetMembersFilter filter){  super(client,"groups.getMembers",GetMembersFilterResponse.class);  filter(filter);}  }
class C{  @Override public void onReadyForSpeech(Bundle bundle){  Log.i(TAG,"onReadyForSpeech: ");}  }
class C{  private static Principal[] reduce0(Principal[] principals){  if (principals.length == 0) {    throw new IllegalArgumentException("cannot create constraint with no elements");  }  int i=0;  for (int j=0; j < principals.length; j++) {    Principal p=principals[j];    if (p == null) {      throw new NullPointerException("elements cannot be null");    }    if (!contains(principals,i,p)) {      principals[i++]=p;    }  }  return (Principal[])trim(principals,i);}  }
class C{  public static String escape(String string){  char c;  String s=string.trim();  StringBuilder sb=new StringBuilder();  int len=s.length();  for (int i=0; i < len; i+=1) {    c=s.charAt(i);    if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {      sb.append('%');      sb.append(Character.forDigit((char)((c >>> 4) & 0x0f),16));      sb.append(Character.forDigit((char)(c & 0x0f),16));    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public void removeData(final double x,final double y){  if (n > 0) {    if (hasIntercept) {      final double fact1=n - 1.0;      final double fact2=n / (n - 1.0);      final double dx=x - xbar;      final double dy=y - ybar;      sumXX-=dx * dx * fact2;      sumYY-=dy * dy * fact2;      sumXY-=dx * dy * fact2;      xbar-=dx / fact1;      ybar-=dy / fact1;    } else {      final double fact1=n - 1.0;      sumXX-=x * x;      sumYY-=y * y;      sumXY-=x * y;      xbar-=x / fact1;      ybar-=y / fact1;    }    sumX-=x;    sumY-=y;    n--;  }}  }
class C{  public CatchResult catchPokemon() throws LoginFailedException, RemoteServerException, NoSuchItemException {  return catchPokemon(new CatchOptions(api));}  }
class C{  public void resetColors(){  if (mColors == null) {    mColors=new ArrayList<>();  }  mColors.clear();}  }
class C{  public static final double compute(){  double e=0.5;  while (1.0 + e > 1.0) {    e*=0.5;  }  return e;}  }
class C{  public static void writeStringToFile(File file,String data,String encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  @Override public void close(){  if (prodScan != null)   prodScan.close();}  }
class C{  public Builder categoricalToOneHot(String... columnNames){  for (  String s : columnNames) {    transform(new CategoricalToOneHotTransform(s));  }  return this;}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (inlineGML != null) {    String text=inlineGML.getInlineFeatures();    if ((text != null) && !text.isEmpty()) {      expression=getFilterFactory().literal(text);    }  }  return expression;}  }
class C{  public Object clone(){  try {    Item item=(Item)super.clone();    EntryRep[] attrSets=item.attributeSets.clone();    for (int i=attrSets.length; --i >= 0; ) {      attrSets[i]=(EntryRep)attrSets[i].clone();    }    item.attributeSets=attrSets;    return item;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public static float signum(final float a){  return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);}  }
class C{  public final void openFallbackOutputStream() throws DataFallbackException {  if (output == null) {    if (LOG.isDebugEnabled())     LOG.debug("openOutputStream() : Opening the writer for the " + dataFile.getName() + " file");    try {      output=new BufferedWriter(new FileWriter(dataFile,true));    } catch (    IOException e) {      throw new DataFallbackException(e.getMessage());    }  }}  }
class C{  public double calculateLocalSwapTotalCapacity(int hostcount,int hostlocalswapsize){  double d=(double)(hostcount * hostlocalswapsize) / 1024;  d*=-1;  d=(double)Math.round(d * 100) / 100;  return d;}  }
class C{  public static void transformDomDocument(Transformer transformer,Node node,OutputStream os) throws TransformerException {  DOMSource source=new DOMSource(node);  StreamResult result=new StreamResult(os);  transformer.transform(source,result);}  }
class C{  public Fraction divide(final int i){  return new Fraction(numerator,denominator * i);}  }
class C{  private DataStoreStreaming(){}  }
class C{  @VisibleForTesting protected HttpURLConnection createConnection() throws RequestFailureException {  try {    URL url=new URL(getRequestGenerator().getServerUrl());    HttpURLConnection connection=(HttpURLConnection)url.openConnection();    connection.setConnectTimeout(MS_CONNECTION_TIMEOUT);    connection.setReadTimeout(MS_CONNECTION_TIMEOUT);    return connection;  } catch (  MalformedURLException e) {    throw new RequestFailureException("Caught a malformed URL exception.",e);  }catch (  IOException e) {    throw new RequestFailureException("Failed to open connection to URL",e);  }}  }
class C{  public SquarifiedTreeMapLayout(String group){  this(group,0);}  }
class C{  @SuppressWarnings("unchecked") public LinkedHashTreeMap(){  this((Comparator<? super K>)NATURAL_ORDER);}  }
class C{  public static AudioInputStream convertBitsPerSample(AudioInputStream in,int bitsPerSample) throws IllegalArgumentException {  AudioInputStream converted;  AudioFormat sourceFormat, targetFormat;  if (in == null)   throw new IllegalArgumentException("the inputstream must not be null values");  if (bitsPerSample != 8 && bitsPerSample != 16 && bitsPerSample != 24 && bitsPerSample != 32)   throw new IllegalArgumentException("number of bits must be 8, 16, 24 or 32");  converted=in;  sourceFormat=in.getFormat();  targetFormat=new AudioFormat(sourceFormat.getSampleRate(),bitsPerSample,sourceFormat.getChannels(),true,sourceFormat.isBigEndian());  if (targetFormat.getSampleSizeInBits() != sourceFormat.getSampleSizeInBits()) {    if (AudioSystem.isConversionSupported(targetFormat,sourceFormat))     converted=AudioSystem.getAudioInputStream(targetFormat,converted); else     throw new IllegalArgumentException("conversion to specified sample size (bits) not supported");  }  return converted;}  }
class C{  public boolean nextBoolean(double probability){  int y;  int z;  if (probability < 0.0 || probability > 1.0)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0)   return false; else   if (probability == 1.0)   return true;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (z >>> 1) ^ mag01[z & 0x1];    }    for (; kk < N - 1; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (z >>> 1) ^ mag01[z & 0x1];    }    z=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (z >>> 1) ^ mag01[z & 0x1];    mti=0;  }  z=mt[mti++];  z^=z >>> 11;  z^=(z << 7) & TEMPERING_MASK_B;  z^=(z << 15) & TEMPERING_MASK_C;  z^=(z >>> 18);  return ((((long)(y >>> 6)) << 27) + (z >>> 5)) / (double)(1L << 53) < probability;}  }
class C{  private boolean isValid(){  try {    return myTestValidity.call();  } catch (  Exception e) {    return false;  }}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public void initAudio(){  channelMapper.mapChannels(getMapperLayoutOptions());  this.mainAudio=getMainAudio(this.audioMap);  this.alternativesAudio=getAlternativeAudios(this.audioMap);}  }
class C{  public DatabaseGetSchoolsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public AbstractDataConsumeFix createFixForUnknownError(Throwable error){  return new UnhandledErrorFix(error);}  }
class C{  public int code(){  return code;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private FilterOperation extractOperation(Matcher tokenizedQuery) throws BadFilterException {  String operationName=tokenizedQuery.group(2);  try {    return FilterOperation.valueOf(operationName);  } catch (  IllegalArgumentException ignored) {    LOG.debug(FILTER_OPERATOR_INVALID.logFormat(operationName));    throw new BadFilterException(FILTER_OPERATOR_INVALID.format(operationName));  }}  }
class C{  public static boolean isInitialized(Context ctx){  vitamioPackage=ctx.getPackageName();  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + "lib/";  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201222,num0,skillname);}  }
class C{  protected ActionBar supportActionBar(Toolbar toolbar){  setSupportActionBar(toolbar);  ActionBar actionBar=getSupportActionBar();  if (actionBar != null) {    actionBar.setDisplayHomeAsUpEnabled(true);    actionBar.setDisplayShowHomeEnabled(true);  }  return actionBar;}  }
class C{  @Override public final int readUnsignedByte() throws IOException {  return dis.readUnsignedByte();}  }
class C{  public void loadData(Table t,String query){  loadData(t,query,null,null,null);}  }
class C{  @SneakyThrows private void updateKeyPairInCluster(KubernetesClient client){  final StringWriter secretWriter=new StringWriter();  KeyPairUtils.writeKeyPair(keyPair,secretWriter);  final String encodedSecret=base64.encode(secretWriter.toString().getBytes("UTF-8"));  final Map<String,String> secretData=ImmutableMap.of(KEYPAIR_FIELD,encodedSecret);  client.secrets().inNamespace(SYSTEM_NAMESPACE).createNew().withNewMetadata().withName(secretName).endMetadata().withData(secretData).done();}  }
class C{  public String typeName(){  return "float";}  }
class C{  public static GenericValue create(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){  GenericValue newValue=new GenericValue();  newValue.init(delegator,modelEntity,fields);  return newValue;}  }
class C{  public WidgetsGetCommentsQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  @Deployment(resources="org/activiti/engine/test/api/event/ActivityEventsTest.testActivityMessageBoundaryEventsOnUserTask.bpmn20.xml") public void testActivityMessageBoundaryEventsOnUserTaskForCancel() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("messageOnUserTaskProcess");  assertNotNull(processInstance);  Execution executionWithMessage=runtimeService.createExecutionQuery().messageEventSubscriptionName("message_1").singleResult();  assertNotNull(executionWithMessage);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertEquals("User Task",task.getName());  taskService.complete(task.getId());  assertEquals(2,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiMessageEvent);  ActivitiMessageEvent messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_WAITING,messageEvent.getType());  assertEquals("boundaryMessageEventCatching",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("message_1",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiMessageEvent);  messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_CANCELLED,messageEvent.getType());  assertEquals("boundaryMessageEventCatching",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("message_1",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING);}  }
class C{  public static double asinh(double a){  boolean negative=false;  if (a < 0) {    negative=true;    a=-a;  }  double absAsinh;  if (a > 0.167) {    absAsinh=FastMath.log(FastMath.sqrt(a * a + 1) + a);  } else {    final double a2=a * a;    if (a > 0.097) {      absAsinh=a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);    } else     if (a > 0.036) {      absAsinh=a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);    } else     if (a > 0.0036) {      absAsinh=a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);    } else {      absAsinh=a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);    }  }  return negative ? -absAsinh : absAsinh;}  }
class C{  public NoiseTagLdaModel(InputStream in) throws IOException {  GZIPInputStream zipin=new GZIPInputStream(in);  BufferedInputStream bin=new BufferedInputStream(zipin);  DataInputStream datain=new DataInputStream(bin);  numTopics=datain.readInt();  int numWords=datain.readInt();  alpha=datain.readDouble();  beta=datain.readDouble();  locked=datain.readBoolean();  wnz=new int[numTopics];  Arrays.fill(wnz,0);  for (int i=0; i < numWords; i++) {    String word=datain.readUTF();    int[] count=new int[numTopics];    for (int j=0; j < numTopics; j++) {      count[j]=datain.readInt();      wnz[j]+=count[j];      nw+=count[j];    }    nwz.put(word,count);  }  tnz=new int[numTopics + 1];  Arrays.fill(tnz,0);  int numTags=datain.readInt();  eta=datain.readDouble();  for (int i=0; i < numTags; i++) {    String word=datain.readUTF();    int[] count=new int[numTopics + 1];    for (int j=0; j < numTopics + 1; j++) {      count[j]=datain.readInt();      tnz[j]+=count[j];      nt+=count[j];    }    ntz.put(word,count);  }  noise=numTopics;}  }
class C{  @Override public void onPatchVersionCheckFail(File patchFile,SharePatchInfo oldPatchInfo,String patchFileVersion,boolean isUpgradePatch){  TinkerLog.i(TAG,"patchReporter: patch version exist. path:%s, version:%s, isUpgrade:%b",patchFile.getAbsolutePath(),patchFileVersion,isUpgradePatch);}  }
class C{  public BlockRealMatrix(final int rows,final int columns) throws MathIllegalArgumentException {  super(rows,columns);  this.rows=rows;  this.columns=columns;  blockRows=(rows + BLOCK_SIZE - 1) / BLOCK_SIZE;  blockColumns=(columns + BLOCK_SIZE - 1) / BLOCK_SIZE;  blocks=createBlocksLayout(rows,columns);}  }
class C{  @Override public void flush() throws IOException {  throw exception;}  }
class C{  public StatMgr(Transaction tx){  initStatistics(tx);  isRefreshStatOn=!(REFRESH_THRESHOLD == REFRESH_STAT_OFF);}  }
class C{  private void predictAndSetF0(List<Element> applyToElements,HTSUttModel um) throws MaryConfigurationException {  HTSModel m;  try {    String f0AttributeName="f0";    HTSParameterGeneration pdf2par=new HTSParameterGeneration();    boolean debug=false;    pdf2par.htsMaximumLikelihoodParameterGeneration(um,htsData);    boolean voiced[]=pdf2par.getVoicedArray();    int numVoiced=0;    assert applyToElements.size() == um.getNumModel();    float f0;    String formattedTargetValue;    int t=0;    for (int i=0; i < applyToElements.size(); i++) {      m=um.getUttModel(i);      int k=1;      int numVoicedInModel=m.getNumVoiced();      formattedTargetValue="";      for (int mstate=0; mstate < cart.getNumStates(); mstate++) {        for (int frame=0; frame < m.getDur(mstate); frame++) {          if (voiced[t++]) {            f0=(float)Math.exp(pdf2par.getlf0Pst().getPar(numVoiced++,0));            formattedTargetValue+="(" + Integer.toString((int)((k * 100.0) / numVoicedInModel)) + ","+ Integer.toString((int)f0)+ ")";            k++;          }        }      }      Element element=applyToElements.get(i);      if (f0AttributeName.startsWith("@")) {        f0AttributeName=f0AttributeName.replaceFirst("@","");      }      if (formattedTargetValue.length() > 0)       element.setAttribute(f0AttributeName,formattedTargetValue);    }  } catch (  Exception e) {    throw new MaryConfigurationException("Error generating F0 out of HMMs trees and pdfs. ",e);  }}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public QueueReader<MethodOrMethodContext> listener(){  return allReachables.clone();}  }
class C{  public void resetHeaderHeight(){  int height=mHeaderView.getVisiableHeight();  if (height == 0)   return;  if (mPullRefreshing && height <= mHeaderViewHeight) {    return;  }  int finalHeight=0;  if (mPullRefreshing && height > mHeaderViewHeight) {    finalHeight=mHeaderViewHeight;  }  Log.d("xlistview","resetHeaderHeight-->" + (finalHeight - height));  mScrollBack=SCROLLBACK_HEADER;  mScroller.startScroll(0,height,0,finalHeight - height,SCROLL_DURATION);  invalidate();}  }
class C{  public static double scalb(final double d,final int scaleFactor){  if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {    return d;  }  final long bits=Double.doubleToLongBits(d);  final long exponent=bits & 0x7ff0000000000000L;  final long rest=bits & 0x800fffffffffffffL;  final long newBits=rest | (exponent + (((long)scaleFactor) << 52));  return Double.longBitsToDouble(newBits);}  }
class C{  public static byte[] generateMac(byte[] byteCipherText,SecretKey integrityKey) throws NoSuchAlgorithmException, InvalidKeyException {  Mac sha256_HMAC=Mac.getInstance(HMAC_ALGORITHM);  sha256_HMAC.init(integrityKey);  return sha256_HMAC.doFinal(byteCipherText);}  }
class C{  public Bindings add(String property,JToggleButton c){  registerPropertyChangeListener(c);  return add(new JToggleButtonBinding(property,c,false));}  }
class C{  public boolean isInjured(){  return !isFainted() && getStamina() < getMaxStamina();}  }
class C{  private void assertAffinities(List<ContainerDescription> containers){  List<ContainerDescription> containerGroup=new ArrayList<>(containers);  List<ContainerDescription> noAffinities=containerGroup.stream().filter(null).collect(Collectors.toList());  assertEquals(1,noAffinities.size());  ContainerDescription noAffinity=noAffinities.get(0);  containerGroup.remove(noAffinity);  containerGroup.stream().forEach(null);}  }
class C{  public boolean isPrivate(@NotNull ResourceType type,@NotNull String name){  if (myResourceVisibility == null) {    ResourceVisibilityLookup.Provider provider=getResourceVisibilityProvider();    if (provider == null) {      return false;    }    AndroidGradleModel androidModel=AndroidGradleModel.get(myFacet);    if (androidModel == null) {      return false;    }    myResourceVisibility=provider.get(androidModel.getAndroidProject(),androidModel.getSelectedVariant());  }  return myResourceVisibility.isPrivate(type,name);}  }
class C{  public Matrix copy(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  private static void deleteDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    return;  }  directory.deleteOnExit();  if (!isSymlink(directory)) {    cleanDirectoryOnExit(directory);  }}  }
class C{  protected FriendsAreFriendsQuery userIds(int... value){  return unsafeParam("user_ids",value);}  }
class C{  public int read() throws IOException {  if (count - pos <= 2) {    fill();    if (count - pos <= 2) {      return -1;    }  }  return buf[pos++] & 0xff;}  }
class C{  public boolean doEliminatePhiNodes(){  boolean addedNewLocals=false;  List<Unit> phiNodes=new ArrayList<Unit>();  List<AssignStmt> equivStmts=new ArrayList<AssignStmt>();  List<ValueUnitPair> predBoxes=new ArrayList<ValueUnitPair>();  Chain<Unit> units=body.getUnits();  for (  Unit unit : units) {    PhiExpr phi=Shimple.getPhiExpr(unit);    if (phi == null)     continue;    Local lhsLocal=Shimple.getLhsLocal(unit);    for (int i=0; i < phi.getArgCount(); i++) {      Value phiValue=phi.getValue(i);      AssignStmt convertedPhi=Jimple.v().newAssignStmt(lhsLocal,phiValue);      equivStmts.add(convertedPhi);      predBoxes.add(phi.getArgBox(i));    }    phiNodes.add(unit);  }  if (equivStmts.size() != predBoxes.size())   throw new RuntimeException("Assertion failed.");  for (int i=0; i < equivStmts.size(); i++) {    AssignStmt stmt=equivStmts.get(i);    Unit pred=predBoxes.get(i).getUnit();    if (pred == null)     throw new RuntimeException("Assertion failed.");    if (pred.branches()) {      boolean needPriming=false;      Local lhsLocal=(Local)stmt.getLeftOp();      Local savedLocal=Jimple.v().newLocal(lhsLocal.getName() + "_",lhsLocal.getType());      Iterator<ValueBox> useBoxesIt=pred.getUseBoxes().iterator();      while (useBoxesIt.hasNext()) {        ValueBox useBox=useBoxesIt.next();        if (lhsLocal.equals(useBox.getValue())) {          needPriming=true;          addedNewLocals=true;          useBox.setValue(savedLocal);        }      }      if (needPriming) {        body.getLocals().add(savedLocal);        AssignStmt copyStmt=Jimple.v().newAssignStmt(savedLocal,lhsLocal);        units.insertBefore(copyStmt,pred);      }      units.insertBefore(stmt,pred);    } else     units.insertAfter(stmt,pred);  }  Iterator<Unit> phiNodesIt=phiNodes.iterator();  while (phiNodesIt.hasNext()) {    Unit removeMe=phiNodesIt.next();    units.remove(removeMe);    removeMe.clearUnitBoxes();  }  return addedNewLocals;}  }
class C{  private void tinkerPreVerifiedCrashHandler(Throwable ex){  if (Utils.isXposedExists(ex)) {    ApplicationLike applicationLike=TinkerManager.getTinkerApplicationLike();    if (applicationLike == null || applicationLike.getApplication() == null) {      return;    }    if (!TinkerApplicationHelper.isTinkerLoadSuccess(applicationLike)) {      return;    }    boolean isCausedByXposed=false;    if (ShareTinkerInternals.isVmArt()) {      isCausedByXposed=true;    } else     if (ex instanceof IllegalAccessError && ex.getMessage().contains(DALVIK_XPOSED_CRASH)) {      isCausedByXposed=true;    }    if (isCausedByXposed) {      SampleTinkerReport.onXposedCrash();      TinkerLog.e(TAG,"have xposed: just clean tinker");      ShareTinkerInternals.killAllOtherProcess(applicationLike.getApplication());      TinkerApplicationHelper.cleanPatch(applicationLike);      ShareTinkerInternals.setTinkerDisableWithSharedPreferences(applicationLike.getApplication());      Toast.makeText(applicationLike.getApplication(),"please uninstall Xposed, illegal modify the app",Toast.LENGTH_LONG).show();    }  }}  }
class C{  public AudioPermission(String name){  super(name);}  }
class C{  @Override public List<BigInteger> arrayToPartitions(List<?> elementList,String type) throws PIRException {  List<BigInteger> parts=new ArrayList<>();  int numArrayElementsToReturn=SystemConfiguration.getIntProperty("pir.numReturnArrayElements",1);  for (int i=0; i < numArrayElementsToReturn; ++i) {    if (elementList.size() > i) {      logger.debug("Adding parts for elementArray(" + i + ") = "+ elementList.get(i));      parts.addAll(toPartitions(elementList.get(i),type));    } else {      parts.addAll(getPaddedPartitions(type));    }  }  return parts;}  }
class C{  public LifoSet(){}  }
class C{  @RequestMapping(value="/gotoauthpage") public String goToAuthPage(HttpSession httpSession){  final String state=CommonUtils.getToken();  httpSession.setAttribute(LINE_WEB_LOGIN_STATE,state);  final String url=lineConfig.getLineWebLoginUrl(state);  return "redirect:" + url;}  }
class C{  public long initial(){  return initial;}  }
class C{  public String findAspectRatioName(int w,int h){  int primes[]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};  int w_lcd=w, h_lcd=h;  for (  int i : primes) {    while (w_lcd >= i && h_lcd >= i && w_lcd % i == 0 && h_lcd % i == 0) {      w_lcd/=i;      h_lcd/=i;    }  }  for (  PixelSizeToAspectRatio aspectRatio : aspectRatios) {    if (w_lcd == aspectRatio.width && h_lcd == aspectRatio.height)     return aspectRatio.name;  }  return (w + ":" + h);}  }
class C{  public static String mapChineseMarksToAnsi(String text){}  }
class C{  public void clear(){  mRecycler.setAdapter(null);}  }
class C{  public static void checkAndInit(){  if (Helper.isConfigured()) {    if (!User.exists(0)) {      List<User> list=User.loadByAccess("access.config.admin");      if (list == null || list.size() == 0) {        User.create(V.create("id",0L).set("name","admin").set("password","admin").set("title","Admin"));      }    }  }}  }
class C{  public LeadsGetUsersQuery(VkApiClient client,UserActor actor,int offerId,String secret){  super(client,"leads.getUsers",Utils.buildParametrizedType(List.class,Entry.class));  accessToken(actor.getAccessToken());  offerId(offerId);  secret(secret);}  }
class C{  public boolean isDisaggregation(){  return isAggregationType(AVERAGE_SUM_INT_DISAGGREGATION) || isAggregationType(AVERAGE_INT_DISAGGREGATION);}  }
class C{  public boolean isDouble(String key){  Object val=get(key);  return val instanceof Double;}  }
class C{  public static boolean processPayment(Player player,Item item,int level){  return processPayment(player,item.getImprovement().getChargeWay(),getPayAmountForService(item,level));}  }
class C{  private void startList(Attributes attributes){  List listTag=null;  if (!mParagraphStyles.isEmpty()) {    AccumulatedParagraphStyle currentStyle=mParagraphStyles.peek();    ParagraphType type=currentStyle.getType();    int indent=currentStyle.getAbsoluteIndent();    boolean isIndentation=isIndentation(attributes);    if (type.isIndentation() || isIndentation) {      listTag=new UL(indent,true);    } else     if (type.isNumbering()) {      listTag=new OL(indent,false);    } else     if (type.isBullet()) {      listTag=new UL(indent,false);    }  } else {    listTag=new UL(0,false);  }  if (listTag != null)   start(listTag);}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  GetRemoteStatusOperation getStatus=new GetRemoteStatusOperation(mContext);  RemoteOperationResult result=getStatus.execute(client);  if (result.isSuccess()) {    mResultData.mVersion=(OwnCloudVersion)(result.getData().get(0));    mResultData.mIsSslConn=(result.getCode() == ResultCode.OK_SSL);    mResultData.mBaseUrl=normalizeProtocolPrefix(mUrl,mResultData.mIsSslConn);    RemoteOperationResult detectAuthResult=detectAuthorizationMethod(client);    if (detectAuthResult.isSuccess()) {      mResultData.mAuthMethod=(AuthenticationMethod)detectAuthResult.getData().get(0);      ArrayList<Object> data=new ArrayList<Object>();      data.add(mResultData);      result.setData(data);    } else {      result=detectAuthResult;    }  }  return result;}  }
class C{  protected NewsfeedIgnoreItemQuery type(NewsfeedItemType value){  return unsafeParam("type",value);}  }
class C{  public AudioSetBroadcastQuery targetIds(Integer... value){  return unsafeParam("target_ids",value);}  }
class C{  private void handleActionBaz(String param1,String param2){  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  @NotNull public static Color alphaBlending(@NotNull Color foreground,@NotNull Color background){  float foregroundAlpha=foreground.getAlpha() / 255.0f;  float backgroundAlpha=background.getAlpha() / 255.0f;  float a=foregroundAlpha + backgroundAlpha * (1 - foregroundAlpha);  float r=alphaBlendingComponent(foreground.getRed(),foregroundAlpha,background.getRed(),backgroundAlpha);  float g=alphaBlendingComponent(foreground.getGreen(),foregroundAlpha,background.getGreen(),backgroundAlpha);  float b=alphaBlendingComponent(foreground.getBlue(),foregroundAlpha,background.getBlue(),backgroundAlpha);  return new Color(r,g,b,a);}  }
class C{  private static final void calculateOffHandResult(Creature attacker,Creature attacked,AttackStatus mainHandStatus,List<AttackResult> attackList){  AttackStatus offHandStatus=AttackStatus.getOffHandStats(mainHandStatus);  Item offHandWeapon=((Player)attacker).getEquipment().getOffHandWeapon();  int offHandDamage=StatFunctions.calculateAttackDamage(attacker,attacked,false,SkillElement.NONE);  int offHandHits=Rnd.get(1,offHandWeapon.getItemTemplate().getWeaponStats().getHitCount());  splitPhysicalDamage(attacker,attacked,offHandHits,offHandDamage,offHandStatus,attackList);}  }
class C{  public String checkForScanStarted(final String scanId) throws ParserConfigurationException, IOException, SAXException, DASTProxyException, XPathExpressionException {  String stateId;  String state;  LOGGER.debug("Inside AppScanEnterpriseRestService.requestForScanJobInfo");  final XPathFactory factory=XPathFactory.newInstance();  final XPath xpath=factory.newXPath();  xpath.setNamespaceContext(_nsContext);  final Document response=sendRESTRequestToASE(AppScanConstants.APPSCAN_SERVICE_FOR_FOLDERITEM + scanId,"");  checkForError(response,null);  LOGGER.debug("Checking for the Scan Job Status. ");  stateId=(String)xpath.evaluate("//ase:content-scan-job/ase:state/ase:id/text()",response,XPathConstants.STRING);  state=(String)xpath.evaluate("//ase:content-scan-job/ase:state/ase:name/text()",response,XPathConstants.STRING);  if (!AppScanUtils.isNotNull(stateId)) {    LOGGER.error(" Error inside AppScanEnterpriseRestService. checkForScanStarted.");    throw new DASTProxyException(AppScanConstants.APPSCAN_ERROR_CODE_SCAN_JOB_ID_NOT_FOUND,"Scan Status for Job Id has returned as null. Contact the administrator");  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Scan Action ID: " + stateId);    LOGGER.debug("Scan Action: " + state);  }  return state;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_JOIN_NOTIFY(String value0){  return new SM_SYSTEM_MESSAGE(1300856,value0);}  }
class C{  public static boolean checkClassValid(TypeElement type){  Set<Modifier> modifiers=type.getModifiers();  if (modifiers.contains(Modifier.ABSTRACT)) {    return false;  }  if (modifiers.contains(Modifier.PRIVATE)) {    throw new ParcelException(String.format("class %s must not be modified by private",type.getQualifiedName()),type);  }  return true;}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public MarketSearchQueryWithExtended sort(MarketSearchSort value){  return unsafeParam("sort",value);}  }
class C{  public static void startFolderSelectActivity(Context context,BookmarkId... bookmarks){  assert bookmarks.length > 0;  Intent intent=new Intent(context,EnhancedBookmarkFolderSelectActivity.class);  intent.putExtra(INTENT_IS_CREATING_FOLDER,false);  ArrayList<String> bookmarkStrings=new ArrayList<>(bookmarks.length);  for (  BookmarkId id : bookmarks) {    bookmarkStrings.add(id.toString());  }  intent.putStringArrayListExtra(INTENT_BOOKMARKS_TO_MOVE,bookmarkStrings);  context.startActivity(intent);}  }
class C{  public void switchItem(@Nullable RecyclerView recyclerView,final int selectedViewPosition){  if (isDeselectAnimationInProcess || isSelectAnimationInProcess || isViewCollapsing|| isWaitingToDeselectAnimation|| isWaitingToSelectAnimation|| isSelectedItemStraightened) {    return;  }  if (recyclerView != null) {    if (this.selectedItemPosition != RecyclerView.NO_POSITION && this.selectedItemPosition != selectedViewPosition) {      deselectItem(recyclerView,this.selectedItemPosition,selectedViewPosition,0);      return;    }    smoothScrollToPosition(recyclerView,null,selectedViewPosition);  }}  }
class C{  public BoardGetTopicsQuery previewLength(Integer value){  return unsafeParam("preview_length",value);}  }
class C{  synchronized void flushOperations(RTEditText editor){  Stack<Operation> undoStack=getUndoStack(editor);  Stack<Operation> redoStack=getRedoStack(editor);  undoStack.clear();  redoStack.clear();}  }
class C{  public static long[] interpose(long[] vector,int vectorLen,int offset,int len){  long[] updated=create(vectorLen + len);  int idx=offset >> 6;  System.arraycopy(vector,0,updated,0,idx);  if (idx < vector.length) {    int delta=offset & 63;    updated[idx]|=vector[idx] & maskBelow(delta);  }  copy(vector,offset,updated,offset + len,vectorLen - offset);  return updated;}  }
class C{  public String nextLine(){  if (!hasNext()) {    throw new NoSuchElementException("No more lines");  }  String currentLine=cachedLine;  cachedLine=null;  return currentLine;}  }
class C{  @Override public void initialize(CordovaInterface cordova,CordovaWebView webView){  super.initialize(cordova,webView);  this.sensorManager=(SensorManager)cordova.getActivity().getSystemService(Context.SENSOR_SERVICE);}  }
class C{  public void removeItemRelation(String relationName){  relations.remove(relationName);}  }
class C{  public Zmat bqh(Zmat A,Zmat B) throws JampackException {  if (B.nrow != ncol) {    throw new JampackException("Inconsistent dimensions.");  }  return (H.o(qb(H.o(B))));}  }
class C{  public TapTarget tintTarget(boolean tint){  this.tintTarget=tint;  return this;}  }
class C{  public void centreDialog(JDialog dialog){  if ((frame != null) && (dialog != null)) {    final int x=(frame.getWidth() - dialog.getWidth()) / 2;    final int y=(frame.getHeight() - dialog.getHeight()) / 2;    dialog.setLocation(x,y);  }}  }
class C{  public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("compareBy attribute=");  String attribute=np.getWordRespectCase();  Comparer.COMPARISON_MODE mode=Comparer.COMPARISON_MODE.ABSOLUTE;  if (!np.peekMatchIgnoreCase(";")) {    np.matchIgnoreCase("mode=");    mode=Comparer.COMPARISON_MODE.valueOfIgnoreCase(np.getWordMatchesIgnoringCase("relative absolute"));  }  np.matchIgnoreCase(";");  final Document doc=((Director)getDir()).getDocument();  final SamplesSpreadSheet samplesTable=((SamplesViewer)getViewer()).getSamplesTable();  final BitSet samples=samplesTable.getSelectedSampleIndices();  final List<String> tarSamplesOrder=new ArrayList<>();  final Map<String,List<String>> tarSample2SrcSamples=new HashMap<>();  final Map<String,Object> tarSample2Value=new HashMap<>();  for (int row=samples.nextSetBit(1); row != -1; row=samples.nextSetBit(row + 1)) {    final String sample=samplesTable.getDataGrid().getRowName(row);    final Object obj=doc.getSampleAttributeTable().get(sample,attribute);    if (obj != null) {      final String value=obj.toString().trim();      if (value.length() > 0) {        final String tarSample=(attribute.equals(SampleAttributeTable.SAMPLE_ID) ? value : attribute + ":" + value);        if (!tarSamplesOrder.contains(tarSample)) {          tarSamplesOrder.add(tarSample);          tarSample2SrcSamples.put(tarSample,new ArrayList<String>());          tarSample2Value.put(tarSample,value);        }        tarSample2SrcSamples.get(tarSample).add(sample);      }    }  }  if (tarSample2SrcSamples.size() > 0) {    final String fileName=Basic.replaceFileSuffix(doc.getMeganFile().getFileName(),"-" + attribute + ".megan");    final Director newDir=Director.newProject(false);    final Document newDocument=newDir.getDocument();    newDocument.getMeganFile().setFile(fileName,MeganFile.Type.MEGAN_SUMMARY_FILE);    doc.getProgressListener().setMaximum(tarSamplesOrder.size());    doc.getProgressListener().setProgress(0);    for (    String tarSample : tarSamplesOrder) {      doc.getProgressListener().setTasks("Comparing samples",tarSample);      List<String> srcSamples=tarSample2SrcSamples.get(tarSample);      Map<String,Map<Integer,Integer[]>> classification2class2counts=new HashMap<>();      int sampleSize=ComputeCoreBiome.apply(doc,srcSamples,false,0,0,classification2class2counts,doc.getProgressListener());      if (classification2class2counts.size() > 0) {        newDocument.addSample(tarSample,sampleSize,0,doc.getBlastMode(),classification2class2counts);      }      doc.getProgressListener().incrementProgress();    }    if (mode == Comparer.COMPARISON_MODE.RELATIVE) {      int newSize=Integer.MAX_VALUE;      int maxSize=0;      for (      String tarSample : tarSamplesOrder) {        newSize=Math.min(newSize,newDocument.getNumberOfReads(tarSample));        maxSize=Math.max(maxSize,newDocument.getNumberOfReads(tarSample));      }      if (newSize < maxSize) {        double[] factor=new double[tarSamplesOrder.size()];        for (int i=0; i < tarSamplesOrder.size(); i++) {          String tarSample=tarSamplesOrder.get(i);          factor[i]=(newSize > 0 ? (double)newSize / (double)newDocument.getNumberOfReads(tarSample) : 0);        }        final DataTable dataTable=newDocument.getDataTable();        for (        String classificationName : dataTable.getClassification2Class2Counts().keySet()) {          Map<Integer,Integer[]> class2counts=dataTable.getClass2Counts(classificationName);          for (          Integer classId : class2counts.keySet()) {            Integer[] counts=class2counts.get(classId);            for (int i=0; i < counts.length; i++) {              counts[i]=(int)Math.round(factor[i] * counts[i]);            }          }        }      }      newDocument.getDataTable().setParameters("mode=" + Comparer.COMPARISON_MODE.RELATIVE.toString() + " normalizedTo="+ newSize);    } else     newDocument.getDataTable().setParameters("mode=" + Comparer.COMPARISON_MODE.ABSOLUTE.toString());    newDocument.getSampleAttributeTable().addAttribute(attribute,tarSample2Value,true);    newDocument.setNumberReads(newDocument.getDataTable().getTotalReads());    newDocument.setDirty(true);    if (newDocument.getNumberOfSamples() > 1) {      newDir.getMainViewer().getNodeDrawer().setStyle(ProgramProperties.get(MeganProperties.COMPARISON_STYLE,""),NodeDrawer.Style.PieChart);    }    NotificationsInSwing.showInformation(String.format("Wrote %,d reads to file '%s'",newDocument.getNumberOfReads(),fileName));    newDir.getMainViewer().getFrame().setVisible(true);    newDir.getMainViewer().setDoReInduce(true);    newDir.getMainViewer().setDoReset(true);    newDir.execute("update reprocess=true reinduce=true;",newDir.getMainViewer().getCommandManager());  }}  }
class C{  private void addResultAndPopulateProject(@NotNull ModuleSearchResult result,@NotNull DataNode<ProjectData> projectInfo,@NotNull List<DataNode<ModuleData>> selectedModules,@NotNull File file){  DataNode<ModuleData> moduleNode=result.moduleNode;  String moduleName=getNameOf(moduleNode);  String text;  if (result.selected) {    String tmp=String.format("File '%1$s' is already in module '%2$s'",file.getName(),moduleName);    SourceFileContainerInfo containerInfo=result.containerInfo;    if (containerInfo != null) {      containerInfo.updateSelectedVariantIn(moduleNode);      Variant variant=containerInfo.variant;      if (variant != null) {        tmp+=String.format(", variant '%1$s'",variant.getName());      }    }    text=tmp;  } else {    text=String.format("Module '%1$s' was added to the project.",moduleName);    SourceFileContainerInfo containerInfo=result.containerInfo;    if (containerInfo != null) {      containerInfo.updateSelectedVariantIn(moduleNode);    }    selectedModules.add(moduleNode);    setSelection(selectedModules);  }  invokeLaterIfNeeded(null);  populate(myProject,projectInfo,selectedModules,true);}  }
class C{  protected AdsGetAdsPostsReachQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public IsLessThanExtended(){  super(null,null);}  }
class C{  public static void logThrow(Logger logger,Level level,Class sourceClass,String sourceMethod,String msg,Object[] params,Throwable e){  LogRecord r=new LogRecord(level,msg);  r.setLoggerName(logger.getName());  r.setSourceClassName(sourceClass.getName());  r.setSourceMethodName(sourceMethod);  r.setParameters(params);  r.setThrown(e);  logger.log(r);}  }
class C{  private void dumpTree(CMNode nodeCur,int level){  for (int index=0; index < level; index++)   System.out.print("   ");  int type=nodeCur.type();  if ((type == XMLContentSpec.CONTENTSPECNODE_CHOICE) || (type == XMLContentSpec.CONTENTSPECNODE_SEQ)) {    if (type == XMLContentSpec.CONTENTSPECNODE_CHOICE)     System.out.print("Choice Node "); else     System.out.print("Seq Node ");    if (nodeCur.isNullable())     System.out.print("Nullable ");    System.out.print("firstPos=");    System.out.print(nodeCur.firstPos().toString());    System.out.print(" lastPos=");    System.out.println(nodeCur.lastPos().toString());    dumpTree(((CMBinOp)nodeCur).getLeft(),level + 1);    dumpTree(((CMBinOp)nodeCur).getRight(),level + 1);  } else   if (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE) {    System.out.print("Rep Node ");    if (nodeCur.isNullable())     System.out.print("Nullable ");    System.out.print("firstPos=");    System.out.print(nodeCur.firstPos().toString());    System.out.print(" lastPos=");    System.out.println(nodeCur.lastPos().toString());    dumpTree(((CMUniOp)nodeCur).getChild(),level + 1);  } else   if (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_LEAF) {    System.out.print("Leaf: (pos=" + ((CMLeaf)nodeCur).getPosition() + "), "+ ((CMLeaf)nodeCur).getElement()+ "(elemIndex="+ ((CMLeaf)nodeCur).getElement()+ ") ");    if (nodeCur.isNullable())     System.out.print(" Nullable ");    System.out.print("firstPos=");    System.out.print(nodeCur.firstPos().toString());    System.out.print(" lastPos=");    System.out.println(nodeCur.lastPos().toString());  } else {    throw new RuntimeException("ImplementationMessages.VAL_NIICM");  }}  }
class C{  public FriendsAddListQuery userIds(Integer... value){  return unsafeParam("user_ids",value);}  }
class C{  public short readShort() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readShort();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  @Override public void build(BTreeBuilderInfo btreeBuilderInfo){  int groupCounter;  int nInternal=0;  BTreeNode curNode=null;  BTreeNode prevNode=null;  List<BTreeNode[]> nodeGroups=new ArrayList<BTreeNode[]>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  BTreeNode[] currentGroup=null;  List<List<IndexKey>> interNSKeyList=new ArrayList<List<IndexKey>>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  List<IndexKey> leafNSKeyList=null;  long nodeNumber=0;  for (int metadataIndex=0; metadataIndex < btreeBuilderInfo.getFooterList().size(); metadataIndex++) {    curNode=new BlockBTreeLeafNode(btreeBuilderInfo,metadataIndex,nodeNumber++);    nLeaf++;    if (prevNode != null) {      prevNode.setNextNode(curNode);    }    prevNode=curNode;    groupCounter=(nLeaf - 1) % (maxNumberOfEntriesInNonLeafNodes);    if (groupCounter == 0) {      leafNSKeyList=new ArrayList<IndexKey>(CarbonCommonConstants.CONSTANT_SIZE_TEN);      currentGroup=new BTreeNode[maxNumberOfEntriesInNonLeafNodes];      nodeGroups.add(currentGroup);      nInternal++;      interNSKeyList.add(leafNSKeyList);    }    if (null != leafNSKeyList) {      leafNSKeyList.add(convertStartKeyToNodeEntry(btreeBuilderInfo.getFooterList().get(metadataIndex).getBlockletIndex().getBtreeIndex().getStartKey()));    }    if (null != currentGroup) {      currentGroup[groupCounter]=curNode;    }  }  if (nLeaf == 0) {    return;  }  addIntermediateNode(curNode,nodeGroups,currentGroup,interNSKeyList,nInternal);  LOGGER.info("************************Total Number Rows In BTREE: " + nLeaf);}  }
class C{  @Override public void createFill(Symbolizer symbolizer){}  }
class C{  public void incrementSendCount(){  sendCount++;  lastSent=Calendar.getInstance().getTime();}  }
class C{  @Override public boolean goBack(){  if (webView.canGoBack()) {    webView.goBack();    return true;  }  return false;}  }
class C{  private void notifySubEquipmentTags(final Long subEquipmentId){  try {    Map<Long,Boolean> notifiedRules=new HashMap<Long,Boolean>();    Collection<Long> tagIds=subEquipmentFacade.getDataTagIds(subEquipmentId);    for (    Long id : tagIds) {      try {        callCacheNotification(id,notifiedRules);      } catch (      CacheElementNotFoundException cacheEx) {        LOGGER.warn("Unable to locate Tag/Rule cache element during Tag supervision " + "change callback (some Tags/Rules may have been omitted)",cacheEx);      }    }  } catch (  CacheElementNotFoundException cacheEx) {    LOGGER.warn("Unable to locate SubEquipment element during Tag supervision " + "change callback (so no invalidation callbacks performed for associated Tags)",cacheEx);  }}  }
class C{  public Map<String,Object> deleteFromCart(Map<String,? extends Object> context){  Map<String,Object> result=null;  ArrayList<String> errorMsgs=new ArrayList<String>();  for (  String o : context.keySet()) {    if (o.toUpperCase().startsWith("DELETE")) {      try {        String indexStr=o.substring(o.lastIndexOf('_') + 1);        int index=Integer.parseInt(indexStr);        try {          this.cart.removeCartItem(index,dispatcher);        } catch (        CartItemModifyException e) {          errorMsgs.add(e.getMessage());        }      } catch (      NumberFormatException nfe) {      }    }  }  if (errorMsgs.size() > 0) {    result=ServiceUtil.returnError(errorMsgs);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    return result;  }  result=ServiceUtil.returnSuccess();  return result;}  }
class C{  public static long calculateDifferentHour(long startTimeMillis,long endTimeMillis){  return calculateDifference(startTimeMillis,endTimeMillis,DifferenceMode.Hour);}  }
class C{  private int loadTable(long uuid) throws IOException {  int bufferIndex=-1;  Set<Long> uuids=null;  int blockIndex=_blocks.size() - 1;  TableBlock lastBlock=_blocks.get(blockIndex);  while (bufferIndex == -1) {    Pair<Integer,Set<Long>> bufferIndexAndUuuids=lastBlock.writeTable(uuid);    bufferIndex=bufferIndexAndUuuids.left;    if (bufferIndex == -1) {      blockIndex++;      lastBlock=new TableBlock(blockIndex * _blockSize);      _blocks.add(lastBlock);    } else {      uuids=bufferIndexAndUuuids.right;    }  }  int index=toIndex(blockIndex,bufferIndex);  for (  Long tableUuid : uuids) {    _fileIndexByUuid.put(tableUuid,index);  }  return index;}  }
class C{  public static LogEntries logEntriesDirect(File[] files,long pid,LogProcessType type,LogEntryMatcher matcher) throws IOException {  SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS");  OSDetails osDetails=OSHelper.getDetails();  matcher.initialize(new LogEntryMatcher.InitializationContext(osDetails.getHostAddress(),osDetails.getHostName(),pid,type));  StringBuilder sb=new StringBuilder();  File latestFile=files[0];  for (int fileIndex=0; fileIndex < files.length; fileIndex++) {    File file=files[fileIndex];    ArrayList<String> lines=new ArrayList<String>();    BackwardsFileInputStream fileInputStream=new BackwardsFileInputStream(file);    try {      BufferedReader reader=new BufferedReader(new InputStreamReader(fileInputStream));      String line;      LogEntryMatcher.Operation operation=matcher.match(new LogEntry(files.length - 1 - fileIndex,LogEntry.Type.FILE_MARKER,file.lastModified(),file.getAbsolutePath()));      if (operation == LogEntryMatcher.Operation.BREAK) {        break;      }      if (operation == LogEntryMatcher.Operation.IGNORE) {        continue;      }      boolean firstLine=true;      long position=fileInputStream.position() + lineSeparator.length();      while ((line=reader.readLine()) != null) {        if (firstLine) {          if (line.length() == 0) {            continue;          }          firstLine=false;        }        char[] chars=line.toCharArray();        for (int j=0, k=chars.length - 1; j < k; j++, k--) {          char temp=chars[j];          chars[j]=chars[k];          chars[k]=temp;        }        position-=chars.length + lineSeparator.length();        line=new String(chars);        int idx=line.indexOf(' ');        if (idx == -1) {          lines.add(line);          continue;        }        idx=line.indexOf(' ',idx + 1);        if (idx == -1) {          lines.add(line);          continue;        }        Date timestamp;        try {          timestamp=dateFormat.parse(line.substring(0,idx));        } catch (        ParseException e) {          lines.add(line);          continue;        }        String logText;        if (lines.isEmpty()) {          logText=line;        } else {          sb.setLength(0);          sb.append(line).append(lineSeparator);          for (int i=lines.size() - 1; i >= 0; i--) {            if (i == 0 && lines.get(i).length() == 0) {              break;            }            sb.append(lines.get(i));            if (i != 0) {              sb.append(lineSeparator);            }          }          logText=sb.toString();        }        if (matcher.match(new LogEntry(position,LogEntry.Type.LOG,timestamp.getTime(),logText)) == LogEntryMatcher.Operation.BREAK) {          return toEntries(type,pid,files,matcher.entries(),latestFile.lastModified());        }        lines.clear();      }    }  finally {      try {        fileInputStream.close();      } catch (      IOException e) {      }    }  }  return toEntries(type,pid,files,matcher.entries(),latestFile.lastModified());}  }
class C{  public static List<Integer> createColors(Resources r,int[] colors){  List<Integer> result=new ArrayList<Integer>();  for (  int i : colors) {    result.add(r.getColor(i));  }  return result;}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  private static void raise(Object value,Class type) throws MessageFormatException {  throw new MessageFormatException("Cannot convert values of type " + value.getClass().getName() + " to "+ type.getName());}  }
class C{  public AppsGetFriendsListQuery type(AppsGetFriendsListType value){  return unsafeParam("type",value);}  }
class C{  private boolean sendNotification(OMAInfo omaInfo,DownloadInfo downloadInfo,String statusMessage){  if (omaInfo == null)   return false;  if (omaInfo.isValueEmpty(OMA_INSTALL_NOTIFY_URI))   return false;  PostStatusTask task=new PostStatusTask(omaInfo,downloadInfo,statusMessage);  task.execute();  return true;}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  public void checkForStatusLoop(){  while (!transactionsIsEmpty()) {    int runningQueued=0;    int runningLoading=0;    int runningError=0;    int runningFinished=0;    for (    String host : availability.keySet()) {      Json state=Json.read(getHostState(host));      LOG.info("State from host [" + host + "]:");      LOG.info(state.toString());      int queued=state.at(State.QUEUED.name()).asInteger();      int loading=state.at(State.LOADING.name()).asInteger();      int error=state.at(State.ERROR.name()).asInteger();      int finished=state.at(State.FINISHED.name()).asInteger();      int terminated=finished + error;      int permitsToRelease=terminated - jobsTerminated.get(host);      availability.get(host).release(permitsToRelease);      jobsTerminated.put(host,terminated);      runningQueued+=queued;      runningLoading+=loading;      runningError+=error;      runningFinished+=finished;    }    enqueuedJobs.set(runningQueued);    loadingJobs.set(runningLoading);    errorJobs.set(runningError);    finishedJobs.set(runningFinished);    printLoaderState();    try {      Thread.sleep(pollingFrequency);    } catch (    InterruptedException e) {      LOG.error("Exception",e);    }  }  stopCheckingStatus();}  }
class C{  public static JFrame showForcePanel(ForceSimulator fsim){  JFrame frame=new JFrame("prefuse Force Simulator");  frame.setContentPane(new JForcePanel(fsim));  frame.pack();  frame.setVisible(true);  return frame;}  }
class C{  public PhotosGetAlbumsQuery photoSizes(Boolean value){  return unsafeParam("photo_sizes",value);}  }
class C{  public void java_lang_Class_newInstance0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable instanceVar=helper.newInstanceOf(thisVar);  helper.assign(returnVar,instanceVar);}  }
class C{  private void handleRemoveWaitingForInfoSA_Template(Context context,final IEntryHolder entry,final ITemplateHolder template) throws SAException {  ILockObject templateLock=getTemplateLockObject(template);  try {synchronized (templateLock) {      _cacheManager.removeWaitingForInfo(context,entry,template,true);      if (template.isDeleted())       return;      if (template.isHasWaitingFor())       return;      if (!template.isInitialIfExistSearchActive()) {        boolean exceptionIfNoEntry=template.getUidToOperateBy() != null;        if (((template.getTemplateOperation() == SpaceOperations.READ_IE) || (template.getTemplateOperation() == SpaceOperations.TAKE_IE)) && !ReadModifiers.isMatchByID(template.getOperationModifiers())) {          exceptionIfNoEntry=false;        }        if (exceptionIfNoEntry) {          EntryNotInSpaceException exv=new EntryNotInSpaceException(template.getUidToOperateBy(),_engine.getSpaceName(),false);          context.setOperationAnswer(template,null,exv);        } else {          context.setOperationAnswer(template,null,null);        }        _cacheManager.removeTemplate(context,template,false,true,false);      }    }  }  finally {    if (templateLock != null)     freeTemplateLockObject(templateLock);  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static boolean isCertificatePinningEnabled(){  return certificatePinning;}  }
class C{  @Override protected void authorizeRequests(final HttpSecurity http) throws Exception {  http.authorizeRequests().antMatchers("/ping","/pong").permitAll().antMatchers(HttpMethod.GET,"/api/v1/profiles").hasAnyAuthority("ROLE_USER","ROLE_ADMIN").antMatchers(HttpMethod.GET,"/api/v1/profiles/**").hasAnyAuthority("ROLE_USER","ROLE_ADMIN").antMatchers(HttpMethod.POST,"/api/v1/profiles/**").hasAnyAuthority("ROLE_ADMIN").antMatchers(HttpMethod.PUT,"/api/v1/profiles/**").hasAnyAuthority("ROLE_ADMIN").antMatchers(HttpMethod.DELETE,"/api/v1/profiles/**").hasAnyAuthority("ROLE_ADMIN").anyRequest().authenticated();}  }
class C{  private double bobyqa(double[] lowerBound,double[] upperBound){  printMethod();  final int n=currentBest.getDimension();  for (int j=0; j < n; j++) {    final double boundDiff=boundDifference[j];    lowerDifference.setEntry(j,lowerBound[j] - currentBest.getEntry(j));    upperDifference.setEntry(j,upperBound[j] - currentBest.getEntry(j));    if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {      if (lowerDifference.getEntry(j) >= ZERO) {        currentBest.setEntry(j,lowerBound[j]);        lowerDifference.setEntry(j,ZERO);        upperDifference.setEntry(j,boundDiff);      } else {        currentBest.setEntry(j,lowerBound[j] + initialTrustRegionRadius);        lowerDifference.setEntry(j,-initialTrustRegionRadius);        final double deltaOne=upperBound[j] - currentBest.getEntry(j);        upperDifference.setEntry(j,FastMath.max(deltaOne,initialTrustRegionRadius));      }    } else     if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {      if (upperDifference.getEntry(j) <= ZERO) {        currentBest.setEntry(j,upperBound[j]);        lowerDifference.setEntry(j,-boundDiff);        upperDifference.setEntry(j,ZERO);      } else {        currentBest.setEntry(j,upperBound[j] - initialTrustRegionRadius);        final double deltaOne=lowerBound[j] - currentBest.getEntry(j);        final double deltaTwo=-initialTrustRegionRadius;        lowerDifference.setEntry(j,FastMath.min(deltaOne,deltaTwo));        upperDifference.setEntry(j,initialTrustRegionRadius);      }    }  }  return bobyqb(lowerBound,upperBound);}  }
class C{  public <T>T until(ExpectedCondition<T> condition){  webDriver.manage().timeouts().implicitlyWait(IMPLICITLY_WAIT_TIME,TimeUnit.SECONDS);  final T result=new WebDriverWait(webDriver,timeOutInSeconds).until(condition);  webDriver.manage().timeouts().implicitlyWait(defaultTimeout,TimeUnit.SECONDS);  return result;}  }
class C{  public GroupsIsMemberQueryWithUserIdsExtended(VkApiClient client,UserActor actor,String groupId,Integer... userIds){  super(client,"groups.isMember",Utils.buildParametrizedType(List.class,MemberStatusFull.class));  accessToken(actor.getAccessToken());  groupId(groupId);  extended(true);  userIds(userIds);}  }
class C{  public boolean string_constants(){  return soot.PhaseOptions.getBoolean(options,"string-constants");}  }
class C{  public static boolean isReady(){  return isSupported() && isInitialized() && Placement.isReady();}  }
class C{  public void store(File file,Storable obj) throws IOException {  try (FileOutputStream fos=new FileOutputStream(file)){    serializer.write(fos,obj);  } }  }
class C{  private String versionName(String prefix,int ver){  return fName(prefix) + String.valueOf(ver);}  }
class C{  public LuceneSearcher(Directory dir,String field,boolean readOnly){  this(dir,new String[]{field},readOnly);}  }
class C{  public boolean isRepeat(){  return scriptDetails.isRepeat();}  }
class C{  public static void w(String msg){  if (isDebug) {    Log.w(TAG,msg);  }}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  public PhotosGetAllCommentsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public LeExpr newLeExpr(Value op1,Value op2){  return new JLeExpr(op1,op2);}  }
class C{  public DistributedLogClientBuilder streamStatsReceiver(StatsReceiver streamStatsReceiver){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._streamStatsReceiver=streamStatsReceiver;  return newBuilder;}  }
class C{  public RulesExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public boolean retainEntries(TObjectIntProcedure<K> procedure){  boolean modified=false;  K[] keys=(K[])_set;  int[] values=_values;  tempDisableAutoCompaction();  try {    for (int i=keys.length; i-- > 0; ) {      if (keys[i] != FREE && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    reenableAutoCompaction(true);  }  return modified;}  }
class C{  private static int secondaryHash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public MarketSearchQuery tags(List<Integer> value){  return unsafeParam("tags",value);}  }
class C{  public int executeUpdate(String sql) throws GenericDataSourceException {  Statement stmt=null;  try {    stmt=_connection.createStatement();    return stmt.executeUpdate(sql);  } catch (  SQLException sqle) {    throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle);  } finally {    if (stmt != null) {      try {        stmt.close();      } catch (      SQLException sqle) {        Debug.logWarning("Unable to close 'statement': " + sqle.getMessage(),module);      }    }  }}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzFinalHighSurrogate=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  private void fillDeclaredPrefixes(StartElement event){  fillDeclaredPrefixes(event.getNamespaces());}  }
class C{  public static int expandJTreeNode(javax.swing.JTree tree,javax.swing.tree.TreeModel model,Object node,int row,int depth){  if (node != null && !model.isLeaf(node)) {    tree.expandRow(row);    if (depth != 0) {      for (int index=0; row + 1 < tree.getRowCount() && index < model.getChildCount(node); index++) {        row++;        Object child=model.getChild(node,index);        if (child == null)         break;        javax.swing.tree.TreePath path;        while ((path=tree.getPathForRow(row)) != null && path.getLastPathComponent() != child)         row++;        if (path == null)         break;        row=expandJTreeNode(tree,model,child,row,depth - 1);      }    }  }  return row;}  }
class C{  public Matrix3f transpose(){  return transposeLocal();}  }
class C{  private void postLoginOperations() throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    utf8Supported=false;    restSupported=false;    mlsdSupported=false;    modezSupported=false;    dataChannelEncrypted=false;    communication.sendFTPCommand("FEAT");    FTPReply r=communication.readFTPReply();    if (r.getCode() == 211) {      String[] lines=r.getMessages();      for (int i=1; i < lines.length - 1; i++) {        String feat=lines[i].trim().toUpperCase();        if ("REST STREAM".equalsIgnoreCase(feat)) {          restSupported=true;          continue;        }        if ("UTF8".equalsIgnoreCase(feat)) {          utf8Supported=true;          communication.changeCharset("UTF-8");          continue;        }        if ("MLSD".equalsIgnoreCase(feat)) {          mlsdSupported=true;          continue;        }        if ("MODE Z".equalsIgnoreCase(feat) || feat.startsWith("MODE Z ")) {          modezSupported=true;          continue;        }      }    }    if (utf8Supported) {      communication.sendFTPCommand("OPTS UTF8 ON");      communication.readFTPReply();    }    if (security == SECURITY_FTPS || security == SECURITY_FTPES) {      communication.sendFTPCommand("PBSZ 0");      communication.readFTPReply();      communication.sendFTPCommand("PROT P");      FTPReply reply=communication.readFTPReply();      if (reply.isSuccessCode()) {        dataChannelEncrypted=true;      }    }  }}  }
class C{  private static byte to_byte_(int b){  assert (b >= 0 && b < 256);  return (byte)b;}  }
class C{  public void print(PrintWriter output,NumberFormat format,int width){  output.println();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      String s=format.format(A[i][j]);      int padding=Math.max(1,width - s.length());      for (int k=0; k < padding; k++)       output.print(' ');      output.print(s);    }    output.println();  }  output.println();}  }
class C{  public static boolean openEditors(@NotNull Project project,@NotNull Collection<File> files,boolean select){  if (files.size() > 0) {    boolean result=true;    VirtualFile last=null;    for (    File file : files) {      if (file.exists()) {        VirtualFile vFile=VfsUtil.findFileByIoFile(file,true);        if (vFile != null) {          result&=openEditor(project,vFile);          last=vFile;        } else {          result=false;        }      }    }    if (select && last != null) {      selectEditor(project,last);    }    return result;  }  return false;}  }
class C{  public static final Edge locateEdgeInGraph(UniqueVertexGraph gGraph,String sHead,String sTail){  VertexImpl vHead=new VertexImpl();  vHead.setLabel(sHead);  VertexImpl vTail=new VertexImpl();  vTail.setLabel(sTail);  return locateEdgeInGraph(gGraph,vHead,vTail);}  }
class C{  private boolean stopTrackingJob(JobStatus jobStatus){  boolean removed;  boolean rocking;synchronized (mJobs) {    removed=mJobs.remove(jobStatus);    rocking=mReadyToRock;  }  if (removed && rocking) {    for (int i=0; i < mControllers.size(); i++) {      StateController controller=mControllers.get(i);      controller.maybeStopTrackingJob(jobStatus);    }  }  return removed;}  }
class C{  public Configurator fromFile(File file){  if (!file.exists()) {    throw new FileNotFoundException(file.getAbsolutePath() + " does not exist.");  }  return new Configurator(file.getAbsolutePath(),false);}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  protected boolean collectionMatch(Element elem,String name){  boolean match;synchronized (elem) {    match=false;switch (_lookingFor) {case ANCHOR:      match=(elem instanceof HTMLAnchorElement) && elem.getAttribute("name").length() > 0;    break;case FORM:  match=(elem instanceof HTMLFormElement);break;case IMAGE:match=(elem instanceof HTMLImageElement);break;case APPLET:match=(elem instanceof HTMLAppletElement) || (elem instanceof HTMLObjectElement && ("application/java".equals(elem.getAttribute("codetype")) || elem.getAttribute("classid").startsWith("java:")));break;case ELEMENT:match=(elem instanceof HTMLFormControl);break;case LINK:match=((elem instanceof HTMLAnchorElement || elem instanceof HTMLAreaElement) && elem.getAttribute("href").length() > 0);break;case AREA:match=(elem instanceof HTMLAreaElement);break;case OPTION:match=(elem instanceof HTMLOptionElement);break;case ROW:match=(elem instanceof HTMLTableRowElement);break;case TBODY:match=(elem instanceof HTMLTableSectionElement && elem.getTagName().equals("TBODY"));break;case CELL:match=(elem instanceof HTMLTableCellElement);break;}if (match && name != null) {if (elem instanceof HTMLAnchorElement && name.equals(elem.getAttribute("name"))) return true;match=name.equals(elem.getAttribute("id"));}}return match;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillCritical_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200998,skilltarget,skillcaster,skillname);}  }
class C{  public static Map<String,Object> resetGrandTotal(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  GenericValue orderHeader=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    String errMsg="ERROR: Could not set grantTotal on OrderHeader entity: " + e.toString();    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  if (orderHeader != null) {    OrderReadHelper orh=new OrderReadHelper(orderHeader);    BigDecimal currentTotal=orderHeader.getBigDecimal("grandTotal");    BigDecimal currentSubTotal=orderHeader.getBigDecimal("remainingSubTotal");    BigDecimal updatedTotal=orh.getOrderGrandTotal();    String productStoreId=orderHeader.getString("productStoreId");    String showPricesWithVatTax=null;    if (UtilValidate.isNotEmpty(productStoreId)) {      GenericValue productStore=null;      try {        productStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",productStoreId).cache().queryOne();      } catch (      GenericEntityException e) {        String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorCouldNotFindProductStoreWithID",UtilMisc.toMap("productStoreId",productStoreId),(Locale)context.get("locale")) + e.toString();        Debug.logError(e,errorMessage,module);        return ServiceUtil.returnError(errorMessage + e.getMessage() + ").");      }      showPricesWithVatTax=productStore.getString("showPricesWithVatTax");    }    BigDecimal remainingSubTotal=ZERO;    if (UtilValidate.isNotEmpty(productStoreId) && "Y".equalsIgnoreCase(showPricesWithVatTax)) {      remainingSubTotal=updatedTotal.subtract(orh.getOrderReturnedTotal()).subtract(orh.getShippingTotal());    } else {      remainingSubTotal=updatedTotal.subtract(orh.getOrderReturnedTotal()).subtract(orh.getOrderNonReturnedTaxAndShipping());    }    if (currentTotal == null || currentSubTotal == null || updatedTotal.compareTo(currentTotal) != 0 || remainingSubTotal.compareTo(currentSubTotal) != 0) {      orderHeader.set("grandTotal",updatedTotal);      orderHeader.set("remainingSubTotal",remainingSubTotal);      try {        orderHeader.store();      } catch (      GenericEntityException e) {        String errMsg="ERROR: Could not set grandTotal on OrderHeader entity: " + e.toString();        Debug.logError(e,errMsg,module);        return ServiceUtil.returnError(errMsg);      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public XML11DTDConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(parentSettings);  fComponents=new ArrayList();  fXML11Components=new ArrayList();  fCommonComponents=new ArrayList();  fRecognizedFeatures=new ArrayList();  fRecognizedProperties=new ArrayList();  fFeatures=new HashMap();  fProperties=new HashMap();  final String[] recognizedFeatures={CONTINUE_AFTER_FATAL_ERROR,LOAD_EXTERNAL_DTD,VALIDATION,NAMESPACES,EXTERNAL_GENERAL_ENTITIES,EXTERNAL_PARAMETER_ENTITIES,PARSER_SETTINGS};  addRecognizedFeatures(recognizedFeatures);  fFeatures.put(VALIDATION,Boolean.FALSE);  fFeatures.put(NAMESPACES,Boolean.TRUE);  fFeatures.put(EXTERNAL_GENERAL_ENTITIES,Boolean.TRUE);  fFeatures.put(EXTERNAL_PARAMETER_ENTITIES,Boolean.TRUE);  fFeatures.put(CONTINUE_AFTER_FATAL_ERROR,Boolean.FALSE);  fFeatures.put(LOAD_EXTERNAL_DTD,Boolean.TRUE);  fFeatures.put(PARSER_SETTINGS,Boolean.TRUE);  final String[] recognizedProperties={SYMBOL_TABLE,ERROR_HANDLER,ENTITY_RESOLVER,ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_PROCESSOR,DTD_VALIDATOR,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,XML_STRING,XMLGRAMMAR_POOL,JAXP_SCHEMA_SOURCE,JAXP_SCHEMA_LANGUAGE};  addRecognizedProperties(recognizedProperties);  if (symbolTable == null) {    symbolTable=new SymbolTable();  }  fSymbolTable=symbolTable;  fProperties.put(SYMBOL_TABLE,fSymbolTable);  fGrammarPool=grammarPool;  if (fGrammarPool != null) {    fProperties.put(XMLGRAMMAR_POOL,fGrammarPool);  }  fEntityManager=new XMLEntityManager();  fProperties.put(ENTITY_MANAGER,fEntityManager);  addCommonComponent(fEntityManager);  fErrorReporter=new XMLErrorReporter();  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());  fProperties.put(ERROR_REPORTER,fErrorReporter);  addCommonComponent(fErrorReporter);  fNamespaceScanner=new XMLNSDocumentScannerImpl();  fProperties.put(DOCUMENT_SCANNER,fNamespaceScanner);  addComponent(fNamespaceScanner);  fDTDScanner=new XMLDTDScannerImpl();  fProperties.put(DTD_SCANNER,fDTDScanner);  addComponent((XMLComponent)fDTDScanner);  fDTDProcessor=new XMLDTDProcessor();  fProperties.put(DTD_PROCESSOR,fDTDProcessor);  addComponent(fDTDProcessor);  fDTDValidator=new XMLNSDTDValidator();  fProperties.put(DTD_VALIDATOR,fDTDValidator);  addComponent(fDTDValidator);  fDatatypeValidatorFactory=DTDDVFactory.getInstance();  fProperties.put(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);  fValidationManager=new ValidationManager();  fProperties.put(VALIDATION_MANAGER,fValidationManager);  fVersionDetector=new XMLVersionDetector();  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {    XMLMessageFormatter xmft=new XMLMessageFormatter();    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);  }  try {    setLocale(Locale.getDefault());  } catch (  XNIException e) {  }  fConfigUpdated=false;}  }
class C{  public void squaresColor(@ColorInt int color){  squaresPaint.setColor(color);  invalidate();}  }
class C{  public GSTopicConnectionFactoryImpl(IJSpace space,IMessageConverter messageConverter) throws JMSException {  super(space,messageConverter);}  }
class C{  public SimplifiedIntervalList subtract(SimplifiedIntervalList that){  Iterator<Interval> theseIntervals=this.iterator();  Iterator<Interval> thoseIntervals=that.iterator();  Interval thisCurrent=getNextIfAvailable.apply(theseIntervals);  Interval thatCurrent=getNextIfAvailable.apply(thoseIntervals);  List<Interval> collected=new ArrayList<>();  if (thisCurrent == null) {    return SimplifiedIntervalList.NO_INTERVALS;  }  while (thisCurrent != null && thatCurrent != null) {    if (thisCurrent.isBefore(thatCurrent)) {      collected.add(thisCurrent);    } else     if (thisCurrent.overlaps(thatCurrent)) {      if (thisCurrent.getStart().isBefore(thatCurrent.getStart())) {        collected.add(new Interval(thisCurrent.getStart(),thatCurrent.getStart()));      }      if (!thisCurrent.getEnd().isBefore(thatCurrent.getEnd())) {        thisCurrent=new Interval(thatCurrent.getEnd(),thisCurrent.getEnd());      }    }    if (thisCurrent.isBefore(thatCurrent.getEnd())) {      thisCurrent=getNextIfAvailable.apply(theseIntervals);    } else {      thatCurrent=getNextIfAvailable.apply(thoseIntervals);    }  }  if (thatCurrent == null) {    collected.add(thisCurrent);    while (theseIntervals.hasNext()) {      collected.add(theseIntervals.next());    }  }  return new SimplifiedIntervalList(collected);}  }
class C{  public static ToolbarTapTarget forToolbarOverflow(Toolbar toolbar,CharSequence title){  return forToolbarOverflow(toolbar,title,null);}  }
class C{  void updateItem(Barcode barcode){  mBarcode=barcode;  postInvalidate();}  }
class C{  public void performDefaultOutgoingBehavior(ExecutionEntity activityExecution){  performOutgoingBehavior(activityExecution,true,false);}  }
class C{  protected XMLEntityManager createEntityManager(){  return new XMLEntityManager();}  }
class C{  private void loadDataFromDB(Context context,SpaceConfigReader configReader) throws SAException {  InitialLoadInfo initialLoadInfo=new InitialLoadInfo(_logger,_logRecoveryProcess,_recoveryLogInterval);  if (isOffHeapCachePolicy())   initialLoadInfo.setOffHeapFifoInitialLoader(new OffHeapFifoInitialLoader());  context.setInitialLoadInfo(initialLoadInfo);  if (isResidentEntriesCachePolicy()) {    residentEntriesInitialLoad(context,configReader,initialLoadInfo);    if (isOffHeapCachePolicy() && _persistentBlobStore && _engine.getSpaceImpl().isPrimary()&& _entries.isEmpty()) {      if (((IBlobStoreStorageAdapter)_storageAdapter).hasAnotherInitialLoadSource() && _logger.isLoggable(Level.INFO))       _logger.info("persistent blob store is empty, trying the mirror initial load source");      residentEntriesInitialLoad(context,configReader,initialLoadInfo);    }  }  if (isEvictableCachePolicy())   evictableEntriesInitialLoad(context,configReader,initialLoadInfo);  if (_logger.isLoggable(Level.INFO)) {    String formattedErrors=format(initialLoadInfo.getInitialLoadErrors());    _logger.info("Data source recovery:\n " + "\tEntries found in data source: " + initialLoadInfo.getFoundInDatabase() + ".\n"+ "\tEntries inserted to space: "+ initialLoadInfo.getInsertedToCache()+ ".\n"+ "\tEntries ignored: "+ (initialLoadInfo.getFoundInDatabase() - initialLoadInfo.getInsertedToCache())+ ".\n"+ formattedErrors+ "\tTotal Time: "+ JSpaceUtilities.formatMillis(SystemTime.timeMillis() - initialLoadInfo.getRecoveryStartTime())+ ".");  }}  }
class C{  public boolean isDataType(DataType dataType){  return this.dataType != null && this.dataType.equals(dataType);}  }
class C{  public void copy(DataTable megan4Table){  clear();  StringWriter sw=new StringWriter();  try {    megan4Table.write(sw,false);    read(new BufferedReader(new StringReader(sw.toString())),false);  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  private void removeTestData(){  alarmLogMapper.deleteAlarmLog(ALARM_ID);}  }
class C{  public boolean isIdle(){  return this.loadedBundles.isEmpty() && this.preAllocatedBundles.isEmpty();}  }
class C{  @Override public void endGroup(Augmentations augmentations) throws XNIException {}  }
class C{  public BTreeIndex(IndexInfo ii,Type fldType,Transaction tx){  this.ii=ii;  this.dataFileName=ii.tableName() + ".tbl";  this.tx=tx;  ccMgr=tx.concurrencyMgr();  keyType=fldType;  leafFileName=BTreeLeaf.getFileName(ii.indexName());  if (fileSize(leafFileName) == 0)   appendBlock(leafFileName,BTreeLeaf.schema(fldType),new long[]{-1,-1});  dirFileName=BTreeDir.getFileName(ii.indexName());  rootBlk=new BlockId(dirFileName,0);  if (fileSize(dirFileName) == 0)   appendBlock(dirFileName,BTreeDir.schema(fldType),new long[]{0});  BTreeDir rootDir=new BTreeDir(rootBlk,fldType,tx);  if (rootDir.getNumRecords() == 0)   rootDir.insert(new DirEntry(keyType.minValue(),0));  rootDir.close();}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public static final double slugsToKilograms(double slugs){  return slugs * SLUG_TO_KILOGRAM;}  }
class C{  public String sampa2voice(String sampaPhoneme){  if (sampa2voiceMap != null && sampa2voiceMap.containsKey(sampaPhoneme))   return sampa2voiceMap.get(sampaPhoneme); else   return sampaPhoneme;}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  @SubscribeEvent public void onSleepInBed(PlayerSleepInBedEvent event){  if (!BWConfig.hardcoreBeds)   return;  if (EntityPlayerExt.isSurvival(event.getEntityPlayer()))   event.setResult(EntityPlayer.SleepResult.NOT_SAFE);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  static IBlockState applyVariant(IBlockState state,Variation variant){  boolean relaxRequirements=false;  for (int i=0; i < 2; i++) {    for (    IProperty prop : (java.util.Set<IProperty>)state.getProperties().keySet()) {      if ((prop.getName().equals("variant") || relaxRequirements) && prop.getValueClass().isEnum()) {        Object[] values=prop.getValueClass().getEnumConstants();        for (        Object obj : values) {          if (obj != null && obj.toString().equalsIgnoreCase(variant.getValue())) {            return state.withProperty(prop,(Comparable)obj);          }        }      }    }    relaxRequirements=true;  }  return state;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public BrowsableImplementor(BrowsableModel model,BrowsableView view){  this.model=model;  this.view=view;}  }
class C{  protected WallGetByIdQuery posts(String... value){  return unsafeParam("posts",value);}  }
class C{  public Builder clientCiphers(Collection<String> clientCiphers){  this.clientCiphers=clientCiphers;  return this;}  }
class C{  public void addQuery(boolean and,ContentletQuery contentletQuery){  if (and) {    query.append(" " + contentletQuery.getQuery());  } else {    query.insert(0,"(");    query.append(") (");    query.append(contentletQuery.getQuery());    query.append(")");  }}  }
class C{  public static int discretize(double value,double min,double max,int binCount){  int discreteValue=(int)(binCount * normalize(value,min,max));  return clamp(discreteValue,0,binCount - 1);}  }
class C{  protected final void fireColumnEvent(int type,int start,int end){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,type,start,end);}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  public boolean union(RWSet other){  throw new RuntimeException("Can't do that");}  }
class C{  public GSBytesMessageImpl(GSSessionImpl session) throws JMSException {  this(session,null);}  }
class C{  public static boolean bernoulli(double p){  if (!(p >= 0.0 && p <= 1.0))   throw new IllegalArgumentException("Probability must be between 0.0 and 1.0");  return uniform() < p;}  }
class C{  public Quaternion subtract(final Quaternion q){  return subtract(this,q);}  }
class C{  public MessagesGetLongPollHistoryQuery msgsLimit(Integer value){  return unsafeParam("msgs_limit",value);}  }
class C{  protected BaseSecantSolver(final double absoluteAccuracy,final Method method){  super(absoluteAccuracy);  this.allowed=AllowedSolution.ANY_SIDE;  this.method=method;}  }
class C{  public Builder noMoveStart(Boolean noMoveStart){  this.noMoveStart=noMoveStart;  return this;}  }
class C{  public boolean isApplicable(){  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX;}  }
class C{  public static StyledLayerDescriptor createNewLine(){  StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();  NamedLayer namedLayer=styleFactory.createNamedLayer();  sld.addStyledLayer(namedLayer);  Style style=styleFactory.createStyle();  namedLayer.addStyle(style);  List<FeatureTypeStyle> ftsList=style.featureTypeStyles();  FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle();  ftsList.add(fts);  Rule rule=styleFactory.createRule();  fts.rules().add(rule);  LineSymbolizer line=createDefaultLineSymbolizer();  rule.symbolizers().add(line);  return sld;}  }
class C{  public Plane(final Vector3D normal,final double tolerance) throws MathRuntimeException {  setNormal(normal);  this.tolerance=tolerance;  originOffset=0;  setFrame();}  }
class C{  public RefType concreteType(Local l,Stmt s){  HashMap<Local,Set<NewExpr>> flowBefore=getFlowBefore(s);  Set<NewExpr> set=flowBefore.get(l);  if (set.size() != 1)   return null; else {    NewExpr singleNewExpr=set.iterator().next();    if (singleNewExpr == UNKNOWN)     return null;    return (RefType)singleNewExpr.getType();  }}  }
class C{  public ArrayRef newArrayRef(Value base,Value index){  return new JArrayRef(base,index);}  }
class C{  public boolean isTargetSpecificLayout(){  return myEditedConfig.getVersionQualifier() != null;}  }
class C{  protected void clearAggregateMappings(int row,boolean update){  Index index=m_aggregated.index(AGGREGATE);  boolean fire=false;  for (IntIterator rows=index.rows(row); rows.hasNext(); ) {    int r=rows.nextInt();    rows.remove();    m_aggregated.removeRow(r);    fire=true;  }  if (update && fire)   fireTableEvent(row,row,EventConstants.ALL_COLUMNS,EventConstants.UPDATE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200910,skilltarget);}  }
class C{  private void loadApps(){  Intent i=new Intent(Intent.ACTION_MAIN,null);  i.addCategory(Intent.CATEGORY_LAUNCHER);switch (tabId) {case 1:    LinkedList<String> ordered_apps=sqlHelper.getAllApps();  List<ResolveInfo> availableActivities=mPacMan.queryIntentActivities(i,0);for (int j=0; j < availableActivities.size(); j++) {  ResolveInfo ri=availableActivities.get(j);  if (ordered_apps.contains(ri.activityInfo.packageName)) {    continue;  }  AppDetail app=new AppDetail();  app.label=ri.loadLabel(mPacMan);  app.name=ri.activityInfo.packageName;  app.icon=null;  appsList.add(app);}break;default :LinkedList<String> app_names=sqlHelper.getAppsForTab(tabId);for (String app_name : app_names) {boolean success=addAppToList(app_name);if (!success) {Log.d("DB","Removing app " + app_name + " from db");sqlHelper.removeAppFromTab(app_name,this.tabId);}}if (app_names.size() == 0) {showEmptyCategoryNotice();}}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200911,skilltarget);}  }
class C{  public void handleReadRequest(ChannelEntry channelEntry,Reader.Context ctx,ReadSelectorThread handler){  MarshalInputStream stream=channelEntry.readRequest(ctx);  if ((ctx.phase != Reader.Context.Phase.FINISH) || (stream == null && !ctx.isSystemRequest())) {    handler.registerKey(ctx.selectionKey);    return;  }  ctx.selectionKey.attach(null);  OperationPriority operationPriority;  Runnable task;  if (ctx.isSystemRequest()) {    operationPriority=OperationPriority.MONITORING;    task=ctx.systemRequestContext.getResponseTask(this,channelEntry,ctx.startTimestamp);  } else {    operationPriority=RequestPacket.getOperationPriorityFromBytes(ctx.bytes);    task=new ChannelEntryTask(this,channelEntry,stream);  }  executeAccordingToPriority(operationPriority,task);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  boolean descendsFrom(String cname){  cp_info cf;  int i;  cf=constant_pool[super_class];  if (cf.toString(constant_pool).compareTo(cname) == 0)   return true;  for (i=0; i < interfaces_count; i++) {    cf=constant_pool[interfaces[i]];    if (cf.toString(constant_pool).compareTo(cname) == 0)     return true;  }  return false;}  }
class C{  private static String removeQuoteCharactersIfNecessary(String fileName,String option,char quote) throws Exception {  boolean startingQuote=(option.charAt(0) == quote);  boolean endingQuote=(option.charAt(option.length() - 1) == quote);  if (startingQuote && endingQuote) {    if (option.length() == 1) {      throw new Exception("Malformed option in options file(" + fileName + "): "+ option);    }    return option.substring(1,option.length() - 1);  }  if (startingQuote || endingQuote) {    throw new Exception("Malformed option in options file(" + fileName + "): "+ option);  }  return option;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CMD_WHISHPER_OUTPUT(String value0){  return new SM_SYSTEM_MESSAGE(1400006,value0);}  }
class C{  @deprecated public UScriptRun(String text,int start,int count){  reset(text,start,count);}  }
class C{  public boolean hasOptionSet(){  return optionSet != null;}  }
class C{  public void removeLookupLocators(LookupLocator[] locators) throws RemoteException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(JoinStateManager.class.getName(),"removeLookupLocators");  }  prepareLocators(locators);  ((DiscoveryLocatorManagement)dm).removeLocators(locators);  update();  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(JoinStateManager.class.getName(),"removeLookupLocators");  }}  }
class C{  private List<DataQueryParams> groupByDaysInPeriod(DataQueryParams params){  List<DataQueryParams> queries=new ArrayList<>();  if (params.getPeriods().isEmpty() || !params.isAggregationType(AggregationType.AVERAGE_SUM_INT)) {    queries.add(DataQueryParams.newBuilder(params).build());    return queries;  }  ListMap<Integer,DimensionalItemObject> daysPeriodMap=QueryPlannerUtils.getDaysPeriodMap(params.getPeriods());  DimensionalObject periodDim=params.getDimension(PERIOD_DIM_ID);  for (  Integer days : daysPeriodMap.keySet()) {    DataQueryParams query=DataQueryParams.newBuilder(params).addOrSetDimensionOptions(periodDim.getDimension(),periodDim.getDimensionType(),periodDim.getDimensionName(),daysPeriodMap.get(days)).build();    queries.add(query);  }  if (queries.size() > 1) {    log.debug("Split on days in period: " + queries.size());  }  return queries;}  }
class C{  public MultiDirectionalSimplex(final int n){  this(n,1d);}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  if (fNamespaces) {    handleStartElement(element,attributes,augs,false);  } else   if (fDocumentHandler != null) {    fDocumentHandler.startElement(element,attributes,augs);  }}  }
class C{  public int modify_file(String group_name,String appender_filename,long file_offset,String local_filename) throws IOException, MyException {  File f=new File(local_filename);  FileInputStream fis=new FileInputStream(f);  try {    return this.do_modify_file(group_name,appender_filename,file_offset,f.length(),new UploadStream(fis,f.length()));  }  finally {    fis.close();  }}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  if (DEBUG)   debugPrintln("debug is on");  ClassLoader cl=findClassLoader();  try {    String systemProp=SecuritySupport.getSystemProperty(factoryId);    if (systemProp != null && systemProp.length() > 0) {      if (DEBUG)       debugPrintln("found system property, value=" + systemProp);      return newInstance(systemProp,cl,true);    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=SecuritySupport.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=SecuritySupport.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXercesProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=SecuritySupport.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXercesProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=SecuritySupport.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXercesProperties=new Properties();          fis=SecuritySupport.getFileInputStream(propertiesFile);          fXercesProperties.load(fis);        }      } catch (      Exception x) {        fXercesProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXercesProperties != null) {      factoryClassName=fXercesProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=SecuritySupport.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    if (DEBUG)     debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return newInstance(factoryClassName,cl,true);  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  if (DEBUG)   debugPrintln("using fallback, value=" + fallbackClassName);  return newInstance(fallbackClassName,cl,true);}  }
class C{  private void findComponent(@NotNull NlComponent component,@NotNull ArrayList<ConstraintWidget> widgets){  ConstraintWidget widget=myWidgetsScene.getWidget(component);  if (widget != null) {    widgets.remove(widget);  }  if (component.children != null) {    for (    NlComponent child : component.children) {      findComponent(child,widgets);    }  }}  }
class C{  public void onApplicationEvent(ApplicationEvent applicationEvent){  if (applicationEvent instanceof ContextRefreshedEvent) {    Map gigaBeans=applicationContext.getBeansOfType(GigaSpace.class);    if (gigaBeans != null) {      for (Iterator it=gigaBeans.entrySet().iterator(); it.hasNext(); ) {        Map.Entry entry=(Map.Entry)it.next();        gigaSpacesBeans.put((String)entry.getKey(),(GigaSpace)entry.getValue());      }    }  }}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(GpmrApp.class);  SimpleCommandLinePropertySource source=new SimpleCommandLinePropertySource(args);  addDefaultProfile(app,source);  Environment env=app.run(args).getEnvironment();  log.info("\n----------------------------------------------------------\n\t" + "Application '{}' is running! Access URLs:\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t"+ "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("spring.application.name"),env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));}  }
class C{  public void add(MultidimensionalReward other){  for (  Map.Entry<Integer,Float> entry : other.map.entrySet()) {    Integer dimension=entry.getKey();    Float reward_value=entry.getValue();    this.add(dimension.intValue(),reward_value.floatValue());  }}  }
class C{  public static String[][] invert(final String[][] array){  final String[][] newarray=new String[array.length][2];  for (int i=0; i < array.length; i++) {    newarray[i][0]=array[i][1];    newarray[i][1]=array[i][0];  }  return newarray;}  }
class C{  @Transactional("cacheTransactionManager") @Override public void updateCacheable(final T cacheable){  persistenceMapper.updateCacheable(cacheable);}  }
class C{  public ConstraintWidget findWidget(ConstraintWidgetContainer container,float x,float y){  WidgetCompanion companion=(WidgetCompanion)container.getCompanionWidget();  WidgetDecorator containerDecorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);  if (!containerDecorator.isVisible()) {    return null;  }  ConstraintWidget found=null;  if (container == getRoot()) {    found=findWidgetInSelection(x,y);    if (found != null) {      return found;    }  }  int l=container.getDrawX();  int t=container.getDrawY();  int r=l + container.getWidth();  int b=t + container.getHeight();  if (x >= l && x <= r && y >= t && y <= b) {    found=container;  }  for (  ConstraintWidget widget : container.getChildren()) {    WidgetCompanion widgetCompanion=(WidgetCompanion)widget.getCompanionWidget();    WidgetDecorator widgetDecorator=widgetCompanion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);    if (!widgetDecorator.isVisible()) {      continue;    }    if (widget instanceof ConstraintWidgetContainer) {      ConstraintWidget f=findWidget((ConstraintWidgetContainer)widget,x,y);      if (f != null) {        found=f;      }    } else {      l=widget.getDrawX();      t=widget.getDrawY();      r=l + widget.getWidth();      b=t + widget.getHeight();      if (x >= l && x <= r && y >= t && y <= b) {        found=widget;      }    }  }  return found;}  }
class C{  @Override protected void parseOptimizationData(OptimizationData... optData){  super.parseOptimizationData(optData);  for (  OptimizationData data : optData) {    if (data instanceof GoalType) {      goal=(GoalType)data;      continue;    }    if (data instanceof ObjectiveFunction) {      function=((ObjectiveFunction)data).getObjectiveFunction();      continue;    }  }}  }
class C{  public Matrix identity(){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=(i == j ? 1.0 : 0.0);    }  }  return A;}  }
class C{  public synchronized void terminate(){  if (terminated)   return;  terminated=true;  terminateTaskMgr();synchronized (pendingNotifies) {    pendingNotifies.clear();  }synchronized (lookupAliveTasks) {    LookupAliveTask[] lats=(LookupAliveTask[])lookupAliveTasks.toArray(new LookupAliveTask[lookupAliveTasks.size()]);    for (int i=0; i < lats.length; i++) {      lats[i].interrupt();    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201007,skilltarget,skillcaster,skillname);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void remove(final int position){  data.remove(position);  notifyItemRemoved(position);}  }
class C{  public boolean isInNetEx(String ipOrHost,String cidr){  if (ipOrHost == null || ipOrHost.length() == 0 || cidr == null || cidr.length() == 0) {    return false;  }  try {    String[] cidrParts=cidr.split("/");    if (cidrParts.length != 2) {      return false;    }    String cidrRange=cidrParts[0];    int cidrBits=Integer.parseInt(cidrParts[1]);    byte[] addressBytes=InetAddress.getByName(ipOrHost).getAddress();    BigInteger ip=new BigInteger(addressBytes);    BigInteger mask=addressBytes.length == 4 ? HIGH_32_INT.shiftLeft(32 - cidrBits) : HIGH_128_INT.shiftLeft(128 - cidrBits);    byte[] rangeBytes=InetAddress.getByName(cidrRange).getAddress();    BigInteger range=new BigInteger(rangeBytes);    BigInteger lowIP=range.and(mask);    BigInteger highIP=lowIP.add(mask.not());    return lowIP.compareTo(ip) <= 0 && highIP.compareTo(ip) >= 0;  } catch (  UnknownHostException e) {    return false;  }}  }
class C{  @Override public void abort() throws IOException {  super.abort();}  }
class C{  public FileVersion(File f){  this.f=f;  name=f.getName();  String[] ss=name.split("[-_]");  if (ss.length > 1) {    String ver=ss[ss.length - 1];    name=name.substring(0,name.length() - ver.length() - 1);    ver=ver.substring(0,ver.length() - 4);    this.ver=new Version(ver);  }}  }
class C{  protected void initLinkTable(){  m_links=createLinkTable();  IntIterator edges=getEdgeTable().rows();  while (edges.hasNext()) {    updateDegrees(edges.nextInt(),1);  }}  }
class C{  public void overrideBackbutton(boolean override){  LOG.i("App","WARNING: Back Button Default Behavior will be overridden.  The backbutton event will be fired!");  webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_BACK,override);}  }
class C{  protected void internalTransform(Body b,String phaseName,Map<String,String> options){  int counter=0;  Iterator<Local> localsIt=b.getLocals().iterator();  Set<String> localNames=new HashSet<String>(b.getLocals().size());  while (localsIt.hasNext()) {    localNames.add((localsIt.next()).getName());  }  SideEffectTester sideEffect;  if (Scene.v().hasCallGraph() && !PhaseOptions.getBoolean(options,"naive-side-effect")) {    sideEffect=new PASideEffectTester();  } else {    sideEffect=new NaiveSideEffectTester();  }  sideEffect.newMethod(b.getMethod());  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "]     Eliminating common subexpressions "+ (sideEffect instanceof NaiveSideEffectTester ? "(naively)" : "")+ "...");  AvailableExpressions ae=new FastAvailableExpressions(b,sideEffect);  Chain<Unit> units=b.getUnits();  Iterator<Unit> unitsIt=units.snapshotIterator();  while (unitsIt.hasNext()) {    Stmt s=(Stmt)unitsIt.next();    if (s instanceof AssignStmt) {      Chain availExprs=ae.getAvailableEquivsBefore(s);      Value v=((AssignStmt)s).getRightOp();      EquivalentValue ev=new EquivalentValue(v);      if (availExprs.contains(ev)) {        List availPairs=ae.getAvailablePairsBefore(s);        Iterator availIt=availPairs.iterator();        while (availIt.hasNext()) {          UnitValueBoxPair up=(UnitValueBoxPair)availIt.next();          if (up.getValueBox().getValue().equivTo(v)) {            String newName="$cseTmp" + counter;            counter++;            while (localNames.contains(newName)) {              newName="$cseTmp" + counter;              counter++;            }            Local l=Jimple.v().newLocal(newName,Type.toMachineType(v.getType()));            b.getLocals().add(l);            AssignStmt origCalc=(AssignStmt)up.getUnit();            Value origLHS=origCalc.getLeftOp();            origCalc.setLeftOp(l);            Unit copier=Jimple.v().newAssignStmt(origLHS,l);            units.insertAfter(copier,origCalc);            ((AssignStmt)s).setRightOp(l);            copier.addTag(new StringTag("Common sub-expression"));            s.addTag(new StringTag("Common sub-expression"));          }        }      }    }  }  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "]     Eliminating common subexpressions done!");}  }
class C{  private void sendBroadcastFinishedSyncFolder(Account account,String remotePath,boolean success){  Intent finished=new Intent(FileDownloader.getDownloadFinishMessage());  finished.putExtra(FileDownloader.ACCOUNT_NAME,account.name);  finished.putExtra(FileDownloader.EXTRA_REMOTE_PATH,remotePath);  finished.putExtra(FileDownloader.EXTRA_FILE_PATH,FileStorageUtils.getSavePath(account.name) + remotePath);  finished.putExtra(FileDownloader.EXTRA_DOWNLOAD_RESULT,success);  mService.sendStickyBroadcast(finished);}  }
class C{  public MessagesGetQuery previewLength(Integer value){  return unsafeParam("preview_length",value);}  }
class C{  public Value multiply(Value num1,Value num2){  throw new RuntimeException("Unsupported operation.");}  }
class C{  private Unit insertCloneAfter(Chain<Unit> unitChain,Unit node,Unit toClone){  Unit clone=(Unit)toClone.clone();  body.getUnits().insertAfter(clone,node);  return clone;}  }
class C{  public StatelessSection(int headerResourceId,int itemResourceId){  this(itemResourceId);  this.headerResourceId=headerResourceId;  this.hasHeader=true;}  }
class C{  private static int clampY(int y,ConstraintWidget base){  if (y < base.getY()) {    y=base.getY();  } else   if (y > base.getBottom()) {    y=base.getBottom();  }  return y;}  }
class C{  public Type<?> findAncestor(final Type<?> ancestor){  return findAncestor(ancestor.getRawType());}  }
class C{  private short[] createIndexData(){  final short[] indexData=new short[numElements];  int offset=0;  for (int row=0; row < height - 1; row++) {    for (int col=0; col < width - 1; col++) {      short topLeftIndexNum=(short)(row * width + col);      short topRightIndexNum=(short)(row * width + col + 1);      short bottomLeftIndexNum=(short)((row + 1) * width + col);      short bottomRightIndexNum=(short)((row + 1) * width + col + 1);      indexData[offset++]=topLeftIndexNum;      indexData[offset++]=bottomLeftIndexNum;      indexData[offset++]=topRightIndexNum;      indexData[offset++]=topRightIndexNum;      indexData[offset++]=bottomLeftIndexNum;      indexData[offset++]=bottomRightIndexNum;    }  }  return indexData;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_protect_PROTECT_HEAL_A_to_ME(String protector,int num0,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201182,protector,num0,skillcaster);}  }
class C{  private Bitmap compress(String imagePath,int width,int height){  BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(imagePath,options);  int outH=options.outHeight;  int outW=options.outWidth;  int inSampleSize=1;  if (outH > height || outW > width) {    int halfH=outH / 2;    int halfW=outW / 2;    while ((halfH / inSampleSize) > height && (halfW / inSampleSize) > width) {      inSampleSize*=2;    }  }  options.inSampleSize=inSampleSize;  options.inJustDecodeBounds=false;  int heightRatio=(int)Math.ceil(options.outHeight / (float)height);  int widthRatio=(int)Math.ceil(options.outWidth / (float)width);  if (heightRatio > 1 || widthRatio > 1) {    if (heightRatio > widthRatio) {      options.inSampleSize=heightRatio;    } else {      options.inSampleSize=widthRatio;    }  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(imagePath,options);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_Instant_HEAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201226,skilltarget,num0,skillcaster,skillname);}  }
class C{  public static SimpleBounds unbounded(int dim){  final double[] lB=new double[dim];  Arrays.fill(lB,Double.NEGATIVE_INFINITY);  final double[] uB=new double[dim];  Arrays.fill(uB,Double.POSITIVE_INFINITY);  return new SimpleBounds(lB,uB);}  }
class C{  public static Map<String,List<GenericValue>> makeCategoryFeatureLists(String productCategoryId,Delegator delegator){  return makeCategoryFeatureLists(productCategoryId,delegator,DEFAULT_PER_TYPE_MAX_SIZE);}  }
class C{  public void loadDataStringFromFile(String sFilename,boolean clearCurrentData,String sEncoding){  try {    ByteArrayOutputStream bsOut=new ByteArrayOutputStream();    FileInputStream fiIn=new FileInputStream(sFilename);    int iData=0;    while ((iData=fiIn.read()) > -1)     bsOut.write(iData);    String sDataString=bsOut.toString();    setDataString(sDataString,SourceNGramSize,clearCurrentData);  } catch (  IOException ioe) {    ioe.printStackTrace();    setDataString("",1,false);  }}  }
class C{  public Node addChild(Node parent){  nodeCheck(parent,true);  return getNode(addChild(parent.getRow()));}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public void add(int dimension,float value){  if (this.map.containsKey(dimension))   this.map.put(dimension,this.map.get(dimension) + value); else   this.map.put(dimension,value);}  }
class C{  public SimpleArrayMap(){  mHashes=ContainerHelpers.EMPTY_INTS;  mArray=ContainerHelpers.EMPTY_OBJECTS;  mSize=0;}  }
class C{  protected Decision suggestCategory(SimpleTextDocument dDoc){  SimpleTextDocument stdTemp=new SimpleTextDocument();  stdTemp.setDataString(dDoc.getTempDataString());  if (Model == null)   createSVMModel(dTolerance,dCost,dGamma);  if (Model == null)   return new Decision(dDoc,"",1.0,new HashMap());  double dPrediction=-1;  svm_node[] naDoc=documentToNodeArray(stdTemp);  try {    FileWriter fw=new FileWriter("test.dat");    String sLine=String.valueOf(0) + " ";    for (int iElem=0; iElem < naDoc.length; iElem++) {      sLine+=String.valueOf(naDoc[iElem].index) + ":" + String.valueOf(naDoc[iElem].value)+ " ";    }    fw.write(sLine + "\n");    fw.close();  } catch (  Exception e) {    e.printStackTrace();  }  try {    int iRes=-1;    Process p=(new ProcessBuilder("svmpredict.exe","test.dat","model.dat","output")).start();    InputStreamReader reader=new InputStreamReader(p.getInputStream());    BufferedReader buf_reader=new BufferedReader(reader);    String line;    while ((line=buf_reader.readLine()) != null)     ;    FileReader fRes=new FileReader("output");    BufferedReader brOutput=new BufferedReader(fRes);    String sCur=brOutput.readLine();    if (sCur != "")     dPrediction=Double.valueOf(sCur);  } catch (  Exception ioe) {    ioe.printStackTrace();    dPrediction=-1;  }  try {    String sCategory=(String)CategoryList.get((int)dPrediction);    Decision dRes=new Decision(dDoc,sCategory,1.0,new HashMap());    return dRes;  } catch (  Exception e) {    Decision dRes=new Decision(dDoc,"",1.0,new HashMap());    return dRes;  }}  }
class C{  public static String random(){  return UUID.randomUUID().toString();}  }
class C{  public TorneoIG(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,450,300);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  setContentPane(contentPane);  contentPane.setLayout(new GridLayout(0,1,0,0));  JPanel panel_titulo=new JPanel();  contentPane.add(panel_titulo);  lblAjedrezTorneo=new JLabel("Ajedrez Torneo");  panel_titulo.add(lblAjedrezTorneo);  JPanel panel_1=new JPanel();  contentPane.add(panel_1);  panel_1.setLayout(new GridLayout(0,6,0,0));  lblNombre=new JLabel("Nombre");  lblNombre.setHorizontalAlignment(SwingConstants.CENTER);  panel_1.add(lblNombre);  textField=new JTextField();  panel_1.add(textField);  textField.setColumns(10);  lblFecha=new JLabel("Fecha");  lblFecha.setHorizontalAlignment(SwingConstants.CENTER);  panel_1.add(lblFecha);  textField_1=new JTextField();  panel_1.add(textField_1);  textField_1.setColumns(10);  lblNewLabel=new JLabel("Lugar");  lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);  lblNewLabel.setToolTipText("");  panel_1.add(lblNewLabel);  textField_2=new JTextField();  panel_1.add(textField_2);  textField_2.setColumns(10);  panel_2=new JPanel();  contentPane.add(panel_2);  panel_2.setLayout(new GridLayout(0,2,0,0));  lblModalidad=new JLabel("Modalidad");  lblModalidad.setHorizontalAlignment(SwingConstants.CENTER);  panel_2.add(lblModalidad);  comboBox=new JComboBox();  comboBox.setModel(new DefaultComboBoxModel(new String[]{"","Suizo","Round Robin"}));  panel_2.add(comboBox);  botoncrear=new JPanel();  FlowLayout flowLayout=(FlowLayout)botoncrear.getLayout();  contentPane.add(botoncrear);  btnCrear=new JButton("Crear");  botoncrear.add(btnCrear);}  }
class C{  protected void computeCoefficients(){  final int n=degree();  coefficients=new double[n + 1];  for (int i=0; i <= n; i++) {    coefficients[i]=0.0;  }  coefficients[0]=a[n];  for (int i=n - 1; i >= 0; i--) {    for (int j=n - i; j > 0; j--) {      coefficients[j]=coefficients[j - 1] - c[i] * coefficients[j];    }    coefficients[0]=a[i] - c[i] * coefficients[0];  }  coefficientsComputed=true;}  }
class C{  @Override public void onReset(){  onDestroy();}  }
class C{  public Spring addSpring(ForceItem item1,ForceItem item2,float length){  return addSpring(item1,item2,-1.f,length);}  }
class C{  public Director(Document doc){  this.doc=doc;}  }
class C{  public GameServerError(String message,Throwable cause){  super(message,cause);}  }
class C{  public double intercept(){  return alpha;}  }
class C{  public void write(byte[] data){  int value=0;  boolean even=true;  for (  byte b : data) {    if (even) {      value=b & 0xff;      even=false;    } else {      value|=b << 8;      write((short)value);      even=true;    }  }  if (!even) {    write((short)value);  }}  }
class C{  public static PacProxySelector buildPacSelectorForUrl(String url){  PacProxySelector result=null;  PacScriptSource pacSource=new UrlPacScriptSource(url);  if (pacSource.isScriptValid()) {    result=new PacProxySelector(pacSource);  }  return result;}  }
class C{  public void removeItem(){  if (symbolTree == null) {    return;  }  TreePath path=symbolTree.getSelectionPath();  if (path == null) {    return;  }  DefaultMutableTreeNode lastNode=(DefaultMutableTreeNode)path.getLastPathComponent();  Object obj=lastNode.getUserObject();  Object oldValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  if (obj instanceof NamedLayer) {    SelectedSymbol.getInstance().removeUserNamedLayer((NamedLayer)obj);    removeTreeNode(lastNode);  } else   if (obj instanceof UserLayer) {    SelectedSymbol.getInstance().removeUserNamedLayer((UserLayer)obj);    removeTreeNode(lastNode);  } else   if (obj instanceof Style) {    SelectedSymbol.getInstance().removeStyle((Style)obj);    removeTreeNode(lastNode);  } else   if (obj instanceof FeatureTypeStyle) {    SelectedSymbol.getInstance().removeFeatureTypeStyle((FeatureTypeStyle)obj);    removeTreeNode(lastNode);  } else   if (obj instanceof Rule) {    SelectedSymbol.getInstance().removeRule((Rule)obj);    removeTreeNode(lastNode);  } else   if (obj instanceof Symbolizer) {    DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)lastNode.getParent();    if (parentNode != null) {      if (parentNode.getUserObject() instanceof RasterSymbolizer) {        SelectedSymbol.getInstance().removeRasterImageOutline((RasterSymbolizer)parentNode.getUserObject());      } else {        SelectedSymbol.getInstance().removeSymbolizer((Symbolizer)obj);      }      removeTreeNode(lastNode);    }  } else {    return;  }  if (renderList != null) {    for (    RenderSymbolInterface render : renderList) {      render.renderSymbol();    }  }  Object newValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  UndoManager.getInstance().addUndoEvent(new UndoEvent(sldTree.getUndoObject(),getClass().getName(),oldValueObj,newValueObj));}  }
class C{  private int measureWidth(int measureSpec){  return MeasureSpec.getSize(measureSpec);}  }
class C{  private boolean isUpToDate(){  if (myClassFiles != null) {    for (    Map.Entry<String,VirtualFile> entry : myClassFiles.entrySet()) {      String className=entry.getKey();      VirtualFile classFile=entry.getValue();      if (!classFile.isValid()) {        return false;      }      ClassModificationTimestamp lastModifiedStamp=myClassFilesLastModified.get(className);      if (lastModifiedStamp != null) {        long loadedModifiedTime=lastModifiedStamp.timestamp;        long loadedModifiedLength=lastModifiedStamp.length;        long classFileModifiedTime=classFile.getTimeStamp();        long classFileModifiedLength=classFile.getLength();        if ((classFileModifiedTime > 0L && loadedModifiedTime > 0L && loadedModifiedTime < classFileModifiedTime) || loadedModifiedLength != classFileModifiedLength) {          return false;        }      }    }  }  return true;}  }
class C{  protected AdamsStateInterpolator create(boolean newForward,ODEStateAndDerivative newGlobalPreviousState,ODEStateAndDerivative newGlobalCurrentState,ODEStateAndDerivative newSoftPreviousState,ODEStateAndDerivative newSoftCurrentState,EquationsMapper newMapper){  return new AdamsStateInterpolator(scalingH,reference,scaled,nordsieck,newForward,newGlobalPreviousState,newGlobalCurrentState,newSoftPreviousState,newSoftCurrentState,newMapper);}  }
class C{  public void stopRefresh(String time){  if (mPullRefreshing == true) {    mPullRefreshing=false;    mHeaderTimeView.setText(time);    resetHeaderHeight();  }}  }
