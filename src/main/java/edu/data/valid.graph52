class C{  public void add(int index,E element){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    if (index > len || index < 0)     throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ len);    Object[] newElements;    int numMoved=len - index;    if (numMoved == 0)     newElements=Arrays.copyOf(elements,len + 1); else {      newElements=new Object[len + 1];      System.arraycopy(elements,0,newElements,0,index);      System.arraycopy(elements,index,newElements,index + 1,numMoved);    }    newElements[index]=element;    setArray(newElements);  }  finally {    lock.unlock();  }}  }
class C{  public boolean isPreferred(){  return preferred;}  }
class C{  protected void searchPatterns(char[] word,int index,byte[] il){  byte[] values;  int i=index;  char p;  char q;  char sp=word[i];  p=root;  while (p > 0 && p < sc.length) {    if (sc[p] == 0xFFFF) {      if (hstrcmp(word,i,kv.getArray(),lo[p]) == 0) {        values=getValues(eq[p]);        int j=index;        for (int k=0; k < values.length; k++) {          if (j < il.length && values[k] > il[j]) {            il[j]=values[k];          }          j++;        }      }      return;    }    int d=sp - sc[p];    if (d == 0) {      if (sp == 0) {        break;      }      sp=word[++i];      p=eq[p];      q=p;      while (q > 0 && q < sc.length) {        if (sc[q] == 0xFFFF) {          break;        }        if (sc[q] == 0) {          values=getValues(eq[q]);          int j=index;          for (int k=0; k < values.length; k++) {            if (j < il.length && values[k] > il[j]) {              il[j]=values[k];            }            j++;          }          break;        } else {          q=lo[q];        }      }    } else {      p=d < 0 ? lo[p] : hi[p];    }  }}  }
class C{  public static Object readAny(InputStream in){  if (utilDelegate != null) {    return utilDelegate.readAny(in);  }  return null;}  }
class C{  @Override void onShutdown(){  BlockingQueue<Runnable> q=super.getQueue();  boolean keepDelayed=getExecuteExistingDelayedTasksAfterShutdownPolicy();  boolean keepPeriodic=getContinueExistingPeriodicTasksAfterShutdownPolicy();  if (!keepDelayed && !keepPeriodic) {    for (    Object e : q.toArray())     if (e instanceof RunnableScheduledFuture<?>)     ((RunnableScheduledFuture<?>)e).cancel(false);    q.clear();  } else {    for (    Object e : q.toArray()) {      if (e instanceof RunnableScheduledFuture) {        RunnableScheduledFuture<?> t=(RunnableScheduledFuture<?>)e;        if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) || t.isCancelled()) {          if (q.remove(t))           t.cancel(false);        }      }    }  }  tryTerminate();}  }
class C{  static int findLimit(InputStream in){  if (in instanceof LimitedInputStream) {    return ((LimitedInputStream)in).getRemaining();  } else   if (in instanceof ASN1InputStream) {    return ((ASN1InputStream)in).getLimit();  } else   if (in instanceof ByteArrayInputStream) {    return ((ByteArrayInputStream)in).available();  } else   if (in instanceof FileInputStream) {    try {      FileChannel channel=((FileInputStream)in).getChannel();      long size=(channel != null) ? channel.size() : Integer.MAX_VALUE;      if (size < Integer.MAX_VALUE) {        return (int)size;      }    } catch (    IOException e) {    }  }  if (MAX_MEMORY > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  }  return (int)MAX_MEMORY;}  }
class C{  public void test_ConstructorLjava_lang_StringZ(){  try {    JarFile jarFile=new JarFile("Wrong.file",false);    fail("Should throw IOException");  } catch (  IOException e) {  }  try {    Support_Resources.copyFile(resources,null,jarName);    String fileName=(new File(resources,jarName)).getCanonicalPath();    JarFile jarFile=new JarFile(fileName,true);  } catch (  IOException e) {    fail("Should not throw IOException");  }}  }
class C{  @Deprecated public static Component findFocusOwner(Component c){  Component focusOwner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  for (Component temp=focusOwner; temp != null; temp=(temp instanceof Window) ? null : temp.getParent()) {    if (temp == c) {      return focusOwner;    }  }  return null;}  }
class C{  static void storeServerList(Set servers,Map namingAttrs){  Set serverList=new HashSet();  Set siteList=new HashSet();  Iterator iter=servers.iterator();  while (iter.hasNext()) {    String serverEntry=(String)iter.next();    int index=serverEntry.indexOf(delimiter);    if (index != -1) {      String server=serverEntry.substring(0,index);      String serverId=serverEntry.substring(index + 1,serverEntry.length());      siteList.add(serverId);      index=serverId.indexOf(delimiter);      if (index != -1) {        serverId=serverId.substring(0,2);      }      HashSet serverSet=new HashSet();      serverSet.add(server);      serverList.add(server);      namingAttrs.put(serverId,serverSet);    } else {      namingDebug.error("Platform Server List entry is invalid:" + serverEntry);    }  }  namingAttrs.put(Constants.PLATFORM_LIST,serverList);  namingAttrs.put(Constants.SITE_ID_LIST,siteList);}  }
class C{  public void initObjectGraph(Object module){  mObjectGraph=module != null ? ObjectGraph.create(module) : null;}  }
class C{  private static void copy(String resource,String directory) throws IOException {  mkdir(directory);  String fileName=resource.substring(resource.lastIndexOf("/") + 1);  File file=new File(directory + System.getProperty("file.separator") + fileName);  try (InputStream is=EmbeddedCassandraServerHelper.class.getResourceAsStream(resource);OutputStream out=new FileOutputStream(file)){    byte[] buf=new byte[1024];    int len;    while ((len=is.read(buf)) > 0) {      out.write(buf,0,len);    }    out.close();  } }  }
class C{  public PrinterStateReasons(){  super();}  }
class C{  private static boolean isFractionalProhibitedAttr(String attr){  for (  String forbiddenAttr : FRACTIONAL_PROHIBITED_ATTRIBUTES) {    if (forbiddenAttr.equalsIgnoreCase(attr)) {      return true;    }  }  return false;}  }
class C{  public RestoreConfig(BackupDirectory backupDirectory,String backupID,boolean verifyOnly){  this.backupDirectory=backupDirectory;  this.backupID=backupID;  this.verifyOnly=verifyOnly;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  acks++;  if (acks == 5) {    try {      System.out.println("shootme: got an ACK! ");      System.out.println("Dialog State = " + dialog.getState());      SipProvider provider=(SipProvider)requestEvent.getSource();      Request messageRequest=dialog.createRequest(Request.MESSAGE);      CSeqHeader cseq=(CSeqHeader)messageRequest.getHeader(CSeqHeader.NAME);      ClientTransaction ct=provider.getNewClientTransaction(messageRequest);      cseq.setSeqNumber(1);      ct.sendRequest();    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  public final boolean hasSetting(DOMTestDocumentBuilderFactory factory){  return strategy.hasSetting(factory) == value;}  }
class C{  public void testGetCertificateCheckingLjava_X509Certificate() throws CertificateException {  X509CRLSelector selector=new X509CRLSelector();  CertificateFactory certFact=CertificateFactory.getInstance("X509");  X509Certificate cert=(X509Certificate)certFact.generateCertificate(new ByteArrayInputStream(TestUtils.getX509Certificate_v3()));  selector.setCertificateChecking(cert);  assertEquals(cert,selector.getCertificateChecking());  selector.setCertificateChecking(null);  assertNull(selector.getCertificateChecking());}  }
class C{  public DTMAxisIterator reset(){  _sp=_oldsp;  return resetPosition();}  }
class C{  public INV_OBJREF(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (contentHandler != null) {    contentHandler.startPrefixMapping(prefix,uri);  }}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  backToProfileViewBean();}  }
class C{  protected Pair<PKCS10CertificationRequest,PrivateKey> generateCSR(String alias,String algorithm,String signatureAlgorithm,int keySize,JsonValue params) throws Exception {  StringBuilder sb=new StringBuilder();  sb.append("CN=").append(params.get("CN").required().asString().replaceAll(",","\\\\,"));  sb.append(", OU=").append(params.get("OU").defaultTo("None").asString().replaceAll(",","\\\\,"));  sb.append(", O=").append(params.get("O").defaultTo("None").asString().replaceAll(",","\\\\,"));  sb.append(", L=").append(params.get("L").defaultTo("None").asString().replaceAll(",","\\\\,"));  sb.append(", ST=").append(params.get("ST").defaultTo("None").asString().replaceAll(",","\\\\,"));  sb.append(", C=").append(params.get("C").defaultTo("None").asString().replaceAll(",","\\\\,"));  X509Principal subjectName=new X509Principal(sb.toString());  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance(algorithm);  keyPairGenerator.initialize(keySize);  KeyPair keyPair=keyPairGenerator.generateKeyPair();  PublicKey publicKey=keyPair.getPublic();  PrivateKey privateKey=keyPair.getPrivate();  PKCS10CertificationRequest cr=new PKCS10CertificationRequest(signatureAlgorithm,subjectName,publicKey,null,privateKey);  logger.debug("Storing private key with alias {}",alias);  storeKeyPair(alias,keyPair);  return Pair.of(cr,privateKey);}  }
class C{  private static void isFractionalConfigAcceptable(ReplicationDomainCfg configuration) throws ConfigException {  FractionalConfig newFractionalConfig=FractionalConfig.toFractionalConfig(configuration);  if (!newFractionalConfig.isFractional()) {    return;  }  Map<String,Set<String>> newFractionalSpecificClassesAttributes=newFractionalConfig.getFractionalSpecificClassesAttributes();  Set<String> newFractionalAllClassesAttributes=newFractionalConfig.getFractionalAllClassesAttributes();  Schema schema=DirectoryServer.getSchema();  int fractionalMode=newFractionalConfig.fractionalConfigToInt();  for (  String className : newFractionalSpecificClassesAttributes.keySet()) {    ObjectClass fractionalClass=schema.getObjectClass(className);    if (fractionalClass.isPlaceHolder()) {      throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_OBJECT_CLASS.get(className));    }    boolean isExtensibleObjectClass=fractionalClass.isExtensible();    Set<String> attributes=newFractionalSpecificClassesAttributes.get(className);    for (    String attrName : attributes) {      if (isFractionalProhibitedAttr(attrName)) {        throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_PROHIBITED_ATTRIBUTE.get(attrName));      }      AttributeType attributeType=schema.getAttributeType(attrName);      if (!attributeType.isPlaceHolder()) {        if (!isExtensibleObjectClass && fractionalMode == FractionalConfig.EXCLUSIVE_FRACTIONAL && !fractionalClass.isOptional(attributeType)) {          throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_NOT_OPTIONAL_ATTRIBUTE.get(attrName,className));        }      } else {        throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_ATTRIBUTE_TYPE.get(attrName));      }    }  }  for (  String attrName : newFractionalAllClassesAttributes) {    if (isFractionalProhibitedAttr(attrName)) {      throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_PROHIBITED_ATTRIBUTE.get(attrName));    }    if (schema.getAttributeType(attrName) == null) {      throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_ATTRIBUTE_TYPE.get(attrName));    }  }}  }
class C{  public void putAll(Map<?,?> t){  if ((t == null) || (t.size() == 0)) {    return;  }  CompositeData[] values;  try {    values=t.values().toArray(new CompositeData[t.size()]);  } catch (  java.lang.ArrayStoreException e) {    throw new ClassCastException("Map argument t contains values which are not instances of <tt>CompositeData</tt>");  }  putAll(values);}  }
class C{  public void addField(TagField field){  if (field.getId().equals(VorbisCommentFieldKey.VENDOR.getFieldName())) {    super.setField(field);  } else {    super.addField(field);  }}  }
class C{  public XNodeSetForDOM(XNodeSet val){  super(val);  if (val instanceof XNodeSetForDOM)   m_origObj=((XNodeSetForDOM)val).m_origObj;}  }
class C{  @Override public String toString(){  return "ErrorMessage=[" + " sender=" + this.senderID + " destination="+ this.destination+ " msgID="+ this.msgID+ " details="+ this.details+ " creationTime="+ this.creationTime+ "]";}  }
class C{  public LifecycleException(Throwable throwable){  super(throwable);}  }
class C{  public boolean canQuit(WizardStep step){  return step == Step.CONFIRM_UNINSTALL;}  }
class C{  public void testDivideRoundHalfUpPos1(){  String a="92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  @Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){  int intValue=random.nextInt(100);  if (intValue < percentage) {    return TagResult.SUCCESS_RESULT;  } else {    return TagResult.OMIT_FROM_ENTRY;  }}  }
class C{  public static Option stream(FSDataInputStream value){  return new InputStreamOption(value);}  }
class C{  public void store() throws SSOException, IdRepoException {  amIdentity.store();}  }
class C{  @Override public void write(String str,int offset,int count){  String sub=str.substring(offset,offset + count);synchronized (lock) {    buf.append(sub);  }}  }
class C{  protected void handleUnexpectedTextException(String text,RuntimeException e) throws SAXException {  reportError(Messages.format(Messages.UNEXPECTED_TEXT,text),e,true);}  }
class C{  public FilterAttributeBuilder or(){  return new FilterAttributeBuilder(tokenFilter,Type.OR);}  }
class C{  public static boolean isValidProtocolType(String protocolType){  boolean isValid=((protocolType != null) && (protocolType.trim().length() > 0) && (protocolType.equalsIgnoreCase(COTConstants.IDFF) || protocolType.equalsIgnoreCase(COTConstants.SAML2) || protocolType.equalsIgnoreCase(COTConstants.WS_FED)));  if (!isValid) {    String[] data={protocolType};    LogUtil.error(Level.INFO,LogUtil.INVALID_COT_TYPE,data);  }  return isValid;}  }
class C{  public final void testGetP(){  DSAPublicKeySpec dpks=new DSAPublicKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(2,dpks.getP().intValue());}  }
class C{  public static PdfAction createSetOcgState(List<PdfActionOcgState> states){  return createSetOcgState(states,false);}  }
class C{  public boolean mustCheckUnsavedChanges(){  return false;}  }
class C{  @Inject public SeriesTaskExecutorThread(@Named(CoreTokenConstants.CTS_DEBUG) Debug debug,SimpleTaskExecutor taskExecutor){  this.debug=debug;  this.taskExecutor=taskExecutor;}  }
class C{  public boolean responseIsString(String oid){  return stringResponses.contains(oid);}  }
class C{  public CancelledKeyException(){}  }
class C{  public static void main(String[] args){  Properties properties=System.getProperties();  generationDir=properties.getProperty("GenerationDir");  if (generationDir == null) {    generationDir=System.getProperty("java.io.tmpdir") + File.separator + CONFIG_GUIDE_DIR;  }  try {    new File(generationDir).mkdir();  } catch (  Exception e) {    e.printStackTrace();    System.exit(1);  }  System.out.println("Generation directory is : " + generationDir);  if (properties.getProperty("LdapMapping") != null) {    ldapMapping=true;  }  OpenDJWiki=properties.getProperty("OpenDJWiki");  if (OpenDJWiki == null) {    OpenDJWiki="http://wikis.forgerock.org/confluence/display/OPENDJ";  }  OpenDJHome=properties.getProperty("OpenDJHome");  if (OpenDJHome == null) {    OpenDJHome="http://opendj.forgerock.org";  }  aciSyntaxPage=OpenDJHome + ACI_SYNTAX_REL_URL;  durationSyntaxPage=DURATION_SYNTAX_REL_URL;  ConfigGuideGeneration myGen=new ConfigGuideGeneration();  myGen.generate();}  }
class C{  public COMM_FAILURE(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public StateInteractive key_typed(char p_key_char){  StateInteractive curr_return_state=this;  if (p_key_char == 'b') {    i_brd.redo();  } else   if (p_key_char == 'd') {    return new StateMenuDrag(i_brd,actlog);  } else   if (p_key_char == 'e') {    StateExpandTest expand=new StateExpandTest(this,i_brd);    expand.expand_test_init(i_brd.get_current_mouse_position());    return expand;  } else   if (p_key_char == 'g') {    i_brd.toggle_ratsnest();  } else   if (p_key_char == 'i') {    curr_return_state=select_items(i_brd.get_current_mouse_position());  } else   if (p_key_char == 'p') {    i_brd.itera_settings.set_push_enabled(!i_brd.itera_settings.push_enabled);    i_brd.get_panel().board_frame.refresh_windows();  } else   if (p_key_char == 'r') {    curr_return_state=new StateMenuRoute(i_brd,actlog);  } else   if (p_key_char == 's') {    curr_return_state=new StateMenuSelect(i_brd,actlog);  } else   if (p_key_char == 't') {    curr_return_state=StateRoute.get_instance(i_brd.get_current_mouse_position(),this,i_brd,actlog);  } else   if (p_key_char == 'u') {    i_brd.undo();  } else   if (p_key_char == 'v') {    i_brd.toggle_clearance_violations();  } else   if (p_key_char == 'w') {    curr_return_state=swap_pin(i_brd.get_current_mouse_position());  } else   if (p_key_char == '+') {    change_layer_next(1);  } else   if (p_key_char == '-') {    change_layer_next(-1);  } else {    curr_return_state=super.key_typed(p_key_char);  }  return curr_return_state;}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  public boolean isAcceptable(GeneralName gname){  if (this.tag != gname.getTag()) {    return false;  }switch (this.tag) {case RFC822_NAME:    return ((String)gname.getName()).toLowerCase(Locale.US).endsWith(((String)name).toLowerCase(Locale.US));case DNS_NAME:  String dns=(String)name;String _dns=(String)gname.getName();if (dns.equalsIgnoreCase(_dns)) {return true;} else {return _dns.toLowerCase(Locale.US).endsWith("." + dns.toLowerCase(Locale.US));}case UR_ID:String uri=(String)name;int begin=uri.indexOf("://") + 3;int end=uri.indexOf('/',begin);String host=(end == -1) ? uri.substring(begin) : uri.substring(begin,end);uri=(String)gname.getName();begin=uri.indexOf("://") + 3;end=uri.indexOf('/',begin);String _host=(end == -1) ? uri.substring(begin) : uri.substring(begin,end);if (host.startsWith(".")) {return _host.toLowerCase(Locale.US).endsWith(host.toLowerCase(Locale.US));} else {return host.equalsIgnoreCase(_host);}case IP_ADDR:byte[] address=(byte[])name;byte[] _address=(byte[])gname.getName();int length=address.length;if (length != 4 && length != 8 && length != 16 && length != 32) {return false;}int _length=_address.length;if (length == _length) {return Arrays.equals(address,_address);} else if (length == 2 * _length) {for (int i=0; i < _address.length; i++) {int octet=_address[i] & 0xff;int min=address[i] & 0xff;int max=address[i + _length] & 0xff;if ((octet < min) || (octet > max)) {return false;}}return true;} else {return false;}case DIR_NAME:case X400_ADDR:case OTHER_NAME:case EDIP_NAME:case REG_ID:return Arrays.equals(getEncoded(),gname.getEncoded());default :}return true;}  }
class C{  static public void assertNull(String message,Object object){  assertTrue(message,object == null);}  }
class C{  public boolean contains(Node s){  runTo(-1);  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(s))     return true;  }  return false;}  }
class C{  public TriggerWrapper(final JsonValue map){  serialized=map.get("serialized").asString();  name=map.get("name").asString();  group=map.get("group").asString();  state=map.get("state").asInteger();  previous_state=map.get("previous_state").asInteger();  acquired=map.get("acquired").asBoolean();  revision=map.get("_rev").asString();  nodeId=map.get("nodeId").asString();}  }
class C{  public LineMessagingServiceBuilder apiEndPoint(@NonNull String apiEndPoint){  this.apiEndPoint=apiEndPoint;  return this;}  }
class C{  protected Expression neg(int opPos) throws TransformerException {  return compileUnary(new Neg(),opPos);}  }
class C{  public OggPageHeader readOggPageHeader(RandomAccessFile raf,int count) throws CannotReadException, IOException {  OggPageHeader pageHeader=OggPageHeader.read(raf);  while (count > 0) {    raf.seek(raf.getFilePointer() + pageHeader.getPageLength());    pageHeader=OggPageHeader.read(raf);    count--;  }  return pageHeader;}  }
class C{  @Override public ClusterMessage requestCompleted(String sessionId){  return requestCompleted(sessionId,false);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public void clearStatistics(){  abandonRequests.set(0);  addRequests.set(0);  addResponses.set(0);  bindRequests.set(0);  bindResponses.set(0);  bytesRead.set(0);  bytesWritten.set(0);  compareRequests.set(0);  compareResponses.set(0);  connectionsClosed.set(0);  connectionsEstablished.set(0);  deleteRequests.set(0);  deleteResponses.set(0);  extendedRequests.set(0);  extendedResponses.set(0);  messagesRead.set(0);  messagesWritten.set(0);  modifyRequests.set(0);  modifyResponses.set(0);  modifyDNRequests.set(0);  modifyDNResponses.set(0);  operationsAbandoned.set(0);  operationsCompleted.set(0);  operationsInitiated.set(0);  searchRequests.set(0);  searchOneRequests.set(0);  searchSubRequests.set(0);  searchResultEntries.set(0);  searchResultReferences.set(0);  searchResultsDone.set(0);  unbindRequests.set(0);  addOperationCount.set(0);  addOperationTime.set(0);  searchOperationCount.set(0);  searchOperationTime.set(0);  delOperationCount.set(0);  delOperationTime.set(0);  bindOperationCount.set(0);  bindOperationTime.set(0);  unbindOperationCount.set(0);  unbindOperationTime.set(0);  compOperationCount.set(0);  compOperationTime.set(0);  modOperationCount.set(0);  modOperationTime.set(0);  moddnOperationCount.set(0);  moddnOperationTime.set(0);  abandonOperationCount.set(0);  abandonOperationTime.set(0);  extOperationCount.set(0);  extOperationTime.set(0);}  }
class C{  public void testClone(){  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  Mac res;  for (int i=0; i < macs.length; i++) {    try {      res=(Mac)macs[i].clone();      assertTrue("Object should not be equals",!macs[i].equals(res));      assertEquals("Incorrect class",macs[i].getClass(),res.getClass());    } catch (    CloneNotSupportedException e) {    }  }}  }
class C{  public String toStringImpl(){  return str;}  }
class C{  public URISyntaxException(String input,String reason,int index){  super(reason);  if ((input == null) || (reason == null))   throw new NullPointerException();  if (index < -1)   throw new IllegalArgumentException();  this.input=input;  this.index=index;}  }
class C{  public InterruptedNamingException(String explanation){  super(explanation);}  }
class C{  private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight(a[base2],a,base1,len1,0,c);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft(a[base1 + len1 - 1],a,base2,len2,len2 - 1,c);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public EmptyStackException(){}  }
class C{  private void processTriggerMisfired(TriggerWrapper triggerWrapper) throws JobPersistenceException {  Trigger trigger=triggerWrapper.getTrigger();  logger.trace("Signaling Trigger Listener Misfired");  schedulerSignaler.notifyTriggerListenersMisfired(trigger);  Calendar calendar=retrieveCalendar(null,trigger.getCalendarName());  trigger.updateAfterMisfire(calendar);  triggerWrapper.updateTrigger(trigger);  updateTriggerInRepo(trigger.getGroup(),trigger.getName(),triggerWrapper,triggerWrapper.getRevision());  if (trigger.getNextFireTime() == null) {    schedulerSignaler.notifySchedulerListenersFinalized(trigger);    triggerWrapper.setState(Trigger.STATE_COMPLETE);    updateTriggerInRepo(trigger.getGroup(),trigger.getName(),triggerWrapper,triggerWrapper.getRevision());    removeWaitingTrigger(trigger);  }}  }
class C{  public DelayedConfigAddListener(DN child,ConfigAddListener addListener,ConfigurationRepository configRepository){  this.parent=child.parent();  this.child=child;  this.delayedAddListener=addListener;  this.delayedDeleteListener=null;  this.configRepository=configRepository;}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public void beginEntry(JarEntry je,ManifestEntryVerifier mev) throws IOException {  if (je == null)   return;  if (debug != null) {    debug.println("beginEntry " + je.getName());  }  String name=je.getName();  if (parsingMeta) {    String uname=name.toUpperCase(Locale.ENGLISH);    if ((uname.startsWith("META-INF/") || uname.startsWith("/META-INF/"))) {      if (je.isDirectory()) {        mev.setEntry(null,je);        return;      }      if (uname.equals(JarFile.MANIFEST_NAME) || uname.equals(JarIndex.INDEX_NAME)) {        return;      }      if (SignatureFileVerifier.isBlockOrSF(uname)) {        parsingBlockOrSF=true;        baos.reset();        mev.setEntry(null,je);        return;      }    }  }  if (parsingMeta) {    doneWithMeta();  }  if (je.isDirectory()) {    mev.setEntry(null,je);    return;  }  if (name.startsWith("./"))   name=name.substring(2);  if (name.startsWith("/"))   name=name.substring(1);  if (sigFileSigners.get(name) != null || verifiedSigners.get(name) != null) {    mev.setEntry(name,je);    return;  }  mev.setEntry(null,je);  return;}  }
class C{  protected void executeNoResult(JsonArray params,String sql,Handler<AsyncResult<Void>> resultHandler){  client.getConnection(connHandler(resultHandler,null));}  }
class C{  public int type(){  return type;}  }
class C{  private String toRefSect1(String scriptName,Collection<SubCommand> subCommands){  if (subCommands.isEmpty()) {    return "";  }  Map<String,Object> map=new HashMap<>();  map.put("name",scriptName);  map.put("title",REF_TITLE_SUBCOMMANDS.get());  map.put("info",getDocSubcommandsDescriptionSupplement());  map.put("intro",REF_INTRO_SUBCOMMANDS.get(scriptName));  if (scriptName.equals("dsconfig")) {    map.put("isItemizedList",true);  }  List<String> scUsageList=new ArrayList<>();  for (  SubCommand subCommand : subCommands) {    if (subCommand.isHidden()) {      continue;    }    if (scriptName.equals("dsconfig")) {      scUsageList.add(getSubCommandListItem(scriptName,subCommand));    } else {      scUsageList.add(toRefSect2(scriptName,subCommand));    }  }  map.put("subcommands",scUsageList);  StringBuilder sb=new StringBuilder();  applyTemplate(sb,"refSect1.ftl",map);  return sb.toString();}  }
class C{  public int hashCode(){  return uid.hashCode();}  }
class C{  private String stripTags(String content){  return Jsoup.parse(content).text();}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton2Request(event);}  }
class C{  protected void doChecks(){  checkOsUser();  checkUmask();}  }
class C{  @Deprecated protected final Class<?> defineClass(byte[] classRep,int offset,int length) throws ClassFormatError {  throw new UnsupportedOperationException("can't load this type of class file");}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String internal;  doc=(Document)load("staff2",false);  docType=doc.getDoctype();  internal=docType.getInternalSubset();  assertNull("internalSubsetNull",internal);}  }
class C{  @Deprecated public FurnaceRecipe(ItemStack result,Material source,int data){  this(result,source,data,0);}  }
class C{  @Override public void completeCycle(){  if (!runDeathSeq) {    main.Main.goombaHit.play(0.7);    runDeathSeq=true;    main.Main.enemyCount++;    spriteFrame.setImage(playerStates.get(2));    spriteBoundsArray[5]=null;    frameCounter=0;  }}  }
class C{  private void outputFollowCircleParameter(float animationFraction){  outerCirclePaint.setColor((Integer)argbEvaluator.evaluate(animationFraction,START_COLOR,END_COLOR));  outerProgress=animationFraction * 0.3f + 0.7f;  innerProgress=animationFraction;}  }
class C{  private boolean moveWithinSelectedRange(JTable table,int dx,int dy,ListSelectionModel rsm,ListSelectionModel csm){  int totalCount;  int minX, maxX, minY, maxY;  boolean rs=table.getRowSelectionAllowed();  boolean cs=table.getColumnSelectionAllowed();  if (rs && cs) {    totalCount=table.getSelectedRowCount() * table.getSelectedColumnCount();    minX=csm.getMinSelectionIndex();    maxX=csm.getMaxSelectionIndex();    minY=rsm.getMinSelectionIndex();    maxY=rsm.getMaxSelectionIndex();  } else   if (rs) {    totalCount=table.getSelectedRowCount();    minX=0;    maxX=table.getColumnCount() - 1;    minY=rsm.getMinSelectionIndex();    maxY=rsm.getMaxSelectionIndex();  } else   if (cs) {    totalCount=table.getSelectedColumnCount();    minX=csm.getMinSelectionIndex();    maxX=csm.getMaxSelectionIndex();    minY=0;    maxY=table.getRowCount() - 1;  } else {    totalCount=0;    minX=maxX=minY=maxY=0;  }  boolean stayInSelection;  if (totalCount == 0 || (totalCount == 1 && table.isCellSelected(leadRow,leadColumn))) {    stayInSelection=false;    maxX=table.getColumnCount() - 1;    maxY=table.getRowCount() - 1;    minX=Math.min(0,maxX);    minY=Math.min(0,maxY);  } else {    stayInSelection=true;  }  if (dy == 1 && leadColumn == -1) {    leadColumn=minX;    leadRow=-1;  } else   if (dx == 1 && leadRow == -1) {    leadRow=minY;    leadColumn=-1;  } else   if (dy == -1 && leadColumn == -1) {    leadColumn=maxX;    leadRow=maxY + 1;  } else   if (dx == -1 && leadRow == -1) {    leadRow=maxY;    leadColumn=maxX + 1;  }  leadRow=Math.min(Math.max(leadRow,minY - 1),maxY + 1);  leadColumn=Math.min(Math.max(leadColumn,minX - 1),maxX + 1);  do {    calcNextPos(dx,minX,maxX,dy,minY,maxY);  } while (stayInSelection && !table.isCellSelected(leadRow,leadColumn));  return stayInSelection;}  }
class C{  public WeakReference(T r,ReferenceQueue<? super T> q){  super(r,q);}  }
class C{  public Set createFilteredRoles(Map roles) throws AMException, SSOException {  Iterator iter=roles.keySet().iterator();  Set result=new HashSet();  while (iter.hasNext()) {    String roleName=(String)iter.next();    String roleDN=AMNamingAttrManager.getNamingAttr(FILTERED_ROLE) + "=" + roleName+ ","+ entryDN;    Map attributes=(Map)roles.get(roleName);    AMFilteredRoleImpl roleImpl=new AMFilteredRoleImpl(token,roleDN);    if (!attributes.isEmpty()) {      Set aciSet=(Set)attributes.remove("iplanet-am-role-aci-list");      if ((aciSet != null) && (!aciSet.isEmpty())) {        Iterator iter2=aciSet.iterator();        Set newAciSet=new HashSet();        while (iter2.hasNext()) {          String acis=(String)iter2.next();          StringTokenizer stz=new StringTokenizer(acis,"##");          while (stz.hasMoreTokens()) {            newAciSet.add(stz.nextToken());          }        }        attributes.put("iplanet-am-role-aci-list",replaceAciListMacros(newAciSet,roleDN,entryDN,null,null));      }    }    roleImpl.setAttributes(attributes);    roleImpl.create();    result.add(roleImpl);  }  return result;}  }
class C{  static public void assertEquals(String message,boolean expected,boolean actual){  assertEquals(message,new Boolean(expected),new Boolean(actual));}  }
class C{  protected SSLEngineResult.HandshakeStatus tasks(){  Runnable r=null;  while ((r=sslEngine.getDelegatedTask()) != null) {    r.run();  }  return sslEngine.getHandshakeStatus();}  }
class C{  public RouterActivityLogger(ConnectionFactory connectionFactory){  this(connectionFactory,"suspend".equals(IdentityServer.getInstance().getProperty(ActivityLogger.class.getName().toLowerCase())));}  }
class C{  @Nullable private String convertRGBToHex(String svgValue){  String result=null;  String functionValue=svgValue.trim();  functionValue=svgValue.substring(1,functionValue.length() - 1);  String[] numbers=functionValue.split(",");  if (numbers.length != 3) {    return null;  }  int[] color=new int[3];  for (int i=0; i < 3; i++) {    String number=numbers[i];    number=number.trim();    if (number.endsWith("%")) {      float value=Float.parseFloat(number.substring(0,number.length() - 1));      color[i]=clamp((int)(value * 255.0f / 100.0f),0,255);    } else {      int value=Integer.parseInt(number);      color[i]=clamp(value,0,255);    }  }  StringBuilder builder=new StringBuilder();  builder.append("#");  for (int i=0; i < 3; i++) {    builder.append(String.format("%02X",color[i]));  }  result=builder.toString();  assert result.length() == 7;  return result;}  }
class C{  public BlockMetadataStore(World owningWorld){  this.owningWorld=owningWorld;}  }
class C{  protected static void loadApplicationListenerAnnotations(Context context){  String[] applicationListeners=context.findApplicationListeners();  for (  String className : applicationListeners) {    Class<?> classClass=Introspection.loadClass(context,className);    if (classClass == null) {      continue;    }    loadClassAnnotation(context,classClass);    loadFieldsAnnotation(context,classClass);    loadMethodsAnnotation(context,classClass);  }}  }
class C{  public double distance_square(PlaPointInt p_to_point){  double dx=p_to_point.v_x - v_x;  double dy=p_to_point.v_y - v_y;  return dx * dx + dy * dy;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrhaschildnodes.class,args);}  }
class C{  private void fetchRegions(final FacesContext context){  final List<UIComponent> children=getChildren();  final List<UIComponent> componentsOutOfFieldsTRegion=new Vector();  for (  final UIComponent uiComponent : children) {    if (uiComponent instanceof UIFields) {      this.fieldsRegion=(UIFields)uiComponent;    } else     if (uiComponent instanceof UIActions) {      this.actionsRegion=(UIActions)uiComponent;    } else {      componentsOutOfFieldsTRegion.add(uiComponent);    }  }  if (this.fieldsRegion == null) {    this.fieldsRegion=new UIFields();    this.fieldsRegion.getChildren().addAll(componentsOutOfFieldsTRegion);  }}  }
class C{  public MP3Player(final InputStream fileInputStream){  this.in=fileInputStream;}  }
class C{  public boolean implies(Permission p){  return true;}  }
class C{  public final BufferedImage filter(BufferedImage src,BufferedImage dst){  ColorModel srcCM=src.getColorModel();  ColorModel dstCM;  int numBands=srcCM.getNumColorComponents();  if (srcCM instanceof IndexColorModel) {    throw new IllegalArgumentException("Rescaling cannot be " + "performed on an indexed image");  }  if (length != 1 && length != numBands && length != srcCM.getNumComponents()) {    throw new IllegalArgumentException("Number of scaling constants " + "does not equal the number of" + " of color or color/alpha "+ " components");  }  boolean needToConvert=false;  if (length > numBands && srcCM.hasAlpha()) {    length=numBands + 1;  }  int width=src.getWidth();  int height=src.getHeight();  if (dst == null) {    dst=createCompatibleDestImage(src,null);    dstCM=srcCM;  } else {    if (width != dst.getWidth()) {      throw new IllegalArgumentException("Src width (" + width + ") not equal to dst width ("+ dst.getWidth()+ ")");    }    if (height != dst.getHeight()) {      throw new IllegalArgumentException("Src height (" + height + ") not equal to dst height ("+ dst.getHeight()+ ")");    }    dstCM=dst.getColorModel();    if (srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()) {      needToConvert=true;      dst=createCompatibleDestImage(src,null);    }  }  BufferedImage origDst=dst;  if (ImagingLib.filter(this,src,dst) == null) {    WritableRaster srcRaster=src.getRaster();    WritableRaster dstRaster=dst.getRaster();    if (srcCM.hasAlpha()) {      if (numBands - 1 == length || length == 1) {        int minx=srcRaster.getMinX();        int miny=srcRaster.getMinY();        int[] bands=new int[numBands - 1];        for (int i=0; i < numBands - 1; i++) {          bands[i]=i;        }        srcRaster=srcRaster.createWritableChild(minx,miny,srcRaster.getWidth(),srcRaster.getHeight(),minx,miny,bands);      }    }    if (dstCM.hasAlpha()) {      int dstNumBands=dstRaster.getNumBands();      if (dstNumBands - 1 == length || length == 1) {        int minx=dstRaster.getMinX();        int miny=dstRaster.getMinY();        int[] bands=new int[numBands - 1];        for (int i=0; i < numBands - 1; i++) {          bands[i]=i;        }        dstRaster=dstRaster.createWritableChild(minx,miny,dstRaster.getWidth(),dstRaster.getHeight(),minx,miny,bands);      }    }    filter(srcRaster,dstRaster);  }  if (needToConvert) {    ColorConvertOp ccop=new ColorConvertOp(hints);    ccop.filter(dst,origDst);  }  return origDst;}  }
class C{  public byte[] readStreamBytesRaw(PdfStream stream) throws IOException {  PdfName type=stream.getAsName(PdfName.Type);  if (!PdfName.XRefStm.equals(type) && !PdfName.ObjStm.equals(type))   checkPdfStreamLength(stream);  long offset=stream.getOffset();  if (offset <= 0)   return null;  int length=stream.getLength();  if (length <= 0)   return new byte[0];  RandomAccessFileOrArray file=tokens.getSafeFile();  byte[] bytes=null;  try {    file.seek(stream.getOffset());    bytes=new byte[length];    file.readFully(bytes);    if (decrypt != null) {      PdfObject filter=stream.get(PdfName.Filter,true);      boolean skip=false;      if (filter != null) {        if (PdfName.Crypt.equals(filter)) {          skip=true;        } else         if (filter.getType() == PdfObject.ARRAY) {          PdfArray filters=(PdfArray)filter;          for (int k=0; k < filters.size(); k++) {            if (!filters.isEmpty() && PdfName.Crypt.equals(filters.get(k,true))) {              skip=true;              break;            }          }        }        filter.release();      }      if (!skip) {        decrypt.setHashKeyForNextObject(stream.getIndirectReference().getObjNumber(),stream.getIndirectReference().getGenNumber());        bytes=decrypt.decryptByteArray(bytes);      }    }  }  finally {    try {      file.close();    } catch (    Exception ignored) {    }  }  return bytes;}  }
class C{  public final void testGetFormat(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  X509EncodedKeySpec meks=new X509EncodedKeySpec(encodedKey);  assertEquals("X.509",meks.getFormat());}  }
class C{  public void logout(SSOToken token) throws SSOException {  getProvider(token).logout(token);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportServerChallengeElement createMustSupportServerChallengeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportServerChallengeElementImpl();}  }
class C{  public SQLClientInfoException(String reason,Map<String,ClientInfoStatus> failedProperties){  super(reason);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  protected void stopTimer(){  try {    acquireTimerTaskSem();    try {      if (this.timerTask != null) {        this.getStack().getTimer().cancel(timerTask);        this.timerTask=null;      }      if (this.earlyStateTimerTask != null) {        this.getStack().getTimer().cancel(this.earlyStateTimerTask);        this.earlyStateTimerTask=null;      }    }  finally {      releaseTimerTaskSem();    }  } catch (  Exception ex) {  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.PhysicalVerificationElement createPhysicalVerificationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PhysicalVerificationElementImpl();}  }
class C{  public ShoveDrillResult check_layer(double p_via_radius,int p_cl_class,boolean p_attach_smd_allowed,ShapeTile p_room_shape,PlaPointInt p_location,int p_layer,NetNosList p_net_no_arr,int p_max_recursion_depth,int p_max_via_recursion_depth){  if (p_via_radius <= 0) {    return ShoveDrillResult.DRILLABLE;  }  ShapeConvex via_shape=new ShapeCircle(p_location,(int)Math.ceil(p_via_radius));  double check_radius=p_via_radius + 0.5 * r_board.get_clearance(p_cl_class,p_cl_class,p_layer) + r_board.get_min_trace_half_width();  ShapeTile tile_shape;  tile_shape=via_shape.bounding_octagon();  BrdFromSide from_side=calculate_from_side(p_location,tile_shape,p_room_shape.to_Simplex(),check_radius);  if (from_side == null)   return ShoveDrillResult.NOT_DRILLABLE;  ShoveDrillResult result=r_board.shove_pad_algo.check_forced_pad(tile_shape,from_side,p_layer,p_net_no_arr,p_cl_class,p_attach_smd_allowed,null,p_max_recursion_depth,p_max_via_recursion_depth,false,null);  return result;}  }
class C{  protected boolean isHTMLFlavor(DataFlavor flavor){  DataFlavor[] flavors=htmlFlavors;  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor)) {      return true;    }  }  return false;}  }
class C{  protected static Vector convertToVector(Object[][] anArray){  if (anArray == null) {    return null;  }  Vector<Vector> v=new Vector<Vector>(anArray.length);  for (  Object[] o : anArray) {    v.addElement(convertToVector(o));  }  return v;}  }
class C{  private boolean sendBaseChangelogEntry(SearchOperation searchOp) throws DirectoryException {  final DN baseDN=searchOp.getBaseDN();  final SearchFilter filter=searchOp.getFilter();  final SearchScope scope=searchOp.getScope();  if (ChangelogBackend.CHANGELOG_BASE_DN.isInScopeOf(baseDN,scope)) {    final Entry entry=buildBaseChangelogEntry();    if (filter.matchesEntry(entry) && !searchOp.returnEntry(entry,null)) {      return false;    }  }  return !baseDN.equals(ChangelogBackend.CHANGELOG_BASE_DN) || !scope.equals(SearchScope.BASE_OBJECT);}  }
class C{  public void deleteStaticGroups(Set groupDNs) throws AMException, SSOException {  Iterator iter=groupDNs.iterator();  while (iter.hasNext()) {    String groupDN=(String)iter.next();    AMStaticGroup group=new AMStaticGroupImpl(super.token,groupDN);    group.delete();  }}  }
class C{  void insertEndTokenForElement(XMLElement element) throws Exception {  int startTokenIndex=element.getStartToken().getTokenIndex();  int indentLevel=getIndentLevel(startTokenIndex);  String indentString=NEW_LINE + getIndentStringForIndentLevel(indentLevel - 1);  WhiteSpaceToken indentToken=new WhiteSpaceToken(indentString);  indentToken.setTokenIndex(getParser().getNextTokenIndex());  Token endToken=element.getEndToken();  endToken.setTokenIndex(getParser().getNextTokenIndex());  ArrayList rawTokens=getRawTokens();  boolean added=false;  for (int i=0; i < rawTokens.size(); i++) {    Token nextToken=(Token)rawTokens.get(i);    if (nextToken.getTokenIndex() == startTokenIndex) {      rawTokens.add(i + 1,indentToken);      rawTokens.add(i + 2,endToken);      added=true;      break;    }  }  if (!added) {    throw new Exception("Failed to add end token for element: " + element);  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  this.application=Application.getInstance(this.getApplication().getApplicationContext());  this.devicesManager=application.getDevicesManager();  this.configurationManager=application.getConfigurationManager();  this.configurationManager.setRequireWiFiForVideo(false);  this.conversationStateTextView=(TextView)findViewById(R.id.statusTextViewId);  this.joinMeetingButton=(Button)findViewById(R.id.joinMeetingButtonId);  this.conversationsIntent=new Intent(this,ConversationsActivity.class);  this.updateUiState();}  }
class C{  public FacebookDialogException(String message,int errorCode,String failingUrl){  super(message);  this.errorCode=errorCode;  this.failingUrl=failingUrl;}  }
class C{  static int findDisplayedMnemonicIndex(String text,int mnemonic){  if (text == null || mnemonic == '\0') {    return -1;  }  char uc=Character.toUpperCase((char)mnemonic);  char lc=Character.toLowerCase((char)mnemonic);  int uci=text.indexOf(uc);  int lci=text.indexOf(lc);  if (uci == -1) {    return lci;  } else   if (lci == -1) {    return uci;  } else {    return (lci < uci) ? lci : uci;  }}  }
class C{  public void sendNotification(Notification notification){synchronized (entries) {    Iterator<BaseNotificationBroadcasterEntry> items=entries.iterator();    while (items.hasNext()) {      BaseNotificationBroadcasterEntry item=items.next();      if ((item.filter != null) && (!item.filter.isNotificationEnabled(notification)))       continue;      item.listener.handleNotification(notification,item.handback);    }  }}  }
class C{  public InitializeRequestMsg(DN baseDN,int serverID,int destination,int initWindow){  super(serverID,destination);  this.baseDN=baseDN;  this.initWindow=initWindow;}  }
class C{  public int size(){  return dataMap.size();}  }
class C{  public boolean isSealed(URL url){  return sealBase != null && sealBase.sameFile(url);}  }
class C{  protected void collapse(boolean adjustRows){  if (isExpanded) {    if (isVisible() && adjustRows) {      int childCount=getTotalChildCount();      isExpanded=false;      adjustRowCountBy(-childCount);      adjustRowBy(-childCount,0);    } else     isExpanded=false;    if (adjustRows && isVisible() && treeSelectionModel != null)     treeSelectionModel.resetRowSelection();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodenormalize01.class,args);}  }
class C{  public static boolean isValidSchemaElement(String element,int startPos,int endPos,LocalizableMessageBuilder invalidReason){  if (element == null || startPos >= endPos) {    invalidReason.append(ERR_SCHEMANAME_EMPTY_VALUE.get());    return false;  }  char c=element.charAt(startPos);  if (isAlpha(c)) {    for (int i=startPos + 1; i < endPos; i++) {      c=element.charAt(i);      if (!isAlpha(c) && !isDigit(c) && c != '-' && (c != '_' || !DirectoryServer.allowAttributeNameExceptions())) {        invalidReason.append(ERR_SCHEMANAME_ILLEGAL_CHAR.get(element,c,i));        return false;      }    }  } else   if (isDigit(c)) {    boolean isKnown=!DirectoryServer.allowAttributeNameExceptions();    boolean isNumeric=true;    boolean lastWasDot=false;    for (int i=startPos + 1; i < endPos; i++) {      c=element.charAt(i);      if (c == '.') {        if (isKnown) {          if (isNumeric) {            if (lastWasDot) {              invalidReason.append(ERR_SCHEMANAME_CONSECUTIVE_PERIODS.get(element,i));              return false;            }            lastWasDot=true;          } else {            invalidReason.append(ERR_SCHEMANAME_ILLEGAL_CHAR.get(element,c,i));            return false;          }        } else {          lastWasDot=true;          isKnown=true;          isNumeric=true;        }      } else {        lastWasDot=false;        if (isAlpha(c) || c == '-' || c == '_') {          if (isKnown) {            if (isNumeric) {              invalidReason.append(ERR_SCHEMANAME_ILLEGAL_CHAR.get(element,c,i));              return false;            }          } else {            isKnown=true;            isNumeric=false;          }        } else         if (!isDigit(c)) {          invalidReason.append(ERR_SCHEMANAME_ILLEGAL_CHAR.get(element,c,i));          return false;        }      }    }  } else {    invalidReason.append(ERR_SCHEMANAME_ILLEGAL_CHAR.get(element,c,startPos));    return false;  }  return true;}  }
class C{  public Hyphenation hyphenate(char[] w,int offset,int len,int remainCharCount,int pushCharCount){  int i;  char[] word=new char[len + 3];  char[] c=new char[2];  int iIgnoreAtBeginning=0;  int iLength=len;  boolean bEndOfLetters=false;  for (i=1; i <= len; i++) {    c[0]=w[offset + i - 1];    int nc=classmap.find(c,0);    if (nc < 0) {      if (i == (1 + iIgnoreAtBeginning)) {        iIgnoreAtBeginning++;      } else {        bEndOfLetters=true;      }      iLength--;    } else {      if (!bEndOfLetters) {        word[i - iIgnoreAtBeginning]=(char)nc;      } else {        return null;      }    }  }  len=iLength;  if (len < (remainCharCount + pushCharCount)) {    return null;  }  int[] result=new int[len + 1];  int k=0;  String sw=new String(word,1,len);  if (stoplist.containsKey(sw)) {    ArrayList hw=(ArrayList)stoplist.get(sw);    int j=0;    for (i=0; i < hw.size(); i++) {      Object o=hw.get(i);      if (o instanceof String) {        j+=((String)o).length();        if (j >= remainCharCount && j < (len - pushCharCount)) {          result[k++]=j + iIgnoreAtBeginning;        }      }    }  } else {    word[0]='.';    word[len + 1]='.';    word[len + 2]=0;    byte[] il=new byte[len + 3];    for (i=0; i < len + 1; i++) {      searchPatterns(word,i,il);    }    for (i=0; i < len; i++) {      if (((il[i + 1] & 1) == 1) && i >= remainCharCount && i <= (len - pushCharCount)) {        result[k++]=i + iIgnoreAtBeginning;      }    }  }  if (k > 0) {    int[] res=new int[k];    System.arraycopy(result,0,res,0,k);    return new Hyphenation(new String(w,offset,len),res);  } else {    return null;  }}  }
class C{  public String subtype(){  return subtype;}  }
class C{  protected String unpackValues(int k){  StringBuffer buf=new StringBuffer();  byte v=vspace.get(k++);  while (v != 0) {    char c=(char)((v >>> 4) - 1 + '0');    buf.append(c);    c=(char)(v & 0x0f);    if (c == 0) {      break;    }    c=(char)(c - 1 + '0');    buf.append(c);    v=vspace.get(k++);  }  return buf.toString();}  }
class C{  @Override public boolean equals(Object theObject){  if (theObject instanceof Timestamp) {    return equals((Timestamp)theObject);  }  return false;}  }
class C{  public BasicPoolEntry allocEntry(final Object state){  if (!freeEntries.isEmpty()) {    ListIterator<BasicPoolEntry> it=freeEntries.listIterator(freeEntries.size());    while (it.hasPrevious()) {      BasicPoolEntry entry=it.previous();      if (LangUtils.equals(state,entry.getState())) {        it.remove();        return entry;      }    }  }  if (!freeEntries.isEmpty()) {    BasicPoolEntry entry=freeEntries.remove();    entry.setState(null);    OperatedClientConnection conn=entry.getConnection();    try {      conn.close();    } catch (    IOException ex) {      log.debug("I/O error closing connection",ex);    }    return entry;  }  return null;}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{"Programmer's assertion:  the method FunctionMultiArgs.reportWrongNumberArgs() should never be called."});  throw new RuntimeException(fMsg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentnodevalue.class,args);}  }
class C{  public ShapeTileBox bounding_box(){  if (precalculated_bounding_box == null) {    precalculated_bounding_box=bounding_box(0,corner_count() - 1);  }  return precalculated_bounding_box;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (contentHandler != null) {    contentHandler.endElement(uri,localName,qName);  }}  }
class C{  private void classFileEpilogue(){  mv.visitMaxs(0,0);  mv.visitEnd();}  }
class C{  public DHPublicKeySpec(BigInteger y,BigInteger p,BigInteger g){  this.y=y;  this.p=p;  this.g=g;}  }
class C{  public AMCertStore(AMLDAPCertStoreParameters param){  storeParam=param;}  }
class C{  public void testSHA512(){  Digest oldDigest=new SHA512Digest();  Digest newDigest=new OpenSSLDigest.SHA512();  doTestMessageDigest(oldDigest,newDigest);}  }
class C{  public void cut(int startIndex,int endIndex){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.cut(startIndex,endIndex);  }}  }
class C{  public static void initializeProperties(String propertyName,String propertyValue){  SystemPropertiesManager.initializeProperties(propertyName,propertyValue);}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  private boolean matches(ByteOrderMark bom){  for (int i=0; i < bom.length(); i++) {    if (bom.get(i) != firstBytes[i]) {      return false;    }  }  return true;}  }
class C{  public Token(String tokenId,TokenType type){  this();  if (tokenId == null || type == null) {    throw new IllegalArgumentException("Arguments cannot be null.");  }  put(CoreTokenField.TOKEN_ID,tokenId);  put(CoreTokenField.TOKEN_TYPE,type);}  }
class C{  @Override public int update(ByteBuffer inBuffer,ByteBuffer outBuffer) throws ShortBufferException {  return cipher.update(inBuffer,outBuffer);}  }
class C{  boolean isFractional(){  return fractional;}  }
class C{  public ServerKeyExchange(HandshakeIODataStream in,int length,int keyExchange) throws IOException {  int size=in.readUint16();  bytes1=in.read(size);  par1=new BigInteger(1,bytes1);  this.length=2 + bytes1.length;  size=in.readUint16();  bytes2=in.read(size);  par2=new BigInteger(1,bytes2);  this.length+=2 + bytes2.length;  if (keyExchange != CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {    size=in.readUint16();    bytes3=in.read(size);    par3=new BigInteger(1,bytes3);    this.length+=2 + bytes3.length;  } else {    par3=null;    bytes3=null;  }  if (keyExchange != CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT && keyExchange != CipherSuite.KEY_EXCHANGE_DH_anon) {    size=in.readUint16();    hash=in.read(size);    this.length+=2 + hash.length;  } else {    hash=null;  }  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerKeyExchange");  }}  }
class C{  public static MediaType parseMediaType(StringReader input) throws IOException {  String type=HttpParser.readToken(input);  if (type == null || type.length() == 0) {    return null;  }  if (HttpParser.skipConstant(input,"/") == SkipResult.NOT_FOUND) {    return null;  }  String subtype=HttpParser.readToken(input);  if (subtype == null || subtype.length() == 0) {    return null;  }  LinkedHashMap<String,String> parameters=new LinkedHashMap<>();  SkipResult lookForSemiColon=HttpParser.skipConstant(input,";");  if (lookForSemiColon == SkipResult.NOT_FOUND) {    return null;  }  while (lookForSemiColon == SkipResult.FOUND) {    String attribute=HttpParser.readToken(input);    String value="";    if (HttpParser.skipConstant(input,"=") == SkipResult.FOUND) {      value=HttpParser.readTokenOrQuotedString(input,true);    }    if (attribute != null) {      parameters.put(attribute.toLowerCase(Locale.ENGLISH),value);    }    lookForSemiColon=HttpParser.skipConstant(input,";");    if (lookForSemiColon == SkipResult.NOT_FOUND) {      return null;    }  }  return new MediaType(type,subtype,parameters);}  }
class C{  public int compare(Object o1,Object o2){  String s1=(String)o1;  String s2=(String)o2;  if (s1 == null) {    if (s2 != null) {      return -1;    } else {      return 0;    }  } else {    if (s2 == null) {      return 1;    }  }  return s1.compareToIgnoreCase(s2);}  }
class C{  public String toString(){  return (resourceMatch);}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document anotherDoc;  Node node;  doc=(Document)load("staffNS",true);  anotherDoc=(Document)load("staffNS",true);{    boolean success=false;    try {      node=doc.importNode(anotherDoc,false);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_SUPPORTED_ERR);    }    assertTrue("throw_NOT_SUPPORTED_ERR",success);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public static void message(CommandManager mgr,String msg,Throwable t){  dumpToOutput(mgr,msg,t);  mgr.getDebugger().message(msg,t);}  }
class C{  @Override public Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){  int count=countByField2(field2);  if (count == 0) {    return null;  }  List<Foo> list=findByField2(field2,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public void endPrefixMapping(String prefix){}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicPasswordFieldUI();}  }
class C{  public String toURLEncodedQueryString() throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSFederationTerminationNotification." + "toURLEncodedQueryString: providerId is null in the " + "request with requestId: "+ requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSFederationTerminationNotification." + "toURLEncodedQueryString: couldn't generate " + "RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  StringBuffer urlEncodedAuthnReq=new StringBuffer(300);  urlEncodedAuthnReq.append(IFSConstants.REQUEST_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(requestID)).append(IFSConstants.AMPERSAND);  urlEncodedAuthnReq.append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(majorVersion).append(IFSConstants.AMPERSAND);  urlEncodedAuthnReq.append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(minorVersion).append(IFSConstants.AMPERSAND);  if (issueInstant != null) {    urlEncodedAuthnReq.append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(DateUtils.toUTCDateFormat(issueInstant))).append(IFSConstants.AMPERSAND);  } else {    FSUtils.debug.error("FSFederationTerminationNotification." + "toURLEncodedQueryString: issueInstant missing");    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  if (providerId != null && providerId.length() != 0) {    urlEncodedAuthnReq.append(IFSConstants.PROVIDER_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(providerId)).append(IFSConstants.AMPERSAND);  }  if (nameIdentifier != null) {    if (nameIdentifier.getName() != null && nameIdentifier.getName().length() != 0) {      urlEncodedAuthnReq.append(IFSConstants.NAME).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(nameIdentifier.getName())).append(IFSConstants.AMPERSAND).append(IFSConstants.NAME_IDENTIFIER).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(nameIdentifier.getName())).append(IFSConstants.AMPERSAND);    }    if (nameIdentifier.getNameQualifier() != null && nameIdentifier.getNameQualifier().length() != 0) {      urlEncodedAuthnReq.append(IFSConstants.NAME_QUALIFIER).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(nameIdentifier.getNameQualifier())).append(IFSConstants.AMPERSAND);    }    if (nameIdentifier.getFormat() != null && nameIdentifier.getFormat().length() != 0) {      urlEncodedAuthnReq.append(IFSConstants.NAME_FORMAT).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(nameIdentifier.getFormat())).append(IFSConstants.AMPERSAND);    }  }  if (relayState != null) {    urlEncodedAuthnReq.append(IFSConstants.RELAY_STATE).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(relayState)).append(IFSConstants.AMPERSAND);  }  return urlEncodedAuthnReq.toString();}  }
class C{  @Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {  String resp=null;  ensureValidToken();  String redirectUrl=null;  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),MessageFormat.format("/webhdfs/v1/{0}?op=APPEND",path)),token);  conn.setRequestMethod("POST");  conn.setInstanceFollowRedirects(false);  conn.connect();  logger.info("Location:" + conn.getHeaderField("Location"));  resp=result(conn,true);  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField("Location");  conn.disconnect();  if (redirectUrl != null) {    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);    conn.setRequestMethod("POST");    conn.setDoOutput(true);    conn.setDoInput(true);    conn.setUseCaches(false);    conn.setRequestProperty("Content-Type","application/octet-stream");    final int _SIZE=is.available();    conn.setRequestProperty("Content-Length","" + _SIZE);    conn.setFixedLengthStreamingMode(_SIZE);    conn.connect();    OutputStream os=conn.getOutputStream();    copy(is,os);    is.close();    os.close();    resp=result(conn,true);    conn.disconnect();  }  return resp;}  }
class C{  private Privilege[] toPrivilege(ApplicationPrivilege appPrivilege) throws EntitlementException {  Privilege[] results=new Privilege[2];  try {    Privilege actualP=Privilege.getNewInstance();    actualP.setName(appPrivilege.getName());    actualP.setDescription(appPrivilege.getDescription());    Set<String> res=createDelegationResources(appPrivilege);    Entitlement entitlement=new Entitlement(APPL_NAME,res,getActionValues(appPrivilege.getActionValues()));    actualP.setEntitlement(entitlement);    Privilege ghostP=Privilege.getNewInstance();    ghostP.setName(GHOST_PRIVILEGE_NAME_PREFIX + appPrivilege.getName());    Set<String> ghostRes=new HashSet<String>();    String currentOrgDN=DNMapper.orgNameToDN(realm);    Object[] param={currentOrgDN};    ghostRes.add(MessageFormat.format(SUN_AM_REALM_RESOURCE,param));    ghostRes.add(MessageFormat.format(SUN_IDREPO_RESOURCE,param));    entitlement=new Entitlement(APPL_NAME,ghostRes,getActionValues(ApplicationPrivilege.PossibleAction.READ));    ghostP.setEntitlement(entitlement);    Set<SubjectImplementation> subjects=appPrivilege.getSubjects();    Set<EntitlementSubject> eSubjects=new HashSet<EntitlementSubject>();    for (    SubjectImplementation i : subjects) {      eSubjects.add((EntitlementSubject)i);    }    OrSubject orSubject=new OrSubject(eSubjects);    actualP.setSubject(orSubject);    actualP.setCondition(appPrivilege.getCondition());    ghostP.setSubject(orSubject);    ghostP.setCondition(appPrivilege.getCondition());    Set<String> applIndexes=new HashSet<String>();    applIndexes.addAll(appPrivilege.getApplicationNames());    actualP.setApplicationIndexes(applIndexes);    results[0]=actualP;    results[1]=ghostP;  } catch (  UnsupportedEncodingException ex) {    String[] params={};    throw new EntitlementException(324,params);  }  return results;}  }
class C{  protected Border createNonRolloverBorder(){  Object border=UIManager.get("ToolBar.nonrolloverBorder");  if (border != null) {    return (Border)border;  }  UIDefaults table=UIManager.getLookAndFeelDefaults();  return new CompoundBorder(new BasicBorders.ButtonBorder(table.getColor("Button.shadow"),table.getColor("Button.darkShadow"),table.getColor("Button.light"),table.getColor("Button.highlight")),new BasicBorders.RolloverMarginBorder());}  }
class C{  public void testSignumNegative(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertEquals("incorrect value",-1,aNumber.signum());}  }
class C{  public void renameAci(DN oldDN,DN newDN){  lock.writeLock().lock();  try {    Map<DN,List<Aci>> tempAciList=new HashMap<>();    Iterator<Map.Entry<DN,List<Aci>>> iterator=aciList.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry<DN,List<Aci>> hashEntry=iterator.next();      DN keyDn=hashEntry.getKey();      if (keyDn.isSubordinateOrEqualTo(oldDN)) {        DN relocateDN=keyDn.rename(oldDN,newDN);        List<Aci> acis=new LinkedList<>();        for (        Aci aci : hashEntry.getValue()) {          try {            Aci newAci=Aci.decode(ByteString.valueOfUtf8(aci.toString()),relocateDN);            acis.add(newAci);          } catch (          AciException ex) {            logger.warn(WARN_ACI_ADD_LIST_FAILED_DECODE,aci,relocateDN,ex.getMessage());          }        }        tempAciList.put(relocateDN,acis);        iterator.remove();      }    }    aciList.putAll(tempAciList);  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public CHAR_ARRAY(String mimeType){  super(mimeType,"[C");}  }
class C{  public void write(final char chars[],final int start,final int length) throws java.io.IOException {  int lengthx3=3 * length;  if (lengthx3 >= BYTES_MAX - count) {    flushBuffer();    if (lengthx3 > BYTES_MAX) {      int split=length / CHARS_MAX;      final int chunks;      if (length % CHARS_MAX > 0)       chunks=split + 1; else       chunks=split;      int end_chunk=start;      for (int chunk=1; chunk <= chunks; chunk++) {        int start_chunk=end_chunk;        end_chunk=start + (int)((((long)length) * chunk) / chunks);        final char c=chars[end_chunk - 1];        int ic=chars[end_chunk - 1];        if (c >= 0xD800 && c <= 0xDBFF) {          if (end_chunk < start + length) {            end_chunk++;          } else {            end_chunk--;          }        }        int len_chunk=(end_chunk - start_chunk);        this.write(chars,start_chunk,len_chunk);      }      return;    }  }  final int n=length + start;  final byte[] buf_loc=m_outputBytes;  int count_loc=count;  int i=start;{    char c;    for (; i < n && (c=chars[i]) < 0x80; i++)     buf_loc[count_loc++]=(byte)c;  }  for (; i < n; i++) {    final char c=chars[i];    if (c < 0x80)     buf_loc[count_loc++]=(byte)(c); else     if (c < 0x800) {      buf_loc[count_loc++]=(byte)(0xc0 + (c >> 6));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    } else     if (c >= 0xD800 && c <= 0xDBFF) {      char high, low;      high=c;      i++;      low=chars[i];      buf_loc[count_loc++]=(byte)(0xF0 | (((high + 0x40) >> 8) & 0xf0));      buf_loc[count_loc++]=(byte)(0x80 | (((high + 0x40) >> 2) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 | ((low >> 6) & 0x0f) + ((high << 4) & 0x30));      buf_loc[count_loc++]=(byte)(0x80 | (low & 0x3f));    } else {      buf_loc[count_loc++]=(byte)(0xe0 + (c >> 12));      buf_loc[count_loc++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    }  }  count=count_loc;}  }
class C{  public void shutdown(){  try {    radiusConn.disconnect();  } catch (  IOException e) {  }  radiusConn=null;}  }
class C{  public FrameBodyEncrypted(String identifier){  this.identifier=identifier;}  }
class C{  private final int ensureRunBreak(int offset,boolean copyAttrs){  if (offset == length()) {    return runCount;  }  int runIndex=0;  while (runIndex < runCount && runStarts[runIndex] < offset) {    runIndex++;  }  if (runIndex < runCount && runStarts[runIndex] == offset) {    return runIndex;  }  if (runCount == runArraySize) {    int newArraySize=runArraySize + ARRAY_SIZE_INCREMENT;    int newRunStarts[]=new int[newArraySize];    @SuppressWarnings("unchecked") Vector<Attribute> newRunAttributes[]=(Vector<Attribute>[])new Vector<?>[newArraySize];    @SuppressWarnings("unchecked") Vector<Object> newRunAttributeValues[]=(Vector<Object>[])new Vector<?>[newArraySize];    for (int i=0; i < runArraySize; i++) {      newRunStarts[i]=runStarts[i];      newRunAttributes[i]=runAttributes[i];      newRunAttributeValues[i]=runAttributeValues[i];    }    runStarts=newRunStarts;    runAttributes=newRunAttributes;    runAttributeValues=newRunAttributeValues;    runArraySize=newArraySize;  }  Vector<Attribute> newRunAttributes=null;  Vector<Object> newRunAttributeValues=null;  if (copyAttrs) {    Vector<Attribute> oldRunAttributes=runAttributes[runIndex - 1];    Vector<Object> oldRunAttributeValues=runAttributeValues[runIndex - 1];    if (oldRunAttributes != null) {      newRunAttributes=new Vector<>(oldRunAttributes);    }    if (oldRunAttributeValues != null) {      newRunAttributeValues=new Vector<>(oldRunAttributeValues);    }  }  runCount++;  for (int i=runCount - 1; i > runIndex; i--) {    runStarts[i]=runStarts[i - 1];    runAttributes[i]=runAttributes[i - 1];    runAttributeValues[i]=runAttributeValues[i - 1];  }  runStarts[runIndex]=offset;  runAttributes[runIndex]=newRunAttributes;  runAttributeValues[runIndex]=newRunAttributeValues;  return runIndex;}  }
class C{  @Override public int hashCode(){  if (hashCode == 0) {    if (bytes != null && bytes.length != 0) {      int len=bytes.length;      int inc=((len - 32) / 32) + 1;      for (int i=0; i < len; ) {        hashCode=(hashCode * 37) + bytes[i];        i+=inc;      }    }    if (hashCode == 0) {      hashCode=1;    }  }  return hashCode;}  }
class C{  @Override public void put(String name,short value){  emulatedFields.put(name,value);}  }
class C{  public static String loggerNameToTag(String loggerName){  if (loggerName == null) {    return "null";  }  int length=loggerName.length();  if (length <= 23) {    return loggerName;  }  int lastPeriod=loggerName.lastIndexOf(".");  return length - (lastPeriod + 1) <= 23 ? loggerName.substring(lastPeriod + 1) : loggerName.substring(loggerName.length() - 23);}  }
class C{  public FrameBodyRVAD(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public synchronized void startPreview(){  OpenCamera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.getCamera().startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,theCamera.getCamera());  }}  }
class C{  public static String defaultPolicyAdminRoleCreateDuringOrgConfig(){  initialize();  return (defaultPOLICY_ADMIN);}  }
class C{  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize){  return new ScheduledThreadPoolExecutor(corePoolSize);}  }
class C{  protected static ByteBuffer uncompress(String identifier,String filename,ByteBuffer byteBuffer,int decompressedFrameSize,int realFrameSize) throws InvalidFrameException {  logger.config(filename + ":About to decompress " + realFrameSize+ " bytes, expect result to be:"+ decompressedFrameSize+ " bytes");  byte[] result=new byte[decompressedFrameSize];  byte[] input=new byte[realFrameSize];  int position=byteBuffer.position();  byteBuffer.get(input,0,realFrameSize);  byteBuffer.position(position);  Inflater decompresser=new Inflater();  decompresser.setInput(input);  try {    int inflatedTo=decompresser.inflate(result);    logger.config(filename + ":Decompressed to " + inflatedTo+ " bytes");  } catch (  DataFormatException dfe) {    logger.log(Level.CONFIG,"Unable to decompress this frame:" + identifier,dfe);    byteBuffer.position(byteBuffer.position() + realFrameSize);    throw new InvalidFrameException(ErrorMessage.ID3_UNABLE_TO_DECOMPRESS_FRAME.getMsg(identifier,filename,dfe.getMessage()));  }  decompresser.end();  return ByteBuffer.wrap(result);}  }
class C{  public String toString(){  if (stubDelegate == null) {    setDefaultDelegate();  }  String ior;  if (stubDelegate != null) {    ior=stubDelegate.toString(this);    if (ior == null) {      return super.toString();    } else {      return ior;    }  }  return super.toString();}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  @Override protected void fill_list(){  BrdComponents components=board_frame.board_panel.itera_board.get_routing_board().brd_components;  BrdComponent[] sorted_arr=new BrdComponent[components.count()];  for (int i=0; i < sorted_arr.length; ++i) {    sorted_arr[i]=components.get(i + 1);  }  java.util.Arrays.sort(sorted_arr);  for (int i=0; i < sorted_arr.length; ++i) {    add_to_list(sorted_arr[i]);  }  gui_list.setVisibleRowCount(Math.min(components.count(),DEFAULT_TABLE_SIZE));}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  public WinListener(JPopupMenu p){  this.popupMenu=p;}  }
class C{  public void writeUnrecognizedMessage(final int messageID,final byte messageTag,final ByteString messageBytes) throws IOException {  logger.trace("ENCODE LDAP UNKNOWN MESSAGE(messageID=%d, messageTag=%x, messageBytes=%s)",messageID,messageTag,messageBytes);  writeMessageHeader(messageID);{    writer.writeOctetString(messageTag,messageBytes);  }  writer.writeEndSequence();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeattributenodeattribute.class,args);}  }
class C{  private void checkConnection(int dsId,int rsId,String msg) throws Exception {  int rsPort=-1;  LDAPReplicationDomain rd=null;switch (dsId) {case DS1_ID:    rd=rd1;  break;case DS2_ID:rd=rd2;break;default :fail("Unknown replication domain server id.");}switch (rsId) {case RS1_ID:rsPort=rs1Port;break;case RS2_ID:rsPort=rs2Port;break;case RS3_ID:rsPort=rs3Port;break;default :fail("Unknown replication server id.");}waitConnected(dsId,rsId,rsPort,rd,msg);}  }
class C{  public X509Name(Vector oids,Vector values){  this(oids,values,new X509DefaultEntryConverter());}  }
class C{  protected void decrypt() throws IOException {  inBuffer.flip();  outBuffer.clear();  try {    cipher.update(inBuffer,outBuffer);  } catch (  ShortBufferException e) {    throw new IOException(e);  }  inBuffer.clear();  outBuffer.flip();}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void evictAll() throws IOException {  cache.evictAll();}  }
class C{  public JKNotAllowedOperationException(String message){  super(message);}  }
class C{  public long toDays(){  return seconds / SECONDS_PER_DAY;}  }
class C{  public HeaderFactory createHeaderFactory() throws PeerUnavailableException {  if (headerFactory == null) {    headerFactory=(HeaderFactory)createSipFactory("javax.sip.header.HeaderFactoryImpl");  }  return headerFactory;}  }
class C{  public final void error(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {    log(SimpleLog.LOG_LEVEL_ERROR,message,null);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic256Sha256Element createBasic256Sha256Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic256Sha256ElementImpl();}  }
class C{  public void insert_string(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_string",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_string(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.AuthenticateSessionContextElement createAuthenticateSessionContextElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.AuthenticateSessionContextElementImpl();}  }
class C{  public OutputStream(){  this(checkPermission());}  }
class C{  public InvalidDnDOperationException(String msg){  super(msg);}  }
class C{  public void run(){  int retry=0;  while (retry <= 1) {    retry++;    BufferedReader br=null;    HttpURLConnection conn=null;    try {      URL url=new URL(server + path);      conn=(HttpURLConnection)url.openConnection();      conn.setInstanceFollowRedirects(false);      conn.connect();      int responseCode=conn.getResponseCode();      if (responseCode == 200) {        br=new BufferedReader(new InputStreamReader(conn.getInputStream()));        String line;        while ((line=br.readLine()) != null) {          System.out.println(line);        }      } else       if (responseCode == 302) {        continue;      } else {        System.out.println(conn.getResponseMessage());      }    } catch (    ProtocolException ex) {      ex.printStackTrace();    }catch (    IOException ex) {      ex.printStackTrace();    } finally {      if (br != null) {        try {          br.close();        } catch (        IOException ex) {        }      }      if (conn != null) {        try {          conn.disconnect();        } catch (        Exception ex) {        }      }    }    break;  }}  }
class C{  public DN child(final DN dn){  Reject.ifNull(dn);  if (dn.isRootDN()) {    return this;  } else   if (isRootDN()) {    return dn;  } else {    final RDN[] rdns=new RDN[dn.size()];    int i=rdns.length;    for (DN next=dn; next.rdn != null; next=next.parent) {      rdns[--i]=next.rdn;    }    DN newDN=this;    for (i=0; i < rdns.length; i++) {      newDN=new DN(this.schema,newDN,rdns[i]);    }    return newDN;  }}  }
class C{  public NoSuchFieldError(String s){  super(s);}  }
class C{  @Override protected void doPut(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  if (readOnly) {    resp.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  String path=getRelativePath(req);  WebResource resource=resources.getResource(path);  Range range=parseContentRange(req,resp);  InputStream resourceInputStream=null;  try {    if (range != null) {      File contentFile=executePartialPut(req,range,path);      resourceInputStream=new FileInputStream(contentFile);    } else {      resourceInputStream=req.getInputStream();    }    if (resources.write(path,resourceInputStream,true)) {      if (resource.exists()) {        resp.setStatus(HttpServletResponse.SC_NO_CONTENT);      } else {        resp.setStatus(HttpServletResponse.SC_CREATED);      }    } else {      resp.sendError(HttpServletResponse.SC_CONFLICT);    }  }  finally {    if (resourceInputStream != null) {      try {        resourceInputStream.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public Iterator<SMSDataEntry> search(SSOToken token,String startDN,String filter,int numOfEntries,int timeLimit,boolean sortResults,boolean ascendingOrder,Set<String> excludes) throws SSOException, SMSException {  try (Connection conn=getConnection(adminPrincipal)){    ConnectionEntryReader results=searchObjectsEx(token,startDN,filter,numOfEntries,timeLimit,sortResults,ascendingOrder,conn);    return new SearchResultIterator(results,excludes,conn);  } }  }
class C{  public ModelMBeanOperationInfo(String name,String description,MBeanParameterInfo[] signature,String type,int impact){  super(name,description,signature,type,impact);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),"ModelMBeanOperationInfo(" + "String,String,MBeanParameterInfo[],String,int)","Entry");  }  operationDescriptor=validDescriptor(null);}  }
class C{  public Builder removeAllRequiredAttributes(){  this.requiredAttributeOIDs.clear();  return this;}  }
class C{  public static String toString(double[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  static MonitoringAttributesViewPanel<LocalizableMessage> createMessageInstance(LinkedHashSet<LocalizableMessage> attributes){  return new MonitoringAttributesViewPanel<>(attributes);}  }
class C{  public PlaPointFloat corner_approx(int p_no){  int corners_count=corner_count();  if (p_no < 0) {    System.err.println(classname + "corner_approx: p_no is < 0");    p_no=0;  } else   if (p_no >= corners_count) {    System.err.println(classname + "corner_approx: p_no must be less than arr.length - 1");    p_no=corners_count - 1;  }  if (precalculated_float_corners[p_no] != null)   return precalculated_float_corners[p_no];  precalculated_float_corners[p_no]=plaline(p_no).intersection_approx(plaline(p_no + 1));  return precalculated_float_corners[p_no];}  }
class C{  public void testScaleZero(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=0;  int cScale=0;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertTrue("incorrect scale",aNumber.scale() == cScale);}  }
class C{  public void testDoubleValuePlusZero(){  String a="123809648392384754573567356745735.63567890295784902768787678287E-400";  BigDecimal aNumber=new BigDecimal(a);  long zero=0;  double result=aNumber.doubleValue();  assertTrue("incorrect value",Double.doubleToLongBits(result) == zero);}  }
class C{  public void cast(final Type from,final Type to){  if (from != to) {    if (from == Type.DOUBLE_TYPE) {      if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.D2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.D2L);      } else {        mv.visitInsn(Opcodes.D2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.FLOAT_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.F2D);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.F2L);      } else {        mv.visitInsn(Opcodes.F2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.LONG_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.L2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.L2F);      } else {        mv.visitInsn(Opcodes.L2I);        cast(Type.INT_TYPE,to);      }    } else {      if (to == Type.BYTE_TYPE) {        mv.visitInsn(Opcodes.I2B);      } else       if (to == Type.CHAR_TYPE) {        mv.visitInsn(Opcodes.I2C);      } else       if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.I2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.I2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.I2L);      } else       if (to == Type.SHORT_TYPE) {        mv.visitInsn(Opcodes.I2S);      }    }  }}  }
class C{  public boolean isSearchable(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].searchable;}  }
class C{  @KnownFailure("not supported") public void test_SelectRightOuterJoin() throws SQLException {  String sql="SELECT distinct s.snum as ssnum, c.snum as ccnum FROM " + DatabaseCreator.CUSTOMERS_TABLE + " c right outer join "+ DatabaseCreator.SALESPEOPLE_TABLE+ " s on s.snum=c.snum";  ResultSet result=statement.executeQuery(sql);  HashMap<Integer,Integer> value=new HashMap<Integer,Integer>();  value.put(1001,1001);  value.put(1002,1002);  value.put(1003,1003);  value.put(1004,1004);  value.put(1007,1007);  value.put(1013,null);  while (result.next()) {    int key=result.getInt("ssnum");    Object val=result.getObject("ccnum");    assertTrue("wrong value of ssnum field",value.containsKey(key));    assertEquals("wrong value of ccnum field",value.get(key),(Integer)val);    value.remove(key);  }  assertTrue("expected rows number doesn't equal actual rows number",value.isEmpty());  result.close();}  }
class C{  public ComponentInputMap(JComponent component){  this.component=component;  if (component == null) {    throw new IllegalArgumentException("ComponentInputMaps must be associated with a non-null JComponent");  }}  }
class C{  public float length(){  return (float)Math.sqrt(lengthSquared());}  }
class C{  void repaintCurrentValue(){  Rectangle r=rectangleForCurrentValue();  comboBox.repaint(r.x,r.y,r.width,r.height);}  }
class C{  public static Optional<String> trimStart(final String input,String... chars){  return Optional.ofNullable(input).filter(null).map(null);}  }
class C{  public Future<Job> state(JobState newState){  Future<Job> future=Future.future();  RedisClient client=RedisHelper.client(vertx,new JsonObject());  JobState oldState=this.state;  logger.debug("Job::state(from: " + oldState + ", to:"+ newState.name()+ ")");  client.transaction().multi(null);  return future.compose(null);}  }
class C{  public static Foo fetchByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_Last(uuid,orderByComparator);}  }
class C{  public int size(){  return 10 + payload.length;}  }
class C{  public PrintWriter log(PrintWriter out){  return log(this,out);}  }
class C{  void addValueTokenForElement(XMLElement element,String value) throws Exception {  UnboundedToken valueToken=newValueToken(value);  ArrayList rawTokens=getRawTokens();  int startTokenIndex=element.getStartToken().getTokenIndex();  int indentLevel=getIndentLevel(startTokenIndex);  WhiteSpaceToken valueIndentToken=new WhiteSpaceToken(NEW_LINE + getIndentStringForIndentLevel(indentLevel + 1));  boolean added=false;  for (int i=0; i < rawTokens.size(); i++) {    Token nextToken=(Token)rawTokens.get(i);    if (nextToken.getTokenIndex() == startTokenIndex) {      int insertIndex=i + 1;      valueIndentToken.setTokenIndex(getParser().getNextTokenIndex());      rawTokens.add(insertIndex,valueIndentToken);      insertIndex++;      rawTokens.add(insertIndex,valueToken);      added=true;      break;    }  }  if (!added) {    throw new Exception("Failed to add value token");  }  element.setValueToken(valueToken);}  }
class C{  void internalSetOutputStream(OutputStream newOs){  this.os=newOs;}  }
class C{  public void testScaleDefault(){  String a="1231212478987482988429808779810457634781384756794987";  int cScale=0;  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  assertTrue("incorrect scale",aNumber.scale() == cScale);}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("LDAP LocalizableMessage");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  LocalizableMessage ID:  ");  buffer.append(messageID);  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  Protocol Op:");  buffer.append(EOL);  protocolOp.toString(buffer,indent + 4);  if (controls != null && !controls.isEmpty()) {    buffer.append(indentBuf);    buffer.append("  Controls:");    for (    Control c : controls) {      c.toString(buffer);    }  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  PolicyModel model=(PolicyModel)getModel();  String subjectType=(String)propertySheetModel.getValue(ATTR_SUBJECT_TYPE);  setPageSessionAttribute(SubjectOpViewBeanBase.CALLING_VIEW_BEAN,(String)getPageSessionAttribute(CALLING_VIEW_BEAN));  String realmName=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  String viewBeanURL=model.getSubjectViewBeanURL(realmName,subjectType);  unlockPageTrailForSwapping();  if ((viewBeanURL != null) && (viewBeanURL.trim().length() > 0)) {    forwardToURL(viewBeanURL,subjectType,realmName);  } else {    forwardToViewBean(model,subjectType,realmName);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String substring;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  substring=child.substringData(9,10);  assertEquals("characterdataSubStringExceedsValueAssert","Martin",substring);}  }
class C{  protected String doRFC2254Encoding(String inString){  StringBuilder buf=new StringBuilder(inString.length());  for (int i=0; i < inString.length(); i++) {    char c=inString.charAt(i);switch (c) {case '\\':      buf.append("\\5c");    break;case '*':  buf.append("\\2a");break;case '(':buf.append("\\28");break;case ')':buf.append("\\29");break;case '\0':buf.append("\\00");break;default :buf.append(c);break;}}return buf.toString();}  }
class C{  ConstantFloat(final DataInput file) throws IOException {  super(Const.CONSTANT_Float);  this.bytes=file.readFloat();}  }
class C{  public FramedProtocolAttribute(int framing){  super(OctetUtils.toOctets(AttributeType.FRAMED_PROTOCOL,framing));  this.framing=framing;}  }
class C{  static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public void error(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {  String formattedMsg=XSLMessages.createMessage(msg,args);  ErrorListener errHandler=xctxt.getErrorListener();  TransformerException spe=new TransformerException(formattedMsg,(SourceLocator)xctxt.getSAXLocator());  if (null != errHandler)   errHandler.error(spe); else   System.out.println(formattedMsg);}  }
class C{  void send404(PrintStream ps) throws IOException {  ps.println("Not Found\n\n" + "The requested resource was not found.\n");}  }
class C{  public boolean isValid(TagData data){  TagExtraInfo tei=getTagExtraInfo();  if (tei == null) {    return true;  }  return tei.isValid(data);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("http://www.nomatch.com","address");  assertSize("matchSize",0,elementList);}  }
class C{  @Override public void lifecycleEvent(LifecycleEvent event){  if (Lifecycle.AFTER_START_EVENT.equals(event.getType())) {    if (event.getSource() instanceof Server) {      createMBean((Server)event.getSource());    } else {      log.warn(sm.getString("storeConfigListener.notServer"));    }  } else   if (Lifecycle.AFTER_STOP_EVENT.equals(event.getType())) {    if (oname != null) {      registry.unregisterComponent(oname);      oname=null;    }  }}  }
class C{  private Insets parseInsets(String insets,String errorMsg) throws SAXException {  StringTokenizer tokenizer=new StringTokenizer(insets);  return new Insets(nextInt(tokenizer,errorMsg),nextInt(tokenizer,errorMsg),nextInt(tokenizer,errorMsg),nextInt(tokenizer,errorMsg));}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  void draw(Canvas c,float x,int top,int y,int bottom){  if (!mHasTabs) {    if (mDirections == Layout.DIRS_ALL_LEFT_TO_RIGHT) {      drawRun(c,0,mLen,false,x,top,y,bottom,false);      return;    }    if (mDirections == Layout.DIRS_ALL_RIGHT_TO_LEFT) {      drawRun(c,0,mLen,true,x,top,y,bottom,false);      return;    }  }  float h=0;  int[] runs=mDirections.mDirections;  RectF emojiRect=null;  int lastRunIndex=runs.length - 2;  for (int i=0; i < runs.length; i+=2) {    int runStart=runs[i];    int runLimit=runStart + (runs[i + 1] & Layout.RUN_LENGTH_MASK);    if (runLimit > mLen) {      runLimit=mLen;    }    boolean runIsRtl=(runs[i + 1] & Layout.RUN_RTL_FLAG) != 0;    int segstart=runStart;    for (int j=mHasTabs ? runStart : runLimit; j <= runLimit; j++) {      int codept=0;      Bitmap bm=null;      if (mHasTabs && j < runLimit) {        codept=mChars[j];        if (codept >= 0xd800 && codept < 0xdc00 && j + 1 < runLimit) {          codept=Character.codePointAt(mChars,j);          if (codept > 0xffff) {            ++j;            continue;          }        }      }      if (j == runLimit || codept == '\t' || bm != null) {        h+=drawRun(c,segstart,j,runIsRtl,x + h,top,y,bottom,i != lastRunIndex || j != mLen);        if (codept == '\t') {          float x2=h;          h=mDir * nextTab(h * mDir);          if (layoutContext.isShowWhiteSpace) {            float descent=mPaint.descent();            TextPaint wp=mWorkPaint;            wp.set(mPaint);            wp.setColor(layoutContext.whiteSpaceColor);            wp.setStrokeWidth(2f);            wp.setStyle(Paint.Style.FILL);            c.drawLine(x2 + 3,y - descent - 4f,h - 3,y - descent - 4f,wp);          }        } else         if (bm != null) {          float bmAscent=ascent(j);          float bitmapHeight=bm.getHeight();          float scale=-bmAscent / bitmapHeight;          float width=bm.getWidth() * scale;          if (emojiRect == null) {            emojiRect=new RectF();          }          emojiRect.set(x + h,y + bmAscent,x + h + width,y);          c.drawBitmap(bm,null,emojiRect,mPaint);          h+=width;          j++;        }        segstart=j + 1;      }    }  }}  }
class C{  public Object clone(){  Object theClone=null;  try {    theClone=super.clone();  } catch (  CloneNotSupportedException cne) {  }  return theClone;}  }
class C{  public void updateBundle(Bundle bundle) throws UpdateException {  try {    bundle.update();  } catch (  BundleException e) {    throw new UpdateException("Cannot update bundle " + bundle.toString(),e);  }}  }
class C{  public void registerAll(Collection<RegisteredListener> listeners){  for (  RegisteredListener listener : listeners) {    register(listener);  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {  if (sourcePath != null) {    PdfTokenizer tempTokens=tokens;    tokens=null;    out.defaultWriteObject();    tokens=tempTokens;  } else {    out.defaultWriteObject();  }}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  protected synchronized void shutdown(){  if (_ldapPool != null) {    _ldapPool.close();  }  _ldapPool=null;  m_instance=null;}  }
class C{  public StatusCode(String value,StatusCode subCode) throws SAMLException {  this.value=checkAndGetValue(value);  subStatusCode=subCode;}  }
class C{  public XPathException(String message){  super(message);}  }
class C{  public int count(){synchronized (lock) {    return map.size();  }}  }
class C{  public static String normalizeLangValue(String value){  if (XMPConst.X_DEFAULT.equals(value)) {    return value;  }  int subTag=1;  StringBuffer buffer=new StringBuffer();  for (int i=0; i < value.length(); i++) {switch (value.charAt(i)) {case '-':case '_':      buffer.append('-');    subTag++;  break;case ' ':break;default :if (subTag != 2) {buffer.append(Character.toLowerCase(value.charAt(i)));} else {buffer.append(Character.toUpperCase(value.charAt(i)));}}}return buffer.toString();}  }
class C{  public static boolean isMatchAllSocketFlagSet(final long socketIdentifier){  return extractPortNumber(socketIdentifier) == 0L;}  }
class C{  MutableBigInteger(BigInteger b){  intLen=b.mag.length;  value=Arrays.copyOf(b.mag,intLen);}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  private void runPatchers(){  if (patchers != null) {    for (int i=0; i < patchersLen; i++)     patchers[i].run();  }}  }
class C{  protected void completeEditing(){  if (tree.getInvokesStopCellEditing() && stopEditingInCompleteEditing && editingComponent != null) {    cellEditor.stopCellEditing();  }  completeEditing(false,true,false);}  }
class C{  public String paramString(){  String typeStr;switch (id) {case ANCESTOR_MOVED:    typeStr="ANCESTOR_MOVED (" + changed + ","+ changedParent+ ")";  break;case ANCESTOR_RESIZED:typeStr="ANCESTOR_RESIZED (" + changed + ","+ changedParent+ ")";break;case HIERARCHY_CHANGED:{typeStr="HIERARCHY_CHANGED (";boolean first=true;if ((changeFlags & PARENT_CHANGED) != 0) {first=false;typeStr+="PARENT_CHANGED";}if ((changeFlags & DISPLAYABILITY_CHANGED) != 0) {if (first) {  first=false;} else {  typeStr+=",";}typeStr+="DISPLAYABILITY_CHANGED";}if ((changeFlags & SHOWING_CHANGED) != 0) {if (first) {  first=false;} else {  typeStr+=",";}typeStr+="SHOWING_CHANGED";}if (!first) {typeStr+=",";}typeStr+=changed + "," + changedParent+ ")";break;}default :typeStr="unknown type";}return typeStr;}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  process(request.getRemoteAddr(),request,response,chain);}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  public synchronized void doLog(String msgString){  if (logger == null) {    if (logStatus) {      PWResetModelImpl.debug.error("PWResetAdminLog.doLog - no logger. Would have logged: " + msgString);    }  } else {    if (logStatus) {      SSOToken adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());      LogRecord lr=new LogRecord(Level.INFO,msgString,token);      logger.log(lr,adminToken);    }  }}  }
class C{  private void ping(){}  }
class C{  @Override public void removeResourceLink(String name){  entries.remove(name);  ContextResourceLink resourceLink=null;synchronized (resourceLinks) {    resourceLink=resourceLinks.remove(name);  }  if (resourceLink != null) {    support.firePropertyChange("resourceLink",resourceLink,null);    if (resourceRequireExplicitRegistration) {      try {        MBeanUtils.destroyMBean(resourceLink);      } catch (      Exception e) {        log.warn(sm.getString("namingResources.mbeanDestroyFail",resourceLink.getName()),e);      }    }    resourceLink.setNamingResources(null);  }}  }
class C{  @Override public void removeAll(){  for (  Foo foo : findAll()) {    remove(foo);  }}  }
class C{  public void toXml(Object object,OutputStream out,Class<?>... clas){  try {    JAXBContext jaxbContext=JAXBContext.newInstance(clas);    Marshaller jaxbMarshaller=jaxbContext.createMarshaller();    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);    jaxbMarshaller.marshal(object,out);  } catch (  JAXBException e) {    throw new JKException(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenomodificationallowederr.class,args);}  }
class C{  Context(){  copyTables();}  }
class C{  protected String remove(String name,StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.remove(printWriter,name,smClient);  return stringWriter.toString();}  }
class C{  private NamedCharacterSet(String name,char[] characters) throws ConfigException {  this(name,characters,new SecureRandom());}  }
class C{  protected Provider(String name,double version,String info){  this.name=name;  this.version=version;  this.info=info;  putId();  initialized=true;}  }
class C{  public void insert_double(double value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_double",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_double(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public String generateCallIdentifier(String address){  long random=rand.nextLong();  int hash=(int)Math.abs(random % digesterPoolsSize);  MessageDigest md=digesterPool[hash];synchronized (md) {    String date=Long.toString(System.nanoTime() + System.currentTimeMillis() + callIDCounter+++ random);    byte cid[]=md.digest(date.getBytes());    String cidString=Utils.toHexString(cid);    return cidString + "@" + address;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix11.class,args);}  }
class C{  private static int[] montReduce(int[] n,int[] mod,int mlen,int inv){  int c=0;  int len=mlen;  int offset=0;  do {    int nEnd=n[n.length - 1 - offset];    int carry=mulAdd(n,mod,offset,mlen,inv * nEnd);    c+=addOne(n,offset,mlen,carry);    offset++;  } while (--len > 0);  while (c > 0)   c+=subN(n,mod,mlen);  while (intArrayCmpToLen(n,mod,mlen) >= 0)   subN(n,mod,mlen);  return n;}  }
class C{  public synchronized void addFlavorForUnencodedNative(String nat,DataFlavor flav){  Objects.requireNonNull(nat,"Null native not permitted");  Objects.requireNonNull(flav,"Null flavor not permitted");  LinkedHashSet<DataFlavor> flavors=getNativeToFlavor().get(nat);  if (flavors == null) {    flavors=new LinkedHashSet<>(1);    getNativeToFlavor().put(nat,flavors);  }  flavors.add(flav);  flavorsForNativeCache.remove(nat);}  }
class C{  public static int countByUuid(java.lang.String uuid){  return getPersistence().countByUuid(uuid);}  }
class C{  public void commit(){  if (mParams != null) {    mContext.updateViewLayout(id,mParams);    mParams=null;  }}  }
class C{  public void paintTextFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBorder(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBorder(context,g,0,0,w,h,transform);  }}  }
class C{  public JOptionPane(Object message,int messageType,int optionType){  this(message,messageType,optionType,null);}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public void actionPerformed(ActionEvent e){  start.actionPerformed(e);  end.actionPerformed(e);}  }
class C{  public static void write(BoardFrame p_board_frame,IteraBoard p_board_handling,java.io.OutputStream p_output_stream) throws IOException {  IndentFileWriter output_file=new IndentFileWriter(p_output_stream);  GuiConfigFile result=new GuiConfigFile(p_board_frame,p_board_handling,null,output_file);  result.write_defaults_scope();  output_file.close();}  }
class C{  public static void handleTypeMismatchError(XMLSerializer serializer,Object parentObject,String fieldName,Object childObject) throws AbortSerializationException {  ValidationEvent ve=new ValidationEventImpl(ValidationEvent.ERROR,Messages.format(Messages.ERR_TYPE_MISMATCH,getUserFriendlyTypeName(parentObject),fieldName,getUserFriendlyTypeName(childObject)),new ValidationEventLocatorExImpl(parentObject,fieldName));  serializer.reportError(ve);}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public void commitEdit() throws ParseException {  JFormattedTextField ftf=getTextField();  ftf.commitEdit();}  }
class C{  void persistChecksums() throws IOException {  try (final BufferedWriter writer=Files.newBufferedWriter(checksums,Charset.defaultCharset())){    writer.write("#File," + digest.getAlgorithm());    writer.newLine();    for (    Map.Entry<Path,String> entry : entrySet()) {      writer.write(entry.getKey().toString() + "," + entry.getValue());      writer.newLine();    }  } }  }
class C{  public String toValueString(){  StringBuffer sb=new StringBuffer();  sb.append(_hostEntityID).append(DELIM).append(_remoteEntityID).append(DELIM).append(_nameIDValue);  return sb.toString();}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.BaseConfigType createBaseConfigType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.BaseConfigTypeImpl();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.DSAKeyValueType createDSAKeyValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.DSAKeyValueTypeImpl();}  }
class C{  public void removePermittedDomains(Collection<String> domainNames){  Lists.removeAll(permittedDomains,domainNames);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(500);  sb.append("<");  if ((nsPrefix != null) && nsPrefix.length() != 0) {    sb.append(nsPrefix).append(":Status xmlns:").append(nsPrefix).append("=\"");  } else {    sb.append("Status xmlns=\"");  }  sb.append(ns).append("\"");  if (code != null) {    String localPart=code.getLocalPart();    if ((localPart != null) && localPart.length() != 0) {      sb.append(" code=\"");      String codeNS=code.getNamespaceURI();      if ((codeNS == null) || codeNS.length() == 0) {        sb.append(localPart).append("\"");      } else {        if ((ns != null) && ns.equals(codeNS)) {          if ((nsPrefix != null) && nsPrefix.length() != 0) {            sb.append(nsPrefix).append(":");          }          sb.append(localPart).append("\"");        } else {          String codePrefix=code.getPrefix();          if ((codePrefix != null) && codePrefix.length() != 0) {            sb.append(codePrefix).append(":").append(localPart).append("\" xmlns:").append(codePrefix).append("=\"").append(codeNS).append("\"");          } else {            if ((nsPrefix == null) || nsPrefix.length() == 0) {              sb.append("ns1:").append(localPart).append("\" xmlns:").append("ns1=\"").append(codeNS).append("\"");            } else {              sb.append(localPart).append("\" xmlns=\"").append(codeNS).append("\"");            }          }        }      }    }  }  if ((ref != null) && ref.length() != 0) {    sb.append(" ref=\"").append(ref).append("\"");  }  if ((comment != null) && comment.length() != 0) {    sb.append(" comment=\"").append(comment).append("\"");  }  sb.append(">");  if (status != null) {    status.toString();  }  if ((nsPrefix != null) && nsPrefix.length() != 0) {    sb.append("</").append(nsPrefix).append(":Status>");  } else {    sb.append("</Status>");  }  return sb.toString();}  }
class C{  public boolean flushOutbound() throws IOException {  return false;}  }
class C{  public static void saveAsBinary(NSObject root,OutputStream out) throws IOException {  BinaryPropertyListWriter.write(out,root);}  }
class C{  public void testModPowPosExp(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75,48,-7};  byte eBytes[]={27,-15,65,39};  byte mBytes[]={-128,2,3,4,5};  int aSign=1;  int eSign=1;  int mSign=1;  byte rBytes[]={113,100,-84,-28,-85};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger exp=new BigInteger(eSign,eBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  BigInteger result=aNumber.modPow(exp,modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void removeAt(int i){  Object[] array=queue;  int n=size - 1;  if (n == i)   array[i]=null; else {    E moved=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(i,moved,array,n); else     siftDownUsingComparator(i,moved,array,n,cmp);    if (array[i] == moved) {      if (cmp == null)       siftUpComparable(i,moved,array); else       siftUpUsingComparator(i,moved,array,cmp);    }  }  size=n;}  }
class C{  public static Date parseDate(String d){  try {    return new SimpleDateFormat(DATE_FORMAT).parse(d);  } catch (  Exception e) {  }  return null;}  }
class C{  public void testGetInstanceStringProvider01() throws NoSuchAlgorithmException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    KeyAgreement.getInstance(null,defaultProvider);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyAgreement.getInstance(invalidValues[i],defaultProvider);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public SPFedSession(String idpSessionIndex,String sessionID,NameIDInfo info,String metaAlias){  this.idpSessionIndex=idpSessionIndex;  this.spTokenID=sessionID;  this.info=info;  this.metaAlias=metaAlias;}  }
class C{  protected boolean updateAccountInformation(NameIdentifier ni){  try {    FSUtils.debug.message("FSFedTerminationHandler::updateAccountInformation: start");    String searchDomain=remoteEntityId;    String nameId=null;    String nameQualifier=null;    if (ni != null) {      nameQualifier=ni.getNameQualifier();      if (nameQualifier != null && (nameQualifier.length() != 0) && !nameQualifier.equals(remoteEntityId)) {        searchDomain=nameQualifier;      }      nameId=ni.getName();    }    if (nameId == null && acctInfo != null) {      FSUtils.debug.message("FSAccountManager: getnameId in accInfo");      NameIdentifier temp=acctInfo.getLocalNameIdentifier();      if (temp != null) {        nameId=temp.getName();        nameQualifier=temp.getNameQualifier();      } else {        temp=acctInfo.getRemoteNameIdentifier();        if (temp != null) {          nameId=temp.getName();          nameQualifier=temp.getNameQualifier();        }      }    }    FSAccountFedInfoKey fedInfoKey=new FSAccountFedInfoKey(nameQualifier,nameId);    managerInst.removeAccountFedInfo(userID,fedInfoKey,searchDomain);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSFedTerminationHandler:: " + "updateAccountInformation deactivate successfully completed");    }  } catch (  FSAccountMgmtException e) {    FSUtils.debug.error("FSFedTerminationHandler::updateAccountInformation " + FSUtils.bundle.getString(IFSConstants.TERMINATION_LOCAL_FAILED));    String[] data={userID};    LogUtil.error(Level.INFO,LogUtil.TERMINATION_FAILED,data,ssoToken);    return false;  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Cleaning Session manager for user : " + userID);    FSUtils.debug.message("Cleaning Session manager for remote provider: " + remoteEntityId);    FSUtils.debug.message("Cleaning Session manager for hosted provider: " + hostedEntityId);  }  FSLogoutUtil.cleanSessionMapPartnerList(userID,remoteEntityId,metaAlias,null);  return true;}  }
class C{  private Object[] objectClasses(Schema schema,String... names){  ObjectClass[] attrs=new ObjectClass[names.length];  int i=0;  for (  String name : names) {    attrs[i++]=schema.getObjectClass(name);  }  return attrs;}  }
class C{  public void testIdentityEquals() throws Exception {  String name="nnn";  PublicKey pk=new PublicKeyStub("aaa","fff",new byte[]{1,2,3,4,5});  IdentityStub i=new IdentityStub(name);  i.setPublicKey(pk);  Object[] value={new IdentityStub("111"),Boolean.FALSE,new IdentityStub(name),Boolean.FALSE,new IdentityStub(name,IdentityScope.getSystemScope()),Boolean.FALSE,i,Boolean.TRUE,new IdentityStub(name,pk),Boolean.TRUE};  for (int k=0; k < value.length; k+=2) {    assertEquals(value[k + 1],new Boolean(i.identityEquals((Identity)value[k])));    if (Boolean.TRUE.equals(value[k + 1]))     assertEquals(i.hashCode(),value[k].hashCode());  }  Identity i2=IdentityScope.getSystemScope().getIdentity(name);  i2.setPublicKey(pk);  assertTrue(i.identityEquals(i2));}  }
class C{  private Object movePostData(JEditorPane targetPane,String frameName){  Object postData=null;  JEditorPane p=getOutermostJEditorPane();  if (p != null) {    if (frameName == null) {      frameName=(String)getElement().getAttributes().getAttribute(HTML.Attribute.NAME);    }    if (frameName != null) {      String propName=FormView.PostDataProperty + "." + frameName;      Document d=p.getDocument();      postData=d.getProperty(propName);      if (postData != null) {        targetPane.getDocument().putProperty(FormView.PostDataProperty,postData);        d.putProperty(propName,null);      }    }  }  return postData;}  }
class C{  public static void verifySignature(Document doc) throws WSFederationMetaException {  String classMethod="WSFederationMetaSecurityUtils.verifySignature: ";  NodeList sigElements=null;  try {    Element nscontext=org.apache.xml.security.utils.XMLUtils.createDSctx(doc,"ds",Constants.SignatureSpecNS);    sigElements=XPathAPI.selectNodeList(doc,"//ds:Signature",nscontext);  } catch (  Exception ex) {    debug.error(classMethod,ex);    throw new WSFederationMetaException(ex);  }  int numSigs=sigElements.getLength();  if (debug.messageEnabled()) {    debug.message(classMethod + "# of signatures = " + numSigs);  }  if (numSigs == 0) {    return;  }  initializeKeyStore();  for (int i=0; i < numSigs; i++) {    Element sigElement=(Element)sigElements.item(i);    String sigParentName=sigElement.getParentNode().getLocalName();    Object[] objs={sigParentName};    if (debug.messageEnabled()) {      debug.message(classMethod + "verifying signature under " + sigParentName);    }    try {      XMLSignature signature=new XMLSignature(sigElement,"");      signature.addResourceResolver(new com.sun.identity.saml.xmlsig.OfflineResolver());      KeyInfo ki=signature.getKeyInfo();      X509Certificate x509cert=null;      if (ki != null && ki.containsX509Data()) {        if (keyStore != null) {          StorageResolver sr=new StorageResolver(new KeyStoreResolver(keyStore));          ki.addStorageResolver(sr);        }        x509cert=ki.getX509Certificate();      }      if (x509cert == null) {        if (debug.messageEnabled()) {          debug.message(classMethod + "" + "try to find cert in KeyDescriptor");        }        String xpath="following-sibling::*[local-name()=\"" + TAG_KEY_DESCRIPTOR + "\" and namespace-uri()=\""+ NS_META+ "\"]";        Node node=XPathAPI.selectSingleNode(sigElement,xpath);        if (node != null) {          Element kd=(Element)node;          String use=kd.getAttributeNS(null,ATTR_USE);          if (use.equals("signing")) {            NodeList nl=kd.getChildNodes();            for (int j=0; j < nl.getLength(); j++) {              Node child=nl.item(j);              if (child.getNodeType() == Node.ELEMENT_NODE) {                String localName=child.getLocalName();                String ns=child.getNamespaceURI();                if (TAG_KEY_INFO.equals(localName) && NS_XMLSIG.equals(ns)) {                  ki=new KeyInfo((Element)child,"");                  if (ki.containsX509Data()) {                    if (keyStore != null) {                      KeyStoreResolver ksr=new KeyStoreResolver(keyStore);                      StorageResolver sr=new StorageResolver(ksr);                      ki.addStorageResolver(sr);                    }                    x509cert=ki.getX509Certificate();                  }                }                break;              }            }          }        }      }      if (x509cert == null) {        throw new WSFederationMetaException("verify_no_cert",objs);      }      if (checkCert && ((keyProvider == null) || (keyProvider.getCertificateAlias(x509cert) == null))) {        throw new WSFederationMetaException("untrusted_cert",objs);      }      PublicKey pk=x509cert.getPublicKey();      if (!signature.checkSignatureValue(pk)) {        throw new WSFederationMetaException("verify_fail",objs);      }    } catch (    WSFederationMetaException sme) {      throw sme;    }catch (    Exception ex) {      debug.error(classMethod,ex);      throw new WSFederationMetaException(Locale.getString(WSFederationMetaUtils.bundle,"verify_fail",objs) + "\n" + ex.getMessage());    }  }}  }
class C{  static Promise<Void> allBlocking(final Promise<?>... promises){  return new AllBlockingPromise(promises);}  }
class C{  public static Attribute create(String attributeName,String valueString){  return create(getSchema().getAttributeType(attributeName),attributeName,valueString);}  }
class C{  public boolean isDefaultNamespace(String namespaceURI){  return false;}  }
class C{  public ByteLookupTable(int offset,byte data[][]){  super(offset,data.length);  numComponents=data.length;  numEntries=data[0].length;  this.data=new byte[numComponents][];  for (int i=0; i < numComponents; i++) {    this.data[i]=data[i];  }}  }
class C{  private Jwt createJwt() throws SignatureException {  JwsAlgorithm jwsAlgorithm=JwsAlgorithm.valueOf(signingAlgorithm);  if (isIDTokenEncryptionEnabled && (isEmpty(encryptionAlgorithm) || isEmpty(encryptionMethod) || encryptionKey == null)) {    logger.info("ID Token Encryption not set. algorithm: {}, method: {}",encryptionAlgorithm,encryptionMethod);    throw OAuthProblemException.OAuthError.SERVER_ERROR.handle(Request.getCurrent(),"ID Token Encryption not set. algorithm: " + encryptionAlgorithm + ", method: "+ encryptionMethod);  }  SigningHandler signingHandler=getSigningHandler(jwsAlgorithm);  JwtClaimsSet claimsSet=jwtBuilderFactory.claims().claims(asMap()).build();  if (isIDTokenEncryptionEnabled) {    logger.info("ID Token Encryption enabled. algorithm: {}, method: {}",encryptionAlgorithm,encryptionMethod);    return createEncryptedJwt(signingHandler,jwsAlgorithm,claimsSet);  } else {    return createSignedJwt(signingHandler,jwsAlgorithm,claimsSet);  }}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  void regionToCenterPoint(int cellX,int cellY,int spanX,int spanY,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=hStartPadding + cellX * (mCellWidth + mWidthGap) + (spanX * mCellWidth + (spanX - 1) * mWidthGap) / 2;  result[1]=vStartPadding + cellY * (mCellHeight + mHeightGap) + (spanY * mCellHeight + (spanY - 1) * mHeightGap) / 2;}  }
class C{  public static boolean isCurrentVersionEqualTo(Integer expectedVersion){  String[] parsedVersion=parseVersion(getCurrentVersion());  if (parsedVersion == null) {    return false;  }  return expectedVersion.equals(Integer.valueOf(parsedVersion[0]));}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum > 1)   reportWrongNumberArgs();}  }
class C{  void createAdministrationSuffix(ConnectionWrapper conn,String backendName) throws ADSContextException {  try {    RootCfgClient root=conn.getRootConfiguration();    LDIFBackendCfgClient backend=null;    try {      backend=(LDIFBackendCfgClient)root.getBackend(backendName);    } catch (    ManagedObjectNotFoundException e) {    }catch (    ClassCastException cce) {      throw new ADSContextException(ErrorType.UNEXPECTED_ADS_BACKEND_TYPE,cce);    }    if (backend == null) {      LDIFBackendCfgDefn provider=LDIFBackendCfgDefn.getInstance();      backend=root.createBackend(provider,backendName,null);      backend.setEnabled(true);      backend.setLDIFFile(ADSContext.getAdminLDIFFile());      backend.setBackendId(backendName);      backend.setWritabilityMode(BackendCfgDefn.WritabilityMode.ENABLED);      backend.setIsPrivateBackend(true);    }    SortedSet<DN> suffixes=backend.getBaseDN();    if (suffixes == null) {      suffixes=new TreeSet<>();    }    DN newDN=ADSContext.getAdministrationSuffixDN();    if (suffixes.add(newDN)) {      backend.setBaseDN(suffixes);      backend.commit();    }  } catch (  Throwable t) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,t);  }}  }
class C{  public AppLauncher secondsBetweenLaunchOnLockedRetries(int secondsBetweenLaunchOnLockedRetries){  this.secondsBetweenLaunchOnLockedRetries=secondsBetweenLaunchOnLockedRetries;  return this;}  }
class C{  public void close(){  if (jmxc != null) {    try {      jmxc.close();    } catch (    IOException e) {      logger.error("Error while trying to close jmx connection",e);    }    jmxc=null;  }}  }
class C{  public void cancelCellEditing(){  delegate.cancelCellEditing();}  }
class C{  private ResultCode runSaveGenerationId(DN entryDN,long generationId){  final ByteString asn1BaseDn=ByteString.valueOfUtf8(entryDN.toString());  LDAPAttribute attr=new LDAPAttribute(REPLICATION_GENERATION_ID,Long.toString(generationId));  List<RawModification> mods=new ArrayList<>(1);  mods.add(new LDAPModification(ModificationType.REPLACE,attr));  ModifyOperation op=new ModifyOperationBasis(conn,nextOperationID(),nextMessageID(),new ArrayList<Control>(0),asn1BaseDn,mods);  runAsSynchronizedOperation(op);  return op.getResultCode();}  }
class C{  private void phase1(String logFolder) throws IOException, JAXBException {  for (  WorkflowTrace trace : validWorkflowTraces) {    List<ModifiableVariableField> fields=FuzzingHelper.getAllModifiableVariableFieldsRecursively(trace,ConnectionEnd.CLIENT);    for (int fieldNumber=0; fieldNumber < fields.size(); fieldNumber++) {      if (!FuzzingHelper.isModifiableVariableModificationAllowed(fields.get(fieldNumber).getField(),fuzzerConfig.getModifiableVariableTypes(),fuzzerConfig.getModifiableVariableFormats(),fuzzerConfig.getModifiedVariableWhitelist(),fuzzerConfig.getModifiedVariableBlacklist())) {        LOGGER.debug("skipping {}",fields.get(fieldNumber).getField().getName());        continue;      }      boolean influencesHandshake=false;      String currentFieldName="";      String currentMessageName="";      for (int iter=1; iter < fuzzerConfig.getVariableModificationIter() + 1; iter++) {        TlsContext tlsContext=createTlsContext(trace);        WorkflowTrace workflow=tlsContext.getWorkflowTrace();        List<ModifiableVariableField> currentFields=FuzzingHelper.getAllModifiableVariableFieldsRecursively(workflow,ConnectionEnd.CLIENT);        ModifiableVariableField mvField=currentFields.get(fieldNumber);        currentFieldName=mvField.getField().getName();        currentMessageName=mvField.getObject().getClass().getSimpleName();        FuzzingHelper.executeModifiableVariableModification((ModifiableVariableHolder)mvField.getObject(),mvField.getField());        TransportHandler transportHandler=configHandler.initializeTransportHandler(fuzzerConfig);        WorkflowExecutor workflowExecutor=configHandler.initializeWorkflowExecutor(transportHandler,tlsContext);        tlsContext.setServerCertificate(certificate);        try {          workflowExecutor.executeWorkflow();        } catch (        WorkflowExecutionException ex) {          LOGGER.debug(ex.getLocalizedMessage(),ex);        }catch (        Exception ex) {          LOGGER.error(ex.getLocalizedMessage(),ex);        }        transportHandler.closeConnection();        if (!TlsContextAnalyzer.containsFullWorkflow(tlsContext)) {          if (workflow.containsServerFinished() || workflow.getProtocolMessages().size() == 2) {            influencesHandshake=true;          }        }        analyzeServerTerminationAndWriteFile(sce,logFolder,currentFieldName,trace.getName(),iter,workflow);        analyzeResultingTlsContextAndWriteFile(tlsContext,logFolder,currentFieldName,trace.getName(),iter);        totalProtocolFlows++;        if (interruptFuzzing) {          return;        }      }      if (influencesHandshake) {        variablesWithoutHandshakeInfluence.add(currentMessageName + "." + currentFieldName);      }    }  }}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.StatusTypeImpl();}  }
class C{  public static <K,V>SortedMap<K,V> unmodifiableSortedMap(SortedMap<K,? extends V> m){  return new UnmodifiableSortedMap<>(m);}  }
class C{  public ID3v11Tag(RandomAccessFile file) throws TagNotFoundException, IOException {  this(file,"");}  }
class C{  protected final void openSessionForRead(String applicationId,List<String> permissions){  openSessionForRead(applicationId,permissions,SessionLoginBehavior.SSO_WITH_FALLBACK,Session.DEFAULT_AUTHORIZE_ACTIVITY_CODE);}  }
class C{  public NSObject[] objectsAtIndexes(int... indexes){  NSObject[] result=new NSObject[indexes.length];  Arrays.sort(indexes);  for (int i=0; i < indexes.length; i++)   result[i]=array[indexes[i]];  return result;}  }
class C{  public String addEnvironment(String envName,String type,String value) throws MalformedObjectNameException {  NamingResourcesImpl nresources=(NamingResourcesImpl)this.resource;  if (nresources == null) {    return null;  }  ContextEnvironment env=nresources.findEnvironment(envName);  if (env != null) {    throw new IllegalArgumentException("Invalid environment name - already exists '" + envName + "'");  }  env=new ContextEnvironment();  env.setName(envName);  env.setType(type);  env.setValue(value);  nresources.addEnvironment(env);  ManagedBean managed=registry.findManagedBean("ContextEnvironment");  ObjectName oname=MBeanUtils.createObjectName(managed.getDomain(),env);  return (oname.toString());}  }
class C{  public void auditModuleSuccess(LoginState loginState,Principal principal,AuthenticationAuditEntry auditEntryDetail){  String realm=getRealmFromState(loginState);  if (eventPublisher.isAuditing(realm,AUTHENTICATION_TOPIC,AM_LOGIN_MODULE_COMPLETED)) {    String principalName=principal == null ? null : principal.getName();    String authId=getUserId(principalName,realm);    auditModuleEvent(loginState,realm,principalName,authId,SUCCESSFUL,auditEntryDetail);  }}  }
class C{  private void close(){  Window window=getWindow();  if (window != null) {    window.dispatchEvent(new WindowEvent(window,WindowEvent.WINDOW_CLOSING));  }}  }
class C{  public static void dismissProgressDialog(final ProgressDialog progressDialog){  try {    if (progressDialog != null && progressDialog.isShowing() && !progressDialog.getOwnerActivity().isChangingConfigurations() && !progressDialog.getOwnerActivity().isFinishing()) {      progressDialog.dismiss();      ActivityUtils.unlockOrientation(progressDialog.getOwnerActivity());    }  } catch (  Exception e) {  }}  }
class C{  public double doubleValue(){  if (val instanceof Long || val instanceof Integer) {    return (double)(val.longValue());  }  return val.doubleValue();}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName){}  }
class C{  IndexQueryFactoryImpl(ReadableTransaction txn,AttributeIndex attributeIndex){  this.txn=txn;  this.attributeIndex=attributeIndex;}  }
class C{  public static Border createLineBorder(Color color){  return new LineBorder(color,1);}  }
class C{  private Map retainSessionsWithUserID(Collection sessions,SMProfileModelImpl modelImpl){  Map results=new HashMap(sessions.size() * 2);  for (Iterator iter=sessions.iterator(); iter.hasNext(); ) {    Session sess=(Session)iter.next();    try {      String userId=sess.getProperty(SMProfileModelImpl.USER_ID);      if (userId != null) {        String id=sess.getID().toString();        SMSessionData sData=new SMSessionData();        sData.setUserId(userId);        sData.setId(id);        sData.setTimeRemain(sess.getTimeLeft() / 60);        sData.setMaxSessionTime(sess.getMaxSessionTime());        sData.setIdleTime(sess.getIdleTime() / 60);        sData.setMaxIdleTime(sess.getMaxIdleTime());        results.put(userId + id,sData);      }    } catch (    SessionException se) {      debug.warning("SMSessionCache.retainSessionsWithUserID",se);    }  }  return results;}  }
class C{  public void invalidateFileCache(){  if (loadThread != null) {    loadThread.interrupt();    loadThread.cancelRunnables();    loadThread=null;  }}  }
class C{  public void xor(BitVector other){  if (sizeInBits != other.size()) {    throw new IllegalArgumentException("BitVector sizes don't match");  }  int sizeInBytes=(sizeInBits + 7) >> 3;  for (int i=0; i < sizeInBytes; ++i) {    array[i]^=other.array[i];  }}  }
class C{  @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.PolicyReferenceElement createPolicyReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.PolicyReferenceElementImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.replaceData(-5,3,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void endDocument() throws SAXException {  flushStartDoc();  m_resultContentHandler.endDocument();}  }
class C{  private ResourceIndexEntry findClosestMatch(String resourceName){  ResourceIndexEntry resourceIndexEntry=null;  Iterator iter=topLevelEntries.iterator();  boolean processed=false;  while ((!processed) && (iter.hasNext())) {    ResourceIndexEntry tle=(ResourceIndexEntry)iter.next();    resourceIndexEntry=tle.findClosestMatch(resourceType,resourceName);    if (resourceIndexEntry != null) {      processed=true;    }  }  return resourceIndexEntry;}  }
class C{  public void accumulate(double x){  Cell[] as;  long b, v, r;  int m;  Cell a;  if ((as=cells) != null || (r=Double.doubleToRawLongBits(function.applyAsDouble(Double.longBitsToDouble(b=base),x))) != b && !casBase(b,r)) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=(r=Double.doubleToRawLongBits(function.applyAsDouble(Double.longBitsToDouble(v=a.value),x))) == v || a.cas(v,r)))     doubleAccumulate(x,function,uncontended);  }}  }
class C{  public static InstructionFragment newInstance(Recipe recipe,int sectionNumber){  InstructionFragment fragment=new InstructionFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public ServerGroup(Node node){  Element elm=(Element)node;  minPool=Integer.parseInt(elm.getAttribute(DSConfigMgr.MIN_CONN_POOL));  maxPool=Integer.parseInt(elm.getAttribute(DSConfigMgr.MAX_CONN_POOL));  NodeList children=node.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node n=children.item(i);    if (n.getNodeName().equalsIgnoreCase(DSConfigMgr.SERVER)) {      hosts.add(new ServerObject(n));    } else     if (n.getNodeName().equals(DSConfigMgr.USER)) {      dsUsers.add(new DirUserObject(n));    } else     if (n.getNodeName().equals(DSConfigMgr.BASE_DN)) {      dsBaseDN=((Text)n.getFirstChild()).getNodeValue();    }  }}  }
class C{  private static boolean isAfterI(String src,int index){  int ch;  int cc;  for (int i=index; i > 0; i-=Character.charCount(ch)) {    ch=src.codePointBefore(i);    if (ch == 'I') {      return true;    } else {      cc=Normalizer.getCombiningClass(ch);      if ((cc == 0) || (cc == COMBINING_CLASS_ABOVE)) {        return false;      }    }  }  return false;}  }
class C{  private static Key buildKey(final String algorithm){  if (algorithm.contains("DESede")) {    SecretKeyFactory factory;    try {      factory=SecretKeyFactory.getInstance("DESede");      return factory.generateSecret(new DESedeKeySpec(decode("U2VjcmV0S2V5Q29udGFpbmluZzI0Q2hh")));    } catch (    Exception e) {      return null;    }  } else   if (algorithm.contains("DES")) {    return new SecretKeySpec(decode("MTIzNDU2Nzg="),"DES");  } else   if (algorithm.contains("RSA")) {    KeyPairGenerator kpGenerator;    try {      kpGenerator=getInstance("RSA");    } catch (    NoSuchAlgorithmException e) {      return null;    }    kpGenerator.initialize(1024);    return kpGenerator.genKeyPair().getPublic();  } else {    return new SecretKeySpec(decode(B64_ENCODED_KEY),"AES");  }}  }
class C{  protected void uninstallKeyboardActions(){  SwingUtilities.replaceUIActionMap(list,null);  SwingUtilities.replaceUIInputMap(list,JComponent.WHEN_FOCUSED,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  ProcessingInstruction pi;  ProcessingInstruction aNode;  Document ownerDocument;  DocumentType docType;  String system;  String target;  String data;  java.util.List result=new java.util.ArrayList();  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  pi=aNewDoc.createProcessingInstruction("target1","data1");  aNode=(ProcessingInstruction)doc.importNode(pi,false);  ownerDocument=aNode.getOwnerDocument();  assertNotNull("ownerDocumentNotNull",ownerDocument);  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  target=aNode.getTarget();  assertEquals("piTarget","target1",target);  data=aNode.getData();  assertEquals("piData","data1",data);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthnContextClassRefElement createAuthnContextClassRefElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextClassRefElementImpl(value);}  }
class C{  @Override public void end(String namespace,String name) throws Exception {  if (ignoreCreateExceptions && exceptionIgnoredStack != null && !(exceptionIgnoredStack.empty())) {    if ((exceptionIgnoredStack.pop()).booleanValue()) {      if (digester.log.isTraceEnabled()) {        digester.log.trace("[FactoryCreateRule] No creation so no push so no pop");      }      return;    }  }  Object top=digester.pop();  if (digester.log.isDebugEnabled()) {    digester.log.debug("[FactoryCreateRule]{" + digester.match + "} Pop "+ top.getClass().getName());  }}  }
class C{  public int insertInstructionsBeforeReturn(List<Instruction> instructions,int returnIndex,List<? extends Instruction> toInsert,SemanticScope scope) throws SyntaxException {  Ins.TReturn tReturn=(Ins.TReturn)instructions.remove(returnIndex);  Value returnValue=tReturn.value();  if (returnValue != null) {    LocalVariable tmp=new LocalVariable(returnValue.type(),false);    scope.putLeftValue(scope.generateTempName(),tmp);    Ins.TStore TStore=new Ins.TStore(tmp,returnValue,scope,LineCol.SYNTHETIC,err);    Ins.TLoad tLoad=new Ins.TLoad(tmp,scope,LineCol.SYNTHETIC);    tReturn.setReturnValue(tLoad);    instructions.add(returnIndex++,TStore);  }  instructions.addAll(returnIndex,toInsert);  returnIndex+=toInsert.size();  instructions.add(returnIndex,tReturn);  return toInsert.size() + 2;}  }
class C{  private String[] keys(boolean expiredOnly) throws IOException {  String keys[]=null;synchronized (this) {    int numberOfTries=2;    while (numberOfTries > 0) {      Connection _conn=getConnection();      if (_conn == null) {        return new String[0];      }      try {        String keysSql="SELECT " + sessionIdCol + " FROM "+ sessionTable+ " WHERE "+ sessionAppCol+ " = ?";        if (expiredOnly) {          keysSql+=" AND (" + sessionLastAccessedCol + " + "+ sessionMaxInactiveCol+ " * 1000 < ?)";        }        try (PreparedStatement preparedKeysSql=_conn.prepareStatement(keysSql)){          preparedKeysSql.setString(1,getName());          if (expiredOnly) {            preparedKeysSql.setLong(2,System.currentTimeMillis());          }          try (ResultSet rst=preparedKeysSql.executeQuery()){            ArrayList<String> tmpkeys=new ArrayList<>();            if (rst != null) {              while (rst.next()) {                tmpkeys.add(rst.getString(1));              }            }            keys=tmpkeys.toArray(new String[tmpkeys.size()]);            numberOfTries=0;          }         }       } catch (      SQLException e) {        manager.getContext().getLogger().error(sm.getString(getStoreName() + ".SQLException",e));        keys=new String[0];        if (dbConnection != null)         close(dbConnection);      } finally {        release(_conn);      }      numberOfTries--;    }  }  return keys;}  }
class C{  private static Set parseAttributeMap(AttributeSchema as,Map attrValues){  Set results=null;  String attrName=as.getName();  if (as.getType().equals(AttributeSchema.Type.LIST)) {    Set keysToDelete=new HashSet();    for (Iterator i=attrValues.keySet().iterator(); i.hasNext(); ) {      String key=(String)i.next();      if (key.equals(attrName)) {        if (results == null) {          results=new HashSet();        }        Set set=(Set)attrValues.get(key);        if ((set != null) && !set.isEmpty()) {          results.addAll(set);        }        keysToDelete.add(key);      } else       if (key.startsWith(attrName + "[")) {        if (results == null) {          results=new HashSet();        }        Set set=(Set)attrValues.get(key);        String v=((set != null) && !set.isEmpty()) ? (String)set.iterator().next() : "";        if (key.indexOf(DEVICE_KEY) == 0) {          results.add(v);        } else {          results.add(key.substring(attrName.length()) + "=" + v);        }        keysToDelete.add(key);      }    }    for (Iterator i=keysToDelete.iterator(); i.hasNext(); ) {      attrValues.remove(i.next());    }  } else {    results=(Set)attrValues.remove(attrName);  }  return results;}  }
class C{  public void connectFailed(Route failedRoute,IOException failure){  if (failedRoute.proxy().type() != Proxy.Type.DIRECT && address.proxySelector() != null) {    address.proxySelector().connectFailed(address.url().uri(),failedRoute.proxy().address(),failure);  }  routeDatabase.failed(failedRoute);}  }
class C{  public int elementAt(int i){  if (i < m_blocksize)   return m_map0[i];  return m_map[i >>> m_SHIFT][i & m_MASK];}  }
class C{  public void testOpen_blob() throws Exception, java.lang.Exception {  Stmt statement2;  Blob blobInput=new Blob();  InputStream inStream=null;  byte[] in={(byte)1,(byte)2,(byte)3,(byte)4};  db.exec("create table TEST (res blob)",null);  inStream=Class.forName(this.getClass().getName()).getResourceAsStream("/blob.c");  assertNotNull(inStream);  statement2=db.prepare("insert into TEST(res) values (?)");  statement2.bind(1,in);  statement2.step();  statement2.close();  Blob blob=db.open_blob(dbFile.getPath(),"TEST","res",1,true);  if (blob == null) {    fail("Blob could not be retrieved");  }  InputStream is=blob.getInputStream();  int i=0;  int outByte=0;  byte[] out=new byte[4];  while ((outByte=is.read()) > -1) {    out[i]=(byte)outByte;    i++;  }  is.close();  blob.close();  assertTrue(Arrays.equals(in,out));  db.exec("insert into TEST values(zeroblob(128))",null);  Blob blob2=db.open_blob(dbFile.getPath(),"TEST","res",2,true);  is=blob2.getInputStream();  for (i=0; i < 128; i++) {    assertEquals(0,is.read());  }  is.close();}  }
class C{  public void addAttribue(final String name,final String value){  final JKTagAttributeWrapper attr=findAttribute(name);  if (attr == null) {    logger.fine(String.format("add attribute %s with value %s ",name,value));    this.attributesList.add(new JKTagAttributeWrapper(this.tag,name,value));  }}  }
class C{  public static <P>P decode(PropertyDefinition<P> propertyDef,String value){  return propertyDef.castValue(propertyDef.accept(new ValueDecoder(),value));}  }
class C{  public boolean processNotificationHandlerConfig(ErrorLogAccountStatusNotificationHandlerCfg configuration,boolean applyChanges){  boolean isAcceptable=true;  HashSet<AccountStatusNotificationType> newNotificationTypes=new HashSet<>();  for (  ErrorLogAccountStatusNotificationHandlerCfgDefn.AccountStatusNotificationType configNotificationType : configuration.getAccountStatusNotificationType()) {    newNotificationTypes.add(getNotificationType(configNotificationType));  }  if (applyChanges && isAcceptable) {    notificationTypes=newNotificationTypes;  }  return isAcceptable;}  }
class C{  public void test_getValue(){  SSLSession s=clientSession;  mySSLSessionBindingListener sbl=new mySSLSessionBindingListener();  try {    s.getValue(null);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  s.putValue("Name",sbl);  Object obj=s.getValue("Name");  assertTrue(obj instanceof SSLSessionBindingListener);}  }
class C{  public void writeMessage(LDAPMessage message) throws IOException {  if (logger.isTraceEnabled()) {    logger.trace(message.toString());    debugOutputStream.setRecordingEnabled(true);  }  message.write(asn1Writer);  asn1Writer.flush();  if (debugOutputStream.isRecordingEnabled()) {    ByteString bytesRead=debugOutputStream.getRecordedBytes();    debugOutputStream.clearRecordedBytes();    logger.trace("bytes written to wire(len=" + bytesRead.length() + "):"+ ServerConstants.EOL+ bytesRead.toHexPlusAsciiString(4));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapreturnfirstitem.class,args);}  }
class C{  @Override public long skip(long n) throws IOException {  long remaining=n;  final char[] ch=new char[fBuffer.length];  do {    int length=ch.length < remaining ? ch.length : (int)remaining;    int count=read(ch,0,length);    if (count > 0) {      remaining-=count;    } else {      break;    }  } while (remaining > 0);  long skipped=n - remaining;  return skipped;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  allocateElements(size);  head=0;  tail=size;  for (int i=0; i < size; i++)   elements[i]=s.readObject();}  }
class C{  private void assertWriteResult(int size) throws IOException {  ByteBuffer buf=ByteBuffer.allocate(size + 1);  int count=0;  int total=0;  long beginTime=System.currentTimeMillis();  while ((count=clientChannel.read(buf)) != -1) {    total=total + count;    if (System.currentTimeMillis() - beginTime > 10000) {      break;    }  }  assertEquals(total,size);  buf.flip();  for (int i=0; i < count; i++) {    assertEquals((byte)i,buf.get(i));  }}  }
class C{  public void valueForPathChanged(TreePath path,Object newValue){  MutableTreeNode aNode=(MutableTreeNode)path.getLastPathComponent();  aNode.setUserObject(newValue);  nodeChanged(aNode);}  }
class C{  public XMPSchemaRegistryImpl(){  try {    registerStandardNamespaces();    registerStandardAliases();  } catch (  XMPException e) {    throw new RuntimeException("The XMPSchemaRegistry cannot be initialized!");  }}  }
class C{  public boolean isFailOnError(){  return failOnError;}  }
class C{  private static void parseContainers(Set containers){  if (containers == null || containers.size() == 0) {    IDPPUtils.debug.error("IDPPServiceManager.parseContainers:" + "Container set is empty");    return;  }  Iterator iter=containers.iterator();  while (iter.hasNext()) {    String entry=(String)iter.next();    String containerToken=null;    String extensionToken=null;    String pluginToken=null;    StringTokenizer tokenizer=null;    String container=null;    if (entry.indexOf(IDPPConstants.ATTRIBUTE_SEPARATOR) != -1) {      tokenizer=new StringTokenizer(entry,IDPPConstants.ATTRIBUTE_SEPARATOR);      while (tokenizer.hasMoreTokens()) {        String temp=tokenizer.nextToken();        if (temp.startsWith(IDPPConstants.CONTAINER)) {          containerToken=temp;        } else         if (temp.startsWith(IDPPConstants.EXTENSION)) {          extensionToken=temp;        } else         if (temp.startsWith(IDPPConstants.PLUGIN)) {          pluginToken=temp;        }      }    } else {      containerToken=entry;    }    if ((containerToken.indexOf("=") == -1) || !containerToken.startsWith(IDPPConstants.CONTAINER)) {      if (IDPPUtils.debug.messageEnabled()) {        IDPPUtils.debug.message("IDPPServiceManager.parse" + "Containers: Invalid entry." + entry);      }      continue;    } else {      tokenizer=new StringTokenizer(containerToken,"=");      if (tokenizer.countTokens() != 2) {        if (IDPPUtils.debug.messageEnabled()) {          IDPPUtils.debug.message("IDPPServiceManager.parse" + "Containers: Invalid entry." + entry);        }        continue;      }      tokenizer.nextToken();      container=(String)tokenizer.nextToken();      if (container == null || container.length() == 0) {        if (IDPPUtils.debug.messageEnabled()) {          IDPPUtils.debug.message("IDPPServiceManager.parse" + "Containers: Invalid entry." + entry);        }      }      supportedContainers.add(container);    }    if (extensionToken != null && extensionToken.length() != 0 && (extensionToken.indexOf("=") != -1)) {      tokenizer=new StringTokenizer(extensionToken,"=");      tokenizer.nextToken();      try {        String ext=(String)tokenizer.nextToken();        Class extClass=Class.forName(ext);        IDPPExtension containerExtension=(IDPPExtension)extClass.newInstance();        containerExtensions.put(container,containerExtension);      } catch (      Exception ex) {        IDPPUtils.debug.error("IDPPServiceManager.parseContainers" + ":Error instantiating extension class:",ex);      }    }    if (pluginToken != null && pluginToken.length() != 0 && (pluginToken.indexOf("=") != -1)) {      tokenizer=new StringTokenizer(pluginToken,"=");      tokenizer.nextToken();      try {        String plugin=(String)tokenizer.nextToken();        Class pluginClass=Class.forName(plugin);        IDPPContainer containerClass=(IDPPContainer)pluginClass.newInstance();        containerClasses.put(container,containerClass);      } catch (      Exception ex) {        IDPPUtils.debug.error("IDPPServiceManager.parseContainers" + ":Error instantiating extension class:",ex);      }    }  }  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("IDPPServiceManager.parseContainers:" + "supported containers:" + supportedContainers);    IDPPUtils.debug.message("IDPPServiceManager.parseContainers:" + "container extensions:" + containerExtensions);    IDPPUtils.debug.message("IDPPServiceManager.parseContainers:" + "container classes:" + containerClasses);  }}  }
class C{  public static void main(String[] args){  Process p;  try {    ProcessBuilder pb=new ProcessBuilder("cat","/dev/random");    p=pb.start();  } catch (  IOException ioe) {    System.err.println("cmd failed: " + ioe.getMessage());    p=null;  }  try {    testDexClassLoader();  }  finally {    if (p != null)     p.destroy();    try {      Thread.sleep(500);    } catch (    Exception ex) {    }  }  System.out.println("done");}  }
class C{  public synchronized void storeServer(String aServerName,boolean backup,boolean externalAllowed) throws MalformedObjectNameException {  if (aServerName == null || aServerName.length() == 0) {    if (log.isErrorEnabled())     log.error("Please, call with a correct server ObjectName!");    return;  }  MBeanServer mserver=MBeanUtils.createServer();  ObjectName objectName=new ObjectName(aServerName);  if (mserver.isRegistered(objectName)) {    try {      Server aServer=(Server)mserver.getAttribute(objectName,"managedResource");      StoreDescription desc=null;      desc=getRegistry().findDescription(StandardContext.class);      if (desc != null) {        boolean oldSeparate=desc.isStoreSeparate();        boolean oldBackup=desc.isBackup();        boolean oldExternalAllowed=desc.isExternalAllowed();        try {          desc.setStoreSeparate(true);          desc.setBackup(backup);          desc.setExternalAllowed(externalAllowed);          store(aServer);        }  finally {          desc.setStoreSeparate(oldSeparate);          desc.setBackup(oldBackup);          desc.setExternalAllowed(oldExternalAllowed);        }      } else {        store(aServer);      }    } catch (    Exception e) {      if (log.isInfoEnabled())       log.info("Object " + aServerName + " is no a Server instance or store exception",e);    }  } else   if (log.isInfoEnabled())   log.info("Server " + aServerName + " not found!");}  }
class C{  public void test_entrySet_remove(){  Hashtable<String,String> hashtable=new Hashtable<String,String>();  hashtable.put("my.nonexistent.prop","AAA");  hashtable.put("parse.error","BBB");  Iterator<Map.Entry<String,String>> iterator=hashtable.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry entry=iterator.next();    final Object value=entry.getValue();    if (value.equals("AAA")) {      iterator.remove();    }  }  assertFalse(hashtable.containsKey("my.nonexistent.prop"));}  }
class C{  public void start(Future<?> finishFutureEvent){  this.finishFutureEvent=finishFutureEvent;  this.startTime=Time.currentTimeMillis();  this.started=true;  resetWait();}  }
class C{  public String[][] logRecRead(String fileName,LogQuery logQuery,boolean sourceData) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {  this.cleaner();  this.logFileName=fileName;  boolean hdrExist=false;  if (sourceData == true) {    queryChriteria=logQuery;  }  try {    hdrExist=this.getFieldNames(true,logQuery);  } catch (  IOException e) {    throw e;  }catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw e;  }  if (hdrExist == false) {    return queryResult;  }  if (logQuery != null) {    if ((logQuery.getNumRecordsWanted() == LogQuery.MOST_RECENT_MAX_RECORDS) || (logQuery.getNumRecordsWanted() < LogQuery.ALL_RECORDS)) {      this.maxNoOfRecs=1;    } else {      this.maxNoOfRecs=logQuery.getNumRecordsWanted();    }  } else {    this.maxNoOfRecs=1;  }  try {    if (sourceData == true) {      this.getRecords(true);    } else {      this.getRecords(false);    }  } catch (  IOException e) {    throw e;  }catch (  IllegalArgumentException e) {    throw e;  }catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw e;  }  int recSize=listOfValidRecords.size();  if (recSize <= 0) {    return null;  }  if (queryChriteria != null) {    String sortByField=queryChriteria.getSortingField();    if (sortByField != null) {      try {        this.sorter=new LogRecordSorter(sortByField,listOfValidRecords);        queryResult=this.sorter.getSortedRecords();        return (queryResult);      } catch (      NoSuchFieldException e) {        throw e;      }catch (      IllegalArgumentException e) {        throw e;      }catch (      RuntimeException e) {        throw e;      }catch (      Exception e) {        throw e;      }    }  }  queryResult=new String[recSize][];  for (int i=0; i < recSize; i++) {    queryResult[i]=(String[])listOfValidRecords.get(i);  }  return queryResult;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.DSAKeyValueElement createDSAKeyValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.DSAKeyValueElementImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildnodeancestor.class,args);}  }
class C{  protected boolean isPositioned(){  return isFixedLayout();}  }
class C{  public boolean removeAll(Collection<?> c){  if (!(c instanceof JumboEnumSet))   return super.removeAll(c);  JumboEnumSet<?> es=(JumboEnumSet<?>)c;  if (es.elementType != elementType)   return false;  for (int i=0; i < elements.length; i++)   elements[i]&=~es.elements[i];  return recalculateSize();}  }
class C{  private void genManagedObjectRelationTree(TreeMap<String,TreeMap<String,RelationDefinition>> list){  htmlHeader(DynamicConstants.PRODUCT_NAME + " Configuration Reference - Structure View");  tabMenu(RELATION_TREE_FILE);  viewHelp("This view represents the structural relationships between " + "components and indicates how certain components can exist only within " + "container components.");  jumpSection();  for (  String catName : list.keySet()) {    heading3(getFriendlyName(catName));    TreeMap<String,RelationDefinition> catList=list.get(catName);    genMORelationTree(catList);  }  htmlFooter();  generateFile(RELATION_TREE_FILE);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  modifyProperties();  forwardTo();}  }
class C{  public boolean isSessionUpgrade(){  return sessionUpgrade;}  }
class C{  public boolean intersectsLine(float x1,float y1,float x2,float y2){  double rx1=getX();  double ry1=getY();  double rx2=rx1 + getWidth();  double ry2=ry1 + getHeight();  return (rx1 <= x1 && x1 <= rx2 && ry1 <= y1 && y1 <= ry2) || (rx1 <= x2 && x2 <= rx2 && ry1 <= y2 && y2 <= ry2) || linesIntersect(rx1,ry1,rx2,ry2,x1,y1,x2,y2)|| linesIntersect(rx2,ry1,rx1,ry2,x1,y1,x2,y2);}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  public EventException(){  cause=null;}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  public AuthorizationIdentityResponseControl(DN authorizationDN){  super(OID_AUTHZID_RESPONSE,false);  if (authorizationDN == null) {    this.authorizationID="dn:";  } else {    this.authorizationID="dn:" + authorizationDN;  }}  }
class C{  public boolean isBleepEnabled(){  return mBleepEnabled;}  }
class C{  static DN create(ManagedObjectPath<?,?> path,LDAPProfile profile){  DNBuilder builder=new DNBuilder(profile);  path.serialize(builder);  return builder.build();}  }
class C{  protected static int bufferToValue(ByteBuffer buffer){  byte byteBuffer[]=new byte[INTEGRAL_SIZE];  buffer.get(byteBuffer,0,INTEGRAL_SIZE);  return bufferToValue(byteBuffer);}  }
class C{  public void validateAttributeQuery(HttpServletRequest request,HttpServletResponse response,AttributeQuery attrQuery,String attrAuthorityEntityID,String realm) throws SAML2Exception {  AttributeQueryUtil.verifyAttrQuerySignature(attrQuery,attrAuthorityEntityID,realm);  ;}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof MBeanNotificationInfo))   return false;  MBeanNotificationInfo p=(MBeanNotificationInfo)o;  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getDescription(),getDescription()) && Objects.equals(p.getDescriptor(),getDescriptor())&& Arrays.equals(p.fastGetNotifTypes(),fastGetNotifTypes()));}  }
class C{  public static Foo createEntity(EntityManager em){  Foo foo=new Foo();  foo.setValue(DEFAULT_VALUE);  return foo;}  }
class C{  static public PrintWriter log(Throwable xcpt,PrintWriter out){  out.println("-----------");  out.println(xcpt.toString());  out.println("Stack Trace:");  out.print(getStackTrace(xcpt));  out.println("-----------");  out.flush();  return out;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentnodename.class,args);}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public void tellNew(){  fireSessionEvent(Session.SESSION_CREATED_EVENT,null);  Context context=manager.getContext();  Object listeners[]=context.getApplicationLifecycleListeners();  if (listeners != null && listeners.length > 0) {    HttpSessionEvent event=new HttpSessionEvent(getSession());    for (int i=0; i < listeners.length; i++) {      if (!(listeners[i] instanceof HttpSessionListener))       continue;      HttpSessionListener listener=(HttpSessionListener)listeners[i];      try {        context.fireContainerEvent("beforeSessionCreated",listener);        listener.sessionCreated(event);        context.fireContainerEvent("afterSessionCreated",listener);      } catch (      Throwable t) {        ExceptionUtils.handleThrowable(t);        try {          context.fireContainerEvent("afterSessionCreated",listener);        } catch (        Exception e) {        }        manager.getContext().getLogger().error(sm.getString("standardSession.sessionEvent"),t);      }    }  }}  }
class C{  public void testPosNegFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=-1;  byte rBytes[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-95};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public BasicAttribute(String id,Object value){  this(id,value,false);}  }
class C{  public synchronized void cancelForNode(BasicNode node){  if (node == null) {    throw new IllegalArgumentException("null argument");  }  for (int i=waitingQueue.size() - 1; i >= 0; i--) {    AbstractNodeTask task=waitingQueue.get(i);    if (task.getNode() == node) {      waitingQueue.remove(i);    }  }  AbstractNodeTask task=workingList.get(node);  if (task != null) {    cancelList.put(node,node);    task.cancel();  }  notify();}  }
class C{  public void handleTblRequestHandlerListHrefEditActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SCSAML2SOAPBindingRequestHandlerListEditViewBean vb=(SCSAML2SOAPBindingRequestHandlerListEditViewBean)getViewBean(SCSAML2SOAPBindingRequestHandlerListEditViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.populateValues((String)getDisplayFieldValue(TBL_REQUEST_HANDLER_LIST_HREF_EDIT_ACTION));    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public Iterator<E> iterator(){  return map.keySet().iterator();}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  if (extns == null) {    return false;  }  extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT);  extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR);  return !extns.isEmpty();}  }
class C{  public void draw(Graphics p_graphics,GdiContext p_graphics_context,double p_intensity){  if (expansion_room_arr == null)   return;  for (  ExpandRoomObstacle curr_room : expansion_room_arr) {    if (curr_room == null)     continue;    curr_room.draw(p_graphics,p_graphics_context,p_intensity);  }}  }
class C{  String[] toCommandLineArgumentsStatus(String configurationFile,ConnectionParameters connParams){  return new String[]{"status","--no-prompt","--configFile",configurationFile,"--hostname",connParams.getHostName(),"--port",s(connParams.getAdminPort()),"--adminUID",connParams.getAdminUid(),"--adminPassword",connParams.getAdminPassword(),"--script-friendly","--noPropertiesFile"};}  }
class C{  private void parseContents(List contents) throws SAMLException {  int length=0;  int i=0;  if ((contents == null) || ((length=contents.size()) == 0)) {    SAMLUtils.debug.message("Request: empty content.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));  }  for (i=0; i < length; i++) {    Object temp=contents.get(i);    if (temp instanceof AuthenticationQuery) {      if ((contentType != NOT_SUPPORTED) || (i != (length - 1))) {        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("Request: should contain only" + " one AuthenticationQuery.");        }        throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));      }      contentType=AUTHENTICATION_QUERY;      query=(AuthenticationQuery)temp;    } else     if (temp instanceof AuthorizationDecisionQuery) {      if ((contentType != NOT_SUPPORTED) || (i != (length - 1))) {        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("Request: should contain only" + " one AuthorizationDecisionQuery.");        }        throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));      }      contentType=AUTHORIZATION_DECISION_QUERY;      query=(AuthorizationDecisionQuery)temp;    } else     if (temp instanceof AttributeQuery) {      if ((contentType != NOT_SUPPORTED) || (i != (length - 1))) {        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("Request: should contain only" + " one AttributeQuery.");        }        throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));      }      contentType=ATTRIBUTE_QUERY;      query=(AttributeQuery)temp;    } else     if (temp instanceof AssertionIDReference) {      if ((contentType != NOT_SUPPORTED) && (contentType != ASSERTION_ID_REFERENCE)) {        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("Request: should contain" + " one or more AssertionIDReference.");        }        throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));      }      contentType=ASSERTION_ID_REFERENCE;      if (assertionIDRefs == Collections.EMPTY_LIST) {        assertionIDRefs=new ArrayList();      }      assertionIDRefs.add((AssertionIDReference)temp);    } else     if (temp instanceof AssertionArtifact) {      if ((contentType != NOT_SUPPORTED) && (contentType != ASSERTION_ARTIFACT)) {        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("Request: should contain " + " one or more AssertionArtifact.");        }        throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));      }      contentType=ASSERTION_ARTIFACT;      if (artifacts == Collections.EMPTY_LIST) {        artifacts=new ArrayList();      }      artifacts.add((AssertionArtifact)temp);    } else {      SAMLUtils.debug.message("Request: wrong input.");      throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));    }  }}  }
class C{  public PdfCanvas beginVariableText(){  return beginMarkedContent(PdfName.Tx);}  }
class C{  void clearSubjectResultCache(String tokenIdString) throws PolicyException {  if (DEBUG.messageEnabled()) {    DEBUG.message("PolicyCache.clearSubjectResultCache(tokenIdString): " + " clearing cached subject evaluation result for " + " tokenId XXXXX in each cached Policy");  }  Set policyNames=new HashSet();  policyNames.addAll(policies.keySet());  for (Iterator iter=policyNames.iterator(); iter.hasNext(); ) {    Policy policy=(Policy)policies.get(iter.next());    if (policy != null) {      policy.clearSubjectResultCache(tokenIdString);    }  }}  }
class C{  @Override public void forward(ServletRequest request,ServletResponse response) throws ServletException, IOException {  if (Globals.IS_SECURITY_ENABLED) {    try {      PrivilegedForward dp=new PrivilegedForward(request,response);      AccessController.doPrivileged(dp);    } catch (    PrivilegedActionException pe) {      Exception e=pe.getException();      if (e instanceof ServletException)       throw (ServletException)e;      throw (IOException)e;    }  } else {    doForward(request,response);  }}  }
class C{  public static <A>ImmutableList<A> of(final A x1,final A x2){  return new ImmutableList<>(x1,of(x2));}  }
class C{  public void invoke(Context context,Map<String,Object> syncFailure,Exception failureCause) throws SyncHandlerException {  final String resourceContainer=new StringBuilder("repo/synchronisation/deadLetterQueue/").append(syncFailure.get("systemIdentifier")).toString();  final String resourceId=syncFailure.get("token").toString();  try {    Map<String,Object> syncDetail=new HashMap<String,Object>(syncFailure);    syncDetail.put("failureCause",failureCause.toString());    CreateRequest request=Requests.newCreateRequest(resourceContainer,resourceId,new JsonValue(syncDetail));    connectionFactory.getConnection().create(context,request);    logger.info("{} saved to dead letter queue",syncFailure.get("uid"));  } catch (  ResourceException e) {    throw new SyncHandlerException("Failed reading/writing " + resourceContainer + "/"+ resourceId,e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.replaceData(40,3,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public void incrementTotalReads(){  totalReads++;  totalRequests++;}  }
class C{  public XMLReaderAdapter(XMLReader xmlReader){  setup(xmlReader);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RealmElement createRealmElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RealmElementImpl();}  }
class C{  public CertPinManager(String path,TrustedCertificateStore store) throws PinManagerException {  if (path == null) {    throw new NullPointerException("path == null");  }  pinFile=new File(path);  certStore=store;  rebuild();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrclonenode1.class,args);}  }
class C{  public void paintSplitPaneDividerForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintForeground(context,g,x,y,w,h,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entElement;  Node entElementContent;  int nodeType;  Node entReference;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=genderNode.getFirstChild();  assertNotNull("entReferenceNotNull",entReference);  nodeType=(int)entReference.getNodeType();  if (equals(3,nodeType)) {    entReference=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entReference);  }  entElement=entReference.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementContent=entElement.getFirstChild();  assertNotNull("entElementContentNotNull",entElementContent);{    boolean success=false;    try {      ((CharacterData)entElementContent).deleteData(1,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  try {    Map<String,Set<String>> configurationState=(Map<String,Set<String>>)getAttributeSettings();    STSInstanceModel model=(STSInstanceModel)getModel();    STSInstanceModelResponse validationResponse=model.validateConfigurationState(stsType,configurationState);    if (validationResponse.isSuccessful()) {      final String currentRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);      try {        STSInstanceModelResponse creationResponse=model.createInstance(stsType,configurationState,currentRealm);        if (creationResponse.isSuccessful()) {          setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",creationResponse.getMessage());          forwardToAMViewBean();        } else {          setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",creationResponse.getMessage());        }      } catch (      AMConsoleException e) {        throw new ModelControlException(e);      }    } else {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",validationResponse.getMessage());    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public String valueToString(Object value) throws ParseException {  if (value == null) {    return "";  }  return value.toString();}  }
class C{  private void initAuthConfigGlobalSettings() throws Exception {  ServiceSchemaManager scm=new ServiceSchemaManager(ISAuthConstants.AUTHCONFIG_SERVICE_NAME,ssoAuthSession);  updateAuthConfigGlobals(scm);  new AuthConfigMonitor(scm);}  }
class C{  public TreeModelEvent(Object source,TreePath path,int[] childIndices,Object[] children){  super(source);  this.path=path;  this.childIndices=childIndices;  this.children=children;}  }
class C{  private JsonValue renderRPT(UmaUris umaUris,RequestingPartyToken token) throws ServerException {  JsonValue permissions=new JsonValue(array());  for (  Permission p : token.getPermissions()) {    JsonValue permission=json(object(field(UmaConstants.RESOURCE_SET_ID,p.getResourceSetId()),field(UmaConstants.SCOPES,newList(p.getScopes()))));    if (p.getExpiryTime() != null) {      permission.add(OAuth2Constants.JWTTokenParams.EXP,p.getExpiryTime());    }    permissions.add(permission.getObject());  }  return json(object(field(ACTIVE,true),field(OAuth2Constants.JWTTokenParams.EXP,token.getExpiryTime() / 1000),field(OAuth2Constants.JWTTokenParams.ISS,umaUris.getIssuer()),field(TOKEN_TYPE,RPT_TYPE),field(UmaConstants.Introspection.PERMISSIONS,permissions.getObject())));}  }
class C{  protected UndoableEdit editToBeUndone(){  int i=indexOfNextAdd;  while (i > 0) {    UndoableEdit edit=edits.elementAt(--i);    if (edit.isSignificant()) {      return edit;    }  }  return null;}  }
class C{  public String toString(){  LinkedListNode node=head.next;  StringBuilder buf=new StringBuilder();  while (node != head) {    buf.append(node.toString()).append(", ");    node=node.next;  }  return buf.toString();}  }
class C{  public static String toKebabCase(final String value){  return toDecamelize(value,"-");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node insertedNode;  String childName;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(3);  newChild=doc.createElement("br");  insertedNode=employeeNode.insertBefore(newChild,refChild);  childName=insertedNode.getNodeName();  assertEqualsAutoCase("element","nodeName","br",childName);}  }
class C{  public com.sun.identity.saml2.jaxb.metadataattr.EntityAttributesType createEntityAttributesType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadataattr.impl.EntityAttributesTypeImpl();}  }
class C{  public boolean equals(Object o){  if (o instanceof Conditions) {    Conditions s=(Conditions)o;    Iterator iter=conditions.entrySet().iterator();    while (iter.hasNext()) {      Object ss=((Map.Entry)iter.next()).getValue();      if (!s.conditions.containsValue(ss)) {        return (false);      }    }    return (true);  }  return (false);}  }
class C{  public com.sun.identity.saml2.jaxb.metadataattr.EntityAttributesElement createEntityAttributesElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadataattr.impl.EntityAttributesElementImpl();}  }
class C{  protected void isCDATASectionWellFormed(CDATASection node){  Character invalidChar=isWFXMLChar(node.getData());  if (invalidChar != null) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_CDATA,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));    }  }}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  int length=getParamElemCount();  for (int i=0; i < length; i++) {    ElemWithParam ewp=getParamElem(i);    ewp.endCompose(sroot);  }  super.endCompose(sroot);}  }
class C{  public static Map<String,String> objectValueToStringValueMap(Map<String,Object> objectMap){  if (objectMap == null) {    return null;  }  Map<String,String> stringMap=new HashMap<String,String>(objectMap.size());  for (  Map.Entry<String,Object> entry : objectMap.entrySet()) {    stringMap.put(entry.getKey(),entry.getValue().toString());  }  return stringMap;}  }
class C{  public boolean isBound(){  return isBound;}  }
class C{  public void poll(final TcpSocketStatisticsHandler handler){  this.statisticsHandler=handler;  try {    fileLoader.load();    final ByteBuffer buffer=fileLoader.getBuffer();    lineParser.reset();    lineParser.handleToken(buffer,buffer.position(),buffer.limit());  }  finally {    this.statisticsHandler=null;  }  monitoredSockets.purgeEntriesOlderThan(updateCount);  updateCount++;}  }
class C{  public ProfilerThread(long sampleInterval){  super("Directory Server Profiler Thread");  this.sampleInterval=sampleInterval;  stackTraces=new HashMap<>();  numIntervals=0;  stopProfiling=false;  captureStartTime=-1;  captureStopTime=-1;  captureThread=null;}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public SdpFactoryException(){  super();}  }
class C{  static boolean isTextXml(String mime){  return mime != null && (mime.equals("text/xml") || mime.equals("text/xml-external-parsed-entity") || mime.startsWith("text/") && mime.endsWith("+xml"));}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public void printValue(PrintWriter writer,int indent,String name,Object value){  if (value instanceof InetAddress) {    value=((InetAddress)value).getHostAddress();  }  if (!(value instanceof String)) {    value=value.toString();  }  String strValue=convertStr((String)value);  pos=pos + name.length() + strValue.length();  if (pos > 60) {    writer.println();    printIndent(writer,indent + 4);  } else {    writer.print(' ');  }  writer.print(name);  writer.print("=\"");  writer.print(strValue);  writer.print("\"");}  }
class C{  static void checkForCharacter(String name,char c) throws InvalidNameException {  if (name.indexOf(c) != -1) {    Character objs[]={new Character(c)};    throw (new InvalidNameException(ResBundleUtils.rbName,"invalid_char_in_name",objs,name,PolicyException.POLICY));  }}  }
class C{  @Inject public UserPushDeviceProfileManager(final @Nonnull PushDevicesDao devicesDao,final @Nonnull @Named("amAuthPush") Debug debug,final @Nonnull SecureRandom secureRandom,final @Nonnull DeviceJsonUtils<PushDeviceSettings> jsonUtils){  Reject.ifNull(devicesDao,debug,secureRandom);  this.devicesDao=devicesDao;  this.debug=debug;  this.secureRandom=secureRandom;  this.jsonUtils=jsonUtils;}  }
class C{  Shape adjustAllocation(Shape a){  if (a != null) {    Rectangle bounds=a.getBounds();    int vspan=(int)getPreferredSpan(Y_AXIS);    int hspan=(int)getPreferredSpan(X_AXIS);    if (bounds.height != vspan) {      int slop=bounds.height - vspan;      bounds.y+=slop / 2;      bounds.height-=slop;    }    Component c=getContainer();    if (c instanceof JTextField) {      JTextField field=(JTextField)c;      BoundedRangeModel vis=field.getHorizontalVisibility();      int max=Math.max(hspan,bounds.width);      int value=vis.getValue();      int extent=Math.min(max,bounds.width - 1);      if ((value + extent) > max) {        value=max - extent;      }      vis.setRangeProperties(value,extent,vis.getMinimum(),max,false);      if (hspan < bounds.width) {        int slop=bounds.width - 1 - hspan;        int align=((JTextField)c).getHorizontalAlignment();        if (isLeftToRight(c)) {          if (align == LEADING) {            align=LEFT;          } else           if (align == TRAILING) {            align=RIGHT;          }        } else {          if (align == LEADING) {            align=RIGHT;          } else           if (align == TRAILING) {            align=LEFT;          }        }switch (align) {case SwingConstants.CENTER:          bounds.x+=slop / 2;        bounds.width-=slop;      break;case SwingConstants.RIGHT:    bounds.x+=slop;  bounds.width-=slop;break;}} else {bounds.width=hspan;bounds.x-=vis.getValue();}}return bounds;}return null;}  }
class C{  public SessionPropertyOpViewBeanBase(String name){  super(name);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public boolean verifyWSSSignature(org.w3c.dom.Document document,java.security.Key key,String certAlias,String encryptAlias) throws XMLSignatureException {  return sp.verifyWSSSignature(document,key,certAlias,encryptAlias);}  }
class C{  public void from_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("from_any",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.from_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  static String calculateResponse(String algorithm,String hashUserNameRealmPasswd,String nonce_value,String nc_value,String cnonce_value,String method,String digest_uri_value,String entity_body,String qop_value,StackLogger stackLogger){  if (stackLogger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    stackLogger.logDebug("trying to authenticate using : " + algorithm + ", "+ hashUserNameRealmPasswd+ ", "+ nonce_value+ ", "+ nc_value+ ", "+ cnonce_value+ ", "+ method+ ", "+ digest_uri_value+ ", "+ entity_body+ ", "+ qop_value);  }  if (hashUserNameRealmPasswd == null || method == null || digest_uri_value == null || nonce_value == null)   throw new NullPointerException("Null parameter to MessageDigestAlgorithm.calculateResponse()");  if (cnonce_value == null || cnonce_value.length() == 0)   throw new NullPointerException("cnonce_value may not be absent for MD5-Sess algorithm.");  String A2=null;  if (qop_value == null || qop_value.trim().length() == 0 || qop_value.trim().equalsIgnoreCase("auth")) {    A2=method + ":" + digest_uri_value;  } else {    if (entity_body == null)     entity_body="";    A2=method + ":" + digest_uri_value+ ":"+ H(entity_body);  }  String request_digest=null;  if (cnonce_value != null && qop_value != null && nc_value != null && (qop_value.equalsIgnoreCase("auth") || qop_value.equalsIgnoreCase("auth-int"))) {    request_digest=KD(hashUserNameRealmPasswd,nonce_value + ":" + nc_value+ ":"+ cnonce_value+ ":"+ qop_value+ ":"+ H(A2));  } else {    request_digest=KD(hashUserNameRealmPasswd,nonce_value + ":" + H(A2));  }  return request_digest;}  }
class C{  public void updateClientData() throws ClientException {}  }
class C{  public void deleteConfiguration(String realm,String configName,Set attributes) throws ConfigurationException {  if (debug.messageEnabled()) {    debug.message("ConfigurationInstanceImpl.deleteConfiguration: " + "componentName = " + componentName + ", realm = "+ realm+ ", configName = "+ configName+ ", attributes = "+ attributes);  }  boolean removeConfig=(attributes == null) || (attributes.isEmpty());  try {    if (hasOrgSchema) {      ServiceConfig sc=null;      if ((configName == null) || (configName.length() == 0)) {        if (removeConfig) {          scm.removeOrganizationConfiguration(realm,null);        } else {          sc=scm.getOrganizationConfig(realm,null);          if (sc != null) {            sc.removeAttributes(attributes);          }        }      } else {        if (subConfigId == null) {          if (debug.messageEnabled()) {            debug.message("ConfigurationInstanceImpl." + "deleteConfiguration: sub configuraton not " + "supported.");          }          String[] data={componentName};          throw new ConfigurationException(RESOURCE_BUNDLE,"noSubConfig",data);        }        sc=scm.getOrganizationConfig(realm,null);        if (sc != null) {          if (removeConfig) {            sc.removeSubConfig(configName);          } else {            sc=sc.getSubConfig(configName);            if (sc != null) {              sc.removeAttributes(attributes);            }          }        }      }    } else {      if (debug.messageEnabled()) {        debug.message("ConfigurationInstanceImpl." + "deleteConfiguration: configuraton deletion not " + "supported.");      }      String[] data={componentName};      throw new ConfigurationException(RESOURCE_BUNDLE,"noConfigDeletion",data);    }  } catch (  SMSException smsex) {    debug.error("ConfigurationInstanceImpl.deleteConfiguration:",smsex);    String[] data={componentName,realm};    throw new ConfigurationException(RESOURCE_BUNDLE,"failedDeleteConfig",data);  }catch (  SSOException ssoex) {    debug.error("ConfigurationInstanceImpl.deleteConfiguration:",ssoex);    String[] data={componentName,realm};    throw new ConfigurationException(RESOURCE_BUNDLE,"failedDeleteConfig",data);  }}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec04(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public void test_Provider_getServices() throws Exception {  Map<String,Set<String>> remaining=new HashMap<String,Set<String>>(StandardNames.PROVIDER_ALGORITHMS);  for (  Entry<String,Set<String>> entry : remaining.entrySet()) {    entry.setValue(new HashSet<String>(entry.getValue()));  }  List<String> extra=new ArrayList();  List<String> missing=new ArrayList();  Provider[] providers=Security.getProviders();  for (  Provider provider : providers) {    String providerName=provider.getName();    if (StandardNames.IS_RI && providerName.equals("BC")) {      continue;    }    Set<Provider.Service> services=provider.getServices();    assertNotNull(services);    assertFalse(services.isEmpty());    for (    Provider.Service service : services) {      String type=service.getType();      String algorithm=service.getAlgorithm().toUpperCase();      String className=service.getClassName();      if (false) {        System.out.println(providerName + " " + type+ " "+ algorithm+ " "+ className);      }      Set<String> algorithms=remaining.get(type);      if (algorithms == null || !algorithms.remove(algorithm)) {        if (!(StandardNames.PROVIDER_ALGORITHMS.containsKey(type) && StandardNames.PROVIDER_ALGORITHMS.get(type).contains(algorithm))) {          extra.add("Unknown " + type + " "+ algorithm+ " "+ providerName+ "\n");        }      }      if (algorithms != null && algorithms.isEmpty()) {        remaining.remove(type);      }      try {        assertNotNull(Class.forName(className,true,provider.getClass().getClassLoader()));      } catch (      ClassNotFoundException e) {        if (!className.equals("sun.security.pkcs11.P11MAC")) {          missing.add(className);        }      }    }  }  Collections.sort(extra);  assertEquals("Extra algorithms",Collections.EMPTY_LIST,extra);  assertEquals("Missing algorithms",Collections.EMPTY_MAP,remaining);  Collections.sort(missing);  assertEquals("Missing classes",Collections.EMPTY_LIST,missing);}  }
class C{  protected void handleOnUploadCompleteCallFuncResponse(final OutputStream out,final String errorMsg,final String path) throws IOException {  this.ckFinderFuncNum=this.ckFinderFuncNum.replaceAll("[^\\d]","");  out.write(("window.parent.CKFinder.tools.callFunction(" + this.ckFinderFuncNum + ", '"+ path+ FileUtils.backupWithBackSlash(this.newFileName,"'")+ "', '"+ errorMsg+ "');").getBytes("UTF-8"));}  }
class C{  public FrameBodyXSOT(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfStream makeIndirect(PdfDocument document){  return (PdfStream)super.makeIndirect(document);}  }
class C{  public void updateUI(){  setUI((SpinnerUI)UIManager.getUI(this));  invalidate();}  }
class C{  private synchronized void enumerate(Hashtable<String,Object> h){  if (defaults != null) {    defaults.enumerate(h);  }  for (Enumeration<?> e=keys(); e.hasMoreElements(); ) {    String key=(String)e.nextElement();    h.put(key,get(key));  }}  }
class C{  boolean hasBaseline(int row){  return (hasBaseline && baselineType[row] != 0);}  }
class C{  private void send(){  vertx.eventBus().publish(GeneratorConfigVerticle.ADDRESS,toJson());}  }
class C{  public Barcode39(PdfDocument document){  super(document);  try {    x=0.8f;    n=2;    font=PdfFontFactory.createFont(FontConstants.HELVETICA,PdfEncodings.WINANSI);    size=8;    baseline=size;    barHeight=size * 3;    generateChecksum=false;    checksumText=false;    startStopText=true;    extended=false;  } catch (  IOException e) {    throw new PdfException(e);  }}  }
class C{  void notify(final LocalizableMessage message,final int msgType) throws ClientException {  try {    handler.handle(new Callback[]{new FormattedNotificationCallback(message,msgType)});  } catch (  final Exception e) {    throw new ClientException(ReturnCode.ERROR_UNEXPECTED,ERR_UPGRADE_DISPLAY_NOTIFICATION_ERROR.get(e.getMessage()));  }}  }
class C{  public AppLauncher env(String name,String value){  if (name == null) {    throw new NullPointerException("name");  }  if (value == null) {    throw new NullPointerException("value");  }  this.env.put(name,value);  return this;}  }
class C{  private static EnvironmentConfig defaultConfig(){  EnvironmentConfig envConfig=new EnvironmentConfig();  envConfig.setTransactional(true);  envConfig.setAllowCreate(true);  envConfig.setConfigParam(CLEANER_EXPUNGE,"true");  envConfig.setConfigParam(CHECKPOINTER_HIGH_PRIORITY,"true");  if (Runtime.getRuntime().maxMemory() > 256 * 1024 * 1024) {    envConfig.setConfigParam(CLEANER_LOOK_AHEAD_CACHE_SIZE,String.valueOf(2 * 1024 * 1024));    envConfig.setConfigParam(LOG_ITERATOR_READ_SIZE,String.valueOf(2 * 1024 * 1024));    envConfig.setConfigParam(LOG_FAULT_READ_SIZE,String.valueOf(4 * 1024));  }  envConfig.setLockTimeout(0,TimeUnit.MICROSECONDS);  return envConfig;}  }
class C{  private void initAuthConfig(){  if (options != null) {    debug.message("MSISDN: getting attributes.");    gatewayList=(Set)options.get(TRUSTED_GATEWAY_LIST);    if ((gatewayList != null) && (!gatewayList.isEmpty()) && (gatewayList.contains("none"))) {      if (debug.messageEnabled()) {        debug.message("No gateways trusted ");      }      errorMsgKey="MSISDNInvalidGateway";    } else {      parameterNameList=(Set)options.get(MSISDN_PARAMETER_NAME);      searchHeaderList=(Set)options.get(MSISDN_HEADER_SEARCH);      if ((searchHeaderList == null) || (searchHeaderList.isEmpty())) {        searchAllHeaders=true;        if (debug.messageEnabled()) {          debug.message("searchAllHeaders :" + searchAllHeaders);        }      }      setMSISDNAuthLevel();    }  } else {    debug.error("options is null");    errorMsgKey="MSISDNValidateEx";  }  return;}  }
class C{  private void init(String publicId,String systemId,int lineNumber,int columnNumber){  this.publicId=publicId;  this.systemId=systemId;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;}  }
class C{  @Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(Foo foo){  return fooPersistence.remove(foo);}  }
class C{  @Delete public Representation deleteResourceSet() throws NotFoundException, ServerException {  if (!isConditionalRequest()) {    throw new ResourceException(512,"precondition_failed","Require If-Match header to delete Resource Set",null);  }  ResourceSetStore store=providerSettingsFactory.get(requestFactory.create(getRequest())).getResourceSetStore();  ResourceSetDescription resourceSetDescription=store.read(getResourceSetId(),getResourceOwnerId());  OAuth2Request oAuth2Request=requestFactory.create(getRequest());  for (  ResourceSetRegistrationHook hook : hooks) {    hook.resourceSetDeleted(oAuth2Request.<String>getParameter("realm"),resourceSetDescription);  }  labelRegistration.updateLabelsForDeletedResourceSet(resourceSetDescription);  store.delete(getResourceSetId(),getResourceOwnerId());  return createEmptyResponse();}  }
class C{  public static Foo[] findByUuid_C_PrevAndNext(long fooId,java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_PrevAndNext(fooId,uuid,companyId,orderByComparator);}  }
class C{  public BRView(Element elem){  super(elem);}  }
class C{  public boolean isBound(){  return isBound;}  }
class C{  public StackTraceMonitorTestCase() throws Exception {  super("cn=JVM Stack Trace,cn=Monitor Providers,cn=config");}  }
class C{  public void addNotification(NotificationInfo notification){  mBeanInfoLock.writeLock().lock();  try {    NotificationInfo results[]=new NotificationInfo[notifications.length + 1];    System.arraycopy(notifications,0,results,0,notifications.length);    results[notifications.length]=notification;    notifications=results;    this.info=null;  }  finally {    mBeanInfoLock.writeLock().unlock();  }}  }
class C{  public static int parseInt(String string) throws NumberFormatException {  return parseInt(string,10);}  }
class C{  private void verifyInitialize(LoginModule... modules){  for (  LoginModule module : modules) {    verify(module).initialize(same(subject),same(handler),anyMap(),eq(optionCache.get(module)));  }}  }
class C{  @Inject public NotificationsWebSocket(NotificationBroker broker){  Reject.ifNull(broker,"Broker must not be null");  this.broker=broker;}  }
class C{  public boolean isMember(User user) throws UMSException {  DN userdn=DN.valueOf(user.getDN());  DN pcdn=DN.valueOf(this.getDN());  if (userdn.parent().equals(pcdn)) {    return true;  } else {    return false;  }}  }
class C{  protected void layout(int width,int height){  if (!isVisible()) {    return;  }  super.layout(width,height);}  }
class C{  public void testGetFeatureDescriptors01(){  BeanNameELResolver resolver=createBeanNameELResolver();  ELContext context=new StandardELContext(ELManager.getExpressionFactory());  Object result=resolver.getFeatureDescriptors(context,null);  Assert.assertNull(result);  Assert.assertFalse(context.isPropertyResolved());}  }
class C{  public static AnalyzerResponse containsAlertAfterModifiedMessage(TlsContext tlsContext){  int position=getModifiedMessagePosition(tlsContext);  if (position == -1) {    return AnalyzerResponse.NO_MODIFICATION;  } else {    ProtocolMessage pm=getNextProtocolMessageFromPeer(tlsContext,position);    if (pm != null && pm.getProtocolMessageType() == ProtocolMessageType.ALERT) {      return AnalyzerResponse.ALERT;    } else {      return AnalyzerResponse.NO_ALERT;    }  }}  }
class C{  public static boolean equals(Object[] array1,Object[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    Object e1=array1[i], e2=array2[i];    if (!(e1 == null ? e2 == null : e1.equals(e2))) {      return false;    }  }  return true;}  }
class C{  public void accept(final MethodVisitor mv){  int i, j, n;  n=parameters == null ? 0 : parameters.size();  for (i=0; i < n; i++) {    ParameterNode parameter=parameters.get(i);    mv.visitParameter(parameter.name,parameter.access);  }  if (annotationDefault != null) {    AnnotationVisitor av=mv.visitAnnotationDefault();    AnnotationNode.accept(av,null,annotationDefault);    if (av != null) {      av.visitEnd();    }  }  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=visibleParameterAnnotations == null ? 0 : visibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=visibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,true));    }  }  n=invisibleParameterAnnotations == null ? 0 : invisibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=invisibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,false));    }  }  if (visited) {    instructions.resetLabels();  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    mv.visitAttribute(attrs.get(i));  }  if (instructions.size() > 0) {    mv.visitCode();    n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (i=0; i < n; ++i) {      tryCatchBlocks.get(i).updateIndex(i);      tryCatchBlocks.get(i).accept(mv);    }    instructions.accept(mv);    n=localVariables == null ? 0 : localVariables.size();    for (i=0; i < n; ++i) {      localVariables.get(i).accept(mv);    }    n=visibleLocalVariableAnnotations == null ? 0 : visibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      visibleLocalVariableAnnotations.get(i).accept(mv,true);    }    n=invisibleLocalVariableAnnotations == null ? 0 : invisibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      invisibleLocalVariableAnnotations.get(i).accept(mv,false);    }    mv.visitMaxs(maxStack,maxLocals);    visited=true;  }  mv.visitEnd();}  }
class C{  @Override public void write(String str,int st,int end){}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  initAuthConfig();  X509Certificate[] allCerts=null;  try {    HttpServletRequest servletRequest=getHttpServletRequest();    if (servletRequest != null) {      allCerts=(X509Certificate[])servletRequest.getAttribute("javax.servlet.request.X509Certificate");      if (allCerts == null || allCerts.length == 0) {        debug.message("Certificate: checking for cert passed in the URL.");        if (!portal_gw_cert_auth_enabled) {          debug.error("Certificate: cert passed " + "in URL not enabled for this client");          throw new AuthLoginException(amAuthCert,"noURLCertAuth",null);        }        thecert=getPortalStyleCert(servletRequest);        allCerts=new X509Certificate[]{thecert};      } else {        if (portal_gw_cert_auth_enabled && portal_gw_cert_preferred) {          thecert=getPortalStyleCert(servletRequest);          allCerts=new X509Certificate[]{thecert};        } else {          if (debug.messageEnabled()) {            debug.message("Certificate: got all certs from " + "HttpServletRequest = {}",allCerts.length);          }          thecert=allCerts[0];        }      }    } else {      thecert=sendCallback();    }    if (thecert == null) {      debug.message("Certificate: no cert passed in.");      throw new AuthLoginException(amAuthCert,"noCert",null);    }    getTokenFromCert(thecert);    storeUsernamePasswd(userTokenId,null);    if (debug.messageEnabled()) {      debug.message("in Certificate. userTokenId=" + userTokenId + " from getTokenFromCert");    }  } catch (  AuthLoginException e) {    setFailureID(userTokenId);    debug.error("Certificate:  exiting validate with exception",e);    throw new AuthLoginException(amAuthCert,"noCert",null);  }  if (debug.messageEnabled()) {    debug.message("Got client cert =\n" + thecert.toString());  }  if (amAuthCert_chkCertInLDAP.equalsIgnoreCase("false") && amAuthCert_chkCRL.equalsIgnoreCase("false") && !ocspEnabled) {    return ISAuthConstants.LOGIN_SUCCEED;  }  if (ldapParam == null) {    setLdapStoreParam();  }  if (amAuthCert_chkCertInLDAP.equalsIgnoreCase("true")) {    X509Certificate ldapcert=AMCertStore.getRegisteredCertificate(ldapParam,thecert,amAuthCert_chkAttrCertInLDAP);    if (ldapcert == null) {      debug.error("X509Certificate: getRegCertificate is null");      setFailureID(userTokenId);      throw new AuthLoginException(amAuthCert,"CertNoReg",null);    }  }  int ret=doJCERevocationValidation(allCerts);  if (ret != ISAuthConstants.LOGIN_SUCCEED) {    debug.error("X509Certificate:CRL / OCSP verify failed.");    setFailureID(userTokenId);    throw new AuthLoginException(amAuthCert,"CertVerifyFailed",null);  }  return ISAuthConstants.LOGIN_SUCCEED;}  }
class C{  public CtsCRUDOperationsEntryImpl(SnmpMib myMib,Debug debug){  super(myMib);  this.debug=debug;  this.monitoringStore=InjectorHolder.getInstance(CTSOperationsMonitoringStore.class);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public java.io.Serializable read_value(java.io.Serializable value){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  public ServerEditUMAViewBean(){  super("ServerEditUMA",DEFAULT_DISPLAY_URL);}  }
class C{  public JKDefaultTableModel(final int rowCount,final int columnCount){  this(newVector(columnCount),rowCount);}  }
class C{  private Promise<ActionResponse,ResourceException> internalHandleAction(String tokenId,Context context,ActionRequest request){  final String action=request.getAction();  final ActionHandler actionHandler=actionHandlers.get(action);  if (actionHandler != null) {    return actionHandler.handle(tokenId,context,request);  } else {    String message=String.format("Action %s not implemented for this resource",action);    NotSupportedException e=new NotSupportedException(message);    if (LOGGER.messageEnabled()) {      LOGGER.message("SessionResource.actionInstance :: " + message,e);    }    return e.asPromise();  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void i(Object str){  if (logFlag) {    if (logLevel <= android.util.Log.INFO) {      String name=getFunctionName();      if (name != null) {        android.util.Log.i(tag,name + " - " + str);      } else {        android.util.Log.i(tag,str.toString());      }    }  }}  }
class C{  XSLTAttributeDef(String namespace,String name,boolean required,boolean supportsAVT,boolean prefixedQNameValAllowed,int errorType,String k1,int v1,String k2,int v2,String k3,int v3,String k4,int v4){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=prefixedQNameValAllowed ? this.T_ENUM_OR_PQNAME : this.T_ENUM;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  m_enums=new StringToIntTable(4);  m_enums.put(k1,v1);  m_enums.put(k2,v2);  m_enums.put(k3,v3);  m_enums.put(k4,v4);}  }
class C{  public int doIDPSingleLogout(Set userSession,String userID,HttpServletRequest request,HttpServletResponse response,boolean isSOAPInitiated,boolean isIDPInitiated,String protocol,String realm,String idpEntityID,String spEntityID,String relayState,String singleLogoutRequestXML,String singleLogoutResponseXML,int currentStatus) throws Exception {  SingleLogoutManager.getInstance().debug.message("WSFederationSingleLogoutHandler.doIDPSingleLogout : start");  if (!isSessionUsedInWSFed(userSession,userID)) {    debug.message("WSFedSingleLogoutHandler.doIDPSLO : no action");    return SingleLogoutManager.LOGOUT_NO_ACTION_STATUS;  }  if (isSOAPInitiated) {    debug.message("WSFedSLOHandler.doIDPSLO : SOAP initiated SLO");    return SingleLogoutManager.LOGOUT_FAILED_STATUS;  } else {    debug.message("WSFedSLOHandler.doIDPSLO : HTTP initiated SLO");    String metaAlias=findIDPMetaAlias(idpEntityID,spEntityID,realm,protocol);    String redirectURL=MultiProtocolUtils.geServerBaseURL(request) + "/WSFederationServlet/metaAlias" + metaAlias+ "?"+ WSFederationConstants.WA+ "="+ WSFederationConstants.WSIGNOUT10+ "&"+ WSFederationConstants.WREPLY+ "="+ URLEncoder.encode(relayState,"UTF-8");    if (debug.messageEnabled()) {      debug.message("WSFedSLOHandler.doIDPSLO: HTTPinit, redirect to " + redirectURL);    }    response.sendRedirect(redirectURL);    return SingleLogoutManager.LOGOUT_REDIRECTED_STATUS;  }}  }
class C{  protected void addIfdData(IfdData data){  mIfdDatas[data.getId()]=data;}  }
class C{  public static Remote toStub(Remote obj) throws NoSuchObjectException {  if (obj instanceof RemoteStub || (obj != null && Proxy.isProxyClass(obj.getClass()) && Proxy.getInvocationHandler(obj) instanceof RemoteObjectInvocationHandler)) {    return obj;  } else {    return sun.rmi.transport.ObjectTable.getStub(obj);  }}  }
class C{  public synchronized void preferenceChanged(View child,boolean width,boolean height){  if (child == null) {    getParent().preferenceChanged(this,width,height);  } else {    if (changing != null) {      View cv=changing.getChildView();      if (cv == child) {        changing.preferenceChanged(width,height);        return;      }    }    int index=getViewIndex(child.getStartOffset(),Position.Bias.Forward);    ChildState cs=getChildState(index);    cs.preferenceChanged(width,height);    LayoutQueue q=getLayoutQueue();    q.addTask(cs);    q.addTask(flushTask);  }}  }
class C{  public boolean hasNameOrOID(final String value){  return hasName(value) || getOID().equals(value);}  }
class C{  public ChunkGenerator generator(){  return generator;}  }
class C{  public org.omg.CORBA.TypeCode type(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("type",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    return $self.type();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Reference(String className,RefAddr addr){  this.className=className;  addrs=new Vector<>();  addrs.addElement(addr);}  }
class C{  protected void doLock(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  if (readOnly) {    resp.sendError(WebdavStatus.SC_FORBIDDEN);    return;  }  if (isLocked(req)) {    resp.sendError(WebdavStatus.SC_LOCKED);    return;  }  LockInfo lock=new LockInfo();  String depthStr=req.getHeader("Depth");  if (depthStr == null) {    lock.depth=maxDepth;  } else {    if (depthStr.equals("0")) {      lock.depth=0;    } else {      lock.depth=maxDepth;    }  }  int lockDuration=DEFAULT_TIMEOUT;  String lockDurationStr=req.getHeader("Timeout");  if (lockDurationStr == null) {    lockDuration=DEFAULT_TIMEOUT;  } else {    int commaPos=lockDurationStr.indexOf(',');    if (commaPos != -1) {      lockDurationStr=lockDurationStr.substring(0,commaPos);    }    if (lockDurationStr.startsWith("Second-")) {      lockDuration=Integer.parseInt(lockDurationStr.substring(7));    } else {      if (lockDurationStr.equalsIgnoreCase("infinity")) {        lockDuration=MAX_TIMEOUT;      } else {        try {          lockDuration=Integer.parseInt(lockDurationStr);        } catch (        NumberFormatException e) {          lockDuration=MAX_TIMEOUT;        }      }    }    if (lockDuration == 0) {      lockDuration=DEFAULT_TIMEOUT;    }    if (lockDuration > MAX_TIMEOUT) {      lockDuration=MAX_TIMEOUT;    }  }  lock.expiresAt=System.currentTimeMillis() + (lockDuration * 1000);  int lockRequestType=LOCK_CREATION;  Node lockInfoNode=null;  DocumentBuilder documentBuilder=getDocumentBuilder();  try {    Document document=documentBuilder.parse(new InputSource(req.getInputStream()));    Element rootElement=document.getDocumentElement();    lockInfoNode=rootElement;  } catch (  IOException e) {    lockRequestType=LOCK_REFRESH;  }catch (  SAXException e) {    lockRequestType=LOCK_REFRESH;  }  if (lockInfoNode != null) {    NodeList childList=lockInfoNode.getChildNodes();    StringWriter strWriter=null;    DOMWriter domWriter=null;    Node lockScopeNode=null;    Node lockTypeNode=null;    Node lockOwnerNode=null;    for (int i=0; i < childList.getLength(); i++) {      Node currentNode=childList.item(i);switch (currentNode.getNodeType()) {case Node.TEXT_NODE:        break;case Node.ELEMENT_NODE:      String nodeName=currentNode.getNodeName();    if (nodeName.endsWith("lockscope")) {      lockScopeNode=currentNode;    }  if (nodeName.endsWith("locktype")) {    lockTypeNode=currentNode;  }if (nodeName.endsWith("owner")) {  lockOwnerNode=currentNode;}break;}}if (lockScopeNode != null) {childList=lockScopeNode.getChildNodes();for (int i=0; i < childList.getLength(); i++) {Node currentNode=childList.item(i);switch (currentNode.getNodeType()) {case Node.TEXT_NODE:break;case Node.ELEMENT_NODE:String tempScope=currentNode.getNodeName();if (tempScope.indexOf(':') != -1) {lock.scope=tempScope.substring(tempScope.indexOf(':') + 1);} else {lock.scope=tempScope;}break;}}if (lock.scope == null) {resp.setStatus(WebdavStatus.SC_BAD_REQUEST);}} else {resp.setStatus(WebdavStatus.SC_BAD_REQUEST);}if (lockTypeNode != null) {childList=lockTypeNode.getChildNodes();for (int i=0; i < childList.getLength(); i++) {Node currentNode=childList.item(i);switch (currentNode.getNodeType()) {case Node.TEXT_NODE:break;case Node.ELEMENT_NODE:String tempType=currentNode.getNodeName();if (tempType.indexOf(':') != -1) {lock.type=tempType.substring(tempType.indexOf(':') + 1);} else {lock.type=tempType;}break;}}if (lock.type == null) {resp.setStatus(WebdavStatus.SC_BAD_REQUEST);}} else {resp.setStatus(WebdavStatus.SC_BAD_REQUEST);}if (lockOwnerNode != null) {childList=lockOwnerNode.getChildNodes();for (int i=0; i < childList.getLength(); i++) {Node currentNode=childList.item(i);switch (currentNode.getNodeType()) {case Node.TEXT_NODE:lock.owner+=currentNode.getNodeValue();break;case Node.ELEMENT_NODE:strWriter=new StringWriter();domWriter=new DOMWriter(strWriter,true);domWriter.print(currentNode);lock.owner+=strWriter.toString();break;}}if (lock.owner == null) {resp.setStatus(WebdavStatus.SC_BAD_REQUEST);}} else {lock.owner="";}}String path=getRelativePath(req);lock.path=path;WebResource resource=resources.getResource(path);Enumeration<LockInfo> locksList=null;if (lockRequestType == LOCK_CREATION) {String lockTokenStr=req.getServletPath() + "-" + lock.type+ "-"+ lock.scope+ "-"+ req.getUserPrincipal()+ "-"+ lock.depth+ "-"+ lock.owner+ "-"+ lock.tokens+ "-"+ lock.expiresAt+ "-"+ System.currentTimeMillis()+ "-"+ secret;String lockToken=MD5Encoder.encode(ConcurrentMessageDigest.digestMD5(lockTokenStr.getBytes(StandardCharsets.ISO_8859_1)));if (resource.isDirectory() && lock.depth == maxDepth) {Vector<String> lockPaths=new Vector<>();locksList=collectionLocks.elements();while (locksList.hasMoreElements()) {LockInfo currentLock=locksList.nextElement();if (currentLock.hasExpired()) {resourceLocks.remove(currentLock.path);continue;}if ((currentLock.path.startsWith(lock.path)) && ((currentLock.isExclusive()) || (lock.isExclusive()))) {lockPaths.addElement(currentLock.path);}}locksList=resourceLocks.elements();while (locksList.hasMoreElements()) {LockInfo currentLock=locksList.nextElement();if (currentLock.hasExpired()) {resourceLocks.remove(currentLock.path);continue;}if ((currentLock.path.startsWith(lock.path)) && ((currentLock.isExclusive()) || (lock.isExclusive()))) {lockPaths.addElement(currentLock.path);}}if (!lockPaths.isEmpty()) {Enumeration<String> lockPathsList=lockPaths.elements();resp.setStatus(WebdavStatus.SC_CONFLICT);XMLWriter generatedXML=new XMLWriter();generatedXML.writeXMLHeader();generatedXML.writeElement("D",DEFAULT_NAMESPACE,"multistatus",XMLWriter.OPENING);while (lockPathsList.hasMoreElements()) {generatedXML.writeElement("D","response",XMLWriter.OPENING);generatedXML.writeElement("D","href",XMLWriter.OPENING);generatedXML.writeText(lockPathsList.nextElement());generatedXML.writeElement("D","href",XMLWriter.CLOSING);generatedXML.writeElement("D","status",XMLWriter.OPENING);generatedXML.writeText("HTTP/1.1 " + WebdavStatus.SC_LOCKED + " "+ WebdavStatus.getStatusText(WebdavStatus.SC_LOCKED));generatedXML.writeElement("D","status",XMLWriter.CLOSING);generatedXML.writeElement("D","response",XMLWriter.CLOSING);}generatedXML.writeElement("D","multistatus",XMLWriter.CLOSING);Writer writer=resp.getWriter();writer.write(generatedXML.toString());writer.close();return;}boolean addLock=true;locksList=collectionLocks.elements();while (locksList.hasMoreElements()) {LockInfo currentLock=locksList.nextElement();if (currentLock.path.equals(lock.path)) {if (currentLock.isExclusive()) {resp.sendError(WebdavStatus.SC_LOCKED);return;} else {if (lock.isExclusive()) {resp.sendError(WebdavStatus.SC_LOCKED);return;}}currentLock.tokens.addElement(lockToken);lock=currentLock;addLock=false;}}if (addLock) {lock.tokens.addElement(lockToken);collectionLocks.addElement(lock);}} else {LockInfo presentLock=resourceLocks.get(lock.path);if (presentLock != null) {if ((presentLock.isExclusive()) || (lock.isExclusive())) {resp.sendError(WebdavStatus.SC_PRECONDITION_FAILED);return;} else {presentLock.tokens.addElement(lockToken);lock=presentLock;}} else {lock.tokens.addElement(lockToken);resourceLocks.put(lock.path,lock);if (!resource.exists()) {int slash=lock.path.lastIndexOf('/');String parentPath=lock.path.substring(0,slash);Vector<String> lockNulls=lockNullResources.get(parentPath);if (lockNulls == null) {lockNulls=new Vector<>();lockNullResources.put(parentPath,lockNulls);}lockNulls.addElement(lock.path);}resp.addHeader("Lock-Token","<opaquelocktoken:" + lockToken + ">");}}}if (lockRequestType == LOCK_REFRESH) {String ifHeader=req.getHeader("If");if (ifHeader == null) ifHeader="";LockInfo toRenew=resourceLocks.get(path);Enumeration<String> tokenList=null;if (toRenew != null) {tokenList=toRenew.tokens.elements();while (tokenList.hasMoreElements()) {String token=tokenList.nextElement();if (ifHeader.indexOf(token) != -1) {toRenew.expiresAt=lock.expiresAt;lock=toRenew;}}}Enumeration<LockInfo> collectionLocksList=collectionLocks.elements();while (collectionLocksList.hasMoreElements()) {toRenew=collectionLocksList.nextElement();if (path.equals(toRenew.path)) {tokenList=toRenew.tokens.elements();while (tokenList.hasMoreElements()) {String token=tokenList.nextElement();if (ifHeader.indexOf(token) != -1) {toRenew.expiresAt=lock.expiresAt;lock=toRenew;}}}}}XMLWriter generatedXML=new XMLWriter();generatedXML.writeXMLHeader();generatedXML.writeElement("D",DEFAULT_NAMESPACE,"prop",XMLWriter.OPENING);generatedXML.writeElement("D","lockdiscovery",XMLWriter.OPENING);lock.toXML(generatedXML);generatedXML.writeElement("D","lockdiscovery",XMLWriter.CLOSING);generatedXML.writeElement("D","prop",XMLWriter.CLOSING);resp.setStatus(WebdavStatus.SC_OK);resp.setContentType("text/xml; charset=UTF-8");Writer writer=resp.getWriter();writer.write(generatedXML.toString());writer.close();}  }
class C{  public TimeUnit timeunit(){  return values.timeunit;}  }
class C{  public String toString(){  return super.toString() + ":" + getAttributes();}  }
class C{  public AliasDefaultBehaviorProvider(AbstractManagedObjectDefinition<?,?> d,String propertyName){  this.definition=d;  this.propertyName=propertyName;}  }
class C{  public void clear(){  int oldSize=size();  super.clear();  if (oldSize > 0 && getComponent() != null) {    getComponent().componentInputMapChanged(this);  }}  }
class C{  public JobService completeCount(String type,Handler<AsyncResult<Long>> handler){  delegate.completeCount(type,handler);  return this;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public boolean shouldImportRequestObjectParamType(Field field){  return true;}  }
class C{  @NonNull public static Animator scaleX(@NonNull View view,int pivotX,int pivotY,float fromScale,float toScale,int duration){  view.setPivotX(pivotX);  view.setPivotY(pivotY);  Animator animator=ObjectAnimator.ofFloat(view,"scaleX",fromScale,toScale);  animator.setDuration(duration);  return animator;}  }
class C{  public DestroyFailedException(){  super();}  }
class C{  public static Condition or(Condition... conditions){  return new ORCondition(conditions);}  }
class C{  public String[] findContainerListenerNames() throws MBeanException {  Container container=null;  List<String> result=new ArrayList<>();  try {    container=(Container)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  ContainerListener[] listeners=container.findContainerListeners();  for (  ContainerListener listener : listeners) {    result.add(listener.getClass().getName());  }  return result.toArray(new String[result.size()]);}  }
class C{  public void initializeStringTable(){  stringTable=new byte[8192][];  for (int i=0; i < 256; i++) {    stringTable[i]=new byte[1];    stringTable[i][0]=(byte)i;  }  tableIndex=258;  bitsToGet=9;}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node lastChild;  doc=(Document)load("hc_staff",true);  titleAttr=doc.createAttribute("title");  textNode=doc.createTextNode("Yesterday");  retval=titleAttr.appendChild(textNode);  value=titleAttr.getValue();  assertEquals("attrValue","Yesterday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  value=retval.getNodeValue();  assertEquals("retvalValue","Yesterday",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","Yesterday",value);}  }
class C{  private DateUtils(){}  }
class C{  public void removeCircleOfTrustMember(String realm,String cotName,String protocolType,String entityId,boolean rmEntityConfig) throws COTException {  String classMethod="COTManager.removeCircleOfTrustMember: ";  if ((cotName == null) || (cotName.trim().length() == 0)) {    String[] data={cotName,realm};    LogUtil.error(Level.INFO,LogUtil.NULL_COT_NAME_REMOVE_COT_MEMBER,data);    throw new COTException("invalidCOTName",null);  }  if ((entityId == null) || (entityId.trim().length() == 0)) {    String[] data={cotName,entityId,realm};    LogUtil.error(Level.INFO,LogUtil.NULL_ENTITYID_REMOVE_COT_MEMBER,data);    throw new COTException("invalidEntityID",null);  }  if (realm == null) {    realm=COTConstants.ROOT_REALM;  }  try {    if (rmEntityConfig) {      removeFromEntityConfig(realm,cotName,protocolType,entityId);    }    CircleOfTrustDescriptor cotDesc;    Map attrs=configInst.getConfiguration(realm,cotName);    if (attrs == null) {      cotDesc=new CircleOfTrustDescriptor(cotName,realm,COTConstants.ACTIVE);    } else {      cotDesc=new CircleOfTrustDescriptor(cotName,realm,attrs);    }    if (!cotDesc.remove(entityId,protocolType)) {      debug.error(classMethod + "fail to remove entityid from the circle of trust." + realm);      String[] data={entityId,realm};      throw new COTException("removeCOTFailed",data);    } else {      modifyCircleOfTrust(realm,cotDesc);    }  } catch (  ConfigurationException e) {    debug.error(classMethod,e);    String[] data={e.getMessage(),cotName,entityId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_REMOVE_COT_MEMBER,data);    throw new COTException(e);  }catch (  JAXBException jaxbe) {    debug.error(classMethod,jaxbe);    String[] data={jaxbe.getMessage(),cotName,entityId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_REMOVE_COT_MEMBER,data);    throw new COTException(jaxbe);  }}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData.length != 16)   return null;  char[] buffer=new char[32];  for (int i=0; i < 16; i++) {    int low=binaryData[i] & 0x0f;    int high=(binaryData[i] & 0xf0) >> 4;    buffer[i * 2]=hexadecimal[high];    buffer[i * 2 + 1]=hexadecimal[low];  }  return new String(buffer);}  }
class C{  public void paintFormattedTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static void removeAllCaseIgnore(Set master,Set deletingSet){  if ((deletingSet != null) && !deletingSet.isEmpty()) {    Set lcSet=lowerCase(deletingSet);    for (Iterator iter=master.iterator(); iter.hasNext(); ) {      String e=(String)iter.next();      if (lcSet.contains(e.toLowerCase())) {        iter.remove();      }    }  }}  }
class C{  public boolean start_write(File p_file){  try {    file_writer=new FileWriter(p_file);  } catch (  IOException e) {    System.out.println("unable to create logfile");    return false;  }  write_enabled=true;  return true;}  }
class C{  public byte[] encode(byte[] raw){  return toAsciiBytes(raw);}  }
class C{  public DefaultListCellRenderer(){  super();  setOpaque(true);  setBorder(getNoFocusBorder());  setName("List.cellRenderer");}  }
class C{  public Advice(Element element) throws SAMLException {  super(element);}  }
class C{  @Override public String toString(){  return toString(false,LINE_SEPARATOR);}  }
class C{  public final int _nextsib2(int identity){  if (identity < m_blocksize)   return m_nextsib_map0[identity]; else   return m_nextsib_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  private void writeErrorContents(ServerDescriptor desc){  for (  Exception ex : desc.getExceptions()) {    LocalizableMessage errorMsg=ex instanceof AdminException ? ((AdminException)ex).getMessageObject() : LocalizableMessage.raw(ex.getMessage());    if (errorMsg != null) {      println();      println(errorMsg);    }  }}  }
class C{  public void sendReInvite() throws Exception {  Request inviteRequest=dialog.createRequest(Request.INVITE);  MaxForwardsHeader mf=ProtocolObjects.headerFactory.createMaxForwardsHeader(10);  inviteRequest.setHeader(mf);  inviteRequest.setHeader(this.contactHeader);  ClientTransaction ct=provider.getNewClientTransaction(inviteRequest);  dialog.sendRequest(ct);}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  if (bufferedBlockCipher != null) {    byte[] buf=new byte[bufferedBlockCipher.getOutputSize(len)];    int outLen=bufferedBlockCipher.processBytes(b,off,len,buf,0);    if (outLen != 0) {      out.write(buf,0,outLen);    }  } else {    byte[] buf=new byte[len];    streamCipher.processBytes(b,off,len,buf,0);    out.write(buf,0,len);  }}  }
class C{  public void invalidateHeaders(){  mHeaderProvider.invalidate();  mHeaderRects.clear();}  }
class C{  public org.w3c.dom.Element signWithUserNameToken(org.w3c.dom.Document doc,java.security.cert.Certificate cert,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  return sp.signWithUserNameToken(doc,cert,algorithm,ids);}  }
class C{  public ModifyDNResponseProtocolOp(int resultCode){  this.resultCode=resultCode;}  }
class C{  public JRadioButtonMenuItem(){  this(null,null,false);}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) public static Map<AccountStatusNotificationProperty,List<String>> createProperties(PasswordPolicyState pwPolicyState,boolean tempLocked,int timeToExpiration,List<ByteString> oldPasswords,List<ByteString> newPasswords){  HashMap<AccountStatusNotificationProperty,List<String>> props=new HashMap<>(4);  PasswordPolicy policy=pwPolicyState.getAuthenticationPolicy();  props.put(PASSWORD_POLICY_DN,newArrayList(policy.getDN().toString()));  if (tempLocked) {    long secondsUntilUnlock=policy.getLockoutDuration();    if (secondsUntilUnlock > 0L) {      props.put(SECONDS_UNTIL_UNLOCK,newArrayList(String.valueOf(secondsUntilUnlock)));      String string=secondsToTimeString(secondsUntilUnlock).toString();      props.put(TIME_UNTIL_UNLOCK,newArrayList(string));      long unlockTime=System.currentTimeMillis() + (1000 * secondsUntilUnlock);      props.put(ACCOUNT_UNLOCK_TIME,newArrayList(new Date(unlockTime).toString()));    }  }  if (timeToExpiration >= 0) {    props.put(SECONDS_UNTIL_EXPIRATION,newArrayList(String.valueOf(timeToExpiration)));    String string=secondsToTimeString(timeToExpiration).toString();    props.put(TIME_UNTIL_EXPIRATION,newArrayList(string));    long expTime=System.currentTimeMillis() + (1000L * timeToExpiration);    props.put(PASSWORD_EXPIRATION_TIME,newArrayList(new Date(expTime).toString()));  }  if (oldPasswords != null && !oldPasswords.isEmpty()) {    props.put(OLD_PASSWORD,toStrings(oldPasswords));  }  if (newPasswords != null && !newPasswords.isEmpty()) {    props.put(NEW_PASSWORD,toStrings(newPasswords));  }  return props;}  }
class C{  private void verifySuccess(Result result) throws LdapOperationFailedException {  ResultCode resultCode=result.getResultCode();  if (resultCode.isExceptional()) {    throw new LdapOperationFailedException(result);  }}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  @Override public ConnectionChangeRecordWriter writeChangeRecord(final ChangeRecord change) throws LdapException {  Reject.ifNull(change);  final IOException e=change.accept(ChangeRecordVisitorWriter.getInstance(),this);  try {    if (e != null) {      throw e;    }  } catch (  final LdapException e1) {    throw e1;  }catch (  final IOException e1) {    throw new RuntimeException(e1);  }  return this;}  }
class C{  private ArrayList<PlaPointInt> angled_connection(PlaPointInt p_from_point,PlaPointInt p_to_point){  TraceAngleRestriction angle_restriction=r_board.brd_rules.get_trace_snap_angle();  ArrayList<PlaPointInt> result=new ArrayList<PlaPointInt>(3);  result.add(p_from_point);  if (angle_restriction.is_limit_45()) {    PlaPointInt extra=p_from_point.fortyfive_degree_corner(p_to_point,true);    if (extra != null)     result.add(extra);  }  result.add(p_to_point);  return result;}  }
class C{  @OnMessage public void echoPongMessage(PongMessage pm){}  }
class C{  public ScriptFrame(){  super(new Frame()," Auxiliary information ",false);  initComponents();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element entRefAddr;  Node entRefNode;  String entRefValue;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  entRefAddr=(Element)elementList.item(1);  entRefNode=entRefAddr.getFirstChild();  nodeType=(int)entRefNode.getNodeType();  if (equals(3,nodeType)) {    entRefNode=doc.createEntityReference("ent2");    assertNotNull("createdEntRefNotNull",entRefNode);  }  entRefValue=entRefNode.getNodeValue();  assertNull("entRefNodeValue",entRefValue);}  }
class C{  private boolean isJavaClassAcceptable(ConnectionHandlerCfg config,List<LocalizableMessage> unacceptableReasons){  String className=config.getJavaClass();  ConnectionHandlerCfgDefn d=ConnectionHandlerCfgDefn.getInstance();  ClassPropertyDefinition pd=d.getJavaClassPropertyDefinition();  try {    ConnectionHandler<?> connectionHandler=connectionHandlers.get(config.dn());    if (connectionHandler == null) {      @SuppressWarnings("rawtypes") Class<? extends ConnectionHandler> theClass=pd.loadClass(className,ConnectionHandler.class);      connectionHandler=theClass.newInstance();    }    return connectionHandler.isConfigurationAcceptable(config,unacceptableReasons);  } catch (  Exception e) {    logger.traceException(e);    unacceptableReasons.add(ERR_CONFIG_CONNHANDLER_CANNOT_INITIALIZE.get(className,config.dn(),stackTraceToSingleLineString(e)));    return false;  }}  }
class C{  public boolean beginPasswordDisplay(ChildDisplayEvent event){  return (curCallback != null) && (curCallback instanceof PasswordCallback);}  }
class C{  public FrameBodyEQUA(){}  }
class C{  public void testInsert3() throws SQLException {  DatabaseCreator.fillParentTable(conn);  DatabaseCreator.fillFKStrictTable(conn);  statement.execute("INSERT INTO " + DatabaseCreator.TEST_TABLE5 + " SELECT id AS testId, value AS testValue "+ "FROM "+ DatabaseCreator.FKSTRICT_TABLE+ " WHERE name_id = 1");  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.TEST_TABLE5);  r.next();  assertEquals("Should be 2 rows",2,r.getInt(1));  r.close();}  }
class C{  public static Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByField2_Last(field2,orderByComparator);}  }
class C{  public void pause(){  if (isPaused()) {    return;  }  suspended.set(true);  while (!sessionDone.get()) {    TestCaseUtils.sleep(200);  }}  }
class C{  public void test_ConstructorLjava_io_FileZI(){  try {    JarFile jarFile=new JarFile(new File("Wrong.file"),true,ZipFile.OPEN_READ);    fail("Should throw IOException");  } catch (  IOException e) {  }  try {    Support_Resources.copyFile(resources,null,jarName);    JarFile jarFile=new JarFile(new File(resources,jarName),false,ZipFile.OPEN_READ);  } catch (  IOException e) {    fail("Should not throw IOException");  }  try {    Support_Resources.copyFile(resources,null,jarName);    JarFile jarFile=new JarFile(new File(resources,jarName),false,ZipFile.OPEN_READ | ZipFile.OPEN_DELETE + 33);    fail("Should throw IllegalArgumentException");  } catch (  IOException e) {    fail("Should not throw IOException");  }catch (  IllegalArgumentException e) {  }}  }
class C{  LambdaForm uncustomize(){  if (customized == null) {    return this;  }  assert (transformCache != null);  LambdaForm uncustomizedForm=(LambdaForm)transformCache;  if (COMPILE_THRESHOLD > 0 && isCompiled) {    uncustomizedForm.compileToBytecode();  }  return uncustomizedForm;}  }
class C{  public RemoteServletRequest(ServletRequest request){  debug=Debug.getInstance("remoteRequest");  if (debug.messageEnabled()) {    debug.message(CLASS + " <init>");  }  if (request == null) {    throw new IllegalArgumentException("Request cannot be null");  }  this.request=request;  processRequest();}  }
class C{  public static IdRepoException convertAMException(AMException ame){  Object[] args=ame.getMessageArgs();  String eCode=ame.getErrorCode();  IdRepoException ide=null;  if (args == null) {    ide=new IdRepoException("amProfile",eCode,null);  } else {    ide=new IdRepoException("amProfile",ame.getErrorCode(),args);  }  ide.setLDAPErrorCode(ame.getLDAPErrorCode());  return ide;}  }
class C{  @Override public void onWZAudioPaused(boolean paused){  mPaused=paused;  setVisibility(paused ? View.GONE : View.VISIBLE);}  }
class C{  @Override public void onMessageReceived(RemoteMessage remoteMessage){  Log.d(TAG,"From: " + remoteMessage.getFrom());  if (remoteMessage.getData().size() > 0) {    Log.d(TAG,"Message data payload: " + remoteMessage.getData());  }  if (remoteMessage.getNotification() != null) {    Log.d(TAG,"Message Notification Body: " + remoteMessage.getNotification().getBody());    sendNotification(remoteMessage.getNotification().getBody());  }}  }
class C{  int CalcSubrOffsetSize(int Offset,int Size){  int OffsetSize=0;  seek(Offset);  while (getPosition() < Offset + Size) {    int p1=getPosition();    getDictItem();    int p2=getPosition();    if ("Subrs".equals(key)) {      OffsetSize=p2 - p1 - 1;    }  }  return OffsetSize;}  }
class C{  public boolean isDegradedDueToGenerationId(int serverId){  if (logger.isTraceEnabled()) {    debug("isDegraded serverId=" + serverId + " given local generation Id="+ this.generationId);  }  ServerHandler sHandler=connectedRSs.get(serverId);  if (sHandler == null) {    sHandler=connectedDSs.get(serverId);    if (sHandler == null) {      return false;    }  }  if (logger.isTraceEnabled()) {    debug("Compute degradation of serverId=" + serverId + " LS server generation Id="+ sHandler.getGenerationId());  }  return sHandler.getGenerationId() != this.generationId;}  }
class C{  static AxesWalker findClone(AxesWalker key,Vector cloneList){  if (null != cloneList) {    int n=cloneList.size();    for (int i=0; i < n; i+=2) {      if (key == cloneList.elementAt(i))       return (AxesWalker)cloneList.elementAt(i + 1);    }  }  return null;}  }
class C{  public UnknownServiceException(){}  }
class C{  public FrameBodyTSOT(){}  }
class C{  public static void removeApplicationType(Subject adminSubject,String name) throws EntitlementException {  EntitlementConfiguration ec=getEntitlementConfiguration(adminSubject,"/");  ec.removeApplicationType(name);}  }
class C{  private long computeFreshnessLifetime(){  CacheControl responseCaching=cacheResponse.cacheControl();  if (responseCaching.maxAgeSeconds() != -1) {    return SECONDS.toMillis(responseCaching.maxAgeSeconds());  } else   if (expires != null) {    long servedMillis=servedDate != null ? servedDate.getTime() : receivedResponseMillis;    long delta=expires.getTime() - servedMillis;    return delta > 0 ? delta : 0;  } else   if (lastModified != null && cacheResponse.request().url().query() == null) {    long servedMillis=servedDate != null ? servedDate.getTime() : sentRequestMillis;    long delta=servedMillis - lastModified.getTime();    return delta > 0 ? (delta / 10) : 0;  }  return 0;}  }
class C{  static boolean isToolBarButton(JComponent c){  return (c.getParent() instanceof JToolBar);}  }
class C{  public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {  if (debug.messageEnabled()) {    debug.message("callback handler method");  }  if ((callbacks.length == 1) && (callbacks[0] instanceof LoginStateCallback)) {    debug.message("LoginState Callbacks");    ((LoginStateCallback)callbacks[0]).setLoginState(loginState);  } else {    if (isPureJAAS) {      setPageTimeout(callbacks);      loginState.setSubmittedCallback(null,am);      loginState.setReceivedCallback(callbacks,am);      Thread thread=Thread.currentThread();      if (debug.messageEnabled()) {        debug.message("waiting for submitted info " + thread);      }      callbacks=am.submitCallbackInfo();      if (authThreadManager.isTimedOut(thread)) {        loginState.setTimedOut(true);        loginState.setReceivedCallback(null,am);        authThreadManager.removeFromHash(thread,"timedOutHash");        throw new IOException(AMAuthErrorCode.AUTH_TIMEOUT);      }      checkLoginTimeout();    } else {      if (loginState.getSubmittedInfo() != null) {        debug.message("DSAMEHandler: found submitted callbacks !");        checkLoginTimeout();        Callback[] callbacks2=loginState.getSubmittedInfo();        copyCallbacks(callbacks,callbacks2);        loginState.setReceivedCallback_NoThread(null);      } else {        setPageTimeout(callbacks);        loginState.setReceivedCallback_NoThread(callbacks);        debug.message("Set callbacks, throwing java.lang.Error.");        throw HANDLER_ERROR;      }    }    if (debug.messageEnabled()) {      debug.message("DSAMECAllbackhandler..." + callbacks);    }    if (isPureJAAS) {      loginState.setReceivedCallback(null,am);    }  }}  }
class C{  public PixelGrabber(ImageProducer ip,int x,int y,int w,int h,int[] pix,int off,int scansize){  producer=ip;  dstX=x;  dstY=y;  dstW=w;  dstH=h;  dstOff=off;  dstScan=scansize;  intPixels=pix;  imageModel=ColorModel.getRGBdefault();}  }
class C{  public final void pushCurrentExpressionNode(int n){  m_currentExpressionNodes.push(n);}  }
class C{  public SignatureVisitor visitInterface(){  return this;}  }
class C{  static public void assertEquals(long expected,long actual){  assertEquals(null,expected,actual);}  }
class C{  private ZoneRules(ZoneOffset offset){  this.standardOffsets=new ZoneOffset[1];  this.standardOffsets[0]=offset;  this.standardTransitions=EMPTY_LONG_ARRAY;  this.savingsInstantTransitions=EMPTY_LONG_ARRAY;  this.savingsLocalTransitions=EMPTY_LDT_ARRAY;  this.wallOffsets=standardOffsets;  this.lastRules=EMPTY_LASTRULES;}  }
class C{  public ResponseSet process(PLLAuditor auditor,List<Request> requests,HttpServletRequest servletRequest,HttpServletResponse servletResponse,ServletContext servletContext){  if (Debug.messageEnabled()) {    Debug.message("LogService.process() called :requests are");    for (    Request req : requests) {      Debug.message("xml = " + req.getContent());    }  }  ResponseSet rset=new ResponseSet(LOG_SERVICE);  for (  Request req : requests) {    String xmlRequestString=req.getContent();    Response res;    if ((xmlRequestString == null) || xmlRequestString.equals("null")) {      Debug.error("Received a null log request");      res=new Response("NULL_LOG_REQUEST");      rset.addResponse(res);    } else {      int l=xmlRequestString.length();      int sidi=xmlRequestString.indexOf("sid=");      int sidj=xmlRequestString.indexOf("</log");      loggedBySid=xmlRequestString.substring((sidi + 5),(sidj - 2));      try {        InetAddress remoteClient=SessionUtils.getClientAddress(servletRequest);        SSOToken ssoToken=RestrictedTokenHelper.resolveRestrictedToken(loggedBySid,remoteClient);        SSOTokenManager ssom=SSOTokenManager.getInstance();        if (!ssom.isValidToken(ssoToken)) {          String loggedByID=ssoToken.getPrincipal().getName();          Debug.error("LogService::process(): access denied for" + " user :" + loggedByID);          res=new Response("UNAUTHORIZED");          rset.addResponse(res);          return rset;        }      } catch (      SSOException e) {        Debug.error("LogService::process(): SSOException",e);        res=new Response("UNAUTHORIZED");        rset.addResponse(res);        return rset;      }catch (      Exception e) {        Debug.error("LogService::process(): ",e);        res=new Response("ERROR");        rset.addResponse(res);      }      try {        ByteArrayInputStream bin=new ByteArrayInputStream(xmlRequestString.getBytes("UTF-8"));        LogOperation op=(LogOperation)parser.parse(bin);        res=op.execute(auditEventPublisher,auditEventFactory);      } catch (      Exception e) {        Debug.error("LogService::process():",e);        res=new Response("ERROR");        if (MonitoringUtil.isRunning()) {          SsoServerLoggingSvcImpl slsi=Agent.getLoggingSvcMBean();          SsoServerLoggingHdlrEntryImpl slei=slsi.getHandler(SsoServerLoggingSvcImpl.REMOTE_HANDLER_NAME);          slei.incHandlerFailureCount(1);        }      }      rset.addResponse(res);    }  }  return rset;}  }
class C{  public static byte[] readLineBytes(InputStream inputStream) throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  int byteRead=inputStream.read();  while (byteRead != IoUtils.EOF) {switch (byteRead) {case 0:      break;case LF:    return outputStream.toByteArray();default :  outputStream.write(byteRead);break;}byteRead=inputStream.read();}byte[] array=outputStream.toByteArray();if (array.length == 0) {throw new IOException("Input stream is closed");}return array;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String instanceName=getStringOptionValue(AuthOptions.AUTH_INSTANCE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map<String,Set<String>> attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  attributeValues=processFileAttributes(attributeValues);  String[] params={realm,instanceName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_AUTH_INSTANCE",params);  try {    AMAuthenticationManager mgr=new AMAuthenticationManager(adminSSOToken,realm);    AMAuthenticationInstance ai=mgr.getAuthenticationInstance(instanceName);    if (ai != null) {      ai.setAttributeValues(attributeValues);      getOutputWriter().printlnMessage(getResourceString("authentication-update-auth-instance-succeeded"));      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_UPDATE_AUTH_INSTANCE",params);    } else {      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AUTH_INSTANCE",params);      throw new CLIException(getResourceString("authentication-update-auth-instance-not-found"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  AMConfigurationException e) {    debugError("UpdateAuthInstance.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AUTH_INSTANCE",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    debugError("UpdateAuthInstance.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AUTH_INSTANCE",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("UpdateAuthInstance.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AUTH_INSTANCE",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public ResourceBundleTest(){  super("CLI");}  }
class C{  public PluginResult.PreParse invokePreParseModifyPlugins(PreParseModifyOperation modifyOperation) throws CanceledOperationException {  PluginResult.PreParse result=null;  for (  DirectoryServerPlugin p : preParseModifyPlugins) {    if (isInternalOperation(modifyOperation,p)) {      continue;    }    try {      result=p.doPreParse(modifyOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreParseException(e,modifyOperation,p);    }    if (result == null) {      return handlePreParseResult(modifyOperation,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreParse.continueOperationProcessing();  }  return result;}  }
class C{  public void create(SSOToken token,String objName,Map attributes) throws SMSException, SSOException {  try {    Object[] objs={token.getTokenID().toString(),objName,attributes};    client.send(client.encodeMessage("create",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null);  } catch (  SSOException ssoe) {    throw ssoe;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObject:create -- Exception:",re);    throw (new SMSException(re,"sms-JAXRPC-cannot-create"));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  doc=(Document)load("hc_nodtdstaff",false);  docType=doc.getDoctype();  assertNull("documentGetDocTypeNoDTDAssert",docType);}  }
class C{  public void clearBuffer(){  buff=new StringBuffer();}  }
class C{  public void collectRequestEvent(SipProvider provider) throws TooManyListenersException {  initCollectors(provider);  provider.addSipListener(requestCollector);}  }
class C{  public AccountUsableRequestControl(boolean isCritical){  super(OID_ACCOUNT_USABLE_CONTROL,isCritical);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportRefIssuerSerialElement createMustSupportRefIssuerSerialElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportRefIssuerSerialElementImpl();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssRelV20Token10Element createWssRelV20Token10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssRelV20Token10ElementImpl();}  }
class C{  public NumSubordinatesVirtualAttributeProvider(){  super();}  }
class C{  private static final boolean isWhiteSpace(final byte c){  if (c == ' ' || c == '\t' || c == '\n' || c == '\r' || c == '\f') {    return true;  } else {    return false;  }}  }
class C{  public static double asin(double a){  return StrictMath.asin(a);}  }
class C{  public java.util.List createHeaders(String headers) throws java.text.ParseException {  if (headers == null)   throw new NullPointerException("null arg!");  StringMsgParser smp=new StringMsgParser();  SIPHeader shdr=smp.parseSIPHeader(headers);  if (shdr instanceof SIPHeaderList)   return (SIPHeaderList)shdr; else   throw new ParseException("List of headers of this type is not allowed in a message",0);}  }
class C{  private void parse_access(boolean parse_exp) throws SyntaxException {  LineCol lineCol=current.getLineCol();  parsedExpsNotEmpty(current);  Expression exp=parsedExps.pop();  nextNode(false);  if (current instanceof Element) {    String name=((Element)current).getContent();    if (current.getTokenType() != TokenType.VALID_NAME) {      err.UnexpectedTokenException("valid name",name,current.getLineCol());      err.debug("assume that the token is a valid name");    }    AST.Access access=new AST.Access(exp,name,lineCol);    parsedExps.push(access);    nextNode(true);    if (parse_exp) {      parse_expression();    }  } else {    err.UnexpectedTokenException("valid name",current.toString(),current.getLineCol());    err.debug("ignore the statement");    throw new ParseFail();  }}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof SocketPermission))   return false;  SocketPermission np=(SocketPermission)permission;  int desired=np.getMask();  int effective=0;  int needed=desired;synchronized (this) {    int len=perms.size();    for (int i=0; i < len; i++) {      SocketPermission x=perms.get(i);      if (((needed & x.getMask()) != 0) && x.impliesIgnoreMask(np)) {        effective|=x.getMask();        if ((effective & desired) == desired)         return true;        needed=(desired ^ effective);      }    }  }  return false;}  }
class C{  public final TelephoneNumber parseTelephoneNumber(boolean inBrackets) throws ParseException {  TelephoneNumber tn;  if (debug)   dbg_enter("telephone_subscriber");  lexer.selectLexer("charLexer");  try {    char c=lexer.lookAhead(0);    if (c == '+')     tn=global_phone_number(inBrackets); else     if (Lexer.isHexDigit(c) || c == '#' || c == '*' || c == '-' || c == '.' || c == '(' || c == ')') {      tn=local_phone_number(inBrackets);    } else     throw createParseException("unexpected char " + c);    return tn;  }  finally {    if (debug)     dbg_leave("telephone_subscriber");  }}  }
class C{  public JKXmlException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static boolean isExternal(Context context){  return context.containsContext(ClientContext.class) && context.asContext(ClientContext.class).isExternal();}  }
class C{  public void interruptTask(TaskState interruptState,LocalizableMessage interruptReason,boolean exitThread){  if (getAssociatedTask() != null) {    try {      getAssociatedTask().interruptTask(interruptState,interruptReason);    } catch (    Exception e) {      logger.traceException(e);    }  }  if (exitThread) {    exitRequested=true;  }}  }
class C{  public Document create(String database,String table,String json) throws IndexParseException {  verifyTable(database,table);  Document doc=new Document();  doc.setTable(database,table);  doc.setObjectAsString(json);  doc.setUuid(UUID.randomUUID());  ValidationEngine.validateAndThrow(doc);  try {    Document created=docRepo.create(doc);    notifyAllPlugins(NotifierPlugin.MutateType.CREATE,created);    return created;  } catch (  RuntimeException e) {    if (e.getCause() != null && e.getCause() instanceof IndexParseException) {      throw (IndexParseException)e.getCause();    } else {      throw e;    }  }}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public ModelMBeanAttributeInfo(ModelMBeanAttributeInfo inInfo){  super(inInfo.getName(),inInfo.getType(),inInfo.getDescription(),inInfo.isReadable(),inInfo.isWritable(),inInfo.isIs());  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanAttributeInfo.class.getName(),"ModelMBeanAttributeInfo(ModelMBeanAttributeInfo)","Entry");  }  Descriptor newDesc=inInfo.getDescriptor();  attrDescriptor=validDescriptor(newDesc);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  NamedNodeMap attributes;  Node removedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  attributes=testEmployee.getAttributes();{    boolean success=false;    try {      removedNode=attributes.removeNamedItem("district");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public void removeAccessibleSelection(int i){  TreeModel model=JTree.this.getModel();  if (model != null) {    if (i >= 0 && i < getAccessibleChildrenCount()) {      TreePath path=getChildTreePath(i);      JTree.this.removeSelectionPath(path);    }  }}  }
class C{  private boolean checkEqualAttributeValues(AttributeValue first,AttributeValue second){  if (first == null && second == null) {    return true;  }  if (first == null || second == null) {    return false;  }  List<Object> firstList=first.getContent();  List<Object> secondList=second.getContent();  if (firstList == null && secondList == null) {    return true;  }  if (firstList == null || secondList == null) {    return false;  }  if (firstList.size() != secondList.size()) {    return false;  }  for (  Object firstObject : firstList) {    boolean found=false;    for (    Object secondObject : secondList) {      if (firstObject instanceof String && secondObject instanceof String) {        String firstString=(String)firstObject;        String secondString=(String)secondObject;        try {          ResourceAttribute firstRA=resourceAttributeUtil.fromJSON(firstString);          ResourceAttribute secondRA=resourceAttributeUtil.fromJSON(secondString);          found=checkEqualResourceAttributes(firstRA,secondRA);          if (found) {            break;          }        } catch (        EntitlementException ignored) {        }      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  public static void flushCaches(){synchronized (declaredMethodCache) {    ThreadGroupContext.getContext().clearBeanInfoCache();    declaredMethodCache.clear();  }}  }
class C{  private static LocalizableMessage createLocalizableMessage(AbstractManagedObjectDefinition<?,?> d,Reason reason){  LocalizableMessage ufn=d.getUserFriendlyName();switch (reason) {case NO_TYPE_INFORMATION:    return ERR_DECODING_EXCEPTION_NO_TYPE_INFO.get(ufn);case WRONG_TYPE_INFORMATION:  return ERR_DECODING_EXCEPTION_WRONG_TYPE_INFO.get(ufn);default :return ERR_DECODING_EXCEPTION_ABSTRACT_TYPE_INFO.get(ufn);}}  }
class C{  void validateAttributeUniqueness(String entryDN,int profileType,boolean newEntry,Map modMap) throws AMException {  boolean attrExists=false;  if (modMap == null || modMap.isEmpty()) {    return;  }  try {    if (profileType == AMTemplate.DYNAMIC_TEMPLATE || profileType == AMTemplate.ORGANIZATION_TEMPLATE || profileType == AMTemplate.POLICY_TEMPLATE) {      return;    }    DN dn=DN.valueOf(entryDN);    int size=dn.size();    if (size < 2) {      return;    }    List<RDN> rdns=new ArrayList<>();    for (Iterator<RDN> iter=dn.iterator(); iter.hasNext(); ) {      rdns.add(iter.next());    }    String orgDN=rdns.get(rdns.size() - 1).toString();    AMStoreConnection amsc=new AMStoreConnection(CommonUtils.getInternalToken());    DN rootDN=DN.valueOf(AMStoreConnection.getAMSdkBaseDN());    DN thisDN=DN.valueOf(orgDN);    for (int i=size - 2; i >= 0; i--) {      if (debug.messageEnabled()) {        debug.message("AMObjectImpl.validateAttributeUniqueness: " + "try DN = " + orgDN);      }      int type=-1;      if (!rootDN.isInScopeOf(thisDN,SearchScope.SUBORDINATES)) {        try {          type=amsc.getAMObjectType(orgDN);        } catch (        AMException ame) {          if (debug.warningEnabled()) {            debug.warning("AMObjectImpl." + "validateAttributeUniqueness: " + "Unable to determine object type of " + orgDN + " :Attribute uniqueness check aborted..",ame);          }          return;        }      }      Set list=null;      AMObject amobj=null;      if (type == AMObject.ORGANIZATION) {        AMOrganization amorg=amsc.getOrganization(orgDN);        list=amorg.getAttribute(UNIQUE_ATTRIBUTE_LIST_ATTRIBUTE);        amobj=amorg;      } else       if (type == AMObject.ORGANIZATIONAL_UNIT) {        AMOrganizationalUnit amorgu=amsc.getOrganizationalUnit(orgDN);        list=amorgu.getAttribute(UNIQUE_ATTRIBUTE_LIST_ATTRIBUTE);        amobj=amorgu;      }      if ((list != null) && !list.isEmpty()) {        if (debug.messageEnabled()) {          debug.message("AMObjectImpl." + "validateAttributeUniqueness: list =" + list);        }        Iterator iter=list.iterator();        StringBuffer filterSB=new StringBuffer();        StringBuffer newEntrySB=new StringBuffer();        filterSB.append("(|");        while (iter.hasNext()) {          String[] attrList=getAttrList((String)iter.next());          Set attr=getAttrValues(attrList,modMap);          for (int j=0; j < attrList.length; j++) {            String attrName=attrList[j];            if (attrName.equals(getNamingAttribute(profileType)) && newEntry) {              if ((profileType == AMObject.ROLE) || (profileType == AMObject.MANAGED_ROLE) || (profileType == AMObject.FILTERED_ROLE)) {                newEntrySB.append("(&");                newEntrySB.append("(objectclass=ldapsubentry)");                newEntrySB.append("(" + "objectclass=nsroledefinition)");                attrExists=true;              } else               if ((profileType == AMObject.GROUP) || (profileType == AMObject.STATIC_GROUP) || (profileType == AMObject.ASSIGNABLE_DYNAMIC_GROUP)|| (profileType == AMObject.DYNAMIC_GROUP)) {                newEntrySB.append("(&");                newEntrySB.append("(objectclass=iplanet-am-managed-group)");                newEntrySB.append("(objectclass=groupofuniquenames)");                attrExists=true;              } else               if (profileType == AMObject.ORGANIZATION) {                newEntrySB.append("(&(!");                newEntrySB.append("(objectclass=");                newEntrySB.append(SMSEntry.OC_REALM_SERVICE);                newEntrySB.append("))");                attrExists=true;              }              filterSB.append("(").append(rdns.get(0)).append(")");            }            if (attr != null && !attr.isEmpty()) {              Iterator itr=attr.iterator();              while (itr.hasNext()) {                filterSB.append("(").append(attrName);                filterSB.append("=").append(itr.next());                filterSB.append(")");              }            }          }        }        if (filterSB.length() > 2) {          if (attrExists) {            newEntrySB.append(filterSB.toString()).append("))");            filterSB=newEntrySB;          } else {            filterSB.append(")");          }          if (debug.messageEnabled()) {            debug.message("AMObjectImpl." + "validateAttributeUniqueness: " + "filter = "+ filterSB.toString());          }          Set users=amobj.search(AMConstants.SCOPE_SUB,filterSB.toString());          if (users != null && users.size() == 1) {            String userDN=(String)users.iterator().next();            DN dnObject=DN.valueOf(userDN);            if (dnObject.equals(DN.valueOf(entryDN))) {              return;            }          }          if ((users != null) && !users.isEmpty()) {            throw new AMException(AMSDKBundle.getString("162"),"162");          }        }      }      orgDN=rdns.get(i).toString() + "," + orgDN;      thisDN=DN.valueOf(orgDN);    }  } catch (  SSOException ex) {    if (debug.warningEnabled()) {      debug.warning("Unable to validate attribute uniqneness",ex);    }  }}  }
class C{  public InvalidFrameException(String msg){  super(msg);}  }
class C{  public void shutdown(){  for (  Module module : modules) {    module.stop();  }  for (  Reporter reporter : reporters.values()) {    reporter.stop();  }}  }
class C{  protected byte[] wrap(){  byte[] res=recordProtocol.wrap(ContentType.ALERT,alert,0,2);  return res;}  }
class C{  public AuthorizationDecisionStatement(Element element) throws SAMLException {  super(element);}  }
class C{  public byte[] encodePassword(IdType type,byte[][] binaryValues){  if (type.equals(IdType.USER)) {    if (binaryValues != null && binaryValues.length > 0) {      return binaryValues[0];    }  }  return null;}  }
class C{  @Override public TagField createField(FieldKey genericKey,String value) throws KeyNotFoundException, FieldDataInvalidException {  if (value == null) {    throw new IllegalArgumentException(ErrorMessage.GENERAL_INVALID_NULL_ARGUMENT.getMsg());  }  if (genericKey == null) {    throw new KeyNotFoundException();  }  if ((genericKey == FieldKey.TRACK) || (genericKey == FieldKey.TRACK_TOTAL) || (genericKey == FieldKey.DISC_NO)|| (genericKey == FieldKey.DISC_TOTAL)) {    try {      int number=Integer.parseInt(value);      if (genericKey == FieldKey.TRACK) {        return new Mp4TrackField(number);      } else       if (genericKey == FieldKey.TRACK_TOTAL) {        return new Mp4TrackField(0,number);      } else       if (genericKey == FieldKey.DISC_NO) {        return new Mp4DiscNoField(number);      } else       if (genericKey == FieldKey.DISC_TOTAL) {        return new Mp4DiscNoField(0,number);      }    } catch (    NumberFormatException nfe) {      throw new FieldDataInvalidException("Value " + value + " is not a number as required",nfe);    }  } else   if (genericKey == FieldKey.GENRE) {    if (TagOptionSingleton.getInstance().isWriteMp4GenresAsText()) {      return new Mp4TagTextField(GENRE_CUSTOM.getFieldName(),value);    }    if (Mp4GenreField.isValidGenre(value)) {      return new Mp4GenreField(value);    } else {      return new Mp4TagTextField(GENRE_CUSTOM.getFieldName(),value);    }  }  return createField(tagFieldToMp4Field.get(genericKey),value);}  }
class C{  public void testWrite4() throws Exception {  try {    new CipherOutputStream(new BufferedOutputStream((OutputStream)null),new NullCipher()).write(new byte[]{0},1,Integer.MAX_VALUE);  } catch (  IllegalArgumentException e) {  }}  }
class C{  public ScriptObject(final String name,final String script,final ScriptingLanguage language,final Bindings bindings){  Reject.ifNull(name,script,language);  this.name=name;  this.script=script;  this.language=language;  this.bindings=bindings;}  }
class C{  public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY){  this(context,interpolator,true);}  }
class C{  private static boolean isTainted(Collection<?> c){  try {    checkTypeSafe(c);  } catch (  IllegalArgumentException e) {    return true;  }  return false;}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  handler.pushElemTemplateElement(elem);}  }
class C{  public void updateAttribute(String name,String value){  updateAttribute(name,value,true);}  }
class C{  public PlaDirection(double p_angle_rad){  this((long)(Math.cos(p_angle_rad) * 10000),(long)(Math.sin(p_angle_rad) * 10000),false);}  }
class C{  public String valueToString(Object value) throws ParseException {  if (value == null) {    return "";  }  Format f=getFormat();  if (f == null) {    return value.toString();  }  return f.format(value);}  }
class C{  public Polynomial25519(long x){  c[0]=x;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  protected void close() throws IOException {  shutdownEntry();  if (connection.isOpen())   connection.close();}  }
class C{  public AMPassword(char[] pw){  int i;  int length=pw.length;  cleared=false;  password=new char[length];  System.arraycopy(pw,0,password,0,length);}  }
class C{  public void visitTypeArgument(){}  }
class C{  @Override public void invoke(Request request,Response response) throws IOException, ServletException {  Context context=request.getContext();  if (context == null) {    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,sm.getString("standardHost.noContext"));    return;  }  String sessionId=request.getRequestedSessionId();  Manager manager=context.getManager();  if (sessionId != null && manager instanceof StoreManager) {    Store store=((StoreManager)manager).getStore();    if (store != null) {      Session session=null;      try {        session=store.load(sessionId);      } catch (      Exception e) {        container.getLogger().error("deserializeError");      }      if (session != null) {        if (!session.isValid() || isSessionStale(session,System.currentTimeMillis())) {          if (container.getLogger().isDebugEnabled()) {            container.getLogger().debug("session swapped in is invalid or expired");          }          session.expire();          store.remove(sessionId);        } else {          session.setManager(manager);          manager.add(session);          session.access();          session.endAccess();        }      }    }  }  if (container.getLogger().isDebugEnabled()) {    container.getLogger().debug("sessionId: " + sessionId);  }  getNext().invoke(request,response);  if (!request.isAsync()) {    Session hsess;    try {      hsess=request.getSessionInternal(false);    } catch (    Exception ex) {      hsess=null;    }    String newsessionId=null;    if (hsess != null) {      newsessionId=hsess.getIdInternal();    }    if (container.getLogger().isDebugEnabled()) {      container.getLogger().debug("newsessionId: " + newsessionId);    }    if (newsessionId != null) {      try {        bind(context);        if (manager instanceof StoreManager) {          Session session=manager.findSession(newsessionId);          Store store=((StoreManager)manager).getStore();          if (store != null && session != null && session.isValid() && !isSessionStale(session,System.currentTimeMillis())) {            store.save(session);            ((StoreManager)manager).removeSuper(session);            session.recycle();          } else {            if (container.getLogger().isDebugEnabled()) {              container.getLogger().debug("newsessionId store: " + store + " session: "+ session+ " valid: "+ (session == null ? "N/A" : Boolean.toString(session.isValid()))+ " stale: "+ isSessionStale(session,System.currentTimeMillis()));            }          }        } else {          if (container.getLogger().isDebugEnabled()) {            container.getLogger().debug("newsessionId Manager: " + manager);          }        }      }  finally {        unbind(context);      }    }  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ContextEjb[");  sb.append("name=");  sb.append(getName());  if (getDescription() != null) {    sb.append(", description=");    sb.append(getDescription());  }  if (getType() != null) {    sb.append(", type=");    sb.append(getType());  }  if (home != null) {    sb.append(", home=");    sb.append(home);  }  if (remote != null) {    sb.append(", remote=");    sb.append(remote);  }  if (link != null) {    sb.append(", link=");    sb.append(link);  }  sb.append("]");  return (sb.toString());}  }
class C{  public static SearchResultEntry newSearchResultEntry(final String name){  final Entry entry=new LinkedHashMapEntry().setName(name);  return new SearchResultEntryImpl(entry);}  }
class C{  public final boolean equals(Object obj){  if (toString() == null) {    return (obj != null) && (obj.toString() == null);  }  if (obj instanceof Encoding) {    return toString().equals(obj.toString());  }  return false;}  }
class C{  public static void main(final String[] args){  final int retCode=new MakeLDIF().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  public static DTMIterator newDTMIterator(Compiler compiler,int opPos,boolean isTopLevel) throws javax.xml.transform.TransformerException {  int firstStepPos=OpMap.getFirstChildPos(opPos);  int analysis=analyze(compiler,firstStepPos,0);  boolean isOneStep=isOneStep(analysis);  DTMIterator iter;  if (isOneStep && walksSelfOnly(analysis) && isWild(analysis)&& !hasPredicate(analysis)) {    if (DEBUG_ITERATOR_CREATION)     diagnoseIterator("SelfIteratorNoPredicate",analysis,compiler);    iter=new SelfIteratorNoPredicate(compiler,opPos,analysis);  } else   if (walksChildrenOnly(analysis) && isOneStep) {    if (isWild(analysis) && !hasPredicate(analysis)) {      if (DEBUG_ITERATOR_CREATION)       diagnoseIterator("ChildIterator",analysis,compiler);      iter=new ChildIterator(compiler,opPos,analysis);    } else {      if (DEBUG_ITERATOR_CREATION)       diagnoseIterator("ChildTestIterator",analysis,compiler);      iter=new ChildTestIterator(compiler,opPos,analysis);    }  } else   if (isOneStep && walksAttributes(analysis)) {    if (DEBUG_ITERATOR_CREATION)     diagnoseIterator("AttributeIterator",analysis,compiler);    iter=new AttributeIterator(compiler,opPos,analysis);  } else   if (isOneStep && !walksFilteredList(analysis)) {    if (!walksNamespaces(analysis) && (walksInDocOrder(analysis) || isSet(analysis,BIT_PARENT))) {      if (false || DEBUG_ITERATOR_CREATION)       diagnoseIterator("OneStepIteratorForward",analysis,compiler);      iter=new OneStepIteratorForward(compiler,opPos,analysis);    } else {      if (false || DEBUG_ITERATOR_CREATION)       diagnoseIterator("OneStepIterator",analysis,compiler);      iter=new OneStepIterator(compiler,opPos,analysis);    }  } else   if (isOptimizableForDescendantIterator(compiler,firstStepPos,0)) {    if (DEBUG_ITERATOR_CREATION)     diagnoseIterator("DescendantIterator",analysis,compiler);    iter=new DescendantIterator(compiler,opPos,analysis);  } else {    if (isNaturalDocOrder(compiler,firstStepPos,0,analysis)) {      if (false || DEBUG_ITERATOR_CREATION) {        diagnoseIterator("WalkingIterator",analysis,compiler);      }      iter=new WalkingIterator(compiler,opPos,analysis,true);    } else {      if (DEBUG_ITERATOR_CREATION)       diagnoseIterator("WalkingIteratorSorted",analysis,compiler);      iter=new WalkingIteratorSorted(compiler,opPos,analysis,true);    }  }  if (iter instanceof LocPathIterator)   ((LocPathIterator)iter).setIsTopLevel(isTopLevel);  return iter;}  }
class C{  public void addSubject(String subjectName,Subject subject,boolean exclusive) throws NameAlreadyExistsException {  if (subjectName == null) {    subjectName="Subject:" + ServiceTypeManager.generateRandomName();  }  if (users.containsKey(subjectName)) {    String[] objs={subjectName};    throw (new NameAlreadyExistsException(ResBundleUtils.rbName,"name_already_present",objs,subjectName,PolicyException.USER_COLLECTION));  }  users.put(subjectName,new QualifiedSubject(subject,exclusive));}  }
class C{  protected String paramString(){  StringBuffer chooserPanelsString=new StringBuffer("");  for (int i=0; i < chooserPanels.length; i++) {    chooserPanelsString.append("[" + chooserPanels[i].toString() + "]");  }  String previewPanelString=(previewPanel != null ? previewPanel.toString() : "");  return super.paramString() + ",chooserPanels=" + chooserPanelsString.toString()+ ",previewPanel="+ previewPanelString;}  }
class C{  public int alloc(int size){  int index=n;  int len=array.length;  if (n + size >= len) {    char[] aux=new char[len + blockSize];    System.arraycopy(array,0,aux,0,len);    array=aux;  }  n+=size;  return index;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(rotatedData,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  validateData();  validateAssertionConsumerServiceIndex(assertionConsumerSvcIndex);  validateAttributeConsumingServiceIndex(attrConsumingSvcIndex);  StringBuffer xmlString=new StringBuffer(1000);  xmlString.append(SAML2Constants.START_TAG);  if (includeNSPrefix) {    xmlString.append(SAML2Constants.PROTOCOL_PREFIX);  }  xmlString.append(SAML2Constants.AUTHNREQUEST).append(SAML2Constants.SPACE);  if (declareNS) {    xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR).append(SAML2Constants.NEWLINE);  }  xmlString.append(SAML2Constants.ID).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(requestId).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.VERSION).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(version).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.ISSUE_INSTANT).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(DateUtils.toUTCDateFormat(issueInstant)).append(SAML2Constants.QUOTE);  if ((destinationURI != null) && (destinationURI.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.DESTINATION).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(destinationURI).append(SAML2Constants.QUOTE);  }  if ((consent != null) && (consent.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.CONSENT).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(consent).append(SAML2Constants.QUOTE);  }  if (forceAuthn != null) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.FORCEAUTHN).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(forceAuthn.toString()).append(SAML2Constants.QUOTE);  }  if (isPassive != null) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.ISPASSIVE).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(isPassive.toString()).append(SAML2Constants.QUOTE);  }  if (assertionConsumerSvcIndex != null) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.ASSERTION_CONSUMER_SVC_INDEX).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(assertionConsumerSvcIndex.toString()).append(SAML2Constants.QUOTE);  } else {    if ((protocolBinding != null) && (protocolBinding.length() > 0)) {      xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.PROTOBINDING).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(protocolBinding).append(SAML2Constants.QUOTE);    }    if ((assertionConsumerServiceURL != null) && (assertionConsumerServiceURL.length() > 0)) {      xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.ASSERTION_CONSUMER_SVC_URL).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(XMLUtils.escapeSpecialCharacters(assertionConsumerServiceURL)).append(SAML2Constants.QUOTE);    }  }  if (attrConsumingSvcIndex != null) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.ATTR_CONSUMING_SVC_INDEX).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(attrConsumingSvcIndex.toString()).append(SAML2Constants.QUOTE);  }  if ((providerName != null) && (providerName.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.PROVIDER_NAME).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(providerName).append(SAML2Constants.QUOTE);  }  xmlString.append(SAML2Constants.END_TAG);  if (nameID != null) {    String issuerString=nameID.toXMLString(includeNSPrefix,declareNS);    xmlString.append(SAML2Constants.NEWLINE).append(issuerString);  }  if ((signatureString != null) && (signatureString.length() > 0)) {    xmlString.append(SAML2Constants.NEWLINE).append(signatureString);  }  if (extensions != null) {    xmlString.append(SAML2Constants.NEWLINE).append(extensions.toXMLString(includeNSPrefix,declareNS));  }  if (subject != null) {    xmlString.append(SAML2Constants.NEWLINE).append(subject.toXMLString(includeNSPrefix,declareNS));  }  if (nameIDPolicy != null) {    xmlString.append(SAML2Constants.NEWLINE).append(nameIDPolicy.toXMLString(includeNSPrefix,declareNS));  }  if (conditions != null) {    xmlString.append(SAML2Constants.NEWLINE).append(conditions.toXMLString(includeNSPrefix,declareNS));  }  if (reqAuthnContext != null) {    xmlString.append(SAML2Constants.NEWLINE).append(reqAuthnContext.toXMLString(includeNSPrefix,declareNS));  }  if (scoping != null) {    xmlString.append(SAML2Constants.NEWLINE).append(scoping.toXMLString(includeNSPrefix,declareNS));  }  xmlString.append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.AUTHNREQUEST).append(SAML2Constants.END_TAG);  return xmlString.toString();}  }
class C{  public boolean shove_trace_check(ShapeTile p_trace_shape,BrdFromSide p_from_side,PlaDirection p_dir,int p_layer,NetNosList p_net_no_arr,int p_cl_type,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth,TimeLimit p_time_limit){  if (is_stop_requested(p_time_limit)) {    if (r_board.debug(Mdbg.PUSH_TRACE,Ldbg.SPC_A))     r_board.userPrintln(classname + "check: stop_requested");    return false;  }  if (p_trace_shape.is_empty()) {    if (r_board.debug(Mdbg.PUSH_TRACE,Ldbg.SPC_A))     r_board.userPrintln(classname + "check: p_trace_shape is empty");    return true;  }  if (!p_trace_shape.is_contained_in(r_board.get_bounding_box())) {    r_board.shove_fail_obstacle_set(r_board.get_outline());    return false;  }  AlgoShoveTraceEntries shape_entries=new AlgoShoveTraceEntries(p_trace_shape,p_layer,p_net_no_arr,p_cl_type,p_from_side,r_board);  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  Collection<BrdItem> obstacles=search_tree.find_overlap_items_with_clearance(p_trace_shape,p_layer,NetNosList.EMPTY,p_cl_type);  obstacles.removeAll(get_ignore_items_at_tie_pins(p_trace_shape,p_layer,p_net_no_arr));  boolean obstacles_shovable=shape_entries.store_items(obstacles,false,true);  if (!obstacles_shovable) {    BrdItem obstacle=shape_entries.get_found_obstacle();    if (r_board.debug(Mdbg.PUSH_TRACE,Ldbg.SPC_A))     r_board.userPrintln(classname + "check: !obstacles_shovable " + obstacle);    r_board.shove_fail_obstacle_set(obstacle);    return false;  }  int trace_piece_count=shape_entries.substitute_trace_count();  if (shape_entries.stack_depth() > 1) {    BrdItem obstacle=shape_entries.get_found_obstacle();    if (r_board.debug(Mdbg.PUSH_TRACE,Ldbg.SPC_A))     r_board.userPrintln(classname + "check: !obstacles_shovable " + obstacle);    r_board.shove_fail_obstacle_set(obstacle);    return false;  }  double shape_radius=0.5 * p_trace_shape.bounding_box().min_width();  for (  BrdAbitVia curr_shove_via : shape_entries.shove_via_list) {    if (curr_shove_via.shares_net_no(p_net_no_arr))     continue;    if (p_max_via_recursion_depth <= 0) {      if (r_board.debug(Mdbg.PUSH_TRACE,Ldbg.SPC_A))       r_board.userPrintln(classname + "check: !p_max_via_recursion_depth <= 0 " + curr_shove_via);      r_board.shove_fail_obstacle_set(curr_shove_via);      return false;    }    PlaPointFloat curr_shove_via_center=curr_shove_via.center_get().to_float();    PlaPointInt[] try_via_centers=r_board.move_drill_algo.try_shove_via_points(p_trace_shape,p_layer,curr_shove_via,p_cl_type,true);    double max_dist=0.5 * curr_shove_via.get_shape_on_layer(p_layer).bounding_box().max_width() + shape_radius;    double max_dist_square=max_dist * max_dist;    boolean shove_via_ok=false;    for (int index=0; index < try_via_centers.length; ++index) {      if (shove_via_ok)       break;      if (index == 0 || curr_shove_via_center.distance_square(try_via_centers[index].to_float()) <= max_dist_square) {        PlaVectorInt delta=try_via_centers[index].difference_by(curr_shove_via.center_get());        Collection<BrdItem> ignore_items=new LinkedList<BrdItem>();        if (r_board.move_drill_algo.check(curr_shove_via,delta,p_max_recursion_depth,p_max_via_recursion_depth - 1,ignore_items,p_time_limit)) {          shove_via_ok=true;          break;        }      }    }    if (!shove_via_ok)     return false;  }  if (trace_piece_count == 0)   return true;  if (p_max_recursion_depth <= 0) {    BrdItem obstacle=shape_entries.get_found_obstacle();    if (r_board.debug(Mdbg.PUSH_TRACE,Ldbg.SPC_A))     r_board.userPrintln(classname + "check: p_max_recursion_depth <= 0 " + obstacle);    r_board.shove_fail_obstacle_set(obstacle);    return false;  }  for (; ; ) {    BrdTracep curr_substitute_trace=shape_entries.next_substitute_trace_piece();    if (curr_substitute_trace == null)     break;    if (p_max_spring_over_recursion_depth > 0) {      Polyline new_polyline=spring_over(curr_substitute_trace.polyline(),curr_substitute_trace.get_compensated_half_width(search_tree),p_layer,curr_substitute_trace.net_nos,curr_substitute_trace.clearance_idx(),false,p_max_spring_over_recursion_depth,null);      if (new_polyline == null)       return false;      if (new_polyline != curr_substitute_trace.polyline()) {        --p_max_spring_over_recursion_depth;        curr_substitute_trace.change_polyline(new_polyline);      }    }    for (int index=0; index < curr_substitute_trace.tile_shape_count(); ++index) {      PlaDirection curr_dir=curr_substitute_trace.polyline().plaline(index + 1).direction();      boolean is_in_front=p_dir == null || p_dir.equals(curr_dir);      if (is_in_front) {        BrdShapeAndFromSide curr=new BrdShapeAndFromSide(curr_substitute_trace,index,true);        if (!shove_trace_check(curr.shape,curr.from_side,curr_dir,p_layer,curr_substitute_trace.net_nos,curr_substitute_trace.clearance_idx(),p_max_recursion_depth - 1,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,p_time_limit)) {          return false;        }      }    }  }  return true;}  }
class C{  public DTMIterator createDTMIterator(Object xpathCompiler,int pos){  return m_dtmManager.createDTMIterator(xpathCompiler,pos);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  protected TextAttribute(String name){  super(name);}  }
class C{  public boolean isIgnoringElementContentWhitespace(){  return false;}  }
class C{  final boolean tryMatchData(){  Object x=item;  if (x != null && x != this && casItem(x,null)) {    LockSupport.unpark(waiter);    return true;  }  return false;}  }
class C{  private static int[] subtract(int[] big,long val){  int highWord=(int)(val >>> 32);  int bigIndex=big.length;  int result[]=new int[bigIndex];  long difference=0;  if (highWord == 0) {    difference=(big[--bigIndex] & LONG_MASK) - val;    result[bigIndex]=(int)difference;  } else {    difference=(big[--bigIndex] & LONG_MASK) - (val & LONG_MASK);    result[bigIndex]=(int)difference;    difference=(big[--bigIndex] & LONG_MASK) - (highWord & LONG_MASK) + (difference >> 32);    result[bigIndex]=(int)difference;  }  boolean borrow=(difference >> 32 != 0);  while (bigIndex > 0 && borrow)   borrow=((result[--bigIndex]=big[bigIndex] - 1) == -1);  while (bigIndex > 0)   result[--bigIndex]=big[bigIndex];  return result;}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  public FSAssertion createFSAssertion(String id,AssertionArtifact artifact,String realm,String spEntityID,NameIdentifier spHandle,NameIdentifier idpHandle,String inResponseTo,int assertionMinorVersion) throws FSException, SAMLException {  FSUtils.debug.message("FSAssertionManager.createFSAssertion(id): Called");  if ((id == null) || (spEntityID == null)) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionManager: null input for" + " method createFSAssertion.");    }    throw new FSException("nullInput",null);  }  String destID=spEntityID;  String authMethod=null;  String authnContextStatementRef=null;  String authnContextClassRef=null;  Date authInstant=null;  String securityDomain=null;  Object token=null;  String univId=null;  SubjectLocality authLocality=null;  FSSessionManager sessionManager=FSSessionManager.getInstance(metaAlias);  IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();  Map attributes=new HashMap();  if (metaManager != null) {    BaseConfigType idpConfig=null;    try {      idpConfig=metaManager.getIDPDescriptorConfig(realm,hostEntityId);    } catch (    IDFFMetaException e) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAssertionManager.createFSAssertion: exception while" + " obtaining idp extended meta:",e);      }      idpConfig=null;    }    if (idpConfig != null) {      attributes=IDFFMetaUtils.getAttributes(idpConfig);    }  }  try {    SessionProvider sessionProvider=SessionManager.getProvider();    token=sessionProvider.getSession(id);    String[] strAuthInst=null;    try {      strAuthInst=sessionProvider.getProperty(token,SessionProvider.AUTH_INSTANT);    } catch (    UnsupportedOperationException ue) {      if (FSUtils.debug.warningEnabled()) {        FSUtils.debug.warning("FSAssertionManager.createFSAssertion(id):",ue);      }    }catch (    SessionException se) {      if (FSUtils.debug.warningEnabled()) {        FSUtils.debug.warning("FSAssertionManager.createFSAssertion(id):",se);      }    }    if ((strAuthInst != null) && (strAuthInst.length >= 1)) {      try {        authInstant=DateUtils.stringToDate(strAuthInst[0]);      } catch (      ParseException ex) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSAssertionManager." + "createFSAssertion(id): AuthInstant not found" + "in the Token");        }      }    } else {      authInstant=newDate();    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionManager.createFSAssertion(id):AuthInstant = " + authInstant);    }    try {      String[] strAuthMethod=sessionProvider.getProperty(token,SessionProvider.AUTH_METHOD);      if ((strAuthMethod != null) && (strAuthMethod.length >= 1)) {        authMethod=strAuthMethod[0];      }    } catch (    UnsupportedOperationException ue) {      if (FSUtils.debug.warningEnabled()) {        FSUtils.debug.warning("FSAssertionManager.createFSAssertion(id):",ue);      }    }catch (    SessionException se) {      if (FSUtils.debug.warningEnabled()) {        FSUtils.debug.warning("FSAssertionManager.createFSAssertion(id):",se);      }    }    String assertionIssuer=IDFFMetaUtils.getFirstAttributeValue(attributes,IFSConstants.ASSERTION_ISSUER);    if (assertionIssuer == null) {      assertionIssuer=SystemConfigurationUtil.getProperty("com.iplanet.am.server.host");    }    try {      String ipAddress=InetAddress.getByName(assertionIssuer).getHostAddress();      authLocality=new SubjectLocality(ipAddress,assertionIssuer);    } catch (    UnknownHostException uhe) {      FSUtils.debug.error("FSAssertionManager.constructor: couldn't" + " obtain the localhost's ipaddress:",uhe);    }    try {      FSSession session=sessionManager.getSession(token);      authnContextClassRef=session.getAuthnContext();      authnContextStatementRef=authnContextClassRef;    } catch (    Exception ex) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAssertionManager.createFSAssertion" + "(id): AuthnContextStatement for the token is null" + " Assertion will not contain any "+ " AuthenticationStatement");      }      authnContextStatementRef=null;    }    if (authnContextStatementRef != null) {      if (assertionMinorVersion == IFSConstants.FF_11_ASSERTION_MINOR_VERSION) {        authMethod=IFSConstants.AC_XML_NS;      } else {        authMethod=IFSConstants.AC_12_XML_NS;      }    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionManager.createFSAssertion(id):" + "AuthnContextStatement used for authenticating the user: " + authnContextStatementRef);    }    univId=sessionProvider.getPrincipalName(token);    securityDomain=hostEntityId;  } catch (  Exception e) {    FSUtils.debug.error("FSAssertionManager.createAssertion(id):" + " exception retrieving info from the session: ",e);    throw new FSException("alliance_manager_no_local_descriptor",null,e);  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionManager.createAssertion(id):" + " Creating Authentication Assertion for user with" + "opaqueHandle= " + spHandle.getName() + " And SecurityDomain= "+ securityDomain);  }  SubjectConfirmation subConfirmation=null;  String artString=null;  if (artifact != null) {    artString=artifact.getAssertionArtifact();    if (assertionMinorVersion == IFSConstants.FF_11_ASSERTION_MINOR_VERSION) {      subConfirmation=new SubjectConfirmation(SAMLConstants.DEPRECATED_CONFIRMATION_METHOD_ARTIFACT);    } else {      subConfirmation=new SubjectConfirmation(SAMLConstants.CONFIRMATION_METHOD_ARTIFACT);    }    subConfirmation.setSubjectConfirmationData(artString);  } else {    subConfirmation=new SubjectConfirmation(SAMLConstants.CONFIRMATION_METHOD_BEARER);  }  IDPProvidedNameIdentifier idpNi=null;  if (assertionMinorVersion == IFSConstants.FF_12_POST_ASSERTION_MINOR_VERSION || assertionMinorVersion == IFSConstants.FF_12_ART_ASSERTION_MINOR_VERSION) {    idpNi=new IDPProvidedNameIdentifier(idpHandle.getName(),idpHandle.getNameQualifier(),spHandle.getFormat());    idpNi.setMinorVersion(IFSConstants.FF_12_PROTOCOL_MINOR_VERSION);  } else {    idpNi=new IDPProvidedNameIdentifier(idpHandle.getNameQualifier(),idpHandle.getName());  }  FSSubject sub=new FSSubject(spHandle,subConfirmation,idpNi);  AuthnContext authnContext=new AuthnContext(authnContextClassRef,authnContextStatementRef);  authnContext.setMinorVersion(assertionMinorVersion);  FSAuthenticationStatement statement=new FSAuthenticationStatement(authMethod,authInstant,sub,authLocality,null,authnContext);  FSSession session=sessionManager.getSession(univId,id);  if (session == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionManager.createAssertion(id): " + "AssertionManager could not find a valid Session for" + "userId: " + univId + " SessionID: "+ id);    }    return null;  }  String sessionIndex=session.getSessionIndex();  if (sessionIndex == null) {    sessionIndex=SAMLUtils.generateID();    session.setSessionIndex(sessionIndex);  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionManager.createAssertion(id): SessionIndex: " + sessionIndex);  }  statement.setSessionIndex(sessionIndex);  Date issueInstant=newDate();  FSUtils.debug.message("here before date");  Date notAfter;  if (artifact != null) {    notAfter=new Date(issueInstant.getTime() + artifactTimeout);  } else {    notAfter=new Date(issueInstant.getTime() + assertionTimeout);  }  FSUtils.debug.message("here after date");  statement.setReauthenticateOnOrAfter(notAfter);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionManager.createAssertion(id):" + " Authentication Statement: " + statement.toXMLString());  }  Conditions cond=new Conditions(null,notAfter);  if ((destID != null) && (destID.length() != 0)) {    List targets=new ArrayList();    targets.add(destID);    cond.addAudienceRestrictionCondition(new AudienceRestrictionCondition(targets));  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionManager.createAssertion(id):" + " Authentication Statement: " + statement.toXMLString());  }  AttributeStatement attribStatement=null;  Advice advice=null;  String generateBootstrapping=IDFFMetaUtils.getFirstAttributeValue(attributes,IFSConstants.GENERATE_BOOTSTRAPPING);  if (assertionMinorVersion != IFSConstants.FF_11_ASSERTION_MINOR_VERSION && (generateBootstrapping != null && generateBootstrapping.equals("true"))) {    AuthnContext authContext=new AuthnContext(null,authnContextStatementRef);    authContext.setMinorVersion(IFSConstants.FF_12_PROTOCOL_MINOR_VERSION);    try {      FSDiscoveryBootStrap bootStrap=new FSDiscoveryBootStrap(token,authContext,sub,univId,destID,realm);      attribStatement=bootStrap.getBootStrapStatement();      if (bootStrap.hasCredentials()) {        advice=bootStrap.getCredentials();      }    } catch (    Exception e) {      FSUtils.debug.error("FSAssertionManager.createAssertion(id):" + "exception when generating bootstrapping resource " + "offering:",e);    }  }  AssertionIDReference aID=new AssertionIDReference();  Set statements=new HashSet();  statements.add(statement);  if (attribStatement != null) {    statements.add(attribStatement);  }  String attributePluginImpl=IDFFMetaUtils.getFirstAttributeValue(attributes,IFSConstants.ATTRIBUTE_PLUGIN);  if ((attributePluginImpl != null) && (attributePluginImpl.length() != 0)) {    try {      Object pluginClass=Thread.currentThread().getContextClassLoader().loadClass(attributePluginImpl).newInstance();      List attribStatements=null;      if (pluginClass instanceof FSRealmAttributePlugin) {        FSRealmAttributePlugin attributePlugin=(FSRealmAttributePlugin)pluginClass;        attribStatements=attributePlugin.getAttributeStatements(realm,hostEntityId,destID,sub,token);      } else       if (pluginClass instanceof FSAttributePlugin) {        FSAttributePlugin attributePlugin=(FSAttributePlugin)pluginClass;        attribStatements=attributePlugin.getAttributeStatements(hostEntityId,destID,sub,token);      }      if ((attribStatements != null) && (attribStatements.size() != 0)) {        Iterator iter=attribStatements.iterator();        while (iter.hasNext()) {          statements.add((AttributeStatement)iter.next());        }      }    } catch (    Exception ex) {      FSUtils.debug.error("FSAssertion.createAssertion(id):getAttributePlugin:",ex);    }  }  if (IDFFMetaUtils.isAutoFedEnabled(attributes)) {    AttributeStatement autoFedStatement=FSAttributeStatementHelper.getAutoFedAttributeStatement(realm,hostEntityId,sub,token);    statements.add(autoFedStatement);  }  FSAssertion assertion=new FSAssertion(aID.getAssertionIDReference(),hostEntityId,issueInstant,cond,advice,statements,inResponseTo);  assertion.setMinorVersion(assertionMinorVersion);  assertion.setID(aID.getAssertionIDReference());  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionManager.createAssertion(id):" + " Assertion created successfully: " + assertion.toXMLString());  }  String aIDString=assertion.getAssertionID();  Entry entry=new Entry(assertion,destID,artString,token);  Integer maxNumber=null;  try {    int temp=Integer.parseInt(IDFFMetaUtils.getFirstAttributeValue(attributes,IFSConstants.ASSERTION_LIMIT));    maxNumber=new Integer(temp);  } catch (  Exception ex) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionManager.createAssertion(id):" + " Assertion MAX number configuration not found in " + "FSConfig. Using Default");    }    maxNumber=null;  }  if (maxNumber == null) {    maxNumber=new Integer(IFSConstants.ASSERTION_MAX_NUMBER_DEFAULT);  }  int maxValue=maxNumber.intValue();  if ((maxValue != 0) && (idEntryMap.size() > maxValue)) {    FSUtils.debug.error("FSAssertionManager.createAssertion: " + "reached maxNumber of assertions.");    throw new FSException("errorCreateAssertion",null);  }  Object oldEntry=null;  try {synchronized (idEntryMap) {      oldEntry=idEntryMap.put(aIDString,entry);    }    if ((agent != null) && agent.isRunning() && (idffSvc != null)) {      idffSvc.setAssertions((long)idEntryMap.size());    }  } catch (  Exception e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionManager: couldn't add " + "to idEntryMap.",e);    }    throw new FSException("errorCreateAssertion",null);  }  if (LogUtil.isAccessLoggable(Level.FINER)) {    String[] data={assertion.toString()};    LogUtil.access(Level.FINER,LogUtil.CREATE_ASSERTION,data,token);  } else {    String[] data={assertion.getAssertionID()};    LogUtil.access(Level.INFO,LogUtil.CREATE_ASSERTION,data,token);  }  if (artString != null) {    try {synchronized (artIdMap) {        oldEntry=artIdMap.put(artString,aIDString);      }      if ((agent != null) && agent.isRunning() && (idffSvc != null)) {        idffSvc.setArtifacts((long)artIdMap.size());      }    } catch (    Exception e) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAssertionManager: couldn't add " + "artifact to the artIdMap.",e);      }      throw new FSException("errorCreateArtifact",null);    }    if (oldEntry != null) {      artifactTimeoutRunnable.removeElement(aIDString);    }    artifactTimeoutRunnable.addElement(aIDString);  } else {    if (oldEntry != null) {      assertionTimeoutRunnable.removeElement(aIDString);    }    assertionTimeoutRunnable.addElement(aIDString);  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionManager.createAssertion(id):" + " Returning Assertion: " + assertion.toXMLString());  }  return assertion;}  }
class C{  ConstantInteger(final DataInput file) throws IOException {  super(Const.CONSTANT_Integer);  this.bytes=file.readInt();}  }
class C{  public TemplateList(){  super();}  }
class C{  private static boolean isConfigAcceptable(TaskBackendCfg config,List<LocalizableMessage> unacceptableReasons,String taskBackingFile){  boolean configIsAcceptable=true;  try {    String tmpBackingFile=config.getTaskBackingFile();    if (taskBackingFile == null || !taskBackingFile.equals(tmpBackingFile)) {      File f=getFileForPath(tmpBackingFile);      if (f.exists()) {        if (taskBackingFile != null) {          unacceptableReasons.add(ERR_TASKBE_BACKING_FILE_EXISTS.get(tmpBackingFile));          configIsAcceptable=false;        }      } else {        File p=f.getParentFile();        if (p == null) {          unacceptableReasons.add(ERR_TASKBE_INVALID_BACKING_FILE_PATH.get(tmpBackingFile));          configIsAcceptable=false;        } else         if (!p.exists()) {          unacceptableReasons.add(ERR_TASKBE_BACKING_FILE_MISSING_PARENT.get(p.getPath(),tmpBackingFile));          configIsAcceptable=false;        } else         if (!p.isDirectory()) {          unacceptableReasons.add(ERR_TASKBE_BACKING_FILE_PARENT_NOT_DIRECTORY.get(p.getPath(),tmpBackingFile));          configIsAcceptable=false;        }      }    }  } catch (  Exception e) {    logger.traceException(e);    unacceptableReasons.add(ERR_TASKBE_ERROR_GETTING_BACKING_FILE.get(getExceptionMessage(e)));    configIsAcceptable=false;  }  return configIsAcceptable;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatasetdatanomodificationallowederrEE.class,args);}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange(),currentItem);  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  public static long reverseBytes(long v){  v=((v >>> 8) & 0x00FF00FF00FF00FFL) | ((v & 0x00FF00FF00FF00FFL) << 8);  v=((v >>> 16) & 0x0000FFFF0000FFFFL) | ((v & 0x0000FFFF0000FFFFL) << 16);  return ((v >>> 32)) | ((v) << 32);}  }
class C{  private Map<AdministratorProperty,Object> makePropertiesFromAdministratorAttrs(RDN rdn,Iterable<Attribute> attrs){  Map<AdministratorProperty,Object> result=new HashMap<>();  result.put(AdministratorProperty.ADMINISTRATOR_DN,rdn + "," + getAdministratorContainerDN());  for (  Attribute attr : attrs) {    AttributeType attrName=attr.getAttributeDescription().getAttributeType();    if (attrName.hasName("cn")) {      result.put(AdministratorProperty.UID,attr.firstValueAsString());    } else     if (attrName.hasName("userpassword")) {      result.put(AdministratorProperty.PASSWORD,new String(attr.firstValue().toByteArray()));    } else     if (attrName.hasName("description")) {      result.put(AdministratorProperty.DESCRIPTION,attr.firstValueAsString());    } else     if (attrName.hasName("ds-privilege-name")) {      LinkedHashSet<String> privileges=new LinkedHashSet<>();      toStrings(privileges,attr);      result.put(AdministratorProperty.PRIVILEGE,privileges);    }  }  return result;}  }
class C{  synchronized void ignoreSync(){  sync=null;}  }
class C{  public synchronized void add(int op,Attribute attr){  Modification mod=new Modification(ModificationType.valueOf(op),attr);  modifications.add(mod);}  }
class C{  protected int drawUnselectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  Container c=getContainer();  if (c instanceof JPasswordField) {    JPasswordField f=(JPasswordField)c;    if (!f.echoCharIsSet()) {      return super.drawUnselectedText(g,x,y,p0,p1);    }    if (f.isEnabled()) {      g.setColor(f.getForeground());    } else {      g.setColor(f.getDisabledTextColor());    }    char echoChar=f.getEchoChar();    int n=p1 - p0;    for (int i=0; i < n; i++) {      x=drawEchoCharacter(g,x,y,echoChar);    }  }  return x;}  }
class C{  private void readLayersFromDictionary(){  PdfArray ocgs=getPdfObject().getAsArray(PdfName.OCGs);  if (ocgs == null || ocgs.isEmpty())   return;  Map<PdfIndirectReference,PdfLayer> layerMap=new TreeMap<PdfIndirectReference,PdfLayer>();  for (int ind=0; ind < ocgs.size(); ind++) {    PdfLayer currentLayer=new PdfLayer(ocgs.getAsDictionary(ind).makeIndirect(getDocument()));    currentLayer.onPanel=false;    layerMap.put(currentLayer.getIndirectReference(),currentLayer);  }  PdfDictionary d=getPdfObject().getAsDictionary(PdfName.D);  if (d != null && !d.isEmpty()) {    PdfArray off=d.getAsArray(PdfName.OFF);    if (off != null) {      for (int i=0; i < off.size(); i++) {        PdfObject offLayer=off.get(i,false);        layerMap.get((PdfIndirectReference)offLayer).on=false;      }    }    PdfArray locked=d.getAsArray(PdfName.Locked);    if (locked != null) {      for (int i=0; i < locked.size(); i++) {        PdfObject lockedLayer=locked.get(i,false);        layerMap.get((PdfIndirectReference)lockedLayer).locked=true;      }    }    PdfArray orderArray=d.getAsArray(PdfName.Order);    if (orderArray != null && !orderArray.isEmpty())     readOrderFromDictionary(null,orderArray,layerMap);  }  for (  PdfLayer layer : layerMap.values()) {    if (!layer.isOnPanel())     layers.add(layer);  }}  }
class C{  public String basicTypeNameBoxed(Field field){  return javaCommon.boxedTypeName(basicTypeName(field));}  }
class C{  public void testSubsnotify(){  this.subscriber.sendSubscribe(5065);}  }
class C{  public StartTlsRequest(){}  }
class C{  @SuppressWarnings("unchecked") public void writeBytes(byte[] x) throws SQLException {  attribs.add(x);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof CertAuthPrincipal)) {    return false;  }  CertAuthPrincipal that=(CertAuthPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  public void test_getInstanceLjava_lang_String01() throws NoSuchAlgorithmException {  for (  String validValue : getValidValues()) {    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(validValue);    assertTrue("Not TrustManagerFactory object",trustMF instanceof TrustManagerFactory);    assertEquals("Invalid algorithm",trustMF.getAlgorithm(),validValue);  }}  }
class C{  public synchronized void write(byte b[],int off,int len) throws IOException {  out.write(b,off,len);  incCount(len);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public void testFlipBitNegativeInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=45;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-14,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public TabRenderer(Tab tab){  super(tab);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException, AMConsoleException {  removePageSessionAttribute(PAGE_MODIFIED);  AMViewBeanBase vb=getPreviousPage();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  LogReaderPool(File file,RecordParser<K,V> parser){  this.file=file;  this.parser=parser;}  }
class C{  public MalformedChallengeException(){  super();}  }
class C{  public void unregisterClientConnection(ClientConnection connection){  connectionList.remove(connection);}  }
class C{  public AssertionError(long detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  public FactoryConfigurationError(java.lang.String msg){  super(msg);}  }
class C{  public FrameBodyTSOP(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public Mp4TrackField(int trackNo){  super(Mp4FieldKey.TRACK.getFieldName(),String.valueOf(trackNo));  numbers=new ArrayList<Short>();  numbers.add(new Short("0"));  numbers.add((short)trackNo);  numbers.add(new Short("0"));  numbers.add(new Short("0"));}  }
class C{  boolean isAcceptLicenseMode(){  return isAcceptLicenseMode;}  }
class C{  private <T>void construct(T implementation,Class<T> mbeanInterface,boolean nullImplementationAllowed,boolean isMXBean) throws NotCompliantMBeanException {  if (implementation == null) {    if (nullImplementationAllowed)     implementation=Util.<T>cast(this); else     throw new IllegalArgumentException("implementation is null");  }  if (isMXBean) {    if (mbeanInterface == null) {      mbeanInterface=Util.cast(Introspector.getMXBeanInterface(implementation.getClass()));    }    this.mbean=new MXBeanSupport(implementation,mbeanInterface);  } else {    if (mbeanInterface == null) {      mbeanInterface=Util.cast(Introspector.getStandardMBeanInterface(implementation.getClass()));    }    this.mbean=new StandardMBeanSupport(implementation,mbeanInterface);  }}  }
class C{  public DSAPublicKeySpec(BigInteger y,BigInteger p,BigInteger q,BigInteger g){  this.y=y;  this.p=p;  this.q=q;  this.g=g;}  }
class C{  void delete(){  shutdown();  removeECLDomainCfg();}  }
class C{  public SAMLException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  private void createTopContainerEntry() throws ADSContextException {  AddRequest request=newAddRequest(getAdministrationSuffixDN()).addAttribute("objectclass","top","ds-cfg-branch");  createEntry(request);}  }
class C{  public boolean containsExcludeResultPrefix(String prefix,String uri){  if (null == m_ExcludeResultPrefixs || uri == null)   return false;  for (int i=0; i < m_ExcludeResultPrefixs.size(); i++) {    if (uri.equals(getNamespaceForPrefix(m_ExcludeResultPrefixs.elementAt(i))))     return true;  }  return false;}  }
class C{  public boolean boolValue(){  if (type == BOOLEAN)   return boolValue; else   return longValue != 0;}  }
class C{  void addUser(String username,String password,String roles){  ArrayList<String> list=new ArrayList<>();  roles+=",";  while (true) {    int comma=roles.indexOf(',');    if (comma < 0)     break;    String role=roles.substring(0,comma).trim();    list.add(role);    roles=roles.substring(comma + 1);  }  GenericPrincipal principal=new GenericPrincipal(username,password,list);  principals.put(username,principal);}  }
class C{  @Override public boolean has(final int index,final Scriptable start){  return false;}  }
class C{  public synchronized void policyChanged(PolicyEvent evt){  if (debug.messageEnabled()) {    debug.message("PolicyDecisionCacheListener.policyChanged()");  }  if (evt == null) {    debug.error("PolicyDecisionCacheListener.policyChanged(): " + "invalid policy event");    return;  }  Set resourceNames=evt.getResourceNames();  if (debug.messageEnabled()) {    debug.message("PolicyDecisionCacheListener.policyChanged(): " + "resource names from the policy event :" + resourceNames.toString());  }  if (!(resultsCache.isEmpty()) && !(resourceNames.isEmpty())) {    Map svcValue=(Map)resultsCache.get(serviceName);    if (svcValue != null) {      Set rscInCache=svcValue.keySet();      Iterator rscInCacheIter=rscInCache.iterator();      while (rscInCacheIter.hasNext()) {        String rscValueInCache=(String)rscInCacheIter.next();        Iterator resourceNamesIter=resourceNames.iterator();        while (resourceNamesIter.hasNext()) {          String resourceNameValue=(String)resourceNamesIter.next();          ResourceMatch match=resourceNameUtil.compare(rscValueInCache,resourceNameValue,true);          if (!(match.equals(ResourceMatch.NO_MATCH))) {            rscInCacheIter.remove();            if (debug.messageEnabled()) {              debug.message("PolicyDecisionCacheListener." + "policyChanged(): cache wiped out for " + rscValueInCache);            }            break;          }        }      }    }  }}  }
class C{  public static Intent createGetContentIntent(){  final Intent intent=new Intent(Intent.ACTION_GET_CONTENT);  intent.setType("*/*");  intent.addCategory(Intent.CATEGORY_OPENABLE);  return intent;}  }
class C{  public MetaState(MetaState state){  setMetaState(state);}  }
class C{  protected String resolvePrefix(SerializationHandler rhandler,String prefix,String nodeNamespace) throws TransformerException {  return prefix;}  }
class C{  @Override public void bind(Name name,Object obj) throws NamingException {  bind(name,obj,false);}  }
class C{  public Map<String,MappedClass> remapClasses(Map<String,MappedClass> mappings,MappingMode mode){  for (  MappedClass mc : mappings.values()) {    if (!mc.isLibrary()) {      remapClass(mc,mappings,mode);    }  }  return mappings;}  }
class C{  private void copyChunk(final GUID guid,final InputStream source,final OutputStream destination) throws IOException {  final long chunkSize=Utils.readUINT64(source);  destination.write(guid.getBytes());  Utils.writeUINT64(chunkSize,destination);  Utils.copy(source,destination,chunkSize - 24);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Text text;  Node aNode;  Document ownerDocument;  DocumentType docType;  String system;  String value;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  text=aNewDoc.createTextNode("this is text data");  aNode=doc.importNode(text,false);  ownerDocument=aNode.getOwnerDocument();  assertNotNull("ownerDocumentNotNull",ownerDocument);  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  value=aNode.getNodeValue();  assertEquals("nodeValue","this is text data",value);}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  public ByteHolder(byte initial){  value=initial;}  }
class C{  private void add_class(){  String new_name=null;  for (; ; ) {    new_name=JOptionPane.showInputDialog(resources.getString("new_name"));    if (new_name == null)     return;    new_name=new_name.trim();    if (is_legal_class_name(new_name))     break;  }  final RoutingBoard routing_board=board_frame.board_panel.itera_board.get_routing_board();  final ClearanceMatrix clearance_matrix=routing_board.brd_rules.clearance_matrix;  boolean name_exists=false;  for (int i=0; i < clearance_matrix.get_class_count(); ++i) {    if (new_name.equals(clearance_matrix.get_name(i))) {      name_exists=true;      break;    }  }  if (name_exists)   return;  clearance_matrix.append_class(new_name);  adjust_clearance_table();}  }
class C{  public void testSimpleLiterals() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  CBORGenerator gen=cborGenerator(out);  assertEquals(0,gen.getOutputBuffered());  gen.writeBoolean(true);  assertEquals(1,gen.getOutputBuffered());  gen.close();  assertEquals(0,gen.getOutputBuffered());  _verifyBytes(out.toByteArray(),CBORConstants.BYTE_TRUE);  out=new ByteArrayOutputStream();  gen=cborGenerator(out);  gen.writeBoolean(false);  gen.close();  _verifyBytes(out.toByteArray(),CBORConstants.BYTE_FALSE);  out=new ByteArrayOutputStream();  gen=cborGenerator(out);  gen.writeNull();  gen.close();  _verifyBytes(out.toByteArray(),CBORConstants.BYTE_NULL);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node childNode;  Node clonedNode;  Node lastChildNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  childNode=childList.item(3);  clonedNode=childNode.cloneNode(false);  lastChildNode=clonedNode.getLastChild();  assertNull("noTextNodes",lastChildNode);}  }
class C{  public CircleOfTrustDescriptor(String circleOfTrustName,String realm,String circleOfTrustStatus,String circleOfTrustDescription,String circleOfTrustIDFFReaderURL,String circleOfTrustIDFFWriterURL,String circleOfTrustSAML2ReaderURL,String circleOfTrustSAML2WriterURL,Set circleOfTrustProvider) throws COTException {  setCircleOfTrustName(circleOfTrustName);  this.realm=realm;  setCircleOfTrustStatus(circleOfTrustStatus);  setCircleOfTrustDescription(circleOfTrustDescription);  if (circleOfTrustIDFFReaderURL != null) {    setIDFFReaderServiceURL(circleOfTrustIDFFReaderURL);  }  if (circleOfTrustIDFFWriterURL != null) {    setIDFFWriterServiceURL(circleOfTrustIDFFWriterURL);  }  if (circleOfTrustSAML2ReaderURL != null) {    setSAML2ReaderServiceURL(circleOfTrustSAML2ReaderURL);  }  if (circleOfTrustSAML2WriterURL != null) {    setSAML2WriterServiceURL(circleOfTrustSAML2WriterURL);  }  setTrustedProviders(circleOfTrustProvider);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentityreferencenodeattributes.class,args);}  }
class C{  public int compareTo(Object obj){  ObjectStreamField other=(ObjectStreamField)obj;  boolean isPrim=isPrimitive();  if (isPrim != other.isPrimitive()) {    return isPrim ? -1 : 1;  }  return name.compareTo(other.name);}  }
class C{  public void checkCompile(){  if (lastCompileCheck < 0) {    return;  }  long now=System.currentTimeMillis();  if (now > (lastCompileCheck + (options.getCheckInterval() * 1000L))) {    lastCompileCheck=now;  } else {    return;  }  Object[] wrappers=jsps.values().toArray();  for (int i=0; i < wrappers.length; i++) {    JspServletWrapper jsw=(JspServletWrapper)wrappers[i];    JspCompilationContext ctxt=jsw.getJspEngineContext();synchronized (jsw) {      try {        ctxt.compile();      } catch (      FileNotFoundException ex) {        ctxt.incrementRemoved();      }catch (      Throwable t) {        ExceptionUtils.handleThrowable(t);        jsw.getServletContext().log("Background compile failed",t);      }    }  }}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  private void copyTypes(final Map<String,ResourceType> types2){  for (  String name : this.typesOrder) {    types2.put(name,new ResourceType(this.types.get(name)));  }}  }
class C{  public static String leftPad(final String value,final String pad,final int length){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  validate(pad,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (value.length() > length) {    return value;  }  return append(repeat(pad,length - value.length()),value);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnamespecialvalue.class,args);}  }
class C{  public URI(String p_scheme,String p_host,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  this(p_scheme,null,p_host,-1,p_path,p_queryString,p_fragment);}  }
class C{  public ProxyRestriction createProxyRestriction(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.PROXY_RESTRICTION);  if (obj == null) {    return new ProxyRestrictionImpl();  } else {    return (ProxyRestriction)obj;  }}  }
class C{  void addFill(int row,int col){  RowView rv=getRow(row);  if (rv != null) {    rv.fillColumn(col);  }}  }
class C{  public QName(String qname,PrefixResolver resolver,boolean validate){  String prefix=null;  _namespaceURI=null;  int indexOfNSSep=qname.indexOf(':');  if (indexOfNSSep > 0) {    prefix=qname.substring(0,indexOfNSSep);    if (prefix.equals("xml")) {      _namespaceURI=S_XMLNAMESPACEURI;    } else {      _namespaceURI=resolver.getNamespaceForPrefix(prefix);    }    if (null == _namespaceURI) {      throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));    }    _localName=qname.substring(indexOfNSSep + 1);  } else   if (indexOfNSSep == 0) {    throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NAME_CANT_START_WITH_COLON,null));  } else {    _localName=qname;  }  if (validate) {    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  m_hashCode=toString().hashCode();  _prefix=prefix;}  }
class C{  protected int findSeparator(){  int bufferPos=this.head;  int tablePos=0;  while (bufferPos < this.tail) {    while (tablePos >= 0 && buffer[bufferPos] != boundary[tablePos]) {      tablePos=boundaryTable[tablePos];    }    bufferPos++;    tablePos++;    if (tablePos == boundaryLength) {      return bufferPos - boundaryLength;    }  }  return -1;}  }
class C{  protected ContentFilterRule(String ruleText){  super(ruleText);  parentSearchLevel=DEFAULT_PARENT_SEARCH_LEVEL;  int contentRuleMarkIndex=StringUtils.indexOf(ruleText,MASK_CONTENT_RULE);  int ruleStartIndex=StringUtils.indexOf(ruleText,ATTRIBUTE_START_MARK);  if (ruleStartIndex == -1) {    tagName=ruleText.substring(contentRuleMarkIndex + MASK_CONTENT_RULE.length());  } else {    tagName=ruleText.substring(contentRuleMarkIndex + MASK_CONTENT_RULE.length(),ruleStartIndex);  }  if (contentRuleMarkIndex > 0) {    String domains=ruleText.substring(0,contentRuleMarkIndex);    loadDomains(domains);  }  while (ruleStartIndex != -1) {    int equalityIndex=ruleText.indexOf(EQUAL,ruleStartIndex + 1);    int quoteStartIndex=ruleText.indexOf(QUOTES,equalityIndex + 1);    int quoteEndIndex=getQuoteIndex(ruleText,quoteStartIndex + 1);    if (quoteStartIndex == -1 || quoteEndIndex == -1) {      break;    }    int ruleEndIndex=ruleText.indexOf(ATTRIBUTE_END_MARK,quoteEndIndex + 1);    String attributeName=ruleText.substring(ruleStartIndex + 1,equalityIndex);    String attributeValue=ruleText.substring(quoteStartIndex + 1,quoteEndIndex);    attributeValue=StringUtils.replace(attributeValue,"\"\"","\"");switch (attributeName) {case TAG_CONTENT_MASK:      tagContentFilter=attributeValue;    break;case WILDCARD_MASK:  wildcard=new Wildcard(attributeValue,Pattern.DOTALL | Pattern.CASE_INSENSITIVE);break;case TAG_CONTENT_MAX_LENGTH:maxLength=NumberUtils.toInt(attributeValue);break;case TAG_CONTENT_MIN_LENGTH:minLength=NumberUtils.toInt(attributeValue);break;case PARENT_ELEMENTS:parentElements=Arrays.asList(StringUtils.split(attributeValue,','));break;case PARENT_SEARCH_LEVEL:parentSearchLevel=NumberUtils.toInt(attributeValue);break;default :attributesFilter.put(attributeName,attributeValue);break;}if (ruleEndIndex == -1) break;ruleStartIndex=ruleText.indexOf(ATTRIBUTE_START_MARK,ruleEndIndex + 1);}}  }
class C{  @Override public void clear(){  size=0;  for (int i=0; i < elementData.length; i++) {    elementData[i]=null;  }  modCount++;}  }
class C{  public EglCore(EGLContext sharedContext,int flags){  if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {    throw new RuntimeException("EGL already set up");  }  if (sharedContext == null) {    sharedContext=EGL14.EGL_NO_CONTEXT;  }  mEGLDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    throw new RuntimeException("unable to get EGL14 display");  }  int[] version=new int[2];  if (!EGL14.eglInitialize(mEGLDisplay,version,0,version,1)) {    mEGLDisplay=null;    throw new RuntimeException("unable to initialize EGL14");  }  if ((flags & FLAG_TRY_GLES3) != 0) {    EGLConfig config=getConfig(flags,3);    if (config != null) {      int[] attrib3_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,3,EGL14.EGL_NONE};      EGLContext context=EGL14.eglCreateContext(mEGLDisplay,config,sharedContext,attrib3_list,0);      if (EGL14.eglGetError() == EGL14.EGL_SUCCESS) {        mEGLConfig=config;        mEGLContext=context;        mGlVersion=3;      }    }  }  if (mEGLContext == EGL14.EGL_NO_CONTEXT) {    EGLConfig config=getConfig(flags,2);    if (config == null) {      throw new RuntimeException("Unable to find a suitable EGLConfig");    }    int[] attrib2_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};    EGLContext context=EGL14.eglCreateContext(mEGLDisplay,config,sharedContext,attrib2_list,0);    checkEglError("eglCreateContext");    mEGLConfig=config;    mEGLContext=context;    mGlVersion=2;  }  int[] values=new int[1];  EGL14.eglQueryContext(mEGLDisplay,mEGLContext,EGL14.EGL_CONTEXT_CLIENT_VERSION,values,0);  Log.d(TAG,"EGLContext created, client version " + values[0]);}  }
class C{  public static SimpleBindRequest newSimpleBindRequest(final String name,final char[] password){  Reject.ifNull(name,password);  return new SimpleBindRequestImpl(name,getBytes(password));}  }
class C{  public LanguageList(){  super(GUID.GUID_LANGUAGE_LIST,0,BigInteger.ZERO);}  }
class C{  public BatchUpdateException(String reason,int[] updateCounts,Throwable cause){  super(reason,cause);  this.updateCounts=updateCounts;}  }
class C{  public static final byte[] toOctets(AttributeType type,int msb,int msb2,int msb3,int msb4){  final byte[] octets=new byte[6];  octets[0]=(byte)type.getTypeCode();  octets[1]=6;  octets[2]=(byte)msb;  octets[3]=(byte)msb2;  octets[4]=(byte)msb3;  octets[5]=(byte)msb4;  return octets;}  }
class C{  public void trimToSize(){  if (n < array.length) {    byte[] aux=new byte[n];    System.arraycopy(array,0,aux,0,n);    array=aux;  }}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.EmptyTypeImpl();}  }
class C{  private boolean isReadOnly(DN dn){  for (  DN parentDN : parentReadOnly) {    if (dn.isSubordinateOrEqualTo(parentDN)) {      return true;    }  }  return dn.equals(DN.rootDN());}  }
class C{  public void readConfiguration(InputStream ins) throws IOException, SecurityException {  checkPermission();  reset();  props.load(ins);  String names[]=parseClassNames("config");  for (int i=0; i < names.length; i++) {    String word=names[i];    try {      Class<?> clz=ClassLoader.getSystemClassLoader().loadClass(word);      clz.newInstance();    } catch (    Exception ex) {      System.err.println("Can't load config class \"" + word + "\"");      System.err.println("" + ex);    }  }  setLevelsOnExistingLoggers();  Map<Object,Integer> listeners=null;synchronized (listenerMap) {    if (!listenerMap.isEmpty())     listeners=new HashMap<>(listenerMap);  }  if (listeners != null) {    assert Beans.isBeansPresent();    Object ev=Beans.newPropertyChangeEvent(LogManager.class,null,null,null);    for (    Map.Entry<Object,Integer> entry : listeners.entrySet()) {      Object listener=entry.getKey();      int count=entry.getValue().intValue();      for (int i=0; i < count; i++) {        Beans.invokePropertyChange(listener,ev);      }    }  }synchronized (this) {    initializedGlobalHandlers=false;  }}  }
class C{  public void removeAttributeSchema(String attrName) throws SSOException, SMSException {  removeChildNode(SMSUtils.SCHEMA_ATTRIBUTE,attrName);}  }
class C{  @Override public void reset() throws IOException {synchronized (lock) {    if (isOpen()) {      pos=markpos != -1 ? markpos : 0;    } else {      throw new IOException("StringReader is closed");    }  }}  }
class C{  public boolean isActivated(){  return (getData() & 0x4) != 0;}  }
class C{  public Period withYears(int years){  if (years == this.years) {    return this;  }  return create(years,months,days);}  }
class C{  public boolean doAccessibleAction(int i){  if (i < 0 || i >= getAccessibleActionCount()) {    return false;  }  AccessibleContext ac=getCurrentAccessibleContext();  if (i == 0) {    if (JTree.this.isExpanded(path)) {      JTree.this.collapsePath(path);    } else {      JTree.this.expandPath(path);    }    return true;  } else   if (ac != null) {    AccessibleAction aa=ac.getAccessibleAction();    if (aa != null) {      return aa.doAccessibleAction(i - 1);    }  }  return false;}  }
class C{  public String encode(String pString){  return metaphone(pString);}  }
class C{  @Override public String toString(){  return getClass().getName() + "[index=" + currentPosition+ ", errorIndex="+ errorIndex+ "]";}  }
class C{  public void scrollRowToVisible(int row){  scrollPathToVisible(getPathForRow(row));}  }
class C{  public synchronized static ArrayList<MBeanServer> findMBeanServer(String agentId){  checkPermission("findMBeanServer");  if (agentId == null)   return new ArrayList<MBeanServer>(mBeanServerList);  ArrayList<MBeanServer> result=new ArrayList<MBeanServer>();  for (  MBeanServer mbs : mBeanServerList) {    String name=mBeanServerId(mbs);    if (agentId.equals(name))     result.add(mbs);  }  return result;}  }
class C{  public void draw3DRect(int x,int y,int width,int height,boolean raised){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing 3D rect: " + new Rectangle(x,y,width,height)+ " Raised bezel: "+ raised);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.draw3DRect(x,y,width,height,raised);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.draw3DRect(x,y,width,height,raised);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.draw3DRect(x,y,width,height,raised);}  }
class C{  public void makeImmutable(){  if (isMutable) {    super.makeImmutable();    if ((nameID != null) && (nameID.isMutable())) {      nameID.makeImmutable();    }    if ((baseID != null) && (baseID.isMutable())) {      baseID.makeImmutable();    }    if ((nameIDPolicy != null) && (nameIDPolicy.isMutable())) {      nameIDPolicy.makeImmutable();    }    isMutable=false;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  String rootName;  doc=(Document)load("hc_staff",false);  root=doc.getDocumentElement();  rootName=root.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgTagName","svg",rootName);  } else {    assertEqualsAutoCase("element","docElemName","html",rootName);  }}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("CompareRequest(dn=");  buffer.append(dn);  buffer.append(", attribute=");  buffer.append(attributeType);  buffer.append(", value=");  buffer.append(assertionValue);  buffer.append(")");}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public UpdateLogEntry addFile(JsonValue file){  files.add(file);  return this;}  }
class C{  public void paintSliderTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSliderTrackBackground(context,g,x,y,w,h);}  }
class C{  public ImagingOpException(String s){  super(s);}  }
class C{  public InputStream bindStream(InputStream input){  InputStream oldValue=m_streams.get();  m_streams.set(input);  return oldValue;}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  static <T>LongStream makeLong(AbstractPipeline<?,Long,?> upstream){  return new OfLong(upstream);}  }
class C{  protected void verifyAndUnLinkRoleToGroup(SSOToken token,Set members,String roleDN) throws AMException {  DN dn=DN.valueOf(roleDN);  String groupName=getGroupFromRoleDN(dn);  if (groupName != null) {    String orgDN=dn.parent().toString();    String groupDN=NamingAttributeManager.getNamingAttribute(AMObject.GROUP) + "=" + groupName+ ",ou=Groups,"+ orgDN;    String groupRDN=NamingAttributeManager.getNamingAttribute(AMObject.GROUP) + "=" + groupName;    Attr attrs[]=new Attr[1];    attrs[0]=new Attr("adminrole",groupRDN);    AttrSet attrSet=new AttrSet(attrs);    Iterator itr=members.iterator();    try {      AssignableDynamicGroup group=(AssignableDynamicGroup)UMSObject.getObject(token,new Guid(groupDN));      while (itr.hasNext()) {        String memberDN=(String)itr.next();        removeAttributesFromEntry(token,memberDN,attrSet);        group.removeMember(new Guid(memberDN));      }    } catch (    EntryNotFoundException ex) {      debug.error("Compliance.verifyAndUnLinkRoleToGroup: " + "Admin groups are missing");    }catch (    UMSException ue) {      debug.error("Compliance." + "verifyAndUnLinkRoleToGroup(): ",ue);      throw new AMException(AMSDKBundle.getString("772"),"772");    }  }}  }
class C{  boolean isIgnoreErrorsMode(){  return isIgnoreErrorsMode;}  }
class C{  public void clear(){  response=null;}  }
class C{  private StartMsg sendStartToRemote() throws IOException {  final StartMsg startMsg;  if (getProtocolVersion() < ProtocolVersion.REPLICATION_PROTOCOL_V4) {    startMsg=createReplServerStartMsg();  } else {    startMsg=new ReplServerStartDSMsg(getReplicationServerId(),getReplicationServerURL(),getBaseDN(),maxRcvWindow,replicationServerDomain.getLatestServerState(),localGenerationId,sslEncryption,getLocalGroupId(),replicationServer.getDegradedStatusThreshold(),replicationServer.getWeight(),replicationServerDomain.getConnectedDSs().size());  }  send(startMsg);  return startMsg;}  }
class C{  public ImmutableList<MessageType> filterDocumentingMessages(ProtoContainerElement element){  ImmutableList.Builder<MessageType> builder=ImmutableList.builder();  for (  MessageType msg : element.getMessages()) {    if (!msg.isMapEntry()) {      builder.add(msg);    }  }  return builder.build();}  }
class C{  public NimbusLookAndFeel(){  super();  defaults=new NimbusDefaults();}  }
class C{  protected static Map convertJAXBToAttrMap(String attrName,Object jaxbObj) throws JAXBException {  String xmlString=convertJAXBToString(jaxbObj);  Map attrs=new HashMap();  Set values=new HashSet();  values.add(xmlString);  attrs.put(attrName,values);  return attrs;}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public URLConnection openConnection() throws IOException {  return streamHandler.openConnection(this);}  }
class C{  @Override public void open() throws Exception {synchronized (groups) {synchronized (users) {      users.clear();      groups.clear();      roles.clear();      String pathName=getPathname();      try (InputStream is=ConfigFileLoader.getInputStream(getPathname())){        Digester digester=new Digester();        try {          digester.setFeature("http://apache.org/xml/features/allow-java-encodings",true);        } catch (        Exception e) {          log.warn(sm.getString("memoryUserDatabase.xmlFeatureEncoding"),e);        }        digester.addFactoryCreate("tomcat-users/group",new MemoryGroupCreationFactory(this),true);        digester.addFactoryCreate("tomcat-users/role",new MemoryRoleCreationFactory(this),true);        digester.addFactoryCreate("tomcat-users/user",new MemoryUserCreationFactory(this),true);        digester.parse(is);      } catch (      IOException ioe) {        log.error(sm.getString("memoryUserDatabase.fileNotFound",pathName));        return;      }    }  }}  }
class C{  public boolean equals(Object o){  if (o instanceof WebServicesClients) {    WebServicesClients client=(WebServicesClients)o;    if ((selectedWebServicesClients != null) && (client.selectedWebServicesClients != null) && (selectedWebServicesClients.equals(client.selectedWebServicesClients))) {      return (true);    }  }  return (false);}  }
class C{  public FilterOutputStream(OutputStream out){  this.out=out;}  }
class C{  private void cleanUp() throws Exception {  DN dn=DN.valueOf("ou=Groups,dc=example,dc=com");  final SearchRequest request=newSearchRequest(dn,SearchScope.SINGLE_LEVEL);  InternalSearchOperation searchOperation=getRootConnection().processSearch(request);  for (  Entry e : searchOperation.getSearchEntries()) {    getRootConnection().processDelete(e.getName());  }}  }
class C{  protected static <T extends ReplicationMsg>T waitForSpecificMsg(ReplicationBroker broker,Class<T> msgType) throws Exception {  return (T)waitForSpecificMsgs(null,broker,msgType);}  }
class C{  @Override public NameClassPair next() throws NamingException {  return nextElement();}  }
class C{  public boolean includeEntry(Entry entry) throws DirectoryException {  DN dn=entry.getName();  if (!excludeBranches.isEmpty()) {    for (    DN excludeBranch : excludeBranches) {      if (excludeBranch.isSuperiorOrEqualTo(dn)) {        return false;      }    }  }  checkIncludeBranches:   if (!includeBranches.isEmpty()) {    for (    DN includeBranch : includeBranches) {      if (includeBranch.isSuperiorOrEqualTo(dn)) {        break checkIncludeBranches;      }    }    return false;  }  if (!excludeFilters.isEmpty()) {    for (    SearchFilter filter : excludeFilters) {      if (filter.matchesEntry(entry)) {        return false;      }    }  }  if (!includeFilters.isEmpty()) {    for (    SearchFilter filter : includeFilters) {      if (filter.matchesEntry(entry)) {        return true;      }    }    return false;  }  return true;}  }
class C{  void appendEndDocument(){  done=true;}  }
class C{  public boolean isRequestedSessionIdFromUrl(){  return this._getHttpServletRequest() != null && this._getHttpServletRequest().isRequestedSessionIdFromUrl();}  }
class C{  protected void adjustVisibility(Rectangle nloc){  if (component == null) {    return;  }  if (SwingUtilities.isEventDispatchThread()) {    component.scrollRectToVisible(nloc);  } else {    SwingUtilities.invokeLater(new SafeScroller(nloc));  }}  }
class C{  private void appendToList(List<String> list,String[] array){  if (array != null && array.length > 0) {    list.addAll(Arrays.asList(array));  }}  }
class C{  private void buildIf(StringBuilder sb,AST.If anIf,int indentation) throws SyntaxException {  boolean isFirst=true;  for (  AST.If.IfPair pair : anIf.ifs) {    if (isFirst) {      isFirst=false;      buildIndentation(sb,indentation);      sb.append("if (");    } else {      if (pair.condition == null) {        sb.append("else");      } else {        sb.append("else if (");      }    }    if (pair.condition != null) {      buildExpression(sb,pair.condition,indentation);      sb.append(")");    }    sb.append(" {\n");    buildStatements(sb,pair.body,indentation + INDENT);    buildIndentation(sb,indentation);    sb.append("} ");  }  sb.append("\n");}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.SignOutType createSignOutType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.SignOutTypeImpl();}  }
class C{  public void mousePressed(MouseEvent e){  if ((e.getSource() == BasicSplitPaneDivider.this || e.getSource() == splitPane) && dragger == null && splitPane.isEnabled()) {    Component newHiddenDivider=splitPaneUI.getNonContinuousLayoutDivider();    if (hiddenDivider != newHiddenDivider) {      if (hiddenDivider != null) {        hiddenDivider.removeMouseListener(this);        hiddenDivider.removeMouseMotionListener(this);      }      hiddenDivider=newHiddenDivider;      if (hiddenDivider != null) {        hiddenDivider.addMouseMotionListener(this);        hiddenDivider.addMouseListener(this);      }    }    if (splitPane.getLeftComponent() != null && splitPane.getRightComponent() != null) {      if (orientation == JSplitPane.HORIZONTAL_SPLIT) {        dragger=new DragController(e);      } else {        dragger=new VerticalDragController(e);      }      if (!dragger.isValid()) {        dragger=null;      } else {        prepareForDragging();        dragger.continueDrag(e);      }    }    e.consume();  }}  }
class C{  private boolean unlockBackend(Backend<?> b){  try {    String lockFile=LockFileManager.getBackendLockFileName(b);    StringBuilder failureReason=new StringBuilder();    if (!LockFileManager.releaseLock(lockFile,failureReason)) {      logger.warn(WARN_BACKUPDB_CANNOT_UNLOCK_BACKEND,b.getBackendID(),failureReason);      return false;    }  } catch (  Exception e) {    logger.warn(WARN_BACKUPDB_CANNOT_UNLOCK_BACKEND,b.getBackendID(),getExceptionMessage(e));    return false;  }  return true;}  }
class C{  @Override public void removeAttribute(String name){  if (!removeSpecial(name))   getRequest().removeAttribute(name);}  }
class C{  private void updateDefaultButton(StatusGenericPanel panel){  ButtonType buttonType=panel.getButtonType();  if (buttonType == ButtonType.OK_CANCEL) {    getRootPane().setDefaultButton(okButton);  } else   if (buttonType == ButtonType.OK) {    getRootPane().setDefaultButton(okButton);  } else   if (buttonType == ButtonType.CLOSE) {    getRootPane().setDefaultButton(closeButton);  }}  }
class C{  static void rdf_RDF(XMPMetaImpl xmp,Node rdfRdfNode) throws XMPException {  if (rdfRdfNode.hasAttributes()) {    rdf_NodeElementList(xmp,xmp.getRoot(),rdfRdfNode);  } else {    throw new XMPException("Invalid attributes of rdf:RDF element",BADRDF);  }}  }
class C{  public int next(){  return NativeCollation.next(address);}  }
class C{  public static PdfLayer createTitle(String title,PdfDocument document){  PdfLayer layer=createTitleSilent(title,document);  document.getCatalog().getOCProperties(true).registerLayer(layer);  return layer;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  int n=members.length;  for (int i=0; i < n; i++) {    if (i > 0) {      result.append(',');    }    result.append(members[i][0]);    if (members[i][0] != members[i][1]) {      result.append('-');      result.append(members[i][1]);    }  }  return result.toString();}  }
class C{  public SQLNonTransientException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      final float x=mInterpolator.getInterpolation(timePassed * mDurationReciprocal);    mCurrX=mStartX + Math.round(x * mDeltaX);  mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);float distanceCoef=1.f;float velocityCoef=0.f;if (index < NB_SAMPLES) {final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE_POSITION[index];final float d_sup=SPLINE_POSITION[index + 1];velocityCoef=(d_sup - d_inf) / (t_sup - t_inf);distanceCoef=d_inf + (t - t_inf) * velocityCoef;}mCurrVelocity=velocityCoef * mDistance / mDuration * 1000.0f;mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  public SubjectDecision evaluate(Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  return null;}  }
class C{  public void addAttribute(String name,String value){}  }
class C{  public static ImageTypeSpecifier createGrayscale(int bits,int dataType,boolean isSigned){  return new ImageTypeSpecifier.Grayscale(bits,dataType,isSigned,false,false);}  }
class C{  public void onSwitchCamera(View v){  if (mWZCameraView == null)   return;  if (mDetectingFaces)   setFaceDetectionState(mWZCameraView.getCamera(),false);  WZCamera newCamera=mWZCameraView.switchCamera();  boolean hasTorch=(newCamera != null && newCamera.hasCapability(WZCamera.TORCH));  if (hasTorch)   mBtnTorch.setState(newCamera.isTorchOn()); else   mBtnTorch.setState(false);  mBtnTorch.setEnabled(hasTorch);}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  public FrameBodyTSIZ(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public void paintViewportBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  static void replaceTags(File dir,Properties p){  try {    LinkedList fileList=new LinkedList();    getFiles(dir,fileList);    ListIterator srcIter=fileList.listIterator();    while (srcIter.hasNext()) {      File file=(File)srcIter.next();      String fname=file.getAbsolutePath();      if (fname.endsWith("xml") || fname.endsWith("ldif")) {        replaceTag(fname,p);      }    }  } catch (  Exception e) {  }}  }
class C{  public NotSubject(EntitlementSubject eSubject){  this.eSubject=eSubject;}  }
class C{  public void testConsequentProxyConnection() throws Throwable {  setUpStoreProperties();  ServerSocket ss=new ServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://requested.host:55555/requested.data");  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",ss.getLocalPort())));  connection.setSSLSocketFactory(getContext().getSocketFactory());  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);  ss=new ServerSocket(0);  connection=(HttpsURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",ss.getLocalPort())));  connection.setSSLSocketFactory(getContext().getSocketFactory());  peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);}  }
class C{  public void testCase10(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  int aSign=-1;  byte rBytes[]={-2,-3,-4,-5,-6,-7,-8,-2,-3,-4,-2,-3,-4,-5,-5};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){  if (serviceName.equals(Constants.SVC_NAME_PLATFORM)) {    if (serviceComponent.startsWith("/" + ConfigurationBase.CONFIG_SERVERS + "/")) {      String serverName=serviceComponent.substring(PARENT_LEN);      if (serverName.equals(ServerConfiguration.DEFAULT_SERVER_CONFIG) || serverName.equals(SystemProperties.getServerInstanceName())) {        if (serverName.equals(ServerConfiguration.DEFAULT_SERVER_CONFIG)) {          serverName=SystemProperties.getServerInstanceName();        }        SSOToken adminToken=AccessController.doPrivileged(AdminTokenAction.getInstance());        try {          Properties newProp=ServerConfiguration.getServerInstance(adminToken,serverName);          SystemProperties.initializeProperties(newProp,true,true);          notifies(Constants.SVC_NAME_PLATFORM);        } catch (        SSOException|IOException|SMSException ex) {        }      }    } else {      notifies(Constants.SVC_NAME_PLATFORM);    }  } else {    notifies(serviceName);  }}  }
class C{  private void assertDelEntry(SearchResultEntry entry,String uid,String entryUUID,long changeNumber,CSN csn) throws Exception {  assertAttributeValue(entry,"changetype","delete");  assertAttributeValue(entry,"targetuniqueid",entryUUID);  assertAttributeValue(entry,"targetentryuuid",entryUUID);  assertEntryCommonAttributes(entry,uid,entryUUID,changeNumber,csn);}  }
class C{  public PrinterException(String msg){  super(msg);}  }
class C{  protected Object configureValue(Object value){  if (value instanceof Integer) {    value=new Font(DefaultMetalTheme.getDefaultFontName(type),DefaultMetalTheme.getDefaultFontStyle(type),((Integer)value).intValue());  }  return super.configureValue(value);}  }
class C{  public void paintSplitPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public Set createDynamicGroups(Map dynamicGroups) throws AMException, SSOException {  Iterator iter=dynamicGroups.keySet().iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupName=(String)iter.next();    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + groupName+ ","+ super.entryDN;    Map attributes=(Map)dynamicGroups.get(groupName);    AMDynamicGroupImpl groupImpl=new AMDynamicGroupImpl(super.token,groupDN);    groupImpl.setAttributes(attributes);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  void convertType(Class<?> arg,Class<?> target,Class<?> functional){  if (arg.equals(target) && arg.equals(functional)) {    return;  }  if (arg == Void.TYPE || target == Void.TYPE) {    return;  }  if (arg.isPrimitive()) {    Wrapper wArg=Wrapper.forPrimitiveType(arg);    if (target.isPrimitive()) {      widen(wArg,Wrapper.forPrimitiveType(target));    } else {      String dTarget=BytecodeDescriptor.unparse(target);      Wrapper wPrimTarget=wrapperOrNullFromDescriptor(dTarget);      if (wPrimTarget != null) {        widen(wArg,wPrimTarget);        box(wPrimTarget);      } else {        box(wArg);        cast(wrapperName(wArg),dTarget);      }    }  } else {    String dArg=BytecodeDescriptor.unparse(arg);    String dSrc;    if (functional.isPrimitive()) {      dSrc=dArg;    } else {      dSrc=BytecodeDescriptor.unparse(functional);      cast(dArg,dSrc);    }    String dTarget=BytecodeDescriptor.unparse(target);    if (target.isPrimitive()) {      Wrapper wTarget=toWrapper(dTarget);      Wrapper wps=wrapperOrNullFromDescriptor(dSrc);      if (wps != null) {        if (wps.isSigned() || wps.isFloating()) {          unbox(wrapperName(wps),wTarget);        } else {          unbox(wrapperName(wps),wps);          widen(wps,wTarget);        }      } else {        String intermediate;        if (wTarget.isSigned() || wTarget.isFloating()) {          intermediate="java/lang/Number";        } else {          intermediate=wrapperName(wTarget);        }        cast(dSrc,intermediate);        unbox(intermediate,wTarget);      }    } else {      cast(dSrc,dTarget);    }  }}  }
class C{  private static int modeToMode(String mode){  int modeBits;  if ("r".equals(mode)) {    modeBits=ParcelFileDescriptor.MODE_READ_ONLY;  } else   if ("w".equals(mode) || "wt".equals(mode)) {    modeBits=ParcelFileDescriptor.MODE_WRITE_ONLY | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE;  } else   if ("wa".equals(mode)) {    modeBits=ParcelFileDescriptor.MODE_WRITE_ONLY | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_APPEND;  } else   if ("rw".equals(mode)) {    modeBits=ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE;  } else   if ("rwt".equals(mode)) {    modeBits=ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE;  } else {    throw new IllegalArgumentException("Invalid mode: " + mode);  }  return modeBits;}  }
class C{  @Inject public OpenIDConnectProvider(SSOTokenManager tokenManager,IdentityManager identityManager,CTSPersistentStore cts,@Named(OAuth2Constants.CoreTokenParams.OAUTH_TOKEN_ADAPTER) TokenAdapter<JsonValue> tokenAdapter){  this.tokenManager=tokenManager;  this.identityManager=identityManager;  this.cts=cts;  this.tokenAdapter=tokenAdapter;}  }
class C{  public void addResponseProvider(String responseProviderName,ResponseProvider responseProvider) throws NameAlreadyExistsException {  if (responseProviderName == null) {    responseProviderName="ResponseProvider:" + ServiceTypeManager.generateRandomName();  }  if (providers.containsKey(responseProviderName)) {    String[] objs={responseProviderName};    throw (new NameAlreadyExistsException(ResBundleUtils.rbName,"name_already_present",objs,responseProviderName,PolicyException.RESPONSE_PROVIDER_COLLECTION));  }  providers.put(responseProviderName,responseProvider);}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public static IOFileFilter nameFileFilter(String name){  return new NameFileFilter(name);}  }
class C{  public ByteArrayServletOutputStream(){  buf=new ByteArrayOutputStream();}  }
class C{  @DataProvider(name="illegalDNs") public Object[][] createIllegalData(){  return new Object[][]{{"manager"},{"manager "},{"=Jim"},{" =Jim"},{"= Jim"},{" = Jim"},{"cn+Jim"},{"cn + Jim"},{"cn=Jim+"},{"cn=Jim+manager"},{"cn=Jim+manager "},{"cn=Jim+manager,"},{"cn=Jim,"},{"cn=Jim,  "},{"c[n]=Jim"},{"_cn=Jim"},{"c_n=Jim"},{"cn\"=Jim"},{"c\"n=Jim"},{"1cn=Jim"},{"cn+uid=Jim"},{"-cn=Jim"},{"/tmp=a"},{"\\tmp=a"},{"cn;lang-en=Jim"},{"@cn=Jim"},{"_name_=Jim"},{"\u03c0=pi"},{"v1.0=buggy"},{"1.=buggy"},{".1=buggy"},{"oid.1."},{"1.3.6.1.4.1.1466..0=#04024869"},{"cn=#a"},{"cn=#ag"},{"cn=#ga"},{"cn=#abcdefgh"},{"cn=a\\b"},{"cn=a\\bg"},{"cn=\"hello"},{"cn=+mail=,dc=example,dc=com"},{"cn=xyz+sn=,dc=example,dc=com"},{"cn=,dc=example,dc=com"},{"cn=a+cn=b,dc=example,dc=com"}};}  }
class C{  public void testDivideRoundHalfDownPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public boolean isClassIsValid(){  return this.classIsValid;}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  if (XObject.CLASS_BOOLEAN == right.getType())   return right; else   return right.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public MenuShortcut(int key){  this(key,false);}  }
class C{  public boolean removeBackupCreatedListener(BackupCreatedListener listener){  return backupListeners.remove(listener);}  }
class C{  public static java.sql.Time toTime(final Object value){  if (value == null) {    return null;  }  if (value instanceof java.sql.Time) {    return (java.sql.Time)value;  }  if (value instanceof java.util.Date) {    final Date date=(java.util.Date)value;    return new java.sql.Time(date.getTime());  }  return null;}  }
class C{  @DataProvider(name="kiloBytes") public Object[][] kiloBytes(){  return new Object[][]{{8},{16},{24},{32},{64}};}  }
class C{  public Properties(Properties defaults){  this.defaults=defaults;}  }
class C{  public Action createAction(){  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ACTION);  if (obj == null) {    return new ActionImpl();  } else {    return (Action)obj;  }}  }
class C{  public boolean isEmpty(){  return delegate.isEmpty();}  }
class C{  public <O extends UCrop.Options>BuilderImage<T> crop(O options){  this.config.setCrop(options);  return this;}  }
class C{  boolean validateAttributes(SSOToken ssoToken,Map<String,Set<String>> attributeSet,boolean encodePassword,String orgName) throws SMSException {  return validateAttributes(ssoToken,attributeSet,encodePassword,orgName,false);}  }
class C{  public static Map removeEmptyValues(Map attrMap){  Map finalMap=new HashMap();  Iterator iter=attrMap.keySet().iterator();  while (iter.hasNext()) {    String tStr=(String)iter.next();    Set s=(Set)attrMap.get(tStr);    if (!s.isEmpty()) {      finalMap.put(tStr,attrMap.get(tStr));    }  }  return finalMap;}  }
class C{  public void append(String str){  Document doc=getDocument();  if (doc != null) {    try {      doc.insertString(doc.getLength(),str,null);    } catch (    BadLocationException e) {    }  }}  }
class C{  public void appendRemainingComponent(String name){  if (name != null) {    try {      if (remainingName == null) {        remainingName=new CompositeName();      }      remainingName.add(name);    } catch (    NamingException e) {      throw new IllegalArgumentException(e.toString());    }  }}  }
class C{  public PdfXObject addImage(ImageData image,float x,float y,boolean asInline){  if (image.getOriginalType() == ImageType.WMF) {    WmfImageHelper wmf=new WmfImageHelper(image);    PdfXObject xObject=wmf.createPdfForm(document);    addXObject(xObject,image.getWidth(),0,0,image.getHeight(),x,y);    return xObject;  } else {    PdfImageXObject imageXObject=new PdfImageXObject(image);    if (asInline && image.canImageBeInline()) {      addInlineImage(imageXObject,image.getWidth(),0,0,image.getHeight(),x,y);      return null;    } else {      addImage(imageXObject,image.getWidth(),0,0,image.getHeight(),x,y);      return imageXObject;    }  }}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.fatalError(e);  }}  }
class C{  @SuppressWarnings("unchecked") public static Object evaluate(Object value,Bindings bindings) throws ExpressionException {  if (value instanceof String) {    return evaluate((String)value,bindings);  } else   if (value instanceof List) {    return evaluate((List)value,bindings);  } else   if (value instanceof Map) {    return evaluate((Map)value,bindings);  } else {    return value;  }}  }
class C{  public static XMPMeta parseFromBuffer(byte[] buffer) throws XMPException {  return parseFromBuffer(buffer,null);}  }
class C{  private boolean elaborateGlobalResultCode(ResultCode newResultCode,LocalizableMessageBuilder newErrorMessage){  if (resultCode == ResultCode.UNDEFINED) {    resultCode=newResultCode;    errorMessage=new LocalizableMessageBuilder(newErrorMessage);    return false;  }switch (newResultCode.asEnum()) {case SUCCESS:switch (resultCode.asEnum()) {case NO_SUCH_OBJECT:      resultCode=ResultCode.SUCCESS;    errorMessage=new LocalizableMessageBuilder(LocalizableMessage.EMPTY);  return false;case REFERRAL:resultCode=ResultCode.SUCCESS;errorMessage=new LocalizableMessageBuilder(LocalizableMessage.EMPTY);return true;default :return false;}case NO_SUCH_OBJECT:return false;case REFERRAL:switch (resultCode.asEnum()) {case REFERRAL:resultCode=ResultCode.SUCCESS;errorMessage=new LocalizableMessageBuilder(LocalizableMessage.EMPTY);return true;case NO_SUCH_OBJECT:resultCode=ResultCode.REFERRAL;errorMessage=new LocalizableMessageBuilder(LocalizableMessage.EMPTY);return false;default :return true;}default :switch (resultCode.asEnum()) {case REFERRAL:resultCode=newResultCode;errorMessage=new LocalizableMessageBuilder(newErrorMessage);return true;case SUCCESS:case NO_SUCH_OBJECT:resultCode=newResultCode;errorMessage=new LocalizableMessageBuilder(newErrorMessage);return false;default :return false;}}}  }
class C{  private void positionToRecordFromBlockStart(final long blockStartPosition) throws IOException {  reader.seek(blockStartPosition);  if (blockStartPosition > 0) {    final byte[] offsetData=new byte[SIZE_OF_BLOCK_OFFSET];    reader.readFully(offsetData);    final int offsetToRecord=ByteString.wrap(offsetData).toInt();    if (offsetToRecord > 0) {      reader.seek(blockStartPosition - offsetToRecord);    }  }}  }
class C{  public GenericObjectPool(final PooledObjectFactory<T> factory,final GenericObjectPoolConfig config){  super(config,ONAME_BASE,config.getJmxNamePrefix());  if (factory == null) {    jmxUnregister();    throw new IllegalArgumentException("factory may not be null");  }  this.factory=factory;  idleObjects=new LinkedBlockingDeque<>(config.getFairness());  setConfig(config);  startEvictor(getTimeBetweenEvictionRunsMillis());}  }
class C{  public CodeSigner(CertPath signerCertPath,Timestamp timestamp){  if (signerCertPath == null) {    throw new NullPointerException();  }  this.signerCertPath=signerCertPath;  this.timestamp=timestamp;}  }
class C{  public QName(){}  }
class C{  public void removeColumn(TableColumn column){  int columnIndex=tableColumns.indexOf(column);  if (columnIndex != -1) {    if (selectionModel != null) {      selectionModel.removeIndexInterval(columnIndex,columnIndex);    }    column.removePropertyChangeListener(this);    tableColumns.removeElementAt(columnIndex);    invalidateWidthCache();    fireColumnRemoved(new TableColumnModelEvent(this,columnIndex,0));  }}  }
class C{  Future<Job> refreshTtl(){  Future<Job> future=Future.future();  if (this.state == JobState.ACTIVE && this.ttl > 0) {    client.zadd(RedisHelper.getStateKey(this.state),System.currentTimeMillis() + ttl,this.zid,_completer(future,this));  }  return future;}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){  return _fooLocalService.createFoo(fooId);}  }
class C{  public BrdOutline insert_outline(ShapeSegments[] p_outline_shapes,int p_clearance_class_no){  BrdOutline result=new BrdOutline(p_outline_shapes,p_clearance_class_no,0,this);  insert_item(result);  return result;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(map.capacity());  s.writeFloat(map.loadFactor());  s.writeInt(map.size());  for (  E e : map.keySet())   s.writeObject(e);}  }
class C{  public static <A extends Annotation>A createAnnotation(Class<? extends Annotation> annotationType,AnnotationMember[] elements){  AnnotationFactory factory=new AnnotationFactory(annotationType,elements);  return (A)Proxy.newProxyInstance(annotationType.getClassLoader(),new Class[]{annotationType},factory);}  }
class C{  public void initTemplates(Map<String,String> conf) throws Exception {  TemplateStore store=null;  try {    store=storeFactory.getTemplateStore(conf.get(Constants.TSTORE_TYPE),conf);  } catch (  InstantiationException|IllegalAccessException|ClassNotFoundException e) {    throw e;  }  try {    store.connect();    Map<Short,AlertTemplate> temp=store.getAllTemplates();    if (temp != null) {      this.templateMap.putAll(temp);    }    logger.info("Fetched " + templateMap.size() + " alert templates from the store");    store.disconnect();  } catch (  IOException e) {    throw e;  }}  }
class C{  public static PersistentSearchRequestControl newControl(final boolean isCritical,final boolean changesOnly,final boolean returnECs,final Collection<PersistentSearchChangeType> changeTypes){  Reject.ifNull(changeTypes);  final Set<PersistentSearchChangeType> copyOfChangeTypes=EnumSet.noneOf(PersistentSearchChangeType.class);  copyOfChangeTypes.addAll(changeTypes);  return new PersistentSearchRequestControl(isCritical,changesOnly,returnECs,Collections.unmodifiableSet(copyOfChangeTypes));}  }
class C{  public static boolean equals(char[] array1,char[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(FooApp.class);  DefaultProfileUtil.addDefaultProfile(app);  Environment env=app.run(args).getEnvironment();  log.info("\n----------------------------------------------------------\n\t" + "Application '{}' is running! Access URLs:\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t"+ "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("spring.application.name"),env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));  String configServerStatus=env.getProperty("configserver.status");  log.info("\n----------------------------------------------------------\n\t" + "Config Server: \t{}\n----------------------------------------------------------",configServerStatus == null ? "Not found or not setup for this application" : configServerStatus);}  }
class C{  private static UriRecord parseWellKnown(NdefRecord record){  Preconditions.checkArgument(Arrays.equals(record.getType(),NdefRecord.RTD_URI));  byte[] payload=record.getPayload();  Preconditions.checkArgument(payload.length > 0);  String prefix=URI_PREFIX_MAP.get(payload[0]);  Preconditions.checkArgument(prefix != null);  byte[] fullUri=Bytes.concat(prefix.getBytes(Charset.forName("UTF-8")),Arrays.copyOfRange(payload,1,payload.length));  Uri uri=Uri.parse(new String(fullUri,Charset.forName("UTF-8")));  return new UriRecord(uri);}  }
class C{  protected int countEntireIndexRange(int indexOffset){  seek(indexOffset);  int count=getCard16();  if (count == 0)   return 2; else {    int indexOffSize=getCard8();    seek(indexOffset + 2 + 1+ count * indexOffSize);    int size=getOffset(indexOffSize) - 1;    return 2 + 1 + (count + 1) * indexOffSize + size;  }}  }
class C{  public boolean isAuthzidAuthorizationDN(){  return this.authzid.equals(this.authorizationEntry.getName());}  }
class C{  @DataProvider(name="illegalRDNs") public Object[][] createIllegalData(){  return new Object[][]{{null},{""},{" "},{"="},{"manager"},{"manager "},{"cn+"},{"cn+Jim"},{"cn=Jim+"},{"cn=Jim +"},{"cn=Jim+ "},{"cn=Jim+cn=John"},{"cn=Jim+sn"},{"cn=Jim+sn "},{"cn=Jim+sn equals"},{"cn=Jim,"},{"cn=Jim;"},{"cn=Jim,  "},{"cn=Jim+sn=a,"},{"cn=Jim, sn=Jam "},{"cn+uid=Jim"},{"-cn=Jim"},{"/tmp=a"},{"\\tmp=a"},{"cn;lang-en=Jim"},{"@cn=Jim"},{"_name_=Jim"},{"\u03c0=pi"},{"v1.0=buggy"},{"cn=Jim+sn=Bob++"},{"cn=Jim+sn=Bob+,"},{"1.3.6.1.4.1.1466..0=#04024869"}};}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  String serverName=(String)getPageSessionAttribute(PG_ATTR_SERVER_NAME);  String parentSite=(serverName.equals(ServerConfiguration.DEFAULT_SERVER_CONFIG)) ? null : (String)getDisplayFieldValue(PARENT_SITE);  ServerSiteModel model=(ServerSiteModel)getModel();  try {    model.modifyServer(serverName,parentSite,getAttributeValues());    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","serverconfig.updated");  } catch (  UnknownPropertyNameException e) {  }catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public void testSerializationCompatibility() throws Exception {  TestUtils.initCertPathSSCertChain();  SerializationTest.verifyGolden(this,TestUtils.rootCertificateSS);}  }
class C{  public void handleAddCOTButtonRequest(RequestInvocationEvent event){  CreateCOTViewBean vb=(CreateCOTViewBean)getViewBean(CreateCOTViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  private static CompareRequestProtocolOp readCompareRequest(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_COMPARE_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString dn;  try {    dn=reader.readOctetString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_COMPARE_REQUEST_DECODE_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_COMPARE_REQUEST_DECODE_AVA.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  String attributeType;  try {    attributeType=reader.readOctetStringAsString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_COMPARE_REQUEST_DECODE_TYPE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString assertionValue;  try {    assertionValue=reader.readOctetString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_COMPARE_REQUEST_DECODE_VALUE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_COMPARE_REQUEST_DECODE_AVA.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_COMPARE_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new CompareRequestProtocolOp(dn,attributeType,assertionValue);}  }
class C{  public BindException(){}  }
class C{  private InetSocketAddress nextInetSocketAddress() throws IOException {  if (!hasNextInetSocketAddress()) {    throw new SocketException("No route to " + address.url().host() + "; exhausted inet socket addresses: "+ inetSocketAddresses);  }  return inetSocketAddresses.get(nextInetSocketAddressIndex++);}  }
class C{  public static boolean connect(FileDescriptor fd,InetAddress inetAddress,int port) throws SocketException {  try {    return IoBridge.connect(fd,inetAddress,port,0);  } catch (  SocketTimeoutException ex) {    throw new AssertionError(ex);  }}  }
class C{  public ErrorManager(boolean fastFail){  this.fastFail=fastFail;}  }
class C{  public com.sun.identity.liberty.ws.idpp.plugin.jaxb.PPISExtensionElement createPPISExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.plugin.jaxb.impl.PPISExtensionElementImpl();}  }
class C{  public static List<SearchResultEntry> findClass(String name){  List<SearchResultEntry> results=new ArrayList<SearchResultEntry>();  for (  ClassNode cn : VisualizerWindow.instance.getNodes().values()) {    if (cn.name.toLowerCase().contains(name.toLowerCase())) {      results.add(new SearchResultEntry(cn));    }  }  return results;}  }
class C{  public void abortAnimation(){  finished=true;  currentMaxY=endMaxY;}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeShortArrayAsBoolean() throws Exception {  super.testDecodeShortArrayAsBoolean();}  }
class C{  public static String hashpw(byte[] password,String salt){  BCrypt B;  String real_salt;  byte passwordb[], saltb[], hashed[];  char minor=(char)0;  int rounds, off;  StringBuilder sb=new StringBuilder();  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {    throw new IllegalArgumentException("Invalid salt version");  }  if (salt.charAt(2) == '$') {    off=3;  } else {    minor=salt.charAt(2);    if (minor != 'a' || salt.charAt(3) != '$') {      throw new IllegalArgumentException("Invalid salt revision");    }    off=4;  }  if (minor >= 'a') {    passwordb=new byte[password.length + 1];    System.arraycopy(password,0,passwordb,0,password.length);    passwordb[password.length]=0;  } else {    passwordb=password;  }  if (salt.charAt(off + 2) > '$') {    throw new IllegalArgumentException("Missing salt rounds");  }  rounds=Integer.parseInt(salt.substring(off,off + 2));  real_salt=salt.substring(off + 3,off + 25);  saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);  B=new BCrypt();  hashed=B.crypt_raw(passwordb,saltb,rounds,bf_crypt_ciphertext.clone());  sb.append("$2");  if (minor >= 'a') {    sb.append(minor);  }  sb.append("$");  if (rounds < 10) {    sb.append("0");  }  if (rounds > 30) {    throw new IllegalArgumentException("rounds exceeds maximum (30)");  }  sb.append(Integer.toString(rounds));  sb.append("$");  sb.append(encode_base64(saltb,saltb.length));  sb.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));  return sb.toString();}  }
class C{  protected void uninstallComponents(){  uninstallTabContainer();  if (scrollableTabLayoutEnabled()) {    tabPane.remove(tabScroller.viewport);    tabPane.remove(tabScroller.scrollForwardButton);    tabPane.remove(tabScroller.scrollBackwardButton);    tabScroller=null;  }}  }
class C{  protected void startNode(Node node) throws org.xml.sax.SAXException {  if (node instanceof Locator) {    Locator loc=(Locator)node;    fLocator.setColumnNumber(loc.getColumnNumber());    fLocator.setLineNumber(loc.getLineNumber());    fLocator.setPublicId(loc.getPublicId());    fLocator.setSystemId(loc.getSystemId());  } else {    fLocator.setColumnNumber(0);    fLocator.setLineNumber(0);  }switch (node.getNodeType()) {case Node.DOCUMENT_TYPE_NODE:    serializeDocType((DocumentType)node,true);  break;case Node.COMMENT_NODE:serializeComment((Comment)node);break;case Node.DOCUMENT_FRAGMENT_NODE:break;case Node.DOCUMENT_NODE:break;case Node.ELEMENT_NODE:serializeElement((Element)node,true);break;case Node.PROCESSING_INSTRUCTION_NODE:serializePI((ProcessingInstruction)node);break;case Node.CDATA_SECTION_NODE:serializeCDATASection((CDATASection)node);break;case Node.TEXT_NODE:serializeText((Text)node);break;case Node.ENTITY_REFERENCE_NODE:serializeEntityReference((EntityReference)node,true);break;default :}}  }
class C{  public ParagraphView(Element elem){  super(elem,View.Y_AXIS);  setPropertiesFromAttributes();  Document doc=elem.getDocument();  Object i18nFlag=doc.getProperty(AbstractDocument.I18NProperty);  if ((i18nFlag != null) && i18nFlag.equals(Boolean.TRUE)) {    try {      if (i18nStrategy == null) {        String classname="javax.swing.text.TextLayoutStrategy";        ClassLoader loader=getClass().getClassLoader();        if (loader != null) {          i18nStrategy=loader.loadClass(classname);        } else {          i18nStrategy=Class.forName(classname);        }      }      Object o=i18nStrategy.newInstance();      if (o instanceof FlowStrategy) {        strategy=(FlowStrategy)o;      }    } catch (    Throwable e) {      throw new StateInvariantError("ParagraphView: Can't create i18n strategy: " + e.getMessage());    }  }}  }
class C{  void addToParent(Element bodyE){  Document doc=bodyE.getOwnerDocument();  Element faultE=doc.createElementNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PTAG_FAULT);  bodyE.appendChild(faultE);  Element faultcodeE=doc.createElement(SOAPBindingConstants.TAG_FAULT_CODE);  String localPart=faultcode.getLocalPart();  String ns=faultcode.getNamespaceURI();  if (Utils.debug.messageEnabled()) {    Utils.debug.message("SOAPFault.addToParent: faultcode ns" + " = " + ns + ", localPart = "+ localPart);  }  if (ns != null && ns.length() > 0) {    String prefix;    if (ns.equals(SOAPBindingConstants.NS_SOAP)) {      prefix=SOAPBindingConstants.PREFIX_SOAP;    } else     if (ns.equals(SOAPBindingConstants.NS_SOAP_BINDING)) {      prefix=SOAPBindingConstants.PREFIX_SOAP_BINDING;    } else {      prefix=SOAPBindingConstants.DEFAULT_PREFIX_FAULT_CODE_VALUE;      faultcodeE.setAttributeNS(SOAPBindingConstants.NS_XML,"xmlns:" + prefix,ns);    }    faultcodeE.appendChild(doc.createTextNode(prefix + ":" + localPart));  } else {    faultcodeE.appendChild(doc.createTextNode(localPart));  }  faultE.appendChild(faultcodeE);  Element faultstringE=doc.createElement(SOAPBindingConstants.TAG_FAULT_STRING);  faultstringE.appendChild(doc.createTextNode(faultstring));  faultE.appendChild(faultstringE);  if (faultactor != null) {    Element faultactorE=doc.createElement(SOAPBindingConstants.TAG_FAULT_ACTOR);    faultactorE.appendChild(doc.createTextNode(faultactor));    faultE.appendChild(faultactorE);  }  if (detail != null) {    detail.addToParent(faultE);  }}  }
class C{  void add(TimerTask task){  if (size + 1 == queue.length)   queue=Arrays.copyOf(queue,2 * queue.length);  queue[++size]=task;  fixUp(size);}  }
class C{  public boolean beginSelectedChoiceDisplay(ChildDisplayEvent event){  return (curTile == defaultValue);}  }
class C{  public void test_SelectAgregateFunctions() throws SQLException {  String selectCount="SELECT count(onum) as count FROM " + DatabaseCreator.ORDERS_TABLE;  String selectSum="SELECT sum(onum) as sum FROM " + DatabaseCreator.ORDERS_TABLE;  String selectAvg="SELECT avg(onum) as avg FROM " + DatabaseCreator.ORDERS_TABLE;  String selectMax="SELECT max(onum) as max FROM " + DatabaseCreator.ORDERS_TABLE;  String selectMin="SELECT min(onum) as min FROM " + DatabaseCreator.ORDERS_TABLE;  func("count",selectCount,10);  func("sum",selectSum,30062);  func("avg",selectAvg,3006);  func("max",selectMax,3011);  func("min",selectMin,3001);}  }
class C{  public void generateAccountStatusNotification(AccountStatusNotificationType notificationType,Entry userEntry,LocalizableMessage message,Map<AccountStatusNotificationProperty,List<String>> notificationProperties){  generateAccountStatusNotification(new AccountStatusNotification(notificationType,userEntry,message,notificationProperties));}  }
class C{  private void addSimilarPolicyRule(Policy policy,Rule template,Set<String> existingResourceNames,String newResourceName) throws Exception {  if (!existingResourceNames.contains(newResourceName)) {    Rule newRule=(Rule)template.clone();    newRule.setResourceNames(asSet(newResourceName));    int i=1;    String oldName=newRule.getName();    String newName=oldName;    while (policy.getRuleNames().contains(newName)) {      newName=oldName + "_" + i++;    }    newRule.setName(newName);    policy.addRule(newRule);  }}  }
class C{  public void reset(){  Cell[] as=cells;  Cell a;  base=identity;  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       a.value=identity;    }  }}  }
class C{  @DataProvider(name="invalidData") public Object[][] createInvalidData(){  return new Object[][]{{"="},{"=="},{"==="},{"A"},{"AA"},{"AAA"},{"AA`="},{"AA~="},{"AA!="},{"AA@="},{"AA#="},{"AA$="},{"AA%="},{"AA^="},{"AA*="},{"AA(="},{"AA)="},{"AA_="},{"AA-="},{"AA{="},{"AA}="},{"AA|="},{"AA[="},{"AA]="},{"AA\\="},{"AA;="},{"AA'="},{"AA\"="},{"AA:="},{"AA,="},{"AA.="},{"AA<="},{"AA>="},{"AA?="},{"AA;="}};}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  FileWriter writer=new FileWriter(DirectoryServer.getInstanceRoot() + File.separator + "config"+ File.separator+ "server.pin");  writer.write("password" + EOL);  writer.close();  writer=new FileWriter(DirectoryServer.getInstanceRoot() + File.separator + "config"+ File.separator+ "empty");  writer.close();  System.setProperty("org.opends.server.KeyStorePIN","password");}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher){  this(cipher,(cipher.getBlockSize() * 8) / 2,null);}  }
class C{  public NodeSetDTM(NodeList nodeList,XPathContext xctxt){  super();  m_manager=xctxt.getDTMManager();  int n=nodeList.getLength();  for (int i=0; i < n; i++) {    Node node=nodeList.item(i);    int handle=xctxt.getDTMHandleFromNode(node);    addNode(handle);  }}  }
class C{  public static boolean isXML11ValidNmtoken(String nmtoken){  int length=nmtoken.length();  if (length == 0)   return false;  for (int i=0; i < length; ++i) {    char ch=nmtoken.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=nmtoken.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }  }  return true;}  }
class C{  public static TransformerFactoryProvider transformerFactoryProvider(final int maxSize){  return new PerThreadTransformerFactoryProvider(maxSize);}  }
class C{  private ResourceResponse prepareResponse(Context context,ResourceResponse resource,final List<JsonPointer> requestFields){  Map<JsonPointer,SchemaField> fieldsToRemove=new HashMap<>(schema.getHiddenByDefaultFields());  Map<JsonPointer,List<JsonPointer>> resourceExpansionMap=new HashMap<>();  List<JsonPointer> fields=new ArrayList<>();  if (requestFields != null && requestFields.size() > 0) {    fields.addAll(requestFields);    for (    JsonPointer field : new ArrayList<>(fields)) {      if (field.equals(SchemaField.FIELD_ALL_RELATIONSHIPS)) {        for (        JsonPointer key : schema.getRelationshipFields()) {          logger.debug("Allowing field {} to be returned, due to *_ref",key);          fieldsToRemove.remove(key);          fields.add(key);        }        fields.remove(field);      } else       if (!field.equals(SchemaField.FIELD_ALL) && !field.equals(SchemaField.FIELD_EMPTY)) {        if (schema.hasField(field)) {          logger.debug("Allowing field {} to be returned",field);          fieldsToRemove.remove(field);        } else         if (schema.hasArrayIndexedField(field)) {          logger.debug("Allowing field {} to be returned",field.parent());          fieldsToRemove.remove(field.parent());        } else {          Pair<JsonPointer,JsonPointer> expansionPair=schema.getResourceExpansionField(field);          if (expansionPair != null) {            JsonPointer relationshipField=expansionPair.getFirst();            fieldsToRemove.remove(relationshipField);            if (!resourceExpansionMap.containsKey(relationshipField)) {              resourceExpansionMap.put(relationshipField,new ArrayList<JsonPointer>());              fields.add(relationshipField);            }            fields.remove(field);            resourceExpansionMap.get(relationshipField).add(expansionPair.getSecond());          }        }      } else       if (field.equals(SchemaField.FIELD_ALL)) {        fields.remove(field);        fields.add(SchemaField.FIELD_EMPTY);      }    }  }  for (  JsonPointer key : fieldsToRemove.keySet()) {    logger.debug("Removing field {} from the response object",key);    resource.getContent().remove(key);  }  List<Promise<ResourceResponse,ResourceException>> promises=new ArrayList<>();  for (  JsonPointer fieldToExpand : resourceExpansionMap.keySet()) {    SchemaField schemaField=schema.getField(fieldToExpand);    List<JsonPointer> fieldsList=resourceExpansionMap.get(fieldToExpand);    JsonValue fieldValue=resource.getContent().get(fieldToExpand);    try {      if (fieldValue != null && !fieldValue.isNull()) {        if (schemaField.isArray()) {          for (          JsonValue value : fieldValue) {            promises.add(expandResource(context,value,fieldsList));          }        } else {          promises.add(expandResource(context,fieldValue,fieldsList));        }      } else {        logger.debug("Cannot expand a null relationship object");      }    } catch (    ResourceException e) {      logger.error("Error expanding resource " + fieldToExpand + " with value "+ fieldValue,e);    }  }  try {    when(promises).getOrThrowUninterruptibly();  } catch (  ResourceException e) {    logger.error("Error performing resource expansion",e);  }  if (ContextUtil.isExternal(context)) {    for (    JsonPointer key : Collections.unmodifiableSet(getSchema().getFields().keySet())) {      SchemaField field=getSchema().getField(key);      if (field.isPrivate()) {        resource.getContent().remove(field.getName());      }    }  }  if (fields.size() > 0) {    resource.addField(fields.toArray(new JsonPointer[fields.size()]));  }  return resource;}  }
class C{  private List<String> toList(String[] array){  List<String> ret=new ArrayList<String>();  if (array != null && array.length > 0) {    ret.addAll(Arrays.asList(array));  }  return ret;}  }
class C{  public void testNegPosFirstShorter(){  String numA="-293478573489347658763745839457637";  String numB="2837462783428374767845648748973847593874837948575684767";  String res="-2837462783428374767845615168483972194300564226167553532";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);  unchecked(null);}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  private JsonValue createTestGroup(String name,String description) throws Exception {  System.out.println("1. Create a group: ");  HttpResponse<String> response=Unirest.post(azureEndpoint + "/group?_action=create").header("x-openidm-username","openidm-admin").header("x-openidm-password","openidm-admin").header("content-type","application/json").body(writeValueAsString(json(object(field("DisplayName",name),field("Description",description))))).asString();  return json(readJson(response.getBody()));}  }
class C{  public long position(Clob searchStr,long start) throws SerialException, SQLException {  isValid();  return position(searchStr.getSubString(1,(int)searchStr.length()),start);}  }
class C{  public void removeQValue(){  removeParameter("q");}  }
class C{  public ConfigException(LocalizableMessage message,Throwable cause){  super(message.toString(),cause);  this.message=message;}  }
class C{  public org.omg.DynamicAny.DynAny current_component() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_component",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    return $self.current_component();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static String toASCII(String input,int flags){  return NativeIDN.toASCII(input,flags);}  }
class C{  public void error(String msg){  if (debugLevel > Debug.OFF) {    formatAndWrite("ERROR: ",msg,null);  }}  }
class C{  public char next(){  if (offset >= (end - 1)) {    offset=end;    return DONE;  }  return string.charAt(++offset);}  }
class C{  public boolean implies(Permission p){  return false;}  }
class C{  public Set<String> searchPrivilegeNames(Set<SearchFilter> filters,boolean boolAnd,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws EntitlementException {  Subject adminSubject=getAdminSubject();  String realm=getRealm();  String searchFilters=getSearchFilter(filters,boolAnd);  return dataStore.search(adminSubject,realm,searchFilters,numOfEntries * (2),sortResults,ascendingOrder);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  String xmlStr=null;  if ((extensionsList != null) && (!extensionsList.isEmpty())) {    StringBuffer xmlString=new StringBuffer(500);    xmlString.append(SAML2Constants.START_TAG);    if (includeNSPrefix) {      xmlString.append(SAML2Constants.PROTOCOL_PREFIX);    }    xmlString.append(SAML2Constants.EXTENSIONS);    if (declareNS) {      xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);    }    xmlString.append(SAML2Constants.END_TAG);    Iterator extIterator=extensionsList.iterator();    while (extIterator.hasNext()) {      String extString=(String)extIterator.next();      xmlString.append(SAML2Constants.NEWLINE).append(extString);    }    xmlString.append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.EXTENSIONS).append(SAML2Constants.END_TAG);    xmlStr=xmlString.toString();  }  return xmlStr;}  }
class C{  public static boolean isPublic(int mod){  return (mod & ACC_PUBLIC) != 0;}  }
class C{  public LockableFileWriter(File file) throws IOException {  this(file,false,null);}  }
class C{  private void repopulateTree(JTree tree){  ignoreSelectionEvents=true;  ViewPositions pos=Utilities.getViewPositions(treeScroll);  GeneralMonitoringTreeNode root=new GeneralMonitoringTreeNode(getServerName(),NodeType.ROOT,true);  LocalizableMessage[] messages={INFO_CTRL_PANEL_SYSTEM_INFORMATION.get(),INFO_CTRL_PANEL_JAVA_INFORMATION.get(),INFO_CTRL_PANEL_WORK_QUEUE.get(),INFO_CTRL_PANEL_ENTRY_CACHES.get(),INFO_CTRL_PANEL_JE_DB_INFO.get(),INFO_CTRL_PANEL_PDB_DB_INFO.get()};  NodeType[] identifiers={NodeType.SYSTEM_INFORMATION,NodeType.JAVA_INFORMATION,NodeType.WORK_QUEUE,NodeType.ENTRY_CACHES,NodeType.JE_DATABASES_INFORMATION,NodeType.PDB_DATABASES_INFORMATION};  for (int i=0; i < messages.length; i++) {    if (isVisible(identifiers[i])) {      root.add(new GeneralMonitoringTreeNode(messages[i].toString(),identifiers[i],false));    }  }  tree.setModel(new DefaultTreeModel(root));  Utilities.updateViewPositions(pos);  ignoreSelectionEvents=false;}  }
class C{  private static void calculateThresholdForBlock(byte[] luminances,int subWidth,int subHeight,int width,int height,int[][] blackPoints,BitMatrix matrix){  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int left=cap(x,2,subWidth - 3);      int top=cap(y,2,subHeight - 3);      int sum=0;      for (int z=-2; z <= 2; z++) {        int[] blackRow=blackPoints[top + z];        sum+=blackRow[left - 2] + blackRow[left - 1] + blackRow[left]+ blackRow[left + 1]+ blackRow[left + 2];      }      int average=sum / 25;      thresholdBlock(luminances,xoffset,yoffset,average,width,matrix);    }  }}  }
class C{  public String toString(){  if (myToString == null) {    myToString=getClass().getName() + "(name=" + getTypeName()+ ",dimension="+ dimension+ ",elementType="+ elementType+ ",primitiveArray="+ primitiveArray+ ")";  }  return myToString;}  }
class C{  boolean rectangleIsObscured(int x,int y,int width,int height){  int numChildren=getComponentCount();  for (int i=0; i < numChildren; i++) {    Component child=getComponent(i);    int cx, cy, cw, ch;    cx=child.getX();    cy=child.getY();    cw=child.getWidth();    ch=child.getHeight();    if (x >= cx && (x + width) <= (cx + cw) && y >= cy && (y + height) <= (cy + ch) && child.isVisible()) {      if (child instanceof JComponent) {        return child.isOpaque();      } else {        return false;      }    }  }  return false;}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  protected void writeHTMLTags(AttributeSet attr) throws IOException {  int oldMask=fontMask;  setFontMask(attr);  int endMask=0;  int startMask=0;  if ((oldMask & BOLD) != 0) {    if ((fontMask & BOLD) == 0) {      endMask|=BOLD;    }  } else   if ((fontMask & BOLD) != 0) {    startMask|=BOLD;  }  if ((oldMask & ITALIC) != 0) {    if ((fontMask & ITALIC) == 0) {      endMask|=ITALIC;    }  } else   if ((fontMask & ITALIC) != 0) {    startMask|=ITALIC;  }  if ((oldMask & UNDERLINE) != 0) {    if ((fontMask & UNDERLINE) == 0) {      endMask|=UNDERLINE;    }  } else   if ((fontMask & UNDERLINE) != 0) {    startMask|=UNDERLINE;  }  writeEndMask(endMask);  writeStartMask(startMask);}  }
class C{  public MockCLIManager() throws CLIException {  super(DEFINITION_CLASS);}  }
class C{  public OutputDeviceAssigned(String deviceName,Locale locale){  super(deviceName,locale);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public int size(){  return size;}  }
class C{  public static void initializeProperties(Properties properties){  if (systemProperties != null) {    systemProperties.initializeProperties(properties);  }}  }
class C{  public FileImageInputStream(File f) throws FileNotFoundException, IOException {  this(f == null ? null : new RandomAccessFile(f,"r"));}  }
class C{  void rightShift(int n){  if (intLen == 0)   return;  int nInts=n >>> 5;  int nBits=n & 0x1F;  this.intLen-=nInts;  if (nBits == 0)   return;  int bitsInHighWord=BigInteger.bitLengthForInt(value[offset]);  if (nBits >= bitsInHighWord) {    this.primitiveLeftShift(32 - nBits);    this.intLen--;  } else {    primitiveRightShift(nBits);  }}  }
class C{  public final void testGetSeed04(){  ECFieldFp f=new ECFieldFp(BigInteger.valueOf(23L));  BigInteger a=BigInteger.ONE;  assertNull(new EllipticCurve(f,a,a).getSeed());}  }
class C{  void clear(){  smsEntry.removeServiceListener(this);  if (smsEntry.isValid()) {    smsEntry.clear();  }  try {    if ((ssmi != null) && (serviceSchemaManagerListernerID != null)) {      ssmi.removeListener(serviceSchemaManagerListernerID);      ssmi=null;    }  } catch (  Exception ex) {    debug.error("ServiceConfigImpl.clear Unable to remove " + "notification handler for dn: " + getDN(),ex);  }}  }
class C{  @Override public void unwrapSSLv2(byte[] bytes){  unexpectedMessage();}  }
class C{  public final void removeElementAt(int i){  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree); else   m_map[i]=java.lang.Integer.MIN_VALUE;  m_firstFree--;}  }
class C{  public final void add(final Problem problem){  this.problems.add(problem);}  }
class C{  public IllformedLocaleException(String message,int errorIndex){  super(message + ((errorIndex < 0) ? "" : " [at index " + errorIndex + "]"));  _errIdx=errorIndex;}  }
class C{  BinaryPropertyListWriter(OutputStream outStr) throws IOException {  out=new BufferedOutputStream(outStr);}  }
class C{  private void invoke(String methodName) throws LoginException {  for (int i=0; i < moduleStack.length; i++) {    ModuleInfo info=moduleStack[i];    LoginModuleControlFlag controlFlag=info.entry.getControlFlag();    AuditRequestContext.putProperty(LOGIN_MODULE_CONTROL_FLAG,getControlFlagAsString(controlFlag));    try {      int mIndex=0;      Method[] methods=null;      if (info.module != null) {        methods=info.module.getClass().getMethods();      } else {        Class c=Class.forName(info.entry.getLoginModuleName(),true,Thread.currentThread().getContextClassLoader());        Constructor constructor=c.getConstructor(PARAMS);        Object[] args={};        info.module=constructor.newInstance(args);        methods=info.module.getClass().getMethods();        for (mIndex=0; mIndex < methods.length; mIndex++) {          if (methods[mIndex].getName().equals(INIT_METHOD))           break;        }        Object[] initArgs={subject,callbackHandler,state,info.entry.getOptions()};        methods[mIndex].invoke(info.module,initArgs);      }      for (mIndex=0; mIndex < methods.length; mIndex++) {        if (methods[mIndex].getName().equals(methodName))         break;      }      Object[] args={};      boolean status=(Boolean)methods[mIndex].invoke(info.module,args);      if (status) {        if (!requiredExceptionHolder.hasException() && controlFlag == LoginModuleControlFlag.SUFFICIENT && (methodName.equals(LOGIN_METHOD) || methodName.equals(COMMIT_METHOD))) {          if (debug.messageEnabled()) {            debug.message(methodName + " SUFFICIENT success");          }          return;        }        if (debug.messageEnabled()) {          debug.message(methodName + " success");        }        success=true;      } else {        if (debug.messageEnabled()) {          debug.message(methodName + " ignored");        }      }    } catch (    NoSuchMethodException nsme) {      throw new LoginException("unable to instantiate LoginModule, module, because it does " + "not provide a no-argument constructor:" + info.entry.getLoginModuleName());    }catch (    InstantiationException ie) {      throw new LoginException("unable to instantiate LoginModule: " + ie.getMessage());    }catch (    ClassNotFoundException cnfe) {      throw new LoginException("unable to find LoginModule class: " + cnfe.getMessage());    }catch (    IllegalAccessException iae) {      throw new LoginException("unable to access LoginModule: " + iae.getMessage());    }catch (    InvocationTargetException ite) {      if (ite.getTargetException() instanceof Error) {        if (debug.messageEnabled()) {          debug.message("LoginContext.invoke(): Handling expected java.lang.Error");        }        throw (Error)ite.getTargetException();      }      LoginException le=null;      if (ite.getTargetException() instanceof LoginException) {        le=(LoginException)ite.getTargetException();      } else       if (ite.getTargetException() instanceof SecurityException) {        le=new LoginException("Security Exception");        if (debug.messageEnabled()) {          debug.message("original security exception with detail msg " + "replaced by new exception with empty detail msg");          debug.message("original security exception: " + ite.getTargetException().toString());        }      } else {        StringWriter sw=new StringWriter();        ite.getTargetException().printStackTrace(new PrintWriter(sw));        sw.flush();        le=new LoginException(sw.toString());      }      if (debug.messageEnabled()) {        debug.message(String.format("Method %s %s failure.",methodName,controlFlag));      }      if (controlFlag == LoginModuleControlFlag.OPTIONAL || controlFlag == LoginModuleControlFlag.SUFFICIENT) {        optionalExceptionHolder.setException(le);      } else {        requiredExceptionHolder.setException(le);        if (controlFlag == LoginModuleControlFlag.REQUISITE && (methodName.equals(LOGIN_METHOD) || methodName.equals(COMMIT_METHOD))) {          throw requiredExceptionHolder.getException();        }      }    } finally {      AuditRequestContext.removeProperty(LOGIN_MODULE_CONTROL_FLAG);    }  }  if (requiredExceptionHolder.hasException()) {    throw requiredExceptionHolder.getException();  } else   if (success == false && optionalExceptionHolder.hasException()) {    throw optionalExceptionHolder.getException();  } else   if (success == false) {    throw new LoginException("Login Failure: all modules ignored");  }}  }
class C{  public void schemaChanged(String serviceName,String version){}  }
class C{  private boolean parseRespondWith(List respondWith){  Iterator it=respondWith.iterator();  while (it.hasNext()) {    String respWith=(String)it.next();    int index=respWith.indexOf(":");    if ((index == -1) || (index == 0)) {      return false;    } else {      if (!(respWith.endsWith(":AuthenticationStatement")) && (!(respWith.endsWith(":AuthorizationDecisionStatement"))) && (!(respWith.endsWith(":AttributeStatement")))) {        return false;      }    }  }  return true;}  }
class C{  public void stopAllServers(boolean shutdown){  for (  ReplicationServerHandler rsHandler : connectedRSs.values()) {    stopServer(rsHandler,shutdown);  }  for (  DataServerHandler dsHandler : connectedDSs.values()) {    stopServer(dsHandler,shutdown);  }}  }
class C{  private static void parseArgs(String[] args){  if (args.length < 4 || args.length > 5) {    giveUp();  }  host=args[0];  port=Integer.parseInt(args[1]);  bindDN=args[2];  bindPassword=args[3];  if (args.length == 5) {    if ("use-starttls".equals(args[4].toLowerCase())) {      useStartTLS=true;      useSSL=false;    } else     if ("use-ssl".equals(args[4].toLowerCase())) {      useStartTLS=false;      useSSL=true;    } else {      giveUp();    }  }  keystore=System.getProperty("javax.net.ssl.trustStore");  storepass=System.getProperty("javax.net.ssl.trustStorePassword");  if (keystore == null) {    keystore=System.getProperty("java.home") + File.separator + "lib"+ File.separator+ "security"+ File.separator+ "cacerts";    storepass="changeit";  }}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){  return getService().fetchFooByUuidAndGroupId(uuid,groupId);}  }
class C{  public float floatValue(){  return (float)doubleValue;}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public final void connectTarget(boolean secure){  if (this.connected) {    throw new IllegalStateException("Already connected.");  }  this.connected=true;  this.secure=secure;}  }
class C{  public synchronized void remove(ComponentName componentName,UserHandleCompat user){  mCache.remove(new ComponentKey(componentName,user));}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssRelV10Token10Element createWssRelV10Token10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssRelV10Token10ElementImpl();}  }
class C{  public Component add(String title,Component component){  if (!(component instanceof UIResource)) {    addTab(title,component);  } else {    super.add(title,component);  }  return component;}  }
class C{  protected void lastResortExceptionHandling(Throwable originalException,Throwable defaultHandlingException){  try {    this.logger.error("Error while trying to use the default exception " + "handling : " + defaultHandlingException.getMessage() + ".\n"+ "The original exception was : "+ SpincastStatics.getStackTrace(originalException));  } catch (  Throwable ex3) {  }  throw new RuntimeException("An error occured.");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatasubstringvalue.class,args);}  }
class C{  public void process(XMLParser parser,String name,Vector elems,Hashtable atts,String Pcdata) throws XMLException {  if (DSConfigMgr.debugger.messageEnabled()) {    DSConfigMgr.debugger.message("in ServerGroup.process()");  }  if (name.equals(DSConfigMgr.SERVERGROUP)) {    groupName=(String)atts.get(DSConfigMgr.NAME);    for (int i=0; i < elems.size(); i++) {      Object obj=elems.elementAt(i);      if (DSConfigMgr.debugger.messageEnabled()) {        DSConfigMgr.debugger.message("Object of type:" + obj.getClass().getName());      }      if (obj instanceof Server) {        if (servers == null) {          if (DSConfigMgr.debugger.messageEnabled()) {            DSConfigMgr.debugger.message("Initializing servers list.");          }          servers=new ArrayList<Server>();        }        servers.add((Server)obj);      } else       if (obj instanceof LDAPUser) {        if (users == null) {          users=new ArrayList();        }        users.add(obj);      } else       if (obj instanceof GenericNode) {        GenericNode x=(GenericNode)obj;        if (x._name.equals(DSConfigMgr.BASE_DN)) {          if (x._pcdata != null) {            if (DN.valueOf(x._pcdata).size() <= 0) {              throw new XMLException(DSConfigMgr.getString(IUMSConstants.DSCFG_INVALID_BASE_DN) + x._pcdata);            }          }          baseDN=DN.valueOf(x._pcdata).toString();        } else         if (x._name.equals(DSConfigMgr.MISC_CONFIG)) {          String attrName=(String)x._atts.get(DSConfigMgr.NAME);          String attrValue=(String)x._atts.get(DSConfigMgr.VALUE);          if (name != null && name.length() > 0) {            if (miscConfig == null) {              miscConfig=new HashMap();            }            miscConfig.put(attrName,attrValue);          }        }      }    }    if (servers == null || baseDN == null) {      String errorMsg=null;      if (servers == null) {        errorMsg="No server object found in the server group:" + groupName;      }      if (baseDN == null) {        errorMsg="No base DN string defined in the server group:" + groupName;      }      throw new XMLException(errorMsg);    }    String maxConnPoolStr=System.getProperty("max_conn_pool");    if (maxConnPoolStr == null)     maxConnPoolStr=(String)atts.get(DSConfigMgr.MAX_CONN_POOL);    String minConnPoolStr=System.getProperty("min_conn_pool");    if (minConnPoolStr == null)     minConnPoolStr=(String)atts.get(DSConfigMgr.MIN_CONN_POOL);    try {      maxConnPool=Integer.parseInt(maxConnPoolStr);    } catch (    NumberFormatException ex) {      maxConnPool=10;    }    try {      minConnPool=Integer.parseInt(minConnPoolStr);    } catch (    NumberFormatException ex) {      minConnPool=1;    }    String ldapHeartbeatStr=System.getProperty(Constants.LDAP_HEARTBEAT);    if (ldapHeartbeatStr == null)     ldapHeartbeatStr=(String)atts.get(Constants.LDAP_HEARTBEAT);    try {      ldapHeartbeat=Integer.parseInt(ldapHeartbeatStr);    } catch (    NumberFormatException ex) {      ldapHeartbeat=10;    }  } else {    throw new XMLException(DSConfigMgr.getString(IUMSConstants.DSCFG_SERVERGROUP_NODE_EXPECTED));  }  parser.getGroupContainer().put(groupName,this);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  SAMLConstants sc;  StringBuffer xml=new StringBuffer(3000);  String libprefix="";  String secprefix="";  String liburi="";  String secNS="";  String secNSString="";  if (includeNS) {    libprefix=IFSConstants.LIB_PREFIX;    secprefix=WSSEConstants.TAG_SEC + ":";  }  if (declareNS) {    liburi=IFSConstants.LIB_NAMESPACE_STRING;    secNS=WSSEConstants.NS_SEC;    secNSString=" " + WSSEConstants.TAG_XMLNS + ":"+ WSSEConstants.TAG_SEC+ "=\""+ secNS+ "\"";  }  xml.append("<").append(secprefix).append(WSSEConstants.TAG_SESSIONSUBJECT).append(secNSString).append(">");  if (getNameIdentifier() != null) {    xml.append(getNameIdentifier().toString(includeNS,declareNS));  }  if (getSubjectConfirmation() != null) {    xml.append(getSubjectConfirmation().toString(includeNS,declareNS));  }  if (_idpNameIdentifier != null) {    xml.append(_idpNameIdentifier.toXMLString(includeNS,declareNS));  }  xml.append("</").append(secprefix).append(WSSEConstants.TAG_SESSIONSUBJECT).append(">");  return xml.toString();}  }
class C{  public static boolean isRootCA(X509Certificate cert){  return CertUtils.getIssuerName(cert).equals(CertUtils.getSubjectName(cert));}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.ProblemHeaderQNameElement createProblemHeaderQNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.ProblemHeaderQNameElementImpl();}  }
class C{  private void createStatusReplicationSubCommand() throws ArgumentException {  statusReplicationSubCmd=new SubCommand(this,STATUS_REPLICATION_SUBCMD_NAME,INFO_DESCRIPTION_SUBCMD_STATUS_REPLICATION.get());  scriptFriendlyArg=BooleanArgument.builder("script-friendly").shortIdentifier('s').description(INFO_DESCRIPTION_SCRIPT_FRIENDLY.get()).buildArgument();  addArgumentsToSubCommand(statusReplicationSubCmd,secureArgsList.getHostNameArg(),secureArgsList.getPortArg(),scriptFriendlyArg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapreturnnull.class,args);}  }
class C{  public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public boolean isMergeCompatible(StackFrame oldFrame,StackFrame afterRET){  if (oldFrame == null || oldFrame.getStackSize() != afterRET.getStackSize()) {    return false;  }  boolean changes=false;  for (int i=0; i < oldFrame.getLocals() + oldFrame.getStackSize(); ++i) {    Value v=afterRET.getStack(i);    if (v != null && !v.equals(oldFrame.getStack(i))) {      changes=true;    }  }  return changes;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  void recomposeTemplates(ElemTemplate template){  m_templateList.setTemplate(template);}  }
class C{  public static boolean isInt(final String str){  try {    Integer.parseInt(str);    return true;  } catch (  final NumberFormatException e) {    return false;  }}  }
class C{  protected static Set checkCaller(HttpServletRequest req,HttpServletResponse resp) throws ServletException {  String certOrIP=null;  Set partnerSourceID=null;  String remoteAddr=ClientUtils.getClientIPAddress(req);  if (SAMLUtils.debug.messageEnabled()) {    SAMLUtils.debug.message("caller's IP:" + remoteAddr);  }  java.security.cert.X509Certificate[] allCerts=null;  if (req.isSecure()) {    try {      allCerts=(java.security.cert.X509Certificate[])req.getAttribute("javax.servlet.request.X509Certificate");    } catch (    Exception e) {      SAMLUtils.debug.error("SAMLSOAPReceiver: Exception",e);    }  }  if (allCerts == null || allCerts.length == 0) {    certOrIP=remoteAddr;  } else {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SAMLSOAPReceiver: got all certs from " + "HttpServletRequest =" + allCerts.length);    }    java.security.cert.X509Certificate thecert=allCerts[0];    SAMLCertUtils.CertEntry foundCertEntry=null;    if ((foundCertEntry=SAMLCertUtils.getMatchingCertEntry(thecert)) != null) {      certOrIP=foundCertEntry.getNickName();      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("Found matching nickname:" + certOrIP);      }    }  }  partnerSourceID=getPartnerSourceID(certOrIP);  if (partnerSourceID == null || partnerSourceID.isEmpty()) {    return (null);  }  return (partnerSourceID);}  }
class C{  private void incrEntryLimitStats(Index index,ByteString key){  HashMap<ByteString,Long> hashMap=entryLimitMap.get(index);  if (hashMap == null) {    hashMap=new HashMap<>();    entryLimitMap.put(index,hashMap);  }  Long counter=hashMap.get(key);  if (counter != null) {    counter++;  } else {    counter=1L;  }  hashMap.put(key,counter);}  }
class C{  public HttpServlet(){}  }
class C{  public Object clone(){  return (new CompoundName(getAll(),mySyntax));}  }
class C{  public static boolean displayConfirmationDialog(Component parentComponent,LocalizableMessage title,LocalizableMessage msg){  String plainText=msg.toString().replaceAll("<br>",ServerConstants.EOL);  String wrappedText=wrapText(plainText,70);  wrappedText=wrappedText.replaceAll(ServerConstants.EOL,"<br>");  return JOptionPane.YES_OPTION == JOptionPane.showOptionDialog(parentComponent,"<html>" + wrappedText,title.toString(),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,null,null);}  }
class C{  public static void returnToSource(HttpServletResponse response,String retURL,String commonErrorPage,String errorLocaleString,String remarkLocaleString){  try {    if (retURL == null || retURL.length() < 1) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("returnToSource returns sendError" + "as source provider is unknown");      }      showErrorPage(response,commonErrorPage,errorLocaleString,remarkLocaleString);      return;    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("returnToSource returns URL : " + retURL);      }      response.sendRedirect(retURL);      return;    }  } catch (  IOException exx) {    FSUtils.debug.error("Redirect/sendError failed. Control halted:",exx);  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public boolean equals(Object other){  if (this == other) {    return true;  }  if (!(other instanceof EllipticCurve)) {    return false;  }  EllipticCurve otherEc=(EllipticCurve)other;  return this.field.equals(otherEc.field) && this.a.equals(otherEc.a) && this.b.equals(otherEc.b)&& Arrays.equals(this.seed,otherEc.seed);}  }
class C{  private V doGet(Object key){  if (key == null)   throw new NullPointerException();  Comparator<? super K> cmp=comparator;  outer:   for (; ; ) {    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {      Object v;      int c;      if (n == null)       break outer;      Node<K,V> f=n.next;      if (n != b.next)       break;      if ((v=n.value) == null) {        n.helpDelete(b,f);        break;      }      if (b.value == null || v == n)       break;      if ((c=cpr(cmp,key,n.key)) == 0) {        @SuppressWarnings("unchecked") V vv=(V)v;        return vv;      }      if (c < 0)       break outer;      b=n;      n=f;    }  }  return null;}  }
class C{  public Policy(String policyName) throws InvalidNameException {  this(policyName,null);}  }
class C{  public static FontEncoding createFontSpecificEncoding(){  FontEncoding encoding=new FontEncoding();  encoding.fontSpecific=true;  for (int ch=0; ch < 256; ch++) {    encoding.unicodeToCode.put(ch,ch);    encoding.codeToUnicode[ch]=ch;    encoding.unicodeDifferences.put(ch,ch);  }  return encoding;}  }
class C{  @Override public void onClick(View v){  int bright=(Integer)v.getTag();  android.provider.Settings.System.putInt(getContentResolver(),android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE,Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL);  android.provider.Settings.System.putInt(getContentResolver(),android.provider.Settings.System.SCREEN_BRIGHTNESS,bright);  updateBrightness(bright);  finish();}  }
class C{  public void handleMBeanUnregistration(ObjectName objectName,String roleName) throws IllegalArgumentException, RoleNotFoundException, InvalidRoleValueException, RelationServiceNotRegisteredException, RelationTypeNotFoundException, RelationNotFoundException {  if (objectName == null || roleName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationSupport.class.getName(),"handleMBeanUnregistration",new Object[]{objectName,roleName});  handleMBeanUnregistrationInt(objectName,roleName,false,null);  RELATION_LOGGER.exiting(RelationSupport.class.getName(),"handleMBeanUnregistration");  return;}  }
class C{  public StylesheetRoot(XSLTSchema schema,ErrorListener listener) throws TransformerConfigurationException {  this(listener);  m_availElems=schema.getElemsAvailable();}  }
class C{  @Override public CancelResult cancelOperation(int messageID,CancelRequest cancelRequest){  Operation op=operationsInProgress.get(messageID);  if (op != null) {    return op.cancel(cancelRequest);  }  for (  PersistentSearch ps : getPersistentSearches()) {    if (ps.getMessageID() == messageID) {      return ps.cancel();    }  }  return new CancelResult(ResultCode.NO_SUCH_OPERATION,null);}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  public char first(){  pos=0;  return current();}  }
class C{  public boolean hasToTag(){  return hasParameter(ParameterNames.TO_TAG);}  }
class C{  public void testInsertPrepared() throws SQLException {  PreparedStatement stat=conn.prepareStatement("INSERT INTO " + DatabaseCreator.TEST_TABLE5 + " VALUES(?, ?)");  stat.setInt(1,1);  stat.setString(2,"1");  stat.execute();  stat.setInt(1,2);  stat.setString(2,"3");  stat.execute();  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.TEST_TABLE5 + " WHERE (testId = 1 AND testValue = '1') "+ "OR (testId = 2 AND testValue = '3')");  r.next();  assertEquals("Incorrect number of records",2,r.getInt(1));  r.close();  stat.close();}  }
class C{  public final Node peepTailSub1(){  return m_map[m_firstFree - 2];}  }
class C{  private boolean hasDividerBeforeFlexLine(int flexLineIndex){  if (flexLineIndex < 0 || flexLineIndex >= mFlexLines.size()) {    return false;  }  if (allFlexLinesAreDummyBefore(flexLineIndex)) {    if (isMainAxisDirectionHorizontal(mFlexDirection)) {      return (mShowDividerHorizontal & SHOW_DIVIDER_BEGINNING) != 0;    } else {      return (mShowDividerVertical & SHOW_DIVIDER_BEGINNING) != 0;    }  } else {    if (isMainAxisDirectionHorizontal(mFlexDirection)) {      return (mShowDividerHorizontal & SHOW_DIVIDER_MIDDLE) != 0;    } else {      return (mShowDividerVertical & SHOW_DIVIDER_MIDDLE) != 0;    }  }}  }
class C{  public void paintSliderThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  protected final void implAccept(Socket s) throws IOException {  SocketImpl si=null;  try {    if (s.impl == null)     s.setImpl(); else {      s.impl.reset();    }    si=s.impl;    s.impl=null;    si.address=new InetAddress();    si.fd=new FileDescriptor();    getImpl().accept(si);    SecurityManager security=System.getSecurityManager();    if (security != null) {      security.checkAccept(si.getInetAddress().getHostAddress(),si.getPort());    }  } catch (  IOException e) {    if (si != null)     si.reset();    s.impl=si;    throw e;  }catch (  SecurityException e) {    if (si != null)     si.reset();    s.impl=si;    throw e;  }  s.impl=si;  s.postAccept();}  }
class C{  public static boolean isForwardSuccess(AuthContextLocal authContext,HttpServletRequest req){  boolean isForward=forwardSuccessExists(req);  if (!isForward) {    LoginState loginState=getLoginState(authContext);    if (loginState != null) {      isForward=loginState.isForwardSuccess();    }  }  return isForward;}  }
class C{  public X509Certificate generate(PrivateKey key,String provider,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=tbsGen.generateTBSCertificate();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,provider,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  return generateJcaObject(tbsCert,signature);}  }
class C{  @Advice.OnMethodExit public static void exit(){  ConnectorImpl.cassandraSetupComplete();}  }
class C{  public void lineTo(float x,float y){  if (currentPoint == null) {    throw new RuntimeException(START_PATH_ERR_MSG);  }  Point targetPoint=new Point(x,y);  getLastSubpath().addSegment(new Line(currentPoint,targetPoint));  currentPoint=targetPoint;}  }
class C{  public void draw_boundary(PlaShape p_shape,double p_draw_half_width,Color p_color,Graphics p_g,double p_translucency_factor){  if (p_shape instanceof ShapeSegments) {    PlaPointFloat[] draw_corners=p_shape.corner_approx_arr();    if (draw_corners.length <= 1)     return;    PlaPointFloat[] closed_draw_corners=new PlaPointFloat[draw_corners.length + 1];    System.arraycopy(draw_corners,0,closed_draw_corners,0,draw_corners.length);    closed_draw_corners[closed_draw_corners.length - 1]=draw_corners[0];    draw(closed_draw_corners,p_draw_half_width,p_color,p_g,p_translucency_factor);  } else   if (p_shape instanceof ShapeCircle) {    ShapeCircle curr_circle=(ShapeCircle)p_shape;    draw_circle(curr_circle.center.to_float(),curr_circle.radius,p_draw_half_width,p_color,p_g,p_translucency_factor);  }}  }
class C{  public ModelMBeanNotificationInfo(ModelMBeanNotificationInfo inInfo){  this(inInfo.getNotifTypes(),inInfo.getName(),inInfo.getDescription(),inInfo.getDescriptor());}  }
class C{  public ValidateActionHandler(SSOTokenManager ssoTokenManager,SessionResourceUtil sessionResourceUtil){  this.ssoTokenManager=ssoTokenManager;  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  public static QueryExp or(QueryExp q1,QueryExp q2){  return new OrQueryExp(q1,q2);}  }
class C{  @SuppressWarnings("unused") static <T>Promise<Set<T>> promiseSet(Class<T> componentType){  return new BasePromise<>();}  }
class C{  public void writeAddChangeRecord(Entry entry) throws IOException {  ifNull(entry);  BufferedWriter writer=exportConfig.getWriter();  int wrapColumn=exportConfig.getWrapColumn();  boolean wrapLines=wrapColumn > 1;  writeDN("dn",entry.getName(),writer,wrapLines,wrapColumn);  StringBuilder changeTypeLine=new StringBuilder("changetype: add");  writeLDIFLine(changeTypeLine,writer,wrapLines,wrapColumn);  for (  String s : entry.getObjectClasses().values()) {    StringBuilder ocLine=new StringBuilder();    ocLine.append("objectClass: ");    ocLine.append(s);    writeLDIFLine(ocLine,writer,wrapLines,wrapColumn);  }  for (  AttributeType attrType : entry.getUserAttributes().keySet()) {    for (    Attribute a : entry.getUserAttribute(attrType)) {      String attrName=a.getAttributeDescription().toString();      for (      ByteString v : a) {        writeAttribute(attrName,v,writer,wrapLines,wrapColumn);      }    }  }  writer.newLine();}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  protected FilterRule(String ruleText){  if (StringUtils.isEmpty(ruleText)) {    throw new IllegalArgumentException("ruleText cannot be empty");  }  this.ruleText=ruleText;}  }
class C{  public void activate(){  active=true;}  }
class C{  public Cache(int capacity){  this(capacity,0.75f);  maxSize=capacity;  lruTracker=new LRUList();}  }
class C{  @Override public Object clone(){  try {    IdentityHashMap<K,V> cloneHashMap=(IdentityHashMap<K,V>)super.clone();    cloneHashMap.elementData=newElementArray(elementData.length);    System.arraycopy(elementData,0,cloneHashMap.elementData,0,elementData.length);    return cloneHashMap;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public static char byteToASCII(final byte b){  if (isPrintable(b)) {    return (char)b;  }  return ' ';}  }
class C{  public static boolean isNullOrNil(String str){  return str == null || "".equals(str);}  }
class C{  public Resource objectClass(final String objectClass){  this.objectClasses.add(objectClass);  return this;}  }
class C{  public boolean containsCustomComponents(JOptionPane a){  boolean returnValue=((OptionPaneUI)(uis.elementAt(0))).containsCustomComponents(a);  for (int i=1; i < uis.size(); i++) {    ((OptionPaneUI)(uis.elementAt(i))).containsCustomComponents(a);  }  return returnValue;}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  return retval.append(Integer.toString(expires));}  }
class C{  private static GeneralizedTime createTime(final String value,final int year,final int month,final int day,final int hour,final int minute,final int second,final TimeZone tz){  try {    final GregorianCalendar calendar=new GregorianCalendar();    calendar.setLenient(false);    calendar.setTimeZone(tz);    calendar.set(year,month,day,hour,minute,second);    calendar.set(Calendar.MILLISECOND,0);    return new GeneralizedTime(calendar,null,Long.MIN_VALUE,value);  } catch (  final Exception e) {    final LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME.get(value,String.valueOf(e));    throw new LocalizedIllegalArgumentException(message,e);  }}  }
class C{  ADSContextException(ErrorType error,Throwable x){  this(error,getMessage(error,x),x);}  }
class C{  public final void testHashCode01(){  ECFieldFp f=new ECFieldFp(BigInteger.valueOf(23L));  int hc=f.hashCode();  assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());}  }
class C{  final int internalNextInt(int origin,int bound){  int r=mix32(nextSeed());  if (origin < bound) {    int n=bound - origin, m=n - 1;    if ((n & m) == 0)     r=(r & m) + origin; else     if (n > 0) {      for (int u=r >>> 1; u + m - (r=u % n) < 0; u=mix32(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=mix32(nextSeed());    }  }  return r;}  }
class C{  public static boolean isAGPLVersion(){  return getInstance().getVersion().indexOf(AGPL) > 0;}  }
class C{  @Override protected final void finishResponse() throws IOException {  if (responseFinished)   return;  responseFinished=true;  if (waitingForBodyMessage || first && request.getContentLengthLong() > 0) {    refillReadBuffer(true);  }  if (getErrorState().isError()) {    socketWrapper.write(true,endAndCloseMessageArray,0,endAndCloseMessageArray.length);  } else {    socketWrapper.write(true,endMessageArray,0,endMessageArray.length);  }  socketWrapper.flush(true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/L2","dom:elem");{    boolean success=false;    try {      element.setPrefix("xml");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public LogException(String msg,int type){  super(msg);  excep_type=type;}  }
class C{  boolean containsArguments(){  return !args.isEmpty();}  }
class C{  public static boolean matchName(Set<String> patternSet,String fileName){  char[] fileNameArray=fileName.toCharArray();  for (  String pattern : patternSet) {    if (match(pattern,fileNameArray,true)) {      return true;    }  }  return false;}  }
class C{  public List<MappedMember> findMethodsByName(String text,boolean useOriginalName){  List<MappedMember> list=new ArrayList<MappedMember>();  for (  MappedMember mm : getMethods()) {    if (useOriginalName ? mm.getOriginalName().equals(text) : mm.getNewName().equals(text)) {      list.add(mm);    }  }  return list;}  }
class C{  private void exerciseTransformationHandler(QueryResourceHandler capturedHandler){  JsonValue jsonValue=JsonValue.json(object(field("resourceTypeUuid","abc-def-hij")));  ResourceResponse resource=newResourceResponse("testId","1.2.3",jsonValue);  capturedHandler.handleResource(resource);  verify(queryResultHandler).handleResource(resource);  assertThat(jsonValue.contains("resourceTypeUuid")).isFalse();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns09.class,args);}  }
class C{  public void replaceAttribute(Attribute attribute){  setAttribute(attribute,null,true);}  }
class C{  public RSAPrivateKeySpec(BigInteger modulus,BigInteger privateExponent){  this.modulus=modulus;  this.privateExponent=privateExponent;}  }
class C{  public R visitBoolean(BooleanPropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  public PdfPage addPage(int index,PdfPage page){  checkClosingStatus();  checkAndAddPage(index,page);  currentPage=page;  dispatchEvent(new PdfDocumentEvent(PdfDocumentEvent.INSERT_PAGE,page));  return currentPage;}  }
class C{  public Conversation(Plugin plugin,Conversable forWhom,Prompt firstPrompt,Map<Object,Object> initialSessionData){  this.firstPrompt=firstPrompt;  this.context=new ConversationContext(plugin,forWhom,initialSessionData);  this.modal=true;  this.localEchoEnabled=true;  this.prefix=new NullConversationPrefix();  this.cancellers=new ArrayList<ConversationCanceller>();  this.abandonedListeners=new ArrayList<ConversationAbandonedListener>();}  }
class C{  public void removePort(){  port=-1;}  }
class C{  public void validateUserID(String userID) throws AMException {}  }
class C{  public LDAPResult doOperation(ObjectFactory objFactory,CompareRequest compareRequest,List<org.opends.server.types.Control> controls) throws IOException, LDAPException, DecodeException {  LDAPResult compareResponse=objFactory.createLDAPResult();  compareResponse.setRequestID(compareRequest.getRequestID());  AttributeValueAssertion attrValAssertion=compareRequest.getAssertion();  String attrName=attrValAssertion.getName();  Object assertion=attrValAssertion.getValue();  ByteString attrValue=ByteStringUtility.convertValue(assertion);  ByteString dnStr=ByteString.valueOfUtf8(compareRequest.getDn());  ProtocolOp op=new CompareRequestProtocolOp(dnStr,attrName,attrValue);  LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),op,controls);  connection.getLDAPWriter().writeMessage(msg);  LDAPMessage responseMessage=connection.getLDAPReader().readMessage();  CompareResponseProtocolOp compareOp=responseMessage.getCompareResponseProtocolOp();  int resultCode=compareOp.getResultCode();  LocalizableMessage errorMessage=compareOp.getErrorMessage();  compareResponse.setErrorMessage(errorMessage != null ? errorMessage.toString() : null);  ResultCode code=ResultCodeFactory.create(objFactory,resultCode);  compareResponse.setResultCode(code);  if (compareOp.getMatchedDN() != null) {    compareResponse.setMatchedDN(compareOp.getMatchedDN().toString());  }  return compareResponse;}  }
class C{  private void updateContents(ServerDescriptor desc){  JScrollPane scroll=Utilities.getContainingScroll(this);  ViewPositions pos;  if (scroll != null) {    pos=Utilities.getViewPositions(scroll);  } else {    pos=Utilities.getViewPositions(this);  }  Collection<Exception> exceptions=desc.getExceptions();  if (exceptions.isEmpty()) {    boolean errorPaneVisible=false;    if (desc.getStatus() == ServerDescriptor.ServerStatus.STARTED) {      if (!desc.isAuthenticated()) {        errorPaneVisible=true;        LocalizableMessageBuilder mb=new LocalizableMessageBuilder();        mb.append(INFO_CTRL_PANEL_AUTH_REQUIRED_TO_BROWSE_MONITORING_SUMMARY.get());        mb.append("<br><br>").append(getAuthenticateHTML());        LocalizableMessage title=INFO_CTRL_PANEL_AUTHENTICATION_REQUIRED_SUMMARY.get();        updateErrorPane(errorPane,title,ColorAndFontConstants.errorTitleFont,mb.toMessage(),ColorAndFontConstants.defaultFont);      }    } else     if (desc.getStatus() == ServerDescriptor.ServerStatus.NOT_CONNECTED_TO_REMOTE) {      errorPaneVisible=true;      LocalizableMessageBuilder mb=new LocalizableMessageBuilder();      mb.append(INFO_CTRL_PANEL_CANNOT_CONNECT_TO_REMOTE_DETAILS.get(desc.getHostname()));      mb.append("<br><br>").append(getAuthenticateHTML());      LocalizableMessage title=INFO_CTRL_PANEL_CANNOT_CONNECT_TO_REMOTE_SUMMARY.get();      updateErrorPane(errorPane,title,ColorAndFontConstants.errorTitleFont,mb.toMessage(),ColorAndFontConstants.defaultFont);    }    if (errorPane.isVisible() != errorPaneVisible) {      errorPane.setVisible(errorPaneVisible);    }  } else {    ArrayList<String> msgs=new ArrayList<>();    for (    Exception e : exceptions) {      msgs.add(e instanceof LdapException ? ((LdapException)e).getLocalizedMessage() : e.getMessage());    }    LocalizableMessage title=ERR_CTRL_PANEL_ERROR_READING_CONFIGURATION_SUMMARY.get();    StringBuilder sb=new StringBuilder();    Utils.joinAsString("<br>",msgs);    if (desc.getStatus() == ServerDescriptor.ServerStatus.STARTED) {      if (!desc.isAuthenticated()) {        sb.append("<br>");        sb.append(INFO_CTRL_PANEL_AUTH_REQUIRED_TO_BROWSE_MONITORING_SUMMARY.get());        sb.append("<br><br>").append(getAuthenticateHTML());      }    } else     if (desc.getStatus() == ServerDescriptor.ServerStatus.NOT_CONNECTED_TO_REMOTE) {      sb.append("<br>");      sb.append(INFO_CTRL_PANEL_CANNOT_CONNECT_TO_REMOTE_DETAILS.get(desc.getHostname()));      sb.append("<br><br>").append(getAuthenticateHTML());    }    updateErrorPane(errorPane,title,ColorAndFontConstants.errorTitleFont,LocalizableMessage.raw(sb),ColorAndFontConstants.defaultFont);    if (!errorPane.isVisible()) {      errorPane.setVisible(true);    }  }  setText(serverStatus,getStatusLabel(desc));  boolean isRunning=desc.getStatus() == ServerDescriptor.ServerStatus.STARTED;  boolean isAuthenticated=desc.isAuthenticated();  boolean isLocal=desc.isLocal();  startButton.setVisible(desc.getStatus() == ServerDescriptor.ServerStatus.STOPPED && isLocal);  restartButton.setVisible(isRunning && isLocal);  stopButton.setVisible(isRunning && isLocal);  if (!isRunning) {    if (isLocal) {      Utilities.setNotAvailableBecauseServerIsDown(currentConnections);    } else {      Utilities.setTextValue(currentConnections,INFO_NOT_AVAILABLE_SHORT_LABEL.get().toString());    }  } else   if (!isAuthenticated) {    Utilities.setNotAvailableBecauseAuthenticationIsRequired(currentConnections);  } else {    int nConnections=desc.getOpenConnections();    if (nConnections >= 0) {      Utilities.setTextValue(currentConnections,String.valueOf(nConnections));    } else {      Utilities.setNotAvailable(currentConnections);    }  }  setText(hostName,desc.getHostname());  Set<DN> rootUsers=desc.getAdministrativeUsers();  SortedSet<String> sortedRootUsers=new TreeSet<>();  for (  DN dn : rootUsers) {    try {      sortedRootUsers.add(Utilities.unescapeUtf8(dn.toString()));    } catch (    Throwable t) {      throw new RuntimeException("Unexpected error: " + t,t);    }  }  String htmlText=!rootUsers.isEmpty() ? Utilities.getStringFromCollection(sortedRootUsers,"<br>") : INFO_NOT_AVAILABLE_SHORT_LABEL.get().toString();  setText(administrativeUsers,htmlText);  String install=desc.getInstallPath();  setText(install,installPath);  String instance=desc.getInstancePath();  setText(instance,instancePath);  instancePath.setVisible(!desc.sameInstallAndInstance());  lInstancePath.setVisible(!desc.sameInstallAndInstance());  if (desc.getOpenDSVersion() != null) {    setText(opendsVersion,desc.getOpenDSVersion());  } else {    setText(opendsVersion,INFO_NOT_AVAILABLE_SHORT_LABEL.get().toString());  }  if (!isRunning) {    if (isLocal) {      Utilities.setNotAvailableBecauseServerIsDown(javaVersion);    } else {      Utilities.setTextValue(javaVersion,INFO_NOT_AVAILABLE_SHORT_LABEL.get().toString());    }  } else   if (!isAuthenticated) {    Utilities.setNotAvailableBecauseAuthenticationIsRequired(javaVersion);  } else {    String jVersion=desc.getJavaVersion();    if (jVersion != null) {      Utilities.setTextValue(javaVersion,jVersion);    } else {      Utilities.setNotAvailable(javaVersion);    }  }  setText(adminConnector,getAdminConnectorStringValue(desc.getAdminConnector()));  Set<BaseDNDescriptor> baseDNs=new HashSet<>();  for (  BackendDescriptor backend : desc.getBackends()) {    if (!backend.isConfigBackend()) {      baseDNs.addAll(backend.getBaseDns());    }  }  boolean oneReplicated=oneReplicated(baseDNs);  boolean hasBaseDNs=!baseDNs.isEmpty();  replicationBaseDNsTable.setVisible(oneReplicated && hasBaseDNs);  replicationBaseDNsTable.getTableHeader().setVisible(oneReplicated && hasBaseDNs);  noReplicatedBaseDNsTable.setVisible(!oneReplicated && hasBaseDNs);  noReplicatedBaseDNsTable.getTableHeader().setVisible(!oneReplicated && hasBaseDNs);  dbTableEmpty.setVisible(!hasBaseDNs);  dbTableModelWithReplication.setData(baseDNs,desc.getStatus(),desc.isAuthenticated());  dbTableModelWithoutReplication.setData(baseDNs,desc.getStatus(),desc.isAuthenticated());  Set<ConnectionHandlerDescriptor> connectionHandlers=desc.getConnectionHandlers();  connectionHandlerTableModel.setData(connectionHandlers);  boolean hasConnectionHandlers=!connectionHandlers.isEmpty();  connectionHandlersTable.setVisible(hasConnectionHandlers);  connectionHandlersTable.getTableHeader().setVisible(hasConnectionHandlers);  connectionHandlerTableEmpty.setVisible(!hasConnectionHandlers);  recalculateSizes();  Utilities.updateViewPositions(pos);}  }
class C{  private boolean needTypeState(final boolean throwEofException) throws IOException {  if (reader.remaining() <= 0) {    if (throwEofException) {      final LocalizableMessage message=ERR_ASN1_TRUCATED_TYPE_BYTE.get();      throw DecodeException.fatalError(message);    }    return false;  }  final int type=reader.readByte();  peekType=(byte)type;  state=ASN1.ELEMENT_READ_STATE_NEED_FIRST_LENGTH_BYTE;  return true;}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  char[] buffer=new char[DEFAULT_BUFFER_SIZE];  int count=0;  int n=0;  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  private void postInitViewPager(){  if (isInEditMode()) {    return;  }  try {    Field scroller=ViewPager.class.getDeclaredField("mScroller");    scroller.setAccessible(true);    Field interpolator=ViewPager.class.getDeclaredField("sInterpolator");    interpolator.setAccessible(true);    mScroller=new WXSmoothScroller(getContext(),(Interpolator)interpolator.get(null));    scroller.set(this,mScroller);  } catch (  Exception e) {    WXLogUtils.e("[CircleViewPager] postInitViewPager: " + WXLogUtils.getStackTrace(e));  }}  }
class C{  public static Date previous(int days){  return new Date(System.currentTimeMillis() - days * 3600000L * 24L);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=getArg0AsNode(xctxt);  String s;  if (context != DTM.NULL) {    DTM dtm=xctxt.getDTM(context);    int t=dtm.getNodeType(context);    if (t == DTM.ELEMENT_NODE) {      s=dtm.getNamespaceURI(context);    } else     if (t == DTM.ATTRIBUTE_NODE) {      s=dtm.getNodeName(context);      if (s.startsWith("xmlns:") || s.equals("xmlns"))       return XString.EMPTYSTRING;      s=dtm.getNamespaceURI(context);    } else     return XString.EMPTYSTRING;  } else   return XString.EMPTYSTRING;  return ((null == s) ? XString.EMPTYSTRING : new XString(s));}  }
class C{  public UnsupportedOperationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public String toString(){  return ("NTPrincipal:  " + name);}  }
class C{  public List<String> defaultComments(ProtoElement element){  if (!element.hasAttribute(ElementDocumentationAttribute.KEY)) {    return ImmutableList.<String>of();  }  return convertToCommentedBlock(RDocCommentFixer.rdocify(DocumentationUtil.getScopedDescription(element)));}  }
class C{  @Override public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  public void addObligation(Obligation obligation) throws XACMLException {  if (!mutable) {    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("objectImmutable"));  }  if (obligations == null) {    obligations=new ArrayList();  }  obligations.add(obligation);}  }
class C{  private boolean isValidDomainPart(String dp){  char ch;  Character character;  StringBuilder buf=new StringBuilder(dp);  if (buf.charAt(0) == '-' || buf.charAt(buf.length() - 1) == '-') {    return false;  }  if (buf.length() > 63) {    return false;  }  for (int i=0; i < buf.length(); i++) {    ch=buf.charAt(i);    character=new Character(ch);    if (!validDomainChars.contains(character.toString())) {      return false;    }  }  return true;}  }
class C{  public static void writeAny(OutputStream out,Object obj){  if (utilDelegate != null) {    utilDelegate.writeAny(out,obj);  }}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.HelpElement createHelpElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.HelpElementImpl();}  }
class C{  public void resetDB(){  dbHelper.cleanup(database);}  }
class C{  public void makeImmutable(){  if (isMutable) {    if ((statusCode != null) && (statusCode.isMutable())) {      statusCode.makeImmutable();    }    isMutable=false;  }}  }
class C{  public static <T>Set<T> asSet(T... values){  if (values == null) {    return new HashSet<T>(0);  } else {    return new HashSet<T>(Arrays.asList(values));  }}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  private void throwReferralException(DN targetDN,DN referralDN,Collection<String> labeledURIs,SearchScope searchScope) throws DirectoryException {  ArrayList<String> URIList=new ArrayList<>(labeledURIs.size());  for (  String labeledURI : labeledURIs) {    String uri=labeledURI;    int i=labeledURI.indexOf(' ');    if (i != -1) {      uri=labeledURI.substring(0,i);    }    try {      LDAPURL ldapurl=LDAPURL.decode(uri,false);      if ("ldap".equalsIgnoreCase(ldapurl.getScheme())) {        DN urlBaseDN=targetDN;        if (!referralDN.equals(ldapurl.getBaseDN())) {          urlBaseDN=targetDN.rename(referralDN,ldapurl.getBaseDN());        }        ldapurl.setBaseDN(urlBaseDN);        if (searchScope == null) {          StringBuilder builder=new StringBuilder(uri.length());          ldapurl.toString(builder,true);          uri=builder.toString();        } else {          ldapurl.getAttributes().clear();          ldapurl.setScope(searchScope);          ldapurl.setFilter(null);          uri=ldapurl.toString();        }      }    } catch (    LocalizedIllegalArgumentException|DirectoryException e) {      logger.traceException(e);    }    URIList.add(uri);  }  throw new DirectoryException(ResultCode.REFERRAL,NOTE_REFERRAL_RESULT_MESSAGE.get(referralDN),referralDN,URIList,null);}  }
class C{  private void buildParameter(MethodVisitor methodVisitor,List<SParameter> params){  for (int i=0; i < params.size(); i++) {    SParameter param=params.get(i);    methodVisitor.visitParameter(param.name(),param.canChange() ? 0 : Opcodes.ACC_FINAL);    for (    SAnno anno : param.annos()) {      AnnotationVisitor annotationVisitor=methodVisitor.visitParameterAnnotation(i,typeToDesc(anno.type()),annotationIsVisible(anno));      buildAnnotation(annotationVisitor,anno);    }  }}  }
