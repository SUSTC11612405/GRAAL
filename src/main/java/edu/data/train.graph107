class C{  public synchronized void store(Document doc,Resource res) throws IOException {  OutputFormat format=new OutputFormat(doc,null,true);  format.setLineSeparator("\r\n");  format.setLineWidth(72);  OutputStream os=null;  try {    XMLSerializer serializer=new XMLSerializer(os=res.getOutputStream(),format);    serializer.serialize(doc.getDocumentElement());  }  finally {    IOUtil.closeEL(os);  }}  }
class C{  public float noise(float x,float y){  return noise(x,y,0f);}  }
class C{  public boolean isDML(){  return scriptType.isDML();}  }
class C{  protected void paintBuffer(final Graphics2D context,int x,int y,int skipColumns){  context.setFont(perCharFonts[0]);  FontMetrics fontMetrics=context.getFontMetrics();  context.fillRect(0,0,numberOfColumnsInBuffer * fontMetrics.charWidth('a'),numberOfLinesInBuffer * fontMetrics.getHeight());  for (int i=0; i < numberOfLinesInBuffer; i++) {    AttributedString stringToDraw=getAttributedStringForLine(i,skipColumns);    context.drawString(stringToDraw.getIterator(),x,y + fontMetrics.getHeight() * (i + 1));  }}  }
class C{  public void preBreedingStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].preBreedingStatistics(state);}  }
class C{  public void Done(){  nextCharBuf=null;  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  public static void displayHelp(){  System.out.println("Usage:");  System.out.println("\tCase 1: JVnSenSegmenter -modeldir <model directory> -inputfile <input data file>");  System.out.println("\tCase 2: JVnSenSegmenter -modeldir <model directory> -inputdir <input data directory>");  System.out.println("Where:");  System.out.println("\t<model directory> is the directory contain the model and option files");  System.out.println("\t<input data file> is the file containing input text that need to");  System.out.println("\thave sentences segmented (each sentence on a line)");  System.out.println("\t<input data directory> is the directory containing multiple input .tkn files");  System.out.println();}  }
class C{  public static PricedOption createPricedOption(BigDecimal pricePerUser,BigDecimal pricePerSubscription,final PricedParameter pricedParameter,String optionId,long parameterdefinition_tkey,DataService dataManager) throws NonUniqueBusinessKeyException {  PricedOption pricedOption=new PricedOption();  pricedOption.setPricedParameter(pricedParameter);  Query query=dataManager.createQuery("select c from ParameterOption c where optionId=:optionId and parameterdefinition_tkey=:parameterdefinition_tkey");  query.setParameter("optionId",optionId);  query.setParameter("parameterdefinition_tkey",Long.valueOf(parameterdefinition_tkey));  final List<ParameterOption> parameterOptionArray=new ArrayList<ParameterOption>();  Iterator<ParameterOption> parameterOptionIterator=ParameterizedTypes.iterator(query.getResultList(),ParameterOption.class);  while (parameterOptionIterator.hasNext()) {    parameterOptionArray.add(parameterOptionIterator.next());  }  final long parameterOptionKey=parameterOptionArray.get(0).getKey();  pricedOption.setParameterOptionKey(parameterOptionKey);  pricedOption.setPricePerUser(pricePerUser);  pricedOption.setPricePerSubscription(pricePerSubscription);  dataManager.persist(pricedOption);  dataManager.flush();  pricedParameter.getPricedOptionList().add(pricedOption);  return pricedOption;}  }
class C{  public static Recipe fromCursor(Cursor cursor){  Recipe recipe=new Recipe(null);  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeTable.ID_COLUMN)) {      recipe.id=cursor.getString(c);    } else     if (columnName.equals(RecipeTable.TITLE_COLUMN)) {      recipe.setTitle(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.DESCRIPTION_COLUMN)) {      recipe.setDescription(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PHOTO_COLUMN)) {      recipe.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PREP_TIME_COLUMN)) {      recipe.setPrepTime(cursor.getString(c));    }  }  return recipe;}  }
class C{  @SuppressWarnings("rawtypes") public SPOPredicate(final String relationName,final IVariableOrConstant<IV> s,final IVariableOrConstant<IV> p,final IVariableOrConstant<IV> o){  super(new IVariableOrConstant[]{s,p,o},new NV(Annotations.RELATION_NAME,new String[]{relationName}));}  }
class C{  private void replace(StringBuilder s,String from,String to){  int i=0;  while ((i=s.indexOf(from,i)) > -1) {    s.delete(i,i + from.length());    s.insert(i,to);    i+=to.length();  }}  }
class C{  public boolean isEmpty(){  return first;}  }
class C{  public TwoPointCrossover(double probability){  this.probability=probability;}  }
class C{  @Override public void beginWindow(long windowId){}  }
class C{  public void java_lang_ClassLoader_getCallerClassLoader(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassLoaderObject());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_PERIOD___TRACE_PERIOD_1:    return TRACE_PERIOD_1_EDEFAULT == null ? trace_period_1 != null : !TRACE_PERIOD_1_EDEFAULT.equals(trace_period_1);}return super.eIsSet(featureID);}  }
class C{  public boolean hasRuntimeRetention(){  return this.runtimeRetention;}  }
class C{  public RpfUtil(String rpfDir,float ulat,float llon,float llat,float rlon){  this(rpfDir,ulat,llon,llat,rlon,0f,SCALE_EQUALS,BOUNDED);}  }
class C{  private String justifyTextLine(TextPaint textPaint,String lineString,int textAreaWidth){  int gapIndex=0;  float lineWidth=textPaint.measureText(lineString);  while (lineWidth < textAreaWidth && lineWidth > 0) {    gapIndex=lineString.indexOf(" ",gapIndex + 2);    if (gapIndex == -1) {      gapIndex=0;      gapIndex=lineString.indexOf(" ",gapIndex + 1);      if (gapIndex == -1)       return lineString;    }    lineString=lineString.substring(0,gapIndex) + "  " + lineString.substring(gapIndex + 1,lineString.length());    lineWidth=textPaint.measureText(lineString);  }  return lineString;}  }
class C{  private void dumpTopFrameInfo(int verbosity){  Log.write("   topFrame = ");  Log.writeln(topFrame);  Log.write("         ip = ");  Log.writeln(ip);  Log.write("         fp = ");  Log.writeln(fp);  Log.write("  registers.ip = ");  Log.writeln(thread.getContextRegisters().getIP());  if (verbosity >= 3 && thread.getJNIEnv() != null)   thread.getJNIEnv().dumpJniRefsStack();}  }
class C{  void error(String key,String arg1,String arg2) throws SAXException {  hadError=true;  if (eh == null)   return;  eh.error(new SAXParseException(localizer.message(key,arg1,arg2),locator));}  }
class C{  protected SampleModel fixSampleModel(CachableRed src,ColorModel cm,Rectangle bounds){  SampleModel sm=src.getSampleModel();  int defSz=AbstractTiledRed.getDefaultTileSize();  int w=sm.getWidth();  if (w < defSz)   w=defSz;  if (w > bounds.width)   w=bounds.width;  int h=sm.getHeight();  if (h < defSz)   h=defSz;  if (h > bounds.height)   h=bounds.height;  if ((w <= 0) || (h <= 0)) {    w=1;    h=1;  }  return cm.createCompatibleSampleModel(w,h);}  }
class C{  public static String normalizeAsName(final String sqlName){  return sqlName.replaceAll("[^\\w\\d_]+","_");}  }
class C{  public Tee(PrintStream def){  super(def);  m_Default=def;  clear();}  }
class C{  public String toString(){  return image;}  }
class C{  public static String trimComma(String s){  if (s.endsWith(",")) {    s=s.substring(0,s.length() - 1);  }  return s;}  }
class C{  @Override public int compareTo(final TimeInstant rhs){  return Integer.compare(this.time,rhs.time);}  }
class C{  public static boolean isRunningNested(){  return Boolean.getBoolean(PROPERTY_RUN_NESTED);}  }
class C{  public static final String stripComment(String value){  if (value != null) {    final int pointer=value.indexOf("**");    if (pointer > 0) {      value=value.substring(0,pointer - 1).trim();    }    if (pointer == 0) {      value="";    }  }  return value;}  }
class C{  private void drawText(final Point buttonSize){  this.gc.setForeground(this.selection ? this.selectedBackgroundColor : this.unselectedBackgroundColor);  this.gc.setBackground(IGamaColors.WHITE.color());  final int widgetHeight=this.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).y;  final int textHeight=this.gc.stringExtent(this.text).y;  final int x=2 + buttonSize.x + this.gap;  this.gc.drawText(text,x,(widgetHeight - textHeight) / 2);}  }
class C{  AnalyticsMessages(final Context context,final String packageName){  mContext=context;  mDbAdapter=new DbAdapter(mContext,packageName);  mWorker=new Worker();}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public CertificateSubjectName(DerInputStream in) throws IOException {  dnName=new X500Name(in);}  }
class C{  public static boolean rectCrosses(final double aMinLat,final double aMaxLat,final double aMinLon,final double aMaxLon,final double bMinLat,final double bMaxLat,final double bMinLon,final double bMaxLon){  return !(rectDisjoint(aMinLat,aMaxLat,aMinLon,aMaxLon,bMinLat,bMaxLat,bMinLon,bMaxLon) || rectWithin(aMinLat,aMaxLat,aMinLon,aMaxLon,bMinLat,bMaxLat,bMinLon,bMaxLon));}  }
class C{  static CharBuffer randomizeRange(CharBuffer cb){  int mid=cb.capacity() >>> 1;  int start=RAND.nextInt(mid);  int end=mid + RAND.nextInt(mid);  cb.position(start);  cb.limit(end);  return cb;}  }
class C{  @Override public boolean evaluate(DF_LatticeCell[] operands){  DF_LatticeCell lhs=operands[0];  if (lhs instanceof ObjectCell) {    return evaluateObjectMeet(operands);  } else {    return evaluateArrayMeet(operands);  }}  }
class C{  public void updateBlob(int columnIndex,InputStream inputStream) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  public int maxLength(){  if (mIsPaired) {    return (int)Math.max(mLeft.maxLength(),mRight.maxLength());  } else {    return (int)mSingle.maxLength();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public DLSequence(ASN1Encodable obj){  super(obj);}  }
class C{  private void synchronizeDebugger(final IDebugger oldDebugger,final IDebugger newDebugger){  TargetProcessThread oldThread=null;  if (oldDebugger != null) {    oldDebugger.getProcessManager().removeListener(processManagerListener);    oldThread=oldDebugger.getProcessManager().getActiveThread();  }  if (newDebugger != null) {    newDebugger.getProcessManager().addListener(processManagerListener);    final TargetInformation targetInformation=newDebugger.getProcessManager().getTargetInformation();    if (targetInformation != null) {      updateMemoryBox();    }    synchronizeThreads(oldThread,newDebugger.getProcessManager().getActiveThread());  }  updateGui();}  }
class C{  public int size(){  return size;}  }
class C{  public static void waitForIdle(){  while (!Job.getJobManager().isIdle()) {    SWTUtilities.delay(1000);  }}  }
class C{  void advanceDocValuesGen(){  docValuesGen=nextWriteDocValuesGen;  nextWriteDocValuesGen=docValuesGen + 1;  sizeInBytes=-1;}  }
class C{  public void incEventsTaken(){  this._stats.incLong(_eventsTakenId,1);}  }
class C{  public static void add(List<String> options,char option,String value){  add(options,"" + option,value);}  }
class C{  private DigestMD5SaslClient(String authorizationId,String protocol,String serverName,Map props,CallbackHandler cbh){  m_authorizationId=authorizationId;  m_protocol=protocol;  m_serverName=serverName;  m_props=props;  m_cbh=cbh;  m_state=STATE_INITIAL;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void zoom(final boolean zoomIn){  if (zoomIn) {    viewBox.zoomIn();  } else {    viewBox.zoomOut();  }  DataStyle.updateStrokes(strokeWidth(viewBox.getWidth()));  if (rotatingWay) {    showCrosshairsForCentroid();  }  map.postInvalidate();}  }
class C{  public static Angle fromXY(double x,double y){  double radians=Math.atan2(y,x);  return new Angle(RADIANS_TO_DEGREES * radians,radians);}  }
class C{  public static int encodeString(String string,final byte[] bytes,final int offset,final FieldDef fieldDef){  assert string != null;  final byte[] b;  String charsetName=fieldDef.column().getCharsetName();  if (charsetName == null) {    charsetName=fieldDef.column().getTable().getDefaultedCharsetName();  }  try {    b=string.getBytes(charsetName);  } catch (  UnsupportedEncodingException e) {    TableName table=fieldDef.column().getTable().getName();    throw new UnsupportedCharsetException(charsetName);  }  return putByteArray(b,0,b.length,bytes,offset,fieldDef);}  }
class C{  private Ref startElement(String name) throws PageException {  if (!limited && cfml.isCurrent('(')) {    FunctionLibFunction function=fld.getFunction(name);    Ref[] arguments=functionArg(name,true,function,')');    if (function != null)     return new BIFCall(function,arguments);    Ref ref=new lucee.runtime.interpreter.ref.var.Scope(Scope.SCOPE_UNDEFINED);    return new UDFCall(ref,name,arguments);  }  return scope(name);}  }
class C{  public Dimension minimumLayoutSize(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int nrows=rows;    int ncols=cols;    if (nrows > 0) {      ncols=(ncomponents + nrows - 1) / nrows;    } else {      nrows=(ncomponents + ncols - 1) / ncols;    }    int w=0;    int h=0;    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      Dimension d=comp.getMinimumSize();      if (w < d.width) {        w=d.width;      }      if (h < d.height) {        h=d.height;      }    }    return new Dimension(insets.left + insets.right + ncols * w + (ncols - 1) * hgap,insets.top + insets.bottom + nrows * h + (nrows - 1) * vgap);  }}  }
class C{  public boolean containsKey(final String name){  return map.containsKey(name);}  }
class C{  public static void showCustomDialog(Context context,FragmentManager fragmentManager,String dialogTitle,String htmlFileName,String tag){  int accentColor=AndroidUtils.getAccentColor(context);  CustomDialogPresenter.create(dialogTitle,htmlFileName,accentColor).show(fragmentManager,tag);}  }
class C{  protected void writeGlyph(SWFVectors vecs) throws IOException {  currx=0.0;  curry=0.0;  for (Iterator it=elements.iterator(); it.hasNext(); ) {    writeVector(vecs,it.next());  }  vecs.done();}  }
class C{  public void load(Matrix3f src){  mMat[0]=src.mMat[0];  mMat[1]=src.mMat[1];  mMat[2]=src.mMat[2];  mMat[3]=0;  mMat[4]=src.mMat[3];  mMat[5]=src.mMat[4];  mMat[6]=src.mMat[5];  mMat[7]=0;  mMat[8]=src.mMat[6];  mMat[9]=src.mMat[7];  mMat[10]=src.mMat[8];  mMat[11]=0;  mMat[12]=0;  mMat[13]=0;  mMat[14]=0;  mMat[15]=1;}  }
class C{  public Log(String rabbitId,ErrLoggingEvent loggingEvent){  this.rabbitId=rabbitId;  this.loggingEvent=loggingEvent;}  }
class C{  public final <I,K extends Serializable,V extends Serializable,O,R>String runMapreduce(Mapper<I,K,V> mapper,Reducer<K,V,O> reducer,Iterable<? extends Input<? extends I>> inputs,Output<O,R> output){  return runAsPipeline(createMapreduceJob(mapper,reducer,inputs,output));}  }
class C{  public boolean commit() throws LoginException {  if (roles == null || roles.length == 0) {    subject.getPrincipals().add(new SimplePrincipal(unauthenticatedIdentity));    SimpleGroup roleGroup=new SimpleGroup("Roles");    subject.getPrincipals().add(roleGroup);  } else {    subject.getPrincipals().add(new SimplePrincipal(name));    SimpleGroup roleGroup=new SimpleGroup("Roles");    roleGroup.addMember(new SimplePrincipal("adempiereUsers"));    for (int i=0; i < roles.length; i++) {      roleGroup.addMember(new SimplePrincipal(roles[i].getName()));    }    subject.getPrincipals().add(roleGroup);  }  return true;}  }
class C{  public TitledPaddedPanel(String title){  this(title,OUT_MARGIN,TITLED_MARGIN);}  }
class C{  private boolean lambdaIdentSymbolFilter(Symbol sym){  return (sym.kind == VAR || sym.kind == MTH) && !sym.isStatic() && sym.name != names.init;}  }
class C{  public AffineTransformation(double m00,double m01,double m02,double m10,double m11,double m12){  setTransformation(m00,m01,m02,m10,m11,m12);}  }
class C{  public static EventHandler<ActionEvent> createNextAction(final ConnectionStatus state,final MqttAsyncConnection connection,final MqttConnectionViewManager connectionManager){  if (state == null) {    return createEmptyAction();  }switch (state) {case CONNECTED:    return createDisconnectAction(connectionManager,connection);case CONNECTING:  return createEmptyAction();case DISCONNECTED:return createConnectAction(connectionManager,connection);case DISCONNECTING:return createEmptyAction();case NOT_CONNECTED:return createConnectAction(connectionManager,connection);default :return createEmptyAction();}}  }
class C{  public boolean isDottedUnderlineTriple(Node x,Node y,Node z){  throw new UnsupportedOperationException();}  }
class C{  public final boolean areChildRoundedCornersEnabled(){  return mRoundedCornersEnabled;}  }
class C{  public byte[] serialize(){  if (currentByteArrayIndex == 0) {    return new byte[0];  }  final byte[] extractedSerializedData=new byte[currentByteArrayIndex];  System.arraycopy(serializedData,0,extractedSerializedData,0,currentByteArrayIndex);  return extractedSerializedData;}  }
class C{  public void initializeLocalInstructionComment(final INaviInstruction instruction,final List<IComment> comments){  CommentManager.get(m_provider).initializeLocalInstructionComment(m_codeNode,instruction,comments);}  }
class C{  public void constructSubgraphAndTraverseOnce(SalsaNodeVisitor.NodeVisitor nodeVisitor,Random random){  for (  Long2IntMap.Entry entry : currentLeftNodes.long2IntEntrySet()) {    long leftNode=entry.getLongKey();    int numWalks=entry.getIntValue();    EdgeIterator sampledRightNodes=leftIndexedBipartiteGraph.getRandomLeftNodeEdges(leftNode,numWalks,random);    int degree=0;    if (sampledRightNodes != null) {      subgraphLeftNodes[numLeftNodesAdded]=leftNode;      while (sampledRightNodes.hasNext()) {        long rightNode=sampledRightNodes.nextLong();        subgraphEdgesArray[numEdgesAdded]=rightNode;        subgraphEdgeTypesArray[numEdgesAdded]=sampledRightNodes.currentEdgeType();        numEdgesAdded++;        subgraphRightNodeDegreeReciprocal.put(rightNode,subgraphRightNodeDegreeReciprocal.get(rightNode) + 1);        int numVisits=visitRightNode(nodeVisitor,leftNode,rightNode,sampledRightNodes.currentEdgeType(),1.0);        salsaStats.updateVisitStatsPerRightNode(numVisits);        degree++;      }      subgraphLeftNodeDegree[numLeftNodesAdded++]=degree;    }  }  for (  long entry : subgraphRightNodeDegreeReciprocal.keySet()) {    subgraphRightNodeDegreeReciprocal.put(entry,1.0 / subgraphRightNodeDegreeReciprocal.get(entry));  }  salsaStats.addToNumRHSVisits(numEdgesAdded);  LOG.info("SALSA subgraph iteration initialized" + " with numLeftNodes = " + currentLeftNodes.size() + " numEdgesAdded = "+ numEdgesAdded+ " numVisitedRightNodes = "+ visitedRightNodes.size());}  }
class C{  @POST @ZeppelinApi public Response postLogin(@FormParam("userName") String userName,@FormParam("password") String password){  JsonResponse response=null;  Subject currentUser=org.apache.shiro.SecurityUtils.getSubject();  if (currentUser.isAuthenticated()) {    currentUser.logout();  }  if (!currentUser.isAuthenticated()) {    try {      UsernamePasswordToken token=new UsernamePasswordToken(userName,password);      currentUser.login(token);      HashSet<String> roles=SecurityUtils.getRoles();      String principal=SecurityUtils.getPrincipal();      String ticket;      if ("anonymous".equals(principal))       ticket="anonymous"; else       ticket=TicketContainer.instance.getTicket(principal);      Map<String,String> data=new HashMap<>();      data.put("principal",principal);      data.put("roles",roles.toString());      data.put("ticket",ticket);      response=new JsonResponse(Response.Status.OK,"",data);    } catch (    UnknownAccountException uae) {      LOG.error("Exception in login: ",uae);    }catch (    IncorrectCredentialsException ice) {      LOG.error("Exception in login: ",ice);    }catch (    LockedAccountException lae) {      LOG.error("Exception in login: ",lae);    }catch (    AuthenticationException ae) {      LOG.error("Exception in login: ",ae);    }  }  if (response == null) {    response=new JsonResponse(Response.Status.FORBIDDEN,"","");  }  LOG.warn(response.toString());  return response.build();}  }
class C{  public static void main(String[] argv){  runFilter(new Discretize(),argv);}  }
class C{  private static String makeInstalledLAFKey(String laf,String attr){  return "swing.installedlaf." + laf + "."+ attr;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:59.574 -0500",hash_original_method="3D9451AEE4864904091F150DA6CD0D04",hash_generated_method="B8E898C214D0DC2DB1C02E14227FCC67") public static CdmaMmiCode newFromDialString(String dialString,CDMAPhone phone){  Matcher m;  CdmaMmiCode ret=null;  m=sPatternSuppService.matcher(dialString);  if (m.matches()) {    ret=new CdmaMmiCode(phone);    ret.poundString=makeEmptyNull(m.group(MATCH_GROUP_POUND_STRING));    ret.action=makeEmptyNull(m.group(MATCH_GROUP_ACTION));    ret.sc=makeEmptyNull(m.group(MATCH_GROUP_SERVICE_CODE));    ret.sia=makeEmptyNull(m.group(MATCH_GROUP_SIA));    ret.sib=makeEmptyNull(m.group(MATCH_GROUP_SIB));    ret.sic=makeEmptyNull(m.group(MATCH_GROUP_SIC));    ret.pwd=makeEmptyNull(m.group(MATCH_GROUP_PWD_CONFIRM));    ret.dialingNumber=makeEmptyNull(m.group(MATCH_GROUP_DIALING_NUMBER));  }  return ret;}  }
class C{  @Override public void visit(Page page){  int docid=page.getWebURL().getDocid();  String url=page.getWebURL().getURL();  String domain=page.getWebURL().getDomain();  String path=page.getWebURL().getPath();  String subDomain=page.getWebURL().getSubDomain();  String parentUrl=page.getWebURL().getParentUrl();  String anchor=page.getWebURL().getAnchor();  logger.debug("Docid: {}",docid);  logger.info("URL: {}",url);  logger.debug("Domain: '{}'",domain);  logger.debug("Sub-domain: '{}'",subDomain);  logger.debug("Path: '{}'",path);  logger.debug("Parent page: {}",parentUrl);  logger.debug("Anchor text: {}",anchor);  if (page.getParseData() instanceof HtmlParseData) {    HtmlParseData htmlParseData=(HtmlParseData)page.getParseData();    String text=htmlParseData.getText();    String html=htmlParseData.getHtml();    File file=new File(docid + "_" + cmdvar);    try {      FileUtils.writeStringToFile(file,html);    } catch (    IOException e) {      e.printStackTrace();    }    Set<WebURL> links=htmlParseData.getOutgoingUrls();    logger.debug("Text length: {}",text.length());    logger.debug("Html length: {}",html.length());    logger.debug("Number of outgoing links: {}",links.size());  } else   if (page.getParseData() instanceof BinaryParseData) {    BinaryParseData binaryParseData=new BinaryParseData();    binaryParseData.setBinaryContent(page.getContentData());    String html=binaryParseData.getHtml();    String baseName=FilenameUtils.getBaseName(url);    String extension=FilenameUtils.getExtension(url);    File file;    if (baseName != null && extension != null) {      file=new File(baseName + "_" + cmdvar+ "."+ extension);    } else     if (baseName != null && extension == null) {      file=new File(baseName + "_" + cmdvar);    } else {      file=new File(docid + "_" + cmdvar);    }    try {      FileUtils.writeStringToFile(file,html);    } catch (    IOException e) {      e.printStackTrace();    }    logger.debug("parsed Html length(null if not parsed): {}",html.length());  }  Header[] responseHeaders=page.getFetchResponseHeaders();  if (responseHeaders != null) {    logger.debug("Response headers:");    for (    Header header : responseHeaders) {      logger.debug("\t{}: {}",header.getName(),header.getValue());    }  }  logger.debug("=============");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.610 -0400",hash_original_method="DA2404118756C5E107F531236F3C42F9",hash_generated_method="E159A881BEDBC861743A51EDFAAB580D") public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof java.lang.String)) {    throw new EncoderException("Parameter supplied to Metaphone encode is not of type java.lang.String");  }  return metaphone((String)pObject);}  }
class C{  public double applyToVector(double[] x_new){  double m=0;  double prediction=0;  for (int j=0; j < d; j++) {    k.getArray()[j][0]=kernel.eval(basisVectors[j],x_new);  }  m=scalarProduct(k.getArray(),alpha.getArray(),d);  prediction=m;  return prediction;}  }
class C{  public void release(){  FileDownloader.unregisterDownloadFileChangeListener(this);}  }
class C{  protected boolean isLinkAllowed(DatapathId src,OFPort srcPort,DatapathId dst,OFPort dstPort){  return true;}  }
class C{  public Map<String,CharSequence> collectSourcesForCompilation(String rootClassName) throws ClassNotFoundException, IOException {  Map<String,CharSequence> dependentSources=new HashMap<>();  collectDependent(rootClassName,dependentSources);  for (  String dependencyClassName : sources.keySet()) {    CompilationScope dependencyCompilationScope=new CompilationScope(javaClassLoader,dependencyClassName);    if (dependencyCompilationScope.compilationNeeded()) {      collectDependent(dependencyClassName,dependentSources);    }  }  sources.putAll(dependentSources);  return sources;}  }
class C{  @Override public void receiveDetections(Detector.Detections<TextBlock> detections){  mGraphicOverlay.clear();  SparseArray<TextBlock> items=detections.getDetectedItems();  for (int i=0; i < items.size(); ++i) {    TextBlock item=items.valueAt(i);    OcrGraphic graphic=new OcrGraphic(mGraphicOverlay,item);    mGraphicOverlay.add(graphic);  }}  }
class C{  public static void adjustCardViewMargins(View cardView){  ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)cardView.getLayoutParams();  params.topMargin-=cardView.getPaddingTop();  params.leftMargin-=cardView.getPaddingLeft();  params.rightMargin-=cardView.getPaddingRight();  cardView.setLayoutParams(params);}  }
class C{  void validateNumber(int i,int ofs,String name,int min,int max) throws ParseException {  if (i < min || i > max) {    throwInvalid(name,ofs);  }}  }
class C{  public static Entry findOrCreateEntry(Object jdkObject){  if (jdkObject == null)   return nullEntry;  jdkObject=BootImageObjectAddressRemapper.getInstance().intern(jdkObject);synchronized (BootImageMap.class) {    Key key=new Key(jdkObject);    Entry entry=keyToEntry.get(key);    if (entry == null) {      entry=new Entry(newId(),jdkObject);      keyToEntry.put(key,entry);      objectIdToEntry.add(entry);    }    return entry;  }}  }
class C{  public SootField addRefTypeForConcretes(RefType type,InfoKind unmodeledFlowType,boolean deepClone){  SootClass clz=type.getSootClass();  clz=ClassCloner.getClonedClassFromClone(clz);  List<SootClass> concretes=SootUtils.getAllConcreteSubsImps(clz);  if (concretes.isEmpty()) {    logger.debug("Cannot find any known implementors of {} when adding dummy object",type.getSootClass());    return null;  }  int created=0;  for (  SootClass concrete : concretes) {    if (ClassCloner.isClonedClass(concrete))     continue;    logger.debug("On concrete {} for fallback type {}",type,concrete);    SootClass realConcrete=ClassCloner.getClonedClassFromClone(concrete);    if (!typeToAddedField.containsKey(realConcrete.getType())) {      logger.debug("Need to add concrete {}",realConcrete);      addRefTypeInternal(dummyObjectField,realConcrete,unmodeledFlowType,deepClone);      created++;    }    if (created > MAX_SUBS_AND_IMPLEMENTORS_TO_ADD) {      logger.debug("reached max created dummy concrete objects created: {}",clz);      break;    }  }  return dummyObjectField;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isSelectionColumn(){  return m_vo.IsSelectionColumn;}  }
class C{  private static Address GetDoubleArrayElements(JNIEnvironment env,int arrayJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetDoubleArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    double[] sourceArray=(double[])env.getJNIRef(arrayJREF);    int size=sourceArray.length;    if (MemoryManager.willNeverMove(sourceArray)) {      JNIGenericHelpers.setBoolStar(isCopyAddress,false);      return Magic.objectAsAddress(sourceArray);    } else {      Address copyBuffer=sysCall.sysMalloc(size << LOG_BYTES_IN_DOUBLE);      if (copyBuffer.isZero()) {        env.recordException(new OutOfMemoryError());        return Address.zero();      }      Memory.memcopy(copyBuffer,Magic.objectAsAddress(sourceArray),size << LOG_BYTES_IN_DOUBLE);      JNIGenericHelpers.setBoolStar(isCopyAddress,true);      return copyBuffer;    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return Address.zero();  }}  }
class C{  private void checkOwner(IgfsPath p){  String ownerPrim=getOwner(igfs,p);  assertEquals(USER,ownerPrim);  String ownerSec=getOwnerSecondary(secondaryFs,p);  assertEquals(USER,ownerSec);}  }
class C{  protected void verificarAnexosAsientoRegistral(String idAsientoRegistral,int numFicherosAdjuntos){  AsientoRegistralDTO asiento=getIntercambioRegistralWS().getAsientoRegistral(idAsientoRegistral);  Assert.assertEquals(numFicherosAdjuntos + 1 + 1,asiento.getAnexos().size());  Assert.assertEquals("application/pdf",asiento.getAnexos().get(numFicherosAdjuntos).tipoMIME);  Assert.assertEquals("application/xml",asiento.getAnexos().get(numFicherosAdjuntos + 1).tipoMIME);}  }
class C{  public GetGenres(String... properties){  super();  addParameterToRequest("properties",properties);}  }
class C{  @Override public void removeInstanceListener(InstanceListener dsl){  m_instanceListeners.remove(dsl);}  }
class C{  public void runDownloadMultipleSimultaneously() throws Exception {  final int TOTAL_DOWNLOADS=15;  HashSet<Long> downloadIds=new HashSet<Long>(TOTAL_DOWNLOADS);  MultipleDownloadsCompletedReceiver receiver=registerNewMultipleDownloadsReceiver();  removeAllCurrentDownloads();  try {    for (int i=0; i < TOTAL_DOWNLOADS; ++i) {      long dlRequest=-1;      String filename=FILE_CONCURRENT_DOWNLOAD_FILE_PREFIX + i + FILE_CONCURRENT_DOWNLOAD_FILE_EXTENSION;      Uri remoteUri=getExternalFileUri(filename);      Request request=new Request(remoteUri);      request.setTitle(filename);      dlRequest=mDownloadManager.enqueue(request);      assertTrue(dlRequest != -1);      downloadIds.add(dlRequest);    }    waitForDownloadsOrTimeout(DEFAULT_WAIT_POLL_TIME,15 * 60 * 2000);    assertEquals(TOTAL_DOWNLOADS,receiver.numDownloadsCompleted());  }  finally {    removeAllCurrentDownloads();  }}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public Enumeration elements(){  return new ValueIterator();}  }
class C{  @Override public void parse(XmlPullParser parser) throws XmlPullParserException, IOException {  if (!parser.getName().equals(TAG)) {    throw new XmlPullParserException(String.format("invalid XML: Expected %s tag but received %s",TAG,parser.getName()));  }  setName(getAttribute(parser,"name"));  int eventType=parser.next();  while (eventType != XmlPullParser.END_DOCUMENT) {    if (eventType == XmlPullParser.START_TAG && parser.getName().equals(Test.TAG)) {      Test test=new Test();      test.parse(parser);      mChildTestMap.put(test.getName(),test);    } else     if (eventType == XmlPullParser.END_TAG && parser.getName().equals(TAG)) {      return;    }    eventType=parser.next();  }}  }
class C{  public static <T>void testOrder(final Comparator<T> ator,final T[] compare,final boolean checkHash){  for (int i=0; i < compare.length; i++) {    for (int j=0; j < i; j++) {      Assert.assertTrue(ator + ":" + compare[j]+ ":"+ compare[i],ator.compare(compare[j],compare[i]) < 0);      Assert.assertFalse(compare[j].equals(compare[i]));      Assert.assertTrue(String.valueOf(ator.compare(compare[i],compare[j])),ator.compare(compare[i],compare[j]) > 0);      Assert.assertFalse(compare[i].equals(compare[j]));      if (checkHash) {        Assert.assertFalse(compare[i].hashCode() == compare[j].hashCode());      }    }    Assert.assertEquals(0,ator.compare(compare[i],compare[i]));    Assert.assertTrue(compare[i].equals(compare[i]));    Assert.assertFalse(compare[i].equals(null));  }}  }
class C{  @Override public double varianceDiscretization(final StochasticProcess1D sp,final double t0,final double x0,final double dt){  final double sigma=sp.diffusion(t0,x0);  return sigma * sigma * dt;}  }
class C{  public JSONBuffer append(int cont){  if (stack.empty() || stack.peek() != Operand.ARRAY) {    throw new JSONException("Appending double outside of array context.");  }  buffer.append(Integer.toString(cont));  addSeparator();  return this;}  }
class C{  public CertPinManager(String path,TrustedCertificateStore store) throws PinManagerException {  if (path == null) {    throw new NullPointerException("path == null");  }  pinFile=new File(path);  certStore=store;  rebuild();}  }
class C{  static public Automaton minus(Automaton a1,Automaton a2,int maxDeterminizedStates){  if (Operations.isEmpty(a1) || a1 == a2) {    return Automata.makeEmpty();  }  if (Operations.isEmpty(a2)) {    return a1;  }  return intersection(a1,complement(a2,maxDeterminizedStates));}  }
class C{  @Override public String toString(){  return getUsername();}  }
class C{  public static void checkUnManagedResourceIngestable(UnManagedVolume unManagedVolume){  StringMap unManagedVolumeCharacteristics=unManagedVolume.getVolumeCharacterstics();  String isVolumeIngestable=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_INGESTABLE.toString());  if (null != isVolumeIngestable && Boolean.parseBoolean(isVolumeIngestable)) {    return;  }  String reason=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_NOT_INGESTABLE_REASON.toString());  if (reason == null || reason.isEmpty()) {    reason="Unknown";  }  throw IngestionException.exceptions.unmanagedVolumeNotIngestable(unManagedVolume.getLabel(),reason);}  }
class C{  public void statistics(CharSequence message,Throwable e){  log(Level.STATISTICS,message,e);}  }
class C{  @Override public boolean isAllowNone(){  return _mode == RobotRulesMode.ALLOW_NONE;}  }
class C{  void test(String input,String cmd) throws Exception {  lastInput=input;  lastCommand=cmd;  HumanInputStream in=new HumanInputStream(input + "X");  test(in,cmd);  if (in.read() != 'X' || in.read() != -1)   throw new Exception("Input not consumed exactly");}  }
class C{  public MindMapPrinter(PrintStream out,String[] tokenNames){  this.tokenNames=tokenNames;  this.out=out;}  }
class C{  public static Stats of(Iterable<? extends Number> values){  StatsAccumulator accumulator=new StatsAccumulator();  accumulator.addAll(values);  return accumulator.snapshot();}  }
class C{  public Line3D(Stack<Vector3> points,float thickness,int[] colors){  this(points,thickness,colors,true);}  }
class C{  public Configurator emptyText(int textRes,int textSize,int textColor){  if (textRes > 0) {    viewEmptyText=textRes;  }  if (textSize > 0) {    viewEmptyTextSize=textSize;  }  if (textColor > 0) {    viewEmptyTextColor=textColor;  }  return this;}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ReferencingElement_IM.class) {switch (baseFeatureID) {case ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET:      return ImPackage.PARAMETERIZED_TYPE_REF_IM__REWIRED_TARGET;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  if (keySize > digest.getDigestSize()) {    throw new IllegalArgumentException("Can't generate a derived key " + keySize + " bytes long.");  }  byte[] dKey=generateDerivedKey();  return new KeyParameter(dKey,0,keySize);}  }
class C{  public static String left(String str,int len){  if (len < 0) {    throw new IllegalArgumentException("Requested String length " + len + " is less than zero");  }  if ((str == null) || (str.length() <= len)) {    return str;  } else {    return str.substring(0,len);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void initializeRegion(AbstractGatewaySender sender,CacheListener listener){  final GemFireCacheImpl gemCache=(GemFireCacheImpl)sender.getCache();  this.region=gemCache.getRegion(this.regionName);  if (this.region == null) {    AttributesFactory<Long,AsyncEvent> factory=new AttributesFactory<Long,AsyncEvent>();    factory.setScope(NO_ACK ? Scope.DISTRIBUTED_NO_ACK : Scope.DISTRIBUTED_ACK);    factory.setDataPolicy(this.enablePersistence ? DataPolicy.PERSISTENT_REPLICATE : DataPolicy.REPLICATE);    if (logger.isDebugEnabled()) {      logger.debug("The policy of region is {}",(this.enablePersistence ? DataPolicy.PERSISTENT_REPLICATE : DataPolicy.REPLICATE));    }    if (listener != null) {      factory.addCacheListener(listener);    }    EvictionAttributes ea=EvictionAttributes.createLIFOMemoryAttributes(this.maximumQueueMemory,EvictionAction.OVERFLOW_TO_DISK);    factory.setEvictionAttributes(ea);    factory.setConcurrencyChecksEnabled(false);    factory.setDiskStoreName(this.diskStoreName);    factory.setDiskSynchronous(this.isDiskSynchronous);    if (logger.isDebugEnabled()) {      logger.debug("{}: Attempting to create queue region: {}",this,this.regionName);    }    final RegionAttributes<Long,AsyncEvent> ra=factory.create();    try {      SerialGatewaySenderQueueMetaRegion meta=new SerialGatewaySenderQueueMetaRegion(this.regionName,ra,null,gemCache,sender);      try {        this.region=gemCache.createVMRegion(this.regionName,ra,new InternalRegionArguments().setInternalMetaRegion(meta).setDestroyLockFlag(true).setSnapshotInputStream(null).setImageTarget(null).setIsUsedForSerialGatewaySenderQueue(true).setInternalRegion(true).setSerialGatewaySender(sender));      } catch (      IOException veryUnLikely) {        logger.fatal(LocalizedMessage.create(LocalizedStrings.SingleWriteSingleReadRegionQueue_UNEXPECTED_EXCEPTION_DURING_INIT_OF_0,this.getClass()),veryUnLikely);      }catch (      ClassNotFoundException alsoUnlikely) {        logger.fatal(LocalizedMessage.create(LocalizedStrings.SingleWriteSingleReadRegionQueue_UNEXPECTED_EXCEPTION_DURING_INIT_OF_0,this.getClass()),alsoUnlikely);      }      if (logger.isDebugEnabled()) {        logger.debug("{}: Created queue region: {}",this,this.region);      }    } catch (    CacheException e) {      logger.fatal(LocalizedMessage.create(LocalizedStrings.SingleWriteSingleReadRegionQueue_0_THE_QUEUE_REGION_NAMED_1_COULD_NOT_BE_CREATED,new Object[]{this,this.regionName}),e);    }  } else {    throw new IllegalStateException("Queue region " + this.region.getFullPath() + " already exists.");  }}  }
class C{  public final static double normalizeLatitude(double lat,double epsilon){  if (lat > NORTH_POLE_D - epsilon) {    return NORTH_POLE_D - epsilon;  } else   if (lat < SOUTH_POLE_D + epsilon) {    return SOUTH_POLE_D + epsilon;  }  return lat;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  NdefMessage other=(NdefMessage)obj;  return Arrays.equals(mRecords,other.mRecords);}  }
class C{  @Override public int compareTo(Date that){  if (this.year < that.year)   return -1;  if (this.year > that.year)   return +1;  if (this.month < that.month)   return -1;  if (this.month > that.month)   return +1;  if (this.day < that.day)   return -1;  if (this.day > that.day)   return +1;  return 0;}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  private void popStacks(Resource newSubject) throws IOException, RDFHandlerException {  for (int i=0; i < nodeStack.size() - 1; i++) {    Node node=nodeStack.get(i);    if (!node.isWritten()) {      if (i > 0) {        writeIndents(i * 2 - 1);        IRI predicate=predicateStack.get(i - 1);        writeStartTag(predicate.getNamespace(),predicate.getLocalName());        writeNewLine();      }      writeIndents(i * 2);      writeNodeStartTag(node);      node.setIsWritten(true);    }  }  Node topNode=nodeStack.pop();  if (predicateStack.isEmpty()) {    writeIndents(nodeStack.size() * 2);    writeNodeEmptyTag(topNode);    writeNewLine();  } else {    IRI topPredicate=predicateStack.pop();    if (!topNode.hasType()) {      writeIndents(nodeStack.size() * 2 - 1);      writeAbbreviatedPredicate(topPredicate,topNode.getValue());    } else {      writeIndents(nodeStack.size() * 2 - 1);      writeStartTag(topPredicate.getNamespace(),topPredicate.getLocalName());      writeNewLine();      writeIndents(nodeStack.size() * 2);      writeNodeEmptyTag(topNode);      writeNewLine();      writeIndents(nodeStack.size() * 2 - 1);      writeEndTag(topPredicate.getNamespace(),topPredicate.getLocalName());      writeNewLine();    }  }  while (!nodeStack.isEmpty()) {    Node nextElement=nodeStack.peek();    if (nextElement.getValue().equals(newSubject)) {      break;    } else {      nodeStack.pop();      writeIndents(predicateStack.size() + nodeStack.size());      writeNodeEndTag(nextElement);      if (predicateStack.size() > 0) {        IRI nextPredicate=predicateStack.pop();        writeIndents(predicateStack.size() + nodeStack.size());        writeEndTag(nextPredicate.getNamespace(),nextPredicate.getLocalName());        writeNewLine();      }    }  }}  }
class C{  public static TungstenProperties readConfig(String configFile) throws Exception {  TungstenProperties conf=null;  File propsFile=new File(configFile);  if (!propsFile.exists() || !propsFile.canRead()) {    throw new Exception("Properties file not found: " + propsFile.getAbsolutePath(),null);  }  conf=new TungstenProperties();  try {    conf.load(new FileInputStream(propsFile));  } catch (  IOException e) {    throw new Exception("Unable to read properties file: " + propsFile.getAbsolutePath() + " ("+ e.getMessage()+ ")",null);  }  return conf;}  }
class C{  public BlurredPanel(final Shell shell){  if (shell == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (shell.isDisposed()) {    SWT.error(SWT.ERROR_INVALID_ARGUMENT);  }  this.parent=shell;  if (shell.getData(BLURED_PANEL_KEY) != null) {    throw new IllegalArgumentException("This shell has already an infinite panel attached on it !");  }  shell.setData(BLURED_PANEL_KEY,this);  this.radius=2;}  }
class C{  private void addListeners(){  if (server != null) {    final VersionControlEventEngine vcEventEngine=server.getConnection().getVersionControlClient().getEventEngine();    vcEventEngine.addWorkspaceCreatedListener(workspaceListener);    vcEventEngine.addWorkspaceDeletedListener(workspaceListener);    vcEventEngine.addWorkspaceUpdatedListener(workspaceListener);    final WorkItemEventEngine wiEventEngine=server.getConnection().getWorkItemClient().getEventEngine();    wiEventEngine.addWorkItemSaveListener(workItemSaveListener);  }  if (repository != null) {    repository.getPendingChangeCache().addListener(pendingChangeCacheListener);  }  if (workspace != null) {    final VersionControlEventEngine vcEventEngine=workspace.getClient().getEventEngine();    vcEventEngine.addPendingChangesChangedListener(corePendingChangeListener);    vcEventEngine.addPendingChangeCandidatesChangedListener(coreCandidateListener);    vcEventEngine.addLocalWorkspaceScanListener(coreLocalWorkspaceScanListener);  }}  }
class C{  private boolean checkLiteral(String literal){  int length=literal.length();  for (int i=0; i < length; i+=1) {    if (this.readChar() != literal.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public Synchronizer(Scriptable obj,Object syncObject){  super(obj);  this.syncObject=syncObject;}  }
class C{  public static void main(String[] args){  Logger.getLogger("aimax.osm").setLevel(Level.FINEST);  Logger.getLogger("").getHandlers()[0].setLevel(Level.FINE);  Locale.setDefault(Locale.US);  MiniNaviApp demo=new MiniNaviApp(args);  demo.getFrame().readMap(DataResource.getULMFileResource());  demo.showFrame();}  }
class C{  private void receiveResponseBytes(){  if (!isConnected()) {    MeshLog.w(DEBUG,USE_LOG4J,CLASS,"receiveResponseBytes() socket isn't connected, return");    return;  }  if (receiveBufferBytes()) {    MeshLog.i(DEBUG,USE_LOG4J,CLASS,"receiveResponseBytes() receive response from buffer, return");    return;  }  try {    mBufferOffset=0;    InputStream sckInputStream=mSocket.getInputStream();    byte[] buffer=mBuffer;    int byteCount=4;    EspSocketUtil.readBytes(sckInputStream,buffer,mBufferOffset,byteCount);    mBufferOffset+=byteCount;    mMeshResponse=EspMeshResponse.createInstance(buffer);    int packageLength=mMeshResponse.getPackageLength();    byteCount=packageLength - byteCount;    EspSocketUtil.readBytes(sckInputStream,buffer,mBufferOffset,byteCount);    mBufferOffset+=byteCount;    if (!mMeshResponse.fillInAll(buffer)) {      MeshLog.w(DEBUG,USE_LOG4J,CLASS,"receiveResponseBytes() mMeshResponse fail to fill in all, so close() and return");      close();      return;    }    MeshLog.d(DEBUG,true,CLASS,"receiveResponseBytes() meshResponse: " + mMeshResponse);    if (mMeshResponse.hasMeshOption()) {      EspMeshOption meshOption=mMeshResponse.getMeshOption();      for (int i=0; i < meshOption.getDeviceAvailableCount(); ++i) {        mDeviceAvailableToken.add(TOKEN_TRUE);        MeshLog.d(DEBUG,USE_LOG4J,CLASS,"receiveResponseBytes() receive device available");      }    }    if (mMeshResponse.isBodyEmpty()) {      MeshLog.d(DEBUG,USE_LOG4J,CLASS,"receiveResponseBytes() mMeshResponse.isBodyEmpty(), return");      return;    }    String targetBssid=mMeshResponse.getTargetBssid();    if (targetBssid == null) {      throw new IllegalStateException("receiveResponseBytes() can't filter the targetBssid");    } else {      if (mMeshResponse.isDeviceAvailable()) {        mDeviceAvailableToken.add(TOKEN_TRUE);        MeshLog.d(DEBUG,USE_LOG4J,CLASS,"receiveResponseBytes() receive device available");      }      if (!replyProxyTask(targetBssid,null) && isLongSocketExist(targetBssid)) {        byte[] responseBytes=mMeshResponse.getPureResponseBytes();        MeshLog.d(DEBUG,USE_LOG4J,CLASS,"receiveResponseBytes() can't find proxy task, so put into long socket buffer");        putLongSocketBuffer(targetBssid,responseBytes);      }    }  } catch (  IOException e) {    String message=EspSocketUtil.getStrackTrace(e);    MeshLog.e(DEBUG,USE_LOG4J,CLASS,"receiveResponseBytes() IOException e:" + message + " , so close EspMeshSocket");    close();  }}  }
class C{  private boolean measureViewHolder(RecyclerView.ViewHolder holder){  RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)holder.itemView.getLayoutParams();  if (params != null) {    RecyclerView.LayoutManager layoutManager=parent.getLayoutManager();    int widthSpec=RecyclerView.LayoutManager.getChildMeasureSpec(parent.getWidth(),parent.getPaddingLeft() + parent.getPaddingRight(),params.width,layoutManager.canScrollHorizontally());    int heightSpec=RecyclerView.LayoutManager.getChildMeasureSpec(parent.getHeight(),parent.getPaddingTop() + parent.getPaddingBottom(),params.height,layoutManager.canScrollVertically());    holder.itemView.measure(widthSpec,heightSpec);  } else {    int widthMeasureSpec=View.MeasureSpec.makeMeasureSpec(parent.getWidth(),View.MeasureSpec.AT_MOST);    int heightMeasureSpec=View.MeasureSpec.makeMeasureSpec(parent.getHeight(),View.MeasureSpec.AT_MOST);    holder.itemView.measure(widthMeasureSpec,heightMeasureSpec);    Log.e(TAG,"The parent ViewGroup wasn't specified when inflating the view.  This may cause the StickyHeader to be sized incorrectly.");  }  holder.itemView.layout(0,0,holder.itemView.getMeasuredWidth(),holder.itemView.getMeasuredHeight());  return holder.itemView.getWidth() > 0 && holder.itemView.getHeight() > 0;}  }
class C{  public static final String nameForDaemon(final String daemonName){  return NAME_PREFIX + daemonName;}  }
class C{  public DeleteIndexedScriptRequest version(long version){  this.version=version;  return this;}  }
class C{  public double compute(long... dataset){  return computeInPlace(longsToDoubles(dataset));}  }
class C{  public static float reduce(float startValue,float endValue,float time){  if (startValue < endValue)   throw new IllegalArgumentException("End size can't be larger than start size.");  return endValue + (startValue - endValue) * (1 - time);}  }
class C{  public AcceptEncodingHeader createAcceptEncodingHeader(String encoding) throws ParseException {  if (encoding == null)   throw new NullPointerException("the encoding parameter is null");  AcceptEncoding acceptEncoding=new AcceptEncoding();  acceptEncoding.setEncoding(encoding);  return acceptEncoding;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord) {    MDocType[] types=MDocType.getOfClient(getCtx());    int count=0;    ArrayList<String> baseTypes=new ArrayList<String>();    for (int i=0; i < types.length; i++) {      MDocType type=types[i];      String DocBaseType=type.getDocBaseType();      if (baseTypes.contains(DocBaseType))       continue;      MPeriodControl pc=new MPeriodControl(this,DocBaseType);      if (pc.save())       count++;      baseTypes.add(DocBaseType);    }    log.fine("PeriodControl #" + count);  }  return success;}  }
class C{  @QueueCallback({QueueCallbackType.EMPTY,QueueCallbackType.IDLE,QueueCallbackType.LIMIT}) private void process(){  reactor.process();}  }
class C{  @SuppressWarnings("unchecked") public static <FV>DynamicTranslationModel<FV> load(String filename,boolean initializeSystemVocabulary,String name) throws IOException {  TimeKeeper timer=TimingUtils.start();  DynamicTranslationModel<FV> tm=IOTools.deserialize(filename,DynamicTranslationModel.class);  if (tm == null) {    logger.error("File not found: {}",filename);    throw new IOException("File not found: " + filename);  }  timer.mark("Deserialization");  tm.maxSourcePhrase=DEFAULT_MAX_PHRASE_LEN;  tm.maxTargetPhrase=DEFAULT_MAX_PHRASE_LEN;  tm.sampleSize=DEFAULT_SAMPLE_SIZE;  tm.name=name;  tm.reorderingEnabled=false;  tm.setFeatureTemplate(FeatureTemplate.DENSE);  if (initializeSystemVocabulary)   tm.populateSystemVocabulary();  tm.createIdArrays();  timer.mark("Vocabulary setup");  tm.createLexCoocTable(tm.sa.getVocabulary().size());  timer.mark("Cooc table");  logger.info("Timing: {}",timer);  return tm;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,float[][] arrays,int nbatches) throws Exception {  int ncycles=arrays.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(arrays[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.CONTENT_NODE__OWNER:    setOwner((Composite)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean handleMessage(Message m,Object o){  if (!super.handleMessage(m,o)) {    if (m.getType().equals(MasterAgent.M_EVALUATE)) {      output.message("EvaluatorData received from " + m.getSender().name);      ((EvaluatorData)o).sender=m.getSender();      mailbox.add(o);    } else     if (m.getType().equals(MasterAgent.M_END_EXPERIMENT)) {      output.message("End experiment message received from " + m.getSender().name);      shouldLive=false;    } else     return false;  }  return true;}  }
class C{  private Message createActionStatusMessage(final String tenant,final ActionStatus actionStatus,final List<String> updateResultMessages,final Long actionId){  final MessageProperties messageProperties=new MessageProperties();  final Map<String,Object> headers=messageProperties.getHeaders();  final ActionUpdateStatus actionUpdateStatus=new ActionUpdateStatus();  actionUpdateStatus.setActionStatus(actionStatus);  headers.put(MessageHeaderKey.TYPE,MessageType.EVENT.name());  headers.put(MessageHeaderKey.TENANT,tenant);  headers.put(MessageHeaderKey.TOPIC,EventTopic.UPDATE_ACTION_STATUS.name());  headers.put(MessageHeaderKey.CONTENT_TYPE,MessageProperties.CONTENT_TYPE_JSON);  actionUpdateStatus.getMessage().addAll(updateResultMessages);  actionUpdateStatus.setActionId(actionId);  return convertMessage(actionUpdateStatus,messageProperties);}  }
class C{  public void addNativeTypeMapping(int jdbcTypeCode,String nativeType,int targetJdbcTypeCode){  addNativeTypeMapping(jdbcTypeCode,nativeType);  this.targetJdbcTypes.put(new Integer(jdbcTypeCode),new Integer(targetJdbcTypeCode));}  }
class C{  public void message(LocoNetMessage msg){  if (msg.getOpCode() != LnConstants.OPC_SL_RD_DATA) {    return;  }  if (msg.getElement(2) != CONFIG_SLOT) {    return;  }  for (int i=0; i < 10; i++) {    oldcontent[i]=msg.getElement(3 + i);  }  for (int i=0; i <= (MAX_OPTION - MIN_OPTION); i++) {    int byteIndex=i / 8;    if (byteIndex > 3) {      byteIndex++;    }    byteIndex+=3;    int bitIndex=i % 8;    int bitMask=0x01 << bitIndex;    int data=msg.getElement(byteIndex);    if ((data & bitMask) != 0) {      closedButtons[i].setSelected(true);    } else {      thrownButtons[i].setSelected(true);    }  }  log.debug("Config Slot Data: " + msg.toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.502 -0500",hash_original_method="B44C6C2E80E3CC30A9FA34837FBF03A6",hash_generated_method="48EDC4E37A0CD19C924D86AE31EBD684") public static int countGsmSeptets(char c,boolean throwsException) throws EncodeException {  if (sCharsToGsmTables[0].get(c,-1) != -1) {    return 1;  }  if (sCharsToShiftTables[0].get(c,-1) != -1) {    return 2;  }  if (throwsException) {    throw new EncodeException(c);  } else {    return 1;  }}  }
class C{  public static void markProcessedJobs(){  _processedJobs.mark();}  }
class C{  private boolean isAngleAtBack(double angle){  return (Math.sin(Math.toRadians(angle)) > 0.0);}  }
class C{  public static void on(){  init();  util.setOn(true);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String args[]){  IterativeTrainingPanel test=new IterativeTrainingPanel(null,null);  SimpleFrame.displayPanel(test);}  }
class C{  public ServiceActivatorItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public final MutableDouble2D addIn(final MutableDouble2D other){  x=other.x + x;  y=other.y + y;  return this;}  }
class C{  static <V,A>void invokeUnchecked(CompletionHandler<V,? super A> handler,A attachment,V value,Throwable exc){  if (exc == null) {    handler.completed(value,attachment);  } else {    handler.failed(exc,attachment);  }  Thread.interrupted();  if (System.getSecurityManager() != null) {    Thread me=Thread.currentThread();    if (me instanceof sun.misc.InnocuousThread) {      GroupAndInvokeCount thisGroupAndInvokeCount=myGroupAndInvokeCount.get();      ((sun.misc.InnocuousThread)me).eraseThreadLocals();      if (thisGroupAndInvokeCount != null) {        myGroupAndInvokeCount.set(thisGroupAndInvokeCount);      }    }  }}  }
class C{  public void bind(Name name,java.lang.Object obj) throws NamingException {  if (name.size() == 0) {    throw new InvalidNameException("Name is empty");  }  if (debug) {    System.out.println("Bind: " + name);  }  NameComponent[] path=CNNameParser.nameToCosName(name);  try {    callBindOrRebind(path,name,obj,false);  } catch (  CannotProceedException e) {    javax.naming.Context cctx=getContinuationContext(e);    cctx.bind(e.getRemainingName(),obj);  }}  }
class C{  private static Implementation delegateOrNoop(DoFnSignature.DoFnMethod method){  return (method == null) ? FixedValue.originType() : new DoFnMethodDelegation(method.targetMethod());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  if (a == null)   return Pooler.EMPTY_STRING_ARRAY;  java.util.ArrayList rv=new java.util.ArrayList();  if (a.isHDTV())   rv.add("HDTV");  if (a.isStereo())   rv.add("Stereo");  if (a.isCC())   rv.add("CC");  if (a.isSAP())   rv.add("SAP");  if (a.isSubtitled())   rv.add("Subtitled");  if (a.is3D())   rv.add("3D");  if (a.isDD51())   rv.add("DD5.1");  if (a.isDolby())   rv.add("Dolby");  if (a.isLetterbox())   rv.add("Letterbox");  if (a.isLive())   rv.add("Live");  if (a.isNew())   rv.add("New");  if (a.isWidescreen())   rv.add("Widescreen");  if (a.isSurround())   rv.add("Surround");  if (a.isDubbed())   rv.add("Dubbed");  if (a.isTaped())   rv.add("Taped");  return (String[])rv.toArray(Pooler.EMPTY_STRING_ARRAY);}  }
class C{  public Matrix computeDerivatives(Matrix loghyper,Matrix X,int index){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  if (index > numParameters() - 1)   throw new IllegalArgumentException("Wrong hyperparameters index " + index + " it should be smaller or equal to "+ (numParameters() - 1));  final double ell=Math.exp(loghyper.get(0,0));  final double em2=1 / (ell * ell);  final double oneplusem2=1 + em2;  final double twosf2=2 * Math.exp(2 * loghyper.get(1,0));  final double twos2=2 * Math.exp(2 * loghyper.get(2,0));  final int m=X.getRowDimension();  final int n=X.getColumnDimension();  double[][] x=X.getArray();  if (q == null || q.length != m || q[0].length != m) {    q=new double[m][m];    for (int i=0; i < m; i++) {      for (int j=0; j < m; j++) {        double t=0;        for (int k=0; k < n; k++) {          t+=x[i][k] * x[j][k] * em2;        }        q[i][j]=t;      }    }  }  double[] dq=new double[m];  for (int i=0; i < m; i++) {    dq[i]=Math.sqrt(oneplusem2 + q[i][i]);  }  if (k == null || k.length != m || k[0].length != m) {    k=new double[m][m];    for (int i=0; i < m; i++) {      final double dqi=dq[i];      for (int j=0; j < m; j++) {        final double t=(em2 + q[i][j]) / (dqi * dq[j]);        k[i][j]=t;      }    }  }  Matrix A=null;switch (index) {case 0:    for (int i=0; i < m; i++) {      dq[i]=oneplusem2 + q[i][i];    }  double[] v=new double[m];for (int i=0; i < m; i++) {  double t=0;  for (int j=0; j < n; j++) {    final double xij=x[i][j];    t+=xij * xij * em2;  }  v[i]=(t + em2) / (dq[i]);}for (int i=0; i < m; i++) {final double vi=v[i];for (int j=0; j < m; j++) {  double t=(q[i][j] + em2) / (Math.sqrt(dq[i]) * Math.sqrt(dq[j]));  final double kij=k[i][j];  q[i][j]=-twosf2 * ((t - (0.5 * kij * (vi + v[j]))) / Math.sqrt(1 - kij * kij));}}A=new Matrix(q);q=null;break;case 1:for (int i=0; i < m; i++) {for (int j=0; j < m; j++) {k[i][j]=Math.asin(k[i][j]) * twosf2;}}A=new Matrix(k);k=null;break;case 2:double[][] a=new double[m][m];for (int i=0; i < m; i++) a[i][i]=twos2;A=new Matrix(a);break;default :throw new IllegalArgumentException("the covariance function CovNNoneNoise alllows for a maximum of 3 parameters!!");}return A;}  }
class C{  byte[] wrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  byte[] result=null;  try {    byte[] encodedKey=key.getEncoded();    if ((encodedKey == null) || (encodedKey.length == 0)) {      throw new InvalidKeyException("Cannot get an encoding of " + "the key to be wrapped");    }    result=doFinal(encodedKey,0,encodedKey.length);  } catch (  BadPaddingException e) {  }  return result;}  }
class C{  public boolean isInteriorRight(){  return this.left.isInteriorRight();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void loadSignalHeads(Element shared,Element perNode){  InstanceManager.getDefault(jmri.SignalHeadManager.class);  List<Element> items=shared.getChildren();  if (log.isDebugEnabled()) {    log.debug("Found " + items.size() + " signal heads");  }  for (int i=0; i < items.size(); i++) {    Element item=items.get(i);    String adapterName=item.getAttribute("class").getValue();    log.debug("load via " + adapterName);    try {      XmlAdapter adapter=(XmlAdapter)Class.forName(adapterName).newInstance();      adapter.load(item,null);    } catch (    Exception e) {      log.error("Exception while loading {}: {}",item.getName(),e,e);    }  }}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  public static JPanel createCheckbox(String boxlabel,String[] buttons,boolean[] checked,ActionListener al){  JPanel jp=createPaletteJPanel(boxlabel);  for (int j=0; j < buttons.length; j++) {    JCheckBox jcb=new JCheckBox(buttons[j]);    jcb.setActionCommand(Integer.toString(j));    if (al != null)     jcb.addActionListener(al);    jcb.setSelected(checked[j]);    jp.add(jcb);  }  return jp;}  }
class C{  public static BloomFilter fromWire(WireFormat.Reader reader) throws IOException {  byte[] data=reader.readVarBytes();  int hashFunctions=reader.readUint32();  int tweak=reader.readUint32();  int update=reader.readByte();  return new BloomFilter(data,hashFunctions,tweak,UpdateMode.values()[update]);}  }
class C{  public static int randomInt(int min,int max){  if (r == null)   r=new Random();  return r.nextInt((max - min) + 1) + min;}  }
class C{  public void reset(){  mSearchBarController.reset();  mAppsRecyclerView.reset();}  }
class C{  protected Frame<V> newFrame(final Frame<? extends V> src){  return new Frame<V>(src);}  }
class C{  public boolean isImmortal(){  return immortal;}  }
class C{  public BleichenbacherAttacker(final byte[] encryptedKey,final AOracle pkcsOracle) throws CryptoAttackException {  this(encryptedKey,pkcsOracle,true);}  }
class C{  private String stringifyIP(byte[] ip){  String temp="";  for (int i=0; i < ip.length / 2; i++) {    temp+=Integer.toString(ip[i] & 0x00FF) + ".";  }  temp=temp.substring(0,temp.length() - 1);  temp+="/";  for (int i=ip.length / 2; i < ip.length; i++) {    temp+=Integer.toString(ip[i] & 0x00FF) + ".";  }  temp=temp.substring(0,temp.length() - 1);  return temp;}  }
class C{  private static void refreshLists(){  oneBestList.removeAll();  DefaultListModel oneBestListModel=(DefaultListModel)oneBestList.getModel();  for (  TranslationInfo ti : translations) {    oneBestListModel.addElement(ti.reference());  }}  }
class C{  public LazyArray(final ObjectProvider<? extends Type> provider,final int capacity){  super(capacity);  this.provider=provider;}  }
class C{  protected int _offset(int absRank){  return offsets[absRank];}  }
class C{  protected ObjectMatrix2D viewSelectionLike(int[] rowOffsets,int[] columnOffsets){  return new SelectedDenseObjectMatrix2D(this.elements,rowOffsets,columnOffsets,this.offset);}  }
class C{  public static void compactCleanUp(String fileName){  String tempName=fileName + Constants.SUFFIX_MV_STORE_TEMP_FILE;  if (FileUtils.exists(tempName)) {    FileUtils.delete(tempName);  }  String newName=fileName + Constants.SUFFIX_MV_STORE_NEW_FILE;  if (FileUtils.exists(newName)) {    if (FileUtils.exists(fileName)) {      FileUtils.delete(newName);    } else {      FileUtils.move(newName,fileName);    }  }}  }
class C{  @Override public String[] apply(String[] words){  if (!isApplicable())   return words;  for (int i=0; i < _colList.length; i++) {    int colID=_colList[i];    String key=UtilFunctions.unquote(words[colID - 1].trim());    String val=lookupRCDMap(colID,key);    words[colID - 1]=(val != null) ? val : "NaN";  }  return words;}  }
class C{  public static String infoFirstLastPixels(ImageLineInt line){  return line.imgInfo.channels == 1 ? String.format("first=(%d) last=(%d)",line.scanline[0],line.scanline[line.scanline.length - 1]) : String.format("first=(%d %d %d) last=(%d %d %d)",line.scanline[0],line.scanline[1],line.scanline[2],line.scanline[line.scanline.length - line.imgInfo.channels],line.scanline[line.scanline.length - line.imgInfo.channels + 1],line.scanline[line.scanline.length - line.imgInfo.channels + 2]);}  }
class C{  public TickerTimerTask(ExchangeController exchangeController,MultiBitFrame mainFrame,boolean isFirstExchange){  this.exchangeController=exchangeController;  this.controller=this.exchangeController;  this.mainFrame=mainFrame;  this.isFirstExchange=isFirstExchange;  if (isFirstExchange) {    currency=controller.getModel().getUserPreference(ExchangeModel.TICKER_FIRST_ROW_CURRENCY);    if (currency == null || currency.length() == 0) {      currency=ExchangeData.DEFAULT_CURRENCY;      controller.getModel().setUserPreference(ExchangeModel.TICKER_FIRST_ROW_CURRENCY,currency);    }    shortExchangeName=controller.getModel().getUserPreference(ExchangeModel.TICKER_FIRST_ROW_EXCHANGE);  } else {    currency=controller.getModel().getUserPreference(ExchangeModel.TICKER_SECOND_ROW_CURRENCY);    shortExchangeName=controller.getModel().getUserPreference(ExchangeModel.TICKER_SECOND_ROW_EXCHANGE);  }}  }
class C{  protected void changeTimeBy(long amount,boolean wrapAroundTimeLimits){  changeTimeBy(amount,wrapAroundTimeLimits,(amount >= 0 ? TimerStatus.FORWARD : TimerStatus.BACKWARD));}  }
class C{  public boolean isUniqueAttrMatch(){  return _uniqueAttrMatch;}  }
class C{  public void verifyValidityAndStatus(OCSPResp response,X509Certificate subject,X509Certificate issuer,Date atDate) throws Exception {  verifyValidity(response,subject,issuer,atDate);  verifyStatus(response);}  }
class C{  public final boolean sendMessage(Message msg){  return mExec.sendMessage(msg);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenValidation[");  for (int i=0; i < m_fldsVld.size(); i++) {    buffer.append(" [FieldValidation").append(i + 1);    buffer.append(" = ").append((m_fldsVld.get(i)).toString());    buffer.append("] ");  }  buffer.append("]");  return buffer.toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.984 -0500",hash_original_method="E7EDEB2BF9CD79B50B8CB74658BC8C20",hash_generated_method="839E58FC55C9841E5D7E21929ABC3E81") public static String valueOf(char value){  String str=new String();  str.addTaint(value);  return str;}  }
class C{  @Override public synchronized boolean removeAll(Collection<?> collection){  return super.removeAll(collection);}  }
class C{  public FieldAnalysisRequest addFieldName(String fieldName){  if (fieldNames == null) {    fieldNames=new LinkedList<>();  }  fieldNames.add(fieldName);  return this;}  }
class C{  @Override public void onDisplayCompletions(CompletionInfo[] completions){  if (mCompletionOn) {    mCompletions=completions;    if (completions == null) {      setSuggestions(null,false,false);      return;    }    List<String> stringList=new ArrayList<String>();    for (int i=0; i < completions.length; i++) {      CompletionInfo ci=completions[i];      if (ci != null)       stringList.add(ci.getText().toString());    }    setSuggestions(stringList,true,true);  }}  }
class C{  private void fixData(){  double ymin=StatUtils.min(flatten(yDat).toArray());  if (ymin < 0 || ymin > 1)   throw new IllegalArgumentException("Discrete data must be either zero or one indexed. Found min index: " + ymin);  if (ymin == 0) {    yDat.assign(Functions.plus(1.0));  }  for (int i=0; i < p; i++) {    xDat.viewColumn(i).assign(StatUtils.standardizeData(xDat.viewColumn(i).toArray()));  }}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public Aspects findByClassNameFieldName(String className,String fieldname,String value) throws ClassNotFoundException {  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Aspects aspects=new Aspects();    Class<?> c=Class.forName(className);    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Object> criteriaQuery=builder.createQuery();    Root<?> from=criteriaQuery.from(c);    CriteriaQuery<Object> query=criteriaQuery.select(from);    if (null != fieldname) {      query.where(builder.equal(from.get(fieldname),value));    }    TypedQuery<Object> typedQuery=entityManager.createQuery(query);    List<Object> items=typedQuery.getResultList();    for (    Object item : items) {      aspects.add((Aspect)item);    }    entityManager.getTransaction().commit();    return aspects;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public void testDumpShardMapsAll() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  Set<ShardMapping> shardMappings=this.client.getShardMappings().getData();  assertEquals(1,shardMappings.size());  ShardMapping shardMapping=shardMappings.iterator().next();  assertEquals(1,shardMapping.getShardTables().size());}  }
class C{  public void onSaveInstanceState(@NonNull Bundle bundle){  bundle.putString("identifier",mFragmentId);  if (component != null) {    component.getPresenter().onSaveInstanceState(bundle);    mOnSaveInstanceCalled=true;  }}  }
class C{  public boolean usetermweightsinsearch(){  return usetermweightsintermsearch;}  }
class C{  public boolean hasErrors(){  return mHasErrors;}  }
class C{  public static boolean hideSoftInput(View view){  InputMethodManager imm=(InputMethodManager)view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);  return imm.hideSoftInputFromWindow(view.getWindowToken(),0);}  }
class C{  public DeflaterInputStream(InputStream in,Deflater defl){  this(in,defl,512);}  }
class C{  public Days minus(int days){  return plus(FieldUtils.safeNegate(days));}  }
class C{  public boolean isCritical(){  return critical;}  }
class C{  public void showRecycler(){  hideProgress();  if (mRecycler.getAdapter().getItemCount() == 0 && mEmptyId != 0) {    mEmpty.setVisibility(View.VISIBLE);  } else   if (mEmptyId != 0) {    mEmpty.setVisibility(View.GONE);  }  mRecycler.setVisibility(View.VISIBLE);}  }
class C{  private static boolean scanArgs(String[] args,String value){  if (args != null) {    for (    String arg : args) {      if (value.equals(arg)) {        return true;      }    }  }  return false;}  }
class C{  protected CSSValue createCSSValue(int idx){  return new ComputedCSSValue(idx);}  }
class C{  public MessagingArea(final boolean coversZone,final int width,final int height,final String enterMessage,final String leaveMessage,final boolean isWarning){  super(width,height);  hide();  this.coversZone=coversZone;  this.enterMessage=enterMessage;  this.leaveMessage=leaveMessage;  this.isWarning=isWarning;}  }
class C{  protected void updateBuildStatus(Notification notification,BuildTaskDescriptor descriptor,SubscriptionHandler<String> buildStatusHandler,SubscriptionHandler<String> buildOutputHandler,final String successMessage,final String errorMessage,final String prefixConsole,final BuildFinishedCallback buildFinishedCallback){  BuildStatus status=descriptor.getStatus();  if (status == BuildStatus.IN_PROGRESS || status == BuildStatus.IN_QUEUE) {    return;  }  if (status == BuildStatus.CANCELLED || status == BuildStatus.FAILED || status == BuildStatus.SUCCESSFUL) {    afterBuildFinished(notification,descriptor,buildStatusHandler,buildOutputHandler,successMessage,errorMessage,prefixConsole,buildFinishedCallback);  }}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw (InternalError)new InternalError().initCause(e);  }}  }
class C{  public void put(double[] val){  assert (val.length == mean.length);  final double nwsum=wsum + 1.;  for (int i=0; i < mean.length; i++) {    final double delta=val[i] - mean[i];    nmea[i]=mean[i] + delta / nwsum;  }  for (int i=0; i < mean.length; i++) {    for (int j=i; j < mean.length; j++) {      double delta=(val[i] - nmea[i]) * (val[j] - mean[j]);      elements[i][j]=elements[i][j] + delta;      if (i != j) {        elements[j][i]=elements[j][i] + delta;      }    }  }  wsum=nwsum;  System.arraycopy(nmea,0,mean,0,nmea.length);}  }
class C{  public void decode(FacesContext context,UIComponent component){  String clientId=component.getClientId(context);  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"Begin decoding component " + component.getId());  }  Map<String,String> requestParameterMap=context.getExternalContext().getRequestParameterMap();  if (requestParameterMap.containsKey(clientId)) {    ((UIForm)component).setSubmitted(true);  } else {    ((UIForm)component).setSubmitted(false);  }  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"End decoding component " + component.getId());  }  getLifecycle(context).addPhaseListener(new ResponsePhaseListener());}  }
class C{  @SuppressWarnings("unused") private SpecificMessage(){}  }
class C{  public IntegerConverter(){  super(false);}  }
class C{  public int encodeTilePixels(int[] pixels,Rectangle rect,byte[] bpixels){  int rows=(int)rect.getHeight();  int cols=(int)rect.getWidth();  int index;  int pixel=0;  int k=0;  int rowBytes=0;switch (sampleSize[0]) {case 1:    index=0;  rowBytes=(cols + 7) / 8;for (int i=0; i < rows; i++) {  for (int j=0; j < cols / 8; j++) {    pixel=(pixels[index++] << 7) | (pixels[index++] << 6) | (pixels[index++] << 5)| (pixels[index++] << 4)| (pixels[index++] << 3)| (pixels[index++] << 2)| (pixels[index++] << 1)| pixels[index++];    bpixels[k++]=(byte)pixel;  }  if (cols % 8 > 0) {    pixel=0;    for (int j=0; j < cols % 8; j++) {      pixel|=(pixels[index++] << (7 - j));    }    bpixels[k++]=(byte)pixel;  }}break;case 4:index=0;rowBytes=(cols + 3) / 4;for (int i=0; i < rows; i++) {for (int j=0; j < cols / 2; j++) {pixel=(pixels[index++] << 4) | pixels[index++];bpixels[k++]=(byte)pixel;}if ((cols % 2) != 0) {pixel=pixels[index++] << 4;bpixels[k++]=(byte)pixel;}}break;case 8:index=0;rowBytes=cols * numBands;for (int i=0; i < rows; i++) {for (int j=0; j < cols * numBands; j++) {bpixels[k++]=(byte)pixels[index++];}}break;case 16:index=0;rowBytes=cols * 2;int l=0;for (int i=0; i < rows; i++) {for (int j=0; j < cols; j++) {short value=(short)pixels[index++];bpixels[l++]=(byte)((value & 0xff00) >> 8);bpixels[l++]=(byte)(value & 0x00ff);}}break;}return rows * rowBytes;}  }
class C{  public void testConstructorBytesPositive2(){  byte aBytes[]={12,56,100};  byte rBytes[]={12,56,100};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public CharClassInterval(int start,int end,int charClass){  this.start=start;  this.end=end;  this.charClass=charClass;}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  @NotNull private static PyFunction insertMethodInProperPlace(@NotNull final PyStatementList destStatementList,@NotNull final PyFunction method){  boolean methodIsInit=PyUtil.isInit(method);  if (!methodIsInit) {    return (PyFunction)destStatementList.add(method);  }  for (  final PsiElement element : destStatementList.getChildren()) {    final boolean elementComment=element instanceof PyExpressionStatement;    final boolean elementClassField=element instanceof PyAssignmentStatement;    if (!(elementComment || elementClassField)) {      return (PyFunction)destStatementList.addBefore(method,element);    }  }  return (PyFunction)destStatementList.add(method);}  }
class C{  private static void logStatus(KeywordCollection currentPopulation,int currentStep){  logger.info("--- Optimization step {} (Avg: {}) ---",currentStep,currentPopulation.getAverageScore());  for (  KeywordInfo evaluation : currentPopulation.getListSortedByScore()) {    logger.debug("{} -> {}",KeywordOptimizerUtil.toString(evaluation.getKeyword()),evaluation.getScore());  }}  }
class C{  static void onSignOut(final Activity activity){  SharedPreferences settings=activity.getSharedPreferences("MobileAssistant",0);  SharedPreferences.Editor editor=settings.edit();  editor.putString(ACCOUNT_NAME_SETTING_NAME,"");  editor.apply();  credential.setSelectedAccountName("");  Intent intent=new Intent(activity,SignInActivity.class);  activity.startActivity(intent);}  }
class C{  public boolean isOverwriteMode(){  return overwriteMode;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.118 -0500",hash_original_method="905168F82A17E43399C57E76AC6D268D",hash_generated_method="69D04CBC3A1BDA9C304600B26CA6114D") public final Activity waitForActivity(){synchronized (this) {    while (mLastActivity == null) {      try {        wait();      } catch (      InterruptedException e) {      }    }    Activity res=mLastActivity;    mLastActivity=null;    return res;  }}  }
class C{  public JMenu createSpacingMenu(){  JMenu spaceSubMenu=new JMenu("Space");  spaceSubMenu.add(actionManager.getSpaceHorizontalAction());  spaceSubMenu.add(actionManager.getSpaceVerticalAction());  return spaceSubMenu;}  }
class C{  private void validateStorageUnitNotificationFilterBusinessObjectDefinitionFields(StorageUnitNotificationFilter filter){  Assert.hasText(filter.getNamespace(),"A business object definition namespace must be specified.");  filter.setNamespace(filter.getNamespace().trim());  Assert.hasText(filter.getBusinessObjectDefinitionName(),"A business object definition name must be specified.");  filter.setBusinessObjectDefinitionName(filter.getBusinessObjectDefinitionName().trim());}  }
class C{  private ContentComparisonResult tfsItemNodesCompare(final TFSItemNode node1,final TFSItemNode node2,final IProgressMonitor monitor){  final Item item1=node1.getItem();  final Item item2=node2.getItem();  if (item1.getItemType() == ItemType.FOLDER || item2.getItemType() == ItemType.FOLDER) {    return ContentComparisonResult.EQUAL;  }  final byte[] hash1=item1.getContentHashValue();  final byte[] hash2=item2.getContentHashValue();  return compareByHash(hash1,hash2);}  }
class C{  public JsonArray add(float value){  values.add(valueOf(value));  return this;}  }
class C{  public boolean isMinimized(final HttpServletRequest request){  Validate.notNull(request);  final String minimizeAsString=request.getParameter(PARAM_MINIMIZE);  return !(Context.get().getConfig().isDebug() && "false".equalsIgnoreCase(minimizeAsString));}  }
class C{  public IndexingStreamCreator(File outputFile,OutputStream stdout,boolean compress,TabixIndexer.IndexerFactory indexerFactory,boolean createIndexIfPossible){  if (indexerFactory == null) {    if (!compress) {      throw new IllegalArgumentException("Uncompressed BAM not supported");    }    if (outputFile == null) {      throw new IllegalArgumentException("BAM output to stdout not supported");    }  }  mOutputFile=outputFile;  mOutputStream=mOutputFile != null ? null : stdout;  mCompress=compress;  mIndexerFactory=indexerFactory;  mCreateIndexIfPossible=createIndexIfPossible;}  }
class C{  private void init(){  setTitle("Edit Simple Recurrent Network");  trainer=new SRNTrainer(srn);  IterativeControlsPanel iterativeControls=new IterativeControlsPanel(networkPanel,trainer);  addTab("Train",iterativeControls);  Action helpAction=new ShowHelpAction("Pages/Network/network/srn.html");  addButton(new JButton(helpAction));}  }
class C{  public static Color floatToHue(final float fclr){  return Color.getHSBColor(fclr,1,1);}  }
class C{  private String statusMessagePrefix(){  return getCustomName() + "$" + hashCode()+ "|";}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public void persist(Collection<RawProtein<PantherRawMatch>> filteredProteins,Map<String,Signature> modelIdToSignatureMap,Map<String,Protein> proteinIdToProteinMap){  for (  RawProtein<PantherRawMatch> rawProtein : filteredProteins) {    Protein protein=proteinIdToProteinMap.get(rawProtein.getProteinIdentifier());    if (protein == null) {      throw new IllegalStateException("Cannot store match to a protein that is not in database " + "[protein ID= " + rawProtein.getProteinIdentifier() + "]");    }    Set<PantherMatch.PantherLocation> locations=null;    String currentSignatureAc=null;    Signature currentSignature=null;    PantherRawMatch lastRawMatch=null;    PantherMatch match=null;    for (    PantherRawMatch rawMatch : rawProtein.getMatches()) {      if (rawMatch == null) {        continue;      }      if (currentSignatureAc == null || !currentSignatureAc.equals(rawMatch.getModelId())) {        if (currentSignatureAc != null) {          if (match != null) {            entityManager.persist(match);          }          match=new PantherMatch(currentSignature,locations,lastRawMatch.getEvalue(),lastRawMatch.getFamilyName(),lastRawMatch.getScore());          protein.addMatch(match);        }        locations=new HashSet<PantherMatch.PantherLocation>();        currentSignatureAc=rawMatch.getModelId();        currentSignature=modelIdToSignatureMap.get(currentSignatureAc);        if (currentSignature == null) {          throw new IllegalStateException("Cannot find PANTHER signature " + currentSignatureAc + " in the database.");        }      }      LOGGER.debug(" protein length = " + protein.getSequenceLength() + " start location of raw match : "+ rawMatch.getLocationStart()+ " end location of raw match : "+ rawMatch.getLocationEnd());      if (!pantherLocationWithinRange(protein,rawMatch)) {        LOGGER.error("PANTHER match is out of range: " + " protein length = " + protein.getSequenceLength() + " raw match : "+ rawMatch.toString());        throw new IllegalStateException("PANTHER match location is out of range " + currentSignatureAc + " protein length = "+ protein.getSequenceLength()+ " raw match : "+ rawMatch.toString());      }      locations.add(new PantherMatch.PantherLocation(rawMatch.getLocationStart(),rawMatch.getLocationEnd()));      lastRawMatch=rawMatch;    }    if (lastRawMatch != null) {      match=new PantherMatch(currentSignature,locations,lastRawMatch.getEvalue(),lastRawMatch.getFamilyName(),lastRawMatch.getScore());      protein.addMatch(match);      entityManager.persist(match);    }  }}  }
class C{  public void narrow() throws OperatorFailedException {  final int nNodes=tree.getNodeCount();  final NodeRef root=tree.getRoot();  NodeRef i=root;  while (root == i || tree.getParent(i) == root) {    i=tree.getNode(MathUtils.nextInt(nNodes));  }  final NodeRef iParent=tree.getParent(i);  final NodeRef iGrandParent=tree.getParent(iParent);  NodeRef iUncle=tree.getChild(iGrandParent,0);  if (iUncle == iParent) {    iUncle=tree.getChild(iGrandParent,1);  }  assert iUncle == getOtherChild(tree,iGrandParent,iParent);  assert tree.getNodeHeight(i) <= tree.getNodeHeight(iGrandParent);  if (tree.getNodeHeight(iUncle) < tree.getNodeHeight(iParent)) {    exchangeNodes(tree,i,iUncle,iParent,iGrandParent);  } else {    throw new OperatorFailedException("Couldn't find valid narrow move on this tree!!");  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.256 -0500",hash_original_method="3492CF41320405C3965233DAB60A3EF1",hash_generated_method="7E137D5EAEFEEFFC7D0548124A537F7E") void buildFieldDescriptors(Field[] declaredFields){  final Field f=ObjectStreamClass.fieldSerialPersistentFields(this.forClass());  boolean useReflectFields=f == null;  ObjectStreamField[] _fields=null;  if (!useReflectFields) {    f.setAccessible(true);    try {      _fields=(ObjectStreamField[])f.get(null);    } catch (    IllegalAccessException ex) {      throw new AssertionError(ex);    }  } else {    List<ObjectStreamField> serializableFields=new ArrayList<ObjectStreamField>(declaredFields.length);    for (    Field declaredField : declaredFields) {      int modifiers=declaredField.getModifiers();      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers)) {        ObjectStreamField field=new ObjectStreamField(declaredField.getName(),declaredField.getType());        serializableFields.add(field);      }    }    if (serializableFields.size() == 0) {      _fields=NO_FIELDS;    } else {      _fields=serializableFields.toArray(new ObjectStreamField[serializableFields.size()]);    }  }  Arrays.sort(_fields);  int primOffset=0, objectOffset=0;  for (int i=0; i < _fields.length; i++) {    Class<?> type=_fields[i].getType();    if (type.isPrimitive()) {      _fields[i].offset=primOffset;      primOffset+=primitiveSize(type);    } else {      _fields[i].offset=objectOffset++;    }  }  fields=_fields;}  }
class C{  public ContentLengthOutputStream(final SessionOutputBuffer out,long contentLength){  super();  if (out == null) {    throw new IllegalArgumentException("Session output buffer may not be null");  }  if (contentLength < 0) {    throw new IllegalArgumentException("Content length may not be negative");  }  this.out=out;  this.contentLength=contentLength;}  }
class C{  public MultisigTransaction createMultisig(final Account cosigner){  return new MultisigTransaction(TimeInstant.ZERO,cosigner,this.innerTransaction);}  }
class C{  public Matrix4f(float m00,float m01,float m02,float m03,float m10,float m11,float m12,float m13,float m20,float m21,float m22,float m23,float m30,float m31,float m32,float m33){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m03=m03;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m13=m13;  this.m20=m20;  this.m21=m21;  this.m22=m22;  this.m23=m23;  this.m30=m30;  this.m31=m31;  this.m32=m32;  this.m33=m33;}  }
class C{  private void initialize(URI p_other){  m_scheme=p_other.getScheme();  m_userinfo=p_other.getUserinfo();  m_host=p_other.getHost();  m_port=p_other.getPort();  m_path=p_other.getPath();  m_queryString=p_other.getQueryString();  m_fragment=p_other.getFragment();}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  public Map<String,String> loadConfigProperties(String confFile) throws IOException {  return loadConfigProperties(Paths.get(confFile));}  }
class C{  public static List<Workflow> readWorkflowFiles(String[] files){  if (files == null) {    return Lists.newArrayList();  }  YamlReader<Workflow> reader=new YamlReader<>(Workflow.getYamlConstructor());  ArrayList<Workflow> result=Lists.newArrayList();  for (  String file : files) {    File f=new File(file);    result.add(reader.read(f));  }  return result;}  }
class C{  boolean isMarker(){  return value == this;}  }
class C{  public void layoutByGraph(Graph graph){  SemGraph _graph=(SemGraph)standardizedSemImGraphicalEditor.getWorkbench().getGraph();  _graph.setShowErrorTerms(false);  standardizedSemImGraphicalEditor.getWorkbench().layoutByGraph(graph);  _graph.resetErrorPositions();  errorTerms.setText("Show Error Terms");}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 4 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  private void removeImageServerFromComputeSystem(URI imageServerID){  List<URI> computeSystemURIList=_dbClient.queryByType(ComputeSystem.class,true);  if (computeSystemURIList != null && computeSystemURIList.iterator().hasNext()) {    List<ComputeSystem> computeSystems=_dbClient.queryObject(ComputeSystem.class,computeSystemURIList);    if (!CollectionUtils.isEmpty(computeSystems)) {      for (      ComputeSystem computeSystem : computeSystems) {        if (computeSystem.getComputeImageServer() != null && computeSystem.getComputeImageServer().equals(imageServerID)) {          computeSystem.setComputeImageServer(NullColumnValueGetter.getNullURI());          _dbClient.updateObject(computeSystem);          log.info("Disassociating imageServer {} from ComputeSystem id {} ",imageServerID,computeSystem.getId());        }      }    }  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_AssignmentChecked:    return stateVector[0] == State.main_region_AssignmentChecked;case main_region_Failed:  return stateVector[0] == State.main_region_Failed;case main_region_VarToVarCompareSucceeded:return stateVector[0] == State.main_region_VarToVarCompareSucceeded;case main_region_VarToConstCompareSucceeded:return stateVector[0] == State.main_region_VarToConstCompareSucceeded;case main_region_ConstToVarCompareSucceeded:return stateVector[0] == State.main_region_ConstToVarCompareSucceeded;case main_region_ConstToConstCompareSucceeded:return stateVector[0] == State.main_region_ConstToConstCompareSucceeded;default :return false;}}  }
class C{  public static Paint silentConvertURIPaint(Element paintedElement,GraphicsNode paintedNode,Value paintDef,float opacity,BridgeContext ctx){  Paint paint=null;  try {    paint=convertURIPaint(paintedElement,paintedNode,paintDef,opacity,ctx);  } catch (  BridgeException ex) {  }  return paint;}  }
class C{  public int indexObject(Object obj,Environment env){  if (indexHashObject == null)   createIndexHash(env);  Integer result=(Integer)indexHashObject.get(obj);  if (result == null)   throw new IndexOutOfBoundsException("Cannot find object " + obj + " of type "+ obj.getClass()+ " in constant pool");  return result.intValue();}  }
class C{  protected void clearOutEvents(){}  }
class C{  private void resolveMethodReferences(Set<MethodType> methods,Events events){  for (  MethodType m : methods) {    resolveMethodReferences(m,events);  }}  }
class C{  public static Token newIdentifier(String text,int startLine,int startColumn){  return new Token(Types.IDENTIFIER,text,startLine,startColumn);}  }
class C{  public void writeRawLittleEndian64(final long value) throws IOException {  if (buffer.remaining() < 8) {    throw new OutOfSpaceException(buffer.position(),buffer.limit());  }  buffer.putLong(value);}  }
class C{  public QueueNode(Object contents){  m_Contents=contents;  next(null);}  }
class C{  public void destroy(){  if (mTextToSpeech != null) {    mTextToSpeech.shutdown();    mTextToSpeech=null;  }  if (mCallback != null) {    mCallback=null;  }}  }
class C{  public void response(RpcResponse rpcResponse){  if (log.isDebugEnabled()) {    log.debug("Received [" + rpcResponse.getCorrelationId() + "]RpcResponse.");  }  PendingClientCallState state=removePendingRequest(rpcResponse.getCorrelationId());  if (state != null) {    Message response=null;    try {      response=state.getResponsePrototype().newBuilderForType().mergeFrom(rpcResponse.getResponseBytes(),getExtensionRegistry()).build();      doLogRpc(state,response,null);      state.handleResponse(response);      if (state.getTimeoutFuture() != null) {        state.getTimeoutFuture().cancel(false);      }    } catch (    InvalidProtocolBufferException e) {      String errorMessage="Invalid Response Protobuf.";      doLogRpc(state,rpcResponse,errorMessage);      state.handleFailure(errorMessage);    }  } else {    if (log.isDebugEnabled()) {      log.debug("No PendingClientCallState found for correlationId " + rpcResponse.getCorrelationId());    }  }}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public final void initialize(){  for (int i=0; i < m_perClass.length; i++) {    m_perClass[i]=0;  }  for (int i=0; i < m_perBag.length; i++) {    m_perBag[i]=0;  }  for (int i=0; i < m_perBag.length; i++) {    for (int j=0; j < m_perClass.length; j++) {      m_perClassPerBag[i][j]=0;    }  }  totaL=0;}  }
class C{  public static File createTempDir(){  return createTempDir(new File(System.getProperty("java.io.tmpdir")));}  }
class C{  public StrTokenizer(String input){  super();  if (input != null) {    chars=input.toCharArray();  } else {    chars=null;  }}  }
class C{  public static void logError(Throwable exception){  logError(exception,"Unexpected Exception");}  }
class C{  public Builder deleteExtension(String urn){  deleteFields.add(urn);  return this;}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  if (m_optimizer == null || !m_optimizer.modelBuilt()) {    return "SMOreg: No model built yet.";  }  try {    text.append(m_optimizer.toString());  } catch (  Exception e) {    return "Can't print SMVreg classifier.";  }  return text.toString();}  }
class C{  public THLStoreExtractor(){}  }
class C{  boolean transitToGoal(Cell bin,List<FeatureFunction> featureFunctions,int sentenceLength){  this.sortedNodes=new ArrayList<>();  HGNode goalItem=null;  for (  HGNode antNode : bin.getSortedNodes()) {    if (antNode.lhs == this.goalSymbol) {      float logP=antNode.bestHyperedge.getBestDerivationScore();      List<HGNode> antNodes=new ArrayList<>();      antNodes.add(antNode);      float finalTransitionLogP=ComputeNodeResult.computeFinalCost(featureFunctions,antNodes,0,sentenceLength,null,this.chart.getSentence());      List<HGNode> previousItems=new ArrayList<>();      previousItems.add(antNode);      HyperEdge dt=new HyperEdge(null,logP + finalTransitionLogP,finalTransitionLogP,previousItems,null);      if (null == goalItem) {        goalItem=new HGNode(0,sentenceLength + 1,this.goalSymbol,null,dt,logP + finalTransitionLogP);        this.sortedNodes.add(goalItem);      } else {        goalItem.addHyperedgeInNode(dt);      }    }  }  int itemsInGoalBin=getSortedNodes().size();  if (1 != itemsInGoalBin) {    LOG.error("the goal_bin does not have exactly one item");    return false;  }  return true;}  }
class C{  public void testSetVerySmallSendWindowSize(){  logger.log(Level.INFO,"Test very small receive window");  PseudoTcpTestRecvWindow test=new PseudoTcpTestRecvWindow();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setOptNagling(false);  test.setOptAckDelay(0);  test.setOptSndBuf(900);  test.doTestTransfer(1024 * 1000);  assertEquals(900,test.estimateSendWindowSize());}  }
class C{  @Override public void update(){  service().update(Result.ignore());}  }
class C{  public long cardinal(final WordReference t){  assert this.min != null;  assert this.max != null;  assert t != null;  assert this.ranking != null;  final Bitfield flags=t.flags();  final long tf=((this.max.termFrequency() == this.min.termFrequency()) ? 0 : (((int)(((t.termFrequency() - this.min.termFrequency()) * 256.0) / (this.max.termFrequency() - this.min.termFrequency())))) << this.ranking.coeff_termfrequency);  final long r=((256 - DigestURL.domLengthNormalized(t.urlhash())) << this.ranking.coeff_domlength) + ((this.max.urlcomps() == this.min.urlcomps()) ? 0 : (256 - (((t.urlcomps() - this.min.urlcomps()) << 8) / (this.max.urlcomps() - this.min.urlcomps()))) << this.ranking.coeff_urlcomps) + ((this.max.urllength() == this.min.urllength()) ? 0 : (256 - (((t.urllength() - this.min.urllength()) << 8) / (this.max.urllength() - this.min.urllength()))) << this.ranking.coeff_urllength)+ ((this.max.posintext() == this.min.posintext()) ? 0 : (256 - (((t.posintext() - this.min.posintext()) << 8) / (this.max.posintext() - this.min.posintext()))) << this.ranking.coeff_posintext)+ ((this.max.posofphrase() == this.min.posofphrase()) ? 0 : (256 - (((t.posofphrase() - this.min.posofphrase()) << 8) / (this.max.posofphrase() - this.min.posofphrase()))) << this.ranking.coeff_posofphrase)+ ((this.max.posinphrase() == this.min.posinphrase()) ? 0 : (256 - (((t.posinphrase() - this.min.posinphrase()) << 8) / (this.max.posinphrase() - this.min.posinphrase()))) << this.ranking.coeff_posinphrase)+ ((this.max.distance() == this.min.distance()) ? 0 : (256 - (((t.distance() - this.min.distance()) << 8) / (this.max.distance() - this.min.distance()))) << this.ranking.coeff_worddistance)+ ((this.max.virtualAge() == this.min.virtualAge()) ? 0 : (((t.virtualAge() - this.min.virtualAge()) << 8) / (this.max.virtualAge() - this.min.virtualAge())) << this.ranking.coeff_date)+ ((this.max.wordsintitle() == this.min.wordsintitle()) ? 0 : (((t.wordsintitle() - this.min.wordsintitle()) << 8) / (this.max.wordsintitle() - this.min.wordsintitle())) << this.ranking.coeff_wordsintitle)+ ((this.max.wordsintext() == this.min.wordsintext()) ? 0 : (((t.wordsintext() - this.min.wordsintext()) << 8) / (this.max.wordsintext() - this.min.wordsintext())) << this.ranking.coeff_wordsintext)+ ((this.max.phrasesintext() == this.min.phrasesintext()) ? 0 : (((t.phrasesintext() - this.min.phrasesintext()) << 8) / (this.max.phrasesintext() - this.min.phrasesintext())) << this.ranking.coeff_phrasesintext)+ ((this.max.llocal() == this.min.llocal()) ? 0 : (((t.llocal() - this.min.llocal()) << 8) / (this.max.llocal() - this.min.llocal())) << this.ranking.coeff_llocal)+ ((this.max.lother() == this.min.lother()) ? 0 : (((t.lother() - this.min.lother()) << 8) / (this.max.lother() - this.min.lother())) << this.ranking.coeff_lother)+ ((this.max.hitcount() == this.min.hitcount()) ? 0 : (((t.hitcount() - this.min.hitcount()) << 8) / (this.max.hitcount() - this.min.hitcount())) << this.ranking.coeff_hitcount)+ tf+ ((this.ranking.coeff_authority > 12) ? (authority(t.hosthash()) << this.ranking.coeff_authority) : 0)+ ((flags.get(WordReferenceRow.flag_app_dc_identifier)) ? 255 << this.ranking.coeff_appurl : 0)+ ((flags.get(WordReferenceRow.flag_app_dc_title)) ? 255 << this.ranking.coeff_app_dc_title : 0)+ ((flags.get(WordReferenceRow.flag_app_dc_creator)) ? 255 << this.ranking.coeff_app_dc_creator : 0)+ ((flags.get(WordReferenceRow.flag_app_dc_subject)) ? 255 << this.ranking.coeff_app_dc_subject : 0)+ ((flags.get(WordReferenceRow.flag_app_dc_description)) ? 255 << this.ranking.coeff_app_dc_description : 0)+ ((flags.get(WordReferenceRow.flag_app_emphasized)) ? 255 << this.ranking.coeff_appemph : 0)+ ((flags.get(Tokenizer.flag_cat_indexof)) ? 255 << this.ranking.coeff_catindexof : 0)+ ((flags.get(Tokenizer.flag_cat_hasimage)) ? 255 << this.ranking.coeff_cathasimage : 0)+ ((flags.get(Tokenizer.flag_cat_hasaudio)) ? 255 << this.ranking.coeff_cathasaudio : 0)+ ((flags.get(Tokenizer.flag_cat_hasvideo)) ? 255 << this.ranking.coeff_cathasvideo : 0)+ ((flags.get(Tokenizer.flag_cat_hasapp)) ? 255 << this.ranking.coeff_cathasapp : 0)+ ((ByteBuffer.equals(t.getLanguage(),ASCII.getBytes(this.language))) ? 255 << this.ranking.coeff_language : 0);  return r;}  }
class C{  public static void hideKeyboard(Activity activity,EditText editText){  InputMethodManager inputMethodManager=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  inputMethodManager.hideSoftInputFromWindow(editText.getWindowToken(),0);}  }
class C{  @Override public boolean isNumerical(){  return false;}  }
class C{  void destroyCreature(int x,int y){  if (!isCreature(x,y)) {    throw new IllegalArgumentException(String.format("Tried to destroy a creature at (%d, %d), but " + "no creature at this position.",x,y));  }  population-=1;  removeOccupant(x,y);  removeFromQueue(x,y);}  }
class C{  public DrawerBuilder withDrawerWidthPx(int drawerWidthPx){  this.mDrawerWidth=drawerWidthPx;  return this;}  }
class C{  @Override public void emitErrorMessage(String pMessage){  if (mMessageCollectionEnabled) {    mMessages.add(pMessage);  } else {    super.emitErrorMessage(pMessage);  }}  }
class C{  public String convertMultiplicativeOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public void recycle(){  clear();}  }
class C{  public static int px2dip(Context context,float px){  float density=getDensity(context);  return (int)(px / density + DOT_FIVE);}  }
class C{  @Override public void O(final PdfObject pdfObject,final int type){  if (currentPdfFile == null) {    return;  }  if (showMethods) {    System.out.println("DefaultActionHandler.O()");  }  final FormObject pageDictionary=(FormObject)pdfObject.getDictionary(type);  currentPdfFile.checkResolved(pageDictionary);  if (pageDictionary != null) {    final FormObject Odictionary=(FormObject)pageDictionary.getDictionary(PdfDictionary.O);    currentPdfFile.checkResolved(Odictionary);    if (Odictionary != null) {      String jsCode=Odictionary.getTextStreamValue(PdfDictionary.JS);      if (jsCode == null) {        final PdfObject JS=Odictionary.getDictionary(PdfDictionary.JS);        if (JS != null) {          jsCode=new String(JS.getDecodedStream());        }      }      javascript.executeAction(jsCode);    }  }}  }
class C{  protected boolean hasReturnInsert(){  return isAnnotationPresent(ReturnInsert.class);}  }
class C{  public boolean equivalent(Composition.VirtualTrack other){  if (other == null || (!this.getSequenceTypeEnum().equals(other.getSequenceTypeEnum())) || (this.resources.size() == 0 || other.resources.size() == 0)) {    return false;  }  List<? extends IMFBaseResourceType> otherResourceList=other.resources;  boolean result=false;  if (this instanceof IMFEssenceComponentVirtualTrack) {    if (this.getDuration() != other.getDuration()) {      return false;    }    IMFEssenceComponentVirtualTrack thisVirtualTrack=IMFEssenceComponentVirtualTrack.class.cast(this);    IMFEssenceComponentVirtualTrack otherVirtualTrack=IMFEssenceComponentVirtualTrack.class.cast(other);    List<IMFTrackFileResourceType> normalizedResourceList=this.normalizeResourceList(thisVirtualTrack.getTrackFileResourceList());    List<IMFTrackFileResourceType> normalizedOtherResourceList=this.normalizeResourceList(otherVirtualTrack.getTrackFileResourceList());    if (normalizedResourceList.size() != normalizedOtherResourceList.size()) {      return false;    }    result=normalizedResourceList.get(0).equivalent(normalizedOtherResourceList.get(0));    for (int i=1; i < normalizedResourceList.size(); i++) {      IMFBaseResourceType thisResource=normalizedResourceList.get(i);      IMFBaseResourceType otherResource=normalizedOtherResourceList.get(i);      result&=thisResource.equivalent(otherResource);    }  } else {    result=this.resources.get(0).equivalent(otherResourceList.get(0));    for (int i=1; i < this.resources.size(); i++) {      IMFBaseResourceType thisResource=this.resources.get(i);      IMFBaseResourceType otherResource=otherResourceList.get(i);      result&=thisResource.equivalent(otherResource);    }  }  return result;}  }
class C{  static boolean regionMatches(final CharSequence cs,final boolean ignoreCase,final int thisStart,final CharSequence substring,final int start,final int length){  if (cs instanceof String && substring instanceof String) {    return ((String)cs).regionMatches(ignoreCase,thisStart,(String)substring,start,length);  }  int index1=thisStart;  int index2=start;  int tmpLen=length;  while (tmpLen-- > 0) {    final char c1=cs.charAt(index1++);    final char c2=substring.charAt(index2++);    if (c1 == c2) {      continue;    }    if (!ignoreCase) {      return false;    }    if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {      return false;    }  }  return true;}  }
class C{  public void decompose() throws Exception {  Reader dataReader=new BufferedReader(new FileReader(m_DataFileName));  Instances data=new Instances(dataReader);  if (m_ClassIndex < 0) {    data.setClassIndex(data.numAttributes() - 1);  } else {    data.setClassIndex(m_ClassIndex);  }  if (data.classAttribute().type() != Attribute.NOMINAL) {    throw new Exception("Class attribute must be nominal");  }  int numClasses=data.numClasses();  data.deleteWithMissingClass();  if (data.checkForStringAttributes()) {    throw new Exception("Can't handle string attributes!");  }  if (data.numInstances() < 2 * m_TrainPoolSize) {    throw new Exception("The dataset must contain at least " + (2 * m_TrainPoolSize) + " instances");  }  Random random=new Random(m_Seed);  data.randomize(random);  Instances trainPool=new Instances(data,0,m_TrainPoolSize);  Instances test=new Instances(data,m_TrainPoolSize,data.numInstances() - m_TrainPoolSize);  int numTest=test.numInstances();  double[][] instanceProbs=new double[numTest][numClasses];  m_Error=0;  for (int i=0; i < m_TrainIterations; i++) {    if (m_Debug) {      System.err.println("Iteration " + (i + 1));    }    trainPool.randomize(random);    Instances train=new Instances(trainPool,0,m_TrainPoolSize / 2);    Classifier current=AbstractClassifier.makeCopy(m_Classifier);    current.buildClassifier(train);    for (int j=0; j < numTest; j++) {      int pred=(int)current.classifyInstance(test.instance(j));      if (pred != test.instance(j).classValue()) {        m_Error++;      }      instanceProbs[j][pred]++;    }  }  m_Error/=(m_TrainIterations * numTest);  m_Bias=0;  m_Variance=0;  m_Sigma=0;  for (int i=0; i < numTest; i++) {    Instance current=test.instance(i);    double[] predProbs=instanceProbs[i];    double pActual, pPred;    double bsum=0, vsum=0, ssum=0;    for (int j=0; j < numClasses; j++) {      pActual=(current.classValue() == j) ? 1 : 0;      pPred=predProbs[j] / m_TrainIterations;      bsum+=(pActual - pPred) * (pActual - pPred) - pPred * (1 - pPred) / (m_TrainIterations - 1);      vsum+=pPred * pPred;      ssum+=pActual * pActual;    }    m_Bias+=bsum;    m_Variance+=(1 - vsum);    m_Sigma+=(1 - ssum);  }  m_Bias/=(2 * numTest);  m_Variance/=(2 * numTest);  m_Sigma/=(2 * numTest);  if (m_Debug) {    System.err.println("Decomposition finished");  }}  }
class C{  public IMqttToken subscribe(String topicFilter,int qos,IMqttMessageListener messageListener) throws MqttException {  return subscribe(topicFilter,qos,null,null,messageListener);}  }
class C{  protected void connectionWarn(){}  }
class C{  public CTutorialStep(final String description,final List<Long> mandatory,final List<Long> allowed,final boolean next){  Preconditions.checkNotNull(description,"IE01003: Description argument can not be null");  Preconditions.checkNotNull(mandatory,"IE01004: Mandatory argument can not be null");  Preconditions.checkNotNull(allowed,"IE01005: Allowed argument can not be null");  m_description=description;  m_mandatory=new ArrayList<Long>(mandatory);  m_allowed=new ArrayList<Long>(allowed);  m_next=next;}  }
class C{  public static CGAffineTransform multiply(CGAffineTransform t1,CGAffineTransform t2){  return new CGAffineTransform(t1.m00 * t2.m00 + t1.m10 * t2.m01,t1.m00 * t2.m10 + t1.m10 * t2.m11,t1.m01 * t2.m00 + t1.m11 * t2.m01,t1.m01 * t2.m10 + t1.m11 * t2.m11,t1.m02 * t2.m00 + t1.m12 * t2.m01 + t2.m02,t1.m02 * t2.m10 + t1.m12 * t2.m11 + t2.m12);}  }
class C{  public void paintProgressBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  private static String unshorthandProcessorName(final String processor,List<String> fullyQualifiedCheckerNames,boolean allowSubcheckers){  for (  final String name : fullyQualifiedCheckerNames) {    boolean tryMatch=false;    String[] checkerPath=name.substring(0,name.length() - "Checker".length()).split("\\.");    String checkerNameShort=checkerPath[checkerPath.length - 1];    String checkerName=checkerNameShort + "Checker";    if (name.endsWith("Checker")) {      checkerPath=name.substring(0,name.length() - "Checker".length()).split("\\.");      checkerNameShort=checkerPath[checkerPath.length - 1];      checkerName=checkerNameShort + "Checker";      tryMatch=true;    } else     if (allowSubcheckers && name.endsWith("Subchecker")) {      checkerPath=name.substring(0,name.length() - "Subchecker".length()).split("\\.");      checkerNameShort=checkerPath[checkerPath.length - 1];      checkerName=checkerNameShort + "Subchecker";      tryMatch=true;    }    if (tryMatch) {      if (processor.equalsIgnoreCase(checkerName) || processor.equalsIgnoreCase(checkerNameShort)) {        return name;      }    }  }  return processor;}  }
class C{  @Override public Object clone(){  if (!sizeIsSticky)   trimToSize();  try {    ShiftingBitSet result=(ShiftingBitSet)super.clone();    result.words=words.clone();    result.checkInvariants();    return result;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public void reset(){  super.reset();  fmod.reset();}  }
class C{  public boolean equals(Object other){  if (other instanceof X509CertInfo) {    return equals((X509CertInfo)other);  } else {    return false;  }}  }
class C{  public XMLBeans(JComponent layout,BeanContextSupport context,int datatype,int tab) throws Exception {  super();  m_vectorIndex=tab;  m_BeanLayout=layout;  m_BeanContextSupport=context;  setDataType(datatype);}  }
class C{  private void globalAccelFromMenu(MenuElement me){  for (  MenuElement element : me.getSubElements()) {    if ((element instanceof JPopupMenu) || (element instanceof JMenu)) {      globalAccelFromMenu(element);    } else     if (element instanceof JMenuItem) {      JMenuItem item=(JMenuItem)element;      if (item.getAccelerator() != null) {        actionListenerMap.put(item.getAccelerator(),item.getActionListeners());      }    }  }}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.469 -0500",hash_original_method="5563D3D5FF8C4FA36F1584B48F1347B6",hash_generated_method="5067A756CF8499B7ABF1DB4D1F6C7336") public Intent putExtra(String name,float value){  mExtras.put(name,value);  return this;}  }
class C{  public void update(){}  }
class C{  private static Spanned formatPlaceDetails(Resources res,CharSequence name,String id,CharSequence address,CharSequence phoneNumber,Uri websiteUri){  Log.e(TAG,res.getString(R.string.place_details,name,id,address,phoneNumber,websiteUri));  return Html.fromHtml(res.getString(R.string.place_details,name,id,address,phoneNumber,websiteUri));}  }
class C{  protected void startDeferredTasks() throws IOException {{    final IPlugIn<Journal,ThreadPoolExecutorBaseStatisticsTask> tmp=new QueueStatsPlugIn();    tmp.startService(Journal.this);    pluginQueueStats.set(tmp);  }{    final IPlugIn<Journal,AbstractStatisticsCollector> tmp=new PlatformStatsPlugIn();    tmp.startService(Journal.this);    pluginPlatformStats.set(tmp);  }{    final IPlugIn<Journal,CounterSetHTTPD> tmp=new HttpPlugin();    tmp.startService(Journal.this);    pluginHttpd.set(tmp);  }  if (getPlatformStatisticsCollector() != null) {    final IPlugIn<Journal,?> tmp=new GangliaPlugIn();    tmp.startService(Journal.this);    if (tmp.isRunning()) {      pluginGanglia.set(tmp);    }  }}  }
class C{  public boolean jdbcCompliant(){  return true;}  }
class C{  public boolean rta(){  return soot.PhaseOptions.getBoolean(options,"rta");}  }
class C{  public void incDeltaMessagesSent(){  this._stats.incInt(_deltaMessagesSentId,1);}  }
class C{  protected KeySpec engineGetKeySpec(SecretKey key,Class<?> keySpec) throws InvalidKeySpecException {  try {    if ((key instanceof SecretKey) && (key.getAlgorithm().equalsIgnoreCase("DESede")) && (key.getFormat().equalsIgnoreCase("RAW"))) {      if (DESedeKeySpec.class.isAssignableFrom(keySpec)) {        return new DESedeKeySpec(key.getEncoded());      } else {        throw new InvalidKeySpecException("Inappropriate key specification");      }    } else {      throw new InvalidKeySpecException("Inappropriate key format/algorithm");    }  } catch (  InvalidKeyException e) {    throw new InvalidKeySpecException("Secret key has wrong size");  }}  }
class C{  private static void checkEquals(double actual,double expected,String label,double eps){  if (Math.abs(expected - actual) <= eps * Math.max(expected,actual)) {    System.out.println("PASS: " + label + ": Expected "+ expected+ " and you gave "+ actual);  } else {    System.out.println("FAIL: " + label + ": Expected "+ expected+ " and you gave "+ actual);  }}  }
class C{  public MovieSearchAndScrapeOptions(){}  }
class C{  public static void checkTraversability(Document document) throws CanonicalizationException {  if (!document.isSupported("Traversal","2.0")) {    Object exArgs[]={document.getImplementation().getClass().getName()};    throw new CanonicalizationException("c14n.Canonicalizer.TraversalNotSupported",exArgs);  }}  }
class C{  public SemPm(SemGraph graph){  if (graph == null) {    throw new NullPointerException("Graph must not be null.");  }  this.graph=graph;  this.graph.setShowErrorTerms(false);  initializeNodes(graph);  initializeVariableNodes();  initializeParams();}  }
class C{  public static Range<Short> valueOfShort(String str){  return Range.valueOf(str,null);}  }
class C{  public void processToken(String tok){  if (tok.isEmpty()) {    return;  }  beginProcessSubTokens();  if (splitTokenBy.isEmpty()) {    processSubToken(tok);  } else {    String[] subtoks=tok.split(splitTokenBy);    int i=0;    for (    String subtok : subtoks) {      if ((i == 0) && !validSubTokenKey(subtok)) {        break;      }      processSubToken(subtok);      i++;    }  }  endProcessSubTokens();}  }
class C{  public Iterator<E> iterator(){  return map.keySet().iterator();}  }
class C{  public boolean await() throws IgniteInterruptedCheckedException {  if (!finished) {synchronized (mux) {      while (!finished)       U.wait(mux);    }  }  return e == null;}  }
class C{  public IntVector(int blocksize,int increaseSize){  m_blocksize=increaseSize;  m_mapSize=blocksize;  m_map=new int[blocksize];}  }
class C{  public final void readModelDataFromFile(String sourceId) throws AdeException {  final File file=getRuntimeModelDataPath(sourceId);  final File tempFile=getTempFile(file);  if (m_runTimeModelDataFile != null) {    logger.warn("Runtime model data already read from " + m_runTimeModelDataFile.getAbsolutePath() + ".  The Runtime Model data from "+ file.getAbsolutePath()+ " will be ignored.");    return;  }  if (tempFile.exists()) {    final boolean deleted=tempFile.delete();    if (!deleted) {      final String msg="Reading RuntimeModelData: Runtime model data temporary file exists, this might mean a previous write failed:" + tempFile.getAbsolutePath() + ". Trying to delete this file but failed: "+ tempFile.getAbsolutePath();      logger.error(msg);    } else {      final String msg="Reading RuntimeModelData: Runtime model data temporary file exists, this might mean a previous write failed:" + tempFile.getAbsolutePath() + ". Successfully deleted this file: "+ tempFile.getAbsolutePath();      logger.info(msg);    }  }  if (!file.exists()) {    logger.warn("Reading RuntimeModelData: Runtime model data file does not exist.  Nothing to load: " + file.getAbsolutePath());    return;  }  boolean isReadingSuccessful=false;  final long currentTimestamp=System.currentTimeMillis();  int version=-1;  int numberOfEntries=-1;  DataInputStream dis=null;  FileInputStream fis;  String timeSinceLastRuntimeModelDataWriting="-1";  final List<Entry<String,Object>> tmpModelData=new ArrayList<Map.Entry<String,Object>>();  try {    fis=new FileInputStream(file);    dis=new DataInputStream(fis);    version=dis.readInt();    if (version > S_CURRENT_RUNTIME_MODEL_DATA_VERSION) {      final String msg="Reading RuntimeModelData: Runtime model data file is at version: " + version + ", but current code supports only version "+ S_CURRENT_RUNTIME_MODEL_DATA_VERSION+ ".  This file will not be used: "+ file.getAbsolutePath();      logger.warn(msg);      return;    }    long creationTimeOfRuntimeModelData=0;    if (version >= VERSION_2_TS) {      creationTimeOfRuntimeModelData=dis.readLong();    }    if (creationTimeOfRuntimeModelData == 0) {      timeSinceLastRuntimeModelDataWriting="N/A";    } else {      final long milliseconds=currentTimestamp - creationTimeOfRuntimeModelData;      final int seconds=(int)(milliseconds / DateTimeUtils.MILLIS_IN_SECOND) % EXCESS_SECONDS;      final int minutes=(int)((milliseconds / DateTimeUtils.MILLIS_IN_MINUTE) % EXCESS_MINUTES);      final int hours=(int)((milliseconds / DateTimeUtils.MILLIS_IN_HOUR) % DateTimeUtils.HOURS_IN_DAY);      timeSinceLastRuntimeModelDataWriting=String.format("%02d:%02d:%02d",hours,minutes,seconds);    }    numberOfEntries=dis.readInt();    for (int i=0; i < numberOfEntries; i++) {      final String modelObjectKey=dis.readUTF();      try {        final int sizeOfByteArray=dis.readInt();        final byte[] bArray=new byte[sizeOfByteArray];        dis.read(bArray);        final ByteArrayInputStream bais=new ByteArrayInputStream(bArray);        final ObjectInputStream ois=new ObjectInputStream(bais);        final Object data=ois.readObject();        final Entry<String,Object> entry=new SimpleEntry<String,Object>(modelObjectKey,data);        tmpModelData.add(entry);      } catch (      Exception e) {        throw new AdeUsageException("Reading RuntimeModelData: Error reading model object for: " + modelObjectKey + " at entry "+ i+ " from file: "+ file.getAbsolutePath(),e);      }    }    for (    Entry<String,Object> entry : tmpModelData) {      final String modelObjectKey=entry.getKey();      final Object data=entry.getValue();      Ade.getAde().getDataStore().models().setModelDataObject(modelObjectKey,data);    }    m_runTimeModelDataFile=file;    isReadingSuccessful=true;  } catch (  Throwable e) {    String msg="Reading of RuntimeModelData failed: " + file.getAbsoluteFile() + ".  RuntimeModelData read was version: "+ version+ ", current code support version "+ S_CURRENT_RUNTIME_MODEL_DATA_VERSION+ ".  There was "+ numberOfEntries+ " entries to be read"+ ".  It has been "+ timeSinceLastRuntimeModelDataWriting+ " since previous RuntimeModelData was written.";    logger.error(msg,e);    if (dis != null) {      try {        dis.close();        dis=null;      } catch (      IOException e1) {        msg="Reading of RuntimeModelData: Error closing DataInputStream for file: " + file.getAbsolutePath();        logger.error(msg,e1);      }    }    final File errorFile=getErrorFile(file);    boolean fileGone=true;    if (errorFile.exists()) {      fileGone=errorFile.delete();      if (!fileGone) {        msg="Reading of RuntimeModelData failed: keeping FFDC, but FFDC file for runtimeModelData already exists: " + errorFile.getAbsolutePath() + ".  Tried to delete this file but failed.";        logger.error(msg);      } else {        msg="Reading of RuntimeModelData failed: keeping FFDC, but FFDC file for runtimeModelData already exists: " + errorFile.getAbsolutePath() + ".  Successfully deleted this file.";        logger.info(msg);      }    }    if (fileGone) {      if (!file.renameTo(errorFile)) {        msg="Reading of RuntimeModelData: failed to rename ffdc file " + file.getName() + " to "+ errorFile.getName();        logger.error(msg);      } else {        msg="Reading of RuntimeModelData: successfully renamed " + file.getName() + " to "+ errorFile.getName();        logger.info(msg);      }    }  } finally {    if (dis != null) {      try {        dis.close();        dis=null;      } catch (      IOException e) {        final String msg="Reading of RuntimeModelData: Error closing DataInputStream for file: " + file.getAbsolutePath();        logger.error(msg,e);      }    }    if (isReadingSuccessful) {      logger.info("Reading of RuntimeModelData completed successfully: " + file.getAbsoluteFile() + ".  RuntimeModelData read was version: "+ version+ ", current code support version "+ S_CURRENT_RUNTIME_MODEL_DATA_VERSION+ ".  There was "+ numberOfEntries+ " entries to be read"+ ".  It has been "+ timeSinceLastRuntimeModelDataWriting+ " since previous RuntimeModelData was written.");    } else {      logger.warn("Reading of RuntimeModelData failed: " + file.getAbsoluteFile() + ".  It has been "+ timeSinceLastRuntimeModelDataWriting+ " since previous RuntimeModelData was written.");    }    if (file.exists()) {      final boolean deleted=file.delete();      if (!deleted) {        final String msg="Reading RuntimeModelData: Tried to delete the RuntimeModelData file but failed: " + file.getAbsolutePath();        logger.error(msg);      } else {        final String msg="Reading RuntimeModelData: Successfully deleted the RuntimeModelData file: " + file.getAbsolutePath();        logger.info(msg);      }    }  }}  }
class C{  public static double L_Hamming(int y[],int ypred[]){  int[][] aligned=align(y,ypred);  int[] yAligned=aligned[0];  int[] ypredAligned=aligned[1];  int L=yAligned.length;  if (L == 0) {    return Double.NaN;  }  double loss=0.0;  for (int j=0; j < L; j++) {    if (yAligned[j] != ypredAligned[j])     loss++;  }  return loss / (double)L;}  }
class C{  public boolean isStartEager(){  return isStartEager;}  }
class C{  public NonUndoableEdit(){}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mPm.cpuBoost(1500000);  mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX);  mScrollerY.fling(startY,velocityY,minY,maxY,overY);}  }
class C{  public static byte[] longToNetworkByteOrderArray(long addr){  return new byte[]{(byte)(addr >>> 24),(byte)(addr >>> 16),(byte)(addr >>> 8),(byte)addr};}  }
class C{  @Nullable public <K>ClusterNode mapKeyToNode(@Nullable String cacheName,K key,AffinityTopologyVersion topVer) throws IgniteCheckedException {  Map<ClusterNode,Collection<K>> map=keysToNodes(cacheName,F.asList(key),topVer);  return map != null ? F.first(map.keySet()) : null;}  }
class C{  public boolean onTouchEvent(MotionEvent event){  if (mWindow.shouldCloseOnTouch(this,event)) {    finish();    return true;  }  return false;}  }
class C{  public String CVResultsString() throws Exception {  StringBuffer CvString=new StringBuffer();  if ((m_subsetResults == null && m_rankResults == null) || (m_trainInstances == null)) {    throw new Exception("Attribute selection has not been performed yet!");  }  int fieldWidth=(int)(Math.log(m_trainInstances.numAttributes()) + 1.0);  CvString.append("\n\n=== Attribute selection " + m_numFolds + " fold cross-validation ");  if (!(m_ASEvaluator instanceof UnsupervisedSubsetEvaluator) && !(m_ASEvaluator instanceof UnsupervisedAttributeEvaluator) && (m_trainInstances.classAttribute().isNominal())) {    CvString.append("(stratified), seed: ");    CvString.append(m_seed + " ===\n\n");  } else {    CvString.append("seed: " + m_seed + " ===\n\n");  }  if ((m_searchMethod instanceof RankedOutputSearch) && (m_doRank == true)) {    CvString.append("average merit      average rank  attribute\n");    for (int i=0; i < m_rankResults[0].length; i++) {      m_rankResults[0][i]/=m_numFolds;      double var=m_rankResults[0][i] * m_rankResults[0][i] * m_numFolds;      var=(m_rankResults[2][i] - var);      var/=m_numFolds;      if (var <= 0.0) {        var=0.0;        m_rankResults[2][i]=0;      } else {        m_rankResults[2][i]=Math.sqrt(var);      }      m_rankResults[1][i]/=m_numFolds;      var=m_rankResults[1][i] * m_rankResults[1][i] * m_numFolds;      var=(m_rankResults[3][i] - var);      var/=m_numFolds;      if (var <= 0.0) {        var=0.0;        m_rankResults[3][i]=0;      } else {        m_rankResults[3][i]=Math.sqrt(var);      }    }    int[] s=Utils.sort(m_rankResults[1]);    for (    int element : s) {      if (m_rankResults[1][element] > 0) {        CvString.append(Utils.doubleToString(m_rankResults[0][element],6,3) + " +-" + Utils.doubleToString(m_rankResults[2][element],6,3)+ "   "+ Utils.doubleToString(m_rankResults[1][element],fieldWidth + 2,1)+ " +-"+ Utils.doubleToString(m_rankResults[3][element],5,2)+ "  "+ Utils.doubleToString((element + 1),fieldWidth,0)+ " "+ m_trainInstances.attribute(element).name()+ "\n");      }    }  } else {    CvString.append("number of folds (%)  attribute\n");    for (int i=0; i < m_subsetResults.length; i++) {      if ((m_ASEvaluator instanceof UnsupervisedSubsetEvaluator) || (i != m_trainInstances.classIndex())) {        CvString.append(Utils.doubleToString(m_subsetResults[i],12,0) + "(" + Utils.doubleToString((m_subsetResults[i] / m_numFolds * 100.0),3,0)+ " %)  "+ Utils.doubleToString((i + 1),fieldWidth,0)+ " "+ m_trainInstances.attribute(i).name()+ "\n");      }    }  }  return CvString.toString();}  }
class C{  public void addItem(Number value,Number lower,Number upper,Comparable rowKey,Comparable columnKey){  IntervalDataItem item=new IntervalDataItem(value,lower,upper);  this.data.addObject(item,rowKey,columnKey);  fireDatasetChanged();}  }
class C{  public CDialogEditEdgeComment(final JFrame parent,final INaviEdge edge){  super(parent,"Edit Edge Comments",true);  Preconditions.checkNotNull(edge,"IE02386: edge argument can not be null");  new CDialogEscaper(this);  setLayout(new BorderLayout());  add(new CEdgeCommentsPanel(edge),BorderLayout.CENTER);  add(new OKButtonPanel(this),BorderLayout.SOUTH);  final Dimension dim=getPreferredSize();  if (dim.height < 300) {    dim.height=300;  }  dim.width=600;  setPreferredSize(dim);  setMinimumSize(dim);  pack();}  }
class C{  public void resetCount(){  msgCnt.set(0);}  }
class C{  @Override protected void initData(){  try {    System.loadLibrary("stackblur");    NativeBlurProcess.isLoadLibraryOk.set(true);    Log.i("InternalLoadSoActivity","loadLibrary success!");  } catch (  Throwable throwable) {    Log.i("InternalLoadSoActivity","loadLibrary error!" + throwable);  }}  }
class C{  public static boolean isUuidPresent(ParcelUuid[] uuidArray,ParcelUuid uuid){  if ((uuidArray == null || uuidArray.length == 0) && uuid == null)   return true;  if (uuidArray == null)   return false;  for (  ParcelUuid element : uuidArray) {    if (element.equals(uuid))     return true;  }  return false;}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  public static ComponentUI createUI(JComponent b){  return new MotifSliderUI((JSlider)b);}  }
class C{  public boolean showGuidelines(){  return !(mEdges.width() < 100 || mEdges.height() < 100);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.229 -0500",hash_original_method="BF5E846D1EF3BCCEA205827104DDB3E8",hash_generated_method="EE06CAAE9D24DA5976CF89E841300FAB") public void drawColor(int color){  addTaint(color);}  }
class C{  @Override protected void determineLabelPositions(DrawContext dc){  LatLon center=this.circle.getCenter();  this.labels.get(0).setPosition(new Position(center,0));}  }
class C{  public Packet(Packet other){  if (other.isSetMessageType()) {    this.messageType=other.messageType;  }  if (other.isSetSwPortTuple()) {    this.swPortTuple=new SwitchPortTuple(other.swPortTuple);  }  if (other.isSetData()) {    this.data=org.apache.thrift.TBaseHelper.copyBinary(other.data);    ;  }}  }
class C{  public static void dumpLocks(Connection conn){  Statement stmt=null;  try {    String sql="select pg_class.relname,pg_locks.* from pg_class,pg_locks where pg_class.relfilenode=pg_locks.relation order by 1";    stmt=conn.createStatement();    ResultSet rs=stmt.executeQuery(sql);    int cnt=rs.getMetaData().getColumnCount();    System.out.println();    while (rs.next()) {      for (int i=0; i < cnt; i++) {        Object value=rs.getObject(i + 1);        if (i > 0)         System.out.print(", ");        System.out.print(value != null ? value.toString() : "");      }      System.out.println();    }    System.out.println();  } catch (  Exception e) {  } finally {    try {      if (stmt != null)       stmt.close();    } catch (    Exception e) {    }  }}  }
class C{  private boolean queueRequestInternal(final Operation op){  boolean isPaused=false;  if (op.getAction() != Action.GET && op.getAction() != Action.OPTIONS) {synchronized (this.context) {      if (this.context.processingStage == ProcessingStage.PAUSED) {        isPaused=true;      } else       if (this.context.processingStage == ProcessingStage.STOPPED) {      } else       if ((this.context.isUpdateActive || this.context.getActiveCount != 0)) {        if (op.isSynchronizeOwner()) {          if (this.context.synchQueue == null) {            this.context.synchQueue=OperationQueue.createFifo(Service.SYNCH_QUEUE_DEFAULT_LIMIT);          }          if (!this.context.synchQueue.offer(op)) {            getHost().failRequestLimitExceeded(op);          }        } else         if (!this.context.operationQueue.offer(op)) {          getHost().failRequestLimitExceeded(op);        }        return true;      } else {        this.context.isUpdateActive=true;      }    }  } else {    if (op.getAction() == Action.OPTIONS) {      return false;    } else     if (hasOption(ServiceOption.CONCURRENT_GET_HANDLING)) {      return false;    } else {synchronized (this.context) {        if (this.context.processingStage == ProcessingStage.PAUSED) {          isPaused=true;        } else         if (this.context.processingStage == ProcessingStage.STOPPED) {        } else         if (this.context.isUpdateActive) {          if (!this.context.operationQueue.offer(op)) {            getHost().failRequestLimitExceeded(op);          }          return true;        } else {          this.context.getActiveCount++;        }      }    }  }  if (isPaused && !getHost().isStopping()) {    logWarning("Service in stage %s, retrying request",this.context.processingStage);    getHost().retryPauseOrOnDemandLoadConflict(op,false);    return true;  }  if (checkServiceStopped(op,false)) {    return true;  }  return false;}  }
class C{  public MetricFileReader(File file) throws FileNotFoundException {  super(file,NUMBER_OF_METRICS);  setSupressExceptions(true);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void pause(){  animation.pause();}  }
class C{  public void lerp(Vector2 dp,double da,double alpha){  this.translate(dp.x * alpha,dp.y * alpha);  this.rotate(da * alpha,this.getTranslationX(),this.getTranslationY());}  }
class C{  public Vector multiply(Permutation p){  int[] pVec=p.getVector();  if (length != pVec.length) {    throw new ArithmeticException("permutation size and vector size mismatch");  }  int[] result=new int[length];  for (int i=0; i < pVec.length; i++) {    result[i]=vector[pVec[i]];  }  return new GF2mVector(field,result);}  }
class C{  public void applyCamera(GL2 gl){  gl.glMatrixMode(GL2.GL_PROJECTION);  gl.glLoadIdentity();  glu.gluPerspective(45f,width / (float)height,0.f,10.f);  eye[0]=(float)Math.sin(theta) * 2.f;  eye[1]=.5f;  eye[2]=(float)Math.cos(theta) * 2.f;  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);  gl.glMatrixMode(GL2.GL_MODELVIEW);  gl.glLoadIdentity();  gl.glViewport(0,0,width,height);}  }
class C{  public static int toIntValue(Object decoded){  return new BigInteger((byte[])decoded).intValue();}  }
class C{  public ProjectDescription createProjectDescription(){  ProjectDescriptionImpl projectDescription=new ProjectDescriptionImpl();  return projectDescription;}  }
class C{  public boolean isLevel(){  return level;}  }
class C{  public StretchedVertex(Coordinate vertexPt,Coordinate[] parentLine,int parentIndex,LineSegment nearSeg){  this.vertexPt=vertexPt;  this.parentLine=parentLine;  this.parentIndex=parentIndex;  this.nearSeg=nearSeg;}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public void clear(){  size=0;  removeEntries();}  }
class C{  public void updateTime(){  setTime(time + timeStep);}  }
class C{  private boolean isExpectedThread(Thread thread){  final String threadName=thread.getName();  final ThreadGroup group=thread.getThreadGroup();  final boolean isSystemThread=group != null && "system".equals(group.getName());  final String javaVendor=System.getProperty("java.vendor");  if (threadName.contains("SunPKCS11")) {    return true;  } else   if (threadName.contains("Attach Listener")) {    return true;  } else   if ((javaVendor.contains("IBM") || isSystemThread) && threadName.equals("process reaper")) {    return true;  } else   if ((javaVendor.contains("IBM") || isSystemThread) && threadName.equals("ClassCache Reaper")) {    return true;  } else   if (javaVendor.contains("IBM") && threadName.equals("MemoryPoolMXBean notification dispatcher")) {    return true;  } else   if (threadName.contains("globalEventExecutor")) {    return true;  } else   if (threadName.contains("threadDeathWatcher")) {    return true;  } else   if (threadName.contains("netty-threads")) {    return true;  } else   if (threadName.contains("threadDeathWatcher")) {    return true;  } else   if (threadName.contains("Abandoned connection cleanup thread")) {    return true;  } else   if (threadName.contains("hawtdispatch")) {    return true;  } else {    for (    StackTraceElement element : thread.getStackTrace()) {      if (element.getClassName().contains("org.jboss.byteman.agent.TransformListener")) {        return true;      }    }    for (    String known : knownThreads) {      if (threadName.contains(known)) {        return true;      }    }    return false;  }}  }
class C{  private <T extends DataObject>int queryAndPrintRecords(List<URI> ids,Class<T> clazz) throws Exception {  Iterator<T> objects;  BeanInfo bInfo;  int countLimit=0;  int countAll=0;  String input;  BufferedReader buf=new BufferedReader(new InputStreamReader(System.in));  try {    objects=_dbClient.queryIterativeObjects(clazz,ids);    bInfo=Introspector.getBeanInfo(clazz);    while (objects.hasNext()) {      T object=(T)objects.next();      printBeanProperties(bInfo.getPropertyDescriptors(),object);      countLimit++;      countAll++;      if (!turnOnLimit || countLimit != listLimit) {        continue;      }      System.out.println(String.format("Read %s rows ",countAll));      do {        System.out.println("\nPress 'ENTER' to continue or 'q<ENTER>' to quit...");        input=buf.readLine();        if (input.isEmpty()) {          countLimit=0;          break;        }        if (input.equalsIgnoreCase(QUITCHAR)) {          return countAll;        }      } while (!input.isEmpty());    }  } catch (  DatabaseException ex) {    log.error("Error querying from db: " + ex);    System.out.println("Error querying from db: " + ex);    throw ex;  }catch (  IntrospectionException ex) {    log.error("Unexpected exception getting bean info",ex);    throw new RuntimeException("Unexpected exception getting bean info",ex);  } finally {    buf.close();  }  return countAll;}  }
class C{  public static RegisterSpec makeLocalOptional(int reg,TypeBearer type,LocalItem local){  return intern(reg,type,local);}  }
class C{  public UF10(){  this(30);}  }
class C{  protected boolean typeSupported(String type){  for (  String key : mimeMap.keySet()) {    if (mimeMap.get(key).equals(type)) {      if (fileTypes.contains(key))       return true;    }  }  return false;}  }
class C{  private void scrollToChild(View child){  child.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(child,mTempRect);  scrollToChildRect(mTempRect,true);}  }
class C{  public boolean isValidResponseCode(){  return (_flags & DNSConstants.FLAGS_RCODE) == 0;}  }
class C{  public boolean isMax(){  return value.isMax();}  }
class C{  protected void verifyTransformers(Instrumentation manager){  File f=new File(System.getProperty("test.classes","."),redefinedClassName + ".class");  System.out.println("Reading test class from " + f);  try {    InputStream redefineStream=new FileInputStream(f);    byte[] bytes=NamedBuffer.loadBufferFromStream(redefineStream);    ClassDefinition cd=new ClassDefinition(DummyClass.class,bytes);    fInst.redefineClasses(new ClassDefinition[]{cd});    verbosePrint("verifyTransformers redefined " + redefinedClassName);  } catch (  IOException e) {    fail("Could not load the class: " + redefinedClassName);  }catch (  ClassNotFoundException e) {    fail("Could not find the class: " + redefinedClassName);  }catch (  UnmodifiableClassException e) {    fail("Could not modify the class: " + redefinedClassName);  }  assertTrue(fDelayedFailure,fDelayedFailure == null);  assertEquals("The number of transformers that were run does not match the expected number added to manager",fTransformers.size(),fTransformerIndex);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens03.class,args);}  }
class C{  public void updateLocation(Polygon p){  if (region != null) {    region.residents.remove(this);    region.soc="UNOCCUPIED";  }  region=p;  region.residents.add(this);  region.soc=color;  numMoves++;}  }
class C{  private static List<ExpressionDescriptor> listDescriptors(){  List<ExpressionDescriptor> descriptors=new LinkedList<>();  descriptors.add(new NewExpressionDescriptor());  descriptors.add(new TSumExpressionDescriptor());  descriptors.add(new TProductExpressionDescriptor());  descriptors.add(new NewExpressionDescriptor2());  descriptors.add(new TSumExpressionDescriptor2());  descriptors.add(new TProductExpressionDescriptor2());  descriptors.add(new AdditionExpressionDescriptor());  descriptors.add(new SubtractionExpressionDescriptor());  descriptors.add(new MultiplicationExpressionDescriptor());  descriptors.add(new DivisionExpressionDescriptor());  descriptors.add(new PowExpressionDescriptor());  descriptors.add(new PowExpressionDescriptor2());  descriptors.add(new ExpExpressionDescriptor());  descriptors.add(new SquareRootExpressionDescriptor());  descriptors.add(new CoshExpressionDescriptor());  descriptors.add(new SinhExpressionDescriptor());  descriptors.add(new TanhExpressionDescriptor());  descriptors.add(new CosExpressionDescriptor());  descriptors.add(new SinExpressionDescriptor());  descriptors.add(new TanExpressionDescriptor());  descriptors.add(new AcosExpressionDescriptor());  descriptors.add(new AsinExpressionDescriptor());  descriptors.add(new AtanExpressionDescriptor());  descriptors.add(new LogisticExpressionDescriptor());  descriptors.add(new NaturalLogExpressionDescriptor());  descriptors.add(new Log10ExpressionDescriptor());  descriptors.add(new RoundExpressionDescriptor());  descriptors.add(new CeilExpressionDescriptor());  descriptors.add(new FloorExpressionDescriptor());  descriptors.add(new AbsoluteValueExpressionDescriptor());  descriptors.add(new RandomExpressionDescriptor());  descriptors.add(new MaxExpressionDescriptor());  descriptors.add(new MinExpressionDescriptor());  descriptors.add(new SignumExpressionDescriptor());  descriptors.add(new AndExpressionDescriptor());  descriptors.add(new OrExpressionDescriptor());  descriptors.add(new XOrExpressionDescriptor());  descriptors.add(new LessThanOrEqualExpressionDescriptor());  descriptors.add(new LessThanExpressionDescriptor());  descriptors.add(new EqualsExpressionDescriptor());  descriptors.add(new GreaterThanOrEqualExpressionDescriptor());  descriptors.add(new GreaterThanExpressionDescriptor());  descriptors.add(new IfExpressionDescriptor());  descriptors.add(new BetaExpressionDescriptor());  descriptors.add(new CauchyExpressionDescriptor());  descriptors.add(new ChiSquareExpressionDescriptor());  descriptors.add(new ExponentialExpressionDescriptor());  descriptors.add(new FExpressionDescriptor());  descriptors.add(new GammaExpressionDescriptor());  descriptors.add(new GumbelExpressionDescriptor());  descriptors.add(new LaplaceExpressionDescriptor());  descriptors.add(new LevyExpressionDescriptor());  descriptors.add(new LogNormalExpressionDescriptor());  descriptors.add(new NakagamiExpressionDescriptor());  descriptors.add(new NormalExpressionDescriptor());  descriptors.add(new NExpressionDescriptor());  descriptors.add(new ParetoExpressionDescriptor());  descriptors.add(new PoissonExpressionDescriptor());  descriptors.add(new SplitExpressionDescriptor());  descriptors.add(new StudentTExpressionDescriptor());  descriptors.add(new TriangularExpressionDescriptor());  descriptors.add(new UniformExpressionDescriptor());  descriptors.add(new UExpressionDescriptor());  descriptors.add(new WeibullExpressionDescriptor());  descriptors.add(new IndicatorExpressionDescriptor());  descriptors.add(new TruncNormalExpressionDescriptor());  descriptors.add(new DiscreteExpressionDescriptor());  descriptors.add(new MixtureDescriptor());  descriptors.add(new DiscErrorExpressionDescriptor());  descriptors.add(new SwitchExpressionDescriptor());  return descriptors;}  }
class C{  public JSONStringer endObject() throws JSONException {  return close(Scope.EMPTY_OBJECT,Scope.NONEMPTY_OBJECT,"}");}  }
class C{  public TorDiscovery(String[] hostNames,NetworkParameters netParams,TorClient torClient){  this.hostNames=hostNames;  this.netParams=netParams;  this.torClient=torClient;  this.pathChooser=CircuitPathChooser.create(torClient.getConfig(),torClient.getDirectory());}  }
class C{  public Signature(X509Certificate signingCertificate,CertificateLocation location){  assert signingCertificate != null;  assert location != null;  this.certificate=signingCertificate;  this.location=location;}  }
class C{  public boolean isMenuComponent(Component c){  if (c == this)   return true;  if (c instanceof JPopupMenu) {    JPopupMenu comp=(JPopupMenu)c;    if (comp == this.getPopupMenu())     return true;  }  int ncomponents=this.getMenuComponentCount();  Component[] component=this.getMenuComponents();  for (int i=0; i < ncomponents; i++) {    Component comp=component[i];    if (comp == c)     return true;    if (comp instanceof JMenu) {      JMenu subMenu=(JMenu)comp;      if (subMenu.isMenuComponent(c))       return true;    }  }  return false;}  }
class C{  public E poll(){  if (isEmpty()) {    return null;  }  E result=elements[0];  removeAt(0);  return result;}  }
class C{  @Override public boolean equals(Object that){  if (!(that instanceof S2LatLngRect)) {    return false;  }  S2LatLngRect otherRect=(S2LatLngRect)that;  return lat().equals(otherRect.lat()) && lng().equals(otherRect.lng());}  }
class C{  public VerletParticle2D(VerletParticle2D p){  this(p.x,p.y,p.weight);  isLocked=p.isLocked;}  }
class C{  public CheckBoxMenuItemPainter(Which state){  super(MenuItemPainter.Which.BACKGROUND_ENABLED);  this.state=state;switch (state) {case BACKGROUND_DISABLED:case BACKGROUND_ENABLED:case BACKGROUND_MOUSEOVER:case BACKGROUND_SELECTED_MOUSEOVER:    this.ctx=new PaintContext(CacheMode.NO_CACHING);  break;default :this.ctx=new PaintContext(CacheMode.FIXED_SIZES);break;}}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  @SuppressWarnings("deprecation") public int center(final Region region,final Pattern pattern) throws MaxChangedBlocksException {  checkNotNull(region);  checkNotNull(pattern);  final Vector center=region.getCenter();  final Region centerRegion=new CuboidRegion(this.getWorld(),center.floor(),center.ceil());  return this.setBlocks(centerRegion,pattern);}  }
class C{  public HashMutableDirectedGraph triviallyConservativeInfoFlowAnalysis(SootMethod sm){  HashSet<EquivalentValue> fieldsStaticsParamsAccessed=new HashSet<EquivalentValue>();  for (int i=0; i < sm.getParameterCount(); i++) {    EquivalentValue parameterRefEqVal=InfoFlowAnalysis.getNodeForParameterRef(sm,i);    fieldsStaticsParamsAccessed.add(parameterRefEqVal);  }  for (Iterator it=sm.getDeclaringClass().getFields().iterator(); it.hasNext(); ) {    SootField sf=(SootField)it.next();    if (sf.isStatic() || !sm.isStatic()) {      EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,sf);      fieldsStaticsParamsAccessed.add(fieldRefEqVal);    }  }  SootClass superclass=sm.getDeclaringClass();  if (superclass.hasSuperclass())   superclass=sm.getDeclaringClass().getSuperclass();  while (superclass.hasSuperclass()) {    Iterator scFieldsIt=superclass.getFields().iterator();    while (scFieldsIt.hasNext()) {      SootField scField=(SootField)scFieldsIt.next();      if (scField.isStatic() || !sm.isStatic()) {        EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,scField);        fieldsStaticsParamsAccessed.add(fieldRefEqVal);      }    }    superclass=superclass.getSuperclass();  }  HashMutableDirectedGraph dataFlowGraph=new MemoryEfficientGraph();  Iterator<EquivalentValue> accessedIt1=fieldsStaticsParamsAccessed.iterator();  while (accessedIt1.hasNext()) {    Object o=accessedIt1.next();    dataFlowGraph.addNode(o);  }  ParameterRef returnValueRef=null;  if (sm.getReturnType() != VoidType.v()) {    returnValueRef=new ParameterRef(sm.getReturnType(),-1);    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForReturnRef(sm));  }  ThisRef thisRef=null;  if (!sm.isStatic()) {    thisRef=new ThisRef(sootClass.getType());    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForThisRef(sm));    fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForThisRef(sm));  }  accessedIt1=fieldsStaticsParamsAccessed.iterator();  while (accessedIt1.hasNext()) {    Object r=accessedIt1.next();    Ref rRef=(Ref)((EquivalentValue)r).getValue();    if (!(rRef.getType() instanceof RefLikeType) && !dfa.includesPrimitiveInfoFlow())     continue;    Iterator<EquivalentValue> accessedIt2=fieldsStaticsParamsAccessed.iterator();    while (accessedIt2.hasNext()) {      Object s=accessedIt2.next();      Ref sRef=(Ref)((EquivalentValue)s).getValue();      if (rRef instanceof ThisRef && sRef instanceof InstanceFieldRef)       ; else       if (sRef instanceof ThisRef && rRef instanceof InstanceFieldRef)       ; else       if (sRef.getType() instanceof RefLikeType)       dataFlowGraph.addEdge(r,s);    }    if (returnValueRef != null && (returnValueRef.getType() instanceof RefLikeType || dfa.includesPrimitiveInfoFlow()))     dataFlowGraph.addEdge(r,InfoFlowAnalysis.getNodeForReturnRef(sm));  }  return dataFlowGraph;}  }
class C{  public static byte convertUint8toByte(char uint8){  if (uint8 > Byte.MAX_VALUE - Byte.MIN_VALUE) {    throw new RuntimeException("Out of Boundary");  }  return (byte)uint8;}  }
class C{  @Override public void start() throws IgniteException {  try {    client=createClient(cfg);  } catch (  GridClientException e) {    throw new IgniteException("Failed to initialise embedded client.",e);  }  GridNioServerListener<GridClientMessage> lsnr;  try {    Class<?> cls=Class.forName(ENT_NIO_LSNR_CLS);    Constructor<?> cons=cls.getDeclaredConstructor(IgniteLogger.class,GridRouterClientImpl.class);    cons.setAccessible(true);    lsnr=(GridNioServerListener<GridClientMessage>)cons.newInstance(log,client);  } catch (  ClassNotFoundException ignored) {    lsnr=new GridTcpRouterNioListenerOsImpl(log,client);  }catch (  NoSuchMethodException|IllegalAccessException|InstantiationException|InvocationTargetException e) {    throw new IgniteException("Failed to create NIO listener.",e);  }  parser=new GridTcpRouterNioParser();  final InetAddress hostAddr;  try {    hostAddr=InetAddress.getByName(cfg.getHost());  } catch (  UnknownHostException e) {    throw new IgniteException("Failed to resolve grid address for configured host: " + cfg.getHost(),e);  }  SSLContext sslCtx;  try {    GridSslContextFactory sslCtxFactory=cfg.getSslContextFactory();    sslCtx=sslCtxFactory == null ? null : sslCtxFactory.createSslContext();  } catch (  SSLException e) {    throw new IgniteException("Failed to create SSL context.",e);  }  for (int port=cfg.getPort(), last=port + cfg.getPortRange(); port <= last; port++) {    if (startTcpServer(hostAddr,port,lsnr,parser,cfg.isNoDelay(),sslCtx,cfg.isSslClientAuth(),cfg.isSslClientAuth())) {      if (log.isInfoEnabled())       log.info("TCP router successfully started for endpoint: " + hostAddr.getHostAddress() + ":"+ port);      bindPort=port;      bindHost=hostAddr.getHostName();      break;    } else     U.warn(log,"TCP REST router failed to start on endpoint: " + hostAddr.getHostAddress() + ":"+ port+ ". Will try next port within allowed port range.");  }  if (bindPort == 0)   throw new IgniteException("Failed to bind TCP router server (possibly all ports in range " + "are in use) [firstPort=" + cfg.getPort() + ", lastPort="+ (cfg.getPort() + cfg.getPortRange())+ ", addr="+ hostAddr+ ']');  try {    ObjectName objName=U.registerMBean(ManagementFactory.getPlatformMBeanServer(),"Router","TCP Router " + id,getClass().getSimpleName(),this,GridTcpRouterMBean.class);    if (log.isDebugEnabled())     log.debug("Registered MBean: " + objName);    mbeanName=objName;  } catch (  JMException e) {    U.error(log,"Failed to register MBean.",e);  }}  }
class C{  public void extractProvince(String inputFolder,List<String> codes){  ComprehensivePopulationReader cr=new ComprehensivePopulationReader();  cr.parse(inputFolder);  LOG.info("Evaluating households in province code(s)...");  Counter householdCounter=new Counter("   households evaluated # ");  for (  Id id : cr.getScenario().getHouseholds().getHouseholds().keySet()) {    String thisHouseholdDistrictCode=(String)cr.getScenario().getHouseholds().getHouseholdAttributes().getAttribute(id.toString(),"districtCode");    boolean inArea=false;    int index=0;    while (!inArea && index < codes.size()) {      if (thisHouseholdDistrictCode.startsWith(codes.get(index++))) {        inArea=true;      }    }    if (inArea) {      Household hh=cr.getScenario().getHouseholds().getHouseholds().get(id);      sc.getHouseholds().getHouseholds().put(id,hh);      String[] attributes_household={"householdSize","population","housingType","mainDwellingType","municipalCode","districtCode","provinceCode"};      for (      String attribute : attributes_household) {        Object currentAttribute=cr.getScenario().getHouseholds().getHouseholdAttributes().getAttribute(id.toString(),attribute);        if (currentAttribute != null) {          sc.getHouseholds().getHouseholdAttributes().putAttribute(id.toString(),attribute,currentAttribute);        }      }      for (      Id memberId : hh.getMemberIds()) {        Person p=cr.getScenario().getPopulation().getPersons().get(memberId);        sc.getPopulation().addPerson(p);        String[] attributes_person={"race","relationship","school","income"};        for (        String attribute : attributes_person) {          Object currentAttribute=cr.getScenario().getPopulation().getPersonAttributes().getAttribute(memberId.toString(),attribute);          if (currentAttribute != null) {            sc.getPopulation().getPersonAttributes().putAttribute(memberId.toString(),attribute,currentAttribute);          }        }      }    }    householdCounter.incCounter();  }  householdCounter.printCounter();}  }
class C{  @Override protected void onPreExecute(){  super.onPreExecute();  App.chats.get(name).add(new ChatMessage(false,chatText.getText().toString()));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TDoubleArrayList(int capacity){  _data=new double[capacity];  _pos=0;}  }
class C{  public static long reverseBits(final short value){  final int b0=JBBPUtils.reverseBitsInByte((byte)value) & 0xFF;  final int b1=JBBPUtils.reverseBitsInByte((byte)(value >> 8)) & 0xFF;  return (long)((short)(b0 << 8) | (short)b1);}  }
class C{  public URIMetadataNode makeResultEntry(final Segment indexSegment,SeedDB peers,final TextSnippet textSnippet){  this.removeFields(CollectionSchema.text_t.getSolrFieldName());  this.alternative_urlstring=null;  this.alternative_urlname=null;  this.textSnippet=textSnippet;  final String host=this.url().getHost();  if (host != null && host.endsWith(".yacyh")) {    int p=host.indexOf('.');    final String hash=Seed.hexHash2b64Hash(host.substring(p + 1,host.length() - 6));    final Seed seed=peers.getConnected(hash);    final String path=this.url().getFile();    String address=null;    if ((seed == null) || ((address=seed.getPublicAddress(seed.getIP())) == null)) {      try {        if (indexSegment.termIndex() != null)         indexSegment.termIndex().remove(Word.words2hashesHandles(Tokenizer.getWords((path.replace('?',' ') + " " + this.dc_title()),null).keySet()),this.hash());      } catch (      final IOException e) {        ConcurrentLog.logException(e);      }      indexSegment.fulltext().remove(this.hash());    } else {      this.alternative_urlstring="http://" + address + "/"+ host.substring(0,p)+ path;      this.alternative_urlname="http://" + seed.getName() + ".yacy"+ path;      if ((p=this.alternative_urlname.indexOf('?')) > 0)       this.alternative_urlname=this.alternative_urlname.substring(0,p);    }  }  return this;}  }
class C{  public void dispose(){  LSettingsGui.removeAllBoundedScl(spinner);}  }
class C{  protected boolean readDataRecord(int lon_index){  try {    if (binFile == null) {      if (!reopen()) {        return false;      }    }    binFile.seek(UHL_SIZE + DSI_SIZE + ACC_SIZE+ (lon_index * (12 + (2 * uhl.num_lat_points))));    binFile.read();    binFile.skipBytes(3);    binFile.readShort();    binFile.readShort();    elevations[lon_index]=new short[uhl.num_lat_points];    for (int j=0; j < uhl.num_lat_points; j++) {      elevations[lon_index][j]=binFile.readShortData();    }  } catch (  IOException e3) {    Debug.error("DTEDFrame.RDR: Error reading file.");    e3.printStackTrace();    elevations[lon_index]=null;    return false;  }catch (  FormatException f) {    Debug.error("DTEDFrame.RDR: File IO Format error!");    elevations[lon_index]=null;    return false;  }  return true;}  }
class C{  public ProcessExecutor(){}  }
class C{  public void add(StepSingle stepSingle){  checkDumpStep();  stepSingle.index=currentLevel;  stepSingle.parent=parentLevel;  currentLevel++;  process(stepSingle);}  }
class C{  private boolean dispatchLongPress(View view,int position,long id){  boolean handled=false;  if (mOnItemLongClickListener != null) {    handled=mOnItemLongClickListener.onItemLongClick(this,mDownTouchView,mDownTouchPosition,id);  }  if (!handled) {    mContextMenuInfo=new AdapterContextMenuInfo(view,position,id);    handled=super.showContextMenuForChild(this);  }  if (handled) {    performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);  }  return handled;}  }
class C{  public final void lazySet(double newValue){  set(newValue);}  }
class C{  private void destroyBeans(Map<String,Object> viewMap,Map<String,ViewScopeContextObject> contextMap){  ArrayList<String> removalNameList=new ArrayList<>();  if (contextMap != null) {    for (    Map.Entry<String,ViewScopeContextObject> entry : contextMap.entrySet()) {      String passivationCapableId=entry.getKey();      Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId);      ViewScopeContextObject contextObject=entry.getValue();      CreationalContext creationalContext=beanManager.createCreationalContext(contextual);      contextual.destroy(viewMap.get(contextObject.getName()),creationalContext);      removalNameList.add(contextObject.getName());    }    Iterator<String> removalNames=removalNameList.iterator();    while (removalNames.hasNext()) {      String name=removalNames.next();      viewMap.remove(name);    }    contextMap.clear();  }}  }
class C{  public static <T extends MessageNano>String print(T message){  if (message == null) {    return "";  }  StringBuffer buf=new StringBuffer();  try {    print(null,message,new StringBuffer(),buf);  } catch (  IllegalAccessException e) {    return "Error printing proto: " + e.getMessage();  }catch (  InvocationTargetException e) {    return "Error printing proto: " + e.getMessage();  }  return buf.toString();}  }
class C{  public InMemoryDocument(final InputStream inputStream,final String name,final MimeType mimeType) throws DSSException {  this(DSSUtils.toByteArray(inputStream),name,mimeType);}  }
class C{  public ObjectId(){  _time=(int)(System.currentTimeMillis() / 1000);  _machine=_genmachine;  _inc=_nextInc.getAndIncrement();  _new=true;}  }
class C{  private void updateRegionOnMembers(String regionObjectName,String regionFullPath,Cluster.Region region) throws IOException {  try {    List<String> memberNamesTemp=region.getMemberName();    ArrayList<String> memberNames=new ArrayList<String>(memberNamesTemp);    List<Cluster.RegionOnMember> regionOnMemberList=new ArrayList<Cluster.RegionOnMember>();    List<Cluster.RegionOnMember> regionOnMemberListNew=new ArrayList<Cluster.RegionOnMember>();    Cluster.RegionOnMember[] regionOnMemberNames=region.getRegionOnMembers();    if ((regionOnMemberNames != null) && (regionOnMemberNames.length > 0)) {      regionOnMemberList=new ArrayList<Cluster.RegionOnMember>(Arrays.asList(regionOnMemberNames));    }    LOGGER.fine("updateRegionOnMembers : # regionOnMembers objects in region = " + regionOnMemberList.size());    for (    Cluster.RegionOnMember anRom : regionOnMemberList) {      for (      String memberName : memberNames) {        if (anRom.getMemberName().equals(memberName)) {          regionOnMemberListNew.add(anRom);          LOGGER.fine("updateRegionOnMembers : Processing existing Member name = " + anRom.getMemberName());          String objectNameROM=PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObjectName + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER+ anRom.getMemberName();          ObjectName regionOnMemberMBean=new ObjectName(objectNameROM);          LOGGER.fine("updateRegionOnMembers : Object name = " + regionOnMemberMBean.getCanonicalName());          AttributeList attributeList=this.mbs.getAttributes(regionOnMemberMBean,PulseConstants.REGION_ON_MEMBER_MBEAN_ATTRIBUTES);          for (int i=0; i < attributeList.size(); i++) {            Attribute attribute=(Attribute)attributeList.get(i);            String name=attribute.getName();switch (name) {case PulseConstants.MBEAN_ATTRIBUTE_ENTRYSIZE:              anRom.setEntrySize(getLongAttribute(attribute.getValue(),attribute.getName()));            LOGGER.fine("updateRegionOnMembers : anRom.getEntrySize() = " + anRom.getEntrySize());          break;case PulseConstants.MBEAN_ATTRIBUTE_ENTRYCOUNT:        anRom.setEntryCount(getLongAttribute(attribute.getValue(),attribute.getName()));      LOGGER.fine("updateRegionOnMembers : anRom.getEntryCount() = " + anRom.getEntryCount());    break;case PulseConstants.MBEAN_ATTRIBUTE_PUTSRATE:  anRom.setPutsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));LOGGER.fine("updateRegionOnMembers : anRom.getPutsRate() = " + anRom.getPutsRate());break;case PulseConstants.MBEAN_ATTRIBUTE_GETSRATE:anRom.setGetsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));LOGGER.fine("updateRegionOnMembers : anRom.getGetsRate() = " + anRom.getGetsRate());break;case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:anRom.setDiskGetsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));LOGGER.fine("updateRegionOnMembers : anRom.getDiskGetsRate() = " + anRom.getDiskGetsRate());break;case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:anRom.setDiskPutsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));LOGGER.fine("updateRegionOnMembers : anRom.getDiskPutsRate() = " + anRom.getDiskPutsRate());break;case PulseConstants.MBEAN_ATTRIBUTE_LOCALMAXMEMORY:anRom.setLocalMaxMemory(getIntegerAttribute(attribute.getValue(),attribute.getName()));LOGGER.fine("updateRegionOnMembers : anRom.getLocalMaxMemory() = " + anRom.getLocalMaxMemory());break;}}anRom.getGetsPerSecTrend().add(anRom.getGetsRate());anRom.getPutsPerSecTrend().add(anRom.getPutsRate());anRom.getDiskReadsPerSecTrend().add(anRom.getDiskGetsRate());anRom.getDiskWritesPerSecTrend().add(anRom.getDiskPutsRate());LOGGER.fine("updateRegionOnMembers : Existing member on region : getGetsRate() = " + anRom.getGetsPerSecTrend().size() + ", getPutsRate() = "+ anRom.getPutsPerSecTrend().size()+ ", getDiskGetsRate() = "+ anRom.getDiskReadsPerSecTrend().size()+ ", getDiskPutsRate() = "+ anRom.getDiskWritesPerSecTrend().size());memberNames.remove(anRom.getMemberName());break;}}}LOGGER.fine("updateRegionOnMembers : Loop over remaining member names and adding new member in region. Existing count = " + regionOnMemberList.size());LOGGER.fine("updateRegionOnMembers : Remaining new members in this region = " + memberNames.size());for (String memberName : memberNames) {String objectNameROM=PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObjectName + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER+ memberName;ObjectName regionOnMemberMBean=new ObjectName(objectNameROM);Cluster.RegionOnMember regionOnMember=new Cluster.RegionOnMember();regionOnMember.setMemberName(memberName);regionOnMember.setRegionFullPath(regionFullPath);AttributeList attributeList=this.mbs.getAttributes(regionOnMemberMBean,PulseConstants.REGION_ON_MEMBER_MBEAN_ATTRIBUTES);for (int i=0; i < attributeList.size(); i++) {Attribute attribute=(Attribute)attributeList.get(i);String name=attribute.getName();switch (name) {case PulseConstants.MBEAN_ATTRIBUTE_ENTRYSIZE:regionOnMember.setEntrySize(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_ENTRYCOUNT:regionOnMember.setEntryCount(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_PUTSRATE:regionOnMember.setPutsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_GETSRATE:regionOnMember.setGetsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:regionOnMember.setDiskGetsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:regionOnMember.setDiskPutsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_LOCALMAXMEMORY:regionOnMember.setLocalMaxMemory(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;}}regionOnMember.getGetsPerSecTrend().add(regionOnMember.getGetsRate());regionOnMember.getPutsPerSecTrend().add(regionOnMember.getPutsRate());regionOnMember.getDiskReadsPerSecTrend().add(regionOnMember.getDiskGetsRate());regionOnMember.getDiskWritesPerSecTrend().add(regionOnMember.getDiskPutsRate());LOGGER.fine("updateRegionOnMembers : Adding New member on region : getGetsRate() = " + regionOnMember.getGetsRate() + ", getPutsRate() = "+ regionOnMember.getPutsRate()+ ", getDiskGetsRate() = "+ regionOnMember.getDiskGetsRate()+ ", getDiskPutsRate() = "+ regionOnMember.getDiskPutsRate());regionOnMemberListNew.add(regionOnMember);}region.setRegionOnMembers(regionOnMemberListNew);LOGGER.fine("updateRegionOnMembers : Total regions on member in region " + region.getFullPath() + " after update = "+ region.getRegionOnMembers().length);} catch (MalformedObjectNameException e) {LOGGER.warning(e);}catch (InstanceNotFoundException infe) {LOGGER.warning(infe);}catch (ReflectionException re) {LOGGER.warning(re);}}  }
class C{  @SuppressWarnings("fallthrough") void verifyPermission(String type,String name,String actions) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {  Class<?> pc=Class.forName(type,true,Thread.currentThread().getContextClassLoader());  Constructor<?> c=null;  Vector<String> objects=new Vector<>(2);  if (name != null)   objects.add(name);  if (actions != null)   objects.add(actions);switch (objects.size()) {case 0:    try {      c=pc.getConstructor(NOPARAMS);      break;    } catch (    NoSuchMethodException ex) {      objects.add(null);    }case 1:  try {    c=pc.getConstructor(ONEPARAMS);    break;  } catch (  NoSuchMethodException ex) {    objects.add(null);  }case 2:c=pc.getConstructor(TWOPARAMS);break;}Object parameters[]=objects.toArray();Permission p=(Permission)c.newInstance(parameters);}  }
class C{  public void showAbout(){  Object[] tickerItems={res.getString("AboutAction.Copyright"),res.getString("AboutAction.Acknowledgement1"),res.getString("AboutAction.Acknowledgement2"),res.getString("AboutAction.Acknowledgement3"),res.getString("AboutAction.Acknowledgement4"),res.getString("AboutAction.Acknowledgement5"),res.getString("AboutAction.Acknowledgement6"),res.getString("AboutAction.Acknowledgement7"),LnfUtil.isDarculaAvailable() ? res.getString("AboutAction.Acknowledgement8") : ""};  URL aboutDialogImageURL=AboutAction.class.getResource(res.getString("AboutAction.About.image"));  DAbout dAbout=new DAbout(frame,MessageFormat.format(res.getString("AboutAction.About.Title"),KSE.getApplicationName()),res.getString("AboutAction.License"),Toolkit.getDefaultToolkit().createImage(aboutDialogImageURL),tickerItems);  dAbout.setLocationRelativeTo(frame);  dAbout.setVisible(true);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public void checkAccess(){}  }
class C{  protected void selectAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  if (RectangleEdge.isTopOrBottom(edge)) {    selectHorizontalAutoTickUnit(g2,dataArea,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    selectVerticalAutoTickUnit(g2,dataArea,edge);  }}  }
class C{  public SimpleImageContentProposalLabelProvider(ImageDescriptor imageDescriptor){  this.image=imageDescriptor.createImage();}  }
class C{  public void show(FragmentManager manager,@IdRes int bottomSheetLayoutId){  dismissed=false;  shownByMe=true;  this.bottomSheetLayoutId=bottomSheetLayoutId;  manager.beginTransaction().add(fragment,String.valueOf(bottomSheetLayoutId)).commit();}  }
class C{  public static boolean isJavaVersionAtLeast(int requiredVersion){  return JAVA_VERSION_INT >= requiredVersion;}  }
class C{  protected boolean isLevelEnabled(int logLevel){  return (logLevel >= currentLogLevel);}  }
class C{  private void handleStaticMetadataRequest(StaticMetadata.MetadataRequest request,TransportNetwork transportNetwork,TaskStatistics ts){  StaticMetadata staticMetadata=new StaticMetadata(request.request,transportNetwork);  if (request.request.bucket != null) {    try {      OutputStream os=StaticDataStore.getOutputStream(request.request,"query.json","application/json");      staticMetadata.writeMetadata(os);      os.close();    } catch (    IOException e) {      LOG.error("Error creating static metadata",e);    }    deleteRequest(request);  } else {    try {      PipedInputStream pis=new PipedInputStream();      PipedOutputStream pos=new PipedOutputStream(pis);      finishPriorityTask(request,pis);      staticMetadata.writeMetadata(pos);      pos.close();    } catch (    IOException e) {      LOG.error("Error writing static metadata to broker",e);    }  }}  }
class C{  @Override public T remove(int index){  throw new UnsupportedOperationException("cannot remove from Empty Ranges");}  }
class C{  public boolean containsKey(String key){  return (properties.containsKey(key));}  }
class C{  private AlarmEvent disable(AlarmPoint alarm){  AlarmStatus status=alarm.currentStatus();  if (status.name(null).equals(AlarmPoint.STATUS_DISABLED)) {    return null;  }  AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_DISABLED);  return createEvent(alarm.identity().get(),status,newStatus,AlarmPoint.EVENT_DISABLING);}  }
class C{  public boolean isPlotable(double lat,double lon){  return true;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public void send(OutputStream os) throws IOException {  PacketOutputStream writer=(PacketOutputStream)os;  try {    writer.startPacket(packSeq);    writer.write(Utils.encryptPassword(password,authData));    writer.finishPacketWithoutRelease(false);    writer.releaseBuffer();  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException("Could not use SHA-1, failing",e);  }}  }
class C{  public GridReversedLinesFileReader(final File file) throws IOException {  this(file,4096,Charset.defaultCharset().toString());}  }
class C{  public GreyNode(Quadrant quadrant,QuadTreeNode parent){  super(quadrant,parent);}  }
class C{  public void writeExternalIndexDropStmt(Table table,IIndex index,StringBuilder ddl){  if (databaseInfo.isAlterTableForDropUsed()) {    writeTableAlterStmt(table,ddl);  }  ddl.append("DROP INDEX ");  printIdentifier(getIndexName(index),ddl);  if (!databaseInfo.isAlterTableForDropUsed()) {    ddl.append(" ON ");    ddl.append(getFullyQualifiedTableNameShorten(table));  }  printEndOfStatement(ddl);}  }
class C{  public void cancelAlarm(){  PendingIntent pendingIntent=getScheduleNotificationIntent();  getAlarmManager().cancel(pendingIntent);  Log.i("ReactSystemNotification","Notification Alarm Canceled: " + id);}  }
class C{  public void addFreeBusy(VFreeBusy freeBusy){  addComponent(freeBusy);}  }
class C{  public void paintSliderTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSliderTrackBorder(context,g,x,y,w,h);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.CONSTRAINT_RULE__CONSTRAINTS:    return getConstraints();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected BufferedImage createTileImageFromDrawingAttributes(DrawingAttributes da){  BufferedImage bi=null;  if (da != null) {    OMRect rect=new OMRect(0,0,TILE_SIZE,TILE_SIZE);    da.setTo(rect);    rect.generate(new com.bbn.openmap.proj.Mercator(new LatLonPoint.Double(),100000,TILE_SIZE,TILE_SIZE));    bi=new BufferedImage(TILE_SIZE,TILE_SIZE,BufferedImage.TYPE_INT_ARGB);    Graphics g=bi.getGraphics();    rect.render(g);    g.dispose();  }  return bi;}  }
class C{  @Override public void D(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.D()");  }  if (formObj.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Widget || formObj.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Popup) {    gui.getValues().setFormsChanged(true);    gui.setViewerTitle(null);  }  javascript.execute(formObj,PdfDictionary.D,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  public static void FLOAD_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.FLOAD_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public void incSentCommitMessages(long messages){  this.stats.incLong(sentCommitMessagesId,messages);}  }
class C{  public static int findLastIndexOf(Object self,int startIndex,Closure closure){  int result=-1;  int i=0;  BooleanClosureWrapper bcw=new BooleanClosureWrapper(closure);  for (Iterator iter=InvokerHelper.asIterator(self); iter.hasNext(); i++) {    Object value=iter.next();    if (i < startIndex) {      continue;    }    if (bcw.call(value)) {      result=i;    }  }  return result;}  }
class C{  public static Command createCommand(String command,List<NodeConfig> nodes) throws AgentException {  return createCommand(command,null,nodes);}  }
class C{  public static String format(String format,Object... args){  if (args != null) {    for (int i=0; i < args.length; i++) {      if (args[i] == null) {        args[i]="null";      }    }  }  return new MessageFormat(format).format(args);}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public TemplateStore(String key){  Assert.isNotNull(key);  fKey=key;}  }
class C{  public static String readFileAsString(File file) throws FileNotFoundException {  return readFileAsString(file.getAbsolutePath());}  }
class C{  @Nullable public GridCacheMvccCandidate removeExplicitNodeCandidates(UUID nodeId){  if (rmts != null) {    for (Iterator<GridCacheMvccCandidate> it=rmts.iterator(); it.hasNext(); ) {      GridCacheMvccCandidate cand=it.next();      if (!cand.tx() && (nodeId.equals(cand.nodeId()) || nodeId.equals(cand.otherNodeId()))) {        cand.setUsed();        cand.setRemoved();        it.remove();      }    }    if (rmts.isEmpty())     rmts=null;  }  if (locs != null) {    for (Iterator<GridCacheMvccCandidate> it=locs.iterator(); it.hasNext(); ) {      GridCacheMvccCandidate cand=it.next();      if (!cand.tx() && nodeId.equals(cand.otherNodeId()) && cand.dhtLocal()) {        cand.setUsed();        cand.setRemoved();        it.remove();      }    }    if (locs.isEmpty())     locs=null;  }  reassign();  return anyOwner();}  }
class C{  public QRDecomposition(DoubleMatrix2D A){  Property.DEFAULT.checkRectangular(A);  cern.jet.math.Functions F=cern.jet.math.Functions.functions;  QR=A.copy();  m=A.rows();  n=A.columns();  Rdiag=A.like1D(n);  cern.colt.function.DoubleDoubleFunction hypot=Algebra.hypotFunction();  DoubleMatrix1D[] QRcolumns=new DoubleMatrix1D[n];  DoubleMatrix1D[] QRcolumnsPart=new DoubleMatrix1D[n];  for (int k=0; k < n; k++) {    QRcolumns[k]=QR.viewColumn(k);    QRcolumnsPart[k]=QR.viewColumn(k).viewPart(k,m - k);  }  for (int k=0; k < n; k++) {    double nrm=0;    for (int i=k; i < m; i++) {      nrm=Algebra.hypot(nrm,QR.getQuick(i,k));    }    if (nrm != 0.0) {      if (QR.getQuick(k,k) < 0)       nrm=-nrm;      QRcolumnsPart[k].assign(cern.jet.math.Functions.div(nrm));      QR.setQuick(k,k,QR.getQuick(k,k) + 1);      for (int j=k + 1; j < n; j++) {        DoubleMatrix1D QRcolj=QR.viewColumn(j).viewPart(k,m - k);        double s=QRcolumnsPart[k].zDotProduct(QRcolj);        s=-s / QR.getQuick(k,k);        for (int i=k; i < m; i++) {          QR.setQuick(i,j,QR.getQuick(i,j) + s * QR.getQuick(i,k));        }      }    }    Rdiag.setQuick(k,-nrm);  }}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  public static Resource reconstructVersion(@NotNull BigDecimal version,@NotNull String shortname,@Nullable DOI doi,@Nullable Organisation organisation,@Nullable VersionHistory versionHistory,@Nullable File versionEmlFile,@Nullable UUID key){  Preconditions.checkNotNull(version);  Preconditions.checkNotNull(shortname);  if (organisation == null || versionHistory == null || versionEmlFile == null) {    throw new IllegalArgumentException("Failed to reconstruct resource version because not all of organisation, version history, or version eml file were provided");  }  Resource resource=new Resource();  resource.setShortname(shortname);  resource.setEmlVersion(version);  resource.setDoi(doi);  resource.setOrganisation(organisation);  resource.setKey(key);  resource.setStatus(versionHistory.getPublicationStatus());  resource.setIdentifierStatus(versionHistory.getStatus());  resource.setRecordsPublished(versionHistory.getRecordsPublished());  resource.setLastPublished(versionHistory.getReleased());  if (versionEmlFile.exists()) {    Eml eml=EmlUtils.loadWithLocale(versionEmlFile,Locale.US);    resource.setEml(eml);  } else {    throw new IllegalArgumentException("Failed to reconstruct resource: " + versionEmlFile.getAbsolutePath() + " not found!");  }  return resource;}  }
class C{  public void jobResponseReceived(){  responseQueueListenerBusy=true;}  }
class C{  public <I,NI extends I,T extends Collection<I>,E extends Collection<NI>>E viewCollectionAs(final E newCollection,final Class<NI> perspectiveCollectionItemClass,final T currentCollection){  if (currentCollection == null)   return null;  for (  final I item : currentCollection) {    final NI newItem=viewAs(perspectiveCollectionItemClass,item);    newCollection.add(newItem);  }  return newCollection;}  }
class C{  @Override public IndicesOptions indicesOptions(){  return indicesOptions;}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  @Override public void editDuplicate(){}  }
class C{  protected static String replaceAll(String s,String before,String after){  int index=0;  while (true) {    int next=s.indexOf(before,index);    if (next < 0) {      return s;    }    s=s.substring(0,next) + after + s.substring(next + before.length());    index=next + after.length();  }}  }
class C{  public final boolean sendMessageDelayed(Message msg,long delayMillis){  return mExec.sendMessageDelayed(msg,delayMillis);}  }
class C{  public List<String> isPrecalculated(List<String> proteinMD5s){  Assert.notNull(berkeleyMD5Service,"The berkeleyMD5Service field is null.");  Assert.notNull(berkeleyMD5Service.getPrimIDX(),"The berkeleyMD5Service.getPrimIDX() method is returning null.");  List<String> md5ToCalculate=new ArrayList<String>();  for (  String md5 : proteinMD5s) {    if (berkeleyMD5Service.getPrimIDX().get(md5) != null) {      md5ToCalculate.add(md5);    }  }  return md5ToCalculate;}  }
class C{  public ParseTask(ServletContext servletContext,boolean validating,URI documentURI) throws Exception {  this.servletContext=servletContext;  this.documentURI=documentURI;  this.validating=validating;}  }
class C{  public void reset(){  mPieces=new ArrayList<Piece>();  setText("");}  }
class C{  public boolean open(){  if (this.verifier == null) {    throw new IllegalArgumentException("Please set a verifier before opening the dialog box");  }  buildDialog();  openShell();  return this.returnedValue;}  }
class C{  public static double[][] sort(double[][] values,int column){  double[][] sorted_values=new double[values.length][values[0].length];  Sorting s=new Sorting(getColumnCopy(values,column),false);  for (int i=0; i < sorted_values.length; i++)   System.arraycopy(values[s.getIndex(i)],0,sorted_values[i],0,values[s.getIndex(i)].length);  return sorted_values;}  }
class C{  public Java2DRenderer(String url,int width){  this(url,url,width,NO_HEIGHT);}  }
class C{  public void clear(){  for (int i=0; i < array.length; i+=2) {    array[i]=INVALID;  }}  }
class C{  public void incObtainedForItem(String item,int count){  handlePrefixedCounting(item,count,"obtained.",obtained);}  }
class C{  public CCallgraphNode(final INaviFunction function){  m_function=Preconditions.checkNotNull(function,"IE01235: Function argument can not be null");}  }
class C{  public ListSizeConstraint(int size){  sizeConstraint=size;}  }
class C{  @Override public boolean isBusy(){  return m_busy;}  }
class C{  public String toString(boolean detailed){  return null;}  }
class C{  public void testSetOptions() throws Exception {  if (m_OptionTester.getOptionHandler() != null) {    if (!m_OptionTester.checkSetOptions()) {      fail(getClassname() + ": " + "setOptions method failed.");    }  }}  }
class C{  protected Component createComponent(){  AttributeSet attr=getElement().getAttributes();  String classname=(String)attr.getAttribute(HTML.Attribute.CLASSID);  try {    ReflectUtil.checkPackageAccess(classname);    Class c=Class.forName(classname,true,Thread.currentThread().getContextClassLoader());    Object o=c.newInstance();    if (o instanceof Component) {      Component comp=(Component)o;      setParameters(comp,attr);      return comp;    }  } catch (  Throwable e) {  }  return getUnloadableRepresentation();}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  ParentModelDao.dropTable(db,ifExists);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void load(){  TreeMap<String,String> envs=new TreeMap<String,String>(new EnvironmentVariableComparator());  envs.putAll(System.getenv());  data=new String[envs.size()][2];  int i=0;  for (Iterator<Entry<String,String>> itrSorted=envs.entrySet().iterator(); itrSorted.hasNext(); i++) {    Map.Entry<String,String> property=itrSorted.next();    data[i][0]=property.getKey();    data[i][1]=property.getValue();  }  fireTableDataChanged();}  }
class C{  public Source<List<T>> ofSizeBetween(int minimumSize,int maximumSize){  checkBoundedListArguments(minimumSize,maximumSize);  return listsOf(source,collector,minimumSize,maximumSize);}  }
class C{  public RaftParameters withElectionTimeoutLower(int electionTimeoutLower){  this.electionTimeoutLowerBound=electionTimeoutLower;  return this;}  }
class C{  @Override public float queryNorm(float sumOfSquaredWeights){  return (float)(1.0 / Math.sqrt(sumOfSquaredWeights));}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  public boolean deleteMessage(String msg){  return false;}  }
class C{  public void include(String path,boolean flush) throws IOException, ServletException {  super.include(path);}  }
class C{  public String greetServer(String input) throws IllegalArgumentException {  return "";}  }
class C{  public void removeSession(){  Core.getInstance().getImService().removeSession(this);}  }
class C{  boolean isEven(){  return (intLen == 0) || ((value[offset + intLen - 1] & 1) == 0);}  }
class C{  public ProjectPrivilegeObject(int id){  this.id=id;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  double x, y;  double z;  int intensity;  byte classValue, numReturns, returnNum;  int a, n;  int progress;  int numPoints;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      long oneHundredthTotal=las.getNumPointRecords() / 100;      File file=new File(pointFiles[j].replace(".las",".txt"));      if (file.exists()) {        file.delete();      }      fw=new FileWriter(file,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      n=0;      progress=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          classValue=point.getClassification();          returnNum=point.getReturnNumber();          numReturns=point.getNumberOfReturns();          out.println((a + 1) + " " + x+ " "+ y+ " "+ z+ " "+ intensity+ " "+ classValue+ " "+ returnNum+ " "+ numReturns);          numPoints++;        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);        }      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testGridP2PTestTask() throws IgniteCheckedException {  try (Ignite g=G.start()){    assert g != null;    assert !g.cluster().forRemotes().nodes().isEmpty() : "Test requires at least 1 remote node.";    ComputeTaskFuture<Integer> fut=executeAsync(g.compute(),GridP2PTestTask.class,1);    Integer res=fut.get();    X.println("Result of execution is: " + res);    assert res > 0 : "Result of execution is: " + res + " for more information see GridP2PTestJob";  } }  }
class C{  public InlineQueryResultContact.InlineQueryResultContactBuilder phoneNumber(String phoneNumber){  this.phone_number=phoneNumber;  return this;}  }
class C{  private void ensureSortedByValue(){  if (currentSortOrder != SORT_ORDER_BY_VALUE) {    Collections.sort(samples,VALUE_COMPARATOR);    currentSortOrder=SORT_ORDER_BY_VALUE;  }}  }
class C{  public void internalRollback() throws ResourceException {  if (xid == null)   return;synchronized (mc.getSynchronizationObject()) {    try {      mc.internalEnd(xid,XAResource.TMSUCCESS);      mc.internalRollback(xid);    } catch (    XAException|SQLException ex) {      throw new FBResourceTransactionException(ex.getMessage(),ex);    } finally {      xid=null;    }    if (rollbackEvent != null) {      mc.notify(FBManagedConnection.localTransactionRolledbackNotifier,rollbackEvent);    }  }}  }
class C{  public String lookupNamespaceURI(String specifiedPrefix){  short type=this.getNodeType();switch (type) {case Node.ELEMENT_NODE:{      String namespace=this.getNamespaceURI();      String prefix=this.getPrefix();      if (namespace != null) {        if (specifiedPrefix == null && prefix == specifiedPrefix) {          return namespace;        } else         if (prefix != null && prefix.equals(specifiedPrefix)) {          return namespace;        }      }      if (this.hasAttributes()) {        NamedNodeMap map=this.getAttributes();        int length=map.getLength();        for (int i=0; i < length; i++) {          Node attr=map.item(i);          String attrPrefix=attr.getPrefix();          String value=attr.getNodeValue();          namespace=attr.getNamespaceURI();          if (namespace != null && namespace.equals("http://www.w3.org/2000/xmlns/")) {            if (specifiedPrefix == null && attr.getNodeName().equals("xmlns")) {              return value;            } else             if (attrPrefix != null && attrPrefix.equals("xmlns") && attr.getLocalName().equals(specifiedPrefix)) {              return value;            }          }        }      }      return null;    }case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:  return null;case Node.ATTRIBUTE_NODE:{  if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);  }  return null;}default :{return null;}}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.901 -0500",hash_original_method="D1FF7490F54CF1A82BA3C6629046B5CD",hash_generated_method="562997D5907F1BA3F5258B853973CC1C") public void clear(){  cache.evictAll();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_DECLS_OR_BINDINGS:    return ((InternalEList<?>)getVarDeclsOrBindings()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void removeContentLength(){  if (contentLength != -1) {    headers.removeAll("Content-Length");    contentLength=-1;  }}  }
class C{  public void add(Group group){  _values.add(group);}  }
class C{  protected void configLambda(Parameterization config){  IntParameter lambdaP=new IntParameter(LAMBDA_ID).addConstraint(CommonConstraints.GREATER_EQUAL_ONE_INT).setOptional(true);  if (config.grab(lambdaP)) {    settings.lambda=lambdaP.intValue();  }}  }
class C{  @RequestMapping(value="/businessObjectData/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}" + "/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}"+ "/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_DELETE) public BusinessObjectData deleteBusinessObjectData(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestParam("deleteFiles") Boolean deleteFiles){  return businessObjectDataService.deleteBusinessObjectData(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value),businessObjectDataVersion),deleteFiles);}  }
class C{  public ExtractData(){  super();}  }
class C{  public VertexBufferObjectWithVAO(boolean isStatic,int numVertices,VertexAttributes attributes){  this.isStatic=isStatic;  this.attributes=attributes;  buffer=BufferUtils.newFloatBuffer(this.attributes.vertexSize / 4 * numVertices);  buffer.flip();  bufferHandle=Gdx.gl20.glGenBuffer();  usage=isStatic ? GL20.GL_STATIC_DRAW : GL20.GL_DYNAMIC_DRAW;}  }
class C{  public URLLabel(final String url){  this(url,url);}  }
class C{  public static AnimatablePaintValue createNonePaintValue(AnimationTarget target){  AnimatablePaintValue v=new AnimatablePaintValue(target);  v.paintType=PAINT_NONE;  return v;}  }
class C{  public void writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpeg == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    s.write(jpeg,0,jpeg.length);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public static String byteCountToDisplaySize(long size){  return byteCountToDisplaySize(BigInteger.valueOf(size));}  }
class C{  private boolean hasNextProxy(){  return hasNextProxy;}  }
class C{  public boolean hasValue(){  return super.hasAttribute(VALUE);}  }
class C{  public Builder add(String fieldName,String value){  intent.putExtra(fieldName,value);  return this;}  }
class C{  public BifocalDistortion(double xrange,double xmag,double yrange,double ymag){  rx=xrange;  mx=xmag;  ry=yrange;  my=ymag;  m_distortX=!(rx == 0 || mx == 1.0);  m_distortY=!(ry == 0 || my == 1.0);}  }
class C{  public void append(final CharSequence seq){  this.query.append(seq);}  }
class C{  public boolean ready() throws IOException {  if (_inputStream == null)   throw new IOException("Stream closed");  return ((_end - _start) > 0) || (_inputStream.available() != 0);}  }
class C{  protected void EMIT_NonCommutative(Operator operator,Instruction s,Operand result,Operand val1,Operand val2){  if (VM.VerifyAssertions)   opt_assert(result.isRegister() || result.isMemory());  if (result.similar(val1)) {    EMIT(MIR_BinaryAcc.mutate(s,operator,result,val2));  } else   if (!result.similar(val2)) {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result.copy(),val1)));    EMIT(MIR_BinaryAcc.mutate(s,operator,result,val2));  } else {    RegisterOperand temp=regpool.makeTemp(result);    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp,val1)));    EMIT(MIR_BinaryAcc.mutate(s,operator,temp.copyRO(),val2));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result,temp.copyRO())));  }}  }
class C{  public static DownloadQueue newDownloadQueue(){  return newDownloadQueue(3);}  }
class C{  public Clustering<Model> run(){  final DBIDs ids=npred.getIDs();  final FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Generalized DBSCAN Clustering",ids.size(),LOG) : null;  final IndefiniteProgress clusprogress=LOG.isVerbose() ? new IndefiniteProgress("Number of clusters found",LOG) : null;  final WritableIntegerDataStore clusterids=DataStoreUtil.makeIntegerStorage(ids,DataStoreFactory.HINT_TEMP,UNPROCESSED);  final TIntArrayList clustersizes=new TIntArrayList();  clustersizes.add(0);  clustersizes.add(0);  final ArrayModifiableDBIDs activeSet=DBIDUtil.newArray();  int clusterid=NOISE + 1;  for (DBIDIter id=ids.iter(); id.valid(); id.advance()) {    if (clusterids.intValue(id) != UNPROCESSED) {      continue;    }    final T neighbors=npred.getNeighbors(id);    if (corepred.isCorePoint(id,neighbors)) {      LOG.incrementProcessed(clusprogress);      clustersizes.add(expandCluster(id,clusterid,clusterids,neighbors,activeSet,progress));      ++clusterid;    } else {      clusterids.putInt(id,NOISE);      clustersizes.set(NOISE,clustersizes.get(NOISE) + 1);    }    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  LOG.setCompleted(clusprogress);  ArrayModifiableDBIDs[] clusterlists=new ArrayModifiableDBIDs[clusterid];  ArrayModifiableDBIDs[] corelists=coremodel ? new ArrayModifiableDBIDs[clusterid] : null;  for (int i=0; i < clustersizes.size(); i++) {    clusterlists[i]=DBIDUtil.newArray(clustersizes.get(i));    if (corelists != null) {      corelists[i]=DBIDUtil.newArray(clustersizes.get(i));    }  }  for (DBIDIter id=ids.iter(); id.valid(); id.advance()) {    final int cid=clusterids.intValue(id);    final int cluster=cid < 0 ? -cid : cid;    clusterlists[cluster].add(id);    if (corelists != null && cid > NOISE) {      corelists[cluster].add(id);    }  }  clusterids.destroy();  Clustering<Model> result=new Clustering<>("GDBSCAN","gdbscan-clustering");  for (int cid=NOISE; cid < clusterlists.length; cid++) {    boolean isNoise=(cid == NOISE);    Model m=coremodel ? new CoreObjectsModel(corelists[cid]) : ClusterModel.CLUSTER;    result.addToplevelCluster(new Cluster<Model>(clusterlists[cid],isNoise,m));  }  return result;}  }
class C{  public synchronized void loadAllHexes(){  hexTileset.loadAllImages(boardview,tracker);}  }
class C{  public long encodeCoordinate(double lat){  return Math.round((lat + 180) / factor);}  }
class C{  private Set<EgDemandDetails> adjustmentsForTaxExempted(final Set<EgDemandDetails> oldEgDemandDetails,final Set<EgDemandDetails> newEgDemandDetails,final Installment inst){  LOGGER.debug("Entered into adjustmentsForTaxExempted, oldEgDemandDetails: " + oldEgDemandDetails + ", newEgDemandDetails: "+ newEgDemandDetails+ ", inst:"+ inst);  BigDecimal totalCollAdjstmntAmnt=BigDecimal.ZERO;  for (  final EgDemandDetails egDmndDtls : oldEgDemandDetails)   if (egDmndDtls.getEgDemandReason().getEgInstallmentMaster().equals(inst)) {    final EgDemandReasonMaster egDmndRsnMstr=egDmndDtls.getEgDemandReason().getEgDemandReasonMaster();    if (!egDmndRsnMstr.getCode().equalsIgnoreCase(DEMANDRSN_CODE_LIBRARY_CESS) && !egDmndRsnMstr.getCode().equalsIgnoreCase(DEMANDRSN_CODE_EDUCATIONAL_CESS) && !egDmndRsnMstr.getCode().equalsIgnoreCase(DEMANDRSN_CODE_UNAUTHORIZED_PENALTY))     totalCollAdjstmntAmnt=totalCollAdjstmntAmnt.add(egDmndDtls.getAmtCollected());  }  final List<EgDemandDetails> newEgDmndDetails=new ArrayList<EgDemandDetails>(newEgDemandDetails);  for (  final EgDemandDetails egDmndDtls : newEgDemandDetails) {    final EgDemandReasonMaster egDmndRsnMstr=egDmndDtls.getEgDemandReason().getEgDemandReasonMaster();    if (egDmndRsnMstr.getCode().equalsIgnoreCase(DEMANDRSN_CODE_EDUCATIONAL_CESS))     egDmndDtls.setAmtCollected(totalCollAdjstmntAmnt.multiply(new BigDecimal("0.50"))); else     if (egDmndRsnMstr.getCode().equalsIgnoreCase(DEMANDRSN_CODE_LIBRARY_CESS))     egDmndDtls.setAmtCollected(totalCollAdjstmntAmnt.multiply(new BigDecimal("0.25"))); else     if (egDmndRsnMstr.getCode().equalsIgnoreCase(DEMANDRSN_CODE_UNAUTHORIZED_PENALTY))     egDmndDtls.setAmtCollected(totalCollAdjstmntAmnt.multiply(new BigDecimal("0.25")));  }  LOGGER.debug("newEgDmndDetails: " + newEgDmndDetails + "\nExiting from adjustmentsForTaxExempted");  return new HashSet<EgDemandDetails>(newEgDmndDetails);}  }
class C{  public long allocate(long size) throws GridOffHeapOutOfMemoryException {  return allocate(size,false,false);}  }
class C{  protected boolean checkConsistency(){  return true;}  }
class C{  private boolean overlapsOrTouches(Position gap,int offset,int length){  return gap.getOffset() <= offset + length && offset <= gap.getOffset() + gap.getLength();}  }
class C{  public static InlineQueryResultVenueBuilder builder(){  return new InlineQueryResultVenueBuilder();}  }
class C{  private boolean trimToSize(){  List<String> toEvict=new ArrayList<>();  int num=0;  Cursor c=mDatabaseSupplier.getDatabase().query(WXSQLiteOpenHelper.TABLE_STORAGE,new String[]{WXSQLiteOpenHelper.COLUMN_KEY,WXSQLiteOpenHelper.COLUMN_PERSISTENT},null,null,null,null,WXSQLiteOpenHelper.COLUMN_TIMESTAMP + " ASC");  try {    int evictSize=c.getCount() / 10;    while (c.moveToNext()) {      String key=c.getString(c.getColumnIndex(WXSQLiteOpenHelper.COLUMN_KEY));      boolean persistent=c.getInt(c.getColumnIndex(WXSQLiteOpenHelper.COLUMN_PERSISTENT)) == 1;      if (!persistent && key != null) {        num++;        toEvict.add(key);        if (num == evictSize) {          break;        }      }    }  } catch (  Exception e) {    WXLogUtils.e(WXSQLiteOpenHelper.TAG_STORAGE,"DefaultWXStorage occurred an exception when execute trimToSize:" + e.getMessage());  } finally {    c.close();  }  if (num <= 0) {    return false;  }  for (  String key : toEvict) {    performRemoveItem(key);  }  WXLogUtils.e(WXSQLiteOpenHelper.TAG_STORAGE,"remove " + num + " items by lru");  return true;}  }
class C{  public static <T>Flux<T> flowableToFlux(Flowable<T> source){  return new FlowableAsFlux<>(source);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.358 -0500",hash_original_method="1992218C2CA2A9A793E8A4995C16BACA",hash_generated_method="64D74600A863EF1A66C3817EBCC9190A") public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  @Override public UpdateResponse commit() throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.commit();  if (this.solr1 != null)   ur=this.solr1.commit();  return ur;}  }
class C{  protected String name(String name){  return resourcePrefix + name;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ABSTRACT_METHOD_DECLARATION___TYPE_1:    setType_1((String)newValue);  return;case UmplePackage.ABSTRACT_METHOD_DECLARATION___METHOD_DECLARATOR_1:getMethodDeclarator_1().clear();getMethodDeclarator_1().addAll((Collection<? extends MethodDeclarator_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public int textPos(){  return textPos;}  }
class C{  public void unlock(Object o){  getLock(o).unlock();}  }
class C{  private boolean isSemicolonPartOfForStatement(){  int semiColonCount=1;  while (true) {    nextToken();switch (fToken) {case Symbols.TokenFOR:      return true;case Symbols.TokenLBRACE:    return false;case Symbols.TokenSEMICOLON:  semiColonCount++;if (semiColonCount > 2) return false;break;case Symbols.TokenCOLON:return false;case Symbols.TokenEOF:return false;}}}  }
class C{  public long term(){  return term;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.KEY_DEFINITION___DEFAULT_KEY_1:    return getDefaultKey_1();case UmplePackage.KEY_DEFINITION___KEY_1:  return getKey_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void updateProductInfo(int C_AcctSchema_ID){  log.fine("M_MatchPO_ID=" + get_ID());  StringBuffer sql=new StringBuffer("UPDATE M_Product_Costing pc " + "SET (CostStandardPOQty,CostStandardPOAmt) = " + "(SELECT CostStandardPOQty + m.Qty,"+ " CostStandardPOAmt + currencyConvert(ol.PriceActual,ol.C_Currency_ID,a.C_Currency_ID,ol.DateOrdered,null,ol.AD_Client_ID,ol.AD_Org_ID)*m.Qty "+ "FROM M_MatchPO m, C_OrderLine ol, C_AcctSchema a "+ "WHERE m.C_OrderLine_ID=ol.C_OrderLine_ID"+ " AND pc.M_Product_ID=ol.M_Product_ID"+ " AND pc.C_AcctSchema_ID=a.C_AcctSchema_ID"+ " AND m.M_MatchPO_ID=").append(get_ID()).append(") ").append("WHERE pc.C_AcctSchema_ID=").append(C_AcctSchema_ID).append(" AND pc.M_Product_ID=").append(getM_Product_ID());  int no=DB.executeUpdate(sql.toString(),getTrxName());  log.fine("M_Product_Costing - Updated=" + no);}  }
class C{  public static int arraycode(Type type){switch (type.getTag()) {case BYTE:    return 8;case BOOLEAN:  return 4;case SHORT:return 9;case CHAR:return 5;case INT:return 10;case LONG:return 11;case FLOAT:return 6;case DOUBLE:return 7;case CLASS:return 0;case ARRAY:return 1;default :throw new AssertionError("arraycode " + type);}}  }
class C{  public FastUtilDoubleIterator(double[] primitiveArray){  super(primitiveArray);}  }
class C{  static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  public boolean isDisable(){  return (Boolean)getStateHelper().eval(PropertyKeys.disable,false);}  }
class C{  @DSComment("OpenGL Utils") @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:09.463 -0500",hash_original_method="8C0A16DEFCA17DC4A60E066564CB56D3",hash_generated_method="024FF416E0F94E29C981CA21E5CEAFB9") public static void texSubImage2D(int target,int level,int xoffset,int yoffset,Bitmap bitmap){  if (bitmap == null) {    throw new NullPointerException("texSubImage2D can't be used with a null Bitmap");  }  if (bitmap.isRecycled()) {    throw new IllegalArgumentException("bitmap is recycled");  }  int type=getType(bitmap);  if (native_texSubImage2D(target,level,xoffset,yoffset,bitmap,-1,type) != 0) {    throw new IllegalArgumentException("invalid Bitmap format");  }}  }
class C{  public static double durbinWatson(DoubleArrayList data){  int size=data.size();  if (size < 2)   throw new IllegalArgumentException("data sequence must contain at least two values.");  double[] elements=data.elements();  double run=0;  double run_sq=0;  run_sq=elements[0] * elements[0];  for (int i=1; i < size; ++i) {    double x=elements[i] - elements[i - 1];    run+=x * x;    run_sq+=elements[i] * elements[i];  }  return run / run_sq;}  }
class C{  protected void writeInitialStyles() throws IOException {  out.flushBits();  fillBits=OutStream.determineUnsignedBitSize(fillStyles.size());  lineBits=OutStream.determineUnsignedBitSize(lineStyles.size());  if (!hasStyle) {    fillBits=1;  } else {    writeStyles(fillStyles);    writeStyles(lineStyles);    out.flushBits();  }  out.writeUBits(4,fillBits);  out.writeUBits(4,lineBits);}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  private int handleD(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,2,"DG")) {    if (contains(value,index + 2,1,"I","E","Y")) {      result.append('J');      index+=3;    } else {      result.append("TK");      index+=2;    }  } else   if (contains(value,index,2,"DT","DD")) {    result.append('T');    index+=2;  } else {    result.append('T');    index++;  }  return index;}  }
class C{  public int nextInt(){  return (int)generateZeta(ro,pk,randomGenerator);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String ignoredAttributeIndicesTipText(){  return "The range of attributes to be ignored by the clusterer. eg: first-3,5,9-last";}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public Path resolve(Index index){  return indicesPath.resolve(index.name());}  }
class C{  public final CC y2(String y2){  return corrPos(y2,3);}  }
class C{  MemberHealthListener(final Member member){  this.member=member;}  }
class C{  public final static ObjectName makeSingletonName(Class clazz){  try {    final Package p=clazz.getPackage();    final String packageName=(p == null) ? null : p.getName();    final String className=clazz.getSimpleName();    final String domain;    if (packageName == null || packageName.length() == 0) {      domain=ScanDirAgent.class.getSimpleName();    } else {      domain=packageName;    }    final ObjectName name=new ObjectName(domain,"type",className);    return name;  } catch (  Exception x) {    final IllegalArgumentException iae=new IllegalArgumentException(String.valueOf(clazz),x);    throw iae;  }}  }
class C{  public void testNextIntBounded(){  SplittableRandom sr=new SplittableRandom();  for (int i=0; i < 2; i++)   assertEquals(0,sr.nextInt(1));  for (int bound=2; bound < MAX_INT_BOUND; bound+=524959) {    int f=sr.nextInt(bound);    assertTrue(0 <= f && f < bound);    int i=0;    int j;    while (i < NCALLS && (j=sr.nextInt(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  public CCReuseGrid(int times){  super();  t=times;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.553 -0400",hash_original_method="E6DE67B17B1FA33B29D27621C538E66B",hash_generated_method="D6EBAA38BAAAD9B840A522F8810F5649") public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end){  return create(file,listener,delayMillis,end,DEFAULT_BUFSIZE);}  }
class C{  public String toString(){  return state.toString();}  }
class C{  public static void createIncrementalPSIVectors(FlagConfig flagConfig) throws IOException {  PSI incrementalPSIVectors=new PSI(flagConfig);  incrementalPSIVectors.flagConfig=flagConfig;  incrementalPSIVectors.initialize();  VectorStoreWriter.writeVectors(flagConfig.elementalvectorfile(),flagConfig,incrementalPSIVectors.elementalItemVectors);  VectorStoreWriter.writeVectors(flagConfig.elementalpredicatevectorfile(),flagConfig,incrementalPSIVectors.elementalPredicateVectors);  VerbatimLogger.info("Performing first round of PSI training ...");  incrementalPSIVectors.trainIncrementalPSIVectors("");  if (flagConfig.trainingcycles() > 0) {    VerbatimLogger.info("Performing next round of PSI training ...");    incrementalPSIVectors.elementalItemVectors=incrementalPSIVectors.semanticItemVectors;    incrementalPSIVectors.elementalPredicateVectors=incrementalPSIVectors.semanticPredicateVectors;    incrementalPSIVectors.trainIncrementalPSIVectors("1");  }  VerbatimLogger.info("Done with createIncrementalPSIVectors.");}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.FILTER__TO_CHANNELS:    return ((InternalEList<?>)getToChannels()).basicRemove(otherEnd,msgs);case EipPackage.FILTER__FROM_CHANNELS:  return ((InternalEList<?>)getFromChannels()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public DViewCertCsrPem(JDialog parent,String title,X509Certificate cert) throws CryptoException {  super(parent,title,ModalityType.DOCUMENT_MODAL);  this.cert=cert;  initComponents();}  }
class C{  public static ComputeState createDefaultComputeHost(VerificationHost host,String clientID,String clientKey,String subscriptionId,String tenantId,String resourcePoolLink) throws Throwable {  AuthCredentialsServiceState auth=new AuthCredentialsServiceState();  auth.privateKeyId=clientID;  auth.privateKey=clientKey;  auth.userLink=subscriptionId;  auth.customProperties=new HashMap<>();  auth.customProperties.put(AZURE_TENANT_ID,tenantId);  auth.documentSelfLink=UUID.randomUUID().toString();  TestUtils.doPost(host,auth,AuthCredentialsServiceState.class,UriUtils.buildUri(host,AuthCredentialsService.FACTORY_LINK));  String authLink=UriUtils.buildUriPath(AuthCredentialsService.FACTORY_LINK,auth.documentSelfLink);  ComputeDescription azureHostDescription=new ComputeDescription();  azureHostDescription.id=UUID.randomUUID().toString();  azureHostDescription.name=azureHostDescription.id;  azureHostDescription.documentSelfLink=azureHostDescription.id;  azureHostDescription.supportedChildren=new ArrayList<>();  azureHostDescription.supportedChildren.add(ComputeType.VM_GUEST.name());  azureHostDescription.instanceAdapterReference=UriUtils.buildUri(host,AzureUriPaths.AZURE_INSTANCE_ADAPTER);  azureHostDescription.enumerationAdapterReference=UriUtils.buildUri(host,AzureUriPaths.AZURE_ENUMERATION_ADAPTER);  azureHostDescription.authCredentialsLink=authLink;  TestUtils.doPost(host,azureHostDescription,ComputeDescription.class,UriUtils.buildUri(host,ComputeDescriptionService.FACTORY_LINK));  ComputeState azureComputeHost=new ComputeState();  azureComputeHost.id=UUID.randomUUID().toString();  azureComputeHost.name=azureHostDescription.name;  azureComputeHost.documentSelfLink=azureComputeHost.id;  azureComputeHost.descriptionLink=UriUtils.buildUriPath(ComputeDescriptionService.FACTORY_LINK,azureHostDescription.id);  azureComputeHost.resourcePoolLink=resourcePoolLink;  ComputeState returnState=TestUtils.doPost(host,azureComputeHost,ComputeState.class,UriUtils.buildUri(host,ComputeService.FACTORY_LINK));  return returnState;}  }
class C{  public ChoiceKind createChoiceKindFromString(EDataType eDataType,String initialValue){  ChoiceKind result=ChoiceKind.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public static byte[] encodeBase64(byte[] binaryData,boolean isChunked){  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  int encodedDataLength=0;  int nbrChunks=0;  if (fewerThan24bits != 0) {    encodedDataLength=(numberTriplets + 1) * 4;  } else {    encodedDataLength=numberTriplets * 4;  }  if (isChunked) {    nbrChunks=(CHUNK_SEPARATOR.length == 0 ? 0 : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));    encodedDataLength+=nbrChunks * CHUNK_SEPARATOR.length;  }  encodedData=new byte[encodedDataLength];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  int nextSeparatorIndex=CHUNK_SIZE;  int chunksSoFar=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];    encodedIndex+=4;    if (isChunked) {      if (encodedIndex == nextSeparatorIndex) {        System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedIndex,CHUNK_SEPARATOR.length);        chunksSoFar++;        nextSeparatorIndex=(CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);        encodedIndex+=CHUNK_SEPARATOR.length;      }    }  }  dataIndex=i * 3;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  if (isChunked) {    if (chunksSoFar < nbrChunks) {      System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedDataLength - CHUNK_SEPARATOR.length,CHUNK_SEPARATOR.length);    }  }  return encodedData;}  }
class C{  private SortedMap<MessageUid,MaildirMessageName> truncateMap(Map<MessageUid,MaildirMessageName> map,MessageUid from,MessageUid to){  TreeMap<MessageUid,MaildirMessageName> sortedMap;  if (map instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)map; else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(map);  if (to != null)   return sortedMap.subMap(from,to.next());  return sortedMap.tailMap(from);}  }
class C{  protected boolean updateAttachmentPoint(){  boolean moved=false;  this.oldAPs=attachmentPoints;  if (attachmentPoints == null || attachmentPoints.isEmpty())   return false;  List<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();  if (attachmentPoints != null)   apList.addAll(attachmentPoints);  Map<Long,AttachmentPoint> newMap=getAPMap(apList);  if (newMap == null || newMap.size() != apList.size()) {    moved=true;  }  if (moved) {    log.info("updateAttachmentPoint: ap {}  newmap {} ",attachmentPoints,newMap);    List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>();    if (newMap != null)     newAPList.addAll(newMap.values());    this.attachmentPoints=newAPList;  }  return moved;}  }
class C{  public void home(){  setCaretPosition(lineStart - 1);}  }
class C{  public static String join(long[] self,String separator){  StringBuilder buffer=new StringBuilder();  boolean first=true;  if (separator == null)   separator="";  for (  long next : self) {    if (first) {      first=false;    } else {      buffer.append(separator);    }    buffer.append(next);  }  return buffer.toString();}  }
class C{  public PImage(){  format=ARGB;}  }
class C{  private PostgreSQLTextNodeLoader(){}  }
class C{  public static String decodeString(String s){  return new String(decode(s));}  }
class C{  public Intent putExtra(String name,String[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putStringArray(name,value);  return this;}  }
class C{  public static PaymentType toPaymentType(VOPaymentType voPaymentType) throws ValidationException {  if (voPaymentType == null) {    return null;  }  BLValidator.isId(FIELD_NAME_PAYMENT_TYPE_ID,voPaymentType.getPaymentTypeId(),true);  PaymentType paymentType=new PaymentType();  copyAttributes(paymentType,voPaymentType);  return paymentType;}  }
class C{  public T caseAnonymous_afterCode_1_(Anonymous_afterCode_1_ object){  return null;}  }
class C{  protected static double adjustWithin2PI(double num){  if (num < 0) {    do     num+=MoreMath.TWO_PI; while (num < 0);  } else   if (num > MoreMath.TWO_PI) {    do     num-=MoreMath.TWO_PI; while (num > MoreMath.TWO_PI);  }  return num;}  }
class C{  public boolean hasPostDial(){  return parameters.getValue(POSTDIAL) != null;}  }
class C{  private boolean isNumericString(final String s){  int i=0;  if (s.length() == 0) {    return false;  }  final char[] chars=s.toCharArray();  boolean seenDot=false;  if (chars[0] == '+' || chars[0] == '-') {    i++;  }  while (i < s.length()) {    if (chars[i] == '.') {      if (seenDot) {        return false;      }      seenDot=true;    } else     if (chars[i] < '0' || chars[i] > '9') {      return false;    }    i++;  }  return true;}  }
class C{  public static DataDisplayTable listNameEntries(Font font){  String[] header={"Platform","Encoding","Language","Name","Value"};  Align[] displayAlignment={Align.Left,Align.Left,Align.Left,Align.Left,Align.Left};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  NameTable nameTable=(NameTable)FontUtils.getTable(font,Tag.name);  for (  NameEntry entry : nameTable) {    String eidEntry="";    String lidEntry="";switch (PlatformId.valueOf(entry.platformId())) {case Unicode:      eidEntry=UnicodeEncodingId.valueOf(entry.encodingId()).toString();    lidEntry=UnicodeLanguageId.valueOf(entry.languageId()).toString();  break;case Macintosh:eidEntry=MacintoshEncodingId.valueOf(entry.encodingId()).toString();lidEntry=MacintoshLanguageId.valueOf(entry.languageId()).toString();break;case Windows:eidEntry=WindowsEncodingId.valueOf(entry.encodingId()).toString();lidEntry=WindowsLanguageId.valueOf(entry.languageId()).toString();break;default :break;}String[] data={String.format("%s (id=%d)",PlatformId.valueOf(entry.platformId()).toString(),entry.platformId()),String.format("%s (id=%d)",eidEntry,entry.encodingId()),String.format("%s (id=%d)",lidEntry,entry.languageId()),NameId.valueOf(entry.nameId()).toString(),entry.name()};table.add(Arrays.asList(data));}return table;}  }
class C{  @Override public double distance(NumberVector v1,NumberVector v2){  double d=Math.acos(VectorUtil.cosAngle(v1,v2));  return (d > 0) ? d : 0;}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((SerialListener)client).message((SerialMessage)m);}  }
class C{  public String toString(int radix){  return polynomial.toString(radix);}  }
class C{  public ClientComms(IMqttAsyncClient client,MqttClientPersistence persistence,MqttPingSender pingSender) throws MqttException {  this.conState=DISCONNECTED;  this.client=client;  this.persistence=persistence;  this.pingSender=pingSender;  this.pingSender.init(this);  this.tokenStore=new CommsTokenStore(getClient().getClientId());  this.callback=new CommsCallback(this);  this.clientState=new ClientState(persistence,tokenStore,this.callback,this,pingSender);  callback.setClientState(clientState);  log.setResourceName(getClient().getClientId());}  }
class C{  public void dispose(){  setLayerRemovalDelayed(false);  if (projectionSupport != null) {    projectionSupport.dispose();    projectionSupport=null;  }  if (painters != null) {    painters.clear();    painters=null;  }  if (addedLayers != null) {    addedLayers.removeAllElements();    addedLayers=null;  }  currentLayers=null;  projectionFactory=null;  removeComponentListener(this);  removeContainerListener(this);  removeAll();  purgeAndNotifyRemovedLayers();}  }
class C{  public CodecException(){  super();}  }
class C{  public NetObjectList(String lname){  super(lname);}  }
class C{  public List<Statistics> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<Statistics> list=new ArrayList<Statistics>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public DriverTask discoverStoragePorts(StorageSystem storageSystem,List<StoragePort> storagePorts){  LOG.info("Discovering storage ports for [{}] {} {}",storageSystem.getSystemName(),storageSystem.getIpAddress(),storageSystem.getNativeId());  DellSCDriverTask task=new DellSCDriverTask("discoverStoragePorts");  try {    String ssn=storageSystem.getNativeId();    StorageCenterAPI api=connectionManager.getConnection(ssn);    Map<String,List<ScControllerPort>> ports=getPortList(api,ssn);    for (    Entry<String,List<ScControllerPort>> entry : ports.entrySet()) {      for (      ScControllerPort scPort : entry.getValue()) {        StoragePort port=util.getStoragePortForControllerPort(api,scPort,entry.getKey());        LOG.info("Discovered Port {}, storageSystem {}",scPort.instanceId,scPort.scSerialNumber);        storagePorts.add(port);      }    }    task.setStatus(DriverTask.TaskStatus.READY);  } catch (  Exception e) {    String failureMessage=String.format("Error getting port information: %s",e);    task.setFailed(failureMessage);    LOG.warn(failureMessage);  }  return task;}  }
class C{  public boolean isParent(){  Object oo=get_Value(COLUMNNAME_IsParent);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void processConstraints(List<ITypeConstraint2> usedIn){  Iterator<ITypeConstraint2> iter=usedIn.iterator();  while (iter.hasNext()) {    ITypeConstraint2 tc=iter.next();    maintainSimpleConstraint(tc);  }}  }
class C{  public boolean check(ThreadInfo ti){  boolean result=true;  Iterator filterIter=filters.values().iterator();  while (result && filterIter.hasNext()) {    Filter filter=(Filter)filterIter.next();    result=filter.matches(ti);  }  return (result);}  }
class C{  public boolean isMaxYSet(int scale){  return mMaxY[scale] != -MathHelper.NULL_VALUE;}  }
class C{  public synchronized void populateDiffPane(@NotNull final Project project,@NotNull final GitRepository gitRepository,@NotNull final String sourceBranchBeingCompared,@NotNull final String targetBranchBeingCompared,@NotNull final GitCommitCompareInfo myCompareInfo){  final GitRemoteBranch gitRemoteBranch=this.getSelectedRemoteBranch();  final String currBranch=this.sourceBranch.getText();  if (gitRemoteBranch != null && StringUtils.equals(gitRemoteBranch.getName(),targetBranchBeingCompared) && StringUtils.isNotEmpty(currBranch) && StringUtils.equals(currBranch,sourceBranchBeingCompared)) {    this.quickDiffPane.removeAll();    JComponent myDiffPanel=createDiffPaneBrowser(project,myCompareInfo);    this.quickDiffPane.addTab(TfPluginBundle.message(TfPluginBundle.KEY_CREATE_PR_CHANGES_PANE_TITLE),AllIcons.Actions.Diff,myDiffPanel);    JComponent myCommitsPanel=createCommitsListPane(project,gitRepository,myCompareInfo);    this.quickDiffPane.addTab(TfPluginBundle.message(TfPluginBundle.KEY_CREATE_PR_COMMITS_PANE_TITLE),AllIcons.Actions.Commit,myCommitsPanel);  }}  }
class C{  private void writeFormString(OutputStream writer,String key,String value) throws IOException {  String stringFieldBuilder=startBoundary + "\r\n" + "Content-Disposition: form-data; name=\""+ key+ "\"\r\n"+ "Content-Type: text/plain; charset="+ getParamsEncoding()+ "\r\n\r\n";  writer.write(stringFieldBuilder.getBytes(getParamsEncoding()));  writer.write(value.getBytes(getParamsEncoding()));}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  long adjustPriceModelStartTimeToFreePeriod(long priceModelStart,long priceModelEnd,long freePeriodEnd){  if (freePeriodEnd >= priceModelEnd) {    return priceModelEnd;  } else {    return Math.max(priceModelStart,freePeriodEnd);  }}  }
class C{  private void initialize(Context context){  setBackgroundColor(ContextCompat.getColor(context,R.color.isl_target_activity_header_view_background));  Resources resources=context.getResources();  height=resources.getDimensionPixelSize(R.dimen.isl_target_activity_header_view_height);  setTextSize(TypedValue.COMPLEX_UNIT_PX,resources.getDimensionPixelSize(R.dimen.isl_target_activity_header_view_font_size));  setTextColor(ContextCompat.getColor(context,R.color.isl_target_activity_header_view_text_color));  setSingleLine(true);  setEllipsize(TextUtils.TruncateAt.END);  int padding=resources.getDimensionPixelSize(R.dimen.isl_default_padding);  setPadding(getPaddingLeft(),padding,getPaddingRight(),padding);}  }
class C{  @Override public void stopMonitoringStaleSystem(){  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  Iterator<Map.Entry<String,DistributedQueueItemProcessedCallback>> iter=SMIS_PROVIDERS_CACHE.entrySet().iterator();  StorageProvider smisprovider=null;  while (iter.hasNext()) {    Map.Entry<String,DistributedQueueItemProcessedCallback> entry=iter.next();    String smisProvoiderURI=entry.getKey();    _logger.debug("smisProvoiderURI :{}",smisProvoiderURI);    try {      smisprovider=_dbClient.queryObject(StorageProvider.class,URI.create(smisProvoiderURI));    } catch (    final DatabaseException e) {      _logger.error(e.getMessage(),e);    }    if (null == smisprovider || smisprovider.getInactive()) {      _logger.info("Stale SMIS Provider {} has been removed from monitoring",smisProvoiderURI);      _connectionFactory.unsubscribeSMIProviderConnection(smisProvoiderURI);      try {        entry.getValue().itemProcessed();      } catch (      Exception e) {        _logger.error("Exception occurred while removing monitoringJob token from ZooKeeper queue",e);      } finally {        iter.remove();        ACTIVE_SMIS_PROVIDERS_CACHE.remove(smisProvoiderURI);      }    }  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  @Override protected String aggregateName(){  if (!StringUtils.isEmpty(alias)) {    return alias;  }  if (isMax) {    return "MAX(" + column + ")";  }  return "MIN(" + column + ")";}  }
class C{  @Override public void cancelClicked(){  view.hide();}  }
class C{  public void trimToSize(){  if (mySize < 2)   return;  Object[] array=(Object[])myElem;  int oldCapacity=array.length;  if (mySize < oldCapacity) {    modCount++;    myElem=Arrays.copyOf(array,mySize);  }}  }
class C{  public void breadthFirstTraversal(){  if (root == null)   return;  java.util.Queue<TreeNode<E>> queue=new java.util.LinkedList<>();  queue.add(root);  while (!queue.isEmpty()) {    TreeNode<E> current=queue.element();    if (current.left != null) {      queue.add(current.left);    }    if (current.right != null) {      queue.add(current.right);    }    System.out.print(queue.remove().element + " ");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public boolean isMarkupLanguage(){  return false;}  }
class C{  public String toString(){  return "MWorkbench ID=" + AD_Workbench_ID + " "+ Name+ ", windows="+ m_windows.size()+ ", LinkColumn="+ ColumnName;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenFldVld[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_fmtInfo = ").append(m_fmtInfo);  buffer.append(", m_vldType = ").append(m_vldType);  buffer.append(", m_vldParam1 = ").append(m_vldParam1);  buffer.append(", m_vldParam2 = ").append(m_vldParam2);  buffer.append(", m_isRequired = ").append(m_isRequired);  buffer.append("]");  return buffer.toString();}  }
class C{  public static boolean actionPerformed(String actionCommand,int WindowNo,Container c){  MRole role=MRole.getDefault();  if (actionCommand.equals("PrintScreen")) {    PrintScreenPainter.printScreen(Env.getFrame(c));  } else   if (actionCommand.equals("ScreenShot")) {    ScreenShot.createJPEG(Env.getFrame(c),null);  } else   if (actionCommand.equals("Exit")) {    if (ADialog.ask(WindowNo,c,"ExitApplication?")) {      AMenu aMenu=(AMenu)Env.getWindow(0);      aMenu.dispose();    }  } else   if (actionCommand.equals("Logout")) {    AMenu aMenu=(AMenu)Env.getWindow(0);    aMenu.logout();  } else   if (actionCommand.equals("InfoProduct") && AEnv.canAccessInfo("PRODUCT")) {    org.compiere.apps.search.Info.showProduct(Env.getFrame(c),WindowNo);  } else   if (actionCommand.equals("InfoBPartner") && AEnv.canAccessInfo("BPARTNER")) {    org.compiere.apps.search.Info.showBPartner(Env.getFrame(c),WindowNo);  } else   if (actionCommand.equals("InfoAsset") && AEnv.canAccessInfo("ASSET")) {    org.compiere.apps.search.Info.showAsset(Env.getFrame(c),WindowNo);  } else   if (actionCommand.equals("InfoAccount") && MRole.getDefault().isShowAcct() && AEnv.canAccessInfo("ACCOUNT")) {    new org.compiere.acct.AcctViewer();  } else   if (actionCommand.equals("InfoSchedule") && AEnv.canAccessInfo("SCHEDULE")) {    new org.compiere.apps.search.InfoSchedule(Env.getFrame(c),null,false);  } else   if (actionCommand.equals("InfoMRP") && AEnv.canAccessInfo("MRP")) {    CFrame frame=(CFrame)Env.getFrame(c);    int m_menu_id=MMenu.getMenu_ID("MRP Info");    AMenu menu=AEnv.getAMenu(frame);    AMenuStartItem form=new AMenuStartItem(m_menu_id,true,Msg.translate(Env.getCtx(),"MRP Info"),menu);    form.start();  } else   if (actionCommand.equals("InfoCRP") && AEnv.canAccessInfo("CRP")) {    CFrame frame=(CFrame)Env.getFrame(c);    int m_menu_id=MMenu.getMenu_ID("CRP Info");    AMenu menu=AEnv.getAMenu(frame);    AMenuStartItem form=new AMenuStartItem(m_menu_id,true,Msg.translate(Env.getCtx(),"CRP Info"),menu);    form.start();  } else   if (actionCommand.equals("InfoOrder") && AEnv.canAccessInfo("ORDER")) {    org.compiere.apps.search.Info.showOrder(Env.getFrame(c),WindowNo,"");  } else   if (actionCommand.equals("InfoInvoice") && AEnv.canAccessInfo("INVOICE")) {    org.compiere.apps.search.Info.showInvoice(Env.getFrame(c),WindowNo,"");  } else   if (actionCommand.equals("InfoInOut") && AEnv.canAccessInfo("INOUT")) {    org.compiere.apps.search.Info.showInOut(Env.getFrame(c),WindowNo,"");  } else   if (actionCommand.equals("InfoPayment") && AEnv.canAccessInfo("PAYMENT")) {    org.compiere.apps.search.Info.showPayment(Env.getFrame(c),WindowNo,"");  } else   if (actionCommand.equals("InfoCashLine") && AEnv.canAccessInfo("CASHJOURNAL")) {    org.compiere.apps.search.Info.showCashLine(Env.getFrame(c),WindowNo,"");  } else   if (actionCommand.equals("InfoAssignment") && AEnv.canAccessInfo("RESOURCE")) {    org.compiere.apps.search.Info.showAssignment(Env.getFrame(c),WindowNo,"");  } else   if (actionCommand.equals("WorkFlow")) {    startWorkflowProcess(0,0);  } else   if (actionCommand.equals("Home")) {    showWindow(Env.getWindow(0));  } else   if (actionCommand.equals("Calculator")) {    Calculator calc=new org.compiere.grid.ed.Calculator(Env.getFrame(c));    calc.setDisposeOnEqual(false);    AEnv.showCenterScreen(calc);  } else   if (actionCommand.equals("Calendar")) {    AEnv.showCenterScreen(new org.compiere.grid.ed.Calendar(Env.getFrame(c)));  } else   if (actionCommand.equals("Editor")) {    AEnv.showCenterScreen(new org.compiere.grid.ed.Editor(Env.getFrame(c)));  } else   if (actionCommand.equals("Script")) {    new BeanShellEditor(Env.getFrame(c));  } else   if (actionCommand.equals("Preference")) {    if (role.isShowPreference()) {      AEnv.showCenterScreen(new Preference(Env.getFrame(c),WindowNo));    }  } else   if (actionCommand.equals("Online")) {    Env.startBrowser(org.compiere.Adempiere.getOnlineHelpURL());  } else   if (actionCommand.equals("EMailSupport")) {    ADialog.createSupportEMail(Env.getFrame(c),Env.getFrame(c).getTitle(),"\n\n");  } else   if (actionCommand.equals("About")) {    AEnv.showCenterScreen(new AboutBox(Env.getFrame(c)));  } else   return false;  return true;}  }
class C{  public void update(List<?> values){  for (  Object value : values) {    this.update(Value.get(value));  }}  }
class C{  private void substituteDestructive(RecursiveProduction other) throws InterruptedException {  Nonterminal ont=other.nt;  Set<RE> ocoeffs=new HashSet<RE>(getCoeff(ont));  if (!ocoeffs.isEmpty()) {    RE oSelfStar=unionREs(other.getCoeff(ont)).star();    for (    RE oterm : other.terms) {      for (      RE c : ocoeffs) {        RE res=concat(c,concat(oSelfStar,oterm));        addTerm(res);      }    }    for (    Map.Entry<Nonterminal,Set<RE>> entry : other.coeffs.entrySet()) {      Nonterminal substVar=entry.getKey();      Set<RE> substCoeffs=entry.getValue();      for (      RE c : ocoeffs) {        for (        RE oc : substCoeffs) {          RE newRE=concat(c,concat(oSelfStar,oc));          addCoeff(substVar,newRE);        }      }    }  }  removeCoeff(ont);}  }
class C{  public void die(String what){  stop();  throw new RuntimeException(what);}  }
class C{  public IgniteSpiMultiException(String msg,@Nullable Throwable cause,@Nullable Collection<Throwable> nestedCauses){  super(msg,cause);  if (nestedCauses != null)   causes.addAll(nestedCauses);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean x=evalBool(stack.pop());  if (stack.getUIMgr() != null)   stack.getUIMgr().putBoolean("native_output_resolution_switching",x);  return null;}  }
class C{  public DrawerBuilder withStickyFooterShadow(boolean stickyFooterShadow){  this.mStickyFooterShadow=stickyFooterShadow;  return this;}  }
class C{  private void pruneScrapViews(){  final int maxViews=activeViews.length;  final int viewTypeCount=this.viewTypeCount;  final SparseArray<View>[] scrapViews=this.scrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final SparseArray<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      scrapPile.remove(scrapPile.keyAt(size--));    }  }}  }
class C{  private void onHotspotBoundsChanged(){  final int count=mExitingRipplesCount;  final RippleForeground[] ripples=mExitingRipples;  for (int i=0; i < count; i++) {    ripples[i].onHotspotBoundsChanged();  }  if (mRipple != null) {    mRipple.onHotspotBoundsChanged();  }  if (mBackground != null) {    mBackground.onHotspotBoundsChanged();  }}  }
class C{  public void writeValue(Value v){  int start=pos;  if (v == ValueNull.INSTANCE) {    data[pos++]=0;    return;  }  int type=v.getType();switch (type) {case Value.BOOLEAN:    writeByte((byte)(v.getBoolean().booleanValue() ? BOOLEAN_TRUE : BOOLEAN_FALSE));  break;case Value.BYTE:writeByte((byte)type);writeByte(v.getByte());break;case Value.SHORT:writeByte((byte)type);writeShortInt(v.getShort());break;case Value.INT:{int x=v.getInt();if (x < 0) {writeByte((byte)INT_NEG);writeVarInt(-x);} else if (x < 16) {writeByte((byte)(INT_0_15 + x));} else {writeByte((byte)type);writeVarInt(x);}break;}case Value.LONG:{long x=v.getLong();if (x < 0) {writeByte((byte)LONG_NEG);writeVarLong(-x);} else if (x < 8) {writeByte((byte)(LONG_0_7 + x));} else {writeByte((byte)type);writeVarLong(x);}break;}case Value.DECIMAL:{BigDecimal x=v.getBigDecimal();if (BigDecimal.ZERO.equals(x)) {writeByte((byte)DECIMAL_0_1);} else if (BigDecimal.ONE.equals(x)) {writeByte((byte)(DECIMAL_0_1 + 1));} else {int scale=x.scale();BigInteger b=x.unscaledValue();int bits=b.bitLength();if (bits <= 63) {if (scale == 0) {writeByte((byte)DECIMAL_SMALL_0);writeVarLong(b.longValue());} else {writeByte((byte)DECIMAL_SMALL);writeVarInt(scale);writeVarLong(b.longValue());}} else {writeByte((byte)type);writeVarInt(scale);byte[] bytes=b.toByteArray();writeVarInt(bytes.length);write(bytes,0,bytes.length);}}break;}case Value.TIME:if (STORE_LOCAL_TIME) {writeByte((byte)LOCAL_TIME);ValueTime t=(ValueTime)v;long nanos=t.getNanos();long millis=nanos / 1000000;nanos-=millis * 1000000;writeVarLong(millis);writeVarLong(nanos);} else {writeByte((byte)type);writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));}break;case Value.DATE:{if (STORE_LOCAL_TIME) {writeByte((byte)LOCAL_DATE);long x=((ValueDate)v).getDateValue();writeVarLong(x);} else {writeByte((byte)type);long x=DateTimeUtils.getTimeLocalWithoutDst(v.getDate());writeVarLong(x / MILLIS_PER_MINUTE);}break;}case Value.TIMESTAMP:{if (STORE_LOCAL_TIME) {writeByte((byte)LOCAL_TIMESTAMP);ValueTimestamp ts=(ValueTimestamp)v;long dateValue=ts.getDateValue();writeVarLong(dateValue);long nanos=ts.getTimeNanos();long millis=nanos / 1000000;nanos-=millis * 1000000;writeVarLong(millis);writeVarLong(nanos);} else {Timestamp ts=v.getTimestamp();writeByte((byte)type);writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(ts));writeVarInt(ts.getNanos() % 1000000);}break;}case Value.TIMESTAMP_TZ:{ValueTimestampTimeZone ts=(ValueTimestampTimeZone)v;writeByte((byte)type);writeVarLong(ts.getDateValue());writeVarLong(ts.getTimeNanos());writeVarInt(ts.getTimeZoneOffsetMins());}case Value.GEOMETRY:case Value.JAVA_OBJECT:{writeByte((byte)type);byte[] b=v.getBytesNoCopy();int len=b.length;writeVarInt(len);write(b,0,len);break;}case Value.BYTES:{byte[] b=v.getBytesNoCopy();int len=b.length;if (len < 32) {writeByte((byte)(BYTES_0_31 + len));write(b,0,len);} else {writeByte((byte)type);writeVarInt(len);write(b,0,len);}break;}case Value.UUID:{writeByte((byte)type);ValueUuid uuid=(ValueUuid)v;writeLong(uuid.getHigh());writeLong(uuid.getLow());break;}case Value.STRING:{String s=v.getString();int len=s.length();if (len < 32) {writeByte((byte)(STRING_0_31 + len));writeStringWithoutLength(s,len);} else {writeByte((byte)type);writeString(s);}break;}case Value.STRING_IGNORECASE:case Value.STRING_FIXED:writeByte((byte)type);writeString(v.getString());break;case Value.DOUBLE:{double x=v.getDouble();if (x == 1.0d) {writeByte((byte)(DOUBLE_0_1 + 1));} else {long d=Double.doubleToLongBits(x);if (d == ValueDouble.ZERO_BITS) {writeByte((byte)DOUBLE_0_1);} else {writeByte((byte)type);writeVarLong(Long.reverse(d));}}break;}case Value.FLOAT:{float x=v.getFloat();if (x == 1.0f) {writeByte((byte)(FLOAT_0_1 + 1));} else {int f=Float.floatToIntBits(x);if (f == ValueFloat.ZERO_BITS) {writeByte((byte)FLOAT_0_1);} else {writeByte((byte)type);writeVarInt(Integer.reverse(f));}}break;}case Value.BLOB:case Value.CLOB:{writeByte((byte)type);if (v instanceof ValueLob) {ValueLob lob=(ValueLob)v;lob.convertToFileIfRequired(handler);byte[] small=lob.getSmall();if (small == null) {int t=-1;if (!lob.isLinkedToTable()) {t=-2;}writeVarInt(t);writeVarInt(lob.getTableId());writeVarInt(lob.getObjectId());writeVarLong(lob.getPrecision());writeByte((byte)(lob.isCompressed() ? 1 : 0));if (t == -2) {writeString(lob.getFileName());}} else {writeVarInt(small.length);write(small,0,small.length);}} else {ValueLobDb lob=(ValueLobDb)v;byte[] small=lob.getSmall();if (small == null) {writeVarInt(-3);writeVarInt(lob.getTableId());writeVarLong(lob.getLobId());writeVarLong(lob.getPrecision());} else {writeVarInt(small.length);write(small,0,small.length);}}break;}case Value.ARRAY:{writeByte((byte)type);Value[] list=((ValueArray)v).getList();writeVarInt(list.length);for (Value x : list) {writeValue(x);}break;}case Value.RESULT_SET:{writeByte((byte)type);try {ResultSet rs=((ValueResultSet)v).getResultSet();rs.beforeFirst();ResultSetMetaData meta=rs.getMetaData();int columnCount=meta.getColumnCount();writeVarInt(columnCount);for (int i=0; i < columnCount; i++) {writeString(meta.getColumnName(i + 1));writeVarInt(meta.getColumnType(i + 1));writeVarInt(meta.getPrecision(i + 1));writeVarInt(meta.getScale(i + 1));}while (rs.next()) {writeByte((byte)1);for (int i=0; i < columnCount; i++) {int t=DataType.getValueTypeFromResultSet(meta,i + 1);Value val=DataType.readValue(null,rs,i + 1,t);writeValue(val);}}writeByte((byte)0);rs.beforeFirst();} catch (SQLException e) {throw DbException.convert(e);}break;}default :DbException.throwInternalError("type=" + v.getType());}if (SysProperties.CHECK2) {if (pos - start != getValueLen(v,handler)) {throw DbException.throwInternalError("value size error: got " + (pos - start) + " expected "+ getValueLen(v,handler));}}}  }
class C{  public final Theme newTheme(){  return new Theme();}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  int s=size();  ConstPool cp=getConstPool();  String[] names=new String[s];  int[] flags=new int[s];  for (int i=0; i < s; i++) {    names[i]=cp.getUtf8Info(name(i));    flags[i]=accessFlags(i);  }  return new MethodParametersAttribute(newCp,names,flags);}  }
class C{  public static short[] toPrimitive(Short[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_SHORT_ARRAY;  }  final short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].shortValue();  }  return result;}  }
class C{  public final void testEncryptedPrivateKeyInfoStringbyteArray6(){  try {    new EncryptedPrivateKeyInfo("0",new byte[]{});    fail("NoSuchAlgorithmException expected");  } catch (  NoSuchAlgorithmException e) {  }}  }
class C{  public void copyArea(int x,int y,int width,int height,int dx,int dy){}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  @Override public List refreshTicks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){  List ticks=null;  if (RectangleEdge.isTopOrBottom(edge)) {    ticks=refreshTicksHorizontal(g2,dataArea,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    ticks=refreshTicksVertical(g2,dataArea,edge);  }  return ticks;}  }
class C{  public void ifPresent(Consumer<? super T> action){  if (value != null) {    action.accept(value);  }}  }
class C{  public boolean isAlive(){  return mAlive;}  }
class C{  private String moduleTokens(RoutingContext ctx){  String modPermJson=ctx.request().getHeader(XOkapiHeaders.MODULE_PERMISSIONS);  logger.debug("test-auth: moduleTokens: trying to decode '" + modPermJson + "'");  HashMap<String,String> tokens=new HashMap<>();  if (modPermJson != null && !modPermJson.isEmpty()) {    JsonObject jo=new JsonObject(modPermJson);    String permstr="";    for (    String mod : jo.fieldNames()) {      JsonArray ja=jo.getJsonArray(mod);      for (int i=0; i < ja.size(); i++) {        String p=ja.getString(i);        if (!permstr.isEmpty())         permstr+=",";        permstr+=p;      }      String tok=token(mod,permstr);      tokens.put(mod,tok);    }  }  if (!tokens.isEmpty()) {    tokens.put("_",ctx.request().getHeader(XOkapiHeaders.TOKEN));  }  String alltokens=Json.encode(tokens);  logger.debug("test-auth: module tokens for " + modPermJson + "  :  "+ alltokens);  return alltokens;}  }
class C{  private void processItemAboutAttribute(Attributes a){  if (a.getLength() > 0) {    String res=a.getValue(0);    itm.setAboutAttribute(res);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof VOPaymentType) {    VOPaymentType other=(VOPaymentType)obj;    if (paymentTypeId != null) {      return paymentTypeId.equals(other.paymentTypeId);    }  }  return false;}  }
class C{  public void endElement(String name,String nsPrefix,String nsURI){  IXMLElement elt=(IXMLElement)this.stack.pop();  if (elt.getChildrenCount() == 1) {    IXMLElement child=elt.getChildAtIndex(0);    if (child.getName() == null) {      elt.setContent(child.getContent());      elt.removeChildAtIndex(0);    }  }}  }
class C{  protected static DataCiteMetadata.AlternateIdentifiers convertEmlAlternateIdentifiers(List<String> alternateIdentifiers){  DataCiteMetadata.AlternateIdentifiers alternates=FACTORY.createDataCiteMetadataAlternateIdentifiers();  for (  String alternateIdentifier : alternateIdentifiers) {    DataCiteMetadata.AlternateIdentifiers.AlternateIdentifier alternate=FACTORY.createDataCiteMetadataAlternateIdentifiersAlternateIdentifier();    alternate.setValue(alternateIdentifier);    alternate.setAlternateIdentifierType(ALTERNATE_IDENTIFIER_TYPE_TEXT);    alternates.getAlternateIdentifier().add(alternate);  }  return alternates;}  }
class C{  public UnrecoverableKeyException(){  super();}  }
class C{  private void init(){  if ("sugar mill".equals(getName())) {    input="sugar cane";    container="empty sack";    output="sugar";  } else   if ("scroll eraser".equals(getName())) {    input="marked scroll";    container="money";    output="empty scroll";  } else {    input="apple";    container="bottle";    output="apple juice";  }}  }
class C{  @Override public void failConnect(long time){  getConnectionFailProbe().start();  _failCountTotal.incrementAndGet();  logFinest(L.l("failConnect: time={0}, _failTime={1}",time,_failTime));synchronized (this) {    if (_failTime < time) {      degrade(time);      _firstSuccessTime=0;      _failTime=time;      _lastFailTime=time;      _lastFailConnectTime=time;      _dynamicFailRecoverTime*=2;      if (_loadBalanceFailRecoverTime < _dynamicFailRecoverTime)       _dynamicFailRecoverTime=_loadBalanceFailRecoverTime;      _state=_state.toFail();    }  }}  }
class C{  public static final int BuildIntegerBE(byte bytevec[]){  return BuildIntegerBE(bytevec,0);}  }
class C{  public T caseEntitySource(EntitySource object){  return null;}  }
class C{  public void updateAccess(boolean editor,boolean commercials){  this.editorAccess=editor;  this.commercialAccess=commercials;  updateInfoText();}  }
class C{  public void diff_cleanupMerge(LinkedList<Diff> diffs){  diffs.add(new Diff(Operation.EQUAL,""));  ListIterator<Diff> pointer=diffs.listIterator();  int count_delete=0;  int count_insert=0;  String text_delete="";  String text_insert="";  Diff thisDiff=pointer.next();  Diff prevEqual=null;  int commonlength;  while (thisDiff != null) {switch (thisDiff.operation) {case INSERT:      count_insert++;    text_insert+=thisDiff.text;  prevEqual=null;break;case DELETE:count_delete++;text_delete+=thisDiff.text;prevEqual=null;break;case EQUAL:if (count_delete + count_insert > 1) {boolean both_types=count_delete != 0 && count_insert != 0;pointer.previous();while (count_delete-- > 0) {pointer.previous();pointer.remove();}while (count_insert-- > 0) {pointer.previous();pointer.remove();}if (both_types) {commonlength=diff_commonPrefix(text_insert,text_delete);if (commonlength != 0) {if (pointer.hasPrevious()) {thisDiff=pointer.previous();assert thisDiff.operation == Operation.EQUAL : "Previous diff should have been an equality.";thisDiff.text+=text_insert.substring(0,commonlength);pointer.next();} else {pointer.add(new Diff(Operation.EQUAL,text_insert.substring(0,commonlength)));}text_insert=text_insert.substring(commonlength);text_delete=text_delete.substring(commonlength);}commonlength=diff_commonSuffix(text_insert,text_delete);if (commonlength != 0) {thisDiff=pointer.next();thisDiff.text=text_insert.substring(text_insert.length() - commonlength) + thisDiff.text;text_insert=text_insert.substring(0,text_insert.length() - commonlength);text_delete=text_delete.substring(0,text_delete.length() - commonlength);pointer.previous();}}if (text_delete.length() != 0) {pointer.add(new Diff(Operation.DELETE,text_delete));}if (text_insert.length() != 0) {pointer.add(new Diff(Operation.INSERT,text_insert));}thisDiff=pointer.hasNext() ? pointer.next() : null;} else if (prevEqual != null) {prevEqual.text+=thisDiff.text;pointer.remove();thisDiff=pointer.previous();pointer.next();}count_insert=0;count_delete=0;text_delete="";text_insert="";prevEqual=thisDiff;break;}thisDiff=pointer.hasNext() ? pointer.next() : null;}if (diffs.getLast().text.length() == 0) {diffs.removeLast();}boolean changes=false;pointer=diffs.listIterator();Diff prevDiff=pointer.hasNext() ? pointer.next() : null;thisDiff=pointer.hasNext() ? pointer.next() : null;Diff nextDiff=pointer.hasNext() ? pointer.next() : null;while (nextDiff != null) {if (prevDiff.operation == Operation.EQUAL && nextDiff.operation == Operation.EQUAL) {if (thisDiff.text.endsWith(prevDiff.text)) {thisDiff.text=prevDiff.text + thisDiff.text.substring(0,thisDiff.text.length() - prevDiff.text.length());nextDiff.text=prevDiff.text + nextDiff.text;pointer.previous();pointer.previous();pointer.previous();pointer.remove();pointer.next();thisDiff=pointer.next();nextDiff=pointer.hasNext() ? pointer.next() : null;changes=true;} else if (thisDiff.text.startsWith(nextDiff.text)) {prevDiff.text+=nextDiff.text;thisDiff.text=thisDiff.text.substring(nextDiff.text.length()) + nextDiff.text;pointer.remove();nextDiff=pointer.hasNext() ? pointer.next() : null;changes=true;}}prevDiff=thisDiff;thisDiff=nextDiff;nextDiff=pointer.hasNext() ? pointer.next() : null;}if (changes) {diff_cleanupMerge(diffs);}}  }
class C{  public void processValueChange(ValueChangeEvent event){  String selectedMarketplaceId=(String)event.getNewValue();  this.marketplaceBean.processValueChange(event);  if (selectedMarketplaceId.equals("0")) {    marketplace=null;    setBrandingUrl(null);  } else {    try {      marketplace=getMarketplaceService().getMarketplaceById(selectedMarketplaceId);      setBrandingUrl(getMarketplaceService().getBrandingUrl(selectedMarketplaceId));    } catch (    ObjectNotFoundException e) {      getMarketplaceBean().checkMarketplaceDropdownAndMenuVisibility(null);      marketplace=null;      setBrandingUrl(null);    }  }}  }
class C{  public BaseResponseContext dispatchRequest(JsonPath jsonPath,String requestType,QueryParams queryParams,@SuppressWarnings("SameParameterValue") RequestBody requestBody){  try {    return handleRequest(jsonPath,requestType,queryParams,requestBody);  } catch (  Exception e) {    Optional<JsonApiExceptionMapper> exceptionMapper=exceptionMapperRegistry.findMapperFor(e.getClass());    if (exceptionMapper.isPresent()) {      return exceptionMapper.get().toErrorResponse(e);    } else {      throw e;    }  }}  }
class C{  public static FlinkRunner fromOptions(PipelineOptions options){  FlinkPipelineOptions flinkOptions=PipelineOptionsValidator.validate(FlinkPipelineOptions.class,options);  ArrayList<String> missing=new ArrayList<>();  if (flinkOptions.getAppName() == null) {    missing.add("appName");  }  if (missing.size() > 0) {    throw new IllegalArgumentException("Missing required values: " + Joiner.on(',').join(missing));  }  if (flinkOptions.getFilesToStage() == null) {    flinkOptions.setFilesToStage(detectClassPathResourcesToStage(FlinkRunner.class.getClassLoader()));    LOG.info("PipelineOptions.filesToStage was not specified. " + "Defaulting to files from the classpath: will stage {} files. " + "Enable logging at DEBUG level to see which files will be staged.",flinkOptions.getFilesToStage().size());    LOG.debug("Classpath elements: {}",flinkOptions.getFilesToStage());  }  if (flinkOptions.getFlinkMaster() == null) {    flinkOptions.setFlinkMaster("[auto]");  }  return new FlinkRunner(flinkOptions);}  }
class C{  void parseRow(Map<String,Object> row,Map<String,Map<String,OFFlowMod>> entries){  String switchName=null;  String entryName=null;  StringBuffer matchString=new StringBuffer();  OFFlowMod.Builder fmb=null;  if (!row.containsKey(COLUMN_SWITCH) || !row.containsKey(COLUMN_NAME)) {    log.debug("skipping entry with missing required 'switch' or 'name' entry: {}",row);    return;  }  try {    switchName=(String)row.get(COLUMN_SWITCH);    entryName=(String)row.get(COLUMN_NAME);    if (!entries.containsKey(switchName)) {      entries.put(switchName,new HashMap<String,OFFlowMod>());    }    try {      fmb=OFFactories.getFactory(switchService.getSwitch(DatapathId.of(switchName)).getOFFactory().getVersion()).buildFlowModify();    } catch (    NullPointerException e) {      storageSourceService.deleteRowAsync(TABLE_NAME,entryName);      log.error("Deleting entry {}. Switch {} was not connected to the controller, and we need to know the OF protocol version to compose the flow mod.",entryName,switchName);      return;    }    StaticFlowEntries.initDefaultFlowMod(fmb,entryName);    for (    String key : row.keySet()) {      if (row.get(key) == null) {        continue;      }      if (key.equals(COLUMN_SWITCH) || key.equals(COLUMN_NAME) || key.equals("id")) {        continue;      }      if (key.equals(COLUMN_ACTIVE)) {        if (!Boolean.valueOf((String)row.get(COLUMN_ACTIVE))) {          log.debug("skipping inactive entry {} for switch {}",entryName,switchName);          entries.get(switchName).put(entryName,null);          return;        }      } else       if (key.equals(COLUMN_HARD_TIMEOUT)) {        fmb.setHardTimeout(Integer.valueOf((String)row.get(COLUMN_HARD_TIMEOUT)));      } else       if (key.equals(COLUMN_IDLE_TIMEOUT)) {        fmb.setIdleTimeout(Integer.valueOf((String)row.get(COLUMN_IDLE_TIMEOUT)));      } else       if (key.equals(COLUMN_TABLE_ID)) {        if (fmb.getVersion().compareTo(OFVersion.OF_10) > 0) {          fmb.setTableId(TableId.of(Integer.parseInt((String)row.get(key))));        } else {          log.error("Table not supported in OpenFlow 1.0");        }      } else       if (key.equals(COLUMN_ACTIONS)) {        ActionUtils.fromString(fmb,(String)row.get(COLUMN_ACTIONS),log);      } else       if (key.equals(COLUMN_COOKIE)) {        fmb.setCookie(StaticFlowEntries.computeEntryCookie(Integer.valueOf((String)row.get(COLUMN_COOKIE)),entryName));      } else       if (key.equals(COLUMN_PRIORITY)) {        fmb.setPriority(U16.t(Integer.valueOf((String)row.get(COLUMN_PRIORITY))));      } else       if (key.equals(COLUMN_INSTR_APPLY_ACTIONS)) {        InstructionUtils.applyActionsFromString(fmb,(String)row.get(COLUMN_INSTR_APPLY_ACTIONS),log);      } else       if (key.equals(COLUMN_INSTR_CLEAR_ACTIONS)) {        InstructionUtils.clearActionsFromString(fmb,(String)row.get(COLUMN_INSTR_CLEAR_ACTIONS),log);      } else       if (key.equals(COLUMN_INSTR_EXPERIMENTER)) {        InstructionUtils.experimenterFromString(fmb,(String)row.get(COLUMN_INSTR_EXPERIMENTER),log);      } else       if (key.equals(COLUMN_INSTR_GOTO_METER)) {        InstructionUtils.meterFromString(fmb,(String)row.get(COLUMN_INSTR_GOTO_METER),log);      } else       if (key.equals(COLUMN_INSTR_GOTO_TABLE)) {        InstructionUtils.gotoTableFromString(fmb,(String)row.get(COLUMN_INSTR_GOTO_TABLE),log);      } else       if (key.equals(COLUMN_INSTR_WRITE_ACTIONS)) {        InstructionUtils.writeActionsFromString(fmb,(String)row.get(COLUMN_INSTR_WRITE_ACTIONS),log);      } else       if (key.equals(COLUMN_INSTR_WRITE_METADATA)) {        InstructionUtils.writeMetadataFromString(fmb,(String)row.get(COLUMN_INSTR_WRITE_METADATA),log);      } else {        if (matchString.length() > 0) {          matchString.append(",");        }        matchString.append(key + "=" + row.get(key).toString());      }    }  } catch (  ClassCastException e) {    if (entryName != null && switchName != null) {      log.warn("Skipping entry {} on switch {} with bad data : " + e.getMessage(),entryName,switchName);    } else {      log.warn("Skipping entry with bad data: {} :: {} ",e.getMessage(),e.getStackTrace());    }  }  String match=matchString.toString();  try {    fmb.setMatch(MatchUtils.fromString(match,fmb.getVersion()));  } catch (  IllegalArgumentException e) {    log.error(e.toString());    log.error("Ignoring flow entry {} on switch {} with illegal OFMatch() key: " + match,entryName,switchName);    return;  }catch (  Exception e) {    log.error("OF version incompatible for the match: " + match);    e.printStackTrace();    return;  }  entries.get(switchName).put(entryName,fmb.build());}  }
class C{  private double calculateErrors() throws Exception {  double ret=0, temp=0;  for (int noc=0; noc < m_numAttributes; noc++) {    m_inputs[noc].errorValue(true);  }  for (int noc=0; noc < m_numClasses; noc++) {    temp=m_outputs[noc].errorValue(false);    ret+=temp * temp;  }  return ret;}  }
class C{  @Override synchronized boolean isThresholdTypeValid(ObjectName object,String attribute,Comparable<?> value){  final CounterMonitorObservedObject o=(CounterMonitorObservedObject)getObservedObject(object);  if (o == null)   return false;  Class<? extends Number> c=classForType(o.getType());  return (c.isInstance(o.getThreshold()) && isValidForType(offset,c) && isValidForType(modulus,c));}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public synchronized Vertex addActiveMemory(Vertex vertex){  Vertex activeVertex=getShortTermMemory().createVertex(vertex);  getActiveMemory().add(activeVertex);  for (  MemoryEventListener listener : getListeners()) {    listener.addActiveMemory(vertex);  }  notifyAll();  return activeVertex;}  }
class C{  protected static void diagMid(Point p,int d1,int d2,int delta,int size,int elevationMap[][]){  int x=p.x;  int y;  int hx=x + d2;  int hy;  while ((x < size - d2) && (hx < size)) {    y=p.y;    hy=y + d2;    while ((y < size - d2) && (hy < size)) {      elevationMap[x][y]=middleValue(elevationMap[x][hy],elevationMap[x][y - d2],elevationMap[hx][y],elevationMap[x - d2][y],delta);      y+=d1;      hy=y + d2;    }    x+=d1;    hx=x + d2;  }}  }
class C{  protected void paintHorizontalLabel(Graphics g,int value,Component label){  int labelCenter=xPositionForValue(value);  int labelLeft=labelCenter - (label.getPreferredSize().width / 2);  g.translate(labelLeft,0);  label.paint(g);  g.translate(-labelLeft,0);}  }
class C{  public Spring removeAllListeners(){  mListeners.clear();  return this;}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>HashEntry<K,V> entryForHash(Segment<K,V> seg,int h){  HashEntry<K,V>[] tab;  return (seg == null || (tab=seg.table) == null) ? null : (HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);}  }
class C{  @Scheduled(cron="0 0 1 * * ?") public void removeNotActivatedUsers(){  DateTime now=new DateTime();  List<User> users=userRepository.findAllByActivatedIsFalseAndCreatedDateBefore(now.minusDays(3));  for (  User user : users) {    log.debug("Deleting not activated user {}",user.getLogin());    userRepository.delete(user);    userSearchRepository.delete(user);  }}  }
class C{  @Override public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public void receiveErrorqueryAssociatedCapabilityForFileSystem(java.lang.Exception e){}  }
class C{  public MapImage(){}  }
class C{  void assignZero(){  polynomial.assignZero();}  }
class C{  @Override public String save(){  log.info("Changing the IPT configuration");  boolean baseUrlChanged=false;  if (!stringEquals(baseUrl,cfg.getBaseUrl())) {    log.info("Changing the installation baseURL from [" + cfg.getBaseUrl() + "] to ["+ baseUrl+ "]");    try {      URL burl=new URL(baseUrl);      configManager.setBaseUrl(burl);      updateAllAlternateIdentifiersForIPTURLToResource();      log.info("Installation baseURL successfully changed to[" + baseUrl + "]");      addActionMessage(getText("admin.config.baseUrl.changed"));      addActionMessage(getText("admin.user.login"));      addActionMessage(getText("admin.config.baseUrl.changed.reminder"));      session.remove(Constants.SESSION_USER);      if (URLUtils.isLocalhost(burl)) {        addActionWarning(getText("admin.config.error.localhostURL"));      } else       if (URLUtils.isHostName(burl)) {        log.info("Machine name used in base URL");        addActionWarning(getText("admin.config.baseUrl.sameHostName"));      }      baseUrlChanged=true;    } catch (    MalformedURLException e) {      addActionError(getText("admin.config.error.invalidBaseURL"));      return INPUT;    }catch (    InvalidConfigException e) {      if (e.getType() == InvalidConfigException.TYPE.INVALID_BASE_URL) {        addActionError(getText("admin.config.baseUrl.invalidBaseURL") + " " + baseUrl);      } else       if (e.getType() == InvalidConfigException.TYPE.INACCESSIBLE_BASE_URL) {        addActionError(getText("admin.config.baseUrl.inaccessible") + " " + baseUrl);      } else {        addActionError(getText("admin.error.invalidConfiguration",new String[]{e.getMessage()}));      }      return INPUT;    }  }  try {    configManager.setProxy(proxy);  } catch (  InvalidConfigException e) {    addActionError(getText(e.getMessage()) + " " + proxy);    return INPUT;  }  if (debug != null) {    try {      configManager.setDebugMode(debug);    } catch (    InvalidConfigException e) {      addActionError(getText("admin.config.debug.error"));      return INPUT;    }  }  if (archivalMode != null) {    try {      configManager.setArchivalMode(archivalMode);    } catch (    InvalidConfigException e) {      if (e.getType() == InvalidConfigException.TYPE.DOI_REGISTRATION_ALREADY_ACTIVATED) {        addActionError(getText("admin.error.invalidConfiguration.doiAccount.activated"));      } else {        addActionError(getText("admin.config.archival.error"));      }      return INPUT;    }  }  if (analyticsGbif != null) {    try {      configManager.setGbifAnalytics(analyticsGbif);    } catch (    InvalidConfigException e) {      addActionError(getText("admin.config.analyticsGbif.error"));      return INPUT;    }  }  if (analyticsKey != null) {    try {      configManager.setAnalyticsKey(analyticsKey);    } catch (    InvalidConfigException e) {      addActionError(getText("admin.config.analyticsKey.error"));      return INPUT;    }  }  try {    configManager.setIptLocation(latitude,longitude);  } catch (  InvalidConfigException e) {    addActionError(getText("admin.config.server.location.error"));    return INPUT;  }  try {    configManager.saveConfig();  } catch (  InvalidConfigException e) {    log.error("couldnt write config settings",e);    addActionError(getText("admin.config.save.error"));    return INPUT;  }  if (baseUrlChanged) {    return HOME;  }  return SUCCESS;}  }
class C{  public List<Runnable> shutdownNow(){  logger.info("Shutting down scanner immediately.");  return executor.shutdownNow();}  }
class C{  public void clearTable(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    clearRow(nodeIndex,rowIndex);  }}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public Map<Integer,Double> computeInPlace(double... dataset){  checkArgument(dataset.length > 0,"Cannot calculate quantiles of an empty dataset");  if (containsNaN(dataset)) {    Map<Integer,Double> nanMap=new HashMap<Integer,Double>();    for (    int index : indexes) {      nanMap.put(index,NaN);    }    return unmodifiableMap(nanMap);  }  int[] quotients=new int[indexes.length];  int[] remainders=new int[indexes.length];  int[] requiredSelections=new int[indexes.length * 2];  int requiredSelectionsCount=0;  for (int i=0; i < indexes.length; i++) {    long numerator=(long)indexes[i] * (dataset.length - 1);    int quotient=(int)LongMath.divide(numerator,scale,RoundingMode.DOWN);    int remainder=(int)(numerator - (long)quotient * scale);    quotients[i]=quotient;    remainders[i]=remainder;    requiredSelections[requiredSelectionsCount]=quotient;    requiredSelectionsCount++;    if (remainder != 0) {      requiredSelections[requiredSelectionsCount]=quotient + 1;      requiredSelectionsCount++;    }  }  sort(requiredSelections,0,requiredSelectionsCount);  selectAllInPlace(requiredSelections,0,requiredSelectionsCount - 1,dataset,0,dataset.length - 1);  Map<Integer,Double> ret=new HashMap<Integer,Double>();  for (int i=0; i < indexes.length; i++) {    int quotient=quotients[i];    int remainder=remainders[i];    if (remainder == 0) {      ret.put(indexes[i],dataset[quotient]);    } else {      ret.put(indexes[i],interpolate(dataset[quotient],dataset[quotient + 1],remainder,scale));    }  }  return unmodifiableMap(ret);}  }
class C{  public CoordinateDD toDD(){  return new CoordinateDD(degreesNorth + (thousandthsOfMinutesNorth / 1000d) / 60d,degreesEast + (thousandthsOfMinutesEast / 1000d) / 60d);}  }
class C{  public void testIsParityAdjusted(){  try {    DESedeKeySpec.isParityAdjusted(null,1);    fail("Should raise an NullPointerException " + "in case of null byte array.");  } catch (  NullPointerException e) {  }catch (  InvalidKeyException e) {    fail("Should raise an NullPointerException " + "in case of null byte array.");  }  byte[] key={1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0};  try {    DESedeKeySpec.isParityAdjusted(key,1);    fail("Should raise an InvalidKeyException " + "in case of short byte array.");  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {  }  byte[] key_not_pa={1,2,3,4,5,6,7,8,9,0,1,2,1,2,3,4,5,6,7,8,9,0,1,2};  try {    assertFalse("Method returns true when false is expected.",DESedeKeySpec.isParityAdjusted(key_not_pa,0));  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {    fail("Unexpected InvalidKeyException was thrown.");  }  byte[] key_pa={(byte)128,(byte)131,(byte)133,(byte)134,(byte)137,(byte)138,(byte)140,(byte)143,(byte)145,(byte)146,(byte)148,(byte)151,(byte)152,(byte)155,(byte)157,(byte)158,(byte)161,(byte)162,(byte)164,(byte)167,(byte)168,(byte)171,(byte)173,(byte)174};  try {    assertTrue("Method returns false when true is expected.",DESedeKeySpec.isParityAdjusted(key_pa,0));  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {    fail("Unexpected InvalidKeyException was thrown.");  }}  }
class C{  public static Stopwatch createUnstarted(Ticker ticker){  return new Stopwatch(ticker);}  }
class C{  public void clearClusters(){  clusters.clear();}  }
class C{  public void associate(Plugin plugin){  register(PluginDisableEvent.class,null);}  }
class C{  @Override public void visitEnd(){  if (!subroutineHeads.isEmpty()) {    markSubroutines();    if (LOGGING) {      log(mainSubroutine.toString());      Iterator<BitSet> it=subroutineHeads.values().iterator();      while (it.hasNext()) {        BitSet sub=it.next();        log(sub.toString());      }    }    emitCode();  }  if (mv != null) {    accept(mv);  }}  }
class C{  public synchronized void initialize(){  if (executor == null) {    executor=Executors.newCachedThreadPool();  }}  }
class C{  public static boolean isDatabaseDoesNotExistException(Exception e){  return e instanceof MySQLSyntaxErrorException && ((MySQLSyntaxErrorException)e).getErrorCode() == MYSQL_DB_DOESNT_EXIST_ERROR_CODE;}  }
class C{  public boolean hasNext(){  if (currentIterator == -1) {    currentIterator=0;  }  for (int i=currentIterator; i < allIterators.size(); i++) {    Iterator iterator=allIterators.get(i);    if (iterator.hasNext()) {      currentIterator=i;      return true;    }  }  return false;}  }
class C{  public float[] unCompress(byte[] compInput){  try {    return Snappy.uncompressFloatArray(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return null;}  }
class C{  public LocationAnimator(){  super();}  }
class C{  @Override public void drawString(String str,int x,int y){  setStateToLocal();  m_printstream.println(xTransform(xScale(x)) + " " + yTransform(yScale(y))+ " moveto"+ " ("+ escape(str)+ ") show stroke");}  }
class C{  private void finishInstall(File tmpFile,Vocabulary vocabulary) throws IOException {  Preconditions.checkNotNull(tmpFile);  Preconditions.checkNotNull(vocabulary);  Preconditions.checkNotNull(vocabulary.getUriString());  try {    File installedFile=getVocabFile(vocabulary.getUriResolvable());    if (!installedFile.exists()) {      FileUtils.moveFile(tmpFile,installedFile);    }    Vocabulary fromFile=loadFromFile(installedFile);    fromFile.setUriResolvable(vocabulary.getUriResolvable());    vocabulariesById.put(vocabulary.getUriString(),fromFile);  } catch (  IOException e) {    log.error("Installing vocabulary failed, while trying to move and rename vocabulary file: " + e.getMessage(),e);    throw e;  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  m_C_Project_ID=getRecord_ID();}  }
class C{  public boolean hasUpdateIssues(){  return !updateIssues.isEmpty();}  }
class C{  public void addLinkedPositionProposal(String groupID,String proposal,Image image){  getLinkedProposalModel().getPositionGroup(groupID,true).addProposal(proposal,image,10);}  }
class C{  public <D>D oneToManyWithoutControl(D destination,final T source){  try {    return this.<D,T>getJMapper(relationalOneToManyMapper,destination.getClass()).getDestinationWithoutControl(destination,source);  } catch (  Exception e) {    return this.logAndReturnNull(e);  }}  }
class C{  public RegisterRequestMessage(RegisterRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }}  }
class C{  public final MemberDefinition findOuterMember(){  return outerMember;}  }
class C{  public static List<Pair<IAddress,INaviModule>> loadModules(final AbstractSQLProvider provider,final CAddressSpace addressSpace) throws CouldntLoadDataException {  checkArguments(provider,addressSpace);  final CConnection connection=provider.getConnection();  final List<Pair<IAddress,INaviModule>> modules=new ArrayList<Pair<IAddress,INaviModule>>();  final String query="SELECT id, name, md5, sha1, description, import_time, " + CTableNames.SPACE_MODULES_TABLE + ".image_base "+ " FROM "+ CTableNames.SPACE_MODULES_TABLE+ " JOIN "+ CTableNames.MODULES_TABLE+ " ON id = module_id WHERE address_space_id = "+ addressSpace.getConfiguration().getId();  try (ResultSet resultSet=connection.executeQuery(query,true)){    while (resultSet.next()) {      final IAddress imageBase=PostgreSQLHelpers.loadAddress(resultSet,"image_base");      final INaviModule module=provider.findModule(resultSet.getInt("id"));      modules.add(new Pair<IAddress,INaviModule>(imageBase,module));    }    return modules;  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  public void initialize(){  Arrays.fill(state,0.0);}  }
class C{  private void printInfo(String message,Class c){  if (c != null) {    logln("" + System.identityHashCode(this) + "  "+ message+ "  "+ System.identityHashCode(c));  } else {    logln("" + System.identityHashCode(this) + "  "+ message);  }}  }
class C{  @Override public void changeCursor(Cursor cursor){  super.changeCursor(cursor);  resetMappings();}  }
class C{  public static void writeString(String s,ByteBuffer buff){  byte[] bytes=s.getBytes(StandardCharsets.UTF_8);  writeVarInt(bytes.length,buff);  buff.put(bytes);}  }
class C{  public PercentComplete(Integer percent){  super(percent);}  }
class C{  @SafeVarargs public static <T>List<T> asList(final T... array){  List<T> arrayList=new ArrayList<T>(array.length);  Collections.addAll(arrayList,array);  return arrayList;}  }
class C{  public static int exportToFile(List<MHRPaySelectionCheck> checks,File file){  if (checks == null || checks.size() == 0)   return 0;  if (file.isDirectory()) {    s_log.log(Level.WARNING,"File is directory - " + file.getAbsolutePath());    return 0;  }  try {    if (file.exists())     file.delete();  } catch (  Exception e) {    s_log.log(Level.WARNING,"Could not delete - " + file.getAbsolutePath(),e);  }  char x='"';  int noLines=0;  StringBuffer line=null;  try {    FileWriter fw=new FileWriter(file);    line=new StringBuffer();    line.append(x).append("Value").append(x).append(",").append(x).append("Name").append(x).append(",").append(x).append("Contact").append(x).append(",").append(x).append("Addr1").append(x).append(",").append(x).append("Addr2").append(x).append(",").append(x).append("City").append(x).append(",").append(x).append("State").append(x).append(",").append(x).append("ZIP").append(x).append(",").append(x).append("Country").append(x).append(",").append(x).append("ReferenceNo").append(x).append(",").append(x).append("DocumentNo").append(x).append(",").append(x).append("PayDate").append(x).append(",").append(x).append("Currency").append(x).append(",").append(x).append("PayAmount").append(x).append(",").append(x).append("Comment").append(x).append(Env.NL);    fw.write(line.toString());    noLines++;    for (    MHRPaySelectionCheck mpp : checks) {      if (mpp == null)       continue;      String bp[]=getBPartnerInfo(mpp.getC_BPartner_ID());      line=new StringBuffer();      line.append(x).append(bp[BP_VALUE]).append(x).append(",").append(x).append(bp[BP_NAME]).append(x).append(",").append(x).append(bp[BP_CONTACT]).append(x).append(",").append(x).append(bp[BP_ADDR1]).append(x).append(",").append(x).append(bp[BP_ADDR2]).append(x).append(",").append(x).append(bp[BP_CITY]).append(x).append(",").append(x).append(bp[BP_REGION]).append(x).append(",").append(x).append(bp[BP_POSTAL]).append(x).append(",").append(x).append(bp[BP_COUNTRY]).append(x).append(",").append(x).append(bp[BP_REFNO]).append(x).append(",").append(x).append(mpp.getDocumentNo()).append(x).append(",").append(mpp.getParent().getPayDate()).append(",").append(x).append(MCurrency.getISO_Code(Env.getCtx(),mpp.getParent().getC_Currency_ID())).append(x).append(",").append(mpp.getPayAmt()).append(",").append(Env.NL);      fw.write(line.toString());      noLines++;    }    fw.flush();    fw.close();  } catch (  Exception e) {    s_log.log(Level.SEVERE,"",e);  }  return noLines;}  }
class C{  private void addAudienceRestriction(RequestSecurityTokenType request,ObjectFactory wstFactory){  if (!spec.getAudienceRestriction().isEmpty()) {    ParticipantsType participants=wstFactory.createParticipantsType();    List<ParticipantType> participantsList=participants.getParticipant();    for (    String participant : spec.getAudienceRestriction()) {      org.w3._2005._08.addressing.ObjectFactory wsaFactory=new org.w3._2005._08.addressing.ObjectFactory();      EndpointReferenceType endpoint=wsaFactory.createEndpointReferenceType();      AttributedURIType address=wsaFactory.createAttributedURIType();      address.setValue(participant);      endpoint.setAddress(address);      ParticipantType partElement=wstFactory.createParticipantType();      partElement.setEndpointReference(endpoint);      participantsList.add(partElement);    }    request.setParticipants(participants);  }}  }
class C{  public GenericEntry retrieveAlias(String aliasEmail) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return service.getEntry(new URL("https://apps-apis.google.com/a/feeds/alias/2.0/" + domain + "/"+ aliasEmail),GenericEntry.class);}  }
class C{  public PolicyQualifierInfo(String cps){  policyQualifierId=PolicyQualifierId.id_qt_cps;  qualifier=new DERIA5String(cps);}  }
class C{  public static boolean isCommandsAsButtons(){  return commandsAsButtons;}  }
class C{  public static void main(String[] jiras) throws JpaMigrateException {  try {    EntityManagerFactory factory=Persistence.createEntityManagerFactory("JamesMigrator");    EntityManager em=factory.createEntityManager();    for (    String jira : jiras) {      JpaMigrateCommand jiraJpaMigratable=(JpaMigrateCommand)Class.forName(JPA_MIGRATION_COMMAND_PACKAGE + "." + jira.toUpperCase()+ JpaMigrateCommand.class.getSimpleName()).newInstance();      System.out.println("Now executing " + jira + " migration.");      em.getTransaction().begin();      jiraJpaMigratable.migrate(em);      em.getTransaction().commit();      System.out.println(jira + " migration is successfully achieved.");    }  } catch (  Throwable t) {    throw new JpaMigrateException(t);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public EObject loadModel(String filename,String cwd){  URI fileURI=normalizeURI(URI.createURI(filename));  URI cwdURI=normalizeURI(URI.createURI(cwd));  return loadModel(fileURI,cwdURI);}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public static Document createDocument(){  try {    DocumentBuilder builder=createDocumentBuilder();    return builder.newDocument();  } catch (  IOException e) {    return null;  }}  }
class C{  public final double similarity(final int[] sig1,final int[] sig2){  if (sig1.length != sig2.length) {    throw new IllegalArgumentException("Size of signatures should be the same");  }  double sim=0;  for (int i=0; i < sig1.length; i++) {    if (sig1[i] == sig2[i]) {      sim+=1;    }  }  return sim / sig1.length;}  }
class C{  private JCheckBox addCheckBox(boolean selected,boolean endOfRow){  JCheckBox box=new JCheckBox();  box.setSelected(selected);  if (endOfRow) {    c.gridwidth=GridBagConstraints.REMAINDER;  } else {    c.gridwidth=1;  }  layout.setConstraints(box,c);  add(box);  return box;}  }
class C{  public Object createConnectionFactory() throws ResourceException {  start();  return new FBDataSource(this,defaultCm);}  }
class C{  public boolean isCacheable(RequestHeaders request){  int responseCode=headers.getResponseCode();  if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NOT_AUTHORITATIVE && responseCode != HttpURLConnection.HTTP_MULT_CHOICE && responseCode != HttpURLConnection.HTTP_MOVED_PERM && responseCode != HttpURLConnection.HTTP_GONE) {    return false;  }  if (request.hasAuthorization() && !isPublic && !mustRevalidate&& sMaxAgeSeconds == -1) {    return false;  }  if (noStore) {    return false;  }  return true;}  }
class C{  public void testButtonWithBinding() throws Exception {  HtmlPage page=getPage("/faces/jsp/tlvTest01.jsp");  List list=getAllElementsOfGivenClass(page,null,HtmlSubmitInput.class);  HtmlSubmitInput button=(HtmlSubmitInput)list.get(0);  assertEquals("button label",button.asText());}  }
class C{  public static String relativeOrFullPath(final VirtualFile root,VirtualFile file){  if (root == null) {    file.getPath();  }  return relativePath(VfsUtil.virtualToIoFile(root),VfsUtil.virtualToIoFile(file));}  }
class C{  public static boolean equals(String a,String b){  if (a == null) {    return b == null;  }  return a.equals(b);}  }
class C{  public static boolean verifyAsHeader(Request request,Response response){  String sToken=request.session().attribute(config.session);  if (sToken == null) {    sToken=CSRFTokenManager.createToken(request,response);    return true;  } else {    String pToken=request.header(config.header);    if (StringKit.isNotBlank(pToken) && sToken.equals(pToken)) {      return true;    }  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean updateSourceAction(int state){  int action=SunDragSourceContextPeer.convertModifiersToDropAction(XWindow.getModifiers(state,0,0),sourceActions);  if (sourceAction == action) {    return false;  }  sourceAction=action;  return true;}  }
class C{  public Property centuryOfEra(){  return new Property(this,getChronology().centuryOfEra());}  }
class C{  public static UITimer timer(int timeMillis,boolean repeat,Form parent,Runnable r){  UITimer uit=new UITimer(r);  uit.schedule(timeMillis,repeat,parent);  return uit;}  }
class C{  public void testEnumCase() throws Exception {  String file="EnumTestCase.java";  String warningMessage=file + ": Warning: " + EnumDetector.ISSUE.getBriefDescription(TextFormat.TEXT)+ " ["+ EnumDetector.ISSUE.getId()+ "]\n"+ "0 errors, 1 warnings\n";  assertEquals(warningMessage,lintFiles(file));}  }
class C{  public SimpleCheckBoxItem(String label,BooleanProperty property,String tooltip,UnaryOperator<Node> decorator){  super(label,tooltip,decorator);  this.property=property;}  }
class C{  private double fitness(Solution solution,double[] weights){  double max=Double.NEGATIVE_INFINITY;  for (int i=0; i < solution.getNumberOfObjectives(); i++) {    max=Math.max(max,Math.max(weights[i],0.0001) * Math.abs(solution.getObjective(i) - idealPoint[i]));  }  if (solution.violatesConstraints()) {    max+=10000.0;  }  return max;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:27.387 -0500",hash_original_method="377836285D1E96A0220618E9638425CD",hash_generated_method="B1898091EE92D272834555453BD42E12") public void close(){  try {    if (mFileDescriptor != null)     mFileDescriptor.close();  } catch (  IOException e) {  }}  }
class C{  public synchronized int update(String statementSql,Object... arguments){  if (isClosed()) {    return -1;  }  return update(_connection,statementSql,arguments);}  }
class C{  public JFileChooser(File currentDirectory){  this(currentDirectory,(FileSystemView)null);}  }
class C{  public static byte[] igniteUuidToBytes(IgniteUuid uuid){  assert uuid != null;  byte[] out=new byte[24];  igniteUuidToBytes(uuid,out,0);  return out;}  }
class C{  public byte[] canonicalizeXPathNodeSet(Set<Node> xpathNodeSet,String inclusiveNamespaces) throws CanonicalizationException {  return canonicalizerSpi.engineCanonicalizeXPathNodeSet(xpathNodeSet,inclusiveNamespaces);}  }
class C{  public void mapPossibleTypes(Iterable<Item> items){  if (items != null) {    for (    Item item : items) {      mapPossibleType(item);    }  }}  }
class C{  NetworkActionManager(final NetworkPanel networkPanel){  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  selectionEditModeAction=new SelectionEditModeAction(networkPanel);  textEditModeAction=new TextEditModeAction(networkPanel);  wandEditModeAction=new WandEditModeAction(networkPanel);  newNeuronAction=new NewNeuronAction(networkPanel);  activityGeneratorAction=new NewActivityGeneratorAction(networkPanel);  zeroSelectedObjectsAction=new ZeroSelectedObjectsAction(networkPanel);  randomizeObjectsAction=new RandomizeObjectsAction(networkPanel);  selectAllAction=new SelectAllAction(networkPanel);  zoomToFitPageAction=new ZoomToFitPageAction(networkPanel);  deleteAction=new DeleteAction(networkPanel);  copyAction=new CopyAction(networkPanel);  cutAction=new CutAction(networkPanel);  pasteAction=new PasteAction(networkPanel);  iterateNetworkAction=new IterateNetworkAction(networkPanel);  runNetworkAction=new RunNetworkAction(networkPanel);  stopNetworkAction=new StopNetworkAction(networkPanel);  showDebugAction=new ShowDebugAction(networkPanel);  showNetworkPreferencesAction=new ShowNetworkPreferencesAction(networkPanel);  alignVerticalAction=new AlignVerticalAction(networkPanel);  alignHorizontalAction=new AlignHorizontalAction(networkPanel);  spaceVerticalAction=new SpaceVerticalAction(networkPanel);  spaceHorizontalAction=new SpaceHorizontalAction(networkPanel);  showMainToolBarAction=new ShowMainToolBarAction(networkPanel);  showEditToolBarAction=new ShowEditToolBarAction(networkPanel);  showRunToolBarAction=new ShowRunToolBarAction(networkPanel);  showWeightsAction=new JCheckBoxMenuItem(new ShowWeightsAction(networkPanel));  showPrioritiesAction=new JCheckBoxMenuItem(new ShowPrioritiesAction(networkPanel));  showNetworkHierarchyAction=new JCheckBoxMenuItem(new ShowNetworkHierarchyPanel(networkPanel));  setAutoZoomAction=new ToggleAutoZoom(networkPanel);  selectAllWeightsAction=new SelectAllWeightsAction(networkPanel);  selectAllNeuronsAction=new SelectAllNeuronsAction(networkPanel);  selectIncomingWeightsAction=new SelectIncomingWeightsAction(networkPanel);  selectOutgoingWeightsAction=new SelectOutgoingWeightsAction(networkPanel);  setNeuronPropertiesAction=new SetNeuronPropertiesAction(networkPanel);  setSynapsePropertiesAction=new SetSynapsePropertiesAction(networkPanel);  setTextPropertiesAction=new SetTextPropertiesAction(networkPanel);  allToAll=new ApplyConnectionAction(networkPanel,new AllToAll(),"All to all");  oneToOne=new ApplyConnectionAction(networkPanel,new OneToOne(),"One-to-one");  radial=new ApplyConnectionAction(networkPanel,new Radial(),"Radial");  sparse=new ApplyConnectionAction(networkPanel,new Sparse(),"Sparse");  gridLayout=new ShowLayoutDialogAction(new GridLayout(),networkPanel);  hexagonalLayout=new ShowLayoutDialogAction(new HexagonalGridLayout(),networkPanel);  lineLayout=new ShowLayoutDialogAction(new LineLayout(),networkPanel);  setSourceNeuronsAction=new SetSourceNeurons(networkPanel);  clearSourceNeuronsAction=new ClearSourceNeurons(networkPanel);  groupAction=new GroupAction(networkPanel);  ungroupAction=new UngroupAction(networkPanel,networkPanel.getViewGroupNode());  neuronGroupAction=new NewNeuronGroupAction(networkPanel);  showWeightMatrixAction=new ShowWeightMatrixAction(networkPanel);  showTrainerAction=new ShowTrainerAction(networkPanel);  setRandomizerPropertiesAction=new EditRandomizerPropertiesAction(networkPanel);  showAdjustSynapsesDialog=new ShowAdjustSynapsesDialog(networkPanel);  showAdjustConnectivityDialog=new ShowAdjustConnectivityDialog(networkPanel);  showUpdaterDialog=new ShowNetworkUpdaterDialog(networkPanel);  testInputAction=new TestInputAction(networkPanel);  addSynapseGroupAction=new AddSynapseGroupAction(networkPanel);}  }
class C{  @NotNull private static List<PsiElement> resolveRelativeImportAsAbsolute(@NotNull PsiFile foothold,@NotNull QualifiedName qualifiedName){  final VirtualFile virtualFile=foothold.getVirtualFile();  if (virtualFile == null)   return Collections.emptyList();  final boolean inSource=FileIndexFacade.getInstance(foothold.getProject()).isInContent(virtualFile);  if (inSource)   return Collections.emptyList();  final PsiDirectory containingDirectory=foothold.getContainingDirectory();  if (containingDirectory != null) {    final QualifiedName containingPath=QualifiedNameFinder.findCanonicalImportPath(containingDirectory,null);    if (containingPath != null && containingPath.getComponentCount() > 0) {      final QualifiedName absolutePath=containingPath.append(qualifiedName.toString());      final QualifiedNameResolver absoluteVisitor=new QualifiedNameResolverImpl(absolutePath).fromElement(foothold);      return absoluteVisitor.resultsAsList();    }  }  return Collections.emptyList();}  }
class C{  public AuthorityCertificatesAction(KseFrame kseFrame){  super(kseFrame);}  }
class C{  private boolean calcChildLayoutRect(View child,int x,int y,int lineHeight,Rect rect){  return calcChildLayoutRect(child,x,y,lineHeight,LayoutContext.fromLayoutOptions(flowLayoutOptions),rect);}  }
class C{  public static float svgHorizontalLengthToObjectBoundingBox(String s,String attr,Context ctx){  return svgLengthToObjectBoundingBox(s,attr,HORIZONTAL_LENGTH,ctx);}  }
class C{  public void sendAudio(final String url,final String accessToken,@NotNull DataRequestBody requestBody,final AsyncCallback<AvsResponse,Exception> callback) throws IOException {  this.requestBody=requestBody;  if (callback != null) {    callback.start();  }  Log.i(TAG,"Starting SpeechSendAudio procedure");  start=System.currentTimeMillis();  try {    prepareConnection(url,accessToken);    final AvsResponse response=completePost();    if (response != null && response.isEmpty()) {      if (callback != null) {        callback.failure(new AvsAudioException("Nothing came back"));      }      return;    }    if (callback != null) {      if (response != null) {        callback.success(response);      }      callback.complete();    }    Log.i(TAG,"Audio sent");    Log.i(TAG,"Audio sending process took: " + (System.currentTimeMillis() - start));  } catch (  IOException|AvsException e) {    onError(callback,e);  }}  }
class C{  public void changePassword(String newPassword) throws XMPPException {  Registration reg=new Registration();  reg.setType(IQ.Type.SET);  reg.setTo(connection.getServiceName());  Map<String,String> map=new HashMap<String,String>();  map.put("username",StringUtils.parseName(connection.getUser()));  map.put("password",newPassword);  reg.setAttributes(map);  PacketFilter filter=new AndFilter(new PacketIDFilter(reg.getPacketID()),new PacketTypeFilter(IQ.class));  PacketCollector collector=connection.createPacketCollector(filter);  connection.sendPacket(reg);  IQ result=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (result == null) {    throw new XMPPException("No response from server.");  } else   if (result.getType() == IQ.Type.ERROR) {    throw new XMPPException(result.getError());  }}  }
class C{  protected double calculateTextBlockHeight(TextBlock block,CategoryLabelPosition position,Graphics2D g2){  RectangleInsets insets=getTickLabelInsets();  Size2D size=block.calculateDimensions(g2);  Rectangle2D box=new Rectangle2D.Double(0.0,0.0,size.getWidth(),size.getHeight());  Shape rotatedBox=ShapeUtilities.rotateShape(box,position.getAngle(),0.0f,0.0f);  double h=rotatedBox.getBounds2D().getHeight() + insets.getTop() + insets.getBottom();  return h;}  }
class C{  public boolean validateCounterSignature(String signature,String counterSignature){  return true;}  }
class C{  public static String retainAllChars(String str,String retainChars){  int pos=indexOfChars(str,retainChars);  if (pos == -1) {    return "";  }  StringBuilder buf=new StringBuilder();  do {    buf.append(str.charAt(pos));    pos=indexOfChars(str,retainChars,pos + 1);  } while (pos != -1);  return buf.toString();}  }
class C{  public static SD540 sd540(int pwmPort){  return pwmRegistrar.fetch(pwmPort,SD540.class,null);}  }
class C{  private void write(OutputNode node,Object object,Label label) throws Exception {  label.getConverter(context).write(node,object);}  }
class C{  public static byte[] shortToByteArray(final short src,final int srcPos,final byte[] dst,final int dstPos,final int nBytes){  if (0 == nBytes) {    return dst;  }  if ((nBytes - 1) * 8 + srcPos >= 16) {    throw new IllegalArgumentException("(nBytes-1)*8+srcPos is greather or equal to than 16");  }  int shift=0;  for (int i=0; i < nBytes; i++) {    shift=i * 8 + srcPos;    dst[dstPos + i]=(byte)(0xff & (src >> shift));  }  return dst;}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public static Matrix random(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=Math.random();    }  }  return A;}  }
class C{  protected ParameterizedAccessImpl(){  super();}  }
class C{  @Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState) throws IOException {synchronized (HugeBackupActivity.sDataLock) {    RandomAccessFile file=new RandomAccessFile(mDataFile,"r");    mFilling=file.readInt();    mAddMayo=file.readBoolean();    mAddTomato=file.readBoolean();  }  boolean doBackup=(oldState == null);  if (!doBackup) {    doBackup=compareStateFile(oldState);  }  if (doBackup) {    ByteArrayOutputStream bufStream=new ByteArrayOutputStream();    DataOutputStream outWriter=new DataOutputStream(bufStream);    outWriter.writeInt(mFilling);    outWriter.writeBoolean(mAddMayo);    outWriter.writeBoolean(mAddTomato);    byte[] buffer=bufStream.toByteArray();    int len=buffer.length;    data.writeEntityHeader(APP_DATA_KEY,len);    data.writeEntityData(buffer,len);    final int MEGABYTE=1024 * 1024;    final int NUM_MEGS=20;    buffer=new byte[MEGABYTE];    data.writeEntityHeader(HUGE_DATA_KEY,NUM_MEGS * MEGABYTE);    for (int i=0; i < NUM_MEGS; i++) {      data.writeEntityData(buffer,MEGABYTE);    }  }  writeStateFile(newState);}  }
class C{  public boolean drawEPointFeatures(){  return drawEPointFeatures;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean retainEntries(TFloatIntProcedure procedure){  boolean modified=false;  byte[] states=_states;  float[] keys=_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  public final void rotY(float angle){  float sinAngle, cosAngle;  sinAngle=(float)Math.sin(angle);  cosAngle=(float)Math.cos(angle);  this.m00=cosAngle;  this.m01=(float)0.0;  this.m02=sinAngle;  this.m03=(float)0.0;  this.m10=(float)0.0;  this.m11=(float)1.0;  this.m12=(float)0.0;  this.m13=(float)0.0;  this.m20=-sinAngle;  this.m21=(float)0.0;  this.m22=cosAngle;  this.m23=(float)0.0;  this.m30=(float)0.0;  this.m31=(float)0.0;  this.m32=(float)0.0;  this.m33=(float)1.0;}  }
class C{  private IV mock(Literal literal){  TermId mock=TermId.mockIV(VTE.LITERAL);  mock.setValue(lexiconRelation.getValueFactory().asValue(literal));  return mock;}  }
class C{  public synchronized void addDropTargetListener(DropTargetListener dtl) throws TooManyListenersException {  if (dtl == null)   return;  if (equals(dtl))   throw new IllegalArgumentException("DropTarget may not be its own Listener");  if (dtListener == null)   dtListener=dtl; else   throw new TooManyListenersException();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementaddnewattribute.class,args);}  }
class C{  public EventStoreBuilder singleNodeAddress(String host,int port){  singleNodeAddress=new InetSocketAddress(host,port);  return this;}  }
class C{  protected HashEntry<K,V> createEntry(HashEntry<K,V> next,int hashCode,K key,V value){  return new HashEntry<K,V>(next,hashCode,key,value);}  }
class C{  public FileParsingIdentifierSourceSet(File instanceData,File metricData,IdentifierSourceSet fallbacks){  super(StringIterable.fromFile(instanceData),StringIterable.fromFile(metricData),fallbacks);}  }
class C{  public static void doRestart(Context c){  try {    if (c != null) {      PackageManager pm=c.getPackageManager();      if (pm != null) {        Intent mStartActivity=pm.getLaunchIntentForPackage(c.getPackageName());        if (mStartActivity != null) {          mStartActivity.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);          int mPendingIntentId=223344;          PendingIntent mPendingIntent=PendingIntent.getActivity(c,mPendingIntentId,mStartActivity,PendingIntent.FLAG_CANCEL_CURRENT);          AlarmManager mgr=(AlarmManager)c.getSystemService(Context.ALARM_SERVICE);          mgr.set(AlarmManager.RTC,System.currentTimeMillis() + 100,mPendingIntent);          System.exit(0);        } else {          Log.e("AppRestarter","Was not able to restart application, mStartActivity null");        }      } else {        Log.e("AppRestarter","Was not able to restart application, PM null");      }    } else {      Log.e("AppRestarter","Was not able to restart application, Context null");    }  } catch (  Exception ex) {    Log.e("AppRestarter","Was not able to restart application");  }}  }
class C{  public Long addUserToOrganisation(Long user_id,Long organisation_id,Long insertedby){  try {    if (this.getOrganisation_UserByUserAndOrganisation(user_id,organisation_id) == null) {      return addOrganisationUserObj(user_id,getOrgUser(organisation_id,insertedby));    } else {      return -35L;    }  } catch (  Exception ex2) {    log.error("[addUserToOrganisation]",ex2);  }  return null;}  }
class C{  public boolean hasChanged(){  return hasChanged;}  }
class C{  private void sendToServlet(final LocalClientInfo info){  BUGS_QUEUE.execute(new ServletSender(info));}  }
class C{  public DecimalDigitFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @Override protected Component addSingletonComponent(Component oldC,Component newC){  if ((oldC != null) && (oldC != newC)) {    oldC.getParent().remove(oldC);  }  return newC;}  }
class C{  public final String toString(String codeset){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  BufferedOutputStream bos=new BufferedOutputStream(baos);  String out=null;  try {    output(bos);    bos.flush();    out=baos.toString(codeset);    bos.close();    baos.close();  } catch (  UnsupportedEncodingException use) {  }catch (  IOException ioe) {  }  return (out);}  }
class C{  @ExceptionHandler(Exception.class) public ModelAndView handleAllException(Exception exception){  return new JsonError(exception).asModelAndView();}  }
class C{  public CancelTargetSelectionReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  @SuppressFBWarnings("OBL_UNSATISFIED_OBLIGATION") protected final void writeXml(OutputStream out,Collection<Plugin> plugins,String entryPoint,boolean finish) throws IOException {  OutputStreamXMLOutput xmlOutput=new OutputStreamXMLOutput(out);  try {    xmlOutput.beginDocument();    xmlOutput.startTag("findbugs-invocation");    xmlOutput.addAttribute("version",Version.RELEASE);    String applicationName=Version.getApplicationName();    if (applicationName == null || "".equals(applicationName)) {      int lastDot=entryPoint.lastIndexOf('.');      if (lastDot == -1) {        applicationName=entryPoint;      } else {        applicationName=entryPoint.substring(lastDot + 1);      }    }    xmlOutput.addAttribute("app-name",applicationName);    String applicationVersion=Version.getApplicationVersion();    if (applicationVersion == null) {      applicationVersion="";    }    xmlOutput.addAttribute("app-version",applicationVersion);    xmlOutput.addAttribute("entry-point",entryPoint);    xmlOutput.addAttribute("os",SystemProperties.getProperty("os.name",""));    xmlOutput.addAttribute("java-version",getMajorJavaVersion());    Locale locale=Locale.getDefault();    xmlOutput.addAttribute("language",locale.getLanguage());    xmlOutput.addAttribute("country",locale.getCountry());    xmlOutput.addAttribute("uuid",getUuid());    xmlOutput.stopTag(false);    for (    Plugin plugin : plugins) {      xmlOutput.startTag("plugin");      xmlOutput.addAttribute("id",plugin.getPluginId());      xmlOutput.addAttribute("name",plugin.getShortDescription());      xmlOutput.addAttribute("version",plugin.getVersion());      Date date=plugin.getReleaseDate();      if (date != null) {        xmlOutput.addAttribute("release-date",Long.toString(date.getTime()));      }      xmlOutput.stopTag(true);    }    xmlOutput.closeTag("findbugs-invocation");    xmlOutput.flush();  }  finally {    if (finish) {      xmlOutput.finish();    }  }}  }
class C{  @LargeTest public void testErrorTooManyRedirects() throws Exception {  Uri uri=getServerUri(DEFAULT_FILENAME);  for (int i=0; i < 6; ++i) {    final MockResponse resp=buildResponse(HTTP_REDIRECT);    resp.setHeader("Location",uri.toString());    enqueueResponse(resp);  }  doErrorTest(uri,DownloadManager.ERROR_TOO_MANY_REDIRECTS);}  }
class C{  public static void deleteDirectoryTree(File dir) throws AccessDeniedException, IOException {  dir.delete();  Files.walkFileTree(dir.toPath(),new FileDeletionVisitor());}  }
class C{  @Override public void init(final int varKind,final int id,final String name,final Class<IContainer<?,?>> clazz){}  }
class C{  private static int[][] calculateBlackPoints(byte[] luminances,int subWidth,int subHeight,int width,int height){  int[][] blackPoints=new int[subHeight][subWidth];  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int sum=0;      int min=0xFF;      int max=0;      for (int yy=0, offset=yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset+=width) {        for (int xx=0; xx < BLOCK_SIZE; xx++) {          int pixel=luminances[offset + xx] & 0xFF;          sum+=pixel;          if (pixel < min) {            min=pixel;          }          if (pixel > max) {            max=pixel;          }        }        if (max - min > MIN_DYNAMIC_RANGE) {          for (yy++, offset+=width; yy < BLOCK_SIZE; yy++, offset+=width) {            for (int xx=0; xx < BLOCK_SIZE; xx++) {              sum+=luminances[offset + xx] & 0xFF;            }          }        }      }      int average=sum >> (BLOCK_SIZE_POWER * 2);      if (max - min <= MIN_DYNAMIC_RANGE) {        average=min >> 1;        if (y > 0 && x > 0) {          int averageNeighborBlackPoint=(blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) >> 2;          if (min < averageNeighborBlackPoint) {            average=averageNeighborBlackPoint;          }        }      }      blackPoints[y][x]=average;    }  }  return blackPoints;}  }
class C{  @Override public long size(Resource... contexts) throws RepositoryException {  if (isAllContext(contexts)) {    return super.size(getReadContexts());  } else {    return super.size(contexts);  }}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public boolean willOverlap(){  return mDelay < 1.0f;}  }
class C{  public void invalidate(){  for (  GuacamoleTunnel tunnel : tunnels.values()) {    try {      tunnel.close();    } catch (    GuacamoleException e) {      logger.debug("Unable to close tunnel.",e);    }  }}  }
class C{  public static void main(String[] args){  int n=Integer.parseInt(args[0]);  if (args.length == 2)   StdRandom.setSeed(Long.parseLong(args[1]));  double[] probabilities={0.5,0.3,0.1,0.1};  int[] frequencies={5,3,1,1};  String[] a="A B C D E F G".split(" ");  StdOut.println("seed = " + StdRandom.getSeed());  for (int i=0; i < n; i++) {    StdOut.printf("%2d ",uniform(100));    StdOut.printf("%8.5f ",uniform(10.0,99.0));    StdOut.printf("%5b ",bernoulli(0.5));    StdOut.printf("%7.5f ",gaussian(9.0,0.2));    StdOut.printf("%1d ",discrete(probabilities));    StdOut.printf("%1d ",discrete(frequencies));    StdRandom.shuffle(a);    for (    String s : a)     StdOut.print(s);    StdOut.println();  }}  }
class C{  public Property millisOfSecond(){  return new Property(this,MILLIS_OF_SECOND);}  }
class C{  public CloudImageProperty(String idProperty,EncodedImage placeholderImage){  this.idProperty=idProperty;  this.placeholderImage=placeholderImage;}  }
class C{  public static int EXFULL(){  return 54;}  }
class C{  @Override protected void validate(){  failIf(value <= 0,"Can not have a negative trace rate");}  }
class C{  public static void writeImageMap(PrintWriter writer,String name,ChartRenderingInfo info,ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,URLTagFragmentGenerator urlTagFragmentGenerator) throws IOException {  writer.println(ImageMapUtilities.getImageMap(name,info,toolTipTagFragmentGenerator,urlTagFragmentGenerator));}  }
class C{  private State buildPatch(TaskState.TaskStage stage,Throwable e){  State s=new State();  s.taskState=new TaskState();  s.taskState.stage=stage;  if (e != null) {    s.taskState.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public static void grantPermsOnTable(int perms,String tblName) throws Exception {  String userGranted=DbConnectionConfig.getUserGranted();  DbGrantStatement stmt=null;  stmt=new DbGrantStatement();  try {    stmt.create(perms,tblName,userGranted);    stmt.execute();    stmt.release();  } catch (  Exception ex) {    DbGrantStatement.ensureRelease(stmt,ex);    throw ex;  }}  }
class C{  public boolean isEmpty() throws Exception {  if (!map.isEmpty()) {    return false;  }  return reader.isEmpty(this);}  }
class C{  public void findKdistanceContainers(SearchObject so,int kindOfDistance){  SearchObject obj;  double distance;  ListIterator li;  KdistanceContainer container;  int index;  boolean added;  for (int i=0; i < this.getNumberOfObjects(); i++) {    obj=this.listOfObjects.elementAt(i);    if (obj == so) {      continue;    }    distance=so.getDistance(obj,kindOfDistance);    li=so.getKdContainerListIterator();    index=-1;    added=false;    while (li.hasNext()) {      container=(KdistanceContainer)li.next();      index++;      if (container.getDistance() == distance) {        container.addObject(obj,distance);        added=true;        break;      }      if (container.getDistance() > distance) {        KdistanceContainer newcontainer=new KdistanceContainer(so);        so.addKdContainer(index,newcontainer);        newcontainer.addObject(obj,distance);        added=true;        break;      }    }    if (!added) {      KdistanceContainer newcontainer=new KdistanceContainer(so);      so.addKdContainer(newcontainer);      newcontainer.addObject(obj,distance);    }  }}  }
class C{  public void testUnproxied() throws Exception {  assertEquals("7",String.valueOf(7));  assertEquals(0,i);  JVMAgent dynamic=JVMAgent.get();  DynamicModification modification=new TestUnproxiedPrivilegedModification();  dynamic.install(modification);  try {    new String().trim();    fail("Shouldn't be able to do this");  } catch (  NoClassDefFoundError e) {  }  assertEquals(0,i);  dynamic.reset(modification.affects());  assertEquals("7",String.valueOf(7));  assertEquals(0,i);}  }
class C{  public boolean isCommitted(final int rwaddr){  final Lock lock=m_allocationWriteLock;  lock.lock();  try {    final FixedAllocator alloc=getBlockByAddress(rwaddr);    final int offset=getOffset(rwaddr);    return alloc.isCommitted(offset);  }  finally {    lock.unlock();  }}  }
class C{  @Override protected void onNickChange(String oldNick,String login,String hostname,String newNick){  if (getNick().equalsIgnoreCase(newNick)) {    this.updateNickMatchPattern();    Message message=new Message(service.getString(R.string.message_self_rename,newNick));    message.setColor(Message.COLOR_GREEN);    server.getConversation(ServerInfo.DEFAULT_NAME).addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),ServerInfo.DEFAULT_NAME);    service.sendBroadcast(intent);  }  Vector<String> channels=getChannelsByNickname(newNick);  for (  String target : channels) {    Message message=new Message(service.getString(R.string.message_rename,oldNick,newNick));    message.setColor(Message.COLOR_GREEN);    server.getConversation(target).addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);    service.sendBroadcast(intent);  }}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String cReferencia=(String)request.getParameter(REFEENCIA_KEY);  String cDocumentoPago=null;  Liquidacion oLiquidacion=null;  try {    oLiquidacion=PagoElectronicoManagerHelper.obtenerDatosLiquidacion(request,cReferencia);    String cXMLDatos=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,cReferencia);    cDocumentoPago=FormCreator.crearConsultaPago(oLiquidacion.getTasa(),cXMLDatos,request);  } catch (  Exception e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(ERROR_FORWARD);  }  request.setAttribute(DOC_PAGO_KEY,cDocumentoPago);  request.setAttribute(REFEENCIA_KEY,cReferencia);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public void removeMembers(String senderId,String apiKey,String groupName,String groupKey,Bundle members){  try {    HttpRequest httpRequest=new HttpRequest();    httpRequest.setHeader(HEADER_CONTENT_TYPE,CONTENT_TYPE_JSON);    httpRequest.setHeader(HEADER_AUTHORIZATION,"key=" + apiKey);    httpRequest.setHeader(HEADER_PROJECT_ID,senderId);    JSONObject requestBody=new JSONObject();    requestBody.put("operation","remove");    requestBody.put("notification_key_name",groupName);    requestBody.put("notification_key",groupKey);    requestBody.put("registration_ids",new JSONArray(bundleValues2Array(members)));    httpRequest.doPost(GCM_GROUPS_ENDPOINT,requestBody.toString());    JSONObject responseBody=new JSONObject(httpRequest.getResponseBody());    if (responseBody.has("error")) {      mLogger.log(Log.INFO,"Error while removing group members." + "\ngroupName: " + groupName + "\ngroupKey: "+ groupKey+ "\nhttpResponse: "+ httpRequest.getResponseBody());      MainActivity.showToast(mContext,R.string.group_toast_remove_members_failed,responseBody.getString("error"));    } else {      SenderCollection senders=SenderCollection.getInstance(mContext);      Sender sender=senders.getSender(senderId);      DeviceGroup newGroup=sender.groups.get(groupName);      for (      String name : members.keySet()) {        newGroup.tokens.remove(name);      }      senders.updateSender(sender);      mLogger.log(Log.INFO,"Group members removed successfully." + "\ngroupName: " + groupName + "\ngroupKey: "+ groupKey);      MainActivity.showToast(mContext,R.string.group_toast_remove_members_succeeded);    }  } catch (  JSONException|IOException e) {    mLogger.log(Log.INFO,"Exception while removing group members." + "\nerror: " + e.getMessage() + "\ngroupName: "+ groupName+ "\ngroupKey: "+ groupKey);    MainActivity.showToast(mContext,R.string.group_toast_remove_members_failed,e.getMessage());  }}  }
class C{  private void scrollToColumn(int col){  Container container;  JTable table;  if ((header.getParent() == null) || ((container=header.getParent().getParent()) == null) || !(container instanceof JScrollPane)|| ((table=header.getTable()) == null)) {    return;  }  Rectangle vis=table.getVisibleRect();  Rectangle cellBounds=table.getCellRect(0,col,true);  vis.x=cellBounds.x;  vis.width=cellBounds.width;  table.scrollRectToVisible(vis);}  }
class C{  public List<ShoppingCartItem> items(){  List<ShoppingCartItem> result=FastList.newInstance();  result.addAll(cartLines);  return result;}  }
class C{  public boolean isObjectRelationalDatabaseField(){  return false;}  }
class C{  public void dismiss(){  mWindow.dismiss();}  }
class C{  private CBinExportInstaller(){}  }
class C{  public static String removeDhAnonFromCommaSeparatedList(String list){  if (list == null) {    return list;  }  List<String> algorithms=new LinkedList<String>(Arrays.asList(list.split("\\s*,\\s*")));  boolean dhAnonRemoved=algorithms.remove("DH_anon");  boolean ecdhAnonRemoved=algorithms.remove("ECDH_anon");  if (dhAnonRemoved || ecdhAnonRemoved) {    String string=Arrays.toString(algorithms.toArray(new String[algorithms.size()]));    return (algorithms.size() > 0) ? string.substring(1,string.length() - 1) : "";  }  return list;}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public static void sort(Object[] a,int lo,int hi,Comparator comparator){  for (int i=lo; i <= hi; i++) {    for (int j=i; j > lo && less(a[j],a[j - 1],comparator); j--) {      exch(a,j,j - 1);    }  }  assert isSorted(a,lo,hi,comparator);}  }
class C{  @Override protected boolean passFilter(GraphNode e){  return filter.passFilter(e);}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public String toString(){  return label.toString();}  }
class C{  @Secured public void addPay_Simple(long userId,BigDecimal amount,Date created,PaymentType payType,String details,boolean updateCache) throws ConcurrentUpdateSqlException, Exception {  checkAccessFor_ADMIN();  amount=amount.abs();  long id=universal.nextSeqFor(payments);  PaymentExt payment=PaymentExt.createSystemPayment(id,userId,amount,created,payType,details);  BigDecimal newVal=doPayment(userId,payment,updateCache);  log.info("pay added: userId=" + userId + (newVal != null ? ", newBalance=" + newVal : "")+ ", req="+ getReqInfoStr());}  }
class C{  public void updateStackVisiblityValue(float stackVisibility){  mCacheStackVisibility=stackVisibility;  mOrderSortingValue=computeOrderSortingValue(mCachedIndexDistance,mCacheStackVisibility);  mVisiblitySortingValue=computeVisibilitySortingValue(mCachedVisibleArea,mOrderSortingValue,mCacheStackVisibility);}  }
class C{  public Type peek(){  if (top < 1)   throw new IndexOutOfBoundsException("Stack is empty");  return stack[top - 1];}  }
class C{  public static String colorToHex(Color colorCode){  int r=colorCode.getRed();  int g=colorCode.getGreen();  int b=colorCode.getBlue();  return toHex(r) + toHex(g) + toHex(b);}  }
class C{  private void createRoot(){  root=doc.createElement("project");  root.setAttribute("name",projectName);  root.setAttribute("default","build");  root.setAttribute("basedir",".");  doc.appendChild(root);}  }
class C{  public void storeStackForException(Throwable t,int currentStackFrame){  if (!exceptionStack.containsKey(t)) {    int[] s=new int[stackPointer + 1];    System.arraycopy(stack,0,s,0,stackPointer);    s[stackPointer]=currentStackFrame;    exceptionStack.put(t,s);  }}  }
class C{  public Base64(){  this(0);}  }
class C{  private Object readResolve(){  return ToStringStyle.SHORT_PREFIX_STYLE;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void checkClosed(){  this.parent.getCancelCriterion().checkCancelInProgress(null);  if (!this.closed) {    return;  }  throw new OplogCancelledException("This Oplog has been closed.");}  }
class C{  @Override public boolean isPunctuationTag(String str){  return str.equals("PU");}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected HessianConnection sendRequest(String methodName,Object[] args) throws IOException {  HessianConnection conn=null;  conn=_factory.getConnectionFactory().open(_url);  boolean isValid=false;  try {    addRequestHeaders(conn);    OutputStream os=null;    try {      os=conn.getOutputStream();    } catch (    Exception e) {      throw new HessianRuntimeException(e);    }    if (log.isLoggable(Level.FINEST)) {      PrintWriter dbg=new PrintWriter(new LogWriter(log));      HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);      dOs.startTop2();      os=dOs;    }    AbstractHessianOutput out=_factory.getHessianOutput(os);    out.call(methodName,args);    out.flush();    conn.sendRequest();    isValid=true;    return conn;  }  finally {    if (!isValid && conn != null)     conn.destroy();  }}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  void removeLock(GridCacheMvccCandidate cand) throws GridCacheEntryRemovedException {  removeLock(cand.version());}  }
class C{  public DetalleEstadoBDBean(){}  }
class C{  public static boolean checkVirtualPoolProtocols(VirtualPool cos,HashSet<String> protocols){  return checkVirtualPoolProtocols(cos,protocols,true);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.WORD_BOUNDARY;}  }
class C{  public void show(){  if (mNextView == null) {    throw new RuntimeException("View is not initialized");  }  mHandler.post(mShow);}  }
class C{  private void skipQuotedValue(Byte runTerminator) throws IOException {  while (true) {    long index=source.indexOf(runTerminator);    if (index == -1L)     throw syntaxError("Unterminated string");    if (buffer.getByte(index) == '\\') {      buffer.skip(index + 1);      readEscapeCharacter();    } else {      buffer.skip(index + 1);      return;    }  }}  }
class C{  public final double doOperation() throws OperatorFailedException {  final int dim=parameter.getDimension();  final Bounds<Double> bounds=parameter.getBounds();  double hastingsRatio=0;  int checkStart=0, checkEnd=dim;  if (scaleAllInd) {    for (int i=0; i < dim; i++) {      hastingsRatio+=scaleOne(i);    }  } else   if (scaleAll) {    final double w=size * (MathUtils.nextDouble() - 0.5);    final double f=Math.exp(w);    for (int i=0; i < dim; i++) {      parameter.setParameterValue(i,parameter.getParameterValue(i) * f);    }    hastingsRatio+=dim * w;  } else {    int j=MathUtils.nextInt(dim);    hastingsRatio+=scaleOne(j);    checkStart=j;    checkEnd=j + 1;  }  for (int i=checkStart; i < checkEnd; i++) {    final double value=parameter.getParameterValue(i);    if (value < bounds.getLowerLimit(i) || value > bounds.getUpperLimit(i)) {      throw new OperatorFailedException("proposed value outside boundaries");    }  }  return hastingsRatio;}  }
class C{  public long count(){  return cnt.get();}  }
class C{  public UiBuilder<T> alignFillBoth(int horizontalSpan){  this.control.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,horizontalSpan,1));  return this;}  }
class C{  public Matrix3f m11(float m11){  this.m11=m11;  return this;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  static void sort(long[] a,int left,int right,long[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    while (k < right && a[k] == a[k + 1])     k++;    if (k == right)     break;    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        long t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    }    if (run[count] > left && a[run[count]] >= a[run[count] - 1]) {      count--;    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (count == 0) {    return;  } else   if (count == 1 && run[count] > right) {    return;  }  right++;  if (run[count] < right) {    run[++count]=right;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  long[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new long[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    long[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  public static long physToMem(float physVal,int pidNum){  long result=0;  Pid currPid=getPid(pidNum);  if (currPid != null) {    result=java.lang.Math.min(Conversions.physToMem(physVal,currPid.cnv),valueMask[currPid.bytes]);  }  return (result);}  }
class C{  public R scan(Iterable<? extends Tree> nodes,P p){  R r=null;  if (nodes != null) {    boolean first=true;    for (    Tree node : nodes) {      r=(first ? scan(node,p) : scanAndReduce(node,p,r));      first=false;    }  }  return r;}  }
class C{  public boolean lockCG(DbClient dbClient,ControllerLockingService locker){  URI volumeId=getId();  if (URIUtil.isType(getId(),BlockSnapshot.class)) {    BlockSnapshot snapshot=dbClient.queryObject(BlockSnapshot.class,getId());    volumeId=snapshot.getParent().getURI();  } else   if (URIUtil.isType(getId(),BlockConsistencyGroup.class)) {    List<Volume> cgVolumes=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Volume.class,getVolumesByConsistencyGroup(getId()));    if (cgVolumes != null && !cgVolumes.isEmpty()) {      volumeId=cgVolumes.get(0).getId();    }  }  Volume volume=dbClient.queryObject(Volume.class,volumeId);  if (volume != null && locker != null) {    if (volume.getProtectionController() != null && volume.getProtectionSet() != null) {      ProtectionSystem rpSystem=dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());      ProtectionSet protectionSet=dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());      if (rpSystem != null && protectionSet != null && rpSystem.getInstallationId() != null && protectionSet.getLabel() != null) {        String lockName=rpSystem.getInstallationId() + LOCK_SEPARATOR + protectionSet.getLabel();        if (locker.acquirePersistentLock(lockName,_opId,5)) {          _logger.info("Acquired lock: " + lockName);          lockedName=lockName;          return true;        } else {          _logger.info("Failed to acquire lock: " + lockName);        }      }    } else     if (volume.getProtectionSet() == null) {      _logger.info("Lock not required, no CG in use");      lockedName=null;      return true;    }  }  return false;}  }
class C{  public static Vec4 computeAveragePoint3(BufferWrapper coordinates,int stride){  if (coordinates == null) {    String msg=Logging.getMessage("nullValue.CoordinatesAreNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (stride < 3) {    String msg=Logging.getMessage("generic.StrideIsInvalid");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  int count=0;  double x=0d;  double y=0d;  double z=0d;  for (int i=0; i <= coordinates.length() - stride; i+=stride) {    count++;    x+=coordinates.getDouble(i);    y+=coordinates.getDouble(i + 1);    z+=coordinates.getDouble(i + 2);  }  if (count == 0)   return null;  return new Vec4(x / (double)count,y / (double)count,z / (double)count);}  }
class C{  private void registerIoPoolExtensions() throws IgniteCheckedException {  final IoPool[] executorExtensions=ctx.plugins().extensions(IoPool.class);  if (executorExtensions != null) {    for (    IoPool ex : executorExtensions) {      final byte id=ex.id();      if (id < 0)       throw new IgniteCheckedException("Failed to register IO executor pool because its Id is negative " + "[id=" + id + ']');      if (isReservedGridIoPolicy(id))       throw new IgniteCheckedException("Failed to register IO executor pool because its Id in in the " + "reserved range (0-31) [id=" + id + ']');      if (ioPools[id] != null)       throw new IgniteCheckedException("Failed to register IO executor pool because its " + "Id as already used [id=" + id + ']');      ioPools[id]=ex;    }  }}  }
class C{  public static String toHex(byte[] data){  try {    return new String(Hex.encode(data),"US-ASCII");  } catch (  UnsupportedEncodingException e) {  }  return null;}  }
class C{  @LargeTest public void testMediaImageItemScaledHeightWidth() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final int imageItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaImageItem1",imageItemFileName,imageItemRenderingMode,5000);  mVideoEditor.addMediaItem(mediaImageItem1);  assertNotSame("Image Height = Image Scaled Height",mediaImageItem1.getScaledHeight(),mediaImageItem1.getHeight());  assertNotSame("Image Width = Image Scaled Width",mediaImageItem1.getScaledWidth(),mediaImageItem1.getWidth());}  }
class C{  protected static float calcHitRatio(long lookups,long hits){  return (lookups == 0) ? 0.0f : BigDecimal.valueOf((double)hits / (double)lookups).setScale(2,RoundingMode.HALF_EVEN).floatValue();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.020 -0500",hash_original_method="E2804213A15C7C07F46CB2E618D71482",hash_generated_method="AC6054920B969DAC032737EDD2E0E314") public static boolean isPrintableString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if ('a' <= ch && ch <= 'z') {      continue;    }    if ('A' <= ch && ch <= 'Z') {      continue;    }    if ('0' <= ch && ch <= '9') {      continue;    }switch (ch) {case ' ':case '\'':case '(':case ')':case '+':case '-':case '.':case ':':case '=':case '?':case '/':case ',':      continue;  }  return false;}return true;}  }
class C{  @Override protected void onSizeChanged(int width,int height,int oldWidth,int oldHeight){  super.onSizeChanged(width,height,oldWidth,oldHeight);  setmVerticalDragRange(height);}  }
class C{  private void addLoco(String message){  Consist consist;  List<String> headerAndLoco=Arrays.asList(message.split("<:>"));  try {    List<String> headerData=Arrays.asList(headerAndLoco.get(0).split("<;>"));    consist=manager.getConsist(stringToDcc(headerData.get(1)));    consist.setConsistID(headerData.get(2));    List<String> locoData=Arrays.asList(headerAndLoco.get(1).split("<;>"));    if (consist.isAddressAllowed(stringToDcc(locoData.get(0)))) {      consist.add(stringToDcc(locoData.get(0)),Boolean.valueOf(locoData.get(1)));      if (log.isDebugEnabled()) {        log.debug("add loco: " + locoData.get(0) + ", to consist: "+ headerData.get(1));      }    }  } catch (  NullPointerException e) {    log.warn("addLoco error for message: " + message);    return;  }  writeFile();}  }
class C{  public void addSession(AbstractIoSession session){  sessions.add(session);  CloseFuture closeFuture=session.getCloseFuture();  closeFuture.addListener(sessionCloseListener);}  }
class C{  public static int pairBytesToHashcode(byte[] pairBytes){  return (int)(pairBytes[0] & 0xFF) << 8 | (int)(pairBytes[1] & 0xFF);}  }
class C{  public void appendCloseUnorderedListTag(){  text.append("</ul>");}  }
class C{  public void scanArchives(){  annotationIndex.clear();  implementsIndex.clear();  classIndex.clear();  scannedURLs.clear();  interfacesIndex.clear();  superClasses.clear();  classInterfaces.clear();  runScanner();}  }
class C{  public boolean checkPreCondition(){  List<InsnNode> insns=preCondition.getInstructions();  if (insns.isEmpty()) {    return true;  }  IfNode ifInsn=getIfInsn();  int size=insns.size();  for (int i=0; i < size; i++) {    InsnNode insn=insns.get(i);    if (insn.getResult() == null) {      return false;    }    RegisterArg res=insn.getResult();    if (res.getSVar().getUseCount() > 1) {      return false;    }    boolean found=false;    for (int j=i + 1; j < size; j++) {      if (insns.get(i).containsArg(res)) {        found=true;      }    }    if (!found && ifInsn.containsArg(res)) {      found=true;    }    if (!found) {      return false;    }  }  return true;}  }
class C{  public static boolean contains(ByteString namespace,ByteString key){  BaggageImpl impl=Baggage.current.get();  return impl == null ? false : impl.contains(namespace,key);}  }
class C{  protected static void print_space(int s){  for (int i=0; i < s; i++) {    System.out.print(" ");  }}  }
class C{  public Nystrom(KernelTrick k,DataSet dataset,int basisSize,SamplingMethod method){  this(k,dataset,basisSize,method,0.0,false);}  }
class C{  public VolumeRestRep checkFullCopyProgress(URI copyId){  return client.post(VolumeRestRep.class,getIdUrl() + "/check-progress",copyId);}  }
class C{  public synchronized int search(Object o){  final Object[] dumpArray=elementData;  final int size=elementCount;  if (o != null) {    for (int i=size - 1; i >= 0; i--) {      if (o.equals(dumpArray[i])) {        return size - i;      }    }  } else {    for (int i=size - 1; i >= 0; i--) {      if (dumpArray[i] == null) {        return size - i;      }    }  }  return -1;}  }
class C{  public GeoTimeSerie cloneEmpty(int sizehint){  GeoTimeSerie serie=new GeoTimeSerie(this.lastbucket,this.bucketcount,this.bucketspan,sizehint);  serie.setMetadata(this.getMetadata());  return serie;}  }
class C{  public static float between(float val,float min,float max){  return Math.max(Math.min(val,max),min);}  }
class C{  public BeanContextSupport(){  this(null,Locale.getDefault(),false,true);}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public final Date executeTimestampQuery(String sql,boolean mandatory) throws AdeException {  return SpecialSqlQueries.executeTimestampQuery(sql,m_connection,mandatory);}  }
class C{  public ClassOrInterfaceDeclaration addClass(String name){  return addClass(name,Modifier.PUBLIC);}  }
class C{  protected void addToChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_toChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_toChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__TO_CHANNELS,true,false,true,null,null,null));}  }
class C{  public DefragFreeHeadroomFraction(){  super(Options.set,"Defrag Free Headroom Fraction","Allow the defragmenter this fraction of the heap size as free headroom during defrag. For analysis purposes only!",DEFAULT_DEFRAG_FREE_HEADROOM_FRACTION);}  }
class C{  @Override protected void keyTyped(char par1,int par2){  commandBox.textboxKeyTyped(par1,par2);}  }
class C{  public SortedList(Collection<? extends T> c){  this(c.size());  for (  T e : c) {    add(e);  }}  }
class C{  public int enumerate(Thread[] threads,boolean recurse){  return enumerateGeneric(threads,recurse,0,true);}  }
class C{  public CpcRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  public static void removeKeys(final Context context,final int... keys){  assert (keys != null);  assert (keys.length > 0);  final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);  final SharedPreferences.Editor editor=preferences.edit();  for (  final int aKey : keys) {    editor.remove(context.getString(aKey));  }  editor.commit();}  }
class C{  static String toGenericSignature(final Type type){  StringBuilder sb=new StringBuilder();  toGenericSignature(sb,type);  return sb.toString();}  }
class C{  private void addDependencies(String dependencies){  pluginDependencies.addAll(Dependency.parse(dependencies));}  }
class C{  public MatchNoDocsQuery(String reason){  this.reason=reason;}  }
class C{  public static void beginSection(String sectionName){  if (ExoPlayerLibraryInfo.TRACE_ENABLED && Util.SDK_INT >= 18) {    beginSectionV18(sectionName);  }}  }
class C{  public void append(char c[],int off,int len){  int restLength=buffer.length - pos;  if (len < restLength) {    System.arraycopy(c,off,buffer,pos,len);    pos+=len;  } else {    System.arraycopy(c,off,buffer,pos,restLength);    curr.next=new Entity(buffer);    curr=curr.next;    length+=buffer.length;    buffer=new char[(buffer.length > len - restLength) ? buffer.length : len - restLength];    System.arraycopy(c,off + restLength,buffer,0,len - restLength);    pos=len - restLength;  }}  }
class C{  private void addStorageViewInitiators(VPlexStorageViewInfo storageViewInfo,List<VPlexInitiatorInfo> initiatorInfoList) throws VPlexApiException {  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_STORAGE_VIEW_ADD_INITIATORS);  modifyStorageViewInitiators(storageViewInfo,initiatorInfoList,requestURI);}  }
class C{  public LoggerFilter(List<String> loggerName,Boolean exclude){  this.loggerName=loggerName;  this.exclude=exclude;}  }
class C{  @Override protected EClass eStaticClass(){  return ValidationPackage.Literals.POST_VALIDATION;}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void newMethod(SootMethod m){  unitToRead=new HashMap<Unit,RWSet>();  unitToWrite=new HashMap<Unit,RWSet>();  localToReachingObjects=new HashMap<Local,PointsToSet>();  currentMethod=m;  sea.findNTRWSets(currentMethod);}  }
class C{  @NotNull public ThreeState shouldSkipAutopopup(@NotNull PsiElement contextElement,@NotNull PsiFile psiFile,int offset){  return ThreeState.UNSURE;}  }
class C{  public String toString(){  boolean singleCoord=(vals.length == tsize);  StringBuffer retval=new StringBuffer(singleCoord ? "" : "CFS:");  if (!singleCoord) {    retval.append(tcount).append("[");  }  if (vals.length > 0) {    retval.append("(").append(vals[0]);    for (int j=1; j < tsize; j++) {      retval.append(", ").append(vals[j]);    }    retval.append(")");  }  if (vals.length > tsize) {    retval.append(" ... (").append(vals[vals.length - tsize]);    for (int j=tsize - 1; j > 0; j--) {      retval.append(", ").append(vals[vals.length - j]);    }    retval.append(")");  }  if (!singleCoord) {    retval.append("]");  }  return retval.toString();}  }
class C{  public void testCargo() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/cargocpc/index.html");  final String expected="Cargo Ping Component used to verify if the container is started.";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public static NodeMetadataLeftIndexedMultiSegmentBipartiteGraph buildSmallTestNodeMetadataLeftIndexedMultiSegmentBipartiteGraphWithEdgeTypes(){  NodeMetadataLeftIndexedMultiSegmentBipartiteGraph nodeMetadataGraph=new NodeMetadataLeftIndexedPowerLawMultiSegmentBipartiteGraph(2,10,2,6,2.0,6,2,new HigherBitsEdgeTypeMask(),new NullStatsReceiver());  int[][] leftNodeMetadata=new int[][]{};  int[][] rightNodeMetadata=new int[][]{};  nodeMetadataGraph.addEdge(1,2,(byte)0,leftNodeMetadata,rightNodeMetadata);  nodeMetadataGraph.addEdge(1,3,(byte)1,leftNodeMetadata,rightNodeMetadata);  nodeMetadataGraph.addEdge(2,3,(byte)1,leftNodeMetadata,rightNodeMetadata);  nodeMetadataGraph.addEdge(3,3,(byte)1,leftNodeMetadata,rightNodeMetadata);  nodeMetadataGraph.addEdge(1,4,(byte)2,leftNodeMetadata,rightNodeMetadata);  nodeMetadataGraph.addEdge(1,5,(byte)3,leftNodeMetadata,rightNodeMetadata);  nodeMetadataGraph.addEdge(2,5,(byte)0,leftNodeMetadata,rightNodeMetadata);  nodeMetadataGraph.addEdge(2,6,(byte)0,leftNodeMetadata,rightNodeMetadata);  nodeMetadataGraph.addEdge(2,6,(byte)1,leftNodeMetadata,rightNodeMetadata);  nodeMetadataGraph.addEdge(1,7,(byte)0,leftNodeMetadata,rightNodeMetadata);  nodeMetadataGraph.addEdge(2,7,(byte)1,leftNodeMetadata,rightNodeMetadata);  return nodeMetadataGraph;}  }
class C{  public boolean containsValue(double val){  byte[] states=_states;  double[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  private void handleOnButtonClick(int idx,boolean action){  listener.onButtonClick(idx,action);}  }
class C{  protected int hash(Object key1,Object key2,Object key3,Object key4,Object key5){  int h=0;  if (key1 != null) {    h^=key1.hashCode();  }  if (key2 != null) {    h^=key2.hashCode();  }  if (key3 != null) {    h^=key3.hashCode();  }  if (key4 != null) {    h^=key4.hashCode();  }  if (key5 != null) {    h^=key5.hashCode();  }  h+=~(h << 9);  h^=(h >>> 14);  h+=(h << 4);  h^=(h >>> 10);  return h;}  }
class C{  @VisibleForTesting protected void resetWithRequest(SalsaRequest salsaRequest,Random random){  salsaInternalState.resetWithRequest(salsaRequest);  leftSalsaIteration.resetWithRequest(salsaRequest,random);  rightSalsaIteration.resetWithRequest(salsaRequest,random);  finalSalsaIteration.resetWithRequest(salsaRequest,random);}  }
class C{  public static double P_Accuracy(int y[],int ypred[]){  int[][] aligned=align(y,ypred);  int[] yAligned=aligned[0];  int[] ypredAligned=aligned[1];  int L=yAligned.length;  int set_union=0;  int set_inter=0;  for (int j=0; j < L; j++) {    if (yAligned[j] == 1 || ypredAligned[j] == 1)     set_union++;    if (yAligned[j] == 1 && ypredAligned[j] == 1)     set_inter++;  }  return (set_union > 0) ? (double)set_inter / (double)set_union : 1.0;}  }
class C{  @Override public double[] projectRelativeDataToScaledSpace(NumberVector data){  final int dim=data.getDimensionality();  double[] vec=new double[dim];  for (int d=0; d < dim; d++) {    vec[d]=scales[d].getRelativeScaled(data.doubleValue(d));  }  return vec;}  }
class C{  private void testRead(File ori,boolean preferCustom){  PngReaderBI png=new PngReaderBI(ori);  if (verbose)   PngHelperInternal.debug(String.format("====testing with values %s cust=%s==",ori.getName() + " " + png.imgInfo.toStringBrief(),preferCustom));  png.setPreferCustomInsteadOfBGR(preferCustom);  File dest=TestSupport.absFile("test/__test.tmp.png");  delOnExit(dest);  BufferedImage img=png.readAll();  if (verbose)   PngHelperInternal.debug(ImageIoUtils.imageTypeName(img.getType()));  ImageIoUtils.writePng(dest,img);  TestSupport.testSameValues(ori,dest);}  }
class C{  private void parsePresence(Node node){  String usePresence=null;  String presencePrfl=null;  String iconMaxSize=null;  String noteMaxSize=null;  String publishTimer=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (childnode.getNodeName().equals("characteristic")) {        if (childnode.getAttributes().getLength() > 0) {          Node typenode=childnode.getAttributes().getNamedItem("type");          if (typenode != null) {            if (typenode.getNodeValue().equalsIgnoreCase("FAVLINK")) {              parseFavoriteLink(childnode);            } else             if (typenode.getNodeValue().equalsIgnoreCase("SERVCAPWATCH")) {              parsePresenceWatcher(childnode);            } else             if (typenode.getNodeValue().equalsIgnoreCase("ServCapPresentity")) {              parsePresentityWatcher(childnode);            }          }        }      }      if (usePresence == null) {        if ((usePresence=getValueByParamName("usePresence",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_SOCIAL_PRESENCE,!usePresence.equals("0"));          continue;        }      }      if (presencePrfl == null) {        if ((presencePrfl=getValueByParamName("presencePrfl",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_PRESENCE_DISCOVERY,!presencePrfl.equals("0"));          continue;        }      }      if (iconMaxSize == null) {        if ((iconMaxSize=getValueByParamName("IconMaxSize",childnode,TYPE_INT)) != null) {          long size=Long.parseLong(iconMaxSize);          mRcsSettings.setMaxPhotoIconSize(size);          continue;        }      }      if (noteMaxSize == null) {        if ((noteMaxSize=getValueByParamName("NoteMaxSize",childnode,TYPE_INT)) != null) {          mRcsSettings.writeInteger(RcsSettingsData.MAX_FREETXT_LENGTH,Integer.parseInt(noteMaxSize));          continue;        }      }      if (publishTimer == null) {        if ((publishTimer=getValueByParamName("PublishTimer",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.PUBLISH_EXPIRE_PERIOD,Long.parseLong(publishTimer) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  public static boolean isStanza(Packet packet){  if (packet instanceof Message)   return true;  if (packet instanceof IQ)   return true;  if (packet instanceof Presence)   return true;  return false;}  }
class C{  private String createHeader(int AD_Table_ID,StringBuffer sb,StringBuffer mandatory,String packageName){  String tableName="";  int accessLevel=0;  String sql="SELECT TableName, AccessLevel FROM AD_Table WHERE AD_Table_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      tableName=rs.getString(1);      accessLevel=rs.getInt(2);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (tableName == null)   throw new RuntimeException("TableName not found for ID=" + AD_Table_ID);  String accessLevelInfo=accessLevel + " ";  if (accessLevel >= 4)   accessLevelInfo+="- System ";  if (accessLevel == 2 || accessLevel == 3 || accessLevel == 6 || accessLevel == 7)   accessLevelInfo+="- Client ";  if (accessLevel == 1 || accessLevel == 3 || accessLevel == 5 || accessLevel == 7)   accessLevelInfo+="- Org ";  String keyColumn=tableName + "_ID";  String className="" + tableName;  StringBuffer start=new StringBuffer().append(COPY).append("package " + packageName + ";\n"+ "/** Generated Model JPA - DO NOT CHANGE */\n");  if (!packageName.equals("org.adempiere.model"))   start.append("import org.adempiere.model.*;");  start.append("import java.util.*;" + "import java.sql.*;" + "import java.math.*;"+ "import javax.persistence.*;"+ "import org.compiere.util.*;"+ "import org.adempiere.util.*;"+ "/** Generated Model for ").append(tableName).append("\n" + " *  @author Victor Perez (generated) \n" + " *  @version ").append(Adempiere.MAIN_VERSION).append(" - ").append(s_run).append(" */\n" + " @Entity" + "@Table(name=\"" + tableName + "\")"+ "public class ").append(className).append(" extends PO" + " implements java.io.Serializable " + "{"+ "/** Standard Constructor\n@param ctx context\n@param " + keyColumn + " id\n@param trxName transaction\n*/\n"+ "public ").append(className).append(" (Properties ctx, int ").append(keyColumn).append(", String trxName)" + "{" + "super (ctx, ").append(keyColumn).append(", trxName);" + "/** if (").append(keyColumn).append(" == 0)" + "{").append(mandatory).append("} */\n" + "}" + "/** Load Constructor \n@param ctx context\n@param rs result set \n@param trxName transaction\n*/\n"+ "public ").append(className).append(" (Properties ctx, ResultSet rs, String trxName)" + "{" + "super (ctx, rs, trxName);"+ "}"+ "/** AD_Table_ID=").append(AD_Table_ID).append(" */\n" + "public static final int Table_ID=").append(AD_Table_ID).append(";\n" + "/** TableName=").append(tableName).append(" */\n" + "public static final String Table_Name=\"").append(tableName).append("\";\n" + "protected static KeyNamePair Model = new KeyNamePair(").append(AD_Table_ID).append(",\"").append(tableName).append("\");\n" + "protected BigDecimal accessLevel = new BigDecimal(").append(accessLevel).append(");" + "/** AccessLevel\n@return ").append(accessLevelInfo).append("\n*/\n" + "protected int get_AccessLevel()" + "{"+ "return accessLevel.intValue();"+ "}"+ "/** Load Meta Data\n@param ctx context\n@return PO Info\n*/\n"+ "protected POInfo initPO (Properties ctx)"+ "{"+ "POInfo poi = POInfo.getPOInfo (ctx, Table_ID);"+ "return poi;"+ "}"+ "/** Info\n@return info\n*/\n"+ "public String toString()"+ "{"+ "StringBuffer sb = new StringBuffer (\"").append(className).append("[\")" + ".append(get_ID()).append(\"]\");" + "return sb.toString();"+ "}");  StringBuffer end=new StringBuffer("}");  sb.insert(0,start);  sb.append(end);  return className;}  }
class C{  public PeriodAxis(String label,RegularTimePeriod first,RegularTimePeriod last){  this(label,first,last,TimeZone.getDefault(),Locale.getDefault());}  }
class C{  private static final int monthOffset(final int m,final boolean leapYear){  return (leapYear ? monthLeapOffset[m - 1] : monthOffset[m - 1]);}  }
class C{  public boolean isReadWrite(){  Object oo=get_Value(COLUMNNAME_IsReadWrite);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgettagname.class,args);}  }
class C{  public int offset(){  return offset;}  }
class C{  protected void refresh(){  this.removeAllChildren();  for (  KMLAbstractFeature child : this.getFeature().getFeatures()) {    if (child != null)     this.addFeatureNode(child);  }}  }
class C{  protected PartitionedState(Supplier<S> initialState){  this.initialState=initialState;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("noMatch");  assertSize("elementGetElementsByTagNameNoMatchNoMatchAssert",0,elementList);}  }
class C{  @Override public double distance(NumberVector v1,NumberVector v2){  return 1. - uncenteredCorrelation(v1,v2);}  }
class C{  public static Number acosh(Number a){  return FastMath.acosh(a.doubleValue());}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"adc");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not an adc instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize size=targetResult.getSize();  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));  final String carryMask=String.valueOf(Helpers.getCarryMask(size));  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(size));  final String shiftValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));  final String shiftCarry=String.valueOf(-size.getBitSize());  final OperandSize resultSize=TranslationHelpers.getNextSize(size);  final String msb1=environment.getNextVariableString();  final String msb2=environment.getNextVariableString();  final String addResultTemp=environment.getNextVariableString();  final String addResult=environment.getNextVariableString();  final String msbResult=environment.getNextVariableString();  final String msbSameBefore=environment.getNextVariableString();  final String msbSameBeforeNeg=environment.getNextVariableString();  final String msbChanged=environment.getNextVariableString();  final String tempOf=environment.getNextVariableString();  final String tempCf=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,size,sourceRegister,size,msbMask,size,msb1));  instructions.add(ReilHelpers.createAnd(offset + 1,size,targetRegister,size,msbMask,size,msb2));  instructions.add(ReilHelpers.createAdd(offset + 2,size,sourceRegister,size,targetRegister,resultSize,addResultTemp));  instructions.add(ReilHelpers.createAdd(offset + 3,resultSize,addResultTemp,OperandSize.BYTE,Helpers.CARRY_FLAG,resultSize,addResult));  instructions.add(ReilHelpers.createAnd(offset + 4,resultSize,addResult,resultSize,msbMask,size,msbResult));  instructions.add(ReilHelpers.createBsh(offset + 5,size,msbResult,size,shiftValue,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createXor(offset + 6,size,msb1,size,msb2,size,msbSameBefore));  instructions.add(ReilHelpers.createXor(offset + 7,size,msbSameBefore,size,msbMask,size,msbSameBeforeNeg));  instructions.add(ReilHelpers.createXor(offset + 8,size,msb1,size,msbResult,size,msbChanged));  instructions.add(ReilHelpers.createAnd(offset + 9,size,msbSameBeforeNeg,size,msbChanged,size,tempOf));  instructions.add(ReilHelpers.createBsh(offset + 10,size,tempOf,size,shiftValue,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 11,resultSize,addResult,resultSize,carryMask,resultSize,tempCf));  instructions.add(ReilHelpers.createBsh(offset + 12,resultSize,tempCf,resultSize,shiftCarry,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 13,resultSize,addResult,resultSize,truncateMask,size,truncatedResult));  instructions.add(ReilHelpers.createBisz(offset + 14,size,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  Helpers.writeBack(environment,offset + 15,targetOperand,truncatedResult,size,targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  synchronized public void close(){  super.close();  releaseWriteCache();  try {    if (raf != null) {synchronized (opener) {        if (raf != null && raf.getChannel().isOpen()) {          raf.close();        }      }    }  } catch (  IOException ex) {    throw new RuntimeException(ex);  }  if (!bufferMode.isStable() && file.exists()) {    if (!file.delete()) {      log.warn("Unable to delete temporary file: " + file);    }  }}  }
class C{  public GroupCommand(String name,int matches){  _name=name;  _matches=matches;  _ngroups=null;}  }
class C{  public DateTime toDateTimeToday(DateTimeZone zone){  Chronology chrono=getChronology().withZone(zone);  long instantMillis=DateTimeUtils.currentTimeMillis();  long resolved=chrono.set(this,instantMillis);  return new DateTime(resolved,chrono);}  }
class C{  protected void desFunc(int[] wKey,byte[] in,int inOff,byte[] out,int outOff){  int work, right, left;  left=(in[inOff + 0] & 0xff) << 24;  left|=(in[inOff + 1] & 0xff) << 16;  left|=(in[inOff + 2] & 0xff) << 8;  left|=(in[inOff + 3] & 0xff);  right=(in[inOff + 4] & 0xff) << 24;  right|=(in[inOff + 5] & 0xff) << 16;  right|=(in[inOff + 6] & 0xff) << 8;  right|=(in[inOff + 7] & 0xff);  work=((left >>> 4) ^ right) & 0x0f0f0f0f;  right^=work;  left^=(work << 4);  work=((left >>> 16) ^ right) & 0x0000ffff;  right^=work;  left^=(work << 16);  work=((right >>> 2) ^ left) & 0x33333333;  left^=work;  right^=(work << 2);  work=((right >>> 8) ^ left) & 0x00ff00ff;  left^=work;  right^=(work << 8);  right=((right << 1) | ((right >>> 31) & 1)) & 0xffffffff;  work=(left ^ right) & 0xaaaaaaaa;  left^=work;  right^=work;  left=((left << 1) | ((left >>> 31) & 1)) & 0xffffffff;  for (int round=0; round < 8; round++) {    int fval;    work=(right << 28) | (right >>> 4);    work^=wKey[round * 4 + 0];    fval=SP7[work & 0x3f];    fval|=SP5[(work >>> 8) & 0x3f];    fval|=SP3[(work >>> 16) & 0x3f];    fval|=SP1[(work >>> 24) & 0x3f];    work=right ^ wKey[round * 4 + 1];    fval|=SP8[work & 0x3f];    fval|=SP6[(work >>> 8) & 0x3f];    fval|=SP4[(work >>> 16) & 0x3f];    fval|=SP2[(work >>> 24) & 0x3f];    left^=fval;    work=(left << 28) | (left >>> 4);    work^=wKey[round * 4 + 2];    fval=SP7[work & 0x3f];    fval|=SP5[(work >>> 8) & 0x3f];    fval|=SP3[(work >>> 16) & 0x3f];    fval|=SP1[(work >>> 24) & 0x3f];    work=left ^ wKey[round * 4 + 3];    fval|=SP8[work & 0x3f];    fval|=SP6[(work >>> 8) & 0x3f];    fval|=SP4[(work >>> 16) & 0x3f];    fval|=SP2[(work >>> 24) & 0x3f];    right^=fval;  }  right=(right << 31) | (right >>> 1);  work=(left ^ right) & 0xaaaaaaaa;  left^=work;  right^=work;  left=(left << 31) | (left >>> 1);  work=((left >>> 8) ^ right) & 0x00ff00ff;  right^=work;  left^=(work << 8);  work=((left >>> 2) ^ right) & 0x33333333;  right^=work;  left^=(work << 2);  work=((right >>> 16) ^ left) & 0x0000ffff;  left^=work;  right^=(work << 16);  work=((right >>> 4) ^ left) & 0x0f0f0f0f;  left^=work;  right^=(work << 4);  out[outOff + 0]=(byte)((right >>> 24) & 0xff);  out[outOff + 1]=(byte)((right >>> 16) & 0xff);  out[outOff + 2]=(byte)((right >>> 8) & 0xff);  out[outOff + 3]=(byte)(right & 0xff);  out[outOff + 4]=(byte)((left >>> 24) & 0xff);  out[outOff + 5]=(byte)((left >>> 16) & 0xff);  out[outOff + 6]=(byte)((left >>> 8) & 0xff);  out[outOff + 7]=(byte)(left & 0xff);}  }
class C{  public String fileTipText(){  return "The file to read from/write to.";}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View v=inflater.inflate(R.layout.hello_world,container,false);  View tv=v.findViewById(R.id.text);  ((TextView)tv).setText("Fragment #" + mNum);  tv.setBackgroundDrawable(getResources().getDrawable(android.R.drawable.gallery_thumb));  return v;}  }
class C{  public RuntimeIterator findRuntimeIterator(CompiledValue expr){  if (expr instanceof RuntimeIterator) {    RuntimeIterator rIter=(RuntimeIterator)expr;    return rIter;  }  return (RuntimeIterator)findIterator(expr);}  }
class C{  public WekaException(){  super();}  }
class C{  public boolean ensureValid(Object value){  int count=-1;  try {    Collection<?> collection=(Collection<?>)value;    count=collection.size();  } catch (  Exception e) {    try {      count=Array.getLength(value);    } catch (    IllegalArgumentException e2) {    }  }  return ensureValid(count);}  }
class C{  public void beforeCutDownAndExpansionOfSingleIndexResult(Index index,Collection initialResult){}  }
class C{  public boolean onTouchEvent(final MotionEvent event){  int action=MotionEventCompat.getActionMasked(event);switch (action) {case MotionEvent.ACTION_DOWN:    touchX=event.getX();  touchY=event.getY();isOutsideView=drawRect.contains(touchX,touchY);elevate();return true;case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:lower();return true;}return false;}  }
class C{  public static <T>T registerNewTarget(Class<T> clazz,String baseUrl,ClientConfig config){  T target;  HoodieMetadataParser.parse(clazz);  target=(T)Proxy.newProxyInstance(clazz.getClassLoader(),new Class[]{clazz},new ReflectiveInvocationHandler(baseUrl,config));  return target;}  }
class C{  protected ParameterizedTypeRefImpl(){  super();}  }
class C{  public IcaResult findComponents(){  int n=X.rows();  int p=X.columns();  if (numComponents > Math.min(n,p)) {    TetradLogger.getInstance().log("info","Requested number of components is too large.");    TetradLogger.getInstance().log("info","Reset to " + Math.min(n,p));    numComponents=Math.min(n,p);  }  if (wInit == null) {    wInit=new TetradMatrix(numComponents,numComponents);    for (int i=0; i < wInit.rows(); i++) {      for (int j=0; j < wInit.columns(); j++) {        wInit.set(i,j,RandomUtil.getInstance().nextNormal(0,1));      }    }  } else   if (wInit.rows() != wInit.columns()) {    throw new IllegalArgumentException("wInit is the wrong size.");  }  if (verbose) {    TetradLogger.getInstance().log("info","Centering");  }  X=center(X);  if (colNorm) {    X=scale(X);  }  X=X.transpose();  if (verbose) {    TetradLogger.getInstance().log("info","Whitening");  }  TetradMatrix V=X.times(X.transpose()).scalarMult(1.0 / n);  SingularValueDecomposition s=new SingularValueDecomposition(V.getRealMatrix());  TetradMatrix D=new TetradMatrix(s.getS());  TetradMatrix U=new TetradMatrix(s.getU());  for (int i=0; i < D.rows(); i++) {    D.set(i,i,1.0 / Math.sqrt(D.get(i,i)));  }  TetradMatrix K=D.times(U.transpose());  K=K.scalarMult(-1);  K=K.getPart(0,numComponents - 1,0,p - 1);  TetradMatrix X1=K.times(X);  TetradMatrix b;  if (algorithmType == DEFLATION) {    b=icaDeflation(X1,numComponents,tolerance,function,alpha,maxIterations,verbose,wInit);  } else   if (algorithmType == PARALLEL) {    b=icaParallel(X1,numComponents,tolerance,function,alpha,maxIterations,verbose,wInit);  } else {    throw new IllegalStateException();  }  TetradMatrix w=b.times(K);  TetradMatrix S=w.times(X);  TetradMatrix A=w.transpose().times(w.times(w.transpose()).inverse());  return new IcaResult(X.transpose(),K.transpose(),b.transpose(),A.transpose(),S.transpose());}  }
class C{  public int byteSize(){  if (text == null) {    return 9;  }  return 9 + text.length();}  }
class C{  private MockHolder makeCommands(int expected,String... commands) throws Exception {  TestAppClient appClient=new TestAppClient("localhost",tcpAppPort);  OngoingStubbing<String> ongoingStubbing=when(bufferedReader.readLine());  for (  String cmd : commands) {    ongoingStubbing=ongoingStubbing.thenReturn(cmd);  }  ongoingStubbing.thenAnswer(null);  appClient.start(bufferedReader);  verify(appClient.responseMock,times(expected)).channelRead(any(),any());  return new MockHolder(appClient.responseMock);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!klazz.isInstance(obj)) {    return false;  }  Object handler=null;  if (Proxy.isProxyClass(obj.getClass()) && (handler=Proxy.getInvocationHandler(obj)) instanceof AnnotationFactory) {    AnnotationFactory other=(AnnotationFactory)handler;    if (elements.length != other.elements.length) {      return false;    }    next:     for (    AnnotationMember el1 : elements) {      for (      AnnotationMember el2 : other.elements) {        if (el1.equals(el2)) {          continue next;        }      }      return false;    }    return true;  } else {    for (    final AnnotationMember el : elements) {      if (el.tag == AnnotationMember.ERROR) {        return false;      }      try {        if (!el.definingMethod.isAccessible()) {          el.definingMethod.setAccessible(true);        }        Object otherValue=el.definingMethod.invoke(obj);        if (otherValue != null) {          if (el.tag == AnnotationMember.ARRAY) {            if (!el.equalArrayValue(otherValue)) {              return false;            }          } else {            if (!el.value.equals(otherValue)) {              return false;            }          }        } else         if (el.value != AnnotationMember.NO_VALUE) {          return false;        }      } catch (      Throwable e) {        return false;      }    }    return true;  }}  }
class C{  public long startRemove(){  return DistributionStats.getStatTime();}  }
class C{  public void registerTemporarySpaceObject(ISpaceObject object,int dimId,long expireTime){  int nextDimId=getNextStationId();  temporaryDimensions.put(nextDimId,expireTime);  temporaryDimensionPlayerNumber.put(dimId,0);  registerSpaceObject(object,nextDimId);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public File makeAcceptable(File pathname){  if (accept(pathname)) {    return pathname;  } else {    return new File(pathname.getPath() + '.' + defaultExtension);  }}  }
class C{  public int read(ByteBuffer dst) throws IOException {  if (readOffset == readLength) {    if (writePending)     flushForced();    fillReadBuffer();    if (readOffset == readLength)     return 0;  }  long startPosition=position();  int remaining;  int bufferedLength;  while (dst.hasRemaining()) {    remaining=dst.remaining();    if (readBuffer.length < READ_BUFFER_NIO_LIMIT && readBuffer.length < remaining && readOffset == readLength) {      readBuffer=new byte[Math.min(remaining * 2,READ_BUFFER_NIO_LIMIT)];      readWrap=null;    }    bufferedLength=readLength - readOffset;    if (remaining > bufferedLength)     remaining=bufferedLength;    dst.put(readBuffer,readOffset,remaining);    readOffset+=remaining;    if (readOffset == readLength) {      fillReadBuffer();      if (readOffset == readLength)       return (int)(position() - startPosition);    }  }  return (int)(position() - startPosition);}  }
class C{  @SuppressWarnings("ForLoopReplaceableByForEach") private static boolean isExcluded0(Class<?> cls){  assert cls != null;  final Class<?>[] inc=INCL_CLASSES;  for (int i=0; i < inc.length; i++)   if (inc[i].isAssignableFrom(cls))   return false;  final Class<?>[] exc=EXCL_CLASSES;  for (int i=0; i < exc.length; i++)   if (exc[i].isAssignableFrom(cls))   return true;  return false;}  }
class C{  public void openRaceList(){  if (isDataStale()) {    reload();  }  racesDialog.setLocationRelativeTo(parent);  racesDialog.showDialog();}  }
class C{  public static int ENOTNAM(){  return 118;}  }
class C{  public void add(int position,T item){  mItems.add(position,item);  notifyDataSetChanged();}  }
class C{  @Override public void onMessage(Message message){  try {    if (message != null) {      String messageStr=((TextMessage)message).getText();      logger.info(String.format("Received: %s",messageStr));      Gson gson=new GsonBuilder().create();      ProcessOutQueueModel processOutQueueModel=gson.fromJson(messageStr,ProcessOutQueueModel.class);      OCRTransaction ocrTransaction=ocrTransactionDAO.findById(new OCRTransaction(processOutQueueModel.getTransactionId()));      Assert.notNull(ocrTransaction);      if (processOutQueueModel.getCnpj() != null) {        if (processOutQueueModel.getCnpj().length() > 14) {          ocrTransaction.setCnpj(processOutQueueModel.getCnpj().substring(0,14));        } else {          ocrTransaction.setCnpj(processOutQueueModel.getCnpj());        }      }      if (processOutQueueModel.getCoo() != null) {        if (processOutQueueModel.getCoo().length() > 6) {          ocrTransaction.setCoo(processOutQueueModel.getCoo().substring(0,6));        } else {          ocrTransaction.setCoo(processOutQueueModel.getCoo());        }      }      if (processOutQueueModel.getDate() != null) {        Date date;        SimpleDateFormat df;        try {          df=new SimpleDateFormat(Constants.DATE_FORMAT);          date=df.parse(processOutQueueModel.getDate());        } catch (        ParseException ex) {          logger.info(Constants.DATE_FORMAT + " format wasn't the right one for " + processOutQueueModel.getDate());          try {            df=new SimpleDateFormat("dd/MMyyyy");            date=df.parse(processOutQueueModel.getDate());          } catch (          ParseException ex2) {            logger.info("dd/MMyyyy" + " format wasn't the right one for " + processOutQueueModel.getDate());            try {              df=new SimpleDateFormat("ddMM/yyyy");              date=df.parse(processOutQueueModel.getDate());            } catch (            ParseException ex3) {              logger.info("ddMM/yyyy" + " format wasn't the right one for " + processOutQueueModel.getDate());              try {                df=new SimpleDateFormat("ddMMyyyy");                date=df.parse(processOutQueueModel.getDate());              } catch (              ParseException ex4) {                logger.info("ddMMyyyy" + " format wasn't the right one for " + processOutQueueModel.getDate());                date=null;              }            }          }        }        ocrTransaction.setDate(date);      }      try {        ocrTransaction.setTotal(processOutQueueModel.getTotal());      } catch (      Exception ex) {        ocrTransaction.setTotal(null);      }      ocrTransaction.setProcessed(true);      processTaxReceiptCloudWatchService.putMetricData(processTaxReceiptCloudWatchService.getElapsedTimeToProcess(),processOutQueueModel.getElapsedTime());      ocrTransactionDAO.save(ocrTransaction);    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Textifier visitTypeAnnotation(final int typeRef,final TypePath typePath,final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  buf.setLength(0);  buf.append(") : ");  appendTypeReference(typeRef);  buf.append(", ").append(typePath);  buf.append(visible ? "\n" : " // invisible\n");  text.add(buf.toString());  return t;}  }
class C{  public static void d(String msg,Object... args){  if (!allowD)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  public void decrypt(Path path,ByteString key,long decryptedSize) throws BadDataException, IOException {  Path encrypted=null;  try {    if (Files.size(path) == 0) {      logger.warn("--decrypt() > cannot decrypt an empty file: {}",path);      return;    }    ParametersWithIV ivKey=deriveIvKey(key);    KeyParameter fileKey=deriveFileKey(key);    long blockCount=Files.size(path) + (decryptedSize > 0 ? 0x0FFF : 0) >> 12;    encrypted=path.getParent().resolve(path.getFileName() + ".encrypted");    Files.move(path,encrypted,StandardCopyOption.REPLACE_EXISTING);    try (InputStream input=Files.newInputStream(encrypted,READ);OutputStream output=Files.newOutputStream(path,CREATE,WRITE,TRUNCATE_EXISTING)){      byte[] checksum=decrypt(input,output,blockCount,ivKey,fileKey);      if (decryptedSize == 0) {        decryptedSize=trailer(input,checksum);        if (decryptedSize == -1) {          logger.warn("-- decrypt() > bad trailer/ checksum");        }      }    }     long size=Files.size(path);    if (decryptedSize > 0 && size > decryptedSize) {      logger.debug("-- decrypt() > truncating to: {} from: {}",decryptedSize,size);      Files.newByteChannel(path,WRITE).truncate(decryptedSize).close();    } else     if (Files.size(path) < decryptedSize) {      logger.warn("-- decrypt() > short output size: {} expected: {}",Files.size(path),decryptedSize);    }  } catch (  BufferUnderflowException|DataLengthException ex) {    throw new BadDataException("Cipher exception",ex);  } finally {    if (encrypted != null) {      try {        Files.deleteIfExists(encrypted);      } catch (      IOException ex) {        logger.warn("-- decrypt() > unable to deleted temporary encrypted file: ",ex);      }    }  }}  }
class C{  protected AlgorithmParameters engineGetParameters(){  AlgorithmParameters params=null;  if (iv != null) {    String algo=cipherKey.getAlgorithm();    try {      params=AlgorithmParameters.getInstance(algo,SunJCE.getInstance());      params.init(new IvParameterSpec(iv));    } catch (    NoSuchAlgorithmException nsae) {      throw new RuntimeException("Cannot find " + algo + " AlgorithmParameters implementation in SunJCE provider");    }catch (    InvalidParameterSpecException ipse) {      throw new RuntimeException("IvParameterSpec not supported");    }  }  return params;}  }
class C{  public InvalidRedirectLocationException(final String message,final String location){  super(message);  this.location=location;}  }
class C{  public HashSet(Collection c){  map=new HashMap(Math.max((int)(c.size() / .75f) + 1,16));  addAll(c);}  }
class C{  private void parseSI(Element siTag,Entity entity){  String value=siTag.getAttribute(INTEGRITY);  try {    int newSI=Integer.parseInt(value);    ((Aero)entity).setSI(newSI);  } catch (  Exception e) {    warning.append("Invalid SI value in structural integrity tag.\n");  }}  }
class C{  private TreeNodeVisitor trainC(ImpurityScore setScore,List<DataPointPair<Integer>> subSet,List<Integer> features,CategoricalData[] catInfo,Random rand,Stack<List<DataPointPair<Integer>>> reusableLists){  if (subSet.size() < stopSize || setScore.getScore() == 0.0) {    if (subSet.isEmpty())     return null;    return new NodeC(setScore.getResults());  }  double bestGain=Double.NEGATIVE_INFINITY;  double bestThreshold=Double.NaN;  int bestAttribute=-1;  ImpurityScore[] bestScores=null;  List<List<DataPointPair<Integer>>> bestSplit=null;  Set<Integer> bestLeftSide=null;  Collections.shuffle(features);  final int goTo=Math.min(selectionCount,features.size());  for (int i=0; i < goTo; i++) {    double gain;    double threshold=Double.NaN;    Set<Integer> leftSide=null;    ImpurityScore[] scores;    int a=features.get(i);    List<List<DataPointPair<Integer>>> aSplit;    if (a < catInfo.length) {      final int vals=catInfo[a].getNumOfCategories();      if (binaryCategoricalSplitting || vals == 2) {        scores=createScores(2);        Set<Integer> catsValsInUse=new IntSet(vals * 2);        for (        DataPointPair<Integer> dpp : subSet)         catsValsInUse.add(dpp.getDataPoint().getCategoricalValue(a));        if (catsValsInUse.size() == 1)         return new NodeC(setScore.getResults());        leftSide=new IntSet(vals);        int toUse=rand.nextInt(catsValsInUse.size() - 1) + 1;        ListUtils.randomSample(catsValsInUse,leftSide,toUse,rand);        aSplit=new ArrayList<List<DataPointPair<Integer>>>(2);        fillList(2,reusableLists,aSplit);        for (        DataPointPair<Integer> dpp : subSet) {          DataPoint dp=dpp.getDataPoint();          int dest=leftSide.contains(dpp.getDataPoint().getCategoricalValue(a)) ? 0 : 1;          scores[dest].addPoint(dp,dpp.getPair());          aSplit.get(dest).add(dpp);        }      } else {        scores=createScores(vals);        aSplit=new ArrayList<List<DataPointPair<Integer>>>(vals);        fillList(vals,reusableLists,aSplit);        for (        DataPointPair<Integer> dpp : subSet) {          DataPoint dp=dpp.getDataPoint();          scores[dp.getCategoricalValue(a)].addPoint(dp,dpp.getPair());          aSplit.get(dp.getCategoricalValue(a)).add(dpp);        }      }    } else {      int numerA=a - catInfo.length;      double min=Double.POSITIVE_INFINITY, max=Double.NEGATIVE_INFINITY;      for (      DataPointPair<Integer> dpp : subSet) {        double val=dpp.getVector().get(numerA);        min=Math.min(min,val);        max=Math.max(max,val);      }      threshold=rand.nextDouble() * (max - min) + min;      scores=createScores(2);      aSplit=new ArrayList<List<DataPointPair<Integer>>>(2);      fillList(2,reusableLists,aSplit);      for (      DataPointPair<Integer> dpp : subSet) {        double val=dpp.getVector().get(numerA);        int toAddTo=val <= threshold ? 0 : 1;        aSplit.get(toAddTo).add(dpp);        scores[toAddTo].addPoint(dpp.getDataPoint(),dpp.getPair());      }    }    gain=ImpurityScore.gain(setScore,scores);    if (gain > bestGain) {      bestGain=gain;      bestAttribute=a;      bestThreshold=threshold;      bestScores=scores;      if (bestSplit != null)       fillStack(reusableLists,bestSplit);      bestSplit=aSplit;      bestLeftSide=leftSide;    } else     fillStack(reusableLists,aSplit);  }  fillStack(reusableLists,Arrays.asList(subSet));  NodeBase toReturn;  if (bestAttribute < catInfo.length)   if (bestSplit.size() == 2)   toReturn=new NodeCCat(bestAttribute,bestLeftSide,setScore.getResults()); else {    toReturn=new NodeCCat(goTo,bestSplit.size(),setScore.getResults());    features.remove(new Integer(bestAttribute));  } else   toReturn=new NodeCNum(bestAttribute - catInfo.length,bestThreshold,setScore.getResults());  for (int i=0; i < toReturn.children.length; i++) {    toReturn.children[i]=trainC(bestScores[i],bestSplit.get(i),features,catInfo,rand,reusableLists);  }  return toReturn;}  }
class C{  private static <K>K unmaskNull(K key){  return (key == NULL_KEY ? null : key);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private static int CallObjectMethod(JNIEnvironment env,int objJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallObjectMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,null,false);    return env.pushJNIRef(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  @Override public void write(int b) throws IOException {  throw new UnsupportedOperationException();}  }
class C{  protected final void error(Throwable ex){  if (done) {    UnsignalledExceptions.onErrorDropped(ex);    return;  }  done=true;  actual.onError(ex);}  }
class C{  public static void validate(byte[] imageData,String contentType,int minWidth,int minHeight,int maxWidth,int maxHeight) throws ValidationException {  if (imageData == null) {    throw new IllegalArgumentException("Parameter imageData must not be greater zero");  }  if (minWidth <= 0 && maxWidth <= 0) {    throw new IllegalArgumentException("Parameter minWidth or maxWidth must not be greater zero");  }  if (minHeight <= 0 && maxHeight <= 0) {    throw new IllegalArgumentException("Parameter minHeight or maxHeight must not be greater zero");  }  if (minWidth > 0 && minHeight <= 0 || minWidth <= 0 && minHeight > 0) {    throw new IllegalArgumentException("Parameter pair minWidth/minHeight must both be zero or both be greater than zero");  }  if (maxWidth > 0 && maxHeight <= 0 || maxWidth <= 0 && maxHeight > 0) {    throw new IllegalArgumentException("Parameter pair maxWidth/maxHeight must both be zero or both be greater than zero");  }  if (maxWidth > 0 && minWidth > 0 && maxWidth < minWidth) {    throw new IllegalArgumentException("Parameter maxWidth must be greater or equal than minWidth");  }  if (maxHeight > 0 && minHeight > 0 && maxHeight < minHeight) {    throw new IllegalArgumentException("Parameter maxHeight must be greater or equal than minHeight");  }  if (contentType == null || contentType.length() == 0) {    throw new ValidationException(ReasonEnum.IMAGE_TYPE,"image type",null);  }  final ImageIcon image=new ImageIcon(imageData);  if (image.getImage() == null) {    throw new ValidationException(ReasonEnum.IMAGE_TYPE,"image format",null);  }  if (!contentType.equalsIgnoreCase("image/jpeg") && !contentType.equalsIgnoreCase("image/jpg") && !contentType.equalsIgnoreCase("image/pjpeg")&& !contentType.equalsIgnoreCase("image/png")&& !contentType.equalsIgnoreCase("image/x-png")&& !contentType.equalsIgnoreCase("image/gif")) {    throw new ValidationException(ReasonEnum.IMAGE_TYPE,"image type",new Object[]{contentType});  }  if (image.getIconHeight() == -1 || image.getIconWidth() == -1) {    throw new ValidationException(ReasonEnum.IMAGE_TYPE,"image format",null);  }  if (minWidth > 0 && (image.getIconHeight() < minHeight || image.getIconWidth() < minWidth)) {    throw new ValidationException(ReasonEnum.IMAGE_SIZE_TOO_SMALL,"image size (min values " + minWidth + 'x'+ minHeight+ ')',new Object[]{image.getIconWidth() + "",image.getIconHeight() + ""});  }  if (maxWidth > 0 && (image.getIconHeight() > maxHeight || image.getIconWidth() > maxWidth)) {    throw new ValidationException(ReasonEnum.IMAGE_SIZE_TOO_BIG,"image size (max values " + maxWidth + 'x'+ maxHeight+ ')',new Object[]{image.getIconWidth() + "",image.getIconHeight() + ""});  }}  }
class C{  protected int read(byte[] buffer,int offset,int length) throws IOException {  return mTiffStream.read(buffer,offset,length);}  }
class C{  public boolean isReverseAxes(){  return true;}  }
class C{  @Override public CredentialsBuilder withPassword(String password){  this.password=password;  return this;}  }
class C{  private void adjustDayOfWeek(Calendar startTime){  int daysDiff=getDayOfWeek() - startTime.get(Calendar.DAY_OF_WEEK);  startTime.add(Calendar.DAY_OF_WEEK,daysDiff);}  }
class C{  public void showProgress(boolean show){  circle.showRing(show);}  }
class C{  public CorrelationSplitInfo(int low,int high,int attr){  initialize(low,high,attr);}  }
class C{  @Override public final int size(){  return stackTop.get();}  }
class C{  public static Bitmap rotateBitmapIfNeededAndCompressIfTold(final Context context,final Uri uri,final String source,final boolean shouldCompress){  if (!(source.equals("Camera") || (source.equals("Gallery")))) {    return null;  }  Bitmap bm=null;  String tempPath;  if (source.equals("Gallery")) {    tempPath=getPath(context,uri);  } else {    final File f=new File(uri.getPath());    tempPath=getPath(context,uri);  }  final BitmapFactory.Options btmapOptions=new BitmapFactory.Options();  bm=BitmapFactory.decodeFile(tempPath,btmapOptions);  if (shouldCompress) {    bm=compressManageAspect(400,400,bm);  }  if (source.equals("Gallery")) {    if (PhotoUtils.getOrientation(context,uri) != 0) {      final Matrix matrix=new Matrix();      matrix.postRotate(PhotoUtils.getOrientation(context,uri));      final Bitmap rotatedBm=Bitmap.createBitmap(bm,0,0,bm.getWidth(),bm.getHeight(),matrix,true);      return rotatedBm;    } else {      return bm;    }  } else {    return bm;  }}  }
class C{  private void checkConsistentArea(GeometryGraph graph){  ConsistentAreaTester cat=new ConsistentAreaTester(graph);  boolean isValidArea=cat.isNodeConsistentArea();  if (!isValidArea) {    validErr=new TopologyValidationError(TopologyValidationError.SELF_INTERSECTION,cat.getInvalidPoint());    return;  }  if (cat.hasDuplicateRings()) {    validErr=new TopologyValidationError(TopologyValidationError.DUPLICATE_RINGS,cat.getInvalidPoint());  }}  }
class C{  protected void restoreState(){  if (storePartials) {    likelihoodCore.restoreState();  } else {    updateAllNodes();  }  super.restoreState();}  }
class C{  public ArrayOfDoublesIntersection buildIntersection(){  if (dstMem_ == null) {    return new HeapArrayOfDoublesIntersection(numValues_,seed_);  }  return new DirectArrayOfDoublesIntersection(numValues_,seed_,dstMem_);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x1F0FC3E3,version=150) public int sceHttpSetRecvTimeOut(int templateId,int timeout){  return 0;}  }
class C{  public SuperBit(final int d,final int n,final int l){  this(d,n,l,new Random());}  }
class C{  @Override public void trace(String format,Object argA,Object argB){  if (logger.isLoggable(Level.FINEST)) {    FormattingTuple ft=MessageFormatter.format(format,argA,argB);    log(SELF,Level.FINEST,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public String toString(){  return super.toString() + " hasBeenDone: " + hasBeenDone+ " alive: "+ alive;}  }
class C{  public void testCertPathBuilder04() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathBuilder.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown thrown");    } catch (    IllegalArgumentException e) {    }    try {      CertPathBuilder.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public byte readDataType(){  if (buf != null) {    currentDataType=buf.get();  } else {    log.error("Why is buf null?");  }  return readDataType(currentDataType);}  }
class C{  public Server bind(URL url,ChannelHandler listener) throws RemotingException {  return new NettyServer(url,listener);}  }
class C{  private BigInteger generateX(SecureRandom random,BigInteger q){  BigInteger x=null;  byte[] temp=new byte[qlen];  while (true) {    random.nextBytes(temp);    x=new BigInteger(1,temp).mod(q);    if (x.signum() > 0 && (x.compareTo(q) < 0)) {      return x;    }  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.example.org/schema";  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  String charact;  domImpl=getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,"",docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public static void shuffle(int[] array,int numberOfShuffles){synchronized (random) {    random.shuffle(array,numberOfShuffles);  }}  }
class C{  public static byte[] toMACAddress(String macAddress){  return MacAddress.of(macAddress).getBytes();}  }
class C{  public void reset(int code){synchronized (this.keys) {    if (this.keys.containsKey(code)) {      this.keys.get(code).reset();    }  }}  }
class C{  private static DateValue[] daysInMonth(DateValue start,int interval){  List<DateValue> dates=new ArrayList<DateValue>();  DTBuilder builder=new DTBuilder(start);  DateValue d=builder.toDate();  while (d.month() == start.month()) {    dates.add(d);    builder.day+=interval;    d=builder.toDate();  }  return dates.toArray(new DateValue[0]);}  }
class C{  @RequestMapping(value="/account/reset_password/init",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> requestPasswordReset(@RequestBody String mail,HttpServletRequest request){  return userService.requestPasswordReset(mail).map(null).orElse(new ResponseEntity<>("e-mail address not registered",HttpStatus.BAD_REQUEST));}  }
class C{  public boolean runScheduler(){  IScheduler scheduler=null;  String statemgrClass=Context.stateManagerClass(config);  IStateManager statemgr;  try {    statemgr=ReflectionUtils.newInstance(statemgrClass);  } catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {    LOG.log(Level.SEVERE,"Failed to instantiate instances",e);    return false;  }  SchedulerServer server=null;  boolean isSuccessful=false;  try {    statemgr.initialize(config);    SchedulerStateManagerAdaptor adaptor=new SchedulerStateManagerAdaptor(statemgr,5000);    PackingPlans.PackingPlan serializedPackingPlan=adaptor.getPackingPlan(topology.getName());    if (serializedPackingPlan == null) {      LOG.log(Level.SEVERE,"Failed to fetch PackingPlan for topology:{0} from the state manager",topology.getName());      return false;    }    LOG.log(Level.INFO,"Packing plan fetched from state: {0}",serializedPackingPlan);    PackingPlan packedPlan=new PackingPlanProtoDeserializer().fromProto(serializedPackingPlan);    LauncherUtils launcherUtils=LauncherUtils.getInstance();    Config runtime=Config.newBuilder().putAll(launcherUtils.getPrimaryRuntime(topology,adaptor)).put(Keys.schedulerShutdown(),getShutdown()).put(Keys.SCHEDULER_PROPERTIES,properties).build();    Config ytruntime=launcherUtils.createConfigWithPackingDetails(runtime,packedPlan);    scheduler=launcherUtils.getSchedulerInstance(config,ytruntime);    if (scheduler == null) {      return false;    }    isSuccessful=scheduler.onSchedule(packedPlan);    if (!isSuccessful) {      LOG.severe("Failed to schedule topology");      return false;    }    server=getServer(ytruntime,scheduler,schedulerServerPort);    server.start();    isSuccessful=SchedulerUtils.setSchedulerLocation(runtime,String.format("%s:%d",server.getHost(),server.getPort()),scheduler);    if (isSuccessful) {      LOG.info("Waiting for termination... ");      Runtime.schedulerShutdown(ytruntime).await();    }  } catch (  IOException e) {    LOG.log(Level.SEVERE,"Failed to start server",e);    return false;  } finally {    if (server != null) {      server.stop();    }    SysUtils.closeIgnoringExceptions(scheduler);    SysUtils.closeIgnoringExceptions(statemgr);  }  return isSuccessful;}  }
class C{  public XYDataset createDataset(Float[] ds,String label){  XYSeries observations=new XYSeries(label);  int n=ds.length;  for (int i=0; i < n; i++) {    observations.add(i,ds[i]);  }  XYSeriesCollection collection=new XYSeriesCollection();  collection.addSeries(observations);  return collection;}  }
class C{  protected void sequence_EqualityExpression(ISerializationContext context,EqualityExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.EQUALITY_EXPRESSION__LHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.EQUALITY_EXPRESSION__LHS));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.EQUALITY_EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.EQUALITY_EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.EQUALITY_EXPRESSION__RHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.EQUALITY_EXPRESSION__RHS));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),semanticObject.getLhs());  feeder.accept(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0(),semanticObject.getRhs());  feeder.finish();}  }
class C{  public RegionState(S id,Collection<Region<S,E>> regions,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState){  super(id,deferred,entryActions,exitActions,pseudoState,regions);}  }
class C{  protected void close(){  log.fine("C_BPartner_ID=" + m_C_BPartner_ID);  if (m_C_BPartner_ID > 0) {    p_posPanel.f_order.setC_BPartner_ID(m_C_BPartner_ID);  } else {    p_posPanel.f_order.setC_BPartner_ID(0);  }  dispose();}  }
class C{  public button removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static byte parseByte(java.lang.String s) throws java.lang.NumberFormatException {  return parseByte(s,10);}  }
class C{  public GoogleBaseAttribute(String name,GoogleBaseAttributeType type,boolean privateAccess){  this(name,type,privateAccess,null);}  }
class C{  public static Object toUUId(Object o,Object defaultValue){  String str=toString(o,null);  if (str == null)   return defaultValue;  if (!Decision.isUUId(str))   return defaultValue;  return str;}  }
class C{  public static byte[] toByteArray(double[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(byte)array[i];  }  return result;}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  public void serialize(Node node) throws IOException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.serialize(node);}  }
class C{  @Override public void run(){  amIActive=true;  try {    int i, j, progress, oldProgress;    ShapeFileRecord rec;    com.vividsolutions.jts.geom.Geometry jtsGeom;    com.vividsolutions.jts.geom.Geometry[] geomArray;    List<com.vividsolutions.jts.geom.Geometry> geomList=new ArrayList<>();    GeometryFactory factory=new GeometryFactory();    if (args.length != 3) {      showFeedback("Incorrect number of arguments given to tool.");      return;    }    String inputFile=args[0];    String clipFile=args[1];    String outputFile=args[2];    ShapeFile input=new ShapeFile(inputFile);    ShapeType shapeType=input.getShapeType().getBaseType();    ShapeFile clipRegion=new ShapeFile(clipFile);    if (clipRegion.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input clip shapefile must be of a POLYGON base ShapeType.");      return;    }    numFeatures=input.getNumberOfRecords();    AttributeTable table=input.getAttributeTable();    DBFField[] fields=table.getAllFields();    ShapeFile output=new ShapeFile(outputFile,shapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    int numClipFeatures=clipRegion.getNumberOfRecords();    BoundingBox[] clipBoxes=new BoundingBox[numClipFeatures];    for (i=0; i < numClipFeatures; i++) {      rec=clipRegion.getRecord(i);      clipBoxes[i]=rec.getGeometry().getBox();      geomArray=rec.getGeometry().getJTSGeometries();      for (int k=0; k < geomArray.length; k++) {        geomList.add(geomArray[k]);      }    }    com.vividsolutions.jts.geom.Geometry clipGeom=factory.buildGeometry(geomList);    if (!clipGeom.isValid()) {      com.vividsolutions.jts.geom.Geometry jtsGeom2=clipGeom.buffer(0d);      clipGeom=(com.vividsolutions.jts.geom.Geometry)jtsGeom2.clone();    }    ArrayList<DoWork> tasks=new ArrayList<>();    int numProcessors=Runtime.getRuntime().availableProcessors();    ExecutorService executor=Executors.newFixedThreadPool(numProcessors);    oldProgress=-1;    for (i=0; i < numFeatures; i++) {      rec=input.getRecord(i);      BoundingBox box=rec.getGeometry().getBox();      boolean isContained=false;      for (j=0; j < numClipFeatures; j++) {        if (clipBoxes[j].overlaps(box)) {          isContained=true;          break;        }      }      if (isContained) {        geomArray=rec.getGeometry().getJTSGeometries();        geomList.clear();        geomList.addAll(Arrays.asList(geomArray));        jtsGeom=factory.buildGeometry(geomList);        tasks.add(new DoWork(i,jtsGeom,clipGeom,shapeType));      }      progress=(int)(100f * i / (numFeatures - 1));      if (progress != oldProgress) {        updateProgress("Loop 1 of 2:",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    List<Future<WorkData>> results=executor.invokeAll(tasks);    executor.shutdown();    oldProgress=-1;    i=0;    for (    Future<WorkData> result : results) {      WorkData data=result.get();      int recNum=data.recordNum;      List<whitebox.geospatialfiles.shapefile.Geometry> wbGeometries=data.wbGeometries;      for (      whitebox.geospatialfiles.shapefile.Geometry geom : wbGeometries) {        Object[] rowData=table.getRecord(recNum);        output.addRecord(geom,rowData);      }      i++;      progress=(int)(100f * i / (numFeatures - 1));      if (progress != oldProgress) {        updateProgress("Writing Output:",progress);        oldProgress=progress;        if (cancelOp) {          if (!cancelOpMessagePlayed) {            showFeedback("Operation cancelled");          }          return;        }      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void printParsingTable(LRParsingTable table,String fileName){  if (this.verbose) {    log("Printing ParsingTable to: " + fileName);  }  File file=new File(fileName);  LRParsingTableDump.dumpToHTML(table,file);}  }
class C{  public static int[] parseCIDR(String cidr){  int ret[]=new int[2];  String[] parts=cidr.split("/");  if (parts.length == 1) {    throw new IllegalArgumentException("CIDR mask bits must be specified.");  }  String cidrPrefix=parts[0].trim();  int cidrMaskBits=0;  if (parts.length == 2) {    try {      cidrMaskBits=Integer.parseInt(parts[1].trim());    } catch (    Exception e) {      throw new NumberFormatException("CIDR mask bits must be specified as a number(0 ~ 32).");    }    if (cidrMaskBits < 0 || cidrMaskBits > 32) {      throw new NumberFormatException("CIDR mask bits must be 0 <= value <= 32.");    }  }  ret[0]=IPv4.toIPv4Address(cidrPrefix);  ret[1]=cidrMaskBits;  return ret;}  }
class C{  public static String iterableToString(Iterable<?> iterable){  StringBuilder builder=new StringBuilder();  for (  Object obj : iterable) {    builder.append(String.format("%s\n",obj.toString()));  }  return builder.toString();}  }
class C{  public Hashtable<String,Object> parse(Reader i) throws IOException {  modern=false;  state=new Hashtable();  parseStack=new Vector();  currentKey=null;  parse(i,this);  return (Hashtable<String,Object>)state;}  }
class C{  public static Lexicon buildWumpusLex(){  Lexicon l=new Lexicon();  ArrayList<LexWord> list=new ArrayList<LexWord>();  list.add(new LexWord("stench",(float)0.05));  list.add(new LexWord("breeze",(float)0.10));  list.add(new LexWord("wumpus",(float)0.15));  list.add(new LexWord("pits",(float)0.05));  list.add(new LexWord("friend",(float)0.10));  list.add(new LexWord("enemy",(float)0.10));  list.add(new LexWord("dog",(float)0.10));  list.add(new LexWord("superhero",(float)0.20));  list.add(new LexWord("virus",(float)0.15));  l.put("NOUN",list);  ArrayList<LexWord> verbList=new ArrayList<LexWord>();  verbList.add(new LexWord("is",(float)0.10));  verbList.add(new LexWord("feel",(float)0.10));  verbList.add(new LexWord("smells",(float)0.10));  verbList.add(new LexWord("stinks",(float)0.05));  verbList.add(new LexWord("wants",(float)0.20));  verbList.add(new LexWord("flies",(float)0.10));  verbList.add(new LexWord("keeps",(float)0.05));  verbList.add(new LexWord("leaves",(float)0.10));  verbList.add(new LexWord("throws",(float)0.20));  l.put("VERB",verbList);  ArrayList<LexWord> adjList=new ArrayList<LexWord>();  adjList.add(new LexWord("right",(float)0.10));  adjList.add(new LexWord("dead",(float)0.05));  adjList.add(new LexWord("smelly",(float)0.02));  adjList.add(new LexWord("breezy",(float)0.02));  adjList.add(new LexWord("foul",(float)0.10));  adjList.add(new LexWord("black",(float)0.05));  adjList.add(new LexWord("white",(float)0.05));  adjList.add(new LexWord("callous",(float)0.10));  adjList.add(new LexWord("proud",(float)0.10));  adjList.add(new LexWord("right",(float)0.10));  adjList.add(new LexWord("gold",(float)0.06));  adjList.add(new LexWord("normal",(float)0.25));  l.put("ADJS",adjList);  l.addLexWords("ADVERB","here","0.05","ahead","0.05","nearby","0.02","quickly","0.05","badly","0.05","slowly","0.08","sadly","0.10","silently","0.10","easily","0.10","seldom","0.10","sometimes","0.10","loudly","0.10","cordially","0.05","frequently","0.05");  l.addLexWords("PRONOUN","me","0.10","you","0.03","i","0.10","it","0.10","us","0.07","they","0.20","he","0.20","she","0.20");  l.addLexWords("RELPRO","that","0.40","which","0.15","who","0.20","whom","0.02","whose","0.08","whabt","0.15");  l.addLexWords(buildNameLexicon());  l.addLexWords("ARTICLE","the","0.40","a","0.30","an","0.10","every","0.05","some","0.15");  l.addLexWords("PREP","to","0.20","in","0.10","on","0.05","near","0.10","after","0.10","among","0.05","around","0.20","against","0.10","across","0.10");  l.addLexWords("CONJ","and","0.50","or","0.10","but","0.20","yet","0.02","since","0.08","unless","0.10");  l.addLexWords("DIGIT","0","0.20","1","0.20","2","0.20","3","0.20","4","0.20");  return l;}  }
class C{  private boolean isCanonicalEquals(ClientProxyMembershipID that){  if (this == that) {    return true;  }  if (this.uniqueId != that.uniqueId) {    return false;  }  return Arrays.equals(this.identity,that.identity);}  }
class C{  public boolean isRefresh(){  return is(REFRESH);}  }
class C{  public Path lib(){  return root.resolve("lib");}  }
class C{  public void addHtmlModificationListener(HtmlModificationListener listener){  htmlModificationListeners.add(listener);}  }
class C{  private int updateDefaultAccount(String TableName,String ColumnName,int C_AcctSchema_ID,int C_ElementValue_ID){  log.fine(TableName + "." + ColumnName+ " - "+ C_ElementValue_ID);  int retValue=UPDATE_ERROR;  StringBuffer sql=new StringBuffer("SELECT x.").append(ColumnName).append(",Account_ID FROM ").append(TableName).append(" x INNER JOIN C_ValidCombination vc ON (x.").append(ColumnName).append("=vc.C_ValidCombination_ID) ").append("WHERE x.C_AcctSchema_ID=").append(C_AcctSchema_ID);  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      int C_ValidCombination_ID=rs.getInt(1);      int Account_ID=rs.getInt(2);      if (Account_ID == C_ElementValue_ID) {        retValue=UPDATE_SAME;        log.fine("Account_ID same as new value");      } else {        if (m_createNewCombination) {          MAccount acct=MAccount.get(getCtx(),C_ValidCombination_ID);          acct.setAccount_ID(C_ElementValue_ID);          if (acct.save()) {            retValue=UPDATE_YES;            int newC_ValidCombination_ID=acct.getC_ValidCombination_ID();            if (C_ValidCombination_ID != newC_ValidCombination_ID) {              sql=new StringBuffer("UPDATE ").append(TableName).append(" SET ").append(ColumnName).append("=").append(newC_ValidCombination_ID).append(" WHERE C_AcctSchema_ID=").append(C_AcctSchema_ID);              int no=DB.executeUpdate(sql.toString(),get_TrxName());              log.fine("New #" + no + " - "+ TableName+ "."+ ColumnName+ " - "+ C_ElementValue_ID+ " -- "+ C_ValidCombination_ID+ " -> "+ newC_ValidCombination_ID);              if (no == 1)               retValue=UPDATE_YES;            }          } else           log.log(Level.SEVERE,"Account not saved - " + acct);        } else {          sql=new StringBuffer("UPDATE C_ValidCombination SET Account_ID=").append(C_ElementValue_ID).append(" WHERE C_ValidCombination_ID=").append(C_ValidCombination_ID);          int no=DB.executeUpdate(sql.toString(),get_TrxName());          log.fine("Replace #" + no + " - "+ "C_ValidCombination_ID="+ C_ValidCombination_ID+ ", New Account_ID="+ C_ElementValue_ID);          if (no == 1) {            retValue=UPDATE_YES;            sql=new StringBuffer("UPDATE C_ValidCombination SET Account_ID=").append(C_ElementValue_ID).append(" WHERE Account_ID=").append(Account_ID);            no=DB.executeUpdate(sql.toString(),get_TrxName());            log.fine("ImportAccount.updateDefaultAccount - Replace VC #" + no + " - "+ "Account_ID="+ Account_ID+ ", New Account_ID="+ C_ElementValue_ID);            sql=new StringBuffer("UPDATE Fact_Acct SET Account_ID=").append(C_ElementValue_ID).append(" WHERE Account_ID=").append(Account_ID);            no=DB.executeUpdate(sql.toString(),get_TrxName());            log.fine("ImportAccount.updateDefaultAccount - Replace Fact #" + no + " - "+ "Account_ID="+ Account_ID+ ", New Account_ID="+ C_ElementValue_ID);          }        }      }    } else     log.log(Level.SEVERE,"Account not found " + sql);    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  return retValue;}  }
class C{  public Object remove(int index){  Object old=get(index);  content.remove(index);  modCount++;  return old;}  }
class C{  private boolean isSessionTerminating(ContentSharingSession session){  return (session instanceof TerminatingImageTransferSession || session instanceof TerminatingVideoStreamingSession);}  }
class C{  public String bgsave(){  client.bgsave();  return client.getStatusCodeReply();}  }
class C{  public T rows(String value){  return attr("rows",value);}  }
class C{  public boolean open(String fileName){  if (fileName == null)   return false;  try {    return open(new File(fileName));  } catch (  Exception ex) {    System.err.println("ZipUtil.open - " + ex);  }  return false;}  }
class C{  private String _extractPackageName(String className){  String packageName=null;  int index=className.lastIndexOf('.');  if (index != -1) {    packageName=className.substring(0,index);    index=packageName.lastIndexOf('.');    packageName=packageName.substring(++index);  }  return packageName;}  }
class C{  private boolean isClosed(){  if (!verifyReader) {    return false;  }  try {    br.mark(1);    int nextByte=br.read();    br.reset();    return nextByte == -1;  } catch (  IOException e) {    return true;  }}  }
class C{  public void add(String suggesterName,String token,List<LookupResult> results){  Map<String,List<LookupResult>> suggesterRes=this.suggestionsMap.get(suggesterName);  if (suggesterRes == null) {    this.suggestionsMap.put(suggesterName,new HashMap<String,List<LookupResult>>());  }  List<LookupResult> res=this.suggestionsMap.get(suggesterName).get(token);  if (res == null) {    res=results;    this.suggestionsMap.get(suggesterName).put(token,res);  }}  }
class C{  @Override public long longValue(){  return (long)value;}  }
class C{  public void writeToParcel(Parcel out,int flags){  out.writeFloat(left);  out.writeFloat(top);  out.writeFloat(right);  out.writeFloat(bottom);}  }
class C{  protected final void fireChildrenAdded(BeanContextMembershipEvent event){  Object listeners[];synchronized (bcmListeners) {    listeners=bcmListeners.toArray();  }  for (int i=0; i < listeners.length; i++) {    BeanContextMembershipListener l=(BeanContextMembershipListener)listeners[i];    l.childrenAdded(event);  }}  }
class C{  void serviceRemoved(ServiceEvent event){  String qualifiedName=event.getName() + "." + event.getType();  if (_addedServices.remove(qualifiedName,_addedServices.get(qualifiedName))) {    this.getListener().serviceRemoved(event);  } else {    logger.finer("Service Removed called for a service already removed: " + event);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean equals(final CharArrayList l){  if (l == this)   return true;  int s=size();  if (s != l.size())   return false;  final char[] a1=a;  final char[] a2=l.a;  while (s-- != 0)   if (a1[s] != a2[s])   return false;  return true;}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.ImageBoard.defaultSize",Double.toString(defaultSize));  properties.setProperty("MapElement.ImageBoard.defaultLabelVisible",Boolean.toString(defaultLabelVisible));}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    if (newBar) {      this.add(candleItem,true);    } else {      CandleItem dataItem=(CandleItem)this.getDataItem(this.getItemCount() - 1);      this.update(dataItem.getPeriod(),dataItem.getCandle());    }  }}  }
class C{  public Portal(){  setRPClass(RPCLASS_NAME);  put("type",RPCLASS_NAME);  isDestinationSet=false;}  }
class C{  protected void goingActive(OBlock block){  if (!ThreadingUtil.isLayoutThread())   log.error("invoked on wrong thread",new Exception("traceback"));  if (_runMode == MODE_NONE) {    return;  }  int oldIndex=_idxCurrentOrder;  int activeIdx=getIndexOfBlock(block,_idxCurrentOrder);  if (log.isDebugEnabled()) {    log.debug("**Block \"" + block.getDisplayName() + "\" goingActive. activeIdx= "+ activeIdx+ ", _idxCurrentOrder= "+ _idxCurrentOrder+ " - warrant= "+ getDisplayName());  }  if (activeIdx <= 0) {    if (activeIdx == 0 && _idxCurrentOrder == 0) {      getBlockOrderAt(activeIdx).setPath(this);    }    return;  }  if (activeIdx == _idxCurrentOrder) {    if (_engineer != null && (_engineer.getRunState() == WAIT_FOR_CLEAR)) {      log.info("Forced move into next Block " + block.getDisplayName());      _engineer.setHalt(false);    }    block._entryTime=System.currentTimeMillis();  } else   if (activeIdx == _idxCurrentOrder + 1) {    if (_delayStart) {      log.warn("Rouge entering next Block " + block.getDisplayName());      _message=Bundle.getMessage("BlockRougeOccupied",block.getDisplayName());      return;    }    if (!statusOK(block)) {      return;    }    _idxCurrentOrder=activeIdx;    block._entryTime=System.currentTimeMillis();  } else   if (activeIdx > _idxCurrentOrder + 1) {    if (_runMode == MODE_LEARN) {      log.error("Block " + block.getDisplayName() + " became occupied before block "+ getBlockAt(_idxCurrentOrder + 1).getDisplayName()+ " ABORT recording.");      firePropertyChange("abortLearn",Integer.valueOf(activeIdx),Integer.valueOf(_idxCurrentOrder));      return;    }    for (int idx=_idxCurrentOrder + 1; idx < activeIdx; idx++) {      OBlock preBlock=getBlockAt(idx);      if ((preBlock.getState() & OBlock.DARK) == 0) {        if (log.isDebugEnabled()) {          OBlock curBlock=getBlockAt(_idxCurrentOrder);          log.debug("Rouge train  at block \"" + block.getDisplayName() + "\" ahead of train "+ _trainName+ " at block \""+ curBlock.getDisplayName()+ "\"!");        }        return;      }    }    if (!statusOK(block)) {      return;    }    OBlock prevBlock=getBlockAt(activeIdx - 1);    prevBlock._entryTime=System.currentTimeMillis();    prevBlock.setValue(_trainName);    prevBlock.setState(prevBlock.getState() | OBlock.RUNNING);    if (log.isDebugEnabled()) {      log.debug("firePropertyChange(\"blockChange\", " + prevBlock.getDisplayName() + ", "+ block.getDisplayName()+ ") - warrant= "+ getDisplayName());    }    firePropertyChange("blockChange",getBlockAt(oldIndex),prevBlock);    oldIndex=activeIdx - 1;    _idxCurrentOrder=activeIdx;    block._entryTime=System.currentTimeMillis();  } else   if (_idxCurrentOrder > 0) {    log.error("Mystifying error: activeIdx = " + activeIdx + ",  _idxCurrentOrder = "+ _idxCurrentOrder+ "!");    return;  }  block.setValue(_trainName);  block.setState(block.getState() | OBlock.RUNNING);  if (_calibrater != null) {    _calibrater.calibrateAt(_idxCurrentOrder);  }  if (_idxCurrentOrder < _orders.size() - 1) {    if (_engineer != null) {      OBlock nextBlock=_orders.get(_idxCurrentOrder + 1).getBlock();      if ((nextBlock.getState() & OBlock.DARK) != 0) {        _engineer.setRunOnET(true);      } else       if (!_tempRunBlind) {        _engineer.setRunOnET(false);      }    }    moveIntoNextBlock(BEG);    for (int i=_idxCurrentOrder + 2; i < _orders.size(); i++) {      BlockOrder bo=_orders.get(i);      OBlock b=bo.getBlock();      if (b.allocate(this) != null) {        break;      }      if ((b.getState() & OBlock.OCCUPIED) != 0) {        break;      }    }  }  if (_idxCurrentOrder == activeIdx) {    if (log.isDebugEnabled()) {      log.debug("firePropertyChange(\"blockChange\", " + getBlockAt(oldIndex).getDisplayName() + ", "+ block.getDisplayName()+ ") - warrant= "+ getDisplayName());    }    firePropertyChange("blockChange",getBlockAt(oldIndex),block);  }  if (_tempRunBlind && _idxCurrentOrder > 0) {    goingInactive(getBlockAt(_idxCurrentOrder - 1));  }}  }
class C{  public Property property(DateTimeFieldType type){  if (type == null) {    throw new IllegalArgumentException("The DateTimeFieldType must not be null");  }  DateTimeField field=type.getField(getChronology());  if (field.isSupported() == false) {    throw new IllegalArgumentException("Field '" + type + "' is not supported");  }  return new Property(this,field);}  }
class C{  public EveningActivityMovement(EveningActivityMovement proto){  super(proto);  this.pathFinder=proto.pathFinder;  this.mode=proto.mode;  this.id=nextID++;  scs=proto.scs;  scs.addEveningActivityNode(this);  this.setMinGroupSize(proto.getMinGroupSize());  this.setMaxGroupSize(proto.getMaxGroupSize());}  }
class C{  public static String makeDisconnectReason(int reason,String reasonMessage){  String result="";switch (reason) {case Irc.ERROR_UNKNOWN_HOST:    result="Unknown host";  break;case Irc.REQUESTED_DISCONNECT:result="Requested";break;case Irc.ERROR_CONNECTION_CLOSED:result="";break;case Irc.ERROR_REGISTRATION_FAILED:result="Failed to complete login.";break;case Irc.ERROR_SOCKET_TIMEOUT:result="Connection timed out.";break;case Irc.SSL_ERROR:result="Could not established secure connection (" + reasonMessage + ")";break;case Irc.ERROR_SOCKET_ERROR:result=reasonMessage;break;}if (!result.isEmpty()) {result=" (" + result + ")";}return result;}  }
class C{  private boolean isValidMessage(BigInteger m,BigInteger p){  return m.compareTo(p) < 0;}  }
class C{  @Override public int readInt(String filePath,long offset){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.INT_SIZE_IN_BYTE,offset);  return byteBffer.getInt();}  }
class C{  public static IgniteUuid bytesToIgniteUuid(byte[] in,int off){  long most=bytesToLong(in,off);  long least=bytesToLong(in,off + 8);  long locId=bytesToLong(in,off + 16);  return new IgniteUuid(IgniteUuidCache.onIgniteUuidRead(new UUID(most,least)),locId);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/shares/{shareName}/acl") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep updateShareACL(@PathParam("id") URI id,@PathParam("shareName") String shareName,FileCifsShareACLUpdateParams param) throws InternalException {  _log.info("Update file share acl request received. Filesystem: {}, Share: {}",id.toString(),shareName);  _log.info("Request body: {}",param.toString());  ArgValidator.checkFieldNotNull(shareName,"shareName");  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  CifsShareUtility.checkForUpdateShareACLOperationOnStorage(device.getSystemType(),OperationTypeEnum.UPDATE_FILE_SYSTEM_SHARE_ACL.name());  if (!CifsShareUtility.doesShareExist(fs,shareName)) {    _log.error("CIFS share does not exist {}",shareName);    throw APIException.notFound.invalidParameterObjectHasNoSuchShare(fs.getId(),shareName);  }  String task=UUID.randomUUID().toString();  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  if (!vpool.getProtocols().contains(StorageProtocol.File.CIFS.name())) {    throw APIException.methodNotAllowed.vPoolDoesntSupportProtocol("Vpool doesn't support " + StorageProtocol.File.CIFS.name() + " protocol");  }  CifsShareUtility util=new CifsShareUtility(_dbClient,fs,null,shareName);  util.verifyShareACLs(param);  _log.info("Request payload verified. No errors found.");  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.UPDATE_FILE_SYSTEM_SHARE_ACL);  op.setDescription("Update file system share ACLs");  FileServiceApi fileServiceApi=getFileShareServiceImpl(fs,_dbClient);  fileServiceApi.updateShareACLs(device.getId(),fs.getId(),shareName,param,task);  auditOp(OperationTypeEnum.UPDATE_FILE_SYSTEM_SHARE_ACL,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),device.getId().toString(),param);  return toTask(fs,task,op);}  }
class C{  public Document parse(String xml) throws SAXException, IOException {  if (null == xml) {    throw new SAXException("empyt xml string is sometimes represented as null");  }  Document doc=null;  doc=getDocumentBuilder().parse(new InputSource(new ByteArrayInputStream(xml.getBytes())));  return doc;}  }
class C{  @Override protected void registerSelf(){}  }
class C{  public Boolean isSsd(){  return ssd;}  }
class C{  public QGisProjectFileWriter(Map<String,Class<? extends Geometry>> files){  this.files=files;}  }
class C{  public ComponentEvent(Component source,int id){  super(source,id);}  }
class C{  protected int[] readValues(int[] values){synchronized (workers) {    int count=workers.size();    if (values == null || values.length != count) {      values=new int[count];    }    if (seq == null || seq.length != count) {      seq=new Sequence[count];    }    int i=0;    final Iterator<WorkerThread> iter=workers.iterator();    while (iter.hasNext() && i < curr.length) {      final WorkerThread worker=iter.next();      if (seq[i] == null) {        seq[i]=((SequentialWorker)worker).getSequence();      }      values[i++]=worker.getIterations();    }  }  return values;}  }
class C{  public void login(){  throw new RuntimeException("Native facebook unsupported");}  }
class C{  public AtomicRowWriteRead(){}  }
class C{  public void closeContacts(EvolutionState state,int result){  monitor.shutdown();}  }
class C{  @NonNull public IconDrawable color(@NonNull ColorStateList colorStateList){  if (colorStateList != iconState.colorStateList) {    iconState.colorStateList=colorStateList;    color=iconState.colorStateList.getColorForState(StateSet.WILD_CARD,DEFAULT_COLOR);    paint.setColor(color);    invalidateSelf();  }  return this;}  }
class C{  private void finishNotification(String status){  mBuilder.setContentTitle(status).setProgress(0,0,false).setSmallIcon(android.R.drawable.stat_sys_upload_done).setContentText("").setTicker(status);  mNotifyManager.notify(NOTIFICATION_ID,mBuilder.build());}  }
class C{  public static int EDOM(){  return Errno.EDOM.intValue();}  }
class C{  public void dumpThreads(int depth,boolean onlyActive){  log.info(getThreadDump(depth,onlyActive));}  }
class C{  public Vector divide(int x,int y,int z){  return new Vector(this.x / x,this.y / y,this.z / z);}  }
class C{  public boolean isUnseqToken(){  return unseqToken;}  }
class C{  @Override public void run(int connId,String[] args){  if (server.getGame().getOptions().booleanOption("double_blind")) {    server.sendServerChat(connId,"Sorry, this command is disabled during double blind.");    return;  }  try {    int id=Integer.parseInt(args[1]);    Entity ent=server.getGame().getEntity(id);    if (ent != null) {      server.sendServerChat(connId,ent.statusToString());    } else {      server.sendServerChat(connId,"No such entity.");    }  } catch (  NumberFormatException nfe) {  }catch (  NullPointerException npe) {  }catch (  IndexOutOfBoundsException ioobe) {  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SelfEncapsulateFieldRefactoring(IField field) throws JavaModelException {  fEncapsulateDeclaringClass=true;  fChangeManager=new TextChangeManager();  fField=field;  if (field != null)   initialize(field);}  }
class C{  public static TemplateType[] prepareTemplateTypes(String templatesPath,String category,HttpServletRequest request) throws IOException {  List<TemplateType> templateTypesList=new ArrayList<TemplateType>();  IRepository repository=RepositoryFacade.getInstance().getRepository(request);  ICollection templatesRoot=repository.getCollection(templatesPath);  if (!templatesRoot.exists()) {    return new TemplateType[]{};  }  for (  ICollection templateCollection : templatesRoot.getCollections()) {    try {      String type=templateCollection.getName();      TemplateType templateType=TemplateType.createTemplateType(category,templateCollection.getPath(),type,repository);      templateTypesList.add(templateType);    } catch (    Exception e) {      logger.error(e.getMessage(),e);    }  }  return templateTypesList.toArray(new TemplateType[]{});}  }
class C{  double percentToAproxHeight(Rectangle2D.Double area){  return percentHeight * area.getHeight();}  }
class C{  protected void purge(){  Reference reference=queue.poll();  while (reference != null) {    purge(reference);    reference=queue.poll();  }}  }
class C{  protected void cleanupSessionToken(String token){  if (sessions.isEmpty()) {    return;  }  if (log.isDebugEnabled()) {    log.debug("Removing duplicates and cleaning up sessions for site - token: " + site + " - "+ token);  }synchronized (this.sessions) {    HttpSessionTokensSet siteTokensSet=extension.getHttpSessionTokensSet(site);    if (siteTokensSet == null) {      log.info("No more session tokens. Removing all sessions...");      for (      HttpSession session : this.sessions) {        session.invalidate();      }      this.sessions.clear();      this.activeSession=null;      this.model.removeAllElements();      return;    }    Map<String,HttpSession> uniqueSession=new HashMap<>(sessions.size());    List<HttpSession> toDelete=new LinkedList<>();    for (    HttpSession session : this.sessions) {      session.removeToken(token);      if (session.getTokenValuesCount() == 0 && !session.isActive()) {        toDelete.add(session);        continue;      } else {        model.fireHttpSessionUpdated(session);      }      if (uniqueSession.containsKey(session.getTokenValuesString())) {        HttpSession prevSession=uniqueSession.get(session.getTokenValuesString());        if (session.isActive()) {          toDelete.add(prevSession);          session.setMessagesMatched(session.getMessagesMatched() + prevSession.getMessagesMatched());        } else {          toDelete.add(session);          prevSession.setMessagesMatched(session.getMessagesMatched() + prevSession.getMessagesMatched());        }      } else {        uniqueSession.put(session.getTokenValuesString(),session);      }    }    if (log.isInfoEnabled()) {      log.info("Removing duplicate or empty sessions: " + toDelete);    }    Iterator<HttpSession> it=toDelete.iterator();    while (it.hasNext()) {      HttpSession ses=it.next();      ses.invalidate();      sessions.remove(ses);      model.removeHttpSession(ses);    }  }}  }
class C{  void connected(MqttClient client) throws MqttException {  logger.info("{} subscribe({}, {})",id(),topicFilter,qos);  client.subscribe(topicFilter,qos);}  }
class C{  public static void closeSilently(InputStream in){  if (in != null) {    try {      trace("closeSilently",null,in);      in.close();    } catch (    Exception e) {    }  }}  }
class C{  private static boolean isInnerClass(final Class<?> klazz){  return klazz.isMemberClass() && !Modifier.isStatic(klazz.getModifiers());}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  org.apache.xpath.VariableStack vars;  int savedStart;  if (-1 != m_stackFrame) {    vars=m_execContext.getVarStack();    savedStart=vars.getStackFrame();    vars.setStackFrame(m_stackFrame);  } else {    vars=null;    savedStart=0;  }  try {    if (DEBUG)     System.out.println("m_pattern" + m_pattern.toString());    do {      next=getNextNode();      if (DTM.NULL != next) {        if (DTMIterator.FILTER_ACCEPT == acceptNode(next,m_execContext))         break; else         continue;      } else       break;    } while (next != DTM.NULL);    if (DTM.NULL != next) {      if (DEBUG) {        System.out.println("next: " + next);        System.out.println("name: " + m_cdtm.getNodeName(next));      }      incrementCurrentPos();      return next;    } else {      m_foundLast=true;      return DTM.NULL;    }  }  finally {    if (-1 != m_stackFrame) {      vars.setStackFrame(savedStart);    }  }}  }
class C{  public boolean epsilonEquals(Vector3 obj,float epsilon){  if (obj == null)   return false;  if (Math.abs(obj.x - x) > epsilon)   return false;  if (Math.abs(obj.y - y) > epsilon)   return false;  if (Math.abs(obj.z - z) > epsilon)   return false;  return true;}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  public void destroy(){  log.info("destroy");  super.destroy();}  }
class C{  public boolean reused(){  return reused;}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  SessionId other=(SessionId)obj;  if (!Arrays.equals(id,other.id))   return false;  return true;}  }
class C{  public String toString(){  if (m_zipFile != null)   return m_zipFile.toString();  return "ZipUtil";}  }
class C{  public Profile create(String name,int maxDurationMillis){  return new GuardingProfile(mGuardWriter,mVerboseWriter,name,maxDurationMillis);}  }
class C{  static boolean isSubtype(Class<?> first,Class<?> second){  if (!first.isPrimitive() && !second.isPrimitive()) {    throw new IllegalArgumentException("types must be primitive");  }  Set<Class<?>> superTypes=wideningTable.get(first);  return superTypes.contains(second);}  }
class C{  public int numClasses(){  if (m_ClassIndex < 0) {    throw new UnassignedClassException("Class index is negative (not set)!");  }  if (!classAttribute().isNominal()) {    return 1;  } else {    return classAttribute().numValues();  }}  }
class C{  public String soundex(String str){  if (str == null) {    return null;  }  str=SoundexUtils.clean(str);  if (str.length() == 0) {    return str;  }  char out[]={'0','0','0','0'};  char last, mapped;  int incount=1, count=1;  out[0]=str.charAt(0);  last=getMappingCode(str,0);  while ((incount < str.length()) && (count < out.length)) {    mapped=getMappingCode(str,incount++);    if (mapped != 0) {      if ((mapped != '0') && (mapped != last)) {        out[count++]=mapped;      }      last=mapped;    }  }  return new String(out);}  }
class C{  public static boolean isErasedSubtype(Types types,TypeMirror subtype,TypeMirror supertype){  return types.isSubtype(types.erasure(subtype),types.erasure(supertype));}  }
