class C{  private static void closeInput(PcapByteInputStream is){  if (is == null) {    return;  }  try {    is.close();  } catch (  IOException e) {    LOG.error("Failed to close input stream",e);  }}  }
class C{  private void dynInit(int AD_Table_ID,int AD_ColumnSortOrder_ID,int AD_ColumnSortYesNo_ID){  m_AD_Table_ID=AD_Table_ID;  int identifiersCount=0;  StringBuffer identifierSql=new StringBuffer();  String sql="SELECT t.TableName, c.AD_Column_ID, c.ColumnName, e.Name," + "c.IsParent, c.IsKey, c.IsIdentifier, c.IsTranslated " + "FROM AD_Table t, AD_Column c, AD_Element e "+ "WHERE t.AD_Table_ID=?"+ " AND t.AD_Table_ID=c.AD_Table_ID"+ " AND (c.AD_Column_ID=? OR AD_Column_ID=?"+ " OR c.IsParent='Y' OR c.IsKey='Y' OR c.IsIdentifier='Y')"+ " AND c.AD_Element_ID=e.AD_Element_ID";  boolean trl=!Env.isBaseLanguage(Env.getCtx(),"AD_Element");  if (trl)   sql="SELECT t.TableName, c.AD_Column_ID, c.ColumnName, et.Name," + "c.IsParent, c.IsKey, c.IsIdentifier, c.IsTranslated " + "FROM AD_Table t, AD_Column c, AD_Element_Trl et "+ "WHERE t.AD_Table_ID=?"+ " AND t.AD_Table_ID=c.AD_Table_ID"+ " AND (c.AD_Column_ID=? OR AD_Column_ID=?"+ "	OR c.IsParent='Y' OR c.IsKey='Y' OR c.IsIdentifier='Y')"+ " AND c.AD_Element_ID=et.AD_Element_ID"+ " AND et.AD_Language=?";  sql+=" ORDER BY c.SeqNo";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    pstmt.setInt(2,AD_ColumnSortOrder_ID);    pstmt.setInt(3,AD_ColumnSortYesNo_ID);    if (trl)     pstmt.setString(4,Env.getAD_Language(Env.getCtx()));    rs=pstmt.executeQuery();    while (rs.next()) {      m_TableName=rs.getString(1);      if (AD_ColumnSortOrder_ID == rs.getInt(2)) {        log.fine("Sort=" + rs.getString(1) + "."+ rs.getString(3));        m_ColumnSortName=rs.getString(3);        yesLabel.setValue(rs.getString(4));      } else       if (AD_ColumnSortYesNo_ID == rs.getInt(2)) {        log.fine("YesNo=" + rs.getString(1) + "."+ rs.getString(3));        m_ColumnYesNoName=rs.getString(3);      } else       if (rs.getString(5).equals("Y")) {        log.fine("Parent=" + rs.getString(1) + "."+ rs.getString(3));        m_ParentColumnName=rs.getString(3);      } else       if (rs.getString(6).equals("Y")) {        log.fine("Key=" + rs.getString(1) + "."+ rs.getString(3));        m_KeyColumnName=rs.getString(3);      } else       if (rs.getString(7).equals("Y")) {        log.fine("Identifier=" + rs.getString(1) + "."+ rs.getString(3));        boolean isTranslated=trl && "Y".equals(rs.getString(8));        if (identifierSql.length() > 0)         identifierSql.append(",");        identifierSql.append(getIdentifier(rs.getString(1),rs.getString(3),rs.getInt(2),isTranslated));        identifiersCount++;        if (isTranslated)         m_IdentifierTranslated=true;      } else       log.fine("??NotUsed??=" + rs.getString(1) + "."+ rs.getString(3));    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (identifiersCount == 0)   m_IdentifierSql="NULL"; else   if (identifiersCount == 1)   m_IdentifierSql=identifierSql.toString(); else   m_IdentifierSql=identifierSql.insert(0,"COALESCE(").append(")").toString();  noLabel.setValue(Msg.getMsg(Env.getCtx(),"Available"));  log.fine(m_ColumnSortName);}  }
class C{  public static void insertBeforeLayerName(WorldWindow wwd,Layer layer,String targetName){  LayerList layers=wwd.getModel().getLayers();  int targetPosition=layers.size() - 1;  for (  Layer l : layers) {    if (l.getName().indexOf(targetName) != -1) {      targetPosition=layers.indexOf(l);      break;    }  }  layers.add(targetPosition,layer);}  }
class C{  public static boolean removeAppPreferences(GUIState simulation,String namespace){  try {    getAppPreferences(simulation,namespace).removeNode();    return true;  } catch (  BackingStoreException e) {    return false;  }}  }
class C{  private static void __trustAllHostnames(){  if (__hostnameVerifier == null) {    __hostnameVerifier=new _FakeHostnameVerifier();  }  com.sun.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(__hostnameVerifier);}  }
class C{  private String name(Object principal){  if (principal instanceof UserDetails) {    return ((UserDetails)principal).getUsername();  }  if (principal instanceof Principal) {    return ((Principal)principal).getName();  }  return principal.toString();}  }
class C{  @Transactional(propagation=Propagation.REQUIRES_NEW) public void prepareHerdDatabaseForExecuteJdbcWithReceiveTaskTest(String jobDefinitionNamespace,String jobDefinitionName,String activitiXmlClasspathResourceName) throws Exception {  namespaceDaoTestHelper.createNamespaceEntity(jobDefinitionNamespace);  JobDefinitionCreateRequest jobDefinitionCreateRequest=new JobDefinitionCreateRequest();  jobDefinitionCreateRequest.setNamespace(jobDefinitionNamespace);  jobDefinitionCreateRequest.setJobName(jobDefinitionName);  jobDefinitionCreateRequest.setDescription("This is a test job definition.");  jobDefinitionCreateRequest.setActivitiJobXml(IOUtils.toString(resourceLoader.getResource(activitiXmlClasspathResourceName).getInputStream()));  jobDefinitionCreateRequest.setParameters(null);  jobDefinitionService.createJobDefinition(jobDefinitionCreateRequest,false);}  }
class C{  @EventHandler public void onMatchStart(MatchChangeStateEvent event){  if (event.getState() == MatchState.PLAYING) {    for (    Player player : event.getMatch()) {      Spawn spawn=ListUtil.getRandom(getSpawns(event.getMatch(),event.getMatch().getPlayingContainer(player)));      Bukkit.getPluginManager().callEvent(new CardinalRespawnEvent(player,spawn));    }  }}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static Map<String,Object> removeCategoryMembersOfDiscProducts(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  Locale locale=(Locale)context.get("locale");  String errMsg=null;  try {    EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp)),EntityOperator.AND);    EntityListIterator eli=EntityQuery.use(delegator).from("Product").where(condition).queryIterator();    GenericValue product=null;    int numSoFar=0;    while ((product=eli.next()) != null) {      String productId=product.getString("productId");      List<GenericValue> productCategoryMemberList=EntityQuery.use(delegator).from("ProductCategoryMember").where("productId",productId).queryList();      if (productCategoryMemberList.size() > 0) {        for (        GenericValue productCategoryMember : productCategoryMemberList) {          productCategoryMember.remove();        }        numSoFar++;        if (numSoFar % 500 == 0) {          Debug.logInfo("Removed category members for " + numSoFar + " sales discontinued products.",module);        }      }    }    eli.close();    Debug.logInfo("Completed - Removed category members for " + numSoFar + " sales discontinued products.",module);  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());    errMsg=UtilProperties.getMessage(resourceError,"productutilservices.entity_error_running_removeCategoryMembersOfDiscProducts",messageMap,locale);    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  return ServiceUtil.returnSuccess();}  }
class C{  public static void writeBoolean(SharedPreferences preferences,String key,boolean value){  SharedPreferences.Editor editor=preferences.edit();  editor.putBoolean(key,value);  editor.commit();}  }
class C{  private void createPathConstraints(TestSuiteChromosome testSuite){  for (  TestChromosome test : testSuite.getTestChromosomes()) {    updatePathConstraints(test);  }  calculateUncoveredBranches();}  }
class C{  public static SemanticSpace createSemanticSpace(File aInputDir,int aMaxDimensions) throws IOException {  LatentSemanticAnalysis sspace=new LatentSemanticAnalysis();  Collection<File> documents=FileUtils.listFiles(aInputDir,new String[]{"txt"},true);  for (  File document : documents) {    BufferedReader reader=new BufferedReader(new FileReader(document));    sspace.processDocument(reader);  }  int dimensions=Math.min(documents.size(),aMaxDimensions <= 0 ? 300 : aMaxDimensions);  Properties props=new Properties();  props.setProperty(LatentSemanticAnalysis.LSA_DIMENSIONS_PROPERTY,Integer.toString(dimensions));  sspace.processSpace(props);  return sspace;}  }
class C{  public void removeSubElement(String name){  if (subElements != null) {    subElements.removeAll(name);  }}  }
class C{  public void incrementTradescore(){  this.tradescore+=1;  put("tradescore",this.tradescore);}  }
class C{  public static String listing3(String body){  int body_tracker=5;  if (body != null) {    body=body.trim();  } else {    body_tracker=12;  }  if (body_tracker != 12 && body.length() < 1) {    body=null;  }  return body;}  }
class C{  @Override public void createFieldEditors(){  Composite fep=getFieldEditorParent();  addField(new DirectoryFieldEditor(PreferenceConstants.DEFAULT_FOLDER_EXPORT,Messages.getString("FolderPreferencePage.0"),fep));  addField(new DirectoryFieldEditor(PreferenceConstants.DEFAULT_FOLDER_IMPORT,Messages.getString("FolderPreferencePage.1"),fep));  addField(new DirectoryFieldEditor(PreferenceConstants.DEFAULT_FOLDER_REPORT,Messages.getString("FolderPreferencePage.2"),fep));  addField(new DirectoryFieldEditor(PreferenceConstants.DEFAULT_TEMPLATE_FOLDER_REPORT,Messages.getString("FolderPreferencePage.3"),fep));  addField(new DirectoryFieldEditor(PreferenceConstants.DEFAULT_FOLDER_CSV_EXPORT,Messages.getString("FolderPreferencePage.5"),fep));  addField(new DirectoryFieldEditor(PreferenceConstants.DEFAULT_FOLDER_VLT,Messages.getString("FolderPreferencePage.6"),fep));}  }
class C{  protected TStructuralTypeImpl(){  super();}  }
class C{  private void snapshotRead(IsolationLevel level) throws RepositoryException {  clear(store);  RepositoryConnection con=store.getConnection();  try {    con.begin(level);    int size=1;    for (int i=0; i < size; i++) {      insertTestStatement(con,i);    }    int counter=0;    CloseableIteration<? extends Statement,RepositoryException> stmts;    stmts=con.getStatements(null,null,null,false);    try {      while (stmts.hasNext()) {        Statement st=stmts.next();        counter++;        if (counter < size) {          con.remove(st.getSubject(),st.getPredicate(),st.getObject(),st.getContext());          insertTestStatement(con,size + counter);          insertTestStatement(con,size + size + counter);        }      }    }  finally {      stmts.close();    }    try {      con.commit();    } catch (    RepositoryException e) {      e.printStackTrace();      return;    }    assertEquals(size,counter);  }  finally {    con.close();  }}  }
class C{  public IntBuffer put(int[] src,int off,int len){  int length=src.length;  if (off < 0 || len < 0 || (long)len + (long)off > length) {    throw new IndexOutOfBoundsException();  }  if (len > remaining()) {    throw new BufferOverflowException();  }  for (int i=off; i < off + len; i++) {    put(src[i]);  }  return this;}  }
class C{  public ByteArrayOutputStream End() throws IOException {  assertNotEnded();  this.ended=true;  this.outStream.flush();  return this.originalByteArrayOutStream;}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  protected boolean scanRootElementHook() throws IOException, XNIException {  if (fExternalSubsetResolver != null && !fSeenDoctypeDecl && !fDisallowDoctype && (fValidation || fLoadExternalDTD)) {    scanStartElementName();    resolveExternalSubsetAndRead();    reconfigurePipeline();    if (scanStartElementAfterName()) {      setScannerState(SCANNER_STATE_TRAILING_MISC);      setDispatcher(fTrailingMiscDispatcher);      return true;    }  } else {    reconfigurePipeline();    if (scanStartElement()) {      setScannerState(SCANNER_STATE_TRAILING_MISC);      setDispatcher(fTrailingMiscDispatcher);      return true;    }  }  return false;}  }
class C{  private static String toString(byte[] ranges,int dimension){  return "[" + Long.toString(decodeMin(ranges,dimension)) + " : "+ Long.toString(decodeMax(ranges,dimension))+ "]";}  }
class C{  public void updateConfiguration(){  if (updateConfigTask != null)   updateConfigTask.reschedule(500,TimeUnit.MILLISECONDS);}  }
class C{  public static double[] mean(Collection<double[]> distributions){  if (distributions.isEmpty())   throw new IllegalArgumentException("Distribution collection must be non-empty");  Iterator<double[]> iter=distributions.iterator();  double[] first=iter.next();  double[][] d_array=new double[distributions.size()][first.length];  d_array[0]=first;  for (int i=1; i < d_array.length; i++)   d_array[i]=iter.next();  return mean(d_array);}  }
class C{  public void write(Object source,OutputStream out) throws Exception {  write(source,out,"utf-8");}  }
class C{  public static void upgrade(){  final File upgradeScript=new File(DAO.bin_dir.getAbsolutePath().replaceAll(" ","\\ "),"upgrade.sh");  try {    List<String> rsp=OS.execSynchronous(upgradeScript.getAbsolutePath());    for (    String s : rsp)     DAO.log("UPGRADE: " + s);  } catch (  IOException e) {    Log.getLog().warn("UPGRADE failed: " + e.getMessage(),e);  }}  }
class C{  public AnsibleRunner debug(boolean debug){  this.debug=debug;  return this;}  }
class C{  public DateOp op(){  return (DateOp)getRequiredProperty(DateBOp.Annotations.OP);}  }
class C{  @NoInline public StackTrace(){  this(RVMThread.getCurrentThread());}  }
class C{  @SuppressLint("NewApi") @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_ptr_webview2);  PullToRefreshWebView2 pullRefreshWebView=(PullToRefreshWebView2)findViewById(R.id.pull_refresh_webview2);  pullRefreshWebView.setOnRefreshListener(this);  WebView webView=pullRefreshWebView.getRefreshableView();  webView.getSettings().setJavaScriptEnabled(true);  webView.setWebViewClient(new SampleWebViewClient());  webView.loadUrl("file:///android_asset/ptr_webview2_sample.html");  ActionBarManager.initBackTitle(this,getActionBar(),this.getClass().getSimpleName());}  }
class C{  public BluetoothController build(Context context){  mContext=context;  mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();  mBluetoothService=new BluetoothService();  return this;}  }
class C{  public static void writeStringToFile(File file,String data) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),false);}  }
class C{  public void paintRadioButtonMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:20.475 -0500",hash_original_method="F846DD3340718784FB63764FD5BBF0F3",hash_generated_method="213C0CEDC11BEF1A8137FD5F192CE2C3") public void showPrevious(){  setDisplayedChild(mWhichChild - 1);}  }
class C{  public BuildInstruction(IProject project,Map<String,OutputConfiguration> outputConfigurations,IDerivedResourceMarkers derivedResourceMarkers,EclipseResourceFileSystemAccess2 access,Map<OutputConfiguration,Iterable<IMarker>> generatorMarkers,IStorage2UriMapper storage2UriMapper,Injector injector){  super(project,outputConfigurations,derivedResourceMarkers);  this.access=access;  this.generatorMarkers=generatorMarkers;  this.storage2UriMapper=storage2UriMapper;  this.injector=injector;}  }
class C{  @Override protected void insertAttacks(IGame.Phase phase,Vector<Report> vPhaseReport){  if (attackValue < 1) {    vPhaseReport.clear();  }  for (  int wId : insertedAttacks) {    Mounted bayW=ae.getEquipment(wId);    WeaponAttackAction newWaa=new WeaponAttackAction(ae.getId(),waa.getTargetId(),wId);    Weapon w=(Weapon)bayW.getType();    Vector<Report> newReports=new Vector<>();    bayW.getLinked().setShotsLeft(bayW.getLinked().getBaseShotsLeft() + 1);    (w.fire(newWaa,game,server)).handle(phase,newReports);    for (    Report r : newReports) {      r.indent();    }    vPhaseReport.addAll(newReports);  }}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  boolean retValue=reverseIt();  if (retValue) {    m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);    if (m_processMsg != null)     return false;    setDocAction(DOCACTION_None);  }  return retValue;}  }
class C{  public DefaultJvmLauncherFactory(){  this.antUtils=new AntUtils();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.647 -0500",hash_original_method="DDAD033C1D6A94945D0EFE9FFDFBD321",hash_generated_method="5B4389D4B9B55FA9762BA09D54DAC0CC") public LogConfigurationException(String message){  super(message);}  }
class C{  public void writeListEnd() throws IOException {  os.write('z');}  }
class C{  @Override public void onMousePressed(final MapMouseEvent ev){}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  if (changeSupport != null) {    changeSupport.removePropertyChangeListener(listener);  }}  }
class C{  public Bundler putStringArray(String key,String[] value){  bundle.putStringArray(key,value);  return this;}  }
class C{  public boolean showHPBar(){  return showHP;}  }
class C{  public void addPropertyFile(String fileName) throws AdeUsageException {  Properties p=loadRawProperties(fileName);  addProperties(p,fileName);}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableTransformListValue toTransformList=(AnimatableTransformListValue)to;  AnimatableTransformListValue accTransformList=(AnimatableTransformListValue)accumulation;  int accSize=accumulation == null ? 0 : accTransformList.transforms.size();  int newSize=transforms.size() + accSize * multiplier;  AnimatableTransformListValue res;  if (result == null) {    res=new AnimatableTransformListValue(target);    res.transforms=new Vector(newSize);    res.transforms.setSize(newSize);  } else {    res=(AnimatableTransformListValue)result;    if (res.transforms == null) {      res.transforms=new Vector(newSize);      res.transforms.setSize(newSize);    } else     if (res.transforms.size() != newSize) {      res.transforms.setSize(newSize);    }  }  int index=0;  for (int j=0; j < multiplier; j++) {    for (int i=0; i < accSize; i++, index++) {      res.transforms.setElementAt(accTransformList.transforms.elementAt(i),index);    }  }  for (int i=0; i < transforms.size() - 1; i++, index++) {    res.transforms.setElementAt(transforms.elementAt(i),index);  }  if (to != null) {    AbstractSVGTransform tt=(AbstractSVGTransform)toTransformList.transforms.lastElement();    AbstractSVGTransform ft=null;    int type;    if (transforms.isEmpty()) {      type=tt.getType();switch (type) {case SVGTransform.SVG_TRANSFORM_SKEWX:        ft=IDENTITY_SKEWX;      break;case SVGTransform.SVG_TRANSFORM_SKEWY:    ft=IDENTITY_SKEWY;  break;case SVGTransform.SVG_TRANSFORM_SCALE:ft=IDENTITY_SCALE;break;case SVGTransform.SVG_TRANSFORM_ROTATE:ft=IDENTITY_ROTATE;break;case SVGTransform.SVG_TRANSFORM_TRANSLATE:ft=IDENTITY_TRANSLATE;break;}} else {ft=(AbstractSVGTransform)transforms.lastElement();type=ft.getType();}if (type == tt.getType()) {AbstractSVGTransform t;if (res.transforms.isEmpty()) {t=new SVGOMTransform();res.transforms.add(t);} else {t=(AbstractSVGTransform)res.transforms.elementAt(index);if (t == null) {t=new SVGOMTransform();res.transforms.setElementAt(t,index);}}float x, y, r=0;switch (type) {case SVGTransform.SVG_TRANSFORM_SKEWX:case SVGTransform.SVG_TRANSFORM_SKEWY:r=ft.getAngle();r+=interpolation * (tt.getAngle() - r);if (type == SVGTransform.SVG_TRANSFORM_SKEWX) {t.setSkewX(r);} else if (type == SVGTransform.SVG_TRANSFORM_SKEWY) {t.setSkewY(r);}break;case SVGTransform.SVG_TRANSFORM_SCALE:{SVGMatrix fm=ft.getMatrix();SVGMatrix tm=tt.getMatrix();x=fm.getA();y=fm.getD();x+=interpolation * (tm.getA() - x);y+=interpolation * (tm.getD() - y);t.setScale(x,y);break;}case SVGTransform.SVG_TRANSFORM_ROTATE:{x=ft.getX();y=ft.getY();x+=interpolation * (tt.getX() - x);y+=interpolation * (tt.getY() - y);r=ft.getAngle();r+=interpolation * (tt.getAngle() - r);t.setRotate(r,x,y);break;}case SVGTransform.SVG_TRANSFORM_TRANSLATE:{SVGMatrix fm=ft.getMatrix();SVGMatrix tm=tt.getMatrix();x=fm.getE();y=fm.getF();x+=interpolation * (tm.getE() - x);y+=interpolation * (tm.getF() - y);t.setTranslate(x,y);break;}}}} else {AbstractSVGTransform ft=(AbstractSVGTransform)transforms.lastElement();AbstractSVGTransform t=(AbstractSVGTransform)res.transforms.elementAt(index);if (t == null) {t=new SVGOMTransform();res.transforms.setElementAt(t,index);}t.assign(ft);}res.hasChanged=true;return res;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildYeti(zone);}  }
class C{  public TransactionFeeCalculatorAfterFork(final MosaicFeeInformationLookup mosaicFeeInformationLookup){  this.mosaicFeeInformationLookup=mosaicFeeInformationLookup;}  }
class C{  public void onAnimationStart(Animator animation){  if (mRule == Dependency.WITH) {    startIfReady(animation);  }}  }
class C{  @CanIgnoreReturnValue public Builder<K,V> put(Range<K> range,V value){  checkNotNull(range);  checkNotNull(value);  checkArgument(!range.isEmpty(),"Range must not be empty, but was %s",range);  if (!keyRanges.complement().encloses(range)) {    for (    Entry<Range<K>,V> entry : rangeMap.asMapOfRanges().entrySet()) {      Range<K> key=entry.getKey();      if (key.isConnected(range) && !key.intersection(range).isEmpty()) {        throw new IllegalArgumentException("Overlapping ranges: range " + range + " overlaps with entry "+ entry);      }    }  }  keyRanges.add(range);  rangeMap.put(range,value);  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.260 -0500",hash_original_method="1B0A2C6B75A6C9CD77B06A2BA6F95389",hash_generated_method="BE20E5B7DA6B7B84DF20C85A63BAC432") public ConcurrentHashMap(int initialCapacity,float loadFactor){  this(initialCapacity,loadFactor,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public short acceptNode(int n){  XPathContext xctxt=getXPathContext();  try {    xctxt.pushCurrentNode(n);    for (int i=0; i < m_nodeTests.length; i++) {      PredicatedNodeTest pnt=m_nodeTests[i];      XObject score=pnt.execute(xctxt,n);      if (score != NodeTest.SCORE_NONE) {        if (pnt.getPredicateCount() > 0) {          if (pnt.executePredicates(n,xctxt))           return DTMIterator.FILTER_ACCEPT;        } else         return DTMIterator.FILTER_ACCEPT;      }    }  } catch (  javax.xml.transform.TransformerException se) {    throw new RuntimeException(se.getMessage());  } finally {    xctxt.popCurrentNode();  }  return DTMIterator.FILTER_SKIP;}  }
class C{  public void clearMemoryCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();  }}  }
class C{  protected void engineInit(AlgorithmParameterSpec params,SecureRandom random) throws InvalidAlgorithmParameterException {  throw new InvalidAlgorithmParameterException("Triple DES key generation does not take any parameters");}  }
class C{  protected void addAxioms(final Collection<BigdataStatement> axioms){  if (axioms == null)   throw new IllegalArgumentException();}  }
class C{  public static AutomixFragment newInstance(){  return new AutomixFragment();}  }
class C{  public BarabasiAlbertConfig(int numberOfNodes,int edgesPerNewNode){  super(numberOfNodes);  this.edgesPerNewNode=edgesPerNewNode;}  }
class C{  public static ThreadSafeIsolateSession wrap(Object syncObj,IsolateSession session){  if (session != null)   return new ThreadSafeIsolateSession(syncObj,session); else   return null;}  }
class C{  public Fci(IndependenceTest independenceTest,List<Node> searchVars){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());  Set<Node> remVars=new HashSet<>();  for (  Node node1 : this.variables) {    boolean search=false;    for (    Node node2 : searchVars) {      if (node1.getName().equals(node2.getName())) {        search=true;      }    }    if (!search) {      remVars.add(node1);    }  }  this.variables.removeAll(remVars);}  }
class C{  @Override public ServiceRefAmp toRef(Object serviceImpl){  if (serviceImpl instanceof ProxyHandleAmp) {    ProxyHandleAmp proxy=(ProxyHandleAmp)serviceImpl;    return proxy.__caucho_getServiceRef();  }  Objects.requireNonNull(serviceImpl);  return new ServiceBuilderImpl<>(this,serviceImpl).ref();}  }
class C{  protected ByteArrayType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  protected ConditionExpression negateCondition(ConditionExpression cond,ValueNode sql){  List<ConditionExpression> operands=new ArrayList<>(1);  operands.add(cond);  TInstance type=typesTranslator.typeForSQLType(sql.getType());  return new LogicalFunctionCondition("not",operands,sql.getType(),sql,type);}  }
class C{  public AuthorityInfoAccessExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.AuthInfoAccess_Id;  this.critical=critical.booleanValue();  if (!(value instanceof byte[])) {    throw new IOException("Illegal argument type");  }  extensionValue=(byte[])value;  DerValue val=new DerValue(extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for " + "AuthorityInfoAccessExtension.");  }  accessDescriptions=new ArrayList<AccessDescription>();  while (val.data.available() != 0) {    DerValue seq=val.data.getDerValue();    AccessDescription accessDescription=new AccessDescription(seq);    accessDescriptions.add(accessDescription);  }}  }
class C{  static void typeInitialization(final Tree.ExtendedType extendedType,final Tree.SatisfiedTypes satisfiedTypes,final ClassOrInterface d,PrototypeInitCallback callback,final GenerateJsVisitor gen,final Value objectDeclaration,InitDeferrer initDeferrer){  final boolean isInterface=d instanceof com.redhat.ceylon.model.typechecker.model.Interface;  String initFuncName=isInterface ? "initTypeProtoI" : "initTypeProto";  final String typename=gen.getNames().name(d);  final String initname;  if (d.isAnonymous()) {    String _initname=gen.getNames().objectName(d);    if (d.isToplevel()) {      initname="$init$" + _initname.substring(0,_initname.length() - 2);    } else {      initname="$init$" + _initname;    }  } else {    initname="$init$" + typename;  }  gen.out("function ",initname,"()");  gen.beginBlock();  gen.out("if(",typename,".$$===undefined)");  gen.beginBlock();  boolean genIniter=true;  if (TypeUtils.isNativeExternal(d)) {    genIniter=!gen.stitchInitializer(d);  }  if (genIniter) {    gen.out(gen.getClAlias(),initFuncName,"(",typename,",'",d.getQualifiedNameString(),"'");    final List<Tree.StaticType> supers=satisfiedTypes == null ? Collections.<Tree.StaticType>emptyList() : new ArrayList<Tree.StaticType>(satisfiedTypes.getTypes().size() + 1);    if (extendedType != null) {      if (satisfiedTypes == null) {        String fname=typeFunctionName(extendedType.getType(),d,gen);        gen.out(",",fname);      } else {        supers.add(extendedType.getType());      }    } else     if (!isInterface) {      gen.out(",",gen.getClAlias(),"Basic");    }    if (satisfiedTypes != null) {      supers.addAll(satisfiedTypes.getTypes());      Collections.sort(supers,new StaticTypeComparator());      for (      Tree.StaticType satType : supers) {        String fname=typeFunctionName(satType,d,gen);        gen.out(",",fname);      }    }    gen.out(");");  }  if (d.isMember()) {    StringBuilder containers=new StringBuilder();    Scope _d2=d;    while (_d2 instanceof ClassOrInterface) {      if (containers.length() > 0) {        containers.insert(0,'.');      }      containers.insert(0,gen.getNames().name((Declaration)_d2));      _d2=_d2.getContainer();    }    gen.endLine();    gen.out(containers.toString(),"=",typename,";");  }  if (gen.opts.isOptimize()) {    gen.endLine();    callback.addToPrototypeCallback();  }  gen.endBlockNewLine();  gen.out("return ",typename,";");  gen.endBlockNewLine();  if (d.isStatic()) {    gen.out(gen.getNames().name(ModelUtil.getContainingClassOrInterface(d.getContainer())),".$st$.",initname,"=",initname,";");  } else   if (gen.outerSelf(d)) {    gen.out(".",initname,"=",initname,";");  }  if (initDeferrer != null) {    initDeferrer.deferred.add(initname + "();");  } else {    gen.out(initname,"();");  }}  }
class C{  public BinaryOut(){  out=new BufferedOutputStream(System.out);}  }
class C{  public void processTuple(Map<String,Object> tuple){  try {    for (    Map.Entry<String,Object> entry : tuple.entrySet()) {      String key=entry.getKey();      Object value=entry.getValue();switch (argTypeMap.get(key)) {case REXP_INT:        int[] iArr=new int[1];      iArr[0]=(Integer)value;    connectable.getRengine().assign(key,new REXPInteger(iArr));  break;case REXP_DOUBLE:double[] dArr=new double[1];dArr[0]=(Double)value;connectable.getRengine().assign(key,new REXPDouble(dArr));break;case REXP_STR:String[] sArr=new String[1];sArr[0]=(String)value;connectable.getRengine().assign(key,new REXPString(sArr));break;case REXP_BOOL:Boolean[] bArr=new Boolean[1];bArr[0]=(Boolean)value;connectable.getRengine().assign(key,new REXPLogical(bArr[0]));break;case REXP_ARRAY_INT:connectable.getRengine().assign(key,new REXPInteger((int[])value));break;case REXP_ARRAY_DOUBLE:connectable.getRengine().assign(key,new REXPDouble((double[])value));break;case REXP_ARRAY_STR:connectable.getRengine().assign(key,new REXPString((String[])value));break;case REXP_ARRAY_BOOL:connectable.getRengine().assign(key,new REXPLogical((boolean[])value));break;default :throw new IllegalArgumentException("Unsupported data type ... ");}}REXP result=connectable.getRengine().parseAndEval(getReturnVariable() + "<-" + getFunctionName()+ "()");REXP retVal=connectable.getRengine().parseAndEval(getReturnVariable());connectable.getRengine().parseAndEval("rm(list = setdiff(ls(), lsf.str()))");int len=0;if (retVal.isInteger()) {len=retVal.length();if (len > 1) {Integer[] iAList=new Integer[len];for (int i=0; i < len; i++) {iAList[i]=(retVal.asIntegers()[i]);}intArrayOutput.emit(iAList);} else {intOutput.emit(retVal.asInteger());}} else if (retVal.isNumeric()) {len=retVal.length();if (len > 1) {Double[] dAList=new Double[len];for (int i=0; i < len; i++) {dAList[i]=(retVal.asDoubles()[i]);}doubleArrayOutput.emit(dAList);} else {doubleOutput.emit(retVal.asDouble());}} else if (retVal.isString()) {len=retVal.length();if (len > 1) {strArrayOutput.emit(retVal.asStrings());} else {strOutput.emit(retVal.asString());}} else if (retVal.isLogical()) {len=retVal.length();boolean[] bData=new boolean[len];if (len > 1) {Boolean[] bAList=new Boolean[len];for (int i=0; i < len; i++) {bAList[i]=((REXPLogical)retVal).isTRUE()[i];}boolArrayOutput.emit(bAList);} else {bData=(((REXPLogical)retVal).isTRUE());boolOutput.emit(bData[0]);}} else {throw new IllegalArgumentException("Unsupported data type returned ... ");}} catch (Exception e) {log.error("Exception: ",e);DTThrowable.rethrow(e);}}  }
class C{  public StudentMangement(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,771,538);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  setContentPane(contentPane);  contentPane.setLayout(null);  contentPane.add(getMainPanel());}  }
class C{  public void saveTimestampRecord(TimestampRecord timestampRecord,Long[] timestampedLogRecords,String[] hashChains) throws Exception {  doInTransaction(null);}  }
class C{  protected void clear(){  baseURI=null;  nextBNodePrefix=createUniqueBNodePrefix();  namespaceTable.clear();  initializeNamespaceTableFromConfiguration();}  }
class C{  public static Map<String,Object> loadJsonModel(File jsFile){  try {    Map<String,Object> model=JavaScriptResolver.readJsonModel(jsFile);    if (model == null) {      throw new CompilerErrorException("Can't find metamodel definition in " + jsFile.getAbsolutePath());    }    if (!model.containsKey("$mod-bin")) {      throw new CeylonRunJsException("The JavaScript module " + jsFile + " is not compatible with the current version of ceylon-js");    }    return model;  } catch (  IOException ex) {    throw new CompilerErrorException("Error loading model from " + jsFile);  }}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  Query newAllKeysQuery(PersistenceManager persistenceManager){  Query query=persistenceManager.newQuery(JdoValue.class);  query.setFilter("id == idParam");  query.declareParameters("String idParam");  return query;}  }
class C{  public boolean isAllowExternalUserManagment(){  return allowExternalUserManagment;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    int n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (int i=0; i < n; ++i) {      TryCatchBlockNode tcb=tryCatchBlocks.get(i);      if (tcb.visibleTypeAnnotations != null && tcb.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (tcb.invisibleTypeAnnotations != null && tcb.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }    }    for (int i=0; i < instructions.size(); ++i) {      AbstractInsnNode insn=instructions.get(i);      if (insn.visibleTypeAnnotations != null && insn.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn.invisibleTypeAnnotations != null && insn.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn instanceof MethodInsnNode) {        boolean itf=((MethodInsnNode)insn).itf;        if (itf != (insn.opcode == Opcodes.INVOKEINTERFACE)) {          throw new RuntimeException();        }      }    }    if (visibleLocalVariableAnnotations != null && visibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleLocalVariableAnnotations != null && invisibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  public static void writeln(Word w,boolean flush){  write(w);  writelnWithFlush(flush);}  }
class C{  @Override public void onBeaconsDiscovered(Region region,List<Beacon> list){  Timber.i("Beacons discovered in region %s are %d ",region.getIdentifier(),list.size());  for (  Beacon beacon : list) {    Timber.i(beacon.toString());  }  Beacon nearestBeacon=calculateNearestBeacon(list);  if (nearestBeacon == null)   return;  Timber.i("Nearest beacon is " + nearestBeacon);  if (isSameAsTodayLatestEncounter(nearestBeacon)) {    Timber.i("Skipping encounter. Beacon is same as today's latest successful encounter");  } else {    performEncounter(nearestBeacon);  }}  }
class C{  private void layout(){  m_headerFooter=new HeaderFooter(m_printCtx);  if (!m_format.isForm() && m_format.isStandardHeaderFooter())   createStandardHeaderFooter();  m_pageNo=0;  m_pages.clear();  m_tableElement=null;  newPage(true,false);  if (m_format.isForm())   layoutForm(); else {    PrintElement element=layoutParameter();    if (element != null) {      m_currPage.addElement(element);      element.setLocation(m_position[AREA_CONTENT]);      m_position[AREA_CONTENT].y+=element.getHeight() + 5;    }    element=layoutPInstanceLogs();    if (element != null) {      m_currPage.addElement(element);      element.setLocation(m_position[AREA_CONTENT]);      m_position[AREA_CONTENT].y+=element.getHeight() + 5;    }    if (m_data != null) {      element=layoutTable(m_format,m_data,0);      element.setLocation(m_content.getLocation());      for (int p=1; p <= element.getPageCount(); p++) {        if (p != 1)         newPage(true,false);        m_currPage.addElement(element);      }    }  }  String pageInfo=String.valueOf(m_pages.size()) + getPageInfo(m_pages.size());  Env.setContext(m_printCtx,Page.CONTEXT_PAGECOUNT,pageInfo);  Timestamp now=new Timestamp(System.currentTimeMillis());  Env.setContext(m_printCtx,Page.CONTEXT_DATE,DisplayType.getDateFormat(DisplayType.Date,m_format.getLanguage()).format(now));  Env.setContext(m_printCtx,Page.CONTEXT_TIME,DisplayType.getDateFormat(DisplayType.DateTime,m_format.getLanguage()).format(now));  Image image=null;  MPrintTableFormat tf=m_format.getTableFormat();  MTable table=MTable.get(getCtx(),getPrintInfo().getAD_Table_ID());  if (table.getColumn("IsPrinted") != null && !table.isView()) {    String tableName=table.getTableName();    final String sql="SELECT IsPrinted FROM " + tableName + " WHERE "+ tableName+ "_ID=?";    boolean isPrinted="Y".equals(DB.getSQLValueStringEx(m_TrxName,sql,getPrintInfo().getRecord_ID()));    if (isPrinted) {      image=tf.getImageWaterMark();    }  } else {    image=tf.getImage();  }  int pages=m_pages.size();  for (int i=0; i < pages; i++) {    Page page=m_pages.get(i);    int pageNo=page.getPageNo();    pageInfo=String.valueOf(pageNo) + getPageInfo(pageNo);    page.setPageInfo(pageInfo);    page.setPageCount(pages);    page.setBackgroundImage(image);  }  m_hasLayout=true;}  }
class C{  public long insertWithOverflow(long element){  if (size < maxSize) {    add(element);    return sentinel;  } else   if (element > heap[1]) {    long ret=heap[1];    heap[1]=element;    updateTop();    return ret;  } else {    return element;  }}  }
class C{  public boolean isAvailable(){  return getQtyAvailable().signum() == 1;}  }
class C{  public void onEntityStep(GlowBlock block,LivingEntity entity){}  }
class C{  public static void copyMemory(long src,long dst,long len){  UNSAFE.copyMemory(src,dst,len);}  }
class C{  public TargetRoll(){}  }
class C{  public LogisticRegressionRunner(DataWrapper dataWrapper,Parameters params){  if (dataWrapper == null) {    throw new NullPointerException();  }  if (params == null) {    throw new NullPointerException();  }  if (dataWrapper instanceof Simulation) {    Simulation simulation=(Simulation)dataWrapper;    DataModelList dataModelList=dataWrapper.getDataModelList();    this.dataSets=new ArrayList<>();    for (    DataModel dataModel : dataModelList) {      dataSets.add((DataSet)dataModel);    }    this.numModels=dataModelList.size();    this.modelIndex=0;    this.modelSourceName=simulation.getName();  } else {    DataModel dataModel=dataWrapper.getSelectedDataModel();    if (!(dataModel instanceof DataSet)) {      throw new IllegalArgumentException("Data set must be tabular.");    }    setDataSet((DataSet)dataModel);  }  this.params=params;  this.variableNames=getDataModel().getVariableNames();  this.targetName=null;  this.regressorNames=new ArrayList<>();  TetradLogger.getInstance().log("info","Linear Regression");  if (result == null) {    TetradLogger.getInstance().log("info","Please double click this regression node to run the regession.");  } else {    TetradLogger.getInstance().log("result",report);  }}  }
class C{  private List<User> toUserList(List<UsageLicense> usageLicenses){  List<User> users=new ArrayList<User>();  if (usageLicenses != null) {    for (    UsageLicense usageLicense : usageLicenses) {      User userWithRole=new User();      userWithRole.setApplicationUserId(usageLicense.getApplicationUserId());      PlatformUser platformUser=usageLicense.getUser();      userWithRole.setUserId(platformUser.getUserId());      userWithRole.setUserFirstName(platformUser.getFirstName());      userWithRole.setUserLastName(platformUser.getLastName());      userWithRole.setEmail(platformUser.getEmail());      userWithRole.setLocale(platformUser.getLocale());      RoleDefinition userRoleDefinition=usageLicense.getRoleDefinition();      if (userRoleDefinition != null) {        userWithRole.setRoleIdentifier(userRoleDefinition.getRoleId());      }      users.add(userWithRole);    }  }  return users;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String lineup=getString(stack);  return Boolean.valueOf(EPG.getInstance().getEPGDSForEPGDSName(lineup).isChanDownloadComplete());}  }
class C{  public void hide(){  setVisible(false);}  }
class C{  public static void enableBlending(){  glShadeModel(GL_SMOOTH);  glEnable(GL_BLEND);  glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);}  }
class C{  public BasicLineParser(ProtocolVersion proto){  if (proto == null) {    proto=HttpVersion.HTTP_1_1;  }  this.protocol=proto;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public StableOptionValue(T value){  super(value);}  }
class C{  public String peekString(int offset,int len){  int maxLen=this.byteBuffer.length - this.position;  String s=new String(this.byteBuffer,offset,len < maxLen ? len : maxLen);  return s;}  }
class C{  public Stack(){  this(10);}  }
class C{  protected CCTintBy(float t,ccColor3B c){  super(t);  delta=new ccColor3B(c);}  }
class C{  public char previous(){  if (pos == offset) {    return DONE;  }  pos-=1;  return current();}  }
class C{  @LayoutlibDelegate static long elapsedRealtime(){  return System.currentTimeMillis() - sBootTime;}  }
class C{  private void addSentencePhraseChunk(List<WordToken> tokenList,JCas jCas){  List<PhraseChunk> sentPhraseChunks=new ArrayList<PhraseChunk>();  String[] tokens=new String[tokenList.size()];  String[] posTags=new String[tokenList.size()];  int ix=0;  for (  WordToken token : tokenList) {    tokens[ix]=token.getCoveredText();    posTags[ix]=token.getPartOfSpeech();    ix++;  }  Span[] result=phraseChunker.chunkAsSpans(tokens,posTags);  for (int i=0; i < result.length; i++) {    PhraseChunk chunk=new PhraseChunk(jCas);    chunk.setBegin(tokenList.get(result[i].getStart()).getBegin());    chunk.setEnd(tokenList.get(result[i].getEnd() - 1).getEnd());    chunk.setChunkType(result[i].getType());    chunk=addPhraseWordsAndHead(chunk,jCas);    addToJCasIndex(chunk);    sentPhraseChunks.add(chunk);  }}  }
class C{  public static InlineDecision NO(String reason){  return new InlineDecision(null,null,Code.DECIDE_NO,reason);}  }
class C{  protected void handleComponentAction(Component c,ActionEvent event){}  }
class C{  static public void parseAlias(String baseDir){  sTargetAlias.clear();  String file=baseDir + File.separatorChar + BuckBuildUtil.BUCK_CONFIG_FILE;  try {    BufferedReader br=new BufferedReader(new FileReader(file));    String line;    boolean seenAliasTag=false;    while ((line=br.readLine()) != null) {      line=line.trim();      if (!seenAliasTag) {        if (line.startsWith(ALIAS_TAG)) {          seenAliasTag=true;        }      } else {        if (line.startsWith(COMMENT_PREFIX)) {          continue;        } else         if (line.startsWith(ALIAS_PREFIX)) {          break;        } else {          int separatorIndex=line.indexOf(SEPARATOR);          if (separatorIndex == -1) {            continue;          }          String alias=line.substring(0,separatorIndex).trim();          String path=line.substring(separatorIndex + 1).trim();          if (sTargetAlias.containsKey(path)) {            sTargetAlias.get(path).add(alias);          } else {            sTargetAlias.put(path,Sets.newHashSet(alias));          }        }      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static Date parse(String date){  try {    int offset=0;    int year=parseInt(date,offset,offset+=4);    checkOffset(date,offset,'-');    int month=parseInt(date,offset+=1,offset+=2);    checkOffset(date,offset,'-');    int day=parseInt(date,offset+=1,offset+=2);    checkOffset(date,offset,'T');    int hour=parseInt(date,offset+=1,offset+=2);    checkOffset(date,offset,':');    int minutes=parseInt(date,offset+=1,offset+=2);    checkOffset(date,offset,':');    int seconds=parseInt(date,offset+=1,offset+=2);    Calendar calendar=new GregorianCalendar(TIMEZONE_GMT);    calendar.setLenient(false);    calendar.set(Calendar.YEAR,year);    calendar.set(Calendar.MONTH,month - 1);    calendar.set(Calendar.DAY_OF_MONTH,day);    calendar.set(Calendar.HOUR_OF_DAY,hour);    calendar.set(Calendar.MINUTE,minutes);    calendar.set(Calendar.SECOND,seconds);    return calendar.getTime();  } catch (  IndexOutOfBoundsException e) {    throw new IllegalArgumentException("Failed to parse date " + date,e);  }catch (  NumberFormatException e) {    throw new IllegalArgumentException("Failed to parse date " + date,e);  }catch (  IllegalArgumentException e) {    throw new IllegalArgumentException("Failed to parse date " + date,e);  }}  }
class C{  public final boolean checkTag(int identifier){  return this.constrId == identifier;}  }
class C{  public MutableDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);}  }
class C{  public BitemporalMapper nowValue(Object nowValue){  this.nowValue=nowValue;  return this;}  }
class C{  public static final double[][] unitMatrix(final int dim){  final double[][] e=new double[dim][dim];  for (int i=0; i < dim; i++) {    e[i][i]=1;  }  return e;}  }
class C{  public boolean isModSeqPermanent(MailboxSession session){  return true;}  }
class C{  public void multiply() throws IOException {  print("multiply",null);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static void putUnsignedShort(ByteBuffer bb,int v,int offset){  bb.putShort(offset,(short)(v & 0xffff));}  }
class C{  public static double[][] createNonRandomMatrixValues(int rows,int cols,boolean bContainsZeros){  double[][] matrix=new double[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      if (!bContainsZeros)       matrix[i][j]=(i + 1) * 10 + (j + 1); else       matrix[i][j]=(i) * 10 + (j);    }  }  return matrix;}  }
class C{  public String process(String uri){  String rewritten=uri;  if (isRewriting) {    Matcher matcher=matchPattern.matcher(uri);    rewritten=matcher.replaceAll(rewriteTo);    log.debug("Rewriting URI: " + uri + " >> "+ rewritten);  }  return rewritten;}  }
class C{  @Nonnull public String buildUrl(@Nonnull String methodName){  return buildUrl(methodName,(Object[])null);}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  public synchronized int nextNumber(){  int tmpNumber=number;  number=(number + 1) % maxNumber;  return tmpNumber;}  }
class C{  public RyaStatementWritable(){  this.ryaContext=RyaTripleContext.getInstance(new AccumuloRdfConfiguration());}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  public void add(MACDItem dataItem,boolean notify){  if (!this.isEmpty()) {    MACDItem item0=(MACDItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  public DispatcherImpl(State state){  mState=state;  mStateListeners=Collections.synchronizedList(new ArrayList<StateListener<State>>());  mDispatchListeners=Collections.synchronizedList(new ArrayList<DispatchListener<State>>());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private ArrayList<AStarNode> backTrace(AStarNode start){  ArrayList<AStarNode> foundpath=new ArrayList<AStarNode>();  foundpath.add(currentNode);  int x;  int y;  int z;  int px;  int pz;  int dx;  int dz;  while (!currentNode.equals(start)) {    x=currentNode.x;    y=currentNode.y;    z=currentNode.z;    px=currentNode.parent.x;    pz=currentNode.parent.z;    dx=(px - x) / Math.max(Math.abs(x - px),1);    dz=(pz - z) / Math.max(Math.abs(z - pz),1);    x+=dx;    z+=dz;    while (x != px || z != pz) {      y=getGroundNodeHeight(x,y,z);      foundpath.add(new AStarNode(x,y,z,0,null));      x+=dx;      z+=dz;    }    foundpath.add(currentNode.parent);    currentNode=currentNode.parent;  }  return foundpath;}  }
class C{  protected void createWorkDirectoryComponent(Composite parent){  Group group=new Group(parent,SWT.NONE);  String groupName=TypeScriptUIMessages.Launch_MainTab_workingDir;  group.setText(groupName);  GridLayout layout=new GridLayout();  layout.numColumns=1;  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);  group.setLayout(layout);  group.setLayoutData(gridData);  workDirectoryField=new Text(group,SWT.BORDER);  GridData data=new GridData(GridData.FILL_HORIZONTAL);  data.widthHint=IDialogConstants.ENTRY_FIELD_WIDTH;  workDirectoryField.setLayoutData(data);  workDirectoryField.addModifyListener(fListener);  addControlAccessibleListener(workDirectoryField,group.getText());  Composite buttonComposite=new Composite(group,SWT.NONE);  layout=new GridLayout();  layout.marginWidth=0;  layout.marginHeight=0;  layout.numColumns=3;  gridData=new GridData(GridData.HORIZONTAL_ALIGN_END);  buttonComposite.setLayout(layout);  buttonComposite.setLayoutData(gridData);  buttonComposite.setFont(parent.getFont());  workspaceWorkingDirectoryButton=createPushButton(buttonComposite,TypeScriptUIMessages.Browse_Workspace_button,null);  workspaceWorkingDirectoryButton.addSelectionListener(fListener);  addControlAccessibleListener(workspaceWorkingDirectoryButton,group.getText() + " " + workspaceWorkingDirectoryButton.getText());  fileWorkingDirectoryButton=createPushButton(buttonComposite,TypeScriptUIMessages.Browse_FileSystem_button,null);  fileWorkingDirectoryButton.addSelectionListener(fListener);  addControlAccessibleListener(fileWorkingDirectoryButton,group.getText());  variablesWorkingDirectoryButton=createPushButton(buttonComposite,TypeScriptUIMessages.Variables_button,null);  variablesWorkingDirectoryButton.addSelectionListener(fListener);  addControlAccessibleListener(variablesWorkingDirectoryButton,group.getText() + " " + variablesWorkingDirectoryButton.getText());}  }
class C{  public boolean hasParseStatus(){  return fieldSetFlags()[15];}  }
class C{  @YesNoCancelResult public static int showYesNoCancelDialog(String message,@Nls(capitalization=Nls.Capitalization.Title) String title,String yes,String no,String cancel,Icon icon){  return showYesNoCancelDialog(message,title,yes,no,cancel,icon,null);}  }
class C{  private static boolean evalDateOp(final IRepFilterBean filterBean,final Date value){  if (value == null)   return false;  return value == null ? false : evalDateOp(filterBean,value.getTime());}  }
class C{  public static ActionBarBackground changeColor(AppCompatActivity activity,int newColor){  return changeColor(activity,newColor,true);}  }
class C{  public CustomChartPanel(List<JFreeChart> charts,ChartLayoutInstructions layoutInstructions){  super();  this.layoutInstructions=layoutInstructions;  for (  JFreeChart chart : charts) {    this.charts.add(chart);  }  createUIComponents();}  }
class C{  public static void writePersons(Collection<? extends Person> persons,String outputPlansFileName,Network network,MutableScenario scenario){  StreamingPopulationWriter popWriter=new StreamingPopulationWriter(PopulationUtils.createPopulation(scenario.getConfig(),scenario.getNetwork()),network);  popWriter.writeStartPlans(outputPlansFileName);  for (  Person person : persons) {    popWriter.writePerson(person);  }  popWriter.writeEndPlans();}  }
class C{  public Format(String pFormatString){  String formatVars[]=pFormatString.split("/");  mId=Integer.parseInt(formatVars[0]);}  }
class C{  public static int testLoop8Snippet(int a,int b){  int result=container.a;  for (int i=0; i < a; i++) {    if (b < 0) {      container.b=10;      break;    } else {      for (int j=0; j < b; j++) {        container.a=0;      }    }  }  GraalDirectives.controlFlowAnchor();  return result;}  }
class C{  public Builder addLengthDelimited(final ByteString value){  if (result.lengthDelimited == null) {    result.lengthDelimited=new ArrayList<ByteString>();  }  result.lengthDelimited.add(value);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.847 -0500",hash_original_method="1A3161CCB7646B7891B929A5396BF673",hash_generated_method="A3365AF0BC0474D9A717D764CF6C5240") public void readGeneralizedTime() throws IOException {  if (tag == ASN1Constants.TAG_GENERALIZEDTIME) {    readContent();    if (buffer[offset - 1] != 'Z') {      throw new ASN1Exception("ASN.1 GeneralizedTime: encoded format is not implemented");    }    if (length != 15 && (length < 17 || length > 19)) {      throw new ASN1Exception("ASN.1 GeneralizedTime wrongly encoded at [" + contentOffset + "]");    }    if (length > 16) {      byte char14=buffer[contentOffset + 14];      if (char14 != '.' && char14 != ',') {        throw new ASN1Exception("ASN.1 GeneralizedTime wrongly encoded at [" + contentOffset + "]");      }    }    if (times == null) {      times=new int[7];    }    times[0]=strToInt(contentOffset,4);    times[1]=strToInt(contentOffset + 4,2);    times[2]=strToInt(contentOffset + 6,2);    times[3]=strToInt(contentOffset + 8,2);    times[4]=strToInt(contentOffset + 10,2);    times[5]=strToInt(contentOffset + 12,2);    if (length > 16) {      times[6]=strToInt(contentOffset + 15,length - 16);      if (length == 17) {        times[6]=times[6] * 100;      } else       if (length == 18) {        times[6]=times[6] * 10;      }    }  } else   if (tag == ASN1Constants.TAG_C_GENERALIZEDTIME) {    throw new ASN1Exception("Decoding constructed ASN.1 GeneralizedTime type is not supported");  } else {    throw expected("GeneralizedTime");  }}  }
class C{  public void clearPages(ClassLoader cl){  pageSourcePool.clearPages(cl);}  }
class C{  final void addExplicitSubstitute(Context instanceeCtxt,UniqueString lhs,TreeNode stn,ExprOrOpArgNode sub){  int index;  for (index=0; index < this.substs.length; index++) {    if (lhs == this.substs[index].getOp().getName())     break;  }  if (index < this.substs.length) {    if (!this.substs[index].isImplicit()) {      errors.addError(stn.getLocation(),"Multiple substitutions for symbol '" + lhs.toString() + "' in substitution.");    } else {      this.substs[index].setExpr(sub,false);      this.substs[index].setExprSTN(stn);    }  } else {    SymbolNode lhsSymbol=instanceeCtxt.getSymbol(lhs);    if (!(lhsSymbol instanceof OpDeclNode)) {      return;    }    if (lhsSymbol != null) {      int newlength=this.substs.length + 1;      Subst[] newSubsts=new Subst[newlength];      Subst newSubst=new Subst((OpDeclNode)lhsSymbol,sub,stn,false);      System.arraycopy(this.substs,0,newSubsts,0,newlength - 1);      newSubsts[newlength - 1]=newSubst;      this.substs=newSubsts;    } else {      errors.addError(stn.getLocation(),"Illegal identifier '" + lhs + "' in LHS of substitution.");    }  }}  }
class C{  public void enableLogArgumentNames(){  mBuilderConfig|=GLDebugHelper.CONFIG_LOG_ARGUMENT_NAMES;}  }
class C{  public static int EPIPE(){  return Errno.EPIPE.intValue();}  }
class C{  public Object nextValue() throws JSONException {  char c=nextClean();  String s;switch (c) {case '"':case '\'':    return nextString(c);case '{':  back();return new JSONObject(this);case '[':case '(':back();return new JSONArray(this);}StringBuffer sb=new StringBuffer();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=next();}back();s=sb.toString().trim();if (s.equals("")) {throw syntaxError("Missing value");}return JSONObject.stringToValue(s);}  }
class C{  @Override public boolean matches(CharSequence rawPassword,String encodedPassword){  String rawPwd=(String)rawPassword;  return BCrypt.checkpw(rawPwd,encodedPassword);}  }
class C{  public boolean isDefinitelyWritable(final int column) throws SQLException {  return !isReadOnly(column);}  }
class C{  public void writeTag(final int fieldNumber,final int wireType) throws IOException {  writeRawVarint32(WireFormatNano.makeTag(fieldNumber,wireType));}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:09:10.102 -0500",hash_original_method="D38D28D8C40C92DB1F9D6C2E1B0DC8AA",hash_generated_method="69B7B62672AB1D4CC5087EE6A83EB249") public void write(int i) throws IOException {  singleByte[0]=(byte)i;  write(singleByte,0,1);}  }
class C{  public static <S>S fromSpec(String spec,final Class<S> type,final String[] packages) throws IllegalArgumentException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {  return fromSpec(NO_CONTEXT,spec,type,packages,null);}  }
class C{  private void assertResultSet(boolean ordered,ResultSet rs,String[][] data) throws SQLException {  int len=rs.getMetaData().getColumnCount();  int rows=data.length;  if (rows == 0) {    if (rs.next()) {      fail("testResultSet expected rowCount:" + rows + " got:0");    }  }  int len2=data[0].length;  if (len < len2) {    fail("testResultSet expected columnCount:" + len2 + " got:"+ len);  }  for (int i=0; i < rows; i++) {    if (!rs.next()) {      fail("testResultSet expected rowCount:" + rows + " got:"+ i);    }    String[] row=getData(rs,len);    if (ordered) {      String[] good=data[i];      if (!testRow(good,row,good.length)) {        fail("testResultSet row not equal, got:\n" + formatRow(row) + "\n"+ formatRow(good));      }    } else {      boolean found=false;      for (int j=0; j < rows; j++) {        String[] good=data[i];        if (testRow(good,row,good.length)) {          found=true;          break;        }      }      if (!found) {        fail("testResultSet no match for row:" + formatRow(row));      }    }  }  if (rs.next()) {    String[] row=getData(rs,len);    fail("testResultSet expected rowcount:" + rows + " got:>="+ (rows + 1)+ " data:"+ formatRow(row));  }}  }
class C{  private void register(Parameter parameter) throws Exception {  String path=parameter.getPath();  Object key=parameter.getKey();  if (registry.containsKey(key)) {    validate(parameter,key);  }  if (registry.containsKey(path)) {    validate(parameter,path);  }  registry.put(path,parameter);  registry.put(key,parameter);}  }
class C{  private void closeIdleChannelContexts(NettyChannelGroup group,boolean forceClose,long now){synchronized (group) {    Iterator<NettyChannelContext> it=group.availableChannels.iterator();    while (it.hasNext()) {      NettyChannelContext c=it.next();      if (!forceClose) {        long delta=now - c.getLastUseTimeMicros();        if (delta < CHANNEL_EXPIRATION_MICROS) {          continue;        }        try {          if (c.getChannel() == null || !c.getChannel().isOpen()) {            continue;          }        } catch (        Throwable e) {        }      }      it.remove();      LOGGER.info("Closing expired channel " + c.getKey());      c.close();    }  }}  }
class C{  public XMLException(Exception e){  this(null,-1,e,"Nested Exception",false);}  }
class C{  public RemoteInterpreterContext(RemoteInterpreterContext other){  if (other.isSetNoteId()) {    this.noteId=other.noteId;  }  if (other.isSetParagraphId()) {    this.paragraphId=other.paragraphId;  }  if (other.isSetParagraphTitle()) {    this.paragraphTitle=other.paragraphTitle;  }  if (other.isSetParagraphText()) {    this.paragraphText=other.paragraphText;  }  if (other.isSetAuthenticationInfo()) {    this.authenticationInfo=other.authenticationInfo;  }  if (other.isSetConfig()) {    this.config=other.config;  }  if (other.isSetGui()) {    this.gui=other.gui;  }  if (other.isSetRunners()) {    this.runners=other.runners;  }}  }
class C{  public Builder withMargins(int left,int top,int right,int bottom){  params.setMargins(convertToPixels(left,scale),convertToPixels(top,scale),convertToPixels(right,scale),convertToPixels(bottom,scale));  return this;}  }
class C{  public DefaultPacketExtension(String elementName,String namespace){  this.elementName=elementName;  this.namespace=namespace;}  }
class C{  private void serializeHostInfo(KXmlSerializer serializer) throws IOException {  serializer.startTag(ns,"HostInfo");  String hostName="";  try {    hostName=InetAddress.getLocalHost().getHostName();  } catch (  UnknownHostException ignored) {  }  serializer.attribute(ns,"name",hostName);  serializer.startTag(ns,"Os");  serializer.attribute(ns,"name",System.getProperty("os.name"));  serializer.attribute(ns,"version",System.getProperty("os.version"));  serializer.attribute(ns,"arch",System.getProperty("os.arch"));  serializer.endTag(ns,"Os");  serializer.startTag(ns,"Java");  serializer.attribute(ns,"name",System.getProperty("java.vendor"));  serializer.attribute(ns,"version",System.getProperty("java.version"));  serializer.endTag(ns,"Java");  serializer.startTag(ns,"Cts");  serializer.attribute(ns,"version",CtsBuildProvider.CTS_BUILD_VERSION);  serializer.startTag(ns,"IntValue");  serializer.attribute(ns,"name","testStatusTimeoutMs");  serializer.attribute(ns,"value","600000");  serializer.endTag(ns,"IntValue");  serializer.endTag(ns,"Cts");  serializer.endTag(ns,"HostInfo");}  }
class C{  static void adjustIndicesForEscapedChars(List<? extends FormattedUrlEntity> entities,List<int[]> indices){  if (entities == null || indices == null || indices.isEmpty()) {    return;  }  final int size=indices.size();  int m=0;  int diff=0;  int inDiff;  int len;  int start;  int end;  int i;  int[] index;  for (  FormattedUrlEntity entity : entities) {    inDiff=0;    for (i=m; i < size; i++) {      index=indices.get(i);      start=index[0];      end=index[1];      len=end - start;      if (end < entity.start) {        diff+=len;        m++;      } else       if (end < entity.end) {        inDiff+=len;      }    }    entity.start=entity.start - diff;    entity.end=entity.end - (diff + inDiff);  }}  }
class C{  protected LayerPane createLayerPaneForLayer(Layer layer,LayerHandler layerHandler,ButtonGroup bg){  if (showStatus) {    return new LayerStatusPane(layer,layerHandler,bg);  } else {    return new LayerPane(layer,layerHandler,bg);  }}  }
class C{  public static int appendLocalInstructionComment(final SQLProvider provider,final INaviCodeNode codeNode,final INaviInstruction instruction,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02423: provider argument can not be null");  Preconditions.checkNotNull(codeNode,"IE02424: codeNode argument can not be null");  Preconditions.checkNotNull(instruction,"IE02425: instruction argument can not be null");  Preconditions.checkNotNull(commentText,"IE02426: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE02427: userId argument can not be null");  final CConnection connection=provider.getConnection();  final String function="{ ? = call append_local_instruction_comment( ?, ?, ?, ?, ?) }";  try {    final CallableStatement appendCommentFunction=connection.getConnection().prepareCall(function);    try {      appendCommentFunction.registerOutParameter(1,Types.INTEGER);      appendCommentFunction.setInt(2,instruction.getModule().getConfiguration().getId());      appendCommentFunction.setInt(3,codeNode.getId());      appendCommentFunction.setObject(4,instruction.getAddress().toBigInteger(),Types.BIGINT);      appendCommentFunction.setInt(5,userId);      appendCommentFunction.setString(6,commentText);      appendCommentFunction.execute();      final int commentId=appendCommentFunction.getInt(1);      if (appendCommentFunction.wasNull()) {        throw new CouldntSaveDataException("Error: Got an comment id of null from the database");      }      return commentId;    }  finally {      appendCommentFunction.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  @Override public void run(){  threads.fromNewToRunning(Thread.currentThread());  r.run();  threads.removeRunning(Thread.currentThread());  if (!hasActiveNonDaemonThreads())   completer.accept(ThreadFactoryTracker.this,null);}  }
class C{  private final void create(XCreateWindowParams params){  XToolkit.awtLock();  try {    XSetWindowAttributes xattr=new XSetWindowAttributes();    try {      checkParams(params);      long value_mask=((Long)params.get(VALUE_MASK)).longValue();      Long eventMask=(Long)params.get(EVENT_MASK);      xattr.set_event_mask(eventMask.longValue());      value_mask|=XConstants.CWEventMask;      Long border_pixel=(Long)params.get(BORDER_PIXEL);      if (border_pixel != null) {        xattr.set_border_pixel(border_pixel.longValue());        value_mask|=XConstants.CWBorderPixel;      }      Long colormap=(Long)params.get(COLORMAP);      if (colormap != null) {        xattr.set_colormap(colormap.longValue());        value_mask|=XConstants.CWColormap;      }      Long background_pixmap=(Long)params.get(BACKGROUND_PIXMAP);      if (background_pixmap != null) {        xattr.set_background_pixmap(background_pixmap.longValue());        value_mask|=XConstants.CWBackPixmap;      }      Long parentWindow=(Long)params.get(PARENT_WINDOW);      Rectangle bounds=(Rectangle)params.get(BOUNDS);      Integer depth=(Integer)params.get(DEPTH);      Integer visual_class=(Integer)params.get(VISUAL_CLASS);      Long visual=(Long)params.get(VISUAL);      Boolean overrideRedirect=(Boolean)params.get(OVERRIDE_REDIRECT);      if (overrideRedirect != null) {        xattr.set_override_redirect(overrideRedirect.booleanValue());        value_mask|=XConstants.CWOverrideRedirect;      }      Boolean saveUnder=(Boolean)params.get(SAVE_UNDER);      if (saveUnder != null) {        xattr.set_save_under(saveUnder.booleanValue());        value_mask|=XConstants.CWSaveUnder;      }      Integer backingStore=(Integer)params.get(BACKING_STORE);      if (backingStore != null) {        xattr.set_backing_store(backingStore.intValue());        value_mask|=XConstants.CWBackingStore;      }      Integer bitGravity=(Integer)params.get(BIT_GRAVITY);      if (bitGravity != null) {        xattr.set_bit_gravity(bitGravity.intValue());        value_mask|=XConstants.CWBitGravity;      }      if (log.isLoggable(PlatformLogger.Level.FINE)) {        log.fine("Creating window for " + this + " with the following attributes: \n"+ params);      }      window=XlibWrapper.XCreateWindow(XToolkit.getDisplay(),parentWindow.longValue(),bounds.x,bounds.y,bounds.width,bounds.height,0,depth.intValue(),visual_class.intValue(),visual.longValue(),value_mask,xattr.pData);      if (window == 0) {        throw new IllegalStateException("Couldn't create window because of wrong parameters. Run with NOISY_AWT to see details");      }      XToolkit.addToWinMap(window,this);    }  finally {      xattr.dispose();    }  }  finally {    XToolkit.awtUnlock();  }}  }
class C{  java.sql.Date toSqlDate(Calendar calendar){  return new java.sql.Date(getTimeInMillis(calendar));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Properties config(){  Properties runningConfig=new Properties(config);  runningConfig.setProperty(KafkaConfig.ZkConnectProp(),zookeeperConnection());  runningConfig.setProperty(KafkaConfig.BrokerIdProp(),Integer.toString(brokerId));  runningConfig.setProperty(KafkaConfig.HostNameProp(),"localhost");  runningConfig.setProperty(KafkaConfig.AutoCreateTopicsEnableProp(),String.valueOf(Boolean.TRUE));  return runningConfig;}  }
class C{  protected AlgorithmParameters engineGenerateParameters(){  AlgorithmParameters algParams=null;  try {    if (this.random == null) {      this.random=new SecureRandom();    }    if (valueL == -1) {      try {        engineInit(DEFAULTS,this.random);      } catch (      InvalidAlgorithmParameterException iape) {      }    }    BigInteger[] pAndQ=generatePandQ(this.random,valueL,valueN,seedLen);    BigInteger paramP=pAndQ[0];    BigInteger paramQ=pAndQ[1];    BigInteger paramG=generateG(paramP,paramQ);    DSAParameterSpec dsaParamSpec=new DSAParameterSpec(paramP,paramQ,paramG);    algParams=AlgorithmParameters.getInstance("DSA","SUN");    algParams.init(dsaParamSpec);  } catch (  InvalidParameterSpecException e) {    throw new RuntimeException(e.getMessage());  }catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e.getMessage());  }catch (  NoSuchProviderException e) {    throw new RuntimeException(e.getMessage());  }  return algParams;}  }
class C{  static <T1,T2,R1,R2,R>AnyMValue<R> each3(final MonadicValue<? extends T1> monadicValue,final Function<? super T1,? extends MonadicValue<R1>> value2,final BiFunction<? super T1,? super R1,? extends MonadicValue<R2>> value3,final TriFunction<? super T1,? super R1,? super R2,? extends R> yieldingFunction){  return AnyM.ofValue(For.iterable(monadicValue).iterable(null).iterable(null).yield3(yieldingFunction).unwrap());}  }
class C{  public T caseDoclet(Doclet object){  return null;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void addPCData(Reader reader,String systemID,int lineNr){  int bufSize=2048;  int sizeRead=0;  StringBuffer str=new StringBuffer(bufSize);  char[] buf=new char[bufSize];  for (; ; ) {    if (sizeRead >= bufSize) {      bufSize*=2;      str.ensureCapacity(bufSize);    }    int size;    try {      size=reader.read(buf);    } catch (    IOException e) {      break;    }    if (size < 0) {      break;    }    str.append(buf,0,size);    sizeRead+=size;  }  IXMLElement elt=this.prototype.createElement(null,systemID,lineNr);  elt.setContent(str.toString());  if (!this.stack.empty()) {    IXMLElement top=(IXMLElement)this.stack.peek();    top.addChild(elt);  }}  }
class C{  protected void assertLength(int length,int[] array){  assertEquals(length,array.length);}  }
class C{  public void replaceNullIDs(DistributedMember sender){  for (  VersionTag versionTag : versionTags) {    if (versionTag != null) {      versionTag.replaceNullIDs((InternalDistributedMember)sender);    }  }}  }
class C{  private StoragePort createStoragePort(StoragePort port,CIMInstance portInstance,AccessProfile profile,boolean isFCPort,String transportType,StorageSystem device) throws URISyntaxException, IOException {  if (null == port) {    port=new StoragePort();    port.setId(URIUtil.createId(StoragePort.class));    if (isFCPort) {      port.setPortNetworkId(WWNUtility.getWWNWithColons(getCIMPropertyValue(portInstance,PORTID)));      _newPortList.add(port);    }    port.setStorageDevice(profile.getSystemId());    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(_dbClient,port);    port.setNativeGuid(portNativeGuid);    port.setLabel(portNativeGuid);  } else {    if (isFCPort) {      _updatePortList.add(port);    }  }  setPortType(port,portInstance);  port.setTransportType(transportType);  String[] identifiers=getCIMPropertyArrayValue(portInstance,IDENTIFYING_INFO);  String moduleName=null;  if (isFCPort) {    moduleName=identifiers[0];    String portName=getCIMPropertyValue(portInstance,PORTNAME);    port.setPortName(portName);  } else {    moduleName=identifiers[1];    port.setPortName(identifiers[1] + ":" + identifiers[0]);    if (port.getPortType().equals(StoragePort.PortType.Unknown.name())) {      port.setPortType(StoragePort.PortType.frontend.name());    }  }  port.setPortGroup(moduleName);  StorageHADomain adapter=getStorageAdapter(moduleName,device);  port.setStorageHADomain(adapter.getId());  port.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());  port.setDiscoveryStatus(DiscoveredDataObject.DiscoveryStatus.VISIBLE.name());  UnsignedInteger16[] operationalStatusCodes=(UnsignedInteger16[])portInstance.getPropertyValue(OPERATIONALSTATUS);  OperationalStatus operationalStatus=StoragePortProcessor.getPortOperationalStatus(operationalStatusCodes);  if (OperationalStatus.NOT_OK.equals(operationalStatus)) {    _logger.info("StoragePort {} operationalStatus is NOT_OK. operationalStatusCodes collected from SMI-S :{}",port.getId(),operationalStatusCodes);  } else {    _logger.debug("operationalStatusCodes: {}",operationalStatusCodes);  }  port.setOperationalStatus(operationalStatus.name());  String portSpeed=getCIMPropertyValue(portInstance,SPEED);  if (null != portSpeed) {    Long portSpeedInBitsPerSec=Long.parseLong(portSpeed);    Long portSpeedInGbps=portSpeedInBitsPerSec / GB;    port.setPortSpeed(portSpeedInGbps);  }  return port;}  }
class C{  public void not() throws IOException {  writeCode(NOT);}  }
class C{  protected void calcOptimalWidth(){  if (getCurrentTable() != null) {    JTableHelper.setOptimalColumnWidth(getCurrentTable());  }}  }
class C{  public void addTransformation(ChronixFunction transformation){  this.transformations.add(transformation);}  }
class C{  @Override public String debugTipText(){  return "Output debug information to the console.";}  }
class C{  public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,IoEventQueueHandler eventQueueHandler){  this(corePoolSize,maximumPoolSize,keepAliveTime,unit,Executors.defaultThreadFactory(),eventQueueHandler);}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static Set<Project> toProjectList(Vector<Object> projectsParams){  Set<Project> projects=new TreeSet<Project>();  for (  Object projectParams : projectsParams) {    projects.add(toProject((Vector<Object>)projectParams));  }  return projects;}  }
class C{  public void write(char c[],int off,int len){  if (off < 0 || off > c.length || len < 0 || off + len > c.length || off + len < 0) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  int newcount=count + len;  if (newcount > buf.length) {    expandCapacity(newcount);  }  System.arraycopy(c,off,buf,count,len);  count=newcount;}  }
class C{  protected void xor(int color,long bb){  colorBB[color]^=bb;}  }
class C{  public static void executeDatabaseScript(String script) throws SQLException, MalformedURLException {  File file=new File(script);  DatabaseUtils.executeSqlScript(DatabaseUtils.getDBConnection(null),file.toURI().toURL());}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static StringBuilder formatTo(StringBuilder buf,boolean[] d,String sep){  if (d == null) {    return buf.append("null");  }  if (d.length == 0) {    return buf;  }  buf.append(d[0]);  for (int i=1; i < d.length; i++) {    buf.append(sep);    buf.append(format(d[i]));  }  return buf;}  }
class C{  public SyncMessage(SyncMessage other){  if (other.isSetType()) {    this.type=other.type;  }  if (other.isSetHello()) {    this.hello=new HelloMessage(other.hello);  }  if (other.isSetError()) {    this.error=new ErrorMessage(other.error);  }  if (other.isSetEchoRequest()) {    this.echoRequest=new EchoRequestMessage(other.echoRequest);  }  if (other.isSetEchoReply()) {    this.echoReply=new EchoReplyMessage(other.echoReply);  }  if (other.isSetGetRequest()) {    this.getRequest=new GetRequestMessage(other.getRequest);  }  if (other.isSetGetResponse()) {    this.getResponse=new GetResponseMessage(other.getResponse);  }  if (other.isSetPutRequest()) {    this.putRequest=new PutRequestMessage(other.putRequest);  }  if (other.isSetPutResponse()) {    this.putResponse=new PutResponseMessage(other.putResponse);  }  if (other.isSetDeleteRequest()) {    this.deleteRequest=new DeleteRequestMessage(other.deleteRequest);  }  if (other.isSetDeleteResponse()) {    this.deleteResponse=new DeleteResponseMessage(other.deleteResponse);  }  if (other.isSetSyncValue()) {    this.syncValue=new SyncValueMessage(other.syncValue);  }  if (other.isSetSyncValueResponse()) {    this.syncValueResponse=new SyncValueResponseMessage(other.syncValueResponse);  }  if (other.isSetSyncOffer()) {    this.syncOffer=new SyncOfferMessage(other.syncOffer);  }  if (other.isSetSyncRequest()) {    this.syncRequest=new SyncRequestMessage(other.syncRequest);  }  if (other.isSetFullSyncRequest()) {    this.fullSyncRequest=new FullSyncRequestMessage(other.fullSyncRequest);  }  if (other.isSetCursorRequest()) {    this.cursorRequest=new CursorRequestMessage(other.cursorRequest);  }  if (other.isSetCursorResponse()) {    this.cursorResponse=new CursorResponseMessage(other.cursorResponse);  }  if (other.isSetRegisterRequest()) {    this.registerRequest=new RegisterRequestMessage(other.registerRequest);  }  if (other.isSetRegisterResponse()) {    this.registerResponse=new RegisterResponseMessage(other.registerResponse);  }  if (other.isSetClusterJoinRequest()) {    this.clusterJoinRequest=new ClusterJoinRequestMessage(other.clusterJoinRequest);  }  if (other.isSetClusterJoinResponse()) {    this.clusterJoinResponse=new ClusterJoinResponseMessage(other.clusterJoinResponse);  }}  }
class C{  public void populate(ResultSet data) throws SQLException {  int rowsFetched;  Row currentRow;  int numCols;  int i;  Map<String,Class<?>> map=getTypeMap();  Object obj;  int mRows;  if (data == null) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.populate").toString());  }  this.resultSet=data;  RSMD=data.getMetaData();  RowSetMD=new RowSetMetaDataImpl();  initMetaData(RowSetMD,RSMD);  RSMD=null;  numCols=RowSetMD.getColumnCount();  mRows=this.getMaxRows();  rowsFetched=0;  currentRow=null;  while (data.next()) {    currentRow=new Row(numCols);    if (rowsFetched > mRows && mRows > 0) {      rowsetWarning.setNextWarning(new RowSetWarning("Populating rows " + "setting has exceeded max row setting"));    }    for (i=1; i <= numCols; i++) {      if (map == null || map.isEmpty()) {        obj=data.getObject(i);      } else {        obj=data.getObject(i,map);      }      if (obj instanceof Struct) {        obj=new SerialStruct((Struct)obj,map);      } else       if (obj instanceof SQLData) {        obj=new SerialStruct((SQLData)obj,map);      } else       if (obj instanceof Blob) {        obj=new SerialBlob((Blob)obj);      } else       if (obj instanceof Clob) {        obj=new SerialClob((Clob)obj);      } else       if (obj instanceof java.sql.Array) {        if (map != null)         obj=new SerialArray((java.sql.Array)obj,map); else         obj=new SerialArray((java.sql.Array)obj);      }      currentRow.initColumnObject(i,obj);    }    rowsFetched++;    rvh.add(currentRow);  }  numRows=rowsFetched;  notifyRowSetChanged();}  }
class C{  @Override protected void openVisibleInstances(Instances insts) throws Exception {  super.openVisibleInstances(insts);  setROCString("(Area under ROC = " + Utils.doubleToString(ThresholdCurve.getROCArea(insts),4) + ")");  setBorderText();}  }
class C{  public Element createXmlElement(Document doc,String id) throws Exception {  Element manifestElement=doc.createElement(Helper.PREFIX_DS + Constants._TAG_MANIFEST);  manifestElement.setAttribute(Constants._ATT_ID,id);  for (  MessagePart r : references) {    manifestElement.appendChild(createReference(doc,r));  }  return manifestElement;}  }
class C{  int computeMergedLocation(Label label2,int eltIndex){  int loc=Location.NONE;  loc=label.getLocation(eltIndex);  if (!label2.isNull(eltIndex)) {    int nLoc=label2.getLocation(eltIndex);    if (loc != Location.BOUNDARY)     loc=nLoc;  }  return loc;}  }
class C{  public FriendlySwitchCompat(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  final Resources res=getResources();  mTextPaint.density=res.getDisplayMetrics().density;  final TintTypedArray a=TintTypedArray.obtainStyledAttributes(context,attrs,R.styleable.SwitchCompat,defStyleAttr,0);  mThumbDrawable=a.getDrawable(R.styleable.SwitchCompat_android_thumb);  if (mThumbDrawable != null) {    mThumbDrawable.setCallback(this);  }  mTrackDrawable=a.getDrawable(R.styleable.SwitchCompat_track);  if (mTrackDrawable != null) {    mTrackDrawable.setCallback(this);  }  mTextOn=a.getText(R.styleable.SwitchCompat_android_textOn);  mTextOff=a.getText(R.styleable.SwitchCompat_android_textOff);  mShowText=a.getBoolean(R.styleable.SwitchCompat_showText,true);  mThumbTextPadding=a.getDimensionPixelSize(R.styleable.SwitchCompat_thumbTextPadding,0);  mSwitchMinWidth=a.getDimensionPixelSize(R.styleable.SwitchCompat_switchMinWidth,0);  mSwitchPadding=a.getDimensionPixelSize(R.styleable.SwitchCompat_switchPadding,0);  mSplitTrack=a.getBoolean(R.styleable.SwitchCompat_splitTrack,false);  final int appearance=a.getResourceId(R.styleable.SwitchCompat_switchTextAppearance,0);  if (appearance != 0) {    setSwitchTextAppearance(context,appearance);  }  mDrawableManager=AppCompatDrawableManager.get();  a.recycle();  final ViewConfiguration config=ViewConfiguration.get(context);  mTouchSlop=config.getScaledTouchSlop();  mMinFlingVelocity=config.getScaledMinimumFlingVelocity();  refreshDrawableState();  setChecked(isChecked());}  }
class C{  public static String toString(Object o){  Class<?> c=o.getClass();  StringBuilder sb=new StringBuilder();  sb.append(c.getSimpleName()).append('[');  int i=0;  for (  Field f : c.getDeclaredFields()) {    if ((f.getModifiers() & (Modifier.STATIC | Modifier.TRANSIENT)) != 0) {      continue;    }    f.setAccessible(true);    try {      Object value=f.get(o);      if (i++ > 0) {        sb.append(',');      }      sb.append(f.getName());      sb.append('=');      if (value.getClass().isArray()) {        if (value.getClass() == boolean[].class) {          sb.append(Arrays.toString((boolean[])value));        } else         if (value.getClass() == byte[].class) {          sb.append(Arrays.toString((byte[])value));        } else         if (value.getClass() == char[].class) {          sb.append(Arrays.toString((char[])value));        } else         if (value.getClass() == double[].class) {          sb.append(Arrays.toString((double[])value));        } else         if (value.getClass() == float[].class) {          sb.append(Arrays.toString((float[])value));        } else         if (value.getClass() == int[].class) {          sb.append(Arrays.toString((int[])value));        } else         if (value.getClass() == long[].class) {          sb.append(Arrays.toString((long[])value));        } else         if (value.getClass() == short[].class) {          sb.append(Arrays.toString((short[])value));        } else {          sb.append(Arrays.toString((Object[])value));        }      } else       if (value.getClass() == Character.class) {        sb.append('\'').append(value).append('\'');      } else       if (value.getClass() == String.class) {        sb.append('"').append(value).append('"');      } else {        sb.append(value);      }    } catch (    IllegalAccessException unexpected) {      throw new AssertionError(unexpected);    }  }  sb.append("]");  return sb.toString();}  }
class C{  public long longValue(){  return longValue;}  }
class C{  @Bean(initMethod="start",destroyMethod="stop") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {  return Server.createTcpServer("-tcp","-tcpAllowOthers");}  }
class C{  public MultimediaMessagingSession initiateMessagingSession(String serviceId,ContactId contact) throws RcsServiceNotRegisteredException, RcsPermissionDeniedException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IMultimediaMessagingSession sessionIntf=mApi.initiateMessagingSession(serviceId,contact);    if (sessionIntf != null) {      return new MultimediaMessagingSession(sessionIntf);    }    return null;  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  public static MgmtTargetFilterQuery toResponse(final TargetFilterQuery filter){  final MgmtTargetFilterQuery targetRest=new MgmtTargetFilterQuery();  targetRest.setFilterId(filter.getId());  targetRest.setName(filter.getName());  targetRest.setQuery(filter.getQuery());  targetRest.setCreatedBy(filter.getCreatedBy());  targetRest.setLastModifiedBy(filter.getLastModifiedBy());  targetRest.setCreatedAt(filter.getCreatedAt());  targetRest.setLastModifiedAt(filter.getLastModifiedAt());  DistributionSet distributionSet=filter.getAutoAssignDistributionSet();  if (distributionSet != null) {    targetRest.setAutoAssignDistributionSet(distributionSet.getId());  }  targetRest.add(linkTo(methodOn(MgmtTargetFilterQueryRestApi.class).getFilter(filter.getId())).withRel("self"));  targetRest.add(linkTo(methodOn(MgmtTargetFilterQueryRestApi.class).postAssignedDistributionSet(filter.getId(),null)).withRel("autoAssignDS"));  return targetRest;}  }
class C{  public ReactiveTask requestAsync(final long n){  return withSubscriptionAndTask(subscriptionAndTask.map2(null));}  }
class C{  public boolean isAlwaysFalse(){  return alwaysFalse;}  }
class C{  public static int nextClearBit(long[] v,int start){  int wordindex=start >>> LONG_LOG2_SIZE;  if (wordindex >= v.length) {    return -1;  }  long cur=~v[wordindex] & (LONG_ALL_BITS << start);  for (; wordindex < v.length; ) {    if (cur != 0) {      return (wordindex * Long.SIZE) + Long.numberOfTrailingZeros(cur);    }    wordindex++;    cur=~v[wordindex];  }  return -1;}  }
class C{  public View addActionItem(int iconResourceID,int layout,int labelID,OnTouchListener listener,CustomActionBarActivity.ITEMS id){  View item=myLayoutInflater.inflate(layout,null);  ImageView itemIcon=(ImageView)item.findViewById(R.id.pb_item_icon);  itemIcon.setImageResource(iconResourceID);  if (labelID != 0) {    TextView itemText=(TextView)item.findViewById(R.id.pb_item_text);    itemText.setText(labelID);  }  item.setOnTouchListener(listener);  item.setId(id.getNumVal());  icContainer.addView(item);  return item;}  }
class C{  public CModuleContent(final INaviModule module,final SQLProvider provider,final ListenerProvider<IModuleListener> listeners,final CCallgraph callgraph,final List<INaviFunction> functions,final ICallgraphView nativeCallgraph,final ImmutableList<IFlowgraphView> nativeFlowgraphs,final List<INaviView> customViews,final ImmutableBiMap<INaviView,INaviFunction> viewFunctionMap,final List<TraceList> traces,final SectionContainer sections,final TypeInstanceContainer instanceContainer){  Preconditions.checkNotNull(module,"IE02176: Module argument can not be null");  Preconditions.checkNotNull(provider,"IE02177: Provider argument can not be null");  Preconditions.checkNotNull(listeners,"IE02178: Listeners argument can not be null");  Preconditions.checkNotNull(callgraph,"IE02184: Call graph argument can not be null");  Preconditions.checkNotNull(functions,"IE02185: Functions argument can not be null");  Preconditions.checkNotNull(nativeCallgraph,"IE02204: Native Call graph argument can not be null");  Preconditions.checkNotNull(nativeFlowgraphs,"IE02205: Native Flowgraphs argument can not be null");  Preconditions.checkNotNull(customViews,"IE02206: Custom Views argument can not be null");  Preconditions.checkNotNull(viewFunctionMap,"IE02207: View Function Map argument can not be null");  Preconditions.checkNotNull(traces,"IE02208: Traces argument can not be null");  this.sections=Preconditions.checkNotNull(sections);  this.instanceContainer=Preconditions.checkNotNull(instanceContainer);  m_traces=new CTraceContainer(module,traces,provider);  m_viewContainer=new CViewContainer(module,nativeCallgraph,nativeFlowgraphs,customViews,viewFunctionMap,listeners,provider);  m_callgraph=callgraph;  m_functions=new CFunctionContainer(module,functions);}  }
class C{  public boolean isLedBlinking(){  return ledBlinking;}  }
class C{  void generateBarcodeLogic(String msg,int errorCorrectionLevel) throws WriterException {  int errorCorrectionCodeWords=PDF417ErrorCorrection.getErrorCorrectionCodewordCount(errorCorrectionLevel);  String highLevel=PDF417HighLevelEncoder.encodeHighLevel(msg,compaction);  int sourceCodeWords=highLevel.length();  int[] dimension=determineDimensions(sourceCodeWords,errorCorrectionCodeWords);  int cols=dimension[0];  int rows=dimension[1];  int pad=getNumberOfPadCodewords(sourceCodeWords,errorCorrectionCodeWords,cols,rows);  if (sourceCodeWords + errorCorrectionCodeWords + 1 > 929) {    throw new WriterException("Encoded message contains to many code words, message to big (" + msg.length() + " bytes)");  }  int n=sourceCodeWords + pad + 1;  StringBuilder sb=new StringBuilder(n);  sb.append((char)n);  sb.append(highLevel);  for (int i=0; i < pad; i++) {    sb.append((char)900);  }  String dataCodewords=sb.toString();  String ec=PDF417ErrorCorrection.generateErrorCorrection(dataCodewords,errorCorrectionLevel);  String fullCodewords=dataCodewords + ec;  barcodeMatrix=new BarcodeMatrix(rows,cols);  encodeLowLevel(fullCodewords,cols,rows,errorCorrectionLevel,barcodeMatrix);}  }
class C{  private static void createAndShowGUI(){  JFrame.setDefaultLookAndFeelDecorated(true);  InternalFrameDemo frame=new InternalFrameDemo();  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.setVisible(true);}  }
class C{  public static boolean testPlaneSphere(float a,float b,float c,float d,float centerX,float centerY,float centerZ,float radius){  float denom=(float)Math.sqrt(a * a + b * b + c * c);  float dist=(a * centerX + b * centerY + c * centerZ + d) / denom;  return -radius <= dist && dist <= radius;}  }
class C{  public void scanForAnnotatedFields(Types typeUtils,Elements elementUtils) throws ProcessingException {  TypeElement currentClass=typeElement;  TypeMirror superClassType;  Column annotation=null;  PackageElement originPackage=elementUtils.getPackageOf(typeElement);  PackageElement superClassPackage;  Set<VariableElement> annotatedFields=new LinkedHashSet<>();  Map<String,ExecutableElement> possibleSetterFields=new HashMap<>();  do {    for (    Element e : currentClass.getEnclosedElements()) {      annotation=e.getAnnotation(Column.class);      if (e.getKind() == ElementKind.FIELD && annotation != null) {        annotatedFields.add((VariableElement)e);      } else       if (e.getKind() == ElementKind.METHOD) {        ExecutableElement methodElement=(ExecutableElement)e;        String setterMethodName=methodElement.getSimpleName().toString();        if (setterMethodName.startsWith("set")) {          ExecutableElement existingSetter=possibleSetterFields.get(setterMethodName);          if (existingSetter != null) {            if (ModifierUtils.compareModifierVisibility(methodElement,existingSetter) == -1) {              possibleSetterFields.put(setterMethodName,methodElement);            }          } else {            possibleSetterFields.put(setterMethodName,methodElement);          }        }        if (annotation != null) {          ColumnAnnotatedMethod method=new ColumnAnnotatedMethod(methodElement,annotation);          ColumnAnnotateable existingColumnAnnotateable=columnAnnotatedElementsMap.get(method.getColumnName());          if (existingColumnAnnotateable != null) {            throw new ProcessingException(methodElement,"The method %s in class %s is annotated with @%s with column name = \"%s\" but this column name is already used by %s in class %s",method.getMethodName(),method.getQualifiedSurroundingClassName(),Column.class.getSimpleName(),method.getColumnName(),existingColumnAnnotateable.getElementName(),existingColumnAnnotateable.getQualifiedSurroundingClassName());          }          columnAnnotatedElementsMap.put(method.getColumnName(),method);        }      } else       if (annotation != null) {        throw new ProcessingException(e,"%s is of type %s and annotated with @%s, but only Fields or setter Methods can be annotated with @%s",e.getSimpleName(),e.getKind().toString(),Column.class.getSimpleName(),Column.class.getSimpleName());      }    }    superClassType=currentClass.getSuperclass();    currentClass=(TypeElement)typeUtils.asElement(superClassType);  } while (superClassType.getKind() != TypeKind.NONE);  for (  VariableElement e : annotatedFields) {    annotation=e.getAnnotation(Column.class);    currentClass=(TypeElement)e.getEnclosingElement();    if (e.getModifiers().contains(Modifier.PRIVATE)) {      String fieldName=e.getSimpleName().toString();      String perfectSetterName;      if (fieldName.length() == 1) {        perfectSetterName="set" + fieldName.toUpperCase();      } else {        String withoutHungarianNotation=HungarianNotation.removeNotation(fieldName);        perfectSetterName="set" + Character.toUpperCase(withoutHungarianNotation.charAt(0)) + withoutHungarianNotation.substring(1);      }      ExecutableElement setterMethod=possibleSetterFields.get(perfectSetterName);      if (setterMethod != null && isSetterForField(setterMethod,e)) {        ColumnAnnotatedMethod method=new ColumnAnnotatedMethod(setterMethod,annotation);        columnAnnotatedElementsMap.put(method.getColumnName(),method);        continue;      } else {        if (fieldName.startsWith("m")) {          setterMethod=possibleSetterFields.get("set" + fieldName);          if (setterMethod != null && isSetterForField(setterMethod,e)) {            ColumnAnnotatedMethod method=new ColumnAnnotatedMethod(setterMethod,annotation);            columnAnnotatedElementsMap.put(method.getColumnName(),method);            continue;          } else {            if (fieldName.length() > 1) {              setterMethod=possibleSetterFields.get("set" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1));              if (setterMethod != null && isSetterForField(setterMethod,e)) {                ColumnAnnotatedMethod method=new ColumnAnnotatedMethod(setterMethod,annotation);                columnAnnotatedElementsMap.put(method.getColumnName(),method);                continue;              }            }          }        }      }      if (fieldName.matches("is[A-Z].*")) {        String setterName="set" + fieldName.substring(2);        setterMethod=possibleSetterFields.get(setterName);        if (setterMethod != null && isSetterForField(setterMethod,e)) {          ColumnAnnotatedMethod method=new ColumnAnnotatedMethod(setterMethod,annotation);          columnAnnotatedElementsMap.put(method.getColumnName(),method);          continue;        }      }      throw new ProcessingException(e,"The field '%s' in class %s is private. " + "A corresponding setter method with the name '%s(%s)' is expected but haven't been found. Please add this setter method, " + "If you have another setter method named differently "+ "please annotate your setter method with @%s ",fieldName,e.getEnclosingElement().getSimpleName().toString(),perfectSetterName,e.asType().toString(),Column.class.getSimpleName());    } else {      ColumnAnnotatedField field=new ColumnAnnotatedField(e,annotation);      if (currentClass != typeElement && !field.getField().getModifiers().contains(Modifier.PUBLIC)) {        superClassPackage=elementUtils.getPackageOf(currentClass);        if ((superClassPackage != null && originPackage == null) || (superClassPackage == null && originPackage != null) || (superClassPackage != null && !superClassPackage.equals(originPackage))|| (originPackage != null && !originPackage.equals(superClassPackage))) {          throw new ProcessingException(e,"The field %s in class %s can not be accessed from ObjectMapper because of " + "visibility issue. Either move class %s into the same package " + "as %s or make the field %s public or create and annotate a public setter "+ "method for this field with @%s instead of annotating the field itself",field.getFieldName(),field.getQualifiedSurroundingClassName(),typeElement.getQualifiedName().toString(),field.getQualifiedSurroundingClassName(),field.getFieldName(),Column.class.getSimpleName());        }      }      ColumnAnnotateable existingColumnAnnotateable=columnAnnotatedElementsMap.get(field.getColumnName());      if (existingColumnAnnotateable != null) {        throw new ProcessingException(e,"The field %s in class %s is annotated with @%s with column name = \"%s\" but this column name is already used by %s in class %s",field.getFieldName(),field.getQualifiedSurroundingClassName(),Column.class.getSimpleName(),field.getColumnName(),existingColumnAnnotateable.getElementName(),existingColumnAnnotateable.getQualifiedSurroundingClassName());      }      columnAnnotatedElementsMap.put(field.getColumnName(),field);    }  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public V asValue(final LiteralExtensionIV iv,final BigdataValueFactory vf){  final long[] componentsAsLongArr=asLongArray(iv);  final Object[] componentArr=longArrAsComponentArr(componentsAsLongArr);  final String litStr=litSerializer.fromComponents(componentArr);  return (V)vf.createLiteral(litStr,datatype);}  }
class C{  public boolean hasYomi(){  return super.hasAttribute(YOMI);}  }
class C{  public boolean hasClaw(int location){  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  for (int slot=0; slot < this.getNumberOfCriticals(location); slot++) {    CriticalSlot cs=getCritical(location,slot);    if (cs == null) {      continue;    }    if (cs.getType() != CriticalSlot.TYPE_EQUIPMENT) {      continue;    }    Mounted m=cs.getMount();    EquipmentType type=m.getType();    if ((type instanceof MiscType) && type.hasFlag(MiscType.F_HAND_WEAPON) && type.hasSubType(MiscType.S_CLAW)) {      return !(m.isDestroyed() || m.isMissing() || m.isBreached());    }  }  return false;}  }
class C{  private void bind() throws RemoteException {  String host=resources.getRMIRegistryHost();  if (host == null || host.length() == 0) {    return;  }  RemotableQuartzScheduler exportable=null;  if (resources.getRMIServerPort() > 0) {    exportable=(RemotableQuartzScheduler)UnicastRemoteObject.exportObject(this,resources.getRMIServerPort());  } else {    exportable=(RemotableQuartzScheduler)UnicastRemoteObject.exportObject(this);  }  Registry registry=null;  if (resources.getRMICreateRegistryStrategy().equals(QuartzSchedulerResources.CREATE_REGISTRY_AS_NEEDED)) {    try {      registry=LocateRegistry.getRegistry(resources.getRMIRegistryPort());      registry.list();    } catch (    Exception e) {      registry=LocateRegistry.createRegistry(resources.getRMIRegistryPort());    }  } else   if (resources.getRMICreateRegistryStrategy().equals(QuartzSchedulerResources.CREATE_REGISTRY_ALWAYS)) {    try {      registry=LocateRegistry.createRegistry(resources.getRMIRegistryPort());    } catch (    Exception e) {      registry=LocateRegistry.getRegistry(resources.getRMIRegistryPort());    }  } else {    registry=LocateRegistry.getRegistry(resources.getRMIRegistryHost(),resources.getRMIRegistryPort());  }  String bindName=resources.getRMIBindName();  registry.rebind(bindName,exportable);  boundRemotely=true;  getLog().info("Scheduler bound to RMI registry under name '" + bindName + "'");}  }
class C{  @SuppressWarnings("unchecked") protected void bindServices(){  List<ServiceType> services=mergeServices();  for (  ServiceType type : services) {    try {      if (type.service().equals(type.serviceProvider()))       bind(type.serviceProvider()).in(type.scope()); else       bind(type.service()).to(type.serviceProvider()).in(type.scope());    } catch (    Exception e) {      throw new IllegalArgumentException("Failed to configure service: " + type.service() + " with provider: "+ type.serviceProvider()+ " Scope: "+ type.scope()+ " Error: "+ e);    }  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getC_DocType_ID() == 0) {    MDocType types[]=MDocType.getOfDocBaseType(getCtx(),MDocType.DOCBASETYPE_MaterialMovement);    if (types.length > 0)     setC_DocType_ID(types[0].getC_DocType_ID()); else {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@NotFound@ @C_DocType_ID@"));      return false;    }  }  return true;}  }
class C{  @Override public SimpleEdgeStream<K,EV> distinct(){  DataStream<Edge<K,EV>> edgeStream=this.edges.keyBy(0).flatMap(new DistinctEdgeMapper<K,EV>());  return new SimpleEdgeStream<>(edgeStream,this.getContext());}  }
class C{  public final synchronized boolean computerBusy(){switch (engineState.state) {case SEARCH:case PONDER:case ANALYZE:case STOP_SEARCH:    return true;default :  return false;}}  }
class C{  protected TrustManagerFactory(TrustManagerFactorySpi factorySpi,Provider provider,String algorithm){  this.factorySpi=factorySpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean match(String setting){  return getSettingsKey().equals(setting);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public String generateGroupName(String policyName,Set<String> existingGroupNames,String parentGroupName){  int count=0;  String format=null;  while (count <= existingGroupNames.size()) {    if (0 == count) {      format=String.format("SG_%s",policyName);    } else {      format=String.format("SG_%s_%d",policyName,count);    }    String generatedGroupName=generate(parentGroupName,format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);    if (!existingGroupNames.contains(generatedGroupName)) {      return generatedGroupName;    }    count++;  }  return generate(parentGroupName,String.format("SG1_%s",policyName),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);}  }
class C{  public void printBudget(GeneticAlgorithm<?> algorithm){  LoggingUtils.getEvoLogger().info("* Search Budget:");  for (  StoppingCondition sc : algorithm.getStoppingConditions())   LoggingUtils.getEvoLogger().info("\t- " + sc.toString());}  }
class C{  public static String[] quotedSplit(String line,Pattern separatorPattern){  return quotedSplit(line,separatorPattern,'"','\\');}  }
class C{  public IgniteSpiVersionCheckException(String msg){  super(msg);}  }
class C{  public UF2(){  this(30);}  }
class C{  public <T extends Point2D>T inverse(double x,double y,T llp){  if (llp == null) {    llp=(T)new LatLonPoint.Double();  }  x-=wx;  y=hy - y;  double rho=Math.sqrt(x * x + y * y);  if (rho == 0) {    Debug.message("proj","Gnomonic.inverse: center!");    llp.setLocation(ProjMath.radToDeg(centerX),ProjMath.radToDeg(centerY));    return llp;  }  double c=Math.atan2(rho,scaled_radius);  double cosC=Math.cos(c);  double sinC=Math.sin(c);  double lat=Math.asin(cosC * sinCtrLat + (y * sinC * (cosCtrLat / rho)));  double lon=centerX + Math.atan2((x * sinC),(rho * cosCtrLat * cosC - y * sinCtrLat * sinC));  if (Double.isNaN(lat) || Double.isNaN(lon)) {    Debug.message("proj","Gnomonic.inverse(): outer space!");    lat=centerY;    lon=centerX;  }  llp.setLocation(Math.toDegrees(wrapLongitude(lon)),Math.toDegrees(normalizeLatitude(lat)));  return llp;}  }
class C{  public void tabChanged(BasePanel currBasePanel,BasePanel newBasePanel){  getMenu().setEnabledDelete(false,"Delete all Order");  getMenu().setEnabledRunStrategy(false);  getMenu().setEnabledBrokerData(false);  getMenu().setEnabledTestStrategy(false);  if (m_brokerModel.isConnected()) {    getMenu().setEnabledConnect(false);  } else {    getMenu().setEnabledConnect(true);  }  if (tradingdayPanel == newBasePanel) {    if (null == brokerDataRequestProgressMonitor || brokerDataRequestProgressMonitor.isDone()) {      getMenu().setEnabledDelete(true,"Delete all Order");      if (m_brokerModel.isConnected()) {        getMenu().setEnabledRunStrategy(true);      } else {        getMenu().setEnabledTestStrategy(true);      }      getMenu().setEnabledBrokerData(true);    }  } else   if (strategyPanel == newBasePanel) {    getMenu().setEnabledDelete(true,"Delete rule");  }}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  private synchronized void block(boolean tf){  if (tf) {    try {      if (m_ioThread.isAlive() && m_state != IDLE) {        wait();      }    } catch (    InterruptedException ex) {    }  } else {    notifyAll();  }}  }
class C{  static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.084 -0500",hash_original_method="2025D8159C2E55719645FF1B84712B94",hash_generated_method="AF8A52B23E466A1E85C0396FA63F30D8") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public void write(byte buffer[],int offset,int length) throws IOException {  out.write(buffer,offset,length);}  }
class C{  public synchronized void update(Object value) throws IOException {  update(value,true);}  }
class C{  public void publishNodeAsDown(String nodeName){  log.debug("Publish node={} as DOWN",nodeName);  ZkNodeProps m=new ZkNodeProps(Overseer.QUEUE_OPERATION,OverseerAction.DOWNNODE.toLower(),ZkStateReader.NODE_NAME_PROP,nodeName);  try {    Overseer.getStateUpdateQueue(getZkClient()).offer(Utils.toJSON(m));  } catch (  InterruptedException e) {    Thread.interrupted();    log.debug("Publish node as down was interrupted.");  }catch (  Exception e) {    log.warn("Could not publish node as down: " + e.getMessage());  }}  }
class C{  public void addDecoration(LineDecoration decoration){  if (decoration != null) {    decorations.add(decoration);  }}  }
class C{  private void alignAccCheckAndArrowVertically(LayoutResult lr){  lr.accRect.y=(int)(lr.labelRect.y + (float)lr.labelRect.height / 2 - (float)lr.accRect.height / 2);  fixVerticalAlignment(lr,lr.accRect);  if (useCheckAndArrow) {    lr.arrowRect.y=(int)(lr.labelRect.y + (float)lr.labelRect.height / 2 - (float)lr.arrowRect.height / 2);    lr.checkRect.y=(int)(lr.labelRect.y + (float)lr.labelRect.height / 2 - (float)lr.checkRect.height / 2);    fixVerticalAlignment(lr,lr.arrowRect);    fixVerticalAlignment(lr,lr.checkRect);  }}  }
class C{  public PlottableEntity(Plottable plottable,Color color){  addPlottable(plottable);  mColor=color;}  }
class C{  public AttributeSet(){}  }
class C{  public synchronized KeyStore.Entry engineGetEntry(String alias,KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {  token.ensureValid();  if (protParam != null && protParam instanceof KeyStore.PasswordProtection && ((KeyStore.PasswordProtection)protParam).getPassword() != null && !token.config.getKeyStoreCompatibilityMode()) {    throw new KeyStoreException("ProtectionParameter must be null");  }  AliasInfo aliasInfo=aliasMap.get(alias);  if (aliasInfo == null) {    if (debug != null) {      debug.println("engineGetEntry did not find alias [" + alias + "] in map");    }    return null;  }  Session session=null;  try {    session=token.getOpSession();    if (aliasInfo.type == ATTR_CLASS_CERT) {      if (debug != null) {        debug.println("engineGetEntry found trusted cert entry");      }      return new KeyStore.TrustedCertificateEntry(aliasInfo.cert);    } else     if (aliasInfo.type == ATTR_CLASS_SKEY) {      if (debug != null) {        debug.println("engineGetEntry found secret key entry");      }      THandle h=getTokenObject(session,ATTR_CLASS_SKEY,null,aliasInfo.label);      if (h.type != ATTR_CLASS_SKEY) {        throw new KeyStoreException("expected but could not find secret key");      } else {        SecretKey skey=loadSkey(session,h.handle);        return new KeyStore.SecretKeyEntry(skey);      }    } else {      if (debug != null) {        debug.println("engineGetEntry found private key entry");      }      THandle h=getTokenObject(session,ATTR_CLASS_PKEY,aliasInfo.id,null);      if (h.type != ATTR_CLASS_PKEY) {        throw new KeyStoreException("expected but could not find private key");      } else {        PrivateKey pkey=loadPkey(session,h.handle);        Certificate[] chain=aliasInfo.chain;        if ((pkey != null) && (chain != null)) {          return new KeyStore.PrivateKeyEntry(pkey,chain);        } else {          if (debug != null) {            debug.println("engineGetEntry got null cert chain or private key");          }        }      }    }    return null;  } catch (  PKCS11Exception pe) {    throw new KeyStoreException(pe);  } finally {    token.releaseSession(session);  }}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  throw new IllegalArgumentException("GetFocusContext() can only be used by itself");}  }
class C{  public static void time(Logger logger,String name,Runnable runnable){  if (BuildConfig.DEBUG) {    time(logger,name,null);  } else {    runnable.run();  }}  }
class C{  public void validateConfigChange(KafkaSchedulerConfiguration oldConfig,KafkaSchedulerConfiguration newConfig) throws ValidationException {  List<ValidationError> errors=new ArrayList<>();  errors.addAll(validateServiceConfigChange(oldConfig.getServiceConfiguration(),newConfig.getServiceConfiguration()));  errors.addAll(validateBrokerConfigChange(oldConfig.getBrokerConfiguration(),newConfig.getBrokerConfiguration()));  errors.addAll(validateKafkaConfigChange(oldConfig.getKafkaConfiguration(),newConfig.getKafkaConfiguration()));  if (!errors.isEmpty()) {    throw new ValidationException(errors);  }}  }
class C{  private boolean allowPermission(Permission perm){  if (RuntimeSettings.sandboxMode.equals(Sandbox.SandboxMode.OFF)) {    return true;  }  if (perm instanceof RuntimePermission && "getStackTrace".equals(perm.getName().trim())) {    return true;  }  if (checkIfEvoSuiteRMI(perm) || checkIfRMIDuringTests(perm)) {    return true;  }  if (privilegedThreads.contains(Thread.currentThread())) {    if (privilegedThreadToIgnore == null || !Thread.currentThread().equals(privilegedThreadToIgnore)) {      if (defaultManager == null) {        return true;      } else {        try {          defaultManager.checkPermission(perm);        } catch (        SecurityException e) {          return false;        }        return true;      }    }  }  if (RuntimeSettings.sandboxMode.equals(Sandbox.SandboxMode.IO)) {    if (perm instanceof FilePermission) {      return checkFilePermission((FilePermission)perm);    }    return true;  }  if (perm instanceof FilePermission) {    return checkFilePermission((FilePermission)perm);  }  if (perm instanceof AllPermission) {    return checkAllPermission((AllPermission)perm);  }  if (perm instanceof SecurityPermission) {    return checkSecurityPermission((SecurityPermission)perm);  }  if (perm instanceof LoggingPermission) {    return checkLoggingPermission((LoggingPermission)perm);  }  if (perm instanceof ReflectPermission) {    return checkReflectPermission((ReflectPermission)perm);  }  if (perm instanceof PropertyPermission) {    return checkPropertyPermission((PropertyPermission)perm);  }  if (perm instanceof RuntimePermission) {    return checkRuntimePermission((RuntimePermission)perm);  }  if (perm instanceof AWTPermission) {    return checkAWTPermission((AWTPermission)perm);  }  if (perm instanceof UnresolvedPermission) {    return checkUnresolvedPermission((UnresolvedPermission)perm);  }  if (perm instanceof SerializablePermission) {    return checkSerializablePermission((SerializablePermission)perm);  }  if (perm instanceof AudioPermission) {    return checkAudioPermission((AudioPermission)perm);  }  if (perm instanceof DelegationPermission) {    return checkDelegationPermission((DelegationPermission)perm);  }  if (perm instanceof ServicePermission) {    return checkServicePermission((ServicePermission)perm);  }  if (perm instanceof SQLPermission) {    return checkSQLPermission((SQLPermission)perm);  }  if (perm instanceof SSLPermission) {    return checkSSLPermission((SSLPermission)perm);  }  if (perm instanceof PrivateCredentialPermission) {    return checkPrivateCredentialPermission((PrivateCredentialPermission)perm);  }  if (perm instanceof WebServicePermission) {    return checkWebServicePermission((WebServicePermission)perm);  }  if (perm instanceof SubjectDelegationPermission) {    return checkSubjectDelegationPermission((SubjectDelegationPermission)perm);  }  if (perm instanceof ManagementPermission) {    return checkManagementPermission((ManagementPermission)perm);  }  if (perm instanceof MBeanPermission) {    return checkMBeanPermission((MBeanPermission)perm);  }  if (perm instanceof MBeanServerPermission) {    return checkMBeanServerPermission((MBeanServerPermission)perm);  }  if (perm instanceof MBeanTrustPermission) {    return checkMBeanTrustPermission((MBeanTrustPermission)perm);  }  if (perm instanceof NetPermission) {    return checkNetPermission((NetPermission)perm);  }  if (perm instanceof AuthPermission) {    return checkAuthPermission((AuthPermission)perm);  }  if (perm instanceof SocketPermission) {    return checkSocketPermission((SocketPermission)perm);  }  String canonicalName=perm.getClass().getCanonicalName();  if (canonicalName.startsWith("java")) {    if (!unrecognizedPermissions.contains(perm)) {      unrecognizedPermissions.add(perm);      logger.debug("Unrecognized permission type: " + canonicalName);    }    return false;  } else {    logger.debug("Allowing permission defined by the SUT: " + canonicalName);    return true;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void mapChanged(ColorMap cMap){  layerInfo.colorMapName=cMap.getName();  Landscape.getInstance().markDirty(DirtyType.RenderState);}  }
class C{  public boolean isCellEditable(int row,int column){  if (column != 0 && getValueAt(row,0) instanceof Boolean && !((Boolean)getValueAt(row,0)).booleanValue())   return false;  if (m_readWriteColumn.contains(new Integer(column)))   return true;  return false;}  }
class C{  public void remove(DataSource source){  sources.remove(source);}  }
class C{  public static void poisoned(final Player player){  process(player,TutorialEventType.FIRST_POISONED);}  }
class C{  public String businessObjectFormatEntityAltKeyToString(BusinessObjectFormatEntity businessObjectFormatEntity){  return String.format("namespace: \"%s\", businessObjectDefinitionName: \"%s\", businessObjectFormatUsage: \"%s\", " + "businessObjectFormatFileType: \"%s\", businessObjectFormatVersion: %d",businessObjectFormatEntity.getBusinessObjectDefinition().getNamespace().getCode(),businessObjectFormatEntity.getBusinessObjectDefinition().getName(),businessObjectFormatEntity.getUsage(),businessObjectFormatEntity.getFileType().getCode(),businessObjectFormatEntity.getBusinessObjectFormatVersion());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:05.658 -0500",hash_original_method="57AAD79E24539ED69C4A9588C1A4DBA1",hash_generated_method="543CA322D833BE6F09B7DDF7A30413D7") private boolean handleImageDescriptor(byte[] rawData){  mId=ImageDescriptor.parse(rawData,1);  if (mId == null) {    return false;  }  return true;}  }
class C{  public boolean isByteAddressableStoreSupported(){  return hasExtension("cl_khr_byte_addressable_store");}  }
class C{  private float adjustDirectionForCompare(float direction,float directionToCompare){  if (direction - directionToCompare > 180)   direction-=360; else   if (direction - directionToCompare < -180)   direction+=360;  return direction;}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.LOGICAL_NOT_EXPRESSION;}  }
class C{  void dump(String label,Scope s,PrintStream out) throws Exception {  out.println(label);  Field sTable=Scope.class.getDeclaredField("table");  sTable.setAccessible(true);  out.println("owner:" + s.owner);  Scope.Entry[] table=(Scope.Entry[])sTable.get(s);  for (int i=0; i < table.length; i++) {    if (i > 0)     out.print(", ");    out.print(i + ":" + toString(table[i],table,false));  }  out.println();}  }
class C{  public boolean isDisposal(){  return !isDisposed();}  }
class C{  public Font derive(float sizePixels,int weight){  if (fontUniqueId != null) {    String key=fontUniqueId + "_" + sizePixels+ "_"+ weight;    Font f=derivedFontCache.get(key);    if (f != null) {      return f;    }    f=new Font(Display.impl.deriveTrueTypeFont(font,sizePixels,weight));    f.pixelSize=sizePixels;    f.ttf=true;    derivedFontCache.put(key,f);    return f;  } else {    Font f=new Font(Display.impl.deriveTrueTypeFont(font,sizePixels,weight));    f.pixelSize=sizePixels;    f.ttf=true;    return f;  }}  }
class C{  protected Expression plus(int opPos) throws TransformerException {  return compileOperation(new Plus(),opPos);}  }
class C{  public static void main(String[] args) throws Throwable {  if (args.length >= 3) {    Viewer cl=new Viewer(args[0],Integer.parseInt(args[1]));    String[] args2=new String[args.length - 3];    System.arraycopy(args,3,args2,0,args.length - 3);    cl.run(args[2],args2);  } else   System.err.println("Usage: java javassist.tools.web.Viewer <host> <port> class [args ...]");}  }
class C{  protected void processCommonAssignment(TransferInput<V,S> in,Node lhs,Node rhs,S info,V rhsValue){  info.updateForAssignment(lhs,rhsValue);}  }
class C{  public boolean initWorkbench(int ad_Workbench_ID){  AD_Workbench_ID=ad_Workbench_ID;  String sql=null;  if (Env.isBaseLanguage(m_ctx,"AD_Workbench"))   sql="SELECT w.Name,w.Description,w.Help," + " w.AD_Column_ID,w.AD_Image_ID,w.AD_Color_ID,w.PA_Goal_ID," + " c.ColumnName "+ "FROM AD_Workbench w, AD_Column c "+ "WHERE w.AD_Workbench_ID=?"+ " AND w.IsActive='Y'"+ " AND w.AD_Column_ID=c.AD_Column_ID"; else   sql="SELECT t.Name,t.Description,t.Help," + " w.AD_Column_ID,w.AD_Image_ID,w.AD_Color_ID,w.PA_Goal_ID," + " c.ColumnName "+ "FROM AD_Workbench w, AD_Workbench_Trl t, AD_Column c "+ "WHERE w.AD_Workbench_ID=?"+ " AND w.IsActive='Y'"+ " AND w.AD_Workbench_ID=t.AD_Workbench_ID"+ " AND t.AD_Language='" + Env.getAD_Language(m_ctx) + "'"+ " AND w.AD_Column_ID=c.AD_Column_ID";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Workbench_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      Name=rs.getString(1);      Description=rs.getString(2);      if (Description == null)       Description="";      Help=rs.getString(3);      if (Help == null)       Help="";      AD_Column_ID=rs.getInt(4);      AD_Image_ID=rs.getInt(5);      AD_Color_ID=rs.getInt(6);      PA_Goal_ID=rs.getInt(7);      ColumnName=rs.getString(8);    } else     AD_Workbench_ID=0;    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (AD_Workbench_ID == 0)   return false;  return initWorkbenchWindows();}  }
class C{  @Override public Data execute(Data kObj,double in) throws DMLRuntimeException {  kplus.execute(kObj,in * in);  return kObj;}  }
class C{  @Deprecated public List<ExportGroupRestRep> findByHostOrCluster(URI hostId,URI projectId){  return findByHostOrCluster(hostId,projectId,null);}  }
class C{  public BathymetryFilterElevationModel(ElevationModel source){  this.sourceModel=source;}  }
class C{  public CModuleInitializerOperation(final INaviModule module){  m_module=module;  m_progressPanel.setText("Initializing module" + ": '" + m_module.getConfiguration().getName() + "'");  CGlobalProgressManager.instance().add(this);  module.addListener(m_listener);}  }
class C{  public void testDefaultIsDriver(){  Properties props=new Properties();  DataSource ds=dataSourceConverter.fromProperties(props);  assertEquals("java.sql.Driver",ds.getConnectionType());}  }
class C{  protected List<File> prioritiseProcessedFiles(final File[] files){  final List<File> prioritised=new ArrayList<File>(Arrays.asList(files));  Collections.sort(prioritised,PRIORITY);  return prioritised;}  }
class C{  public void addStop(int regency,int pid){  HashSet<Integer> pids=stops.get(regency);  if (pids == null)   pids=new HashSet<Integer>();  pids.add(pid);  stops.put(regency,pids);}  }
class C{  private void markReferenceMap(Address address){  int referenceIndex=address.diff(BOOT_IMAGE_DATA_START).toInt() >> LOG_BYTES_IN_ADDRESS;  if (referenceMap[referenceIndex] == 0) {    referenceMap[referenceIndex]=1;    referenceMapReferences++;    if (referenceIndex > referenceMapLimit)     referenceMapLimit=referenceIndex;  }}  }
class C{  public Observable<Boolean> request(final String... permissions){  return Observable.just(null).compose(ensure(permissions));}  }
class C{  public final long size(){  return length;}  }
class C{  @SuppressWarnings("unchecked") @Override public Integer doInBackground(Iterator<String>... contactsIter){  return deleteAllContacts(contactsIter[0]);}  }
class C{  public CMWC4096(long seed){  super(seed);}  }
class C{  public void newInstance(final Type type){  typeInsn(Opcodes.NEW,type);}  }
class C{  @Override protected void paintDisabledText(JLabel l,Graphics g,String s,int textX,int textY){  Color c=UIManager.getColor("Label.disabledForeground");  g.setColor((c != null) ? c : l.getForeground());  int accChar=-1;  PaletteUtilities.drawString(g,s,accChar,textX,textY);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  String url="/notes.jsp";  HttpSession session=request.getSession(false);  if (session == null || session.getAttribute(WebInfo.NAME) == null)   url="/login.jsp"; else {    session.removeAttribute(WebSessionCtx.HDR_MESSAGE);    WebInfo info=(WebInfo)session.getAttribute(WebInfo.NAME);    if (info != null)     info.setMessage("");    String msg=streamAttachment(request,response);    if (msg == null || msg.length() == 0)     return;    if (info != null)     info.setMessage(msg);  }  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  protected long doStandardEnqueue(byte[] body) throws Exception {  return enqueueDownloadRequest(body,DOWNLOAD_TO_DOWNLOAD_CACHE_DIR);}  }
class C{  public boolean isDecimalPoint(){  Object oo=get_Value(COLUMNNAME_IsDecimalPoint);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public int isNullable(int param) throws SQLException {  try {    debugCodeCall("isNullable",param);    return getParameter(param).getNullable();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void endDocument() throws ODataRenderException {  try {    xmlWriter.writeEndDocument();    xmlWriter.flush();  } catch (  XMLStreamException e) {    LOG.error("Not possible to end stream XML");    throw new ODataRenderException("Not possible to end stream XML: ",e);  }}  }
class C{  public BitmapLuminanceSource(Bitmap bitmap){  super(bitmap.getWidth(),bitmap.getHeight());  int width=bitmap.getWidth();  int height=bitmap.getHeight();  _bitmap=bitmap;  int area=width * height;  _matrix=new byte[area];  int[] rgb=new int[area];  _bitmap.getARGB(rgb,0,width,0,0,width,height);  for (int y=0; y < height; y++) {    int offset=y * width;    for (int x=0; x < width; x++) {      int pixel=rgb[offset + x];      int luminance=(306 * ((pixel >> 16) & 0xFF) + 601 * ((pixel >> 8) & 0xFF) + 117 * (pixel & 0xFF)) >> 10;      _matrix[offset + x]=(byte)luminance;    }  }  rgb=null;}  }
class C{  public void onResume(){  openGLView_.onResume();  resume();}  }
class C{  public static void closeQuietly(ResultSet rs){  try {    close(rs);  } catch (  SQLException e) {  }}  }
class C{  public static Builder builder(LeaveRequest request){  return new Builder(request);}  }
class C{  public GridConcurrentHashSet(int initCap,float loadFactor,int conLevel){  super(new ConcurrentHashMap8<E,E>(initCap,loadFactor,conLevel));}  }
class C{  @SuppressWarnings("fallthrough") private void beforeValue() throws IOException {switch (peek()) {case NONEMPTY_DOCUMENT:    if (!lenient) {      throw new IllegalStateException("JSON must have only one top-level value.");    }case EMPTY_DOCUMENT:  replaceTop(NONEMPTY_DOCUMENT);break;case EMPTY_ARRAY:replaceTop(NONEMPTY_ARRAY);newline();break;case NONEMPTY_ARRAY:out.append(',');newline();break;case DANGLING_NAME:out.append(separator);replaceTop(NONEMPTY_OBJECT);break;default :throw new IllegalStateException("Nesting problem.");}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Builder addClause(Query clause){  this.query.addBooleanClause(clause);  return this;}  }
class C{  public AggregateDelayStrategy(final List<AbstractDelayStrategy> strategies){  this.strategies=strategies;}  }
class C{  private void cleanNetwork(String fileToClean,String fileToWrite){  NetworkCleaner nc=new NetworkCleaner();  nc.run(fileToClean,fileToWrite);  this.log.info("Network cleaned.");}  }
class C{  public StoredValue(Object key){  this.key=key;}  }
class C{  public static boolean isSymbolFont(String font){  if (!prepared) {    prepareFontLists();  }  return symbol.contains(font);}  }
class C{  public static boolean isDistinctColumn(char[][] s){  for (int i=0; i < s.length; i++) {    int[] counts=new int[s[0].length];    for (int j=0; j < s[i].length; j++) {      counts[s[j][i] - 65]++;      if (counts[s[j][i] - 65] > 1)       return false;    }  }  return true;}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableMotionPointValue res;  if (result == null) {    res=new AnimatableMotionPointValue(target);  } else {    res=(AnimatableMotionPointValue)result;  }  float newX=x, newY=y, newAngle=angle;  int angleCount=1;  if (to != null) {    AnimatableMotionPointValue toValue=(AnimatableMotionPointValue)to;    newX+=interpolation * (toValue.x - x);    newY+=interpolation * (toValue.y - y);    newAngle+=toValue.angle;    angleCount++;  }  if (accumulation != null && multiplier != 0) {    AnimatableMotionPointValue accValue=(AnimatableMotionPointValue)accumulation;    newX+=multiplier * accValue.x;    newY+=multiplier * accValue.y;    newAngle+=accValue.angle;    angleCount++;  }  newAngle/=angleCount;  if (res.x != newX || res.y != newY || res.angle != newAngle) {    res.x=newX;    res.y=newY;    res.angle=newAngle;    res.hasChanged=true;  }  return res;}  }
class C{  public static boolean exists(String fileName){  return FilePath.get(fileName).exists();}  }
class C{  public static TimeDuration minus(final Date lhs,final Date rhs){  long milliseconds=lhs.getTime() - rhs.getTime();  long days=milliseconds / (24 * 60 * 60* 1000);  milliseconds-=days * 24 * 60* 60* 1000;  int hours=(int)(milliseconds / (60 * 60 * 1000));  milliseconds-=hours * 60 * 60* 1000;  int minutes=(int)(milliseconds / (60 * 1000));  milliseconds-=minutes * 60 * 1000;  int seconds=(int)(milliseconds / 1000);  milliseconds-=seconds * 1000;  return new TimeDuration((int)days,hours,minutes,seconds,(int)milliseconds);}  }
class C{  public TraversalSupport(){}  }
class C{  private long convertFramesToMilliseconds(int frames){  return (frames / (long)dataLine.getFormat().getSampleRate()) * 1000;}  }
class C{  public TouchHandler(GraphicalView view,AbstractChart chart){  graphicalView=view;  zoomR=graphicalView.getZoomRectangle();  if (chart instanceof XYChart) {    mRenderer=((XYChart)chart).getRenderer();  } else {    mRenderer=((RoundChart)chart).getRenderer();  }  if (mRenderer.isPanEnabled()) {    mPan=new Pan(chart);  }  if (mRenderer.isZoomEnabled()) {    mPinchZoom=new Zoom(chart,true,1);  }}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isMaxConcurrentOutgoingFileTransfersReached(){  int nrOfConcurrentOutgoingFileTransferSessions=0;synchronized (getImsServiceSessionOperationLock()) {    for (    FileSharingSession session : mFileTransferSessionCache.values()) {      if (!session.isInitiatedByRemote()) {        nrOfConcurrentOutgoingFileTransferSessions++;      }    }    int maxConcurrentOutgoingFileTransferSessions=mRcsSettings.getMaxConcurrentOutgoingFileTransferSessions();    if (maxConcurrentOutgoingFileTransferSessions == 0) {      return false;    }    if (nrOfConcurrentOutgoingFileTransferSessions >= maxConcurrentOutgoingFileTransferSessions) {      return true;    }    nrOfConcurrentOutgoingFileTransferSessions+=mFileUploadSessionCache.size();    return nrOfConcurrentOutgoingFileTransferSessions >= maxConcurrentOutgoingFileTransferSessions;  }}  }
class C{  @Override public void start(Map<String,String> props){  configProps=props;  try {    A.notNullOrEmpty(configProps.get(SinkConnector.TOPICS_CONFIG),"topics");    A.notNullOrEmpty(configProps.get(IgniteSinkConstants.CACHE_NAME),"cache name");    A.notNullOrEmpty(configProps.get(IgniteSinkConstants.CACHE_CFG_PATH),"path to cache config file");  } catch (  IllegalArgumentException e) {    throw new ConnectException("Cannot start IgniteSinkConnector due to configuration error",e);  }}  }
class C{  public static MCashLine createCashLine(Properties ctx,MCash cashJournal,BigDecimal amount,String cashType,String trxName) throws OperationException {  return createCashLine(ctx,cashJournal,amount,cashType,"",trxName);}  }
class C{  public void resetReferences(){  if (_refs != null)   _refs.clear();}  }
class C{  public void add(E value){  Entry entry=new Entry<>(value,String.valueOf(value));  addItem(entry);}  }
class C{  protected TagImpl(){  super();}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public static void logout(){  MSession session=MSession.get(Env.getCtx(),false);  if (session != null)   session.logout();  reset(true);  CConnection.get().setAppServerCredential(null,null);}  }
class C{  public static void write(Saver saver,Instances data) throws Exception {  DataSink sink;  sink=new DataSink(saver);  sink.write(data);}  }
class C{  private int collectCoalInfo(Tree tree,NodeRef node,GeneTreeInfo.SequenceAssignment[] seqassigns,int loc,CoalInfo[] info){  info[loc]=new CoalInfo(tree.getNodeHeight(node),tree.getChildCount(node));  int newLoc=loc - 1;  for (int i=0; i < 2; i++) {    NodeRef child=tree.getChild(node,i);    info[loc].sinfo[i]=new FixedBitSet(nSpSeqs());    if (tree.isExternal(child)) {      Taxon taxon=tree.getNodeTaxon(child);      int ti=taxon2index.get(taxon);      int spseq=spsq[seqassigns[ti].spIndex][seqassigns[ti].seqIndex];      info[loc].sinfo[i].set(spseq);      assert tree.getNodeHeight(child) == 0;    } else {      final int used=collectCoalInfo(tree,child,seqassigns,newLoc,info);      for (int j=0; j < info[newLoc].sinfo.length; ++j) {        info[loc].sinfo[i].union(info[newLoc].sinfo[j]);      }      newLoc=used;    }  }  return newLoc;}  }
class C{  public static String toPrettyString(Object value){  if (value == null) {    return StringPool.NULL;  }  Class<?> type=value.getClass();  if (type.isArray()) {    Class componentType=type.getComponentType();    if (componentType.isPrimitive()) {      StringBuilder sb=new StringBuilder();      sb.append('[');      if (componentType == int.class) {        sb.append(ArraysUtil.toString((int[])value));      } else       if (componentType == long.class) {        sb.append(ArraysUtil.toString((long[])value));      } else       if (componentType == double.class) {        sb.append(ArraysUtil.toString((double[])value));      } else       if (componentType == float.class) {        sb.append(ArraysUtil.toString((float[])value));      } else       if (componentType == boolean.class) {        sb.append(ArraysUtil.toString((boolean[])value));      } else       if (componentType == short.class) {        sb.append(ArraysUtil.toString((short[])value));      } else       if (componentType == byte.class) {        sb.append(ArraysUtil.toString((byte[])value));      } else {        throw new IllegalArgumentException();      }      sb.append(']');      return sb.toString();    } else {      StringBuilder sb=new StringBuilder();      sb.append('[');      Object[] array=(Object[])value;      for (int i=0; i < array.length; i++) {        if (i > 0) {          sb.append(',');        }        sb.append(toPrettyString(array[i]));      }      sb.append(']');      return sb.toString();    }  } else   if (value instanceof Iterable) {    Iterable iterable=(Iterable)value;    StringBuilder sb=new StringBuilder();    sb.append('{');    int i=0;    for (    Object o : iterable) {      if (i > 0) {        sb.append(',');      }      sb.append(toPrettyString(o));      i++;    }    sb.append('}');    return sb.toString();  }  return value.toString();}  }
class C{  protected double P(DataPoint x){  double fx=F(x);  double efx=Math.exp(fx);  double enfx=Math.exp(-fx);  if (Double.isInfinite(efx) && efx > 0 && enfx < 1e-15)   return 1.0;  return efx / (efx + enfx);}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  int modulus=length % 3;  int dataLength=(length - modulus);  int a1, a2, a3;  for (int i=off; i < off + dataLength; i+=3) {    a1=data[i] & 0xff;    a2=data[i + 1] & 0xff;    a3=data[i + 2] & 0xff;    out.write(encodingTable[(a1 >>> 2) & 0x3f]);    out.write(encodingTable[((a1 << 4) | (a2 >>> 4)) & 0x3f]);    out.write(encodingTable[((a2 << 2) | (a3 >>> 6)) & 0x3f]);    out.write(encodingTable[a3 & 0x3f]);  }  int b1, b2, b3;  int d1, d2;switch (modulus) {case 0:    break;case 1:  d1=data[off + dataLength] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=(d1 << 4) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(padding);out.write(padding);break;case 2:d1=data[off + dataLength] & 0xff;d2=data[off + dataLength + 1] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=((d1 << 4) | (d2 >>> 4)) & 0x3f;b3=(d2 << 2) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(encodingTable[b3]);out.write(padding);break;}return (dataLength / 3) * 4 + ((modulus == 0) ? 0 : 4);}  }
class C{  public static boolean isAssignableFrom(MappedField destination,MappedField source){  return isAssignableFrom(destination.getValue(),source.getValue());}  }
class C{  private static synchronized void obtainEC2Addresses(){  if (addressChecked)   return;  addressChecked=true;  String localIPStr=null;  String publicIPStr=null;  try {    localIPStr=fetch(LOCAL_IP_URL);    publicIPStr=fetch(PUBLIC_IP_URL);    face=new TransportAddress(localIPStr,9,Transport.UDP);    mask=new TransportAddress(publicIPStr,9,Transport.UDP);    logger.info("Detected AWS local IP: " + face);    logger.info("Detected AWS public IP: " + mask);  } catch (  Exception exc) {    logger.log(Level.INFO,"We failed to obtain EC2 instance addresses " + "for the following reason: ",exc);    logger.info("String for local IP: " + localIPStr);    logger.info("String for public IP: " + publicIPStr);  }}  }
class C{  public float valueAt(int index){  return mValues[index];}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @Override protected void doAction(){  deleteSelectedEntry();}  }
class C{  public void trimToSize(int maxSize){  while (true) {    K key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<K,V> toEvict=map.entrySet().iterator().next();      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  @Override public String generateFinished() throws Exception {  return "";}  }
class C{  public RTextScrollPane(RTextArea textArea){  this(textArea,true);}  }
class C{  public static Set<String> expandHost(String addr) throws IgniteCheckedException {  assert addr != null;  Set<String> addrs=new HashSet<>();  if (addr.contains(RANGE_SMB)) {    String[] parts=addr.split(RANGE_SMB);    if (parts.length != 2)     throw new IgniteCheckedException("Invalid IP range: " + addr);    int lastDot=parts[0].lastIndexOf('.');    if (lastDot < 0)     throw new IgniteCheckedException("Invalid IP range: " + addr);    String base=parts[0].substring(0,lastDot);    String begin=parts[0].substring(lastDot + 1);    String end=parts[1];    try {      int a=Integer.valueOf(begin);      int b=Integer.valueOf(end);      if (a > b)       throw new IgniteCheckedException("Invalid IP range: " + addr);      for (int i=a; i <= b; i++)       addrs.add(base + "." + i);    } catch (    NumberFormatException e) {      throw new IgniteCheckedException("Invalid IP range: " + addr,e);    }  } else   addrs.add(addr);  return addrs;}  }
class C{  public CInsertTagAction(final JFrame parent,final ITagManager tagManager,final ITreeNode<CTag> tag){  super("Insert Tag");  m_parent=Preconditions.checkNotNull(parent,"IE01217: Parent argument can not be null");  m_tagManager=Preconditions.checkNotNull(tagManager,"IE01218: Tag manager argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE01782: Tag can't be null.");}  }
class C{  public void addPoint(Coord point,int pos){  points.put(pos,point);}  }
class C{  public TypedEventListener(EventListener<E> wrappedListener,Class<E> eventClass){  this.eventClass=eventClass;  this.wrappedListener=wrappedListener;}  }
class C{  @Override public void rateIndividuals(String filename,String outputFolder){  Map<String,Integer[]> personMap=new TreeMap<String,Integer[]>();  LOG.info("Processing records for person-specific scoring.");  Counter counter=new Counter("   lines # ");  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=null;    while ((line=br.readLine()) != null && counter.getCounter() < maxLines) {      String[] sa=line.split(",");      String id=sa[1];      if (!personMap.containsKey(id)) {        Integer[] ia={0,0,0,0};        personMap.put(id,ia);      }      Integer[] thisArray=personMap.get(id);      RISK_GROUP risk=getRiskGroup(line);      int index;switch (risk) {case NONE:        index=0;      break;case LOW:    index=1;  break;case MEDIUM:index=2;break;case HIGH:index=3;break;default :throw new RuntimeException("Don't know where to get risk values for " + risk.toString());}int oldCount=thisArray[index];thisArray[index]=oldCount + 1;counter.incCounter();}} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot read from " + filename);} finally {try {br.close();} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot close " + filename);}}counter.printCounter();LOG.info("Done processing records. Unique persons identified: " + personMap.size());String outputFilename=outputFolder + (outputFolder.endsWith("/") ? "" : "/") + "riskClassCountsPerPerson.csv";LOG.info("Writing the per-person risk classes counts to " + outputFilename);BufferedWriter bw=IOUtils.getBufferedWriter(outputFilename);try {bw.write("id,none,low,medium,high");bw.newLine();for (String id : personMap.keySet()) {Integer[] thisArray=personMap.get(id);bw.write(String.format("%s,%d,%d,%d,%d\n",id,thisArray[0],thisArray[1],thisArray[2],thisArray[3]));}} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot write to " + outputFilename);} finally {try {bw.close();} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot close " + outputFilename);}}LOG.info("Done writing the per-person risk classes counts.");}  }
class C{  protected void addLowerBoundPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_RangeConstraint_lowerBound_feature"),getString("_UI_PropertyDescriptor_description","_UI_RangeConstraint_lowerBound_feature","_UI_RangeConstraint_type"),TypesPackage.Literals.RANGE_CONSTRAINT__LOWER_BOUND,true,false,false,ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,null,null));}  }
class C{  @Override public RecyclerView.LayoutParams generateDefaultLayoutParams(){  return new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);}  }
class C{  public boolean isLocked(){  Object oo=get_Value(COLUMNNAME_Locked);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void topLevelWindowDestroyed(Window w){  if (w instanceof Accessible) {    removeListeners((Accessible)w);  }}  }
class C{  public boolean isItemForce(){  return true;}  }
class C{  protected static ArrayList<Pair<INaviCodeNode,INaviInstruction>> saveCodeNodeInstructions(final SQLProvider provider,final List<INaviViewNode> nodes,final int firstNode,final List<Integer> codeNodeIndices) throws SQLException {  if (!nodes.isEmpty()) {    final Set<INaviInstruction> unsavedInstructions=new HashSet<INaviInstruction>();    for (    final int index : codeNodeIndices) {      final CCodeNode node=(CCodeNode)nodes.get(index);      final Iterable<INaviInstruction> instructions=node.getInstructions();      for (      final INaviInstruction instruction : instructions) {        if (!(instruction.isStored())) {          unsavedInstructions.add(instruction);        }      }    }    PostgreSQLInstructionFunctions.createInstructions(provider,unsavedInstructions);    final String query="INSERT INTO " + CTableNames.CODENODE_INSTRUCTIONS_TABLE + " (module_id, node_id, position, address, comment_id) VALUES (?, ?, ?, ?, ?)";    final PreparedStatement preparedStatement=provider.getConnection().getConnection().prepareStatement(query);    final ArrayList<Pair<INaviCodeNode,INaviInstruction>> instructionsWithUnsavedLocalComments=new ArrayList<Pair<INaviCodeNode,INaviInstruction>>();    try {      for (      final Integer index : codeNodeIndices) {        final INaviCodeNode codeNode=(INaviCodeNode)nodes.get(index);        int position=0;        for (        final INaviInstruction instruction : codeNode.getInstructions()) {          final List<IComment> comments=codeNode.getComments().getLocalInstructionComment(instruction);          final Integer commentId=comments == null ? null : comments.size() == 0 ? null : Iterables.getLast(comments).getId();          if ((comments != null) && (comments.size() != 0) && (commentId == null)) {            instructionsWithUnsavedLocalComments.add(new Pair<INaviCodeNode,INaviInstruction>(codeNode,instruction));          }          final int moduleId=instruction.getModule().getConfiguration().getId();          preparedStatement.setInt(1,moduleId);          preparedStatement.setInt(2,firstNode + index);          preparedStatement.setInt(3,position);          preparedStatement.setObject(4,instruction.getAddress().toBigInteger(),Types.BIGINT);          if (commentId == null) {            preparedStatement.setNull(5,Types.INTEGER);          } else {            preparedStatement.setInt(5,commentId);          }          position++;          preparedStatement.addBatch();        }      }      preparedStatement.executeBatch();    }  finally {      preparedStatement.close();    }    return instructionsWithUnsavedLocalComments;  }  return null;}  }
class C{  public MultiStopwordsTest(String name){  super(name);}  }
class C{  private void currentMove(Coords dest){  if (shiftheld || (gear == GEAR_TURN)) {    cmd.rotatePathfinder(cmd.getFinalCoords().direction(dest),false);  } else   if ((gear == GEAR_JUMP) && (ce().getJumpType() == Mech.JUMP_BOOSTER)) {    Coords src;    if (cmd.getLastStep() != null) {      src=cmd.getLastStep().getPosition();    } else {      src=ce().getPosition();    }    int dir=src.direction(dest);    int facing=ce().getFacing();    dir=(((dir - facing) % 6) + 6) % 6;switch (dir) {case 0:      cmd.findSimplePathTo(dest,MoveStepType.FORWARDS,src.direction(dest),ce().getFacing());    break;case 1:  cmd.findSimplePathTo(dest,MoveStepType.LATERAL_RIGHT,src.direction(dest),ce().getFacing());break;case 2:cmd.findSimplePathTo(dest,MoveStepType.LATERAL_LEFT_BACKWARDS,src.direction(dest),ce().getFacing());break;case 3:cmd.findSimplePathTo(dest,MoveStepType.BACKWARDS,src.direction(dest),ce().getFacing());break;case 4:cmd.findSimplePathTo(dest,MoveStepType.LATERAL_RIGHT_BACKWARDS,src.direction(dest),ce().getFacing());break;case 5:cmd.findSimplePathTo(dest,MoveStepType.LATERAL_LEFT,src.direction(dest),ce().getFacing());break;}} else if ((gear == GEAR_LAND) || (gear == GEAR_JUMP)) {cmd.findPathTo(dest,MoveStepType.FORWARDS);} else if (gear == GEAR_BACKUP) {cmd.findPathTo(dest,MoveStepType.BACKWARDS);} else if (gear == GEAR_CHARGE) {cmd.findPathTo(dest,MoveStepType.CHARGE);if (cmd.getFinalCoords().equals(dest) && (cmd.getLastStep().getType() != MoveStepType.CHARGE)) {cmd.removeLastStep();cmd.addStep(MoveStepType.CHARGE);}} else if (gear == GEAR_DFA) {cmd.findPathTo(dest,MoveStepType.DFA);if (cmd.getFinalCoords().equals(dest) && (cmd.getLastStep().getType() != MoveStepType.DFA)) {cmd.removeLastStep();cmd.addStep(MoveStepType.DFA);}} else if (gear == GEAR_SWIM) {cmd.findPathTo(dest,MoveStepType.SWIM);} else if (gear == GEAR_RAM) {cmd.findPathTo(dest,MoveStepType.FORWARDS);} else if (gear == GEAR_IMMEL) {cmd.addStep(MoveStepType.UP,true,true);cmd.addStep(MoveStepType.UP,true,true);cmd.addStep(MoveStepType.DEC,true,true);cmd.addStep(MoveStepType.DEC,true,true);cmd.rotatePathfinder(cmd.getFinalCoords().direction(dest),true);gear=GEAR_LAND;} else if (gear == GEAR_SPLIT_S) {cmd.addStep(MoveStepType.DOWN,true,true);cmd.addStep(MoveStepType.DOWN,true,true);cmd.addStep(MoveStepType.ACC,true,true);cmd.rotatePathfinder(cmd.getFinalCoords().direction(dest),true);gear=GEAR_LAND;}if (gear == GEAR_LONGEST_WALK || gear == GEAR_LONGEST_RUN) {int maxMp;MoveStepType stepType;if (gear == GEAR_LONGEST_WALK) {maxMp=ce().getWalkMP();stepType=MoveStepType.BACKWARDS;gear=GEAR_BACKUP;} else {maxMp=ce().getRunMPwithoutMASC();stepType=MoveStepType.FORWARDS;gear=GEAR_LAND;}LongestPathFinder lpf;if (ce() instanceof Aero) {lpf=LongestPathFinder.newInstanceOfAeroPath(maxMp,ce().getGame());} else {lpf=LongestPathFinder.newInstanceOfLongestPath(maxMp,stepType,ce().getGame());}final int timeLimit=PreferenceManager.getClientPreferences().getMaxPathfinderTime();lpf.addStopCondition(new AbstractPathFinder.StopConditionTimeout<MovePath>(timeLimit * 4));lpf.run(cmd);MovePath lPath=lpf.getComputedPath(dest);if (lPath != null) {cmd=lPath;}}clientgui.bv.setWeaponFieldofFire(ce(),cmd);}  }
class C{  public void shutdown(){  if (executor != null) {    executor.shutdown();    executor=null;  }  if (timer != null) {    timer.cancel();    timer=null;  }  instance=null;}  }
class C{  public Long addExternalRoom(String name,long roomtypes_id,String comment,Long numberOfPartizipants,boolean ispublic,List<Integer> organisations,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,List<Map<String,Object>> roomModerators,Long externalRoomId,String externalRoomType,Boolean allowUserQuestions,Boolean isAudioOnly,Boolean isClosed,String redirectURL,Boolean waitForRecording,Boolean allowRecording,Boolean hideTopBar){  log.debug("addExternalRoom");  try {    Rooms r=new Rooms();    r.setName(name);    r.setComment(comment);    r.setStarttime(new Date());    r.setNumberOfPartizipants(numberOfPartizipants);    r.setRoomtype(this.getRoomTypesById(roomtypes_id));    r.setIspublic(ispublic);    r.setAllowUserQuestions(allowUserQuestions);    r.setIsAudioOnly(isAudioOnly);    r.setAppointment(appointment);    r.setIsDemoRoom(isDemoRoom);    r.setDemoTime(demoTime);    r.setIsModeratedRoom(isModeratedRoom);    r.setDeleted("false");    r.setExternalRoomId(externalRoomId);    r.setExternalRoomType(externalRoomType);    r.setIsClosed(isClosed);    r.setRedirectURL(redirectURL);    r.setWaitForRecording(waitForRecording);    r.setAllowRecording(allowRecording);    r.setHideTopBar(hideTopBar);    r=em.merge(r);    long returnId=r.getRooms_id();    if (organisations != null) {      Long t=this.updateRoomOrganisations(organisations,r);      if (t == null)       return null;    }    if (roomModerators != null) {      roomModeratorsDao.addRoomModeratorByUserList(roomModerators,r.getRooms_id());    }    return returnId;  } catch (  Exception ex2) {    log.error("[addExternalRoom] ",ex2);  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends T> list,T object,Comparator<? super T> comparator){  if (comparator == null) {    return Collections.binarySearch((List<? extends net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<? super T>>)list,object);  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends T> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-comparator.compare(it.next(),object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >> 1;    if ((result=-comparator.compare(list.get(mid),object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  private void onInitTypeface(Context context,AttributeSet attrs,int defStyle){  if (isInEditMode()) {    return;  }  int typefaceValue=0;  if (attrs != null) {    TypedArray values=context.obtainStyledAttributes(attrs,R.styleable.RobotoTextView,defStyle,0);    typefaceValue=values.getInt(R.styleable.RobotoTextView_typeface,0);    values.recycle();  }  Typeface robotoTypeface=RobotoTypefaceManager.obtaintTypeface(context,typefaceValue);  setTypeface(robotoTypeface);}  }
class C{  @Override public void unwrapSSLv2(byte[] bytes){  unexpectedMessage();}  }
class C{  public boolean isVisible(){  int n=getLayoutViewCount() - 1;  for (int i=0; i < n; i++) {    View v=getLayoutView(i);    if (v.isVisible()) {      return true;    }  }  if (n > 0) {    View v=getLayoutView(n);    if ((v.getEndOffset() - v.getStartOffset()) == 1) {      return false;    }  }  if (getStartOffset() == getDocument().getLength()) {    boolean editable=false;    Component c=getContainer();    if (c instanceof JTextComponent) {      editable=((JTextComponent)c).isEditable();    }    if (!editable) {      return false;    }  }  return true;}  }
class C{  public void mult2And(int mask){  long longMask=(((long)mask) << 24) + mask;  for (int i=0; i < coeffs.length; i++) {    coeffs[i]=(coeffs[i] << 1) & longMask;  }}  }
class C{  private List<Bookmark> list(){  checkNotMainThread();  return Bookmark.all(database.value());}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'HideFile' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'BEYOND_GROUP_ID' INTEGER,"+ "'NAME' TEXT,"+ "'OLD_PATH_URL' TEXT,"+ "'NEW_PATH_URL' TEXT,"+ "'MOVE_DATE' INTEGER);");}  }
class C{  protected PropertyNameValuePairSingleNameImpl(){  super();}  }
class C{  public static long[] trimToCapacity(long[] array,int maxCapacity){  if (array.length > maxCapacity) {    long oldArray[]=array;    array=new long[maxCapacity];    System.arraycopy(oldArray,0,array,0,maxCapacity);  }  return array;}  }
class C{  protected <T>ListenableFuture<T> call(){  return immediateFuture((T)null);}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  protected void notifyProgListenerEnd(int value,int status){  restartEndOfProgrammingTimer();  ProgListener p=_usingProgrammer;  _usingProgrammer=null;  if (p != null) {    sendProgrammingReply(p,value,status);  }}  }
class C{  public void close(){  try {    if (rtpTransmitter != null)     rtpTransmitter.close();    if (rtcpTransmitter != null)     rtcpTransmitter.close();    if (rtpReceiver != null)     rtpReceiver.close();    if (rtcpReceiver != null)     rtcpReceiver.close();    rtpStreamListener=null;  } catch (  Exception e) {  }}  }
class C{  public static int bytesUsed(Object obj,RVMArray type,int numElements){  int size=type.getInstanceSize(numElements);  if (MOVES_OBJECTS) {    if (ADDRESS_BASED_HASHING) {      Word hashState=Magic.getWordAtOffset(obj,STATUS_OFFSET).and(HASH_STATE_MASK);      if (hashState.EQ(HASH_STATE_HASHED_AND_MOVED)) {        size+=HASHCODE_BYTES;      }    }  }  return Memory.alignUp(size,BYTES_IN_INT);}  }
class C{  public double value(){  return 1.0 / scale() - constant;}  }
class C{  public boolean isMenuShowing(){  return menuDisplaying;}  }
class C{  public void update(HttpServletRequest request){  if ("Y".equals(request.getParameter("changeStatusAndTypeState"))) {    changeOrderListStates(request);  } else {    String viewSizeParam=request.getParameter(VIEW_SIZE_PARAM);    String viewIndexParam=request.getParameter(VIEW_INDEX_PARAM);    if (!UtilValidate.isEmpty(viewSizeParam) && !UtilValidate.isEmpty(viewIndexParam))     changePaginationState(viewSizeParam,viewIndexParam);  }}  }
class C{  public static void premain(String args,Instrumentation inst) throws Exception {  logger.info("Executing premain of JavaAgent");  checkTransformerState();  inst.addTransformer(transformer,true);  instrumentation=inst;}  }
class C{  public int offsetToLine(int offset) throws IllegalArgumentException {  if (offset < 0 || offset >= textLength) {    if (offset == 0 && textLength == 0) {      return 1;    }    throw new IllegalArgumentException("offset out of bounds");  }  int line=1;  while (offset >= nlOffsets[line]) {    line++;  }  return line;}  }
class C{  public ObjectIdentifier(String oid) throws IOException {  int ch='.';  int start=0;  int end=0;  int pos=0;  byte[] tmp=new byte[oid.length()];  int first=0, second;  int count=0;  try {    String comp=null;    do {      int length=0;      end=oid.indexOf(ch,start);      if (end == -1) {        comp=oid.substring(start);        length=oid.length() - start;      } else {        comp=oid.substring(start,end);        length=end - start;      }      if (length > 9) {        BigInteger bignum=new BigInteger(comp);        if (count == 0) {          checkFirstComponent(bignum);          first=bignum.intValue();        } else {          if (count == 1) {            checkSecondComponent(first,bignum);            bignum=bignum.add(BigInteger.valueOf(40 * first));          } else {            checkOtherComponent(count,bignum);          }          pos+=pack7Oid(bignum,tmp,pos);        }      } else {        int num=Integer.parseInt(comp);        if (count == 0) {          checkFirstComponent(num);          first=num;        } else {          if (count == 1) {            checkSecondComponent(first,num);            num+=40 * first;          } else {            checkOtherComponent(count,num);          }          pos+=pack7Oid(num,tmp,pos);        }      }      start=end + 1;      count++;    } while (end != -1);    checkCount(count);    encoding=new byte[pos];    System.arraycopy(tmp,0,encoding,0,pos);    this.stringForm=oid;  } catch (  IOException ioe) {    throw ioe;  }catch (  Exception e) {    throw new IOException("ObjectIdentifier() -- Invalid format: " + e.toString(),e);  }}  }
class C{  private String detectName() throws NodeJsDebuggerException {  NodeJsDebugCommand<String> command=createCommand("process.title",new NodeJsOutputRegExpParser(PROCESS_TITLE_COMMAND_OUTPUT_PATTERN));  return doExecute(command);}  }
class C{  @Override public int hashCode(){  int result=29;  result=HashUtilities.hashCode(result,this.a);  result=HashUtilities.hashCode(result,this.b);  return result;}  }
class C{  public static <K,V>boolean putMapNotNullKeyAndValue(Map<K,V> map,K key,V value){  if (map == null || key == null || value == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  protected V createGet(K key){  if (key == null) {    throw new NullPointerException("key == null");  }  V mapValue;synchronized (this) {    mapValue=map.get(key);    if (mapValue != null) {      hitCount++;      return mapValue;    }    missCount++;  }  V createdValue=create(key);  if (createdValue == null) {    return null;  }synchronized (this) {    createCount++;    mapValue=map.put(key,createdValue);    if (mapValue != null) {      map.put(key,mapValue);    } else {      size+=safeSizeOf(key,createdValue);    }  }  if (mapValue != null) {    entryRemoved(false,key,createdValue,mapValue);    return mapValue;  } else {    trimToSize(maxSize);    return createdValue;  }}  }
class C{  public void start(ObjectImpl obj,String[] args,String iorFile,String naming){  ORB orb=initORB(args);  if (Debug.debugging("corbadetail")) {    listServices(orb);  }  try {    writeIOR(iorFile,obj);  } catch (  IOException ioe) {    Debug.error("CORBASupport caught IOException writing IOR file to " + iorFile);  }  setUpNamingService(naming,obj);  Debug.output(obj.toString() + " is ready.");}  }
class C{  public void unregisterNativeMethods(){  if (VM.VerifyAssertions)   VM._assert(isInitialized());  for (  RVMMethod m : declaredMethods) {    if (m.isNative()) {      NativeMethod nm=(NativeMethod)m;      nm.unregisterNativeSymbol();      m.replaceCompiledMethod(null);    }  }}  }
class C{  public PsiType toArrayType(){  return getComponentType().createArrayType(getAnnotations());}  }
class C{  @SneakyThrows public KeyStore createEmptyKeystore(){  KeyStore keyStore=KeyStore.getInstance("JKS");  keyStore.load(null,"".toCharArray());  return keyStore;}  }
class C{  public void testSkipString2JsonTransformation() throws Exception {  String val="{\"v\":\"my Value\",\"t\":1422559650154}";  String ret=content(F.asMap("cmd",GridRestCommand.CACHE_PUT.key(),"cacheName",LOCAL_CACHE,"key","a","val",URLEncoder.encode(val,CHARSET)));  JsonNode res=jsonResponse(ret);  assertEquals("Incorrect put response",true,res.asBoolean());  ret=content(F.asMap("cmd",GridRestCommand.CACHE_GET.key(),"cacheName",LOCAL_CACHE,"key","a"));  res=jsonResponse(ret);  assertEquals("Incorrect get response",val,res.asText());}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"StubClassesPermitted")).start();}  }
class C{  public void registerCommand(SubCommand meCommand){  commands.add(meCommand);}  }
class C{  public void onClick(View widget){  if (link.getClickListener() != null) {    link.getClickListener().onClick(link.getText());  }  super.onClick(widget);}  }
class C{  public BindableElementBridge(){}  }
class C{  public void testNamespaces() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo.bar",getClass().getMethod("zeroArgMethod"));  String source="foo.bar()";  Expression expr=JavascriptCompiler.compile(source,functions,getClass().getClassLoader());  assertEquals(5,expr.evaluate(0,null),DELTA);}  }
class C{  public boolean isSubscript(){  sync();  return subscript;}  }
class C{  public GasTank(int max){  maxGas=max;}  }
class C{  private BinaryResource createTemporaryResource(final String resourceId,final CacheKey key) throws IOException {  maybeEvictFilesInCacheDir();  return mStorageSupplier.get().createTemporary(resourceId,key);}  }
class C{  public static boolean isUseNativeTextInput(){  return useNativeTextInput;}  }
class C{  public int height(){  return height(root);}  }
class C{  public int hashCode(){  return id.hashCode() ^ (transport != null ? transport.hashCode() : 0);}  }
class C{  public MatrixReader(File file) throws FileNotFoundException {  this(new FileReader(file),-1);}  }
class C{  private String generateTidMultipart(){  return TWO_HYPENS + BOUNDARY_TAG + LINE_END+ "Content-Disposition: form-data; name=\"tid\""+ LINE_END+ "Content-Type: text/plain"+ LINE_END+ "Content-Length: "+ mTId.length()+ LINE_END+ LINE_END+ mTId+ LINE_END;}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  this.key.readFields(in);  this.value.readFields(in);}  }
class C{  public RequestHandle post(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public final Attribute attribute(int index){  return (Attribute)m_Attributes.elementAt(index);}  }
class C{  private boolean match(String s1,String s2){  if (s1 == null)   return s2 == null;  return s1.replace('\\','/').equals(s2.replace('\\','/'));}  }
class C{  private static int lf_S(int x,int s){  return (x >>> s) | (x << (32 - s));}  }
class C{  public Credentials withStoreOnlyToken(boolean storeOnlyToken){  this.storeOnlyToken=storeOnlyToken;  return this;}  }
class C{  private static String floatToString(float f,boolean asAPI){  String valS=String.valueOf(f);  return valS.endsWith(".0") ? valS.substring(0,valS.length() - 2) : (valS + (asAPI ? "f" : ""));}  }
class C{  public static void sort(int[] a){  doSort(a,0,a.length - 1);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_TYPE___TRACER_TYPE_1:    return getTracerType_1();case UmplePackage.TRACE_TYPE___ANONYMOUS_TRACE_TYPE_11:  return getAnonymous_traceType_1_1();case UmplePackage.TRACE_TYPE___ANONYMOUS_TRACE_TYPE_21:return getAnonymous_traceType_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void main(String[] args){  StopWatch stopWatch=new StopWatch();  int[] randomArray=getArray();  stopWatch.start();  selectionSort(randomArray);  stopWatch.stop();  System.out.println("The execution time of sorting 100,000 " + "numbers using selection sort: " + stopWatch.getElapsedTime() + " milliseconds");}  }
class C{  public IgniteBiInClosure<K,V> evictionListener(){  return lsnr;}  }
class C{  protected void doAutoImportsAndIncludes(Environment env) throws TemplateException, IOException {  if (parent != null)   parent.doAutoImportsAndIncludes(env);}  }
class C{  @Override @Intrinsic @Uninterruptible public int length(){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  return data.length;}  }
class C{  protected void cdata(char ch[],int start,final int length) throws org.xml.sax.SAXException {  try {    final int old_start=start;    if (m_elemContext.m_startTagOpen) {      closeStartTag();      m_elemContext.m_startTagOpen=false;    }    m_ispreserve=true;    if (shouldIndent())     indent();    boolean writeCDataBrackets=(((length >= 1) && escapingNotNeeded(ch[start])));    if (writeCDataBrackets && !m_cdataTagOpen) {      m_writer.write(CDATA_DELIMITER_OPEN);      m_cdataTagOpen=true;    }    if (isEscapingDisabled()) {      charactersRaw(ch,start,length);    } else     writeNormalizedChars(ch,start,length,true,m_lineSepUse);    if (writeCDataBrackets) {      if (ch[start + length - 1] == ']')       closeCDATA();    }    if (m_tracer != null)     super.fireCDATAEvent(ch,old_start,length);  } catch (  IOException ioe) {    throw new org.xml.sax.SAXException(Utils.messages.createMessage(MsgKey.ER_OIERROR,null),ioe);  }}  }
class C{  public boolean isUserSearchByDn(){  return m_userSearchByDn;}  }
class C{  public Comparator<Point2D> atan2Order(){  return new Atan2Order();}  }
class C{  protected ProxyGraphicsNode buildEndMarkerProxy(){  ExtendedPathIterator iter=getExtShape().getExtendedPathIterator();  int nPoints=0;  if (iter.isDone()) {    return null;  }  double[] coords=new double[7];  double[] moveTo=new double[2];  int segType=0;  segType=iter.currentSegment(coords);  if (segType != ExtendedPathIterator.SEG_MOVETO) {    return null;  }  nPoints++;  moveTo[0]=coords[0];  moveTo[1]=coords[1];  iter.next();  double[] lastButOne=new double[7];  double[] last={coords[0],coords[1],coords[2],coords[3],coords[4],coords[5],coords[6]};  double[] tmp=null;  int lastSegType=segType;  int lastButOneSegType=0;  while (!iter.isDone()) {    tmp=lastButOne;    lastButOne=last;    last=tmp;    lastButOneSegType=lastSegType;    lastSegType=iter.currentSegment(last);    if (lastSegType == PathIterator.SEG_MOVETO) {      moveTo[0]=last[0];      moveTo[1]=last[1];    } else     if (lastSegType == PathIterator.SEG_CLOSE) {      lastSegType=PathIterator.SEG_LINETO;      last[0]=moveTo[0];      last[1]=moveTo[1];    }    iter.next();    nPoints++;  }  if (nPoints < 2) {    return null;  }  Point2D markerPosition=getSegmentTerminatingPoint(last,lastSegType);  double rotation=endMarker.getOrient();  if (Double.isNaN(rotation)) {    rotation=computeRotation(lastButOne,lastButOneSegType,last,lastSegType,null,0);  }  AffineTransform markerTxf=computeMarkerTransform(endMarker,markerPosition,rotation);  ProxyGraphicsNode gn=new ProxyGraphicsNode();  gn.setSource(endMarker.getMarkerNode());  gn.setTransform(markerTxf);  return gn;}  }
class C{  public ScoreDoc(int doc,float score,int shardIndex){  this.doc=doc;  this.score=score;  this.shardIndex=shardIndex;}  }
class C{  public KXRecord(Name name,int dclass,long ttl,int preference,Name target){  super(name,Type.KX,dclass,ttl,preference,"preference",target,"target");}  }
class C{  private static void determineFirstDigit(StringBuilder resultString,int lgPatternFound) throws NotFoundException {  for (int d=0; d < 10; d++) {    if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {      resultString.insert(0,(char)('0' + d));      return;    }  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public void addWeekyears(final int weekyears){  setMillis(getChronology().weekyears().add(getMillis(),weekyears));}  }
class C{  @Override public T findById(final ID id,final boolean lock){  return persistenceService.findById(id,lock);}  }
class C{  public WebSocket addListener(WebSocketListener listener){  mListenerManager.addListener(listener);  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.EXECUTION_SCOPE__STATE_VECTOR:    return basicSetStateVector(null,msgs);case SexecPackage.EXECUTION_SCOPE__SUB_SCOPES:  return ((InternalEList<?>)getSubScopes()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE:return basicSetSuperScope(null,msgs);case SexecPackage.EXECUTION_SCOPE__ENTER_SEQUENCES:return ((InternalEList<?>)getEnterSequences()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_SCOPE__EXIT_SEQUENCE:return basicSetExitSequence(null,msgs);case SexecPackage.EXECUTION_SCOPE__INIT_SEQUENCE:return basicSetInitSequence(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public int parse(char[] buf,int start,int end,Object data){  if ((start < end) && test(buf[start])) {    return 1;  }  return NO_MATCH;}  }
class C{  public static TextArea create(){  return create(20);}  }
class C{  public synchronized void resizeFile(int newsize) throws IOException {  if (!writable) {    throw new IOException("File is not writeable!");  }  this.numrecs=newsize;  file.seek(HEADER_POS_SIZE);  file.writeInt(numrecs);  file.setLength(indexToFileposition(numrecs));  mapArray();}  }
class C{  public Builder addVarint(final long value){  if (result.varint == null) {    result.varint=new ArrayList<Long>();  }  result.varint.add(value);  return this;}  }
class C{  private void handleReject(final HttpServerRequest request){  request.response().setStatusCode(StatusCode.SERVICE_UNAVAILABLE.getStatusCode());  request.response().setStatusMessage(StatusCode.SERVICE_UNAVAILABLE.getStatusMessage());  request.response().end();}  }
class C{  public void putObject(String bucketName,String objectName,String fileName) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException, InvalidArgumentException, InsufficientDataException {  if (fileName == null || "".equals(fileName)) {    throw new InvalidArgumentException("empty file name is not allowed");  }  Path filePath=Paths.get(fileName);  if (!Files.isRegularFile(filePath)) {    throw new InvalidArgumentException("'" + fileName + "': not a regular file");  }  String contentType=Files.probeContentType(filePath);  long size=Files.size(filePath);  RandomAccessFile file=new RandomAccessFile(filePath.toFile(),"r");  try {    putObject(bucketName,objectName,contentType,size,file);  }  finally {    file.close();  }}  }
class C{  public void testGetEmptyDriverProperties(){  String propertyString="";  String driverPropertyString=DatasourcePropertySet.CONNECTION_PROPERTIES + "=" + propertyString;  DataSource ds=dataSourceConverter.fromPropertyString(driverPropertyString);  assertEquals(0,ds.getConnectionProperties().size());}  }
class C{  public GoogleBaseService(String applicationName,String protocol,String domainName){  super(GOOGLE_BASE_SERVICE,applicationName,protocol,domainName);  this.application=applicationName;  addExtensions();}  }
class C{  @SuppressWarnings("rawtypes") public Class loadClass(String name) throws ClassNotFoundException {  try {    return loadClass(name,false);  } catch (  NoClassDefFoundError e) {    throw new ClassNotFoundException(name);  }}  }
class C{  public MutableKeyBuffer(final int capacity,final IRaba src){  if (src == null)   throw new IllegalArgumentException();  if (capacity < src.capacity())   throw new IllegalArgumentException();  nkeys=src.size();  assert nkeys >= 0;  keys=new byte[capacity][];  int i=0;  for (  byte[] a : src) {    keys[i++]=a;  }}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("process") @Valid Process process,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    processDAO.securityCheck(process.getParentProcessId(),principal.getName(),WRITE);    com.wipro.ats.bdre.md.dao.jpa.Process insertDaoProcess=new com.wipro.ats.bdre.md.dao.jpa.Process();    com.wipro.ats.bdre.md.dao.jpa.ProcessType daoProcessType=processTypeDAO.get(process.getProcessTypeId());    insertDaoProcess.setProcessType(daoProcessType);    LOGGER.info("process type:" + daoProcessType.getParentProcessTypeId());    if (process.getWorkflowId() != null) {      WorkflowType daoWorkflowType=new WorkflowType();      daoWorkflowType.setWorkflowId(process.getWorkflowId());      insertDaoProcess.setWorkflowType(daoWorkflowType);    }    BusDomain daoBusDomain=new BusDomain();    daoBusDomain.setBusDomainId(process.getBusDomainId());    insertDaoProcess.setBusDomain(daoBusDomain);    if (process.getProcessTemplateId() != null) {      ProcessTemplate daoProcessTemplate=new ProcessTemplate();      daoProcessTemplate.setProcessTemplateId(process.getProcessTemplateId());      insertDaoProcess.setProcessTemplate(daoProcessTemplate);    }    if (process.getParentProcessId() != null) {      com.wipro.ats.bdre.md.dao.jpa.Process parentProcess=processDAO.get(process.getParentProcessId());      insertDaoProcess.setProcess(parentProcess);      LOGGER.info("Parent process Id:" + parentProcess.getProcessId());    }    insertDaoProcess.setDescription(process.getDescription());    insertDaoProcess.setAddTs(DateConverter.stringToDate(process.getTableAddTS()));    insertDaoProcess.setProcessName(process.getProcessName());    if (process.getCanRecover() == null)     insertDaoProcess.setCanRecover(true); else     insertDaoProcess.setCanRecover(process.getCanRecover());    insertDaoProcess.setEnqueuingProcessId(process.getEnqProcessId());    if (process.getBatchPattern() != null) {      if (process.getBatchPattern().isEmpty()) {        insertDaoProcess.setBatchCutPattern(null);      }      insertDaoProcess.setBatchCutPattern(process.getBatchPattern());    }    insertDaoProcess.setNextProcessId(process.getNextProcessIds());    if (process.getDeleteFlag() == null)     insertDaoProcess.setDeleteFlag(false); else     insertDaoProcess.setDeleteFlag(process.getDeleteFlag());    insertDaoProcess.setEditTs(DateConverter.stringToDate(process.getTableEditTS()));    LOGGER.info("inserting subprocess");    Integer processId=processDAO.insert(insertDaoProcess);    process.setProcessId(processId);    process.setTableAddTS(DateConverter.dateToString(insertDaoProcess.getAddTs()));    process.setTableEditTS(DateConverter.dateToString(insertDaoProcess.getEditTs()));    restWrapper=new RestWrapper(process,RestWrapper.OK);    LOGGER.info("Record with ID:" + process.getProcessId() + " inserted in Process by User:"+ principal.getName()+ process);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  final String fastaFilePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.fastaFileNameTemplate);  final String hmmer3ResultsFilePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.hmmer3ResultsFileNameTemplate);  final String binaryOutputFilePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.binaryOutputFileNameTemplate);  List<String> command=new ArrayList<String>();  command.add(this.perlCommand);  command.add(this.fullPathToSuperFamilyAss3PerlScript);  command.addAll(this.getBinarySwitchesAsList());  command.add("-s");  command.add(this.fullPathToSelfHitsFile);  command.add("-r");  command.add(this.fullPathToClaFile);  command.add("-m");  command.add(this.fullPathToModelTabFile);  command.add("-p");  command.add(this.fullPathToPDBJ95DFile);  command.add(fastaFilePathName);  command.add(hmmer3ResultsFilePathName);  command.add(binaryOutputFilePathName);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(command.toString());  }  return command;}  }
class C{  public static SatelliteBase createFromNBT(NBTTagCompound nbt){  SatelliteBase satellite=getSatallite(nbt.getString("dataType"));  satellite.readFromNBT(nbt);  return satellite;}  }
class C{  public void timesEquals(double f){  timesEquals(x,f);}  }
class C{  public Builder xmlFormatter(XmlFormatter xmlFormatter){  this.xmlFormatter=xmlFormatter;  return this;}  }
class C{  private void initializeDiscordBot(){  try {    if (bot != null) {      bot.shutdown();    }    String botToken=appProperties.getProperty("bot_token");    bot=new JDABuilder().setAudioEnabled(true).setAutoReconnect(true).setBotToken(botToken).buildBlocking();    if (Boolean.valueOf(appProperties.getProperty("respond_to_chat_commands"))) {      String commandCharacter=appProperties.getProperty("command_character");      String messageSizeLimit=appProperties.getProperty("message_size_limit");      ChatSoundBoardListener chatListener=new ChatSoundBoardListener(this,commandCharacter,messageSizeLimit);      this.addBotListener(chatListener);      EntranceSoundBoardListener entranceListener=new EntranceSoundBoardListener(this);      this.addBotListener(entranceListener);    }    String allowedUsersString=appProperties.getProperty("allowedUsers");    if (allowedUsersString != null) {      String[] allowedUsersArray=allowedUsersString.split(",");      if (allowedUsersArray.length > 0) {        allowedUsers=Arrays.asList(allowedUsersArray);      }    }    String bannedUsersString=appProperties.getProperty("bannedUsers");    if (bannedUsersString != null) {      String[] bannedUsersArray=bannedUsersString.split(",");      if (bannedUsersArray.length > 0) {        bannedUsers=Arrays.asList(bannedUsersArray);      }    }    File avatarFile=new File(System.getProperty("user.dir") + "/avatar.jpg");    AvatarUtil.Avatar avatar=AvatarUtil.getAvatar(avatarFile);    bot.getAccountManager().setAvatar(avatar).update();  } catch (  IllegalArgumentException e) {    LOG.warn("The config was not populated. Please enter an email and password.");  }catch (  LoginException e) {    LOG.warn("The provided bot token was incorrect. Please provide valid details.");  }catch (  InterruptedException e) {    LOG.fatal("Login Interrupted.");  }catch (  UnsupportedEncodingException e) {    LOG.warn("Could not update avatar with provided file.");  }}  }
class C{  public void testQueue(String prod_broker_url,String cons_broker_url) throws Exception {  int num_msg;  Connection conn;  Session sess;  String queue_name;  Destination cons_dest;  num_msg=5;  LOG.info("TESTING QUEUES " + prod_broker_url + " -> "+ cons_broker_url+ " ("+ num_msg+ " messages)");  conn=createConnection(cons_broker_url);  conn.start();  sess=conn.createSession(false,Session.AUTO_ACKNOWLEDGE);  queue_name="topotest2.perm.queue";  LOG.trace("Removing existing Queue");  removeQueue(conn,queue_name);  LOG.trace("Creating Queue, " + queue_name);  cons_dest=sess.createQueue(queue_name);  testOneDest(conn,sess,cons_dest,num_msg);  removeQueue(conn,queue_name);  sess.close();  conn.close();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_BODY__PATTERN:    setPattern((Pattern)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public TechnicalServiceMultiSubscriptions(){}  }
class C{  public static NumericEntityEscaper above(final int codepoint){  return outsideOf(0,codepoint);}  }
class C{  protected void busquedaElementosExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de busquedaElmentosExecuteLogic");  PrecondicionesBusquedaFondosGenerica precondiciones=(PrecondicionesBusquedaFondosGenerica)getFromTemporalSession(request,FondosConstants.PRECONDICIONES_BUSQUEDA_KEY);  BusquedaElementosForm formulario=(BusquedaElementosForm)form;  formulario.setPostBack(Constants.TRUE_STRING);  BusquedaElementosForm busquedaElementosForm=(BusquedaElementosForm)form;  Busqueda busqueda=(Busqueda)getFromTemporalSession(request,FondosConstants.CFG_BUSQUEDA_KEY);  ActionErrors errores=BusquedasHelper.validateCampos(mapping,request,busqueda,busquedaElementosForm);  if ((errores == null) || errores.isEmpty()) {    logger.info("Formulario validado");    PageInfo pageInfo=new PageInfo(request,10,"codReferencia");    pageInfo.setDefautMaxNumItems();    BusquedaElementosVO busquedaElementosVO=BusquedasHelper.getBusquedaElementosVO(busqueda,null,busquedaElementosForm);    busquedaElementosVO.setPageInfo(pageInfo);    busquedaElementosVO.setServiceClient(ServiceClient.create(getAppUser(request)));    try {      List listaElementos=getGestionDescripcionBI(request).searchElementosCuadroClasificacion(busquedaElementosVO);      request.setAttribute(DescripcionConstants.ELEMENTOS_KEY,listaElementos);      setReturnActionFordward(request,mapping.findForward("ver_elementos"));    } catch (    TooManyResultsException e) {      obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_TOO_MANY_RESULTS,new Object[]{new Integer(e.getCount()),new Integer(e.getMaxNumResults())}));      BusquedasHelper.loadListasBusqueda(busqueda,busquedaElementosForm,request,precondiciones);      setReturnActionFordward(request,mapping.findForward("form_busqueda_elementos"));    }  } else {    logger.info("Formulario inv\u00E1lido");    obtenerErrores(request,true).add(errores);    BusquedasHelper.loadListasBusqueda(busqueda,busquedaElementosForm,request,precondiciones);    setReturnActionFordward(request,mapping.findForward("form_busqueda_elementos"));  }}  }
class C{  public static int convertPxToSp(int pxSize){  return Math.round((float)pxSize * getDisplayDensity4Fonts());}  }
class C{  private Base64(){}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  public void testPosPosSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-2,-3,-4,-4,-1,-66,95,47,123,59,-13,39,30,-97};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void clear(){  getMeasures().clear();  mPrefixes.get().clear();  mInstance.mOrderedMeasures.clear();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.sectionPaint=SerialUtilities.readPaint(stream);  this.baseSectionPaint=SerialUtilities.readPaint(stream);  this.sectionOutlinePaint=SerialUtilities.readPaint(stream);  this.baseSectionOutlinePaint=SerialUtilities.readPaint(stream);  this.sectionOutlineStroke=SerialUtilities.readStroke(stream);  this.baseSectionOutlineStroke=SerialUtilities.readStroke(stream);  this.shadowPaint=SerialUtilities.readPaint(stream);  this.labelPaint=SerialUtilities.readPaint(stream);  this.labelBackgroundPaint=SerialUtilities.readPaint(stream);  this.labelOutlinePaint=SerialUtilities.readPaint(stream);  this.labelOutlineStroke=SerialUtilities.readStroke(stream);  this.labelShadowPaint=SerialUtilities.readPaint(stream);  this.labelLinkPaint=SerialUtilities.readPaint(stream);  this.labelLinkStroke=SerialUtilities.readStroke(stream);  this.legendItemShape=SerialUtilities.readShape(stream);}  }
class C{  private Document parseSpeechStrategy(InputStream inputStream){  try {    final DocumentBuilder builder=getDocumentBuilder();    return builder.parse(inputStream);  } catch (  Exception e) {    LogUtils.log(EventSpeechRuleProcessor.class,Log.ERROR,"Could not open speechstrategy xml file\n%s",e.toString());  }  return null;}  }
class C{  public static String resolvePathname(final String pathname){  return (StringUtils.isBlank(pathname) ? pathname : IOUtils.tryGetCanonicalPathElseGetAbsolutePath(new File(pathname)));}  }
class C{  public Cursor findRegionByBeacon(final Beacon beacon){  mParamsArg[0]=beacon.getUuid().toString();  mParamsArg[1]=String.valueOf(beacon.getMajor());  mParamsArg[2]=String.valueOf(beacon.getMinor());  return mDatabase.query(Tables.REGIONS,BEACON_PROJECTION,BEACON_PARAMS_SELECTION,mParamsArg,null,null,null);}  }
class C{  public Optional<String> endpoint(){  return Optional.ofNullable(endpointArg);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  protected void emitText(){  if (textLen != 0) {    visitor.text(textWrap());  }  textLen=0;}  }
class C{  public void removeActionListener(ActionListener l){  listenerList.remove(ActionListener.class,l);}  }
class C{  public void moveUser(int userId,int deptDest,String entidad) throws Exception {  boolean commit=false;  boolean inTrans=false;  UsersTable tbl=new UsersTable();  DbConnection dbConn=new DbConnection();  if (_logger.isDebugEnabled())   _logger.debug("moveUser");  try {    dbConn.open(DBSessionManager.getSession(entidad));    dbConn.beginTransaction();    inTrans=true;    DbUpdateFns.updateLongInteger(dbConn,tbl.getBaseTableName(),tbl.getDeptIdUserColumnName(),deptDest,tbl.getLoadBaseQual(userId));    commit=true;  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    if (inTrans)     dbConn.endTransaction(commit);    dbConn.close();  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WorkflowServlet.init");}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  @Override protected void initialize(){  m_MenuBar=null;  m_Tabs=new ArrayList<>();  m_FileChooser=new ExperimentFileChooser();  m_Experiment=null;  m_AdditionalMenuItems=new HashMap<>();}  }
class C{  public static void copySpanAnnotation(AnnotationFS aOldFs,JCas aJCas){  Feature[] features=getAllFeatures(aOldFs);  Type type=aOldFs.getType();  AnnotationFS newFs=aJCas.getCas().createAnnotation(type,aOldFs.getBegin(),aOldFs.getEnd());  for (  Feature f : features) {    if (isLinkOrBasicFeatures(aOldFs,f)) {      continue;    }    setFeatureValue(newFs,f,getFeatureValue(aOldFs,f));  }  if (type.getName().equals(POS.class.getName())) {    updateToken(newFs);  }  aJCas.addFsToIndexes(newFs);}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == REQUEST_READ_CONTACTS) {    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      populateAutoComplete();    }  }}  }
class C{  public SidedPlane(Vector p,Vector v,double D){  super(v,D);  sigNum=Math.signum(evaluate(p));  if (sigNum == 0.0)   throw new IllegalArgumentException("Cannot determine sidedness because check point is on plane.");}  }
class C{  public static Relation<String> guessLabelRepresentation(Database database) throws NoSupportedDataTypeException {  try {    Relation<? extends ClassLabel> classrep=database.getRelation(TypeUtil.CLASSLABEL);    if (classrep != null) {      return new ConvertToStringView(classrep);    }  } catch (  NoSupportedDataTypeException e) {  }  try {    Relation<? extends LabelList> labelsrep=database.getRelation(TypeUtil.LABELLIST);    if (labelsrep != null) {      return new ConvertToStringView(labelsrep);    }  } catch (  NoSupportedDataTypeException e) {  }  try {    Relation<String> stringrep=database.getRelation(TypeUtil.STRING);    if (stringrep != null) {      return stringrep;    }  } catch (  NoSupportedDataTypeException e) {  }  throw new NoSupportedDataTypeException("No label-like representation was found.");}  }
class C{  protected boolean startProcess(){  log.fine(m_pi.toString());  boolean started=false;  boolean clientOnly=false;  if (!m_pi.getClassName().toLowerCase().startsWith(MRule.SCRIPT_PREFIX)) {    try {      Class<?> processClass=Class.forName(m_pi.getClassName());      if (ClientProcess.class.isAssignableFrom(processClass))       clientOnly=true;    } catch (    Exception e) {    }  }  if (m_IsServerProcess && !clientOnly) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        m_pi=server.process(Env.getRemoteCallCtx(Env.getCtx()),m_pi);        log.finest("server => " + m_pi);        started=true;      }    } catch (    UndeclaredThrowableException ex) {      Throwable cause=ex.getCause();      if (cause != null) {        if (cause instanceof InvalidClassException)         log.log(Level.SEVERE,"Version Server <> Client: " + cause.toString() + " - "+ m_pi,ex); else         log.log(Level.SEVERE,"AppsServer error(1b): " + cause.toString() + " - "+ m_pi,ex);      } else       log.log(Level.SEVERE," AppsServer error(1) - " + m_pi,ex);      started=false;    }catch (    Exception ex) {      Throwable cause=ex.getCause();      if (cause == null)       cause=ex;      log.log(Level.SEVERE,"AppsServer error - " + m_pi,cause);      started=false;    }  }  if (!started && (!m_IsServerProcess || clientOnly)) {    if (m_pi.getClassName().toLowerCase().startsWith(MRule.SCRIPT_PREFIX)) {      return ProcessUtil.startScriptProcess(Env.getCtx(),m_pi,m_trx);    } else {      return ProcessUtil.startJavaProcess(Env.getCtx(),m_pi,m_trx);    }  }  return !m_pi.isError();}  }
class C{  public static String removeLineEnds(String text){  return text.replaceAll("[\r\n]+"," ").trim();}  }
class C{  public CategoryInfo browseCategory(String path){  return client.getURI(CategoryInfo.class,catalogPath(path));}  }
class C{  private Object readResolve() throws ObjectStreamException {  return STREAMS;}  }
class C{  private void advanceIfCurrentPieceFullyRead(){  if (currentPiece != null && currentPieceIndex == currentPieceSize) {    currentPieceOffsetInRope+=currentPieceSize;    currentPieceIndex=0;    if (pieceIterator.hasNext()) {      currentPiece=pieceIterator.next();      currentPieceSize=currentPiece.size();    } else {      currentPiece=null;      currentPieceSize=0;    }  }}  }
class C{  public IssueMatcher at(URI expectedURISuffix,int expectedLineNumber,int expectedColumn){  return lineNumber(expectedLineNumber).column(expectedColumn).uri().endsWith(expectedURISuffix);}  }
class C{  public SolrQuery addNumericRangeFacet(String field,Number start,Number end,Number gap){  add(FacetParams.FACET_RANGE,field);  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_START),start.toString());  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_END),end.toString());  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_GAP),gap.toString());  this.set(FacetParams.FACET,true);  return this;}  }
class C{  private WebResourceStatistics computeAuditStatisticsFromPrList(WebResourceStatistics wrStatistics){  int nbOfPassed=0;  int nbOfFailed=0;  int nbOfNmi=0;  int nbOfNa=0;  int nbOfDetected=0;  int nbOfSuspected=0;  int nbOfNt=0;  for (  ProcessResult pr : netResultList) {    TestSolution prResult=(TestSolution)pr.getValue();switch (prResult) {case PASSED:      nbOfPassed++;    break;case FAILED:  nbOfFailed++;break;case NOT_APPLICABLE:nbOfNa++;break;case NEED_MORE_INFO:case DETECTED:case SUSPECTED_FAILED:case SUSPECTED_PASSED:nbOfNmi++;break;case NOT_TESTED:nbOfNt++;break;}addResultToCriterionCounterMap(prResult,pr.getTest().getCriterion());addResultToThemeCounterMap(prResult,pr.getTest().getCriterion().getTheme());}if (nbOfFailed + nbOfNa + nbOfNmi+ nbOfPassed+ nbOfDetected+ nbOfSuspected == 0) {nbOfFailed=nbOfNa=nbOfNmi=nbOfPassed=nbOfSuspected=nbOfDetected=-1;}wrStatistics.setNbOfFailed(nbOfFailed);wrStatistics.setNbOfInvalidTest(nbOfFailed);wrStatistics.setNbOfPassed(nbOfPassed);wrStatistics.setNbOfNmi(nbOfNmi);wrStatistics.setNbOfNa(nbOfNa);wrStatistics.setNbOfDetected(nbOfDetected);wrStatistics.setNbOfSuspected(nbOfSuspected);wrStatistics.setNbOfNotTested(nbOfNt);setWeightedResult(wrStatistics);for (CriterionStatistics cs : csMap.values()) {computeCriterionResult(cs);wrStatistics.addCriterionStatistics(cs);}for (ThemeStatistics ts : tsMap.values()) {wrStatistics.addThemeStatistics(ts);}wrStatistics.setAudit(audit);return wrStatistics;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.601 -0500",hash_original_method="7B7D2D5D3E7E0D062624D3006A76AABE",hash_generated_method="9E23FA9A1D1D853AED0FA4ADDB287F29") public long insertStartSyncEvent(Account accountName,String authorityName,long now,int source){  long id;synchronized (mAuthorities) {    if (Log.isLoggable(TAG,Log.VERBOSE)) {      Log.v(TAG,"insertStartSyncEvent: account=" + accountName + " auth="+ authorityName+ " source="+ source);    }    AuthorityInfo authority=getAuthorityLocked(accountName,authorityName,"insertStartSyncEvent");    if (authority == null) {      return -1;    }    SyncHistoryItem item=new SyncHistoryItem();    item.authorityId=authority.ident;    item.historyId=mNextHistoryId++;    if (mNextHistoryId < 0)     mNextHistoryId=0;    item.eventTime=now;    item.source=source;    item.event=EVENT_START;    mSyncHistory.add(0,item);    while (mSyncHistory.size() > MAX_HISTORY) {      mSyncHistory.remove(mSyncHistory.size() - 1);    }    id=item.historyId;    if (Log.isLoggable(TAG,Log.VERBOSE))     Log.v(TAG,"returning historyId " + id);  }  reportChange(ContentResolver.SYNC_OBSERVER_TYPE_STATUS);  return id;}  }
class C{  public void background(int rgb){  colorCalc(rgb);  backgroundFromCalc();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.198 -0500",hash_original_method="0248E7E94C5A5A48B7EBA8F2086A381D",hash_generated_method="EB7A281BBFE230BF86988ABBE326F73F") public int help() throws IOException {  return sendCommand(NNTPCommand.HELP);}  }
class C{  public void test() throws Exception {  testSameStructure();  testValid();  testExpectedResult();}  }
class C{  private boolean isTemporal(int type){switch (type) {case java.sql.Types.DATE:case java.sql.Types.TIME:case java.sql.Types.TIMESTAMP:    return true;default :  return false;}}  }
class C{  public double cdf(double x){  return Probability.normal(mean,variance,x);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public InvalidValueException(String message){  super(message);}  }
class C{  public NodeTest(int whatToShow){  initNodeTest(whatToShow);}  }
class C{  static AttrAck createFromString(final String str) throws BOSHException {  if (str == null) {    return null;  } else {    return new AttrAck(str);  }}  }
class C{  public static RecipeFragment newInstance(Recipe recipe,int sectionNumber){  RecipeFragment fragment=new RecipeFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public TitledBorder(String title){  this(null,title,LEADING,DEFAULT_POSITION,null,null);}  }
class C{  public FastArrayList(){  super();  this.elementData=EMPTY_ELEMENTDATA;}  }
class C{  public String toURI(){  CharArrayBuffer buffer=new CharArrayBuffer(32);  buffer.append(this.schemeName);  buffer.append("://");  buffer.append(this.hostname);  if (this.port != -1) {    buffer.append(':');    buffer.append(Integer.toString(this.port));  }  return buffer.toString();}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);  File root;  if (env.acceptsProfiles(Constants.SPRING_PROFILE_PRODUCTION)) {    root=new File("build/www/");  } else {    root=new File("src/main/webapp/");  }  if (root.exists() && root.isDirectory()) {    container.setDocumentRoot(root);  }}  }
class C{  public static boolean isLogged(int AD_Table_ID){  if (s_changeLog == null || s_changeLog.length == 0)   fillChangeLog();  int index=Arrays.binarySearch(s_changeLog,AD_Table_ID);  return index >= 0;}  }
class C{  protected String rebuildSchemeSpecificPart(){  StringBuffer buffer=new StringBuffer();  if (opaque == false && (host != null || port != -1)) {    buffer.append(AUTHORITY_MARKER);    if (userInfo != null) {      buffer.append(getRawUserInfo() + USERINFO_SEPARATOR);    }    if (host != null) {      buffer.append(getHost());    }    if (port != -1) {      buffer.append(PORT_SEPARATOR);      buffer.append(getPort());    }  }  if (path != null) {    buffer.append(getRawPath());  }  if (query != null) {    if (querySeparator == SOCKET_QUERY_SEPARATOR) {      buffer.append(querySeparator + getRawQuery().replace(QUERY_SEPARATOR,SOCKET_QUERY_SEPARATOR));    } else {      buffer.append(QUERY_MARKER + getRawQuery());    }  }  return buffer.toString();}  }
class C{  @Override public void put(String name,short value){  emulatedFields.put(name,value);}  }
class C{  private void addObjectPermissions(Map<String,Set<ObjectPermission.Type>> permissions,ObjectPermissionSet permSet) throws GuacamoleException {  for (  ObjectPermission permission : permSet.getPermissions()) {    String identifier=permission.getObjectIdentifier();    Set<ObjectPermission.Type> objectPermissions=permissions.get(identifier);    if (objectPermissions == null)     permissions.put(identifier,EnumSet.of(permission.getType())); else     objectPermissions.add(permission.getType());  }}  }
class C{  private boolean hasDeprecatedAnnotation(List<JCAnnotation> annotations){  for (List<JCAnnotation> al=annotations; !al.isEmpty(); al=al.tail) {    JCAnnotation a=al.head;    if (a.annotationType.type == syms.deprecatedType && a.args.isEmpty())     return true;  }  return false;}  }
class C{  @SideEffectFree public void logp(Level level,@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable String msg,@Nullable Object param1){  throw new RuntimeException();}  }
class C{  public int length(){  return entries.length();}  }
class C{  private static SqlNode pushDownNotForIn(SqlNode sqlNode){  if ((sqlNode instanceof SqlCall) && containsInOperator(sqlNode)) {    SqlCall sqlCall=(SqlCall)sqlNode;    if ((sqlCall.getOperator() == SqlStdOperatorTable.AND) || (sqlCall.getOperator() == SqlStdOperatorTable.OR)) {      SqlNode[] sqlOperands=((SqlBasicCall)sqlCall).operands;      for (int i=0; i < sqlOperands.length; i++) {        sqlOperands[i]=pushDownNotForIn(sqlOperands[i]);      }      return sqlNode;    } else     if (sqlCall.getOperator() == SqlStdOperatorTable.NOT) {      SqlNode childNode=sqlCall.operand(0);      assert childNode instanceof SqlCall;      SqlBasicCall childSqlCall=(SqlBasicCall)childNode;      if (childSqlCall.getOperator() == SqlStdOperatorTable.AND) {        SqlNode[] andOperands=childSqlCall.getOperands();        SqlNode[] orOperands=new SqlNode[andOperands.length];        for (int i=0; i < orOperands.length; i++) {          orOperands[i]=SqlStdOperatorTable.NOT.createCall(SqlParserPos.ZERO,andOperands[i]);        }        for (int i=0; i < orOperands.length; i++) {          orOperands[i]=pushDownNotForIn(orOperands[i]);        }        return SqlStdOperatorTable.OR.createCall(SqlParserPos.ZERO,orOperands[0],orOperands[1]);      } else       if (childSqlCall.getOperator() == SqlStdOperatorTable.OR) {        SqlNode[] orOperands=childSqlCall.getOperands();        SqlNode[] andOperands=new SqlNode[orOperands.length];        for (int i=0; i < andOperands.length; i++) {          andOperands[i]=SqlStdOperatorTable.NOT.createCall(SqlParserPos.ZERO,orOperands[i]);        }        for (int i=0; i < andOperands.length; i++) {          andOperands[i]=pushDownNotForIn(andOperands[i]);        }        return SqlStdOperatorTable.AND.createCall(SqlParserPos.ZERO,andOperands[0],andOperands[1]);      } else       if (childSqlCall.getOperator() == SqlStdOperatorTable.NOT) {        SqlNode[] notOperands=childSqlCall.getOperands();        assert notOperands.length == 1;        return pushDownNotForIn(notOperands[0]);      } else       if (childSqlCall.getOperator() instanceof SqlInOperator) {        SqlNode[] inOperands=childSqlCall.getOperands();        SqlInOperator inOp=(SqlInOperator)childSqlCall.getOperator();        if (inOp.isNotIn()) {          return SqlStdOperatorTable.IN.createCall(SqlParserPos.ZERO,inOperands[0],inOperands[1]);        } else {          return SqlStdOperatorTable.NOT_IN.createCall(SqlParserPos.ZERO,inOperands[0],inOperands[1]);        }      } else {        return sqlNode;      }    } else {      return sqlNode;    }  } else {    return sqlNode;  }}  }
class C{  protected void portWarn(Exception e){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:00.798 -0400",hash_original_method="155F0203C202F1398DFC75532D56E514",hash_generated_method="5A56BE707FE15F6C15227B28F36F194C") public AtCommandResult(String response){  this(OK);  addResponse(response);}  }
class C{  protected void retrieveExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de retrieveExecuteLogic");  saveCurrentInvocation(KeysClientsInvocations.DESCRIPCION_LISTAS_DESCRIPTORAS_VIEW,request);  String id=request.getParameter(Constants.ID);  logger.info("Id lista descriptora: " + id);  if (StringUtils.isNotBlank(id)) {    GestionDescripcionBI descripcionBI=getGestionDescripcionBI(request);    ((ListaDescriptoraForm)form).set(descripcionBI.getListaDescriptoraExt(id));    try {      setInTemporalSession(request,DescripcionConstants.DESCRIPTORES_LISTA_KEY,descripcionBI.getDescriptoresExt(id,new PageInfo(request,"nombre")));    } catch (    TooManyResultsException e) {    }  }  ActionErrors errores=(ActionErrors)getFromTemporalSession(request,DescripcionConstants.ERRORES_KEY);  if ((errores != null) && !errores.isEmpty()) {    obtenerErrores(request,true).add(errores);    removeInTemporalSession(request,DescripcionConstants.ERRORES_KEY);  }  setReturnActionFordward(request,mapping.findForward("ver_lista_descriptora"));}  }
class C{  protected RegionFactory(GemFireCacheImpl cache){  this.cache=cache;  this.attrsFactory=new AttributesFactory<K,V>();}  }
class C{  public Trigger basicGetTrigger(){  return trigger;}  }
class C{  private static byte[] toByteArray(int keyHashCode,int machineIdentifier,int counter){  byte[] bytes=new byte[8];  bytes[0]=ByteUtil.int1(keyHashCode);  bytes[1]=ByteUtil.int0(keyHashCode);  bytes[2]=ByteUtil.int2(machineIdentifier);  bytes[3]=ByteUtil.int1(machineIdentifier);  bytes[4]=ByteUtil.int0(machineIdentifier);  bytes[5]=ByteUtil.int2(counter);  bytes[6]=ByteUtil.int1(counter);  bytes[7]=ByteUtil.int0(counter);  return bytes;}  }
class C{  public static final long waitForExpiryClockToChange(final LocalRegion cacheTimeMillisSource){  return waitForExpiryClockToChange(cacheTimeMillisSource,cacheTimeMillisSource.cacheTimeMillis());}  }
class C{  boolean isEnumerator(JCTree t){  return t.hasTag(VARDEF) && (((JCVariableDecl)t).mods.flags & ENUM) != 0;}  }
class C{  @DSComment("data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.691 -0500",hash_original_method="36F360B7C447980FEF01C7653F551835",hash_generated_method="6A1F95A295531C17D734D7B8172E25FC") public boolean isReplace(){  return mWrappedSmsMessage.isReplace();}  }
class C{  public void add(Production production){  productions.add(production);}  }
class C{  public Long2LongOpenHashMap(final Map<? extends Long,? extends Long> m,final float f){  this(m.size(),f);  putAll(m);}  }
class C{  private static boolean addNewSysPathEntries(@NotNull Sdk sdk,@NotNull SdkModificator modificator,@NotNull List<String> sysPath){  final List<VirtualFile> oldRoots=Arrays.asList(sdk.getRootProvider().getFiles(OrderRootType.CLASSES));  PythonSdkAdditionalData additionalData=sdk.getSdkAdditionalData() instanceof PythonSdkAdditionalData ? (PythonSdkAdditionalData)sdk.getSdkAdditionalData() : null;  List<String> newRoots=new ArrayList<String>();  for (  String root : sysPath) {    if (new File(root).exists() && !FileUtilRt.extensionEquals(root,"egg-info") && (additionalData == null || !wasOldRoot(root,additionalData.getExcludedPathFiles()))&& !wasOldRoot(root,oldRoots)) {      newRoots.add(root);    }  }  if (!newRoots.isEmpty()) {    for (    String root : newRoots) {      PythonSdkType.addSdkRoot(modificator,root);    }    return true;  }  return false;}  }
class C{  @UninterruptibleNoWarn @Override public final void objectArrayStoreNoGCBarrier(Object[] dst,int index,Object value){  if (org.jikesrvm.VM.runningVM) {    Address base=ObjectReference.fromObject(dst).toAddress();    Address slot=base.plus(Offset.fromIntZeroExtend(index << LOG_BYTES_IN_ADDRESS));    VM.activePlan.global().storeObjectReference(slot,ObjectReference.fromObject(value));  } else {    dst[index]=value;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          if ((z1 + z2) > 0) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private String formatBoolean(boolean b){  return b ? new String(new byte[]{1}) : "";}  }
class C{  public void testSeekAfterFinalFilteredEvent() throws Exception {  File logDir=prepareLogDir("testSeekAfterFinalFilteredEvent");  DiskLog log=openLog(logDir,false);  long seqno=30;  LogConnection conn=log.connect(false);  long lastSeqno=seqno + 4;  THLEvent e1=this.createFilteredTHLEvent(seqno,lastSeqno,(short)0);  conn.store(e1,true);  DiskLog log2=openLog(logDir,true);  log2.validate();  LogConnection conn2=log2.connect(true);  seqno++;  logger.info("Seeking seqno: " + seqno);  boolean found=conn2.seek(seqno);  Assert.assertTrue("Found a trailing filtered event",found);  THLEvent foundEvent1=conn2.next();  Assert.assertEquals("Expect the filtered event",e1.getSeqno(),foundEvent1.getSeqno());  seqno=lastSeqno + 1;  THLEvent e3=this.createTHLEvent(seqno);  conn.store(e3,true);  THLEvent foundEvent3=conn2.next();  Assert.assertEquals("Expect the filtered event",e3.getSeqno(),foundEvent3.getSeqno());  conn.release();  log.release();  conn2.release();  log2.release();}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public static void sendMessageToTheFuture(final Runnable runnable,final int delay){  handler.postDelayed(runnable,delay);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public IconicsDrawableOld sizePx(int size){  this.size=size;  setBounds(0,0,size,size);  invalidateSelf();  return this;}  }
class C{  public void trainC(ClassificationDataSet dataSet,Set<Integer> categoriesToUse){  if (categoriesToUse.size() > dataSet.getNumFeatures() + 1)   throw new FailedToFitException("CPT can not train on a number of features greater then the dataset's feature count. " + "Specified " + categoriesToUse.size() + " but data set has only "+ dataSet.getNumFeatures());  CategoricalData[] tmp=dataSet.getCategories();  predicting=dataSet.getPredicting();  predictingIndex=dataSet.getNumCategoricalVars();  valid=new HashMap<Integer,CategoricalData>();  realIndexToCatIndex=new int[categoriesToUse.size()];  catIndexToRealIndex=new int[dataSet.getNumCategoricalVars() + 1];  Arrays.fill(catIndexToRealIndex,-1);  dimSize=new int[realIndexToCatIndex.length];  int flatSize=1;  int k=0;  for (  int i : categoriesToUse) {    if (i == predictingIndex)     continue;    CategoricalData dataInfo=tmp[i];    flatSize*=dataInfo.getNumOfCategories();    valid.put(i,dataInfo);    realIndexToCatIndex[k]=i;    catIndexToRealIndex[i]=k;    dimSize[k++]=dataInfo.getNumOfCategories();  }  if (categoriesToUse.contains(predictingIndex)) {    flatSize*=predicting.getNumOfCategories();    realIndexToCatIndex[k]=predictingIndex;    catIndexToRealIndex[predictingIndex]=k;    dimSize[k]=predicting.getNumOfCategories();    valid.put(predictingIndex,predicting);  }  countArray=new double[flatSize];  Arrays.fill(countArray,1);  int[] cordinate=new int[dimSize.length];  for (int i=0; i < dataSet.getSampleSize(); i++) {    DataPoint dp=dataSet.getDataPoint(i);    for (int j=0; j < realIndexToCatIndex.length; j++)     if (realIndexToCatIndex[j] != predictingIndex)     cordinate[j]=dp.getCategoricalValue(realIndexToCatIndex[j]); else     cordinate[j]=dataSet.getDataPointCategory(i);    countArray[cordToIndex(cordinate)]+=dp.getWeight();  }}  }
class C{  public CSSOMComputedStyle(CSSEngine e,CSSStylableElement elt,String pseudoElt){  cssEngine=e;  element=elt;  pseudoElement=pseudoElt;}  }
class C{  public String treebankFileExtension(){  return "mrg";}  }
class C{  public InvalidPipeException(String s){  super(s);}  }
class C{  public static Vector2d dFdyLinear(double v0X,double v0Y,double f0X,double f0Y,double v1X,double v1Y,double f1X,double f1Y,double v2X,double v2Y,double f2X,double f2Y,Vector2d dest){  double v21X=v2X - v1X;  double v02X=v0X - v2X;  double den=(v1Y - v2Y) * v02X + v21X * (v0Y - v2Y);  double l3_1=den - v21X - v02X;  double invDen=1.0f / den;  dest.x=invDen * (v21X * f0X + v02X * f1X + l3_1 * f2X) - f2X;  dest.y=invDen * (v21X * f0Y + v02X * f1Y + l3_1 * f2Y) - f2Y;  return dest;}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  int num=values.length;  writer.arrayValue(num);  for (int i=0; i < num; ++i)   values[i].write(writer);}  }
class C{  public void addInternalFlags(Flag... flags){  if (flags == null) {    _log.warn("addInternalFlags called with null argument");    return;  }  long addMask=0;  for (  Flag flag : flags) {    addMask|=flag.getMask();  }  setInternalFlags(_internalFlags | addMask);}  }
class C{  @Override public void onTimeTick(){  super.onTimeTick();  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"onTimeTick: ambient = " + mAmbient);  }  invalidate();}  }
class C{  public void await() throws InterruptedException {  connectionFactory.join();}  }
class C{  protected void fireFigureRemoved(Figure f,int zIndex){  CompositeFigureEvent event=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == CompositeFigureListener.class) {      if (event == null)       event=new CompositeFigureEvent(this,f,f.getDrawingArea(),zIndex);      ((CompositeFigureListener)listeners[i + 1]).figureRemoved(event);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:50.833 -0500",hash_original_method="6B08EB07811C6437ABA5F29C5CF7EE01",hash_generated_method="D2B13765670B9BA356FC0487FE019689") public static TextEncodingDetails calcTextEncodingDetails(CharSequence msg,boolean force7BitEncoding){  TextEncodingDetails ted;  int septets=countAsciiSeptets(msg,force7BitEncoding);  if (septets != -1 && septets <= SmsMessage.MAX_USER_DATA_SEPTETS) {    ted=new TextEncodingDetails();    ted.msgCount=1;    ted.codeUnitCount=septets;    ted.codeUnitsRemaining=SmsMessage.MAX_USER_DATA_SEPTETS - septets;    ted.codeUnitSize=SmsMessage.ENCODING_7BIT;  } else {    ted=com.android.internal.telephony.gsm.SmsMessage.calculateLength(msg,force7BitEncoding);    if (ted.msgCount == 1 && ted.codeUnitSize == SmsMessage.ENCODING_7BIT) {      ted.codeUnitCount=msg.length();      int octets=ted.codeUnitCount * 2;      if (octets > MAX_USER_DATA_BYTES) {        ted.msgCount=(octets + (MAX_USER_DATA_BYTES_WITH_HEADER - 1)) / MAX_USER_DATA_BYTES_WITH_HEADER;        ted.codeUnitsRemaining=((ted.msgCount * MAX_USER_DATA_BYTES_WITH_HEADER) - octets) / 2;      } else {        ted.msgCount=1;        ted.codeUnitsRemaining=(MAX_USER_DATA_BYTES - octets) / 2;      }      ted.codeUnitSize=ENCODING_16BIT;    }  }  return ted;}  }
class C{  private void handleButtons(boolean hideButtons){  if (hideButtons) {    quickActionButtons.setVisibility(View.GONE);  } else {    quickActionButtons.setVisibility(View.VISIBLE);  }  Broadcaster.broadcast(getActivity(),"TIMELIST","TIME UPDATED");}  }
class C{  @Override public String toString(){  return super.toString() + "[mean=" + this.mean+ ",median="+ this.median+ ",q1="+ this.q1+ ",q3="+ this.q3+ "]";}  }
class C{  public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY){  mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY);  return spingbackX || spingbackY;}  }
class C{  public void testTypedMaps() throws Exception {  ObjectMapper mapper=new ObjectMapper();  Map<Long,Collection<Super>> map=new HashMap<Long,Collection<Super>>();  List<Super> list=new ArrayList<Super>();  list.add(new A());  map.put(1L,list);  String json=mapper.writerWithType(new TypeReference<Map<Long,Collection<Super>>>(){  }).writeValueAsString(map);  assertTrue(json,json.contains("@class"));}  }
class C{  public Object clone(){  throw new NullPointerException("Cannot invoke method clone() on null object");}  }
class C{  private void startMonitor(){  CacheServerStats stats=acceptor.getStats();  addCacheServerStats(stats);}  }
class C{  private void calculateNodeHeights(){  if (!lengthsKnown) {    throw new IllegalArgumentException("Can't calculate node heights because branch lengths not known");  }  nodeLengthsToHeights(rootNode,0.0);  double maxHeight=0.0;  for (  Node externalNode : getExternalNodes()) {    if (((ReRootedNode)externalNode).getHeight() > maxHeight) {      maxHeight=((ReRootedNode)externalNode).getHeight();    }  }  for (  Node node : getNodes()) {    ((ReRootedNode)node).setHeight(maxHeight - ((ReRootedNode)node).getHeight());  }  heightsKnown=true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.GENERATOR_MODEL__ENTRIES:    getEntries().clear();  return;case SGenPackage.GENERATOR_MODEL__GENERATOR_ID:setGeneratorId(GENERATOR_ID_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void updateIdentificacion(String idSerie,String identificacion,String procedimiento,int tipoProcedimiento){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,idSerie));  Map columnsToUpdate=new HashMap();  columnsToUpdate.put(CAMPO_IDENTIFICACION,identificacion);  columnsToUpdate.put(CAMPO_TIPOPROCEDIMIENTO,String.valueOf(tipoProcedimiento));  columnsToUpdate.put(CAMPO_IDPROCEDIMIENTO,procedimiento);  updateFields(qual.toString(),columnsToUpdate,TABLE_NAME_SERIE);}  }
class C{  public void replaceCDFViolatingTuplesWithMissing(){  for (  CFD cfd : CFDs) {    ArrayList<Integer> attrIndexes=new ArrayList<Integer>();    attrIndexes.add(cfd.getRHS().getKey());    for (    SimpleImmutableEntry<Integer,String> lhs : cfd.getPremise()) {      attrIndexes.add(lhs.getKey());    }    setMissingAtIndex(violated,Util.convertIntegers(attrIndexes));  }}  }
class C{  public PreparedPolygonIntersects(PreparedPolygon prepPoly){  super(prepPoly);}  }
class C{  public static Test suite(){  return (new TestSuite(FaceletsTargetNotFoundITCase.class));}  }
class C{  @SuppressWarnings("unused") public GeneralViewModel autoRender(boolean shouldRenderOnTrigger){  mShouldRenderOnTrigger=shouldRenderOnTrigger;  return this;}  }
class C{  public synchronized void warning(String msg){  LogRecord record=new LogRecord(Level.WARNING,msg);  log(record);}  }
class C{  public static double beta(double x1,double x2){  return ((gamma(x1) * gamma(x2)) / gamma(x1 + x2));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String toString(){  String _string=super.toString();  StringBuilder strb=new StringBuilder(_string);  boolean _memberNameSet=this.memberNameSet();  if (_memberNameSet) {    int _length=strb.length();    boolean _greaterThan=(_length > 0);    if (_greaterThan) {      boolean _isStaticMember=this.isStaticMember();      if (_isStaticMember) {        strb.append("#");      } else {        strb.append(".");      }    }    String _memberName=this.getMemberName();    strb.append(_memberName);  }  return strb.toString();}  }
class C{  private <T>PubsubFuture<T> put(final String operation,final String path,final Object payload,final Class<T> responseClass){  return request(operation,HttpMethod.PUT,path,responseClass,payload);}  }
class C{  public void aggregate(Evaluation evaluation){  ((weka.classifiers.evaluation.AggregateableEvaluation)m_delegate).aggregate(evaluation.m_delegate);}  }
class C{  @Override public void axisChanged(AxisChangeEvent event){  if (this.axis == event.getAxis()) {    notifyListeners(new TitleChangeEvent(this));  }}  }
class C{  private Object deserialize(final JsonParser jsonParser,final DeserializationContext deserializationContext) throws IOException {  final TokenBuffer buf=new TokenBuffer(jsonParser.getCodec(),false);  final TokenBuffer localCopy=new TokenBuffer(jsonParser.getCodec(),false);  try {    if (jsonParser.getCurrentToken() == JsonToken.START_OBJECT) {      buf.writeStartObject();      String typeName=null;      boolean valueDetected=false;      boolean valueDetectedFirst=false;      for (int i=0; i < 2; i++) {        String nextFieldName=jsonParser.nextFieldName();        if (nextFieldName == null) {          break;        }        if (!nextFieldName.equals(this.propertyName) && !nextFieldName.equals(this.valuePropertyName)) {          break;        }        if (nextFieldName.equals(this.propertyName)) {          typeName=jsonParser.nextTextValue();          buf.writeStringField(this.propertyName,typeName);          continue;        }        if (nextFieldName.equals(this.valuePropertyName)) {          jsonParser.nextValue();          if (typeName == null) {            buf.writeFieldName(this.valuePropertyName);            valueDetectedFirst=true;            localCopy.copyCurrentStructure(jsonParser);          }          valueDetected=true;          continue;        }      }      if (typeName != null && valueDetected) {        final JavaType typeFromId=idRes.typeFromId(typeName);        if (!baseType.isJavaLangObject() && !baseType.equals(typeFromId)) {          throw new InstantiationException(String.format("Cannot deserialize the value with the detected type contained in the JSON ('%s') " + "to the type specified in parameter to the object mapper (%s). " + "Those types are incompatible.",typeName,baseType.getRawClass().toString()));        }        final JsonDeserializer jsonDeserializer=deserializationContext.findContextualValueDeserializer(typeFromId,null);        JsonParser tokenParser;        if (valueDetectedFirst) {          tokenParser=localCopy.asParser();          tokenParser.nextToken();        } else {          tokenParser=jsonParser;        }        final Object value=jsonDeserializer.deserialize(tokenParser,deserializationContext);        final JsonToken t=jsonParser.nextToken();        if (t == JsonToken.END_OBJECT) {          return value;        } else {          throw deserializationContext.mappingException("Detected the type pattern in the JSON payload " + "but the map containing the types and values contains other fields. This is not " + "allowed by the deserializer.");        }      }    }  } catch (  Exception e) {    throw deserializationContext.mappingException("Could not deserialize the JSON value as required. Nested exception: " + e.toString());  }  final JsonParser[] concatenatedArray={buf.asParser(),localCopy.asParser(),jsonParser};  final JsonParser parserToUse=new JsonParserConcat(concatenatedArray);  parserToUse.nextToken();  if (!baseType.isJavaLangObject()) {    final JsonDeserializer jsonDeserializer=deserializationContext.findContextualValueDeserializer(baseType,null);    return jsonDeserializer.deserialize(parserToUse,deserializationContext);  } else {    if (parserToUse.isExpectedStartArrayToken()) {      return deserializationContext.findContextualValueDeserializer(arrayJavaType,null).deserialize(parserToUse,deserializationContext);    } else     if (parserToUse.isExpectedStartObjectToken()) {      return deserializationContext.findContextualValueDeserializer(mapJavaType,null).deserialize(parserToUse,deserializationContext);    } else {      final JsonDeserializer jsonDeserializer=deserializationContext.findContextualValueDeserializer(baseType,null);      return jsonDeserializer.deserialize(parserToUse,deserializationContext);    }  }}  }
class C{  public IntBuffer asIntBuffer(){  if (order() != ByteOrder.nativeOrder()) {    throw new RuntimeException("Native order supported only.");  }  return IntBuffer.wrap(this);}  }
class C{  @Override public void removePropertyChangeListener(String name,PropertyChangeListener pcl){  m_bcSupport.removePropertyChangeListener(name,pcl);}  }
class C{  public void stop(){  stop(null);}  }
class C{  public void testAbstractFailure() throws Exception {  ObjectMapper m=new ObjectMapper();  try {    m.readValue("{ \"x\" : 3 }",Abstract.class);    fail("Should fail on trying to deserialize abstract type");  } catch (  JsonProcessingException e) {    verifyException(e,"can not construct");  }}  }
class C{  private static UserAgentStaticProperties createInstance(){  if (GWT.isClient()) {    return GWT.create(UserAgentStaticProperties.class);  } else {    return new FirefoxImpl();  }}  }
class C{  public static JPopupButton createEditorColorButton(DrawingEditor editor,AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches,int columnCount,String labelKey,ResourceBundleUtil labels,@Nullable Map<AttributeKey,Object> defaultAttributes){  return createEditorColorButton(editor,attributeKey,swatches,columnCount,labelKey,labels,defaultAttributes,new Rectangle(1,17,20,4));}  }
class C{  @Deprecated public GenericQueryBuilder parallel(int parallel){  if (parallel > 0)   LOG.warn("Parameter \"parallel\" is deprecated, ignore");  return this;}  }
class C{  public void addAttribute(AttributeInfo info){  if (attribute == null)   attribute=new ArrayList();  AttributeInfo.remove(attribute,info.getName());  attribute.add(info);}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  boolean origSer=serializing;  serializing=true;  try {    oos.defaultWriteObject();    bcsPreSerializationHook(oos);    if (this == getBeanContextPeer()) {      writeChildren(oos);    }synchronized (bcmListeners) {      serialize(oos,bcmListeners);    }  }  finally {    serializing=origSer;  }}  }
class C{  public void clearLearnedTable(){  macVlanToSwitchPortMap.clear();}  }
class C{  public static boolean equals(long[] array1,long[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @Override public void onBackPressed(){  if (!mainFlow.goBack()) {    super.onBackPressed();  }}  }
class C{  @Override public void fatalError(SAXParseException exception) throws SAXException {  try {    this.reportFatalError(exception.getMessage());  } catch (  RDFParseException rdfpe) {    throw new SAXException(rdfpe);  }}  }
class C{  public JspWriterImpl(ServletResponse response,int sz,boolean autoFlush){  super(sz,autoFlush);  if (sz < 0)   throw new IllegalArgumentException("Buffer size <= 0");  this.response=response;  allocateCharBuffer();  try {    response.setBufferSize(sz);  } catch (  IllegalStateException ise) {  }}  }
class C{  private static boolean is64Bit(){switch (JVM_PROVIDER) {case SUN:    return System.getProperty("sun.arch.data.model").indexOf("64") != -1;case ORACLE:  return System.getProperty("sun.arch.data.model").indexOf("64") != -1;case IBM:return System.getProperty("com.ibm.vm.bitmode").indexOf("64") != -1;default :return false;}}  }
class C{  protected void endNode(Node node) throws org.xml.sax.SAXException {switch (node.getNodeType()) {case Node.DOCUMENT_NODE:    break;case Node.DOCUMENT_TYPE_NODE:  serializeDocType((DocumentType)node,false);break;case Node.ELEMENT_NODE:serializeElement((Element)node,false);break;case Node.CDATA_SECTION_NODE:break;case Node.ENTITY_REFERENCE_NODE:serializeEntityReference((EntityReference)node,false);break;default :}}  }
class C{  public void ecef2ned(double ned[],double latitude,double longitude,double ecef[]){  double temp[][]=new double[3][3];  double clat=Math.cos(latitude);  double clon=Math.cos(longitude);  double slat=Math.sin(latitude);  double slon=Math.sin(longitude);  temp[0][0]=-slat * clon;  temp[0][1]=-slat * slon;  temp[0][2]=clat;  temp[1][0]=-slon;  temp[1][1]=clon;  temp[1][2]=0.0;  temp[2][0]=-clat * clon;  temp[2][1]=-clat * slon;  temp[2][2]=-slat;  for (int j=0; j < 3; ++j) {    ned[j]=0.0;    for (int i=0; i < 3; i++)     ned[j]+=temp[j][i] * ecef[i];  }}  }
class C{  synchronized public void addDTM(DTM dtm,int id){  addDTM(dtm,id,0);}  }
class C{  public static byte[] incrementBytes(byte[] value,long amount) throws IOException {  byte[] val=value;  if (val.length < SIZEOF_LONG) {    byte[] newvalue;    if (val[0] < 0) {      newvalue=new byte[]{-1,-1,-1,-1,-1,-1,-1,-1};    } else {      newvalue=new byte[SIZEOF_LONG];    }    System.arraycopy(val,0,newvalue,newvalue.length - val.length,val.length);    val=newvalue;  } else   if (val.length > SIZEOF_LONG) {    throw new IllegalArgumentException("Increment Bytes - value too big: " + val.length);  }  if (amount == 0)   return val;  if (val[0] < 0) {    return binaryIncrementNeg(val,amount);  }  return binaryIncrementPos(val,amount);}  }
class C{  @Override public AuthnRequest createSamlAuthnRequest(String id,String destination,String providerEntityID,String nameIDFormat,Integer assertionConsumerServiceIndex,Integer attributeConsumerServiceIndex,Boolean forceAuthn,Boolean isPassive){  if (id == null) {    id=generator.generateIdentifier();  }  log.debug("Building SAML AuthnRequest for id " + id);  log.debug("Building SAML AuthnRequest for destination " + destination);  log.debug("Building SAML AuthnRequest for providerEntityID " + providerEntityID);  if (nameIDFormat == null) {    nameIDFormat=OasisNames.PERSISTENT;  }  log.debug("Building SAML AuthnRequest for nameIDFormat " + nameIDFormat);  log.debug("Building SAML AuthnRequest for assertionConsumerServiceIndex " + assertionConsumerServiceIndex);  log.debug("Building SAML AuthnRequest for attributeConsumerServiceIndex " + attributeConsumerServiceIndex);  log.debug("Building SAML AuthnRequest for forceAuthn " + forceAuthn);  log.debug("Building SAML AuthnRequest for isPassive " + isPassive);  NameIDPolicyBuilder nameIdPolicyBuilder=new NameIDPolicyBuilder();  NameIDPolicy nameIdPolicy=nameIdPolicyBuilder.buildObject();  nameIdPolicy.setFormat(nameIDFormat);  nameIdPolicy.setSPNameQualifier(destination);  nameIdPolicy.setAllowCreate(true);  DateTime issueInstant=new DateTime();  AuthnRequestBuilder authRequestBuilder=new AuthnRequestBuilder();  AuthnRequest authRequest=authRequestBuilder.buildObject(OasisNames.PROTOCOL,"AuthnRequest","samlp");  authRequest.setForceAuthn(forceAuthn);  authRequest.setIsPassive(isPassive);  authRequest.setIssueInstant(issueInstant);  authRequest.setIssuer(spawnIssuer(providerEntityID));  authRequest.setNameIDPolicy(nameIdPolicy);  authRequest.setRequestedAuthnContext(spawnRequestedAuthnContext());  authRequest.setID(id);  authRequest.setVersion(SAMLVersion.VERSION_20);  authRequest.setProviderName("Demo Provider");  authRequest.setDestination(destination);  authRequest.setAssertionConsumerServiceIndex(assertionConsumerServiceIndex);  authRequest.setAttributeConsumingServiceIndex(attributeConsumerServiceIndex);  return authRequest;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  byte[] signatureBytes;  try {    signatureBytes=Base64.decode(signature,Base64.DEFAULT);  } catch (  IllegalArgumentException e) {    Log.e(TAG,"Base64 decoding failed.");    return false;  }  try {    Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(signatureBytes)) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }  return false;}  }
class C{  private byte[][] extractIPsAndSubnetMasks(byte[] ipWithSubmask1,byte[] ipWithSubmask2){  int ipLength=ipWithSubmask1.length / 2;  byte ip1[]=new byte[ipLength];  byte subnetmask1[]=new byte[ipLength];  System.arraycopy(ipWithSubmask1,0,ip1,0,ipLength);  System.arraycopy(ipWithSubmask1,ipLength,subnetmask1,0,ipLength);  byte ip2[]=new byte[ipLength];  byte subnetmask2[]=new byte[ipLength];  System.arraycopy(ipWithSubmask2,0,ip2,0,ipLength);  System.arraycopy(ipWithSubmask2,ipLength,subnetmask2,0,ipLength);  return new byte[][]{ip1,subnetmask1,ip2,subnetmask2};}  }
class C{  void parseString(String S,double[] F){  int i=0;  for (int j=0; i < F.length && j < S.length(); j+=14)   F[i++]=Float.parseFloat(S.substring(j,j + 14).trim());}  }
class C{  public static int sampleFromDistribution(double[] distribution,Random rng){  double d=rng.nextDouble();  double sum=0.0;  for (int i=0; i < distribution.length; i++) {    sum+=distribution[i];    if (d <= sum)     return i;  }  throw new IllegalArgumentException("Distribution is invalid? d=" + d + ", sum="+ sum);}  }
class C{  private void intraConstructPhase(int cluster[],boolean eliminated[],String clusterName){  int clusterSize=cluster.length;  double pvalues[][][][][]=new double[clusterSize][clusterSize][clusterSize][clusterSize][3];  int numNotEliminated=numNotEliminated(cluster,eliminated);  List<Double> allPValues=new ArrayList<>();  int numImpurities=0;  Set failures[]=new Set[clusterSize];  for (int i=0; i < clusterSize; i++) {    failures[i]=new HashSet();  }  for (int i=0; i < clusterSize - 3; i++) {    if (eliminated[cluster[i]]) {      continue;    }    for (int j=i + 1; j < clusterSize - 2; j++) {      if (eliminated[cluster[j]]) {        continue;      }      for (int k=j + 1; k < clusterSize - 1; k++) {        if (eliminated[cluster[k]]) {          continue;        }        for (int l=k + 1; l < clusterSize; l++) {          if (eliminated[cluster[l]]) {            continue;          }          double p1=tetradTest.tetradPValue(cluster[i],cluster[j],cluster[k],cluster[l]);          double p2=tetradTest.tetradPValue(cluster[i],cluster[j],cluster[l],cluster[k]);          double p3=tetradTest.tetradPValue(cluster[i],cluster[k],cluster[l],cluster[j]);          allPValues.add(p1);          allPValues.add(p2);          allPValues.add(p3);          pvalues[i][j][k][l][0]=p1;          pvalues[i][j][k][l][1]=p2;          pvalues[i][j][k][l][2]=p3;        }      }    }  }  if (allPValues.size() == 0)   return;  Collections.sort(allPValues);  System.out.println("numNotEliminated = " + numNotEliminated);  System.out.println("allPValues = " + allPValues.size());  int c=0;  while (allPValues.get(c) < tetradTest.getSignificance() * (c + 1.) / allPValues.size()) {    c++;  }  double cutoff=allPValues.get(c);  System.out.println("c = " + c + " cutoff = "+ allPValues.get(c));  for (int i=0; i < clusterSize - 3; i++) {    if (eliminated[cluster[i]]) {      continue;    }    for (int j=i + 1; j < clusterSize - 2; j++) {      if (eliminated[cluster[j]]) {        continue;      }      for (int k=j + 1; k < clusterSize - 1; k++) {        if (eliminated[cluster[k]]) {          continue;        }        for (int l=k + 1; l < clusterSize; l++) {          if (eliminated[cluster[l]]) {            continue;          }          for (int t=0; t < 3; t++) {            if (pvalues[i][j][k][l][t] < cutoff) {              int newFailure[]=new int[4];              newFailure[0]=i;              newFailure[1]=j;              newFailure[2]=k;              newFailure[3]=l;              failures[i].add(newFailure);              failures[j].add(newFailure);              failures[k].add(newFailure);              failures[l].add(newFailure);              numImpurities++;            }          }        }      }    }  }  if (numImpurities > 0) {    printlnMessage(clusterName + " -- Original Status: " + numImpurities+ " of "+ allPValues.size()+ " tetrads fail the FDR test.");  } else {    printlnMessage(clusterName + " -- Original Status: Needs NO pruning.");  }  while (numImpurities > 0) {    int max=Integer.MIN_VALUE;    int max_index=-1;    for (int i=0; i < clusterSize; i++) {      if (!eliminated[cluster[i]] && failures[i].size() > max) {        max=failures[i].size();        max_index=i;      }    }    eliminated[cluster[max_index]]=true;    numImpurities-=failures[max_index].size();    numNotEliminated--;    for (int i=0; i < clusterSize; i++) {      if (eliminated[cluster[i]]) {        continue;      }      Set toRemove=new HashSet();      for (Iterator it=failures[i].iterator(); it.hasNext(); ) {        int impurity[]=(int[])it.next();        for (int j=0; j < 4; j++) {          if (impurity[j] == max_index) {            toRemove.add(impurity);            break;          }        }      }      failures[i].removeAll(toRemove);    }    if (numNotEliminated < 3) {      return;    }    printlnMessage("Dropped " + tetradTest.getVarNames()[cluster[max_index]] + "  Without it, "+ numImpurities+ " of "+ allPValues.size()+ " fail the FDR test.");  }}  }
class C{  void relaxNodeLogic(final Link l,final RouterPriorityQueue<Node> pendingNodes,final double currTime,final double currCost,final Node toNode,final PreProcessDijkstra.DeadEndData ddOutData){  if (this.pruneDeadEnds) {    if (canPassLink(l)) {      Node n=l.getToNode();      PreProcessDijkstra.DeadEndData ddData=getPreProcessData(n);      if ((ddData.getDeadEndEntryNode() == null) || (ddOutData.getDeadEndEntryNode() != null) || ((this.deadEndEntryNode != null) && (this.deadEndEntryNode.getId() == ddData.getDeadEndEntryNode().getId()))) {        addToPendingNodes(l,n,pendingNodes,currTime,currCost,toNode);      }    }  } else {    if (canPassLink(l)) {      addToPendingNodes(l,l.getToNode(),pendingNodes,currTime,currCost,toNode);    }  }}  }
class C{  public Address newAddress(String label) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  if (label != null) {    params.put("label",label);  }  String response=HttpClient.getInstance().post(String.format("merchant/%s/new_address",identifier),params);  JsonObject topElem=parseResponse(response);  return new Address(0L,topElem.get("address").getAsString(),topElem.has("label") && !topElem.get("label").isJsonNull() ? topElem.get("label").getAsString() : null,0L);}  }
class C{  protected NewRadialLayout(Graph<GraphNode,GraphEdge> graph,GraphModel graphModel,EdgeMatcher<String> edgeMatcher,Rectangle2D region){  super(graph,graphModel,edgeMatcher,region);}  }
class C{  public static void wtf(String tag,String msg,Throwable tr){  println(ASSERT,tag,msg,tr);}  }
class C{  public void addDirtyListener(Listener listener){  unlimited.addListener(SWT.Selection,listener);  limited.addListener(SWT.Selection,listener);  value.addListener(SWT.Modify,listener);}  }
class C{  public static <T>Permutations<T> create(T[] in,T[] out){  return new Permutations<T>(in,out,in.length);}  }
class C{  public ShowMainToolBarAction(final NetworkPanel networkPanel){  super("Main Toolbar");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;}  }
class C{  protected boolean hasCompressedThumbnail(){  return mThumbnail != null;}  }
class C{  public int next(){  _currentNode=(_currentNode == DTM.NULL) ? DTM.NULL : _nextsib(_currentNode);  return returnNode(makeNodeHandle(_currentNode));}  }
class C{  public AtomicIntegerArray(int[] array){  this.array=array.clone();}  }
class C{  public void showLong(@StringRes Integer toast){  Toast.makeText(context,toast,Toast.LENGTH_LONG).show();}  }
class C{  public BigDecimalPolynomial(BigIntPolynomial p){  int N=p.coeffs.length;  coeffs=new BigDecimal[N];  for (int i=0; i < N; i++) {    coeffs[i]=new BigDecimal(p.coeffs[i]);  }}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("tomcat4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat4xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat4x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat5x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat5x6xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat5x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Tomcat5x6xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat5x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat5x",ContainerType.EMBEDDED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat5x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat6x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat5x6xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat6x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Tomcat5x6xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat6x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat6x",ContainerType.EMBEDDED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat6x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat7x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat7x8xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat7x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Tomcat7x8xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat7x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat7x",ContainerType.EMBEDDED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat7x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat8x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat7x8xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat8x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Tomcat7x8xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat8x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat8x",ContainerType.EMBEDDED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat8x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat9x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat7x8xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat9x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Tomcat7x8xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat9x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat9x",ContainerType.EMBEDDED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomcat9x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfigurationCapability.class);}  }
class C{  @SuppressLint("NewApi") protected void hideNavBar(){  View view=getWindow().getDecorView();  if (view != null && fullScreen && Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    Log.d(DEBUG_TAG,"hiding nav bar");    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT ? View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY : View.SYSTEM_UI_FLAG_IMMERSIVE));  }}  }
class C{  public static TypesTreeModel createDefaultModel(final TypeManager typeManager){  Preconditions.checkNotNull(typeManager,"Error: typeManager argument can not be null");  return new TypesTreeModel(typeManager,new DefaultTypesFilter());}  }
class C{  public String uploadFile(Part filePart,final String bucketName) throws IOException {  DateTimeFormatter dtf=DateTimeFormat.forPattern("-YYYY-MM-dd-HHmmssSSS");  DateTime dt=DateTime.now(DateTimeZone.UTC);  String dtString=dt.toString(dtf);  final String fileName=filePart.getSubmittedFileName() + dtString;  BlobInfo blobInfo=storage.create(BlobInfo.builder(bucketName,fileName).acl(new ArrayList<>(Arrays.asList(Acl.of(User.ofAllUsers(),Role.READER)))).build(),filePart.getInputStream());  logger.log(Level.INFO,"Uploaded file {0} as {1}",new Object[]{filePart.getSubmittedFileName(),fileName});  return blobInfo.mediaLink();}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder();  builder.append(super.toString());  builder.append("\n");  for (  Map.Entry<Integer,Object> entry : mHeaderMap.entrySet()) {    builder.append(getFieldName(entry.getKey()));    builder.append(": ");    if (entry.getValue() instanceof Integer) {      builder.append(getValueName(entry.getKey(),(Integer)entry.getValue()));    } else     if (entry.getValue() instanceof Long) {      builder.append(getLongValueString(entry.getKey(),(Long)entry.getValue()));    } else     if (entry.getValue() instanceof byte[]) {      builder.append(new String((byte[])entry.getValue())).append(" (TextString / byte[])");    } else     if (entry.getValue() instanceof EncodedStringValue) {      builder.append(entry.getValue()).append(" (EncodedStringValue)");    } else {      builder.append(entry.getValue());      builder.append(" (").append(entry.getValue().getClass().getSimpleName()).append(")");    }    builder.append("\n");  }  return builder.toString();}  }
class C{  public static void generateRPClass(){  if (!RPClass.hasRPClass(RPCLASS_EXPIRATION_TRACKER)) {    final RPClass gate=new RPClass(RPCLASS_EXPIRATION_TRACKER);    gate.isA("entity");    gate.addAttribute(EXPIRES,Type.STRING);    gate.addAttribute(TRACKER_ID,Type.STRING);    gate.addAttribute(PLAYER_NAME,Type.STRING);  }}  }
class C{  public TimeSlice previous(){  long newStart=start;  long newEnd=end;  Calendar temp=Calendar.getInstance();  temp.setTimeInMillis(start);  int field=0;switch (period) {case HOUR:    field=Calendar.HOUR_OF_DAY;  break;case DAY:field=Calendar.DAY_OF_MONTH;break;case WEEK:field=Calendar.WEEK_OF_YEAR;break;case MONTH:field=Calendar.MONTH;break;default :break;}temp.add(field,-1);newStart=temp.getTimeInMillis();temp.setTimeInMillis(end);temp.add(field,-1);newEnd=temp.getTimeInMillis();return new TimeSlice(newStart,newEnd,period);}  }
class C{  public void writeInt(int i,boolean append){  writeIntArray(new int[]{i},append);}  }
class C{  private static float[][] computeSchmidtQuasiNormFactors(int maxN){  float[][] schmidtQuasiNorm=new float[maxN + 1][];  schmidtQuasiNorm[0]=new float[]{1.0f};  for (int n=1; n <= maxN; n++) {    schmidtQuasiNorm[n]=new float[n + 1];    schmidtQuasiNorm[n][0]=schmidtQuasiNorm[n - 1][0] * (2 * n - 1) / (float)n;    for (int m=1; m <= n; m++) {      schmidtQuasiNorm[n][m]=schmidtQuasiNorm[n][m - 1] * (float)Math.sqrt((n - m + 1) * (m == 1 ? 2 : 1) / (float)(n + m));    }  }  return schmidtQuasiNorm;}  }
class C{  protected AWTKeyStroke(){}  }
class C{  public BattleArmorBay(double space,int doors,int bayNumber,boolean isClan,boolean isComStar){  totalSpace=space;  currentSpace=space;  this.doors=doors;  doorsNext=doors;  this.bayNumber=bayNumber;  this.isClan=isClan;  this.isComStar=isComStar;}  }
class C{  public YamlConfiguration read(File file) throws IOException {  String yamlString=Files.toString(file,StandardCharsets.UTF_8);  return read(yamlString);}  }
class C{  private Set<String> arrayToSet(Object[] arr){  HashSet<String> r=new HashSet<>();  if (null == arr)   return r;  for (  Object o : arr) {    if (null != o)     r.add(o.toString());  }  return r;}  }
class C{  public Ethernet(){  super();  this.vlanID=VLAN_UNTAGGED;}  }
class C{  public UnicodeWriter(OutputStream out,String encoding) throws UnsupportedEncodingException, IOException {  init(out,encoding);}  }
class C{  private static Pair<String,String> generateSignMask(final ITranslationEnvironment environment,final long offset,final String value,final OperandSize size,final List<ReilInstruction> instructions){  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));  final String shiftValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));  final String maskedMsb=environment.getNextVariableString();  final String msbInLsb=environment.getNextVariableString();  final String signMask=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,size,value,size,msbMask,size,maskedMsb));  instructions.add(ReilHelpers.createBsh(offset + 1,size,maskedMsb,size,shiftValue,size,msbInLsb));  instructions.add(ReilHelpers.createSub(offset + 2,size,"0",size,msbInLsb,size,signMask));  return new Pair<String,String>(msbInLsb,signMask);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Signature) {    Signature signature=(Signature)object;    return isEqual(signature.type,this.type) && isEqual(signature.name,this.name) && isEqual(signature.args,this.args);  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public Provider<?>[] program(Parameter[] params){  Provider<?>[] program=new Provider<?>[params.length];  for (int i=0; i < program.length; i++) {    program[i]=provider(InjectionPoint.of(params[i]));  }  return program;}  }
class C{  public StoragePool selectPool(List<StoragePool> poolList){  if (poolList == null || poolList.isEmpty()) {    return null;  }  _portMetricsProcessor.computeStoragePoolsAvgPortMetrics(poolList);  Collections.sort(poolList,_storagePoolComparator);  return poolList.get(0);}  }
class C{  private byte[] decrypt(byte[] data,byte[] key) throws Exception {  return SecurityUtilities.cipher(data,key,Cipher.DECRYPT_MODE);}  }
class C{  public void pauseCarousel(){  resetScrollTimer();}  }
class C{  public Text subtext(int start,int end){  if (_data != null) {    if ((start < 0) || (start > end) || (end > _count))     throw new IndexOutOfBoundsException();    if ((start == 0) && (end == _count))     return this;    if (start == end)     return Text.EMPTY;    int length=end - start;    Text text=Text.newPrimitive(length);    System.arraycopy(_data,start,text._data,0,length);    return text;  } else {    final int cesure=_head._count;    if (end <= cesure)     return _head.subtext(start,end);    if (start >= cesure)     return _tail.subtext(start - cesure,end - cesure);    if ((start == 0) && (end == _count))     return this;    return _head.subtext(start,cesure).concat(_tail.subtext(0,end - cesure));  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void main(String... args) throws Exception {  org.h2.tools.Server.shutdownTcpServer("tcp://localhost:9094","",false,false);}  }
class C{  public MultipleXYSeriesLabelGenerator(){  this(DEFAULT_LABEL_FORMAT);}  }
class C{  public void addTransaction(SIPServerTransaction serverTransaction) throws IOException {  if (isLoggingEnabled())   stackLogger.logDebug("added transaction " + serverTransaction);  serverTransaction.map();  addTransactionHash(serverTransaction);}  }
class C{  public String dontCalculateOutOfBagErrorTipText(){  return "If true, then the out of bag error is not computed";}  }
class C{  public void testAlterTableAlgorithmLock() throws SQLException {  if (versionMeetsMinimum(5,6,6)) {    Connection c=null;    Properties props=new Properties();    props.setProperty("useServerPrepStmts","true");    try {      c=getConnectionWithProps(props);      String[] algs={"",", ALGORITHM DEFAULT",", ALGORITHM = DEFAULT",", ALGORITHM INPLACE",", ALGORITHM = INPLACE",", ALGORITHM COPY",", ALGORITHM = COPY"};      String[] lcks={"",", LOCK DEFAULT",", LOCK = DEFAULT",", LOCK NONE",", LOCK = NONE",", LOCK SHARED",", LOCK = SHARED",", LOCK EXCLUSIVE",", LOCK = EXCLUSIVE"};      createTable("testAlterTableAlgorithmLock","(x VARCHAR(10) NOT NULL DEFAULT '') CHARSET=latin2");      int i=1;      for (      String alg : algs) {        for (        String lck : lcks) {          i=i ^ 1;          if (!(lck.contains("NONE") && alg.contains("COPY"))) {            String sql="ALTER TABLE testAlterTableAlgorithmLock CHARSET=latin" + (i + 1) + alg+ lck;            this.stmt.executeUpdate(sql);            this.pstmt=this.conn.prepareStatement("ALTER TABLE testAlterTableAlgorithmLock CHARSET=?" + alg + lck);            assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);            this.pstmt=c.prepareStatement(sql);            assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);          }        }      }    }  finally {      if (c != null) {        c.close();      }    }  }}  }
class C{  public static boolean isStrictfp(int flags){  return (flags & STRICTFP) != 0;}  }
class C{  public StatusBarChangeHandler(JMenuItem jmi,String helpText,StatusBar statusBar){  this.jmi=jmi;  this.helpText=helpText;  this.statusBar=statusBar;  jmi.addChangeListener(this);}  }
class C{  public void appendReplacing(String key,char toReplace,char with){  int size=key.length();  for (int index=0; index < size; index++) {    char character=key.charAt(index);    if (character == toReplace) {      this.buffer.append(with);    } else {      this.buffer.append(character);    }  }  this.charCount+=size;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI=null;  String qualifiedName="prefix:local";  Document doc;  Element newElement;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newElement=doc.createElementNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  private void autoRequestMods(){  if (!c.autoRequestModsEnabled()) {    return;  }  Set<String> joinedChannels=c.getJoinedChannels();  for (  String channel : joinedChannels) {    if (!modsAlreadyRequested.contains(channel)) {      LOGGER.info("Auto-requesting mods for " + channel);      modsAlreadyRequested.add(channel);      requestModsSilent(channel);      return;    }  }}  }
class C{  private UniversalDataSource prepareCatalog(String name) throws ReplicatorException, InterruptedException {  return prepareCatalog(name,true);}  }
class C{  public ElementsByTagName(String n){  name=n;}  }
class C{  public void loadNbt(CompoundTag tag){  if (saveId != null) {    if (!tag.isString("id") || !tag.getString("id").equals(saveId)) {      throw new IllegalArgumentException("Expected tile entity id of " + saveId + ", got "+ tag.getString("id"));    }  }  if (tag.isInt("x")) {    int x=tag.getInt("x");    int y=tag.getInt("y");    int z=tag.getInt("z");    int rx=block.getX(), ry=block.getY(), rz=block.getZ();    if (x != rx || y != ry || z != rz) {      throw new IllegalArgumentException("Tried to load tile entity with coords (" + x + ","+ y+ ","+ z+ ") into ("+ rx+ ","+ ry+ ","+ rz+ ")");    }  }}  }
class C{  private static Integer convertUnitIdx(final int index){  if (index <= 227)   return index;  if (233 <= index && index <= 297)   return index - 1;  if (299 <= index && index <= 393)   return index - 2;  if (410 <= index && index <= 494)   return index - 3;  if (496 <= index && index <= 568)   return index - 4;  if (586 <= index && index <= 589)   return index - 4;  return null;}  }
class C{  public void not() throws IOException {  print("not",null);}  }
class C{  public double eval(double params[]){  boolean p1=params[0] == 0.0 ? false : true;  boolean p2=params[1] == 0.0 ? false : true;  return (((p1 || p2) == true) ? 0.0 : 1.0);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.279 -0500",hash_original_method="53A1F9C2A72688D9CD2F75BB7D3D5005",hash_generated_method="0F9B35A447BBA3AFD0BD90BA2849A5D4") private void nativeGoBackOrForward(int steps){  addTaint(steps);}  }
class C{  @Override public UpdateResponse rollback() throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.rollback();  return ur;}  }
class C{  public static ExportGroup createVplexExportGroup(DbClient dbClient,StorageSystem vplex,StorageSystem array,Collection<Initiator> initiators,URI virtualArrayURI,URI projectURI,URI tenantURI,int numPaths,ExportMask exportMask){  String groupName=getExportGroupName(vplex,array) + "_" + UUID.randomUUID().toString().substring(28);  if (exportMask != null) {    String arrayName=array.getSystemType().replace("block","") + array.getSerialNumber().substring(array.getSerialNumber().length() - 4);    groupName=exportMask.getMaskName() + "_" + arrayName;  }  ExportGroup exportGroup=new ExportGroup();  exportGroup.setId(URIUtil.createId(ExportGroup.class));  exportGroup.setLabel(groupName);  exportGroup.setProject(new NamedURI(projectURI,exportGroup.getLabel()));  exportGroup.setVirtualArray(vplex.getVirtualArray());  exportGroup.setTenant(new NamedURI(tenantURI,exportGroup.getLabel()));  exportGroup.setGeneratedName(groupName);  exportGroup.setVolumes(new StringMap());  exportGroup.setOpStatus(new OpStatusMap());  exportGroup.setVirtualArray(virtualArrayURI);  exportGroup.setNumPaths(numPaths);  for (  Initiator initiator : initiators) {    exportGroup.addInitiator(initiator);  }  if (exportMask != null) {    exportGroup.addExportMask(exportMask.getId());  }  dbClient.createObject(exportGroup);  _log.info(String.format("Returning new ExportGroup %s",exportGroup.getLabel()));  return exportGroup;}  }
class C{  @Override public void onSurfaceCreated(EGLConfig config){  Log.i(TAG,"onSurfaceCreated");  GLES20.glClearColor(0.1f,0.1f,0.1f,0.5f);  ByteBuffer bbVertices=ByteBuffer.allocateDirect(WorldLayoutData.CUBE_COORDS.length * 4);  bbVertices.order(ByteOrder.nativeOrder());  cubeVertices=bbVertices.asFloatBuffer();  cubeVertices.put(WorldLayoutData.CUBE_COORDS);  cubeVertices.position(0);  ByteBuffer bbColors=ByteBuffer.allocateDirect(WorldLayoutData.CUBE_COLORS.length * 4);  bbColors.order(ByteOrder.nativeOrder());  cubeColors=bbColors.asFloatBuffer();  cubeColors.put(WorldLayoutData.CUBE_COLORS);  cubeColors.position(0);  ByteBuffer bbFoundColors=ByteBuffer.allocateDirect(WorldLayoutData.CUBE_FOUND_COLORS.length * 4);  bbFoundColors.order(ByteOrder.nativeOrder());  cubeFoundColors=bbFoundColors.asFloatBuffer();  cubeFoundColors.put(WorldLayoutData.CUBE_FOUND_COLORS);  cubeFoundColors.position(0);  ByteBuffer bbNormals=ByteBuffer.allocateDirect(WorldLayoutData.CUBE_NORMALS.length * 4);  bbNormals.order(ByteOrder.nativeOrder());  cubeNormals=bbNormals.asFloatBuffer();  cubeNormals.put(WorldLayoutData.CUBE_NORMALS);  cubeNormals.position(0);  ByteBuffer bbFloorVertices=ByteBuffer.allocateDirect(WorldLayoutData.FLOOR_COORDS.length * 4);  bbFloorVertices.order(ByteOrder.nativeOrder());  floorVertices=bbFloorVertices.asFloatBuffer();  floorVertices.put(WorldLayoutData.FLOOR_COORDS);  floorVertices.position(0);  ByteBuffer bbFloorNormals=ByteBuffer.allocateDirect(WorldLayoutData.FLOOR_NORMALS.length * 4);  bbFloorNormals.order(ByteOrder.nativeOrder());  floorNormals=bbFloorNormals.asFloatBuffer();  floorNormals.put(WorldLayoutData.FLOOR_NORMALS);  floorNormals.position(0);  ByteBuffer bbFloorColors=ByteBuffer.allocateDirect(WorldLayoutData.FLOOR_COLORS.length * 4);  bbFloorColors.order(ByteOrder.nativeOrder());  floorColors=bbFloorColors.asFloatBuffer();  floorColors.put(WorldLayoutData.FLOOR_COLORS);  floorColors.position(0);  int vertexShader=loadGLShader(GLES20.GL_VERTEX_SHADER,R.raw.light_vertex);  int gridShader=loadGLShader(GLES20.GL_FRAGMENT_SHADER,R.raw.grid_fragment);  int passthroughShader=loadGLShader(GLES20.GL_FRAGMENT_SHADER,R.raw.passthrough_fragment);  cubeProgram=GLES20.glCreateProgram();  GLES20.glAttachShader(cubeProgram,vertexShader);  GLES20.glAttachShader(cubeProgram,passthroughShader);  GLES20.glLinkProgram(cubeProgram);  GLES20.glUseProgram(cubeProgram);  checkGLError("Cube program");  cubePositionParam=GLES20.glGetAttribLocation(cubeProgram,"a_Position");  cubeNormalParam=GLES20.glGetAttribLocation(cubeProgram,"a_Normal");  cubeColorParam=GLES20.glGetAttribLocation(cubeProgram,"a_Color");  cubeModelParam=GLES20.glGetUniformLocation(cubeProgram,"u_Model");  cubeModelViewParam=GLES20.glGetUniformLocation(cubeProgram,"u_MVMatrix");  cubeModelViewProjectionParam=GLES20.glGetUniformLocation(cubeProgram,"u_MVP");  cubeLightPosParam=GLES20.glGetUniformLocation(cubeProgram,"u_LightPos");  GLES20.glEnableVertexAttribArray(cubePositionParam);  GLES20.glEnableVertexAttribArray(cubeNormalParam);  GLES20.glEnableVertexAttribArray(cubeColorParam);  checkGLError("Cube program params");  floorProgram=GLES20.glCreateProgram();  GLES20.glAttachShader(floorProgram,vertexShader);  GLES20.glAttachShader(floorProgram,gridShader);  GLES20.glLinkProgram(floorProgram);  GLES20.glUseProgram(floorProgram);  checkGLError("Floor program");  floorModelParam=GLES20.glGetUniformLocation(floorProgram,"u_Model");  floorModelViewParam=GLES20.glGetUniformLocation(floorProgram,"u_MVMatrix");  floorModelViewProjectionParam=GLES20.glGetUniformLocation(floorProgram,"u_MVP");  floorLightPosParam=GLES20.glGetUniformLocation(floorProgram,"u_LightPos");  floorPositionParam=GLES20.glGetAttribLocation(floorProgram,"a_Position");  floorNormalParam=GLES20.glGetAttribLocation(floorProgram,"a_Normal");  floorColorParam=GLES20.glGetAttribLocation(floorProgram,"a_Color");  GLES20.glEnableVertexAttribArray(floorPositionParam);  GLES20.glEnableVertexAttribArray(floorNormalParam);  GLES20.glEnableVertexAttribArray(floorColorParam);  checkGLError("Floor program params");  Matrix.setIdentityM(modelFloor,0);  Matrix.translateM(modelFloor,0,0,-floorDepth,0);  updateModelPosition();  mVideoRenderer=new VideoRenderer(this);  mVideoRenderer.setup();  mVideoRenderer.start();  Matrix.setIdentityM(videoScreenModelMatrix,0);  float screenSize=2;  float aspectRatio=16f / 9f;  Matrix.scaleM(videoScreenModelMatrix,0,screenSize,screenSize / aspectRatio,1);  Matrix.translateM(videoScreenModelMatrix,0,0.0f,0.0f,-4.0f);  checkGLError("onSurfaceCreated");}  }
class C{  public MutableDouble3D(final Double2D p){  x=p.x;  y=p.y;  z=0.0;}  }
class C{  private long offset2PhysicalAddress(final long offset){  return offset + headerSize;}  }
class C{  @Override public synchronized String toString(){  final StringBuilder sb=new StringBuilder(" --> ");  sb.append("Dumping Queue with ");  sb.append(numElements);  sb.append(" elements:\n");  if (numElements >= 1)   sb.append("\t");  for (int i=1; i <= numElements; i++) {    sb.append(queue[i].toString());    if (i < numElements)     sb.append("\n\t");  }  return sb.toString();}  }
class C{  public static Resources initNamedTheme(String resourceFile,String resName){  try {    Resources theme=Resources.openLayered(resourceFile);    UIManager.getInstance().setThemeProps(theme.getTheme(resName));    Resources.setGlobalResources(theme);    return theme;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  private void fillQueue(){  pq.clear();  for (  PhrasePositions pp : phrasePositions) {    if (pp.position > end) {      end=pp.position;    }    pq.add(pp);  }}  }
class C{  private static void loadcfg(String[] args){  cfg=new ConfigProperties(args,null);  if (cfg.getProperty("group","default").equals("default")) {    try {      cfg.loadSystemResource("drm/resources/AddressList.properties");    } catch (    Throwable e) {      Logger.error("NakedNode","loading address list",e);    }  }}  }
class C{  public static void log(String msg,Throwable t){  if (DEBUG) {    log(msg);    t.printStackTrace(System.out);  }}  }
class C{  public static double log2(double arg){  return Math.log(arg) / Math.log(2);}  }
class C{  public boolean isCompatibleStream(InputStream is) throws StreamCorruptedException {  for (int i=0; i < magicNumbers.length; i++) {    if (magicNumbers[i].isMatch(is))     return true;  }  return false;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public ClassPath(@Nonnull Iterable<DexFile> classPath,int api){  Iterable<DexFile> dexFiles=Iterables.concat(classPath,Lists.newArrayList(getBasicClasses()));  unknownClass=new UnknownClassProto(this);  loadedClasses.put(unknownClass.getType(),unknownClass);  this.api=api;  loadPrimitiveType("Z");  loadPrimitiveType("B");  loadPrimitiveType("S");  loadPrimitiveType("C");  loadPrimitiveType("I");  loadPrimitiveType("J");  loadPrimitiveType("F");  loadPrimitiveType("D");  loadPrimitiveType("L");  for (  DexFile dexFile : dexFiles) {    for (    ClassDef classDef : dexFile.getClasses()) {      ClassDef prev=availableClasses.get(classDef.getType());      if (prev == null) {        availableClasses.put(classDef.getType(),classDef);      }    }  }}  }
class C{  public static double correlationIgnoreNans(double[] x,double[] y,int dataLength){  double c=0;  double meanX=0;  double meanY=0;  int count=0;  for (int i=0; i < dataLength; i++) {    if ((!Double.isNaN(x[i])) && (!Double.isNaN(y[i]))) {      meanX+=x[i];      meanY+=y[i];      count++;    }  }  meanX=meanX / count;  meanY=meanY / count;  for (int t=0; t < dataLength; t++) {    if ((!Double.isNaN(x[t])) && (!Double.isNaN(y[t]))) {      c+=(x[t] - meanX) * (y[t] - meanY);    }  }  double covariance=c / (double)(count - 1);  double sumSqsX=0.0;  double sumSqsY=0.0;  for (int m=0; m < dataLength; m++) {    if ((!Double.isNaN(x[m])) && (!Double.isNaN(y[m]))) {      sumSqsX+=(x[m] - meanX) * (x[m] - meanX);      sumSqsY+=(y[m] - meanY) * (y[m] - meanY);    }  }  double stdX=sumSqsX / (double)(count - 1);  stdX=Math.sqrt(stdX);  double stdY=sumSqsY / (double)(count - 1);  stdY=Math.sqrt(stdY);  return covariance / stdX / stdY;}  }
class C{  public long term(){  return term;}  }
class C{  protected void retryDelay(int attemptCount){  if (attemptCount > 0) {    try {      Thread.sleep(attemptCount * retryDelay);    } catch (    InterruptedException e) {      LOG.debug("Failed to sleep: " + e,e);    }  }}  }
class C{  private ServerSessionContext clearEvents(long index){  if (index > completeIndex) {    EventHolder event=events.peek();    while (event != null && event.eventIndex <= index) {      events.remove();      completeIndex=event.eventIndex;      event=events.peek();    }    completeIndex=index;  }  return this;}  }
class C{  public void testIsFoundClassHistograms() throws FileNotFoundException, IOException {  System.out.println("isFoundClassHistograms");  DumpParser instance=null;  FileInputStream fis=null;  try {    fis=new FileInputStream("test/none/testwithhistogram.log");    Map dumpMap=new HashMap();    instance=DumpParserFactory.get().getDumpParserForLogfile(fis,dumpMap,false,0);    Vector topNodes=new Vector();    while (instance.hasMoreDumps()) {      topNodes.add(instance.parseNext());    }    boolean expResult=true;    boolean result=instance.isFoundClassHistograms();    assertEquals(expResult,result);  }  finally {    if (instance != null) {      instance.close();    }    if (fis != null) {      fis.close();    }  }}  }
class C{  @Override protected void onDraw(Canvas canvas){  canvas.drawColor(Color.GRAY);  canvas.save();  canvas.translate(60,60);  this.drawOriginalView(canvas);  canvas.restore();  canvas.save();  canvas.translate(600,60);  canvas.clipRect(0,0,260,260);  canvas.clipRect(200,200,280,280,Region.Op.DIFFERENCE);  this.drawOriginalView(canvas);  canvas.restore();  canvas.save();  canvas.translate(60,600);  this.mPath.reset();  canvas.clipPath(this.mPath);  this.mPath.addCircle(100,100,100,Path.Direction.CCW);  canvas.clipPath(this.mPath,Region.Op.REPLACE);  this.drawOriginalView(canvas);  canvas.restore();  canvas.save();  canvas.translate(600,600);  canvas.clipRect(0,0,160,160);  canvas.clipRect(120,120,280,280,Region.Op.UNION);  this.drawOriginalView(canvas);  canvas.restore();  canvas.save();  canvas.translate(60,1200);  canvas.clipRect(0,0,160,160);  canvas.clipRect(120,120,280,280,Region.Op.XOR);  this.drawOriginalView(canvas);  canvas.restore();  canvas.save();  canvas.translate(600,1200);  canvas.clipRect(0,0,170,170);  canvas.clipRect(140,140,280,280,Region.Op.REVERSE_DIFFERENCE);  this.drawOriginalView(canvas);  canvas.restore();}  }
class C{  public List<DeviceDB> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<DeviceDB> list=new ArrayList<DeviceDB>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public static boolean checkIfExportGroupIsRP(ExportGroup exportGroup){  if (exportGroup == null) {    return false;  }  return exportGroup.checkInternalFlags(Flag.RECOVERPOINT);}  }
class C{  private final void round(int maximumDigits,boolean alreadyRounded,boolean valueExactAsDecimal){  if (maximumDigits >= 0 && maximumDigits < count) {    if (shouldRoundUp(maximumDigits,alreadyRounded,valueExactAsDecimal)) {      for (; ; ) {        --maximumDigits;        if (maximumDigits < 0) {          digits[0]='1';          ++decimalAt;          maximumDigits=0;          break;        }        ++digits[maximumDigits];        if (digits[maximumDigits] <= '9')         break;      }      ++maximumDigits;    }    count=maximumDigits;    while (count > 1 && digits[count - 1] == '0') {      --count;    }  }}  }
class C{  public void release(){  ((MonotonePageResource)pr).reset();  headDiscontiguousRegion=Address.zero();  fromSpace=false;}  }
class C{  public CSaveCheckbox(final String text){  super(text);}  }
class C{  private void addJythonToPath(PySystemState pySystemState){  URL url=getClass().getClassLoader().getResource("jython");  if (url != null) {    File file=new File(url.getFile());    String path=file.getPath();    System.out.println(path);    if (path.startsWith("file:")) {      path=path.substring(5);    }    pySystemState.path.append(new PyString(path.replace("!","")));  }}  }
class C{  public static int round(float value){  if (USE_JDK_MATH) {    return Math.round(value);  }  return (int)FastMath.floor(value + 0.5f);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof KeyedValues)) {    return false;  }  KeyedValues that=(KeyedValues)obj;  int count=getItemCount();  if (count != that.getItemCount()) {    return false;  }  for (int i=0; i < count; i++) {    Comparable k1=getKey(i);    Comparable k2=that.getKey(i);    if (!k1.equals(k2)) {      return false;    }    Number v1=getValue(i);    Number v2=that.getValue(i);    if (v1 == null) {      if (v2 != null) {        return false;      }    } else {      if (!v1.equals(v2)) {        return false;      }    }  }  return true;}  }
class C{  @Override public void onClick(View v){  AlertDialog dialog=new AlertDialog.Builder(this).setPositiveButton(android.R.string.ok,null).setMessage(R.string.secure_dialog_dialog_text).create();  dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,WindowManager.LayoutParams.FLAG_SECURE);  dialog.show();}  }
class C{  private boolean isTag(String field){  return _ed.isTag(field);}  }
class C{  public boolean isHighlightable(OMGraphic omg){  return showHints;}  }
class C{  public static LogWriterLogger create(final String name,final String connectionName,final boolean isSecure){  final Logger wrapped=LogManager.getLogger(name,GemFireParameterizedMessageFactory.INSTANCE);  return new LogWriterLogger(wrapped,connectionName,isSecure);}  }
class C{  public void mouseClicked(MouseEvent e){  if (XiconTabPane.this.xIcon.getIconPosition().contains(e.getPoint()) && XiconTabPane.this.getTabCount() > 0) {    int index=XiconTabPane.this.getSelectedIndex();    Component component=XiconTabPane.this.getComponentAt(index);    XiconTabPane.this.adapter.processTabClose(XiconTabPane.this,component);  }  e.consume();}  }
class C{  SpringSecurityAuthenticationToken(final ProfileRequestContext prc,final Collection<GrantedAuthority> authorities){  super(authorities);  this.profileRequestContext=prc;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public void testConnect_NonBlockWithServer() throws IOException {  this.channel1.configureBlocking(false);  connectLocalServer();  datagramSocket1.close();  disconnectAfterConnected();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean rb=evalBool(stack.pop());  boolean fb=evalBool(stack.pop());  Agent a=(Agent)stack.pop();  int newMask=a.getAgentMask();  if (rb && !fb) {    newMask=newMask | Agent.RERUN_MASK;    newMask=newMask & (~Agent.FIRSTRUN_MASK);  } else   if (!rb && fb) {    newMask=newMask | Agent.FIRSTRUN_MASK;    newMask=newMask & (~Agent.RERUN_MASK);  } else   newMask=newMask & ~(Agent.RERUN_MASK | Agent.FIRSTRUN_MASK);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,a.getTitle(),a.getCategory(),a.getSubCategory(),a.getPersonObj(),a.getRole(),a.getRated(),a.getYear(),a.getPR(),a.getNetwork(),a.getChannelName(),a.getSlotType(),a.getTimeslots(),a.getKeyword());    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  public String globalInfo(){  return "InfoGainAttributeEval :\n\nEvaluates the worth of an attribute " + "by measuring the information gain with respect to the class.\n\n" + "InfoGain(Class,Attribute) = H(Class) - H(Class | Attribute).\n";}  }
class C{  private static Object createAndBindItem(ParameterAccess parameters,Class<?> itemType){  try {    Object value=itemType.newInstance();    bind(value,parameters);    return value;  } catch (  InstantiationException|IllegalAccessException e) {    throw new BindingException("Failed to instantiate new instance of " + itemType,e);  }}  }
class C{  void add(final String qualifiedClassName,final JavaFileObject javaFile){  classes.put(qualifiedClassName,javaFile);}  }
class C{  public static MockCompass compass(){  return new MockCompass();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return XBoolean.S_FALSE;}  }
class C{  public synchronized final int evictionCount(){  return this.evictionCount;}  }
class C{  public static Byte[] toObject(final byte[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;  }  final Byte[] result=new Byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Byte(array[i]);  }  return result;}  }
class C{  private char[] inlineTagCompletion(char[] completionName,char[] inlineTag){  int tagLength=inlineTag.length;  int completionLength=completionName.length;  int inlineLength=2 + tagLength + 1+ completionLength+ 1;  char[] inlineCompletion=new char[inlineLength];  inlineCompletion[0]='{';  inlineCompletion[1]='@';  System.arraycopy(inlineTag,0,inlineCompletion,2,tagLength);  inlineCompletion[tagLength + 2]=' ';  System.arraycopy(completionName,0,inlineCompletion,tagLength + 3,completionLength);  inlineCompletion[inlineLength - 1]='}';  return inlineCompletion;}  }
class C{  public void invokeVirtual(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEVIRTUAL,owner,method,false);}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {  if (m_inExternalDTD)   return;  try {    DTDprolog();    outputEntityDecl(name,value);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public void onViewSetup(NotificationView view){  if (DBG)   Log.v(TAG,"onViewSetup");  view.setCornerRadius(8.0f);  view.setContentMargin(50,50,50,50);  view.setShadowEnabled(true);}  }
class C{  protected CCColorLayer(ccColor4B color,float w,float h){  init(color,w,h);}  }
class C{  public boolean monobitTest(byte[] bitstring) throws RandomDataGenerationException {  if (bitstring.length != ranges.getBitstreamLength())   throw new RandomDataGenerationException("Invalid bitstring length");  int counter=countBits(bitstring);  if ((counter < ranges.getMonobitBorders()[1]) && (counter > ranges.getMonobitBorders()[0])) {    return true;  }  return false;}  }
class C{  public void addAddress(InetAddress address){  addAddress(new PeerAddress(params,address,params.getPort()));}  }
class C{  public synchronized Set<Map.Entry<Long,V>> entrySet(){  HashMap<Long,V> map=new HashMap<Long,V>();  for (  long k : keySet()) {    map.put(k,find(k).value);  }  return map.entrySet();}  }
class C{  public Annotation(String type,boolean isPersistent,String text){  this.type=type;  this.isPersistent=isPersistent;  this.text=text;}  }
class C{  public AlgorithmTerminationException(Algorithm algorithm,Throwable cause){  super(algorithm,cause);}  }
class C{  public PISelector(int numDigits){  if (numDigits > 6) {    throw new IllegalArgumentException("PISelector only allows up to six digits to form number (" + numDigits + ")");  }  len=digits.length;  base=1;  for (idx=0; idx < numDigits; idx++) {    val=val * 10 + digits[idx];    base*=10;  }  base/=10;}  }
class C{  @LargeTest public void testRemoveAudioTrack() throws Exception {  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  boolean flagForException=false;  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack1",audioFileName);  mVideoEditor.addAudioTrack(audioTrack);  assertEquals("Audio Track Item Duration",audioTrack.getDuration(),audioTrack.getTimelineDuration());  assertTrue("Audio Track ID",audioTrack.getId().equals("audioTrack1"));  assertNotNull("Remove Audio Track",mVideoEditor.removeAudioTrack("audioTrack1"));  try {    mVideoEditor.removeAudioTrack("audioTrack1");  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Remove Audio Track not possible",flagForException);}  }
class C{  public boolean implies(Permission permission){  for (Enumeration elements=elements(); elements.hasMoreElements(); ) {    if (((Permission)elements.nextElement()).implies(permission)) {      return true;    }  }  return false;}  }
class C{  public void deleteDatastore(Datastore datastore){  try {    getDatastoreSystem().removeDatastore(datastore);  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  ResourceInUse e) {    throw new VMWareException(e);  }catch (  NotFound e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public void changeMessageVisibility(ChangeMessageVisibilityRequest changeMessageVisibilityRequest) throws AmazonServiceException, AmazonClientException {  amazonSqsToBeExtended.changeMessageVisibility(changeMessageVisibilityRequest);}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  public static boolean isVolumeFullCopySource(Volume volume,DbClient dbClient){  boolean isFullCopySource=false;  StringSet fullCopyIds=volume.getFullCopies();  if ((fullCopyIds != null) && (!fullCopyIds.isEmpty())) {    Iterator<String> fullCopyIdsIter=fullCopyIds.iterator();    while (fullCopyIdsIter.hasNext()) {      URI fullCopyURI=URI.create(fullCopyIdsIter.next());      Volume fullCopyVolume=dbClient.queryObject(Volume.class,fullCopyURI);      if ((fullCopyVolume != null) && (!fullCopyVolume.getInactive())) {        isFullCopySource=true;      }    }  }  return isFullCopySource;}  }
class C{  LuffaSmallCore(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.751 -0500",hash_original_method="FA81D040C1BC0670D20AF3D93B255BE4",hash_generated_method="034E9B15950FC1F0DC2137E90D14CF99") final Node<E> succ(Node<E> p){  Node<E> next=p.next;  return (p == next) ? head : next;}  }
class C{  private void resetTimer(){  if (fadeOutTime > 0) {    if (timer == null || timer._run == false) {      timer=new FadeTimer();      timer.execute();    } else {      timer.resetTimer();    }  }}  }
class C{  public static OCSPResp createSigRequiredOCSPResponse() throws Exception {  OCSPResp resp=new OCSPRespBuilder().build(OCSPRespBuilder.SIG_REQUIRED,null);  return resp;}  }
class C{  public MapIterator mapIterator(){  if (size == 0) {    return EmptyMapIterator.INSTANCE;  }  return new HashMapIterator(this);}  }
class C{  private void deflate(Object o,Offset lockOffset){  if (VM.VerifyAssertions) {    VM._assert(lockedObject == o);    VM._assert(recursionCount == 0);    VM._assert(entering.isEmpty());    VM._assert(waiting.isEmpty());  }  if (STATS)   deflations++;  ThinLock.markDeflated(o,lockOffset,index);  lockedObject=null;  free(this);}  }
class C{  static Type[] mapKeyAndValueTypes(Type context,Class<?> contextRawType){  if (context == Properties.class)   return new Type[]{String.class,String.class};  Type mapType=getSupertype(context,contextRawType,Map.class);  if (mapType instanceof ParameterizedType) {    ParameterizedType mapParameterizedType=(ParameterizedType)mapType;    return mapParameterizedType.getActualTypeArguments();  }  return new Type[]{Object.class,Object.class};}  }
class C{  private static List<String> loadProvenanceFile(String refIdFilename){  List<String> provenance=new ArrayList<>();  LineNumberReader reader=IOTools.getReaderFromFile(refIdFilename);  try {    for (String line; (line=reader.readLine()) != null; ) {      provenance.add(line.trim());    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }  return provenance;}  }
class C{  JPanel makeButtonPanel(ActionListener updateListener,ActionListener cancelListener,ActionListener deleteListener){  JPanel panel3=new JPanel();  panel3.setLayout(new BoxLayout(panel3,BoxLayout.X_AXIS));  JButton cancelAction=new JButton(Bundle.getMessage("ButtonCancel"));  panel3.add(cancelAction);  panel3.add(Box.createHorizontalStrut(STRUT));  cancelAction.addActionListener(cancelListener);  cancelAction.setToolTipText(rbx.getString("CancelButtonHint"));  JButton updateAction=new JButton(Bundle.getMessage("ButtonUpdate"));  panel3.add(updateAction);  panel3.add(Box.createHorizontalStrut(STRUT));  updateAction.addActionListener(updateListener);  updateAction.setToolTipText(rbx.getString("UpdateButtonHint"));  JButton deleteAction=new JButton(Bundle.getMessage("ButtonDelete"));  panel3.add(deleteAction);  deleteAction.addActionListener(deleteListener);  deleteAction.setToolTipText(rbx.getString("DeleteButtonHint"));  return panel3;}  }
class C{  public double positiveRatio(){  return (double)positives / (double)occupiedBits;}  }
class C{  public SequencesReader right(){  assert mIsPaired;  return mRight;}  }
class C{  public static Bundle installBundle(BundleContext context,InputStream bundleIS,boolean closeStream,boolean checkExistence) throws IOException, BundleException {  String name=System.currentTimeMillis() + ".tmp";  Resource dir=SystemUtil.getTempDirectory();  Resource tmp=dir.getRealResource(name);  int count=0;  while (tmp.exists())   tmp=dir.getRealResource((count++) + "_" + name);  IOUtil.copy(bundleIS,tmp,closeStream);  try {    return installBundle(context,tmp,checkExistence);  }  finally {    tmp.delete();  }}  }
class C{  public ApiImplMapping enhance(Iterable<IN4JSProject> apiProjects,Iterable<IN4JSProject> implProjects){  final Set<String> apiProjectsIds=StreamSupport.stream(apiProjects.spliterator(),false).map(null).collect(Collectors.toSet());  for (  IN4JSProject pImpl : implProjects) {    for (    IN4JSProject pApi : pImpl.getImplementedProjects()) {      if (apiProjectsIds.contains(pApi.getProjectId()))       this.put(pApi,pImpl);    }  }  return this;}  }
class C{  @SuppressWarnings("deprecation") public void propertyChange(PropertyChangeEvent evt){  Date currentTime=_fastClock.getTime();  _currentMinutes=(currentTime.getHours() * 60) + currentTime.getMinutes();  boolean[] newRangeList=new boolean[_rangeList.length];  for (int i=0; i < numRanges; i++) {    if (_beginTimes[i] < _endTimes[i]) {      if ((_beginTimes[i] <= _currentMinutes) && (_currentMinutes <= _endTimes[i])) {        newRangeList[i]=true;      } else {        newRangeList[i]=false;      }    } else {      if ((_beginTimes[i] <= _currentMinutes) || (_currentMinutes <= _endTimes[i])) {        newRangeList[i]=true;      } else {        newRangeList[i]=false;      }    }  }  for (int i=0; i < numRanges; i++) {    if (_rangeList[i] != newRangeList[i]) {      _rangeList=newRangeList;      super.propertyChange(evt);    }  }}  }
class C{  @Override protected void createLabels(){  FireSupportTextBuilder textBuilder=this.createTextBuilder();  String[] allText=textBuilder.createText(this);  String text=allText[0];  if (!WWUtil.isEmpty(text)) {    TacticalGraphicLabel mainLabel=this.addLabel(text);    mainLabel.setTextAlign(this.getMainLabelTextAlign());    if (this.isFilled()) {      mainLabel.setEffect(AVKey.TEXT_EFFECT_NONE);      mainLabel.setDrawInterior(true);    }  }  if (allText.length > 1) {    String timeText=allText[1];    if (!WWUtil.isEmpty(timeText)) {      TacticalGraphicLabel timeLabel=this.addLabel(timeText);      timeLabel.setTextAlign(AVKey.RIGHT);    }  }}  }
class C{  public static void stopTrackerServices(GemFireCacheImpl cache){  cache.getEventTrackerTask().cancel();}  }
class C{  public void useDefaults(){  setAutoStart(false);  setDuration(5000);  setRepeatCount(ObjectAnimator.INFINITE);  setRepeatDelay(0);  setRepeatMode(ObjectAnimator.RESTART);  mMask.angle=MaskAngle.CW_0;  mMask.shape=MaskShape.LINEAR;  mMask.dropoff=0.5f;  mMask.fixedWidth=0;  mMask.fixedHeight=0;  mMask.intensity=0.0f;  mMask.relativeWidth=1.0f;  mMask.relativeHeight=1.0f;  mMask.tilt=20;  mMaskTranslation=new MaskTranslation();  setBaseAlpha(0.3f);  resetAll();}  }
class C{  public DependenciesDispatcher(ElementFilter filter,GraphBuilder builder){  super(builder);  this.filter=filter;}  }
class C{  public void removeActionListener(ActionListener l){  dispatcher.removeListener(l);}  }
class C{  public UserDeletionConstraintException(){  super();}  }
class C{  public static ViewPreferences buildFilteredNodes(ViewPreferences source,Collection<GraphNode> nodes){  Map<GraphNode,Point2D> newNodeLocations=filterMap(nodes,source.nodeLocations);  Map<GraphNode,NodeDisplayProperty> newNodeProperties=filterMap(nodes,source.nodeProperties);  Map<GraphEdge,EdgeDisplayProperty> newEdgeProperties=Maps.newHashMap();  Set<Relation> newRelations=Sets.newHashSet();  for (  Entry<GraphEdge,EdgeDisplayProperty> entry : source.edgeProperties.entrySet()) {    GraphEdge edge=entry.getKey();    if (nodes.contains(edge.getHead()) && nodes.contains(edge.getTail())) {      newEdgeProperties.put(edge,entry.getValue());      newRelations.add(edge.getRelation());    }  }  Map<Relation,EdgeDisplayProperty> newRelationProps=Maps.newHashMap();  for (  Relation relation : newRelations) {    EdgeDisplayProperty edgeProp=source.getRelationProperty(relation);    if (null != edgeProp) {      newRelationProps.put(relation,new EdgeDisplayProperty(edgeProp));    }  }  Collection<GraphNode> newSelectedNodes=Lists.newArrayList();  for (  GraphNode node : source.selectedNodes) {    if (nodes.contains(node)) {      newSelectedNodes.add(node);    }  }  String newDescription=(source.description.isEmpty()) ? "" : "Derived from " + source.description;  ViewPreferences result=new ViewPreferences(ScenePreferences.getDefaultScenePrefs(),newNodeLocations,newNodeProperties,source.visibleRelationSet,newEdgeProperties,newRelationProps,newSelectedNodes,newDescription);  return result;}  }
class C{  public static void exitEnv(int status){  if (DB.isConnected(false)) {    MSession session=MSession.get(Env.getCtx(),false);    if (session != null)     session.logout();  }  reset(true);  s_log.info("");  CLogMgt.shutdown();  if (Ini.isClient())   System.exit(status);}  }
class C{  public void addMethodLine(String className,String methodName,String methodSignature,SourceLineRange range){  methodLineMap.put(new MethodDescriptor(className,methodName,methodSignature),range);}  }
class C{  public void XtestRangePerformance() throws Exception {  int indexSize=1999;  float fractionCovered=1.0f;  String l=t(0);  String u=t((int)(indexSize * 10 * fractionCovered));  SolrQueryRequest req=lrf.makeRequest();  QParser parser=QParser.getParser("foomany_s:[" + l + " TO "+ u+ "]",req);  Query range=parser.getQuery();  QParser parser2=QParser.getParser("{!frange l=" + l + " u="+ u+ "}foomany_s",req);  Query frange=parser2.getQuery();  req.close();  createIndex2(indexSize,"foomany_s");  doSetGen(1,range);  doSetGen(1,frange);  doSetGen(100,range);  doSetGen(10000,frange);}  }
class C{  private boolean isArrowpointAllowed(Node x,Node y,Graph graph){  if (graph.getEndpoint(x,y) == Endpoint.ARROW) {    return true;  }  if (graph.getEndpoint(x,y) == Endpoint.TAIL) {    return false;  }  if (graph.getEndpoint(y,x) == Endpoint.ARROW) {    if (!knowledge.isForbidden(x.getName(),y.getName())) {      return true;    }  }  if (graph.getEndpoint(y,x) == Endpoint.TAIL) {    if (!knowledge.isForbidden(x.getName(),y.getName())) {      return true;    }  }  return graph.getEndpoint(y,x) == Endpoint.CIRCLE;}  }
class C{  public HSQLUtil(String sql){  this.sql=SQLPrettyfier.prettyfie(sql,true);  parser=new ZqlParser(new ByteArrayInputStream(this.sql.getBytes()));}  }
class C{  protected int next() throws IOException, ExifInvalidFormatException {  if (!mContainExifData) {    return EVENT_END;  }  int offset=mTiffStream.getReadByteCount();  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  if (offset < endOfTags) {    mTag=readTag();    if (mTag == null) {      return next();    }    if (mNeedToParseOffsetsInCurrentIfd) {      checkOffsetOrImageTag(mTag);    }    return EVENT_NEW_TAG;  } else   if (offset == endOfTags) {    if (mIfdType == IfdId.TYPE_IFD_0) {      long ifdOffset=readUnsignedLong();      if (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested()) {        if (ifdOffset != 0) {          registerIfd(IfdId.TYPE_IFD_1,ifdOffset);        }      }    } else {      int offsetSize=4;      if (mCorrespondingEvent.size() > 0) {        offsetSize=mCorrespondingEvent.firstEntry().getKey() - mTiffStream.getReadByteCount();      }      if (offsetSize < 4) {        Log.w(TAG,"Invalid size of link to next IFD: " + offsetSize);      } else {        long ifdOffset=readUnsignedLong();        if (ifdOffset != 0) {          Log.w(TAG,"Invalid link to next IFD: " + ifdOffset);        }      }    }  }  while (mCorrespondingEvent.size() != 0) {    Entry<Integer,Object> entry=mCorrespondingEvent.pollFirstEntry();    Object event=entry.getValue();    try {      skipTo(entry.getKey());    } catch (    IOException e) {      Log.w(TAG,"Failed to skip to data at: " + entry.getKey() + " for "+ event.getClass().getName()+ ", the file may be broken.");      continue;    }    if (event instanceof IfdEvent) {      mIfdType=((IfdEvent)event).ifd;      mNumOfTagInIfd=mTiffStream.readUnsignedShort();      mIfdStartOffset=entry.getKey();      if (mNumOfTagInIfd * TAG_SIZE + mIfdStartOffset + OFFSET_SIZE > mApp1End) {        Log.w(TAG,"Invalid size of IFD " + mIfdType);        return EVENT_END;      }      mNeedToParseOffsetsInCurrentIfd=needToParseOffsetsInCurrentIfd();      if (((IfdEvent)event).isRequested) {        return EVENT_START_OF_IFD;      } else {        skipRemainingTagsInCurrentIfd();      }    } else     if (event instanceof ImageEvent) {      mImageEvent=(ImageEvent)event;      return mImageEvent.type;    } else {      ExifTagEvent tagEvent=(ExifTagEvent)event;      mTag=tagEvent.tag;      if (mTag.getDataType() != ExifTag.TYPE_UNDEFINED) {        readFullTagValue(mTag);        checkOffsetOrImageTag(mTag);      }      if (tagEvent.isRequested) {        return EVENT_VALUE_OF_REGISTERED_TAG;      }    }  }  return EVENT_END;}  }
class C{  public boolean isCompacted(){  return compacted;}  }
class C{  public MonitorMap(){}  }
class C{  synchronized void closeInformSocketIfNeeded(){  if ((informSession != null) && (state != ONLINE)) {    informSession.destroySession();    informSession=null;  }}  }
class C{  private void attemptToSplit(ActiveLearningNode activeLearningNode,FoundNode foundNode){  if (!activeLearningNode.observedClassDistributionIsPure()) {    this.splitId++;    ScheduledFuture<?> timeOutHandler=this.executor.schedule(new AggregationTimeOutHandler(this.splitId,this.timedOutSplittingNodes),this.timeOut,TimeUnit.SECONDS);    this.splittingNodes.put(this.splitId,new SplittingNodeInfo(activeLearningNode,foundNode,timeOutHandler));    activeLearningNode.requestDistributedSuggestions(this.splitId,this);  }}  }
class C{  public void highlight(Object control){  if (this.currentControl == control)   return;  if (this.currentControl != null) {    this.currentControl.getAttributes().setImageOpacity(-1);    this.currentControl=null;  }  if (control != null && control instanceof ScreenAnnotation) {    this.currentControl=(ScreenAnnotation)control;    this.currentControl.getAttributes().setImageOpacity(1);  }}  }
class C{  public static void listIncompleteUploads_test3() throws Exception {  println("Test: listIncompleteUploads(final String bucketName, final String prefix, final boolean recursive)");  String fileName=createFile(6 * MB);  InputStream is=Files.newInputStream(Paths.get(fileName));  try {    client.putObject(bucketName,fileName,is,9 * 1024 * 1024,null);  } catch (  InsufficientDataException e) {    println("Exception occurred as excepted");  }  is.close();  int i=0;  for (  Result<Upload> r : client.listIncompleteUploads(bucketName,"minio",true)) {    println(i++,r.get());    if (i == 10) {      break;    }  }  Files.delete(Paths.get(fileName));  client.removeIncompleteUpload(bucketName,fileName);}  }
class C{  public Map<String,String> listThreadsHoldingLock(){  Map<Object,DLockToken> tokenMap=lockService.snapshotService();  Iterator<Object> it=tokenMap.keySet().iterator();  Map<String,String> listOfLocks=new HashMap<String,String>();  int j=0;  while (it.hasNext()) {    Object lockObject=it.next();    DLockToken token=tokenMap.get(lockObject);    if (token.getUsageCount() > 0) {      listOfLocks.put(lockObject.toString(),token.getThreadName());    }  }  return listOfLocks;}  }
class C{  public Encoder withoutPadding(){  if (!doPadding) {    return this;  }  return new Encoder(isURL,newline,linemax,false);}  }
class C{  public void print(PrintStream ps){  ps.println("AnalogPrototype: \n");  for (int i=0; i < sections.size(); i++) {    ps.println("  section " + i + ":");    sections.get(i).print(ps);  }}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  OutputNode parent=node.getParent();  Mode mode=node.getMode();  Map map=(Map)source;  if (!node.isCommitted()) {    node.remove();  }  write(parent,map,mode);}  }
class C{  public void deleteKeystoneEndpoint(String endpointId){  log.debug("START - deleteKeystoneEndpoint");  if (endpointId == null) {    log.error("endpointId is null");    throw APIException.internalServerErrors.targetIsNullOrEmpty("Endpoint id");  }  String uri=KeystoneConstants.URI_ENDPOINTS + "/" + endpointId;  URI requestURI=_base.resolve(URI.create(uri));  ClientResponse response=delete(requestURI);  if (response.getClientResponseStatus() != ClientResponse.Status.NO_CONTENT) {    throw KeystoneApiException.exceptions.apiExecutionFailed(response.toString());  }  log.debug("END - deleteKeystoneEndpoint");}  }
class C{  public static boolean canReadLabels(Context c){  boolean supported=false;  try {    final PackageInfo info=c.getPackageManager().getPackageInfo(PACKAGE,PackageManager.GET_PROVIDERS | PackageManager.GET_PERMISSIONS);    boolean allowRead=false;    if (info.permissions != null) {      for (int i=0, len=info.permissions.length; i < len; i++) {        final PermissionInfo perm=info.permissions[i];        if (PERMISSION.equals(perm.name) && perm.protectionLevel < PermissionInfo.PROTECTION_SIGNATURE) {          allowRead=true;          break;        }      }    }    if (allowRead && info.providers != null) {      for (int i=0, len=info.providers.length; i < len; i++) {        final ProviderInfo provider=info.providers[i];        if (AUTHORITY.equals(provider.authority) && TextUtils.equals(PERMISSION,provider.readPermission)) {          supported=true;        }      }    }  } catch (  NameNotFoundException e) {  }  return supported;}  }
class C{  public TypeVariable typeVariable(TypeNode typeNode){  TypeVariable result=typeVariableMap.get(typeNode);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariable(id,this,typeNode);    typeVariableList.set(id,result);    typeVariableMap.put(typeNode,result);  }  return result;}  }
class C{  public static boolean isAssignableTo(final String leftType,final String rightType){  if (leftType.equals(rightType))   return true;  final boolean firstTypeArray=leftType.charAt(0) == '[';  if (firstTypeArray ^ rightType.charAt(0) == '[') {    return false;  }  final Class<?> leftClass=loadClassFromType(leftType);  final Class<?> rightClass=loadClassFromType(rightType);  if (leftClass == null || rightClass == null)   return false;  final boolean bothTypesParameterized=hasTypeParameters(leftType) && hasTypeParameters(rightType);  return rightClass.isAssignableFrom(leftClass) && (firstTypeArray || !bothTypesParameterized || getTypeParameters(leftType).equals(getTypeParameters(rightType)));}  }
class C{  public static <E extends Comparable<E>>void mergeSort(E[] list){  if (list.length > 1) {    E[] firstHalf=(E[])new Comparable[list.length / 2];    System.arraycopy(list,0,firstHalf,0,list.length / 2);    mergeSort(firstHalf);    int secondHalfLength=list.length - list.length / 2;    E[] secondHalf=(E[])(new Comparable[secondHalfLength]);    System.arraycopy(list,list.length / 2,secondHalf,0,secondHalfLength);    mergeSort(secondHalf);    merge(firstHalf,secondHalf,list);  }}  }
class C{  void noOperation() throws IOException {  send("NOOP");  readCode(200);}  }
class C{  @Override protected void projectSelected(){  resetViewer();  setInput(null);}  }
class C{  public XNetMessage(String s){  setBinary(true);  setRetries(_nRetries);  setTimeout(XNetMessageTimeout);  byte b[]=jmri.util.StringUtil.bytesFromHexString(s);  if (b.length == 0) {    _nDataChars=0;    _dataChars=null;    return;  }  _nDataChars=b.length;  _dataChars=new int[_nDataChars];  for (int i=0; i < b.length; i++) {    setElement(i,b[i]);  }}  }
class C{  public boolean containsFilter(final FilterNode filter){  return filterMap.values().contains(filter);}  }
class C{  public ImageCapabilities(boolean accelerated){  this.accelerated=accelerated;}  }
class C{  private String processForEachSubtemplate(NextToken beginToken){  NextToken endToken;  StringBuffer result=new StringBuffer();  int numberOfIterations=0;  do {    endToken=getNextToken();    if ((endToken != null) && (endToken.getKey() != null) && endToken.getKey().endsWith("[]")) {      try {        Object[] array=endToken.getArrayOfValues();        if ((array != null) && (array.length > numberOfIterations)) {          numberOfIterations=array.length;        }      } catch (      Exception e) {      }    }  } while ((endToken != null) && !END_FOR_EACH.equals(endToken.getKey()));  if (endToken == null) {    return null;  }  String subtemplate=m_template.substring(beginToken.getPositionAfterKey(),endToken.getPositionBeforeKey() + 1);  TemplateParser parser;  String parsedSubtemplate;  for (int i=0; i < numberOfIterations; i++) {    parser=new TemplateParser(subtemplate,m_tags);    parser.setIterationNumber(i);    parsedSubtemplate=parser.parseTemplate();    if (parsedSubtemplate != null) {      result.append(parsedSubtemplate);    } else {      break;    }  }  if ((numberOfIterations == 0) && m_insertMissingTags) {    result.append(m_delimiter);    result.append(m_leftBracket);    result.append(BEGIN_FOR_EACH);    result.append(m_rightBracket);    result.append(m_delimiter);    result.append(subtemplate);    result.append(m_delimiter);    result.append(m_leftBracket);    result.append(END_FOR_EACH);    result.append(m_rightBracket);    result.append(m_delimiter);  }  return result.toString();}  }
class C{  public FileSaverDescriptor(@NotNull String title,@NotNull String description,String... extensions){  super(true,true,true,true,false,false);  setTitle(title);  setDescription(description);  this.extensions=Arrays.asList(extensions);}  }
class C{  private void initialize(){  frame=new JFrame();  frame.setBounds(100,100,450,300);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().setLayout(null);  frame.getContentPane().add(getPanel());}  }
class C{  protected final void charactersFlush(){  if (m_textPendingStart >= 0) {    int length=m_chars.size() - m_textPendingStart;    boolean doStrip=false;    if (getShouldStripWhitespace()) {      doStrip=m_chars.isWhitespace(m_textPendingStart,length);    }    if (doStrip) {      m_chars.setLength(m_textPendingStart);    } else {      if (length > 0) {        if (length <= TEXT_LENGTH_MAX && m_textPendingStart <= TEXT_OFFSET_MAX) {          m_previous=addNode(m_coalescedTextType,DTM.TEXT_NODE,m_parents.peek(),m_previous,length + (m_textPendingStart << TEXT_LENGTH_BITS),false);        } else {          int dataIndex=m_data.size();          m_previous=addNode(m_coalescedTextType,DTM.TEXT_NODE,m_parents.peek(),m_previous,-dataIndex,false);          m_data.addElement(m_textPendingStart);          m_data.addElement(length);        }      }    }    m_textPendingStart=-1;    m_textType=m_coalescedTextType=DTM.TEXT_NODE;  }}  }
class C{  public void loadData(final RepositoryContext repositoryContext,Operation.Inputs inputs){  this.repositoryContext=repositoryContext;  if (repositoryContext.getType() != RepositoryContext.Type.GIT) {    throw new TeamServicesException(TeamServicesException.KEY_OPERATION_ERRORS);  }  final PullRequestLookupOperation activeOperation=new PullRequestLookupOperation(repositoryContext.getUrl());  loadData(activeOperation,inputs);}  }
class C{  public GeneralName(int tag,ASN1Encodable name){  this.obj=name;  this.tag=tag;}  }
class C{  private IPushResult sendListMessage(String content,String[] receivers) throws IOException {  ListMessage message=new ListMessage();  message.setData(getTemplate(content));  message.setOffline(true);  message.setOfflineExpireTime(24 * 1000 * 3600);  List<Target> targets=new ArrayList<Target>();  Target target=null;  String appid=ConfigHelper.getString("GETUI.APP_ID");  for (  String receiver : receivers) {    target=new Target();    target.setAppId(appid);    target.setClientId(receiver);    targets.add(target);  }  IGtPush push=getGetPush();  String taskId=push.getContentId(message);  return push.pushMessageToList(taskId,targets);}  }
class C{  @Override public NativeAppElement findElement(final By locator){  WebElement appElement=null;  try {    appElement=(new WebDriverWait(appiumDriver,maxWaitTime)).until(ExpectedConditions.presenceOfElementLocated(locator));  } catch (  Throwable te) {    Reporter.log("Unable to find the element by locator: " + locator.toString() + " within "+ maxWaitTime+ " secs");    captureScreenshot();    throw new TimeoutException(te);  }  return new NativeAppElement(this,locator,appElement);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_FOR___TRACE_FOR_1:    setTrace_for_1(TRACE_FOR_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void updateIndex(final int index){  int newTypeRef=0x42000000 | (index << 8);  if (visibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : visibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }  if (invisibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : invisibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  charactersFlush();  m_contextIndexes.quickPop(1);  int topContextIndex=m_contextIndexes.peek();  if (topContextIndex != m_prefixMappings.size()) {    m_prefixMappings.setSize(topContextIndex);  }  m_previous=m_parents.pop();  popShouldStripWhitespace();}  }
class C{  public boolean contains(long[] bitset){  for (int i=0; i < bitset.length; i++) {    final long b=bitset[i];    if (i >= bits.length && b != 0L) {      return false;    }    if ((b & bits[i]) != b) {      return false;    }  }  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  String documentValue;  doc=(Document)load("staff",false);  documentValue=doc.getNodeValue();  assertNull("documentNodeValueNull",documentValue);}  }
class C{  public SimpleHttpFileServer(){  callCount=0;}  }
class C{  public TStream<JsonObject> receive(){  return receiveText(JsonFunctions.fromString());}  }
class C{  protected int bytesPerLine(){  return (48);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public StemmedString(CharSequence orig,String stemmed){  strOrig=orig.toString();  strStemmed=stemmed;}  }
class C{  long divide(long v,MutableBigInteger quotient){  if (v == 0)   throw new ArithmeticException("BigInteger divide by zero");  if (intLen == 0) {    quotient.intLen=quotient.offset=0;    return 0;  }  if (v < 0)   v=-v;  int d=(int)(v >>> 32);  quotient.clear();  if (d == 0)   return divideOneWord((int)v,quotient) & LONG_MASK; else {    return divideLongMagnitude(v,quotient).toLong();  }}  }
class C{  protected GroupExpression(){  m_group=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.754 -0500",hash_original_method="B0C72949A49C04FF8BBAFFAE803FD2AC",hash_generated_method="84E13B01C3042696D2CD3A6E8D951A96") public Reader retrieveArticleHeader(String articleId,ArticlePointer pointer) throws IOException {  return __retrieve(NNTPCommand.HEAD,articleId,pointer);}  }
class C{  public static void assertFailedU(String update){  assertFailedU(null,update);}  }
class C{  public static void readReferenceList(ArrayList<String> v_value,ArrayList<String> v_name,ArrayList<String> v_description){  if (v_value == null)   throw new IllegalArgumentException("v_value parameter is null");  if (v_name == null)   throw new IllegalArgumentException("v_name parameter is null");  if (v_description == null)   throw new IllegalArgumentException("v_description parameter is null");  String sql;  if (Env.isBaseLanguage(Env.getCtx(),"AD_Ref_List"))   sql="SELECT Value, Name, Description FROM AD_Ref_List " + "WHERE AD_Reference_ID=? ORDER BY Name"; else   sql="SELECT l.Value, t.Name, t.Description " + "FROM AD_Ref_List l, AD_Ref_List_Trl t " + "WHERE l.AD_Ref_List_ID=t.AD_Ref_List_ID"+ " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND l.AD_Reference_ID=? ORDER BY t.Name";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,DocAction.AD_REFERENCE_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      String value=rs.getString(1);      String name=rs.getString(2);      String description=rs.getString(3);      if (description == null)       description="";      v_value.add(value);      v_name.add(name);      v_description.add(description);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  @Override public boolean equals(Object o1){  return this == o1;}  }
class C{  public SQLIntegrityConstraintViolationException(Throwable cause){  super(cause);}  }
class C{  public FileSource(String fileName){  this.fileName=fileName;}  }
class C{  public static byte bArrayGet(byte[] a,int i){  try {    return a[i];  } catch (  Throwable t) {    return a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)];  }}  }
class C{  public int indexOf(Comparable seriesKey){  assert seriesKey instanceof String;  return indexOfGroupName((String)seriesKey);}  }
class C{  private void processAnsiCommand_E(){  int linesToMove=getAnsiParameter(0);}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  private GridTestUtils(){}  }
class C{  @Override public boolean canExtractItem(int aIndex,ItemStack aStack,int aSide){  return canAccessData() && getCoverBehaviorAtSide((byte)aSide).letsItemsOut((byte)aSide,getCoverIDAtSide((byte)aSide),getCoverDataAtSide((byte)aSide),aIndex,this) && mMetaTileEntity.canExtractItem(aIndex,aStack,aSide);}  }
class C{  @Override public int hashCode(){  return Long.valueOf(mIdentifier).hashCode();}  }
class C{  public boolean canWrite(){  return _next.canWrite();}  }
class C{  public int[] parseSexp(ArrayList flatSexp,GrammarParser gp){  ArrayList intList=new ArrayList();  Queue input=new LinkedList((ArrayList)flatSexp.clone());  Stack stack=new Stack();  stack.push(((GrammarNode)gp.productionRuleList.get(0)).getHead());  int index=0;  while (!input.isEmpty()) {    String token=(String)input.remove();    while (true) {      if (stack.peek().equals(token)) {        stack.pop();        if (token.equals("ERC")) {          token=(String)input.remove();          intList.add(Integer.valueOf(token));        }        break;      } else {        int rIndex=((Integer)gp.ruleHeadToIndex.get(stack.peek())).intValue();        int fIndex=((Integer)gp.functionHeadToIndex.get(token)).intValue();        Integer ruleIndex=new Integer(gp.predictiveParseTable[rIndex][fIndex]);        GrammarNode action=(GrammarNode)gp.indexToRule.get(ruleIndex);        int minIndex=0;        if (index < minGene.length)         minIndex=index;        intList.add(new Integer(((Integer)gp.absIndexToRelIndex.get(ruleIndex)).intValue() + (int)minGene[minIndex]));        index++;        stack.pop();        action=action.children.get(0);        if (action instanceof GrammarFunctionNode) {          for (int i=((GrammarFunctionNode)action).getNumArguments() - 1; i >= 0; i--)           stack.push(((GrammarFunctionNode)action).getArgument(i).getHead());          stack.push(action.getHead());        } else         if (action instanceof GrammarRuleNode)         stack.push(((GrammarRuleNode)action).getHead());      }    }  }  int[] genomeVals=new int[intList.size()];  for (int i=0; i < intList.size(); i++) {    genomeVals[i]=((Integer)intList.get(i)).intValue();  }  return genomeVals;}  }
class C{  public LoginToClosedMarketplaceException(String message){  super(message);}  }
class C{  public static DecomposableMatchBuilder1<Character,Character> caseChar(MatchesAny c){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(any());  return new DecomposableMatchBuilder1<>(matchers,0,new PrimitiveFieldExtractor<>(Character.class));}  }
class C{  protected boolean isWarmupID(String id){  if (this.warmupIDs == null || this.warmupIDs.size() == 0) {    return false;  }  return this.warmupIDs.contains(id);}  }
class C{  public void addRow(Object[] columnValues){  if (columnValues.length != columnCount) {    throw new IllegalArgumentException("columnNames.length = " + columnCount + ", columnValues.length = "+ columnValues.length);  }  int start=rowCount++ * columnCount;  ensureCapacity(start + columnCount);  System.arraycopy(columnValues,0,data,start,columnCount);}  }
class C{  public static PatternGuardExpr timerWithin(double seconds,PatternExpr guarded){  return new PatternGuardExpr("timer","within",new Expression[]{Expressions.constant(seconds)},guarded);}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  public T caseJSDocNode(JSDocNode object){  return null;}  }
class C{  public JapaneseToken_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_kana=jcas.getRequiredFeatureDE(casType,"kana","uima.cas.String",featOkTst);  casFeatCode_kana=(null == casFeat_kana) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_kana).getCode();  casFeat_ibo=jcas.getRequiredFeatureDE(casType,"ibo","uima.cas.String",featOkTst);  casFeatCode_ibo=(null == casFeat_ibo) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_ibo).getCode();  casFeat_kei=jcas.getRequiredFeatureDE(casType,"kei","uima.cas.String",featOkTst);  casFeatCode_kei=(null == casFeat_kei) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_kei).getCode();  casFeat_dan=jcas.getRequiredFeatureDE(casType,"dan","uima.cas.String",featOkTst);  casFeatCode_dan=(null == casFeat_dan) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_dan).getCode();}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x574A8C3F,version=271) public int sceUsbCamStartVideo(){  if (!setupVideo()) {    log.warn(String.format("Cannot find webcam"));  }  return 0;}  }
class C{  protected void init(){  if (initialized)   return;  Map<String,Class<? extends FXGNode>> elementNodes=new HashMap<String,Class<? extends FXGNode>>(DEFAULT_FXG_2_0_NODES.size() + 4);  elementNodes.putAll(DEFAULT_FXG_2_0_NODES);  elementNodesByURI=new HashMap<String,Map<String,Class<? extends FXGNode>>>(1);  elementNodesByURI.put(FXG_NAMESPACE,elementNodes);  HashSet<String> skippedElements=new HashSet<String>(1);  skippedElements.add(FXG_PRIVATE_ELEMENT);  skippedElementsByURI=new HashMap<String,Set<String>>(1);  skippedElementsByURI.put(FXG_NAMESPACE,skippedElements);  initialized=true;}  }
class C{  private void mergeDQTNode(Node node) throws IIOInvalidTreeException {  ArrayList oldDQTs=new ArrayList();  Iterator iter=markerSequence.iterator();  while (iter.hasNext()) {    MarkerSegment seg=(MarkerSegment)iter.next();    if (seg instanceof DQTMarkerSegment) {      oldDQTs.add(seg);    }  }  if (!oldDQTs.isEmpty()) {    NodeList children=node.getChildNodes();    for (int i=0; i < children.getLength(); i++) {      Node child=children.item(i);      int childID=MarkerSegment.getAttributeValue(child,null,"qtableId",0,3,true);      DQTMarkerSegment dqt=null;      int tableIndex=-1;      for (int j=0; j < oldDQTs.size(); j++) {        DQTMarkerSegment testDQT=(DQTMarkerSegment)oldDQTs.get(j);        for (int k=0; k < testDQT.tables.size(); k++) {          DQTMarkerSegment.Qtable testTable=(DQTMarkerSegment.Qtable)testDQT.tables.get(k);          if (childID == testTable.tableID) {            dqt=testDQT;            tableIndex=k;            break;          }        }        if (dqt != null)         break;      }      if (dqt != null) {        dqt.tables.set(tableIndex,dqt.getQtableFromNode(child));      } else {        dqt=(DQTMarkerSegment)oldDQTs.get(oldDQTs.size() - 1);        dqt.tables.add(dqt.getQtableFromNode(child));      }    }  } else {    DQTMarkerSegment newGuy=new DQTMarkerSegment(node);    int firstDHT=findMarkerSegmentPosition(DHTMarkerSegment.class,true);    int firstSOF=findMarkerSegmentPosition(SOFMarkerSegment.class,true);    int firstSOS=findMarkerSegmentPosition(SOSMarkerSegment.class,true);    if (firstDHT != -1) {      markerSequence.add(firstDHT,newGuy);    } else     if (firstSOF != -1) {      markerSequence.add(firstSOF,newGuy);    } else     if (firstSOS != -1) {      markerSequence.add(firstSOS,newGuy);    } else {      markerSequence.add(newGuy);    }  }}  }
class C{  public ByteRunAutomaton(Automaton a,boolean isBinary,int maxDeterminizedStates){  super(isBinary ? a : new UTF32ToUTF8().convert(a),256,true,maxDeterminizedStates);}  }
class C{  public boolean isUserUpdateable(){  Object oo=get_Value(COLUMNNAME_IsUserUpdateable);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("[\n");  if (unmodTrustAnchors != null) {    sb.append("  Trust Anchors: " + unmodTrustAnchors.toString() + "\n");  }  if (unmodInitialPolicies != null) {    if (unmodInitialPolicies.isEmpty()) {      sb.append("  Initial Policy OIDs: any\n");    } else {      sb.append("  Initial Policy OIDs: [" + unmodInitialPolicies.toString() + "]\n");    }  }  sb.append("  Validity Date: " + String.valueOf(date) + "\n");  sb.append("  Signature Provider: " + String.valueOf(sigProvider) + "\n");  sb.append("  Default Revocation Enabled: " + revocationEnabled + "\n");  sb.append("  Explicit Policy Required: " + explicitPolicyRequired + "\n");  sb.append("  Policy Mapping Inhibited: " + policyMappingInhibited + "\n");  sb.append("  Any Policy Inhibited: " + anyPolicyInhibited + "\n");  sb.append("  Policy Qualifiers Rejected: " + policyQualifiersRejected + "\n");  sb.append("  Target Cert Constraints: " + String.valueOf(certSelector) + "\n");  if (certPathCheckers != null)   sb.append("  Certification Path Checkers: [" + certPathCheckers.toString() + "]\n");  if (certStores != null)   sb.append("  CertStores: [" + certStores.toString() + "]\n");  sb.append("]");  return sb.toString();}  }
class C{  public static String toHex(byte[] bytes,int offset,int len){  if (bytes == null)   return "null";  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i++) {    int d1=(bytes[offset + i] >> 4) & 0xf;    int d2=(bytes[offset + i]) & 0xf;    if (d1 < 10)     sb.append((char)('0' + d1)); else     sb.append((char)('a' + d1 - 10));    if (d2 < 10)     sb.append((char)('0' + d2)); else     sb.append((char)('a' + d2 - 10));  }  return sb.toString();}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  private static String _trimString(String s){  if (s.length() >= 2) {    s=s.substring(1,s.length() - 1);  }  return s;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void actionPerformed(ActionEvent ae){  colorIndex++;  colorIndex=colorIndex % 2;  repaint();}  }
class C{  public void removeListener(String listenerName){synchronized (lockObj) {    if (listener == null)     return; else     if (listener.getName().equalsIgnoreCase(listenerName))     listener=null; else     if (listener instanceof CompositeListener) {      CompositeListener compListener=(CompositeListener)listener;      compListener.removeListener(listenerName);      if (compListener.getNumListeners() == 0)       listener=null; else       if (compListener.getNumListeners() == 1)       listener=compListener.getListener(0);    }  }}  }
class C{  public Node findNodeByEndpoint(final NodeEndpoint endpoint){  for (  final Node node : this.getAllNodes()) {    if (node.getEndpoint().equals(endpoint)) {      return node;    }  }  return null;}  }
class C{  protected List<Position> computeArrowheadPositions(DrawContext dc,Position base,Position tip,double arrowLength,Angle arrowAngle){  Globe globe=dc.getGlobe();  Vec4 ptA=globe.computePointFromPosition(base);  Vec4 ptB=globe.computePointFromPosition(tip);  Vec4 parallel=ptA.subtract3(ptB);  Vec4 surfaceNormal=globe.computeSurfaceNormalAtPoint(ptB);  Vec4 perpendicular=surfaceNormal.cross3(parallel);  double finalArrowLength=arrowLength * parallel.getLength3();  double arrowHalfWidth=finalArrowLength * arrowAngle.tanHalfAngle();  perpendicular=perpendicular.normalize3().multiply3(arrowHalfWidth);  parallel=parallel.normalize3().multiply3(finalArrowLength);  Vec4 vertex1=ptB.add3(parallel).add3(perpendicular);  Vec4 vertex2=ptB.add3(parallel).subtract3(perpendicular);  return TacticalGraphicUtil.asPositionList(globe,vertex1,vertex2,ptB);}  }
class C{  public void testCovariance(){  m_Filter=getFilter();  ((PrincipalComponents)m_Filter).setCenterData(true);  performTest();}  }
class C{  public boolean isNoInline(String url){  return isSelected(url.toLowerCase(),_noInlinePatterns,true);}  }
class C{  public boolean isCountingDown(){  return mCountdownView.isCountingDown();}  }
class C{  public void redistributionDistribution(UseCaseConf useCaseConf,List dis,int typeDist,String messageForUser,Integer userType,Integer userId) throws ValidationException, DistributionException, SessionException, BookException {  Integer canDestWithoutList=new Integer(BookSession.invesicresConf(useCaseConf.getEntidadId()).getCanChangeDestWithoutList());  DistributionSession.redistributionDistribution(useCaseConf.getSessionID(),useCaseConf.getLocale(),useCaseConf.getEntidadId(),dis,userId,typeDist,canDestWithoutList,messageForUser,userType);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (namespace: ");  result.append(namespace);  result.append(", name: ");  result.append(name);  result.append(", documentation: ");  result.append(documentation);  result.append(')');  return result.toString();}  }
class C{  public ArrayIndexOutOfBoundsException(int index){  super("Array index out of range: " + index);}  }
class C{  private void changeSize(int delta){  if (delta != 0)   curSize.add(delta);}  }
class C{  public CodedException(String faultCode,String faultMessage){  super(faultMessage);  this.faultCode=faultCode;  faultDetail=ExceptionUtils.getStackTrace(this);  faultString=faultMessage;}  }
class C{  void onFeedLoadFinished(){  removeBusyIndicator();  swipeRefreshLayout.setRefreshing(false);  updateNoResultsTextView();}  }
class C{  public UnknownTag(String id){  super(id);}  }
class C{  private void buildLeftColumn(){  final Composite composite=new Composite(this.shell,SWT.NONE);  int numberOfRows=1;  if (this.style == TipStyle.TWO_COLUMNS_LARGE) {    numberOfRows=this.displayShowOnStartup ? 5 : 4;  }  final GridData gd=new GridData(GridData.FILL,GridData.BEGINNING,false,true,1,numberOfRows);  composite.setLayoutData(gd);  final FillLayout compositeLayout=new FillLayout();  compositeLayout.marginWidth=2;  composite.setLayout(compositeLayout);  final Label label=new Label(composite,SWT.NONE);  if (this.image == null) {    final Image img=SWTGraphicUtil.createImageFromFile(BLUE_LIGHT_BULB);    label.setImage(img);    SWTGraphicUtil.addDisposer(this.shell,img);  } else {    label.setImage(this.image);  }}  }
class C{  public static float asin(float fValue){  if (-1.0f < fValue) {    if (fValue < 1.0f) {      return (float)Math.asin(fValue);    }    return HALF_PI;  }  return -HALF_PI;}  }
class C{  public HexTableModel(HexEditor editor){  this.editor=editor;  doc=new ByteBuffer(16);  bytesPerRow=16;  undoManager=new UndoManager();  columnNames=new String[17];  for (int i=0; i < 16; i++) {    columnNames[i]="+" + Integer.toHexString(i).toUpperCase();  }  columnNames[16]="ASCII Dump";  dumpColBuf=new char[16];  Arrays.fill(dumpColBuf,' ');  byteStrVals=new String[256];  for (int i=0; i < byteStrVals.length; i++) {    byteStrVals[i]=Integer.toHexString(i);  }  paddedLowerByteStrVals=new String[16];  for (int i=0; i < paddedLowerByteStrVals.length; i++) {    paddedLowerByteStrVals[i]="0" + Integer.toHexString(i);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.NOTEQUALS_OP___NOTEQUALS_OP_1:    setNotequalsOp_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.PARAMETER__BUILT_IN_FACET_KEY:    setBuiltInFacetKey(BUILT_IN_FACET_KEY_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void vMotionBeforeRegisterInterest(){}  }
class C{  public static String strMapToStr(Map<String,String> map){  StringBuilder sb=new StringBuilder();  if (map == null || map.isEmpty())   return sb.toString();  for (  Entry<String,String> entry : map.entrySet()) {    sb.append("< " + entry.getKey() + ", "+ entry.getValue()+ "> ");  }  return sb.toString();}  }
class C{  public static int firstNonSorted(int[] arr,int offset,int len){  if (len <= 1)   return -1;  int lower=arr[offset];  int end=offset + len;  for (int i=offset + 1; i < end; i++) {    int next=arr[i];    if (next <= lower) {      for (int j=i - 1; j > offset; j--) {        if (arr[j] < next)         return j + 1;      }      return offset;    }    lower=next;  }  return -1;}  }
class C{  private static RecognitionAudio audioFromBytes(byte[] bytes){  return RecognitionAudio.newBuilder().setContent(ByteString.copyFrom(bytes)).build();}  }
class C{  public void checkAssociationValidForUnregistration(Association assoc) throws IllegalArgumentException {  boolean isFileExtListEmpty=true;  if (assoc.getFileExtList() != null) {    isFileExtListEmpty=assoc.getFileExtList().isEmpty();  }  if ((assoc.getMimeType() == null) && isFileExtListEmpty) {    throw new IllegalArgumentException("The given association is invalid. It should " + "specify both the mimeType and fileExtensionList fields to perform this " + "operation.");  }}  }
class C{  public boolean isEnableInputScroll(){  return false;}  }
class C{  public void connect(NetworkInterface anotherInterface){  if (isScanning() && anotherInterface.getHost().isRadioActive() && isWithinRange(anotherInterface)&& !isConnected(anotherInterface)&& (this != anotherInterface)) {    Connection con=new VBRConnection(this.host,this,anotherInterface.getHost(),anotherInterface);    connect(con,anotherInterface);  }}  }
class C{  public static char bareHTMLEntityToChar(String bareEntity,char howToTranslateNbsp){  Character code=entityToChar.get(bareEntity);  if (code != null) {    return code;  }  code=entityToChar.get(bareEntity.toLowerCase());  if (code != null) {    return code;  }  if (bareEntity.length() == 4 && bareEntity.equals("nbsp") || bareEntity.equals("NBSP")) {    return howToTranslateNbsp;  }  if (bareEntity.length() < 2) {    return 0;  }  try {    if (bareEntity.charAt(0) == '#') {      final char secondChar=bareEntity.charAt(1);      if (secondChar == 'x' || secondChar == 'X') {        if (bareEntity.length() < 3) {          return 0;        }        return (char)Integer.parseInt(bareEntity.substring(2),16);      } else {        return (char)Integer.parseInt(bareEntity.substring(1));      }    } else {      return 0;    }  } catch (  NumberFormatException e) {    return 0;  }}  }
class C{  protected static short[][] unpackEncodedStringArray(String[] arr){  int numStates=arr.length;  short[][] result=new short[numStates][];  for (int i=0; i < numStates; i++) {    result[i]=DFA.unpackEncodedString(arr[i]);  }  return result;}  }
class C{  private Object[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  public CacheSpan touch(){  long now=System.currentTimeMillis();  File newCacheFile=getCacheFileName(file.getParentFile(),key,position,now);  file.renameTo(newCacheFile);  return CacheSpan.createCacheEntry(key,position,now,newCacheFile);}  }
class C{  public Sentence subst(Map<Variable,Term> theta,Sentence sentence){  return (Sentence)sentence.accept(this,theta);}  }
class C{  synchronized void release(AllocationImpl allocation){  byte[][] buffers=allocation.getBuffers();  allocatedBufferCount-=buffers.length;  int newRecycledBufferCount=recycledBufferCount + buffers.length;  if (recycledBuffers.length < newRecycledBufferCount) {    byte[][] newRecycledBuffers=new byte[newRecycledBufferCount * 2][];    if (recycledBufferCount > 0) {      System.arraycopy(recycledBuffers,0,newRecycledBuffers,0,recycledBufferCount);    }    recycledBuffers=newRecycledBuffers;  }  System.arraycopy(buffers,0,recycledBuffers,recycledBufferCount,buffers.length);  recycledBufferCount=newRecycledBufferCount;}  }
class C{  public static float nextAfter(final float start,final double direction){  if (direction < start) {    if (start == 0.0f) {      return -Float.MIN_VALUE;    }    final int bits=Float.floatToRawIntBits(start);    return Float.intBitsToFloat(bits + (bits > 0 ? -1 : 1));  } else   if (direction > start) {    final int bits=Float.floatToRawIntBits(start + 0.0f);    return Float.intBitsToFloat(bits + (bits >= 0 ? 1 : -1));  } else   if (start == direction) {    return (float)direction;  } else {    return start + (float)direction;  }}  }
class C{  public Quaternionf mul(Quaternionfc q){  return mul(q,this);}  }
class C{  public void addDocument(final JSONObject doc,final String type){  final HTTPRequest request=new HTTPRequest();  request.setRequestMethod(HTTPRequestMethod.PUT);  try {    request.setURL(new URL(SERVER + "/" + INDEX_NAME+ "/"+ type+ "/"+ doc.optString(Keys.OBJECT_ID)));    request.setPayload(doc.toString().getBytes("UTF-8"));    URL_FETCH_SVC.fetchAsync(request);  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Adds doc failed",e);  }}  }
class C{  private SynapsePolarityAndRandomizerPanel(final Window parent,final RandBehavior randState){  this.parent=parent;  this.randomizerState=randState;  creationPanel=true;  synapseGroup=null;}  }
class C{  public big addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public AnyToXYTransform(double nx,double ny,double nz){  setSourceNormal(nx,ny,nz);}  }
class C{  public void readFromParcel(Parcel in){  left=in.readFloat();  top=in.readFloat();  right=in.readFloat();  bottom=in.readFloat();}  }
class C{  protected void generateDataSet(){  try {    DataSource dataSource=(DataSource)this.applicationContext.getBean("datasourceDbUnit");    IDatabaseConnection connection=new DatabaseConnection(dataSource.getConnection());    QueryDataSet dataSet=new QueryDataSet(connection);    dataSet.addTable("SCR_ATTACHMENT","SELECT * FROM SCR_ATTACHMENT");    dataSet.addTable("SCR_ATTACHMENT_SIGN_INFO","SELECT * FROM SCR_ATTACHMENT_SIGN_INFO");    FlatXmlDataSet.write(dataSet,new FileOutputStream("c:\\temp\\dataSet.xml"));  } catch (  Exception ex) {    System.out.println("MAAAAAAAAAAAAAAAAAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLL");  }}  }
class C{  public static ServerSession newSession(ClashServices services,Connection clientConnection,Main.ServerCommand command) throws IOException {  ServerSession session=new ServerSession(services,clientConnection,command);  localSession.set(session);  try {    Thread t=new Thread(null,clientConnection.getName() + " server");    t.start();    t.join();  } catch (  InterruptedException e) {    session.shutdown();  } finally {    localSession.set(null);  }  return session;}  }
class C{  private static void validate(Object param){  if (param instanceof ConcurrentLinkedHashMap<?,?>) {    assertThat((ConcurrentLinkedHashMap<?,?>)param,is(valid()));  } else   if (param instanceof LinkedDeque<?>) {    assertThat((LinkedDeque<?>)param,is(validLinkedDeque()));  }}  }
class C{  public boolean isCollection(){  return collection;}  }
class C{  public void removeAllInspectors(boolean killDraggedOutWindowsToo){  stopAllInspectors(killDraggedOutWindowsToo);  if (killDraggedOutWindowsToo) {    Iterator i=allInspectors.keySet().iterator();    while (i.hasNext()) {      Inspector inspector=(Inspector)(i.next());      inspector.disposeFrame();    }    allInspectors=new WeakHashMap();  }  inspectorStoppables=new Vector();  inspectorNames=new Vector();  inspectorToolbars=new Vector();  resetInspectors(-1);}  }
class C{  public ArrayGeneratorBuilder<Integer> ofIntegers(Source<Integer> source){  return new ArrayGeneratorBuilder<Integer>(source,Integer.class);}  }
class C{  public double manhattanDistance(final Int2D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  return dx + dy;}  }
class C{  @Override protected void update(){  super.update();  T entity=this.entity;  if (quantityChanged && (entity != null)) {    quantityChanged=false;    quantitySprite=getQuantitySprite(entity);  }}  }
class C{  @DSComment("Scroller") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:11.181 -0500",hash_original_method="2558578E34A043045AE1AF32A3800D82",hash_generated_method="F9CD515A4E2C5B16D0DE692CF1A61742") public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public Segment firstSegment(){  assertOpen();  Map.Entry<Long,Segment> segment=segments.firstEntry();  return segment != null ? segment.getValue() : null;}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  @SuppressWarnings("unchecked") public static void main(String[] args){  Generator<IPoint> generator[]=new Generator[2];  generator[0]=new CircleGenerator(1000);  generator[1]=new UniformGenerator();  TrialSuite sorting=new TrialSuite();  TrialSuite andrew=new TrialSuite();  TrialSuite heap=new TrialSuite();  TrialSuite balanced=new TrialSuite();  int NUM_TRIALS=20;  System.out.println("Trials with " + generator);  for (int g=0; g < generator.length; g++) {    System.out.println("Generator:" + generator[g] + "\n");    System.out.println("-----------------------------------------");    int n=1024;    IConvexHull convexHullScan=new ConvexHullScan();    IConvexHull heapConvexHull=new HeapAndrew();    IConvexHull balancedConvexHull=new BalancedTreeAndrew();    for (int i=1; i < 7; i++) {      IPoint[] points=generator[g].generate(n);      System.out.println(i + "...");      System.gc();      for (int t=0; t < NUM_TRIALS; t++) {        System.gc();        long now=System.currentTimeMillis();        IPoint[] hulls0=convexHullScan.compute(points);        long now2=System.currentTimeMillis();        andrew.addTrial(n,now,now2);        System.gc();        now=System.currentTimeMillis();        IPoint[] hulls1=heapConvexHull.compute(points);        now2=System.currentTimeMillis();        heap.addTrial(n,now,now2);        System.gc();        now=System.currentTimeMillis();        IPoint[] hulls2=balancedConvexHull.compute(points);        now2=System.currentTimeMillis();        balanced.addTrial(n,now,now2);        System.gc();        now=System.currentTimeMillis();        new HeapSort<IPoint>().sort(points,0,n - 1,IPoint.xy_sorter);        now2=System.currentTimeMillis();        sorting.addTrial(n,now,now2);        if (hulls0.length != hulls1.length || hulls0.length != hulls2.length) {          System.err.println("FAILED with different sizes");        }        new HeapSort<IPoint>().sort(hulls0,0,hulls0.length - 1,IPoint.xy_sorter);        new HeapSort<IPoint>().sort(hulls1,0,hulls1.length - 1,IPoint.xy_sorter);        new HeapSort<IPoint>().sort(hulls2,0,hulls2.length - 1,IPoint.xy_sorter);        for (int h=0; h < hulls0.length; h++) {          if (!hulls0[h].equals(hulls1[h])) {            System.err.println("FAILED with different points:" + hulls0[h] + ","+ hulls1[h]);            outputDiff(hulls0,hulls1);          }          if (!hulls0[h].equals(hulls2[h])) {            System.err.println("FAILED with different points:" + hulls0[h] + ","+ hulls2[h]);            outputDiff(hulls0,hulls1);          }        }      }      n*=2;    }    System.out.println("Andrew");    System.out.println(andrew.computeTable());    System.out.println("Heap");    System.out.println(heap.computeTable());    System.out.println("Balanced");    System.out.println(balanced.computeTable());    System.out.println("Sorting only");    System.out.println(sorting.computeTable());  }}  }
class C{  private String parseQuotedToken(final char[] terminators){  char ch;  i1=pos;  i2=pos;  boolean quoted=false;  boolean charEscaped=false;  while (hasChar()) {    ch=chars[pos];    if (!quoted && isOneOf(ch,terminators)) {      break;    }    if (!charEscaped && ch == '"') {      quoted=!quoted;    }    charEscaped=(!charEscaped && ch == '\\');    i2++;    pos++;  }  return getToken(true);}  }
class C{  private void checkForActivityDurationLessThanZeroUtilityDuration(){  LOG.info("Consistency check for zero activity duration.");  BufferedWriter writer=IOUtils.getBufferedWriter(this.outputDir + "analysis/negativeUtil_perfActivities.txt");  int zeroUtilDurCount=0;  SortedMap<String,Double> actType2ZeroUtilDuration=getZeroUtilDuration();  try {    writer.write("Person \t activity \t startTime \t endTime \t zeroUtilDuration \n");    for (    Person p : sc.getPopulation().getPersons().values()) {      for (      PlanElement pe : p.getSelectedPlan().getPlanElements()) {        if (pe instanceof Activity) {          double dur=((Activity)pe).getEndTime() - ((Activity)pe).getStartTime();          double zeroUtilDur=actType2ZeroUtilDuration.get(((Activity)pe).getType());          if (dur <= zeroUtilDur) {            if (zeroUtilDurCount < 1) {              LOG.warn("Activity duration of person " + p.toString() + " for activity "+ ((Activity)pe).getType()+ " is "+ dur+ ". Utility of performing is zero at (=zero utility duration)"+ zeroUtilDur+ " sec. Any duration less than this will result in lesser score.");              LOG.warn(Gbl.ONLYONCE);            }            zeroUtilDurCount++;            writer.write(p.getId() + "\t" + ((Activity)pe).getType()+ "\t"+ ((Activity)pe).getStartTime()+ "\t"+ ((Activity)pe).getEndTime()+ "\t"+ zeroUtilDur+ "\n");          }        }      }    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written. Reason - " + e);  }  if (zeroUtilDurCount > 0)   LOG.warn("There are " + zeroUtilDurCount + " instances where person have activity duration equal to or less than zero utility duration. Check for written file for detailed discription.");}  }
class C{  public static long[] toArray(List<Long> items){  long[] array=new long[items.size()];  int i=0;  for (  Long item : items) {    array[i++]=item;  }  return array;}  }
class C{  public void draw(Graphics2D g2,Rectangle2D area,ChartRenderingInfo info){  draw(g2,area,null,info);}  }
class C{  public Builder(OnCardClickListener listener,String tag){  mCard=new Card();  mCard.mTag=tag;  mCard.mClickListener=listener;}  }
class C{  public void doAnimation(float x,float y){  startDrawAnimation(x,y);  if (mZoomAnimation) {    this.startAnimation(mScaleAnimation);  }}  }
class C{  public static void main(String args[]){}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(BlobRegressionTest.class);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  IDebugCounter registerCounterLocal(IDebugCounterService countersService,String hierarchy,String stringId,String messageType){  String counterHierarchy=stringId + hierarchy + "/"+ messageType;  String counterDescription="Number of " + messageType + " messages in this connection";  return countersService.registerCounter(COUNTER_MODULE,counterHierarchy,counterDescription);}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  ClassDeclaration c=null;  boolean isArray=false;  boolean staticRef=false;  MemberDefinition implMethod=null;  ClassDefinition ctxClass=ctx.field.getClassDefinition();  Expression args[]=this.args;  if (id.equals(idInit)) {    ClassDefinition conCls=ctxClass;    try {      Expression conOuter=null;      if (right instanceof SuperExpression) {        conCls=conCls.getSuperClass().getClassDefinition(env);        conOuter=((SuperExpression)right).outerArg;      } else       if (right instanceof ThisExpression) {        conOuter=((ThisExpression)right).outerArg;      }      args=NewInstanceExpression.insertOuterLink(env,ctx,where,conCls,conOuter,args);    } catch (    ClassNotFound ee) {    }  }  Type argTypes[]=new Type[args.length];  ClassDefinition sourceClass=ctxClass;  try {    if (right == null) {      staticRef=ctx.field.isStatic();      ClassDefinition cdef=ctxClass;      MemberDefinition m=null;      for (; cdef != null; cdef=cdef.getOuterClass()) {        m=cdef.findAnyMethod(env,id);        if (m != null) {          break;        }      }      if (m == null) {        c=ctx.field.getClassDeclaration();      } else {        c=cdef.getClassDeclaration();        if (m.getClassDefinition() != cdef) {          ClassDefinition cdef2=cdef;          while ((cdef2=cdef2.getOuterClass()) != null) {            MemberDefinition m2=cdef2.findAnyMethod(env,id);            if (m2 != null && m2.getClassDefinition() == cdef2) {              env.error(where,"inherited.hides.method",id,cdef.getClassDeclaration(),cdef2.getClassDeclaration());              break;            }          }        }      }    } else {      if (id.equals(idInit)) {        int thisN=ctx.getThisNumber();        if (!ctx.field.isConstructor()) {          env.error(where,"invalid.constr.invoke");          return vset.addVar(thisN);        }        if (!vset.isReallyDeadEnd() && vset.testVar(thisN)) {          env.error(where,"constr.invoke.not.first");          return vset;        }        vset=vset.addVar(thisN);        if (right instanceof SuperExpression) {          vset=right.checkAmbigName(env,ctx,vset,exp,this);        } else {          vset=right.checkValue(env,ctx,vset,exp);        }      } else {        vset=right.checkAmbigName(env,ctx,vset,exp,this);        if (right.type == Type.tPackage) {          FieldExpression.reportFailedPackagePrefix(env,right);          return vset;        }        if (right instanceof TypeExpression) {          staticRef=true;        }      }      if (right.type.isType(TC_CLASS)) {        c=env.getClassDeclaration(right.type);      } else       if (right.type.isType(TC_ARRAY)) {        isArray=true;        c=env.getClassDeclaration(Type.tObject);      } else {        if (!right.type.isType(TC_ERROR)) {          env.error(where,"invalid.method.invoke",right.type);        }        return vset;      }      if (right instanceof FieldExpression) {        Identifier id=((FieldExpression)right).id;        if (id == idThis) {          sourceClass=((FieldExpression)right).clazz;        } else         if (id == idSuper) {          isSuper=true;          sourceClass=((FieldExpression)right).clazz;        }      } else       if (right instanceof SuperExpression) {        isSuper=true;      }      if (id != idInit) {        if (!FieldExpression.isTypeAccessible(where,env,right.type,sourceClass)) {          ClassDeclaration cdecl=sourceClass.getClassDeclaration();          if (staticRef) {            env.error(where,"no.type.access",id,right.type.toString(),cdecl);          } else {            env.error(where,"cant.access.member.type",id,right.type.toString(),cdecl);          }        }      }    }    boolean hasErrors=false;    if (id.equals(idInit)) {      vset=vset.clearVar(ctx.getThisNumber());    }    for (int i=0; i < args.length; i++) {      vset=args[i].checkValue(env,ctx,vset,exp);      argTypes[i]=args[i].type;      hasErrors=hasErrors || argTypes[i].isType(TC_ERROR);    }    if (id.equals(idInit)) {      vset=vset.addVar(ctx.getThisNumber());    }    if (hasErrors) {      return vset;    }    clazz=c.getClassDefinition(env);    if (field == null) {      field=clazz.matchMethod(env,sourceClass,id,argTypes);      if (field == null) {        if (id.equals(idInit)) {          if (diagnoseMismatch(env,args,argTypes))           return vset;          String sig=clazz.getName().getName().toString();          sig=Type.tMethod(Type.tError,argTypes).typeString(sig,false,false);          env.error(where,"unmatched.constr",sig,c);          return vset;        }        String sig=id.toString();        sig=Type.tMethod(Type.tError,argTypes).typeString(sig,false,false);        if (clazz.findAnyMethod(env,id) == null) {          if (ctx.getField(env,id) != null) {            env.error(where,"invalid.method",id,c);          } else {            env.error(where,"undef.meth",sig,c);          }        } else         if (diagnoseMismatch(env,args,argTypes)) {        } else {          env.error(where,"unmatched.meth",sig,c);        }        return vset;      }    }    type=field.getType().getReturnType();    if (staticRef && !field.isStatic()) {      env.error(where,"no.static.meth.access",field,field.getClassDeclaration());      return vset;    }    if (field.isProtected() && !(right == null) && !(right instanceof SuperExpression || (right instanceof FieldExpression && ((FieldExpression)right).id == idSuper))&& !sourceClass.protectedAccess(env,field,right.type)) {      env.error(where,"invalid.protected.method.use",field.getName(),field.getClassDeclaration(),right.type);      return vset;    }    if (right instanceof FieldExpression && ((FieldExpression)right).id == idSuper) {      if (!field.isPrivate()) {        if (sourceClass != ctxClass) {          implMethod=sourceClass.getAccessMember(env,ctx,field,true);        }      }    }    if (implMethod == null && field.isPrivate()) {      ClassDefinition cdef=field.getClassDefinition();      if (cdef != ctxClass) {        implMethod=cdef.getAccessMember(env,ctx,field,false);      }    }    if (field.isAbstract() && (right != null) && (right.op == SUPER)) {      env.error(where,"invoke.abstract",field,field.getClassDeclaration());      return vset;    }    if (field.reportDeprecated(env)) {      if (field.isConstructor()) {        env.error(where,"warn.constr.is.deprecated",field);      } else {        env.error(where,"warn.meth.is.deprecated",field,field.getClassDefinition());      }    }    if (field.isConstructor() && ctx.field.equals(field)) {      env.error(where,"recursive.constr",field);    }    if (sourceClass == ctxClass) {      ClassDefinition declarer=field.getClassDefinition();      if (!field.isConstructor() && declarer.isPackagePrivate() && !declarer.getName().getQualifier().equals(sourceClass.getName().getQualifier())) {        field=MemberDefinition.makeProxyMember(field,clazz,env);      }    }    sourceClass.addDependency(field.getClassDeclaration());    if (sourceClass != ctxClass) {      ctxClass.addDependency(field.getClassDeclaration());    }  } catch (  ClassNotFound ee) {    env.error(where,"class.not.found",ee.name,ctx.field);    return vset;  }catch (  AmbiguousMember ee) {    env.error(where,"ambig.field",id,ee.field1,ee.field2);    return vset;  }  if ((right == null) && !field.isStatic()) {    right=ctx.findOuterLink(env,where,field);    vset=right.checkValue(env,ctx,vset,exp);  }  argTypes=field.getType().getArgumentTypes();  for (int i=0; i < args.length; i++) {    args[i]=convert(env,ctx,argTypes[i],args[i]);  }  if (field.isConstructor()) {    MemberDefinition m=field;    if (implMethod != null) {      m=implMethod;    }    int nargs=args.length;    Expression[] newargs=args;    if (nargs > this.args.length) {      Expression rightI;      if (right instanceof SuperExpression) {        rightI=new SuperExpression(right.where,ctx);        ((SuperExpression)right).outerArg=args[0];      } else       if (right instanceof ThisExpression) {        rightI=new ThisExpression(right.where,ctx);      } else {        throw new CompilerError("this.init");      }      if (implMethod != null) {        newargs=new Expression[nargs + 1];        this.args=new Expression[nargs];        newargs[0]=args[0];        this.args[0]=newargs[1]=new NullExpression(where);        for (int i=1; i < nargs; i++) {          this.args[i]=newargs[i + 1]=args[i];        }      } else {        for (int i=1; i < nargs; i++) {          this.args[i - 1]=args[i];        }      }      implementation=new MethodExpression(where,rightI,m,newargs);      implementation.type=type;    } else {      if (implMethod != null) {        newargs=new Expression[nargs + 1];        newargs[0]=new NullExpression(where);        for (int i=0; i < nargs; i++) {          newargs[i + 1]=args[i];        }      }      implementation=new MethodExpression(where,right,m,newargs);    }  } else {    if (args.length > this.args.length) {      throw new CompilerError("method arg");    }    if (implMethod != null) {      Expression oldargs[]=this.args;      if (field.isStatic()) {        Expression call=new MethodExpression(where,null,implMethod,oldargs);        implementation=new CommaExpression(where,right,call);      } else {        int nargs=oldargs.length;        Expression newargs[]=new Expression[nargs + 1];        newargs[0]=right;        for (int i=0; i < nargs; i++) {          newargs[i + 1]=oldargs[i];        }        implementation=new MethodExpression(where,null,implMethod,newargs);      }    }  }  if (ctx.field.isConstructor() && field.isConstructor() && (right != null)&& (right.op == SUPER)) {    Expression e=makeVarInits(env,ctx);    if (e != null) {      if (implementation == null)       implementation=(Expression)this.clone();      implementation=new CommaExpression(where,implementation,e);    }  }  ClassDeclaration exceptions[]=field.getExceptions(env);  if (isArray && (field.getName() == idClone) && (field.getType().getArgumentTypes().length == 0)) {    exceptions=new ClassDeclaration[0];    for (Context p=ctx; p != null; p=p.prev) {      if (p.node != null && p.node.op == TRY) {        ((TryStatement)p.node).arrayCloneWhere=where;      }    }  }  for (int i=0; i < exceptions.length; i++) {    if (exp.get(exceptions[i]) == null) {      exp.put(exceptions[i],this);    }  }  if (ctx.field.isConstructor() && field.isConstructor() && (right != null)&& (right.op == THIS)) {    ClassDefinition cls=field.getClassDefinition();    for (MemberDefinition f=cls.getFirstMember(); f != null; f=f.getNextMember()) {      if (f.isVariable() && f.isBlankFinal() && !f.isStatic()) {        vset=vset.addVar(ctx.getFieldNumber(f));      }    }  }  return vset;}  }
class C{  public boolean isSetEchoRequest(){  return this.echoRequest != null;}  }
class C{  protected void fixupElementNS(Node node) throws SAXException {  String namespaceURI=((Element)node).getNamespaceURI();  String prefix=((Element)node).getPrefix();  String localName=((Element)node).getLocalName();  if (namespaceURI != null) {    prefix=prefix == null ? "" : prefix;    String inScopeNamespaceURI=fNSBinder.getURI(prefix);    if ((inScopeNamespaceURI != null && inScopeNamespaceURI.equals(namespaceURI))) {    } else {      if ((fFeatures & NAMESPACEDECLS) != 0) {        if ("".equals(prefix) || "".equals(namespaceURI)) {          ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX,namespaceURI);        } else {          ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX + ":" + prefix,namespaceURI);        }      }      fLocalNSBinder.declarePrefix(prefix,namespaceURI);      fNSBinder.declarePrefix(prefix,namespaceURI);    }  } else {    if (localName == null || "".equals(localName)) {      String msg=Utils.messages.createMessage(MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,new Object[]{node.getNodeName()});      if (fErrorHandler != null) {        fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,null,null,null));      }    } else {      namespaceURI=fNSBinder.getURI("");      if (namespaceURI != null && namespaceURI.length() > 0) {        ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX,"");        fLocalNSBinder.declarePrefix("","");        fNSBinder.declarePrefix("","");      }    }  }}  }
class C{  public static Border createBorderStyle(final PdfObject BS,final Color borderColor,final Color borderBackgroundColor,final float scaling){  if (borderBackgroundColor == null && printouts) {    System.out.println("background border color null");  }  if (borderColor == null) {    if (printouts) {      System.out.println("border color null");    }    return null;  }  Border insideBorder=null;  int w=-1;  if (BS != null) {    w=BS.getInt(PdfDictionary.W);  }  if (w < 0) {    w=1;  }  final float ws=w * scaling;  w=(int)(ws + 0.5);  int style=PdfDictionary.S;  if (BS != null) {    style=BS.getNameAsConstant(PdfDictionary.S);    if (style == PdfDictionary.Unknown) {      style=PdfDictionary.S;    }    final int xfaBorderStyle=BS.getNameAsConstant(PdfDictionary.X);    if (xfaBorderStyle != -1) {      w/=2;    }  }switch (style) {case PdfDictionary.U:    insideBorder=BorderFactory.createMatteBorder(0,0,w,0,borderColor);  break;case PdfDictionary.I:insideBorder=BorderFactory.createEtchedBorder(borderColor,borderBackgroundColor);break;case PdfDictionary.B:insideBorder=BorderFactory.createBevelBorder(BevelBorder.LOWERED,borderColor,borderBackgroundColor);break;case PdfDictionary.S:insideBorder=BorderFactory.createLineBorder(borderColor,w);break;case PdfDictionary.D:final PdfArrayIterator dashPattern=BS.getMixedArray(PdfDictionary.D);int current_line_dash_phase=0;float[] current_line_dash_array=new float[1];final int count=dashPattern.getTokenCount();if (count > 0) {current_line_dash_array=dashPattern.getNextValueAsFloatArray();}if (count > 1) {current_line_dash_phase=dashPattern.getNextValueAsInteger();}if (w < 0) {w=1;}final Stroke current_stroke=new BasicStroke(w,0,0,1,current_line_dash_array,current_line_dash_phase);insideBorder=new DashBorder(current_stroke,borderColor);break;}Border outsideBorder=new EmptyBorder(0,0,0,0);if (BS != null) {final int xfaBorderStyle=BS.getNameAsConstant(PdfDictionary.X);if (xfaBorderStyle != -1) {final Border xfaBorder=BorderFactory.createLineBorder(borderColor,w);switch (xfaBorderStyle) {case PdfDictionary.R:outsideBorder=xfaBorder;break;}}}return new CompoundBorder(outsideBorder,insideBorder);}  }
class C{  public static String copyToString(InputStream in,Charset charset) throws IOException {  Assert.notNull(in,"No InputStream specified");  StringBuilder out=new StringBuilder();  InputStreamReader reader=new InputStreamReader(in,charset);  char[] buffer=new char[BUFFER_SIZE];  int bytesRead=-1;  while ((bytesRead=reader.read(buffer)) != -1) {    out.append(buffer,0,bytesRead);  }  return out.toString();}  }
class C{  private static Pair<String,String> offsetRRX(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){  final String address=environment.getNextVariableString();  final String index=environment.getNextVariableString();  final String tmpVar=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,bt,"C",wd,String.valueOf(31),dw,tmpVar1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,bt,String.valueOf(-1),dw,tmpVar2));  instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpVar1,dw,tmpVar2,dw,tmpVar3));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar3,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {  if (m_elemContext.m_startTagOpen) {    ensurePrefixIsDeclared(uri,rawName);    addAttributeAlways(uri,localName,rawName,type,value,false);  }}  }
class C{  public void normalize(){  if (data instanceof NumericTable) {    for (int i=0; i < this.getSelectedColumns().length; i++) {      ((NumericTable)data).normalizeColumn(getSelectedColumns()[i] - 1);    }  }}  }
class C{  public Iterator fieldValuesIterator(){  return super.iterator();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:06.143 -0500",hash_original_method="A5B4139EF2A7D591E843D1D3DA56504C",hash_generated_method="490E40B28DAF1C41715EE733C1CCE6DF") public void readExternal(ObjectInput objectInput) throws IOException {  numOfEntries=objectInput.readInt();  if (countryCallingCodes == null || countryCallingCodes.length < numOfEntries) {    countryCallingCodes=new int[numOfEntries];  }  if (availableLanguages == null) {    availableLanguages=new ArrayList<Set<String>>();  }  for (int i=0; i < numOfEntries; i++) {    countryCallingCodes[i]=objectInput.readInt();    int numOfLangs=objectInput.readInt();    Set<String> setOfLangs=new HashSet<String>();    for (int j=0; j < numOfLangs; j++) {      setOfLangs.add(objectInput.readUTF());    }    availableLanguages.add(setOfLangs);  }}  }
class C{  public void add(Permission permission){  if (!(permission instanceof BasicPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");  BasicPermission bp=(BasicPermission)permission;  if (permClass == null) {    permClass=bp.getClass();  } else {    if (bp.getClass() != permClass)     throw new IllegalArgumentException("invalid permission: " + permission);  }synchronized (this) {    perms.put(bp.getCanonicalName(),permission);  }  if (!all_allowed) {    if (bp.getCanonicalName().equals("*"))     all_allowed=true;  }}  }
class C{  @InService(SegmentServiceImpl.class) public Page writeCheckpoint(TableKelp table,OutSegment sOut,long oldSequence,int saveLength,int tail,int saveSequence) throws IOException {  return null;}  }
class C{  public PluginIntentFilter(){  mPriority=0;  mActions=new ArrayList<String>();}  }
class C{  void stopAnimation(){  mAnimation=null;  mTransformation=null;  if (mIndeterminateDrawable instanceof Animatable) {    ((Animatable)mIndeterminateDrawable).stop();    mShouldStartAnimationDrawable=false;  }  postInvalidate();}  }
class C{  public static JsonObject unmodifiableObject(JsonObject object){  return new JsonObject(object,true);}  }
class C{  private LRAction searchSingleReduction(){  Reduce act=null;  for (  Terminal t : table.getActionTable().getColumns()) {    LRAction act2=table.getActionTable().get(currentState,t);    if (act2 instanceof Reduce) {      if (act == null)       act=(Reduce)act2; else       if (((Reduce)act2).getProduction() != act.getProduction())       return null;    } else     if (act2 instanceof Shift)     return null;  }  return act;}  }
class C{  String explain(boolean multiline,String prefix,Schema schema){  StringBuilder sb=new StringBuilder();  sb.append("[").append(rule.desc).append("]");  for (Iterator<Fact> iter=sources.iterator(); iter.hasNext(); ) {    Fact source=iter.next();    if (multiline) {      sb.append("\n").append(prefix).append("   |");      sb.append("\n").append(prefix).append("   +---");      if (iter.hasNext()) {        sb.append(source.explain(multiline,prefix + "   |   ",schema));      } else {        sb.append(source.explain(multiline,prefix + "       ",schema));      }    } else {      sb.append(" (");      sb.append(source.explain(multiline,"",schema));      sb.append(")");    }  }  return sb.toString();}  }
class C{  protected long newBuffer(){  return dir.memory().allocate(BUFFER_SIZE);}  }
class C{  public String[] types(){  return this.types;}  }
class C{  public void testLongReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LongPoint("value",3000000000L));  doc.add(new StoredField("value",3000000000L));  writer.addDocument(doc);  doc=new Document();  doc.add(new LongPoint("value",-1));  doc.add(new StoredField("value",-1));  writer.addDocument(doc);  doc=new Document();  doc.add(new LongPoint("value",4));  doc.add(new StoredField("value",4));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LONG_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.LONG,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("3000000000",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("-1",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public void detachView(){  if (component == null) {    return;  }  component.getPresenter().detachView();}  }
class C{  public long push(final String stack,final byte[] b) throws IOException, SpaceExceededException {  Stack s=getStack(stack);  if (s == null)   return -1;  return s.push(b);}  }
class C{  public <K>Map<ClusterNode,Collection<K>> mapKeysToNodes(@Nullable String cacheName,@Nullable Collection<? extends K> keys) throws IgniteCheckedException {  return keysToNodes(cacheName,keys);}  }
class C{  public StandardAlgorithms(){  super();}  }
class C{  public double calcRadius(MyIdxList list1,MyIdxList list2,Instance pivot,Instances insts){  double radius=Double.NEGATIVE_INFINITY;  for (int i=0; i < list1.length(); i++) {    double dist=m_DistanceFunction.distance(pivot,insts.instance(list1.get(i).idx));    if (dist > radius) {      radius=dist;    }  }  for (int j=0; j < list2.length(); j++) {    double dist=m_DistanceFunction.distance(pivot,insts.instance(list2.get(j).idx));    if (dist > radius) {      radius=dist;    }  }  return radius;}  }
class C{  public synchronized void forceKeyExchange() throws IOException {  if (tm == null)   throw new IllegalStateException("You need to establish a connection first.");  tm.forceKeyExchange(cryptoWishList,dhgexpara);}  }
class C{  public void addNamespacePrefixes(Map<String,String> prefixNamespaceMap){  namespacePrefixes.putAll(prefixNamespaceMap);}  }
class C{  public FriendlySwitchCompat(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  final Resources res=getResources();  mTextPaint.density=res.getDisplayMetrics().density;  final TintTypedArray a=TintTypedArray.obtainStyledAttributes(context,attrs,R.styleable.SwitchCompat,defStyleAttr,0);  mThumbDrawable=a.getDrawable(R.styleable.SwitchCompat_android_thumb);  if (mThumbDrawable != null) {    mThumbDrawable.setCallback(this);  }  mTrackDrawable=a.getDrawable(R.styleable.SwitchCompat_track);  if (mTrackDrawable != null) {    mTrackDrawable.setCallback(this);  }  mTextOn=a.getText(R.styleable.SwitchCompat_android_textOn);  mTextOff=a.getText(R.styleable.SwitchCompat_android_textOff);  mShowText=a.getBoolean(R.styleable.SwitchCompat_showText,true);  mThumbTextPadding=a.getDimensionPixelSize(R.styleable.SwitchCompat_thumbTextPadding,0);  mSwitchMinWidth=a.getDimensionPixelSize(R.styleable.SwitchCompat_switchMinWidth,0);  mSwitchPadding=a.getDimensionPixelSize(R.styleable.SwitchCompat_switchPadding,0);  mSplitTrack=a.getBoolean(R.styleable.SwitchCompat_splitTrack,false);  ColorStateList thumbTintList=a.getColorStateList(R.styleable.SwitchCompat_thumbTint);  if (thumbTintList != null) {    mThumbTintList=thumbTintList;    mHasThumbTint=true;  }  PorterDuff.Mode thumbTintMode=DrawableUtils.parseTintMode(a.getInt(R.styleable.SwitchCompat_thumbTintMode,-1),null);  if (mThumbTintMode != thumbTintMode) {    mThumbTintMode=thumbTintMode;    mHasThumbTintMode=true;  }  if (mHasThumbTint || mHasThumbTintMode) {    applyThumbTint();  }  ColorStateList trackTintList=a.getColorStateList(R.styleable.SwitchCompat_trackTint);  if (trackTintList != null) {    mTrackTintList=trackTintList;    mHasTrackTint=true;  }  PorterDuff.Mode trackTintMode=DrawableUtils.parseTintMode(a.getInt(R.styleable.SwitchCompat_trackTintMode,-1),null);  if (mTrackTintMode != trackTintMode) {    mTrackTintMode=trackTintMode;    mHasTrackTintMode=true;  }  if (mHasTrackTint || mHasTrackTintMode) {    applyTrackTint();  }  final int appearance=a.getResourceId(R.styleable.SwitchCompat_switchTextAppearance,0);  if (appearance != 0) {    setSwitchTextAppearance(context,appearance);  }  a.recycle();  final ViewConfiguration config=ViewConfiguration.get(context);  mTouchSlop=config.getScaledTouchSlop();  mMinFlingVelocity=config.getScaledMinimumFlingVelocity();  refreshDrawableState();  setChecked(isChecked());}  }
class C{  private synchronized void resizeBuffers(){  sourceBufferSizeSamples=(int)AudioUtils.millis2Frames((long)sourceBufferTime,sourceSampleRate);  if (sourceBufferSizeSamples < minimumSamplesInHistory) {    sourceBufferSizeSamples=minimumSamplesInHistory;  }  if (sourceBufferSizeSamples < outSamples2inSamples(1)) {    sourceBufferSizeSamples=((int)outSamples2inSamples(1)) + 1;  }  if (historyBuffer == null) {    historyBuffer=new FloatSampleBuffer(getFormat().getChannels(),sourceBufferSizeSamples,sourceSampleRate);    historyBuffer.makeSilence();  }  historyBuffer.changeSampleCount(sourceBufferSizeSamples,true);  if (thisBuffer == null) {    thisBuffer=new FloatSampleBuffer(getFormat().getChannels(),sourceBufferSizeSamples,sourceSampleRate);  }  thisBuffer.changeSampleCount(sourceBufferSizeSamples,true);  if (TDebug.TraceAudioConverter && DEBUG_STREAM) {    TDebug.out("Initialized thisBuffer and historyBuffer with " + sourceBufferSizeSamples + " samples");  }}  }
class C{  public boolean isClickable(){  return false;}  }
class C{  public long writeValue(OutputStream out) throws IOException {  DataInputStream dis=getValueStream();  long size=0;  try {    int chunkSize;    while ((chunkSize=valueBufferInputStream.getRemain()) > 0) {      chunkSize=Math.min(chunkSize,MAX_VAL_TRANSFER_BUF_SIZE);      valTransferBuffer.setSize(chunkSize);      dis.readFully(valTransferBuffer.getBytes(),0,chunkSize);      out.write(valTransferBuffer.getBytes(),0,chunkSize);      size+=chunkSize;    }    return size;  }  finally {    dis.close();  }}  }
class C{  public Image resolveAMI(String amiID) throws APPlatformException {  LOGGER.debug("resolveAMI('{}') entered",amiID);  DescribeImagesRequest dir=new DescribeImagesRequest();  dir.withImageIds(amiID);  DescribeImagesResult describeImagesResult=getEC2().describeImages(dir);  List<Image> images=describeImagesResult.getImages();  for (  Image image : images) {    LOGGER.debug(image.getImageId() + "==" + image.getImageLocation()+ "=="+ image.getName());    return image;  }  throw new APPlatformException(Messages.getAll("error_invalid_image") + amiID);}  }
class C{  public boolean isPropertyListPattern(){  return _property_list_pattern;}  }
class C{  public RegionVersionHolder(long ver){  this.version=ver;}  }
class C{  public static CacheControl valueOf(final String value){  return CacheControlHeaderParser.fromString(value);}  }
class C{  private void loadStoredRoutes(){  log.debug("loadStoredRoutes");  HttpClientRequest selfRequest=selfClient.request(HttpMethod.GET,hookRootUri + HOOK_ROUTE_STORAGE_PATH + "?expand=1",null);  selfRequest.setTimeout(120000);  selfRequest.end();}  }
class C{  public static int product(int a,int b){  return a * b;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_domimplementationfeaturenoversion.class,args);}  }
class C{  public Object popCurrentFuncResult(){  return m_currentFuncResult.pop();}  }
class C{  @Override public void agg(Object newVal){  if (newVal instanceof byte[]) {    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);    buffer.rewind();    while (buffer.hasRemaining()) {      aggVal+=buffer.getDouble();      count+=buffer.getDouble();      firstTime=false;    }  } else   if (newVal instanceof Timestamp) {    aggVal+=((Timestamp)newVal).getTime();    count++;    firstTime=false;  } else   if (newVal instanceof Number) {    aggVal+=((Number)newVal).doubleValue();    count++;    firstTime=false;  }}  }
class C{  public DirectoryNotEmptyException(String dir){  super(dir);}  }
class C{  public static XMLTreeLocation before(String name){  return new XMLTreeLocation(LocationType.BEFORE,name);}  }
class C{  public void readXml(java.io.Reader reader) throws SQLException {  try {    if (reader != null) {      xmlReader.readXML(this,reader);      if (curPosBfrWrite == 0) {        this.beforeFirst();      } else {        this.absolute(curPosBfrWrite);      }    } else {      throw new SQLException(resBundle.handleGetObject("webrowsetimpl.invalidrd").toString());    }  } catch (  Exception e) {    throw new SQLException(e.getMessage());  }}  }
class C{  public static String toBits2(final long x,final int len){  final StringBuilder sb=new StringBuilder();  if (len <= 0 || len > 32) {    throw new IllegalArgumentException("length out of range=" + len);  }  final int left=64 - 2 * len;  long t=x << left;  for (int i=0; i < len; i++) {    sb.append(t < 0 ? "1" : "0");    t=t << 1;  }  sb.append(":");  for (int i=0; i < len; i++) {    sb.append(t < 0 ? "1" : "0");    t=t << 1;  }  assert t == 0;  return sb.toString();}  }
class C{  public void testEmptyCommits() throws Exception {  clearIndexWithReplication();  index(masterClient,"id","1","name","empty1");  emptyUpdate(masterClient,"commit","true");  pullFromMasterToSlave();  rQuery(1,"name:empty1",slaveClient);  assertVersions(masterClient,slaveClient);  emptyUpdate(masterClient,"commit","true");  pullFromMasterToSlave();  index(masterClient,"id","2","name","empty2");  emptyUpdate(masterClient,"commit","true");  pullFromMasterToSlave();  rQuery(1,"name:empty2",slaveClient);  assertVersions(masterClient,slaveClient);  index(masterClient,"id","3","name","empty3");  emptyUpdate(masterClient,"commit","true","openSearcher","false");  pullFromMasterToSlave();  rQuery(0,"name:empty3",masterClient);  rQuery(1,"name:empty3",slaveClient);  index(masterClient,"id","4","name","empty4");  emptyUpdate(masterClient,"commit","true");  pullFromMasterToSlave();  String q="name:(empty1 empty2 empty3 empty4)";  rQuery(4,q,masterClient);  rQuery(4,q,slaveClient);  assertVersions(masterClient,slaveClient);}  }
class C{  public static double guessDate(String s){  int i=s.length();  char c;  do {    i--;    c=s.charAt(i);  } while (i >= 0 && (Character.isDigit(c) || c == '.'));  if (i == s.length()) {    return 0.0;  }  return Double.parseDouble(s.substring(i + 1));}  }
class C{  protected JPanel createButtonsPanel(){  JPanel p=new JPanel(new FlowLayout(FlowLayout.RIGHT));  ButtonFactory bf=new ButtonFactory(bundle,this);  p.add(bf.createJButton("OKButton"));  p.add(bf.createJButton("CancelButton"));  return p;}  }
class C{  public int findSegment(Point2D.Double find,double tolerance){  Node v1, v2;  BezierPath tempPath=new BezierPath();  Node t1, t2;  tempPath.add(t1=new Node());  tempPath.add(t2=new Node());  for (int i=0, n=size() - 1; i < n; i++) {    v1=get(i);    v2=get(i + 1);    if (v1.mask == 0 && v2.mask == 0) {      if (Geom.lineContainsPoint(v1.x[0],v1.y[0],v2.x[0],v2.y[0],find.x,find.y,tolerance)) {        return i;      }    } else {      t1.setTo(v1);      t2.setTo(v2);      tempPath.invalidatePath();      if (tempPath.outlineContains(find,tolerance)) {        return i;      }    }  }  if (isClosed && size() > 1) {    v1=get(size() - 1);    v2=get(0);    if (v1.mask == 0 && v2.mask == 0) {      if (Geom.lineContainsPoint(v1.x[0],v1.y[0],v2.x[0],v2.y[0],find.x,find.y,tolerance)) {        return size() - 1;      }    } else {      t1.setTo(v1);      t2.setTo(v2);      tempPath.invalidatePath();      if (tempPath.outlineContains(find,tolerance)) {        return size() - 1;      }    }  }  return -1;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public void allowDetachToRelease(boolean allowRelease){}  }
class C{  Parser(byte[] info,ConstPool cp){  super(info);  pool=cp;}  }
class C{  public PingResponse isReachableByMethod(String name,HostAddress host) throws HostException {  PingResponse response=new PingResponse();  PingNotification notification=_isReachableByMethod(name,host);  response.addNotification(notification);  response.setReachable(notification.isReachable());  return response;}  }
class C{  private static FloatBuffer createVertexArray(float[] coords){  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * 4);  bb.order(ByteOrder.nativeOrder());  FloatBuffer fb=bb.asFloatBuffer();  fb.put(coords);  fb.position(0);  return fb;}  }
class C{  @SuppressWarnings("TryFinallyCanBeTryWithResources") public static List<Apn> query(Context context,String mcc,String mnc){  ArrayList<Apn> result=new ArrayList<>();  if (TextUtils.isEmpty(mcc) || TextUtils.isEmpty(mnc)) {    Log.e(TAG,"Invalid mcc or mnc. {mcc:\"" + mcc + "\", mnc=\""+ mnc+ "\"}");    return result;  }  XmlResourceParser parser=context.getResources().getXml(R.xml.apns);  try {    int eventType=parser.getEventType();    while (eventType != XmlPullParser.END_DOCUMENT) {      if (isAPNStartTag(parser) && matches(parser,mcc,mnc)) {        Apn apn=apnFromParser(parser);        if (!result.contains(apn)) {          result.add(apn);        }      }      eventType=parser.next();    }  } catch (  XmlPullParserException|IOException e) {    Log.e(TAG,"Exception thrown while getting APNs",e);  } finally {    parser.close();  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.257 -0400",hash_original_method="AC2D9AECE0766CF1B720C1F0AF234F2A",hash_generated_method="AC2D9AECE0766CF1B720C1F0AF234F2A") boolean inHalfOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) < 0));}  }
class C{  public String toString(){  String msg=super.toString();  if (_location != null) {    msg+=" (at line " + _location.getLineNumber() + ", column "+ _location.getColumnNumber()+ ")";  }  if (_nested != null) {    msg+=" caused by " + _nested.toString();  }  return msg;}  }
class C{  public boolean isEmployee(){  Object oo=get_Value(COLUMNNAME_IsEmployee);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isExpired(){  return paymentDetails.hasExpires() && System.currentTimeMillis() / 1000L > paymentDetails.getExpires();}  }
class C{  public void modelCreated(SessionEvent event){  getSessionSupport().fireSessionEvent(event);  setSessionChanged(true);}  }
class C{  public static void transferFromJournalToCashBook(Properties ctx,MCash cashJournal,int toCashBookId,int currencyId,BigDecimal amount,Timestamp dateAcct,String trxName) throws OperationException {  MCashBook fromCashBook=new MCashBook(ctx,cashJournal.getC_CashBook_ID(),trxName);  MCashBook toCashBook=new MCashBook(ctx,toCashBookId,trxName);  int fromBankAccountId=OrganisationManager.getCreateTransferBankAccount(ctx,fromCashBook.getAD_Org_ID(),currencyId,null);  int toBankAccountId=OrganisationManager.getCreateTransferBankAccount(ctx,toCashBook.getAD_Org_ID(),currencyId,null);  MCash toCash=MCash.get(ctx,toCashBookId,dateAcct,trxName);  String description=fromCashBook.getName() + " (CB) -> " + toCashBook.getName()+ " (CB)";  MCashLine fromCashLine=new MCashLine(cashJournal);  fromCashLine.setDescription(description);  fromCashLine.setC_Currency_ID(currencyId);  fromCashLine.setCashType(MCashLine.CASHTYPE_BankAccountTransfer);  fromCashLine.setC_BankAccount_ID(fromBankAccountId);  fromCashLine.setAmount(amount.negate());  fromCashLine.setIsGenerated(true);  PoManager.save(fromCashLine);  if (fromBankAccountId != toBankAccountId) {    transferBankToBank(ctx,fromBankAccountId,toBankAccountId,currencyId,amount,dateAcct,trxName);  }  MCashLine toCashLine=new MCashLine(toCash);  toCashLine.setDescription(description);  toCashLine.setC_Currency_ID(currencyId);  toCashLine.setCashType(MCashLine.CASHTYPE_BankAccountTransfer);  toCashLine.setC_BankAccount_ID(toBankAccountId);  toCashLine.setAmount(amount);  toCashLine.setIsGenerated(true);  PoManager.save(toCashLine);}  }
class C{  private void replaceFile(String file,String body) throws IOException {  try (OutputStream out=new BufferedOutputStream(new FileOutputStream(file))){    out.write(body.getBytes());  } }  }
class C{  private float normalizeTime(int index){  if (!mIsExiting)   return (float)mCurrentDuration[index] / mDuration; else   return 1f - (float)mCurrentDuration[index] / mDuration;}  }
class C{  public String convertAliasToNumber(String aliasName){  if (!aliasName.contains("'") && AliasDatabase.containsAlias(aliasName)) {    String[] res=AliasDatabase.getAlias(aliasName);    return res[1];  }  return aliasName;}  }
class C{  public NameSorter(boolean ascending,boolean ignoreThe){  super(ascending);  this.ignoreThe=ignoreThe;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String format(String[] d,String sep){  StringBuilder buffer=new StringBuilder();  for (int i=0; i < d.length; i++) {    if (i > 0) {      buffer.append(sep).append(d[i]);    } else {      buffer.append(d[i]);    }  }  return buffer.toString();}  }
class C{  void resetId(){  id=NativeCrypto.SSL_SESSION_session_id(sslSessionNativePointer);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static void checkIfCanceled() throws InterruptedException {  if (Thread.interrupted()) {    throw new InterruptedException();  }}  }
class C{  public boolean isInProgress(){  return is(IN_PROGRESS);}  }
class C{  private int hash(GraphicsConfiguration config,int w,int h,Object... args){  int hash;  hash=(config != null ? config.hashCode() : 0);  hash=31 * hash + w;  hash=31 * hash + h;  hash=31 * hash + Arrays.deepHashCode(args);  return hash;}  }
class C{  public static Document loadDocument(File file) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  return builder.parse(file);}  }
class C{  @Nullable public N node(@Nullable Object key,@Nullable IgnitePredicate<N>... p){  if (p == null || p.length == 0)   return node(key);  int hash=hash(key);  rw.readLock().lock();  try {    final int size=nodes.size();    if (size == 0)     return null;    Set<N> failed=null;    for (    SortedSet<N> set : circle.tailMap(hash,true).values()) {      for (      N n : set) {        if (failed != null && failed.contains(n))         continue;        if (apply(p,n))         return n;        if (failed == null)         failed=new GridLeanSet<>(size);        failed.add(n);        if (failed.size() == size)         return null;      }    }    for (    SortedSet<N> set : circle.headMap(hash,false).values()) {      for (      N n : set) {        if (failed != null && failed.contains(n))         continue;        if (apply(p,n))         return n;        if (failed == null)         failed=new GridLeanSet<>(size);        failed.add(n);        if (failed.size() == size)         return null;      }    }    return null;  }  finally {    rw.readLock().unlock();  }}  }
class C{  private void route(ConnectedClient from,TopicMessage message){  if (Arrays.equals(message.topic(),CONTROL_TOPIC)) {    handleControlMessage(from,message.message());  }  log.debug("Routing message on topic {}",message.topic());  log.debug("Subscriptions: {}",subscriptions);  for (  ConnectedClient client : subscriptions.column(ByteString.copyFrom(message.topic())).keySet()) {    log.debug("Routing from {} to {} message {}",from,client,message);    client.outgoing.offer(message);    client.UpdateSelector();  }}  }
class C{  public boolean isValidIndex(LinearLocation index){  return index.isValid(linearGeom);}  }
class C{  public ConePortrayal3D(Image image){  this(image,1f);}  }
class C{  public static Set<Property> asProperties(Collection<Resource> resources){  Set<Property> rslt=new HashSet<Property>();  for (  Resource r : resources) {    rslt.add(asProperty(r));  }  return rslt;}  }
class C{  public Message editMessageCaption(String chatId,Long messageId,String caption,InlineReplyMarkup inlineReplyMarkup){  if (caption != null && chatId != null && messageId != null) {    JSONObject jsonResponse=this.editMessageCaption(chatId,messageId,null,caption,inlineReplyMarkup);    if (jsonResponse != null) {      return MessageImpl.createMessage(jsonResponse.getJSONObject("result"),this);    }  }  return null;}  }
class C{  protected static Connection createSender(final MembershipManager mgr,final ConnectionTable t,final boolean preserveOrder,final DistributedMember remoteAddr,final boolean sharedResource,final long startTime,final long ackTimeout,final long ackSATimeout) throws IOException, DistributedSystemDisconnectedException {  boolean warningPrinted=false;  boolean success=false;  boolean firstTime=true;  Connection conn=null;  boolean interrupted=Thread.interrupted();  boolean severeAlertIssued=false;  boolean suspected=false;  long reconnectWaitTime=RECONNECT_WAIT_TIME;  boolean connectionErrorLogged=false;  try {    while (!success) {      t.getConduit().getCancelCriterion().checkCancelInProgress(null);      long now=System.currentTimeMillis();      if (!severeAlertIssued && ackSATimeout > 0 && startTime + ackTimeout < now) {        if (startTime + ackTimeout + ackSATimeout < now) {          if (remoteAddr != null) {            logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_UNABLE_TO_FORM_A_TCPIP_CONNECTION_TO_0_IN_OVER_1_SECONDS,new Object[]{remoteAddr,(ackSATimeout + ackTimeout) / 1000}));          }          severeAlertIssued=true;        } else         if (!suspected) {          if (remoteAddr != null) {            logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_UNABLE_TO_FORM_A_TCPIP_CONNECTION_TO_0_IN_OVER_1_SECONDS,new Object[]{remoteAddr,(ackTimeout) / 1000}));          }          mgr.suspectMember(remoteAddr,LocalizedStrings.Connection_UNABLE_TO_FORM_A_TCPIP_CONNECTION_IN_A_REASONABLE_AMOUNT_OF_TIME.toLocalizedString());          suspected=true;        }        reconnectWaitTime=Math.min(RECONNECT_WAIT_TIME,ackSATimeout - (now - startTime - ackTimeout));        if (reconnectWaitTime <= 0) {          reconnectWaitTime=RECONNECT_WAIT_TIME;        }      } else       if (!suspected && (startTime > 0) && (ackTimeout > 0)&& (startTime + ackTimeout < now)) {        mgr.suspectMember(remoteAddr,LocalizedStrings.Connection_UNABLE_TO_FORM_A_TCPIP_CONNECTION_IN_A_REASONABLE_AMOUNT_OF_TIME.toLocalizedString());        suspected=true;      }      if (firstTime) {        firstTime=false;        if (!mgr.memberExists(remoteAddr) || mgr.isShunned(remoteAddr) || mgr.shutdownInProgress()) {          throw new IOException("Member " + remoteAddr + " left the system");        }      } else {        if (AlertAppender.isThreadAlerting()) {          throw new IOException("Cannot form connection to alert listener " + remoteAddr);        }        interrupted=Thread.interrupted() || interrupted;        try {          Thread.sleep(reconnectWaitTime);        } catch (        InterruptedException ie) {          interrupted=true;          t.getConduit().getCancelCriterion().checkCancelInProgress(ie);        }        t.getConduit().getCancelCriterion().checkCancelInProgress(null);        if (giveUpOnMember(mgr,remoteAddr)) {          throw new IOException(LocalizedStrings.Connection_MEMBER_LEFT_THE_GROUP.toLocalizedString(remoteAddr));        }        if (!warningPrinted) {          warningPrinted=true;          logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_CONNECTION_ATTEMPTING_RECONNECT_TO_PEER__0,remoteAddr));        }        t.getConduit().stats.incReconnectAttempts();      }      try {        conn=null;        conn=new Connection(mgr,t,preserveOrder,remoteAddr,sharedResource);      } catch (      javax.net.ssl.SSLHandshakeException se) {        throw se;      }catch (      IOException ioe) {        if (giveUpOnMember(mgr,remoteAddr)) {          throw ioe;        }        t.getConduit().getCancelCriterion().checkCancelInProgress(null);        if ("Too many open files".equals(ioe.getMessage())) {          t.fileDescriptorsExhausted();        } else         if (!connectionErrorLogged) {          connectionErrorLogged=true;          logger.info(LocalizedMessage.create(LocalizedStrings.Connection_CONNECTION_FAILED_TO_CONNECT_TO_PEER_0_BECAUSE_1,new Object[]{sharedResource,preserveOrder,remoteAddr,ioe}));        }      } finally {        if (conn == null) {          t.getConduit().stats.incFailedConnect();        }      }      if (conn != null) {        try {          conn.attemptHandshake(t);          if (conn.isSocketClosed()) {            if (giveUpOnMember(mgr,remoteAddr)) {              throw new IOException(LocalizedStrings.Connection_MEMBER_LEFT_THE_GROUP.toLocalizedString(remoteAddr));            }            t.getConduit().getCancelCriterion().checkCancelInProgress(null);          } else {            success=true;          }        } catch (        DistributedSystemDisconnectedException e) {          throw e;        }catch (        ConnectionException e) {          if (giveUpOnMember(mgr,remoteAddr)) {            IOException ioe=new IOException(LocalizedStrings.Connection_HANDSHAKE_FAILED.toLocalizedString());            ioe.initCause(e);            throw ioe;          }          t.getConduit().getCancelCriterion().checkCancelInProgress(null);          logger.info(LocalizedMessage.create(LocalizedStrings.Connection_CONNECTION_HANDSHAKE_FAILED_TO_CONNECT_TO_PEER_0_BECAUSE_1,new Object[]{sharedResource,preserveOrder,remoteAddr,e}));        }catch (        IOException e) {          if (giveUpOnMember(mgr,remoteAddr)) {            throw e;          }          t.getConduit().getCancelCriterion().checkCancelInProgress(null);          logger.info(LocalizedMessage.create(LocalizedStrings.Connection_CONNECTION_HANDSHAKE_FAILED_TO_CONNECT_TO_PEER_0_BECAUSE_1,new Object[]{sharedResource,preserveOrder,remoteAddr,e}));          if (!sharedResource && "Too many open files".equals(e.getMessage())) {            t.fileDescriptorsExhausted();          }        } finally {          if (!success) {            try {              conn.requestClose(LocalizedStrings.Connection_FAILED_HANDSHAKE.toLocalizedString());            } catch (            Exception ignore) {            }            conn=null;          }        }      }    }    if (warningPrinted) {      logger.info(LocalizedMessage.create(LocalizedStrings.Connection_0_SUCCESSFULLY_REESTABLISHED_CONNECTION_TO_PEER_1,new Object[]{mgr.getLocalMember(),remoteAddr}));    }  }  finally {    try {      if (!success) {        if (conn != null) {          conn.requestClose(LocalizedStrings.Connection_FAILED_CONSTRUCTION.toLocalizedString());          conn=null;        }      }    }  finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }  if (conn == null) {    throw new ConnectionException(LocalizedStrings.Connection_CONNECTION_FAILED_CONSTRUCTION_FOR_PEER_0.toLocalizedString(remoteAddr));  }  if (preserveOrder && BATCH_SENDS) {    conn.createBatchSendBuffer();  }  conn.finishedConnecting=true;  return conn;}  }
class C{  private boolean replaceFieldSource(TestChromosome test,FieldStatement statement){  if (!statement.isStatic()) {    VariableReference source=statement.getSource();    List<VariableReference> objects=test.getTestCase().getObjects(source.getType(),statement.getPosition());    objects.remove(source);    if (!objects.isEmpty()) {      statement.setSource(Randomness.choice(objects));      test.setChanged(true);    }  }  return false;}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  getCurrentProcessor().skippedEntity(this,name);}  }
class C{  public void writeRawBytes(final ByteString value) throws IOException {  writeRawBytes(value,0,value.size());}  }
class C{  public AuditLogEntry(long id,Timestamp createTime,HiveOperation commandType,String command,List<String> outputDirectories,List<Table> referenceTables,List<Table> outputTables,List<NamedPartition> outputPartitions,Table inputTable,NamedPartition inputPartition){  this.id=id;  this.createTime=createTime;  this.commandType=commandType;  this.command=command;  this.referenceTables=referenceTables;  this.outputDirectories=outputDirectories;  this.outputTables=outputTables;  this.outputPartitions=outputPartitions;  this.inputTable=inputTable;  this.inputPartition=inputPartition;}  }
class C{  public RegressionDataSet(List<DataPoint> data,int predicting){  DataPoint tmp=data.get(0);  categories=new CategoricalData[tmp.numCategoricalValues()];  System.arraycopy(tmp.getCategoricalData(),0,categories,0,categories.length);  numNumerVals=tmp.numNumericalValues() - 1;  dataPoints=new ArrayList<DataPointPair<Double>>(data.size());  for (  DataPoint dp : data) {    Vec origV=dp.getNumericalValues();    Vec newVec;    double target=0;    if (origV.isSparse())     newVec=new SparseVector(origV.length() - 1,origV.nnz()); else     newVec=new DenseVector(origV.length() - 1);    for (    IndexValue iv : origV)     if (iv.getIndex() < predicting)     newVec.set(iv.getIndex(),iv.getValue()); else     if (iv.getIndex() == predicting)     target=iv.getValue(); else     newVec.set(iv.getIndex() - 1,iv.getValue());    DataPoint newDp=new DataPoint(newVec,dp.getCategoricalValues(),categories,dp.getWeight());    DataPointPair<Double> dpp=new DataPointPair<Double>(newDp,target);    dataPoints.add(dpp);  }  this.numericalVariableNames=new ArrayList<String>(getNumNumericalVars());  setUpGenericNumericNames();}  }
class C{  private void notifyFactories(Object item){  for (  VisualizationProcessor f : factories) {    try {      f.processNewResult(this,item);    } catch (    Throwable e) {      LOG.warning("VisFactory " + f.getClass().getCanonicalName() + " failed:",e);    }  }}  }
class C{  public SSLPeerUnverifiedException(String reason){  super(reason);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:25.283 -0500",hash_original_method="EBADA8E6A033ED1A993056B3CF09CD35",hash_generated_method="E119E48E0BE158352AE1A5B952E1482D") public static void sendChunk(Chunk chunk){  nativeSendChunk(chunk.type,chunk.data,chunk.offset,chunk.length);}  }
class C{  public void clearFormatos(){  formatos.clear();}  }
class C{  protected boolean[] instanceWeights(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("classifier uses instance weights");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=2 * getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  boolean[] result=new boolean[2];  Instances train=null;  Instances test=null;  Classifier[] classifiers=null;  Evaluation evaluationB=null;  Evaluation evaluationI=null;  boolean built=false;  boolean evalFail=false;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    test=makeTestDataset(24,numTest,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);      addMissing(test,Math.min(missingLevel,50),predictorMissing,classMissing);    }    classifiers=AbstractClassifier.makeCopies(getClassifier(),2);    evaluationB=new Evaluation(train);    evaluationI=new Evaluation(train);    classifiers[0].buildClassifier(train);    testWRTZeroR(classifiers[0],evaluationB,train,test);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    for (int i=0; i < train.numInstances(); i++) {      train.instance(i).setWeight(0);    }    Random random=new Random(1);    for (int i=0; i < train.numInstances() / 2; i++) {      int inst=Math.abs(random.nextInt()) % train.numInstances();      int weight=Math.abs(random.nextInt()) % 10 + 1;      train.instance(inst).setWeight(weight);    }    classifiers[1].buildClassifier(train);    built=true;    testWRTZeroR(classifiers[1],evaluationI,train,test);    if (evaluationB.equals(evaluationI)) {      evalFail=true;      throw new Exception("evalFail");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      if (evalFail) {        println("Results don't differ between non-weighted and " + "weighted instance models.");        println("Here are the results:\n");        println(evaluationB.toSummaryString("\nboth methods\n",true));      } else {        print("Problem during");        if (built) {          print(" testing");        } else {          print(" training");        }        println(": " + ex.getMessage() + "\n");      }      println("Here are the datasets:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");      println("=== Train Weights ===\n");      for (int i=0; i < train.numInstances(); i++) {        println(" " + (i + 1) + "    "+ train.instance(i).weight());      }      println("=== Test Dataset ===\n" + test.toString() + "\n\n");      println("(test weights all 1.0\n");    }  }  return result;}  }
class C{  public static int convertStringToTimeSeconds(String time){  int result=0;  if (time.endsWith("H")) {    int hoursToAdd=Integer.valueOf(StringUtils.remove(time,'H'));    result=(60 * 60) * hoursToAdd;  } else   if (time.endsWith("M")) {    int minsToAdd=Integer.valueOf(StringUtils.remove(time,'M'));    result=60 * minsToAdd;  } else   if (time.endsWith("S")) {    int secsToAdd=Integer.valueOf(StringUtils.remove(time,'S'));    result=secsToAdd;  }  return result;}  }
class C{  protected synchronized void output(final LogEvent event){  try {    for (int i=0; i < m_columns.length; i++) {      specifyColumn(m_statement,i,event);    }    m_statement.executeUpdate();  } catch (  final SQLException se) {    getErrorHandler().error("Error executing statement",se,event);  }}  }
class C{  @Override public Collection<CRL> engineGetCRLs(CRLSelector selector) throws CertStoreException {  if (selector == null) {    Set<CRL> matches=new HashSet<>();    matchX509CRLs(new X509CRLSelector(),matches);    matches.addAll(otherCRLs);    return matches;  }  if (selector instanceof X509CRLSelector == false) {    Set<CRL> matches=new HashSet<>();    matchX509CRLs(selector,matches);    for (    CRL crl : otherCRLs) {      if (selector.match(crl)) {        matches.add(crl);      }    }    return matches;  }  if (crlIssuers.isEmpty()) {    return Collections.<CRL>emptySet();  }  X509CRLSelector x509Selector=(X509CRLSelector)selector;  Collection<X500Principal> issuers=x509Selector.getIssuers();  if (issuers != null) {    HashSet<CRL> matches=new HashSet<>(16);    for (    X500Principal issuer : issuers) {      Object entry=crlIssuers.get(issuer);      if (entry == null) {      } else       if (entry instanceof X509CRL) {        X509CRL crl=(X509CRL)entry;        if (x509Selector.match(crl)) {          matches.add(crl);        }      } else {        @SuppressWarnings("unchecked") List<X509CRL> list=(List<X509CRL>)entry;        for (        X509CRL crl : list) {          if (x509Selector.match(crl)) {            matches.add(crl);          }        }      }    }    return matches;  }  Set<CRL> matches=new HashSet<>(16);  matchX509CRLs(x509Selector,matches);  return matches;}  }
class C{  public static void main(String[] args) throws IOException {  InputStream is=null;  try {    is=PR76Example.class.getResourceAsStream("pr76.tsp");    if (is == null) {      System.err.println("Unable to find the file pr76.tsp");      System.exit(-1);    }    TSPExample.solve(is);  }  finally {    if (is != null) {      is.close();    }  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Table_ID"))     p_source_AD_Table_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_target_AD_Table_ID=getRecord_ID();}  }
class C{  protected void reusePages(int pages){  VM.assertions.fail("Subclasses that reuse regions must override this method.");}  }
class C{  public void testFailureWithSuccessThresholdAndFailureRatio(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(3,5).withSuccessThreshold(3);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  public VectorInstance subtract(double[] other) throws Exception {  ArrayList<Object> diffVals=new ArrayList<Object>();  for (int i=0; i < other.length; i++) {    double x=m_values.valueDouble(i);    double y=other[i];    double result=x - y;    diffVals.add(new Double(result));  }  Array newArray=Array.create(diffVals,null);  return new VectorInstance(newArray,m_vectorFields);}  }
class C{  public void seek(long pos) throws IOException {  inputReader.seek(pos);}  }
class C{  public TeXParser(boolean isPartial,String parseString,TeXFormula formula){  this(parseString,formula,false);  this.isPartial=isPartial;  firstpass();}  }
class C{  public boolean isDrawFinishedLw(){  return mHasSurface && !mDestroying && (mWinAnimator.mDrawState == WindowStateAnimator.COMMIT_DRAW_PENDING || mWinAnimator.mDrawState == WindowStateAnimator.READY_TO_SHOW || mWinAnimator.mDrawState == WindowStateAnimator.HAS_DRAWN);}  }
class C{  public void updateavgrtcpsize(int size){  avgrtcpsize=(int)(0.0625 * (double)size + 0.9375 * (double)avgrtcpsize);}  }
class C{  public INaviView saveAs(final IViewContainer container,final String name,final String description) throws CouldntSaveDataException {  Preconditions.checkNotNull(container,"IE00871: Container argument can not be null");  Preconditions.checkNotNull(name,"IE00872: Name argument can not be null");  Preconditions.checkNotNull(description,"IE00899: Description argument can not be null");  final INaviView oldView=m_rawView;  final INaviView newView=container.createView(name,description);  CViewInserter.insertView(oldView,newView);  final List<INaviViewNode> oldNodes=oldView.getGraph().getNodes();  final List<INaviViewNode> newNodes=newView.getGraph().getNodes();  for (int i=0; i < oldNodes.size(); i++) {    final INaviViewNode newNode=newNodes.get(i);    final NaviNode oldNode=getMappings().getNode(oldNodes.get(i));    getMappings().setNode(newNode,oldNode);    oldNode.setRawNode(newNode);    for (    final INaviGraphListener listener : m_listeners) {      try {        listener.changedModel(this,oldNode);      } catch (      final Exception exception) {        CUtilityFunctions.logException(exception);      }    }  }  final List<INaviEdge> oldEdges=oldView.getGraph().getEdges();  final List<INaviEdge> newEdges=newView.getGraph().getEdges();  for (int i=0; i < oldEdges.size(); i++) {    final INaviEdge newEdge=newEdges.get(i);    final NaviEdge oldEdge=getMappings().getEdge(oldEdges.get(i));    assert oldEdge != null;    getMappings().setEdge(newEdge,oldEdge);    final ZyEdgeRealizer<NaviEdge> realizer=oldEdge.getRealizer();    realizer.setUpdater(new CEdgeUpdater(newEdge));    oldEdge.setRawEdge(newEdge);  }  removeListeners();  newView.save();  CSettingsFunctions.saveSettings(newView,getView(),m_settings);  m_rawView=newView;  initializeListeners();  m_synchronizer.reset();  for (  final INaviGraphListener listener : m_listeners) {    try {      listener.changedView(oldView,newView);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  oldView.close();  return m_rawView;}  }
class C{  public void delete(T object){  currentSession().delete(object);}  }
class C{  public ISchedulingRule createRule(IResource resource){  return parent(resource);}  }
class C{  public RequestBuilder header(Object... args){  return with(headers,args);}  }
class C{  public static boolean isMinified(@NotNull CharSequence fileContent,@NotNull ParserDefinition parserDefinition,@NotNull TokenSet noWSRequireAfterTokenSet){  Lexer lexer=parserDefinition.createLexer(null);  lexer.start(fileContent);  if (!isMinified(lexer,parserDefinition,noWSRequireAfterTokenSet)) {    return false;  } else   if (lexer.getTokenType() == null) {    return true;  }  int startOffset=fileContent.length() - COUNT_OF_CONSIDERING_CHARACTERS_FROM_END_OF_FILE;  if (startOffset <= 0) {    return true;  }  lexer.start(fileContent,startOffset,fileContent.length());  return isMinified(lexer,parserDefinition,noWSRequireAfterTokenSet);}  }
class C{  public InlineQueryResultVoice.InlineQueryResultVoiceBuilder voiceDuration(Integer voiceDuration){  this.voice_duration=voiceDuration;  return this;}  }
class C{  public PasswordEditText(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  loadThemeAttributes(attrs,defStyleAttr);}  }
class C{  public DragListener(){}  }
class C{  public DiscreteInterval(int left,int right){  if (left >= right) {    throw new IllegalArgumentException("Discrete Interval: left (" + left + ") must be stricly less than right ("+ right+ ").");  }  this.left=left;  this.right=right;}  }
class C{  public void handleEvent(Event e){  TimeEvent evt=(TimeEvent)e;  if (!repeatIterationSpecified || evt.getDetail() == repeatIteration) {    super.handleEvent(e);  }}  }
class C{  private Map<IVariable<?>,Map<URI,StatementPatternNode>> verifyGraphPattern(final AbstractTripleStore database,final GroupNodeBase<IGroupMemberNode> group){  Map<IVariable<?>,Map<URI,StatementPatternNode>> tmp=null;  final int arity=group.arity();  for (int i=0; i < arity; i++) {    final BOp child=group.get(i);    if (child instanceof GroupNodeBase<?>) {      throw new RuntimeException("Nested groups are not allowed.");    }    if (child instanceof StatementPatternNode) {      final StatementPatternNode sp=(StatementPatternNode)child;      final TermNode p=sp.p();      if (!p.isConstant())       throw new RuntimeException("Expecting search predicate: " + sp);      final URI uri=(URI)((ConstantNode)p).getValue();      if (!uri.stringValue().startsWith(BDS.NAMESPACE))       throw new RuntimeException("Expecting search predicate: " + sp);      if (!ASTSearchOptimizer.searchUris.contains(uri) && !BDS.SEARCH_IN_SEARCH.equals(uri)) {        throw new RuntimeException("Unknown search predicate: " + uri);      }      final TermNode s=sp.s();      if (!s.isVariable())       throw new RuntimeException("Subject of search predicate is constant: " + sp);      final IVariable<?> searchVar=((VarNode)s).getValueExpression();      if (tmp == null) {        tmp=new LinkedHashMap<IVariable<?>,Map<URI,StatementPatternNode>>();      }      Map<URI,StatementPatternNode> statementPatterns=tmp.get(searchVar);      if (statementPatterns == null) {        tmp.put(searchVar,statementPatterns=new LinkedHashMap<URI,StatementPatternNode>());      }      statementPatterns.put(uri,sp);    }  }  return tmp;}  }
class C{  private void readConstantPool(){  if (readShort(6) > Opcodes.V1_8) {    throw new IllegalArgumentException();  }  items=new int[readUnsignedShort(8)];  int n=items.length;  int index=10;  for (int i=1; i < n; ++i) {    items[i]=index + 1;    int size;switch (b[index]) {case FIELD:case METH:case IMETH:case INT:case FLOAT:case NAME_TYPE:case INDY:      size=5;    break;case LONG:case DOUBLE:  size=9;++i;break;case UTF8:size=3 + readUnsignedShort(index + 1);break;case HANDLE:size=4;break;default :size=3;break;}index+=size;}header=index;}  }
class C{  public boolean isAvailable(){  return association.isAvailable();}  }
class C{  @Override public void recycle(){  if (!mIsRecycled)   this.deleteImage();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private int append(FileSystem fs,Configuration conf,Path src,PrintWriter writer,int currentRecordNumber) throws IOException {  BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(src)));  try {    String line=reader.readLine();    while (line != null) {      if (line.startsWith("Recno:: ")) {        line="Recno:: " + currentRecordNumber++;      }      writer.println(line);      line=reader.readLine();    }    return currentRecordNumber;  }  finally {    reader.close();  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof UnknownTag) {    return toString().equals(obj.toString());  }  return false;}  }
class C{  public void testPushWithPeek(){  LinkedBlockingDeque q=populatedDeque(3);  q.pollLast();  q.push(four);  assertSame(four,q.peekFirst());}  }
class C{  public static DoubleMatrix2D pow(DoubleMatrix2D A,double s){  return A.assign(F.pow(s));}  }
class C{  public static String toUpperOrNull(String string){  if (null != string)   return string.toUpperCase().trim();  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Document upgradeSchema(Document document,final String namespaceUri,final String schemaLocation,String schemaVersion) throws XPathExpressionException, ParserConfigurationException {  if (StringUtils.isBlank(namespaceUri)) {    throw new IllegalArgumentException("namespaceUri");  }  if (StringUtils.isBlank(schemaLocation)) {    throw new IllegalArgumentException("schemaLocation");  }  if (StringUtils.isBlank(schemaVersion)) {    throw new IllegalArgumentException("schemaVersion");  }  if (null != document.getDoctype()) {    Node root=document.getDocumentElement();    Document copiedDocument=getDocumentBuilder().newDocument();    Node copiedRoot=copiedDocument.importNode(root,true);    copiedDocument.appendChild(copiedRoot);    document=copiedDocument;  }  final Element root=document.getDocumentElement();  final Map<String,String> namespacePrefixMap=buildNamespacePrefixMap(root);  String cachePrefix=namespacePrefixMap.get(namespaceUri);  if (null == cachePrefix) {    cachePrefix=NULL_NS_URI;    changeNamespace(root,NULL_NS_URI,namespaceUri);    namespacePrefixMap.put(namespaceUri,cachePrefix);  }  String xsiPrefix=namespacePrefixMap.get(W3C_XML_SCHEMA_INSTANCE_NS_URI);  if (null == xsiPrefix) {    xsiPrefix=W3C_XML_SCHEMA_INSTANCE_PREFIX;    root.setAttribute("xmlns:" + xsiPrefix,W3C_XML_SCHEMA_INSTANCE_NS_URI);    namespacePrefixMap.put(W3C_XML_SCHEMA_INSTANCE_NS_URI,xsiPrefix);  }  final String schemaLocationAttribute=getAttribute(root,W3C_XML_SCHEMA_INSTANCE_ATTRIBUTE_SCHEMA_LOCATION,W3C_XML_SCHEMA_INSTANCE_NS_URI);  final Map<String,List<String>> schemaLocationMap=buildSchemaLocationMap(schemaLocationAttribute);  List<String> schemaLocations=schemaLocationMap.get(namespaceUri);  if (null == schemaLocations) {    schemaLocations=new ArrayList<String>();    schemaLocationMap.put(namespaceUri,schemaLocations);  }  schemaLocations.clear();  schemaLocations.add(schemaLocation);  String schemaLocationValue=getSchemaLocationValue(schemaLocationMap);  root.setAttributeNS(W3C_XML_SCHEMA_INSTANCE_NS_URI,xsiPrefix + ":" + W3C_XML_SCHEMA_INSTANCE_ATTRIBUTE_SCHEMA_LOCATION,schemaLocationValue);  if (cachePrefix == null || cachePrefix.isEmpty()) {    root.setAttribute("version",schemaVersion);  } else {    root.setAttributeNS(namespaceUri,cachePrefix + ":version",schemaVersion);  }  return document;}  }
class C{  public final void evictAll(){  trimToSize(-1);}  }
class C{  public static CompoundTag putItemHelper(Item item){  return putItemHelper(item,null);}  }
class C{  public void deleteMetadata(final String metadataKeyName){  final IndexedContainer metadataContainer=(IndexedContainer)getContainerDataSource();  metadataContainer.removeItem(metadataKeyName);}  }
class C{  public static final int putActionsForTransactionId(Manager manager,String transactionId) throws SQLException {  Collection<DBProcessedAudit> actions=getActionsForTransactionId(manager,transactionId);  for (  DBProcessedAudit pa : actions) {    manager.processedAuditDao.create(pa);  }  actions=manager.processedAuditDao.queryForEq(DBProcessedAudit.TRANSACTION_ID_FIELD_NAME,new SelectArg(transactionId));  long minTimestampMs=Long.MAX_VALUE;  for (  DBProcessedAudit action : actions) {    minTimestampMs=Math.min(action.getTimestampMs(),minTimestampMs);  }  EmailAlertManager.getInstance().createFutureAlertsFromAudits(manager,actions,minTimestampMs);  manager.commitTransaction();  return actions.size();}  }
class C{  public PropertyValidateAsserter vcard(VCard vcard){  vcard.addProperty(property);  this.vcard=vcard;  return this;}  }
class C{  public DateDue(Date dueDate){  super(dueDate);}  }
class C{  public IChatMessage sendMessage2(Geoloc geoloc) throws RemoteException {  if (geoloc == null) {    throw new ServerApiIllegalArgumentException("Geoloc message must not be null!");  }  if (!isAllowedToSendMessage()) {    throw new ServerApiPermissionDeniedException("Not allowed to send Geoloc message on the connected IMS server!");  }  String label=geoloc.getLabel();  if (label != null) {    int labelLength=label.length();    int labelMaxLength=mRcsSettings.getMaxGeolocLabelLength();    if (labelLength > labelMaxLength) {      throw new ServerApiIllegalArgumentException("geoloc message label length: " + labelLength + " exeeds max length: "+ labelMaxLength+ "!");    }  }  try {    long timestamp=System.currentTimeMillis();    final ChatMessage geolocMsg=ChatUtils.createGeolocMessage(null,geoloc,timestamp,timestamp);    ChatMessagePersistedStorageAccessor persistedStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,geolocMsg.getMessageId(),geolocMsg.getRemoteContact(),geolocMsg.getContent(),geolocMsg.getMimeType(),mChatId,Direction.OUTGOING);    addOutgoingGroupChatMessage(geolocMsg,Content.Status.QUEUED,Content.ReasonCode.UNSPECIFIED);    if (!mChatService.isGroupChatActive(mChatId)) {      mChatService.setGroupChatStateAndReasonCode(mChatId,GroupChat.State.STARTED,GroupChat.ReasonCode.UNSPECIFIED);    }    mImService.tryToDequeueGroupChatMessagesAndGroupFileTransfers(mChatId);    return new ChatMessageImpl(persistedStorage);  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  protected void messageReceived(Connection receiver,DistributionMessage message,int bytesRead){  if (logger.isTraceEnabled()) {    logger.trace("{} received {} from {}",id,message,receiver);  }  if (directChannel != null) {    DistributionMessage msg=message;    msg.setBytesRead(bytesRead);    msg.setSender(receiver.getRemoteAddress());    msg.setSharedReceiver(receiver.isSharedResource());    directChannel.receive(msg,bytesRead);  }}  }
class C{  public boolean isNumeral(String input){  for (int i=0; i < input.length(); i++) {    if (!isNumeral(input.charAt(i))) {      return false;    }  }  return true;}  }
class C{  @NotNull public static ExternalSystemTaskId create(@NotNull ProjectSystemId projectSystemId,@NotNull ExternalSystemTaskType type,@NotNull Project project){  return create(projectSystemId,type,getProjectId(project));}  }
class C{  private void save(File file,String extension) throws IOException {  java.awt.Color paper=fxToAWTColor(background);  java.awt.Color ink=fxToAWTColor(foreground);  BufferedImage image=new BufferedImage((barcode.getWidth() * zoom) + (2 * border),(barcode.getHeight() * zoom) + (2 * border),BufferedImage.TYPE_INT_RGB);  Graphics2D g2d=image.createGraphics();  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2d.setColor(paper);  g2d.fillRect(0,0,(barcode.getWidth() * zoom) + (2 * border),(barcode.getHeight() * zoom) + (2 * border));  Java2DRenderer renderer=new Java2DRenderer(g2d,zoom,border,paper,ink);  renderer.render(barcode);  ImageIO.write(image,extension,file);}  }
class C{  public MultimediaStreamingSession initiateStreamingSession(String serviceId,ContactId contact,String encoding) throws RcsServiceNotRegisteredException, RcsPermissionDeniedException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IMultimediaStreamingSession sessionIntf=mApi.initiateStreamingSession2(serviceId,contact,encoding);    if (sessionIntf != null) {      return new MultimediaStreamingSession(sessionIntf);    }    return null;  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public int nextInt(int exclMaxBound){  if (exclMaxBound <= 0) {    throw new IllegalArgumentException("n must be positive");  }  if ((exclMaxBound & -exclMaxBound) == exclMaxBound) {    return (int)((exclMaxBound * (long)next(31)) >> 31);  }  int bits, val;  do {    bits=next(31);    val=bits % exclMaxBound;  } while (bits - val + (exclMaxBound - 1) < 0);  return val;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static Uri renameScrapFile(String fileExtension,String uniqueIdentifier,Context context){  String filePath=getScrapPath(context);  if (uniqueIdentifier == null) {    uniqueIdentifier="";  }  File newTempFile=new File(getScrapPath(context,".temp" + uniqueIdentifier + fileExtension));  File oldTempFile=new File(filePath);  boolean deleted=newTempFile.delete();  if (!oldTempFile.renameTo(newTempFile)) {    return null;  }  return Uri.fromFile(newTempFile);}  }
class C{  public boolean removeLogListener(ILogListener<T> listener){synchronized (instanceLock) {    LogSniffer.log("RemoveLogListener: {0}",listener.toString());    return logListeners.remove(listener);  }}  }
class C{  public TraktTvAuthorizationCodeGrant newAuthorizationCodeGrant(){  TraktTvAuthorizationCodeGrant grant=new TraktTvAuthorizationCodeGrant();  grant.clientId=TraktTvAPIConfiguration.CLIENT_ID;  grant.clientSecret=TraktTvAPIConfiguration.CLIENT_SECRET;  grant.redirectUri=TraktTvAPIConfiguration.REDIRECT_URI;  return grant;}  }
class C{  protected Component wrapDesktopPane(Component c,LinkedList<Action> toolBarActions){  if (getModel() != null) {    int id=0;    for (    JToolBar tb : new ReversedList<JToolBar>(getModel().createToolBars(this,null))) {      id++;      JPanel panel=new JPanel(new BorderLayout());      panel.add(tb,BorderLayout.NORTH);      panel.add(c,BorderLayout.CENTER);      c=panel;      PreferencesUtil.installToolBarPrefsHandler(prefs,"toolbar." + id,tb);      toolBarActions.addFirst(new ToggleToolBarAction(tb,tb.getName()));    }  }  return c;}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  public static void writeOut(BufferedImage image,OutputStream os,String format) throws IOException {  ImageIO.write(image,format,os);}  }
class C{  public LocoNetMessage(int[] contents){  this(contents.length);  for (int i=0; i < contents.length; i++) {    this.setElement(i,contents[i]);  }}  }
class C{  public style addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public int maximumSize(Container container,List components,FormLayout.Measure minMeasure,FormLayout.Measure prefMeasure,FormLayout.Measure defaultMeasure){  FormLayout.Measure measure=this == MINIMUM ? minMeasure : (this == PREFERRED ? prefMeasure : defaultMeasure);  int maximum=0;  for (Iterator i=components.iterator(); i.hasNext(); ) {    Component c=(Component)i.next();    maximum=Math.max(maximum,measure.sizeOf(c));  }  return maximum;}  }
class C{  public void printPopulation(final EvolutionState state,final PrintWriter writer){  writer.println(NUM_SUBPOPS_PREAMBLE + Code.encode(subpops.length));  for (int i=0; i < subpops.length; i++) {    writer.println(SUBPOP_INDEX_PREAMBLE + Code.encode(i));    subpops[i].printSubpopulation(state,writer);  }}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 2)   reportWrongNumberArgs();}  }
class C{  public boolean showDialog(){  setVisible(true);  return continueQueue;}  }
class C{  static byte[] createBuffer(){  return new byte[8192];}  }
class C{  protected void countProximityPosition(int i){  if (i < m_proximityPositions.length)   m_proximityPositions[i]--;}  }
class C{  public final AlertDialog shareText(CharSequence text,CharSequence type){  Intent intent=new Intent();  intent.addCategory(Intent.CATEGORY_DEFAULT);  intent.setAction(BS_PACKAGE + ".ENCODE");  intent.putExtra("ENCODE_TYPE",type);  intent.putExtra("ENCODE_DATA",text);  String targetAppPackage=findTargetAppPackage(intent);  if (targetAppPackage == null) {    return showDownloadDialog();  }  intent.setPackage(targetAppPackage);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  attachMoreExtras(intent);  if (fragment == null) {    activity.startActivity(intent);  } else {    fragment.startActivity(intent);  }  return null;}  }
class C{  public List<RoleAssignmentEntry> updateRoleAssignments(RoleAssignmentChanges roleChanges){  RoleAssignments response=client.put(RoleAssignments.class,roleChanges,getRoleAssignmentsUrl());  return ResourceUtils.defaultList(response.getAssignments());}  }
class C{  public SingleSampleTTest(double mean){  super(1);  this.mean=mean;}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:47.486 -0500",hash_original_method="F5EFDD74303F049C8AACBA4BE897E134",hash_generated_method="11A6EA209A7DC274BF9B69BE19754CAD") public int restoreSome(long token,RestoreObserver observer,String[] packages){  int err=-1;  if (mObserver != null) {    Log.d(TAG,"restoreAll() called during active restore");    return -1;  }  mObserver=new RestoreObserverWrapper(mContext,observer);  try {    err=mBinder.restoreSome(token,mObserver,packages);  } catch (  RemoteException e) {    Log.d(TAG,"Can't contact server to restore packages");  }  return err;}  }
class C{  private void moveCorner(AREA corner,int dx,int dy){switch (corner) {case TL:    setX1(checkBoundaryX(x1 + dx));  setY1(checkBoundaryY(y1 + dy));break;case TR:setX2(checkBoundaryX(x2 + dx));setY1(checkBoundaryY(y1 + dy));break;case BL:setX1(checkBoundaryX(x1 + dx));setY2(checkBoundaryY(y2 + dy));break;case BR:setX2(checkBoundaryX(x2 + dx));setY2(checkBoundaryY(y2 + dy));break;}}  }
class C{  @Override public Iterator<FieldInfo> iterator(){  return values.iterator();}  }
class C{  public Map buildMap(int size){  if (size <= ANY_SIZE)   return new HashMap(); else   return new HashMap(size);}  }
class C{  public static IOException cast(IgniteCheckedException e){  return cast(e,null);}  }
class C{  public void cancelAll(){synchronized (mCurrentRequests) {    for (    SmashRequest<?> request : mCurrentRequests) {      request.cancel();    }  }}  }
class C{  public boolean recreateWorkspaceTable(SQLiteDatabase db){  db.beginTransaction();  try {    Cursor c=db.query(TABLE_WORKSPACE_SCREENS,new String[]{LauncherSettings.WorkspaceScreens._ID},null,null,null,null,LauncherSettings.WorkspaceScreens.SCREEN_RANK);    ArrayList<Long> sortedIDs=new ArrayList<Long>();    long maxId=0;    try {      while (c.moveToNext()) {        Long id=c.getLong(0);        if (!sortedIDs.contains(id)) {          sortedIDs.add(id);          maxId=Math.max(maxId,id);        }      }    }  finally {      c.close();    }    db.execSQL("DROP TABLE IF EXISTS " + TABLE_WORKSPACE_SCREENS);    addWorkspacesTable(db,false);    int total=sortedIDs.size();    for (int i=0; i < total; i++) {      ContentValues values=new ContentValues();      values.put(LauncherSettings.WorkspaceScreens._ID,sortedIDs.get(i));      values.put(LauncherSettings.WorkspaceScreens.SCREEN_RANK,i);      addModifiedTime(values);      db.insertOrThrow(TABLE_WORKSPACE_SCREENS,null,values);    }    db.setTransactionSuccessful();    mMaxScreenId=maxId;  } catch (  SQLException ex) {    Log.e(TAG,ex.getMessage(),ex);    return false;  } finally {    db.endTransaction();  }  return true;}  }
class C{  public void navigateToStudyFlashcardsActivity(Context context,Long lessonId){  Intent intent=StudyFlashcardsActivity.createIntent(context,lessonId);  context.startActivity(intent);}  }
class C{  private void check() throws Exception {  startUp();  for (int i=0; i < GRID_CNT; i++) {    IgniteEx g=grid(i);    IgniteInternalCache cache=g.cachex(DATA_CACHE_NAME).cache();    assert cache.isIgfsDataCache();  }  Collection<IgfsFile> files=write();  Map<UUID,Integer> expSizes=new HashMap<>(GRID_CNT,1.0f);  for (  IgfsFile file : files) {    for (    IgfsBlock block : file.blocks()) {      Collection<UUID> ids=primaryOrBackups(block.key());      for (      UUID id : ids) {        if (expSizes.get(id) == null)         expSizes.put(id,block.length()); else         expSizes.put(id,expSizes.get(id) + block.length());      }    }  }  for (int i=0; i < GRID_CNT; i++) {    UUID id=grid(i).localNode().id();    GridCacheAdapter<IgfsBlockKey,byte[]> cache=cache(id);    int expSize=expSizes.get(id) != null ? expSizes.get(id) : 0;    assert expSize == cache.igfsDataSpaceUsed();  }  byte[] buf=new byte[BLOCK_SIZE];  for (  IgfsFile file : files) {    for (int i=0; i < GRID_CNT; i++) {      int total=0;      IgfsInputStream is=igfs(i).open(file.path());      while (true) {        int read=is.read(buf);        if (read == -1)         break; else         total+=read;      }      assert total == file.length() : "Not enough bytes read: [expected=" + file.length() + ", actual="+ total+ ']';      is.close();    }  }  if (cacheMode == PARTITIONED) {    for (int i=0; i < GRID_CNT; i++) {      UUID id=grid(i).localNode().id();      GridCacheAdapter<IgfsBlockKey,byte[]> cache=cache(id);      int expSize=expSizes.get(id) != null ? expSizes.get(id) : 0;      assert expSize == cache.igfsDataSpaceUsed();    }  } else {    int totalSize=0;    for (    IgfsFile file : files)     totalSize+=file.length();    for (int i=0; i < GRID_CNT; i++) {      UUID id=grid(i).localNode().id();      GridCacheAdapter<IgfsBlockKey,byte[]> cache=cache(id);      assertEquals(totalSize,cache.igfsDataSpaceUsed());    }  }  for (  IgfsFile file : files) {    igfs(0).delete(file.path(),false);    for (    IgfsBlock block : file.blocks()) {      for (int i=0; i < GRID_CNT; i++) {        while (localPeek(cache(grid(i).localNode().id()),block.key()) != null)         U.sleep(100);      }    }  }  for (int i=0; i < GRID_CNT; i++) {    GridCacheAdapter<IgfsBlockKey,byte[]> cache=cache(grid(i).localNode().id());    assert 0 == cache.igfsDataSpaceUsed() : "Size counter is not 0: " + cache.igfsDataSpaceUsed();  }}  }
class C{  public TreePath lastButOne(){  return this.subPath(0,this.size() - 1);}  }
class C{  public static Pos3D read(NBTTagCompound tag){  return new Pos3D(tag.getDouble("x"),tag.getDouble("y"),tag.getDouble("z"));}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  Placemark.saveDefaultsToProperties(properties);  Figure.saveDefaultsToProperties(properties);  ImageBoard.saveDefaultsToProperties(properties);}  }
class C{  @SuppressWarnings({"checkstyle:emptyblock","PMD.AvoidCatchingThrowable","PMD.EmptyCatchBlock"}) public final R retry(BiFunction<T,U,R> function,T parameter1,U parameter2,int timeout){  long start=System.currentTimeMillis();  while ((System.currentTimeMillis() - start) < timeout) {    try {      Thread.sleep(RETRY_TIMEOUT);      return function.apply(parameter1,parameter2);    } catch (    Throwable throwable) {    }  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static boolean isValidField(EditText editText){  return !editText.getText().toString().isEmpty() && (!isEmailField(editText) || isValidEmail(editText.getText()));}  }
class C{  public void addCondition(final Condition condition){  conditions.add(condition);  condition.setId(conditionIdCounter++);}  }
class C{  private ScreenOverlayType createLegend() throws IOException {  this.writer.addNonKMLFile(MatsimResource.getAsInputStream("countsKml/countsLegend240x300.png"),"countsLegend.png");  ScreenOverlayType overlay=kmlObjectFactory.createScreenOverlayType();  LinkType icon=kmlObjectFactory.createLinkType();  icon.setHref("./countsLegend.png");  overlay.setIcon(icon);  overlay.setName("Legend");  Vec2Type overlayXY=kmlObjectFactory.createVec2Type();  overlayXY.setX(0.0);  overlayXY.setY(0.0);  overlayXY.setXunits(UnitsEnumType.FRACTION);  overlayXY.setYunits(UnitsEnumType.FRACTION);  overlay.setOverlayXY(overlayXY);  Vec2Type screenXY=kmlObjectFactory.createVec2Type();  screenXY.setX(0.02);  screenXY.setY(0.07);  screenXY.setXunits(UnitsEnumType.FRACTION);  screenXY.setYunits(UnitsEnumType.FRACTION);  overlay.setScreenXY(screenXY);  return overlay;}  }
class C{  @Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException {  for (  IAnalyzedMessageSummary ams : analyzedInterval.getAnalyzedMessages()) {    final IMessageSummary ms=ams.getMessageSummary();    final String id=ms.getMessageId();    FullBernoulliMsgData data=(FullBernoulliMsgData)m_msgData.get(id);    if (data == null) {      data=new FullBernoulliMsgData();      m_msgData.put(id,data);    }    ++data.m_count;    if (!AbstractClusteringScorer.ClusterStatus.IN_CONTEXT.name().equals(ams.getStatistics().getStringStat(m_clusteringScorer + "." + ClusteringContextScore.STATUS))) {      ++data.m_outOfClusterCount;    }  }  ++m_totalIntervalCount;}  }
class C{  public CEdgeLabelExitState(final CStateFactory<NodeType,EdgeType> factory,final AbstractZyGraph<NodeType,EdgeType> graph,final EdgeLabel label){  m_factory=Preconditions.checkNotNull(factory,"Error: factory argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"Error: graph argument can not be null");  m_label=Preconditions.checkNotNull(label,"Error: label argument can not be null");}  }
class C{  public AWTTerminal(){  this(new TerminalScrollController.Null());}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  public int indexOf(int elem){  runTo(-1);  return super.indexOf(elem);}  }
class C{  public static java.lang.String valueOf(java.lang.Object obj){  return null;}  }
class C{  public String toString(){  return image;}  }
