class C{  public Map<String,String> tags(){  return tags;}  }
class C{  protected static String canonicalize(String str){  for (int i=0; i < invalidCharacters.length; i++) {    str=str.replace(invalidCharacters[i],'_');  }  return str;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(4,50);  childData=child.getData();  assertEquals("characterdataDeleteDataExceedsLengthAssert","1230",childData);}  }
class C{  public Process executeAsync(final CommandLine command,final Map<String,String> environment,final ExecuteResultHandler handler) throws IOException {  if (workingDirectory != null && !workingDirectory.exists()) {    throw new IOException(workingDirectory + " doesn't exist.");  }  return executeInternal(command,environment,workingDirectory,streamHandler,handler);}  }
class C{  public void testDivideRoundHalfEvenPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public KeyPairProviderFactoryImpl(){  providerCache=new ConcurrentHashMap<>();}  }
class C{  public long scheduledExecutionTime(){  if (expired) {    return -1;  } else {    return time.getTime();  }}  }
class C{  public void testCase1(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  byte rBytes[]={10,40,100,-55,96,51,76,40,-45,85,105,4,28,-86,-117,-52,100,120,90};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public CompositeName(String n) throws InvalidNameException {  impl=new NameImpl(null,n);}  }
class C{  public static List<Foo> findByField2(boolean field2){  return getPersistence().findByField2(field2);}  }
class C{  public static Properties readPropertiesFile(final File file){  if (!file.exists()) {    JKIOUtil.logger.info(String.format("File %s doesnot exists , return empty map",file.getName()));    return new Properties();  }  try {    InputStream in=new FileInputStream(file);    if (in != null) {      return readPropertiesStream(in);    }  } catch (  IOException e) {    JKExceptionUtil.handle(e);  }  return null;}  }
class C{  public void testReceive_BlockNoServerNull() throws Exception {  assertTrue(this.channel1.isBlocking());  receiveNoServerNull();}  }
class C{  protected void alert(byte level,byte description){  if (logger != null) {    logger.println("Alert.alert: " + level + " "+ description);  }  this.alert[0]=level;  this.alert[1]=description;}  }
class C{  public boolean is_placed_on_front(){  return true;}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(ident).append(", *******").toString();}  }
class C{  public void addFile(String filename){  addFile(filename,filename);}  }
class C{  public SignatureVisitor visitArrayType(){  return this;}  }
class C{  private void applyFriction(){  if (xVel < maxVel) {    if (xVel < friction)     xVel=friction;    if ((sMario.isLeft() && !isLeftCollided) || (sMario.isRight() && !isRightCollided)) {      xVel+=groundRunAccel;      if (sMario.isSprinting())       xVel+=groundSprintAccel;    }  } else   if (xVel > maxVelExceedThreshold) {    xVel-=friction;  }}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  if (!isAllocationValid()) {    Rectangle alloc=a.getBounds();    setSize(alloc.width,alloc.height);  }  return super.modelToView(pos,a,b);}  }
class C{  public static String removeNewLineChars(String s){  String retString=null;  if ((s != null) && (s.length() > 0) && (s.indexOf('\n') != -1)) {    char[] chars=s.toCharArray();    int len=chars.length;    StringBuffer sb=new StringBuffer(len);    for (int i=0; i < len; i++) {      char c=chars[i];      if (c != '\n') {        sb.append(c);      }    }    retString=sb.toString();  } else {    retString=s;  }  return retString;}  }
class C{  public void deleteService(String serviceName) throws SMSException, SSOException {  if (serviceName.equalsIgnoreCase(IdConstants.REPO_SERVICE) || serviceName.equalsIgnoreCase(ISAuthConstants.AUTH_SERVICE_NAME)) {    Object args[]={serviceName};    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-SERVICE_CORE_CANNOT_DELETE",args));  }  Iterator versions=getServiceVersions(serviceName).iterator();  while (versions.hasNext()) {    String version=(String)versions.next();    CachedSMSEntry ce=CachedSMSEntry.getInstance(token,getServiceNameDN(serviceName,version));    if (ce.isDirty()) {      ce.refresh();    }    SMSEntry e=ce.getClonedSMSEntry();    String[] values={SMSSchema.getDummyXML(serviceName,version)};    e.setAttribute(SMSEntry.ATTR_SCHEMA,values);    e.save(token);    ce.refresh(e);  }}  }
class C{  public static boolean isLowSurrogate(int c){  return (0xDC00 <= c && c <= 0xDFFF);}  }
class C{  protected void closeCDATA() throws org.xml.sax.SAXException {  try {    m_writer.write(CDATA_DELIMITER_CLOSE);    m_cdataTagOpen=false;  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  private void deleteSchedule(String jobName) throws SchedulerException {  inMemoryScheduler.deleteJobIfPresent(jobName);  persistentScheduler.deleteJobIfPresent(jobName);}  }
class C{  public boolean beginContentHrefExceptionDisplay(ChildDisplayEvent event){  setDisplayFieldValue(TXT_GOTO_LOGIN_AFTER_FAIL,rb.getString("gotoLoginAfterFail"));  return true;}  }
class C{  private boolean opt_plane_or_fanout_via(BrdAbitVia p_via,int p_trace_pull_tight_accuracy,int p_max_recursion_depth){  if (p_max_recursion_depth <= 0) {    System.out.println("OptViaAlgo.opt_plane_or_fanout_via: probably endless loop");    return false;  }  Collection<BrdItem> contact_list=p_via.get_normal_contacts();  if (contact_list.isEmpty())   return false;  BrdAreaConduction contact_plane=null;  BrdTracep contact_trace=null;  for (  BrdItem curr_contact : contact_list) {    if (curr_contact instanceof BrdAreaConduction) {      if (contact_plane != null)       return false;      contact_plane=(BrdAreaConduction)curr_contact;    } else     if (curr_contact instanceof BrdTracep) {      if (curr_contact.is_shove_fixed() || contact_trace != null)       return false;      contact_trace=(BrdTracep)curr_contact;    } else {      return false;    }  }  if (contact_trace == null)   return false;  PlaPointInt via_center=p_via.center_get();  boolean at_first_corner;  if (contact_trace.corner_first().equals(via_center)) {    at_first_corner=true;  } else   if (contact_trace.corner_last().equals(via_center)) {    at_first_corner=false;  } else {    System.out.println("OptViaAlgo.opt_plane_or_fanout_via: unconsistant contact");    return false;  }  Polyline trace_polyline=contact_trace.polyline();  PlaPoint check_corner;  if (at_first_corner) {    check_corner=trace_polyline.corner_first_next();  } else {    check_corner=trace_polyline.corner_last_prev();  }  PlaPointInt rounded_check_corner=check_corner.round();  int trace_half_width=contact_trace.get_half_width();  int trace_layer=contact_trace.get_layer();  int trace_cl_class_no=contact_trace.clearance_idx();  PlaPointInt new_via_location=reposition_via(p_via,rounded_check_corner,trace_half_width,trace_layer,trace_cl_class_no);  if (new_via_location == null && trace_polyline.corner_count() >= 3) {    PlaPoint prev_corner;    if (at_first_corner) {      prev_corner=trace_polyline.corner(2);    } else {      prev_corner=trace_polyline.corner(trace_polyline.corner_count() - 3);    }    PlaPointFloat float_check_corner=check_corner.to_float();    PlaPointFloat float_via_center=via_center.to_float();    PlaPointFloat float_prev_corner=prev_corner.to_float();    if (float_check_corner.scalar_product(float_via_center,float_prev_corner) != 0) {      PlaSegmentFloat curr_line=new PlaSegmentFloat(float_check_corner,float_prev_corner);      PlaPointInt projection=curr_line.perpendicular_projection(float_via_center).round();      boolean projection_ok=true;      if (projection.is_NaN())       projection_ok=false;      PlaVectorInt diff_vector=projection.difference_by(via_center);      TraceAngleRestriction angle_restriction=r_board.brd_rules.get_trace_snap_angle();      if (projection.equals(via_center) && !diff_vector.is_orthogonal() || angle_restriction.is_limit_45() && !diff_vector.is_multiple_of_45_degree()) {        projection_ok=false;      }      if (projection_ok) {        if (r_board.move_drill_algo.check(p_via,diff_vector,0,0,null,null)) {          double ok_length=r_board.check_trace(via_center,projection,trace_layer,p_via.net_nos,trace_half_width,trace_cl_class_no,false);          if (ok_length >= Integer.MAX_VALUE) {            new_via_location=projection;          }        }      }    }  }  if (new_via_location == null)   return false;  if (contact_plane != null) {    ItemSelectionFilter filter=new ItemSelectionFilter(ItemSelectionChoice.CONDUCTION);    Collection<BrdItem> picked_items=r_board.pick_items(new_via_location,contact_plane.get_layer(),filter);    boolean contact_ok=false;    for (    BrdItem curr_item : picked_items) {      if (curr_item == contact_plane) {        contact_ok=true;        break;      }    }    if (!contact_ok)     return false;  }  PlaVectorInt diff_vector=new_via_location.difference_by(via_center);  if (!r_board.move_drill_algo.insert(p_via,diff_vector,9,9,null)) {    System.out.println("OptViaAlgo.opt_plane_or_fanout_via: move via failed");    return false;  }  ItemSelectionFilter filter=new ItemSelectionFilter(ItemSelectionChoice.TRACES);  Collection<BrdItem> picked_items=r_board.pick_items(new_via_location,contact_trace.get_layer(),filter);  for (  BrdItem curr_item : picked_items) {    ((BrdTracep)curr_item).pull_tight(true,p_trace_pull_tight_accuracy);  }  if (new_via_location.equals(check_corner)) {    opt_plane_or_fanout_via(p_via,p_trace_pull_tight_accuracy,p_max_recursion_depth - 1);  }  return true;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.PDPDescriptorType createPDPDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.PDPDescriptorTypeImpl();}  }
class C{  private boolean simulateEntryAdd(Entry entry,ConfigurationRepository configRepository) throws IOException {  ArgumentCaptor<ConfigAddListener> registeredListener=ArgumentCaptor.forClass(ConfigAddListener.class);  verify(configRepository).registerAddListener(eq(entry.getName().parent()),registeredListener.capture());  return registeredListener.getValue().configAddIsAcceptable(entry,new LocalizableMessageBuilder());}  }
class C{  String[] toCommandLineArgumentsConfiguration(String configurationFile,ConnectionParameters connParams){  return new String[]{"enable","--no-prompt","--configFile",configurationFile,"--host1",connParams.getHostName(),"--port1",s(connParams.getAdminPort()),"--bindDN1",connParams.getBindDn(),"--bindPassword1",connParams.getBindPassword(),"--replicationPort1",s(replicationPortSource),"--host2",connParamsForDestination.getHostName(),"--port2",s(connParamsForDestination.getAdminPort()),"--bindDN2",connParamsForDestination.getBindDn(),"--bindPassword2",connParamsForDestination.getBindPassword(),"--replicationPort2",s(replicationPortDestination),"--adminUID",connParams.getAdminUid(),"--adminPassword",connParams.getAdminPassword(),"--baseDN",baseDn,"--trustAll","--noPropertiesFile"};}  }
class C{  public void addRetentionPolicy(RetentionPolicy<?> policy){  this.retentionPolicies.add(policy);}  }
class C{  @Override public void onPause(){  delegate.onPause();}  }
class C{  public SchemaBuilder addToSchemaOverwrite(){  return getSchemaBuilder().addMatchingRuleUse(new MatchingRuleUse(this),true);}  }
class C{  public void mergeDifferent(PdfDictionary other){  for (  PdfName key : other.keySet()) {    if (!containsKey(key))     put(key,other.get(key));  }}  }
class C{  public Builder removeRequiredAttribute(final String nameOrOID){  this.requiredAttributes.remove(nameOrOID);  return this;}  }
class C{  public SubentriesControl(boolean isCritical,boolean visibility){  super(OID_LDAP_SUBENTRIES,isCritical);  this.visibility=visibility;}  }
class C{  private static void encode(int tag,int length,StringBuilder buffer){  if (tag == PATTERN_ISO_ZONE && length >= 4) {    throw new IllegalArgumentException("invalid ISO 8601 format: length=" + length);  }  if (length < 255) {    buffer.append((char)(tag << 8 | length));  } else {    buffer.append((char)((tag << 8) | 0xff));    buffer.append((char)(length >>> 16));    buffer.append((char)(length & 0xffff));  }}  }
class C{  public ObjectName(String name) throws MalformedObjectNameException {  construct(name);}  }
class C{  public Value parseValueFromOneVarOp(Operation exp,SemanticScope scope) throws SyntaxException {  String op=exp.operator();  boolean unary=exp.isUnary();  if (op.equals("++")) {    return parseSelfOneVarOp(exp,scope);  } else   if (op.equals("--")) {    return parseSelfOneVarOp(exp,scope);  } else   if (op.equals("!") && unary) {    Value v=parseValueFromExpression(exp.expressions().get(0),null,scope);    assert v != null;    if (v.type().equals(BoolTypeDef.get()) || v.type().fullName().equals("java.lang.Boolean")) {      v=cast(BoolTypeDef.get(),v,exp.line_col());      return new Ins.TwoVarOp(new Ins.TwoVarOp(v,new IntValue(1),Ins.TwoVarOp.Iand,BoolTypeDef.get(),exp.line_col()),new IntValue(1),Ins.TwoVarOp.Ixor,BoolTypeDef.get(),exp.line_col());    } else {      if (v.type() instanceof PrimitiveTypeDef) {        v=boxPrimitive(v,exp.line_col());      }      return invokeMethodWithArgs(exp.line_col(),v.type(),v,"logicNot",new ArrayList<>(),scope);    }  } else   if (op.equals("~") && unary) {    Value v=parseValueFromExpression(exp.expressions().get(0),null,scope);    assert v != null;    if (v.type() instanceof IntTypeDef || v.type().fullName().equals("java.lang.Integer") || v.type() instanceof ByteTypeDef|| v.type().fullName().equals("java.lang.Byte")|| v.type() instanceof ShortTypeDef|| v.type().fullName().equals("java.lang.Short")) {      v=cast(IntTypeDef.get(),v,exp.line_col());      return new Ins.TwoVarOp(v,new IntValue(-1),Ins.TwoVarOp.Ixor,IntTypeDef.get(),exp.line_col());    } else     if (v.type() instanceof LongTypeDef || v.type().fullName().equals("java.lang.Long")) {      v=cast(LongTypeDef.get(),v,exp.line_col());      return new Ins.TwoVarOp(v,new LongValue(-1),Ins.TwoVarOp.Lxor,IntTypeDef.get(),exp.line_col());    } else {      if (v.type() instanceof PrimitiveTypeDef) {        v=boxPrimitive(v,exp.line_col());      }      return invokeMethodWithArgs(exp.line_col(),v.type(),v,"not",new ArrayList<>(),scope);    }  } else   if (op.equals("+") && unary) {    return parseValueFromExpression(exp.expressions().get(0),null,scope);  } else   if (op.equals("-") && unary) {    Value v=parseValueFromExpression(exp.expressions().get(0),null,scope);    assert v != null;    if (v.type() instanceof IntTypeDef || v.type().fullName().equals("java.lang.Integer") || v.type() instanceof ByteTypeDef|| v.type().fullName().equals("java.lang.Byte")|| v.type() instanceof ShortTypeDef|| v.type().fullName().equals("java.lang.Short")) {      v=cast(IntTypeDef.get(),v,exp.line_col());      return new Ins.OneVarOp(v,Ins.OneVarOp.Ineg,IntTypeDef.get(),exp.line_col());    } else     if (v.type() instanceof LongTypeDef || v.type().fullName().equals("java.lang.Long")) {      v=cast(LongTypeDef.get(),v,exp.line_col());      return new Ins.OneVarOp(v,Ins.OneVarOp.Lneg,LongTypeDef.get(),exp.line_col());    } else     if (v.type() instanceof FloatTypeDef || v.type().fullName().equals("java.lang.Float")) {      v=cast(FloatTypeDef.get(),v,exp.line_col());      return new Ins.OneVarOp(v,Ins.OneVarOp.Fneg,FloatTypeDef.get(),exp.line_col());    } else     if (v.type() instanceof DoubleTypeDef || v.type().fullName().equals("java.lang.Double")) {      v=cast(DoubleTypeDef.get(),v,exp.line_col());      return new Ins.OneVarOp(v,Ins.OneVarOp.Dneg,DoubleTypeDef.get(),exp.line_col());    } else {      if (v.type() instanceof PrimitiveTypeDef) {        v=boxPrimitive(v,exp.line_col());      }      return invokeMethodWithArgs(exp.line_col(),v.type(),v,"negate",new ArrayList<>(),scope);    }  } else {    err.SyntaxException("unknown one variable operator " + (unary ? (op + "v") : ("v" + op)),exp.line_col());    return null;  }}  }
class C{  public void addNotify(){synchronized (getTreeLock()) {    if (parent != null && !(parent instanceof Component)) {      super.addNotify();    } else {      if (peer == null)       peer=Toolkit.getDefaultToolkit().createPopupMenu(this);      int nitems=getItemCount();      for (int i=0; i < nitems; i++) {        MenuItem mi=getItem(i);        mi.parent=this;        mi.addNotify();      }    }  }}  }
class C{  public ServletRequestContext(HttpServletRequest request){  this.request=request;}  }
class C{  void addServiceListener(String service){  debug.message("Adding service listener");  try {    schemaManager.addListener(this);  } catch (  Exception ee) {    debug.error("addServiceListener: " + ee.getMessage());    if (debug.messageEnabled()) {      debug.message("Stack trace:",ee);    }  }}  }
class C{  public ProviderMismatchException(String msg){  super(msg);}  }
class C{  public void removePluginInterface(String interfacename) throws SMSException, SSOException {  SMSEntry.validateToken(token);  validateServiceSchemaManagerImpl();  Document schemaDoc=ssm.getDocumentCopy();  Node schemaNode=XMLUtils.getRootNode(schemaDoc,SMSUtils.SCHEMA);  Node pluginNode=XMLUtils.getNamedChildNode(schemaNode,SMSUtils.PLUGIN_INTERFACE,SMSUtils.NAME,interfacename);  if (pluginNode != null) {    schemaNode.removeChild(pluginNode);    replaceSchema(schemaDoc);  }}  }
class C{  public JKSecurityException(String message){  super(message);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(processinginstructiongetdata.class,args);}  }
class C{  public final boolean pop(){  return m_values[m_index--];}  }
class C{  public Observable<List<Job>> jobRangeObservable(long from,long to,String order){  io.vertx.rx.java.ObservableFuture<List<Job>> handler=io.vertx.rx.java.RxHelper.observableFuture();  jobRange(from,to,order,handler.toHandler());  return handler;}  }
class C{  public void callPredicateVisitors(XPathVisitor visitor){  m_expr.callVisitors(new filterExprOwner(),visitor);  super.callPredicateVisitors(visitor);}  }
class C{  @Override public int read() throws IOException {  for (; ; ) {    if (encoderOut.hasRemaining()) {      return encoderOut.get() & 0xFF;    } else {      fillBuffer();      if (endOfInput && !encoderOut.hasRemaining()) {        return -1;      }    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException, InvalidObjectException {  s.defaultReadObject();  if (minSmallest > minLargest) {    throw new InvalidObjectException("Smallest minimum value must be less than largest minimum value");  }  if (maxSmallest > maxLargest) {    throw new InvalidObjectException("Smallest maximum value must be less than largest maximum value");  }  if (minLargest > maxLargest) {    throw new InvalidObjectException("Minimum value must be less than maximum value");  }}  }
class C{  public void test_update$BII() throws Exception {  try {    MessageDigest.getInstance("SHA").update(new byte[]{},Integer.MAX_VALUE,Integer.MAX_VALUE);    fail();  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public Tailer(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen,int bufSize){  this.file=file;  this.delayMillis=delayMillis;  this.end=end;  this.inbuf=new byte[bufSize];  this.listener=listener;  listener.init(this);  this.reOpen=reOpen;}  }
class C{  private long loadGenerationId() throws DirectoryException {  if (logger.isTraceEnabled()) {    logger.trace("Attempt to read generation ID from DB " + getBaseDN());  }  final SearchRequest request=newSearchRequest(getBaseDN(),SearchScope.BASE_OBJECT).addAttribute(REPLICATION_GENERATION_ID);  InternalSearchOperation search=conn.processSearch(request);  if (search.getResultCode() == ResultCode.NO_SUCH_OBJECT) {    request.setName(config.dn());    search=conn.processSearch(request);  }  boolean found=false;  long aGenerationId=-1;  if (search.getResultCode() != ResultCode.SUCCESS) {    if (search.getResultCode() != ResultCode.NO_SUCH_OBJECT) {      String errorMsg=search.getResultCode().getName() + " " + search.getErrorMessage();      logger.error(ERR_SEARCHING_GENERATION_ID,getBaseDN(),errorMsg);    }  } else {    List<SearchResultEntry> result=search.getSearchEntries();    SearchResultEntry resultEntry=result.get(0);    if (resultEntry != null) {      Iterator<Attribute> attrs=resultEntry.getAllAttributes(REPLICATION_GENERATION_ID).iterator();      if (attrs.hasNext()) {        Attribute attr=attrs.next();        if (attr.size() > 1) {          String errorMsg="#Values=" + attr.size() + " Must be exactly 1 in entry "+ resultEntry.toLDIFString();          logger.error(ERR_LOADING_GENERATION_ID,getBaseDN(),errorMsg);        } else         if (attr.size() == 1) {          found=true;          try {            aGenerationId=Long.decode(attr.iterator().next().toString());          } catch (          Exception e) {            logger.error(ERR_LOADING_GENERATION_ID,getBaseDN(),stackTraceToSingleLineString(e));          }        }      }    }  }  if (!found) {    aGenerationId=computeGenerationId();    saveGenerationId(aGenerationId);    if (logger.isTraceEnabled()) {      logger.trace("Generation ID created for domain baseDN=" + getBaseDN() + " generationId="+ aGenerationId);    }  } else {    generationIdSavedStatus=true;    if (logger.isTraceEnabled()) {      logger.trace("Generation ID successfully read from domain baseDN=" + getBaseDN() + " generationId="+ aGenerationId);    }  }  return aGenerationId;}  }
class C{  @Override public void messageReceived(ChannelMessage msg){  if (msg == null)   return;  try {    if (Logs.MESSAGES.isTraceEnabled()) {      Logs.MESSAGES.trace("GroupChannel - Received msg:" + new UniqueId(msg.getUniqueId()) + " at "+ new java.sql.Timestamp(System.currentTimeMillis())+ " from "+ msg.getAddress().getName());    }    Serializable fwd=null;    if ((msg.getOptions() & SEND_OPTIONS_BYTE_MESSAGE) == SEND_OPTIONS_BYTE_MESSAGE) {      fwd=new ByteMessage(msg.getMessage().getBytes());    } else {      try {        fwd=XByteBuffer.deserialize(msg.getMessage().getBytesDirect(),0,msg.getMessage().getLength());      } catch (      Exception sx) {        log.error(sm.getString("groupChannel.unable.deserialize",msg),sx);        return;      }    }    if (Logs.MESSAGES.isTraceEnabled()) {      Logs.MESSAGES.trace("GroupChannel - Receive Message:" + new UniqueId(msg.getUniqueId()) + " is "+ fwd);    }    Member source=msg.getAddress();    boolean rx=false;    boolean delivered=false;    for (int i=0; i < channelListeners.size(); i++) {      ChannelListener channelListener=channelListeners.get(i);      if (channelListener != null && channelListener.accept(fwd,source)) {        channelListener.messageReceived(fwd,source);        delivered=true;        if (channelListener instanceof RpcChannel)         rx=true;      }    }    if ((!rx) && (fwd instanceof RpcMessage)) {      sendNoRpcChannelReply((RpcMessage)fwd,source);    }    if (Logs.MESSAGES.isTraceEnabled()) {      Logs.MESSAGES.trace("GroupChannel delivered[" + delivered + "] id:"+ new UniqueId(msg.getUniqueId()));    }  } catch (  Exception x) {    if (log.isWarnEnabled())     log.warn(sm.getString("groupChannel.receiving.error"),x);    throw new RemoteProcessException("Exception:" + x.getMessage(),x);  }}  }
class C{  StringBuilder toNormalizedUrlSafe(final StringBuilder builder){  builder.append(toLowerCase(attributeType.getNameOrOID()));  builder.append('=');  final ByteString value=getEqualityNormalizedValue();  if (value.length() == 0) {    return builder;  }  final boolean hasAttributeName=!attributeType.getNames().isEmpty();  final boolean isHumanReadable=attributeType.getSyntax().isHumanReadable();  if (!hasAttributeName || !isHumanReadable) {    builder.append(value.toPercentHexString());  } else {    final CharBuffer buffer=CharBuffer.allocate(value.length());    final CharsetDecoder decoder=Charset.forName("UTF-8").newDecoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);    if (value.copyTo(buffer,decoder)) {      buffer.flip();      try {        final String val=URLEncoder.encode(buffer.toString(),"UTF-8").replaceAll("\\+","%20");        builder.append(val);      } catch (      UnsupportedEncodingException e) {        builder.append(value.toPercentHexString());      }    } else {      builder.append(value.toPercentHexString());    }  }  return builder;}  }
class C{  public SSOToken createSSOToken(String tokenId,String clientIP) throws UnsupportedOperationException, SSOException {  for (  SSOProviderPlugin ssoProvider : getSsoProviderPlugins()) {    if (ssoProvider.isApplicable(tokenId)) {      return ssoProvider.createSSOToken(tokenId,clientIP);    }  }  if (dProProvider != null)   return (dProProvider.createSSOToken(tokenId,clientIP)); else   return (grappaProvider.createSSOToken(tokenId,clientIP));}  }
class C{  public LDAPAttribute(Attribute attribute){  this.attributeType=attribute.getAttributeDescription().toString();  if (attribute.isVirtual()) {    values=new ArrayList<>();  } else   if (attribute.isEmpty()) {    values=new ArrayList<>(0);    return;  } else {    values=new ArrayList<>(attribute.size());  }  for (  ByteString v : attribute) {    values.add(v);  }}  }
class C{  public AuthenticationException(LocalizableMessage message){  super(message);}  }
class C{  public void rebind(org.omg.CosNaming.NameComponent[] n,org.omg.CORBA.Object obj) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("rebind",true);    org.omg.CosNaming.NameHelper.write($out,n);    org.omg.CORBA.ObjectHelper.write($out,obj);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    rebind(n,obj);  } finally {    _releaseReply($in);  }}  }
class C{  static public void assertFalse(String message,boolean condition){  assertTrue(message,!condition);}  }
class C{  AuditLogFilter build(JsonValue config){  List<AuditLogFilter> filters=new ArrayList<>();  for (  Map.Entry<String,JsonValueObjectConverter<AuditLogFilter>> entry : auditLogFilterBuilder.entrySet()) {    final String configPath=entry.getKey();    final Function<JsonValue,AuditLogFilter,JsonValueException> builder=entry.getValue();    final JsonValue filterConfig;    if (configPath.contains("*")) {      filterConfig=getByGlob(config,configPath);    } else {      filterConfig=config.get(new JsonPointer(configPath));    }    if (filterConfig != null) {      try {        filters.add(builder.apply(filterConfig));      } catch (      Exception e) {        logger.error("Audit Log Filter builder threw exception {} while processing {}",e.getClass().getName(),filterConfig.toString(),e);      }    }  }  return AuditLogFilters.newOrCompositeFilter(filters);}  }
class C{  void checkFrameValue(final Object value){  if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) {    return;  }  if (value instanceof String) {    checkInternalName((String)value,"Invalid stack frame value");    return;  }  if (!(value instanceof Label)) {    throw new IllegalArgumentException("Invalid stack frame value: " + value);  } else {    usedLabels.add((Label)value);  }}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);}  }
class C{  public void testFieldZERO(){  String oneS="0";  double oneD=0.0;  assertEquals("incorrect string value",oneS,BigDecimal.ZERO.toString());  assertEquals("incorrect double value",oneD,BigDecimal.ZERO.doubleValue(),0);}  }
class C{  public static Collection<DsnRule> read_scope(JflexScanner p_scanner){  Collection<DsnRule> result=new LinkedList<DsnRule>();  Object next_token=null;  for (; ; ) {    Object prev_token=next_token;    try {      next_token=p_scanner.next_token();    } catch (    java.io.IOException e) {      System.out.println("Rule.read_scope: IO error scanning file");      System.out.println(e);      return null;    }    if (next_token == null) {      System.out.println("Rule.read_scope: unexpected end of file");      return null;    }    if (next_token == DsnKeyword.CLOSED_BRACKET) {      break;    }    if (prev_token == DsnKeyword.OPEN_BRACKET) {      DsnRule curr_rule=null;      if (next_token == DsnKeyword.WIDTH) {        curr_rule=read_width_rule(p_scanner);      } else       if (next_token == DsnKeyword.CLEARANCE) {        curr_rule=read_clearance_rule(p_scanner);      } else {        DsnKeywordScope.skip_scope(p_scanner);      }      if (curr_rule != null) {        result.add(curr_rule);      }    }  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  Node nameNode;  Node firstChild;  String childValue;  doc=(Document)load("hc_staff",false);  nameList=doc.getElementsByTagName("strong");  nameNode=nameList.item(3);  firstChild=nameNode.getFirstChild();  childValue=firstChild.getNodeValue();  assertEquals("documentGetElementsByTagNameValueAssert","Jeny Oconnor",childValue);}  }
class C{  public void addSubject(String subjectName,Subject subject) throws NameAlreadyExistsException {  addSubject(subjectName,subject,false);}  }
class C{  public SQLException(Throwable cause){  super(cause);  if (!(this instanceof SQLWarning)) {    if (DriverManager.getLogWriter() != null) {      printStackTrace(DriverManager.getLogWriter());    }  }}  }
class C{  public Set<String> schemaSubEntries(SSOToken token,String dn,String filter,String sidFilter,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws SMSException, SSOException {  if (debug.messageEnabled()) {    debug.message("SMSLdapObject: schemaSubEntries search: " + dn);  }  String[] objs={filter,sidFilter};  String sfilter=MessageFormat.format(getServiceIdSearchFilter(),objs);  return getSubEntries(token,dn,sfilter,numOfEntries,sortResults,ascendingOrder);}  }
class C{  public void paintToggleButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  void startPeriodicLogSigner(){  if (signTask == null) {    signTask=new SignTask(signInterval);    SystemTimer.getTimer().schedule(signTask,new Date(((currentTimeMillis() + signInterval) / 1000) * 1000));  }}  }
class C{  public CoreConfigManager(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  public static float calculateTextHeight(float textSizePx){  Paint p=new Paint();  p.setTextSize(textSizePx);  Paint.FontMetrics fm=p.getFontMetrics();  return -fm.top + fm.bottom;}  }
class C{  public SearchTemplate(String name,String[] attributeNames,String filter){  super(name);  setAttributeNames(attributeNames);  setSearchFilter(filter);}  }
class C{  JwtSessionMapperBuilder compressedUsing(CompressionAlgorithm compressionAlgorithm){  this.compressionAlgorithm=checkNotNull(compressionAlgorithm);  return this;}  }
class C{  protected void fireEditingCanceled(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == CellEditorListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((CellEditorListener)listeners[i + 1]).editingCanceled(changeEvent);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document newDoc;  DocumentType docType=null;  String namespaceURI="http://www.w3.org/DOMTest/L2";  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("_:_");  qualifiedNames.add("_:h0");  qualifiedNames.add("_:test");  qualifiedNames.add("l_:_");  qualifiedNames.add("ns:_0");  qualifiedNames.add("ns:a0");  qualifiedNames.add("ns0:test");  qualifiedNames.add("a.b:c");  qualifiedNames.add("a-b:c");  qualifiedNames.add("a-b:c");  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  for (int indexN1006B=0; indexN1006B < qualifiedNames.size(); indexN1006B++) {    qualifiedName=(String)qualifiedNames.get(indexN1006B);    newDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    assertNotNull("domimplementationcreatedocument03",newDoc);  }}  }
class C{  protected static void addIdRepoAMSDKPlugin(SSOToken token,String orgName) throws SMSException, SSOException {  ServiceConfigManager scm=new ServiceConfigManager(ServiceManager.REALM_SERVICE,token);  ServiceConfig sc=scm.getOrganizationConfig(orgName,null);  Map attributes=new HashMap();  Set values=new HashSet();  values.add("com.iplanet.am.sdk.AMSDKRepo");  attributes.put("sunIdRepoClass",values);  values=new HashSet();  values.add(DNMapper.realmNameToAMSDKName(DNMapper.orgNameToDN(orgName)));  attributes.put("amSDKOrgName",values);  sc.addSubConfig("amsdk1","amSDK",0,attributes);}  }
class C{  public void testValueOfPosScalePos(){  long a=98374823947823578L;  int scale=12;  BigDecimal aNumber=BigDecimal.valueOf(a,scale);  String result="98374.823947823578";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  static Subscription registerForNotifyChangesToSubNodes(String dn,SMSEventListener eventListener){  initialize();  return addNotificationObject(subNodeChanges,DN.valueOf(dn),eventListener);}  }
class C{  private Polyline reposition_lines(Polyline p_polyline){  if (p_polyline.plaline_len() < 5)   return p_polyline;  PlaLineIntAlist line_arr=p_polyline.alist_copy(0);  for (int index=2; index < p_polyline.plaline_len(-2); ++index) {    PlaLineInt new_line=reposition_line(line_arr,index);    if (new_line == null)     continue;    line_arr.set(index,new_line);    Polyline result=new Polyline(line_arr);    return skip_segments_of_length_0(result);  }  return p_polyline;}  }
class C{  public Iterator<IPrivilege> search(String realm,ResourceSearchIndexes indexes,Set<String> subjectIndexes,boolean bSubTree) throws EntitlementException {  return search(realm,indexes,subjectIndexes,bSubTree,true);}  }
class C{  public AuthzDecisionStatement createAuthzDecisionStatement(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHZ_DECISION_STATEMENT);  if (obj == null) {    return null;  } else {    return (AuthzDecisionStatement)obj;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecdatasectionnodename.class,args);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=elementList.item(1);  attributes=element.getAttributes();{    boolean success=false;    try {      attribute=(Attr)attributes.removeNamedItemNS("http://www.nist.gov","domestic");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public VerticalPageAction(String nm,int direction,boolean select){  super(nm);  this.select=select;  this.direction=direction;}  }
class C{  private static String parseTagValue(String parseString,String openTag,String closeTag){  int beg, end;  beg=parseString.indexOf(openTag);  end=parseString.indexOf(closeTag);  if (beg < 0 || end < 0) {    return null;  }  if (beg > end) {    return null;  }  if (beg + openTag.length() == end) {    return "";  }  return parseString.substring(beg + openTag.length(),end);}  }
class C{  public boolean canCreateApplication(String realm){  return isPolicyAdmin();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttribute("dmstc:domestic");  assertTrue("hasDomesticAttr",state);}  }
class C{  public static boolean isDynamicalOrIgnoredProfile(String realm){  String profileAttribute=getProfileAttribute(realm);  return profileAttribute != null && (profileAttribute.equalsIgnoreCase(DYNAMIC_PROFILE) || profileAttribute.equalsIgnoreCase(CREATE_ALIAS_PROFILE) || profileAttribute.equalsIgnoreCase(IGNORE_PROFILE));}  }
class C{  public static PdfAction createHide(PdfAnnotation[] annotations,boolean hidden){  return new PdfAction().put(PdfName.S,PdfName.Hide).put(PdfName.T,getPdfArrayFromAnnotationsList(annotations)).put(PdfName.H,new PdfBoolean(hidden));}  }
class C{  public static boolean mergeAttributeValues(Map map1,Map map2,boolean bAdd){  boolean modified=false;  for (Iterator i=map2.keySet().iterator(); i.hasNext(); ) {    String key=(String)i.next();    Set orig=(Set)map1.get(key);    if ((orig != null) && !orig.isEmpty()) {      modified=(bAdd) ? orig.addAll((Set)map2.get(key)) : orig.removeAll((Set)map2.get(key));    } else     if (bAdd) {      map1.put(key,(Set)map2.get(key));      modified=true;    }  }  return modified;}  }
class C{  protected ItemListener createItemListener(){  return null;}  }
class C{  public static void createBackendOffline(String backendName,Collection<DN> baseDNs,ManagedObjectDefinition<? extends BackendCfgClient,? extends BackendCfg> backendType) throws Exception {  Utilities.initializeConfigurationFramework();  final File configFile=Installation.getLocal().getCurrentConfigurationFile();  try (ManagementContext context=LDAPManagementContext.newLDIFManagementContext(configFile)){    createBackend(context.getRootConfiguration(),backendName,baseDNs,backendType);  } }  }
class C{  ConcurrentSkipListMap.Node<K,V> hiNode(Comparator<? super K> cmp){  if (hi == null)   return m.findLast(); else   if (hiInclusive)   return m.findNear(hi,LT | EQ,cmp); else   return m.findNear(hi,LT,cmp);}  }
class C{  private boolean checkAttribute(String servAlg,String attribute,String val){  String attributeValue=getPropertyIgnoreCase(servAlg + ' ' + attribute);  if (attributeValue != null) {    if (attribute.equalsIgnoreCase("KeySize")) {      if (Integer.parseInt(attributeValue) >= Integer.parseInt(val)) {        return true;      }    } else {      if (attributeValue.equalsIgnoreCase(val)) {        return true;      }    }  }  return false;}  }
class C{  private boolean isValidAnonUserName(){  if (isCaseSensitive) {    return validAnonUsernames.contains(usernameParam);  } else {    for (Iterator it=validAnonUsernames.iterator(); it.hasNext(); ) {      String name=(String)it.next();      if (name != null && name.equalsIgnoreCase(usernameParam)) {        usernameParam=name;        return true;      }    }  }  return false;}  }
class C{  public Resource isAbstract(final boolean isAbstract){  this.isAbstract=isAbstract;  return this;}  }
class C{  private File doesLineMatchId(Map<Pattern,File> contents,String line){  for (  Pattern pattern : contents.keySet()) {    if (pattern.matcher(line).matches()) {      return contents.get(pattern);    }  }  return null;}  }
class C{  boolean nothingToVerify(){  return (anyToVerify == false);}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  public void loadConfig(String configUrl){  this.configUrl=configUrl;  downloadConfig(configUrl);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(6);  value=splitNode.getNodeValue();  assertEquals("textSplitTextThreeAssert"," Jones",value);}  }
class C{  private boolean isASCIIDigit(char c){  return (c >= '0' && c <= '9');}  }
class C{  @Override public SearchFilter toSearchFilter() throws DirectoryException {  ArrayList<SearchFilter> subComps;  if (filterComponents == null) {    subComps=null;  } else {    int compSize=filterComponents.size();    if (compSize == 1) {      return filterComponents.get(0).toSearchFilter();    }    subComps=new ArrayList<>(compSize);    for (    RawFilter f : filterComponents) {      subComps.add(f.toSearchFilter());    }  }  SearchFilter notComp;  if (notComponent == null) {    notComp=null;  } else {    notComp=notComponent.toSearchFilter();  }  AttributeDescription attrDesc=null;  if (attributeDescription != null) {    try {      attrDesc=AttributeDescription.valueOf(attributeDescription);    } catch (    LocalizedIllegalArgumentException e) {      throw new DirectoryException(ResultCode.PROTOCOL_ERROR,e.getMessageObject(),e);    }  }  if (assertionValue != null && attrDesc == null) {    if (matchingRuleID == null) {      throw new DirectoryException(ResultCode.PROTOCOL_ERROR,ERR_LDAP_FILTER_VALUE_WITH_NO_ATTR_OR_MR.get());    }    try {      DirectoryServer.getSchema().getMatchingRule(matchingRuleID);    } catch (    UnknownSchemaElementException e) {      throw new DirectoryException(ResultCode.INAPPROPRIATE_MATCHING,ERR_LDAP_FILTER_UNKNOWN_MATCHING_RULE.get(matchingRuleID));    }  }  ArrayList<ByteString> subAnyComps=subAnyElements != null ? new ArrayList<ByteString>(subAnyElements) : null;  return new SearchFilter(filterType,subComps,notComp,attrDesc,assertionValue,subInitialElement,subAnyComps,subFinalElement,matchingRuleID,dnAttributes);}  }
class C{  public PdfDictionary readDictionary() throws IOException {  PdfDictionary dic=new PdfDictionary();  while (true) {    if (!nextValidToken())     throw new PdfException(PdfException.UnexpectedEndOfFile);    if (tokeniser.getTokenType() == PdfTokenizer.TokenType.EndDic)     break;    if (tokeniser.getTokenType() != PdfTokenizer.TokenType.Name)     tokeniser.throwError(PdfException.DictionaryKey1IsNotAName,tokeniser.getStringValue());    PdfName name=new PdfName(tokeniser.getStringValue());    PdfObject obj=readObject();    dic.put(name,obj);  }  return dic;}  }
class C{  public AuthSPrincipal(String name){  if (name == null) {    throw new NullPointerException(myAuthI18n.getString("authError-nullInput"));  }  this.name=name;}  }
class C{  public boolean equals(String s){switch (type) {case T_STR:    if (strValue == null) {      return s == null;    }  return strValue.equals(s);case T_CHARS:return charC.equals(s);case T_BYTES:return byteC.equals(s);default :return false;}}  }
class C{  public static void saveAsGnuStepASCII(NSDictionary root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists())   if (!parent.mkdirs())   throw new IOException("The output directory does not exist and could not be created.");  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toGnuStepASCIIPropertyList());  w.close();}  }
class C{  public static Rule updateRuleMap(Map<Short,Rule> ruleMap,String ruleJson,boolean delete) throws ValidationException {  SimpleRule rule=RuleSerializer.deserializeJSONStringToRule(ruleJson);  try {    RuleValidator.getInstance().validate(rule);  } catch (  ValidationException e) {    throw e;  }  if (!delete) {    return ruleMap.put(rule.getRuleId(),rule);  } else {    return ruleMap.remove(rule.getRuleId());  }}  }
class C{  public AttrValueHistorical(ByteString value,AttributeType attributeType,CSN csnUpdate,CSN csnDelete){  this.value=value;  this.attributeType=checkNotNull(attributeType);  this.valueUpdateTime=csnUpdate;  this.valueDeleteTime=csnDelete;}  }
class C{  private void turnOnBluetooth(){  BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();  if (!mBluetoothAdapter.isEnabled()) {    mBluetoothAdapter.enable();  }  ResultProcessor.process(this,intent,ResultProcessor.RESULT_SUCCESS,getString(R.string.bluetooth_turned_on));}  }
class C{  private boolean hasDelegationPermissionsForRealm(SSOToken token,String orgName) throws SSOException, DelegationException {  Set action=new HashSet();  action.add(DELEGATE);  DelegationPermission de=new DelegationPermission(orgName,"sunAMRealmService","1.0","organizationconfig",null,action,Collections.EMPTY_MAP);  DelegationEvaluator evaluator=new DelegationEvaluatorImpl();  return (evaluator.isAllowed(token,de,Collections.EMPTY_MAP));}  }
class C{  private void updateSVGArrContent(String[] SVGData){  for (int i=0; i < SVGData.length; i++)   super.getSpriteBoundsArray()[i].setContent(SVGData[i]);}  }
class C{  public void testCertificateFactory08() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory certF;  for (int i=0; i < validValues.length; i++) {    certF=CertificateFactory.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect provider",certF.getProvider(),defaultProvider);    assertEquals("Incorrect type",certF.getType(),validValues[i]);  }}  }
class C{  @Inject public ResourceOwnerAuthenticator(RealmNormaliser realmNormaliser){  this.realmNormaliser=realmNormaliser;}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodetextnodename.class,args);}  }
class C{  ResetGenerationIdMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  if (scanner.nextByte() != MSG_TYPE_RESET_GENERATION_ID) {    throw new DataFormatException("input is not a valid GenerationId Message");  }  generationId=scanner.nextLongUTF8();}  }
class C{  @Override public Promise<ActionResponse,ResourceException> filterAction(Context context,ActionRequest request,RequestHandler next){  final CrestAuditor auditor=newAuditor(context,request);  auditor.auditAccessAttempt();  return auditResponse(next.handleAction(context,request),auditor,request);}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  public Set searchUsers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  if ((level != AMConstants.SCOPE_ONE) && (level != AMConstants.SCOPE_SUB))   throw new AMException(AMSDKBundle.getString("123",super.locale),"123");  if ((wildcard == null) || (wildcard.length() == 0))   throw new AMException(AMSDKBundle.getString("122",super.locale),"122");  String userFilter="(&(" + AMNamingAttrManager.getNamingAttr(USER) + "="+ wildcard+ ")"+ getSearchFilter(AMObject.USER)+ "("+ roleDNsAN+ "="+ super.entryDN+ "))";  String filter=null;  if (avPairs == null) {    filter=userFilter;  } else {    if (avPairs.isEmpty()) {      filter=userFilter;    } else {      StringBuilder filterSB=new StringBuilder();      filterSB.append("(&").append(userFilter).append("(|");      Iterator iter=avPairs.keySet().iterator();      while (iter.hasNext()) {        String attributeName=(String)(iter.next());        Iterator iter2=((Set)(avPairs.get(attributeName))).iterator();        while (iter2.hasNext()) {          String attributeValue=(String)iter2.next();          filterSB.append("(").append(attributeName).append("=").append(attributeValue).append(")");        }      }      filterSB.append("))");      filter=filterSB.toString();    }  }  return dsServices.search(super.token,getOrganizationDN(),filter,level);}  }
class C{  private static String addQuotes(String s){  int n=s.length();  int i;  char c;  StringBuffer result=new StringBuffer(n + 2);  result.append('\"');  for (i=0; i < n; ++i) {    c=s.charAt(i);    if (c == '\"') {      result.append('\\');    }    result.append(c);  }  result.append('\"');  return result.toString();}  }
class C{  protected void releaseBeanContextResources(){}  }
class C{  public static void showInternalMessageDialog(Component parentComponent,Object message,String title,int messageType){  showInternalMessageDialog(parentComponent,message,title,messageType,null);}  }
class C{  public int read(char b[],int off,int len) throws IOException {synchronized (lock) {    ensureOpen();    if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {      throw new IndexOutOfBoundsException();    } else     if (len == 0) {      return 0;    }    if (pos >= count) {      return -1;    }    if (pos + len > count) {      len=count - pos;    }    if (len <= 0) {      return 0;    }    System.arraycopy(buf,pos,b,off,len);    pos+=len;    return len;  }}  }
class C{  public InvalidAttributeIdentifierException(){  super();}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.EmergencyContactElement createEmergencyContactElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.EmergencyContactElementImpl();}  }
class C{  private static boolean entryExists(String dn) throws SMSException {  try {    SearchRequest request=Requests.newSearchRequest(dn,SearchScope.BASE_OBJECT,"(objectclass=*)");    InternalSearchOperation iso=icConn.processSearch(request);    ResultCode resultCode=iso.getResultCode();    if (resultCode == ResultCode.SUCCESS) {      return true;    } else     if (resultCode == ResultCode.NO_SUCH_OBJECT || resultCode == ResultCode.CLIENT_SIDE_NO_RESULTS_RETURNED) {      if (debug.warningEnabled()) {        debug.warning("SMSEmbeddedLdapObject:entryExists: " + dn + " does not exist. resultCode = "+ resultCode);      }      return false;    } else {      throw new SMSException("Failed to find entry with DN: " + dn + " LDAP error result: "+ resultCode,IUMSConstants.SMS_LDAP_OPERATION_FAILED);    }  } catch (  DirectoryException dex) {    throw new SMSException("Failed to find entry with DN: " + dn,dex,IUMSConstants.SMS_LDAP_OPERATION_FAILED);  }}  }
class C{  @Override public void begin(String namespace,String name,Attributes attributes) throws Exception {  if (paramCount > 0) {    Object parameters[]=new Object[paramCount];    for (int i=0; i < parameters.length; i++) {      parameters[i]=null;    }    digester.pushParams(parameters);  }}  }
class C{  @Override public Object onRetainNonConfigurationInstance(){  final int size=5;  Bundle bundle=new Bundle(size);  bundle.putBoolean("isInRecordingMode",mIsInRecordingMode);  bundle.putInt("mPrevRecorderState",mPrevRecorderState);  bundle.putBoolean("mIsFreshRecordingStatus",mIsNeedShowRecordDlg);  bundle.putBoolean("mIsNeedShowSearchDlg",mIsNeedShowSearchDlg);  bundle.putInt("mRecordState",mRecordState);  bundle.putBoolean("mIsPlaying",mIsPlaying);  Log.d(TAG,"onRetainNonConfigurationInstance() bundle:" + bundle);  return bundle;}  }
class C{  private void publishKeyEntry(CipherKeyEntry keyEntry) throws CryptoManagerException {  ByteString distinguishedValue=ByteString.valueOfUtf8(keyEntry.getKeyID().toString());  DN entryDN=secretKeysDN.child(new RDN(attrKeyID,distinguishedValue));  LinkedHashMap<ObjectClass,String> ocMap=new LinkedHashMap<>(2);  ocMap.put(CoreSchema.getTopObjectClass(),OC_TOP);  ocMap.put(ocCipherKey,OC_CRYPTO_CIPHER_KEY);  LinkedHashMap<AttributeType,List<Attribute>> userAttrs=new LinkedHashMap<>();  userAttrs.put(attrKeyID,Attributes.createAsList(attrKeyID,distinguishedValue));  putSingleValueAttribute(userAttrs,attrTransformation,keyEntry.getType());  putSingleValueAttribute(userAttrs,attrInitVectorLength,String.valueOf(keyEntry.getIVLengthBits()));  putSingleValueAttribute(userAttrs,attrKeyLength,String.valueOf(keyEntry.getKeyLengthBits()));  userAttrs.put(attrSymmetricKey,buildSymmetricKeyAttributes(keyEntry.getSecretKey()));  LinkedHashMap<AttributeType,List<Attribute>> opAttrs=new LinkedHashMap<>(0);  Entry entry=new Entry(entryDN,ocMap,userAttrs,opAttrs);  AddOperation addOperation=getRootConnection().processAdd(entry);  if (addOperation.getResultCode() != ResultCode.SUCCESS) {    throw new CryptoManagerException(ERR_CRYPTOMGR_SYMMETRIC_KEY_ENTRY_ADD_FAILED.get(entry.getName(),addOperation.getErrorMessage()));  }}  }
class C{  public XACMLAuthzDecisionStatement createXACMLAuthzDecisionStatement(){  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.XACML_AUTHZ_DECISION_STATEMENT);  if (obj == null) {    return new XACMLAuthzDecisionStatementImpl();  } else {    return (XACMLAuthzDecisionStatement)obj;  }}  }
class C{  public boolean isInSync(){  return inSync;}  }
class C{  public Arg(QName qname,String expression,boolean isFromWithParam){  m_qname=qname;  m_val=null;  m_expression=expression;  m_isFromWithParam=isFromWithParam;  m_isVisible=!isFromWithParam;}  }
class C{  private boolean validateAuthnToRealms(Set authnToRealmSet) throws PolicyException {  if (authnToRealmSet.isEmpty()) {    String args[]={AUTHENTICATE_TO_REALM};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_empty_values",args,null);  }  authenticateToRealm=null;  Iterator authnToRealmSetIter=authnToRealmSet.iterator();  try {    authenticateToRealm=(String)authnToRealmSetIter.next();  } catch (  ClassCastException e) {    String args[]={AUTHENTICATE_TO_REALM};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_String",args,null);  }  return true;}  }
class C{  public String toStringImpl(){  return state;}  }
class C{  public static boolean is64Bit(){  return is64Bit;}  }
class C{  public ExcC14NParameterSpec(){  preList=Collections.emptyList();}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  private static int checkFieldTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'L':    return checkClassTypeSignature(signature,pos);case '[':  return checkTypeSignature(signature,pos + 1);default :return checkTypeVariableSignature(signature,pos);}}  }
class C{  public boolean isBorderPainted(){  return paintBorder;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.KeyDescriptorElement createKeyDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.KeyDescriptorElementImpl();}  }
class C{  public double angle_approx(){  if (is_vertical) {    if (dir_y >= 0)     return Math.PI / 2; else     return -Math.PI / 2;  } else   if (is_horizontal) {    if (dir_x >= 0)     return 0; else     return Math.PI;  }  double ratio=(double)dir_y / (double)dir_x;  double atan_rad=Math.atan(ratio);  if (dir_x >= 0)   return atan_rad;  if (dir_y >= 0)   return Math.PI + atan_rad; else   return atan_rad - Math.PI;}  }
class C{  public String toString(){  return (toString(true,false));}  }
class C{  public <M extends Configuration>void deregisterDeleteListener(OptionalRelationDefinition<?,M> d,ServerManagedObjectDeleteListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d).parent();  deregisterDeleteListener(baseDN,listener);}  }
class C{  public int next(){  for (++_currentNode; _sp >= 0; ++_currentNode) {    if (_currentNode < _stack[_sp]) {      if (_type(_currentNode) != ATTRIBUTE_NODE && _type(_currentNode) != NAMESPACE_NODE)       return returnNode(makeNodeHandle(_currentNode));    } else     --_sp;  }  return NULL;}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text" || propertyName == "labelFor" || propertyName == "displayedMnemonic" || ((propertyName == "font" || propertyName == "foreground") && oldValue != newValue && getClientProperty(javax.swing.plaf.basic.BasicHTML.propertyKey) != null)) {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  private static int[] subtract(int[] big,int[] little){  int bigIndex=big.length;  int result[]=new int[bigIndex];  int littleIndex=little.length;  long difference=0;  while (littleIndex > 0) {    difference=(big[--bigIndex] & LONG_MASK) - (little[--littleIndex] & LONG_MASK) + (difference >> 32);    result[bigIndex]=(int)difference;  }  boolean borrow=(difference >> 32 != 0);  while (bigIndex > 0 && borrow)   borrow=((result[--bigIndex]=big[bigIndex] - 1) == -1);  while (bigIndex > 0)   result[--bigIndex]=big[bigIndex];  return result;}  }
class C{  public void printJobCompleted(PrintJobEvent pje){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrdeletedataoffsetgreater.class,args);}  }
class C{  private boolean hasNextInetSocketAddress(){  return nextInetSocketAddressIndex < inetSocketAddresses.size();}  }
class C{  public String toString(){  Object target=getTarget();  String methodName=getMethodName();  Object[] arguments=getArguments();  if (arguments == null) {    arguments=emptyArray;  }  StringBuffer result=new StringBuffer(instanceName(target) + "." + methodName+ "(");  int n=arguments.length;  for (int i=0; i < n; i++) {    result.append(instanceName(arguments[i]));    if (i != n - 1) {      result.append(", ");    }  }  result.append(");");  return result.toString();}  }
class C{  @KnownFailure("ManagerFactoryParameters object is not supported " + "and InvalidAlgorithmParameterException was thrown.") public void test_initLjavax_net_ssl_ManagerFactoryParameters() throws Exception {  ManagerFactoryParameters par=null;  TrustManagerFactory[] trustMF=createTMFac();  assertNotNull("TrustManagerFactory objects were not created",trustMF);  for (int i=0; i < trustMF.length; i++) {    try {      trustMF[i].init(par);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }  }  String keyAlg="DSA";  String validCaNameRfc2253=("CN=Test CA," + "OU=Testing Division," + "O=Test It All,"+ "L=Test Town,"+ "ST=Testifornia,"+ "C=Testland");  try {    KeyStore kStore=KeyStore.getInstance(KeyStore.getDefaultType());    kStore.load(null,null);    PublicKey pk=new TestKeyPair(keyAlg).getPublic();    TrustAnchor ta=new TrustAnchor(validCaNameRfc2253,pk,getFullEncoding());    Set<TrustAnchor> trustAnchors=new HashSet<TrustAnchor>();    trustAnchors.add(ta);    X509CertSelector xcs=new X509CertSelector();    PKIXBuilderParameters pkixBP=new PKIXBuilderParameters(trustAnchors,xcs);    CertPathTrustManagerParameters cptmp=new CertPathTrustManagerParameters(pkixBP);    TrustManagerFactory tmf=TrustManagerFactory.getInstance(getDefaultAlgorithm());    try {      tmf.init(cptmp);    } catch (    Exception ex) {      fail(ex + " was thrown for init(ManagerFactoryParameters spec)");    }  } catch (  Exception e) {    fail("Unexpected exception for configuration: " + e);  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LPersonalTitleElement createLPersonalTitleElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LPersonalTitleElementImpl();}  }
class C{  public static String stackTraceToSingleLineString(Throwable t){  return com.forgerock.opendj.util.StaticUtils.stackTraceToSingleLineString(t,DynamicConstants.DEBUG_BUILD);}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  public final boolean contains(String s){  if (null == s)   return false;  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equals(s))     return true;  }  return false;}  }
class C{  public JMenu(String s,boolean b){  this(s);}  }
class C{  public void verifyVisibleHighResIcons(int pageNo){  CellLayout page=getPageAt(pageNo);  if (page != null) {    ShortcutAndWidgetContainer parent=page.getShortcutsAndWidgets();    for (int i=parent.getChildCount() - 1; i >= 0; i--) {      ((BubbleTextView)parent.getChildAt(i)).verifyHighRes();    }  }}  }
class C{  public void paintEditorPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void autoroute_loop(){  int previous_unrouted_count=0;  int unrouted_count=0;  while (!s_thread.is_stop_requested()) {    int curr_pass_no=itera_settings.autoroute_settings.pass_no_get();    String message=resources.getString("batch_autorouter") + " " + resources.getString("stop_message")+ "        "+ resources.getString("pass")+ " "+ curr_pass_no+ ": ";    hdlg.screen_messages.set_status_message(message);    hdlg.userPrintln(message);    unrouted_count=autoroute_pass(curr_pass_no);    if (unrouted_count <= 0)     break;    if (unrouted_count == previous_unrouted_count)     break;    previous_unrouted_count=unrouted_count;    itera_settings.autoroute_settings.pass_no_inc();  }  autoroute_remove_tails_try();}  }
class C{  public Name(byte[] encoding) throws IOException {  DerInputStream in=new DerInputStream(encoding);  if (in.getEndOffset() != encoding.length) {    throw new IOException("Wrong content length");  }  ASN1.decode(in);  this.rdn=(List<List<AttributeTypeAndValue>>)in.content;}  }
class C{  protected void pop() throws EmptyStackException {  if (getEventLog().isLoggable(PlatformLogger.Level.FINE)) {    getEventLog().fine("EventQueue.pop(" + this + ")");  }  pushPopLock.lock();  try {    EventQueue topQueue=this;    while (topQueue.nextQueue != null) {      topQueue=topQueue.nextQueue;    }    EventQueue prevQueue=topQueue.previousQueue;    if (prevQueue == null) {      throw new EmptyStackException();    }    topQueue.previousQueue=null;    prevQueue.nextQueue=null;    while (topQueue.peekEvent() != null) {      try {        prevQueue.postEventPrivate(topQueue.getNextEventPrivate());      } catch (      InterruptedException ie) {        if (getEventLog().isLoggable(PlatformLogger.Level.FINE)) {          getEventLog().fine("Interrupted pop",ie);        }      }    }    if ((topQueue.dispatchThread != null) && (topQueue.dispatchThread.getEventQueue() == this)) {      prevQueue.dispatchThread=topQueue.dispatchThread;      topQueue.dispatchThread.setEventQueue(prevQueue);    }    if (appContext.get(AppContext.EVENT_QUEUE_KEY) == this) {      appContext.put(AppContext.EVENT_QUEUE_KEY,prevQueue);    }    topQueue.postEventPrivate(new InvocationEvent(topQueue,dummyRunnable));    pushPopCond.signalAll();  }  finally {    pushPopLock.unlock();  }}  }
class C{  public final boolean isFirstOrDisposed(){  if (disposed) {    return true;  }  return this == getFirstWithContext() || disposed;}  }
class C{  public boolean isObsolete(){  return isObsolete;}  }
class C{  private boolean isIPv6Address(String address){  return (address != null && address.indexOf(':') != -1);}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public boolean useResourceNameFormatOption(FieldConfig fieldConfig){  return resourceNameTypesEnabled() && fieldConfig != null && fieldConfig.useResourceNameType();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistreturnfirstitem.class,args);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  Hashtable<String,Component> tab=new Hashtable<>();  int ncomponents=vector.size();  for (int i=0; i < ncomponents; i++) {    Card card=(Card)vector.get(i);    tab.put(card.name,card.comp);  }  ObjectOutputStream.PutField f=s.putFields();  f.put("hgap",hgap);  f.put("vgap",vgap);  f.put("vector",vector);  f.put("currentCard",currentCard);  f.put("tab",tab);  s.writeFields();}  }
class C{  @Override public boolean accept(File dir,String name){  if (filenameFilter != null) {    return filenameFilter.accept(dir,name);  } else {    return super.accept(dir,name);  }}  }
class C{  private static void reInitConfigProperties(String basedir,boolean initAMConfig) throws FileNotFoundException, IOException {  if (initAMConfig) {    reInitAMConfigProperties(basedir);  }}  }
class C{  @Override public void close() throws IOException {  in.close();}  }
class C{  public ImportLDIFReader(LDIFImportConfig importConfig,RootContainer rootContainer) throws IOException {  super(importConfig);  Reject.ifNull(importConfig,rootContainer);  this.rootContainer=rootContainer;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb11.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb11.impl.StatusElementImpl();}  }
class C{  public PKCS10CertificationRequest(byte[] bytes){  super(toDERSequence(bytes));}  }
class C{  public void test_read_writeChar() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeChar(Character.MIN_VALUE);  raf.writeChar('T');  raf.writeChar(Character.MAX_VALUE);  raf.writeChar(Character.MIN_VALUE - 1);  raf.writeChar(Character.MAX_VALUE + 1);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Character.MIN_VALUE,raf.readChar());  assertEquals("Test 2: Incorrect value written or read;",'T',raf.readChar());  assertEquals("Test 3: Incorrect value written or read;",Character.MAX_VALUE,raf.readChar());  assertEquals("Test 4: Incorrect value written or read;",0xffff,raf.readChar());  assertEquals("Test 5: Incorrect value written or read;",0,raf.readChar());  try {    raf.readChar();    fail("Test 6: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeChar('E');    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readChar();    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public void inverseTransform(double[] srcPts,int srcOff,double[] dstPts,int dstOff,int numPts) throws NoninvertibleTransformException {  double M00, M01, M02, M10, M11, M12;  double det;  if (dstPts == srcPts && dstOff > srcOff && dstOff < srcOff + numPts * 2) {    System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);    srcOff=dstOff;  }switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;det=M00 * M11 - M01 * M10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}while (--numPts >= 0) {double x=srcPts[srcOff++] - M02;double y=srcPts[srcOff++] - M12;dstPts[dstOff++]=(x * M11 - y * M01) / det;dstPts[dstOff++]=(y * M00 - x * M10) / det;}return;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;det=M00 * M11 - M01 * M10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=(x * M11 - y * M01) / det;dstPts[dstOff++]=(y * M00 - x * M10) / det;}return;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;if (M01 == 0.0 || M10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}while (--numPts >= 0) {double x=srcPts[srcOff++] - M02;dstPts[dstOff++]=(srcPts[srcOff++] - M12) / M10;dstPts[dstOff++]=x / M01;}return;case (APPLY_SHEAR):M01=m01;M10=m10;if (M01 == 0.0 || M10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=srcPts[srcOff++] / M10;dstPts[dstOff++]=x / M01;}return;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;if (M00 == 0.0 || M11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}while (--numPts >= 0) {dstPts[dstOff++]=(srcPts[srcOff++] - M02) / M00;dstPts[dstOff++]=(srcPts[srcOff++] - M12) / M11;}return;case (APPLY_SCALE):M00=m00;M11=m11;if (M00 == 0.0 || M11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}while (--numPts >= 0) {dstPts[dstOff++]=srcPts[srcOff++] / M00;dstPts[dstOff++]=srcPts[srcOff++] / M11;}return;case (APPLY_TRANSLATE):M02=m02;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=srcPts[srcOff++] - M02;dstPts[dstOff++]=srcPts[srcOff++] - M12;}return;case (APPLY_IDENTITY):if (srcPts != dstPts || srcOff != dstOff) {System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);}return;}}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509IssuerSerialType createX509IssuerSerialType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509IssuerSerialTypeImpl();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.ClientPseudonymType createClientPseudonymType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.ClientPseudonymTypeImpl();}  }
class C{  public boolean isAllowed(SSOToken token,String resourceName,String actionName,Map envParameters) throws SSOException, PolicyException {  if (CollectionUtils.isEmpty(envParameters)) {    envParameters=new HashMap();  }  padEnvParameters(token,resourceName,actionName,envParameters);  ActionSchema schema=serviceType.getActionSchema(actionName);  if (!AttributeSchema.Syntax.BOOLEAN.equals(schema.getSyntax())) {    String objs[]={actionName};    throw new PolicyException(ResBundleUtils.rbName,"action_does_not_have_boolean_syntax",objs,null);  }  HashSet actions=new HashSet(2);  actions.add(actionName);  SSOToken adminSSOToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  try {    Subject adminSubject=SubjectUtils.createSubject(token);    Entitlement entitlement=new Entitlement(serviceTypeName,resourceName,actions);    entitlement.canonicalizeResources(adminSubject,realm);    Evaluator eval=new Evaluator(adminSubject,applicationName);    return eval.hasEntitlement(realm,SubjectUtils.createSubject(token),entitlement,envParameters);  } catch (  EntitlementException e) {    throw new PolicyException(e);  }}  }
class C{  public void displayError(LocalizableMessage msg,LocalizableMessage title){  if (isCli()) {    System.err.println(msg);  } else {    getDialog().displayError(msg,title);  }}  }
class C{  public boolean isNamespaceProcessingEnabled(){  return processNamespaces;}  }
class C{  public void printAttributes(PrintWriter writer,int indent,boolean include,Object bean,StoreDescription desc) throws Exception {  if (include && desc != null && !desc.isStandard()) {    writer.print(" className=\"");    writer.print(bean.getClass().getName());    writer.print("\"");  }  PropertyDescriptor descriptors[]=Introspector.getBeanInfo(bean.getClass()).getPropertyDescriptors();  if (descriptors == null) {    descriptors=new PropertyDescriptor[0];  }  Object bean2=defaultInstance(bean);  for (int i=0; i < descriptors.length; i++) {    if (descriptors[i] instanceof IndexedPropertyDescriptor) {      continue;    }    if (!isPersistable(descriptors[i].getPropertyType()) || (descriptors[i].getReadMethod() == null) || (descriptors[i].getWriteMethod() == null)) {      continue;    }    if (desc.isTransientAttribute(descriptors[i].getName())) {      continue;    }    Object value=IntrospectionUtils.getProperty(bean,descriptors[i].getName());    if (value == null) {      continue;    }    Object value2=IntrospectionUtils.getProperty(bean2,descriptors[i].getName());    if (value.equals(value2)) {      continue;    }    printAttribute(writer,indent,bean,desc,descriptors[i].getName(),bean2,value);  }  if (bean instanceof ResourceBase) {    ResourceBase resource=(ResourceBase)bean;    for (Iterator<String> iter=resource.listProperties(); iter.hasNext(); ) {      String name=iter.next();      Object value=resource.getProperty(name);      if (!isPersistable(value.getClass())) {        continue;      }      if (desc.isTransientAttribute(name)) {        continue;      }      printValue(writer,indent,name,value);    }  }}  }
class C{  private void assignServices(OrganizationConfigManager realmManager,List newServiceNames) throws SMSException {  try {    Set<String> existingServices=realmManager.getAssignedServices();    Set<String> allServices=new HashSet(newServiceNames.size() + existingServices.size());    allServices.addAll(existingServices);    allServices.addAll(newServiceNames);    for (    String serviceName : allServices) {      if (newServiceNames.contains(serviceName) && !existingServices.contains(serviceName)) {        realmManager.assignService(serviceName,null);      } else       if (!newServiceNames.contains(serviceName) && existingServices.contains(serviceName)) {        realmManager.unassignService(serviceName);      }    }  } catch (  SMSException e) {    debug.error("RealmResource.assignServices() : Unable to assign services");    throw e;  }}  }
class C{  final TreeNode<K,V> root(){  for (TreeNode<K,V> r=this, p; ; ) {    if ((p=r.parent) == null)     return r;    r=p;  }}  }
class C{  public NamingRequest parseXML(){  if (document == null) {    return null;  }  Element elem=document.getDocumentElement();  NamingRequest namingRequest=new NamingRequest();  String temp=elem.getAttribute("vers");  if (temp != null) {    namingRequest.setRequestVersion(temp);  }  temp=elem.getAttribute("reqid");  if (temp != null) {    namingRequest.setRequestID(temp);  }  temp=elem.getAttribute("sessid");  if ((temp != null) && ((temp.trim()).length() != 0)) {    namingRequest.setSessionId(temp);  } else {    namingRequest.setSessionId(null);  }  temp=elem.getAttribute("preferredNamingURL");  if ((temp != null) && ((temp.trim()).length() != 0)) {    namingRequest.setPreferredNamingURL(temp);  } else {    namingRequest.setPreferredNamingURL(null);  }  return namingRequest;}  }
class C{  public void unFavorite(String topicId,String access_token,Callback<Status> callback){  topicApi=getRetrofitForSimpleJson().create(TopicApi.class);  topicApi.unFavorite(topicId,access_token).enqueue(callback);}  }
class C{  void doSomeSweeping(boolean tryHarder){  int probes=tryHarder ? LONG_SWEEP_PROBES : SHORT_SWEEP_PROBES;  Node o, p;  final Node sweeper=this.sweeper;  boolean passedGo;  if (sweeper == null) {    o=null;    p=head;    passedGo=true;  } else {    o=sweeper;    p=o.next;    passedGo=false;  }  for (; probes > 0; probes--) {    if (p == null) {      if (passedGo)       break;      o=null;      p=head;      passedGo=true;    }    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.isDetached()) {      probes=LONG_SWEEP_PROBES;      p.clear();      p.next=null;      if (o == null) {        head=next;        if (next == null) {          itrs=null;          return;        }      } else       o.next=next;    } else {      o=p;    }    p=next;  }  this.sweeper=(p == null) ? null : o;}  }
class C{  public void testDivideBigDecimalScaleRoundingModeUP(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=-15;  int newScale=31;  RoundingMode rm=RoundingMode.UP;  String c="-5.00000E-26";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public <M extends Configuration>void registerDeleteListener(OptionalRelationDefinition<?,M> d,ConfigurationDeleteListener<M> listener) throws ConfigException {  registerDeleteListener(d,new ServerManagedObjectDeleteListenerAdaptor<M>(listener));}  }
class C{  public void testSubtractMathContextDiffScaleNegPos(){  String a="986798656676789766678767876078779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=40;  String c="9.867986566767897666787678760787798104576347813847567949870000000000000E+71";  int cScale=-2;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(70,RoundingMode.HALF_DOWN);  BigDecimal result=aNumber.subtract(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  private void fillBumpBuffer(){  Graphics g=image.getGraphics();  g.setColor(backColor);  g.fillRect(0,0,IMAGE_SIZE,IMAGE_SIZE);  g.setColor(topColor);  for (int x=0; x < IMAGE_SIZE; x+=4) {    for (int y=0; y < IMAGE_SIZE; y+=4) {      g.drawLine(x,y,x,y);      g.drawLine(x + 2,y + 2,x + 2,y + 2);    }  }  g.setColor(shadowColor);  for (int x=0; x < IMAGE_SIZE; x+=4) {    for (int y=0; y < IMAGE_SIZE; y+=4) {      g.drawLine(x + 1,y + 1,x + 1,y + 1);      g.drawLine(x + 3,y + 3,x + 3,y + 3);    }  }  g.dispose();}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://ecommerce.org/schema";  String qualifiedName="xml:local";  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public static void saveAsGnuStepASCII(NSArray root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists())   if (!parent.mkdirs())   throw new IOException("The output directory does not exist and could not be created.");  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toGnuStepASCIIPropertyList());  w.close();}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509SubjectName createX509DataTypeX509SubjectName() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509SubjectNameImpl();}  }
class C{  public void testGenerateCertificates2() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCertificates(null);    fail("CertificateException was not thrown");  } catch (  CertificateException e) {  }}  }
class C{  public static void main(String[] args){  while (true) {    TaskToSchedulePanel p=new TaskToSchedulePanel("TEST TASK");    GenericDialog dlg=new GenericDialog(Utilities.createFrame(),p);    dlg.setModal(true);    dlg.setVisible(true);  }}  }
class C{  protected Expression lte(int opPos) throws TransformerException {  return compileOperation(new Lte(),opPos);}  }
class C{  protected void startTimer(SIPServerTransaction transaction){  if (this.timerTask != null && timerTask.transaction == transaction) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Timer already running for " + getDialogId());    return;  }  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))   logger.logDebug("Starting dialog timer for " + getDialogId());  acquireTimerTaskSem();  try {    if (this.timerTask != null) {      this.timerTask.transaction=transaction;    } else {      this.timerTask=new DialogTimerTask(transaction);      if (sipStack.getTimer() != null && sipStack.getTimer().isStarted()) {        sipStack.getTimer().scheduleWithFixedDelay(timerTask,transaction.getBaseTimerInterval(),transaction.getBaseTimerInterval());      }    }  }  finally {    releaseTimerTaskSem();  }  this.setRetransmissionTicks();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthEditorPaneUI();}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case MENU_HELP:    help();  return true;}return super.onOptionsItemSelected(item);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  DecimalFormatProperties dfp=new DecimalFormatProperties(handler.nextUid());  dfp.setDOMBackPointer(handler.getOriginatingNode());  dfp.setLocaterInfo(handler.getLocator());  setPropertiesFromAttributes(handler,rawName,attributes,dfp);  handler.getStylesheet().setDecimalFormat(dfp);  handler.getStylesheet().appendChild(dfp);}  }
class C{  public AppLauncher forward(int localPort){  this.localPort=localPort;  return this;}  }
class C{  public SAXMarshaller(ContentHandler _writer,NamespacePrefixMapper prefixMapper,MarshallerImpl _owner){  this.writer=_writer;  this.owner=_owner;  this.nsContext=new NamespaceContextImpl(prefixMapper != null ? prefixMapper : defaultNamespacePrefixMapper);}  }
class C{  public int readAndExecute(LDAPConnection connection,String attributeType,byte[] attributeVal,Reader reader,LDAPCompareOptions compareOptions) throws IOException, LDAPException {  int aggResultCode=0;  BufferedReader in=new BufferedReader(reader);  String line=null;  while ((line=in.readLine()) != null) {    int resultCode=executeCompare(connection,attributeType,attributeVal,line,compareOptions);    aggResultCode=aggregateResultCode(aggResultCode,resultCode);  }  in.close();  return aggResultCode;}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  public org.omg.CORBA.Object resolve_str(String sn) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("resolve_str",true);    org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.write($out,sn);    $in=_invoke($out);    org.omg.CORBA.Object $result=org.omg.CORBA.ObjectHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return resolve_str(sn);  } finally {    _releaseReply($in);  }}  }
class C{  public void clear(){  this.referent=null;}  }
class C{  public void postSingleImage(Context context,Handler h,String fileParam,String fileName,InputStream imgInputStream){  postSingleImage(context,h,null,fileParam,fileName,imgInputStream);}  }
class C{  public UndoableEdit insertString(int where,String str) throws BadLocationException {  if (where >= count || where < 0) {    throw new BadLocationException("Invalid location",count);  }  char[] chars=str.toCharArray();  replace(where,0,chars,0,chars.length);  if (marks != null) {    updateMarksForInsert(where,str.length());  }  return new InsertUndo(where,str.length());}  }
class C{  public boolean hasQueryId(){  return queryFilter == null;}  }
class C{  void updateCounters(){  bytesReceived+=req.getBytesRead();  bytesSent+=req.getResponse().getContentWritten();  requestCount++;  if (req.getResponse().getStatus() >= 400)   errorCount++;  long t0=req.getStartTime();  long t1=System.currentTimeMillis();  long time=t1 - t0;  this.lastRequestProcessingTime=time;  processingTime+=time;  if (maxTime < time) {    maxTime=time;    maxRequestUri=req.requestURI().toString();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeattributenodevalue.class,args);}  }
class C{  public boolean isExists(){  return exists;}  }
class C{  boolean isMarker(){  return value == this;}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("Search Result Reference");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  Referral URLs:");  buffer.append(EOL);  for (  String url : referralURLs) {    buffer.append(indentBuf);    buffer.append("    ");    buffer.append(url);    buffer.append(EOL);  }}  }
class C{  public void paintProgressBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  private void saveSPsoapMni(String mnisoapLocation,String mnirespLoaction,List manageNameIdList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException {  if (mnisoapLocation != null && mnisoapLocation.length() > 0) {    ManageNameIDServiceElement slsElemSoap=objFact.createManageNameIDServiceElement();    slsElemSoap.setBinding(soapBinding);    slsElemSoap.setLocation(mnisoapLocation);    slsElemSoap.setResponseLocation(mnirespLoaction);    manageNameIdList.add(slsElemSoap);  }}  }
class C{  private LdapException interrupted(InterruptedException e){  return newLdapException(ResultCode.CLIENT_SIDE_USER_CANCELLED,e);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeTruncatedLengthArrayAsSequence() throws Exception {  super.testDecodeTruncatedLengthArrayAsSequence();}  }
class C{  protected void paint(SynthContext context,Graphics g){  super.paint(g,getComponent());}  }
class C{  public void testCase17(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=1;  int bSign=1;  byte rBytes[]={12,-21,73,56,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void handleTblSupportedCharsetsHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    G11NSupportedCharsetsEditViewBean vb=(G11NSupportedCharsetsEditViewBean)getViewBean(G11NSupportedCharsetsEditViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.populateValues((String)getDisplayFieldValue("tblSupportedCharsetsHrefAction"));    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  void removeListener(String listenerID){  if (listenerObjects != null) {synchronized (listenerObjects) {      listenerObjects.remove(listenerID);      if (listenerObjects.isEmpty()) {        deregisterListener();      }    }    if (debug.messageEnabled()) {      debug.message("ServiceConfigManagerImpl(" + serviceName + "):removeListener ListenerId: "+ listenerID);    }  }}  }
class C{  public ElementIterator(Element root){  this.root=root;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node commentNode;  String commentNodeName;  int nodeType;  doc=(Document)load("staff",false);  testList=doc.getChildNodes();  for (int indexN10040=0; indexN10040 < testList.getLength(); indexN10040++) {    commentNode=(Node)testList.item(indexN10040);    commentNodeName=commentNode.getNodeName();    if (equals("#comment",commentNodeName)) {      nodeType=(int)commentNode.getNodeType();      assertEquals("nodeCommentNodeTypeAssert1",8,nodeType);    }  }}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Object[] kvData=(Object[])(s.readObject());  for (int i=0; i < kvData.length; i+=2) {    if (kvData[i] == null) {      break;    } else     if (kvData[i].equals("selectionModel")) {      selectionModel=(SingleSelectionModel)kvData[i + 1];    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionMethodType.OAEPparams createEncryptionMethodTypeOAEPparams() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.OAEPparamsImpl();}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=ProtocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    TestCase.fail(s);  }}  }
class C{  public boolean isGetAllReturnAttributesEnabled(){  return getAllAttributesEnabled;}  }
class C{  public void undo(){  super.undo();  this.object.restoreState(preState);}  }
class C{  public boolean isResourceNameAllowed(){  return (isResourceNameAllowed);}  }
class C{  public void add(UpdateMsg update){synchronized (lock) {    final UpdateMsg msgSameCSN=map.put(update.getCSN(),update);    if (msgSameCSN != null) {      try {        if (msgSameCSN.getBytes().length != update.getBytes().length || msgSameCSN.isAssured() != update.isAssured() || msgSameCSN.getVersion() != update.getVersion()) {          bytesCount+=update.size() - msgSameCSN.size();          logger.error(ERR_RSQUEUE_DIFFERENT_MSGS_WITH_SAME_CSN,msgSameCSN.getCSN(),msgSameCSN,update);        }      } catch (      Exception e) {        logger.traceException(e);      }    } else {      bytesCount+=update.size();    }  }}  }
class C{  public Phone createPhone(String value){  PhoneField phoneImpl=new PhoneField();  try {    phoneImpl.setValue(value);  } catch (  SdpException s) {    s.printStackTrace();  }  return phoneImpl;}  }
class C{  public OperationNotSupportedException(String explanation){  super(explanation);}  }
class C{  public static long hash64(final String text){  final byte[] bytes=text.getBytes();  return hash64(bytes,bytes.length);}  }
class C{  protected void drawBorder(PdfCanvas canvas,PdfFormXObject xObject,float width,float height){  canvas.saveState();  float borderWidth=getBorderWidth();  PdfDictionary bs=getWidgets().get(0).getBorderStyle();  if (borderWidth < 0) {    borderWidth=0;  }  if (borderColor == null) {    borderColor=Color.BLACK;  }  if (backgroundColor != null) {    canvas.setFillColor(backgroundColor).rectangle(borderWidth / 2,borderWidth / 2,width - borderWidth,height - borderWidth).fill();  }  if (borderWidth > 0) {    borderWidth=Math.max(1,borderWidth);    canvas.setStrokeColor(borderColor).setLineWidth(borderWidth);    if (bs != null) {      PdfName borderType=bs.getAsName(PdfName.S);      if (borderType != null && borderType.equals(PdfName.D)) {        PdfArray dashArray=bs.getAsArray(PdfName.D);        if (dashArray != null) {          int unitsOn=dashArray.getAsNumber(0) != null ? dashArray.getAsNumber(0).intValue() : 0;          int unitsOff=dashArray.getAsNumber(1) != null ? dashArray.getAsNumber(1).intValue() : 0;          canvas.setLineDash(unitsOn,unitsOff,0);        }      }    }    canvas.rectangle(0,0,width,height).stroke();  }  applyRotation(xObject,height,width);  canvas.restoreState();}  }
class C{  @Override public void recycle(){  super.recycle();  outputStream=null;}  }
class C{  @Descriptor("Encrypt the input string.") public void encrypt(CommandSession session,@Parameter(names={"-j","--json"},presentValue="false",absentValue="true") boolean isString,@Descriptor("source string to encrypt") String name){  try {    CryptoServiceImpl cryptoSvc=(CryptoServiceImpl)CryptoServiceFactory.getInstance();    cryptoSvc.activate(null);    JsonValue value=new JsonValue(isString ? name : mapper.readValue(name,Object.class));    String cipher=ServerConstants.SECURITY_CRYPTOGRAPHY_DEFAULT_CIPHER;    String alias=IdentityServer.getInstance().getProperty("openidm.config.crypto.alias","openidm-config-default");    JsonValue secure=cryptoSvc.encrypt(value,cipher,alias);    StringWriter wr=new StringWriter();    mapper.writerWithDefaultPrettyPrinter().writeValue(wr,secure.getObject());    session.getConsole().println("-----BEGIN ENCRYPTED VALUE-----");    session.getConsole().println(wr.toString());    session.getConsole().println("------END ENCRYPTED VALUE------");  } catch (  final JsonCryptoException|IOException|GeneralSecurityException e) {    e.printStackTrace();  }}  }
class C{  @Deprecated public final boolean isInitialized(){  return true;}  }
class C{  public boolean isAuditLogEnabled(){  return logStatus;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.DigestMethodType createDigestMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.DigestMethodTypeImpl();}  }
class C{  public void moveToBack(Component c){  setPosition(c,-1);}  }
class C{  public void doFilter(HttpExchange t,Filter.Chain chain) throws IOException {  chain.doFilter(t);  HttpContext context=t.getHttpContext();  Headers rmap=t.getRequestHeaders();  String s=df.format(new Date());  s=s + " " + t.getRequestMethod()+ " "+ t.getRequestURI()+ " ";  s=s + " " + t.getResponseCode()+ " "+ t.getRemoteAddress();  ps.println(s);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation docImpl;  boolean xmlstate;  boolean htmlstate;  doc=(Document)load("hc_staff",false);  docImpl=doc.getImplementation();  xmlstate=docImpl.hasFeature("XML","1.0");  htmlstate=docImpl.hasFeature("HTML","1.0");  if (("text/html".equals(getContentType()))) {    assertTrue("supports_HTML_1.0",htmlstate);  } else {    assertTrue("supports_XML_1.0",xmlstate);  }}  }
class C{  public static FocusListener add(FocusListener a,FocusListener b){  return (FocusListener)addInternal(a,b);}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public static List<ImageData> createGifFrames(URL url){  byte[] imageType=readImageType(url);  if (imageTypeIs(imageType,gif)) {    GifImageData image=new GifImageData(url);    GifImageHelper.processImage(image);    return image.getFrames();  }  throw new IllegalArgumentException("GIF image expected.");}  }
class C{  PageLoader(Document doc,InputStream in,URL old,URL page){  this.in=in;  this.old=old;  this.page=page;  this.doc=doc;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  ObjectOutputStream.PutField fields=out.putFields();  fields.put("cause",(Throwable)super.getCause());  out.writeFields();}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  if ((off | len | (b.length - (len + off))| (off + len)) < 0)   throw new IndexOutOfBoundsException();  for (int i=0; i < len; i++) {    write(b[off + i]);  }}  }
class C{  public void testValueOfIntegerMax(){  long longVal=Integer.MAX_VALUE;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={127,-1,-1,-1};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  SessionPropertyCondition(Debug debug,CoreWrapper coreWrapper){  this.debug=debug;  this.coreWrapper=coreWrapper;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.EncodedString createEncodedString() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.EncodedStringImpl();}  }
class C{  public ModifyDNOperation processModifyDN(DN entryDN,RDN newRDN,boolean deleteOldRDN){  return processModifyDN(entryDN,newRDN,deleteOldRDN,null,null);}  }
class C{  public static NSObject parse(byte[] bytes) throws ParseException {  ASCIIPropertyListParser parser=new ASCIIPropertyListParser(bytes);  return parser.parse();}  }
class C{  public byte[] fromUTF8(String contents) throws UnsupportedEncodingException {  Reject.ifNull(contents);  return contents.getBytes(ENCODING);}  }
class C{  public void paintFileChooserBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void onToggleMute(View v){  mBtnMic.toggleState();  if (getBroadcast().getStatus().isRunning()) {    mWZAudioDevice.setAudioPaused(!mBtnMic.isOn());    Toast.makeText(this,"Audio stream " + (mWZAudioDevice.isAudioPaused() ? "muted" : "enabled"),Toast.LENGTH_SHORT).show();  } else {    mAudioLevelMeter.setVisibility(mBtnMic.isOn() ? View.VISIBLE : View.GONE);    if (mBtnMic.isOn())     mWZAudioDevice.startAudioSampler(); else     mWZAudioDevice.stopAudioSampler();  }}  }
class C{  @Override public int border_line_index(PlaLineInt p_line){  for (int index=0; index < lines_size(); ++index) {    if (p_line.equals(tline_get(index))) {      return index;    }  }  return -1;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.FederationMetadataType createFederationMetadataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FederationMetadataTypeImpl();}  }
class C{  void processChangeTimeHeartbeatMsg(ServerHandler senderHandler,ChangeTimeHeartbeatMsg msg) throws DirectoryException {  try {    domainDB.replicaHeartbeat(baseDN,msg.getCSN());  } catch (  ChangelogException e) {    throw new DirectoryException(ResultCode.OPERATIONS_ERROR,e.getMessageObject(),e);  }  if (senderHandler.isDataServer()) {synchronized (pendingStatusMessagesLock) {      pendingStatusMessages.enqueueChangeTimeHeartbeatMsg(msg);    }    statusAnalyzer.notifyPendingStatusMessage();  }}  }
class C{  public EasyBatteryMod(final Context context){  this.context=context;}  }
class C{  public Type3Glyph addGlyph(char c,int wx,int llx,int lly,int urx,int ury){  Type3Glyph glyph=getType3Glyph(c);  if (glyph != null) {    return glyph;  }  int code=getFirstEmptyCode();  glyph=new Type3Glyph(getDocument(),wx,llx,lly,urx,ury,getFontProgram().isColorized());  getFontProgram().addGlyph(code,c,wx,new int[]{llx,lly,urx,ury},glyph);  fontEncoding.addSymbol((byte)code,c);  if (!getFontProgram().isColorized()) {    if (fontProgram.countOfGlyphs() == 0) {      fontProgram.getFontMetrics().setBbox(llx,lly,urx,ury);    } else {      int[] bbox=fontProgram.getFontMetrics().getBbox();      int newLlx=Math.min(bbox[0],llx);      int newLly=Math.min(bbox[1],lly);      int newUrx=Math.max(bbox[2],urx);      int newUry=Math.max(bbox[3],ury);      fontProgram.getFontMetrics().setBbox(newLlx,newLly,newUrx,newUry);    }  }  return glyph;}  }
class C{  public boolean equals(Object thatObject){  if (!(thatObject instanceof MimeTypeParameterList)) {    return false;  }  MimeTypeParameterList that=(MimeTypeParameterList)thatObject;  if (this.size() != that.size()) {    return false;  }  String name=null;  String thisValue=null;  String thatValue=null;  Set<Map.Entry<String,String>> entries=parameters.entrySet();  Iterator<Map.Entry<String,String>> iterator=entries.iterator();  Map.Entry<String,String> entry=null;  while (iterator.hasNext()) {    entry=iterator.next();    name=entry.getKey();    thisValue=entry.getValue();    thatValue=that.parameters.get(name);    if ((thisValue == null) || (thatValue == null)) {      if (thisValue != thatValue) {        return false;      }    } else     if (!thisValue.equals(thatValue)) {      return false;    }  }  return true;}  }
class C{  protected void deployDescriptors(File configBase,String[] files){  if (files == null)   return;  ExecutorService es=host.getStartStopExecutor();  List<Future<?>> results=new ArrayList<>();  for (int i=0; i < files.length; i++) {    File contextXml=new File(configBase,files[i]);    if (files[i].toLowerCase(Locale.ENGLISH).endsWith(".xml")) {      ContextName cn=new ContextName(files[i],true);      if (isServiced(cn.getName()) || deploymentExists(cn.getName()))       continue;      results.add(es.submit(new DeployDescriptor(this,cn,contextXml)));    }  }  for (  Future<?> result : results) {    try {      result.get();    } catch (    Exception e) {      log.error(sm.getString("hostConfig.deployDescriptor.threaded.error"),e);    }  }}  }
class C{  private int doRecvAndUnwrap() throws IOException {synchronized (unwrapLock) {    while (true) {      abortOnSSLException();      recvUnwrappedBuffer.compact();      final SSLEngineResult result;      try {        result=sslEngine.unwrap(recvWrappedBuffer,recvUnwrappedBuffer);      } catch (      final SSLException e) {        sslException=e;        throw e;      } finally {        recvUnwrappedBuffer.flip();      }switch (result.getStatus()) {case BUFFER_OVERFLOW:        final int newAppSize=sslEngine.getSession().getApplicationBufferSize();      final ByteBuffer newRecvUnwrappedBuffer=ByteBuffer.allocate(recvUnwrappedBuffer.limit() + newAppSize);    newRecvUnwrappedBuffer.put(recvUnwrappedBuffer);  newRecvUnwrappedBuffer.flip();recvUnwrappedBuffer=newRecvUnwrappedBuffer;break;case BUFFER_UNDERFLOW:final int newPktSize=sslEngine.getSession().getPacketBufferSize();if (newPktSize > recvWrappedBuffer.capacity()) {final ByteBuffer newRecvWrappedBuffer=ByteBuffer.allocate(newPktSize);newRecvWrappedBuffer.put(recvWrappedBuffer);newRecvWrappedBuffer.flip();recvWrappedBuffer=newRecvWrappedBuffer;}recvWrappedBuffer.compact();final int read=channel.read(recvWrappedBuffer);recvWrappedBuffer.flip();if (read <= 0) {return read;}break;case CLOSED:return -1;default :if (recvUnwrappedBuffer.hasRemaining()) {return recvUnwrappedBuffer.remaining();} else if (isHandshaking(result.getHandshakeStatus())) {doHandshake(true);}break;}}}}  }
class C{  public void _read(InputStream input){  value=input.read_boolean();}  }
class C{  public void init(int size,int certainty,SecureRandom random){  this.use186_3=false;  this.L=size;  this.N=getDefaultN(size);  this.certainty=certainty;  this.random=random;}  }
class C{  public void insert(UndoObjectStorable p_object){  if (p_object == null)   throw new IllegalArgumentException(classname + "insert p_object is null");  disable_redo();  UndoObjectNode undoable_object=new UndoObjectNode(p_object,stack_level);  objects_map.put(p_object,undoable_object);}  }
class C{  public static boolean isDescendingFrom(Component a,Component b){  if (a == b)   return true;  for (Container p=a.getParent(); p != null; p=p.getParent())   if (p == b)   return true;  return false;}  }
class C{  private final void resetTokenMark(int mark){  int qsz=m_compiler.getTokenQueueSize();  m_processor.m_queueMark=(mark > 0) ? ((mark <= qsz) ? mark - 1 : mark) : 0;  if (m_processor.m_queueMark < qsz) {    m_processor.m_token=(String)m_compiler.getTokenQueue().elementAt(m_processor.m_queueMark++);    m_processor.m_tokenChar=m_processor.m_token.charAt(0);  } else {    m_processor.m_token=null;    m_processor.m_tokenChar=0;  }}  }
class C{  public ServerController(Installation installation){  this(null,installation);}  }
class C{  public void deleteDynamicGroups(Set dynamicGroupDNs) throws AMException, SSOException {  Iterator iter=dynamicGroupDNs.iterator();  while (iter.hasNext()) {    String dynamicGroupDN=(String)iter.next();    AMDynamicGroup dynamicGroup=new AMDynamicGroupImpl(super.token,dynamicGroupDN);    dynamicGroup.delete();  }}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  handleInsert(changes.getOffset(),changes.getLength());  super.insertUpdate(changes,a,f);}  }
class C{  private void _writePositiveVInt(int i) throws IOException {  _ensureRoomForOutput(5);  byte b0=(byte)(0x80 + (i & 0x3F));  i>>=6;  if (i <= 0x7F) {    if (i > 0) {      _outputBuffer[_outputTail++]=(byte)i;    }    _outputBuffer[_outputTail++]=b0;    return;  }  byte b1=(byte)(i & 0x7F);  i>>=7;  if (i <= 0x7F) {    _outputBuffer[_outputTail++]=(byte)i;    _outputBuffer[_outputTail++]=b1;    _outputBuffer[_outputTail++]=b0;  } else {    byte b2=(byte)(i & 0x7F);    i>>=7;    if (i <= 0x7F) {      _outputBuffer[_outputTail++]=(byte)i;      _outputBuffer[_outputTail++]=b2;      _outputBuffer[_outputTail++]=b1;      _outputBuffer[_outputTail++]=b0;    } else {      byte b3=(byte)(i & 0x7F);      _outputBuffer[_outputTail++]=(byte)(i >> 7);      _outputBuffer[_outputTail++]=b3;      _outputBuffer[_outputTail++]=b2;      _outputBuffer[_outputTail++]=b1;      _outputBuffer[_outputTail++]=b0;    }  }}  }
class C{  public void characters(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {  m_accumulator.append(ch,start,length);  if (null == m_firstBackPointer)   m_firstBackPointer=handler.getOriginatingNode();  if (this != handler.getCurrentProcessor())   handler.pushProcessor(this);}  }
class C{  void sendReset(){  state.sendReset();}  }
class C{  public void removeDefinition(String name) throws UMSException {  Guid guid=new Guid(ICOSDefinition.DEFAULT_NAMING_ATTR + "=" + name+ ","+ _parentObject.getGuid().getDn());  _parentObject.removeChild(guid);}  }
class C{  private String loadConvert(String theString){  char aChar;  int len=theString.length();  StringBuilder outBuffer=new StringBuilder(len);  for (int x=0; x < len; ) {    aChar=theString.charAt(x++);    if (aChar == '\\') {      aChar=theString.charAt(x++);      if (aChar == 'u') {        int value=0;        for (int i=0; i < 4; i++) {          aChar=theString.charAt(x++);switch (aChar) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':{              value=(value << 4) + aChar - '0';              break;            }case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':{            value=(value << 4) + 10 + aChar - 'a';            break;          }case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':{          value=(value << 4) + 10 + aChar - 'A';          break;        }default :{        throw new IllegalArgumentException("Malformed \\uxxxx encoding.");      }  }}outBuffer.append((char)value);} else {if (aChar == 't') {  aChar='\t';} else if (aChar == 'r') {  aChar='\r';} else if (aChar == 'n') {  aChar='\n';} else if (aChar == 'f') {  aChar='\f';}outBuffer.append(aChar);}} else {outBuffer.append(aChar);}}return outBuffer.toString();}  }
class C{  public static <T>PooledObjectFactory<T> synchronizedPooledFactory(final PooledObjectFactory<T> factory){  return new SynchronizedPooledObjectFactory<>(factory);}  }
class C{  public DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat){  this(defaultFormat,null);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatingAuthorityType createAuthenticatingAuthorityType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatingAuthorityTypeImpl();}  }
class C{  public Dimension preferredLayoutSize(Container parent){  GridBagLayoutInfo info=getLayoutInfo(parent,PREFERREDSIZE);  return getMinSize(parent,info);}  }
class C{  public void addElement(int value){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.addElement(value);}  }
class C{  public void visitInnerClassType(String name){}  }
class C{  void selectColumn(int newColIndex){  selectColumn(newColIndex,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(4);  state=testNode.hasAttribute("domestic");  assertFalse("throw_False",state);}  }
class C{  @Override public void expire(boolean notify){  expire(notify,true);}  }
class C{  public ServiceProxy(Service service) throws ServiceException {  this.service=service;  try {    portQNameClass=Service.class.getDeclaredMethod("getPort",new Class[]{QName.class,Class.class});    portClass=Service.class.getDeclaredMethod("getPort",new Class[]{Class.class});  } catch (  Exception e) {    throw new ServiceException(e);  }}  }
class C{  public ByteBufferOutputStream(){  this(128);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttribute01.class,args);}  }
class C{  public final String pop(){  if (m_firstFree <= 0)   return null;  m_firstFree--;  String s=m_map[m_firstFree];  m_map[m_firstFree]=null;  return s;}  }
class C{  protected View createChild(String name){  if (name.equals(TXT_PARENT_INDEX)) {    return new StaticTextField(this,TXT_PARENT_INDEX,"");  }  if (name.equals(TXT_INDEX)) {    return new StaticTextField(this,TXT_INDEX,"");  }  if (name.equals(TXT_CHOICE)) {    return new StaticTextField(this,TXT_CHOICE,"");  }  throw new IllegalArgumentException("Invalid child name [" + name + "]");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.WTLSElement createWTLSElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.WTLSElementImpl();}  }
class C{  public boolean isLockoutEnabled(){  return (failureLockoutMode && failureLockoutCount > 0 && failureLockoutTime > 0);}  }
class C{  public final void dispatchCharactersEvents(int nodeHandle,ContentHandler ch,boolean normalize) throws SAXException {  int identity=makeNodeIdentity(nodeHandle);  if (identity == DTM.NULL)   return;  int type=_type2(identity);  if (type == DTM.ELEMENT_NODE || type == DTM.DOCUMENT_NODE) {    int startNode=identity;    identity=_firstch2(identity);    if (DTM.NULL != identity) {      int offset=-1;      int length=0;      do {        type=_exptype2(identity);        if (type == DTM.TEXT_NODE || type == DTM.CDATA_SECTION_NODE) {          int dataIndex=m_dataOrQName.elementAt(identity);          if (dataIndex >= 0) {            if (-1 == offset) {              offset=dataIndex >>> TEXT_LENGTH_BITS;            }            length+=dataIndex & TEXT_LENGTH_MAX;          } else {            if (-1 == offset) {              offset=m_data.elementAt(-dataIndex);            }            length+=m_data.elementAt(-dataIndex + 1);          }        }        identity++;      } while (_parent2(identity) >= startNode);      if (length > 0) {        if (normalize)         m_chars.sendNormalizedSAXcharacters(ch,offset,length); else         m_chars.sendSAXcharacters(ch,offset,length);      }    }  } else   if (DTM.TEXT_NODE == type || DTM.CDATA_SECTION_NODE == type) {    int dataIndex=m_dataOrQName.elementAt(identity);    if (dataIndex >= 0) {      if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX); else       m_chars.sendSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX);    } else {      if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1)); else       m_chars.sendSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1));    }  } else {    int dataIndex=m_dataOrQName.elementAt(identity);    if (dataIndex < 0) {      dataIndex=-dataIndex;      dataIndex=m_data.elementAt(dataIndex + 1);    }    String str=(String)m_values.elementAt(dataIndex);    if (normalize)     FastStringBuffer.sendNormalizedSAXcharacters(str.toCharArray(),0,str.length(),ch); else     ch.characters(str.toCharArray(),0,str.length());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(15,", Esquire");  childData=child.getData();  assertEquals("characterdataInsertDataEndAssert","Margaret Martin, Esquire",childData);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignatureMethodType.HMACOutputLength createSignatureMethodTypeHMACOutputLength() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureMethodTypeImpl.HMACOutputLengthImpl();}  }
class C{  protected String realmFor(Context context){  return context.containsContext(RealmContext.class) ? context.asContext(RealmContext.class).getRealm().asPath() : null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttr;  Element elementNode;  doc=(Document)load("staff",false);  newAttr=doc.createAttribute("newAttribute");  elementNode=newAttr.getOwnerElement();  assertNull("throw_Null",elementNode);}  }
class C{  public boolean isInternal(){  return isInternal;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(30,5,"98665");  childData=child.getData();  assertEquals("characterdataReplaceDataEndAssert","1230 North Ave. Dallas, Texas 98665",childData);}  }
class C{  private Map<String,String> _getKeyPropertyList(){synchronized (this) {    if (_propertyList == null) {      _propertyList=new HashMap<String,String>();      int len=_ca_array.length;      Property prop;      for (int i=len - 1; i >= 0; i--) {        prop=_ca_array[i];        _propertyList.put(prop.getKeyString(_canonicalName),prop.getValueString(_canonicalName));      }    }  }  return _propertyList;}  }
class C{  public String transform(String password){  if (AuthnSvcUtils.debug.messageEnabled()) {    AuthnSvcUtils.debug.message("LowercaseTransform.transform");  }  if (password == null) {    return null;  }  return password.toLowerCase();}  }
class C{  public static void cacheResult(Foo foo){  getPersistence().cacheResult(foo);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireSignatureConfirmationElement createRequireSignatureConfirmationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireSignatureConfirmationElementImpl();}  }
class C{  static Object find(String factoryId,String fallbackClassName) throws ConfigurationError {  ClassLoader classLoader=findClassLoader();  String systemProp=System.getProperty(factoryId);  if (systemProp != null && systemProp.length() > 0) {    if (debug)     debugPrintln("found " + systemProp + " in the system property "+ factoryId);    return newInstance(systemProp,classLoader);  }  try {    String javah=System.getProperty("java.home");    String configFile=javah + File.separator + "lib"+ File.separator+ "jaxp.properties";    String factoryClassName=null;    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          File f=new File(configFile);          firstTime=false;          if (f.exists()) {            if (debug)             debugPrintln("Read properties file " + f);            cacheProps.load(new FileInputStream(f));          }        }      }    }    factoryClassName=cacheProps.getProperty(factoryId);    if (debug)     debugPrintln("found " + factoryClassName + " in $java.home/jaxp.properties");    if (factoryClassName != null) {      return newInstance(factoryClassName,classLoader);    }  } catch (  Exception ex) {    if (debug) {      ex.printStackTrace();    }  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  if (debug)   debugPrintln("loaded from fallback value: " + fallbackClassName);  return newInstance(fallbackClassName,classLoader);}  }
class C{  public void readResponse() throws IOException {  if (userResponse != null) {    return;  }  if (networkRequest == null && cacheResponse == null) {    throw new IllegalStateException("call sendRequest() first!");  }  if (networkRequest == null) {    return;  }  Response networkResponse;  if (forWebSocket) {    httpStream.writeRequestHeaders(networkRequest);    networkResponse=readNetworkResponse();  } else   if (!callerWritesRequestBody) {    networkResponse=new NetworkInterceptorChain(0,networkRequest).proceed(networkRequest);  } else {    if (bufferedRequestBody != null && bufferedRequestBody.buffer().size() > 0) {      bufferedRequestBody.emit();    }    if (sentRequestMillis == -1) {      if (OkHeaders.contentLength(networkRequest) == -1 && requestBodyOut instanceof RetryableSink) {        long contentLength=((RetryableSink)requestBodyOut).contentLength();        networkRequest=networkRequest.newBuilder().header("Content-Length",Long.toString(contentLength)).build();      }      httpStream.writeRequestHeaders(networkRequest);    }    if (requestBodyOut != null) {      if (bufferedRequestBody != null) {        bufferedRequestBody.close();      } else {        requestBodyOut.close();      }      if (requestBodyOut instanceof RetryableSink) {        httpStream.writeRequestBody((RetryableSink)requestBodyOut);      }    }    networkResponse=readNetworkResponse();  }  receiveHeaders(networkResponse.headers());  if (cacheResponse != null) {    if (validate(cacheResponse,networkResponse)) {      userResponse=cacheResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).headers(combine(cacheResponse.headers(),networkResponse.headers())).cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody(networkResponse)).build();      networkResponse.body().close();      releaseStreamAllocation();      InternalCache responseCache=Internal.instance.internalCache(client);      responseCache.trackConditionalCacheHit();      responseCache.update(cacheResponse,stripBody(userResponse));      userResponse=unzip(userResponse);      return;    } else {      closeQuietly(cacheResponse.body());    }  }  userResponse=networkResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody(networkResponse)).build();  if (hasBody(userResponse)) {    maybeCache();    userResponse=unzip(cacheWritingResponse(storeRequest,userResponse));  }}  }
class C{  public static void registerVirtualAttribute(final VirtualAttributeRule rule){  getInstance().virtualAttributeConfigManager.register(rule);}  }
class C{  private boolean isShuttingDown(){  return stopRequested;}  }
class C{  public boolean isAccessControlEnabled(){  return currentConfiguration.isEnabled();}  }
class C{  public void handleTblSiteButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(TBL_SITES);  table.restoreStateData();  Integer[] selected=tblSiteModel.getSelectedRows();  SerializedField szCache=(SerializedField)getChild(SZ_CACHE_1);  List list=(List)szCache.getSerializedObj();  Set names=new HashSet(selected.length * 2);  for (int i=0; i < selected.length; i++) {    String name=(String)list.get(selected[i].intValue());    names.add(name);  }  try {    ServerSiteModel model=(ServerSiteModel)getModel();    model.deleteSites(names);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","siteconfig.message.deleted");    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","siteconfig.message.deleted.pural");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(getLanguageTag());}  }
class C{  public GUIDFormatException(final String detail){  super(detail);}  }
class C{  public Builder auxiliaryObjectClasses(String... objectClassNamesOrOIDs){  this.auxiliaryClassOIDs.addAll(asList(objectClassNamesOrOIDs));  return this;}  }
class C{  private static boolean isAfterSoftDotted(String src,int index){  int ch;  int cc;  for (int i=index; i > 0; i-=Character.charCount(ch)) {    ch=src.codePointBefore(i);    if (isSoftDotted(ch)) {      return true;    } else {      cc=Normalizer.getCombiningClass(ch);      if ((cc == 0) || (cc == COMBINING_CLASS_ABOVE)) {        return false;      }    }  }  return false;}  }
class C{  public ConsoleException(List errors){  super(errors.toArray().toString());  errList=errors;}  }
class C{  public void schemaChanged(String serviceName,String version){  ServiceSchema globalSchema=null;  PolicyManager.debug.message("PolicyConfig.schemaChanged():entering");  try {    globalSchema=getServiceSchemaManager().getGlobalSchema();  } catch (  Exception se) {    PolicyManager.debug.error("globalConfigChanged: " + "Unable to get global config ",se);    return;  }  if (globalSchema != null) {    Map attributeDefaults=globalSchema.getAttributeDefaults();    setContinueEvaluationOnDenyDecision(attributeDefaults);    setOrgAliasMappedResourcesEnabled(attributeDefaults);    setAdvicesHandleableByAM(attributeDefaults);    setOrgAliasMappedResourcesEnabled(attributeDefaults);    processResourceMap(attributeDefaults);  }}  }
class C{  public Object[] toArray(){  return hlist.toArray();}  }
class C{  public TestAccountStatusNotificationHandler(){}  }
class C{  public StatusCodeImpl() throws XACMLException {}  }
class C{  final boolean isMatched(){  Object x=item;  return (x == this) || ((x == null) == isData);}  }
class C{  private void readReplicationMonitoring(){  Set<ReplicaDescriptor> replicasToUpdate=getReplicasToUpdate();  for (  ServerDescriptor server : putQueriedReplicaFirst(this.servers)) {    if (server.isReplicationServer()) {      Set<ReplicaDescriptor> candidateReplicas=getCandidateReplicas(server);      if (!candidateReplicas.isEmpty()) {        Set<ReplicaDescriptor> updatedReplicas=new HashSet<>();        try {          updateReplicas(server,candidateReplicas,updatedReplicas);        } catch (        IOException e) {          server.setLastException(new TopologyCacheException(TopologyCacheException.Type.GENERIC_READING_SERVER,e));        }        replicasToUpdate.removeAll(updatedReplicas);      }    }    if (replicasToUpdate.isEmpty()) {      break;    }  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  WalkingIterator clone=(WalkingIterator)super.clone();  if (null != m_firstWalker) {    clone.m_firstWalker=m_firstWalker.cloneDeep(clone,null);  }  return clone;}  }
class C{  public boolean isVerbose(){  return (environment.get(CLIConstants.ARGUMENT_VERBOSE) != null);}  }
class C{  public void extend_selection_to_whole_nets(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  set_interactive_state(((StateSelectedItem)interactive_state).extent_to_whole_nets());}  }
class C{  public static EditorKit createEditorKitForContentType(String type){  Hashtable<String,EditorKit> kitRegistry=getKitRegisty();  EditorKit k=kitRegistry.get(type);  if (k == null) {    String classname=getKitTypeRegistry().get(type);    ClassLoader loader=getKitLoaderRegistry().get(type);    try {      Class c;      if (loader != null) {        c=loader.loadClass(classname);      } else {        c=Class.forName(classname,true,Thread.currentThread().getContextClassLoader());      }      k=(EditorKit)c.newInstance();      kitRegistry.put(type,k);    } catch (    Throwable e) {      k=null;    }  }  if (k != null) {    return (EditorKit)k.clone();  }  return null;}  }
class C{  private void iterateIndex(ReadableTransaction txn) throws StorageRuntimeException, DirectoryException {  if (verifyDN2ID) {    iterateDN2ID(txn);  } else   if (verifyID2ChildrenCount) {    iterateID2ChildrenCount(txn);  } else   if (!attrIndexList.isEmpty()) {    AttributeIndex attrIndex=attrIndexList.get(0);    for (    MatchingRuleIndex index : attrIndex.getNameToIndexes().values()) {      iterateAttrIndex(txn,index);    }  } else   if (!vlvIndexList.isEmpty()) {    iterateVLVIndex(txn,vlvIndexList.get(0),true);  }}  }
class C{  public boolean containsValue(Object value){  Object[] tab=table;  for (int i=1; i < tab.length; i+=2)   if (tab[i] == value && tab[i - 1] != null)   return true;  return false;}  }
class C{  private void init(){  if (getAxis() == View.Y_AXIS) {    children=parseRowColSpec(HTML.Attribute.ROWS);  } else {    children=parseRowColSpec(HTML.Attribute.COLS);  }  percentChildren=new int[children.length];  relativeChildren=new int[children.length];  absoluteChildren=new int[children.length];  for (int i=0; i < children.length; i++) {    percentChildren[i]=-1;    relativeChildren[i]=-1;    absoluteChildren[i]=-1;    if (children[i].endsWith("*")) {      if (children[i].length() > 1) {        relativeChildren[i]=Integer.parseInt(children[i].substring(0,children[i].length() - 1));        relativeTotals+=relativeChildren[i];      } else {        relativeChildren[i]=1;        relativeTotals+=1;      }    } else     if (children[i].indexOf('%') != -1) {      percentChildren[i]=parseDigits(children[i]);      percentTotals+=percentChildren[i];    } else {      absoluteChildren[i]=Integer.parseInt(children[i]);    }  }  if (percentTotals > 100) {    for (int i=0; i < percentChildren.length; i++) {      if (percentChildren[i] > 0) {        percentChildren[i]=(percentChildren[i] * 100) / percentTotals;      }    }    percentTotals=100;  }}  }
class C{  protected void installComponents(){  if ((rendererPane=createCellRendererPane()) != null) {    tree.add(rendererPane);  }}  }
class C{  public void populateQuestionsList(String userDN,String orgDN){  PWResetQuestionModel model=getModel();  int maxQuestions=model.getMaxNumQuestions(DNMapper.orgNameToRealmName(orgDN));  Map<String,String> secretMap=model.getSecretQuestions(userDN,orgDN);  if (CollectionUtils.isNotEmpty(secretMap)) {    if (maxQuestions >= 0 && maxQuestions < secretMap.size()) {      List<String> secretKeys=new ArrayList<>(secretMap.keySet());      Collections.shuffle(secretKeys);      questionKeys=new ArrayList<>(maxQuestions);      for (int i=0; i < maxQuestions; i++) {        questionKeys.add(secretKeys.get(i));      }    } else {      questionKeys=new ArrayList<>(secretMap.keySet());    }  }}  }
class C{  @Override public NamingEnumeration<NameClassPair> list(Name name) throws NamingException {  while ((!name.isEmpty()) && (name.get(0).length() == 0))   name=name.getSuffix(1);  if (name.isEmpty()) {    return new NamingContextEnumeration(bindings.values().iterator());  }  NamingEntry entry=bindings.get(name.get(0));  if (entry == null) {    throw new NameNotFoundException(sm.getString("namingContext.nameNotBound",name,name.get(0)));  }  if (entry.type != NamingEntry.CONTEXT) {    throw new NamingException(sm.getString("namingContext.contextExpected"));  }  return ((Context)entry.value).list(name.getSuffix(1));}  }
class C{  public final PublicKey generatePublic(KeySpec keySpec) throws InvalidKeySpecException {  if (serviceIterator == null) {    return spi.engineGeneratePublic(keySpec);  }  Exception failure=null;  KeyFactorySpi mySpi=spi;  do {    try {      return mySpi.engineGeneratePublic(keySpec);    } catch (    Exception e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi);    }  } while (mySpi != null);  if (failure instanceof RuntimeException) {    throw (RuntimeException)failure;  }  if (failure instanceof InvalidKeySpecException) {    throw (InvalidKeySpecException)failure;  }  throw new InvalidKeySpecException("Could not generate public key",failure);}  }
class C{  private Map processInteractionValueResponse(boolean isQuery,Message msg,String resource){  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PPRequestHandler.processInteraction" + "Response:Init");  }  if (msg == null || resource == null) {    IDPPUtils.debug.error("PPRequestHandler:processInteraction" + "Response:null input params");    return null;  }  resource=IDPPUtils.getExpressionContext(resource);  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PPRequestHandler:processInteraction" + "PP Element that was trying to access:" + resource);  }  try {    Map interactedData=new HashMap();    InteractionResponseElement ire=InteractionManager.getInstance().getInteractionResponseElement(msg);    if (ire == null) {      return null;    }    Map responses=InteractionUtils.getParameters(ire);    if (responses == null || responses.isEmpty()) {      return null;    }    String lang=getLanguage(msg);    PPInteractionHelper interactionHelper=new PPInteractionHelper(lang);    Map queries=interactionHelper.getInteractForValueQuestions(isQuery,resource);    Iterator iter=queries.keySet().iterator();    while (iter.hasNext()) {      String query=(String)iter.next();      String value=(String)responses.get(query);      if (value == null || value.length() == 0) {        continue;      }      interactedData.put(interactionHelper.getPPAttribute(query),value);    }    return interactedData;  } catch (  Exception e) {    IDPPUtils.debug.error("PPRequestHandler.processInteraction" + "Response: Exception occured.",e);    return null;  }}  }
class C{  public static boolean isMainDisplayInLandscape(Context context){  int rotation=DisplayManagerCompat.getInstance(context).getDisplay(0).getRotation();  return rotation == Surface.ROTATION_90 || rotation == Surface.ROTATION_270;}  }
class C{  public boolean beginHasNoButtonDisplay(ChildDisplayEvent event){  return (buttonOptions == null) || (buttonOptions.length == 0);}  }
class C{  public FrameBodyTCON(){}  }
class C{  public void mouseDragged(MouseEvent e){  if (dragger != null) {    if (e.getSource() == splitPane) {      dragger.continueDrag(e.getX(),e.getY());    } else     if (e.getSource() == BasicSplitPaneDivider.this) {      Point ourLoc=getLocation();      dragger.continueDrag(e.getX() + ourLoc.x,e.getY() + ourLoc.y);    } else     if (e.getSource() == hiddenDivider) {      Point hDividerLoc=hiddenDivider.getLocation();      int ourX=e.getX() + hDividerLoc.x;      int ourY=e.getY() + hDividerLoc.y;      dragger.continueDrag(ourX,ourY);    }    e.consume();  }}  }
class C{  public boolean isCanceled(){  return isCanceled;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  synchronized private void read() throws UMSException {  if (m_principal == null || m_guid == null) {    return;  }  m_attrSet=DataLayer.getInstance().read(getPrincipal(),getGuid());}  }
class C{  private static DN makeDNFromHostnameAndPath(String hostname,String ipath) throws ADSContextException {  return DN.valueOf("cn=" + Rdn.escapeValue(hostname + "@" + ipath) + ","+ getServerContainerDN());}  }
class C{  private <M extends Configuration>void deregisterAddListener(DN baseDN,ServerManagedObjectAddListener<M> listener){  try {    if (configRepository.hasEntry(baseDN)) {      for (      ConfigAddListener configListener : configRepository.getAddListeners(baseDN)) {        if (configListener instanceof ConfigAddListenerAdaptor) {          ConfigAddListenerAdaptor<?> adaptor=(ConfigAddListenerAdaptor<?>)configListener;          if (adaptor.getServerManagedObjectAddListener() == listener) {            configRepository.deregisterAddListener(baseDN,adaptor);          }        }      }    } else {      deregisterDelayedAddListener(baseDN,listener);    }  } catch (  ConfigException e) {    logger.trace("Unable to deregister add listener",e);  }}  }
class C{  public T linkQualifier(String linkQualifier){  jsonValue.put(LINK_QUALIFIER,linkQualifier);  return self();}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfName makeIndirect(PdfDocument document,PdfIndirectReference reference){  return (PdfName)super.makeIndirect(document,reference);}  }
class C{  private static boolean checkAndSolve(char[] oldSolution,boolean justCheck) throws IOException {  char solution[]=oldSolution.clone();  int k=-1;  int firstMissing=-1;  boolean changed=true;  while (changed) {    firstMissing=-1;    changed=false;    for (int i=0; i < textLength; i++) {      if (i == 0) {        k=textLength / 2;      }      if (k != -1) {        if (solution[i] == 0 || solution[k] == 0) {          if (solution[i] != 0) {            solution[k]=(char)(cypherText[i] ^ solution[i]);            changed=true;            if (!validChars[solution[k]]) {              return false;            }          } else           if (solution[k] != 0) {            solution[i]=(char)(cypherText[i] ^ solution[k]);            changed=true;            if (!validChars[solution[i]]) {              return false;            }          }        } else {          if ((solution[i] ^ solution[k]) != cypherText[i]) {            return false;          }        }      }      if (solution[i] == 0 & firstMissing == -1) {        firstMissing=i;      }      if (k == -1 && solution[i] != 0) {        if (solution[i] % 3 == 2) {          k=textLength / 2;        }      } else       if (solution[i] != 0) {        if (solution[i] % 3 == 2) {          k=textLength / 2;        } else         if (solution[i] % 3 == 0) {          k=(k + 1) % textLength;        } else {          k=(k - 1 + textLength) % textLength;        }      } else {        k=-1;      }    }  }  if (!justCheck) {    if (firstMissing != -1) {      guessLetter(firstMissing,solution);    } else {      writeLine(new String(solution));    }  }  return true;}  }
class C{  public Mp4AtomTree(RandomAccessFile raf,boolean closeOnExit) throws IOException, CannotReadException {  buildTree(raf,closeOnExit);}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().addFoo(foo);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(100);  sb.append("AMIdentity object: ").append(univIdWithoutDN);  if (univDN != null) {    sb.append("AMSDKDN=").append(univDN);  }  return (sb.toString());}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public INVALID_ACTIVITY(int minorCode,CompletionStatus completionStatus){  this("",minorCode,completionStatus);}  }
class C{  public static Object evaluateExpressionToObject(final ValueExpression valueExpression){  if (valueExpression == null) {    return null;  }  return JKJsfUtil.evaluateExpressionToObject(valueExpression.getExpressionString());}  }
class C{  public static long lowestOneBit(long v){  return v & -v;}  }
class C{  public void addUser(String user,String pass){  userPass.put(user,pass);}  }
class C{  public void test_readLine_IgnoresEbcdic85Characters() throws IOException {  assertLines("A\u0085B","A\u0085B");}  }
class C{  public static List<Header> spdy3HeadersList(Request request){  Headers headers=request.headers();  List<Header> result=new ArrayList<>(headers.size() + 5);  result.add(new Header(TARGET_METHOD,request.method()));  result.add(new Header(TARGET_PATH,RequestLine.requestPath(request.url())));  result.add(new Header(VERSION,"HTTP/1.1"));  result.add(new Header(TARGET_HOST,Util.hostHeader(request.url())));  result.add(new Header(TARGET_SCHEME,request.url().scheme()));  Set<ByteString> names=new LinkedHashSet<>();  for (int i=0, size=headers.size(); i < size; i++) {    ByteString name=ByteString.encodeUtf8(headers.name(i).toLowerCase(Locale.US));    if (SPDY_3_SKIPPED_REQUEST_HEADERS.contains(name))     continue;    String value=headers.value(i);    if (names.add(name)) {      result.add(new Header(name,value));      continue;    }    for (int j=0; j < result.size(); j++) {      if (result.get(j).name.equals(name)) {        String concatenated=joinOnNull(result.get(j).value.utf8(),value);        result.set(j,new Header(name,concatenated));        break;      }    }  }  return result;}  }
class C{  public void reset(){  len=4;  pos=4;}  }
class C{  public FrameBodyTRSN(){}  }
class C{  public void test_getCertificateChain(){  init(SERVER);  assertNull("Not NULL for NULL parameter",manager.getCertificateChain(null));  assertNull("Not NULL for empty parameter",manager.getCertificateChain(""));  assertNull("Not NULL for clientAlias_01 parameter",manager.getCertificateChain("clientAlias_01"));  assertNull("Not NULL for serverAlias_00 parameter",manager.getCertificateChain("serverAlias_00"));}  }
class C{  public void applyModification(Modification mod,boolean relaxConstraints) throws DirectoryException {  AttributeType t=mod.getAttribute().getAttributeDescription().getAttributeType();  if (t.isObjectClass()) {    applyModificationToObjectclass(mod,relaxConstraints);  } else {    applyModificationToNonObjectclass(mod,relaxConstraints);  }}  }
class C{  public static LDAPReplicationDomain retrievesReplicationDomain(DN baseDN) throws DirectoryException {  LDAPReplicationDomain replicationDomain=null;  for (  SynchronizationProvider<?> provider : DirectoryServer.getSynchronizationProviders()) {    if (!(provider instanceof MultimasterReplication)) {      LocalizableMessage message=ERR_INVALID_PROVIDER.get();      throw new DirectoryException(ResultCode.OTHER,message);    }    LDAPReplicationDomain domain=MultimasterReplication.findDomain(baseDN,null);    if (domain == null) {      break;    }    if (replicationDomain != null) {      LocalizableMessage message=ERR_MULTIPLE_MATCHING_DOMAIN.get();      throw new DirectoryException(ResultCode.OTHER,message);    }    replicationDomain=domain;  }  if (replicationDomain == null) {    throw new DirectoryException(ResultCode.OTHER,ERR_NO_MATCHING_DOMAIN.get(baseDN));  }  return replicationDomain;}  }
class C{  public void addUniqueAttribute(String name,String value,int flags) throws SAXException {  if (m_elemContext.m_startTagOpen) {    try {      final String patchedName=patchName(name);      final java.io.Writer writer=m_writer;      if ((flags & NO_BAD_CHARS) > 0 && m_xmlcharInfo.onlyQuotAmpLtGt) {        writer.write(' ');        writer.write(patchedName);        writer.write("=\"");        writer.write(value);        writer.write('"');      } else {        writer.write(' ');        writer.write(patchedName);        writer.write("=\"");        writeAttrString(writer,value,this.getEncoding());        writer.write('"');      }    } catch (    IOException e) {      throw new SAXException(e);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node insertedNode;  doc=(Document)load("hc_staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(0);{    boolean success=false;    try {      insertedNode=employeeNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public int size(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return count;  }  finally {    lock.unlock();  }}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  try {    writeNormalizedChars(ch,start,length,m_lineSepUse);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  HeartbeatMonitor(int serverID,int replicationServerID,String baseDN,Session session,long heartbeatInterval){  super("Replica DS(" + serverID + ") heartbeat monitor for domain \""+ baseDN+ "\" from RS("+ replicationServerID+ ") at "+ session.getReadableRemoteAddress());  this.serverID=serverID;  this.replicationServerID=replicationServerID;  this.baseDN=baseDN;  this.session=session;  this.heartbeatInterval=heartbeatInterval;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("SetNextRule[");  sb.append("methodName=");  sb.append(methodName);  sb.append(", paramType=");  sb.append(paramType);  sb.append("]");  return (sb.toString());}  }
class C{  public static JTextField createLongTextField(){  JTextField tf=createTextField();  tf.setColumns(30);  return tf;}  }
class C{  @Override public List<Foo> findAll(){  return findAll(QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public Object clone(){  SimpleTimeCondition theClone=null;  try {    theClone=(SimpleTimeCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (startDate != null) {    theClone.startDate=new int[startDate.length];    System.arraycopy(startDate,0,theClone.startDate,0,startDate.length);  }  if (endDate != null) {    theClone.endDate=new int[endDate.length];    System.arraycopy(endDate,0,theClone.endDate,0,endDate.length);  }  if (enforcementTimeZone != null) {    theClone.enforcementTimeZone=(TimeZone)enforcementTimeZone.clone();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public boolean isPolygonal(){  Enumeration enum_=curves.elements();  while (enum_.hasMoreElements()) {    if (((Curve)enum_.nextElement()).getOrder() > 1) {      return false;    }  }  return true;}  }
class C{  public static PrintRequestAttributeSet unmodifiableView(PrintRequestAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new UnmodifiablePrintRequestAttributeSet(attributeSet);}  }
class C{  private void toString(StringBuilder buffer){  buffer.append("IntermediateResponse(operation=");  operation.toString(buffer);  buffer.append(",oid=").append(oid);  buffer.append(",value=").append(buffer);  if (!controls.isEmpty()) {    buffer.append(",controls={");    Iterator<Control> iterator=controls.iterator();    iterator.next().toString(buffer);    while (iterator.hasNext()) {      buffer.append(",");      iterator.next().toString(buffer);    }    buffer.append("}");  }  buffer.append(")");}  }
class C{  public static GUID parseGUID(final String guid) throws GUIDFormatException {  if (guid == null) {    throw new GUIDFormatException("null");  }  if (!GUID_PATTERN.matcher(guid).matches()) {    throw new GUIDFormatException("Invalid guidData format.");  }  final int[] bytes=new int[GUID_LENGTH];  final int[] arrayIndices={3,2,1,0,5,4,7,6,8,9,10,11,12,13,14,15};  int arrayPointer=0;  for (int i=0; i < guid.length(); i++) {    if (guid.charAt(i) == '-') {      continue;    }    bytes[arrayIndices[arrayPointer++]]=Integer.parseInt(guid.substring(i,i + 2),16);    i++;  }  return new GUID(bytes);}  }
class C{  public ServletException(String message,Throwable rootCause){  super(message,rootCause);}  }
class C{  public boolean hasNext(){  return hasNextTlsMode() || hasNextInetSocketAddress() || hasNextProxy()|| hasNextPostponed();}  }
class C{  @DataProvider(name="backups") public Object[][] createData() throws Exception {  return new Object[][]{{TestCaseUtils.makeEntry(backupTask("ds-task-backup-all: TRUE")),TaskState.COMPLETED_SUCCESSFULLY},{TestCaseUtils.makeEntry(backupTask("ds-task-backup-all: TRUE","ds-task-backup-incremental: TRUE","ds-task-backup-incremental-base-id: monday")),TaskState.STOPPED_BY_ERROR},{TestCaseUtils.makeEntry(backupTask("ds-task-backup-all: TRUE","ds-task-backup-backend-id: example")),TaskState.STOPPED_BY_ERROR},{TestCaseUtils.makeEntry(backupTask()),TaskState.STOPPED_BY_ERROR},{TestCaseUtils.makeEntry(backupTask("ds-task-backup-all: TRUE","ds-task-backup-incremental: FALSE","ds-task-backup-incremental-base-id: monday")),TaskState.STOPPED_BY_ERROR},{TestCaseUtils.makeEntry(backupTask("ds-task-backup-all: TRUE","ds-task-backup-hash: FALSE","ds-task-backup-sign-hash: TRUE")),TaskState.STOPPED_BY_ERROR},{TestCaseUtils.makeEntry(backupTask("ds-task-backup-backend-id: monitor")),TaskState.STOPPED_BY_ERROR},{TestCaseUtils.makeEntry(restoreTask("ds-backup-directory-path: bak" + File.separator + "userRoot")),TaskState.COMPLETED_SUCCESSFULLY},{TestCaseUtils.makeEntry(restoreTask("ds-backup-directory-path: bak" + File.separator + "schema")),TaskState.COMPLETED_SUCCESSFULLY},{TestCaseUtils.makeEntry(restoreTask("ds-backup-directory-path: missing")),TaskState.STOPPED_BY_ERROR},{TestCaseUtils.makeEntry(restoreTask("ds-backup-directory-path: bak")),TaskState.STOPPED_BY_ERROR},{TestCaseUtils.makeEntry(restoreTask("ds-backup-directory-path: bak" + File.separator + "userRoot","ds-backup-id: monday")),TaskState.STOPPED_BY_ERROR}};}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  m_selectExpression.fixupVariables(cstate.getVariableNames(),cstate.getGlobalsSize());}  }
class C{  private static boolean isSessionUpgrade(IDPAuthnContextInfo idpAuthnContextInfo,Object session){  String classMethod="UtilProxySAMLAuthenticator.isSessionUpgrade: ";  if (session != null) {    String authnClassRef=idpAuthnContextInfo.getAuthnContext().getAuthnContextClassRef();    int authnLevel=idpAuthnContextInfo.getAuthnLevel();    SAML2Utils.debug.message(classMethod + "Requested AuthnContext: authnClassRef=" + authnClassRef+ " authnLevel="+ authnLevel);    int sessionAuthnLevel=0;    try {      final String strAuthLevel=SessionManager.getProvider().getProperty(session,SAML2Constants.AUTH_LEVEL)[0];      if (strAuthLevel.contains(":")) {        String[] realmAuthLevel=strAuthLevel.split(":");        sessionAuthnLevel=Integer.parseInt(realmAuthLevel[1]);      } else {        sessionAuthnLevel=Integer.parseInt(strAuthLevel);      }      SAML2Utils.debug.message(classMethod + "Current session Authentication Level: " + sessionAuthnLevel);    } catch (    SessionException sex) {      SAML2Utils.debug.error(classMethod + " Couldn't get the session Auth Level",sex);    }    return authnLevel > sessionAuthnLevel;  } else {    return true;  }}  }
class C{  DropLocation dropLocationForPoint(Point p){  DropLocation location=null;  Rectangle rect=null;  int index=locationToIndex(p);  if (index != -1) {    rect=getCellBounds(index,index);  }switch (dropMode) {case USE_SELECTION:case ON:    location=new DropLocation(p,(rect != null && rect.contains(p)) ? index : -1,false);  break;case INSERT:if (index == -1) {  location=new DropLocation(p,getModel().getSize(),true);  break;}if (layoutOrientation == HORIZONTAL_WRAP) {boolean ltr=getComponentOrientation().isLeftToRight();if (SwingUtilities2.liesInHorizontal(rect,p,ltr,false) == TRAILING) {  index++;} else if (index == getModel().getSize() - 1 && p.y >= rect.y + rect.height) {  index++;}} else {if (SwingUtilities2.liesInVertical(rect,p,false) == TRAILING) {  index++;}}location=new DropLocation(p,index,true);break;case ON_OR_INSERT:if (index == -1) {location=new DropLocation(p,getModel().getSize(),true);break;}boolean between=false;if (layoutOrientation == HORIZONTAL_WRAP) {boolean ltr=getComponentOrientation().isLeftToRight();Section section=SwingUtilities2.liesInHorizontal(rect,p,ltr,true);if (section == TRAILING) {index++;between=true;} else if (index == getModel().getSize() - 1 && p.y >= rect.y + rect.height) {index++;between=true;} else if (section == LEADING) {between=true;}} else {Section section=SwingUtilities2.liesInVertical(rect,p,true);if (section == LEADING) {between=true;} else if (section == TRAILING) {index++;between=true;}}location=new DropLocation(p,index,between);break;default :assert false : "Unexpected drop mode";}return location;}  }
class C{  private final String _findDecodedMedium(int len) throws IOException {{    int bufLen=(len + 3) >> 2;    if (bufLen > _quadBuffer.length) {      _quadBuffer=_growArrayTo(_quadBuffer,bufLen);    }  }  int offset=0;  int inPtr=_inputPtr;  final byte[] inBuf=_inputBuffer;  do {    int q=(inBuf[inPtr++] & 0xFF) << 8;    q|=inBuf[inPtr++] & 0xFF;    q<<=8;    q|=inBuf[inPtr++] & 0xFF;    q<<=8;    q|=inBuf[inPtr++] & 0xFF;    _quadBuffer[offset++]=q;  } while ((len-=4) > 3);  if (len > 0) {    int q=inBuf[inPtr] & 0xFF;    if (--len > 0) {      q=(q << 8) + (inBuf[++inPtr] & 0xFF);      if (--len > 0) {        q=(q << 8) + (inBuf[++inPtr] & 0xFF);      }    }    _quadBuffer[offset++]=q;  }  return _symbols.findName(_quadBuffer,offset);}  }
class C{  public DERSequence(ASN1Encodable[] array){  super(array);}  }
class C{  @Inject public ShowApplication(ApplicationServiceFactory applicationServiceFactory){  super(applicationServiceFactory);}  }
class C{  public static Request parseXML(String xml) throws SAMLException {  Document doc=XMLUtils.toDOMDocument(xml,SAMLUtils.debug);  Element root=doc.getDocumentElement();  return new Request(root);}  }
class C{  public LDAPResult doOperation(ObjectFactory objFactory,AddRequest addRequest,List<org.opends.server.types.Control> controls) throws IOException, LDAPException, DecodeException {  LDAPResult addResponse=objFactory.createLDAPResult();  addResponse.setRequestID(addRequest.getRequestID());  ByteString dnStr=ByteString.valueOfUtf8(addRequest.getDn());  ArrayList<RawAttribute> attributes=new ArrayList<>();  List<DsmlAttr> addList=addRequest.getAttr();  for (  DsmlAttr attr : addList) {    ArrayList<ByteString> values=new ArrayList<>();    List<Object> vals=attr.getValue();    for (    Object val : vals) {      values.add(ByteStringUtility.convertValue(val));    }    LDAPAttribute ldapAttribute=new LDAPAttribute(attr.getName(),values);    attributes.add(ldapAttribute);  }  ProtocolOp op=new AddRequestProtocolOp(dnStr,attributes);  LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),op,controls);  connection.getLDAPWriter().writeMessage(msg);  LDAPMessage responseMessage=connection.getLDAPReader().readMessage();  AddResponseProtocolOp addOp=responseMessage.getAddResponseProtocolOp();  int resultCode=addOp.getResultCode();  LocalizableMessage errorMessage=addOp.getErrorMessage();  addResponse.setErrorMessage(errorMessage != null ? errorMessage.toString() : null);  ResultCode code=ResultCodeFactory.create(objFactory,resultCode);  addResponse.setResultCode(code);  return addResponse;}  }
class C{  public void test_sortLjava_util_ListLjava_util_Comparator(){  Comparator comp=new ReversedMyIntComparator();  try {    Collections.sort(null,comp);    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  Collections.shuffle(myll);  Collections.sort(myll,comp);  final int llSize=myll.size();  for (int counter=0; counter < llSize - 1; counter++) {    assertTrue("Sorting shuffled list with custom comparator resulted in unsorted list",((MyInt)myll.get(counter)).compareTo((MyInt)myll.get(counter + 1)) >= 0);  }  ArrayList al=new ArrayList();  al.add("String");  al.add(new Integer(1));  al.add(new Double(3.14));  try {    Collections.sort(al,comp);    fail("ClassCastException expected");  } catch (  ClassCastException e) {  }  Mock_ArrayList mal=new Mock_ArrayList();  mal.add(new MyInt(1));  mal.add(new MyInt(2));  try {    Collections.sort(mal,comp);    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public void reSetVideoFPS(int fps){  videoClient.reSetVideoFPS(fps);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(20 + infoPackage.length() + infoModule.length()+ infoRelease.length()+ infoTimestamp.length()+ infoClassloader.length());  sb.append("VersionInfo(").append(infoPackage).append(':').append(infoModule);  if (!UNAVAILABLE.equals(infoRelease))   sb.append(':').append(infoRelease);  if (!UNAVAILABLE.equals(infoTimestamp))   sb.append(':').append(infoTimestamp);  sb.append(')');  if (!UNAVAILABLE.equals(infoClassloader))   sb.append('@').append(infoClassloader);  return sb.toString();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String rev=getStringOptionValue(ARGUMENT_VERSION);  ServiceSchemaManager ssm=getServiceSchemaManager();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,rev};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_SERVICE_REVISION_NUMBER",params);    ssm.setRevisionNumber(Integer.parseInt(rev));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_SERVICE_REVISION_NUMBER",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("service-schema-set-revision-number-succeed"),(Object[])params));  } catch (  NumberFormatException e) {    String[] args={serviceName,rev,e.getMessage()};    debugError("SetServiceRevisionNumber.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SERVICE_REVISION_NUMBER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={serviceName,rev,e.getMessage()};    debugError("SetServiceRevisionNumber.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SERVICE_REVISION_NUMBER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,rev,e.getMessage()};    debugError("SetServiceRevisionNumber.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SERVICE_REVISION_NUMBER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public MaterialBarcodeScannerBuilder withOnly2DScanning(){  mBarcodeFormats=Barcode.EAN_13 | Barcode.EAN_8 | Barcode.UPC_A| Barcode.UPC_A| Barcode.UPC_E| Barcode.CODE_39| Barcode.CODE_93| Barcode.CODE_128| Barcode.ITF| Barcode.CODABAR;  return this;}  }
class C{  private static void createFile(File file) throws IOException {  if (!file.exists()) {    createDirectory(file.getParent());    if (!file.createNewFile()) {      throw new IOException("Failed to create " + file.getPath());    }  }}  }
class C{  public void pushRewindMark(){  if (m_indexing || m_elemIndexes != null)   throw new java.lang.NullPointerException("Coding error; Don't try to mark/rewind an indexed DTM");  mark_size.push(m_size);  mark_nsdeclset_size.push((m_namespaceDeclSets == null) ? 0 : m_namespaceDeclSets.size());  mark_nsdeclelem_size.push((m_namespaceDeclSetElements == null) ? 0 : m_namespaceDeclSetElements.size());  mark_data_size.push(m_data.size());  mark_char_size.push(m_chars.size());  mark_doq_size.push(m_dataOrQName.size());}  }
class C{  protected void updateLayout(Context c,RemoteViews views,WidgetSetting settings){}  }
class C{  public static ECDomainParameters readECParameters(NamedCurve[] namedCurves,ECPointFormat[] pointFormats,InputStream input) throws IOException {  int[] nc=convertNamedCurves(namedCurves);  short[] pf=convertPointFormats(pointFormats);  return TlsECCUtils.readECParameters(nc,pf,input);}  }
class C{  public FrameBodyTSSE(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatareplacedataend.class,args);}  }
class C{  static public byte[] decode(String encdata){  char[] data=encdata.toCharArray();  if (data.length <= 0)   throw new RuntimeException("Invalid encoded data!");  if (data.length % 4 != 0)   throw new RuntimeException("Data is not Base64 encoded.");  int len=((data.length + 3) / 4) * 3;  if (data[data.length - 1] == '=')   --len;  if (data[data.length - 2] == '=')   --len;  byte[] out=new byte[len];  int shift=0;  int accum=0;  int index=0;  for (int ix=0; ix < data.length; ix++) {    int value=codes[data[ix] & 0xFF];    if (value >= 0) {      accum<<=6;      shift+=6;      accum|=value;      if (shift >= 8) {        shift-=8;        out[index++]=(byte)((accum >> shift) & 0xff);      }    } else {      if (data[ix] != '=') {        throw new RuntimeException("Data is not Base64 encoded.");      }    }  }  if (index != out.length)   throw new RuntimeException("Data length mismatch.");  return out;}  }
class C{  public DsnKeywordParser(){  super("parser");}  }
class C{  void addAttributeValues(String attrName,Set values) throws SMSException {  if (attrName != null && values != null && !values.isEmpty()) {    Map attrs=getAttributes();    Set origValues=(Set)attrs.get(attrName);    Set newValues=new HashSet(values);    if (origValues != null && !origValues.isEmpty()) {      newValues.addAll(origValues);    }    Map newAttrs=new HashMap();    newAttrs.put(attrName,newValues);    setAttributes(newAttrs);  }}  }
class C{  public void testDivideBigDecimalScaleRoundingModeHALF_EVEN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=5;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=7;  RoundingMode rm=RoundingMode.HALF_EVEN;  String c="500002603731642864013619132621009722.1803810";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public ParserConfigurationException(){}  }
class C{  public void flush() throws java.io.IOException {  m_os.flush();}  }
class C{  public static boolean isXMLNameNS(String name){  if (name.length() > 0 && (!isNameStartChar(name.charAt(0)) || name.charAt(0) == ':')) {    return false;  }  for (int i=1; i < name.length(); i++) {    if (!isNameChar(name.charAt(i)) || name.charAt(i) == ':') {      return false;    }  }  return true;}  }
class C{  final boolean isRunningOrShutdown(boolean shutdownOK){  int rs=runStateOf(ctl.get());  return rs == RUNNING || (rs == SHUTDOWN && shutdownOK);}  }
class C{  public StringBuffer append(float f){  RealToString.getInstance().appendFloat(this,f);  return this;}  }
class C{  public void paintFileChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static List<ShapeLocker.Cell> stringToPattern(String string){  List<ShapeLocker.Cell> result=new ArrayList<ShapeLocker.Cell>();  final byte[] bytes=string.getBytes();  for (int i=0; i < bytes.length; i++) {    byte b=bytes[i];    result.add(ShapeLocker.Cell.of(b / 3,b % 3));  }  return result;}  }
class C{  private void initMinimalInternalClientTypesData(){  Set clients=intCapInstance.getMinimalClientInfo();  Iterator iter=clients.iterator();  while (iter.hasNext()) {    Map clientData=(Map)iter.next();    String clientType=getClientType(clientData);    if ((clientType != null) && (clientType.length() > 0)) {      internalClientData.put(clientType,clientData);    } else {      debug.error(CLASS + "Found clientType == NULL in internal DB");      continue;    }    Set parentIdSet=(Set)clientData.get(PARENT_ID);    if (parentIdSet != null && parentIdSet.contains(clientType)) {      Map t1=new TreeMap();      Map t2=new TreeMap();      t1.put(clientType,t2);      baseProfiles.put(clientType,t1);      if (debug.messageEnabled()) {        debug.message(CLASS + "BaseProfile: " + clientType);      }    }  }}  }
class C{  protected void rejectDrag(){  DropTargetContextPeer peer=getDropTargetContextPeer();  if (peer != null) {    peer.rejectDrag();  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.initializeTestBackend(true);  TestCaseUtils.clearBackend("userRoot","dc=example,dc=com");  subschemaSubentryType=CoreSchema.getSubschemaSubentryAttributeType();}  }
class C{  public void test_addAllILjava_util_Collection_2(){  LinkedList obj=new LinkedList();  try {    obj.addAll(-1,(Collection)null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  private void updateGrid(int row){  if (validateIfNecessary()) {    boolean emptyRow=false;    while (!emptyRow) {      for (int counter=0; counter < grid[row].length; counter++) {        if (grid[row][counter] == null) {          emptyRow=true;          break;        }      }      if (!emptyRow) {        row++;      }    }    for (int col=0, counter=0; counter < getChildCount(); counter++) {      TableCellElementInfo cell=(TableCellElementInfo)getChild(counter);      while (grid[row][col] != null) {        col++;      }      for (int rowCount=cell.getRowCount() - 1; rowCount >= 0; rowCount--) {        for (int colCount=cell.getColumnCount() - 1; colCount >= 0; colCount--) {          grid[row + rowCount][col + colCount]=cell;        }      }      col+=cell.getColumnCount();    }  }}  }
class C{  @BeforeClass public void disableLogging(){  TestCaseUtils.setDefaultLogLevel(Level.SEVERE);}  }
class C{  public List<ImportStep> importXacml(String realm,InputStream xacml,Subject admin,boolean dryRun) throws EntitlementException {  PrivilegeSet privilegeSet=xacmlToPrivilegeSet(xacml);  List<PersistableImportStep> importSteps=generateImportSteps(realm,privilegeSet,admin);  applyIfRequired(dryRun,importSteps);  return new ArrayList<ImportStep>(importSteps);}  }
class C{  public boolean containsValue(CompositeData value){  return dataMap.containsValue(value);}  }
class C{  @Override public boolean isNew(){  if (!isValidInternal())   throw new IllegalStateException(sm.getString("standardSession.isNew.ise"));  return (this.isNew);}  }
class C{  public void run(){  TaskRunnable taskToRun=next();  do {    taskToRun.run();  } while ((taskToRun=taskToRun.next()) != null);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  initialInvitePayload=new String((byte[])request.getContent());  try {    serverTransaction=sipProvider.getNewServerTransaction(request);    dialog=(DialogExt)sipProvider.getNewDialog(serverTransaction);    dialog.disableSequenceNumberValidation();  } catch (  Exception e) {    e.printStackTrace();  }  try {    Response okResponse=messageFactory.createResponse(180,request);    FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);    from.removeParameter("tag");    Address address=addressFactory.createAddress("UAS <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);    fromHeader.setTag("12345");    okResponse.addHeader(contactHeader);    serverTransaction.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();  }  try {    Response okResponse=messageFactory.createResponse(200,request);    FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);    from.removeParameter("tag");    Address address=addressFactory.createAddress("UAS <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);    fromHeader.setTag("12345");    okResponse.addHeader(contactHeader);    serverTransaction.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static String createFIFO(long id){  String idLen="" + ("" + id).length();  int len=2 - idLen.length();  while (len-- > 0)   idLen="0" + idLen;  return idLen + "|" + id;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton1Request(event);}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  public boolean isNameResolved(String beanName){  return false;}  }
class C{  public static StringArgument trustStorePathArgument(final String defaultValue) throws ArgumentException {  return StringArgument.builder(OPTION_LONG_TRUSTSTOREPATH).shortIdentifier(OPTION_SHORT_TRUSTSTOREPATH).description(INFO_DESCRIPTION_TRUSTSTOREPATH.get()).defaultValue(defaultValue).valuePlaceholder(INFO_TRUSTSTOREPATH_PLACEHOLDER.get()).buildArgument();}  }
class C{  public Iterator iterator(){  return new PartialOrderIterator(poNodes.values().iterator());}  }
class C{  void release(){  unregisterJMX();  if (this.filter != null) {    try {      if (Globals.IS_SECURITY_ENABLED) {        try {          SecurityUtil.doAsPrivilege("destroy",filter);        }  finally {          SecurityUtil.remove(filter);        }      } else {        filter.destroy();      }    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      context.getLogger().error(sm.getString("applicationFilterConfig.release",filterDef.getFilterName(),filterDef.getFilterClass()),t);    }    if (!context.getIgnoreAnnotations()) {      try {        ((StandardContext)context).getInstanceManager().destroyInstance(this.filter);      } catch (      Exception e) {        Throwable t=ExceptionUtils.unwrapInvocationTargetException(e);        ExceptionUtils.handleThrowable(t);        context.getLogger().error(sm.getString("applicationFilterConfig.preDestroy",filterDef.getFilterName(),filterDef.getFilterClass()),t);      }    }  }  this.filter=null;}  }
class C{  private void checkNode(Node node) throws DOMException {  if (node == null) {    return;  }  if (!(node instanceof IIOMetadataNode)) {    throw new IIODOMException(DOMException.WRONG_DOCUMENT_ERR,"Node not an IIOMetadataNode!");  }}  }
class C{  public static String parseSvgToXml(File inputSVG,OutputStream outStream){  String errorLog=null;  try {    SvgTree svgTree=parse(inputSVG);    errorLog=svgTree.getErrorLog();    if (svgTree.canConvertToVectorDrawable()) {      writeFile(outStream,svgTree);    }  } catch (  Exception e) {    errorLog="EXCEPTION in parsing " + inputSVG.getName() + ":\n"+ e.getMessage();  }  return errorLog;}  }
class C{  String[] toCommandLineArguments(ConnectionParameters connParams){  String[] baseArgs=new String[]{"--cli","--noPropertiesFile","--no-prompt","--doNotStart","--skipPortCheck","--baseDN",baseDn,"--hostname",connParams.getHostName(),"--rootUserDN",connParams.getBindDn(),"--rootUserPassword",connParams.getBindPassword(),"--ldapPort",s(connParams.getLdapPort()),"--adminConnectorPort",s(connParams.getAdminPort()),"--jmxPort",s(jmxPort),"--backendType",backendType};  List<String> args=new ArrayList<>(Arrays.asList(baseArgs));  if (connParams.getLdapSecurePort() != null) {    args.add("--ldapsPort");    args.add(s(connParams.getLdapSecurePort()));    args.add("--generateSelfSignedCertificate");  }  for (  final String ldif : ldifFiles) {    args.add("--ldifFile");    args.add(ldif);  }  return args.toArray(new String[args.size()]);}  }
class C{  public ScriptedMessageHandler(final JsonValue propertiesConfig,final ScriptRegistry scriptRegistry){  try {    scriptEntry=scriptRegistry.takeScript(propertiesConfig.get(SCRIPT).required());  } catch (  ScriptException e) {    throw new InvalidException("Failure preparing script to handle messages",e);  }}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public PluginResult.PostResponse invokePostResponseModifyDNPlugins(PostResponseModifyDNOperation modifyDNOperation){  PluginResult.PostResponse result=null;  for (  DirectoryServerPlugin p : postResponseModifyDNPlugins) {    if (isInternalOperation(modifyDNOperation,p)) {      continue;    }    try {      result=p.doPostResponse(modifyDNOperation);    } catch (    Exception e) {      logException(modifyDNOperation,p,e,ERR_PLUGIN_POST_RESPONSE_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(modifyDNOperation,p,ERR_PLUGIN_POST_RESPONSE_PLUGIN_RETURNED_NULL);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PostResponse.continueOperationProcessing();  }  return result;}  }
class C{  public static void error(Level level,String msgid,String[] data){  if ((logger != null) && logger.isErrorLoggable(level)) {    try {      logger.error(level,msgid,data,null);    } catch (    LogException le) {      debug.error("LogUtil.error:",le);    }  }}  }
class C{  public StateInteractive extent_to_whole_connections(){  Set<BrdItem> selected_items=new TreeSet<BrdItem>();  for (  BrdItem curr_item : items_list) {    if (curr_item instanceof BrdConnectable) {      selected_items.addAll(curr_item.get_connection_items());    }  }  if (selected_items.isEmpty()) {    return return_state;  }  items_list=selected_items;  actlog_start_scope(LogfileScope.EXTEND_TO_WHOLE_CONNECTIONS);  filter();  i_brd.repaint();  return this;}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!this.getClass().equals(obj.getClass())) {    return false;  }  Host otherHost=(Host)obj;  return otherHost.hostname.equals(hostname);}  }
class C{  public InitializeRcvAckMsg(int sender,int destination,int numAck){  super(sender,destination);  this.numAck=numAck;}  }
class C{  public boolean isInsert(){  return isInsert;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationContextStatementElement createAuthenticationContextStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationContextStatementElementImpl();}  }
class C{  public void addListener(Object session,SessionListener listener) throws SessionException {  debug.message("FedletSessionProvider.addListener called");}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeKeys(this);}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  if (locked)   throw new IllegalStateException(sm.getString("parameterMap.locked"));  super.putAll(map);}  }
class C{  public static void registerSupportedControl(String controlOID){  DirectoryServer.registerSupportedControl(controlOID);}  }
class C{  public void doInitBody() throws JspException {}  }
class C{  public void reply(List<Header> responseHeaders,boolean out) throws IOException {  assert (!Thread.holdsLock(FramedStream.this));  boolean outFinished=false;synchronized (this) {    if (responseHeaders == null) {      throw new NullPointerException("responseHeaders == null");    }    if (this.responseHeaders != null) {      throw new IllegalStateException("reply already sent");    }    this.responseHeaders=responseHeaders;    if (!out) {      this.sink.finished=true;      outFinished=true;    }  }  connection.writeSynReply(id,outFinished,responseHeaders);  if (outFinished) {    connection.flush();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509Certificate createX509DataTypeX509Certificate(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509CertificateImpl(value);}  }
class C{  @Override public Foo findByUuid_Last(String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_Last(uuid,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public static boolean isContent(int c){  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public void logSearchResultDone(SearchOperation searchOperation){}  }
class C{  public void paintTableBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    logger.info("shootme: got an ACK! Sending  a BYE");    logger.info("Dialog State = " + dialog.getState());    Dialog dialog=requestEvent.getDialog();    SipProvider provider=(SipProvider)requestEvent.getSource();    Request byeRequest=dialog.createRequest(Request.BYE);    ClientTransaction ct=provider.getNewClientTransaction(byeRequest);    dialog.sendRequest(ct);  } catch (  Exception ex) {    ex.printStackTrace();    TestHarness.fail(ex.getMessage());  }}  }
class C{  private void checkSeen(Node.ChildInfo ci,Node n) throws JasperException {  boolean scriptingElementSeenSave=scriptingElementSeen;  scriptingElementSeen=false;  boolean usebeanSeenSave=usebeanSeen;  usebeanSeen=false;  boolean includeActionSeenSave=includeActionSeen;  includeActionSeen=false;  boolean paramActionSeenSave=paramActionSeen;  paramActionSeen=false;  boolean setPropertySeenSave=setPropertySeen;  setPropertySeen=false;  boolean hasScriptingVarsSave=hasScriptingVars;  hasScriptingVars=false;  if (n instanceof Node.CustomTag) {    Node.CustomTag ct=(Node.CustomTag)n;    Node.JspAttribute[] attrs=ct.getJspAttributes();    for (int i=0; attrs != null && i < attrs.length; i++) {      if (attrs[i].isExpression()) {        scriptingElementSeen=true;        break;      }    }  }  visitBody(n);  if ((n instanceof Node.CustomTag) && !hasScriptingVars) {    Node.CustomTag ct=(Node.CustomTag)n;    hasScriptingVars=ct.getVariableInfos().length > 0 || ct.getTagVariableInfos().length > 0;  }  ci.setScriptless(!scriptingElementSeen);  ci.setHasUseBean(usebeanSeen);  ci.setHasIncludeAction(includeActionSeen);  ci.setHasParamAction(paramActionSeen);  ci.setHasSetProperty(setPropertySeen);  ci.setHasScriptingVars(hasScriptingVars);  scriptingElementSeen=scriptingElementSeen || scriptingElementSeenSave;  usebeanSeen=usebeanSeen || usebeanSeenSave;  setPropertySeen=setPropertySeen || setPropertySeenSave;  includeActionSeen=includeActionSeen || includeActionSeenSave;  paramActionSeen=paramActionSeen || paramActionSeenSave;  hasScriptingVars=hasScriptingVars || hasScriptingVarsSave;}  }
class C{  final int fullyRelease(Node node){  boolean failed=true;  try {    int savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  public static String formFromMap(String redirectUrl,Map pmap,boolean addAutoSubmit){  StringBuilder buf=new StringBuilder();  if (addAutoSubmit) {    buf.append("<HTML><HEAD><TITLE>SAE POST</TITLE></HEAD>");    buf.append("<BODY Onload=\"document.forms[0].submit()\">");  }  buf.append("<FORM id=\"saeform\" METHOD=\"POST\" ACTION=\"").append(redirectUrl).append("\">");  for (  Object name : pmap.keySet()) {    String val=(String)pmap.get(name);    buf.append("<INPUT TYPE=\"HIDDEN\" NAME=\"").append(name).append("\" VALUE=\"");    buf.append(ESAPI.encoder().encodeForHTML(val)).append("\">");  }  buf.append("</FORM>");  if (addAutoSubmit) {    buf.append("</BODY></HTML>");  }  return buf.toString();}  }
class C{  public static int bytes(int nbFields){  return nbFields;}  }
class C{  public boolean includeOperationalAttributes(){  return includeOperationalAttributes;}  }
class C{  public String toString(){  return ("SecurIDPrincipal:  " + name);}  }
class C{  public boolean isError(){  return this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR;}  }
class C{  public void refresh(){  this.padstack_combo_box.removeAllItems();  this.cl_class_combo_box.removeAllItems();  this.add_combobox_items();  this.table_model.set_values();}  }
class C{  public ResultHandler<String,CoreTokenException> delete(String tokenId) throws CoreTokenException {  debug("Delete: queued delete {0}",tokenId);  final ResultHandler<String,CoreTokenException> deleteHandler=handlerFactory.getDeleteHandler();  dispatcher.delete(tokenId,deleteHandler);  return deleteHandler;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getMask(actions));}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject expr1=m_left.execute(xctxt);  if (expr1.bool()) {    XObject expr2=m_right.execute(xctxt);    return expr2.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;  } else   return XBoolean.S_FALSE;}  }
class C{  public SubjectDecision evaluate(String realm,SubjectAttributesManager mgr,javax.security.auth.Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  SSOToken adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  try {    PolicyManager pm=new PolicyManager(adminToken,realm);    Subject sbj=getPolicySubject();    sbj.initialize(pm.getPolicyConfig());    SSOToken token=getSSOToken(subject);    boolean result=(token == null) ? true : sbj.isMember(token) ^ exclusive;    return new SubjectDecision(result,Collections.EMPTY_MAP);  } catch (  SSOException ex) {    throw new EntitlementException(508,ex);  }catch (  PolicyException ex) {    throw new EntitlementException(508,ex);  }}  }
class C{  public JCheckBox(Icon icon){  this(null,icon,false);}  }
class C{  @Override public IndexCreatedEvent update(IndexCreatedEvent entity){  BoundStatement bs=new BoundStatement(updateStmt);  bindUpdate(bs,entity);  if (entity.isDoneIndexing()) {    markDone(entity.getUuid());  } else {    markIndexing(entity.getUuid());  }  getSession().execute(bs);  return entity;}  }
class C{  protected void loadChildren(Element parent){  if (!parent.isLeaf()) {    for (int counter=0, maxCounter=parent.getElementCount(); counter < maxCounter; counter++) {      Element e=parent.getElement(counter);      ElementInfo childInfo=createElementInfo(e,this);      if (childInfo != null) {        addChild(childInfo);      } else {        loadChildren(e);      }    }  }}  }
class C{  private LDAPConnection connect(String host,int port,String bindDN,String bindPw,LDAPConnectionOptions options,int timeout,PrintStream out,PrintStream err) throws LDAPConnectionException {  AtomicInteger nextMessageID=new AtomicInteger(1);  LDAPConnection connection=new LDAPConnection(host,port,options,out,err);  connection.connectToHost(bindDN,bindPw,nextMessageID,timeout);  return connection;}  }
class C{  public synchronized int read(byte b[],int off,int len) throws IOException {  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int c=read();  if (c < 0) {    return -1;  }  b[off]=(byte)c;  int rlen=1;  while ((in >= 0) && (len > 1)) {    int available;    if (in > out) {      available=Math.min((buffer.length - out),(in - out));    } else {      available=buffer.length - out;    }    if (available > (len - 1)) {      available=len - 1;    }    System.arraycopy(buffer,out,b,off + rlen,available);    out+=available;    rlen+=available;    len-=available;    if (out >= buffer.length) {      out=0;    }    if (in == out) {      in=-1;    }  }  return rlen;}  }
class C{  public void clear(){  list.clear();}  }
class C{  public JFileChooser(){  this((File)null,(FileSystemView)null);}  }
class C{  public void forwardTo(RequestContext requestContext){  loginDebug.message("In forwardTo()");  SSOToken ssoToken=null;  if (requestContext != null) {    request=requestContext.getRequest();    response=requestContext.getResponse();  }  response.setHeader("Pragma","no-cache");  response.setHeader("Expires","0");  if (AuthClientUtils.isVersionHeaderEnabled()) {    response.setHeader("X-DSAMEVersion",AuthClientUtils.getDSAMEVersion());  }  reqDataHash=AuthUtils.parseRequestParameters(request);  client_type=AuthUtils.getClientType(request);  response.setHeader("AM_CLIENT_TYPE",client_type);  if (loginDebug.messageEnabled()) {    loginDebug.message("Client Type is: " + client_type);    loginDebug.message("Request method is : " + request.getMethod());  }  if (request.getMethod().equalsIgnoreCase("POST")) {    isPost=true;  }  SessionID sessionID=null;  InternalSession intSession=null;  try {    boolean isBackPost=false;    sessionID=AuthUtils.getSessionIDFromRequest(request);    ssoToken=AuthUtils.getExistingValidSSOToken(sessionID);    if ((ssoToken == null) && (sessionID != null) && (sessionID.toString().length() != 0)) {      if (AuthUtils.isTimedOut(sessionID)) {        clearCookie(request);        errorCode=AMAuthErrorCode.AUTH_TIMEOUT;        ErrorMessage=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_TIMEOUT,AuthUtils.ERROR_MESSAGE);        errorTemplate=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_TIMEOUT,AuthUtils.ERROR_TEMPLATE);        ISLocaleContext localeContext=new ISLocaleContext();        localeContext.setLocale(request);        java.util.Locale locale=localeContext.getLocale();        rb=rbCache.getResBundle(bundleName,locale);        super.forwardTo(requestContext);        return;      }    }    forceAuth=AuthUtils.forceAuthFlagExists(reqDataHash);    if (ssoToken != null) {      if (AuthUtils.newSessionArgExists(reqDataHash)) {        SSOTokenManager.getInstance().destroyToken(ssoToken);      } else {        loginDebug.message("Old Session is Active.");        newOrgExist=checkNewOrg(ssoToken);        if (newOrg) {          sessionID=new SessionID();        }        if (!newOrgExist) {          if (isPost) {            isBackPost=canGetOrigCredentials(ssoToken);          }          if (forceAuth) {            sessionUpgrade=true;          } else {            sessionUpgrade=AuthUtils.checkSessionUpgrade(ssoToken,reqDataHash);          }          if (loginDebug.messageEnabled()) {            loginDebug.message("Session Upgrade = " + sessionUpgrade);          }        }      }    }    if ("true".equals(request.getParameter("new_org"))) {      ssoToken=AuthUtils.getExistingValidSSOToken(new SessionID(request));      handleNewOrgResponse(ssoToken);      if (logIntoDiffOrg) {        newOrgExist=true;      } else {        ac=AuthUtils.getAuthContext(request,response,sessionID,sessionUpgrade,isBackPost);        clearCookieAndDestroySession(ac);      }    }    if ((ssoToken != null) && !sessionUpgrade && !newOrgExist) {      try {        loginDebug.message("Session is Valid / already " + "authenticated");        bValidSession=true;        if (request != null) {          redirect_url=AuthUtils.getValidGotoURL(request,ssoToken.getProperty("Organization"));          if ((redirect_url == null) || (redirect_url.length() == 0)) {            redirect_url=ssoToken.getProperty(ISAuthConstants.SUCCESS_URL);          }        }        if (redirect_url == null) {          ResultVal=rb.getString("authentication.already.login");        }        LoginSuccess=true;        boolean doForward=AuthUtils.forwardSuccessExists(request);        if (doForward || (redirect_url != null && (redirect_url.startsWith(SSO_REDIRECT) || redirect_url.startsWith(SSO_POST)))) {          if (loginDebug.messageEnabled()) {            loginDebug.message("LoginViewBean.forwardRequest=true");            loginDebug.message("LoginViewBean.forwardTo():Forward URL before appending cookie is " + redirect_url);            loginDebug.message("LoginViewBean.forwardTo():Final Forward URL is " + redirect_url);          }          RequestDispatcher dispatcher=request.getRequestDispatcher(redirect_url);          request.setAttribute(Constants.FORWARD_PARAM,Constants.FORWARD_YES_VALUE);          dispatcher.forward(request,response);        } else {          response.sendRedirect(redirect_url);        }        return;      } catch (      Exception er) {        if (loginDebug.messageEnabled()) {          loginDebug.message("Session getState exception: ",er);        }        setErrorMessage(er);      }    }    ac=AuthUtils.getAuthContext(request,response,sessionID,sessionUpgrade,isBackPost);    if (sessionID != null) {      intSession=AuthD.getSession(sessionID);    }    if ((intSession != null) && (intSession.isTimedOut())) {      loginDebug.message("Session timeout TRUE");      if (sessionUpgrade) {        try {          redirect_url=getPrevSuccessURLAndSetCookie();          clearGlobals();          response.sendRedirect(redirect_url);          return;        } catch (        Exception e) {          loginDebug.message("Error redirecting :",e);        }      } else {        if (CookieUtils.getCookieValueFromReq(request,AuthUtils.getCookieName()) != null) {          clearCookie(AuthUtils.getCookieName());        }        if (CookieUtils.getCookieValueFromReq(request,AuthUtils.getAuthCookieName()) != null) {          clearCookie(AuthUtils.getAuthCookieName());        }        loginURL=intSession.getProperty(ISAuthConstants.FULL_LOGIN_URL);        errorTemplate=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_TIMEOUT,AuthUtils.ERROR_TEMPLATE);        errorCode=AMAuthErrorCode.AUTH_TIMEOUT;        ErrorMessage=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_TIMEOUT,AuthUtils.ERROR_MESSAGE);      }    }    java.util.Locale locale=com.sun.identity.shared.locale.Locale.getLocale(AuthUtils.getLocale(ac));    fallbackLocale=locale;    rb=rbCache.getResBundle(bundleName,locale);    if (loginDebug.messageEnabled()) {      loginDebug.message("ac = " + ac);      loginDebug.message("JSPLocale = " + locale);    }    if (sessionUpgrade) {      ac.getLoginState().setForceAuth(forceAuth);    }    if (!AuthUtils.getInetDomainStatus(ac)) {      if ((errorTemplate == null) || (errorTemplate.length() == 0)) {        setErrorMessage(null);      }    }    if (!isBackPost) {      loginURL=AuthUtils.getLoginURL(ac);    }    String cookieless=(String)request.getAttribute("displayCookieError");    if (cookieless != null && cookieless.equals("true")) {      ErrorMessage=rb.getString("nocookiesupport");      errorTemplate="Message.jsp";    }    if (AuthUtils.isNewRequest(ac)) {      loginDebug.message("New AuthContext created");      if (AuthUtils.isCookieSupported(ac)) {        if (AuthUtils.persistAMCookie(reqDataHash)) {          enableCookieTimeToLive();        }        setCookie();        setlbCookie();      }    } else {      if (AuthUtils.isCookieSet(ac)) {        if (AuthUtils.checkForCookies(request,ac)) {          loginDebug.message("Client support cookie");          AuthUtils.setCookieSupported(ac,true);        } else {          loginDebug.message("Client do not support cookie");          AuthUtils.setCookieSupported(ac,false);        }      }    }  } catch (  Exception e) {    ISLocaleContext localeContext=new ISLocaleContext();    localeContext.setLocale(request);    fallbackLocale=localeContext.getLocale();    rb=rbCache.getResBundle(bundleName,fallbackLocale);    if (loginDebug.messageEnabled()) {      loginDebug.message("JSPLocale = " + fallbackLocale);    }    setErrorMessage(e);    jsp_page=errorTemplate;    if (requestContext == null) {      return;    }    super.forwardTo(requestContext);    return;  }  if (errorTemplate == null || errorTemplate.isEmpty()) {    processLogin();    if (requestContext == null) {      clearGlobals();      return;    }  }  if ((redirect_url != null) && (redirect_url.length() != 0)) {    boolean doForward=AuthUtils.isForwardSuccess(ac,request);    try {      if (doForward && new URI(redirect_url).isAbsolute()) {        doForward=false;      }    } catch (    URISyntaxException e) {      loginDebug.warning("LoginViewBean.forwardTo(): redirect_url {} was not valid",redirect_url,e);    }    if (AuthUtils.isGenericHTMLClient(client_type) || doForward) {      try {        if (loginDebug.messageEnabled()) {          loginDebug.message("Send Redirect to " + redirect_url);        }        InternalSession oldSession=AuthUtils.getOldSession(ac);        if (ac.getStatus() == AuthContext.Status.FAILED) {          loginDebug.message("forwardTo(): Auth failed - Destroy Session!");          if (AuthUtils.isSessionUpgrade(ac)) {            clearCookieAndDestroySession(ac);            loginDebug.message("forwardTo(): Session upgrade - " + "Restoring original Session!");            if (oldSession != null) {              ac.getLoginState().setSession(oldSession);            }          } else {            clearCookieAndDestroySession(ac);            if (oldSession != null) {              loginDebug.message("Destroy existing/old valid session");              AuthD authD=AuthD.getAuth();              authD.destroySession(oldSession.getID());            }          }          loginDebug.message("Login failure, current session destroyed!");        } else         if (ac.getStatus() == AuthContext.Status.SUCCESS) {          response.setHeader("X-AuthErrorCode","0");          if (ac.getLoginState().getForceFlag()) {            if (loginDebug.messageEnabled()) {              loginDebug.message("Forced Auth Succeed." + "Restoring updated session");            }            clearCookieAndDestroySession(ac);            ac.getLoginState().setSession(oldSession);          } else {            if (AuthUtils.isCookieSupported(ac)) {              setCookie();              clearCookie(AuthUtils.getAuthCookieName());            }            if (SystemProperties.getAsBoolean(Constants.DESTROY_SESSION_AFTER_UPGRADE) && oldSession != null) {              loginDebug.message("Destroy existing/old valid session");              AuthD authD=AuthD.getAuth();              authD.destroySession(oldSession.getID());            }          }        }        Cookie appendCookie=AuthUtils.getCookieString(ac,null);        clearGlobals();        if (doForward || redirect_url.startsWith(SSO_REDIRECT) || redirect_url.startsWith(SSO_POST)) {          if (loginDebug.messageEnabled()) {            loginDebug.message("LoginViewBean.forwardRequest=true");            loginDebug.message("LoginViewBean.forwardTo():" + "Forward URL before appending cookie is " + redirect_url);          }          if (redirect_url.contains("?")) {            redirect_url+="&" + appendCookie.getName() + "=";          } else {            redirect_url+="?" + appendCookie.getName() + "=";          }          String cookieValue=appendCookie.getValue();          if (cookieValue != null) {            redirect_url+=URLEncDec.encode(cookieValue);          }          if (loginDebug.messageEnabled()) {            loginDebug.message("LoginViewBean.forwardTo(): Final Forward URL is " + redirect_url);          }          RequestDispatcher dispatcher=request.getRequestDispatcher(redirect_url);          request.setAttribute(Constants.FORWARD_PARAM,Constants.FORWARD_YES_VALUE);          dispatcher.forward(request,response);        } else {          response.sendRedirect(redirect_url);        }        forward=false;        return;      } catch (      IOException e) {        loginDebug.error("LoginViewBean.forwardTo(): There was an IOException doing the forward/redirect",e);        ResultVal=rb.getString("redirect.error");      }catch (      Exception e) {        loginDebug.error("LoginViewBean.forwardTo(): There was an Exception doing the forward/redirect",e);        setErrorMessage(e);        redirect_url=null;      }    }  }  if (forward) {    forward=false;    super.forwardTo(requestContext);  }  clearGlobals();}  }
class C{  public KeyStoreJwtTokenConfig withSigningSecretKeyAlias(String signingSecretKeyAlias){  this.signingSecretKeyAlias=signingSecretKeyAlias;  return this;}  }
class C{  private static void blur(int[] srcPixels,int[] dstPixels,int width,int height,float[] kernel,int radius){  float a;  float r;  float g;  float b;  int ca;  int cr;  int cg;  int cb;  for (int y=0; y < height; y++) {    int index=y;    int offset=y * width;    for (int x=0; x < width; x++) {      a=r=g=b=0.0f;      for (int i=-radius; i <= radius; i++) {        int subOffset=x + i;        if (subOffset < 0 || subOffset >= width) {          subOffset=(x + width) % width;        }        int pixel=srcPixels[offset + subOffset];        float blurFactor=kernel[radius + i];        a+=blurFactor * ((pixel >> 24) & 0xFF);        r+=blurFactor * ((pixel >> 16) & 0xFF);        g+=blurFactor * ((pixel >> 8) & 0xFF);        b+=blurFactor * ((pixel) & 0xFF);      }      ca=(int)(a + 0.5f);      cr=(int)(r + 0.5f);      cg=(int)(g + 0.5f);      cb=(int)(b + 0.5f);      dstPixels[index]=((ca > 255 ? 255 : ca) << 24) | ((cr > 255 ? 255 : cr) << 16) | ((cg > 255 ? 255 : cg) << 8)| (cb > 255 ? 255 : cb);      index+=height;    }  }}  }
class C{  public void writeTag(int tagId) throws IOException {  if (tagId < 0) {    throw new IllegalArgumentException("Can not write negative tag ids (" + tagId + ")");  }  _writeLengthMarker(PREFIX_TYPE_TAG,tagId);}  }
class C{  private int handleT(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,4,"TION")) {    result.append('X');    index+=3;  } else   if (contains(value,index,3,"TIA","TCH")) {    result.append('X');    index+=3;  } else   if (contains(value,index,2,"TH") || contains(value,index,3,"TTH")) {    if (contains(value,index + 2,2,"OM","AM") || contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) {      result.append('T');    } else {      result.append('0','T');    }    index+=2;  } else {    result.append('T');    index=contains(value,index + 1,1,"T","D") ? index + 2 : index + 1;  }  return index;}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  FSUtils.debug.message("FSSingleLogoutServlet doGetPost...");  String providerAlias=request.getParameter(IFSConstants.META_ALIAS);  if (providerAlias == null || providerAlias.length() < 1) {    providerAlias=FSServiceUtils.getMetaAlias(request);  }  if (providerAlias == null || providerAlias.length() < 1) {    FSUtils.debug.error("Unable to retrieve alias, Hosted" + " Provider. Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("aliasNotFound"));    return;  }  request.setAttribute("logoutSource","local");  StringBuffer processLogout=new StringBuffer();  processLogout.append(IFSConstants.SLO_VALUE).append("/").append(IFSConstants.META_ALIAS).append(providerAlias);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("About to get RequestDispatcher for " + processLogout.toString());  }  RequestDispatcher dispatcher=getServletConfig().getServletContext().getRequestDispatcher(processLogout.toString());  if (dispatcher == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("RequestDispatcher is null.\nUnable to find " + processLogout);    }    FSUtils.debug.message("calling sendErrorPage ");    FSLogoutUtil.sendErrorPage(request,response,providerAlias);    return;  }  dispatcher.forward(request,response);  return;}  }
class C{  private void doubleBufferingChanged0(JRootPane rootPane){  BufferInfo info;synchronized (this) {    while (showing) {      try {        wait();      } catch (      InterruptedException ie) {      }    }    info=getBufferInfo(rootPane.getParent());    if (painting && bufferInfo == info) {      disposeBufferOnEnd=true;      info=null;    } else     if (info != null) {      bufferInfos.remove(info);    }  }  if (info != null) {    info.dispose();  }}  }
class C{  public void activate() throws AMException, SSOException {  setStringAttribute(statusAN,"active");  store();}  }
class C{  public void handleDeleteInstanceButtonRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(AUTH_INSTANCE_TABLE);  table.restoreStateData();  CCActionTableModel tableModel=(CCActionTableModel)propertySheetModel.getModel(AUTH_INSTANCE_TABLE);  Integer[] selected=tableModel.getSelectedRows();  Set instances=new HashSet(selected.length * 2);  for (int i=0; i < selected.length; i++) {    tableModel.setRowIndex(selected[i].intValue());    instances.add((String)tableModel.getValue(NAME_COLUMN_DATA));  }  try {    AuthPropertiesModel model=(AuthPropertiesModel)getModel();    model.removeAuthInstance(instances);    setPageSessionAttribute(INSTANCES_REMOVED,(Serializable)instances);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","authentication.instance.deleted");    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","authentication.instance.deleted.multiple");    }    removePageSessionAttribute(AUTH_INSTANCE_TABLE);  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public void clearQueue(){  clearQueue(DEFAULT_QUEUE_NAME);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  BasicDocument(StyleSheet s,Font defaultFont,Color foreground){  super(s);  setPreservesUnknownTags(false);  setFontAndColor(defaultFont,foreground);}  }
class C{  public void replaceSubject(String name,Subject subject) throws NameNotFoundException {  users.replaceSubject(name,subject,false);}  }
class C{  public static void pickImage(Activity activity){  pickImage(activity,REQUEST_PICK);}  }
class C{  public WindowProbeMsg(){}  }
class C{  public PluginResult.PreParse invokePreParseUnbindPlugins(PreParseUnbindOperation unbindOperation){  PluginResult.PreParse result=null;  for (  DirectoryServerPlugin p : preParseUnbindPlugins) {    if (isInternalOperation(unbindOperation,p)) {      continue;    }    try {      result=p.doPreParse(unbindOperation);    } catch (    Exception e) {      return handlePreParseException(e,unbindOperation,p);    }    if (result == null) {      return handlePreParseResult(unbindOperation,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreParse.continueOperationProcessing();  }  return result;}  }
class C{  protected static Digester createDigester(String contextClassName){  Digester digester=new Digester();  digester.setValidating(false);  digester.addObjectCreate("Context",contextClassName,"className");  digester.addSetProperties("Context");  return (digester);}  }
class C{  OperationStore createOperationStore(){  return new OperationStore();}  }
class C{  private Support_TestWebData(String path,String type){  File file=new File(path);  testLength=file.length();  testLastModified=file.lastModified();  testName=file.getName();  testType=type;  testDir=file.isDirectory();  ByteArrayOutputStream out=new ByteArrayOutputStream();  FileInputStream in=null;  try {    in=new FileInputStream(file);    while (in.available() > 0) {      out.write(in.read());    }    in.close();    out.flush();    test0Data=out.toByteArray();    out.close();    test0DataAvailable=true;    return;  } catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (in != null) {        in.close();      }      if (out != null) {        out.close();      }    } catch (    IOException e) {    }  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ContextService[");  sb.append("name=");  sb.append(getName());  if (getDescription() != null) {    sb.append(", description=");    sb.append(getDescription());  }  if (getType() != null) {    sb.append(", type=");    sb.append(getType());  }  if (displayname != null) {    sb.append(", displayname=");    sb.append(displayname);  }  if (largeIcon != null) {    sb.append(", largeIcon=");    sb.append(largeIcon);  }  if (smallIcon != null) {    sb.append(", smallIcon=");    sb.append(smallIcon);  }  if (wsdlfile != null) {    sb.append(", wsdl-file=");    sb.append(wsdlfile);  }  if (jaxrpcmappingfile != null) {    sb.append(", jaxrpc-mapping-file=");    sb.append(jaxrpcmappingfile);  }  if (serviceqname[0] != null) {    sb.append(", service-qname/namespaceURI=");    sb.append(serviceqname[0]);  }  if (serviceqname[1] != null) {    sb.append(", service-qname/localpart=");    sb.append(serviceqname[1]);  }  if (this.getServiceendpoints() != null) {    sb.append(", port-component/service-endpoint-interface=");    sb.append(this.getServiceendpoints());  }  if (handlers != null) {    sb.append(", handler=");    sb.append(handlers);  }  sb.append("]");  return (sb.toString());}  }
class C{  public static AciTargets decode(String input,DN dn) throws AciException {  Target target=null;  TargetAttr targetAttr=null;  TargetFilter targetFilter=null;  TargAttrFilters targAttrFilters=null;  TargetControl targetControl=null;  ExtOp extOp=null;  SearchScope targetScope=SearchScope.WHOLE_SUBTREE;  Pattern targetPattern=Pattern.compile(targetRegex);  Matcher targetMatcher=targetPattern.matcher(input);  while (targetMatcher.find()) {    if (targetMatcher.groupCount() != targetElementCount) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_SYNTAX.get(input);      throw new AciException(message);    }    String keyword=targetMatcher.group(targetKeywordPos);    EnumTargetKeyword targetKeyword=EnumTargetKeyword.createKeyword(keyword);    if (targetKeyword == null) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_KEYWORD.get(keyword);      throw new AciException(message);    }    String operator=targetMatcher.group(targetOperatorPos);    EnumTargetOperator targetOperator=EnumTargetOperator.createOperator(operator);    if (targetOperator == null) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGETS_OPERATOR.get(operator);      throw new AciException(message);    }    String expression=targetMatcher.group(targetExpressionPos);switch (targetKeyword) {case KEYWORD_TARGET:{        if (target == null) {          target=Target.decode(targetOperator,expression,dn);        } else {          LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get("target",input);          throw new AciException(message);        }        break;      }case KEYWORD_TARGETCONTROL:{      if (targetControl == null) {        targetControl=TargetControl.decode(targetOperator,expression);      } else {        LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get("targetcontrol",input);        throw new AciException(message);      }      break;    }case KEYWORD_EXTOP:{    if (extOp == null) {      extOp=ExtOp.decode(targetOperator,expression);    } else {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get("extop",input);      throw new AciException(message);    }    break;  }case KEYWORD_TARGETATTR:{  if (targetAttr == null) {    targetAttr=TargetAttr.decode(targetOperator,expression);  } else {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get("targetattr",input);    throw new AciException(message);  }  break;}case KEYWORD_TARGETSCOPE:{if (targetOperator == EnumTargetOperator.NOT_EQUALITY) {  LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_NOT_OPERATOR.get(operator,targetKeyword.name());  throw new AciException(message);}targetScope=createScope(expression);break;}case KEYWORD_TARGETFILTER:{if (targetFilter == null) {targetFilter=TargetFilter.decode(targetOperator,expression);} else {LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get("targetfilter",input);throw new AciException(message);}break;}case KEYWORD_TARGATTRFILTERS:{if (targAttrFilters == null) {if (targetOperator == EnumTargetOperator.NOT_EQUALITY) {LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_NOT_OPERATOR.get(operator,targetKeyword.name());throw new AciException(message);}targAttrFilters=TargAttrFilters.decode(targetOperator,expression);} else {LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get("targattrfilters",input);throw new AciException(message);}break;}}}return new AciTargets(target,targetAttr,targetFilter,targetScope,targAttrFilters,targetControl,extOp);}  }
class C{  public static void main(String[] args){  Triangle tri=new Triangle(new Pnt(0,0),new Pnt(0,2),new Pnt(2,0));  System.out.println("Triangle created: " + tri);  Triangulation dt=new Triangulation(tri);  System.out.println("DelaunayTriangulation created: " + dt);  dt.delaunayPlace(new Pnt(0,0));  dt.delaunayPlace(new Pnt(1,0));  dt.delaunayPlace(new Pnt(0,1));  System.out.println("After adding 3 points, we have a " + dt);  Triangle.moreInfo=true;  System.out.println("Triangles: " + dt.triGraph.nodeSet());}  }
class C{  @Override public void bindView(V view){  this.view=view;}  }
class C{  void splitZone(int index,int offs0,int offs1){  Element elem=getElement();  Document doc=elem.getDocument();  Vector<View> zones=new Vector<View>();  int offs=offs0;  do {    offs0=offs;    offs=Math.min(getDesiredZoneEnd(offs0),offs1);    zones.addElement(createZone(offs0,offs));  } while (offs < offs1);  View oldZone=getView(index);  View[] newZones=new View[zones.size()];  zones.copyInto(newZones);  replace(index,1,newZones);}  }
class C{  public XRTreeFrag(int root,XPathContext xctxt,ExpressionNode parent){  super(null);  exprSetParent(parent);  initDTM(root,xctxt);}  }
class C{  public void doSetInput(boolean force){  IEditorInput input=getEditorInput();  try {    if (doOpenBuffer(input,force)) {      super.doSetInput(input);    }  } catch (  Exception e) {    JavaDecompilerPlugin.logError(e,"");  }}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s9_empty_repository();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public boolean isNamespaceDeclUris(){  return namespaceDeclUris;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.ReferenceListElement createReferenceListElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.ReferenceListElementImpl();}  }
class C{  public SecurityConstraint(){  super();}  }
class C{  public boolean isFirstWarning(){  refreshIfUndefined(isFirstWarning);  return isFirstWarning == ConditionResult.TRUE;}  }
class C{  public static String removeSpaces(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return value.replaceAll("\\s","");}  }
class C{  protected String calculateJson(){  StringBuilder builder=new StringBuilder();  builder.append("{\"").append(TRACE_ID_FIELD).append("\":\"").append(traceId);  builder.append("\",\"").append(PARENT_SPAN_ID_FIELD).append("\":\"").append(parentSpanId);  builder.append("\",\"").append(SPAN_ID_FIELD).append("\":\"").append(spanId);  builder.append("\",\"").append(SPAN_NAME_FIELD).append("\":\"").append(spanName);  builder.append("\",\"").append(SAMPLEABLE_FIELD).append("\":\"").append(sampleable);  builder.append("\",\"").append(USER_ID_FIELD).append("\":\"").append(userId);  builder.append("\",\"").append(SPAN_PURPOSE_FIELD).append("\":\"").append(spanPurpose.name());  builder.append("\",\"").append(START_TIME_EPOCH_MICROS_FIELD).append("\":\"").append(spanStartTimeEpochMicros);  if (isCompleted()) {    builder.append("\",\"").append(DURATION_NANOS_FIELD).append("\":\"").append(durationNanos);  }  builder.append("\"}");  return builder.toString();}  }
class C{  public PKCS5S1ParametersGenerator(Digest digest){  this.digest=digest;}  }
class C{  public Comparator(BlockFace facingDirection,boolean isSubtraction){  this(facingDirection,isSubtraction,DEFAULT_STATE);}  }
class C{  public void writeState(){  String backingFilePath=taskBackend.getTaskBackingFile();  String tmpFilePath=backingFilePath + ".tmp";  LDIFExportConfig exportConfig=new LDIFExportConfig(tmpFilePath,ExistingFileBehavior.OVERWRITE);  schedulerLock.lock();  try {    LDIFWriter writer=new LDIFWriter(exportConfig);    writer.writeComment(INFO_TASKBE_BACKING_FILE_HEADER.get(),80);    writer.writeEntry(taskRootEntry);    writer.writeEntry(scheduledTaskParentEntry);    writer.writeEntry(recurringTaskParentEntry);    for (    RecurringTask recurringTask : recurringTasks.values()) {      writer.writeEntry(recurringTask.getRecurringTaskEntry());    }    for (    Task task : tasks.values()) {      writer.writeEntry(task.getTaskEntry());    }    writer.close();    File saveFile=getFileForPath(backingFilePath + ".save");    try {      if (saveFile.exists()) {        saveFile.delete();      }    } catch (    Exception e) {      logger.traceException(e);    }    File backingFile=getFileForPath(backingFilePath);    try {      if (backingFile.exists()) {        backingFile.renameTo(saveFile);      }    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=WARN_TASKSCHED_CANNOT_RENAME_CURRENT_BACKING_FILE.get(backingFilePath,saveFile.getAbsolutePath(),stackTraceToSingleLineString(e));      logger.warn(message);      DirectoryServer.sendAlertNotification(this,ALERT_TYPE_CANNOT_RENAME_CURRENT_TASK_FILE,message);    }    File tmpFile=getFileForPath(tmpFilePath);    try {      tmpFile.renameTo(backingFile);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_TASKSCHED_CANNOT_RENAME_NEW_BACKING_FILE.get(tmpFilePath,backingFilePath,stackTraceToSingleLineString(e));      logger.error(message);      DirectoryServer.sendAlertNotification(this,ALERT_TYPE_CANNOT_RENAME_NEW_TASK_FILE,message);    }  } catch (  LDIFException le) {    logger.traceException(le);    LocalizableMessage message=ERR_TASKSCHED_CANNOT_WRITE_BACKING_FILE.get(tmpFilePath,le.getMessage());    logger.error(message);    DirectoryServer.sendAlertNotification(this,ALERT_TYPE_CANNOT_WRITE_TASK_FILE,message);  }catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_TASKSCHED_CANNOT_WRITE_BACKING_FILE.get(tmpFilePath,stackTraceToSingleLineString(e));    logger.error(message);    DirectoryServer.sendAlertNotification(this,ALERT_TYPE_CANNOT_WRITE_TASK_FILE,message);  } finally {    schedulerLock.unlock();  }}  }
class C{  public ChangelogException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  private void closeRdrandEngine(){  if (rdrandEngine != null) {    OpenSslNativeJna.ENGINE_finish(rdrandEngine);    OpenSslNativeJna.ENGINE_free(rdrandEngine);  }}  }
class C{  private SecurityConfig(){  String definition=null;  String access=null;  try {    definition=CatalinaProperties.getProperty("package.definition");    access=CatalinaProperties.getProperty("package.access");  } catch (  java.lang.Exception ex) {    if (log.isDebugEnabled()) {      log.debug("Unable to load properties using CatalinaProperties",ex);    }  } finally {    packageDefinition=definition;    packageAccess=access;  }}  }
class C{  public static void logModifyDNResponse(ModifyDNOperation modifyDNOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logModifyDNResponse(modifyDNOperation);  }}  }
class C{  public Executor addEnv(String name,String value){  this.env.put(name,value);  return this;}  }
class C{  public void doClick(int pressTime){  MenuElement me[]=buildMenuElementArray(this);  MenuSelectionManager.defaultManager().setSelectedPath(me);}  }
class C{  public BasicPermissionCollection(Class<?> clazz){  perms=new HashMap<String,Permission>(11);  all_allowed=false;  permClass=clazz;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.TransformType.XPath createTransformTypeXPath() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.TransformTypeImpl.XPathImpl();}  }
class C{  public static Cookie newCookie(String name,String value,String path){  return newCookie(name,value,defAge,path,null);}  }
class C{  public PendingActionContext(final JsonValue savedContext,final ClassLoader classLoader) throws ResourceException {  super(savedContext,classLoader);}  }
class C{  public String format(java.util.logging.LogRecord logRecord){  Map logInfo=null;  if ((LogManagerUtil.isAMLoggingMode()) && (logRecord instanceof ILogRecord)) {    logInfo=((com.sun.identity.log.ILogRecord)logRecord).getLogInfoMap();  }  String logName=logRecord.getLoggerName();  String loggedBySid=null;  if (logInfo != null) {    loggedBySid=(String)logInfo.get(LogConstants.LOGGED_BY_SID);    if (loggedBySid == null) {      if (Debug.warningEnabled()) {        Debug.warning("RemoteFormatter : returning null" + " because logRecord doesn't have loggedBySid");      }      return null;    }  }  Object[] parameters=logRecord.getParameters();  StringBuffer xml=new StringBuffer();  xml.append("<logRecWrite><log logName=\"");  xml.append(logName);  xml.append("\" sid=\"");  xml.append(loggedBySid);  xml.append("\"></log><logRecord><level>");  xml.append(logRecord.getLevel().intValue());  xml.append("</level><recMsg>");  String msg=formatMessage(logRecord);  if ((msg == null) || (msg.length() == 0)) {    msg=LogConstants.NOTAVAIL;  }  msg=com.sun.identity.shared.encode.Base64.encode(msg.getBytes());  xml.append(msg);  xml.append("</recMsg>");  if (logInfo != null) {    Set keys=logInfo.keySet();    Iterator keysIter=keys.iterator();    xml.append("<logInfoMap>");    while (keysIter.hasNext()) {      String key=(String)keysIter.next();      xml.append("<logInfo> <infoKey>");      xml.append(key);      xml.append("</infoKey><infoValue>");      String infoValue=(String)logInfo.get(key);      if (key.equalsIgnoreCase(LogConstants.DATA)) {        infoValue=com.sun.identity.shared.encode.Base64.encode(infoValue.getBytes());      }      xml.append(infoValue);      xml.append("</infoValue></logInfo>");    }    xml.append("</logInfoMap>");  }  if ((parameters != null) && (parameters.length > 0)) {    xml.append("<parameters>");    for (int i=0; i < parameters.length; i++) {      xml.append("<parameter><paramIndex>");      xml.append(String.valueOf(i));      xml.append("</paramIndex><paramValue>");      xml.append(parameters[i].toString());      xml.append("</paramValue></parameter>");    }    xml.append("</parameters>");  }  xml.append("</logRecord></logRecWrite>");  if (Debug.messageEnabled()) {    Debug.message("RemoteFormatter: XML Req string = " + xml);  }  return xml.toString();}  }
class C{  public void testSetBitNegativeOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=150;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static final Table createTestWorldBankTable(){  Table testTable=new Table();  testTable.setName("worldbankloans");  testTable.setDatabaseByString(createTestWorldBankDatabase().getName());  testTable.setDescription("This table stores data about World Bank loans.");  return testTable;}  }
class C{  static <T>Promise<T> promise(){  return new BasePromise<>();}  }
class C{  public void addResult(AMIdentity id,Map attrs){  searchResults.add(id);  resultsMap.put(id,attrs);}  }
class C{  public LazyMetadataValue(Plugin owningPlugin,CacheStrategy cacheStrategy,Callable<Object> lazyValue){  super(owningPlugin);  Validate.notNull(cacheStrategy,"cacheStrategy cannot be null");  Validate.notNull(lazyValue,"lazyValue cannot be null");  this.internalValue=new SoftReference<Object>(null);  this.lazyValue=lazyValue;  this.cacheStrategy=cacheStrategy;}  }
class C{  protected final void unexpectedEndOfInput(){  if (cacheRequest != null) {    cacheRequest.abort();  }  httpEngine.release(true);}  }
class C{  public static String colorToHex(int color){  return String.format("#%06X",(0xFFFFFF & color));}  }
class C{  public JSplitPane(){  this(JSplitPane.HORIZONTAL_SPLIT,UIManager.getBoolean("SplitPane.continuousLayout"),new JButton(UIManager.getString("SplitPane.leftButtonText")),new JButton(UIManager.getString("SplitPane.rightButtonText")));}  }
class C{  FileReplicaDBCursor(final RepositionableCursor<CSN,UpdateMsg> cursor,final CSN startCSN,final PositionStrategy positionStrategy){  this.cursor=cursor;  this.lastNonNullCurrentCSN=startCSN;  this.positionStrategy=positionStrategy;}  }
class C{  public static ZoneRules of(ZoneOffset baseStandardOffset,ZoneOffset baseWallOffset,List<ZoneOffsetTransition> standardOffsetTransitionList,List<ZoneOffsetTransition> transitionList,List<ZoneOffsetTransitionRule> lastRules){  Objects.requireNonNull(baseStandardOffset,"baseStandardOffset");  Objects.requireNonNull(baseWallOffset,"baseWallOffset");  Objects.requireNonNull(standardOffsetTransitionList,"standardOffsetTransitionList");  Objects.requireNonNull(transitionList,"transitionList");  Objects.requireNonNull(lastRules,"lastRules");  return new ZoneRules(baseStandardOffset,baseWallOffset,standardOffsetTransitionList,transitionList,lastRules);}  }
class C{  @Override public synchronized long skip(final long length) throws IOException {  final long skip=super.skip(length);  this.count+=skip;  return skip;}  }
class C{  public void processExpires(){  String[] keys=null;  if (!getState().isAvailable()) {    return;  }  try {    keys=expiredKeys();  } catch (  IOException e) {    manager.getContext().getLogger().error("Error getting keys",e);    return;  }  if (manager.getContext().getLogger().isDebugEnabled()) {    manager.getContext().getLogger().debug(getStoreName() + ": processExpires check number of " + keys.length+ " sessions");  }  long timeNow=System.currentTimeMillis();  for (int i=0; i < keys.length; i++) {    try {      StandardSession session=(StandardSession)load(keys[i]);      if (session == null) {        continue;      }      int timeIdle=(int)((timeNow - session.getThisAccessedTime()) / 1000L);      if (timeIdle < session.getMaxInactiveInterval()) {        continue;      }      if (manager.getContext().getLogger().isDebugEnabled()) {        manager.getContext().getLogger().debug(getStoreName() + ": processExpires expire store session " + keys[i]);      }      boolean isLoaded=false;      if (manager instanceof PersistentManagerBase) {        isLoaded=((PersistentManagerBase)manager).isLoaded(keys[i]);      } else {        try {          if (manager.findSession(keys[i]) != null) {            isLoaded=true;          }        } catch (        IOException ioe) {        }      }      if (isLoaded) {        session.recycle();      } else {        session.expire();      }      remove(keys[i]);    } catch (    Exception e) {      manager.getContext().getLogger().error("Session: " + keys[i] + "; ",e);      try {        remove(keys[i]);      } catch (      IOException e2) {        manager.getContext().getLogger().error("Error removing key",e2);      }    }  }}  }
class C{  protected static EventListener addInternal(EventListener a,EventListener b){  if (a == null)   return b;  if (b == null)   return a;  return new AWTEventMulticaster(a,b);}  }
class C{  public PersistentCookie(){  super(new PersistentCookieAuthModule());}  }
class C{  public static SearchRequest newSingleEntrySearchRequest(final String dn,String... attributeDescriptions){  return Requests.newSingleEntrySearchRequest(dn,SearchScope.BASE_OBJECT,Filter.objectClassPresent().toString(),attributeDescriptions).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  public synchronized void write(int b) throws IOException {  out.write(b);  incCount(1);}  }
class C{  public static void signAuthnRequest(final String certAlias,final AuthnRequest authnRequest) throws SAML2Exception {  KeyProvider kp=KeyUtil.getKeyProviderInstance();  if (kp == null) {    SAML2Utils.debug.error("SPSSOFederate:signAuthnRequest: " + "Unable to get a key provider instance.");    throw new SAML2Exception(SAML2Utils.bundle.getString("nullKeyProvider"));  }  authnRequest.sign(kp.getPrivateKey(certAlias),kp.getX509Certificate(certAlias));}  }
class C{  public boolean isSubtractionMode(){  return (getData() & 0x4) != 0;}  }
class C{  public static boolean isWebSocketUpgradeRequest(ServletRequest request,ServletResponse response){  return ((request instanceof HttpServletRequest) && (response instanceof HttpServletResponse) && headerContainsToken((HttpServletRequest)request,Constants.UPGRADE_HEADER_NAME,Constants.UPGRADE_HEADER_VALUE)&& "GET".equals(((HttpServletRequest)request).getMethod()));}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=(float)Math.sqrt(dx * dx + dy * dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=(float)Math.sqrt(velocityX * velocityX + velocityY * velocityY);  mVelocity=velocity;  mDuration=getSplineFlingDuration(velocity);  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  double totalDistance=getSplineFlingDistance(velocity);  mDistance=(int)(totalDistance * Math.signum(velocity));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + (int)Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + (int)Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  @Override public JsonGenerator useDefaultPrettyPrinter(){  return this;}  }
class C{  protected void updateXmpMetadata(){  try {    if (writer.properties.addXmpMetadata) {      setXmpMetadata(updateDefaultXmpMetadata());    }  } catch (  XMPException e) {    Logger logger=LoggerFactory.getLogger(PdfDocument.class);    logger.error(LogMessageConstant.EXCEPTION_WHILE_UPDATING_XMPMETADATA,e);  }}  }
class C{  static void checkIfBackendIsWritable(Backend<?> backend,Operation op,DN entryDN,LocalizableMessageDescriptor.Arg1<Object> serverMsg,LocalizableMessageDescriptor.Arg1<Object> backendMsg) throws DirectoryException {  if (!backend.isPrivateBackend()) {    checkIfWritable(DirectoryServer.getWritabilityMode(),op,serverMsg,entryDN);    checkIfWritable(backend.getWritabilityMode(),op,backendMsg,entryDN);  }}  }
class C{  public void internalFrameActivated(InternalFrameEvent e){}  }
class C{  private void calculateLongestLine(){  Component c=getContainer();  font=c.getFont();  metrics=c.getFontMetrics(font);  Document doc=getDocument();  Element lines=getElement();  int n=lines.getElementCount();  int maxWidth=-1;  for (int i=0; i < n; i++) {    Element line=lines.getElement(i);    int w=getLineWidth(line);    if (w > maxWidth) {      maxWidth=w;      longLine=line;    }  }}  }
class C{  private ResourceResponse policyResource(Privilege policy) throws EntitlementException {  return newResourceResponse(policy.getName(),policyRevision(policy),policyParser.printPolicy(policy));}  }
class C{  public void paint(Graphics g){  super.paint(g);  Border border=getBorder();  if (border != null) {    Dimension size=getSize();    border.paintBorder(this,g,0,0,size.width,size.height);  }}  }
class C{  public void registerHanders(String packageString){  List<String> list=AnnotationDetector.scanAsList(ExceptionHandler.class,packageString);  for (  String handler : list) {    JKExceptionHandler<? extends Throwable> newInstance=JKObjectUtil.newInstance(handler);    Class<? extends Throwable> clas=JKObjectUtil.getGenericParamter(handler);    setHandler(clas,newInstance);  }}  }
class C{  public void updateUserAttribute(SSOToken token,Set members,String staticGroupDN,boolean toAdd) throws AMException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,members,staticGroupDN,Boolean.valueOf(toAdd)};    client.send(client.encodeMessage("updateUserAttribute",objs),sessionCookies.getLBCookie(tokenID),null);  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.updateUserAttr: staticGroupDN=" + staticGroupDN + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.updateUserAttribute: caught exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.updateUserAttribute: staticGroupDN=" + staticGroupDN + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  public SwingPropertyChangeSupport(Object sourceBean,boolean notifyOnEDT){  super(sourceBean);  this.notifyOnEDT=notifyOnEDT;}  }
class C{  protected boolean removeSpecial(String name){  for (int i=0; i < specials.length; i++) {    if (specials[i].equals(name)) {      specialAttributes[i]=null;      return true;    }  }  return false;}  }
class C{  public boolean isLargeModel(){  return largeModel;}  }
class C{  public String toString(){  String sType="";  if (type != null)   sType=type.toString() + " ";  String sLine;  if (getLine() == null) {    sLine="null";  } else {    sLine=getLine().toString();  }  return new String(sType + "event from line " + sLine);}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  private MacKeyEntry importMacKeyEntry(final String keyIDString,final String algorithm,final SecretKey secretKey,final int secretKeyLengthBits,final boolean isCompromised) throws CryptoManagerException {  Reject.ifNull(keyIDString,secretKey);  final KeyEntryID keyID=new KeyEntryID(keyIDString);  MacKeyEntry keyEntry=getMacKeyEntryOrNull(keyID);  if (null != keyEntry) {    if (!(keyEntry.getType().equals(algorithm) && keyEntry.getKeyLengthBits() == secretKeyLengthBits)) {      throw new CryptoManagerException(ERR_CRYPTOMGR_IMPORT_KEY_ENTRY_FIELD_MISMATCH.get(keyIDString));    }    if (isCompromised && !keyEntry.isCompromised()) {      keyEntry.setIsCompromised();    }    return keyEntry;  }  keyEntry=new MacKeyEntry(keyID,algorithm,secretKey,secretKeyLengthBits,isCompromised);  getMacEngine(keyEntry);  macKeyEntryLock.lock();  try {    macKeyEntryCache.put(keyEntry.getKeyID(),keyEntry);    mostRecentMacKeys.put(getKeyFullSpec(algorithm,secretKeyLengthBits),keyEntry);  }  finally {    macKeyEntryLock.unlock();  }  return keyEntry;}  }
class C{  public Support_TestProvider(){  super(NAME,VERSION,INFO);  registerServices();}  }
class C{  public IdentityHashMap(int expectedMaxSize){  if (expectedMaxSize < 0)   throw new IllegalArgumentException("expectedMaxSize is negative: " + expectedMaxSize);  init(capacity(expectedMaxSize));}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public String entryTypeName(Field field){  Type items=getApiaryConfig().getType(field.getTypeUrl());  return String.format("%s.Entry<%s, %s>",getTypeName("java.util.Map"),typeName(items,getField(items,"key")),typeName(items,getField(items,"value")));}  }
class C{  public boolean hasPostDial(){  return parameters.getValue(POSTDIAL) != null;}  }
class C{  FileChangeNumberIndexDB(FileChangelogDB changelogDB,ReplicationEnvironment replicationEnv) throws ChangelogException {  this.changelogDB=changelogDB;  log=replicationEnv.getOrCreateCNIndexDB();  final ChangeNumberIndexRecord newestRecord=readLastRecord();  newestChangeNumber=getChangeNumber(newestRecord);  lastGeneratedChangeNumber=new AtomicLong(newestChangeNumber);  DirectoryServer.deregisterMonitorProvider(dbMonitor);  DirectoryServer.registerMonitorProvider(dbMonitor);}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  int length=getParamElemCount();  for (int i=0; i < length; i++) {    ElemWithParam ewp=getParamElem(i);    ewp.compose(sroot);  }  if ((null != m_templateName) && (null == m_template)) {    m_template=this.getStylesheetRoot().getTemplateComposed(m_templateName);    if (null == m_template) {      String themsg=XSLMessages.createMessage(XSLTErrorResources.ER_ELEMTEMPLATEELEM_ERR,new Object[]{m_templateName});      throw new TransformerException(themsg,this);    }    length=getParamElemCount();    for (int i=0; i < length; i++) {      ElemWithParam ewp=getParamElem(i);      ewp.m_index=-1;      int etePos=0;      for (ElemTemplateElement ete=m_template.getFirstChildElem(); null != ete; ete=ete.getNextSiblingElem()) {        if (ete.getXSLToken() == Constants.ELEMNAME_PARAMVARIABLE) {          ElemParam ep=(ElemParam)ete;          if (ep.getName().equals(ewp.getName())) {            ewp.m_index=etePos;          }        } else         break;        etePos++;      }    }  }}  }
class C{  public static void saveAsXML(NSObject root,OutputStream out) throws IOException {  OutputStreamWriter w=new OutputStreamWriter(out,"UTF-8");  w.write(root.toXMLPropertyList());  w.close();}  }
class C{  public void test_addAllILjava_util_Collection(){  Collection l=new LinkedList();  for (int i=0; i < 100; i++)   l.add("Test " + i);  Vector v=new Vector();  tVector.addAll(50,l);  for (int i=50; i < 100; i++)   assertTrue("Failed to add all elements",tVector.get(i) == ((List)l).get(i - 50));  v=new Vector();  v.add("one");  int r=0;  try {    v.addAll(3,Arrays.asList(new String[]{"two","three"}));  } catch (  ArrayIndexOutOfBoundsException e) {    r=1;  }catch (  IndexOutOfBoundsException e) {    r=2;  }  assertTrue("Invalid add: " + r,r == 1);  l=new LinkedList();  l.add(null);  l.add("gah");  l.add(null);  tVector.addAll(50,l);  assertNull("Wrong element at position 50--wanted null",tVector.get(50));  assertEquals("Wrong element at position 51--wanted 'gah'","gah",tVector.get(51));  assertNull("Wrong element at position 52--wanted null",tVector.get(52));  try {    tVector.addAll(-5,Arrays.asList(new String[]{"two","three"}));    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.addAll(tVector.size() + 1,Arrays.asList(new String[]{"two","three"}));    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.addAll(tVector.size() / 2,null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public AuthenticatorPushService(ServiceConfigManager serviceConfigManager,String realm) throws SMSException, SSOException {  super(serviceConfigManager,realm,DEBUG_LOCATION);}  }
class C{  public Segment(){  this(null,0,0);}  }
class C{  protected OpenDsException(LocalizableMessage message,Throwable cause){  super(message != null ? message.toString() : cause != null ? cause.getMessage() : null,cause);  if (message != null) {    this.message=message;  } else   if (cause instanceof LocalizableException) {    this.message=((LocalizableException)cause).getMessageObject();  } else {    this.message=null;  }}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  MutableBigInteger euclidModInverse(int k){  MutableBigInteger b=new MutableBigInteger(1);  b.leftShift(k);  MutableBigInteger mod=new MutableBigInteger(b);  MutableBigInteger a=new MutableBigInteger(this);  MutableBigInteger q=new MutableBigInteger();  MutableBigInteger r=b.divide(a,q);  MutableBigInteger swapper=b;  b=r;  r=swapper;  MutableBigInteger t1=new MutableBigInteger(q);  MutableBigInteger t0=new MutableBigInteger(1);  MutableBigInteger temp=new MutableBigInteger();  while (!b.isOne()) {    r=a.divide(b,q);    if (r.intLen == 0)     throw new ArithmeticException("BigInteger not invertible.");    swapper=r;    a=swapper;    if (q.intLen == 1)     t1.mul(q.value[q.offset],temp); else     q.multiply(t1,temp);    swapper=q;    q=temp;    temp=swapper;    t0.add(q);    if (a.isOne())     return t0;    r=b.divide(a,q);    if (r.intLen == 0)     throw new ArithmeticException("BigInteger not invertible.");    swapper=b;    b=r;    if (q.intLen == 1)     t0.mul(q.value[q.offset],temp); else     q.multiply(t0,temp);    swapper=q;    q=temp;    temp=swapper;    t1.add(q);  }  mod.subtract(t1);  return mod;}  }
class C{  public boolean signHash(){  return signHash;}  }
class C{  public static void resetCount(){  notificationsProcessed.set(0);}  }
class C{  public String toOIDString(){  if (sOID == null) {    sOID="OID." + toString();  }  return sOID;}  }
class C{  GSSException(int majorCode,String majorString){  if (validateMajor(majorCode))   major=majorCode; else   major=FAILURE;  this.majorString=majorString;}  }
class C{  public void removeEntry(SSOToken token,String entryDN,int objectType,boolean recursive,boolean softDelete) throws AMException, SSOException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,entryDN,new Integer(objectType),Boolean.valueOf(recursive),Boolean.valueOf(softDelete)};    client.send(client.encodeMessage("removeEntry",objs),sessionCookies.getLBCookie(tokenID),null);  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.removeEntry: entryDN=" + entryDN + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.removeEntry: caught " + "exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  SSOException ssoe) {    getDebug().error("RemoteServicesImpl.removeEntry: caught SSOException=",ssoe);    throw ssoe;  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.removeEntry: entryDN=" + entryDN + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  public void handleButtonDownloadCertRequest(RequestInvocationEvent event) throws ModelControlException {  RequestContext reqContext=event.getRequestContext();  HttpServletResponse resp=reqContext.getResponse();  String cert=(String)psModel.getValue("PubKey");  ServletOutputStream op=null;  try {    int length=0;    op=resp.getOutputStream();    resp.setContentType("application/octet-stream");    resp.setContentLength(cert.length());    resp.setHeader("Content-Disposition","attachment; filename=\"" + "OpenSSOCert.txt" + "\"");    int BUFSIZE=cert.length();    byte[] bbuf=new byte[BUFSIZE];    InputStream is=new ByteArrayInputStream(cert.getBytes());    DataInputStream in=new DataInputStream(is);    while ((in != null) && ((length=in.read(bbuf)) != -1)) {      op.write(bbuf,0,length);    }    in.close();    op.flush();  } catch (  IOException ex) {    debug.error("ConfigureSalesForceAppsCompleteViewBean.uploadCert",ex);    setInlineAlertMessage(CCAlert.TYPE_ERROR,"configure.salesforce.apps.complete.certificate.download.error",ex.getMessage());  } finally {    if (op != null) {      try {        op.close();      } catch (      IOException ex) {        debug.error("ConfigureSalesForceAppsCompleteViewBean.uploadCert",ex);        setInlineAlertMessage(CCAlert.TYPE_ERROR,"configure.SalesForce.apps.complete.certificate.download.error",ex.getMessage());      }    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ReferenceElement createReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ReferenceElementImpl();}  }
class C{  public SSOException(String bundleName,String errCode,Object[] args){  super(bundleName,errCode,args);}  }
class C{  public static void appendLong(AbstractStringBuilder sb,long l){  convertLong(sb,l);}  }
class C{  boolean ignoreProfile(){  return ignoreUserProfile;}  }
class C{  public static Object require(Class<?> callerClass,String file) throws Throwable {  ScriptCompiler sc=new ScriptCompiler(callerClass.getClassLoader());  file=file.trim();  String tmp=file;  if (file.startsWith("cp:")) {    tmp=tmp.substring("cp:".length()).trim();    if (tmp.startsWith("/")) {      tmp=tmp.substring(1);    }    file="cp:" + tmp;  }  Reader r;  if (file.startsWith("cp:")) {    if (requiredObjects.containsKey(file))     return requiredObjects.get(file);    ClassLoader loader=callerClass.getClassLoader();    InputStream is=loader.getResourceAsStream(tmp);    if (is == null) {      throw new RuntimeException("cannot find " + file + " in class loader "+ loader);    }    r=new InputStreamReader(is);  } else {    if (requiredObjects.containsKey(file))     return requiredObjects.get(file);    r=new FileReader(file);  }  if (tmp.contains("/")) {    tmp=tmp.substring(tmp.indexOf("/") + 1);  }  if (tmp.contains("\\")) {    tmp=tmp.substring(tmp.indexOf("\\") + 1);  }  Object o=sc.compile(tmp,r).run().getResult();  requiredObjects.put(file,o);  return o;}  }
class C{  public MalformedURIException(){  super();}  }
class C{  public SignatureVisitor visitReturnType(){  return this;}  }
class C{  private void assertThatCursorCanBeFullyRead(DBCursor<Record<String,String>> cursor,int fromIndex,int endIndex) throws Exception {  advanceCursorUpTo(cursor,fromIndex,endIndex);  assertThatCursorIsExhausted(cursor);}  }
class C{  public void logConnect(ClientConnection clientConnection){}  }
class C{  public void addFirst(E e){  if (e == null)   throw new NullPointerException("e == null");  elements[head=(head - 1) & (elements.length - 1)]=e;  if (head == tail)   doubleCapacity();}  }
class C{  private void midPoint(PointF point,MotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2,y / 2);}  }
class C{  private void initResourceBundle(UIDefaults table){  table.setDefaultLocale(Locale.getDefault());  table.addResourceBundle("com.sun.swing.internal.plaf.basic.resources.basic");}  }
class C{  protected void notifyCursorMoved() throws SQLException {  checkforRowSetInterface();  if (listeners.isEmpty() == false) {    RowSetEvent event=new RowSetEvent((RowSet)this);    for (    RowSetListener rsl : listeners) {      rsl.cursorMoved(event);    }  }}  }
class C{  @Override public void onChanged(T sender){  this.adapter.notifyDataSetChanged();}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  public boolean is_cross_hair_cursor(){  return custom_cursor != null;}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public TRANSACTION_UNAVAILABLE(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  private MP3AudioHeader checkAudioStart(long startByte,MP3AudioHeader firstHeaderAfterTag) throws IOException, InvalidAudioFrameException {  MP3AudioHeader headerOne;  MP3AudioHeader headerTwo;  logger.warning(ErrorMessage.MP3_ID3TAG_LENGTH_INCORRECT.getMsg(file.getPath(),Hex.asHex(startByte),Hex.asHex(firstHeaderAfterTag.getMp3StartByte())));  headerOne=new MP3AudioHeader(file,0);  logger.config("Checking from start:" + headerOne);  if (firstHeaderAfterTag.getMp3StartByte() == headerOne.getMp3StartByte()) {    logger.config(ErrorMessage.MP3_START_OF_AUDIO_CONFIRMED.getMsg(file.getPath(),Hex.asHex(headerOne.getMp3StartByte())));    return firstHeaderAfterTag;  } else {    logger.config((ErrorMessage.MP3_RECALCULATED_POSSIBLE_START_OF_MP3_AUDIO.getMsg(file.getPath(),Hex.asHex(headerOne.getMp3StartByte()))));    if (firstHeaderAfterTag.getNumberOfFrames() == headerOne.getNumberOfFrames()) {      logger.warning((ErrorMessage.MP3_RECALCULATED_START_OF_MP3_AUDIO.getMsg(file.getPath(),Hex.asHex(headerOne.getMp3StartByte()))));      return headerOne;    }    if (isFilePortionNull((int)startByte,(int)firstHeaderAfterTag.getMp3StartByte())) {      return firstHeaderAfterTag;    }    headerTwo=new MP3AudioHeader(file,headerOne.getMp3StartByte() + headerOne.mp3FrameHeader.getFrameLength());    if (headerTwo.getMp3StartByte() == firstHeaderAfterTag.getMp3StartByte()) {      logger.warning((ErrorMessage.MP3_START_OF_AUDIO_CONFIRMED.getMsg(file.getPath(),Hex.asHex(firstHeaderAfterTag.getMp3StartByte()))));      return firstHeaderAfterTag;    }    if (headerTwo.getNumberOfFrames() == headerOne.getNumberOfFrames()) {      logger.warning((ErrorMessage.MP3_RECALCULATED_START_OF_MP3_AUDIO.getMsg(file.getPath(),Hex.asHex(headerOne.getMp3StartByte()))));      return headerOne;    } else {      logger.warning((ErrorMessage.MP3_RECALCULATED_START_OF_MP3_AUDIO.getMsg(file.getPath(),Hex.asHex(firstHeaderAfterTag.getMp3StartByte()))));      return firstHeaderAfterTag;    }  }}  }
class C{  public static String patternToString(List<ShapeLocker.Cell> pattern){  if (pattern == null) {    return "";  }  final int patternSize=pattern.size();  byte[] res=new byte[patternSize];  for (int i=0; i < patternSize; i++) {    ShapeLocker.Cell cell=pattern.get(i);    res[i]=(byte)(cell.getRow() * 3 + cell.getColumn());  }  return Arrays.toString(res);}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  @Override public int doFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  ByteBuffer outputBuf=ByteBuffer.wrap(output,outputOffset,output.length - outputOffset);  ByteBuffer inputBuf=ByteBuffer.wrap(input,inputOffset,inputLen);  return doFinal(inputBuf,outputBuf);}  }
class C{  private static DeleteRequestProtocolOp readDeleteRequest(ASN1Reader reader) throws LDAPException {  try {    return new DeleteRequestProtocolOp(reader.readOctetString());  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_DELETE_REQUEST_DECODE_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }}  }
class C{  public AMSearchResults searchAllRoles(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  int[] objectTypes={AMObject.ROLE,AMObject.FILTERED_ROLE};  return searchObjects(objectTypes,wildcard,avPairs,searchControl);}  }
class C{  public boolean hasBinaryAttributes(){  return false;}  }
class C{  private void skip(Pattern pattern) throws DecodeException {  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));  if (matcher.find() && matcher.groupCount() >= 1) {    pos+=matcher.end(1);  } else {    final LocalizableMessage msg=WARN_GSER_PATTERN_NO_MATCH.get(pattern.pattern(),gserValue.substring(pos,length));    throw DecodeException.error(msg);  }}  }
class C{  public boolean isInDefaultEventSet(){  return inDefaultEventSet;}  }
class C{  public ContentBranding(){  this(0,BigInteger.ZERO);}  }
class C{  public FrameBodyWXXX(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      logger.info("null server tx -- getting a new one");      st=sipProvider.getNewServerTransaction(request);    }    logger.info("getNewServerTransaction : " + st);    String txId=((ViaHeader)request.getHeader(ViaHeader.NAME)).getBranch();    this.serverTxTable.put(txId,st);    Response response=ProtocolObjects.messageFactory.createResponse(Response.TRYING,request);    ListeningPoint lp=sipProvider.getListeningPoint("udp");    int myPort=lp.getPort();    Address address=ProtocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    st.sendResponse(response);    Response ringingResponse=ProtocolObjects.messageFactory.createResponse(Response.RINGING,request);    ContactHeader contactHeader=ProtocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);    String toTag=new Integer((int)(Math.random() * 10000)).toString();    toHeader.setTag(toTag);    ringingResponse.addHeader(contactHeader);    st.sendResponse(ringingResponse);    Dialog dialog=st.getDialog();    dialog.setApplicationData(st);    new Timer().schedule(new MyTimerTask(requestEvent,st,toTag),100);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  return super.viewToModel(fx,fy,adjustAllocation(a),bias);}  }
class C{  public void testCertPathValidatorException16(){  CertPathValidatorException tE=new CertPathValidatorException();  assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  for (int i=0; i < msgs.length; i++) {    tE=new CertPathValidatorException(msgs[i]);    assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  }  Throwable cause=null;  tE=new CertPathValidatorException(cause);  assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  tE=new CertPathValidatorException(tCause);  assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  for (int i=0; i < msgs.length; i++) {    tE=new CertPathValidatorException(msgs[i],tCause);    assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  }  tE=new CertPathValidatorException(null,null,null,-1);  assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  myCertPath mcp=new myCertPath("X.509","");  CertPath cp=mcp.get("X.509");  for (int i=0; i < msgs.length; i++) {    try {      tE=new CertPathValidatorException(msgs[i],tCause,cp,-1);      assertNotNull("getIndex() must not return null",tE.getCertPath());      assertEquals("getIndex() must return ".concat(cp.toString()),tE.getCertPath(),cp);    } catch (    IndexOutOfBoundsException e) {      fail("Unexpected IndexOutOfBoundsException was thrown. " + e.getMessage());    }  }}  }
class C{  public static void cleanAllStations(Context context){  Uri uri=Station.CONTENT_URI;  Cursor cur=context.getContentResolver().query(uri,COLUMNS,null,null,null);  if (null != cur) {    try {      cur.moveToFirst();      while (!cur.isAfterLast()) {        uri=ContentUris.appendId(Station.CONTENT_URI.buildUpon(),cur.getInt(cur.getColumnIndex(Station._ID))).build();        context.getContentResolver().delete(uri,null,null);        cur.moveToNext();      }    }  finally {      cur.close();    }  }}  }
class C{  private void updateCronErrorMessages(Collection<LocalizableMessage> errorMessages){  setPrimaryValid(lCronMinute);  setPrimaryValid(lCronHour);  setPrimaryValid(lCronMonthDay);  setPrimaryValid(lCronMonth);  setPrimaryValid(lCronWeekDay);  String minute=cronMinute.getText().trim();  String hour=cronHour.getText().trim();  String monthDay=cronMonthDay.getText().trim();  String month=cronMonth.getText().trim();  String weekDay=cronWeekDay.getText().trim();  updateCronErrorMessages(minute,lCronMinute,ERR_CTRL_PANEL_NO_CRON_MINUTE_PROVIDED.get(),ERR_CTRL_PANEL_NOT_VALID_CRON_MINUTE_PROVIDED.get(),0,59,errorMessages);  updateCronErrorMessages(hour,lCronHour,ERR_CTRL_PANEL_NO_CRON_HOUR_PROVIDED.get(),ERR_CTRL_PANEL_NOT_VALID_CRON_HOUR_PROVIDED.get(),0,23,errorMessages);  updateCronErrorMessages(weekDay,lCronWeekDay,ERR_CTRL_PANEL_NO_CRON_WEEK_DAY_PROVIDED.get(),ERR_CTRL_PANEL_NOT_VALID_CRON_WEEK_DAY_PROVIDED.get(),0,6,errorMessages);  updateCronErrorMessages(monthDay,lCronMonthDay,ERR_CTRL_PANEL_NO_CRON_MONTH_DAY_PROVIDED.get(),ERR_CTRL_PANEL_NOT_VALID_CRON_MONTH_DAY_PROVIDED.get(),1,31,errorMessages);  updateCronErrorMessages(month,lCronMonth,ERR_CTRL_PANEL_NO_CRON_MONTH_PROVIDED.get(),ERR_CTRL_PANEL_NOT_VALID_CRON_MONTH_PROVIDED.get(),1,12,errorMessages);}  }
class C{  public void traverse(int pos,int top) throws org.xml.sax.SAXException {  while (DTM.NULL != pos) {    startNode(pos);    int nextNode=m_dtm.getFirstChild(pos);    while (DTM.NULL == nextNode) {      endNode(pos);      if ((DTM.NULL != top) && top == pos)       break;      nextNode=m_dtm.getNextSibling(pos);      if (DTM.NULL == nextNode) {        pos=m_dtm.getParent(pos);        if ((DTM.NULL == pos) || ((DTM.NULL != top) && (top == pos))) {          nextNode=DTM.NULL;          break;        }      }    }    pos=nextNode;  }}  }
class C{  void selectNewButton(boolean next){  if (!getButtonGroupInfo())   return;  if (srcFound) {    JRadioButton newSelectedBtn=null;    if (next) {      newSelectedBtn=(null == nextBtn) ? firstBtn : nextBtn;    } else {      newSelectedBtn=(null == previousBtn) ? lastBtn : previousBtn;    }    if (newSelectedBtn != null && (newSelectedBtn != activeBtn)) {      newSelectedBtn.requestFocusInWindow();      newSelectedBtn.setSelected(true);    }  }}  }
class C{  public static Iterator<Recipe> recipeIterator(){  return server.recipeIterator();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatareplacedataexceedslengthofarg.class,args);}  }
class C{  public long reportingRateInMillis(){  return timeunit().toMillis(period());}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setAutoIncrementPatch(true);  unchecked(null);}  }
class C{  public void assignThreadForSubscriber(@NonNull Object subscriber){  Looper looper=Looper.myLooper();  if (looper != null) {    mSubscribersDefaultThreads.put(new IdentityWeakReferenceKey<>(subscriber),looper != Looper.getMainLooper() ? new Handler(looper) : mUiThreadHandler);  } else {    mSubscribersDefaultThreads.remove(new IdentityWeakReferenceKey<>(subscriber));  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  ServerSiteModel model=(ServerSiteModel)getModel();  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  String name=(String)getDisplayFieldValue(TF_NAME);  name=name.trim();  if (name.length() > 0) {    try {      FQDNUrl test=new FQDNUrl(name);      if ((!test.isFullyQualified()) || (test.getPort().length() == 0) || (test.getURI().length() == 0)) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","serverconfig.create.site.invalid.url");        forwardTo();      } else {        model.createServer(name);        backTrail();        ServerSiteViewBean vb=(ServerSiteViewBean)getViewBean(ServerSiteViewBean.class);        passPgSessionMap(vb);        vb.forwardTo(getRequestContext());      }    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }catch (    MalformedURLException mue) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",mue.getMessage());      forwardTo();    }  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","serverconfig.create.site.missing.attributes");    forwardTo();  }}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  @Override public int countAll(){  Long count=(Long)finderCache.getResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY,this);  if (count == null) {    Session session=null;    try {      session=openSession();      Query q=session.createQuery(_SQL_COUNT_FOO);      count=(Long)q.uniqueResult();      finderCache.putResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY,count);    } catch (    Exception e) {      finderCache.removeResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public ReplServerStartDSMsg(int serverId,String serverURL,DN baseDN,int windowSize,ServerState serverState,long generationId,boolean sslEncryption,byte groupId,int degradedStatusThreshold,int weight,int connectedDSNumber){  super((short)-1,generationId);  this.serverId=serverId;  this.serverURL=serverURL;  this.baseDN=baseDN;  this.windowSize=windowSize;  this.serverState=serverState;  this.sslEncryption=sslEncryption;  this.groupId=groupId;  this.degradedStatusThreshold=degradedStatusThreshold;  this.weight=weight;  this.connectedDSNumber=connectedDSNumber;}  }
class C{  @NonNull public static Interpolator anticipate(float tension){  return new AnticipateInterpolator(tension);}  }
class C{  public CombinatorialNameGenerator build(final boolean usesMiddles) throws IllegalStateException {  checkState(usesMiddles);  return new CombinatorialNameGenerator(this,usesMiddles);}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public void testSocket_BasicStatusBeforeConnect() throws SocketException {  assertFalse(this.channel1.isConnected());  DatagramSocket s1=this.channel1.socket();  assertSocketBeforeConnect(s1);  DatagramSocket s2=this.channel1.socket();  assertSame(s1,s2);}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public void handleBtnGroupSearchRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  public boolean trace_width_is_inner_layer_dependent(){  if (trace_half_width_arr.length <= 3)   return false;  int first_inner_layer_no=1;  while (!blayer_structure.is_signal(first_inner_layer_no)) {    ++first_inner_layer_no;  }  if (first_inner_layer_no >= trace_half_width_arr.length - 1) {    return false;  }  int compare_width=trace_half_width_arr[first_inner_layer_no];  for (int index=first_inner_layer_no + 1; index < trace_half_width_arr.length - 1; ++index) {    if (!blayer_structure.is_signal(index))     continue;    if (trace_half_width_arr[index] != compare_width)     return true;  }  return false;}  }
class C{  public void change_design_bounds(ShapeTileBox p_new_design_bounds){  if (p_new_design_bounds.equals(coordinate_transform.design_box))   return;  Dimension screen_bounds=coordinate_transform.screen_bounds;  coordinate_transform=new GdiCoordinateTransform(p_new_design_bounds,screen_bounds);}  }
class C{  public static <T>MenuResult<T> success(){  return success(Collections.<T>emptySet());}  }
class C{  public boolean validate(String domain){  StringTokenizer tok;  tok=new StringTokenizer(domain,".");  if (tok.countTokens() <= 1) {    return false;  }  while (tok.hasMoreTokens()) {    if (!isValidDomainPart(tok.nextToken())) {      return false;    }  }  return true;}  }
class C{  public DateTimeException(String message){  super(message);}  }
class C{  public StyledParagraph(AttributedCharacterIterator aci,char[] chars){  int start=aci.getBeginIndex();  int end=aci.getEndIndex();  length=end - start;  int index=start;  aci.first();  do {    final int nextRunStart=aci.getRunLimit();    final int localIndex=index - start;    Map<? extends Attribute,?> attributes=aci.getAttributes();    attributes=addInputMethodAttrs(attributes);    Decoration d=Decoration.getDecoration(attributes);    addDecoration(d,localIndex);    Object f=getGraphicOrFont(attributes);    if (f == null) {      addFonts(chars,attributes,localIndex,nextRunStart - start);    } else {      addFont(f,localIndex);    }    aci.setIndex(nextRunStart);    index=nextRunStart;  } while (index < end);  if (decorations != null) {    decorationStarts=addToVector(this,length,decorations,decorationStarts);  }  if (fonts != null) {    fontStarts=addToVector(this,length,fonts,fontStarts);  }}  }
class C{  private void ensureUpdatePermitted(Context context,JsonValue content,SSOToken target) throws SSOException, BadRequestException, DelegationException, ForbiddenException, IdRepoException {  SSOToken caller=context.asContext(SSOTokenContext.class).getCallerSSOToken();  String realm=getTargetRealm(target);  try {    if (content == null || content.isNull() || content.asMap(String.class).size() == 0) {      LOGGER.warning("User {} requested with an empty values.",caller.getPrincipal());      throw new BadRequestException();    }  } catch (  JsonValueException e) {    LOGGER.warning("User {} requested with no property value pairs",caller.getPrincipal());    throw new BadRequestException();  }  Map<String,String> entrySet=content.asMap(String.class);  if (!sessionPropertyWhitelist.getAllListedProperties(realm).equals(entrySet.keySet()) || !sessionPropertyWhitelist.isPropertyMapSettable(caller,entrySet)) {    LOGGER.warning("User {} requested property/ies {} to set on {} which was not whitelisted.",caller.getPrincipal(),target.getPrincipal(),entrySet.toString());    throw new ForbiddenException();  }}  }
class C{  public FrameBodyTDRL(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static void removeDelegationCondition(String policyName,String attributeName,Map conditionNameMap){  try {    PolicyManager pm=new PolicyManager(ssoToken,HIDDEN_REALM);    Policy policy=pm.getPolicy(policyName);    for (Iterator i=conditionNameMap.keySet().iterator(); i.hasNext(); ) {      String condName=(String)i.next();      Condition cond=policy.getCondition(condName);      if (cond != null) {        Set removeSet=(HashSet)conditionNameMap.get(condName);        Map orig=cond.getProperties();        for (Iterator j=removeSet.iterator(); j.hasNext(); ) {          String defaultValue=(String)j.next();          Set origValues=(Set)orig.get(attributeName);          if (origValues != null) {            origValues.removeAll(removeSet);          }        }        cond.setProperties(orig);        policy.replaceCondition(condName,cond);      }    }    pm.replacePolicy(policy);  } catch (  PolicyException e) {    debug.error("UpgradeUtils.removeDelegationCondition",e);  }catch (  SSOException e) {    debug.error("UpgradeUtils.removeDelegationCondition",e);  }}  }
class C{  public static void createSingleNode(String key,String val,StringBuffer xml) throws ParserConfigurationException {  DocumentBuilder db=XMLUtils.getSafeDocumentBuilder(false);  Document doc=db.newDocument();  Element item=doc.createElement(key);  item.appendChild(doc.createTextNode(val));  xml.append(item.toString());}  }
class C{  protected void parseContent(Element element) throws SAML2Exception {  if (element == null) {    return;  }  NodeList nList=element.getChildNodes();  if ((nList != null) && (nList.getLength() > 0)) {    for (int i=0; i < nList.getLength(); i++) {      Node childNode=nList.item(i);      if (childNode.getLocalName() != null) {        getContent().add(childNode);      }    }  }  if (content == null) {    content=new ArrayList();    content.add(XMLUtils.getElementValue(element));  }}  }
class C{  public SequencedEvent(AWTEvent nested){  super(nested.getSource(),ID);  this.nested=nested;  SunToolkit.setSystemGenerated(nested);synchronized (SequencedEvent.class) {    list.add(this);  }}  }
class C{  private static void buildModuleInstanceTable(SSOToken token,String realm){  try {    if (DEBUG.messageEnabled()) {      DEBUG.message("AMAuthenticationManager." + "buildModuleInstanceTable: realm = " + realm);    }    for (    String service : MODULE_SERVICE_NAMES.values()) {      buildModuleInstanceForService(realm,service);    }  } catch (  Exception e) {    if (DEBUG.messageEnabled()) {      DEBUG.message("building module instance table error",e);    }  }}  }
class C{  public ServiceSchemaModificationWrapper(String serviceName,String schemaName){  this(serviceName,schemaName,new HashSet<AttributeSchemaImpl>());}  }
class C{  public void makeNothingCurrent(){  if (!EGL14.eglMakeCurrent(mEGLDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT)) {    throw new RuntimeException("eglMakeCurrent failed");  }}  }
class C{  public void addFactoryCreate(String pattern,ObjectCreationFactory creationFactory,boolean ignoreCreateExceptions){  creationFactory.setDigester(this);  addRule(pattern,new FactoryCreateRule(creationFactory,ignoreCreateExceptions));}  }
class C{  public void removeLocalSessionToken(String requestID){  FSUtils.debug.message("FSSessionManager.removeLocalSessionToken: Called");  idLocalSessionTokenMap.remove(requestID);  if ((agent != null) && agent.isRunning() && (idffSvc != null)) {    idffSvc.setIdLocalSessToken((long)idLocalSessionTokenMap.size());  }}  }
class C{  static void usePasswordExpiredResponseControl(Connection connection){  if (isSupported(PasswordExpiredResponseControl.OID)) {    final String dn="uid=bjensen,ou=People,dc=example,dc=com";    final char[] pwd="hifalutin".toCharArray();    try {      connection.bind(dn,pwd);    } catch (    final LdapException e) {      final Result result=e.getResult();      try {        final PasswordExpiredResponseControl control=result.getControl(PasswordExpiredResponseControl.DECODER,new DecodeOptions());        if (control != null && control.hasValue()) {          System.out.println("Password expired for " + dn);        }      } catch (      final DecodeException de) {        System.err.println(de.getMessage());        System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());      }    }  } else {    System.err.println("PasswordExpiredResponseControl not supported.");  }}  }
class C{  protected static String URLencodedSunQueryParamsString(String queryParams,String encoding){  StringBuilder sb=new StringBuilder(400);  StringTokenizer st=new StringTokenizer(queryParams,"&");  while (st.hasMoreTokens()) {    String str=st.nextToken();    if (str.indexOf("=") != -1) {      int index=str.indexOf("=");      String parameter=str.substring(0,index);      String value=str.substring(index + 1);      if (parameter.equalsIgnoreCase("realm") || parameter.equalsIgnoreCase("org") || parameter.equalsIgnoreCase("module")) {        value=getCharDecodedField(value,encoding);      }      sb.append(URLEncDec.encode(parameter));      sb.append("=");      sb.append(URLEncDec.encode(value));      if (st.hasMoreTokens()) {        sb.append("&");      }    }  }  return sb.toString();}  }
class C{  public static ModifyDNRequest copyOfModifyDNRequest(final ModifyDNRequest request){  return new ModifyDNRequestImpl(request);}  }
class C{  public void updateDisconnect(){  connectionsClosed.getAndIncrement();}  }
class C{  public PriorityQueue(PriorityQueue<? extends E> c){  getFromPriorityQueue(c);}  }
class C{  public void whitespaceChars(int low,int hi){  if (low < 0)   low=0;  if (hi >= ctype.length)   hi=ctype.length - 1;  while (low <= hi)   ctype[low++]=CT_WHITESPACE;}  }
class C{  public final void testGetPublicExponent(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPublicExponent()));}  }
class C{  void drawIcon(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);  int x=ax + gap;  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());  img.paintIcon(c,g,x,y);}  }
class C{  private float spacing(MotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return (float)Math.sqrt((double)x * x + y * y);}  }
class C{  public void removeChargingCollectionFunctionAddress(String ccfAddress) throws ParseException {  if (ccfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setChargingCollectionFunctionAddress(), the ccfAddress parameter is null.");  if (!this.delete(ccfAddress,ParameterNamesIms.CCF)) {    throw new ParseException("CCF Address Not Removed",0);  }}  }
class C{  synchronized void insertStyle(Style style,int specificity){  AttributeSet[] attrs=getAttributes();  int maxCounter=attrs.length;  int counter=0;  for (; counter < extendedIndex; counter++) {    if (specificity > getSpecificity(((Style)attrs[counter]).getName())) {      break;    }  }  insertAttributeSetAt(style,counter);  extendedIndex++;}  }
class C{  @Deprecated public boolean requestDefaultFocus(){  Container nearestRoot=(isFocusCycleRoot()) ? this : getFocusCycleRootAncestor();  if (nearestRoot == null) {    return false;  }  Component comp=nearestRoot.getFocusTraversalPolicy().getDefaultComponent(nearestRoot);  if (comp != null) {    comp.requestFocus();    return true;  } else {    return false;  }}  }
class C{  public MoveNextLineAndShowTextOperator(TextMoveNextLineOperator textMoveNextLine,ShowTextOperator showText){  this.textMoveNextLine=textMoveNextLine;  this.showText=showText;}  }
class C{  boolean isAlive(){  return program.isResumable();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportClientChallengeElement createMustSupportClientChallengeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportClientChallengeElementImpl();}  }
class C{  public String toXMLString() throws XACMLException {  return this.toXMLString(true,false);}  }
class C{  private void initializeBackupID(){  SimpleDateFormat dateFormat=new SimpleDateFormat(ServerConstants.DATE_FORMAT_COMPACT_LOCAL_TIME);  final String id=dateFormat.format(new Date());  backupID.setText(id);}  }
class C{  public static boolean isEncodableAsKanji(String text){  if (text == null)   throw new NullPointerException();  for (int i=0; i < text.length(); i++) {    if (UNICODE_TO_QR_KANJI[text.charAt(i)] == -1)     return false;  }  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attr;  Element element;  Element ownerElement;  String ownerElementName;  NodeList elementList;  NamedNodeMap attributes;  String nullNS=null;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=(Element)elementList.item(1);  attributes=element.getAttributes();  attr=(Attr)attributes.getNamedItemNS(nullNS,"defaultAttr");  ownerElement=attr.getOwnerElement();  ownerElementName=ownerElement.getNodeName();  assertEquals("attrgetownerelement01","emp:employee",ownerElementName);}  }
class C{  public FrameBodyTEXT(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public InternalSearchOperation(ClientConnection internalConnection,long operationID,int messageID,SearchRequest request){  this(internalConnection,operationID,messageID,request,null);}  }
class C{  private void processAllWilds(final String rule){  final String[] s=rule.split("\\.",-1);  if (s.length == IN4ADDRSZ) {    for (int i=0; i < IN4ADDRSZ; i++) {      wildCard.set(i);    }  }  hostName=rule.split("\\.",-1);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnResponseEnvelopeType createAuthnResponseEnvelopeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnResponseEnvelopeTypeImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrsetvalue2.class,args);}  }
class C{  public String unescape(String s,LineCol lineCol) throws SyntaxException {  char[] chars=s.toCharArray();  char[] preResult=new char[chars.length];  int j=0;  for (int i=0; i < chars.length; ++i, ++j) {    char c=chars[i];    if (c == '\\') {      char anotherChar=chars[++i];      if (anotherChar == 'n')       preResult[j]='\n'; else       if (anotherChar == 't')       preResult[j]='\t'; else       if (anotherChar == 'r')       preResult[j]='\r'; else       if (anotherChar == '\'')       preResult[j]='\''; else       if (anotherChar == '\\')       preResult[j]='\\'; else       if (anotherChar == '\"')       preResult[j]='\"'; else {        err.SyntaxException("cannot unescape \\" + anotherChar,lineCol);        return null;      }    } else {      preResult[j]=c;    }  }  char[] result=new char[j];  System.arraycopy(preResult,0,result,0,j);  return new String(result);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatingAuthorityElement createAuthenticatingAuthorityElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatingAuthorityElementImpl();}  }
class C{  public boolean isAffiliate(String protocol,String realm,String name) throws AMConsoleException {  boolean isAffiliate=false;  com.sun.identity.liberty.ws.meta.jaxb.AffiliationDescriptorType idff_ad=null;  com.sun.identity.saml2.jaxb.metadata.AffiliationDescriptorType samlv2_sd=null;  try {    if (protocol.equals(IDFF)) {      IDFFMetaManager idffManager=new IDFFMetaManager(null);      idff_ad=(com.sun.identity.liberty.ws.meta.jaxb.AffiliationDescriptorType)idffManager.getAffiliationDescriptor(realm,name);    } else     if (protocol.equals(SAMLV2)) {      SAML2MetaManager samlManager=new SAML2MetaManager();      samlv2_sd=(com.sun.identity.saml2.jaxb.metadata.AffiliationDescriptorType)samlManager.getAffiliationDescriptor(realm,name);    }    if (idff_ad != null || samlv2_sd != null) {      isAffiliate=true;    }  } catch (  IDFFMetaException e) {    if (debug.warningEnabled()) {      debug.warning("EntityModelImpl.isAffiliate",e);    }    throw new AMConsoleException(getErrorString(e));  }catch (  SAML2MetaException s) {    if (debug.warningEnabled()) {      debug.warning("EntityModel.isAffiliate() - " + "Couldn't get SAMLMetaManager");    }    throw new AMConsoleException(getErrorString(s));  }  return isAffiliate;}  }
class C{  public static void appendProperties(XMPMeta source,XMPMeta dest,boolean doAllProperties,boolean replaceOldValues) throws XMPException {  appendProperties(source,dest,doAllProperties,replaceOldValues,false);}  }
class C{  protected void undeployDir(File dir){  String files[]=dir.list();  if (files == null) {    files=new String[0];  }  for (int i=0; i < files.length; i++) {    File file=new File(dir,files[i]);    if (file.isDirectory()) {      undeployDir(file);    } else {      if (!file.delete()) {        log.error(sm.getString("farmWarDeployer.deleteFail",file));      }    }  }  if (!dir.delete()) {    log.error(sm.getString("farmWarDeployer.deleteFail",dir));  }}  }
class C{  protected Digester createStartDigester(){  long t1=System.currentTimeMillis();  Digester digester=new Digester();  digester.setValidating(false);  digester.setRulesValidation(true);  HashMap<Class<?>,List<String>> fakeAttributes=new HashMap<>();  ArrayList<String> attrs=new ArrayList<>();  attrs.add("className");  fakeAttributes.put(Object.class,attrs);  digester.setFakeAttributes(fakeAttributes);  digester.setUseContextClassLoader(true);  digester.addObjectCreate("Server","org.apache.catalina.core.StandardServer","className");  digester.addSetProperties("Server");  digester.addSetNext("Server","setServer","org.apache.catalina.Server");  digester.addObjectCreate("Server/GlobalNamingResources","org.apache.catalina.deploy.NamingResourcesImpl");  digester.addSetProperties("Server/GlobalNamingResources");  digester.addSetNext("Server/GlobalNamingResources","setGlobalNamingResources","org.apache.catalina.deploy.NamingResourcesImpl");  digester.addObjectCreate("Server/Listener",null,"className");  digester.addSetProperties("Server/Listener");  digester.addSetNext("Server/Listener","addLifecycleListener","org.apache.catalina.LifecycleListener");  digester.addObjectCreate("Server/Service","org.apache.catalina.core.StandardService","className");  digester.addSetProperties("Server/Service");  digester.addSetNext("Server/Service","addService","org.apache.catalina.Service");  digester.addObjectCreate("Server/Service/Listener",null,"className");  digester.addSetProperties("Server/Service/Listener");  digester.addSetNext("Server/Service/Listener","addLifecycleListener","org.apache.catalina.LifecycleListener");  digester.addObjectCreate("Server/Service/Executor","org.apache.catalina.core.StandardThreadExecutor","className");  digester.addSetProperties("Server/Service/Executor");  digester.addSetNext("Server/Service/Executor","addExecutor","org.apache.catalina.Executor");  digester.addRule("Server/Service/Connector",new ConnectorCreateRule());  digester.addRule("Server/Service/Connector",new SetAllPropertiesRule(new String[]{"executor","sslImplementationName"}));  digester.addSetNext("Server/Service/Connector","addConnector","org.apache.catalina.connector.Connector");  digester.addObjectCreate("Server/Service/Connector/SSLHostConfig","org.apache.tomcat.util.net.SSLHostConfig");  digester.addSetProperties("Server/Service/Connector/SSLHostConfig");  digester.addSetNext("Server/Service/Connector/SSLHostConfig","addSslHostConfig","org.apache.tomcat.util.net.SSLHostConfig");  digester.addRule("Server/Service/Connector/SSLHostConfig/Certificate",new CertificateCreateRule());  digester.addRule("Server/Service/Connector/SSLHostConfig/Certificate",new SetAllPropertiesRule(new String[]{"type"}));  digester.addSetNext("Server/Service/Connector/SSLHostConfig/Certificate","addCertificate","org.apache.tomcat.util.net.SSLHostConfigCertificate");  digester.addObjectCreate("Server/Service/Connector/Listener",null,"className");  digester.addSetProperties("Server/Service/Connector/Listener");  digester.addSetNext("Server/Service/Connector/Listener","addLifecycleListener","org.apache.catalina.LifecycleListener");  digester.addObjectCreate("Server/Service/Connector/UpgradeProtocol",null,"className");  digester.addSetProperties("Server/Service/Connector/UpgradeProtocol");  digester.addSetNext("Server/Service/Connector/UpgradeProtocol","addUpgradeProtocol","org.apache.coyote.UpgradeProtocol");  digester.addRuleSet(new NamingRuleSet("Server/GlobalNamingResources/"));  digester.addRuleSet(new EngineRuleSet("Server/Service/"));  digester.addRuleSet(new HostRuleSet("Server/Service/Engine/"));  digester.addRuleSet(new ContextRuleSet("Server/Service/Engine/Host/"));  addClusterRuleSet(digester,"Server/Service/Engine/Host/Cluster/");  digester.addRuleSet(new NamingRuleSet("Server/Service/Engine/Host/Context/"));  digester.addRule("Server/Service/Engine",new SetParentClassLoaderRule(parentClassLoader));  addClusterRuleSet(digester,"Server/Service/Engine/Cluster/");  long t2=System.currentTimeMillis();  if (log.isDebugEnabled()) {    log.debug("Digester for server.xml created " + (t2 - t1));  }  return (digester);}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required,boolean has_order,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required,required);  this.m_order=order;  this.m_multiAllowed=multiAllowed;  this.m_isOrdered=has_order;}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException, HeadlessException {  if (GraphicsEnvironment.isHeadless()) {    throw new HeadlessException();  }  s.defaultReadObject();}  }
class C{  public void updateWriteTime(long time){  if (time > 0 && time < writeTimeMin) {    writeTimeMin=time;  }  if (time > writeTimeMax) {    writeTimeMax=time;  }  writeCumulativeCount+=time;  writeTimeAverage=writeCumulativeCount / totalWrites;}  }
class C{  public void recycle(){  encoder.reset();  leftovers.position(0);}  }
class C{  public String toASCIIString(){  StringBuilder result=new StringBuilder();  ASCII_ONLY.appendEncoded(result,toString());  return result.toString();}  }
class C{  public JTree(Object[] value){  this(createTreeModel(value));  this.setRootVisible(false);  this.setShowsRootHandles(true);  expandRoot();}  }
class C{  public AnnotationFormatError(String message,Throwable cause){  super(message,cause);}  }
class C{  private void repositionCursor(int startLiteralCount,int end,int direction){  int endLiteralCount=getLiteralCountTo(end);  if (endLiteralCount != end) {    end-=startLiteralCount;    for (int counter=0; counter < end; counter++) {      if (isLiteral(counter)) {        end++;      }    }  }  repositionCursor(end,1);}  }
class C{  public XMLSignatureException(String message){  super(message);}  }
class C{  public boolean equals(Object other){  return other != null && (other instanceof PrincipalTokenRestriction) && this.dn.equals(((PrincipalTokenRestriction)other).dn);}  }
class C{  private E firstDataItem(){  for (Node p=head; p != null; p=succ(p)) {    Object item=p.item;    if (p.isData) {      if (item != null && item != p)       return LinkedTransferQueue.<E>cast(item);    } else     if (item == null)     return null;  }  return null;}  }
class C{  public Process executeAsync(final CommandLine command,ExecuteResultHandler handler) throws IOException {  return executeAsync(command,null,handler);}  }
class C{  @Override public void start(){  JsonObject config=config();  init(config);  vertx.setPeriodic(period,null);}  }
class C{  public static IdentityDetails jsonValueToIdentityDetails(final String objectType,final JsonValue jVal,final String realm){  IdentityDetails identity=new IdentityDetails();  Map<String,Set<String>> identityAttrList=new HashMap<>();  try {    identity.setType(objectType);    identity.setRealm(realm);    identity.setName(jVal.get(USERNAME).asString());    if (AGENT_TYPE.equals(objectType)) {      jVal.remove(USERNAME);      jVal.remove(REALM);      jVal.remove(UNIVERSAL_ID);    }    try {      for (      String s : jVal.keys()) {        identityAttrList.put(s,identityAttributeJsonToSet(jVal.get(s)));      }    } catch (    Exception e) {      debug.error("IdentityResource.jsonValueToIdentityDetails() :: Cannot Traverse JsonValue. ",e);    }    identity.setAttributes(asAttributeArray(identityAttrList));  } catch (  final Exception e) {    debug.error("IdentityResource.jsonValueToIdentityDetails() :: Cannot convert JsonValue to IdentityDetails" + ".",e);  }  return identity;}  }
class C{  public void testConstructorStringException2(){  String value="   9234853876401";  int radix=10;  try {    new BigInteger(value,radix);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public Status createStatus() throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS);  if (object == null) {    return new StatusImpl();  } else {    return (Status)object;  }}  }
class C{  public int countUndos(UndoOwner[] owners){  if (owners == null) {    return mUndos.size();  }  int count=0;  int i=0;  while ((i=findNextState(mUndos,owners,i)) >= 0) {    count++;    i++;  }  return count;}  }
class C{  public void drawHeader(RecyclerView recyclerView,Canvas canvas,View header,Rect offset){  canvas.save();  if (recyclerView.getLayoutManager().getClipToPadding()) {    initClipRectForHeader(mTempRect,recyclerView,header);    canvas.clipRect(mTempRect);  }  canvas.translate(offset.left,offset.top);  header.draw(canvas);  canvas.restore();}  }
class C{  public final void append(StringBuffer value){  if (value == null)   return;  int strlen=value.length();  if (0 == strlen)   return;  int copyfrom=0;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    value.getChars(copyfrom,copyfrom + available,m_array[m_lastChunk],m_firstFree);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapreturnattrnode.class,args);}  }
class C{  public void testPSpecified(){  try {    new PSource.PSpecified(null);    fail("NullPointerException should be thrown in the case of " + "null p array.");  } catch (  NullPointerException e) {  }  assertEquals("The PSource.PSpecified DEFAULT value should be byte[0]",0,PSource.PSpecified.DEFAULT.getValue().length);  byte[] p=new byte[]{1,2,3,4,5};  PSource.PSpecified ps=new PSource.PSpecified(p);  p[0]++;  assertFalse("The change of p specified in the constructor " + "should not cause the change of internal array.",p[0] == ps.getValue()[0]);}  }
class C{  public Rdn(Rdn rdn){  entries=new ArrayList<>(rdn.entries.size());  entries.addAll(rdn.entries);}  }
class C{  public static int readUBEInt16(ByteBuffer b){  int result=0;  result+=readUInt8(b) << 8;  result+=readUInt8(b);  return result;}  }
class C{  public int append(ByteBuffer data,int len,boolean count){  buffer.append(data,len);  int pkgCnt=-1;  if (count)   pkgCnt=buffer.countPackages();  return pkgCnt;}  }
class C{  @Override public void removeHandshakeCompletedListener(HandshakeCompletedListener listener){  if (listener == null) {    throw new IllegalArgumentException("Provided listener is null");  }  if (listeners == null) {    throw new IllegalArgumentException("Provided listener is not registered");  }  if (!listeners.remove(listener)) {    throw new IllegalArgumentException("Provided listener is not registered");  }}  }
class C{  public int size(){  return map.size();}  }
class C{  public boolean canCreateNewResource(String realmName,String svcTypeName){  boolean can=false;  try {    PolicyManager mgr=getPolicyManager(realmName);    can=mgr.canCreateNewResource(svcTypeName);  } catch (  AMConsoleException e) {    debug.warning("PolicyModelImpl.canCreateNewResource",e);  }  return can;}  }
class C{  public PolicyError(short __reason){  super();  reason=__reason;}  }
class C{  public LDAPConnectionFactory(final String host,final int port,final Options options){  Reject.ifNull(host,options);  this.connectTimeoutMS=options.get(CONNECT_TIMEOUT).to(TimeUnit.MILLISECONDS);  Reject.ifTrue(connectTimeoutMS < 0,"connect timeout must be >= 0");  Reject.ifTrue(options.get(REQUEST_TIMEOUT).getValue() < 0,"request timeout must be >= 0");  this.heartBeatEnabled=options.get(HEARTBEAT_ENABLED);  this.heartBeatintervalMS=options.get(HEARTBEAT_INTERVAL).to(TimeUnit.MILLISECONDS);  this.heartBeatTimeoutMS=options.get(HEARTBEAT_TIMEOUT).to(TimeUnit.MILLISECONDS);  this.heartBeatDelayMS=heartBeatintervalMS / 2;  this.heartBeatRequest=options.get(HEARTBEAT_SEARCH_REQUEST);  if (heartBeatEnabled) {    Reject.ifTrue(heartBeatintervalMS <= 0,"heart-beat interval must be positive");    Reject.ifTrue(heartBeatTimeoutMS <= 0,"heart-beat timeout must be positive");  }  this.provider=getTransportProvider(options);  this.scheduler=DEFAULT_SCHEDULER.acquireIfNull(options.get(HEARTBEAT_SCHEDULER));  this.impl=provider.getLDAPConnectionFactory(host,port,options);  this.initialBindRequest=options.get(AUTHN_BIND_REQUEST);  this.sslContext=options.get(SSL_CONTEXT);  this.sslUseStartTLS=options.get(SSL_USE_STARTTLS);  this.sslEnabledProtocols=options.get(SSL_ENABLED_PROTOCOLS);  this.sslEnabledCipherSuites=options.get(SSL_ENABLED_CIPHER_SUITES);  this.options=Options.copyOf(options);}  }
class C{  public void processedAccounttLockout(Long eventTime,String userDN) throws AMAuthCallBackException {  Map eventParams=new HashMap();  eventParams.put(AMAuthCallBack.TIME_KEY,eventTime);  eventParams.put(AMAuthCallBack.REALM_KEY,theRealm);  eventParams.put(AMAuthCallBack.USER_KEY,userDN);  processedEvent(AMAuthCallBack.ACCOUNT_LOCKOUT,eventParams);}  }
class C{  private synchronized void requestToKillLogcatRunnableThread(){  mShouldLogcatRunnableBeKilled=true;}  }
class C{  public HelloRequest(HandshakeIODataStream in,int length) throws IOException {  if (length != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect HelloRequest");  }}  }
class C{  public SubjectNoneAddViewBean(){  super("SubjectNoneAdd",DEFAULT_DISPLAY_URL);}  }
class C{  public static Bitmap resizeBitmap(final Bitmap input,int destWidth,int destHeight) throws OutOfMemoryError {  return resizeBitmap(input,destWidth,destHeight,0);}  }
class C{  static public void assertEquals(String message,char expected,char actual){  assertEquals(message,new Character(expected),new Character(actual));}  }
class C{  public void test_ConstructorLAttributedCharacterIteratorII(){  try {    new AttributedString(new testAttributedCharacterIterator(),0,0);  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }  try {    new AttributedString(new testAttributedCharacterIterator(),-1,0);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException e) {  }  try {    new AttributedString(new testAttributedCharacterIterator(),0,-1);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public boolean isValidID3v2FrameIdentifier(String identifier){  Matcher m=ID3v24Frame.validFrameIdentifier.matcher(identifier);  return m.matches();}  }
class C{  private void addJobGroupName(String groupName) throws JobPersistenceException, ResourceException {  addRepoListName(groupName,JOB_GROUP_NAMES_RESOURCE_PATH,"names");}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  setPageSessionAttribute(getTrackingTabIDName(),AMAdminConstants.FED_TAB_ID);  setPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID,getTrackingTabIDName());  CreateMetaDataModel model=(CreateMetaDataModel)getModel();  try {    String realm=getDisplayFieldStringValue("singleChoiceRealm");    String entityId=getDisplayFieldStringValue("tfEntityId");    if ((realm == null) || (realm.trim().length() == 0)) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("samlv2.create.provider.missing.realm"));      forwardTo();    } else     if ((entityId == null) || (entityId.trim().length() == 0)) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("samlv2.create.provider.missing.entityId"));      forwardTo();    } else {      Map map=getWorkflowParamMap(realm,model);      if (protocol.equals(PROTO_SAMLv2)) {        model.createSAMLv2Provider(realm,entityId,map);      } else       if (protocol.equals(PROTO_IDFF)) {        model.createIDFFProvider(realm,entityId,map);      } else {        model.createWSFedProvider(realm,entityId,map);      }      backTrail();      FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  protected void fill_list(){  LibPadstacks padstacks=board_frame.board_panel.itera_board.get_routing_board().brd_library.padstacks;  LibPadstack[] sorted_arr=new LibPadstack[padstacks.count()];  for (int i=0; i < sorted_arr.length; ++i) {    sorted_arr[i]=padstacks.get(i + 1);  }  java.util.Arrays.sort(sorted_arr);  for (int i=0; i < sorted_arr.length; ++i) {    this.add_to_list(sorted_arr[i]);  }  this.gui_list.setVisibleRowCount(Math.min(padstacks.count(),DEFAULT_TABLE_SIZE));}  }
class C{  public void createAuthConfiguration(String name) throws AMConsoleException {  if ((name == null) || (name.length() == 0)) {    throw new AMConsoleException(getLocalizedString("authentication.config.missing.name"));  }  String[] params={currentRealm,name};  logEvent("ATTEMPT_CREATE_AUTH_CONFIG",params);  String errorMsg=null;  try {    AMAuthConfigUtils.createNamedConfig(name,0,new HashMap(),currentRealm,getUserSSOToken());    logEvent("SUCCEED_CREATE_AUTH_CONFIG",params);  } catch (  SMSException e) {    errorMsg=getErrorString(e);    String[] paramsEx={currentRealm,name,errorMsg};    logEvent("SMS_EXCEPTION_CREATE_AUTH_CONFIG",paramsEx);    debug.warning("problem creating auth instance",e);  }catch (  SSOException e) {    errorMsg=getErrorString(e);    String[] paramsEx={currentRealm,name,errorMsg};    logEvent("SSO_EXCEPTION_CREATE_AUTH_CONFIG",paramsEx);    debug.warning("problem creating auth instance",e);  }catch (  AMConfigurationException e) {    errorMsg=getErrorString(e);    String[] paramsEx={currentRealm,name,errorMsg};    logEvent("AUTH_CONFIGURATION_EXCEPTION_CREATE_AUTH_CONFIG",paramsEx);    debug.warning("problem creating auth instance",e);  }  if (errorMsg != null) {    throw new AMConsoleException(errorMsg);  }}  }
class C{  public static Class<?> load(ClassNode cn){  ClassWriter cw=new ClassWriter(0);  cn.accept(new VisitorImpl(cw));  return new ClassDefiner(ClassLoader.getSystemClassLoader()).get(cn.name.replace("/","."),cw.toByteArray());}  }
class C{  private boolean has_corner_loopt(){  if (!is_valid())   return true;  PlaPoint first_corner=corner_first();  for (int index=1; index < corner_count(); ++index) {    if (corner(index).equals(first_corner))     continue;    return false;  }  return true;}  }
class C{  @Override public void writeNewStateDescription(ParcelFileDescriptor newState){  writeJournal(newState,getCurrentStateJournal());}  }
class C{  public static void validateTypes(Map<CoreTokenField,Object> types) throws CoreTokenException {  for (  Map.Entry<CoreTokenField,Object> entry : types.entrySet()) {    validateType(entry.getKey(),entry.getValue());  }}  }
class C{  public static boolean isStatic(final Field field){  return Modifier.isStatic(field.getModifiers());}  }
class C{  @Override public void close(){synchronized (lock) {    if (isOpen()) {      str=null;    }  }}  }
class C{  private static Collection<String> parseList(final String value,final char delimiter){  final StringTokenizer tokenizer=new StringTokenizer(value,Character.toString(delimiter));  final Collection<String> tokens=new ArrayList<>(tokenizer.countTokens());  while (tokenizer.hasMoreTokens()) {    tokens.add(tokenizer.nextToken());  }  return tokens;}  }
class C{  protected boolean isOCPropertiesMayHaveChanged(){  return ocProperties != null;}  }
class C{  public boolean isEmpty(){  return extOrdering.isEmpty();}  }
class C{  protected void parseDOMChileElements(ListIterator iter) throws SAML2Exception {  super.parseDOMChileElements(iter);  ProtocolFactory pFactory=ProtocolFactory.getInstance();  if (iter.hasNext()) {    Element childElement=(Element)iter.next();    String localName=childElement.getLocalName();    if (SAML2Constants.REQ_AUTHN_CONTEXT.equals(localName)) {      requestedAuthnContext=pFactory.createRequestedAuthnContext(childElement);    } else {      iter.previous();    }  }}  }
class C{  public final void testGetTrailerField(){  PSSParameterSpec pssps=new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,1);  assertEquals(1,pssps.getTrailerField());}  }
class C{  @Deprecated protected void drawCheckBox(PdfCanvas canvas,float width,float height,int fontSize,boolean on){  drawCheckBox(canvas,width,height,(float)fontSize,on);}  }
class C{  public static boolean isEmpty(Collection<?> collection){  return collection == null || collection.isEmpty();}  }
class C{  public boolean isOwnerWritable(){  return is(encodedPermission,OWNER_WRITABLE);}  }
class C{  @DataProvider(name="createManagedObjectExceptions") public Object[][] createManagedObjectExceptions(){  return new Object[][]{{ResultCode.PROTOCOL_ERROR,LdapException.class,ResultCode.PROTOCOL_ERROR},{ResultCode.UNAVAILABLE,LdapException.class,ResultCode.UNAVAILABLE},{ResultCode.ENTRY_ALREADY_EXISTS,ManagedObjectAlreadyExistsException.class,null},{ResultCode.INSUFFICIENT_ACCESS_RIGHTS,LdapException.class,ResultCode.INSUFFICIENT_ACCESS_RIGHTS},{ResultCode.UNWILLING_TO_PERFORM,OperationRejectedException.class,null}};}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  if (isOptionSet("testmatch")) {    if (!getStringOptionValue("mandatory").equals("mandatory") || !getStringOptionValue("optional").equals("optional")) {      throw new CLIException("option values does not matched.",ExitCodes.INVALID_OPTION_VALUE);    }  }}  }
class C{  public boolean isPointValue(){  return unitType == POINT;}  }
class C{  protected BCSChild createBCSChild(Object targetChild,Object peer){  return new BCSSChild(targetChild,peer);}  }
class C{  public synchronized boolean isEmpty(){  return (timerTable.isEmpty());}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,null,lines,lineEnding,false);}  }
class C{  protected final DTMAxisIterator resetPosition(){  _position=0;  return this;}  }
class C{  private String parseAttributeValue(String qName,String watch,boolean ignoreEL) throws JasperException {  boolean quoteAttributeEL=ctxt.getOptions().getQuoteAttributeEL();  Mark start=reader.mark();  Mark stop=reader.skipUntilIgnoreEsc(watch,ignoreEL || quoteAttributeEL);  if (stop == null) {    err.jspError(start,"jsp.error.attribute.unterminated",qName);  }  String ret=null;  try {    char quote=watch.charAt(watch.length() - 1);    boolean isElIgnored=pageInfo.isELIgnored() || watch.length() > 1;    ret=AttributeParser.getUnquoted(reader.getText(start,stop),quote,isElIgnored,pageInfo.isDeferredSyntaxAllowedAsLiteral(),ctxt.getOptions().getStrictQuoteEscaping(),quoteAttributeEL);  } catch (  IllegalArgumentException iae) {    err.jspError(start,iae.getMessage());  }  if (watch.length() == 1)   return ret;  return "<%=" + ret + "%>";}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  public ImageTypeSpecifier(ColorModel colorModel,SampleModel sampleModel){  if (colorModel == null) {    throw new IllegalArgumentException("colorModel == null!");  }  if (sampleModel == null) {    throw new IllegalArgumentException("sampleModel == null!");  }  if (!colorModel.isCompatibleSampleModel(sampleModel)) {    throw new IllegalArgumentException("sampleModel is incompatible with colorModel!");  }  this.colorModel=colorModel;  this.sampleModel=sampleModel;}  }
class C{  private CertificateMapper<?> loadMapper(String className,CertificateMapperCfg configuration,boolean initialize) throws InitializationException {  try {    CertificateMapperCfgDefn definition=CertificateMapperCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends CertificateMapper> mapperClass=propertyDefinition.loadClass(className,CertificateMapper.class);    CertificateMapper mapper=mapperClass.newInstance();    if (initialize) {      mapper.initializeCertificateMapper(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!mapper.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_CERTMAPPER_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));      }    }    return mapper;  } catch (  InitializationException e) {    throw e;  }catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_CERTMAPPER_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  private String buildUrl(){  String url=getBasePath();  String qs="";  if (isNullOrEmpty(url)) {    url=CKFINDER_DEFAULT_BASEPATH;  }  url=PathUtils.addSlashToEnd(url);  url=url.concat(CKFINDER_DEFAULT_PAGE);  if (this.selectFunction != null && !"".equals(this.selectFunction)) {    qs+="?action=js&amp;func=" + this.selectFunction;  }  if (this.selectFunctionData != null && !"".equals(this.selectFunctionData)) {    qs+=!isNullOrEmpty(qs) ? "&amp;" : "?";    try {      qs+="data=" + URLEncoder.encode(this.selectFunctionData,"UTF-8");    } catch (    UnsupportedEncodingException e) {      qs+="data=" + this.selectFunctionData;    }  }  if (this.disableThumbnailSelection) {    qs+=!isNullOrEmpty(qs) ? "&amp;" : "?";    qs+="dts=1";  } else   if (!isNullOrEmpty(this.selectThumbnailFunction) || !isNullOrEmpty(this.selectFunction)) {    qs+=!isNullOrEmpty(qs) ? "&amp;" : "?";    qs+="thumbFunc=" + (!isNullOrEmpty(this.selectThumbnailFunction) ? this.selectThumbnailFunction : this.selectFunction);    if (!isNullOrEmpty(this.selectThumbnailFunctionData)) {      try {        qs+="&amp;tdata=" + URLEncoder.encode(this.selectThumbnailFunctionData,"UTF-8");      } catch (      UnsupportedEncodingException e) {        qs+="&amp;tdata=" + this.selectThumbnailFunctionData;      }    } else     if (isNullOrEmpty(this.selectThumbnailFunction) && !isNullOrEmpty(this.selectFunctionData)) {      try {        qs+="&amp;tdata=" + URLEncoder.encode(this.selectFunctionData,"UTF-8");      } catch (      UnsupportedEncodingException e) {        qs+="&amp;tdata=" + this.selectFunctionData;      }    }  }  if (!isNullOrEmpty(this.startupPath)) {    qs+=!isNullOrEmpty(qs) ? "&amp;" : "?";    try {      qs+="start=" + URLEncoder.encode(this.startupPath + (this.startupFolderExpanded ? ":1" : ":0"),"UTF-8");    } catch (    UnsupportedEncodingException e) {      qs+="start=" + (this.startupFolderExpanded ? ":1" : ":0");    }  }  if (!isNullOrEmpty(this.resourceType)) {    qs+=!isNullOrEmpty(qs) ? "&amp;" : "?";    try {      qs+="type=" + URLEncoder.encode(this.resourceType,"UTF-8");    } catch (    UnsupportedEncodingException e) {      qs+="type=" + this.resourceType;    }  }  if (this.rememberLastFolder) {    qs+=!isNullOrEmpty(qs) ? "&amp;" : "?";    qs+="rlf=0";  }  if (!isNullOrEmpty(this.id)) {    qs+=!isNullOrEmpty(qs) ? "&amp;" : "?";    try {      qs+="id=" + URLEncoder.encode(this.id,"UTF-8");    } catch (    UnsupportedEncodingException e) {      qs+="id=" + this.id;    }  }  return url.concat(qs);}  }
class C{  public void testConstrLongMathContext(){  long a=4576578677732546982L;  int precision=5;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="45766";  int resScale=-14;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());  BigDecimal bd;  mc=new MathContext(15,RoundingMode.UP);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.89012345678902E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.89012345678902E+16",bd.toString());  mc=new MathContext(12,RoundingMode.DOWN);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.89012345678E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.89012345678E+16",bd.toString());  mc=new MathContext(15,RoundingMode.CEILING);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.89012345678902E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.89012345678901E+16",bd.toString());  mc=new MathContext(12,RoundingMode.FLOOR);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.89012345678E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.89012345679E+16",bd.toString());  mc=new MathContext(16,RoundingMode.HALF_EVEN);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.890123456789012E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.890123456789012E+16",bd.toString());  bd=new BigDecimal(-78901234567890135L,mc);  assertEquals("incorrect value","-7.890123456789014E+16",bd.toString());  mc=new MathContext(16,RoundingMode.HALF_UP);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.890123456789013E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.890123456789013E+16",bd.toString());  mc=new MathContext(16,RoundingMode.HALF_DOWN);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.890123456789012E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.890123456789012E+16",bd.toString());  mc=new MathContext(8,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(78901234567890125L,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(-78901234567890125L,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  private void pauseMedia(){  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);  long eventtime=SystemClock.uptimeMillis() - 1;  KeyEvent downEvent=new KeyEvent(eventtime,eventtime,KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_MEDIA_PAUSE,0);  KeyEvent upEvent=new KeyEvent(eventtime,eventtime,KeyEvent.ACTION_UP,KeyEvent.KEYCODE_MEDIA_PAUSE,0);  audioManager.dispatchMediaKeyEvent(downEvent);  audioManager.dispatchMediaKeyEvent(upEvent);}  }
class C{  public AttributeFilter(final Collection<String> attributeDescriptions,final Schema schema){  if (attributeDescriptions == null || attributeDescriptions.isEmpty()) {    includeAllUserAttributes=true;  } else {    for (    final String attribute : attributeDescriptions) {      includeAttribute(attribute,schema);    }  }}  }
class C{  public InvalidKeyException(String msg){  super(msg);}  }
class C{  public ServiceEntry(String line){  String[] parts=line.split(",");  if (parts[0].startsWith("!")) {    remove=true;    className=parts[0].substring(1);  } else {    remove=false;    className=parts[0];  }  if (parts.length > 1) {    try {      order=Integer.parseInt(parts[1]);    } catch (    NumberFormatException exp) {      order=nextDefaultOrder();    }  } else {    order=nextDefaultOrder();  }}  }
class C{  public static void registerMonitorProvider(MonitorProvider<? extends MonitorProviderCfg> monitorProvider){  String lowerName=toLowerCase(monitorProvider.getMonitorInstanceName());  directoryServer.monitorProviders.put(lowerName,monitorProvider);  try {    DN monitorDN=getMonitorProviderDN(monitorProvider);    JMXMBean mBean=directoryServer.mBeans.get(monitorDN);    if (mBean == null) {      mBean=new JMXMBean(monitorDN);      mBean.addMonitorProvider(monitorProvider);      directoryServer.mBeans.put(monitorDN,mBean);    } else {      mBean.addMonitorProvider(monitorProvider);    }  } catch (  Exception e) {    logger.traceException(e);  }}  }
class C{  public void decompile(String root,String packege,String className){  log=new StringBuffer();  source="";  File workingDir=new File(root + "/" + packege);  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ByteArrayOutputStream errors=new ByteArrayOutputStream();  PrintWriter errorsP=new PrintWriter(new OutputStreamWriter(errors));  int status=0;  try {    start=System.currentTimeMillis();    errorsP.println("\tJad reported messages/errors:");    Process p=Runtime.getRuntime().exec(buildCmdLine(className),new String[]{},workingDir);    StreamRedirectThread outRedirect=new StreamRedirectThread("output_reader",p.getInputStream(),bos);    StreamRedirectThread errRedirect=new StreamRedirectThread("error_reader",p.getErrorStream(),errors);    outRedirect.start();    errRedirect.start();    status=p.waitFor();    outRedirect.join();    errRedirect.join();    if (outRedirect.getException() != null)     excList.add(outRedirect.getException());    if (errRedirect.getException() != null)     excList.add(errRedirect.getException());  } catch (  Exception e) {    excList.add(e);  } finally {    try {      bos.flush();      bos.close();      errorsP.println("\tExit status: " + status);      errors.flush();      errorsP.close();    } catch (    Exception e) {      excList.add(e);    }    time=System.currentTimeMillis() - start;  }  source=UnicodeUtil.decode(bos.toString());  log=new StringBuffer(errors.toString());}  }
class C{  @Override public int hashCode(){  return printer.hashCode();}  }
class C{  protected void addRoleInfo(RoleInfo roleInfo) throws IllegalArgumentException, InvalidRelationTypeException {  if (roleInfo == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationTypeSupport.class.getName(),"addRoleInfo",roleInfo);  if (isInRelationService) {    String excMsg="Relation type cannot be updated as it is declared in the Relation Service.";    throw new RuntimeException(excMsg);  }  String roleName=roleInfo.getName();  if (roleName2InfoMap.containsKey(roleName)) {    StringBuilder excMsgStrB=new StringBuilder();    String excMsg="Two role infos provided for role ";    excMsgStrB.append(excMsg);    excMsgStrB.append(roleName);    throw new InvalidRelationTypeException(excMsgStrB.toString());  }  roleName2InfoMap.put(roleName,new RoleInfo(roleInfo));  RELATION_LOGGER.exiting(RelationTypeSupport.class.getName(),"addRoleInfo");  return;}  }
class C{  private void buildNewMap(MethodVisitor methodVisitor,CodeInfo info,Ins.NewMap newMap){  methodVisitor.visitTypeInsn(Opcodes.NEW,typeToInternalName(newMap.type()));  info.push(CodeInfo.Size._1);  methodVisitor.visitInsn(Opcodes.DUP);  info.push(CodeInfo.Size._1);  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,typeToInternalName(newMap.type()),"<init>","()V",false);  info.pop(1);  for (  Map.Entry<Value,Value> entry : newMap.initValues().entrySet()) {    methodVisitor.visitInsn(Opcodes.DUP);    info.push(CodeInfo.Size._1);    buildValueAccess(methodVisitor,info,entry.getKey(),true);    buildValueAccess(methodVisitor,info,entry.getValue(),true);    methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE,"java/util/Map","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",true);    info.pop(3);    info.push(CodeInfo.Size._1);    methodVisitor.visitInsn(Opcodes.POP);    info.pop(1);  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  int sourceNode=transformer.getXPathContext().getCurrentNode();  String countString=getCountString(transformer,sourceNode);  try {    transformer.getResultTreeHandler().characters(countString.toCharArray(),0,countString.length());  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public void delete() throws IOException {  cache.delete();}  }
class C{  public static ResourceType createResourceType(String applicationName,String resourceTypeName,Set<String> patterns,Map<String,Boolean> actions,String uuid){  return createResourceTypeBuilder(applicationName,resourceTypeName,patterns,actions,uuid).build();}  }
class C{  protected boolean isSupported(Method method){  return !method.getRequestStreaming() && !method.getResponseStreaming();}  }
class C{  public String toString(){  String ret=null;  if ((states != null) && (states.size() > 0)) {    ret=((AccessibleState)(states.elementAt(0))).toDisplayString();    for (int i=1; i < states.size(); i++) {      ret=ret + "," + ((AccessibleState)(states.elementAt(i))).toDisplayString();    }  }  return ret;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  for (int k=0; k < segments.length; ++k)   ensureSegment(k);  s.defaultWriteObject();  final Segment<K,V>[] segments=this.segments;  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segmentAt(segments,k);    seg.lock();    try {      HashEntry<K,V>[] tab=seg.table;      for (int i=0; i < tab.length; ++i) {        HashEntry<K,V> e;        for (e=entryAt(tab,i); e != null; e=e.next) {          s.writeObject(e.key);          s.writeObject(e.value);        }      }    }  finally {      seg.unlock();    }  }  s.writeObject(null);  s.writeObject(null);}  }
class C{  public double board_to_screen(double p_val){  return p_val * scale_factor;}  }
class C{  private static SessionPropertyUpgrader loadPropertyUpgrader(){  String upgraderClass=SystemProperties.get(Constants.SESSION_UPGRADER_IMPL,Constants.DEFAULT_SESSION_UPGRADER_IMPL);  SessionPropertyUpgrader upgrader=null;  try {    upgrader=Class.forName(upgraderClass).asSubclass(SessionPropertyUpgrader.class).newInstance();    if (DEBUG.messageEnabled()) {      DEBUG.message("SessionUpgrader implementation ('" + upgraderClass + ") successfully loaded.");    }  } catch (  Exception ex) {    DEBUG.error("Unable to load the following Session Upgrader implementation: " + upgraderClass + "\nFallbacking to DefaultSessionUpgrader",ex);    upgrader=new DefaultSessionPropertyUpgrader();  }  return upgrader;}  }
class C{  public void startTracking(){  if (isTracking) {    return;  }  if (this.session == null) {    addBroadcastReceiver();  }  if (getSession() != null) {    getSession().addCallback(callback);  }  isTracking=true;}  }
class C{  public CipherOutputStream(OutputStream os,BufferedBlockCipher cipher){  super(os);  this.bufferedBlockCipher=cipher;  this.buf=new byte[cipher.getBlockSize()];}  }
class C{  @Override Promise<List<Modification>,ResourceException> patch(final Context context,final Resource resource,final JsonPointer path,final PatchOperation operation){  final JsonPointer field=operation.getField();  if (field.isEmpty() || field.size() == 1 && field.get(0).equals("-")) {    return super.patch(context,resource,path,operation);  }  return newNotSupportedException(ERR_PATCH_JSON_INTERNAL_PROPERTY.get(field,path,path)).asPromise();}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.UsageDirectiveElement createUsageDirectiveElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.UsageDirectiveElementImpl();}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("ellipse iterator out of bounds");  }  if (index == 5) {    return SEG_CLOSE;  }  if (index == 0) {    double ctrls[]=ctrlpts[3];    coords[0]=(float)(x + ctrls[4] * w);    coords[1]=(float)(y + ctrls[5] * h);    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_MOVETO;  }  double ctrls[]=ctrlpts[index - 1];  coords[0]=(float)(x + ctrls[0] * w);  coords[1]=(float)(y + ctrls[1] * h);  coords[2]=(float)(x + ctrls[2] * w);  coords[3]=(float)(y + ctrls[3] * h);  coords[4]=(float)(x + ctrls[4] * w);  coords[5]=(float)(y + ctrls[5] * h);  if (affine != null) {    affine.transform(coords,0,coords,0,3);  }  return SEG_CUBICTO;}  }
class C{  public static java.util.Calendar parseTime(String lexicalXSDTime){  if (theConverter == null)   initConverter();  return theConverter.parseTime(lexicalXSDTime);}  }
class C{  private ArgumentExceptionFactory(){}  }
class C{  public void clear(){  modCount++;  Object[] tab=table;  for (int i=0; i < tab.length; i++)   tab[i]=null;  size=0;}  }
class C{  public synchronized static void closePools(){  logger.debug("Close DB pools");  for (  ODatabaseDocumentPool pool : pools.values()) {    try {      pool.close();      logger.trace("Closed pool {}",pool);    } catch (    Exception ex) {      logger.info("Faillure reported in closing pool {}",pool,ex);    }  }  pools.clear();  pools=new HashMap<String,ODatabaseDocumentPool>();}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("InReplyToParser.parse");  InReplyToList list=new InReplyToList();  try {    headerName(TokenTypes.IN_REPLY_TO);    while (lexer.lookAhead(0) != '\n') {      InReplyTo inReplyTo=new InReplyTo();      inReplyTo.setHeaderName(SIPHeaderNames.IN_REPLY_TO);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      if (lexer.lookAhead(0) == '@') {        this.lexer.match('@');        this.lexer.match(TokenTypes.SAFE);        Token secToken=lexer.getNextToken();        inReplyTo.setCallId(token.getTokenValue() + "@" + secToken.getTokenValue());      } else {        inReplyTo.setCallId(token.getTokenValue());      }      this.lexer.SPorHT();      list.add(inReplyTo);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        inReplyTo=new InReplyTo();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        if (lexer.lookAhead(0) == '@') {          this.lexer.match('@');          this.lexer.match(TokenTypes.SAFE);          Token secToken=lexer.getNextToken();          inReplyTo.setCallId(token.getTokenValue() + "@" + secToken.getTokenValue());        } else {          inReplyTo.setCallId(token.getTokenValue());        }        list.add(inReplyTo);      }    }    return list;  }  finally {    if (debug)     dbg_leave("InReplyToParser.parse");  }}  }
class C{  public void math(final int op,final Type type){  mv.visitInsn(type.getOpcode(op));}  }
class C{  public static boolean isAccessLoggable(Level level){  if (logger == null) {    return false;  } else {    return logger.isAccessLoggable(level);  }}  }
class C{  public KeyManagementException(String msg){  super(msg);}  }
class C{  public ErodingObjectPool(final ObjectPool<T> pool,final float factor){  this.pool=pool;  this.factor=new ErodingFactor(factor);}  }
class C{  @Override public EnumEvalResult evaluate(AciEvalContext evalCtx){  EnumEvalResult matched=EnumEvalResult.FALSE;  for (  DN groupDN : groupDNs) {    Group<?> group=getGroupManager().getGroupInstance(groupDN);    if (group != null && evalCtx.isMemberOf(group)) {      matched=EnumEvalResult.TRUE;      break;    }  }  return matched.getRet(type,false);}  }
class C{  public int startY(){  return (int)(surfaceSize.y * (maxY - viewportRect.bottom) / (maxY - minY));}  }
class C{  public INV_IDENT(){  this("");}  }
class C{  public static void addObjectClassToRemove(ObjectClass objectClass){  instance.removeObjectClasses.add(objectClass);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  @Issue("JENKINS-29922") @Test public void dollar_class_must_die() throws Exception {  WorkflowJob p=r.jenkins.createProject(WorkflowJob.class,"die1");  p.setDefinition(new CpsFlowDefinition("california ocean:'pacific', mountain:'sierra'"));  r.assertLogContains("California from pacific to sierra",r.assertBuildStatusSuccess(p.scheduleBuild2(0)));}  }
class C{  static void accept(final AnnotationVisitor av,final String name,final Object value){  if (av != null) {    if (value instanceof String[]) {      String[] typeconst=(String[])value;      av.visitEnum(name,typeconst[0],typeconst[1]);    } else     if (value instanceof AnnotationNode) {      AnnotationNode an=(AnnotationNode)value;      an.accept(av.visitAnnotation(name,an.desc));    } else     if (value instanceof List) {      AnnotationVisitor v=av.visitArray(name);      if (v != null) {        List<?> array=(List<?>)value;        for (int j=0; j < array.size(); ++j) {          accept(v,null,array.get(j));        }        v.visitEnd();      }    } else {      av.visit(name,value);    }  }}  }
class C{  public AuthorizationHeader createAuthorizationHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("null arg scheme ");  Authorization auth=new Authorization();  auth.setScheme(scheme);  return auth;}  }
class C{  @Override public int hashCode(){  return name.hashCode();}  }
class C{  private void prepareRequest(){  http11=true;  http09=false;  contentDelimitation=false;  sendfileData=null;  if (endpoint.isSSLEnabled()) {    request.scheme().setString("https");  }  MessageBytes protocolMB=request.protocol();  if (protocolMB.equals(Constants.HTTP_11)) {    http11=true;    protocolMB.setString(Constants.HTTP_11);  } else   if (protocolMB.equals(Constants.HTTP_10)) {    http11=false;    keepAlive=false;    protocolMB.setString(Constants.HTTP_10);  } else   if (protocolMB.equals("")) {    http09=true;    http11=false;    keepAlive=false;  } else {    http11=false;    response.setStatus(505);    setErrorState(ErrorState.CLOSE_CLEAN,null);    if (log.isDebugEnabled()) {      log.debug(sm.getString("http11processor.request.prepare") + " Unsupported HTTP version \"" + protocolMB+ "\"");    }  }  MimeHeaders headers=request.getMimeHeaders();  MessageBytes connectionValueMB=headers.getValue(Constants.CONNECTION);  if (connectionValueMB != null) {    ByteChunk connectionValueBC=connectionValueMB.getByteChunk();    if (findBytes(connectionValueBC,Constants.CLOSE_BYTES) != -1) {      keepAlive=false;    } else     if (findBytes(connectionValueBC,Constants.KEEPALIVE_BYTES) != -1) {      keepAlive=true;    }  }  if (http11) {    MessageBytes expectMB=headers.getValue("expect");    if (expectMB != null) {      if (expectMB.indexOfIgnoreCase("100-continue",0) != -1) {        inputBuffer.setSwallowInput(false);        request.setExpectation(true);      } else {        response.setStatus(HttpServletResponse.SC_EXPECTATION_FAILED);        setErrorState(ErrorState.CLOSE_CLEAN,null);      }    }  }  if (restrictedUserAgents != null && (http11 || keepAlive)) {    MessageBytes userAgentValueMB=headers.getValue("user-agent");    if (userAgentValueMB != null) {      String userAgentValue=userAgentValueMB.toString();      if (restrictedUserAgents != null && restrictedUserAgents.matcher(userAgentValue).matches()) {        http11=false;        keepAlive=false;      }    }  }  ByteChunk uriBC=request.requestURI().getByteChunk();  if (uriBC.startsWithIgnoreCase("http",0)) {    int pos=uriBC.indexOf("://",0,3,4);    int uriBCStart=uriBC.getStart();    int slashPos=-1;    if (pos != -1) {      byte[] uriB=uriBC.getBytes();      slashPos=uriBC.indexOf('/',pos + 3);      if (slashPos == -1) {        slashPos=uriBC.getLength();        request.requestURI().setBytes(uriB,uriBCStart + pos + 1,1);      } else {        request.requestURI().setBytes(uriB,uriBCStart + slashPos,uriBC.getLength() - slashPos);      }      MessageBytes hostMB=headers.setValue("host");      hostMB.setBytes(uriB,uriBCStart + pos + 3,slashPos - pos - 3);    }  }  InputFilter[] inputFilters=inputBuffer.getFilters();  if (http11) {    MessageBytes transferEncodingValueMB=headers.getValue("transfer-encoding");    if (transferEncodingValueMB != null) {      String transferEncodingValue=transferEncodingValueMB.toString();      int startPos=0;      int commaPos=transferEncodingValue.indexOf(',');      String encodingName=null;      while (commaPos != -1) {        encodingName=transferEncodingValue.substring(startPos,commaPos);        addInputFilter(inputFilters,encodingName);        startPos=commaPos + 1;        commaPos=transferEncodingValue.indexOf(',',startPos);      }      encodingName=transferEncodingValue.substring(startPos);      addInputFilter(inputFilters,encodingName);    }  }  long contentLength=request.getContentLengthLong();  if (contentLength >= 0) {    if (contentDelimitation) {      headers.removeHeader("content-length");      request.setContentLength(-1);    } else {      inputBuffer.addActiveFilter(inputFilters[Constants.IDENTITY_FILTER]);      contentDelimitation=true;    }  }  MessageBytes valueMB=headers.getValue("host");  if (http11 && (valueMB == null)) {    response.setStatus(400);    setErrorState(ErrorState.CLOSE_CLEAN,null);    if (log.isDebugEnabled()) {      log.debug(sm.getString("http11processor.request.prepare") + " host header missing");    }  }  parseHost(valueMB);  if (!contentDelimitation) {    inputBuffer.addActiveFilter(inputFilters[Constants.VOID_FILTER]);    contentDelimitation=true;  }  if (getErrorState().isError()) {    getAdapter().log(request,response,0);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedatanomodificationallowederr.class,args);}  }
class C{  public X509CertificateHolder(Certificate x509Certificate){  this.x509Certificate=x509Certificate;  this.extensions=x509Certificate.getTBSCertificate().getExtensions();}  }
class C{  public String toString(){  StringBuilder encBuff=new StringBuilder();  encBuff.append(getVersion() == null ? "" : getVersion().toString());  encBuff.append(getOrigin() == null ? "" : getOrigin().toString());  encBuff.append(getSessionName() == null ? "" : getSessionName().toString());  encBuff.append(getInfo() == null ? "" : getInfo().toString());  try {    encBuff.append(getURI() == null ? "" : getURI().toString());    encBuff.append(getEmails(false) == null ? "" : encodeVector(getEmails(false)));    encBuff.append(getPhones(false) == null ? "" : encodeVector(getPhones(false)));    encBuff.append(getConnection() == null ? "" : getConnection().toString());    encBuff.append(getBandwidths(false) == null ? "" : encodeVector(getBandwidths(false)));    encBuff.append(getTimeDescriptions(false) == null ? "" : encodeVector(getTimeDescriptions(false)));    encBuff.append(getZoneAdjustments(false) == null ? "" : encodeVector(getZoneAdjustments(false)));    encBuff.append(getKey() == null ? "" : getKey().toString());    encBuff.append(getAttributes(false) == null ? "" : encodeVector(getAttributes(false)));    encBuff.append(getMediaDescriptions(false) == null ? "" : encodeVector(getMediaDescriptions(false)));  } catch (  SdpException exc) {  }  return encBuff.toString();}  }
class C{  public VLVRequestControl(boolean isCritical,int beforeCount,int afterCount,int offset,int contentCount,ByteString contextID){  super(OID_VLV_REQUEST_CONTROL,isCritical);  this.beforeCount=beforeCount;  this.afterCount=afterCount;  this.offset=offset;  this.contentCount=contentCount;  this.contextID=contextID;  targetType=TYPE_TARGET_BYOFFSET;}  }
class C{  public static TestSSLSocketPair create(){  TestSSLContext c=TestSSLContext.create();  SSLSocket[] sockets=connect(c,null,null);  return new TestSSLSocketPair(c,sockets[0],sockets[1]);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.EndorsingSupportingTokensElement createEndorsingSupportingTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.EndorsingSupportingTokensElementImpl();}  }
class C{  public Vector zero(){  x=0;  y=0;  z=0;  return this;}  }
class C{  public PAssociatedURIHeader createPAssociatedURIHeader(Address assocURI){  if (assocURI == null)   throw new NullPointerException("null associatedURI!");  PAssociatedURI associatedURI=new PAssociatedURI();  associatedURI.setAddress(assocURI);  return associatedURI;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireEmbeddedTokenReferenceElement createRequireEmbeddedTokenReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireEmbeddedTokenReferenceElementImpl();}  }
class C{  private boolean processAuthConfigEntry(String serviceName,String orgName,String componentName,String configName){  boolean needUpdate=false;  if (componentName.length() == 0) {    needUpdate=true;  } else   if (serviceName.equals(CORE_AUTH) || ((serviceName.startsWith("iPlanetAMAuth") || serviceName.startsWith(ISAuthConstants.AUTH_ATTR_PREFIX_NEW)) && serviceName.endsWith("Service"))) {    AMAuthConfigType type=new AMAuthConfigType(configName);    if (type.getOrganization().equals(orgName)) {      needUpdate=true;    }  } else   if (serviceName.equals(AMAuthConfigUtils.SERVICE_NAME)) {    int i=componentName.lastIndexOf("/");    String temp="";    if (i != -1) {      temp=componentName.substring(i + 1);    } else {      temp=componentName;    }    AMAuthConfigType type=new AMAuthConfigType(configName);    if (type.getOrganization().equals(orgName)) {      if (debug.messageEnabled()) {        debug.message(configName + " matches " + temp);      }      needUpdate=true;    }  }  if (needUpdate) {    if (debug.messageEnabled()) {      debug.message("processSMNotification, name=" + configName);    }    ((AMConfiguration)Configuration.getConfiguration()).processListenerEvent(configName);  }  return needUpdate;}  }
class C{  public static void main(String[] args){  try {    JavaArguments javaArgs=new JavaArguments();    javaArgs.setInitialMemory(100);    javaArgs.setMaxMemory(99);    javaArgs.setAdditionalArguments(new String[]{"","-client","-XX"});    JavaArgumentsDialog dlg=new JavaArgumentsDialog(new JFrame(),javaArgs,LocalizableMessage.raw("my title"),LocalizableMessage.raw("Set the java arguments for the test command-line."));    dlg.pack();    dlg.setVisible(true);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void updateDeltas(int deltaX,int deltaY){  if (mLeftBorderActive) {    mDeltaX=Math.max(-mBaselineX,deltaX);    mDeltaX=Math.min(mBaselineWidth - 2 * mTouchTargetWidth,mDeltaX);  } else   if (mRightBorderActive) {    mDeltaX=Math.min(mDragLayer.getWidth() - (mBaselineX + mBaselineWidth),deltaX);    mDeltaX=Math.max(-mBaselineWidth + 2 * mTouchTargetWidth,mDeltaX);  }  if (mTopBorderActive) {    mDeltaY=Math.max(-mBaselineY,deltaY);    mDeltaY=Math.min(mBaselineHeight - 2 * mTouchTargetWidth,mDeltaY);  } else   if (mBottomBorderActive) {    mDeltaY=Math.min(mDragLayer.getHeight() - (mBaselineY + mBaselineHeight),deltaY);    mDeltaY=Math.max(-mBaselineHeight + 2 * mTouchTargetWidth,mDeltaY);  }}  }
class C{  private static int spinsFor(Node pred,boolean haveData){  if (MP && pred != null) {    if (pred.isData != haveData)     return FRONT_SPINS + CHAINED_SPINS;    if (pred.isMatched())     return FRONT_SPINS;    if (pred.waiter == null)     return CHAINED_SPINS;  }  return 0;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AttributeStatementType createAttributeStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AttributeStatementTypeImpl();}  }
class C{  public static BigInteger createRandomInRange(BigInteger min,BigInteger max,SecureRandom random){  int cmp=min.compareTo(max);  if (cmp >= 0) {    if (cmp > 0) {      throw new IllegalArgumentException("'min' may not be greater than 'max'");    }    return min;  }  if (min.bitLength() > max.bitLength() / 2) {    return createRandomInRange(ZERO,max.subtract(min),random).add(min);  }  for (int i=0; i < MAX_ITERATIONS; ++i) {    BigInteger x=new BigInteger(max.bitLength(),random);    if (x.compareTo(min) >= 0 && x.compareTo(max) <= 0) {      return x;    }  }  return new BigInteger(max.subtract(min).bitLength() - 1,random).add(min);}  }
class C{  public IPRPSignoutRequest(HttpServletRequest request,HttpServletResponse response,String wreply){  super(request,response);  this.wreply=wreply;}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  public boolean messageEnabled(){  return getDebugServiceInstance().messageEnabled();}  }
class C{  private static String orgNameToDN(String orgName){  if ((orgName == null) || (orgName.length() == 0)) {    return (rootSuffix);  }  if (LDAPUtils.isDN(orgName)) {    return (orgName);  }  StringBuilder buf=new StringBuilder();  ArrayList arr=new ArrayList();  StringTokenizer strtok=new StringTokenizer(orgName,"/");  while (strtok.hasMoreElements()) {    arr.add(strtok.nextToken());  }  int size=arr.size();  for (int i=0; i < size; i++) {    String theOrg=(String)arr.get(i);    buf.append(AMNamingAttrManager.getNamingAttr(AMObject.ORGANIZATION));    buf.append('=').append(theOrg).append(',');  }  if (rootSuffix.length() > 0) {    buf.append(rootSuffix);  } else {    buf.deleteCharAt(buf.length() - 1);  }  return (buf.toString());}  }
class C{  @Override public String toString(){  String modType=modification.getModificationType().toString().toUpperCase();  Iterator<ByteString> it=modification.getAttribute().iterator();  String attrValue=it.hasNext() ? "\"" + it.next().toString() + "\" " : "";  return modType + " " + attrValue+ "t"+ time;}  }
class C{  public AccountStatusNotificationHandlerConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  notificationHandlers=new ConcurrentHashMap<>();}  }
class C{  protected AbstractAsynchronousConnection(){}  }
class C{  @Override public Future<Boolean> flush(){  return new FutureFlush();}  }
class C{  public boolean isValidating(){  return getFeature(XmlPullParser.FEATURE_VALIDATION);}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  public final void testEqualsObject01(){  CertPath cp1=new MyCertPath(testEncoding);  assertTrue(cp1.equals(cp1));}  }
class C{  private String align(final String data,final Alignment alignment,final int width){  final String rawData=data.trim();  final int padding=width - rawData.length();  if (padding <= 0) {    return rawData;  }switch (alignment) {case RIGHT:    return pad(padding,rawData,0);case LEFT:  return pad(0,rawData,padding);case CENTER:final int paddingBefore=padding / 2;return pad(paddingBefore,rawData,padding - paddingBefore);default :return "";}}  }
class C{  protected void deflate() throws IOException {  int byteCount;  while ((byteCount=def.deflate(buf)) != 0) {    out.write(buf,0,byteCount);  }}  }
class C{  public byte[] readBytes() throws SQLException {  return (byte[])getNextAttribute();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattributens01.class,args);}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int left=leftInit;  int right=rightInit;  int up=upInit;  int down=downInit;  boolean sizeExceeded=false;  boolean aBlackPointFoundOnBorder=true;  boolean atLeastOneBlackPointFoundOnBorder=false;  boolean atLeastOneBlackPointFoundOnRight=false;  boolean atLeastOneBlackPointFoundOnBottom=false;  boolean atLeastOneBlackPointFoundOnLeft=false;  boolean atLeastOneBlackPointFoundOnTop=false;  while (aBlackPointFoundOnBorder) {    aBlackPointFoundOnBorder=false;    boolean rightBorderNotWhite=true;    while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {      rightBorderNotWhite=containsBlackPoint(up,down,right,false);      if (rightBorderNotWhite) {        right++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnRight=true;      } else       if (!atLeastOneBlackPointFoundOnRight) {        right++;      }    }    if (right >= width) {      sizeExceeded=true;      break;    }    boolean bottomBorderNotWhite=true;    while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);      if (bottomBorderNotWhite) {        down++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnBottom=true;      } else       if (!atLeastOneBlackPointFoundOnBottom) {        down++;      }    }    if (down >= height) {      sizeExceeded=true;      break;    }    boolean leftBorderNotWhite=true;    while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {      leftBorderNotWhite=containsBlackPoint(up,down,left,false);      if (leftBorderNotWhite) {        left--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnLeft=true;      } else       if (!atLeastOneBlackPointFoundOnLeft) {        left--;      }    }    if (left < 0) {      sizeExceeded=true;      break;    }    boolean topBorderNotWhite=true;    while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {      topBorderNotWhite=containsBlackPoint(left,right,up,true);      if (topBorderNotWhite) {        up--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnTop=true;      } else       if (!atLeastOneBlackPointFoundOnTop) {        up--;      }    }    if (up < 0) {      sizeExceeded=true;      break;    }    if (aBlackPointFoundOnBorder) {      atLeastOneBlackPointFoundOnBorder=true;    }  }  if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {    int maxSize=right - left;    ResultPoint z=null;    for (int i=1; i < maxSize; i++) {      z=getBlackPointOnSegment(left,down - i,left + i,down);      if (z != null) {        break;      }    }    if (z == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint t=null;    for (int i=1; i < maxSize; i++) {      t=getBlackPointOnSegment(left,up + i,left + i,up);      if (t != null) {        break;      }    }    if (t == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint x=null;    for (int i=1; i < maxSize; i++) {      x=getBlackPointOnSegment(right,up + i,right - i,up);      if (x != null) {        break;      }    }    if (x == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint y=null;    for (int i=1; i < maxSize; i++) {      y=getBlackPointOnSegment(right,down - i,right - i,down);      if (y != null) {        break;      }    }    if (y == null) {      throw NotFoundException.getNotFoundInstance();    }    return centerEdges(y,z,x,t);  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  private void backupIcons(BackupDataOutput data) throws IOException {  final ContentResolver cr=mContext.getContentResolver();  final int dpi=mContext.getResources().getDisplayMetrics().densityDpi;  final UserHandleCompat myUserHandle=UserHandleCompat.myUserHandle();  int backupUpIconCount=0;  String where="(" + LauncherSettings.Favorites.ITEM_TYPE + "="+ LauncherSettings.Favorites.ITEM_TYPE_APPLICATION+ " OR "+ LauncherSettings.Favorites.ITEM_TYPE+ "="+ LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT+ ") AND "+ getUserSelectionArg();  Cursor cursor=cr.query(LauncherSettings.Favorites.CONTENT_URI,FAVORITE_PROJECTION,where,null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final String intentDescription=cursor.getString(INTENT_INDEX);      try {        Intent intent=Intent.parseUri(intentDescription,0);        ComponentName cn=intent.getComponent();        BackupProtos.Key key=null;        String backupKey=null;        if (cn != null) {          key=getKey(BackupProtos.Key.ICON,cn.flattenToShortString());          backupKey=keyToBackupKey(key);        } else {          Log.w(TAG,"empty intent on application favorite: " + id);        }        if (mExistingKeys.contains(backupKey)) {          if (DEBUG)           Log.d(TAG,"already saved icon " + backupKey);          mKeys.add(key);        } else         if (backupKey != null) {          if (DEBUG)           Log.d(TAG,"I can count this high: " + backupUpIconCount);          if (backupUpIconCount < MAX_ICONS_PER_PASS) {            if (DEBUG)             Log.d(TAG,"saving icon " + backupKey);            Bitmap icon=mIconCache.getIcon(intent,myUserHandle);            if (icon != null && !mIconCache.isDefaultIcon(icon,myUserHandle)) {              writeRowToBackup(key,packIcon(dpi,icon),data);              mKeys.add(key);              backupUpIconCount++;            }          } else {            if (VERBOSE)             Log.v(TAG,"deferring icon backup " + backupKey);            dataChanged();          }        }      } catch (      URISyntaxException e) {        Log.e(TAG,"invalid URI on application favorite: " + id);      }catch (      IOException e) {        Log.e(TAG,"unable to save application icon for favorite: " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.entityconfig.AttributeType createAttributeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.AttributeTypeImpl();}  }
class C{  @Override public String toString(){  return charSequence.toString();}  }
class C{  public ApiKey updateApiKey(EntityManager em,Tenant tenant,ApiKey key,ApplicationManager am) throws Exception {  EntityTransaction t=em.getTransaction();  try {    ApiKey apiKey=getApiKey(em,tenant,key.getApikey());    apiKey.setDescription(key.getDescription());    apiKey.setEnabled(key.getEnabled());    t.begin();    em.merge(apiKey);    if (apiKey.getEnabled()) {      sendApikeyToKafka(am,ENABLED_APIKEY,tenant.getTenant_id(),apiKey.getApikey());    } else {      sendApikeyToKafka(am,DISABLED_APIKEY,tenant.getTenant_id(),apiKey.getApikey());    }    em.flush();    t.commit();    logger.info("Updated Apikey:" + key.getApikey() + " for tenant:"+ tenant.getTenant_id());    return apiKey;  } catch (  Exception e) {    if (t.isActive()) {      t.rollback();    }    logger.log(Level.SEVERE,"Failed to update apikey:" + key.getApikey(),e);    throw e;  }}  }
class C{  public AuthXMLHandler(){  localAuthServerProtocol=SystemProperties.get(Constants.AM_SERVER_PROTOCOL);  localAuthServer=SystemProperties.get(Constants.AM_SERVER_HOST);  localAuthServerPort=SystemProperties.get(Constants.AM_SERVER_PORT);  AuthContext.localAuthServiceID=localAuthServerProtocol + "://" + localAuthServer+ ":"+ localAuthServerPort;  locale=(new ISLocaleContext()).getLocale();}  }
class C{  public void clear(DN baseDN){  final DN baseDNToClear=baseDN != null ? baseDN : DN.rootDN();  domainsToClear.add(baseDNToClear);  while (domainsToClear.contains(baseDNToClear) && !State.TERMINATED.equals(getState())) {synchronized (this) {      notify();    }    Thread.yield();  }}  }
class C{  public BadRequestException(final String message){  super(400,"bad_request",message);}  }
class C{  public boolean isLeaf(){  return (getChildCount() == 0);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthLabelUI();}  }
class C{  @Override public String toXMLString(boolean includeNS,boolean declareNS) throws SAML2Exception {  validateData();  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAML2Constants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAML2Constants.ASSERTION_DECLARE_STR;  }  result.append("<").append(prefix).append("AttributeStatement").append(uri).append(">");  if (attrs != null) {    Iterator iter=attrs.iterator();    while (iter.hasNext()) {      result.append(((Attribute)iter.next()).toXMLString(includeNS,declareNS));    }  }  if (encAttrs != null) {    Iterator iter1=encAttrs.iterator();    while (iter1.hasNext()) {      result.append(((EncryptedAttribute)iter1.next()).toXMLString(includeNS,declareNS));    }  }  result.append("</").append(prefix).append("AttributeStatement>");  return result.toString();}  }
class C{  public SimilarityBasedPasswordValidator(){  super();}  }
class C{  static <T>PropertyEditorModification<T> createSetModification(PropertyDefinition<T> propertyDefinition,SortedSet<T> newValues,SortedSet<T> originalValues){  return new PropertyEditorModification<>(propertyDefinition,Type.SET,newValues,originalValues);}  }
class C{  public void remove(KeyStroke key){  if (arrayTable != null) {    arrayTable.remove(key);  }}  }
class C{  private PlaPointInt snap_to_restriction(PlaPointInt p_point){  PlaPointInt result;  boolean list_empty=(corner_list.size() == 0);  if (!list_empty && r_brd.brd_rules.is_trace_snap_45()) {    PlaPointInt last_corner=corner_list.getLast();    result=p_point.fortyfive_degree_projection(last_corner);  } else {    result=p_point;  }  return result;}  }
class C{  @Override public String toString(){  String condition=acceptOlder ? "<=" : ">";  return super.toString() + "(" + condition+ cutoff+ ")";}  }
class C{  public void removeEjb(String name){  try {    envCtx.unbind(name);  } catch (  NamingException e) {    log.error(sm.getString("naming.unbindFailed",e));  }}  }
class C{  @Override public URLConnection openConnection(URL url) throws IOException {  return openConnection(url,null);}  }
class C{  public final void testToString02(){  Vector<Certificate> certificates=new Vector<Certificate>();  certificates.add(new MyCertificate("TEST",new byte[]{(byte)4}));  CollectionCertStoreParameters cp=new CollectionCertStoreParameters(certificates);  assertNotNull(cp.toString());}  }
class C{  Version readVersion() throws FormatException {  if (parsedVersion != null) {    return parsedVersion;  }  int dimension=bitMatrix.getHeight();  int provisionalVersion=(dimension - 17) / 4;  if (provisionalVersion <= 6) {    return Version.getVersionForNumber(provisionalVersion);  }  int versionBits=0;  int ijMin=dimension - 11;  for (int j=5; j >= 0; j--) {    for (int i=dimension - 9; i >= ijMin; i--) {      versionBits=copyBit(i,j,versionBits);    }  }  Version theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  versionBits=0;  for (int i=5; i >= 0; i--) {    for (int j=dimension - 9; j >= ijMin; j--) {      versionBits=copyBit(i,j,versionBits);    }  }  theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  throw FormatException.getFormatInstance();}  }
class C{  public CloseShieldOutputStream(OutputStream out){  super(out);}  }
class C{  public final int decrementAndGet(){  return unsafe.getAndAddInt(this,valueOffset,-1) - 1;}  }
class C{  public Object[] toArray(){  ArrayList<E> al=new ArrayList<E>();  for (Node<E> p=first(); p != null; p=succ(p)) {    E item=p.item;    if (item != null)     al.add(item);  }  return al.toArray();}  }
class C{  public ModifyDNOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,ByteString rawEntryDN,ByteString rawNewRDN,boolean deleteOldRDN,ByteString rawNewSuperior){  super(clientConnection,operationID,messageID,requestControls);  this.rawEntryDN=rawEntryDN;  this.rawNewRDN=rawNewRDN;  this.deleteOldRDN=deleteOldRDN;  this.rawNewSuperior=rawNewSuperior;  entryDN=null;  newRDN=null;  newSuperior=null;  responseControls=new ArrayList<>();  cancelRequest=null;  modifications=null;}  }
class C{  public static boolean isPrintable(final byte b){  return 32 <= b && b <= 126;}  }
class C{  public static boolean isTargetFilterApplicable(Aci aci,AciTargetMatchContext matchCtx){  TargetFilter targetFilter=aci.getTargets().getTargetFilter();  return targetFilter == null || targetFilter.isApplicable(matchCtx);}  }
class C{  public org.w3c.dom.Element signWithBinarySecurityToken(org.w3c.dom.Document doc,java.security.cert.Certificate cert,java.lang.String algorithm,java.util.List ids,java.lang.String referenceType) throws XMLSignatureException {  return null;}  }
class C{  public AMSearchResults searchUsers(AMSearchControl searchControl,String avFilter) throws AMException, SSOException {  int level=searchControl.getSearchScope();  if ((level != AMConstants.SCOPE_ONE) && (level != AMConstants.SCOPE_SUB))   throw new AMException(AMSDKBundle.getString("123",super.locale),"123");  String filter="(&" + getSearchFilter(AMObject.USER) + "("+ roleDNsAN+ "="+ super.entryDN+ ")"+ avFilter+ ")";  if (debug.messageEnabled()) {    debug.message("AMRoleImpl.searchUsers: " + filter);  }  searchControl.setSearchScope(AMConstants.SCOPE_SUB);  SearchControl sc=searchControl.getSearchControl();  String returnAttrs[]=searchControl.getReturnAttributes();  return dsServices.search(super.token,getOrganizationDN(),filter,sc,returnAttrs);}  }
class C{  public void shape(char[] text,int start,int count){  if (isContextual()) {    contextualShape(text,start,count,fDefaultContextIndex);  } else {    nonContextualShape(text,start,count);  }}  }
class C{  @SuppressWarnings("unchecked") public V put(K key,V value){  Segment<K,V> s;  if (value == null)   throw new NullPointerException();  int hash=hash(key.hashCode());  int j=(hash >>> segmentShift) & segmentMask;  if ((s=(Segment<K,V>)UNSAFE.getObject(segments,(j << SSHIFT) + SBASE)) == null)   s=ensureSegment(j);  return s.put(key,hash,value,false);}  }
class C{  public ObjectStack(int blocksize){  super(blocksize);}  }
class C{  public static int countByUuid_C(java.lang.String uuid,long companyId){  return getPersistence().countByUuid_C(uuid,companyId);}  }
class C{  private boolean[] serializeCompactRDFSimpleProp(XMPNode node) throws IOException {  boolean emitEndTag=true;  boolean indentEndTag=true;  if (node.getOptions().isURI()) {    write(" rdf:resource=\"");    appendNodeValue(node.getValue(),true);    write("\"/>");    writeNewline();    emitEndTag=false;  } else   if (node.getValue() == null || node.getValue().length() == 0) {    write("/>");    writeNewline();    emitEndTag=false;  } else {    write('>');    appendNodeValue(node.getValue(),false);    indentEndTag=false;  }  return new boolean[]{emitEndTag,indentEndTag};}  }
class C{  static void putComponent(JsonValue jsonValue,String value){  jsonValue.put(COMPONENT,value);}  }
class C{  public MultifileTextWriter(String name,long interval,FileNamingPolicy namingPolicy,FilePermission filePermissions,LogPublisherErrorHandler errorHandler,String encoding,boolean autoFlush,boolean append,int bufferSize) throws IOException, DirectoryException {  File file=namingPolicy.getInitialName();  constructWriter(file,filePermissions,encoding,append,bufferSize);  this.name=name;  this.interval=interval;  this.namingPolicy=namingPolicy;  this.filePermissions=filePermissions;  this.errorHandler=errorHandler;  this.encoding=UTF8_ENCODING;  this.autoFlush=autoFlush;  this.append=append;  this.bufferSize=bufferSize;  this.stopRequested=false;  rotaterThread=new RotaterThread(this);  rotaterThread.start();  DirectoryServer.registerShutdownListener(this);}  }
class C{  public boolean isNamespaceAware(){  return true;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  try {    handleButton1Request(getCachedPolicy());  } catch (  AMConsoleException e) {    debug.warning("ConditionEditViewBean.handleButton1Request",e);    redirectToStartURL();  }}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  static void reverse(StringBuffer result,int from,int to){  int i=from;  char swap;  int j=to - 1;  while (i < j) {    swap=result.charAt(i);    result.setCharAt(i,result.charAt(j));    result.setCharAt(j,swap);    i++;    j--;  }}  }
class C{  public String encode(){  return INFORMATION_FIELD + information + Separators.NEWLINE;}  }
class C{  public static GetSymmetricKeyExtendedRequest newRequest(){  return new GetSymmetricKeyExtendedRequest();}  }
class C{  public BMPImageWriteParam(){  this(null);}  }
class C{  private void addClusterRuleSet(Digester digester,String prefix){  Class<?> clazz=null;  Constructor<?> constructor=null;  try {    clazz=Class.forName("org.apache.catalina.ha.ClusterRuleSet");    constructor=clazz.getConstructor(String.class);    RuleSet ruleSet=(RuleSet)constructor.newInstance(prefix);    digester.addRuleSet(ruleSet);  } catch (  Exception e) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("catalina.noCluster",e.getClass().getName() + ": " + e.getMessage()),e);    } else     if (log.isInfoEnabled()) {      log.info(sm.getString("catalina.noCluster",e.getClass().getName() + ": " + e.getMessage()));    }  }}  }
class C{  public static String[] chars(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return value.split("");}  }
class C{  public Response createResponse(int statusCode,Request request,ContentTypeHeader contentType,Object content) throws ParseException {  if (request == null || content == null || contentType == null)   throw new NullPointerException("null parameters");  SIPRequest sipRequest=(SIPRequest)request;  SIPResponse sipResponse=sipRequest.createResponse(statusCode);  sipResponse.setContent(content,contentType);  if (server != null) {    sipResponse.setHeader(server);  }  return sipResponse;}  }
class C{  public static void generateThreadDump(String id){  String date=new SimpleDateFormat("yyyyMMdd_hhmmss").format(new Date().getTime());  try (BufferedWriter writer=new BufferedWriter(new FileWriter("/tmp/thread_dump_" + id + "_"+ date))){    writer.write(generateThreadDump());  } catch (  Exception e) {  }}  }
class C{  protected void resetOriginalName(){  origPolicyName=null;}  }
class C{  public String toXMLString() throws FSMsgException {  return this.toXMLString(true,true);}  }
class C{  protected void registerChildren(){  registerChild(TXT_PARENT_INDEX,StaticTextField.class);  registerChild(TXT_INDEX,StaticTextField.class);  registerChild(TXT_CHOICE,StaticTextField.class);}  }
class C{  QualifiedSubject(Subject subject,boolean exclusive){  this.subject=subject;  this.exclusive=exclusive;}  }
class C{  public void test_ConstructorIF(){  LinkedHashMap hm2=new LinkedHashMap(5,(float)0.5);  assertEquals("Created incorrect LinkedHashMap",0,hm2.size());  try {    new LinkedHashMap(0,0);    fail("Failed to throw IllegalArgumentException for initial " + "load factor <= 0");  } catch (  IllegalArgumentException e) {  }  LinkedHashMap empty=new LinkedHashMap(0,0.75f);  assertNull("Empty hashtable access",empty.get("nothing"));  empty.put("something","here");  assertTrue("cannot get element",empty.get("something") == "here");}  }
class C{  private String addAttributeQueryTemplate(String extended,String cot){  String buff="    <AttributeQueryConfig metaAlias=\"/attrQuery\">\n" + "        <Attribute name=\"signingCertAlias\">\n" + "            <Value>"+ "</Value>\n"+ "        </Attribute>\n"+ "        <Attribute name=\"encryptionCertAlias\">\n"+ "            <Value>"+ "</Value>\n"+ "        </Attribute>\n"+ "        <Attribute name=\"wantNameIDEncrypted\">\n"+ "            <Value>"+ "</Value>\n"+ "        </Attribute>\n"+ "        <Attribute name=\"cotlist\">\n"+ "            <Value>" + cot + "</Value>\n"+ "        </Attribute>\n"+ "    </AttributeQueryConfig>\n";  int idx=extended.indexOf("</EntityConfig>");  if (idx != -1) {    extended=extended.substring(0,idx) + buff + "</EntityConfig>";  }  return extended;}  }
class C{  public static int multiplyColorAlpha(int color,int alpha){  if (alpha == 255) {    return color;  }  if (alpha == 0) {    return color & 0x00FFFFFF;  }  alpha=alpha + (alpha >> 7);  int colorAlpha=color >>> 24;  int multipliedAlpha=colorAlpha * alpha >> 8;  return (multipliedAlpha << 24) | (color & 0x00FFFFFF);}  }
class C{  void discardLast(){  --lastUsed;}  }
class C{  public FileUtils(){  super();}  }
class C{  private boolean isPreflightValid(final HttpServletRequest req){  if (!CORSConstants.HTTP_OPTIONS.equals(req.getMethod())) {    DEBUG.warning("CORS Fail - Preflight request method is not HTTP OPTIONS.");    return false;  }  if (!acceptedMethods.contains(req.getHeader(CORSConstants.AC_REQUEST_METHOD))) {    DEBUG.warning("CORS Fail - Preflight request did not contain the " + CORSConstants.AC_REQUEST_METHOD + " header.");    return false;  }  if (req.getHeader(CORSConstants.AC_REQUEST_HEADERS) != null) {    String headerCSVList=req.getHeader(CORSConstants.AC_REQUEST_HEADERS);    List<String> headerList=csvHelper.csvStringToList(headerCSVList,true);    for (    String header : headerList) {      if (!acceptedHeaders.contains(header.toLowerCase()) && !simpleHeaders.contains(header.toLowerCase())) {        DEBUG.warning("CORS Fail - Preflight request contained the " + CORSConstants.AC_REQUEST_HEADERS + " headers with an invalid value.");        return false;      }    }  }  return true;}  }
class C{  public Enumeration children(){  if (!loadedChildren)   loadChildren();  return super.children();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton1Request(event);}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterRead(Context context,ReadRequest request,RequestHandler next){  return transform(next.handleRead(context,request));}  }
class C{  public void UnexpectedTokenException(String expected,String got,LineCol lineCol) throws UnexpectedTokenException {  if (fastFail)   throw new UnexpectedTokenException(buildErrInfo(lineCol),expected,got,lineCol);  String msg="expecting " + expected + ", but got "+ got;  msg=buildErrInfo(lineCol) + msg;  error(msg + " at " + lineCol);  errorList.add(new CompilingError(msg,lineCol,CompilingError.UnexpectedToken));}  }
class C{  private static boolean isNELorLSEPCharacter(char ch){  return (ch == 0x85 || ch == 0x2028);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("hc_staff",true);  newNode=doc.getDoctype();  assertTrue("docTypeNotNullOrDocIsHTML",((newNode != null) | ("text/html".equals(getContentType()))));  if ((newNode != null)) {    assertNotNull("docTypeNotNull",newNode);    newValue=newNode.getNodeValue();    assertNull("initiallyNull",newValue);    newNode.setNodeValue("This should have no effect");    newValue=newNode.getNodeValue();    assertNull("nullAfterAttemptedChange",newValue);  }}  }
class C{  public static String runCmd(File directory,List<String> cmd,String errorMessage) throws Exception {  ProcessBuilder pb=new ProcessBuilder(cmd);  pb.directory(directory);  pb.redirectErrorStream(true);  Process p=pb.start();  String s;  StringBuilder sb=new StringBuilder();  BufferedReader stdout=new BufferedReader(new InputStreamReader(p.getInputStream()));  while ((s=stdout.readLine()) != null) {    logger.info(s);    sb.append(s);    sb.append('\n');  }  String sbs=sb.toString();  int exitValue=p.waitFor();  if (exitValue != 0)   throw new Exception(errorMessage + " exit value " + exitValue+ "  "+ sbs);  return sbs;}  }
class C{  @PostConstruct public void initApplication(){  log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));  Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());  if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {    log.error("You have misconfigured your application! It should not run " + "with both the 'dev' and 'prod' profiles at the same time.");  }  if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {    log.error("You have misconfigured your application! It should not" + "run with both the 'dev' and 'cloud' profiles at the same time.");  }}  }
class C{  public static long fromLinuxKernelHexEncodedAddressAndPort(final long decodedAddress,final long port){  return port << 32 | Long.reverseBytes(decodedAddress) >>> 32;}  }
class C{  public void deleteOrganizationalUnits(Set organizationalUnitDNs) throws AMException, SSOException {  Iterator iter=organizationalUnitDNs.iterator();  while (iter.hasNext()) {    String organizationalUnitDN=(String)iter.next();    AMOrganizationalUnit orgUnit=new AMOrganizationalUnitImpl(super.token,organizationalUnitDN);    orgUnit.delete();  }}  }
class C{  public void reset(){  extensions=new Hashtable();  extOrdering=new Vector();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.UsernameTokenElement createUsernameTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.UsernameTokenElementImpl();}  }
class C{  public void createTable(Table tbl) throws InvalidObjectException, MetaException {  if (tbl == null)   throw new InvalidObjectException("Table passed is null");  try {    this.getDatabase(tbl.getDbName());    this.metastore.createTable(tbl);  } catch (  NoSuchObjectException ex) {    throw new MetaException(ex.getMessage());  }}  }
class C{  public GetIdleTimeActionHandler(SessionResourceUtil sessionResourceUtil){  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  public static byte[] hexStringToByteArray(String input){  if ((input == null) || (input.length() % 2 != 0)) {    throw new IllegalArgumentException("The input must not be null and " + "shall have an even number of hexadecimal characters. Found: " + input);  }  byte[] output=new byte[input.length() / 2];  for (int i=0; i < output.length; i++) {    output[i]=(byte)((Character.digit(input.charAt(i * 2),16) << 4) + Character.digit(input.charAt(i * 2 + 1),16));  }  return output;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_functionExpr.fixupVariables(vars,globalsSize);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.GreetMeSoundElement createGreetMeSoundElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.GreetMeSoundElementImpl();}  }
class C{  public static final JspTag findAncestorWithClass(JspTag from,Class<?> klass){  boolean isInterface=false;  if (from == null || klass == null || (!JspTag.class.isAssignableFrom(klass) && !(isInterface=klass.isInterface()))) {    return null;  }  for (; ; ) {    JspTag parent=null;    if (from instanceof SimpleTag) {      parent=((SimpleTag)from).getParent();    } else     if (from instanceof Tag) {      parent=((Tag)from).getParent();    }    if (parent == null) {      return null;    }    if (parent instanceof TagAdapter) {      parent=((TagAdapter)parent).getAdaptee();    }    if ((isInterface && klass.isInstance(parent)) || klass.isAssignableFrom(parent.getClass())) {      return parent;    }    from=parent;  }}  }
class C{  public MBeanRegistrationException(java.lang.Exception e,String message){  super(e,message);}  }
class C{  public boolean isSatisfied(){  return satisfied;}  }
class C{  private void parseQuotePktBuffer(ByteBuffer pktBuffer,String time){  StreamingQuote streamingQuote=null;  if (streamingQuoteParser != null) {    streamingQuote=streamingQuoteParser.parse(pktBuffer,time);  }  if (ZStreamingConfig.isStreamingQuoteStoringRequired() && (streamingQuoteStorage != null) && streamingQuote != null) {    streamingQuoteStorage.storeData(streamingQuote);  }  if (ZStreamingConfig.isQuoteMsgPrintable()) {    System.out.println("Quote: " + streamingQuote);  }}  }
class C{  protected final Map<ObjectClass,String> loadObjectClasses(final byte[] encodedObjectClasses,final Collection<String> objectClassNames){  final int id=decodeId(encodedObjectClasses);  return loadObjectClassesToMaps(id,objectClassNames,mappings,true);}  }
class C{  public SerializablePermission(String name,String actions){  super(name,actions);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public boolean handleAck(SIPServerTransaction ackTransaction){  if (isAckSeen() && getRemoteSeqNumber() == ackTransaction.getCSeq()) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SIPDialog::handleAck: ACK already seen by dialog -- dropping Ack" + " retransmission");    }    acquireTimerTaskSem();    try {      if (this.timerTask != null) {        this.getStack().getTimer().cancel(timerTask);        this.timerTask=null;      }    }  finally {      releaseTimerTaskSem();    }    return false;  } else   if (this.getState() == DialogState.TERMINATED) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("SIPDialog::handleAck: Dialog is terminated -- dropping ACK");    return false;  } else {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SIPDialog::handleAck: lastResponseCSeqNumber = " + lastInviteOkReceived + " ackTxCSeq "+ ackTransaction.getCSeq());    }    if (lastResponseStatusCode != null && this.lastInviteResponseCode / 100 == 2 && lastInviteResponseCSeqNumber == ackTransaction.getCSeq()) {      ackTransaction.setDialog(this,lastResponseDialogId);      ackReceived(ackTransaction.getCSeq());      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))       logger.logDebug("SIPDialog::handleACK: ACK for 2XX response --- sending to TU ");      return true;    } else {      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))       logger.logDebug(" INVITE transaction not found");      if (this.isBackToBackUserAgent()) {        this.releaseAckSem();      }      return false;    }  }}  }
class C{  public static void assertTokenEquals(Token result,Token expected){  assertThat(result.getAttributeNames()).isEqualTo(expected.getAttributeNames());  for (  CoreTokenField field : result.getAttributeNames()) {    if (CoreTokenFieldTypes.isCalendar(field)) {      Calendar resultCal=result.getAttribute(field);      Calendar expectedCal=expected.getAttribute(field);      if (resultCal.getTimeInMillis() != expectedCal.getTimeInMillis()) {        throw new AssertionError(MessageFormat.format("Milliseconds did not match for date field {0}:\n" + "Expected: {1}\n" + "  Result: {2}",field.toString(),expectedCal.getTimeInMillis(),resultCal.getTimeInMillis()));      }      int resultOffset=getTotalTimeZoneOffset(resultCal.getTimeZone());      int expectedOffset=getTotalTimeZoneOffset(expectedCal.getTimeZone());      if (resultOffset != expectedOffset) {        throw new AssertionError(MessageFormat.format("TimeZone offset did not match for date field {0}:\n" + "Expected: {1}\n" + "  Result: {2}",field.toString(),expectedOffset,resultOffset));      }    } else     if (CoreTokenFieldTypes.isByteArray(field)) {      byte[] resultValue=result.getAttribute(field);      byte[] expectedValue=expected.getAttribute(field);      if (!ArrayUtils.isEquals(resultValue,expectedValue)) {        throw new AssertionError(MessageFormat.format("Value did not match for byte[] field {0}:\n" + "Expected: {1} bytes\n" + "  Result: {2} bytes",field.toString(),expectedValue.length,resultValue.length));      }    } else {      Object resultValue=result.getAttribute(field);      Object expectedValue=expected.getAttribute(field);      if (!compareValue(resultValue,expectedValue)) {        throw new AssertionError(MessageFormat.format("Value did not match for field {0}:\n" + "Expected: {1}\n" + "  Result: {2}",field.toString(),expectedValue,resultValue));      }    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType createX509DataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl();}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  private int divaddLong(int dh,int dl,int[] result,int offset){  long carry=0;  long sum=(dl & LONG_MASK) + (result[1 + offset] & LONG_MASK);  result[1 + offset]=(int)sum;  sum=(dh & LONG_MASK) + (result[offset] & LONG_MASK) + carry;  result[offset]=(int)sum;  carry=sum >>> 32;  return (int)carry;}  }
class C{  BasicType returnType(){  if (result < 0)   return V_TYPE;  Name n=names[result];  return n.type;}  }
class C{  EncryptAction(String origFile,String newFile,boolean deleteOriginal,String alias,String encryptAlg){  this.originalFile=new File(origFile);  this.newFile=newFile;  this.deleteOriginal=deleteOriginal;  this.alias=alias;  this.encryptAlgorithm=encryptAlg;}  }
class C{  public static Matrix4 calculateProjectionMatrix(int width,int height,double fx,double fy,double cx,double cy){  double near=0.1;  double far=100;  double xScale=near / fx;  double yScale=near / fy;  double xOffset=(cx - (width / 2.0)) * xScale;  double yOffset=-(cy - (height / 2.0)) * yScale;  double m[]=new double[16];  Matrix.frustumM(m,0,xScale * -width / 2.0 - xOffset,xScale * width / 2.0 - xOffset,yScale * -height / 2.0 - yOffset,yScale * height / 2.0 - yOffset,near,far);  return new Matrix4(m);}  }
class C{  public String queryString(int what){  return EGL14.eglQueryString(mEGLDisplay,what);}  }
class C{  private void stretchViewHorizontally(View view,int crossSize){  LayoutParams lp=(LayoutParams)view.getLayoutParams();  int newWidth=crossSize - lp.leftMargin - lp.rightMargin;  newWidth=Math.max(newWidth,0);  view.measure(MeasureSpec.makeMeasureSpec(newWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(view.getMeasuredHeight(),MeasureSpec.EXACTLY));}  }
class C{  public MinExpiresHeader createMinExpiresHeader(int minExpires) throws InvalidArgumentException {  if (minExpires < 0)   throw new InvalidArgumentException("bad minExpires " + minExpires);  MinExpires min=new MinExpires();  min.setExpires(minExpires);  return min;}  }
class C{  public void insertRecord(final int row,final JKTableRecord record){  this.records.insertElementAt(record,row);  fireTableRowsInserted(row,row);}  }
class C{  static String compactClassName(final String str){  return str.replace('/','.');}  }
class C{  public Subject(NameIdentifier nameIdentifier,SubjectConfirmation subjectConfirmation) throws SAMLException {  if ((nameIdentifier == null) && (subjectConfirmation == null)) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Subject:  null NameIdentifier and SubjectConfirmation " + " specified");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (nameIdentifier != null) {    _nameIdentifier=nameIdentifier;  }  if (subjectConfirmation != null) {    _subjectConfirmation=subjectConfirmation;  }}  }
class C{  public void reset(){  start=0;  end=0;}  }
class C{  public static void initializeJMX() throws InitializationException {  try {    try {      directoryServer.mBeanServer=ManagementFactory.getPlatformMBeanServer();    } catch (    Exception e) {      logger.traceException(e);      directoryServer.mBeanServer=MBeanServerFactory.newMBeanServer();    }    directoryServer.mBeans=new ConcurrentHashMap<>();    registerAlertGenerator(directoryServer);  } catch (  Exception e) {    logger.traceException(e);    throw new InitializationException(ERR_CANNOT_CREATE_MBEAN_SERVER.get(e),e);  }}  }
class C{  protected void sendInvalidSessions(ClusterManager manager){  String[] invalidIds=manager.getInvalidatedSessions();  if (invalidIds.length > 0) {    for (int i=0; i < invalidIds.length; i++) {      try {        send(manager,invalidIds[i]);      } catch (      Exception x) {        log.error(sm.getString("ReplicationValve.send.invalid.failure",invalidIds[i]),x);      }    }  }}  }
class C{  protected AbstractDataProvider(){}  }
class C{  public void eleminateRedundentGlobals(StylesheetRoot stylesheet){  eleminateRedundent(stylesheet,m_absPaths);}  }
class C{  static void testAccess1(ClassLoader loader){  Class altClass;  try {    altClass=loader.loadClass("Inaccessible1");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed");    cnfe.printStackTrace();    return;  }  Object obj;  try {    obj=altClass.newInstance();    System.err.println("ERROR: Inaccessible1 was accessible");  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.out.println("Got expected access exception #1");    return;  }}  }
class C{  protected View createView(FlowView fv,int startOffset,int spanLeft,int rowIndex){  View lv=getLogicalView(fv);  View row=fv.getView(rowIndex);  boolean requireNextWord=(viewBuffer.size() == 0) ? false : true;  int childIndex=lv.getViewIndex(startOffset,Position.Bias.Forward);  View v=lv.getView(childIndex);  int endOffset=getLimitingOffset(v,startOffset,spanLeft,requireNextWord);  if (endOffset == startOffset) {    return null;  }  View frag;  if ((startOffset == v.getStartOffset()) && (endOffset == v.getEndOffset())) {    frag=v;  } else {    frag=v.createFragment(startOffset,endOffset);  }  if ((frag instanceof GlyphView) && (measurer != null)) {    boolean isTab=false;    int p0=frag.getStartOffset();    int p1=frag.getEndOffset();    if ((p1 - p0) == 1) {      Segment s=((GlyphView)frag).getText(p0,p1);      char ch=s.first();      if (ch == '\t') {        isTab=true;      }    }    TextLayout tl=(isTab) ? null : measurer.nextLayout(spanLeft,text.toIteratorIndex(endOffset),requireNextWord);    if (tl != null) {      ((GlyphView)frag).setGlyphPainter(new GlyphPainter2(tl));    }  }  return frag;}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  private TemplateEntry buildBranchEntry(boolean generateBranches){  final TemplateEntry entry=new TemplateEntry(this);  final List<TemplateLine> lines=new ArrayList<>(rdnLines);  lines.addAll(extraLines);  for (  final TemplateLine line : lines) {    line.generateLine(entry);  }  for (int i=0; i < subordinateTemplates.size(); i++) {    subordinateTemplates.get(i).reset(entry.getDN(),numEntriesPerTemplate.get(i));  }  if (!generateBranches) {    return null;  }  return entry;}  }
class C{  private static ODatabaseDocumentPool initPool(String dbURL,String user,String password,int minSize,int maxSize) throws InvalidException {  logger.trace("Initializing DB Pool {}",dbURL);  OGlobalConfiguration.TX_USE_LOG.setValue(true);  OGlobalConfiguration.TX_COMMIT_SYNCH.setValue(true);  OGlobalConfiguration.STORAGE_KEEP_OPEN.setValue(false);  boolean success=false;  int maxRetry=10;  int retryCount=0;  ODatabaseDocumentPool pool=null;  do {    retryCount++;    if (pool != null) {      pool.close();    }    pool=new ODatabaseDocumentPool();    pool.setup(minSize,maxSize);    warmUpPool(pool,dbURL,user,password,1);    boolean finalTry=(retryCount >= maxRetry);    success=test(pool,dbURL,user,password,finalTry);  } while (!success && retryCount < maxRetry);  if (!success) {    logger.warn("DB could not be verified.");  } else {    logger.info("DB verified on try {}",retryCount);  }  logger.debug("Opened and initialized pool {}",pool);  return pool;}  }
class C{  public static String toFullLocalDateFormat(final Date date){  return dateToString(date,FULL_DATE_FORMAT,null);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (b == null) {    throw new NullPointerException("Null buffer for read");  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  try {    for (; ; ) {      int n;      if (inf.needsInput()) {        int part;        if (len < 1) {          break;        }        part=(len < 512 ? len : 512);        inf.setInput(b,off,part);        off+=part;        len-=part;      }      do {        n=inf.inflate(buf,0,buf.length);        if (n > 0) {          out.write(buf,0,n);        }      } while (n > 0);      if (inf.finished()) {        break;      }      if (inf.needsDictionary()) {        throw new ZipException("ZLIB dictionary missing");      }    }  } catch (  DataFormatException ex) {    String msg=ex.getMessage();    if (msg == null) {      msg="Invalid ZLIB data format";    }    throw new ZipException(msg);  }}  }
class C{  public void testMaxNegZero(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  int aSign=-1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.max(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 0);}  }
class C{  void processDragOver(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragOver(dsde);  }}  }
class C{  private boolean assertStaticType(Class<?> cls,Name n){  int local=n.index();  Class<?> aclass=localClasses[local];  if (aclass != null && (aclass == cls || cls.isAssignableFrom(aclass))) {    return true;  } else   if (aclass == null || aclass.isAssignableFrom(cls)) {    localClasses[local]=cls;  }  return false;}  }
class C{  public Mp4GenreField(String genreId){  super(Mp4FieldKey.GENRE.getFieldName(),genreId);  try {    short genreVal=Short.parseShort(genreId);    if (genreVal <= GenreTypes.getMaxStandardGenreId()) {      numbers=new ArrayList<Short>();      numbers.add(++genreVal);      return;    }    numbers=new ArrayList<Short>();    numbers.add((short)(1));    return;  } catch (  NumberFormatException nfe) {  }  Integer id3GenreId=GenreTypes.getInstanceOf().getIdForValue(genreId);  if (id3GenreId != null) {    if (id3GenreId <= GenreTypes.getMaxStandardGenreId()) {      numbers=new ArrayList<Short>();      numbers.add((short)(id3GenreId + 1));      return;    }  }  numbers=new ArrayList<Short>();  numbers.add((short)(1));}  }
class C{  public byte[] encrypt(byte[] clearText){  return pbeEncrypt(clearText);}  }
class C{  public SimpleDoc(Object printData,DocFlavor flavor,DocAttributeSet attributes){  if (flavor == null || printData == null) {    throw new IllegalArgumentException("null argument(s)");  }  Class repClass=null;  try {    String className=flavor.getRepresentationClassName();    sun.reflect.misc.ReflectUtil.checkPackageAccess(className);    repClass=Class.forName(className,false,Thread.currentThread().getContextClassLoader());  } catch (  Throwable e) {    throw new IllegalArgumentException("unknown representation class");  }  if (!repClass.isInstance(printData)) {    throw new IllegalArgumentException("data is not of declared type");  }  this.flavor=flavor;  if (attributes != null) {    this.attributes=AttributeSetUtilities.unmodifiableView(attributes);  }  this.printData=printData;}  }
class C{  public static List parseOptions(org.w3c.dom.Element child) throws DiscoveryException {  List options=new ArrayList();  NodeList optionnl=child.getChildNodes();  Node option;  String nName;  for (int j=0, len=optionnl.getLength(); j < len; j++) {    option=optionnl.item(j);    if ((nName=option.getLocalName()) != null) {      String nameSpaceURI=((Element)child).getNamespaceURI();      if ((nameSpaceURI == null) || (!nameSpaceURI.equals(DiscoConstants.DISCO_NS))) {        if (debug.messageEnabled()) {          debug.message("DiscoUtils.parseOption(" + "Element): invalid namespace for node " + nName);        }        throw new DiscoveryException(bundle.getString("wrongInput"));      }      if (nName.equals("Option")) {        options.add(XMLUtils.getElementValue((Element)option));      } else {        if (debug.messageEnabled()) {          debug.message("DiscoUtils.parseOption(" + "Element): invalid node" + nName);        }        throw new DiscoveryException(bundle.getString("wrongInput"));      }    }  }  return options;}  }
class C{  public boolean isUnderflow(){  return this.type == TYPE_UNDERFLOW;}  }
class C{  public SignatureVisitor visitTypeArgument(char wildcard){  return this;}  }
class C{  public void test_unread$CII() throws IOException {  PushbackReader tobj;  String str2="0123456789";  char[] buf2=(str2 + str2 + str2).toCharArray();  char[] readBuf=new char[10];  tobj=new PushbackReader(underlying,10);  tobj.unread(buf2,15,10);  try {    tobj.unread(buf2,15,10);    fail("IOException not thrown.");  } catch (  IOException e) {  }  tobj.read(readBuf);  assertEquals("Incorrect bytes read","5678901234",new String(readBuf));  underlying.throwExceptionOnNextUse=true;  try {    tobj.read(buf2,15,10);    fail("IOException not thrown.");  } catch (  IOException e) {  }}  }
class C{  public TIMEOUT(String detailMessage,int minorCode,CompletionStatus completionStatus){  super(detailMessage,minorCode,completionStatus);}  }
class C{  public void onDestroy(){  Log.d(TAG,">>> FMRadioEMActivity.onDestroy");  mIsDestroying=true;  mHandler.removeCallbacks(null);  if (null != mHeadsetConnectionReceiver) {    Log.d(TAG,"Unregister headset broadcast receiver.");    unregisterReceiver(mHeadsetConnectionReceiver);    mHeadsetConnectionReceiver=null;  }  if (mIsPlaying) {    Log.d(TAG,"FM is Playing. So stop it.");    mService.powerDownAsync();    mIsPlaying=false;  }  if (null != mService) {    mService.unregisterFmRadioListener(mFmRadioListener);  }  mService=null;  mFmRadioListener=null;  Log.d(TAG,"<<< FMRadioEMActivity.onDestroy");  super.onDestroy();}  }
class C{  public boolean addElement(Object obj){synchronized (actions) {    if (allowToChange) {      return actions.add(obj);    }  }  return false;}  }
class C{  public CopyAction(){  super(copyAction);}  }
class C{  public void testDelete1() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  statement.execute("DELETE FROM " + DatabaseCreator.PARENT_TABLE + " WHERE id = 3;");}  }
class C{  WhoAmIExtendedResultImpl(final ResultCode resultCode){  super(resultCode);}  }
class C{  public InternalSessionEvent(InternalSession internalSession,SessionEventType eventType,long eventTime){  Reject.ifNull(internalSession,eventType,eventTime);  this.internalSession=internalSession;  this.eventType=eventType;  this.eventTime=eventTime;}  }
class C{  private Action action(String name){  if (managed.contains(name)) {    return Action.MANAGE;  } else   if (suppressed.contains(name)) {    return Action.SUPPRESS;  } else   if (relayed.contains(name)) {    return Action.RELAY;  } else {    return defaultAction;  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  ServicesProfileModel model=(ServicesProfileModel)getModel();  if (model != null) {    try {      Map values=getValues();      model.assignService(values);      forwardToServicesViewBean();    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }  } else {    forwardTo();  }}  }
class C{  public int count(){  return padstack_list.size();}  }
class C{  public void testCertPathBuilder13() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    CertPathBuilder cpb=CertPathBuilder.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",cpb.getAlgorithm(),validValues[i]);    try {      cpb=CertPathBuilder.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect algorithm",cpb.getAlgorithm(),validValues[i]);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchProviderException exeption " + e.getMessage());    }    try {      cpb=CertPathBuilder.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect algorithm",cpb.getAlgorithm(),validValues[i]);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchProviderException " + e.getMessage());    }  }}  }
class C{  public LabelView(Element elem){  super(elem);}  }
class C{  public void clearRecordedBytes(){  buffer.clear();}  }
class C{  public void testNegPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=1;  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void updateCloud(int pointCount,FloatBuffer pointBuffer){  calculateColors(pointCount,pointBuffer);  updatePoints(pointCount,pointBuffer,mColorArray);}  }
class C{  public JMenu(Action a){  this();  setAction(a);}  }
class C{  public static void sort(char[] array){  DualPivotQuicksort.sort(array);}  }
class C{  private void startListenerThreadIfNewService(URL url){  String group=url.getGroup();  if (!lookupGroupServices.containsKey(group)) {    Long value=lookupGroupServices.putIfAbsent(group,0L);    if (value == null) {      ServiceLookupThread lookupThread=new ServiceLookupThread(group);      lookupThread.setDaemon(true);      lookupThread.start();    }  }}  }
class C{  private void createAdminDataContainers() throws ADSContextException {  if (!isExistingEntry(getAdministrationSuffixDN())) {    createTopContainerEntry();  }  if (!isExistingEntry(getAdministratorContainerDN())) {    createAdministratorContainerEntry();  }  if (!isExistingEntry(getServerContainerDN())) {    createContainerEntry(getServerContainerDN());  }  if (!isExistingEntry(getServerGroupContainerDN())) {    createContainerEntry(getServerGroupContainerDN());  }  if (!isExistingEntry((getAllServerGroupDN()))) {    Map<ServerGroupProperty,Object> allServersGroupsMap=new HashMap<>();    allServersGroupsMap.put(ServerGroupProperty.UID,ALL_SERVERGROUP_NAME);    createServerGroup(allServersGroupsMap);  }  if (!isExistingEntry(getInstanceKeysContainerDN())) {    createContainerEntry(getInstanceKeysContainerDN());  }  if (!isExistingEntry(getSecretKeysContainerDN())) {    createContainerEntry(getSecretKeysContainerDN());  }}  }
class C{  private static <T>Argument createArgument(PropertyEditorModification<T> mod) throws ArgumentException {  StringArgument arg;  PropertyDefinition<T> propertyDefinition=mod.getPropertyDefinition();  String propName=propertyDefinition.getName();switch (mod.getType()) {case RESET:    arg=StringArgument.builder(OPTION_DSCFG_LONG_RESET).shortIdentifier(OPTION_DSCFG_SHORT_RESET).description(INFO_DSCFG_DESCRIPTION_RESET_PROP.get()).multiValued().valuePlaceholder(INFO_PROPERTY_PLACEHOLDER.get()).buildArgument();  arg.addValue(propName);break;case REMOVE:arg=StringArgument.builder(OPTION_DSCFG_LONG_REMOVE).shortIdentifier(OPTION_DSCFG_SHORT_REMOVE).description(INFO_DSCFG_DESCRIPTION_REMOVE_PROP_VAL.get()).multiValued().valuePlaceholder(INFO_VALUE_SET_PLACEHOLDER.get()).buildArgument();for (T value : mod.getModificationValues()) {arg.addValue(propName + ':' + getArgumentValue(propertyDefinition,value));}break;case ADD:arg=StringArgument.builder(OPTION_DSCFG_LONG_ADD).shortIdentifier(OPTION_DSCFG_SHORT_ADD).description(INFO_DSCFG_DESCRIPTION_ADD_PROP_VAL.get()).multiValued().valuePlaceholder(INFO_VALUE_SET_PLACEHOLDER.get()).buildArgument();for (T value : mod.getModificationValues()) {arg.addValue(propName + ':' + getArgumentValue(propertyDefinition,value));}break;case SET:arg=StringArgument.builder(OPTION_DSCFG_LONG_SET).shortIdentifier(OPTION_DSCFG_SHORT_SET).description(INFO_DSCFG_DESCRIPTION_PROP_VAL.get()).multiValued().valuePlaceholder(INFO_VALUE_SET_PLACEHOLDER.get()).buildArgument();for (T value : mod.getModificationValues()) {arg.addValue(propName + ':' + getArgumentValue(propertyDefinition,value));}break;default :throw new IllegalStateException("Unknown modification type: " + mod.getType());}return arg;}  }
class C{  public static void rebuildSessionFactory(){  try {    configuration.configure();    serviceRegistry=new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();    sessionFactory=configuration.buildSessionFactory(serviceRegistry);  } catch (  Exception e) {    System.err.println("%%%% Error Creating SessionFactory %%%%");    e.printStackTrace();  }}  }
class C{  public static RunStats delegateGetBucketForLong(int buckets) throws Exception {  Long startTime=System.currentTimeMillis();  PrimaryIndexBucketGeneratorImpl ibg=new PrimaryIndexBucketGeneratorImpl(FieldDataType.LONG,buckets);  PrimaryIndexBucketLocatorImpl locator=new PrimaryIndexBucketLocatorImpl(null,null,null,null,null,null,null,ibg.generateBuckets(),null);  logger.debug("test to getBucket for the bucket distribution on Long values");  HashMap<Long,List<Object>> hm=new HashMap<>();  SummaryStatistics stats=new SummaryStatistics();  Random r=new Random();  for (int i=-200000; i < 200000; i++) {    Long randomLong=Long.MIN_VALUE + r.nextLong() * Long.MAX_VALUE;    Long bucketId=locator.getBucket(randomLong,FieldDataType.LONG);    TestUtils.calculate(hm,stats,bucketId,randomLong);  }  Long runTime=System.currentTimeMillis() - startTime;  RunStats runStats=new RunStats("BucketForLong",FieldDataType.LONG,runTime,stats,hm);  logger.debug(runStats.toString());  return runStats;}  }
class C{  public static XmlPullParserFactory newInstance() throws XmlPullParserException {  return newInstance(null,null);}  }
class C{  public boolean add(E e){  if (offer(e))   return true; else   throw new IllegalStateException("Queue full");}  }
class C{  public SNMPUserAcl(SNMPConnectionHandlerCfg configuration){  this.currentConfig=configuration;  this.contextName=this.currentConfig.getCommunity();  this.usersList=this.currentConfig.getAllowedUser();  this.trapDestinations=this.currentConfig.getTrapsDestination();  SecurityLevel level=this.currentConfig.getSecurityLevel();  this.securityLevel=SNMPConnectionHandlerDefinitions.SECURITY_LEVELS.get(level.toString());}  }
class C{  public UserNameAttribute(String name){  super(OctetUtils.toOctets(AttributeType.USER_NAME,name));  final byte[] octets=super.getOctets();  this.username=new String(octets,2,octets.length - 2);}  }
class C{  public DecisionImpl() throws XACMLException {}  }
class C{  public void deleteField(Mp4FieldKey mp4Key) throws KeyNotFoundException {  if (mp4Key == null) {    throw new KeyNotFoundException();  }  super.deleteField(mp4Key.getFieldName());}  }
class C{  public static Cookie newCookie(String name,String value,String path,String domain){  return newCookie(name,value,defAge,path,domain);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  MAPCreateDeviceModel model=(MAPCreateDeviceModel)getModel();  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  try {    Map values=ps.getAttributeValues(model.getCreateDeviceAttributeNames());    Set setParentId=new HashSet(2);    setParentId.add(attrParentId);    values.put("parentId",setParentId);    model.createDevice(values);    MAPDeviceProfileViewBean vb=(MAPDeviceProfileViewBean)getViewBean(MAPDeviceProfileViewBean.class);    vb.deviceName=(String)AMAdminUtils.getValue((Set)values.get(MAPCreateDeviceModel.ATTRIBUTE_NAME_CLIENT_TYPE));    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public Crops(CropState state){  this(DEFAULT_TYPE,state);  setState(state);}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateCrtKeySpec spec){  this.modulus=spec.getModulus();  this.publicExponent=spec.getPublicExponent();  this.privateExponent=spec.getPrivateExponent();  this.primeP=spec.getPrimeP();  this.primeQ=spec.getPrimeQ();  this.primeExponentP=spec.getPrimeExponentP();  this.primeExponentQ=spec.getPrimeExponentQ();  this.crtCoefficient=spec.getCrtCoefficient();}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  protected void tearDown() throws Exception {  super.tearDown();  if (oos != null) {    try {      oos.close();    } catch (    Exception e) {    }  }  if (oos_ioe != null) {    try {      oos_ioe.close();    } catch (    Exception e) {    }  }  if (f != null && f.exists()) {    if (!f.delete()) {      fail("Error cleaning up files during teardown");    }  }}  }
class C{  public SessionIndexImpl(String value){  this.sessionValue=value;}  }
class C{  public CollectiveAttributeSubentriesVirtualAttributeProvider(){  super();}  }
class C{  public XPathExpressionException(Throwable cause){  super(cause);}  }
class C{  public void addIssuer(X500Principal issuer){  if (issuer == null) {    throw new NullPointerException("issuer == null");  }  if (issuerNames == null) {    issuerNames=new ArrayList<String>();  }  String name=issuer.getName(X500Principal.CANONICAL);  if (!issuerNames.contains(name)) {    issuerNames.add(name);  }  if (issuerPrincipals == null) {    issuerPrincipals=new ArrayList<X500Principal>(issuerNames.size());  }  int size=issuerNames.size() - 1;  for (int i=issuerPrincipals.size(); i < size; i++) {    issuerPrincipals.add(new X500Principal(issuerNames.get(i)));  }  issuerPrincipals.add(issuer);}  }
class C{  @Override public void propertyChange(PropertyChangeEvent e){  if (SynthLookAndFeel.shouldUpdateStyle(e)) {    updateStyle((JRootPane)e.getSource());  }  super.propertyChange(e);}  }
class C{  public MemoryRuleSet(String prefix){  super();  this.namespaceURI=null;  this.prefix=prefix;}  }
class C{  public Name addAll(int posn,Name n) throws InvalidNameException {  if (n instanceof CompositeName) {    impl.addAll(posn,n.getAll());    return this;  } else {    throw new InvalidNameException("Not a composite name: " + n.toString());  }}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (!(c instanceof JumboEnumSet))   return super.addAll(c);  JumboEnumSet<?> es=(JumboEnumSet<?>)c;  if (es.elementType != elementType) {    if (es.isEmpty())     return false; else     throw new ClassCastException(es.elementType + " != " + elementType);  }  for (int i=0; i < elements.length; i++)   elements[i]|=es.elements[i];  return recalculateSize();}  }
class C{  @Override public Promise<QueryResponse,ResourceException> handleQuery(Context context,QueryRequest request,final QueryResourceHandler handler){  try {    return connectionFactory.getConnection().queryAsync(new UpdateContext(context),copyOfQueryRequest(request).setResourcePath(updateStore),handler);  } catch (  ResourceException e) {    return e.asPromise();  }}  }
class C{  public RestAuthException(int responseStatus,String errorMessage){  super(errorMessage);  statusCode=responseStatus;}  }
class C{  public XNumber(Number num){  super();  m_val=num.doubleValue();  setObject(num);}  }
class C{  protected String start(ContextName cn,StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.start(printWriter,cn,smClient);  return stringWriter.toString();}  }
class C{  protected void paint(SynthContext context,Graphics g){  int selectedIndex=tabPane.getSelectedIndex();  int tabPlacement=tabPane.getTabPlacement();  ensureCurrentLayout();  if (!scrollableTabLayoutEnabled()) {    Insets insets=tabPane.getInsets();    int x=insets.left;    int y=insets.top;    int width=tabPane.getWidth() - insets.left - insets.right;    int height=tabPane.getHeight() - insets.top - insets.bottom;    int size;switch (tabPlacement) {case LEFT:      width=calculateTabAreaWidth(tabPlacement,runCount,maxTabWidth);    break;case RIGHT:  size=calculateTabAreaWidth(tabPlacement,runCount,maxTabWidth);x=x + width - size;width=size;break;case BOTTOM:size=calculateTabAreaHeight(tabPlacement,runCount,maxTabHeight);y=y + height - size;height=size;break;case TOP:default :height=calculateTabAreaHeight(tabPlacement,runCount,maxTabHeight);}tabAreaBounds.setBounds(x,y,width,height);if (g.getClipBounds().intersects(tabAreaBounds)) {paintTabArea(tabAreaContext,g,tabPlacement,selectedIndex,tabAreaBounds);}}paintContentBorder(tabContentContext,g,tabPlacement,selectedIndex);}  }
class C{  ApiDescription subResourcesApi(ApiProducer<ApiDescription> producer){  return subResourceRouter.api(producer);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  int length;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  if (equals(6,length)) {    assertEquals("length_wo_space",6,length);  } else {    assertEquals("length_w_space",13,length);  }}  }
class C{  static int updateConfigFile(final File configFile,final Filter filter,final ChangeOperationType changeType,final String... ldifLines) throws IOException {  final File copyConfig=File.createTempFile("copyConfig",".tmp",configFile.getParentFile());  int changeCount=0;  final Schema schema=getUpgradeSchema();  try (LDIFEntryReader entryReader=new LDIFEntryReader(new FileInputStream(configFile)).setSchema(schema);LDIFEntryWriter writer=new LDIFEntryWriter(new FileOutputStream(copyConfig))){    writer.setWrapColumn(80);    writer.writeComment(INFO_CONFIG_FILE_HEADER.get());    writer.setWrapColumn(0);    DN ldifDN=null;    Set<DN> ldifDNs=new HashSet<>();    if (filter == null) {switch (changeType) {case ADD:        ldifDN=DN.valueOf(removeDnPrefix(ldifLines[0]));      ldifDNs.add(ldifDN);    break;case DELETE:  for (  String dnLine : ldifLines) {    ldifDNs.add(DN.valueOf(removeDnPrefix(dnLine)));  }break;}}boolean entryAlreadyExist=false;final Filter f=filter != null ? filter : Filter.alwaysFalse();final Matcher matcher=f.matcher(schema);while (entryReader.hasNext()) {Entry entry=entryReader.readEntry();final DN entryDN=entry.getName();if (changeType == MODIFY && matcher.matches(entry) == ConditionResult.TRUE) {try {final ModifyRequest mr=Requests.newModifyRequest(readLDIFLines(entryDN,changeType,ldifLines));entry=Entries.modifyEntryPermissive(entry,mr.getModifications());changeCount++;logger.debug(LocalizableMessage.raw("The following entry has been modified : %s",entryDN));} catch (Exception ex) {logger.error(LocalizableMessage.raw(ex.getMessage()));}}if (ldifDNs.remove(entryDN)) {logger.debug(LocalizableMessage.raw("Entry %s found",entryDN));entryAlreadyExist=true;if (changeType == DELETE) {entry=null;changeCount++;logger.debug(LocalizableMessage.raw("The following entry has been deleted : %s",entryDN));}}if (entry != null) {writer.writeEntry(entry);}}if (changeType == ADD && !entryAlreadyExist) {writer.writeEntry(Requests.newAddRequest(ldifLines));logger.debug(LocalizableMessage.raw("Entry successfully added %s in %s",ldifDN,configFile.getAbsolutePath()));changeCount++;}} catch (Exception ex) {throw new IOException(ex.getMessage());}try {rename(copyConfig,configFile);return changeCount;} catch (IOException e) {logger.error(LocalizableMessage.raw(e.getMessage()));deleteRecursively(configFile);throw e;}}  }
class C{  public static Name lowerCamel(String... pieces){  List<NamePiece> namePieces=new ArrayList<>();  for (  String piece : pieces) {    validateCamel(piece,CheckCase.LOWER);    namePieces.add(new NamePiece(piece,CaseFormat.LOWER_CAMEL));  }  return new Name(namePieces);}  }
class C{  @Override public void init(ServletConfig config) throws ServletException {  try {    hostName=stringValue(config,HOST);    port=Integer.valueOf(stringValue(config,PORT));    userDN=stringValue(config,USERDN);    userPassword=stringValue(config,USERPWD);    useSSL=booleanValue(config,USESSL);    useStartTLS=booleanValue(config,USESTARTTLS);    trustStorePathValue=stringValue(config,TRUSTSTOREPATH);    trustStorePasswordValue=stringValue(config,TRUSTSTOREPASSWORD);    trustAll=booleanValue(config,TRUSTALLCERTS);    useHTTPAuthzID=booleanValue(config,USEHTTPAUTHZID);    Enumeration<String> names=config.getServletContext().getInitParameterNames();    while (names.hasMoreElements()) {      String name=names.nextElement();      if (name.startsWith(EXOPSTRINGPREFIX) && Boolean.valueOf(config.getServletContext().getInitParameter(name))) {        exopStrings.add(name.substring(EXOPSTRINGPREFIX.length()));      }    }    System.setProperty("mapAnyUriToUri","true");    if (jaxbContext == null) {      jaxbContext=JAXBContext.newInstance(PKG_NAME,getClass().getClassLoader());    }    if (schema == null) {      URL url=getClass().getResource("/resources/DSMLv2.xsd");      if (url != null) {        SchemaFactory sf=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);        schema=sf.newSchema(url);      }    }    DirectoryServer.bootstrapClient();  } catch (  Exception je) {    je.printStackTrace();    throw new ServletException(je.getMessage());  }}  }
class C{  public Period minusYears(long yearsToSubtract){  return (yearsToSubtract == Long.MIN_VALUE ? plusYears(Long.MAX_VALUE).plusYears(1) : plusYears(-yearsToSubtract));}  }
class C{  public void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs) {    if (null != m_countMatchPattern)     m_countMatchPattern.getExpression().callVisitors(m_countMatchPattern,visitor);    if (null != m_fromMatchPattern)     m_fromMatchPattern.getExpression().callVisitors(m_fromMatchPattern,visitor);    if (null != m_valueExpr)     m_valueExpr.getExpression().callVisitors(m_valueExpr,visitor);    if (null != m_format_avt)     m_format_avt.callVisitors(visitor);    if (null != m_groupingSeparator_avt)     m_groupingSeparator_avt.callVisitors(visitor);    if (null != m_groupingSize_avt)     m_groupingSize_avt.callVisitors(visitor);    if (null != m_lang_avt)     m_lang_avt.callVisitors(visitor);    if (null != m_lettervalue_avt)     m_lettervalue_avt.callVisitors(visitor);  }  super.callChildVisitors(visitor,callAttrs);}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder();  builder.append(getClass().getSimpleName());  builder.append("[file='");  builder.append(getDirectory().getPath());  builder.append('\'');  if (fileFilter != null) {    builder.append(", ");    builder.append(fileFilter.toString());  }  builder.append(", listeners=");  builder.append(listeners.size());  builder.append("]");  return builder.toString();}  }
class C{  void applyExpensiveOutlineWithBlur(Bitmap srcDst,Canvas srcDstCanvas,int color,int outlineColor){  applyExpensiveOutlineWithBlur(srcDst,srcDstCanvas,color,outlineColor,true);}  }
class C{  public boolean isEditable(final int column){  return getTableColumn(column).isEditable();}  }
class C{  public boolean deleteOldRdn(){  return deleteOldRdn;}  }
class C{  public void paintMenuBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  private String readPasswordFile(String filePath,boolean decodePassword){  BufferedReader br=null;  String p=null;  try {    br=new BufferedReader(new InputStreamReader(new FileInputStream(filePath)));    p=br.readLine();    if (decodePassword) {      p=decodePassword(p);    }  } catch (  IOException e) {    logger.error("Unable to read private key password file " + filePath,e);  } finally {    if (br != null) {      try {        br.close();      } catch (      IOException e) {        logger.warning("Could not close file " + filePath,e);      }    }  }  return p;}  }
class C{  private MultiValuedPropertyEditor(ManagedObject<?> mo,PropertyDefinition<?> pd){  Reject.ifFalse(pd.hasOption(PropertyOption.MULTI_VALUED));  this.mo=mo;  this.pd=pd;}  }
class C{  public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen,int bufSize){  Tailer tailer=new Tailer(file,listener,delayMillis,end,reOpen,bufSize);  Thread thread=new Thread(tailer);  thread.setDaemon(true);  thread.start();  return tailer;}  }
class C{  public static Foo findByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_First(uuid,companyId,orderByComparator);}  }
class C{  @Override public final boolean isEnabled(){  return isEnabled;}  }
class C{  public DiffOptions useExactMatching(){  this.useExactMatching=true;  return this;}  }
