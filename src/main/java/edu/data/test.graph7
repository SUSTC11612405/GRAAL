class C{  public PhotosReorderPhotosQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public PokemonGo(OkHttpClient client,Time time){  this(client,time,hash(UUID.randomUUID().toString()));}  }
class C{  public static boolean hasJellyBean(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;}  }
class C{  protected double partialerror(double x[],double z) throws IllegalArgumentException {  if (x.length < 1) {    throw new IllegalArgumentException("Interpolation array cannot be empty.");  }  double out=1;  for (int i=0; i < x.length; i++) {    out*=(z - x[i]) / (i + 1);  }  return out;}  }
class C{  public final boolean canSetInt(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetInt());}  }
class C{  public int findLastVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  private void createUI(){  setLayout(new BorderLayout());  box=Box.createVerticalBox();  add(box,BorderLayout.CENTER);  setUpLiteralPanel();  setUpPropertyPanel();  setUpEnvVarPanel();  setUpFunctionPanel();  box.add(createApplyRevertPanel());}  }
class C{  public void writeDataFile(String filename) throws DataFileException {  File outFile=new File(filename);  FileOutputStream fos=null;  try {    fos=new FileOutputStream(outFile);  } catch (  FileNotFoundException e) {    throw new DataFileException("Could not open file " + filename,e);  }  try {    writeDataFile(fos);  }  finally {    try {      if (fos != null)       fos.close();    } catch (    IOException e) {      throw new DataFileException("Could not close file " + filename + ", may not have written correctly;",e);    }  }}  }
class C{  private static void populateSupportedMap(){  List<String> classNameList=new ArrayList<String>();  classNameList.add(BuiltInDataFlavour.class.getName());  List<DataFlavor> dataFlavourList=new ArrayList<DataFlavor>();  List<DataFlavor> destinationFolderList=new ArrayList<DataFlavor>();  List<DataFlavor> destinationGeoServerList=new ArrayList<DataFlavor>();  for (  String className : classNameList) {    try {      DataFlavourInterface obj=(DataFlavourInterface)Class.forName(className).newInstance();      obj.populate(dataFlavourList,destinationFolderList,destinationGeoServerList);    } catch (    InstantiationException|IllegalAccessException|ClassNotFoundException e) {      ConsoleManager.getInstance().exception(DataFlavourManager.class,e);    }  }  dataFlavourArray=convertToArray(dataFlavourList);  populate(FOLDER_DATAITEM_FLAVOR,convertToArray(destinationFolderList));  populate(GEOSERVER_WORKSPACE_DATAITEM_FLAVOUR,convertToArray(destinationGeoServerList));}  }
class C{  public void put(String key,InputStream stream){  put(key,stream,null);}  }
class C{  public static boolean dataValueIsZeroAndInsignificant(String value,DataElement dataElement){  AggregationType aggregationType=dataElement.getAggregationType();  return dataElement.getValueType().isNumeric() && MathUtils.isZero(value) && !dataElement.isZeroIsSignificant()&& !(aggregationType == AggregationType.AVERAGE_SUM_ORG_UNIT || aggregationType == AggregationType.AVERAGE);}  }
class C{  public Lexicon removeLowCoverageWords(double coverage){  int minDf=(int)(numDocs * coverage);  return removeLowDfWords(minDf);}  }
class C{  private static byte[] bitmapToByte(Bitmap b){  if (b == null) {    return null;  }  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  @Override public void clear(){  super.clear();  fEntityName=null;}  }
class C{  public static char lowSurrogate(int c){  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);}  }
class C{  public static double[] ndary(int n){  double d[]=new double[n];  for (int i=0; i < n; i++) {    d[i]=R.nextGaussian();  }  return d;}  }
class C{  public boolean isRepeated(){  return proto.getLabel() == FieldDescriptorProto.Label.LABEL_REPEATED;}  }
class C{  public StorageGetQuery keys(String... value){  return unsafeParam("keys",value);}  }
class C{  private boolean checkTimeDeadband(final SourceDataTag currentSourceDataTag,final ValueUpdate castedUpdate){  if (currentSourceDataTag.getAddress().isTimeDeadbandEnabled()) {    this.equipmentLogger.debug("checkTimeDeadband - passing update to time-deadband scheduler for tag " + currentSourceDataTag.getId());    this.equipmentTimeDeadband.addToTimeDeadband(currentSourceDataTag,castedUpdate);    return false;  } else {    if (this.equipmentTimeDeadband.getSdtTimeDeadbandSchedulers().containsKey(currentSourceDataTag.getId())) {      this.equipmentLogger.debug("checkTimeDeadband - remove time-deadband scheduler for tag " + currentSourceDataTag.getId());      this.equipmentTimeDeadband.removeFromTimeDeadband(currentSourceDataTag);    }    return true;  }}  }
class C{  public ValidatedPredicate(){  super(VisualItem.VALIDATED);}  }
class C{  private static String handleInvalidChars(String str){  String result="";  final String replaceAmpresand1="&";  final String replaceAmpresand2="amp;";  final String replaceAmpresand=replaceAmpresand1 + replaceAmpresand2;  final int ampLength=replaceAmpresand2.length();  StringTokenizer strTokinizer=new StringTokenizer(str,String.valueOf(replaceAmpresand1),true);  while (strTokinizer.hasMoreTokens()) {    String token=strTokinizer.nextToken();    if (token.startsWith(replaceAmpresand2)) {      token=token.substring(ampLength);    } else     if (token.equals(replaceAmpresand1)) {      token=replaceAmpresand;    }    result+=token;  }  return result;}  }
class C{  public ArrayRealVector(Double[] d){  data=new double[d.length];  for (int i=0; i < d.length; i++) {    data[i]=d[i].doubleValue();  }}  }
class C{  public AsyncHttpClient(int httpPort){  this(false,httpPort,443);}  }
class C{  private void wrapSplit(Taxa taxa,SplitSystem splits,int s,int[] cycle,PhyloGraph graph) throws Exception {  BitSet part=(BitSet)(splits.getSplit(s).getA().clone());  if (part.get(1))   part=(BitSet)(splits.getSplit(s).getB().clone());  int xp=0;  int xq=0;  for (int i=1; i <= ntax; i++) {    int t=cycle[i];    if (part.get(t)) {      if (xp == 0)       xp=t;      xq=t;    }  }  Node v=graph.getTaxon2Node(xp);  Node z=graph.getTaxon2Node(xq);  Edge targetLeafEdge=graph.getFirstAdjacentEdge(z);  Edge e=graph.getFirstAdjacentEdge(v);  v=graph.getOpposite(v,e);  Node u=null;  List<Edge> leafEdges=new LinkedList<>();  leafEdges.add(e);  Edge nextE;  NodeSet nodesVisited=new NodeSet(graph);  do {    Edge f=e;    if (nodesVisited.contains(v)) {      System.err.println(graph);      throw new Exception("Node already visited: " + v);    }    nodesVisited.add(v);    Edge f0=f;    f=graph.getNextAdjacentEdgeCyclic(f0,v);    while (isLeafEdge(f,graph)) {      leafEdges.add(f);      if (f == targetLeafEdge) {        break;      }      if (f == f0)       throw new RuntimeException("Node wraparound: f=" + f + " f0="+ f0);      f=graph.getNextAdjacentEdgeCyclic(f,v);    }    if (isLeafEdge(f,graph))     nextE=null; else     nextE=f;    Node w=graph.newNode();    Edge h=graph.newEdge(w,null,v,f0,Edge.AFTER,Edge.AFTER,null);    graph.setSplit(h,s);    graph.setWeight(h,splits.getSplit(s).getWeight());    if (u != null) {      h=graph.newEdge(w,u,null);      graph.setSplit(h,graph.getSplit(e));      graph.setWeight(h,graph.getWeight(e));    }    for (    Edge leafEdge : leafEdges) {      f=leafEdge;      h=graph.newEdge(w,graph.getOpposite(v,f));      graph.setSplit(h,graph.getSplit(f));      graph.setWeight(h,graph.getWeight(f));      graph.deleteEdge(f);    }    leafEdges.clear();    if (nextE != null) {      v=graph.getOpposite(v,nextE);      e=nextE;      u=w;    }  } while (nextE != null);}  }
class C{  @deprecated public boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (getClass() != obj.getClass())   return false;  CompactCharArray other=(CompactCharArray)obj;  for (int i=0; i < 65536; i++) {    if (elementAt((char)i) != other.elementAt((char)i))     return false;  }  return true;}  }
class C{  protected void clearRows(boolean clearData){  if (clearData) {    rows.clear();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_HE_IS_ALREADY_MEMBER_OF_OUR_FORCE(String value0){  return new SM_SYSTEM_MESSAGE(1301014,value0);}  }
class C{  public static Map<String,Object> processWorkEffortEventReminders(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale localePar=(Locale)context.get("locale");  Timestamp now=new Timestamp(System.currentTimeMillis());  List<GenericValue> eventReminders=null;  try {    eventReminders=EntityQuery.use(delegator).from("WorkEffortEventReminder").where(EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("reminderDateTime",EntityOperator.EQUALS,null),EntityCondition.makeCondition("reminderDateTime",EntityOperator.LESS_THAN_EQUAL_TO,now)),EntityOperator.OR)).queryList();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"WorkEffortEventRemindersRetrivingError",UtilMisc.toMap("errorString",e),localePar));  }  for (  GenericValue reminder : eventReminders) {    if (UtilValidate.isEmpty(reminder.get("contactMechId"))) {      continue;    }    int repeatCount=reminder.get("repeatCount") == null ? 0 : reminder.getLong("repeatCount").intValue();    int currentCount=reminder.get("currentCount") == null ? 0 : reminder.getLong("currentCount").intValue();    GenericValue workEffort=null;    try {      workEffort=reminder.getRelatedOne("WorkEffort",false);    } catch (    GenericEntityException e) {      Debug.logWarning("Error while getting work effort: " + e,module);    }    if (workEffort == null) {      try {        reminder.remove();      } catch (      GenericEntityException e) {        Debug.logWarning("Error while removing work effort event reminder: " + e,module);      }      continue;    }    Locale locale=reminder.getString("localeId") == null ? Locale.getDefault() : new Locale(reminder.getString("localeId"));    TimeZone timeZone=reminder.getString("timeZoneId") == null ? TimeZone.getDefault() : TimeZone.getTimeZone(reminder.getString("timeZoneId"));    Map<String,Object> parameters=UtilMisc.toMap("locale",locale,"timeZone",timeZone,"workEffortId",reminder.get("workEffortId"));    Map<String,Object> processCtx=UtilMisc.toMap("reminder",reminder,"bodyParameters",parameters,"userLogin",context.get("userLogin"));    Calendar cal=UtilDateTime.toCalendar(now,timeZone,locale);    Timestamp reminderStamp=reminder.getTimestamp("reminderDateTime");    Date eventDateTime=workEffort.getTimestamp("estimatedStartDate");    String tempExprId=workEffort.getString("tempExprId");    if (UtilValidate.isNotEmpty(tempExprId)) {      TemporalExpression temporalExpression=null;      try {        temporalExpression=TemporalExpressionWorker.getTemporalExpression(delegator,tempExprId);      } catch (      GenericEntityException e) {        Debug.logWarning("Error while getting temporal expression, id = " + tempExprId + ": "+ e,module);      }      if (temporalExpression != null) {        eventDateTime=temporalExpression.first(cal).getTime();        Date reminderDateTime=null;        long reminderOffset=reminder.get("reminderOffset") == null ? 0 : reminder.getLong("reminderOffset").longValue();        if (reminderStamp == null) {          if (reminderOffset != 0) {            cal.setTime(eventDateTime);            TimeDuration duration=TimeDuration.fromLong(reminderOffset);            duration.addToCalendar(cal);            reminderDateTime=cal.getTime();          } else {            reminderDateTime=eventDateTime;          }        } else {          reminderDateTime=new Date(reminderStamp.getTime());        }        if (reminderDateTime.before(now) && reminderStamp != null) {          try {            parameters.put("eventDateTime",new Timestamp(eventDateTime.getTime()));            dispatcher.runSync("processWorkEffortEventReminder",processCtx);            if (repeatCount != 0 && currentCount + 1 >= repeatCount) {              reminder.remove();            } else {              cal.setTime(reminderDateTime);              Date newReminderDateTime=null;              if (reminderOffset != 0) {                TimeDuration duration=TimeDuration.fromLong(-reminderOffset);                duration.addToCalendar(cal);                cal.setTime(temporalExpression.next(cal).getTime());                duration=TimeDuration.fromLong(reminderOffset);                duration.addToCalendar(cal);                newReminderDateTime=cal.getTime();              } else {                newReminderDateTime=temporalExpression.next(cal).getTime();              }              reminder.set("currentCount",Long.valueOf(currentCount + 1));              reminder.set("reminderDateTime",new Timestamp(newReminderDateTime.getTime()));              reminder.store();            }          } catch (          GenericEntityException e) {            Debug.logWarning("Error while processing temporal expression reminder, id = " + tempExprId + ": "+ e,module);          }catch (          GenericServiceException e) {            Debug.logError(e,module);          }        } else         if (reminderStamp == null) {          try {            reminder.set("reminderDateTime",new Timestamp(reminderDateTime.getTime()));            reminder.store();          } catch (          GenericEntityException e) {            Debug.logWarning("Error while processing temporal expression reminder, id = " + tempExprId + ": "+ e,module);          }        }      }      continue;    }    if (reminderStamp != null) {      Date reminderDateTime=new Date(reminderStamp.getTime());      if (reminderDateTime.before(now)) {        try {          parameters.put("eventDateTime",eventDateTime);          dispatcher.runSync("processWorkEffortEventReminder",processCtx);          TimeDuration duration=TimeDuration.fromNumber(reminder.getLong("repeatInterval"));          if ((repeatCount != 0 && currentCount + 1 >= repeatCount) || duration.isZero()) {            reminder.remove();          } else {            cal.setTime(now);            duration.addToCalendar(cal);            reminderDateTime=cal.getTime();            reminder.set("currentCount",Long.valueOf(currentCount + 1));            reminder.set("reminderDateTime",new Timestamp(reminderDateTime.getTime()));            reminder.store();          }        } catch (        GenericEntityException e) {          Debug.logWarning("Error while processing event reminder: " + e,module);        }catch (        GenericServiceException e) {          Debug.logError(e,module);        }      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public LogicalMetric make(){  return maker.make(metricName,dependencyMetricNames);}  }
class C{  public BKLogSegmentWriter startLogSegment(long txId,boolean bestEffort,boolean allowMaxTxID) throws IOException {  Stopwatch stopwatch=Stopwatch.createStarted();  boolean success=false;  try {    BKLogSegmentWriter writer=doStartLogSegment(txId,bestEffort,allowMaxTxID);    success=true;    return writer;  }  finally {    if (success) {      openOpStats.registerSuccessfulEvent(stopwatch.stop().elapsed(TimeUnit.MICROSECONDS));    } else {      openOpStats.registerFailedEvent(stopwatch.stop().elapsed(TimeUnit.MICROSECONDS));    }  }}  }
class C{  public static final void removeNullValues(ArrayList types){  ArrayList filter=new ArrayList(1);  filter.add(null);  types.removeAll(filter);}  }
class C{  public UniqueVector(){  elementSet=new java.util.HashSet();  elementVector=new java.util.Vector();}  }
class C{  public PolygonRenderer(){  this(Constants.EDGE_TYPE_LINE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_CHARGE_ALL_FAIL_EQUIPED_ALREADY_CHARGED(String value0){  return new SM_SYSTEM_MESSAGE(1400894,value0);}  }
class C{  public DocumentNGramGraph allNotIn(DocumentNGramGraph dgOtherGraph){  EdgeCachedLocator eclLocator=new EdgeCachedLocator(Math.max(length(),dgOtherGraph.length()));  DocumentNGramGraph dgClone=(DocumentNGramGraph)clone();  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gCloneLevel=dgClone.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gOtherGraphLevel=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);    if (gOtherGraphLevel == null)     continue;    java.util.Iterator iIter=Arrays.asList(gCloneLevel.getEdgeSet().toArray()).iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gOtherGraphLevel,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gCloneLevel.removeEdge(weCurItem);        eclLocator.resetCache();      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  return dgClone;}  }
class C{  private Object parseElement(Node element) throws XmlParseException {  try {    return parseElementRaw(element);  } catch (  Exception e) {    throw new XmlParseException("Failed to parse: " + element.getNodeName(),e);  }}  }
class C{  @Override public Filter createFilter(){  return new EqualsExtended();}  }
class C{  @Override public void readConfig(){  Properties mainProperties=new Properties();  if (configPropertiesFile != null) {    if (configPropertiesFile.exists()) {      try {        FileInputStream file=new FileInputStream(configPropertiesFile);        mainProperties.load(file);        file.close();      } catch (      FileNotFoundException e) {        e.printStackTrace();      }catch (      IOException e) {        e.printStackTrace();      }    }  }  fieldValueMap.clear();  for (  Object key : mainProperties.keySet()) {    String fieldName=(String)key;    fieldValueMap.put(fieldName,mainProperties.getProperty(fieldName));  }}  }
class C{  private Var addProperty(VarProperty property){  if (property.isUnique()) {    testUniqueProperty((UniqueVarProperty)property);  }  properties.add(property);  return this;}  }
class C{  protected boolean isDefaultValue(double value){  return FastMath.abs(value) < epsilon;}  }
class C{  public static boolean interfaceOf(Class<?> objectClass,Class<?> interfaceClass){  while (objectClass != null) {    Class<?>[] ifaces=objectClass.getInterfaces();    for (    Class<?> iface : ifaces) {      if (iface == interfaceClass)       return true;    }    objectClass=objectClass.getSuperclass();  }  return false;}  }
class C{  public EnvInfo info(){  if (closed) {    throw new AlreadyClosedException();  }  final MDB_envinfo info=new MDB_envinfo(RUNTIME);  checkRc(LIB.mdb_env_info(ptr,info));  final long mapAddress;  if (info.f0_me_mapaddr.get() == null) {    mapAddress=0;  } else {    mapAddress=info.f0_me_mapaddr.get().address();  }  return new EnvInfo(mapAddress,info.f1_me_mapsize.longValue(),info.f2_me_last_pgno.longValue(),info.f3_me_last_txnid.longValue(),info.f4_me_maxreaders.intValue(),info.f5_me_numreaders.intValue());}  }
class C{  private void addClipboardInfoIfSettingOn(IVScanResult ivScanResult){  if (GoIVSettings.getInstance(getApplicationContext()).shouldCopyToClipboard()) {    ClipboardTokenHandler cth=new ClipboardTokenHandler(getApplicationContext());    String clipResult=cth.getResults(ivScanResult,pokeInfoCalculator);    Log.d("NahojjjenClippy","Clipboard content to add: " + clipResult);    ClipData clip=ClipData.newPlainText(clipResult,clipResult);    clipboard.setPrimaryClip(clip);  }}  }
class C{  @Override public NormalDistribution makeDistribution(){  return new NormalDistribution(2.1,1.4);}  }
class C{  public static void completeServerURIs(final MqttConnectionDetails connection,final boolean sslEnabled,final boolean websocket){  for (int i=0; i < connection.getServerURI().size(); i++) {    final String serverURI=connection.getServerURI().get(i);    final String completeServerURI=MqttUtils.getCompleteServerURI(serverURI,sslEnabled,websocket);    if (!completeServerURI.equals(serverURI)) {      logger.info("Auto-complete for server URI ({} -> {})",serverURI,completeServerURI);      connection.getServerURI().set(i,completeServerURI);    }  }}  }
class C{  private void utah(int row,int col,int pos){  module(row - 2,col - 2,pos,1);  module(row - 2,col - 1,pos,2);  module(row - 1,col - 2,pos,3);  module(row - 1,col - 1,pos,4);  module(row - 1,col,pos,5);  module(row,col - 2,pos,6);  module(row,col - 1,pos,7);  module(row,col,pos,8);}  }
class C{  protected void clearError(){synchronized (lock) {    mIoError=false;  }}  }
class C{  public EnglishMorphAnalyzer(){  Element inflection=XMLUtils.getDocumentElement(IOUtils.getInputStreamsFromResource(INFLECTION_SUFFIX));  Element derivationN2V=XMLUtils.getDocumentElement(IOUtils.getInputStreamsFromResource(DERIVATION_SUFFIX_N2V));  try {    inf_verb=getInflectionRules(inflection,VERB,VERB_POS);    inf_noun=getInflectionRules(inflection,NOUN,NOUN_POS);    inf_adjective=getInflectionRules(inflection,ADJECTIVE,ADJECTIVE_POS);    inf_adverb=getInflectionRules(inflection,ADVERB,ADVERB_POS);    der_n2v=getDerivationalRules(derivationN2V,NOUN);    base_cardinal=DSUtils.createStringHashSet(IOUtils.getInputStreamsFromResource(CARDINAL_BASE));    base_ordinal=DSUtils.createStringHashSet(IOUtils.getInputStreamsFromResource(ORDINAL_BASE));    rule_abbreviation=getAbbreviationMap(IOUtils.getInputStreamsFromResource(ABBREVIATOIN_RULE));  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void java_lang_Package_getSystemPackage0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  private String makePretty(double number){  String r=mFormat.format(number);  r=r.replaceAll("E[0-9]",SUFFIX[Character.getNumericValue(r.charAt(r.length() - 1)) / 3]);  while (r.length() > MAX_LENGTH || r.matches("[0-9]+\\.[a-z]")) {    r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);  }  return r;}  }
class C{  public void insert(int offset,int[] values,int valOffset,int len){  if (offset == _pos) {    add(values,valOffset,len);    return;  }  ensureCapacity(_pos + len);  System.arraycopy(_data,offset,_data,offset + len,_pos - offset);  System.arraycopy(values,valOffset,_data,offset,len);  _pos+=len;}  }
class C{  public void selectDetailsView(DetailsView detailsView){  DisplayArea displayArea=getDisplayArea(detailsView.getTab());  if (displayArea != null)   displayArea.setSelectedTab(detailsView.getTab());}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public ImageResizer(Context context,int imageSize){  super(context);  setImageSize(imageSize);}  }
class C{  void initialize(Flyway flyway,String mutagenRootResourcePath){  flyway.setLocations(mutagenRootResourcePath);  flyway.setDataSource(transactionFactory.getDataSource());  flyway.migrate();}  }
class C{  public void enableSwipeItem(){  itemSwipeEnabled=true;}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void createOutFile(String filePath) throws IOException {  this.outFile=new ExifInterface(filePath);}  }
class C{  private static String encode(String pathElement){  try {    return URLEncoder.encode(pathElement,Charsets.UTF_8.name());  } catch (  UnsupportedEncodingException e) {    throw Throwables.propagate(e);  }}  }
class C{  public IExtendedIndexIterator<IEntryCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive,boolean ordered){  ordered|=FORCE_ORDERED_SCAN;  return ordered ? establishScanOrdered(startPos,relation,endPos,endPosInclusive) : establishScanUnOrdered(startPos,relation,endPos,endPosInclusive);}  }
class C{  private static boolean doSelfValidation(){  char lastChar=UNIHANS[0];  String lastString=Character.toString(lastChar);  for (  char c : UNIHANS) {    if (lastChar == c) {      continue;    }    final String curString=Character.toString(c);    int cmp=COLLATOR.compare(lastString,curString);    if (cmp >= 0) {      Log.e(TAG,"Internal error in Unihan table. " + "The last string \"" + lastString + "\" is greater than current string \""+ curString+ "\".");      return false;    }    lastString=curString;  }  return true;}  }
class C{  private boolean checkDisband(Legion legion){  if (legion.isDisbanding()) {    if ((System.currentTimeMillis() / 1000) > legion.getDisbandTime()) {      disbandLegion(legion);      return true;    }  }  return false;}  }
class C{  public static boolean equals(String filename1,String filename2,boolean normalized,IOCase caseSensitivity){  if (filename1 == null || filename2 == null) {    return filename1 == null && filename2 == null;  }  if (normalized) {    filename1=normalize(filename1);    filename2=normalize(filename2);    if (filename1 == null || filename2 == null) {      throw new NullPointerException("Error normalizing one or both of the file names");    }  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  return caseSensitivity.checkEquals(filename1,filename2);}  }
class C{  public Vector2DFormat(final NumberFormat format){  super(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_SEPARATOR,format);}  }
class C{  public DatabaseGetSchoolsQuery q(String value){  return unsafeParam("q",value);}  }
class C{  protected AudioInputStream generateAudioStream(List<SelectedUnit> units) throws IOException {  LinkedList<Datagram> datagrams=new LinkedList<Datagram>();  for (  SelectedUnit unit : units) {    UnitData unitData=(UnitData)unit.getConcatenationData();    assert unitData != null : "Should not have null unitdata here";    Datagram[] frames=unitData.getFrames();    assert frames != null : "Cannot generate audio from null frames";    datagrams.addAll(Arrays.asList(frames));  }  DoubleDataSource audioSource=new DatagramDoubleDataSource(datagrams);  return new DDSAudioInputStream(new BufferedDoubleDataSource(audioSource),audioformat);}  }
class C{  public ChallengesExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  @Override public void close(){  s1.close();  if (s2 != null)   s2.close();}  }
class C{  public StreamResult(String systemId){  this.systemId=systemId;}  }
class C{  public Value newFunction(String functionName,Class<?> resultType,Value... args){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static int hex(String hex){  if (hex.charAt(0) == HEX_PREFIX)   hex=hex.substring(1);  if (hex.length() > 6) {    int rgb=Integer.parseInt(hex.substring(2),16);    int alpha=Integer.parseInt(hex.substring(0,2),16);    return ColorLib.setAlpha(rgb,alpha);  } else {    return setAlpha(Integer.parseInt(hex,16),255);  }}  }
class C{  @Override public AudioInputStream synthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {  int numberOfBackChannels=unitFileReader.getNumberOfUnits();  if (backchannelNumber >= numberOfBackChannels) {    throw new IllegalArgumentException("This voice has " + numberOfBackChannels + " backchannels only. so it doesn't support unit number "+ backchannelNumber);  }  VocalizationUnit bUnit=unitFileReader.getUnit(backchannelNumber);  long start=bUnit.startTime;  int duration=bUnit.duration;  Datagram[] frames=null;  try {    frames=audioTimeline.getDatagrams(start,duration);  } catch (  IOException e) {    throw new SynthesisException("Can not read data from timeline file " + e);  }  LinkedList<Datagram> datagrams=new LinkedList<Datagram>();  datagrams.addAll(Arrays.asList(frames));  DoubleDataSource audioSource=new DatagramDoubleDataSource(datagrams);  return (new DDSAudioInputStream(new BufferedDoubleDataSource(audioSource),aft.getFormat()));}  }
class C{  public void clear(){  processQueue();  map.clear();}  }
class C{  public Builder diskCacheExtraOptions(int maxImageWidthForDiskCache,int maxImageHeightForDiskCache,BitmapProcessor processorForDiskCache){  this.maxImageWidthForDiskCache=maxImageWidthForDiskCache;  this.maxImageHeightForDiskCache=maxImageHeightForDiskCache;  this.processorForDiskCache=processorForDiskCache;  return this;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testCommentEntityEvents() throws Exception {  if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.AUDIT)) {    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");    Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();    assertNotNull(task);    Comment comment=taskService.addComment(task.getId(),task.getProcessInstanceId(),"comment");    assertEquals(2,listener.getEventsReceived().size());    ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());    assertEquals(processInstance.getId(),event.getProcessInstanceId());    assertEquals(processInstance.getId(),event.getExecutionId());    assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());    Comment commentFromEvent=(Comment)event.getEntity();    assertEquals(comment.getId(),commentFromEvent.getId());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);    assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());    listener.clearEventsReceived();    taskService.deleteComment(comment.getId());    assertEquals(1,listener.getEventsReceived().size());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());    assertEquals(processInstance.getId(),event.getProcessInstanceId());    assertEquals(processInstance.getId(),event.getExecutionId());    assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());    commentFromEvent=(Comment)event.getEntity();    assertEquals(comment.getId(),commentFromEvent.getId());  }}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public void reparse(){  clear();  parse();}  }
class C{  public FileWriterWithEncoding(String filename,CharsetEncoder encoding) throws IOException {  this(new File(filename),encoding,false);}  }
class C{  private int randomLevel(){  int x=randomSeed;  x^=x << 13;  x^=x >>> 17;  randomSeed=x^=x << 5;  if ((x & 0x80000001) != 0)   return 0;  int level=1;  while (((x>>>=1) & 1) != 0)   ++level;  return level;}  }
class C{  public double doCompare(String sSummaryTextFile,Set<String> ssModelFiles){  ILoadableTextPrint ndNDoc1=null;  try {    int iIdx=utils.getConstructor(DocumentModelClassName,3);    if (iIdx > -1)     ndNDoc1=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist); else {      iIdx=utils.getConstructor(DocumentModelClassName,5);      ndNDoc1=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist,MinNGramRank,MaxNGramRank);    }  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (ndNDoc1 == null)   return Double.NEGATIVE_INFINITY;  ndNDoc1.loadDataStringFromFile(sSummaryTextFile);  File fSummaryFile=new File(sSummaryTextFile);  SimilarityComparatorListener sdcNComparator=null;  try {    int iIdx=utils.getConstructor(ComparatorClassName,1);    if (iIdx > -1)     sdcNComparator=(SimilarityComparatorListener)Class.forName(ComparatorClassName).getConstructors()[iIdx].newInstance(1.0); else     sdcNComparator=(SimilarityComparatorListener)Class.forName(ComparatorClassName).newInstance();  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (sdcNComparator == null)   return Double.NEGATIVE_INFINITY;  Iterator<String> iOtherIter=ssModelFiles.iterator();  if (Jackknifing) {    Distribution<Double> dJackResults=new Distribution<Double>();    for (int iLeaveOneOutCnt=0; iLeaveOneOutCnt < ssModelFiles.size(); iLeaveOneOutCnt++) {      Distribution dFoldSims=new Distribution();      int iCurIdx=0;      iOtherIter=ssModelFiles.iterator();      while (iOtherIter.hasNext()) {        String sModelFile=iOtherIter.next();        if ((new File(sModelFile).getName().equals(fSummaryFile.getName()) && AvoidSelfComparison) || (iCurIdx++ == iLeaveOneOutCnt)) {          if (!Silent)           System.err.println(String.format("Skipping '%s' to '%s' comparison",sModelFile,fSummaryFile));          continue;        }        ILoadableTextPrint ndNDoc2=null;        try {          int iIdx=utils.getConstructor(DocumentModelClassName,3);          if (iIdx > -1)           ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist); else {            iIdx=utils.getConstructor(DocumentModelClassName,5);            ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist,MinNGramRank,MaxNGramRank);          }        } catch (        IllegalArgumentException ex) {          ex.printStackTrace(System.err);        }catch (        SecurityException ex) {          ex.printStackTrace(System.err);        }catch (        ClassNotFoundException ex) {          ex.printStackTrace(System.err);        }catch (        InstantiationException ex) {          ex.printStackTrace(System.err);        }catch (        IllegalAccessException ex) {          ex.printStackTrace(System.err);        }catch (        InvocationTargetException ex) {          ex.printStackTrace(System.err);        }        if (ndNDoc2 == null)         return Double.NEGATIVE_INFINITY;        ndNDoc2.loadDataStringFromFile(sModelFile);        try {          GraphSimilarity sSimil=null;          sSimil=(GraphSimilarity)sdcNComparator.getSimilarityBetween(ndNDoc1,ndNDoc2);          dFoldSims.increaseValue(sSimil.ValueSimilarity,1.0);        } catch (        InvalidClassException iceE) {          System.err.println("Cannot compare..." + iceE.getMessage());        }      }      dJackResults.increaseValue(dFoldSims.average(false),1.0);    }    return dJackResults.average(false);  }  Distribution<Double> dRes=new Distribution<Double>();  while (iOtherIter.hasNext()) {    String sModelFile=iOtherIter.next();    if (new File(sModelFile).getName().equals(fSummaryFile.getName()) && AvoidSelfComparison) {      if (!Silent)       System.err.print(String.format("Skipping '%s' to '%s' comparison",sModelFile,fSummaryFile));      continue;    }    ILoadableTextPrint ndNDoc2=null;    try {      int iIdx=utils.getConstructor(DocumentModelClassName,3);      if (iIdx > -1)       ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist); else {        iIdx=utils.getConstructor(DocumentModelClassName,5);        ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist,MinNGramRank,MaxNGramRank);      }    } catch (    IllegalArgumentException ex) {      ex.printStackTrace(System.err);    }catch (    SecurityException ex) {      ex.printStackTrace(System.err);    }catch (    ClassNotFoundException ex) {      ex.printStackTrace(System.err);    }catch (    InstantiationException ex) {      ex.printStackTrace(System.err);    }catch (    IllegalAccessException ex) {      ex.printStackTrace(System.err);    }catch (    InvocationTargetException ex) {      ex.printStackTrace(System.err);    }    if (ndNDoc2 == null)     return Double.NEGATIVE_INFINITY;    ndNDoc2.loadDataStringFromFile(sModelFile);    try {      GraphSimilarity sSimil=null;      sSimil=(GraphSimilarity)sdcNComparator.getSimilarityBetween(ndNDoc1,ndNDoc2);      dRes.increaseValue(sSimil.ValueSimilarity,1.0);    } catch (    InvalidClassException iceE) {      System.err.println("Cannot compare...");    }  }  return dRes.average(false);}  }
class C{  public String currentDirectory() throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("PWD");    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    String[] messages=r.getMessages();    if (messages.length != 1) {      throw new FTPIllegalReplyException();    }    Matcher m=PWD_PATTERN.matcher(messages[0]);    if (m.find()) {      return messages[0].substring(m.start() + 1,m.end() - 1);    } else {      throw new FTPIllegalReplyException();    }  }}  }
class C{  public CholeskyDecomposition(Matrix Arg){  double[][] A=Arg.getArray();  n=Arg.getRowDimension();  L=new double[n][n];  isspd=(Arg.getColumnDimension() == n);  for (int j=0; j < n; j++) {    double[] Lrowj=L[j];    double d=0.0;    for (int k=0; k < j; k++) {      double[] Lrowk=L[k];      double s=0.0;      for (int i=0; i < k; i++) {        s+=Lrowk[i] * Lrowj[i];      }      Lrowj[k]=s=(A[j][k] - s) / L[k][k];      d=d + s * s;      isspd=isspd & (A[k][j] == A[j][k]);    }    d=A[j][j] - d;    isspd=isspd & (d > 0.0);    L[j][j]=Math.sqrt(Math.max(d,0.0));    for (int k=j + 1; k < n; k++) {      L[j][k]=0.0;    }  }}  }
class C{  private void initStatusBlock(ViewHolderCardItem holder,MediaItem currentItem){  if (mediaItemType == MediaItemType.PODCAST_DOWNLOADED && ((Podcast)currentItem).isDownloaded) {    holder.tvItemStatus.setText(R.string.downloaded);    holder.tvItemStatus.setVisibility(View.VISIBLE);  } else {    holder.tvItemStatus.setVisibility(View.GONE);  }}  }
class C{  public boolean isNew(){  return isNew;}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  @Override public Filter createFilter(){  return new IntersectsExtended();}  }
class C{  public void close() throws IOException {  iterator.close();}  }
class C{  private boolean isPassedModule(TypeElement module){  return nonNullaryCtorModules.values().contains(module) || nonNullaryCtorUnscopedModules.contains(module);}  }
class C{  public GroupsGetRequestsQueryWithFields offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void selectAll(boolean select){  if (classificationViewer == null)   classificationViewer=(ClassificationViewer)dir.getViewerByClass(ClassificationViewer.class);  if (classificationViewer == null)   return;  classificationViewer.selectAllNodes(select);}  }
class C{  @VisibleForTesting MinidumpUploadCallable createMinidumpUploadCallable(File minidumpFile,File logfile){  return new MinidumpUploadCallable(minidumpFile,logfile,getApplicationContext());}  }
class C{  private static void applyBonferroniCorrection(PhyloTree tree){  int numberOfUpCases=0;  int numberOfDownCases=0;  for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {    NodeData vd=(NodeData)v.getData();    if (vd.getDownPValue() != Double.NaN && vd.getDownPValue() != -1 && v.getOutDegree() > 1)     numberOfDownCases++;    if (vd.getUpPValue() != Double.NaN && vd.getUpPValue() != -1 && v.getInDegree() > 0)     numberOfUpCases++;  }  if (numberOfDownCases == 0)   numberOfDownCases=1;  if (numberOfUpCases == 0)   numberOfUpCases=1;  for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {    NodeData vd=(NodeData)v.getData();    if (vd.getUpPValue() != Double.NaN && vd.getUpPValue() != -1 && v.getInDegree() > 0)     vd.setUpPValue(Math.min(1,vd.getUpPValue() * numberOfUpCases));    if (vd.getDownPValue() != Double.NaN && vd.getDownPValue() != -1 && v.getOutDegree() > 1)     vd.setDownPValue(Math.min(1,vd.getDownPValue() * numberOfDownCases));  }}  }
class C{  public static String toSootAT(String type){  return type;}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof JSONArray) {        if (!((JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  public List<LocalTime> bottom(int n){  List<LocalTime> bottom=new ArrayList<>();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(PackedLocalTime.asLocalTime(values[i]));  }  return bottom;}  }
class C{  public Bitmap processFilter(Bitmap inputImage){  Bitmap outputImage=inputImage;  if (outputImage != null) {    for (    SubFilter subFilter : subFilters) {      try {        outputImage=subFilter.process(outputImage);      } catch (      OutOfMemoryError oe) {        System.gc();        try {          outputImage=subFilter.process(outputImage);        } catch (        OutOfMemoryError ignored) {        }      }    }  }  return outputImage;}  }
class C{  public void openProperties(DataSource dataSource,int propertiesCategory){  if (dataSource == null)   throw new IllegalArgumentException("DataSource cannot be null");  PropertiesConfigurator.editProperties(dataSource,propertiesCategory);}  }
class C{  public void putRequest(@NonNull Context context,String url,String body,ApiListener apiListener){  try {    JSONObject bodyObject=body != null ? new JSONObject(body) : null;    putRequest(context,url,bodyObject,apiListener);  } catch (  JSONException e) {    apiListener.onApiError(new LIApiError("Unable to convert body to json object " + e.toString(),e));  }}  }
class C{  public boolean start(String file){  boolean ok=true;  try {    out=new BufferedOutputStream(new FileOutputStream(file));    ok=start(out);    closeStream=true;  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  @Override public void markEndOfStream() throws IOException {  FutureUtils.result(getLedgerWriter(DistributedLogConstants.MAX_TXID,true).markEndOfStream());  closeAndComplete();}  }
class C{  public boolean only_array_ref(){  return soot.PhaseOptions.getBoolean(options,"only-array-ref");}  }
class C{  public static String cleanString(String string){  string=string.replace("\\n ","\n");  string=Html.fromHtml(string).toString();  string=Normalizer.normalize(string,Normalizer.Form.NFD);  Pattern pattern=Pattern.compile("\\p{InCombiningDiacriticalMarks}+");  string=pattern.matcher(string).replaceAll("");  try {    string=URLDecoder.decode(string,"UTF-8");  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }  return string;}  }
class C{  public void assertPingAPIServer(int expectedStatus){  assertPingAPIServer(expectedStatus,apiServerConnector);}  }
class C{  public List<Map<String,Object>> readExcel(String file,boolean skipEmptyLines){  return ExcelReaderCacheGroupHandler.getInstance().get(new ExcelReaderFileKey(file,skipEmptyLines));}  }
class C{  void subscribe(){  Log.d(TAG,"subscribing in empty client");}  }
class C{  @VisibleForTesting public AppData(String siteUrl,String packageName){  mSiteUrl=siteUrl;  mPackageName=packageName;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof SpaceProxyImpl)   return super.equals(obj);  return false;}  }
class C{  @Override public XSSimpleType createTypeUnion(String name,String targetNamespace,short finalSet,XSSimpleType[] memberTypes,XSObjectList annotations){  int typeNum=memberTypes.length;  XSSimpleTypeDecl[] mtypes=new XSSimpleTypeDecl[typeNum];  System.arraycopy(memberTypes,0,mtypes,0,typeNum);  if (fDeclPool != null) {    XSSimpleTypeDecl st=fDeclPool.getSimpleTypeDecl();    return st.setUnionValues(name,targetNamespace,finalSet,mtypes,annotations);  }  return new XSSimpleTypeDecl(name,targetNamespace,finalSet,mtypes,annotations);}  }
class C{  NamedThreadFactory(String poolName){  group=new ThreadGroup(poolName + "-" + POOL_NUMBER.getAndIncrement());}  }
class C{  @Override public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {}  }
class C{  public FisheyeTreeFilter(String group,int distance){  this(group,Visualization.FOCUS_ITEMS,distance);}  }
class C{  public void addFile(@NotNull File f,@Nullable Icon ic){  String s=f.isAbsolute() ? FileUtil.getRelativePath(myRoot,f) : f.getPath();  if (s != null) {    List<String> parts=Lists.newLinkedList(Splitter.on(File.separatorChar).split(s));    makeNode(myRootNode,parts,ic,false);  }}  }
class C{  private void reopenS3InputStream() throws IOException {  try {    closeS3InputStream();  } catch (  IOException ignore) {  }  InputStream remainingIn=null;  int attempt=0;  while (remainingIn == null) {    try {      S3Object s3Object=_s3.getObject(new GetObjectRequest(_bucket,_key).withRange(_pos,_length - 1));      remainingIn=s3Object.getObjectContent();    } catch (    AmazonClientException e) {      attempt+=1;      if (!e.isRetryable() || attempt == 4) {        throw e;      }      try {        Thread.sleep(200 * attempt);      } catch (      InterruptedException interrupt) {        throw Throwables.propagate(interrupt);      }    }  }  _in=remainingIn;}  }
class C{  public static String[] readStrings(){  return new In().readAllStrings();}  }
class C{  public String makeUniqueLocalName(String dupName,Set<String> localNames){  int counter=1;  String newName=dupName;  while (localNames.contains(newName))   newName=dupName + "_" + counter++;  return newName;}  }
class C{  public static boolean isRunningService(String className,Context context){  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.RunningServiceInfo> runningServices=activityManager.getRunningServices(1000);  for (  ActivityManager.RunningServiceInfo runningServiceInfo : runningServices) {    ComponentName service=runningServiceInfo.service;    if (className.equals(service.getClassName())) {      return true;    }  }  return false;}  }
class C{  private void execute_filter(FilterHolder filterHolder,int operationCode,SpaceContext sc,Object subject){  if (!filterHolder.isInitialized())   return;  if (subject instanceof Object[]) {    ISpaceFilterEntry[] entries=null;    if (filterHolder.isPassFilterEntry()) {      Object[] packets=(Object[])subject;      entries=new ISpaceFilterEntry[packets.length];      for (int i=0; i < packets.length; ++i)       entries[i]=createFilterEntry(packets[i]);    }    filterHolder.getFilter().process(sc,entries,operationCode);  } else {    ISpaceFilterEntry filterEntry=filterHolder.isPassFilterEntry() ? createFilterEntry(subject) : null;    filterHolder.getFilter().process(sc,filterEntry,operationCode);  }}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  private String writePhotoFile(Bitmap bitmap,String photoName,String directoryName,Bitmap.CompressFormat format,boolean autoIncrementNameByDate){  if (bitmap == null) {    return null;  } else {    ByteArrayOutputStream bytes=new ByteArrayOutputStream();    bitmap.compress(format,100,bytes);    DateFormat df=new SimpleDateFormat("yyyyMMddHHmmss");    String date=df.format(Calendar.getInstance().getTime());    if (format == PNG) {      photoName=(autoIncrementNameByDate) ? photoName + "_" + date+ ".png" : photoName + ".png";    } else     if (format == JPEG) {      photoName=(autoIncrementNameByDate) ? photoName + "_" + date+ ".jpeg" : photoName + ".jpeg";    } else     if (format == WEBP) {      photoName=(autoIncrementNameByDate) ? photoName + "_" + date+ ".webp" : photoName + ".webp";    }    File wallpaperDirectory=null;    try {      wallpaperDirectory=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES + "/" + directoryName+ "/");    } catch (    Exception ev) {      try {        wallpaperDirectory=Environment.getExternalStorageDirectory();      } catch (      Exception ex) {        try {          wallpaperDirectory=Environment.getDataDirectory();        } catch (        Exception e) {          wallpaperDirectory=Environment.getRootDirectory();        }      }    }    if (wallpaperDirectory != null) {      if (!wallpaperDirectory.exists()) {        wallpaperDirectory.exists();        wallpaperDirectory.mkdirs();      }      File f=new File(wallpaperDirectory,photoName);      try {        f.createNewFile();        FileOutputStream fo=new FileOutputStream(f);        fo.write(bytes.toByteArray());        fo.close();        this.activity.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,Uri.parse("file://" + f.getAbsolutePath())));        try {          Uri u=Uri.parse(f.getAbsolutePath());          this.activity.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,u));        } catch (        Exception ex) {        }        return f.getAbsolutePath();      } catch (      Exception ev) {        return null;      }    } else {      return null;    }  }}  }
class C{  public boolean next(){  if (currentBlkNum == 0 && !moveTo(1))   return false;  while (true) {    if (rp.next())     return true;    if (!moveTo(currentBlkNum + 1))     return false;  }}  }
class C{  public boolean isFromReplication(){  return _fromReplication;}  }
class C{  @Deprecated private static void makeJSForRowSubmit(Appendable writer,Map<String,Object> context,ModelForm modelForm,String hiddenFormName) throws IOException {  List<ModelFormField> rowSubmitFields=modelForm.getMultiSubmitFields();  if (rowSubmitFields != null) {    writer.append("<script type=\"text/javascript\">\r\n");    writer.append("jQuery(document).ready(function() {\r\n");    writer.append("\tvar submitForm = $(\"form[name=" + hiddenFormName + "]\");\r\n");    writer.append("\tif (submitForm) {\r\n");    for (    ModelFormField rowSubmitField : rowSubmitFields) {      String submitFieldName=rowSubmitField.getName();      String submitFieldId=rowSubmitField.getCurrentContainerId(context);      if (UtilValidate.isEmpty(submitFieldId)) {        Debug.logWarning("makeJSForRowSubmit: submit field '" + submitFieldName + "' of form '"+ rowSubmitField.getModelForm().getName()+ "' was not assigned a unique element ID; unable to build javascript",module);        continue;      }      writer.append("\t\tvar submitField = $(\"#" + submitFieldId + "\");\r\n");      writer.append("\t\t$(submitField).click(function(e) {\r\n");      writer.append("\t\te.preventDefault();\r\n");      writer.append("\t\tvar checked = false;\r\n");      writer.append("\t\t\t$(this).parents(\"table\").find(\"input[type=radio][name^=selectAction], input[type=checkbox][name^=selectAction]\").each( function (j, r) {\r\n");      writer.append("\t\t\tif ($(r).is(\":checked\")) {\r\n");      writer.append("\t\t\t\tchecked = true;\r\n");      makeHiddenFieldsForHiddenForm(writer);      writer.append("\t\t\t}\r\n");      writer.append("\t\t});\r\n");      writer.append("\t\tif (checked) {\r\n");      writer.append("\t\t\tsubmitForm.submit();\r\n");      writer.append("\t\t} else {\r\n");      String noRowMsg=UtilProperties.getMessage("CommonUiLabels","CommonNoRowSelected",(Locale)context.get("locale"));      writer.append("\t\t\talert(\"" + encode(noRowMsg,context) + "\");\r\n");      writer.append("\t\t}\r\n");      writer.append("\t\t});\r\n");    }    writer.append("\t} else {\r\n");    writer.append("\t\treturn false;\r\n");    writer.append("\t}\r\n");    writer.append("});\r\n");    writer.append("</script>\r\n");  }}  }
class C{  private static ConstraintWidget[] inferTableList(WidgetContainer base){  if (base instanceof ConstraintWidgetContainer && ((ConstraintWidgetContainer)base).handlesInternalConstraints()) {    return null;  }  for (  ConstraintWidget constraintWidget : base.getChildren()) {    if (constraintWidget instanceof ConstraintWidgetContainer) {      inferConstraints((ConstraintWidgetContainer)constraintWidget);    }  }  ArrayList<ConstraintWidget> list=new ArrayList<>(base.getChildren());  list.add(0,base);  ConstraintWidget[] widgets=list.toArray(new ConstraintWidget[list.size()]);  ConstraintWidget[] iw=ScoutGroupInference.computeGroups(ScoutWidget.create(widgets));  if (iw != null && iw.length > 0) {    return iw;  }  return null;}  }
class C{  public VideoSearchQuery search(UserActor actor,String q){  return new VideoSearchQuery(getClient(),actor,q);}  }
class C{  public boolean isInterProcTarget(){  return interProcTarget;}  }
class C{  public SpaceUnavailableException(String memberName,String s){  super(s);  this.memberName=memberName;}  }
class C{  @OnClick(R.id.btnBackInfo) public void backToIvForm(){  if (allPossibilitiesBox.getVisibility() == View.VISIBLE) {    allPossibilitiesBox.setVisibility(View.GONE);    resultsBox.setVisibility(View.VISIBLE);  } else {    allPossibilitiesBox.setVisibility(View.GONE);    inputBox.setVisibility(View.VISIBLE);    resultsBox.setVisibility(View.GONE);    initialButtonsLayout.setVisibility(View.VISIBLE);    onCheckButtonsLayout.setVisibility(View.GONE);  }  moveOverlayUpOrDownToMatchAppraisalBox();  enableOrDisablePokeSpamBoxBasedOnSettings();}  }
class C{  public LineUnavailableException(String message){  super(message);}  }
class C{  @Override protected void doShutdown() throws DataAccessException {  logger.debug(message("Waiting for shutdown of event listener invokers"));synchronized (this.activeInvokerMonitor) {    for (    AsyncEventListenerInvoker invoker : scheduledInvokers) {      invoker.interrupt();    }    while (this.activeInvokerCount.get() > 0) {      if (logger.isDebugEnabled()) {        logger.debug(message("Still waiting for shutdown of [" + this.activeInvokerCount + "] event listener invokers"));      }      try {        this.activeInvokerMonitor.wait();      } catch (      InterruptedException interEx) {        Thread.currentThread().interrupt();      }    }  }}  }
class C{  public FilterRowIterator(IntIterator rows,Table t,Predicate p){  this.predicate=p;  this.rows=rows;  this.t=t;  next=advance();}  }
class C{  public TObjectHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  this._hashingStrategy=this;}  }
class C{  public void registerEditor(RTEditText editor,boolean useRichTextEditing){  mEditors.put(editor.getId(),editor);  editor.register(this,mRTApi);  editor.setRichTextEditing(useRichTextEditing,false);  updateToolbarVisibility();}  }
class C{  @Override public MaryData process(MaryData d) throws Exception {  Document doc=d.getDocument();  Log.d(Mary.LOG,"Getting xml-data from document finished.");  TreeWalker tw=DomUtils.createTreeWalker(doc,doc,MaryXML.TOKEN);  Element t;  AllophoneSet allophoneSet=null;  while ((t=(Element)tw.nextNode()) != null) {    if (allophoneSet == null) {      allophoneSet=MaryRuntimeUtils.determineAllophoneSet(t);    }    createSubStructure(t,allophoneSet);    boolean changedSomething=postlexicalRules(t,allophoneSet);    if (changedSomething) {      updatePhAttributesFromPhElements(t);    }    if (treeMap == null)     continue;    assert featureComputer != null;    StringBuilder tPh=new StringBuilder();    TreeWalker sylWalker=DomUtils.createTreeWalker(doc,t,MaryXML.SYLLABLE);    Element syllable;    while ((syllable=(Element)sylWalker.nextNode()) != null) {      StringBuilder sylPh=new StringBuilder();      String stressed=syllable.getAttribute("stress");      if (stressed.equals("1")) {        sylPh.append("'");      } else       if (stressed.equals("2")) {        sylPh.append(",");      }      TreeWalker segWalker=DomUtils.createTreeWalker(doc,syllable,MaryXML.PHONE);      Element seg;      List<Element> originalSegments=new ArrayList<Element>();      while ((seg=(Element)segWalker.nextNode()) != null) {        originalSegments.add(seg);      }      for (      Element s : originalSegments) {        String phoneString=s.getAttribute("p");        String[] predicted;        if (treeMap.containsKey(phoneString)) {          Target tgt=new Target(phoneString,s);          tgt.setFeatureVector(featureComputer.computeFeatureVector(tgt));          StringPredictionTree tree=treeMap.get(phoneString);          String predictStr=tree.getMostProbableString(tgt);          if (sylPh.length() > 0)           sylPh.append(" ");          sylPh.append(predictStr);          if (predictStr.equals("")) {            predicted=null;          } else {            predicted=predictStr.split(" ");          }        } else {          Log.d(Mary.LOG,"didn't find decision tree for phone (" + phoneString + "). Just keeping it.");          predicted=new String[]{phoneString};        }        Log.d(Mary.LOG,"  Predicted phone in sequence of " + predicted.length + " phones.");        if (predicted == null || predicted.length == 0) {          syllable.removeChild(s);          continue;        }        assert predicted != null && predicted.length > 0;        for (int lc=0; lc < predicted.length - 1; lc++) {          Element newPh=MaryXML.createElement(doc,MaryXML.PHONE);          newPh.setAttribute("p",predicted[lc]);          syllable.insertBefore(newPh,s);        }        if (!phoneString.equals(predicted[predicted.length - 1])) {          s.setAttribute("p",predicted[predicted.length - 1]);        }      }      String newSylPh=sylPh.toString();      syllable.setAttribute("ph",newSylPh);      if (tPh.length() > 0)       tPh.append(" -");      tPh.append(newSylPh);    }    t.setAttribute("ph",tPh.toString());  }  MaryData result=new MaryData(outputType(),d.getLocale());  result.setDocument(doc);  Log.d(Mary.LOG,"Setting the changed xml document finished.");  return result;}  }
class C{  public void changeLevel(Legion legion,int newLevel,boolean save){  legion.setLegionLevel(newLevel);  PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x00,legion));  PacketSendUtility.broadcastPacketToLegion(legion,SM_SYSTEM_MESSAGE.STR_GUILD_EVENT_LEVELUP(newLevel));  if (save) {    storeLegion(legion);  }}  }
class C{  @Override public void connect(){}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("compute wordCount kmer=25 step=25 mindepth=10;");}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  @Override public InputSource resolveEntity(String name,String publicId,String baseURI,String systemId) throws SAXException, IOException {  String resolvedId=null;  if (!getUseLiteralSystemId() && baseURI != null) {    try {      URI uri=new URI(new URI(baseURI),systemId);      systemId=uri.toString();    } catch (    URI.MalformedURIException ex) {    }  }  if (publicId != null && systemId != null) {    resolvedId=resolvePublic(publicId,systemId);  } else   if (systemId != null) {    resolvedId=resolveSystem(systemId);  }  if (resolvedId != null) {    InputSource source=new InputSource(resolvedId);    source.setPublicId(publicId);    return source;  }  return null;}  }
class C{  private final void putIdentifier0(String idName,Element element){  if (DEBUG_IDS) {    System.out.println("putIdentifier0(" + idName + ", "+ element+ ')');  }  if (identifiers == null) {    identifiers=new java.util.Hashtable();  }  identifiers.put(idName,element);}  }
class C{  protected void finalize() throws IOException {  close();}  }
class C{  public double minValue(){  Iterator iIter=asTreeMap().values().iterator();  Double dMin=Double.POSITIVE_INFINITY;  while (iIter.hasNext()) {    Double dVal=(Double)iIter.next();    dMin=(dVal < dMin) ? dVal : dMin;  }  return dMin;}  }
class C{  public void notifyVerticalEdgeReached(int startY,int finalY,int overY){  mScrollerY.notifyEdgeReached(startY,finalY,overY);}  }
class C{  protected void configAndStartMediaPlayer(){  if (mPlayer == null) {    throw new IllegalStateException("mPlayer is NULL");  }  if (mAudioFocus == AudioFocus.NO_FOCUS) {    if (mPlayer.isPlaying()) {      mPlayer.pause();    }  } else {    if (mAudioFocus == AudioFocus.NO_FOCUS_CAN_DUCK) {      mPlayer.setVolume(DUCK_VOLUME,DUCK_VOLUME);    } else {      mPlayer.setVolume(1.0f,1.0f);    }    if (!mPlayer.isPlaying()) {      mPlayer.start();    }  }}  }
class C{  public static int toInt(Object obj){  try {    return Integer.parseInt(obj.toString());  } catch (  Exception e) {    return -1;  }}  }
class C{  protected int maxDayInMonthFor(int year,int month){  if (month == 4 || month == 6 || month == 9 || month == 11) {    return 30;  } else   if (month == 2) {    if (isLeapYear(year)) {      return 29;    } else {      return 28;    }  } else {    return 31;  }}  }
class C{  public List<String> bottom(int n){  List<String> bottom=new ArrayList<>();  CategoryColumn copy=this.copy();  copy.sortAscending();  for (int i=0; i < n; i++) {    bottom.add(copy.get(i));  }  return bottom;}  }
class C{  public LongFilePutter(File file,long limit,boolean inMemory) throws IOException {  super(file,8 * limit,(inMemory ? Mode.CREATE_READ_WRITE_IN_MEMORY : Mode.CREATE_READ_WRITE));}  }
class C{  @Override public Constant evaluate(Record rec){  return val;}  }
class C{  public Row(byte[] utf8Bytes){  set(utf8Bytes);}  }
class C{  public boolean isContainResource(RType rType,IdType idType,String name){  boolean result=false;  if (this.rTypeResourceMap.containsKey(rType)) {    Set<RDotTxtEntry> resourceSet=this.rTypeResourceMap.get(rType);    if (resourceSet.contains(new RDotTxtEntry(idType,rType,name,"0x7f000000"))) {      result=true;    }  }  return result;}  }
class C{  public NotesAddQuery privacyView(List<String> value){  return unsafeParam("privacy_view",value);}  }
class C{  public UserAlreadyExistsException(){  super();}  }
class C{  private static boolean covers(String[] sup,String[] sub){  outer:   for (int i=sub.length; i > 0; ) {    String onm=sub[--i];    String ocls=sub[--i];    for (int j=sup.length; j > 0; ) {      String nm=sup[--j];      String cls=sup[--j];      if (cls.equals(ocls) && (nm == null || (onm != null && nm.equals(onm)))) {        continue outer;      }    }    return false;  }  return true;}  }
class C{  public ZWaveThermostatSetpointCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  private int countOccurences(String prefix,String message){  File f=new File("consolemanagertest.log");  f.deleteOnExit();  int count=0;  BufferedReader br;  try {    br=new BufferedReader(new FileReader(f));    String line=null;    while ((line=br.readLine()) != null) {      if (line.startsWith(prefix) && line.endsWith(message)) {        count++;      }    }    br.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return count;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_DISTRIBUTE_GOLD(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1380000,value1,value0);}  }
class C{  public InfoflowResults analyzeAPKFile(String fileName,boolean enableImplicitFlows) throws IOException, XmlPullParserException {  String androidJars=System.getenv("ANDROID_JARS");  if (androidJars == null)   androidJars=System.getProperty("ANDROID_JARS");  if (androidJars == null)   throw new RuntimeException("Android JAR dir not set");  System.out.println("Loading Android.jar files from " + androidJars);  String droidBenchDir=System.getenv("DROIDBENCH");  if (droidBenchDir == null)   droidBenchDir=System.getProperty("DROIDBENCH");  if (droidBenchDir == null)   throw new RuntimeException("DroidBench dir not set");  System.out.println("Loading DroidBench from " + droidBenchDir);  SetupApplication setupApplication=new SetupApplication(androidJars,droidBenchDir + File.separator + fileName);  setupApplication.setTaintWrapper(new EasyTaintWrapper("EasyTaintWrapperSource.txt"));  setupApplication.calculateSourcesSinksEntrypoints("SourcesAndSinks.txt");  setupApplication.setEnableImplicitFlows(enableImplicitFlows);  return setupApplication.runInfoflow();}  }
class C{  T toResponse(ResponseBody body) throws IOException {  return responseConverter.convert(body);}  }
class C{  public Vector3f multLocal(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x*=vec.x;  y*=vec.y;  z*=vec.z;  return this;}  }
class C{  public MarketDeleteQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){  super(client,"market.delete",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);}  }
class C{  public static Dfp acos(Dfp a){  Dfp result;  boolean negative=false;  if (a.lessThan(a.getZero())) {    negative=true;  }  a=Dfp.copysign(a,a.getOne());  result=atan(a.getOne().subtract(a.multiply(a)).sqrt().divide(a));  if (negative) {    result=a.getField().getPi().subtract(result);  }  return a.newInstance(result);}  }
class C{  public static <T>List<T> asList(T... a){  ArrayList<T> list=new ArrayList<T>();  for (  T elem : a)   list.add(elem);  return list;}  }
class C{  public void deepSort(int[] setFeatureSequence){  featureSequence=setFeatureSequence;  numberOfLeaves=0;  tree=new MaryNode(0,featureVectors.length);  sortNode(0,tree);}  }
class C{  public ShardParseException(String message,Throwable cause){  super(message,cause);}  }
class C{  private boolean isEmailValid(CharSequence email){  return android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();}  }
class C{  public static boolean isBinFile(String fileName){  try (DataInputStream dis=new DataInputStream(new FileInputStream(fileName))){    int firstInt=dis.readInt();    return firstInt == 0 || firstInt == MAGIC_NUMBER;  } catch (  Exception e) {    return false;  }}  }
class C{  private List<byte[]> readDictionaryFile(long dictionaryStartOffset,long dictionaryEndOffset) throws IOException {  CarbonDictionaryReaderImpl dictionaryReader=new CarbonDictionaryReaderImpl(this.carbonStorePath,this.carbonTableIdentifier,this.columnIdentifier);  List<byte[]> dictionaryValues=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  try {    if (0 == dictionaryEndOffset) {      dictionaryValues=dictionaryReader.read(dictionaryStartOffset);    } else {      Iterator<byte[]> itr=dictionaryReader.read(dictionaryStartOffset,dictionaryEndOffset);      while (itr.hasNext()) {        dictionaryValues.add(itr.next());      }    }  }  finally {    dictionaryReader.close();  }  return dictionaryValues;}  }
class C{  private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){  Mode subMode=Mode.ALPHA;  Mode priorToShiftMode=Mode.ALPHA;  int i=0;  while (i < length) {    int subModeCh=textCompactionData[i];    char ch=0;switch (subMode) {case ALPHA:      if (subModeCh < 26) {        ch=(char)('A' + subModeCh);      } else {        if (subModeCh == 26) {          ch=' ';        } else         if (subModeCh == LL) {          subMode=Mode.LOWER;        } else         if (subModeCh == ML) {          subMode=Mode.MIXED;        } else         if (subModeCh == PS) {          priorToShiftMode=subMode;          subMode=Mode.PUNCT_SHIFT;        } else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {          result.append((char)byteCompactionData[i]);        } else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {          subMode=Mode.ALPHA;        }      }    break;case LOWER:  if (subModeCh < 26) {    ch=(char)('a' + subModeCh);  } else {    if (subModeCh == 26) {      ch=' ';    } else     if (subModeCh == AS) {      priorToShiftMode=subMode;      subMode=Mode.ALPHA_SHIFT;    } else     if (subModeCh == ML) {      subMode=Mode.MIXED;    } else     if (subModeCh == PS) {      priorToShiftMode=subMode;      subMode=Mode.PUNCT_SHIFT;    } else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {      result.append((char)byteCompactionData[i]);    } else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {      subMode=Mode.ALPHA;    }  }break;case MIXED:if (subModeCh < PL) {ch=MIXED_CHARS[subModeCh];} else {if (subModeCh == PL) {  subMode=Mode.PUNCT;} else if (subModeCh == 26) {  ch=' ';} else if (subModeCh == LL) {  subMode=Mode.LOWER;} else if (subModeCh == AL) {  subMode=Mode.ALPHA;} else if (subModeCh == PS) {  priorToShiftMode=subMode;  subMode=Mode.PUNCT_SHIFT;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {  result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {  subMode=Mode.ALPHA;}}break;case PUNCT:if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case ALPHA_SHIFT:subMode=priorToShiftMode;if (subModeCh < 26) {ch=(char)('A' + subModeCh);} else {if (subModeCh == 26) {ch=' ';} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case PUNCT_SHIFT:subMode=priorToShiftMode;if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;}if (ch != 0) {result.append(ch);}i++;}}  }
class C{  public ContentletQuery addHost(String hostIdentifier){  query.append(" +conhost:" + hostIdentifier);  return this;}  }
class C{  @Override public void onPageScrollStateChanged(int state){}  }
class C{  public void rightTrim(int numberOfSample){  trim(0,numberOfSample);}  }
class C{  private void trimToSize(int maxSize){  while (true) {    String key;    Bitmap value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=sizeOf(key,value);    }  }}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=_set.length;  K oldKeys[]=(K[])_set;  long oldVals[]=_values;  _set=new Object[newCapacity];  Arrays.fill(_set,FREE);  _values=new long[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldKeys[i] != FREE && oldKeys[i] != REMOVED) {      K o=oldKeys[i];      int index=insertionIndex(o);      if (index < 0) {        throwObjectContractViolation(_set[(-index - 1)],o);      }      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  private void refreshProject(){  String projectPath=myProject.getBasePath();  if (projectPath != null) {    VirtualFile rootDir=LocalFileSystem.getInstance().findFileByPath(projectPath);    if (rootDir != null && rootDir.isDirectory()) {      rootDir.refresh(true,true);    }  }}  }
class C{  public boolean removeItem(ForceItem item){  return items.remove(item);}  }
class C{  public E valueAt(int index){  return (E)mArray[index];}  }
class C{  public boolean remove(BasenameList bnl){  boolean ret=true;  for (int i=0; i < bnl.getLength(); i++) {    bList.remove(bnl.getName(i));  }  hasChanged=true;  return (ret);}  }
class C{  public void actionPerformed(ActionEvent ev){  Integer[] choices=new Integer[]{0,1,2,3,4,5,6,7,8,9,10,20,40};  Integer result=(Integer)JOptionPane.showInputDialog(getViewer().getFrame(),"Set edge width","Set edge width",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),choices,choices[1]);  if (result != null)   execute("set edgeWidth=" + result + ";");}  }
class C{  private static final String decodeFieldName(final String pXmlFieldName){  StringBuilder str=new StringBuilder();  int fieldNameLength=pXmlFieldName.length();  char currentChar;  for (int i=0; i < fieldNameLength; i++) {    currentChar=pXmlFieldName.charAt(i);    if (currentChar == '-') {      str.append(Character.toUpperCase(pXmlFieldName.charAt(++i)));    } else {      str.append(currentChar);    }  }  return str.toString();}  }
class C{  public T walkInOptimizedOrder(final FieldVectorChangingVisitor<T> visitor){  return walkInDefaultOrder(visitor);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  private boolean matchesContentType(EnumSet<ContentType> contentTypes){  if (permittedContentTypesMask == ContentType.ANY.getFlagValue() && restrictedContentTypesMask == 0) {    return true;  }  int contentTypeMask=ContentType.getMask(contentTypes);  boolean matchesPermitted=permittedContentTypesMask == ContentType.ANY.getFlagValue() || (permittedContentTypesMask & contentTypeMask) != 0;  boolean notMatchesRestricted=restrictedContentTypesMask == 0 || (restrictedContentTypesMask & contentTypeMask) == 0;  return matchesPermitted && notMatchesRestricted;}  }
class C{  private boolean useForAllProtocols(Properties settings){  return Boolean.parseBoolean(settings.getProperty("/system/http_proxy/use_same_proxy","false"));}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static void main(String args[]){  if (args.length < 1) {    System.out.println("Usage: java org.csource.fastdht.TestBatch <config filename>");    return;  }  System.out.println("java.version=" + System.getProperty("java.version"));  String conf_filename=args[0];  try {    ClientGlobal.init(conf_filename);    FastDHTClient client;    ObjectInfo objInfo;    System.out.println("network_timeout=" + ClientGlobal.g_network_timeout + "ms");    System.out.println("charset=" + ClientGlobal.g_charset);    ClientGlobal.g_server_group.print();    client=new FastDHTClient(true);    try {      objInfo=new ObjectInfo("bbs","test");      Hashtable keyValues;      Hashtable failKeys;      String[] keys;      keyValues=new Hashtable();      failKeys=new Hashtable();      keyValues.put("reg","1236939402");      keyValues.put("login","happy_fish100");      keyValues.put("intl","CN");      keyValues.put("co","China");      keys=new String[4];      keys[0]="reg";      keys[1]="co";      keys[2]="login";      keys[3]="intl";      System.out.println("batch set: " + client.batchSet(objInfo,keyValues,failKeys,(int)(System.currentTimeMillis() / 1000) + 300) + failKeys);      System.out.println("batch get: " + client.batchGet(objInfo,keys,failKeys,(int)(System.currentTimeMillis() / 1000) + 30) + failKeys);      System.out.println("batch delete: " + client.batchDelete(objInfo,keys,failKeys) + failKeys);      System.out.println("stat: " + client.stat(1));      System.out.println("after batch delete, sub keys: " + Arrays.toString(client.getSubKeys(objInfo)));    }  finally {      client.close();    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static double cauchy(){  return Math.tan(Math.PI * (uniform() - 0.5));}  }
class C{  private void initData(){  this.photo=Mysplash.getInstance().getPhoto();}  }
class C{  protected void at(boolean condition){  Assert.assertTrue(condition);}  }
class C{  private static <T>T stringToObject(String jsonString,Class<T> type){  try {    return mapper.readValue(jsonString,type);  } catch (  IOException e) {    log.warn("Could not create a object of the class" + type.getName() + " out of the value "+ jsonString+ ": "+ e.getMessage());    return null;  }}  }
class C{  public static <T extends Serializable>Task<T> task(Callable<T> callable){  return new CallableTaskAdapter<T>(callable);}  }
class C{  @TargetApi(Build.VERSION_CODES.M) public static boolean hasPermission(Activity activity,String permission){  return activity.checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public DocumentNGramGraph inverseIntersectGraph(DocumentNGramGraph dgOtherGraph){  DocumentNGramGraph dgUnion=(DocumentNGramGraph)clone();  dgUnion.mergeGraph(dgOtherGraph,0);  DocumentNGramGraph dgIntersection=intersectGraph(dgOtherGraph);  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gUnion=dgUnion.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gIntersection=dgIntersection.getGraphLevelByNGramSize(iCurLvl);    EdgeCachedLocator eclLocator=new EdgeCachedLocator(10);    if (gIntersection == null)     continue;    java.util.Iterator iIter=gIntersection.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gUnion,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gUnion.removeEdge(eEdge);      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  return dgUnion;}  }
class C{  public Vector3f mult(Vector3f vec,Vector3f store){  if (store == null) {    store=new Vector3f();  }  float vx=vec.x, vy=vec.y, vz=vec.z;  store.x=m00 * vx + m01 * vy + m02 * vz + m03;  store.y=m10 * vx + m11 * vy + m12 * vz + m13;  store.z=m20 * vx + m21 * vy + m22 * vz + m23;  return store;}  }
class C{  @Override public boolean ready() throws IOException {  return false;}  }
class C{  public GroupsLeaveQuery leave(UserActor actor,int groupId){  return new GroupsLeaveQuery(getClient(),actor,groupId);}  }
class C{  @Override public void populateExpression(Object objValue){  if (objValue instanceof ProcessFunction) {    ProcessFunction processFunction=(ProcessFunction)objValue;    populateField(processFunction);  }}  }
class C{  @PUT @Path("{table}/{key}") @Consumes(MediaType.APPLICATION_JSON) @RequiresPermissions("sor|update|{table}") @Timed(name="bv.emodb.sor.DataStoreResource1.replace",absolute=true) @ApiOperation(value="Creates or replaces a piece of content in the data store.",notes="Creates or replaces a piece of content in the data store.  Overwrites the old\n" + " version of the content, if it exists.  Expects a literal JSON representation\n" + " of the object.",response=SuccessResponse.class) public SuccessResponse replace(@PathParam("table") String table,@PathParam("key") String key,@QueryParam("changeId") TimeUUIDParam changeIdParam,Map<String,Object> json,@QueryParam("audit") AuditParam auditParam,@QueryParam("consistency") @DefaultValue("STRONG") WriteConsistencyParam consistency,@QueryParam("tag") List<String> tags,@QueryParam("debug") BooleanParam debug,@Authenticated Subject subject){  Set<String> tagsSet=(tags == null) ? ImmutableSet.<String>of() : Sets.newHashSet(tags);  return doUpdate(table,key,changeIdParam,Deltas.literal(json),auditParam,consistency,debug,false,subject,tagsSet);}  }
class C{  public boolean addTagId(final Long tagId){  if (tagId != null && tagId > 0) {    return tagIds.add(tagId);  }  return false;}  }
class C{  public FaveGetLinksQuery(VkApiClient client,UserActor actor){  super(client,"fave.getLinks",GetLinksResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public FileUtils(){  super();}  }
class C{  public static void main(String[] args){  OkHttpClient http=new OkHttpClient();  PokemonGo go=new PokemonGo(http,new SystemTimeImpl());  try {    GoogleAutoCredentialProvider authProvider=new GoogleAutoCredentialProvider(http,ExampleLoginDetails.LOGIN,ExampleLoginDetails.PASSWORD);    go.login(authProvider);    go.setLocation(45.817521,16.028199,0);    go.getInventories().getItemBag().useIncense();  } catch (  LoginFailedException|RemoteServerException e) {    Log.e("Main","Failed to login or server issue: ",e);  }}  }
class C{  public void renameLocalsSearch(Block block){  List<Local> lhsLocals=new ArrayList<Local>();{    for (    Unit unit : block) {{        List<ValueBox> useBoxes=new ArrayList<ValueBox>();        if (!Shimple.isPhiNode(unit))         useBoxes.addAll(unit.getUseBoxes());        for (        ValueBox useBox : useBoxes) {          Value use=useBox.getValue();          int localIndex=indexOfLocal(use);          if (localIndex == -1)           continue;          Local localUse=(Local)use;          if (namingStacks[localIndex].empty())           continue;          Integer subscript=namingStacks[localIndex].peek();          Local renamedLocal=fetchNewLocal(localUse,subscript);          useBox.setValue(renamedLocal);        }      }{        if (!(unit instanceof DefinitionStmt))         continue;        DefinitionStmt defStmt=(DefinitionStmt)unit;        Value lhsValue=defStmt.getLeftOp();        if (!origLocals.contains(lhsValue))         continue;        ValueBox lhsLocalBox=defStmt.getLeftOpBox();        Local lhsLocal=(Local)lhsValue;        lhsLocals.add(lhsLocal);        int localIndex=indexOfLocal(lhsLocal);        if (localIndex == -1)         throw new RuntimeException("Assertion failed.");        Integer subscript=assignmentCounters[localIndex];        Local newLhsLocal=fetchNewLocal(lhsLocal,subscript);        lhsLocalBox.setValue(newLhsLocal);        namingStacks[localIndex].push(subscript);        assignmentCounters[localIndex]++;      }    }  }{    for (    Block succ : cfg.getSuccsOf(block)) {      if (block.getHead() == null && block.getTail() == null)       continue;      for (      Unit unit : succ) {        PhiExpr phiExpr=Shimple.getPhiExpr(unit);        if (phiExpr == null)         continue;        int argIndex=phiExpr.getArgIndex(block);        if (argIndex == -1)         throw new RuntimeException("Assertion failed.");        ValueBox phiArgBox=phiExpr.getArgBox(argIndex);        Local phiArg=(Local)phiArgBox.getValue();        int localIndex=indexOfLocal(phiArg);        if (localIndex == -1)         throw new RuntimeException("Assertion failed.");        if (namingStacks[localIndex].empty())         continue;        Integer subscript=namingStacks[localIndex].peek();        Local newPhiArg=fetchNewLocal(phiArg,subscript);        phiArgBox.setValue(newPhiArg);      }    }  }{    DominatorNode<Block> node=dt.getDode(block);    Iterator<DominatorNode<Block>> childrenIt=dt.getChildrenOf(node).iterator();    while (childrenIt.hasNext()) {      DominatorNode<Block> childNode=childrenIt.next();      renameLocalsSearch(childNode.getGode());    }  }{    Iterator<Local> lhsLocalsIt=lhsLocals.iterator();    while (lhsLocalsIt.hasNext()) {      Local lhsLocal=lhsLocalsIt.next();      int lhsLocalIndex=indexOfLocal(lhsLocal);      if (lhsLocalIndex == -1)       throw new RuntimeException("Assertion failed.");      namingStacks[lhsLocalIndex].pop();    }  }}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public NormalDistribution(double mean,double sd) throws MathIllegalArgumentException {  if (sd <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.STANDARD_DEVIATION,sd);  }  this.mean=mean;  this.standardDeviation=sd;  this.logStandardDeviationPlusHalfLog2Pi=FastMath.log(sd) + 0.5 * FastMath.log(2 * FastMath.PI);}  }
class C{  public String message(){  return message;}  }
class C{  @Override public void dataSourceLoaded(GeometryTypeEnum geometryType,boolean isConnectedToDataSourceFlag){  DataSourceInterface dataSource=DataSourceFactory.getDataSource();  dataSourceAttributePanel.dataSourceLoaded(dataSource);}  }
class C{  public boolean simple_edges_bidirectional(){  return soot.PhaseOptions.getBoolean(options,"simple-edges-bidirectional");}  }
class C{  private void checkCreateTemplate(String category,String name) throws Exception {  checkCreateTemplate(category,name,false);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public ConnectTimeoutException(final String message){  super(message);}  }
class C{  private FieldRotation<T> composeInverseInternal(Rotation r){  return new FieldRotation<T>(q0.multiply(r.getQ0()).add(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))).negate(),q1.multiply(r.getQ0()).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))).subtract(q0.multiply(r.getQ1())),q2.multiply(r.getQ0()).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))).subtract(q0.multiply(r.getQ2())),q3.multiply(r.getQ0()).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))).subtract(q0.multiply(r.getQ3())),false);}  }
class C{  @Override public void error(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public boolean isRemoteProtocol(){  return isJiniProtocol() || isRmiProtocol();}  }
class C{  public void releaseScan(){  release();}  }
class C{  public boolean interiorContains(double p){  if (p == -S2.M_PI) {    p=S2.M_PI;  }  if (isInverted()) {    return p > lo() || p < hi();  } else {    return (p > lo() && p < hi()) || isFull();  }}  }
class C{  public synchronized void progressStop(){  if (this.progressDialog != null) {    this.progressDialog.dismiss();    this.progressDialog=null;  }}  }
class C{  private static String myCrypt(String password,String seed) throws RuntimeException {  String out=null;  int count=8;  MessageDigest digester;  if (!seed.substring(0,3).equals("$H$")) {    byte[] randomBytes=new byte[6];    rand.nextBytes(randomBytes);    seed=genSalt(randomBytes);  }  String salt=seed.substring(4,12);  if (salt.length() != 8) {    throw new RuntimeException("Error hashing password - Invalid seed.");  }  try {    digester=MessageDigest.getInstance("SHA-1");    digester.update((salt + password).getBytes("iso-8859-1"),0,(salt + password).length());    byte[] sha1Hash=digester.digest();    do {      byte[] CombinedBytes=new byte[sha1Hash.length + password.length()];      System.arraycopy(sha1Hash,0,CombinedBytes,0,sha1Hash.length);      System.arraycopy(password.getBytes("iso-8859-1"),0,CombinedBytes,sha1Hash.length,password.getBytes("iso-8859-1").length);      digester.update(CombinedBytes,0,CombinedBytes.length);      sha1Hash=digester.digest();    } while (--count > 0);    out=seed.substring(0,12);    out+=encode64(sha1Hash);  } catch (  NoSuchAlgorithmException|UnsupportedEncodingException Ex) {    System.err.println("Error hashing password." + Ex);  }  if (out == null) {    throw new RuntimeException("Error hashing password - out = null");  }  return out;}  }
class C{  public void unregisterForUpdates(){  SigninManager manager=SigninManager.get(getContext());  manager.removeSignInAllowedObserver(this);  ProfileDownloader.removeObserver(this);}  }
class C{  public static void log(int priority,String tag,String message,Throwable tr){  Log.println(priority,tag,message + '\n' + Log.getStackTraceString(tr));}  }
class C{  protected void modify(){  ++m_modCount;  m_cur=-1;}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public PaddingDecimalFormat(String pattern,int minLength){  super(pattern);  minimumLength=minLength;}  }
class C{  public static RequestQueue newRequestQueue(){  return newRequestQueue(3);}  }
class C{  public FeedbackTest(){  setResponseLogLengthLimit(500);}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  static public void addAll(List<String> list,String[] array){  for (  String item : array)   list.add(item);}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=79 * hash + (int)(Double.doubleToLongBits(this.x) ^ (Double.doubleToLongBits(this.x) >>> 32));  hash=79 * hash + (int)(Double.doubleToLongBits(this.y) ^ (Double.doubleToLongBits(this.y) >>> 32));  hash=79 * hash + (int)(Double.doubleToLongBits(this.z) ^ (Double.doubleToLongBits(this.z) >>> 32));  return hash;}  }
class C{  public boolean showAppMenu(View anchorView,boolean startDragging){  if (!mDelegate.shouldShowAppMenu() || isAppMenuShowing())   return false;  boolean isByPermanentButton=false;  if (anchorView == null) {    int displayHeight=mActivity.getResources().getDisplayMetrics().heightPixels;    Rect rect=new Rect();    mActivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);    int statusBarHeight=rect.top;    mHardwareButtonMenuAnchor.setY((displayHeight - statusBarHeight));    anchorView=mHardwareButtonMenuAnchor;    isByPermanentButton=true;  }  assert !(isByPermanentButton && startDragging);  if (mMenu == null) {    PopupMenu tempMenu=new PopupMenu(mActivity,anchorView);    tempMenu.inflate(mMenuResourceId);    mMenu=tempMenu.getMenu();  }  mDelegate.prepareMenu(mMenu);  ContextThemeWrapper wrapper=new ContextThemeWrapper(mActivity,R.style.OverflowMenuTheme);  if (mAppMenu == null) {    TypedArray a=wrapper.obtainStyledAttributes(new int[]{android.R.attr.listPreferredItemHeightSmall,android.R.attr.listDivider});    int itemRowHeight=a.getDimensionPixelSize(0,0);    Drawable itemDivider=a.getDrawable(1);    int itemDividerHeight=itemDivider != null ? itemDivider.getIntrinsicHeight() : 0;    a.recycle();    mAppMenu=new AppMenu(mMenu,itemRowHeight,itemDividerHeight,this,mActivity.getResources());    mAppMenuDragHelper=new AppMenuDragHelper(mActivity,mAppMenu,itemRowHeight);  }  Rect appRect=new Rect();  mActivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(appRect);  if (appRect.left < 0 && appRect.top < 0) {    appRect.left=0;    appRect.top=0;    appRect.right=mActivity.getWindow().getDecorView().getWidth();    appRect.bottom=mActivity.getWindow().getDecorView().getHeight();  }  int rotation=mActivity.getWindowManager().getDefaultDisplay().getRotation();  Point pt=new Point();  mActivity.getWindowManager().getDefaultDisplay().getSize(pt);  mAppMenu.show(wrapper,anchorView,isByPermanentButton,rotation,appRect,pt.y,mDelegate.getFooterResourceId());  mAppMenuDragHelper.onShow(startDragging);  RecordUserAction.record("MobileMenuShow");  return true;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public void addLanguage(Language language){  addLanguage(language.getId());}  }
class C{  public int read(byte b[],int off,int len){  if (_position >= _count)   return -1;  if (_position + len > _count)   len=_count - _position;  if (len <= 0)   return 0;  System.arraycopy(_buffer,_position,b,off,len);  _position+=len;  return len;}  }
class C{  public String addSymbol(String symbol){  int bucket=hash(symbol) % fTableSize;  for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    if (entry.symbol.equals(symbol)) {      return entry.symbol;    }  }  if (fCount >= fThreshold) {    rehash();    bucket=hash(symbol) % fTableSize;  }  Entry entry=new Entry(symbol,fBuckets[bucket]);  fBuckets[bucket]=entry;  ++fCount;  return entry.symbol;}  }
class C{  public SpaceEntryCompoundIndexGetter(ISpaceCompoundIndexSegment[] segments){  _segments=segments;}  }
class C{  public IdsQuery(String typeName,Object[] ids,Object routing,QueryResultType queryResultType){  this(typeName,ids,routing,null,queryResultType);}  }
class C{  public ContinousQuery(Class<T> type,String sqlExpression,QueryResultType queryResultType,Object... parameters){  super(type,sqlExpression,queryResultType,parameters);}  }
class C{  public void centralizeContent(){  int measuredWidth=getMeasuredWidth();  int measuredHeight=getMeasuredHeight();  int scaledContentWidth=getScaledContentWidth();  int scaledContentHeight=getScaledContentHeight();  if (SHOW_LOGS)   Logger.d(TAG,"centralizeContent, measuredWidth " + measuredWidth + ", measuredHeight "+ measuredHeight+ ", scaledContentWidth "+ scaledContentWidth+ ", scaledContentHeight "+ scaledContentHeight);  mContentX=0;  mContentY=0;  if (SHOW_LOGS)   Logger.d(TAG,"centerVideo, mContentX " + mContentX + ", mContentY "+ mContentY);  updateMatrixScaleRotate();}  }
class C{  public RegexFileFilter(String pattern,int flags){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  this.pattern=Pattern.compile(pattern,flags);}  }
class C{  public static Map<String,Object> createElectronicText(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=createElectronicTextMethod(dctx,context);  return result;}  }
class C{  protected PhotosReorderPhotosQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  @Override public void updateTask(){  if (entity.getDistanceSq(targetItem.posX,targetItem.posY,targetItem.posZ) <= 2.0D && targetItem.getEntityItem().stackSize > 0) {    processItemEating();  } else {    ++timeoutCounter;    if (timeoutCounter % 40 == 0) {      this.entity.getNavigator().tryMoveToXYZ(targetItem.posX,targetItem.posY,targetItem.posZ,1.0F);    }  }}  }
class C{  @Nullable public static String extractMajorVersionFromSemanticVersion(String semanticVersion){  Matcher matcher=SEMANTIC_VERSION_REGEX_PATTERN.matcher(semanticVersion);  if (matcher.find()) {    return matcher.group(1);  } else {    return null;  }}  }
class C{  public String process(Item item) throws ProcessException {  return getPhoneFeature(item,"ctype");}  }
class C{  protected void initFileLocation(){  PathService pathService=CarbonCommonFactory.getPathService();  CarbonTablePath carbonTablePath=pathService.getCarbonTablePath(columnIdentifier,this.hdfsStorePath,carbonTableIdentifier);  this.columnDictionaryMetadataFilePath=carbonTablePath.getDictionaryMetaFilePath(columnIdentifier.getColumnId());}  }
class C{  public void createAssets(){  if (isStepVisible()) {    File destination=myState.get(ATTR_OUTPUT_FOLDER);    assert destination != null;    myAssetGenerator.outputImagesIntoVariantRoot(destination.getParentFile());  }}  }
class C{  @Override public void format(Buffer buf){  int slotSize=RecordPage.slotSize(ti.schema());  Constant emptyFlag=new IntegerConstant(EMPTY);  for (int pos=0; pos + slotSize <= Buffer.BUFFER_SIZE; pos+=slotSize) {    setVal(buf,pos,emptyFlag);    makeDefaultRecord(buf,pos);  }}  }
class C{  protected URLConnection openConnection(URL u) throws IOException {  return new HttpmdURLConnection(u);}  }
class C{  @deprecated public UScriptRun(char[] chars,int start,int count){  reset(chars,start,count);}  }
class C{  public static void registerComponent(String resourceType,String descriptionFactoryLink,Class<? extends ResourceState> descriptionClass,String stateFactoryLink,Class<? extends ResourceState> stateClass,Class<? extends ResourceState> stateTemplateClass){  entries.add(new RegistryEntry(resourceType,descriptionFactoryLink,descriptionClass,stateFactoryLink,stateClass,stateTemplateClass));}  }
class C{  private JobDefinition extractJobDefinitionsFromStageDefinition(StageDefinition stageDefinition,String jobDefinitionId){  JobDefinition result=stageDefinition.getJobDefinitions().stream().filter(null).findFirst().orElse(null);  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXCHANGE_ASKED_EXCHANGE_TO_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1300353,value0);}  }
class C{  public static void warnInfo(String msg){  warnInfo("zhibo",msg);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BasicCatch fullCopy(){  BasicCatch tree=(BasicCatch)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static double linearInterp(double val,double min,double max){  double denominator=(max - min);  if (denominator == 0)   return 0;  return (val - min) / denominator;}  }
class C{  protected AbstractUnivariateDifferentiableSolver(final double relativeAccuracy,final double absoluteAccuracy,final double functionValueAccuracy){  super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy);}  }
class C{  private boolean checkForSource(Abstraction abs,SourceContextAndPath scap){  if (abs.getPredecessor() != null)   return false;  assert abs.getSourceContext() != null;  assert abs.getNeighbors() == null;  SourceContext sourceContext=abs.getSourceContext();  results.addResult(scap.getAccessPath(),scap.getStmt(),sourceContext.getAccessPath(),sourceContext.getStmt(),sourceContext.getUserData(),scap.getPath());  return true;}  }
class C{  public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  double dStartWeight=0;  double dIncreaseWeight=0;  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace();    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  List lOldEdges;  lOldEdges=gGraph.getEdges(vA);  int iCnt=0;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    double dOldWeight=0;    double dNewWeight=0;    dStartWeight=ScalingFunction(++iCnt);    dIncreaseWeight=dStartWeight;    if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);    WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vA,vB,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public TShortHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  this._hashingStrategy=this;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private boolean wasTapCloseToPreviousTap(int x,int y){  float deltaXDp=(mX - x) * mPxToDp;  float deltaYDp=(mY - y) * mPxToDp;  float distanceSquaredDp=deltaXDp * deltaXDp + deltaYDp * deltaYDp;  return distanceSquaredDp <= RETAP_DISTANCE_SQUARED_DP;}  }
class C{  public static boolean isEmpty(String str){  return str == null || str.length() == 0;}  }
class C{  @Override public Histogram histogram(){  return p.histogram();}  }
class C{  public void testHighlightLineEscapeFuzz(){  Random rand=new Random();  CodeMatcher cm=new CodeMatcher();  List<String> matchTerms;  for (int i=0; i < 1000; i++) {    matchTerms=new ArrayList<String>();    matchTerms.add(RandomStringUtils.randomAscii(rand.nextInt(1) + 1).replace("*","A"));    matchTerms.add(RandomStringUtils.randomAscii(rand.nextInt(2) + 1).replace("*","A"));    matchTerms.add(RandomStringUtils.randomAscii(rand.nextInt(5) + 1).replace("*","A"));    matchTerms.add(RandomStringUtils.randomAscii(rand.nextInt(10) + 1).replace("*","A"));    matchTerms.add(RandomStringUtils.randomAscii(rand.nextInt(15) + 1).replace("*","A"));    String line=RandomStringUtils.randomAscii(rand.nextInt(1000) + 1);    cm.highlightLine(line,matchTerms);  }}  }
class C{  @Override public void onMenuItemClick(int position){switch (position) {case 0:    switchFragment(getString(R.string.menu_recommend),Constants.Topic.EXCELLENT);  break;case 1:switchFragment(getString(R.string.menu_hot),Constants.Topic.VOTE);break;case 2:switchFragment(getString(R.string.menu_newest),Constants.Topic.NEWEST);break;case 3:switchFragment(getString(R.string.menu_nobody),Constants.Topic.NOBODY);break;case 4:switchFragment(getString(R.string.menu_jobs),Constants.Topic.JOBS);break;case 5:switchFragment(getString(R.string.menu_wiki),Constants.Topic.WIKI);break;case 6:mToolBar.setTitle(getString(R.string.menu_vote));mTopicListByMeFragment.TYPE=Constants.User.USER_TOPIC_VOTES;toUserFragment();break;case 7:mToolBar.setTitle(getString(R.string.menu_topic));mTopicListByMeFragment.TYPE=Constants.User.USER_TOPIC_MY;toUserFragment();break;case 8:OpenWebViewUtils.myReply(MainActivity.this,mUserInfoEntity.getData().getLinks().getReplies_web_view());break;}if (position != 8) {mMenuAdapter.setSelectPosition(position);mMenuAdapter.notifyDataSetChanged();mDrawerLayout.closeDrawers();}}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Constraint.verify(classes);}  }
class C{  protected Preference onCreateItem(String name,AttributeSet attrs) throws ClassNotFoundException {  return createItem(name,mDefaultPackages,attrs);}  }
class C{  public UtilsResolveScreenNameQuery resolveScreenName(UserActor actor,String screenName){  return new UtilsResolveScreenNameQuery(getClient(),actor,screenName);}  }
class C{  private String printDFormat(String sx){  int nLeadingZeros=0;  int nBlanks=0, n=0;  int i=0, jFirst=0;  boolean neg=sx.charAt(0) == '-';  if (sx.equals("0") && precisionSet && precision == 0)   sx="";  if (!neg) {    if (precisionSet && sx.length() < precision)     nLeadingZeros=precision - sx.length();  } else {    if (precisionSet && (sx.length() - 1) < precision)     nLeadingZeros=precision - sx.length() + 1;  }  if (nLeadingZeros < 0)   nLeadingZeros=0;  if (fieldWidthSet) {    nBlanks=fieldWidth - nLeadingZeros - sx.length();    if (!neg && (leadingSign || leadingSpace))     nBlanks--;  }  if (nBlanks < 0)   nBlanks=0;  if (leadingSign)   n++; else   if (leadingSpace)   n++;  n+=nBlanks;  n+=nLeadingZeros;  n+=sx.length();  char[] ca=new char[n];  if (leftJustify) {    if (neg)     ca[i++]='-'; else     if (leadingSign)     ca[i++]='+'; else     if (leadingSpace)     ca[i++]=' ';    char[] csx=sx.toCharArray();    jFirst=neg ? 1 : 0;    for (int j=0; j < nLeadingZeros; i++, j++)     ca[i]='0';    for (int j=jFirst; j < csx.length; j++, i++)     ca[i]=csx[j];    for (int j=0; j < nBlanks; i++, j++)     ca[i]=' ';  } else {    if (!leadingZeros) {      for (i=0; i < nBlanks; i++)       ca[i]=' ';      if (neg)       ca[i++]='-'; else       if (leadingSign)       ca[i++]='+'; else       if (leadingSpace)       ca[i++]=' ';    } else {      if (neg)       ca[i++]='-'; else       if (leadingSign)       ca[i++]='+'; else       if (leadingSpace)       ca[i++]=' ';      for (int j=0; j < nBlanks; j++, i++)       ca[i]='0';    }    for (int j=0; j < nLeadingZeros; j++, i++)     ca[i]='0';    char[] csx=sx.toCharArray();    jFirst=neg ? 1 : 0;    for (int j=jFirst; j < csx.length; j++, i++)     ca[i]=csx[j];  }  return new String(ca);}  }
class C{  public WallGetRepostsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public boolean isUpdateAvailable(){  return availableUpdate != null;}  }
class C{  public InvalidConfigurationException(){}  }
class C{  protected void assertClose(String msg,Fraction[] m,Fraction[] n,double tolerance){  if (m.length != n.length) {    Assert.fail("vectors have different lengths");  }  for (int i=0; i < m.length; i++) {    Assert.assertEquals(msg + " " + i+ " elements differ",m[i].doubleValue(),n[i].doubleValue(),tolerance);  }}  }
class C{  public String[] upload_file(String group_name,String master_filename,String prefix_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  if ((group_name == null || group_name.length() == 0) || (master_filename == null || master_filename.length() == 0) || (prefix_name == null)) {    throw new MyException("invalid arguement");  }  File f=new File(local_filename);  FileInputStream fis=new FileInputStream(f);  if (file_ext_name == null) {    int nPos=local_filename.lastIndexOf('.');    if (nPos > 0 && local_filename.length() - nPos <= ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN + 1) {      file_ext_name=local_filename.substring(nPos + 1);    }  }  try {    return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE,group_name,master_filename,prefix_name,file_ext_name,f.length(),new UploadStream(fis,f.length()),meta_list);  }  finally {    fis.close();  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public DocumentWordHistogram(){  MinSize=1;  MaxSize=2;}  }
class C{  public static int hsba(float h,float s,float b,float a){  return setAlpha(Color.HSBtoRGB(h,s,b),(int)(a * 255 + 0.5) & 0xFF);}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.activity_camera_viewer);  mView=(SurfaceView)findViewById(R.id.surfaceview);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  mFaceView=new FaceOverlayView(this);  addContentView(mFaceView,new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));  recyclerView=(RecyclerView)findViewById(R.id.recycler_view);  RecyclerView.LayoutManager mLayoutManager=new LinearLayoutManager(getApplicationContext());  recyclerView.setLayoutManager(mLayoutManager);  recyclerView.setItemAnimator(new DefaultItemAnimator());  handler=new Handler();  faces=new FaceResult[MAX_FACE];  faces_previous=new FaceResult[MAX_FACE];  for (int i=0; i < MAX_FACE; i++) {    faces[i]=new FaceResult();    faces_previous[i]=new FaceResult();  }  getSupportActionBar().setDisplayShowTitleEnabled(true);  getSupportActionBar().setHomeButtonEnabled(true);  getSupportActionBar().setDisplayHomeAsUpEnabled(true);  getSupportActionBar().setTitle("Face Detect Gray");  if (icicle != null)   cameraId=icicle.getInt(BUNDLE_CAMERA_ID,0);}  }
class C{  public static int readUnsignedShort(byte[] bytes,int start){  return (((bytes[start] & 0xff) << 8) + ((bytes[start + 1] & 0xff)));}  }
class C{  public void merge(Histogram other){  int i;  for (i=0; i <= limits.length; ++i)   results[i]+=other.results[i];  count+=other.count;}  }
class C{  private boolean isDerivedByExtension(String ancestorNS,String ancestorName,int derivationMethod,XSTypeDefinition type){  boolean extension=false;  XSTypeDefinition oldType=null;  while (type != null && type != oldType) {    if (ancestorNS != null && ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA) && ancestorName.equals(SchemaSymbols.ATTVAL_ANYSIMPLETYPE) && SchemaSymbols.URI_SCHEMAFORSCHEMA.equals(type.getNamespace()) && SchemaSymbols.ATTVAL_ANYTYPE.equals(type.getName())) {      break;    }    if ((ancestorName.equals(type.getName())) && ((ancestorNS == null && type.getNamespace() == null) || (ancestorNS != null && ancestorNS.equals(type.getNamespace())))) {      return extension;    }    if (type instanceof XSSimpleTypeDecl) {      if (ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA) && ancestorName.equals(SchemaSymbols.ATTVAL_ANYTYPE)) {        ancestorName=SchemaSymbols.ATTVAL_ANYSIMPLETYPE;      }      if ((derivationMethod & DERIVATION_EXTENSION) != 0) {        return extension & ((XSSimpleTypeDecl)type).isDOMDerivedFrom(ancestorNS,ancestorName,(derivationMethod & DERIVATION_RESTRICTION));      } else {        return extension & ((XSSimpleTypeDecl)type).isDOMDerivedFrom(ancestorNS,ancestorName,derivationMethod);      }    } else {      if (((XSComplexTypeDecl)type).getDerivationMethod() == XSConstants.DERIVATION_EXTENSION) {        extension=extension | true;      }    }    oldType=type;    type=type.getBaseType();  }  return false;}  }
class C{  public boolean drain(){  return true;}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public List<AbstractIndex> loadAndGetBlocks(List<TableBlockInfo> tableBlocksInfos,AbsoluteTableIdentifier absoluteTableIdentifier) throws IndexBuilderException {  AbstractIndex[] loadedBlock=new AbstractIndex[tableBlocksInfos.size()];  addTableLockObject(absoluteTableIdentifier);  Object lockObject=tableLockMap.get(absoluteTableIdentifier);  Map<BlockInfo,AbstractIndex> tableBlockMapTemp=null;  int numberOfCores=1;  try {    numberOfCores=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));  } catch (  NumberFormatException e) {    numberOfCores=Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);  }  ExecutorService executor=Executors.newFixedThreadPool(numberOfCores);  List<BlockInfo> blockInfosNeedToLoad=null;synchronized (lockObject) {    tableBlockMapTemp=tableBlocksMap.get(absoluteTableIdentifier);    if (null == tableBlockMapTemp) {      tableBlockMapTemp=new ConcurrentHashMap<BlockInfo,AbstractIndex>();      tableBlocksMap.put(absoluteTableIdentifier,tableBlockMapTemp);    }    blockInfosNeedToLoad=fillSegmentIdToTableInfoMap(tableBlocksInfos,absoluteTableIdentifier);  }  AbstractIndex tableBlock=null;  List<Future<AbstractIndex>> blocksList=new ArrayList<Future<AbstractIndex>>();  int counter=-1;  for (  BlockInfo blockInfo : blockInfosNeedToLoad) {    counter++;    tableBlock=tableBlockMapTemp.get(blockInfo);    if (null == tableBlock) {      Object blockInfoLockObject=blockInfoLock.get(blockInfo);      if (null == blockInfoLockObject) {synchronized (blockInfoLock) {          blockInfoLockObject=blockInfoLock.get(blockInfo);          if (null == blockInfoLockObject) {            blockInfoLockObject=new Object();            blockInfoLock.put(blockInfo,blockInfoLockObject);          }        }      }synchronized (blockInfoLockObject) {        tableBlock=tableBlockMapTemp.get(blockInfo);        if (null == tableBlock) {          blocksList.add(executor.submit(new BlockLoaderThread(blockInfo,tableBlockMapTemp)));        }      }    } else {      loadedBlock[counter]=tableBlock;    }  }  executor.shutdown();  try {    executor.awaitTermination(1,TimeUnit.HOURS);  } catch (  InterruptedException e) {    throw new IndexBuilderException(e);  }  fillLoadedBlocks(loadedBlock,blocksList);  return Arrays.asList(loadedBlock);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ALARM_COLD_GAME_IDDREADGION_02(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400629,durationtime0);}  }
class C{  @Override public Double analyse(double[] frame){  if (frame.length != getFrameLengthSamples())   throw new IllegalArgumentException("Expected frame of length " + getFrameLengthSamples() + ", got "+ frame.length);  double totalEnergy=0;  for (int i=0; i < frame.length; i++) {    totalEnergy+=frame[i] * frame[i];  }  rememberFrameEnergy(totalEnergy);  return new Double(totalEnergy);}  }
class C{  public static boolean isFrictionImpulseEnabled(){  return frictionImpulseEnabled;}  }
class C{  @Override public void onConnectionFailed(@NonNull ConnectionResult connectionResult){  Log.i(TAG,"onConnectionFailed: " + connectionResult.getErrorMessage());  if (connectionResult.getResolution() != null) {  }}  }
class C{  void register(String[] patterns){  for (  String pattern : patterns) {    register(pattern,TRUE);  }}  }
class C{  private void recordSimpleResourceEdit(){synchronized (myLock) {    mySeenLocalResourceChanges=true;  }}  }
class C{  private List<ProcessChange> updateControlTagInformation(final ConfigurationElement element,final SubEquipment subEquipment){  List<ProcessChange> changes=new ArrayList<ProcessChange>(3);  final Long processId=subEquipmentFacade.getProcessIdForAbstractEquipment(subEquipment.getId());  ControlTag aliveTagCopy=controlCache.getCopy(subEquipment.getAliveTagId());  if (aliveTagCopy != null) {    setSubEquipmentId((ControlTagCacheObject)aliveTagCopy,subEquipment.getId(),processId);    if (aliveTagCopy.getAddress() != null) {      IChange toAdd=new DataTagAdd(element.getSequenceId(),subEquipment.getId(),controlTagFacade.generateSourceDataTag(aliveTagCopy));      ConfigurationElementReport report=new ConfigurationElementReport(Action.CREATE,Entity.CONTROLTAG,aliveTagCopy.getId());      ProcessChange change=new ProcessChange(processId,toAdd);      change.setNestedSubReport(report);      changes.add(change);    } else {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("Alive tag #%d (%s) for sub-equipment #%d (%s) must by definition have a hardware address defined.",aliveTagCopy.getId(),aliveTagCopy.getName(),subEquipment.getId(),subEquipment.getName()));    }  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Alive tag (%s) found for sub-equipment #%d (%s).",subEquipment.getAliveTagId(),subEquipment.getId(),subEquipment.getName()));  }  ControlTag commFaultTagCopy=controlCache.getCopy(subEquipment.getCommFaultTagId());  if (commFaultTagCopy != null) {    setSubEquipmentId((ControlTagCacheObject)commFaultTagCopy,subEquipment.getId(),processId);  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No CommFault tag (%s) found for sub-equipment #%d (%s).",subEquipment.getCommFaultTagId(),subEquipment.getId(),subEquipment.getName()));  }  ControlTag statusTagCopy=controlCache.getCopy(subEquipment.getStateTagId());  if (statusTagCopy != null) {    setSubEquipmentId((ControlTagCacheObject)statusTagCopy,subEquipment.getId(),processId);  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Status tag (%s) found for sub-equipment #%d (%s).",subEquipment.getStateTagId(),subEquipment.getId(),subEquipment.getName()));  }  return changes;}  }
class C{  public static double max(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  return MAX.evaluate(values,begin,length);}  }
class C{  Object doWork(TaskManager.Task who,Object param){  ParticipantHandle handle=(ParticipantHandle)param;  TransactionParticipant par=null;  if (logger.isLoggable(Level.FINEST)) {    logger.log(Level.FINEST,"CommitJob:doWork committing handle: {0}",handle);  }  int vote=handle.getPrepState();switch (vote) {case COMMITTED:case NOTCHANGED:case ABORTED:    return new Integer(vote);}if (par == null) par=handle.getParticipant();try {  if (attempt(who) > maxtries) {    return new Integer(COMMITTED);  }} catch (JobException je) {  return null;}if (par == null) return null;Object response=null;try {  int preparedParticipants=0;  for (int i=0; i < handles.length; i++) {    if (handles[i].getPrepState() != NOTCHANGED && (handle.getClusterName() == handles[i].getClusterName() || handle.getClusterName() != null && handle.getClusterName().equals(handles[i].getClusterName())))     preparedParticipants++;  }  if (handle.isSuitableForCommitFailover()) {    commitPartitionWithEnabledFailover(handle,tr.mgr,tr.id,_xid,preparedParticipants);  } else {    if (_xid == null)     par.commit(tr.mgr,tr.id,preparedParticipants); else     ((IRemoteSpace)par).commit(tr.mgr,_xid,preparedParticipants);  }  response=new Integer(COMMITTED);} catch (TransactionException bte) {  response=new Integer(COMMITTED);}catch (NoSuchObjectException nsoe) {  response=new Integer(COMMITTED);}catch (ConnectException ce) {  if (numberOfRetriesDueToConnectionExceptionExceeded(who))   response=new Integer(COMMITTED);}catch (UnknownHostException uhe) {  response=new Integer(COMMITTED);}catch (ConnectIOException cioe) {  if (numberOfRetriesDueToConnectionExceptionExceeded(who))   response=new Integer(COMMITTED);}catch (MarshalException me) {  response=new Integer(COMMITTED);}catch (AccessException ae) {  response=new Integer(COMMITTED);}catch (ActivateFailedException afe) {  response=new Integer(COMMITTED);}catch (RemoteException re) {  response=new Integer(COMMITTED);}catch (RuntimeException rte) {  response=new Integer(COMMITTED);}if (response != null) {  handle.setPrepState(COMMITTED);  try {    log.write(new ParticipantCommitRecord(handle));  } catch (  com.sun.jini.mahalo.log.LogException le) {  }  return response;}return null;}  }
class C{  public TestBase(){  init();  simpleGson=new GsonBuilder().create();}  }
class C{  public void reset(final Vector3D p1,final Vector3D p2) throws MathIllegalArgumentException {  final Vector3D delta=p2.subtract(p1);  final double norm2=delta.getNormSq();  if (norm2 == 0.0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.ZERO_NORM);  }  this.direction=new Vector3D(1.0 / FastMath.sqrt(norm2),delta);  zero=new Vector3D(1.0,p1,-p1.dotProduct(delta) / norm2,delta);}  }
class C{  @Override public byte[] readByteArray(String filePath,int length){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,length);  return byteBffer.array();}  }
class C{  private void createTypeProposalLabel(CompletionProposal typeProposal,CompletionItem item){  char[] signature;  if (fContext != null && fContext.isInJavadoc())   signature=Signature.getTypeErasure(typeProposal.getSignature()); else   signature=typeProposal.getSignature();  char[] fullName=Signature.toCharArray(signature);  createTypeProposalLabel(fullName,item);  setDeclarationSignature(item,String.valueOf(signature));}  }
class C{  private void buildJoinInfo(){  for (  QueryTableData tableData : query.getTablesData()) {    tableData.createJoinIndex(query.getExpTree());  }  List<LinkedList<QueryTableData>> joinedSequences=new LinkedList<LinkedList<QueryTableData>>();  for (int i=0; i < query.getTablesData().size(); i++) {    QueryTableData tableData=query.getTablesData().get(i);    if (!tableData.isJoined()) {      LinkedList<QueryTableData> seq=new LinkedList<QueryTableData>();      seq.add(tableData);      while (tableData.getJoinTable() != null) {        tableData=tableData.getJoinTable();        seq.add(tableData);      }      joinedSequences.add(seq);    }  }  QueryTableData lastJoined=null;  for (  LinkedList<QueryTableData> seq : joinedSequences) {    if (lastJoined != null) {      lastJoined.setJoinTable(seq.getFirst());      seq.getFirst().setJoined(true);    }    lastJoined=seq.getLast();  }}  }
class C{  @Override public void run(){  logger.debug("Starting ZWave thread: Receive");  try {    sendResponse(NAK);    while (!interrupted()) {      int nextByte;      try {        nextByte=serialPort.getInputStream().read();        if (nextByte == -1) {          if (rxState != SEARCH_SOF) {            logger.debug("Receive Timeout - Sending NAK");            rxState=SEARCH_SOF;          }          continue;        }      } catch (      IOException e) {        logger.error("Got I/O exception {} during receiving. exiting thread.",e.getLocalizedMessage());        break;      }switch (rxState) {case SEARCH_SOF:switch (nextByte) {case SOF:          logger.trace("Received SOF");        SOFCount++;      updateState(new ChannelUID(getThing().getUID(),CHANNEL_SERIAL_SOF),new DecimalType(SOFCount));    rxState=SEARCH_LEN;  break;case ACK:ACKCount++;updateState(new ChannelUID(getThing().getUID(),CHANNEL_SERIAL_ACK),new DecimalType(ACKCount));logger.trace("Received ACK");break;case NAK:NAKCount++;updateState(new ChannelUID(getThing().getUID(),CHANNEL_SERIAL_NAK),new DecimalType(NAKCount));logger.debug("Protocol error (NAK), discarding");break;case CAN:CANCount++;updateState(new ChannelUID(getThing().getUID(),CHANNEL_SERIAL_CAN),new DecimalType(CANCount));logger.debug("Protocol error (CAN), resending");break;default :OOFCount++;updateState(new ChannelUID(getThing().getUID(),CHANNEL_SERIAL_OOF),new DecimalType(OOFCount));logger.warn(String.format("Protocol error (OOF). Got 0x%02X.",nextByte));break;}break;case SEARCH_LEN:if (nextByte < 4 || nextByte > 64) {logger.debug("Frame length is out of limits ({})",nextByte);break;}messageLength=(nextByte & 0xff) + 2;rxBuffer=new byte[messageLength];rxBuffer[0]=SOF;rxBuffer[1]=(byte)nextByte;rxLength=2;rxState=SEARCH_DAT;break;case SEARCH_DAT:rxBuffer[rxLength]=(byte)nextByte;rxLength++;if (rxLength < messageLength) {break;}logger.debug("Receive Message = {}",SerialMessage.bb2hex(rxBuffer));SerialMessage recvMessage=new SerialMessage(rxBuffer);if (recvMessage.isValid) {logger.trace("Message is valid, sending ACK");sendResponse(ACK);incomingMessage(recvMessage);} else {CSECount++;updateState(new ChannelUID(getThing().getUID(),CHANNEL_SERIAL_CSE),new DecimalType(CSECount));logger.debug("Message is invalid, discarding");sendResponse(NAK);}rxState=SEARCH_SOF;break;}}} catch (Exception e) {logger.error("Exception during ZWave thread: Receive {}",e.getMessage());}logger.debug("Stopped ZWave thread: Receive");serialPort.removeEventListener();}  }
class C{  protected void handleKeyMatchedBeforeCompare(T oldObject,T newObject){}  }
class C{  public Matrix4f invert(Matrix4f store){  if (store == null) {    store=new Matrix4f();  }  float fA0=m00 * m11 - m01 * m10;  float fA1=m00 * m12 - m02 * m10;  float fA2=m00 * m13 - m03 * m10;  float fA3=m01 * m12 - m02 * m11;  float fA4=m01 * m13 - m03 * m11;  float fA5=m02 * m13 - m03 * m12;  float fB0=m20 * m31 - m21 * m30;  float fB1=m20 * m32 - m22 * m30;  float fB2=m20 * m33 - m23 * m30;  float fB3=m21 * m32 - m22 * m31;  float fB4=m21 * m33 - m23 * m31;  float fB5=m22 * m33 - m23 * m32;  float fDet=fA0 * fB5 - fA1 * fB4 + fA2 * fB3 + fA3 * fB2 - fA4 * fB1 + fA5 * fB0;  if (FastMath.abs(fDet) <= 0f) {    throw new ArithmeticException("This matrix cannot be inverted");  }  store.m00=+m11 * fB5 - m12 * fB4 + m13 * fB3;  store.m10=-m10 * fB5 + m12 * fB2 - m13 * fB1;  store.m20=+m10 * fB4 - m11 * fB2 + m13 * fB0;  store.m30=-m10 * fB3 + m11 * fB1 - m12 * fB0;  store.m01=-m01 * fB5 + m02 * fB4 - m03 * fB3;  store.m11=+m00 * fB5 - m02 * fB2 + m03 * fB1;  store.m21=-m00 * fB4 + m01 * fB2 - m03 * fB0;  store.m31=+m00 * fB3 - m01 * fB1 + m02 * fB0;  store.m02=+m31 * fA5 - m32 * fA4 + m33 * fA3;  store.m12=-m30 * fA5 + m32 * fA2 - m33 * fA1;  store.m22=+m30 * fA4 - m31 * fA2 + m33 * fA0;  store.m32=-m30 * fA3 + m31 * fA1 - m32 * fA0;  store.m03=-m21 * fA5 + m22 * fA4 - m23 * fA3;  store.m13=+m20 * fA5 - m22 * fA2 + m23 * fA1;  store.m23=-m20 * fA4 + m21 * fA2 - m23 * fA0;  store.m33=+m20 * fA3 - m21 * fA1 + m22 * fA0;  float fInvDet=1.0f / fDet;  store.multLocal(fInvDet);  return store;}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  private void acknowledgeQueueMessage(String messageId){  try {    _queueService.acknowledge(_queueName,ImmutableList.of(messageId));  } catch (  Exception e) {    _log.error("Failed to acknowledge message: [messageId={}]",messageId,e);  }}  }
class C{  public synchronized VisualTable addTable(String group,Table table,Predicate filter){  VisualTable vt=new VisualTable(table,this,group,filter);  addDataGroup(group,vt,table);  return vt;}  }
class C{  public void addField(FieldConfigBase fieldConfig){  this.fieldList.add(fieldConfig);}  }
class C{  public static String digital(int length){  Random rand=new Random(System.currentTimeMillis());  StringBuilder sb=new StringBuilder();  for (int i=0; i < length; i++) {    sb.append(digitals[rand.nextInt(digitals.length - 1)]);  }  return sb.toString();}  }
class C{  public static <K,V>HashMap<K,V> hashMap(int initialCapacity,float loadFactor){  return new HashMap<K,V>(initialCapacity,loadFactor);}  }
class C{  public int hashCode(){  int h=mask;  if (me != null) {    for (int i=me.length; --i >= 0; ) {      if (me[i] != null) {        h+=me[i].hashCode();      }    }  }  if (mask != LISTEN && peer != null) {    for (int i=peer.length; --i >= 0; ) {      h+=peer[i].hashCode();    }  }  return h;}  }
class C{  public Model create(String uri) throws Exception {  Model m=model.newInstance();  m.module=module;  m.pathmapping=pathmapping;  m.path=getPath(uri);  return m;}  }
class C{  private Plan makeIndexJoinPlan(Plan trunk,Schema trunkSch){  for (  String fld : idxes.keySet()) {    Set<String> outerFlds=pred.joinFields(fld);    if (outerFlds != null)     for (    String outerFld : outerFlds)     if (trunkSch.hasField(outerFld)) {      IndexInfo ii=idxes.get(fld);      Plan p=new IndexJoinPlan(trunk,tp,ii,outerFld,tx);      p=addSelectPredicate(p);      return addJoinPredicate(p,trunkSch);    }  }  return null;}  }
class C{  private Range parseContentRange(String contentRange){  Matcher matcher=CONTENT_RANGE_PATTERN.matcher(contentRange);  checkState(matcher.matches(),"Unexpected Content-Range header: %s",contentRange);  long start=Long.parseLong(matcher.group(1));  long end=Long.parseLong(matcher.group(2));  return new Range(start,end - start + 1);}  }
class C{  public void readInputData(Reader inputReader) throws Exception {  String inputText=FileUtils.getReaderAsString(inputReader);  setInputData(inputText);}  }
class C{  @Override public void close(){  s.close();  idx.close();  ts.close();}  }
class C{  protected void drawScaleBar(GraphView graphView,Graphics2D gc,Rectangle rect){  final Font oldFont=gc.getFont();  try {    if (pcoa.isDone() && pcoa.getNumberOfPositiveEigenValues() >= 2) {      final Rectangle grid=new Rectangle(rect.x + 40,rect.y + 20,rect.width - 60,rect.height - 40);      gc.setStroke(new BasicStroke(1));      if (!isIs3dMode()) {{          gc.setFont(Font.decode("Dialog-PLAIN-12"));          String label=getTitle2D();          Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();          gc.setColor(Color.DARK_GRAY);          gc.drawString(label,grid.x + grid.width / 2 - labelSize.width / 2,grid.y - 4);        }        if (isShowAxes()) {          gc.setFont(Font.decode("Dialog-PLAIN-11"));          gc.setColor(Color.LIGHT_GRAY);          final Point zeroDC=graphView.trans.w2d(0,0);          final DecimalFormat tickNumberFormat=new DecimalFormat("#.####");{            final double factor=COORDINATES_SCALE_FACTOR / pcoa.getEigenValues()[firstPC];            double step=0.0000001d;            int jump=5;            while (step < 100000 && graphView.trans.w2d(step * factor,0).getX() - zeroDC.getX() < 50) {              step*=jump;              if (jump == 5)               jump=2; else               jump=5;            }            for (            Boolean top : Arrays.asList(true,false)) {              Integer v0;              if (top)               v0=Math.round(grid.y); else               v0=Math.round(grid.y + grid.height);              gc.drawLine(grid.x,v0,grid.x + grid.width,v0);              for (              Integer sign : Arrays.asList(-1,1)) {                for (int i=(sign == 1 ? 0 : 1); i < 1000; i++) {                  Point2D tickWC=new Point2D.Double(sign * i * step* factor,0);                  Point tickDC=graphView.trans.w2d(tickWC);                  final String label=(i == 0 ? String.format("PC%d",firstPC + 1) : tickNumberFormat.format(sign * i * step));                  final Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();                  if (tickDC.x - labelSize.width / 2 >= grid.x && tickDC.x + labelSize.width / 2 <= grid.x + grid.width) {                    gc.drawLine(tickDC.x,v0,tickDC.x,v0 + (top ? 2 : -2));                    if (!top)                     gc.drawString(label,tickDC.x - labelSize.width / 2,v0 + labelSize.height);                  }                  if (sign == -1 && tickDC.x <= grid.x || sign == 1 && tickDC.x >= grid.x + grid.width)                   break;                }              }            }          }{            final double factor=COORDINATES_SCALE_FACTOR / pcoa.getEigenValues()[secondPC];            double step=0.0000001d;            int jump=5;            while (step < 100000 && graphView.trans.w2d(0,step * factor).getY() - zeroDC.getY() < 50) {              step*=jump;              if (jump == 5)               jump=2; else               jump=5;            }            int yTickStart=grid.y;            for (            Boolean left : Arrays.asList(true,false)) {              Integer h0;              if (left)               h0=Math.round(grid.x); else               h0=Math.round(grid.x + grid.width);              gc.drawLine(h0,grid.y,h0,grid.y + grid.height);              for (              Integer sign : Arrays.asList(-1,1)) {                for (int i=(sign == 1 ? 0 : 1); i < 1000; i++) {                  Point2D tickWC=new Point2D.Double(0,sign * i * step* factor);                  Point tickDC=graphView.trans.w2d(tickWC);                  final String label=(i == 0 ? String.format("PC%d",secondPC + 1) : tickNumberFormat.format(sign * i * step));                  final Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();                  if (tickDC.y - labelSize.height / 2 >= yTickStart && tickDC.y + labelSize.height / 2 <= grid.y + grid.height) {                    gc.drawLine(h0,tickDC.y,h0 + (left ? 2 : -2),tickDC.y);                    if (left)                     gc.drawString(label,h0 - labelSize.width - 2,tickDC.y + labelSize.height / 2);                  }                  if (sign == -1 && tickDC.y <= yTickStart || sign == 1 && tickDC.y >= grid.y + grid.height)                   break;                }              }            }          }        }      } else {{          gc.setFont(Font.decode("Dialog-PLAIN-12"));          String label=getTitle3D();          Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();          gc.setColor(Color.DARK_GRAY);          gc.drawString(label,grid.x + grid.width / 2 - labelSize.width / 2,grid.y - 4);        }        if (isShowAxes()) {          gc.setFont(Font.decode("Dialog-PLAIN-11"));          final Vector3D centerVector=new Vector3D(0,0,0);          centerVector.transform(transformation3D);          gc.setColor(Color.LIGHT_GRAY);          final Point center=graphView.trans.w2d(centerVector.get(0),centerVector.get(1));          final int axisLength=50;          final Point2D worldOrig=graphView.trans.d2w(0,0);          final Point2D worldX=graphView.trans.d2w(axisLength,0);{            Vector3D v=new Vector3D(worldX.getX() - worldOrig.getX(),0,0);            v.transform(transformation3D);            final Point point=graphView.trans.w2d(v.get(0),v.get(1));            gc.drawLine(center.x,center.y,point.x,point.y);            drawArrowHead(gc,center,point);            String label=String.format("PC%d",firstPC + 1);            gc.drawString(label,point.x,point.y);          }{            Vector3D v=new Vector3D(0,-(worldX.getX() - worldOrig.getX()),0);            v.transform(transformation3D);            final Point point=graphView.trans.w2d(v.get(0),v.get(1));            gc.drawLine(center.x,center.y,point.x,point.y);            drawArrowHead(gc,center,point);            String label=String.format("PC%d",secondPC + 1);            gc.drawString(label,point.x,point.y);          }{            Vector3D v=new Vector3D(0,0,worldX.getX() - worldOrig.getX());            v.transform(transformation3D);            final Point point=graphView.trans.w2d(v.get(0),v.get(1));            gc.drawLine(center.x,center.y,point.x,point.y);            drawArrowHead(gc,center,point);            String label=String.format("PC%d",thirdPC + 1);            gc.drawString(label,point.x,point.y);          }        }      }    }  } catch (  Exception ex) {  }  gc.setFont(oldFont);}  }
class C{  @ManagedOperation(description="Runs all recovery actions - to be used after a unclean server shutdown (kill)") public void recover(){  if (!stopRequested) {    publishUnpublishedAlarms();  }  if (!stopRequested) {    refreshStateTags();  }  if (!stopRequested) {    refreshDataTags();  }  if (!stopRequested) {    notifyAllTagCacheListeners();  }  if (!stopRequested) {    refreshSupervisionStatus();  }}  }
class C{  @Override public void close(){  getConceptLog().clearTransaction();  try {    graph.close();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public StyleData newStyle(Class className,String styleName){  Array<StyleData> styles=JsonData.getInstance().getClassStyleMap().get(className);  StyleData data=null;  for (  StyleData tempStyle : styles) {    if (tempStyle.name.equals(styleName)) {      data=tempStyle;      data.resetProperties();    }  }  if (data == null) {    data=new StyleData(className,styleName);    styles.add(data);  }  return data;}  }
class C{  public void animateAppearance(){  mOverlayPanel.addToAnimation(this,AnimationType.APPEARANCE,0.f,1.f,ContextualSearchPanelAnimation.BASE_ANIMATION_DURATION_MS,0);}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  private DataQueryGroups splitByDimension(DataQueryGroups queryGroups,String dimension,int optimalQueries){  int optimalForSubQuery=MathUtils.divideToFloor(optimalQueries,queryGroups.getLargestGroupSize());  List<DataQueryParams> subQueries=new ArrayList<>();  for (  DataQueryParams query : queryGroups.getAllQueries()) {    DimensionalObject dim=query.getDimension(dimension);    List<DimensionalItemObject> values=null;    if (dim == null || (values=dim.getItems()) == null || values.isEmpty()) {      subQueries.add(DataQueryParams.newBuilder(query).build());      continue;    }    List<List<DimensionalItemObject>> valuePages=new PaginatedList<>(values).setNumberOfPages(optimalForSubQuery).getPages();    for (    List<DimensionalItemObject> valuePage : valuePages) {      DataQueryParams subQuery=DataQueryParams.newBuilder(query).withDimensionOptions(dim.getDimension(),valuePage).build();      subQueries.add(subQuery);    }  }  if (subQueries.size() > queryGroups.getAllQueries().size()) {    log.debug("Split on dimension " + dimension + ": "+ (subQueries.size() / queryGroups.getAllQueries().size()));  }  return DataQueryGroups.newBuilder().withQueries(subQueries).build();}  }
class C{  public boolean gotoPrevious(){  if (isCurrentSet()) {    if (current.get2() > 0)     current.set2(current.get2() - 1); else     if (current.get1() > 0) {      current.set1(current.get1() - 1);      current.set2(table.getGrid().getColumnCount() - 1);    } else {      current.set1(-1);      current.set2(-1);    }  } else   gotoLast();  return isCurrentSet();}  }
class C{  @Override public void addDependency(@NotNull String configuration,@NotNull String mavenUrl){  myReferences.addDependency(configuration,mavenUrl);  SetMultimap<String,String> dependencyList=(SetMultimap<String,String>)getParamMap().get(TemplateMetadata.ATTR_DEPENDENCIES_MULTIMAP);  dependencyList.put(configuration,mavenUrl);}  }
class C{  public ConstantExpression(Constant c){  val=c;}  }
class C{  public SAXParser(SymbolTable symbolTable,XMLGrammarPool grammarPool){  super((XMLParserConfiguration)ObjectFactory.createObject("mf.org.apache.xerces.xni.parser.XMLParserConfiguration","mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration"));  fConfiguration.addRecognizedFeatures(RECOGNIZED_FEATURES);  fConfiguration.setFeature(NOTIFY_BUILTIN_REFS,true);  fConfiguration.addRecognizedProperties(RECOGNIZED_PROPERTIES);  if (symbolTable != null) {    fConfiguration.setProperty(SYMBOL_TABLE,symbolTable);  }  if (grammarPool != null) {    fConfiguration.setProperty(XMLGRAMMAR_POOL,grammarPool);  }}  }
class C{  public String toString(){  return getDescriptor();}  }
class C{  private AbstractIndex loadBlocks(String taskId,List<TableBlockInfo> tableBlockInfoList,AbsoluteTableIdentifier tableIdentifier) throws CarbonUtilException {  List<DataFileFooter> footerList=CarbonUtil.readCarbonIndexFile(taskId,tableBlockInfoList,tableIdentifier);  AbstractIndex segment=new SegmentTaskIndex();  segment.buildIndex(footerList);  return segment;}  }
class C{  public AppendableSequenceAudioInputStream(AudioFormat audioFormat,Collection<AudioInputStream> audioInputStreams){  super(audioFormat,audioInputStreams != null ? audioInputStreams : Arrays.asList(new AudioInputStream[0]));}  }
class C{  public boolean hasBulletList(String text){  return bulletPat.matcher(text).find();}  }
class C{  public void addData(final double x,final double y){  if (n == 0) {    xbar=x;    ybar=y;  } else {    if (hasIntercept) {      final double fact1=1.0 + n;      final double fact2=n / (1.0 + n);      final double dx=x - xbar;      final double dy=y - ybar;      sumXX+=dx * dx * fact2;      sumYY+=dy * dy * fact2;      sumXY+=dx * dy * fact2;      xbar+=dx / fact1;      ybar+=dy / fact1;    }  }  if (!hasIntercept) {    sumXX+=x * x;    sumYY+=y * y;    sumXY+=x * y;  }  sumX+=x;  sumY+=y;  n++;}  }
class C{  public SpaceTypeDescriptorBuilder addQueryExtensionInfo(String path,Class<? extends Annotation> queryExtensionAnnotation){  if (_queryExtensionsInfo == null)   _queryExtensionsInfo=new TypeQueryExtensionsImpl();  _queryExtensionsInfo.add(queryExtensionAnnotation,path);  return this;}  }
class C{  public Observable<FirebaseChildEvent> observeChildChanged(final Query firebaseRef){  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.CHANGED));}  }
class C{  public static <T extends Bean>T load(String collection,Bson query,Bson order,T b){  TimeStamp t=TimeStamp.create();  try {    MongoCollection<Document> db=MongoHelper.getCollection(collection);    if (db != null) {      FindIterable<Document> d=db.find(query);      if (order == null) {        d.sort(order);      }      if (d != null) {        if (log.isDebugEnabled())         log.debug("load - cost=" + t.past() + "ms, collection="+ collection+ ", query="+ query+ ", order="+ order);        Document d1=d.first();        if (d1 != null) {          b.load(d1);          return b;        }      } else {        if (log.isDebugEnabled())         log.debug("load - cost=" + t.past() + "ms, collection="+ collection+ ", query="+ query+ ", order="+ order+ ", result="+ null);      }    }  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error("query=" + query + ", order="+ order,e);  }  return null;}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof AssociationsInfo) {    AssociationsInfo other=(AssociationsInfo)o;    if (o != null && other != null) {      if (other.getAssociationType() == associationType && other.getClassHoldsForeignKey().equals(classHoldsForeignKey)) {        if (other.getSelfClassName().equals(selfClassName) && other.getAssociatedClassName().equals(associatedClassName)) {          return true;        }        if (other.getSelfClassName().equals(associatedClassName) && other.getAssociatedClassName().equals(selfClassName)) {          return true;        }      }    }  }  return false;}  }
class C{  public static String popStartsWith(Collection<String> collection,String prefix){  Iterator<String> iterator=collection.iterator();  while (iterator.hasNext()) {    String element=iterator.next();    if (element != null && element.startsWith(prefix)) {      iterator.remove();      return element;    }  }  return null;}  }
class C{  @Override public int hashCode(){  long value=17;  value+=37 * value + Double.doubleToLongBits(Math.abs(x));  value+=37 * value + Double.doubleToLongBits(Math.abs(y));  value+=37 * value + Double.doubleToLongBits(Math.abs(z));  return (int)(value ^ (value >>> 32));}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private void writePrimitiveObject(ObjectOutput out,Object obj,String name) throws IOException {  try {    if (obj instanceof Integer) {      out.writeByte(INTEGER_BIT);      out.writeInt(((Integer)obj).intValue());    } else     if (obj instanceof Double) {      out.writeByte(DOUBLE_BIT);      out.writeDouble(((Double)obj).doubleValue());    } else     if (obj instanceof Float) {      out.writeByte(FLOAT_BIT);      out.writeFloat(((Float)obj).floatValue());    } else     if (obj instanceof Long) {      out.writeByte(LONG_BIT);      out.writeLong(((Long)obj).longValue());    } else     if (obj instanceof String && ((String)obj).length() <= 0xFFFFL) {      out.writeByte(STRING_BIT);      out.writeUTF((String)obj);    } else     if (obj instanceof Short) {      out.writeByte(SHORT_BIT);      out.writeShort(((Short)obj).shortValue());    } else     if (obj instanceof Boolean) {      out.writeByte(BOOLEAN_BIT);      out.writeBoolean(((Boolean)obj).booleanValue());    } else     if (obj instanceof Character) {      out.writeByte(CHAR_BIT);      out.writeChar(((Character)obj).charValue());    } else     if (obj instanceof Byte) {      out.writeByte(BYTE_BIT);      out.writeByte(((Byte)obj).byteValue());    } else {      out.writeByte(OBJECT_BIT);      if (out instanceof ObjectOutputStream)       ((ObjectOutputStream)out).writeUnshared(obj); else       out.writeObject(obj);    }  } catch (  IOException ex) {    throw new EntrySerializationException("Failed to serialize JMS message property: JMSMessageID=" + JMSMessageID + ", Property Name: "+ name+ ", Property Value: "+ obj,ex);  }}  }
class C{  public static int update(String sql,Object[] args){  Connection c=null;  PreparedStatement p=null;  try {    c=getConnection();    if (c == null)     return -1;    p=c.prepareStatement(sql);    int order=1;    if (args != null) {      for (int i=0; i < args.length; i++) {        Object o=args[i];        setParameter(p,order++,o);      }    }    return p.executeUpdate();  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql + toString(args),e);  } finally {    close(p,c);  }  return 0;}  }
class C{  public String serialize(){  return serialize(CUR_VERSION);}  }
class C{  public static String join(Iterable l,String glue){  StringBuilder sb=new StringBuilder();  boolean first=true;  for (  Object o : l) {    if (!first) {      sb.append(glue);    }    sb.append(o.toString());    first=false;  }  return sb.toString();}  }
class C{  public void verifyIsDisplayed(){  conditions.verifyPostAjax(visibilityOf(currentScope));}  }
class C{  public static void main(String[] args){  try {    Main.v().run(args);  } catch (  StackOverflowError e) {    G.v().out.println("Soot has run out of stack memory.");    G.v().out.println("To allocate more stack memory to Soot, use the -Xss switch to Java.");    G.v().out.println("For example (for 2MB): java -Xss2m soot.Main ...");    throw e;  }catch (  OutOfMemoryError e) {    G.v().out.println("Soot has run out of the memory allocated to it by the Java VM.");    G.v().out.println("To allocate more memory to Soot, use the -Xmx switch to Java.");    G.v().out.println("For example (for 2GB): java -Xmx2g soot.Main ...");    throw e;  }catch (  RuntimeException e) {    e.printStackTrace();    ByteArrayOutputStream bos=new ByteArrayOutputStream();    e.printStackTrace(new PrintStream(bos));    String stackStraceString=bos.toString();    try {      final String TRACKER_URL="https://github.com/Sable/soot/issues/new?";      String commandLineArgs=Joiner.on(" ").join(args);      String body="Steps to reproduce:\n1.) ...\n\n" + "Files used to reproduce: \n...\n\n" + "Soot version: " + versionString + "\n\n"+ "Command line:\n"+ commandLineArgs+ "\n\nMax Memory:\n"+ Runtime.getRuntime().maxMemory() / (1024 * 1024) + "MB\n\nStack trace:\n" + stackStraceString;      String title=e.getClass().getName() + " when ...";      StringBuilder sb=new StringBuilder();      sb.append("\n\nOuuups... something went wrong! Sorry about that.\n");      sb.append("Follow these steps to fix the problem:\n");      sb.append("1.) Are you sure you used the right command line?\n");      sb.append("    Click here to double-check:\n");      sb.append("    https://ssebuild.cased.de/nightly/soot/doc/soot_options.htm\n");      sb.append("\n");      sb.append("2.) Not sure whether it's a bug? Feel free to discuss\n");      sb.append("    the issue on the Soot mailing list:\n");      sb.append("    https://github.com/Sable/soot/wiki/Getting-help\n");      sb.append("\n");      sb.append("3.) Sure it's a bug? Click this link to report it.\n");      sb.append("    " + TRACKER_URL + "title="+ URLEncoder.encode(title,"UTF-8")+ "&body="+ URLEncoder.encode(body,"UTF-8")+ "\n");      sb.append("    Please be as precise as possible when giving us\n");      sb.append("    information on how to reproduce the problem. Thanks!");      System.err.println(sb.toString());    } catch (    UnsupportedEncodingException e1) {    }  }}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return true;}  }
class C{  @NotNull public static String genderAndAge(@NotNull Face face){  return String.format("%s, %.1f",face.faceAttributesResp.gender,face.faceAttributesResp.age);}  }
class C{  public static <T>Flowable<T> doWhile(Publisher<? extends T> source,BooleanSupplier postCondition){  ObjectHelper.requireNonNull(source,"source is null");  ObjectHelper.requireNonNull(postCondition,"postCondition is null");  return RxJavaPlugins.onAssembly(new FlowableWhileDoWhile<T>(source,AlwaysTrueBooleanSupplier.INSTANCE,postCondition));}  }
class C{  public boolean showJavaScriptSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_JAVASCRIPT;}  }
class C{  public boolean isMatch(){  return !(refName == null || refName.equals("*"));}  }
class C{  private void sendBroadcastUploadsAdded(){  Intent start=new Intent(getUploadsAddedMessage());  sendStickyBroadcast(start);}  }
class C{  @Inject public DraggableWebElement(@Assisted WebElement dragElement,@Assisted FramePath framePath,FrameSwitcher switcher){  this.webElement=dragElement;  this.framePath=framePath;  this.switcher=switcher;}  }
class C{  public boolean isValidTld(String tld){  tld=unicodeToASCII(tld);  if (allowLocal && isValidLocalTld(tld)) {    return true;  }  return isValidInfrastructureTld(tld) || isValidGenericTld(tld) || isValidCountryCodeTld(tld);}  }
class C{  public void drawButton(Minecraft mc,int mouseX,int mouseY){  if (this.visible) {    GL11.glPushMatrix();    GL11.glEnable(GL11.GL_BLEND);    float trans=0.4F;    boolean flag=mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;    if (flag)     trans=0.6F;    GlStateManager.color(1.0F,1.0F,1.0F,trans);    mc.getTextureManager().bindTexture(SURGERY_GUI_TEXTURES);    this.drawTexturedModalRect(this.xPosition,this.yPosition,type.left + type.width,type.top,type.width,type.height);    GlStateManager.color(1.0F,1.0F,1.0F,trans / 2F);    this.drawTexturedModalRect(this.xPosition,this.yPosition,type.left,type.top,type.width,type.height);    GL11.glPopMatrix();  }}  }
class C{  public TextReaderDoubleDataSource(Reader reader){  this.reader=new BufferedReader(reader);}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public FieldConfigFilename(FieldConfigCommonData commonData){  super(commonData,SYMBOLTYPE_FIELD_STATE_RESOURCE);}  }
class C{  final void removeHalfEdges(int index,DoubleEdgeListHalfEdge edge){  DoubleEdgeListFace face=edge.twin.face;  DoubleEdgeListHalfEdge ePrev=edge.getPrevious();  DoubleEdgeListHalfEdge tPrev=edge.twin.getPrevious();  DoubleEdgeListHalfEdge eNext=edge.next;  DoubleEdgeListHalfEdge tNext=edge.twin.next;  ePrev.next=tNext;  tPrev.next=eNext;  face.edge=eNext;  DoubleEdgeListHalfEdge te=eNext;  while (te != tNext) {    te.face=face;    te=te.next;  }  this.faces.remove(edge.face);  this.edges.remove(index);  this.edges.remove(index);}  }
class C{  public static long availableMemory(){  Runtime rt=Runtime.getRuntime();  return rt.maxMemory() - rt.totalMemory() + rt.freeMemory();}  }
class C{  public GooglePlayDriver(Context context){  mContext=context;  mToken=PendingIntent.getBroadcast(context,0,new Intent(),0);  mWriter=new GooglePlayJobWriter();  mValidator=new DefaultJobValidator(context);}  }
class C{  @Override public boolean accept(File file){  String name=file.getName();  for (  String suffix : this.suffixes) {    if (caseSensitivity.checkEndsWith(name,suffix)) {      return true;    }  }  return false;}  }
class C{  public synchronized void start() throws IllegalStateException, IOException {  if (!mStreaming) {    configure();    super.start();  }}  }
class C{  public final void write(final byte b){  baos.write(b);}  }
class C{  protected boolean isInBoundsX(Entry e,IBarLineScatterCandleBubbleDataSet set){  if (e == null)   return false;  float entryIndex=set.getEntryIndex(e);  return entryIndex < set.getEntryCount() * mAnimator.getPhaseX();}  }
class C{  LmdbNativeException(final int rc,final String msg){  super(format(msg + " (%d)",rc));  this.rc=rc;}  }
class C{  public double sumWithWeights(){  double dSum=0;  for (  TKeyType dKey : hDistro.keySet()) {    if (dKey instanceof Double)     dSum+=((Double)dKey * getValue(dKey)); else     dSum+=getValue(dKey);  }  return dSum;}  }
class C{  public static boolean isPrimitive(String typeName){  return _primitiveTypes.containsKey(typeName);}  }
class C{  public static double db2linear(double dbEnergy){  if (Double.isNaN(dbEnergy))   return 0.; else   return exp10(dbEnergy / 10);}  }
class C{  public static boolean isHour(String s){  if (isEmpty(s))   return defaultEmptyOK;  return isIntegerInRange(s,0,23);}  }
class C{  public int locking_scheme(){  String s=soot.PhaseOptions.getString(options,"locking-scheme");  if (s.equalsIgnoreCase("medium-grained"))   return locking_scheme_medium_grained;  if (s.equalsIgnoreCase("coarse-grained"))   return locking_scheme_coarse_grained;  if (s.equalsIgnoreCase("single-static"))   return locking_scheme_single_static;  if (s.equalsIgnoreCase("leave-original"))   return locking_scheme_leave_original;  throw new RuntimeException("Invalid value " + s + " of phase option locking-scheme");}  }
class C{  public void drawChart(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  double topY;switch (scalingType) {case PERCENT:    topY=101;  break;default :topY=1.1 * getMaxValue();}double yFactor=(y0 - y1) / topY;int x0=leftMargin;int x1=getWidth() - rightMargin;if (x0 >= x1) return;int numberOfDataSets=getChartData().getNumberOfSeries();double xStep=(x1 - x0) / (2 * numberOfDataSets);double bigSpace=Math.max(2,Math.min(10,xStep));xStep=(x1 - x0 - (isGapBetweenBars() ? bigSpace * numberOfDataSets : 0)) / numberOfDataSets;int d=0;for (String series : getChartData().getSeriesNames()) {{String label=seriesLabelGetter.getLabel(series);Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();double xLabel=x0 + (isGapBetweenBars() ? (d + 1) * bigSpace : 0) + (d + 0.5) * xStep;Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 12);if (classLabelAngle == 0) {  apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());} else if (classLabelAngle > Math.PI / 2) {  apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);}if (getChartData().getChartSelection().isSelected(series,null)) {  gc.setColor(ProgramProperties.SELECTION_COLOR);  fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);}gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));if (sgc != null) sgc.setCurrentItem(new String[]{series,null});drawString(gc,label,apt.getX(),apt.getY(),classLabelAngle);if (sgc != null) sgc.clearCurrentItem();}double currentHeight=y0;for (String className : getChartData().getClassNames()) {double value;if (scalingType == ChartViewer.ScalingType.PERCENT) {  double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);  if (total == 0)   value=0; else   value=100 * getChartData().getValueAsDouble(series,className) / total;} else value=getChartData().getValueAsDouble(series,className);double xBar=x0 + (isGapBetweenBars() ? (d + 1) * bigSpace : 0) + d * xStep;double height=value * yFactor;Rectangle2D rect=new Rectangle((int)Math.round(xBar),(int)Math.round(currentHeight - height),(int)Math.round(xStep),(int)Math.round(height));currentHeight-=height;Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className));gc.setColor(color);if (sgc != null) sgc.setCurrentItem(new String[]{series,className});gc.fill(rect);if (sgc != null) sgc.clearCurrentItem();if (getChartData().getChartSelection().isSelected(series,className)) {  gc.setStroke(HEAVY_STROKE);  gc.setColor(ProgramProperties.SELECTION_COLOR);  gc.draw(rect);  gc.setStroke(NORMAL_STROKE);} else {  gc.setColor(color.darker());  gc.draw(rect);}}d++;}}  }
class C{  public static void logPromoSeen(boolean wasPanelSeen,boolean wasTap){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchFirstRunPanelSeen",wasPanelSeen ? RESULTS_SEEN : RESULTS_NOT_SEEN,RESULTS_SEEN_BOUNDARY);  logHistogramByGesture(wasPanelSeen,wasTap,"Search.ContextualSearchPromoSeenByGesture");}  }
class C{  public void apply(){  ClassificationManager.get(Classification.Taxonomy,true).getIdMapper().setUseTextParsing(isParseTaxonNames());  final String blastFileName=getBlastFileName();  ProgramProperties.put(MeganProperties.BLASTFILE,new File(Basic.getLinesFromString(blastFileName).get(0)));  final String readFileName=getReadFileName();  String meganFileName=getMeganFileName();  if (!meganFileName.startsWith("MS:::") && !(meganFileName.toLowerCase().endsWith(".rma") || meganFileName.toLowerCase().endsWith(".rma1") || meganFileName.toLowerCase().endsWith(".rma2")|| meganFileName.toLowerCase().endsWith(".rma3")|| meganFileName.toLowerCase().endsWith(".rma6")))   meganFileName+=".rma";  ProgramProperties.put(MeganProperties.MEGANFILE,new File(meganFileName));  String blastFormat=getFormatCBox().getSelectedFormat();  String blastMode=getAlignmentModeCBox().getSelectedMode();  StringBuilder buf=new StringBuilder();  buf.append("import blastFile=");  if (blastFileName.length() > 0) {{      java.util.List<String> fileNames=Basic.getLinesFromString(blastFileName);      boolean first=true;      for (      String name : fileNames) {        File file=new File(name);        if (!(file.exists() && file.canRead())) {          NotificationsInSwing.showError(this,"Failed to open BLAST file for reading: " + name);          return;        }        if (first)         first=false; else         buf.append(", ");        buf.append("'").append(name).append("'");      }    }    if (blastFileName.length() > 0) {      final String fileName=Basic.getFirstLine(blastFileName);      if (blastFormat.equals(BlastFileFormat.Unknown.toString())) {        try {          String formatName=BlastFileFormat.detectFormat(this,fileName,true).toString();          if (formatName != null)           blastFormat=BlastFileFormat.valueOf(formatName).toString(); else           throw new IOException("Failed to detect BLAST format for file: " + fileName);        } catch (        IOException e) {          Basic.caught(e);          return;        }      }      if (blastMode.equals(BlastMode.Unknown.toString())) {        try {          String modeName=BlastMode.detectMode(this,fileName,true).toString();          if (modeName != null)           blastMode=BlastMode.valueOf(modeName).toString(); else           throw new IOException("Failed to detect BLAST mode for file: " + fileName);        } catch (        IOException e) {          Basic.caught(e);          return;        }      }    }    if (readFileName.length() > 0) {      buf.append(" fastaFile=");      java.util.List<String> fileNames=Basic.getLinesFromString(readFileName);      boolean first=true;      for (      String name : fileNames) {        File file=new File(name);        if (!(file.exists() && file.canRead())) {          NotificationsInSwing.showError(this,"Failed to open READs file for reading: " + name);          return;        }        if (first)         first=false; else         buf.append(", ");        buf.append("'").append(name).append("'");      }    }  }  buf.append(" meganFile='").append(meganFileName).append("'");  buf.append(" useCompression=").append(getUseCompressionCBox().isSelected());  ProgramProperties.put("UseCompressInRMAFiles",getUseCompressionCBox().isSelected());  buf.append(" format=").append(blastFormat);  buf.append(" mode=").append(blastMode);  int maxNumberOfMatchesPerRead;  try {    maxNumberOfMatchesPerRead=Integer.parseInt(getMaxNumberOfMatchesPerReadField().getText());    ProgramProperties.put("MaxNumberMatchesPerRead",maxNumberOfMatchesPerRead);  } catch (  NumberFormatException ex) {    maxNumberOfMatchesPerRead=ProgramProperties.get("MaxNumberMatchesPerRead",50);  }  buf.append(" maxMatches=").append(maxNumberOfMatchesPerRead);  buf.append(" minScore=").append(getMinScore());  buf.append(" maxExpected=").append(getMaxExpected());  buf.append(" minPercentIdentity=").append(getMinPercentIdentity());  buf.append(" topPercent=").append(getTopPercent());  if (getMinSupportPercent() > 0)   buf.append(" minSupportPercent=").append(getMinSupportPercent());  buf.append(" minSupport=").append(getMinSupport());  buf.append(" weightedLCA=").append(isWeightedLCA());  buf.append(" weightedLCAPercent=").append(getWeightedLCAPercent());  buf.append(" minComplexity=").append(getMinComplexity());  buf.append(" useIdentityFilter=").append(isUsePercentIdentityFilter());  buf.append(" fNames=").append(Basic.toString(getSelectedFNames()," "));  buf.append(" paired=").append(isUsePairedReads());  if (isUsePairedReads()) {    String pattern1=getPairedReadSuffix1();    buf.append(" pairSuffixLength=").append(pattern1.length());  }  if (isUseReadMagnitudes()) {    buf.append(" hasMagnitudes=").append(isUseReadMagnitudes());  }  if (getShortDescription().length() > 0)   buf.append(" description='").append(getShortDescription()).append("'");  buf.append(";");  File file=new File(meganFileName);  if (file.exists()) {    System.err.println("Removing file " + file.getPath() + ": "+ file.delete());    File rmazFile=new File(Basic.getFileSuffix(file.getPath()) + ".rmaz");    if (rmazFile.exists())     System.err.println("Removing file " + rmazFile.getPath() + ": "+ rmazFile.delete());    rmazFile=new File(file.getPath() + "z");    if (rmazFile.exists())     System.err.println("Removing file " + rmazFile.getPath() + ": "+ rmazFile.delete());  }  setResult(buf.toString());}  }
class C{  protected BigDecimal convertTemperature(int fromScale,int toScale,BigDecimal val){  BigDecimal valConverted;  if (fromScale == 0 && toScale == 1) {    valConverted=val.multiply(ONE_POINT_EIGHT).add(THIRTY_TWO).setScale(1,RoundingMode.HALF_DOWN);  } else   if (fromScale == 1 && toScale == 0) {    valConverted=val.subtract(THIRTY_TWO).divide(ONE_POINT_EIGHT,MathContext.DECIMAL32).setScale(1,RoundingMode.HALF_DOWN);  } else {    valConverted=val;  }  logger.debug("Converted temperature from {}{} to {}{}",val,fromScale == 0 ? "C" : "F",valConverted,toScale == 0 ? "C" : "F");  return valConverted;}  }
class C{  public void createOffscreenSurface(int width,int height){  if (eGLSurface != EGL14.EGL_NO_SURFACE) {    throw new IllegalStateException("surface already created");  }  eGLSurface=eglCore.createOffscreenSurface(width,height);  this.width=width;  this.height=height;}  }
class C{  public static String parseVolumeHostDirectory(String volume){  if (StringUtils.isEmpty(volume)) {    return volume;  }  if (!volume.contains(HOST_CONTAINER_DIR_DELIMITER)) {    return volume;  }  String[] hostContainerDir=volume.split(HOST_CONTAINER_DIR_DELIMITER);  if (hostContainerDir.length != 2) {    throw new IllegalArgumentException("Invalid volume directory.");  }  String hostDir=hostContainerDir[0];  return hostDir;}  }
class C{  private Map<MetricColumn,Object> extractMetricValues(JsonNode metricsRows,Set<MetricColumnWithValueType> metricColumns){  Map<MetricColumn,Object> metricColumnObjectMap=new HashMap<>();  for (  MetricColumnWithValueType metricColumn : metricColumns) {    try {      metricColumnObjectMap.put(metricColumn,nonResponseContextMapper.readValue(metricsRows.get(metricColumn.getName()).toString(),metricColumn.getClassType()));    } catch (    JsonParseException|NullPointerException e) {      String msg=ErrorMessageFormat.METRIC_VALUE_PARSING_ERROR.format("parse");      LOG.error(msg,e);      throw new DeserializationException(msg,e);    }catch (    JsonMappingException e) {      String msg=ErrorMessageFormat.METRIC_VALUE_PARSING_ERROR.format("map");      LOG.error(msg,e);      throw new DeserializationException(msg,e);    }catch (    IOException e) {      String msg=ErrorMessageFormat.METRIC_VALUE_PARSING_ERROR.format("identify");      LOG.error(msg,e);      throw new DeserializationException(msg,e);    }  }  return metricColumnObjectMap;}  }
class C{  public static void logNormalPrioritySearchRequestOutcome(boolean isFailure){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchNormalPrioritySearchRequestStatus",isFailure ? REQUEST_FAILED : REQUEST_NOT_FAILED,REQUEST_BOUNDARY);}  }
class C{  public static synchronized boolean isFixtureLabeled(){  return fixtureLabeled;}  }
class C{  public SearchResult doPagingSearch(IndexReader reader,IndexSearcher searcher,Query query,int page) throws IOException {  TopDocs results=searcher.search(query,20 * this.PAGELIMIT);  ScoreDoc[] hits=results.scoreDocs;  int numTotalHits=results.totalHits;  int start=this.PAGELIMIT * page;  int end=Math.min(numTotalHits,(this.PAGELIMIT * (page + 1)));  int noPages=numTotalHits / this.PAGELIMIT;  if (noPages > 20) {    noPages=20;  }  List<Integer> pages=new ArrayList<>();  for (int i=0; i < noPages; i++) {    pages.add(i);  }  List<CodeResult> codeResults=new ArrayList<>();  for (int i=start; i < end; i++) {    Document doc=searcher.doc(hits[i].doc);    String filepath=doc.get(Values.PATH);    if (filepath != null) {      CodeResult cr=new CodeResult(null,null);      cr.setCodePath(doc.get(Values.FILELOCATIONFILENAME));      cr.setFileName(doc.get(Values.FILENAME));      cr.setLanguageName(doc.get(Values.LANGUAGENAME));      cr.setMd5hash(doc.get(Values.MD5HASH));      cr.setCodeLines(doc.get(Values.CODELINES));      cr.setDocumentId(hits[i].doc);      cr.setRepoLocation(doc.get(Values.REPOLOCATION));      cr.setRepoName(doc.get(Values.REPONAME));      cr.setCodeOwner(doc.get(Values.CODEOWNER));      cr.setRevision(doc.get(Values.REVISION));      cr.setYearMonthDay(doc.get(Values.DATEYEARMONTHDAY));      cr.setMessage(doc.get(Values.MESSAGE));      cr.setDeleted(doc.get(Values.DELETED));      try {        String repoLoc="./repo/" + cr.getRepoName() + "/.git";        cr.setCode(Arrays.asList(gitService.fetchFileRevision(repoLoc,cr.getRevision(),cr.getCodePath()).split("\\r?\\n")));      } catch (      Exception ex) {        LOGGER.warning("Indexed file appears to binary or missing: " + filepath);      }      codeResults.add(cr);    } else {      LOGGER.warning((i + 1) + ". " + "No path for this document");    }  }  List<CodeFacetLanguage> codeFacetLanguages=this.getLanguageFacetResults(searcher,reader,query);  List<CodeFacetRepo> repoFacetLanguages=this.getRepoFacetResults(searcher,reader,query);  List<CodeFacetOwner> repoFacetOwner=this.getOwnerFacetResults(searcher,reader,query);  List<CodeFacetYearMonthDay> repoFacetYearMonthDay=this.getYearMonthDayFacetResults(searcher,reader,query);  List<CodeFacetYearMonth> repoFacetYearMonth=this.getYearMonthFacetResults(searcher,reader,query);  List<CodeFacetYear> repoFacetYear=this.getYearFacetResults(searcher,reader,query);  List<CodeFacetRevision> repoFacetRevision=this.getRevisionFacetResults(searcher,reader,query);  List<CodeFacetDeleted> repoFacetDeleted=this.getDeletedFacetResults(searcher,reader,query);  SearchResult searchResult=new SearchResult(numTotalHits,page,query.toString(),codeResults,pages,codeFacetLanguages,repoFacetLanguages,repoFacetOwner);  searchResult.setRepoFacetYearMonthDay(repoFacetYearMonthDay);  searchResult.setRepoFacetYearMonth(repoFacetYearMonth);  searchResult.setRepoFacetYear(repoFacetYear);  searchResult.setRepoFacetRevision(repoFacetRevision);  searchResult.setRepoFacetDeleted(repoFacetDeleted);  return searchResult;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffPhysical_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201260,skillcaster,skillname);}  }
class C{  protected FriendsAddListQuery name(String value){  return unsafeParam("name",value);}  }
class C{  public static Map<String,Object> updateProductionRun(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  if (!UtilValidate.isEmpty(productionRunId)) {    ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);    if (productionRun.exist()) {      if (!"PRUN_CREATED".equals(productionRun.getGenericValue().getString("currentStatusId")) && !"PRUN_SCHEDULED".equals(productionRun.getGenericValue().getString("currentStatusId"))) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunPrinted",locale));      }      BigDecimal quantity=(BigDecimal)context.get("quantity");      if (quantity != null && quantity.compareTo(productionRun.getQuantity()) != 0) {        productionRun.setQuantity(quantity);      }      Timestamp estimatedStartDate=(Timestamp)context.get("estimatedStartDate");      if (estimatedStartDate != null && !estimatedStartDate.equals(productionRun.getEstimatedStartDate())) {        productionRun.setEstimatedStartDate(estimatedStartDate);      }      String workEffortName=(String)context.get("workEffortName");      if (workEffortName != null) {        productionRun.setProductionRunName(workEffortName);      }      String description=(String)context.get("description");      if (description != null) {        productionRun.setDescription(description);      }      String facilityId=(String)context.get("facilityId");      if (facilityId != null) {        productionRun.getGenericValue().set("facilityId",facilityId);      }      boolean updateEstimatedOrderDates=productionRun.isUpdateCompletionDate();      if (productionRun.store()) {        if (updateEstimatedOrderDates && "PRUN_SCHEDULED".equals(productionRun.getGenericValue().getString("currentStatusId"))) {          try {            dispatcher.runSync("setEstimatedDeliveryDates",UtilMisc.toMap("userLogin",userLogin));          } catch (          GenericServiceException e) {            Debug.logError(e,"Problem calling the setEstimatedDeliveryDates service",module);            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));          }        }        return ServiceUtil.returnSuccess();      } else {        Debug.logError("productionRun.store() fail for productionRunId =" + productionRunId,module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));      }    }    Debug.logError("no productionRun for productionRunId =" + productionRunId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));  }  Debug.logError("service updateProductionRun call with productionRunId empty",module);  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));}  }
class C{  public static String formatQuantity(BigDecimal quantity){  if (quantity == null)   return ""; else   return quantityDecimalFormat.format(quantity);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_HE_IS_ALREADY_MEMBER_OF_OTHER_FORCE(String value0){  return new SM_SYSTEM_MESSAGE(1301013,value0);}  }
class C{  public SuffixFileFilter(List<String> suffixes,IOCase caseSensitivity){  if (suffixes == null) {    throw new IllegalArgumentException("The list of suffixes must not be null");  }  this.suffixes=suffixes.toArray(new String[suffixes.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  private void stop_notify_2(){  bleManager.stopListenCharacterCallback(UUID_NOTIFY_2);}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public VideoGetAlbumsQueryWithExtended needSystem(Boolean value){  return unsafeParam("need_system",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHPMP_Instant_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201040,skillcaster,skilltarget,skillname);}  }
class C{  @Override public Filter createFilter(){  return new IsNullExtended();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public List<String> provideWhiteList(){  LinkedList<String> whiteList=new LinkedList<>();  whiteList.add("org.chromium");  return whiteList;}  }
class C{  public static ConstraintHandle constraintHandle(ConstraintAnchor anchor){  if (anchor == null) {    return null;  }  ConstraintWidget widget=anchor.getOwner();  if (widget == null) {    return null;  }  if (widget.getCompanionWidget() == null) {    return null;  }  WidgetCompanion widgetCompanion=(WidgetCompanion)widget.getCompanionWidget();  WidgetInteractionTargets widgetInteraction=widgetCompanion.getWidgetInteractionTargets();  return widgetInteraction.getConstraintHandle(anchor);}  }
class C{  public ProcessConfiguration createProcessConfiguration(final String processName,final Long processPIK,final Document confXMLDoc,final boolean localConfiguration,String jmsDaqQueueTrunk) throws ConfUnknownTypeException, ConfRejectedTypeException {  this.jmsDaqQueueTrunk=jmsDaqQueueTrunk;  return createProcessConfiguration(processName,processPIK,confXMLDoc,localConfiguration);}  }
class C{  public static String checkTrackingCodeUrlParam(HttpServletRequest request,HttpServletResponse response){  String trackingCodeId=request.getParameter("autoTrackingCode");  if (UtilValidate.isEmpty(trackingCodeId))   trackingCodeId=request.getParameter("atc");  if (UtilValidate.isNotEmpty(trackingCodeId)) {    Delegator delegator=(Delegator)request.getAttribute("delegator");    GenericValue trackingCode;    try {      trackingCode=EntityQuery.use(delegator).from("TrackingCode").where("trackingCodeId",trackingCodeId).cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);      return "error";    }    if (trackingCode == null) {      Debug.logError("TrackingCode not found for trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId.",module);      return "error";    }    return processTrackingCode(trackingCode,request,response,"TKCDSRC_URL_PARAM");  } else {    return "success";  }}  }
class C{  public PercentFormatter(DecimalFormat format){  mFormattedStringCache=new FormattedStringCache.Generic<>(format);  mFormattedStringCacheAxis=new FormattedStringCache.PrimFloat(format);}  }
class C{  public Tuple[] toArray(){  Tuple[] t=new Tuple[getTupleCount()];  m_tuples.toArray(t);  return t;}  }
class C{  @Override protected void parseOptimizationData(OptimizationData... optData){  super.parseOptimizationData(optData);  for (  OptimizationData data : optData) {    if (data instanceof InitialGuess) {      start=((InitialGuess)data).getInitialGuess();      continue;    }    if (data instanceof SimpleBounds) {      final SimpleBounds bounds=(SimpleBounds)data;      lowerBound=bounds.getLower();      upperBound=bounds.getUpper();      continue;    }  }  checkParameters();}  }
class C{  public Builder quality(int quality){  if (quality < 1 || quality > 100)   throw new IllegalArgumentException("quality must be between 1 and 100");  this.quality=quality;  return this;}  }
class C{  public void sync() throws CanceledException {  if (!inSync) {    inSync=true;    IChartData chartData=(IChartData)getChartData();    chartData.clear();    try {      MicrobialAttributes attributes=MicrobialAttributes.getInstance();      Document doc=((Director)dir).getDocument();      MainViewer mainViewer=((Director)dir).getMainViewer();      int numberOfDatasets=doc.getNumberOfSamples();      if (numberOfDatasets > 0) {        Map<String,Map<String,Integer>> dataset2AttributeState2Value=attributes.getDataSet2AttributeState2Value(mainViewer);        chartData.setAllSeries(doc.getSampleNames());        SortedSet<String> classNames=new TreeSet<>();        for (        String series : dataset2AttributeState2Value.keySet()) {          Map<String,Integer> attributeState2value=dataset2AttributeState2Value.get(series);          for (          String attributeState : attributeState2value.keySet()) {            classNames.add(attributeState);            Integer value=attributeState2value.get(attributeState);            if (value == null)             value=0;            chartData.putValue(series,attributeState,value);          }        }        chartData.setClassNames(classNames);      }    } catch (    IOException e) {      Basic.caught(e);    }    super.sync();    inSync=false;  }}  }
class C{  public final boolean isEmpty(){  return size == 0;}  }
class C{  public float[] multAcross(float[] vec4f){  if (null == vec4f || vec4f.length != 4) {    logger.warning("invalid array given, must be nonnull and length 4");    return null;  }  float x=vec4f[0], y=vec4f[1], z=vec4f[2], w=vec4f[3];  vec4f[0]=m00 * x + m10 * y + m20 * z + m30 * w;  vec4f[1]=m01 * x + m11 * y + m21 * z + m31 * w;  vec4f[2]=m02 * x + m12 * y + m22 * z + m32 * w;  vec4f[3]=m03 * x + m13 * y + m23 * z + m33 * w;  return vec4f;}  }
class C{  protected void writeExternal(ObjectOutput out,PlatformLogicalVersion version) throws IOException {}  }
class C{  public IconOptions build(){  IconOptions options=new IconOptions();  options.iconUrl=iconUrl;  options.iconRetinaUrl=this.iconRetinaUrl;  options.iconSize=this.iconSize;  options.iconAnchor=this.iconAnchor;  options.shadowUrl=this.shadowUrl;  options.shadowRetinaUrl=this.shadowRetinaUrl;  options.shadowSize=this.shadowSize;  options.shadowAnchor=this.shadowAnchor;  options.popupAnchor=this.popupAnchor;  options.className=this.className;  return options;}  }
class C{  protected void compact(){  if (readPos == 0)   return;  int avail=writePos - readPos;  System.arraycopy(buf,readPos,buf,0,avail);  readPos=0;  writePos=avail;}  }
class C{  static public float[] decode_ARGB(int rgba){  int vArc_I16=(rgba >> 0) & 0xFFFF;  int vMag_I16=(rgba >> 16) & 0xFFFF;  float vArc=TWO_PI * vArc_I16 / (0xFFFF - 1);  float vMag=vMag_I16;  float vx=(float)Math.cos(vArc);  float vy=(float)Math.sin(vArc);  return new float[]{vx,vy,vMag};}  }
class C{  public void forEach(BiConsumer<K,V> action){  registryObjects.forEach(action);}  }
class C{  public boolean containsValue(V val){  byte[] states=_states;  V[] vals=_values;  if (null == val) {    for (int i=vals.length; i-- > 0; ) {      if (states[i] == FULL && val == vals[i]) {        return true;      }    }  } else {    for (int i=vals.length; i-- > 0; ) {      if (states[i] == FULL && (val == vals[i] || val.equals(vals[i]))) {        return true;      }    }  }  return false;}  }
class C{  public Bucket(String label,Experiment experiment,double allocationPercent,boolean isControl,String description,String payload){  this(label,experiment.id,allocationPercent,isControl,description,payload,null);}  }
class C{  private static int countGapsDashDot(String sequence){  int count=0;  for (int i=0; i < sequence.length(); i++) {    int a=sequence.charAt(i);    if (a == '-' || a == '.')     count++;  }  return count;}  }
class C{  public void updateSkillTreePointsSets(){  skillTreesInSet.clear();  Map<Long,SkillTreeInSet> skillTreeToSkillTreeInSet=new HashMap<>();  for (  SkillTreeInSet pointsSet : skillTreesInSet) {    skillTreeToSkillTreeInSet.put(pointsSet.getSkillTree().getId(),pointsSet);  }  for (int i=0; i < equipment.length; i++) {    Log.v("ASB","Reading skills from armor piece " + i);    Map<SkillTree,Integer> armorSkillTreePoints=getSkillsFromArmorPiece(i);    for (    SkillTree skillTree : armorSkillTreePoints.keySet()) {      SkillTreeInSet s;      if (!skillTreeToSkillTreeInSet.containsKey(skillTree.getId())) {        Log.v("ASB","Adding skill tree " + skillTree.getName() + " to the list of Skill Trees in the armor set.");        s=new SkillTreeInSet();        s.setSkillTree(skillTree);        skillTreesInSet.add(s);        skillTreeToSkillTreeInSet.put(skillTree.getId(),s);      } else {        Log.v("ASB","Skill tree " + skillTree.getName() + " already registered!");        s=skillTreeToSkillTreeInSet.get(skillTree.getId());      }      s.setPoints(i,armorSkillTreePoints.get(skillTree));    }  }}  }
class C{  public Array2DRowRealMatrix initializeHighOrderDerivatives(final double h,final double[] t,final double[][] y,final double[][] yDot){  final double[][] a=new double[c1.length + 1][c1.length + 1];  final double[][] b=new double[c1.length + 1][y[0].length];  final double[] y0=y[0];  final double[] yDot0=yDot[0];  for (int i=1; i < y.length; ++i) {    final double di=t[i] - t[0];    final double ratio=di / h;    double dikM1Ohk=1 / h;    final double[] aI=a[2 * i - 2];    final double[] aDotI=(2 * i - 1) < a.length ? a[2 * i - 1] : null;    for (int j=0; j < aI.length; ++j) {      dikM1Ohk*=ratio;      aI[j]=di * dikM1Ohk;      if (aDotI != null) {        aDotI[j]=(j + 2) * dikM1Ohk;      }    }    final double[] yI=y[i];    final double[] yDotI=yDot[i];    final double[] bI=b[2 * i - 2];    final double[] bDotI=(2 * i - 1) < b.length ? b[2 * i - 1] : null;    for (int j=0; j < yI.length; ++j) {      bI[j]=yI[j] - y0[j] - di * yDot0[j];      if (bDotI != null) {        bDotI[j]=yDotI[j] - yDot0[j];      }    }  }  final QRDecomposition decomposition=new QRDecomposition(new Array2DRowRealMatrix(a,false));  final RealMatrix x=decomposition.getSolver().solve(new Array2DRowRealMatrix(b,false));  final Array2DRowRealMatrix truncatedX=new Array2DRowRealMatrix(x.getRowDimension() - 1,x.getColumnDimension());  for (int i=0; i < truncatedX.getRowDimension(); ++i) {    for (int j=0; j < truncatedX.getColumnDimension(); ++j) {      truncatedX.setEntry(i,j,x.getEntry(i,j));    }  }  return truncatedX;}  }
class C{  private void saveUrlToPreference(String url){  PreferenceManager.getDefaultSharedPreferences(mActivity).edit().putString(PREF_LAST_USED_URL,url).apply();}  }
class C{  public static boolean isForbiddenWord(String name){  return isForbiddenByClient(name) || isForbiddenBySequence(name);}  }
class C{  public void addStateChangedListener(ISharedDataIteratorSourceStateChangedListener<T> listener){  _sharedObjectListLock.writeLock().lock();  try {    _listener=listener;  }  finally {    _sharedObjectListLock.writeLock().unlock();  }}  }
class C{  public Kurtosis(final FourthMoment m4){  this.moment=m4;  incMoment=false;}  }
class C{  @NotNull public static String tableToString(@NotNull JTableFixture table){  return tableToString(table,0,Integer.MAX_VALUE,0,Integer.MAX_VALUE,40);}  }
class C{  protected void drawPoweredBy(Graphics2D gc,Rectangle rect){  if (getPOWEREDBY() != null && getPOWEREDBY().length() > 2) {    gc.setColor(Color.gray);    gc.setStroke(new BasicStroke(1));    gc.setFont(poweredByFont);    int width=(int)Basic.getStringSize(gc,getPOWEREDBY(),gc.getFont()).getWidth();    int x=rect.x + rect.width - width - 2;    int y=rect.y + rect.height - 2;    gc.drawString(getPOWEREDBY(),x,y);  }}  }
class C{  public void removeExtension(String ext){synchronized (exts) {    ext=ext.toLowerCase();    exts.remove(ext);  }}  }
class C{  public OptimizedByteArrayOutputStream(){  this(32);}  }
class C{  public static Planner newPlanner(){  QueryPlanner qplanner;  UpdatePlanner uplanner;  try {    qplanner=(QueryPlanner)queryPlannerCls.newInstance();    uplanner=(UpdatePlanner)updatePlannerCls.newInstance();  } catch (  InstantiationException|IllegalAccessException e) {    e.printStackTrace();    return null;  }  return new Planner(qplanner,uplanner);}  }
class C{  public MXDOptions(){  fontSizeFactor=PropertyManagerFactory.getInstance().getDoubleValue(MXD_FONT_SIZE_FACTOR_FIELD,fontSizeFactor);}  }
class C{  public VideoReportCommentQuery reportComment(UserActor actor,int ownerId,int commentId){  return new VideoReportCommentQuery(getClient(),actor,ownerId,commentId);}  }
class C{  private static boolean invokeThrowsAccessErrorIn(SootClass base,SootMethod inlinee,SootMethod container){  SootClass inlineeClass=inlinee.getDeclaringClass();  SootClass containerClass=container.getDeclaringClass();  if (inlinee.isPrivate() && !inlineeClass.getName().equals(containerClass.getName()))   return true;  if (!inlinee.isPrivate() && !inlinee.isProtected() && !inlinee.isPublic()) {    if (!inlineeClass.getPackageName().equals(containerClass.getPackageName()))     return true;  }  if (inlinee.isProtected()) {    Hierarchy h=Scene.v().getActiveHierarchy();    boolean saved=false;    if (h.isClassSuperclassOfIncluding(inlineeClass,containerClass) || ((base != null) && h.isClassSuperclassOfIncluding(base,containerClass)))     saved=true;    if (!saved)     return true;  }  return false;}  }
class C{  final Segment<K,V> segmentFor(int hash){  return segments[(hash >>> segmentShift) & segmentMask];}  }
class C{  public DistributedLogClient build(){  return buildClient();}  }
class C{  protected LikesAddQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  public void parse(){  method_info mi;  int i;  for (i=0; i < methods_count; i++) {    mi=methods[i];    mi.instructions=parseMethod(mi);  }}  }
class C{  public void abort(Executor executor) throws SQLException {  throw new UnsupportedOperationException("abort");}  }
class C{  public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,int bufSize){  Tailer tailer=new Tailer(file,listener,delayMillis,end,bufSize);  Thread thread=new Thread(tailer);  thread.setDaemon(true);  thread.start();  return tailer;}  }
class C{  @Override public void init(String configPrefix) throws MaryConfigurationException {  try {    String joinFileName=MaryProperties.needFilename(configPrefix + ".joinCostFile");    InputStream joinPdfStream=MaryProperties.needStream(configPrefix + ".joinPdfFile");    InputStream joinTreeStream=MaryProperties.needStream(configPrefix + ".joinTreeFile");    String trickyPhonesFileName=MaryProperties.needFilename(configPrefix + ".trickyPhonesFile");    load(joinFileName,joinPdfStream,joinTreeStream,trickyPhonesFileName);  } catch (  IOException ioe) {    throw new MaryConfigurationException("Problem loading join file",ioe);  }}  }
class C{  public static ProcessRegistry createRegistry(){  return new ProcessRegistry();}  }
class C{  public Item findItem(Item item){  if (INTERPRET_PATHS) {    return item.findItem(path);  }  if (compiledPath == null) {    compiledPath=compile(path);  }  Item pitem=item;  for (int i=0; pitem != null && i < compiledPath.length; ) {    OpEnum op=(OpEnum)compiledPath[i++];    if (op == OpEnum.NEXT) {      pitem=pitem.getNext();    } else     if (op == OpEnum.PREV) {      pitem=pitem.getPrevious();    } else     if (op == OpEnum.NEXT_NEXT) {      pitem=pitem.getNext();      if (pitem != null) {        pitem=pitem.getNext();      }    } else     if (op == OpEnum.PREV_PREV) {      pitem=pitem.getPrevious();      if (pitem != null) {        pitem=pitem.getPrevious();      }    } else     if (op == OpEnum.PARENT) {      pitem=pitem.getParent();    } else     if (op == OpEnum.DAUGHTER) {      pitem=pitem.getDaughter();    } else     if (op == OpEnum.LAST_DAUGHTER) {      pitem=pitem.getLastDaughter();    } else     if (op == OpEnum.RELATION) {      String relationName=(String)compiledPath[i++];      pitem=pitem.getSharedContents().getItemRelation(relationName);    } else {      System.out.println("findItem: bad feature " + op + " in "+ path);    }  }  return pitem;}  }
class C{  public boolean canLoot(boolean ignoreDistance){  boolean active=cooldownCompleteTimestampMs < api.currentTimeMillis();  if (!ignoreDistance) {    return active && inRange();  }  return active;}  }
class C{  private void bringToSignatures(SootClass sc){  if (sc.resolvingLevel() >= SootClass.SIGNATURES)   return;  bringToHierarchy(sc);  if (Options.v().debug_resolver())   G.v().out.println("bringing to SIGNATURES: " + sc);  sc.setResolvingLevel(SootClass.SIGNATURES);  for (  SootField f : sc.getFields()) {    addToResolveWorklist(f.getType(),SootClass.HIERARCHY);  }  for (  SootMethod m : sc.getMethods()) {    addToResolveWorklist(m.getReturnType(),SootClass.HIERARCHY);    for (    Type ptype : m.getParameterTypes()) {      addToResolveWorklist(ptype,SootClass.HIERARCHY);    }    for (    SootClass exception : m.getExceptions()) {      addToResolveWorklist(exception,SootClass.HIERARCHY);    }  }  if (sc.hasSuperclass())   addToResolveWorklist(sc.getSuperclass(),SootClass.SIGNATURES);  for (  SootClass iface : sc.getInterfaces()) {    addToResolveWorklist(iface,SootClass.SIGNATURES);  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public SimpleSet parameterDeclaration(String name){  Object _parameters=name;  if (parameterDeclaration_String_values == null)   parameterDeclaration_String_values=new java.util.HashMap(4);  if (parameterDeclaration_String_values.containsKey(_parameters)) {    return (SimpleSet)parameterDeclaration_String_values.get(_parameters);  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  SimpleSet parameterDeclaration_String_value=parameterDeclaration_compute(name);  if (isFinal && num == state().boundariesCrossed)   parameterDeclaration_String_values.put(_parameters,parameterDeclaration_String_value);  return parameterDeclaration_String_value;}  }
class C{  public final void error(final Object o){  log(Level.ERROR,o);}  }
class C{  public boolean isFull(){  return counter.get() == qSize;}  }
class C{  static public File copyMapFiles(File mapFile,boolean isTemporary){  System.out.println("Current directory: " + System.getProperty("user.dir"));  File savesDir=FMLClientHandler.instance().getSavesDir();  File dst=null;  if (mapFile != null && mapFile.exists()) {    dst=new File(savesDir,getNewSaveFileLocation(isTemporary));    try {      FileUtils.copyDirectory(mapFile,dst);    } catch (    IOException e) {      System.out.println("Failed to load file: " + mapFile.getPath());      return null;    }  }  return dst;}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  ClassLoader context=SecuritySupport.getContextClassLoader();  ClassLoader system=SecuritySupport.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=SecuritySupport.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=SecuritySupport.getParentClassLoader(chain);  }  return context;}  }
class C{  public static int copyDir(File src,File dest) throws IOException {  dest.mkdirs();  int count=0;  if (src.isFile()) {    count++;    copy(src,new File(dest.getCanonicalPath() + "/" + src.getName()));  } else   if (src.isDirectory()) {    File[] ff=src.listFiles();    if (ff != null && ff.length > 0) {      for (      File f : ff) {        count+=copyDir(f,new File(dest.getCanonicalPath() + "/" + src.getName()));      }    } else {      new File(dest.getCanonicalPath() + "/" + src.getName()).mkdirs();    }  }  return count;}  }
class C{  void ensurePreDrawListener(){  boolean hasDependencies=false;  final int childCount=getChildCount();  for (int i=0; i < childCount; i++) {    final View child=getChildAt(i);    if (hasDependencies(child)) {      hasDependencies=true;      break;    }  }  if (hasDependencies != mNeedsPreDrawListener) {    if (hasDependencies) {      addPreDrawListener();    } else {      removePreDrawListener();    }  }}  }
class C{  public int readInt(int startPos){  return ByteBuffer.wrap(this.readBytes(startPos,4)).getInt();}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  private void addCallingProvisionMethod(StringBuilder stringBuilder,NewBindingKey key,TypeElement referencingClass,ClassName packagedInjectorClassName){  generateProvisionMethodIfNeeded(key,referencingClass);  ClassName originalPackagedInjector=getInjectorFor(key,referencingClass);  ComponentInfo givenComponent=getComponentFromPackagedInjectorClassName(packagedInjectorClassName);  ClassName targetPackagedInjectorClassName=getInjectorNameOfScope(originalPackagedInjector,givenComponent.getScope());  if (!targetPackagedInjectorClassName.equals(packagedInjectorClassName)) {    stringBuilder.append(TOP_LEVEL_INJECTOR_FIELD).append(".").append(Utils.getGetMethodName(targetPackagedInjectorClassName)).append("().");  }  stringBuilder.append(getProvisionMethodName(key)).append("()");}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void traverseResolverTreeAndGetStartAndEndKey(SegmentProperties segmentProperties,AbsoluteTableIdentifier tableIdentifier,FilterResolverIntf filterResolver,List<IndexKey> listOfStartEndKeys) throws QueryExecutionException {  IndexKey searchStartKey=null;  IndexKey searchEndKey=null;  long[] startKey=new long[segmentProperties.getDimensionKeyGenerator().getDimCount()];  long[] endKey=new long[segmentProperties.getDimensionKeyGenerator().getDimCount()];  List<byte[]> listOfStartKeyByteArray=new ArrayList<byte[]>(segmentProperties.getNumberOfNoDictionaryDimension());  List<byte[]> listOfEndKeyByteArray=new ArrayList<byte[]>(segmentProperties.getNumberOfNoDictionaryDimension());  SortedMap<Integer,byte[]> setOfStartKeyByteArray=new TreeMap<Integer,byte[]>();  SortedMap<Integer,byte[]> setOfEndKeyByteArray=new TreeMap<Integer,byte[]>();  SortedMap<Integer,byte[]> defaultStartValues=new TreeMap<Integer,byte[]>();  SortedMap<Integer,byte[]> defaultEndValues=new TreeMap<Integer,byte[]>();  List<long[]> startKeyList=new ArrayList<long[]>();  List<long[]> endKeyList=new ArrayList<long[]>();  traverseResolverTreeAndPopulateStartAndEndKeys(filterResolver,tableIdentifier,segmentProperties,startKey,setOfStartKeyByteArray,endKey,setOfEndKeyByteArray,startKeyList,endKeyList);  if (endKeyList.size() > 0) {    for (int i=0; i < endKey.length; i++) {      long[] endkeyColumnLevel=new long[endKeyList.size()];      int j=0;      for (      long[] oneEndKey : endKeyList) {        endkeyColumnLevel[j++]=oneEndKey[i];      }      Arrays.sort(endkeyColumnLevel);      endKey[i]=endkeyColumnLevel[endkeyColumnLevel.length - 1];    }  }  if (startKeyList.size() > 0) {    for (int i=0; i < startKey.length; i++) {      long[] startkeyColumnLevel=new long[startKeyList.size()];      int j=0;      for (      long[] oneStartKey : startKeyList) {        startkeyColumnLevel[j++]=oneStartKey[i];      }      Arrays.sort(startkeyColumnLevel);      startKey[i]=startkeyColumnLevel[0] - 1;    }  }  fillDefaultStartValue(defaultStartValues,segmentProperties);  fillDefaultEndValue(defaultEndValues,segmentProperties);  fillNullValuesStartIndexWithDefaultKeys(setOfStartKeyByteArray,segmentProperties);  fillNullValuesEndIndexWithDefaultKeys(setOfEndKeyByteArray,segmentProperties);  pruneStartAndEndKeys(setOfStartKeyByteArray,listOfStartKeyByteArray);  pruneStartAndEndKeys(setOfEndKeyByteArray,listOfEndKeyByteArray);  searchStartKey=FilterUtil.createIndexKeyFromResolvedFilterVal(startKey,segmentProperties.getDimensionKeyGenerator(),FilterUtil.getKeyWithIndexesAndValues(listOfStartKeyByteArray));  searchEndKey=FilterUtil.createIndexKeyFromResolvedFilterVal(endKey,segmentProperties.getDimensionKeyGenerator(),FilterUtil.getKeyWithIndexesAndValues(listOfEndKeyByteArray));  listOfStartEndKeys.add(searchStartKey);  listOfStartEndKeys.add(searchEndKey);}  }
class C{  private void ensureInstanceExists(ServiceDocument state,Consumer<Throwable> callback){  final AtomicBoolean documentExists=new AtomicBoolean();  QueryTaskClientHelper.create(state.getClass()).setDocumentLink(state.documentSelfLink).setResultHandler(null).sendWith(getHost());}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public AudioGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200536,skilltarget,num0,skillname);}  }
class C{  public static void json(String json){  printer.json(json);}  }
class C{  public DocumentNGramDistroGraph inverseIntersectDistroGraph(DocumentNGramDistroGraph dgOtherGraph){  DocumentNGramDistroGraph dgUnion=(DocumentNGramDistroGraph)clone();  dgUnion.mergeDistroGraph(dgOtherGraph);  DocumentNGramDistroGraph dgIntersection=intersectDistroGraph(dgOtherGraph);  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gUnion=dgUnion.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gIntersection=dgIntersection.getGraphLevelByNGramSize(iCurLvl);    EdgeCachedLocator eclLocator=new EdgeCachedLocator(10);    if (gIntersection == null)     continue;    java.util.Iterator iIter=gIntersection.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gUnion,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gUnion.removeEdge(eEdge);        dgUnion.getEdgesToDistros().remove(eEdge);      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  return dgUnion;}  }
class C{  private boolean hasAccountListChanged(){  Account[] accountList=AccountManager.get(this).getAccountsByType(MainApp.getAccountType());  Set<String> actualAccounts=toAccountNameSet(accountList);  return !mOriginalAccounts.equals(actualAccounts);}  }
class C{  public ColourMapData(){}  }
class C{  private static void applyOverrides(){  InputStream stream=getContentTypesPropertiesStream();  if (stream == null) {    return;  }  try {    try {      Properties overrides=new Properties();      overrides.load(stream);      for (      Map.Entry<Object,Object> entry : overrides.entrySet()) {        String extension=(String)entry.getKey();        String mimeType=(String)entry.getValue();        add(mimeType,extension);      }    }  finally {      stream.close();    }  } catch (  IOException ignored) {  }}  }
class C{  public WidgetsGetCommentsQuery widgetApiId(Integer value){  return unsafeParam("widget_api_id",value);}  }
class C{  public boolean insert(E comparable){  if (comparable == null)   return false;  BinarySearchTreeNode<E> node=new BinarySearchTreeNode<E>(comparable);  return this.insert(node);}  }
class C{  public void removeSwipeListener(SwipeListener listener){  if (mListeners == null) {    return;  }  mListeners.remove(listener);}  }
class C{  private void checkState(){  if (isCancelled())   throw new CancellationException("task was cancelled");}  }
class C{  public void tabMoved(long time,int id,int oldIndex,int newIndex){  reorderTab(id,oldIndex,newIndex,false);  updateVisualTabOrdering();  mUpdateHost.requestUpdate();}  }
class C{  public void addColumnListener(ColumnListener listener){  m_listeners.add(listener);}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),0);  setChild(new List(),1);}  }
class C{  public void write(int a) throws IOException {  outs.write(a);  position++;}  }
class C{  private void initColumnData() throws SQLException {  if (getColumnTableData() == null)   return;  if (getColumnName() != null && (getColumnName().equals(UID_COLUMN) || getColumnName().equals(ASTERIX_COLUMN)))   return;  ITypeDesc currentInfo=getColumnTableData().getTypeDesc();  for (int c=0; c < currentInfo.getNumOfFixedProperties(); c++) {    if (currentInfo.getFixedProperty(c).getName().equalsIgnoreCase(getColumnName())) {      setColumnIndexInTable(c);      return;    }  }  if (!currentInfo.supportsDynamicProperties())   throw new IllegalArgumentException("Unknown column name '" + getColumnName() + "'");}  }
class C{  @Override public Text createTextNode(String data){  return new TextImpl(this,data);}  }
class C{  public double logProb(String a){  Tuple2<Double,Double> t=ugrams.get(a);  if (t == null)   return ugrams.get("<unk>")._1().doubleValue(); else   return t._1().doubleValue();}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public Scoop bindStatusBar(Activity activity,int toppingId){  return bindStatusBar(activity,toppingId,null);}  }
class C{  static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  public int load(IInputReader r) throws IOException {  id2SumAndPos.clear();  try {    int numberOfClasses=0;    while (r.getPosition() < r.length()) {      int classId=r.readInt();      int count=r.readInt();      if (count < 0) {        setWeightedSum(classId,-count);        count=r.readInt();      } else       setWeightedSum(classId,count);      long pos=r.readLong();      setSumAndPos(classId,count,pos);      numberOfClasses++;    }    return numberOfClasses;  }  finally {    r.close();  }}  }
class C{  public void registerObserver(ColourNotifyInterface observer){  observers.add(observer);}  }
class C{  private static Set<TypeElement> findAllMembersInjectorsRecursively(Collection<TypeElement> membersInjectors){  Set<TypeElement> result=new HashSet<>();  for (  TypeElement element : membersInjectors) {    result.addAll(findAllMembersInjectorsRecursively(element));  }  return result;}  }
class C{  boolean isAncestorOf(Node a,Node b){  for (Node node=b; node != null; node=node.getParentNode()) {    if (node == a)     return true;  }  return false;}  }
class C{  @Override public void characters(char[] ch,int start,int length) throws SAXException {  if (documentHandler != null) {    documentHandler.characters(ch,start,length);  }}  }
class C{  private void initView(){  this.progressView=(CircularProgressView)findViewById(R.id.container_loading_view_mini_progressView);  this.retryButton=(Button)findViewById(R.id.container_loading_view_mini_retryButton);  retryButton.setOnClickListener(this);  retryButton.setVisibility(GONE);  this.refreshLayout=(BothWaySwipeRefreshLayout)findViewById(R.id.container_photo_list_swipeRefreshLayout);  if (Mysplash.getInstance().isLightTheme()) {    refreshLayout.setColorSchemeColors(ContextCompat.getColor(getContext(),R.color.colorTextContent_light));    refreshLayout.setProgressBackgroundColorSchemeResource(R.color.colorPrimary_light);  } else {    refreshLayout.setColorSchemeColors(ContextCompat.getColor(getContext(),R.color.colorTextContent_dark));    refreshLayout.setProgressBackgroundColorSchemeResource(R.color.colorPrimary_dark);  }  refreshLayout.setPermitRefresh(false);  refreshLayout.setVisibility(GONE);  this.recyclerView=(RecyclerView)findViewById(R.id.container_photo_list_recyclerView);  recyclerView.setLayoutManager(new LinearLayoutManager(getContext(),LinearLayoutManager.VERTICAL,false));  recyclerView.setAdapter(photosPresenter.getAdapter());  recyclerView.addOnScrollListener(scrollListener);}  }
class C{  public static String clearAllLastViewed(HttpServletRequest request,HttpServletResponse response){  ProductEvents.clearLastViewedCategories(request,response);  ProductEvents.clearLastViewedProducts(request,response);  ProductSearchSession.clearSearchOptionsHistoryList(request,response);  return "success";}  }
class C{  public void remove(ComponentName componentName){synchronized (mCache) {    mCache.remove(componentName);  }}  }
class C{  public FastSineTransformer(final DstNormalization normalization){  this.normalization=normalization;}  }
class C{  private Interceptor[] createInterceptors(Interceptors aroundAnnotation){  Interceptor[] result=null;  Class<Interceptor>[] interceptorClasses=(Class<Interceptor>[])aroundAnnotation.value();  if (interceptorClasses != null && interceptorClasses.length > 0) {    result=new Interceptor[interceptorClasses.length];    for (int i=0; i < result.length; i++) {      result[i]=intersMap.get(interceptorClasses[i]);      if (result[i] != null)       continue;      try {        result[i]=interceptorClasses[i].newInstance();        intersMap.put(interceptorClasses[i],result[i]);      } catch (      Exception e) {        throw new InterceptorException(e.getMessage(),e);      }    }  }  return result;}  }
class C{  protected void addChild(LazyNode token){  if (lastChild == null) {    child=token;    lastChild=token;    return;  }  lastChild.next=token;  lastChild=token;}  }
class C{  public static Edit parse(NexusStreamParser np) throws IOException {  if (np.peekMatchIgnoreCase("A")) {    np.matchIgnoreCase("A");    return new Edit(np.getInt(),np.getInt(),np.getWordRespectCase());  } else   if (np.peekMatchIgnoreCase("D")) {    np.matchIgnoreCase("D");    return new Edit(np.getInt());  } else   if (np.peekMatchIgnoreCase("R")) {    np.matchIgnoreCase("R");    return new Edit(np.getInt(),np.getWordRespectCase());  } else   return null;}  }
class C{  public WholeMVJSONPassageFormatter(int offsetGap){  this.offsetGap=offsetGap;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  @Override public int read(){  return -1;}  }
class C{  @Override public void reset() throws IOException {  throw exception;}  }
class C{  protected void scheduleEdgeProcessing(PathEdge<N,D> edge){  if (executor.isTerminating())   return;  executor.execute(new PathEdgeProcessingTask(edge));  propagationCount++;}  }
class C{  public DatabaseGetCountriesQuery(VkApiClient client,UserActor actor){  super(client,"database.getCountries",GetCountriesResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public Builder scrollWheelZoom(Boolean scrollWheelZoom){  this.scrollWheelZoom=scrollWheelZoom;  return this;}  }
class C{  @Override protected void merge(FlowSet<N> in1,FlowSet<N> in2,FlowSet<N> out){  in1.intersection(in2,out);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @Override public boolean hasRaster(Symbolizer symbolizer){  return false;}  }
class C{  @Override public void readRep(Repository rep,ObjectId idStep,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleException {  try {    tabelName=rep.getStepAttributeString(idStep,"TableName");    mdkeySize=rep.getStepAttributeString(idStep,"MDKeySize");    measureCount=rep.getStepAttributeString(idStep,"Measurecount");    heirAndKeySize=rep.getStepAttributeString(idStep,"HeirAndKeySize");    databaseName=rep.getStepAttributeString(idStep,"databaseName");    tableName=rep.getStepAttributeString(idStep,"tableName");    groupByEnabled=rep.getStepAttributeString(idStep,"isGroupByEnabled");    aggregatorClassString=rep.getStepAttributeString(idStep,"aggregatorClassString");    aggregatorString=rep.getStepAttributeString(idStep,"aggregatorString");    factDimLensString=rep.getStepAttributeString(idStep,"factDimLensString");    levelAnddataTypeString=rep.getStepAttributeString(idStep,"levelAnddataTypeString");    partitionID=rep.getStepAttributeString(idStep,"partitionID");    segmentId=rep.getStepAttributeString(idStep,"segmentId");    taskNo=rep.getStepAttributeString(idStep,"taskNo");  } catch (  Exception exception) {    throw new KettleException(BaseMessages.getString(PKG,"CarbonDataWriterStepMeta.Exception.UnexpectedErrorInReadingStepInfo"),exception);  }}  }
class C{  private Stream<Map.Entry<K,V>> entryStream(){  return Stream.concat(delegate.entrySet().stream().filter(null),super.entrySet().stream());}  }
class C{  public static <VALUEIN>void assignResultValue(Class<? extends Writable> valueClass,ResultItem result,VALUEIN value){  if (valueClass.equals(Text.class)) {    ((Text)value).set(result.asString());  } else   if (valueClass.equals(IntWritable.class) && result.getValueType() == ValueType.XS_INTEGER) {    XSInteger intItem=(XSInteger)result.getItem();    ((IntWritable)value).set(intItem.asPrimitiveInt());  } else   if (valueClass.equals(VIntWritable.class) && result.getValueType() == ValueType.XS_INTEGER) {    XSInteger intItem=(XSInteger)result.getItem();    ((VIntWritable)value).set(intItem.asPrimitiveInt());  } else   if (valueClass.equals(LongWritable.class) && result.getValueType() == ValueType.XS_INTEGER) {    XSInteger intItem=(XSInteger)result.getItem();    ((LongWritable)value).set(intItem.asLong());  } else   if (valueClass.equals(VLongWritable.class) && result.getValueType() == ValueType.XS_INTEGER) {    XSInteger intItem=(XSInteger)result.getItem();    ((VLongWritable)value).set(intItem.asLong());  } else   if (valueClass.equals(BooleanWritable.class) && result.getValueType() == ValueType.XS_BOOLEAN) {    XSBoolean boolItem=(XSBoolean)result.getItem();    ((BooleanWritable)value).set(boolItem.asPrimitiveBoolean());  } else   if (valueClass.equals(FloatWritable.class) && result.getValueType() == ValueType.XS_FLOAT) {    XSFloat floatItem=(XSFloat)result.getItem();    ((FloatWritable)value).set(floatItem.asPrimitiveFloat());  } else   if (valueClass.equals(DoubleWritable.class) && result.getValueType() == ValueType.XS_DOUBLE) {    XSDouble doubleItem=(XSDouble)result.getItem();    ((DoubleWritable)value).set(doubleItem.asPrimitiveDouble());  } else   if (valueClass.equals(BytesWritable.class) && result.getValueType() == ValueType.XS_HEX_BINARY) {    XSHexBinary binItem=(XSHexBinary)result.getItem();    byte[] bytes=binItem.asBinaryData();    ((BytesWritable)value).set(bytes,0,bytes.length);  } else   if (valueClass.equals(BytesWritable.class) && result.getValueType() == ValueType.XS_BASE64_BINARY) {    XSBase64Binary binItem=(XSBase64Binary)result.getItem();    byte[] bytes=binItem.asBinaryData();    ((BytesWritable)value).set(bytes,0,bytes.length);  } else   if (valueClass.equals(BytesWritable.class) && result.getValueType() == ValueType.BINARY) {    byte[] bytes=((XdmBinary)result.getItem()).asBinaryData();    ((BytesWritable)value).set(bytes,0,bytes.length);  } else   if (valueClass.equals(MarkLogicNode.class) && (result.getValueType() == ValueType.NODE || result.getValueType() == ValueType.ELEMENT || result.getValueType() == ValueType.DOCUMENT || result.getValueType() == ValueType.ATTRIBUTE || result.getValueType() == ValueType.TEXT)) {    ((MarkLogicNode)value).set(result);  } else   if (valueClass.equals(DatabaseDocument.class)) {    ((DatabaseDocument)value).set(result);  } else {    throw new UnsupportedOperationException("Value " + valueClass + " is unsupported for result type: "+ result.getValueType());  }}  }
class C{  public boolean weekdayRange(String wd1,String wd2,String gmt){  boolean useGmt=GMT.equalsIgnoreCase(wd2) || GMT.equalsIgnoreCase(gmt);  Calendar cal=getCurrentTime(useGmt);  int currentDay=cal.get(Calendar.DAY_OF_WEEK) - 1;  int from=DAYS.indexOf(wd1 == null ? null : wd1.toUpperCase());  int to=DAYS.indexOf(wd2 == null ? null : wd2.toUpperCase());  if (to == -1) {    to=from;  }  if (to < from) {    return currentDay >= from || currentDay <= to;  } else {    return currentDay >= from && currentDay <= to;  }}  }
class C{  public static int pointInsideTriangle(Vector2f t0,Vector2f t1,Vector2f t2,Vector2f p){  int val1=counterClockwise(t0,t1,p);  if (val1 == 0) {    return 1;  }  int val2=counterClockwise(t1,t2,p);  if (val2 == 0) {    return 1;  }  if (val2 != val1) {    return 0;  }  int val3=counterClockwise(t2,t0,p);  if (val3 == 0) {    return 1;  }  if (val3 != val1) {    return 0;  }  return val3;}  }
class C{  public void testImportSubProjectsWithMissingSubModule() throws IOException, ConfigurationException {  VirtualFile projectRoot=createProjectWithSubprojects(projectsWithDefaultLocations(module(1)),module(2));  Map<String,VirtualFile> toImport=moduleListToMap(GradleModuleImporter.getRelatedProjects(projectRoot,getProject()));  assertEquals(2,toImport.size());  assertModuleRequiredButNotFound(module(2),toImport);  try {    GradleModuleImporter.importModules(this,toImport,getProject(),null);    fail();  } catch (  IOException e) {  }}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public static synchronized boolean release(String name){  name="lock." + name;  try {    String node=Model.node();    return Helper.update(W.create(X.ID,name).and("s",node),V.create("s",X.EMPTY),Global.class) > 0;  }  finally {    locked.remove(name);  }}  }
class C{  public TObjectLongHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  @Override @Test public void testLongly(){  RealMatrix matrix=createRealMatrix(longleyData,16,7);  KendallsCorrelation corrInstance=new KendallsCorrelation(matrix);  RealMatrix correlationMatrix=corrInstance.getCorrelationMatrix();  double[] rData=new double[]{1,0.9166666666666666,0.9333333333333332,0.3666666666666666,0.05,0.8999999999999999,0.8999999999999999,0.9166666666666666,1,0.9833333333333333,0.45,0.03333333333333333,0.9833333333333333,0.9833333333333333,0.9333333333333332,0.9833333333333333,1,0.4333333333333333,0.05,0.9666666666666666,0.9666666666666666,0.3666666666666666,0.45,0.4333333333333333,1,-0.2166666666666666,0.4666666666666666,0.4666666666666666,0.05,0.03333333333333333,0.05,-0.2166666666666666,1,0.05,0.05,0.8999999999999999,0.9833333333333333,0.9666666666666666,0.4666666666666666,0.05,1,0.9999999999999999,0.8999999999999999,0.9833333333333333,0.9666666666666666,0.4666666666666666,0.05,0.9999999999999999,1};  UnitTestUtils.assertEquals("Kendall's correlation matrix",createRealMatrix(rData,7,7),correlationMatrix,10E-15);}  }
class C{  public void doRedo(){  if (undo.canRedo()) {    undo.redo();    parse();  }}  }
class C{  public static String readText(Context context,String assetPath){  LogUtils.debug("read assets file as text: " + assetPath);  try {    return ConvertUtils.toString(context.getAssets().open(assetPath));  } catch (  Exception e) {    LogUtils.error(e);    return "";  }}  }
class C{  public void configureForSyncPromo(boolean isExpanded){  mDeviceIcon.setVisibility(View.VISIBLE);  mDeviceIcon.setImageResource(R.drawable.recent_laptop);  mDeviceLabel.setText(R.string.ntp_recent_tabs_sync_promo_title);  setTimeLabelVisibility(View.GONE);  configureExpandedCollapsed(isExpanded);}  }
class C{  public static Bitmap toBitmap(View view){  int width=view.getWidth();  int height=view.getHeight();  if (view instanceof ListView) {    height=0;    ListView listView=(ListView)view;    for (int i=0; i < listView.getChildCount(); i++) {      height+=listView.getChildAt(i).getHeight();    }  } else   if (view instanceof ScrollView) {    height=0;    ScrollView scrollView=(ScrollView)view;    for (int i=0; i < scrollView.getChildCount(); i++) {      height+=scrollView.getChildAt(i).getHeight();    }  }  view.setDrawingCacheEnabled(true);  view.clearFocus();  view.setPressed(false);  boolean willNotCache=view.willNotCacheDrawing();  view.setWillNotCacheDrawing(false);  int color=view.getDrawingCacheBackgroundColor();  view.setDrawingCacheBackgroundColor(Color.WHITE);  if (color != Color.WHITE) {    view.destroyDrawingCache();  }  view.buildDrawingCache();  Bitmap cacheBitmap=view.getDrawingCache();  if (cacheBitmap == null) {    return null;  }  Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  canvas.drawBitmap(cacheBitmap,0,0,null);  canvas.save(Canvas.ALL_SAVE_FLAG);  canvas.restore();  cacheBitmap.recycle();  view.destroyDrawingCache();  view.setWillNotCacheDrawing(willNotCache);  view.setDrawingCacheBackgroundColor(color);  return bitmap;}  }
class C{  public boolean isThisPtr(){  if (variable instanceof Pair) {    Pair o=(Pair)variable;    return o.isThisParameter();  }  return false;}  }
class C{  public double[] toCartesianGradient(final double[] sGradient){  computeJacobian();  return new double[]{sGradient[0] * jacobian[0][0] + sGradient[1] * jacobian[1][0] + sGradient[2] * jacobian[2][0],sGradient[0] * jacobian[0][1] + sGradient[1] * jacobian[1][1] + sGradient[2] * jacobian[2][1],sGradient[0] * jacobian[0][2] + sGradient[2] * jacobian[2][2]};}  }
class C{  public static boolean hasRole(String roleName){  for (  String role : getRoles()) {    if (role.equalsIgnoreCase(roleName)) {      return true;    }  }  return false;}  }
class C{  private static int calcNumAdditionalMillerRabinRounds(int bitLength){  int roundsLeft=0;  if (bitLength >= 1536) {    roundsLeft=2;  } else   if (bitLength >= 1024) {    roundsLeft=3;  }  return roundsLeft;}  }
class C{  public SandboxRay(String name,Vector2 start,Vector2 direction){  super(start,direction);  this.name=name;}  }
class C{  public StaticScript type(String type){  this.type=type;  return this;}  }
class C{  public static Column of(String name,Object value){  return Column.of(name,Value.of(value));}  }
class C{  public void markAssetReferenced(UUID uuid){  if (!assetMap.containsKey(uuid)) {    return;  }  referencedAssets.add(assetMap.get(uuid));}  }
class C{  @Override public void writeNBT(NBTTagCompound compound){  super.writeNBT(compound);  compound.setInteger("foodExhaustionTimer",this.exhaustionTimer);  compound.setBoolean("bwmAdjustedFoodStats",true);}  }
class C{  public void reportIgnored(@NonNull String module,@NonNull String path){  List<String> list=myNotMigrated.get(module);  if (list == null) {    list=Lists.newArrayList();    myNotMigrated.put(module,list);  }  list.add(path);}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  public static Style deepPurple(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_DEEP_PURPLE);  return style;}  }
class C{  public static final void isXMLCharWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,String datavalue,boolean isXML11Version){  if (datavalue == null || (datavalue.length() == 0)) {    return;  }  char[] dataarray=datavalue.toCharArray();  int datalength=dataarray.length;  if (isXML11Version) {    int i=0;    while (i < datalength) {      if (XML11Char.isXML11Invalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"InvalidXMLCharInDOM",new Object[]{Integer.toString(dataarray[i - 1],16)});        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");      }    }  } else {    int i=0;    while (i < datalength) {      if (XMLChar.isInvalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"InvalidXMLCharInDOM",new Object[]{Integer.toString(dataarray[i - 1],16)});        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");      }    }  }}  }
class C{  @Override public int read(char[] chr,int st,int len) throws IOException {  try {    beforeRead(len);    int n=in.read(chr,st,len);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public MullerSolver2(){  this(DEFAULT_ABSOLUTE_ACCURACY);}  }
class C{  private void sendBroadcastUploadFinished(UploadFileOperation upload,RemoteOperationResult uploadResult,String unlinkedFromRemotePath){  Intent end=new Intent(getUploadFinishMessage());  end.putExtra(EXTRA_REMOTE_PATH,upload.getRemotePath());  if (upload.wasRenamed()) {    end.putExtra(EXTRA_OLD_REMOTE_PATH,upload.getOldFile().getRemotePath());  }  end.putExtra(EXTRA_OLD_FILE_PATH,upload.getOriginalStoragePath());  end.putExtra(ACCOUNT_NAME,upload.getAccount().name);  end.putExtra(EXTRA_UPLOAD_RESULT,uploadResult.isSuccess());  if (unlinkedFromRemotePath != null) {    end.putExtra(EXTRA_LINKED_TO_PATH,unlinkedFromRemotePath);  }  sendStickyBroadcast(end);}  }
class C{  public WallGetRepostsQuery(VkApiClient client){  super(client,"wall.getReposts",GetRepostsResponse.class);}  }
class C{  public void handleDecode(Result result,Bitmap barcode){  inactivityTimer.onActivity();  playBeepSoundAndVibrate();  String resultString=result.getText();  handleResult(resultString);}  }
class C{  public NewsfeedDeleteListQuery(VkApiClient client,UserActor actor,int listId){  super(client,"newsfeed.deleteList",OkResponse.class);  accessToken(actor.getAccessToken());  listId(listId);}  }
class C{  @Override public boolean equals(Object that){  if (!(that instanceof S2LatLngRect)) {    return false;  }  S2LatLngRect otherRect=(S2LatLngRect)that;  return lat().equals(otherRect.lat()) && lng().equals(otherRect.lng());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200439,skilltarget,skillname);}  }
class C{  protected void validateSuperUserAccess(){  if (config().isAuthenticationEnabled()) {    String appId=clientAppId();    log.debug("[{}] Check super user access: Authenticated: {} -- Role: {}",uri.getRequestUri(),isClientAuthenticated(),appId);    if (!config().getSuperUserRoles().contains(appId)) {      throw new RestException(Status.UNAUTHORIZED,"This operation requires super-user access");    }  }}  }
class C{  public VideoAddQuery(VkApiClient client,UserActor actor,int videoId,int ownerId){  super(client,"video.add",OkResponse.class);  accessToken(actor.getAccessToken());  videoId(videoId);  ownerId(ownerId);}  }
class C{  public void tag(String tag,String[] names,String[] values,int nattr){  tag(tag,names,values,nattr,true);}  }
class C{  public boolean hasNext(){  return !isClosed && nextHeader != null;}  }
class C{  public ResolvingXMLFilter(CatalogManager manager){  super();  catalogManager=manager;  catalogResolver=new CatalogResolver(catalogManager);}  }
class C{  public void clear(){  Arrays.fill(ritems,0,rsize,null);  Arrays.fill(pitems,0,psize,null);  rsize=0;  psize=0;}  }
class C{  @Override public boolean containsAll(Collection<?> c){  return backedSet.containsAll(c);}  }
class C{  private boolean filterUser(ILogEntry logEntry,String user){  if (user == null)   return true;  if (regExp) {    return matchesExpression(logEntry.getAuthor(),user + CHAR_MATCH_MANY);  } else {    return containsExpression(logEntry.getAuthor(),user);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201129,value0);}  }
class C{  protected void checkVarianceConsistency(OLSMultipleLinearRegression model){  UnitTestUtils.assertEquals(StatUtils.variance(model.getY().toArray()),model.calculateYVariance(),0);  double[] residuals=model.calculateResiduals().toArray();  RealMatrix X=model.getX();  UnitTestUtils.assertEquals(StatUtils.variance(model.calculateResiduals().toArray()) * (residuals.length - 1),model.calculateErrorVariance() * (X.getRowDimension() - X.getColumnDimension()),1E-20);}  }
class C{  public void notifyFileShown(@NotNull TextEditor editor,boolean renderImmediately){  if (renderImmediately) {    myRenderImmediately=true;  }  processFileEditorChange(editor);  if (renderImmediately) {    myToolWindowUpdateQueue.sendFlush();  }}  }
class C{  public Tailer(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen){  this(file,listener,delayMillis,end,reOpen,DEFAULT_BUFSIZE);}  }
class C{  private String removeFrameSuffix(String query){  int pos=query.indexOf("_RF");  if (pos != -1)   return query.substring(0,pos); else   return query;}  }
class C{  @Override protected boolean handler(@NonNull Throwable e,@NonNull IHandler handler){  String s=!TextUtils.isEmpty(e.getMessage()) ? e.getMessage() : e.getClass().getSimpleName();  handler.onHandler(Cons.Error.UnKnow,s);  return true;}  }
class C{  public static boolean bookmarkNodeExists(Context context,long nodeId){  Boolean result=chromeBrowserProviderCall(Boolean.class,ChromeBrowserProvider.CLIENT_API_BOOKMARK_NODE_EXISTS,context,argsToBundle(nodeId));  return result != null ? result.booleanValue() : false;}  }
class C{  public synchronized boolean end(){  boolean ok=true;  while (paused && !cancelled) {    try {      wait();    } catch (    InterruptedException ie) {      return false;    }  }  if (cancelled) {    return false;  }  timer.start("clipGeneration");  DataLine.Info info=new DataLine.Info(Clip.class,currentFormat);  boolean opened=false;  long totalDelayMs=0;  do {    try {      currentClip=(Clip)AudioSystem.getLine(info);      currentClip.addLineListener(lineListener);      currentClip.open(currentFormat,outputData,0,outputData.length);      opened=true;    } catch (    LineUnavailableException lue) {      System.err.println("LINE UNAVAILABLE: " + "Format is " + currentFormat);      try {        Thread.sleep(openFailDelayMs);        totalDelayMs+=openFailDelayMs;      } catch (      InterruptedException ie) {        ie.printStackTrace();      }    }  } while (!opened && totalDelayMs < totalOpenFailDelayMs);  if (!opened) {    close();    ok=false;  } else {    setVolume(currentClip,volume);    if (audioMetrics && firstPlay) {      firstPlay=false;      timer.stop("firstPlay");      timer.getTimer("firstPlay").showTimesShortTitle("");      timer.getTimer("firstPlay").showTimesShort(0);    }    currentClip.start();    try {      while (currentClip != null && (currentClip.isRunning() || paused) && !cancelled) {        wait();      }    } catch (    InterruptedException ie) {      ok=false;    }    close();  }  timer.stop("clipGeneration");  timer.stop("utteranceOutput");  ok&=!cancelled;  return ok;}  }
class C{  @NotNull public static String dumpTree(@NotNull TreeElement root){  final StringBuilder builder=new StringBuilder();  dumpTreeToBuilder(builder,root,0);  return builder.toString();}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysDept other=(SysDept)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getDeptName() == null ? other.getDeptName() == null : this.getDeptName().equals(other.getDeptName())) && (this.getParentId() == null ? other.getParentId() == null : this.getParentId().equals(other.getParentId()))&& (this.getSortNo() == null ? other.getSortNo() == null : this.getSortNo().equals(other.getSortNo()))&& (this.getLeaf() == null ? other.getLeaf() == null : this.getLeaf().equals(other.getLeaf()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  public CoreDocumentImpl(){  this(false);}  }
class C{  public GroupsIsMemberQueryWithUserIds isMember(String groupId,Integer... userIds){  return new GroupsIsMemberQueryWithUserIds(getClient(),groupId,userIds);}  }
class C{  public static KeyStore loadKeystore(final String keyStoreFile,final String keyStorePassword,final KeyStoreTypeEnum keyStoreType) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException {  final FileInputStream inputStream=new FileInputStream(keyStoreFile);  KeyStore keyStore;  try {    keyStore=getKeyStoreInstance(keyStoreType);    keyStore.load(inputStream,keyStorePassword.toCharArray());  }  finally {    if (inputStream != null) {      inputStream.close();    }  }  return keyStore;}  }
class C{  public static IOFileFilter asFileFilter(FilenameFilter filter){  return new DelegateFileFilter(filter);}  }
class C{  public static String replaceString(String mainString,String oldString,String newString){  if (mainString == null) {    return null;  }  if (UtilValidate.isEmpty(oldString)) {    return mainString;  }  if (newString == null) {    newString="";  }  int i=mainString.lastIndexOf(oldString);  if (i < 0)   return mainString;  StringBuilder mainSb=new StringBuilder(mainString);  while (i >= 0) {    mainSb.replace(i,i + oldString.length(),newString);    i=mainString.lastIndexOf(oldString,i - 1);  }  return mainSb.toString();}  }
class C{  private SalesOrderHeader createSalesOrderHeader(String salesOrderId){  SalesOrderHeader soHeader=new SalesOrderHeader();  soHeader.setSalesOrderId(salesOrderId);  soHeader.setCurrencyCode("INR");  soHeader.setGrossAmount(BigDecimal.valueOf(13224));  soHeader.setNetAmount(BigDecimal.valueOf(11113));  soHeader.setTaxAmount(BigDecimal.valueOf(2111));  return soHeader;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_PICKUP_ITEM_HE_DENIED_MY_ASK(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300218,value0,value1);}  }
class C{  public void notSee(VisibleObject object,boolean isOutOfRange){}  }
class C{  @Override public void onViewRecycled(ListBaseViewHolder holder){  long begin=System.currentTimeMillis();  holder.setComponentUsing(false);  recycleViewList.add(holder);  WXLogUtils.d(TAG,"Recycle holder " + (System.currentTimeMillis() - begin) + "  Thread:"+ Thread.currentThread().getName());}  }
class C{  public ObjectFactory(){}  }
class C{  public void writeHeader(Writer w) throws IOException {  w.write(CREATOR + "\t" + (creator != null ? creator : ProgramProperties.getProgramName())+ "\n");  w.write(CREATION_DATE + "\t" + (creationDate != null ? creationDate : ((new Date()).toString()))+ "\n");  w.write(CONTENT_TYPE + "\t" + getContentType()+ "\n");  w.write(NAMES);  for (  String dataName : sampleNames)   w.write("\t" + dataName);  w.write("\n");  w.write(BLAST_MODE);  for (  BlastMode blastMode : blastModes)   w.write("\t" + blastMode.toString());  w.write("\n");  if (disabledSamples.size() > 0) {    w.write(DISABLED);    for (    String dataName : disabledSamples)     w.write("\t" + dataName);    w.write("\n");  }  if (sampleUIds.size() > 0) {    w.write(UIDS);    for (    Long dataUid : sampleUIds)     w.write("\t" + dataUid);    w.write("\n");  }  if (sampleSizes.size() > 0) {    w.write(SIZES);    for (    Integer dataSize : sampleSizes)     w.write("\t" + dataSize);    w.write("\n");  }  if (totalReads != -1)   w.write(TOTAL_READS + "\t" + totalReads+ "\n");  if (additionalReads != -1)   w.write(ADDITIONAL_READS + "\t" + additionalReads+ "\n");  for (  String classification : classification2collapsedIds.keySet()) {    Set<Integer> collapsed=classification2collapsedIds.get(classification);    if (collapsed != null && collapsed.size() > 0) {      w.write(COLLAPSE + "\t" + classification);      for (      Integer id : collapsed)       w.write("\t" + id);    }    w.write("\n");  }  for (  String classification : classification2algorithm.keySet()) {    String algorithm=classification2algorithm.get(classification);    if (algorithm != null) {      w.write(ALGORITHM + "\t" + classification+ "\t"+ algorithm+ "\n");    }  }  if (parameters != null)   w.write(PARAMETERS + "\t" + parameters+ "\n");  for (  String classification : classification2NodeStyle.keySet()) {    String nodeType=classification2NodeStyle.get(classification);    if (nodeType != null) {      w.write(NODE_STYLE + "\t" + classification+ "\t"+ nodeType+ "\n");    }  }  if (colorTable != null)   w.write(COLOR_TABLE + "\t" + colorTable+ (colorByPosition ? "\tbyPosition\t" : "\t")+ getColorTableHeatMap()+ "\n");  if (colorEdits != null)   w.write(COLOR_EDITS + "\t" + colorEdits+ "\n");  for (  String classification : classification2NodeFormats.keySet()) {    String formatting=classification2NodeFormats.get(classification);    if (formatting != null) {      w.write(NODE_FORMATS + "\t" + classification+ "\t"+ formatting+ "\n");    }  }  for (  String classification : classification2EdgeFormats.keySet()) {    String formatting=classification2EdgeFormats.get(classification);    if (formatting != null)     w.write(EDGE_FORMATS + "\t" + classification+ "\t"+ formatting+ "\n");  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  mContext=context;  mAccount=account;  mAuthTokenType=authTokenType;  mNotifyAuthFailure=notifyAuthFailure;}  }
class C{  @Override public void stop(){  impl.stop();}  }
class C{  public FriendsSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public final TableSubHeader render(){  TableSubHeader element=getElement();  if (element == null) {    element=new TableSubHeader(this);    setElement(element);  }  render(element);  return element;}  }
class C{  public void click(){  image.click();}  }
class C{  public static double hypergeometric(int k,int n,int r,int m){  if (k < 0 || r > n || m > n || n <= 0 || m < 0 | r < 0) {    throw new IllegalArgumentException("Invalid hypergeometric");  }  if (m > n / 2) {    m=n - m;    k=r - k;  }  if (r > n / 2) {    r=n - r;    k=m - k;  }  if (m > r) {    int temp=m;    m=r;    r=temp;  }  if (k < (m + r) - n || k > m) {    return 0.0;  }  if (r == n) {    if (k == m) {      return 1.0;    } else {      return 0.0;    }  } else   if (r == n - 1) {    if (k == m) {      return (n - m) / (double)n;    } else     if (k == m - 1) {      return m / (double)n;    } else {      return 0.0;    }  } else   if (m == 1) {    if (k == 0) {      return (n - r) / (double)n;    } else     if (k == 1) {      return r / (double)n;    } else {      return 0.0;    }  } else   if (m == 0) {    if (k == 0) {      return 1.0;    } else {      return 0.0;    }  } else   if (k == 0) {    double ans=1.0;    for (int m0=0; m0 < m; m0++) {      ans*=((n - r) - m0);      ans/=(n - m0);    }    return ans;  }  double ans=1.0;  for (int nr=n - r, n0=n; nr > (n - r) - (m - k); nr--, n0--) {    ans*=nr;    ans/=n0;  }  for (int k0=0; k0 < k; k0++) {    ans*=(m - k0);    ans/=((n - (m - k0)) + 1);    ans*=(r - k0);    ans/=(k0 + 1);  }  return ans;}  }
class C{  private byte[] read(FSDataInputStream channel,int size,long offset){  byte[] byteBffer=new byte[size];  try {    channel.seek(offset);    channel.readFully(byteBffer);  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  }  return byteBffer;}  }
class C{  public static int findGlobalValleyLocation(double[] data){  double min=Double.NaN;  int imin=-1;  for (int i=0; i < data.length; i++) {    if (Double.isNaN(data[i]))     continue;    if (Double.isNaN(min) || data[i] < min) {      min=data[i];      imin=i;    }  }  return imin;}  }
class C{  public SVNCheckedInChangeSet(SyncInfo info){  this(new SyncInfo[]{info});}  }
class C{  public void computeLegend(ChartData<?> data){  if (!mLegend.isLegendCustom()) {    List<String> labels=new ArrayList<>();    List<Integer> colors=new ArrayList<>();    for (int i=0; i < data.getDataSetCount(); i++) {      IDataSet dataSet=data.getDataSetByIndex(i);      List<Integer> clrs=dataSet.getColors();      int entryCount=dataSet.getEntryCount();      if (dataSet instanceof IBarDataSet && ((IBarDataSet)dataSet).isStacked()) {        IBarDataSet bds=(IBarDataSet)dataSet;        String[] sLabels=bds.getStackLabels();        for (int j=0; j < clrs.size() && j < bds.getStackSize(); j++) {          labels.add(sLabels[j % sLabels.length]);          colors.add(clrs.get(j));        }        if (bds.getLabel() != null) {          colors.add(ColorTemplate.COLOR_SKIP);          labels.add(bds.getLabel());        }      } else       if (dataSet instanceof IPieDataSet) {        List<String> xVals=data.getXVals();        IPieDataSet pds=(IPieDataSet)dataSet;        for (int j=0; j < clrs.size() && j < entryCount && j < xVals.size(); j++) {          labels.add(xVals.get(j));          colors.add(clrs.get(j));        }        if (pds.getLabel() != null) {          colors.add(ColorTemplate.COLOR_SKIP);          labels.add(pds.getLabel());        }      } else       if (dataSet instanceof ICandleDataSet && ((ICandleDataSet)dataSet).getDecreasingColor() != ColorTemplate.COLOR_NONE) {        colors.add(((ICandleDataSet)dataSet).getDecreasingColor());        colors.add(((ICandleDataSet)dataSet).getIncreasingColor());        labels.add(null);        labels.add(dataSet.getLabel());      } else {        for (int j=0; j < clrs.size() && j < entryCount; j++) {          if (j < clrs.size() - 1 && j < entryCount - 1) {            labels.add(null);          } else {            String label=data.getDataSetByIndex(i).getLabel();            labels.add(label);          }          colors.add(clrs.get(j));        }      }    }    if (mLegend.getExtraColors() != null && mLegend.getExtraLabels() != null) {      for (      int color : mLegend.getExtraColors())       colors.add(color);      Collections.addAll(labels,mLegend.getExtraLabels());    }    mLegend.setComputedColors(colors);    mLegend.setComputedLabels(labels);  }  Typeface tf=mLegend.getTypeface();  if (tf != null)   mLegendLabelPaint.setTypeface(tf);  mLegendLabelPaint.setTextSize(mLegend.getTextSize());  mLegendLabelPaint.setColor(mLegend.getTextColor());  mLegend.calculateDimensions(mLegendLabelPaint,mViewPortHandler);}  }
class C{  public void createHistogram(){  String sDataString;  iTotalNGrams=0;  if (TextPreprocessor == null)   sDataString=this.DataString; else   sDataString=TextPreprocessor.preprocess(DataString);  int iLen=sDataString.length();  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      String sCurNGram=DataString.substring(iCurStart,iCurStart + iNGramSize);      if (WordEvaluator != null)       if (!WordEvaluator.evaluateWord(sCurNGram))       continue;      if (this.NGramHistogram.containsKey(sCurNGram)) {        double dPrev=((Double)NGramHistogram.get(sCurNGram)).doubleValue();        NGramHistogram.put(sCurNGram,dPrev + 1.0);      } else       NGramHistogram.put(sCurNGram,1.0);      iTotalNGrams++;    }  }}  }
class C{  public Node item(int index){  try {    return item(index,null);  } catch (  ParserConfigurationException e) {    throw new RuntimeException(e);  }}  }
class C{  public WallEditQuery publishDate(Integer value){  return unsafeParam("publish_date",value);}  }
class C{  public UsersGetNearbyQuery(VkApiClient client,UserActor actor,float latitude,float longitude){  super(client,"users.getNearby",GetNearbyResponse.class);  accessToken(actor.getAccessToken());  latitude(latitude);  longitude(longitude);}  }
class C{  @Inject public AuditLogListenerImpl(final EventLog eventLog,final @Named("auditlog.threadpoolsize.core") int threadPoolSizeCore,final @Named("auditlog.threadpoolsize.max") int threadPoolSizeMax,final AuditLogRepository repository){  this.repository=repository;  eventLog.register(this);  threadPoolExecutor=new ThreadPoolExecutor(threadPoolSizeCore,threadPoolSizeMax,0L,MILLISECONDS,new LinkedBlockingQueue<Runnable>());}  }
class C{  @Override public RolloverDescription rollover(final RollingFileManager manager) throws SecurityException {  if (maxIndex < 0) {    return null;  }  final long start=System.nanoTime();  final int fileIndex=purge(minIndex,maxIndex,manager);  if (fileIndex < 0) {    return null;  }  if (LOGGER.isTraceEnabled()) {    final double duration=(System.nanoTime() - start) / (1000.0 * 1000.0 * 1000.0);    LOGGER.trace("DefaultRolloverStrategy.purge() took {} seconds",duration);  }  final StringBuilder buf=new StringBuilder(255);  manager.getPatternProcessor().formatFileName(subst,buf,fileIndex);  final String currentFileName=manager.getFileName();  String renameTo=buf.toString();  final String compressedName=renameTo;  Action compressAction=null;  if (renameTo.endsWith(EXT_GZIP)) {    renameTo=renameTo.substring(0,renameTo.length() - EXT_GZIP.length());    compressAction=new GzCompressAction(new File(renameTo),new File(compressedName),true);  } else   if (renameTo.endsWith(EXT_ZIP)) {    renameTo=renameTo.substring(0,renameTo.length() - EXT_ZIP.length());    compressAction=new ZipCompressAction(new File(renameTo),new File(compressedName),true,compressionLevel);  }  final FileRenameAction renameAction=new FileRenameAction(new File(currentFileName),new File(renameTo),false);  return new RolloverDescriptionImpl(currentFileName,false,renameAction,compressAction);}  }
class C{  private boolean isRedefined(Local l,Unit unitUse,AssignStmt unitDef,UnitGraph graph){  List<Unit> workList=new ArrayList<Unit>();  workList.add(unitUse);  Set<Unit> doneSet=new HashSet<Unit>();  while (!workList.isEmpty()) {    Unit curStmt=workList.remove(0);    if (!doneSet.add(curStmt))     continue;    for (    Unit u : graph.getPredsOf(curStmt)) {      if (u != unitDef) {        if (u instanceof DefinitionStmt) {          DefinitionStmt defStmt=(DefinitionStmt)u;          if (defStmt.getLeftOp() == l)           return true;        }        workList.add(u);      }    }  }  return false;}  }
class C{  private void removeCallSite(Stmt callSite,SootMethod caller){  if (!caller.getActiveBody().getUnits().contains(callSite))   return;  if (!((Stmt)callSite).containsInvokeExpr())   return;  caller.getActiveBody().getUnits().remove(callSite);  if (Scene.v().hasCallGraph())   Scene.v().getCallGraph().removeAllEdgesOutOf(callSite);}  }
class C{  public SelectPlan(Plan p,Predicate pred){  this.p=p;  this.pred=pred;  hist=predHistogram(p.histogram(),pred);}  }
class C{  private void openPokemonGoApp(){  Intent i=getPackageManager().getLaunchIntentForPackage("com.nianticlabs.pokemongo");  if (i != null) {    startActivity(i);  }}  }
class C{  private void populateStroke(Stroke stroke){  Expression expFillColour=null;  Expression expFillColourOpacity=null;  Expression expStrokeColour=null;  Expression expStrokeWidth=null;  Expression expStrokeOffset=null;  Expression expStrokeLineCap=null;  Expression expStrokeLineJoin=null;  Expression expStrokeDashArray=null;  Expression expAnchorPointX=null;  Expression expAnchorPointY=null;  Expression expDisplacementX=null;  Expression expDisplacementY=null;  Expression expGap=null;  Expression expInitialGap=null;  Expression expSymbolSize=null;  Expression expSymbolRotation=null;  Expression expStrokeOpacityColour=null;  Expression expStrokeSymbol=null;  if (stroke == null) {    expFillColour=getFilterFactory().literal("#000000");    expFillColourOpacity=getFilterFactory().literal(1.0);    fillFactory.setSolidFill(fieldConfigManager,expFillColour,expFillColourOpacity);    expStrokeColour=getFilterFactory().literal("#000000");    expStrokeWidth=getFilterFactory().literal(1.0);    expStrokeOffset=getFilterFactory().literal(0.0);    expFillColourOpacity=getFilterFactory().literal(1.0);    expStrokeLineCap=getFilterFactory().literal("round");    expStrokeLineJoin=getFilterFactory().literal("round");    expStrokeDashArray=getFilterFactory().literal("");  } else {    Graphic graphicFill=stroke.getGraphicFill();    Graphic graphicStroke=stroke.getGraphicStroke();    boolean fillColourEnabled=false;    boolean strokeColourEnabled=false;    if ((graphicFill == null) && (graphicStroke == null)) {      fillColourEnabled=true;      expFillColour=stroke.getColor();      expFillColourOpacity=stroke.getOpacity();      fillFactory.setSolidFill(fieldConfigManager,stroke.getColor(),stroke.getOpacity());    }    expFillColourOpacity=stroke.getOpacity();    expStrokeWidth=stroke.getWidth();    expStrokeOffset=stroke.getDashOffset();    expStrokeLineCap=stroke.getLineCap();    expStrokeLineJoin=stroke.getLineJoin();    List<Float> dashesArray=getStrokeDashArray(stroke);    expStrokeDashArray=getFilterFactory().literal(createDashArrayString(dashesArray));    if (graphicStroke != null) {      AnchorPoint anchorPoint=graphicStroke.getAnchorPoint();      if (anchorPoint != null) {        expAnchorPointX=anchorPoint.getAnchorPointX();        expAnchorPointY=anchorPoint.getAnchorPointY();      } else {        expAnchorPointX=defaultAnchorPoint.getAnchorPointX();        expAnchorPointY=defaultAnchorPoint.getAnchorPointY();      }      Displacement displacement=graphicStroke.getDisplacement();      if (displacement != null) {        expDisplacementX=displacement.getDisplacementX();        expDisplacementY=displacement.getDisplacementY();      } else {        expDisplacementX=defaultDisplacement.getDisplacementX();        expDisplacementY=defaultDisplacement.getDisplacementY();      }      expGap=graphicStroke.getGap();      expInitialGap=graphicStroke.getInitialGap();      expSymbolSize=graphicStroke.getSize();      expSymbolRotation=graphicStroke.getRotation();      List<GraphicalSymbol> graphicSymbolList=graphicStroke.graphicalSymbols();      for (      GraphicalSymbol graphicSymbol : graphicSymbolList) {        if (graphicSymbol instanceof MarkImpl) {          MarkImpl mark=(MarkImpl)graphicSymbol;          expStrokeSymbol=mark.getWellKnownName();          Mark defaultMark=getStyleFactory().getDefaultMark();          expFillColour=defaultMark.getFill().getColor();          expFillColourOpacity=defaultMark.getFill().getOpacity();          Fill markFill=mark.getFill();          if (markFill != null) {            fillColourEnabled=true;            expFillColour=markFill.getColor();            expFillColourOpacity=markFill.getOpacity();          }          expStrokeColour=defaultMark.getStroke().getColor();          expStrokeOpacityColour=defaultMark.getStroke().getOpacity();          Stroke markStroke=mark.getStroke();          if (markStroke != null) {            strokeColourEnabled=true;            expStrokeColour=markStroke.getColor();            expStrokeOpacityColour=markStroke.getOpacity();          }        } else         if (graphicSymbol instanceof ExternalGraphicImpl) {          @SuppressWarnings("unused") ExternalGraphicImpl externalGraphic=(ExternalGraphicImpl)graphicSymbol;        }      }    }    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_STYLE,expStrokeSymbol);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_WIDTH,expStrokeWidth);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_OFFSET,expStrokeOffset);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_LINE_CAP,expStrokeLineCap);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_LINE_JOIN,expStrokeLineJoin);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_DASH_ARRAY,expStrokeDashArray);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_SYMBOL_GAP,expGap);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_SYMBOL_INITIAL_GAP,expInitialGap);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_SYMBOL_SIZE,expSymbolSize);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_SYMBOL_ANGLE,expSymbolRotation);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_SYMBOL_ANCHOR_POINT_H,expAnchorPointX);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_SYMBOL_ANCHOR_POINT_V,expAnchorPointY);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_SYMBOL_DISPLACEMENT_X,expDisplacementX);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_SYMBOL_DISPLACEMENT_Y,expDisplacementY);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_STROKE_COLOUR,expStrokeColour);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_STROKE_OPACITY,expStrokeOpacityColour);    GroupConfigInterface fillColourGroup=getGroup(GroupIdEnum.FILLCOLOUR);    if (fillColourGroup != null) {      fillColourGroup.enable(fillColourEnabled);    }    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_FILL_COLOUR,expFillColour);    fieldConfigVisitor.populateField(FieldIdEnum.STROKE_FILL_OPACITY,expFillColourOpacity);    GroupConfigInterface strokeColourGroup=getGroup(GroupIdEnum.STROKECOLOUR);    if (strokeColourGroup != null) {      strokeColourGroup.enable(strokeColourEnabled);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUnSummon_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201206,skillcaster,skilltarget,skillname);}  }
class C{  @Override public int compare(PhysicalTable table1,PhysicalTable table2){  return table1.getDimensions().size() - table2.getDimensions().size();}  }
class C{  public Builder addColumnInteger(String name,Integer minAllowedValue,Integer maxAllowedValue){  return addColumn(new IntegerMetaData(name,minAllowedValue,maxAllowedValue));}  }
class C{  public ISAdapterIterator makeEntriesIter(ITemplateHolder template,long SCNFilter,long leaseFilter,IServerTypeDesc[] subClasses) throws SAException {  return null;}  }
class C{  public FriendsGetMutualQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  private static List<SymbolTypeConfig> readSymbolizerConfig(Class<?> panelId,XMLPanelDetails xmlPanelDetails){  List<SymbolTypeConfig> configList=new ArrayList<SymbolTypeConfig>();  for (  XMLFieldConfigEnumValue value : xmlPanelDetails.getValue()) {    SymbolTypeConfig config=ReadPanelConfig.parseSymbolTypeConfig(SymbolTypeConfig.class,panelId,value);    configList.add(config);  }  return configList;}  }
class C{  public void encrypt(ByteBuffer buf){  final byte[] data=buf.array();  final int size=buf.remaining();  byte[] serverPacketKey=keys[SERVER];  int arrayIndex=buf.arrayOffset() + buf.position();  data[arrayIndex]^=(serverPacketKey[0] & 0xff);  int prev=data[arrayIndex++];  for (int i=1; i < size; i++, arrayIndex++) {    data[arrayIndex]^=(staticKey[i & 63] & 0xff) ^ (serverPacketKey[i & 7] & 0xff) ^ prev;    prev=data[arrayIndex];  }  long oldKey=(((long)serverPacketKey[0] & 0xff) << 0) | (((long)serverPacketKey[1] & 0xff) << 8) | (((long)serverPacketKey[2] & 0xff) << 16)| (((long)serverPacketKey[3] & 0xff) << 24)| (((long)serverPacketKey[4] & 0xff) << 32)| (((long)serverPacketKey[5] & 0xff) << 40)| (((long)serverPacketKey[6] & 0xff) << 48)| (((long)serverPacketKey[7] & 0xff) << 56);  oldKey+=size;  serverPacketKey[0]=(byte)(oldKey >> 0 & 0xff);  serverPacketKey[1]=(byte)(oldKey >> 8 & 0xff);  serverPacketKey[2]=(byte)(oldKey >> 16 & 0xff);  serverPacketKey[3]=(byte)(oldKey >> 24 & 0xff);  serverPacketKey[4]=(byte)(oldKey >> 32 & 0xff);  serverPacketKey[5]=(byte)(oldKey >> 40 & 0xff);  serverPacketKey[6]=(byte)(oldKey >> 48 & 0xff);  serverPacketKey[7]=(byte)(oldKey >> 56 & 0xff);}  }
class C{  public ApplicationType createModelFor(Application appl){  Jvm jvm=JvmFactory.getJVMFor(appl);  if (jvm.isBasicInfoSupported()) {    String mainClass=jvm.getMainClass();    if (mainClass != null) {      return createApplicationTypeFor(appl,jvm,mainClass);    }  }  return null;}  }
class C{  public List<GenericValue> makeWorkEfforts(){  List<GenericValue> allWorkEfforts=new LinkedList<GenericValue>();  for (  ShoppingCartItem item : cartLines) {    if ("RENTAL_ORDER_ITEM".equals(item.getItemType())) {      GenericValue workEffort=getDelegator().makeValue("WorkEffort");      workEffort.set("workEffortId",item.getOrderItemSeqId());      workEffort.set("estimatedStartDate",item.getReservStart());      workEffort.set("estimatedCompletionDate",item.getReservStart(item.getReservLength()));      workEffort.set("reservPersons",item.getReservPersons());      workEffort.set("reserv2ndPPPerc",item.getReserv2ndPPPerc());      workEffort.set("reservNthPPPerc",item.getReservNthPPPerc());      workEffort.set("accommodationMapId",item.getAccommodationMapId());      workEffort.set("accommodationSpotId",item.getAccommodationSpotId());      allWorkEfforts.add(workEffort);    }  }  return allWorkEfforts;}  }
class C{  private JsonElement internal_createNumberFormat(INumberFormat numberFormat){  JsonObject jsonSymbol=null;  if (numberFormat != null) {    EsriNumberFormatInterface numberFormatConverter=data.getNumberFormat(numberFormat.getClass());    if (numberFormatConverter != null) {      jsonSymbol=numberFormatConverter.convert(numberFormat);    } else {      System.err.println("Unsupported number format : " + numberFormat.getClass().getName());    }  }  return jsonSymbol;}  }
class C{  public static void shutdown(){  if (currentState != STATE_RUNNING)   throw new IllegalStateException("MARY system is not running");  currentState=STATE_SHUTTING_DOWN;  Log.i(LOG,"Shutting down modules...");  for (  MaryModule m : ModuleRegistry.getAllModules()) {    if (m.getState() == MaryModule.MODULE_RUNNING)     m.shutdown();  }  if (MaryCache.haveCache()) {    MaryCache cache=MaryCache.getCache();    try {      cache.shutdown();    } catch (    SQLException e) {      Log.v(LOG,"Cannot shutdown cache: ",e);    }  }  Log.i(LOG,"Shutdown complete.");  currentState=STATE_OFF;}  }
class C{  public void validate() throws ConfigurationException {  if (address == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"address\" must not be null");  }  address.validate();}  }
class C{  public static String computeSortText(CompletionProposal proposal){  final int baseRelevance=proposal.getRelevance() * 16;switch (proposal.getKind()) {case CompletionProposal.LABEL_REF:    return convertRelevance(baseRelevance + 1);case CompletionProposal.KEYWORD:  return convertRelevance(baseRelevance + 2);case CompletionProposal.TYPE_REF:case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:return convertRelevance(baseRelevance + 3);case CompletionProposal.METHOD_REF:case CompletionProposal.CONSTRUCTOR_INVOCATION:case CompletionProposal.METHOD_NAME_REFERENCE:case CompletionProposal.METHOD_DECLARATION:case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:case CompletionProposal.POTENTIAL_METHOD_DECLARATION:return convertRelevance(baseRelevance + 4);case CompletionProposal.FIELD_REF:return convertRelevance(baseRelevance + 5);case CompletionProposal.LOCAL_VARIABLE_REF:case CompletionProposal.VARIABLE_DECLARATION:return convertRelevance(baseRelevance + 6);case CompletionProposal.PACKAGE_REF:default :return convertRelevance(baseRelevance);}}  }
class C{  public DisplayUtils(Context context){  dpi=context.getResources().getDisplayMetrics().densityDpi;}  }
class C{  private void createSingleStyleLegend(Map<String,Style> styleMap,StyledLayer selectedStyledLayer,Style selectedStyle){  List<Style> styleList=null;  if (selectedStyledLayer instanceof NamedLayerImpl) {    NamedLayerImpl namedLayer=(NamedLayerImpl)selectedStyledLayer;    styleList=namedLayer.styles();  } else   if (selectedStyledLayer instanceof UserLayerImpl) {    UserLayerImpl userLayer=(UserLayerImpl)selectedStyledLayer;    styleList=userLayer.userStyles();  }  String styleName;  if (selectedStyle.getName() != null) {    styleName=selectedStyle.getName();  } else {    styleName=String.format("Style %d",styleList.indexOf(selectedStyle));  }  styleMap.put(styleName,selectedStyle);}  }
class C{  public static boolean parseBooleanTag(String tag,String s){  return parseBooleanTag(tag,s,false);}  }
class C{  public static String toXml(Object obj){  return xstream.toXML(obj);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200309,skillname);}  }
class C{  public FileWriterWithEncoding(File file,CharsetEncoder encoding,boolean append) throws IOException {  super();  this.out=initWriter(file,encoding,append);}  }
class C{  public UsersSearchQuery schoolClass(Integer value){  return unsafeParam("school_class",value);}  }
class C{  @Override protected Object fetchRelatedObject(RegistryEntry entry,Serializable relationId,RepositoryMethodParameterProvider parameterProvider,QueryAdapter queryAdapter){  String uid=getUID(entry,relationId);  Object relatedResource=resourceMap.get(uid);  if (relatedResource != null) {    return relatedResource;  } else {    return null;  }}  }
class C{  public FieldVector3D<T> add(final T factor,final FieldVector3D<T> v){  return new FieldVector3D<T>(x.getField().getOne(),this,factor,v);}  }
class C{  public String prototype(cp_info constant_pool[]){  String access, rt, name, params;  Code_attribute c=locate_code_attribute();  access=ClassFile.access_string(access_flags," ");  rt=ClassFile.parseMethodDesc_return(cp_info.getTypeDescr(constant_pool,descriptor_index));  name=toName(constant_pool);  params=ClassFile.parseMethodDesc_params(cp_info.getTypeDescr(constant_pool,descriptor_index));  if (access.length() > 0)   return access + " " + rt+ " "+ name+ "("+ params+ ")";  return rt + " " + name+ "("+ params+ ")";}  }
class C{  static String encode(ByteBufferRange range){  String start=Hex.encodeHexString(toArray(range.getStart()));  String end=Hex.encodeHexString(toArray(range.getEnd()));  int prefix=getCommonPrefixLength(start,end);  return start.substring(0,prefix) + ':' + start.substring(prefix)+ '-'+ end.substring(prefix);}  }
class C{  public static void main(String[] args) throws MalformedURLException {  String master="local[*]";  String inputFileName="";  String outputFileName="";  String url="";  Options options=new Options();  options.addOption("m",true,"master");  options.addOption("i",true,"input file name)");  options.addOption("o",true,"output file name");  options.addOption("u",true,"input URL");  options.addOption("v",false,"verbose");  options.addOption("s",false,"whitespace classification");  CommandLineParser parser=new PosixParser();  CommandLine cm;  try {    cm=parser.parse(options,args);    if (cm.hasOption("m")) {      master=cm.getOptionValue("m");    }    String dataFolder="/export/dat/tok";    Tokenizer tokenizer=null;    if (cm.hasOption("s")) {      tokenizer=new Tokenizer(master,dataFolder + "/lexicon.xml",dataFolder + "/regexp.txt",dataFolder + "/whitespace.model",true);    } else {      tokenizer=new Tokenizer(master,dataFolder + "/lexicon.xml",dataFolder + "/regexp.txt",dataFolder + "/syllables2M.arpa");    }    if (cm.hasOption("v")) {      tokenizer.setVerbose(true);    }    if (cm.hasOption("i")) {      inputFileName=cm.getOptionValue("i");    }    if (cm.hasOption("u")) {      url=cm.getOptionValue("u");    }    if (inputFileName.length() == 0 && url.length() == 0) {      System.err.println("Either an input file or an URL must be provided!");      System.exit(1);    } else     if (inputFileName.length() > 0) {      if (cm.hasOption("o")) {        outputFileName=cm.getOptionValue("o");        tokenizer.tokenize(inputFileName,outputFileName);      } else {        try {          PrintWriter writer=new PrintWriter(new OutputStreamWriter(System.out,"UTF-8"));          tokenizer.tokenize(inputFileName,writer);        } catch (        UnsupportedEncodingException e) {          e.printStackTrace();        }      }    } else {      try {        PrintWriter writer=null;        if (cm.hasOption("o")) {          outputFileName=cm.getOptionValue("o");          writer=new PrintWriter(new OutputStreamWriter(new FileOutputStream(outputFileName),"UTF-8"));          tokenizer.tokenize(new URL(url),writer);          writer.close();        } else {          writer=new PrintWriter(new OutputStreamWriter(System.out,"UTF-8"));          tokenizer.tokenize(new URL(url),writer);        }      } catch (      UnsupportedEncodingException|FileNotFoundException e) {        e.printStackTrace();      }    }  } catch (  ParseException e) {    e.printStackTrace();  }  System.out.println("Done.");}  }
class C{  public boolean hasError(){  return error;}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public void afterTransactionSynchronization(TransactionData transactionData){}  }
class C{  public XML11NonValidatingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(parentSettings);  fComponents=new ArrayList();  fXML11Components=new ArrayList();  fCommonComponents=new ArrayList();  fRecognizedFeatures=new ArrayList();  fRecognizedProperties=new ArrayList();  fFeatures=new HashMap();  fProperties=new HashMap();  final String[] recognizedFeatures={CONTINUE_AFTER_FATAL_ERROR,VALIDATION,NAMESPACES,EXTERNAL_GENERAL_ENTITIES,EXTERNAL_PARAMETER_ENTITIES,PARSER_SETTINGS};  addRecognizedFeatures(recognizedFeatures);  fFeatures.put(VALIDATION,Boolean.FALSE);  fFeatures.put(NAMESPACES,Boolean.TRUE);  fFeatures.put(EXTERNAL_GENERAL_ENTITIES,Boolean.TRUE);  fFeatures.put(EXTERNAL_PARAMETER_ENTITIES,Boolean.TRUE);  fFeatures.put(CONTINUE_AFTER_FATAL_ERROR,Boolean.FALSE);  fFeatures.put(PARSER_SETTINGS,Boolean.TRUE);  final String[] recognizedProperties={XML_STRING,SYMBOL_TABLE,ERROR_HANDLER,ENTITY_RESOLVER,ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_VALIDATOR,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,XML_STRING,XMLGRAMMAR_POOL};  addRecognizedProperties(recognizedProperties);  if (symbolTable == null) {    symbolTable=new SymbolTable();  }  fSymbolTable=symbolTable;  fProperties.put(SYMBOL_TABLE,fSymbolTable);  fGrammarPool=grammarPool;  if (fGrammarPool != null) {    fProperties.put(XMLGRAMMAR_POOL,fGrammarPool);  }  fEntityManager=new XMLEntityManager();  fProperties.put(ENTITY_MANAGER,fEntityManager);  addCommonComponent(fEntityManager);  fErrorReporter=new XMLErrorReporter();  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());  fProperties.put(ERROR_REPORTER,fErrorReporter);  addCommonComponent(fErrorReporter);  fNamespaceScanner=new XMLNSDocumentScannerImpl();  fProperties.put(DOCUMENT_SCANNER,fNamespaceScanner);  addComponent(fNamespaceScanner);  fDTDScanner=new XMLDTDScannerImpl();  fProperties.put(DTD_SCANNER,fDTDScanner);  addComponent((XMLComponent)fDTDScanner);  fDatatypeValidatorFactory=DTDDVFactory.getInstance();  fProperties.put(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);  fValidationManager=new ValidationManager();  fProperties.put(VALIDATION_MANAGER,fValidationManager);  fVersionDetector=new XMLVersionDetector();  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {    XMLMessageFormatter xmft=new XMLMessageFormatter();    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);  }  try {    setLocale(Locale.getDefault());  } catch (  XNIException e) {  }  fConfigUpdated=false;}  }
class C{  public boolean use_original_names(){  return soot.PhaseOptions.getBoolean(options,"use-original-names");}  }
class C{  public static void i(String tag,String s,Throwable e){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,s,e);}  }
class C{  public synchronized void showGlobalTrace(){  acquireExclusiveAccess();  try {    if (_traceLoggingLevel == OFF_VALUE && !_hasAssociatedLogOn)     return;    _logger.log(Level.INFO,"Trace Global Start [" + _traceLength + "]");    sortTrace(_globalTrace);    for (    LogRecord record : _globalTrace)     traceLogRecord(record);    if (_associatedLoggers != null) {      for (      String associatedLogName : _associatedLoggers)       TraceableLogger.getLogger(associatedLogName).showGlobalTrace();    }    _logger.log(Level.INFO,"Trace Global End [" + _traceLength + "]");  }  finally {    releaseExclusiveAccess();  }}  }
class C{  public boolean drawGroup(@NotNull Graphics2D gc,@NotNull ScreenView screenView,@NotNull NlComponent component){  return false;}  }
class C{  private void onProcessUp(final Long processId,final Timestamp pTimestamp,final String pMessage){  if (LOGGER.isDebugEnabled()) {    StringBuffer str=new StringBuffer("onProcessUp(");    str.append("Process with Id " + processId);    str.append(", ");    str.append(pTimestamp);    str.append(") called.");    LOGGER.debug(str.toString());  }  processFacade.resume(processId,pTimestamp,pMessage);  final Process process=processCache.getCopy(processId);  Long stateTagId=process.getStateTagId();  controlTagCache.acquireWriteLockOnKey(stateTagId);  try {    ControlTag stateTag=controlTagCache.get(stateTagId);    if (stateTag.getValue() == null || !stateTag.getValue().equals(SupervisionStatus.RUNNING.toString()) || !stateTag.isValid()) {      if (process.getLocalConfig() != null && process.getLocalConfig().equals(LocalConfig.Y)) {        LOGGER.debug("onProcessUp(): Process is running on a local configuration, setting status to RUNNING_LOCAL");        controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.RUNNING_LOCAL.toString(),pMessage,pTimestamp);      } else       if (stateTag.getValue() == null || !stateTag.getValue().equals(SupervisionStatus.RUNNING.toString())) {        controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.RUNNING.toString(),pMessage,pTimestamp);      }    }  } catch (  CacheElementNotFoundException controlCacheEx) {    LOGGER.error("Unable to locate state tag in cache (id is " + stateTagId + ")",controlCacheEx);  } finally {    controlTagCache.releaseWriteLockOnKey(stateTagId);  }}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public void addHandlerSideQuestDrop(int questId,int npcId,int itemId,int amount,int chance){  HandlerSideDrop hsd=new HandlerSideDrop(questId,npcId,itemId,amount,chance);  QuestService.addQuestDrop(hsd.getNpcId(),hsd);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/nestedSubProcess.bpmn20.xml","org/activiti/engine/test/api/runtime/subProcess.bpmn20.xml"}) public void testSubProcessInstanceEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("nestedSimpleSubProcess");  assertNotNull(processInstance);  String processDefinitionId=processInstance.getProcessDefinitionId();  assertEquals(11,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);  ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertEquals(processInstance.getId(),((ProcessInstance)event.getEntity()).getId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processDefinitionId,event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  String processExecutionId=event.getExecutionId();  assertEquals(ActivitiEventType.PROCESS_CREATED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),processExecutionId);  assertEquals(processDefinitionId,event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);  processExecutionId=event.getExecutionId();  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),processExecutionId);  assertEquals(processDefinitionId,event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(3);  processExecutionId=event.getExecutionId();  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNotEquals(processInstance.getId(),processExecutionId);  assertEquals(processDefinitionId,event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(4);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNotEquals(processInstance.getId(),((ExecutionEntity)event.getEntity()).getId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(5);  assertEquals(ActivitiEventType.PROCESS_STARTED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertTrue(event instanceof ActivitiProcessStartedEvent);  assertNull(((ActivitiProcessStartedEvent)event).getNestedProcessDefinitionId());  assertNull(((ActivitiProcessStartedEvent)event).getNestedProcessInstanceId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(6);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  ExecutionEntity subProcessEntity=(ExecutionEntity)event.getEntity();  assertEquals(processExecutionId,subProcessEntity.getSuperExecutionId());  String subProcessInstanceId=subProcessEntity.getProcessInstanceId();  event=(ActivitiEntityEvent)listener.getEventsReceived().get(7);  assertEquals(ActivitiEventType.PROCESS_CREATED,event.getType());  subProcessEntity=(ExecutionEntity)event.getEntity();  assertEquals(processExecutionId,subProcessEntity.getSuperExecutionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(8);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertEquals(subProcessInstanceId,event.getProcessInstanceId());  assertNotEquals(subProcessInstanceId,event.getExecutionId());  String subProcessDefinitionId=((ExecutionEntity)event.getEntity()).getProcessDefinitionId();  assertNotNull(subProcessDefinitionId);  ProcessDefinition subProcessDefinition=repositoryService.getProcessDefinition(subProcessDefinitionId);  assertEquals("simpleSubProcess",subProcessDefinition.getKey());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(9);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  assertEquals(subProcessInstanceId,event.getProcessInstanceId());  assertNotEquals(subProcessInstanceId,event.getExecutionId());  subProcessDefinitionId=((ExecutionEntity)event.getEntity()).getProcessDefinitionId();  assertNotNull(subProcessDefinitionId);  event=(ActivitiEntityEvent)listener.getEventsReceived().get(10);  assertEquals(ActivitiEventType.PROCESS_STARTED,event.getType());  assertEquals(subProcessInstanceId,event.getProcessInstanceId());  assertEquals(subProcessDefinitionId,event.getProcessDefinitionId());  assertTrue(event instanceof ActivitiProcessStartedEvent);  assertEquals(processDefinitionId,((ActivitiProcessStartedEvent)event).getNestedProcessDefinitionId());  assertEquals(processInstance.getId(),((ActivitiProcessStartedEvent)event).getNestedProcessInstanceId());  listener.clearEventsReceived();}  }
class C{  public static <T>T make(Class<T> shieldClass,RxJava1Hub rxJava1Hub){  return inst.make(shieldClass,rxJava1Hub,RxJava1Hub.class);}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  private void removeProcessControlTags(Process process,ConfigurationElementReport processReport){  LOGGER.debug("Removing Process control tags for process " + process.getId());  Long aliveTagId=process.getAliveTagId();  if (aliveTagId != null) {    ConfigurationElementReport tagReport=new ConfigurationElementReport(Action.REMOVE,Entity.CONTROLTAG,aliveTagId);    processReport.addSubReport(tagReport);    controlTagConfigHandler.removeControlTag(aliveTagId,tagReport);  }  Long stateTagId=process.getStateTagId();  ConfigurationElementReport tagReport=new ConfigurationElementReport(Action.REMOVE,Entity.CONTROLTAG,stateTagId);  processReport.addSubReport(tagReport);  controlTagConfigHandler.removeControlTag(stateTagId,tagReport);}  }
class C{  private static <T>Type<T> intern(final Class<T> rawType,final java.lang.reflect.Type[] typeArguments,final Set<java.lang.reflect.Type> recursiveBounds){  Type<?>[] convertedArguments=TypeUtil.convertTypeArguments(rawType,typeArguments,recursiveBounds);  TypeKey key=TypeKey.valueOf(rawType,convertedArguments);  WeakReference<Type<?>> mapped=typeCache.get(key);  Type<T> typeResult=null;  if (mapped != null) {    typeResult=(Type<T>)mapped.get();  }  if (typeResult == null) {synchronized (rawType) {      mapped=typeCache.get(key);      if (mapped != null) {        typeResult=(Type<T>)mapped.get();      }      if (typeResult == null) {        typeResult=createType(key,rawType,convertedArguments);        mapped=new WeakReference<Type<?>>(typeResult);        WeakReference<Type<?>> existing=typeCache.putIfAbsent(key,mapped);        if (existing != null) {          if (existing.get() == null) {            typeCache.put(key,mapped);          } else {            mapped=existing;            typeResult=(Type<T>)mapped.get();          }        }      }    }  }  return typeResult;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  @Override public void endExternalSubset(Augmentations augmentations) throws XNIException {}  }
class C{  @Override public boolean onBackPressed(){  return getActiveLayout() != null && getActiveLayout().onBackPressed();}  }
class C{  public boolean handleRequest(ZWaveController zController,SerialMessage lastSentMessage,SerialMessage incomingMessage) throws ZWaveSerialMessageException {  logger.warn("TODO: {} unsupported REQUEST.",incomingMessage.getMessageClass().getLabel());  return false;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  HTMLCollectionImpl(HTMLElement topLevel,short lookingFor){  if (topLevel == null)   throw new NullPointerException("HTM011 Argument 'topLevel' is null.");  _topLevel=topLevel;  _lookingFor=lookingFor;}  }
class C{  private int read(int bytesToRead,int offset) throws IOException {  int nBytesRead=0;  int nBytesTotalRead=0;  if (inputBuffer.length < bytesToRead + offset)   inputBuffer=new byte[bytesToRead + offset];  while (nBytesRead != -1 && bytesToRead > 0) {    nBytesRead=in.read(inputBuffer,offset + nBytesTotalRead,bytesToRead);    if (nBytesRead != -1) {      bytesToRead-=nBytesRead;      nBytesTotalRead+=nBytesRead;    }  }  if (nBytesRead == -1)   endOfFile=true;  return nBytesTotalRead;}  }
class C{  private void removeResourcePoolElasticity(ElasticPlacementZoneState epz,Consumer<Throwable> callback){  List<Object> propertiesToRemove=new ArrayList<>();  propertiesToRemove.add(ResourcePoolProperty.ELASTIC);  Map<String,Collection<Object>> itemsToRemove=new HashMap<>();  itemsToRemove.put(ResourcePoolState.FIELD_NAME_PROPERTIES,propertiesToRemove);  ResourcePoolState patchRpState=new ResourcePoolState();  patchRpState.properties=EnumSet.noneOf(ResourcePoolProperty.class);  sendRequest(Operation.createPatch(getHost(),epz.resourcePoolLink).setBody(ServiceStateCollectionUpdateRequest.create(null,itemsToRemove)).setCompletion(null));}  }
class C{  protected CreateSimpleLexer sourceDecorator(Map<String,Object> options) throws Exception {  List<List<Object>> shortcutStylePatterns=new ArrayList<List<Object>>();  List<List<Object>> fallthroughStylePatterns=new ArrayList<List<Object>>();  if (Util.getVariableValueAsBoolean(options.get("tripleQuotedStrings"))) {    shortcutStylePatterns.add(Arrays.asList(new Object[]{PR_STRING,Pattern.compile("^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))"),null,"'\""}));  } else   if (Util.getVariableValueAsBoolean(options.get("multiLineStrings"))) {    shortcutStylePatterns.add(Arrays.asList(new Object[]{PR_STRING,Pattern.compile("^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))"),null,"'\"`"}));  } else {    shortcutStylePatterns.add(Arrays.asList(new Object[]{PR_STRING,Pattern.compile("^(?:\\'(?:[^\\\\\\'\r\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\r\n]|\\\\.)*(?:\\\"|$))"),null,"\"'"}));  }  if (Util.getVariableValueAsBoolean(options.get("verbatimStrings"))) {    fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_STRING,Pattern.compile("^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)"),null}));  }  Object hc=options.get("hashComments");  if (Util.getVariableValueAsBoolean(hc)) {    if (Util.getVariableValueAsBoolean(options.get("cStyleComments"))) {      if ((hc instanceof Integer) && (Integer)hc > 1) {        shortcutStylePatterns.add(Arrays.asList(new Object[]{PR_COMMENT,Pattern.compile("^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)"),null,"#"}));      } else {        shortcutStylePatterns.add(Arrays.asList(new Object[]{PR_COMMENT,Pattern.compile("^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\r\n]*)"),null,"#"}));      }      fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_STRING,Pattern.compile("^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>"),null}));    } else {      shortcutStylePatterns.add(Arrays.asList(new Object[]{PR_COMMENT,Pattern.compile("^#[^\r\n]*"),null,"#"}));    }  }  if (Util.getVariableValueAsBoolean(options.get("cStyleComments"))) {    fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_COMMENT,Pattern.compile("^\\/\\/[^\r\n]*"),null}));    fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_COMMENT,Pattern.compile("^\\/\\*[\\s\\S]*?(?:\\*\\/|$)"),null}));  }  Object regexLiterals=options.get("regexLiterals");  if (Util.getVariableValueAsBoolean(regexLiterals)) {    String regexExcls=Util.getVariableValueAsInteger(regexLiterals) > 1 ? "" : "\n\r";    String regexAny=!regexExcls.isEmpty() ? "." : "[\\S\\s]";    String REGEX_LITERAL="/(?=[^/*" + regexExcls + "])"+ "(?:[^/\\x5B\\x5C"+ regexExcls+ "]"+ "|\\x5C"+ regexAny+ "|\\x5B(?:[^\\x5C\\x5D"+ regexExcls+ "]"+ "|\\x5C"+ regexAny+ ")*(?:\\x5D|$))+"+ "/";    fallthroughStylePatterns.add(Arrays.asList(new Object[]{"lang-regex",Pattern.compile("^" + REGEXP_PRECEDER_PATTERN + "("+ REGEX_LITERAL+ ")")}));  }  Pattern types=(Pattern)options.get("types");  if (Util.getVariableValueAsBoolean(types)) {    fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_TYPE,types}));  }  String keywords=(String)options.get("keywords");  if (keywords != null) {    keywords=keywords.replaceAll("^ | $","");    if (keywords.length() != 0) {      fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_KEYWORD,Pattern.compile("^(?:" + keywords.replaceAll("[\\s,]+","|") + ")\\b"),null}));    }  }  shortcutStylePatterns.add(Arrays.asList(new Object[]{PR_PLAIN,Pattern.compile("^\\s+"),null," \r\n\t" + Character.toString((char)0xA0)}));  fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_LITERAL,Pattern.compile("^@[a-z_$][a-z_$@0-9]*",Pattern.CASE_INSENSITIVE),null}));  fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_TYPE,Pattern.compile("^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)"),null}));  fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_PLAIN,Pattern.compile("^[a-z_$][a-z_$@0-9]*",Pattern.CASE_INSENSITIVE),null}));  fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_LITERAL,Pattern.compile("^(?:" + "0x[a-f0-9]+" + "|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)"+ "(?:e[+\\-]?\\d+)?" + ')' + "[a-z]*",Pattern.CASE_INSENSITIVE),null,"0123456789"}));  fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_PLAIN,Pattern.compile("^\\\\[\\s\\S]?"),null}));  String punctuation="^.[^\\s\\w.$@'\"`/\\\\]*";  if (Util.getVariableValueAsBoolean(options.get("regexLiterals"))) {    punctuation+="(?!\\s*/)";  }  fallthroughStylePatterns.add(Arrays.asList(new Object[]{PR_PUNCTUATION,Pattern.compile(punctuation),null}));  return new CreateSimpleLexer(shortcutStylePatterns,fallthroughStylePatterns);}  }
class C{  Map<String,List<ChartObject>> loadContentByFilterType(Optional<UserFilter> userFilter,String projectName,ContentOptions contentOptions){  Map<String,List<ChartObject>> content;  if (userFilter.isPresent() && Log.class.equals(userFilter.get().getFilter().getTarget())) {    content=new HashMap<>();  } else {    BuildFilterStrategy filterStrategy=buildFilterStrategy.get(GadgetTypes.findByName(contentOptions.getGadgetType()).get());    expect(filterStrategy,notNull()).verify(UNABLE_LOAD_WIDGET_CONTENT,Suppliers.formattedSupplier("Unknown gadget type: '{}'.",contentOptions.getGadgetType()));    content=filterStrategy.buildFilterAndLoadContent(userFilter.orElse(null),contentOptions,projectName);  }  return content;}  }
class C{  public final <T>T make(Class<T> shieldClass,H rHub,Class<H> rHubClass){  Constructor<T> constructor=getShieldImpl(shieldClass,rHubClass);  if (constructor == null) {    throw new RuntimeException("Unable to find implementation for " + shieldClass);  }  try {    return constructor.newInstance(rHub);  } catch (  IllegalAccessException e) {    throw new RuntimeException("Unable to invoke " + constructor,e);  }catch (  InstantiationException e) {    throw new RuntimeException("Unable to invoke " + constructor,e);  }catch (  InvocationTargetException e) {    Throwable cause=e.getCause();    if (cause instanceof RuntimeException) {      throw (RuntimeException)cause;    }    if (cause instanceof Error) {      throw (Error)cause;    }    throw new RuntimeException("Unable to create shield instance.",cause);  }}  }
class C{  public LeaseRenewalEvent(Object source,Lease lease,long expiration,Throwable ex){  super(source);  this.lease=lease;  this.expiration=expiration;  this.ex=ex;}  }
class C{  public static boolean isAndroidSdkDirInLocalPropertiesFile(@NotNull File projectDir){  String androidHome=getAndroidHomeFromLocalPropertiesFile(projectDir);  if (!Strings.isNullOrEmpty(androidHome)) {    String msg=String.format("Found Android SDK home at '%1$s' (from local.properties file)",androidHome);    LOG.info(msg);    return true;  }  return false;}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  public void addWorking(boolean working){  query.append(" +working:" + working);}  }
class C{  public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.white_radius,R.drawable.white_radius);}  }
class C{  public static CertChainKeyPair generateSignedForClient(String fqdn,X509Certificate issuerCertificate,PrivateKey issuerPrivateKey){  try {    return generateCertificateAndSign(fqdn,issuerCertificate,issuerPrivateKey,getClientExtensions());  } catch (  CertIOException|CertificateException|OperatorCreationException e) {    throw new RuntimeException(String.format("Failed to generate client certificate, reason: %s",e.getMessage()),e);  }}  }
class C{  @TargetApi(Build.VERSION_CODES.M) public static boolean hasPermission(Activity activity,String[] permissions){  for (  String permission : permissions) {    if (activity.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  public static double adjustedrSquared(double rSquared,int numRegressors,int numDataPoints){  double divide=(numDataPoints - 1.0) / (numDataPoints - numRegressors - 1.0);  double rSquaredDiff=1 - rSquared;  return 1 - (rSquaredDiff * divide);}  }
class C{  public static boolean isMasterCard(String cc){  int firstdig=Integer.parseInt(cc.substring(0,1));  int seconddig=Integer.parseInt(cc.substring(1,2));  if ((cc.length() == 16) && (firstdig == 5) && ((seconddig >= 1) && (seconddig <= 5)))   return isCreditCard(cc);  return false;}  }
class C{  public void clear(){  super.clear();  location=null;}  }
class C{  public static String readFileToString(File file,String encoding) throws IOException {  return readFileToString(file,Charsets.toCharset(encoding));}  }
class C{  public static String booleanToString(Boolean value){  return value.toString();}  }
class C{  public ResourcesPoet addStyle(String name,@Nullable String parentRef,@Nullable List<StyleItem> styleItems){  Element element=document.createElement("style");  element.setAttribute("name",name);  if (parentRef != null) {    element.setAttribute("parent",parentRef);  }  if (styleItems != null) {    for (    StyleItem item : styleItems) {      Element valueElement=document.createElement("item");      valueElement.setAttribute("name",item.name);      valueElement.appendChild(document.createTextNode(item.value));      element.appendChild(valueElement);    }  }  resourceElement.appendChild(element);  return this;}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> path(String path,ISpacePredicate predicate){  return new ValueGetterSpacePredicate<ServerEntry>(new SpaceEntryPathGetter(path),predicate);}  }
class C{  public boolean hasDataElement(DataElement dataElement){  for (  DataSet dataSet : dataSets) {    if (dataSet.getDataElements().contains(dataElement)) {      return true;    }  }  return false;}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_HEAL_MP_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201049,num0,skillname);}  }
class C{  public void parseFiles(final ProgressListener progress) throws IOException, CanceledException {  progress.setTasks("Generating RMA6 file","Parsing matches");  final HashMap<String,Long> read2PairedReadLocation;  if (pairedReads)   read2PairedReadLocation=new HashMap<>(1000000); else   read2PairedReadLocation=null;  final byte[] queryName=new byte[100000];  final Single<byte[]> fastAText=new Single<>(new byte[1000]);  final MatchLineRMA6[] matchLineRMA6s=new MatchLineRMA6[maxMatchesPerRead];  for (int i=0; i < matchLineRMA6s.length; i++) {    matchLineRMA6s[i]=new MatchLineRMA6(cNames.length,taxonMapperIndex);  }  final int[][] match2classification2id=new int[maxMatchesPerRead][cNames.length];  rma6FileCreator.startAddingQueries();  long totalNumberOfReads=0;  long totalNumberOfMatches=0;  for (int fileNumber=0; fileNumber < blastFiles.length; fileNumber++) {    int missingReadWarnings=0;    final String blastFile=blastFiles[fileNumber];    progress.setTasks("Parsing file:",Basic.getFileNameWithoutPath(blastFile));    System.err.println("Parsing file: " + blastFile);    final ISAMIterator iterator=IteratorManager.getIterator(blastFile,format,blastMode,maxMatchesPerRead);    progress.setProgress(0);    progress.setMaximum(iterator.getMaximumProgress());    final FileIterator fastaIterator;    final boolean isFasta;    if (readsFiles != null && readsFiles.length > fileNumber && Basic.fileExistsAndIsNonEmpty(readsFiles[fileNumber])) {      fastaIterator=new FileIterator(readsFiles[fileNumber]);      isFasta=(fastaIterator.peekNextByte() == '>');      if (!isFasta && (fastaIterator.peekNextByte() != '@'))       throw new IOException("Cannot determine type of reads file (doesn't start with '>' or '@': " + readsFiles[fileNumber]);    } else {      fastaIterator=null;      isFasta=false;    }    while (iterator.hasNext()) {      totalNumberOfReads++;      final int numberOfMatches=iterator.next();      totalNumberOfMatches+=numberOfMatches;      final byte[] matchesText=iterator.getMatchesText();      final int matchesTextLength=iterator.getMatchesTextLength();      final int queryNameLength=Basic.getFirstWord(matchesText,queryName);      Long mateLocation=null;      if (pairedReads) {        final String strippedName=Basic.toString(queryName,0,queryNameLength - pairedReadSuffixLength);        mateLocation=read2PairedReadLocation.get(strippedName);        if (mateLocation == null) {          read2PairedReadLocation.put(strippedName,rma6FileCreator.getPosition());        } else {          read2PairedReadLocation.remove(strippedName);        }      }      byte[] queryText=null;      int queryTextLength=0;      if (fastaIterator != null) {        if (Utilities.findQuery(queryName,queryNameLength,fastaIterator,isFasta)) {          queryTextLength=Utilities.getFastAText(fastaIterator,isFasta,fastAText);          queryText=fastAText.get();        } else {          if (missingReadWarnings++ < 50)           System.err.println("WARNING: Failed to find read '" + Basic.toString(queryName,0,queryNameLength) + "' in file: "+ readsFiles[fileNumber]);          if (missingReadWarnings == 50)           System.err.println("No further 'failed to find read' warnings...");        }      }      if (iterator.getQueryText() != null) {        queryText=iterator.getQueryText();        queryTextLength=iterator.getQueryText().length;      }      if (queryText == null) {        queryText=queryName;        queryTextLength=queryNameLength;      }      int offset=0;      for (int matchCount=0; matchCount < numberOfMatches; matchCount++) {        final String refName=Utilities.getToken(2,matchesText,offset);        final MatchLineRMA6 matchLineRMA6=matchLineRMA6s[matchCount];        matchLineRMA6.parse(matchesText,offset);        for (int i=0; i < parsers.length; i++) {          final int id=parsers[i].getIdFromHeaderLine(refName);          match2classification2id[matchCount][i]=id;          matchLineRMA6.setFId(i,id);        }        offset=Utilities.nextNewLine(matchesText,offset) + 1;      }      rma6FileCreator.addQuery(queryText,queryTextLength,numberOfMatches,matchesText,matchesTextLength,match2classification2id,mateLocation != null ? mateLocation : 0);      progress.setProgress(iterator.getProgress());    }  }  rma6FileCreator.endAddingQueries();  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();  System.err.println(String.format("Total reads:  %,16d",totalNumberOfReads));  System.err.println(String.format("Alignments:    %,15d",totalNumberOfMatches));  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();  rma6FileCreator.writeClassifications(null,null,null);  rma6FileCreator.writeAuxBlocks(null);  rma6FileCreator.close();  if (pairedReads) {    long count=0;    if (progress instanceof ProgressPercentage)     ((ProgressPercentage)progress).reportTaskCompleted();    try (InputOutputReaderWriter raf=new InputOutputReaderWriter(rma6File,"rw");IReadBlockIterator it=(new RMA6Connector(rma6File)).getAllReadsIterator(0,1000,false,false)){      progress.setSubtask("Linking paired reads");      progress.setProgress(0);      progress.setProgress(it.getMaximumProgress());      while (it.hasNext()) {        final IReadBlock readBlock=it.next();        if (readBlock.getMateUId() > 0) {          if (readBlock.getMateUId() > readBlock.getUId())           throw new IOException("Mate uid=" + readBlock.getMateUId() + ": too big");          raf.seek(readBlock.getMateUId());          raf.writeLong(readBlock.getUId());          count++;        }        progress.setProgress(it.getProgress());      }      System.err.println(String.format("Number of pairs:%,14d",count));    }   }  doc.processReadHits();  final String sampleName=Basic.replaceFileSuffix(Basic.getFileNameWithoutPath(rma6File),"");  SyncArchiveAndDataTable.syncRecomputedArchive2Summary(sampleName,"LCA",doc.getBlastMode(),doc.getParameterString(),new RMA6Connector(rma6File),doc.getDataTable(),0);  doc.saveAuxiliaryData();}  }
class C{  public ProtocolException(String s,Throwable ex){  super(s,ex);  if (ex == null)   throw new IllegalArgumentException("The cause object can't be null.");}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public NumericLiteral fullCopy(){  NumericLiteral tree=(NumericLiteral)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public EditResultObject(){  this.key=Mysplash.getInstance().getCollection();}  }
class C{  public VideoRemoveTagQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public Bundler putAll(Bundle bundle){  this.bundle.putAll(bundle);  return this;}  }
class C{  public SoftReferenceSymbolTable(int initialCapacity,float loadFactor){  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  }  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException("Illegal Load: " + loadFactor);  }  if (initialCapacity == 0) {    initialCapacity=1;  }  fLoadFactor=loadFactor;  fTableSize=initialCapacity;  fBuckets=new SREntry[fTableSize];  fThreshold=(int)(fTableSize * loadFactor);  fCount=0;  fReferenceQueue=new ReferenceQueue();}  }
class C{  public boolean findPrevious(String regularExpression){  return findAndUncollapseNext(regularExpression,true,false) > 0;}  }
class C{  public void increment(final double[] data) throws MathIllegalArgumentException {  int length=data.length;  MathUtils.checkDimension(length,dimension);  for (int i=0; i < length; i++) {    for (int j=i; j < length; j++) {      getElement(i,j).increment(data[i],data[j]);    }  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", userId=").append(userId);  sb.append(", menuId=").append(menuId);  sb.append(", permission=").append(permission);  sb.append("]");  return sb.toString();}  }
class C{  protected DominatorNode<N> fetchDode(N gode){  DominatorNode<N> dode;  if (godeToDode.containsKey(gode)) {    dode=godeToDode.get(gode);  } else {    dode=new DominatorNode(gode);    godeToDode.put(gode,dode);  }  return dode;}  }
class C{  public static String urlEncodePostalAddress(GenericValue postalAddress) throws GenericEntityException, UnsupportedEncodingException {  Assert.notNull("postalAddress",postalAddress);  if (!"PostalAddress".equals(postalAddress.getEntityName())) {    throw new IllegalArgumentException("postalAddress argument is not a PostalAddress entity");  }  StringBuilder sb=new StringBuilder();  if (postalAddress.get("address1") != null) {    sb.append(postalAddress.get("address1"));  }  if (postalAddress.get("address2") != null) {    sb.append(", ").append(postalAddress.get("address2"));  }  if (postalAddress.get("city") != null) {    sb.append(", ").append(postalAddress.get("city"));  }  if (postalAddress.get("stateProvinceGeoId") != null) {    GenericValue geoValue=postalAddress.getRelatedOne("StateProvinceGeo",false);    if (geoValue != null) {      sb.append(", ").append(geoValue.get("geoName"));    }  } else   if (postalAddress.get("countyGeoId") != null) {    GenericValue geoValue=postalAddress.getRelatedOne("CountyGeo",false);    if (geoValue != null) {      sb.append(", ").append(geoValue.get("geoName"));    }  }  if (postalAddress.get("postalCode") != null) {    sb.append(", ").append(postalAddress.get("postalCode"));  }  if (postalAddress.get("countryGeoId") != null) {    GenericValue geoValue=postalAddress.getRelatedOne("CountryGeo",false);    if (geoValue != null) {      sb.append(", ").append(geoValue.get("geoName"));    }  }  String postalAddressString=sb.toString().trim();  while (postalAddressString.contains("  ")) {    postalAddressString=postalAddressString.replace("  "," ");  }  return URLEncoder.encode(postalAddressString,"UTF-8");}  }
class C{  public void updateClassifications(String[] names,List<UpdateItem> updateItemList,ProgressListener progressListener) throws IOException, CanceledException {  UpdateItemList updateItems=(UpdateItemList)updateItemList;  final int numClassifications=names.length;  long maxProgress=0;  for (int i=0; i < numClassifications; i++) {    maxProgress+=updateItems.getClassIds(i).size();  }  progressListener.setMaximum(maxProgress);  final RMA2Modifier rma2Modifier=new RMA2Modifier(file);  for (int i=0; i < numClassifications; i++) {    rma2Modifier.startClassificationSection(names[i]);    try {      for (      Integer classId : updateItems.getClassIds(i)) {        int weightedSize=updateItems.getSize(i,classId);        final List<Long> positions=new ArrayList<>();        if (weightedSize > 0) {          for (UpdateItem item=updateItems.getFirst(i,classId); item != null; item=updateItems.getUpdateItem(item.getNextInClassification(i))) {            positions.add(item.getReadUId());          }        }        rma2Modifier.addToClassification(classId,weightedSize,positions);        progressListener.incrementProgress();      }    }  finally {      rma2Modifier.finishClassificationSection();    }  }  rma2Modifier.close();}  }
class C{  public IMethod findOverriddenMethodInHierarchy(IType type,IMethod overriding) throws JavaModelException {  IMethod method=findOverriddenMethodInType(type,overriding);  if (method != null) {    return method;  }  IType superClass=fHierarchy.getSuperclass(type);  if (superClass != null) {    IMethod res=findOverriddenMethodInHierarchy(superClass,overriding);    if (res != null) {      return res;    }  }  IType[] superInterfaces=fHierarchy.getSuperInterfaces(type);  for (int i=0; i < superInterfaces.length; i++) {    IMethod res=findOverriddenMethodInHierarchy(superInterfaces[i],overriding);    if (res != null) {      return res;    }  }  return method;}  }
class C{  public WordCloudDrawer createInstance(){  final WordCloudDrawer drawer=new WordCloudDrawer();  drawer.setViewer(viewer);  drawer.setChartData(new DefaultChartData());  drawer.setClass2HigherClassMapper(class2HigherClassMapper);  drawer.setSeriesLabelGetter(seriesLabelGetter);  drawer.setExecutorService(executorService);  return drawer;}  }
class C{  public boolean add_color_tags(){  return soot.PhaseOptions.getBoolean(options,"add-color-tags");}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowBiPlot();}  }
class C{  public ScrollPaneAdjuster(JScrollPane scrollPane,Point centerDC){  Rectangle viewRect=scrollPane.getViewport().getViewRect();  scrollBarX=scrollPane.getHorizontalScrollBar();  scrollBarY=scrollPane.getVerticalScrollBar();  if (centerDC == null) {    xPortionOfVisible=0.5;    yPortionOfVisible=0.5;  } else {    xPortionOfVisible=(centerDC.x - viewRect.x) / (double)viewRect.width;    yPortionOfVisible=(centerDC.y - viewRect.y) / (double)viewRect.height;  }  xFactor=(scrollBarX.getValue() + xPortionOfVisible * scrollBarX.getVisibleAmount()) / (scrollBarX.getMaximum() - scrollBarX.getMinimum());  yFactor=(scrollBarY.getValue() + yPortionOfVisible * scrollBarY.getVisibleAmount()) / (scrollBarY.getMaximum() - scrollBarY.getMinimum());}  }
class C{  public boolean add(JobStatus jobStatus){  boolean replaced=mJobSet.remove(jobStatus);  mJobSet.add(jobStatus);  if (jobStatus.isPersisted()) {    maybeWriteStatusToDiskAsync();  }  if (DEBUG) {  }  return replaced;}  }
class C{  public void close(){  toolTipHelper.shutdownNow();}  }
class C{  private boolean isLeafEdge(Edge f,PhyloGraph graph){  return graph.getDegree(graph.getSource(f)) == 1 || graph.getDegree(graph.getTarget(f)) == 1;}  }
class C{  public boolean onReceivedHttpAuthRequest(CordovaWebView view,ICordovaHttpAuthHandler handler,String host,String realm){  return false;}  }
class C{  public StorelessCovariance(final int dim){  this(dim,true);}  }
class C{  static int databaseCheck(String stmt,int offset){  int length=offset + _DATABASE.length;  if (stmt.length() >= length && ParseUtil.compare(stmt,offset,_DATABASE)) {    if (stmt.length() > length && stmt.charAt(length) != ' ') {      return OTHER;    } else {      return DATABASE;    }  }  return OTHER;}  }
class C{  public boolean accept(File dir,String name){  return false;}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public SyncHttpClient(int httpPort,int httpsPort){  super(false,httpPort,httpsPort);}  }
class C{  protected AbstractUnivariateDifferentiableSolver(final double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  @CheckReturnValue public AddCmd files(Iterable<String> files){  Preconditions.checkState(!all,"'all' and passing files is incompatible");  return new AddCmd(force,false,files);}  }
class C{  protected void ae(int expected,int actual){  assertEquals(expected,actual);}  }
class C{  public static boolean instanceOf(Object obj,Class<?> typeClass){  if (obj == null)   return true;  Class<?> objectClass=obj.getClass();  return instanceOf(objectClass,typeClass);}  }
class C{  public SimplexSolver(final double epsilon,final int maxUlps,final double cutOff){  this.epsilon=epsilon;  this.maxUlps=maxUlps;  this.cutOff=cutOff;  this.pivotSelection=PivotSelectionRule.DANTZIG;}  }
class C{  protected void init(){  mStatus=STATUS_OK;  mFrameCount=0;  mGifFrames=new ArrayList<GifFrame>();}  }
class C{  public boolean isApplicable(){  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;}  }
class C{  public void solve(){  submitInitialSeeds();  awaitCompletionComputeValuesAndShutdown();}  }
class C{  private void initResource(String path){}  }
class C{  public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ContainerHelpers.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public static GenericRecord subsetRecord(GenericRecord record,Schema subsetSchema){  return subsetRecord(record,subsetSchema,null);}  }
class C{  public GroupsSetCallbackSettingsQuery messageNew(Boolean value){  return unsafeParam("message_new",value);}  }
class C{  public static final void onPlayerLogout(Player player){  PlayerGroup group=player.getPlayerGroup2();  if (group != null) {    PlayerGroupMember member=group.getMember(player.getObjectId());    member.updateLastOnlineTime();    group.onEvent(new PlayerDisconnectedEvent(group,player));  }}  }
class C{  private void calculateNewPosition(){  View offsetView=mAnchorView;  int xOffset=0;  int yOffset=0;  if (mAnchorBelow)   yOffset=mAnchorView.getHeight();  while (offsetView != null) {    xOffset+=offsetView.getLeft();    yOffset+=offsetView.getTop();    if (!(offsetView.getParent() instanceof View))     break;    offsetView=(View)offsetView.getParent();  }  if (mCenterView) {    xOffset+=mAnchorView.getWidth() / 2;  } else   if (LocalizationUtils.isLayoutRtl()) {    xOffset+=mAnchorView.getWidth();  }  int tooltipWidth=mTooltipText.getMeasuredWidth();  xOffset-=tooltipWidth / 2;  getBackground().getPadding(mCachedPaddingRect);  tooltipWidth+=mCachedPaddingRect.left + mCachedPaddingRect.right;  xOffset-=mCachedPaddingRect.left;  int defaultXOffset=xOffset;  View rootView=mAnchorView.getRootView();  if (xOffset + tooltipWidth > rootView.getWidth()) {    xOffset=rootView.getWidth() - tooltipWidth - mTooltipEdgeMargin;  } else   if (xOffset < 0) {    xOffset=mTooltipEdgeMargin;  }  int newOffset=-(xOffset - defaultXOffset);  if (Math.abs(newOffset) > mTooltipText.getMeasuredWidth() / 2 - mBubbleTipXMargin) {    newOffset=(mTooltipText.getMeasuredWidth() / 2 - mBubbleTipXMargin) * (int)Math.signum(newOffset);  }  ((BubbleBackgroundDrawable)getBackground()).setBubbleArrowXOffset(newOffset);  if (mAnchorBelow) {    mXPosition=xOffset;    mYPosition=yOffset - mTooltipTopMargin;  } else {    mXPosition=xOffset;    mYPosition=mAnchorView.getRootView().getHeight() - yOffset + mTooltipTopMargin;  }}  }
class C{  public Object clone(){  TShortArrayList list=null;  try {    list=(TShortArrayList)super.clone();    list._data=toNativeArray();  } catch (  CloneNotSupportedException e) {  }  return list;}  }
class C{  public UsersSearchQuery ageTo(Integer value){  return unsafeParam("age_to",value);}  }
class C{  public SetSpawn(World world,BlockPos spawnPoint){  super(world);  this.spawnPoint=spawnPoint;}  }
class C{  public static String decompressForGzip(byte[] compressed){  final int BUFFER_SIZE=compressed.length;  GZIPInputStream gis=null;  ByteArrayInputStream is=null;  try {    is=new ByteArrayInputStream(compressed);    gis=new GZIPInputStream(is,BUFFER_SIZE);    StringBuilder string=new StringBuilder();    byte[] data=new byte[BUFFER_SIZE];    int bytesRead;    while ((bytesRead=gis.read(data)) != -1) {      string.append(new String(data,0,bytesRead,"UTF-8"));    }    return string.toString();  } catch (  IOException e) {    e.printStackTrace();  } finally {    okhttp3.internal.Util.closeQuietly(gis);    okhttp3.internal.Util.closeQuietly(is);  }  return null;}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0d,0.4,0.24,0.144,0.0864,0.05184,0.031104,0.0186624,0.01119744,0.006718464,0.0040310784,0.00241864704,0.001451188224,0.0008707129344,0.00052242776064,0.000313456656384,0.00018807399383,0.000112844396298,6.77066377789e-05,4.06239826674e-05,2.43743896004e-05,1.46246337603e-05,8.77478025615e-06,5.26486815369e-06,3.15892089221e-06,1.89535253533e-06,1.1372115212e-06,6.82326912718e-07,4.09396147631e-07,2.45637688579e-07};}  }
class C{  public QueryTemplatePacket and(UnionTemplatePacket template){  LinkedList<QueryTemplatePacket> optimizedPackets=new LinkedList<QueryTemplatePacket>();  for (  QueryTemplatePacket packet : template.getPackets()) {    QueryTemplatePacket result=new QueryTemplatePacket(this);    result.intersectRanges(packet);    result.intersectUids(packet);    if (!result.isAlwaysEmpty())     optimizedPackets.add(result);  }  if (optimizedPackets.isEmpty())   template.setAlwaysEmpty(true);  template.setPackets(optimizedPackets);  return template;}  }
class C{  public WeightEvaluationQuery(DruidAggregationQuery<?> query,int weight){  super(makeInnerQuery(query,weight),AllGranularity.INSTANCE,Collections.<Dimension>emptyList(),(Filter)null,(Having)null,Collections.<Aggregation>singletonList(new LongSumAggregation("count","count")),Collections.<PostAggregation>emptyList(),query.getIntervals(),query.getQueryType() == DefaultQueryType.GROUP_BY ? stripColumnsFromLimitSpec(query) : null);}  }
class C{  public ConstraintWidget findWidgetInSelection(float x,float y){  ConstraintWidget found=null;  ArrayList<ConstraintWidget> selection=mSelection.getWidgets();  for (  ConstraintWidget widget : selection) {    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);    if (!decorator.isVisible()) {      continue;    }    if (widget instanceof ConstraintWidgetContainer) {      ConstraintWidget f=findWidget((ConstraintWidgetContainer)widget,x,y);      if (f != null) {        found=f;      }    } else {      int l=widget.getDrawX();      int t=widget.getDrawY();      int r=l + widget.getWidth();      int b=t + widget.getHeight();      if (x >= l && x <= r && y >= t && y <= b) {        found=widget;      }    }  }  return found;}  }
class C{  private boolean isReadyToBeCancelledLocked(JobStatus job){  return !job.isReady() && isCurrentlyActiveLocked(job);}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(mPtrIndicator.isHeader() ? change : -change);}  }
class C{  public static <R>Flowable<R> ifThen(BooleanSupplier condition,Publisher<? extends R> then){  return ifThen(condition,then,Flowable.<R>empty());}  }
class C{  private void onRequest(HttpServerRequest request){  AtomicInteger level=new AtomicInteger(0);  request.toObservable().map(null).lift(new JsonParserOperator()).map(null).flatMap(null).count().subscribe(null,null);}  }
class C{  private boolean typeIsPresent(String index,String type){  Set<String> types=cacheIndicesTypes.get(index);  return types != null && types.contains(type);}  }
class C{  @Override protected void onRestoreState(Bundle savedInstanceState){  super.onRestoreState(savedInstanceState);}  }
class C{  public static boolean kingLike(Item tokenItem){  String kingName=((String)tokenItem.findFeature("p.name")).toLowerCase();  if (inKingSectionLikeHash(kingName,KING_NAMES)) {    return true;  } else {    String kingTitle=((String)tokenItem.findFeature("p.p.name")).toLowerCase();    return inKingSectionLikeHash(kingTitle,KING_TITLES);  }}  }
class C{  public boolean forEachValue(TIntProcedure procedure){  Object[] keys=_set;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != FREE && keys[i] != REMOVED && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public EquipmentConfigurationUpdate(){}  }
class C{  public boolean isApplicable(){  if (getViewer() == null || !(getViewer() instanceof megan.remote.RemoteServiceBrowser))   return false;  final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();  return !remoteServiceBrowser.isServiceSelected() && remoteServiceBrowser.getURL().length() > 0;}  }
class C{  private Object[][] prefetchRecordsFromFile(int numberOfRecords) throws CarbonSortKeyAndGroupByException {  Object[][] records=new Object[numberOfRecords][];  for (int i=0; i < numberOfRecords; i++) {    records[i]=getRowFromStream();  }  return records;}  }
class C{  public static boolean isLinkedResource(IResource resource){  return resource.isLinked(IResource.CHECK_ANCESTORS);}  }
class C{  public SpaceTypeDescriptorBuilder(String typeName,SpaceTypeDescriptor superTypeDescriptor){  if (typeName == null || typeName.length() == 0)   throw new IllegalArgumentException("Argument cannot be null or empty - 'typeName'.");  if (typeName.equals(ROOT_TYPE_NAME))   throw new IllegalArgumentException("Argument 'typeName' cannot be '" + ROOT_TYPE_NAME + "' - it is reserved for internal usage.");  this._typeName=typeName;  this._superTypeDescriptor=superTypeDescriptor;  this._fixedProperties=new TreeMap<String,SpacePropertyDescriptor>();  this._indexes=new HashMap<String,SpaceIndex>();  this._fifoGroupingIndexes=new HashSet<String>();  this._storageType=StorageType.DEFAULT;  this._blobstoreEnabled=PojoDefaults.BLOBSTORE_ENABLED;}  }
class C{  private void performTemplateOnEntryCoreSA_impl(Context context,ITemplateHolder template,IEntryHolder entry,boolean makeWaitForInfo,boolean isShadow,boolean shadowMatches) throws TransactionConflictException, EntryDeletedException, TemplateDeletedException, TransactionNotActiveException, SAException, FifoException, NoMatchException {  XtnEntry templateTransactionEntry=null;  if (template.getXidOriginatedTransaction() != null) {    templateTransactionEntry=getTransaction(template.getXidOriginatedTransaction());    if (templateTransactionEntry == null || !templateTransactionEntry.m_Active)     throw new TransactionNotActiveException(template.getXidOriginatedTransaction());  }  if (isShadow) {    if (template.getXidOriginatedTransaction() != null && template.getXidOriginatedTransaction().equals(entry.getWriteLockTransaction()))     throw ENTRY_DELETED_EXCEPTION;  }  if (template.isFifoSearch()) {    checkValidityOfFifoTemplateOnEntry(context,entry,template);    if (context.isNonBlockingReadOp() && entry.isDeleted())     throw ENTRY_DELETED_EXCEPTION;  }  final boolean isReadCommitted=template.isReadOperation() && indicateReadCommitted(context.isNonBlockingReadOp() ? context.getLastRawMatchSnapshot() : entry.getTxnEntryData(),template);  XtnConfilctCheckIndicators cres=checkTransactionConflict(context,entry,template,isShadow);  if (cres != XtnConfilctCheckIndicators.NO_CONFLICT) {    if (cres == XtnConfilctCheckIndicators.ENTRY_DELETED || cres == XtnConfilctCheckIndicators.DELETED_BY_OWN_XTN) {      throw ENTRY_DELETED_EXCEPTION;    }    boolean skipWFenlist=isReadCommitted && !isShadow && shadowMatches;    if (makeWaitForInfo && !skipWFenlist && !template.isDeleted()) {      if (!template.isInCache()) {        if (template.isMultipleIdsOperation())         template.getMultipleIdsContext().setNonMainThreadUsed();        _cacheManager.insertTemplate(context,template,false);      }      _cacheManager.makeWaitForInfo(context,entry,template);    }    if (!skipWFenlist && template.isChange() && !template.isInCache()) {      if (template.isChangeMultiple())       ((ExtendedAnswerHolder)(template.getAnswerHolder())).addRejectedEntriesInfo(Context._operationTimeoutExecption,entry.getEntryData(),entry.getUID()); else       template.setRejectedOpOriginalExceptionAndEntry(new OperationTimeoutException(),entry.getEntryData());    }    if (!makeWaitForInfo && template.isIfExist())     context.setPossibleIEBlockingMatch(true);    throw TX_CONFLICT_EXCEPTION;  }  if (template.isFifoTemplate() && !_isLocalCache && context.isNonBlockingReadOp()) {    checkValidityOfFifoTemplateOnEntry(context,entry,template);  }  final IServerTypeDesc tte=_typeManager.getServerTypeDesc(entry.getClassName());  if (template.isFifoGroupPoll())   _fifoGroupsHandler.fifoGroupsOnOperationAction(context,entry,template,tte);  if (template.isBatchOperation() && template.getBatchOperationContext().isInProcessedUids(entry.getUID()))   throw NO_MATCH_EXCEPTION;switch (template.getTemplateOperation()) {case SpaceOperations.READ:case SpaceOperations.READ_IE:    performReadTemplateOnEntryCoreSA(context,template,entry,isShadow,isReadCommitted);  break;case SpaceOperations.TAKE:case SpaceOperations.TAKE_IE:if (template.isInitiatedEvictionOperation()) performInitiatedEvictionTemplateOnEntryCoreSA(context,template,entry,tte); else performTakeTemplateOnEntryCoreSA(context,template,entry,tte);break;case SpaceOperations.UPDATE:try {performUpdateTemplateOnEntryCoreSA(context,template,entry,templateTransactionEntry,tte);} catch (ChangeInternalException ex) {if (template.isBatchOperation()) template.getBatchOperationContext().addToProcessedUidsIfNeeded(entry.getUID());throw NO_MATCH_EXCEPTION;}break;default :if (_logger.isLoggable(Level.SEVERE)) _logger.severe("Unknown operation in template.");}}  }
class C{  public boolean contains(String name){  return legionsByName.containsKey(name.toLowerCase());}  }
class C{  public long durationRestart(){  long now=System.currentTimeMillis();  long d=now - t;  t=now;  return d;}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  public static <T>List<T> toList(T obj1){  List<T> list=new LinkedList<T>();  list.add(obj1);  return list;}  }
class C{  public void increment(float score){  cntGenomicLoci++;  sumScore+=score;}  }
class C{  public ZWaveBasicCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  protected boolean rightOn(Vector2 a,Vector2 b,Vector2 p){  return Segment.getLocation(p,a,b) <= 0;}  }
class C{  @FXML private void reset(){  lineChart.getXAxis().setAutoRanging(true);  lineChart.getYAxis().setAutoRanging(true);  final ObservableList<XYChart.Series<Number,Number>> data=lineChart.getData();  lineChart.setData(FXCollections.<XYChart.Series<Number,Number>>emptyObservableList());  lineChart.setData(data);  lineChart.setData(FXCollections.<XYChart.Series<Number,Number>>emptyObservableList());  lineChart.setData(data);  lineChart.setAnimated(true);}  }
class C{  public Grammar removeGrammar(XMLGrammarDescription desc){synchronized (fGrammars) {    clean();    int hash=hashCode(desc);    int index=(hash & 0x7FFFFFFF) % fGrammars.length;    for (Entry entry=fGrammars[index]; entry != null; entry=entry.next) {      if ((entry.hash == hash) && equals(entry.desc,desc)) {        return removeEntry(entry);      }    }    return null;  }}  }
class C{  private void checkNoCharactersMissing(int totalLength,List<Token> tokens){  if (!tokens.isEmpty() && tokens.get(tokens.size() - 1).right != totalLength) {    String error=String.format("Lengths don't match: %s instead of %s",tokens.get(tokens.size() - 1).right,totalLength);    throw new RuntimeException(error);  }  int start=0;  for (int i=0; i < tokens.size(); i++) {    Token token=tokens.get(i);    if (token.left != start) {      throw new RuntimeException("Gap/inconsistency at: " + start);    }    start=token.right;  }}  }
class C{  public CriteriaHibernateSpaceDataSourceConfigurer augmentInitialLoadEntries(boolean augmentInitialLoadEntries){  this.augmentInitialLoadEntries=augmentInitialLoadEntries;  return this;}  }
class C{  public void updateConstraints(){  if (myChildren.size() == myDeleted.size()) {    return;  }  for (  NlComponent child : myChildren) {    if (myDeleted.contains(child)) {      continue;    }    for (    XmlAttribute attribute : child.getTag().getAttributes()) {      String id=getId(attribute);      if (id != null) {        if (myDeletedIds.contains(id)) {          String name=attribute.getLocalName();          attribute.delete();          NlComponent deleted=myNodeMap.get(id);          if (deleted != null) {            ConstraintType type=ConstraintType.fromAttribute(name);            if (type != null) {              transfer(deleted,child,type,0);            }          }        }      }    }  }}  }
class C{  public void calculateSourcesSinksEntrypoints(String sourceSinkFile) throws IOException, XmlPullParserException {  ISourceSinkDefinitionProvider parser=null;  String fileExtension=sourceSinkFile.substring(sourceSinkFile.lastIndexOf("."));  fileExtension=fileExtension.toLowerCase();  if (fileExtension.equals(".xml"))   parser=XMLSourceSinkParser.fromFile(sourceSinkFile); else   if (fileExtension.equals(".txt"))   parser=PermissionMethodParser.fromFile(sourceSinkFile); else   throw new UnsupportedDataTypeException("The Inputfile isn't a .txt or .xml file.");  calculateSourcesSinksEntrypoints(parser);}  }
class C{  public SplitSystem deleteTaxa(List labels,Taxa taxa){  for (  Object label1 : labels) {    String label=(String)label1;    taxa.remove(label);  }  SplitSystem result=new SplitSystem();  for (Iterator it=iterator(); it.hasNext(); ) {    Split split=(Split)it.next();    Split induced=split.getInduced(taxa.getBits());    if (result.contains(induced)) {      Split other=result.get(induced);      other.setWeight(other.getWeight() + induced.getWeight());    } else     if (induced.getSplitSize() > 0)     result.addSplit(induced);  }  return result;}  }
class C{  private synchronized boolean waitResume(){  return true;}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public static INDArray toMatrix(List<List<Writable>> records){  INDArray arr=Nd4j.create(records.size(),records.get(0).size());  for (int i=0; i < arr.rows(); i++) {    arr.putRow(i,toArray(records.get(i)));  }  return arr;}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  public T distanceSq(final FieldVector3D<T> v){  final T dx=v.x.subtract(x);  final T dy=v.y.subtract(y);  final T dz=v.z.subtract(z);  return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz));}  }
class C{  public Pair<Set<String>,Set<String>> diff(Set<String> segmentsReceived){  Set<String> segmentsAdded;  Set<String> segmentsRemoved;synchronized (logSegments) {    Set<String> segmentsCached=logSegments.keySet();    segmentsAdded=Sets.difference(segmentsReceived,segmentsCached).immutableCopy();    segmentsRemoved=Sets.difference(segmentsCached,segmentsReceived).immutableCopy();  }  return Pair.of(segmentsAdded,segmentsRemoved);}  }
class C{  @Override public void characters(XMLString text,Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.characters(text,augs);  }}  }
class C{  public java.lang.Boolean isEscaped(){  return escaped;}  }
class C{  public static void packHeader(PkgHeader header,byte[] bs) throws UnsupportedEncodingException {  Arrays.fill(bs,0,FDHT_PROTO_PKG_HEADER_SIZE,(byte)0);  ProtoCommon.int2buff(header.body_len,bs,PROTO_HEADER_BODY_LEN_INDEX);  ProtoCommon.int2buff(header.key_hash_code,bs,PROTO_HEADER_KEY_HASH_CODE_INDEX);  ProtoCommon.int2buff(header.timestamp,bs,PROTO_HEADER_TIMESTAMP_INDEX);  ProtoCommon.int2buff(header.expires,bs,PROTO_HEADER_EXPIRES_INDEX);  bs[PROTO_HEADER_CMD_INDEX]=header.cmd;  bs[PROTO_HEADER_KEEP_ALIVE_INDEX]=header.keep_alive;  bs[PROTO_HEADER_STATUS_INDEX]=header.status;  return;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public MarketGetAlbumsQuery(VkApiClient client,UserActor actor,int ownerId){  super(client,"market.getAlbums",GetAlbumsResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);}  }
class C{  public void denyAll(Map<PermissionFlag,Message> flags){  generalPermissions.putAll(flags);}  }
class C{  private ByteBuffer wrap(GSByteArrayOutputStream bos){  ByteBuffer byteBuffer=ByteBuffer.wrap(bos.getBuffer());  byteBuffer.order(ByteOrder.BIG_ENDIAN);  return byteBuffer;}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  MatrixUtils.serializeRealVector(coefficients,oos);}  }
class C{  void resume(){  paused.set(false);synchronized (pauseLock) {    pauseLock.notifyAll();  }}  }
class C{  @Override public int compareTo(IdentifiableObject object){  if (this.getDisplayName() == null) {    return object.getDisplayName() == null ? 0 : 1;  }  return object.getDisplayName() == null ? -1 : this.getDisplayName().compareToIgnoreCase(object.getDisplayName());}  }
class C{  private InstallOperation<File,File> createInitSdkOperation(InstallContext installContext,double progressRatio){  File handoffSource=getHandoffAndroidSdkSource();  if (handoffSource != null) {    return new MergeOperation(handoffSource,installContext,progressRatio);  }  return InstallOperation.wrap(installContext,new ReturnValue(),0);}  }
class C{  public static Zmat o(Zmat[][] B) throws JampackException {  int bi, bi0nr, bj, b0jnc, bnc, bnr, i, il, j, jl, nc, nr;  Zmat Bij;  bnr=B.length;  bnc=B[0].length;  nc=0;  for (bj=0; bj < bnc; bj++) {    b0jnc=B[0][bj].ncol;    for (bi=1; bi < bnr; bi++) {      if (B[bi][bj].ncol != b0jnc) {        throw new JampackException("Blocks do not conform");      }    }    nc=nc + b0jnc;  }  nr=0;  for (bi=0; bi < bnr; bi++) {    bi0nr=B[bi][0].nrow;    for (bj=1; bj < bnc; bj++) {      if (B[bi][bj].nrow != bi0nr) {        throw new JampackException("Blocks do not conform");      }    }    nr=nr + bi0nr;  }  Zmat A=new Zmat(nr,nc);  il=0;  for (bi=0; bi < bnr; bi++) {    jl=0;    for (bj=0; bj < bnc; bj++) {      Bij=B[bi][bj];      for (i=il; i < il + Bij.nrow; i++) {        for (j=jl; j < jl + Bij.ncol; j++) {          A.re[i][j]=Bij.re[i - il][j - jl];          A.im[i][j]=Bij.im[i - il][j - jl];        }      }      jl=jl + Bij.ncol;    }    il=il + B[bi][0].nrow;  }  return A;}  }
class C{  protected static Dfp[] splitDiv(final Dfp[] a,final Dfp[] b){  final Dfp[] result;  result=new Dfp[2];  result[0]=a[0].divide(b[0]);  result[1]=a[1].multiply(b[0]).subtract(a[0].multiply(b[1]));  result[1]=result[1].divide(b[0].multiply(b[0]).add(b[0].multiply(b[1])));  return result;}  }
class C{  public static Converter<String,?> determine(Object genericObj){  Type type=((ParameterizedType)genericObj.getClass().getGenericInterfaces()[0]).getActualTypeArguments()[0];  Converter<String,?> converter=determinePrimitiveConverter(type);  if (converter != null) {    return converter;  }  if (type instanceof ParameterizedType) {    return determineCollectionConverter((ParameterizedType)type);  }  return new JsonConverter((Class<?>)type);}  }
class C{  public GroupsSetCallbackSettingsQuery messageDeny(Boolean value){  return unsafeParam("message_deny",value);}  }
class C{  boolean inHalfOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) < 0));}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  String imageUrl(){  return mImageUrl;}  }
class C{  public Polyline2D(float[] xpoints,float[] ypoints,int npoints){  if (npoints > xpoints.length || npoints > ypoints.length) {    throw new IndexOutOfBoundsException("npoints > xpoints.length || npoints > ypoints.length");  }  this.npoints=npoints;  this.xpoints=new float[npoints + 1];  this.ypoints=new float[npoints + 1];  System.arraycopy(xpoints,0,this.xpoints,0,npoints);  System.arraycopy(ypoints,0,this.ypoints,0,npoints);  calculatePath();}  }
class C{  private AudioOption createOption6(ChannelType... channels){  AudioOption option=new AudioOption();  option.add(createTrack(new Channel(FL.name(),channels[0]),new Channel(FR.name(),channels[1])));  return option;}  }
class C{  private boolean ownerCanReadTable(String ownerId,String table){  return _internalAuthorizer.hasPermissionByInternalId(ownerId,getReadPermission(table));}  }
class C{  public double norm2(){  return s[0];}  }
class C{  public static boolean onRender(Render<?> render,Entity entity,double x,double y,double z,float yaw,float partialTicks){  GlStateManager.pushMatrix();  final boolean successful=OpenModLoader.getEventBus().post(new Entities(render,entity,x,y,z,yaw,partialTicks));  GlStateManager.popMatrix();  return successful;}  }
class C{  @Override public void onValueSelected(int pickerIndex,int newValue,boolean autoAdvance){switch (pickerIndex) {case HOUR_INDEX:    if (mAllowAutoAdvance && autoAdvance) {      updateHeaderHour(newValue,false);      setCurrentItemShowing(MINUTE_INDEX,true,false);      announceForAccessibility(newValue + ". " + mSelectMinutes);    } else {      updateHeaderHour(newValue,true);    }  break;case MINUTE_INDEX:updateHeaderMinute(newValue,true);break;case AMPM_INDEX:updateAmPmLabelStates(newValue);break;case ENABLE_PICKER_INDEX:if (!isTypedTimeFullyLegal()) {mTypedTimes.clear();}finishKbMode();break;}if (mOnTimeChangedListener != null) {mOnTimeChangedListener.onTimeChanged(this,getCurrentHour(),getCurrentMinute());}}  }
class C{  public ImageResizer(Context context,int imageSize){  super(context);  setImageSize(imageSize);}  }
class C{  public void add(ResourceQuota quota){  this.msgRateIn+=quota.msgRateIn;  this.msgRateOut+=quota.msgRateOut;  this.bandwidthIn+=quota.bandwidthIn;  this.bandwidthOut+=quota.bandwidthOut;  this.memory+=quota.memory;}  }
class C{  public boolean removeColumn(C columnKey){  boolean changed=false;  for (  R rowKey : dataMap.keySet()) {    Map<C,V> row=dataMap.get(rowKey);    if (row.containsKey(columnKey)) {      row.remove(columnKey);      row.keySet().remove(columnKey);      changed=true;    }  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_BAN_HIS_LEADER(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400575,value0,value1);}  }
class C{  private void resetTimer(){  if (fadeOutTime > 0) {    if (timer == null || timer._run == false) {      timer=new FadeTimer();      timer.execute();    } else {      timer.resetTimer();    }  }}  }
class C{  private void resize(){  Matrix[] newData=new Matrix[data.length * 2];  for (int i=0; i < data.length; i++)   newData[i]=data[i];  data=newData;}  }
class C{  public boolean isApplicable(){  final LabelsJList list=((ChartViewer)getViewer()).getActiveLabelsJList();  return list != null && list.getDisabledLabels().size() > 0;}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public InterfaceInvokeExpr newInterfaceInvokeExpr(Local base,SootMethodRef method,List args){  return new GInterfaceInvokeExpr(base,method,args);}  }
class C{  protected void serialize(HttpServletRequest request,HttpServletResponse response,Object object) throws IOException {  String type=request.getHeader("Accept");  type=!StringUtils.isEmpty(type) ? type : request.getContentType();  type=!StringUtils.isEmpty(type) ? type : MediaType.APPLICATION_JSON_VALUE;  if (request.getPathInfo().endsWith(".json")) {    type=MediaType.APPLICATION_JSON_VALUE;  } else   if (request.getPathInfo().endsWith(".xml")) {    type=MediaType.APPLICATION_XML_VALUE;  }  if (isCompatibleWith(type,MediaType.APPLICATION_JSON)) {    renderService.toJson(response.getOutputStream(),object);  } else   if (isCompatibleWith(type,MediaType.APPLICATION_XML)) {    renderService.toXml(response.getOutputStream(),object);  }}  }
class C{  ExperimentStatistics calculateExperimentStatistics(final ExperimentCounts counts,BinomialMetric metric,double effectSize,Parameters.Mode mode){  ExperimentStatistics statistics=new ExperimentStatistics.Builder().withExperimentCounts(counts).withBuckets(calculateBucketStatistics(counts.getBuckets(),metric,effectSize,mode)).build();  analysisTools.generateRate(statistics,metric);  analysisTools.generateProgress(statistics);  return statistics;}  }
class C{  public void init$Children(){}  }
class C{  public CM_CREATE_CHARACTER(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public static List<LoadMetadataDetails> identifySegmentsToBeMerged(String storeLocation,CarbonLoadModel carbonLoadModel,int partitionCount,long compactionSize,List<LoadMetadataDetails> segments,CompactionType compactionType){  List sortedSegments=new ArrayList(segments);  sortSegments(sortedSegments);  List<LoadMetadataDetails> listOfSegmentsAfterPreserve=checkPreserveSegmentsPropertyReturnRemaining(sortedSegments);  List<LoadMetadataDetails> listOfSegmentsLoadedInSameDateInterval=identifySegmentsToBeMergedBasedOnLoadedDate(listOfSegmentsAfterPreserve);  List<LoadMetadataDetails> listOfSegmentsToBeMerged;  if (compactionType.equals(CompactionType.MAJOR_COMPACTION)) {    listOfSegmentsToBeMerged=identifySegmentsToBeMergedBasedOnSize(compactionSize,listOfSegmentsLoadedInSameDateInterval,carbonLoadModel,partitionCount,storeLocation);  } else {    listOfSegmentsToBeMerged=identifySegmentsToBeMergedBasedOnSegCount(listOfSegmentsLoadedInSameDateInterval);  }  return listOfSegmentsToBeMerged;}  }
class C{  protected VideoGetCatalogSectionQuery from(String value){  return unsafeParam("from",value);}  }
class C{  public static int readUnsignedInt(ByteInput in,int zwidth,boolean fillOnRight){  int result=0;  if (!fillOnRight) {    for (int i=zwidth; i >= 0; i--) {      result=(result >>> 8) | ((in.readByte() & 0xff) << 24);    }    result>>>=(3 - zwidth) * 8;  } else {    for (int i=zwidth; i >= 0; i--) {      result=(result >>> 8) | ((in.readByte() & 0xff) << 24);    }  }  return result;}  }
class C{  private void toggleTutorials(){  myExpanded=!myExpanded;  getLog().debug("Toggled service summary view to expand state: " + myExpanded);  myArrow.setIcon(myExpanded ? AllIcons.Nodes.TreeDownArrow : AllIcons.Nodes.TreeRightArrow);  myTutorialsList.setVisible(myExpanded);}  }
class C{  @VisibleForTesting protected void cancelAlarmOnSystem(Context context,PendingIntent operation){  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  alarmManager.cancel(operation);}  }
class C{  public void drawChartTransposed(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  final int y0=getHeight() - bottomMargin;  final int y1=topMargin;  final String[] series=getChartData().getSeriesNames().toArray(new String[getChartData().getNumberOfSeries()]);  final double topY;  final double[] percentFactor;  if (scalingType == ChartViewer.ScalingType.PERCENT) {    final String[] seriesIncludingDisabled=getChartData().getSeriesNamesIncludingDisabled();    percentFactor=computePercentFactorPerSampleForTransposedChart((DefaultChartData)getChartData(),seriesIncludingDisabled);    topY=computeMaxClassValueUsingPercentFactorPerSeries((DefaultChartData)getChartData(),seriesIncludingDisabled,percentFactor);  } else   if (scalingType == ChartViewer.ScalingType.LOG) {    topY=computeMaxYAxisValueLogScale(getMaxValue());    percentFactor=null;  } else   if (scalingType == ChartViewer.ScalingType.SQRT) {    topY=Math.sqrt(getMaxValue());    percentFactor=null;  } else {    topY=1.1 * getMaxValue();    percentFactor=null;  }  final double yFactor=(y0 - y1) / topY;  final int x0=leftMargin;  final int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  final int numberOfDataSets=getChartData().getNumberOfSeries();  final int numberOfClasses=getChartData().getNumberOfClasses();  double xStep=(x1 - x0) / (numberOfClasses * (numberOfDataSets + (isGapBetweenBars() ? 1 : 0)));  final double bigSpace=Math.max(2.0,Math.min(10.0,xStep));  xStep=(x1 - x0 - (isGapBetweenBars() ? bigSpace * (numberOfClasses) : 0)) / (double)(numberOfClasses * numberOfDataSets);  int c=0;  for (  String className : getChartData().getClassNames()) {    if (isShowXAxis()) {      final double xLabel=leftMargin + (isGapBetweenBars() ? (c + 1) * bigSpace : 0) + ((c + 0.5) * numberOfDataSets) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      final Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(null,className)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));      if (sgc != null)       sgc.setCurrentItem(new String[]{null,className});      drawString(gc,className,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null)       sgc.clearCurrentItem();    }    int d=0;    for (int i=0; i < series.length; i++) {      final String seriesName=series[i];      double value=getChartData().getValueAsDouble(seriesName,className);switch (scalingType) {case PERCENT:{          value*=percentFactor[i];          break;        }case LOG:{        if (value == 1)         value=Math.log10(2) / 2; else         if (value > 0)         value=Math.log10(value);        break;      }case SQRT:{      if (value > 0)       value=Math.sqrt(value);      break;    }}final double xBar=leftMargin + (isGapBetweenBars() ? (c + 1) * bigSpace : 0) + (c * numberOfDataSets + d) * xStep;final double height=Math.max(0,value * yFactor);final Rectangle2D rect=new Rectangle((int)Math.round(xBar),(int)Math.round(y0 - height),Math.max(1,(int)Math.round(xStep)),(int)Math.round(height));final Color color=getChartColors().getSampleColor(seriesName);gc.setColor(color);if (sgc != null) sgc.setCurrentItem(new String[]{seriesName,className});gc.fill(rect);if (sgc != null) sgc.clearCurrentItem();final boolean isSelected=getChartData().getChartSelection().isSelected(seriesName,className);if (isSelected) {  gc.setColor(ProgramProperties.SELECTION_COLOR);  gc.setStroke(HEAVY_STROKE);  gc.draw(rect);  gc.setStroke(NORMAL_STROKE);} else {  gc.setColor(color.darker());  gc.draw(rect);}if (showValues || isSelected) {  String label="" + (int)getChartData().getValueAsDouble(seriesName,className);  valuesList.add(new DrawableValue(label,(int)(rect.getX() + rect.getWidth() / 2),(int)(rect.getY() - 2),isSelected));}d++;}c++;}if (valuesList.size() > 0) {gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));DrawableValue.drawValues(gc,valuesList,true,false);valuesList.clear();}if (sgc == null && lastDown != null) {gc.setColor(Color.green);gc.draw(lastDown);}}  }
class C{  public static void flushWriter(Writer wr){  if (wr != null) {    try {      wr.flush();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  private File createCaptureFile(int encodingType,String fileName){  if (fileName.isEmpty()) {    fileName=".Pic";  }  if (encodingType == JPEG) {    fileName=fileName + ".jpg";  } else   if (encodingType == PNG) {    fileName=fileName + ".png";  } else {    throw new IllegalArgumentException("Invalid Encoding Type: " + encodingType);  }  return new File(getTempDirectoryPath(),fileName);}  }
class C{  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){  if (entity != null) {    requestBase.setEntity(entity);  }  return requestBase;}  }
class C{  public static DataFrame dataFrameForRecords(JavaRDD<GenericRecord> records,Schema schema,SQLContext sqlc){  JavaRDD<Row> rows=rowsForRecords(records);  StructType structType=structTypeForSchema(schema);  DataFrame dataFrame=sqlc.createDataFrame(rows,structType);  return dataFrame;}  }
class C{  public static boolean canInviteToAlliance(Player player,Player target){  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canInviteToAlliance.ordinal()]) {    if (!restrictions.canInviteToAlliance(player,target)) {      return false;    }  }  return true;}  }
class C{  public void loadProcessConfiguration(){  Document xmlConfiguration;  ProcessConfigurationResponse processConfigurationResponse=null;  log.trace("Configuration process started");  boolean localConfiguration=false;  if (environment.containsProperty(Options.LOCAL_CONFIG_FILE)) {    localConfiguration=true;    String fileSystemLocation=environment.getProperty(Options.LOCAL_CONFIG_FILE);    log.info("Loading configuration from file: {}",fileSystemLocation);    xmlConfiguration=this.processConfigurationLoader.fromFiletoDOC(fileSystemLocation);  } else {    log.info("Loading configuration from server");    processConfigurationResponse=this.processConfigurationLoader.getProcessConfiguration();    if (processConfigurationResponse.getConfigurationXML().equals(ProcessConfigurationResponse.CONF_REJECTED)) {      sendDisconnectionNotification();      throw new RuntimeException("CONF_REJECTED received");    }    xmlConfiguration=this.processConfigurationLoader.fromXMLtoDOC(processConfigurationResponse.getConfigurationXML());  }  if (xmlConfiguration == null) {    sendDisconnectionNotification();    throw new RuntimeException("Could not parse XML configuration");  }  if (environment.containsProperty(Options.REMOTE_CONFIG_FILE)) {    if (!localConfiguration) {      saveConfiguration(xmlConfiguration);    } else {      log.info("Local configuration will not be saved. It is already in local disk");    }  }  log.debug("Loading DAQ configuration properties from XML document...");  try {    ProcessConfiguration configuration=ProcessConfigurationHolder.getInstance();    configuration=this.processConfigurationLoader.createProcessConfiguration(configuration.getProcessName(),configuration.getprocessPIK(),xmlConfiguration,localConfiguration);    ProcessConfigurationHolder.setInstance(configuration);    log.debug("Process configuration successfully loaded");  } catch (  ConfUnknownTypeException ex) {    sendDisconnectionNotification();    throw new RuntimeException("UNKNOWN configuration received");  }catch (  Exception ex) {    sendDisconnectionNotification();    throw new RuntimeException("Exception caught while configuring the DAQ. Check the configuration XML",ex);  }}  }
class C{  private void validateModeConditions(Filter filter){  expect(filter.getFilterConditions().stream().filter(HAS_ANY_MODE).findFirst().isPresent(),equalTo(false)).verify(INCORRECT_FILTER_PARAMETERS,"Filters for 'mode' aren't applicable for project's launches.");}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  @Override public boolean isToTop(){  return toTop;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", sessionId=").append(sessionId);  sb.append(", account=").append(account);  sb.append(", ip=").append(ip);  sb.append(", startTime=").append(startTime);  sb.append("]");  return sb.toString();}  }
class C{  @Override public boolean shouldOverrideUrlLoading(WebView view,String url){  return CommonRefreshWebViewActivity.this.shouldOverrideUrlLoading(view,url);}  }
class C{  public void cleanupTableSetForScan(String id){  String path=getPathForScan(id);  DistributedTableSerializer.cleanup(_curator,path);}  }
class C{  static ByteBuffer ioResourceToByteBuffer(String resource,int bufferSize) throws IOException {  ByteBuffer buffer;  Path path=Paths.get(resource);  if (Files.isReadable(path)) {    try (SeekableByteChannel fc=Files.newByteChannel(path)){      buffer=BufferUtils.createByteBuffer((int)fc.size() + 1);      while (fc.read(buffer) != -1)       ;    }   } else {    try (InputStream source=IOUtil.class.getClassLoader().getResourceAsStream(resource);ReadableByteChannel rbc=Channels.newChannel(source)){      buffer=createByteBuffer(bufferSize);      while (true) {        int bytes=rbc.read(buffer);        if (bytes == -1)         break;        if (buffer.remaining() == 0)         buffer=resizeBuffer(buffer,buffer.capacity() * 2);      }    }   }  buffer.flip();  return buffer;}  }
class C{  public SnippetObject key(Map.Entry<Object,Object> e){  return new SnippetObject(longify(e.getKey()),myPath.key(),mySnippets);}  }
class C{  public static <T>Set<T> difference(Collection<? extends T> s1,Collection<? extends T> s2){  Set<T> s3=new HashSet<T>(s1);  s3.removeAll(s2);  return s3;}  }
class C{  protected Dfp(final DfpField field,int x){  this(field,(long)x);}  }
class C{  void handleSelectionEvent(int eventType,float posXPix,float posYPix){  boolean shouldHandleSelection=false;switch (eventType) {case SelectionEventType.SELECTION_HANDLES_SHOWN:    mWasTapGestureDetected=false;  mSelectionType=SelectionType.LONG_PRESS;shouldHandleSelection=true;unscheduleInvalidTapNotification();break;case SelectionEventType.SELECTION_HANDLES_CLEARED:mHandler.handleSelectionDismissal();resetAllStates();break;case SelectionEventType.SELECTION_HANDLE_DRAG_STOPPED:shouldHandleSelection=mShouldHandleSelectionModification;break;case SelectionEventType.SELECTION_ESTABLISHED:mIsSelectionEstablished=true;break;case SelectionEventType.SELECTION_DISSOLVED:mIsSelectionEstablished=false;break;default :}if (shouldHandleSelection) {ContentViewCore baseContentView=getBaseContentView();if (baseContentView != null) {String selection=baseContentView.getSelectedText();if (selection != null) {mX=posXPix;mY=posYPix;mSelectedText=selection;handleSelection(selection,SelectionType.LONG_PRESS);}}}}  }
class C{  @Override public String toString(){  return super.toString() + "[sumDirectoryContents=" + sumDirectoryContents+ "]";}  }
class C{  public static <T>T runRenderAction(@NotNull Callable<T> callable) throws Exception {  try {    if (ourTimeoutExceptionCounter.get() > 3) {      ourRenderingExecutor.submit(null).get(50,TimeUnit.MILLISECONDS);    }    T result=ourRenderingExecutor.submit(callable).get(DEFAULT_RENDER_THREAD_TIMEOUT_MS,TimeUnit.MILLISECONDS);    ourTimeoutExceptionCounter.set(0);    return result;  } catch (  TimeoutException e) {    ourTimeoutExceptionCounter.incrementAndGet();    Thread renderingThread=ourRenderingThread.get();    TimeoutException timeoutException=new TimeoutException("Preview timed out while rendering the layout.\n" + "This typically happens when there is an infinite loop or unbounded recursion in one of the custom views.");    if (renderingThread != null) {      timeoutException.setStackTrace(renderingThread.getStackTrace());    }    throw timeoutException;  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  vibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);  setContentView(R.layout.common_ui);  RajaVrView gvrView=(RajaVrView)findViewById(R.id.gvr_view);  gvrView.setEGLConfigChooser(8,8,8,8,16,8);  gvrView.setRenderer(new DemoVRRenderer(this));  gvrView.setTransitionViewEnabled(true);  gvrView.setOnCardboardBackButtonListener(null);  setGvrView(gvrView);  gvrAudioEngine=new GvrAudioEngine(this,GvrAudioEngine.RenderingMode.BINAURAL_HIGH_QUALITY);}  }
class C{  public void parse(String string){  if (string == null) {    throw new NullPointerException("string is null");  }  int bufferSize=Math.max(MIN_BUFFER_SIZE,Math.min(DEFAULT_BUFFER_SIZE,string.length()));  try {    parse(new StringReader(string),bufferSize);  } catch (  IOException exception) {    throw new RuntimeException(exception);  }}  }
class C{  public int logout(){  return Helper.update(getId(),V.create("sid",X.EMPTY).set("updated",System.currentTimeMillis()),User.class);}  }
class C{  private void populateSegmentList(int index){  segmentListModel.clear();  int segmentIndex=0;  for (  @SuppressWarnings("unused") WKTSegmentList pointList : wktGeometry.getSegmentList(index)) {    segmentListModel.addElement(wktGeometry.getSegmentName(segmentIndex));    segmentIndex++;  }  if (!segmentListModel.isEmpty()) {    segmentList.setSelectedIndex(0);  }}  }
class C{  public void onStart(){}  }
class C{  public String constructFullClasspath(){  String cp=super.constructFullClasspath();  cp+=File.pathSeparator + soot.options.Options.v().soot_classpath();  return cp;}  }
class C{  protected void bindTextToView(CharSequence text,TextView view){  if (view == null) {    return;  }  if (text != null) {    view.setText(text);    view.setVisibility(View.VISIBLE);  } else {    view.setVisibility(View.GONE);  }}  }
class C{  private String fFormatString(double x){  boolean noDigits=false;  char[] ca6, ca7;  if (Double.isInfinite(x)) {    if (x == Double.POSITIVE_INFINITY) {      if (leadingSign)       ca6="+Inf".toCharArray(); else       if (leadingSpace)       ca6=" Inf".toCharArray(); else       ca6="Inf".toCharArray();    } else     ca6="-Inf".toCharArray();    noDigits=true;  } else   if (Double.isNaN(x)) {    if (leadingSign)     ca6="+NaN".toCharArray(); else     if (leadingSpace)     ca6=" NaN".toCharArray(); else     ca6="NaN".toCharArray();    noDigits=true;  } else   ca6=fFormatDigits(x);  ca7=applyFloatPadding(ca6,false);  return new String(ca7);}  }
class C{  public static void o(Z1 z){  o(z,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);}  }
class C{  private void openCounterDataInputStream() throws DataFallbackException {  if (dInput == null) {    if (LOG.isDebugEnabled())     LOG.debug("openDataInputStream() ; Opening the reader for the " + counterFile.getName() + " file");    try {      dInput=new BufferedReader(new FileReader(counterFile));    } catch (    IOException e) {      throw new DataFallbackException(e.getMessage());    }  }}  }
class C{  public static TypeRef of(Type primitiveType){  Preconditions.checkArgument(primitiveType != Type.TYPE_MESSAGE && primitiveType != Type.TYPE_ENUM);  return interner.intern(new TypeRef(primitiveType,Cardinality.OPTIONAL,null,null));}  }
class C{  private String genGetColumnMethod(Class<?> fieldType){  String typeName;  if (fieldType.isPrimitive()) {    typeName=BaseUtility.capitalize(fieldType.getName());  } else {    typeName=fieldType.getSimpleName();  }  String methodName="get" + typeName;  if ("getBoolean".equals(methodName)) {    methodName="getInt";  } else   if ("getChar".equals(methodName) || "getCharacter".equals(methodName)) {    methodName="getString";  } else   if ("getDate".equals(methodName)) {    methodName="getLong";  } else   if ("getInteger".equals(methodName)) {    methodName="getInt";  } else   if ("getbyte[]".equalsIgnoreCase(methodName)) {    methodName="getBlob";  }  return methodName;}  }
class C{  public BasicScriptProperties(){}  }
class C{  public static INDArray[] dup(INDArray[] history){  INDArray[] dupHistory=new INDArray[history.length];  for (int i=0; i < history.length; i++) {    dupHistory[i]=history[i].dup();  }  return dupHistory;}  }
class C{  protected boolean compare2(String first,String second,boolean startsWith){  Index index1=new Index(first.length());  Index index2=new Index(second.length());  Sound sound1;  Sound sound2;  do {    if (index1.hasEnded()) {      if (!index2.hasEnded()) {        return false;      }      return true;    }    if (index2.hasEnded()) {      return startsWith;    }    sound1=this.getNextSound(first,index1,startsWith);    sound2=this.getNextSound(second,index2,startsWith);  } while (sound1 == null || sound2 == null || sound1.equals(sound2));  return false;}  }
class C{  @Override public Filter createFilter(){  return new ContainsExtended();}  }
class C{  public static int exportReadName2Accession(MainViewer viewer,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final MultiTaggedAccessions multiTaggedAccessions=new MultiTaggedAccessions(true,"gb|","ref|");    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      final Document doc=viewer.getDir().getDocument();      final IConnector connector=doc.getConnector();      final IClassificationBlock classificationBlock=connector.getClassificationBlock(ClassificationType.Taxonomy.toString());      final java.util.Collection<Integer> taxonIds=viewer.getSelectedIds();      progressListener.setSubtask("Read ids to Accession ids");      progressListener.setMaximum(taxonIds.size());      progressListener.setProgress(0);      for (      int taxonId : taxonIds) {        Set<Integer> allBelow;        Node v=viewer.getTaxId2Node(taxonId);        if (v.getOutDegree() == 0)         allBelow=TaxonomyData.getTree().getAllDescendants(taxonId); else {          allBelow=new HashSet<>();          allBelow.add(taxonId);        }        for (        int id : allBelow) {          if (classificationBlock.getSum(id) > 0) {            try (IReadBlockIterator it=connector.getReadsIterator(ClassificationType.Taxonomy.toString(),id,doc.getMinScore(),doc.getMaxExpected(),true,true)){              while (it.hasNext()) {                IReadBlock readBlock=it.next();                w.write(readBlock.getReadName() + separator);                for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {                  IMatchBlock matchBlock=readBlock.getMatchBlock(i);                  if (matchBlock.getBitScore() >= doc.getMinScore() && matchBlock.getExpected() <= doc.getMaxExpected() && matchBlock.getPercentIdentity() >= doc.getMinPercentIdentity()) {                    final String accessionId=multiTaggedAccessions.getFirst(matchBlock.getTextFirstWord());                    if (accessionId != null && accessionId.length() > 0) {                      w.write(" " + accessionId);                    }                  }                }                w.write("\n");                totalLines++;              }            }             progressListener.checkForCancel();          }        }        progressListener.incrementProgress();      }    }   } catch (  CanceledException ex) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  BeforeImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new BeforeExtended();  } else {    filter=new BeforeExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public boolean isIgnore(){  return ignore;}  }
class C{  @Override public void startEffect(Effect effect){  Creature effected=effect.getEffected();  if (effected instanceof Player) {    effected.setTarget(null);    PacketSendUtility.sendPacket((Player)effected,new SM_TARGET_SELECTED(null));    PacketSendUtility.broadcastPacket(effected,new SM_TARGET_UPDATE((Player)effected));  }}  }
class C{  public DatabaseGetCitiesQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void addTypeParameter(TypeVariable node){  List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();  list.addChild(node);}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public Object cheese(String body,@Header("name") String name){  return "Hello " + name + ". I got payload `"+ body+ "` and I am on host: "+ System.getenv("HOSTNAME");}  }
class C{  @Override public boolean equals(Object o){  return o == this;}  }
class C{  public static void toggleKeyboradState(Context context,EditText edit){  edit.setFocusable(true);  edit.setFocusableInTouchMode(true);  edit.requestFocus();  InputMethodManager inputManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  inputManager.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof ProxyComparator)) {    return false;  }  IJSpace objProxy=((ProxyComparator)obj).getProxy();  IJSpace thisProxy=getProxy();  if (thisProxy == null || objProxy == null) {    return false;  }  if (((ISpaceProxy)objProxy).isClustered()) {    return (thisProxy == objProxy);  }  return thisProxy.equals(objProxy);}  }
class C{  public Set<String> toFilenameSet(int iSubset){  HashSet s=new HashSet();  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  return s;}  }
class C{  public Builder maxZoom(Number maxZoom){  this.maxZoom=maxZoom;  return this;}  }
class C{  public ZWaveClockCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public void print(){  int i;  System.out.println("group count: " + groups.length + ", distinct server count: "+ servers.length+ ", keep_alive="+ this.keep_alive);  for (i=0; i < servers.length; i++) {    System.out.println("server" + (i + 1) + ". "+ servers[i].address.getAddress().getHostAddress()+ ":"+ servers[i].address.getPort());  }  for (i=0; i < groups.length; i++) {    System.out.println("group " + i + " server count: "+ groups[i].length);    for (int k=0; k < groups[i].length; k++) {      System.out.println("server" + (k + 1) + ". "+ groups[i][k].address.getAddress().getHostAddress()+ ":"+ groups[i][k].address.getPort());    }  }}  }
class C{  public int addItem(int index,ShoppingCartItem item) throws CartItemModifyException {  if (isReadOnlyCart()) {    throw new CartItemModifyException("Cart items cannot be changed");  }  if (!cartLines.contains(item)) {    GenericValue product=item.getProduct();    if (product != null && isSalesOrder()) {      GenericValue billingAddress=this.getBillingAddress();      if (billingAddress != null) {        if (!ProductWorker.isBillableToAddress(product,billingAddress)) {          throw new CartItemModifyException("The billing address is not compatible with ProductGeos rules of this product.");        }      }    }    cartLines.add(index,item);    return index;  } else {    return this.getItemIndex(item);  }}  }
class C{  public void addTypeDecl(TypeDecl node){  List<TypeDecl> list=(parent == null || state == null) ? getTypeDeclListNoTransform() : getTypeDeclList();  list.addChild(node);}  }
class C{  public Builder addColumnTime(String columnName,DateTimeZone timeZone,Long minValidValue,Long maxValidValue){  addColumn(new TimeMetaData(columnName,timeZone,minValidValue,maxValidValue));  return this;}  }
class C{  public static Flowable<Integer> characters(CharSequence string){  return RxJavaPlugins.onAssembly(new FlowableCharSequence(string));}  }
class C{  public boolean isCollapsed(){  return expandableSelectorAnimator.isCollapsed();}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  hasDTD=false;  String dtd=UtilProperties.getSplitPropertyValue(UtilURL.fromResource("localdtds.properties"),publicId);  if (UtilValidate.isNotEmpty(dtd)) {    if (Debug.verboseOn())     Debug.logVerbose("[UtilXml.LocalResolver.resolveEntity] resolving DTD with publicId [" + publicId + "], systemId ["+ systemId+ "] and the dtd file is ["+ dtd+ "]",module);    try {      URL dtdURL=UtilURL.fromResource(dtd);      if (dtdURL == null) {        throw new GeneralException("Local DTD not found - " + dtd);      }      InputStream dtdStream=dtdURL.openStream();      InputSource inputSource=new InputSource(dtdStream);      inputSource.setPublicId(publicId);      hasDTD=true;      if (Debug.verboseOn())       Debug.logVerbose("[UtilXml.LocalResolver.resolveEntity] got LOCAL DTD input source with publicId [" + publicId + "] and the dtd file is ["+ dtd+ "]",module);      return inputSource;    } catch (    Exception e) {      Debug.logWarning(e,module);    }  } else {    int lastSlash=systemId.lastIndexOf("/");    String filename=null;    if (lastSlash == -1) {      filename=systemId;    } else {      filename=systemId.substring(lastSlash + 1);    }    URL resourceUrl=UtilURL.fromResource(filename);    if (resourceUrl != null) {      InputStream resStream=resourceUrl.openStream();      InputSource inputSource=new InputSource(resStream);      if (UtilValidate.isNotEmpty(publicId)) {        inputSource.setPublicId(publicId);      }      hasDTD=true;      if (Debug.verboseOn())       Debug.logVerbose("[UtilXml.LocalResolver.resolveEntity] got LOCAL DTD/Schema input source with publicId [" + publicId + "] and the file/resource is ["+ filename+ "]",module);      return inputSource;    } else {      Debug.logWarning("[UtilXml.LocalResolver.resolveEntity] could not find LOCAL DTD/Schema with publicId [" + publicId + "] and the file/resource is ["+ filename+ "]",module);      return null;    }  }  return defaultResolver.resolveEntity(publicId,systemId);}  }
class C{  private Result[] compareMedianToPercentilslimits(double[] median,int[][] p5_95) throws CanceledException {  assert (median.length == p5_95.length);  int n=median.length;  Result[] result=new Result[n];  for (int j=0; j < n; j++) {    result[j]=new Result();  }  progressListener.setSubtask("Comparing medians to percentile limits");  progressListener.setMaximum(n);  progressListener.setProgress(0);  for (int i=0; i < n; i++) {    int p05=p5_95[i][0];    int p95=p5_95[i][1];    int p50=p5_95[i][2];    int lengthOfInterval=p95 - p05;    double scale;    if (lengthOfInterval == 0) {      scale=median[i] - p50;      result[i].setGenNum(i + 1);      result[i].setScale(scale);      result[i].setRemark("Can't compare (zero in both samples)");    } else {      scale=(median[i] - (double)(p50)) / (double)(p95 - p05);      if (optionWarningOnBoundary) {        if (Math.abs(scale) < 0.90) {          result[i].setGenNum(i + 1);          result[i].setScale(scale);          result[i].setRemark("Similar");        } else         if (Math.abs(scale) > 1.10) {          result[i].setGenNum(i + 1);          result[i].setScale(scale);          result[i].setRemark("Not similar");        } else {          result[i].setGenNum(i + 1);          result[i].setScale(scale);          result[i].setRemark("Can't be classified");        }      } else {        if (Math.abs(scale) < 1) {          result[i].setGenNum(i + 1);          result[i].setScale(scale);          result[i].setRemark("Similar");        } else {          result[i].setGenNum(i + 1);          result[i].setScale(scale);          result[i].setRemark("Not similar");        }      }    }    progressListener.setProgress(i);  }  return result;}  }
class C{  private static void paintConstraint(NlGraphics graphics,ConstraintType type,NlComponent sourceNode,Rectangle sourceBounds,NlComponent targetNode,Rectangle targetBounds,@Nullable Set<DependencyGraph.Constraint> allConstraints,boolean highlightTargetEdge,TextDirection textDirection){  SegmentType sourceSegmentTypeX=type.sourceSegmentTypeX;  SegmentType sourceSegmentTypeY=type.sourceSegmentTypeY;  SegmentType targetSegmentTypeX=type.targetSegmentTypeX;  SegmentType targetSegmentTypeY=type.targetSegmentTypeY;  if (sourceSegmentTypeX == SegmentType.CENTER_VERTICAL && targetSegmentTypeX == SegmentType.CENTER_VERTICAL) {    paintHorizontalCenterConstraint(graphics,sourceBounds,targetBounds);    return;  }  if (sourceSegmentTypeY == SegmentType.CENTER_HORIZONTAL && targetSegmentTypeY == SegmentType.CENTER_HORIZONTAL) {    paintVerticalCenterConstraint(graphics,sourceBounds,targetBounds);    return;  }  if (allConstraints != null && (type == ConstraintType.LAYOUT_ABOVE || type == ConstraintType.LAYOUT_BELOW || type == ConstraintType.LAYOUT_LEFT_OF || type == ConstraintType.LAYOUT_RIGHT_OF)) {    if (paintCornerConstraint(graphics,type,sourceNode,sourceBounds,targetNode,targetBounds,allConstraints,textDirection)) {      return;    }  }  if (sourceSegmentTypeX == SegmentType.UNKNOWN) {    paintVerticalConstraint(graphics,type,sourceNode,sourceBounds,targetNode,targetBounds,highlightTargetEdge);    return;  }  if (sourceSegmentTypeY == SegmentType.UNKNOWN) {    paintHorizontalConstraint(graphics,type,sourceNode,sourceBounds,targetNode,targetBounds,highlightTargetEdge,textDirection);    return;  }  assert false;}  }
class C{  public void requestIsFailedNode(int nodeId){  enqueue(new IsFailedNodeMessageClass().doRequest(nodeId));}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=crossCheckStateCount;  stateCount[0]=0;  stateCount[1]=0;  stateCount[2]=0;  int i=startI;  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (i == maxI || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {    stateCount[2]++;    i++;  }  if (stateCount[2] > maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  public TimedLaunchConstrainer(Duration minimumDelay){  this.minDelay=minimumDelay;  this.lastPermanentRecoveryLaunchMs=new AtomicLong(0);}  }
class C{  public PhotosObject(Activity a,int photosType){  this.adapter=new PhotoAdapter(a,new ArrayList<Photo>());  adapter.setOwn(true);  this.service=PhotoService.getService();  this.photosType=photosType;  this.photosOrder=PhotoApi.ORDER_BY_LATEST;  this.photosPage=0;  this.refreshing=false;  this.loading=false;  this.over=false;}  }
class C{  public List<GenericValue> makeAllOrderContactMechs(){  List<GenericValue> allOrderContactMechs=new LinkedList<GenericValue>();  Map<String,String> contactMechIds=this.getOrderContactMechIds();  if (contactMechIds != null) {    for (    Map.Entry<String,String> entry : contactMechIds.entrySet()) {      GenericValue orderContactMech=getDelegator().makeValue("OrderContactMech");      orderContactMech.set("contactMechPurposeTypeId",entry.getKey());      orderContactMech.set("contactMechId",entry.getValue());      allOrderContactMechs.add(orderContactMech);    }  }  return allOrderContactMechs;}  }
class C{  protected void afterMove(){  getContentManager().registerLanguage(new SLCodec(),FIPANames.ContentLanguage.FIPA_SL0);  getContentManager().registerOntology(MobilityOntology.getInstance());}  }
class C{  public static void preload(Class<?> clazz){  getString(clazz,null);}  }
class C{  public final boolean addAll(final PointsToSetInternal other,final PointsToSetInternal exclude){  if (other instanceof HashPointsToSet && exclude == null && (pag.getTypeManager().getFastHierarchy() == null || type == null || type.equals(other.type))) {    return s.addAll(((HashPointsToSet)other).s);  } else {    return super.addAll(other,exclude);  }}  }
class C{  private Object handleRuleWithInvalidTags(final Map<Long,Object> pInputParams) throws RuleEvaluationException {  final Object result=tryToIgnoreInvalidTags(pInputParams);  if (isResultInvalid(result)) {    throw new RuleEvaluationException("Cannot evaluate rule: Invalid tags found!");  }  return result;}  }
class C{  public SoftReferenceSymbolTableConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,grammarPool,parentSettings);}  }
class C{  @Override public void close(){  try {    if (connection != null) {      connection.close();    }  } catch (  SQLException e) {    e.printStackTrace();  }}  }
class C{  public boolean containsColumn(String columnName){  for (int i=0; i < columnModels.size(); i++) {    ColumnModel columnModel=columnModels.get(i);    if (columnName.equalsIgnoreCase(columnModel.getColumnName())) {      return true;    }  }  return false;}  }
class C{  @Provides @Singleton @CassandraClusters Collection<String> provideCassandraClusterNames(BlobStoreConfiguration configuration){  Set<String> clusters=Sets.newLinkedHashSet();  for (  CassandraConfiguration config : configuration.getCassandraClusters().values()) {    clusters.add(config.getCluster());  }  return clusters;}  }
class C{  public boolean isInCache(String imageLocation){  return imageCache.containsKey(imageLocation);}  }
class C{  public void close(){  if (rp != null)   rp.close();  if (fhp != null)   closeHeader();}  }
class C{  public List<Constant> vals(){  return vals;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public NewsfeedSearchQuery(VkApiClient client,UserActor actor){  super(client,"newsfeed.search",SearchResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public RegistrarPermission(String name){  super(name);}  }
class C{  public static ProbeItemDescriptor discreteBarItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue,boolean outlined,boolean filled,int width,boolean fixedWidth){  if (!outlined && !filled)   throw new IllegalArgumentException("Either outlined or filled must be set");  return discreteItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,outlined ? DEFAULT_COLOR : null,filled ? DEFAULT_COLOR : null,width,fixedWidth,false,!filled);}  }
class C{  public ExchangeItem(int itemObjId,long itemCount,Item item){  this.itemObjId=itemObjId;  this.itemCount=itemCount;  this.item=item;  this.itemDesc=item.getItemTemplate().getNameId();}  }
class C{  private void ensureDependenciesResolved(){  getDelegate(loader);}  }
class C{  private Set<Double> extractValues(Matcher query,String havingQuery) throws BadHavingException {  Set<String> stringValues=createValueSet(query,havingQuery);  Function<String,Double> toNumber=null;  try {    return stringValues.stream().map(toNumber).collect(Collectors.toCollection(null));  } catch (  NumberFormatException e) {    LOG.debug(HAVING_NON_NUMERIC.format(e.getMessage()));    throw new BadHavingException(HAVING_NON_NUMERIC.format(e.getMessage()));  }}  }
class C{  public StringMatcher.Position find(String text,int start,int end){  if (fPattern == null || text == null)   throw new IllegalArgumentException();  int tlen=text.length();  if (start < 0)   start=0;  if (end > tlen)   end=tlen;  if (end < 0 || start >= end)   return null;  if (fLength == 0)   return new Position(start,start);  if (fIgnoreWildCards) {    int x=posIn(text,start,end);    if (x < 0)     return null;    return new Position(x,x + fLength);  }  int segCount=fSegments.length;  if (segCount == 0)   return new Position(start,end);  int curPos=start;  int matchStart=-1;  int i;  for (i=0; i < segCount && curPos < end; ++i) {    String current=fSegments[i];    int nextMatch=regExpPosIn(text,curPos,end,current);    if (nextMatch < 0)     return null;    if (i == 0)     matchStart=nextMatch;    curPos=nextMatch + current.length();  }  if (i < segCount)   return null;  return new Position(matchStart,curPos);}  }
class C{  private String cannonicalPage(String url){  String cannonical="";  if (url.startsWith(HTTP_PROTOCOL)) {    url=url.substring(HTTP_PROTOCOL.length());  } else   if (url.startsWith(HTTPS_PROTOCOL)) {    url=url.substring(HTTPS_PROTOCOL.length());  }  int urlLength=url.length();  for (int i=0; i < urlLength; i++) {    if (url.charAt(i) != '/')     cannonical+=url.charAt(i); else     break;  }  return cannonical;}  }
class C{  @Override public void touchNavigatorIcon(Activity a){  DrawerLayout drawer=(DrawerLayout)a.findViewById(R.id.activity_main_drawerLayout);  drawer.openDrawer(GravityCompat.START);}  }
class C{  static protected boolean hasVowel(String[] phones,int index){  for (int i=index; i < phones.length; i++) {    if (isVowel(phones[i])) {      return true;    }  }  return false;}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public void print(int w,int d){  print(new PrintWriter(System.out,true),w,d);}  }
class C{  public MultiwayPoolBuilder<K,R> concurrencyLevel(int concurrencyLevel){  checkState(this.concurrencyLevel == UNSET_INT,"concurrency level was already set to %s",this.concurrencyLevel);  checkArgument(concurrencyLevel > 0);  this.concurrencyLevel=concurrencyLevel;  return this;}  }
class C{  public boolean contains(T obj){  lock.lock();  try {    if (_objectsMap != null) {      return _objectsMap.containsKey(obj);    }    return contains_impl(obj);  }  finally {    lock.unlock();  }}  }
class C{  final public boolean has(String name){  return context != null && context.containsKey(name);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_WATINGTIME(String value0){  return new SM_SYSTEM_MESSAGE(1300740,value0);}  }
class C{  public static QueryInfo deserializeInfo(JsonObject queryInfoJson) throws JsonParseException {  long infoVersion=queryInfoJson.get("queryInfoVersion").getAsLong();  if (infoVersion != QueryInfo.queryInfoSerialVersionUID) {    throw new JsonParseException("Attempt to deserialize unsupported query info version. Supported: " + QueryInfo.queryInfoSerialVersionUID + "; Received: "+ infoVersion);  }  QuerySchema querySchema;  if (queryInfoJson.get("qSchema").isJsonNull()) {    querySchema=null;  } else {    querySchema=deserializeSchema(queryInfoJson.get("qSchema").getAsJsonObject());  }  QueryInfo info=new QueryInfo(UUID.fromString(queryInfoJson.get("identifier").getAsString()),queryInfoJson.get("numSelectors").getAsInt(),queryInfoJson.get("hashBitSize").getAsInt(),queryInfoJson.get("hashKey").getAsString(),queryInfoJson.get("dataPartitionBitSize").getAsInt(),queryInfoJson.get("queryType").getAsString(),queryInfoJson.get("useExpLookupTable").getAsBoolean(),queryInfoJson.get("embedSelector").getAsBoolean(),queryInfoJson.get("useHDFSExpLookupTable").getAsBoolean(),queryInfoJson.get("numBitsPerDataElement").getAsInt(),querySchema);  return info;}  }
class C{  @Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {  if (context.useNamespaces()) {    if (!XMLChar.isValidNCName(content)) {      throw new InvalidDatatypeValueException("IDREFInvalidWithNamespaces",new Object[]{content});    }  } else {    if (!XMLChar.isValidName(content)) {      throw new InvalidDatatypeValueException("IDREFInvalid",new Object[]{content});    }  }  context.addIdRef(content);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200497,num0,skilltarget,skillname);}  }
class C{  public PhotosReportQuery(VkApiClient client,UserActor actor,int ownerId,int photoId){  super(client,"photos.report",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  photoId(photoId);}  }
class C{  public void translate(final float[] transformedPts,Matrix outputMatrix){  outputMatrix.reset();  outputMatrix.set(mMatrixTouch);  final float x=transformedPts[0] - offsetLeft();  final float y=transformedPts[1] - offsetTop();  outputMatrix.postTranslate(-x,-y);}  }
class C{  private boolean handleSingleTapUp(MotionEvent e){  setEventTarget(mSearchPanel.isCoordinateInsideContent(e.getX() * mPxToDp,e.getY() * mPxToDp) ? EventTarget.SEARCH_CONTENT_VIEW : EventTarget.SEARCH_PANEL);  return false;}  }
class C{  public void startDocument() throws SAXException {  writeText4Links();  reset();  if (!("yes".equals(outputProperties.getProperty(OMIT_XML_DECLARATION,"no")))) {    write("<?xml");    if (version == null) {      write(" version=\"1.0\"");    } else {      write(" version=\"");      write(version);      write("\"");    }    if (outputEncoding != null && outputEncoding != "") {      write(" encoding=\"");      write(outputEncoding);      write("\"");    }    if (standalone == null) {      write(" standalone=\"yes\"?>\n");    } else {      write(" standalone=\"");      write(standalone);      write("\"");    }  }  super.startDocument();}  }
class C{  private void processDataTags(final Element equipmentUnit,final EquipmentConfiguration equipmentConfiguration){  Element dataTagsBlock=(Element)equipmentUnit.getElementsByTagName(DATA_TAGS_ELEMENT).item(0);  NodeList dataTags=dataTagsBlock.getElementsByTagName(DATA_TAG_ELEMENT);  log.debug("\t" + dataTags.getLength() + " DataTags found for current equipment");  SourceDataTag sourceDataTag=null;  for (int i=0; i < dataTags.getLength(); i++) {    sourceDataTag=SourceDataTag.fromConfigXML((Element)dataTags.item(i));    log.debug("\tCreating SourceDataTag object for id " + sourceDataTag.getId() + "..");    if (sourceDataTag.getAddress().getTimeDeadband() > 0) {      sourceDataTag.getAddress().setStaticTimedeadband(true);    }    if (sourceDataTag.getId().longValue() == equipmentConfiguration.getAliveTagId()) {      if (sourceDataTag.getAddress().getPriority() != DataTagAddress.PRIORITY_HIGH) {        log.warn("\tPriority on equipment alive tag " + sourceDataTag.getId() + " is wrongly configured! Adjusting priority to HIGH (7)");        sourceDataTag.getAddress().setPriority(DataTagAddress.PRIORITY_HIGH);      }      if (!sourceDataTag.isControl()) {        log.warn("\tEquipment alive tag " + sourceDataTag.getId() + " is not configured as control tag! Please correct this in the configuration.");      }    }    equipmentConfiguration.getDataTags().put(sourceDataTag.getId(),sourceDataTag);  }}  }
class C{  public Stream<RangeWithCount> stream(){  return buckets_.stream().map(null);}  }
class C{  protected void doIteration(final SimplexTableau tableau) throws MathIllegalStateException {  incrementIterationCount();  Integer pivotCol=getPivotColumn(tableau);  Integer pivotRow=getPivotRow(tableau,pivotCol);  if (pivotRow == null) {    throw new MathIllegalStateException(LocalizedOptimFormats.UNBOUNDED_SOLUTION);  }  tableau.performRowOperations(pivotCol,pivotRow);}  }
class C{  public Object clone(){  return new ParameterRef(paramType,n);}  }
class C{  private void fillBuffer() throws CharacterCodingException {  this.bbuf.compact();  CoderResult result=this.encoder.encode(this.cbuf,this.bbuf,true);  if (result.isError()) {    result.throwException();  }  this.bbuf.flip();}  }
class C{  @Deprecated public EventSessionConfig(Properties props){  loadFromProps(props);}  }
class C{  public CmpExpr newCmpExpr(Value op1,Value op2){  return new GCmpExpr(op1,op2);}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  Log.i("#########","screenX:" + screenResolutionForCamera.x + "   screenY:"+ screenResolutionForCamera.y);  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  public boolean isSuccessCode(){  int aux=code - 200;  return aux >= 0 && aux < 100;}  }
class C{  public void assignNullSerializer(JsonSerializer<Object> nullSer){  if (_nullSerializer != null && _nullSerializer != nullSer) {    throw new IllegalStateException("Can not override null serializer");  }  _nullSerializer=nullSer;}  }
class C{  public Rotation revert(){  return new Rotation(-q0,q1,q2,q3,false);}  }
class C{  public void copyFiles(Collection<OCFile> files,OCFile targetFolder){  for (  OCFile file : files) {    Intent service=new Intent(mFileActivity,OperationsService.class);    service.setAction(OperationsService.ACTION_COPY_FILE);    service.putExtra(OperationsService.EXTRA_NEW_PARENT_PATH,targetFolder.getRemotePath());    service.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());    service.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());    mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(service);  }  mFileActivity.showLoadingDialog(mFileActivity.getString(R.string.wait_a_moment));}  }
class C{  public RequestHandle head(String url,ResponseHandlerInterface responseHandler){  return head(null,url,null,responseHandler);}  }
class C{  public static boolean isHttpStatusCode(Throwable throwable,int statusCode){  return throwable instanceof HttpException && ((HttpException)throwable).code() == statusCode;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public static void copyProperties(Object from,Object to) throws Exception {  copyPropertiesExclude(from,to,null);}  }
class C{  protected int do_modify_file(String group_name,String appender_filename,long file_offset,long modify_size,UploadCallback callback) throws IOException, MyException {  byte[] header;  boolean bNewConnection;  Socket storageSocket;  byte[] hexLenBytes;  byte[] appenderFilenameBytes;  int offset;  long body_len;  if ((group_name == null || group_name.length() == 0) || (appender_filename == null || appender_filename.length() == 0)) {    this.errno=ProtoCommon.ERR_NO_EINVAL;    return this.errno;  }  bNewConnection=this.newUpdatableStorageConnection(group_name,appender_filename);  try {    storageSocket=this.storageServer.getSocket();    appenderFilenameBytes=appender_filename.getBytes(ClientGlobal.g_charset);    body_len=3 * ProtoCommon.FDFS_PROTO_PKG_LEN_SIZE + appenderFilenameBytes.length + modify_size;    header=ProtoCommon.packHeader(ProtoCommon.STORAGE_PROTO_CMD_MODIFY_FILE,body_len,(byte)0);    byte[] wholePkg=new byte[(int)(header.length + body_len - modify_size)];    System.arraycopy(header,0,wholePkg,0,header.length);    offset=header.length;    hexLenBytes=ProtoCommon.long2buff(appender_filename.length());    System.arraycopy(hexLenBytes,0,wholePkg,offset,hexLenBytes.length);    offset+=hexLenBytes.length;    hexLenBytes=ProtoCommon.long2buff(file_offset);    System.arraycopy(hexLenBytes,0,wholePkg,offset,hexLenBytes.length);    offset+=hexLenBytes.length;    hexLenBytes=ProtoCommon.long2buff(modify_size);    System.arraycopy(hexLenBytes,0,wholePkg,offset,hexLenBytes.length);    offset+=hexLenBytes.length;    OutputStream out=storageSocket.getOutputStream();    System.arraycopy(appenderFilenameBytes,0,wholePkg,offset,appenderFilenameBytes.length);    offset+=appenderFilenameBytes.length;    out.write(wholePkg);    if ((this.errno=(byte)callback.send(out)) != 0) {      return this.errno;    }    ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(storageSocket.getInputStream(),ProtoCommon.STORAGE_PROTO_CMD_RESP,0);    this.errno=pkgInfo.errno;    if (pkgInfo.errno != 0) {      return this.errno;    }    return 0;  } catch (  IOException ex) {    if (!bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }    throw ex;  } finally {    if (bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }  }}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  public ExplainScan(Scan s,Schema schema,String explain){  this.result="\n" + explain;  this.schema=schema;  s.beforeFirst();  while (s.next())   numRecs++;  s.close();  this.result=result + "\nActual #recs: " + numRecs;}  }
class C{  public static void reset(){  fuelCaches=new HashMap<EntityPlayerMP,Integer>();}  }
class C{  private void beforeValue() throws JSONException {  if (stack.isEmpty()) {    return;  }  Scope context=peek();  if (context == Scope.EMPTY_ARRAY) {    replaceTop(Scope.NONEMPTY_ARRAY);    newline();  } else   if (context == Scope.NONEMPTY_ARRAY) {    out.append(',');    newline();  } else   if (context == Scope.DANGLING_KEY) {    out.append(indent == null ? ":" : ": ");    replaceTop(Scope.NONEMPTY_OBJECT);  } else   if (context != Scope.NULL) {    throw new JSONException("Nesting problem");  }}  }
class C{  private static double cosQ(double xa,double xb){  final double pi2a=1.5707963267948966;  final double pi2b=6.123233995736766E-17;  final double a=pi2a - xa;  double b=-(a - pi2a + xa);  b+=pi2b - xb;  return sinQ(a,b);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public NativeImageLoader(int height,int width,int channels,boolean centerCropIfNeeded){  this(height,width,channels);  this.centerCropIfNeeded=centerCropIfNeeded;}  }
class C{  public boolean isAbsoluteValueDeadband(final Number currentValue,final Number newValue,final float valueDeadband){  this.equipmentLogger.trace("entering isAbsoluteValueDeadband()..");  boolean isAbsoluteValueDeadband=currentValue != null && newValue != null && Math.abs(currentValue.doubleValue() - newValue.doubleValue()) < valueDeadband;  this.equipmentLogger.trace("leaving isAbsoluteValueDeadband().. Result: " + isAbsoluteValueDeadband);  return isAbsoluteValueDeadband;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @Override public void onClick(View v){  LogUtil.e("position = " + position);  new BossZoomHelper((Activity)context,bossJumpView,400);}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new JSONException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    remove(key);  }  return this;}  }
class C{  public DocumentNGramDistroGraph[] intersectAndDeltaDistroGraph(DocumentNGramDistroGraph dgOtherGraph){  DocumentNGramDistroGraph dgUnion=(DocumentNGramDistroGraph)clone();  dgUnion.mergeDistroGraph(dgOtherGraph);  DocumentNGramDistroGraph[] res=new DocumentNGramDistroGraph[2];  DocumentNGramDistroGraph dgIntersection=intersectDistroGraph(dgOtherGraph);  res[0]=dgIntersection;  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gUnion=dgUnion.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gIntersection=dgIntersection.getGraphLevelByNGramSize(iCurLvl);    EdgeCachedLocator eclLocator=new EdgeCachedLocator(10);    if (gIntersection == null)     continue;    java.util.Iterator iIter=gIntersection.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gUnion,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gUnion.removeEdge(eEdge);        dgUnion.getEdgesToDistros().remove(eEdge);      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  res[1]=dgUnion;  return res;}  }
class C{  public static Complex valueOf(double realPart,double imaginaryPart){  if (Double.isNaN(realPart) || Double.isNaN(imaginaryPart)) {    return NaN;  }  return new Complex(realPart,imaginaryPart);}  }
class C{  public void loadMeganSummaryFile() throws IOException {  BufferedReader reader=new BufferedReader(new InputStreamReader(Basic.getInputStreamPossiblyZIPorGZIP(getMeganFile().getFileName())));  getDataTable().read(reader,false);  getSampleAttributeTable().read(reader,getSampleNames(),true);  reader.close();  String parameters=getDataTable().getParameters();  if (parameters != null) {    parseParameterString(parameters);  }  getActiveViewers().clear();  getActiveViewers().addAll(getDataTable().getClassification2Class2Counts().keySet());  loadColorTableFromDataTable();}  }
class C{  public static boolean createNewLockFile(String filePath,FileType fileType) throws IOException {  filePath=filePath.replace("\\","/");switch (fileType) {case HDFS:case VIEWFS:    Path path=new Path(filePath);  FileSystem fs=path.getFileSystem(configuration);if (fs.createNewFile(path)) {  fs.deleteOnExit(path);  return true;}return false;case LOCAL:default :File file=new File(filePath);return file.createNewFile();}}  }
class C{  private void appendVal(Constant val){  myPage.setVal(currentPos,val);  currentPos+=Page.size(val);}  }
class C{  public static double[] lpc2lsfInHz(double[] oneMinusA,int samplingRate){  return lpc2lsfInHz(oneMinusA,samplingRate,4);}  }
class C{  public void addLanguage(Language language){  addLanguage(language.getId());}  }
class C{  public void useless_testMatricesValues2(){  RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{0.0 / 5.0,3.0 / 5.0,0.0 / 5.0},{-4.0 / 5.0,0.0 / 5.0,-3.0 / 5.0},{0.0 / 5.0,4.0 / 5.0,0.0 / 5.0},{-3.0 / 5.0,0.0 / 5.0,4.0 / 5.0}});  RealMatrix sRef=MatrixUtils.createRealMatrix(new double[][]{{4.0,0.0,0.0},{0.0,3.0,0.0},{0.0,0.0,2.0}});  RealMatrix vRef=MatrixUtils.createRealMatrix(new double[][]{{80.0 / 125.0,-60.0 / 125.0,75.0 / 125.0},{24.0 / 125.0,107.0 / 125.0,60.0 / 125.0},{-93.0 / 125.0,-24.0 / 125.0,80.0 / 125.0}});  SingularValueDecomposition svd=new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare));  RealMatrix u=svd.getU();  Assert.assertEquals(0,u.subtract(uRef).getNorm(),normTolerance);  RealMatrix s=svd.getS();  Assert.assertEquals(0,s.subtract(sRef).getNorm(),normTolerance);  RealMatrix v=svd.getV();  Assert.assertEquals(0,v.subtract(vRef).getNorm(),normTolerance);  Assert.assertTrue(u == svd.getU());  Assert.assertTrue(s == svd.getS());  Assert.assertTrue(v == svd.getV());}  }
class C{  public Shape ellipse(double x,double y,double width,double height){  m_ellipse.setFrame(x,y,width,height);  return m_ellipse;}  }
class C{  @Override public OrientedPoint copySelf(){  return this;}  }
class C{  public MineWindow(){  initialize();}  }
class C{  @VisibleForTesting public ResultCard(int expirationMonth,int expirationYear,String pan,String cvn){  mExpirationMonth=expirationMonth;  mExpirationYear=expirationYear;  mPan=pan;  mCvn=cvn;}  }
class C{  private boolean isAssetUpdateNeeded(Asset asset,String newAssetContent){  boolean assetProcessingNeeded=false;  if (!asset.getContentMd5().equals(DigestUtils.md5Hex(newAssetContent))) {    logger.debug("Content has changed, processing needed");    assetProcessingNeeded=true;  } else   if (asset.getLastSuccessfulAssetExtraction() == null) {    logger.debug("No asset extraction, processing needed");    assetProcessingNeeded=true;  } else   if (!asset.getContentMd5().equals(asset.getLastSuccessfulAssetExtraction().getContentMd5())) {    logger.debug("The last successful extraction is older than the last asset version, processing needed");    assetProcessingNeeded=true;  }  return assetProcessingNeeded;}  }
class C{  public String delVar(String variable){  return delVar(namespace,variable);}  }
class C{  public boolean hasObservers(){  return observers.get().length != 0;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public int compare(Object[] rowA,Object[] rowB){  int diff=0;  for (int i=0; i < dimensionCount; i++) {    int dimFieldA=RemoveDictionaryUtil.getDimension(i,rowA);    int dimFieldB=RemoveDictionaryUtil.getDimension(i,rowB);    diff=dimFieldA - dimFieldB;    if (diff != 0) {      return diff;    }  }  return diff;}  }
class C{  public ActionList(Visualization vis,long duration){  super(vis,duration);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  private void formatPeriods(Collection<ValidationResult> results,I18nFormat format){  if (format != null) {    for (    ValidationResult result : results) {      if (result != null && result.getPeriod() != null) {        result.getPeriod().setName(format.formatPeriod(result.getPeriod()));      }    }  }}  }
class C{  public TopicSubscriber createDurableSubscriber(Topic topic,String name,String messageSelector,boolean noLocal) throws JMSException {  ensureOpen();  throw new JMSException("This version of JMS does not support durable subscribers.");}  }
class C{  public DOMFactory(final String defaultNamespace){  this.setDefaultNamespace(defaultNamespace);  documentBuilderFactory=DocumentBuilderFactory.newInstance();}  }
class C{  public LeastSquaresBuilder start(final RealVector newStart){  this.start=newStart;  return this;}  }
class C{  public boolean isExperimentEnabled(String experiment){  return experiments.contains(experiment);}  }
class C{  @RequestMapping(value="/",method=PUT,produces=APPLICATION_JSON_VALUE) public ResponseEntity<AuthorDTO> update(@RequestBody AuthorDTO authorDTO) throws URISyntaxException {  log.debug("Update AuthorDTO : {}",authorDTO);  if (!authorDTO.isIdSet()) {    return create(authorDTO);  }  AuthorDTO result=authorDTOService.save(authorDTO);  return ResponseEntity.ok().body(result);}  }
class C{  public RenderTransformationDialog(GeoServerConnectionManagerInterface geoServerConnectionManager){  super(Controller.getInstance().getFrame(),Localisation.getString(RenderTransformationDialog.class,"RenderTransformationDialog.title"),true);  this.geoServerConnectionManager=geoServerConnectionManager;  if (expressionPanel == null) {    expressionPanel=ExpressionPanelFactory.getExpressionPanel("v2");  }  createUI();  Dimension preferredSize=new Dimension(600,400);  setSize(preferredSize);  Controller.getInstance().centreDialog(this);}  }
class C{  protected long calculateDuration(LeasedResource resource,long requestedDuration){  if (requestedDuration == Lease.FOREVER)   requestedDuration=Long.MAX_VALUE; else   if (requestedDuration == Lease.ANY)   requestedDuration=defaultLength; else   if (requestedDuration < 0)   throw new IllegalArgumentException("Negative lease duration " + "requested");  return Math.min(requestedDuration,maximum);}  }
class C{  private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){  if (count == 1 && startmode == TEXT_COMPACTION) {    sb.append((char)SHIFT_TO_BYTE);  } else {    if ((count % 6) == 0) {      sb.append((char)LATCH_TO_BYTE);    } else {      sb.append((char)LATCH_TO_BYTE_PADDED);    }  }  int idx=startpos;  if (count >= 6) {    char[] chars=new char[5];    while ((startpos + count - idx) >= 6) {      long t=0;      for (int i=0; i < 6; i++) {        t<<=8;        t+=bytes[idx + i] & 0xff;      }      for (int i=0; i < 5; i++) {        chars[i]=(char)(t % 900);        t/=900;      }      for (int i=chars.length - 1; i >= 0; i--) {        sb.append(chars[i]);      }      idx+=6;    }  }  for (int i=idx; i < startpos + count; i++) {    int ch=bytes[i] & 0xff;    sb.append((char)ch);  }}  }
class C{  private void buildRowsPerPagePanel(){  rowsPerPagePanel.setInitialClasses(TableCssName.ROWS_PER_PAGE_PANEL);  rowsPerPagePanel.setGrid("s12 m4 l3");  rowsPerPagePanel.add(listRowsPerPage);  rowsPerPagePanel.add(rowsPerPageLabel);  add(rowsPerPagePanel);}  }
class C{  public boolean isLastRegistrar(String protocol){  if (_objMap.isEmpty())   return true;  List<Entry> entryValue=new ArrayList<Entry>(_objMap.values());  for (Iterator<Entry> iter=entryValue.iterator(); iter.hasNext(); ) {    Entry e=iter.next();    if (e._protocol.equals(protocol))     return false;  }  return true;}  }
class C{  @SuppressWarnings("rawtypes") public boolean contextsByCallChain(Edge[] callEdgeChain,Local l,PtSensVisitor visitor){  SootMethod firstMethod=callEdgeChain[0].src();  int firstMethodID=geomPts.getIDFromSootMethod(firstMethod);  if (firstMethodID == -1)   return false;  LocalVarNode vn=geomPts.findLocalVarNode(l);  if (vn == null) {    return false;  }  IVarAbstraction pn=geomPts.findInternalNode(vn);  if (pn == null) {    return false;  }  pn=pn.getRepresentative();  if (!pn.hasPTResult())   return false;  SootMethod sm=vn.getMethod();  if (geomPts.getIDFromSootMethod(sm) == -1)   return false;  visitor.prepare();  long L=1;  for (int i=0; i < callEdgeChain.length; ++i) {    Edge sootEdge=callEdgeChain[i];    CgEdge ctxt=geomPts.getInternalEdgeFromSootEdge(sootEdge);    if (ctxt == null || ctxt.is_obsoleted == true)     return false;    int caller=geomPts.getIDFromSootMethod(sootEdge.src());    long block_size=max_context_size_block[rep_cg[caller]];    long in_block_offset=(L - 1) % block_size;    L=ctxt.map_offset + in_block_offset;  }  long ctxtLength=max_context_size_block[rep_cg[firstMethodID]];  long R=L + ctxtLength;  pn.get_all_context_sensitive_objects(L,R,visitor);  visitor.finish();  return visitor.numOfDiffObjects() != 0;}  }
class C{  private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  initialize();  HeadIndex<K,V> h=head;  Node<K,V> basepred=h.node;  ArrayList<Index<K,V>> preds=new ArrayList<Index<K,V>>();  for (int i=0; i <= h.level; ++i)   preds.add(null);  Index<K,V> q=h;  for (int i=h.level; i > 0; --i) {    preds.set(i,q);    q=q.down;  }  for (; ; ) {    Object k=s.readObject();    if (k == null)     break;    Object v=s.readObject();    if (v == null)     throw new NullPointerException();    K key=(K)k;    V val=(V)v;    int j=randomLevel();    if (j > h.level)     j=h.level + 1;    Node<K,V> z=new Node<K,V>(key,val,null);    basepred.next=z;    basepred=z;    if (j > 0) {      Index<K,V> idx=null;      for (int i=1; i <= j; ++i) {        idx=new Index<K,V>(z,idx,null);        if (i > h.level)         h=new HeadIndex<K,V>(h.node,h,idx,i);        if (i < preds.size()) {          preds.get(i).right=idx;          preds.set(i,idx);        } else         preds.add(idx);      }    }  }  head=h;}  }
class C{  private static int addAllTabs(Stack stack,StackTab[] outList,int index){  StackTab[] stackTabs=stack.getTabs();  if (stackTabs != null) {    for (int i=0; i < stackTabs.length; ++i) {      outList[index++]=stackTabs[i];    }  }  return index;}  }
class C{  public final void closeFallbackOutputStream() throws DataFallbackException {  if (output != null) {    if (LOG.isDebugEnabled())     LOG.debug("Closing the file writer for the file " + dataFile.getName());    try {      output.close();    } catch (    IOException e) {      throw new DataFallbackException(e.getMessage());    } finally {      output=null;    }  }}  }
class C{  public Call put(String url,Map<String,String> params,Callback callback){  Request request=new Builder().url(url).put(bodyFromMap(params)).build();  Call call=client.newCall(request);  call.enqueue(callback);  return call;}  }
class C{  public SortedSet<String> fields(){  if (myFieldSet == null)   myFieldSet=new TreeSet<String>(fields.keySet());  return myFieldSet;}  }
class C{  public FieldRefNode makeGlobalFieldRefNode(Object baseValue,Type baseType,SparkField field){  VarNode base=makeGlobalVarNode(baseValue,baseType);  return makeFieldRefNode(base,field);}  }
class C{  public WikiDimensions(){  this.dimensionConfigs=Collections.unmodifiableSet(Arrays.stream(WikiApiDimensionName.values()).map(null).collect(Collectors.toSet()));  wikiApiDimensionNameToConfig=dimensionConfigs.stream().collect(StreamUtils.toLinkedMap(null,Function.identity()));}  }
class C{  public static Map<String,Object> addToSolrIndex(DispatchContext dctx,Map<String,Object> context) throws GenericEntityException {  HttpSolrClient client=null;  Map<String,Object> result;  String productId=(String)context.get("productId");  Boolean treatConnectErrorNonFatal=(Boolean)context.get("treatConnectErrorNonFatal");  try {    Debug.logInfo("Solr: Generating and indexing document for productId '" + productId + "'",module);    if (UtilValidate.isNotEmpty(context.get("core")))     client=new HttpSolrClient(SolrUtil.solrUrl + "/" + context.get("core")); else     client=new HttpSolrClient(SolrUtil.solrFullUrl);    SolrInputDocument doc1=SolrUtil.generateSolrDocument(context);    Collection<SolrInputDocument> docs=new ArrayList<SolrInputDocument>();    if (Debug.verboseOn()) {      Debug.logVerbose("Solr: Indexing document: " + doc1.toString(),module);    }    docs.add(doc1);    client.add(docs);    client.commit();    final String statusStr="Document for productId " + productId + " added to solr index";    Debug.logInfo("Solr: " + statusStr,module);    result=ServiceUtil.returnSuccess(statusStr);  } catch (  MalformedURLException e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());    result.put("errorType","urlError");  }catch (  SolrServerException e) {    if (e.getCause() != null && e.getCause() instanceof ConnectException) {      final String statusStr="Failure connecting to solr server to commit productId " + context.get("productId") + "; product not updated";      if (Boolean.TRUE.equals(treatConnectErrorNonFatal)) {        Debug.logWarning(e,"Solr: " + statusStr,module);        result=ServiceUtil.returnFailure(statusStr);      } else {        Debug.logError(e,"Solr: " + statusStr,module);        result=ServiceUtil.returnError(statusStr);      }      result.put("errorType","connectError");    } else {      Debug.logError(e,e.getMessage(),module);      result=ServiceUtil.returnError(e.toString());      result.put("errorType","solrServerError");    }  }catch (  IOException e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());    result.put("errorType","ioError");  } finally {    try {      if (UtilValidate.isNotEmpty(client))       client.close();    } catch (    IOException e) {      result=ServiceUtil.returnError(e.toString());      result.put("errorType","ioError");    }  }  return result;}  }
class C{  public void writeColumn(String value) throws IllegalArgumentException, IOException {  if (value == null) {    if (!this.nullableColumns[this.currentColumn]) {      throw new IllegalArgumentException("Bulk load will fail as a null value cannot be assigned to column '" + this.columns[this.currentColumn] + "'");    }  } else {    this.dataFileWriter.write(value);  }  if (this.currentColumn < (this.columns.length - 1)) {    this.dataFileWriter.write(FIELD_TERMINATOR);  }  this.currentColumn++;}  }
class C{  public static TransferTagImpl createTransferTag(final TagWithAlarms tagWithAlarms,boolean aliveTag){  Tag tag=tagWithAlarms.getTag();  TransferTagImpl transferTag=null;  if (tag != null) {    transferTag=new TransferTagImpl(tag.getId(),tag.getValue(),tag.getValueDescription(),(DataTagQualityImpl)tag.getDataTagQuality(),getTagMode(tag),tag.getTimestamp(),tag instanceof DataTag ? ((DataTag)tag).getDaqTimestamp() : null,tag.getCacheTimestamp(),tag.getDescription(),tag.getName(),tag.getTopic());    String dataType=isKnownClass(tag.getDataType()) ? getType(tag.getDataType()).getName() : tag.getDataType();    transferTag.setValueClassName(dataType);    addAlarmValues(transferTag,tagWithAlarms.getAlarms());    transferTag.setSimulated(tag.isSimulated());    transferTag.setUnit(tag.getUnit());    transferTag.addEquipmentIds(tag.getEquipmentIds());    transferTag.addSubEquipmentIds(tag.getSubEquipmentIds());    transferTag.addProcessIds(tag.getProcessIds());    if (tag.getMetadata() != null) {      transferTag.setMetadata(tag.getMetadata().getMetadata());    }    if (tag instanceof RuleTag) {      transferTag.defineRuleExpression(((RuleTag)tag).getRuleExpression());    } else     if (tag instanceof ControlTag) {      transferTag.setControlTagFlag(true);      transferTag.setAliveTagFlag(aliveTag);    }  }  return transferTag;}  }
class C{  public static final Ellipse scale(Ellipse ellipse,double scale){  if (ellipse == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  return new Ellipse(ellipse.getWidth() * scale,ellipse.getHeight() * scale);}  }
class C{  public String localName(){  return theType.localName();}  }
class C{  public Map<String,String> retrieveTagProcessMetadata(Tag tag){  long equipmentId=DEFAULT_ID;  long subEquipmentId=DEFAULT_ID;  long processId=DEFAULT_ID;  boolean subEquipmentIsPresent=!CollectionUtils.isEmpty(tag.getSubEquipmentIds());  boolean EquipmentIsPresent=!CollectionUtils.isEmpty(tag.getEquipmentIds());  boolean processIsPresent=!CollectionUtils.isEmpty(tag.getProcessIds());  if (subEquipmentIsPresent) {    subEquipmentId=tag.getSubEquipmentIds().iterator().next();    equipmentId=searchEquipmentInSubEquipmentCache(subEquipmentId);    processId=searchProcessIdInEquipmentCache(equipmentId);    return extractMetadata(processId,equipmentId,subEquipmentId);  }  if (EquipmentIsPresent) {    equipmentId=tag.getEquipmentIds().iterator().next();    processId=searchProcessIdInEquipmentCache(equipmentId);    return extractMetadata(processId,equipmentId,subEquipmentId);  }  if (processIsPresent) {    processId=tag.getProcessIds().iterator().next();    return extractMetadata(processId,equipmentId,subEquipmentId);  }  log.debug("no Process, Equipment or SubEquipment found for tag #{}",tag.getId());  return Collections.emptyMap();}  }
class C{  public void computeAxis(float yMin,float yMax){  if (mViewPortHandler.contentWidth() > 10 && !mViewPortHandler.isFullyZoomedOutY()) {    PointD p1=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop());    PointD p2=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentBottom());    if (!mYAxis.isInverted()) {      yMin=(float)p2.y;      yMax=(float)p1.y;    } else {      yMin=(float)p1.y;      yMax=(float)p2.y;    }  }  computeAxisValues(yMin,yMax);}  }
class C{  protected void paint3DRectLighting(Graphics2D g2,int x,int y,int width,int height){  g2.setColor(Color.white);  g2.drawLine(x + 1,y + 1,x + 1,y + height - 1);  g2.drawLine(x + 1,y + 1,x + width - 1,y + 1);  g2.setColor(Color.gray);  g2.drawLine(x + 1,y + height - 1,x + width - 1,y + height - 1);  g2.drawLine(x + width - 1,y + 1,x + width - 1,y + height - 1);  g2.setColor(Color.darkGray);  g2.drawLine(x,y + height,x + width,y + height);  g2.drawLine(x + width,y,x + width,y + height);}  }
class C{  public static int pixelToDp(Context c,int px){  return (int)(px / c.getResources().getDisplayMetrics().density);}  }
class C{  private static boolean isInVerticalTargetZone(float x,float y,float handleX,float handleYStart,float handleYEnd,float targetRadius){  return (Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd);}  }
class C{  public AdsCreateClientsQuery createClients(UserActor actor,int accountId,String data){  return new AdsCreateClientsQuery(getClient(),actor,accountId,data);}  }
class C{  public final void clearFileContents() throws DataFallbackException {  if (!dataFile.delete()) {    LOG.error("clearFileContents() - The original file could not be deleted");    throw new DataFallbackException("The file " + dataFile.getAbsolutePath() + " could not be deleted");  } else {    LOG.info("clearFileContents() - The " + dataFile.getAbsolutePath() + " has been deleted");    try {      if (dataFile.createNewFile()) {        if (LOG.isDebugEnabled())         LOG.debug("clearFileContents() - The " + dataFile.getAbsolutePath() + " has been created");      }    } catch (    IOException e) {      LOG.error("clearFileContents() : Error while creating the fallback file " + e.getMessage());    }    initializeCounterFile();  }}  }
class C{  protected User createUserAndInjectSecurityContext(boolean allAuth,String... auths){  return createUserAndInjectSecurityContext(null,allAuth,auths);}  }
class C{  public KeyAlreadySetException(){  super();}  }
class C{  @Override public void addTab(Tab tab,int index,TabLaunchType type){  try {    TraceEvent.begin("TabModelImpl.addTab");    for (    TabModelObserver obs : mObservers)     obs.willAddTab(tab,type);    boolean selectTab=mOrderController.willOpenInForeground(type,isIncognito());    index=mOrderController.determineInsertionIndex(type,index,tab);    assert index <= mTabs.size();    assert tab.isIncognito() == isIncognito();    commitAllTabClosures();    if (index < 0 || index > mTabs.size()) {      mTabs.add(tab);    } else {      mTabs.add(index,tab);      if (index <= mIndex) {        mIndex++;      }    }    if (!isCurrentModel()) {      mIndex=Math.max(mIndex,0);    }    mRewoundList.resetRewoundState();    int newIndex=indexOf(tab);    tabAddedToModel(tab);    for (    TabModelObserver obs : mObservers)     obs.didAddTab(tab,type);    if (selectTab) {      mModelDelegate.selectModel(isIncognito());      setIndex(newIndex,TabModel.TabSelectionType.FROM_NEW);    }  }  finally {    TraceEvent.end("TabModelImpl.addTab");  }}  }
class C{  public int readLine(byte b[],int off,int len) throws IOException {  int result, left=totalExpected - totalRead;  if (left <= 0) {    return -1;  } else {    result=((javax.servlet.ServletInputStream)in).readLine(b,off,Math.min(left,len));  }  if (result > 0) {    totalRead+=result;  }  return result;}  }
class C{  public String encodeSLD(StyledLayerDescriptor sld){  StringWriter out=new StringWriter();  if (sld != null) {    try {      Ysld.encode(sld,out);    } catch (    IOException e) {      ConsoleManager.getInstance().exception(this,e);    }  }  return out.toString();}  }
class C{  public static ModelIndex create(ModelEntity modelEntity,String description,String name,List<Field> fields,boolean unique){  if (description == null) {    description="";  }  if (name == null) {    name="";  }  if (fields == null) {    fields=Collections.emptyList();  } else {    fields=Collections.unmodifiableList(fields);  }  return new ModelIndex(modelEntity,description,name,fields,unique);}  }
class C{  @Deployment public void testActivityCompensationEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("compensationProcess");  assertNotNull(processInstance);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.complete(task.getId());  assertEquals(1,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiActivityEvent);  ActivitiActivityEvent activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_COMPENSATE,activityEvent.getType());  assertEquals("compensate",activityEvent.getActivityId());  assertFalse(processInstance.getId().equals(activityEvent.getExecutionId()));  assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());  processInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(processInstance);  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_COMPENSATE);}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public static String slurpURL(URL u,String encoding) throws IOException {  String lineSeparator=System.getProperty("line.separator");  URLConnection uc=u.openConnection();  uc.setReadTimeout(30000);  InputStream is;  try {    is=uc.getInputStream();  } catch (  SocketTimeoutException e) {    System.err.println("Time out. Return empty string");    return "";  }  BufferedReader br=new BufferedReader(new InputStreamReader(is,encoding));  String temp;  StringBuilder buff=new StringBuilder(16000);  while ((temp=br.readLine()) != null) {    buff.append(temp);    buff.append(lineSeparator);  }  br.close();  return buff.toString();}  }
class C{  public static void recover(File file){  Connection c=null;  ResultSet r1=null;  Statement stat=null;  try {    ZipInputStream zip=new ZipInputStream(new FileInputStream(file));    zip.getNextEntry();    BufferedReader in=new BufferedReader(new InputStreamReader(zip));    c=getConnection();    DatabaseMetaData m1=c.getMetaData();    r1=m1.getTables(null,null,null,new String[]{"TABLE"});    while (r1.next()) {      try {        stat=c.createStatement();        stat.execute("delete from " + r1.getString("TABLE_NAME"));        stat.close();        stat=null;      } catch (      Exception e) {        log.error("ignore this exception",e);      }    }    String line=in.readLine();    while (line != null) {      _recover(line,c);      line=in.readLine();    }    zip.closeEntry();    in.close();  } catch (  Exception e) {    log.error(e.getMessage(),e);  } finally {    close(r1,stat,c);  }}  }
class C{  static void scheduleRetry(Context context){  new Handler(context.getMainLooper()).post(new Scheduler(context));}  }
class C{  @Override protected boolean requiresAuthentication(HttpServletRequest request,HttpServletResponse response){  return true;}  }
class C{  @Override public void stopAnyPlayback(){  if (SHOW_LOGS)   Logger.v(TAG,">> stopAnyPlayback, mCurrentPlayerState " + mCurrentPlayerState);  mPlayerHandler.pauseQueueProcessing(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"stopAnyPlayback, mCurrentPlayerState " + mCurrentPlayerState);  mPlayerHandler.clearAllPendingMessages(TAG);  stopResetReleaseClearCurrentPlayer();  mPlayerHandler.resumeQueueProcessing(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"<< stopAnyPlayback, mCurrentPlayerState " + mCurrentPlayerState);}  }
class C{  public Stereo2Mono(int mode){  this.mode=mode;}  }
class C{  public void startSwipe(RecyclerView.ViewHolder viewHolder){  initializeItemTouchHelper();  mDefaultItemTouchHelper.startSwipe(viewHolder);}  }
class C{  public static UInteger valueOf(String value) throws NumberFormatException {  return valueOfUnchecked(rangeCheck(Long.parseLong(value)));}  }
class C{  public String toString(){  return "MbrolaVoice";}  }
class C{  @SuppressWarnings("unchecked") public static <R>JoinObservable<R> when(Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,Plan<R> p5){  return from(JoinPatterns.when(p1,p2,p3,p4,p5));}  }
class C{  public java_cup.runtime.Symbol next_token() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    boolean zzR=false;    int zzCh;    int zzCharCount;    for (zzCurrentPosL=zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL+=zzCharCount) {      zzCh=Character.codePointAt(zzBufferL,zzCurrentPosL,zzMarkedPosL);      zzCharCount=Character.charCount(zzCh);switch (zzCh) {case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        yyline++;      yycolumn=0;    zzR=false;  break;case '\r':yyline++;yycolumn=0;zzR=true;break;case '\n':if (zzR) zzR=false; else {yyline++;yycolumn=0;}break;default :zzR=false;yycolumn+=zzCharCount;}}if (zzR) {boolean zzPeek;if (zzMarkedPosL < zzEndReadL) zzPeek=zzBufferL[zzMarkedPosL] == '\n'; else if (zzAtEOF) zzPeek=false; else {boolean eof=zzRefill();zzEndReadL=zzEndRead;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;if (eof) zzPeek=false; else zzPeek=zzBufferL[zzMarkedPosL] == '\n';}if (zzPeek) yyline--;}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;zzState=ZZ_LEXSTATE[zzLexicalState];int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;}zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) {zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);zzCurrentPosL+=Character.charCount(zzInput);} else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {zzInput=YYEOF;break zzForAction;} else {zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);zzCurrentPosL+=Character.charCount(zzInput);}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();switch (zzLexicalState) {case YYINITIAL:{return symbol(EOF);}case 178:break;default :{return symbol(EOF);}}} else {switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{}case 78:break;case 2:{return symbol(MINUS);}case 79:break;case 3:{yybegin(STRING);string.setLength(0);}case 80:break;case 4:{return symbol(IDENTIFIER,yytext());}case 81:break;case 5:{return symbol(NUMBER,yytext());}case 82:break;case 6:{return symbol(MORE);}case 83:break;case 7:{return symbol(DIVIDE_MOD);}case 84:break;case 8:{return symbol(ARG_SPLITTER);}case 85:break;case 9:{return symbol(PLUS);}case 86:break;case 10:{return symbol(DIVIDE);}case 87:break;case 11:{return symbol(MULTIPLY);}case 88:break;case 12:{return symbol(COLON);}case 89:break;case 13:{return symbol(ASSIGN);}case 90:break;case 14:{return symbol(LESS);}case 91:break;case 15:{return symbol(OPEN_BRACKET);}case 92:break;case 16:{return symbol(CLOSE_BRACKET);}case 93:break;case 17:{return symbol(OPEN_SQUARE_BRACKET);}case 94:break;case 18:{return symbol(CLOSE_SQUARE_BRACKET);}case 95:break;case 19:{return symbol(OPEN_BIG_BRACKET);}case 96:break;case 20:{return symbol(CLOSE_BIG_BRACKET);}case 97:break;case 21:{string.append(yytext());}case 98:break;case 22:{yybegin(YYINITIAL);return symbol(STRING_DEFINITION,string);}case 99:break;case 23:{}case 100:break;case 24:{return symbol(RIGHT_POINTER);}case 101:break;case 25:{return symbol(MINUS_ASSIGN);}case 102:break;case 26:{return symbol(IF);}case 103:break;case 27:{return symbol(IS);}case 104:break;case 28:{return symbol(OR);}case 105:break;case 29:{return symbol(FKUUID,yytext());}case 106:break;case 30:{return symbol(STRING_CAT);}case 107:break;case 31:{return symbol(MORE_OR_EQUAL);}case 108:break;case 32:{return symbol(DIVIDE_MOD_ASSIGN);}case 109:break;case 33:{return symbol(INC);}case 110:break;case 34:{return symbol(PLUS_ASSIGN);}case 111:break;case 35:{return symbol(DIVIDE_ASSIGN);}case 112:break;case 36:{return symbol(MULTIPLY_ASSIGN);}case 113:break;case 37:{return symbol(NEW_ASSIGN);}case 114:break;case 38:{return symbol(EQUAL);}case 115:break;case 39:{return symbol(LESS_OR_EQUAL);}case 116:break;case 40:{return symbol(NOT_EQUAL);}case 117:break;case 41:{string.append('\\');}case 118:break;case 42:{string.append('\"');}case 119:break;case 43:{string.append('\r');}case 120:break;case 44:{string.append('\t');}case 121:break;case 45:{string.append('\n');}case 122:break;case 46:{string.append('\b');}case 123:break;case 47:{string.append('\f');}case 124:break;case 48:{string.append('\'');}case 125:break;case 49:{return symbol(VAR_BEGIN);}case 126:break;case 50:{return symbol(IDENTIFIER_DOT,yytext());}case 127:break;case 51:{return symbol(AND);}case 128:break;case 52:{return symbol(END);}case 129:break;case 53:{return symbol(NOT);}case 130:break;case 54:{return symbol(FOR);}case 131:break;case 55:{return symbol(FKFLOAT,yytext());}case 132:break;case 56:{return symbol(IDENTIFIER_POINTER,yytext());}case 133:break;case 57:{return symbol(ELSE);}case 134:break;case 58:{return symbol(FTRUE);}case 135:break;case 59:{return symbol(THEN);}case 136:break;case 60:{return symbol(NULL);}case 137:break;case 61:{return symbol(FAKE);}case 138:break;case 62:{return symbol(FUNC);}case 139:break;case 63:{return symbol(CASE);}case 140:break;case 64:{return symbol(BREAK);}case 141:break;case 65:{return symbol(FFALSE);}case 142:break;case 66:{return symbol(FCONST);}case 143:break;case 67:{return symbol(WHILE);}case 144:break;case 68:{return symbol(SLEEP);}case 145:break;case 69:{return symbol(YIELD);}case 146:break;case 70:{return symbol(RETURN);}case 147:break;case 71:{return symbol(ELSEIF);}case 148:break;case 72:{return symbol(STRUCT);}case 149:break;case 73:{return symbol(SWITCH);}case 150:break;case 74:{return symbol(INCLUDE);}case 151:break;case 75:{return symbol(DEFAULT);}case 152:break;case 76:{return symbol(PACKAGE);}case 153:break;case 77:{return symbol(CONTINUE);}case 154:break;default :zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @SuppressWarnings("WeakerAccess") public boolean hasFooter(){  return footer != null;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set colorMismatchesVsConsensus=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getAlignmentViewerPanel().getAlignmentPanel().setColorMismatchesVsConsensus(value);  ProgramProperties.put("ColorMismatches",value);  viewer.repaint();}  }
class C{  void internalDeleteData(int offset,int count,boolean replace) throws DOMException {  CoreDocumentImpl ownerDocument=ownerDocument();  if (ownerDocument.errorChecking) {    if (isReadOnly()) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);    }    if (count < 0) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INDEX_SIZE_ERR",null);      throw new DOMException(DOMException.INDEX_SIZE_ERR,msg);    }  }  if (needsSyncData()) {    synchronizeData();  }  int tailLength=Math.max(data.length() - count - offset,0);  try {    String value=data.substring(0,offset) + (tailLength > 0 ? data.substring(offset + count,offset + count + tailLength) : "");    setNodeValueInternal(value,replace);    ownerDocument.deletedText(this,offset,count);  } catch (  StringIndexOutOfBoundsException e) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INDEX_SIZE_ERR",null);    throw new DOMException(DOMException.INDEX_SIZE_ERR,msg);  }}  }
class C{  @deprecated protected void subFormat(StringBuffer buf,char ch,int count,int beginOffset,FieldPosition pos,Calendar cal){switch (ch) {case 'G':    zeroPaddingNumber(this.numberFormat,buf,cal.get(0),1,9);  break;case 'l':buf.append(((ChineseDateFormatSymbols)getSymbols()).getLeapMonth(cal.get(22)));break;default :super.subFormat(buf,ch,count,beginOffset,pos,cal);}}  }
class C{  private int[] determineDimensions(int sourceCodeWords,int errorCorrectionCodeWords) throws WriterException {  float ratio=0.0f;  int[] dimension=null;  for (int cols=minCols; cols <= maxCols; cols++) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,cols);    if (rows < minRows) {      break;    }    if (rows > maxRows) {      continue;    }    float newRatio=((17 * cols + 69) * DEFAULT_MODULE_WIDTH) / (rows * HEIGHT);    if (dimension != null && Math.abs(newRatio - PREFERRED_RATIO) > Math.abs(ratio - PREFERRED_RATIO)) {      continue;    }    ratio=newRatio;    dimension=new int[]{cols,rows};  }  if (dimension == null) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,minCols);    if (rows < minRows) {      dimension=new int[]{minCols,minRows};    }  }  if (dimension == null) {    throw new WriterException("Unable to fit message in columns");  }  return dimension;}  }
class C{  public static Zmat o(Zmat A,Zmat B) throws JampackException {  if (A.nrow != B.nrow || A.ncol != B.ncol) {    throw new JampackException("Matrices not conformable for addition");  }  Zmat C=new Zmat(A.nr,A.nc);  for (int i=0; i < A.nrow; i++)   for (int j=0; j < A.ncol; j++) {    C.re[i][j]=A.re[i][j] + B.re[i][j];    C.im[i][j]=A.im[i][j] + B.im[i][j];  }  return C;}  }
class C{  public static <T extends GenericEntity>List<T> filterByAnd(List<T> values,List<? extends EntityCondition> exprs){  if (values == null)   return null;  if (UtilValidate.isEmpty(exprs)) {    return values;  }  List<T> result=new LinkedList<T>();  for (  T value : values) {    boolean include=true;    for (    EntityCondition condition : exprs) {      include=condition.entityMatches(value);      if (!include)       break;    }    if (include) {      result.add(value);    }  }  return result;}  }
class C{  public static List<Date> parseDateList(List<String> dateList){  List<Date> newList=new ArrayList<Date>();  if (dateList == null)   return newList;  for (  String value : dateList)   newList.add(parseDate(value));  return newList;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"newfriend\"";  db.execSQL(sql);}  }
class C{  private List<Integer> muxToList(PageResultMultiplexer<Integer> mux) throws InterruptedException, IOException {  Integer n;  List<Integer> list=new ArrayList<>();  while (true) {    if ((n=mux.next()) == null) {      break;    }    list.add(n);  }  return list;}  }
class C{  public static void sampleInstallTinker(ApplicationLike appLike){  if (isInstalled) {    TinkerLog.w(TAG,"install tinker, but has installed, ignore");    return;  }  TinkerInstaller.install(appLike);  isInstalled=true;}  }
class C{  Operand(AbstractInsnNode insn,Value value){  this.insn=insn;  this.value=value;}  }
class C{  public static DalvikThrowAnalysis v(){  return G.v().soot_dexpler_DalvikThrowAnalysis();}  }
class C{  public static IOFileFilter asFileFilter(FileFilter filter){  return new DelegateFileFilter(filter);}  }
class C{  public RegexValidator(String regex,boolean caseSensitive){  this(new String[]{regex},caseSensitive);}  }
class C{  @Override public boolean bindService(Intent service,ServiceConnection conn,int flags){  return mContext.bindService(service,conn,flags);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200520,skilltarget,num0,skillname);}  }
class C{  public byte[] compress(byte[] unCompInput){  try {    return Snappy.rawCompress(unCompInput,unCompInput.length);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  private void processSubEquipmentUnits(final Element equipmentUnit,final IEquipmentConfiguration equipmentConfiguration){  NodeList subEquipmentUnitsList=equipmentUnit.getElementsByTagName(SUB_EQUIPMENT_UNITS_ELEMENT);  Element subEquipmentUnitsElement=null;  if (subEquipmentUnitsList != null && subEquipmentUnitsList.getLength() > 0) {    subEquipmentUnitsElement=(Element)subEquipmentUnitsList.item(0);  }  if (subEquipmentUnitsElement != null) {    NodeList subEquipmentUnitsNode=subEquipmentUnitsElement.getElementsByTagName(SUB_EQUIPMENT_UNIT_ELEMENT);    log.debug("\t" + subEquipmentUnitsNode.getLength() + " SubEquipments found for current equipment");    for (int i=0; i < subEquipmentUnitsNode.getLength(); i++) {      log.debug("Creating a SubEquipment configuration object...");      Element subEquipmentConf=(Element)subEquipmentUnitsNode.item(i);      String subEquipmentId=subEquipmentConf.getAttribute(ID_ATTRIBUTE);      String subEquipmentName=subEquipmentConf.getAttribute(NAME_ATTRIBUTE);      String commFaultId=getTagValue(subEquipmentConf,COMMFAULT_TAG_ID_ELEMENT);      String commFaultValue=getTagValue(subEquipmentConf,COMMFAULT_TAG_VALUE_ELEMENT);      SubEquipmentConfiguration subEquipmentConfiguration=new SubEquipmentConfiguration(Long.parseLong(subEquipmentId),subEquipmentName,Long.parseLong(commFaultId),Boolean.parseBoolean(commFaultValue));      if (subEquipmentConf.getElementsByTagName(ALIVE_TAG_ID_ELEMENT).getLength() > 0) {        String aliveTagId=getTagValue(subEquipmentConf,ALIVE_TAG_ID_ELEMENT);        String aliveTagInterval=getTagValue(subEquipmentConf,ALIVE_INTERVAL_ELEMENT);        subEquipmentConfiguration.setAliveTagId(Long.parseLong(aliveTagId));        subEquipmentConfiguration.setAliveInterval(Long.parseLong(aliveTagInterval));      }      equipmentConfiguration.getSubEquipmentConfigurations().put(subEquipmentConfiguration.getId(),subEquipmentConfiguration);    }  }}  }
class C{  public synchronized boolean wasClicked(){  return this.value == 1;}  }
class C{  void replacedNode(NodeImpl node){}  }
class C{  @NotNull public UpdatePersonGroupAction updateGroup(@NotNull String personGroupId,@NotNull String name,@Nullable String userData){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  Validation.validate(name,"^.{1,128}$",new ParameterValidationException("name","The maximum length is 128"));  Validation.validate(userData,16,new ParameterValidationException("userData","The size limit is 16KB"));  return new UpdatePersonGroupAction(cognitiveContext,personGroupId,name,userData);}  }
class C{  private boolean canPickImageFromCamera(@NonNull Context context){  return hasCamera(context);}  }
class C{  public static void registerBlock(ResourceLocation id,Block block){  registerBlock(id,block,new ItemBlock(block));}  }
class C{  public AdsGetSuggestionsQueryWithCities q(String value){  return unsafeParam("q",value);}  }
class C{  public ViewerPanel(CommandManager commandManager,String cName){  setLayout(new BorderLayout());  final JPanel centerPanel=new JPanel();  centerPanel.setBorder(BorderFactory.createTitledBorder(cName + " analysis settings"));  centerPanel.setLayout(new BoxLayout(centerPanel,BoxLayout.Y_AXIS));{    final JPanel aPanel=new JPanel();    JCheckBox checkBox=(JCheckBox)commandManager.getButton(SetAnalyse4ViewerCommand.getName(cName));    if (checkBox.isSelected() && !ClassificationManager.get(cName,true).getIdMapper().hasActiveAndLoaded())     checkBox.setSelected(false);    aPanel.add(checkBox);    centerPanel.add(aPanel);  }  final JPanel panel1=new JPanel();  panel1.setBorder(BorderFactory.createTitledBorder("How MEGAN identifies " + cName + " classes"));  panel1.setLayout(new BorderLayout());  final JPanel aPanel=new JPanel(new GridLayout(5,1));  if (cName.equals("Taxonomy")) {    AbstractButton useParseTextButton=commandManager.getButton(SetUseTextTaxonomyCommand.NAME);    aPanel.add(useParseTextButton);    aPanel.add(new JLabel());  } else {    aPanel.add(new JLabel());    aPanel.add(new JLabel());  }  final ICommand useAccessionLookupCommand=commandManager.getCommand(SetUseMapType4ViewerCommand.getAltName(cName,IdMapper.MapType.Accession));  final AbstractButton ueseAccessionButton=commandManager.getButton(useAccessionLookupCommand);  if (useAccessionLookupCommand instanceof ICheckBoxCommand)   ueseAccessionButton.setSelected(((ICheckBoxCommand)useAccessionLookupCommand).isSelected());  ueseAccessionButton.setEnabled(useAccessionLookupCommand.isApplicable());  aPanel.add(ueseAccessionButton);{    final JPanel butPanel=new JPanel();    butPanel.setLayout(new BoxLayout(butPanel,BoxLayout.X_AXIS));    butPanel.add(commandManager.getButton(LoadMappingFile4ViewerCommand.getAltName(cName,IdMapper.MapType.Accession)));    butPanel.add(new JLabel(" " + LoadMappingFile4ViewerCommand.getName(cName,IdMapper.MapType.Accession)));    butPanel.add(Box.createHorizontalGlue());    aPanel.add(butPanel);  }  final ICommand useGi2ClassIdMappingCommand=commandManager.getCommand(SetUseMapType4ViewerCommand.getAltName(cName,IdMapper.MapType.GI));  final AbstractButton useGiButton=commandManager.getButton(useGi2ClassIdMappingCommand);  if (useGi2ClassIdMappingCommand instanceof ICheckBoxCommand)   useGiButton.setSelected(((ICheckBoxCommand)useGi2ClassIdMappingCommand).isSelected());  useGiButton.setEnabled(useGi2ClassIdMappingCommand.isApplicable());  aPanel.add(useGiButton);{    final JPanel butPanel=new JPanel();    butPanel.setLayout(new BoxLayout(butPanel,BoxLayout.X_AXIS));    butPanel.add(commandManager.getButton(LoadMappingFile4ViewerCommand.getAltName(cName,IdMapper.MapType.GI)));    butPanel.add(new JLabel(" " + LoadMappingFile4ViewerCommand.getName(cName,IdMapper.MapType.GI)));    butPanel.add(Box.createHorizontalGlue());    aPanel.add(butPanel);  }  final ICommand useSynonymsCommand=commandManager.getCommand(SetUseMapType4ViewerCommand.getAltName(cName,IdMapper.MapType.Synonyms));  final AbstractButton useSynomymsButton=commandManager.getButton(useSynonymsCommand);  if (useSynonymsCommand instanceof ICheckBoxCommand)   useSynomymsButton.setSelected(((ICheckBoxCommand)useSynonymsCommand).isSelected());  useSynomymsButton.setEnabled(useSynonymsCommand.isApplicable());  aPanel.add(useSynomymsButton);{    final JPanel butPanel=new JPanel();    butPanel.setLayout(new BoxLayout(butPanel,BoxLayout.X_AXIS));    butPanel.add(commandManager.getButton(LoadMappingFile4ViewerCommand.getAltName(cName,IdMapper.MapType.Synonyms)));    butPanel.add(new JLabel(" " + LoadMappingFile4ViewerCommand.getName(cName,IdMapper.MapType.Synonyms)));    butPanel.add(Box.createHorizontalGlue());    aPanel.add(butPanel);  }  final ICommand useIDParsingCommand=commandManager.getCommand(SetUseIdParsing4ViewerCommand.getAltName(cName));  final AbstractButton useIdParsingButton=commandManager.getButton(useIDParsingCommand);  if (useIdParsingButton instanceof ICheckBoxCommand)   useIdParsingButton.setSelected(((ICheckBoxCommand)useIDParsingCommand).isSelected());  useIdParsingButton.setEnabled(useIDParsingCommand.isApplicable());  aPanel.add(useIdParsingButton);  if (!ClassificationManager.getDefaultClassificationsList().contains(cName) && ClassificationManager.getAllSupportedClassifications().contains(cName)) {    final ICommand useLCACommand=commandManager.getCommand(SetUseLCA4ViewerCommand.getAltName(cName));    final AbstractButton useLCAButton=commandManager.getButton(useLCACommand);    if (useLCAButton instanceof ICheckBoxCommand)     useLCAButton.setSelected(((ICheckBoxCommand)useLCACommand).isSelected());    useLCAButton.setEnabled(useLCACommand.isApplicable());    aPanel.add(useLCAButton);  }  panel1.add(aPanel,BorderLayout.CENTER);  centerPanel.add(panel1);  add(centerPanel,BorderLayout.CENTER);}  }
class C{  public boolean this_edges(){  return soot.PhaseOptions.getBoolean(options,"this-edges");}  }
class C{  @Override protected void __setConfig(Object config){  m_containerConfig=(ContainerConfig)config;}  }
class C{  public boolean intersects(double x,double y,double w,double h){  if (npoints <= 0 || !bounds.intersects(x,y,w,h)) {    return false;  }  updateComputingPath();  return closedPath.intersects(x,y,w,h);}  }
class C{  @Override public String toString(){  StringBuffer uriSpecString=new StringBuffer();  if (m_scheme != null) {    uriSpecString.append(m_scheme);    uriSpecString.append(':');  }  uriSpecString.append(getSchemeSpecificPart());  return uriSpecString.toString();}  }
class C{  public RemoteMetaDataImpl(Schema schema) throws RemoteException {  this.schema=schema;  fields.addAll(schema.fields());}  }
