class C{  public ListEditor(){  this(new Vector<String>());}  }
class C{  public void testSetNString() throws Exception {  createTable("testSetNString","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10), c3 NATIONAL CHARACTER(10)) DEFAULT CHARACTER SET cp932 ENGINE=InnoDB");  Properties props1=new Properties();  props1.put("useServerPrepStmts","false");  props1.put("useUnicode","true");  props1.put("characterEncoding","MS932");  Connection conn1=getConnectionWithProps(props1);  PreparedStatement pstmt1=conn1.prepareStatement("INSERT INTO testSetNString (c1, c2, c3) VALUES (?, ?, ?)");  pstmt1.setNString(1,null);  pstmt1.setNString(2,"aaa");  pstmt1.setNString(3,"\'aaa\'");  pstmt1.execute();  ResultSet rs1=this.stmt.executeQuery("SELECT c1, c2, c3 FROM testSetNString");  rs1.next();  assertEquals(null,rs1.getString(1));  assertEquals("aaa",rs1.getString(2));  assertEquals("\'aaa\'",rs1.getString(3));  rs1.close();  pstmt1.close();  conn1.close();  createTable("testSetNString","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10), c3 NATIONAL CHARACTER(10)) DEFAULT CHARACTER SET cp932 ENGINE=InnoDB");  Properties props2=new Properties();  props2.put("useServerPrepStmts","false");  props2.put("useUnicode","true");  props2.put("characterEncoding","UTF-8");  Connection conn2=getConnectionWithProps(props2);  PreparedStatement pstmt2=conn2.prepareStatement("INSERT INTO testSetNString (c1, c2, c3) VALUES (?, ?, ?)");  pstmt2.setNString(1,null);  pstmt2.setNString(2,"aaa");  pstmt2.setNString(3,"\'aaa\'");  pstmt2.execute();  ResultSet rs2=this.stmt.executeQuery("SELECT c1, c2, c3 FROM testSetNString");  rs2.next();  assertEquals(null,rs2.getString(1));  assertEquals("aaa",rs2.getString(2));  assertEquals("\'aaa\'",rs2.getString(3));  rs2.close();  pstmt2.close();  conn2.close();}  }
class C{  public static Configuration forDevelopment(){  final Configuration configuration=new Configuration();  configuration.runtimeCheckConfiguration=new RuntimeCheckOnConfiguration();  return configuration;}  }
class C{  protected void saveSignatureChecksums(List<CompilationUnit> units){  if (!isSwcChecksumEnabled) {    swcDefSignatureChecksums=null;    return;  }  if (units != null) {    swcDefSignatureChecksums=new HashMap<QName,Long>();    for (    CompilationUnit unit : units) {      Source source=unit == null ? null : unit.getSource();      if (source != null && source.isSwcScriptOwner() && !source.isInternal()) {        addSignatureChecksumToData(unit);      }    }  }}  }
class C{  public static void evaluateCircuitHistogramOverlap(LogicCircuit lc,GateLibrary gate_library,Args options){  refreshGateAttributes(lc,gate_library);  if (options.get_circuit_type() == DNACompiler.CircuitType.sequential) {    SequentialHelper.setInitialHistogramRPUs(lc,gate_library);    HashMap<String,ArrayList<ArrayList<double[]>>> track_rpus=new HashMap<>();    for (    Gate g : lc.get_Gates()) {      track_rpus.put(g.Name,new ArrayList<ArrayList<double[]>>());      ArrayList<double[]> copy_hist_rpus=new ArrayList<double[]>(g.get_histogram_rpus());      track_rpus.get(g.Name).add(copy_hist_rpus);      track_rpus.get(g.Name).add(copy_hist_rpus);    }    SequentialHelper.convergeHistogramRPUs(lc,gate_library,options,track_rpus);  } else   if (options.get_circuit_type() == DNACompiler.CircuitType.combinational) {    Evaluate.simulateHistogramRPU(lc,gate_library,options);  }  double worst_out=Double.MAX_VALUE;  for (int out=0; out < lc.get_output_gates().size(); ++out) {    Gate output=lc.get_output_gates().get(out);    evaluateGateHistogramOverlap(output);    if (output.get_scores().get_conv_overlap() < worst_out) {      worst_out=output.get_scores().get_conv_overlap();    }  }  lc.get_scores().set_conv_overlap(worst_out);}  }
class C{  protected boolean keep(ConstraintVariable2 cv1,ConstraintVariable2 cv2){  if ((cv1 == null || cv2 == null))   return false;  if (cv1.equals(cv2)) {    if (cv1 == cv2)     return false; else     Assert.isTrue(false);  }  if (cv1 instanceof CollectionElementVariable2 || cv2 instanceof CollectionElementVariable2)   return true;  if (cv1 instanceof IndependentTypeVariable2 || cv2 instanceof IndependentTypeVariable2)   return true;  if (isAGenericType(cv1.getType()))   return true;  if (isAGenericType(cv2.getType()))   return true;  return false;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  protected void cleanUnusedStyles(){  Hashtable<String,Style> usedStyles=new Hashtable<String,Style>();  for (  Caption current : captions.values()) {    if (current.style != null) {      String iD=current.style.iD;      if (!usedStyles.containsKey(iD))       usedStyles.put(iD,current.style);    }  }  this.styling=usedStyles;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.416 -0500",hash_original_method="B27C87FCD55A2BEDEC6F0B351B72701B",hash_generated_method="694EDD3C37321D8FD47F2FE108FF2D7A") @Override public void put(String name,Object value){  emulatedFields.put(name,value);}  }
class C{  public T caseSuperLiteral(SuperLiteral object){  return null;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isOutputFormatDefined()) {    setOutputFormat();    for (int i=0; i < getInputFormat().numInstances(); i++) {      push((Instance)getInputFormat().instance(i).copy());    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public RDN(AttributeTypeAndValue[] aAndVs){  this.values=new DERSet(aAndVs);}  }
class C{  public Iterator iterateChildren(){  return this.children.iterator();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EXPORT_DECLARATION;}  }
class C{  public void remove(String mimeType){  mimeMappings.remove(mimeType);}  }
class C{  public void receiveCapabilities(ContactId contact,com.gsma.rcs.core.ims.service.capability.Capabilities capabilities){synchronized (mLock) {    Capabilities c=ContactServiceImpl.getCapabilities(capabilities);    notifyListeners(contact,c);  }}  }
class C{  public static List<EventTracker.Event> readLog(File f,Date from,Date to){  List<EventTracker.Event> events=new ArrayList<>();  RandomAccessFile raf=null;  try {    raf=new RandomAccessFile(f,"r");    Date fd=readDate(raf,0);    if (fd.after(from))     from=fd;    long seekFrom=binarySearch(raf,from,0,raf.length());    long seekTo=binarySearch(raf,to,seekFrom,raf.length());    raf.seek(seekFrom);    byte[] buffer=new byte[(int)(seekTo - seekFrom)];    raf.readFully(buffer);    raf.close();    ByteArrayInputStream bais=new ByteArrayInputStream(buffer);    BufferedReader reader=new BufferedReader(new InputStreamReader(bais,StandardCharsets.UTF_8));    String line;    while ((line=reader.readLine()) != null) {      if (line.length() < GenericFormatter.PATTERN_SHORT_SECOND.length() + 3 || line.charAt(GenericFormatter.PATTERN_SHORT_SECOND.length()) != ' ')       continue;      String dateStr=line.substring(0,GenericFormatter.PATTERN_SHORT_SECOND.length());      int countEnd=-1;      for (int i=GenericFormatter.PATTERN_SHORT_SECOND.length() + 2; i < line.length(); i++) {        if (line.charAt(i) == ' ') {          countEnd=i;          break;        }      }      if (countEnd == -1)       continue;      String countStr=line.substring(GenericFormatter.PATTERN_SHORT_SECOND.length() + 1,countEnd);      if (countStr.length() > 5)       continue;      int hits=countStr.length() == 1 ? (countStr.charAt(0)) - 48 : Integer.parseInt(countStr);      EventTracker.Event event;      try {        event=new EventTracker.Event(dateStr,0,"query",line.substring(dateStr.length() + countStr.length() + 2),hits);        events.add(event);      } catch (      NumberFormatException e) {        continue;      }catch (      Throwable e) {        continue;      }    }    reader.close();    bais.close();    buffer=null;  } catch (  final FileNotFoundException e) {    ConcurrentLog.logException(e);  }catch (  final IOException e) {    ConcurrentLog.logException(e);  } finally {    if (raf != null)     try {      raf.close();    } catch (    final IOException e) {    }  }  return events;}  }
class C{  public static JButton createButton(final String buttonText,final int mnemonic){  final JButton newButton=new JButton(buttonText);  newButton.setMnemonic(mnemonic);  newButton.setFont(defaultMapXMLCreatorFont);  newButton.setMargin(new Insets(2,5,2,5));  return newButton;}  }
class C{  public RepositoryDocumentImpl(final BigdataFileSystem repo,final String id){  this(repo,id,repo.getFileMetadataIndex().read(BigdataFileSystem.metadataSchema,id,IRowStoreConstants.MIN_TIMESTAMP,IRowStoreConstants.CURRENT_ROW,null));}  }
class C{  public boolean isRequired(){  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return ValidationPackage.Literals.PRE_VALIDATION;}  }
class C{  public static AdminResponse sendAndWait(AdminRequest msg,DistributionManager dm){  if (dm.getId().equals(msg.getRecipient())) {    msg.setSender(dm.getId());    return msg.createResponse(dm);  }  AdminResponse result=null;  try {synchronized (msg) {      Set failures=dm.putOutgoing(msg);      if (failures != null && failures.size() > 0) {        if (dm.getDistributionManagerIds().contains(msg.getRecipient())) {          String s="";          if (logger.isTraceEnabled(LogMarker.DM)) {            s+=" (" + msg + ")";          }          throw new RuntimeAdminException(LocalizedStrings.AdminWaiters_COULD_NOT_SEND_REQUEST_0.toLocalizedString(s));        }        throw new OperationCancelledException(LocalizedStrings.AdminWaiters_REQUEST_SENT_TO_0_FAILED_SINCE_MEMBER_DEPARTED_1.toLocalizedString(new Object[]{msg.getRecipient(),""}));      }      long timeout=getWaitTimeout();      boolean gotResponse=msg.waitForResponse(timeout);      if (!gotResponse) {        if (dm.isCurrentMember(msg.getRecipient())) {          StringBuffer sb=new StringBuffer("Administration request ");          sb.append(msg);          sb.append(" sent to ");          sb.append(msg.getRecipient());          sb.append(" timed out after ");          sb.append((timeout / 1000));          sb.append(" seconds.");          throw new RuntimeAdminException(sb.toString());        }        String s="";        if (logger.isTraceEnabled(LogMarker.DM)) {          s=" (" + msg + ")";        }        throw new OperationCancelledException(LocalizedStrings.AdminWaiters_REQUEST_SENT_TO_0_FAILED_SINCE_MEMBER_DEPARTED_1.toLocalizedString(new Object[]{msg.getRecipient(),s}));      }      result=msg.getResponse();    }  } catch (  InterruptedException ex) {    Thread.currentThread().interrupt();    dm.getCancelCriterion().checkCancelInProgress(ex);    String s=LocalizedStrings.AdminWaiters_REQUEST_WAIT_WAS_INTERRUPTED.toLocalizedString();    if (logger.isTraceEnabled(LogMarker.DM)) {      s+=" (" + msg + ")";    }    throw new RuntimeAdminException(s,ex);  }  if (result == null) {    String s="";    if (logger.isTraceEnabled(LogMarker.DM)) {      s+=" (" + msg + ")";    }    throw new OperationCancelledException(LocalizedStrings.AdminWaiters_REQUEST_SEND_TO_0_WAS_CANCELLED_1.toLocalizedString(new Object[]{msg.getRecipient(),s}));  } else   if (result instanceof AdminFailureResponse) {    throw new RuntimeAdminException(LocalizedStrings.AdminWaiters_REQUEST_FAILED.toLocalizedString(),((AdminFailureResponse)result).getCause());  }  return result;}  }
class C{  protected void runTests() throws Exception {  runOnce();}  }
class C{  public static int cs_dfs(int j,Scs G,int top,int[] xi,int xi_offset,int[] pstack,int pstack_offset,int[] pinv,int pinv_offset){  int i, p, p2, jnew, head=0, Gp[], Gi[];  boolean done;  if (!Scs_util.CS_CSC(G) || xi == null || pstack == null)   return (-1);  Gp=G.p;  Gi=G.i;  xi[xi_offset + 0]=j;  while (head >= 0) {    j=xi[xi_offset + head];    jnew=pinv != null ? (pinv[pinv_offset + j]) : j;    if (!Scs_util.CS_MARKES(Gp,j)) {      Scs_util.CS_MARK(Gp,j);      pstack[pstack_offset + head]=(jnew < 0) ? 0 : Scs_util.CS_UNFLIP(Gp[jnew]);    }    done=true;    p2=(jnew < 0) ? 0 : Scs_util.CS_UNFLIP(Gp[jnew + 1]);    for (p=pstack[pstack_offset + head]; p < p2; p++) {      i=Gi[p];      if (Scs_util.CS_MARKES(Gp,i))       continue;      pstack[pstack_offset + head]=p;      xi[xi_offset + ++head]=i;      done=false;      break;    }    if (done) {      head--;      xi[xi_offset + --top]=j;    }  }  return (top);}  }
class C{  @Override public void invokeCommand(int argLength,String[] args,String command){  Async e=Async.INSTANCE;  Logger l=Toast.log();  l.info("*Toast Thread Pool Instance Data: ");  l.info(String.format("\t Active Threads: %d, Core Threads: %d",e.getPoolSize(),e.getCorePoolSize()));  l.info(String.format("\t Active Jobs: %d, Completed Jobs: %d, Total Jobs: %d",e.getActiveCount(),e.getCompletedTaskCount(),e.getTaskCount()));  l.info(String.format("\t Shutdown? %s, Terminated? %s, Terminating? %s",e.isShutdown(),e.isTerminated(),e.isTerminating()));  l.info("*End Toast Thread Pool Data");}  }
class C{  public T caseTAnnotation(TAnnotation object){  return null;}  }
class C{  public void parse(InputStream contents) throws IOException, SAXException, ParserConfigurationException {  parseContents("UTF-8",contents);}  }
class C{  public void readFrom(DataInput in) throws IOException {  schemaId=in.readInt();  int idsCnt=in.readInt();  List<Integer> fieldIds=new ArrayList<>(idsCnt);  for (int i=0; i < idsCnt; i++)   fieldIds.add(in.readInt());  initialize(fieldIds);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Interval(ReadableInstant start,ReadableInstant end){  super(start,end);}  }
class C{  private ModeUsage(Mode mode,Mode currentMode,ContextMap modeMap){  this.mode=mode;  this.currentMode=currentMode;  this.modeMap=modeMap;}  }
class C{  @Nullable public static Component findComponent(Frame frame,String id){  Component find=frame.getComponent(id);  if (find != null) {    return find;  } else {    for (    Component c : frame.getComponents()) {      if (c instanceof Frame) {        Component comp=((Frame)c).getComponent(id);        if (comp != null) {          return comp;        } else {          findComponent((Frame)c,id);        }      }    }  }  return null;}  }
class C{  public static boolean isYouTubeUrl(String url){  if (TextUtils.isEmpty(url)) {    return false;  }  Uri uri=Uri.parse(url);  String authority=uri.getAuthority();  if (!TextUtils.isEmpty(authority) && authority.contains("youtube.com")) {    return true;  } else {    return false;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final AC size(String size,int... indexes){  BoundSize bs=ConstraintParser.parseBoundSize(size,false,true);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setSize(bs);  }  return this;}  }
class C{  public static void writeFileList(XMLOutput xmlOutput,String tagName,Iterable<File> listValues) throws IOException {  if (listValues != null) {    writeFileList(xmlOutput,tagName,listValues.iterator());  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;case main_region_C:return stateVector[0] == State.main_region_C;case main_region_D:return stateVector[0] == State.main_region_D;case another_region_A:return stateVector[1] == State.another_region_A;case another_region_B:return stateVector[1] == State.another_region_B;case another_region_C:return stateVector[1] == State.another_region_C;case another_region_D:return stateVector[1] == State.another_region_D;default :return false;}}  }
class C{  protected long computeExpiryRefreshTime(KMLRoot root,String address){  KMLNetworkLinkControl linkControl=root.getNetworkLinkControl();  if (linkControl != null && linkControl.getExpires() != null) {    Long time=WWUtil.parseTimeString(linkControl.getExpires());    return time != null ? time : 0;  }  return this.getRoot().getExpiration(address);}  }
class C{  public static WeatherEntity build(Weather weather){  WeatherEntity entity=new WeatherEntity();  entity.location=weather.base.location;  entity.refreshTime=weather.base.refreshTime;  entity.date=weather.base.date;  entity.moon=weather.base.moon;  entity.week=weather.base.week;  entity.weatherNow=weather.live.weather;  entity.tempNow=weather.live.temp;  entity.airNow=weather.live.air;  entity.windDirNow=weather.live.windDir;  entity.windLevelNow=weather.live.windLevel;  entity.dates_1=weather.dailyList.get(0).date;  entity.dates_2=weather.dailyList.get(1).date;  entity.dates_3=weather.dailyList.get(2).date;  entity.dates_4=weather.dailyList.get(3).date;  entity.dates_5=weather.dailyList.get(4).date;  entity.weeks_1=weather.dailyList.get(0).week;  entity.weeks_2=weather.dailyList.get(1).week;  entity.weeks_3=weather.dailyList.get(2).week;  entity.weeks_4=weather.dailyList.get(3).week;  entity.weeks_5=weather.dailyList.get(4).week;  entity.dayWeathers_1=weather.dailyList.get(0).weathers[0];  entity.dayWeathers_2=weather.dailyList.get(1).weathers[0];  entity.dayWeathers_3=weather.dailyList.get(2).weathers[0];  entity.dayWeathers_4=weather.dailyList.get(3).weathers[0];  entity.dayWeathers_5=weather.dailyList.get(4).weathers[0];  entity.dayTemps_1=weather.dailyList.get(0).temps[0];  entity.dayTemps_2=weather.dailyList.get(1).temps[0];  entity.dayTemps_3=weather.dailyList.get(2).temps[0];  entity.dayTemps_4=weather.dailyList.get(3).temps[0];  entity.dayTemps_5=weather.dailyList.get(4).temps[0];  entity.dayWindDirs_1=weather.dailyList.get(0).windDirs[0];  entity.dayWindDirs_2=weather.dailyList.get(1).windDirs[0];  entity.dayWindDirs_3=weather.dailyList.get(2).windDirs[0];  entity.dayWindDirs_4=weather.dailyList.get(3).windDirs[0];  entity.dayWindDirs_5=weather.dailyList.get(4).windDirs[0];  entity.dayWindLevels_1=weather.dailyList.get(0).windLevels[0];  entity.dayWindLevels_2=weather.dailyList.get(1).windLevels[0];  entity.dayWindLevels_3=weather.dailyList.get(2).windLevels[0];  entity.dayWindLevels_4=weather.dailyList.get(3).windLevels[0];  entity.dayWindLevels_5=weather.dailyList.get(4).windLevels[0];  entity.dayExchangeTimes_1=weather.dailyList.get(0).exchangeTimes[0];  entity.dayExchangeTimes_2=weather.dailyList.get(1).exchangeTimes[0];  entity.dayExchangeTimes_3=weather.dailyList.get(2).exchangeTimes[0];  entity.dayExchangeTimes_4=weather.dailyList.get(3).exchangeTimes[0];  entity.dayExchangeTimes_5=weather.dailyList.get(4).exchangeTimes[0];  entity.nightWeathers_1=weather.dailyList.get(0).weathers[1];  entity.nightWeathers_2=weather.dailyList.get(1).weathers[1];  entity.nightWeathers_3=weather.dailyList.get(2).weathers[1];  entity.nightWeathers_4=weather.dailyList.get(3).weathers[1];  entity.nightWeathers_5=weather.dailyList.get(4).weathers[1];  entity.nightTemps_1=weather.dailyList.get(0).temps[1];  entity.nightTemps_2=weather.dailyList.get(1).temps[1];  entity.nightTemps_3=weather.dailyList.get(2).temps[1];  entity.nightTemps_4=weather.dailyList.get(3).temps[1];  entity.nightTemps_5=weather.dailyList.get(4).temps[1];  entity.nightWindDirs_1=weather.dailyList.get(0).windDirs[1];  entity.nightWindDirs_2=weather.dailyList.get(1).windDirs[1];  entity.nightWindDirs_3=weather.dailyList.get(2).windDirs[1];  entity.nightWindDirs_4=weather.dailyList.get(3).windDirs[1];  entity.nightWindDirs_5=weather.dailyList.get(4).windDirs[1];  entity.nightWindLevels_1=weather.dailyList.get(0).windLevels[1];  entity.nightWindLevels_2=weather.dailyList.get(1).windLevels[1];  entity.nightWindLevels_3=weather.dailyList.get(2).windLevels[1];  entity.nightWindLevels_4=weather.dailyList.get(3).windLevels[1];  entity.nightWindLevels_5=weather.dailyList.get(4).windLevels[1];  entity.nightExchangeTimes_1=weather.dailyList.get(0).exchangeTimes[1];  entity.nightExchangeTimes_2=weather.dailyList.get(1).exchangeTimes[1];  entity.nightExchangeTimes_3=weather.dailyList.get(2).exchangeTimes[1];  entity.nightExchangeTimes_4=weather.dailyList.get(3).exchangeTimes[1];  entity.nightExchangeTimes_5=weather.dailyList.get(4).exchangeTimes[1];  entity.hours_1=0 < weather.hourlyList.size() ? weather.hourlyList.get(0).hour : "null";  entity.hours_2=1 < weather.hourlyList.size() ? weather.hourlyList.get(1).hour : "null";  entity.hours_3=2 < weather.hourlyList.size() ? weather.hourlyList.get(2).hour : "null";  entity.hours_4=3 < weather.hourlyList.size() ? weather.hourlyList.get(3).hour : "null";  entity.hours_5=4 < weather.hourlyList.size() ? weather.hourlyList.get(4).hour : "null";  entity.hours_6=5 < weather.hourlyList.size() ? weather.hourlyList.get(5).hour : "null";  entity.hours_7=6 < weather.hourlyList.size() ? weather.hourlyList.get(6).hour : "null";  entity.hours_8=7 < weather.hourlyList.size() ? weather.hourlyList.get(7).hour : "null";  entity.hourlyTemps_1=0 < weather.hourlyList.size() ? weather.hourlyList.get(0).temp : 0;  entity.hourlyTemps_2=1 < weather.hourlyList.size() ? weather.hourlyList.get(1).temp : 0;  entity.hourlyTemps_3=2 < weather.hourlyList.size() ? weather.hourlyList.get(2).temp : 0;  entity.hourlyTemps_4=3 < weather.hourlyList.size() ? weather.hourlyList.get(3).temp : 0;  entity.hourlyTemps_5=4 < weather.hourlyList.size() ? weather.hourlyList.get(4).temp : 0;  entity.hourlyTemps_6=5 < weather.hourlyList.size() ? weather.hourlyList.get(5).temp : 0;  entity.hourlyTemps_7=6 < weather.hourlyList.size() ? weather.hourlyList.get(6).temp : 0;  entity.hourlyTemps_8=7 < weather.hourlyList.size() ? weather.hourlyList.get(7).temp : 0;  entity.hourlyPops_1=0 < weather.hourlyList.size() ? weather.hourlyList.get(0).pop : 0;  entity.hourlyPops_1=1 < weather.hourlyList.size() ? weather.hourlyList.get(1).pop : 0;  entity.hourlyPops_1=2 < weather.hourlyList.size() ? weather.hourlyList.get(2).pop : 0;  entity.hourlyPops_1=3 < weather.hourlyList.size() ? weather.hourlyList.get(3).pop : 0;  entity.hourlyPops_1=4 < weather.hourlyList.size() ? weather.hourlyList.get(4).pop : 0;  entity.hourlyPops_1=5 < weather.hourlyList.size() ? weather.hourlyList.get(5).pop : 0;  entity.hourlyPops_1=6 < weather.hourlyList.size() ? weather.hourlyList.get(6).pop : 0;  entity.hourlyPops_1=7 < weather.hourlyList.size() ? weather.hourlyList.get(7).pop : 0;  entity.winds_1=weather.life.winds[0];  entity.winds_2=weather.life.winds[1];  entity.pms_1=weather.life.pms[0];  entity.pms_2=weather.life.pms[1];  entity.hums_1=weather.life.hums[0];  entity.hums_2=weather.life.hums[1];  entity.uvs_1=weather.life.uvs[0];  entity.uvs_2=weather.life.uvs[1];  entity.dresses_1=weather.life.dresses[0];  entity.dresses_2=weather.life.dresses[1];  entity.colds_1=weather.life.colds[0];  entity.colds_2=weather.life.colds[1];  entity.airs_1=weather.life.airs[0];  entity.airs_2=weather.life.airs[1];  entity.washCars_1=weather.life.washCars[0];  entity.washCars_2=weather.life.washCars[1];  entity.sports_1=weather.life.sports[0];  entity.sports_2=weather.life.sports[1];  return entity;}  }
class C{  private void step2primitive(DBIDRef id,DBIDArrayIter it,int n,Relation<? extends O> relation,PrimitiveDistanceFunction<? super O> distFunc,WritableDoubleDataStore m){  O newObj=relation.get(id);  for (it.seek(0); it.getOffset() < n; it.advance()) {    m.putDouble(it,distFunc.distance(relation.get(it),newObj));  }}  }
class C{  public IntMathVec clone(){  try {    IntMathVec iObj=(IntMathVec)super.clone();    iObj.iV=iV.clone();    return iObj;  } catch (  CloneNotSupportedException e) {    System.out.println("IntMathVec.clone: Something happened that cannot happen -- ?");    return null;  }}  }
class C{  private static void realTimePopulate(final Ignite g){  try (IgniteDataStreamer<Integer,Long> ldr=g.dataStreamer(null)){    ldr.perNodeParallelOperations(1);    ldr.receiver(new IncrementingUpdater());    for (int i=0; i < CNT; i++)     ldr.addData(i % (CNT / 2),1L);  } }  }
class C{  public void forwardRequest(String groupPath,Operation request){  forwardRequest(groupPath,null,request);}  }
class C{  public static final XSLTErrorResources loadResourceBundle(String className) throws MissingResourceException {  Locale locale=Locale.getDefault();  String suffix=getResourceSuffix(locale);  try {    return (XSLTErrorResources)ResourceBundle.getBundle(className + suffix,locale);  } catch (  MissingResourceException e) {    try {      return (XSLTErrorResources)ResourceBundle.getBundle(className,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles.",className,"");    }  }}  }
class C{  @Override public void applyAction(@NotNull WireOut outWire){  applyAction(outWire.bytes());  for (int y=1; y < 1000; y++) {    long pos=outWire.bytes().writePosition();    for (int i=0; i < consumers.size(); i++) {      if (outWire.bytes().writePosition() > TcpEventHandler.TCP_BUFFER)       return;      if (isClosed())       return;      WireOutConsumer c=next();      try {        c.accept(outWire);      } catch (      InvalidEventHandlerException e) {        consumers.remove(c);      }catch (      InterruptedException e) {        Thread.currentThread().interrupt();        Jvm.warn().on(getClass(),e);        return;      }    }    if (pos == outWire.bytes().writePosition())     return;  }  Jvm.warn().on(getClass(),new IllegalStateException("loop when too long"));}  }
class C{  public XMethodParameter(XMethod m,int p){  method=m;  parameter=p;}  }
class C{  @RequestMapping(value="/foos/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteFoo(@PathVariable Long id){  log.debug("REST request to delete Foo : {}",id);  fooRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("foo",id.toString())).build();}  }
class C{  static boolean separateConvexPolygons(float[] verts1,float[] verts2,Vector2 separation){  final int length1=verts1.length;  final int length2=verts2.length;  for (int i=0; i < length1; i+=2) {    final int j=(i + 1) % length1;    float projX=verts1[j + 1] - verts1[i + 1];    float projY=verts1[i] - verts1[j];    final float length=(float)Math.sqrt(projX * projX + projY * projY);    projX/=length;    projY/=length;    float min1=Float.POSITIVE_INFINITY, max1=Float.NEGATIVE_INFINITY;    for (int k=0; k < length1; k+=2) {      final float dot=projX * verts1[k] + projY * verts1[k + 1];      if (dot < min1)       min1=dot;      if (dot > max1)       max1=dot;    }    float min2=Float.POSITIVE_INFINITY, max2=Float.NEGATIVE_INFINITY;    for (int k=0; k < length2; k+=2) {      final float dot=projX * verts2[k] + projY * verts2[k + 1];      if (dot < min2)       min2=dot;      if (dot > max2)       max2=dot;    }    if ((max1 < min2) || (max2 < min1)) {      if (null != separation)       separation.set(projY,-projX);      return true;    }  }  return false;}  }
class C{  public static void write(Id parcelID,Map<Modes4Accessibility,Double> accessibilities){  try {    assert (UrbanSimParcelCSVWriter.parcelWriter != null);    parcelWriter.write(parcelID.toString());    for (    Modes4Accessibility mode : Modes4Accessibility.values()) {      parcelWriter.write("," + accessibilities.get(mode));    }    parcelWriter.newLine();  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException("could not write");  }}  }
class C{  private void fieldInsn(final int opcode,final Type ownerType,final String name,final Type fieldType){  mv.visitFieldInsn(opcode,ownerType.getInternalName(),name,fieldType.getDescriptor());}  }
class C{  @Deprecated public static void retransformIfNeeded(List<Class<?>> classes){  if (classes == null || classes.isEmpty()) {    return;  }  List<Class<?>> classToReInstrument=new ArrayList<>();  for (  Class<?> cl : classes) {    if (!InstrumentingAgent.getTransformer().isClassAlreadyTransformed(cl.getName())) {      classToReInstrument.add(cl);    }  }  if (classToReInstrument.isEmpty()) {    return;  }  InstrumentingAgent.setRetransformingMode(true);  try {    if (!classToReInstrument.isEmpty()) {      InstrumentingAgent.getInstrumentation().retransformClasses(classToReInstrument.toArray(new Class<?>[0]));    }  } catch (  UnmodifiableClassException e) {    java.lang.System.err.println("Could not re-instrument classes");  }catch (  UnsupportedOperationException e) {    logger.error("EvoSuite wrong re-instrumentation: " + e.getMessage());  } finally {    InstrumentingAgent.setRetransformingMode(false);  }  InstrumentingAgent.deactivate();}  }
class C{  public RDFSVocabulary(){  super();}  }
class C{  public HostListPanel(RemoteExperiment exp){  this();  setExperiment(exp);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static void populateDummy(SQLiteDatabase writableDb){  long now=System.currentTimeMillis();  Calendar time=Calendar.getInstance();  time.setTimeInMillis(now);  for (int i=0; i < 500; i++) {    int type=i % 2 == 0 ? Item.TYPE_EXPENSE : Item.TYPE_INCOME;    long millis=time.getTimeInMillis();    Item item=new Item(type,"Test #" + i % 100,"#" + i,i * 1000,millis,Item.NO_ID);    ItemDao.saveItem(writableDb,item);    if (i != 0 && i % 3 == 0) {      time.add(Calendar.DAY_OF_YEAR,-10);    }  }}  }
class C{  public SVGCSSEngine(Document doc,ParsedURL uri,ExtendedParser p,CSSContext ctx){  super(doc,uri,p,SVG_VALUE_MANAGERS,SVG_SHORTHAND_MANAGERS,null,null,"style",null,"class",true,null,ctx);  lineHeightIndex=fontSizeIndex;}  }
class C{  public void testMaxWordCount() throws Exception {  Reader reader=new StringReader("one two three four");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Capitalization","maxWordCount","2").create(stream);  assertTokenStreamContents(stream,new String[]{"One","Two","Three","Four"});}  }
class C{  private void initialize(){  this.setName(NAME);  this.setOrder(202);}  }
class C{  public SnackbarBuilder icon(@DrawableRes int iconResId){  icon=getDrawable(iconResId);  return this;}  }
class C{  public ReprocessEpubMetadataDialog(java.awt.Frame parent,boolean modal,boolean removeCss,boolean restoreCss,File defaultStyleSheet,String onlyForTag){  super(parent,modal);  setLocationRelativeTo(parent);  initComponents();  this.removeCss=removeCss;  this.restoreCss=restoreCss;  this.defaultStyleSheet=defaultStyleSheet;  this.onlyForTag=onlyForTag;}  }
class C{  public void remove(FactLine line){  m_lines.remove(line);}  }
class C{  public static <T,L extends List<T>>L sortThis(L list,Predicate2<? super T,? super T> predicate){  return Iterate.sortThis(list,(Comparator<T>)null);}  }
class C{  public void testReadFENCastleFlags() throws ChessParseError {  String fenBogus="rnbqk2r/1p3ppp/p7/1NpPp3/QPP1P1n1/P4N2/4KbPP/R1B2B1R w KQkq - 0 1";  Position pos=TextIO.readFEN(fenBogus);  String fenCorrect="rnbqk2r/1p3ppp/p7/1NpPp3/QPP1P1n1/P4N2/4KbPP/R1B2B1R w kq - 0 1";  assertEquals(fenCorrect,TextIO.toFEN(pos));}  }
class C{  public static <T,V>void show(BackgroundTask<T,V> task,String title,String message){  show(task,title,message,false);}  }
class C{  public DrawerBuilder withSliderBackgroundColorRes(@ColorRes int sliderBackgroundColorRes){  this.mSliderBackgroundColorRes=sliderBackgroundColorRes;  return this;}  }
class C{  private void reassessModel(){  if (this.modelParamTypes == null) {    return;  }  for (  Class clazz : this.modelParamTypes) {    if (clazz == null) {      return;    }  }  List<Class<? extends Object>> list1=new ArrayList<>();  for (  SessionNode node : this.parents) {    Object model=node.getModel();    if (model != null) {      list1.add(model.getClass());    }  }  List<Class> list2=Arrays.asList(this.modelParamTypes);  if (!list1.contains(list2) || !list2.contains(list1)) {    destroyModel();  }}  }
class C{  public static String[] splitNoCompress(String src,String delimiter){  if (src == null || delimiter == null) {    return null;  }  int maxparts=(src.length() / delimiter.length()) + 2;  int[] positions=new int[maxparts];  int dellen=delimiter.length();  int i, j=0;  int count=0;  positions[0]=-dellen;  while ((i=src.indexOf(delimiter,j)) != -1) {    count++;    positions[count]=i;    j=i + dellen;  }  count++;  positions[count]=src.length();  String[] result=new String[count];  for (i=0; i < count; i++) {    result[i]=src.substring(positions[i] + dellen,positions[i + 1]);  }  return result;}  }
class C{  public static int EDOTDOT(){  return 73;}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public void trimToSize(){  int newCapacity=nextPrime((int)(1 + 1.2 * size()));  if (table.length > newCapacity) {    rehash(newCapacity);  }}  }
class C{  public void updateNClob(int columnIndex,Reader reader,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  public void dispatchOnStop(){  mMultiSelectManager.unregisterCallback(this);}  }
class C{  public void init(final boolean isSingle){  this.isSingle=isSingle;  previousSearch=new JavaFXButton();  nextSearch=new JavaFXButton();  searchButton=new JavaFXButton();  first=new JavaFXButton();  fback=new JavaFXButton();  back=new JavaFXButton();  forward=new JavaFXButton();  fforward=new JavaFXButton();  last=new JavaFXButton();  snapshotButton=new JavaFXButton();  buyButton=new JavaFXButton();  helpButton=new JavaFXButton();  rssButton=new JavaFXButton();  singleButton=new JavaFXButton();  continuousButton=new JavaFXButton();  continuousFacingButton=new JavaFXButton();  facingButton=new JavaFXButton();  pageFlowButton=new JavaFXButton();  openButton=new JavaFXButton();  docPropButton=new JavaFXButton();  infoButton=new JavaFXButton();  mouseMode=new JavaFXButton();  setupButtonStyle();}  }
class C{  @Override public void start(){  schedExecutor.scheduleAtFixedRate(new Cleaner(),2,2,TimeUnit.SECONDS);}  }
class C{  protected Server startServerWithHandlers(ContextHandler... handlers) throws Exception {  server=new Server(PORT);  ContextHandlerCollection contexts=new ContextHandlerCollection();  contexts.setHandlers(handlers);  contexts.addHandler(mockMetaServerHandler());  server.setHandler(contexts);  server.start();  return server;}  }
class C{  public TypeNode typeNode(Type type){  if (type == null) {    throw new InternalTypingException();  }  type=transform.toInt(type);  TypeNode typeNode=typeNodeMap.get(type);  if (typeNode == null) {    int id=typeNodeList.size();    typeNodeList.add(null);    typeNode=make.typeNode(id,type,this);    typeNodeList.set(id,typeNode);    typeNodeMap.put(type,typeNode);  }  return typeNode;}  }
class C{  public static boolean isValidImdbId(String imdbId){  if (StringUtils.isEmpty(imdbId)) {    return false;  }  return imdbId.matches("tt\\d{7}");}  }
class C{  public final static float clamp(final float a,final float low,final float high){  return max(low,min(a,high));}  }
class C{  public static Coordinate[] linkIdList2Coordinates(Network network,List<Id<Link>> linkIdList){  List<Coordinate> coordList=new ArrayList<>();  for (  Id<Link> linkId : linkIdList) {    if (network.getLinks().containsKey(linkId)) {      coordList.add(MGC.coord2Coordinate(network.getLinks().get(linkId).getFromNode().getCoord()));    } else {      throw new IllegalArgumentException("Link " + linkId + " not found in network");    }  }  coordList.add(MGC.coord2Coordinate(network.getLinks().get(linkIdList.get(linkIdList.size() - 1)).getToNode().getCoord()));  Coordinate[] coordinates=new Coordinate[coordList.size()];  return coordList.toArray(coordinates);}  }
class C{  public StatisticalResultsViewer(Controller controller,String results){  super(localization.getString("title.statisticalResults"));  this.controller=controller;  this.results=results;  initialize();  layoutComponents();  setSize(800,600);  setMinimumSize(new Dimension(800,600));  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);}  }
class C{  public synchronized void stop(){  stopRMI();  stopJmxConnector();}  }
class C{  public static void logProductView(long remoteId,String name){  Bundle parameters=new Bundle();  parameters.putString(AppEventsConstants.EVENT_PARAM_CONTENT_TYPE,PRODUCT);  parameters.putLong(AppEventsConstants.EVENT_PARAM_CONTENT_ID,remoteId);  parameters.putString(AppEventsConstants.EVENT_PARAM_DESCRIPTION,name);  logFbEvent(AppEventsConstants.EVENT_NAME_VIEWED_CONTENT,null,parameters);  Map<String,String> event=new HitBuilders.EventBuilder().setCategory(PRODUCT).setAction("view").setLabel("product with id: " + remoteId + ", name: "+ name).build();  sendEventToAppTrackers(event);}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:25.750 -0500",hash_original_method="F697D7E02D0C8DEEF4B0854E9491CC15",hash_generated_method="0985E3F05C2C68525EE88590F9B35C21") public void parseForField(GenericDeclaration genericDecl,String signature){  setInput(genericDecl,signature);  if (!eof) {    this.fieldType=parseFieldTypeSignature();  }}  }
class C{  public void transform(){synchronized (context) {    for (RegisterOperand def=reg.defList; def != null; def=def.getNext()) {      transform(def);    }    for (RegisterOperand use=reg.useList; use != null; use=use.getNext()) {      transform(use);    }  }}  }
class C{  public ToStringBuilder append(boolean[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public SignedToken(){}  }
class C{  public boolean isItem(){  return PRODUCTTYPE_Item.equals(getProductType());}  }
class C{  public void deleteGroupUser(int groupId,int userId,String entidad) throws Exception {  boolean commit=false;  boolean inTrans=false;  if (_logger.isDebugEnabled())   _logger.debug("deleteGroupUser");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    dbConn.beginTransaction();    inTrans=true;    deleteBase(groupId,userId,entidad);    commit=true;  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    if (inTrans)     dbConn.endTransaction(commit);    dbConn.close();  }}  }
class C{  @Override public void validate(){  validate7ZipSettings();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, zN1, zN2, noData, outputNoData;  int[] dX=new int[]{0,0,-1,1};  int[] dY=new int[]{-1,1,0,0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          zN1=DEM.getValue(row + dY[0],col + dX[0]);          zN2=DEM.getValue(row + dY[1],col + dX[1]);          if ((zN1 != noData) && (zN2 != noData) && (zN1 > z)&& (zN2 > z)) {            output.setValue(row,col,1);          } else {            zN1=DEM.getValue(row + dY[2],col + dX[2]);            zN2=DEM.getValue(row + dY[3],col + dX[3]);            if ((zN1 != noData) && (zN2 != noData) && (zN1 > z)&& (zN2 > z)) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int i, a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String changeIpsecStatus(String status){  return changeIpsecStatus(status,true);}  }
class C{  public FancyButton(String text,Icon icon){  super(text,icon);  addMouseListener(hoverListener);  addFocusListener(focusListener);  setBorderPainted(false);  setBorder(new DropShadowBorder(SHADOW_COLOR,5,0.5f,12,false,false,true,true));  setFocusPainted(false);  setContentAreaFilled(false);  setHorizontalAlignment(SwingConstants.LEFT);  setHorizontalTextPosition(SwingConstants.RIGHT);  setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));  setForeground(normalTextColor);  drawArrow=true;}  }
class C{  public StarsLayer(String starsFileName,Double radius){  if (WWUtil.isEmpty(starsFileName)) {    String message=Logging.getMessage("nullValue.FilePathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.initialize(starsFileName,radius);}  }
class C{  public static Map<String,Object> recalcOrderShipping(DispatchContext ctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=ctx.getDispatcher();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Security security=ctx.getSecurity();  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);  if (!hasPermission) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));  }  GenericValue orderHeader=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetOrderHeaderEntity",locale) + e.getMessage());  }  if (orderHeader == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorNoValidOrderHeaderFoundForOrderId",UtilMisc.toMap("orderId",orderId),locale));  }  OrderReadHelper orh=new OrderReadHelper(orderHeader);  List<GenericValue> shipGroups=orh.getOrderItemShipGroups();  if (shipGroups != null) {    for (    GenericValue shipGroup : shipGroups) {      String shipGroupSeqId=shipGroup.getString("shipGroupSeqId");      if (shipGroup.get("contactMechId") == null || shipGroup.get("shipmentMethodTypeId") == null) {        continue;      }      Map<String,Object> shippingEstMap=ShippingEvents.getShipEstimate(dispatcher,delegator,orh,shipGroupSeqId);      BigDecimal shippingTotal=null;      if (UtilValidate.isEmpty(orh.getValidOrderItems(shipGroupSeqId))) {        shippingTotal=ZERO;        Debug.logInfo("No valid order items found - " + shippingTotal,module);      } else {        shippingTotal=UtilValidate.isEmpty(shippingEstMap.get("shippingTotal")) ? ZERO : (BigDecimal)shippingEstMap.get("shippingTotal");        shippingTotal=shippingTotal.setScale(orderDecimals,orderRounding);        Debug.logInfo("Got new shipping estimate - " + shippingTotal,module);      }      if (Debug.infoOn()) {        Debug.logInfo("New Shipping Total [" + orderId + " / "+ shipGroupSeqId+ "] : "+ shippingTotal,module);      }      BigDecimal currentShipping=OrderReadHelper.getAllOrderItemsAdjustmentsTotal(orh.getOrderItemAndShipGroupAssoc(shipGroupSeqId),orh.getAdjustments(),false,false,true);      currentShipping=currentShipping.add(OrderReadHelper.calcOrderAdjustments(orh.getOrderHeaderAdjustments(shipGroupSeqId),orh.getOrderItemsSubTotal(),false,false,true));      if (Debug.infoOn()) {        Debug.logInfo("Old Shipping Total [" + orderId + " / "+ shipGroupSeqId+ "] : "+ currentShipping,module);      }      List<String> errorMessageList=UtilGenerics.checkList(shippingEstMap.get(ModelService.ERROR_MESSAGE_LIST));      if (errorMessageList != null) {        Debug.logWarning("Problem finding shipping estimates for [" + orderId + "/ "+ shipGroupSeqId+ "] = "+ errorMessageList,module);        continue;      }      if ((shippingTotal != null) && (shippingTotal.compareTo(currentShipping) != 0)) {        BigDecimal adjustmentAmount=shippingTotal.subtract(currentShipping);        String adjSeqId=delegator.getNextSeqId("OrderAdjustment");        GenericValue orderAdjustment=delegator.makeValue("OrderAdjustment",UtilMisc.toMap("orderAdjustmentId",adjSeqId));        orderAdjustment.set("orderAdjustmentTypeId","SHIPPING_CHARGES");        orderAdjustment.set("amount",adjustmentAmount);        orderAdjustment.set("orderId",orh.getOrderId());        orderAdjustment.set("shipGroupSeqId",shipGroupSeqId);        orderAdjustment.set("orderItemSeqId",DataModelConstants.SEQ_ID_NA);        orderAdjustment.set("createdDate",UtilDateTime.nowTimestamp());        orderAdjustment.set("createdByUserLogin",userLogin.getString("userLoginId"));        try {          orderAdjustment.create();        } catch (        GenericEntityException e) {          Debug.logError(e,"Problem creating shipping re-calc adjustment : " + orderAdjustment,module);          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotCreateAdjustment",locale));        }      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public GlobeWgs84(){  super(WorldWind.WGS84_SEMI_MAJOR_AXIS,WorldWind.WGS84_INVERSE_FLATTENING,new ProjectionWgs84());}  }
class C{  public DistributedLogClientBuilder finagleNameStrs(String local,String... remotes){  DistributedLogClientBuilder newBuilder=newBuilder(this);  RoutingService.Builder[] builders=new RoutingService.Builder[remotes.length + 1];  builders[0]=RoutingUtils.buildRoutingService(local);  for (int i=1; i < builders.length; i++) {    builders[i]=RoutingUtils.buildRoutingService(remotes[i - 1]);  }  newBuilder._routingServiceBuilder=RegionsRoutingService.newBuilder().routingServiceBuilders(builders).resolver(_regionResolver);  newBuilder._enableRegionStats=remotes.length > 0;  return newBuilder;}  }
class C{  public T userAgent(String value){  setString(GoogleAnalyticsParameter.USER_AGENT,value);  return (T)this;}  }
class C{  public static Collection<? extends Statement> difference(Collection<? extends Statement> model1,Collection<? extends Statement> model2){  LinkedList<Statement> copy1=new LinkedList<Statement>(model1);  LinkedList<Statement> copy2=new LinkedList<Statement>(model2);  Collection<Statement> result=new ArrayList<Statement>();  Iterator<Statement> iter1=copy1.iterator();  while (iter1.hasNext()) {    Statement st=iter1.next();    if (st.getSubject() instanceof BNode || st.getObject() instanceof BNode) {      continue;    }    boolean removed=copy2.remove(st);    if (!removed) {      result.add(st);    }    iter1.remove();  }  HashMap<BNode,BNode> bNodeMapping=new HashMap<BNode,BNode>();  for (  Statement st1 : copy1) {    boolean foundMatch=false;    for (    Statement st2 : copy2) {      if (statementsMatch(st1,st2,bNodeMapping)) {        foundMatch=true;        break;      }    }    if (!foundMatch) {      result.add(st1);    }  }  return result;}  }
class C{  public void paintTreeBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void onBindViewHolder(TagRadioChoiceHolder holder,int position){  final TagItem tagItem=tagItemList.get(position);  holder.getTextViewKey().setText(ParserManager.parseTagName(tagItem.getKey()));  List<String> values=tagItem.getValues();  boolean isFourElements=values.size() == 3;  RadioButton[] radioButtons=holder.getRadioButtons();  int pos=0;  for (int i=0; i < radioButtons.length; i++) {    if (!values.isEmpty()) {      if (isFourElements && i == 1) {        radioButtons[i].setVisibility(View.INVISIBLE);        i++;        isFourElements=false;      }      if (pos < values.size()) {        radioButtons[i].setText(values.get(pos));        radioButtons[i].setVisibility(View.VISIBLE);        if (tagItem.getValue() != null && tagItem.getValue().equals(values.get(pos))) {          holder.getUndefinedRadioButton().setChecked(false);          radioButtons[i].setChecked(true);        }        pos++;      } else {        radioButtons[i].setVisibility(View.INVISIBLE);      }    }  }  if (!tagItem.isConform() && holder.getContent().getChildAt(1).getId() != R.id.malformated_layout) {    holder.getContent().addView(LayoutInflater.from(activity).inflate(R.layout.malformated_layout,holder.getContent(),false),1);    String currentValue=activity.getString(R.string.malformated_value) + " " + tagItem.getValue();    ((TextView)((LinearLayout)holder.getContent().getChildAt(1)).getChildAt(1)).setText(currentValue);  }}  }
class C{  protected static boolean eventSecurityCheck(final SecurityContext userContext,final Event event){  if (userContext == null || userContext.getAuthentication() == null) {    return false;  }  final Object tenantAuthenticationDetails=userContext.getAuthentication().getDetails();  if (tenantAuthenticationDetails instanceof TenantAwareAuthenticationDetails) {    return ((TenantAwareAuthenticationDetails)tenantAuthenticationDetails).getTenant().equalsIgnoreCase(event.getTenant());  }  return false;}  }
class C{  public synchronized void addExplicitIndex(boolean unique,String indexName,List<CreateIndexItem> columns,boolean isRecoveringResilient) throws ExprValidationException {  boolean initIndex=agentInstanceContext.getStatementContext().getEventTableIndexService().allowInitIndex(isRecoveringResilient);  Iterable<EventBean> initializeFrom=initIndex ? this.dataWindowContents : CollectionUtil.NULL_EVENT_ITERABLE;  indexRepository.validateAddExplicitIndex(unique,indexName,columns,rootView.getEventType(),initializeFrom,agentInstanceContext,isRecoveringResilient,null);}  }
class C{  public T caseTransitionReaction(TransitionReaction object){  return null;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","feedu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static ErrorCodeAttribute createErrorCodeAttribute(byte errorClass,byte errorNumber,String reasonPhrase) throws StunException {  ErrorCodeAttribute attribute=new ErrorCodeAttribute();  attribute.setErrorClass(errorClass);  attribute.setErrorNumber(errorNumber);  attribute.setReasonPhrase(reasonPhrase == null ? ErrorCodeAttribute.getDefaultReasonPhrase(attribute.getErrorCode()) : reasonPhrase);  return attribute;}  }
class C{  public static void main(String[] args) throws Exception {  PorterAnalyzer thePorterAnalyzer=new PorterAnalyzer();  System.err.println("Attempting to perform Porter stemming on file " + args[0]);  BufferedReader inReader=new BufferedReader(new FileReader(args[0]));  String inLine=inReader.readLine();  while (inLine != null) {    System.out.println(thePorterAnalyzer.stemQuery(inLine));    inLine=inReader.readLine();  }  thePorterAnalyzer.close();  inReader.close();}  }
class C{  public LruCache(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("Max size must be positive.");  }  this.maxSize=maxSize;  this.map=new LinkedHashMap<String,Bitmap>(0,0.75f,true);}  }
class C{  public UnsupportedHttpVersionException(final String message){  super(message);}  }
class C{  public void markFailed(){  failures=true;  for (  TestRuleMarkFailure next : chained) {    next.markFailed();  }}  }
class C{  private void addInfo(final Path tempDirectory) throws IOException {  File dest=Paths.get(tempDirectory.toString(),INFO_FILE_NAME).toFile();  Map<String,String> info=new HashMap<>();  info.put(VERSION_KEY,CURRENT_VERSION);  objectMapper.writeValue(dest,info);}  }
class C{  public Exchanger(){  participant=new Participant();}  }
class C{  public void consumeWriteBuffer(int count) throws IllegalArgumentException, BufferOverflowException {  if (count > getWriteRemaining()) {    throw new BufferOverflowException();  }  if (count < 0) {    throw new IllegalArgumentException();  }  int newPos=(write_pos + count) % array.length;  assertWriteLimit(newPos);  write_pos=newPos;  buffered+=count;}  }
class C{  public Csc(){  super("csc",1);}  }
class C{  public static AttributeMetaData generateAttributeMetaData(ExampleSet exampleSet,String name,ExpressionType expressionType){  AttributeMetaData newAttribute=null;  Attribute existingAtt=exampleSet.getAttributes().get(name);  int ontology=expressionType.getAttributeType();  if (ontology == Ontology.BINOMINAL) {    newAttribute=new AttributeMetaData(name,Ontology.BINOMINAL);    HashSet<String> values=new HashSet<>();    values.add("false");    values.add("true");    newAttribute.setValueSet(values,SetRelation.EQUAL);  } else {    newAttribute=new AttributeMetaData(name,ontology);  }  if (existingAtt != null) {    newAttribute.setRole(exampleSet.getAttributes().getRole(existingAtt).getSpecialName());  }  return newAttribute;}  }
class C{  synchronized public void deleteContact(String username){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.delete(UserDao.TABLE_NAME,UserDao.COLUMN_NAME_ID + " = ?",new String[]{username});  }}  }
class C{  public TransactionHit txId(String value){  setString(TRANSACTION_ID,value);  return this;}  }
class C{  public void addAll(Set<ResourceType> resourceTypeSet){  resourceTypeSet.forEach(null);}  }
class C{  protected final GridNioServer<?> startServer(GridNioParser parser,GridNioServerListener lsnr) throws Exception {  return startServer(parser,lsnr,null);}  }
class C{  public void configIndexFactory(Parameterization config,Class<?> restriction,Class<?> defaultClass){  ObjectParameter<F> param=new ObjectParameter<>(INDEX_ID,restriction,defaultClass);  if (config.grab(param)) {    factory=param.instantiateClass(config);  }}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return true;}  }
class C{  public void addLinkedFrom(CrawlIssueLinkedFromUrl linkedFrom){  getLinkedFroms().add(linkedFrom);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xC4C494F8,version=150) public int sceSdGetLastIndex(@BufferInfo(lengthInfo=LengthInfo.fixedLength,length=40,usage=Usage.inout) TPointer ctx2Addr,@CanBeNull @BufferInfo(lengthInfo=LengthInfo.fixedLength,length=16,usage=Usage.out) TPointer8 hash,@CanBeNull @BufferInfo(lengthInfo=LengthInfo.fixedLength,length=16,usage=Usage.out) TPointer8 key){  SAVEDATA.SD_Ctx1 ctx=new SAVEDATA.SD_Ctx1();  ctx.read(ctx2Addr);  byte[] hashBytes=hash.isNull() ? null : new byte[16];  byte[] keyBytes=key.isNull() ? null : new byte[16];  int result=crypto.getSAVEDATAEngine().hleSdGetLastIndex(ctx,hashBytes,keyBytes);  if (hashBytes != null) {    Utilities.writeBytes(hash.getAddress(),hashBytes.length,hashBytes,0);  }  if (keyBytes != null) {    Utilities.writeBytes(key.getAddress(),keyBytes.length,keyBytes,0);  }  ctx.write(ctx2Addr);  return result;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a, b, c: ");  double a=input.nextDouble();  double b=input.nextDouble();  double c=input.nextDouble();  QuadraticEquation quadraticEquation=new QuadraticEquation(a,b,c);  System.out.print("The equation has ");  if (quadraticEquation.getDiscriminant() < 0)   System.out.println("no real roots"); else   if (quadraticEquation.getDiscriminant() > 0) {    System.out.println("two roots " + quadraticEquation.getRoot1() + " and "+ quadraticEquation.getRoot2());  } else {    System.out.println("one root " + (quadraticEquation.getRoot1() > 0 ? quadraticEquation.getRoot1() : quadraticEquation.getRoot2()));  }}  }
class C{  public void trim(){  for (  Entry<?> entry : entries) {    entry.trim(size);  }}  }
class C{  @Override public final void shutdownInput() throws IOException {  throw new UnsupportedOperationException("The method shutdownInput()" + " is not supported in SSLSocket");}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.METHOD_DECLARATION;}  }
class C{  private static Object convertValue(String type,String param,Locale locale) throws ParseException {  if ("2".equals(type)) {    SimpleDateFormat simpleDateFormat=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_SHORTFORMAT));    simpleDateFormat.setLenient(false);    return simpleDateFormat.parse(param);  } else {    return param;  }}  }
class C{  private void writeFileHeader() throws IOException {  ByteBuffer buf=ByteBuffer.allocate((int)HEADER_LENGTH);  buf.put(MAGIC_NUMBER);  buf.put(FILE_FORMAT_VERSION);  buf.putInt(bucketCount);  buf.putInt(bucketSize);  buf.putInt(itemCount);  buf.rewind();  nioFile.write(buf,0L);}  }
class C{  @Override public Assignment sample(){  if (intervals == null) {    intervals=new Intervals<Assignment>(table);  }  if (intervals.isEmpty()) {    log.warning("interval is empty, table: " + table);    return new Assignment();  }  return intervals.sample();}  }
class C{  @Override public void restoreSingleVolumeSnapshot(StorageSystem storage,URI volume,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    BlockSnapshot from=dbClient.queryObject(BlockSnapshot.class,snapshot);    Volume to=dbClient.queryObject(Volume.class,volume);    HDSApiClient hdsApiClient=hdsApiFactory.getClient(HDSUtils.getHDSServerManagementServerInfo(storage),storage.getSmisUserName(),storage.getSmisPassword());    HDSHost pairMgmtServer=hdsApiClient.getSnapshotGroupPairManagementServer(storage.getSerialNumber());    if (pairMgmtServer == null) {      log.error("Unable to find snapshot group information/pair management server for Thin Image");      throw HDSException.exceptions.snapshotGroupNotAvailable(storage.getNativeGuid());    }    SnapshotGroup snapShotGrp=getViPRSnapshotGroup(pairMgmtServer,storage.getSerialNumber());    log.debug("to.getNativeId() :{}",to.getNativeId());    log.debug("from.getNativeId() :{}",from.getNativeId());    ReplicationInfo repInfo=getReplicationInfo(snapShotGrp,to.getNativeId(),from.getNativeId());    hdsApiClient.restoreThinImagePair(pairMgmtServer.getObjectID(),snapShotGrp.getObjectID(),repInfo.getObjectID(),storage.getModel());    taskCompleter.ready(dbClient);    log.info("Restore Snapshot volume completed");  } catch (  Exception e) {    String message=String.format("Generic exception when trying to restore from snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    log.error(message,e);    ServiceError error=DeviceControllerErrors.hds.methodFailed("restoreSingleVolumeSnapshot",e.getMessage());    taskCompleter.error(dbClient,error);  }}  }
class C{  public static void checkOldData(SupportUpdateListener updateListener,EventBean[] expectedValues){  EventBean[] oldData=updateListener.getLastOldData();  EPAssertionUtil.assertEqualsExactOrder(expectedValues,oldData);  updateListener.setLastOldData(null);}  }
class C{  private void updateClusterMember(ObjectName mbeanName) throws IOException {  try {    String memberName=mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);    Cluster.Member clusterMember=cluster.getMembersHMap().get(memberName);    if (clusterMember != null) {      cluster.getDeletedMembers().remove(memberName);    } else {      clusterMember=new Cluster.Member();      cluster.getMembersHMap().put(memberName,clusterMember);    }    clusterMember=initializeMember(mbeanName,clusterMember);    ArrayList<Cluster.Member> memberArrList=(ArrayList<Cluster.Member>)cluster.getPhysicalToMember().get(clusterMember.getHost());    if (memberArrList != null) {      if (!memberArrList.contains(clusterMember)) {        memberArrList.add(clusterMember);      }    } else {      ArrayList<Cluster.Member> memberList=new ArrayList<Cluster.Member>();      memberList.add(clusterMember);      cluster.getPhysicalToMember().put(clusterMember.getHost(),memberList);    }  } catch (  InstanceNotFoundException infe) {    LOGGER.warning(infe);  }catch (  ReflectionException re) {    LOGGER.warning(re);  }}  }
class C{  private static int maskForPowerOfTwo(int val){  int mask=0;  int comparand=1;  while (comparand < val) {    mask|=comparand;    comparand<<=1;  }  return mask;}  }
class C{  private Statistics(){  instanceNotAllowed(getClass());}  }
class C{  private void writeFieldBeginInternal(TField field,byte typeOverride) throws TException {  byte typeToWrite=typeOverride == -1 ? getCompactType(field.type) : typeOverride;  if (field.id > lastFieldId_ && field.id - lastFieldId_ <= 15) {    writeByteDirect((field.id - lastFieldId_) << 4 | typeToWrite);  } else {    writeByteDirect(typeToWrite);    writeI16(field.id);  }  lastFieldId_=field.id;}  }
class C{  private static int[] leftShift(int[] a,int len,int n){  int nInts=n >>> 5;  int nBits=n & 0x1F;  int bitsInHighWord=bitLengthForInt(a[0]);  if (n <= (32 - bitsInHighWord)) {    primitiveLeftShift(a,len,nBits);    return a;  } else {    if (nBits <= (32 - bitsInHighWord)) {      int result[]=new int[nInts + len];      System.arraycopy(a,0,result,0,len);      primitiveLeftShift(result,result.length,nBits);      return result;    } else {      int result[]=new int[nInts + len + 1];      System.arraycopy(a,0,result,0,len);      primitiveRightShift(result,result.length,32 - nBits);      return result;    }  }}  }
class C{  public ExecutionError(@Nullable Error cause){  super(cause);}  }
class C{  public void normalizeURI(I invocation,String rawURI) throws IOException {  invocation.setRawURI(rawURI);  String uri=normalizeUri(rawURI);  invocation.setURI(uri);}  }
class C{  private static int arrayMemberHash(final Class<?> componentType,final Object o){  if (componentType.equals(Byte.TYPE)) {    return Arrays.hashCode((byte[])o);  }  if (componentType.equals(Short.TYPE)) {    return Arrays.hashCode((short[])o);  }  if (componentType.equals(Integer.TYPE)) {    return Arrays.hashCode((int[])o);  }  if (componentType.equals(Character.TYPE)) {    return Arrays.hashCode((char[])o);  }  if (componentType.equals(Long.TYPE)) {    return Arrays.hashCode((long[])o);  }  if (componentType.equals(Float.TYPE)) {    return Arrays.hashCode((float[])o);  }  if (componentType.equals(Double.TYPE)) {    return Arrays.hashCode((double[])o);  }  if (componentType.equals(Boolean.TYPE)) {    return Arrays.hashCode((boolean[])o);  }  return Arrays.hashCode((Object[])o);}  }
class C{  private static void flushAndFinish(AmazonKinesis producer,String streamName,RecordAggregator aggregator){  AggRecord finalRecord=aggregator.clearAndGet();  ForkJoinPool.commonPool().execute(null);  System.out.println("Waiting for all transmissions to complete...");  ForkJoinPool.commonPool().awaitQuiescence(2,TimeUnit.MINUTES);  System.out.println("Transmissions complete.");}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public static final String toString(BytesRef termText){  CharsetDecoder decoder=StandardCharsets.UTF_8.newDecoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);  try {    return decoder.decode(ByteBuffer.wrap(termText.bytes,termText.offset,termText.length)).toString();  } catch (  CharacterCodingException e) {    return termText.toString();  }}  }
class C{  public int addScatterPlot(String name,Color color,double[][] XY){  return ((Plot2DCanvas)plotCanvas).addScatterPlot(name,color,XY);}  }
class C{  public void addConvertedNonCorrSubqs(Map<SqlNode,RexNode> alreadyConvertedNonCorrSubqs){  mapConvertedNonCorrSubqs.putAll(alreadyConvertedNonCorrSubqs);}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public DTLSSession(InetSocketAddress peerAddress,boolean isClient){  this(peerAddress,isClient,0);}  }
class C{  public static PermissionGrantedResponse from(@NonNull String permission){  return new PermissionGrantedResponse(new PermissionRequest(permission));}  }
class C{  public void stopAutoScroll(){  handler.removeMessages(SCROLL_WHAT);}  }
class C{  public ModifiableHyperBoundingBox(int dim,double min,double max){  super();  this.min=new double[dim];  this.max=new double[dim];  Arrays.fill(this.min,min);  Arrays.fill(this.max,max);}  }
class C{  public void testRemainingOptions() throws Exception {  if (m_OptionTester.getOptionHandler() != null) {    if (!m_OptionTester.checkRemainingOptions()) {      fail(getClassname() + ": " + "There were 'left-over' options.");    }  }}  }
class C{  public ParseResult parse(String string,String lastLabel){  string=upcase(string);  string=string.replaceAll("\\r","");  string=string.replaceAll("\\n","");  int tokenStartPos=0, argstartcommand=0;  ParseResult result=new ParseResult();  result.originalLine=string;  if (string.matches("[ \t]*")) {    result.empty=true;    return result;  }  String s=escape(string);  s=stripComments(s,result);  if (labelEnd(s) != -1) {    String checkedLabel=getLabel(s);    if (checkedLabel == null) {      result.error=new ParseError(result.originalLine,getRawLabelString(s),0,"Invalid Label");      return result;    } else {      result.label=checkedLabel;      lastLabel=checkedLabel;      tokenStartPos=labelEnd(s);      s=stripLabel(s);    }  }  if (s.matches("[, \t]*")) {    result.labelOnly=true;    return result;  }  ArrayList<FullArgument> arguments=new ArrayList<>();  String command=null, argument="";  boolean commaDone=false;  int nextSize=-1, size, type, lastType=Op.NULL;  boolean sizeExplicit=false;  String[] tokens=s.split("[ \t]");  for (  String token : tokens) {    if (!token.equals("")) {      token=unescape(token);      argument=hex2dec(token);      type=getOperandType(argument);      tokenStartPos=string.indexOf(token,tokenStartPos);      if (lastType == Op.SIZEQUALI) {        if (!Op.matches(type,Op.MEM | Op.IMM | Op.LABEL| Op.VARIABLE)) {          result.error=new ParseError(string,token,tokenStartPos,"Only an immediate or a memory location is allowed after a size qualifier");          return result;        }      }      if (type == Op.COMMA) {        if (!Op.matches(lastType,Op.PARAM)) {          result.error=new ParseError(string,token,tokenStartPos,"A comma must only be placed after a parameter");          return result;        }        commaDone=true;      }      if (Op.matches(type,Op.SIZEQUALI)) {        nextSize=getOperandSize(token,type);      } else       if (type == Op.COMMA) {      } else       if (command == null) {        command=token;        result.mnemo=command;        argstartcommand=tokenStartPos;        commaDone=true;      } else {        size=-1;        if (!commaDone && Op.matches(type,Op.PARAM)) {          result.error=new ParseError(string,token,tokenStartPos,"You must place a comma between any two parameters");          return result;        }        if (nextSize != -1) {          if (Op.matches(type,Op.IMM | Op.CHARS)) {            if (getOperandSize(argument,type) > nextSize) {              result.error=new ParseError(string,token,tokenStartPos,"Operand does not match previous size qualifier.");              return result;            }          }          size=nextSize;          nextSize=-1;          sizeExplicit=true;        } else         if (!Op.matches(type,Op.IMM)) {          size=getOperandSize(argument,type);        }        type=getSizedOperandType(argument,type,size);        arguments.add(new FullArgument(argument,token,tokenStartPos,type,size,sizeExplicit,dataspace));        sizeExplicit=false;        commaDone=type == Op.FPUQUALI;        if (commandLoader.commandExists(argument)) {          commaDone=true;        }      }      lastType=type;      tokenStartPos+=token.length();    }  }  if (Op.matches(getOperandType(command),Op.PREFIX) && (arguments.size() > 0)) {    String temp=command;    command=arguments.get(0).arg;    result.mnemo=command;    arguments.set(0,new FullArgument(temp,temp,0,Op.PREFIX,-1,false,dataspace));    argstartcommand+=temp.length();  } else   if ((arguments.size() > 0) && (arguments.get(0).address.type == Op.PREFIX)) {    result.error=new ParseError(string,arguments.get(0),"Prefixes must be placed before the command");    return result;  }  if (!commandLoader.commandExists(command)) {    result.mnemo=null;    result.error=new ParseError(string,command,argstartcommand,"Unknown command");    return result;  }  JasminCommand cmd=(JasminCommand)commandLoader.getCommand(command);  if (cmd instanceof PreprocCommand) {    if (lastLabel == null) {      result.error=new ParseError(string,command,0,"Preprocessor commands must be preceded by a label.");      return result;    } else {      dataspace.registerConstant(lastLabel);    }  } else   if (cmd instanceof PseudoCommand) {    if (lastLabel != null) {      dataspace.registerVariable(lastLabel);    }  } else {    if (lastLabel != null) {      dataspace.unregisterConstant(lastLabel);      dataspace.unregisterVariable(lastLabel);    }  }  if (!cmd.overrideMaxMemAccess(command)) {    int numMemoryAccesses=0;    for (    FullArgument a : arguments) {      if ((a.address.type & Op.MEM) != 0) {        numMemoryAccesses++;      }      if (numMemoryAccesses > 1) {        result.error=new ParseError(string,a,"Only one memory access allowed.");        return result;      }    }  }  Parameters param=new Parameters(dataspace,this);  param.set(string,command,arguments,cmd.defaultSize(command),cmd.signed());  if (lastLabel != null) {    param.label=lastLabel;  }  for (  FullArgument a : arguments) {    result.usedLabels.addAll(a.usedLabels);  }  for (  FullArgument a : arguments) {    String errorMsg=isValidOperand(a,false);    if (errorMsg != null) {      result.error=new ParseError(string,a,errorMsg);      return result;    }  }  ParseError error=cmd.validate(param);  if (error != null) {    result.error=error;    return result;  }  result.command=cmd;  result.param=param;  if (cmd instanceof PreprocCommand) {    cmd.execute(param);  }  return result;}  }
class C{  public Datastore createNfsDatastore(String datastoreName,String remoteHost,String remotePath){  return createNASDatastore(datastoreName,remoteHost,remotePath,DataStoreAccessMode.readWrite,NasType.NFS,null,null);}  }
class C{  public static void log(String s,Object... params){  if (PDKClient.isDebugMode())   Log.i(TAG,String.format(s,params));}  }
class C{  @VisibleForTesting static boolean circularBufferMatchesBytePattern(byte[] byteArray,int offset,byte[] pattern){  Preconditions.checkNotNull(byteArray);  Preconditions.checkNotNull(pattern);  Preconditions.checkArgument(offset >= 0);  if (pattern.length > byteArray.length) {    return false;  }  for (int i=0; i < pattern.length; i++) {    if (byteArray[(i + offset) % byteArray.length] != pattern[i]) {      return false;    }  }  return true;}  }
class C{  public Image(String formatType,String uri){  super(uri);  setFormatType(formatType);}  }
class C{  public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults){  PermissionManager.onRequestPermissionsResult(activity,permissionListener,requestCode,permissions,grantResults);}  }
class C{  public long findKey(Object value,boolean identity,long notFound){  V[] valueTable=this.valueTable;  if (value == null) {    if (hasZeroValue && zeroValue == null)     return 0;    long[] keyTable=this.keyTable;    for (int i=capacity + stashSize; i-- > 0; )     if (keyTable[i] != EMPTY && valueTable[i] == null)     return keyTable[i];  } else   if (identity) {    if (value == zeroValue)     return 0;    for (int i=capacity + stashSize; i-- > 0; )     if (valueTable[i] == value)     return keyTable[i];  } else {    if (hasZeroValue && value.equals(zeroValue))     return 0;    for (int i=capacity + stashSize; i-- > 0; )     if (value.equals(valueTable[i]))     return keyTable[i];  }  return notFound;}  }
class C{  protected static void putIdentifierKeyCode(String keyIdentifier,int keyCode){  if (IDENTIFIER_KEY_CODES[keyCode / 256] == null) {    IDENTIFIER_KEY_CODES[keyCode / 256]=new String[256];  }  IDENTIFIER_KEY_CODES[keyCode / 256][keyCode % 256]=keyIdentifier;}  }
class C{  protected String convertLegacyModeString(String string){  if ("NativeDimension".equals(string))   return NATIVE_DIMENSION; else   if ("MaintainAspectRatio".equals(string))   return MAINTAIN_ASPECT_RATIO; else   if ("ExplicitDimension".equals(string))   return EXPLICIT_DIMENSION; else   return string;}  }
class C{  @Override public void licenceFile(String textToShow,File licenceFile) throws CancelException {  try {    final FileInputStream content=new FileInputStream(licenceFile);    final StringWriter writer=new StringWriter();    IOUtils.copy(content,writer,"UTF-8");    content.close();    licence(textToShow,writer.toString());  } catch (  IOException e) {    throw new ScriptFailureException("Cannot acces the licence file",e);  }}  }
class C{  @Override public void init(Controller c){  super.init(c);  display=new Display2D(600,600,this);  display.setClipping(false);  displayFrame=display.createFrame();  displayFrame.setTitle("SleuthWorld Display");  c.registerFrame(displayFrame);  displayFrame.setVisible(true);  display.attach(slope,"Slope");  display.attach(landuse,"Landuse");  display.attach(excluded,"Excluded");  display.attach(urbanOverTime,"Current Urban");  display.attach(urban,"Initial Urban");  display.attach(transport,"Transport");  display.attach(hillshade,"Hillshade");  urbanChart=new TimeSeriesChartGenerator();  urbanChart.setTitle("Percent of Urban Tiles in Simulation");  urbanChart.setYAxisLabel("Percent of Urban Tiles");  urbanChart.setXAxisLabel("Time");  JFrame chartFrame=urbanChart.createFrame(this);  chartFrame.setVisible(true);  chartFrame.pack();  c.registerFrame(chartFrame);}  }
class C{  public JSONArray remove(int index){  values.remove(index);  return this;}  }
class C{  public void reconnect(){  if (opened && !allowConnectionRecovery) {    return;  }  reconnectwait thread=new reconnectwait();  thread.start();  try {    thread.join();  } catch (  InterruptedException e) {    log.error("Unable to join to the reconnection thread " + e.getMessage());  }  if (!opened) {    log.error("Failed to re-establish connectivity");  } else {    log.info("Reconnected to " + getCurrentPortName());    resetupConnection();  }}  }
class C{  synchronized void addTracer(Tracer tracer){  if (curTracers.add(tracer)) {    LOG.trace(toString() + ": adding tracer " + tracer.toString());  }}  }
class C{  final public TermNode o(){  return (TermNode)get(2);}  }
class C{  @Deprecated public Experiment(URL url) throws IOException, XMLException {  super(url);}  }
class C{  public SlantedLiner(){  this(20);}  }
class C{  public ValueSource parseValueSource() throws SyntaxError {  return parseValueSource(true);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  Type renameTypeAsType(Type type){  if (type == null) {    return null;  }  if (type.getSort() == Type.OBJECT) {    String in=type.getInternalName();    String newIn=renameInternalType(in);    if (newIn != in) {      return Type.getType("L" + newIn + ";");    }  } else   if (type.getSort() == Type.ARRAY) {    StringBuilder sb=new StringBuilder();    for (int n=type.getDimensions(); n > 0; n--) {      sb.append('[');    }    sb.append(renameType(type.getElementType()));    return Type.getType(sb.toString());  }  return type;}  }
class C{  private void removeItemFavorite(){  MainApplication.getInstance().API.UpdateFavoriteStatusAsync(mItem.getId(),MainApplication.getInstance().API.getCurrentUserId(),false,new UpdateUserDataResponse());}  }
class C{  public UUID nodeId(){  return nodeId;}  }
class C{  private FeatureExtractor createFex(Tree<String> tree,Map<String,FeatureExtractor> cf) throws EdisonException {  String label=tree.getLabel();  if (tree.isLeaf()) {    if (label.startsWith("wn"))     return getWordNetFeatureExtractor(Collections.singletonList(label),cf); else     if (cf.containsKey(definition(label)))     return cf.get(definition(label)); else     return getLeafFeature(label,cf);  } else   if (label.equals("list"))   return processList(tree,cf); else   if (label.equals("conjoin"))   return processConjunction(tree,cf); else   if (ParameterizedFeatureExtractors.fexes.containsKey(label))   return getParameterizedFex(tree,cf); else   if (label.equals("conjoin-and-include"))   return processIncludeWithPrefix(tree,cf); else   if (label.equals("bigram"))   return bigrams(tree,cf); else   if (label.equals("trigram"))   return trigrams(tree,cf); else   if (label.equals("define"))   throw new EdisonException("'define' can only be a top level statement " + "or at the beginning of a feature descriptor\n" + tree); else   if (label.equals("transform-input"))   return processTransform(tree,cf); else   if (label.equals("if"))   return processQuery(tree,cf); else   throw new EdisonException("Invalid feature description: " + tree);}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){  if ((constraints == null) || (constraints instanceof String)) {    addLayoutComponent((String)constraints,comp);  } else {    throw new IllegalArgumentException("cannot add to layout: " + "constraint must be a " + "string (or null)");  }}  }
class C{  private void insert(FibonacciHeapNode<T> node,int key){  node.key=key;  if (minNode != null) {    node.left=minNode;    node.right=minNode.right;    minNode.right=node;    node.right.left=node;    if (key < minNode.key) {      minNode=node;    }  } else {    minNode=node;  }  nNodes++;}  }
class C{  @Deprecated AsyncUserStoreClient createUserStoreClient(String url,int port) throws TTransportException {  String serviceUrl=getFullUrl(url,port);  TEvernoteHttpClient transport=new TEvernoteHttpClient(serviceUrl,mUserAgent,mTempDir);  if (mCustomHeaders != null) {    for (    Map.Entry<String,String> header : mCustomHeaders.entrySet()) {      transport.setCustomHeader(header.getKey(),header.getValue());    }  }  if (mUserAgent != null) {    transport.setCustomHeader(USER_AGENT_KEY,mUserAgent);  }  TBinaryProtocol protocol=new TBinaryProtocol(transport);  String authToken=null;  if (EvernoteSession.getInstance().isLoggedIn()) {    authToken=EvernoteSession.getInstance().getAuthenticationResult().getAuthToken();  }  return new AsyncUserStoreClient(protocol,protocol,authToken);}  }
class C{  protected void runStatements(Reader reader,PrintStream out) throws IOException {  log.debug("runStatements()");  StringBuilder txt=new StringBuilder();  String line="";  BufferedReader in=new BufferedReader(reader);  while ((line=in.readLine()) != null) {    line=getProject().replaceProperties(line);    if (line.indexOf("--") >= 0) {      txt.append("\n");    }  }  if (!txt.toString().equals("")) {    execGroovy(txt.toString(),out);  }}  }
class C{  public StaticInitilializerAnalyzer(JSweetContext context){  this.context=context;}  }
class C{  void dispose(){  if (popup != null) {    popup.removeAll();  }  popup=null;}  }
class C{  public MgmtData itemMgmtData(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_MGMTDATA,i);  if (e != null) {    return new MgmtData(e,this.baseURI);  }  return null;}  }
class C{  private static int readFully(InputStream in,ByteArrayOutputStream bout,int length) throws IOException {  int read=0;  byte[] buffer=new byte[2048];  while (length > 0) {    int n=in.read(buffer,0,length < 2048 ? length : 2048);    if (n <= 0) {      break;    }    bout.write(buffer,0,n);    read+=n;    length-=n;  }  return read;}  }
class C{  public Vec3(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public Array(final double[] array){  this(array,EnumSet.noneOf(Address.Flags.class));}  }
class C{  @Override public DataRefNode findLastDataBlock(DataRefNode dataRefBlock,IndexKey searchKey){  BTreeNode rootNode=(BTreeNode)dataRefBlock;  while (!rootNode.isLeafNode()) {    rootNode=findLastLeafNode(searchKey,rootNode);  }  return rootNode;}  }
class C{  @EventHandler(priority=EventPriority.MONITOR) public void onPlayerInteract(PlayerInteractEvent event){  final LocalPlayer player=plugin.wrapPlayer(event.getPlayer());  final World world=player.getWorld();  final WorldEdit we=WorldEdit.getInstance();  int action=event.getAction();  if (action == PlayerInteractEvent.LEFT_CLICK_BLOCK) {    final Block clickedBlock=event.getBlock();    final WorldVector pos=new WorldVector(LocalWorldAdapter.adapt(world),clickedBlock.getX(),clickedBlock.getY(),clickedBlock.getZ());    if (we.handleBlockLeftClick(player,pos)) {      event.setCancelled(true);    }    if (we.handleArmSwing(player)) {      event.setCancelled(true);    }  } else   if (action == PlayerInteractEvent.LEFT_CLICK_AIR) {    if (we.handleArmSwing(player)) {      event.setCancelled(true);    }  } else   if (action == PlayerInteractEvent.RIGHT_CLICK_BLOCK) {    final Block clickedBlock=event.getBlock();    final WorldVector pos=new WorldVector(LocalWorldAdapter.adapt(world),clickedBlock.getX(),clickedBlock.getY(),clickedBlock.getZ());    if (we.handleBlockRightClick(player,pos)) {      event.setCancelled(true);    }    if (we.handleRightClick(player)) {      event.setCancelled(true);    }  } else   if (action == PlayerInteractEvent.RIGHT_CLICK_AIR) {    if (we.handleRightClick(player)) {      event.setCancelled(true);    }  }}  }
class C{  @Override public boolean canUndo(){  return !m_UndoList.isEmpty();}  }
class C{  void onBindAppWidget(Launcher launcher){  if (!mHasNotifiedInitialWidgetSizeChanged) {    AppWidgetResizeFrame.updateWidgetSizeRanges(hostView,launcher,spanX,spanY);    mHasNotifiedInitialWidgetSizeChanged=true;  }}  }
class C{  public PaymentGatewayDescriptorModel(final PropertyModel<String> propertyModel,final List<Pair<PaymentGatewayDescriptor,String>> pgList){  this.propertyModel=propertyModel;  final String singleSelectedKey=(String)propertyModel.getObject();  if (StringUtils.isNotBlank(singleSelectedKey)) {    for (    Pair<PaymentGatewayDescriptor,String> pgd : pgList) {      if (singleSelectedKey.equals(pgd.getFirst().getLabel())) {        paymentGatewayDescriptor=pgd;        break;      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.615 -0500",hash_original_method="5C672C91FEA72835E9232D6CA28DF6E9",hash_generated_method="4F90151B53B06D4F1352D9ED9196E45E") public void leaveGroup(SocketAddress groupAddress,NetworkInterface netInterface) throws IOException {  checkJoinOrLeave(groupAddress,netInterface);  impl.leaveGroup(groupAddress,netInterface);}  }
class C{  public Matrix(double[][] A){  m=A.length;  n=A[0].length;  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }  }  this.A=A;}  }
class C{  public VcpcFastRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  public LabelNode rangeLabel(final LabelNode l){  return rangeTable.get(l);}  }
class C{  public OrgName(){  super(KEY);}  }
class C{  public CircularFireSupportArea(String sidc){  super(sidc);}  }
class C{  public XMLX509IssuerSerial itemIssuerSerial(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_X509ISSUERSERIAL,i);  if (e != null) {    return new XMLX509IssuerSerial(e,this.baseURI);  }  return null;}  }
class C{  protected boolean isRightKey(int keyCode){  int game=Display.getInstance().getGameAction(keyCode);  return game == Display.GAME_RIGHT;}  }
class C{  public void add(Gondola gondola){  extras.add(gondola);}  }
class C{  public TransactionHit txRevenue(Double value){  setDouble(TRANSACTION_REVENUE,value);  return this;}  }
class C{  public void addURLSeries(List urls){  List listToAdd=null;  if (urls != null) {    listToAdd=new java.util.ArrayList(urls);  }  this.urlSeries.add(listToAdd);}  }
class C{  public boolean isExplicit(){  return explicit;}  }
class C{  @PostLoad protected void postLoad(){  this.position=this.getPosition();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().setOverscanScaleHeight(getFloat(stack));  return null;}  }
class C{  public Slice toSlice(){  return blocks.get(currentBlockIndex).toSlice();}  }
class C{  private void jbInit(){  CPanel panel=new CPanel(new ALayout());  panel.add(lCN,new ALayoutConstraint(0,0));  panel.add(fCN,null);  panel.add(lOU,new ALayoutConstraint(1,0));  panel.add(fOU,null);  panel.add(lO,new ALayoutConstraint(2,0));  panel.add(fO,null);  panel.add(lL,new ALayoutConstraint(3,0));  panel.add(fL,null);  panel.add(lS,new ALayoutConstraint(4,0));  panel.add(fS,null);  panel.add(lC,new ALayoutConstraint(5,0));  panel.add(fC,null);  panel.setPreferredSize(new Dimension(400,150));  getContentPane().setLayout(new BorderLayout());  getContentPane().add(panel,BorderLayout.CENTER);  CPanel confirmPanel=new CPanel(new FlowLayout(FlowLayout.RIGHT));  confirmPanel.add(bCancel);  confirmPanel.add(bOK);  getContentPane().add(confirmPanel,BorderLayout.SOUTH);  bCancel.addActionListener(this);  bOK.addActionListener(this);}  }
class C{  public void addTextProperty(String propertyName,TextNode node){  if (node instanceof TextLayoutFormatNode) {    if (FXG_LINKACTIVEFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkActiveFormat == null) {        linkActiveFormat=(TextLayoutFormatNode)node;        linkActiveFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkActiveFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else     if (FXG_LINKHOVERFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkHoverFormat == null) {        linkHoverFormat=(TextLayoutFormatNode)node;        linkHoverFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkHoverFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else     if (FXG_LINKNORMALFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkNormalFormat == null) {        linkNormalFormat=(TextLayoutFormatNode)node;        linkNormalFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkNormalFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"UnknownLinkFormat",propertyName);    }  } else {    super.addTextProperty(propertyName,node);  }}  }
class C{  public synchronized void clearXTextLabels(){  mXTextLabels.clear();}  }
class C{  public boolean isAfterLast() throws SQLException {  return this.isAfterEnd;}  }
class C{  public LogFormat(){  this(10.0,"10",true);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof QName) {    return m_qname.equals(obj);  } else   return super.equals(obj);}  }
class C{  public void spoil(){  itereationCount=-1;}  }
class C{  public boolean quantize(double[] fdata,int nxpix,int nypix){  double stdev;  double bScale;  long nx=(long)nxpix * (long)nypix;  if (nx <= 1L) {    this.parameter.setBScale(1.);    this.parameter.setBZero(0.);    return false;  }  if (this.parameter.getQLevel() >= 0.) {    calculateNoise(fdata,nxpix,nypix);    if (this.parameter.isCheckNull() && this.ngood == 0) {      this.minValue=0.;      this.maxValue=1.;      stdev=1;    } else {      stdev=this.noise3;      if (this.noise2 != 0. && this.noise2 < stdev) {        stdev=this.noise2;      }      if (this.noise5 != 0. && this.noise5 < stdev) {        stdev=this.noise5;      }    }    if (this.parameter.getQLevel() == 0.) {      bScale=stdev / DEFAULT_QUANT_LEVEL;    } else {      bScale=stdev / this.parameter.getQLevel();    }    if (bScale == 0.) {      return false;    }  } else {    bScale=-this.parameter.getQLevel();    calculateNoise(fdata,nxpix,nypix);  }  if ((this.maxValue - this.minValue) / bScale > 2. * MAX_INT_AS_DOUBLE - N_RESERVED_VALUES) {    return false;  }  this.parameter.setBScale(bScale);  this.parameter.setMinValue(this.minValue);  this.parameter.setMaxValue(this.maxValue);  this.parameter.setCheckNull(this.parameter.isCheckNull() && this.ngood != nx);  return true;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static File miscImagesDir(){  return new File(imagesDir(),DEFAULT_DIR_NAME_MISC_IMAGES);}  }
class C{  public PropertyImpl put(String name,DataType type,byte flag,Object value){  PropertyImpl prop=(PropertyImpl)createProperty(name,type,flag,value);  _props.put(DatabaseImpl.toLookupName(name),prop);  return prop;}  }
class C{  public static void dumpIR(IR ir,String tag){  if (ir.options.PRINT_VISUALIZATION) {    try {      CFGVisualization visualization=new CFGVisualization(ir,tag);      visualization.visualizeCFG();      return;    } catch (    Exception e) {      System.out.println("Error generating IR visualization: ");      e.printStackTrace(System.out);      System.out.println("Generating text dump instead ...");    }  }  IRDumpTools.dumpIR(ir,tag,false);  if (ir.options.PRINT_PHASES_TO_FILES) {    PrintStream fileOut=null;    try {      String prefix=ir.getIdForCurrentPhase() + "-";      String suffix=".irdump";      String fileName=determineFileName(ir,tag,prefix,suffix);      File f=new File(fileName);      FileOutputStream fos=new FileOutputStream(f);      fileOut=new PrintStream(fos);      dumpIR(fileOut,ir,tag,false);    } catch (    IOException e) {      System.out.println("Error dumping IR to file: ");      e.printStackTrace(System.out);    } finally {      if (fileOut != null)       fileOut.close();    }  }}  }
class C{  public ImageResizer(Context context,int imageWidth,int imageHeight){  super(context);  setImageSize(imageWidth,imageHeight);}  }
class C{  public XMLWriter(Writer writer){  _writer=writer;}  }
class C{  @PUT @Path("/{userName}/" + PathParameters.PASSWORD) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @DynamicRole public UserDTO updatePassword(@PathParam("userName") String name,PasswordResetRequestDTO passwordResetRequest){  PrincipalId userId=PrincipalUtil.fromName(name);  Validate.isTrue(getSystemDomain().equalsIgnoreCase(userId.getDomain()),sm.getString("valid.not.systemdomain",userId.getDomain(),tenant));  Validate.notEmpty(passwordResetRequest.getNewPassword(),sm.getString("valid.not.empty","new password"));  boolean isAdmin=getSecurityContext().isUserInRole(Role.ADMINISTRATOR.name());  if (!isAdmin) {    Validate.notEmpty(passwordResetRequest.getCurrentPassword(),sm.getString("valid.not.empty","current password"));  }  try {    if (isAdmin) {      getIDMClient().setUserPassword(tenant,userId.getName(),passwordResetRequest.getNewPassword().toCharArray());    } else {      getIDMClient().changeUserPassword(tenant,userId.getName(),passwordResetRequest.getCurrentPassword().toCharArray(),passwordResetRequest.getNewPassword().toCharArray());    }    return UserMapper.getUserDTO(getIDMClient().findPersonUser(tenant,userId),includePasswordDetails(name));  } catch (  NoSuchTenantException e) {    log.warn("Failed to update password for user '{}' in tenant '{}'",name,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidPrincipalException|PasswordPolicyViolationException e) {    log.warn("Failed to update password for user '{}' in tenant '{}' due to a client side error",name,tenant,e);    throw new BadRequestException(sm.getString("res.user.update.password.failed",name,tenant),e);  }catch (  Exception e) {    log.error("Failed to update password for user '{}' in tenant '{}' due to a server side error",name,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public boolean isRemote(){  return remote;}  }
class C{  public boolean isProperty(){  return property;}  }
class C{  public static void enableBreakpoints(final BackEndDebuggerProvider debuggerProvider,final int[] rows){  checkArguments(debuggerProvider,rows);  for (  final int row : rows) {    final Pair<IDebugger,Integer> breakpoint=CBreakpointTableHelpers.findBreakpoint(debuggerProvider,row);    final BreakpointManager manager=breakpoint.first().getBreakpointManager();    final int breakpointIndex=breakpoint.second();    manager.setBreakpointStatus(BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_ENABLED,breakpointIndex);  }}  }
class C{  public void createTransportZone(TransportZoneCreateSpec request,FutureCallback<TransportZone> responseCallback) throws IOException {  postAsync(TRANSPORT_ZONES_BASE_PATH,serializeObjectAsJson(request),HttpStatus.SC_CREATED,new TypeReference<TransportZone>(){  },responseCallback);}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  BusquedaExpedientesForm busquedaExpedientesForm=(BusquedaExpedientesForm)form;  try {    String sessionId=request.getParameter(Misc.SESION_ID);    if (Misc.isEmpty(sessionId)) {      sessionId=(String)session.getAttribute(ConstantesSesionUser.ID_SESION);    }    String cnif=Misc.getCNIFUsuario(request,sessionId);    busquedaExpedientesForm.setCNIF(cnif);    String rebuscar=request.getParameter("rebuscar");    if ("false".equals(rebuscar)) {      String numExpediente=(String)session.getAttribute(Misc.EXPEDIENTE);      String procedimiento=(String)session.getAttribute(Misc.PROCEDIMIENTO);      String numeroRegistroInicial=(String)session.getAttribute(Misc.NUMERO_REGISTRO_INICIAL);      String fechaDesde=(String)session.getAttribute(Misc.FECHA_DESDE);      String operadorConsulta=(String)session.getAttribute(Misc.OPERADOR_CONSULTA);      String fechaHasta=(String)session.getAttribute(Misc.FECHA_HASTA);      String fechaRegistroInicialDesde=(String)session.getAttribute(Misc.FECHA_REGISTRO_INICIAL_DESDE);      String operadorConsultaFechaInicial=(String)session.getAttribute(Misc.OPERADOR_CONSULTA_FECHA_INICIAL);      String fechaRegistroInicialHasta=(String)session.getAttribute(Misc.FECHA_REGISTRO_INICIAL_HASTA);      String estado=(String)session.getAttribute(Misc.ESTADO);      Entidad entidad=Misc.obtenerEntidad(request);      ServicioConsultaExpedientes oServicio=LocalizadorServicios.getServicioConsultaExpedientes();      CriterioBusquedaExpedientes oCriterio=new CriterioBusquedaExpedientes();      oCriterio.setNIF(cnif);      oCriterio.setEstado(estado);      oCriterio.setFechaDesde(fechaDesde);      oCriterio.setFechaHasta(fechaHasta);      oCriterio.setOperadorConsulta(operadorConsulta);      oCriterio.setExpediente(numExpediente);      oCriterio.setProcedimiento(procedimiento);      oCriterio.setNumeroRegistroInicial(numeroRegistroInicial);      oCriterio.setFechaRegistroInicialDesde(fechaRegistroInicialDesde);      oCriterio.setFechaRegistroInicialHasta(fechaRegistroInicialHasta);      oCriterio.setOperadorConsultaFechaInicial(operadorConsultaFechaInicial);      Expedientes expedientes=oServicio.busquedaExpedientes(oCriterio,entidad);      for (int i=0; i < expedientes.count(); i++) {        Expediente expediente=(Expediente)expedientes.get(i);        if (expediente.getEstado().equals(Expediente.COD_ESTADO_EXPEDIENTE_FINALIZADO)) {          expediente.setEstado("cerrado");        } else {          expediente.setEstado("abierto");        }        String proc=expediente.getProcedimiento();        if (proc.length() > 60) {          proc=proc.substring(0,57) + "...";          expediente.setProcedimiento(proc);        }        boolean existeNotificacion=oServicio.existenNotificaciones(expediente.getNumero(),entidad);        if (existeNotificacion) {          expediente.setNotificacion("S");        } else {          expediente.setNotificacion("N");        }        boolean existeSubsanacion=oServicio.existenSubsanaciones(expediente.getNumero(),entidad);        if (existeSubsanacion) {          expediente.setAportacion("S");        } else {          expediente.setAportacion("N");        }        boolean existePago=oServicio.existenPagos(expediente.getNumero(),entidad);        if (existePago) {          expediente.setPagos("S");        } else {          expediente.setPagos("N");        }      }      request.setAttribute("expedientes",expedientes.getExpedientes());      request.setAttribute("buscado","true");    } else     if (!"true".equals(rebuscar)) {      session.removeAttribute(Misc.CNIF);      session.removeAttribute(Misc.EXPEDIENTE);      session.removeAttribute(Misc.PROCEDIMIENTO);      session.removeAttribute(Misc.NUMERO_REGISTRO_INICIAL);      session.removeAttribute(Misc.FECHA_DESDE);      session.removeAttribute(Misc.FECHA_DESDE_BUSQUEDA);      session.removeAttribute(Misc.OPERADOR_CONSULTA);      session.removeAttribute(Misc.FECHA_HASTA);      session.removeAttribute(Misc.FECHA_HASTA_BUSQUEDA);      session.removeAttribute(Misc.FECHA_REGISTRO_INICIAL_DESDE);      session.removeAttribute(Misc.FECHA_REGISTRO_INICIAL_DESDE_BUSQUEDA);      session.removeAttribute(Misc.OPERADOR_CONSULTA_FECHA_INICIAL);      session.removeAttribute(Misc.FECHA_REGISTRO_INICIAL_HASTA);      session.removeAttribute(Misc.FECHA_REGISTRO_INICIAL_HASTA_BUSQUEDA);      session.removeAttribute(Misc.ESTADO);      request.setAttribute("buscado","false");      request.setAttribute(Misc.EXPEDIENTE,"");      request.setAttribute(Misc.PROCEDIMIENTO,"");      request.setAttribute(Misc.NUMERO_REGISTRO_INICIAL,"");    } else {      request.setAttribute("buscado","true");    }  } catch (  Exception ex) {    request.setAttribute(Misc.MENSAJE_ERROR,ex.getMessage());    return mapping.findForward("Failure");  }  return mapping.findForward("Success");}  }
class C{  public DefaultLineTracker(){}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  @Override public void service(RequestWeb req){  init();  String pathInfo=req.pathInfo();  if (pathInfo.isEmpty() || pathInfo.equals("/")) {    pathInfo=_config.get("server.index","index.html");  } else {    pathInfo=pathInfo.substring(1);  }  Path path=_root.resolve(pathInfo);  if (Files.isDirectory(path)) {    path=path.resolve(_config.get("server.index","index.html"));  }  long len;  try {    len=Files.size(path);  } catch (  IOException e) {    req.fail(new FileNotFoundException("file not found: " + req.uri()));    return;  }  try (InputStream is=Files.newInputStream(path)){    if (is == null) {      req.fail(new FileNotFoundException(pathInfo));      return;    }    String mimeType=mimeType(pathInfo);    if (mimeType != null) {      req.header("content-type",mimeType);    } else {      req.header("content-type","text/plain; charset=utf-8");    }    if (len > 0) {      req.length(len);    }    TempBuffer tBuf=TempBuffer.create();    byte[] buffer=tBuf.buffer();    int sublen;    while ((sublen=is.read(buffer,0,buffer.length)) > 0) {      req.write(buffer,0,sublen);    }    tBuf.free();  } catch (  IOException e) {    req.fail(e);  }  req.ok();}  }
class C{  public static void print(Throwable e){  if (TLCGlobals.debug) {    System.err.println(Thread.currentThread().getId() + "thrown an exception");    e.printStackTrace(System.err);  }}  }
class C{  public boolean isNewline(){  return newline != null;}  }
class C{  private static String stripLeadingSlash(String name){  if (name.length() < 1 || name.charAt(0) != '/') {    return name;  }  return name.substring(1);}  }
class C{  private void awaitOperationsAvailable() throws InterruptedException {  flushLock.lock();  try {    do {      if (writeCache.sizex() <= cacheMaxSize || cacheMaxSize == 0) {        if (cacheFlushFreq > 0)         canFlush.await(cacheFlushFreq,TimeUnit.MILLISECONDS); else         canFlush.await();      }    } while (writeCache.sizex() == 0 && !stopping.get());  }  finally {    flushLock.unlock();  }}  }
class C{  public static ContactId createContactIdFromTrustedData(String phoneNumber){synchronized (ContactUtil.class) {    if (mContactUtil == null) {      mContactUtil=com.gsma.services.rcs.contact.ContactUtil.getInstance(AndroidFactory.getApplicationContext());    }  }  try {    return mContactUtil.formatContact(phoneNumber);  } catch (  RcsPermissionDeniedException e) {    String errorMessage="Failed to convert phone number '" + phoneNumber + "' into contactId!";    throw new IllegalStateException(errorMessage,e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  String publicId;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation2");  publicId=notationNode.getPublicId();  assertNull("publicId",publicId);}  }
class C{  public void write(ByteAppendable os,char ch) throws IOException {  os.write(ch >> 8);  os.write(ch);}  }
class C{  public Complex plus(Complex that){  double real=this.re + that.re;  double imag=this.im + that.im;  return new Complex(real,imag);}  }
class C{  public Compound_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_splits=jcas.getRequiredFeatureDE(casType,"splits","uima.cas.FSArray",featOkTst);  casFeatCode_splits=(null == casFeat_splits) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_splits).getCode();}  }
class C{  public String[] remove(String name){  return vals.remove(name);}  }
class C{  public AccountHeaderBuilder withOnAccountHeaderListener(@NonNull AccountHeader.OnAccountHeaderListener onAccountHeaderListener){  this.mOnAccountHeaderListener=onAccountHeaderListener;  return this;}  }
class C{  public static <ObjectType>void link(final TreeNode<ObjectType> parent,final TreeNode<ObjectType> child){  parent.m_children.add(child);  child.m_parent=parent;}  }
class C{  public void gcspyGatherData(LinearSpaceDriver driver,Space scanSpace){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(scanSpace == space,"scanSpace != space");  Address start=scanSpace.getStart();  driver.setRange(start,limit);  if (false) {    Log.write("\nBumpPointer.gcspyGatherData set Range ");    Log.write(scanSpace.getStart());    Log.write(" to ");    Log.writeln(limit);    Log.write("BumpPointergcspyGatherData scan from ");    Log.writeln(initialRegion);  }  linearScan(driver.getScanner());}  }
class C{  public void dispose(int status){  this.status=status;  super.dispose();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.EXIT_POINT_SPEC__EXITPOINT:    setExitpoint(EXITPOINT_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override public void writeObject(Object o){synchronized (this) {    ArrayList<Object> prePending=objPrePendingCache.get(o);    if (prePending == null) {      boolean oldWritingObject=writingObject;      writingObject=true;      try {        super.writeObject(o);      }  finally {        writingObject=oldWritingObject;      }    } else {      flushPrePending.clear();      flushPrePending.addAll(prePending);    }    if (!writingObject) {      boolean isNotCached=prePending == null;      if (isNotCached && o != null) {        prePending=new ArrayList<Object>();        prePending.addAll(flushPrePending);        objPrePendingCache.put(o,prePending);      }      flushPending.addAll(flushPrePending);      flushPendingStat.addAll(flushPrePending);      flushPrePending.clear();      if (isNotCached && flushPending.contains(o)) {        flushPendingStat.remove(o);      } else {        flushPending.add(o);      }      if (needOwner) {        this.flushPending.remove(owner);        this.flushPending.add(0,owner);      }    }  }}  }
class C{  private static BigDecimal floatToBigDecimal(float floatValue){  return new BigDecimal(floatValue,MathContext.DECIMAL32);}  }
class C{  public JdbcValueConverters(boolean adaptiveTimePrecision,ZoneOffset defaultOffset){  this.defaultOffset=defaultOffset != null ? defaultOffset : ZoneOffset.UTC;  this.adaptiveTimePrecision=adaptiveTimePrecision;}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  private void updateAuthToken(){  if (_currentTime - _tokenUpdatedTime > TOKEN_UPDATE_INTERVAL) {    logger.info("AnalysisProvider updating its Authenticate Token...");    _token=new AuthenticatedURL.Token();    _authenticatedURL=new AuthenticatedURL();    _tokenUpdatedTime=_currentTime;  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.listenerList=new EventListenerList();}  }
class C{  public OnTransitionEndEvent(Object source,Transition<?,?> transition){  super(source,transition);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (!(obj instanceof Row))   return false;  Row that=(Row)obj;  if (est != that.est)   return false;  return true;}  }
class C{  protected byte[] engineGenerateSecret() throws IllegalStateException {  int expectedLen=(init_p.bitLength() + 7) >>> 3;  byte[] result=new byte[expectedLen];  try {    engineGenerateSecret(result,0);  } catch (  ShortBufferException sbe) {  }  return result;}  }
class C{  public RestoreInProgress(List<Entry> entries){  this.entries=entries;}  }
class C{  public void signalPersistentProcesses(int sig) throws RemoteException {  if (sig != Process.SIGNAL_USR1) {    throw new SecurityException("Only SIGNAL_USR1 is allowed");  }synchronized (this) {    if (checkCallingPermission(android.Manifest.permission.SIGNAL_PERSISTENT_PROCESSES) != PackageManager.PERMISSION_GRANTED) {      throw new SecurityException("Requires permission " + android.Manifest.permission.SIGNAL_PERSISTENT_PROCESSES);    }    for (int i=mLruProcesses.size() - 1; i >= 0; i--) {      ProcessRecord r=mLruProcesses.get(i);      if (r.thread != null && r.persistent) {        Process.sendSignal(r.pid,sig);      }    }  }}  }
class C{  public Object readPropertyNode(Element node) throws Exception {  Object result;  Object value;  String parentClass;  String property;  Vector<Element> children;  Element child;  int i;  Class<?> cls;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  children=XMLDocument.getChildTags(node);  value=null;  parentClass=null;  property=null;  for (i=0; i < children.size(); i++) {    child=children.get(i);    if (child.getAttribute(ATT_NAME).equals(NAME_PROPERTYNODE_VALUE)) {      if (stringToBoolean(child.getAttribute(ATT_PRIMITIVE))) {        value=getPrimitive(child);      } else {        value=invokeReadFromXML(child);      }    }    if (child.getAttribute(ATT_NAME).equals(NAME_PROPERTYNODE_PARENTCLASS)) {      parentClass=XMLDocument.getContent(child);    }    if (child.getAttribute(ATT_NAME).equals(NAME_PROPERTYNODE_PROPERTY)) {      property=XMLDocument.getContent(child);    }  }  if (parentClass != null) {    cls=Class.forName(parentClass);  } else {    cls=null;  }  if (cls != null) {    result=new PropertyNode(value,new PropertyDescriptor(property,cls),cls);  } else {    result=new PropertyNode(value);  }  return result;}  }
class C{  public static void createTrackIfEmpty(int gpsNumber,boolean showTrackList){  if (isTrackListEmpty(!showTrackList)) {    createSimpleTrack(gpsNumber,showTrackList);  }}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void testHostAddressesAreInTheSameNetwork() throws Exception {  String myHostName=InetAddress.getLocalHost().getHostName();  String google="www.google.com";  short prefix=HostAddressService.getLocalNetworkPrefix(myHostName);  assertTrue("Same host is on the same network",HostAddressService.addressesAreInSameSubnet(myHostName,myHostName,prefix));  assertFalse("My host compared to google.com is not on the same network",HostAddressService.addressesAreInSameSubnet(google,myHostName,prefix));  try {    HostAddressService.addressesAreInSameSubnet(myHostName,myHostName,(short)0);    assertFalse("Should not get here...",true);  } catch (  Exception expected) {    assertTrue("0 for prefix causes an exception",expected.getLocalizedMessage().contains("Invalid prefix"));  }  try {    assertFalse("Pass -1 for the prefix",HostAddressService.addressesAreInSameSubnet(myHostName,myHostName,(short)0));    assertFalse("Should not get here...",true);  } catch (  Exception expected) {    assertTrue("1 for prefix causes an exception",expected.getLocalizedMessage().contains("Invalid prefix"));  }}  }
class C{  public RectF[] newArray(int size){  return new RectF[size];}  }
class C{  private void createQueryFutureMethod(JavaClass jClass,Method method){  Class<?>[] parameterTypes=method.getParameterTypes();  Annotation[][] parameterAnns=method.getParameterAnnotations();  int paramLength=parameterTypes.length;  addMethod(method);  CodeWriterAttribute code=createMethodHeader(jClass,method);  code.setMaxLocals(1 + 2 * parameterTypes.length);  code.setMaxStack(10 + 2 * parameterTypes.length);  code.pushObjectVar(0);  code.getField(jClass.getThisClass(),"_messageFactory",MessageFactoryAmp.class);  Timeout timeoutAnn=method.getAnnotation(Timeout.class);  if (timeoutAnn != null) {    long timeout=timeoutAnn.unit().toMillis(timeoutAnn.value());    code.pushConstant(timeout);  }  code.pushObjectVar(0);  code.getField(jClass.getThisClass(),"_serviceRef",ServiceRefAmp.class);  code.pushObjectVar(0);  code.getField(jClass.getThisClass(),fieldName(method),MethodAmp.class);  partitionMethod(code,parameterTypes,parameterAnns);  pushParameters(code,parameterTypes,parameterAnns,1,0,paramLength,-1);  if (timeoutAnn != null) {    code.invokeInterface(MessageFactoryAmp.class,"queryFuture",Object.class,long.class,ServiceRefAmp.class,MethodAmp.class,Object[].class);  } else {    code.invokeInterface(MessageFactoryAmp.class,"queryFuture",Object.class,ServiceRefAmp.class,MethodAmp.class,Object[].class);  }  popReturn(code,method.getReturnType());  code.close();}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  public void playGame(){  Player player=one;  while (!isDone()) {    displayState();    waitForUser();    takeTurn(player);    player=nextPlayer(player);  }  one.displayScore();  two.displayScore();}  }
class C{  public boolean save(String trxName){  if (m_value == null || (!(m_value instanceof String || m_value instanceof byte[])) || (m_value instanceof String && m_value.toString().length() == 0) || (m_value instanceof byte[] && ((byte[])m_value).length == 0)) {    StringBuffer sql=new StringBuffer("UPDATE ").append(m_tableName).append(" SET ").append(m_columnName).append("=null WHERE ").append(m_whereClause);    int no=DB.executeUpdate(sql.toString(),trxName);    log.fine("save [" + trxName + "] #"+ no+ " - no data - set to null - "+ m_value);    if (no == 0)     log.warning("[" + trxName + "] - not updated - "+ sql);    return true;  }  StringBuffer sql=new StringBuffer("UPDATE ").append(m_tableName).append(" SET ").append(m_columnName).append("=? WHERE ").append(m_whereClause);  log.fine("[" + trxName + "] - Local - "+ m_value);  Trx trx=null;  if (trxName != null)   trx=Trx.get(trxName,false);  Connection con=null;  if (trx != null)   con=trx.getConnection();  if (con == null)   con=DB.createConnection(false,Connection.TRANSACTION_READ_COMMITTED);  if (con == null) {    log.log(Level.SEVERE,"Could not get Connection");    return false;  }  PreparedStatement pstmt=null;  boolean success=true;  try {    pstmt=con.prepareStatement(sql.toString());    if (DisplayType.isText(m_displayType))     pstmt.setString(1,(String)m_value); else     pstmt.setBytes(1,(byte[])m_value);    int no=pstmt.executeUpdate();    if (no != 1) {      log.warning("[" + trxName + "] - Not updated #"+ no+ " - "+ sql);      success=false;    }  } catch (  Throwable e) {    log.log(Level.SEVERE,"[" + trxName + "] - "+ sql,e);    success=false;  } finally {    DB.close(pstmt);    pstmt=null;  }  if (success) {    if (trx != null) {      trx=null;      con=null;    } else {      try {        con.commit();      } catch (      Exception e) {        log.log(Level.SEVERE,"[" + trxName + "] - commit ",e);        success=false;      } finally {        try {          con.close();        } catch (        SQLException e) {        }        con=null;      }    }  }  if (!success) {    log.severe("[" + trxName + "] - rollback");    if (trx != null) {      trx.rollback();      trx=null;      con=null;    } else {      try {        con.rollback();      } catch (      Exception ee) {        log.log(Level.SEVERE,"[" + trxName + "] - rollback",ee);      } finally {        try {          con.close();        } catch (        SQLException e) {        }        con=null;      }    }  }  return success;}  }
class C{  public AbstractCircularGraphic(String sidc){  super(sidc);  this.circle=this.createShape();}  }
class C{  public static boolean isWater(FluidStack aFluid){  if (aFluid == null)   return false;  return aFluid.isFluidEqual(getWater(1)) || aFluid.isFluidEqual(getDistilledWater(1));}  }
class C{  @Override public void close(){  CloseableReference<Bitmap> reference=detachBitmapReference();  if (reference != null) {    reference.close();  }}  }
class C{  public CSSFontFace(List srcs,String familyName,float unitsPerEm,String fontWeight,String fontStyle,String fontVariant,String fontStretch,float slope,String panose1,float ascent,float descent,float strikethroughPosition,float strikethroughThickness,float underlinePosition,float underlineThickness,float overlinePosition,float overlineThickness){  super(srcs,familyName,unitsPerEm,fontWeight,fontStyle,fontVariant,fontStretch,slope,panose1,ascent,descent,strikethroughPosition,strikethroughThickness,underlinePosition,underlineThickness,overlinePosition,overlineThickness);}  }
class C{  public static void main(String[] args) throws MalformedURLException {  ServiceMapper serviceMapper=new ServiceMapper();  ConsoleParametersProcessor parametersProcessor=serviceMapper.createParametersProcessor("serviceMapper");  Map<String,ConsoleParameter> parameters=parametersProcessor.processConsoleParameters(args);  if (parameters.containsKey("-help") || parameters.containsKey("-h")) {    parametersProcessor.showsUsageScreen();  } else {    serviceMapper.processParameters(parameters.values());    serviceMapper.generateServicesMap();    serviceMapper.generateRestServicesMap();  }}  }
class C{  public ScalarObject executePredicate(ArrayList<Instruction> inst,Hop hops,boolean requiresRecompile,ValueType retType,ExecutionContext ec) throws DMLRuntimeException {  ArrayList<Instruction> tmp=inst;  try {    long t0=DMLScript.STATISTICS ? System.nanoTime() : 0;    if (ConfigurationManager.isDynamicRecompilation() && requiresRecompile) {      tmp=Recompiler.recompileHopsDag(hops,ec.getVariables(),null,false,_tid);    }    if (DMLScript.STATISTICS) {      long t1=System.nanoTime();      Statistics.incrementHOPRecompileTime(t1 - t0);      if (tmp != inst)       Statistics.incrementHOPRecompilePred();    }  } catch (  Exception ex) {    throw new DMLRuntimeException("Unable to recompile predicate instructions.",ex);  }  return executePredicateInstructions(tmp,retType,ec);}  }
class C{  public void addNthChildCondition(String number){  _specificityC++;  addCondition(Condition.createNthChildCondition(number));}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter){  writer.write(eventTypeName);  if (filter != null) {    writer.write('(');    filter.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    writer.write(')');  }  if (optionalPropertySelects != null) {    for (    ContainedEventSelect propertySelect : optionalPropertySelects) {      writer.write('[');      propertySelect.toEPL(writer,formatter);      writer.write(']');    }  }}  }
class C{  public static CompoundBorder createCompoundBorder(Border outsideBorder,Border insideBorder){  return new CompoundBorder(outsideBorder,insideBorder);}  }
class C{  public TermVectorsRequest filterSettings(FilterSettings settings){  this.filterSettings=settings != null ? settings : null;  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.COMPOSITE_PROCESSOR__NAME:    setName(NAME_EDEFAULT);  return;case EipPackage.COMPOSITE_PROCESSOR__TO_CHANNELS:getToChannels().clear();return;case EipPackage.COMPOSITE_PROCESSOR__FROM_CHANNELS:getFromChannels().clear();return;case EipPackage.COMPOSITE_PROCESSOR__OWNED_ENDPOINTS:getOwnedEndpoints().clear();return;}super.eUnset(featureID);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean checkExtensionCondition(double currentTime,DgExtensionPoint extensionPoint){  if (this.isExtensionTimeLeft()) {    boolean greenTimeLeft=true;    for (    Id<SignalGroup> signalGroupId : extensionPoint.getSignalGroupIds()) {      if (!this.isGreenTimeLeft(currentTime,signalGroupId,extensionPoint.getMaxGreenTime(signalGroupId))) {        greenTimeLeft=false;      }    }    if (greenTimeLeft) {      return this.checkTrafficConditions(currentTime,extensionPoint);    }  }  return false;}  }
class C{  public FibonacciMinPQ(){  comp=new MyComparator();}  }
class C{  public boolean isHitTest(){  return ((flags & BUTTON_HITTEST) != 0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int crossShape(Shape s,double x,double y){  if (!s.getBounds().contains((int)x,(int)y)) {    return 0;  }  return crossPath(s.getPathIterator(null),x,y);}  }
class C{  public GameSurfaceView(Context context,GameState gameState,TextResources.Configuration textConfig){  super(context);  setEGLContextClientVersion(2);  mRenderer=new GameSurfaceRenderer(gameState,this,textConfig);  setRenderer(mRenderer);}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.EVENT;}  }
class C{  public ElasticsearchDocumentHistory(ElasticsearchHistory history,String documentId,BlockingDeque<HistoryEvent> events){  super(history,documentId);  this.events=events != null ? events : new LinkedBlockingDeque<HistoryEvent>();}  }
class C{  public void testGoodCommandLine() throws Exception {  doTest();}  }
class C{  @Override public void onAttachedToWindow(){  super.onAttachedToWindow();  Window window=getWindow();  window.setFormat(PixelFormat.RGBA_8888);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected void handlePortStatusMessage(OFPortStatus m,boolean doNotify){  if (sw == null) {    String msg=getSwitchStateMessage(m,"State machine error: switch is null. Should never happen");    throw new SwitchStateException(msg);  }  Collection<PortChangeEvent> changes=sw.processOFPortStatus(m);  if (doNotify) {    for (    PortChangeEvent ev : changes)     switchManager.notifyPortChanged(sw,ev.port,ev.type);  }}  }
class C{  private void placeText(Pane pane,ArrayList<Circle> p){  double[] sides=getSides(p);  double[] angles=getAngles(sides);  pane.getChildren().add(new Text(p.get(0).getCenterX(),p.get(0).getCenterY() - 5,String.format("%.2f",angles[0])));  pane.getChildren().add(new Text(p.get(1).getCenterX(),p.get(1).getCenterY() - 5,String.format("%.2f",angles[1])));  pane.getChildren().add(new Text(p.get(2).getCenterX(),p.get(2).getCenterY() - 5,String.format("%.2f",angles[2])));}  }
class C{  private boolean doStart(){  if (!_lifecycle.isActive()) {    return false;  }  if (!isEnable()) {    return false;  }  int startingCount=_startingCount.get();  int threadCount=_threadCount.get() + startingCount;  if (_threadMax < threadCount) {    onThreadMax();    return false;  } else   if (!isIdleTooLow(startingCount)) {    return false;  }  _idleCount.incrementAndGet();  startConnection();  return true;}  }
class C{  public void testAddFilterToEmptyDocument() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlElement filterElement=createFilterElement(webXml.getDescriptorType(),"f1","f1class");  webXml.addTag(filterElement);  assertTrue(WebXmlUtils.hasFilter(webXml,"f1"));}  }
class C{  private TableUtils(){}  }
class C{  private void performCancel(){  iteration++;  if (iteration % cancelRate == 0) {    ComputeTaskFuture<Integer> futToCancel=futures.get(new Random().nextInt(futures.size()));    try {      futToCancel.cancel();      ignite.log().info("Task canceled: " + futToCancel.getTaskSession().getId());    } catch (    IgniteException e) {      ignite.log().warning(">>> Future cancellation failed: " + futToCancel.getTaskSession().getId(),e);    }  }}  }
class C{  protected void sequence_AnnotatedPropertyAssignment(ISerializationContext context,PropertyNameValuePair semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ModuleVersion(int major,int minor,int micro,String qualifier){  this.major=major;  this.minor=minor;  this.micro=micro;  if (qualifier == null)   qualifier="";  this.qualifier=qualifier;  validate();}  }
class C{  public Transition(Transition tr){  this.state=tr.state;  this.condition=tr.condition;  this.secondary=tr.secondary;  this.nextState=tr.nextState;  this.triggers=new LinkedList<Expression>(tr.triggers);  this.reply=tr.reply;  this.action=tr.action;  this.label=TransitionContext.getWithFallback(tr.label);}  }
class C{  public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  log.info("VOrderReceipIssue.init - WinNo=" + m_WindowNo);  try {    fillPicks();    jbInit();    dynInit();    pickcombo.addActionListener(this);    frame.getContentPane().add(mainPanel,BorderLayout.CENTER);    frame.getContentPane().add(statusBar,BorderLayout.SOUTH);  } catch (  Exception e) {    log.log(Level.SEVERE,"VOrderReceipIssue.init",e);  }}  }
class C{  public static boolean isJavaLangObject(String signature){  return OBJECT_SIGNATURE.equals(signature);}  }
class C{  public Coord fastLocate(String address) throws URISyntaxException, ClientProtocolException, IOException, ParserConfigurationException, IllegalStateException, SAXException, BadAddressException {  Document response=getResponse(getRequest(address));  String status=((Element)response.getElementsByTagName("status").item(0)).getChildNodes().item(0).getNodeValue();  if (!status.equals(ADDRESS_STATUS_OK))   throw new BadAddressException(status);  NodeList results=response.getElementsByTagName("result");  locations.clear();  if (results.getLength() > 0) {    Element coords=((Element)((Element)((Element)results.item(0)).getElementsByTagName("geometry").item(0)).getElementsByTagName("location").item(0));    double latitude=Double.parseDouble(coords.getElementsByTagName("lat").item(0).getChildNodes().item(0).getNodeValue());    double longitude=Double.parseDouble(coords.getElementsByTagName("lng").item(0).getChildNodes().item(0).getNodeValue());    return new Coord(longitude,latitude);  }  return null;}  }
class C{  public boolean hasNext(){  try {    if (result != null && result.next()) {      return true;    }    if (this.statement != null) {      this.statement.close();    }    if (this.result != null) {      this.result.close();    }    return query();  } catch (  SQLException e) {    throw new RuntimeException(e);  }}  }
class C{  public void removeCollectionStateWatcher(String collection,CollectionStateWatcher watcher){  collectionWatches.compute(collection,null);}  }
class C{  public static List<VOBillingContact> toVOBillingContacts(List<BillingContact> billingContacts){  List<VOBillingContact> voBillingContacts=new ArrayList<VOBillingContact>();  if (billingContacts != null) {    for (    BillingContact billingContact : billingContacts) {      voBillingContacts.add(toVOBillingContact(billingContact));    }  }  return voBillingContacts;}  }
class C{  private void drawDrawable(Canvas canvas,Bitmap bitmap){  Paint paint=new Paint();  paint.setColor(0xffffffff);  paint.setAntiAlias(true);  PorterDuffXfermode xfermode=new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);  int saveFlags=Canvas.MATRIX_SAVE_FLAG | Canvas.CLIP_SAVE_FLAG | Canvas.HAS_ALPHA_LAYER_SAVE_FLAG| Canvas.FULL_COLOR_LAYER_SAVE_FLAG| Canvas.CLIP_TO_LAYER_SAVE_FLAG;  canvas.saveLayer(0,0,width,height,null,saveFlags);  if (shapeType == 1) {    canvas.drawCircle(width / 2,height / 2,width / 2 - 1,paint);  } else   if (shapeType == 2) {    RectF rectf=new RectF(1,1,getWidth() - 1,getHeight() - 1);    canvas.drawRoundRect(rectf,radius + 1,radius + 1,paint);  }  paint.setXfermode(xfermode);  float scaleWidth=((float)getWidth()) / bitmap.getWidth();  float scaleHeight=((float)getHeight()) / bitmap.getHeight();  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);  canvas.drawBitmap(bitmap,0,0,paint);  canvas.restore();}  }
class C{  public boolean hasImage(){  return mImage != null;}  }
class C{  public static long[] toLongArray(Number[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].longValue();  }  return result;}  }
class C{  protected Iterator createEntrySetIterator(){  if (size() == 0) {    return EmptyIterator.INSTANCE;  }  return new EntrySetIterator(this);}  }
class C{  public static void afterReconcileGatedCheckin(final Changeset changeset,final WorkItem[] associatedWorkItems,final CheckinNote noteBeforeUndo){  Check.notNull(changeset,"changeset");  Check.notNull(associatedWorkItems,"associatedWorkItems");  Check.notNull(noteBeforeUndo,"noteBeforeUndo");  final PendingChangesViewModel model=TFSCommonUIClientPlugin.getDefault().getPendingChangesViewModel();  final boolean commentsMatch=GatedCheckinUtils.gatedCheckinCommentsMatch(changeset.getComment(),model.getComment());  final boolean checkinNotesMatch=GatedCheckinUtils.gatedCheckinNotesMatch(changeset.getCheckinNote(),noteBeforeUndo);  final int[] committedWorkItemIds=getIDsForWorkItems(associatedWorkItems);  final WorkItemCheckinInfo[] workItemInfos=model.getAssociatedWorkItems();  final int[] pendingWorkItemIds=getIDsForWorkItemCheckinInfos(workItemInfos);  final boolean workItemsMatch=GatedCheckinUtils.gatedCheckinWorkItemsMatch(committedWorkItemIds,pendingWorkItemIds);  if (commentsMatch && checkinNotesMatch && workItemsMatch) {    model.clearComment();    model.dissociateAllWorkItems();    model.clearCheckinNotes();  }}  }
class C{  public static boolean shouldFocusNode(AccessibilityNodeInfoCompat node){  return shouldFocusNode(node,null);}  }
class C{  public Expirer(){  expirerThread=new Thread(this,"ExpiringMapExpirer-" + expirerCount++);  expirerThread.setDaemon(true);}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply r){  ((SerialListener)client).reply((SerialReply)r);}  }
class C{  public void print(Writer writer) throws IOException {  for (int i=0; i < _length; i+=C1) {    char[] chars=_high[i >> B1];    writer.write(chars,0,Math.min(C1,_length - i));  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();}throw new IllegalStateException();}  }
class C{  public boolean containsBundleKey(ActivityArgAnnotatedField field){  return bundleKeyMap.get(field.getKey()) != null;}  }
class C{  protected boolean isSavedConnection(DatabaseConnection connection){  NestedConnection currentSaved=specialConnection.get();  if (currentSaved == null) {    return false;  } else   if (currentSaved.connection == connection) {    return true;  } else {    return false;  }}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public static <K,V>Map<K,V> readMap(BinaryRawReaderEx reader){  return readMap(reader,null);}  }
class C{  @Override public boolean isRepairable(){  boolean retval=isSalvage();  int loc=Tank.LOC_FRONT;  while (retval && (loc < getLocTurret())) {    int loc_is=this.getInternal(loc);    loc++;    retval=(loc_is != IArmorState.ARMOR_DOOMED) && (loc_is != IArmorState.ARMOR_DESTROYED);  }  return retval;}  }
class C{  protected void createModel(){  m=new jmri.jmrit.beantable.signalmast.SignalMastTableDataModel();}  }
class C{  private static void abort(String message,Throwable exception,int code) throws CoreException {  throw new CoreException(new Status(IStatus.ERROR,TypeScriptCorePlugin.PLUGIN_ID,code,message,exception));}  }
class C{  public RefMethod findMethodByReturnType(final RefClass type){  return this.findMethodByReturnType(type.clazz);}  }
class C{  protected Exercise(final Exercise.Type type){  this.type=type;  this.dates=new ArrayList<Date>(5);}  }
class C{  public IntegerPolynomial(int N){  coeffs=new int[N];}  }
class C{  public BitwiseOutputStream(int startingLength){  mBuf=new byte[startingLength];  mEnd=startingLength << 3;  mPos=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:54.987 -0500",hash_original_method="C9D4A4A6949ED0E6DB022AC73D44B615",hash_generated_method="D263783BE5FD569E4E8AC9FC9E4E51FA") public final boolean isLoaded(){  long address=block.toInt();  long size=block.getSize();  if (size == 0) {    return true;  }  try {    int pageSize=(int)Libcore.os.sysconf(_SC_PAGE_SIZE);    int pageOffset=(int)(address % pageSize);    address-=pageOffset;    size+=pageOffset;    int pageCount=(int)((size + pageSize - 1) / pageSize);    byte[] vector=new byte[pageCount];    Libcore.os.mincore(address,size,vector);    for (int i=0; i < vector.length; ++i) {      if ((vector[i] & 1) != 1) {        return false;      }    }    return true;  } catch (  ErrnoException errnoException) {    return false;  }}  }
class C{  protected String endChunkId(){  return "IEND";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.566 -0500",hash_original_method="95ED443083D9E3C79BD9C6E46A138264",hash_generated_method="09757E248DE21B2C34A5F30B6AA9EECF") public boolean isGlobal(){  return telephoneNumber.isGlobal();}  }
class C{  public static WebDoc createWindow(String title){  WebDoc doc=create(title);  doc.getHead().addElement(new script((Element)null,"/adempiere/js/window.js"));  doc.getHead().addElement(new script((Element)null,"/adempiere/js/calendar.js"));  doc.getHead().addElement(new script((Element)null,"/adempiere/js/table.js"));  doc.getHead().addElement(new script((Element)null,"/adempiere/lang/calendar-en.js"));  doc.getHead().addElement(new link("/adempiere/css/window.css",link.REL_STYLESHEET,link.TYPE_CSS));  doc.getHead().addElement(new link("/adempiere/css/calendar-blue.css",link.REL_STYLESHEET,link.TYPE_CSS));  doc.getHead().addElement(new link("/adempiere/css/table.css",link.REL_STYLESHEET,link.TYPE_CSS));  doc.setClasses("windowTable","windowHeader");  doc.getTable().setCellSpacing(0);  return doc;}  }
class C{  public void replace(String statement) throws CannotCompileException {  thisClass.getClassFile();  ConstPool constPool=getConstPool();  int pos=currentPos;  int index=iterator.u16bitAt(pos + 1);  String classname, methodname, signature;  int opcodeSize;  int c=iterator.byteAt(pos);  if (c == INVOKEINTERFACE) {    opcodeSize=5;    classname=constPool.getInterfaceMethodrefClassName(index);    methodname=constPool.getInterfaceMethodrefName(index);    signature=constPool.getInterfaceMethodrefType(index);  } else   if (c == INVOKESTATIC || c == INVOKESPECIAL || c == INVOKEVIRTUAL) {    opcodeSize=3;    classname=constPool.getMethodrefClassName(index);    methodname=constPool.getMethodrefName(index);    signature=constPool.getMethodrefType(index);  } else   throw new CannotCompileException("not method invocation");  Javac jc=new Javac(thisClass);  ClassPool cp=thisClass.getClassPool();  CodeAttribute ca=iterator.get();  try {    CtClass[] params=Descriptor.getParameterTypes(signature,cp);    CtClass retType=Descriptor.getReturnType(signature,cp);    int paramVar=ca.getMaxLocals();    jc.recordParams(classname,params,true,paramVar,withinStatic());    int retVar=jc.recordReturnType(retType,true);    if (c == INVOKESTATIC)     jc.recordStaticProceed(classname,methodname); else     if (c == INVOKESPECIAL)     jc.recordSpecialProceed(Javac.param0Name,classname,methodname,signature); else     jc.recordProceed(Javac.param0Name,methodname);    checkResultValue(retType,statement);    Bytecode bytecode=jc.getBytecode();    storeStack(params,c == INVOKESTATIC,paramVar,bytecode);    jc.recordLocalVariables(ca,pos);    if (retType != CtClass.voidType) {      bytecode.addConstZero(retType);      bytecode.addStore(retVar,retType);    }    jc.compileStmnt(statement);    if (retType != CtClass.voidType)     bytecode.addLoad(retVar,retType);    replace0(pos,bytecode,opcodeSize);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  public EsriPlugIn(String name,int type,int columnCount) throws Exception {switch (type) {case SHAPE_TYPE_POINT:    _list=new EsriPointList();  break;case SHAPE_TYPE_POLYGON:_list=new EsriPolygonList();break;case SHAPE_TYPE_POLYLINE:_list=new EsriPolylineList();break;default :_list=null;}_model=new DbfTableModel(columnCount);this.name=name;}  }
class C{  protected void stopAdditionalServices() throws Exception {}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public Form showForm(String resourceName,Command sourceCommand){  Form f=(Form)createContainer(fetchResourceFile(),resourceName);  showForm(f,sourceCommand,null);  return f;}  }
class C{  public void fwdDctNxM(int[][] pixels,double[][] dcts){  int x=0;  int y=0;  int i=0;  int j=0;  double t=0.0;  double cx0=Math.sqrt(1.0 / this.N);  double cy0=Math.sqrt(1.0 / this.M);  for (x=0; x < this.N; x++) {    for (y=0; y < this.M; y++) {      t+=(pixels[x][y] - 128);    }  }  dcts[0][0]=cx0 * cy0 * t;  for (i=1; i < this.N; i++) {    t=0.0;    for (x=0; x < this.N; x++) {      for (y=0; y < this.M; y++) {        t+=(pixels[x][y] - 128) * this.nxmCosTableX[x][i];      }    }    dcts[i][0]=cy0 * t;  }  for (j=1; j < this.M; j++) {    t=0.0;    for (x=0; x < this.N; x++) {      for (y=0; y < this.M; y++) {        t+=(pixels[x][y] - 128) * this.nxmCosTableY[y][j];      }    }    dcts[0][j]=cx0 * t;  }  for (i=1; i < this.N; i++) {    for (j=1; j < this.M; j++) {      t=0.0;      for (x=0; x < this.N; x++) {        for (y=0; y < this.M; y++) {          t+=(pixels[x][y] - 128) * this.nxmCosTableX[x][i] * this.nxmCosTableY[y][j];        }      }      dcts[i][j]=t;    }  }}  }
class C{  protected void addChildFeatures(){  KMLAbstractFeature rootFeature=this.kmlRoot.getFeature();  if (rootFeature == null)   return;  KMLFeatureTreeNode featureNode=KMLFeatureTreeNode.fromKMLFeature(rootFeature);  this.setDescription(featureNode.getDescription());  Boolean visibility=rootFeature.getVisibility();  this.setSelected(visibility == null || visibility);  if (rootFeature instanceof KMLAbstractContainer) {    KMLAbstractContainer container=(KMLAbstractContainer)rootFeature;    for (    KMLAbstractFeature child : container.getFeatures()) {      if (child != null)       this.addFeatureNode(child);    }  }  if (rootFeature instanceof KMLNetworkLink) {    KMLRoot networkResource=((KMLNetworkLink)rootFeature).getNetworkResource();    if (networkResource != null && networkResource.getFeature() != null) {      rootFeature=networkResource.getFeature();      if (rootFeature instanceof KMLDocument) {        KMLAbstractContainer container=(KMLAbstractContainer)rootFeature;        for (        KMLAbstractFeature child : container.getFeatures()) {          if (child != null)           this.addFeatureNode(child);        }      } else       if (rootFeature != null) {        this.addFeatureNode(rootFeature);      }    }  }}  }
class C{  public double classValue(){  if (classIndex() < 0) {    throw new UnassignedClassException("Class is not set!");  }  return value(classIndex());}  }
class C{  @Override public void onTurnReached(int currentTurn){  StoreMessageCommand checkcommand=DBCommandQueue.get().getOneResult(StoreMessageCommand.class,handle);  if (checkcommand == null) {    TurnNotifier.get().notifyInTurns(0,new TurnListenerDecorator(this));    return;  }  boolean characterExists=checkcommand.targetCharacterExists();  String target=checkcommand.getTarget();  String supportmessage=checkcommand.getMessage();  final Player admin=SingletonRepository.getRuleProcessor().getPlayer(sender);  if (!characterExists) {    if (admin != null) {      admin.sendPrivateText(NotificationType.ERROR,"Sorry, " + target + " could not be found.");    }    return;  }  final String message=sender + " answers " + Grammar.suffix_s(target)+ " support question using postman: "+ supportmessage;  SingletonRepository.getRuleProcessor().sendMessageToSupporters(message);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static GenericPK create(GenericPK value){  GenericPK newPK=new GenericPK();  newPK.init(value);  return newPK;}  }
class C{  public RawComponent addExperimentalComponent(String name){  RawComponent raw=new RawComponent(name);  addComponent(raw);  return raw;}  }
class C{  public UnsupportedException(String message,Response response){  super(HttpStatus.UNSUPPORTED_MEDIA_TYPE,message,response);}  }
class C{  public Object read(InputNode node) throws Exception {  Instance value=factory.getInstance(node);  Class type=value.getType();  if (value.isReference()) {    return value.getInstance();  }  if (context.isPrimitive(type)) {    return readPrimitive(node,value);  }  return read(node,value,type);}  }
class C{  protected boolean displayPopup(List<Component> contents,MouseEvent me){  if (DEBUG) {    Debug.output("displayPopup(" + contents + ") "+ me);  }  if (contents != null && !contents.isEmpty()) {    JPopupMenu jpm=new JPopupMenu();    for (    Component comp : contents) {      jpm.add(comp);    }    jpm.show((Component)me.getSource(),me.getX(),me.getY());    return true;  }  return false;}  }
class C{  public static boolean areAllTagsEnabled(){  return enableAllTags;}  }
class C{  private void stopParent(int startId){  Service p=parent.get();  if (p != null) {    p.stopSelf(startId);  }}  }
class C{  public boolean equals(Object other){  if ((other == null) || !(other instanceof GF2mField)) {    return false;  }  GF2mField otherField=(GF2mField)other;  if ((degree == otherField.degree) && (polynomial == otherField.polynomial)) {    return true;  }  return false;}  }
class C{  private void markDirty(){  requestScope.getDirtyResources().add(this);}  }
class C{  public boolean intersects(IMultiPoint p){  if (p.dimensionality() != dimension) {    throw new IllegalArgumentException("Unable to determine intersection between Hypercube (dimension " + dimension + ") and point (dimension "+ p.dimensionality()+ ")");  }  for (int i=1; i <= dimension; i++) {    double x=p.getCoordinate(i);    if (x < lows[i - 1] || x > highs[i - 1]) {      return false;    }  }  return true;}  }
class C{  public static int calcDistance(String strA,String strB){  final Word[] wordsA=prepareString(strA);  final Word[] wordsB=prepareString(strB);  return calcDistance(wordsA,wordsB);}  }
class C{  public CategoryTableXYDataset(){  this.values=new DefaultKeyedValues2D(true);  this.intervalDelegate=new IntervalXYDelegate(this);  addChangeListener(this.intervalDelegate);}  }
class C{  public void validateFill(){  assert FreeListManager.TINY_MULTIPLE == 8;  long startAddress=getAddress() + MIN_CHUNK_SIZE;  int size=getSize() - MIN_CHUNK_SIZE;  for (int i=0; i < size; i+=FreeListManager.TINY_MULTIPLE) {    if (AddressableMemoryManager.readLong(startAddress + i) != FILL_PATTERN) {      throw new IllegalStateException("Fill pattern violated for chunk " + getAddress() + " with size "+ getSize());    }  }}  }
class C{  private void initActionBarAutoHide(){  actionBarAutoHideMinY=getResources().getDimensionPixelSize(R.dimen.action_bar_auto_hide_min_y);  actionBarAutoHideSensitivity=getResources().getDimensionPixelSize(R.dimen.action_bar_auto_hide_sensivity);}  }
class C{  static void checkSignedByte(final int value,final String msg){  if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed byte): " + value);  }}  }
class C{  private static void println(String msg){  X.println("  > " + msg);}  }
class C{  public HttpURL(final char[] escaped,final String charset) throws URIException, NullPointerException {  protocolCharset=charset;  parseUriReference(new String(escaped),true);  checkValid();}  }
class C{  public StorageEntity createStorageEntity(String storageName,String storagePlatformCode){  return createStorageEntity(storageName,storagePlatformCode,null);}  }
class C{  public static String listToOsmList(List<String> list){  String osmList="";  if (list != null) {    for (    String i : list) {      if (!"".equals(osmList)) {        osmList=osmList + ";";      }      osmList=osmList + i;    }  }  return osmList;}  }
class C{  public static EncodedSignedMark readEncodedSignedMark(String data){  int beginTagIndex=data.indexOf(BEGIN_ENCODED_SMD);  int endTagIndex=data.indexOf(END_ENCODED_SMD);  if (beginTagIndex >= 0 && endTagIndex >= 0) {    data=data.substring(beginTagIndex + BEGIN_ENCODED_SMD.length(),endTagIndex);  }  return EncodedSignedMark.create("base64",whitespace().removeFrom(data));}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        return JqlTokenTypes.NUMBER_LITERAL;      }case 41:    break;case 13:{    return JqlTokenTypes.PIPE;  }case 42:break;case 38:{return JqlTokenTypes.BEFORE_KEYWORD;}case 43:break;case 28:{return JqlTokenTypes.ASC_KEYWORD;}case 44:break;case 27:{return JqlTokenTypes.AND_KEYWORD;}case 45:break;case 19:{return JqlTokenTypes.IN_KEYWORD;}case 46:break;case 20:{return JqlTokenTypes.IS_KEYWORD;}case 47:break;case 16:{return JqlTokenTypes.TO_KEYWORD;}case 48:break;case 14:{return JqlTokenTypes.COMMA;}case 49:break;case 6:{return JqlTokenTypes.BANG;}case 50:break;case 32:{return JqlTokenTypes.NULL_KEYWORD;}case 51:break;case 1:{return JqlTokenTypes.STRING_LITERAL;}case 52:break;case 36:{return JqlTokenTypes.ORDER_KEYWORD;}case 53:break;case 35:{return JqlTokenTypes.AFTER_KEYWORD;}case 54:break;case 34:{return JqlTokenTypes.CUSTOM_FIELD;}case 55:break;case 15:{return JqlTokenTypes.BY_KEYWORD;}case 56:break;case 24:{return JqlTokenTypes.GE;}case 57:break;case 30:{return JqlTokenTypes.WAS_KEYWORD;}case 58:break;case 22:{return JqlTokenTypes.NOT_CONTAINS;}case 59:break;case 8:{return JqlTokenTypes.GT;}case 60:break;case 10:{return JqlTokenTypes.LPAR;}case 61:break;case 9:{return JqlTokenTypes.CONTAINS;}case 62:break;case 21:{return JqlTokenTypes.NE;}case 63:break;case 31:{return JqlTokenTypes.FROM_KEYWORD;}case 64:break;case 18:{return JqlTokenTypes.OR_KEYWORD;}case 65:break;case 4:{return JqlTokenTypes.BAD_CHARACTER;}case 66:break;case 26:{return JqlTokenTypes.PIPE_PIPE;}case 67:break;case 5:{return JqlTokenTypes.EQ;}case 68:break;case 17:{return JqlTokenTypes.ON_KEYWORD;}case 69:break;case 40:{return JqlTokenTypes.CHANGED_KEYWORD;}case 70:break;case 2:{return JqlTokenTypes.WHITE_SPACE;}case 71:break;case 23:{return JqlTokenTypes.LE;}case 72:break;case 39:{return JqlTokenTypes.DURING_KEYWORD;}case 73:break;case 12:{return JqlTokenTypes.AMP;}case 74:break;case 33:{return JqlTokenTypes.DESC_KEYWORD;}case 75:break;case 29:{return JqlTokenTypes.NOT_KEYWORD;}case 76:break;case 11:{return JqlTokenTypes.RPAR;}case 77:break;case 7:{return JqlTokenTypes.LT;}case 78:break;case 37:{return JqlTokenTypes.EMPTY_KEYWORD;}case 79:break;case 25:{return JqlTokenTypes.AMP_AMP;}case 80:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static String destroyCart(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  clearCart(request,response);  session.removeAttribute("shoppingCart");  session.removeAttribute("orderPartyId");  session.removeAttribute("orderMode");  session.removeAttribute("productStoreId");  session.removeAttribute("CURRENT_CATALOG_ID");  return "success";}  }
class C{  private Bitmap drawableToBitmap(Drawable drawable){  if (drawable instanceof BitmapDrawable) {    return ((BitmapDrawable)drawable).getBitmap();  }  int width=drawable.getIntrinsicWidth();  width=width > 0 ? width : 1;  int height=drawable.getIntrinsicHeight();  height=height > 0 ? height : 1;  Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  drawable.draw(canvas);  return bitmap;}  }
class C{  public static String extractValueFromStringSet(String key,StringSetMap volumeInformation){  try {    StringSet availableValueSet=volumeInformation.get(key);    if (null != availableValueSet) {      for (      String value : availableValueSet) {        return value;      }    }  } catch (  Exception e) {    _logger.error(e.getMessage(),e);  }  return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE__CHARACTER:    setCharacter(CHARACTER_EDEFAULT);  return;case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE__SEQUENCE:setSequence(SEQUENCE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public BalancedBinaryNode(K key,V value,BalancedBinaryNode<K,V> parent){  this.key=key;  this.parent=parent;  left=null;  right=null;  parent=null;  this.value=value;}  }
class C{  @RequestProcessing(value="/tags/{tagTitle}",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showTagArticles(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String tagTitle) throws Exception {  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("tag-articles.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("tagArticlesCnt");  final int windowSize=Symphonys.getInt("tagArticlesWindowSize");  final JSONObject tag=tagQueryService.getTagByTitle(tagTitle);  if (null == tag) {    response.sendError(HttpServletResponse.SC_NOT_FOUND);    return;  }  tag.put(Common.IS_RESERVED,tagQueryService.isReservedTag(tagTitle));  dataModel.put(Tag.TAG,tag);  final String tagId=tag.optString(Keys.OBJECT_ID);  final List<JSONObject> relatedTags=tagQueryService.getRelatedTags(tagId,Symphonys.getInt("tagRelatedTagsCnt"));  tag.put(Tag.TAG_T_RELATED_TAGS,(Object)relatedTags);  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);  if (isLoggedIn) {    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);    final String followerId=currentUser.optString(Keys.OBJECT_ID);    final boolean isFollowing=followQueryService.isFollowing(followerId,tagId);    dataModel.put(Common.IS_FOLLOWING,isFollowing);  }  final List<JSONObject> articles=articleQueryService.getArticlesByTag(tag,pageNum,pageSize);  dataModel.put(Article.ARTICLES,articles);  final JSONObject tagCreator=tagQueryService.getCreator(tagId);  tag.put(Tag.TAG_T_CREATOR_THUMBNAIL_URL,tagCreator.optString(Tag.TAG_T_CREATOR_THUMBNAIL_URL));  tag.put(Tag.TAG_T_CREATOR_NAME,tagCreator.optString(Tag.TAG_T_CREATOR_NAME));  tag.put(Tag.TAG_T_CREATOR_THUMBNAIL_UPDATE_TIME,tagCreator.optLong(Tag.TAG_T_CREATOR_THUMBNAIL_UPDATE_TIME));  tag.put(Tag.TAG_T_PARTICIPANTS,(Object)tagQueryService.getParticipants(tagId,Symphonys.getInt("tagParticipantsCnt")));  final int tagRefCnt=tag.getInt(Tag.TAG_REFERENCE_CNT);  final int pageCount=(int)Math.ceil(tagRefCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  public static void end(){  ServiceContext context=(ServiceContext)_localContext.get();  if (context != null && --context._count == 0) {    context._request=null;    context._response=null;    context._headers.clear();    _localContext.set(null);  }}  }
class C{  protected void doParse() throws ParseException, IOException {  numberListHandler.startNumberList();  current=reader.read();  skipSpaces();  try {    for (; ; ) {      numberListHandler.startNumber();      float f=parseFloat();      numberListHandler.numberValue(f);      numberListHandler.endNumber();      skipCommaSpaces();      if (current == -1) {        break;      }    }  } catch (  NumberFormatException e) {    reportUnexpectedCharacterError(current);  }  numberListHandler.endNumberList();}  }
class C{  public boolean isGlobal(){  return isglobal;}  }
class C{  private Sprite loadSprite(final String ref){  BufferedImage sourceImage=null;  try {    URL url;    if (ref.startsWith("http://")) {      logger.info("Loading sprite from a URL...");      url=new URL(ref);    } else {      url=DataLoader.getResource(ref);    }    if (url == null) {      logger.error("Can't find ref: " + ref);      if (ref.equals(FAILSAFE_ICON_REF)) {        logger.error("Cannot find FAILSAFE_ICON_REF: " + FAILSAFE_ICON_REF);        return null;      } else {        return getFailsafe();      }    }    sourceImage=ImageIO.read(url);  } catch (  final IOException e) {    logger.error("Failed to read: " + ref,e);    if (ref.equals(FAILSAFE_ICON_REF)) {      logger.error("Cannot read FAILSAFE_ICON_REF: " + FAILSAFE_ICON_REF);      return null;    } else {      return getFailsafe();    }  }  final Image image=gc.createCompatibleImage(sourceImage.getWidth(),sourceImage.getHeight(),TransparencyMode.TRANSPARENCY);  image.getGraphics().drawImage(sourceImage,0,0,null);  final Sprite sprite=new ImageSprite(image,ref);  return sprite;}  }
class C{  public Quaterniond premul(double qx,double qy,double qz,double qw){  return premul(qx,qy,qz,qw,this);}  }
class C{  public static Document buildDOM(){  ensureDocumentBuilder();  try {    return dbFactory.newDocumentBuilder().newDocument();  } catch (  ParserConfigurationException e) {    throw new DSSException(e);  }}  }
class C{  protected void displayDirItemObjects(String currDir){  File currDirFile=new File(currDir);  ArrayList<FileItem> dirItems=new ArrayList<FileItem>();  int amountOfDirItems=0;  String lastModified=null;  try {    File[] files=currDirFile.listFiles();    for (    File file : files) {      if (file.isDirectory()) {        File[] its=file.listFiles();        if (its != null)         amountOfDirItems=its.length;      }      SimpleDateFormat dateFormat=new SimpleDateFormat("dd.MM.yyyy , hh:mm:ss",Locale.US);      lastModified=dateFormat.format(new Date(currDirFile.lastModified()));      dirItems.add(new FileItem(file.getName(),file.getAbsolutePath(),lastModified,Long.valueOf(file.length()).toString(),Integer.valueOf(amountOfDirItems).toString(),file.isDirectory()));    }    if (currDir.equals(Environment.getExternalStorageDirectory().getPath()))     dirItems.add(0,new FileItem("/",currDirFile.getParent(),"","","0",true)); else     dirItems.add(0,new FileItem("..",currDirFile.getParent(),"","","0",true));  } catch (  Exception e) {    e.printStackTrace();  }  setInfoBarView(R.id.pb_infobar_container,getString(R.string.pb_path) + ": ",currDir + "/",infoBarLine);  setAdapter(dirItems);  mainLv.setAdapter(adapter);  mainLv.setOnItemClickListener(this);}  }
class C{  public synchronized void removeSession(Session session){  if (session != null) {    if (exclusiveSession == session) {      exclusiveSession=null;    }    userSessions.remove(session);    if (session != systemSession && session != lobSession) {      trace.info("disconnecting session #{0}",session.getId());    }  }  if (userSessions.size() == 0 && session != systemSession && session != lobSession) {    if (closeDelay == 0) {      close(false);    } else     if (closeDelay < 0) {      return;    } else {      delayedCloser=new DatabaseCloser(this,closeDelay * 1000,false);      delayedCloser.setName("H2 Close Delay " + getShortName());      delayedCloser.setDaemon(true);      delayedCloser.start();    }  }  if (session != systemSession && session != lobSession && session != null) {    trace.info("disconnected session #{0}",session.getId());  }}  }
class C{  public int size(){  return _elementOrder.size();}  }
class C{  @Override public String generateFinished() throws Exception {  return "";}  }
class C{  @Override public void onRemoved(final StendhalRPZone zone){  zone.removeMovementListener(this);  super.onRemoved(zone);}  }
class C{  @Override public void clearWarnings() throws SQLException {  try {    debugCodeCall("clearWarnings");    checkClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static ChangeCorrectionProposal addGetterProposal(ProposalParameter context,int relevance){  IMethodBinding method=findGetter(context);  if (method != null) {    Expression mi=createMethodInvocation(context,method,null);    context.astRewrite.replace(context.accessNode,mi,null);    String label=Messages.format(CorrectionMessages.GetterSetterCorrectionSubProcessor_replacewithgetter_description,BasicElementLabels.getJavaCodeString(ASTNodes.asString(context.accessNode)));    Image image=JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);    ASTRewriteCorrectionProposal proposal=new ASTRewriteCorrectionProposal(label,context.compilationUnit,context.astRewrite,relevance,image);    return proposal;  } else {  }  return null;}  }
class C{  public void minimize(){  Out.print(numStates + " states before minimization, ");  if (numStates == 0) {    Out.error(ErrorMessages.ZERO_STATES);    throw new GeneratorException();  }  if (Options.no_minimize) {    Out.println("minimization skipped.");    return;  }  final int n=numStates + 1;  int[] block=new int[2 * n];  int[] b_forward=new int[2 * n];  int[] b_backward=new int[2 * n];  int lastBlock=n;  final int b0=n;  int[] l_forward=new int[n * numInput + 1];  int[] l_backward=new int[n * numInput + 1];  int anchorL=n * numInput;  int[][] inv_delta=new int[n][numInput];  int[] inv_delta_set=new int[2 * n * numInput];  int[] twin=new int[2 * n];  int numSplit;  int[] SD=new int[2 * n];  int[] D=new int[n];  int numD;  int lastDelta=0;  int[] inv_lists=new int[n];  int[] inv_list_last=new int[n];  for (int c=0; c < numInput; c++) {    for (int s=0; s < n; s++) {      inv_list_last[s]=-1;      inv_delta[s][c]=-1;    }    inv_delta[0][c]=0;    inv_list_last[0]=0;    for (int s=1; s < n; s++) {      int t=table[s - 1][c] + 1;      if (inv_list_last[t] == -1) {        inv_delta[t][c]=s;        inv_list_last[t]=s;      } else {        inv_lists[inv_list_last[t]]=s;        inv_list_last[t]=s;      }    }    for (int s=0; s < n; s++) {      int i=inv_delta[s][c];      inv_delta[s][c]=lastDelta;      int j=inv_list_last[s];      boolean go_on=(i != -1);      while (go_on) {        go_on=(i != j);        inv_delta_set[lastDelta++]=i;        i=inv_lists[i];      }      inv_delta_set[lastDelta++]=-1;    }  }  b_forward[b0]=0;  b_backward[b0]=0;  b_forward[0]=b0;  b_backward[0]=b0;  block[0]=b0;  block[b0]=1;  for (int s=1; s < n; s++) {    int b=b0 + 1;    boolean found=false;    while (!found && b <= lastBlock) {      int t=b_forward[b];      if (isFinal[s - 1]) {        found=isFinal[t - 1] && action[s - 1].isEquiv(action[t - 1]);      } else {        found=!isFinal[t - 1];      }      if (found) {        block[s]=b;        block[b]++;        int last=b_backward[b];        b_forward[last]=s;        b_forward[s]=b;        b_backward[b]=s;        b_backward[s]=last;      }      b++;    }    if (!found) {      block[s]=b;      block[b]++;      b_forward[b]=s;      b_forward[s]=b;      b_backward[b]=s;      b_backward[s]=b;      lastBlock++;    }  }  int B_max=b0;  int B_i;  for (B_i=b0 + 1; B_i <= lastBlock; B_i++)   if (block[B_max] < block[B_i])   B_max=B_i;  l_forward[anchorL]=anchorL;  l_backward[anchorL]=anchorL;  if (B_max == b0)   B_i=b0 + 1; else   B_i=b0;  int index=(B_i - b0) * numInput;  while (index < (B_i + 1 - b0) * numInput) {    int last=l_backward[anchorL];    l_forward[last]=index;    l_forward[index]=anchorL;    l_backward[index]=last;    l_backward[anchorL]=index;    index++;  }  while (B_i <= lastBlock) {    if (B_i != B_max) {      index=(B_i - b0) * numInput;      while (index < (B_i + 1 - b0) * numInput) {        int last=l_backward[anchorL];        l_forward[last]=index;        l_forward[index]=anchorL;        l_backward[index]=last;        l_backward[anchorL]=index;        index++;      }    }    B_i++;  }  while (l_forward[anchorL] != anchorL) {    int B_j_a=l_forward[anchorL];    l_forward[anchorL]=l_forward[B_j_a];    l_backward[l_forward[anchorL]]=anchorL;    l_forward[B_j_a]=0;    int B_j=b0 + B_j_a / numInput;    int a=B_j_a % numInput;    numD=0;    int s=b_forward[B_j];    while (s != B_j) {      int t=inv_delta[s][a];      while (inv_delta_set[t] != -1) {        D[numD++]=inv_delta_set[t++];      }      s=b_forward[s];    }    numSplit=0;    for (int indexD=0; indexD < numD; indexD++) {      s=D[indexD];      B_i=block[s];      SD[B_i]=-1;      twin[B_i]=0;    }    for (int indexD=0; indexD < numD; indexD++) {      s=D[indexD];      B_i=block[s];      if (SD[B_i] < 0) {        SD[B_i]=0;        int t=b_forward[B_i];        while (t != B_i && (t != 0 || block[0] == B_j) && (t == 0 || block[table[t - 1][a] + 1] == B_j)) {          SD[B_i]++;          t=b_forward[t];        }      }    }    for (int indexD=0; indexD < numD; indexD++) {      s=D[indexD];      B_i=block[s];      if (SD[B_i] != block[B_i]) {        int B_k=twin[B_i];        if (B_k == 0) {          B_k=++lastBlock;          b_forward[B_k]=B_k;          b_backward[B_k]=B_k;          twin[B_i]=B_k;          twin[numSplit++]=B_i;        }        b_forward[b_backward[s]]=b_forward[s];        b_backward[b_forward[s]]=b_backward[s];        int last=b_backward[B_k];        b_forward[last]=s;        b_forward[s]=B_k;        b_backward[s]=last;        b_backward[B_k]=s;        block[s]=B_k;        block[B_k]++;        block[B_i]--;        SD[B_i]--;      }    }    for (int indexTwin=0; indexTwin < numSplit; indexTwin++) {      B_i=twin[indexTwin];      int B_k=twin[B_i];      for (int c=0; c < numInput; c++) {        int B_i_c=(B_i - b0) * numInput + c;        int B_k_c=(B_k - b0) * numInput + c;        if (l_forward[B_i_c] > 0) {          int last=l_backward[anchorL];          l_backward[anchorL]=B_k_c;          l_forward[last]=B_k_c;          l_backward[B_k_c]=last;          l_forward[B_k_c]=anchorL;        } else {          if (block[B_i] <= block[B_k]) {            int last=l_backward[anchorL];            l_backward[anchorL]=B_i_c;            l_forward[last]=B_i_c;            l_backward[B_i_c]=last;            l_forward[B_i_c]=anchorL;          } else {            int last=l_backward[anchorL];            l_backward[anchorL]=B_k_c;            l_forward[last]=B_k_c;            l_backward[B_k_c]=last;            l_forward[B_k_c]=anchorL;          }        }      }    }  }  int trans[]=new int[numStates];  boolean kill[]=new boolean[numStates];  int move[]=new int[numStates];  for (int b=b0 + 1; b <= lastBlock; b++) {    int s=b_forward[b];    int min_s=s;    for (; s != b; s=b_forward[s])     if (min_s > s)     min_s=s;    min_s--;    for (s=b_forward[b] - 1; s != b - 1; s=b_forward[s + 1] - 1) {      trans[s]=min_s;      kill[s]=s != min_s;    }  }  int amount=0;  for (int i=0; i < numStates; i++) {    if (kill[i])     amount++; else     move[i]=amount;  }  int i, j;  for (i=0, j=0; i < numStates; i++) {    if (!kill[i]) {      for (int c=0; c < numInput; c++) {        if (table[i][c] >= 0) {          table[j][c]=trans[table[i][c]];          table[j][c]-=move[table[j][c]];        } else {          table[j][c]=table[i][c];        }      }      isFinal[j]=isFinal[i];      action[j]=action[i];      j++;    }  }  numStates=j;  for (i=0; i < entryState.length; i++) {    entryState[i]=trans[entryState[i]];    entryState[i]-=move[entryState[i]];  }  Out.println(numStates + " states in minimized DFA");}  }
class C{  public DataPanel(){  super();  initialize();  createPanel();}  }
class C{  public void printLine() throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.printLine()");  writeLine();}  }
class C{  public LoggingFraction customHandler(String name,String module,String className,Properties properties,String formatter){  Map<Object,Object> handlerProperties=new HashMap<>();  final Enumeration<?> names=properties.propertyNames();  while (names.hasMoreElements()) {    final String nextElement=(String)names.nextElement();    handlerProperties.put(nextElement,properties.getProperty(nextElement));  }  customHandler(new CustomHandler(name).module(module).attributeClass(className).formatter(formatter).properties(handlerProperties));  return this;}  }
class C{  public String stemmerTipText(){  return "The stemming algorithm to use on the words.";}  }
class C{  public static double phredToProb(double phred){  return Math.pow(10.0,-phred / 10.0);}  }
class C{  public static boolean isTesting(){  return _isTesting;}  }
class C{  public ObjectReference loadObjectReference(){  return null;}  }
class C{  public final void dispatchCharactersEvents(int nodeHandle,ContentHandler ch,boolean normalize) throws SAXException {  int identity=makeNodeIdentity(nodeHandle);  if (identity == DTM.NULL)   return;  int type=_type2(identity);  if (type == DTM.ELEMENT_NODE || type == DTM.DOCUMENT_NODE) {    int startNode=identity;    identity=_firstch2(identity);    if (DTM.NULL != identity) {      int offset=-1;      int length=0;      do {        type=_exptype2(identity);        if (type == DTM.TEXT_NODE || type == DTM.CDATA_SECTION_NODE) {          int dataIndex=m_dataOrQName.elementAt(identity);          if (dataIndex >= 0) {            if (-1 == offset) {              offset=dataIndex >>> TEXT_LENGTH_BITS;            }            length+=dataIndex & TEXT_LENGTH_MAX;          } else {            if (-1 == offset) {              offset=m_data.elementAt(-dataIndex);            }            length+=m_data.elementAt(-dataIndex + 1);          }        }        identity++;      } while (_parent2(identity) >= startNode);      if (length > 0) {        if (normalize)         m_chars.sendNormalizedSAXcharacters(ch,offset,length); else         m_chars.sendSAXcharacters(ch,offset,length);      }    }  } else   if (DTM.TEXT_NODE == type || DTM.CDATA_SECTION_NODE == type) {    int dataIndex=m_dataOrQName.elementAt(identity);    if (dataIndex >= 0) {      if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX); else       m_chars.sendSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX);    } else {      if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1)); else       m_chars.sendSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1));    }  } else {    int dataIndex=m_dataOrQName.elementAt(identity);    if (dataIndex < 0) {      dataIndex=-dataIndex;      dataIndex=m_data.elementAt(dataIndex + 1);    }    String str=(String)m_values.elementAt(dataIndex);    if (normalize)     FastStringBuffer.sendNormalizedSAXcharacters(str.toCharArray(),0,str.length(),ch); else     ch.characters(str.toCharArray(),0,str.length());  }}  }
class C{  public static boolean isLocal(Class<? extends DataObject> clazz){  return (!clazz.isAnnotationPresent(DbKeyspace.class) || clazz.getAnnotation(DbKeyspace.class).value().equals(Keyspaces.LOCAL));}  }
class C{  public Builder maxReconnections(int maxReconnections){  this.maxReconnections=maxReconnections;  return this;}  }
class C{  public void testDispatch_0args(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.dispatch();  jmri.util.JUnitAppender.assertWarnMessage("dispatch called without knowing the original throttle listener");}  }
class C{  public ParameterItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   m_adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  private static void declarationBracketsParse(PsiBuilder builder,PsiBuilder.Marker marker){  ParserUtils.getToken(builder,GroovyTokenTypes.mLBRACK);  ParserUtils.getToken(builder,GroovyTokenTypes.mRBRACK,GroovyBundle.message("rbrack.expected"));  PsiBuilder.Marker newMarker=marker.precede();  marker.done(GroovyElementTypes.ARRAY_TYPE);  if (GroovyTokenTypes.mLBRACK.equals(builder.getTokenType())) {    declarationBracketsParse(builder,newMarker);  } else {    newMarker.drop();  }}  }
class C{  public boolean isSelected(){  Object oo=get_Value(COLUMNNAME_IsSelected);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void startCastControllerActivity(Context context,Bundle mediaWrapper,int position,boolean shouldStart,JSONObject customData){  Intent intent=new Intent(context,VideoCastControllerActivity.class);  intent.putExtra(EXTRA_MEDIA,mediaWrapper);  intent.putExtra(EXTRA_START_POINT,position);  intent.putExtra(EXTRA_SHOULD_START,shouldStart);  if (null != customData) {    intent.putExtra(EXTRA_CUSTOM_DATA,customData.toString());  }  context.startActivity(intent);}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  public static Funnel<Long> longFunnel(){  return LongFunnel.INSTANCE;}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public static void filterJavaFiles(ArrayList<File> list){  for (int i=0; i < list.size(); i++) {    String str=list.get(i).getName();    boolean isjavaCode=str.substring(str.lastIndexOf('.')).equals(".java");    if (!isjavaCode)     list.remove(i);  }}  }
class C{  public SetHallOfFameToAgeDiffAction(final String questname,final int index,String fametype){  this.questname=checkNotNull(questname);  this.index=index;  this.fametype=checkNotNull(fametype);}  }
class C{  private void createRayTracingProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raytracing.fs",GL_FRAGMENT_SHADER);  int random=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/random.glsl",GL_FRAGMENT_SHADER);  int randomCommon=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glAttachShader(program,random);  glAttachShader(program,randomCommon);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.rayTracingProgram=program;}  }
class C{  public void shearX(float angle){  showMissingWarning("shearX");}  }
class C{  public InvalidJobException(){  super();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @VisibleForTesting protected void updateIsLatest(List<Extension> extensions){  if (!extensions.isEmpty()) {    try {      List<Extension> registered=registryManager.getExtensions();      for (      Extension extension : extensions) {        extension.setLatest(true);        for (        Extension rExtension : registered) {          if (rExtension.isLatest() && extension.getRowType().equalsIgnoreCase(rExtension.getRowType())) {            Date issuedOne=extension.getIssued();            Date issuedTwo=rExtension.getIssued();            if (issuedOne == null && issuedTwo != null) {              setUpToDate(false);              extension.setLatest(false);              LOG.debug("Installed extension with rowType " + extension.getRowType() + " has no issued date. A newer version issued "+ issuedTwo.toString()+ " exists.");            } else             if (issuedTwo != null && issuedTwo.compareTo(issuedOne) > 0) {              setUpToDate(false);              extension.setLatest(false);              LOG.debug("Installed extension with rowType " + extension.getRowType() + " was issued "+ issuedOne.toString()+ ". A newer version issued "+ issuedTwo.toString()+ " exists.");            } else {              LOG.debug("Installed extension with rowType " + extension.getRowType() + " is the latest version");            }            break;          }        }      }      if (isUpToDate()) {        addActionMessage(getText("admin.extensions.upToDate"));      } else {        addActionWarning(getText("admin.extensions.not.upToDate"));      }    } catch (    RegistryException e) {      String msg=RegistryException.logRegistryException(e.getType(),this);      warnings.addStartupError(msg);      LOG.error(msg);      msg=getText("admin.extensions.couldnt.load",new String[]{cfg.getRegistryUrl()});      warnings.addStartupError(msg);      LOG.error(msg);    }  }}  }
class C{  public CombinedXYChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,String[] types){  super(dataset,renderer);  int length=types.length;  mCharts=new XYChart[length];  for (int i=0; i < length; i++) {    try {      mCharts[i]=getXYChart(types[i]);    } catch (    Exception e) {    }    if (mCharts[i] == null) {      throw new IllegalArgumentException("Unknown chart type " + types[i]);    } else {      XYMultipleSeriesDataset newDataset=new XYMultipleSeriesDataset();      newDataset.addSeries(dataset.getSeriesAt(i));      XYMultipleSeriesRenderer newRenderer=new XYMultipleSeriesRenderer();      newRenderer.setBarSpacing(renderer.getBarSpacing());      newRenderer.setPointSize(renderer.getPointSize());      int scale=dataset.getSeriesAt(i).getScaleNumber();      if (renderer.isMinXSet(scale)) {        newRenderer.setXAxisMin(renderer.getXAxisMin(scale));      }      if (renderer.isMaxXSet(scale)) {        newRenderer.setXAxisMax(renderer.getXAxisMax(scale));      }      if (renderer.isMinYSet(scale)) {        newRenderer.setYAxisMin(renderer.getYAxisMin(scale));      }      if (renderer.isMaxYSet(scale)) {        newRenderer.setYAxisMax(renderer.getYAxisMax(scale));      }      newRenderer.addSeriesRenderer(renderer.getSeriesRendererAt(i));      mCharts[i].setDatasetRenderer(newDataset,newRenderer);    }  }}  }
class C{  public boolean validateWith(@NonNull METValidator validator){  CharSequence text=getText();  boolean isValid=validator.isValid(text,text.length() == 0);  if (!isValid) {    setError(validator.getErrorMessage());  }  postInvalidate();  return isValid;}  }
class C{  public boolean isExpired(Calendar fromDate){  Calendar endTime=(Calendar)fromDate.clone();  if (window == null) {    endTime.add(Calendar.HOUR_OF_DAY,INFINITE_WINDOW_ORDER_EXECUTION_TIMEOUT);  } else {    endTime.add(getWindowLengthCalendarField(),window.getExecutionWindowLength());  }  Calendar currTime=Calendar.getInstance();  log.debug("currTime:{}, endTime: {}",currTime,endTime);  return currTime.compareTo(endTime) > 0;}  }
class C{  Food cook(String ingredients) throws IAmOnFire {  return null;}  }
class C{  public boolean contains(final Throwable throwable){  return contains(convert(throwable));}  }
class C{  public byte[] toByteArray(){  ByteBuffer buff=ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);  writeTo(buff);  return buff.array();}  }
class C{  public static void doGet(String url){  try {    doGet(new URL(url));  } catch (  MalformedURLException e) {    warn("The specified URL " + url + " is not a valid URL. Please check");  }}  }
class C{  public Builder withLookingForStuckThread(boolean enable){  this.lookForStuckThread=enable;  return this;}  }
class C{  public static _ApplicationGroupProperty fromString(final String value) throws SOAPSerializationException {  return (_ApplicationGroupProperty)Enumeration.fromString(value,_ApplicationGroupProperty.VALUES_TO_INSTANCES);}  }
class C{  protected void parsel() throws ParseException, IOException {  current=reader.read();  skipSpaces();  _parsel(true);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void sendArtyAutoHitHexes(Vector<Coords> hexes){  artilleryAutoHitHexes=hexes;  send(new Packet(Packet.COMMAND_SET_ARTYAUTOHITHEXES,hexes));}  }
class C{  public Document read(Reader reader,String systemID) throws DocumentException, IOException, XmlPullParserException {  Document document=read(reader);  document.setName(systemID);  return document;}  }
class C{  public static synchronized CoderResult unmappableForLength(int length) throws IllegalArgumentException {  if (length > 0) {    Integer key=Integer.valueOf(length);synchronized (_unmappableErrors) {      CoderResult r=_unmappableErrors.get(key);      if (r == null) {        r=new CoderResult(TYPE_UNMAPPABLE_CHAR,length);        _unmappableErrors.put(key,r);      }      return r;    }  }  throw new IllegalArgumentException("length <= 0: " + length);}  }
class C{  public synchronized int entries(){  return (this.blobs == null) ? 0 : this.blobs.size();}  }
class C{  private boolean containsSamtTopicsOnly(ControlGroup group){  for (  CnATreeElement child : group.getChildren()) {    if (!(child instanceof SamtTopic)) {      return false;    }  }  return true;}  }
class C{  protected void applyClassifierAndUpdateTree(BoundingBox bb){  entityTree=new KDTree(bb,8000,60);  for (  MapWay way : ways.values())   updateEntityViewInfo(way,true);  for (  MapNode poi : pois)   updateEntityViewInfo(poi,true);  for (  MapNode marker : markers)   updateEntityViewInfo(marker,false);  for (  Track track : tracks)   updateEntityViewInfo(track,false);}  }
class C{  public synchronized boolean wasClicked(){  return this.value == 1;}  }
class C{  @Override public void onReceive(Context context,Intent intent){  final ConnectivityManager connMgr=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  final NetworkInfo wifi=connMgr.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  wifiConnected=wifi.isAvailable() && wifi.isConnected();  Log.d(TAG,"Received broadcast about wifi. Connected = " + wifiConnected);  debugIntent(intent,TAG);}  }
class C{  public static void freeMemory(long addr){  UNSAFE.freeMemory(addr);}  }
class C{  public static void main(String[] args) throws FloodlightModuleException {  try {    System.setProperty("org.restlet.engine.loggerFacadeClass","org.restlet.ext.slf4j.Slf4jLoggerFacade");    CmdLineSettings settings=new CmdLineSettings();    CmdLineParser parser=new CmdLineParser(settings);    try {      parser.parseArgument(args);    } catch (    CmdLineException e) {      parser.printUsage(System.out);      System.exit(1);    }    FloodlightModuleLoader fml=new FloodlightModuleLoader();    try {      IFloodlightModuleContext moduleContext=fml.loadModulesFromConfig(settings.getModuleFile());      IRestApiService restApi=moduleContext.getServiceImpl(IRestApiService.class);      restApi.run();    } catch (    FloodlightModuleConfigFileNotFoundException e) {      logger.error("Could not read config file: {}",e.getMessage());      System.exit(1);    }    try {      fml.runModules();    } catch (    FloodlightModuleException e) {      logger.error("Failed to run controller modules",e);      System.exit(1);    }  } catch (  Exception e) {    logger.error("Exception in main",e);    System.exit(1);  }}  }
class C{  public boolean addFile(String fileName){  return addToListInternal(analysisTargets,makeAbsoluteCWD(fileName));}  }
class C{  public static void delete(File folder){  if (folder.isDirectory()) {    File[] contents=folder.listFiles();    for (    File file : contents) {      FileUtils.delete(file);    }    folder.delete();  } else {    folder.delete();  }}  }
class C{  public boolean hasInterestedBytes(int nextPieces){  for (int i=0; i < 5 + nextPieces; i++) {    int index=interestedPieceIndex + i;    if (hasPieces.length <= index || index < 0) {      continue;    }    if (!hasPieces[interestedPieceIndex + i]) {      return false;    }  }  return true;}  }
class C{  private void updateCurrentPlaybackInformation(){  PlaylistItemChange<MediaItem> itemChange=playlistManager.getCurrentItemChange();  if (itemChange != null) {    onPlaylistItemChanged(itemChange.getCurrentItem(),itemChange.hasNext(),itemChange.hasPrevious());  }  PlaylistServiceCore.PlaybackState currentPlaybackState=playlistManager.getCurrentPlaybackState();  if (currentPlaybackState != PlaylistServiceCore.PlaybackState.STOPPED) {    onPlaybackStateChanged(currentPlaybackState);  }  MediaProgress mediaProgress=playlistManager.getCurrentProgress();  if (mediaProgress != null) {    onProgressUpdated(mediaProgress);  }}  }
class C{  private UnManagedVolume createUnManagedVolume(String unManagedVolumeNativeGuid,LogicalUnit logicalUnit,StorageSystem system,StoragePool pool,DbClient dbClient){  UnManagedVolume newUnManagedVolume=new UnManagedVolume();  newUnManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));  newUnManagedVolume.setNativeGuid(unManagedVolumeNativeGuid);  newUnManagedVolume.setStorageSystemUri(system.getId());  newUnManagedVolume.setStoragePoolUri(pool.getId());  updateUnManagedVolumeInfo(logicalUnit,system,pool,newUnManagedVolume,dbClient);  return newUnManagedVolume;}  }
class C{  public BoundedHashMap(){  this(DEFAULT_CAPACITY);}  }
class C{  public void test_DELETE_accessPath_delete_o_URI() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,null,new URIImpl("http://xmlns.com/foaf/0.1/Person"));  assertEquals(3,mutationResult);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CombinedDomainCategoryPlot result=(CombinedDomainCategoryPlot)super.clone();  result.subplots=(List)ObjectUtilities.deepClone(this.subplots);  for (Iterator it=result.subplots.iterator(); it.hasNext(); ) {    Plot child=(Plot)it.next();    child.setParent(result);  }  return result;}  }
class C{  private void tql2(){  for (int i=1; i < n; i++) {    e[i - 1]=e[i];  }  e[n - 1]=0.0;  double f=0.0;  double tst1=0.0;  double eps=pow(2.0,-52.0);  for (int l=0; l < n; l++) {    tst1=max(tst1,abs(d[l]) + abs(e[l]));    int m=l;    while (m < n) {      if (abs(e[m]) <= eps * tst1) {        break;      }      m++;    }    if (m > l) {      int iter=0;      do {        iter=iter + 1;        double g=d[l];        double p=(d[l + 1] - g) / (2.0 * e[l]);        double r=hypot(p,1.0);        if (p < 0) {          r=-r;        }        d[l]=e[l] / (p + r);        d[l + 1]=e[l] * (p + r);        double dl1=d[l + 1];        double h=g - d[l];        for (int i=l + 2; i < n; i++) {          d[i]-=h;        }        f=f + h;        p=d[m];        double c=1.0;        double c2=c;        double c3=c;        double el1=e[l + 1];        double s=0.0;        double s2=0.0;        for (int i=m - 1; i >= l; i--) {          c3=c2;          c2=c;          s2=s;          g=c * e[i];          h=c * p;          r=hypot(p,e[i]);          e[i + 1]=s * r;          s=e[i] / r;          c=p / r;          p=c * d[i] - s * g;          d[i + 1]=h + s * (c * g + s * d[i]);          columnOpTransform(V,0,n - 1,i,c,s,1);        }        p=-s * s2 * c3* el1* e[l] / dl1;        e[l]=s * p;        d[l]=c * p;      } while (abs(e[l]) > eps * tst1);    }    d[l]=d[l] + f;    e[l]=0.0;  }  for (int i=0; i < n - 1; i++) {    int k=i;    double p=d[i];    for (int j=i + 1; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    if (k != i) {      d[k]=d[i];      d[i]=p;      RowColumnOps.swapCol(V,i,k);    }  }}  }
class C{  public static String processDiff(diff_match_patch.Diff diff,LinkedList<Integer> lineNums,LinkedList<String> lines,String line,int i,String begSpan,boolean forceOutputLine){  String endSpan="</span>";  String br="&nbsp;";  if (diff.text.endsWith("\n") || forceOutputLine) {    lineNums.add(i);    line+=begSpan + diff.text.replace("  ","&nbsp;&nbsp;") + endSpan+ br;    lines.add(line);    line="";  } else {    line+=begSpan + diff.text.replace("  ","&nbsp;&nbsp;") + endSpan;  }  return line;}  }
class C{  public void toggleEqualizer(){  if (isEqualizerEnabled()) {    getSharedPreferences().edit().putBoolean("EQUALIZER_ENABLED",true).commit();    if (isServiceRunning()) {      try {        getService().getEqualizerHelper().getEqualizer().setEnabled(false);        getService().getEqualizerHelper().getEqualizer2().setEnabled(false);      } catch (      Exception e) {        e.printStackTrace();      }    }  } else {    getSharedPreferences().edit().putBoolean("EQUALIZER_ENABLED",true).commit();    if (isServiceRunning()) {      try {        getService().getEqualizerHelper().getEqualizer().setEnabled(true);        getService().getEqualizerHelper().getEqualizer2().setEnabled(true);      } catch (      Exception e) {        e.printStackTrace();      }    }  }  if (isServiceRunning()) {    try {      getService().getEqualizerHelper().releaseEQObjects();      getService().initAudioFX();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  private void createCrawlDB(ArrayList<URLCrawlDatum> list) throws IOException, Exception {  dbDir=new Path(testdir,"crawldb");  segmentsDir=new Path(testdir,"segments");  fs.mkdirs(dbDir);  fs.mkdirs(segmentsDir);  CrawlDBTestUtil.createCrawlDb(conf,fs,dbDir,list);}  }
class C{  protected boolean existsProperty(final PropertyExpression pexp,final boolean readMode,final ClassCodeVisitorSupport visitor){  super.visitPropertyExpression(pexp);  String propertyName=pexp.getPropertyAsString();  if (propertyName == null)   return false;  Expression objectExpression=pexp.getObjectExpression();  final ClassNode objectExpressionType=getType(objectExpression);  boolean staticOnlyAccess=isClassClassNodeWrappingConcreteType(objectExpressionType);  if ("this".equals(propertyName) && staticOnlyAccess) {    ClassNode outerNode=objectExpressionType.getGenericsTypes()[0].getType();    List<ClassNode> candidates=typeCheckingContext.getEnclosingClassNodes();    ClassNode found=null;    for (    ClassNode current : candidates) {      if (!current.isStaticClass() && current instanceof InnerClassNode && outerNode.equals(current.getOuterClass())) {        found=current;        break;      }    }    if (found != null) {      storeType(pexp,outerNode);      return true;    }  }  if (objectExpressionType.isArray() && "length".equals(pexp.getPropertyAsString())) {    storeType(pexp,int_TYPE);    if (visitor != null) {      PropertyNode node=new PropertyNode("length",Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,int_TYPE,objectExpressionType,null,null,null);      visitor.visitProperty(node);    }    return true;  }  boolean foundGetterOrSetter=false;  List<Receiver<String>> receivers=new LinkedList<Receiver<String>>();  List<Receiver<String>> owners=makeOwnerList(objectExpression);  addReceivers(receivers,owners,pexp.isImplicitThis());  String capName=MetaClassHelper.capitalize(propertyName);  boolean isAttributeExpression=pexp instanceof AttributeExpression;  HashSet<ClassNode> handledNodes=new HashSet<ClassNode>();  for (  Receiver<String> receiver : receivers) {    ClassNode testClass=receiver.getType();    LinkedList<ClassNode> queue=new LinkedList<ClassNode>();    queue.add(testClass);    if (isPrimitiveType(testClass)) {      queue.add(getWrapper(testClass));    }    while (!queue.isEmpty()) {      ClassNode current=queue.removeFirst();      if (handledNodes.contains(current))       continue;      handledNodes.add(current);      Set<ClassNode> allInterfaces=current.getAllInterfaces();      for (      ClassNode intf : allInterfaces) {        queue.add(GenericsUtils.parameterizeType(current,intf));      }      boolean staticOnly;      if (isClassClassNodeWrappingConcreteType(current)) {        staticOnly=false;      } else {        staticOnly=staticOnlyAccess;      }      FieldNode field=current.getDeclaredField(propertyName);      field=allowStaticAccessToMember(field,staticOnly);      if (storeField(field,isAttributeExpression,pexp,current,visitor,receiver.getData(),!readMode))       return true;      boolean isThisExpression=objectExpression instanceof VariableExpression && ((VariableExpression)objectExpression).isThisExpression() && objectExpressionType.equals(current);      if (storeField(field,isThisExpression,pexp,receiver.getType(),visitor,receiver.getData(),!readMode))       return true;      MethodNode getter=current.getGetterMethod("get" + capName);      getter=allowStaticAccessToMember(getter,staticOnly);      if (getter == null)       getter=current.getGetterMethod("is" + capName);      getter=allowStaticAccessToMember(getter,staticOnly);      final String setterName="set" + capName;      List<MethodNode> setters=findSetters(current,setterName,false);      setters=allowStaticAccessToMember(setters,staticOnly);      if (visitor != null && getter != null)       visitor.visitMethod(getter);      PropertyNode propertyNode=current.getProperty(propertyName);      propertyNode=allowStaticAccessToMember(propertyNode,staticOnly);      boolean checkGetterOrSetter=!isThisExpression || propertyNode == null;      if (readMode && checkGetterOrSetter) {        if (getter != null) {          ClassNode cn=inferReturnTypeGenerics(current,getter,ArgumentListExpression.EMPTY_ARGUMENTS);          storeInferredTypeForPropertyExpression(pexp,cn);          pexp.removeNodeMetaData(StaticTypesMarker.READONLY_PROPERTY);          String delegationData=receiver.getData();          if (delegationData != null)           pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER,delegationData);          return true;        }      } else       if (!readMode && checkGetterOrSetter) {        if (!setters.isEmpty()) {          if (visitor != null) {            if (field != null) {              visitor.visitField(field);            } else {              for (              MethodNode setter : setters) {                ClassNode setterType=setter.getParameters()[0].getOriginType();                FieldNode virtual=new FieldNode(propertyName,0,setterType,current,EmptyExpression.INSTANCE);                visitor.visitField(virtual);              }            }          }          SetterInfo info=new SetterInfo(current,setterName,setters);          BinaryExpression enclosingBinaryExpression=typeCheckingContext.getEnclosingBinaryExpression();          if (enclosingBinaryExpression != null) {            putSetterInfo(enclosingBinaryExpression.getLeftExpression(),info);          }          String delegationData=receiver.getData();          if (delegationData != null) {            pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER,delegationData);          }          return true;        } else         if (getter != null && propertyNode == null) {          pexp.putNodeMetaData(StaticTypesMarker.READONLY_PROPERTY,true);        }      }      foundGetterOrSetter=foundGetterOrSetter || !setters.isEmpty() || getter != null;      if (storeProperty(propertyNode,pexp,current,visitor,receiver.getData()))       return true;      if (storeField(field,true,pexp,current,visitor,receiver.getData(),!readMode))       return true;      if (current.getSuperClass() != null) {        queue.add(current.getUnresolvedSuperClass());      }    }    List<ClassNode> dgmReceivers=new ArrayList<ClassNode>(2);    dgmReceivers.add(testClass);    if (isPrimitiveType(testClass))     dgmReceivers.add(getWrapper(testClass));    for (    ClassNode dgmReceiver : dgmReceivers) {      List<MethodNode> methods=findDGMMethodsByNameAndArguments(getTransformLoader(),dgmReceiver,"get" + capName,ClassNode.EMPTY_ARRAY);      for (      MethodNode m : findDGMMethodsByNameAndArguments(getTransformLoader(),dgmReceiver,"is" + capName,ClassNode.EMPTY_ARRAY)) {        if (Boolean_TYPE.equals(getWrapper(m.getReturnType())))         methods.add(m);      }      if (!methods.isEmpty()) {        List<MethodNode> methodNodes=chooseBestMethod(dgmReceiver,methods,ClassNode.EMPTY_ARRAY);        if (methodNodes.size() == 1) {          MethodNode getter=methodNodes.get(0);          if (visitor != null) {            visitor.visitMethod(getter);          }          ClassNode cn=inferReturnTypeGenerics(dgmReceiver,getter,ArgumentListExpression.EMPTY_ARGUMENTS);          storeInferredTypeForPropertyExpression(pexp,cn);          return true;        }      }    }  }  for (  Receiver<String> receiver : receivers) {    ClassNode testClass=receiver.getType();    ClassNode propertyType=getTypeForMapPropertyExpression(testClass,objectExpressionType,pexp);    if (propertyType == null)     propertyType=getTypeForListPropertyExpression(testClass,objectExpressionType,pexp);    if (propertyType == null)     propertyType=getTypeForSpreadExpression(testClass,objectExpressionType,pexp);    if (propertyType == null)     continue;    if (visitor != null) {      PropertyNode node=new PropertyNode(propertyName,Opcodes.ACC_PUBLIC,propertyType,receiver.getType(),null,null,null);      node.setDeclaringClass(receiver.getType());      visitor.visitProperty(node);    }    storeType(pexp,propertyType);    String delegationData=receiver.getData();    if (delegationData != null)     pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER,delegationData);    return true;  }  return foundGetterOrSetter;}  }
class C{  public RAMOutputStream(String name,RAMFile f,boolean checksum){  super("RAMOutputStream(name=\"" + name + "\")",name);  file=f;  currentBufferIndex=-1;  currentBuffer=null;  if (checksum) {    crc=new BufferedChecksum(new CRC32());  } else {    crc=null;  }}  }
class C{  protected Stencil(){}  }
class C{  private List recuperarElementos(String cadenaIterador,int tipoBusqueda,Map ids,String pattern){  ResultadoBusquedaGeograficos listaElementos=new ResultadoBusquedaGeograficos();  NodeIterator nodeIt=xml.getNodeIterator(cadenaIterador);  for (Node node=nodeIt.nextNode(); node != null; node=nodeIt.nextNode()) {    String name=XmlFacade.get(node,"@name");    if ((pattern == null) || (name.toUpperCase().indexOf(pattern.toUpperCase()) > -1)) {      ElementoGeograficoVO elemento=new ElementoGeograficoVO();      agregarElemento(tipoBusqueda,node,elemento);      listaElementos.addElemento(elemento);    }  }  return listaElementos.getElementos();}  }
class C{  Organization(int id,String name,String name2){  this.id=id;  this.name=name;  this.name2=name2;}  }
class C{  public boolean add(Object attrVal){  if (isOrdered() || (find(attrVal) < 0)) {    values.addElement(attrVal);    return true;  } else {    return false;  }}  }
class C{  public PackageNode(String display,String pkgname){  super(display);  this.pkgname=pkgname;}  }
class C{  private final byte[] le(int i){  buf[3]=(byte)(i >>> 24);  buf[2]=(byte)(i >> 16 & 0xff);  buf[1]=(byte)(i >> 8 & 0xff);  buf[0]=(byte)(i & 0xff);  return buf;}  }
class C{  public Bindings add(String property,JRadioButton[] cs){  registerPropertyChangeListener(cs);  return add(new JRadioButtonBinding(property,cs,0));}  }
class C{  public static BugReporter configureFilter(BugReporter bugReporter,String filterFileName,boolean include) throws IOException, FilterException {  Filter filter=new Filter(filterFileName);  return new FilterBugReporter(bugReporter,filter,include);}  }
class C{  static private String zeros(int n){  if (n < 1)   return "";  char[] buf=new char[n];  for (int i=0; i < n; i++) {    buf[i]='0';  }  return new String(buf);}  }
class C{  @Override public float tf(float freq){  return (float)Math.sqrt(freq);}  }
class C{  public Object toObject(){  return null;}  }
class C{  public ExtensionHandler launch() throws TransformerException {  ExtensionHandler handler=null;  try {    Class cl=ExtensionHandler.getClassForName(m_handlerClass);    Constructor con=null;    if (m_sig != null)     con=cl.getConstructor(m_sig); else {      Constructor[] cons=cl.getConstructors();      for (int i=0; i < cons.length; i++) {        if (cons[i].getParameterTypes().length == m_args.length) {          con=cons[i];          break;        }      }    }    if (con != null)     handler=(ExtensionHandler)con.newInstance(m_args); else     throw new TransformerException("ExtensionHandler constructor not found");  } catch (  Exception e) {    throw new TransformerException(e);  }  return handler;}  }
class C{  public RectCompat(Rect r){  if (r == null) {    left=top=right=bottom=0;  } else {    left=r.left;    top=r.top;    right=r.right;    bottom=r.bottom;  }}  }
class C{  @OnMessage public void onMessage(String message,Session session){  callInternal("onMessage",session,message);}  }
class C{  private static void skipShortTermRefPicSets(ParsableBitArray bitArray){  int numShortTermRefPicSets=bitArray.readUnsignedExpGolombCodedInt();  boolean interRefPicSetPredictionFlag=false;  int numNegativePics=0;  int numPositivePics=0;  int previousNumDeltaPocs=0;  for (int stRpsIdx=0; stRpsIdx < numShortTermRefPicSets; stRpsIdx++) {    if (stRpsIdx != 0) {      interRefPicSetPredictionFlag=bitArray.readBit();    }    if (interRefPicSetPredictionFlag) {      bitArray.skipBits(1);      bitArray.readUnsignedExpGolombCodedInt();      for (int j=0; j <= previousNumDeltaPocs; j++) {        if (bitArray.readBit()) {          bitArray.skipBits(1);        }      }    } else {      numNegativePics=bitArray.readUnsignedExpGolombCodedInt();      numPositivePics=bitArray.readUnsignedExpGolombCodedInt();      previousNumDeltaPocs=numNegativePics + numPositivePics;      for (int i=0; i < numNegativePics; i++) {        bitArray.readUnsignedExpGolombCodedInt();        bitArray.skipBits(1);      }      for (int i=0; i < numPositivePics; i++) {        bitArray.readUnsignedExpGolombCodedInt();        bitArray.skipBits(1);      }    }  }}  }
class C{  protected static void postProcessForestFire(IHex[] hexSet,int modifier){  int n;  IHex field;  int level, newlevel;  int severity;  ITerrainFactory f=Terrains.getTerrainFactory();  for (n=0; n < hexSet.length; n++) {    field=hexSet[n];    level=field.terrainLevel(Terrains.WOODS);    if (level != ITerrain.LEVEL_NONE) {      severity=Compute.randomInt(5) - 2 + modifier;      newlevel=level - severity;      if (newlevel <= level) {        field.removeTerrain(Terrains.WOODS);        if (newlevel <= 0) {          field.addTerrain(f.createTerrain(Terrains.ROUGH,1));        } else {          field.addTerrain(f.createTerrain(Terrains.WOODS,newlevel));          field.addTerrain(f.createTerrain(Terrains.FIRE,1));        }      }    }  }}  }
class C{  private boolean reset(PooledConnection conn){  try {    conn.reset();    conn.sync();    return true;  } catch (  Throwable e) {    return false;  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void printCompilation(JavaMethod method){  begin("compilation");  out.print("name \" ").print(method.format("%H::%n")).println('"');  out.print("method \"").print(method.format("%f %r %H.%n(%p)")).println('"');  out.print("date ").println(System.currentTimeMillis());  end("compilation");}  }
class C{  public CalendarQuery(URL feedUrl){  super(feedUrl);}  }
class C{  @Override public boolean isCellEditable(int row,int column){  return false;}  }
class C{  public IndexInfo(String indexName,String regionPath){  this.indexName=indexName;  this.regionPath=regionPath;}  }
class C{  byte readByte(){  byte ret=pkt.data[inCursor];  inCursor+=1;  return ret;}  }
class C{  private void refreshBuffer() throws IOException {  if (output == null) {    throw new OutOfSpaceException();  }  output.write(buffer,0,position);  position=0;}  }
class C{  @Override public void drawElement(Graphics sc,IMultiPoint o){  IMultiPoint p=(IMultiPoint)o;  double x=p.getCoordinate(1);  double y=getHeight() - p.getCoordinate(2);  if (p instanceof SelectableMultiPoint) {    SelectableMultiPoint smp=(SelectableMultiPoint)p;    if (smp.isSelected()) {      if (smp.getMark() > 0) {        sc.setColor(Color.green);      } else {        sc.setColor(Color.red);      }    } else {      sc.setColor(Color.white);    }  } else {    sc.setColor(Color.white);  }  sc.fillOval((int)x - 4,(int)y - 4,8,8);  sc.setColor(Color.black);  sc.drawOval((int)x - 4,(int)y - 4,8,8);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  NodeList genList;  Node gen;  NodeList gList;  int nodeType;  Element genElement;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  genList=gender.getChildNodes();  gen=genList.item(0);  assertNotNull("genNotNull",gen);  nodeType=(int)gen.getNodeType();  if (equals(1,nodeType)) {    gen=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",gen);  }  gList=gen.getChildNodes();  genElement=(Element)gList.item(0);  assertNotNull("genElementNotNull",genElement);{    boolean success=false;    try {      genElement.removeAttribute("domestic");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static Resources open(String resource,int dpi) throws IOException {  try {    if (resource.equals(Resources.systemResourceLocation) && systemResource != null) {      return systemResource;    }    if (lastLoadedName != null && lastLoadedName.equals(resource) && lastLoadedDPI == dpi) {      Resources r=(Resources)Display.getInstance().extractHardRef(cachedResource);      if (r != null) {        return r;      }    }    InputStream is=Display.getInstance().getResourceAsStream(classLoader,resource);    if (is == null) {      throw new IOException(resource + " not found");    }    Resources r=new Resources(is,dpi);    is.close();    if (resource.equals(Resources.systemResourceLocation)) {      systemResource=r;      return r;    }    lastLoadedDPI=dpi;    lastLoadedName=resource;    cachedResource=Display.getInstance().createSoftWeakRef(r);    return r;  } catch (  RuntimeException err) {    err.printStackTrace();    throw new IOException(err.getMessage());  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public JavaModelStatus(int severity,int code,String string){  super(severity,JavaCore.PLUGIN_ID,code,"JavaModelStatus",null);  this.elements=JavaElement.NO_ELEMENTS;  this.path=null;  this.string=string;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public int intValue(){  return value;}  }
class C{  public String doNotOperateOnPerClassBasisTipText(){  return "If this is set, the maximum number of words and the " + "minimum term frequency is not enforced on a per-class " + "basis but based on the documents in all the classes "+ "(even if a class attribute is set).";}  }
class C{  @Override public void process(final DM dm,ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"TXRemoteCommitReply process invoking reply processor with processorId:{}",this.processorId);  }  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"TXRemoteCommitReply processor not found");    }    return;  }  processor.process(this);}  }
class C{  private void jbInit(){  panel.setLayout(mainLayout);  panel.setPreferredSize(new Dimension(640,480));  labelProduct.setText(Msg.getElement(getCtx(),"M_Product_ID"));  implosion.setText(Msg.getElement(getCtx(),"Implosion"));  northPanel.setLayout(northLayout);  northLayout.setAlignment(FlowLayout.LEFT);  panel.add(northPanel,BorderLayout.NORTH);  northPanel.add(labelProduct,null);  northPanel.add(fieldProduct,null);  labelLevel.setText(Msg.translate(Env.getCtx(),"LevelNo"));  northPanel.add(labelLevel,null);  northPanel.add(fieldLevel,null);  northPanel.add(implosion,null);  northPanel.add(treeInfo,null);  panel.add(southPanel,BorderLayout.SOUTH);  southPanel.setLayout(southLayout);  confirmPanel.addActionListener(this);  southPanel.add(confirmPanel,BorderLayout.SOUTH);  panel.add(splitPane,BorderLayout.CENTER);  splitPane.setDividerLocation(DIVIDER_LOCATION);}  }
class C{  public void trace(String msg,Object arg0){  innerLog(Level.TRACE,null,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.410 -0500",hash_original_method="979A867C88CED149A8B0CC0C806AA09A",hash_generated_method="37BDC297138C5562FDE593E32F4BDB8E") public static byte[] asUnsignedByteArray(BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes[0] == 0) {    byte[] tmp=new byte[bytes.length - 1];    System.arraycopy(bytes,1,tmp,0,tmp.length);    return tmp;  }  return bytes;}  }
class C{  private void drawPaths(){  boolean[] hasMoved=new boolean[series.length];  for (int i=0; i < chartData.size(); i++) {    double[] dataPoint=chartData.get(i);    for (int j=0; j < series.length; j++) {      double value=dataPoint[j + 1];      if (Double.isNaN(value)) {        continue;      }      ChartValueSeries chartValueSeries=series[j];      Path path=chartValueSeries.getPath();      int x=getX(dataPoint[0]);      int y=getY(chartValueSeries,value);      if (!hasMoved[j]) {        hasMoved[j]=true;        path.moveTo(x,y);      } else {        path.lineTo(x,y);      }    }  }}  }
class C{  public boolean hasBeenExpanded(){  return hasBeenExpanded;}  }
class C{  public Number memToPhys(long value){  float result=((float)(value + offset) * factor / divider + offsetPhys);  if (limits != null) {    result=(Float)limits.limitedValue(result);  }  return result;}  }
class C{  public synchronized boolean remove(T item){  int pos=getPos(item);  if (pos < 0)   return false;  int oldLength=array.length;  int newLength=oldLength - 1;  T newArray[]=createArray(newLength);  if (pos > 0)   System.arraycopy(array,0,newArray,0,pos);  if (pos < newLength)   System.arraycopy(array,pos + 1,newArray,pos,newLength - pos);  array=newArray;  return true;}  }
class C{  public static final int random(final int pMax){  return MathUtils.RANDOM.nextInt(pMax);}  }
class C{  public GetRequestMessage(GetRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }}  }
class C{  public void print(PrintWriter output,int w,int d){  DecimalFormat format=new DecimalFormat();  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  format.setMinimumIntegerDigits(1);  format.setMaximumFractionDigits(d);  format.setMinimumFractionDigits(d);  format.setGroupingUsed(false);  print(output,format,w + 2);}  }
class C{  public final boolean isFirstOrDisposed(){  if (disposed) {    return true;  }  return this == getFirstWithContext() || disposed;}  }
class C{  protected void redrawSquares(boolean forceUpdate){  if (decorators == null) {    return;  }  for (int i=0; i < decorators.length; i++) {    if (!decorators[i].highlights.isEmpty()) {      if (forceUpdate) {        decorators[i].square.redraw();      } else {        decorators[i].square.setDirty(true);      }    }  }  for (int i=0; i < dropSquareDecorators.length; i++) {    if (dropSquareDecorators[i] != null && !dropSquareDecorators[i].highlights.isEmpty()) {      if (forceUpdate) {        dropSquareDecorators[i].square.redraw();      } else {        dropSquareDecorators[i].square.setDirty(true);      }    }  }}  }
class C{  public static String makeMarginTransform(double owidth,double oheight,double iwidth,double iheight,double margin){  return makeMarginTransform(owidth,oheight,iwidth,iheight,margin,margin,margin,margin);}  }
class C{  public HttpPut(String path,ParameterMap params){  super(path,null);  this.httpMethod=HttpMethod.PUT;  this.path=path;  this.contentType=URLENCODED;  if (params != null) {    this.content=params.urlEncodedBytes();  }}  }
class C{  protected String a(String s,int v,String u) throws Exception {  Date d=parser.parse(s);  Calendar c=Calendar.getInstance(UTC,Locale.ROOT);  c.setTime(d);  DateMathParser.add(c,v,u);  return fmt.format(c.getTime());}  }
class C{  @Override protected void initListeners(){  this.mGetOne.setOnClickListener(this);  this.mGetTwo.setOnClickListener(this);  this.mGetThree.setOnClickListener(this);  this.mClearRemoveInfo.setOnClickListener(this);  this.mPutFour.setOnClickListener(this);}  }
class C{  public ProcessBuilder command(List<String> command){  if (command == null) {    throw new NullPointerException("command == null");  }  this.command=command;  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void stopMousePropagation(Element element){  element.addEventListener(Event.MOUSEDOWN,STOP_PROPAGATION_EVENT_LISTENER,false);  element.addEventListener(Event.MOUSEMOVE,STOP_PROPAGATION_EVENT_LISTENER,false);  element.addEventListener(Event.MOUSEUP,STOP_PROPAGATION_EVENT_LISTENER,false);  element.addEventListener(Event.CLICK,STOP_PROPAGATION_EVENT_LISTENER,false);  element.addEventListener(Event.DBLCLICK,STOP_PROPAGATION_EVENT_LISTENER,false);}  }
class C{  public FunctionInvocationTargetException(String msg,DistributedMember id){  super(msg);  this.id=id;}  }
class C{  public boolean parseXmlResource(File file){  Reader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    return parseXmlResource(file.getPath(),new InputSource(reader));  } catch (  FileNotFoundException e) {    logger.warning("Failed to open " + file + ":"+ e.getMessage());    return false;  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public Node nextNode() throws DOMException {  if ((m_next) < this.size()) {    Node next=this.elementAt(m_next);    m_next++;    return next;  } else   return null;}  }
class C{  private static void doSort(short[] a,int left,int right,short[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        short t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  short[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new short[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    short[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  public int indexOf(Object elem){  return delegate.indexOf(elem);}  }
class C{  public void ignorableWhitespace(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {}  }
class C{  protected void fireGraphEvent(Table t,int first,int last,int col,int type){  if (type == EventConstants.UPDATE && col == VisualItem.IDX_VALIDATED && t == getNodeTable()) {    VisualTable nodes=(VisualTable)t;    VisualTable edges=(VisualTable)getEdgeTable();    for (int i=first; i <= last; ++i) {      if (nodes.isValidated(i))       continue;      if (i < 0) {        System.err.println("catch me - VisualGraph fireGraphEvent");      }      IntIterator erows=edgeRows(i);      while (erows.hasNext()) {        int erow=erows.nextInt();        edges.setValidated(erow,false);      }    }  }  super.fireGraphEvent(t,first,last,col,type);}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.TYPE_REF_ANNOTATION_ARGUMENT___VALUE:    return value();}return super.eInvoke(operationID,arguments);}  }
class C{  private static Class<?>[] filterSpecifiedTests(final Class<?>[] allTests){  if (null == allTests)   return null;  Class<?>[] filteredTests;  final String override=System.getenv().getOrDefault("GREMLIN_TESTS","");  if (override.equals(""))   filteredTests=allTests; else {    final List<String> filters=Arrays.asList(override.split(","));    final List<Class<?>> allowed=Stream.of(allTests).filter(null).collect(Collectors.toList());    filteredTests=allowed.toArray(new Class<?>[allowed.size()]);  }  return filteredTests;}  }
class C{  static private void orderNamedSubqueries(final QueryRoot queryRoot,final NamedSubqueriesNode namedSubqueries){  final Map<String,NamedSubqueryRoot> nameToSubquery=new LinkedHashMap<String,NamedSubqueryRoot>();{    for (    NamedSubqueryRoot aNamedSubquery : namedSubqueries) {      nameToSubquery.put(aNamedSubquery.getName(),aNamedSubquery);    }  }  final Map<NamedSubqueryRoot,List<String>> subqueryToIncludes=new LinkedHashMap<NamedSubqueryRoot,List<String>>();{    for (    NamedSubqueryRoot aNamedSubquery : namedSubqueries) {      final List<String> includes=new LinkedList<String>();      final List<String> includesNamedSubqueries=new LinkedList<String>();      subqueryToIncludes.put(aNamedSubquery,includesNamedSubqueries);      for (      NamedSubqueryInclude include : findSubqueryIncludes(aNamedSubquery)) {        String name=include.getName();        includes.add(name);        if (nameToSubquery.containsKey(name)) {          includesNamedSubqueries.add(name);        }      }      aNamedSubquery.setDependsOn(includes.toArray(new String[0]));    }  }{    final Set<String> processed=new HashSet<String>();    final NamedSubqueriesNode newNode=new NamedSubqueriesNode();    Iterator<Map.Entry<NamedSubqueryRoot,List<String>>> iter=subqueryToIncludes.entrySet().iterator();    while (iter.hasNext()) {      final Map.Entry<NamedSubqueryRoot,List<String>> entry=iter.next();      final NamedSubqueryRoot namedSubquery=entry.getKey();      if (entry.getValue().size() == 0) {        newNode.add(namedSubquery);        processed.add(namedSubquery.getName());        iter.remove();      }    }    while (subqueryToIncludes.size() > 0) {      iter=subqueryToIncludes.entrySet().iterator();      while (iter.hasNext()) {        boolean ok=true;        final Map.Entry<NamedSubqueryRoot,List<String>> entry=iter.next();        for (        String dep : entry.getValue()) {          if (!processed.contains(dep)) {            ok=false;            break;          }        }        if (ok) {          newNode.add(entry.getKey());          processed.add(entry.getKey().getName());          iter.remove();        }      }    }    queryRoot.setNamedSubqueries(newNode);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      arcFile=whiteboxHeaderFile.replace(".dep",".txt");      (new File(arcFile)).delete();      fw=new FileWriter(arcFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="NCOLS         " + String.valueOf(wbr.getNumberColumns());      out.println(str1);      str1="NROWS         " + String.valueOf(wbr.getNumberRows());      out.println(str1);      str1="XLLCORNER     " + String.valueOf(wbr.getWest());      out.println(str1);      str1="YLLCORNER     " + String.valueOf(wbr.getSouth());      out.println(str1);      str1="CELLSIZE      " + String.valueOf((wbr.getCellSizeX() + wbr.getCellSizeY()) / 2);      out.println(str1);      str1="NODATA_VALUE  -9999";      out.println(str1);      double[] data;      String line;      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void optimize(final AST2BOpContext ctx,final StaticAnalysis sa,final GraphPatternGroup<? extends IGroupMemberNode> group,final PropertyPathInfo ppInfo,final TermNode termNode,final PropertyPathNode ppNode){  final StatementPatternNode sp=ppInfo.toStatementPattern(termNode);  group.addArg(getPositionOfNodeInGroup(ppNode,group),sp);}  }
class C{  private Comparable[] generateKeys(int count,String prefix){  Comparable[] result=new Comparable[count];  String name;  for (int i=0; i < count; i++) {    name=prefix + (i + 1);    result[i]=name;  }  return result;}  }
class C{  boolean parseParams(StatsField sf){  String percentileParas=sf.localParams.get(this.name());  if (percentileParas != null) {    List<Double> percentiles=new ArrayList<Double>();    try {      for (      String percentile : StrUtils.splitSmart(percentileParas,',')) {        percentiles.add(Double.parseDouble(percentile));      }      if (!percentiles.isEmpty()) {        sf.percentilesList.addAll(percentiles);        sf.tdigestCompression=sf.localParams.getDouble("tdigestCompression",sf.tdigestCompression);        return true;      }    } catch (    NumberFormatException e) {      throw new SolrException(ErrorCode.BAD_REQUEST,"Unable to parse " + StatsParams.STATS_FIELD + " local params: "+ sf.localParams+ " due to: "+ e.getMessage(),e);    }  }  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (queued_1: ");  result.append(queued_1);  result.append(", name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  public static List<PlatformUser> createTestData(DataService mgr,Organization org,int numberOfUsers) throws NonUniqueBusinessKeyException {  List<PlatformUser> users=new ArrayList<PlatformUser>();  for (int i=0; i < numberOfUsers; i++) {    String userId="TestUser_" + i;    PlatformUser user=findUser(mgr,userId,org);    if (user == null) {      user=createUser(mgr,userId,org);    }    users.add(user);  }  return users;}  }
class C{  public ServiceCall<String> convertDocumentToHTML(File document,String mediaType){  Request request=createConversionRequest(document,mediaType,ConversionTarget.NORMALIZED_HTML,null);  return createServiceCall(request,ResponseConverterUtils.getString());}  }
class C{  public void init(){  initOriginEnd();  setSlicing();  initDarkLines();  initDarkLabels();  if (gridVisible) {    setLightLines();    setLightLabels();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.454 -0500",hash_original_method="1AACB26B1B60F01C9870DFA873D76FD4",hash_generated_method="01EBA9E48F7F3BEF49501179D80AE37E") public void unregisterNotifHandler(){  super.unregisterNotifHandler();}  }
class C{  public void removeSection(IDialogSettings section){  if (sections.get(section.getName()) == section) {    sections.remove(section.getName());  }}  }
class C{  public static final double atan2(double b,double a){  return ieee754_atan2(a,b);}  }
class C{  @Override public void Bl(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.Bl()");  }  javascript.execute(formObj,PdfDictionary.Bl,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  public void performPreread(final List<File> files) throws IOException {  final SequencesWriter writer;  formattingMessage(mInputFormat.isPairedSam());  final SequenceDataSource ds;  if (mProtein) {    if (mInputFormat != InputFormat.FASTA) {      throw new BadFormatCombinationException("Incompatible sequence type and file format. format=" + mInputFormat + " protein="+ mProtein);    }    ds=new FastaSequenceDataSource(files,new ProteinFastaSymbolTable(),true,null);    ds.setDusting(mDusting);    writer=new SequencesWriter(ds,mOutDir,Constants.MAX_FILE_SIZE,mNamesToExclude,IndexFile.typeFromFormat(mInputFormat),mCompressed,mReadTrimQualityThreshold);  } else {    ds=getDnaDataSource(files,mInputFormat,null,mMappedSam,false,mSamReadGroup,mDedupSecondary);    ds.setDusting(mDusting);    if (mInputFormat.isPairedSam()) {      writer=new AlternatingSequencesWriter(ds,mOutDir,Constants.MAX_FILE_SIZE,mNamesToExclude,IndexFile.typeFromFormat(mInputFormat),mCompressed,mReadTrimQualityThreshold);    } else {      writer=new SequencesWriter(ds,mOutDir,Constants.MAX_FILE_SIZE,mNamesToExclude,IndexFile.typeFromFormat(mInputFormat),mCompressed,mReadTrimQualityThreshold);    }  }  writer.setReadGroup(mReadGroupRecord == null ? null : mReadGroupRecord.toString());  writer.processSequences(mIncludeQuality,mIncludeNames);  final Counts inputCounts=new Counts(writer.getNumberOfSequences() + writer.getNumberOfExcludedSequences(),writer.getTotalLength() + writer.getExcludedResidueCount(),ds.getMaxLength(),ds.getMinLength());  final Counts outputCounts=new Counts(writer.getNumberOfSequences(),writer.getTotalLength(),writer.getMaxLength(),writer.getMinLength());  mNumSequences=mInputFormat.isPairedSam() ? writer.getNumberOfSequences() / 2 : writer.getNumberOfSequences();  writeStats(files.toArray(new File[files.size()]),mInputFormat.isPairedSam(),inputCounts,outputCounts,writer.getSdfId(),ds.getDusted());  checkAndInstallReferenceDescription();}  }
class C{  public int numberOfShardsWithState(ShardRoutingState... states){  int count=0;  for (  ShardRouting shardEntry : this) {    for (    ShardRoutingState state : states) {      if (shardEntry.state() == state) {        count++;      }    }  }  return count;}  }
class C{  public void testSocket_BasicStatusBeforeConnect() throws SocketException {  assertFalse(this.channel1.isConnected());  DatagramSocket s1=this.channel1.socket();  assertSocketBeforeConnect(s1);  DatagramSocket s2=this.channel1.socket();  assertSame(s1,s2);}  }
class C{  public AbstractMRMessage createInitPacket(){  return null;}  }
class C{  public static int binarySearch(short[] array,int startIndex,int endIndex,short value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  private int calculateNewCapacity(){  int oldCapacity=queue.length;  int newCapacity=(oldCapacity < 64) ? (oldCapacity + 1) * 2 : IntMath.checkedMultiply(oldCapacity / 2,3);  return capAtMaximumSize(newCapacity,maximumSize);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.STATE_SWITCH__CASES:    return ((InternalEList<?>)getCases()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private Point computeIconPosition(Graphics g){  FontMetrics fontMetrics=g.getFontMetrics();  Rectangle viewR=new Rectangle();  Rectangle textR=new Rectangle();  Rectangle iconR=new Rectangle();  Insets i=getInsets();  viewR.x=i.left;  viewR.y=i.top;  viewR.width=getWidth() - (i.left + i.right);  viewR.height=getHeight() - (i.top + i.bottom);  SwingUtilities.layoutCompoundLabel(this,fontMetrics,getText(),sortArrow,getVerticalAlignment(),getHorizontalAlignment(),getVerticalTextPosition(),getHorizontalTextPosition(),viewR,iconR,textR,getIconTextGap());  int x=getComponentOrientation().isLeftToRight() ? getWidth() - i.right - sortArrow.getIconWidth() : i.left;  int y=iconR.y;  return new Point(x,y);}  }
class C{  public void persistCounts(){  for (  String type : entityAddedCounts.keySet()) {    metrics.getCounter(type + "-added").inc(entityAddedCounts.get(type));  }  entityAddedCounts.clear();  for (  String type : entityRemovedCounts.keySet()) {    metrics.getCounter(type + "-removed").inc(entityRemovedCounts.get(type));  }  entityRemovedCounts.clear();}  }
class C{  private void validateAssertion() throws Exception {  logger.info("Validating assertion..");  List<Assertion> assertions=this.opensamlResponse.getAssertions();  Validate.notEmpty(assertions,"assertions");  Assertion assertion=assertions.get(0);  Validate.notNull(assertion,"assertion");  String checkAlg=this.getRequest().getParameter(SamlUtils.SIGNATURE_ALGORITHM_PARAMETER);  X509Certificate cert=null;  try {    cert=SamlUtils.getIDPCertByIssuer(this.controller.getMetadataSettings(),this.getIssuerVal());  } catch (  Exception e) {    logger.error("Can't find IDP certificate with IDP: " + this.getIssuerVal());    this.setValidationResult(new ValidationResult(HttpServletResponse.SC_FORBIDDEN,Error.BAD_RESPONSE,null));    throw e;  }  SamlUtils samlUtils=new SamlUtils(cert,null,null,checkAlg,null);  boolean isResponseSigned=false;  try {    isResponseSigned=samlUtils.validateRequestSignature(this.getRequest(),false);  } catch (  Exception error) {    logger.info("Invalid Response signature");    if (this.getValidationResult().isValid()) {      this.setValidationResult(new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,Error.BAD_REQUEST,Error.SIGNATURE));    }    throw error;  }  MessageData messageData=this.parseAssertion(assertion,isResponseSigned);  this.setMessageData(messageData);  this.setSessionIndex(((AuthnData)messageData).getSessionIndex());  logger.info("Successfully validated SSO Assertion");}  }
class C{  private Map<String,String> projectParameters(){  Map<String,String> parameters=dataObject.getSource().getParameters();  if (parameters == null) {    parameters=new HashMap<>();    dataObject.getSource().setParameters(parameters);  }  return parameters;}  }
class C{  @Override public boolean conditionOk(Example example){  if (Double.isNaN(example.getValue(example.getAttributes().getLabel()))) {    return false;  } else {    return true;  }}  }
class C{  private ArrayList<Neuron> initializeLayer(NeuronUpdateRule nodeType,int nodes){  ArrayList<Neuron> layer=new ArrayList<Neuron>(nodes);  for (int i=0; i < nodes; i++) {    Neuron node=new Neuron(getParentNetwork(),nodeType);    nodeType.setIncrement(1);    layer.add(node);  }  return layer;}  }
class C{  public CUstream(){}  }
class C{  public TokenScanner(IScanner scanner,Document document){  fScanner=scanner;  fEndPosition=fScanner.getSource().length - 1;  fDocument=document;}  }
class C{  public static Map<String,Object> resetGrandTotal(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  GenericValue orderHeader=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    String errMsg="ERROR: Could not set grantTotal on OrderHeader entity: " + e.toString();    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  if (orderHeader != null) {    OrderReadHelper orh=new OrderReadHelper(orderHeader);    BigDecimal currentTotal=orderHeader.getBigDecimal("grandTotal");    BigDecimal currentSubTotal=orderHeader.getBigDecimal("remainingSubTotal");    BigDecimal updatedTotal=orh.getOrderGrandTotal();    String productStoreId=orderHeader.getString("productStoreId");    String showPricesWithVatTax=null;    if (UtilValidate.isNotEmpty(productStoreId)) {      GenericValue productStore=null;      try {        productStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",productStoreId).cache().queryOne();      } catch (      GenericEntityException e) {        String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorCouldNotFindProductStoreWithID",UtilMisc.toMap("productStoreId",productStoreId),(Locale)context.get("locale")) + e.toString();        Debug.logError(e,errorMessage,module);        return ServiceUtil.returnError(errorMessage + e.getMessage() + ").");      }      showPricesWithVatTax=productStore.getString("showPricesWithVatTax");    }    BigDecimal remainingSubTotal=ZERO;    if (UtilValidate.isNotEmpty(productStoreId) && "Y".equalsIgnoreCase(showPricesWithVatTax)) {      remainingSubTotal=updatedTotal.subtract(orh.getOrderReturnedTotal()).subtract(orh.getShippingTotal());    } else {      remainingSubTotal=updatedTotal.subtract(orh.getOrderReturnedTotal()).subtract(orh.getOrderNonReturnedTaxAndShipping());    }    if (currentTotal == null || currentSubTotal == null || updatedTotal.compareTo(currentTotal) != 0 || remainingSubTotal.compareTo(currentSubTotal) != 0) {      orderHeader.set("grandTotal",updatedTotal);      orderHeader.set("remainingSubTotal",remainingSubTotal);      try {        orderHeader.store();      } catch (      GenericEntityException e) {        String errMsg="ERROR: Could not set grandTotal on OrderHeader entity: " + e.toString();        Debug.logError(e,errMsg,module);        return ServiceUtil.returnError(errMsg);      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  @Override public boolean equals(Object that){  if (this == that)   return true;  if (that == null || !(that instanceof CustomerEventData)) {    return false;  }  CustomerEventData compareTo=(CustomerEventData)that;  if (!equalsString(getActor(),compareTo.getActor())) {    return false;  }  if (!equalsString(getType(),compareTo.getType())) {    return false;  }  if (!equalsString(getEventidentifier(),compareTo.getEventidentifier())) {    return false;  }  if (!equalsString(getProductid(),compareTo.getProductid())) {    return false;  }  if (!equalsLong(getOccurrencetime(),compareTo.getOccurrencetime())) {    return false;  }  if (!equalsString(getFirstname(),compareTo.getFirstname())) {    return false;  }  if (!equalsString(getLastname(),compareTo.getLastname())) {    return false;  }  if (!equalsString(getSubscriptionid(),compareTo.getSubscriptionid())) {    return false;  }  if (!equalsString(null == getSubscriptiontkey() ? null : getSubscriptiontkey().toString(),null == compareTo.getSubscriptiontkey() ? null : compareTo.getSubscriptiontkey().toString())) {    return false;  }  return true;}  }
class C{  public static <T>T createService(Context aContext,Class<T> aServiceInterface){  return ServiceProxy.newInstance(aContext,aServiceInterface);}  }
class C{  public final boolean removeKeyId(final String keyId) throws ConfigurationException {  Iterator<String> signingKeys=config.getKeys();  String keyIdProperty=null;  while (signingKeys.hasNext()) {    String k=signingKeys.next();    if (config.getProperty(k).equals(keyId)) {      keyIdProperty=k;      break;    }  }  if (keyIdProperty != null) {    config.clearProperty(keyIdProperty);    config.save();    return true;  } else {    return false;  }}  }
class C{  public AttributeTable(String fileName) throws IOException {  this.signature=SIG_DBASE_III;  this.terminator1=0x0D;  this.fileName=fileName;  initialize();}  }
class C{  public void backfitData(Instances data) throws Exception {  double totalWeight=0;  double totalSumSquared=0;  double[] classProbs=new double[data.numClasses()];  for (int i=0; i < data.numInstances(); i++) {    Instance inst=data.instance(i);    if (data.classAttribute().isNominal()) {      classProbs[(int)inst.classValue()]+=inst.weight();      totalWeight+=inst.weight();    } else {      classProbs[0]+=inst.classValue() * inst.weight();      totalSumSquared+=inst.classValue() * inst.classValue() * inst.weight();      totalWeight+=inst.weight();    }  }  double trainVariance=0;  if (data.classAttribute().isNumeric()) {    trainVariance=RandomTree.singleVariance(classProbs[0],totalSumSquared,totalWeight) / totalWeight;    classProbs[0]/=totalWeight;  }  backfitData(data,classProbs,totalWeight);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public static BigDecimal calculateFee(Player player,int price){  BigDecimal fee=BigDecimal.valueOf(price);  fee=fee.multiply(BigDecimal.valueOf(TRADING_FEE_PERCENTAGE));  if (player.isBadBoy()) {    fee=fee.multiply(BigDecimal.valueOf(1 + TRADING_FEE_PLAYER_KILLER_PENALTY));  }  BigDecimal feeBonus=BigDecimal.ONE;  feeBonus=BigDecimal.valueOf(Math.exp(-player.getTradescore() / FEE_BONUS_CONSTANT));  fee=fee.multiply(feeBonus);  return fee.max(BigDecimal.ONE);}  }
class C{  public void debug(){  String sources="";  int numActive=0;  for (int i=0; i < maxSources; i++) {    if (pool[i].isActive) {      sources+=i + ",";      numActive++;    }  }  String info="active sources: " + numActive;  logger.info(info);  logger.info(sources);}  }
class C{  protected int valueToY(final int value){  return drawingRect.y2 - (valueMax == 0 ? 0 : drawingRect.dy * value / valueMax);}  }
class C{  public ActiveMQRAMessageProducer(final MessageProducer producer,final ActiveMQRASession session){  this.producer=producer;  this.session=session;  if (ActiveMQRAMessageProducer.trace) {    ActiveMQRALogger.LOGGER.trace("new ActiveMQMessageProducer " + this + " producer="+ producer+ " session="+ session);  }}  }
class C{  public DcwThematicIndex(String filename,boolean border,boolean vpf2407) throws FormatException {  this.filename=filename;  byteOrder=border;  reopen(0);  if (Debug.debugging("vpfserver")) {    System.out.println("DTI: opened the file " + filename);  }  try {    headerSize=inputFile.readInteger();    numberOfCodes=inputFile.readInteger();    numberOfRows=inputFile.readInteger();    typeOfIndex=inputFile.readChar();    fieldTypeOfIndex=inputFile.readChar();    numberOfDataElement=inputFile.readInteger();    dataTypeSpecifier=inputFile.readChar();    tableIndexed=trim(inputFile.readFixedLengthString(12)).toLowerCase();    columnIndexed=trim(inputFile.readFixedLengthString(25)).toLowerCase();    sorted=(inputFile.readChar() == 'S') && vpf2407;    inputFile.seek(60);    indexData=new IndexRecord[numberOfCodes];    if (Debug.debugging("vpfserver")) {      System.out.println("HeaderSize = " + headerSize);      System.out.println("Number of Codes = " + numberOfCodes);      System.out.println("Number of Rows = " + numberOfRows);      System.out.println("Type of Index = " + typeOfIndex);      System.out.println("Field Type of Index = " + fieldTypeOfIndex);      System.out.println("Number of Data Element = " + numberOfDataElement);      System.out.println("Data Type Specifier = " + dataTypeSpecifier);      System.out.println("Table Indexed  = " + tableIndexed);      System.out.println("Column Indexed = " + columnIndexed);      System.out.println("Sorted = " + sorted);    }    StringBuffer pr=new StringBuffer();    for (int i=0; i < numberOfCodes; i++) {      indexData[i]=new IndexRecord(readIndexField(fieldTypeOfIndex,numberOfDataElement),inputFile.readInteger(),inputFile.readInteger());      if (Debug.debugging("vpfserver")) {        pr=new StringBuffer("i = ").append(i);        pr.append("; val = ").append(indexData[i].index.toString());        pr.append("; offset = ").append(indexData[i].offset);        pr.append("; number of elts = ").append(indexData[i].numvals);        if (i < 40) {          System.out.println(pr.toString());        }      }    }    if (!sorted) {      Arrays.sort(indexData);    }    if (Debug.debugging("vpfserver") && (numberOfCodes > 40)) {      System.out.println(pr.toString());    }    Debug.message("vpfserver","*** Finished Header Read ***");    if (Debug.debugging("vpfserver")) {      if ((typeOfIndex == 'T') || (typeOfIndex == 'I')) {        Debug.output("Normal Inverted Index Format");      } else       if ((typeOfIndex == 'B') || (typeOfIndex == 'G')) {        Debug.output("Scary Bitmap Index Format");      } else {        throw new FormatException("Unidentified TMI format");      }      Object[] indexes=getValueIndexes();      for (int j=0; j < indexes.length; j++) {      }    }    close();  } catch (  EOFException e) {    throw new FormatException("Hit Premature EOF in thematic index");  }catch (  IOException i) {    throw new FormatException("Encountered IO Exception: " + i.getMessage());  }}  }
class C{  public vec3 negated(){  vec3 result=new vec3(-this.m[0],-this.m[1],-this.m[2]);  return result;}  }
class C{  private boolean skipBrackets(){  if (fToken == Symbols.TokenRBRACKET) {    nextToken();    if (fToken == Symbols.TokenLBRACKET) {      return true;    }  }  return false;}  }
class C{  protected void performSeek(int seekToTime){  if (seekListener == null || !seekListener.onSeekEnded(seekToTime)) {    internalListener.onSeekEnded(seekToTime);  }}  }
class C{  public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  try {    elemType=(SaxHandlerBase.ElementType)elementTypes.get(localName);    if (elemType == null) {      return;    }    if (elemType == gatheringElement) {      gatherMode=false;    }    if (gatherMode) {      gatherBuffer.add(new Object[]{elemType,null});    } else {      elemType.endElement();    }    if (!elems.isEmpty()) {      elemType=(SaxHandlerBase.ElementType)elems.remove(elems.size() - 1);    } else {      elemType=null;    }  } catch (  SAXException saxex) {    throw saxex;  }catch (  Exception ex) {    throw new SAXException(ex);  }}  }
class C{  public static void dumpObjectHeader(String prefix,ObjectReference object){  int gcWord=object.toAddress().loadInt(GC_OFFSET);  int statusWord=object.toAddress().loadInt(STATUS_OFFSET);  System.err.printf("%sObject %s[%d@%s]<%x,%x>%n",prefix,object,getId(object),Mutator.getSiteName(object),gcWord,statusWord);}  }
class C{  public boolean prev() throws java.sql.SQLException {synchronized (checkClosed().getConnectionMutex()) {    int rowIndex=this.rowData.getCurrentRowNumber();    if (this.thisRow != null) {      this.thisRow.closeOpenStreams();    }    boolean b=true;    if ((rowIndex - 1) >= 0) {      rowIndex--;      this.rowData.setCurrentRow(rowIndex);      this.thisRow=this.rowData.getAt(rowIndex);      b=true;    } else     if ((rowIndex - 1) == -1) {      rowIndex--;      this.rowData.setCurrentRow(rowIndex);      this.thisRow=null;      b=false;    } else {      b=false;    }    setRowPositionValidity();    return b;  }}  }
class C{  public static boolean createFile(String fileName){  return FilePath.get(fileName).createFile();}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  public SetVolume(String volume){  super();  addParameterToRequest("volume",volume);}  }
class C{  @Override public String toString(){  return StringUtils.repeat(this.value.toString(),this.count);}  }
class C{  private void clearMarkers(List<WorkItem> files) throws CoreException {  if (files == null) {    project.deleteMarkers(FindBugsMarker.NAME,true,IResource.DEPTH_INFINITE);    return;  }  for (  WorkItem item : files) {    if (item != null) {      item.clearMarkers();    }  }}  }
class C{  void pushChar(){  current.cursor--;  current.col--;}  }
class C{  public FilterJoinBuilder routing(String lookupRouting){  this.routing=lookupRouting;  return this;}  }
class C{  @Override public PinchToZoomSavedState onSaveInstanceState(){  Parcelable superState=super.onSaveInstanceState();  PinchToZoomSavedState state=new PinchToZoomSavedState(superState);  mMatrixHelper.onSaveInstanceState(state);  mTouchHelper.onSaveInstanceState(state);  return state;}  }
class C{  public Shape star(float x,float y,float height){  float s=(float)(height / (2 * Math.sin(Math.toRadians(54))));  float shortSide=(float)(height / (2 * Math.tan(Math.toRadians(54))));  float mediumSide=(float)(s * Math.sin(Math.toRadians(18)));  float longSide=(float)(s * Math.cos(Math.toRadians(18)));  float innerLongSide=(float)(s / (2 * Math.cos(Math.toRadians(36))));  float innerShortSide=innerLongSide * (float)Math.sin(Math.toRadians(36));  float innerMediumSide=innerLongSide * (float)Math.cos(Math.toRadians(36));  m_path.reset();  m_path.moveTo(x,y + shortSide);  m_path.lineTo((x + innerLongSide),(y + shortSide));  m_path.lineTo((x + height / 2),y);  m_path.lineTo((x + height - innerLongSide),(y + shortSide));  m_path.lineTo((x + height),(y + shortSide));  m_path.lineTo((x + height - innerMediumSide),(y + shortSide + innerShortSide));  m_path.lineTo((x + height - mediumSide),(y + height));  m_path.lineTo((x + height / 2),(y + shortSide + longSide - innerShortSide));  m_path.lineTo((x + mediumSide),(y + height));  m_path.lineTo((x + innerMediumSide),(y + shortSide + innerShortSide));  m_path.closePath();  return m_path;}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  private void renderLoads(List<Load> loads,int ypos){  Load prevLoad=null;  Load curLoad=null;  List<Offset> offsets=getDefaultOffsets();  String suffix="";  for (int curIndex=1; curIndex < loads.size(); curIndex++) {    curLoad=loads.get(curIndex);    prevLoad=loads.get(curIndex - 1);    if (prevLoad.load != 0) {      renderLoads(prevLoad,curLoad,offsets,ypos,suffix);      suffix="";    } else     if (curLoad.load > 0) {      suffix=".first";    }  }}  }
class C{  private void addBlockAtOffset(int offset){  final int line=getLineForOffset(offset);  if (mBlockEndLines == null) {    mBlockEndLines=new int[ArrayUtils.idealIntArraySize(1)];    mBlockEndLines[mNumberOfBlocks]=line;    mNumberOfBlocks++;    return;  }  final int previousBlockEndLine=mBlockEndLines[mNumberOfBlocks - 1];  if (line > previousBlockEndLine) {    if (mNumberOfBlocks == mBlockEndLines.length) {      int[] blockEndLines=new int[ArrayUtils.idealIntArraySize(mNumberOfBlocks + 1)];      System.arraycopy(mBlockEndLines,0,blockEndLines,0,mNumberOfBlocks);      mBlockEndLines=blockEndLines;    }    mBlockEndLines[mNumberOfBlocks]=line;    mNumberOfBlocks++;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void mouseAction(int x,int y,int mtype,int modifiers){  if (game.getBoard().contains(x,y)) {    Coords c=new Coords(x,y);switch (mtype) {case BOARD_HEX_CLICK:      if ((modifiers & java.awt.event.InputEvent.CTRL_MASK) != 0) {        checkLOS(c);      } else {        processBoardViewEvent(new BoardViewEvent(this,c,null,BoardViewEvent.BOARD_HEX_CLICKED,modifiers));      }    break;case BOARD_HEX_DOUBLECLICK:  processBoardViewEvent(new BoardViewEvent(this,c,null,BoardViewEvent.BOARD_HEX_DOUBLECLICKED,modifiers));break;case BOARD_HEX_DRAG:processBoardViewEvent(new BoardViewEvent(this,c,null,BoardViewEvent.BOARD_HEX_DRAGGED,modifiers));break;case BOARD_HEX_POPUP:processBoardViewEvent(new BoardViewEvent(this,c,null,BoardViewEvent.BOARD_HEX_POPUP,modifiers));break;}}}  }
class C{  public static String hexDigest(String hashAlg,String data) throws Exception {  return hexDigest(hashAlg,data.getBytes(StandardCharsets.UTF_8));}  }
class C{  public static Scsn cs_chol(Scs A,Scss S){  float d, lki, Lx[], x[], Cx[];  int top, i, p, k, n, Li[], Lp[], cp[], pinv[], s[], c[], parent[], Cp[], Ci[];  Scs L, C;  Scsn N;  if (!Scs_util.CS_CSC(A) || S == null || S.cp == null || S.parent == null)   return (null);  n=A.n;  N=new Scsn();  c=new int[2 * n];  x=new float[n];  cp=S.cp;  pinv=S.pinv;  parent=S.parent;  C=pinv != null ? Scs_symperm.cs_symperm(A,pinv,true) : A;  s=c;  int s_offset=n;  Cp=C.p;  Ci=C.i;  Cx=C.x;  N.L=L=Scs_util.cs_spalloc(n,n,cp[n],true,false);  Lp=L.p;  Li=L.i;  Lx=L.x;  for (k=0; k < n; k++)   Lp[k]=c[k]=cp[k];  for (k=0; k < n; k++) {    top=Scs_ereach.cs_ereach(C,k,parent,s,s_offset,c);    x[k]=0;    for (p=Cp[k]; p < Cp[k + 1]; p++) {      if (Ci[p] <= k)       x[Ci[p]]=Cx[p];    }    d=x[k];    x[k]=0;    for (; top < n; top++) {      i=s[s_offset + top];      lki=x[i] / Lx[Lp[i]];      x[i]=0;      for (p=Lp[i] + 1; p < c[i]; p++) {        x[Li[p]]-=Lx[p] * lki;      }      d-=lki * lki;      p=c[i]++;      Li[p]=k;      Lx[p]=lki;    }    if (d <= 0)     return null;    p=c[k]++;    Li[p]=k;    Lx[p]=(float)Math.sqrt(d);  }  Lp[n]=cp[n];  return N;}  }
class C{  public static String formatXml(Node node,boolean pretty){  try {    StringWriter writer=new StringWriter();    Source source=new DOMSource(node);    Result result=new StreamResult(writer);    Transformer t=getTransformerFactory().newTransformer();    t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");    if (pretty) {      t.setOutputProperty(OutputKeys.INDENT,"yes");      t.setOutputProperty("{http://xml.apache.org/xalan}indent-amount","2");    }    t.transform(source,result);    return writer.toString();  } catch (  Exception e) {    throw new XmlException(e);  }}  }
class C{  private void findLargeTrades(List<Trade> trades){  trades.stream().filter(null).forEach(null);  ;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.115 -0500",hash_original_method="C8D7B9DA233B276F8D5E9642BE0FE843",hash_generated_method="898688DA6CEBCF20A15B69A419EFAFA7") synchronized void handleSslErrorRequest(LoadListener loader){  if (DebugFlags.SSL_ERROR_HANDLER) {    Log.v(LOGTAG,"SslErrorHandler.handleSslErrorRequest(): " + "url=" + loader.url());  }  if (!loader.cancelled()) {    mLoaderQueue.offer(loader);    if (loader == mLoaderQueue.peek()) {      fastProcessQueuedSslErrors();    }  }}  }
class C{  public SamlTokenCreator(SamlToken spec,Certificate stsCert,Key key) throws ParserException {  _spec=spec;  Document assertion=createAssertion();  signMessage(assertion.getDocumentElement(),"#" + ASSERTION_ID,key,stsCert);  samlToken=Util.serializeToString(assertion);}  }
class C{  @Override public boolean isCurrency(int columnIndex){  return false;}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public MutablePeriod(int hours,int minutes,int seconds,int millis){  super(0,0,0,0,hours,minutes,seconds,millis,PeriodType.standard());}  }
class C{  @Nullable public GridCacheMvccCandidate markOwned(GridCacheVersion baseVer,GridCacheVersion owned){  if (owned == null)   return anyOwner();  if (rmts != null) {    GridCacheMvccCandidate baseCand=candidate(rmts,baseVer);    if (baseCand != null)     baseCand.ownerVersion(owned);  }  return anyOwner();}  }
class C{  void paste(String sXML,int mode) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setValidating(true);  Document doc=factory.newDocumentBuilder().parse(new org.xml.sax.InputSource(new StringReader(sXML)));  doc.normalize();  NodeList nodelist=doc.getElementsByTagName("VARIABLE");  ArrayList<String> sBaseNames=new ArrayList<String>();  Instances instances=new Instances(m_Instances,0);  int nBase=instances.numAttributes();  for (int iNode=0; iNode < nodelist.getLength(); iNode++) {    ArrayList<Node> valueslist;    valueslist=selectElements(nodelist.item(iNode),"OUTCOME");    int nValues=valueslist.size();    ArrayList<String> nomStrings=new ArrayList<String>(nValues + 1);    for (int iValue=0; iValue < nValues; iValue++) {      Node node=valueslist.get(iValue).getFirstChild();      String sValue=((CharacterData)(node)).getData();      if (sValue == null) {        sValue="Value" + (iValue + 1);      }      nomStrings.add(sValue);    }    ArrayList<Node> nodelist2;    nodelist2=selectElements(nodelist.item(iNode),"NAME");    if (nodelist2.size() == 0) {      throw new Exception("No name specified for variable");    }    String sBaseName=((CharacterData)(nodelist2.get(0).getFirstChild())).getData();    sBaseNames.add(sBaseName);    String sNodeName=sBaseName;    if (getNode2(sNodeName) >= 0) {      sNodeName="Copy of " + sBaseName;    }    int iAttempt=2;    while (getNode2(sNodeName) >= 0) {      sNodeName="Copy (" + iAttempt + ") of "+ sBaseName;      iAttempt++;    }    Attribute att=new Attribute(sNodeName,nomStrings);    instances.insertAttributeAt(att,instances.numAttributes());    valueslist=selectElements(nodelist.item(iNode),"PROPERTY");    nValues=valueslist.size();    int nPosX=iAttempt * 10;    int nPosY=iAttempt * 10;    for (int iValue=0; iValue < nValues; iValue++) {      Node node=valueslist.get(iValue).getFirstChild();      String sValue=((CharacterData)(node)).getData();      if (sValue.startsWith("position")) {        int i0=sValue.indexOf('(');        int i1=sValue.indexOf(',');        int i2=sValue.indexOf(')');        String sX=sValue.substring(i0 + 1,i1).trim();        String sY=sValue.substring(i1 + 1,i2).trim();        try {          nPosX=(Integer.parseInt(sX) + iAttempt * 10);          nPosY=(Integer.parseInt(sY) + iAttempt * 10);        } catch (        NumberFormatException e) {          System.err.println("Wrong number format in position :(" + sX + ","+ sY+ ")");        }      }    }    if (mode == EXECUTE) {      m_nPositionX.add(nPosX);      m_nPositionY.add(nPosY);    }  }  ArrayList<Node> nodelist2;  Estimator[][] distributions=new Estimator[nBase + sBaseNames.size()][];  ParentSet[] parentsets=new ParentSet[nBase + sBaseNames.size()];  for (int iNode=0; iNode < nBase; iNode++) {    distributions[iNode]=m_Distributions[iNode];    parentsets[iNode]=m_ParentSets[iNode];  }  if (mode == EXECUTE) {    m_Instances=instances;  }  for (int iNode=0; iNode < sBaseNames.size(); iNode++) {    String sName=sBaseNames.get(iNode);    Element definition=getDefinition(doc,sName);    parentsets[nBase + iNode]=new ParentSet();    nodelist2=selectElements(definition,"GIVEN");    for (int iParent=0; iParent < nodelist2.size(); iParent++) {      Node parentName=nodelist2.get(iParent).getFirstChild();      String sParentName=((CharacterData)(parentName)).getData();      int nParent=-1;      for (int iBase=0; iBase < sBaseNames.size(); iBase++) {        if (sParentName.equals(sBaseNames.get(iBase))) {          nParent=nBase + iBase;        }      }      if (nParent < 0) {        nParent=getNode(sParentName);      }      parentsets[nBase + iNode].addParent(nParent,instances);    }    int nCardinality=parentsets[nBase + iNode].getCardinalityOfParents();    int nValues=instances.attribute(nBase + iNode).numValues();    distributions[nBase + iNode]=new Estimator[nCardinality];    for (int i=0; i < nCardinality; i++) {      distributions[nBase + iNode][i]=new DiscreteEstimatorBayes(nValues,0.0f);    }    String sTable=getContent((Element)selectElements(definition,"TABLE").get(0));    sTable=sTable.replaceAll("\\n"," ");    StringTokenizer st=new StringTokenizer(sTable.toString());    for (int i=0; i < nCardinality; i++) {      DiscreteEstimatorBayes d=(DiscreteEstimatorBayes)distributions[nBase + iNode][i];      for (int iValue=0; iValue < nValues; iValue++) {        String sWeight=st.nextToken();        d.addValue(iValue,new Double(sWeight).doubleValue());      }    }    if (mode == EXECUTE) {      m_nEvidence.add(nBase + iNode,-1);      m_fMarginP.add(nBase + iNode,new double[getCardinality(nBase + iNode)]);    }  }  if (mode == EXECUTE) {    m_Distributions=distributions;    m_ParentSets=parentsets;  }  if (mode == EXECUTE && m_bNeedsUndoAction) {    addUndoAction(new PasteAction(sXML,nBase));  }}  }
class C{  public Object clone(){  VelocityContext clone=null;  try {    clone=(VelocityContext)super.clone();    clone.context=new HashMap(context);  } catch (  CloneNotSupportedException ignored) {  }  return clone;}  }
class C{  public boolean hasNext(){  if (curDelegate == null) {    return false;  }  if (curDelegate.hasNext()) {    return true;  } else {    if (nextDelegate()) {      return hasNext();    }  }  return false;}  }
class C{  public static ImmutableBlockVolume newWithoutArrayClone(BlockPalette palette,Vector3i start,Vector3i size,char[] blocks){  return new ArrayImmutableBlockBuffer(palette,new CharBackingData(blocks),start,size);}  }
class C{  private static void hybrid2_re(float in[][],float out[][][],int outOffset,final float filter[],int len,int reverse){  int inOffset=0;  for (int i=0; i < len; i++, inOffset++) {    float re_in=filter[6] * in[inOffset + 6][0];    float re_op=0.0f;    float im_in=filter[6] * in[inOffset + 6][1];    float im_op=0.0f;    for (int j=0; j < 6; j+=2) {      re_op+=filter[j + 1] * (in[j + 1][0] + in[12 - j - 1][0]);      im_op+=filter[j + 1] * (in[j + 1][1] + in[12 - j - 1][1]);    }    out[outOffset + reverse][i][0]=re_in + re_op;    out[outOffset + reverse][i][1]=im_in + im_op;    out[outOffset + 1 - reverse][i][0]=re_in - re_op;    out[outOffset + 1 - reverse][i][1]=im_in - im_op;  }}  }
class C{  static void validateConfigParameters(Schema inputSchema,@Nullable String featuresToInclude,@Nullable String featuresToExclude,String predictionField,@Nullable String cardinalityMapping){  if (!Strings.isNullOrEmpty(featuresToExclude) && !Strings.isNullOrEmpty(featuresToInclude)) {    throw new IllegalArgumentException("Cannot specify values for both featuresToInclude and featuresToExclude. " + "Please specify fields for one.");  }  Map<String,Integer> fields=getFeatureList(inputSchema,featuresToInclude,featuresToExclude,predictionField);  for (  String field : fields.keySet()) {    Schema.Field inputField=inputSchema.getField(field);    Schema schema=inputField.getSchema();    Schema.Type features=schema.isNullableSimple() ? schema.getNonNullable().getType() : schema.getType();    if (!(features.equals(Schema.Type.INT) || features.equals(Schema.Type.LONG) || features.equals(Schema.Type.FLOAT)|| features.equals(Schema.Type.DOUBLE))) {      throw new IllegalArgumentException(String.format("Features must be of type : int, double, float, long but " + "was of type %s for field %s.",features,field));    }  }  getCategoricalFeatureInfo(inputSchema,featuresToInclude,featuresToExclude,predictionField,cardinalityMapping);}  }
class C{  private void unregisterRoute(String request){  delete(request).then().assertThat().statusCode(200);}  }
class C{  @SuppressWarnings("unchecked") public static <E>void transformStringCollection(Collection<String> original,Collection<E> collection,Class<E> elementClass) throws PreferenceException {  Method parseMethod=findParseMethod(elementClass);  if (null != parseMethod) {    for (    String toTransform : original) {      try {        Object transformed=parseMethod.invoke(null,toTransform);        if (elementClass.isAssignableFrom(transformed.getClass())) {          collection.add((E)transformed);        }      } catch (      Exception e) {        throw new PreferenceException("Error transforming Collection<java.lang.String> to Collection<" + elementClass.getName() + ">.",e);      }    }  } else {    throw new PreferenceException("Error transforming Collection<java.lang.String> to Collection<" + elementClass.getName() + ">. Parsing method can not be found in class "+ elementClass.getName()+ ".");  }}  }
class C{  public Circle(Double x,Double y,Double radius){  GeometryFactory fact=new GeometryFactory();  Coordinate coordinate=new Coordinate(x,y);  Point point=fact.createPoint(coordinate);  this.center=point;  this.radius=radius;}  }
class C{  protected void performSearch(){  if (!isValidSearch())   return;  m_LastSearch=getSearchText();  notifySearchListeners(new SearchEvent(SearchPanel.this,getSearchText(),isRegularExpression()));}  }
class C{  private void connectAction(Bundle data){  IMqttToken token=connectToken;  removeMqttToken(data);  simpleAction(token,data);}  }
class C{  public void initializeLocalCodeNodeComment(final List<IComment> comments){  CommentManager.get(m_provider).initializeLocalCodeNodeComment(m_codeNode,comments);}  }
class C{  private static void free(ByteBuffer buf){  ((DirectBuffer)buf).cleaner().clean();}  }
class C{  public SetPublishingModeResponse clone(){  SetPublishingModeResponse result=new SetPublishingModeResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  @Override public void handleMaintenance(Operation post){  ServiceMaintenanceRequest request=post.getBody(ServiceMaintenanceRequest.class);  if (request.reasons.contains(ServiceMaintenanceRequest.MaintenanceReason.PERIODIC_SCHEDULE)) {    this.handlePeriodicMaintenance(post);  } else   if (request.reasons.contains(ServiceMaintenanceRequest.MaintenanceReason.NODE_GROUP_CHANGE)) {    this.handleNodeGroupMaintenance(post);  } else {    post.complete();  }}  }
class C{  private static void regCreateKeyEx(String subKey,int regLevel) throws RegisterFailedException {  int hKey=getHKeyByLevel(regLevel);  if (WinRegistryWrapper.WinRegCreateKeyEx(hKey,subKey) != ERROR_SUCCESS) {    throw new RegisterFailedException("Key " + subKey + " creation error!");  }}  }
class C{  public ClassOrInterfaceDeclaration addInterface(String name){  return addInterface(name,Modifier.PUBLIC);}  }
class C{  public void assertEvictionCount(int expected){  TestHardReferenceQueue.assertEquals("evictionCount",expected,nevicted);}  }
class C{  public EventStoreBuilder tcpKeepAliveEnabled(){  tcpSettingsBuilder.keepAlive(true);  return this;}  }
class C{  public static void copy(String in,Charset charset,OutputStream out) throws IOException {  Assert.notNull(in,"No input String specified");  Assert.notNull(charset,"No charset specified");  Assert.notNull(out,"No OutputStream specified");  Writer writer=new OutputStreamWriter(out,charset);  writer.write(in);  writer.flush();}  }
class C{  public String toString(){  String ret="TAG_List(\"" + name + "\"): count="+ elements.length+ " type="+ (int)type+ "\n";  for (int i=0; i < elements.length; i++) {    NBT_Tag tag=elements[i];    ret+=tag.toString() + "\n";  }  ret+="ENDOF TAG_List(\"" + name + "\")";  return ret;}  }
class C{  private JTicketsBagSharedList(java.awt.Dialog parent,boolean modal){  super(parent,modal);}  }
class C{  public void clear(){  this.buffer.clear();  this.buffer.trimToSize();  this.isSorted=false;}  }
class C{  public static <T>LazySetX<T> fromStreamS(Stream<T> stream){  return new LazySetX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  void c1b2a1__c1b2a1c1(){  mv.visitInsn(DUP_X2);  mv.visitInsn(POP);  mv.visitInsn(DUP2_X2);  mv.visitInsn(POP2);  mv.visitInsn(DUP2_X2);  mv.visitInsn(POP);  mv.visitInsn(DUP_X2);  mv.visitInsn(POP);  mv.visitInsn(DUP2_X2);  mv.visitInsn(POP2);}  }
class C{  public static SupportedCurrency createOneSupportedCurrency(DataService mgr) throws NonUniqueBusinessKeyException {  return findOrCreate(mgr,"EUR");}  }
class C{  public CSVParserOptions(java.awt.Component parent){  super((JFrame)SwingUtilities.windowForComponent(parent),true);  initComponents();  ModifiableJOptionPane.reverseOKCancel(ok,cancel);  pack();  setLocationRelativeTo(parent);  setVisible(true);}  }
class C{  public double theta(){  return Math.atan2(y,x);}  }
class C{  @Override public void start(){  try {    JournalClientEndpoint endpoint=connect();    if (endpoint != null) {      OutputStream os;      _os=os=endpoint.startMessage();      if (os != null) {        os.write('M');      }    }  } catch (  Exception e) {    log.finer(e.toString());  }}  }
class C{  public double[] score(String word,short tag,int loc,boolean noSmoothing,boolean isSignature){  if (isConditional)   return scoreConditional(word,tag,loc,noSmoothing,isSignature);  double c_W=wordCounter.getCount(word);  double pb_W_T=0;  double[] resultArray=new double[numSubStates[tag]];  for (int substate=0; substate < numSubStates[tag]; substate++) {    boolean seen=(c_W > 0.0);    if (!isSignature && (seen || noSmoothing)) {      double c_tag=tagCounter[tag][substate];      double c_T=c_tag;      if (c_T == 0)       continue;      double c_TW=0;      if (wordToTagCounters[tag] != null && wordToTagCounters[tag].get(word) != null) {        c_TW=wordToTagCounters[tag].get(word)[substate];      }      double c_Tunseen=unseenTagCounter[tag][substate];      double total=totalTokens;      double totalUnseen=totalUnseenTokens;      double p_T_U=(totalUnseen == 0) ? 1 : c_Tunseen / totalUnseen;      double pb_T_W;      if (c_W > smoothInUnknownsThreshold || noSmoothing) {        if (noSmoothing && c_W == 0)         pb_T_W=c_TW / 1; else         pb_T_W=(c_TW + 0.0001 * p_T_U) / (c_W + 0.0001);      } else {        pb_T_W=(c_TW + smooth[1] * p_T_U) / (c_W + smooth[1]);      }      if (pb_T_W == 0)       continue;      double p_T=(c_T / total);      double p_W=(c_W / total);      pb_W_T=pb_T_W * p_W / p_T;    } else {      if (Corpus.myTreebank == Corpus.TreeBankType.CHINESE) {        Numberer tagNumberer=Numberer.getGlobalNumberer("tags");        double prob;        if (word.matches(ChineseLexicon.dateMatch)) {          if (tag == tagNumberer.number("NT")) {            prob=1.0;          } else {            prob=0.0;          }          Arrays.fill(resultArray,prob);          return resultArray;        } else         if (word.matches(ChineseLexicon.numberMatch)) {          if (tag == tagNumberer.number("CD") && (!word.matches(ChineseLexicon.ordinalMatch))) {            prob=1.0;          } else           if (tag == tagNumberer.number("OD") && word.matches(ChineseLexicon.ordinalMatch)) {            prob=1.0;          } else {            prob=0.0;          }          Arrays.fill(resultArray,prob);          return resultArray;        } else         if (word.matches(ChineseLexicon.properNameMatch)) {          if (tag == tagNumberer.number("NR")) {            prob=1.0;          } else {            prob=0.0;          }          Arrays.fill(resultArray,prob);          return resultArray;        }      }      String sig=(isSignature) ? word : getCachedSignature(word,loc);      double c_TS=0;      if (unseenWordToTagCounters[tag] != null && unseenWordToTagCounters[tag].get(sig) != null) {        c_TS=unseenWordToTagCounters[tag].get(sig)[substate];      }      double c_S=wordCounter.getCount(sig);      double c_U=totalUnseenTokens;      double total=totalTokens;      double c_T=unseenTagCounter[tag][substate];      double c_Tseen=tagCounter[tag][substate];      double p_T_U=c_T / c_U;      if (unknownLevel == 0) {        c_TS=0;        c_S=0;      }      double pb_T_S=(c_TS + smooth[0] * p_T_U) / (c_S + smooth[0]);      double p_T=(c_Tseen / total);      double p_W=1.0 / total;      pb_W_T=pb_T_S * p_W / p_T;    }    if (pb_W_T == 0) {      resultArray[substate]=1e-87;    } else {      resultArray[substate]=pb_W_T;    }  }  smoother.smooth(tag,resultArray);  if (logarithmMode) {    for (int i=0; i < resultArray.length; i++) {      resultArray[i]=Math.log(resultArray[i]);      if (Double.isNaN(resultArray[i]))       resultArray[i]=Double.NEGATIVE_INFINITY;    }  }  return resultArray;}  }
class C{  public boolean allowedToSave(){  return save;}  }
class C{  public TagValue createTagValue(){  TagValueImpl tagValue=new TagValueImpl();  return tagValue;}  }
class C{  private byte[] rfc3394UnwrapNoIvCheck(byte[] in,int inOff,int inLen){  byte[] iv=new byte[8];  byte[] block=new byte[inLen - iv.length];  byte[] a=new byte[iv.length];  byte[] buf=new byte[8 + iv.length];  System.arraycopy(in,inOff,a,0,iv.length);  System.arraycopy(in,inOff + iv.length,block,0,inLen - iv.length);  engine.init(false,param);  int n=inLen / 8;  n=n - 1;  for (int j=5; j >= 0; j--) {    for (int i=n; i >= 1; i--) {      System.arraycopy(a,0,buf,0,iv.length);      System.arraycopy(block,8 * (i - 1),buf,iv.length,8);      int t=n * j + i;      for (int k=1; t != 0; k++) {        byte v=(byte)t;        buf[iv.length - k]^=v;        t>>>=8;      }      engine.processBlock(buf,0,buf,0);      System.arraycopy(buf,0,a,0,8);      System.arraycopy(buf,8,block,8 * (i - 1),8);    }  }  extractedAIV=a;  return block;}  }
class C{  public static float[] copyOf(float[] original,int newLength){  float[] copy=new float[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public static boolean isRunning(Context context,String packageName){  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningAppProcessInfo> infos=am.getRunningAppProcesses();  for (  RunningAppProcessInfo rapi : infos) {    if (rapi.processName.equals(packageName))     return true;  }  return false;}  }
class C{  static void testBadUri(String s) throws Exception {  URI uri=URI.create(s);  log.println(uri);  try {    Path path=Paths.get(uri);    log.format(" --> %s  FAIL: Expected IllegalArgumentException\n",path);    failures++;  } catch (  IllegalArgumentException expected) {    log.println("  --> IllegalArgumentException (expected)");  }  log.println();}  }
class C{  public boolean hasNext(){  return currentPosition < content.length();}  }
class C{  public List registerInterest(final Object key,final int interestType,final InterestResultPolicy policy,final boolean isDurable,final boolean receiveUpdatesAsInvalidates,final byte regionDataPolicy){  if (interestType == InterestType.KEY && key instanceof List) {    return registerInterestList((List)key,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  } else {    final RegisterInterestTracker rit=this.pool.getRITracker();    List result=null;    boolean finished=false;    try {      rit.addSingleInterest(this.region,key,interestType,policy,isDurable,receiveUpdatesAsInvalidates);      result=RegisterInterestOp.execute(this.pool,this.regionName,key,interestType,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);      if (PoolImpl.AFTER_REGISTER_CALLBACK_FLAG) {        ClientServerObserver bo=ClientServerObserverHolder.getInstance();        bo.afterInterestRegistration();      }      finished=true;      return result;    }  finally {      if (!finished) {        rit.removeSingleInterest(this.region,key,interestType,isDurable,receiveUpdatesAsInvalidates);      }    }  }}  }
class C{  public IndicesStatsRequest clear(){  flags.clear();  return this;}  }
class C{  protected boolean isMacLengthExpected(String MACAlgo,int lengthToCheck){  java.util.regex.Pattern p=java.util.regex.Pattern.compile("(\\d+)",java.util.regex.Pattern.CASE_INSENSITIVE);  java.util.regex.Matcher m=p.matcher(MACAlgo);  int val=0;  if (m.find()) {    val=Integer.parseInt(m.group(1));  }  if ((val == 1) && (lengthToCheck == 20)) {    return true;  }  return (val / 8) == lengthToCheck;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'JOKE_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  @Override public void process(V tuple){  if (keys.length == 0) {    return;  }  if (cursor == 0) {    otuple=new HashMap<K,V>();  }  otuple.put(keys[cursor],tuple);  if (++cursor >= keys.length) {    map.emit(otuple);    cursor=0;    otuple=null;  }}  }
class C{  public final static float closestPolyDistance(float[] xpts,float[] ypts,double ptx,double pty,boolean connected){  if (xpts.length == 0)   return Float.POSITIVE_INFINITY;  if (xpts.length == 1)   return (float)distance(xpts[0],ypts[0],ptx,pty);  float temp, distance=Float.POSITIVE_INFINITY;  int i, j;  for (i=0, j=1; j < xpts.length; i++, j++) {    temp=(float)distance_to_line(xpts[i],ypts[i],xpts[j],ypts[j],ptx,pty);    if (temp < distance)     distance=temp;  }  if (connected) {    temp=(float)distance_to_line(xpts[i],ypts[i],xpts[0],ypts[0],ptx,pty);    if (temp < distance)     distance=temp;  }  return distance;}  }
class C{  static public void transmit(final String message,final Context s1,final Context s2) throws Exception {  final byte[] messageBytes=message.getBytes();  System.out.printf("-------------------- TRANSMIT from %s to %s------------------------\n",s1.name,s2.name);  byte[] wrapped=s1.wrap(messageBytes,true);  byte[] unwrapped=s2.unwrap(wrapped,true);  if (!Arrays.equals(messageBytes,unwrapped)) {    throw new Exception("wrap/unwrap mismatch");  }  byte[] mic=s2.getMic(unwrapped);  s1.verifyMic(mic,messageBytes);}  }
class C{  public static final String extractInterpretedIplHostDevice(LocoNetMessage m){  if (!isIplIdentityReportMessage(m)) {    return null;  }  if (isIplDt402DIdentityReportMessage(m)) {    return forcedDt402DManufacturerDevice();  }  if (isIplUt4DIdentityReportMessage(m)) {    return forcedUt4DManufacturerDevice();  } else {    return interpretHostManufacturerDevice(extractIplIdentityHostManufacturer(m),extractIplIdentityHostDevice(m));  }}  }
class C{  public boolean removeCollection(Collection collection){  return super.removeElement(Collection.KEY,collection);}  }
class C{  public void testDoubleValuePosNotRounded(){  byte[] a={-128,1,2,3,4,5,-128,23,1,-3,-5};  int aSign=1;  double result=1.5474726438794828E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public static void fill(long[] array,int start,int end,long value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public HarddriveStorage(double capacity) throws ParameterException {  if (capacity <= 0) {    throw new ParameterException("HarddriveStorage(): Error - capacity <= 0.");  }  name="HarddriveStorage";  this.capacity=capacity;  init();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:42.507 -0500",hash_original_method="AAC3F75032624F788E22A2E407A017DD",hash_generated_method="B242174C9AD2D547970527CEFEA5B484") private void flushInternal() throws IOException {  if (count > 0) {    out.write(buf,0,count);    count=0;  }}  }
class C{  public void add(final File file){  if (m_files.contains(file)) {    return;  }  m_files.add(file);  fireIntervalAdded(file,m_files.size() - 1,m_files.size() - 1);}  }
class C{  public RoleList(){  super();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void eachFile(final File self,@ClosureParams(value=SimpleType.class,options="java.io.File") final Closure closure) throws FileNotFoundException, IllegalArgumentException {  eachFile(self,FileType.ANY,closure);}  }
class C{  NetAccessManager(StunStack stunStack,PeerUdpMessageEventHandler peerUdpMessageEventHandler,ChannelDataEventHandler channelDataEventHandler){  this.stunStack=stunStack;  this.messageEventHandler=stunStack;  this.peerUdpMessageEventHandler=peerUdpMessageEventHandler;  this.channelDataEventHandler=channelDataEventHandler;  initThreadPool();}  }
class C{  private Document parseRouteFile() throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setNamespaceAware(true);  DocumentBuilder builder=factory.newDocumentBuilder();  return builder.parse(routeFile);}  }
class C{  public boolean isShowing(){  return getParent() != null;}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case DatatypePackage.ENTITY:{      Entity entity=(Entity)theEObject;      T result=caseEntity(entity);      if (result == null)       result=caseType(entity);      if (result == null)       result=caseModel(entity);      if (result == null)       result=defaultCase(theEObject);      return result;    }case DatatypePackage.PROPERTY:{    Property property=(Property)theEObject;    T result=caseProperty(property);    if (result == null)     result=defaultCase(theEObject);    return result;  }case DatatypePackage.PRIMITIVE_PROPERTY_TYPE:{  PrimitivePropertyType primitivePropertyType=(PrimitivePropertyType)theEObject;  T result=casePrimitivePropertyType(primitivePropertyType);  if (result == null)   result=casePropertyType(primitivePropertyType);  if (result == null)   result=defaultCase(theEObject);  return result;}case DatatypePackage.OBJECT_PROPERTY_TYPE:{ObjectPropertyType objectPropertyType=(ObjectPropertyType)theEObject;T result=caseObjectPropertyType(objectPropertyType);if (result == null) result=casePropertyType(objectPropertyType);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.PRESENCE:{Presence presence=(Presence)theEObject;T result=casePresence(presence);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.CONSTRAINT:{Constraint constraint=(Constraint)theEObject;T result=caseConstraint(constraint);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.ENUM:{org.eclipse.vorto.core.api.model.datatype.Enum enum_=(org.eclipse.vorto.core.api.model.datatype.Enum)theEObject;T result=caseEnum(enum_);if (result == null) result=caseType(enum_);if (result == null) result=caseModel(enum_);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.ENUM_LITERAL:{EnumLiteral enumLiteral=(EnumLiteral)theEObject;T result=caseEnumLiteral(enumLiteral);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.TYPE:{Type type=(Type)theEObject;T result=caseType(type);if (result == null) result=caseModel(type);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.PROPERTY_TYPE:{PropertyType propertyType=(PropertyType)theEObject;T result=casePropertyType(propertyType);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.PROPERTY_ATTRIBUTE:{PropertyAttribute propertyAttribute=(PropertyAttribute)theEObject;T result=casePropertyAttribute(propertyAttribute);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE:{BooleanPropertyAttribute booleanPropertyAttribute=(BooleanPropertyAttribute)theEObject;T result=caseBooleanPropertyAttribute(booleanPropertyAttribute);if (result == null) result=casePropertyAttribute(booleanPropertyAttribute);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE:{EnumLiteralPropertyAttribute enumLiteralPropertyAttribute=(EnumLiteralPropertyAttribute)theEObject;T result=caseEnumLiteralPropertyAttribute(enumLiteralPropertyAttribute);if (result == null) result=casePropertyAttribute(enumLiteralPropertyAttribute);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.CONSTRAINT_RULE:{ConstraintRule constraintRule=(ConstraintRule)theEObject;T result=caseConstraintRule(constraintRule);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.COMPLEX_PRIMITIVE_PROPERTY_TYPE:{ComplexPrimitivePropertyType complexPrimitivePropertyType=(ComplexPrimitivePropertyType)theEObject;T result=caseComplexPrimitivePropertyType(complexPrimitivePropertyType);if (result == null) result=casePropertyType(complexPrimitivePropertyType);if (result == null) result=defaultCase(theEObject);return result;}case DatatypePackage.DICTIONARY_PROPERTY_TYPE:{DictionaryPropertyType dictionaryPropertyType=(DictionaryPropertyType)theEObject;T result=caseDictionaryPropertyType(dictionaryPropertyType);if (result == null) result=caseComplexPrimitivePropertyType(dictionaryPropertyType);if (result == null) result=casePropertyType(dictionaryPropertyType);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public static CodeCoverageMetrics convertCobertura(CoverageResult result){  if (result == null) {    return null;  }  float packagesCoverage=getCoveragePercentage(result,CoverageMetric.PACKAGES);  float filesCoverage=getCoveragePercentage(result,CoverageMetric.FILES);  float classesCoverage=getCoveragePercentage(result,CoverageMetric.CLASSES);  float methodCoverage=getCoveragePercentage(result,CoverageMetric.METHOD);  float lineCoverage=getCoveragePercentage(result,CoverageMetric.LINE);  float conditionalCoverage=getCoveragePercentage(result,CoverageMetric.CONDITIONAL);  return new CodeCoverageMetrics(packagesCoverage,filesCoverage,classesCoverage,methodCoverage,lineCoverage,conditionalCoverage);}  }
class C{  public void registerInteractionHandler(InfoInteractionHandler handler){}  }
class C{  public static void main(String[] args){}  }
class C{  public static org.oscm.internal.vo.VOPaymentType convertToUp(org.oscm.vo.VOPaymentType oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOPaymentType newVO=new org.oscm.internal.vo.VOPaymentType();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setName(oldVO.getName());  newVO.setPaymentTypeId(oldVO.getPaymentTypeId());  newVO.setCollectionType(EnumConverter.convert(oldVO.getCollectionType(),org.oscm.internal.types.enumtypes.PaymentCollectionType.class));  return newVO;}  }
class C{  public LR1Item shift(){  if (kernel.position >= kernel.getProduction().getRHS().size())   throw new RuntimeException("Shifting not possible: Item already closed: " + kernel.production.toString(kernel.position));  return new LR1Item(kernel.production,kernel.position + 1,lookaheads);}  }
class C{  public static String sendUpsRequest(String upsService,String xmlString,String shipmentGatewayConfigId,String resource,Delegator delegator,Locale locale) throws UpsConnectException {  String conStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectUrl",resource,"shipment.ups.connect.url");  if (conStr == null) {    throw new UpsConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsIncompleteConnectionURL",locale));  }  if (upsService == null) {    throw new UpsConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsServiceNameCannotBeNull",locale));  }  if (xmlString == null) {    throw new UpsConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsXmlMessageCannotBeNull",locale));  }  conStr=conStr.trim();  if (!conStr.endsWith("/")) {    conStr=conStr + "/";  }  conStr=conStr + upsService;  String timeOutStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectTimeout",resource,"shipment.ups.connect.timeout","60");  int timeout=60;  try {    timeout=Integer.parseInt(timeOutStr);  } catch (  NumberFormatException e) {    Debug.logError(e,"Unable to set timeout to " + timeOutStr + " using default "+ timeout);  }  HttpClient http=new HttpClient(conStr);  http.setTimeout(timeout * 1000);  http.setAllowUntrusted(true);  String response=null;  try {    response=http.post(xmlString);  } catch (  HttpClientException e) {    Debug.logError(e,"Problem connecting with UPS server [" + conStr + "]",module);    throw new UpsConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsURLConnectionProblem",UtilMisc.toMap("exception",e),locale));  }  if (response == null) {    throw new UpsConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsReceivedNullResponse",locale));  }  if (Debug.verboseOn())   Debug.logVerbose("UPS Response : " + response,module);  return response;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:08.073 -0500",hash_original_method="962D88968BE7A135485D50B41AC85213",hash_generated_method="5C83DB9A6C160B27DA74B31D7A2BB3C7") private void handleProactiveCommand(CommandParams cmdParams){  CatLog.d(this,cmdParams.getCommandType().name());  CharSequence message;  CatCmdMessage cmdMsg=new CatCmdMessage(cmdParams);switch (cmdParams.getCommandType()) {case SET_UP_MENU:    if (removeMenu(cmdMsg.getMenu())) {      mMenuCmd=null;    } else {      mMenuCmd=cmdMsg;    }  sendTerminalResponse(cmdParams.cmdDet,ResultCode.OK,false,0,null);break;case DISPLAY_TEXT:if (!cmdMsg.geTextMessage().responseNeeded) {sendTerminalResponse(cmdParams.cmdDet,ResultCode.OK,false,0,null);}break;case REFRESH:cmdParams.cmdDet.typeOfCommand=CommandType.SET_UP_IDLE_MODE_TEXT.value();break;case SET_UP_IDLE_MODE_TEXT:sendTerminalResponse(cmdParams.cmdDet,ResultCode.OK,false,0,null);break;case PROVIDE_LOCAL_INFORMATION:ResponseData resp;switch (cmdParams.cmdDet.commandQualifier) {case CommandParamsFactory.DTTZ_SETTING:resp=new DTTZResponseData(null);sendTerminalResponse(cmdParams.cmdDet,ResultCode.OK,false,0,resp);return;case CommandParamsFactory.LANGUAGE_SETTING:resp=new LanguageResponseData(Locale.getDefault().getLanguage());sendTerminalResponse(cmdParams.cmdDet,ResultCode.OK,false,0,resp);return;default :sendTerminalResponse(cmdParams.cmdDet,ResultCode.OK,false,0,null);return;}case LAUNCH_BROWSER:if ((((LaunchBrowserParams)cmdParams).confirmMsg.text != null) && (((LaunchBrowserParams)cmdParams).confirmMsg.text.equals(STK_DEFAULT))) {message=mContext.getText(com.android.internal.R.string.launchBrowserDefault);((LaunchBrowserParams)cmdParams).confirmMsg.text=message.toString();}break;case SELECT_ITEM:case GET_INPUT:case GET_INKEY:break;case SEND_DTMF:case SEND_SMS:case SEND_SS:case SEND_USSD:if ((((DisplayTextParams)cmdParams).textMsg.text != null) && (((DisplayTextParams)cmdParams).textMsg.text.equals(STK_DEFAULT))) {message=mContext.getText(com.android.internal.R.string.sending);((DisplayTextParams)cmdParams).textMsg.text=message.toString();}break;case PLAY_TONE:break;case SET_UP_CALL:if ((((CallSetupParams)cmdParams).confirmMsg.text != null) && (((CallSetupParams)cmdParams).confirmMsg.text.equals(STK_DEFAULT))) {message=mContext.getText(com.android.internal.R.string.SetupCallDefault);((CallSetupParams)cmdParams).confirmMsg.text=message.toString();}break;default :CatLog.d(this,"Unsupported command");return;}mCurrntCmd=cmdMsg;Intent intent=new Intent(AppInterface.CAT_CMD_ACTION);intent.putExtra("STK CMD",cmdMsg);mContext.sendBroadcast(intent);}  }
class C{  private View fillUp(int pos,int nextBottom){  int end=mListPadding.top;  while (nextBottom > end && pos >= 0) {    makeAndAddView(pos,getItemBottom(pos),false,false);    pos--;    nextBottom=getItemBottom(pos);  }  mFirstPosition=pos + 1;  return null;}  }
class C{  public void serializeObject(Object o,File file) throws FileNotFoundException, IOException {  logger.info("Writing cache to file: " + file.getAbsolutePath());  ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(file));  oos.writeObject(o);  oos.flush();  oos.close();}  }
class C{  public FileInfo(String name,StoreFileMetaData metaData,ByteSizeValue partSize){  this.name=name;  this.metadata=metaData;  long partBytes=Long.MAX_VALUE;  if (partSize != null) {    partBytes=partSize.bytes();  }  long totalLength=metaData.length();  long numberOfParts=totalLength / partBytes;  if (totalLength % partBytes > 0) {    numberOfParts++;  }  if (numberOfParts == 0) {    numberOfParts++;  }  this.numberOfParts=numberOfParts;  this.partSize=partSize;  this.partBytes=partBytes;}  }
class C{  public void init(){synchronized (statemachine) {    statemachine.init();  }}  }
class C{  public CannotCompileException(NotFoundException e){  this("cannot find " + e.getMessage(),e);}  }
class C{  public Vset(){  this.x=emptyX;}  }
class C{  public static boolean isEven(int x){  return (x % 2) == 0;}  }
class C{  private void resolveSkinDir(final HttpServletRequest request){  try {    final UserQueryService userQueryService=beanManager.getReference(UserQueryService.class);    final UserRepository userRepository=beanManager.getReference(UserRepository.class);    JSONObject user=userQueryService.getCurrentUser(request);    if (null == user) {      final Cookie[] cookies=request.getCookies();      if (null == cookies || 0 == cookies.length) {        return;      }      try {        for (        final Cookie cookie : cookies) {          if (!"b3log-latke".equals(cookie.getName())) {            continue;          }          final JSONObject cookieJSONObject=new JSONObject(cookie.getValue());          final String userId=cookieJSONObject.optString(Keys.OBJECT_ID);          if (Strings.isEmptyOrNull(userId)) {            break;          }          user=userRepository.get(userId);          if (null == user) {            return;          } else {            break;          }        }      } catch (      final Exception e) {        LOGGER.warn(e.getMessage());      }      if (null == user) {        return;      }    }    request.setAttribute(Keys.TEMAPLTE_DIR_NAME,user.optString(UserExt.USER_SKIN));  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Resolves skin failed",e);  }}  }
class C{  public ZeroMeanTransform(DataSet dataset){  fit(dataset);}  }
class C{  public IType findType(String name,boolean partialMatch,int acceptFlags){  NameLookup.Answer answer=findType(name,partialMatch,acceptFlags,false);  return answer == null ? null : answer.type;}  }
class C{  public MbFanSearchRunner(DagWrapper dagWrapper,Parameters params){  super(dagWrapper.getDag(),params);}  }
class C{  public void removeAll(){  checkWidget();  checkNullElement();  if (this.elements != null) {    this.elements.clear();  }  this.selection.clear();  refresh();}  }
class C{  public int add(GL10 gl,Drawable background,String text,Paint textPaint){  return add(gl,background,text,textPaint,0,0);}  }
class C{  public void insert(String t,PAYLOAD payload){  insert(t);  List<PAYLOAD> nn=null;  if ((nn=term_blocks.get(t)) == null) {    term_blocks.put(t,nn=new ArrayList<PAYLOAD>(1));  }  if (payload != null) {    nn.add(payload);  }  blockCount++;}  }
class C{  public void schedule(TimerTask task,Date time){  timer.schedule(new TimerTaskWrapper(task),time);}  }
class C{  void resetMemorizedCursorPosition(){  lastReportedCursorPosition=null;}  }
class C{  public void addChangeListener(ChangeListener changeListener){  this.listenerList.add(ChangeListener.class,changeListener);}  }
class C{  private void paintBorderFocused(Graphics2D g,int width,int height){  Shape s;  s=shapeGenerator.createRoundRectangle(0,0,width - 1,height - 1,CornerSize.OUTER_FOCUS);  g.setPaint(getFocusPaint(s,FocusType.OUTER_FOCUS,false));  g.draw(s);  s=shapeGenerator.createRoundRectangle(1,1,width - 3,height - 3,CornerSize.INNER_FOCUS);  g.setPaint(getFocusPaint(s,FocusType.INNER_FOCUS,false));  g.draw(s);  s=shapeGenerator.createRoundRectangle(2,2,width - 5,height - 5,CornerSize.BORDER);  g.setPaint(borderColor);  g.draw(s);}  }
class C{  static public void main(String[] args){  final int SIZE=500;{    TextAnnotation ta=tab.createTextAnnotation(TEST_INPUT);    View view=null;    try {      view=getView(ta);    } catch (    AnnotatorException e) {      e.printStackTrace();      fail(e.getMessage());    }    for (    Constituent c : view.getConstituents()) {      assertTrue(entities.contains(c.toString()));    }  }  final int numcores=Runtime.getRuntime().availableProcessors() / 2;  ArrayList<NERThread> threads=new ArrayList<>();  for (int i=0; i < numcores; i++) {    NERThread t=new NERThread(SIZE);    threads.add(t);    t.start();  }  System.out.println("Running on " + numcores);  for (  Thread t : threads) {    try {      t.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  int count=threads.size();  long avg=0;  for (  NERThread t : threads) {    avg+=t.averageRunTime;  }  System.out.println("Average runtime is " + (avg / count));}  }
class C{  private void adjustCaret(MouseEvent e){  if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0 && getDot() != -1) {    moveCaret(e);  } else   if (!e.isPopupTrigger()) {    positionCaret(e);  }}  }
class C{  public boolean isSatisfiedBy(final Date date){  final Calendar testDateCal=Calendar.getInstance(getTimeZone());  testDateCal.setTime(date);  testDateCal.set(Calendar.MILLISECOND,0);  final Date originalDate=testDateCal.getTime();  testDateCal.add(Calendar.SECOND,-1);  final Date timeAfter=getTimeAfter(testDateCal.getTime());  return timeAfter != null && timeAfter.equals(originalDate);}  }
class C{  ListResources(Monitoring monitoringService,String projectResource,PrintStream os){  this.monitoringService=monitoringService;  this.projectResource=projectResource;  this.outputStream=os;}  }
class C{  public static VectorClock incrementT(long timestamp,VectorClock clock,int... nodes){  for (  int n : nodes)   clock=clock.incremented((short)n,timestamp);  return clock;}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  public static void copyPartial(InputStream inputStream,long fromOffset,long length,OutputStream outputStream) throws IOException {  if (fromOffset > 0) {    long skippedBytes=inputStream.skip(fromOffset);    if (skippedBytes < fromOffset) {      LOGGER.debug("unable to skip bytes {} {}",skippedBytes,fromOffset);    }  }  byte[] buffer;  if (length < COPY_BUFFER_SIZE) {    buffer=new byte[(int)length];  } else {    buffer=new byte[COPY_BUFFER_SIZE];  }  int bytesRead=0;  while (bytesRead < length) {    long remainingBytes=length - bytesRead;    int bytesToWrite=remainingBytes < COPY_BUFFER_SIZE ? (int)remainingBytes : COPY_BUFFER_SIZE;    bytesRead+=inputStream.read(buffer);    outputStream.write(buffer,0,bytesToWrite);  }}  }
class C{  public void veryverbose(CharSequence message){  log(Level.VERYVERBOSE,message);}  }
class C{  @Override public boolean evaluate(Number[] params){  return super.evaluate(params) && (isGreaterThan(params[0],upperLimit) || isLessThan(params[0],lowerLimit));}  }
class C{  public String[] readLines(){  Vector<String> linesVector=new Vector<String>();  ;  try {    FileReader fr=new FileReader(file);    BufferedReader b=new BufferedReader(fr);    boolean eof=false;    while (!eof) {      String line=b.readLine();      if (line == null) {        eof=true;      } else {        linesVector.add(line);      }    }    b.close();  } catch (  IOException e) {    throw new IllegalArgumentException("File " + file.getName() + " is unreadable : "+ e.toString());  }  String[] lines=new String[linesVector.size()];  for (int i=0; i < lines.length; i++) {    lines[i]=(String)(linesVector.get(i));  }  return lines;}  }
class C{  public List checkIfMatrixExists(final Map workflowheaderparams){  final StringBuilder dateQryStr=new StringBuilder();  final StringBuilder qntyQryStr=new StringBuilder();  prepareQuery(workflowheaderparams,dateQryStr);  prepareQuery(workflowheaderparams,qntyQryStr);  dateQryStr.append(" having  fromDate <= :fromdate  and toDate is null ");  dateQryStr.append(" or fromDate <= :fromdate  and toDate>= :fromdate   ");  if (isNotBlank((String)workflowheaderparams.get(TODATE))) {    dateQryStr.append(" or fromDate <= :todate  and toDate>= :todate   ");  }  final Query datequery=entityQueryService.getSession().createQuery(new String(dateQryStr));  addParameter(workflowheaderparams,datequery);  datequery.setParameter("fromdate",workflowheaderparams.get(FROMDATE));  if (isNotBlank((String)workflowheaderparams.get(TODATE))) {    datequery.setParameter("todate",workflowheaderparams.get(TODATE));  }  if (isNotBlank((String)workflowheaderparams.get(FROMAMOUNT))) {    qntyQryStr.append(" having  fromQty <= :fromamount  and toQty is null ");    qntyQryStr.append(" or fromQty <= :fromamount  and toQty>= :fromamount   ");  }  if (isNotBlank((String)workflowheaderparams.get(TOAMOUNT))) {    qntyQryStr.append(" or fromQty <= :toamount  and toQty>= :toamount   ");  }  final Query qntyquery=entityQueryService.getSession().createQuery(new String(qntyQryStr));  addParameter(workflowheaderparams,qntyquery);  if (isNotBlank((String)workflowheaderparams.get(FROMAMOUNT))) {    qntyquery.setParameter("fromamount",workflowheaderparams.get(FROMAMOUNT));  }  if (isNotBlank((String)workflowheaderparams.get(TOAMOUNT))) {    qntyquery.setParameter("toamount",workflowheaderparams.get(TOAMOUNT));  }  return qntyquery.list();}  }
class C{  public GraphicalView(Context context,AbstractChart chart){  super(context);  mChart=chart;  mHandler=new Handler();  if (mChart instanceof XYChart) {    mRenderer=((XYChart)mChart).getRenderer();  } else {    mRenderer=((RoundChart)mChart).getRenderer();  }  if (mRenderer.isZoomButtonsVisible()) {    zoomInImage=BitmapFactory.decodeStream(GraphicalView.class.getResourceAsStream("image/zoom_in.png"));    zoomOutImage=BitmapFactory.decodeStream(GraphicalView.class.getResourceAsStream("image/zoom_out.png"));    fitZoomImage=BitmapFactory.decodeStream(GraphicalView.class.getResourceAsStream("image/zoom-1.png"));  }  if (mRenderer instanceof XYMultipleSeriesRenderer && ((XYMultipleSeriesRenderer)mRenderer).getMarginsColor() == XYMultipleSeriesRenderer.NO_COLOR) {    ((XYMultipleSeriesRenderer)mRenderer).setMarginsColor(mPaint.getColor());  }  if (mRenderer.isZoomEnabled() && mRenderer.isZoomButtonsVisible() || mRenderer.isExternalZoomEnabled()) {    mZoomIn=new Zoom(mChart,true,mRenderer.getZoomRate());    mZoomOut=new Zoom(mChart,false,mRenderer.getZoomRate());    mFitZoom=new FitZoom(mChart);  }  int version=7;  try {    version=Integer.valueOf(Build.VERSION.SDK);  } catch (  Exception e) {  }  if (version < 7) {    mTouchHandler=new TouchHandlerOld(this,mChart);  } else {    mTouchHandler=new TouchHandler(this,mChart);  }}  }
class C{  public static int emit(List<ForgeDirection> sides,GasStack stack,TileEntity from){  if (stack == null) {    return 0;  }  List<IGasHandler> availableAcceptors=new ArrayList<IGasHandler>();  IGasHandler[] possibleAcceptors=getConnectedAcceptors(from);  for (int i=0; i < possibleAcceptors.length; i++) {    IGasHandler handler=possibleAcceptors[i];    if (handler != null && handler.canReceiveGas(ForgeDirection.getOrientation(i).getOpposite(),stack.getGas())) {      availableAcceptors.add(handler);    }  }  Collections.shuffle(availableAcceptors);  int toSend=stack.amount;  int prevSending=toSend;  if (!availableAcceptors.isEmpty()) {    int divider=availableAcceptors.size();    int remaining=toSend % divider;    int sending=(toSend - remaining) / divider;    for (    IGasHandler acceptor : availableAcceptors) {      int currentSending=sending;      if (remaining > 0) {        currentSending++;        remaining--;      }      ForgeDirection dir=ForgeDirection.getOrientation(Arrays.asList(possibleAcceptors).indexOf(acceptor)).getOpposite();      toSend-=acceptor.receiveGas(dir,new GasStack(stack.getGas(),currentSending),true);    }  }  return prevSending - toSend;}  }
class C{  private static String constructRegex(String init){  boolean hasStars=false;  boolean hasSlots=false;  boolean hasAlternatives=false;  for (int i=0; i < init.length(); i++) {switch (init.charAt(i)) {case '*':      hasStars=true;    break;case '{':  hasSlots=true;break;case '|':case '?':hasAlternatives=true;break;default :break;}}String result=(hasStars) ? replaceStars(init) : init;result=(hasSlots) ? slotRegex.matcher(result).replaceAll("(.+)") : result;result=(hasAlternatives) ? replaceComplex(result) : result;return result;}  }
class C{  public Statement eq(Object value){  return compare("=",value);}  }
class C{  private final JsonToken parseNumberText2(boolean negative) throws IOException, JsonParseException {  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();  int outPtr=0;  if (negative) {    outBuf[outPtr++]='-';  }  int intLen=0;  char c=(_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar("No digit following minus sign");  if (c == '0') {    c=_verifyNoLeadingZeroes();  }  boolean eof=false;  int_loop:   while (c >= '0' && c <= '9') {    ++intLen;    if (outPtr >= outBuf.length) {      outBuf=_textBuffer.finishCurrentSegment();      outPtr=0;    }    outBuf[outPtr++]=c;    if (_inputPtr >= _inputEnd && !loadMore()) {      c=CHAR_NULL;      eof=true;      break int_loop;    }    c=_inputBuffer[_inputPtr++];  }  if (intLen == 0) {    reportInvalidNumber("Missing integer part (next char " + _getCharDesc(c) + ")");  }  int fractLen=0;  if (c == '.') {    outBuf[outPtr++]=c;    fract_loop:     while (true) {      if (_inputPtr >= _inputEnd && !loadMore()) {        eof=true;        break fract_loop;      }      c=_inputBuffer[_inputPtr++];      if (c < INT_0 || c > INT_9) {        break fract_loop;      }      ++fractLen;      if (outPtr >= outBuf.length) {        outBuf=_textBuffer.finishCurrentSegment();        outPtr=0;      }      outBuf[outPtr++]=c;    }    if (fractLen == 0) {      reportUnexpectedNumberChar(c,"Decimal point not followed by a digit");    }  }  int expLen=0;  if (c == 'e' || c == 'E') {    if (outPtr >= outBuf.length) {      outBuf=_textBuffer.finishCurrentSegment();      outPtr=0;    }    outBuf[outPtr++]=c;    c=(_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar("expected a digit for number exponent");    if (c == '-' || c == '+') {      if (outPtr >= outBuf.length) {        outBuf=_textBuffer.finishCurrentSegment();        outPtr=0;      }      outBuf[outPtr++]=c;      c=(_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar("expected a digit for number exponent");    }    exp_loop:     while (c <= INT_9 && c >= INT_0) {      ++expLen;      if (outPtr >= outBuf.length) {        outBuf=_textBuffer.finishCurrentSegment();        outPtr=0;      }      outBuf[outPtr++]=c;      if (_inputPtr >= _inputEnd && !loadMore()) {        eof=true;        break exp_loop;      }      c=_inputBuffer[_inputPtr++];    }    if (expLen == 0) {      reportUnexpectedNumberChar(c,"Exponent indicator not followed by a digit");    }  }  if (!eof) {    --_inputPtr;  }  _textBuffer.setCurrentLength(outPtr);  return reset(negative,intLen,fractLen,expLen);}  }
class C{  public InterceptedStream(String index,T stream){  this.index=index;  this.stream=stream;}  }
class C{  protected void update(){  update(false);}  }
class C{  public String toString(){  return JSDocSerializer.toJSDocString(this);}  }
class C{  @Override public XMLEventWriter createXMLEventWriter(Writer writer) throws XMLStreamException {  throw new XMLStreamException("The WBXML is a binary format!");}  }
class C{  public PRUpdateEntryVersionMessage(){}  }
class C{  public String update(){  append("SAVE CHANGES button pressed");  ;  clear();  created();  return (null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:03.114 -0500",hash_original_method="6FB962D7C77F4582D7627B370471C9FF",hash_generated_method="2A8F5ED724913FB64F6B26D3051E347C") protected void increment(){  indentation++;}  }
class C{  @Override public boolean isTimeAllowed(LocalTime time){  return PickerUtilities.isLocalTimeInRange(time,LocalTime.of(9,00),LocalTime.of(17,00),true);}  }
class C{  public void reset(){  m1=0;  n=0;}  }
class C{  public void removeLocalTempTableIndex(Index index){  if (localTempTableIndexes != null) {    localTempTableIndexes.remove(index.getName());synchronized (database) {      index.removeChildrenAndResources(this);    }  }}  }
class C{  private void writeNonstuffed(int b) throws IOException {  out.write(b);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  doPost(request,response);}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcs.addPropertyChangeListener(pcl);}  }
class C{  public List<NamedRelatedResourceRep> listByHost(URI hostId){  return getList(PathConstants.IPINTERFACE_BY_HOST_URL,hostId);}  }
class C{  private void verifyOneofContainingType(OneofDescriptor oneof){  if (oneof.getContainingType() != type) {    throw new IllegalArgumentException("OneofDescriptor does not match message type.");  }}  }
class C{  @Deprecated public static int dragViewToY(ActivityInstrumentationTestCase test,View v,int gravity,int toY){  return dragViewToY((InstrumentationTestCase)test,v,gravity,toY);}  }
class C{  public void remove(int index){  ensureMutableMessageList();  messages.remove(index);  if (builders != null) {    SingleFieldBuilder<MType,BType,IType> entry=builders.remove(index);    if (entry != null) {      entry.dispose();    }  }  onChanged();  incrementModCounts();}  }
class C{  public CharSet(int c){  chars=new int[2];  chars[0]=c;  chars[1]=c;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_TYPE_DECLARATION__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public TrackBuilder add(boolean... booleans){  if (booleans.length != sizeX)   throw new IllegalArgumentException("The provided args (" + booleans.length + ") did not match "+ sizeX);  List<boolean[]> list=buildList.get(currentYLevel);  if (list == null) {    list=new ArrayList<>();    buildList.add(currentYLevel,list);  }  list.add(booleans);  return this;}  }
class C{  public boolean userCanViewUser(int connectedUserId,String entidad) throws Exception {  boolean can=false;  try {    can=hasUserAuth(connectedUserId,USER_ACTION_ID_VIEW,ISicresAdminDefsKeys.NULL_ID,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  private static final void buildElementMapCacheType(final LinkedHashMap<String,CacheElement> elementMap,final InputSource inputSource) throws SAXException, IOException, ParserConfigurationException, XPathExpressionException {  final Document doc=XmlUtils.getDocumentBuilder().parse(inputSource);  int rank=0;  final XPathContext xPathContext=new XPathContext(XSD_PREFIX,XMLConstants.W3C_XML_SCHEMA_NS_URI);  final Node cacheType=XmlUtils.querySingleElement(doc,CACHE_TYPE_EMBEDDED,xPathContext);  rank=buildElementMapXPath(elementMap,doc,cacheType,rank,XSD_COMPLEX_TYPE_CHILDREN,xPathContext);}  }
class C{  public Builder withButton(@StringRes int buttonTextResourceId,View.OnClickListener onClickListener){  return withButton(rootView.getContext().getString(buttonTextResourceId),onClickListener);}  }
class C{  public static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commit();  }  return mRetainFragment;}  }
class C{  protected static void checkRectangularShape(double[][] array){  int columns=-1;  for (int row=array.length; --row >= 0; ) {    if (array[row] != null) {      if (columns == -1)       columns=array[row].length;      if (array[row].length != columns)       throw new IllegalArgumentException("All rows of array must have same number of columns.");    }  }}  }
class C{  public final static AudioClip newAudioClip(URL url){  return new sun.applet.AppletAudioClip(url);}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DEFINITION_TAGS_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DEFINITION_TAGS_POST) public BusinessObjectDefinitionTag createBusinessObjectDefinitionTag(@RequestBody BusinessObjectDefinitionTagCreateRequest request){  return businessObjectDefinitionTagService.createBusinessObjectDefinitionTag(request);}  }
class C{  int localSend(byte[] data,int len) throws IOException {  return localTcp.send(data,len);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.787 -0500",hash_original_method="7BA2DC4B038FD72F399C633B1C4B5B34",hash_generated_method="3D1B22AE31FE9AB2658DC3713C91A6C9") private Groups(){}  }
class C{  public boolean lookaheadToken(String text) throws ParseException {  return !isEmpty() && peek().text.equals(text);}  }
class C{  public IndependentDistribution queryProb(String variable){  return queryProb(variable,true);}  }
class C{  public boolean equalTo(Highlight h){  if (h == null)   return false; else {    if (this.mDataSetIndex == h.mDataSetIndex && this.mXIndex == h.mXIndex && this.mStackIndex == h.mStackIndex)     return true; else     return false;  }}  }
class C{  public byte receiveOneByte(){  Log.d(TAG,"receiveOneByte() entrance");  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0]));    return mReceivePacket.getData()[0];  } catch (  IOException e) {    e.printStackTrace();  }  return Byte.MIN_VALUE;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TAnnotableElement.class) {switch (derivedFeatureID) {case TypesPackage.TMODULE__ANNOTATIONS:      return TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static PseudoClass lookupPseudoClass(String pseudoClassName){  PseudoClass pseudoClass=PSEUDO_CLASS_MAP.get(pseudoClassName);  if (pseudoClass == null) {    throw new CSSellyException("Unsupported pseudo class: " + pseudoClassName);  }  return pseudoClass;}  }
class C{  protected int hashIndex(int hashCode,int dataSize){  return hashCode & (dataSize - 1);}  }
class C{  public static String formatJavaDocBox(String text){  requireNonNull(text);  return formatTextBox(text,JAVA_DOC_WIDTH,JAVADOC_WORDS,JAVA_DOC_SINGLE_LINE_WORDS);}  }
class C{  public boolean areTablesSet(){  return (qTables != null);}  }
class C{  public static Class checkForPrimType(String className){  return (Class)primTypes.get(className);}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  protected void initTable() throws BadElementException {  tablePDF=new Table(this.model.getNumberOfColumns());  tablePDF.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);  tablePDF.setCellsFitPage(true);  tablePDF.setWidth(100);  tablePDF.setPadding(2);  tablePDF.setSpacing(0);  smallFont=FontFactory.getFont(FontFactory.HELVETICA,7,Font.NORMAL,new Color(0,0,0));}  }
class C{  protected void addJettyHandlers() throws ClassNotFoundException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {  handlerClass=getClassLoader().loadClass("org.mortbay.jetty.Handler");  handlers=getClassLoader().loadClass("org.mortbay.jetty.handler.HandlerCollection").newInstance();  contextHandlers=getClassLoader().loadClass("org.mortbay.jetty.handler.ContextHandlerCollection").newInstance();  Object defaultHandler=getClassLoader().loadClass("org.mortbay.jetty.handler.DefaultHandler").newInstance();  Object handlerArray=Array.newInstance(handlerClass,2);  Array.set(handlerArray,0,contextHandlers);  Array.set(handlerArray,1,defaultHandler);  handlers.getClass().getMethod("setHandlers",new Class[]{handlerArray.getClass()}).invoke(handlers,new Object[]{handlerArray});  getServer().getClass().getMethod("setHandler",new Class[]{handlerClass}).invoke(getServer(),new Object[]{handlers});  addHandlerMethod=contextHandlers.getClass().getMethod("addHandler",new Class[]{handlerClass});  removeHandlerMethod=contextHandlers.getClass().getMethod("removeHandler",new Class[]{handlerClass});}  }
class C{  public ZoomLevelMaker(String name,String desc,int zoomLevel){  this.name=name;  this.description=desc;  this.zoomLevel=zoomLevel;}  }
class C{  public JTextArea(int rows,int columns){  this(null,null,rows,columns);}  }
class C{  public static Text text(String text,int wrap){  Text t=new Text(text);  t.setFont(new Font(14));  if (wrap > 0)   t.setWrappingWidth(wrap);  return t;}  }
class C{  public synchronized RVMMethod resolveInvokeSpecial(){  RVMClass thisClass=(RVMClass)type.peekType();  if (thisClass == null && name != RVMClassLoader.StandardObjectInitializerMethodName) {    thisClass=(RVMClass)type.resolve();  }  if (thisClass == null) {    return null;  }  RVMMethod sought=resolveInternal(thisClass);  if (sought.isObjectInitializer()) {    return sought;  }  RVMClass cls=sought.getDeclaringClass();  if (!cls.isSpecial()) {    return sought;  }  for (; cls != null; cls=cls.getSuperClass()) {    RVMMethod found=cls.findDeclaredMethod(sought.getName(),sought.getDescriptor());    if (found != null) {      return found;    }  }  return null;}  }
class C{  public static ProtoMethodName parseFullGrpcMethodName(String fullMethodName){  String fullServiceName=io.grpc.MethodDescriptor.extractFullServiceName(fullMethodName);  if (fullServiceName == null) {    throw new IllegalArgumentException("Could not extract full service from " + fullMethodName);  }  int serviceLength=fullServiceName.length();  if (serviceLength + 1 >= fullMethodName.length() || fullMethodName.charAt(serviceLength) != '/') {    throw new IllegalArgumentException("Could not extract method name from " + fullMethodName);  }  String methodName=fullMethodName.substring(fullServiceName.length() + 1);  int index=fullServiceName.lastIndexOf('.');  if (index == -1) {    throw new IllegalArgumentException("Could not extract package name from " + fullServiceName);  }  String packageName=fullServiceName.substring(0,index);  if (index + 1 >= fullServiceName.length() || fullServiceName.charAt(index) != '.') {    throw new IllegalArgumentException("Could not extract service from " + fullServiceName);  }  String serviceName=fullServiceName.substring(index + 1);  return new ProtoMethodName(packageName,serviceName,methodName);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.EXACT_QUANTIFIER;}  }
class C{  public Fragment(String aWord,String aMorpheme){  word=aWord;  morpheme=aMorpheme;}  }
class C{  @CallSuper protected void toggleExpansion(){  int position=getFlexibleAdapterPosition();  if (mAdapter.isExpanded(position)) {    collapseView(position);  } else   if (!mAdapter.isSelected(position)) {    expandView(position);  }}  }
class C{  public static List<URI> refIds(Collection<? extends RelatedResourceRep> refs){  List<URI> ids=new ArrayList<URI>();  if (refs != null) {    for (    RelatedResourceRep ref : refs) {      ids.add(ref.getId());    }  }  return ids;}  }
class C{  private double scandouble(int start,int end){  if (end > start + 64)   end=start + 64;  for (int i=start; i < end; i++) {switch (m_bytes[i]) {case '-':case '+':case '.':case 'e':case 'E':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      break;default :    return Double.NaN;}}char[] c=new char[end - start];for (int i=start; i < end; i++) c[i - start]=(char)m_bytes[i];try {return Double.parseDouble(new String(c));} catch (Exception e) {return Double.NaN;}}  }
class C{  protected void clearCoRoutine(){  clearCoRoutine(null);}  }
class C{  public boolean checkAccounts(){  if (m_lines.size() == 0)   return true;  for (int i=0; i < m_lines.size(); i++) {    FactLine line=(FactLine)m_lines.get(i);    MAccount account=line.getAccount();    if (account == null) {      log.warning("No Account for " + line);      return false;    }    MElementValue ev=account.getAccount();    if (ev == null) {      log.warning("No Element Value for " + account + ": "+ line);      return false;    }    if (ev.isSummary()) {      log.warning("Cannot post to Summary Account " + ev + ": "+ line);      return false;    }    if (!ev.isActive()) {      log.warning("Cannot post to Inactive Account " + ev + ": "+ line);      return false;    }  }  return true;}  }
class C{  protected void prepareResponse(final int maxlength,final int messageType){  messageContents=new byte[maxlength];  currentOutputPosition=0;  addBytes(SIGNATURE);  addULong(messageType);}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    if (eventName.compareTo("trainingSet") == 0) {      m_trainingProvider=source;    } else     if (eventName.compareTo("testSet") == 0) {      m_testProvider=source;    } else     if (eventName.compareTo("dataSet") == 0) {      m_dataProvider=source;    } else     if (eventName.compareTo("instance") == 0) {      m_instanceProvider=source;    }    m_connectedFormat=null;  }}  }
class C{  public void testEncode() throws StunException {  byte[] expectedReturn=msgFixture.errCodeTestValue;  errorCodeAttribute.setErrorClass(MsgFixture.ERROR_CLASS);  errorCodeAttribute.setErrorNumber(MsgFixture.ERROR_NUMBER);  errorCodeAttribute.setReasonPhrase(MsgFixture.REASON_PHRASE);  byte[] actualReturn=errorCodeAttribute.encode();  assertTrue("encode() did not return the expected binary array.",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  public IllegalUnbindException(String msg){  super(msg);}  }
class C{  public CRL engineGenerateCRL(InputStream inStream) throws CRLException {  if (currentCrlStream == null) {    currentCrlStream=inStream;    sCrlData=null;    sCrlDataObjectCount=0;  } else   if (currentCrlStream != inStream) {    currentCrlStream=inStream;    sCrlData=null;    sCrlDataObjectCount=0;  }  try {    if (sCrlData != null) {      if (sCrlDataObjectCount != sCrlData.size()) {        return getCRL();      } else {        sCrlData=null;        sCrlDataObjectCount=0;        return null;      }    }    PushbackInputStream pis=new PushbackInputStream(inStream);    int tag=pis.read();    if (tag == -1) {      return null;    }    pis.unread(tag);    if (tag != 0x30) {      return readPEMCRL(pis);    } else {      return readDERCRL(new ASN1InputStream(pis,true));    }  } catch (  CRLException e) {    throw e;  }catch (  Exception e) {    throw new CRLException(e.toString());  }}  }
class C{  public CAppendOrOperatorAction(final CCriteriumTree tree,final CCriteriumTreeNode parent){  super("Append OR");  m_ctree=tree;  m_parent=parent;}  }
class C{  public static void main(String[] args) throws IOException {  FileInputStream in=new FileInputStream(args[0]);  byte[] buf=new byte[in.available()];  in.read(buf);  SWFParser parser=new SWFParser();  ParseResult parseResult=parser.getParse(new Content("file:" + args[0],"file:" + args[0],buf,"application/x-shockwave-flash",new Metadata(),NutchConfiguration.create()));  Parse p=parseResult.get("file:" + args[0]);  System.out.println("Parse Text:");  System.out.println(p.getText());  System.out.println("Parse Data:");  System.out.println(p.getData());}  }
class C{  public static final Criterion flagIsSet(Flag flag){  return new FlagCriterion(flag,BooleanOperator.set());}  }
class C{  @Override public boolean startScan(){  if (!isAvailable() && !isEnabled()) {    return false;  }  if (Build.VERSION.SDK_INT >= 21) {    mLEScanner=mBluetoothAdapter.getBluetoothLeScanner();    mLeSettings=new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build();    mLeFilters=new ArrayList<ScanFilter>();  }  scanLeDevice();  return true;}  }
class C{  public static void closeTarget(){  boolean closed=false;  if (s_cc != null) {    closed=true;    s_cc.setDataSource(null);  }  s_cc=null;  if (closed)   log.fine("closed");}  }
class C{  public static boolean hasPermissionInManifest(@NonNull Context context,@NonNull String permissionName){  String packageName=context.getPackageName();  try {    PackageInfo packageInfo=context.getPackageManager().getPackageInfo(packageName,PackageManager.GET_PERMISSIONS);    final String[] declaredPermisisons=packageInfo.requestedPermissions;    if (declaredPermisisons != null && declaredPermisisons.length > 0) {      for (      String p : declaredPermisisons) {        if (p.equalsIgnoreCase(permissionName)) {          return true;        }      }    }  } catch (  PackageManager.NameNotFoundException e) {  }  return false;}  }
class C{  public boolean isCleanSession(){  return options.isCleanSession();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProjectTask[");  sb.append(get_ID()).append("-").append(getSeqNo()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public void close(){  out.close();}  }
class C{  public boolean equals(XMLString obj2){  if (obj2 != null) {    if (!obj2.hasString()) {      return obj2.equals(str());    } else {      return str().equals(obj2.toString());    }  }  return false;}  }
class C{  public boolean isFull(){  return flags == OFMatch.OFPFW_ALL || flags == OFMatch.OFPFW_ALL_SANITIZED;}  }
class C{  private void present(){  glUseProgram(quadProgram);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,tex);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glUseProgram(0);}  }
class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  ParForCVMulticlassSVMTest t=new ParForCVMulticlassSVMTest();  t.setUpBase();  t.setUp();  t.testForCVMulticlassSVMSerialDense();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec\n",elapsedMsec / 1000.0);}  }
class C{  public synchronized void addTextListener(TextListener cl){  m_textListeners.addElement(cl);}  }
class C{  public void updateUI(){  setUI((DirectoryChooserUI)LookAndFeelAddons.getUI(this,DirectoryChooserUI.class));}  }
class C{  SelectParagraphAction(){  super(selectParagraphAction);  start=new BeginParagraphAction("pigdog",false);  end=new EndParagraphAction("pigdog",true);}  }
class C{  public Iterator tuplesReversed(){  return m_tuples.iterator(rows(true));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.941 -0400",hash_original_method="D78E0EE5BCA43F28DAC7F37C22E8C1C2",hash_generated_method="D0F51912C2E997A113B2FFAC46ED94F4") public DelegateFileFilter(FileFilter filter){  if (filter == null) {    throw new IllegalArgumentException("The FileFilter must not be null");  }  this.fileFilter=filter;  this.filenameFilter=null;}  }
class C{  public void startTiming(){  if (this.running)   throw new RuntimeException("Timer is already running.");  this.startTime=System.currentTimeMillis();  this.running=true;}  }
class C{  protected void unlock(final IResourceLock resourceLock){  resourceLock.unlock();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.STATE_SPECIFICATION__SCOPE:    return scope != null;}return super.eIsSet(featureID);}  }
class C{  public String createOrUpdateFile(String title,MediaType mimeType,String parentFolderId,byte[] bytes) throws IOException {  List<String> existingFiles=listFiles(parentFolderId,String.format("title = '%s'",title));  if (existingFiles.size() > 1) {    throw new IllegalStateException(String.format("Could not update file '%s' in Drive folder id '%s' because multiple files with that " + "name already exist.",title,parentFolderId));  }  return existingFiles.isEmpty() ? createFile(title,mimeType,parentFolderId,bytes) : updateFile(existingFiles.get(0),title,mimeType,bytes);}  }
class C{  public static char[] toSimpleCharArray(byte[] barr){  char[] carr=new char[barr.length];  for (int i=0; i < barr.length; i++) {    carr[i]=(char)(barr[i] & 0xFF);  }  return carr;}  }
class C{  public static int readChars(Reader r,char[] charArray) throws IOException {  int totalCharsRead=0;  int charsRead=r.read(charArray);  while (charsRead >= 0) {    totalCharsRead+=charsRead;    if (totalCharsRead == charArray.length) {      break;    }    charsRead=r.read(charArray,totalCharsRead,charArray.length - totalCharsRead);  }  return totalCharsRead;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:51.055 -0500",hash_original_method="E70748599E06F3AAB45B7E3DFBC2B3DC",hash_generated_method="7CD5C0C667BE19B6F1C1F19C998374DC") protected SipProviderImpl(SipStackImpl sipStack){  this.eventScanner=sipStack.getEventScanner();  this.sipStack=sipStack;  this.eventScanner.incrementRefcount();  this.listeningPoints=new ConcurrentHashMap<String,ListeningPointImpl>();  this.automaticDialogSupportEnabled=this.sipStack.isAutomaticDialogSupportEnabled();  this.dialogErrorsAutomaticallyHandled=this.sipStack.isAutomaticDialogErrorHandlingEnabled();}  }
class C{  public void fatal(String msg,Object[] argArray){  innerLog(Level.FATAL,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,argArray);}  }
class C{  public static void toParcelableCollection(Collection<?> source,Collection<Parcelable> target){  for (  Object o : source) {    target.add(asParcelable(o));  }}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:19.638 -0500",hash_original_method="B8AED61CE994D23FCE3A1E2344A9A897",hash_generated_method="84E455895C890BB175A60E44375E3B7B") public boolean shouldRewriteQueryFromData(){  return ((mSearchMode & SEARCH_MODE_QUERY_REWRITE_FROM_DATA) == 1);}  }
class C{  public String[] validBaudRates(){  return new String[]{"9,600 bps"};}  }
class C{  public ToParentBlockJoinSortField(String field,Type type,boolean reverse,BitSetProducer parentFilter,BitSetProducer childFilter){  super(field,type,reverse);switch (getType()) {case STRING:case DOUBLE:case FLOAT:case LONG:case INT:    break;default :  throw new UnsupportedOperationException("Sort type " + type + " is not supported");}this.order=reverse;this.parentFilter=parentFilter;this.childFilter=childFilter;}  }
class C{  protected synchronized long expireAndGrantLock(){  if (this.grantor.isDestroyed())   return Long.MAX_VALUE;  if (!isGranted(true) && !this.grantor.isLockingSuspendedWithSync()) {    grantLockToNextRequest();  }  long result=getLeaseExpireTime();  if (result <= 0) {    result=Long.MAX_VALUE;  }  return result;}  }
class C{  SavedState(Parcelable superState){  super(superState);}  }
class C{  public static Dialog createSimpleOkDialog(Context context,String title,String message,DialogInterface.OnClickListener okClickListener){  return createSimpleOkDialog(context,title,message,context.getString(R.string.dialog_action_ok),okClickListener);}  }
class C{  ValueForKeyIterator(@Nullable Object key){  this.key=key;  KeyList<K,V> keyList=keyToKeyList.get(key);  next=(keyList == null) ? null : keyList.head;}  }
class C{  public static void approxTimeUntil(final StringBuilder sbuf,final int seconds){  if (approxUnit(sbuf,seconds,SECONDS_IN_WEEK,"week")) {    return;  }  if (approxUnit(sbuf,seconds,SECONDS_IN_DAY,"day")) {    return;  }  if (approxUnit(sbuf,seconds,SECONDS_IN_HOUR,"hour")) {    return;  }  if (approxUnit(sbuf,seconds,SECONDS_IN_MINUTE,"minute")) {    return;  }  sbuf.append("less than a minute");}  }
class C{  public void select(OMGraphic omg){  if (grp != null && grp.isSelectable(omg)) {    OMGraphicList omgl=new OMGraphicList();    omgl.add(omg);    grp.select(omgl);  }}  }
class C{  public double pdf(int k){  if (k > n)   throw new IllegalArgumentException();  return Arithmetic.binomial(n,k) * Math.pow(p,k) * Math.pow(1.0 - p,n - k);}  }
class C{  public String toString(){  return segmentName + "/" + partName;}  }
class C{  protected DecimalLiteral(BigDecimal value,IRI datatype){  super(value.toPlainString(),datatype);  this.value=value;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ArrayIntCompressed(int size,int leadingClearBits,int trailingClearBits){  init(size,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);}  }
class C{  public static void uiImpl(){  UIManager.put("ProgressBar.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ProgressBar.selectionForeground",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ProgressBar.horizontalSize",new DimensionUIResource(146,15));  UIManager.put("ProgressBar.verticalSize",new DimensionUIResource(15,146));  UIManager.put("ProgressBar.border",new BorderUIResource(BorderFactory.createEmptyBorder(0,0,0,0)));  UIManager.put("ProgressBarUI",org.jb2011.lnf.beautyeye.ch12_progress.BEProgressBarUI.class.getName());}  }
class C{  public void removeAllZeros(){  for (  K key : map.keySet()) {    AtomicLong atomic=map.get(key);    if (atomic != null && atomic.get() == 0L) {      map.remove(key,atomic);    }  }}  }
class C{  public void writeLong(long l) throws IOException {  out.write((int)l & 0xFF);  out.write((int)(l >>> 8) & 0xFF);  out.write((int)(l >>> 16) & 0xFF);  out.write((int)(l >>> 24) & 0xFF);  out.write((int)(l >>> 32) & 0xFF);  out.write((int)(l >>> 40) & 0xFF);  out.write((int)(l >>> 48) & 0xFF);  out.write((int)(l >>> 56) & 0xFF);  written+=8;}  }
class C{  public void testAuditGroupOfPages(){  System.out.println("auditGroupOfPages");  String siteUrl="http://My.testUrl.org";  String pageUrl="http://My.testUrlPage1.org";  Set<Parameter> paramSet=null;  List<String> urlList=new ArrayList<>();  urlList.add(pageUrl);  AuditServiceImpl instance=initialiseAuditService();  Audit auditCreateByAuditCommand=EasyMock.createMock(Audit.class);  AuditCommand mockAuditCommand=EasyMock.createMock(AuditCommand.class);  EasyMock.expect(mockAuditCommand.getAudit()).andReturn(auditCreateByAuditCommand).anyTimes();  EasyMock.replay(mockAuditCommand);  AuditCommandFactory mockAuditCommandFactory=EasyMock.createMock(AuditCommandFactory.class);  EasyMock.expect(mockAuditCommandFactory.create(siteUrl,urlList,paramSet)).andReturn(mockAuditCommand).anyTimes();  EasyMock.replay(mockAuditCommandFactory);  instance.setAuditCommandFactory(mockAuditCommandFactory);  AuditServiceThreadQueue mockAuditServiceThreadQueue=EasyMock.createMock(AuditServiceThreadQueue.class);  mockAuditServiceThreadQueue.add(instance);  EasyMock.expectLastCall().anyTimes();  mockAuditServiceThreadQueue.addPageAudit(mockAuditCommand);  EasyMock.expectLastCall().anyTimes();  EasyMock.replay(mockAuditServiceThreadQueue);  instance.setAuditServiceThreadQueue(mockAuditServiceThreadQueue);  Audit result=instance.auditSite(siteUrl,urlList,paramSet);  assertEquals(auditCreateByAuditCommand,result);  EasyMock.verify(mockAuditServiceThreadQueue);  EasyMock.verify(mockAuditCommand);  EasyMock.verify(mockAuditCommandFactory);}  }
class C{  private boolean isTriggering(RecoveryStatus status){  return status.getStatus() == RecoveryStatus.Status.INIT;}  }
class C{  public void dispose(){  if (boolLiteralItemProvider != null)   boolLiteralItemProvider.dispose();  if (intLiteralItemProvider != null)   intLiteralItemProvider.dispose();  if (doubleLiteralItemProvider != null)   doubleLiteralItemProvider.dispose();  if (floatLiteralItemProvider != null)   floatLiteralItemProvider.dispose();  if (hexLiteralItemProvider != null)   hexLiteralItemProvider.dispose();  if (stringLiteralItemProvider != null)   stringLiteralItemProvider.dispose();  if (nullLiteralItemProvider != null)   nullLiteralItemProvider.dispose();  if (assignmentExpressionItemProvider != null)   assignmentExpressionItemProvider.dispose();  if (conditionalExpressionItemProvider != null)   conditionalExpressionItemProvider.dispose();  if (logicalOrExpressionItemProvider != null)   logicalOrExpressionItemProvider.dispose();  if (logicalAndExpressionItemProvider != null)   logicalAndExpressionItemProvider.dispose();  if (logicalNotExpressionItemProvider != null)   logicalNotExpressionItemProvider.dispose();  if (bitwiseXorExpressionItemProvider != null)   bitwiseXorExpressionItemProvider.dispose();  if (bitwiseOrExpressionItemProvider != null)   bitwiseOrExpressionItemProvider.dispose();  if (bitwiseAndExpressionItemProvider != null)   bitwiseAndExpressionItemProvider.dispose();  if (logicalRelationExpressionItemProvider != null)   logicalRelationExpressionItemProvider.dispose();  if (shiftExpressionItemProvider != null)   shiftExpressionItemProvider.dispose();  if (numericalAddSubtractExpressionItemProvider != null)   numericalAddSubtractExpressionItemProvider.dispose();  if (numericalMultiplyDivideExpressionItemProvider != null)   numericalMultiplyDivideExpressionItemProvider.dispose();  if (numericalUnaryExpressionItemProvider != null)   numericalUnaryExpressionItemProvider.dispose();  if (primitiveValueExpressionItemProvider != null)   primitiveValueExpressionItemProvider.dispose();  if (featureCallItemProvider != null)   featureCallItemProvider.dispose();  if (elementReferenceExpressionItemProvider != null)   elementReferenceExpressionItemProvider.dispose();  if (parenthesizedExpressionItemProvider != null)   parenthesizedExpressionItemProvider.dispose();  if (typeCastExpressionItemProvider != null)   typeCastExpressionItemProvider.dispose();}  }
class C{  public SurfacePolygon(Iterable<? extends LatLon> iterable){  if (iterable == null) {    String message=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.setOuterBoundary(iterable);}  }
class C{  private void addSystemImes(Set<String> excludePackages){  final Context context=getActivity();  if (context == null)   return;  InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  List<InputMethodInfo> imis=imm.getInputMethodList();  for (  InputMethodInfo imi : imis) {    try {      if (imi.isDefault(context) && isSystemPackage(imi.getPackageName())) {        excludePackages.add(imi.getPackageName());      }    } catch (    Resources.NotFoundException rnfe) {    }  }}  }
class C{  public void finish() throws IOException {  ensureOpen();  if (finished) {    return;  }  if (current != null) {    closeEntry();  }  long off=written;  for (  XEntry xentry : xentries)   writeCEN(xentry);  writeEND(off,written - off);  finished=true;}  }
class C{  public void closeConnection(){  try {    connected=false;    if (inputStream != null) {      inputStream.close();    }    if (outputStream != null) {      outputStream.close();    }    if (socket != null) {      socket.close();    }  } catch (  IOException ignored) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-29 15:18:50.107 -0500",hash_original_method="835FE1F7A54E064837749981F903873B",hash_generated_method="FD3D2C14491231F6263B4583056E8279") public LatencyTimer(int sampleSize,int scaleFactor){  if (scaleFactor == 0) {    scaleFactor=1;  }  mScaleFactor=scaleFactor;  mSampleSize=sampleSize;}  }
class C{  public final Iterator<KnowledgeEdge> requiredEdgesIterator(){  Set<KnowledgeEdge> edges=new HashSet<>();  for (  OrderedPair<Set<MyNode>> o : requiredRulesSpecs) {    final Set<MyNode> first=o.getFirst();    for (    MyNode s1 : first) {      final Set<MyNode> second=o.getSecond();      for (      MyNode s2 : second) {        if (!s1.equals(s2)) {          edges.add(new KnowledgeEdge(s1.getName(),s2.getName()));        }      }    }  }  return edges.iterator();}  }
class C{  public static int displayWidth(String s){  int width=0;  int len=s.length();  for (int i=0; i < len; ++i) {    width+=displayWidth(s.charAt(i));  }  return width;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.515 -0500",hash_original_method="8BA6018CB8A318230609528649963F72",hash_generated_method="C565AB3185A2854C0E70614435A35BCC") public static boolean isMetaTracker(CharSequence text,Object what){  return what == CAP || what == ALT || what == SYM || what == SELECTING;}  }
class C{  private static int partition(int[] source,int left,int right,int pivotIndex){  int pivot=source[pivotIndex];  source[pivotIndex]=source[right];  source[right]=pivot;  int index=left;  for (int i=left; i < right; i++) {    if (source[i] <= pivot) {      int tmp=source[index];      source[index]=source[i];      source[i]=tmp;      index++;    }  }  int tmp=source[index];  source[index]=source[right];  source[right]=tmp;  return index;}  }
class C{  private String bufferToString(char[] charArray){  return new String(charArray,0,10);}  }
class C{  public static int indexOf(byte[] src,byte[] target,int fromIdx){  final int to=src.length - target.length + 1;  for (int i=fromIdx; i < to; i++) {    if (src[i] == target[0]) {      boolean equals=true;      for (int j=1, k=i + 1; j < target.length && equals; j++, k++) {        if (src[k] != target[j]) {          equals=false;        }      }      if (equals) {        return i;      }    }  }  return -1;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  op="view";  subjectAreaId=null;  subjectAreaAbbr=null;  courseNbr=null;  crsOfferingId=null;  instrOfferingId=null;  ctrlCrsOfferingId=null;  enrollment=null;  demand=null;  projectedDemand=null;  limit=null;  unlimited=new Boolean(false);  notOffered=null;  instrOfferingName="";  instrOfferingNameNoTitle="";  courseOfferings=DynamicList.getInstance(new ArrayList(),factoryCourseOfferings);  nextId=previousId=null;  catalogLinkLabel=null;  catalogLinkLocation=null;  byReservationOnly=false;  coordinators=null;  wkEnroll=null;  wkChange=null;  wkDrop=null;  weekStartDayOfWeek=null;  accommodation=null;  hasConflict=false;}  }
class C{  protected SetOfIntegerSyntax(int lowerBound,int upperBound){  if (lowerBound <= upperBound && lowerBound < 0) {    throw new IllegalArgumentException();  }  members=lowerBound <= upperBound ? new int[][]{{lowerBound,upperBound}} : new int[0][];}  }
class C{  private void doImage(PDFObject obj) throws IOException {  cmds.addImage(PDFImage.createImage(obj,resources));}  }
class C{  public DefaultDrawingViewTransferHandler(){}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  int[] numbers=new int[10];  System.out.print("Enter ten numbers: ");  for (int i=0; i < numbers.length; i++)   numbers[i]=input.nextInt();  printCombinations(numbers);}  }
class C{  public SparseObjectMatrix3D(int slices,int rows,int columns){  this(slices,rows,columns,slices * rows * (columns / 1000),0.2,0.5);}  }
class C{  public int peek(){  return elements[size - 1];}  }
class C{  public boolean isAssignableFrom(Schema s){  int ssize=s.getColumnCount();  if (ssize > m_size)   return false;  for (int i=0; i < ssize; ++i) {    int idx=getColumnIndex(s.getColumnName(i));    if (idx < 0)     return false;    if (!m_types[idx].equals(s.getColumnType(i)))     return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:18.861 -0500",hash_original_method="DC118FA5C7EE28B6AE7273376F31713A",hash_generated_method="EEB9E79FEAEC952302B9A8639AC3433B") public CharSequence loadLabel(PackageManager pm){  return mService.loadLabel(pm);}  }
class C{  @Override public void run(){  mGLWrapper.glDeleteTextures(1,mTextureId,0);  mTexture.mTextureId[0]=0;  mGLWrapper=null;  mTexture.mIsValid=false;}  }
class C{  public void reset(){  if (mark == -1) {    position=0;  } else {    position=mark;    mark=-1;  }}  }
class C{  public void recordProceed(ProceedHandler h){  gen.setProceedHandler(h,proceedName);}  }
class C{  public static int EEXIST(){  return Errno.EEXIST.intValue();}  }
class C{  private void checkEntry(long index,Segment segment,Segment compactSegment){  try (Entry entry=segment.get(index)){    if (entry != null) {      checkEntry(index,entry,segment,compactSegment);    } else {      compactSegment.skip(1);    }  } }  }
class C{  private void checkIndex(int idx) throws SQLException {  if (idx < 1 || idx > RowSetMD.getColumnCount()) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidcol").toString());  }}  }
class C{  private static void SetLongArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: SetLongArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    long[] destinationArray=(long[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > destinationArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(Magic.objectAsAddress(destinationArray).plus(startIndex << LOG_BYTES_IN_LONG),bufAddress,length << LOG_BYTES_IN_LONG);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public static void warning(ErrorMessages message,int line){  warnings++;  String msg=NL + "Warning";  if (line > 0)   msg=msg + " in line " + (line + 1);  err(msg + ": " + ErrorMessages.get(message));}  }
class C{  protected Messages(){}  }
class C{  protected void bindNodeListener(ActionListener l,Component node){  if (node instanceof Button) {    ((Button)node).addActionListener(l);    return;  }  ((SpanButton)node).addActionListener(l);}  }
class C{  public Duration plusMillis(long millisToAdd){  return plus(millisToAdd / 1000,(millisToAdd % 1000) * 1000_000);}  }
class C{  public static Query fixNegativeQuery(Query q){  BooleanQuery newBq=(BooleanQuery)q.clone();  newBq.add(new MatchAllDocsQuery(),BooleanClause.Occur.MUST);  return newBq;}  }
class C{  public static String relativePath(final VirtualFile root,FilePath path){  return relativePath(VfsUtil.virtualToIoFile(root),path.getIOFile());}  }
class C{  private DisplayDataMatchers(){}  }
class C{  private boolean containsBoth(N a,N b){  return nodes.containsKey(a) && nodes.containsKey(b);}  }
class C{  public static int identityHashCode(Object anObject){  return anObject == null ? 0 : ObjectModel.getObjectHashCode(anObject);}  }
class C{  public static void logException(final Logger logger,final Exception e){  logger.logException(Level.SEVERE,"Unexpected Exception",e);}  }
class C{  public ListBuffer<A> appendArray(A[] xs){  for (int i=0; i < xs.length; i++) {    append(xs[i]);  }  return this;}  }
class C{  private boolean isCapabilitySupported(Cursor cursor,String column){  return cursor.getInt(cursor.getColumnIndexOrThrow(column)) == CapabilitiesLog.SUPPORTED;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object relativeRoot=stack.pop();  return sage.vfs.VFSFactory.getInstance().createMediaSource(getString(stack),relativeRoot);}  }
class C{  public static <T>T fromJson(String json,Class<T> clazz) throws JsonParseException {  return JsonUtils.fromJson(json,clazz);}  }
class C{  public static int compare(Date left,Object right) throws PageException {  if (right instanceof String)   return compare(left,(String)right); else   if (right instanceof Number)   return compare(left.getTime() / 1000,((Number)right).doubleValue()); else   if (right instanceof Boolean)   return compare(left.getTime() / 1000,((Boolean)right).booleanValue() ? 1D : 0D); else   if (right instanceof Date)   return compare(left.getTime() / 1000,((Date)right).getTime() / 1000); else   if (right instanceof Castable) {    if (isComparableComponent((Castable)right))     return -compareComponent((Castable)right,left);    return -((Castable)right).compareTo(Caster.toDate(left,null));  } else   if (right instanceof Locale)   return compare(Caster.toString(left),(Locale)right); else   if (right == null)   return compare(left,""); else   if (right instanceof Character)   return compare(left,((Character)right).toString()); else   if (right instanceof Calendar)   return compare(left.getTime() / 1000,((Calendar)right).getTime().getTime() / 1000); else   if (right instanceof TimeZone)   return compare(Caster.toString(left),(TimeZone)right); else   return error(true,false);}  }
class C{  public static ByteString decodeHex(String hex){  if (hex == null)   throw new IllegalArgumentException("hex == null");  if (hex.length() % 2 != 0)   throw new IllegalArgumentException("Unexpected hex string: " + hex);  byte[] result=new byte[hex.length() / 2];  for (int i=0; i < result.length; i++) {    int d1=decodeHexDigit(hex.charAt(i * 2)) << 4;    int d2=decodeHexDigit(hex.charAt(i * 2 + 1));    result[i]=(byte)(d1 + d2);  }  return of(result);}  }
class C{  public N node(Object key){  int hash=hash(key);  rw.readLock().lock();  try {    Map.Entry<Integer,SortedSet<N>> firstEntry=circle.firstEntry();    if (firstEntry == null)     return null;    Map.Entry<Integer,SortedSet<N>> tailEntry=circle.tailMap(hash,true).firstEntry();    return circle.get(tailEntry == null ? firstEntry.getKey() : tailEntry.getKey()).first();  }  finally {    rw.readLock().unlock();  }}  }
class C{  private double[] fillDataPointTestHelper(Location location){  double[] point=new double[ChartView.NUM_SERIES + 1];  chartFragment.fillDataPoint(location,point);  return point;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public void abortSession() throws RcsPermissionDeniedException, RcsGenericException {  try {    mSessionIntf.abortSession();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @Deprecated protected void onDccSendRequest(String sourceNick,String sourceLogin,String sourceHostname,String filename,long address,int port,int size){}  }
class C{  public static boolean storeAsFile(Bitmap bitmap,File file,Bitmap.CompressFormat format,int quality){  OutputStream out=null;  try {    out=new BufferedOutputStream(new FileOutputStream(file));    return bitmap.compress(format,quality,out);  } catch (  FileNotFoundException e) {    Log.e(TAG,"no such file for saving bitmap: ",e);    return false;  } finally {    CloseableUtils.close(out);  }}  }
class C{  public void addArgument(final Argument arg){  args.add(arg);}  }
class C{  private static final PipelineOp addDistinct(PipelineOp left,final QueryBase query,final boolean preserveOrder,final AST2BOpContext ctx){  final int bopId=ctx.nextId();  final ProjectionNode projection=query.getProjection();  if (projection.isWildcard())   throw new AssertionError("Wildcard projection was not rewritten.");  final IVariable<?>[] vars=projection.getProjectionVars();  final PipelineOp op;  if (!ctx.nativeDistinctSolutions || preserveOrder) {    final List<NV> anns=new LinkedList<NV>();    anns.add(new NV(JVMDistinctBindingSetsOp.Annotations.BOP_ID,bopId));    anns.add(new NV(JVMDistinctBindingSetsOp.Annotations.VARIABLES,vars));    anns.add(new NV(JVMDistinctBindingSetsOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER));    anns.add(new NV(JVMDistinctBindingSetsOp.Annotations.SHARED_STATE,true));    if (preserveOrder) {      anns.add(new NV(PipelineOp.Annotations.MAX_PARALLEL,1));      anns.add(new NV(SliceOp.Annotations.REORDER_SOLUTIONS,false));    }    op=new JVMDistinctBindingSetsOp(leftOrEmpty(left),anns.toArray(new NV[anns.size()]));  } else {    if (preserveOrder) {      throw new UnsupportedOperationException();    }    final INamedSolutionSetRef namedSolutionSet=NamedSolutionSetRefUtility.newInstance(ctx.queryId,"--distinct-" + ctx.nextId(),vars);    op=new HTreeDistinctBindingSetsOp(leftOrEmpty(left),new NV(HTreeDistinctBindingSetsOp.Annotations.BOP_ID,bopId),new NV(HTreeDistinctBindingSetsOp.Annotations.VARIABLES,vars),new NV(PipelineOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(HTreeDistinctBindingSetsOp.Annotations.NAMED_SET_REF,namedSolutionSet),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(PipelineOp.Annotations.MAX_PARALLEL,1),new NV(IPredicate.Annotations.RELATION_NAME,new String[]{ctx.getLexiconNamespace()}));  }  left=applyQueryHints(op,query,ctx);  return left;}  }
class C{  private void createWorker(){  LOGGER.debug("Creating a worker.");  final String temporaryDirectoryName=(temporaryDirectoryManager == null) ? null : temporaryDirectoryManager.getReplacement();  int numberOfNewWorkers=1;  if (statsUtil.getStatsMessageListener().getConsumers() > 0) {    final StatsMessageListener statsMessageListener=statsUtil.getStatsMessageListener();    int currentRemoteWorkersCount=statsMessageListener.getConsumers() - maxConcurrentInVmWorkerCount;    int idealRemoteWorkersCount=statsMessageListener.getQueueSize() / queueConsumerRatio;    if (idealRemoteWorkersCount > currentRemoteWorkersCount) {      numberOfNewWorkers=idealRemoteWorkersCount - currentRemoteWorkersCount;      if (numberOfNewWorkers + currentRemoteWorkersCount > maxConsumerSize) {        numberOfNewWorkers=maxConsumerSize - currentRemoteWorkersCount;      }    }    if (verboseLog) {      if (verboseLogLevel > 5) {        Utilities.verboseLog("worker status: " + " tier: " + tier + " maxConsumerSize : "+ maxConsumerSize+ " currentRemoteWorkersCount "+ currentRemoteWorkersCount+ " queueConsumerRatio: "+ queueConsumerRatio+ " idealRemoteWorkersCount: "+ idealRemoteWorkersCount+ " numberOfNewWorkers: "+ numberOfNewWorkers);      }    }  }  setSubmissionWorkerRunnerClockTime();  if (highMemory) {    LOGGER.debug("Starting high memory workers.");    workerRunnerHighMemory.startupNewWorker(priority,tcpUri,temporaryDirectoryName,numberOfNewWorkers);  } else {    LOGGER.debug("Starting normal workers.");    workerRunner.startupNewWorker(priority,tcpUri,temporaryDirectoryName,numberOfNewWorkers);  }}  }
class C{  public String outputString(List list){  StringWriter out=new StringWriter();  try {    output(list,out);  } catch (  IOException e) {  }  return out.toString();}  }
class C{  public void writeTo(final OutputStream out,long position,long length) throws IOException {  while (length > 0) {    final int index=index(position);    final int offset=offset(position);    final Block block=blocks.get(index);    final int amount=(int)Math.min(block.data.length - offset,length);    out.write(block.data,offset,amount);    position+=amount;    length-=amount;  }}  }
class C{  void compress(){  if (getCount < GET_THRESHOLD)   if (!isModified() && ClassPool.releaseUnmodifiedClassFile)   removeClassFile(); else   if (isFrozen() && !wasPruned)   saveClassFile();  getCount=0;}  }
class C{  public static Script createP2SHOutputScript(byte[] hash){  checkArgument(hash.length == 20);  return new ScriptBuilder().op(OP_HASH160).data(hash).op(OP_EQUAL).build();}  }
class C{  public boolean fireMapMouseEntered(MouseEvent evt){  if (DEBUG) {    logger.fine("MapMouseSupport: fireMapMouseEntered");  }  boolean consumed=false;  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_ENTERED) > 0) {    evt=new MapMouseEvent(getParentMode(),evt);    for (    MapMouseListener listener : this) {      listener.mouseEntered(evt);      consumed=true;    }  }  if (proxy != null && !evt.isShiftDown()) {    proxy.mouseEntered(evt);    consumed=true;  }  return consumed;}  }
class C{  public SVGGraphics2DRuntimeException(String s,Exception ex){  super(s);  embedded=ex;}  }
class C{  public static Throwable runMHTest(Utils.ThrowingRunnable test) throws Throwable {  Throwable t=Utils.filterException(null,null);  if (t != null) {    System.err.printf("%nNon-critical exception caught becuse of" + " code cache size is not enough to run all test cases.%n%n");    t.printStackTrace();  }  return t;}  }
class C{  public boolean isObject(int key){  return get(key) instanceof Json.Object;}  }
class C{  public final boolean isForbiddenByGroups(String var1,String var2){  KnowledgeEdge edge=new KnowledgeEdge(var1,var2);  for (  KnowledgeGroup group : this.knowledgeGroups) {    if (group.getType() == KnowledgeGroup.FORBIDDEN && group.containsEdge(edge)) {      return true;    }  }  return false;}  }
class C{  protected void engineInitVerify(PublicKey publicKey) throws InvalidKeyException {  if (!(publicKey instanceof java.security.interfaces.DSAPublicKey)) {    throw new InvalidKeyException("not a DSA public key: " + publicKey);  }  java.security.interfaces.DSAPublicKey pub=(java.security.interfaces.DSAPublicKey)publicKey;  DSAParams params=pub.getParams();  if (params == null) {    throw new InvalidKeyException("DSA public key lacks parameters");  }  this.params=params;  this.presetY=pub.getY();  this.presetX=null;  this.presetP=params.getP();  this.presetQ=params.getQ();  this.presetG=params.getG();  this.md.reset();}  }
class C{  public ConditionVariable(){  mCondition=false;}  }
class C{  public JTree(Hashtable<?,?> value){  this(createTreeModel(value));  this.setRootVisible(false);  this.setShowsRootHandles(true);  expandRoot();}  }
class C{  private void refreshLabels(){  conflictTable.setConflictDescriptions(descriptionList.toArray(new ConflictDescription[descriptionList.size()]));  conflictTable.refresh();  final int conflictCount=descriptionList.size();  if (conflictCount > 0) {    conflictTable.setSelection(0);    getButton(IDialogConstants.OK_ID).setEnabled(true);    getButton(AUTOMERGE).setEnabled(true);  } else {    getButton(IDialogConstants.OK_ID).setEnabled(false);    getButton(AUTOMERGE).setEnabled(false);  }  if (conflictCount == 0) {    countLabel.setText(Messages.getString("ConflictDialog.NoConflictsRemaining"));  } else   if (resolveCount == 0) {    if (conflictCount == 1) {      countLabel.setText(Messages.getString("ConflictDialog.OneConflict"));    } else {      final String messageFormat=Messages.getString("ConflictDialog.MultiConflictsFormat");      countLabel.setText(MessageFormat.format(messageFormat,conflictCount));    }  } else {    if (conflictCount == 1) {      final String messageFormat=Messages.getString("ConflictDialog.OneRemainingMultiResolvedFormat");      countLabel.setText(MessageFormat.format(messageFormat,resolveCount));    } else {      final String messageFormat=Messages.getString("ConflictDialog.MultiRemainingMultiResolvedFormat");      countLabel.setText(MessageFormat.format(messageFormat,conflictCount,resolveCount));    }  }}  }
class C{  private String constructAddLUNQuery(String systemId,String targetPortId,String domainId,Map<String,String> deviceLunList,List<Path> pathList,String model) throws Exception {  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray array=new StorageArray(systemId);  Add addOp=new Add(HDSConstants.LUN_TARGET);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.ADD,addOp);  attributeMap.put(HDSConstants.MODEL,model);  if (null != deviceLunList && !deviceLunList.isEmpty()) {    for (    String device : deviceLunList.keySet()) {      String lun=deviceLunList.get(device);      Path path=new Path(targetPortId,domainId,null,lun,device);      pathList.add(path);      log.info("Device :{} lun:{}",device,lun);    }  }  attributeMap.put(HDSConstants.PATH_LIST,pathList);  String addLunInputXML=InputXMLGenerationClient.getInputXMLString(HDSConstants.ADD_PATH_TO_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  return addLunInputXML;}  }
class C{  protected void refresh(){  String sql;  PreparedStatement pstmt=null;  ResultSet rs=null;  int leadRowKey=p_table.getLeadRowKey();  if (m_C_Invoice_ID != leadRowKey) {    m_C_Invoice_ID=leadRowKey;    sql=m_sqlSchedule;    log.finest(sql);    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,m_C_Invoice_ID);      rs=pstmt.executeQuery();      scheduleTbl.loadTable(rs);      rs.close();    } catch (    Exception e) {      log.log(Level.WARNING,sql,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }}  }
class C{  public int checksum(){  return calculateChecksum(compile_checksum.toString());}  }
class C{  private void startWorkspaceSearchBarAnimation(final Workspace.State toWorkspaceState,int duration,AnimatorSet animation){  final SearchDropTargetBar.State toSearchBarState=toWorkspaceState.searchDropTargetBarState;  mLauncher.getSearchDropTargetBar().animateToState(toSearchBarState,duration,animation);}  }
class C{  public void start(BundleContext context) throws Exception {  super.start(context);  ctx=context;  Bundle bundle=Platform.getBundle(OSGI_EXTENDER_SYMBOLIC_NAME);  if (bundle == null) {    LOG.error("Spring OSGi Extender bundle is not available. Giving up!");    throw new RuntimeException();  } else   if (bundle.getState() == Bundle.INSTALLED || bundle.getState() == Bundle.RESOLVED) {    LOG.debug("Manually starting Spring's OSGi Extender");    try {      bundle.start();    } catch (    BundleException e) {      throw new RuntimeException(e);    }  }  initKerberosStatusTracker(bundle);  initKerberosServiceTracker(bundle);}  }
class C{  private Value readArray(Type type,Class real,NodeMap node) throws Exception {  Node entry=node.remove(length);  int size=0;  if (entry != null) {    String value=entry.getValue();    size=Integer.parseInt(value);  }  return new ArrayValue(real,size);}  }
class C{  public JsonWriter endObject() throws IOException {  return close(EMPTY_OBJECT,NONEMPTY_OBJECT,"}");}  }
class C{  public Matrix refresh(Matrix newMatrix,View chart,boolean invalidate){  mMatrixTouch.set(newMatrix);  limitTransAndScale(mMatrixTouch,mContentRect);  if (invalidate)   chart.invalidate();  newMatrix.set(mMatrixTouch);  return newMatrix;}  }
class C{  public static boolean isMeasureType(String shapeType){  if (shapeType == null) {    String message=Logging.getMessage("nullValue.ShapeType");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return measureTypes.contains(shapeType);}  }
class C{  private void printStatus(SyncResponse resp){  if (resp != null) {    String info=getStatusString(resp.added);    if (!info.isEmpty()) {      LOGGER.debug("Added       : " + info);    }    info=getStatusString(resp.existing);    if (!info.isEmpty()) {      LOGGER.debug("Existing    : " + info);    }    info=getStatusString(resp.deleted);    if (!info.isEmpty()) {      LOGGER.debug("Deleted     : " + info);    }    info=getStatusString(resp.not_found);    if (!info.isEmpty()) {      LOGGER.debug("Errors      : " + info);    }  }}  }
class C{  public static boolean isInSharedWithMe(File driveFile){  if (driveFile == null) {    return false;  }  String mimeType=driveFile.getMimeType();  if (!SyncUtils.KML_MIME_TYPE.equals(mimeType) && !SyncUtils.KMZ_MIME_TYPE.equals(mimeType)) {    return false;  }  return driveFile.getSharedWithMeDate() != null;}  }
class C{  EmulatedFields emulatedFields(){  return emulatedFields;}  }
class C{  public static void rollback(final CConnection connection) throws SQLException {  Preconditions.checkNotNull(connection,"IE00629: Connection argument can not be null");  if (!connection.getConnection().getAutoCommit()) {    connection.getConnection().rollback();    connection.getConnection().setAutoCommit(true);  } else {    throw new IllegalStateException("IE00712: Auto commit status must be false for manual rollback");  }}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.SETTER_DECLARATION__DEFINED_SETTER:    setDefinedSetter((TSetter)null);  return;case N4JSPackage.SETTER_DECLARATION__FPAR:setFpar((FormalParameter)null);return;}super.eUnset(featureID);}  }
class C{  public boolean isEmpty(){  return window.isEmpty();}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  protected static FileDescriptor open(int dfd,UnixPath path,String pathForPermissionCheck,Flags flags,int mode) throws UnixException {  int oflags;  if (flags.read && flags.write) {    oflags=O_RDWR;  } else {    oflags=(flags.write) ? O_WRONLY : O_RDONLY;  }  if (flags.write) {    if (flags.truncateExisting)     oflags|=O_TRUNC;    if (flags.append)     oflags|=O_APPEND;    if (flags.createNew) {      byte[] pathForSysCall=path.asByteArray();      if ((pathForSysCall[pathForSysCall.length - 1] == '.') && (pathForSysCall.length == 1 || (pathForSysCall[pathForSysCall.length - 2] == '/'))) {        throw new UnixException(EEXIST);      }      oflags|=(O_CREAT | O_EXCL);    } else {      if (flags.create)       oflags|=O_CREAT;    }  }  boolean followLinks=true;  if (!flags.createNew && (flags.noFollowLinks || flags.deleteOnClose)) {    if (flags.deleteOnClose && O_NOFOLLOW == 0) {      try {        if (UnixFileAttributes.get(path,false).isSymbolicLink())         throw new UnixException("DELETE_ON_CLOSE specified and file is a symbolic link");      } catch (      UnixException x) {        if (!flags.create || x.errno() != ENOENT)         throw x;      }    }    followLinks=false;    oflags|=O_NOFOLLOW;  }  if (flags.dsync)   oflags|=O_DSYNC;  if (flags.sync)   oflags|=O_SYNC;  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    if (pathForPermissionCheck == null)     pathForPermissionCheck=path.getPathForPermissionCheck();    if (flags.read)     sm.checkRead(pathForPermissionCheck);    if (flags.write)     sm.checkWrite(pathForPermissionCheck);    if (flags.deleteOnClose)     sm.checkDelete(pathForPermissionCheck);  }  int fd;  try {    if (dfd >= 0) {      fd=openat(dfd,path.asByteArray(),oflags,mode);    } else {      fd=UnixNativeDispatcher.open(path,oflags,mode);    }  } catch (  UnixException x) {    if (flags.createNew && (x.errno() == EISDIR)) {      x.setError(EEXIST);    }    if (!followLinks && (x.errno() == ELOOP)) {      x=new UnixException(x.getMessage() + " (NOFOLLOW_LINKS specified)");    }    throw x;  }  if (flags.deleteOnClose) {    try {      if (dfd >= 0) {        unlinkat(dfd,path.asByteArray(),0);      } else {        unlink(path);      }    } catch (    UnixException ignore) {    }  }  FileDescriptor fdObj=new FileDescriptor();  fdAccess.set(fdObj,fd);  return fdObj;}  }
class C{  public E point(Coordinate coordinate){  this.points.add(coordinate);  return thisRef();}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){}  }
class C{  public GenericFeed retrieveNextPageOfMailboxDumpRequests(Link next) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getFeed(new URL(next.getHref()),GenericFeed.class);}  }
class C{  public static void main(String[] args){  runAssociator(new Apriori(),args);}  }
class C{  public static Paint convertURIPaint(Element paintedElement,GraphicsNode paintedNode,Value paintDef,float opacity,BridgeContext ctx){  String uri=paintDef.getStringValue();  Element paintElement=ctx.getReferencedElement(paintedElement,uri);  Bridge bridge=ctx.getBridge(paintElement);  if (bridge == null || !(bridge instanceof PaintBridge)) {    throw new BridgeException(ctx,paintedElement,ERR_CSS_URI_BAD_TARGET,new Object[]{uri});  }  return ((PaintBridge)bridge).createPaint(ctx,paintElement,paintedElement,paintedNode,opacity);}  }
class C{  public void stop(){  setLedOn(false);  if (null != blinkFuture) {    blinkFuture.cancel(true);  }  if (null != blinkService) {    blinkService.shutdownNow();  }}  }
class C{  public static void changeFont(JComponent comp,double scaleFactor,int style){  Font font=comp.getFont();  font=scale(font,scaleFactor);  comp.setFont(font.deriveFont(style));}  }
class C{  @RequestMapping(value={"/admin/update/","/admin/update"},method=RequestMethod.POST) @ResponseBody public RestWrapper updateOneRecord(@ModelAttribute("generalConfig") @Valid GeneralConfig generalConfig,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    if (generalConfig.getRequired() <= 1) {      com.wipro.ats.bdre.md.dao.jpa.GeneralConfig jpaGeneralConfigUpdate=new com.wipro.ats.bdre.md.dao.jpa.GeneralConfig();      GeneralConfigId jpaGeneralConfigId=new GeneralConfigId();      jpaGeneralConfigId.setConfigGroup(generalConfig.getConfigGroup());      jpaGeneralConfigId.setGcKey(generalConfig.getKey());      jpaGeneralConfigUpdate.setId(jpaGeneralConfigId);      jpaGeneralConfigUpdate.setDefaultVal(generalConfig.getDefaultVal());      jpaGeneralConfigUpdate.setDescription(generalConfig.getDescription());      jpaGeneralConfigUpdate.setEnabled(generalConfig.isEnabled());      jpaGeneralConfigUpdate.setGcValue(generalConfig.getValue());      if (generalConfig.getRequired() == 1)       jpaGeneralConfigUpdate.setRequired(true); else       jpaGeneralConfigUpdate.setRequired(false);      jpaGeneralConfigUpdate.setType(generalConfig.getType());      LOGGER.info(generalConfig);      generalConfigDAO.update(jpaGeneralConfigUpdate);      restWrapper=new RestWrapper(generalConfig,RestWrapper.OK);      LOGGER.info(" Record with key:" + jpaGeneralConfigId.getGcKey() + " and config group:"+ jpaGeneralConfigId.getConfigGroup()+ " updated in general_config by User:"+ principal.getName());    } else {      LOGGER.error("Invalid required field's data");      restWrapper=new RestWrapper("Required field does not accest value other than 0 or 1",RestWrapper.ERROR);    }  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public MqttDefaultFilePersistence(String directory){  dataDir=new File(directory);}  }
class C{  private TreeElement<JsonElement,JsonElement> initializeCalleeTree(JsonElement jsonElement){  TreeElement<JsonElement,JsonElement> element=new TreeElement<JsonElement,JsonElement>(jsonElement.toString(),jsonElement,JsonElement.class);  getTreeElementMap().put(jsonElement,element);  JsonArray childrenArray=Utils.getChildrenArray(jsonElement);  if (childrenArray != null) {    for (int i=0; i < childrenArray.size(); i++) {      JsonElement childElement=childrenArray.get(i);      if (!Utils.isEmptyJsonObject(childElement)) {        String sig=Utils.getSignature(childElement);        if (sig != null) {          String methodName=Utils.signatureMethodName(sig);          if (!methodName.matches(".*access\\$\\d+.*")) {            TreeElement<JsonElement,JsonElement> child=initializeCalleeTree(childElement);            element.addChild(child);          }        }      }    }  }  return element;}  }
class C{  public static void store(ContentAssistHistory history,String filePath) throws CoreException {  try (FileOutputStream stream=new FileOutputStream(filePath)){    new ReaderWriter().store(history,new StreamResult(stream));  } catch (  IOException e) {    JavaPlugin.log(e);  }}  }
class C{  public static void saveXStream(File saveTo,Object model,Instances header) throws Exception {  Vector<Object> v=new Vector<Object>();  v.add(model);  if (header != null) {    v.add(header);  }  v.trimToSize();  XStream.write(saveTo.getAbsolutePath(),v);}  }
class C{  @Override protected void onProviderChanged(int appWidgetId,AppWidgetProviderInfo appWidget){  LauncherAppWidgetProviderInfo info=LauncherAppWidgetProviderInfo.fromProviderInfo(mLauncher,appWidget);  super.onProviderChanged(appWidgetId,info);  info.initSpans();}  }
class C{  public double[] keys(){  double[] keys=new double[size()];  double[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public DefaultHighLowDataset(Comparable seriesKey,Date[] date,double[] high,double[] low,double[] open,double[] close,double[] volume){  ParamChecks.nullNotPermitted(seriesKey,"seriesKey");  ParamChecks.nullNotPermitted(date,"date");  this.seriesKey=seriesKey;  this.date=date;  this.high=createNumberArray(high);  this.low=createNumberArray(low);  this.open=createNumberArray(open);  this.close=createNumberArray(close);  this.volume=createNumberArray(volume);}  }
class C{  public DownloadInfo updateDownloadInfo(DownloadInfo downloadInfo,long newDownloadId){  long oldDownloadId=downloadInfo.getDownloadId();  OMAInfo omaInfo=mPendingOMADownloads.get(oldDownloadId);  mPendingOMADownloads.remove(oldDownloadId);  mPendingOMADownloads.put(newDownloadId,omaInfo);  return DownloadInfo.Builder.fromDownloadInfo(downloadInfo).setDownloadId((int)newDownloadId).build();}  }
class C{  public static void exit(int status){  if (Config.v().getCallSystemExitOnError()) {    System.exit(status);  } else {    throw new IllegalStateException();  }}  }
class C{  protected void configureList(){  list.setFont(comboBox.getFont());  list.setForeground(comboBox.getForeground());  list.setBackground(comboBox.getBackground());  list.setSelectionForeground(UIManager.getColor("ComboBox.selectionForeground"));  list.setSelectionBackground(UIManager.getColor("ComboBox.selectionBackground"));  list.setBorder(null);  list.setCellRenderer(comboBox.getRenderer());  list.setFocusable(false);  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  setListSelection(comboBox.getSelectedIndex());  installListListeners();}  }
class C{  protected String createUniqueIdentifier(){  return new UID().toString().replace(':','_').replace('-','_');}  }
class C{  public boolean match(TypeLiteral node,Object other){  if (!(other instanceof TypeLiteral)) {    return false;  }  TypeLiteral o=(TypeLiteral)other;  return safeSubtreeMatch(node.getType(),o.getType());}  }
class C{  private static int decompose(long norm32,int qcMask,DecomposeArgs args){  int p=getExtraDataIndex(norm32);  args.length=extraData[p++];  if ((norm32 & qcMask & QC_NFKD) != 0 && args.length >= 0x100) {    p+=((args.length >> 7) & 1) + (args.length & DECOMP_LENGTH_MASK);    args.length>>=8;  }  if ((args.length & DECOMP_FLAG_LENGTH_HAS_CC) > 0) {    char bothCCs=extraData[p++];    args.cc=(UNSIGNED_BYTE_MASK) & (bothCCs >> 8);    args.trailCC=(UNSIGNED_BYTE_MASK) & bothCCs;  } else {    args.cc=args.trailCC=0;  }  args.length&=DECOMP_LENGTH_MASK;  return p;}  }
class C{  public static void copy(File source,File dest) throws IOException {  if (source.isDirectory()) {    dest.mkdir();    for (    File child : listFiles(source)) {      copy(child,new File(dest,child.getName()));    }  } else {    if (source.exists()) {      long lm=source.lastModified();      if (dest.isDirectory()) {        dest=new File(dest,source.getName());      }      FileOutputStream fos=new FileOutputStream(dest);      try {        FileInputStream fis=new FileInputStream(source);        try {          if (USE_NIO) {            nioCopy(fos,fis);          } else {            oioCopy(source,fos,fis);          }        }  finally {          fis.close();        }      }  finally {        fos.close();      }      dest.setExecutable(source.canExecute(),true);      dest.setLastModified(lm);    }  }}  }
class C{  private void findKeys(JsonParser jParser) throws QueryException, JsonParsingException {  ArrayList<String> arr=new ArrayList<String>();  String badKeyType=null;  boolean endLoop=false;  while (jParser.hasNext()) {    if (endLoop)     makeException(QueryMessage.EX_EXTRA_INPUT);    Event ev=jParser.next();switch (ev) {case VALUE_STRING:      String sval=jParser.getString();    arr.add(sval);  break;case VALUE_NUMBER:BigDecimal decval=jParser.getBigDecimal();arr.add(decval.toString());break;case END_ARRAY:endLoop=true;break;case START_ARRAY:badKeyType="array";break;case START_OBJECT:badKeyType="array";break;case VALUE_TRUE:badKeyType="true";break;case VALUE_FALSE:badKeyType="false";break;case VALUE_NULL:badKeyType="null";break;default :badKeyType=ev.toString();}if (badKeyType != null) makeException(QueryMessage.EX_INVALID_ARRAY_KEY,badKeyType);}this.idList=new HashSet<String>(arr.size());for (String key : arr) this.idList.add(key);}  }
class C{  private ArrayList<Test> generateTestList(Random random,Instance example) throws Exception {  Instances format=getDatasetFormat();  if (format == null) {    throw new Exception("Dataset format not defined.");  }  int numTests=getNumAttributes() - getNumIrrelevant();  ArrayList<Test> TestList=new ArrayList<Test>(numTests);  boolean[] irrelevant=getAttList_Irr();  for (int i=0; i < getNumAttributes(); i++) {    if (!irrelevant[i]) {      Test newTest=null;      Attribute att=example.attribute(i);      if (att.isNumeric()) {        double newSplit=random.nextDouble();        boolean newNot=newSplit < example.value(i);        newTest=new Test(i,newSplit,format,newNot);      } else {        newTest=new Test(i,example.value(i),format,false);      }      TestList.add(newTest);    }  }  return TestList;}  }
class C{  private static LimeProcess launchFileOther(String path) throws IOException {  String handler;  if (MediaType.getAudioMediaType().matches(path)) {    handler=URLHandlerSettings.AUDIO_PLAYER.getValue();  } else   if (MediaType.getVideoMediaType().matches(path)) {    handler=URLHandlerSettings.VIDEO_PLAYER.getValue();  } else   if (MediaType.getImageMediaType().matches(path)) {    handler=URLHandlerSettings.IMAGE_VIEWER.getValue();  } else {    handler=URLHandlerSettings.BROWSER.getValue();  }  QuotedStringTokenizer tok=new QuotedStringTokenizer(handler);  String[] strs=new String[tok.countTokens()];  for (int i=0; i < strs.length; i++) {    strs[i]=StringUtils.replace(tok.nextToken(),"$URL$",path);  }  return LimeProcess.exec(strs);}  }
class C{  public CCRipple3D(CGPoint pos,float r,int wav,float amp,ccGridSize gSize,float d){  super(gSize,d);  position=pos;  radius=r;  waves=wav;  amplitude=amp;  amplitudeRate=1.0f;}  }
class C{  public boolean isCmd(){  return this.cmd;}  }
class C{  private GridConcurrentFactory(){}  }
class C{  @Override public Iterator<Example> iterator(){  return new AttributesExampleReader(parent.iterator(),this);}  }
class C{  public void turnLightOn(boolean on){  System.out.println("turns the light " + (on ? "on" : "off"));  System.out.println("light " + (on ? "on" : "off"));  setLightOn(on);}  }
class C{  public boolean isSameNode(Node other){  return this == other;}  }
class C{  private Map<String,Object> parseParameters(String parameters){  Map<String,Object> parameterMap=new HashMap<>();  parameterMap.put("thumb",Boolean.FALSE);  parameterMap.put("destination","images");  String[] details=parameters.split(",");  for (int x=0; x < details.length; x++) {    String key="";    String value="";    try {      String[] d=details[x].split("=");      key=d[0].trim();      value=d[1].trim();    } catch (    Exception e) {    }    if (StringUtils.isAnyBlank(key,value)) {      continue;    }switch (key.toLowerCase()) {case "type":      MediaFileType type=MediaFileType.valueOf(value.toUpperCase());    if (type != null) {      parameterMap.put(key,type);    }  break;case "destination":parameterMap.put("destination",value);break;case "thumb":parameterMap.put(key,Boolean.parseBoolean(value));break;case "width":try {parameterMap.put(key,Integer.parseInt(value));} catch (Exception e) {}break;default :break;}}return parameterMap;}  }
class C{  public IterationObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  public boolean isInitialRangeSet(int scale){  return initialRange.get(scale) != null;}  }
class C{  public synchronized void write(byte[] buf,int off,int len) throws InterruptedException {  if (len / 1000 < mWriteHist.length - 1) {    mWriteHist[len / 1000]++;  } else {    mWriteHist[mWriteHist.length - 1]++;  }  assert buf != null;  assert 0 <= off;  assert 0 <= len;  assert off + len <= buf.length;  boolean wasEmpty=mSize == 0;  int from=off;  int remaining=len;  while (remaining > 0 && !mClosed) {    final int freeSpaceStart=(mStart + mSize) % mBuf.length;    final int freeSize=mBuf.length - mSize;    final int spaceUntilEnd=mBuf.length - freeSpaceStart;    final int copied=Math.min(remaining,Math.min(freeSize,spaceUntilEnd));    if (copied > 0) {      System.arraycopy(buf,from,mBuf,freeSpaceStart,copied);      mSize+=copied;      remaining-=copied;      from+=copied;    } else {      notifyAll();      wait(TIMEOUT);      wasEmpty=mSize == 0;    }    assert globalIntegrity();  }  if (wasEmpty) {    notifyAll();  }}  }
class C{  protected void analyzeDtoGetterMethod(Method method,MethodModel methodModel){  methodModel.setGetter(true);  Type fieldType=method.getGenericReturnType();  String fieldName=getGetterFieldName(method);  fieldAttributes.put(fieldName,fieldType);  methodModel.setFieldName(fieldName);  methodModel.setFieldType(convertType(fieldType));}  }
class C{  public void drawFigure(Graphics2D g){  AffineTransform savedTransform=null;  if (get(TRANSFORM) != null) {    savedTransform=g.getTransform();    g.transform(get(TRANSFORM));  }  Paint paint=SVGAttributeKeys.getFillPaint(this);  if (paint != null) {    g.setPaint(paint);    drawFill(g);  }  paint=SVGAttributeKeys.getStrokePaint(this);  if (paint != null && get(STROKE_WIDTH) > 0) {    g.setPaint(paint);    g.setStroke(SVGAttributeKeys.getStroke(this));    drawStroke(g);  }  if (get(TRANSFORM) != null) {    g.setTransform(savedTransform);  }}  }
class C{  public DataHolder parseModel(){  EList<PackageableElement> packagedElements=model.getPackagedElements();  StateMachine stateMachine=null;  Collection<StateMachine> stateMachines=EcoreUtil.getObjectsByType(packagedElements,UMLPackage.Literals.STATE_MACHINE);  for (  StateMachine machine : stateMachines) {    EList<State> submachineRefs=machine.getSubmachineStates();    if (submachineRefs.size() == 0) {      stateMachine=machine;    }    handleStateMachine(machine);  }  if (stateMachine == null) {    throw new IllegalArgumentException("Can't find root statemachine from model");  }  HashMap<String,List<ChoiceData<String,String>>> choicesCopy=new HashMap<String,List<ChoiceData<String,String>>>();  choicesCopy.putAll(choices);  HashMap<String,List<JunctionData<String,String>>> junctionsCopy=new HashMap<String,List<JunctionData<String,String>>>();  junctionsCopy.putAll(junctions);  return new DataHolder(new StatesData<>(stateDatas),new TransitionsData<String,String>(transitionDatas,choicesCopy,junctionsCopy,forks,joins,entrys,exits,historys));}  }
class C{  protected boolean inThreadGroup(Thread thread){  return inThreadGroup(thread.getThreadGroup());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:16.972 -0500",hash_original_method="34927A945BC3E76246E8473C47BE3D71",hash_generated_method="A76EC2CC53CA7894B143C5FBE37CF265") public static boolean isIA5String(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public JsonObject add(final String name,final JsonValue value){  if (name == null) {    throw new NullPointerException("name is null");  }  if (value == null) {    throw new NullPointerException("value is null");  }  table.add(name,names.size());  names.append(name);  values.append(value);  return this;}  }
class C{  private List<Object> collectPages(List<Object> pages,DataPageMain dpMain){  try {    CacheDataPage cacheDataPage=new CacheDataPage(dpMain);    pages.add(cacheDataPage);    if (!dpMain._leaf) {      for (      Entry e : cacheDataPage._extra._entryView) {        DataPageMain childMain=dpMain.getChildPage(e);        collectPages(pages,childMain);      }    }  } catch (  IOException e) {    pages.add("DataPage[" + dpMain._pageNumber + "]: <"+ e+ ">");  }  return pages;}  }
class C{  public static SecretKey convertBase64KeyToSecretKey(final String base64AESKey){  final byte[] rawAesKey=CashBoxUtils.base64Decode(base64AESKey,false);  final SecretKeySpec aesKey=new SecretKeySpec(rawAesKey,"AES");  return aesKey;}  }
class C{  private boolean isVisibleOnPullRequest(PrnfbButton button,PullRequest pullRequest){  return (pullRequest.getFromRef() != null && isVisibleOnRepository(button,pullRequest.getFromRef().getRepository())) || (pullRequest.getToRef() != null && isVisibleOnRepository(button,pullRequest.getToRef().getRepository()));}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  private PlatformEventFilterListener localFilter(long hnd){  return platformCtx.createLocalEventFilter(hnd);}  }
class C{  public static void join(StringBuilder out,CharSequence sep,CharSequence... items){  try {    join((Appendable)out,sep,Arrays.asList(items));  } catch (  IOException ex) {    throw new SomethingWidgyHappenedError("StringBuilder does not throw IOException",ex);  }}  }
class C{  @Override public void requestUpdateFromLayout(){  if (pin.isHigh())   setOwnState(Sensor.ACTIVE); else   setOwnState(Sensor.INACTIVE);}  }
class C{  public CustomUpdate(final Network network,final File file){  this.network=network;  StringBuilder scriptText=new StringBuilder();  String newLine=System.getProperty("line.separator");  Scanner scanner=null;  try {    scanner=new Scanner(new FileInputStream(file));    while (scanner.hasNextLine()) {      scriptText.append(scanner.nextLine() + newLine);    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  } finally {    scanner.close();  }  this.scriptString=scriptText.toString();  init();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"jmp");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a jmp instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree operand=instruction.getOperands().get(0);  final TranslationResult result=Helpers.translateOperand(environment,offset,operand,true);  instructions.addAll(result.getInstructions());  final String jumpTarget=result.getRegister();  offset=baseOffset + instructions.size();  instructions.add(ReilHelpers.createJcc(offset,OperandSize.BYTE,"1",environment.getArchitectureSize(),jumpTarget));}  }
class C{  @Deprecated public <T>byte[] writeObjectCollection(Iterable<T> objects) throws JsonProcessingException, IllegalAccessException {  try {    return writeDocumentCollection(new JSONAPIDocument<>(objects));  } catch (  DocumentSerializationException e) {    if (e.getCause() instanceof JsonProcessingException) {      throw (JsonProcessingException)e.getCause();    } else     if (e.getCause() instanceof IllegalAccessException) {      throw (IllegalAccessException)e.getCause();    }    throw new RuntimeException(e.getCause());  }}  }
class C{  public void addExportDocId(ExportDocId exportDocId){  getExportDocIds().add(exportDocId);}  }
class C{  public TimezoneOffsetFrom(UtcOffset offset){  super(offset);}  }
class C{  public void clearPanel(){  canvas.getLayer().removeAllChildren();}  }
class C{  public static void transformBooleanParameter(){  transformedBooleanParameter++;}  }
class C{  @Override public void zoom(double percent){  if (percent > 0) {  } else {    getRangeAxis().setAutoRange(true);    getDomainAxis().setAutoRange(true);  }}  }
class C{  public static void sleep(int ms){  try {    Thread.sleep(ms);  } catch (  InterruptedException ie) {    System.err.println("sleep was interrupted");  }}  }
class C{  public static int hashCode(double[] field){  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);}  }
class C{  public static String formatSimpleDecimal(double d){  return simpleFormat.format(d);}  }
class C{  public static String parseGetBucketLocation(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    return root.getText();  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public static RuntimeException throwRootCauseUnchecked(Throwable t){  return ExceptionUtil.throwDeepCauseChecked(t,RuntimeException.class);}  }
class C{  public NBTTagCompound writeToNBT(NBTTagCompound nbt){  super.writeToNBT(nbt);  if (date != null) {    nbt.setTag("Date",date.toNBT());    nbt.setTag("Item",tool.writeToNBT(new NBTTagCompound()));  }  return nbt;}  }
class C{  public static double sumMajorDiagonal(double[][] m){  double sum=0;  for (int i=0; i < m.length; i++) {    sum+=m[i][i];  }  return sum;}  }
class C{  public static byte[] readByteArrayThrowsRuntime(final DataInput in){  try {    return readByteArray(in);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public PopupMenuSpiderContextAsUser(String label){  super(label,Constant.messages.getString("attack.site.popup"));  this.setIcon(new ImageIcon(PopupMenuSpiderContextAsUser.class.getResource("/resource/icon/16/spider.png")));}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  public static void deleteCert(String certId) throws Exception {  LOG.trace("Deleting cert '{}'",certId);  execute(new DeleteCert(certId));}  }
class C{  public @Test final void testCreationNegative4(){  thrown.expect(IllegalArgumentException.class);  new User(null,TEST_PASSWORD);}  }
class C{  public void put(IValidatable bean){  for (  Binding b : _optComponents.values()) {    b.put(bean);  }  for (  Binding b : _bindings.values()) {    if (isPropertyNull(bean,b)) {      b.clear(null);    } else {      b.put(bean);    }  }  _modified=false;}  }
class C{  public static ScheduleSpec computeValues(Object[] args) throws ScheduleParameterException {  if (args.length <= 4 || args.length >= 8) {    throw new ScheduleParameterException("Invalid number of crontab parameters, expecting between 5 and 7 parameters, received " + args.length);  }  EnumMap<ScheduleUnit,SortedSet<Integer>> unitMap=new EnumMap<ScheduleUnit,SortedSet<Integer>>(ScheduleUnit.class);  Object minutes=args[0];  Object hours=args[1];  Object daysOfMonth=args[2];  Object months=args[3];  Object daysOfWeek=args[4];  unitMap.put(ScheduleUnit.MINUTES,computeValues(minutes,ScheduleUnit.MINUTES));  unitMap.put(ScheduleUnit.HOURS,computeValues(hours,ScheduleUnit.HOURS));  SortedSet<Integer> resultMonths=computeValues(months,ScheduleUnit.MONTHS);  if (daysOfWeek instanceof CronParameter && daysOfMonth instanceof CronParameter) {    throw new ScheduleParameterException("Invalid combination between days of week and days of month fields for timer:at");  }  if (resultMonths != null && resultMonths.size() == 1 && (resultMonths.first() instanceof Integer)) {    CronParameter parameter=null;    if (daysOfMonth instanceof CronParameter) {      parameter=((CronParameter)daysOfMonth);    } else     if (daysOfWeek instanceof CronParameter) {      parameter=((CronParameter)daysOfWeek);    }    if (parameter != null) {      parameter.setMonth(resultMonths.first());    }  }  SortedSet<Integer> resultDaysOfWeek=computeValues(daysOfWeek,ScheduleUnit.DAYS_OF_WEEK);  SortedSet<Integer> resultDaysOfMonth=computeValues(daysOfMonth,ScheduleUnit.DAYS_OF_MONTH);  if (resultDaysOfWeek != null && resultDaysOfWeek.size() == 1 && (resultDaysOfWeek.first() instanceof Integer)) {    if (resultDaysOfWeek.first() > 6) {      if (resultDaysOfMonth != null) {        throw new ScheduleParameterException("Invalid combination between days of week and days of month fields for timer:at");      }      resultDaysOfMonth=resultDaysOfWeek;      resultDaysOfWeek=null;    }  }  if (resultDaysOfMonth != null && resultDaysOfMonth.size() == 1 && (resultDaysOfMonth.first() instanceof Integer)) {    if (resultDaysOfWeek != null) {      throw new ScheduleParameterException("Invalid combination between days of week and days of month fields for timer:at");    }  }  unitMap.put(ScheduleUnit.DAYS_OF_WEEK,resultDaysOfWeek);  unitMap.put(ScheduleUnit.DAYS_OF_MONTH,resultDaysOfMonth);  unitMap.put(ScheduleUnit.MONTHS,resultMonths);  if (args.length > 5) {    unitMap.put(ScheduleUnit.SECONDS,computeValues(args[5],ScheduleUnit.SECONDS));  }  String timezone=null;  if (args.length > 6) {    if (!(args[6] instanceof WildcardParameter)) {      if (!(args[6] instanceof String)) {        throw new ScheduleParameterException("Invalid timezone parameter '" + args[6] + "' for timer:at, expected a string-type value");      }      timezone=(String)args[6];    }  }  CronParameter optionalDayOfMonthOp=getOptionalSpecialOp(daysOfMonth);  CronParameter optionalDayOfWeekOp=getOptionalSpecialOp(daysOfWeek);  return new ScheduleSpec(unitMap,timezone,optionalDayOfMonthOp,optionalDayOfWeekOp);}  }
class C{  private boolean portMatch(final int port,final int[] ports){  boolean portInList=false;  for (int i=0, len=ports.length; i < len; i++) {    if (port == ports[i]) {      portInList=true;      break;    }  }  return portInList;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings("unchecked") public static Map createMap(Object... args){  Map result=new LinkedHashMap();  if (args == null || args.length == 0)   return result;  for (int i=0; i < args.length - 1; i+=2)   result.put(args[i],args[i + 1]);  return result;}  }
class C{  public CLEvent copyTo(CLQueue queue,CLMem destination,CLEvent... eventsToWaitFor){  return copyTo(queue,0,getElementCount(),destination,0,eventsToWaitFor);}  }
class C{  public static String createFile(int size) throws IOException {  String fileName=getRandomName();  byte[] data=new byte[size];  random.nextBytes(data);  OutputStream out=new BufferedOutputStream(Files.newOutputStream(Paths.get(fileName),CREATE,APPEND));  out.write(data,0,data.length);  out.close();  return fileName;}  }
class C{  public static ImageTypeSpecifier createFromBufferedImageType(int bufferedImageType){  if (bufferedImageType >= BufferedImage.TYPE_INT_RGB && bufferedImageType <= BufferedImage.TYPE_BYTE_INDEXED) {    return getSpecifier(bufferedImageType);  } else   if (bufferedImageType == BufferedImage.TYPE_CUSTOM) {    throw new IllegalArgumentException("Cannot create from TYPE_CUSTOM!");  } else {    throw new IllegalArgumentException("Invalid BufferedImage type!");  }}  }
class C{  public void put(Object key,Object value){  getRenderingHints().put(key,value);}  }
class C{  public Color(float red,float green,float blue,float alpha){  this.red=red;  this.green=green;  this.blue=blue;  this.alpha=alpha;}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  String message=data.getString("message");  Log.d(TAG,"From: " + from);  Log.d(TAG,"Message: " + message);  if (from.startsWith("/topics/")) {  } else {  }  sendNotification(message);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SRuntimePackage.COMPOSITE_SLOT__SLOTS:    return slots != null && !slots.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void deletePubsubSubscription(String subscription) throws IOException {  if (pubsubClient == null) {    pubsubClient=Transport.newPubsubClient(options).build();  }  if (executeNullIfNotFound(pubsubClient.projects().subscriptions().get(subscription)) != null) {    pubsubClient.projects().subscriptions().delete(subscription).execute();  }}  }
class C{  public void join(String nickname,String password) throws XMPPException {  join(nickname,password,null,SmackConfiguration.getPacketReplyTimeout());}  }
class C{  protected boolean createTunnelToProxy(HttpRoute route,int hop,HttpContext context) throws HttpException, IOException {  throw new UnsupportedOperationException("Proxy chains are not supported.");}  }
class C{  public static void addBookmark(final CCodeBookmarkManager manager,final INaviModule module,final IAddress address){  manager.addBookmark(new CCodeBookmark(module,address,""));}  }
class C{  public Certificate requestCertificate(byte[] csr,Date notBefore,Date notAfter) throws AcmeException {  if (csr == null) {    throw new NullPointerException("csr must not be null");  }  LOG.debug("requestCertificate");  try (Connection conn=getSession().provider().connect()){    ClaimBuilder claims=new ClaimBuilder();    claims.putResource(Resource.NEW_CERT);    claims.putBase64("csr",csr);    if (notBefore != null) {      claims.put("notBefore",notBefore);    }    if (notAfter != null) {      claims.put("notAfter",notAfter);    }    int rc=conn.sendSignedRequest(getSession().resourceUri(Resource.NEW_CERT),claims,getSession());    if (rc != HttpURLConnection.HTTP_CREATED && rc != HttpURLConnection.HTTP_ACCEPTED) {      conn.throwAcmeException();    }    X509Certificate cert=null;    if (rc == HttpURLConnection.HTTP_CREATED) {      cert=conn.readCertificate();    }    URI chainCertUri=conn.getLink("up");    return new Certificate(getSession(),conn.getLocation(),chainCertUri,cert);  } catch (  IOException ex) {    throw new AcmeNetworkException(ex);  }}  }
class C{  public static int putData(final String regionName,final int noOfElememts,final int sizeOfElement){  int result=0;  final Region pr=cache.getRegion(regionName);  for (int counter=1; counter <= noOfElememts; counter++) {    byte[] baValue=new byte[sizeOfElement * 1024 * 1024];    int baSize=CachedDeserializableFactory.getByteSize(baValue);    result+=baSize;    pr.put(new Integer(counter),baValue);  }  return result;}  }
class C{  public void cacheAuthorizationContext(Service s,AuthorizationContext ctx){  cacheAuthorizationContext(s,ctx.getToken(),ctx);}  }
class C{  public void Done(){  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  public boolean drawImage(Image img,int x,int y,ImageObserver observer){  System.err.println("drawImage");  return true;}  }
class C{  public boolean isValid(){  if (!validateIpv6Addr(network_vip6)) {    return false;  }  if (!validateIpv6Addr(network_gateway6)) {    return false;  }  for (  String network_addr : network_addrs) {    if (!validateIpv6Addr(network_addr)) {      return false;    }  }  return true;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  try {    writeNormalizedChars(ch,start,length,m_lineSepUse);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public final GF2nPolynomial[] divide(GF2nPolynomial b) throws RuntimeException, ArithmeticException {  GF2nPolynomial[] result=new GF2nPolynomial[2];  GF2nPolynomial a=new GF2nPolynomial(this);  a.shrink();  GF2nPolynomial shift;  GF2nElement factor;  int bDegree=b.getDegree();  GF2nElement inv=(GF2nElement)b.coeff[bDegree].invert();  if (a.getDegree() < bDegree) {    result[0]=new GF2nPolynomial(this);    result[0].assignZeroToElements();    result[0].shrink();    result[1]=new GF2nPolynomial(this);    result[1].shrink();    return result;  }  result[0]=new GF2nPolynomial(this);  result[0].assignZeroToElements();  int i=a.getDegree() - bDegree;  while (i >= 0) {    factor=(GF2nElement)a.coeff[a.getDegree()].multiply(inv);    shift=b.scalarMultiply(factor);    shift.shiftThisLeft(i);    a=a.add(shift);    a.shrink();    result[0].coeff[i]=(GF2nElement)factor.clone();    i=a.getDegree() - bDegree;  }  result[1]=a;  result[0].shrink();  return result;}  }
class C{  public void testGenerateCertPath3() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCertPath((InputStream)null);    fail("CertificateException was not thrown");  } catch (  CertificateException e) {  }}  }
class C{  public IdentityHashMap(){  this(DEFAULT_MAX_SIZE);}  }
class C{  protected void sequence_FunctionTypeExpressionOLD_PrimaryTypeExpression_TAnonymousFormalParameterList_TypeRefWithModifiers(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void rollback(Throwable causeThrowable) throws GenericTransactionException {  UserTransaction ut=TransactionFactoryLoader.getInstance().getUserTransaction();  if (ut != null) {    try {      int status=ut.getStatus();      Debug.logVerbose("Current status : " + getTransactionStateString(status),module);      if (status != STATUS_NO_TRANSACTION) {        if (causeThrowable == null && Debug.infoOn()) {          Exception newE=new Exception("Stack Trace");          Debug.logError(newE,"[TransactionUtil.rollback]",module);        }        clearTransactionStamps();        clearTransactionBeginStack();        clearSetRollbackOnlyCause();        ut.rollback();        Debug.logInfo("Transaction rolled back",module);      } else {        Debug.logWarning("Transaction not rolled back, status is STATUS_NO_TRANSACTION",module);      }    } catch (    IllegalStateException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("Could not rollback transaction, IllegalStateException exception: " + t.toString(),t);    }catch (    SystemException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("System error, could not rollback transaction: " + t.toString(),t);    }  } else {    Debug.logInfo("No UserTransaction, transaction not rolled back",module);  }}  }
class C{  public EmptySpace(TextColor color){  this(color,TerminalSize.ONE);}  }
class C{  public Interval withDurationAfterStart(ReadableDuration duration){  long durationMillis=DateTimeUtils.getDurationMillis(duration);  if (durationMillis == toDurationMillis()) {    return this;  }  Chronology chrono=getChronology();  long startMillis=getStartMillis();  long endMillis=chrono.add(startMillis,durationMillis,1);  return new Interval(startMillis,endMillis,chrono);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.COORDINATE___X1:    setX_1((String)newValue);  return;case UmplePackage.COORDINATE___Y1:setY_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private boolean validRange(String range){  StringTokenizer tokenizer=new StringTokenizer(range,".");  boolean correct=true;  if (tokenizer.countTokens() != 4) {    correct=false;  }  try {    while (tokenizer.hasMoreTokens() && correct) {      int tokenValue=Integer.parseInt(tokenizer.nextToken());      correct=(tokenValue >= 0 && tokenValue <= 255);    }  } catch (  NumberFormatException e) {    correct=false;  }  return correct;}  }
class C{  public ConnectionMetaData parse(Object connection){  if (null == connection) {    logger.warn("Meta Information on database cannot be read for the null connection.");    return null;  }  Class<?> connectionClass=connection.getClass();  if (isClosed(connectionClass,connection)) {    if (logger.isDebugEnabled()) {      logger.debug("Meta Information on database cannot be read because the connection is closed.");    }    return null;  }  ConnectionMetaData data=new ConnectionMetaData();  Object metaData=getMetaData(connectionClass,connection);  if (null == metaData) {    logger.warn("Meta information on database cannot be read for connection " + connection.toString() + ". No database details like URL or Vendor will be displayed.");    return data;  }  Class<?> metaDataClass=metaData.getClass();  data.version=parseVersion(metaDataClass,metaData);  data.url=parseTarget(metaDataClass,metaData);  data.product=parseProduct(metaDataClass,metaData);  return data;}  }
class C{  public static void staticSetRandomEngine(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public boolean reverseCorrectIt(){  log.info("reverseCorrectIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return MMC.getInstance().isNTSCVideoFormat() ? "NTSC" : "PAL";}  }
class C{  public boolean containsField(String name){  logger.debug("Checkinf if a static field was modified or not:" + name);  return finalFields.contains(name);}  }
class C{  public synchronized void onFailedResponse(SmashError error){  if (mForwardFailedListener != null) {    mForwardFailedListener.onFailedResponse(error);  }  mResultReceived=false;  mException=error;  notifyAll();}  }
class C{  public IMqttDeliveryToken publish(String topic,MqttMessage message,String invocationContext,String activityToken){  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.SEND_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  IMqttDeliveryToken sendToken=null;  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      sendToken=myClient.publish(topic,message,invocationContext,listener);      storeSendDetails(topic,message,sendToken,invocationContext,activityToken);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError(MqttServiceConstants.SEND_ACTION,NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }  return sendToken;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.841 -0500",hash_original_method="77DF4F38C27826586F02F5EEDFEC8C8D",hash_generated_method="1EE47D848BBB7593578BC72C9E94FD3C") public void removeFromTag(){  parameters.delete(ParameterNames.FROM_TAG);}  }
class C{  public static String trimIndent(String line,int indentsToRemove,int tabWidth,int indentWidth){  return IndentManipulation.trimIndent(line,indentsToRemove,tabWidth,indentWidth);}  }
class C{  public JsonWriter endArray() throws IOException {  return close(JsonScope.EMPTY_ARRAY,JsonScope.NONEMPTY_ARRAY,"]");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:38.767 -0500",hash_original_method="6BF2611F2DCCFC5EFFF7BC07A532AE85",hash_generated_method="7D16012F544791A75B46331A6B4889DC") public static String guessMimeTypeFromExtension(String extension){  if (extension == null || extension.isEmpty()) {    return null;  }  return extensionToMimeTypeMap.get(extension);}  }
class C{  public void start(){  root.start();}  }
class C{  protected void memberEnter(JCTree tree,Env<AttrContext> env){  Env<AttrContext> prevEnv=this.env;  try {    this.env=env;    tree.accept(this);  } catch (  CompletionFailure ex) {    chk.completionError(tree.pos(),ex);  } finally {    this.env=prevEnv;  }}  }
class C{  public static double MAErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfAbsoluteError=0.0;  double expectedResult;  double result;  double error;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    error=result - expectedResult;    sumOfAbsoluteError+=Math.abs(error);  }  return (sumOfAbsoluteError / dvValues.length);}  }
class C{  public TranClob(Clob clob){  this(clob,true);}  }
class C{  public DrawerBuilder withFooter(@NonNull View footerView){  this.mFooterView=footerView;  return this;}  }
class C{  public void expandN(int i){  int k;  int[] bs;  if (len >= i) {    return;  }  len=i;  k=((i - 1) >>> 5) + 1;  if (blocks >= k) {    return;  }  if (value.length >= k) {    int j;    for (j=blocks; j < k; j++) {      value[j]=0;    }    blocks=k;    return;  }  bs=new int[k];  System.arraycopy(value,0,bs,0,blocks);  blocks=k;  value=null;  value=bs;}  }
class C{  public void write(byte[] out){  ConnectedThread r;synchronized (this) {    if (mState != STATE_CONNECTED)     return;    r=mConnectedThread;  }  r.write(out);}  }
class C{  public void processConsciousThoughts(){  Memory memory=this.bot.memory();  try {synchronized (memory) {      try {        memory.wait(10);      } catch (      InterruptedException exception) {      }      if (!isConscious()) {        return;      }      if (!memory.getActiveMemory().isEmpty()) {        incrementState(MentalState.ACTIVE);        memory.save();        this.bot.mood().evaluate();        for (        Thought thought : this.thoughts.values()) {          try {            if (thought.isConscious()) {              thought.think();            }          } catch (          Exception failed) {            this.bot.log(this,failed);          }        }        memory.getActiveMemory().clear();        memory.save();        setLastActiveTime(System.currentTimeMillis());        try {          memory.wait(10);        } catch (        InterruptedException exception) {        }        int size=memory.getActiveMemory().size();        if (size > 0) {          incrementState(MentalState.ALERT);          try {            memory.wait(1);          } catch (          InterruptedException exception) {          }          if (memory.getActiveMemory().size() > size) {            log("Sensory overload",Bot.WARNING,size);            incrementState(MentalState.PANIC);          }        }      }      try {        memory.wait(10);      } catch (      InterruptedException exception) {      }      if (memory.getActiveMemory().isEmpty()) {        int state=this.state.ordinal();        if (state >= MentalState.PANIC.ordinal()) {          decrementState(MentalState.ALERT);        } else         if (state >= MentalState.ALERT.ordinal()) {          decrementState(MentalState.ACTIVE);        } else         if (state >= MentalState.BORED.ordinal()) {          long unactiveTime=getUnactiveTime();          if (unactiveTime > UNACTIVE_TO_ASLEEP) {            decrementState(MentalState.ASLEEP);          } else           if (unactiveTime > UNACTIVE_TO_BORED) {            decrementState(MentalState.BORED);          }        }      }    }  } catch (  Exception exception) {    log(exception);  }catch (  Throwable exception) {    log(exception);    memory.getActiveMemory().clear();    memory.getShortTermMemory().clear();    memory.getLongTermMemory().clear();    memory.freeMemory();  }}  }
class C{  public void stop(){  running=false;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public synchronized int size(){  return array.size();}  }
class C{  public static String humanReadableUnits(long bytes,DecimalFormat df){  if (bytes / ONE_GB > 0) {    return df.format((float)bytes / ONE_GB) + " GB";  } else   if (bytes / ONE_MB > 0) {    return df.format((float)bytes / ONE_MB) + " MB";  } else   if (bytes / ONE_KB > 0) {    return df.format((float)bytes / ONE_KB) + " KB";  } else {    return bytes + " bytes";  }}  }
class C{  public void faceTarget(float yaw,float pitch,float rotationDivisor,AdvancedModelRenderer... boxes){  float actualRotationDivisor=rotationDivisor * boxes.length;  float yawAmount=yaw / (180.0F / (float)Math.PI) / actualRotationDivisor;  float pitchAmount=pitch / (180.0F / (float)Math.PI) / actualRotationDivisor;  for (  AdvancedModelRenderer box : boxes) {    box.rotateAngleY+=yawAmount;    box.rotateAngleX+=pitchAmount;  }}  }
class C{  public default E generateFinalResult(final S preCap){  return (E)preCap;}  }
class C{  public File compile(File source,String name,File classesRoot) throws IOException {  for (  CompilerAdapter ca : adapters) {    File output=ca.compile(source,name,classesRoot);    if (output != null)     return output;  }  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.TYPE_TYPE_REF__TYPE_ARG:    return typeArg != null;case TypeRefsPackage.TYPE_TYPE_REF__CONSTRUCTOR_REF:  return constructorRef != CONSTRUCTOR_REF_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @Override public void addDataSourceListener(DataSourceListener dsl){  m_dataListeners.add(dsl);}  }
class C{  public BreakpointConditionSetSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public DirectResponseOperatorRuntimeEnvironment(final String processingNodeId,final String pipelineId,final DirectResponseOperator directResponseOperator,final StreamingMessageQueueConsumer queueConsumer,final StreamingMessageQueueProducer queueProducer) throws RequiredInputMissingException {  if (StringUtils.isBlank(processingNodeId))   throw new RequiredInputMissingException("Missing required processing node identifier");  if (StringUtils.isBlank(pipelineId))   throw new RequiredInputMissingException("Missing required pipeline identifier");  if (directResponseOperator == null)   throw new RequiredInputMissingException("Missing required direct response operator");  if (queueConsumer == null)   throw new RequiredInputMissingException("Missing required queue consumer");  if (queueProducer == null)   throw new RequiredInputMissingException("Missing required queue producer");  this.processingNodeId=StringUtils.lowerCase(StringUtils.trim(processingNodeId));  this.pipelineId=StringUtils.lowerCase(StringUtils.trim(pipelineId));  this.operatorId=StringUtils.lowerCase(StringUtils.trim(directResponseOperator.getId()));  this.directResponseOperator=directResponseOperator;  this.queueConsumer=queueConsumer;  this.queueProducer=queueProducer;  this.running=true;  this.consumerQueueWaitStrategy=queueConsumer.getWaitStrategy();  this.destinationQueueWaitStrategy=queueProducer.getWaitStrategy();  if (logger.isDebugEnabled())   logger.debug("direct response operator init [node=" + this.processingNodeId + ", pipeline="+ this.pipelineId+ ", operator="+ this.operatorId+ "]");}  }
class C{  public static boolean isArrayByteBase64(byte[] arrayOctect){  arrayOctect=discardWhitespace(arrayOctect);  int length=arrayOctect.length;  if (length == 0) {    return true;  }  for (int i=0; i < length; i++) {    if (!isBase64(arrayOctect[i])) {      return false;    }  }  return true;}  }
class C{  public String removeKdigitsB(String num,int k){  int len=num.length() - k;  char[] stk=new char[num.length()];  int top=0;  for (int i=0; i < num.length(); i++) {    char c=num.charAt(i);    while (k > 0 && top > 0 && stk[top - 1] > c) {      top--;      k--;    }    stk[top++]=c;  }  int offset=0;  while (offset < len && stk[offset] == '0') {    offset++;  }  return offset == len ? "0" : new String(stk,offset,len - offset);}  }
