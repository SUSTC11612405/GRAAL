class C{  public SizeAnimator(String group){  super(group);}  }
class C{  @Override public void doGenerate(Monitor monitor) throws IOException {  super.doGenerate(monitor);}  }
class C{  public boolean isDataNode(){  return dataNode();}  }
class C{  public boolean canReceive(Gas gas){  if (getNeeded() == 0 || stored != null && (gas != null && gas != stored.getGas())) {    return false;  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isCopy(){  if (getTemplate() != null && !getTemplate().equals(this)) {    return true;  }  return false;}  }
class C{  public void removeZoneOrAliasMember(WBEMClient client,CIMObjectPath member,CIMObjectPath zoneOrAlias,boolean alias) throws WBEMException {  CloseableIterator<CIMObjectPath> zoneItr=null;  try {    if (alias) {      zoneItr=client.referenceNames(zoneOrAlias,_Brocade_ZoneAliasInZone,null);      while (zoneItr.hasNext()) {        CIMObjectPath associationPath=zoneItr.next();        if (member.equals(associationPath.getKeyValue("Member"))) {          client.deleteInstance(associationPath);          _log.info("Zone member of type alias : " + associationPath + " was removed.");          break;        }      }    } else {      if (zoneOrAlias.getObjectName().equals(_Brocade_Zone)) {        zoneItr=client.referenceNames(zoneOrAlias,_Brocade_ZoneMembershipSettingDataInZone,null);      } else {        zoneItr=client.referenceNames(zoneOrAlias,_Brocade_ZoneMembershipSettingDataInZoneAlias,null);      }      while (zoneItr.hasNext()) {        CIMObjectPath associationPath=zoneItr.next();        if (member.equals(associationPath.getKeyValue("SettingData"))) {          client.deleteInstance(associationPath);          _log.info("Zone or alias member: " + associationPath + " was removed.");          break;        }      }    }  }  finally {    if (zoneItr != null) {      zoneItr.close();    }  }}  }
class C{  public void test_SelectOrderBy() throws SQLException {  String selectQuery="SELECT onum FROM " + DatabaseCreator.ORDERS_TABLE + " ORDER BY onum";  ResultSet result=statement.executeQuery(selectQuery);  ArrayList<Integer> values=new ArrayList<Integer>();  values.add(Integer.valueOf(3001));  values.add(Integer.valueOf(3002));  values.add(Integer.valueOf(3003));  values.add(Integer.valueOf(3005));  values.add(Integer.valueOf(3006));  values.add(Integer.valueOf(3007));  values.add(Integer.valueOf(3008));  values.add(Integer.valueOf(3009));  values.add(Integer.valueOf(3010));  values.add(Integer.valueOf(3011));  int index=0;  while (result.next()) {    Integer onum=result.getInt("onum");    assertTrue("result set doesn't contain value",values.contains(onum));    assertEquals("result set is not sorted",index,values.indexOf(onum));    index++;  }  result.close();}  }
class C{  public TransformerHandler newTransformerHandler() throws TransformerConfigurationException {  return new TransformerIdentityImpl(m_isSecureProcessing);}  }
class C{  public In(java.net.Socket socket){  try {    InputStream is=socket.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + socket);  }}  }
class C{  @Override public void process(JCas aJCas) throws AnalysisEngineProcessException {  String text=aJCas.getDocumentText();  if (text.length() > 0) {    Sentence sentence=new Sentence(aJCas);    sentence.setBegin(0);    sentence.setEnd(text.length());    sentence.addToIndexes(aJCas);  }}  }
class C{  public SLACriteria newInstance() throws Exception {  if (getClassname() == null || getClassname().length() == 0)   throw new AdempiereSystemError("No SLA Criteria Classname");  try {    Class clazz=Class.forName(getClassname());    SLACriteria retValue=(SLACriteria)clazz.newInstance();    return retValue;  } catch (  Exception e) {    throw new AdempiereSystemError("Could not intsnciate SLA Criteria",e);  }}  }
class C{  private static double roundUp(final double val){  int exponent=(int)Math.floor(Math.log10(val));  double rval=val * Math.pow(10,-exponent);  if (rval > 5.0) {    rval=10.0;  } else   if (rval > 2.0) {    rval=5.0;  } else   if (rval > 1.0) {    rval=2.0;  }  rval*=Math.pow(10,exponent);  return rval;}  }
class C{  public String findLayoutName(Integer i){  if (resolved) {    String ret=resource_info.get(i);    return (ret == null ? "" : ret);  } else   return "";}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep deactivateQuotaDirectory(@PathParam("id") URI id,QuotaDirectoryDeleteParam param) throws InternalException {  _log.info("FileService::deactivateQtree Request recieved {}",id);  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,QuotaDirectory.class,"id");  QuotaDirectory quotaDirectory=queryResource(id);  FileShare fs=queryFileShareResource(quotaDirectory.getParent().getURI());  ArgValidator.checkFieldNotNull(fs,"filesystem");  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.DELETE_FILE_SYSTEM_QUOTA_DIR);  quotaDirectory.getOpStatus().createTaskStatus(task,op);  fs.setOpStatus(new OpStatusMap());  fs.getOpStatus().createTaskStatus(task,op);  _dbClient.persistObject(fs);  _dbClient.persistObject(quotaDirectory);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  FileController controller=getController(FileController.class,device.getSystemType());  try {    controller.deleteQuotaDirectory(device.getId(),quotaDirectory.getId(),fs.getId(),task);    quotaDirectory.setInactive(true);    _dbClient.persistObject(quotaDirectory);  } catch (  InternalException e) {    throw e;  }  auditOp(OperationTypeEnum.DELETE_FILE_SYSTEM_QUOTA_DIR,true,AuditLogManager.AUDITOP_BEGIN,quotaDirectory.getLabel(),quotaDirectory.getId().toString(),fs.getId().toString());  fs=_dbClient.queryObject(FileShare.class,fs.getId());  _log.debug("FileService::Quota directory Before sending response, FS ID : {}, Taks : {} ; Status {}",fs.getOpStatus().get(task),fs.getOpStatus().get(task).getStatus());  return toTask(quotaDirectory,task,op);}  }
class C{  public final void writeDouble(double v){  writeLong(Double.doubleToLongBits(v));}  }
class C{  final public double yieldValueBasisPoint(final Leg leg,final InterestRate y,final Date settlementDate){  final double shift=0.01;  final double dirtyPrice=npv(leg,y,settlementDate);  final double modifiedDuration=duration(leg,y,Duration.Modified,settlementDate);  return (1.0 / (-dirtyPrice * modifiedDuration)) * shift;}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public static void reallocatePooled(long memPtr,int cap){  assert !isExternal(memPtr);  assert isPooled(memPtr);  assert isAcquired(memPtr);  long data=GridUnsafe.getLong(memPtr);  assert data != 0;  int curCap=capacity(memPtr);  if (cap > curCap) {    data=GridUnsafe.reallocateMemory(data,cap);    GridUnsafe.putLong(memPtr,data);    GridUnsafe.putInt(memPtr + MEM_HDR_OFF_CAP,cap);  }}  }
class C{  public void testCertificateFactory13() throws IOException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  byte[] enc={(byte)0,(byte)2,(byte)3,(byte)4,(byte)5};  MyCertPath mc=new MyCertPath(enc);  ByteArrayOutputStream os=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(os);  oos.writeObject(mc);  oos.flush();  oos.close();  byte[] arr=os.toByteArray();  ByteArrayInputStream is=new ByteArrayInputStream(arr);  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCertPath(is);      fail("CertificateException must be thrown because input stream contains incorrect datas");    } catch (    CertificateException e) {    }    Iterator<String> it=certFs[i].getCertPathEncodings();    while (it.hasNext()) {      try {        certFs[i].generateCertPath(is,it.next());        fail("CertificateException must be thrown because input stream contains incorrect datas");      } catch (      CertificateException e) {      }    }  }}  }
class C{  private void handleBreakpointHit(StackFrame frame,Context cx){  breakFlag=false;  interrupted(cx,frame,null);}  }
class C{  private IoSessionIterator(Set<SelectionKey> keys){  iterator=keys.iterator();}  }
class C{  @NotNull public RunnerRequestCallBackBuilder<T> unmarshaller(@NotNull Unmarshallable<T> unmarshaller){  this.unmarshaller=unmarshaller;  return this;}  }
class C{  protected static String extractArg(final String argumentName,final String alternative,final List<String> args){  int i=args.indexOf(argumentName);  if (i == -1) {    return alternative;  } else   if (i == args.size() - 1) {    throw new RuntimeException("Argument " + argumentName + " specified but given no value!");  } else {    args.remove(i);    return args.remove(i);  }}  }
class C{  private void addToBuffer(){  if (list != null && !list.isEmpty()) {    ChronoIndexData info;    Collections.sort(list);    StringBuilder reverseMapping=new StringBuilder();    int size=list.size();    for (int i=1; i <= size; i++) {      info=list.get(i - 1);      if (info.getRevisionCounter() != i) {        if (reverseMapping.length() > 0) {          reverseMapping.append(" ");        }        reverseMapping.append(i);        reverseMapping.append(" ");        reverseMapping.append(info.getRevisionCounter());      }      info.setIndex(i);      info.setSortFlag(false);    }    Collections.sort(list);    StringBuilder mapping=new StringBuilder();    while (!list.isEmpty()) {      info=list.remove(0);      if (info.getRevisionCounter() != info.getIndex()) {        if (mapping.length() > 0) {          mapping.append(" ");        }        mapping.append(info.getRevisionCounter());        mapping.append(" ");        mapping.append(info.getIndex());      }    }    if (mapping.length() > 0) {      boolean sql=!insertStatement.isEmpty();      String val=(sql ? "(" : "") + articleID + (sql ? ",'" : ",\"")+ mapping.toString()+ (sql ? "','" : "\",\"")+ reverseMapping.toString()+ (sql ? "')" : "\"");      if (buffer.length() + val.length() >= MAX_ALLOWED_PACKET) {        storeBuffer();      }      if (sql && buffer.length() > insertStatement.length()) {        buffer.append(",");      }      buffer.append(val);      if (!sql) {        buffer.append("\n");      }    }  }}  }
class C{  public BaseShareCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public ColorList sort(){  return sortByCriteria(AccessCriteria.HUE,false);}  }
class C{  private Symbol enumConstant(JCTree tree,Type enumType){  if (!tree.hasTag(IDENT)) {    log.error(tree.pos(),"enum.label.must.be.unqualified.enum");    return syms.errSymbol;  }  JCIdent ident=(JCIdent)tree;  Name name=ident.name;  for (Scope.Entry e=enumType.tsym.members().lookup(name); e.scope != null; e=e.next()) {    if (e.sym.kind == VAR) {      Symbol s=ident.sym=e.sym;      ((VarSymbol)s).getConstValue();      ident.type=s.type;      return ((s.flags_field & Flags.ENUM) == 0) ? null : s;    }  }  return null;}  }
class C{  public AllLocalContainerTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  @Override final public boolean isFull(){  return true;}  }
class C{  @Override String debugDecodeSortKeyBytes(byte[] bytes,int index,int length){  StringBuilder sb=new StringBuilder();  Util.bytesToHex(sb,bytes,index,length);  return sb.toString();}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.537 -0500",hash_original_method="013FA75455B3B99BD273198992B6DC3D",hash_generated_method="E13EE25F4E019254954C6350304C79AC") public InheritableThreadLocal(){}  }
class C{  public boolean add(Object child){  if (child == null) {    throw new IllegalArgumentException(Messages.getString("beans.67"));  }  BeanContextChild proxy=null;synchronized (globalHierarchyLock) {    if (contains(child)) {      return false;    }    if (serializing) {      throw new IllegalStateException(Messages.getString("beans.68"));    }    boolean valid=validatePendingAdd(child);    if (!valid) {      throw new IllegalStateException(Messages.getString("beans.69"));    }    if (child instanceof BeanContextProxy) {      proxy=((BeanContextProxy)child).getBeanContextProxy();      if (proxy == null) {        throw new NullPointerException(Messages.getString("beans.6A"));      }    }    BeanContextChild beanContextChild=getChildBeanContextChild(child);    BCSChild childBCSC=null, proxyBCSC=null;synchronized (children) {      childBCSC=createBCSChild(child,proxy);      children.put(child,childBCSC);      if (proxy != null) {        proxyBCSC=createBCSChild(proxy,child);        children.put(proxy,proxyBCSC);      }    }    if (beanContextChild != null) {      try {        beanContextChild.setBeanContext(getBeanContextPeer());      } catch (      PropertyVetoException e) {synchronized (children) {          children.remove(child);          if (proxy != null) {            children.remove(proxy);          }        }        throw new IllegalStateException(Messages.getString("beans.6B"));      }      beanContextChild.removePropertyChangeListener("beanContext",nonSerPCL);      beanContextChild.addPropertyChangeListener("beanContext",nonSerPCL);    }synchronized (child) {      addSerializable(childBCSC);      childJustAddedHook(child,childBCSC);    }    if (proxy != null) {synchronized (proxy) {        addSerializable(proxyBCSC);        childJustAddedHook(proxy,proxyBCSC);      }    }  }  fireChildrenAdded(new BeanContextMembershipEvent(getBeanContextPeer(),proxy == null ? new Object[]{child} : new Object[]{child,proxy}));  return true;}  }
class C{  public static Map<String,String> parseJavaOptions(String str){  Map<String,String> options=new HashMap<String,String>();  String[] tokens=str.trim().split("\\s");  for (  String token : tokens) {    if (token.isEmpty()) {      continue;    }    if (!token.startsWith("-D")) {      throw new IllegalArgumentException("Cannot parse java option string [" + str + "]. Some options does not begin with -D prefix.");    }    String[] parts=token.substring(2).split("=",2);    if (parts.length != 2) {      throw new IllegalArgumentException("Cannot parse java option string [" + str + "]. The part ["+ token+ "] does not contain a =.");    }    options.put(parts[0],parts[1]);  }  return options;}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  public Object clone() throws CloneNotSupportedException {  StochasticOscillatorSeries clone=(StochasticOscillatorSeries)super.clone();  clone.yyValues=new LinkedList<Double>();  clone.fullKRValues=new LinkedList<Double>();  clone.fullDValues=new LinkedList<Double>();  return clone;}  }
class C{  public GeneralException(String msg){  super(msg);}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  Timber.i("Starting CastingServer");  sServer=new BeamServer(NetworkUtils.getWifiIPAddress(),Constants.SERVER_PORT);  return START_STICKY;}  }
class C{  public HTTPProxyData(String proxyHost,int proxyPort,String proxyUser,String proxyPass,String[] requestHeaderLines){  if (proxyHost == null)   throw new IllegalArgumentException("proxyHost must be non-null");  if (proxyPort < 0)   throw new IllegalArgumentException("proxyPort must be non-negative");  this.proxyHost=proxyHost;  this.proxyPort=proxyPort;  this.proxyUser=proxyUser;  this.proxyPass=proxyPass;  this.requestHeaderLines=requestHeaderLines;}  }
class C{  public byte[] byteValue(){  return value.clone();}  }
class C{  public boolean isAssignableFrom(Type type){  if (this == type)   return true;  if ((type == UNINIT && isReference()) || this == UNINIT && type.isReference())   return true;  if (type instanceof MultiType)   return ((MultiType)type).isAssignableTo(this);  if (type instanceof MultiArrayType)   return ((MultiArrayType)type).isAssignableTo(this);  if (clazz == null || clazz.isPrimitive())   return false;  try {    return type.clazz.subtypeOf(clazz);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public MimeBodyPart(){}  }
class C{  public void cancel(){  if (null != checkCmrJob) {    checkCmrJob.cancel();  }  busyIndicator.setBusy(false);  main.layout();}  }
class C{  public ServerReflexiveCandidate(TransportAddress address,HostCandidate base,TransportAddress stunSrvrAddr,StunCandidateHarvest stunHarvest,CandidateExtendedType extendedType){  super(address,base.getParentComponent(),CandidateType.SERVER_REFLEXIVE_CANDIDATE,extendedType,base);  setBase(base);  setStunServerAddress(stunSrvrAddr);  this.stunHarvest=stunHarvest;}  }
class C{  private static String applyTextElementSpacePolicy(String in){  String out=in.replaceAll("\r\n","\n");  out=out.replaceAll(" *\n *","\n");  out=out.replaceAll("\n"," ");  out=out.replaceAll("[ \t\\x0B\f\r]+"," ");  return out;}  }
class C{  @DSSafe(DSCat.IPC_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.888 -0500",hash_original_method="5C6BF8BFD3AA6C53F0FB54F2701C6A7B",hash_generated_method="88312878C1FA4C538B0BDCFF79C890AD") public void handleMessage(Message msg){  AsyncResult ar;switch (msg.what) {case EVENT_SET_COMPLETE:    ar=(AsyncResult)(msg.obj);  onSetComplete(ar);break;case EVENT_SET_CFF_COMPLETE:ar=(AsyncResult)(msg.obj);if ((ar.exception == null) && (msg.arg1 == 1)) {boolean cffEnabled=(msg.arg2 == 1);phone.mIccRecords.setVoiceCallForwardingFlag(1,cffEnabled);}onSetComplete(ar);break;case EVENT_GET_CLIR_COMPLETE:ar=(AsyncResult)(msg.obj);onGetClirComplete(ar);break;case EVENT_QUERY_CF_COMPLETE:ar=(AsyncResult)(msg.obj);onQueryCfComplete(ar);break;case EVENT_QUERY_COMPLETE:ar=(AsyncResult)(msg.obj);onQueryComplete(ar);break;case EVENT_USSD_COMPLETE:ar=(AsyncResult)(msg.obj);if (ar.exception != null) {state=State.FAILED;message=getErrorMessage(ar);phone.onMMIDone(this);}break;case EVENT_USSD_CANCEL_COMPLETE:phone.onMMIDone(this);break;}}  }
class C{  @Override public FieldSortBuilder missing(Object missing){  this.missing=missing;  return this;}  }
class C{  public void testIsBroken(){  checkConfig(false,"StandardAnalyzer","en","eng","",null,"ru","pt","zh","por-br","cs","dut-za","nl","de","gre-at","el","th");}  }
class C{  @SuppressWarnings("unchecked") public <T>JsonStringMap<T> createMapDtoFromJson(Reader json,Class<T> dtoInterface) throws IOException {  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  final Map<String,JsonElement> map;  try {    map=gson.fromJson(json,mapTypeCache.get(JsonElement.class));  } catch (  JsonSyntaxException e) {    final Throwable cause=e.getCause();    if (cause instanceof IOException) {      throw (IOException)cause;    }    throw e;  }  final Map<String,T> result=new LinkedHashMap<>(map.size());  for (  Map.Entry<String,JsonElement> e : map.entrySet()) {    result.put(e.getKey(),dtoProvider.fromJson(e.getValue()));  }  return new JsonStringMapImpl<>(result);}  }
class C{  public static int hash(byte[] data,int offset,int length,int seed){  return hash(ByteBuffer.wrap(data,offset,length),seed);}  }
class C{  public void updatePodcastById(Podcast podcast,Boolean isCalledManually,boolean isFeedLoadedFromLocalFile) throws IllegalArgumentException, FeedException, IOException {  Integer podcastId=podcast.getPodcastId();  try {    if (isCalledManually) {      podcast=readDao.getPodcastForUpdateById(podcastId);    }    if (podcast == null)     throw new BusinessException("No podcast found for podcast id [" + podcastId + "]");    LOG.info("UPDATING podId[" + podcast.getPodcastId() + "] with feed - "+ podcast.getUrl());    Integer podcastStatus=getFeedUpdateStatus(podcast,podcastId);    boolean checkFeedForUpdate=(podcastStatus == HttpStatusExtensionType.URL_CONTENT_MODIFIED.getCode()) || isCalledManually;    if (checkFeedForUpdate) {      List<Episode> reachableEpisodes=readDao.getAvailableEpisodesFromDB(podcastId);      podcast.setEpisodes(reachableEpisodes);      int maxIndex=readDao.getMaxEpisodeIdForPodcast(podcastId);      List<Episode> newEpisodes=getNewEpisodes(podcast,maxIndex,isFeedLoadedFromLocalFile);      if (newEpisodes.size() > 0) {        podcast.setLastUpdate(new Date());        addNewEpisodes(newEpisodes,podcast.getPodcastId());      }      List<Episode> notReachableEpisodes=getNotReachableEpisodes(podcast);      if (notReachableEpisodes.size() > 0) {        for (        Episode e : notReachableEpisodes) {          e.setIsAvailable(0);          updateDao.updateEpisodeAvailability(e);        }        podcast.setLastUpdate(new Date());      }      podcast.setAvailability(HttpStatus.SC_OK);      updateDao.updateTransientDataForPodcastById(podcast);    } else     if (podcastStatus != HttpStatus.SC_OK && podcastStatus != HttpStatus.SC_NOT_MODIFIED && podcastStatus != HttpStatusExtensionType.SOCKET_TIMEOUT_EXCEPTION.getCode()) {      podcast.setAvailability(podcastStatus);      updateDao.updatePodcastAvailability(podcast);    }  } catch (  Exception e) {    if (e instanceof MalformedURLException) {      LOG.error("MalformedURLException podcastId [ " + podcast.getPodcastId() + " ] "+ "] url ["+ podcast.getUrl()+ "] ",e);    } else     if (e instanceof IllegalArgumentException) {      LOG.error("IllegalArgumentException podcastId [ " + podcast.getPodcastId() + " ] "+ "] url ["+ podcast.getUrl()+ "] ",e);    } else     if (e instanceof FeedException) {      LOG.error("FeedException podcastId [ " + podcast.getPodcastId() + " ] "+ "] url ["+ podcast.getUrl()+ "] ",e);    } else     if (e instanceof IOException) {      LOG.error("IOException podcastId [ " + podcast.getPodcastId() + " ] "+ "] url ["+ podcast.getUrl()+ "] ",e);    } else     if (e instanceof BusinessException) {      LOG.error("Business exception podcastId [ " + podcast.getPodcastId() + " ] "+ "] url ["+ podcast.getUrl()+ "] ",e);      return;    } else {      LOG.error("Episodes still reachable but UNKNOWN ERROR when updating the podcastId [ " + podcast.getPodcastId() + " ] "+ "] url ["+ podcast.getUrl()+ "] ",e);    }    podcast.setAvailability(HttpStatusExtensionType.PODCAST_IN_ERROR.getCode());    updateDao.updateTransientDataForPodcastById(podcast);  }}  }
class C{  public void processAttributes(java.io.Writer writer,int nAttrs) throws IOException, SAXException {  String encoding=getEncoding();  for (int i=0; i < nAttrs; i++) {    final String name=m_attributes.getQName(i);    final String value=m_attributes.getValue(i);    writer.write(' ');    writer.write(name);    writer.write("=\"");    writeAttrString(writer,value,encoding);    writer.write('\"');  }}  }
class C{  public CreateIndexRequest aliases(XContentBuilder source){  return aliases(source.bytes());}  }
class C{  public InvokeStmt newInvokeStmt(Value op){  return new JInvokeStmt(op);}  }
class C{  public MoveArguments(Object destination,boolean updateReferences){  Assert.isNotNull(destination);  fDestination=destination;  fUpdateReferences=updateReferences;}  }
class C{  @Override public void addFirst(E element){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  @Override public Node generateXML(Document doc){  Element var=doc.createElement("variable");  Attr id=doc.createAttribute("id");  id.setValue(variable.replace("'",""));  var.setAttributeNode(id);  for (  Value v : InferenceUtils.getNBest(table,table.size()).keySet()) {    if (!v.equals(ValueFactory.none())) {      Element valueNode=doc.createElement("value");      if (table.get(v) < 0.99) {        Attr prob=doc.createAttribute("prob");        prob.setValue("" + StringUtils.getShortForm(table.get(v)));        valueNode.setAttributeNode(prob);      }      valueNode.setTextContent("" + v);      var.appendChild(valueNode);    }  }  return var;}  }
class C{  private static String arrayToString(int[] array){  StringBuilder sb=new StringBuilder();  boolean first=true;  for (  int i : array) {    if (first) {      first=false;    } else {      sb.append(" ");    }    sb.append(i);  }  return sb.toString();}  }
class C{  private int adjustColumn(int row,int col){  if (col < 0) {    return 0;  }  if (row == getRowCount() - 1) {    int lastRowCount=model.getByteCount() % 16;    if (lastRowCount == 0) {      lastRowCount=16;    }    if (lastRowCount < 16) {      return Math.min(col,(model.getByteCount() % 16) - 1);    }  }  return Math.min(col,getColumnCount() - 1 - 1);}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  XmlElement(Element domElem){  m_domElem=domElem;}  }
class C{  public String toString(){  return contact.toString();}  }
class C{  public History(String message,String hostname,JPAEntity entity,JobStatus jobStatus){  this(message,hostname,entity,jobStatus,0,0);}  }
class C{  private void startUnRegistration(){  final Context context=AlreadyRegisteredActivity.this;  isUnregisterBtnClicked=true;  progressDialog=ProgressDialog.show(AlreadyRegisteredActivity.this,getResources().getString(R.string.dialog_message_unregistering),getResources().getString(R.string.dialog_message_please_wait),true);  if (regId != null && !regId.isEmpty()) {    if (CommonUtils.isNetworkAvailable(context)) {      String serverIP=Constants.DEFAULT_HOST;      String prefIP=Preference.getString(AlreadyRegisteredActivity.this,Constants.PreferenceFlag.IP);      if (prefIP != null) {        serverIP=prefIP;      }      if (serverIP != null && !serverIP.isEmpty()) {        stopPolling();        ServerConfig utils=new ServerConfig();        utils.setServerIP(serverIP);        CommonUtils.callSecuredAPI(AlreadyRegisteredActivity.this,utils.getAPIServerURL(context) + Constants.UNREGISTER_ENDPOINT + regId,HTTP_METHODS.DELETE,null,AlreadyRegisteredActivity.this,Constants.UNREGISTER_REQUEST_CODE);      } else {        Log.e(TAG,"There is no valid IP to contact the server");        CommonDialogUtils.stopProgressDialog(progressDialog);        CommonDialogUtils.showNetworkUnavailableMessage(AlreadyRegisteredActivity.this);      }    } else {      Log.e(TAG,"Registration ID is not available");      CommonDialogUtils.stopProgressDialog(progressDialog);      CommonDialogUtils.showNetworkUnavailableMessage(AlreadyRegisteredActivity.this);    }  }}  }
class C{  public String toString(){  return "(" + id + OP[comparator]+ (value == null ? "" : value)+ ")";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.610 -0500",hash_original_method="ABD97DC4CA444BF0EFE71949DA3B86E2",hash_generated_method="EEFBD9DB49C2D0B1EE317844A5A57725") public boolean decodeXWapContentURI(int startIndex){  return decodeTextString(startIndex);}  }
class C{  public Log4jRollingFileAppender(Layout layout,String filename) throws IOException {  super(layout,filename);  init();}  }
class C{  public boolean isFLOATINGPOINT(){switch (value) {case CMPL_EQUAL:case CMPL_GREATER:case CMPG_LESS:case CMPL_GREATER_EQUAL:case CMPG_LESS_EQUAL:case CMPL_NOT_EQUAL:case CMPL_LESS:case CMPG_GREATER_EQUAL:case CMPG_GREATER:case CMPL_LESS_EQUAL:    return true;default :  return false;}}  }
class C{  public synchronized void close(){  if (!this.mIsClosed) {    this.mSocket.close();    this.mIsClosed=true;  }}  }
class C{  public void removeArrow(Arrow arrow){  removeArrow(arrow,false);}  }
class C{  public static boolean isDefaultPersistenceEnabled(){  return DEFAULT_PERSISTENCE_ENABLED;}  }
class C{  private String createAjaxParamsFromUpdateAreas(List<ModelForm.UpdateArea> updateAreas,Map<String,Object> extraParams,String anchor,Map<String,? extends Object> context){  StringBuilder sb=new StringBuilder();  Iterator<ModelForm.UpdateArea> updateAreaIter=updateAreas.iterator();  while (updateAreaIter.hasNext()) {    ModelForm.UpdateArea updateArea=updateAreaIter.next();    sb.append(updateArea.getAreaId()).append(",");    String ajaxTarget=updateArea.getAreaTarget(context);    String urlPath=UtilHttp.removeQueryStringFromTarget(ajaxTarget);    sb.append(this.rh.makeLink(this.request,this.response,urlPath)).append(",");    String queryString=UtilHttp.getQueryStringFromTarget(ajaxTarget).replace("?","");    Map<String,Object> parameters=UtilHttp.getQueryStringOnlyParameterMap(queryString);    Map<String,Object> ctx=UtilGenerics.checkMap(context);    Map<String,Object> updateParams=UtilGenerics.checkMap(updateArea.getParameterMap(ctx));    parameters.putAll(updateParams);    UtilHttp.canonicalizeParameterMap(parameters);    parameters.putAll(extraParams);    Iterator<Map.Entry<String,Object>> paramIter=parameters.entrySet().iterator();    while (paramIter.hasNext()) {      Map.Entry<String,Object> entry=paramIter.next();      sb.append(entry.getKey()).append("=").append(entry.getValue());      if (paramIter.hasNext()) {        sb.append("&");      }    }    if (anchor != null) {      sb.append("#").append(anchor);    }    if (updateAreaIter.hasNext()) {      sb.append(",");    }  }  Locale locale=UtilMisc.ensureLocale(context.get("locale"));  return FlexibleStringExpander.expandString(sb.toString(),context,locale);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String[] args){  TestExternalOverridenMethod tester=new TestExternalOverridenMethod();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public Bag removeObjectsAtLocation(final int x,final int y,final int z){  Bag b=field[x][y][z];  field[x][y][z]=null;  return b;}  }
class C{  protected String encode(final String value,final String encoding){  return UriUtils.encode(value,encoding);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public DrawerBuilder withActionBarDrawerToggle(@NonNull ActionBarDrawerToggle actionBarDrawerToggle){  this.mActionBarDrawerToggleEnabled=true;  this.mActionBarDrawerToggle=actionBarDrawerToggle;  return this;}  }
class C{  protected final void loadFromStrip(DataType dataType,int numStrips,int size,int width,int height,Raster raster,boolean gray) throws IOException {  if (iStream != null) {    iStream.close();  }  iStream=new FileImageInputStream(new File(dataFilePath));  iStream.seek(imageStart);  byte[] bbArray=new byte[size];  ByteBuffer bbuf=ByteBuffer.wrap(bbArray);  bbuf.order(byteOrder);  bbuf.rewind();  int r=0;  for (int i=0; i < numStrips; ++i) {    int h=Math.min(rasterLength - height * i,height);    int len=h * width * bytesPerSample;    iStream.read(bbArray,0,len);    bbuf.rewind();    bbuf.limit(len);    if (gray) {      raster.setAsGray(r,0,rasterWidth,h,bbuf,dataType,minimum,maximum,missing);    } else {      raster.setAsFloat(r,0,rasterWidth,h,bbuf,dataType,scalingFactor,minimum,maximum,missing);    }    r+=h;  }}  }
class C{  public String printTree(){  String output="\n" + this.value.toString();  if (this.children == null || this.children.isEmpty()) {    return output;  }  output+="\n(";  BFINode<EL> currentNode;  for (int i=0; i < this.children.size(); i++) {    currentNode=this.children.get(i);    output+=currentNode.printTree();  }  output+="\n)";  return output;}  }
class C{  public boolean containsAll(Collection<? extends E> c){  for (  E element : c)   if (!contains(element))   return false;  return true;}  }
class C{  protected JavadocTokenizer(ScannerFactory fac,CharBuffer buffer){  super(fac,buffer);}  }
class C{  public _BuildStatus(final _BuildStatus_Flag[] flags){  super(flags);}  }
class C{  public ScaledImageIcon createDisabledIcon(){  Image grayImage=GrayFilter.createDisabledImage(super.getImage());  return new ScaledImageIcon(grayImage,height,width);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.MORE_OP___MORE_OP_1:    return MORE_OP_1_EDEFAULT == null ? moreOp_1 != null : !MORE_OP_1_EDEFAULT.equals(moreOp_1);}return super.eIsSet(featureID);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.308 -0500",hash_original_method="902CB288EB494C9205FE6BF90EDE4AF5",hash_generated_method="FC1FE090735FBE5C0F1CC10B889AFD9F") public String replaceFirst(String replacement){  reset();  StringBuffer buffer=new StringBuffer(input.length());  if (find()) {    appendReplacement(buffer,replacement);  }  return appendTail(buffer).toString();}  }
class C{  public boolean suspend(){  if (log == null)   log=CLogger.getCLogger(getClass());  if (isRunning()) {    m_state=STATE_Suspended;    log.info("suspending ...");    return true;  }  String msg="suspend failed: Not Running (" + getState() + ")";  if (m_throwException)   throw new IllegalStateException(msg);  log.warning(msg);  return false;}  }
class C{  public void sendHttpPlaintextDownstreamMessage(String destination,Message message) throws IOException {  StringBuilder request=new StringBuilder();  request.append(PARAM_TO).append('=').append(destination);  addOptParameter(request,PARAM_DELAY_WHILE_IDLE,message.isDelayWhileIdle());  addOptParameter(request,PARAM_DRY_RUN,message.isDryRun());  addOptParameter(request,PARAM_COLLAPSE_KEY,message.getCollapseKey());  addOptParameter(request,PARAM_RESTRICTED_PACKAGE_NAME,message.getRestrictedPackageName());  addOptParameter(request,PARAM_TIME_TO_LIVE,message.getTimeToLive());  for (  Map.Entry<String,String> entry : message.getData().entrySet()) {    if (entry.getKey() != null && entry.getValue() != null) {      String prefixedKey=PARAM_PLAINTEXT_PAYLOAD_PREFIX + entry.getKey();      addOptParameter(request,prefixedKey,URLEncoder.encode(entry.getValue(),UTF8));    }  }  HttpRequest httpRequest=new HttpRequest();  httpRequest.setHeader(HEADER_CONTENT_TYPE,CONTENT_TYPE_FORM_ENCODED);  httpRequest.setHeader(HEADER_AUTHORIZATION,"key=" + key);  httpRequest.doPost(GCM_SEND_ENDPOINT,request.toString());  if (httpRequest.getResponseCode() != 200) {    throw new IOException("Invalid request." + "\nStatus: " + httpRequest.getResponseCode() + "\nResponse: "+ httpRequest.getResponseBody());  }  String[] lines=httpRequest.getResponseBody().split("\n");  if (lines.length == 0 || lines[0].equals("")) {    throw new IOException("Received empty response from GCM service.");  }  String[] firstLineValues=lines[0].split("=");  if (firstLineValues.length != 2) {    throw new IOException("Invalid response from GCM: " + httpRequest.getResponseBody());  }switch (firstLineValues[0]) {case RESPONSE_PLAINTEXT_MESSAGE_ID:    logger.log(Log.INFO,"Message sent.\nid: " + firstLineValues[1]);  if (lines.length > 1) {    String[] secondLineValues=lines[1].split("=");    if (secondLineValues.length == 2 && secondLineValues[0].equals(RESPONSE_PLAINTEXT_CANONICAL_REG_ID)) {      logger.log(Log.INFO,"Message sent: canonical registration id = " + secondLineValues[1]);    } else {      logger.log(Log.ERROR,"Invalid response from GCM." + "\nResponse: " + httpRequest.getResponseBody());    }  }break;case RESPONSE_PLAINTEXT_ERROR:logger.log(Log.ERROR,"Message failed.\nError: " + firstLineValues[1]);break;default :logger.log(Log.ERROR,"Invalid response from GCM." + "\nResponse: " + httpRequest.getResponseBody());break;}}  }
class C{  public static void assertNull(Object object){  assertNull(object,"");}  }
class C{  public void paintBackgrounds(Graphics g){  if (Display.impl.shouldPaintBackground()) {    drawPainters(g,this.getParent(),this,getAbsoluteX() + getScrollX(),getAbsoluteY() + getScrollY(),getWidth(),getHeight());  }}  }
class C{  public boolean isSecure(){  return protocolInUse.isSecure();}  }
class C{  private void handleHandledNodesSet(CCFGNode node,Set<CCFGNode> handled){  if (handled.contains(node)) {    LoggingUtils.getEvoLogger().info("We are in a recursive call. Skipping the node");  }  ;  handled.add(node);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRecordAccess[AD_Role_ID=").append(getAD_Role_ID()).append(",AD_Table_ID=").append(getAD_Table_ID()).append(",Record_ID=").append(getRecord_ID()).append(",Active=").append(isActive()).append(",Exclude=").append(isExclude()).append(",ReadOnly=").append(super.isReadOnly()).append(",Dependent=").append(isDependentEntities()).append("]");  return sb.toString();}  }
class C{  public List<Node> listAvailableFunctions(Class<?> type){  List<Node> result=new ArrayList<Node>();  for (  Node node : availableNodes) {    if ((node.getNumberOfArguments() > 0) && type.isAssignableFrom(node.getReturnType())) {      result.add(node);    }  }  if (result.isEmpty()) {    result.addAll(listAvailableTerminals(type));  }  return result;}  }
class C{  @HLELogging(level="info") @HLEFunction(nid=0xD5DDAB1F,version=150) public int sceKernelLoadModuleVSH(PspString path,int flags,@CanBeNull TPointer optionAddr){  SceKernelLMOption lmOption=null;  if (optionAddr.isNotNull()) {    lmOption=new SceKernelLMOption();    lmOption.read(optionAddr);    if (log.isInfoEnabled()) {      log.info(String.format("sceKernelLoadModuleVSH options: %s",lmOption));    }  }  return Modules.ModuleMgrForUserModule.hleKernelLoadModule(path.getString(),flags,0,0,0,lmOption,false,true);}  }
class C{  public static void verifyJoinedPerStream(int rootStream,Map<Integer,int[]> streamsJoinedPerStream){  Set<Integer> streams=new HashSet<Integer>();  streams.add(rootStream);  recursiveAdd(rootStream,rootStream,streamsJoinedPerStream,streams,true);  if (streams.size() != streamsJoinedPerStream.size()) {    throw new IllegalArgumentException("Not all streams found, streamsJoinedPerStream=" + print(streamsJoinedPerStream));  }}  }
class C{  public void removeQueueListener(QueueListener queueListener){synchronized (queueListeners) {    queueListeners.remove(queueListener);  }}  }
class C{  public PureLogWriter(int level){  this(level,System.out);}  }
class C{  public LRUMap(int maxSize){  super(maxSize,0.75f,true);  fMaxSize=maxSize;}  }
class C{  public void clearParsers(){  timer.stop();  clearParserNoticeHighlights();  parsers.clear();  textArea.fireParserNoticesChange();}  }
class C{  protected String assembleOutputString(final StringBuilder result){  try {    result.append(inputs[0].get());  } catch (  final IOException ignored) {  }  return result.toString();}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      @SuppressWarnings("unchecked") Collection<Object> coll=(Collection<Object>)object;      return new JSONArray(coll);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)object;      return new JSONObject(map);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public ComStmtExecute(final int statementId,final ParameterHolder[] parameters,final int parameterCount,MariaDbType[] parameterTypeHeader){  this.parameterCount=parameterCount;  this.parameters=parameters;  this.statementId=statementId;  this.parameterTypeHeader=parameterTypeHeader;}  }
class C{  private double errorsForLeaf() throws Exception {  return m_test.total() - m_test.perClass(localModel().distribution().maxClass());}  }
class C{  @Override public UpdateResponse optimize(boolean waitFlush,boolean waitSearcher,int maxSegments) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.optimize(waitFlush,waitSearcher,maxSegments);  return ur;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.DECLARED_VERSION;}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static Requirement toRequirement(Vector<Object> xmlRpcParameters){  Requirement requirement=null;  if (!xmlRpcParameters.isEmpty()) {    log.debug("Extracting requirement from XML-RPC parameters %s",xmlRpcParameters);    String name=(String)xmlRpcParameters.get(DOCUMENT_NAME_IDX);    requirement=Requirement.newInstance(name);    requirement.setRepository(toRepository((Vector<Object>)xmlRpcParameters.get(DOCUMENT_REPOSITORY_IDX)));  }  return requirement;}  }
class C{  public JTextField(int columns){  this(null,null,columns);}  }
class C{  public void drawVertical(Canvas c,RecyclerView parent){  final int childCount=parent.getChildCount();  for (int i=0; i < childCount; i++) {    final View child=parent.getChildAt(i);    final RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();    WatchMeAdapterNew.WatchMeHolder holder=(WatchMeAdapterNew.WatchMeHolder)parent.findViewHolderForPosition(params.getViewPosition());    if (holder == null) {      continue;    }    if (holder.getItemViewType() == WatchMeAdapterNew.TYPE_VIDEO) {      final int top=child.getBottom() + params.bottomMargin;      final int bottom=top + mDivider.getIntrinsicHeight();      final int left=child.getPaddingLeft() + child.getLeft();      final int right=child.getRight() - child.getPaddingRight();      mDivider.setBounds(left,top,right,bottom);      mDivider.draw(c);    }  }}  }
class C{  public static void removeSessionErrorListener(Activity activity){  if ((null != instance) && (null != activity)) {    Collection<MXSession> sessions=getMXSessions(activity);    for (    MXSession session : sessions) {      if (session.isAlive()) {        session.setFailureCallback(null);      }    }  }}  }
class C{  private static TaskOptions createCommonPollTask(JobReference jobRef){  return withUrl(PATH).countdownMillis(POLL_COUNTDOWN.getMillis()).header(PROJECT_ID_HEADER,jobRef.getProjectId()).header(JOB_ID_HEADER,jobRef.getJobId());}  }
class C{  public ListMultimap(){  this(new LinkedHashMap<K,List<V>>());}  }
class C{  private static boolean isGnome(){  boolean gnome=false;  String[] cmd=new String[2];  cmd[0]="echo";  cmd[1]="$GNOME_DESKTOP_SESSION_ID";  gnome=isExpectedCommandOutput(cmd,"*",true);  if (!gnome) {    cmd[1]="$DESKTOP_SESSION";    gnome=isExpectedCommandOutput(cmd,"gnome",true);  }  return gnome;}  }
class C{  public ImageSharingDeleteTask(ImageSharingServiceImpl imageSharingService,RichcallService richcallService,LocalContentResolver contentResolver,String sharingId){  super(contentResolver,ImageSharingData.CONTENT_URI,ImageSharingData.KEY_SHARING_ID,ImageSharingData.KEY_CONTACT,null,sharingId);  mImageSharingService=imageSharingService;  mRichcallService=richcallService;}  }
class C{  boolean isBlockFocus(){  return blockFocus;}  }
class C{  public boolean isUnsafe(){  return (this.status == DroidsafeIssueResolutionStatus.UNSAFE);}  }
class C{  private boolean isActiveAdmin(){  return mDPM.isAdminActive(mDeviceAdminSample);}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public final boolean isTraceEnabled(){  return false;}  }
class C{  public boolean isValidating(){  return false;}  }
class C{  public SendableLocationMessage.SendableLocationMessageBuilder latitude(double latitude){  this.latitude=latitude;  return this;}  }
class C{  public ClassFeatureSet initialize(JavaClass javaClass){  this.className=javaClass.getClassName();  this.isInterface=javaClass.isInterface();  addFeature(CLASS_NAME_KEY + transformClassName(javaClass.getClassName()));  for (  Method method : javaClass.getMethods()) {    if (!isSynthetic(method)) {      String transformedMethodSignature=transformMethodSignature(method.getSignature());      if (method.isStatic() || !overridesSuperclassMethod(javaClass,method)) {        addFeature(METHOD_NAME_KEY + method.getName() + ":"+ transformedMethodSignature);      }      Code code=method.getCode();      if (code != null && code.getCode() != null && code.getCode().length >= MIN_CODE_LENGTH) {        addFeature(CODE_LENGTH_KEY + method.getName() + ":"+ transformedMethodSignature+ ":"+ code.getCode().length);      }    }  }  for (  Field field : javaClass.getFields()) {    if (!isSynthetic(field)) {      addFeature(FIELD_NAME_KEY + field.getName() + ":"+ transformSignature(field.getSignature()));    }  }  return this;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public boolean appliesTo(String line,String route){  if (!lines.isEmpty() && !lines.contains(line))   return false;  if (!routes.isEmpty() && !routes.contains(route))   return false;  return true;}  }
class C{  public static JCas runTest(String aDocumentId,AnalysisEngineDescription aEngine,String aLanguage,String aDocument) throws UIMAException {  return runTest(aDocumentId,createEngine(aEngine),aLanguage,aDocument);}  }
class C{  public SyntaxStyle(Color color,boolean italic,boolean bold){  this.color=color;  this.italic=italic;  this.bold=bold;}  }
class C{  public static void updateWebContent(CalendarEventEntry entry) throws ParseException {  Link wcLink=entry.getWebContentLink();  if (wcLink == null) {    entry.setWebContent(null);  } else {    WebContent wc=entry.getWebContent();    wc.setLink(wcLink);    entry.setWebContent(wc);  }}  }
class C{  public List<JCCompilationUnit> parseAndAttributeJavaFiles(List<File> javaFiles) throws IOException {  List<JavaFileObject> sources=toJavaFileObjects(fileManager,javaFiles);  List<JCCompilationUnit> compilationUnits=compiler.enterTrees(compiler.parseFiles(sources));  compiler.attribute(compiler.todo);  return compilationUnits;}  }
class C{  public boolean currentValueIsApproximately(double value){  return Math.abs(getCurrentValue() - value) <= getRestDisplacementThreshold();}  }
class C{  public int pop(){  return _data[--_size];}  }
class C{  private void verifyErrorPayload(JavaResult javaResult) throws Exception {  EchoCommand command=javaResult.getBean(EchoCommand.class);  if (null == command || null == command.getStatus() || HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {    Error error=javaResult.getBean(Error.class);    if (command != null) {      log.info("Error response received for messageID",command.getMessageID());    }    log.info("command failed with error code: {} with message {}",error.getCode(),error.getDescription());    throw HDSException.exceptions.errorResponseReceived(error.getCode(),error.getDescription());  }}  }
class C{  protected Transferable createTransferable(JComponent c){  if (c instanceof JTree) {    tree=(JTree)c;    TreePath[] paths=tree.getSelectionPaths();    if (paths == null || paths.length == 0) {      return null;    }    StringBuffer plainBuf=new StringBuffer();    StringBuffer htmlBuf=new StringBuffer();    htmlBuf.append("<html>\n<body>\n<ul>\n");    TreeModel model=tree.getModel();    TreePath lastPath=null;    TreePath[] displayPaths=getDisplayOrderPaths(paths);    for (    TreePath path : displayPaths) {      Object node=path.getLastPathComponent();      boolean leaf=model.isLeaf(node);      String label=getDisplayString(path,true,leaf);      plainBuf.append(label + "\n");      htmlBuf.append("  <li>" + label + "\n");    }    plainBuf.deleteCharAt(plainBuf.length() - 1);    htmlBuf.append("</ul>\n</body>\n</html>");    tree=null;    return new BasicTransferable(plainBuf.toString(),htmlBuf.toString());  }  return null;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.262 -0400",hash_original_method="F60F215A385D287752751758F3F3D1D2",hash_generated_method="FDEC7156FC09FAF744D2194CB181DF6D") @Override protected void onStop(){  super.onStop();  mStopped=true;  mHandler.sendEmptyMessage(MSG_REALLY_STOPPED);  mFragments.dispatchStop();}  }
class C{  public static void generateSeedList(FileSystem fs,Path urlPath,List<String> contents) throws IOException {  FSDataOutputStream out;  Path file=new Path(urlPath,"urls.txt");  fs.mkdirs(urlPath);  out=fs.create(file);  Iterator<String> iterator=contents.iterator();  while (iterator.hasNext()) {    String url=iterator.next();    out.writeBytes(url);    out.writeBytes("\n");  }  out.flush();  out.close();}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public void addDaylightSavingsTime(DaylightSavingsTime daylightSavingsTime){  addComponent(daylightSavingsTime);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private void checkGroupExists(String entidad) throws Exception {  int count;  GroupsTable table=new GroupsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (_id == ISicresAdminDefsKeys.NULL_ID)     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameQual(_name)); else     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameIdQual(_id,_name));    if (count > 0)     ISicresAdminBasicException.throwException(ISicresAdminGroupKeys.EC_GROUP_EXIST_NAME);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  @Override public void resolve(){synchronized (this) {    if (isResolved())     return;    if (VM.VerifyAssertions)     VM._assert(state == CLASS_LOADED);  }  elementType.resolve();synchronized (this) {    if (isResolved())     return;    TIB javaLangObjectTIB=RVMType.JavaLangObjectType.getTypeInformationBlock();    int alignCode=elementType.isReferenceType() ? HandInlinedScanning.referenceArray() : HandInlinedScanning.primitiveArray();    TIB allocatedTib=MemoryManager.newTIB(javaLangObjectTIB.numVirtualMethods(),alignCode);    superclassIds=DynamicTypeCheck.buildSuperclassIds(this);    doesImplement=DynamicTypeCheck.buildDoesImplement(this);    publishResolved(allocatedTib,superclassIds,doesImplement);    MemoryManager.notifyClassResolved(this);  }}  }
class C{  protected <T>void applyLabel(Node node,T label,EnumMap<Node,T> tree){  if (label instanceof Label && label.equals(Label.UNKNOWN))   return;  tree.put(node,label);}  }
class C{  public CleanInstruction(IProject project,Map<String,OutputConfiguration> outputConfigurations,IDerivedResourceMarkers derivedResourceMarkers){  super(project,outputConfigurations,derivedResourceMarkers);  this.project=project;  this.outputConfigurations=outputConfigurations;  this.derivedResourceMarkers=derivedResourceMarkers;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XIntervalSeriesCollection)) {    return false;  }  XIntervalSeriesCollection that=(XIntervalSeriesCollection)obj;  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public static double mean(Iterable<? extends Number> values){  MeanAccumulator accumulator=new MeanAccumulator();  for (  Number value : values) {    accumulator.add(value.doubleValue());  }  return accumulator.mean();}  }
class C{  public static void overrideSymbolSet(SymbolInfo[] override){  symbols=override;}  }
class C{  public void stopShimmerAnimation(){  if (mAnimator != null) {    mAnimator.end();    mAnimator.removeAllUpdateListeners();    mAnimator.cancel();  }  mAnimator=null;  mAnimationStarted=false;}  }
class C{  public static boolean hasVisibleChildren(ActionGroup group,PresentationFactory factory,ActionManager actionManager,PerspectiveManager perspectiveManager){  ActionEvent event=new ActionEvent(factory.getPresentation(group),actionManager,perspectiveManager);  for (  Action anAction : group.getChildren(event)) {    if (anAction == null) {      Log.error(Utils.class,"Null action found in group " + group + ", "+ factory.getPresentation(group));      continue;    }    if (anAction instanceof Separator) {      continue;    }    final Presentation presentation=factory.getPresentation(anAction);    anAction.update(new ActionEvent(presentation,actionManager,perspectiveManager));    if (anAction instanceof ActionGroup) {      ActionGroup childGroup=(ActionGroup)anAction;      if (childGroup.isPopup()) {        if (!presentation.isVisible()) {          continue;        }      }      if (hasVisibleChildren(childGroup,factory,actionManager,perspectiveManager)) {        return true;      }    } else     if (presentation.isVisible()) {      return true;    }  }  return false;}  }
class C{  public DataUri(String contentType,String text){  this(contentType,null,text);}  }
class C{  static void checkIdentifier(final String name,final String msg){  checkIdentifier(name,0,-1,msg);}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  public boolean isAbsolute(LocPathIterator path){  int analysis=path.getAnalysisBits();  boolean isAbs=(WalkerFactory.isSet(analysis,WalkerFactory.BIT_ROOT) || WalkerFactory.isSet(analysis,WalkerFactory.BIT_ANY_DESCENDANT_FROM_ROOT));  if (isAbs) {    isAbs=m_absPathChecker.checkAbsolute(path);  }  return isAbs;}  }
class C{  public int[] updateResultsMultiple(int waitedSize,boolean hasException){  return null;}  }
class C{  protected void writeLSD() throws IOException {  writeShort(width);  writeShort(height);  out.write((0x80 | 0x70 | 0x00| palSize));  out.write(0);  out.write(0);}  }
class C{  void error(String msg){  System.err.println(msg);  errors++;}  }
class C{  public void drawShadow(View content,Canvas canvas){  if (mShadowDrawable == null || mShadowWidth <= 0)   return;  int left=0;  if (mMode == SlidingMenu.LEFT) {    left=content.getLeft() - mShadowWidth;  } else   if (mMode == SlidingMenu.RIGHT) {    left=content.getRight();  } else   if (mMode == SlidingMenu.LEFT_RIGHT) {    if (mSecondaryShadowDrawable != null) {      left=content.getRight();      mSecondaryShadowDrawable.setBounds(left,0,left + mShadowWidth,getHeight());      mSecondaryShadowDrawable.draw(canvas);    }    left=content.getLeft() - mShadowWidth;  }  mShadowDrawable.setBounds(left,0,left + mShadowWidth,getHeight());  mShadowDrawable.draw(canvas);}  }
class C{  @android.view.RemotableViewMethod public void smoothScrollToPosition(int position){  super.smoothScrollToPosition(position);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node otherChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=(Text)titleAttr.getFirstChild();  assertNotNull("textNodeNotNull",textNode);  value=textNode.getNodeValue();  assertEquals("child1IsYes","Yes",value);  otherChild=textNode.getNextSibling();  assertNull("nextSiblingIsNull",otherChild);  otherChild=textNode.getPreviousSibling();  assertNull("previousSiblingIsNull",otherChild);}  }
class C{  public TechnicalInformation(Type type,String id){  m_Type=type;  m_ID=id;}  }
class C{  public ProcessStep updateStep(long processStepId,long serviceProcessId,String stepName,int stepNo,String dossierStatus,int daysDuration,long referenceDossierPartId,String externalAppUrl,ServiceContext context) throws PortalException, SystemException {  ProcessStep step=null;  step=processStepPersistence.fetchByPrimaryKey(processStepId);  Date now=new Date();  if (Validator.isNotNull(step)) {    step.setModifiedDate(now);    step.setServiceProcessId(serviceProcessId);    step.setStepName(stepName);    step.setSequenceNo(stepNo);    step.setDossierStatus(dossierStatus);    step.setDaysDuration(daysDuration);    step.setExternalAppUrl(externalAppUrl);    step.setReferenceDossierPartId(referenceDossierPartId);    processStepPersistence.update(step);  }  return step;}  }
class C{  public void pop(){  if (current.pushCount-- == 0) {    current=current.next;  }}  }
class C{  public void run(){  logger.info("Log sync task starting: " + Thread.currentThread().getName());  try {    while (!cancelled && !Thread.currentThread().isInterrupted()) {      Thread.sleep(flushIntervalMillis);      processSync();    }  } catch (  InterruptedException e) {    logger.info("Log sync task cancelled by interrupt");  }catch (  Throwable t) {    logger.error("Log sync task failed due to exception: " + t.getMessage(),t);  }  logger.info("Log sync task ending: " + Thread.currentThread().getName());  finished=true;}  }
class C{  public void testRetainAll(){  LinkedBlockingQueue q=populatedQueue(SIZE);  LinkedBlockingQueue p=populatedQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    boolean changed=q.retainAll(p);    if (i == 0)     assertFalse(changed); else     assertTrue(changed);    assertTrue(q.containsAll(p));    assertEquals(SIZE - i,q.size());    p.remove();  }}  }
class C{  public static Mapping<Integer> intv(Constraint... constraints){  return new FieldMapping(InputMode.SINGLE,mkSimpleConverter(null),new MappingMeta("int",Integer.class)).constraint(checking(null,"error.number",true)).constraint(constraints);}  }
class C{  public static void main(String[] args){  Matrix matrix=GeneralLib.readStringMatrix("A:/data/ewz daten/GIS_coordinates_of_managers.txt");  double sumOfMinimumDistancesOfHubSubMangers=0;  int numberOfSamplesUsed=0;  for (int i=0; i < matrix.getNumberOfRows() - 1; i++) {    int indexNextHub=i + 1;    int currentHubId=matrix.convertDoubleToInteger(i,0);    int nextHubId=matrix.convertDoubleToInteger(indexNextHub,0);    if (currentHubId != nextHubId) {      sumOfMinimumDistancesOfHubSubMangers+=getMinimumDistanceBetweenHubSubMangersForHub(matrix,currentHubId);      numberOfSamplesUsed++;    }  }  System.out.println("averageHubSubManagers in [m]: " + (sumOfMinimumDistancesOfHubSubMangers / numberOfSamplesUsed) / 2);}  }
class C{  public void onServiceAdded(int status,int srvcType,int srvcInstId,ParcelUuid srvcId){  UUID srvcUuid=srvcId.getUuid();  if (DBG)   Log.d(TAG,"onServiceAdded() - service=" + srvcUuid + "status="+ status);  BluetoothGattService service=getService(srvcUuid,srvcInstId,srvcType);  if (service == null)   return;  try {    mCallback.onServiceAdded((int)status,service);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  public T caseVertex(Vertex object){  return null;}  }
class C{  public void close(){  shutdownTransactionService();  closed=true;}  }
class C{  default boolean isRootScannable(Path root,String packageRoot){  return true;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  private void findComputesWithoutPool(){  if (this.resourcePoolLinks != null && !this.resourcePoolLinks.isEmpty()) {    this.completionHandler.accept(this.result);    return;  }  if (this.computeLinks != null && !this.computeLinks.isEmpty()) {    this.result.resourcesPools=this.result.resourcesPools.entrySet().stream().filter(null).collect(Collectors.toMap(null,null));    handleMissingComputes(this.computeLinks);    return;  }  Query.Builder queryBuilder=Query.Builder.create().addKindFieldClause(ComputeState.class);  if (this.additionalQueryClausesProvider != null) {    this.additionalQueryClausesProvider.accept(queryBuilder);  }  QueryTask queryTask=QueryTask.Builder.createDirectTask().setQuery(queryBuilder.build()).build();  this.host.sendRequest(Operation.createPost(this.host,ServiceUriPaths.CORE_QUERY_TASKS).setBody(queryTask).setReferer(this.host.getUri()).setCompletion(null));}  }
class C{  public SendPacket send(SendPacket entity){  entity.setBlinkConn(this);  mSendDispatcher.send(entity);  return entity;}  }
class C{  public void testAddServletWithNameAndJspFile() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.addJspFile(webXml,"s1","s1.jsp");  assertTrue(WebXmlUtils.hasServlet(webXml,"s1"));}  }
class C{  public DataSource fromPropertyString(String datasourceInformation){  return fromProperties(PropertyUtils.splitPropertiesOnPipe(PropertyUtils.escapeBackSlashesIfNotNull(datasourceInformation)));}  }
class C{  public void randomizeRulesOrder(final EvolutionState state,final int thread){  Rule temp;  for (int i=numRules - 1; i > 0; i--) {    int j=state.random[thread].nextInt(i + 1);    temp=rules[i];    rules[i]=rules[j];    rules[j]=temp;  }}  }
class C{  public void dumpRef(XSAttGroupDecl decl){  SchemaTreeNode newNode=new SchemaTreeNode("Attribute group ref \"{" + decl.getTargetNamespace() + "}"+ decl.getName()+ "\"",decl.getLocator());  this.currNode.add(newNode);}  }
class C{  public JcrPackage uploadBackupPackage(final SlingHttpServletRequest request){  final RequestParameterMap params=request.getRequestParameterMap();  Session session=null;  JcrPackage jcrPackage=null;  for (  final Map.Entry<String,RequestParameter[]> pairs : params.entrySet()) {    final RequestParameter[] pArr=pairs.getValue();    final RequestParameter param=pArr[0];    if (!param.isFormField()) {      try {        session=request.getResourceResolver().adaptTo(Session.class);        final JcrPackageManager packageManager=packaging.getPackageManager(session);        final InputStream stream=param.getInputStream();        jcrPackage=packageManager.upload(stream,true);      } catch (      java.io.IOException e) {        LOGGER.error("Could not get image input stream",e);      }catch (      RepositoryException e) {        LOGGER.error("Could not upload package to repository",e);      }    }  }  return jcrPackage;}  }
class C{  public RegisterSpecList withFirst(RegisterSpec spec){  int sz=size();  RegisterSpecList result=new RegisterSpecList(sz + 1);  for (int i=0; i < sz; i++) {    result.set0(i + 1,get0(i));  }  result.set0(0,spec);  if (isImmutable()) {    result.setImmutable();  }  return result;}  }
class C{  public Result run(Database database,Relation<O> relation){  DistanceQuery<O> distQuery=database.getDistanceQuery(relation,getDistanceFunction());  KNNQuery<O> knnQuery=database.getKNNQuery(distQuery,k,DatabaseQuery.HINT_OPTIMIZED_ONLY);  if (knnQuery == null || knnQuery instanceof LinearScanQuery) {    throw new AbortException("Expected an accelerated query, but got a linear scan -- index is not used.");  }  KNNQuery<O> truekNNQuery;  if (forcelinear) {    truekNNQuery=QueryUtil.getLinearScanKNNQuery(distQuery);  } else {    truekNNQuery=database.getKNNQuery(distQuery,k,DatabaseQuery.HINT_EXACT);  }  if (knnQuery.getClass().equals(truekNNQuery.getClass())) {    LOG.warning("Query classes are the same. This experiment may be invalid!");  }  if (queries == null || pattern != null) {    Relation<String> lrel=(pattern != null) ? DatabaseUtil.guessLabelRepresentation(database) : null;    final DBIDs sample=DBIDUtil.randomSample(relation.getDBIDs(),sampling,random);    FiniteProgress prog=LOG.isVeryVerbose() ? new FiniteProgress("kNN queries",sample.size(),LOG) : null;    MeanVariance mv=new MeanVariance(), mvrec=new MeanVariance();    MeanVariance mvdist=new MeanVariance(), mvdaerr=new MeanVariance(), mvdrerr=new MeanVariance();    int misses=0;    for (DBIDIter iditer=sample.iter(); iditer.valid(); iditer.advance()) {      if (pattern == null || pattern.matcher(lrel.get(iditer)).find()) {        KNNList knns=knnQuery.getKNNForDBID(iditer,k);        KNNList trueknns=truekNNQuery.getKNNForDBID(iditer,k);        mv.put(knns.size() * k / (double)trueknns.size());        mvrec.put(DBIDUtil.intersectionSize(knns,trueknns) / (double)trueknns.size());        if (knns.size() >= k) {          double kdist=knns.getKNNDistance();          final double tdist=trueknns.getKNNDistance();          if (tdist > 0.0) {            mvdist.put(kdist);            mvdaerr.put(kdist - tdist);            mvdrerr.put(kdist / tdist);          }        } else {          misses++;        }      }      LOG.incrementProcessed(prog);    }    LOG.ensureCompleted(prog);    if (LOG.isStatistics()) {      LOG.statistics("Mean number of results: " + mv.getMean() + " +- "+ mv.getNaiveStddev());      LOG.statistics("Recall of true results: " + mvrec.getMean() + " +- "+ mvrec.getNaiveStddev());      if (mvdist.getCount() > 0) {        LOG.statistics("Mean k-distance: " + mvdist.getMean() + " +- "+ mvdist.getNaiveStddev());        LOG.statistics("Mean absolute k-error: " + mvdaerr.getMean() + " +- "+ mvdaerr.getNaiveStddev());        LOG.statistics("Mean relative k-error: " + mvdrerr.getMean() + " +- "+ mvdrerr.getNaiveStddev());      }      if (misses > 0) {        LOG.statistics(String.format("Number of queries that returned less than k=%d objects: %d (%.2f%%)",k,misses,misses * 100. / mv.getCount()));      }    }  } else {    TypeInformation res=getDistanceFunction().getInputTypeRestriction();    MultipleObjectsBundle bundle=queries.loadData();    int col=-1;    for (int i=0; i < bundle.metaLength(); i++) {      if (res.isAssignableFromType(bundle.meta(i))) {        col=i;        break;      }    }    if (col < 0) {      throw new AbortException("No compatible data type in query input was found. Expected: " + res.toString());    }    DBIDRange sids=DBIDUtil.generateStaticDBIDRange(bundle.dataLength());    final DBIDs sample=DBIDUtil.randomSample(sids,sampling,random);    FiniteProgress prog=LOG.isVeryVerbose() ? new FiniteProgress("kNN queries",sample.size(),LOG) : null;    MeanVariance mv=new MeanVariance(), mvrec=new MeanVariance();    MeanVariance mvdist=new MeanVariance(), mvdaerr=new MeanVariance(), mvdrerr=new MeanVariance();    int misses=0;    for (DBIDIter iditer=sample.iter(); iditer.valid(); iditer.advance()) {      int off=sids.binarySearch(iditer);      assert (off >= 0);      @SuppressWarnings("unchecked") O o=(O)bundle.data(off,col);      KNNList knns=knnQuery.getKNNForObject(o,k);      KNNList trueknns=truekNNQuery.getKNNForObject(o,k);      mv.put(knns.size() * k / (double)trueknns.size());      mvrec.put(DBIDUtil.intersectionSize(knns,trueknns) / (double)trueknns.size());      if (knns.size() >= k) {        double kdist=knns.getKNNDistance();        final double tdist=trueknns.getKNNDistance();        if (tdist > 0.0) {          mvdist.put(kdist);          mvdaerr.put(kdist - tdist);          mvdrerr.put(kdist / tdist);        }      } else {        misses++;      }      LOG.incrementProcessed(prog);    }    LOG.ensureCompleted(prog);    if (LOG.isStatistics()) {      LOG.statistics("Mean number of results: " + mv.getMean() + " +- "+ mv.getNaiveStddev());      LOG.statistics("Recall of true results: " + mvrec.getMean() + " +- "+ mvrec.getNaiveStddev());      if (mvdist.getCount() > 0) {        LOG.statistics("Mean absolute k-error: " + mvdaerr.getMean() + " +- "+ mvdaerr.getNaiveStddev());        LOG.statistics("Mean relative k-error: " + mvdrerr.getMean() + " +- "+ mvdrerr.getNaiveStddev());      }      if (misses > 0) {        LOG.statistics(String.format("Number of queries that returned less than k=%d objects: %d (%.2f%%)",k,misses,misses * 100. / mv.getCount()));      }    }  }  return null;}  }
class C{  public String globalInfo(){  return "Class for generating a PART decision list. Uses " + "separate-and-conquer. Builds a partial C4.5 decision tree " + "in each iteration and makes the \"best\" leaf into a rule.\n\n"+ "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public CaseInsensitiveHashSet(Iterator<? extends String> i,float f){  super(i,f,CaseInsensitiveHashingStrategy.INSTANCE);}  }
class C{  protected void payPlayer(ItemParserResult res,final Player player){  final StackableItem money=(StackableItem)SingletonRepository.getEntityManager().getItem("money");  money.setQuantity(getCharge(res,player));  player.equipOrPutOnGround(money);}  }
class C{  public void startUp() throws PluginRuntimeException {}  }
class C{  public static int size(Object[] self){  return self.length;}  }
class C{  public boolean isSameDay(CalendarDate date){  int day=(int)Math.ceil((date.getDay() / DAYS_PER_SEASON) * 30);  return day == this.getDay() && date.getSeason() == this.getSeason();}  }
class C{  public static List<String> newDirectoryStream(String path){  List<FilePath> list=FilePath.get(path).newDirectoryStream();  int len=list.size();  List<String> result=New.arrayList(len);  for (int i=0; i < len; i++) {    result.add(list.get(i).toString());  }  return result;}  }
class C{  public final Flux<T> repeat(long numRepeat){  return Flux.onAssembly(new FluxRepeat<>(this,numRepeat));}  }
class C{  public static MemoryMatchFragment newInstance(){  return new MemoryMatchFragment();}  }
class C{  public void message(LocoNetMessage m){  if (m.getOpCode() == LnConstants.RE_OPC_IB2_F9_F12) {    UhlenbrockSlot slot=(UhlenbrockSlot)slot(m.getElement(1));    slot.iB2functionMessage(m);  }  if (m.getOpCode() == LnConstants.RE_OPC_IB2_SPECIAL && m.getElement(1) == LnConstants.RE_IB2_SPECIAL_FUNCS_TOKEN) {    UhlenbrockSlot slot=(UhlenbrockSlot)slot(m.getElement(2));    slot.iBfunctionMessage(m);  }  super.message(m);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String upslopeAreaCreekHeader=null;  String outputHeader=null;  int numRows;  int numCols;  double elevation, elevationNeighbour;  int x, y;  double slope, maxSlope;  int flowDir;  int i;  List<StreamFlow> streamFlowList=new ArrayList<>();  List<StreamFlow> copyStreamFlowList;  StreamFlow streamFlow2;  List<Double> upstreamValues=new ArrayList<>();  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      upslopeAreaCreekHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((demHeader == null) || (upslopeAreaCreekHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    upslopeAreaCreek=new WhiteboxRaster(upslopeAreaCreekHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    gridRes=dem.getCellSizeX();    medianUpstreamArea=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    medianUpstreamArea.setPreferredPalette("blueyellow.pal");    medianUpstreamArea.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    medianUpstreamArea.setZUnits("dimensionless");    tmpDirectUpstreamCreekCellCount=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    tmpDirectUpstreamCreekCellCount.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (upslopeAreaCreek.getValue(row,col) == upslopeAreaCreek.getNoDataValue()) {          medianUpstreamArea.setValue(row,col,upslopeAreaCreek.getNoDataValue());        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 3:",(int)progress);    }    updateProgress("Loop 2 of 3:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        maxSlope=Double.MIN_VALUE;        flowDir=-1;        if (upslopeAreaCreek.getValue(row,col) > 0) {          elevation=dem.getValue(row,col);          for (int c=0; c < 8; c++) {            x=col + xd[c];            y=row + yd[c];            elevationNeighbour=dem.getValue(y,x);            if (upslopeAreaCreek.getValue(y,x) > 0 && elevationNeighbour < elevation) {              slope=(elevation - elevationNeighbour) / dd[c];              if (slope > maxSlope) {                maxSlope=slope;                flowDir=c;              }            }          }          for (int c=0; c < 8; c++) {            if (c == flowDir) {              x=col + xd[c];              y=row + yd[c];              tmpDirectUpstreamCreekCellCount.incrementValue(y,x,1);              streamFlowList.add(new StreamFlow(col,row,x,y,elevation));            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 3:",(int)progress);    }    streamFlowList=OrderStreamFlowList(streamFlowList);    copyStreamFlowList=new ArrayList<>(streamFlowList.subList(0,streamFlowList.size()));    updateProgress("Loop 3 of 3:",0);    for (    StreamFlow streamFlow : streamFlowList) {      i=streamFlowList.indexOf(streamFlow);      if (medianUpstreamArea.getValue(streamFlow.GetToY(),streamFlow.GetToX()) == 0) {        upstreamValues=new ArrayList<>();        FilterStreamFlowList(copyStreamFlowList,streamFlow);        MakeUpstreamList(copyStreamFlowList,streamFlow.GetToX(),streamFlow.GetToY(),upstreamValues);        Collections.sort(upstreamValues);        medianUpstreamArea.setValue(streamFlow.GetToY(),streamFlow.GetToX(),GetMedian(upstreamValues));        streamFlow2=streamFlow;        while ((tmpDirectUpstreamCreekCellCount.getValue(streamFlow2.GetToY(),streamFlow2.GetToX()) == 1) & (upstreamValues.size() > 2)) {          upstreamValues.remove(upslopeAreaCreek.getValue(streamFlow2.GetToY(),streamFlow2.GetToX()));          medianUpstreamArea.setValue(streamFlow2.GetFromY(),streamFlow2.GetFromX(),GetMedian(upstreamValues));          x=streamFlow2.GetFromX();          y=streamFlow2.GetFromY();          for (          StreamFlow tempStreamFlow : copyStreamFlowList) {            if (tempStreamFlow.GetToX() == x && tempStreamFlow.GetToY() == y) {              streamFlow2=tempStreamFlow;              break;            }          }        }        if (tmpDirectUpstreamCreekCellCount.getValue(streamFlow2.GetFromY(),streamFlow2.GetFromX()) == 0) {          x=streamFlow2.GetFromX();          y=streamFlow2.GetFromY();          medianUpstreamArea.setValue(y,x,upslopeAreaCreek.getValue(y,x));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * (i + 1) / streamFlowList.size());      updateProgress("Loop 3 of 3:",(int)progress);    }    medianUpstreamArea.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    medianUpstreamArea.addMetadataEntry("Created on " + new Date());    dem.close();    upslopeAreaCreek.close();    medianUpstreamArea.close();    tmpDirectUpstreamCreekCellCount.close();    returnData(outputHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static final boolean moveItem(ContentResolver res,long playlistId,int from,int to){  Uri uri=MediaStore.Audio.Playlists.Members.getContentUri("external",playlistId).buildUpon().appendEncodedPath(String.valueOf(from)).appendQueryParameter("move","true").build();  ContentValues values=new ContentValues();  values.put(MediaStore.Audio.Playlists.Members.PLAY_ORDER,to);  return res.update(uri,values,null,null) != 0;}  }
class C{  public static OnSetClause createOnSet(Expression expression){  return OnSetClause.create(expression);}  }
class C{  public int compareTo(final Quantity other){  return CoreUtils.nullSafeComparator(this.getBigIntegerValue(),other.getBigIntegerValue());}  }
class C{  public void testNegPosFirstShorter(){  String numA="-293478573489347658763745839457637";  String numB="2837462783428374767845648748973847593874837948575684767";  String res="-2837462783428374767845615168483972194300564226167553532";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public int format(long val,byte[] array){  return format(val,array,0,array.length);}  }
class C{  public IntHashMap(){  this(101,0.75f);}  }
class C{  @Override public boolean isRotateEdgeLabels(){  return graphCreator.isRotatingEdgeLabels();}  }
class C{  public static double round(double value,double factor){  return (Math.round(value / factor) * factor);}  }
class C{  static public Response createSamlAuthnResponse(String inResponseTo,Document token) throws NoSuchAlgorithmException, UnmarshallingException {  logger.info("createSamlAuthnResponse. ");  SamlUtils samlUtils=new SamlUtils(null,TestUtils.getPrivateKey(),TestUtils.getSigningAlgorithmUri(),null,TestConfig.idpEntityID);  String destination=TestConfig.ACS0_endpoint;  return samlUtils.createSamlLoginResponse(inResponseTo,destination,SamlNames.SUCCESS,null,null,token);}  }
class C{  static void encode_base64(byte d[],int len,StringBuilder rs) throws IllegalArgumentException {  int off=0;  int c1, c2;  if (len <= 0 || len > d.length) {    throw new IllegalArgumentException("Invalid len");  }  while (off < len) {    c1=d[off++] & 0xff;    rs.append(base64_code[(c1 >> 2) & 0x3f]);    c1=(c1 & 0x03) << 4;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 4) & 0x0f;    rs.append(base64_code[c1 & 0x3f]);    c1=(c2 & 0x0f) << 2;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 6) & 0x03;    rs.append(base64_code[c1 & 0x3f]);    rs.append(base64_code[c2 & 0x3f]);  }}  }
class C{  public int compareTo(Transaction that){  return Double.compare(this.amount,that.amount);}  }
class C{  public static void main(String... args) throws Exception {  Main main=new Main();  main.addRouteBuilder(new MyRouteBuilder());  main.run(args);}  }
class C{  public DirtyRegionQueue(){  super();}  }
class C{  static String add_escapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void testConstrLongMathContext(){  long a=4576578677732546982L;  int precision=5;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="45766";  int resScale=-14;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public RosterGroupsPanel(String defaultRosterGroup){  this.scrollPane=new JScrollPane(getTree());  this.scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);  setGroupsMenu(defaultMenu(GROUPS_MENU));  setAllEntriesMenu(defaultMenu(ALL_ENTRIES_MENU));  setLayout(new BorderLayout());  add(scrollPane,BorderLayout.CENTER);  add(getButtons(),BorderLayout.SOUTH);  setSelectedRosterGroup(defaultRosterGroup);}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  @Restrictions({@Restrict("SECURITY_ADMIN"),@Restrict("TENANT_ADMIN")}) public static void removeRoleAssignments(String tenantId,@As(",") String[] ids){  if ((ids == null) || (ids.length == 0)) {    listRoles(tenantId);  }  deleteRoleAssignments(ids);  listRoles(tenantId);}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  public void copyArea(int x,int y,int width,int height,int dx,int dy){  g.copyArea(x,y,width,height,dx,dy);}  }
class C{  public static String toString(float[] array){  StringBuffer buf=new StringBuffer();  buf.append("[");  int maxIndex=array.length - 1;  for (int i=0; i <= maxIndex; i++) {    buf.append(array[i]);    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  bias[0]=Position.Bias.Forward;  int n=0;  Container c=getContainer();  if (c instanceof JPasswordField) {    JPasswordField f=(JPasswordField)c;    if (!f.echoCharIsSet()) {      return super.viewToModel(fx,fy,a,bias);    }    char echoChar=f.getEchoChar();    int charWidth=f.getFontMetrics(f.getFont()).charWidth(echoChar);    a=adjustAllocation(a);    Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();    n=(charWidth > 0 ? ((int)fx - alloc.x) / charWidth : Integer.MAX_VALUE);    if (n < 0) {      n=0;    } else     if (n > (getStartOffset() + getDocument().getLength())) {      n=getDocument().getLength() - getStartOffset();    }  }  return getStartOffset() + n;}  }
class C{  public static double[][] columnVector(double[] x){  return mergeColumns(x);}  }
class C{  public void registerAsSystemService(Context context,ComponentName componentName,int currentUser) throws RemoteException {  if (isBound()) {    return;  }  ICMStatusBarManager statusBarInterface=mStatusBarService;  if (mStatusBarService != null) {    mWrapper=new ICustomTileListenerWrapper();    statusBarInterface.registerListener(mWrapper,componentName,currentUser);    mCurrentUser=currentUser;  }}  }
class C{  protected void postDeSerialize(T t){}  }
class C{  public void updatePasswordHistory(String username,String hashedPassword,Calendar expireTime,boolean bReset){  PasswordHistory lph=getPasswordHistory(username);  boolean isNew=false;  if (lph == null) {    isNew=true;    lph=new PasswordHistory();    lph.setId(getLocalPasswordHistoryURI(username));  }  Calendar now=Calendar.getInstance();  if (!bReset) {    lph.getUserPasswordHash().put(hashedPassword,now.getTimeInMillis());  }  lph.setExpireDate(expireTime);  if (isNew) {    dbClient.createObject(lph);  } else {    dbClient.updateAndReindexObject(lph);  }}  }
class C{  private boolean isEndOfLine(int c) throws IOException {  if (c == '\r') {    if (in.lookAhead() == '\n') {      c=in.read();    }  }  return (c == '\n');}  }
class C{  public void fillFieldValues(List<SynapseUpdateRule> ruleList){  ShortTermPlasticityRule synapseRef=(ShortTermPlasticityRule)ruleList.get(0);  if (!NetworkUtils.isConsistent(ruleList,ShortTermPlasticityRule.class,"getPlasticityType")) {    cbPlasticityType.setNull();  } else {    cbPlasticityType.setSelectedIndex(synapseRef.getPlasticityType());  }  if (!NetworkUtils.isConsistent(ruleList,ShortTermPlasticityRule.class,"getBaseLineStrength")) {    tfBaseLineStrength.setText(SimbrainConstants.NULL_STRING);  } else {    tfBaseLineStrength.setText(Double.toString(synapseRef.getBaseLineStrength()));  }  if (!NetworkUtils.isConsistent(ruleList,ShortTermPlasticityRule.class,"getFiringThreshold")) {    tfFiringThreshold.setText(SimbrainConstants.NULL_STRING);  } else {    tfFiringThreshold.setText(Double.toString(synapseRef.getFiringThreshold()));  }  if (!NetworkUtils.isConsistent(ruleList,ShortTermPlasticityRule.class,"getBumpRate")) {    tfBumpRate.setText(SimbrainConstants.NULL_STRING);  } else {    tfBumpRate.setText(Double.toString(synapseRef.getBumpRate()));  }  if (!NetworkUtils.isConsistent(ruleList,ShortTermPlasticityRule.class,"getDecayRate")) {    tfDecayRate.setText(SimbrainConstants.NULL_STRING);  } else {    tfDecayRate.setText(Double.toString(synapseRef.getDecayRate()));  }}  }
class C{  public int height(){  return height;}  }
class C{  public E putStringArrayList(final String key,@Nullable final ArrayList<String> value){  this.bundle.putStringArrayList(key,value);  return (E)this;}  }
class C{  public void testDivideBigDecimalScaleRoundingModeFLOOR(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=100;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=45;  RoundingMode rm=RoundingMode.FLOOR;  String c="0E-45";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public ClientBuilder withPingTimeout(int maxMissedPings){  this.maxMissedPingCount=maxMissedPings;  return this;}  }
class C{  public void accesskey(float offset,char key){}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSSink({DSSinkKind.IPC}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:29.534 -0500",hash_original_method="D32BC0D25E86F605EE68EB4056334640",hash_generated_method="828E2E55CD6766C364D07FA88A5CE8D5") public void registerReceiver(BroadcastReceiver receiver,IntentFilter filter){synchronized (mReceivers) {    ReceiverRecord entry=new ReceiverRecord(filter,receiver);    ArrayList<IntentFilter> filters=mReceivers.get(receiver);    if (filters == null) {      filters=new ArrayList<IntentFilter>(1);      mReceivers.put(receiver,filters);    }    filters.add(filter);    for (int i=0; i < filter.countActions(); i++) {      String action=filter.getAction(i);      ArrayList<ReceiverRecord> entries=mActions.get(action);      if (entries == null) {        entries=new ArrayList<ReceiverRecord>(1);        mActions.put(action,entries);      }      entries.add(entry);    }  }}  }
class C{  public double[] toNativeArray(){  return toNativeArray(0,_pos);}  }
class C{  public synchronized void keyPress(int keycode){  checkKeycodeArgument(keycode);  peer.keyPress(keycode);  afterEvent();}  }
class C{  public boolean addEntryToCurrent(final String entry){  boolean ret=false;  if (currentEntries != null) {    currentEntries.add(entry);    ret=true;  }  return ret;}  }
class C{  private void cleanupDestination(State state,int finalStatus){  if (state.filename != null && DownloadStatus.isError(finalStatus)) {    LLog.d("cleanupDestination() deleting " + state.filename);    boolean deleted=new File(state.filename).delete();    if (!deleted) {      LLog.e("File not deleted");    }    state.filename=null;  }}  }
class C{  private void storeButtonCommands(){  AssignableControl control=null;  String controlString=(String)buttonList.getSelectedValue();  String commandString=(String)commandList.getSelectedItem();  if (controlString == null) {    return;  }  ControllerButton button=ControllerButton.valueOf(controlString);  if (button == null) {    return;  }  if ("None".equals(commandString)) {    if (list.size() > index) {      list.remove(index);    }    return;  }  Command command=Command.valueOf((String)commandList.getSelectedItem());  if (command == null) {    return;  }switch (command) {case PLAY_ANIMATION:    Animation anim=Animation.valueOf((String)valueList.getSelectedItem());  control=new AssignableControl(button,anim,(Integer)delaySpinner.getValue(),(Integer)durationSpinner.getValue());break;case PLAY_LED:LED led=LED.valueOf((String)valueList.getSelectedItem());float freq=frequencySpinner.getValue() instanceof Float ? (Float)frequencySpinner.getValue() : (Integer)frequencySpinner.getValue();control=new AssignableControl(button,led,(Integer)delaySpinner.getValue(),freq,(Integer)durationSpinner.getValue());break;case TAKE_SNAPSHOT:case RECORD_VIDEO:control=new AssignableControl(button,command,(Integer)delaySpinner.getValue(),getFile());break;default :control=new AssignableControl(button,command,(Integer)delaySpinner.getValue());break;}list.add(index,control);if (list.size() > index + 1) {list.remove(index + 1);}map.setControls(button,list);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object val=stack.pop();  String name=getString(stack);  if (stack.getUIMgr() == null)   return null;  PseudoMenu ui=stack.getUIMgr().getCurrUI();  if (ui != null) {    return ui.getCompForVariable(name,val,stack.getUIComponent());  }  return null;}  }
class C{  @Override public void update(){  dispatchUpdate();}  }
class C{  public void pauseCrawlJob(final String jobType,String cause){  final Object[] status=this.crawlJobsStatus.get(jobType);synchronized (status[SwitchboardConstants.CRAWLJOB_SYNC]) {    status[SwitchboardConstants.CRAWLJOB_STATUS]=Boolean.TRUE;  }  setConfig(jobType + "_isPaused","true");  setConfig(jobType + "_isPaused_cause",cause);  log.warn("Crawl job '" + jobType + "' is paused: "+ cause);}  }
class C{  public static void markSkippedJob(){  _skippedJobs.mark();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicFormattedTextFieldUI();}  }
class C{  public void testDeployToNonExistingDirectory() throws Exception {  WAR war=new WAR("ram:///some/warfile.war");  this.fsManager.resolveFile(war.getFile()).createFile();  AbstractCopyingInstalledLocalDeployer deployer=new TestableCopyingDeployerWithDifferentDirectory(createContainer(createContainerCapability(DeployableType.WAR),null));  try {    deployer.deploy(war);    fail("Should have thrown a CargoException here");  } catch (  CargoException expected) {    assertTrue("Incorrect message: " + expected.getMessage(),expected.getMessage().contains("ram:///webapps-nonexisting"));  }}  }
class C{  public void doTask(String operation){  ApplicationManager applicationManager=new ApplicationManager(context);switch (operation) {case Constants.Operation.GET_APPLICATION_LIST:    getAppListFromServer();  break;case Constants.Operation.INSTALL_APPLICATION:if (appUri != null) {  applicationManager.installApp(appUri,null,null);} else {  Toast.makeText(context,context.getResources().getString(R.string.toast_app_installation_failed),Toast.LENGTH_LONG).show();}break;case Constants.Operation.UNINSTALL_APPLICATION:if (appUri != null) {applicationManager.uninstallApplication(appUri,null);} else {Toast.makeText(context,context.getResources().getString(R.string.toast_app_removal_failed),Toast.LENGTH_LONG).show();}break;case Constants.Operation.WEBCLIP:if (appUri != null && appName != null) {try {applicationManager.manageWebAppBookmark(appUri,appName,context.getResources().getString(R.string.operation_install));} catch (AndroidAgentException e) {Log.e(TAG,"WebClip creation failed." + e);}} else {Toast.makeText(context,context.getResources().getString(R.string.toast_app_installation_failed),Toast.LENGTH_LONG).show();}break;case Constants.Operation.UNINSTALL_WEBCLIP:if (appUri != null && appName != null) {try {applicationManager.manageWebAppBookmark(appUri,appName,context.getResources().getString(R.string.operation_uninstall));} catch (AndroidAgentException e) {Log.e(TAG,"WebClip creation failed." + e);}} else {Toast.makeText(context,context.getResources().getString(R.string.toast_app_installation_failed),Toast.LENGTH_LONG).show();}break;case Constants.Operation.GET_APP_DOWNLOAD_PROGRESS:sendBroadcast(Constants.Status.SUCCESSFUL,Preference.getString(context,context.getResources().getString(R.string.app_download_progress)));break;case Constants.Operation.FIRMWARE_UPGRADE_FAILURE:Preference.putInt(context,context.getResources().getString(R.string.firmware_upgrade_retries),0);Preference.putString(context,context.getResources().getString(R.string.firmware_upgrade_failed_message),message);Preference.putInt(context,context.getResources().getString(R.string.firmware_upgrade_failed_id),id);break;case Constants.Operation.FAILED_FIRMWARE_UPGRADE_NOTIFICATION:int retryCount=Preference.getInt(context,context.getResources().getString(R.string.firmware_upgrade_retries));boolean isFirmwareUpgradeAutoRetry=Preference.getBoolean(context,context.getResources().getString(R.string.is_automatic_firmware_upgrade));if (retryCount < Constants.FIRMWARE_UPGRADE_RETRY_COUNT && isFirmwareUpgradeAutoRetry) {Preference.putInt(context,context.getResources().getString(R.string.firmware_upgrade_retries),++retryCount);Preference.putBoolean(context,context.getResources().getString(R.string.firmware_upgrade_failed),true);if (message != null && id != 0) {Preference.putBoolean(context,context.getResources().getString(R.string.firmware_upgrade_failed),false);Preference.putString(context,context.getResources().getString(R.string.firmware_upgrade_failed_message),message);Preference.putInt(context,context.getResources().getString(R.string.firmware_upgrade_failed_id),id);}} else {Preference.putInt(context,context.getResources().getString(R.string.firmware_upgrade_retries),0);Preference.putBoolean(context,context.getResources().getString(R.string.firmware_upgrade_failed),false);Preference.putString(context,context.getResources().getString(R.string.firmware_upgrade_failed_message),null);Preference.putInt(context,context.getResources().getString(R.string.firmware_upgrade_failed_id),0);}break;case Constants.Operation.GET_ENROLLMENT_STATUS:if (Preference.getBoolean(context,Constants.PreferenceFlag.REGISTERED) && Preference.getBoolean(context,Constants.PreferenceFlag.DEVICE_ACTIVE)) {sendBroadcast(Constants.Status.SUCCESSFUL,context.getResources().getString(R.string.error_enrollment_success));} else {sendBroadcast(Constants.Status.INTERNAL_SERVER_ERROR,context.getResources().getString(R.string.error_enrollment_failed));}break;case Constants.Operation.FIRMWARE_UPGRADE_AUTOMATIC_RETRY:Preference.putBoolean(context,context.getResources().getString(R.string.is_automatic_firmware_upgrade),!"false".equals(message));break;case Constants.Operation.LOGCAT:Operation logcatOperation=new Operation();logcatOperation.setId(id);logcatOperation.setCode(Constants.Operation.LOGCAT);try {logcatOperation.setOperationResponse(OperationManager.getOperationResponseFromLogcat(context,message));logcatOperation.setStatus(context.getResources().getString(R.string.operation_value_completed));} catch (java.io.IOException e) {logcatOperation.setOperationResponse("Unable to get logs. " + e.getMessage());logcatOperation.setStatus(context.getResources().getString(R.string.operation_value_error));}Gson operationGson=new Gson();Preference.putString(context,Constants.Operation.LOGCAT,operationGson.toJson(logcatOperation));break;default :Log.e(TAG,"Invalid operation code received");break;}}  }
class C{  private static void unpackArchivePrivate(DataInputStream input,File outputDir) throws IOException {  if (!outputDir.exists()) {    if (!outputDir.mkdirs()) {      throw new IllegalArgumentException("Could not create directory: " + outputDir.getPath());    }  }  input.readInt();  final byte[] buf=new byte[4096];  final int numFiles=input.readInt();  for (int i=0; i < numFiles; i++) {    final FileHeader header=new FileHeader(input.readInt(),input.readLong());    final byte[] name=new byte[header.mNameSize];    input.readFully(name);    final File outFile=new File(outputDir,new String(name));    try (FileOutputStream output=new FileOutputStream(outFile)){      long remaining=header.mFileSize;      int toRead=buf.length < remaining ? buf.length : (int)remaining;      int len;      while (toRead > 0 && (len=input.read(buf,0,toRead)) > 0) {        output.write(buf,0,len);        remaining-=len;        toRead=buf.length < remaining ? buf.length : (int)remaining;      }    }   }}  }
class C{  public void assertPredicateUsesConstant_01(SPOPredicate pred){  Constant c=(Constant)pred.get(2);  TermId tId=(TermId)c.get();  assertEquals("type",c.getVar().getName());  assertEquals("http://bigdata.com#Person",tId.getValue().toString());}  }
class C{  public Quadrant reflect(int direction){  if (direction == QuadTreeNode.WEST || direction == QuadTreeNode.EAST) {    return cNorthWest;  }  return cSouthEast;}  }
class C{  public static void print(ClassFile cf){  print(cf,new PrintWriter(System.out,true));}  }
class C{  private void gaincLocMode0(AtracGainInfo dst,int pos){  if (pos == 0 || dst.locCode[pos - 1] < 15) {    dst.locCode[pos]=br.read(5);  } else   if (dst.locCode[pos - 1] >= 30) {    dst.locCode[pos]=31;  } else {    int deltaBits=avLog2(30 - dst.locCode[pos - 1]) + 1;    dst.locCode[pos]=dst.locCode[pos - 1] + br.read(deltaBits) + 1;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int roundUpInt(int x,int blockSizePowerOf2){  return (x + blockSizePowerOf2 - 1) & (-blockSizePowerOf2);}  }
class C{  public boolean match(final Expression expr1,final Expression expr2){  if (typeMatching) {    if (!expr1.getTypeString().equals(expr2.getTypeString())) {      return false;    }  }  if (expr1.getOriginal().equals(expr2.getOriginal())) {    return true;  }  if (caseInsensitive) {    if (expr1.getOriginal().equalsIgnoreCase(expr2.getOriginal())) {      return true;    }  }  if (jokerMatching) {    return expr1.sentenceMatchExpression(expr2);  }  if (similarMatching) {    if (SimilarExprMatcher.isSimilar(expr1.getOriginal(),expr2.getOriginal(),0.1)) {      return true;    }  }  if (!exactMatching) {    if (expr2.getNormalized().equals(Expression.JOKER)) {      return true;    }    if (expr1.getNormalized().equals(expr2.getNormalized())) {      return true;    }    if (caseInsensitive) {      if (expr1.getNormalized().equalsIgnoreCase(expr2.getNormalized())) {        return true;      }    }  }  return false;}  }
class C{  public Matrix4x3d translationRotateTowards(double posX,double posY,double posZ,double dirX,double dirY,double dirZ,double upX,double upY,double upZ){  double invDirLength=1.0f / Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);  double ndirX=dirX * invDirLength;  double ndirY=dirY * invDirLength;  double ndirZ=dirZ * invDirLength;  double leftX, leftY, leftZ;  leftX=upY * ndirZ - upZ * ndirY;  leftY=upZ * ndirX - upX * ndirZ;  leftZ=upX * ndirY - upY * ndirX;  double invLeftLength=1.0f / Math.sqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);  leftX*=invLeftLength;  leftY*=invLeftLength;  leftZ*=invLeftLength;  double upnX=ndirY * leftZ - ndirZ * leftY;  double upnY=ndirZ * leftX - ndirX * leftZ;  double upnZ=ndirX * leftY - ndirY * leftX;  this.m00=leftX;  this.m01=leftY;  this.m02=leftZ;  this.m10=upnX;  this.m11=upnY;  this.m12=upnZ;  this.m20=ndirX;  this.m21=ndirY;  this.m22=ndirZ;  this.m30=posX;  this.m31=posY;  this.m32=posZ;  properties=0;  return this;}  }
class C{  public boolean matches(final ConversationStates currentState,final Sentence sentence){  return matches(currentState,sentence.getTriggerExpression());}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public SQLClientInfoException(String reason,String sqlState,Map<String,ClientInfoStatus> failedProperties){  super(reason,sqlState);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  void link(double[] xr,double[] xi,double[] Xr,double[] Xi){  this.xr=xr;  this.xi=xi;  this.Xr=Xr;  this.Xi=Xi;  dft1.link(xr,xi,Xr,Xi);  dft2.link(xr,xi,Xr,Xi);  dft3.link(xr,xi,Xr,Xi);}  }
class C{  public void addImplInterface(String iname){  implInterfaces.add(iname);}  }
class C{  public Scriptable printd(final int index,final org.mozilla.javascript.Scriptable obj){  if (DebugDefaultJavascript) {    System.out.println("JpedalDefaultJavascript.printd(int,Scriptable)");  }  Calendar date=null;  if (org.mozilla.javascript.NativeJavaObject.canConvert(obj,Calendar.class)) {    date=(java.util.Calendar)org.mozilla.javascript.Context.jsToJava(obj,Calendar.class);  }  if (date == null) {    org.mozilla.javascript.Context.throwAsScriptRuntimeEx(new RuntimeException("Not a Date()"));  }  if (testingSetStaticDate) {    final Calendar yesterday=Calendar.getInstance();    yesterday.roll(Calendar.DATE,false);    if (date.get(Calendar.YEAR) > yesterday.get(Calendar.YEAR) || (date.get(Calendar.YEAR) == yesterday.get(Calendar.YEAR) && date.get(Calendar.DAY_OF_YEAR) > yesterday.get(Calendar.DAY_OF_YEAR))) {      date=Calendar.getInstance();      date.set(2010,10,10,10,10,10);    }  }  final SimpleDateFormat df=new SimpleDateFormat(format[index]);  return context.newObject(scope,"String",new Object[]{df.format(date)});}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public TranslationResult(final String register,final OperandSize size,final TranslationResultType type,final String address,final List<ReilInstruction> instructions,final long baseAddress){  this.baseAddress=baseAddress;  this.address=address;  this.register=register;  this.size=size;  this.type=type;  this.instructions=instructions;}  }
class C{  public double maxJointSpaceNorm(double[] x1,double[] y1,double[] x2,double[] y2){  return Math.max(norm(x1,x2),norm(y1,y2));}  }
class C{  public POSBaseLineFeatureExtractor(String viewName,String corpusName,String home) throws Exception {  this.viewName=viewName;  this.counter=new POSBaseLineCounter(corpusName);  counter.buildTable(home);}  }
class C{  public void removeTickLabelSection(final Section SECTION){  if (null == SECTION)   return;  tickLabelSections.remove(SECTION);  Collections.sort(tickLabelSections,new SectionComparator());  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  @Override public int hashCode(){  return queryVars.hashCode() + 2 * evidence.hashCode();}  }
class C{  @Inject public SimpleN4MFNewProjectWizard(final IProjectCreator projectCreator){  super(projectCreator);  setWindowTitle("New N4JS Project");  setNeedsProgressMonitor(true);  setDefaultPageImageDescriptor(NEW_PROJECT_WIZBAN_DESC);  projectInfo=new N4MFProjectInfo();  IDialogSettings workbenchDialogSettings=N4MFActivator.getInstance().getDialogSettings();  IDialogSettings projectWizardSettings=workbenchDialogSettings.getSection(DIALOG_SETTINGS_SECTION_KEY);  if (null == projectWizardSettings) {    projectWizardSettings=workbenchDialogSettings.addNewSection(DIALOG_SETTINGS_SECTION_KEY);  }  setDialogSettings(projectWizardSettings);}  }
class C{  private void writeArray(JSONArray jsonarray) throws JSONException {  boolean stringy=false;  int length=jsonarray.length();  if (length == 0) {    write(zipEmptyArray,3);  } else {    Object value=jsonarray.get(0);    if (value == null) {      value=JSONObject.NULL;    }    if (value instanceof String) {      stringy=true;      write(zipArrayString,3);      writeString((String)value);    } else {      write(zipArrayValue,3);      writeValue(value);    }    for (int i=1; i < length; i+=1) {      if (probe) {        log();      }      value=jsonarray.get(i);      if (value == null) {        value=JSONObject.NULL;      }      if (value instanceof String != stringy) {        zero();      }      one();      if (value instanceof String) {        writeString((String)value);      } else {        writeValue(value);      }    }    zero();    zero();  }}  }
class C{  public void appendName(String attrFormat,StringBuilder sb){  boolean hexFormat=false;  if (X500Principal.RFC1779.equals(attrFormat)) {    if (RFC1779_NAMES == oid.getGroup()) {      sb.append(oid.getName());    } else {      sb.append(oid.toOIDString());    }    sb.append('=');    if (value.escapedString == value.getHexString()) {      sb.append(value.getHexString().toUpperCase(Locale.US));    } else     if (value.escapedString.length() != value.rawString.length()) {      value.appendQEString(sb);    } else {      sb.append(value.escapedString);    }  } else {    Object group=oid.getGroup();    if (RFC1779_NAMES == group || RFC2253_NAMES == group) {      sb.append(oid.getName());      if (X500Principal.CANONICAL.equals(attrFormat)) {        int tag=value.getTag();        if (!ASN1StringType.UTF8STRING.checkTag(tag) && !ASN1StringType.PRINTABLESTRING.checkTag(tag) && !ASN1StringType.TELETEXSTRING.checkTag(tag)) {          hexFormat=true;        }      }    } else {      sb.append(oid.toString());      hexFormat=true;    }    sb.append('=');    if (hexFormat) {      sb.append(value.getHexString());    } else {      if (X500Principal.CANONICAL.equals(attrFormat)) {        sb.append(value.makeCanonical());      } else {        sb.append(value.escapedString);      }    }  }}  }
class C{  @Override public void visitInnerClass(final String aname,final String outerName,final String innerName,final int attr_access){  if ((name != null) && name.equals(aname)) {    this.access=attr_access;  }  super.visitInnerClass(aname,outerName,innerName,attr_access);}  }
class C{  protected RegularExpressionFlagsImpl(){  super();}  }
class C{  public Cache(Builder<K,V> builder){  this.id=builder.getId();  this.strictJSR107=builder.isStrictJSR107();  this.kvUtil=new KeyValueUtil<K,V>(id);  this.builder=builder;  tCacheJSR107=new TCacheJSR107<K,V>(this);  this.maxCacheTime=builder.getMaxCacheTime();  int spreadSeconds=(int)Math.min(Integer.MAX_VALUE,builder.getMaxCacheTimeSpread() / 1000);  this.maxCacheTimeSpread=spreadSeconds;  long expiryIdleMillis=0;  ExpiryPolicy epFromFactory=builder.getExpiryPolicyFactory().create();  if (strictJSR107) {    this.expiryPolicy=new TouchedExpiryPolicy(epFromFactory);  } else {    this.expiryPolicy=new UntouchedExpiryPolicy(epFromFactory);    Duration expiryDuration=epFromFactory.getExpiryForAccess();    if (expiryDuration == null)     expiryDuration=epFromFactory.getExpiryForCreation();    expiryIdleMillis=expiryDuration.getAdjustedTime(0);  }  if (expiryIdleMillis <= 0) {    expiryIdleMillis=60_000;  }  this.cleanUpIntervalMillis=Math.min(5 * 60_000,expiryIdleMillis / 10);  this.jamPolicy=builder.getJamPolicy();  Factory<javax.cache.integration.CacheLoader<K,V>> lf=builder.getCacheLoaderFactory();  if (lf != null) {    this.loader=lf.create();  } else {    this.loader=builder.getLoader();  }  if (this.loader == null && builder.isReadThrough()) {    throw new IllegalArgumentException("Builder has isReadThrough, but has no loader for cache: " + id);  }  Factory<CacheWriter<? super K,? super V>> cwFactory=builder.getCacheWriterFactory();  if (cwFactory == null) {    this.cacheWriter=new NopCacheWriter<K,V>();  } else {    CacheWriter<? super K,? super V> cw=cwFactory.create();    CacheWriterWrapper<K,V> cwWrapper=new CacheWriterWrapper<K,V>(cw,false);    this.cacheWriter=cwWrapper;  }  objects=createBackingMap(builder);  enableStatistics(builder.getStatistics());  enableManagement(builder.isManagementEnabled());  activateTimeSource();  listeners=new ListenerCollection<>(this,builder);  tCacheJSR107.refreshActionRunners();  builder.getFactory().registerCache(this);  logger.info(this.toString());}  }
class C{  public CheckerFrameworkPerDirectoryTest(List<File> testFiles,Class<? extends AbstractProcessor> checker,String testDir,String... checkerOptions){  this.testFiles=testFiles;  this.checkerName=checker.getName();  this.testDir="tests" + File.separator + testDir;  this.checkerOptions=Arrays.asList(checkerOptions);}  }
class C{  public IOException ioException(){  return lastException;}  }
class C{  private static void GetDoubleArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetDoubleArrayRegion   \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    double[] sourceArray=(double[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > sourceArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(bufAddress,Magic.objectAsAddress(sourceArray).plus(startIndex << LOG_BYTES_IN_DOUBLE),length << LOG_BYTES_IN_DOUBLE);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  protected void onProviderChanged(int appWidgetId,AppWidgetProviderInfo appWidget){  AppWidgetHostView v;  appWidget.minWidth=TypedValue.complexToDimensionPixelSize(appWidget.minWidth,mDisplayMetrics);  appWidget.minHeight=TypedValue.complexToDimensionPixelSize(appWidget.minHeight,mDisplayMetrics);  appWidget.minResizeWidth=TypedValue.complexToDimensionPixelSize(appWidget.minResizeWidth,mDisplayMetrics);  appWidget.minResizeHeight=TypedValue.complexToDimensionPixelSize(appWidget.minResizeHeight,mDisplayMetrics);synchronized (mViews) {    v=mViews.get(appWidgetId);  }  if (v != null) {    v.resetAppWidget(appWidget);  }}  }
class C{  protected IClasspathEntry[] defaultClasspath(){  return new IClasspathEntry[]{JavaCore.newSourceEntry(this.project.getFullPath())};}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.VARIABLE_STATEMENT;}  }
class C{  protected void initClassDefaults(final UIDefaults table){  final String basicPackageName="javax.swing.plaf.basic.";  final Object[] uiDefaults={"ButtonUI",PKG_PREFIX + "AquaButtonUI","CheckBoxUI",PKG_PREFIX + "AquaButtonCheckBoxUI","CheckBoxMenuItemUI",PKG_PREFIX + "AquaMenuItemUI","LabelUI",PKG_PREFIX + "AquaLabelUI","ListUI",PKG_PREFIX + "AquaListUI","MenuUI",PKG_PREFIX + "AquaMenuUI","MenuItemUI",PKG_PREFIX + "AquaMenuItemUI","OptionPaneUI",PKG_PREFIX + "AquaOptionPaneUI","PanelUI",PKG_PREFIX + "AquaPanelUI","RadioButtonMenuItemUI",PKG_PREFIX + "AquaMenuItemUI","RadioButtonUI",PKG_PREFIX + "AquaButtonRadioUI","ProgressBarUI",PKG_PREFIX + "AquaProgressBarUI","RootPaneUI",PKG_PREFIX + "AquaRootPaneUI","SliderUI",PKG_PREFIX + "AquaSliderUI","ScrollBarUI",PKG_PREFIX + "AquaScrollBarUI","TabbedPaneUI",PKG_PREFIX + (JRSUIUtils.TabbedPane.shouldUseTabbedPaneContrastUI() ? "AquaTabbedPaneContrastUI" : "AquaTabbedPaneUI"),"TableUI",PKG_PREFIX + "AquaTableUI","ToggleButtonUI",PKG_PREFIX + "AquaButtonToggleUI","ToolBarUI",PKG_PREFIX + "AquaToolBarUI","ToolTipUI",PKG_PREFIX + "AquaToolTipUI","TreeUI",PKG_PREFIX + "AquaTreeUI","InternalFrameUI",PKG_PREFIX + "AquaInternalFrameUI","DesktopIconUI",PKG_PREFIX + "AquaInternalFrameDockIconUI","DesktopPaneUI",PKG_PREFIX + "AquaInternalFramePaneUI","EditorPaneUI",PKG_PREFIX + "AquaEditorPaneUI","TextFieldUI",PKG_PREFIX + "AquaTextFieldUI","TextPaneUI",PKG_PREFIX + "AquaTextPaneUI","ComboBoxUI",PKG_PREFIX + "AquaComboBoxUI","PopupMenuUI",PKG_PREFIX + "AquaPopupMenuUI","TextAreaUI",PKG_PREFIX + "AquaTextAreaUI","MenuBarUI",PKG_PREFIX + "AquaMenuBarUI","FileChooserUI",PKG_PREFIX + "AquaFileChooserUI","PasswordFieldUI",PKG_PREFIX + "AquaTextPasswordFieldUI","TableHeaderUI",PKG_PREFIX + "AquaTableHeaderUI","FormattedTextFieldUI",PKG_PREFIX + "AquaTextFieldFormattedUI","SpinnerUI",PKG_PREFIX + "AquaSpinnerUI","SplitPaneUI",PKG_PREFIX + "AquaSplitPaneUI","ScrollPaneUI",PKG_PREFIX + "AquaScrollPaneUI","PopupMenuSeparatorUI",PKG_PREFIX + "AquaPopupMenuSeparatorUI","SeparatorUI",PKG_PREFIX + "AquaPopupMenuSeparatorUI","ToolBarSeparatorUI",PKG_PREFIX + "AquaToolBarSeparatorUI","ColorChooserUI",basicPackageName + "BasicColorChooserUI","ViewportUI",basicPackageName + "BasicViewportUI"};  table.putDefaults(uiDefaults);}  }
class C{  @Override public void insert(Address start,Extent extent,int descriptor,Space space){  if (VM.VERIFY_ASSERTIONS) {    if (!isSpaceStart(start)) {      Log.write("Space ");      Log.write(space.getName());      Log.write(", extent ");      Log.write(extent);      Log.write(" starts at ");      Log.write(start);      Log.writeln(" which is not the start of a space in the 64-bit model");      VM.assertions.fail("Space start address is wrong");    }    if (VM.HEAP_LAYOUT_64BIT && !extent.LE(SPACE_SIZE_64)) {      Log.write("Space ");      Log.write(space.getName());      Log.write(", SPACE_SIZE=");      Log.write(SPACE_SIZE_64);      Log.write(", extent=");      Log.writeln(extent);    }    VM.assertions._assert(VM.HEAP_LAYOUT_32BIT || extent.LE(SPACE_SIZE_64));  }  final int index=spaceIndex(start);  descriptorMap[index]=descriptor;  VM.barriers.objectArrayStoreNoGCBarrier(spaceMap,index,space);}  }
class C{  public void testGetWebModuleUrisWithSingleWebModule() throws Exception {  String xml="<application>" + "  <module>" + "    <web>"+ "      <web-uri>webmodule.jar</web-uri>"+ "      <context-root>/webmodule</context-root>"+ "    </web>"+ "  </module>"+ "</application>";  ApplicationXml applicationXml=ApplicationXmlIo.parseApplicationXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),null);  List<String> webUris=applicationXml.getWebModuleUris();  assertEquals(1,webUris.size());  assertEquals("webmodule.jar",webUris.get(0));}  }
class C{  public ValueNode stackAt(int i){  assert i >= 0 && i < stackSize;  return values.get(localsSize + i);}  }
class C{  public CSearchInputPanel(final JHexView hexView,final CSearchResultModel model){  super(new BorderLayout());  m_hexView=hexView;  m_model=model;  m_modeBox.setPreferredSize(new Dimension(150,m_modeBox.getMinimumSize().height));  m_inputField.setPreferredSize(new Dimension(150,m_inputField.getMinimumSize().height));  m_modeBox.setBorder(new EmptyBorder(0,0,0,5));  final JPanel innerPanel=new JPanel(new BorderLayout());  innerPanel.add(m_modeBox,BorderLayout.WEST);  innerPanel.add(m_inputField,BorderLayout.EAST);  add(innerPanel,BorderLayout.WEST);  m_modeBox.addItemListener(new InternalItemListener());  m_inputField.addActionListener(new InternalActionListener());}  }
class C{  @Override public void printText(int iStyle,String sText){  m_ticketcurrent.printText(iStyle,sText);}  }
class C{  public WebResource createMultiValueWebResource(String serviceURL,QueryParamMultiValuedMap queryParams){  Client client=Client.create();  WebResource webResource=client.resource(serviceURL);  webResource=webResource.queryParams(queryParams.getMap());  return webResource;}  }
class C{  public FunctionBlockSource createFunctionBlockSource(){  FunctionBlockSourceImpl functionBlockSource=new FunctionBlockSourceImpl();  return functionBlockSource;}  }
class C{  public SVGFontFace(Element fontFaceElement,List srcs,String familyName,float unitsPerEm,String fontWeight,String fontStyle,String fontVariant,String fontStretch,float slope,String panose1,float ascent,float descent,float strikethroughPosition,float strikethroughThickness,float underlinePosition,float underlineThickness,float overlinePosition,float overlineThickness){  super(srcs,familyName,unitsPerEm,fontWeight,fontStyle,fontVariant,fontStretch,slope,panose1,ascent,descent,strikethroughPosition,strikethroughThickness,underlinePosition,underlineThickness,overlinePosition,overlineThickness);  this.fontFaceElement=fontFaceElement;}  }
class C{  public static Set<IInterval> compute(SegmentTree<StoredIntervalsNode<?>> tree,int q){  Set<IInterval> F=new LinkedHashSet<IInterval>();  compute(tree.getRoot(),q,F);  return F;}  }
class C{  private void validateSingleParam(List<TriggerProcessIdentifier> identifiers,TriggerProcessIdentifierName name,String expectedValue){  TriggerProcess tp=new TriggerProcess();  tp.setTriggerProcessIdentifiers(identifiers);  List<TriggerProcessIdentifier> ids=tp.getIdentifierValuesForName(name);  assertEquals(1,ids.size());  assertEquals(expectedValue,ids.get(0).getValue());}  }
class C{  public static void verify(final ClassReader cr,final ClassLoader loader,final boolean dump,final PrintWriter pw){  ClassNode cn=new ClassNode();  cr.accept(new CheckClassAdapter(cn,false),ClassReader.SKIP_DEBUG);  Type syperType=cn.superName == null ? null : Type.getObjectType(cn.superName);  List<MethodNode> methods=cn.methods;  List<Type> interfaces=new ArrayList<Type>();  for (Iterator<String> i=cn.interfaces.iterator(); i.hasNext(); ) {    interfaces.add(Type.getObjectType(i.next()));  }  for (int i=0; i < methods.size(); ++i) {    MethodNode method=methods.get(i);    SimpleVerifier verifier=new SimpleVerifier(Type.getObjectType(cn.name),syperType,interfaces,(cn.access & Opcodes.ACC_INTERFACE) != 0);    Analyzer<BasicValue> a=new Analyzer<BasicValue>(verifier);    if (loader != null) {      verifier.setClassLoader(loader);    }    try {      a.analyze(cn.name,method);      if (!dump) {        continue;      }    } catch (    Exception e) {      e.printStackTrace(pw);    }    printAnalyzerResult(method,a,pw);  }  pw.flush();}  }
class C{  @SuppressWarnings("deprecation") void notifyAlarmClock(TimerAlarmClockNotification notification){  TimerNotification timerNotification=null;  Date timerDate=null;  TimerAlarmClock alarmClock=(TimerAlarmClock)notification.getSource();synchronized (Timer.this) {    for (    Object[] obj : timerTable.values()) {      if (obj[ALARM_CLOCK_INDEX] == alarmClock) {        timerNotification=(TimerNotification)obj[TIMER_NOTIF_INDEX];        timerDate=(Date)obj[TIMER_DATE_INDEX];        break;      }    }  }  sendNotification(timerDate,timerNotification);  updateTimerTable(timerNotification.getNotificationID());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static List<String> unescape(String source,char escapeChar,char[] specialCharacters,char splitCharacter,int splitLimit){  List<String> result=new LinkedList<>();  StringBuilder b=new StringBuilder();  boolean readEscape=false;  int indexCount=-1;  for (  char c : source.toCharArray()) {    indexCount++;    if (readEscape) {      boolean found=false;      if (c == splitCharacter) {        found=true;        b.append(c);      } else       if (c == escapeChar) {        found=true;        b.append(c);      } else {        for (        char s : specialCharacters) {          if (s == c) {            found=true;            b.append(c);            break;          }        }      }      if (!found) {        throw new IllegalArgumentException("String '" + source + "' contains illegal escaped character '"+ c+ "'.");      }      readEscape=false;    } else     if (c == escapeChar) {      readEscape=true;    } else     if (c == splitCharacter) {      readEscape=false;      result.add(b.toString());      if (splitLimit != -1) {        if (result.size() == splitLimit - 1) {          result.add(source.substring(indexCount + 1));          return result;        }      }      b=new StringBuilder();    } else {      readEscape=false;      b.append(c);    }  }  result.add(b.toString());  return result;}  }
class C{  private ReplaceTokens createPortToken(){  ReplaceTokens.Token tokenPort=new ReplaceTokens.Token();  tokenPort.setKey(ServletPropertySet.PORT);  String port=getPropertyValue(ServletPropertySet.PORT);  if (port == null) {    port=DEFAULT_PORT;  }  tokenPort.setValue(port);  ReplaceTokens replacePort=new ReplaceTokens();  replacePort.addConfiguredToken(tokenPort);  return replacePort;}  }
class C{  public static boolean isECKeyPair(String alias,KeyStore keyStore) throws KeyStoreException {  if (!isKeyPairEntry(alias,keyStore)) {    return false;  }  Certificate certificate=keyStore.getCertificate(alias);  String algorithm=certificate.getPublicKey().getAlgorithm();  return algorithm.equals(EC.jce());}  }
class C{  private void initialize(){  time_low=0;  time_mid=0;  time_hi_and_version=0;  clock_seq_low=0;  clock_seq_hi_and_reserved=0;  for (int j=0; j < node.length; j++) {    node[j]=0x00;  }}  }
class C{  public RootSwitch(String name,int level,NetworkDatacenter dc){  super(name,level,dc);  downlinkswitchpktlist=new HashMap<Integer,List<NetworkPacket>>();  downlinkswitches=new ArrayList<Switch>();  downlinkbandwidth=NetworkConstants.BandWidthAggRoot;  latency=NetworkConstants.SwitchingDelayRoot;  numport=NetworkConstants.RootSwitchPort;}  }
class C{  public void testAddMathContextDiffScalePosNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="7.47233429416141E+45";  int cScale=-31;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(15,RoundingMode.CEILING);  BigDecimal result=aNumber.add(bNumber,mc);  assertEquals("incorrect value",c,c.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  protected void showHistory(){  log.info("");  Integer M_Product_ID=getSelectedRowKey();  if (M_Product_ID == null)   return;  int M_Warehouse_ID=0;  if (fWarehouse_ID.getValue() != null)   M_Warehouse_ID=(Integer)fWarehouse_ID.getValue();  int M_AttributeSetInstance_ID=m_M_AttributeSetInstance_ID;  if (m_M_AttributeSetInstance_ID < -1)   M_AttributeSetInstance_ID=0;  InvoiceHistory ih=new InvoiceHistory(this,0,M_Product_ID.intValue(),M_Warehouse_ID,M_AttributeSetInstance_ID);  ih.setVisible(true);  ih=null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.LINUX_OS ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  protected void drawValueLabel(Graphics2D g2,Rectangle2D area){  g2.setFont(this.valueFont);  g2.setPaint(this.valuePaint);  String valueStr="No value";  if (this.dataset != null) {    Number n=this.dataset.getValue();    if (n != null) {      valueStr=this.tickLabelFormat.format(n.doubleValue()) + " " + this.units;    }  }  float x=(float)area.getCenterX();  float y=(float)area.getCenterY() + DEFAULT_CIRCLE_SIZE;  TextUtilities.drawAlignedString(valueStr,g2,x,y,TextAnchor.TOP_CENTER);}  }
class C{  @Override public int hashCode(){  int result;  long temp;  temp=m != 0.0d ? Double.doubleToLongBits(m) : 0L;  result=(int)(temp ^ (temp >>> 32));  temp=t != 0.0d ? Double.doubleToLongBits(t) : 0L;  result=29 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public boolean hasCapacityFor(ItemStack stack){  if (stack == null)   return true;  if (hasContent()) {    if (!hasMatching(stack))     return false;  }  return getAvailableCapacity() >= stack.stackSize;}  }
class C{  public static String checkStoreCustomerRole(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (productStore != null && userLogin != null) {    if ("Y".equals(productStore.getString("requireCustomerRole"))) {      List<GenericValue> productStoreRoleList=null;      try {        productStoreRoleList=EntityQuery.use(delegator).from("ProductStoreRole").where("productStoreId",productStore.get("productStoreId"),"partyId",userLogin.get("partyId"),"roleTypeId","CUSTOMER").filterByDate().queryList();      } catch (      GenericEntityException e) {        Debug.logError(e,"Database error finding CUSTOMER ProductStoreRole records, required by the ProductStore with ID [" + productStore.getString("productStoreId") + "]",module);      }      if (UtilValidate.isEmpty(productStoreRoleList)) {        String errorMsg="The " + productStore.getString("storeName") + " ["+ productStore.getString("productStoreId")+ "] ProductStore requires that customers be associated with it, and the logged in user is NOT associated with it in the CUSTOMER role; userLoginId=["+ userLogin.getString("userLoginId")+ "], partyId=["+ userLogin.getString("partyId")+ "]";        Debug.logWarning(errorMsg,module);        request.setAttribute("_ERROR_MESSAGE_",errorMsg);        session.removeAttribute("userLogin");        session.removeAttribute("autoUserLogin");        return "error";      }    }  }  return "success";}  }
class C{  public void clear(){  banners.clear();}  }
class C{  public long count(){  return xStats.count();}  }
class C{  public Charset charset(){  return charset != null ? Charset.forName(charset) : null;}  }
class C{  public UsbAccessory(String[] strings){  mManufacturer=strings[MANUFACTURER_STRING];  mModel=strings[MODEL_STRING];  mDescription=strings[DESCRIPTION_STRING];  mVersion=strings[VERSION_STRING];  mUri=strings[URI_STRING];  mSerial=strings[SERIAL_STRING];}  }
class C{  @Ignore @Test public void testPseudoEnormousCache() throws InterruptedException, ExecutionException {  Map<Integer,Integer> map=new PseudoConcurrentMap(8192);  for (long i=Integer.MIN_VALUE; i <= Integer.MAX_VALUE; i++) {    Assert.assertThat(map.put((int)i,(int)i),IsNull.nullValue());  }  MapInternals stats=((ConcurrentMapInternals)map).getSegmentInternals().get(0);  Assert.assertEquals(32,stats.getReprobeLength());}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public String decodeStreamIntoObjects(final byte[] stream,final boolean returnText){  if (stream.length == 0) {    return null;  }  int startInlineStream=0;  final CommandParser parser=new CommandParser(stream);  final int streamSize=stream.length;  int dataPointer=0;  int startCommand=0;  int shapeCommandCount=0;  PdfShape currentDrawShape=null;  if (parserOptions.useJavaFX()) {    JavaFXSupport fxSupport=ExternalHandlers.getFXHandler();    if (fxSupport != null) {      currentDrawShape=fxSupport.getFXShape();    }  } else {    currentDrawShape=new SwingShape();  }  final Tj textDecoder;  if (parserOptions.hasContentHandler()) {    textDecoder=new Tj(parserOptions,textAreas,textDirections,current,errorTracker);  } else {    textDecoder=new Tj(parserOptions,pdfData,isXMLExtraction,textAreas,textDirections,current,errorTracker);    textDecoder.setReturnText(returnText);  }  textDecoder.setStreamType(streamType);  if (statusBar != null && !parserOptions.renderDirectly()) {    statusBar.percentageDone=0;    statusBar.resetStatus("stream");  }  while (true) {    if (errorTracker.checkForExitRequest(dataPointer,streamSize)) {      break;    }    if (statusBar != null && !parserOptions.renderDirectly()) {      statusBar.percentageDone=(90 * dataPointer) / streamSize;    }    dataPointer=parser.getCommandValues(dataPointer,tokenNumber);    final int commandID=parser.getCommandID();    if (dataPointer < 0) {      dataPointer=-dataPointer;      try {        final int commandType=Cmd.getCommandType(commandID);switch (commandType) {case Cmd.TEXT_COMMAND:          if ((commandID == Cmd.EMC || parserOptions.isLayerVisible()) && !getSamplingOnly && (renderText || textExtracted)) {            dataPointer=processTextToken(textDecoder,parser,commandID,startCommand,dataPointer);          }        break;case Cmd.SHAPE_COMMAND:      if (!getSamplingOnly) {        processShapeCommands(parser,currentDrawShape,commandID);        shapeCommandCount++;        if (maxShapesAllowed > 0 && shapeCommandCount > maxShapesAllowed) {          final String errMessage="[PDF] Shapes on page exceed limit set by JVM flag org.jpedal.maxShapeCount - value " + maxShapesAllowed;          parserOptions.tooManyShapes=true;          throw new PdfException(errMessage);        }      }    break;case Cmd.SHADING_COMMAND:  if (System.getProperty("testsDisableImages") != null) {    break;  }if (!getSamplingOnly && parserOptions.isRenderPage()) {  if (parserOptions.useJavaFX) {    if (!showFXShadingMessage) {      System.out.println("SH not implemented in JavaFX yet");      showFXShadingMessage=true;    }  } else {    SH.execute(parser.generateOpAsString(0,true),cache,gs,isPrinting,parserOptions.getPageNumber(),currentPdfFile,pageData,current);  }}break;case Cmd.COLOR_COMMAND:if (!getSamplingOnly) {if (commandID != Cmd.SCN && commandID != Cmd.scn && commandID != Cmd.SC && commandID != Cmd.sc) {current.writeCustom(DynamicVectorRenderer.RESET_COLORSPACE,null);}switch (commandID) {case Cmd.cs:CS.execute(true,parser.generateOpAsString(0,true),gs,cache,currentPdfFile,isPrinting);break;case Cmd.CS:CS.execute(false,parser.generateOpAsString(0,true),gs,cache,currentPdfFile,isPrinting);break;case Cmd.rg:RG.execute(true,gs,parser,cache);break;case Cmd.RG:RG.execute(false,gs,parser,cache);break;case Cmd.SCN:SCN.execute(false,gs,parser,cache);break;case Cmd.scn:SCN.execute(true,gs,parser,cache);break;case Cmd.SC:SCN.execute(false,gs,parser,cache);break;case Cmd.sc:SCN.execute(true,gs,parser,cache);break;case Cmd.g:G.execute(true,gs,parser,cache);break;case Cmd.G:G.execute(false,gs,parser,cache);break;case Cmd.k:K.execute(true,gs,parser,cache);break;case Cmd.K:K.execute(false,gs,parser,cache);break;}}break;case Cmd.GS_COMMAND:processGScommands(parser,commandID);if (commandID == Cmd.cm && textDecoder != null) {multipleTJs=false;}break;case Cmd.IMAGE_COMMAND:if (commandID == Cmd.BI) {startInlineStream=dataPointer;} else {PdfObject XObject=null;int subtype=1;if (commandID == Cmd.Do) {final String name=parser.generateOpAsString(0,true);final byte[] XObjectData=cache.getXObjects(name);if (XObjectData != null) {XObject=PdfObjectFactory.getPDFObjectObjectFromRefOrDirect(new XObject("1 0 R"),currentPdfFile.getObjectReader(),XObjectData,PdfDictionary.XObject);subtype=XObject.getParameterConstant(PdfDictionary.Subtype);}if (subtype == PdfDictionary.Form) {if (formLevel > 100 && dataPointer == lastDataPointer) {} else {lastDataPointer=dataPointer;if (!parserOptions.isLayerVisible() || (layers != null && !layers.isVisible(XObject)) || XObject == null) {} else {XFormDecoder.processXForm(this,dataPointer,XObject,parserOptions.defaultClip,parser);}}}}if (subtype != PdfDictionary.Form) {final ImageDecoder imageDecoder;if (commandID != Cmd.Do) {imageDecoder=new ID(imageCount,currentPdfFile,errorTracker,customImageHandler,objectStoreStreamRef,pdfImages,pageData,imagesInFile);} else {imageDecoder=new DO(imageCount,currentPdfFile,errorTracker,customImageHandler,objectStoreStreamRef,pdfImages,pageData,imagesInFile);}imageDecoder.setRes(cache);imageDecoder.setGS(gs);imageDecoder.setSamplingOnly(getSamplingOnly);imageDecoder.setStreamType(streamType);imageDecoder.setMultiplyer(multiplyer);imageDecoder.setRenderer(current);parserOptions.isPrinting(isPrinting);imageDecoder.setParams(parserOptions);if (commandID == Cmd.Do) {if (XObject == null || !parserOptions.isLayerVisible() || (layers != null && !layers.isVisible(XObject)) || (gs.CTM != null && gs.CTM[1][1] == 0 && gs.CTM[1][0] != 0 && Math.abs(gs.CTM[1][0]) < 0.2)) {} else {String name=parser.generateOpAsString(0,true);if (formLevel > 0) {name=formName + '_' + formLevel+ '_'+ name;}dataPointer=imageDecoder.processImage(name,dataPointer,XObject);}} else if (parserOptions.isLayerVisible()) {dataPointer=imageDecoder.processImage(dataPointer,startInlineStream,parser.getStream(),tokenNumber);}imageCount++;imagesInFile=imageDecoder.getImagesInFile();}}break;case Cmd.T3_COMMAND:if (!getSamplingOnly && (renderText || textExtracted)) {if (t3Decoder == null) {t3Decoder=new T3Decoder();}t3Decoder.setCommands(parser);t3Decoder.setCommands(parser);t3Decoder.processToken(commandID);}break;}} catch (final Exception e) {LogWriter.writeLog("[PDF] " + e + " Processing token >"+ Cmd.getCommandAsString(commandID)+ "<>"+ parserOptions.getFileName()+ " <"+ parserOptions.getPageNumber());if (!isDataValid) {dataPointer=streamSize;}}catch (final OutOfMemoryError ee) {errorTracker.addPageFailureMessage("Memory error decoding token stream " + ee);LogWriter.writeLog("[MEMORY] Memory error - trying to recover");}startCommand=dataPointer;parser.reset();incrementTokenNumber();}if (streamSize <= dataPointer) {break;}}if (!parserOptions.renderDirectly() && statusBar != null) {statusBar.percentageDone=100;}isTTHintingRequired=textDecoder.isTTHintingRequired();if (returnText) {return lastTextValue;} else {return "";}}  }
class C{  protected NeighborList findKNearest(final Instance target,final int k) throws Exception {  Stack<d_node> cover_set_current=new Stack<d_node>(), cover_set_next, zero_set=new Stack<d_node>();  CoverTreeNode parent, child;  d_node par;  MyHeap upper_k=new MyHeap(k);  double d=Math.sqrt(m_DistanceFunction.distance(m_Root.p(),target,Double.POSITIVE_INFINITY,m_TreeStats)), upper_bound;  cover_set_current.push(new d_node(d,m_Root));  setter(upper_k,Double.POSITIVE_INFINITY,k);  this.update(upper_k,d);  if (m_TreeStats != null) {    if (m_Root.num_children > 0) {      m_TreeStats.incrIntNodeCount();    } else {      m_TreeStats.incrLeafCount();    }    m_TreeStats.incrPointCount();  }  if (m_Root.num_children == 0) {    NeighborList list=new NeighborList(k);    list.insertSorted(d,m_Root.p());    return list;  }  while (cover_set_current.length > 0) {    cover_set_next=new Stack<d_node>();    for (int i=0; i < cover_set_current.length; i++) {      par=cover_set_current.element(i);      parent=par.n;      for (int c=0; c < parent.num_children; c++) {        child=parent.children.element(c);        upper_bound=upper_k.peek().distance;        if (c == 0) {          d=par.dist;        } else {          d=upper_bound + child.max_dist;          d=Math.sqrt(m_DistanceFunction.distance(child.p(),target,d * d,m_TreeStats));          if (m_TreeStats != null) {            m_TreeStats.incrPointCount();          }        }        if (d <= (upper_bound + child.max_dist)) {          if (c > 0 && d < upper_bound) {            update(upper_k,d);          }          if (child.num_children > 0) {            cover_set_next.push(new d_node(d,child));            if (m_TreeStats != null) {              m_TreeStats.incrIntNodeCount();            }          } else           if (d <= upper_bound) {            zero_set.push(new d_node(d,child));            if (m_TreeStats != null) {              m_TreeStats.incrLeafCount();            }          }        }      }    }    cover_set_current=cover_set_next;  }  NeighborList list=new NeighborList(k);  d_node tmpnode;  upper_bound=upper_k.peek().distance;  for (int i=0; i < zero_set.length; i++) {    tmpnode=zero_set.element(i);    if (tmpnode.dist <= upper_bound) {      list.insertSorted(tmpnode.dist,tmpnode.n.p());    }  }  if (list.currentLength() <= 0) {    throw new Exception("Error: No neighbour found. This cannot happen");  }  return list;}  }
class C{  public Interval(ReadableDuration duration,ReadableInstant end){  super(duration,end);}  }
class C{  public synchronized void removeIndexFamily(IPath path){  ArrayList toRemove=null;  Object[] containerPaths=this.indexLocations.keyTable;  for (int i=0, length=containerPaths.length; i < length; i++) {    IPath containerPath=(IPath)containerPaths[i];    if (containerPath == null)     continue;    if (path.isPrefixOf(containerPath)) {      if (toRemove == null)       toRemove=new ArrayList();      toRemove.add(containerPath);    }  }  if (toRemove != null)   for (int i=0, length=toRemove.size(); i < length; i++)   removeIndex((IPath)toRemove.get(i));}  }
class C{  public void open() throws IOException {  if (cache == null) {    client=new HttpSolrClient.Builder(baseUrl).build();  } else {    client=cache.getHttpSolrClient(baseUrl);  }  try {    jsonTupleStream=JSONTupleStream.create(client,loadParams(params));  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  protected String doIt() throws java.lang.Exception {  StringBuffer sql=null;  int no=0;  String clientCheck=" AND AD_Client_ID=" + m_AD_Client_ID;  if (m_deleteOldImported) {    sql=new StringBuffer("DELETE I_ReportLine " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Delete Old Impored =" + no);  }  sql=new StringBuffer("UPDATE I_ReportLine " + "SET AD_Client_ID = COALESCE (AD_Client_ID, ").append(m_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID, 0)," + " IsActive = COALESCE (IsActive, 'Y'),"+ " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Reset=" + no);  if (m_PA_ReportLineSet_ID != 0) {    sql=new StringBuffer("UPDATE I_ReportLine i " + "SET ReportLineSetName=(SELECT Name FROM PA_ReportLineSet r" + " WHERE PA_ReportLineSet_ID=").append(m_PA_ReportLineSet_ID).append(" AND i.AD_Client_ID=r.AD_Client_ID) " + "WHERE ReportLineSetName IS NULL AND PA_ReportLineSet_ID IS NULL" + " AND I_IsImported<>'Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Set ReportLineSetName Default=" + no);  }  sql=new StringBuffer("UPDATE I_ReportLine i " + "SET PA_ReportLineSet_ID=(SELECT PA_ReportLineSet_ID FROM PA_ReportLineSet r" + " WHERE i.ReportLineSetName=r.Name AND i.AD_Client_ID=r.AD_Client_ID) "+ "WHERE PA_ReportLineSet_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set PA_ReportLineSet_ID=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid ReportLineSet, ' " + "WHERE PA_ReportLineSet_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid ReportLineSet=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'Ignored=NoLineName, ' " + "WHERE PA_ReportLine_ID IS NULL AND Name IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid LineName=" + no);  sql=new StringBuffer("UPDATE I_ReportLine i " + "SET C_ElementValue_ID=(SELECT C_ElementValue_ID FROM C_ElementValue e" + " WHERE i.ElementValue=e.Value AND i.AD_Client_ID=e.AD_Client_ID) "+ "WHERE C_ElementValue_ID IS NULL AND ElementValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set C_ElementValue_ID=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid ElementValue, ' " + "WHERE C_ElementValue_ID IS NULL AND LineType<>'C'"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid AccountType=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET SeqNo=I_ReportLine_ID " + "WHERE SeqNo IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set SeqNo Default=" + no);  sql=new StringBuffer("UPDATE I_ReportLine i " + "SET (Description, SeqNo, IsSummary, IsPrinted, LineType, CalculationType, AmountType, PAAmountType, PAPeriodType, PostingType)=" + " (SELECT Description, SeqNo, IsSummary, IsPrinted, LineType, CalculationType, AmountType, PAAmountType, PAPeriodType, PostingType"+ " FROM I_ReportLine ii WHERE i.Name=ii.Name AND i.PA_ReportLineSet_ID=ii.PA_ReportLineSet_ID"+ " AND ii.I_ReportLine_ID=(SELECT MIN(I_ReportLine_ID) FROM I_ReportLine iii"+ " WHERE i.Name=iii.Name AND i.PA_ReportLineSet_ID=iii.PA_ReportLineSet_ID)) "+ "WHERE EXISTS (SELECT *"+ " FROM I_ReportLine ii WHERE i.Name=ii.Name AND i.PA_ReportLineSet_ID=ii.PA_ReportLineSet_ID"+ " AND ii.I_ReportLine_ID=(SELECT MIN(I_ReportLine_ID) FROM I_ReportLine iii"+ " WHERE i.Name=iii.Name AND i.PA_ReportLineSet_ID=iii.PA_ReportLineSet_ID))"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Sync from first Row of Line=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET IsSummary='N' " + "WHERE IsSummary IS NULL OR IsSummary NOT IN ('Y','N')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set IsSummary Default=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET IsPrinted='Y' " + "WHERE IsPrinted IS NULL OR IsPrinted NOT IN ('Y','N')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set IsPrinted Default=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET LineType='S' " + "WHERE LineType IS NULL OR LineType NOT IN ('S','C')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set LineType Default=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid CalculationType, ' " + "WHERE CalculationType IS NOT NULL AND CalculationType NOT IN ('A','P','R','S')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid CalculationType=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET PAAmountType = substr(AmountType,1,1), PAPeriodType = substr(AmountType,1,2) " + "WHERE AmountType IS NOT NULL AND (PAAmountType IS NULL OR PAPeriodType IS NULL) "+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Converted AmountType=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid PAAmountType, ' " + "WHERE PAAmountType IS NOT NULL AND UPPER(AmountType) NOT IN ('B','C','D','Q','S','R')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid AmountType=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid PAPeriodType, ' " + "WHERE PAPeriodType IS NOT NULL AND UPPER(AmountType) NOT IN ('P','Y','T','N')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid PeriodType=" + no);  sql=new StringBuffer("UPDATE I_ReportLine " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid CalculationType, ' " + "WHERE PostingType IS NOT NULL AND PostingType NOT IN ('A','B','E','S','R')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid PostingType=" + no);  sql=new StringBuffer("UPDATE I_ReportLine i " + "SET PA_ReportLine_ID=(SELECT MAX(PA_ReportLine_ID) FROM PA_ReportLine r" + " WHERE i.Name=r.Name AND i.PA_ReportLineSet_ID=r.PA_ReportLineSet_ID) "+ "WHERE PA_ReportLine_ID IS NULL AND PA_ReportLineSet_ID IS NOT NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set PA_ReportLine_ID=" + no);  commitEx();  int noInsertLine=0;  int noUpdateLine=0;  sql=new StringBuffer("SELECT DISTINCT PA_ReportLineSet_ID, Name " + "FROM I_ReportLine " + "WHERE I_IsImported='N' AND PA_ReportLine_ID IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  try {    PreparedStatement pstmt_insertLine=DB.prepareStatement("INSERT INTO PA_ReportLine " + "(PA_ReportLine_ID,PA_ReportLineSet_ID," + "AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"+ "Name,SeqNo,IsPrinted,IsSummary,LineType)"+ "SELECT ?,PA_ReportLineSet_ID,"+ "AD_Client_ID,AD_Org_ID,'Y',SysDate,CreatedBy,SysDate,UpdatedBy,"+ "Name,SeqNo,IsPrinted,IsSummary,LineType "+ "FROM I_ReportLine "+ "WHERE I_ReportLine_ID=(SELECT MAX(I_ReportLine_ID) "+ "FROM I_ReportLine "+ "WHERE PA_ReportLineSet_ID=? AND Name=? " + clientCheck + ")",get_TrxName());    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int PA_ReportLineSet_ID=rs.getInt(1);      String Name=rs.getString(2);      try {        int PA_ReportLine_ID=DB.getNextID(m_AD_Client_ID,"PA_ReportLine",get_TrxName());        if (PA_ReportLine_ID <= 0)         throw new DBException("No NextID (" + PA_ReportLine_ID + ")");        pstmt_insertLine.setInt(1,PA_ReportLine_ID);        pstmt_insertLine.setInt(2,PA_ReportLineSet_ID);        pstmt_insertLine.setString(3,Name);        no=pstmt_insertLine.executeUpdate();        log.finest("Insert ReportLine = " + no + ", PA_ReportLine_ID="+ PA_ReportLine_ID);        noInsertLine++;      } catch (      Exception ex) {        log.finest(ex.toString());        continue;      }    }    rs.close();    pstmt.close();    pstmt_insertLine.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,"Create ReportLine",e);  }  sql=new StringBuffer("UPDATE I_ReportLine i " + "SET PA_ReportLine_ID=(SELECT MAX(PA_ReportLine_ID) FROM PA_ReportLine r" + " WHERE i.Name=r.Name AND i.PA_ReportLineSet_ID=r.PA_ReportLineSet_ID) "+ "WHERE PA_ReportLine_ID IS NULL AND PA_ReportLineSet_ID IS NOT NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set PA_ReportLine_ID=" + no);  sql=new StringBuffer("UPDATE PA_ReportLine r " + "SET (Description,SeqNo,IsSummary,IsPrinted,LineType,CalculationType,AmountType,PAAmountType,PAPeriodType,PostingType,Updated,UpdatedBy)=" + " (SELECT Description,SeqNo,IsSummary,IsPrinted,LineType,CalculationType,AmountType,PAAmountType,PAPeriodType,PostingType,SysDate,UpdatedBy"+ " FROM I_ReportLine i WHERE r.Name=i.Name AND r.PA_ReportLineSet_ID=i.PA_ReportLineSet_ID"+ " AND i.I_ReportLine_ID=(SELECT MIN(I_ReportLine_ID) FROM I_ReportLine iii"+ " WHERE i.Name=iii.Name AND i.PA_ReportLineSet_ID=iii.PA_ReportLineSet_ID)) "+ "WHERE EXISTS (SELECT *"+ " FROM I_ReportLine i WHERE r.Name=i.Name AND r.PA_ReportLineSet_ID=i.PA_ReportLineSet_ID"+ " AND i.I_ReportLine_ID=(SELECT MIN(I_ReportLine_ID) FROM I_ReportLine iii"+ " WHERE i.Name=iii.Name AND i.PA_ReportLineSet_ID=iii.PA_ReportLineSet_ID AND i.I_IsImported='N'))").append(clientCheck);  noUpdateLine=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Update PA_ReportLine=" + noUpdateLine);  int noInsertSource=0;  int noUpdateSource=0;  sql=new StringBuffer("SELECT I_ReportLine_ID, PA_ReportSource_ID " + "FROM I_ReportLine " + "WHERE PA_ReportLine_ID IS NOT NULL"+ " AND I_IsImported='N'").append(clientCheck);  try {    PreparedStatement pstmt_insertSource=DB.prepareStatement("INSERT INTO PA_ReportSource " + "(PA_ReportSource_ID," + "AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"+ "PA_ReportLine_ID,ElementType,C_ElementValue_ID) "+ "SELECT ?,"+ "AD_Client_ID,AD_Org_ID,'Y',SysDate,CreatedBy,SysDate,UpdatedBy,"+ "PA_ReportLine_ID,'AC',C_ElementValue_ID "+ "FROM I_ReportLine "+ "WHERE I_ReportLine_ID=?"+ " AND I_IsImported='N'"+ clientCheck,get_TrxName());    PreparedStatement pstmt_deleteSource=DB.prepareStatement("DELETE FROM PA_ReportSource " + "WHERE C_ElementValue_ID IS NULL" + " AND PA_ReportSource_ID=?"+ clientCheck,get_TrxName());    PreparedStatement pstmt_setImported=DB.prepareStatement("UPDATE I_ReportLine SET I_IsImported='Y'," + " PA_ReportSource_ID=?, " + " Updated=SysDate, Processed='Y' WHERE I_ReportLine_ID=?",get_TrxName());    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int I_ReportLine_ID=rs.getInt(1);      int PA_ReportSource_ID=rs.getInt(2);      if (PA_ReportSource_ID == 0) {        try {          PA_ReportSource_ID=DB.getNextID(m_AD_Client_ID,"PA_ReportSource",get_TrxName());          if (PA_ReportSource_ID <= 0)           throw new DBException("No NextID (" + PA_ReportSource_ID + ")");          pstmt_insertSource.setInt(1,PA_ReportSource_ID);          pstmt_insertSource.setInt(2,I_ReportLine_ID);          no=pstmt_insertSource.executeUpdate();          log.finest("Insert ReportSource = " + no + ", I_ReportLine_ID="+ I_ReportLine_ID+ ", PA_ReportSource_ID="+ PA_ReportSource_ID);          noInsertSource++;        } catch (        Exception ex) {          log.finest("Insert ReportSource - " + ex.toString());          sql=new StringBuffer("UPDATE I_ReportLine i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Insert ElementSource: " + ex.toString())).append("WHERE I_ReportLine_ID=").append(I_ReportLine_ID);          DB.executeUpdate(sql.toString(),get_TrxName());          continue;        }      } else {        String sqlt="UPDATE PA_ReportSource " + "SET (ElementType,C_ElementValue_ID,Updated,UpdatedBy)=" + " (SELECT CAST('AC' AS CHAR(2)),C_ElementValue_ID,SysDate,UpdatedBy"+ " FROM I_ReportLine"+ " WHERE I_ReportLine_ID=" + I_ReportLine_ID + ") "+ "WHERE PA_ReportSource_ID="+ PA_ReportSource_ID+ " "+ clientCheck;        PreparedStatement pstmt_updateSource=DB.prepareStatement(sqlt,get_TrxName());        try {          no=pstmt_updateSource.executeUpdate();          log.finest("Update ReportSource = " + no + ", I_ReportLine_ID="+ I_ReportLine_ID+ ", PA_ReportSource_ID="+ PA_ReportSource_ID);          noUpdateSource++;        } catch (        SQLException ex) {          log.finest("Update ReportSource - " + ex.toString());          sql=new StringBuffer("UPDATE I_ReportLine i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Update ElementSource: " + ex.toString())).append("WHERE I_ReportLine_ID=").append(I_ReportLine_ID);          DB.executeUpdate(sql.toString(),get_TrxName());          continue;        }        pstmt_updateSource.close();      }      pstmt_setImported.setInt(1,PA_ReportSource_ID);      pstmt_setImported.setInt(2,I_ReportLine_ID);      no=pstmt_setImported.executeUpdate();      if (no != 1)       log.log(Level.SEVERE,"Set Imported=" + no);      pstmt_deleteSource.setInt(1,PA_ReportSource_ID);      no=pstmt_deleteSource.executeUpdate();      log.finest("Delete ReportSource with Null Account= " + no + ", I_ReportLine_ID="+ I_ReportLine_ID+ ", PA_ReportSource_ID="+ PA_ReportSource_ID);      commitEx();    }    rs.close();    pstmt.close();    pstmt_insertSource.close();    pstmt_setImported.close();  } catch (  SQLException e) {  }  sql=new StringBuffer("UPDATE I_ReportLine " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInsertLine),"@PA_ReportLine_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noUpdateLine),"@PA_ReportLine_ID@: @Updated@");  addLog(0,null,new BigDecimal(noInsertSource),"@PA_ReportSource_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noUpdateSource),"@PA_ReportSource_ID@: @Updated@");  return "";}  }
class C{  @Override public boolean isAlreadySorted(){  return true;}  }
class C{  private void cmd_new(boolean copy){  log.config("copy=" + copy);  if (!m_curTab.isInsertRecord()) {    log.warning("Insert Record disabled for Tab");    return;  }  m_curGC.stopEditor(true);  m_curGC.acceptEditorChanges();  if (aSave.isEnabled()) {    if (Env.isAutoCommit(m_ctx,m_curWindowNo)) {      if (!cmd_save(true)) {        return;      }    } else     if (ADialog.ask(m_curWindowNo,this,"SaveChanges?",m_curTab.getCommitWarning())) {      if (!cmd_save(true)) {        return;      }    } else     m_curTab.dataIgnore();  }  if (copy && m_curTab.getCurrentRow() < 0)   copy=false;  m_curTab.dataNew(copy);  m_curGC.dynamicDisplay(0);}  }
class C{  protected Popup(Component owner,Component contents,int x,int y){  this();  if (contents == null) {    throw new IllegalArgumentException("Contents must be non-null");  }  reset(owner,contents,x,y);}  }
class C{  public DefaultRequest txAffiliation(String value){  setString(TRANSACTION_AFFILIATION,value);  return this;}  }
class C{  public RestoreSnapshotRequest indices(List<String> indices){  this.indices=indices.toArray(new String[indices.size()]);  return this;}  }
class C{  public static TokenResponse buildTokenResponse(Token token,StorageOSUserDAO user,TokenKeysBundle tokenBundle){  TokenResponse response=new TokenResponse();  try {    if (user != null) {      response.setUserDAO(SerializerUtils.serializeAsBase64EncodedString(user));    }    if (token != null) {      response.setToken(SerializerUtils.serializeAsBase64EncodedString(token));    }    if (tokenBundle != null) {      response.setTokenKeysBundle(SerializerUtils.serializeAsBase64EncodedString(tokenBundle));    }  } catch (  IOException e) {    log.error("Could not serialize/encode TokenReponse artifacts",e);    return null;  }  return response;}  }
class C{  public boolean hasGain(){  return hasExtension(Gain.class);}  }
class C{  public void sendMessage(ClientMessage message){  try {    producer.send(message);  } catch (  ActiveMQException amqEx) {    throw new ActiveMQClientResourceException(String.format("Failed to send message to %s",producer.getAddress().toString()),amqEx);  }}  }
class C{  protected boolean isOutgoingDiscoveryAllowed(DatapathId sw,OFPort port,boolean isStandard,boolean isReverse){  if (isLinkDiscoverySuppressed(sw,port)) {    return false;  }  IOFSwitch iofSwitch=switchService.getSwitch(sw);  if (iofSwitch == null) {    return false;  }  if (port == OFPort.LOCAL)   return false;  OFPortDesc ofpPort=iofSwitch.getPort(port);  if (ofpPort == null) {    if (log.isTraceEnabled()) {      log.trace("Null physical port. sw={}, port={}",sw.toString(),port.getPortNumber());    }    return false;  } else {    return true;  }}  }
class C{  public static JSONArray toJSONArray(XMLTokener x) throws JSONException {  return (JSONArray)parse(x,true,null);}  }
class C{  public void initShare(String wechatAppId,String weiboAppId,String qqAppId,String wechatSecret,String sinaRedirectUrl){  mWechatAppId=wechatAppId;  mWeiboAppId=weiboAppId;  mQQAppId=qqAppId;  mWechatSecret=wechatSecret;  this.mSinaRedirectUrl=sinaRedirectUrl;}  }
class C{  public void readCharacteristic(UUID uuid,ActionCallback callback){  try {    this.currentCallback=callback;    BluetoothGattCharacteristic chara=gatt.getService(Profile.UUID_SERVICE_MILI).getCharacteristic(uuid);    if (null == chara) {      this.onFail(-1,"BluetoothGattCharacteristic " + uuid + " doesn't exist");      return;    }    if (!this.gatt.readCharacteristic(chara)) {      this.onFail(-1,"gatt.readCharacteristic() return false");    }  } catch (  Throwable tr) {    Log.e(TAG,"readCharacteristic",tr);    this.onFail(-1,tr.getMessage());  }}  }
class C{  public static final long labelsId(byte[] key,Map<String,String> labels){  long[] sipkey=SipHashInline.getKey(key);  return labelsId(sipkey,labels);}  }
class C{  public static boolean isPrimitive(TypeMirror type){switch (type.getKind()) {case BOOLEAN:case BYTE:case CHAR:case DOUBLE:case FLOAT:case INT:case LONG:case SHORT:    return true;default :  return false;}}  }
class C{  public DefinedMethod addDescription(String description){  this.description=Optional.of(description);  return this;}  }
class C{  public FilterOutputStream(OutputStream out){  this.out=out;}  }
class C{  private void releaseDocument(final IDocument document,final IProgressMonitor monitor) throws CoreException {  Assert.isTrue(fCount > 0);  if (fCount == 1)   FileBuffers.getTextFileBufferManager().disconnect(fFile.getFullPath(),LocationKind.IFILE,monitor);  fCount--;}  }
class C{  protected void loop(){  final long now=now();  deltaTime=(now - lastRender) / 1000f;  lastRender=now;  if (runnables.size > 0) {    runnablesToInvoke.addAll(runnables);    runnables.clear();    for (    final Runnable runnable : runnablesToInvoke) {      runnable.run();    }    runnablesToInvoke.clear();  }  listener.render();  input.reset();  requestAnimationFrame(loopRunnable);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String cleanString(String src){  if (src == null) {    return null;  }  boolean foundBad=false;  final CharacterIterator it=new StringCharacterIterator(src);  for (char c=it.first(); c != CharacterIterator.DONE; c=it.next()) {    if (c < ASCII_PRINTABLE_LOW || c >= ASCII_PRINTABLE_HI) {      foundBad=true;      break;    }  }  if (!foundBad) {    return src;  }  final StringBuilder res=new StringBuilder();  for (char c=it.first(); c != CharacterIterator.DONE; c=it.next()) {    if (c < ASCII_PRINTABLE_LOW || c >= ASCII_PRINTABLE_HI) {      res.append(ASCII_SPACE);    } else {      res.append(c);    }  }  return res.toString();}  }
class C{  @Override public boolean canWrite(){  OutputStream stream=getStream();  return stream != null;}  }
class C{  @Override public void mouseDragged(MouseEvent e){  if (m_mouseState == 1) {    m_oldMousePos.width=m_newMousePos.width;    m_oldMousePos.height=m_newMousePos.height;    m_newMousePos.width=e.getX();    m_newMousePos.height=e.getY();    m_viewPos.width+=m_newMousePos.width - m_oldMousePos.width;    m_viewPos.height+=m_newMousePos.height - m_oldMousePos.height;  } else   if (m_mouseState == 3) {    Graphics g=getGraphics();    if (m_ZoomBoxColor == null) {      g.setColor(Color.black);    } else {      g.setColor(m_ZoomBoxColor);    }    if (m_ZoomBoxXORColor == null) {      g.setXORMode(Color.white);    } else {      g.setXORMode(m_ZoomBoxXORColor);    }    g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);    m_newMousePos.width=e.getX();    m_newMousePos.height=e.getY();    g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);    g.dispose();  }}  }
class C{  private Map<String,ResourcePostProcessor> toPostProcessors(final Map<String,ResourcePreProcessor> preProcessorsMap){  final Map<String,ResourcePostProcessor> map=new HashMap<String,ResourcePostProcessor>();  for (  final Entry<String,ResourcePreProcessor> entry : preProcessorsMap.entrySet()) {    map.put(entry.getKey(),new ProcessorDecorator(entry.getValue()));  }  return map;}  }
class C{  public UmlModelParser(Model model,StateMachineComponentResolver<String,String> resolver){  Assert.notNull(model,"Model must be set");  Assert.notNull(resolver,"Resolver must be set");  this.model=model;  this.resolver=resolver;}  }
class C{  public void testServiceConfiguration() throws Exception {  TungstenProperties config=helper.createSimpleRuntimeWith2Services();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  Pipeline pipeline=runtime.getPipeline();  List<PipelineService> services=runtime.getServices();  assertEquals("checking for service number",2,services.size());  for (  PipelineService service : services) {    String name=service.getName();    SampleService sSvc=(SampleService)runtime.getService(name);    assertEquals("listed vs. look-up",service,sSvc);    assertTrue("configured",sSvc.configured);    assertFalse("prepared",sSvc.prepared);    assertFalse("released",sSvc.released);  }  pipeline.prepare(runtime);  for (  PipelineService service : services) {    SampleService sSvc=(SampleService)service;    assertTrue("prepared",sSvc.prepared);  }  pipeline.release(runtime);  for (  PipelineService service : services) {    SampleService sSvc=(SampleService)service;    assertTrue("released",sSvc.released);  }}  }
class C{  public void afterIndexLookup(Collection results){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:37.709 -0500",hash_original_method="7EEA5ED41B923A03FC6EA491A90F691D",hash_generated_method="B07DABA9EBEAE2FC26090D1F1017D5EF") public static SmsHeader fromByteArray(byte[] data){  ByteArrayInputStream inStream=new ByteArrayInputStream(data);  SmsHeader smsHeader=new SmsHeader();  while (inStream.available() > 0) {    int id=inStream.read();    int length=inStream.read();    ConcatRef concatRef;    PortAddrs portAddrs;switch (id) {case ELT_ID_CONCATENATED_8_BIT_REFERENCE:      concatRef=new ConcatRef();    concatRef.refNumber=inStream.read();  concatRef.msgCount=inStream.read();concatRef.seqNumber=inStream.read();concatRef.isEightBits=true;if (concatRef.msgCount != 0 && concatRef.seqNumber != 0 && concatRef.seqNumber <= concatRef.msgCount) {smsHeader.concatRef=concatRef;}break;case ELT_ID_CONCATENATED_16_BIT_REFERENCE:concatRef=new ConcatRef();concatRef.refNumber=(inStream.read() << 8) | inStream.read();concatRef.msgCount=inStream.read();concatRef.seqNumber=inStream.read();concatRef.isEightBits=false;if (concatRef.msgCount != 0 && concatRef.seqNumber != 0 && concatRef.seqNumber <= concatRef.msgCount) {smsHeader.concatRef=concatRef;}break;case ELT_ID_APPLICATION_PORT_ADDRESSING_8_BIT:portAddrs=new PortAddrs();portAddrs.destPort=inStream.read();portAddrs.origPort=inStream.read();portAddrs.areEightBits=true;smsHeader.portAddrs=portAddrs;break;case ELT_ID_APPLICATION_PORT_ADDRESSING_16_BIT:portAddrs=new PortAddrs();portAddrs.destPort=(inStream.read() << 8) | inStream.read();portAddrs.origPort=(inStream.read() << 8) | inStream.read();portAddrs.areEightBits=false;smsHeader.portAddrs=portAddrs;break;case ELT_ID_NATIONAL_LANGUAGE_SINGLE_SHIFT:smsHeader.languageShiftTable=inStream.read();break;case ELT_ID_NATIONAL_LANGUAGE_LOCKING_SHIFT:smsHeader.languageTable=inStream.read();break;default :MiscElt miscElt=new MiscElt();miscElt.id=id;miscElt.data=new byte[length];inStream.read(miscElt.data,0,length);smsHeader.miscEltList.add(miscElt);}}return smsHeader;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static void main(String[] args){  long first=System.currentTimeMillis();  long sum=0;  for (int i=0; i < 100000; i++) {    String[] str=strings();    sum+=str[0].charAt(0);  }  long done=System.currentTimeMillis();  System.out.println((done - first) * 1000);  System.out.println(sum);}  }
class C{  public DefaultOneOfAttributeCondition(String localName,String namespaceURI,boolean specified,String value){  super(localName,namespaceURI,specified,value);}  }
class C{  public InlineQueryResultCachedMpeg4Gif build(){  return new InlineQueryResultCachedMpeg4Gif(id,mpeg4_file_id,title,caption,reply_markup,input_message_content);}  }
class C{  public TileStore(){  this(SpriteStore.get());}  }
class C{  public BeanContainer findEnclosingContainer(Object bean){  if (!(bean instanceof SimpleBeanObject)) {    return null;  }  SimpleBeanObject obj=(SimpleBeanObject)bean;  float objLat=obj.getLatitude();  float objLon=obj.getLongitude();  LatLonPoint llp=new LatLonPoint.Float(objLat,objLon);  return findEnclosingContainer(llp);}  }
class C{  public static TCPEndpoint read(ObjectInput in) throws IOException, ClassNotFoundException {  String host;  int port;  RMIClientSocketFactory csf=null;  byte format=in.readByte();switch (format) {case FORMAT_HOST_PORT:    host=in.readUTF();  port=in.readInt();break;case FORMAT_HOST_PORT_FACTORY:host=in.readUTF();port=in.readInt();csf=(RMIClientSocketFactory)in.readObject();break;default :throw new IOException("invalid endpoint format");}return new TCPEndpoint(host,port,csf,null);}  }
class C{  public boolean isDescription(){  Object oo=get_Value(COLUMNNAME_IsDescription);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/vpool-change") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList changeVolumesVirtualPool(VolumeVirtualPoolChangeParam param) throws InternalException, APIException {  List<URI> ids=param.getVolumes();  ArgValidator.checkFieldNotEmpty(ids,"volumes");  _log.info("Request to change VirtualPool for volumes {}",ids);  List<Volume> volumes=new ArrayList<Volume>();  TaskList taskList=new TaskList();  for (  URI id : ids) {    ArgValidator.checkFieldUriType(id,Volume.class,"volume");    Volume volume=queryVolumeResource(id);    volumes.add(volume);    checkForPendingTasks(Arrays.asList(volume.getTenant().getURI()),Arrays.asList(volume));  }  _log.info("Found volumes");  verifyAllVolumesBelongToSameVpool(volumes);  VirtualPool vPool=null;  long totalProvisionedCapacity=0;  for (  Volume volume : volumes) {    _log.info("Checking on volume: {}",volume.getId());    BlockServiceUtils.validateNotAnInternalBlockObject(volume,param.getForceFlag());    VolumeIngestionUtil.checkOperationSupportedOnIngestedVolume(volume,ResourceOperationTypeEnum.CHANGE_BLOCK_VOLUME_VPOOL,_dbClient);    URI projectURI=volume.getProject().getURI();    Project project=_permissionsHelper.getObjectById(projectURI,Project.class);    ArgValidator.checkEntity(project,projectURI,false);    _log.info("Found volume project {}",projectURI);    BlockServiceUtils.verifyUserIsAuthorizedForRequest(project,getUserFromContext(),_permissionsHelper);    _log.info("User is authorized for volume's project");    vPool=getVirtualPoolForRequest(project,param.getVirtualPool(),_dbClient,_permissionsHelper);    _log.info("Found new VirtualPool {}",vPool.getId());    verifyVirtualPoolChangeSupportedForVolumeAndVirtualPool(volume,vPool);    _log.info("VirtualPool change is supported for requested volume and VirtualPool");    totalProvisionedCapacity+=volume.getProvisionedCapacity().longValue();  }  verifyAllVolumesInCGRequirement(volumes,vPool);  if (!CapacityUtils.validateVirtualPoolQuota(_dbClient,vPool,totalProvisionedCapacity)) {    throw APIException.badRequests.insufficientQuotaForVirtualPool(vPool.getLabel(),"volume");  }  String taskId=UUID.randomUUID().toString();  if (param.getConsistencyGroup() != null) {    BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,param.getConsistencyGroup());    if (cg != null && !cg.getInactive()) {      cg.getRequestedTypes().addAll(getRequestedTypes(vPool));      _dbClient.updateObject(cg);    }  }  try {    BlockServiceApi blockServiceAPI=getBlockServiceImplForVirtualPoolChange(volumes.get(0),vPool);    _log.info("Got block service implementation for VirtualPool change request");    VirtualPoolChangeParam oldParam=convertNewVirtualPoolChangeParamToOldParam(param);    TaskList taskList2=blockServiceAPI.changeVolumeVirtualPool(volumes,vPool,oldParam,taskId);    if (taskList2 != null && !taskList2.getTaskList().isEmpty()) {      taskList.getTaskList().addAll(taskList2.getTaskList());    }    _log.info("Executed VirtualPool change for given volumes.");  } catch (  Exception e) {    String errorMsg=String.format("Volume VirtualPool change error: %s",e.getMessage());    _log.error(errorMsg,e);    if (!taskList.getTaskList().isEmpty()) {      for (      TaskResourceRep volumeTask : taskList.getTaskList()) {        volumeTask.setState(Operation.Status.error.name());        volumeTask.setMessage(errorMsg);        _dbClient.updateTaskOpStatus(Volume.class,volumeTask.getResource().getId(),taskId,new Operation(Operation.Status.error.name(),errorMsg));      }    } else {      for (      Volume volume : volumes) {        _dbClient.updateTaskOpStatus(Volume.class,volume.getId(),taskId,new Operation(Operation.Status.error.name(),errorMsg));      }    }    throw e;  }  for (  Volume volume : volumes) {    auditOp(OperationTypeEnum.CHANGE_VOLUME_VPOOL,true,AuditLogManager.AUDITOP_BEGIN,volume.getLabel(),1,volume.getVirtualArray().toString(),volume.getProject().toString());  }  return taskList;}  }
class C{  @Override public boolean isBeforeFirst() throws SQLException {  try {    debugCodeCall("isBeforeFirst");    checkClosed();    int row=result.getRowId();    int count=result.getRowCount();    return count > 0 && row < 0;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public <T>T evaluate(String expressionString,Map<String,Object> variables){  return evaluate(parseExpression(expressionString),variables);}  }
class C{  private void processIsiExport(IsilonApi isi,FileDeviceInputOutput args,List<ExportRule> exports) throws IsilonException {  _log.info("ProcessIsiExport  Start");  for (  ExportRule exportRule : exports) {    String root_user=exportRule.getAnon();    Set<String> rootHosts=exportRule.getRootHosts();    String isilonExportId=exportRule.getDeviceExportId();    if (isilonExportId != null) {      IsilonExport isilonExport=null;      String zoneName=getZoneName(args.getvNAS());      if (zoneName != null) {        isilonExport=isi.getExport(isilonExportId,zoneName);      } else {        isilonExport=isi.getExport(isilonExportId);      }      if (exportRule.getComments() != null && !exportRule.getComments().isEmpty()) {        isilonExport.setComment(exportRule.getComments());      }      _log.info("Update Isilon Export with id {} and {}",isilonExportId,isilonExport);      List<String> allClients=new ArrayList<>();      if (isilonExport != null) {        boolean hasrwClients=false;        boolean hasrootClients=false;        if ((isilonExport.getReadWriteClients() != null && !isilonExport.getReadWriteClients().isEmpty()) || (exportRule.getReadWriteHosts() != null && !exportRule.getReadWriteHosts().isEmpty())) {          hasrwClients=true;        }        if ((isilonExport.getRootClients() != null && !isilonExport.getRootClients().isEmpty()) || (exportRule.getRootHosts() != null && !exportRule.getRootHosts().isEmpty())) {          hasrootClients=true;        }        List<String> roClients=new ArrayList<>();        if (exportRule.getReadOnlyHosts() != null) {          roClients.addAll(exportRule.getReadOnlyHosts());          allClients.addAll(exportRule.getReadOnlyHosts());          List<String> existingRWRootClients=new ArrayList<String>();          existingRWRootClients.addAll(isilonExport.getReadWriteClients());          existingRWRootClients.addAll(isilonExport.getRootClients());          List<String> commonHosts=getIntersection(existingRWRootClients,roClients);          if (!commonHosts.isEmpty()) {            Set<String> existingRWClients=new HashSet<String>(isilonExport.getReadWriteClients());            Set<String> existingRootClients=new HashSet<String>(isilonExport.getRootClients());            existingRWClients.removeAll(commonHosts);            existingRootClients.removeAll(commonHosts);            isilonExport.setRootClients(new ArrayList<String>(existingRootClients));            isilonExport.setReadWriteClients(new ArrayList<String>(existingRWClients));          } else {            setClientsIntoIsilonExport("root",exportRule.getRootHosts(),isilonExport);            setClientsIntoIsilonExport("rw",exportRule.getReadWriteHosts(),isilonExport);          }          isilonExport.setReadOnlyClients(new ArrayList<String>(roClients));        }        List<String> rwClients=new ArrayList<>();        if (exportRule.getReadWriteHosts() != null) {          rwClients.addAll(exportRule.getReadWriteHosts());          allClients.addAll(exportRule.getReadWriteHosts());          List<String> existingRORootClients=new ArrayList<String>();          existingRORootClients.addAll(isilonExport.getReadOnlyClients());          existingRORootClients.addAll(isilonExport.getRootClients());          List<String> commonHosts=getIntersection(existingRORootClients,rwClients);          if (!commonHosts.isEmpty()) {            Set<String> existingROClients=new HashSet<String>(isilonExport.getReadOnlyClients());            Set<String> existingRootClients=new HashSet<String>(isilonExport.getRootClients());            existingROClients.removeAll(commonHosts);            existingRootClients.removeAll(commonHosts);            isilonExport.setRootClients(new ArrayList<String>(existingRootClients));            isilonExport.setReadOnlyClients(new ArrayList<String>(existingROClients));          } else {            setClientsIntoIsilonExport("root",exportRule.getRootHosts(),isilonExport);            setClientsIntoIsilonExport("ro",exportRule.getReadOnlyHosts(),isilonExport);          }          isilonExport.setReadWriteClients(new ArrayList<String>(rwClients));        }        List<String> rootClients=new ArrayList<>();        if (rootHosts != null) {          rootClients.addAll(rootHosts);          allClients.addAll(rootHosts);          List<String> existingRORWClients=new ArrayList<String>();          existingRORWClients.addAll(isilonExport.getReadOnlyClients());          existingRORWClients.addAll(isilonExport.getReadWriteClients());          List<String> commonHosts=getIntersection(existingRORWClients,rootClients);          if (!commonHosts.isEmpty()) {            Set<String> existingROClients=new HashSet<String>(isilonExport.getReadOnlyClients());            Set<String> existingRWClients=new HashSet<String>(isilonExport.getReadWriteClients());            existingROClients.removeAll(commonHosts);            existingRWClients.removeAll(commonHosts);            isilonExport.setReadWriteClients(new ArrayList<String>(existingRWClients));            isilonExport.setReadOnlyClients(new ArrayList<String>(existingROClients));          } else {            setClientsIntoIsilonExport("ro",exportRule.getReadOnlyHosts(),isilonExport);            setClientsIntoIsilonExport("rw",exportRule.getReadWriteHosts(),isilonExport);          }          isilonExport.setRootClients(new ArrayList<String>(rootClients));        }        if (hasrwClients || hasrootClients) {          isilonExport.resetReadOnly();        } else {          isilonExport.setReadOnly();        }        if (hasrootClients) {          isilonExport.setMapRoot(null);          isilonExport.setMapAll("root");        } else {          isilonExport.setMapAll(null);          isilonExport.setMapRoot(root_user);        }        isilonExport.setClients(new ArrayList<String>(allClients));        IsilonExport clonedExport=cloneExport(isilonExport);        _log.info("Update Isilon Export with id {} and new info {}",isilonExportId,clonedExport.toString());        if (zoneName != null) {          isi.modifyExport(isilonExportId,zoneName,clonedExport);        } else {          isi.modifyExport(isilonExportId,clonedExport);        }      }    }  }  _log.info("ProcessIsiExport  Completed");}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  return map;}  }
class C{  public static final AuthnProviderParamsToValidate mapToValidateUpdate(AuthnUpdateParam param,AuthnProvider provider){  AuthnProviderParamsToValidate authnToValidate=mapToValidateCommon(param,provider);  if (provider == null) {    authnToValidate.getGroupObjectClasses().addAll(param.getGroupObjectClassChanges().getAdd());    authnToValidate.getGroupMemberAttributes().addAll(param.getGroupMemberAttributeChanges().getAdd());  } else {    authnToValidate.getGroupObjectClasses().addAll(param.getGroupObjectClassChanges().getAdd().isEmpty() ? provider.getGroupObjectClassNames() : param.getGroupObjectClassChanges().getAdd());    authnToValidate.getGroupMemberAttributes().addAll(param.getGroupMemberAttributeChanges().getAdd().isEmpty() ? provider.getGroupMemberAttributeTypeNames() : param.getGroupMemberAttributeChanges().getAdd());  }  return authnToValidate;}  }
class C{  public Collection<ExpressionObject<?>> analyzeExpression(GenericPK id,Expression formula,ExpressionAST expression) throws ScopeException {  ExtractReferences visitor=new ExtractReferences();  List<ExpressionRef> references=visitor.apply(expression);  String internal=rewriteExpressionValue(formula.getValue(),expression,references);  if (!internal.equals(formula.getValue())) {    formula.setInternal(internal);  } else {    formula.setInternal(null);  }  int level=computeReferenceTree(expression,references);  formula.setLevel(level);  Collection<ExpressionObject<?>> objects=new HashSet<>();  for (  ExpressionRef expr : references) {    Object ref=expr.getReference();    if (ref != null && ref instanceof Property) {      Property property=(Property)ref;      ExpressionObject<?> object=property.getExpressionObject();      if (object != null) {        objects.add(object);      }    }  }  if (!objects.isEmpty()) {    Collection<ExpressionObject<?>> closure=null;    Collection<ExpressionObject<?>> transitiveClosure=objects;    do {      closure=transitiveClosure;      transitiveClosure=transitiveClosure(id,closure);    } while (closure.size() < transitiveClosure.size());    Collection<ReferencePK<?>> IDs=new HashSet<>();    for (    ExpressionObject<?> object : transitiveClosure) {      ReferencePK<?> refPk=reference(object);      if (refPk != null) {        IDs.add(refPk);      }    }    formula.setReferences(IDs);    return transitiveClosure;  } else {    return objects;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:54.800 -0500",hash_original_method="5954B7E2243EB0AA755A2C7023AF3E50",hash_generated_method="E4EC00F798DD35579B3FA9A6C74222C7") public boolean hasReachedZero(){  return ((maxForwards) == 1);}  }
class C{  public PdfRendererBuilder useCache(FSCache cache){  this._cache=cache;  return this;}  }
class C{  public Approximator(){  this.mType=ApproximatorType.NONE;}  }
class C{  public static boolean isWindows(){  return System.getProperty("os.name").startsWith("Windows");}  }
class C{  public synchronized boolean offer(String key,Operation op){  if (key == null || op == null) {    throw new IllegalArgumentException("key and operation are required");  }  Queue<Operation> q=null;  q=this.queues.computeIfAbsent(key,null);  if (!q.offer(op)) {    op.setStatusCode(Operation.STATUS_CODE_UNAVAILABLE);    op.fail(new CancellationException("queue limit exceeded"));    return false;  }  return true;}  }
class C{  public ITPS readMetadata(final String id,final long timestamp){  return getFileMetadataIndex().read(metadataSchema,id,timestamp,timestamp + 1,null);}  }
class C{  public void requery(){  final Cursor cursor=mCursor;  if (cursor == null) {    return;  }  mDirty=false;  if (!cursor.requery()) {    return;  }  readCursorIntoCache(cursor);  setChanged();  notifyObservers();}  }
class C{  public boolean is(Type type,int index){  int currentIndex=0;  for (  Pair<Type,Object> packetValue : packetValues) {    if (packetValue.getKey() == type) {      if (currentIndex == index) {        return true;      }      currentIndex++;    }  }  return false;}  }
class C{  public ForceReattemptException(String message,Throwable cause){  super(message,cause);}  }
class C{  public int datagramSize(){  return _myDatagramSize;}  }
class C{  public AttributedString(AttributedCharacterIterator text){  this(text,text.getBeginIndex(),text.getEndIndex(),null);}  }
class C{  public static int toUnsignedShort(byte b0,byte b1){  return ((b0 & 0xff) << 8) | (b1 & 0xff);}  }
class C{  public MutablePeriod(PeriodType type){  super(0L,type,null);}  }
class C{  private static void makeNullStaticField(final Class sslClass){  Field[] fields=sslClass.getDeclaredFields();  for (int index=0; index < fields.length; ++index) {    Field field=fields[index];    try {      if (Modifier.isStatic(field.getModifiers())) {        field.setAccessible(true);        if (field.getClass().equals(boolean.class)) {          field.setBoolean(null,false);          assertFalse(field.getBoolean(null));        } else         if (sslClass.isInstance(field.get(null))) {          field.set(null,null);          assertNull(field.get(null));        }      }    } catch (    IllegalAccessException ex) {      getLogWriter().warning("Exception while clearing static SSL field.",ex);    }catch (    ClassCastException ex) {      getLogWriter().warning("Exception while clearing static SSL field.",ex);    }  }}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  if (mAdapter != null && !(mAdapter instanceof HeaderViewListAdapter)) {    throw new IllegalStateException("Cannot add header view to list -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (mAdapter != null && mDataSetObserver != null) {    mDataSetObserver.onChanged();  }}  }
class C{  Context(Context ctx,Node node){  if (ctx == null) {    this.frameNumber=1;    this.scopeNumber=2;    this.varNumber=0;  } else {    this.prev=ctx;    this.locals=ctx.locals;    this.classes=ctx.classes;    this.varNumber=ctx.varNumber;    this.field=ctx.field;    this.frameNumber=ctx.frameNumber;    this.scopeNumber=ctx.scopeNumber + 1;    this.node=node;  }}  }
class C{  public static void revokeToken(String protocol,String domain,String token,PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {  String revokeUrl=getRevokeTokenUrl(protocol,domain);  URL url=new URL(revokeUrl);  HttpURLConnection httpConn=(HttpURLConnection)url.openConnection();  String header=formAuthorizationHeader(token,key,url,"GET");  httpConn.setRequestProperty("Authorization",header);  if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) {    throw new AuthenticationException(httpConn.getResponseCode() + ": " + httpConn.getResponseMessage());  }}  }
class C{  public T upperEndpoint(){  if (hasUpperEndpoint())   return upperEndpoint;  throw new IllegalStateException("unbounded");}  }
class C{  private void resizeFramebufferTexture(){  glDeleteTextures(raytraceTexture);  glDeleteTextures(positionTexture);  glDeleteTextures(normalTexture);  glDeleteRenderbuffers(depthRenderBuffer);  glDeleteFramebuffers(fbo);  createRaytracingTexture();  createRasterizerTextures();  createRasterFrameBufferObject();}  }
class C{  private static <Item extends Comparable>Queue<Queue<Item>> makeSingleItemQueues(Queue<Item> items){  return null;}  }
class C{  @Override public <U extends Comparable<? super U>>Eval<Optional<T>> maxBy(final Function<? super T,? extends U> function){  return Eval.later(null);}  }
class C{  public static boolean processAuthHeader(OkAuthenticator authenticator,int responseCode,RawHeaders responseHeaders,RawHeaders successorRequestHeaders,Proxy proxy,URL url) throws IOException {  String responseField;  String requestField;  if (responseCode == HTTP_UNAUTHORIZED) {    responseField="WWW-Authenticate";    requestField="Authorization";  } else   if (responseCode == HTTP_PROXY_AUTH) {    responseField="Proxy-Authenticate";    requestField="Proxy-Authorization";  } else {    throw new IllegalArgumentException();  }  List<Challenge> challenges=parseChallenges(responseHeaders,responseField);  if (challenges.isEmpty()) {    return false;  }  Credential credential=responseHeaders.getResponseCode() == HTTP_PROXY_AUTH ? authenticator.authenticateProxy(proxy,url,challenges) : authenticator.authenticate(proxy,url,challenges);  if (credential == null) {    return false;  }  successorRequestHeaders.set(requestField,credential.getHeaderValue());  return true;}  }
class C{  public String toFormattedString(){  return "Device properties:\n    " + createString("\n    ");}  }
class C{  public void updateDatabases(int pass){  if (pass == 0) {    getCheckReturnAnnotationDatabase().loadAuxiliaryAnnotations();    getNullnessAnnotationDatabase().loadAuxiliaryAnnotations();  }}  }
class C{  private boolean genMatch(int startByte,int anchor){  boolean ok=pattern.re2().match(inputSequence,startByte,inputLength,anchor,groups,1);  if (!ok) {    return false;  }  hasMatch=true;  hasGroups=false;  anchorFlag=anchor;  return true;}  }
class C{  @Override public Cookie[] parse(final String host,final int port,final String path,final boolean secure,final Header header) throws MalformedCookieException {  LOG.trace("enter RFC2965.parse(" + "String, int, String, boolean, Header)");  if (header == null) {    throw new IllegalArgumentException("Header may not be null.");  }  if (header.getName() == null) {    throw new IllegalArgumentException("Header name may not be null.");  }  if (header.getName().equalsIgnoreCase(SET_COOKIE2_KEY)) {    return parse(host,port,path,secure,header.getValue());  } else   if (header.getName().equalsIgnoreCase(RFC2109Spec.SET_COOKIE_KEY)) {    return rfc2109.parse(host,port,path,secure,header.getValue());  } else {    throw new MalformedCookieException("Header name is not valid. " + "RFC 2965 supports \"set-cookie\" " + "and \"set-cookie2\" headers.");  }}  }
class C{  public synchronized int read() throws IOException {  if (stopped) {    return -1;  }  lastActivityTime=System.currentTimeMillis();  if (disableBuffering) {    int v=getInIfOpen().read();    if (printInput && v > -1) {      System.out.print((char)v);    }    totalBytesRead++;    fireProgress();    return v;  }  if (pos >= count) {    fill();    if (pos >= count) {      return -1;    }  }  totalBytesRead++;  fireProgress();  int v=getBufIfOpen()[pos++] & 0xff;  if (printInput) {    System.out.print((char)v);  }  return v;}  }
class C{  protected final void terminate(){  getCaller().finish();  if (getCaller().getRoot() != getCaller()) {    getCaller().dispose();  }}  }
class C{  protected DisjunctionImpl(){  super();}  }
class C{  public JPanelNull(AppView oApp,Object o){  initComponents();  if (o instanceof Exception) {  }  jtxtException.setText(o.toString());}  }
class C{  public void testThreeNodeSubmitCommand() throws Throwable {  testSubmitCommand(3);}  }
class C{  public void transpose(){  float temp=mMat[1];  mMat[1]=mMat[2];  mMat[2]=temp;}  }
class C{  public void add(String expr,StrokeAction f){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,f);}  }
class C{  public void mouseExited(MouseEvent e){  if (e.getSource() == BasicSplitPaneDivider.this) {    setMouseOver(false);  }}  }
class C{  private void enterAtomic(){  manageCallStackSize.incrementAndGet();}  }
class C{  public int ioThreads(){  return mIoThreads;}  }
class C{  private Route createRoute(String urlPattern,HttpHook hook){  return new Route(vertx,storage,loggingResourceManager,monitoringHandler,userProfilePath,hook,urlPattern);}  }
class C{  boolean restoreVolumeFromSnapshot(String snapshotName){  NaElement elem=new NaElement("snapshot-restore-volume");  elem.addNewChild("volume",name);  elem.addNewChild("snapshot",snapshotName);  try {    server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to restore volume to specified snapshot: " + snapshotName;    log.error(msg,e);    throw new NetAppCException(msg,e);  }  return true;}  }
class C{  public void buildIndex() throws Exception {  log.info("Building an index of {} docs",NUM_DOCS);  long longValue=MAX_LONG;  for (int i=1; i <= NUM_DOCS; i++) {    final String strValue="s" + longValue;    indexDoc(sdoc("id","" + i,"int_i","" + i,"int_i_prehashed_l","" + HASHER.hashInt(i).asLong(),"long_l","" + longValue,"long_l_prehashed_l","" + HASHER.hashLong(longValue).asLong(),"string_s",strValue,"string_s_prehashed_l","" + HASHER.hashString(strValue).asLong()));    longValue-=BIG_PRIME;  }  commit();}  }
class C{  public static void main(String[] args){  TestBadSourceFile tester=new TestBadSourceFile();  int exitCode=run(tester,ARGS,TEST,NEGATED_TEST);  tester.checkExitCode(0,exitCode);  tester.printSummary();}  }
class C{  public IllegalStateException(String s){  super(s);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.385 -0400",hash_original_method="AEC932ABAD6BD3D26DA661A0D3655827",hash_generated_method="38152F1A8F437FC89A8BF7703DAB79E9") @Override public synchronized void mark(int readlimit){  in.mark(readlimit);  mark=pos;}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int left=leftInit;  int right=rightInit;  int up=upInit;  int down=downInit;  boolean sizeExceeded=false;  boolean aBlackPointFoundOnBorder=true;  boolean atLeastOneBlackPointFoundOnBorder=false;  while (aBlackPointFoundOnBorder) {    aBlackPointFoundOnBorder=false;    boolean rightBorderNotWhite=true;    while (rightBorderNotWhite && right < width) {      rightBorderNotWhite=containsBlackPoint(up,down,right,false);      if (rightBorderNotWhite) {        right++;        aBlackPointFoundOnBorder=true;      }    }    if (right >= width) {      sizeExceeded=true;      break;    }    boolean bottomBorderNotWhite=true;    while (bottomBorderNotWhite && down < height) {      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);      if (bottomBorderNotWhite) {        down++;        aBlackPointFoundOnBorder=true;      }    }    if (down >= height) {      sizeExceeded=true;      break;    }    boolean leftBorderNotWhite=true;    while (leftBorderNotWhite && left >= 0) {      leftBorderNotWhite=containsBlackPoint(up,down,left,false);      if (leftBorderNotWhite) {        left--;        aBlackPointFoundOnBorder=true;      }    }    if (left < 0) {      sizeExceeded=true;      break;    }    boolean topBorderNotWhite=true;    while (topBorderNotWhite && up >= 0) {      topBorderNotWhite=containsBlackPoint(left,right,up,true);      if (topBorderNotWhite) {        up--;        aBlackPointFoundOnBorder=true;      }    }    if (up < 0) {      sizeExceeded=true;      break;    }    if (aBlackPointFoundOnBorder) {      atLeastOneBlackPointFoundOnBorder=true;    }  }  if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {    int maxSize=right - left;    ResultPoint z=null;    for (int i=1; i < maxSize; i++) {      z=getBlackPointOnSegment(left,down - i,left + i,down);      if (z != null) {        break;      }    }    if (z == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint t=null;    for (int i=1; i < maxSize; i++) {      t=getBlackPointOnSegment(left,up + i,left + i,up);      if (t != null) {        break;      }    }    if (t == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint x=null;    for (int i=1; i < maxSize; i++) {      x=getBlackPointOnSegment(right,up + i,right - i,up);      if (x != null) {        break;      }    }    if (x == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint y=null;    for (int i=1; i < maxSize; i++) {      y=getBlackPointOnSegment(right,down - i,right - i,down);      if (y != null) {        break;      }    }    if (y == null) {      throw NotFoundException.getNotFoundInstance();    }    return centerEdges(y,z,x,t);  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMMetadataElement(prefix,(AbstractDocument)doc);}  }
class C{  public static boolean hasAtLeastOneMethodWithName(Class<?> clazz,String methodName){  Assert.notNull(clazz,"Class must not be null");  Assert.notNull(methodName,"Method name must not be null");  Method[] declaredMethods=clazz.getDeclaredMethods();  for (  Method method : declaredMethods) {    if (method.getName().equals(methodName)) {      return true;    }  }  Class<?>[] ifcs=clazz.getInterfaces();  for (  Class<?> ifc : ifcs) {    if (hasAtLeastOneMethodWithName(ifc,methodName)) {      return true;    }  }  return (clazz.getSuperclass() != null && hasAtLeastOneMethodWithName(clazz.getSuperclass(),methodName));}  }
class C{  public static boolean checkFileReadToken(PsiBuilder b,int l){  IElementType tokenType=b.getTokenType();  if (tokenType == LEFT_ANGLE) {    b.advanceLexer();    return true;  }  if (tokenType == OPERATOR_LT_NUMERIC && b.getLatestDoneMarker() != null && b.getLatestDoneMarker().getTokenType() == BLOCK) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    m.collapse(LEFT_ANGLE);    return true;  }  return false;}  }
class C{  protected String allocate(Warrant warrant){  if (log.isDebugEnabled()) {    log.debug("Allocate block \"" + getDisplayName() + "\" to warrant \""+ warrant.getDisplayName()+ "\"");  }  if (warrant == null) {    return "ERROR! allocate called with null warrant in block \"" + getDisplayName() + "\"!";  }  if (_warrant != null && !warrant.equals(_warrant)) {    return Bundle.getMessage("AllocatedToWarrant",_warrant.getDisplayName(),getDisplayName());  }  int state=getState();  if ((state & OUT_OF_SERVICE) != 0) {    return Bundle.getMessage("BlockOutOfService",getDisplayName());  }  if (_pathName == null) {    _pathName=warrant.getRoutePathInBlock(this);  }  _warrant=warrant;  setState(getState() | ALLOCATED);  return null;}  }
class C{  public SVGOMClipPathElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  boolean findCellForSpan(int[] cellXY,int spanX,int spanY){  return findCellForSpanThatIntersectsIgnoring(cellXY,spanX,spanY,-1,-1,null,mOccupied);}  }
class C{  protected void sequence_AsyncFunctionExpression_FunctionBody_FunctionHeader_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void startDreamWhenDockedIfAppropriate(Context context){  if (!isScreenSaverEnabled(context) || !isScreenSaverActivatedOnDock(context)) {    Slog.i(TAG,"Dreams currently disabled for docks.");    return;  }  startDream(context,true);}  }
class C{  public boolean hasAnnotation(Class annotationType){  return hasAnnotation(annotationType.getName());}  }
class C{  public void append(StringBuffer buffer,String fieldName,char value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public VersionNumber(int majorNumber,int minorNumber,int patchLevel){  this(majorNumber,minorNumber,patchLevel,null);}  }
class C{  protected void prepareTableDefinition(File f) throws ReplicatorException {  ArrayList<ColumnSpec> columns=null;  CSVReader columnReader=null;  String[] columnDef=null;  ColumnSpec cSpec=null;  OneRowChange specOrc=new OneRowChange();  String tableName=f.getName().substring(0,f.getName().length() - 4);  try {    tableNames.add(tableName);    logger.info("Parse column definition for " + tableName);    columns=new ArrayList<ColumnSpec>();    columnReader=new CSVReader(new FileReader(f),',','"');    while ((columnDef=columnReader.readNext()) != null) {      if (columnDef.length < 2) {        throw new ReplicatorException("The column definition is not formatted properly");      }      cSpec=specOrc.new ColumnSpec();      cSpec.setName(columnDef[0]);      cSpec.setType(new Integer(columnDef[1]));      if (columnDef.length == 3) {        cSpec.setLength(new Integer(columnDef[2]));      }      columns.add(cSpec);    }    columnDefinitions.put(tableName,columns);  } catch (  FileNotFoundException e) {  }catch (  NumberFormatException e) {    throw new ReplicatorException(e);  }catch (  IOException e) {    throw new ReplicatorException(e);  }catch (  Exception e) {    throw new ReplicatorException(e);  } finally {    try {      if (columnReader != null) {        columnReader.close();      }    } catch (    IOException e) {      throw new ReplicatorException(e);    }  }}  }
class C{  public boolean testAab(float minX,float minY,float minZ,float maxX,float maxY,float maxZ){  return nxX * (nxX < 0 ? minX : maxX) + nxY * (nxY < 0 ? minY : maxY) + nxZ * (nxZ < 0 ? minZ : maxZ) >= -nxW && pxX * (pxX < 0 ? minX : maxX) + pxY * (pxY < 0 ? minY : maxY) + pxZ * (pxZ < 0 ? minZ : maxZ) >= -pxW && nyX * (nyX < 0 ? minX : maxX) + nyY * (nyY < 0 ? minY : maxY) + nyZ * (nyZ < 0 ? minZ : maxZ) >= -nyW && pyX * (pyX < 0 ? minX : maxX) + pyY * (pyY < 0 ? minY : maxY) + pyZ * (pyZ < 0 ? minZ : maxZ) >= -pyW && nzX * (nzX < 0 ? minX : maxX) + nzY * (nzY < 0 ? minY : maxY) + nzZ * (nzZ < 0 ? minZ : maxZ) >= -nzW && pzX * (pzX < 0 ? minX : maxX) + pzY * (pzY < 0 ? minY : maxY) + pzZ * (pzZ < 0 ? minZ : maxZ) >= -pzW;}  }
class C{  public static IOCase forName(String name){  if (IOCase.SENSITIVE.name.equals(name)) {    return IOCase.SENSITIVE;  }  if (IOCase.INSENSITIVE.name.equals(name)) {    return IOCase.INSENSITIVE;  }  if (IOCase.SYSTEM.name.equals(name)) {    return IOCase.SYSTEM;  }  throw new IllegalArgumentException("Invalid IOCase name: " + name);}  }
class C{  public SQLSyntaxErrorException(Throwable cause){  super(cause);}  }
class C{  public Object clone(){  return this;}  }
class C{  public void endDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.endDocument();  }}  }
class C{  private void processBinlogEvent(MySQLPacket packet) throws IOException, InterruptedException {  long timestamp=packet.getUnsignedInt32();  int typeCode=packet.getUnsignedByte();  long serverId=packet.getUnsignedInt32();  long eventLength=packet.getUnsignedInt32();  long nextPosition=packet.getUnsignedInt32();  int flags=packet.getUnsignedShort();  if (logger.isDebugEnabled()) {    StringBuffer sb=new StringBuffer("Reading binlog event:");    sb.append(" timestamp=").append(timestamp);    sb.append(" type_code=").append(typeCode);    sb.append(" server_id=").append(serverId);    sb.append(" event_length=").append(eventLength);    sb.append(" next_position=").append(nextPosition);    sb.append(" flags=").append(flags);    if (logger.isDebugEnabled())     logger.debug(sb.toString());  }  if (typeCode == MysqlBinlog.ROTATE_EVENT) {    offset=packet.getLong();    if (checksum != null && !checksum.equalsIgnoreCase("NONE")) {      binlog=packet.getString(packet.getRemainingBytes() - 4);    } else {      binlog=packet.getString();    }    if (logger.isDebugEnabled()) {      StringBuffer sb2=new StringBuffer("ROTATE_EVENT:");      sb2.append(" next_start_offset=").append(offset);      sb2.append(" next_binlog_name=").append(binlog);      if (logger.isDebugEnabled())       logger.debug(sb2.toString());    }    if (this.relayOutput != null) {      writePacketToRelayLog(packet);      closeBinlog();    }  } else {    writePacketToRelayLog(packet);  }}  }
class C{  public void addLoadConstant(double k){  add(ByteCode.LDC2_W,itsConstantPool.addConstant(k));}  }
class C{  public TargetHostsBuilder(){}  }
class C{  static private char[] skipWhitespacesPrefix(char[] data){  for (int i=0; i < data.length; i++) {    if (!XMLChar.isSpace(data[i])) {      if (i == 0) {        return data;      } else {        return Arrays.copyOfRange(data,i,data.length);      }    }  }  return new char[0];}  }
class C{  protected S_DirectAssignmentImpl(){  super();}  }
class C{  public JPAEncryptedMailboxMessage(JPAMailbox mailbox,MessageUid uid,long modSeq,MailboxMessage message) throws MailboxException {  super(mailbox,uid,modSeq,message);  try {    this.body=IOUtils.toByteArray(message.getBodyContent());    this.header=IOUtils.toByteArray(message.getHeaderContent());  } catch (  IOException e) {    throw new MailboxException("Unable to parse message",e);  }}  }
class C{  private void handleLinkTag(HTMLElement linkTag){  String linkType=linkTag.getAttributeById(HTMLElement.ATTR_TYPE);  String media=linkTag.getAttributeById(HTMLElement.ATTR_MEDIA);  String href=linkTag.getAttributeById(HTMLElement.ATTR_HREF);  String charset=linkTag.getAttributeById(HTMLElement.ATTR_CHARSET);  if ((linkType != null) && (linkType.equalsIgnoreCase("text/css")) && (href != null)&& (CSSParser.getInstance().mediaTypeMatches(media))) {    if (docInfo != null) {      threadQueue.addCSS(docInfo.convertURL(href),charset);    } else {      if (DocumentInfo.isAbsoluteURL(href)) {        threadQueue.addCSS(href,charset);      } else {        if (htmlCallback != null) {          htmlCallback.parsingError(HTMLCallback.ERROR_NO_BASE_URL,linkTag.getTagName(),linkTag.getAttributeName(new Integer(HTMLElement.ATTR_HREF)),href,"Ignoring CSS file referred in a LINK tag (" + href + "), since page was set by setBody/setHTML/setDOM so there's no way to access relative URLs");        }      }    }  }}  }
class C{  public boolean isCommitCeiling(){  Object oo=get_Value(COLUMNNAME_IsCommitCeiling);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void checkRepExists(String entidad) throws Exception {  int count;  VolumesTable table=new VolumesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (_id == ISicresAdminDefsKeys.NULL_ID)     count=DbSelectFns.selectCount(dbConn,table.getRepositoryTableName(),table.getCountRepNameQual(_name)); else     count=DbSelectFns.selectCount(dbConn,table.getRepositoryTableName(),table.getCountRepNameIdQual(_id,_name));    if (count > 0)     ISicresAdminBasicException.throwException(ISicresAdminRepositoryKeys.EC_REP_EXIST_NAME);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public void startObservingFontPrefs(){  mFontSizePrefs.addObserver(mFontSizeObserver);  updatePreview();}  }
class C{  public void selectEntity(int en){  if (clientgui.getClient().getGame().getEntity(en) == null) {    System.err.println("PhysicalDisplay: tried to select non-existant entity: " + en);    return;  }  if ((ce() != null) && ce().isWeapOrderChanged()) {    clientgui.getClient().sendEntityWeaponOrderUpdate(ce());  }  cen=en;  clientgui.setSelectedEntityNum(en);  Entity entity=ce();  target(null);  if (entity instanceof Mech) {    int grapple=((Mech)entity).getGrappled();    if (grapple != Entity.NONE) {      Entity t=clientgui.getClient().getGame().getEntity(grapple);      if (t != null) {        target(t);      }    }  }  clientgui.getBoardView().highlight(ce().getPosition());  clientgui.getBoardView().select(null);  clientgui.getBoardView().cursor(null);  clientgui.mechD.displayEntity(entity);  clientgui.mechD.showPanel("movement");  clientgui.bv.centerOnHex(entity.getPosition());  clientgui.getMenuBar().setEntity(ce());  String clubLabel=null;  for (  Mounted club : entity.getClubs()) {    String thisLab;    if (club.getName().endsWith("Club")) {      thisLab=Messages.getString("PhysicalDisplay.Club");    } else {      thisLab=club.getName();    }    if (clubLabel == null) {      clubLabel=thisLab;    } else {      clubLabel=clubLabel + "/" + thisLab;    }  }  if (clubLabel == null) {    clubLabel=Messages.getString("PhysicalDisplay.Club");  }  buttons.get(PhysicalCommand.PHYSICAL_CLUB).setText(clubLabel);  if ((entity instanceof Mech) && !entity.isProne() && entity.getCrew().getOptions().booleanOption("dodge_maneuver")) {    setDodgeEnabled(true);  }}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){  ((Reference)this.lhs).generatePostIncrement(currentScope,this,valueRequired);}  }
class C{  @Override public synchronized void addConfigurationListener(ConfigurationListener cl){}  }
class C{  public static void tagResourcesWithName(AmazonEC2AsyncClient client,String name,String... resourceIds){  Tag awsNameTag=new Tag().withKey(AWS_TAG_NAME).withValue(name);  tagResources(client,Collections.singletonList(awsNameTag),resourceIds);}  }
class C{  public void bind(IntegerProperty property,int value){  if (isAchieved())   return;  bind(property.greaterThanOrEqualTo(value));  BooleanBinding bb=property.greaterThanOrEqualTo(value / 2);  progressListener=null;  bb.addListener(progressListener);}  }
class C{  public DeploymentEvent(ClusterNode node,String msg,int type){  super(node,msg,type);}  }
class C{  public FolderTokenMultFld findById(int fldId) throws Exception {  int i;  FolderTokenMultFld fld=null;  boolean find=false;  for (i=0; i < count(); i++) {    fld=get(i);    if (fld.getId() == fldId) {      find=true;      break;    }  }  if (!find) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  return fld;}  }
class C{  public void lineTo(float x,float y){  checkBuf(2,true);  types[typeSize++]=PathIterator.SEG_LINETO;  points[pointSize++]=x;  points[pointSize++]=y;  dirty=true;}  }
class C{  public Property property(){  return property;}  }
class C{  public void prepare(){  flush();}  }
class C{  public Timestamp(long time){  super((time / 1000) * 1000);  nanos=(int)((time % 1000) * 1000000);  if (nanos < 0) {    nanos=1000000000 + nanos;    super.setTime(((time / 1000) - 1) * 1000);  }}  }
class C{  public void changeZoom(int delta){  SpinnerNumberModel model=(SpinnerNumberModel)this.zoomSelector.getModel();  double curZoom=model.getNumber().doubleValue();  Number newValue=new Double(curZoom + model.getStepSize().doubleValue() * delta * curZoom* 100);  if (newValue.doubleValue() < ZOOM_MIN) {    newValue=ZOOM_MIN;  } else   if (newValue.doubleValue() > ZOOM_MAX) {    newValue=ZOOM_MAX;  }  model.setValue(newValue);  this.updateZoomScale(true);}  }
class C{  public Node findLca(Node root,int n1,int n2){  if (root == null)   return null;  if (root.val == n1 || root.val == n2)   return root;  Node leftLca=findLca(root.left,n1,n2);  Node rightLca=findLca(root.right,n1,n2);  if (leftLca != null && rightLca != null)   return root;  return leftLca != null ? leftLca : rightLca;}  }
class C{  public ActivateSessionResponse activate(byte[] issuedIdentityToken) throws ServiceResultException {  UserIdentityToken token=EndpointUtil.createIssuedIdentityToken(session.getEndpoint(),session.getServerNonce(),issuedIdentityToken);  return activate(token,null);}  }
class C{  public WriteRequest(final ContentFormat contentFormat,final int objectId,final int objectInstanceId,final int resourceId,final Map<Integer,?> values,Type type){  this(Mode.REPLACE,contentFormat,new LwM2mPath(objectId,objectInstanceId,resourceId),LwM2mMultipleResource.newResource(resourceId,values,type));}  }
class C{  @Override public String toString(){  String addr=(base == null) ? "<0" : "<[" + base + "]";  if (index != null) {    addr+="+[" + index;switch (scale) {case 0:      addr+="]";    break;case 1:  addr+="*2]";break;case 2:addr+="*4]";break;case 3:addr+="*8]";break;default :OptimizingCompilerException.UNREACHABLE();}}if (!disp.isZero()) {addr+="+" + unboxedValueString(disp);}switch (size) {case 1:addr+=">B";break;case 2:addr+=">W";break;case 4:addr+=">DW";break;case 8:addr+=">QW";break;case 16:addr+=">PARAGRAPH";break;default :OptimizingCompilerException.UNREACHABLE();}if (loc != null && guard != null) {addr+=" (" + loc + ", "+ guard+ ")";} else if (loc != null) {addr+=" (" + loc + ")";} else if (guard != null) {addr+=" (" + guard + ")";}return addr;}  }
class C{  public SwingDisplay(final byte[] stream,final Map<Object,Object> fonts){  try {    this.fonts=fonts;    final ByteArrayInputStream bis=new ByteArrayInputStream(stream);    final int version=bis.read();    if (version != 1) {      throw new PdfException("Unknown version in serialised object " + version);    }    bis.read();    rawPageNumber=bis.read();    x_coord=(float[])RenderUtils.restoreFromStream(bis);    y_coord=(float[])RenderUtils.restoreFromStream(bis);    text_color=(Vector_Object)RenderUtils.restoreFromStream(bis);    textFillType=(Vector_Int)RenderUtils.restoreFromStream(bis);    stroke_color=new Vector_Object();    stroke_color.restoreFromStream(bis);    fill_color=new Vector_Object();    fill_color.restoreFromStream(bis);    stroke=new Vector_Object();    stroke.restoreFromStream(bis);    pageObjects=new Vector_Object();    pageObjects.restoreFromStream(bis);    javaObjects=(Vector_Object)RenderUtils.restoreFromStream(bis);    shapeType=(Vector_Int)RenderUtils.restoreFromStream(bis);    af1=(Vector_Double)RenderUtils.restoreFromStream(bis);    af2=(Vector_Double)RenderUtils.restoreFromStream(bis);    af3=(Vector_Double)RenderUtils.restoreFromStream(bis);    af4=(Vector_Double)RenderUtils.restoreFromStream(bis);    clips=new Vector_Shape();    clips.restoreFromStream(bis);    objectType=(Vector_Int)RenderUtils.restoreFromStream(bis);    opacity=(Vector_Float)RenderUtils.restoreFromStream(bis);    BMvalues=(Vector_Int)RenderUtils.restoreFromStream(bis);    TRvalues=(Vector_Int)RenderUtils.restoreFromStream(bis);    fs=(Vector_Int)RenderUtils.restoreFromStream(bis);    lw=(Vector_Int)RenderUtils.restoreFromStream(bis);    final int fontCount=(Integer)RenderUtils.restoreFromStream(bis);    for (int ii=0; ii < fontCount; ii++) {      final Object key=RenderUtils.restoreFromStream(bis);      final Object glyphs=RenderUtils.restoreFromStream(bis);      fonts.put(key,glyphs);    }    final int alteredFontCount=(Integer)RenderUtils.restoreFromStream(bis);    for (int ii=0; ii < alteredFontCount; ii++) {      final Object key=RenderUtils.restoreFromStream(bis);      final PdfJavaGlyphs updatedFont=(PdfJavaGlyphs)fonts.get(key);      updatedFont.setDisplayValues((Map<Integer,String>)RenderUtils.restoreFromStream(bis));      updatedFont.setCharGlyphs((Map<Integer,String>)RenderUtils.restoreFromStream(bis));      updatedFont.setEmbeddedEncs((Map<Integer,String>)RenderUtils.restoreFromStream(bis));    }    bis.close();  } catch (  final Exception e) {    LogWriter.writeLog("Exception: " + e.getMessage());  }  type=DynamicVectorRenderer.DISPLAY_SCREEN;  currentItem=pageObjects.get().length;}  }
class C{  public MultipartRequestEntity(final Part[] parts,final HttpMethodParams params){  if (parts == null) {    throw new IllegalArgumentException("parts cannot be null");  }  if (params == null) {    throw new IllegalArgumentException("params cannot be null");  }  this.parts=parts;  this.params=params;}  }
class C{  public boolean isEnableBatchRendering(){  return false;}  }
class C{  public sun.net.ftp.FtpClient changeDirectory(String remoteDirectory) throws sun.net.ftp.FtpProtocolException, IOException {  if (remoteDirectory == null || "".equals(remoteDirectory)) {    throw new IllegalArgumentException("directory can't be null or empty");  }  issueCommandCheck("CWD " + remoteDirectory);  return this;}  }
class C{  private boolean areEqual(Object o1,Object o2){  return (o1 == null && o2 == null) || (o1 != null && o1.equals(o2));}  }
class C{  public static SimpleStreamSet defaultConfig(boolean sendAudio,boolean sendVideo){  return new SimpleStreamSet(MicrophoneSource.getInstance(),CameraSource.getInstance(),sendAudio,sendVideo);}  }
class C{  public GenerateSecretKeyAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("GenerateSecretKeyAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() + InputEvent.ALT_MASK));  putValue(LONG_DESCRIPTION,res.getString("GenerateSecretKeyAction.statusbar"));  putValue(NAME,res.getString("GenerateSecretKeyAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("GenerateSecretKeyAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("GenerateSecretKeyAction.image")))));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesIm == null) {    throw new NullPointerException();  }  if (evidence == null) {    throw new NullPointerException();  }}  }
class C{  public void notifyExited(final ActiveEntity entity,final int oldX,final int oldY){  Rectangle2D eArea;  eArea=entity.getArea(oldX,oldY);  for (  final MovementListener l : movementListeners) {    Rectangle2D area=l.getArea();    if (area.intersects(eArea)) {      l.onExited(entity,this,oldX,oldY);    }  }}  }
class C{  public boolean isInRange(){  IntegerVectorSpecies _species=(IntegerVectorSpecies)species;  for (int i=0; i < genomeLength(); i++)   if (genome[i] < _species.minGene(i) || genome[i] > _species.maxGene(i))   return false;  return true;}  }
class C{  public OscProperties(){  listeners=new Vector<OscEventListener>();}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  private void submit(CopycatClient client,int count,int total){  if (count < total) {    client.submit(new TestCommand()).whenComplete(null);  } else {    resume();  }}  }
class C{  public static void showSinglePointDialog(Context context,String message){  new AlertDialog.Builder(context).setTitle(R.string.title_point).setMessage(message).setPositiveButton(R.string.dialog_confirm,null).show();}  }
class C{  public static final TColor newCMYK(float c,float m,float y,float k){  return newCMYKA(c,m,y,k,1);}  }
class C{  public static TLCVariableValue parseValue(String input){  Assert.isNotNull(input,"The value must be not null");  input.trim();  TLCVariableValue result;  try {    InputPair pair=new InputPair(input,0);    result=innerParse(pair);    if (pair.offset != input.length()) {      throw new VariableValueParseException();    }  } catch (  VariableValueParseException e) {    result=new TLCSimpleVariableValue(input);  }  return result;}  }
class C{  @PUT @Path("/{id}/suspend") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN,Role.SYSTEM_MONITOR,Role.TENANT_ADMIN}) public Response suspendWorkflow(@PathParam("id") URI uri){  suspendWorkflowStep(uri,NullColumnValueGetter.getNullURI());  return Response.ok().build();}  }
class C{  protected void assertResponse(ODataResponse response,MediaType mediaType,String body) throws IOException, TransformerException {  assertThat(response.getContentType(),is(mediaType));  String bodyText=response.getBodyText(UTF_8.name());  assertThat(bodyText,is(not(nullValue())));  if (mediaType.equals(XML)) {    assertThat(prettyPrintXml(bodyText),is(prettyPrintXml(readContent(body))));  } else   if (mediaType.equals(JSON)) {    assertThat(prettyPrintJson(bodyText),is(prettyPrintJson(readContent(body))));  }}  }
class C{  public Bundler putFloat(String key,float value){  bundle.putFloat(key,value);  return this;}  }
class C{  public DJCluster(List<Coord> pointsToCluster,boolean silent){  this.inputPoints=pointsToCluster;  int nullCounter=0;  for (  Coord c : inputPoints) {    if (c == null) {      nullCounter++;    }  }  if (nullCounter > 0) {    log.warn("In DJCluster: of the " + inputPoints.size() + " points, "+ nullCounter+ " were null.");  }  this.clusterList=new ArrayList<DigicoreCluster>();  this.silent=silent;}  }
class C{  public static float unifyRotationTo360(float rotate){  while (rotate < -180) {    rotate+=360;  }  while (rotate > +180) {    rotate-=360;  }  return rotate;}  }
class C{  public void load(Element element,Object o){  log.error("load(Element, Object) called unexpectedly");}  }
class C{  public void storeSession(UserSession session){  sessions.add(session);}  }
class C{  public static final boolean isSDCardPath(String path){  if (TextUtils.isEmpty(path)) {    return false;  }  String sdRootPath=Environment.getExternalStorageDirectory().getAbsolutePath();  if (path.startsWith(sdRootPath)) {    return true;  }  return false;}  }
class C{  private byte skipEntityBackward(){  int initialCharIndex=charIndex;  while (charIndex > 0) {    lastChar=text.charAt(--charIndex);    if (lastChar == '&') {      return Character.DIRECTIONALITY_WHITESPACE;    }    if (lastChar == ';') {      break;    }  }  charIndex=initialCharIndex;  lastChar=';';  return Character.DIRECTIONALITY_OTHER_NEUTRALS;}  }
class C{  public boolean isOptional(){  return this.optionalParams;}  }
class C{  public static final CassandraDaemonProcess create(final ScheduledExecutorService scheduledExecutorService,final Protos.TaskInfo taskInfo,final ExecutorDriver driver) throws IOException {  CassandraDaemonTask cassandraTask=(CassandraDaemonTask)CassandraTask.parse(taskInfo);  CassandraPaths cassandraPaths=CassandraPaths.create(cassandraTask.getConfig().getVersion());  cassandraTask.getConfig().getLocation().writeProperties(cassandraPaths.cassandraLocation());  cassandraTask.getConfig().getApplication().toBuilder().setListenAddress(getListenAddress()).setRpcAddress(getListenAddress()).build().writeDaemonConfiguration(cassandraPaths.cassandraConfig());  cassandraTask.getConfig().getHeap().writeHeapSettings(cassandraPaths.heapConfig());  ProcessBuilder processBuilder=createDaemon(cassandraPaths,cassandraTask,MetricsConfig.writeMetricsConfig(cassandraPaths.conf()));  return new CassandraDaemonProcess(scheduledExecutorService,cassandraTask,cassandraPaths,driver,taskInfo,processBuilder,true);}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public Bundler putByteArray(String key,byte[] value){  bundle.putByteArray(key,value);  return this;}  }
class C{  public Cylinder(Position centerPosition,double northSouthRadius,double verticalRadius,double eastWestRadius,Angle heading,Angle tilt,Angle roll){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.heading=heading;  this.tilt=tilt;  this.roll=roll;  this.setUpGeometryCache();}  }
class C{  public ResourceNotificationException(){}  }
class C{  @Override public void paintValue(java.awt.Graphics gfx,java.awt.Rectangle box){  FontMetrics fm=gfx.getFontMetrics();  int vpad=(box.height - fm.getHeight()) / 2;  String rep=m_customEditor.m_ListModel.getSize() + " " + m_customEditor.m_ElementClass.getName();  gfx.drawString(rep,2,fm.getAscent() + vpad + 2);}  }
class C{  protected void createPanel(){  JScrollPane pane;  setLayout(new BorderLayout());  menuItemMean=new JMenuItem("Get mean...");  menuItemMean.addActionListener(this);  menuItemSetAllValues=new JMenuItem("Set all values to...");  menuItemSetAllValues.addActionListener(this);  menuItemSetMissingValues=new JMenuItem("Set missing values to...");  menuItemSetMissingValues.addActionListener(this);  menuItemReplaceValues=new JMenuItem("Replace values with...");  menuItemReplaceValues.addActionListener(this);  menuItemRenameAttribute=new JMenuItem("Rename attribute...");  menuItemRenameAttribute.addActionListener(this);  menuItemAttributeAsClass=new JMenuItem("Attribute as class");  menuItemAttributeAsClass.addActionListener(this);  menuItemDeleteAttribute=new JMenuItem("Delete attribute");  menuItemDeleteAttribute.addActionListener(this);  menuItemDeleteAttributes=new JMenuItem("Delete attributes...");  menuItemDeleteAttributes.addActionListener(this);  menuItemSortInstances=new JMenuItem("Sort data (ascending)");  menuItemSortInstances.addActionListener(this);  menuItemOptimalColWidth=new JMenuItem("Optimal column width (current)");  menuItemOptimalColWidth.addActionListener(this);  menuItemOptimalColWidths=new JMenuItem("Optimal column width (all)");  menuItemOptimalColWidths.addActionListener(this);  menuItemInsertInstance=new JMenuItem("Insert new instance");  menuItemUndo=new JMenuItem("Undo");  menuItemUndo.addActionListener(this);  menuItemCopy=new JMenuItem("Copy");  menuItemCopy.addActionListener(this);  menuItemSearch=new JMenuItem("Search...");  menuItemSearch.addActionListener(this);  menuItemClearSearch=new JMenuItem("Clear search");  menuItemClearSearch.addActionListener(this);  menuItemDeleteSelectedInstance=new JMenuItem("Delete selected instance");  menuItemDeleteSelectedInstance.addActionListener(this);  menuItemDeleteAllSelectedInstances=new JMenuItem("Delete ALL selected instances");  menuItemDeleteAllSelectedInstances.addActionListener(this);  menuItemInsertInstance.addActionListener(this);  m_TableData=new DataTable();  m_TableData.setToolTipText("Right click (or left+alt) for context menu");  m_TableData.getTableHeader().addMouseListener(this);  m_TableData.getTableHeader().setToolTipText("<html><b>Sort view:</b> left click = ascending / Shift + left click = descending<br><b>Menu:</b> right click (or left+alt)</html>");  m_TableData.getTableHeader().setDefaultRenderer(new DataTableCellRenderer());  m_TableData.addChangeListener(this);  m_TableData.addMouseListener(this);  pane=new JScrollPane(m_TableData);  add(pane,BorderLayout.CENTER);  m_LabelName=new JLabel();  add(m_LabelName,BorderLayout.NORTH);}  }
class C{  private void killAll(String name){  int sz=size();  for (int i=sz - 1; i >= 0; i--) {    String n=getName(i);    if (name == n || (name != null && name.equals(n))) {      remove(i);    }  }}  }
class C{  public TextLabelFactory(FontRenderContext frc,char[] text,Bidi bidi,int flags){  this.frc=frc;  this.text=text.clone();  this.bidi=bidi;  this.flags=flags;  this.lineBidi=bidi;  this.lineStart=0;  this.lineLimit=text.length;}  }
class C{  public void show(){  view.show();}  }
class C{  public void addFlags(int bits){  flags|=bits;}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public boolean addLinkInSelectedLinkList(Link link,boolean remove){  if (isControlPressed == false && selectionSquare.active == false) {    selectedLinkList.clear();  }  if (link != null) {    for (    Link l : selectedLinkList) {      if (l.getId().compareTo(link.getId()) == 0) {        if (remove)         selectedLinkList.remove(l);        return false;      }    }  }  if (link != null) {    selectedLinkList.add(link);  }  activeLink=(Link)link;  return true;}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  public void onGeofenceAdd(int geofenceId,int status){}  }
class C{  public String toJson(){  JSONObject jsonObject=new JSONObject();  try {    jsonObject.put("id",id);    jsonObject.put("month",month);    jsonObject.put("date",date);    jsonObject.put("hour",hour);    jsonObject.put("minute",minute);  } catch (  JSONException e) {    throw new IllegalStateException("Failed to convert the object to JSON");  }  return jsonObject.toString();}  }
class C{  public void testMultipleClients(){  int publishers=2;  int subscribers=5;  String methodName="testMultipleClients";  IMqttAsyncClient[] mqttPublisher=new IMqttAsyncClient[publishers];  IMqttAsyncClient[] mqttSubscriber=new IMqttAsyncClient[subscribers];  IMqttToken connectToken;  IMqttToken subToken;  IMqttDeliveryToken pubToken;  IMqttToken disconnectToken;  try {    String[] topicNames=new String[]{methodName + "/Topic"};    int[] topicQos={0};    for (int i=0; i < mqttPublisher.length; i++) {      mqttPublisher[i]=new MqttAndroidClient(mContext,mqttServerURI,"MultiPub" + i);      connectToken=mqttPublisher[i].connect(null,null);      Log.i(methodName,"publisher connecting url " + mqttServerURI + "MultiPub"+ i);      connectToken.waitForCompletion(waitForCompletionTime);    }    MqttV3Receiver[] mqttV3Receiver=new MqttV3Receiver[mqttSubscriber.length];    for (int i=0; i < mqttSubscriber.length; i++) {      mqttSubscriber[i]=new MqttAndroidClient(mContext,mqttServerURI,"MultiSubscriber" + i);      mqttV3Receiver[i]=new MqttV3Receiver(mqttSubscriber[i],null);      mqttSubscriber[i].setCallback(mqttV3Receiver[i]);      Log.i(methodName,"Assigning callback...");      connectToken=mqttSubscriber[i].connect(null,null);      Log.i(methodName,"subscriber connecting url " + mqttServerURI + "MultiSubscriber"+ i);      connectToken.waitForCompletion(waitForCompletionTime);      subToken=mqttSubscriber[i].subscribe(topicNames,topicQos,null,null);      Log.i(methodName,"subscribe " + topicNames[0].toString() + " QoS is "+ topicQos[0]);      subToken.waitForCompletion(waitForCompletionTime);    }    for (int iMessage=0; iMessage < 2; iMessage++) {      byte[] payload=("Message " + iMessage).getBytes();      for (int i=0; i < mqttPublisher.length; i++) {        pubToken=mqttPublisher[i].publish(topicNames[0],payload,0,false,null,null);        Log.i(methodName,"publish to " + topicNames[0] + " payload is "+ payload.toString());        pubToken.waitForCompletion(waitForCompletionTime);      }      TimeUnit.MILLISECONDS.sleep(30000);      for (int i=0; i < mqttSubscriber.length; i++) {        for (int ii=0; ii < mqttPublisher.length; ii++) {          Log.i(methodName,"validate time = " + new Date().toString());          boolean ok=mqttV3Receiver[i].validateReceipt(topicNames[0],0,payload);          if (!ok) {            fail("Receive failed");          }        }      }    }  } catch (  Exception exception) {    fail("Failed to instantiate:" + methodName + " exception="+ exception);  } finally {    try {      for (int i=0; i < mqttPublisher.length; i++) {        disconnectToken=mqttPublisher[i].disconnect(null,null);        disconnectToken.waitForCompletion(waitForCompletionTime);        mqttPublisher[i].close();      }      for (int i=0; i < mqttSubscriber.length; i++) {        disconnectToken=mqttSubscriber[i].disconnect(null,null);        disconnectToken.waitForCompletion(waitForCompletionTime);        mqttSubscriber[i].close();      }    } catch (    Exception exception) {    }  }}  }
class C{  protected static IntervalRangeOption parseRange(String option){  IntervalRangeOption range=null;  if (option != null) {    range=new IntervalRangeOption();    StringOwnTokenizer tok=new StringOwnTokenizer(option,"-");    String opt;    if (tok.hasMoreTokens()) {      opt=tok.nextToken().trim();      if (StringUtils.isNotBlank(opt))       range.setMinItem(opt);      if (tok.hasMoreTokens()) {        opt=tok.nextToken().trim();        if (StringUtils.isNotBlank(opt))         range.setMaxItem(opt);      }    }  }  return range;}  }
class C{  public static void assumeTrue(boolean assumption,Supplier<String> messageSupplier) throws TestAbortedException {  assumeTrue(null,messageSupplier);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.953 -0500",hash_original_method="DCA59D254EE64B3144EDF9B3ACB43A45",hash_generated_method="3003C39C59D3032711D80AD8F78AAB14") public boolean startsWith(String prefix,int start){  return getTaintBoolean();}  }
class C{  public static TestDataflowRunner fromOptions(PipelineOptions options){  TestDataflowPipelineOptions dataflowOptions=options.as(TestDataflowPipelineOptions.class);  String tempLocation=Joiner.on("/").join(dataflowOptions.getTempRoot(),dataflowOptions.getJobName(),"output","results");  dataflowOptions.setTempLocation(tempLocation);  return new TestDataflowRunner(dataflowOptions);}  }
class C{  public void undoDelete() throws SQLException {  if (getShowDeleted() == false) {    return;  }  checkCursor();  if (onInsertRow == true) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidcp").toString());  }  Row currentRow=(Row)getCurrentRow();  if (currentRow.getDeleted() == true) {    currentRow.clearDeleted();    --numDeleted;    notifyRowChanged();  }}  }
class C{  public void testConfiguratorSetterNameWithLowercaseFirstLetter(){  String setterName=AbstractJonasStandaloneLocalConfiguration.getConfiguratorSetterName(JonasPropertySet.CONFIGURATOR_PREFIX + "httpSessionReplicationActivation");  assertEquals("setHttpSessionReplicationActivation",setterName);}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  protected void fireValueChanged(TreeSelectionEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeSelectionListener.class) {      ((TreeSelectionListener)listeners[i + 1]).valueChanged(e);    }  }}  }
class C{  public <K,V>ConcurrentMap<K,V> makeCache(CacheType cache){  if (maximumCapacity < 0) {    throw new IllegalStateException();  }  return cache.create(this);}  }
class C{  public SQLTransientConnectionException(String reason){  super(reason,null,0);}  }
class C{  public boolean isEmpty(){  return parseMap.isEmpty();}  }
class C{  private PeerSession spawnSession(int uid,int ownKeyGroup,int theirKeyGroup,PrivateKey ownIdentity,PublicKey theirIdentity,PrivateKey ownPreKey,PublicKey theirPreKey){  byte[] masterSecret=RatchetMasterSecret.calculateMasterSecret(new RatchetPrivateKey(ownIdentity.getKey()),new RatchetPrivateKey(ownPreKey.getKey()),new RatchetPublicKey(theirIdentity.getPublicKey()),new RatchetPublicKey(theirPreKey.getPublicKey()));  PeerSession peerSession=new PeerSession(RandomUtils.nextRid(),uid,ownKeyGroup,theirKeyGroup,ownPreKey.getKeyId(),theirPreKey.getKeyId(),masterSecret);  PeerSessionsStorage sessionsStorage=peerSessions.getValue(uid);  if (sessionsStorage == null) {    sessionsStorage=new PeerSessionsStorage(uid,new ArrayList<PeerSession>());  }  sessionsStorage=sessionsStorage.addSession(peerSession);  peerSessions.addOrUpdateItem(sessionsStorage);  return peerSession;}  }
class C{  public void registerCodeNodeContextMenuExtension(final ICodeNodeExtension extension){  Preconditions.checkNotNull(extension,"IE01621: Extension argument can not be null");  m_codeNodeExtensions.add(extension);}  }
class C{  public static void write(OMBitmap bitmap,Link link,LinkProperties props) throws IOException {switch (bitmap.getRenderType()) {case OMBitmap.RENDERTYPE_LATLON:    LinkBitmap.write((float)bitmap.getLat(),(float)bitmap.getLon(),bitmap.getWidth(),bitmap.getHeight(),bitmap.getBits(),props,link.dos);  break;case OMBitmap.RENDERTYPE_XY:LinkBitmap.write(bitmap.getX(),bitmap.getY(),bitmap.getWidth(),bitmap.getHeight(),bitmap.getBits(),props,link.dos);break;case OMBitmap.RENDERTYPE_OFFSET:LinkBitmap.write((float)bitmap.getLat(),(float)bitmap.getLon(),bitmap.getX(),bitmap.getY(),bitmap.getBits(),props,link.dos);break;default :Debug.error("LinkBitmap.write: bitmap rendertype not handled.");}}  }
class C{  static void replaceBlockInPhis(BasicBlock target,BasicBlock B1,BasicBlock B2){  for (Enumeration<Instruction> e=target.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (s.operator() != PHI)     return;    int numPairs=Phi.getNumberOfPreds(s);    for (int src=0; src < numPairs; src++) {      BasicBlockOperand bbop=Phi.getPred(s,src);      if (bbop.block == B1) {        Phi.setPred(s,src,new BasicBlockOperand(B2));      }    }  }}  }
class C{  public static void rewriteURI(Node node,String uri){  node.getProperties().add(new Property(APM_ORIGINAL_URI,node.getUri()));  node.setUri(uri);}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=batchDAO.totalRecordCount();    List<com.wipro.ats.bdre.md.dao.jpa.Batch> jpaBatchList=batchDAO.list(startPage,pageSize);    List<Batch> batches=new ArrayList<Batch>();    for (    com.wipro.ats.bdre.md.dao.jpa.Batch batch : jpaBatchList) {      Batch returnBatch=new Batch();      returnBatch.setBatchId(batch.getBatchId());      if (batch.getInstanceExec() != null) {        returnBatch.setSourceInstanceExecId(batch.getInstanceExec().getInstanceExecId());      }      returnBatch.setBatchType(batch.getBatchType());      returnBatch.setCounter(counter);      batches.add(returnBatch);    }    restWrapper=new RestWrapper(batches,RestWrapper.OK);    LOGGER.info("All records listed from Batch by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  protected static void saveSessionData(HttpServletRequest request,UseCaseConf useCaseConf,boolean isSuperuser,ISicresGenPerms genPerms){  saveSessionData(request,useCaseConf);  HttpSession session=request.getSession(true);  session.setAttribute(ServerKeys.GENPERMS_USER,genPerms);  session.setAttribute("isSuperuser",isSuperuser);  session.setAttribute(ServerKeys.IS_SICRES3,DefinicionLibroSicres3Utils.isSicres3Enabled());}  }
class C{  public TcpMatcher(final NetworkConfig config){  super(config);}  }
class C{  private static final void parseCmdLine(String[] args){  int i=0;  String arg;  while (i < args.length && args[i].startsWith("-")) {    arg=args[i++];    if (arg.equals("-l")) {      if (i < args.length) {        levels=Integer.parseInt(args[i++]);      } else       throw new RuntimeException("-l requires the number of levels");    } else     if (arg.equals("-p")) {      printResult=true;    } else     if (arg.equals("-m")) {      printMsgs=true;    } else     if (arg.equals("-h")) {      usage();    }  }  if (levels == 0)   usage();}  }
class C{  public void evaluatePriceModels(){  for (int i=0; i < subscriptionInput.getHistories().size(); i++) {    SubscriptionHistory subHistory=subscriptionInput.getHistories().get(i);    boolean isOldestSubHistory=(i == 0);    boolean isYoungestSubHistory=(i == subscriptionInput.getHistories().size() - 1);    long priceModelKey=bdr.loadPriceModelKeyForSubscriptionHistory(subHistory);    PriceModelHistory pmHistory=bdr.loadOldestPriceModelHistory(priceModelKey,billingInput.getBillingPeriodEnd());    long adjustedBPStart=adjustBillingPeriodStart(pmHistory);    long adjustedBPEnd=adjustBillingPeriodEnd(pmHistory);    long priceModelStartTime;    long priceModelEndTime;    if (isOldestSubHistory && isYoungestSubHistory) {      if (subHistory.getStatus().isActiveOrPendingUpd()) {        priceModelStartTime=Math.max(subHistory.getModdate().getTime(),adjustedBPStart);        priceModelEndTime=billingInput.getBillingPeriodEnd();        addPriceModelInput(priceModelKey,priceModelStartTime,priceModelEndTime,pmHistory,true,true,subscriptionInput.isResumedSubscription(),adjustedBPEnd,subHistory);      }      break;    }    if (isOldestSubHistory) {      if (subHistory.getStatus().isActiveOrPendingUpd()) {        priceModelStartTime=Math.max(subHistory.getModdate().getTime(),adjustedBPStart);        priceModelEndTime=billingInput.getBillingPeriodEnd();        addPriceModelInput(priceModelKey,priceModelStartTime,priceModelEndTime,pmHistory,true,false,false,adjustedBPEnd,subHistory);      } else {        i++;        SubscriptionHistory previousSubHistory=subscriptionInput.getHistories().get(i);        boolean previousSubHistoryIsYoungest=(i == subscriptionInput.getHistories().size() - 1);        long previousPriceModelKey=bdr.loadPriceModelKeyForSubscriptionHistory(previousSubHistory);        PriceModelHistory previousPmHistory=bdr.loadOldestPriceModelHistory(previousPriceModelKey,billingInput.getBillingPeriodEnd());        adjustedBPStart=adjustBillingPeriodStart(previousPmHistory);        long deactTime=subHistory.getModdate().getTime();        if (deactTime >= adjustedBPStart) {          priceModelStartTime=Math.max(previousSubHistory.getModdate().getTime(),adjustedBPStart);          priceModelEndTime=deactTime;          addPriceModelInput(previousPriceModelKey,priceModelStartTime,priceModelEndTime,previousPmHistory,true,previousSubHistoryIsYoungest,subscriptionInput.isResumedSubscription() && previousSubHistoryIsYoungest,adjustedBPEnd,previousSubHistory);        }      }    } else {      SubscriptionHistory subsequentSubHistory=subscriptionInput.getHistories().get(i - 1);      long subsequentModTime=subsequentSubHistory.getModdate().getTime();      if (subsequentModTime >= adjustedBPStart) {        priceModelStartTime=Math.max(subHistory.getModdate().getTime(),adjustedBPStart);        priceModelEndTime=subsequentModTime;        addPriceModelInput(priceModelKey,priceModelStartTime,priceModelEndTime,pmHistory,false,isYoungestSubHistory,subscriptionInput.isResumedSubscription() && isYoungestSubHistory,adjustedBPEnd,subHistory);      }    }  }}  }
class C{  @Override public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {  try {    return new WbXmlStreamReader(in,(WbXmlDefinition)props.get(DEFINITION_PROPERTY));  } catch (  IOException e) {    throw new XMLStreamException(e);  }}  }
class C{  public SingleNddCeddImageSearcher(IndexReader reader){  init(reader);}  }
class C{  public Period(ICalDate startDate,ICalDate endDate){  this.startDate=startDate;  this.endDate=endDate;  duration=null;}  }
class C{  public void detectAndSendChanges(){  super.detectAndSendChanges();  for (int i=0; i < this.crafters.size(); ++i) {    ICrafting icrafting=(ICrafting)this.crafters.get(i);    icrafting.sendProgressBarUpdate(this,1,this.entity.tank.getFluidAmount());    icrafting.sendProgressBarUpdate(this,2,this.entity.heat);    icrafting.sendProgressBarUpdate(this,3,this.entity.fueltime);    icrafting.sendProgressBarUpdate(this,4,this.entity.tank.getFluidAmount() >> 16);    icrafting.sendProgressBarUpdate(this,5,this.entity.heat >> 16);    icrafting.sendProgressBarUpdate(this,6,this.entity.fueltime >> 16);    icrafting.sendProgressBarUpdate(this,7,this.entity.S);    icrafting.sendProgressBarUpdate(this,8,this.entity.S >> 16);    icrafting.sendProgressBarUpdate(this,9,this.entity.H);    icrafting.sendProgressBarUpdate(this,10,this.entity.H >> 16);    icrafting.sendProgressBarUpdate(this,11,this.entity.off);    icrafting.sendProgressBarUpdate(this,12,this.entity.off >> 16);    icrafting.sendProgressBarUpdate(this,13,this.entity.fueltype);    icrafting.sendProgressBarUpdate(this,14,this.entity.fueltype >> 16);    icrafting.sendProgressBarUpdate(this,15,this.entity.SReal);    icrafting.sendProgressBarUpdate(this,16,this.entity.SReal >> 16);    icrafting.sendProgressBarUpdate(this,17,this.entity.HReal);    icrafting.sendProgressBarUpdate(this,18,this.entity.HReal >> 16);    icrafting.sendProgressBarUpdate(this,19,this.entity.FReal);    icrafting.sendProgressBarUpdate(this,20,this.entity.FReal >> 16);    icrafting.sendProgressBarUpdate(this,21,this.entity.complete);    icrafting.sendProgressBarUpdate(this,22,this.entity.complete >> 16);    icrafting.sendProgressBarUpdate(this,23,this.entity.lx);    icrafting.sendProgressBarUpdate(this,24,this.entity.lx >> 16);    icrafting.sendProgressBarUpdate(this,25,this.entity.ly);    icrafting.sendProgressBarUpdate(this,26,this.entity.ly >> 16);    icrafting.sendProgressBarUpdate(this,27,this.entity.lz);    icrafting.sendProgressBarUpdate(this,28,this.entity.lz >> 16);    icrafting.sendProgressBarUpdate(this,29,this.entity.efficiency);    icrafting.sendProgressBarUpdate(this,30,this.entity.efficiency >> 16);    icrafting.sendProgressBarUpdate(this,31,this.entity.numberOfCells);    icrafting.sendProgressBarUpdate(this,32,this.entity.numberOfCells >> 16);    icrafting.sendProgressBarUpdate(this,33,this.entity.HCooling);    icrafting.sendProgressBarUpdate(this,34,this.entity.HCooling >> 16);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Crosshair)) {    return false;  }  Crosshair that=(Crosshair)obj;  if (this.visible != that.visible) {    return false;  }  if (this.value != that.value) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (!this.stroke.equals(that.stroke)) {    return false;  }  if (this.labelVisible != that.labelVisible) {    return false;  }  if (!this.labelGenerator.equals(that.labelGenerator)) {    return false;  }  if (!this.labelAnchor.equals(that.labelAnchor)) {    return false;  }  if (this.labelXOffset != that.labelXOffset) {    return false;  }  if (this.labelYOffset != that.labelYOffset) {    return false;  }  if (!this.labelFont.equals(that.labelFont)) {    return false;  }  if (!PaintUtilities.equal(this.labelPaint,that.labelPaint)) {    return false;  }  if (!PaintUtilities.equal(this.labelBackgroundPaint,that.labelBackgroundPaint)) {    return false;  }  if (this.labelOutlineVisible != that.labelOutlineVisible) {    return false;  }  if (!PaintUtilities.equal(this.labelOutlinePaint,that.labelOutlinePaint)) {    return false;  }  if (!this.labelOutlineStroke.equals(that.labelOutlineStroke)) {    return false;  }  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.ENRICHER;}  }
class C{  protected final void endOfInput() throws IOException {  if (cacheRequest != null) {    cacheBody.close();  }  httpEngine.release(false);}  }
class C{  public void solveByTrivialPivotSearch(){  solve(TRIVAL_PIVOT_SEARCH);}  }
class C{  protected boolean execute(String actionAsString,JSONArray args,CallbackContext cbc) throws Exception {  Action action;  try {    action=Action.valueOf(actionAsString);  } catch (  IllegalArgumentException e) {    Log.e(LOG_TAG,"unexpected error",e);    throw (e);  }  try {    return executeAndPossiblyThrow(action,args,cbc);  } catch (  JSONException e) {    Log.e(LOG_TAG,"unexpected error",e);    throw (e);  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SBSC_USE_STRINGBUFFER_CONCATENATION") public void infoButtonActionPerformed(){  String nodesstring="";  int tempnumnodes=_memo.getTrafficController().getNumNodes();  for (int i=0; i < tempnumnodes; i++) {    AcelaNode tempnode;    tempnode=(AcelaNode)_memo.getTrafficController().getNodeFromAddress(i);    nodesstring=nodesstring + " " + tempnode.getNodeTypeString();  }  thenodesStaticC.setText(nodesstring);  nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(AcelaNode)_memo.getTrafficController().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeAddrStatic.setText(Integer.toString(nodeAddress));  nodeAddrBox.setVisible(true);  nodeAddrField.setVisible(false);  nodeAddrStatic.setVisible(false);  nodeType=curNode.getNodeType();  nodeTypeBox.setSelectedIndex(nodeType);  nodeTypeBox.setVisible(false);  nodeTypeStatic.setText(AcelaNode.getModuleNames()[nodeType]);  nodeTypeStatic.setVisible(true);  int numoutputbits=curNode.getNumOutputBitsPerCard();  if (numoutputbits > 0) {    for (int o=0; o < numoutputbits; o++) {      if (curNode.getOutputInit(o) == 0) {        initialState[o]=rb.getString("InitialStateOff");      } else {        initialState[o]=rb.getString("InitialStateOn");      }      if (curNode.getOutputWired(o) == 0) {        outputWired[o]=rb.getString("OutputWiredNO");      } else {        outputWired[o]=rb.getString("OutputWiredNC");      }      if (curNode.getOutputType(o) == 0) {        outputType[o]=rb.getString("OutputTypeONOFF");      } else {        if (curNode.getOutputType(o) == 1) {          outputType[o]=rb.getString("OutputTypePULSE");        } else {          outputType[o]=rb.getString("OutputTypeBLINK");        }      }      outputLength[o]=String.valueOf(curNode.getOutputLength(o));    }  }  int numsensorbits=curNode.getNumSensorBitsPerCard();  if (numsensorbits > 0) {    for (int i=0; i < numsensorbits; i++) {      if (curNode.getSensorType(i) == 0) {        filterType[i]=rb.getString("FilterTypeNoise");      } else       if (curNode.getSensorType(i) == 1) {        filterType[i]=rb.getString("FilterTypeDebounce");      } else       if (curNode.getSensorType(i) == 2) {        filterType[i]=rb.getString("FilterTypeCarGap");      } else {        filterType[i]=rb.getString("FilterTypeDirtyTrack");      }      if (curNode.getSensorPolarity(i) == 0) {        filterPolarity[i]=rb.getString("FilterNormalPolarity");      } else {        filterPolarity[i]=rb.getString("FilterInversePolarity");      }      filterThreshold[i]=String.valueOf(curNode.getSensorThreshold(i));    }  }  editMode=false;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  statusText1.setText(infoStatus1);  statusText2.setText(infoStatus2);  statusText3.setText(infoStatus3);  d8outputConfigModel.setEditMode(false);  swoutputConfigModel.setEditMode(false);  ymoutputConfigModel.setEditMode(false);  TBoutputConfigModel.setEditMode(false);  TBsensorConfigModel.setEditMode(false);  smoutputConfigModel.setEditMode(false);  wmsensorConfigModel.setEditMode(false);  sysensorConfigModel.setEditMode(false);  contentPane.repaint();}  }
class C{  public void testRecognizeFullCone() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.FULL_CONE_NAT);  expectedReturn.setPublicAddress(mappedClientAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  public int intValue(){  return value;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.433 -0500",hash_original_method="BB597B75ED281325D8B4388243F4CDF9",hash_generated_method="65023D74BB9B48940908617630FCB864") public int compareTo(Byte object){  return compare(value,object.value);}  }
class C{  protected void rollup() throws IOException {  for (  Map.Entry<String,DimConfig> ent : config.getDimConfigs().entrySet()) {    String dim=ent.getKey();    DimConfig ft=ent.getValue();    if (ft.hierarchical && ft.multiValued == false) {      int dimRootOrd=taxoReader.getOrdinal(new FacetLabel(dim));      assert dimRootOrd > 0;      values[dimRootOrd]+=rollup(children[dimRootOrd]);    }  }}  }
class C{  @Deprecated public static int exec(String command,@FloatRange(from=0) long timeout,@Nullable ExecuteStreamHandler streamHandler) throws IOException {  CommandLine cmdLine=CommandLine.parse(command);  DefaultExecutor executor=new DefaultExecutor();  executor.setExitValue(0);  ExecuteWatchdog watchdog=new ExecuteWatchdog(timeout);  executor.setWatchdog(watchdog);  if (streamHandler != null) {    executor.setStreamHandler(streamHandler);  }  return executor.execute(cmdLine);}  }
class C{  public void printSchema() throws FormatException {  System.out.println("File Name: " + filename + "\nTable name: "+ tablename+ "\nTable Description: "+ tableDescription+ "\nDocumentation File Name: "+ documentationFileName+ "\nRecord Length: "+ recordLength+ " Record Count: "+ getRecordCount());  for (int i=0; i < columnInfo.length; i++) {    System.out.println("Column " + i + " "+ columnInfo[i].toString());  }}  }
class C{  public BottomSheetMenuItem(Context context,int id,CharSequence title,Drawable icon){  this(context,0,id,0,0,title);  setIcon(icon);}  }
class C{  public String str(){  String str=m_DTMXRTreeFrag.getDTM().getStringValue(m_dtmRoot).toString();  return (null == str) ? "" : str;}  }
class C{  public void init(int shadowColor,int position){  mFadingShadow=new FadingShadow(shadowColor);  mPosition=position;  postInvalidateOnAnimation();}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return new PermissionsEnumerator(permsMap.values().iterator());  }}  }
class C{  public Object object(){  return m_obj;}  }
class C{  public static PointRDD SpatialRangeQuery(PointRDD pointRDD,Envelope envelope,Integer condition){  JavaRDD<Point> result=pointRDD.getRawPointRDD().filter(new PointRangeFilter(envelope,condition));  return new PointRDD(result);}  }
class C{  public void add(double value){  add(value,1.0);}  }
class C{  public void deleteInstances(int[] rowIndices){  int i;  Arrays.sort(rowIndices);  addUndoPoint();  m_IgnoreChanges=true;  for (i=rowIndices.length - 1; i >= 0; i--) {    deleteInstanceAt(rowIndices[i],false);  }  m_IgnoreChanges=false;  notifyListener(new TableModelEvent(this,rowIndices[0],rowIndices[rowIndices.length - 1],TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE));}  }
class C{  public synchronized boolean hasRelationship(Vertex type){  Collection<Relationship> relationships=getRelationships(type);  if (relationships == null) {    return false;  }  for (  Relationship relationship : relationships) {    if (!relationship.isInverse()) {      return true;    }  }  return false;}  }
class C{  public FloatMatrix(int len){  this(len,1,new float[len]);}  }
class C{  public static double[] toPrimitive(final Double[] array,final double valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_DOUBLE_ARRAY;  }  final double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    Double b=array[i];    result[i]=b == null ? valueForNull : b.doubleValue();  }  return result;}  }
class C{  public void onItemPinned(int position){  final DialogFragment dialog=ItemPinnedMessageDialogFragment.newInstance(position);  getSupportFragmentManager().beginTransaction().add(dialog,FRAGMENT_TAG_ITEM_PINNED_DIALOG).commit();}  }
class C{  public static void main(String... args){  SelfDestructor.startCountdown(60);  new TestKillRestartMulti().test(args);}  }
class C{  private static void reset(){  description=null;  argName="arg";  longopt=null;  type=null;  required=false;  numberOfArgs=Option.UNINITIALIZED;  optionalArg=false;  valuesep=(char)0;}  }
class C{  public final String toString(){  StringBuffer text=new StringBuffer();  text.append("@relation " + Utils.quote(m_RelationName) + "\n\n");  for (int i=0; i < numAttributes(); i++) {    text.append(attribute(i) + "\n");  }  text.append("\n@data\n");  for (int i=0; i < numInstances(); i++) {    text.append(instance(i));    if (i < numInstances() - 1) {      text.append('\n');    }  }  return text.toString();}  }
class C{  public IndependenceTest indTestSubset(List<Node> nodes){  if (nodes.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  for (  Node variable : nodes) {    if (!this.variables.contains(variable)) {      throw new IllegalArgumentException("All nodes must be original nodes");    }  }  int[] indices=new int[nodes.size()];  int j=-1;  for (int i=0; i < this.variables.size(); i++) {    if (!nodes.contains(this.variables.get(i))) {      continue;    }    indices[++j]=i;  }  DataSet newDataSet=dataSet.subsetColumns(indices);  double alpha=this.chiSquareTest.getAlpha();  return new IndTestChiSquare(newDataSet,alpha);}  }
class C{  private void add(VirtualFile file){  add(file,false);}  }
class C{  protected void assertTraceWith(final List<Object> actual,final List<String> expectedTrace){  assertEquals(expectedTrace.size(),actual.size());  for (int i=0; i < expectedTrace.size(); i++) {    final Object[] objs=(Object[])actual.get(i);    final TLCStateInfo stateInfo=(TLCStateInfo)objs[0];    final String info=(String)stateInfo.info;    if (i == 0) {      "<Initial predicate>".equals(info);    } else {      info.startsWith("<Action");    }    assertEquals(expectedTrace.get(i),stateInfo.toString().trim());    assertEquals(i + 1,objs[1]);  }}  }
class C{  public BatchAssociationRulesEvent(Object source,AssociationRules rules){  super(source);  m_rules=rules;}  }
class C{  void reallocate(long memPtr,int cap){  reallocatePooled(memPtr,cap);}  }
class C{  void closeSilently(ServerSocket socket){  try {    socket.close();  } catch (  Exception e) {  }}  }
class C{  void append(DNSIncoming that){  if (this.isQuery() && this.isTruncated() && that.isQuery()) {    this._questions.addAll(that.getQuestions());    this._answers.addAll(that.getAnswers());    this._authoritativeAnswers.addAll(that.getAuthorities());    this._additionals.addAll(that.getAdditionals());  } else {    throw new IllegalArgumentException();  }}  }
class C{  @Override public void updateAfterMisfire(org.quartz.Calendar cal){  int instr=getMisfireInstruction();  if (instr == Trigger.MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY)   return;  if (instr == MISFIRE_INSTRUCTION_SMART_POLICY) {    instr=MISFIRE_INSTRUCTION_FIRE_ONCE_NOW;  }  if (instr == MISFIRE_INSTRUCTION_DO_NOTHING) {    Date newFireTime=getFireTimeAfter(new Date());    while (newFireTime != null && cal != null && !cal.isTimeIncluded(newFireTime.getTime())) {      newFireTime=getFireTimeAfter(newFireTime);    }    setNextFireTime(newFireTime);  } else   if (instr == MISFIRE_INSTRUCTION_FIRE_ONCE_NOW) {    setNextFireTime(new Date());  }}  }
class C{  public UnsupportedQueryLanguageException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void testRWBits(){  final int bSize=32 << 1;  final int[] bits=new int[bSize];  final int nbits=bSize * 32;  for (int i=0; i < nbits; i++) {    final int b=RWStore.fndBit(bits,bSize);    assertTrue(b != -1);    assertFalse(RWStore.tstBit(bits,b));    RWStore.setBit(bits,b);    assertTrue(RWStore.tstBit(bits,b));  }  assertTrue(-1 == RWStore.fndBit(bits,bSize));  for (int i=0; i < 30 * 1024 * 1024; i++) {    final int b=r.nextInt(nbits);    assertTrue(RWStore.tstBit(bits,b));    RWStore.clrBit(bits,b);    assertFalse(RWStore.tstBit(bits,b));    assertTrue(b == RWStore.fndBit(bits,bSize));    RWStore.setBit(bits,b);    assertTrue(RWStore.tstBit(bits,b));  }  assertTrue(-1 == RWStore.fndBit(bits,bSize));}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord)   insert_Tree(MTree_Base.TREETYPE_Menu);  return success;}  }
class C{  @Override protected void onPreDrawChart(ArrayList<ChartSet> data){  if (data.get(0).size() == 1) {    style.barSpacing=0;    calculateBarsWidth(data.size(),0,this.getInnerChartRight() - this.getInnerChartLeft() - super.horController.borderSpacing * 2);  } else   calculateBarsWidth(data.size(),data.get(0).getEntry(0).getX(),data.get(0).getEntry(1).getX());  calculatePositionOffset(data.size());}  }
class C{  public UDAnimatorSet resume(){  final AnimatorSet animatorSet=getAnimatorSet();  if (animatorSet != null) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      if (animatorSet.isPaused()) {        animatorSet.resume();      }    }  }  if (mTarget != null) {    mTarget.resumeAnimation();  }  return this;}  }
class C{  private void printData(){  System.out.println("No of Employees '" + myEmpls.size() + "'.");  Iterator it=myEmpls.iterator();  while (it.hasNext()) {    System.out.println(it.next().toString());  }}  }
class C{  public int count(){  return SQLiteUtils.intQuery(toCountSql(),getArguments());}  }
class C{  void simplifyLoad(){  Iterator it=(new LinkedList(nodes)).iterator();  while (it.hasNext()) {    PurityNode p=(PurityNode)it.next();    Map<String,PurityNode> fmap=new HashMap<String,PurityNode>();    Iterator itt=(new LinkedList(edges.get(p))).iterator();    while (itt.hasNext()) {      PurityEdge e=(PurityEdge)itt.next();      PurityNode tgt=e.getTarget();      if (!e.isInside() && !tgt.equals(p)) {        String f=e.getField();        if (fmap.containsKey(f) && nodes.contains(fmap.get(f)))         mergeNodes(tgt,fmap.get(f)); else         fmap.put(f,tgt);      }    }  }  if (doCheck)   sanityCheck();}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  private void traversePreOrder(Tree tree){  traversePreOrder(tree,tree.getRoot(),null);}  }
class C{  public void testShuffleWorks() throws IOException {  Path dir=wrap(createTempDir());  Files.createFile(dir.resolve("file1"));  Files.createFile(dir.resolve("file2"));  Files.createFile(dir.resolve("file3"));  List<Path> seen=new ArrayList<>();  try (DirectoryStream<Path> stream=Files.newDirectoryStream(dir)){    for (    Path path : stream) {      seen.add(path);    }  }   assertEquals(3,seen.size());  assertTrue(seen.contains(dir.resolve("file1")));  assertTrue(seen.contains(dir.resolve("file2")));  assertTrue(seen.contains(dir.resolve("file3")));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.CONSTRAINT_RULE__CONSTRAINTS:    return constraints != null && !constraints.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public ClassFile(String nfn){  fn=nfn;}  }
class C{  public CMemoryViewerSynchronizer(final JHexView hexView,final CMemoryProvider provider,final CDebugPerspectiveModel debugPerspectiveModel){  Preconditions.checkNotNull(hexView,"IE01406: Hex view argument can not be null");  Preconditions.checkNotNull(provider,"IE01407: Provider argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01408: Debug perspective model argument can not be null");  m_hexView=hexView;  m_provider=provider;  m_debugPerspectiveModel=debugPerspectiveModel;  debugPerspectiveModel.addListener(m_debugListener);  synchronizeDebugger(null,m_debugPerspectiveModel.getCurrentSelectedDebugger());  m_hexView.addHexListener(m_hexListener);}  }
class C{  public void nodeToBeRemoved(Node removedNode){  if (iterators != null) {    Iterator it=iterators.iterator();    while (it.hasNext()) {      ((DOMNodeIterator)it.next()).nodeToBeRemoved(removedNode);    }  }}  }
class C{  public AttributeCertificateIssuer(AttCertIssuer issuer){  form=issuer.getIssuer();}  }
class C{  public void javacWarning(String message,Throwable t){  messager.printMessage(Diagnostic.Kind.WARNING,message + (t == null ? "" : (": " + t)));}  }
class C{  public String parse(String inputTemplate,String outputFile,String objectID,Object object) throws Exception {  return parse(inputTemplate,null,outputFile,null,objectID,object);}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (!(other instanceof InternalRole))   return false;  final InternalRole that=(InternalRole)other;  if (!StringUtils.equals(this.name,that.name))   return false;  return true;}  }
class C{  public void flushCache(){  rawCache.flush();  imgCache.flush();}  }
class C{  public int hashCode(){  return getStringRep().hashCode();}  }
class C{  public Tomcat5x6xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(TomcatPropertySet.HTTP_SECURE,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.USE_HTTP_ONLY,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONNECTOR_EMPTY_SESSION_PATH,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONNECTOR_KEY_STORE_FILE,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONNECTOR_KEY_STORE_TYPE,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONNECTOR_KEY_STORE_PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONNECTOR_KEY_ALIAS,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONNECTOR_TRUST_STORE_FILE,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONNECTOR_TRUST_STORE_TYPE,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONNECTOR_TRUST_STORE_PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONNECTOR_CLIENT_AUTH,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONNECTOR_SSL_PROTOCOL,Boolean.TRUE);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ContentNode.class) {switch (baseFeatureID) {case DomPackage.CONTENT_NODE__OWNER:      return DomPackage.COMPOSED_CONTENT__OWNER;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  protected int createHashCode(){  int result=uri.hashCode() ^ prefix.hashCode();  if (result == 0) {    result=0xbabe;  }  return result;}  }
class C{  protected Text doCreateFilterText(Composite parent){  if (useNativeSearchField(parent)) {    return new Text(parent,SWT.SINGLE | SWT.BORDER | SWT.SEARCH| SWT.ICON_CANCEL);  }  return new Text(parent,SWT.SINGLE);}  }
class C{  public void destroy(){  if (asyncPingTask != null && !asyncPingTask.isCancelled()) {    asyncPingTask.cancel(true);  }}  }
class C{  public OMScalingIcon(){  super();}  }
class C{  public static long toLong(short[] shorts){  return toLong(shorts[0],shorts[1],shorts[2],shorts[3]);}  }
class C{  private void sendClientList(Client client){  ArrayList<Client> clientList=new ArrayList();  for (  Entry<String,Client> clientEntry : clientMap.entrySet()) {    Client currentClient=clientEntry.getValue();    if (currentClient.registrationToken != client.registrationToken) {      clientList.add(currentClient);    }  }  JsonElement clientElements=gson.toJsonTree(clientList,new TypeToken<Collection<Client>>(){  }.getType());  if (clientElements.isJsonArray()) {    JsonObject jSendClientList=new JsonObject();    JsonObject jData=new JsonObject();    jData.addProperty(ACTION_KEY,SEND_CLIENT_LIST);    jData.add(CLIENTS_KEY,clientElements);    jSendClientList.add(DATA_KEY,jData);    friendlyGcmServer.send(client.registrationToken,jSendClientList);  }}  }
class C{  @Override public PairedStats calculateStatistics(Instance datasetSpecifier,int resultset1Index,int resultset2Index,int comparisonColumn) throws Exception {  if (m_Instances.attribute(comparisonColumn).type() != Attribute.NUMERIC) {    throw new Exception("Comparison column " + (comparisonColumn + 1) + " ("+ m_Instances.attribute(comparisonColumn).name()+ ") is not numeric");  }  if (!m_ResultsetsValid) {    prepareData();  }  Resultset resultset1=(Resultset)m_Resultsets.get(resultset1Index);  Resultset resultset2=(Resultset)m_Resultsets.get(resultset2Index);  ArrayList<Instance> dataset1=resultset1.dataset(datasetSpecifier);  ArrayList<Instance> dataset2=resultset2.dataset(datasetSpecifier);  String datasetName=templateString(datasetSpecifier);  if (dataset1 == null) {    throw new Exception("No results for dataset=" + datasetName + " for resultset="+ resultset1.templateString());  } else   if (dataset2 == null) {    throw new Exception("No results for dataset=" + datasetName + " for resultset="+ resultset2.templateString());  } else   if (dataset1.size() != dataset2.size()) {    throw new Exception("Results for dataset=" + datasetName + " differ in size for resultset="+ resultset1.templateString()+ " and resultset="+ resultset2.templateString());  }  double testTrainRatio=0.0;  int trainSizeIndex=-1;  int testSizeIndex=-1;  for (int i=0; i < m_Instances.numAttributes(); i++) {    if (m_Instances.attribute(i).name().toLowerCase().equals("number_of_training_instances")) {      trainSizeIndex=i;    } else     if (m_Instances.attribute(i).name().toLowerCase().equals("number_of_testing_instances")) {      testSizeIndex=i;    }  }  if (trainSizeIndex >= 0 && testSizeIndex >= 0) {    double totalTrainSize=0.0;    double totalTestSize=0.0;    for (int k=0; k < dataset1.size(); k++) {      Instance current=dataset1.get(k);      totalTrainSize+=current.value(trainSizeIndex);      totalTestSize+=current.value(testSizeIndex);    }    testTrainRatio=totalTestSize / totalTrainSize;  }  PairedStats pairedStats=new PairedStatsCorrected(m_SignificanceLevel,testTrainRatio);  for (int k=0; k < dataset1.size(); k++) {    Instance current1=dataset1.get(k);    Instance current2=dataset2.get(k);    if (current1.isMissing(comparisonColumn)) {      System.err.println("Instance has missing value in comparison " + "column!\n" + current1);      continue;    }    if (current2.isMissing(comparisonColumn)) {      System.err.println("Instance has missing value in comparison " + "column!\n" + current2);      continue;    }    if (current1.value(m_RunColumn) != current2.value(m_RunColumn)) {      System.err.println("Run numbers do not match!\n" + current1 + current2);    }    if (m_FoldColumn != -1) {      if (current1.value(m_FoldColumn) != current2.value(m_FoldColumn)) {        System.err.println("Fold numbers do not match!\n" + current1 + current2);      }    }    double value1=current1.value(comparisonColumn);    double value2=current2.value(comparisonColumn);    pairedStats.add(value1,value2);  }  pairedStats.calculateDerived();  return pairedStats;}  }
class C{  void refresh() throws IOException {  assert locked();  Set<String> toDelete=new HashSet<>();  String[] files=directory.listAll();  Matcher m=IndexFileNames.CODEC_FILE_PATTERN.matcher("");  for (int i=0; i < files.length; i++) {    String fileName=files[i];    m.reset(fileName);    if (!fileName.endsWith("write.lock") && !refCounts.containsKey(fileName) && (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {      if (infoStream.isEnabled("IFD")) {        infoStream.message("IFD","refresh: removing newly created unreferenced file \"" + fileName + "\"");      }      toDelete.add(fileName);    }  }  deleteFiles(toDelete);}  }
class C{  public void removeLayer(Layer layer){  if (layer != null && layer.isRemovable()) {    List<Layer> currentLayers=getLayerList();    currentLayers.remove(layer);    setLayerList(currentLayers);  } else {    if (layer != null) {      logger.warning("received command to remove " + layer.getName() + ", which has been designated as *NOT* removeable");      throw new com.bbn.openmap.util.HandleError("LayerHandler commanded to delete a layer (" + layer.getName() + ") that is not removeable");    }  }}  }
class C{  PorterDuffColorFilter updateTintFilter(PorterDuffColorFilter tintFilter,ColorStateList tint,PorterDuff.Mode tintMode){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(getState(),Color.TRANSPARENT);  tintFilter=new PorterDuffColorFilter(color,tintMode);  return tintFilter;}  }
class C{  public boolean runInThread(Runnable runnable){  if (runnable == null) {    return false;  }synchronized (nextRunnableLock) {    handoffPending=true;    while ((availWorkers.size() < 1) && !isShutdown) {      try {        nextRunnableLock.wait(500);      } catch (      InterruptedException ignore) {      }    }    if (!isShutdown) {      WorkerThread wt=(WorkerThread)availWorkers.removeFirst();      busyWorkers.add(wt);      wt.run(runnable);    } else {      WorkerThread wt=new WorkerThread(this,threadGroup,"WorkerThread-LastJob",prio,isMakeThreadsDaemons(),runnable);      busyWorkers.add(wt);      workers.add(wt);      wt.start();    }    nextRunnableLock.notifyAll();    handoffPending=false;  }  return true;}  }
class C{  public Name add(int posn,String comp) throws InvalidNameException {  impl.add(posn,comp);  return this;}  }
class C{  public Instrumenter attachElapsedTimeCollector(){  includeElapsedTime=true;  return this;}  }
class C{  public SRaster(short x1,short y1,short width,short height,short x_hot,short y_hot){  super(GraphicType.GT_Raster,RenderType.RT_XY,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint(x1,y1);  ll1_=new LLPoint(0f,0f);  width_=width;  height_=height;  x_hot_=x_hot;  y_hot_=y_hot;  pixels_=new byte[height * width];  colorsTotal_=0;  transparent_=0;  ct_=new CTEntry[0];}  }
class C{  private void clearMembers(final BaseType deletedType,final Set<BaseType> affectedTypes){  notifyMembersDeleted(typesContainer.clearMembers(deletedType,affectedTypes));}  }
class C{  public String displayText(){  StringBuffer text=new StringBuffer(String.format("filename = %s\n" + "sentence number = %s\n" + "terminal = %s\n"+ "base form = %s\n"+ "frame set = %s\n"+ "tagger = %s\n"+ "inflection value = %s\n",this.getFilename(),this.getSentenceNumber(),this.getTerminal(),this.getBaseForm(),this.getFrameSet(),this.getTaggerName(),this.getInflectionValue()));  for (  Proplabel label : getPropLabels()) {    text.append(String.format("proplabel = %s %s\n" + "text = %s\n",label.getLabel(),label.getFeature(),label.getRelation()));  }  return text.toString();}  }
class C{  private static Throwable error(final Throwable exp,final Request req,final long msec) throws IOException {  final String time;  if (msec < TimeUnit.SECONDS.toMillis(1L)) {    time=String.format("%dms",msec);  } else {    time=String.format("%ds",msec / TimeUnit.SECONDS.toMillis(1L));  }  return new IllegalStateException(String.format("[%s %s] failed in %s: %s",new RqMethod.Base(req).method(),new RqHref.Base(req).href(),time,exp.getLocalizedMessage()),exp);}  }
class C{  public static double[] nullToEmpty(double[] array){  if (array == null || array.length == 0) {    return EMPTY_DOUBLE_ARRAY;  }  return array;}  }
class C{  public int groupCount(){  return groupCount;}  }
class C{  public CannotCompileException(NotFoundException e){  this("cannot find " + e.getMessage(),e);}  }
class C{  public static Boolean isUsingTor(String localIP,int localPort,String exitIP,String DNSELServer){  String reversedMyIP=reverseIP(localIP);  String reversedExitIP=reverseIP(exitIP);  Process proc;  try {    proc=Runtime.getRuntime().exec("dig " + reversedExitIP + "."+ localPort+ "."+ reversedMyIP+ ".ip-port.exitlist."+ DNSELServer);  } catch (  IOException e) {    return null;  }  try {    proc.waitFor();    BufferedReader reader=new BufferedReader(new InputStreamReader(proc.getInputStream()));    boolean retval=false;    while (reader.ready()) {      String line=reader.readLine();      if (line.equals(";; ANSWER SECTION:") && reader.ready()) {        line=reader.readLine();        Pattern p=Pattern.compile("^" + reversedExitIP + "."+ localPort+ "."+ reversedMyIP+ ".ip-port.exitlist."+ DNSELServer+ ". \\d+\\s+IN\\s+A\\s+127.0.0.2$");        if (p.matcher(line).matches()) {          retval=true;          break;        }      }    }    reader.close();    return retval;  } catch (  Exception e) {    return null;  } finally {    proc.destroy();  }}  }
class C{  public NetworkTextObject(Network parent,double x,double y,String initialText){  this(parent,x,y);  this.setText(initialText);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.STATECHART__LOCAL_REACTIONS:    return !getLocalReactions().isEmpty();case SGraphPackage.STATECHART__SCOPES:  return scopes != null && !scopes.isEmpty();case SGraphPackage.STATECHART__NAMESPACE:return NAMESPACE_EDEFAULT == null ? namespace != null : !NAMESPACE_EDEFAULT.equals(namespace);case SGraphPackage.STATECHART__REGIONS:return regions != null && !regions.isEmpty();case SGraphPackage.STATECHART__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case SGraphPackage.STATECHART__DOCUMENTATION:return DOCUMENTATION_EDEFAULT == null ? documentation != null : !DOCUMENTATION_EDEFAULT.equals(documentation);case SGraphPackage.STATECHART__DOMAIN_ID:return DOMAIN_ID_EDEFAULT == null ? domainID != null : !DOMAIN_ID_EDEFAULT.equals(domainID);}return super.eIsSet(featureID);}  }
class C{  private void resizeColumnWidth(){  final TableColumnModel columnModel=table.getColumnModel();  for (int column=0; column < table.getColumnCount(); column++) {    int width=2;    for (int row=0; row < table.getRowCount(); row++) {      TableCellRenderer renderer=table.getCellRenderer(row,column);      Component comp=table.prepareRenderer(renderer,row,column);      width=Math.max(comp.getPreferredSize().width,width);    }    width+=COLUMN_MARGIN_PX;    columnModel.getColumn(column).setPreferredWidth(width);    columnModel.getColumn(column).setMaxWidth(width);    if (column <= 2) {      columnModel.getColumn(column).setMinWidth(width);    }  }}  }
class C{  public Money subtract(Money money){  assertDefined();  if (null == m_value) {    return (money);  }  BigDecimal value=m_value.subtract(money.getBigDecimalValue());  return new Money(value);}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  public static Polygon2D create(Polygon... polygons){  Polygon2D components[]=new Polygon2D[polygons.length];  for (int i=0; i < components.length; i++) {    Polygon gon=polygons[i];    Polygon gonHoles[]=gon.getHoles();    Polygon2D holes=null;    if (gonHoles.length > 0) {      holes=create(gonHoles);    }    components[i]=new Polygon2D(gon,holes);  }  return createTree(components,0,components.length - 1,false);}  }
class C{  private void writeSettings(){  BufferedOutputStream out=null;  try {    out=new BufferedOutputStream(new FileOutputStream(SETTINGS_FILE_NAME));    loadedSettings.store(out,null);  } catch (  FileNotFoundException e) {    Emulator.log.error("Settings file not found:",e);  }catch (  IOException e) {    Emulator.log.error("Problem saving settings:",e);  } finally {    Utilities.close(out);  }}  }
class C{  public ServiceOperationException(Reason reason){  super("Service operation failed");  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public void copyChars(CharSequence text,int off,int len){  grow(len * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR);  ref.length=UnicodeUtil.UTF16toUTF8(text,off,len,ref.bytes);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void createLocation(List recordList,QuadTree<Location> qt){  String name=tokenToString(recordList,nameIndex,"");  double lat=tokenToDouble(recordList,latIndex,0.0);  double lon=tokenToDouble(recordList,lonIndex,0.0,eastIsNeg);  String iconURL=tokenToString(recordList,iconIndex,defaultIconURL);  double lat2=tokenToDouble(recordList,lat2Index,0.0);  double lon2=tokenToDouble(recordList,lon2Index,0.0,eastIsNeg);  Link link=new Link(lat,lon,lat2,lon2,"No details");  getLocationDrawingAttributes().setTo(link);  link.setLocationHandler(CSVLinkHandler.this);  if (logger.isLoggable(Level.FINE)) {    logger.fine("CSVLinkHandler: " + link.getDetails());  }  qt.put(lat,lon,link);  qt.put(lat2,lon2,link);  qt.put(lat,lon,createLocation(lat,lon,name,iconURL,recordList));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:53.476 -0500",hash_original_method="4B12F08D986FED39E34C8D26B1B878DE",hash_generated_method="3D502F2D233A6F112E67770D12130E4A") public X500Principal(String name){  if (name == null) {    throw new NullPointerException("Name cannot be null");  }  try {    dn=new Name(name);  } catch (  IOException e) {    throw incorrectInputName(e,name);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return pluggy == null ? "" : pluggy.getResPath();}  }
class C{  private long computeFreshnessLifetime(){  if (maxAgeSeconds != -1) {    return TimeUnit.SECONDS.toMillis(maxAgeSeconds);  } else   if (expires != null) {    long servedMillis=servedDate != null ? servedDate.getTime() : receivedResponseMillis;    long delta=expires.getTime() - servedMillis;    return delta > 0 ? delta : 0;  } else   if (lastModified != null && uri.getRawQuery() == null) {    long servedMillis=servedDate != null ? servedDate.getTime() : sentRequestMillis;    long delta=servedMillis - lastModified.getTime();    return delta > 0 ? (delta / 10) : 0;  }  return 0;}  }
class C{  public static void main(String[] args){  PRINT_LOG_MESSAGES=true;  float array[]={0,1,2,3,4,5,6,7};  FloatBuffer arrayBuffer=FloatBuffer.wrap(array);  FloatBuffer directBuffer=ByteBuffer.allocateDirect(array.length * Sizeof.FLOAT).order(ByteOrder.nativeOrder()).asFloatBuffer();  directBuffer.put(array);  directBuffer.rewind();  boolean passed=true;  log("\nCopy original buffer");  passed&=copyWithTo(arrayBuffer,4,new float[]{0,1,2,3});  passed&=copyWithToBuffer(arrayBuffer,4,new float[]{0,1,2,3});  passed&=copyWithTo(directBuffer,4,new float[]{0,1,2,3});  passed&=copyWithToBuffer(directBuffer,4,new float[]{0,1,2,3});  log("\nCopy buffer with position 2");  arrayBuffer.position(2);  directBuffer.position(2);  passed&=copyWithTo(arrayBuffer,4,new float[]{0,1,2,3});  passed&=copyWithToBuffer(arrayBuffer,4,new float[]{2,3,4,5});  passed&=copyWithTo(directBuffer,4,new float[]{0,1,2,3});  passed&=copyWithToBuffer(directBuffer,4,new float[]{2,3,4,5});  log("\nCopy slice with offset 2");  FloatBuffer arraySlice=arrayBuffer.slice();  FloatBuffer directSlice=directBuffer.slice();  passed&=copyWithTo(arraySlice,4,new float[]{0,1,2,3});  passed&=copyWithToBuffer(arraySlice,4,new float[]{2,3,4,5});  passed&=copyWithTo(directSlice,4,new float[]{2,3,4,5});  passed&=copyWithToBuffer(directSlice,4,new float[]{2,3,4,5});  log("\nCopy slice with offset 2 and position 2");  arraySlice.position(2);  directSlice.position(2);  passed&=copyWithTo(arraySlice,4,new float[]{0,1,2,3});  passed&=copyWithToBuffer(arraySlice,4,new float[]{4,5,6,7});  passed&=copyWithTo(directSlice,4,new float[]{2,3,4,5});  passed&=copyWithToBuffer(directSlice,4,new float[]{4,5,6,7});  if (passed) {    log("\nPASSED");  } else {    log("\nFAILED");  }}  }
class C{  public void run(){  Thread currentThread=Thread.currentThread();  boolean interrupted=false;synchronized (mainLock) {    try {      mainLock.notifyAll();      while (blockerThread == currentThread) {        mainLock.wait();        timeoutPassed=false;        while (isReadyToShutdown()) {          if (timeoutPassed) {            timeoutPassed=false;            blockerThread=null;            break;          }          timeoutPassed=true;          mainLock.wait(SAFETY_TIMEOUT);        }      }    } catch (    InterruptedException e) {      interrupted=true;    } finally {      if (blockerThread == currentThread) {        blockerThread=null;      }    }  }  if (!interrupted) {    AppContext.stopEventDispatchThreads();  }}  }
class C{  public N4JSResourceDescription(N4JSCrossReferenceComputer crossReferenceComputer,TypeHelper typeHelper,IQualifiedNameProvider qualifiedNameProvider,Resource resource,N4JSResourceDescriptionStrategy strategy,IResourceScopeCache cache){  super(resource,strategy,cache);  this.crossReferenceComputer=crossReferenceComputer;  this.qualifiedNameProvider=qualifiedNameProvider;  this.typeHelper=typeHelper;  this.strategy=strategy;}  }
class C{  private int find(int nums[],int i){  while (i != nums[i]) {    nums[i]=nums[nums[i]];    i=nums[i];  }  return i;}  }
class C{  public static void main(String[] args){  int MAX_R=21;  int NUM_TRIALS=20;  UniformGenerator ug=new UniformGenerator();  TrialSuite last=new TrialSuite();  TrialSuite random=new TrialSuite();  TrialSuite lastMT=new TrialSuite();  TrialSuite randomMT=new TrialSuite();  TrialSuite[] lastO=new TrialSuite[MAX_R];  TrialSuite[] randomO=new TrialSuite[MAX_R];  for (int r=0; r < MAX_R; r++) {    lastO[r]=new TrialSuite();    randomO[r]=new TrialSuite();  }  for (int size=65536; size <= 1048576; size*=2) {    System.out.println(size + "...");    for (int t=0; t < NUM_TRIALS; t++) {      IPoint[] pts=ug.generate(size / 2);      runTrialNormal(size,last,pts,new LastSelector());      runTrialNormal(size,random,pts,new RandomSelector());      runTrialParallel(size,lastMT,pts,new LastSelector());      runTrialParallel(size,randomMT,pts,new RandomSelector());      for (int r=0; r < MAX_R; r++) {        int ratio=r + 1;        if (r == MAX_R - 1) {          ratio=Integer.MAX_VALUE;        }        runTrialOneHelper(size,lastO[r],pts,new LastSelector(),ratio);        runTrialOneHelper(size,randomO[r],pts,new RandomSelector(),ratio);      }    }  }  System.out.println("LAST");  System.out.println(last.computeTable());  System.out.println("RANDOM");  System.out.println(random.computeTable());  System.out.println("LAST-MULTI-THREAD");  System.out.println(lastMT.computeTable());  System.out.println("RANDOM-MULTI-THREAD");  System.out.println(randomMT.computeTable());  String lastT=TrialSuiteHelper.combine(lastO);  String randomT=TrialSuiteHelper.combine(randomO);  System.out.println("LAST-ONE-HELPER(r)");  System.out.println(lastT);  System.out.println("RANDOM-ONE-HELPER(r)");  System.out.println(randomT);}  }
class C{  @Override public void convert(){  readWayParams();  parse();  convertToNetwork();  cleanNetwork();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.481 -0500",hash_original_method="1550A0F77E6D4005059B99263F67738A",hash_generated_method="A6A00D60930B4FA389EF13900687A266") public boolean isAckSeen(){  return this.ackSeen;}  }
class C{  private void reconstructStates(Tree tree,NodeRef node,int[] parentStates){  for (int i=0; i < patterns.getPatternCount(); i++) {    double[] Sa=nodeScores[node.getNumber()][i];    if (compressStates) {      int[] set=stateSets[i];      int minState=set[0];      double minCost=Sa[minState] + costMatrix[parentStates[i]][minState];      for (int j=1; j < set.length; j++) {        double c=Sa[set[j]] + costMatrix[parentStates[i]][set[j]];        if (c < minCost) {          minState=set[j];          minCost=c;        }      }      nodeStates[node.getNumber()][i]=minState;    } else {      int minState=0;      double minCost=Sa[minState] + costMatrix[parentStates[i]][minState];      for (int j=1; j < Sa.length; j++) {        double c=Sa[j] + costMatrix[parentStates[i]][j];        if (c < minCost) {          minState=j;          minCost=c;        }      }      nodeStates[node.getNumber()][i]=minState;    }  }  for (int i=0; i < tree.getChildCount(node); i++) {    reconstructStates(tree,tree.getChild(node,i),nodeStates[node.getNumber()]);  }}  }
class C{  public static Query newBoxQuery(String field,double minLatitude,double maxLatitude,double minLongitude,double maxLongitude){  if (minLatitude == 90.0) {    return new MatchNoDocsQuery("LatLonPoint.newBoxQuery with minLatitude=90.0");  }  if (minLongitude == 180.0) {    if (maxLongitude == 180.0) {      return new MatchNoDocsQuery("LatLonPoint.newBoxQuery with minLongitude=maxLongitude=180.0");    } else     if (maxLongitude < minLongitude) {      minLongitude=-180.0;    }  }  byte[] lower=encodeCeil(minLatitude,minLongitude);  byte[] upper=encode(maxLatitude,maxLongitude);  if (maxLongitude < minLongitude) {    BooleanQuery.Builder q=new BooleanQuery.Builder();    byte[] leftOpen=lower.clone();    NumericUtils.intToSortableBytes(Integer.MIN_VALUE,leftOpen,Integer.BYTES);    Query left=newBoxInternal(field,leftOpen,upper);    q.add(new BooleanClause(left,BooleanClause.Occur.SHOULD));    byte[] rightOpen=upper.clone();    NumericUtils.intToSortableBytes(Integer.MAX_VALUE,rightOpen,Integer.BYTES);    Query right=newBoxInternal(field,lower,rightOpen);    q.add(new BooleanClause(right,BooleanClause.Occur.SHOULD));    return new ConstantScoreQuery(q.build());  } else {    return newBoxInternal(field,lower,upper);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.703 -0500",hash_original_method="B08FC5F8DD5CA36D6F4DD131B7753109",hash_generated_method="4FD7ED5798AFBFF982289ABB3D9B44D3") private void writePendingOperationsLocked(){  final int N=mPendingOperations.size();  FileOutputStream fos=null;  try {    if (N == 0) {      if (DEBUG_FILE)       Log.v(TAG,"Truncating " + mPendingFile.getBaseFile());      mPendingFile.truncate();      return;    }    if (DEBUG_FILE)     Log.v(TAG,"Writing new " + mPendingFile.getBaseFile());    fos=mPendingFile.startWrite();    Parcel out=Parcel.obtain();    for (int i=0; i < N; i++) {      PendingOperation op=mPendingOperations.get(i);      writePendingOperationLocked(op,out);    }    fos.write(out.marshall());    out.recycle();    mPendingFile.finishWrite(fos);  } catch (  java.io.IOException e1) {    Log.w(TAG,"Error writing pending operations",e1);    if (fos != null) {      mPendingFile.failWrite(fos);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.269 -0500",hash_original_method="E6B8A87E363F5B01FA470053AAF5BDFD",hash_generated_method="4AAEE0D7878EBFB345095E6687BB47F9") public static int bitCount(long v){  v-=(v >>> 1) & 0x5555555555555555L;  v=(v & 0x3333333333333333L) + ((v >>> 2) & 0x3333333333333333L);  int i=((int)(v >>> 32)) + (int)v;  i=(i & 0x0F0F0F0F) + ((i >>> 4) & 0x0F0F0F0F);  i+=i >>> 8;  i+=i >>> 16;  return i & 0x0000007F;}  }
class C{  public synchronized boolean removeGroup(String group){  TupleSet ts=getFocusGroup(group);  if (ts != null) {    for (Iterator items=ts.tuples(ValidatedPredicate.TRUE); items.hasNext(); ) {      ((VisualItem)items.next()).setValidated(false);    }    ts.clear();    m_focus.remove(group);    return true;  }  ts=getVisualGroup(group);  if (ts == null) {    return false;  }  TupleSet[] focus=new TupleSet[m_focus.size()];  m_focus.values().toArray(focus);  for (Iterator items=ts.tuples(); items.hasNext(); ) {    VisualItem item=(VisualItem)items.next();    for (int j=0; j < focus.length; ++j) {      try {        focus[j].removeTuple(item);      } catch (      java.lang.UnsupportedOperationException e) {        focus[j].clear();      }    }    item.setValidated(false);  }  if (ts instanceof CompositeTupleSet) {    CompositeTupleSet cts=(CompositeTupleSet)ts;    for (Iterator names=cts.setNames(); names.hasNext(); ) {      String name=(String)names.next();      String subgroup=PrefuseLib.getGroupName(group,name);      m_visual.remove(subgroup);      m_source.remove(subgroup);    }  }  m_visual.remove(group);  m_source.remove(group);  return true;}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  dest.writeString(lf);  dest.writeInt(freq);  dest.writeInt(since);}  }
class C{  public static Range findStackedRangeBounds(TableXYDataset dataset,double base){  ParamChecks.nullNotPermitted(dataset,"dataset");  double minimum=base;  double maximum=base;  for (int itemNo=0; itemNo < dataset.getItemCount(); itemNo++) {    double positive=base;    double negative=base;    int seriesCount=dataset.getSeriesCount();    for (int seriesNo=0; seriesNo < seriesCount; seriesNo++) {      double y=dataset.getYValue(seriesNo,itemNo);      if (!Double.isNaN(y)) {        if (y > 0.0) {          positive+=y;        } else {          negative+=y;        }      }    }    if (positive > maximum) {      maximum=positive;    }    if (negative < minimum) {      minimum=negative;    }  }  if (minimum <= maximum) {    return new Range(minimum,maximum);  } else {    return null;  }}  }
class C{  @Override public void inc(long n){  throw new IllegalArgumentException("Not implemented in SegmentRange");}  }
class C{  public CanReply decodeFromHardware(AbstractMRReply m){  log.debug("Decoding from hardware");  GridConnectReply gc=(GridConnectReply)m;  CanReply ret=gc.createReply();  return ret;}  }
class C{  public void gyroDrive(double speed,double distance,double angle){  int newLeftTarget;  int newRightTarget;  int moveCounts;  double max;  double error;  double steer;  double leftSpeed;  double rightSpeed;  if (opModeIsActive()) {    moveCounts=(int)(distance * COUNTS_PER_INCH);    newLeftTarget=robot.leftMotor.getCurrentPosition() + moveCounts;    newRightTarget=robot.rightMotor.getCurrentPosition() + moveCounts;    robot.leftMotor.setTargetPosition(newLeftTarget);    robot.rightMotor.setTargetPosition(newRightTarget);    robot.leftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);    robot.rightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);    speed=Range.clip(Math.abs(speed),0.0,1.0);    robot.leftMotor.setPower(speed);    robot.rightMotor.setPower(speed);    while (opModeIsActive() && (robot.leftMotor.isBusy() && robot.rightMotor.isBusy())) {      error=getError(angle);      steer=getSteer(error,P_DRIVE_COEFF);      if (distance < 0)       steer*=-1.0;      leftSpeed=speed - steer;      rightSpeed=speed + steer;      max=Math.max(Math.abs(leftSpeed),Math.abs(rightSpeed));      if (max > 1.0) {        leftSpeed/=max;        rightSpeed/=max;      }      robot.leftMotor.setPower(leftSpeed);      robot.rightMotor.setPower(rightSpeed);      telemetry.addData("Err/St","%5.1f/%5.1f",error,steer);      telemetry.addData("Target","%7d:%7d",newLeftTarget,newRightTarget);      telemetry.addData("Actual","%7d:%7d",robot.leftMotor.getCurrentPosition(),robot.rightMotor.getCurrentPosition());      telemetry.addData("Speed","%5.2f:%5.2f",leftSpeed,rightSpeed);      telemetry.update();    }    robot.leftMotor.setPower(0);    robot.rightMotor.setPower(0);    robot.leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);    robot.rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);  }}  }
class C{  public AsyncTimer(final AsyncTimerOptions options){  this.recurringFutureSupplier=options.getRecurringFutureSupplier();  this.delay=options.getDelayStrategy();  this.visitor=options.getVisitor();  this.future=options.getInitialTrigger().thenCompose(null);}  }
class C{  public boolean isInScroll(){  return mInScroll;}  }
class C{  private static Object[] testcase(String functionCall,double expectedResult){  return new Object[]{functionCall,expectedResult,true};}  }
class C{  public static void grantMarketplaceUsage(String mpId,String orgId,String granteeUserKey,String password) throws Exception {  String userKey=(granteeUserKey == null) ? getPlatformOperatorKey() : granteeUserKey;  String pwd=(password == null) ? getPlatformOperatorPassword() : password;  MarketplaceService mps=ServiceFactory.getDefault().getMarketPlaceService(userKey,pwd);  mps.addOrganizationsToMarketplace(Collections.singletonList(orgId),mpId);}  }
class C{  public boolean isNumericFilterToggled(){  return numericFilter;}  }
class C{  public LinearFunctionPart(Coord startCoord,Coord endCoord){  super();  if (!(startCoord.getX() < endCoord.getX())) {    throw new RuntimeException("startCoord.getX() < endCoord.getX()");  }  this.startCoord=startCoord;  this.endCoord=endCoord;}  }
class C{  private String findCipherAndStrength(byte[] supportedCiphers,String[] tokens){  byte s;  for (int i=0; i < strength.length; i++) {    if ((s=strength[i]) != 0) {      for (int j=0; j < supportedCiphers.length; j++) {        if (s == supportedCiphers[j] && (specifiedCipher == null || specifiedCipher.equals(tokens[j]))) {switch (s) {case HIGH_STRENGTH:            negotiatedStrength="high";          break;case MEDIUM_STRENGTH:        negotiatedStrength="medium";      break;case LOW_STRENGTH:    negotiatedStrength="low";  break;}return tokens[j];}}}}return null;}  }
class C{  static <T>Stream<T> makeRef(AbstractPipeline<?,T,?> upstream,Comparator<? super T> comparator){  return new OfRef<>(upstream,comparator);}  }
class C{  public static int[] mergeSort(int[] a){  if (a.length == 1)   return a;  int[] x=mergeSort(Arrays.copyOfRange(a,0,a.length / 2));  int[] y=mergeSort(Arrays.copyOfRange(a,a.length / 2,a.length));  return merge(x,y);}  }
class C{  @VisibleForTesting static boolean shouldOpenAfterDownload(DownloadInfo downloadInfo){  String type=downloadInfo.getMimeType();  return downloadInfo.hasUserGesture() && !isAttachment(downloadInfo.getContentDisposition()) && MIME_TYPES_TO_OPEN.contains(type);}  }
class C{  private boolean affectsCIA(CnATreeElement scenario){  String[] sArr=new String[]{IRiskAnalysisService.PROP_SCENARIO_AFFECTS_C,IRiskAnalysisService.PROP_SCENARIO_AFFECTS_I,IRiskAnalysisService.PROP_SCENARIO_AFFECTS_A};  for (  String s : Arrays.asList(sArr)) {    if (scenario.getEntity().getProperties(s).getProperty(0).getPropertyValue().equals("1")) {      return true;    }  }  return false;}  }
class C{  public MultiplexingDatagramSocket(int port) throws SocketException {  super(port);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public boolean equals(Object object){  return object == null || object == this;}  }
class C{  public static void cleanExternalCache(Context context){  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))   deleteFilesByDirectory(context.getExternalCacheDir());}  }
class C{  static Value read(TestSynth config,ResultSet rs,int index) throws SQLException {  ResultSetMetaData meta=rs.getMetaData();  Object data;  int type=meta.getColumnType(index);switch (type) {case Types.REAL:case Types.DOUBLE:    data=rs.getDouble(index);  break;case Types.BIGINT:data=rs.getLong(index);break;case Types.DECIMAL:case Types.NUMERIC:data=rs.getBigDecimal(index);break;case Types.BLOB:case Types.BINARY:case Types.VARBINARY:case Types.LONGVARBINARY:data=rs.getBytes(index);break;case Types.OTHER:case Types.CLOB:case Types.VARCHAR:case Types.LONGVARCHAR:case Types.CHAR:data=rs.getString(index);break;case Types.DATE:data=rs.getDate(index);break;case Types.TIME:data=rs.getTime(index);break;case Types.TIMESTAMP:data=rs.getTimestamp(index);break;case Types.INTEGER:data=rs.getInt(index);break;case Types.NULL:data=null;break;case Types.BOOLEAN:case Types.BIT:data=rs.getBoolean(index) ? "TRUE" : "FALSE";break;default :throw new AssertionError("type=" + type);}if (rs.wasNull()) {data=null;}return new Value(config,type,data);}  }
class C{  public RemoteExpandedStyle(){  internalStyleId(REMOTE_STYLE);}  }
class C{  private int offset(int i,int j){  if (i < 0 || j > max || i > j) {    throw new RuntimeException(String.format("Invalid span (%d,%d | %d)",i,j,max));  }  return i * (max + 1) - i * (i + 1) / 2 + j;}  }
class C{  public static org.oscm.internal.vo.VOPricedOption convertToUp(org.oscm.vo.VOPricedOption oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOPricedOption newVO=new org.oscm.internal.vo.VOPricedOption();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setPricePerUser(oldVO.getPricePerUser());  newVO.setPricePerSubscription(oldVO.getPricePerSubscription());  newVO.setParameterOptionKey(oldVO.getParameterOptionKey());  newVO.setOptionId(oldVO.getOptionId());  newVO.setRoleSpecificUserPrices(convertToUpVOPricedRole(oldVO.getRoleSpecificUserPrices()));  return newVO;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.190 -0400",hash_original_method="6D3CCC8EF89648AC9918DF80EBAAB674",hash_generated_method="D2000B2588B4CDB225602F52EA7D25D8") public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.start_bt:{      this.startActivity(new Intent(this,SingleTaskActivity.class));      break;    }}}  }
class C{  private void destroyBeans(ApplicationAssociate applicationAssociate,Map<String,Object> viewMap){  for (  Map.Entry<String,Object> entry : viewMap.entrySet()) {    String name=entry.getKey();    Object bean=entry.getValue();    try {      if (applicationAssociate != null) {        BeanManager beanManager=applicationAssociate.getBeanManager();        if (beanManager != null && beanManager.isManaged(name)) {          beanManager.destroy(name,bean);        }      }    } catch (    Exception exception) {      if (LOGGER.isLoggable(Level.WARNING)) {        LOGGER.log(Level.WARNING,"Error calling @PreDestroy on bean with name: " + name,exception);      }    }  }}  }
class C{  @Override protected AbstractResult doTask() throws Exception {  final Event e=new Event(resourceManager.getFederation(),new EventResource(vmd.indexMetadata),OverflowActionEnum.ScatterSplit,vmd.getParams()).addDetail("summary",OverflowActionEnum.ScatterSplit + "+" + OverflowActionEnum.Move+ "("+ vmd.name+ ", nsplits="+ nsplits+ ")").addDetail("moveTargets",Arrays.toString(moveTargets)).start();  SplitResult splitResult=null;  try {    if (resourceManager.isOverflowAllowed())     throw new IllegalStateException();    try {      final String name=vmd.name;      final ILocalBTreeView src=vmd.getView();      final ISimpleSplitHandler splitHandler=vmd.indexMetadata.getSplitHandler();      final Split[] splits=SplitUtility.getSplits(resourceManager,vmd.pmd,(IndexSegment)src.getSources()[1],adjustedNominalShardSize,splitHandler);      if (splits == null) {        final double overextension=((double)vmd.sumSegBytes) / resourceManager.nominalShardSize;        if (overextension > resourceManager.shardOverextensionLimit && !resourceManager.isDisabledWrites(vmd.name)) {          log.error("Shard will not split - writes are disabled" + ": name=" + vmd.name + ", size="+ vmd.sumSegBytes+ ", overextended="+ (int)overextension+ "x"+ ", splitHandler="+ (splitHandler == null ? "N/A" : splitHandler.getClass().getName()));          resourceManager.disableWrites(vmd.name);        }        log.warn("No splits identified: will build: " + vmd);        return concurrencyManager.submit(new IncrementalBuildTask(vmd)).get();      }      final int nsplits=splits.length;      if (INFO)       log.info("Will build index segments for " + nsplits + " splits for "+ name+ " : "+ Arrays.toString(splits));      SplitUtility.validateSplits(src,splits);      splitResult=SplitUtility.buildSplits(vmd,splits,e);    }  finally {      clearRefs();    }    SplitIndexPartitionTask.doSplitAtomicUpdate(resourceManager,vmd,splitResult,OverflowActionEnum.ScatterSplit,resourceManager.overflowCounters.indexPartitionSplitCounter,e);    final int nsplits=splitResult.buildResults.length;    final List<MoveTask.AtomicUpdate> moveTasks=new ArrayList<MoveTask.AtomicUpdate>(nsplits);{      for (int i=0; i < nsplits; i++) {        final UUID moveTarget=moveTargets[i % moveTargets.length];        if (resourceManager.getDataServiceUUID().equals(moveTarget)) {          if (INFO)           log.info("Ignoring move to self.");          continue;        }        final int newPartitionId=resourceManager.nextPartitionId(vmd.indexMetadata.getName());        final String nameOfPartitionToMove=DataService.getIndexPartitionName(vmd.indexMetadata.getName(),splitResult.splits[i].pmd.getPartitionId());        moveTasks.add(new MoveTask.AtomicUpdate(resourceManager,nameOfPartitionToMove,splitResult.buildResults[i],moveTarget,newPartitionId,e));      }    }    final List<Future<MoveResult>> futures=resourceManager.getConcurrencyManager().invokeAll(moveTasks);    for (    Future<?> f : futures) {      if (!f.isCancelled()) {        try {          f.get();        } catch (        ExecutionException ex) {          log.error(ex,ex);        }      }    }    return splitResult;  }  finally {    if (splitResult != null) {      for (      BuildResult buildResult : splitResult.buildResults) {        if (buildResult != null) {          resourceManager.retentionSetRemove(buildResult.segmentMetadata.getUUID());        }      }    }    e.end();  }}  }
class C{  public String toString(){  return "JPAUserFlag ( " + "id = " + this.id + " "+ "name = "+ this.name+ " )";}  }
class C{  private static String escapeJSON(String text){  StringBuilder builder=new StringBuilder();  builder.append('"');  for (int index=0; index < text.length(); index++) {    char chr=text.charAt(index);switch (chr) {case '"':case '\\':      builder.append('\\');    builder.append(chr);  break;case '\b':builder.append("\\b");break;case '\t':builder.append("\\t");break;case '\n':builder.append("\\n");break;case '\r':builder.append("\\r");break;default :if (chr < ' ') {String t="000" + Integer.toHexString(chr);builder.append("\\u" + t.substring(t.length() - 4));} else {builder.append(chr);}break;}}builder.append('"');return builder.toString();}  }
class C{  public void undoableEditHappened(UndoableEditEvent e){  undo.addEdit(e.getEdit());  undoAction.update();  redoAction.update();}  }
class C{  public Uri readUri(String key){  Uri value=(Uri)mCache.get(key);  if (value == null && !mCache.containsKey(key)) {    String dbValue=readParameter(key);    if (dbValue != null) {      value=Uri.parse(dbValue);    }    mCache.put(key,value);  }  return value;}  }
class C{  public SchemaField(String name,FieldType type){  this(name,type,type.properties,null);}  }
class C{  public static Fuse notTriggeredFuse(){  return Fuse.create().reset();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.334 -0400",hash_original_method="567906B7B519F9A9A16432ADEC0EAB91",hash_generated_method="B899414B748EDC4978993F8A34171827") private K lowestKey(){  ConcurrentSkipListMap.Node<K,V> n=loNode();  if (isBeforeEnd(n))   return n.key; else   throw new NoSuchElementException();}  }
class C{  public boolean isSupported(){  return supported;}  }
class C{  public void endDTD() throws SAXException {  m_handler.endDTD();}  }
class C{  private void pruneDeadInstructions(){  HashSet<SsaInsn> deletedInsns=new HashSet<SsaInsn>();  ssaMeth.computeReachability();  for (  SsaBasicBlock block : ssaMeth.getBlocks()) {    if (block.isReachable())     continue;    for (int i=0; i < block.getInsns().size(); i++) {      SsaInsn insn=block.getInsns().get(i);      RegisterSpecList sources=insn.getSources();      int sourcesSize=sources.size();      if (sourcesSize != 0) {        deletedInsns.add(insn);      }      for (int j=0; j < sourcesSize; j++) {        RegisterSpec source=sources.get(j);        useList[source.getReg()].remove(insn);      }      RegisterSpec result=insn.getResult();      if (result == null)       continue;      for (      SsaInsn use : useList[result.getReg()]) {        if (use instanceof PhiInsn) {          PhiInsn phiUse=(PhiInsn)use;          phiUse.removePhiRegister(result);        }      }    }  }  ssaMeth.deleteInsns(deletedInsns);}  }
class C{  public String objectToString(final long shopId,final String skuCode,final BigDecimal quantity){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append(idBridge.objectToString(new BigDecimal(shopId)));  stringBuilder.append('_');  stringBuilder.append(skuCode);  stringBuilder.append('_');  stringBuilder.append(qtyBridge.objectToString(quantity));  return stringBuilder.toString();}  }
class C{  public Configuration configure() throws EPException {  configure('/' + ESPER_DEFAULT_CONFIG);  return this;}  }
class C{  public static final int countLines(String buffer){  int count=0;  int index=buffer.indexOf('\n');  while (index != -1) {    count++;    index=buffer.indexOf('\n',index + 1);  }  return count;}  }
class C{  private void notifyAllEntity(){  Log.printConcatLine(super.getName(),": Notify all CloudSim entities for shutting down.");  signalShutdown(resList);  signalShutdown(gisList);  resList.clear();  gisList.clear();}  }
class C{  public HttpMeta(HttpMethod httpMethod,String requestUrlPostfix,String entityBody,String requestPort,ParallecHeader parallecHeader){  super();  this.httpMethod=httpMethod;  this.requestUrlPostfix=requestUrlPostfix;  this.entityBody=entityBody;  this.requestPort=requestPort;  this.parallecHeader=parallecHeader;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @SuppressWarnings("synthetic-access") @Override public Iterator<E> iterator(){  return new ArrayDequeIterator<E>();}  }
class C{  @Override public synchronized boolean rowDeleted() throws SQLException {  throw SQLError.createSQLFeatureNotSupportedException();}  }
class C{  public WebappDirectoryManager(final File directory,String webappScheme,boolean deleteOldDirectories){  mWebappScheme=webappScheme;  mDirectoriesToDelete=new HashSet<File>();  mDirectoriesToDelete.add(directory);  if (deleteOldDirectories && sMustCleanUpOldDirectories.getAndSet(false)) {    assert Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;    Context context=ApplicationStatus.getApplicationContext();    cleanUpOldWebappDirectories(mDirectoriesToDelete,context.getApplicationInfo().dataDir);  }}  }
class C{  private static String abbreviateDisplayName(String displayName){  return StringUtils.abbreviateMiddle(displayName,"..",30);}  }
class C{  String convertTypeName(String sourceFile,String typeName){  Map<String,String> rewriteMap=typeRewrite.containsRow(sourceFile) ? typeRewrite.rowMap().get(sourceFile) : new HashMap<String,String>();  Set<String> allTypes=new HashSet<>();  allTypes.addAll(rewriteMap.keySet());  allTypes.addAll(symbolToModule.keySet());  String importedNamespace=nameUtil.findLongestNamePrefix(typeName,allTypes);  if (importedNamespace == null) {    return typeName;  }  if (rewriteMap.containsKey(importedNamespace)) {    String symbol=rewriteMap.get(importedNamespace);    return nameUtil.replacePrefixInName(typeName,importedNamespace,symbol);  } else {    FileModule module=symbolToModule.get(importedNamespace);    String symbol=module.importedNamespacesToSymbols.get(importedNamespace);    Node importSpec;    Node importFile;    if (module.shouldUseOldSyntax()) {      importSpec=Node.newString(Token.NAME,symbol);      importFile=Node.newString("goog:" + importedNamespace);    } else {      importSpec=new Node(Token.IMPORT_SPECS,new Node(Token.IMPORT_SPEC,IR.name(symbol)));      String referencedFile=pathUtil.getImportPath(sourceFile,module.file);      importFile=Node.newString(referencedFile);    }    Node importNode=new Node(Token.IMPORT,IR.empty(),importSpec,importFile);    importsNeeded.put(sourceFile,importNode);    typeRewrite.put(sourceFile,importedNamespace,symbol);    return nameUtil.replacePrefixInName(typeName,importedNamespace,symbol);  }}  }
class C{  private void reset(CompilationUnit unit){}  }
class C{  private static void startSettingService(String action,String extraValue){  try {    if (aidlService != null) {      aidlService.setting(action,extraValue);    } else {      settingEventList.add(new AIDLCacheEvent(EventType.SETTING,action,extraValue));      isServiceConnect(context);    }  } catch (  RemoteException e) {    EventManager.onError(context,e.getMessage());    Ln.e("EventManager == ","startSettingService == ",e);  }}  }
class C{  @Nullable private Space space(@Nullable String name,boolean create) throws IgniteSpiException {  String masked=maskNull(name);  assert masked != null;  Space space=spaces.get(masked);  if (space == null && create) {    validateName(name);    Space old=spaces.putIfAbsent(masked,space=new Space(masked,log));    if (old != null)     space=old;  }  if (space != null)   space.initialize();  return space;}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  public static String encode(byte[] bytes){  int len=bytes.length;  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);  int i=0;  int j=len;  while (j >= 3) {    encoded.append(to64((((bytes[i] & 0xff) << 16) | (int)((bytes[i + 1] & 0xff) << 8) | (int)(bytes[i + 2] & 0xff)),4));    i+=3;    j-=3;  }  if (j == 2) {    encoded.append(to64(((bytes[i] & 0xff) << 8) | ((bytes[i + 1] & 0xff)),3));  }  if (j == 1) {    encoded.append(to64(((bytes[i] & 0xff)),2));  }  return encoded.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public synchronized void computeCSSResource(CrawlURI curi){  this.extractorCSSListener.computeCSSResource(curi);}  }
class C{  private static List<String> parsePackageList(String packages){  if (packages == null) {    return new ArrayList<>();  } else {    return Arrays.asList(packages.split(":"));  }}  }
class C{  private double sinusProduct(int start,int end,double[] alpha){  double result=1;  for (int j=start; j < end; j++) {    result*=Math.sin(alpha[j]);  }  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else   if (myHost == null && progress != previousProgress) {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void updateClob(String columnLabel,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testProcedureUseLOBsFalse() throws Exception {  Properties props=new Properties();  props.setProperty("useLOBs","false");  Connection con=getConnection();  try {    DatabaseMetaData meta=con.getMetaData();    ResultSet rs=meta.getTypeInfo();    while (rs.next()) {      if ("text".equalsIgnoreCase(rs.getString(1)) || "ntext".equalsIgnoreCase(rs.getString(1))) {        Assert.assertEquals(Types.LONGVARCHAR,rs.getInt(2));      } else       if ("image".equalsIgnoreCase(rs.getString(1))) {        Assert.assertEquals(Types.LONGVARBINARY,rs.getInt(2));      }    }  }  finally {    con.close();  }  DatabaseMetaData meta=this.con.getMetaData();  ResultSet rs=meta.getTypeInfo();  while (rs.next()) {    if ("text".equalsIgnoreCase(rs.getString(1)) || "ntext".equalsIgnoreCase(rs.getString(1))) {      Assert.assertEquals(Types.CLOB,rs.getInt(2));    } else     if ("image".equalsIgnoreCase(rs.getString(1))) {      Assert.assertEquals(Types.BLOB,rs.getInt(2));    }  }}  }
class C{  private void augmentIterationId(){  if (getIterationId() == Integer.MAX_VALUE) {    this.iterationID=Integer.MIN_VALUE + 1;    resetNetworkVisited();  } else {    this.iterationID++;  }}  }
class C{  private static String buildGetStep(String url){  StringBuilder strb=new StringBuilder();  strb.append(LEFT_BRACE);  strb.append(TYPE_KEY);  strb.append(COLON);  strb.append(GET_TYPE);  strb.append(COMMA);  strb.append(URL_KEY);  strb.append(COLON);  strb.append(DOUBLE_QUOTE);  strb.append(url);  strb.append(DOUBLE_QUOTE);  strb.append(RIGHT_BRACE);  return strb.toString();}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public byte[] peekDigest(byte[] data,int offset,int length){  try {    final MessageDigest clone=(MessageDigest)digestInstance.clone();    clone.update(data,offset,length);    return clone.digest();  } catch (  CloneNotSupportedException e) {    throw new TorException(e);  }}  }
class C{  void dumpAssociationTables(){  Enumeration associations=m_patternTable.elements();  while (associations.hasMoreElements()) {    TemplateSubPatternAssociation head=(TemplateSubPatternAssociation)associations.nextElement();    while (null != head) {      System.out.print("(" + head.getTargetString() + ", "+ head.getPattern()+ ")");      head=head.getNext();    }    System.out.println("\n.....");  }  TemplateSubPatternAssociation head=m_wildCardPatterns;  System.out.print("wild card list: ");  while (null != head) {    System.out.print("(" + head.getTargetString() + ", "+ head.getPattern()+ ")");    head=head.getNext();  }  System.out.println("\n.....");}  }
class C{  public WarExtraClasspathTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (xctxt.getIteratorRoot() == xctxt.getCurrentNode())   return getStaticScore(); else   return this.SCORE_NONE;}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static DatacenterBroker createBroker(){  DatacenterBroker broker=null;  try {    broker=new DatacenterBroker("Broker");  } catch (  Exception e) {    e.printStackTrace();    return null;  }  return broker;}  }
class C{  public static Bitmap drawableToBitmap(Drawable d){  return d == null ? null : ((BitmapDrawable)d).getBitmap();}  }
class C{  public LogConfigurationException(){  super();}  }
class C{  public static boolean isTouchInsideViewWithClickListener(View view,MotionEvent event){  if (view == null) {    return false;  }  if (!(view instanceof ViewGroup)) {    return view.hasOnClickListeners();  } else   if (((ViewGroup)view).getChildCount() == 0) {    return view.hasOnClickListeners();  }  ViewGroup viewGroup=(ViewGroup)view;  for (int i=0; i < viewGroup.getChildCount(); i++) {    View child=viewGroup.getChildAt(i);    if (ViewUtil.isPointInsideView(event.getRawX(),event.getRawY(),child)) {      if (isTouchInsideViewWithClickListener(child,event)) {        return true;      }    }  }  return false;}  }
class C{  @Override public boolean drag(int startX,int startY,int endX,int endY,int steps) throws NotImplementedException {  return device.drag(startX,startY,endX,endY,steps);}  }
class C{  public DDM(){  this(2,3);}  }
class C{  public synchronized IUser addUser(final String userName) throws CouldntSaveDataException {  Preconditions.checkNotNull(userName,"IE02718: user name argument can not be null.");  if (containsUserName(userName)) {    throw new IllegalStateException("IE02719: User is already known to user management.");  }  final IUser user=provider.addUser(userName);  users.add(user);  for (  final IUserManagerListener listener : listeners) {    try {      listener.addedUser(user);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  return user;}  }
class C{  private void readObject(){}  }
class C{  public static Class[] wrappersToPrimitives(Class[] classes){  if (classes == null) {    return null;  }  if (classes.length == 0) {    return classes;  }  Class[] convertedClasses=new Class[classes.length];  for (int i=0; i < classes.length; i++) {    convertedClasses[i]=wrapperToPrimitive(classes[i]);  }  return convertedClasses;}  }
class C{  public void list(){  list(System.out,0);}  }
class C{  public void reset(){  revision=0;  type=0;  granulePosition=0;  streamSerialNumber=0;  pageSequenceNumber=0;  pageChecksum=0;  pageSegmentCount=0;  headerSize=0;  bodySize=0;}  }
class C{  private void storeInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE),index);}  }
class C{  public void addItems(List<T> items){  contents.addAll(items);  notifyItemRangeInserted(contents.size() - items.size() - 1,items.size());}  }
class C{  public void mouseClicked(MouseEvent event){  if (tryPopup(event))   return;  if (SwingUtilities.isRightMouseButton(event)) {    cm.handleRightMouseClick(event);  } else   if (event.getClickCount() >= 2) {    cm.handleMouseDoubleClick(event);  } else {    cm.handleMouseClick(event);  }}  }
class C{  public Iterator<Entry<String,NutchField>> iterator(){  return fields.entrySet().iterator();}  }
class C{  public static boolean checkLensState(CaptureResult result){  boolean missing=result.get(CaptureResult.LENS_STATE) == null;  if (missing) {    Log.e(TAG,"\n!!!! TotalCaptureResult missing LENS_STATE. !!!!\n ");  }  return !missing;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.266 -0500",hash_original_method="75AFFF60DFA2C9C15D3AF4D3BD061EC1",hash_generated_method="D11DB6FF2F14EF5444C1CA7E0827F3A0") public int authinfoPass(String password) throws IOException {  String passParameter="PASS " + password;  return sendCommand(NNTPCommand.AUTHINFO,passParameter);}  }
class C{  public String createComponentList(){  StringBuilder builder=new StringBuilder();  builder.append(HtmlSerializerHelper.buildDivHeader("components"));  builder.append(HtmlSerializerHelper.buildContent("Component","list",2));  builder.append(HtmlSerializerHelper.buildListHeader());  SortedSet<String> sortedSet=new TreeSet<String>(componentMap.keySet());  for (  String componentName : sortedSet) {    builder.append(HtmlSerializerHelper.buildListItem(HtmlSerializerHelper.buildInPageLink(componentName)));  }  builder.append(HtmlSerializerHelper.buildListTailer());  builder.append(HtmlSerializerHelper.buildDivTailer());  return builder.toString();}  }
class C{  @Ignore @Test public void testStringConditioningForLike_2(){  CompiledValue var=new CompiledPath(new CompiledID("p"),"ID");  String s1="abc%";  CompiledLiteral literal=new CompiledLiteral(s1);  QCompiler compiler=new QCompiler();  CompiledValue result=compiler.createCompiledValueForLikePredicate(var,literal);  validationHelperForCompiledJunction((CompiledJunction)result,"abc","abd");  s1="abc\\\\%";  literal=new CompiledLiteral(s1);  compiler=new QCompiler();  result=compiler.createCompiledValueForLikePredicate(var,literal);  validationHelperForCompiledJunction((CompiledJunction)result,"abc\\\\","abc\\]");  s1="abc" + new String(new char[]{(char)255,'%'});  literal=new CompiledLiteral(s1);  compiler=new QCompiler();  result=compiler.createCompiledValueForLikePredicate(var,literal);  String lowerBoundKey="abc" + new String(new char[]{(char)255});  validationHelperForCompiledJunction((CompiledJunction)result,lowerBoundKey,"abd");  s1="abc" + new String(new char[]{(char)255,(char)255,(char)255,(char)255,(char)255,'%'});  literal=new CompiledLiteral(s1);  compiler=new QCompiler();  result=compiler.createCompiledValueForLikePredicate(var,literal);  lowerBoundKey="abc" + new String(new char[]{(char)255,(char)255,(char)255,(char)255,(char)255});  validationHelperForCompiledJunction((CompiledJunction)result,lowerBoundKey,"abd");  s1="%";  literal=new CompiledLiteral(s1);  compiler=new QCompiler();  result=compiler.createCompiledValueForLikePredicate(var,literal);  assertTrue(result instanceof CompiledComparison);  CompiledComparison cc=(CompiledComparison)result;  assertTrue(cc.reflectOnOperator((CompiledValue)cc.getChildren().get(1)) == OQLLexerTokenTypes.TOK_GE);  assertTrue(((CompiledLiteral)cc.getChildren().get(1))._obj.equals(""));}  }
class C{  @Override public FactoryClient factory(){  return new DefaultFactoryClient(url,authenticationManager);}  }
class C{  private void cancelAnimation(){  if (mCurrentAnimation != null) {    mCurrentAnimation.setDuration(0);    mCurrentAnimation.cancel();    mCurrentAnimation=null;  }}  }
class C{  private void populateCache(){  if (factories == null) {    this.factories=new HashMap<String,ICommandInterpreterFactory>();    final IConfigurationElement[] elements=Platform.getExtensionRegistry().getConfigurationElementsFor(TerminalInterpreterPlugin.PLUGIN_ID,COMMAND_INTERPRETER_FACTORIES_EXTENSION_POINT);    for (int index=0; index < elements.length; index++) {      final IConfigurationElement element=elements[index];      try {        String[] commands=element.getAttribute("commands").split(",");        ICommandInterpreterFactory factory=(ICommandInterpreterFactory)element.createExecutableExtension("class");        for (int i=0; i < commands.length; i++) {          registerFactory(commands[i],factory);        }      } catch (      Throwable e) {        e.printStackTrace();      }    }  }}  }
class C{  public boolean accept(java.io.File f){  boolean result=f.isDirectory();  String ext=getExtension(f);  for (int i=0; !result && i < FLT_EXTENSIONS.length; i++)   result|=FLT_EXTENSIONS[i].equalsIgnoreCase(ext);  return (result);}  }
class C{  private void extractRowKeyAndData(String line,DefaultCategoryDataset dataset,List columnKeys){  Comparable rowKey=null;  int fieldIndex=0;  int start=0;  for (int i=0; i < line.length(); i++) {    if (line.charAt(i) == this.fieldDelimiter) {      if (fieldIndex == 0) {        String key=line.substring(start,i);        rowKey=removeStringDelimiters(key);      } else {        Double value=Double.valueOf(removeStringDelimiters(line.substring(start,i)));        dataset.addValue(value,rowKey,(Comparable)columnKeys.get(fieldIndex - 1));      }      start=i + 1;      fieldIndex++;    }  }  Double value=Double.valueOf(removeStringDelimiters(line.substring(start,line.length())));  dataset.addValue(value,rowKey,(Comparable)columnKeys.get(fieldIndex - 1));}  }
class C{  public synchronized void update(double sample){  long now=System.currentTimeMillis();  if (lastMillis == 0) {    average=sample;    lastMillis=now;    return;  }  long deltaTime=now - lastMillis;  double coeff=Math.exp(-1.0 * ((double)deltaTime / windowMillis));  average=(1.0 - coeff) * sample + coeff * average;  lastMillis=now;}  }
class C{  public static void main(String args[]){  if (args == null || args.length < 5 || args.length > 7) {    throw new RuntimeException(ERR_USAGE);  }  PropertyImport propertyImport=new PropertyImport(args[0],args[1],args[2],args[3],args[4],args.length >= 6 ? Boolean.parseBoolean(args[5]) : false,args.length >= 7 ? args[6] : null);  propertyImport.execute();}  }
class C{  public int addRow(){  int r;  if (m_openrows == null || m_openrows.isEmpty()) {    r=(m_firstid == 0 ? ++m_curid : --m_firstid);  } else {    int key=m_openrows.firstKey();    r=m_openrows.remove(key);  }  return r;}  }
class C{  public static void copyCurrentProfile(String newProfileName){  getCurrentProfile().setPropertiesFile(new File(getConfigurationDirectory(),newProfileName + PROFILES_SUFFIX));  getCurrentProfile().save();  getDefaultConfiguration().setProperty(PROPERTY_NAME_CURRENTCONFIGURATION,newProfileName);  currentProfile=null;  getCurrentProfile();}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;case main_region_C:return stateVector[0] == State.main_region_C;default :return false;}}  }
class C{  public void addEntryTime(double time){  if (entryTimes == null) {    return;  }  if (time < 0) {    time=0.0;  }  entryTimes.add(Double.valueOf(time));}  }
class C{  public static Number xor(Number left,Number right){  return NumberMath.xor(left,right);}  }
class C{  GeneralRange<T> reverse(){  GeneralRange<T> result=reverse;  if (result == null) {    result=new GeneralRange<T>(Ordering.from(comparator).reverse(),hasUpperBound,getUpperEndpoint(),getUpperBoundType(),hasLowerBound,getLowerEndpoint(),getLowerBoundType());    result.reverse=this;    return this.reverse=result;  }  return result;}  }
class C{  public static Document stringToDom(String xmlString) throws SAXException {  return stringToDom(xmlString,false);}  }
class C{  private synchronized void addSocket(DatagramSocket socket,InetSocketAddress remoteAddress) throws IOException {  if (freed) {    throw new IOException("Candidate freed");  }  Component component=getParentComponent();  if (component == null) {    throw new IOException("No parent component");  }  IceProcessingState state=component.getParentStream().getParentAgent().getState();  if (!IceProcessingState.WAITING.equals(state) && !IceProcessingState.RUNNING.equals(state)) {    throw new IOException("Agent state is " + state + ". Cannot add socket.");  }  MultiplexingDatagramSocket multiplexing=new MultiplexingDatagramSocket(socket);  IceSocketWrapper candidateSocket=new IceUdpSocketWrapper(multiplexing);  IceSocketWrapper stunSocket=new IceUdpSocketWrapper(multiplexing.getSocket(new StunDatagramPacketFilter()));  component.getParentStream().getParentAgent().getStunStack().addSocket(stunSocket,new TransportAddress(remoteAddress,Transport.UDP));synchronized (candidateSockets) {    candidateSockets.put(remoteAddress,candidateSocket);  }synchronized (sockets) {    sockets.put(remoteAddress,socket);  }}  }
class C{  public String undo(){  if (!canUndo()) {    Log.w(TAG,"Attempted to undo, but no undo checkpoints available");    return null;  }  String name=undoCheckpoints.getLast().name;  Checkpoint redoPoint=new Checkpoint(name);  undoCheckpoints.removeLast().restore(redoPoint);  redoCheckpoints.add(redoPoint);  updateIcon();  return name;}  }
class C{  private void checkLegal(){  if (mDataSets == null)   return;  if (this instanceof ScatterData)   return;  for (int i=0; i < mDataSets.size(); i++) {    if (mDataSets.get(i).getYVals().size() > mXVals.size()) {      throw new IllegalArgumentException("One or more of the DataSet Entry arrays are longer than the x-values array of this ChartData object.");    }  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.FEATURE_PARAMETER__FEATURE_TYPE:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetFeatureType((FeatureType)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.293 -0500",hash_original_method="0A322E8BE1639A0DBED358F3919BFB99",hash_generated_method="4FA970995E386E899113863905242C0C") public void onUnhandledKeyEvent(WebView view,KeyEvent event){}  }
class C{  private final void pingIpAddr(){  try {    String ipAddress="74.125.47.104";    Process p=Runtime.getRuntime().exec("ping -c 1 " + ipAddress);    int status=p.waitFor();    if (status == 0) {      mPingIpAddrResult="Pass";    } else {      mPingIpAddrResult="Fail: IP addr not reachable";    }  } catch (  IOException e) {    mPingIpAddrResult="Fail: IOException";  }catch (  InterruptedException e) {    mPingIpAddrResult="Fail: InterruptedException";  }}  }
class C{  public static String join(Collection<?> items,char separator){  if (items == null)   return "";  StringBuilder sb=new StringBuilder(items.size() << 3);  boolean first=true;  for (  Object o : items) {    String item=String.valueOf(o);    if (first) {      first=false;    } else {      sb.append(separator);    }    appendEscapedTextToBuilder(sb,item,separator);  }  return sb.toString();}  }
class C{  public PSPIdentifierForSellerException(){}  }
class C{  public SingleFieldBuilder<MType,BType,IType> mergeFrom(MType value){  if (builder == null && message == message.getDefaultInstanceForType()) {    message=value;  } else {    getBuilder().mergeFrom(value);  }  onChanged();  return this;}  }
class C{  public JMenuBar createJMenuBar(String name,String specialization) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JMenuBar result=new JMenuBar();  List menus=getSpecializedStringList(name,specialization);  Iterator it=menus.iterator();  while (it.hasNext()) {    result.add(createJMenuComponent((String)it.next(),specialization));  }  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ZoneRules toRules(String zoneId){  Objects.requireNonNull(zoneId,"zoneId");  if (windowList.isEmpty()) {    throw new IllegalStateException("No windows have been added to the builder");  }  final List<ZoneOffsetTransition> standardTransitionList=new ArrayList<>(4);  final List<ZoneOffsetTransition> transitionList=new ArrayList<>(256);  final List<ZoneOffsetTransitionRule> lastTransitionRuleList=new ArrayList<>(2);  final TZWindow firstWindow=windowList.get(0);  ZoneOffset loopStandardOffset=firstWindow.standardOffset;  int loopSavings=0;  if (firstWindow.fixedSavingAmountSecs != null) {    loopSavings=firstWindow.fixedSavingAmountSecs;  }  final ZoneOffset firstWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + loopSavings);  LocalDateTime loopWindowStart=LocalDateTime.of(YEAR_MIN_VALUE,1,1,0,0);  ZoneOffset loopWindowOffset=firstWallOffset;  for (  TZWindow window : windowList) {    window.tidy(loopWindowStart.getYear());    Integer effectiveSavings=window.fixedSavingAmountSecs;    if (effectiveSavings == null) {      effectiveSavings=0;      for (      TZRule rule : window.ruleList) {        if (rule.toEpochSecond(loopStandardOffset,loopSavings) > loopWindowStart.toEpochSecond(loopWindowOffset)) {          break;        }        effectiveSavings=rule.savingAmountSecs;      }    }    if (loopStandardOffset.equals(window.standardOffset) == false) {      standardTransitionList.add(new ZoneOffsetTransition(LocalDateTime.ofEpochSecond(loopWindowStart.toEpochSecond(loopWindowOffset),0,loopStandardOffset),loopStandardOffset,window.standardOffset));      loopStandardOffset=window.standardOffset;    }    ZoneOffset effectiveWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + effectiveSavings);    if (loopWindowOffset.equals(effectiveWallOffset) == false) {      transitionList.add(new ZoneOffsetTransition(loopWindowStart,loopWindowOffset,effectiveWallOffset));    }    loopSavings=effectiveSavings;    for (    TZRule rule : window.ruleList) {      if (rule.isTransition(loopSavings)) {        ZoneOffsetTransition trans=rule.toTransition(loopStandardOffset,loopSavings);        if (trans.toEpochSecond() < loopWindowStart.toEpochSecond(loopWindowOffset) == false && trans.toEpochSecond() < window.createDateTimeEpochSecond(loopSavings)) {          transitionList.add(trans);          loopSavings=rule.savingAmountSecs;        }      }    }    for (    TZRule lastRule : window.lastRuleList) {      lastTransitionRuleList.add(lastRule.toTransitionRule(loopStandardOffset,loopSavings));      loopSavings=lastRule.savingAmountSecs;    }    loopWindowOffset=window.createWallOffset(loopSavings);    loopWindowStart=LocalDateTime.ofEpochSecond(window.createDateTimeEpochSecond(loopSavings),0,loopWindowOffset);  }  return new ZoneRules(firstWindow.standardOffset,firstWallOffset,standardTransitionList,transitionList,lastTransitionRuleList);}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public static byte[] latin1ToBytes(final String str){  return encodingToBytes(str,"ISO-8859-1");}  }
class C{  public boolean isUseBias(){  return useBias;}  }
class C{  public void testBug37458() throws Exception {  int ids[]={13,1,8};  String vals[]={"c","a","b"};  createTable("testBug37458","(id int not null auto_increment, val varchar(100), primary key (id), unique (val))");  this.stmt.executeUpdate("insert into testBug37458 values (1, 'a'), (8, 'b'), (13, 'c')");  this.pstmt=this.conn.prepareStatement("insert into testBug37458 (val) values (?) on duplicate key update id = last_insert_id(id)",Statement.RETURN_GENERATED_KEYS);  for (int i=0; i < ids.length; ++i) {    this.pstmt.setString(1,vals[i]);    this.pstmt.addBatch();  }  this.pstmt.executeBatch();  ResultSet keys=this.pstmt.getGeneratedKeys();  for (int i=0; i < ids.length; ++i) {    assertTrue(keys.next());    assertEquals(ids[i],keys.getInt(1));  }}  }
class C{  public boolean isAnySet(IrritantSet other){  if (other == null)   return false;  for (int i=0; i < GROUP_MAX; i++) {    if ((this.bits[i] & other.bits[i]) != 0)     return true;  }  return false;}  }
class C{  private JFreeChart createHistogramChart(final ExampleSet exampleSet){  JFreeChart chart=ChartFactory.createHistogram(null,null,null,createHistogramDataset(exampleSet),PlotOrientation.VERTICAL,false,false,false);  AbstractAttributeStatisticsModel.setDefaultChartFonts(chart);  chart.setBackgroundPaint(null);  chart.setBackgroundImageAlpha(0.0f);  XYPlot plot=(XYPlot)chart.getPlot();  plot.setRangeGridlinesVisible(false);  plot.setDomainGridlinesVisible(false);  plot.setOutlineVisible(false);  plot.setRangeZeroBaselineVisible(false);  plot.setDomainZeroBaselineVisible(false);  plot.getDomainAxis().setTickLabelsVisible(false);  plot.setBackgroundPaint(COLOR_INVISIBLE);  plot.setBackgroundImageAlpha(0.0f);  XYBarRenderer renderer=(XYBarRenderer)plot.getRenderer();  renderer.setSeriesPaint(0,AttributeGuiTools.getColorForValueType(Ontology.DATE_TIME));  renderer.setBarPainter(new StandardXYBarPainter());  renderer.setDrawBarOutline(true);  renderer.setShadowVisible(false);  return chart;}  }
class C{  public void multiply() throws IOException {  writeCode(MULTIPLY);}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  long[] oldKeys=_set;  int[] oldVals=_values;  byte[] oldStates=_states;  _set=new long[newCapacity];  _values=new int[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      long o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  private float drawYAxisMarkers(ChartValueSeries chartValueSeries,Canvas canvas,int xPosition){  int interval=chartValueSeries.getInterval();  float maxMarkerWidth=0;  for (int i=0; i <= Y_AXIS_INTERVALS; i++) {    maxMarkerWidth=Math.max(maxMarkerWidth,drawYAxisMarker(chartValueSeries,canvas,xPosition,i * interval + chartValueSeries.getMinMarkerValue()));  }  return maxMarkerWidth;}  }
class C{  public CGotoDialog(final JFrame parent,final MemoryMap memoryMap,final IMemoryExpressionBinding bindings,final IAddress address){  super(parent,"Goto Address",ModalityType.APPLICATION_MODAL);  m_memoryMap=memoryMap;  m_bindings=bindings;  if (address != null) {    offsetField.setText("0x" + address.toHexString());  }  setResizable(false);  new CDialogEscaper(this);  m_parent=parent;  setLayout(new BorderLayout());  final JPanel inputPanel=new JPanel();  inputPanel.setLayout(new BorderLayout());  inputPanel.setBorder(new TitledBorder(""));  final JPanel fooPanel=new JPanel(new BorderLayout());  final JLabel label=new JLabel("Address" + ": ");  fooPanel.add(label,BorderLayout.WEST);  fooPanel.add(offsetField,BorderLayout.CENTER);  inputPanel.add(fooPanel,BorderLayout.NORTH);  final CPanelTwoButtons panel=new CPanelTwoButtons(new InternalListener(),"OK","Cancel");  getContentPane().add(inputPanel,BorderLayout.NORTH);  getContentPane().add(panel,BorderLayout.SOUTH);  getRootPane().setDefaultButton(panel.getFirstButton());  pack();  setSize(300,100);  setLocationRelativeTo(null);}  }
class C{  @Override public String isExportFormatSupported(String mimeType){  return Exportable.FORMAT_NOT_SUPPORTED;}  }
class C{  public void padWithLen(byte[] in,int off,int len) throws ShortBufferException {  if (in == null)   return;  if ((off + len) > in.length) {    throw new ShortBufferException("Buffer too small to hold padding");  }  byte paddingOctet=(byte)(len & 0xff);  byte[] padding=new byte[len];  SunJCE.getRandom().nextBytes(padding);  padding[len - 1]=paddingOctet;  System.arraycopy(padding,0,in,off,len);  return;}  }
class C{  @SuppressWarnings("unchecked") public static <S extends Serializable>S deserialize(InputStream inputStream) throws IOException {  try {    return (S)new ObjectInputStream(inputStream).readObject();  } catch (  ClassNotFoundException exception) {    IOException ioe=new IOException("Failed to deserialize object");    ioe.initCause(exception);    throw ioe;  } finally {    inputStream.close();  }}  }
class C{  private static void TestCloseAll() throws Exception {  File testFile=new File("test");  testFile.deleteOnExit();  RandomAccessFile raf=new RandomAccessFile(testFile,"rw");  FileInputStream fis=new FileInputStream(raf.getFD());  fis.close();  if (raf.getFD().valid()) {    throw new RuntimeException("FD should not be valid.");  }  raf=new RandomAccessFile(testFile,"rw");  fis=new FileInputStream(raf.getFD());  BadFileInputStream bfis1=new BadFileInputStream(raf.getFD());  BadFileInputStream bfis2=new BadFileInputStream(raf.getFD());  BadFileInputStream bfis3=new BadFileInputStream(raf.getFD());  bfis3=null;  try {    fis.close();  } catch (  IOException ioe) {    ioe.printStackTrace();    if (ioe.getSuppressed().length != 2) {      throw new RuntimeException("[FIS]Incorrect number of suppressed " + "exceptions received : " + ioe.getSuppressed().length);    }  }  if (raf.getFD().valid()) {    throw new RuntimeException("[FIS]TestCloseAll : FD still valid.");  }  raf=new RandomAccessFile(testFile,"rw");  FileOutputStream fos=new FileOutputStream(raf.getFD());  BadFileOutputStream bfos1=new BadFileOutputStream(raf.getFD());  BadFileOutputStream bfos2=new BadFileOutputStream(raf.getFD());  BadFileOutputStream bfos3=new BadFileOutputStream(raf.getFD());  bfos3=null;  try {    fos.close();  } catch (  IOException ioe) {    ioe.printStackTrace();    if (ioe.getSuppressed().length != 2) {      throw new RuntimeException("[FOS]Incorrect number of suppressed " + "exceptions received : " + ioe.getSuppressed().length);    }  }  if (raf.getFD().valid()) {    throw new RuntimeException("[FOS]TestCloseAll : FD still valid.");  }}  }
class C{  @Override public void roll(int field,boolean increment){  roll(field,increment ? 1 : -1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.762 -0500",hash_original_method="7A0CD8F454BFF26B05173D10B6823AEB",hash_generated_method="2CE211D97D047EFB47C8669D94089E80") public boolean saveState(Bundle outState){  if (DebugFlags.NETWORK) {    Log.v(LOGTAG,"Network.saveState()");  }  return mSslErrorHandler.saveState(outState);}  }
class C{  protected EObject createInitialModel(){  EClass eClass=(EClass)eipPackage.getEClassifier(initialObjectCreationPage.getInitialObjectName());  EObject rootObject=eipFactory.create(eClass);  return rootObject;}  }
class C{  @Override public boolean isExpanded(){  return mNode.isExpanded();}  }
class C{  public mxUnionFind(Object[] elements){  for (int i=0; i < elements.length; i++) {    nodes.put(elements[i],new Node());  }}  }
class C{  public TransactionInput(NetworkParameters params,@Nullable Transaction parentTransaction,byte[] payload,int offset) throws ProtocolException {  super(params,payload,offset);  setParent(parentTransaction);  this.value=null;}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public void testSharedMode() throws Exception {  depMode=DeploymentMode.SHARED;  processTest(false,false);}  }
class C{  public void removeAllInspectors(boolean killDraggedOutWindowsToo){  stopAllInspectors(killDraggedOutWindowsToo);  if (killDraggedOutWindowsToo) {    Iterator i=allInspectors.keySet().iterator();    while (i.hasNext()) {      Component inspector=(Component)(i.next());      while (inspector != null && !(inspector instanceof JFrame))       inspector=inspector.getParent();      if (inspector != null)       ((JFrame)(inspector)).dispose();    }    allInspectors=new WeakHashMap();  }}  }
class C{  public boolean isInner(){  return (ipos > 0);}  }
class C{  public void createInspectors(Point2D point,GUIState simulation){  createInspectors(new Rectangle2D.Double(point.getX(),point.getY(),1,1),simulation);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.221 -0500",hash_original_method="2C61A8961B533B2EFAE2B5516136BD48",hash_generated_method="26C2B10AFDA526EBD3AE5E8875BB8BDD") @Override void resetList(){  clearRecycledState(mHeaderViewInfos);  clearRecycledState(mFooterViewInfos);  super.resetList();  mLayoutMode=LAYOUT_NORMAL;}  }
class C{  public static Bitmap viewToImage(Context context,WebView viewToBeConverted){  int extraSpace=2000;  int height=viewToBeConverted.getContentHeight() + extraSpace;  Bitmap viewBitmap=Bitmap.createBitmap(viewToBeConverted.getWidth(),height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(viewBitmap);  viewToBeConverted.draw(canvas);  try {    int scrollY=viewToBeConverted.getScrollY();    if (scrollY > 0) {      viewBitmap=Bitmap.createBitmap(viewBitmap,0,scrollY,viewToBeConverted.getWidth(),height - scrollY);    }  } catch (  Exception ex) {    Log.e("PercolateAndroidUtils","Could not remove top part of the webview image.  ex=" + ex);  }  return viewBitmap;}  }
class C{  public boolean canGetDate(){  return canGet(Date.class);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.265 -0500",hash_original_method="66E0A8FBF49ECB21297BEFDE183D53F0",hash_generated_method="6FAF55943B44526C037FBE5D40EDF4C6") public ConnPoolByRoute(final ClientConnectionOperator operator,final HttpParams params){  super();  if (operator == null) {    throw new IllegalArgumentException("Connection operator may not be null");  }  this.operator=operator;  freeConnections=createFreeConnQueue();  waitingThreads=createWaitingThreadQueue();  routeToPool=createRouteToPoolMap();  maxTotalConnections=ConnManagerParams.getMaxTotalConnections(params);  connPerRoute=ConnManagerParams.getMaxConnectionsPerRoute(params);}  }
class C{  public void updateDouble(int columnIndex,double x) throws SQLException {  throw new NotUpdatable();}  }
class C{  public FastMultiByteArrayInputStream(final byte[] array){  if (array.length == 0)   this.array=new byte[1][]; else {    this.array=new byte[2][];    this.array[0]=array;    this.length=array.length;    this.current=array;  }}  }
class C{  public Crossfader withSecond(View first,int width){  this.mSecond=first;  this.mSecondWidth=width;  return this;}  }
class C{  private ComparableTimSort(Object[] a){  this.a=a;  int len=a.length;  Object[] newArray=new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  protected static List<HostAddress> sortSRVRecords(List<SRVRecord> records){  if (records.size() == 1 && records.get(0).getFQDN().equals("."))   return null;  Collections.sort(records);  SortedMap<Integer,List<SRVRecord>> buckets=new TreeMap<Integer,List<SRVRecord>>();  for (  SRVRecord r : records) {    Integer priority=r.getPriority();    List<SRVRecord> bucket=buckets.get(priority);    if (bucket == null) {      bucket=new LinkedList<SRVRecord>();      buckets.put(priority,bucket);    }    bucket.add(r);  }  List<HostAddress> res=new ArrayList<HostAddress>(records.size());  for (  Integer priority : buckets.keySet()) {    List<SRVRecord> bucket=buckets.get(priority);    int bucketSize;    while ((bucketSize=bucket.size()) > 0) {      int[] totals=new int[bucket.size()];      int running_total=0;      int count=0;      int zeroWeight=1;      for (      SRVRecord r : bucket) {        if (r.getWeight() > 0)         zeroWeight=0;      }      for (      SRVRecord r : bucket) {        running_total+=(r.getWeight() + zeroWeight);        totals[count]=running_total;        count++;      }      int selectedPos;      if (running_total == 0) {        selectedPos=(int)(Math.random() * bucketSize);      } else {        double rnd=Math.random() * running_total;        selectedPos=bisect(totals,rnd);      }      SRVRecord chosenSRVRecord=bucket.remove(selectedPos);      res.add(chosenSRVRecord);    }  }  return res;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols, x, y;  int progress=0;  double z, zN, noData, outputNoData;  int i, n;  int[] dX;  int[] dY;  double[] filterShape;  double[] data;  double largeValue=Float.POSITIVE_INFINITY;  int numPixelsInFilter;  int filterSize, midPoint, lowerQuartile;  boolean performLineThinning=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSize=Integer.parseInt(args[2]);  performLineThinning=Boolean.parseBoolean(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSize++;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    i=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[i]=col - midPoint;        dY[i]=row - midPoint;        z=(dX[i] * dX[i]) / aSqr + (dY[i] * dY[i]) / aSqr;        if (z > 1) {          filterShape[i]=0;        } else {          filterShape[i]=1;        }        i++;      }    }    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          data=new double[numPixelsInFilter];          n=0;          for (i=0; i < numPixelsInFilter; i++) {            x=col + dX[i];            y=row + dY[i];            zN=DEM.getValue(y,x);            if (zN != noData) {              data[i]=zN;              n++;            } else {              data[i]=largeValue;            }          }          if (n > 0) {            Arrays.sort(data);            lowerQuartile=n / 4;            if (z <= data[lowerQuartile]) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void selectValue(int value){  if (log.isDebugEnabled()) {    log.debug("selectValue(" + value + ")");  }  if (value > _value.getItemCount() - 1) {    log.error("Saw unreasonable internal value: " + value);    return;  }  String choice=_value.getItemAt(value);  SettingList sl=choiceHash.get(choice);  sl.setValues();}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId,String listenAddress,AuthScheme authScheme,String keyStorePath,String keyStorePassword) throws SyncException {  init(nodes,thisNodeId,authScheme,keyStorePath,keyStorePassword);  this.listenAddress=listenAddress;}  }
class C{  public boolean isActive(){  return (m_flags & e_activeFlag) == e_activeFlag;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public void registerRawCFG(RawControlFlowGraph cfg){  String className=cfg.getClassName();  String methodName=cfg.getMethodName();  if (className == null || methodName == null)   throw new IllegalStateException("expect class and method name of CFGs to be set before entering the GraphPool");  if (!rawCFGs.containsKey(className)) {    rawCFGs.put(className,new HashMap<String,RawControlFlowGraph>());  }  Map<String,RawControlFlowGraph> methods=rawCFGs.get(className);  logger.debug("Added complete CFG for class " + className + " and method "+ methodName);  methods.put(methodName,cfg);  if (Properties.WRITE_CFG)   cfg.toDot();}  }
class C{  public void resetReader(){  this.packetValues.addAll(readableObjects);  this.readableObjects.clear();  this.readableObjects.addAll(packetValues);  this.packetValues.clear();}  }
class C{  public ZoomAction(@Nullable DrawingEditor editor,double scaleFactor,@Nullable AbstractButton button){  this((DrawingView)null,scaleFactor,button);  setEditor(editor);}  }
class C{  public void postAttr(JCTree tree){  new PostAttrAnalyzer().scan(tree);}  }
class C{  public int compareTo(byte[] buf,int offset,int length){  return compareTo(new ByteArray(buf,offset,length));}  }
class C{  public Projection create(Properties props) throws ProjectionException {  try {    LatLonPoint llp=convertToLLP((Point2D)props.get(ProjectionFactory.CENTER));    float scale=PropUtils.floatFromProperties(props,ProjectionFactory.SCALE,10000000);    int height=PropUtils.intFromProperties(props,ProjectionFactory.HEIGHT,100);    int width=PropUtils.intFromProperties(props,ProjectionFactory.WIDTH,100);    GeoProj proj=new LLXY(llp,scale,width,height);    Ellipsoid ellps=(Ellipsoid)props.get(ProjectionFactory.DATUM);    if ((ellps != null) && (ellps != Ellipsoid.WGS_84)) {      proj=new DatumShiftProjection(proj,new DatumShiftGCT(ellps));    }    return proj;  } catch (  Exception e) {    if (Debug.debugging("proj")) {      Debug.output("LLXYLoader: problem creating LLXY projection " + e.getMessage());    }  }  throw new ProjectionException("LLXYLoader: problem creating LLXY projection");}  }
class C{  private void sortResult() throws QueryExecutionException {  List<ListBasedResultWrapper> result=new ArrayList<ListBasedResultWrapper>(mergedScannedResult.size());  ListBasedResultWrapper wrapper=null;  SortInfo sortInfo=blockExecutionInfo.getSortInfo();  KeyStructureInfo keyStructureInfo=blockExecutionInfo.getKeyStructureInfo();  long[] keyArray=null;  try {    while (mergedScannedResult.hasNext()) {      wrapper=new ListBasedResultWrapper();      ByteArrayWrapper key=mergedScannedResult.getKey();      if (key != null) {        keyArray=keyStructureInfo.getKeyGenerator().getKeyArray(key.getDictionaryKey(),keyStructureInfo.getMaskedBytes());        for (int i=0; i < sortInfo.getSortDimension().size(); i++) {          if (CarbonUtil.hasEncoding(sortInfo.getSortDimension().get(i).getDimension().getEncoder(),Encoding.DICTIONARY)) {            keyArray[sortInfo.getSortDimension().get(i).getDimension().getKeyOrdinal()]=blockExecutionInfo.getColumnIdToDcitionaryMapping().get(sortInfo.getSortDimension().get(i).getDimension().getColumnId()).getSortedIndex((int)keyArray[sortInfo.getSortDimension().get(i).getDimension().getKeyOrdinal()]);          }        }        key.setDictionaryKey(getMaskedKey(keyStructureInfo.getKeyGenerator().generateKey(keyArray),keyStructureInfo));        wrapper.setKey(key);      }      wrapper.setValue(mergedScannedResult.getValue());      result.add(wrapper);    }  } catch (  KeyGenException e) {    throw new QueryExecutionException(e);  }  initialiseResult();  Collections.sort(result,getMergerChainComparator(sortInfo));  mergedScannedResult.addScannedResult(result);}  }
class C{  private char map(char ch){  int index=ch - 'A';  if (index < 0 || index >= this.getSoundexMapping().length) {    throw new IllegalArgumentException("The character is not mapped: " + ch);  }  return this.getSoundexMapping()[index];}  }
class C{  @Override public void error(String format,Object arg){  if (logger.isLoggable(Level.SEVERE)) {    FormattingTuple ft=MessageFormatter.format(format,arg);    log(SELF,Level.SEVERE,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public void addFingerprint(ClassTemplate template){  if (isFingerprint(template)) {    this.entries.add(new Entry(template));  }}  }
class C{  public static String parseHeadValue(String content,String key,String defaultValue){  if (!TextUtils.isEmpty(content) && !TextUtils.isEmpty(key)) {    StringTokenizer stringTokenizer=new StringTokenizer(content,";");    while (stringTokenizer.hasMoreElements()) {      String valuePair=stringTokenizer.nextToken();      int index=valuePair.indexOf('=');      if (index > 0) {        String name=valuePair.substring(0,index).trim();        if (key.equalsIgnoreCase(name)) {          defaultValue=valuePair.substring(index + 1).trim();          break;        }      }    }  }  return defaultValue;}  }
class C{  @SuppressWarnings("unchecked") public ArrayDeque(Collection<? extends E> c){  elements=(E[])new Object[countInitSize(c.size())];  front=rear=0;  status=DequeStatus.Empty;  modCount=0;  Iterator<? extends E> it=c.iterator();  while (it.hasNext()) {    addLastImpl(it.next());  }}  }
class C{  @Override public boolean shouldOverrideUrlLoading(WebView view,String location){  if (!turbolinksIsReady || coldBootInProgress) {    return false;  }  long currentOverrideTime=new Date().getTime();  if ((currentOverrideTime - previousOverrideTime) > 500) {    previousOverrideTime=currentOverrideTime;    TurbolinksLog.d("Overriding load: " + location);    visitProposedToLocationWithAction(location,ACTION_ADVANCE);  }  return true;}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_FeatureTypeLibrary_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_FeatureTypeLibrary_name_feature","_UI_FeatureTypeLibrary_type"),SGenPackage.Literals.FEATURE_TYPE_LIBRARY__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static int ETOOMANYREFS(){  return Errno.ETOOMANYREFS.intValue();}  }
class C{  public CertificateResource certificate(){  return certificate;}  }
class C{  public final CC minWidth(String size){  hor.setSize(LayoutUtil.derive(hor.getSize(),ConstraintParser.parseUnitValue(size,true),null,null));  return this;}  }
class C{  public void kill(){  stop=true;  try {    if (server != null) {      server.close();    }  } catch (  IOException e) {  }  try {    if (client != null) {      client.close();    }  } catch (  IOException e) {  }  try {    ss.close();  } catch (  IOException e) {  }}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public static String generateDescriptiveStats(DataSet dataSet,Node variable){  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  int col=dataSet.getColumn(variable);  double[] data=new double[dataSet.getNumRows()];  boolean continuous=false;  if (variable instanceof ContinuousVariable) {    continuous=true;    for (int i=0; i < dataSet.getNumRows(); i++) {      data[i]=dataSet.getDouble(i,col);    }  } else {    try {      for (int i=0; i < dataSet.getNumRows(); i++) {        DiscreteVariable var=(DiscreteVariable)variable;        String category=var.getCategory(dataSet.getInt(i,col));        int value=Integer.parseInt(category);        data[i]=value;      }    } catch (    NumberFormatException e) {      return "Not a numerical discrete column.";    }  }  String result="Descriptive Statistics for: " + variable.getName() + "\n";  result+="------------------------------------\n\n";  double[] normalValues=normalParams(data);  result+="Sample Size:\t\t" + dataSet.getNumRows() + "\n";  result+="Mean:\t\t\t" + nf.format(normalValues[0]) + "\nStandard Deviation:\t"+ nf.format(normalValues[1])+ "\nVariance:\t\t"+ nf.format(normalValues[2])+ "\n";  result+="Skewness:\t\t" + nf.format(StatUtils.skewness(data)) + "\n";  result+="Excess Kurtosis:\t" + nf.format(StatUtils.kurtosis(data)) + "\n";  if (continuous) {    result+="SE Mean:\t\t" + nf.format(standardErrorMean(normalValues[1],dataSet.getNumRows())) + "\n";  }  double[] median=median(data);  result+="Median:\t\t\t" + nf.format(median[0]) + "\n";  if (continuous) {    result+="Minimum Value:\t\t" + nf.format(median[1]) + "\nMaximum Value:\t\t"+ nf.format(median[2]);  }  return result;}  }
class C{  private void cleanupService(){  if (mService != null) {    try {      mContext.unbindService(this);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Unable to unbind from licensing service (already unbound)");    }    mService=null;  }}  }
class C{  public LinkedQueue(){  first=null;  last=null;  n=0;  assert check();}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs && null != m_avts) {    int nAttrs=m_avts.size();    for (int i=(nAttrs - 1); i >= 0; i--) {      AVT avt=(AVT)m_avts.get(i);      avt.callVisitors(visitor);    }  }  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public void startTag(String tag){  writer.println(indent + "<" + tag+ ">");  openTags.push(tag);  indent.append(INDENT_STR);}  }
class C{  public Node(Animator animation){  this.animation=animation;}  }
class C{  public boolean connect(){  if (mService != null)   Log.e(TAG,"Already connected.");  Intent intent=new Intent(GSA_SERVICE).setPackage(GSAState.SEARCH_INTENT_PACKAGE);  return mContext.bindService(intent,mConnection,Context.BIND_AUTO_CREATE);}  }
class C{  private boolean isCharacterEscapable(char c){  return isCharacterQuoteCharacter(c) || isCharacterEscapeCharacter(c);}  }
class C{  public static BufferEntry interrogate(){  return bufferEntry;}  }
class C{  public static double lambMsfn(double sinphi,double cosphi,double e){  sinphi*=e;  return cosphi / Math.sqrt(1.d - sinphi * sinphi);}  }
class C{  protected Script newScript(Document doc){  return new GroovyScript(doc);}  }
class C{  public static String toString(Object object,ToStringStyle style,boolean outputTransients,boolean outputStatics,Class<?> reflectUpToClass){  return new ReflectionToStringBuilder(object,style,null,reflectUpToClass,outputTransients,outputStatics).toString();}  }
class C{  public AndCondition copy(){  AndCondition builder=new AndCondition();  builder.children.addAll(children);  return builder;}  }
class C{  public MarkerShapePainter(Shape shape){  if (shape == null) {    throw new IllegalArgumentException();  }  if (shape instanceof ExtendedShape) {    this.extShape=(ExtendedShape)shape;  } else {    this.extShape=new ShapeExtender(shape);  }}  }
class C{  public static boolean equals(short[] a,short[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length) {    return false;  }  for (int i=0; i < length; i++) {    if (a[i] != a2[i])     return false;  }  return true;}  }
class C{  public Builder alwaysStreamDeletes(){  this.streamDeletes=true;  return this;}  }
class C{  public void destruct(){  if (null != m_obj) {    allowDetachToRelease(true);    detach();    setObject(null);  }}  }
class C{  public void addComment(String comment){  if (frame != null) {    chatTab.addComment(comment);  }  if (tabbedPane.getSelectedIndex() == 2) {    editorTab.displayComment(comment);  }}  }
class C{  public void delete(int key){  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public PDFFile(ByteBuffer buf,PDFPassword password) throws IOException {  this.buf=buf;  cache=new Cache();  parseFile(password);}  }
class C{  public AtomicIntegerArray(int length){  array=new int[length];}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT);  requestUrlBase="/tests/gateleen/monitoredresource";  targetUrlBase="http://localhost:" + MAIN_PORT + SERVER_ROOT+ "/tests/gateleen/targetresource";}  }
class C{  public Track(Context context){  track=new ArrayList<TrackPoint>();  ctx=context;  if (isOpen) {    markSavingBroken("Attempted to open multiple instances of Track - saving disabled",null);  } else {    isOpen=true;    Log.i(TAG,"Opened track");    asyncLoad();  }}  }
class C{  private void doUpdateMapping(String user,String domain,String mapping) throws RecipientRewriteTableException {  doAddMapping(user,domain,mapping);}  }
class C{  private boolean checkInStagingAreaAndFileCache(final CacheKey key){  EncodedImage result=mStagingArea.get(key);  if (result != null) {    result.close();    FLog.v(TAG,"Found image for %s in staging area",key.toString());    mImageCacheStatsTracker.onStagingAreaHit(key);    return true;  } else {    FLog.v(TAG,"Did not find image for %s in staging area",key.toString());    mImageCacheStatsTracker.onStagingAreaMiss();    try {      return mFileCache.hasKey(key);    } catch (    Exception exception) {      return false;    }  }}  }
class C{  public boolean isParameterPresent(String name){  boolean result=false;  if (parameters == null || parameters.get(name) == null) {    String[] values=super.getParameterValues(name);    if (values != null && values.length > 0) {      result=!values[values.length - 1].isEmpty();    }  } else {    result=!parameters.get(name).isEmpty();  }  return result;}  }
class C{  @Override public boolean writeQuality(byte[] qual,int offset,int length) throws IOException {  if (mQualSize + length <= mLimit) {    if (length > 0) {      mQualData.write(qual,offset,length);      mQualSize+=length;      mChecksumQual.update(qual,offset,length);    }    return true;  }  return false;}  }
class C{  private Segment attributeSegment(Attribute attribute){  final Element owner=attribute.getElement();  final byte[] name=attribute.getName().getBytes();  final byte[] value=attribute.getValue().getBytes();  final int attrLeft=indexOfAttributeName(xml,name,owner.start.left + owner.getName().length());  final int valueLeft=indexOf(xml,value,attrLeft + name.length);  return new Segment(attrLeft,valueLeft + value.length);}  }
class C{  public boolean removeChild(Object child){  return this.children.remove(child);}  }
class C{  private void tokenizeAndTag(Tagger tagger,Tweet tweet) throws IOException {  tweet.setWordList(tagger.tokenizeAndTag(tweet.getTweetString()));}  }
class C{  @Ignore("TODO") @Test public void testLocalMaxMemoryInPartitionedRegion() throws Throwable {  Host host=Host.getHost(0);  createVMs(host);  prPrefix=getUniqueName();  int startIndexForRegion=0;  int endIndexForRegion=1;  int startIndexForNode=0;  int endIndexForNode=4;  List vmList=addNodeToList(startIndexForNode,endIndexForNode);  localMaxMemory=1;  createPartitionRegion(vmList,startIndexForRegion,endIndexForRegion,localMaxMemory,redundancy);  putForLocalMaxMemoryInMultiplePR(prPrefix + 0);}  }
class C{  @Override public void run(){  new AnimateAircraftTask().execute();}  }
class C{  @Nullable public VirtualFile selectRoot(){  return isOK() ? (VirtualFile)myGitRootComboBox.getSelectedItem() : null;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.ContentVersionList buildContentVersionList(List<org.smpte_ra.schemas.st2067_2_2016.ContentVersionType> contentVersions){  org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.ContentVersionList contentVersionList=new CompositionPlaylistType.ContentVersionList();  contentVersionList.getContentVersion().addAll(contentVersions);  return contentVersionList;}  }
class C{  public void pause(){  mStatus=Status.PAUSED;  if (Build.VERSION.SDK_INT < 19)   objectAnimatorProgress.end(); else   objectAnimatorProgress.pause();}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  boolean consumed=this.pickGestureDetector.onTouchEvent(event);  if (!consumed) {    return super.onTouchEvent(event);  }  return consumed;}  }
class C{  CompoundInterval(int dfnBegin,int dfnEnd,Register register){  BasicInterval newInterval=new MappedBasicInterval(dfnBegin,dfnEnd,this);  add(newInterval);  reg=register;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  private void createSceneVao(){  int vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(boxes.length * 4 * (3 + 3)* 6* 6);  FloatBuffer fv=bb.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    DemoUtils.triangulateBox(boxes[i],boxes[i + 1],fv);  }  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,4 * (3 + 3),0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);  this.vaoScene=vao;}  }
class C{  public boolean isUseProxy(String hostName){  if (!isUseProxyChain() || isDomainExcludedFromProxy(hostName)) {    return false;  } else {    return true;  }}  }
class C{  public void addListener(final ICodeBookmarkListener listener){  m_listeners.addListener(listener);}  }
class C{  public boolean hasSublineOwner(){  return sublineOwner != null;}  }
class C{  public static GenomeRelationships load(BufferedReader reader) throws IOException {  final GenomeRelationships ped=new GenomeRelationships();  String line;  while ((line=reader.readLine()) != null) {    line=line.trim();    if (line.startsWith("#") || line.matches("^\\s*$")) {      continue;    }    if (line.matches("^genome\\s+[-a-zA-Z0-9_]+(\\s+[-a-zA-Z0-9_]+?=[^\\s]*)*$")) {      parseGenomeLine(ped,line);      continue;    }    if (line.matches("^[a-z]+-[a-z]+\\s+[-a-zA-Z0-9_]+\\s+[-a-zA-Z0-9_]+(\\s+[-a-zA-Z0-9_]+?=[^\\s]*)*$")) {      parseRelationshipLine(ped,line);      continue;    }    throw new NoTalkbackSlimException("unrecognized line in relationships: '" + line + "'");  }  return ped;}  }
class C{  public XjcRdeReport makeReport(String id,DateTime watermark,XjcRdeHeader header,int revision){  XjcRdeReport report=new XjcRdeReport();  report.setId(id);  report.setKind(XjcRdeDepositTypeType.FULL);  report.setCrDate(watermark);  report.setWatermark(watermark);  report.setVersion(ICANN_REPORT_SPEC_VERSION);  report.setRydeSpecEscrow(URI_ESCROW);  report.setRydeSpecMapping(URI_MAPPING);  report.setResend(revision);  report.setHeader(new XjcRdeHeaderElement(header));  return report;}  }
class C{  static void checkIdentifier(final String name,final int start,final int end,final String msg){  if (name == null || (end == -1 ? name.length() <= start : end <= start)) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (!Character.isJavaIdentifierStart(name.charAt(start))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);  }  int max=end == -1 ? name.length() : end;  for (int i=start + 1; i < max; ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);    }  }}  }
class C{  public SWFActions tagDoAction() throws IOException {  startTag(TAG_DOACTION,true);  return factorySWFActions();}  }
class C{  public IpInfo(HttpServletRequest request){  this.address=getClientAddress(request);  if (!address.equals(request.getRemoteAddr())) {    this.forwarded=true;  }}  }
class C{  private void swap(Entry<E> entryA,Entry<E> entryB){  int indexA=entryA.index;  int indexB=entryB.index;  entryA.index=indexB;  entryB.index=indexA;  indexToEntry.set(indexA,entryB);  indexToEntry.set(indexB,entryA);}  }
class C{  public void offer(ByteBuffer buf){  offer(last + 1,buf);}  }
class C{  private void initialize(List<Node> nodes,boolean randomlyInitialized){  setComponentNodes(Collections.unmodifiableList(nodes));  p=new double[nodes.size()][2];  int[][] d;  l=new double[nodes.size()][nodes.size()];  k=new double[nodes.size()][nodes.size()];  if (randomlyInitialized) {    for (int i=0; i < nodes.size(); i++) {      p[i][0]=RandomUtil.getInstance().nextInt(600);      p[i][1]=RandomUtil.getInstance().nextInt(600);    }  } else {    for (int i=0; i < nodes.size(); i++) {      Node node=nodes.get(i);      p[i][0]=node.getCenterX();      p[i][1]=node.getCenterY();    }  }  d=allPairsShortestPath();  for (int i=0; i < nodes.size(); i++) {    for (int j=0; j < nodes.size(); j++) {      if (i == j) {        continue;      }      l[i][j]=getNaturalEdgeLength() * d[i][j];    }  }  for (int i=0; i < nodes.size(); i++) {    for (int j=0; j < nodes.size(); j++) {      if (i == j) {        continue;      }      k[i][j]=getSpringConstant() / (d[i][j] * d[i][j]);    }  }}  }
class C{  public void changeToParentDirectory(){  selectedFile=null;  File oldValue=getCurrentDirectory();  setCurrentDirectory(getFileSystemView().getParentDirectory(oldValue));}  }
class C{  public JFileDataStoreChooser(Shell parent,int style,final FileDataStoreFactorySpi format){  fileDialog=new FileDialog(parent,style);  fileDialog.setFilterExtensions(format.getFileExtensions());}  }
class C{  public void close(){  _client.destroy();}  }
class C{  public void testBug17248345() throws Exception {  if (Util.isJdbc4()) {    return;  }  Connection testConn;  createFunction("testBug17248345","(funccol INT) RETURNS INT DETERMINISTIC RETURN 1");  createProcedure("testBug17248345","(IN proccol INT) SELECT 1");  assertFalse("Property useInformationSchema should be false",((ConnectionProperties)this.conn).getUseInformationSchema());  assertTrue("Property getProceduresReturnsFunctions should be true",((ConnectionProperties)this.conn).getGetProceduresReturnsFunctions());  checkMetaDataInfoForBug17248345(this.conn);  testConn=getConnectionWithProps("useInformationSchema=true");  assertTrue("Property useInformationSchema should be true",((ConnectionProperties)testConn).getUseInformationSchema());  assertTrue("Property getProceduresReturnsFunctions should be true",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkMetaDataInfoForBug17248345(testConn);  testConn.close();  testConn=getConnectionWithProps("getProceduresReturnsFunctions=false");  assertFalse("Property useInformationSchema should be false",((ConnectionProperties)testConn).getUseInformationSchema());  assertFalse("Property getProceduresReturnsFunctions should be false",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkMetaDataInfoForBug17248345(testConn);  testConn.close();  testConn=getConnectionWithProps("useInformationSchema=true,getProceduresReturnsFunctions=false");  assertTrue("Property useInformationSchema should be true",((ConnectionProperties)testConn).getUseInformationSchema());  assertFalse("Property getProceduresReturnsFunctions should be false",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkMetaDataInfoForBug17248345(testConn);  testConn.close();}  }
class C{  void add(Zoneinfo zi){  Map<String,Zone> zones=zi.getZones();  for (  String zoneName : zones.keySet()) {    Zone zone=zones.get(zoneName);    String zonename=zone.getName();    int rawOffset=zone.get(zone.size() - 1).getGmtOffset();    boolean isExcluded=false;    for (int i=0; i < zone.size(); i++) {      ZoneRec zrec=zone.get(i);      if ((zrec.getGmtOffset() != rawOffset) && (zrec.getUntilTime(0) > Time.getCurrentTime())) {        if (excludeList == null) {          excludeList=new ArrayList<String>();        }        excludeList.add(zone.getName());        isExcluded=true;        break;      }    }    if (!rawOffsetsIndex.contains(new Integer(rawOffset))) {      int n=rawOffsetsIndex.size();      int i;      for (i=0; i < n; i++) {        if (rawOffsetsIndex.get(i) > rawOffset) {          break;        }      }      rawOffsetsIndex.add(i,rawOffset);      Set<String> perRawOffset=new TreeSet<String>();      if (!isExcluded) {        perRawOffset.add(zonename);      }      rawOffsetsIndexTable.add(i,perRawOffset);    } else     if (!isExcluded) {      int i=rawOffsetsIndex.indexOf(new Integer(rawOffset));      Set<String> perRawOffset=rawOffsetsIndexTable.get(i);      perRawOffset.add(zonename);    }  }  Map<String,String> a=zi.getAliases();  if (excludeList != null) {    for (    String zoneName : a.keySet()) {      String realname=a.get(zoneName);      if (excludeList.contains(realname)) {        excludeList.add(zoneName);      }    }  }  aliases.putAll(a);}  }
class C{  @Override public void writeUnsigned(long value){  int tail=(int)(value & 0x7f);  writeLong(0,8,tail);}  }
class C{  public Drawable loadIcon(PackageManager pm){  return mService.loadIcon(pm);}  }
class C{  public void testConnect() throws Exception {  System.out.println("<<<<<<<<<<< Look for SSL debug output >>>>>>>>>>>");}  }
class C{  @Override default Eval<OptionalLong> maxLong(final ToLongFunction<? super T> fn){  return Eval.later(null);}  }
class C{  public void paint(Graphics g){  String data=getCurrentTimeString();  if (Debug.debugging("datelayer")) {    System.out.println("DateLayer.paint(): " + data);  }  labelText=data;  super.paint(g);}  }
class C{  synchronized void free(){  if (allocationAddress != 0) {    unsafe.freeMemory(allocationAddress);    allocationAddress=0;  }}  }
class C{  public PdfData(){}  }
class C{  public final static VersionInfo[] loadVersionInfo(String[] pckgs,ClassLoader clsldr){  if (pckgs == null) {    throw new IllegalArgumentException("Package identifier list must not be null.");  }  ArrayList vil=new ArrayList(pckgs.length);  for (int i=0; i < pckgs.length; i++) {    VersionInfo vi=loadVersionInfo(pckgs[i],clsldr);    if (vi != null)     vil.add(vi);  }  return (VersionInfo[])vil.toArray(new VersionInfo[vil.size()]);}  }
class C{  static PageStreamTrunk create(PageStore store,int parent,int pageId,int next,int logKey,int[] pageIds){  return new PageStreamTrunk(store,parent,pageId,next,logKey,pageIds);}  }
class C{  public void removeYTextLabel(double y){  removeYTextLabel(y,0);}  }
class C{  public String toString(){  return detail.toString();}  }
class C{  private void readObject(){}  }
class C{  public void test_fillLjava_util_ListLjava_lang_Object(){  try {    Collections.fill(null,new Object());    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  final int size=ll.size();  Collections.fill(ll,"k");  assertTrue("Fill modified list size",size == ll.size());  Iterator i=ll.iterator();  while (i.hasNext())   assertEquals("Failed to fill elements","k",i.next());  Collections.fill(ll,null);  assertTrue("Fill with nulls modified list size",size == ll.size());  i=ll.iterator();  while (i.hasNext())   assertNull("Failed to fill with nulls",i.next());  Mock_ArrayList mal=new Mock_ArrayList();  mal.add("one");  mal.add("two");  try {    Collections.fill(mal,"value");    fail("UnsupportedOperationException ecpected");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  private QueryParameter calculateEffectiveGalleryContentQuery(QueryParameter rootQuery){  if (rootQuery == null)   return null;  if ((this.mCurrentFilterSettings != null) && MediaScanner.isNoMedia(this.mCurrentFilterSettings.getPath(),MediaScanner.DEFAULT_SCAN_DEPTH)) {    return null;  }  QueryParameter result=new QueryParameter(rootQuery);  FotoSql.setWhereFilter(result,this.mCurrentFilterSettings,!hasUserDefinedQuery());  if (result == null)   return null;  if (mUseLatLonInsteadOfPath) {    FotoSql.addWhereFilterLatLon(result,mCurrentLatLonFromGeoAreaPicker);  } else   if (this.mCurrentPathFromFolderPicker != null) {    FotoSql.addPathWhere(result,this.mCurrentPathFromFolderPicker,this.getDirQueryID());  }  if (mCurrentSortID != FotoSql.SORT_BY_NONE) {    FotoSql.setSort(result,mCurrentSortID,mCurrentSortAscending);  }  return result;}  }
class C{  public void rebootNodeByNodeName(String nodeName){  UriBuilder builder=client.uriBuilder(CONTROL_REBOOT_NODE_URL);  addQueryParam(builder,NODE_NAME_PARAM,nodeName);  client.postURI(String.class,builder.build());}  }
class C{  public void createDatabaseEntitiesForBusinessObjectDataAvailabilityTesting(String partitionKeyGroupName,List<SchemaColumn> columns,List<SchemaColumn> partitionColumns,int partitionColumnPosition,List<String> subPartitionValues,boolean allowDuplicateBusinessObjectData){  createDatabaseEntitiesForBusinessObjectDataAvailabilityTesting(partitionKeyGroupName,columns,partitionColumns,partitionColumnPosition,subPartitionValues,allowDuplicateBusinessObjectData,Arrays.asList(AbstractDaoTest.STORAGE_NAME));}  }
class C{  public IndicesAliasesRequestBuilder addAlias(String[] indices,String alias){  request.addAlias(alias,indices);  return this;}  }
class C{  public boolean isWarmup(){  return getState().isWarmup();}  }
class C{  static long readEpochSec(DataInput in) throws IOException {  int hiByte=in.readByte() & 255;  if (hiByte == 255) {    return in.readLong();  } else {    int midByte=in.readByte() & 255;    int loByte=in.readByte() & 255;    long tot=((hiByte << 16) + (midByte << 8) + loByte);    return (tot * 900) - 4575744000L;  }}  }
class C{  public void remove(){  throw new UnsupportedOperationException("Can't remove keys from KeyStore");}  }
class C{  public NoninvertibleTransformException(String s){  super(s);}  }
class C{  public static void main(String... args) throws SQLException {  new ChangeFileEncryption().runTool(args);}  }
class C{  @SuppressWarnings("unchecked") public final T timeout(TimeValue timeout){  this.timeout=timeout;  return (T)this;}  }
class C{  public boolean implies(Permission p){  return false;}  }
class C{  public static Document toDocument(File file) throws SAXException, IOException {  InputStream in=new BufferedInputStream(new FileInputStream(file));  try {    return XmlUtils.toDocument(in);  }  finally {    in.close();  }}  }
class C{  public byte[] windowNaf(byte width,BigInteger k){  byte[] wnaf=new byte[k.bitLength() + 1];  short pow2wB=(short)(1 << width);  BigInteger pow2wBI=BigInteger.valueOf(pow2wB);  int i=0;  int length=0;  while (k.signum() > 0) {    if (k.testBit(0)) {      BigInteger remainder=k.mod(pow2wBI);      if (remainder.testBit(width - 1)) {        wnaf[i]=(byte)(remainder.intValue() - pow2wB);      } else {        wnaf[i]=(byte)remainder.intValue();      }      k=k.subtract(BigInteger.valueOf(wnaf[i]));      length=i;    } else {      wnaf[i]=0;    }    k=k.shiftRight(1);    i++;  }  length++;  byte[] wnafShort=new byte[length];  System.arraycopy(wnaf,0,wnafShort,0,length);  return wnafShort;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  return "[" + x + ","+ y+ " @ "+ angle+ "]";}  }
class C{  @Override public void serviceResolved(ServiceEvent event){synchronized (this) {    _infos.put(event.getName(),event.getInfo());    _events.remove(event.getName());  }}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public final QuadEdge oPrev(){  return rot.next.rot;}  }
class C{  protected static Vec4 interpolate(int row,int column,double xDec,double yDec,RenderInfo ri){  row++;  column++;  int numVerticesPerEdge=ri.density + 3;  int bottomLeft=row * numVerticesPerEdge + column;  bottomLeft*=3;  int numVertsTimesThree=numVerticesPerEdge * 3;  ri.vertices.position(bottomLeft);  Vec4 bL=new Vec4(ri.vertices.get(),ri.vertices.get(),ri.vertices.get());  Vec4 bR=new Vec4(ri.vertices.get(),ri.vertices.get(),ri.vertices.get());  bottomLeft+=numVertsTimesThree;  ri.vertices.position(bottomLeft);  Vec4 tL=new Vec4(ri.vertices.get(),ri.vertices.get(),ri.vertices.get());  Vec4 tR=new Vec4(ri.vertices.get(),ri.vertices.get(),ri.vertices.get());  return interpolate(bL,bR,tR,tL,xDec,yDec);}  }
class C{  public static String decryptString(CipherTextIvMac civ,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return decryptString(civ,secretKeys,"UTF-8");}  }
class C{  @Override public Response removeSshKey(final String environmentId,final String key){  if (Strings.isNullOrEmpty(environmentId)) {    return Response.status(Response.Status.BAD_REQUEST).entity(JsonUtil.toJson(ERROR_KEY,"Invalid environment id")).build();  } else   if (Strings.isNullOrEmpty(key)) {    return Response.status(Response.Status.BAD_REQUEST).entity(JsonUtil.toJson(ERROR_KEY,"Invalid ssh key")).build();  }  try {    byte[] bytesEncoded=Base64.decodeBase64(key.getBytes());    environmentManager.removeSshKey(environmentId,new String(bytesEncoded).trim(),false);  } catch (  Exception e) {    return Response.serverError().entity(JsonUtil.toJson(ERROR_KEY,e.getMessage())).build();  }  return Response.ok().build();}  }
class C{  public static Object atomUnmarshall(String oDataEntityXml,ODataUri serviceUri) throws UnsupportedEncodingException, ODataException {  EntityDataModel entityDataModel=buildEntityDataModel();  ODataRequest request=buildODataRequestFromString(oDataEntityXml,serviceUri);  ODataRequestContext requestContext=new ODataRequestContext(request,serviceUri,entityDataModel);  return new ODataAtomParser(requestContext,new ODataParserImpl()).getODataEntity();}  }
class C{  @Override public String toString(){  if (m_zeroR != null) {    StringBuffer buf=new StringBuffer();    buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");    buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");    buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");    buf.append(m_zeroR.toString());    return buf.toString();  }  if (m_Tree == null) {    return "RandomTree: no model has been built yet.";  } else {    return "\nRandomTree\n==========\n" + m_Tree.toString(0) + "\n"+ "\nSize of the tree : "+ m_Tree.numNodes()+ (getMaxDepth() > 0 ? ("\nMax depth of tree: " + getMaxDepth()) : (""));  }}  }
class C{  public boolean start(float startScale,float targetScale,float centerX,float centerY){  if (mRunning) {    return false;  }  mCenterX=centerX;  mCenterY=centerY;  mTargetScale=targetScale;  mStartTime=System.currentTimeMillis();  mStartScale=startScale;  mZoomingIn=mTargetScale > mStartScale;  mVelocity=(mTargetScale - mStartScale) / ZOOM_ANIMATION_DURATION;  mRunning=true;  mStop=false;  mHeader.post(this);  return true;}  }
class C{  private List<Pair<String,Object>> toPairList(final Map<String,Object> bindings){  final List<Pair<String,Object>> blist=new ArrayList<Pair<String,Object>>();  for (  final Map.Entry<String,Object> pair : bindings.entrySet()) {    blist.add(new Pair<String,Object>(pair.getKey(),pair.getValue()));  }  return blist;}  }
class C{  @SuppressWarnings("unchecked") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException {  T counter=cache.get(counterKey);  if (counter == null) {    counter=counterType.newInstance();    cache.put(counterKey,counter);  }  return counter;}  }
class C{  public GreaterThanEqualsRule(final Level level){  super();  newLevelInt=level.intValue();}  }
class C{  public static BaseAction parse(String content){  String[] lines=content.split("\n");  for (int i=0; i < lines.length; i++) {    parseLine(lines[i]);  }  BaseAction mainAction=parseAction("main",sMap.get("main"));  return mainAction;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:13.866 -0500",hash_original_method="4E2CA9FC94A5B82D01ACB923AD24E02D",hash_generated_method="16894EF4C9E59BDD4BE588525F38FC7A") private Constructor(Class<T> declaringClass,Class<?>[] ptypes,Class<?>[] extypes,int slot){  this.declaringClass=declaringClass;  this.parameterTypes=ptypes;  this.exceptionTypes=extypes;  this.slot=slot;}  }
class C{  protected void sequence_TerminalExpression(ISerializationContext context,IntLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__OP));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTerminalExpressionAccess().getOpINTEGERTerminalRuleCall_0_1_0(),semanticObject.getOp());  feeder.finish();}  }
class C{  public void intervalRemoved(ListDataEvent e){  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.509 -0500",hash_original_method="56C47BEE54D84D2C2F06C5F3380F6FB5",hash_generated_method="137823E306F1E3181E0323F27A60481E") public ChunkedOutputStream(final SessionOutputBuffer out,int bufferSize) throws IOException {  super();  this.cache=new byte[bufferSize];  this.out=out;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public synchronized void init(Context context,List<Class<?>> objects){  int size=objects.size();  for (int i=0; i < size; i++) {    Class<?> object=objects.get(i);    findTableDetails(context,object);  }}  }
class C{  public HCardParser(String html){  this(html,null);}  }
class C{  protected ReturnPrimitiveTypeImpl(){  super();}  }
class C{  private void traverseReverseLevelOrder(final Tree tree){  Map<Integer,List<DataLikelihoodDelegate.NodeOperation>> operationMap=new HashMap<Integer,List<DataLikelihoodDelegate.NodeOperation>>();  traverseLevelOrder(tree,tree.getRoot(),0,operationMap);  List<Integer> keyList=new ArrayList<Integer>(operationMap.keySet());  Collections.sort(keyList,Collections.reverseOrder());  for (  Integer key : keyList) {    List<DataLikelihoodDelegate.NodeOperation> opList=operationMap.get(key);    for (    DataLikelihoodDelegate.NodeOperation op : opList) {      nodeOperations.add(op);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.397 -0400",hash_original_method="2F58076DE31F8FD3D26AA2A72A4389E9",hash_generated_method="CA514565266853AFE0A0F7138C948F04") protected boolean isLog4JAvailable(){  return isLogLibraryAvailable("Log4J",LOGGING_IMPL_LOG4J_LOGGER);}  }
class C{  private void addVolumesToBlockConsistencyGroup(URI cgUri,List<Volume> volumes){  for (  Volume volume : volumes) {    addVolumeToBlockConsistencyGroup(cgUri,volume);  }}  }
class C{  private static int yy_unpack(String packed,int offset,int[] trans){  int i=0;  int j=offset;  int l=packed.length();  while (i < l) {    int count=packed.charAt(i++);    int value=packed.charAt(i++);    value--;    do     trans[j++]=value; while (--count > 0);  }  return j;}  }
class C{  public Vector4d fma(Vector4dc a,Vector4dc b){  x+=a.x() * b.x();  y+=a.y() * b.y();  z+=a.z() * b.z();  w+=a.w() * b.w();  return this;}  }
class C{  public DataUri(String contentType,byte[] data){  this(contentType,data,null);}  }
class C{  private static String unescapeString(String s){  if (s == null) {    return null;  }  return s.replaceAll("\\\\\\&","\\&");}  }
class C{  public final DoubleGrid3D rint(){  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]=Math.rint(fieldxy[z]);    }  }  return this;}  }
class C{  public boolean hasAttributeHistogram(){  return owner.getExtension(AttributeHistogram.class) != null;}  }
class C{  public synchronized void add(int position,AbstractOption option){  AbstractOption search=getByName(option.getName());  if (search != null) {    LOG.warn("Trying to add an option with an existing name... option not added! Please consult the plugin maintainer!");  } else {    List<AbstractOption> oldOptions=new ArrayList<AbstractOption>(options);    options.add(position,option);    option.setCollection(this);    List<AbstractOption> newOptions=getOptions();    fireIndexedPropertyChange(PROP_OPTIONS,position,oldOptions,newOptions);  }}  }
class C{  public DeleteArguments(){  this(false);}  }
class C{  public static double uniform(){  return random.nextDouble();}  }
class C{  private AbstractTripleStore openTripleStore(final String namespace,final Properties properties){  AbstractTripleStore tripleStore=(AbstractTripleStore)fed.getResourceLocator().locate(namespace,ITx.UNISOLATED);  if (tripleStore == null) {    tripleStore=new ScaleOutTripleStore(fed,namespace,ITx.UNISOLATED,properties);    tripleStore.create();  }  return tripleStore;}  }
class C{  @SuppressLint("Override") public static String formatNumberToE164(String phoneNumber,String defaultCountryIso){  PhoneNumberUtil util=PhoneNumberUtil.getInstance();  String result=null;  try {    Phonenumber.PhoneNumber pn=util.parse(phoneNumber,defaultCountryIso);    if (util.isValidNumber(pn)) {      result=util.format(pn,PhoneNumberUtil.PhoneNumberFormat.E164);    }  } catch (  NumberParseException e) {  }  return result;}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=checkCommon(env,ctx,vset,exp,null,false);  if (id == idSuper && type != Type.tError) {    env.error(where,"undef.var.super",idSuper);  }  return vset;}  }
class C{  public void changeClassLoader(ClassLoader loader){  changedClassLoader=loader;  for (  Statement s : statements) {    s.changeClassLoader(loader);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.487 -0500",hash_original_method="0850F4D1450AC54F93659F0BF07621C5",hash_generated_method="0850F4D1450AC54F93659F0BF07621C5") TFTPDataPacket(DatagramPacket datagram) throws TFTPPacketException {  super(TFTPPacket.DATA,datagram.getAddress(),datagram.getPort());  _data=datagram.getData();  _offset=4;  if (getType() != _data[1])   throw new TFTPPacketException("TFTP operator code does not match type.");  _blockNumber=(((_data[2] & 0xff) << 8) | (_data[3] & 0xff));  _length=datagram.getLength() - 4;  if (_length > MAX_DATA_LENGTH)   _length=MAX_DATA_LENGTH;}  }
class C{  public Future<Pipeline> shutdownAfterEventId(String eventId) throws InterruptedException, ReplicatorException {  ArrayList<Future<ReplDBMSHeader>> taskShutdownFutures=new ArrayList<Future<ReplDBMSHeader>>();  for (int i=0; i < stages.size(); i++) {    taskShutdownFutures.add(stages.get(i).watchForProcessedEventId(eventId,true));  }  return scheduleWait("Offline at native event ID: " + eventId,taskShutdownFutures);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  return builder.build();}  }
class C{  private static int avcLevelToMaxFrameSize(int avcLevel){switch (avcLevel) {case CodecProfileLevel.AVCLevel1:    return 25344;case CodecProfileLevel.AVCLevel1b:  return 25344;case CodecProfileLevel.AVCLevel12:return 101376;case CodecProfileLevel.AVCLevel13:return 101376;case CodecProfileLevel.AVCLevel2:return 101376;case CodecProfileLevel.AVCLevel21:return 202752;case CodecProfileLevel.AVCLevel22:return 414720;case CodecProfileLevel.AVCLevel3:return 414720;case CodecProfileLevel.AVCLevel31:return 921600;case CodecProfileLevel.AVCLevel32:return 1310720;case CodecProfileLevel.AVCLevel4:return 2097152;case CodecProfileLevel.AVCLevel41:return 2097152;case CodecProfileLevel.AVCLevel42:return 2228224;case CodecProfileLevel.AVCLevel5:return 5652480;case CodecProfileLevel.AVCLevel51:return 9437184;default :return -1;}}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.BITWISE_AND_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)newValue);  return;case ExpressionsPackage.BITWISE_AND_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static boolean isWordBoundary(CharSequence singleChar,String wordSeparators){  return TextUtils.isEmpty(singleChar) || wordSeparators.contains(singleChar);}  }
class C{  protected void addPhraseFieldQueries(BooleanQuery query,List<Clause> clauses,ExtendedDismaxConfiguration config) throws SyntaxError {  List<FieldParams> allPhraseFields=config.getAllPhraseFields();  if (allPhraseFields.size() > 0) {    List<Clause> normalClauses=new ArrayList<>(clauses.size());    for (    Clause clause : clauses) {      if (clause.field != null || clause.isPhrase)       continue;      if (clause.isBareWord()) {        String s=clause.val;        if ("OR".equals(s) || "AND".equals(s) || "NOT".equals(s)|| "TO".equals(s))         continue;      }      normalClauses.add(clause);    }    Multimap<Integer,FieldParams> phraseFieldsByWordGram=Multimaps.index(allPhraseFields,WORD_GRAM_EXTRACTOR);    for (    Map.Entry<Integer,Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {      Multimap<Integer,FieldParams> phraseFieldsBySlop=Multimaps.index(phraseFieldsByWordGramEntry.getValue(),PHRASE_SLOP_EXTRACTOR);      for (      Map.Entry<Integer,Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {        addShingledPhraseQueries(query,normalClauses,phraseFieldsBySlopEntry.getValue(),phraseFieldsByWordGramEntry.getKey(),config.tiebreaker,phraseFieldsBySlopEntry.getKey());      }    }  }}  }
class C{  public static void main(String[] args){  double freq=440.0;  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {    StdAudio.play(0.5 * Math.sin(2 * Math.PI * freq* i / StdAudio.SAMPLE_RATE));  }  int[] steps={0,2,4,5,7,9,11,12};  for (int i=0; i < steps.length; i++) {    double hz=440.0 * Math.pow(2,steps[i] / 12.0);    StdAudio.play(note(hz,1.0,0.5));  }  StdAudio.close();  System.exit(0);}  }
class C{  static final String formatForSource(String s,String indent){  StringBuffer buffer=new StringBuffer();  for (int i=0; i < s.length(); ) {    if (i > 0)     buffer.append("+\n");    int limit=buffer.length() + 78;    buffer.append(indent + '"');    while (i < s.length() && buffer.length() < limit) {      char c=s.charAt(i++);      if (c <= '\377') {        buffer.append('\\');        buffer.append(HEX_DIGIT[(c & 0700) >> 6]);        buffer.append(HEX_DIGIT[(c & 0070) >> 3]);        buffer.append(HEX_DIGIT[(c & 0007)]);      } else {        buffer.append("\\u");        buffer.append(HEX_DIGIT[(c & 0xF000) >> 12]);        buffer.append(HEX_DIGIT[(c & 0x0F00) >> 8]);        buffer.append(HEX_DIGIT[(c & 0x00F0) >> 4]);        buffer.append(HEX_DIGIT[(c & 0x000F)]);      }    }    buffer.append('"');  }  return buffer.toString();}  }
class C{  public void register(T listener){  listeners.add(listener);}  }
class C{  public void test_ConstructorLjava_io_FileLjava_lang_String() throws Exception {  RandomAccessFile raf=null;  File tmpFile=new File(fileName);  try {    raf=new java.io.RandomAccessFile(tmpFile,"r");    fail("Test 1: FileNotFoundException expected.");  } catch (  FileNotFoundException e) {  }catch (  IllegalArgumentException e) {    fail("Test 2: Unexpected IllegalArgumentException: " + e.getMessage());  }  tmpFile.createNewFile();  try {    try {      raf=new java.io.RandomAccessFile(tmpFile,"rwd");    } catch (    IllegalArgumentException e) {      fail("Test 3: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(tmpFile,"rws");    } catch (    IllegalArgumentException e) {      fail("Test 4: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(tmpFile,"rw");    } catch (    IllegalArgumentException e) {      fail("Test 5: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(tmpFile,"i");      fail("Test 6: IllegalArgumentException expected.");    } catch (    IllegalArgumentException e) {    }  }  finally {    if (raf != null)     raf.close();    tmpFile.delete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.400 -0500",hash_original_method="0A0703D799D76E700F53E1DA99AB2D69",hash_generated_method="646DD12F25E51B0A987F2D8C2CEBECAF") public String encodeBody(){  return this.getHeaderValue();}  }
class C{  protected SVGOMSwitchElement(){}  }
class C{  public static final Set<Emoticon> filterByType(Set<Emoticon> emotes,Emoticon.Type type){  Set<Emoticon> filtered=new HashSet<>();  for (  Emoticon emote : emotes) {    if (emote.type == type) {      filtered.add(emote);    }  }  return filtered;}  }
class C{  public DSRecord(Name name,int dclass,long ttl,int digestid,DNSKEYRecord key){  this(name,dclass,ttl,key.getFootprint(),key.getAlgorithm(),digestid,DNSSEC.generateDSDigest(key,digestid));}  }
class C{  private void evaluate(String joinClause){  m_joinClause=joinClause;  int indexEqual=joinClause.indexOf('=');  m_left=indexEqual < joinClause.indexOf("(+)");  if (m_left) {    m_mainAlias=joinClause.substring(0,Util.findIndexOf(joinClause,'.','=')).trim();    int end=joinClause.indexOf('.',indexEqual);    if (end == -1)     end=joinClause.indexOf('(',indexEqual);    m_joinAlias=joinClause.substring(indexEqual + 1,end).trim();  } else {    int end=joinClause.indexOf('.',indexEqual);    if (end == -1)     end=joinClause.length();    m_mainAlias=joinClause.substring(indexEqual + 1,end).trim();    m_joinAlias=joinClause.substring(0,Util.findIndexOf(joinClause,'.','(')).trim();  }  m_condition=Util.replace(joinClause,"(+)","").trim();}  }
class C{  public int addStaircasePlot(String name,Color color,double[][] XY){  return ((Plot2DCanvas)plotCanvas).addStaircasePlot(name,color,XY);}  }
class C{  public void run(){  List<IJavaProject> projects=getPossibleAdditions();  ProjectSelectionDialog dialog=new ProjectSelectionDialog(getShell(),projects);  dialog.setTitle("Project Selection");  MultiStatus status=new MultiStatus(Plugin.PLUGIN_ID,IJavaDebugUIConstants.INTERNAL_ERROR,"One or more exceptions occurred while adding projects.",null);  if (dialog.open() == Window.OK) {    Object[] selections=dialog.getResult();    List<IJavaProject> additions=new ArrayList<IJavaProject>(selections.length);    for (int i=0; i < selections.length; i++) {      IJavaProject jp=(IJavaProject)selections[i];      additions.add(jp);    }    List<IRuntimeClasspathEntry> runtimeEntries=new ArrayList<IRuntimeClasspathEntry>(additions.size());    Iterator<IJavaProject> iter=additions.iterator();    while (iter.hasNext()) {      IJavaProject jp=(IJavaProject)iter.next();      runtimeEntries.add(JavaRuntime.newProjectRuntimeClasspathEntry(jp));    }    IRuntimeClasspathEntry[] entries=(IRuntimeClasspathEntry[])runtimeEntries.toArray(new IRuntimeClasspathEntry[runtimeEntries.size()]);    getViewer().addEntries(entries);  }  if (!status.isOK()) {    Plugin.statusDialog(status);  }}  }
class C{  protected void sendDeviceMovedNotification(Device d){  cntDeviceMoved.updateCounterNoFlush();  deviceSyncManager.storeDevice(d);  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();  if (listeners != null) {    for (    IDeviceListener listener : listeners) {      listener.deviceMoved(d);    }  }}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,List<Double> values,XYSeriesRenderer renderer,SupportSeriesRender supportSeriesRender,float yAxisValue,int seriesIndex,int startIndex){  paint.setColor(renderer.getColor());  paint.setStyle(Style.FILL);  int length=points.size();  XYValueSeries series=(XYValueSeries)mDataset.getSeriesAt(seriesIndex);  double max=series.getMaxValue();  double coef=MAX_BUBBLE_SIZE / max;  for (int i=0; i < length; i+=2) {    double size=series.getValue(startIndex + i / 2) * coef + MIN_BUBBLE_SIZE;    drawCircle(canvas,paint,points.get(i),points.get(i + 1),(float)size);  }}  }
class C{  public NewThreeDeeWorldAction(Workspace workspace){  super("3D World",workspace);}  }
class C{  public void testProbabilityValuesFromThePaper(){  List<Integer> nodes=new ArrayList<Integer>();  nodes.add(1);  nodes.add(2);  nodes.add(3);  nodes.add(4);  double unknownProb=1.0 / nodes.size();  MeetingProbabilitySet mps=new MeetingProbabilitySet(1.0,nodes);  assertEquals(unknownProb,mps.getProbFor(1));  assertEquals(unknownProb,mps.getProbFor(2));  mps.updateMeetingProbFor(1);  assertEquals(0.625,mps.getProbFor(1));  assertEquals(0.125,mps.getProbFor(2));}  }
class C{  public boolean isManufactured(){  return isManufactured(false);}  }
class C{  Optional<Route> route(String path){  Map.Entry<String,Route> floor=routes.floorEntry(path);  if (floor != null) {    if (floor.getValue().action().isPrefix() ? path.startsWith(floor.getKey()) : path.equals(floor.getKey())) {      return Optional.of(floor.getValue());    }  }  return Optional.absent();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.084 -0400",hash_original_method="4D0571A7E4FC2D691D4F805227DFD9C3",hash_generated_method="59D764D9F72131F5B8D84FD2CAD70471") public byte[] unwrap(byte[] incoming,int offset,int len) throws SaslException {  throw new IllegalStateException("unwrap: QOP has neither integrity nor privacy>");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.POINT__Z:    return z != null;}return super.eIsSet(featureID);}  }
class C{  public RecordableImpl(long id,String text,int begin,int end,String type){  this.internalId=id;  this.coveredText=text;  this.begin=begin;  this.end=end;  this.typeName=type;}  }
class C{  @Override public void unbind(final ShaderProgram shader){  unbind(shader,null);}  }
class C{  public ComputeElementRestRep register(URI computeElementId){  return client.post(ComputeElementRestRep.class,getIdUrl() + "/register",computeElementId);}  }
class C{  public PLJSONLoader(byte[] jsonData){  super();  mJSONData=jsonData;}  }
class C{  public int currentSegment(double[] coords){  if (index >= poly.npoints) {    return SEG_CLOSE;  }  coords[0]=poly.xpoints[index];  coords[1]=poly.ypoints[index];  if (transform != null) {    transform.transform(coords,0,coords,0,1);  }  return (index == 0 ? SEG_MOVETO : SEG_LINETO);}  }
class C{  public OMWarpingImage(String imagePath,GeoCoordTransformation transform,DataBounds imageBounds) throws MalformedURLException, InterruptedException {  setWarp(imagePath,transform,imageBounds);}  }
class C{  public static RatPoly parse(String polyStr){  RatPoly result=new RatPoly();  StringTokenizer termStrings=new StringTokenizer(polyStr,"+-",true);  boolean nextTermIsNegative=false;  while (termStrings.hasMoreTokens()) {    String termToken=termStrings.nextToken();    if (termToken.equals("-")) {      nextTermIsNegative=true;    } else     if (termToken.equals("+")) {      nextTermIsNegative=false;    } else {      StringTokenizer numberStrings=new StringTokenizer(termToken,"*^",false);      RatNum coeff;      int expt;      String c1=numberStrings.nextToken();      if (c1.equals("x")) {        coeff=new RatNum(1);        if (numberStrings.hasMoreTokens()) {          String N=numberStrings.nextToken();          expt=Integer.parseInt(N);        } else {          expt=1;        }      } else {        String R=c1;        coeff=RatNum.parse(R);        if (numberStrings.hasMoreTokens()) {          String x=numberStrings.nextToken();          if (numberStrings.hasMoreTokens()) {            String N=numberStrings.nextToken();            expt=Integer.parseInt(N);          } else {            expt=1;          }        } else {          expt=0;        }      }      if (nextTermIsNegative) {        coeff=coeff.negate();      }      if (!coeff.equals(new RatNum(0))) {        RatPoly termPoly=new RatPoly();        termPoly.terms.addElement(new RatTerm(coeff,expt));        result=result.add(termPoly);      }    }  }  return result;}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public final void testAllowSpaces(){  boolean allowSpaces=false;  LetterValidator characterValidator=new LetterValidator("foo",Case.CASE_INSENSITIVE,true);  characterValidator.allowSpaces(allowSpaces);  assertEquals(allowSpaces,characterValidator.areSpacesAllowed());}  }
class C{  @Override public synchronized boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof List) {    List<?> list=(List<?>)object;    if (list.size() != elementCount) {      return false;    }    int index=0;    Iterator<?> it=list.iterator();    while (it.hasNext()) {      Object e1=elementData[index++], e2=it.next();      if (!(e1 == null ? e2 == null : e1.equals(e2))) {        return false;      }    }    return true;  }  return false;}  }
class C{  public _QueueOptions(final _QueueOptions_Flag[] flags){  super(flags);}  }
class C{  @RequestMapping(value="/table/datadistribution",method=RequestMethod.POST) public String requestDatadist(HttpServletRequest request,RedirectAttributes redirectAttributes){  Map<String,String[]> params=request.getParameterMap();  String fqdn=params.get("fqdn")[0];  TableEntity tableEntity=tableEntityService.findByFqdn(fqdn);  if (tableEntity == null) {    return "redirect:/notfound";  }  String partition=null;  for (  FieldEntity parameter : tableEntity.getParameters()) {    String val=params.get(parameter.getName())[0];    if (partition == null) {      partition=tableEntity.getUrlPathPrefix() + val;    } else {      partition+="/" + val;    }  }  redirectAttributes.addFlashAttribute("request",request);  redirectAttributes.addAttribute("fqdn",fqdn);  redirectAttributes.addAttribute("selectedPartition",partition);  return "redirect:/table";}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public static void invalidateCachedImage(Path path){  Path cachedFile=getCacheDir().resolve(ImageCache.getMD5(path.toAbsolutePath().toString()) + "." + Utils.getExtension(path));  if (Files.exists(cachedFile)) {    Utils.deleteFileSafely(cachedFile);  }}  }
class C{  protected void updateDefaultDomainName(){  setDefaultDomainNameBasic(computeDefaultDomainName());}  }
class C{  public static MemoryThresholds fromData(DataInput in) throws IOException {  long maxMemoryBytes=in.readLong();  float criticalThreshold=in.readFloat();  float evictionThreshold=in.readFloat();  return new MemoryThresholds(maxMemoryBytes,criticalThreshold,evictionThreshold);}  }
class C{  public static int hash(int value){  return value;}  }
class C{  boolean hadAnnotations(){  return hadAnnotations;}  }
class C{  private User createUserHelper(String userName){  User user=new User();  user.setUserName(userName);  user.setId(idGenerator.getAnotherId());  long time=System.currentTimeMillis();  user.setModTime(time);  user.setCreateTime(time);  db.persistUser(user);  Entry root=createRoot(user,null,Constants.tableofcontents,null,time,time,null);  user.setTableOfContentId(root.getId());  return user;}  }
class C{  private void createOperator(boolean topic,OperatorContext context){  createOperator(topic,context,0);}  }
class C{  public T onunload(String value){  return attr("onunload",value);}  }
class C{  public BOVWBuilder(IndexReader reader,int numDocsForVocabulary){  this.reader=reader;  this.numDocsForVocabulary=numDocsForVocabulary;}  }
class C{  private TimSort(T[] a,Comparator<? super T> c){  this.a=a;  this.c=c;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public void apply(float oldX,float oldY,float newX,float newY){  boolean notLimitedUp=true;  boolean notLimitedBottom=true;  boolean notLimitedLeft=true;  boolean notLimitedRight=true;  if (mChart instanceof XYChart) {    int scales=mRenderer.getScalesCount();    double[] limits=mRenderer.getPanLimits();    boolean limited=limits != null && limits.length == 4;    XYChart chart=(XYChart)mChart;    for (int i=0; i < scales; i++) {      double[] range=getRange(i);      double[] calcRange=chart.getCalcRange(i);      if (limitsReachedX && limitsReachedY && (range[0] == range[1] && calcRange[0] == calcRange[1] || range[2] == range[3] && calcRange[2] == calcRange[3])) {        return;      }      checkRange(range,i);      double[] realPoint=chart.toRealPoint(oldX,oldY,i);      double[] realPoint2=chart.toRealPoint(newX,newY,i);      double deltaX=realPoint[0] - realPoint2[0];      double deltaY=realPoint[1] - realPoint2[1];      double ratio=getAxisRatio(range);      if (chart.isVertical(mRenderer)) {        double newDeltaX=-deltaY * ratio;        double newDeltaY=deltaX / ratio;        deltaX=newDeltaX;        deltaY=newDeltaY;      }      if (mRenderer.isPanXEnabled()) {        if (limits != null) {          if (notLimitedLeft) {            notLimitedLeft=limits[0] <= range[0] + deltaX;          }          if (notLimitedRight) {            notLimitedRight=limits[1] >= range[1] + deltaX;          }        }        if (!limited || (notLimitedLeft && notLimitedRight)) {          setXRange(range[0] + deltaX,range[1] + deltaX,i);          limitsReachedX=false;        } else {          limitsReachedX=true;        }      }      if (mRenderer.isPanYEnabled()) {        if (limits != null) {          if (notLimitedBottom) {            notLimitedBottom=limits[2] <= range[2] + deltaY;          }          if (notLimitedUp) {            notLimitedUp=limits[3] >= range[3] + deltaY;          }        }        if (!limited || (notLimitedBottom && notLimitedUp)) {          setYRange(range[2] + deltaY,range[3] + deltaY,i);          limitsReachedY=false;        } else {          limitsReachedY=true;        }      }    }  } else {    RoundChart chart=(RoundChart)mChart;    chart.setCenterX(chart.getCenterX() + (int)(newX - oldX));    chart.setCenterY(chart.getCenterY() + (int)(newY - oldY));  }  notifyPanListeners();}  }
class C{  public static IMethodBinding findOverriddenMethod(IMethodBinding overriding,boolean testVisibility){  int modifiers=overriding.getModifiers();  if (Modifier.isPrivate(modifiers) || Modifier.isStatic(modifiers) || overriding.isConstructor()) {    return null;  }  ITypeBinding type=overriding.getDeclaringClass();  if (type.getSuperclass() != null) {    IMethodBinding res=findOverriddenMethodInHierarchy(type.getSuperclass(),overriding);    if (res != null && !Modifier.isPrivate(res.getModifiers())) {      if (!testVisibility || isVisibleInHierarchy(res,overriding.getDeclaringClass().getPackage())) {        return res;      }    }  }  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    IMethodBinding res=findOverriddenMethodInHierarchy(interfaces[i],overriding);    if (res != null) {      return res;    }  }  return null;}  }
class C{  public CategoryItemEntity(Shape area,String toolTipText,String urlText,CategoryDataset dataset,Comparable rowKey,Comparable columnKey){  super(area,toolTipText,urlText);  ParamChecks.nullNotPermitted(dataset,"dataset");  this.dataset=dataset;  this.rowKey=rowKey;  this.columnKey=columnKey;  this.series=dataset.getRowIndex(rowKey);  this.category=columnKey;  this.categoryIndex=dataset.getColumnIndex(columnKey);}  }
class C{  public static List<File> scan(List<String> roots,String[] includes,String[] excludes){  List<File> files=new ArrayList<File>();  for (  String root : roots) {    files.addAll(FileUtils.scan(new File(root),includes,excludes));  }  return files;}  }
class C{  public void run(){  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  State state=new State(mInfo,mService);  AndroidHttpClient client=null;  PowerManager.WakeLock wakeLock=null;  int finalStatus=DownloaderService.STATUS_UNKNOWN_ERROR;  try {    PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);    wakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,Constants.TAG);    wakeLock.acquire();    if (Constants.LOGV) {      Log.v(Constants.TAG,"initiating download for " + mInfo.mFileName);      Log.v(Constants.TAG,"  at " + mInfo.mUri);    }    client=AndroidHttpClient.newInstance(userAgent(),mContext);    boolean finished=false;    while (!finished) {      if (Constants.LOGV) {        Log.v(Constants.TAG,"initiating download for " + mInfo.mFileName);        Log.v(Constants.TAG,"  at " + mInfo.mUri);      }      ConnRouteParams.setDefaultProxy(client.getParams(),getPreferredHttpHost(mContext,state.mRequestUri));      HttpGet request=new HttpGet(state.mRequestUri);      try {        executeDownload(state,client,request);        finished=true;      } catch (      RetryDownload exc) {      } finally {        request.abort();        request=null;      }    }    if (Constants.LOGV) {      Log.v(Constants.TAG,"download completed for " + mInfo.mFileName);      Log.v(Constants.TAG,"  at " + mInfo.mUri);    }    finalizeDestinationFile(state);    finalStatus=DownloaderService.STATUS_SUCCESS;  } catch (  StopRequest error) {    Log.w(Constants.TAG,"Aborting request for download " + mInfo.mFileName + ": "+ error.getMessage());    error.printStackTrace();    finalStatus=error.mFinalStatus;  }catch (  Throwable ex) {    Log.w(Constants.TAG,"Exception for " + mInfo.mFileName + ": "+ ex);    finalStatus=DownloaderService.STATUS_UNKNOWN_ERROR;  } finally {    if (wakeLock != null) {      wakeLock.release();      wakeLock=null;    }    if (client != null) {      client.close();      client=null;    }    cleanupDestination(state,finalStatus);    notifyDownloadCompleted(finalStatus,state.mCountRetry,state.mRetryAfter,state.mRedirectCount,state.mGotData,state.mFilename);  }}  }
class C{  public Builder updateDisplayName(String displayName){  this.displayName=displayName;  return this;}  }
class C{  @SuppressWarnings({"SameParameterValue","WeakerAccess"}) public DefaultTerminalFactory(OutputStream outputStream,InputStream inputStream,Charset charset){  this.outputStream=outputStream;  this.inputStream=inputStream;  this.charset=charset;  this.forceTextTerminal=false;  this.autoOpenTerminalFrame=true;  this.title=null;  this.autoCloseTriggers=EnumSet.of(TerminalEmulatorAutoCloseTrigger.CloseOnExitPrivateMode);  this.mouseCaptureMode=null;  this.colorConfiguration=null;  this.deviceConfiguration=null;  this.fontConfiguration=null;}  }
class C{  public boolean isProperDescendentOf(Node node1,Node node2){  throw new UnsupportedOperationException();}  }
class C{  public TupleComparator(int col,Class type,boolean ascend,Comparator c){  m_field=null;  m_col=col;  m_type=type;  m_rev=ascend ? 1 : -1;  m_cmp=c;}  }
class C{  public OrFilter(PacketFilter filter1,PacketFilter filter2){  if (filter1 == null || filter2 == null) {    throw new IllegalArgumentException("Parameters cannot be null.");  }  size=2;  filters=new PacketFilter[2];  filters[0]=filter1;  filters[1]=filter2;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.016 -0400",hash_original_method="43809A7AC1EC70A6E2ACF354BE745AD4",hash_generated_method="914C96230346D24587C82BEC0F895AE4") public final boolean isFatalEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);}  }
class C{  private void useRandomImgChanged(){  JTextField coverFileTextField=this.stegoUI.getEmbedPanel().getCoverFileTextField();  JButton coverFileButton=this.stegoUI.getEmbedPanel().getCoverFileButton();  if (this.randomImgCheckBox.isSelected()) {    CommonUtil.setEnabled(coverFileTextField,false);    coverFileTextField.setText("");    coverFileButton.setEnabled(false);  } else {    CommonUtil.setEnabled(coverFileTextField,true);    coverFileButton.setEnabled(true);    coverFileTextField.requestFocus();  }}  }
class C{  public GVector(ReadonlyVec4D v){  values=new double[]{v.x(),v.y(),v.z(),v.w()};  length=4;}  }
class C{  @Override protected void initData(){}  }
class C{  protected Document createDefaultModel(){  TextDocument doc=new TextDocument();  return doc;}  }
class C{  public ExtensionsTableModel(){  columnNames=new String[3];  columnNames[0]=res.getString("ExtensionsTableModel.CriticalColumn");  columnNames[1]=res.getString("ExtensionsTableModel.NameColumn");  columnNames[2]=res.getString("ExtensionsTableModel.OidColumn");  data=new Object[0][0];}  }
class C{  public static final int[] toIntArray(Instance x,int L){  int y[]=new int[L];  for (int j=0; j < L; j++) {    if (x.isMissing(j)) {      y[j]=-1;    } else {      y[j]=(int)Math.round(x.value(j));    }  }  return y;}  }
class C{  public static Graph convert(String spec){  Graph graph=new EdgeListGraph();  StringTokenizer st1, st2;  for (st1=new StringTokenizer(spec,", "); st1.hasMoreTokens(); ) {    String edgeSpec=st1.nextToken();    st2=new StringTokenizer(edgeSpec,"<>-o ");    String var1=st2.nextToken();    if (var1.startsWith("Latent(")) {      String latentName=(String)var1.subSequence(7,var1.length() - 1);      GraphNode node=new GraphNode(latentName);      node.setNodeType(NodeType.LATENT);      graph.addNode(node);      continue;    }    if (!st2.hasMoreTokens()) {      graph.addNode(new GraphNode(var1));      continue;    }    String var2=st2.nextToken();    if (graph.getNode(var1) == null) {      graph.addNode(new GraphNode(var1));    }    if (graph.getNode(var2) == null) {      graph.addNode(new GraphNode(var2));    }    Node nodeA=graph.getNode(var1);    Node nodeB=graph.getNode(var2);    Edge edge=graph.getEdge(nodeA,nodeB);    if (edge != null) {      throw new IllegalArgumentException("Multiple edges connecting " + "nodes is not supported.");    }    if (edgeSpec.lastIndexOf("-->") != -1) {      graph.addDirectedEdge(nodeA,nodeB);    }    if (edgeSpec.lastIndexOf("<--") != -1) {      graph.addDirectedEdge(nodeB,nodeA);    } else     if (edgeSpec.lastIndexOf("---") != -1) {      graph.addUndirectedEdge(nodeA,nodeB);    } else     if (edgeSpec.lastIndexOf("<->") != -1) {      graph.addBidirectedEdge(nodeA,nodeB);    } else     if (edgeSpec.lastIndexOf("o->") != -1) {      graph.addPartiallyOrientedEdge(nodeA,nodeB);    } else     if (edgeSpec.lastIndexOf("<-o") != -1) {      graph.addPartiallyOrientedEdge(nodeB,nodeA);    } else     if (edgeSpec.lastIndexOf("o-o") != -1) {      graph.addNondirectedEdge(nodeB,nodeA);    }  }  return graph;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  protected List<Operation> addPreOperations(final Operation<?,?> previousOp,final Operation<?,?> currentOp){  if (doesOperationNeedValidating(previousOp,currentOp)) {    return Collections.singletonList((Operation)createValidateOperation((Validatable<?>)currentOp));  }  return Collections.emptyList();}  }
class C{  public void updatePortfolio(com.ib.client.Contract contract,int position,double marketPrice,double marketValue,double averageCost,double unrealizedPNL,double realizedPNL,String accountNumber){  _log.debug("updatePortfolio Account#: " + accountNumber + " contract:"+ contract.m_symbol+ " position:"+ position+ " marketPrice:"+ marketPrice+ " marketValue:"+ marketValue+ " averageCost:"+ averageCost+ " unrealizedPNL:"+ unrealizedPNL+ " realizedPNL:"+ realizedPNL);}  }
class C{  public void multiplyAllValuesBy(final double multiplyBy,final int RoundType){  for (  final T t : keySet()) {    double val=m_values.get(t);switch (RoundType) {case 1:      val=Math.floor(val * multiplyBy);    break;case 2:  val=Math.round(val * multiplyBy);break;case 3:val=Math.ceil(val * multiplyBy);break;default :val=val * multiplyBy;break;}put(t,(int)val);}}  }
class C{  @Override public String toStringMatrix(){  StringBuffer result;  String[][] cells;  int i;  int j;  int n;  int k;  int size;  String line;  int indexBase;  StringBuffer head;  StringBuffer body;  StringBuffer foot;  int[] startMeans;  int[] startSigs;  int maxLength;  result=new StringBuffer();  head=new StringBuffer();  body=new StringBuffer();  foot=new StringBuffer();  cells=toArray();  startMeans=new int[getColCount()];  startSigs=new int[getColCount() - 1];  maxLength=0;  for (n=1; n < cells[0].length; n++) {    size=getColSize(cells,n,true,true);    for (i=1; i < cells.length - 1; i++) {      cells[i][n]=padString(cells[i][n],size,true);    }  }  indexBase=1;  if (getShowStdDev()) {    indexBase++;  }  if (getShowStdDev()) {  }  j=0;  k=0;  for (i=1; i < cells.length - 1; i++) {    if (isAverage(i)) {      body.append(padString("",maxLength).replaceAll(".","-") + "\n");    }    line="";    for (n=0; n < cells[0].length; n++) {      if (i == 1) {        if (isMean(n)) {          startMeans[j]=line.length();          j++;        }        if (isSignificance(n)) {          startSigs[k]=line.length();          k++;        }      }      if (n == 0) {        line+=padString(cells[i][n],getRowNameWidth());        if (!isAverage(i)) {          line+=padString("(" + Utils.doubleToString(getCount(getDisplayRow(i - 1)),0) + ")",getCountWidth(),true);        } else {          line+=padString("",getCountWidth(),true);        }      } else {        if (isMean(n)) {          line+="  ";        }        if (getShowStdDev()) {          if (isMean(n - 1)) {            if (!cells[i][n].trim().equals("")) {              line+="(" + cells[i][n] + ")";            } else {              line+=" " + cells[i][n] + " ";            }          } else {            line+=" " + cells[i][n];          }        } else {          line+=" " + cells[i][n];        }      }      if (n == indexBase) {        line+=" |";      }    }    if (i == 1) {      maxLength=line.length();    }    body.append(line + "\n");  }  line=padString(cells[0][0],startMeans[0]);  i=-1;  for (n=1; n < cells[0].length; n++) {    if (isMean(n)) {      i++;      if (i == 0) {        line=padString(line,startMeans[i] - getCountWidth());      } else       if (i == 1) {        line=padString(line,startMeans[i] - " |".length());      } else       if (i > 1) {        line=padString(line,startMeans[i]);      }      if (i == 1) {        line+=" |";      }      line+=" " + cells[0][n];    }  }  line=padString(line,maxLength);  head.append(line + "\n");  head.append(line.replaceAll(".","-") + "\n");  body.append(line.replaceAll(".","-") + "\n");  if (getColCount() > 1) {    line=padString(cells[cells.length - 1][0],startMeans[1] - 2,true) + " |";    i=0;    for (n=1; n < cells[cells.length - 1].length; n++) {      if (isSignificance(n)) {        line=padString(line,startSigs[i] + 1 - cells[cells.length - 1][n].length());        line+=" " + cells[cells.length - 1][n];        i++;      }    }    line=padString(line,maxLength);  } else {    line=padString(cells[cells.length - 1][0],line.length() - 2) + " |";  }  foot.append(line + "\n");  result.append(head.toString());  result.append(body.toString());  result.append(foot.toString());  return result.toString();}  }
class C{  synchronized public void add(T item,double[] itemCoords,String itemName){  this.addItem(item,itemCoords,itemName);}  }
class C{  public FPTreeRoot(){  super(null,null);}  }
class C{  static public boolean isHighEndGfx(){  MemInfoReader reader=new MemInfoReader();  reader.readMemInfo();  if (reader.getTotalSize() >= (512 * 1024 * 1024)) {    return true;  }  Display display=DisplayManagerGlobal.getInstance().getRealDisplay(Display.DEFAULT_DISPLAY);  Point p=new Point();  display.getRealSize(p);  int pixels=p.x * p.y;  if (pixels >= (1024 * 600)) {    return true;  }  return false;}  }
class C{  public NbtTagString(String name,String value){  super(name);  this.value=value;}  }
class C{  public static short[] join(short[] arrayA,short... arrayB){  if ((arrayB == null) || (arrayB.length == 0)) {    return arrayA;  }  if ((arrayA == null) || (arrayA.length == 0)) {    return arrayB;  }  short[] array=new short[arrayA.length + arrayB.length];  System.arraycopy(arrayA,0,array,0,arrayA.length);  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);  return array;}  }
class C{  public int next(){  int result=_currentNode;  if (result == END)   return DTM.NULL;  if (_nodeType == NULL) {    _currentNode=END;    return returnNode(makeNodeHandle(result));  } else   if (_nodeType >= DTM.NTYPES) {    if (_nodeType == _exptype2(result)) {      _currentNode=END;      return returnNode(makeNodeHandle(result));    }  } else {    if (_nodeType == _type2(result)) {      _currentNode=END;      return returnNode(makeNodeHandle(result));    }  }  return DTM.NULL;}  }
class C{  private static DirectedAcyclicGraph<Action,DefaultEdge> buildComponentGraph(Set<Action> vertices,DirectedAcyclicGraph<Action,DefaultEdge> parentGraph) throws WorkflowGraphException, DirectedAcyclicGraph.CycleFoundException {  DirectedAcyclicGraph<Action,DefaultEdge> subgraph=buildSubgraph(parentGraph,vertices);  Set<Action> initialNodes=new HashSet<>();  for (  Action vertex : subgraph.vertexSet()) {    if (subgraph.inDegreeOf(vertex) == 0) {      initialNodes.add(vertex);    }  }  DirectedAcyclicGraph<Action,DefaultEdge> result=new DirectedAcyclicGraph<>(DefaultEdge.class);  if (initialNodes.isEmpty()) {    throw new WorkflowGraphException("No nodes with inDegree = 0 found.  This shouldn't happen.");  } else   if (initialNodes.size() == 1) {    Action vertex=initialNodes.iterator().next();    result.addVertex(vertex);    subgraph.removeVertex(vertex);  } else {    Pair<Action,Action> forkJoin=addForkJoin(result);    Action fork=forkJoin.getLeft();    Action join=forkJoin.getRight();    for (    Action vertex : initialNodes) {      result.addVertex(vertex);      result.addDagEdge(fork,vertex);      result.addDagEdge(vertex,join);      subgraph.removeVertex(vertex);    }  }  Triple<DirectedAcyclicGraph<Action,DefaultEdge>,Action,Action> subComponentGraphTriple=processSubcomponents(subgraph);  DirectedAcyclicGraph<Action,DefaultEdge> subComponentGraph=subComponentGraphTriple.getLeft();  Action noIncoming=subComponentGraphTriple.getMiddle();  Action noOutgoing=null;  for (  Action vertex : result.vertexSet()) {    if (noOutgoing == null && result.outDegreeOf(vertex) == 0) {      noOutgoing=vertex;    }  }  Graphs.addGraph(result,subComponentGraph);  if (noOutgoing != null && noIncoming != null && !noOutgoing.equals(noIncoming)) {    result.addDagEdge(noOutgoing,noIncoming);  }  return result;}  }
class C{  public SIPObjectList(String lname){  super(lname);}  }
class C{  public void build(){  if (mContext == null) {    throw new RuntimeException("Context not set, please set context");  }  EasyNotification.init(mContext);}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    DataFilter interpolator=new RegressionInterpolator();    DataSet newDataSet=null;    try {      newDataSet=interpolator.filter(dataSet);    } catch (    IllegalArgumentException e1) {      JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Error: " + e1.getMessage());      throw e1;    }    DataModelList list=new DataModelList();    list.add(newDataSet);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else   if (dataModel instanceof ICovarianceMatrix) {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a tabular data set.");  }}  }
class C{  private List<Offer> createUnacceptedOffers(Context ctx){  if (offers != null) {    return offers;  }  TypeToken<List<Offer>> token=new TypeToken<List<Offer>>(){  };  List<Offer> initialOffers=JsonUtils.parseJsonFile(ctx,"offers.json",token);  for (  Offer offer : initialOffers) {    int resId=ctx.getResources().getIdentifier(offer.getIcon(),"drawable",ctx.getPackageName());    offer.setCardIcon(resId);  }  offers=initialOffers;  return offers;}  }
class C{  public Index findLocalTempTableIndex(String name){  if (localTempTableIndexes == null) {    return null;  }  return localTempTableIndexes.get(name);}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, loadingHeader, efficiencyHeader, absorptionHeader, outputHeader;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, c;  double numInNeighbours;  boolean flag=false;  double flowDir;  efficiencyMultiplier=1d;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  loadingHeader=args[1];  efficiencyHeader=args[2];  absorptionHeader=args[3];  outputHeader=args[4];  if (pointerHeader.isEmpty() || outputHeader.isEmpty() || loadingHeader.isEmpty()|| efficiencyHeader.isEmpty()|| absorptionHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    noData=pointer.getNoDataValue();    gridRes=pointer.getCellSizeX();    WhiteboxRaster loading=new WhiteboxRaster(loadingHeader,"r");    if (loading.getNumberRows() != rows || loading.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataLoading=loading.getNoDataValue();    efficiency=new WhiteboxRaster(efficiencyHeader,"r");    if (efficiency.getNumberRows() != rows || efficiency.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataEfficiency=efficiency.getNoDataValue();    if (efficiency.getMaximumValue() > 1) {      efficiencyMultiplier=0.01;    }    absorption=new WhiteboxRaster(absorptionHeader,"r");    if (absorption.getNumberRows() != rows || absorption.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataAbsorption=absorption.getNoDataValue();    double outputNoData=-32768.0;    output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,outputNoData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pointer.getValue(row,col);        if (flowDir != noData && loading.getValue(row,col) != noDataLoading && efficiency.getValue(row,col) != noDataEfficiency && absorption.getValue(row,col) != noDataAbsorption) {          i=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            flowDir=pointer.getValue(y,x);            if (flowDir >= 0 && flowDir <= 360) {              if (c != 3) {                if (flowDir > startFD[c] && flowDir < endFD[c]) {                  i++;                }              } else {                if (flowDir > startFD[c] || flowDir < endFD[c]) {                  i++;                }              }            }          }          tmpGrid.setValue(row,col,i);          output.setValue(row,col,loading.getValue(row,col));        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    loading.close();    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          DinfAccum(row,col);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    efficiency.close();    absorption.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public PKCS9Attributes(DerInputStream in,boolean ignoreUnsupportedAttributes) throws IOException {  this.ignoreUnsupportedAttributes=ignoreUnsupportedAttributes;  derEncoding=decode(in);  permittedAttributes=null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getSTVName();}  }
class C{  public boolean canBeShortAddress(int address){  return !isLongAddress(address);}  }
