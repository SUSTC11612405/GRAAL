class C{  public UDAnimatorSet start(){  final AnimatorSet animatorSet=getAnimatorSet();  if (animatorSet != null && mTarget != null) {    if (!animatorSet.isStarted()) {      setup(animatorSet);      animatorSet.setupStartValues();      animatorSet.start();    }  }  return this;}  }
class C{  public void process(List<Object> appearAttrs,long occurTime){  if (expired) {    throw new IllegalStateException("Expired window can't recieve events");  }switch (status) {case not_sure:    if (occurTime < window.startTime) {      break;    } else     if (occurTime >= window.startTime && occurTime <= window.endTime) {      if (expectAttrs.equals(appearAttrs)) {        status=OccurStatus.occured;      }      break;    } else {      status=OccurStatus.absent;      break;    }case occured:  if (occurTime > window.endTime) {    expired=true;  }break;default :break;}if (status == OccurStatus.absent) {expired=true;}}  }
class C{  public CLEvent copyBytesTo(CLQueue queue,CLBuffer destination,long sourceByteOffset,long destinationByteOffset,long byteCount,CLEvent... eventsToWaitFor){}  }
class C{  public static void loginExpectFailure(TestNodeGroupManager nodeGroup,String username,String password){  ServiceHost peer=nodeGroup.getHost();  loginExpectFailure(peer,username,password);}  }
class C{  public String encode(){  return new StringBuffer(this.headerName).append(COLON).append(SP).append(this.value).append(NEWLINE).toString();}  }
class C{  public void startTerm(BytesRef analyzed){  this.analyzed.copyBytes(analyzed);  this.analyzed.append((byte)endByte);}  }
class C{  @Override public void writeStartDocument() throws XMLStreamException {  log.fine("writeStartDocument()");  writeStartDocument(this.encoding,null);}  }
class C{  @Override public void keyTyped(KeyEvent e){}  }
class C{  String leadingJoinsSerial(){  if (leadingJoins.isEmpty())   return EMPTY;  StringBuilder sb=new StringBuilder();  for (  Divider<T> n : leadingJoins) {    sb.append(n.stringID).append(":");  }  sb.setLength(sb.length() - 1);  return sb.toString();}  }
class C{  public final boolean isNumeric(){  return ((m_Type == NUMERIC) || (m_Type == DATE));}  }
class C{  @Override public void updateBlob(String columnLabel,InputStream x) throws SQLException {  updateBlob(columnLabel,x,-1);}  }
class C{  public synchronized byte[] readBytes(int size){  if (mArray.size() > 0) {    byte[] temp=mArray.toByteArray();    mArray.reset();    byte[] result=new byte[size];    System.arraycopy(temp,0,result,0,size);    if (temp.length != size) {      mArray.write(temp,size,temp.length - size);    }    return result;  } else {    return null;  }}  }
class C{  @Override public void readFile(String name) throws org.jdom2.JDOMException, java.io.IOException {  if (findFile(name) == null) {    log.debug("{} file could not be found",name);    return;  }  Element root=rootFromName(name);  if (root == null) {    log.debug("{} file could not be read",name);    return;  }  EngineModels.instance().load(root);  EngineTypes.instance().load(root);  EngineLengths.instance().load(root);  EngineManager.instance().load(root);  log.debug("Engines have been loaded!");  RollingStockLogger.instance().enableEngineLogging(Setup.isEngineLoggerEnabled());  setDirty(false);  LocationManagerXml.instance().setDirty(false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.477 -0400",hash_original_method="AF5A296444896F1AD517AE5700089864",hash_generated_method="37ECF25E149B9AA3C57FB6FF6EA60F1C") protected static boolean contains(String value,int start,int length,String[] criteria){  boolean result=false;  if (start >= 0 && start + length <= value.length()) {    String target=value.substring(start,start + length);    for (int i=0; i < criteria.length; i++) {      if (target.equals(criteria[i])) {        result=true;        break;      }    }  }  return result;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public boolean match(ArrayCreation node,Object other){  if (!(other instanceof ArrayCreation)) {    return false;  }  ArrayCreation o=(ArrayCreation)other;  return (safeSubtreeMatch(node.getType(),o.getType()) && safeSubtreeListMatch(node.dimensions(),o.dimensions()) && safeSubtreeMatch(node.getInitializer(),o.getInitializer()));}  }
class C{  public E peek(){  return (status == DequeStatus.Empty) ? null : elements[front];}  }
class C{  private boolean hasColor(){  return color != NO_COLOR;}  }
class C{  public void reload(final String svcName) throws LocalRepositoryException {  final String prefix=String.format("reload %s(): ",svcName);  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_RELOAD,svcName};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  public T caseN4FieldDeclaration(N4FieldDeclaration object){  return null;}  }
class C{  public Style(){  this(DEFAULT_FOREGROUND,DEFAULT_BACKGROUND);}  }
class C{  public static String generateUniqueId(){  return System.currentTimeMillis() + "" + String.format("%08d",random.nextInt(100000000));}  }
class C{  @HLEFunction(nid=0x034A921F,version=150) public int sceKernelGetVTimerTime(@CheckArgument("checkVTimerID") int vtimerUid,TPointer64 timeAddr){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  long time=sceKernelVTimerInfo.getCurrentTime();  if (log.isDebugEnabled()) {    log.debug(String.format("sceKernelGetVTimerTime returning %d",time));  }  timeAddr.setValue(time);  return 0;}  }
class C{  public DRLCertFactory(){  super("DRLCertFactory",1.0,"ASN.1, DER, PkiPath, PKCS7");  put("CertificateFactory.X509","org.apache.harmony.security.provider.cert.X509CertFactoryImpl");  put("Alg.Alias.CertificateFactory.X.509","X509");}  }
class C{  public static void printServiceId(ServiceId serviceId,Node parentNode,QName nodeQName) throws Exception {  if (serviceId == null) {    return;  }  XroadServiceIdentifierType type=IdentifierTypeConverter.printServiceId(serviceId);  JAXBElement<XroadServiceIdentifierType> jaxbElement=new JAXBElement<XroadServiceIdentifierType>(nodeQName,XroadServiceIdentifierType.class,type);  getMarshaller().marshal(jaxbElement,parentNode);}  }
class C{  public static void validate(String topicString,boolean wildcardAllowed) throws IllegalStateException, IllegalArgumentException {  int topicLen=0;  try {    topicLen=topicString.getBytes("UTF-8").length;  } catch (  UnsupportedEncodingException e) {    throw new IllegalStateException(e);  }  if (topicLen < MIN_TOPIC_LEN || topicLen > MAX_TOPIC_LEN) {    throw new IllegalArgumentException(String.format("Invalid topic length, should be in range[%d, %d]!",new Object[]{new Integer(MIN_TOPIC_LEN),new Integer(MAX_TOPIC_LEN)}));  }  if (wildcardAllowed) {    if (Strings.equalsAny(topicString,new String[]{MULTI_LEVEL_WILDCARD,SINGLE_LEVEL_WILDCARD})) {      return;    }    if (Strings.countMatches(topicString,MULTI_LEVEL_WILDCARD) > 1 || (topicString.contains(MULTI_LEVEL_WILDCARD) && !topicString.endsWith(MULTI_LEVEL_WILDCARD_PATTERN))) {      throw new IllegalArgumentException("Invalid usage of multi-level wildcard in topic string: " + topicString);    }    validateSingleLevelWildcard(topicString);    return;  }  if (Strings.containsAny(topicString,TOPIC_WILDCARDS)) {    throw new IllegalArgumentException("The topic name MUST NOT contain any wildcard characters (#+)");  }}  }
class C{  private final void initTTimeMatrix(){  log.info("  init hourly ttimeMatrix...");  Set<Id> zids=new HashSet<Id>();  for (  Id zid : l2zMapping.values()) {    zids.add(zid);  }  ttimeMatrix.clear();  for (  Id fzone : zids) {    Map<Id,Tuple<Double,Integer>> tmap=new HashMap<Id,Tuple<Double,Integer>>();    ttimeMatrix.put(fzone,tmap);    for (    Id tzone : zids) {      Tuple<Double,Integer> tuple=new Tuple<Double,Integer>(0.0,0);      tmap.put(tzone,tuple);    }  }  log.info("  done.");}  }
class C{  public static boolean isLevelInfo(){  return Level.INFO.intValue() >= s_currentLevel.intValue();}  }
class C{  protected Token nextToken() throws IOException {  return nextToken(new Token());}  }
class C{  public void resetGLState(){  GLES20.glEnable(GLES20.GL_CULL_FACE);  GLES20.glCullFace(GLES20.GL_BACK);  GLES20.glFrontFace(GLES20.GL_CCW);  GLES20.glDisable(GLES20.GL_BLEND);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);}  }
class C{  protected static void sparseSparseMatmult(MatrixObject output,int transA,int transB,int m,int n,int k,CSRPointer A,CSRPointer B) throws DMLRuntimeException {  LOG.debug(" GPU Sparse-Sparse Matrix Multiply ");  CSRPointer C=CSRPointer.allocateForMatrixMultiply(cusparseHandle,A,transA,B,transB,m,n,k);  ((JCudaObject)output.getGPUObject()).setSparseMatrixCudaPointer(C);  long sizeOfC=CSRPointer.estimateSize(C.nnz,output.getNumRows());  output.getGPUObject().setDeviceModify(sizeOfC);  cusparseDcsrgemm(cusparseHandle,transA,transB,m,n,k,A.descr,(int)A.nnz,A.val,A.rowPtr,A.colInd,B.descr,(int)B.nnz,B.val,B.rowPtr,B.colInd,C.descr,C.val,C.rowPtr,C.colInd);}  }
class C{  @AndroidOnly("RI doesn't throw the specified IAE") public void test_addHandshakeCompletedListener() throws IOException {  SSLSocket ssl=getSSLSocket();  HandshakeCompletedListener ls=new HandshakeCL();  try {    ssl.addHandshakeCompletedListener(null);    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.addHandshakeCompletedListener(ls);  ssl.close();}  }
class C{  public static boolean isReadable(Project project){  final VirtualFileEntry projectFile;  try {    projectFile=project.getBaseFolder().getChild(Constants.CODENVY_PROJECT_FILE_RELATIVE_PATH);    if (projectFile == null || !projectFile.isFile()) {      return false;    }  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  private ByteBuffer generateTestTexture(){  byte[] buf=new byte[TEX_SIZE * TEX_SIZE * BYTES_PER_PIXEL];  final int scale=TEX_SIZE / 4;  for (int i=0; i < buf.length; i+=BYTES_PER_PIXEL) {    int texRow=(i / BYTES_PER_PIXEL) / TEX_SIZE;    int texCol=(i / BYTES_PER_PIXEL) % TEX_SIZE;    int gridRow=texRow / scale;    int gridCol=texCol / scale;    int gridIndex=(gridRow * 4) + gridCol;    int color=GRID[gridIndex];    if (i == 0) {      color=OPAQUE | WHITE;    } else     if (i == buf.length - BYTES_PER_PIXEL) {      color=OPAQUE | WHITE;    }    int red=color & 0xff;    int green=(color >> 8) & 0xff;    int blue=(color >> 16) & 0xff;    int alpha=(color >> 24) & 0xff;    float alphaM=alpha / 255.0f;    buf[i]=(byte)(red * alphaM);    buf[i + 1]=(byte)(green * alphaM);    buf[i + 2]=(byte)(blue * alphaM);    buf[i + 3]=(byte)alpha;  }  ByteBuffer byteBuf=ByteBuffer.allocateDirect(buf.length);  byteBuf.put(buf);  byteBuf.position(0);  return byteBuf;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.137 -0500",hash_original_method="84A18C4D53BD41C8D2778E79004BC913",hash_generated_method="77EF985B7D756EB16928287D57DF5D07") public static void sort(double[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public static String copyTagSetName(AnnotationService aAnnotationService,String importedTagSetName,Project project){  String betterTagSetName="copy_of_" + importedTagSetName;  int i=1;  while (true) {    if (aAnnotationService.existsTagSet(betterTagSetName,project)) {      betterTagSetName="copy_of_" + importedTagSetName + "("+ i+ ")";      i++;    } else {      return betterTagSetName;    }  }}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.writeObject(iInstant);  oos.writeObject(iField.getType());}  }
class C{  public String sqlAction_purgeOrphans(String vendorName,String catalogName,String schemaName,String localTableName,ArrayList<String> localColumnNames,ArrayList<String> foreignKeyNames,ArrayList<String> foreignTableNames,ArrayList<String> foreignColumnNames){  ArrayList<String> translatedLocalColumnNames=new ArrayList<String>();  for (  String columnName : localColumnNames) {    translatedLocalColumnNames.add(normalizeColumnName(vendorName,columnName));  }  ArrayList<String> translatedForeignColumnNames=new ArrayList<String>();  for (  String columnName : foreignColumnNames) {    translatedForeignColumnNames.add(normalizeColumnName(vendorName,columnName));  }  return m_interfaces.get(getDBVendorID(vendorName)).sqlAction_purgeOrphans(catalogName,schemaName,localTableName,translatedLocalColumnNames,foreignKeyNames,foreignTableNames,translatedForeignColumnNames);}  }
class C{  private int processMessage(Message msg) throws Exception {  dumpEnvelope(msg);  dumpBody(msg);  printOut(":::::::::::::::");  printOut(getSubject(msg));  printOut(":::::::::::::::");  printOut(getMessage(msg));  printOut(":::::::::::::::");  String delivery=getDeliveryReport(msg);  printOut(delivery);  printOut(":::::::::::::::");  return ERROR;}  }
class C{  LambdaForm endEdit(){  assert (verifyFirstChange());  for (int i=Math.max(firstChange,arity); i < length; i++) {    Name name=names[i];    if (name == null)     continue;    Name newName=name.replaceNames(originalNames,names,firstChange,i);    if (newName != name) {      names[i]=newName;      if (resultName == name) {        resultName=newName;      }    }  }  assert (inTrans());  flags&=~F_TRANS;  clearDuplicatesAndNulls();  originalNames=null;  if (firstChange < arity) {    Name[] exprs=new Name[arity - firstChange];    int argp=firstChange, exprp=0;    for (int i=firstChange; i < arity; i++) {      Name name=names[i];      if (name.isParam()) {        names[argp++]=name;      } else {        exprs[exprp++]=name;      }    }    assert (exprp == (arity - argp));    System.arraycopy(exprs,0,names,argp,exprp);    arity-=exprp;  }  assert (verifyArity());  return lambdaForm();}  }
class C{  byte[] convert4Index(byte[] data){  final int compCount=4;  if (value == ColorSpaces.DeviceCMYK) {    final int len=data.length;    final byte[] rgb=new byte[len * 3 / 4];    int j2=0;    for (int ii=0; ii < len; ii+=4) {      final float[] vals=new float[4];      for (int j=0; j < 4; j++) {        vals[j]=(data[ii + j] & 255) / 255f;      }      this.setColor(vals,4);      final int foreground=this.currentColor.getRGB();      rgb[j2]=(byte)((foreground >> 16) & 0xFF);      rgb[j2 + 1]=(byte)((foreground >> 8) & 0xFF);      rgb[j2 + 2]=(byte)((foreground) & 0xFF);      j2+=3;      if (len - 4 - ii < 4) {        ii=len;      }    }    return rgb;  }  try {    final int width=data.length / compCount;    final int height=1;    final DataBuffer db=new DataBufferByte(data,data.length);    final WritableRaster raster=Raster.createInterleavedRaster(db,width,height,width * compCount,compCount,bands4,null);    if (CSToRGB == null) {      initCMYKColorspace();      CSToRGB=new ColorConvertOp(cs,rgbCS,ColorSpaces.hints);    }    final WritableRaster rgbRaster=rgbModel.createCompatibleWritableRaster(width,height);    CSToRGB.filter(raster,rgbRaster);    final DataBuffer convertedData=rgbRaster.getDataBuffer();    final int size=width * height * 3;    data=new byte[size];    for (int ii=0; ii < size; ii++) {      data[ii]=(byte)convertedData.getElem(ii);    }  } catch (  final Exception ee) {    LogWriter.writeLog("Exception  " + ee + " converting colorspace");  }  return data;}  }
class C{  public MyHashMap(int initialCapacity,float loadFactorThreshold){  if (initialCapacity > MAXIMUM_CAPACITY)   this.capacity=MAXIMUM_CAPACITY; else   this.capacity=trimToPowerOf2(initialCapacity);  this.loadFactorThreshold=loadFactorThreshold;  table=new LinkedList[capacity];}  }
class C{  void cancelEditing(){  if (TABLE.isEditing()) {    TableCellEditor editor=TABLE.getCellEditor();    editor.cancelCellEditing();  }}  }
class C{  private Message createMessageForMap(Map<?,?> map) throws JMSException {  MapMessage message=getSession().createMapMessage();  for (  Map.Entry<?,?> entry : map.entrySet()) {    if (!(entry.getKey() instanceof String)) {      throw new RuntimeException("Cannot convert non-String key of type [" + entry.getKey().getClass() + "] to JMS MapMessage entry");    }    message.setObject((String)entry.getKey(),entry.getValue());  }  return message;}  }
class C{  public boolean isSipKeepAliveEnabled(){  return readBoolean(RcsSettingsData.SIP_KEEP_ALIVE);}  }
class C{  protected void doPrintHeader(){  append("<html>\n");  append("<head>\n");  append("<title>Predictions for dataset " + sanitize(m_Header.relationName()) + "</title>\n");  append("</head>\n");  append("<body>\n");  append("<div align=\"center\">\n");  append("<h3>Predictions for dataset " + sanitize(m_Header.relationName()) + "</h3>\n");  append("<table border=\"1\">\n");  append("<tr>\n");  if (m_Header.classAttribute().isNominal())   if (m_OutputDistribution)   append("<td>inst#</td><td>actual</td><td>predicted</td><td>error</td><td colspan=\"" + m_Header.classAttribute().numValues() + "\">distribution</td>"); else   append("<td>inst#</td><td>actual</td><td>predicted</td><td>error</td><td>prediction</td>"); else   append("<td>inst#</td><td>actual</td><td>predicted</td><td>error</td>");  if (m_Attributes != null) {    append("<td>");    boolean first=true;    for (int i=0; i < m_Header.numAttributes(); i++) {      if (i == m_Header.classIndex())       continue;      if (m_Attributes.isInRange(i)) {        if (!first)         append("</td><td>");        append(sanitize(m_Header.attribute(i).name()));        first=false;      }    }    append("</td>");  }  append("</tr>\n");}  }
class C{  public HashPrintServiceAttributeSet(PrintServiceAttribute attribute){  super(attribute,PrintServiceAttribute.class);}  }
class C{  public static double gamma(double x){  double P[]={1.60119522476751861407E-4,1.19135147006586384913E-3,1.04213797561761569935E-2,4.76367800457137231464E-2,2.07448227648435975150E-1,4.94214826801497100753E-1,9.99999999999999996796E-1};  double Q[]={-2.31581873324120129819E-5,5.39605580493303397842E-4,-4.45641913851797240494E-3,1.18139785222060435552E-2,3.58236398605498653373E-2,-2.34591795718243348568E-1,7.14304917030273074085E-2,1.00000000000000000320E0};  double p, z;  double q=Math.abs(x);  if (q > 33.0) {    if (x < 0.0) {      p=Math.floor(q);      if (p == q) {        throw new ArithmeticException("gamma: overflow");      }      z=q - p;      if (z > 0.5) {        p+=1.0;        z=q - p;      }      z=q * Math.sin(Math.PI * z);      if (z == 0.0) {        throw new ArithmeticException("gamma: overflow");      }      z=Math.abs(z);      z=Math.PI / (z * stirlingFormula(q));      return -z;    } else {      return stirlingFormula(x);    }  }  z=1.0;  while (x >= 3.0) {    x-=1.0;    z*=x;  }  while (x < 0.0) {    if (x == 0.0) {      throw new ArithmeticException("gamma: singular");    } else     if (x > -1.E-9) {      return (z / ((1.0 + 0.5772156649015329 * x) * x));    }    z/=x;    x+=1.0;  }  while (x < 2.0) {    if (x == 0.0) {      throw new ArithmeticException("gamma: singular");    } else     if (x < 1.e-9) {      return (z / ((1.0 + 0.5772156649015329 * x) * x));    }    z/=x;    x+=1.0;  }  if ((x == 2.0) || (x == 3.0)) {    return z;  }  x-=2.0;  p=polevl(x,P,6);  q=polevl(x,Q,7);  return z * p / q;}  }
class C{  protected static int convertType(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_TYPE_ATTRIBUTE);  if (s.length() == 0) {    return ColorMatrixRable.TYPE_MATRIX;  }  if (SVG_HUE_ROTATE_VALUE.equals(s)) {    return ColorMatrixRable.TYPE_HUE_ROTATE;  }  if (SVG_LUMINANCE_TO_ALPHA_VALUE.equals(s)) {    return ColorMatrixRable.TYPE_LUMINANCE_TO_ALPHA;  }  if (SVG_MATRIX_VALUE.equals(s)) {    return ColorMatrixRable.TYPE_MATRIX;  }  if (SVG_SATURATE_VALUE.equals(s)) {    return ColorMatrixRable.TYPE_SATURATE;  }  throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_TYPE_ATTRIBUTE,s});}  }
class C{  public final int size(){  return m_index + 1;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList elementList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("employee");  expectedResult.add("employeeId");  expectedResult.add("name");  expectedResult.add("position");  expectedResult.add("salary");  expectedResult.add("gender");  expectedResult.add("address");  expectedResult.add("emp:employee");  expectedResult.add("emp:employeeId");  expectedResult.add("emp:position");  expectedResult.add("emp:salary");  expectedResult.add("emp:gender");  expectedResult.add("emp:address");  expectedResult.add("address");  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  elementList=docElem.getElementsByTagNameNS("http://www.nist.gov","*");  for (int indexN1007E=0; indexN1007E < elementList.getLength(); indexN1007E++) {    child=(Node)elementList.item(indexN1007E);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("nodeNames",expectedResult,result);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  name=(String)in.readObject();  cache=new Hashtable();  commands=new Hashtable();  final long max=in.readLong();  final long diff=System.currentTimeMillis() - max;  myContribution=(ContributionBox)in.readObject();  if (myContribution != null)   myContribution.timeStamp=max + diff;  int cachesize=in.readInt();  for (int i=0; i < cachesize; ++i) {    ContributionBox cb=(ContributionBox)in.readObject();    if (cb.timeStamp > max)     throw new IOException("corrupted timestamp in cache: " + cb.timeStamp + " "+ max);    cb.timeStamp+=diff;    cache.put(cb.contributor.name,cb);  }  int commandssize=in.readInt();  for (int i=0; i < commandssize; ++i) {    Object comm=in.readObject();    long time=in.readLong();    if (time > max)     throw new IOException("corrupted timestamp in commands: " + time + " "+ max);    time+=diff;    commands.put(comm,new Long(time));  }}  }
class C{  public Installer on(@NonNull Activity activity){  rootView=(ViewGroup)activity.findViewById(android.R.id.content);  return this;}  }
class C{  private NumberEditor(JSpinner spinner,DecimalFormat format){  super(spinner);  if (!(spinner.getModel() instanceof SpinnerNumberModel)) {    throw new IllegalArgumentException("model not a SpinnerNumberModel");  }  SpinnerNumberModel model=(SpinnerNumberModel)spinner.getModel();  NumberFormatter formatter=new NumberEditorFormatter(model,format);  DefaultFormatterFactory factory=new DefaultFormatterFactory(formatter);  JFormattedTextField ftf=getTextField();  ftf.setEditable(true);  ftf.setFormatterFactory(factory);  ftf.setHorizontalAlignment(JTextField.RIGHT);  try {    String maxString=formatter.valueToString(model.getMinimum());    String minString=formatter.valueToString(model.getMaximum());    ftf.setColumns(Math.max(maxString.length(),minString.length()));  } catch (  ParseException e) {  }}  }
class C{  public static <T>T splitEachLine(Path self,Pattern pattern,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self),pattern,closure);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (trace_entity_1: ");  result.append(trace_entity_1);  result.append(')');  return result.toString();}  }
class C{  public Object parse(String text) throws DataParseException {  try {    StringTokenizer st=new StringTokenizer(text,"\"[](){}, ");    float[] array=new float[st.countTokens()];    for (int i=0; st.hasMoreTokens(); ++i) {      String tok=st.nextToken();      array[i]=Float.parseFloat(tok);    }    return array;  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public RegionImpl(int offset,int length){  fOffset=offset;  fLength=length;}  }
class C{  public static void test(){  int max=12;  int[] elts=new int[5];  for (int i=1; i < max; i++) {    elts[0]=i;    for (int j=1; j < max; j++) {      elts[1]=j;      for (int k=1; k < max; k++) {        elts[2]=k;        for (int m=1; m < max; m++) {          elts[3]=m;          for (int n=1; n < max; n++) {            elts[4]=n;            innerTest(elts,max);          }        }      }    }  }}  }
class C{  @HLEFunction(nid=0x5601A6F0,version=150) public int sceMp4GetAacAu(int mp4,TPointer trackAddr,TPointer auAddr,@CanBeNull TPointer infoAddr){  SceMp4TrackSampleBuf track=new SceMp4TrackSampleBuf();  track.read(trackAddr);  SceMpegAu au=new SceMpegAu();  au.read(auAddr);  if (log.isTraceEnabled()) {    log.trace(String.format("sceMp4GetAacAu track %s, au %s",track,au));  }  if (track.bufSamples.sizeAvailableForRead <= 0) {    if (log.isDebugEnabled()) {      log.debug(String.format("sceMp4GetAacAu returning ERROR_MP4_NO_MORE_DATA"));    }    return SceKernelErrors.ERROR_MP4_NO_MORE_DATA;  }  int sample=track.currentSample - track.bufSamples.sizeAvailableForRead;  int sampleSize=getSampleSize(track.trackType,sample);  int sampleDuration=getSampleDuration(track.trackType,sample);  int samplePresentationOffset=getSamplePresentationOffset(track.trackType,sample);  long frameDuration=sampleToFrameDuration(sampleDuration,track);  long framePresentationOffset=sampleToFrameDuration(samplePresentationOffset,track);  track.bufSamples.notifyRead(1);  track.readBytes(au.esBuffer,sampleSize);  au.esSize=sampleSize;  au.dts=audioCurrentTimestamp;  audioCurrentTimestamp+=frameDuration;  au.pts=au.dts + framePresentationOffset;  if (log.isTraceEnabled()) {    log.trace(String.format("sceMp4GetAacAu consuming one frame of size=0x%X, duration=0x%X, track %s",sampleSize,frameDuration,track));  }  au.write(auAddr);  track.write(trackAddr);  if (infoAddr.isNotNull()) {    SceMp4SampleInfo info=new SceMp4SampleInfo();    info.sample=sample;    info.sampleOffset=getSampleOffset(track.trackType,sample);    info.sampleSize=getSampleSize(track.trackType,sample);    info.unknown1=0;    info.frameDuration=(int)frameDuration;    info.unknown2=0;    info.timestamp1=(int)au.dts;    info.timestamp2=(int)au.pts;    info.write(infoAddr);    if (log.isTraceEnabled()) {      log.trace(String.format("sceMp4GetAacAu returning info=%s",info));    }  }  return 0;}  }
class C{  protected void duplicateClass(DiagnosticPosition pos,ClassSymbol c){  log.error(pos,"duplicate.class",c.fullname);}  }
class C{  public void newProject(){  getProjectUIFacade().createProject(getProject());  fireProjectCreated();}  }
class C{  public void stopScanForPeripherals(){  Timber.d("stopScanForPeripherals");  mIsScanning=false;  mBLEAdapter.stopLeScan(mBLEScanCallback);  if (mOnDeviceDiscoveredListener != null) {    mOnDeviceDiscoveredListener=null;  }  if (mOnScanCompletedListener != null) {    mOnScanCompletedListener.call(mScannedPeripherals);    mOnScanCompletedListener=null;  }}  }
class C{  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q,int maxPoolSize,PoolStatHelper stats,ThreadFactory tf,int msTimeout,RejectedExecutionHandler reh){  super(getCorePoolSize(maxPoolSize),maxPoolSize,msTimeout,TimeUnit.MILLISECONDS,q,tf,reh);  this.stats=stats;}  }
class C{  @InService(SegmentServiceImpl.class) private Type writeCheckpointFull(TableKelp table,OutputStream os,int saveTail) throws IOException {  os.write(getMinKey());  os.write(getMaxKey());  BlockLeaf[] blocks=_blocks;  int index=blocks.length - (saveTail / BLOCK_SIZE);  int rowFirst=saveTail % BLOCK_SIZE;  BitsUtil.writeInt16(os,blocks.length - index);  if (blocks.length <= index) {    return Type.LEAF;  }  blocks[index].writeCheckpointFull(os,rowFirst);  for (int i=index + 1; i < blocks.length; i++) {    blocks[i].writeCheckpointFull(os,0);  }  return Type.LEAF;}  }
class C{  protected final void buffer(char[] buffer){  Objects.requireNonNull(buffer);  _buffer=buffer;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.436 -0500",hash_original_method="DA26E8679FA547BA71428FCE4B001FC5",hash_generated_method="821B809869E5DBFA77CA94C895EDB626") public static String stringFromStringAndTOA(String s,int TOA){  if (s == null)   return null;  if (TOA == TOA_International && s.length() > 0 && s.charAt(0) != '+') {    return "+" + s;  }  return s;}  }
class C{  public void insertChild(IXMLElement child,int index){  if (child == null) {    throw new IllegalArgumentException("child must not be null");  }  if ((child.getName() == null) && (!this.children.isEmpty())) {    IXMLElement lastChild=(IXMLElement)this.children.get(this.children.size() - 1);    if (lastChild.getName() == null) {      lastChild.setContent(lastChild.getContent() + child.getContent());      return;    }  }  ((XMLElement)child).parent=this;  this.children.add(index,child);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected void doParseEventContent(XMLEventParserContext ctx,XMLEvent event,Object... args) throws XMLStreamException {  if (event.isStartElement()) {    XMLEventParser parser=this.allocate(ctx,event);    if (parser == null) {      ctx.firePropertyChange(new XMLParserNotification(ctx,XMLParserNotification.UNRECOGNIZED,event,"XML.UnrecognizedElement",null,event));      parser=ctx.getUnrecognizedElementParser();      QName elementName=event.asStartElement().getName();      if (elementName != null)       ctx.registerParser(elementName,parser);    }    if (parser != null) {      Object o=parser.parse(ctx,event,args);      if (o == null)       return;      this.doAddEventContent(o,ctx,event,args);    }  }}  }
class C{  public void free(){  this.blobContent=null;  this.actualSize=0;}  }
class C{  public boolean isPressedSave(){  boolean result=isSaved;  isSaved=false;  return result;}  }
class C{  public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  String host=origin.getHost().toLowerCase(Locale.ENGLISH);  if (cookie.getDomain() == null) {    throw new MalformedCookieException("Invalid cookie state: " + "domain not specified");  }  String cookieDomain=cookie.getDomain().toLowerCase(Locale.ENGLISH);  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR)) {    if (!cookieDomain.startsWith(".")) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2109: domain must start with a dot");    }    int dotIndex=cookieDomain.indexOf('.',1);    if (((dotIndex < 0) || (dotIndex == cookieDomain.length() - 1)) && (!cookieDomain.equals(".local"))) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: the value contains no embedded dots "+ "and the value is not .local");    }    if (!domainMatch(host,cookieDomain)) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: effective host name does not "+ "domain-match domain attribute.");    }    String effectiveHostWithoutDomain=host.substring(0,host.length() - cookieDomain.length());    if (effectiveHostWithoutDomain.indexOf('.') != -1) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: "+ "effective host minus domain may not contain any dots");    }  } else {    if (!cookie.getDomain().equals(host)) {      throw new MalformedCookieException("Illegal domain attribute: \"" + cookie.getDomain() + "\"."+ "Domain of origin: \""+ host+ "\"");    }  }}  }
class C{  public ExitState createExitState(){  ExitStateImpl exitState=new ExitStateImpl();  return exitState;}  }
class C{  public int hashcode(){  return toString().hashCode();}  }
class C{  public void initDiskCache(){  if (DEBUG) {    Log.d(TAG,"initDiskCache " + this);  }synchronized (mDiskCacheLock) {    if (mDiskLruCache == null || mDiskLruCache.isClosed()) {      if (mDiskCacheDir != null) {        if (!mDiskCacheDir.exists()) {          mDiskCacheDir.mkdirs();        }        try {          mDiskLruCache=DiskLruCache.open(mDiskCacheDir,1,1,mDiskCacheSize);          if (DEBUG) {            Log.d(TAG,"Disk cache initialized " + this);          }        } catch (        final IOException e) {          Log.e(TAG,"initDiskCache - " + e);        }      }    }    mDiskCacheStarting=false;    mDiskCacheReady=true;    mDiskCacheLock.notifyAll();  }}  }
class C{  void genericFailure(){  emitter.emit(this,Core.ALERT.INFO,"Conversion failed for " + getName() + ".");  fail();}  }
class C{  protected void drawDescriptionText(DrawContext dc,Iterable<NodeLayout> nodes){  TreeAttributes attributes=this.getActiveAttributes();  Color color=attributes.getColor();  float[] colorRGB=color.getRGBColorComponents(null);  TextRenderer textRenderer=OGLTextRenderer.getOrCreateTextRenderer(dc.getTextRendererCache(),attributes.getDescriptionFont(),true,false,false);  MultiLineTextRenderer mltr=new MultiLineTextRenderer(textRenderer);  try {    textRenderer.begin3DRendering();    textRenderer.setColor(colorRGB[0],colorRGB[1],colorRGB[2],1);    for (    NodeLayout layout : nodes) {      String description=layout.node.getDescription();      if (description != null) {        String wrappedText=this.computeWrappedText(dc,layout.node,attributes.getDescriptionFont(),(int)(layout.screenBounds.getMaxX() - layout.drawPoint.x));        int vertAdjust=layout.bounds.height - this.lineHeight;        mltr.draw(wrappedText,layout.drawPoint.x,layout.drawPoint.y + vertAdjust);      }    }  }  finally {    textRenderer.end3DRendering();  }}  }
class C{  static synchronized String internUnfoundString(String str){  String s=findInternedString(str);  if (s != null)   return s;  WeakReference<String> ref=new WeakReference<String>(str);  internedStrings.put(str,ref);  return str;}  }
class C{  private Node createCatch(String varName,Node catchCond,Node stmts,int lineno){  if (catchCond == null) {    catchCond=new Node(Token.EMPTY);  }  return new Node(Token.CATCH,createName(varName),catchCond,stmts,lineno);}  }
class C{  void findDeadKeys(Set<String> codeStrings,Set<String> resourceKeys){  String[] prefixes={"compiler.err.","compiler.warn.","compiler.note.","compiler.misc.","javac."};  for (  String rk : resourceKeys) {    if (codeStrings.contains(rk))     continue;    String s=null;    for (int i=0; i < prefixes.length && s == null; i++) {      if (rk.startsWith(prefixes[i])) {        s=rk.substring(prefixes[i].length());      }    }    if (s == null) {      error("Resource key does not start with a standard prefix: " + rk);      continue;    }    if (codeStrings.contains(s))     continue;    if (s.endsWith(".1") && codeStrings.contains(s.substring(0,s.length() - 2)))     continue;    if (s.startsWith("verbose.") && codeStrings.contains(s.substring(8)))     continue;    if (isMandatoryWarningString(s))     continue;    if (knownRequired.contains(rk))     continue;    if (needToInvestigate.contains(rk))     continue;    error("Resource key not found in code: " + rk);  }}  }
class C{  public SVGFontFamily(GVTFontFace fontFace,Element fontElement,BridgeContext ctx){  this.fontFace=fontFace;  this.fontElement=fontElement;  this.ctx=ctx;}  }
class C{  @Deprecated public static String unquoteIdentifier(String string){  if (string != null && string.startsWith("`") && string.endsWith("`") && string.length() >= 2) {    return string.substring(1,string.length() - 1).replace("``","`");  }  return string;}  }
class C{  public static double pdf(double x,double k,double lambda,double theta){  if (x <= theta || x == Double.POSITIVE_INFINITY) {    return 0.;  }  double xl=(x - theta) / lambda;  double p=Math.pow(xl,k - 1), p2=p * -xl;  return p2 != Double.NEGATIVE_INFINITY ? k / lambda * p * Math.exp(p2) : 0.;}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  drawCenteredString(fontRendererObj,"Use Proxy",width / 2,20,0xFFFFFF);  drawString(fontRendererObj,"IP:Port (must be a SOCKS proxy)",width / 2 - 100,47,0xA0A0A0);  drawCenteredString(fontRendererObj,error,width / 2,87,0xFF0000);  String currentProxy=System.getProperty("socksProxyHost") + ":" + System.getProperty("socksProxyPort");  if (currentProxy.equals(":") || currentProxy.equals("null:null"))   currentProxy="none";  drawString(fontRendererObj,"Current proxy: " + currentProxy,width / 2 - 100,97,0xA0A0A0);  proxyBox.drawTextBox();  super.drawScreen(par1,par2,par3);}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  private void clearReplicaFlagsInIngestionContext(RecoverPointVolumeIngestionContext volumeContext,List<Volume> volumes){  for (  Set<DataObject> updatedObjects : volumeContext.getDataObjectsToBeUpdatedMap().values()) {    for (    DataObject updatedObject : updatedObjects) {      if (updatedObject instanceof BlockMirror || updatedObject instanceof BlockSnapshot || updatedObject instanceof BlockSnapshotSession|| (updatedObject instanceof Volume && !NullColumnValueGetter.isNullURI(((Volume)updatedObject).getAssociatedSourceVolume()))) {        _logger.info("Clearing internal volume flag of replica {} of RP volume ",updatedObject.getLabel());        updatedObject.clearInternalFlags(INTERNAL_VOLUME_FLAGS);      }    }  }  List<String> rpVolumes=new ArrayList<String>();  for (  Volume volume : volumes) {    rpVolumes.add(volume.getId().toString());    if (RPHelper.isVPlexVolume(volume,_dbClient) && volumeContext instanceof RpVplexVolumeIngestionContext) {      VplexVolumeIngestionContext vplexVolumeContext=((RpVplexVolumeIngestionContext)volumeContext.getVolumeContext()).getVplexVolumeIngestionContext();      StringSet associatedVolumes=vplexVolumeContext.getAssociatedVolumeIds(volume);      rpVolumes.addAll(associatedVolumes);    }  }  for (  VolumeIngestionContext volumeIngestionContext : volumeContext.getRootIngestionRequestContext().getProcessedUnManagedVolumeMap().values()) {    if (volumeIngestionContext instanceof IngestionRequestContext) {      for (      Set<DataObject> objectsToBeUpdated : ((IngestionRequestContext)volumeIngestionContext).getDataObjectsToBeUpdatedMap().values()) {        for (        DataObject o : objectsToBeUpdated) {          if (o instanceof BlockSnapshot && rpVolumes.contains(((BlockSnapshot)o).getParent().getURI().toString())) {            _logger.info("Clearing internal volume flag of BlockSnapshot {} of RP volume ",o.getLabel());            o.clearInternalFlags(INTERNAL_VOLUME_FLAGS);          } else           if (o instanceof BlockSnapshotSession && rpVolumes.contains(((BlockSnapshotSession)o).getParent().getURI().toString())) {            _logger.info("Clearing internal volume flag of BlockSnapshotSession {} of RP volume ",o.getLabel());            o.clearInternalFlags(INTERNAL_VOLUME_FLAGS);          }        }      }    }  }}  }
class C{  protected void initBPartner(boolean forInvoice) throws Exception {  int AD_Column_ID=3499;  MLookup lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,AD_Column_ID,DisplayType.Search);  bPartnerField=new VLookup("C_BPartner_ID",true,false,true,lookup);  int C_BPartner_ID=Env.getContextAsInt(Env.getCtx(),p_WindowNo,"C_BPartner_ID");  bPartnerField.setValue(new Integer(C_BPartner_ID));}  }
class C{  public synchronized void loadFile(JDBCSequentialFile file) throws SQLException {  connection.setAutoCommit(false);  readLargeObject.setInt(1,file.getId());  try (ResultSet rs=readLargeObject.executeQuery()){    if (rs.next()) {      file.setWritePosition((int)rs.getBlob(1).length());    }    connection.commit();  } catch (  SQLException e) {    connection.rollback();    throw e;  }}  }
class C{  public static double SACCfitness(boolean useTrainingData,GEPIndividual ind){  double ACC=ACCrawFitness(useTrainingData,ind,0);  return (1000.0 * ACC * ACC);}  }
class C{  public void executeQuery(Connection con,String query) throws SQLException {  Statement statement=null;  ResultSet resultSet=null;  try {    statement=con.createStatement();    resultSet=statement.executeQuery(query);    ResultSetMetaData metaData=resultSet.getMetaData();    int columnCount=metaData.getColumnCount();    if (columnCount < 2) {      throw new SQLException("JDBCCategoryDataset.executeQuery() : insufficient columns " + "returned from the database.");    }    int i=getRowCount();    while (--i >= 0) {      removeRow(i);    }    while (resultSet.next()) {      Comparable rowKey=resultSet.getString(1);      for (int column=2; column <= columnCount; column++) {        Comparable columnKey=metaData.getColumnName(column);        int columnType=metaData.getColumnType(column);switch (columnType) {case Types.TINYINT:case Types.SMALLINT:case Types.INTEGER:case Types.BIGINT:case Types.FLOAT:case Types.DOUBLE:case Types.DECIMAL:case Types.NUMERIC:case Types.REAL:{            Number value=(Number)resultSet.getObject(column);            if (this.transpose) {              setValue(value,columnKey,rowKey);            } else {              setValue(value,rowKey,columnKey);            }            break;          }case Types.DATE:case Types.TIME:case Types.TIMESTAMP:{          Date date=(Date)resultSet.getObject(column);          Number value=new Long(date.getTime());          if (this.transpose) {            setValue(value,columnKey,rowKey);          } else {            setValue(value,rowKey,columnKey);          }          break;        }case Types.CHAR:case Types.VARCHAR:case Types.LONGVARCHAR:{        String string=(String)resultSet.getObject(column);        try {          Number value=Double.valueOf(string);          if (this.transpose) {            setValue(value,columnKey,rowKey);          } else {            setValue(value,rowKey,columnKey);          }        } catch (        NumberFormatException e) {        }        break;      }default :    break;}}}fireDatasetChanged();}  finally {if (resultSet != null) {try {resultSet.close();} catch (Exception e) {}}if (statement != null) {try {statement.close();} catch (Exception e) {}}}}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String std=getString(stack);  CaptureDevice cdev=getCapDev(stack);  if (cdev instanceof DShowCaptureDevice) {    ((DShowCaptureDevice)cdev).setDTVStandard(std);  }  return null;}  }
class C{  public void addLine(HeaderCard fcard){  if (fcard != null) {    this.iter.add(fcard);  }}  }
class C{  @Override public float estimateCost(Rule rule){  if (rule != null && rule != Hypothesis.BEGIN_RULE && rule != Hypothesis.END_RULE && (rule.getOwner().equals(owner)))   return weights.getDense(denseFeatureIndex) * value;  return 0.0f;}  }
class C{  public void onDestroy(){  this.stopSensorialRotation();  this.deactiveOrientation();  this.deactiveAccelerometer();  this.stopAnimation();  mFileDownloaderManager.removeAll();  if (mPanorama != null)   mPanorama.clear();  List<PLIReleaseView> releaseViewObjects=new ArrayList<PLIReleaseView>();  releaseViewObjects.add(mPanorama);  releaseViewObjects.add(mRenderer);  releaseViewObjects.add(mInternalCameraListener);  releaseViewObjects.add(mCurrentTransition);  releaseViewObjects.addAll(mInternalTouches);  releaseViewObjects.addAll(mCurrentTouches);  for (  PLIReleaseView releaseViewObject : releaseViewObjects)   if (releaseViewObject != null)   releaseViewObject.releaseView();  releaseViewObjects.clear();}  }
class C{  private Range calculateYDataRange(float[][] data){  Range result=null;  if (data != null) {    float lowest=Float.POSITIVE_INFINITY;    float highest=Float.NEGATIVE_INFINITY;    for (int i=0; i < data[0].length; i++) {      float v=data[1][i];      if (v < lowest) {        lowest=v;      }      if (v > highest) {        highest=v;      }    }    if (lowest <= highest) {      result=new Range(lowest,highest);    }  }  return result;}  }
class C{  @Override public void connectFailed(URI uri,SocketAddress socketAddress,IOException ioException){}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  put(index,new Long(value));  return this;}  }
class C{  public void stop() throws IOException, InstanceNotFoundException {  try {    this.connection.invoke(this.objectName,"shutdown",null,null);  } catch (  ReflectionException ex) {    throw new JmxException("Shutdown failed",ex.getCause());  }catch (  MBeanException ex) {    throw new JmxException("Could not invoke shutdown operation",ex);  }}  }
class C{  public void checkValid(Factory factory) throws ApiException {  if (null == factory) {    throw new ConflictException(FactoryConstants.UNPARSABLE_FACTORY_MESSAGE);  }  if (factory.getV() == null) {    throw new ConflictException(FactoryConstants.INVALID_VERSION_MESSAGE);  }  Version v;  try {    v=Version.fromString(factory.getV());  } catch (  IllegalArgumentException e) {    throw new ConflictException(FactoryConstants.INVALID_VERSION_MESSAGE);  }  Class usedFactoryVersionMethodProvider;switch (v) {case V2_0:    usedFactoryVersionMethodProvider=FactoryV2_0.class;  break;case V2_1:usedFactoryVersionMethodProvider=FactoryV2_1.class;break;default :throw new ConflictException(FactoryConstants.INVALID_VERSION_MESSAGE);}validateCompatibility(factory,Factory.class,usedFactoryVersionMethodProvider,v,"");}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  private void saveTouchStart(MotionEvent event){  mSavedMatrix.set(mMatrix);  mTouchStartPoint.set(event.getX(),event.getY());  mClosestDataSetToTouch=mChart.getDataSetByTouchPoint(event.getX(),event.getY());}  }
class C{  public boolean isOpen(){  return getConfig() != null;}  }
class C{  DomainEmitter emitAwipMessage(){  return emitRawLine(ICANN_AWIP_INFO_MESSAGE);}  }
class C{  private final void handleHttpWorkerResponse(ResponseOnSingeRequest respOnSingleReq) throws Exception {  String responseContent=respOnSingleReq.getResponseBody();  response.setResponseContent(respOnSingleReq.getResponseBody());  if (request.isPollable()) {    boolean scheduleNextPoll=false;    boolean errorFindingUuid=false;    if (!pollerData.isUuidHasBeenSet()) {      String jobId=httpPollerProcessor.getUuidFromResponse(respOnSingleReq);      if (jobId.equalsIgnoreCase(PcConstants.NA)) {        errorFindingUuid=true;        pollingErrorCount++;        logger.error("!!POLLING_JOB_FAIL_FIND_JOBID_IN_RESPONSE!! FAIL FAST NOW. PLEASE CHECK getJobIdRegex or retry. " + "DEBUG: REGEX_JOBID: " + httpPollerProcessor.getJobIdRegex() + "RESPONSE: "+ respOnSingleReq.getResponseBody()+ " polling Error count"+ pollingErrorCount+ " at "+ PcDateUtils.getNowDateTimeStrStandard());        pollerData.setError(true);        pollerData.setComplete(true);      } else {        pollerData.setJobIdAndMarkHasBeenSet(jobId);        pollerData.setError(httpPollerProcessor.ifThereIsErrorInResponse(respOnSingleReq));      }    }    if (!pollerData.isError()) {      pollerData.setComplete(httpPollerProcessor.ifTaskCompletedSuccessOrFailureFromResponse(respOnSingleReq));      pollerData.setCurrentProgress(httpPollerProcessor.getProgressFromResponse(respOnSingleReq));    }    scheduleNextPoll=!pollerData.isComplete() && (pollingErrorCount <= httpPollerProcessor.getMaxPollError());    if (scheduleNextPoll && (pollingErrorCount <= httpPollerProcessor.getMaxPollError())) {      pollMessageCancellable=getContext().system().scheduler().scheduleOnce(Duration.create(httpPollerProcessor.getPollIntervalMillis(),TimeUnit.MILLISECONDS),getSelf(),OperationWorkerMsgType.POLL_PROGRESS,getContext().system().dispatcher(),getSelf());      logger.info("\nPOLLER_NOW_ANOTHER_POLL: POLL_RECV_SEND" + String.format("PROGRESS:%.3f, BODY:%s ",pollerData.getCurrentProgress(),responseContent,PcDateUtils.getNowDateTimeStrStandard()));      String responseContentNew=errorFindingUuid ? responseContent + "_PollingErrorCount:" + pollingErrorCount : responseContent;      logger.info(responseContentNew);      pollerData.getPollingHistoryMap().put("RECV_" + PcDateUtils.getNowDateTimeStrConciseNoZone(),String.format("PROGRESS:%.3f, BODY:%s",pollerData.getCurrentProgress(),responseContent));      return;    } else {      pollerData.getPollingHistoryMap().put("RECV_" + PcDateUtils.getNowDateTimeStrConciseNoZone(),String.format("POLL_COMPLETED_OR_ERROR: PROGRESS:%.3f, BODY:%s ",pollerData.getCurrentProgress(),responseContent));    }  }  reply(respOnSingleReq.isFailObtainResponse(),respOnSingleReq.getErrorMessage(),respOnSingleReq.getStackTrace(),respOnSingleReq.getStatusCode(),respOnSingleReq.getStatusCodeInt(),respOnSingleReq.getReceiveTime(),respOnSingleReq.getResponseHeaders());}  }
class C{  public void add(K key,int numReferences){  Integer value=refSet.get(key);  if (value == null) {    refSet.put(key,numReferences);    return;  }  throw new IllegalArgumentException("Key '" + key + "' already in collection");}  }
class C{  public GetResponseMessage(GetResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetValues()) {    List<VersionedValue> __this__values=new ArrayList<VersionedValue>();    for (    VersionedValue other_element : other.values) {      __this__values.add(new VersionedValue(other_element));    }    this.values=__this__values;  }  if (other.isSetError()) {    this.error=new SyncError(other.error);  }}  }
class C{  private static int select(double[] array,int[] index,int left,int right,int k){  int diff=right - left;switch (diff) {case 0:    return left;case 1:  conditionalSwap(array,index,left,right);return left + k - 1;case 2:conditionalSwap(array,index,left,left + 1);conditionalSwap(array,index,left,right);conditionalSwap(array,index,left + 1,right);return left + k - 1;default :int pivotLocation=sortLeftRightAndCenter(array,index,left,right);swap(index,pivotLocation,right - 1);int center=partition(array,index,left,right,array[index[right - 1]]);swap(index,center,right - 1);if ((center - left + 1) >= k) {return select(array,index,left,center,k);} else {return select(array,index,center + 1,right,k - (center - left + 1));}}}  }
class C{  public SVGOMAnimatedTransformList(AbstractElement elt,String ns,String ln,String defaultValue){  super(elt,ns,ln);  this.defaultValue=defaultValue;}  }
class C{  public static Entity entityFromZoneByID(final int objectId,final StendhalRPZone zone){  final RPObject.ID targetid=new RPObject.ID(objectId,zone.getID());  if (zone.has(targetid)) {    final RPObject object=zone.get(targetid);    if (object instanceof Entity) {      return (Entity)object;    }  }  return null;}  }
class C{  public Promise<T> onErrorReturn(final Promise<T> other){  return new Promise<T>(this.observable.onErrorResumeNext(other.observable));}  }
class C{  public double[][] adapatedStrongEigenvectors(){  if (adapatedStrongEigenvectors == null) {    final double[][] ev=getEigenvectors();    adapatedStrongEigenvectors=times(times(ev,e_czech),identity(ev.length,strongEigenvalues.length));  }  return adapatedStrongEigenvectors;}  }
class C{  @Override protected void _mouseClickedDrawable(MouseEvent ev,Drawable drawable){  Diagram diag=tab.getDiagram();  if (diag != null) {    Integer pos=(Integer)diag.getStateForDrawable(drawable);    if (pos != null) {      tab.moveCursorToPosition(pos);    }  }  if (drawable instanceof Note) {    Note note=(Note)drawable;    URI link=note.getLink();    if (link != null) {      File current=tab.getFile();      File linked;      if (link.isAbsolute()) {        linked=new File(link);      } else       if (current != null) {        linked=new File(current.toURI().resolve(link));      } else {        return;      }      if (!tab.get_UI().selectTabWith(linked)) {        try {          Editor.getEditor().load(linked.toURI().toURL());        } catch (        RuntimeException e) {          throw e;        }catch (        Exception e) {          tab.get_UI().errorMessage(e,null,null);        }      }    }  }}  }
class C{  public final AC shrinkWeight(float w,int... indexes){  return shrink(w,indexes);}  }
class C{  public void validateExpectedPartitionValueInformation(String expectedPartitionKeyGroupName,String expectedExpectedPartitionValue,ExpectedPartitionValueInformation actualExpectedPartitionValueInformation){  assertNotNull(actualExpectedPartitionValueInformation);  assertEquals(expectedPartitionKeyGroupName,actualExpectedPartitionValueInformation.getExpectedPartitionValueKey().getPartitionKeyGroupName());  assertEquals(expectedExpectedPartitionValue,actualExpectedPartitionValueInformation.getExpectedPartitionValueKey().getExpectedPartitionValue());}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  public void toFront(final WorkflowAnnotation anno){  if (anno == null) {    throw new IllegalArgumentException("anno must not be null!");  }  model.getProcessAnnotations(anno.getProcess()).toFront(anno);  fireProcessUpdate(anno);  model.fireAnnotationMiscChanged(anno);}  }
class C{  public int next(){  final int node=_currentNode;  _currentNode=NULL;  return returnNode(node);}  }
class C{  public EnumConstantNotPresentException(Class<? extends Enum> enumType,String constantName){  super(enumType.getName() + "." + constantName);  this.enumType=enumType;  this.constantName=constantName;}  }
class C{  private Object executeIn(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  int len=expression.nbOperands();  Object left=executeExp(pc,sql,qr,expression.getOperand(0),row);  for (int i=1; i < len; i++) {    if (Operator.compare(left,executeExp(pc,sql,qr,expression.getOperand(i),row)) == 0)     return Boolean.TRUE;  }  return Boolean.FALSE;}  }
class C{  public void cancelSelection(){  returnValue=CANCEL_OPTION;  if (dialog != null) {    dialog.setVisible(false);  }  fireActionPerformed(CANCEL_SELECTION);}  }
class C{  public View initView(){  LayoutInflater inflate=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  View mRoot=inflate.inflate(R.layout.now_playing_controls_view,null);  addView(mRoot);  initControllerView(mRoot);  mHandler.sendEmptyMessage(SHOW_PROGRESS);  return mRoot;}  }
class C{  public static List<WebElement> findElementsClickableAfter(SearchContext parent,By by,int waitInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(by);  findElementClickableAfter(parent,by,waitInSeconds);  return parent.findElements(by).stream().filter(null).collect(Collectors.toList());}  }
class C{  @Override public void CALL_RESULT(boolean res,String owner,String name,String desc){  CALL_RESULT(owner,name,desc);  if (env.topFrame().weInvokedInstrumentedCode()) {    return;  } else {    int i=res ? 1 : 0;    IntegerConstant value=ExpressionFactory.buildNewIntegerConstant(i);    env.topFrame().operandStack.pushBv32(value);  }}  }
class C{  public void index(final Revision rev) throws WikiApiException {  int articleID=rev.getArticleID();  int fullRevisionID=rev.getFullRevisionID();  int revisionCounter=rev.getRevisionCounter();  if (articleID != currentArticleID) {    if (lastRev != null) {      info.setEndRevisionCount(lastRev.getRevisionCounter());      this.infoList.add(info);      try {        this.articleIndex.add(currentArticleID,startTime,endTime,infoList);        send();      } catch (      SQLException sql) {        sql.printStackTrace();        throw new WikiApiException(sql);      }catch (      IOException sql) {        sql.printStackTrace();        throw new WikiApiException(sql);      }    }    if (revisionCounter != 1) {      System.err.println("WARNING : ArticleID (" + articleID + ") RevisionCounter 1 expected - "+ revisionCounter+ " read");    }    startTime=Long.MAX_VALUE;    endTime=Long.MIN_VALUE;    currentArticleID=articleID;    currentFullRevisionID=fullRevisionID;    info=new ArticleIndexData();    info.setFullRevisionPrimaryKey(rev.getPrimaryKey());    info.setStartRevisionCount(rev.getRevisionCounter());  } else   if (fullRevisionID != currentFullRevisionID) {    if (lastRev.getRevisionCounter() + 1 != revisionCounter) {      System.err.println("WARNING : ArticleID (" + articleID + ")"+ " RevisionCounter "+ (lastRev.getRevisionCounter() + 1)+ " expected - "+ revisionCounter+ " read");    }    info.setEndRevisionCount(lastRev.getRevisionCounter());    this.infoList.add(info);    currentFullRevisionID=fullRevisionID;    info=new ArticleIndexData();    info.setFullRevisionPrimaryKey(rev.getPrimaryKey());    info.setStartRevisionCount(rev.getRevisionCounter());  } else   if (lastRev.getRevisionCounter() + 1 != revisionCounter) {    System.err.println("WARNING : ArticleID (" + articleID + ")"+ " RevisionCounter "+ (lastRev.getRevisionCounter() + 1)+ " expected - "+ revisionCounter+ " read");  }  this.startTime=Math.min(rev.getTimeStamp().getTime(),startTime);  this.endTime=Math.max(rev.getTimeStamp().getTime(),endTime);  revisionIndex.add(rev.getRevisionID(),rev.getPrimaryKey(),info.getFullRevisionPrimaryKey());  chronoIndex.add(articleID,rev.getRevisionCounter(),rev.getTimeStamp().getTime());  lastRev=rev;}  }
class C{  public BindException(){}  }
class C{  @Override public void close(){  if (clientHandle == null) {    System.out.println(serverURI);    System.out.println(clientId);    System.out.println(myContext.getApplicationInfo().packageName);    System.out.println(persistence);    clientHandle=mqttService.getClient(serverURI,clientId,myContext.getApplicationInfo().packageName,persistence);  }  mqttService.close(clientHandle);}  }
class C{  public static String generateNativeGuid(Hashtable<String,String> cimIndication) throws IOException {  String nativeGuid=cimIndication.get(CIMConstants.SOURCE_INSTANCE_MODEL_PATH_COMPOSITE_ID);  _logger.debug("Native Guid recieved as part of indication : {}",nativeGuid);  if (nativeGuid != null && nativeGuid.indexOf(CIMConstants.CLARIION_PREFIX) != -1) {    nativeGuid=nativeGuid.replace(CIMConstants.CLARIION_PREFIX,CIMConstants.CLARIION_PREFIX_TO_UPPER);  }  if (nativeGuid != null) {    nativeGuid=nativeGuid.replace("/",CIMConstants.VOLUME_PREFIX);  }  _logger.debug("Bourne format NativeGuid computed : {}",nativeGuid);  return nativeGuid;}  }
class C{  public boolean hasInactive(){  return m_hasInactive;}  }
class C{  public final void testIsStatePreserved1(){  RSAOtherPrimeInfo[] opi1=opi.clone();  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi1);  opi1[2]=new RSAOtherPrimeInfo(BigInteger.ZERO,BigInteger.ZERO,BigInteger.ZERO);  assertTrue(checkOtherPrimeInfo(ks.getOtherPrimeInfo()));}  }
class C{  public void addDependencies(ArrayList<String> list){  if (!m_vo.IsDisplayed || m_vo.DisplayLogic.equals(""))   return;  StringTokenizer logic=new StringTokenizer(m_vo.DisplayLogic.trim(),"&|",false);  while (logic.hasMoreTokens()) {    StringTokenizer st=new StringTokenizer(logic.nextToken().trim(),"!=^",false);    while (st.hasMoreTokens()) {      String tag=st.nextToken().trim();      if (tag.indexOf('@') != -1) {        tag=tag.replace('@',' ').trim();        if (!list.contains(tag))         list.add(tag);      }    }  }}  }
class C{  public T caseAccessibleTypeElement(AccessibleTypeElement object){  return null;}  }
class C{  public void mouseDragged(MouseEvent e){  ((MouseMotionListener)a).mouseDragged(e);  ((MouseMotionListener)b).mouseDragged(e);}  }
class C{  public void waitAndRetry(){  ContinueToSendToBatchSenderAsstManager continueToSendToBatchSenderAsstManager=new ContinueToSendToBatchSenderAsstManager(processedWorkerCount);  logger.debug("NOW WAIT Another " + asstManagerRetryIntervalMillis + " MS. at "+ PcDateUtils.getNowDateTimeStrStandard());  getContext().system().scheduler().scheduleOnce(Duration.create(asstManagerRetryIntervalMillis,TimeUnit.MILLISECONDS),getSelf(),continueToSendToBatchSenderAsstManager,getContext().system().dispatcher(),getSelf());  return;}  }
class C{  public boolean isFinished(){  return mScroller.isFinished();}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void onContactSelected(Uri contactUri){  Long contactId=ContactUtils.getContactId(getContentResolver(),contactUri);  Map<String,String> phoneNumbers=ContactUtils.getPhoneNumbers(getApplicationContext(),contactId);  if (phoneNumbers.isEmpty()) {    Toast toast=Toast.makeText(this.getApplicationContext(),R.string.phone_number_not_present,Toast.LENGTH_SHORT);    toast.setGravity(Gravity.CENTER,0,0);    toast.show();    return;  }  Intent intent=new Intent();  intent.putExtra(CONTACT_ID,contactId);  intent.setData(contactUri);  finishActivity(intent);}  }
class C{  String sourceFormForAnnotation(AnnotationMirror annotationMirror){  StringBuilder sb=new StringBuilder();  new AnnotationSourceFormVisitor().visitAnnotation(annotationMirror,sb);  return sb.toString();}  }
class C{  private LinkedList<Diff> diff_lineMode(String text1,String text2,long deadline){  LinesToCharsResult b=diff_linesToChars(text1,text2);  text1=b.chars1;  text2=b.chars2;  List<String> linearray=b.lineArray;  LinkedList<Diff> diffs=diff_main(text1,text2,false,deadline);  diff_charsToLines(diffs,linearray);  diff_cleanupSemantic(diffs);  diffs.add(new Diff(Operation.EQUAL,""));  int count_delete=0;  int count_insert=0;  String text_delete="";  String text_insert="";  ListIterator<Diff> pointer=diffs.listIterator();  Diff thisDiff=pointer.next();  while (thisDiff != null) {switch (thisDiff.operation) {case INSERT:      count_insert++;    text_insert+=thisDiff.text;  break;case DELETE:count_delete++;text_delete+=thisDiff.text;break;case EQUAL:if (count_delete >= 1 && count_insert >= 1) {pointer.previous();for (int j=0; j < count_delete + count_insert; j++) {pointer.previous();pointer.remove();}for (Diff newDiff : diff_main(text_delete,text_insert,false,deadline)) {pointer.add(newDiff);}}count_insert=0;count_delete=0;text_delete="";text_insert="";break;}thisDiff=pointer.hasNext() ? pointer.next() : null;}diffs.removeLast();return diffs;}  }
class C{  private boolean cmd_save(){  KeyNamePair pp=(KeyNamePair)roleField.getSelectedItem();  roleField.setBackground(pp == null);  if (pp == null)   return false;  int AD_Role_ID=pp.getKey();  boolean isActive=cbActive.isSelected();  boolean isExclude=cbExclude.isSelected();  boolean isReadOnly=cbReadOnly.isSelected();  boolean isDependentEntities=cbDependent.isSelected();  if (m_currentData == null) {    m_currentData=new MRecordAccess(Env.getCtx(),AD_Role_ID,m_AD_Table_ID,m_Record_ID,null);    m_recordAccesss.add(m_currentData);    m_currentRow=m_recordAccesss.size() - 1;  }  m_currentData.setIsActive(isActive);  m_currentData.setIsExclude(isExclude);  m_currentData.setIsReadOnly(isReadOnly);  m_currentData.setIsDependentEntities(isDependentEntities);  boolean success=m_currentData.save();  log.fine("Success=" + success);  return success;}  }
class C{  @Override public int[] postProcess(int[] attributeSet) throws Exception {  if (m_debug) {    System.err.println("Percentage of correlation matrix computed " + "over the search: " + Utils.doubleToString(((double)m_numFilled.get() / m_numEntries * 100.0),2) + "%");  }  int j=0;  if (!m_locallyPredictive) {    return attributeSet;  }  BitSet bestGroup=new BitSet(m_numAttribs);  for (  int element : attributeSet) {    bestGroup.set(element);  }  addLocallyPredictive(bestGroup);  for (int i=0; i < m_numAttribs; i++) {    if (bestGroup.get(i)) {      j++;    }  }  int[] newSet=new int[j];  j=0;  for (int i=0; i < m_numAttribs; i++) {    if (bestGroup.get(i)) {      newSet[j++]=i;    }  }  return newSet;}  }
class C{  protected int consumed(){  return consumed;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.PRAGMA__NAME:    setName(NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public long logTerm(){  return logTerm;}  }
class C{  private void prepareVPlexConsistencyGroupData() throws Exception {  StorageSystem storageSystem=createStorageSystem(true);  List<Volume> vplexVolumes=createVPlexVolumes("vplexVolume",3,storageSystem.getId());  BlockConsistencyGroup vplexCg=createBlockConsistencyGroup("vplexCg",storageSystem.getId(),Types.VPLEX.name(),false);  vplexConsistencyGroupURI=vplexCg.getId();  addVolumesToBlockConsistencyGroup(vplexCg.getId(),vplexVolumes);}  }
class C{  public void clear(){  fullyLock();  try {    for (Node<E> p, h=head; (p=h.next) != null; h=p) {      h.next=h;      p.item=null;    }    head=last;    if (count.getAndSet(0) == capacity)     notFull.signal();  }  finally {    fullyUnlock();  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setCardinality(Cardinality.MULTIPLE);  builder.addAttribute(REL);  builder.addAttribute(TYPE);  builder.addAttribute(HREF).setRequired(true);  builder.addAttribute(HREFLANG);  builder.addAttribute(TITLE);  builder.addAttribute(XML_LANG);  builder.addAttribute(LENGTH);  builder.addAttribute(ETAG);  builder.addElement(Content.KEY);}  }
class C{  public static List<String> readURLAsList(String url){  try {    List<String> text=Lists.newArrayList();    BufferedReader reader=new BufferedReader(new InputStreamReader(new URL(url).openStream()));    String currentLine;    while ((currentLine=reader.readLine()) != null) {      text.add(currentLine);    }    reader.close();    return text;  } catch (  IOException e) {    LLibrary.LOGGER.error(CrashReport.makeCrashReport(e,"Failed to receive data from URL: " + url).getCompleteReport());    return null;  }}  }
class C{  public CompositeChange(String name){  this(name,new ArrayList(2));}  }
class C{  @Override public String generateLabel(Crosshair crosshair){  Object[] v=new Object[]{this.numberFormat.format(crosshair.getValue())};  String result=MessageFormat.format(this.labelTemplate,v);  return result;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ENUM___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.ENUM___STATE_NAME_1:  return STATE_NAME_1_EDEFAULT == null ? stateName_1 != null : !STATE_NAME_1_EDEFAULT.equals(stateName_1);case UmplePackage.ENUM___ANONYMOUS_ENUM_11:return anonymous_enum_1_1 != null && !anonymous_enum_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1,2}) private void incEdgeCounter(GPR scratch,GPR idx,int counterIdx){  if (VM.VerifyAssertions)   VM._assert(((BaselineCompiledMethod)compiledMethod).hasCounterArray());  if (idx == null) {    asm.emitMOV_Reg_RegDisp(scratch,EBX,Offset.fromIntZeroExtend(counterIdx << LOG_BYTES_IN_INT));  } else {    asm.emitMOV_Reg_RegIdx(scratch,EBX,idx,WORD,Offset.fromIntZeroExtend(counterIdx << LOG_BYTES_IN_INT));  }  asm.emitADD_Reg_Imm(scratch,1);  asm.emitSBB_Reg_Imm(scratch,0);  if (idx == null) {    asm.emitMOV_RegDisp_Reg(EBX,Offset.fromIntSignExtend(counterIdx << LOG_BYTES_IN_INT),scratch);  } else {    asm.emitMOV_RegIdx_Reg(EBX,idx,WORD,Offset.fromIntSignExtend(counterIdx << LOG_BYTES_IN_INT),scratch);  }}  }
class C{  public void testHighPrecisionLong() throws IOException {  String json="[9223372036854775806.000]";  JsonReader reader=new JsonReader(new StringReader(json));  reader.beginArray();  assertEquals(9223372036854775806L,reader.nextLong());  reader.endArray();}  }
class C{  public boolean containsKey(int key){  return map.containsKey(key);}  }
class C{  public BillingException(String message,Throwable cause){  super(message,cause);  init();}  }
class C{  private static void updatePassword(String newPwd,int userId,String entidad) throws Exception {  String encPwd;  double cth;  encPwd=UasMisc.encryptPassword(newPwd,userId);  cth=DateTimeUtil.getCurrentTimeHours();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    dbConn.beginTransaction();    UasDaoUserRecUb userRecUb=new UasDaoUserRecUb();    userRecUb.setPwd(encPwd);    userRecUb.setPwdLastUpdts(cth);    userRecUb.setPwdMbc(UasMisc.PWD_MUST_NOT_BE_CHANGED);    UasDaoUserTbl.updateRow(userRecUb,userId);    dbConn.endTransaction(true);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }}  }
class C{  protected void matchObjects(List<LayerObject> layerObjects){  for (  LayerObject lo : layerList) {    for (    LayerObject toMatch : layerObjects) {      Layer matchedLayer=toMatch.getLayer();      if (lo.getLayer().equals(matchedLayer)) {        boolean turnOn=toMatch.isSelected();        String layerMarker=matchedLayer.getPropertyPrefix();        lo.setSelected(turnOn);        if (turnOn) {          if (!zfi.getLayers().contains(layerMarker)) {            zfi.getLayers().add(layerMarker);          }        } else {          zfi.getLayers().remove(layerMarker);        }      }    }    setInclude(!zfi.getLayers().isEmpty());  }}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.events.add(event);}  }
class C{  public void rollbackExportGroupAddInitiators(URI storageURI,URI exportGroupURI,URI exportMaskURI,List<URI> volumeURIs,List<URI> initiatorURIs,String contextKey,String token) throws ControllerException {  ExportTaskCompleter taskCompleter=new ExportMaskRemoveInitiatorCompleter(exportGroupURI,exportMaskURI,initiatorURIs,token);  try {    ExportOperationContext context=(ExportOperationContext)WorkflowService.getInstance().loadStepData(contextKey);    WorkflowService.getInstance().storeStepData(token,context);  } catch (  ClassCastException e) {    _log.info("Step {} has stored step data other than ExportOperationContext. Exception: {}",token,e);  }  doExportGroupRemoveInitiators(storageURI,exportGroupURI,exportMaskURI,volumeURIs,initiatorURIs,true,taskCompleter,token);}  }
class C{  private void updateHighlighters(){  if (!myProject.isDisposed() && !myEditor.isDisposed()) {    final EditorHighlighter highlighter=EditorHighlighterFactory.getInstance().createEditorHighlighter(myProject,myFile);    ((EditorEx)myEditor).setHighlighter(highlighter);  }}  }
class C{  public void stopClock(String message){  log(message + ": " + m_Clock);}  }
class C{  public void decrementConsciousnessLevel(int amount){  this.consciousnessLevel=this.consciousnessLevel - amount;}  }
class C{  protected ArrayList<FirewallRule> readRulesFromStorage(){  ArrayList<FirewallRule> l=new ArrayList<FirewallRule>();  try {    Map<String,Object> row;    IResultSet resultSet=storageSource.executeQuery(TABLE_NAME,ColumnNames,null,null);    for (Iterator<IResultSet> it=resultSet.iterator(); it.hasNext(); ) {      row=it.next().getRow();      FirewallRule r=new FirewallRule();      if (!row.containsKey(COLUMN_RULEID) || !row.containsKey(COLUMN_DPID)) {        logger.error("skipping entry with missing required 'ruleid' or 'switchid' entry: {}",row);        return l;      }      try {        r.ruleid=Integer.parseInt((String)row.get(COLUMN_RULEID));        r.dpid=DatapathId.of((String)row.get(COLUMN_DPID));        for (        String key : row.keySet()) {          if (row.get(key) == null) {            continue;          }          if (key.equals(COLUMN_RULEID) || key.equals(COLUMN_DPID) || key.equals("id")) {            continue;          } else           if (key.equals(COLUMN_IN_PORT)) {            r.in_port=OFPort.of(Integer.parseInt((String)row.get(COLUMN_IN_PORT)));          } else           if (key.equals(COLUMN_DL_SRC)) {            r.dl_src=MacAddress.of(Long.parseLong((String)row.get(COLUMN_DL_SRC)));          } else           if (key.equals(COLUMN_DL_DST)) {            r.dl_dst=MacAddress.of(Long.parseLong((String)row.get(COLUMN_DL_DST)));          } else           if (key.equals(COLUMN_DL_TYPE)) {            r.dl_type=EthType.of(Integer.parseInt((String)row.get(COLUMN_DL_TYPE)));          } else           if (key.equals(COLUMN_NW_SRC_PREFIX)) {            r.nw_src_prefix_and_mask=IPv4AddressWithMask.of(IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_SRC_PREFIX))),r.nw_src_prefix_and_mask.getMask());          } else           if (key.equals(COLUMN_NW_SRC_MASKBITS)) {            r.nw_src_prefix_and_mask=IPv4AddressWithMask.of(r.nw_src_prefix_and_mask.getValue(),IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_SRC_MASKBITS))));          } else           if (key.equals(COLUMN_NW_DST_PREFIX)) {            r.nw_dst_prefix_and_mask=IPv4AddressWithMask.of(IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_DST_PREFIX))),r.nw_dst_prefix_and_mask.getMask());          } else           if (key.equals(COLUMN_NW_DST_MASKBITS)) {            r.nw_dst_prefix_and_mask=IPv4AddressWithMask.of(r.nw_dst_prefix_and_mask.getValue(),IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_DST_MASKBITS))));          } else           if (key.equals(COLUMN_NW_PROTO)) {            r.nw_proto=IpProtocol.of(Short.parseShort((String)row.get(COLUMN_NW_PROTO)));          } else           if (key.equals(COLUMN_TP_SRC)) {            r.tp_src=TransportPort.of(Integer.parseInt((String)row.get(COLUMN_TP_SRC)));          } else           if (key.equals(COLUMN_TP_DST)) {            r.tp_dst=TransportPort.of(Integer.parseInt((String)row.get(COLUMN_TP_DST)));          } else           if (key.equals(COLUMN_WILDCARD_DPID)) {            r.any_dpid=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DPID));          } else           if (key.equals(COLUMN_WILDCARD_IN_PORT)) {            r.any_in_port=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_IN_PORT));          } else           if (key.equals(COLUMN_WILDCARD_DL_SRC)) {            r.any_dl_src=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_SRC));          } else           if (key.equals(COLUMN_WILDCARD_DL_DST)) {            r.any_dl_dst=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_DST));          } else           if (key.equals(COLUMN_WILDCARD_DL_TYPE)) {            r.any_dl_type=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_TYPE));          } else           if (key.equals(COLUMN_WILDCARD_NW_SRC)) {            r.any_nw_src=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_SRC));          } else           if (key.equals(COLUMN_WILDCARD_NW_DST)) {            r.any_nw_dst=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_DST));          } else           if (key.equals(COLUMN_WILDCARD_NW_PROTO)) {            r.any_nw_proto=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_PROTO));          } else           if (key.equals(COLUMN_PRIORITY)) {            r.priority=Integer.parseInt((String)row.get(COLUMN_PRIORITY));          } else           if (key.equals(COLUMN_ACTION)) {            int tmp=Integer.parseInt((String)row.get(COLUMN_ACTION));            if (tmp == FirewallRule.FirewallAction.DROP.ordinal()) {              r.action=FirewallRule.FirewallAction.DROP;            } else             if (tmp == FirewallRule.FirewallAction.ALLOW.ordinal()) {              r.action=FirewallRule.FirewallAction.ALLOW;            } else {              r.action=null;              logger.error("action not recognized");            }          }        }      } catch (      ClassCastException e) {        logger.error("skipping rule {} with bad data : " + e.getMessage(),r.ruleid);      }      if (r.action != null) {        l.add(r);      }    }  } catch (  StorageException e) {    logger.error("failed to access storage: {}",e.getMessage());  }  Collections.sort(l);  return l;}  }
class C{  public void testSetBitPositiveOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=223;  byte rBytes[]={0,-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public String name(){  return name;}  }
class C{  public String toString(){  return name;}  }
class C{  private static byte[] acquireJpegBytesAndClose(Image image){  ByteBuffer buffer;  if (image.getFormat() == ImageFormat.JPEG) {    Image.Plane plane0=image.getPlanes()[0];    buffer=plane0.getBuffer();  } else   if (image.getFormat() == ImageFormat.YUV_420_888) {    buffer=ByteBuffer.allocateDirect(image.getWidth() * image.getHeight() * 3);    Log.v(TAG,"Compressing JPEG with software encoder.");    int numBytes=JpegUtilNative.compressJpegFromYUV420Image(new AndroidImageProxy(image),buffer,JPEG_QUALITY);    if (numBytes < 0) {      throw new RuntimeException("Error compressing jpeg.");    }    buffer.limit(numBytes);  } else {    throw new RuntimeException("Unsupported image format.");  }  byte[] imageBytes=new byte[buffer.remaining()];  buffer.get(imageBytes);  buffer.rewind();  image.close();  return imageBytes;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  protected boolean canStoreClass(SootClass child,SootClass parent){  parent.checkLevel(SootClass.HIERARCHY);  child.checkLevel(SootClass.HIERARCHY);  Interval parentInterval=classToInterval.get(parent);  Interval childInterval=classToInterval.get(child);  if (parentInterval != null && childInterval != null) {    return parentInterval.isSubrange(childInterval);  }  if (childInterval == null) {    if (parentInterval != null) {      return parent.equals(RefType.v("java.lang.Object").getSootClass());    } else {      return getAllSubinterfaces(parent).contains(child);    }  } else {    Set impl=getAllImplementersOfInterface(parent);    for (Iterator it=impl.iterator(); it.hasNext(); ) {      parentInterval=classToInterval.get(it.next());      if (parentInterval != null && parentInterval.isSubrange(childInterval)) {        return true;      }    }    return false;  }}  }
class C{  public void invokeInterface(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEINTERFACE,owner,method,true);}  }
class C{  public void showDroidsafeTextMarkers(IEditorPart editor){  IFile file=DroidsafePluginUtilities.getEditorInputFile(editor);  if (file != null) {    String className=getClassName(file);    if (className != null)     showDroidsafeTextMarkers(editor,className);  }}  }
class C{  public static String replace(String text,String repl,String with,int max){  if (text == null || isEmpty(repl) || with == null || max == 0) {    return text;  }  StringBuffer buf=new StringBuffer(text.length());  int start=0, end=0;  while ((end=text.toLowerCase().indexOf(repl.toLowerCase(),start)) != -1) {    buf.append(text.substring(start,end)).append(with);    start=end + repl.length();    if (--max == 0) {      break;    }  }  buf.append(text.substring(start));  return buf.toString();}  }
class C{  public String initialtermvectors(){  return initialtermvectors;}  }
class C{  public static void main(String[] args){  HtmlDemo demo=new HtmlDemo(null);  demo.mainImpl();}  }
class C{  public static double ulp(double d){  if (Double.isNaN(d)) {    return Double.NaN;  }  if (Double.isInfinite(d)) {    return Double.POSITIVE_INFINITY;  }  if (d == 0.0) {    return Double.MIN_VALUE;  }  d=Math.abs(d);  if (d == Double.MAX_VALUE) {    return MAX_ULP;  }  return nextAfter(d,Double.MAX_VALUE) - d;}  }
class C{  void updateMaxFieldCount(){  if (this.binding == null)   return;  TypeDeclaration outerMostType=this.scope.outerMostClassScope().referenceType();  if (this.maxFieldCount > outerMostType.maxFieldCount) {    outerMostType.maxFieldCount=this.maxFieldCount;  } else {    this.maxFieldCount=outerMostType.maxFieldCount;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.728 -0500",hash_original_method="79BAB25129164A5068BFAB9AA7EFB4C6",hash_generated_method="522F5176B4DE1AC9DB1BB686305E68CE") public boolean hasTransport(){  return hasParameter(TRANSPORT);}  }
class C{  public int search(String text,boolean matchCase,boolean highlightAll){  searchPanel.setVisible(true);  searchEnabled=false;  searchTextField.setText(text);  matchCaseCheckBox.setSelected(matchCase);  highlightAllCheckBox.setSelected(highlightAll);  searchEnabled=true;  return performSearch(text,textArea.getSelectionStart(),SearchDirection.FORWARD,true);}  }
class C{  protected void editOccured(ModifyEvent e){  String value=text.getText();  if (value == null) {    value="";  }  Object typedValue=value;  boolean oldValidState=isValueValid();  boolean newValidState=isCorrect(typedValue);  if (!newValidState) {    setErrorMessage(MessageFormat.format(getErrorMessage(),new Object[]{value}));  }  valueChanged(oldValidState,newValidState);}  }
class C{  private boolean checkPlayServices(){  return checkPlayServices(this,null);}  }
class C{  void handleStale(ParsedDirective pd) throws SaslException {  if (false != m_staleFlag)   throw new SaslException("Too many stale directives.");  if ("true".equals(pd.getValue()))   m_staleFlag=true; else   throw new SaslException("Invalid stale directive value: " + pd.getValue());}  }
class C{  public static <T>ContainsPredicate<T> contains(Property<? extends Collection<T>> collectionProperty,T value){  NullArgumentException.validateNotNull("Value",value);  return new ContainsPredicate<>(property(collectionProperty),value);}  }
class C{  public final synchronized int maxSize(){  return maxSize;}  }
class C{  @Override public final int hashCode(){  final long prime=2654435761L;  long result=1;  result=prime * result + first;  result=prime * result + second;  return (int)result;}  }
class C{  public boolean isMedium(){  return value != null && value == 5;}  }
class C{  public int unitsPerEm(){  return this.data.readUShort(Offset.unitsPerEm.offset);}  }
class C{  void checkEndCode(){  if (endCode) {    throw new IllegalStateException("Cannot visit instructions after visitMaxs has been called.");  }}  }
class C{  @After public void appendExternalOutpouToStdout(){  N4CliHelper.appendExternalOutputToStdout(outputLogFile);}  }
class C{  public boolean isMounted(){  return mounted;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.809 -0500",hash_original_method="D2A22011D07817D724D5F16905D145B4",hash_generated_method="5AE1AC9C87791C009A45FC7036D03F56") @Override public int hashCode(){  int hash=LangUtils.HASH_SEED;  hash=LangUtils.hashCode(hash,this.defaultPort);  hash=LangUtils.hashCode(hash,this.name);  hash=LangUtils.hashCode(hash,this.layered);  hash=LangUtils.hashCode(hash,this.socketFactory);  return hash;}  }
class C{  public static RedisQueue create(){  return create(null);}  }
class C{  public static void intToNetworkByteOrder(int num,byte[] buf,int start,int count){  if (count > 4) {    throw new IllegalArgumentException("Cannot handle more than 4 bytes");  }  for (int i=count - 1; i >= 0; i--) {    buf[start + i]=(byte)(num & 0xff);    num>>>=8;  }}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new UnmodifiableRandomAccessList<E>(list);  }  return this;}  }
class C{  public Observable<Record> publishObservable(Record record){  io.vertx.rx.java.ObservableFuture<Record> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  publish(record,resultHandler.toHandler());  return resultHandler;}  }
class C{  private boolean validateGroupPasswordField(){  return swingPasswordValueField.isValid();}  }
class C{  public void readFully(byte[] b) throws IOException, EOFException {  this.readFully(b,0,b.length);}  }
class C{  public static FloatMatrix scalar(float s){  FloatMatrix m=new FloatMatrix(1,1);  m.put(0,0,s);  return m;}  }
class C{  private static String execute(String cmd){  InputStream in=null;  Process process=null;  try {    process=Runtime.getRuntime().exec(cmd);    in=process.getInputStream();    return IOUtils.toString(new InputStreamReader(in,Charset.defaultCharset()));  } catch (  Exception ex) {    return "(error executing: " + cmd + ")";  }catch (  Error err) {    if (err.getMessage() != null && (err.getMessage().contains("posix_spawn") || err.getMessage().contains("UNIXProcess"))) {      log.warn("Error forking command due to JVM locale bug (see https://issues.apache.org/jira/browse/SOLR-6387): " + err.getMessage());      return "(error executing: " + cmd + ")";    }    throw err;  } finally {    if (process != null) {      IOUtils.closeQuietly(process.getOutputStream());      IOUtils.closeQuietly(process.getInputStream());      IOUtils.closeQuietly(process.getErrorStream());    }  }}  }
class C{  void addElement(@NotNull final LookupElementBuilder lookupElementBuilder,@Nullable final String help,final int priority){  addElementInternal(lookupElementBuilder,help,priority);}  }
class C{  public void generatePartition(Instances data) throws Exception {  if (m_Classifier instanceof PartitionGenerator)   buildClassifier(data); else   throw new Exception("Classifier: " + getClassifierSpec() + " cannot generate a partition");}  }
class C{  protected boolean isFilled(){  return TacGrpSidc.FSUPP_ARS_C2ARS_NFA_CIRCLR.equalsIgnoreCase(this.maskedSymbolCode) || TacGrpSidc.FSUPP_ARS_KLBOX_BLUE_CIRCLR.equalsIgnoreCase(this.maskedSymbolCode) || TacGrpSidc.FSUPP_ARS_KLBOX_PURPLE_CIRCLR.equalsIgnoreCase(this.maskedSymbolCode);}  }
class C{  public static OFGroup createL2DCOFloodOverMulticastTunnels(U16 index,U16 tunnelId){  return OFGroup.of(0 | (index.getRaw() & 0x03ff) | (tunnelId.getRaw() << 12)| (L2OverlaySubType.L2_OVERLAY_FLOOD_OVER_MULTICAST_TUNNELS << 10)| (OFDPAGroupType.L2_DATA_CENTER_OVERLAY << 28));}  }
class C{  private void addOperators(ValueNamePair[] op,Listbox listOperator){  List<?> itemList=listOperator.getChildren();  itemList.clear();  for (  ValueNamePair item : op) {    listOperator.appendItem(item.getName(),item.getValue());  }  listOperator.setSelectedIndex(0);}  }
class C{  protected boolean isBufferedImageSource(){  return this.getImageSource() instanceof BufferedImage;}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);}  }
class C{  private void checkNestedBuilder(boolean registered) throws Exception {  startUp(registered);  BinaryObject obj=node1.binary().builder(EnumHolder.class.getName()).setField("val",EnumType.ONE).build();  assert node1.binary().type(EnumHolder.class.getName()) != null;  assert node1.binary().type(EnumType.class.getName()) != null;  cacheBinary1.put(1,obj);  validateNested(1,EnumType.ONE,registered);  obj=(BinaryObject)cacheBinary1.get(1);  obj=node1.binary().builder(obj).setField("val",EnumType.TWO).build();  cacheBinary1.put(1,obj);  validateNested(1,EnumType.TWO,registered);}  }
class C{  public int filterHashCode(){  int code=0;  if (mAction != null) {    code+=mAction.hashCode();  }  if (mData != null) {    code+=mData.hashCode();  }  if (mType != null) {    code+=mType.hashCode();  }  if (mPackage != null) {    code+=mPackage.hashCode();  }  if (mComponent != null) {    code+=mComponent.hashCode();  }  if (mCategories != null) {    code+=mCategories.hashCode();  }  return code;}  }
class C{  private static File createTempFileFor(String content) throws IOException {  final File temp=File.createTempFile("n4jsnode","." + N4JSGlobals.JS_FILE_EXTENSION);  final BufferedWriter writer=new BufferedWriter(new FileWriter(temp));  try {    writer.write(content);  }  finally {    writer.close();  }  temp.deleteOnExit();  return temp;}  }
class C{  public void testSimpleBuilderRegistered() throws Exception {  checkSimpleBuilder(true);}  }
class C{  public void addSongEQValues(String songId,int fiftyHertz,int oneThirtyHertz,int threeTwentyHertz,int eightHundredHertz,int twoKilohertz,int fiveKilohertz,int twelvePointFiveKilohertz,int virtualizer,int bassBoost,int reverb){  ContentValues values=new ContentValues();  values.put(SONG_ID,songId);  values.put(EQ_50_HZ,fiftyHertz);  values.put(EQ_130_HZ,threeTwentyHertz);  values.put(EQ_320_HZ,threeTwentyHertz);  values.put(EQ_800_HZ,eightHundredHertz);  values.put(EQ_2000_HZ,twoKilohertz);  values.put(EQ_5000_HZ,fiveKilohertz);  values.put(EQ_12500_HZ,twelvePointFiveKilohertz);  values.put(VIRTUALIZER,virtualizer);  values.put(BASS_BOOST,bassBoost);  values.put(REVERB,reverb);  getDatabase().insert(EQUALIZER_TABLE,null,values);}  }
class C{  public boolean hasDTD(){  return hasDTD;}  }
class C{  private Map<String,String> makeSourceProps(String topics){  Map<String,String> props=new HashMap<>();  props.put(ConnectorConfig.TASKS_MAX_CONFIG,"2");  props.put(ConnectorConfig.NAME_CONFIG,"test-src-connector");  props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,IgniteSourceConnectorMock.class.getName());  props.put(IgniteSourceConstants.CACHE_NAME,"testCache");  props.put(IgniteSourceConstants.CACHE_CFG_PATH,"example-ignite.xml");  props.put(IgniteSourceConstants.TOPIC_NAMES,topics);  props.put(IgniteSourceConstants.CACHE_EVENTS,"put");  props.put(IgniteSourceConstants.CACHE_FILTER_CLASS,TestCacheEventFilter.class.getName());  props.put(IgniteSourceConstants.INTL_BUF_SIZE,"1000000");  return props;}  }
class C{  public static long daysBetween(Date startDate,Date endDate){  Calendar sDate=getDatePart(startDate);  Calendar eDate=getDatePart(endDate);  long daysBetween=0;  while (sDate.before(eDate)) {    sDate.add(Calendar.DAY_OF_MONTH,1);    daysBetween++;  }  return daysBetween;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return STRINGS;case 2:  return HELLO;default :return null;}}  }
class C{  public void test_syntax_update_30() throws MalformedQueryException {  final String query="PREFIX : <http://example/>\n# Otherwise empty\n";  parseOperation(query);}  }
class C{  @Override public boolean overrides(){  return overrides;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  int n=members.length;  for (int i=0; i < n; i++) {    if (i > 0) {      result.append(',');    }    result.append(members[i][0]);    if (members[i][0] != members[i][1]) {      result.append('-');      result.append(members[i][1]);    }  }  return result.toString();}  }
class C{  public StreamResource(StreamInterceptingTunnel tunnel,int streamIndex,String mediaType){  this.tunnel=tunnel;  this.streamIndex=streamIndex;  this.mediaType=mediaType;}  }
class C{  public int addNewDivider(String name,int parentId,boolean isFixed) throws Exception {  FolderTokenDivider div;  int id;  id=super.generateNextNewNodeId();  div=new FolderTokenDivider(id,name,parentId,isFixed,FolderEditFlag.NEW);  super.add(div);  return id;}  }
class C{  public void fixUpPointSequence(){  List<LatLong> newPoints=new ArrayList<>(points.size());  for (  LatLong point : points) {    if (newPoints.size() < 2)     newPoints.add(point); else {      List<LatLong> bestSequence=null;      double bestScore=Double.MAX_VALUE;      for (int i=1; i <= newPoints.size(); i++) {        List<LatLong> candidate=new ArrayList<>(newPoints.size());        candidate.addAll(newPoints);        candidate.add(i,point);        double score=scoreSequence(candidate);        if (score < bestScore) {          bestSequence=candidate;          bestScore=score;        }      }      newPoints=bestSequence;    }  }  points=newPoints;}  }
class C{  void tokenize(String pat,Vector targetStrings) throws javax.xml.transform.TransformerException {  m_compiler.m_currentPattern=pat;  m_patternMapSize=0;  int initTokQueueSize=((pat.length() < OpMap.MAXTOKENQUEUESIZE) ? pat.length() : OpMap.MAXTOKENQUEUESIZE) * 5;  m_compiler.m_opMap=new OpMapVector(initTokQueueSize,OpMap.BLOCKTOKENQUEUESIZE * 5,OpMap.MAPINDEX_LENGTH);  int nChars=pat.length();  int startSubstring=-1;  int posOfNSSep=-1;  boolean isStartOfPat=true;  boolean isAttrName=false;  boolean isNum=false;  int nesting=0;  for (int i=0; i < nChars; i++) {    char c=pat.charAt(i);switch (c) {case '\"':{        if (startSubstring != -1) {          isNum=false;          isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);          isAttrName=false;          if (-1 != posOfNSSep) {            posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);          } else {            addToTokenQueue(pat.substring(startSubstring,i));          }        }        startSubstring=i;        for (i++; (i < nChars) && ((c=pat.charAt(i)) != '\"'); i++)         ;        if (c == '\"' && i < nChars) {          addToTokenQueue(pat.substring(startSubstring,i + 1));          startSubstring=-1;        } else {          m_processor.error(XPATHErrorResources.ER_EXPECTED_DOUBLE_QUOTE,null);        }      }    break;case '\'':  if (startSubstring != -1) {    isNum=false;    isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);    isAttrName=false;    if (-1 != posOfNSSep) {      posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);    } else {      addToTokenQueue(pat.substring(startSubstring,i));    }  }startSubstring=i;for (i++; (i < nChars) && ((c=pat.charAt(i)) != '\''); i++) ;if (c == '\'' && i < nChars) {addToTokenQueue(pat.substring(startSubstring,i + 1));startSubstring=-1;} else {m_processor.error(XPATHErrorResources.ER_EXPECTED_SINGLE_QUOTE,null);}break;case 0x0A:case 0x0D:case ' ':case '\t':if (startSubstring != -1) {isNum=false;isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);isAttrName=false;if (-1 != posOfNSSep) {posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);} else {addToTokenQueue(pat.substring(startSubstring,i));}startSubstring=-1;}break;case '@':isAttrName=true;case '-':if ('-' == c) {if (!(isNum || (startSubstring == -1))) {break;}isNum=false;}case '(':case '[':case ')':case ']':case '|':case '/':case '*':case '+':case '=':case ',':case '\\':case '^':case '!':case '$':case '<':case '>':if (startSubstring != -1) {isNum=false;isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);isAttrName=false;if (-1 != posOfNSSep) {posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);} else {addToTokenQueue(pat.substring(startSubstring,i));}startSubstring=-1;} else if (('/' == c) && isStartOfPat) {isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);} else if ('*' == c) {isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);isAttrName=false;}if (0 == nesting) {if ('|' == c) {if (null != targetStrings) {recordTokenString(targetStrings);}isStartOfPat=true;}}if ((')' == c) || (']' == c)) {nesting--;} else if (('(' == c) || ('[' == c)) {nesting++;}addToTokenQueue(pat.substring(i,i + 1));break;case ':':if (i > 0) {if (posOfNSSep == (i - 1)) {if (startSubstring != -1) {if (startSubstring < (i - 1)) addToTokenQueue(pat.substring(startSubstring,i - 1));}isNum=false;isAttrName=false;startSubstring=-1;posOfNSSep=-1;addToTokenQueue(pat.substring(i - 1,i + 1));break;} else {posOfNSSep=i;}}default :if (-1 == startSubstring) {startSubstring=i;isNum=Character.isDigit(c);} else if (isNum) {isNum=Character.isDigit(c);}}}if (startSubstring != -1) {isNum=false;isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);if ((-1 != posOfNSSep) || ((m_namespaceContext != null) && (m_namespaceContext.handlesNullPrefixes()))) {posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,nChars);} else {addToTokenQueue(pat.substring(startSubstring,nChars));}}if (0 == m_compiler.getTokenQueueSize()) {m_processor.error(XPATHErrorResources.ER_EMPTY_EXPRESSION,null);} else if (null != targetStrings) {recordTokenString(targetStrings);}m_processor.m_queueMark=0;}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.325 -0400",hash_original_method="86C594F1F9E71F35FFEC0A77C084143C",hash_generated_method="451F8B81BF1B43C8797ECA03377447B6") public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){  if (file == null) {    throw new NullPointerException("The file must not be null");  }  addTracker(file.getPath(),marker,deleteStrategy);}  }
class C{  public void dup(){  mv.visitInsn(Opcodes.DUP);}  }
class C{  public static RectF trapToRect(float[] array){  RectF r=new RectF(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY);  for (int i=1; i < array.length; i+=2) {    float x=Math.round(array[i - 1] * 10) / 10.f;    float y=Math.round(array[i] * 10) / 10.f;    r.left=(x < r.left) ? x : r.left;    r.top=(y < r.top) ? y : r.top;    r.right=(x > r.right) ? x : r.right;    r.bottom=(y > r.bottom) ? y : r.bottom;  }  r.sort();  return r;}  }
class C{  public static ParameterRange serializableInstance(){  return new ParameterRange(Edge.serializableInstance(),1.0,1.0,1.0);}  }
class C{  private void writeDimensions(DataOutputStream os,MLArray array) throws IOException {  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  DataOutputStream bufferDOS=new DataOutputStream(buffer);  int[] dims=array.getDimensions();  for (int i=0; i < dims.length; i++) {    bufferDOS.writeInt(dims[i]);  }  OSArrayTag tag=new OSArrayTag(MatDataTypes.miUINT32,buffer.toByteArray());  tag.writeTo(os);}  }
class C{  public void simulate(int cycles){  if (GENERATE_GIF) {    HugLifeAnimator.init(GIF_OUTPUT_FILENAME);  }  int cycleCount=0;  while (cycleCount < cycles) {    boolean cycleCompleted=g.tic();    if (cycleCompleted) {      g.drawWorld();      StdDraw.show(PAUSE_TIME_PER_SIMSTEP);      if (GENERATE_GIF) {        HugLifeAnimator.saveGifFrame(cycleCount);      }      cycleCount+=1;    }  }}  }
class C{  @Override public void teardown(){  producer.close();}  }
class C{  public boolean onShouldReset(PLIView view){  return true;}  }
class C{  public static ZipExtraField[] parse(byte[] data){  Vector<ZipExtraField> v=new Vector<ZipExtraField>();  int start=0;  while (start <= data.length - 4) {    ZipShort headerId=new ZipShort(data,start);    int length=(new ZipShort(data,start + 2)).getValue();    if (start + 4 + length > data.length) {      throw new SwcException.UnknownZipFormat(start + "");    }    try {      ZipExtraField ze=createExtraField(headerId);      ze.parseFromLocalFileData(data,start + 4,length);      v.addElement(ze);    } catch (    InstantiationException ie) {      throw new RuntimeException("Could not instantiate zip class: " + ie.getMessage());    }catch (    IllegalAccessException iae) {      throw new RuntimeException("Could not access zip class: " + iae.getMessage());    }    start+=(length + 4);  }  if (start != data.length) {    throw new SwcException.UnknownZipFormat(start + "");  }  ZipExtraField[] result=new ZipExtraField[v.size()];  v.copyInto(result);  return result;}  }
class C{  public X509Name(boolean reverse,Hashtable lookUp,String dirName,X509NameEntryConverter converter){  this.converter=converter;  X509NameTokenizer nTok=new X509NameTokenizer(dirName);  while (nTok.hasMoreTokens()) {    String token=nTok.nextToken();    if (token.indexOf('+') > 0) {      X509NameTokenizer pTok=new X509NameTokenizer(token,'+');      addEntry(lookUp,pTok.nextToken(),FALSE);      while (pTok.hasMoreTokens()) {        addEntry(lookUp,pTok.nextToken(),TRUE);      }    } else {      addEntry(lookUp,token,FALSE);    }  }  if (reverse) {    Vector o=new Vector();    Vector v=new Vector();    Vector a=new Vector();    int count=1;    for (int i=0; i < this.ordering.size(); i++) {      if (((Boolean)this.added.elementAt(i)).booleanValue()) {        o.insertElementAt(this.ordering.elementAt(i),count);        v.insertElementAt(this.values.elementAt(i),count);        a.insertElementAt(this.added.elementAt(i),count);        count++;      } else {        o.insertElementAt(this.ordering.elementAt(i),0);        v.insertElementAt(this.values.elementAt(i),0);        a.insertElementAt(this.added.elementAt(i),0);        count=1;      }    }    this.ordering=o;    this.values=v;    this.added=a;  }}  }
class C{  public ZoomEvent(boolean in,float rate){  mZoomIn=in;  mZoomRate=rate;}  }
class C{  public static <E>Set<E> of(E e1,E e2,E e3,E e4,E e5){  return new ImmutableCollections.SetN<E>(e1,e2,e3,e4,e5);}  }
class C{  public void addRecentFile(File f){  if (null != f) {    recentFiles.add(f);  }}  }
class C{  public static JSONArray toJSONArray(JSONArray names,String string) throws JSONException {  return toJSONArray(names,new JSONTokener(string));}  }
class C{  public SQLTimeoutException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(flags);}  }
class C{  public String openExternal(String url){  try {    Intent intent=null;    intent=new Intent(Intent.ACTION_VIEW);    Uri uri=Uri.parse(url);    if ("file".equals(uri.getScheme())) {      intent.setDataAndType(uri,webView.getResourceApi().getMimeType(uri));    } else {      intent.setData(uri);    }    this.cordova.getActivity().startActivity(intent);    return "";  } catch (  android.content.ActivityNotFoundException e) {    Log.d(LOG_TAG,"InAppBrowser: Error loading url " + url + ":"+ e.toString());    return e.toString();  }}  }
class C{  public DateConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void close() throws IOException {}  }
class C{  public void writeDouble(double v){  try {    dos.writeDouble(v);  } catch (  Exception e) {    handleException(e);  }}  }
class C{  public StrBuilder deleteFirst(String str){  int len=(str == null ? 0 : str.length());  if (len > 0) {    int index=indexOf(str,0);    if (index >= 0) {      deleteImpl(index,index + len,len);    }  }  return this;}  }
class C{  public Poloni(){  super(2,2);}  }
class C{  public static Position intersectRayWithTerrain(Globe globe,Vec4 origin,Vec4 direction){  return intersectRayWithTerrain(globe,origin,direction,defaultSampleLength,defaultPrecision);}  }
class C{  @Override public String generateFileName(int logLevel,long timestamp){  return LogLevel.getLevelName(logLevel);}  }
class C{  public void delegateLoadingOf(String classname){  if (classname.endsWith("."))   notDefinedPackages.addElement(classname); else   notDefinedHere.put(classname,this);}  }
class C{  protected void onFinger(String sourceNick,String sourceLogin,String sourceHostname,String target){  this.sendRawLine("NOTICE " + sourceNick + " :\u0001FINGER "+ _finger+ "\u0001");}  }
class C{  public static void addTableColumn(ObjectMapping mapping,TableColumn column){  mapping.getTable().addColumn(column);}  }
class C{  @Override public int hashCode(){  int result;  result=(this.prefix != null ? this.prefix.hashCode() : 0);  result=29 * result + (this.seriesParameterName != null ? this.seriesParameterName.hashCode() : 0);  result=29 * result + (this.categoryParameterName != null ? this.categoryParameterName.hashCode() : 0);  return result;}  }
class C{  private void removeOldStuff(){  final long current=System.currentTimeMillis();synchronized (cache) {    Iterator i=cache.values().iterator();    while (i.hasNext()) {      ContributionBox cb=(ContributionBox)i.next();      if (current - cb.timeStamp > CONTRIBUTION_TIMEOUT)       i.remove();    }  }synchronized (commands) {    Iterator i=commands.values().iterator();    while (i.hasNext()) {      Long t=(Long)i.next();      if (current - t.longValue() > COMMAND_TIMEOUT)       i.remove();    }  }}  }
class C{  public static CTag insertTag(final AbstractSQLProvider provider,final ITreeNode<CTag> parent,final String name,final String description,final TagType type) throws CouldntSaveDataException {  checkArguments(provider,parent,type);  Preconditions.checkNotNull(name,"IE00563: Name argument can not be null");  Preconditions.checkNotNull(description,"IE00564: Description argument can not be null");  final CConnection connection=provider.getConnection();  final String query=String.format("update %s set parent_id = ? where parent_id = ? and id <> ?",CTableNames.TAGS_TABLE);  try (PreparedStatement statement=connection.getConnection().prepareStatement(query)){    final CTag tag=createTag(provider,parent.getObject(),name,description,type);    statement.setInt(1,tag.getId());    statement.setInt(2,parent.getObject().getId());    statement.setInt(3,tag.getId());    statement.executeUpdate();    return tag;  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public boolean contains(E comparable){  if (comparable == null)   return false;  if (this.root == null)   return false;  return this.contains(this.root,comparable) != null;}  }
class C{  @Deprecated public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static <A>List<A> of(A x1,A x2,A x3){  return new List<A>(x1,of(x2,x3));}  }
class C{  boolean isBaseHeader(){  return value == BASE_HEADER;}  }
class C{  @SuppressWarnings("unchecked") public static final <T>T unmarshall(String toUnmarshall,Class<T> clazz) throws JAXBException {  JAXBContext ctx=JAXBContext.newInstance(clazz.getPackage().getName());  Object unmarshalled=ctx.createUnmarshaller().unmarshal(new StringReader(toUnmarshall));  return (T)unmarshalled;}  }
class C{  public void addGeneratedFile(File file){  generatedFiles.addElement(file);}  }
class C{  public BasicVisualizationServer(Layout<V,E> layout){  this(new DefaultVisualizationModel<V,E>(layout));}  }
class C{  public void addNodes(Properties cfg){  final String logSender=getClass().getName() + "#addNodes";  Enumeration i=cfg.propertyNames();  while (i.hasMoreElements()) {    String tmp=(String)i.nextElement();    if (!tmp.startsWith("base") && !tmp.startsWith("node"))     continue;    try {      String addr=cfg.getProperty(tmp);      if (addr == null || addr.length() == 0)       continue;      addr=addr.trim();      int port=Integer.parseInt(cfg.getProperty("port","10101"));      InetAddress host=null;      StringTokenizer st=new StringTokenizer(addr," :");      if (st.countTokens() > 0)       host=InetAddress.getByName(st.nextToken());      if (st.hasMoreTokens())       port=Integer.parseInt(st.nextToken());      Logger.debug(logSender,"checking " + host + ":"+ port);      String n=getBaseName(host,port,group,10000);      if (n == null) {        Logger.error(logSender,"" + host + ":"+ port+ " is not alive",null);      } else       if (!name.equals(n)) {        Address a=new Address(host,port,n);        Logger.debug(logSender,"adding " + a);        DRM.addPeerAddress(a);      }    } catch (    Exception e) {      Logger.error(logSender,tmp,e);    }  }}  }
class C{  protected FunctionblockModelImpl(){  super();}  }
class C{  public void fillAttributeSet(Set attrSet){  ((ExtendedSelector)getSelector()).fillAttributeSet(attrSet);  ((ExtendedSelector)getSiblingSelector()).fillAttributeSet(attrSet);}  }
class C{  void readPAT() throws IOException {  String S;  String C=prefix + ".PAT";  do {    S=isr.readLine();    if (S == null)     return;  } while (!S.startsWith(C));  int n=Integer.parseInt(S.substring(46).trim());  Debug.message("e00","E00: read " + C + " "+ n+ " points");  for (int i=0; i < 7; i++)   isr.readLine();  int[] I=new int[1];  for (int i=0; i < n; i++) {    S=isr.readLine();    if (S == null)     break;    String name=S.substring(50);    S=isr.readLine();    if (S == null)     break;    parseString(S,I,14);    BasicLocation bl=(BasicLocation)labs.getOMGraphicAt(i);    if (S.length() > 0)     bl.setName(name); else     bl.setLabel(null);    setLocationColor(bl,I[0]);    bl.setShowLocation(true);  }}  }
class C{  public static String fileBuilderUrl(String baseUri,String seed,byte[] signatureSecret,long fileId,long fileAccessHash){  byte[] seedBytes=decodeHex(seed.toCharArray());  byte[] fileIdBytes=getBytes(fileId);  byte[] accessHashBytes=getBytes(fileAccessHash);  byte[] bytesToSign=ArrayUtils.addAll(ArrayUtils.addAll(seedBytes,fileIdBytes),accessHashBytes);  String signPart=HmacUtils.hmacSha256Hex(signatureSecret,bytesToSign);  String signature=seed + "_" + signPart;  return baseUri + "/" + fileId+ "?signature="+ signature;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private int javacCommand(String[] args) throws IOException {  String javac=findJavac();  if (javac == null)   return -1;  return exec(javac,args);}  }
class C{  @Bean protected OAuth2ProtectedResourceDetails resource(){  AuthorizationCodeResourceDetails resource=new AuthorizationCodeResourceDetails();  resource.setAccessTokenUri(tokenUrl);  resource.setUserAuthorizationUri(authorizeUrl);  resource.setClientId(clientId);  resource.setClientSecret("secret");  return resource;}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  public ConePortrayal3D(){  this(1f);}  }
class C{  public void run(){  closed=false;  thread=Thread.currentThread();  do {    try {      byte[] message=sendQueue.take();      DatagramPacket req=requests.remove(ModbusUtil.registersToInt(message));      if (req != null) {        DatagramPacket res=new DatagramPacket(message,message.length,req.getAddress(),req.getPort());        socket.send(res);        logger.debug("Sent package from queue");      }    } catch (    Exception ex) {      if (running) {        logger.error("Problem reading UDP socket",ex);      }    }  } while (running);  closed=true;}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  findAndInit(bcme.iterator());}  }
class C{  protected final void LCMP_CMOV(Instruction s,RegisterOperand result,Operand val1,Operand val2,ConditionOperand cond,Operand trueValue,Operand falseValue){  if (cond.isGREATER() || cond.isLESS_EQUAL()) {    Operand swap_temp;    cond.flipOperands();    swap_temp=val1;    val1=val2;    val2=swap_temp;  }  if (VM.VerifyAssertions) {    opt_assert(cond.isEQUAL() || cond.isNOT_EQUAL() || cond.isLESS()|| cond.isGREATER_EQUAL());  }  RegisterOperand one=regpool.makeTempInt();  RegisterOperand lone=regpool.makeTempInt();  Operand two, ltwo;  if (val1 instanceof RegisterOperand) {    Register val1_reg=val1.asRegister().getRegister();    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,one,new RegisterOperand(val1_reg,TypeReference.Int))));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lone,new RegisterOperand(regpool.getSecondReg(val1_reg),TypeReference.Int))));  } else {    LongConstantOperand tmp=(LongConstantOperand)val1;    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,one,IC(tmp.upper32()))));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lone,IC(tmp.lower32()))));  }  if (val2 instanceof RegisterOperand) {    two=val2;    ((RegisterOperand)two).setType(TypeReference.Int);    ltwo=new RegisterOperand(burs.ir.regpool.getSecondReg(val2.asRegister().getRegister()),TypeReference.Int);  } else {    LongConstantOperand tmp=(LongConstantOperand)val2;    two=IC(tmp.upper32());    ltwo=IC(tmp.lower32());  }  if (cond.isEQUAL() || cond.isNOT_EQUAL()) {    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SUB,lone.copyRO(),ltwo)));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,one.copyRO(),two)));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,one.copyRO(),lone.copyRO())));  } else {    EMIT(CPOS(s,MIR_Compare.create(IA32_CMP,lone.copyRO(),ltwo)));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,one.copyRO(),two)));  }  CMOV_MOV(s,result,cond,trueValue,falseValue);}  }
class C{  public void removeVertexAndReferences(Vertex vertex){  Vertex managed=findById(vertex.getId());  if (managed == null) {    return;  }  Iterator<Relationship> iterator=findAllRelationshipsTo(vertex).iterator();  while (iterator.hasNext()) {    Relationship relationship=iterator.next();    relationship.getSource().internalRemoveRelationship(relationship);  }  removeVertex(vertex);}  }
class C{  @Override public final int nextIndex(){  return _nextIndex;}  }
class C{  protected Glossary_Impl(){  super();}  }
class C{  public AppletServer(int port,ClassPool src) throws IOException, NotFoundException, CannotCompileException {  this(new ClassPool(src),new StubGenerator(),port);}  }
class C{  public TaskList restoreApplicationFullCopy(URI id,VolumeGroupFullCopyRestoreParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_RESTORE_FULL_COPY_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  public void restoreCurrentBackground(){  if (savedBackground.isPresent()) {    setArenaBackground(savedBackground.get());    savedBackground=Optional.empty();  } else {    setArenaBackground(null);  }}  }
class C{  private String compute(double left,String right,boolean isInteger){  if (Double.isNaN(left) && right == null) {    return null;  }  if (isInteger && left == (int)left) {    return (int)left + (right == null ? "" : right);  } else   if (Double.isInfinite(left)) {    return Tools.formatNumber(left) + (right == null ? "" : right);  } else {    return (Double.isNaN(left) ? "" : left) + (right == null ? "" : right);  }}  }
class C{  public JPanel createVerticalPanel(boolean threeD){  JPanel p=N9ComponentFactory.createPanel_style1(null).setDrawBg(threeD);  p.setLayout(new BoxLayout(p,BoxLayout.Y_AXIS));  p.setAlignmentY(TOP_ALIGNMENT);  p.setAlignmentX(LEFT_ALIGNMENT);  if (threeD) {    p.setBorder(loweredBorder);  }  return p;}  }
class C{  private void migrateRpConsistencyGroups(){  log.info("Migrating RP+VPlex BlockConsistencyGroup objects and Volume references.");  List<URI> protectionSetURIs=dbClient.queryByType(ProtectionSet.class,true);  log.info("Scanning ProtectionSets for stale Volume references.");  for (  URI protectionSetURI : protectionSetURIs) {    if (cleanupStaleProtectionSetVolumes(protectionSetURI)) {      log.info("ProtectionSet {} has been removed so continuing to the next one.",protectionSetURI);    }  }  consolidateDuplicates();  protectionSetURIs=dbClient.queryByType(ProtectionSet.class,true);  log.info("Scanning ProtectionSets for RP+VPlex Volume references.");  for (  URI protectionSetURI : protectionSetURIs) {    ProtectionSet protectionSet=dbClient.queryObject(ProtectionSet.class,protectionSetURI);    log.info("Scanning ProtectionSet {}|{} ",protectionSet.getLabel(),protectionSet.getId());    if (protectionSet != null && protectionSet.getVolumes() != null) {      if (protectionSet.getVolumes() != null && !protectionSet.getVolumes().isEmpty()) {        Iterator<String> protectionSetVolumes=protectionSet.getVolumes().iterator();        Volume protectionSetVolume=null;        while (protectionSetVolumes.hasNext()) {          Volume vol=dbClient.queryObject(Volume.class,URI.create(protectionSetVolumes.next()));          if (vol != null) {            log.info("Using ProtectionSet Volume {}|{} to migrate consistency group.",vol.getLabel(),vol.getId());            protectionSetVolume=vol;            break;          }        }        BlockConsistencyGroup primaryCg=null;        if (protectionSetVolume.getConsistencyGroups() != null && !protectionSetVolume.getConsistencyGroups().isEmpty() && protectionSetVolume.getConsistencyGroups().size() == 2) {          log.info("Found RP+VPlex ProtectionSet {}|{}.  Preparing to migrated referenced RP+VPlex " + "volumes and associated BlockConsistencyGroups.",protectionSet.getLabel(),protectionSet.getId());          Iterator<String> cgUriItr=protectionSetVolume.getConsistencyGroups().iterator();          log.info("Attempting to locate the RP BlockConsistencyGroup for Volume {}|{}",protectionSetVolume.getLabel(),protectionSetVolume.getId());          while (cgUriItr.hasNext()) {            BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,URI.create(cgUriItr.next()));            log.info("Found BlockConsistencyGroup {} of type {}",cg.getLabel(),cg.getType());            if (cg.getTypes() != null && cg.getType().equals(Types.RP.name())) {              log.info("Primary RP BlockConsistencyGroup {} found for ProtectionSet {}.",cg.getLabel(),protectionSet.getLabel());              primaryCg=cg;              primaryCg.addConsistencyGroupTypes(Types.RP.name());              break;            }          }          if (primaryCg == null) {            log.warn("Unable to migration volumes/consistency groups associated with ProtectionSet {}.  Could not find an RP associated BlockConsistencyGroup for Volume {}.  ",protectionSet.getId(),protectionSetVolume.getId());            continue;          }          primaryCg.addSystemConsistencyGroup(protectionSet.getProtectionSystem().toString(),"ViPR-" + primaryCg.getLabel());          Iterator<String> volumeUriItr=protectionSet.getVolumes().iterator();          while (volumeUriItr.hasNext()) {            String volumeUri=volumeUriItr.next();            Volume volume=dbClient.queryObject(Volume.class,URI.create(volumeUri));            if (volume != null) {              log.info("Scanning volume {} for protection set {}.",volume.getLabel(),protectionSet.getLabel());              BlockConsistencyGroup vplexCg=null;              if (volume.getConsistencyGroups() != null && !volume.getConsistencyGroups().isEmpty()) {                cgUriItr=volume.getConsistencyGroups().iterator();                while (cgUriItr.hasNext()) {                  BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,URI.create(cgUriItr.next()));                  if (cg.getType() != null && cg.getType().equals(Types.VPLEX.name())) {                    vplexCg=cg;                    log.info("Volume {} belongs to VPLEX BlockConsistencyGroup {}.",volume.getLabel(),cg.getLabel());                    break;                  }                }              }              if (vplexCg != null && volume.getAssociatedVolumes() != null) {                StorageSystem vplexStorageSystem=dbClient.queryObject(StorageSystem.class,vplexCg.getStorageController());                String clusterId=getVPlexClusterFromVolume(volume);                primaryCg.addSystemConsistencyGroup(vplexStorageSystem.getId().toString(),BlockConsistencyGroupUtils.buildClusterCgName(clusterId,vplexCg.getLabel()));                if (NullColumnValueGetter.isNullURI(primaryCg.getStorageController())) {                  primaryCg.setStorageController(vplexStorageSystem.getId());                }                if (!primaryCg.getTypes().contains(Types.VPLEX.name())) {                  primaryCg.addConsistencyGroupTypes(Types.VPLEX.name());                }                primaryCg.setType(NullColumnValueGetter.getNullStr());                primaryCg.setDeviceName(NullColumnValueGetter.getNullStr());                dbClient.persistObject(primaryCg);                volume.setConsistencyGroup(primaryCg.getId());                StringSet cgs=volume.getConsistencyGroups();                cgs.remove(vplexCg.getId().toString());                volume.setConsistencyGroups(cgs);                dbClient.persistObject(volume);                log.info("Volume {} fields have been migrated.",volume.getLabel());                dbClient.markForDeletion(vplexCg);                log.info("VPlex BlockConsistencyGroup {} has been migrated over to RP BlockConsistencyGroup and has been deleted.",vplexCg.getLabel(),primaryCg.getLabel());              }            }          }        } else         if (protectionSetVolume != null && protectionSetVolume.getConsistencyGroups() != null && !protectionSetVolume.getConsistencyGroups().isEmpty() && protectionSetVolume.getConsistencyGroups().size() == 1) {          Iterator<String> cgUriItr=protectionSetVolume.getConsistencyGroups().iterator();          BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,URI.create(cgUriItr.next()));          cg.addConsistencyGroupTypes(cg.getType());          cg.addSystemConsistencyGroup(protectionSet.getProtectionSystem().toString(),"ViPR-" + cg.getLabel());          cg.setType(NullColumnValueGetter.getNullStr());          cg.setDeviceName(NullColumnValueGetter.getNullStr());          dbClient.persistObject(cg);        }      }    }  }}  }
class C{  public NamedRangeSet copy(){  NamedRangeSet copy=new NamedRangeSet();  for (  NamedRange range : ranges) {    copy.ranges.add(new NamedRange(range.start,range.end,range.name));  }  return copy;}  }
class C{  public static int[][] doubleToIntArray(double[][] array){  if (array == null) {    return null;  }  int[][] intArray=new int[array.length][];  for (int i=0; i < array.length; i++) {    if (array[i] == null) {      intArray[i]=null;    } else {      intArray[i]=new int[array[i].length];      for (int j=0; j < array[i].length; j++) {        intArray[i][j]=(int)array[i][j];      }    }  }  return intArray;}  }
class C{  public static void main(String[] argv){  EnvLoader.init();  ArgsServerBase args=new ArgsServerBaratine(argv);  args.doMain();}  }
class C{  private FileUtils(){}  }
class C{  private WeatherUpdater(){  onTurnReached(0);}  }
class C{  public Notification(String type,Object source,long sequenceNumber,long timeStamp,String message){  super(source);  this.source=source;  this.type=type;  this.sequenceNumber=sequenceNumber;  this.timeStamp=timeStamp;  this.message=message;}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T findValueOfType(Collection<?> collection,Class<T> type){  if (isEmpty(collection)) {    return null;  }  T value=null;  for (  Object element : collection) {    if (type == null || type.isInstance(element)) {      if (value != null) {        return null;      }      value=(T)element;    }  }  return value;}  }
class C{  @Override public final boolean isClosed(){  return _source == null || _source.isClosed() || _writeBuffer == null;}  }
class C{  public void unsort(){  _isSorted=false;  _activeColumn=-1;}  }
class C{  public SGenSwitch(){  if (modelPackage == null) {    modelPackage=SGenPackage.eINSTANCE;  }}  }
class C{  public Person(){}  }
class C{  private IMFDocumentsObjectFieldsFactory(){}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Long && val instanceof Integer) {          long k=unwrapKey(key);          int v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  @Override public void processHttpMessage(int toolFlag,boolean isRequest,IHttpRequestResponse httpRequestResponse){  if (toolFlag == IBurpExtenderCallbacks.TOOL_PROXY && !isRequest) {    TableEntry entry=processSSOScan(httpRequestResponse);    if (entry != null) {      updateTables(entry);    }    processLoginPossibilities(httpRequestResponse);    prev_message=httpRequestResponse;  }}  }
class C{  static private String LONG_Min_Minus(){  return "-9223372036854775809";}  }
class C{  public synchronized void unsetLogTargets(){  unsetLogTargets(false);}  }
class C{  private void cmd_searchTo(){  int row=xMatchedTable.getSelectedRow();  log.config("Row=" + row);  double qty=0.0;  if (row < 0) {    xMatchedToTable.setRowCount(0);  } else {    String displayString=(String)matchTo.getSelectedItem();    int matchToType=matchFrom.getSelectedIndex();    double docQty=((Double)xMatchedTable.getValueAt(row,I_QTY)).doubleValue();    double matchedQty=((Double)xMatchedTable.getValueAt(row,I_MATCHED)).doubleValue();    qty=docQty - matchedQty;    xMatchedToTable=(MiniTable)cmd_searchTo(xMatchedTable,xMatchedToTable,displayString,matchToType,sameBPartner.isSelected(),sameProduct.isSelected(),sameQty.isSelected(),matchMode.getSelectedIndex() == MODE_MATCHED);  }  m_xMatched=new BigDecimal(qty);  xMatched.setValue(m_xMatched);  xMatchedTo.setValue(Env.ZERO);  difference.setValue(m_xMatched);  statusBar.setStatusLine(matchFrom.getSelectedItem().toString() + "# = " + xMatchedTable.getRowCount()+ " - "+ matchTo.getSelectedItem().toString()+ "# = "+ xMatchedToTable.getRowCount(),xMatchedToTable.getRowCount() == 0);  statusBar.setStatusDB(0);}  }
class C{  @Override public void V(final Object ex,final FormObject formObj,final int actionID){  if (showMethods) {    System.out.println("DefaultActionHandler.V()");  }  javascript.execute(formObj,PdfDictionary.V,actionID,getKeyPressed(ex));}  }
class C{  public static UriBuilder fromUri(URI uri){  return new UriBuilder().uri(uri);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void initialize(CordovaInterface cordova,CordovaWebView webView){}  }
class C{  public boolean isMicroslotsLockedToMinuteRollover(){  return !mMessage.get(MICRO_SLOTS_TO_MINUTE_ROLLOVER_UNLOCKED);}  }
class C{  public void compile(String name,String code) throws CompilationFailedException {  CompilationUnit unit=new CompilationUnit(configuration);  unit.addSource(new SourceUnit(name,code,configuration,unit.getClassLoader(),unit.getErrorCollector()));  unit.compile();}  }
class C{  protected Entry(BeanMap owner,String key,Object value){  super(key,value);  this.owner=owner;}  }
class C{  protected MultiplicativeExpressionImpl(){  super();}  }
class C{  public Days toStandardDays(){  return Days.days(getValue() / DateTimeConstants.MINUTES_PER_DAY);}  }
class C{  public static String appendPath(String pathTo,String pathFrom){  if (pathTo == null || pathTo.length() == 0) {    return pathFrom;  } else   if (pathFrom == null || pathFrom.length() == 0) {    return pathTo;  } else {    return pathTo + File.pathSeparator + pathFrom;  }}  }
class C{  private void goToMaster(){  if (logger.isDebugEnabled()) {    logger.debug("Transitioning to MASTER role");  }  cntTransitionToMaster.updateCounterWithFlush();  IClosableIterator<Map.Entry<String,Versioned<DeviceSyncRepresentation>>> iter=null;  try {    iter=storeClient.entries();  } catch (  SyncException e) {    cntSyncException.updateCounterWithFlush();    logger.error("Failed to read devices from sync store",e);    return;  }  try {    while (iter.hasNext()) {      Versioned<DeviceSyncRepresentation> versionedDevice=iter.next().getValue();      DeviceSyncRepresentation storedDevice=versionedDevice.getValue();      if (storedDevice == null)       continue;      cntDevicesFromStore.updateCounterWithFlush();      for (      SyncEntity se : storedDevice.getEntities()) {        learnDeviceByEntity(se.asEntity());      }    }  }  finally {    if (iter != null)     iter.close();  }  storeConsolidateTask.reschedule(initialSyncStoreConsolidateMs,TimeUnit.MILLISECONDS);}  }
class C{  public void warn(Object message,Throwable exception){  log(Level.WARNING,String.valueOf(message),exception);}  }
class C{  public void send(String message){}  }
class C{  public void paintListBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.CHECK__CONDITION:    setCondition((Expression)newValue);  return;case SexecPackage.CHECK__REFS:getRefs().clear();getRefs().addAll((Collection<? extends CheckRef>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void mutableDivide(Complex c){  mutableDivide(c.real,c.imag);}  }
class C{  private boolean isSubmitType(){  return TYPE_SUBMIT.equals(dataForm.getType());}  }
class C{  public String doubleMetaphone(String value,boolean alternate){  value=cleanInput(value);  if (value == null) {    return null;  }  boolean slavoGermanic=isSlavoGermanic(value);  int index=isSilentStart(value) ? 1 : 0;  DoubleMetaphoneResult result=new DoubleMetaphoneResult(this.getMaxCodeLen());  while (!result.isComplete() && index <= value.length() - 1) {switch (value.charAt(index)) {case 'A':case 'E':case 'I':case 'O':case 'U':case 'Y':      index=handleAEIOUY(value,result,index);    break;case 'B':  result.append('P');index=charAt(value,index + 1) == 'B' ? index + 2 : index + 1;break;case '\u00C7':result.append('S');index++;break;case 'C':index=handleC(value,result,index);break;case 'D':index=handleD(value,result,index);break;case 'F':result.append('F');index=charAt(value,index + 1) == 'F' ? index + 2 : index + 1;break;case 'G':index=handleG(value,result,index,slavoGermanic);break;case 'H':index=handleH(value,result,index);break;case 'J':index=handleJ(value,result,index,slavoGermanic);break;case 'K':result.append('K');index=charAt(value,index + 1) == 'K' ? index + 2 : index + 1;break;case 'L':index=handleL(value,result,index);break;case 'M':result.append('M');index=conditionM0(value,index) ? index + 2 : index + 1;break;case 'N':result.append('N');index=charAt(value,index + 1) == 'N' ? index + 2 : index + 1;break;case '\u00D1':result.append('N');index++;break;case 'P':index=handleP(value,result,index);break;case 'Q':result.append('K');index=charAt(value,index + 1) == 'Q' ? index + 2 : index + 1;break;case 'R':index=handleR(value,result,index,slavoGermanic);break;case 'S':index=handleS(value,result,index,slavoGermanic);break;case 'T':index=handleT(value,result,index);break;case 'V':result.append('F');index=charAt(value,index + 1) == 'V' ? index + 2 : index + 1;break;case 'W':index=handleW(value,result,index);break;case 'X':index=handleX(value,result,index);break;case 'Z':index=handleZ(value,result,index,slavoGermanic);break;default :index++;break;}}return alternate ? result.getAlternate() : result.getPrimary();}  }
class C{  @SuppressWarnings("sourcesection") @Deprecated public final SourceSection createSection(String identifier,int lineNumber){  final int charIndex=getTextMap().lineStartOffset(lineNumber);  final int length=getTextMap().lineLength(lineNumber);  return createSection(identifier,charIndex,length);}  }
class C{  public static void writeImageMap(PrintWriter writer,String name,ChartRenderingInfo info,boolean useOverLibForToolTips) throws IOException {  ToolTipTagFragmentGenerator toolTipTagFragmentGenerator;  if (useOverLibForToolTips) {    toolTipTagFragmentGenerator=new OverLIBToolTipTagFragmentGenerator();  } else {    toolTipTagFragmentGenerator=new StandardToolTipTagFragmentGenerator();  }  ImageMapUtilities.writeImageMap(writer,name,info,toolTipTagFragmentGenerator,new StandardURLTagFragmentGenerator());}  }
class C{  @Override public PutObjectResult putObject(PutObjectRequest putObjectRequest,AmazonS3Client s3Client){  LOGGER.debug("putObject(): putObjectRequest.getBucketName() = " + putObjectRequest.getBucketName() + ", putObjectRequest.getKey() = "+ putObjectRequest.getKey());  String s3BucketName=putObjectRequest.getBucketName();  InputStream inputStream=putObjectRequest.getInputStream();  ObjectMetadata metadata=putObjectRequest.getMetadata();  if (metadata == null) {    metadata=new ObjectMetadata();  }  File file=putObjectRequest.getFile();  if (file != null) {    try {      inputStream=new FileInputStream(file);      metadata.setContentLength(file.length());    } catch (    FileNotFoundException e) {      throw new IllegalArgumentException("File not found " + file,e);    }  }  String s3ObjectKey=putObjectRequest.getKey();  String s3ObjectVersion=MOCK_S3_BUCKET_NAME_VERSIONING_ENABLED.equals(putObjectRequest.getBucketName()) ? UUID.randomUUID().toString() : null;  String s3ObjectKeyVersion=s3ObjectKey + (s3ObjectVersion != null ? s3ObjectVersion : "");  byte[] s3ObjectData;  try {    s3ObjectData=IOUtils.toByteArray(inputStream);    metadata.setContentLength(s3ObjectData.length);  } catch (  IOException e) {    throw new IllegalArgumentException("Error converting input stream into byte array",e);  } finally {    try {      inputStream.close();    } catch (    IOException e) {      LOGGER.error("Error closing stream " + inputStream,e);    }  }  metadata.setLastModified(new Date());  MockS3Bucket mockS3Bucket=getOrCreateBucket(s3BucketName);  MockS3Object mockS3Object=new MockS3Object();  mockS3Object.setKey(s3ObjectKey);  mockS3Object.setVersion(s3ObjectVersion);  mockS3Object.setData(s3ObjectData);  mockS3Object.setObjectMetadata(metadata);  mockS3Bucket.getObjects().put(s3ObjectKey,mockS3Object);  mockS3Bucket.getVersions().put(s3ObjectKeyVersion,mockS3Object);  return new PutObjectResult();}  }
class C{  public StoreNamedField(Token t,Symbol symbol,String field,Expression value){  super(t);  this.symbol=symbol;  this.field=field;  this.value=value;}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.FULL_TYPE_REFERENCE__MODULE_NAME:    return MODULE_NAME_EDEFAULT == null ? moduleName != null : !MODULE_NAME_EDEFAULT.equals(moduleName);}return super.eIsSet(featureID);}  }
class C{  void createEntry(int hash,K key,V value,int bucketIndex){  Entry<K,V> e=table[bucketIndex];  table[bucketIndex]=new Entry<K,V>(hash,key,value,e);  size++;}  }
class C{  private void publishEvent(final MapPaneEvent ev){  for (  final MapPaneListener listener : listeners) {switch (ev.getType()) {case NEW_CONTEXT:      listener.onNewContext(ev);    break;case NEW_RENDERER:  listener.onNewRenderer(ev);break;case PANE_RESIZED:listener.onResized(ev);break;case DISPLAY_AREA_CHANGED:listener.onDisplayAreaChanged(ev);break;case RENDERING_STARTED:listener.onRenderingStarted(ev);break;case RENDERING_STOPPED:listener.onRenderingStopped(ev);break;case RENDERING_PROGRESS:listener.onRenderingProgress(ev);break;}}}  }
class C{  private Vector<ClassDefinition> computeUniqueCatchList(ClassDeclaration[] exceptions){  Vector<ClassDefinition> uniqueList=new Vector<>();  uniqueList.addElement(defRuntimeException);  uniqueList.addElement(defRemoteException);  nextException:   for (int i=0; i < exceptions.length; i++) {    ClassDeclaration decl=exceptions[i];    try {      if (defException.subClassOf(env,decl)) {        uniqueList.clear();        break;      } else       if (!defException.superClassOf(env,decl)) {        continue;      }      for (int j=0; j < uniqueList.size(); ) {        ClassDefinition def=uniqueList.elementAt(j);        if (def.superClassOf(env,decl)) {          continue nextException;        } else         if (def.subClassOf(env,decl)) {          uniqueList.removeElementAt(j);        } else {          j++;        }      }      uniqueList.addElement(decl.getClassDefinition(env));    } catch (    ClassNotFound e) {      env.error(0,"class.not.found",e.name,decl.getName());    }  }  return uniqueList;}  }
class C{  public AssignmentTree buildAssignment(ExpressionTree lhs,ExpressionTree rhs){  JCTree.JCAssign assign=maker.Assign((JCTree.JCExpression)lhs,(JCTree.JCExpression)rhs);  assign.setType((Type)InternalUtils.typeOf(lhs));  return assign;}  }
class C{  public XML addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void addRepository(Repository repository){  getRepositories().add(repository);}  }
class C{  public static boolean polyIntersect(float[] polyPoints1,float[] polyPoints2){  for (int i=0; i < polyPoints1.length / 2 - 1; i++) {    for (int j=0; j < polyPoints2.length / 2 - 1; j++) {      if (intersects(polyPoints1[2 * i],polyPoints1[2 * i + 1],polyPoints1[2 * i + 2],polyPoints1[2 * i + 3],polyPoints2[2 * j],polyPoints2[2 * j + 1],polyPoints2[2 * j + 2],polyPoints2[2 * j + 3]))       return true;    }  }  return false;}  }
class C{  public boolean isSetSrcPath(){  return this.srcPath != null;}  }
class C{  private void processPerfResponse(String result,String uniqueName,int threadNum,BaseRequest req,BaseResponse resp){  try {    TankResultBuilder builder=new TankResultBuilder();    builder.withJobId(APITestHarness.getInstance().getAgentRunData().getJobId()).withInstanceId(APITestHarness.getInstance().getAgentRunData().getInstanceId());    if (resp != null) {      builder.withResponseTime((int)resp.getResponseTime());      builder.withStatusCode(resp.getHttpCode());      builder.withResponseSize(resp.getResponseBytes() != null ? resp.getResponseBytes().length : 0);    }    if (!result.equalsIgnoreCase(TankConstants.HTTP_CASE_PASS)) {      builder.withError(true);    }    if (!StringUtils.isEmpty(loggingKey)) {      builder.withRequestName(loggingKey);      APITestHarness.getInstance().queueTimingResult(builder.build());    }    if (tsc.getTimerMap().isActive()) {      this.tsc.getTimerMap().addResult(builder.build());    }  } catch (  Exception e) {    LOG.warn("Error: req" + req + " : resp="+ resp+ "  : "+ e,e);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String fieldName;  int fieldNum=0;  String assignmentType;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double xCoord, yCoord, value, z;  int progress;  double cellSize=-1.0;  int rows;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  boolean useRecID=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  fieldName=args[2];  assignmentType=args[3].toLowerCase();  if (args[4].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[4]);  }  if (!args[5].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[5]);  }  baseFileHeader=args[6];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    if (input.getShapeType() != ShapeType.POINT && input.getShapeType() != ShapeType.POINTZ && input.getShapeType() != ShapeType.POINTM && input.getShapeType() != ShapeType.MULTIPOINT && input.getShapeType() != ShapeType.MULTIPOINTZ && input.getShapeType() != ShapeType.MULTIPOINTM) {      showFeedback("The input shapefile must be of a 'point' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (int i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(fieldName)) {        fieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          if (field.getDecimalCount() == 0) {            dataType=WhiteboxRasterBase.DataType.INTEGER;          } else {            dataType=WhiteboxRasterBase.DataType.FLOAT;          }        } else {          useRecID=true;        }      }    }    if (fieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      rows=output.getNumberRows();      cols=output.getNumberColumns();    }    double[][] geometry;    if (assignmentType.equals("minimum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            value=Double.valueOf(data[fieldNum].toString());            z=output.getValue(row,col);            if (z == backgroundValue || z < value) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("maximum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue || z > value) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("sum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue) {              output.setValue(row,col,value);            } else {              output.setValue(row,col,value + z);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("first")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("last")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            output.setValue(row,col,value);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("mean")) {    } else     if (assignmentType.equals("range")) {    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  DynamicReceiver.register(this);}  }
class C{  private static <E>int calculateSize(List<E> sortedInputList,Comparator<? super E> comparator){  long permutations=1;  int n=1;  int r=1;  while (n < sortedInputList.size()) {    int comparison=comparator.compare(sortedInputList.get(n - 1),sortedInputList.get(n));    if (comparison < 0) {      permutations*=binomial(n,r);      r=0;      if (!isPositiveInt(permutations)) {        return Integer.MAX_VALUE;      }    }    n++;    r++;  }  permutations*=binomial(n,r);  if (!isPositiveInt(permutations)) {    return Integer.MAX_VALUE;  }  return (int)permutations;}  }
class C{  public void save(OutputStream stream) throws IOException {  save(stream,false);}  }
class C{  public boolean connected(int p,int q){  validate(p);  validate(q);  return id[p] == id[q];}  }
class C{  public Anonymous_traceDirective_1_ createAnonymous_traceDirective_1_(){  Anonymous_traceDirective_1_Impl anonymous_traceDirective_1_=new Anonymous_traceDirective_1_Impl();  return anonymous_traceDirective_1_;}  }
class C{  public void testUserConfiguresDriverAndRequestsDataSource() throws MalformedURLException {  DataSourceFixture fixture=ConfigurationFixtureFactory.createDataSource();  if ("glassfish4x".equals(getContainer().getId())) {    fixture.jndiLocation="jdbc/__default";  }  testServletThatIssuesGetConnectionFrom(fixture,"datasource");}  }
class C{  public static Operator toOperator(String token){  return (Operator)CODES.get(token);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static void sort(Comparable[] a){  StdRandom.shuffle(a);  sort(a,0,a.length - 1);  assert isSorted(a);}  }
class C{  public static Object loadHere(String basedir,ScriptEngine engine,String loadtarget) throws FileNotFoundException, ScriptException {  File file=new File(basedir);  file=(file.isDirectory() ? file : file.getParentFile());  return load(new File(file,loadtarget),engine);}  }
class C{  private boolean isValidSsn(long ssn){  if (((ssn >= 1010001) && (ssn <= 699999999)) || ((ssn >= 700010001) && (ssn <= 733999999)) || ((ssn >= 750010001) && (ssn <= 763999999))|| ((ssn >= 764010001) && (ssn <= 899999999))) {    return true;  }  return false;}  }
class C{  public void removeStores(List<Store> stores){  Logger.d("AptoideDatabase","Deleting stores " + stores);  if (stores != null && stores.size() > 0) {    database.beginTransaction();    for (    Store store : stores) {      database.delete("repo","id_repo = ? ",new String[]{String.valueOf(store.getId())});    }    database.setTransactionSuccessful();    database.endTransaction();    invalidateUpdates();  }}  }
class C{  public void putHeaderParams(String key,String value){  this.mHeaderParams.put(key,value);}  }
class C{  public TextChangeImpl(@NotNull CharSequence text,int start,int end) throws IllegalArgumentException {  if (start < 0) {    throw new IllegalArgumentException(String.format("Can't construct new %s object. Reason: given start index (%d) is negative. " + "End index: %d, text: '%s'",getClass().getName(),start,end,text));  }  if (end < start) {    throw new IllegalArgumentException(String.format("Can't construct new %s object. Reason: given end index (%d) is less than " + "start index (%d). Text: '%s'",getClass().getName(),end,start,text));  }  myText.append(text);  myStart=start;  myEnd=end;}  }
class C{  public RecursiveZipRootHandler(final HttpServerRequest req,String serverRoot,Buffer data,Set<String> finalOriginalParams,RecursiveHandlerFactory.RecursiveHandlerTypes zipType){  this.req=req;  this.serverRoot=serverRoot;  this.data=data;  this.finalOriginalParams=finalOriginalParams;  this.zipType=zipType;}  }
class C{  public CommandLine add(List<String> args){  if (args != null && !args.isEmpty()) {    line.addAll(args);  }  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static int canSeeFocus(SearchPattern pattern,IPath projectOrJarPath){  try {    IJavaModel model=JavaModelManager.getJavaModelManager().getJavaModel();    IJavaProject project=getJavaProject(projectOrJarPath,model);    IJavaElement[] focuses=getFocusedElementsAndTypes(pattern,project,null);    if (focuses.length == 0)     return PROJECT_CAN_NOT_SEE_FOCUS;    if (project != null) {      return canSeeFocus(focuses,(JavaProject)project,null);    }    int result=PROJECT_CAN_NOT_SEE_FOCUS;    IJavaProject[] allProjects=model.getJavaProjects();    for (int i=0, length=allProjects.length; i < length; i++) {      JavaProject otherProject=(JavaProject)allProjects[i];      IClasspathEntry entry=otherProject.getClasspathEntryFor(projectOrJarPath);      if (entry != null && entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {        int canSeeFocus=canSeeFocus(focuses,otherProject,null);        if (canSeeFocus == PROJECT_CAN_SEE_FOCUS)         return PROJECT_CAN_SEE_FOCUS;        if (canSeeFocus == PROJECT_SOURCE_CAN_NOT_SEE_FOCUS)         result=PROJECT_SOURCE_CAN_NOT_SEE_FOCUS;      }    }    return result;  } catch (  JavaModelException e) {    return PROJECT_CAN_NOT_SEE_FOCUS;  }}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  public <T extends Node>T jjtGetChild(Class<T> type){  for (  Node n : children) {    if (type.isInstance(n)) {      return (T)n;    }  }  return null;}  }
class C{  @Override protected int computeHorizontalScrollOffset(){  return mSelectedPosition;}  }
class C{  @Override public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  @Override public final WriteStream writeStream(){  return _writeStream;}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {  startPrefixMapping(prefix,uri,true);}  }
class C{  public CADRG(LatLonPoint center,float scale,int width,int height){  super(center,scale,width,height);  minscale=1000000 / CADRG_SCALE_LIMIT;}  }
class C{  public static double harmonicMean(int size,double sumOfInversions){  return size / sumOfInversions;}  }
class C{  public ImportException(String message,ImportExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public boolean hasAttribute(QName id){  return (state.attributes == null) ? false : state.attributes.containsKey(id);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.FOR_STATEMENT;}  }
class C{  public int print(Graphics g,PageFormat pageFormat,int pageIndex){  return RPrintUtilities.printDocumentWordWrap(g,this,getFont(),pageIndex,pageFormat,getTabSize());}  }
class C{  public void rolledback(CompositeTransaction tx){  removeTransaction(tx);}  }
class C{  public static boolean isConnected(Context context){  ConnectivityManager conMan=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo infoWifi=conMan.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  if (infoWifi != null) {    State wifi=infoWifi.getState();    if (wifi == NetworkInfo.State.CONNECTED) {      logger.debug("Wifi is connected");      return true;    }  }  NetworkInfo infoMobile=conMan.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);  if (infoMobile != null) {    State mobile=infoMobile.getState();    if (mobile == NetworkInfo.State.CONNECTED) {      logger.debug("Mobile data is connected");      return true;    }  }  logger.debug("Network not available");  return false;}  }
class C{  protected void expandCluster(SimilarityQuery<O> snnInstance,DBIDRef startObjectID,FiniteProgress objprog,IndefiniteProgress clusprog){  ArrayModifiableDBIDs seeds=findSNNNeighbors(snnInstance,startObjectID);  if (seeds.size() < minpts) {    noise.add(startObjectID);    processedIDs.add(startObjectID);    if (objprog != null && clusprog != null) {      objprog.setProcessed(processedIDs.size(),LOG);      clusprog.setProcessed(resultList.size(),LOG);    }    return;  }  ModifiableDBIDs currentCluster=DBIDUtil.newArray();  for (DBIDIter seed=seeds.iter(); seed.valid(); seed.advance()) {    if (!processedIDs.contains(seed)) {      currentCluster.add(seed);      processedIDs.add(seed);    } else     if (noise.contains(seed)) {      currentCluster.add(seed);      noise.remove(seed);    }  }  DBIDVar o=DBIDUtil.newVar();  while (seeds.size() > 0) {    seeds.pop(o);    ArrayModifiableDBIDs neighborhood=findSNNNeighbors(snnInstance,o);    if (neighborhood.size() >= minpts) {      for (DBIDIter iter=neighborhood.iter(); iter.valid(); iter.advance()) {        boolean inNoise=noise.contains(iter);        boolean unclassified=!processedIDs.contains(iter);        if (inNoise || unclassified) {          if (unclassified) {            seeds.add(iter);          }          currentCluster.add(iter);          processedIDs.add(iter);          if (inNoise) {            noise.remove(iter);          }        }      }    }    if (objprog != null && clusprog != null) {      objprog.setProcessed(processedIDs.size(),LOG);      int numClusters=currentCluster.size() > minpts ? resultList.size() + 1 : resultList.size();      clusprog.setProcessed(numClusters,LOG);    }    if (processedIDs.size() == snnInstance.getRelation().size() && noise.size() == 0) {      break;    }  }  if (currentCluster.size() >= minpts) {    resultList.add(currentCluster);  } else {    noise.addDBIDs(currentCluster);    noise.add(startObjectID);    processedIDs.add(startObjectID);  }}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] buffer=new char[n];  int pos=0;  while (pos < n) {    buffer[pos]=next();    if (end()) {      throw syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(buffer);}  }
class C{  private JPanel createButtonPanel(){  JPanel panel=new JPanel();  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));  panel.add(Box.createHorizontalGlue());  panel.add(Box.createHorizontalGlue());  JButton okButton=new JButton(ok);  JButton cancelButton=new JButton(cancel);  JButton helpButton=new JButton(help);  Dimension d=new Dimension(Math.max(cancelButton.getPreferredSize().width,70),cancelButton.getPreferredSize().height);  okButton.setPreferredSize(d);  cancelButton.setPreferredSize(d);  helpButton.setPreferredSize(d);  getRootPane().setDefaultButton(okButton);  panel.add(okButton);  panel.add(Box.createHorizontalStrut(10));  panel.add(cancelButton);  panel.add(Box.createHorizontalStrut(10));  panel.add(helpButton);  return panel;}  }
class C{  @SuppressWarnings("unchecked") public static <R>R readField(Object object,String fieldName) throws NoSuchFieldException {  return readAvailableField((Class<Object>)object.getClass(),object,fieldName);}  }
class C{  public AccountHeaderBuilder withProfileImagesVisible(boolean profileImagesVisible){  this.mProfileImagesVisible=profileImagesVisible;  return this;}  }
class C{  public void addCheckBoxActionListener(ActionListener al){  m_enableDistributedExperiment.addActionListener(al);}  }
class C{  protected void scrollBackward(){  int selectedIndex=tabPane.getSelectedIndex();  if (--selectedIndex < 0) {    tabPane.setSelectedIndex(tabPane.getTabCount() == 0 ? -1 : 0);  } else {    tabPane.setSelectedIndex(selectedIndex);  }  tabPane.repaint();}  }
class C{  public IdentityArrayList(final K a[]){  this(a,0,a.length);}  }
class C{  public static Object[] assertThreadIdToSequenceIdMapHasEntryIds(){  EventID[] evids=new EventID[5];  Map map=pool.getThreadIdToSequenceIdMap();  assertNotNull(map);  evids[0]=putAlleventId1;  evids[1]=putAlleventId2;  evids[2]=putAlleventId3;  evids[3]=putAlleventId4;  evids[4]=putAlleventId5;  assertNotNull(evids[0]);  assertNotNull(evids[1]);  assertNotNull(evids[2]);  assertNotNull(evids[3]);  assertNotNull(evids[4]);  return evids;}  }
class C{  private static void enqueueBlit(RenderQueue rq,SurfaceData src,SurfaceData dst,int packedParams,int sx1,int sy1,int sx2,int sy2,double dx1,double dy1,double dx2,double dy2){  RenderBuffer buf=rq.getBuffer();  rq.ensureCapacityAndAlignment(72,24);  buf.putInt(BLIT);  buf.putInt(packedParams);  buf.putInt(sx1).putInt(sy1);  buf.putInt(sx2).putInt(sy2);  buf.putDouble(dx1).putDouble(dy1);  buf.putDouble(dx2).putDouble(dy2);  buf.putLong(src.getNativeOps());  buf.putLong(dst.getNativeOps());}  }
class C{  private void toggleFavoriteOnSelected(){  StatusHistoryEntry selected=table.getSelectedEntry();  if (selected != null) {    StatusHistoryEntry modified=history.setFavorite(selected,!selected.favorite);    table.updateEntry(modified);  }}  }
class C{  public AxisAngle4f(Vector3f axis,float angle){  this.x=axis.x;  this.y=axis.y;  this.z=axis.z;  this.angle=angle;}  }
class C{  public Buffer read() throws NetworkException {  MediaSample sample=player.readSample();  if (sample == null) {    return null;  }  buffer.setData(sample.getData());  buffer.setLength(sample.getLength());  buffer.setFormat(format);  buffer.setSequenceNumber(seqNo++);  if (sample.isMarker()) {    buffer.setFlags(Buffer.FLAG_RTP_MARKER);  }  buffer.setTimestamp(sample.getTimestamp());  return buffer;}  }
class C{  public void removeDTEDDirectoryHandler(DTEDDirectoryHandler handler){  directories.remove(handler);}  }
class C{  public void swap(DoubleMatrix1D other){  if (!(other instanceof DenseDoubleMatrix1D)) {    super.swap(other);  }  DenseDoubleMatrix1D y=(DenseDoubleMatrix1D)other;  if (y == this)   return;  checkSize(y);  final double[] elems=this.elements;  final double[] otherElems=y.elements;  if (elements == null || otherElems == null)   throw new InternalError();  int s=this.stride;  int ys=y.stride;  int index=index(0);  int otherIndex=y.index(0);  for (int k=size; --k >= 0; ) {    double tmp=elems[index];    elems[index]=otherElems[otherIndex];    otherElems[otherIndex]=tmp;    index+=s;    otherIndex+=ys;  }  return;}  }
class C{  private void calculateDataSets(){  final int initialPerMinCalcExclLoops=repProc.initialPerMinCalcExclTime * 16;  final Map<LineChartDataSet,Int> dataSetExcludedActionCountsMap=new HashMap<>();  final Map<DataModel<LineChartDataSet>,Int> modelLastCmdLoopsMap=new HashMap<>();  for (  final Event event : repProc.replay.gameEvents.events) {    final DataModel<LineChartDataSet> model=modelByUserIds[event.userId];    if (model == null)     continue;    if (event.id == IGameEvents.ID_CMD) {      Int lastCmdLoop=modelLastCmdLoopsMap.get(model);      if (lastCmdLoop == null)       modelLastCmdLoopsMap.put(model,lastCmdLoop=new Int());      lastCmdLoop.value=event.loop;    }    if (RepProcessor.APM_EVENT_ID_SET.contains(event.id)) {      final LineChartDataSet dataSet=model.getDataSetList().get(0);      dataSet.getValues()[event.loop / granularity]++;      if (event.loop < initialPerMinCalcExclLoops || event.loop > repProc.usersByUserId[event.userId].lastCmdLoop) {        Int excludedCount=dataSetExcludedActionCountsMap.get(dataSet);        if (excludedCount == null)         dataSetExcludedActionCountsMap.put(dataSet,excludedCount=new Int());        excludedCount.value++;      }    }  }  for (  final Chart<LineChartDataSet> chart : chartList) {    for (    final DataModel<LineChartDataSet> model : chart.getDataModelList()) {      final Int lastCmdLoop=modelLastCmdLoopsMap.get(model);      for (      final LineChartDataSet dataSet : model.getDataSetList()) {        long total=0;        final Int excludedCount=dataSetExcludedActionCountsMap.get(dataSet);        final int[] values=dataSet.getValues();        if (values.length > 0) {          total+=values[values.length - 1];          values[values.length - 1]=repProc.calculatePerMinute(values[values.length - 1],lastGranularity);        }        for (int i=values.length - 2; i >= 0; i--) {          total+=values[i];          values[i]=repProc.calculatePerMinute(values[i],granularity);        }        final int apmLoops=lastCmdLoop == null ? 0 : lastCmdLoop.value - initialPerMinCalcExclLoops;        final long apmActions=excludedCount == null ? total : total - excludedCount.value;        final int avgApm=repProc.calculatePerMinute(apmActions,apmLoops);        dataSet.setTitle("Actions: " + total + ",    APM: "+ avgApm);        dataSet.calculateValueMax();      }    }  }}  }
class C{  public Subspace join(Subspace other){  long[] newDimensions=joinLastDimensions(other);  if (newDimensions == null) {    return null;  }  return new Subspace(newDimensions);}  }
class C{  public void fireSelectedDataChanged(String from){  System.out.println("fireSelectedDataChanged from " + from);  Object[][] sel=getSelectedFullData();  System.out.println("selected full data :");  System.out.println(Array.cat(_parametersNames));  if (sel.length > 0)   System.out.println(Array.cat(getSelectedFullData()));  sel=getSelectedProjectedData();  System.out.println("selected projected data :");switch (_dimension) {case 1:    System.out.println(Array.cat(new String[]{getSelectedXAxis()}));  break;case 2:System.out.println(Array.cat(new String[]{getSelectedXAxis(),getSelectedYAxis()}));break;case 3:System.out.println(Array.cat(new String[]{getSelectedXAxis(),getSelectedYAxis(),getSelectedZAxis()}));break;}if (sel.length > 0) System.out.println(Array.cat(getSelectedProjectedData()));}  }
class C{  public void locateMatches(MatchLocator locator,ClassFile classFile,IBinaryType info) throws CoreException {  SearchPattern pattern=locator.pattern;  matchAnnotations(pattern,locator,classFile,info);  BinaryType binaryType=(BinaryType)classFile.getType();  if (matchBinary(pattern,info,null)) {    binaryType=new ResolvedBinaryType((JavaElement)binaryType.getParent(),binaryType.getElementName(),binaryType.getKey());    locator.reportBinaryMemberDeclaration(null,binaryType,null,info,SearchMatch.A_ACCURATE);    return;  }  IBinaryMethod[] binaryMethods=info.getMethods();  int bMethodsLength=binaryMethods == null ? 0 : binaryMethods.length;  IBinaryMethod[] unresolvedMethods=null;  char[][] binaryMethodSignatures=null;  boolean hasUnresolvedMethods=false;  IBinaryField[] binaryFields=info.getFields();  int bFieldsLength=binaryFields == null ? 0 : binaryFields.length;  IBinaryField[] unresolvedFields=null;  boolean hasUnresolvedFields=false;  int accuracy=SearchMatch.A_ACCURATE;  boolean mustResolve=pattern.mustResolve;  if (mustResolve) {    BinaryTypeBinding binding=locator.cacheBinaryType(binaryType,info);    if (binding != null) {      if (!locator.typeInHierarchy(binding))       return;      MethodBinding[] availableMethods=binding.availableMethods();      int aMethodsLength=availableMethods == null ? 0 : availableMethods.length;      hasUnresolvedMethods=bMethodsLength != aMethodsLength;      for (int i=0; i < aMethodsLength; i++) {        MethodBinding method=availableMethods[i];        char[] methodSignature=method.genericSignature();        if (methodSignature == null)         methodSignature=method.signature();        int level=locator.patternLocator.resolveLevel(method);        if (level != org.eclipse.jdt.internal.core.search.matching.PatternLocator.IMPOSSIBLE_MATCH) {          IMethod methodHandle=binaryType.getMethod(new String(method.isConstructor() ? binding.compoundName[binding.compoundName.length - 1] : method.selector),CharOperation.toStrings(Signature.getParameterTypes(convertClassFileFormat(methodSignature))));          accuracy=level == org.eclipse.jdt.internal.core.search.matching.PatternLocator.ACCURATE_MATCH ? SearchMatch.A_ACCURATE : SearchMatch.A_INACCURATE;          locator.reportBinaryMemberDeclaration(null,methodHandle,method,info,accuracy);        }        if (hasUnresolvedMethods) {          if (binaryMethodSignatures == null) {            binaryMethodSignatures=new char[bMethodsLength][];            for (int j=0; j < bMethodsLength; j++) {              IBinaryMethod binaryMethod=binaryMethods[j];              char[] signature=binaryMethod.getGenericSignature();              if (signature == null)               signature=binaryMethod.getMethodDescriptor();              binaryMethodSignatures[j]=signature;            }          }          for (int j=0; j < bMethodsLength; j++) {            if (CharOperation.equals(binaryMethods[j].getSelector(),method.selector) && CharOperation.equals(binaryMethodSignatures[j],methodSignature)) {              if (unresolvedMethods == null) {                System.arraycopy(binaryMethods,0,unresolvedMethods=new IBinaryMethod[bMethodsLength],0,bMethodsLength);              }              unresolvedMethods[j]=null;              break;            }          }        }      }      FieldBinding[] availableFields=binding.availableFields();      int aFieldsLength=availableFields == null ? 0 : availableFields.length;      hasUnresolvedFields=bFieldsLength != aFieldsLength;      for (int i=0; i < aFieldsLength; i++) {        FieldBinding field=availableFields[i];        int level=locator.patternLocator.resolveLevel(field);        if (level != org.eclipse.jdt.internal.core.search.matching.PatternLocator.IMPOSSIBLE_MATCH) {          IField fieldHandle=binaryType.getField(new String(field.name));          accuracy=level == PatternLocator.ACCURATE_MATCH ? SearchMatch.A_ACCURATE : SearchMatch.A_INACCURATE;          locator.reportBinaryMemberDeclaration(null,fieldHandle,field,info,accuracy);        }        if (hasUnresolvedFields) {          for (int j=0; j < bFieldsLength; j++) {            if (CharOperation.equals(binaryFields[j].getName(),field.name)) {              if (unresolvedFields == null) {                System.arraycopy(binaryFields,0,unresolvedFields=new IBinaryField[bFieldsLength],0,bFieldsLength);              }              unresolvedFields[j]=null;              break;            }          }        }      }      if (!hasUnresolvedMethods && !hasUnresolvedFields) {        return;      }    }    accuracy=SearchMatch.A_INACCURATE;  }  if (mustResolve)   binaryMethods=unresolvedMethods;  bMethodsLength=binaryMethods == null ? 0 : binaryMethods.length;  for (int i=0; i < bMethodsLength; i++) {    IBinaryMethod method=binaryMethods[i];    if (method == null)     continue;    if (matchBinary(pattern,method,info)) {      char[] name;      if (method.isConstructor()) {        name=info.getSourceName();      } else {        name=method.getSelector();      }      String selector=new String(name);      char[] methodSignature=binaryMethodSignatures == null ? null : binaryMethodSignatures[i];      if (methodSignature == null) {        methodSignature=method.getGenericSignature();        if (methodSignature == null)         methodSignature=method.getMethodDescriptor();      }      String[] parameterTypes=CharOperation.toStrings(Signature.getParameterTypes(convertClassFileFormat(methodSignature)));      IMethod methodHandle=binaryType.getMethod(selector,parameterTypes);      methodHandle=new ResolvedBinaryMethod(binaryType,selector,parameterTypes,methodHandle.getKey());      locator.reportBinaryMemberDeclaration(null,methodHandle,null,info,accuracy);    }  }  if (mustResolve)   binaryFields=unresolvedFields;  bFieldsLength=binaryFields == null ? 0 : binaryFields.length;  for (int i=0; i < bFieldsLength; i++) {    IBinaryField field=binaryFields[i];    if (field == null)     continue;    if (matchBinary(pattern,field,info)) {      String fieldName=new String(field.getName());      IField fieldHandle=binaryType.getField(fieldName);      fieldHandle=new ResolvedBinaryField(binaryType,fieldName,fieldHandle.getKey());      locator.reportBinaryMemberDeclaration(null,fieldHandle,null,info,accuracy);    }  }}  }
class C{  public static List<String> readToList(File f) throws IOException {  try (final Reader reader=asReaderUTF8Lenient(new FileInputStream(f))){    return readToList(reader);  } catch (  IOException ioe) {    throw new IllegalStateException(String.format("Failed to read %s: %s",f.getAbsolutePath(),ioe),ioe);  }}  }
class C{  public VertexShapeFactory(){  this(Functions.constant(10),Functions.constant(1.0f));}  }
class C{  public boolean isMisdirected(){  return misdirected;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.102 -0500",hash_original_method="0DBB3F3440DA26D4CDE5B1A71A1243C2",hash_generated_method="FBD310130D4B9C224C0895282A9E3E5C") @Deprecated public boolean trackExternalAllocation(long size){  return true;}  }
class C{  public final void print(float f) throws IOException {  print(String.valueOf(f));}  }
class C{  public void updateProgress(){  if (bytesRead >= bytesThreashold) {    bytesRead-=bytesThreashold;    if (progress < 100) {      progress++;    }    forceUpdateProgress();  } else   if (isComplete()) {    forceUpdateProgress();  }}  }
class C{  public void testKeyPairGenerator12(){  int[] keys={-1,-250,1,64,512,1024};  SecureRandom random=new SecureRandom();  AlgorithmParameterSpec aps;  KeyPairGenerator mKPG=new MyKeyPairGenerator1("");  assertEquals("Incorrect algorithm",mKPG.getAlgorithm(),MyKeyPairGenerator1.getResAlgorithm());  mKPG.generateKeyPair();  mKPG.genKeyPair();  for (int i=0; i < keys.length; i++) {    try {      mKPG.initialize(keys[i]);      fail("InvalidParameterException must be thrown (key: " + Integer.toString(keys[i]) + ")");    } catch (    InvalidParameterException e) {    }    try {      mKPG.initialize(keys[i],random);      fail("InvalidParameterException must be thrown (key: " + Integer.toString(keys[i]) + ")");    } catch (    InvalidParameterException e) {    }  }  try {    mKPG.initialize(100,null);    fail("InvalidParameterException must be thrown when random is null");  } catch (  InvalidParameterException e) {  }  mKPG.initialize(100,random);  assertEquals("Incorrect random",random,((MyKeyPairGenerator1)mKPG).secureRandom);  assertEquals("Incorrect keysize",100,((MyKeyPairGenerator1)mKPG).keySize);  try {    mKPG.initialize(null,random);    fail("InvalidAlgorithmParameterException must be thrown when param is null");  } catch (  InvalidAlgorithmParameterException e) {  }  if (DSASupported) {    BigInteger bInt=new BigInteger("1");    aps=new java.security.spec.DSAParameterSpec(bInt,bInt,bInt);    try {      mKPG.initialize(aps,null);      fail("InvalidParameterException must be thrown when random is null");    } catch (    InvalidParameterException e) {    }catch (    InvalidAlgorithmParameterException e) {      fail("Unexpected InvalidAlgorithmParameterException was thrown");    }    try {      mKPG.initialize(aps,random);      assertEquals("Incorrect random",random,((MyKeyPairGenerator1)mKPG).secureRandom);      assertEquals("Incorrect params",aps,((MyKeyPairGenerator1)mKPG).paramSpec);    } catch (    InvalidAlgorithmParameterException e) {      fail("Unexpected InvalidAlgorithmParameterException was thrown");    }  }}  }
class C{  public void runUsingBootstrapper() throws Exception {  runUsing(P2BootstrapInstallation.latest().outsideJvmRunner());}  }
class C{  public int searchInsert(int[] A,int target){  if (A == null || A.length == 0)   return 0;  int l=0;  int r=A.length - 1;  int m;  while (l <= r) {    m=l + (r - l) / 2;    if (A[m] == target)     return m; else     if (A[m] > target)     r=m - 1; else     l=m + 1;  }  return l;}  }
class C{  public int read() throws IOException {  byte[] bitSet=new byte[8];  int x=0;  int y=0;  int channel=0;  int bit=0;  for (int i=0; i < 8; i++) {    do {      x=this.rand.nextInt(this.imgWidth);      y=this.rand.nextInt(this.imgHeight);      channel=this.rand.nextInt(3);      bit=this.rand.nextInt(this.channelBitsUsed);    } while (this.bitRead[x][y][channel][bit]);    this.bitRead[x][y][channel][bit]=true;    bitSet[i]=(byte)getPixelBit(x,y,channel,bit);  }  return ((bitSet[0] << 7) + (bitSet[1] << 6) + (bitSet[2] << 5)+ (bitSet[3] << 4)+ (bitSet[4] << 3)+ (bitSet[5] << 2)+ (bitSet[6] << 1)+ (bitSet[7] << 0));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String addTags(Object object,String msg){  return hashCodeTag(object) + mainThreadTag() + " "+ msg;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static UtcOffset parse(String text){  int i=0;  char sign=text.charAt(i);  boolean positive=true;  if (sign == '-') {    positive=false;    i++;  } else   if (sign == '+') {    i++;  }  int maxLength=i + 4;  int colon=text.indexOf(':',i);  if (colon >= 0) {    maxLength++;  }  if (text.length() > maxLength) {    throw Messages.INSTANCE.getIllegalArgumentException(40,text);  }  String hourStr, minuteStr=null;  if (colon < 0) {    hourStr=text.substring(i);    int minutePos=hourStr.length() - 2;    if (minutePos > 0) {      minuteStr=hourStr.substring(minutePos);      hourStr=hourStr.substring(0,minutePos);    }  } else {    hourStr=text.substring(i,colon);    if (colon < text.length() - 1) {      minuteStr=text.substring(colon + 1);    }  }  int hour, minute;  try {    hour=Integer.parseInt(hourStr);    minute=(minuteStr == null) ? 0 : Integer.parseInt(minuteStr);  } catch (  NumberFormatException e) {    throw Messages.INSTANCE.getIllegalArgumentException(40,text);  }  return new UtcOffset(positive,hour,minute);}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  log.info("|-Jmx Sensor Data Access Service active...");}  }
class C{  private void updateMoveLeftAnim(long playTime){  imageAAnimToLeft.setCurrentPlayTime(playTime);  imageBAnimToLeft.setCurrentPlayTime(playTime);  imageCAnimToLeft.setCurrentPlayTime(playTime);  imageDAnimToLeft.setCurrentPlayTime(playTime);  imageEAnimToLeft.setCurrentPlayTime(playTime);  System.out.println("drawcircle----= " + -mCenterImageView.getMeasuredWidth() * (1 - playTime * 1.0f / mDuration));  mCenterImageView.update(mCenterImageView.getMeasuredWidth() * (1 - playTime * 1.0f / mDuration),false);}  }
class C{  public IconicsDrawable contourColor(int contourColor){  mContourPaint.setColor(contourColor);  drawContour(true);  invalidateSelf();  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else   if (myHost == null && progress != previousProgress) {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CompletableFuture<FluentFunction<T,R>> async(final Executor ex){  return CompletableFuture.supplyAsync(null,ex);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof Locale))   return false;  BaseLocale otherBase=((Locale)obj).baseLocale;  if (!baseLocale.equals(otherBase)) {    return false;  }  if (localeExtensions == null) {    return ((Locale)obj).localeExtensions == null;  }  return localeExtensions.equals(((Locale)obj).localeExtensions);}  }
class C{  public StandardMapMouseInterpreter(){  DEBUG=Debug.debugging("grp");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.576 -0500",hash_original_method="7B23A3D94A21E730AAD2DD6C619E091C",hash_generated_method="3904AA6CD229FA5F21A9875D29E03EE1") public boolean decodeIntegerValue(int startIndex){  if (decodeShortInteger(startIndex) == true) {    return true;  }  return decodeLongInteger(startIndex);}  }
class C{  public void resetOutlierStatus(){  SearchObject sobject;  for (int i=0; i < this.getNumberOfObjects(); i++) {    sobject=this.listOfObjects.elementAt(i);    sobject.setOutlierStatus(false);    sobject.setOutlierFactor(0);  }}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=activity.getCropRect();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public Long2LongOpenHashMap clone(){  Long2LongOpenHashMap c;  try {    c=(Long2LongOpenHashMap)super.clone();  } catch (  CloneNotSupportedException cantHappen) {    throw new InternalError();  }  c.keys=null;  c.values=null;  c.entries=null;  c.containsNullKey=containsNullKey;  c.key=key.clone();  c.value=value.clone();  return c;}  }
class C{  public AVTPartXPath(XPath xpath){  m_xpath=xpath;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void loadX509Cert(Certificate cert,String certAlias,KeyStore keyStore) throws KeyStoreException {  keyStore.setCertificateEntry(certAlias,cert);}  }
class C{  public Bro2Reader(boolean verbose){  super();  this.setVerbose(verbose);  entries=0l;  hasErrors=false;  this.setVerbose(false);}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public long stop(){  end=U.currentTimeMillis();  if (maxedOut())   debug("Timer maxed out [name=" + name + ", duration="+ duration()+ ']');  return end - start;}  }
class C{  public boolean handleRoot(Address addr){  if (subspace.addressInRange(addr)) {    int index=subspace.getIndex(addr);    rootsStream.increment(index,(short)1);    this.totalRoots++;    return true;  } else {    return false;  }}  }
class C{  public UserRoleAssignmentException(String message,Object[] params){  super(message,params);}  }
class C{  private String _serializeQuery(Query query,Set<Object> done) throws ConverterException {  StringBuilder fn=new StringBuilder();  Collection.Key[] keys=CollectionUtil.keys(query);  for (int i=0; i < keys.length; i++) {    if (i > 0)     fn.append(',');    fn.append(XMLUtil.escapeXMLString(keys[i].getString()));  }  StringBuilder sb=new StringBuilder(goIn() + "<recordset rowCount=" + del+ query.getRecordcount()+ del+ " fieldNames="+ del+ fn+ del+ " type="+ del+ "coldfusion.sql.QueryTable"+ del+ ">");  deep++;  int len=query.getRecordcount();  for (int i=0; i < keys.length; i++) {    sb.append(goIn() + "<field name=" + del+ XMLUtil.escapeXMLString(keys[i].getString())+ del+ ">");    for (int y=1; y <= len; y++) {      try {        sb.append(_serialize(query.getAt(keys[i],y),done));      } catch (      PageException e) {        sb.append(_serialize(e.getMessage(),done));      }    }    sb.append(goIn() + "</field>");  }  deep--;  sb.append(goIn() + "</recordset>");  return sb.toString();}  }
class C{  public void processInstance(String prefix,CIMInstance instance){  set(prefix + CimConstants.CLASS_NAME_KEY,instance.getClassName());  for (  CIMProperty<?> p : instance.getProperties()) {    processProperty(prefix,p);  }}  }
class C{  public void removeTrackingIcon(Object tag){  if (trackingIcons != null && trackingIcons.remove(tag)) {    repaint();  }}  }
class C{  public static void appendColumns(StringBuilder s,String[] columns){  int n=columns.length;  for (int i=0; i < n; i++) {    String column=columns[i];    if (column != null) {      if (i > 0) {        s.append(", ");      }      s.append(column);    }  }  s.append(' ');}  }
class C{  public IndexSearcher newSearcher(IndexReader reader,IndexReader previousReader) throws IOException {  return new IndexSearcher(reader);}  }
class C{  public final void removeAllHelperTextColors(@NonNull final Collection<Integer> colors){  ensureNotNull(colors,"The collection may not be null");  for (  int color : colors) {    removeHelperTextColor(color);  }}  }
class C{  protected static void createFile(IgfsSecondaryFileSystemTestAdapter uni,IgfsPath file,@Nullable byte[]... chunks) throws IOException {  OutputStream os=null;  try {    os=uni.openOutputStream(file.toString(),false);    writeFileChunks(os,chunks);  }  finally {    U.closeQuiet(os);    IgfsEx igfsEx=uni.igfs();    if (igfsEx != null)     awaitFileClose(igfsEx,file);  }}  }
class C{  protected void doParse() throws ParseException, IOException {  current=reader.read();  Object[] spec=parseTimingSpecifier();  skipSpaces();  if (current != -1) {    reportError("end.of.stream.expected",new Object[]{new Integer(current)});  }  handleTimingSpecifier(spec);}  }
class C{  public void testStartStopPipeline() throws Exception {  TungstenProperties config=helper.createSimpleRuntime();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  public Reader freeze(boolean trim){  if (frozen) {    throw new IllegalStateException("already frozen");  }  if (didSkipBytes) {    throw new IllegalStateException("cannot freeze when copy(BytesRef, BytesRef) was used");  }  if (trim && upto < blockSize) {    final byte[] newBlock=new byte[upto];    System.arraycopy(currentBlock,0,newBlock,0,upto);    currentBlock=newBlock;  }  if (currentBlock == null) {    currentBlock=EMPTY_BYTES;  }  addBlock(currentBlock);  frozen=true;  currentBlock=null;  return new PagedBytes.Reader(this);}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof GraphicContentNode) {    if (child instanceof TextGraphicNode)     textCount++;    if (children == null)     children=new ArrayList<GraphicContentNode>();    children.add((GraphicContentNode)child);    if (child instanceof GroupNode) {      if (definesScaleGrid()) {        throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidScaleGridGroupChild");      }    }  } else {    super.addChild(child);  }}  }
class C{  public static Element svgLine(Document document,double x1,double y1,double x2,double y2){  Element line=SVGUtil.svgElement(document,SVGConstants.SVG_LINE_TAG);  SVGUtil.setAtt(line,SVGConstants.SVG_X1_ATTRIBUTE,x1);  SVGUtil.setAtt(line,SVGConstants.SVG_Y1_ATTRIBUTE,y1);  SVGUtil.setAtt(line,SVGConstants.SVG_X2_ATTRIBUTE,x2);  SVGUtil.setAtt(line,SVGConstants.SVG_Y2_ATTRIBUTE,y2);  return line;}  }
class C{  public void clear(){  mInputConnections.clear();  mOutputConnections.clear();  mPreviousConnections.clear();  mNextConnections.clear();}  }
class C{  public void assertNotEqual(byte expected,byte actual){  TestUtils.assertNotEqual(expected,actual);}  }
class C{  @SuppressWarnings("deprecation") public void notifyChangedSlot(LocoNetSlot s){  if (s.getSlot() != LnConstants.FC_SLOT) {    return;  }  if (!correctFastClock && !synchronizeWithInternalClock && !setInternal) {    return;  }  if (log.isDebugEnabled()) {    log.debug("slot update " + s);  }  curDays=s.getFcDays();  curHours=s.getFcHours();  curMinutes=s.getFcMinutes();  int temRate=s.getFcRate();  if ((temRate != curRate) && !setInternal) {    setRate(curRate);  } else   if ((temRate != curRate) && setInternal) {    try {      clock.userSetRate(temRate);    } catch (    jmri.TimebaseRateException e) {      if (!timebaseErrorReported) {        timebaseErrorReported=true;        log.warn("Time base exception on setting rate from LocoNet");      }    }  }  curFractionalMinutes=s.getFcFracMins();  Date tem=clock.getTime();  int cHours=tem.getHours();  long cNumMSec=tem.getTime();  long nNumMSec=((cNumMSec / MSECPERHOUR) * MSECPERHOUR) - (cHours * MSECPERHOUR) + (curHours * MSECPERHOUR) + (curMinutes * MSECPERMINUTE);  if (readInProgress && !inSyncWithInternalFastClock) {    nNumMSec+=(long)(((CORRECTION - curFractionalMinutes) / CORRECTION * MSECPERMINUTE));    clock.setTime(new Date(nNumMSec));  } else   if (setInternal) {    clock.setTime(new Date(nNumMSec));  }  inSyncWithInternalFastClock=true;}  }
class C{  public boolean isPulseOnce(GlowBlock block){  return true;}  }
class C{  public String updateLogLevels(){  if (this.model.getUpdatedLoggers() != null && !this.model.getUpdatedLoggers().isEmpty()) {    for (    LoggerInfo loggerInfo : this.model.getUpdatedLoggers()) {      if (loggerInfo != null && loggerInfo.getNewLogLevel() != null) {        LoggingUtil.getLogger(loggerInfo.getLoggerName()).setLevel(Level.toLevel(loggerInfo.getNewLogLevel().getLogLevel()));      }    }    loadLoggers();  }  return "successRedirect";}  }
class C{  public int smallestID(){  ElementH el=_smallest();  return el.id;}  }
class C{  private static int checkFormalTypeParameters(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkFormalTypeParameter(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkFormalTypeParameter(signature,pos);  }  return pos + 1;}  }
class C{  public MaxProjectionExpression(Expression expression,boolean isDistinct){  this.distinct=isDistinct;  this.getChildren().add(expression);}  }
class C{  @VisibleForTesting public boolean isSystemBuild(PackageManager pm,String packageName){  try {    ApplicationInfo info=pm.getApplicationInfo(packageName,ApplicationInfo.FLAG_SYSTEM);    if ((info.flags & ApplicationInfo.FLAG_SYSTEM) == 0)     throw new SecurityException();  } catch (  NameNotFoundException e) {    Log.e(TAG,"Package with name " + packageName + " not found");    return false;  }catch (  SecurityException e) {    Log.e(TAG,"Caller with package name " + packageName + " is not in the system build");    return false;  }  return true;}  }
class C{  public static CreateSnapshotRequest createSnapshotRequest(String repository,String snapshot){  return new CreateSnapshotRequest(repository,snapshot);}  }
class C{  public void cmd_button(){  int C_AcctSchema_ID=Env.getContextAsInt(Env.getCtx(),gridField.getWindowNo(),"C_AcctSchema_ID");  if (C_AcctSchema_ID <= 0) {    C_AcctSchema_ID=Env.getContextAsInt(Env.getCtx(),"$C_AcctSchema_ID");  }  WAccountDialog ad=new WAccountDialog(gridField.getHeader(),m_mAccount,C_AcctSchema_ID);  Integer newValue=ad.getValue();  if (newValue == null)   return;  Object oldValue=m_value;  setValue(newValue);  ValueChangeEvent changeEvent=new ValueChangeEvent(this,this.getColumnName(),oldValue,newValue);  fireValueChange(changeEvent);}  }
class C{  public void release(FileLock lock) throws IOException {  checkOpen();  StructFlock flock=new StructFlock();  flock.l_type=(short)F_UNLCK;  flock.l_whence=(short)SEEK_SET;  flock.l_start=lock.position();  flock.l_len=translateLockLength(lock.size());  try {    Libcore.os.fcntlFlock(fd,F_SETLKW64,flock);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }  removeLock(lock);}  }
class C{  public static Reifier make(GenericsFactory f){  return new Reifier(f);}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  if (null == m_selectPattern && sroot.getOptimizer()) {    XPath newSelect=rewriteChildToExpression(this);    if (null != newSelect)     m_selectPattern=newSelect;  }  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_selectPattern)   m_selectPattern.fixupVariables(vnames,cstate.getGlobalsSize());  if (!(m_parentNode instanceof Stylesheet) && m_qname != null) {    m_index=cstate.addVariableName(m_qname) - cstate.getGlobalsSize();  } else   if (m_parentNode instanceof Stylesheet) {    cstate.resetStackFrameSize();  }  super.compose(sroot);}  }
class C{  public void testMethodNameContainingDot(){  doTest();}  }
class C{  public static <T>List<T> asSynchronized(List<T> self){  return Collections.synchronizedList(self);}  }
class C{  public void manualTestRefreshFabricStateCache() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  this.conn=(FabricMySQLConnection)getNewDefaultDataSource().getConnection(this.username,this.password);  this.conn.setServerGroupName("ha_config1_group");  this.conn.setReadOnly(false);  this.conn.setAutoCommit(false);  Statement stmt=this.conn.createStatement();  ResultSet rs=stmt.executeQuery("show variables like 'server_uuid'");  rs.next();  String firstServerUuid=rs.getString(2);  rs.close();  this.conn.commit();  int seconds=10;  System.err.println("Waiting " + seconds + " seconds for new master to be chosen");  Thread.sleep(TimeUnit.SECONDS.toMillis(1 + seconds));  this.conn.rollback();  rs=stmt.executeQuery("show variables like 'server_uuid'");  rs.next();  String secondServerUuid=rs.getString(2);  rs.close();  System.err.println("firstServerUuid=" + firstServerUuid + "\nsecondServerUuid="+ secondServerUuid);  if (firstServerUuid.equals(secondServerUuid)) {    fail("Server ID should change to reflect new topology");  }  this.conn.close();}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY,EasingFunction easingX,EasingFunction easingY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(easingY);  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(easingX);  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  public void test_DSAKeyPairGenerator01(){  DSAParams dsaParams=new DSAParameterSpec(p,q,g);  SecureRandom random=null;  MyDSA dsa=new MyDSA(dsaParams);  try {    random=SecureRandom.getInstance("SHA1PRNG");  } catch (  Exception e) {    fail("Unexpected exception for SecureRandom: " + e);  }  try {    dsa.initialize(dsaParams,random);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    dsa.initialize(dsaParams,null);    fail("InvalidParameterException was not thrown");  } catch (  InvalidParameterException ipe) {  }catch (  Exception e) {    fail(e + " was thrown instead of InvalidParameterException");  }  try {    dsa.initialize(null,random);    fail("InvalidParameterException was not thrown");  } catch (  InvalidParameterException ipe) {  }catch (  Exception e) {    fail(e + " was thrown instead of InvalidParameterException");  }}  }
class C{  public void prettyPrint(){  System.out.println(prettyString());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public FastaWriterWrapper(File baseOutput,SdfReaderWrapper reader,int lineLength,boolean rename,boolean gzip,boolean interleavePaired) throws IOException {  this(baseOutput,reader,lineLength,rename,gzip,interleavePaired,FastaUtils.extensions());}  }
class C{  public DeferredTypeRef createDeferredTypeRef(){  DeferredTypeRefImpl deferredTypeRef=new DeferredTypeRefImpl();  return deferredTypeRef;}  }
class C{  public void updateIndexes(final StateAware stateAwareObject,final String applictionType){  final Position position=stateAwareObject.getState().getOwnerPosition();  User user=null;  if (position == null)   user=stateAwareObject.getState().getCreatedBy(); else   user=assignmentService.getAssignmentsForPosition(position.getId(),new Date()).get(0).getEmployee();  User owner=null;  String source;  if (!applictionType.isEmpty() && (applictionType.equalsIgnoreCase(APPLICATION_TYPE_NEW_ASSESSENT) || applictionType.equalsIgnoreCase(APPLICATION_TYPE_ALTER_ASSESSENT) || applictionType.equalsIgnoreCase(APPLICATION_TYPE_BIFURCATE_ASSESSENT)|| applictionType.equalsIgnoreCase(APPLICATION_TYPE_GRP))) {    final PropertyImpl property=(PropertyImpl)stateAwareObject;    final ApplicationIndex applicationIndex=applicationIndexService.findByApplicationNumber(property.getApplicationNo());    final String url="/ptis/view/viewProperty-viewForm.action?applicationNo=" + property.getApplicationNo() + "&applicationType="+ applictionType;    owner=property.getBasicProperty().getPrimaryOwner();    if (property.getBasicProperty().getSource().equals(PropertyTaxConstants.SOURCEOFDATA_MEESEWA))     source=Source.MEESEVA.toString(); else     if (property.getBasicProperty().getSource().equals(PropertyTaxConstants.SOURCEOFDATA_ESEVA))     source=Source.ESEVA.toString(); else     if (property.getBasicProperty().getSource().equals(PropertyTaxConstants.SOURCEOFDATA_MOBILE))     source=Source.MOBILE.toString(); else     source=Source.SYSTEM.toString();    if (applicationIndex == null) {      final ApplicationIndexBuilder applicationIndexBuilder=new ApplicationIndexBuilder(PTMODULENAME,property.getApplicationNo(),new Date(),applictionType,owner.getName(),property.getState().getValue(),url,property.getBasicProperty().getAddress().toString(),user.getUsername() + "::" + user.getName(),source);      applicationIndexBuilder.consumerCode(property.getBasicProperty().getUpicNo());      applicationIndexBuilder.mobileNumber(owner.getMobileNumber());      applicationIndexBuilder.aadharNumber(owner.getAadhaarNumber());      applicationIndexService.createApplicationIndex(applicationIndexBuilder.build());    } else {      applicationIndex.setStatus(property.getState().getValue());      if (applictionType.equalsIgnoreCase(APPLICATION_TYPE_NEW_ASSESSENT) || applictionType.equalsIgnoreCase(APPLICATION_TYPE_ALTER_ASSESSENT) || applictionType.equalsIgnoreCase(APPLICATION_TYPE_BIFURCATE_ASSESSENT)|| applictionType.equalsIgnoreCase(APPLICATION_TYPE_GRP)) {        applicationIndex.setConsumerCode(property.getBasicProperty().getUpicNo());        applicationIndex.setApplicantName(owner.getName());        applicationIndex.setOwnername(user.getUsername() + "::" + user.getName());        applicationIndex.setMobileNumber(owner.getMobileNumber());        applicationIndex.setAadharNumber(owner.getAadhaarNumber());      }      applicationIndexService.updateApplicationIndex(applicationIndex);    }  } else   if (!applictionType.isEmpty() && applictionType.equalsIgnoreCase(APPLICATION_TYPE_REVISION_PETITION)) {    final RevisionPetition property=(RevisionPetition)stateAwareObject;    final ApplicationIndex applicationIndex=applicationIndexService.findByApplicationNumber(property.getObjectionNumber());    final String url="/ptis/view/viewProperty-viewForm.action?applicationNo=" + property.getObjectionNumber() + "&applicationType="+ applictionType;    if (property.getBasicProperty().getSource().equals(PropertyTaxConstants.SOURCEOFDATA_MEESEWA))     source=Source.MEESEVA.toString(); else     if (property.getBasicProperty().getSource().equals(PropertyTaxConstants.SOURCEOFDATA_ESEVA))     source=Source.ESEVA.toString(); else     if (property.getBasicProperty().getSource().equals(PropertyTaxConstants.SOURCEOFDATA_MOBILE))     source=Source.MOBILE.toString(); else     source=Source.SYSTEM.toString();    if (applicationIndex == null) {      owner=property.getBasicProperty().getPrimaryOwner();      final ApplicationIndexBuilder applicationIndexBuilder=new ApplicationIndexBuilder(PTMODULENAME,property.getObjectionNumber(),property.getCreatedDate() != null ? property.getCreatedDate() : new Date(),applictionType,owner.getName(),property.getState().getValue(),url,property.getBasicProperty().getAddress().toString(),user.getUsername() + "::" + user.getName(),source);      applicationIndexBuilder.consumerCode(property.getBasicProperty().getUpicNo());      applicationIndexBuilder.mobileNumber(owner.getMobileNumber());      applicationIndexBuilder.aadharNumber(owner.getAadhaarNumber());      applicationIndexService.createApplicationIndex(applicationIndexBuilder.build());    } else {      applicationIndex.setStatus(property.getState().getValue());      applicationIndex.setOwnername(user.getUsername() + "::" + user.getName());      applicationIndexService.updateApplicationIndex(applicationIndex);    }  } else   if (!applictionType.isEmpty() && applictionType.equalsIgnoreCase(APPLICATION_TYPE_TRANSFER_OF_OWNERSHIP)) {    final PropertyMutation property=(PropertyMutation)stateAwareObject;    final ApplicationIndex applicationIndex=applicationIndexService.findByApplicationNumber(property.getApplicationNo());    final String url="/ptis/view/viewProperty-viewForm.action?applicationNo=" + property.getApplicationNo() + "&applicationType="+ applictionType;    owner=property.getBasicProperty().getPrimaryOwner();    if (property.getBasicProperty().getSource().equals(PropertyTaxConstants.SOURCEOFDATA_MEESEWA))     source=Source.MEESEVA.toString(); else     if (property.getBasicProperty().getSource().equals(PropertyTaxConstants.SOURCEOFDATA_ESEVA))     source=Source.ESEVA.toString(); else     if (property.getBasicProperty().getSource().equals(PropertyTaxConstants.SOURCEOFDATA_MOBILE))     source=Source.MOBILE.toString(); else     source=Source.SYSTEM.toString();    if (applicationIndex == null) {      final ApplicationIndexBuilder applicationIndexBuilder=new ApplicationIndexBuilder(PTMODULENAME,property.getApplicationNo(),property.getCreatedDate() != null ? property.getCreatedDate() : new Date(),applictionType,owner.getName(),property.getState().getValue(),url,property.getBasicProperty().getAddress().toString(),user.getUsername() + "::" + user.getName(),source);      applicationIndexBuilder.consumerCode(property.getBasicProperty().getUpicNo());      applicationIndexBuilder.mobileNumber(owner.getMobileNumber());      applicationIndexBuilder.aadharNumber(owner.getAadhaarNumber());      applicationIndexService.createApplicationIndex(applicationIndexBuilder.build());    } else {      applicationIndex.setStatus(property.getState().getValue());      applicationIndex.setApplicantName(owner.getName());      applicationIndex.setOwnername(user.getUsername() + "::" + user.getName());      applicationIndex.setMobileNumber(owner.getMobileNumber());      applicationIndex.setAadharNumber(owner.getAadhaarNumber());      applicationIndexService.updateApplicationIndex(applicationIndex);    }  }}  }
class C{  public StrBuilder appendln(int value){  return append(value).appendNewLine();}  }
class C{  public String log(){  return " (TERM = " + TERM + ")"+ " (CT = "+ CT+ ")"+ " (RV = "+ RV+ ")"+ " (R1 = "+ R1+ ")"+ " (R2 = "+ R2+ ")";}  }
class C{  @Override public double eval(double[] x,double[] y){  double result=Math.exp(-1.0d / (lengthScale * lengthScale) * norm2(x,y));  return result;}  }
class C{  public void testScaleByPowerOfTen2(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-13;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.scaleByPowerOfTen(10);  String res="1.231212478987482988429808779810457634781384756794987E+74";  int resScale=-23;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public final void putBundle(Bundle bundle){  if (bundles.containsKey(bundle.getName())) {    throw new IllegalArgumentException("Bundle \"" + bundle.getName() + "\" already exists!");  }  bundles.put(bundle.getName(),bundle);}  }
class C{  public void addComponentToSideMenu(Component cmp){  checkIfInitialized();  if (permanentSideMenu) {    constructPermanentSideMenu();    addComponentToSideMenu(permanentSideMenuContainer,cmp);  } else {    Command cmd=new Command("");    cmd.putClientProperty(SideMenuBar.COMMAND_SIDE_COMPONENT,cmp);    cmd.putClientProperty(SideMenuBar.COMMAND_ACTIONABLE,Boolean.FALSE);    sideMenu.addCommand(cmd);    sideMenu.installMenuBar();  }}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public void removePermission(PermissionType permission){  removedPermissions.add(permission);}  }
class C{  public OrderedThreadPoolExecutor(){  this(DEFAULT_INITIAL_THREAD_POOL_SIZE,DEFAULT_MAX_THREAD_POOL,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null);}  }
class C{  public static void print(final MessageOrBuilder message,final Appendable output) throws IOException {  DEFAULT_PRINTER.print(message,new TextGenerator(output));}  }
class C{  public static void removeSelectedGroups(final ZyGraph graph){  for (  final NaviNode node : graph.getSelectedNodes()) {    if (node.getRawNode() instanceof INaviGroupNode) {      graph.getRawView().getContent().deleteNode(node.getRawNode());    }  }}  }
class C{  @Override public void updateClassifier(Instance instance) throws Exception {  updateClassifier(instance,true);}  }
class C{  private static int med3(final int a,final int b,final int c,final IntComparator comp){  int ab=comp.compare(a,b);  int ac=comp.compare(a,c);  int bc=comp.compare(b,c);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  public ValidationAdapterFactory(){  if (modelPackage == null) {    modelPackage=ValidationPackage.eINSTANCE;  }}  }
class C{  public static void closeGroup(final Graph2D graph,final Node groupNode){  Preconditions.checkNotNull(graph,"Error: Graph argument can not be null");  Preconditions.checkNotNull(groupNode,"Error: Group node argument can not be null");  final HierarchyManager hierarchy=graph.getHierarchyManager();  final double w=graph.getWidth(groupNode);  final double h=graph.getHeight(groupNode);  final NodeList groupNodes=new NodeList();  groupNodes.add(groupNode);  graph.firePreEvent();  for (final NodeCursor nc=groupNodes.nodes(); nc.ok(); nc.next()) {    hierarchy.closeGroup(nc.node());  }  graph.firePostEvent();  if ((w != graph.getWidth(groupNode)) || (h != graph.getHeight(groupNode))) {    for (final EdgeCursor ec=groupNode.outEdges(); ec.ok(); ec.next()) {      graph.setSourcePointRel(ec.edge(),YPoint.ORIGIN);    }    for (final EdgeCursor ec=groupNode.inEdges(); ec.ok(); ec.next()) {      graph.setTargetPointRel(ec.edge(),YPoint.ORIGIN);    }  }  graph.updateViews();}  }
class C{  public void defineLexerAction(ActionAST actionAST){  actionIndex=g.lexerActions.size();  if (g.lexerActions.get(actionAST) == null) {    g.lexerActions.put(actionAST,actionIndex);  }}  }
class C{  public Project addModule(String workspace,String projectPath,String modulePath,ProjectConfig moduleConfig,Map<String,String> options,String visibility) throws ConflictException, ForbiddenException, ServerException, NotFoundException {  Project parentProject=getProject(workspace,projectPath);  if (parentProject == null)   throw new NotFoundException("Parent Project not found " + projectPath);  Path absModulePathObj=Project.getAbsoluteModulePath(modulePath,parentProject);  Set<Path> existingAbsModulePaths=parentProject.getModules().getAbsolute();  if (existingAbsModulePaths.contains(absModulePathObj)) {    throw new ConflictException("Module " + modulePath + " already exists");  }  String absModulePath=absModulePathObj.toString();  VirtualFileEntry moduleFolder=getProjectsRoot(workspace).getChild(absModulePath);  if (moduleFolder != null && moduleFolder.isFile())   throw new ConflictException("Item exists on " + absModulePath + " but is not a folder or project");  Project module;  if (moduleFolder == null) {    if (moduleConfig == null)     throw new ConflictException("Module not found on " + absModulePath + " and module configuration is not defined");    String parentPath=absModulePathObj.getParent().toString();    String name=absModulePathObj.getName();    final VirtualFileEntry parentFolder=getProjectsRoot(workspace).getChild(parentPath);    if (parentFolder == null || !parentFolder.isFolder())     throw new NotFoundException("Parent Folder not found " + parentPath);    module=createProjectInFolder((FolderEntry)parentFolder,name,moduleConfig,options,visibility);  } else   if (!((FolderEntry)moduleFolder).isProjectFolder()) {    if (moduleConfig == null)     throw new ConflictException("Folder at " + absModulePath + " is not a project and module configuration is not defined");    module=new Project((FolderEntry)moduleFolder,this);    module.updateConfig(moduleConfig);  } else {    module=getProject(workspace,absModulePath);  }  parentProject.getModules().add(modulePath);  CreateModuleHandler moduleHandler=this.getHandlers().getCreateModuleHandler(parentProject.getConfig().getTypeId());  if (moduleHandler != null) {    moduleHandler.onCreateModule(parentProject.getBaseFolder(),absModulePath,module.getConfig(),options);  }  return module;}  }
class C{  private void assertTagHasPoints(Element tag,Location... locations){  List<Element> coordTags=getChildElements(tag,"gx:coord",locations.length);  for (int i=0; i < locations.length; i++) {    Location location=locations[i];    String expected=location.getLongitude() + " " + location.getLatitude()+ " "+ location.getAltitude();    String actual=coordTags.get(i).getFirstChild().getTextContent();    assertEquals(expected,actual);  }}  }
class C{  private static <T extends GlowEntity>T createEntity(EntityStore<T> store,Location location,CompoundTag compound){  T entity=store.createEntity(location,compound);  store.load(entity,compound);  return entity;}  }
class C{  @Override protected void onLayout(boolean changed,int l,int t,int r,int b){  super.onLayout(changed,l,t,r,b);  mInLayout=true;  layout(0,false);  mInLayout=false;}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs){  this(context,attrs,R.attr.switchPreferenceCompatStyle);}  }
class C{  @Override public IndexTreePath<E> nextElement(){  Enumeration<IndexTreePath<E>> enumeration=queue.peek();  IndexTreePath<E> nextPath=enumeration.nextElement();  Enumeration<IndexTreePath<E>> children;  if (nextPath.getEntry().isLeafEntry()) {    children=EMPTY_ENUMERATION;  } else {    N node=index.getNode(nextPath.getEntry());    children=node.children(nextPath);  }  if (!enumeration.hasMoreElements()) {    queue.remove();  }  if (children.hasMoreElements()) {    queue.offer(children);  }  return nextPath;}  }
class C{  public static URL parseURL(String url){  try {    try {      return new URI(url).toURL();    } catch (    URISyntaxException e) {      try {        if (url.startsWith("file:/")) {          return new URI("file",null,url.substring(5),null).toURL();        } else {          return URIUtil.fromString(url).toURL();        }      } catch (      URISyntaxException e1) {        LOG.error(e.getMessage(),e);        return new URL(url);      }    }  } catch (  MalformedURLException e) {    LOG.error(e.getMessage(),e);    return null;  }}  }
class C{  protected void checkRow(int row){  if (row < 0 || row >= rowCount) {    throw new ArrayIndexOutOfBoundsException("Row " + row + " does not exist.");  }}  }
class C{  public boolean isNative(){  return Modifier.isNative(flags);}  }
class C{  public final void append(char[] chars,int start,int length){  int strlen=length;  if (0 == strlen)   return;  int copyfrom=start;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    System.arraycopy(chars,copyfrom,m_array[m_lastChunk],m_firstFree,available);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  private void ensureNotClosed() throws SQLException {  if (closed)   throw new SQLException("Connection is closed.");}  }
class C{  public Property minuteOfHour(){  return new Property(this,getChronology().minuteOfHour());}  }
class C{  public static ResultSet search(Connection conn,String text,int limit,int offset) throws SQLException {  return search(conn,text,limit,offset,false);}  }
class C{  private void checkPolicy(X509Certificate currCert) throws CertPathValidatorException {  String msg="certificate policies";  if (debug != null) {    debug.println("PolicyChecker.checkPolicy() ---checking " + msg + "...");    debug.println("PolicyChecker.checkPolicy() certIndex = " + certIndex);    debug.println("PolicyChecker.checkPolicy() BEFORE PROCESSING: " + "explicitPolicy = " + explicitPolicy);    debug.println("PolicyChecker.checkPolicy() BEFORE PROCESSING: " + "policyMapping = " + policyMapping);    debug.println("PolicyChecker.checkPolicy() BEFORE PROCESSING: " + "inhibitAnyPolicy = " + inhibitAnyPolicy);    debug.println("PolicyChecker.checkPolicy() BEFORE PROCESSING: " + "policyTree = " + rootNode);  }  X509CertImpl currCertImpl=null;  try {    currCertImpl=X509CertImpl.toImpl(currCert);  } catch (  CertificateException ce) {    throw new CertPathValidatorException(ce);  }  boolean finalCert=(certIndex == certPathLen);  rootNode=processPolicies(certIndex,initPolicies,explicitPolicy,policyMapping,inhibitAnyPolicy,rejectPolicyQualifiers,rootNode,currCertImpl,finalCert);  if (!finalCert) {    explicitPolicy=mergeExplicitPolicy(explicitPolicy,currCertImpl,finalCert);    policyMapping=mergePolicyMapping(policyMapping,currCertImpl);    inhibitAnyPolicy=mergeInhibitAnyPolicy(inhibitAnyPolicy,currCertImpl);  }  certIndex++;  if (debug != null) {    debug.println("PolicyChecker.checkPolicy() AFTER PROCESSING: " + "explicitPolicy = " + explicitPolicy);    debug.println("PolicyChecker.checkPolicy() AFTER PROCESSING: " + "policyMapping = " + policyMapping);    debug.println("PolicyChecker.checkPolicy() AFTER PROCESSING: " + "inhibitAnyPolicy = " + inhibitAnyPolicy);    debug.println("PolicyChecker.checkPolicy() AFTER PROCESSING: " + "policyTree = " + rootNode);    debug.println("PolicyChecker.checkPolicy() " + msg + " verified");  }}  }
class C{  public static VCard createVCardFromXML(String xml) throws Exception {  VCard vCard=new VCard();  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();  Document document=documentBuilder.parse(new ByteArrayInputStream(xml.getBytes(PREFERRED_ENCODING)));  new VCardReader(vCard,document).initializeFields();  return vCard;}  }
class C{  public static String generateNativeGuidForPool(CIMObjectPath poolObjectPath){  String[] poolSplitter=poolObjectPath.getKey(INSTANCEID).getValue().toString().split(Constants.PATH_DELIMITER_REGEX);  return String.format("%s+%s+%s+%s+%s",poolSplitter[0].toUpperCase(),poolSplitter[1],POOL,poolSplitter[2],poolSplitter[3]);}  }
class C{  public Set keySet(){  Set ks=keySet;  if (ks != null)   return ks; else   return keySet=new KeySet();}  }
class C{  public static Optional<MongoCredential> createCredentials(String username,String password,String database){  if (!Strings.isNullOrEmpty(username) && !Strings.isNullOrEmpty(password) && !Strings.isNullOrEmpty(database)) {    return Optional.of(MongoCredential.createMongoCRCredential(username,database,password.toCharArray()));  } else {    return Optional.absent();  }}  }
class C{  protected int next() throws IOException, ExifInvalidFormatException {  if (!mContainExifData) {    return EVENT_END;  }  int offset=mTiffStream.getReadByteCount();  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  if (offset < endOfTags) {    mTag=readTag();    if (mTag == null) {      return next();    }    if (mNeedToParseOffsetsInCurrentIfd) {      checkOffsetOrImageTag(mTag);    }    return EVENT_NEW_TAG;  } else   if (offset == endOfTags) {    if (mIfdType == IfdId.TYPE_IFD_0) {      long ifdOffset=readUnsignedLong();      if (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested()) {        if (ifdOffset != 0) {          registerIfd(IfdId.TYPE_IFD_1,ifdOffset);        }      }    } else {      int offsetSize=4;      if (mCorrespondingEvent.size() > 0) {        offsetSize=mCorrespondingEvent.firstEntry().getKey() - mTiffStream.getReadByteCount();      }      if (offsetSize < 4) {        Log.w(TAG,"Invalid size of link to next IFD: " + offsetSize);      } else {        long ifdOffset=readUnsignedLong();        if (ifdOffset != 0) {          Log.w(TAG,"Invalid link to next IFD: " + ifdOffset);        }      }    }  }  while (mCorrespondingEvent.size() != 0) {    Entry<Integer,Object> entry=mCorrespondingEvent.pollFirstEntry();    Object event=entry.getValue();    try {      skipTo(entry.getKey());    } catch (    IOException e) {      Log.w(TAG,"Failed to skip to data at: " + entry.getKey() + " for "+ event.getClass().getName()+ ", the file may be broken.");      continue;    }    if (event instanceof IfdEvent) {      mIfdType=((IfdEvent)event).ifd;      mNumOfTagInIfd=mTiffStream.readUnsignedShort();      mIfdStartOffset=entry.getKey();      if (mNumOfTagInIfd * TAG_SIZE + mIfdStartOffset + OFFSET_SIZE > mApp1End) {        Log.w(TAG,"Invalid size of IFD " + mIfdType);        return EVENT_END;      }      mNeedToParseOffsetsInCurrentIfd=needToParseOffsetsInCurrentIfd();      if (((IfdEvent)event).isRequested) {        return EVENT_START_OF_IFD;      } else {        skipRemainingTagsInCurrentIfd();      }    } else     if (event instanceof ImageEvent) {      mImageEvent=(ImageEvent)event;      return mImageEvent.type;    } else {      ExifTagEvent tagEvent=(ExifTagEvent)event;      mTag=tagEvent.tag;      if (mTag.getDataType() != ExifTag.TYPE_UNDEFINED) {        readFullTagValue(mTag);        checkOffsetOrImageTag(mTag);      }      if (tagEvent.isRequested) {        return EVENT_VALUE_OF_REGISTERED_TAG;      }    }  }  return EVENT_END;}  }
class C{  protected void dialogInit(){  super.dialogInit();  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  setTitle(getTitle());  Container c=getContentPane();  if (c instanceof JPanel) {    JPanel panel=(JPanel)c;    panel.getActionMap().put(ACTION_DISPOSE,s_dialogAction);    panel.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(s_disposeKeyStroke,ACTION_DISPOSE);  }}  }
class C{  private void handleHtmlShowAccount(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleViewAccount();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("account");  pageWrapper.addHeader();  if (isUserALocalAdminOrNotClosed(requestAndResponse)) {    try {      final String userId=getURIParameterOrUserId(requestAndResponse);      final User currentUser=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));      final User editedUser=dbLogic.getUserById(userId);      if (editedUser == null) {        requestAndResponse.print(servletText.errorNoAccountFound());      } else {        final boolean currentIsEditedUser=isCurrentUserTheEditedUser(currentUser,editedUser);        final boolean isUserAdmin=isUserAnAdmin(requestAndResponse);        if (!isUserAdmin && !currentIsEditedUser) {          requestAndResponse.print(servletText.errorPageNotAllowed());        } else {          final boolean canChangeIsAdmin=isUserAdmin;          requestAndResponse.print(servletText.sentenceUsernameIs(currentIsEditedUser,StringEscapeUtils.escapeHtml4(editedUser.getUserName())) + "<br>");          requestAndResponse.print(servletText.sentenceEmailIs(currentIsEditedUser,StringEscapeUtils.escapeHtml4(editedUser.getEmailOrBlank())) + "<br>");          requestAndResponse.print(servletText.sentenceMayBeContacted(currentIsEditedUser,editedUser.getMayContact()) + "<br>");          if (canChangeIsAdmin) {            if (editedUser.getIsAccountClosed()) {              requestAndResponse.print(servletText.sentenceAccountIsClosed(currentIsEditedUser) + "<br>");            }            if (editedUser.getIsAdmin()) {              requestAndResponse.print(servletText.sentenceIsAnAdmin(currentIsEditedUser) + "<br>");            }          }          requestAndResponse.print("<table class=\"accountButtons\"><tr><td>");          requestAndResponse.print("<form action=\"/changeAccount/" + (currentIsEditedUser ? "" : userId) + "\" method=\"GET\">"+ "<button onclick=\"replacePaneForForm(event, '"+ servletText.buttonChangeAccountDetails()+ "'); return false;\" class=\"specialbutton\">"+ servletText.buttonChangeAccountDetails()+ "</button></form><br>");          requestAndResponse.print("</td><td>");          requestAndResponse.print("<form action=\"/changePassword/" + (currentIsEditedUser ? "" : userId) + "\" method=\"GET\">"+ "<button onclick=\"replacePaneForForm(event, '"+ servletText.buttonChangePassword()+ "'); return false;\" class=\"specialbutton\">"+ servletText.buttonChangePassword()+ "</button></form><br>");          if (!editedUser.getIsAccountClosed()) {            requestAndResponse.print("</td><td>");            requestAndResponse.print("<form action=\"/closeAccount/" + (currentIsEditedUser ? "" : userId) + "\" method=\"GET\">"+ "<button onclick=\"replacePaneForForm(event, '"+ servletText.buttonCloseAccount()+ "'); return false;\" class=\"specialbutton\">"+ servletText.buttonCloseAccount()+ "</button></form><br>");          }          requestAndResponse.print("</td></tr></table>");          if (!currentIsEditedUser) {            requestAndResponse.print("<hr class=\"title\"/>" + servletText.sentenceSeeWhatTheUserSees() + "<ul>");            addUserLink(requestAndResponse,servletText.pageTitleNotebooks(),servletText.pageTitleUsersNotebooksTooltip(),"/notebooks","notebooks",editedUser);            addUserLink(requestAndResponse,servletText.pageTitleQuotations(),servletText.pageTitleUsersQuotationsTooltip(),"/quotations","quotations",editedUser);            addUserLink(requestAndResponse,servletText.pageTitleSources(),servletText.pageTitleUsersSourcesTooltip(),"/sources","sources",editedUser);            addUserLink(requestAndResponse,servletText.pageTitleSearch(),servletText.pageTitleUsersSearchTooltip(),"/search","search",editedUser);            requestAndResponse.print("</ul>");          }        }      }      dbLogic.commit();    } catch (    final PersistenceException e) {      requestAndResponse.print(servletText.errorInternalDatabase());    }  }  pageWrapper.addFooter();}  }
class C{  public SerializationHandler createSerializationHandler(Result outputTarget) throws TransformerException {  SerializationHandler xoh=createSerializationHandler(outputTarget,getOutputFormat());  return xoh;}  }
class C{  public LineChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);  pointsChart=new ScatterChart(dataset,renderer);}  }
class C{  public void acceptTheirs(final int[] rows){  logger.info("Accepting theirs for " + rows.length + " conflicts");  conflictHelper.acceptChangeAsync(getSelectedConflicts(rows),ResolveConflictsCommand.AutoResolveType.TakeTheirs,this);}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public static <T>T[] append(T[] field,int size,T... values){  field=expand(field,(size + values.length),true);  System.arraycopy(values,0,field,size,values.length);  return field;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void initialize(){  super.initialize();  services=new HashMap(serializable + 1);  bcsListeners=new ArrayList(1);}  }
class C{  @Override public Object put(Object key,Object value){  if (closed) {    throw new UnsupportedOperationException("ProtectedProperties cannot be modified!");  } else {    return super.put(key,value);  }}  }
class C{  private Iterator<Processor> handleServiceLoaderUnavailability(String key,Exception e){  JavaFileManager fileManager=context.get(JavaFileManager.class);  if (fileManager instanceof JavacFileManager) {    StandardJavaFileManager standardFileManager=(JavacFileManager)fileManager;    Iterable<? extends File> workingPath=fileManager.hasLocation(ANNOTATION_PROCESSOR_PATH) ? standardFileManager.getLocation(ANNOTATION_PROCESSOR_PATH) : standardFileManager.getLocation(CLASS_PATH);    if (needClassLoader(options.get(PROCESSOR),workingPath))     handleException(key,e);  } else {    handleException(key,e);  }  java.util.List<Processor> pl=Collections.emptyList();  return pl.iterator();}  }
class C{  private void addConsoleAppenderIfNeeded(@Nullable IgniteClosure<Boolean,Logger> initLogClo){  if (inited) {    impl=initLogClo.apply(false);    return;  }synchronized (mux) {    if (inited) {      impl=initLogClo.apply(false);      return;    }    impl=initLogClo.apply(true);    boolean quiet=Boolean.valueOf(System.getProperty(IGNITE_QUIET,"true"));    boolean consoleAppenderFound=false;    Logger rootLogger=null;    for (Logger log=impl; log != null; ) {      if (!consoleAppenderFound) {        for (        Appender appender : log.getAppenders().values()) {          if (appender instanceof ConsoleAppender) {            if ("CONSOLE_ERR".equals(appender.getName()))             continue;            consoleAppenderFound=true;            break;          }        }      }      if (log.getParent() == null) {        rootLogger=log;        break;      } else       log=log.getParent();    }    if (consoleAppenderFound && quiet)     quiet=false;    if (!consoleAppenderFound && !quiet && Boolean.valueOf(System.getProperty(IGNITE_CONSOLE_APPENDER,"true"))) {      assert rootLogger != null;      consoleLog=createConsoleLogger();    }    quiet0=quiet;    inited=true;  }}  }
class C{  public String stringValue(){  return toString();}  }
class C{  @LargeTest public void testAudioTrackSetGetTime() throws Exception {  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  boolean flagForException=false;  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFileName);  mVideoEditor.addAudioTrack(audioTrack);  assertEquals("Audio Track Start Time",0,audioTrack.getStartTime());}  }
class C{  public String toString(){  return getClass().getSimpleName() + " with " + this.interfaces.size()+ " interfaces :"+ this.interfaces;}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  private static void processScript(ContactsExample example,ContactsExampleParameters parameters) throws IOException, ServiceException {  BufferedReader reader=new BufferedReader(new FileReader(parameters.getScript()));  try {    String line;    while ((line=reader.readLine()) != null) {      ContactsExampleParameters newParams=new ContactsExampleParameters(parameters,line);      processAction(example,newParams);      if (lastAddedId != null) {        parameters.setId(lastAddedId);        lastAddedId=null;      }    }  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  @Override protected void onReceiveResult(int resultCode,Bundle resultData){  mAddressOutput=resultData.getString(Constants.RESULT_DATA_KEY);  displayAddressOutput();}  }
class C{  protected Object postProcessExtension(Object result,Type target){  return result;}  }
class C{  @LargeTest public void testCameraPairwiseScenario05() throws Exception {  genericPairwiseTestCase(Flash.AUTO,Exposure.MAX,WhiteBalance.INCANDESCENT,SceneMode.AUTO,PictureSize.LARGE,Geotagging.OFF);}  }
class C{  public TupleComparator(String field,Class type,boolean ascend,Comparator c){  m_field=field;  m_col=-1;  m_type=type;  m_rev=ascend ? 1 : -1;  m_cmp=c;}  }
class C{  public static boolean checkForAdjacentCollectors(World world,BlockPos pos){  for (  EnumFacing face : EnumFacing.values())   if (isCollector(world.getTileEntity(pos.offset(face))))   return false;  return true;}  }
class C{  public DocumentEntry(BaseEntry sourceEntry){  super(sourceEntry);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.356 -0500",hash_original_method="4357F9DD6725F5F393683EE2EA89C677",hash_generated_method="64BF2D5FDACCDB13E451FABAE036B245") public final int decrementAndGet(){  return --value;}  }
class C{  public RecursiveTreeItem(ObservableList<T> dataList,Callback<RecursiveTreeObject<T>,ObservableList<T>> func){  RecursiveTreeObject<T> root=new RecursiveTreeObject<>();  root.setChildren(dataList);  this.childrenFactory=func;  init(root);}  }
class C{  boolean checkPidMatches() throws IllegalStateException, IOException, PidUnavailableException {  final RuntimeMXBean proxy=ManagementFactory.newPlatformMXBeanProxy(this.server,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);  final int remotePid=ProcessUtils.identifyPid(proxy.getName());  if (remotePid != this.pid) {    throw new IllegalStateException("Process has different pid '" + remotePid + "' than expected pid '"+ this.pid+ "'");  } else {    return true;  }}  }
class C{  private static boolean dateByOrdinal(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO){  boolean reducedPrec=false;  if (fields.remove(DateTimeFieldType.year())) {    bld.append(yearElement());    if (fields.remove(DateTimeFieldType.dayOfYear())) {      appendSeparator(bld,extended);      bld.appendDayOfYear(3);    } else {      reducedPrec=true;    }  } else   if (fields.remove(DateTimeFieldType.dayOfYear())) {    bld.appendLiteral('-');    bld.appendDayOfYear(3);  }  return reducedPrec;}  }
class C{  public boolean isDefaultPageSizeInches(){  return this.defaultPageSizeIsInches;}  }
class C{  public StrBuilder appendln(final double value){  return append(value).appendNewLine();}  }
class C{  public static Timestamp convertDateValueToTimestamp(long dateValue,long timeNanos){  long millis=timeNanos / 1000000;  timeNanos-=millis * 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  long ms=getMillis(null,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),(int)h,(int)m,(int)s,0);  Timestamp ts=new Timestamp(ms);  ts.setNanos((int)(timeNanos + millis * 1000000));  return ts;}  }
class C{  public boolean overlaps(Geometry g){  return baseGeom.overlaps(g);}  }
class C{  public String scoreField(){  return mScoreField;}  }
class C{  public void addAnnotation(XYAnnotation annotation){  if (this.annotations == null) {    this.annotations=new java.util.ArrayList();  }  this.annotations.add(annotation);  fireChangeEvent();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.379 -0500",hash_original_method="8D46CF6663407215221C449D596ED15A",hash_generated_method="CBACA53A8D3C7D66DABA127668E3E13D") private void initializeTable(int capacity){  this.table=new Object[capacity * 2];  this.mask=table.length - 1;  this.clean=0;  this.maximumLoad=capacity * 2 / 3;}  }
class C{  protected void initialExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  removeSession(request);  NavegadorDepositoForm frm=(NavegadorDepositoForm)form;  String formatoInicial=(String)getFromTemporalSession(request,DepositoConstants.ID_FORMATO_INICIAL);  if (StringUtils.isNotEmpty(formatoInicial)) {    frm.setFilterByIdformato(formatoInicial);  }  ServiceRepository services=getServiceRepository(request);  GestorEstructuraDepositoBI serviceDeposito=services.lookupGestorEstructuraDepositoBI();  ElementoVO elemento=serviceDeposito.getInfoElemento(frm.getIdseleccionadoinicial(),frm.getIdtiposeleccionadoinicial());  setInTemporalSession(request,DepositoConstants.ELEMENTO_DEPOSITO_KEY,elemento);  cargarDatosNavegador(frm,request,null);}  }
class C{  public void createTopics(String... topics){  createTopics(1,1,topics);}  }
class C{  private void resetMigrationStatus(String version){  CoordinatorClient coordinator=getCoordinator();  Configuration config=coordinator.queryConfiguration(coordinator.getSiteId(),coordinator.getVersionedDbConfigPath(Constants.DBSVC_NAME,version),Constants.GLOBAL_ID);  Assert.assertNotNull(config);  log.info("setMigrationStatus: target version \"{}\" status {}",version,MigrationStatus.RUNNING);  config.setConfig(Constants.MIGRATION_STATUS,MigrationStatus.RUNNING.name());  coordinator.persistServiceConfiguration(coordinator.getSiteId(),config);}  }
class C{  private int readFully(byte[] inBuf,int total) throws IOException {  int count, pos=0;  if (debug) {    System.err.println("readFully " + total + " from "+ in);  }  while (total > 0) {    count=in.read(inBuf,pos,total);    if (debug) {      System.err.println("readFully read " + count);    }    if (count == -1) {      return (pos == 0 ? -1 : pos);    }    pos+=count;    total-=count;  }  return pos;}  }
class C{  protected Shape adjustAllocation(Shape a){  if (a != null) {    Rectangle bounds=a.getBounds();    int vspan=(int)getPreferredSpan(Y_AXIS);    int hspan=(int)getPreferredSpan(X_AXIS);    if (bounds.height != vspan) {      int slop=bounds.height - vspan;      bounds.y+=slop / 2;      bounds.height-=slop;    }    Component c=getContainer();    if (c instanceof JTextField) {      JTextField field=(JTextField)c;      BoundedRangeModel vis=field.getHorizontalVisibility();      int max=Math.max(hspan,bounds.width);      int value=vis.getValue();      int extent=Math.min(max,bounds.width - 1);      if ((value + extent) > max) {        value=max - extent;      }      vis.setRangeProperties(value,extent,vis.getMinimum(),max,false);      if (hspan < bounds.width) {        int slop=bounds.width - 1 - hspan;        int align=((JTextField)c).getHorizontalAlignment();        if (Utilities.isLeftToRight(c)) {          if (align == LEADING) {            align=LEFT;          } else           if (align == TRAILING) {            align=RIGHT;          }        } else {          if (align == LEADING) {            align=RIGHT;          } else           if (align == TRAILING) {            align=LEFT;          }        }switch (align) {case SwingConstants.CENTER:          bounds.x+=slop / 2;        bounds.width-=slop;      break;case SwingConstants.RIGHT:    bounds.x+=slop;  bounds.width-=slop;break;}} else {bounds.width=hspan;bounds.x-=vis.getValue();}}return bounds;}return null;}  }
class C{  public static boolean hasLoginConfig(WebXml webXml){  return getLoginConfig(webXml) != null;}  }
class C{  public void addPrincipalRandKey(String user){  addPrincipal(user,randomPassword());}  }
class C{  public Seq<CharSeq> split(String regex){  return Seqs.newSeq(str.split(regex)).map(null);}  }
class C{  public void loadPollTypes(){  pollManagement.addPollType(26L,false);  pollManagement.addPollType(27L,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.976 -0500",hash_original_method="85620320EA37710A8866ECA4B349D636",hash_generated_method="17B15A15CB497DC07A940E8E9144F966") public String debugDump(int indent){  int save=indentation;  indentation=indent;  String retval=this.debugDump();  indentation=save;  return retval;}  }
class C{  private Map<String,String> buildShortNameToFullNameMap(Set<String> classSet){  Map<String,String> result=new HashMap<String,String>();  for (  String className : classSet) {    String shortClassName=getShortClassName(className);    result.put(shortClassName,className);  }  return result;}  }
class C{  public boolean isPrettyPrint(){  return prettyPrint;}  }
class C{  public CommaExpression createCommaExpression(){  CommaExpressionImpl commaExpression=new CommaExpressionImpl();  return commaExpression;}  }
class C{  public void recordChatLine(final String text){  if (text.startsWith("/record")) {    return;  }  final long thisTimestamp=System.currentTimeMillis();  final long diff=thisTimestamp - lastTimestamp;  if (diff > 5000) {    ps.println("");    if (diff > 60000) {      ps.println("\t\t// -----------------------------------");    }    ps.println("\t\tcsi.sleepSeconds(" + (diff / 1000) + ");");  } else   if (diff > 0) {    ps.println("\t\tcsi.sleepMillis(" + diff + ");");  }  ps.println("\t\tcsi.invoke(\"" + text.replace("\"","\\\"") + "\");");  lastTimestamp=thisTimestamp + 300;}  }
class C{  public static List<RecommendationInfo> generateTweetMetadataRecs(TopSecondDegreeByCountRequest request,List<NodeInfo> nodeInfoList,RecommendationType recommendationType){  Int2ObjectMap<TweetMetadataRecommendationInfo> visitedMetadata=null;  List<RecommendationInfo> results=new ArrayList<RecommendationInfo>();  for (  NodeInfo nodeInfo : nodeInfoList) {    int[] metadata=nodeInfo.getNodeMetadata(recommendationType.getValue());    if (metadata != null) {      if (visitedMetadata == null) {        visitedMetadata=new Int2ObjectOpenHashMap<TweetMetadataRecommendationInfo>();      }      for (int j=0; j < metadata.length; j++) {        TweetMetadataRecommendationInfo recommendationInfo=visitedMetadata.get(metadata[j]);        if (recommendationInfo == null) {          recommendationInfo=new TweetMetadataRecommendationInfo(metadata[j],RecommendationType.at(recommendationType.getValue()),0,new HashMap<Byte,Map<Long,LongList>>());        }        recommendationInfo.addToWeight(nodeInfo.getWeight());        addToSocialProof(nodeInfo,recommendationInfo,request.getMaxUserSocialProofSize(),request.getMaxTweetSocialProofSize());        visitedMetadata.put(metadata[j],recommendationInfo);      }    }  }  if (visitedMetadata != null) {    List<TweetMetadataRecommendationInfo> filtered=null;    int minUserSocialProofSize=request.getMinUserSocialProofSizes().containsKey(recommendationType) ? request.getMinUserSocialProofSizes().get(recommendationType) : MIN_USER_SOCIAL_PROOF_SIZE;    int maxNumResults=request.getMaxNumResultsByType().containsKey(recommendationType) ? Math.min(request.getMaxNumResultsByType().get(recommendationType),RecommendationRequest.MAX_RECOMMENDATION_RESULTS) : RecommendationRequest.DEFAULT_RECOMMENDATION_RESULTS;    for (    Int2ObjectMap.Entry<TweetMetadataRecommendationInfo> entry : visitedMetadata.int2ObjectEntrySet()) {      if (isLessThantMinUserSocialProofSize(entry.getValue().getSocialProof(),minUserSocialProofSize)) {        continue;      }      if (filtered == null) {        filtered=new ArrayList<TweetMetadataRecommendationInfo>();      }      filtered.add(entry.getValue());    }    if (filtered != null) {      Collections.sort(filtered);      int toIndex=Math.min(maxNumResults,filtered.size());      for (int j=0; j < toIndex; j++) {        results.add(filtered.get(j));      }    }  }  return results;}  }
class C{  @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public ClientDetailResponse createClient(@Auth AutomationClient automationClient,@Valid CreateClientRequest clientRequest){  Optional<Client> client=clientDAO.getClient(clientRequest.name);  if (client.isPresent()) {    logger.info("Automation ({}) - Client {} already exists",automationClient.getName(),clientRequest.name);    throw new ConflictException("Client name already exists.");  }  long id=clientDAO.createClient(clientRequest.name,automationClient.getName(),"");  client=clientDAO.getClientById(id);  if (client.isPresent()) {    Map<String,String> extraInfo=new HashMap<>();    extraInfo.put("deprecated","true");    auditLog.recordEvent(new Event(Instant.now(),EventTag.CLIENT_CREATE,automationClient.getName(),client.get().getName(),extraInfo));  }  return ClientDetailResponse.fromClient(client.get(),ImmutableList.of(),ImmutableList.of());}  }
class C{  public ByteBuffer unpredict(ByteBuffer imageData) throws IOException {  List<byte[]> rows=new ArrayList<byte[]>();  byte[] curLine=null;  byte[] prevLine=null;  int rowSize=getColumns() * getColors() * getBitsPerComponent();  rowSize=(int)Math.ceil(rowSize / 8.0);  while (imageData.remaining() >= rowSize + 1) {    int algorithm=(int)(imageData.get() & 0xff);    curLine=new byte[rowSize];    imageData.get(curLine);switch (algorithm) {case 0:      break;case 1:    doSubLine(curLine);  break;case 2:doUpLine(curLine,prevLine);break;case 3:doAverageLine(curLine,prevLine);break;case 4:doPaethLine(curLine,prevLine);break;}rows.add(curLine);prevLine=curLine;}ByteBuffer outBuf=ByteBuffer.allocate(rows.size() * rowSize);for (Iterator i=rows.iterator(); i.hasNext(); ) {outBuf.put((byte[])i.next());}outBuf.flip();return outBuf;}  }
class C{  public static String encode(String uri){  return escaper.escape(uri);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int x=getInt(stack);  MediaFile mf=getMediaFile(stack);  return (mf == null) ? null : mf.getFile(x);}  }
class C{  public Joiner match(String field,Collection<? extends Object> value){  if (lastJClass == null) {    throw new JoinerException("Must have join before match");  }  JSelection js=new JSelection();  js.setField(field);  js.setValues(new HashSet<Object>(value));  lastJClass.getSelections().add(js);  return this;}  }
class C{  public final String sourceExpression(int index){  StringBuffer expr=null;  if (index < 0) {    return "i[" + m_Attribute + "] == null";  }  if (m_Info.attribute(m_Attribute).isNominal()) {    expr=new StringBuffer("i[");    expr.append(m_Attribute).append("]");    expr.append(".equals(\"").append(m_Info.attribute(m_Attribute).value(index)).append("\")");  } else {    expr=new StringBuffer("");    if (index == 0) {      expr.append("((Double)i[").append(m_Attribute).append("]).doubleValue() < ").append(m_SplitPoint);    } else {      expr.append("true");    }  }  return expr.toString();}  }
class C{  public BicubicScaleFilter(){  this(32,32);}  }
class C{  public boolean disableImageAccessStep(URI rpSystemId,URI exportGroupURI,String token) throws ControllerException {  try {    WorkflowStepCompleter.stepExecuting(token);    List<URI> snapshots=new ArrayList<URI>();    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);    for (    String exportVolumeIDStr : exportGroup.getVolumes().keySet()) {      URI blockID;      blockID=new URI(exportVolumeIDStr);      BlockObject block=BlockObject.fetch(_dbClient,blockID);      if (block.getProtectionController() != null) {        if (block.getId().toString().contains("BlockSnapshot")) {          snapshots.add(block.getId());        }      }    }    disableImageForSnapshots(rpSystemId,new ArrayList<URI>(snapshots),false,false,token);    WorkflowStepCompleter.stepSucceded(token);  } catch (  Exception e) {    _log.error(String.format("disableImageAccessStep Failed - Protection System: %s, export group: %s",String.valueOf(rpSystemId),String.valueOf(exportGroupURI)));    return stepFailed(token,e,"disableImageAccessStep");  }  return true;}  }
class C{  private RelativeLayout.LayoutParams createMyLayoutParams(int x,int y,int width,int height){  RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);  layoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);  layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);  layoutParams.width=width;  layoutParams.height=height;  layoutParams.leftMargin=x;  layoutParams.topMargin=y;  return layoutParams;}  }
class C{  public String toString(){  return syncbaseID + ".marker(" + markerName+ ")";}  }
class C{  public void init(){  String source=getParameter("sourceSentence");  String derivation=getParameter("derivationTree");  Tree tree=new Tree(derivation);  add(new DerivationViewer(new DerivationTree(tree,source),getSize(),Color.red,DerivationViewer.AnchorType.ANCHOR_ROOT));}  }
class C{  public void deleteDescriptor(String id){  String qual=new StringBuffer().append(DBUtils.WHERE).append(DBUtils.generateEQTokenField(CAMPO_ID,id)).toString();  if (logger.isDebugEnabled())   logger.debug("Se va a eliminar el descriptor con id: " + id);  deleteVO(qual,TABLE_NAME);}  }
class C{  public void collectAndSetProperties(){  if (propertyConsumer != null) {    String prefix=propertyConsumer.getPropertyPrefix();    Properties props=collectProperties();    propertyConsumer.setProperties(prefix,props);  }}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public Writer write(Writer writer) throws JSONException {  try {    boolean b=false;    int len=length();    writer.write('[');    for (int i=0; i < len; i+=1) {      if (b) {        writer.write(',');      }      Object v=this.myArrayList.get(i);      if (v instanceof JSONObject) {        ((JSONObject)v).write(writer);      } else       if (v instanceof JSONArray) {        ((JSONArray)v).write(writer);      } else {        writer.write(JSONObject.valueToString(v));      }      b=true;    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(removeNamedItemNS02.class,args);}  }
class C{  public void update(Graphics g){}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{qos_id}/disassociate_all") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response disassociateQosFromAllAssociations(@PathParam("tenant_id") String openstackTenantId,@PathParam("qos_id") String qosId){  _log.debug("START disassociate qos from all associations");  throw new UnsupportedOperationException();}  }
class C{  public static boolean invokeVelocimacro(String vmName,String logTag,String params[],Context context,Writer writer){  if (vmName == null || params == null || context == null || writer == null || logTag == null) {    RuntimeSingleton.error("Velocity.invokeVelocimacro() : invalid parameter");    return false;  }  if (!RuntimeSingleton.isVelocimacro(vmName,logTag)) {    RuntimeSingleton.error("Velocity.invokeVelocimacro() : VM '" + vmName + "' not registered.");    return false;  }  StringBuffer construct=new StringBuffer("#");  construct.append(vmName);  construct.append("(");  for (int i=0; i < params.length; i++) {    construct.append(" $");    construct.append(params[i]);  }  construct.append(" )");  try {    boolean retval=evaluate(context,writer,logTag,construct.toString());    return retval;  } catch (  Exception e) {    RuntimeSingleton.error("Velocity.invokeVelocimacro() : error " + e);  }  return false;}  }
class C{  private synchronized void startRelayLogs(String fileName,long offset) throws ReplicatorException {  if (!useRelayLogs)   return;  String startPosition=fileName + ":" + offset;  stopRelayLogs();  relayLogRetention=Math.max(relayLogRetention,2);  relayLogQueue=new LinkedBlockingQueue<File>(relayLogRetention);  logger.info("Contructing relay log queue: size=" + relayLogRetention);  RelayLogClient relayClient=new RelayLogClient();  relayClient.setUrl(url);  relayClient.setLogin(user);  relayClient.setPassword(password);  relayClient.setBinlogDir(binlogDir);  relayClient.setBinlog(fileName);  relayClient.setBinlogPrefix(binlogFilePattern);  relayClient.setServerId(serverId);  relayClient.setLogQueue(relayLogQueue);  relayClient.setReadTimeout(relayLogReadTimeout);  relayClient.setDeterministicIo(deterministicIo);  relayClient.connect();  relayLogTask=new RelayLogTask(relayClient);  relayLogThread=new Thread(relayLogTask,"Relay Client - " + runtime.getServiceName());  relayLogThread.start();  logger.info("Waiting for relay log position to catch up to extraction position: " + startPosition);  long startTime=System.currentTimeMillis();  long maxEndTime;  if (relayLogWaitTimeout > 0)   maxEndTime=startTime + (relayLogWaitTimeout * 1000); else   maxEndTime=Long.MAX_VALUE;  int loopCount=0;  while (System.currentTimeMillis() < maxEndTime) {    RelayLogPosition position=relayLogTask.getPosition();    if (position.hasReached(fileName,offset))     break;    if (relayLogTask.isFinished())     throw new ExtractorException("Relay log task failed while waiting for start position: " + startPosition);    if (loopCount % 10 == 0)     logger.info("Current relay log position: " + position.toString());    loopCount++;    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {      throw new ExtractorException("Unexpected interruption while positioning binlog");    }  }  if (System.currentTimeMillis() >= maxEndTime) {    throw new ExtractorException("Timed out waiting for relay log to reach extraction position: " + fileName + ":"+ offset);  }}  }
class C{  protected void paint(SynthContext context,Graphics g){  super.paint(g,context.getComponent());}  }
class C{  public static String convertBytesToHex(byte[] value,int len){  char[] buff=new char[len + len];  char[] hex=HEX;  for (int i=0; i < len; i++) {    int c=value[i] & 0xff;    buff[i + i]=hex[c >> 4];    buff[i + i + 1]=hex[c & 0xf];  }  return new String(buff);}  }
class C{  public HttpResponse HEADResponse(final String uri,final boolean concurrent) throws IOException {  return HEADResponse(new MultiProtocolURL(uri),concurrent);}  }
class C{  public void paintPasswordFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  Log.i(TAG,"Ready");}  }
class C{  public void printDo(Vertex expression,Writer writer,String indent,Set<Vertex> elements,List<Vertex> newVariables,List<Vertex> newFunctions,List<Vertex> newStates,Network network) throws IOException {  printComments(expression,writer,indent,false,network);  writer.write(indent);  writer.write("\t");  writer.write("do");  Collection<Relationship> dos=expression.getRelationships(Primitive.DO);  if (dos != null) {    writer.write(" {\r\n");    writer.write(indent);    writer.write("\t");    writer.write("\t");    printArguments(expression,Primitive.DO,0,null,false,true,true,false,writer,indent,newVariables,newFunctions,elements,true,network);    writer.write(indent);    writer.write("\t");    writer.write("}\r\n");  } else {    writer.write(" {}\r\n");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void preorder(TreeNode<E> root){  if (root == null)   return;  System.out.print(root.element + " ");  preorder(root.left);  preorder(root.right);}  }
class C{  public void trace(String format,Object... argArray){}  }
class C{  protected void buildTree(){  Collection<GraphNode> roots=hierarchy.computeRoots();  this.mCurrentPoint=new Point(0,20);  if (roots.size() > 0) {    for (    GraphNode node : roots) {      calculateDimensionX(node);      mCurrentPoint.x+=this.basePositions.get(node) / 2 + 50;      buildTree(node,this.mCurrentPoint.x);    }  }}  }
class C{  private void testStringMissingSortedLastReverse(SortField.Type sortType) throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  Type type=sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",type));  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sf=new SortField("value",sortType,true);  sf.setMissingValue(SortField.STRING_LAST);  Sort sort=new Sort(sf);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertNull(searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("foo",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("bar",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public Xtruct3(Xtruct3 other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetString_thing()) {    this.string_thing=other.string_thing;  }  this.changed=other.changed;  this.i32_thing=other.i32_thing;  this.i64_thing=other.i64_thing;}  }
class C{  public void addSection(Section s){  sections.add(s);  ccl.add(s);}  }
class C{  @Override public String toString(){  StringBuffer result;  if (m_Model == null) {    result=new StringBuffer("No model loaded yet.");  } else {    result=new StringBuffer();    result.append("SerializedClassifier\n");    result.append("====================\n\n");    result.append("File: " + getModelFile() + "\n\n");    result.append(m_Model.toString());  }  return result.toString();}  }
class C{  public TypeScriptDtoGenerator(){  this.dtoModels=new ArrayList<>();}  }
class C{  protected void processOneToOnePrimaryKeyRelationship(OneToOneMapping mapping){  List<PrimaryKeyJoinColumnMetadata> pkJoinColumns=processPrimaryKeyJoinColumns(getPrimaryKeyJoinColumns());  for (  PrimaryKeyJoinColumnMetadata primaryKeyJoinColumn : pkJoinColumns) {    DatabaseField pkField=getReferencedField(primaryKeyJoinColumn.getReferencedColumnName(),getReferenceDescriptor(),MetadataLogger.PK_COLUMN);    DatabaseField fkField=getReferencedField(primaryKeyJoinColumn.getName(),getDescriptor(),MetadataLogger.FK_COLUMN);    mapping.addForeignKeyField(fkField,pkField);  }  mapping.setIsReadOnly(true);  mapping.setIsOneToOnePrimaryKeyRelationship(true);  if (m_primaryKeyForeignKey != null) {    m_primaryKeyForeignKey.process(getDescriptor().getPrimaryKeyTable());  }}  }
class C{  public long readBits(){  return readBits;}  }
class C{  public AccessTokenHeaderExtractor(ContainerRequestContext context,String header){  this.sm=StringManager.getManager(Config.LOCALIZATION_PACKAGE_NAME);  String authorizationHeader=context.getHeaderString(header);  if (authorizationHeader != null && !authorizationHeader.isEmpty()) {    this.matcher=AUTHORIZATION_PATTERN.matcher(authorizationHeader);  }}  }
class C{  protected void notifyShowContextualSearch(GSAContextDisplaySelection selectionContext,@Nullable URL baseContentViewUrl){  if (!mPolicy.canSendSurroundings(baseContentViewUrl))   selectionContext=null;  for (  ContextualSearchObserver observer : mObservers) {    observer.onShowContextualSearch(selectionContext);  }}  }
class C{  public static GridTabVO create(GridWindowVO wVO,int TabNo,ResultSet rs,boolean isRO,boolean onlyCurrentRows){  CLogger.get().config("#" + TabNo);  GridTabVO vo=new GridTabVO(wVO.ctx,wVO.WindowNo);  vo.AD_Window_ID=wVO.AD_Window_ID;  vo.TabNo=TabNo;  if (!loadTabDetails(vo,rs))   return null;  if (isRO) {    CLogger.get().fine("Tab is ReadOnly");    vo.IsReadOnly=true;  }  vo.onlyCurrentRows=onlyCurrentRows;  if (vo.IsSortTab) {    vo.Fields=new ArrayList<GridFieldVO>();  }  return vo;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void writeItems(final Collection<Item> itemCollection,final DataOutput dos,final boolean dotted) throws IOException {  int size=itemCollection.size();  Item[] items=itemCollection.toArray(new Item[size]);  Arrays.sort(items);  for (int i=0; i < size; i++) {    dos.writeUTF(items[i].name);    dos.writeInt(items[i].access);    dos.writeUTF(dotted ? items[i].desc.replace('/','.') : items[i].desc);  }}  }
class C{  public ThreadPool(int numThreads){  super("ThreadPool-" + (threadPoolID++));  setDaemon(true);  isAlive=true;  taskQueue=new LinkedList();  for (int i=0; i < numThreads; i++) {    new PooledThread().start();  }}  }
class C{  public static int compile(String[] args,PrintWriter out){  com.redhat.ceylon.langtools.tools.javac.main.Main compiler=new com.redhat.ceylon.langtools.tools.javac.main.Main("javac",out);  return compiler.compile(args).exitCode;}  }
class C{  public boolean isSubscribeOrUnsubscribeServicePending(String subscriptionId){  ArgumentValidator.notNull("subscriptionId",subscriptionId);  Query query=ds.createNamedQuery("TriggerProcessIdentifier.isSubscribeOrUnsubscribeServicePending");  query.setParameter("pendingStates",TriggerProcess.getUnfinishedStatus());  query.setParameter("triggerTypes",Arrays.asList(TriggerType.SUBSCRIBE_TO_SERVICE,TriggerType.UNSUBSCRIBE_FROM_SERVICE));  query.setParameter("orgKeyName",TriggerProcessIdentifierName.ORGANIZATION_KEY);  query.setParameter("orgKey",String.valueOf(ds.getCurrentUser().getOrganization().getKey()));  query.setParameter("subscriptionIdName",TriggerProcessIdentifierName.SUBSCRIPTION_ID);  query.setParameter("subscriptionId",subscriptionId);  return ((Long)query.getSingleResult()).longValue() > 0;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    String returnedHeader="";    for (i=0; i < numImages; i++) {      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      GeoTiff gt=new GeoTiff(imageFiles[i]);      gt.read();      int compressionType=gt.getCompressionType();      if (compressionType != 1) {        showFeedback("GeoTiff import does not currently support compressed files.");        return;      }      boolean hasNoDataValue=gt.hasNoDataTag();      double nodata;      if (hasNoDataValue) {        nodata=gt.getNoData();      } else {        nodata=-32768;      }      int nRows=gt.getNumberRows();      int nCols=gt.getNumberColumns();      int dot=imageFiles[i].lastIndexOf(".");      String tiffExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(tiffExtension,"dep");      if (i == 0) {        returnedHeader=whiteboxHeaderFile;      }      whiteboxDataFile=imageFiles[i].replace(tiffExtension,"tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      ByteOrder byteOrder=gt.getByteOrder();      WhiteboxRasterBase.DataScale myDataScale=WhiteboxRasterBase.DataScale.CONTINUOUS;      if (gt.getPhotometricInterpretation() == 2) {        myDataScale=WhiteboxRasterBase.DataScale.RGB;      }      final WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,gt.getNorth(),gt.getSouth(),gt.getEast(),gt.getWest(),nRows,nCols,myDataScale,WhiteboxRasterBase.DataType.FLOAT,nodata,nodata);      wbr.setByteOrder(byteOrder.toString());      double z;      int oldProgress=-1;      for (int row=0; row < nRows; row++) {        for (int col=0; col < nCols; col++) {          z=gt.getValue(row,col);          if (!hasNoDataValue && (z == -32768 || z == -Float.MAX_VALUE)) {            nodata=z;            hasNoDataValue=true;            wbr.setNoDataValue(nodata);          }          wbr.setValue(row,col,z);        }        progress=(int)(100f * row / (nRows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Importing GeoTiff file...",progress);        }      }      wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      wbr.addMetadataEntry("Created on " + new Date());      String[] metaData=gt.showInfo();      for (int a=0; a < metaData.length; a++) {        wbr.addMetadataEntry(metaData[a]);      }      wbr.close();      gt.close();    }    if (!returnedHeader.isEmpty()) {      returnData(returnedHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ABSTRACT_CATCH_BLOCK__BLOCK:    return getBlock();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void request(int senderWhat,Handler target,int targetWhat){synchronized (this) {    Registration r=null;    if (mReg == null) {      r=new Registration();      r.senderWhat=senderWhat;      r.targets=new Handler[1];      r.targetWhats=new int[1];      r.targets[0]=target;      r.targetWhats[0]=targetWhat;      mReg=r;      r.next=r;      r.prev=r;    } else {      Registration start=mReg;      r=start;      do {        if (r.senderWhat >= senderWhat) {          break;        }        r=r.next;      } while (r != start);      int n;      if (r.senderWhat != senderWhat) {        Registration reg=new Registration();        reg.senderWhat=senderWhat;        reg.targets=new Handler[1];        reg.targetWhats=new int[1];        reg.next=r;        reg.prev=r.prev;        r.prev.next=reg;        r.prev=reg;        if (r == mReg && r.senderWhat > reg.senderWhat) {          mReg=reg;        }        r=reg;        n=0;      } else {        n=r.targets.length;        Handler[] oldTargets=r.targets;        int[] oldWhats=r.targetWhats;        for (int i=0; i < n; i++) {          if (oldTargets[i] == target && oldWhats[i] == targetWhat) {            return;          }        }        r.targets=new Handler[n + 1];        System.arraycopy(oldTargets,0,r.targets,0,n);        r.targetWhats=new int[n + 1];        System.arraycopy(oldWhats,0,r.targetWhats,0,n);      }      r.targets[n]=target;      r.targetWhats[n]=targetWhat;    }  }}  }
class C{  public static ChatsFragment newInstance(String param1,String param2){  ChatsFragment fragment=new ChatsFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  private JDiffMethod loadMethodInfo(String className,XmlPullParser parser){  String methodName=parser.getAttributeValue(null,ATTRIBUTE_NAME);  String returnType=parser.getAttributeValue(null,ATTRIBUTE_RETURN);  int modifier=jdiffModifierToReflectionFormat(className,parser);  return new JDiffMethod(methodName,modifier,returnType);}  }
class C{  protected String patchName(String qname){  final int lastColon=qname.lastIndexOf(':');  if (lastColon > 0) {    final int firstColon=qname.indexOf(':');    final String prefix=qname.substring(0,firstColon);    final String localName=qname.substring(lastColon + 1);    final String uri=m_prefixMap.lookupNamespace(prefix);    if (uri != null && uri.length() == 0) {      return localName;    } else     if (firstColon != lastColon) {      return prefix + ':' + localName;    }  }  return qname;}  }
class C{  private float smoothInput(float current,float input){  current=MathUtils.clamp(current,input - 30,input + 30);  return MathUtils.interpolate(current,input,0.8f);}  }
class C{  private static int streamtoword(byte data[],int offp[]){  int i;  int word=0;  int off=offp[0];  for (i=0; i < 4; i++) {    word=(word << 8) | (data[off] & 0xff);    off=(off + 1) % data.length;  }  offp[0]=off;  return word;}  }
class C{  public cern.colt.list.ObjectArrayList toList(ObjectMatrix1D values){  int size=values.size();  cern.colt.list.ObjectArrayList list=new cern.colt.list.ObjectArrayList(size);  list.setSize(size);  for (int i=size; --i >= 0; )   list.set(i,values.get(i));  return list;}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public Response deactivateCatalogImage(@PathParam("id") URI id) throws DatabaseException {  CatalogImage catalogImage=queryResource(id);  ArgValidator.checkEntity(catalogImage,id,true);  catalogImageManager.deleteCatalogImage(catalogImage);  auditOpSuccess(OperationTypeEnum.DELETE_CATALOG_IMAGE,catalogImage.auditParameters());  return Response.ok().build();}  }
class C{  public static int charToGsm(char c,boolean throwException) throws EncodeException {  int ret;  ret=sCharsToGsmTables[0].get(c,-1);  if (ret == -1) {    ret=sCharsToShiftTables[0].get(c,-1);    if (ret == -1) {      if (throwException) {        throw new EncodeException(c);      } else {        return sCharsToGsmTables[0].get(' ',' ');      }    } else {      return GSM_EXTENDED_ESCAPE;    }  }  return ret;}  }
class C{  public String thresholdTipText(){  return "Set threshold by which attributes can be discarded. Default value " + "results in no attributes being discarded. Use in conjunction with " + "generateRanking";}  }
class C{  public Window(Interpreter interp,String lang){  interpreter=interp;  language=lang;}  }
class C{  public void stop(){synchronized (eventMutex) {    if (this.refCount > 0)     this.refCount--;    if (this.refCount == 0) {      isStopped=true;      eventMutex.notify();    }  }}  }
class C{  public final AC shrinkPrio(int p){  return shrinkPrio(p,curIx);}  }
class C{  public void chmodFile(String permissions,String file){  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.chmodFile"),permissions,file);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());}  }
class C{  protected void rememberAttribute(String name,String value){  if (textAttributes == null)   textAttributes=new HashMap<String,String>(4);  textAttributes.put(name,value);}  }
class C{  public final void reset(){  chooseFirstProvider();  spi.engineReset();}  }
class C{  private void displayChooserDialog(){  final Intent videoGalleryIntent=new Intent(Intent.ACTION_GET_CONTENT).setType("video/*").putExtra(Intent.EXTRA_LOCAL_ONLY,true);  final Intent recordVideoIntent=new Intent(MediaStore.ACTION_VIDEO_CAPTURE);  final Intent chooserIntent=Intent.createChooser(videoGalleryIntent,"Upload Video via");  chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{recordVideoIntent});  startActivityForResult(chooserIntent,REQUEST_GET_VIDEO);}  }
class C{  public Cursor swapCursor(Cursor newCursor){  if (newCursor == mCursor) {    return null;  }  Cursor oldCursor=mCursor;  mCursor=newCursor;  return oldCursor;}  }
class C{  public void addClasspathEntry(String url) throws IOException {  throw new UnsupportedOperationException();}  }
class C{  protected void sequence_ThrowStatement(ISerializationContext context,ThrowStatement semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.THROW_STATEMENT__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.THROW_STATEMENT__EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0(),semanticObject.getExpression());  feeder.finish();}  }
class C{  public boolean isEmptyZoneset(WBEMClient client,CIMObjectPath zonesetPath) throws WBEMException {  return !zonesetHasMore(client,zonesetPath,0);}  }
class C{  public Ed25519GroupElement(final CoordinateSystem coordinateSystem,final Ed25519FieldElement X,final Ed25519FieldElement Y,final Ed25519FieldElement Z,final Ed25519FieldElement T){  this.coordinateSystem=coordinateSystem;  this.X=X;  this.Y=Y;  this.Z=Z;  this.T=T;}  }
class C{  public void testPowPositiveNum(){  byte aBytes[]={50,-26,90,69,120,32,63,-103,-14,35};  int aSign=1;  int exp=5;  byte rBytes[]={20,93,41,14,126,-114,49,87,-116,34,-4,-60,91,-112,74,-104,41,-42,-35,113,-100,31,-106,58,-128,-46,-109,-75,92,-106,-34,-13,4,19,-18,20,118,126,114,-28,121,-27,66,-110,124,-17,-92,69,-109};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.pow(exp);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @TargetApi(21) public GridItemView(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  super(context,attrs,defStyleAttr,defStyleRes);  loadThemeAttributes(attrs,defStyleAttr,defStyleRes);}  }
class C{  public void addCalendarSelectionListener(CalendarSelectionListener listener){  calendarSelectionListeners.add(listener);}  }
class C{  public static ReilInstruction createBisz(final Address address,final ReilOperand inputValue,final ReilOperand outputValue){  return new ReilInstruction(address,ReilMnemonics.BISZ,inputValue,ReilOperand.EMPTY_OPERAND,outputValue);}  }
class C{  public Conversation begin(){  context.getBot().getConversationRegistry().registerConversation(this);  if (!silent) {    SendableMessage response=currentPrompt.promptMessage(context);    if (response != null) {      forWhom.sendMessage(response);    }  }  return this;}  }
class C{  @Override protected void after(){  log.info("Stopping {}: {}",this.getClass().getSimpleName(),getServerName());  super.after();  this.stop();}  }
class C{  protected void clearEvents(){  sCIIf.clearEvents();  operationCallbackEvent=false;  listeners=false;  for (int i=0; i < timeEvents.length; i++) {    timeEvents[i]=false;  }}  }
class C{  public static Map<String,List<Polygon>> readOneToManyPolygons(final InputStream stream){  final HashMap<String,List<Polygon>> mapping=new HashMap<>();  try (InputStreamReader inputStreamReader=new InputStreamReader(stream);LineNumberReader reader=new LineNumberReader(inputStreamReader)){    String current=reader.readLine();    while (current != null) {      if (current.trim().length() != 0) {        readMultiplePolygons(current,mapping);      }      current=reader.readLine();    }  } catch (  final IOException e) {    ClientLogger.logQuietly(e);    System.exit(0);  } finally {    try {      if (stream != null) {        stream.close();      }    } catch (    final IOException e) {      ClientLogger.logError(e);    }  }  return mapping;}  }
class C{  @Override public void updateScreen(){  commandBox.updateCursorCounter();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    return ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).getAudioOutput();  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.494 -0500",hash_original_method="E1EC1A01B7E978D9F78C671CC9D0E725",hash_generated_method="DE63C5442C0359B728ECA78D386297FA") public DName(String dName){  if (dName != null) {    mDName=dName;    try {      X509Name x509Name=new X509Name(dName);      Vector val=x509Name.getValues();      Vector oid=x509Name.getOIDs();      for (int i=0; i < oid.size(); i++) {        if (oid.elementAt(i).equals(X509Name.CN)) {          mCName=(String)val.elementAt(i);          continue;        }        if (oid.elementAt(i).equals(X509Name.O)) {          mOName=(String)val.elementAt(i);          continue;        }        if (oid.elementAt(i).equals(X509Name.OU)) {          mUName=(String)val.elementAt(i);          continue;        }      }    } catch (    IllegalArgumentException ex) {    }  }}  }
class C{  public CNumericFilterExpression(final FilterRelation relation,final long value){  m_relation=relation;  m_value=value;}  }
class C{  public ImprovedBacktrackingStrategy(){}  }
class C{  public final void testGetG(){  DSAPrivateKeySpec dpks=new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(4,dpks.getG().intValue());}  }
class C{  private void trackPlanet(OrthographicCamera camera,float aspectRatio){  camera.viewportHeight=2 * PLANET_RADIUS;  camera.viewportWidth=aspectRatio * camera.viewportHeight;  camera.position.set(0,0,0);  camera.translate(PLANET_CENTER_X,PLANET_CENTER_Y,0);}  }
class C{  public EvaluationStatistics(MultiLabelClassifier classifier,String relation,Result result){  super();  m_Classifier=classifier;  m_CommandLine=(classifier == null) ? null : OptionUtils.toCommandLine(classifier);  m_Relation=relation;  if (result != null) {    for (    String key : result.vals.keySet()) {      if (result.vals.get(key) instanceof Number)       put(key,(Number)result.vals.get(key));    }    for (    String key : result.availableMetrics()) {      if (result.getMeasurement(key) instanceof Number)       put(key,(Number)result.getMeasurement(key));    }  }}  }
class C{  private void checkCoverTree(Node cur,int[] counts,int depth){  counts[0]+=1;  counts[1]+=depth;  counts[2]=depth > counts[2] ? depth : counts[2];  counts[3]+=cur.singletons.size() - 1;  counts[4]+=cur.singletons.size() - (cur.children == null ? 0 : 1);  if (cur.children != null) {    ++depth;    for (    Node chi : cur.children) {      checkCoverTree(chi,counts,depth);    }    assert (!cur.children.isEmpty()) : "Empty childs list.";  }}  }
class C{  public AerovisConverter(){  super();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static Iterator<String> parse(Class<?> service,URL u,Set<String> returned) throws ServiceConfigurationError {  InputStream in=null;  BufferedReader r=null;  ArrayList<String> names=new ArrayList<>();  try {    in=u.openStream();    r=new BufferedReader(new InputStreamReader(in,"utf-8"));    int lc=1;    while ((lc=parseLine(service,u,r,lc,names,returned)) >= 0)     ;  } catch (  IOException x) {    fail(service,": " + x);  } finally {    try {      if (r != null)       r.close();      if (in != null)       in.close();    } catch (    IOException y) {      fail(service,": " + y);    }  }  return names.iterator();}  }
class C{  public StepObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  public Object eval(Class baseType,int dimensions,CallStack callstack,Interpreter interpreter) throws EvalError {  int numInitializers=jjtGetNumChildren();  int[] dima=new int[dimensions];  dima[0]=numInitializers;  Object initializers=Array.newInstance(baseType,dima);  for (int i=0; i < numInitializers; i++) {    SimpleNode node=(SimpleNode)jjtGetChild(i);    Object currentInitializer;    if (node instanceof BSHArrayInitializer) {      if (dimensions < 2)       throw new EvalError("Invalid Location for Intializer, position: " + i,this,callstack);      currentInitializer=((BSHArrayInitializer)node).eval(baseType,dimensions - 1,callstack,interpreter);    } else     currentInitializer=node.eval(callstack,interpreter);    if (currentInitializer == Primitive.VOID)     throw new EvalError("Void in array initializer, position" + i,this,callstack);    Object value=currentInitializer;    if (dimensions == 1) {      try {        value=Types.castObject(currentInitializer,baseType,Types.CAST);      } catch (      UtilEvalError e) {        throw e.toEvalError("Error in array initializer",this,callstack);      }      value=Primitive.unwrap(value);    }    try {      Array.set(initializers,i,value);    } catch (    IllegalArgumentException e) {      Interpreter.debug("illegal arg" + e);      throwTypeError(baseType,currentInitializer,i,callstack);    }catch (    ArrayStoreException e) {      Interpreter.debug("arraystore" + e);      throwTypeError(baseType,currentInitializer,i,callstack);    }  }  return initializers;}  }
class C{  public void onCancelAccountUpdates(String accountNumber){synchronized (m_accountRequests) {    if (m_accountRequests.containsKey(accountNumber)) {      if (m_client.isConnected()) {        m_client.reqAccountUpdates(false,accountNumber);      }      m_accountRequests.remove(accountNumber);    }  }}  }
class C{  public void reset(){  samples=new ArrayList<ComparablePair<Double,Double>>();  sorted=true;}  }
class C{  public void enableAutoRotate(){  setAutoRotateState(true);}  }
class C{  @Override protected double[] computeBilinearCoordinates(float x,float y,Cell cell){  if (!((GeographicCell)cell).isCrossesDateline()) {    return super.computeBilinearCoordinates(x,y,cell);  }  int[] indices=this.getFieldIndices(cell);  Vec4[] points=new Vec4[4];  for (int i=0; i < 4; i++) {    double lon=this.xs[indices[i]];    double lat=this.ys[indices[i]];    if (x < 0f && lon >= 0f)     lon-=360f; else     if (x >= 0f && lon < 0f)     lon+=360f;    points[i]=new Vec4(lon,lat);  }  return BarycentricQuadrilateral.invertBilinear(new Vec4(x,y),points[0],points[1],points[2],points[3]);}  }
class C{  private Object fetchNewInstance(){  Object obj;  log.debug("getting new instance of " + classStr);  try {    obj=runConstructor.newInstance((Object[])null);  } catch (  InstantiationException e) {    logInvokeException("constructor",e);    return null;  }catch (  IllegalAccessException e) {    logInvokeException("constructor",e);    return null;  }catch (  InvocationTargetException e) {    logInvokeException("constructor",e);    return null;  }  if (initMethod != null) {    log.debug("about to run init(ServletConfig) on " + classStr);    Object[] args=new Object[1];    args[0]=runServletConfig;    try {      initMethod.invoke(obj,args);    } catch (    IllegalAccessException e) {      logInvokeException("init(ServletConfig)",e);      return null;    }catch (    InvocationTargetException e) {      logInvokeException("init(ServletConfig)",e);      return null;    }  }  if (filterInitMethod != null) {    log.debug("about to run init(FilterConfig) on " + classStr);    Object[] args=new Object[1];    args[0]=runServletConfig;    try {      filterInitMethod.invoke(obj,args);    } catch (    IllegalAccessException e) {      logInvokeException("init(FilterConfig)",e);      return null;    }catch (    InvocationTargetException e) {      logInvokeException("init(FilterConfig)",e);      return null;    }  }  return obj;}  }
class C{  public boolean isAngleLabelsVisible(){  return this.angleLabelsVisible;}  }
class C{  private boolean mayAccess(Player player,Entity entity,RPAction action){  if (entity == null) {    return false;  }  RPObject object=entity.getContainer();  if (object == null) {    return false;  }  RPSlot slot=entity.getContainerSlot();  if (!reorderableSlots.contains(slot.getName())) {    return false;  }  if (slot instanceof EntitySlot) {    if (!isReachableSlot(player,slot)) {      return false;    }  } else   if (object != player) {    return false;  }  do {    if (object instanceof Player) {      if (object != player) {        logger.error("Player " + player.getName() + " tried to reorder objects belonging to another player. Action: "+ action);        return false;      }    }    slot=object.getContainerSlot();    if ((slot != null) && isReachableSlot(player,slot)) {      return false;    }    if (object instanceof Corpse) {      return false;    }    object=object.getContainer();  } while (object != null);  return true;}  }
class C{  public void parseFillStyle(InStream in,SWFShape shape,boolean hasAlpha) throws IOException {  int fillType=in.readUI8();  if (fillType == FILL_SOLID) {    Color color=hasAlpha ? new AlphaColor(in) : new Color(in);    if (shape != null) {      shape.defineFillStyle(color);    }  } else   if (fillType == FILL_LINEAR_GRADIENT || fillType == FILL_RADIAL_GRADIENT) {    Matrix matrix=new Matrix(in);    int numRatios=in.readUI8();    int[] ratios=new int[numRatios];    Color[] colors=new Color[numRatios];    for (int i=0; i < numRatios; i++) {      ratios[i]=in.readUI8();      colors[i]=hasAlpha ? new AlphaColor(in) : new Color(in);    }    if (shape != null) {      shape.defineFillStyle(matrix,ratios,colors,fillType == FILL_RADIAL_GRADIENT);    }  } else   if (fillType == FILL_TILED_BITMAP || fillType == FILL_CLIPPED_BITMAP) {    int bitmapId=in.readUI16();    Matrix matrix=new Matrix(in);    if (shape != null) {      shape.defineFillStyle(bitmapId,matrix,fillType == FILL_CLIPPED_BITMAP);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.160 -0500",hash_original_method="6C3510E057E7F86D9E5BFE641B751A6D",hash_generated_method="A3672F6EFBB3BADD1BB15C644CDA938C") private void commitLoad(){  if (mCancelled)   return;  if (!mSetNativeResponse) {    setNativeResponse();  }  if (mIsMainPageLoader) {    String type=CertTool.getCertType(mMimeType);    if (type != null) {synchronized (mDataBuilder) {        byte[] cert=new byte[mDataBuilder.getByteSize()];        int offset=0;        while (true) {          ByteArrayBuilder.Chunk c=mDataBuilder.getFirstChunk();          if (c == null)           break;          if (c.mLength != 0) {            System.arraycopy(c.mArray,0,cert,offset,c.mLength);            offset+=c.mLength;          }          c.release();        }        CertTool.addCertificate(mContext,type,cert);        mBrowserFrame.stopLoading();        return;      }    }  }  ByteArrayBuilder.Chunk c;  while (true) {    c=mDataBuilder.getFirstChunk();    if (c == null)     break;    if (c.mLength != 0) {      nativeAddData(c.mArray,c.mLength);      WebViewWorker.CacheData data=new WebViewWorker.CacheData();      data.mListener=this;      data.mChunk=c;      WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_APPEND_CACHE,data).sendToTarget();    } else {      c.release();    }  }}  }
class C{  public void check() throws ClientAuthenticatorException {  if (!AuthenticationSettings.INSTANCE.getSkipBroker()) {    mLogger.logDebug("Checking permissions for use with the ADAL Broker.");    for (    final String permission : mBrokerRequirePermissions) {      if (ContextCompat.checkSelfPermission(mContext,permission) == PackageManager.PERMISSION_DENIED) {        final String message=String.format("Required permissions to use the Broker are denied: %s, see %s for more details.",permission,mAdalProjectUrl);        mLogger.logDebug(message);        throw new ClientAuthenticatorException(message,OneDriveErrorCodes.AuthenicationPermissionsDenied);      }    }    mLogger.logDebug("All required permissions found.");  }}  }
class C{  private void initController(){  Controller current=dev.get();  if (current != null) {    try {      current.close();    } catch (    IOException ex) {      Logger.getLogger(ControlTower.class.getName()).error("",ex);    }  }  try {    dev.set(findController());  } catch (  IOException ex) {    Logger.getLogger(ControlTower.class.getName()).error("{0}",ex);  }  if (dev.get() == null) {    System.err.println("No suitable controller found! Using keyboard");    dev.set(new KeyboardController(this));    updateControllerStatus(false);  } else {    System.err.println("Gamepad controller found");    updateControllerStatus(true);  }}  }
class C{  public static String toString(double v[],int adp){  if (adp <= 0)   return toString(toIntArray(v));  int w=adp + 2;  StringBuilder sb=new StringBuilder("[ ");  for (int k=0; k < v.length; k++) {    sb.append(String.format("%" + w + "."+ adp+ "f ",v[k]));  }  sb.append("]");  return sb.toString();}  }
class C{  public boolean isCalculationTypePercent(){  return CALCULATIONTYPE_PercentageOp1OfOp2.equals(getCalculationType());}  }
class C{  public SpatialSampledGraphProjection(G delegate){  super(delegate);}  }
class C{  public TopHitsBuilder addHighlightedField(String name,int fragmentSize,int numberOfFragments,int fragmentOffset){  highlightBuilder().field(name,fragmentSize,numberOfFragments,fragmentOffset);  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? "" : si.getSubCategory();}  }
class C{  public void onScreenOn(){  if (DEBUG) {    Slog.d(TAG,"onScreenOn");  }  try {    mBatteryStats.noteScreenOn();  } catch (  RemoteException ex) {  }}  }
class C{  public ModestAdaBoost(Classifier weakLearner,int maxIterations){  setWeakLearner(weakLearner);  setMaxIterations(maxIterations);}  }
class C{  public OrdinalStatisticalTest(int numberOfGroups){  this(numberOfGroups,new ObservationComparator());}  }
class C{  private static void dumpCache(String cacheName,GridCacheAdapter<?,?> cache){  X.println("=============================== " + cacheName + " cache dump: ");  Iterable<? extends GridCacheEntryEx> entries=cache.entries();  for (  GridCacheEntryEx e : entries)   X.println("Lost " + cacheName + " entry = "+ e);}  }
class C{  public static String updateProductAssoc(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  List<Object> errMsgList=FastList.newInstance();  Delegator delegator=(Delegator)request.getAttribute("delegator");  Security security=(Security)request.getAttribute("security");  String updateMode=request.getParameter("UPDATE_MODE");  if (updateMode == null || updateMode.length() <= 0) {    errMsg=UtilProperties.getMessage(resource,"productevents.updatemode_not_specified",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[ProductEvents.updateProductAssoc] Update Mode was not specified, but is required",module);    return "error";  }  if (!security.hasEntityPermission("CATALOG","_" + updateMode,request.getSession())) {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);    errMsg=UtilProperties.getMessage(resource,"productevents.not_sufficient_permissions",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String productId=request.getParameter("PRODUCT_ID");  String productIdTo=request.getParameter("PRODUCT_ID_TO");  String productAssocTypeId=request.getParameter("PRODUCT_ASSOC_TYPE_ID");  String fromDateStr=request.getParameter("FROM_DATE");  Timestamp fromDate=null;  try {    if (EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne() == null) {      Map<String,String> messageMap=UtilMisc.toMap("productId",productId);      errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_with_id_not_found",messageMap,UtilHttp.getLocale(request)));    }    if (EntityQuery.use(delegator).from("Product").where("productId",productIdTo).queryOne() == null) {      Map<String,String> messageMap=UtilMisc.toMap("productIdTo",productIdTo);      errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_To_with_id_not_found",messageMap,UtilHttp.getLocale(request)));    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  if (UtilValidate.isNotEmpty(fromDateStr)) {    try {      fromDate=(Timestamp)ObjectType.simpleTypeConvert(fromDateStr,"Timestamp",null,UtilHttp.getTimeZone(request),UtilHttp.getLocale(request),false);    } catch (    Exception e) {      errMsgList.add("From Date not formatted correctly.");    }  }  if (!UtilValidate.isNotEmpty(productId))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_ID_missing",UtilHttp.getLocale(request)));  if (!UtilValidate.isNotEmpty(productIdTo))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_ID_To_missing",UtilHttp.getLocale(request)));  if (!UtilValidate.isNotEmpty(productAssocTypeId))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.association_type_ID_missing",UtilHttp.getLocale(request)));  if (!updateMode.equals("CREATE") && !UtilValidate.isNotEmpty(fromDateStr))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.from_date_missing",UtilHttp.getLocale(request)));  if (errMsgList.size() > 0) {    request.setAttribute("_ERROR_MESSAGE_LIST_",errMsgList);    return "error";  }  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productId",productId));  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productId",productId,"productAssocTypeId",productAssocTypeId));  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productIdTo",productIdTo));  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productIdTo",productIdTo,"productAssocTypeId",productAssocTypeId));  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productAssocTypeId",productAssocTypeId));  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",productIdTo,"productAssocTypeId",productAssocTypeId,"fromDate",fromDate));  GenericValue tempProductAssoc=delegator.makeValue("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",productIdTo,"productAssocTypeId",productAssocTypeId,"fromDate",fromDate));  if (updateMode.equals("DELETE")) {    GenericValue productAssoc=null;    try {      productAssoc=EntityQuery.use(delegator).from(tempProductAssoc.getEntityName()).where(tempProductAssoc.getPrimaryKey()).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      productAssoc=null;    }    if (productAssoc == null) {      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_remove_product_association_exist",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }    try {      productAssoc.remove();    } catch (    GenericEntityException e) {      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_remove_product_association_write",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      Debug.logWarning("[ProductEvents.updateProductAssoc] Could not remove product association (write error); message: " + e.getMessage(),module);      return "error";    }    return "success";  }  String thruDateStr=request.getParameter("THRU_DATE");  String reason=request.getParameter("REASON");  String instruction=request.getParameter("INSTRUCTION");  String quantityStr=request.getParameter("QUANTITY");  String sequenceNumStr=request.getParameter("SEQUENCE_NUM");  Timestamp thruDate=null;  BigDecimal quantity=null;  Long sequenceNum=null;  if (UtilValidate.isNotEmpty(thruDateStr)) {    try {      thruDate=(Timestamp)ObjectType.simpleTypeConvert(thruDateStr,"Timestamp",null,UtilHttp.getTimeZone(request),UtilHttp.getLocale(request),false);    } catch (    Exception e) {      errMsgList.add(UtilProperties.getMessage(resource,"productevents.thru_date_not_formatted_correctly",UtilHttp.getLocale(request)));    }  }  if (UtilValidate.isNotEmpty(quantityStr)) {    try {      quantity=new BigDecimal(quantityStr);    } catch (    NumberFormatException e) {      errMsgList.add(UtilProperties.getMessage(resource,"productevents.quantity_not_formatted_correctly",UtilHttp.getLocale(request)));    }  }  if (UtilValidate.isNotEmpty(sequenceNumStr)) {    try {      sequenceNum=Long.valueOf(sequenceNumStr);    } catch (    Exception e) {      errMsgList.add(UtilProperties.getMessage(resource,"productevents.sequenceNum_not_formatted_correctly",UtilHttp.getLocale(request)));    }  }  if (errMsgList.size() > 0) {    request.setAttribute("_ERROR_MESSAGE_LIST_",errMsgList);    return "error";  }  tempProductAssoc.set("thruDate",thruDate);  tempProductAssoc.set("reason",reason);  tempProductAssoc.set("instruction",instruction);  tempProductAssoc.set("quantity",quantity);  tempProductAssoc.set("sequenceNum",sequenceNum);  if (updateMode.equals("CREATE")) {    if (fromDate == null) {      fromDate=new Timestamp(new java.util.Date().getTime());      tempProductAssoc.set("fromDate",fromDate);      request.setAttribute("ProductAssocCreateFromDate",fromDate);    }    GenericValue productAssoc=null;    try {      productAssoc=EntityQuery.use(delegator).from(tempProductAssoc.getEntityName()).where(tempProductAssoc.getPrimaryKey()).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      productAssoc=null;    }    if (productAssoc != null) {      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_create_product_association_exists",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }    try {      productAssoc=tempProductAssoc.create();    } catch (    GenericEntityException e) {      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_create_product_association_write",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      Debug.logWarning("[ProductEvents.updateProductAssoc] Could not create product association (write error); message: " + e.getMessage(),module);      return "error";    }  } else   if (updateMode.equals("UPDATE")) {    try {      tempProductAssoc.store();    } catch (    GenericEntityException e) {      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_update_product_association_write",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      Debug.logWarning("[ProductEvents.updateProductAssoc] Could not update product association (write error); message: " + e.getMessage(),module);      return "error";    }  } else {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);    errMsg=UtilProperties.getMessage(resource,"productevents.specified_update_mode_not_supported",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  public Builder play(Animator anim){  if (anim != null) {    mNeedsSort=true;    return new Builder(anim);  }  return null;}  }
class C{  public static String toUpperCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('a' <= ch && 'z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'a' + 'A');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  public Remote lookup(String name) throws RemoteException, NotBoundException {synchronized (bindings) {    Remote obj=bindings.get(name);    if (obj == null)     throw new NotBoundException(name);    return obj;  }}  }
class C{  public void receiveResultqueryUniqueIdentifiersForEntity(com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForEntityResponse result){}  }
class C{  @Override public String toString(){  return super.toString() + (operand != NO_SUCH_SLOT ? "t" + operand : "");}  }
class C{  private static void usage(){  System.out.println("Syntax: AclFeedDemo <username> <password>" + " [userToShareWith]");  System.out.println("\nThe username and password are used for " + "authentication.  The 'userToShareWith' is an optional parameter " + "that specifies a second user to share the first user's primary "+ "calendar with.  If this parameter is not given then the first "+ "user's ACL will not be modified.");}  }
class C{  private static <O,A,C extends MultiValueAttribute<O,A>,R extends Class<? extends C>>R generateMultiValueAttribute(Class<C> attributeSuperClass,Class<O> pojoClass,Class<A> attributeValueType,String attributeName,String target){  try {    ClassPool pool=new ClassPool(false);    pool.appendClassPath(new ClassClassPath(pojoClass));    CtClass attributeClass=pool.makeClass(pojoClass.getName() + "$$CQEngine_" + attributeSuperClass.getSimpleName()+ "_"+ attributeName);    attributeClass.setSuperclass(pool.get(attributeSuperClass.getName()));    SignatureAttribute.ClassType genericTypeOfAttribute=new SignatureAttribute.ClassType(attributeSuperClass.getName(),new SignatureAttribute.TypeArgument[]{new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(pojoClass.getName())),new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(attributeValueType.getName()))});    attributeClass.setGenericSignature(genericTypeOfAttribute.encode());    CtConstructor constructor=CtNewConstructor.make("public " + attributeClass.getSimpleName() + "() { "+ "super(\""+ attributeName+ "\");"+ " }",attributeClass);    attributeClass.addConstructor(constructor);    CtMethod getterMethod=CtMethod.make("public java.lang.Iterable getValues(" + pojoClass.getName() + " object, "+ QueryOptions.class.getName()+ " queryOptions) { "+ "return "+ GeneratedAttributeSupport.class.getName()+ ".valueOf("+ target+ ");"+ " }",attributeClass);    getterMethod.setGenericSignature(new SignatureAttribute.MethodSignature(new SignatureAttribute.TypeParameter[0],new SignatureAttribute.Type[]{new SignatureAttribute.ClassType(pojoClass.getName())},new SignatureAttribute.ClassType(java.lang.Iterable.class.getName(),new SignatureAttribute.TypeArgument[]{new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(attributeValueType.getName()))}),new SignatureAttribute.ObjectType[0]).encode());    attributeClass.addMethod(getterMethod);    CtMethod getterBridgeMethod=CtMethod.make("public java.lang.Iterable getValues(java.lang.Object object, " + QueryOptions.class.getName() + " queryOptions) { "+ "return getValues(("+ pojoClass.getName()+ ")object, queryOptions);"+ " }",attributeClass);    getterBridgeMethod.setModifiers(getterBridgeMethod.getModifiers() | AccessFlag.BRIDGE);    attributeClass.addMethod(getterBridgeMethod);    @SuppressWarnings("unchecked") R result=(R)attributeClass.toClass(pojoClass.getClassLoader(),pojoClass.getProtectionDomain());    attributeClass.detach();    return result;  } catch (  Exception e) {    throw new IllegalStateException(getExceptionMessage(pojoClass,attributeValueType,attributeName),e);  }}  }
class C{  public Renderer createRenderer(){  return createStaticImageRenderer();}  }
class C{  public int elementAt(int i){  runTo(i);  return super.elementAt(i);}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public ArrayDrawable(Drawable[] layers){  Preconditions.checkNotNull(layers);  mLayers=layers;  for (int i=0; i < mLayers.length; i++) {    DrawableUtils.setCallbacks(mLayers[i],this,this);  }}  }
class C{  public long randomValueFromClosedInterval(long min,long max,MersenneTwisterFast random){  if (max - min < 0) {    long l=0;    do     l=random.nextLong(); while (l < min || l > max);    return l;  } else   return min + random.nextLong(max - min + 1L);}  }
class C{  private void notifyForgottenLocalFiles(){  NotificationCompat.Builder notificationBuilder=createNotificationBuilder();  notificationBuilder.setTicker(i18n(R.string.sync_foreign_files_forgotten_ticker));  Intent explanationIntent=new Intent(getContext(),ErrorsWhileCopyingHandlerActivity.class);  explanationIntent.putExtra(ErrorsWhileCopyingHandlerActivity.EXTRA_ACCOUNT,getAccount());  ArrayList<String> remotePaths=new ArrayList<String>();  ArrayList<String> localPaths=new ArrayList<String>();  remotePaths.addAll(mForgottenLocalFiles.keySet());  localPaths.addAll(mForgottenLocalFiles.values());  explanationIntent.putExtra(ErrorsWhileCopyingHandlerActivity.EXTRA_LOCAL_PATHS,localPaths);  explanationIntent.putExtra(ErrorsWhileCopyingHandlerActivity.EXTRA_REMOTE_PATHS,remotePaths);  explanationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  notificationBuilder.setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),explanationIntent,0)).setContentTitle(i18n(R.string.sync_foreign_files_forgotten_ticker)).setContentText(i18n(R.string.sync_foreign_files_forgotten_content,mForgottenLocalFiles.size(),i18n(R.string.app_name)));  showNotification(R.string.sync_foreign_files_forgotten_ticker,notificationBuilder);}  }
class C{  public static List<IAType> validatePartitioningExpressions(ARecordType recType,ARecordType metaRecType,List<List<String>> partitioningExprs,List<Integer> keySourceIndicators,boolean autogenerated) throws AsterixException {  List<IAType> partitioningExprTypes=new ArrayList<IAType>(partitioningExprs.size());  if (autogenerated) {    if (partitioningExprs.size() > 1) {      throw new AsterixException("Cannot autogenerate a composite primary key");    }    List<String> fieldName=partitioningExprs.get(0);    IAType fieldType=recType.getSubFieldType(fieldName);    partitioningExprTypes.add(fieldType);    ATypeTag pkTypeTag=fieldType.getTypeTag();    if (pkTypeTag != ATypeTag.UUID) {      throw new AsterixException("Cannot autogenerate a primary key for type " + pkTypeTag + ". Autogenerated primary keys must be of type "+ ATypeTag.UUID+ ".");    }  } else {    partitioningExprTypes=KeyFieldTypeUtils.getKeyTypes(recType,metaRecType,partitioningExprs,keySourceIndicators);    for (int fidx=0; fidx < partitioningExprTypes.size(); ++fidx) {      IAType fieldType=partitioningExprTypes.get(fidx);      if (fieldType == null) {        throw new AsterixException("Type not found for partitioning key " + partitioningExprs.get(fidx));      }switch (fieldType.getTypeTag()) {case INT8:case INT16:case INT32:case INT64:case FLOAT:case DOUBLE:case STRING:case BINARY:case DATE:case TIME:case UUID:case DATETIME:case YEARMONTHDURATION:case DAYTIMEDURATION:        break;case UNION:      throw new AsterixException("The partitioning key " + partitioningExprs.get(fidx) + " cannot be nullable");default :    throw new AsterixException("The partitioning key " + partitioningExprs.get(fidx) + " cannot be of type "+ fieldType.getTypeTag()+ ".");}}}return partitioningExprTypes;}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (!(object instanceof ManualProxySelector)) {    return false;  }  ManualProxySelector cmpManualProxySelector=(ManualProxySelector)object;  ProxyAddress proxyHttpAddress=this.getHttpProxyAddress();  ProxyAddress cmpHttpProxyAddress=cmpManualProxySelector.getHttpProxyAddress();  boolean httpEquals=(proxyHttpAddress == null ? cmpHttpProxyAddress == null : proxyHttpAddress.equals(cmpHttpProxyAddress));  if (!httpEquals) {    return false;  }  ProxyAddress proxyHttpsAddress=this.getHttpsProxyAddress();  ProxyAddress cmpHttpsProxyAddress=cmpManualProxySelector.getHttpsProxyAddress();  boolean httpsEquals=(proxyHttpsAddress == null ? cmpHttpsProxyAddress == null : proxyHttpsAddress.equals(cmpHttpsProxyAddress));  if (!httpsEquals) {    return false;  }  ProxyAddress proxyFtpAddress=this.getFtpProxyAddress();  ProxyAddress cmpFtpProxyAddress=cmpManualProxySelector.getFtpProxyAddress();  boolean ftpEquals=(proxyFtpAddress == null ? cmpFtpProxyAddress == null : proxyFtpAddress.equals(cmpFtpProxyAddress));  if (!ftpEquals) {    return false;  }  ProxyAddress proxySocksAddress=this.getSocksProxyAddress();  ProxyAddress cmpSocksProxyAddress=cmpManualProxySelector.getSocksProxyAddress();  boolean socksEquals=(proxySocksAddress == null ? cmpSocksProxyAddress == null : proxySocksAddress.equals(cmpSocksProxyAddress));  return socksEquals;}  }
class C{  private void tryParseWidgetFromElement(IDOMElement element){  String fqWidgetType=UiBinderXmlModelUtilities.computeQualifiedWidgetTypeName(element);  if (fqWidgetType == null) {    return;  }  if (IGNORED_CAPITALIZED_SYNTHETIC_ELEMENTS.contains(fqWidgetType)) {    return;  }  javaTypeReferences.add(fqWidgetType);  final IType type=JavaModelSearch.findType(javaProject,fqWidgetType);  boolean validType=JavaModelSearch.isValidElement(type);  List<IRegion> tagRegions=XmlUtilities.getElementTagRegions(element,false);  for (  IRegion region : tagRegions) {    if (!validType) {      problemMarkerManager.setWidgetUndefinedError(region,fqWidgetType);    }  }}  }
class C{  private List<Parameter> load(CommentedLineReader reader) throws IOException {  List<Parameter> parameters=new ArrayList<Parameter>();  String line=null;  try {    while ((line=reader.readLine()) != null) {      String[] tokens=line.split("\\s+");      if (tokens.length != 3) {        throw new IOException("expected only three items per line");      }      parameters.add(new Parameter(tokens[0],Double.parseDouble(tokens[1]),Double.parseDouble(tokens[2])));    }  }  finally {    if (reader != null) {      reader.close();    }  }  return parameters;}  }
class C{  public boolean isInPlace(byte[] id){  ByteBuffer idBuffer=ByteBuffer.wrap(id);  while (idBuffer.hasRemaining()) {    if (idBuffer.get() != 0) {      return false;    }    int len=DataUtils.readVarInt(idBuffer);    idBuffer.position(idBuffer.position() + len);  }  return true;}  }
class C{  @HLEFunction(nid=0x99944089,version=150,checkInsideInterrupt=true) public int __sceSasSetVoice(int sasCore,int voice,int vagAddr,int size,int loopmode){  if (size <= 0 || (size & 0xF) != 0) {    log.warn(String.format("__sceSasSetVoice invalid size 0x%08X",size));    return SceKernelErrors.ERROR_SAS_INVALID_ADPCM_SIZE;  }  checkSasAndVoiceHandlesGood(sasCore,voice);  voices[voice].setVAG(vagAddr,size);  voices[voice].setLoopMode(loopmode);  return 0;}  }
class C{  StreamingOutputStream(OutputStream os,long expectedLength){  super(os);  expected=expectedLength;  written=0L;  closed=false;  error=false;}  }
class C{  public boolean isAllocated(){  return _allocated;}  }
class C{  public ModbusSerialMaster(SerialParameters param){  this(param,Modbus.DEFAULT_TIMEOUT);}  }
class C{  public RowDescriptorBuilder(final int size,DatatypeCoder datatypeCoder){  this.datatypeCoder=datatypeCoder;  fieldDescriptors=new FieldDescriptor[size];}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public void removeNode(int n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  this.removeElement(n);}  }
class C{  public void initialize(UimaContext aContext){  annotate_tokens=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_TOKENS);  annotate_sentences=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_SENTENCES);  annotate_partofspeech=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_PARTOFSPEECH);  model_path=(String)aContext.getConfigParameterValue(PARAM_MODEL_PATH);  config_path=(String)aContext.getConfigParameterValue(PARAM_CONFIG_PATH);  if (model_path == null) {    Logger.printError(component,"The model file for the Stanford Tagger was not correctly specified.");    System.exit(-1);  }  try {    if (config_path != null) {      FileInputStream isr=new FileInputStream(config_path);      Properties props=new Properties();      props.load(isr);      mt=new MaxentTagger(model_path,new TaggerConfig(props),false);    } else {      mt=new MaxentTagger(model_path,new TaggerConfig("-model",model_path),false);    }  } catch (  Exception e) {    e.printStackTrace();    Logger.printError(component,"MaxentTagger could not be instantiated with the supplied model(" + model_path + ") and config("+ config_path+ ") file.");    System.exit(-1);  }}  }
class C{  public RecentKeyStoreFileActionListener(File recentFile,KseFrame kseFrame){  this.recentFile=recentFile;  this.kseFrame=kseFrame;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (index_1: ");  result.append(index_1);  result.append(')');  return result.toString();}  }
class C{  private static boolean covers(ClassLoader sub,ClassLoader sup){  if (sup == null) {    return true;  } else   if (sub == null) {    return false;  }  do {    if (sub == sup) {      return true;    }    sub=sub.getParent();  } while (sub != null);  return false;}  }
class C{  public FactorBuilder boostFactor(float boost){  this.boostFactor=new Float(boost);  return this;}  }
class C{  public PLPanoramaImageFileDownloaderListener(PLIPanorama panorama,PLTextureColorFormat colorFormat){  this(panorama,colorFormat,0);}  }
class C{  public SecurityMapper(final Mapper wrapped){  this(wrapped,(TypePermission[])null);}  }
class C{  public double erf(double z){  double sign=Math.signum(z);  z=Math.abs(z);  double a1=0.278393, a2=0.230389, a3=0.000972, a4=0.078108;  double sumterm=1 + a1 * z + a2 * Math.pow(z,2) + a3 * Math.pow(z,3) + a4 * Math.pow(z,4);  return sign * (1 - 1 / (Math.pow(sumterm,4)));}  }
class C{  @SuppressWarnings("unchecked") public static <K>ImmutableArray<K> empty(){  return (ImmutableArray<K>)EMPTY;}  }
class C{  private Workflow loadWorkflowFromUri(URI workflowURI) throws ControllerException {  com.emc.storageos.db.client.model.Workflow dbWorkflow=_dbClient.queryObject(com.emc.storageos.db.client.model.Workflow.class,workflowURI);  if (dbWorkflow != null) {    Workflow workflow=new Workflow(this,dbWorkflow.getOrchControllerName(),dbWorkflow.getOrchMethod(),workflowURI);    workflow=loadWorkflow(workflow);    return workflow;  }  WorkflowException ex=WorkflowException.exceptions.workflowNotFound(workflowURI.toString());  _log.info("Workflow not found in db: " + workflowURI.toString(),ex);  throw ex;}  }
class C{  @Deprecated public void addSlideInFromLeftAnimator(@NonNull List<Animator> animators,@NonNull View view,@FloatRange(from=0.0,to=1.0) float percent){  if (animatorsUsed.contains(AnimatorEnum.SLIDE_IN_LEFT) || animatorsUsed.contains(AnimatorEnum.SLIDE_IN_RIGHT) || animatorsUsed.contains(AnimatorEnum.SLIDE_IN_TOP)|| animatorsUsed.contains(AnimatorEnum.SLIDE_IN_BOTTOM))   return;  animators.add(ObjectAnimator.ofFloat(view,"translationX",-mRecyclerView.getLayoutManager().getWidth() * percent,0));  animatorsUsed.add(AnimatorEnum.SLIDE_IN_LEFT);}  }
class C{  public void registerMobileObject(MobileObject2D objMO){  mobileObjs.add(objMO);}  }
class C{  public void insertWeather(Location l){  WeatherEntity entity=searchWeatherEntity(l);  WeatherEntity newEntity=WeatherEntity.build(l.weather);  if (entity != null) {    deleteWeather(entity);    newEntity.id=entity.id;  }  new DaoMaster(getDatabase()).newSession().getWeatherEntityDao().insert(newEntity);}  }
class C{  private static int bitReverse(int value){  return BIT_REV_LOOKUP_TABLE[value & 0x0F] << 4 | BIT_REV_LOOKUP_TABLE[(value & 0xF0) >> 4];}  }
class C{  public void createMinimalSet(){  removeAll();  addHandler(new SilentExceptionHandler());  addHandler(new EntitySerializationExceptionHandler());  addHandler(new ConnectExceptionHandler());  addHandler(new IllegalComponentStateExceptionHandler());}  }
class C{  public void remove(EventBean oldData){  if (updateObserver != null) {    updateObserver.updated(this);  }  arrayList.remove(arrayList.size() - 1);}  }
class C{  public Main(String name){  this(name,new PrintWriter(System.err,true));}  }
class C{  public static String millisToText(long millis){  return Strings.millisToString(millis,true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected boolean meetsRenderCriteria(DrawContext dc,LevelSet levelSet,Tile tile){  return levelSet.isFinalLevel(tile.getLevel().getLevelNumber()) || !this.needToSplit(dc,tile);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private boolean checkActivityTimes(Plan plan1,Plan plan2,StageActivityTypes stageActivities,double similarTimeInterval){  List<Activity> activities1=TripStructureUtils.getActivities(plan1,stageActivities);  List<Activity> activities2=TripStructureUtils.getActivities(plan2,stageActivities);  Iterator<Activity> it1=activities1.iterator();  Iterator<Activity> it2=activities2.iterator();  for (; it1.hasNext() && it2.hasNext(); ) {    Activity act1=it1.next();    Activity act2=it2.next();    if (Double.isInfinite(act1.getEndTime()) && Double.isInfinite(act2.getEndTime())) {    } else {      double delta=Math.abs(act1.getEndTime() - act2.getEndTime());      if (delta <= similarTimeInterval) {      } else {        return false;      }    }  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.548 -0400",hash_original_method="A7C32C8B7F02F225AD2FE68B7C502D15",hash_generated_method="98FCE23429E36B7972A95CC94C7B26D2") static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  public final float angleBetween(ReadonlyVec4D v){  double vDot=dot(v) / (magnitude() * v.magnitude());  if (vDot < -1.0) {    vDot=-1.0;  }  if (vDot > 1.0) {    vDot=1.0;  }  return (float)(Math.acos(vDot));}  }
class C{  public UimaSupport(String pipelineName,Class<?> clazz,BaleenHistory history,UimaMonitor monitor,boolean mergeDistinctEntities){  this.pipelineName=pipelineName;  this.history=history != null ? history : NoopBaleenHistory.getInstance();  this.referrer=UimaUtils.makePipelineSpecificName(pipelineName,clazz);  this.monitor=monitor;  this.mergeDistinctEntities=mergeDistinctEntities;}  }
class C{  public static void validate(byte[] imageData,String contentType,ImageType imageType) throws ValidationException {  ImageSize imageSize=imageType.getImageSize();  validate(imageData,contentType,imageSize.getMinWidth(),imageSize.getMinHeight(),imageSize.getMaxWidth(),imageSize.getMaxHeight());}  }
class C{  public InvalidFileNameException(String pName,String pMessage){  super(pMessage);  name=pName;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus updateUsers(String instanceId,ProvisioningSettings settings,List<ServiceUser> users) throws APPlatformException {  return null;}  }
class C{  public HoverEvent(Action action,BaseComponent[] value){  this.action=action;  this.value=value;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize1=3;  int filterSize2=3;  double n;  double sum;  int[] dX1;  int[] dX2;  int[] dY1;  int[] dY2;  double[] weights1;  double[] weights2;  int midPoint;  int numPixelsInFilter1;  int numPixelsInFilter2;  boolean reflectAtBorders=false;  double sigma1=0;  double sigma2=0;  double recipRoot2PiTimesSigma1;  double recipRoot2PiTimesSigma2;  double twoSigmaSqr1;  double twoSigmaSqr2;  double zN, zFinal_1, zFinal_2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigma1=Double.parseDouble(args[i]);    } else     if (i == 3) {      sigma2=Double.parseDouble(args[i]);    } else     if (i == 4) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigma1 < 0.5) {    sigma1=0.5;  } else   if (sigma1 > 20) {    sigma1=20;  }  if (sigma2 < 0.5) {    sigma2=0.5;  } else   if (sigma2 > 20) {    sigma2=20;  }  if (sigma1 == sigma2) {    showFeedback("The two standard deviations cannot be equal.");    return;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    recipRoot2PiTimesSigma1=1 / (Math.sqrt(2 * Math.PI) * sigma1);    twoSigmaSqr1=2 * sigma1 * sigma1;    recipRoot2PiTimesSigma2=1 / (Math.sqrt(2 * Math.PI) * sigma2);    twoSigmaSqr2=2 * sigma2 * sigma2;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma1 * Math.exp(-1 * (i * i) / twoSigmaSqr1);      if (weight <= 0.001) {        filterSize1=i * 2 + 1;        break;      }    }    if (filterSize1 % 2 == 0) {      filterSize1++;    }    if (filterSize1 < 3) {      filterSize1=3;    }    numPixelsInFilter1=filterSize1 * filterSize1;    dX1=new int[numPixelsInFilter1];    dY1=new int[numPixelsInFilter1];    weights1=new double[numPixelsInFilter1];    midPoint=(int)Math.floor(filterSize1 / 2) + 1;    a=0;    for (row=0; row < filterSize1; row++) {      for (col=0; col < filterSize1; col++) {        x=col - midPoint;        y=row - midPoint;        dX1[a]=x;        dY1[a]=y;        weight=recipRoot2PiTimesSigma1 * Math.exp(-1 * (x * x + y * y) / twoSigmaSqr1);        weights1[a]=weight;        a++;      }    }    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma2 * Math.exp(-1 * (i * i) / twoSigmaSqr2);      if (weight <= 0.001) {        filterSize2=i * 2 + 1;        break;      }    }    if (filterSize2 % 2 == 0) {      filterSize2++;    }    if (filterSize2 < 3) {      filterSize2=3;    }    numPixelsInFilter2=filterSize2 * filterSize2;    dX2=new int[numPixelsInFilter2];    dY2=new int[numPixelsInFilter2];    weights2=new double[numPixelsInFilter2];    midPoint=(int)Math.floor(filterSize2 / 2) + 1;    a=0;    for (row=0; row < filterSize2; row++) {      for (col=0; col < filterSize2; col++) {        x=col - midPoint;        y=row - midPoint;        dX2[a]=x;        dY2[a]=y;        weight=recipRoot2PiTimesSigma2 * Math.exp(-1 * (x * x + y * y) / twoSigmaSqr2);        weights2[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal_1=0;          for (a=0; a < numPixelsInFilter1; a++) {            x=col + dX1[a];            y=row + dY1[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights1[a];              zFinal_1+=weights1[a] * zN;            }          }          zFinal_1=zFinal_1 / sum;          sum=0;          zFinal_2=0;          for (a=0; a < numPixelsInFilter2; a++) {            x=col + dX2[a];            y=row + dY2[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights2[a];              zFinal_2+=weights2[a] * zN;            }          }          zFinal_2=zFinal_2 / sum;          outputFile.setValue(row,col,zFinal_1 - zFinal_2);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean makeEntryLastChild(User user,Entry entry,Errors errors){  if (entry == null) {    Errors.add(errors,errorMessages.errorEntryIsNull());    return false;  }  if (user == null) {    Errors.add(errors,errorMessages.errorUserIsNull());    return false;  }  if (!entry.hasParentId()) {    Errors.add(errors,errorMessages.errorPreviousHasNoParent());    return false;  }  Entry parent=getEntryById(entry.getParentId());  if (parent.getLastChildId("").equals(entry.getId()))   return true;  snipOutEntry(entry,parent,false);  final String parentsLastChildId=parent.getLastChildId();  final Entry parentsLastChild=getEntryById(parentsLastChildId);  insertEntryAfter(entry,parentsLastChild,false);  return true;}  }
class C{  public void afterEmitMethods(JavaFileWriter writer) throws IOException {}  }
class C{  public void addCalendarLink(CalendarLink calendarLink){  getCalendarLinks().add(calendarLink);}  }
class C{  public static boolean isWeak(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new InvalidKeyException("key == null");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("key too short");  }  I:   for (int i=0; i < SEMIWEAKS.length; i++) {    for (int j=0; j < DES_KEY_LEN; j++) {      if (SEMIWEAKS[i][j] != key[offset + j]) {        continue I;      }    }    return true;  }  return false;}  }
class C{  private static OFAction decode_set_dst_port(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        TransportPort portnum=TransportPort.of(get_int(n.group(1)));        OFActionSetTpDst.Builder ab=OFFactories.getFactory(version).actions().buildSetTpDst();        ab.setTpPort(portnum);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid dst-port in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  BigInteger toBigInteger(int sign){  if (intLen == 0 || sign == 0)   return BigInteger.ZERO;  return new BigInteger(getMagnitudeArray(),sign);}  }
class C{  void updateFace(Face face){  mFace=face;  postInvalidate();}  }
class C{  public static void close(@CheckForNull Closeable c){  if (c == null) {    return;  }  try {    c.close();  } catch (  IOException e) {  }}  }
class C{  public AffineTransform(){  m00=m11=m22=1;  m01=m02=m03=0;  m10=m12=m13=0;  m20=m21=m23=0;}  }
class C{  public static BigInteger generateX1(BigInteger q,SecureRandom random){  BigInteger min=ZERO;  BigInteger max=q.subtract(ONE);  return BigIntegers.createRandomInRange(min,max,random);}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,double value){  if (extras == null) {    extras=new Bundle();  }  extras.putDouble(name,value);  return this;}  }
class C{  public static RSAPrivateKey loadFromKeyStore(URL keystoreUrl,String password) throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, UnrecoverableKeyException {  logger.debug("loadFromKeyStore: keystoreUrl={}",keystoreUrl);  URLConnection connection=keystoreUrl.openConnection();  InputStream is=connection.getInputStream();  try {    if (logger.isDebugEnabled())     logger.debug("getproviders={}",Arrays.toString(Security.getProviders()));    KeyStore keyStore;    try {      try {        keyStore=KeyStore.getInstance("PKCS12","SunJSSE");      } catch (      NoSuchProviderException e) {        keyStore=KeyStore.getInstance("PKCS12",CryptoUtil.getSecurityProviderName(KeyStore.class));      }    } catch (    NoSuchProviderException e) {      keyStore=KeyStore.getInstance("PKCS12");    }    logger.debug("loadFromKeyStore: keyStore Provider={}",keyStore.getProvider());    keyStore.load(is,password == null ? null : password.toCharArray());    Enumeration<String> aliases=keyStore.aliases();    Key key=null;    while (aliases.hasMoreElements()) {      String a=(String)aliases.nextElement();      key=keyStore.getKey(a,password == null ? null : password.toCharArray());    }    return (RSAPrivateKey)key;  }  finally {    is.close();  }}  }
class C{  public void updateBlob(String columnLabel,InputStream inputStream,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  if (BuildConfig.DEBUG)   debugDataBundle(data);  if (data.getString("test","false").equals("true"))   sendTestNotification(); else   handleNotification(data);}  }
class C{  protected AbstractOptions(AbstractOptions baseOptions,AbstractOptions options){  requireNonNull(baseOptions,"baseOptions");  requireNonNull(options,"options");  valueMap=new IdentityHashMap<>(baseOptions.valueMap);  valueMap.putAll(options.valueMap);}  }
class C{  public void testModPowNegExp(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75,48,-7};  byte eBytes[]={27,-15,65,39};  byte mBytes[]={-128,2,3,4,5};  int aSign=1;  int eSign=-1;  int mSign=1;  byte rBytes[]={12,118,46,86,92};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger exp=new BigInteger(eSign,eBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  BigInteger result=aNumber.modPow(exp,modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void addResinDescriptor() throws IOException, JDOMException {  InputStream in=null;  try {    in=getResource("WEB-INF/resin-web.xml");    if (in != null) {      ResinWebXml descr=ResinWebXmlIo.parseResinXml(in);      if (descr != null) {        this.webXml.addVendorDescriptor(descr);      }    }  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static void downloadMissingArtwork(Movie movie,boolean force){  MediaFileType[] mfts=MediaFileType.getGraphicMediaFileTypes();  for (  MediaFileType mft : mfts) {    List<MediaFile> mfs=movie.getMediaFiles(mft);    if (mfs.isEmpty()) {switch (mft) {case FANART:        if (!MovieModuleManager.MOVIE_SETTINGS.getMovieFanartFilenames().isEmpty() || force) {          downloadFanart(movie);        }      break;case POSTER:    if (!MovieModuleManager.MOVIE_SETTINGS.getMoviePosterFilenames().isEmpty() || force) {      downloadPoster(movie);    }  break;case BANNER:if (MovieModuleManager.MOVIE_SETTINGS.isImageBanner() || force) {  downloadExtraArtwork(movie,mft);}break;case CLEARART:if (MovieModuleManager.MOVIE_SETTINGS.isImageClearart() || force) {downloadExtraArtwork(movie,mft);}break;case DISCART:if (MovieModuleManager.MOVIE_SETTINGS.isImageDiscart() || force) {downloadExtraArtwork(movie,mft);}break;case LOGO:case CLEARLOGO:if (MovieModuleManager.MOVIE_SETTINGS.isImageLogo() || force) {downloadExtraArtwork(movie,mft);}break;case THUMB:if (MovieModuleManager.MOVIE_SETTINGS.isImageThumb() || force) {downloadExtraArtwork(movie,mft);}break;case EXTRAFANART:if (MovieModuleManager.MOVIE_SETTINGS.isImageExtraFanart() || force) {downloadExtraArtwork(movie,mft);}break;case EXTRATHUMB:if (MovieModuleManager.MOVIE_SETTINGS.isImageExtraThumbs() || force) {downloadExtraArtwork(movie,mft);}break;default :break;}}}}  }
class C{  protected XBLOMElement(){}  }
class C{  public IQ ping(String jid){  return ping(jid,SmackConfiguration.getPacketReplyTimeout());}  }
class C{  public void removeActiveAdmin(ComponentName who){  if (mService != null) {    try {      mService.removeActiveAdmin(who,UserHandle.myUserId());    } catch (    RemoteException e) {      Log.w(TAG,"Failed talking with device policy service",e);    }  }}  }
class C{  public static boolean anyMisbehave(Formatter formatter,List<File> problemFiles){  long start=System.currentTimeMillis();  for (  File problem : problemFiles) {    PaddedCell padded=PaddedCell.check(formatter,problem);    if (padded.misbehaved()) {      return true;    }    if (System.currentTimeMillis() - start > MAX_MS_DETERMINING_MISBEHAVIOR) {      return false;    }  }  return false;}  }
class C{  private static int selectString(String[] strArray,String str){  for (int i=0; i < strArray.length; i++) {    if (strArray[i].equals(str)) {      return i;    }  }  return -1;}  }
class C{  @Override public boolean isLocationProhibited(Coords c,int currElevation){  IHex hex=game.getBoard().getHex(c);  if (hex.containsTerrain(Terrains.IMPASSABLE)) {    return true;  }  if (isHidden()) {    if (hex.containsTerrain(Terrains.PAVEMENT) || hex.containsTerrain(Terrains.ROAD)) {      return true;    }    if ((hex.terrainLevel(Terrains.BRIDGE_ELEV) == currElevation) && hex.containsTerrain(Terrains.BRIDGE)) {      return true;    }    if (hex.containsTerrain(Terrains.WATER) && (currElevation == 0)) {      return true;    }  }switch (movementMode) {case TRACKED:    return (hex.terrainLevel(Terrains.WOODS) > 1) || ((hex.terrainLevel(Terrains.WATER) > 0) && !hex.containsTerrain(Terrains.ICE) && !hasEnvironmentalSealing()) || hex.containsTerrain(Terrains.JUNGLE)|| (hex.terrainLevel(Terrains.MAGMA) > 1)|| (hex.terrainLevel(Terrains.ROUGH) > 1)|| (hex.terrainLevel(Terrains.RUBBLE) > 5);case WHEELED:  return hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.ROUGH) || ((hex.terrainLevel(Terrains.WATER) > 0) && !hex.containsTerrain(Terrains.ICE) && !hasEnvironmentalSealing())|| hex.containsTerrain(Terrains.RUBBLE)|| hex.containsTerrain(Terrains.MAGMA)|| hex.containsTerrain(Terrains.JUNGLE)|| (hex.terrainLevel(Terrains.SNOW) > 1)|| (hex.terrainLevel(Terrains.GEYSER) == 2);case HOVER:return hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.JUNGLE) || (hex.terrainLevel(Terrains.MAGMA) > 1)|| (hex.terrainLevel(Terrains.ROUGH) > 1)|| (hex.terrainLevel(Terrains.RUBBLE) > 5);case NAVAL:case HYDROFOIL:return (hex.terrainLevel(Terrains.WATER) <= 0) || hex.containsTerrain(Terrains.ICE);case SUBMARINE:return (hex.terrainLevel(Terrains.WATER) <= 0);case WIGE:return (hex.containsTerrain(Terrains.WOODS) || (hex.containsTerrain(Terrains.BUILDING))) && !(currElevation > hex.maxTerrainFeatureElevation(game.getBoard().inAtmosphere()));default :return false;}}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node child;  String strong;  int length;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(2);  attributes=testEmployee.getAttributes();  length=(int)attributes.getLength();  if (("text/html".equals(getContentType()))) {    assertEquals("htmlLength",2,length);  } else {    assertEquals("length",3,length);    child=attributes.item(2);    assertNotNull("attr2",child);  }  child=attributes.item(0);  assertNotNull("attr0",child);  child=attributes.item(1);  assertNotNull("attr1",child);  child=attributes.item(3);  assertNull("attr3",child);}  }
class C{  public SHA(){  super("SHA-1",20,64);  state=new int[5];  W=new int[80];  implReset();}  }
class C{  private void syncDestination(State state){  FileOutputStream downloadedFileStream=null;  try {    downloadedFileStream=new FileOutputStream(state.mFilename,true);    downloadedFileStream.getFD().sync();  } catch (  FileNotFoundException ex) {    Log.w(Constants.TAG,"file " + state.mFilename + " not found: "+ ex);  }catch (  SyncFailedException ex) {    Log.w(Constants.TAG,"file " + state.mFilename + " sync failed: "+ ex);  }catch (  IOException ex) {    Log.w(Constants.TAG,"IOException trying to sync " + state.mFilename + ": "+ ex);  }catch (  RuntimeException ex) {    Log.w(Constants.TAG,"exception while syncing file: ",ex);  } finally {    if (downloadedFileStream != null) {      try {        downloadedFileStream.close();      } catch (      IOException ex) {        Log.w(Constants.TAG,"IOException while closing synced file: ",ex);      }catch (      RuntimeException ex) {        Log.w(Constants.TAG,"exception while closing file: ",ex);      }    }  }}  }
class C{  public static String encodeLines(byte[] in){  return encodeLines(in,0,in.length,76,systemLineSeparator);}  }
class C{  protected void configureJndi(){  try {    System.setProperty(Context.INITIAL_CONTEXT_FACTORY,"org.apache.xbean.spring.jndi.SpringInitialContextFactory");    new InitialContext();  } catch (  NamingException ex) {    logger.error("Error configurando jndi para los test:" + ex.getLocalizedMessage());  }}  }
class C{  @Override public void zoomFit(){  renderer.currentZRotation=output.getData().getZRotation();  renderer.camera.reset();  output.getData().setZoomLevel(1d);  zoomFit=true;}  }
class C{  public Matrix(String mname,int nrows){  super(mname,nrows);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    double streamsID=0;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void decode(){  if ((sourceDebugExtension.length() < 4) || (sdeRead() != 'S') || (sdeRead() != 'M')|| (sdeRead() != 'A')|| (sdeRead() != 'P')) {    return;  }  ignoreLine();  jplsFilename=readLine();  defaultStratumId=readLine();  createJavaStratum();  while (true) {    if (sdeRead() != '*') {      syntax();    }switch (sdeRead()) {case 'S':      stratumSection();    break;case 'F':  fileSection();break;case 'L':lineSection();break;case 'E':storeStratum("*terminator*");isValid=true;return;default :ignoreSection();}}}  }
class C{  public void appendTo(Appendable a) throws IOException {  a.append('<').append(elementType);  for (  Map.Entry<String,String> attribute : attributes.entrySet()) {    a.append(' ').append(attribute.getKey()).append("=\"").append(attribute.getValue()).append("\"");  }  if (children.isEmpty()) {    a.append(" />");  } else {    a.append(">");    for (    Pair<Object,ChildType> pair : children) {      Object child=pair.getFirst();      ChildType type=pair.getSecond();      if (type == ChildType.ELEMENT) {        ((XmlElement)child).appendTo(a);      } else {        a.append((String)child);      }    }    a.append("</").append(elementType).append('>');  }}  }
class C{  public SimpleConstant(String name,Date dateValue,String annotation){  this(name,dateValue);  this.annotation=annotation;}  }
class C{  public void onPackageRemoved(String packageName,int uid){}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("X.509 CRL v" + (version + 1) + "\n");  if (sigAlgId != null)   sb.append("Signature Algorithm: " + sigAlgId.toString() + ", OID="+ (sigAlgId.getOID()).toString()+ "\n");  if (issuer != null)   sb.append("Issuer: " + issuer.toString() + "\n");  if (thisUpdate != null)   sb.append("\nThis Update: " + thisUpdate.toString() + "\n");  if (nextUpdate != null)   sb.append("Next Update: " + nextUpdate.toString() + "\n");  if (revokedList.isEmpty())   sb.append("\nNO certificates have been revoked\n"); else {    sb.append("\nRevoked Certificates: " + revokedList.size());    int i=1;    for (    X509CRLEntry entry : revokedList) {      sb.append("\n[" + i++ + "] "+ entry.toString());    }  }  if (extensions != null) {    Collection<Extension> allExts=extensions.getAllExtensions();    Object[] objs=allExts.toArray();    sb.append("\nCRL Extensions: " + objs.length);    for (int i=0; i < objs.length; i++) {      sb.append("\n[" + (i + 1) + "]: ");      Extension ext=(Extension)objs[i];      try {        if (OIDMap.getClass(ext.getExtensionId()) == null) {          sb.append(ext.toString());          byte[] extValue=ext.getExtensionValue();          if (extValue != null) {            DerOutputStream out=new DerOutputStream();            out.putOctetString(extValue);            extValue=out.toByteArray();            HexDumpEncoder enc=new HexDumpEncoder();            sb.append("Extension unknown: " + "DER encoded OCTET string =\n" + enc.encodeBuffer(extValue) + "\n");          }        } else         sb.append(ext.toString());      } catch (      Exception e) {        sb.append(", Error parsing this extension");      }    }  }  if (signature != null) {    HexDumpEncoder encoder=new HexDumpEncoder();    sb.append("\nSignature:\n" + encoder.encodeBuffer(signature) + "\n");  } else   sb.append("NOT signed yet\n");  return sb.toString();}  }
class C{  public ReplDBMSEvent createEvent(long seqno,String shardId){  ArrayList<DBMSData> t=new ArrayList<DBMSData>();  t.add(new StatementData("SELECT 1"));  DBMSEvent dbmsEvent=new DBMSEvent(new Long(seqno).toString(),null,t,true,new Timestamp(System.currentTimeMillis()));  ReplDBMSEvent replDbmsEvent=new ReplDBMSEvent(seqno,dbmsEvent);  replDbmsEvent.getDBMSEvent().addMetadataOption(ReplOptionParams.SHARD_ID,shardId);  return replDbmsEvent;}  }
class C{  public void excludePositions(ArrayList<Integer> positions){  for (  Integer p : positions) {    if (realTSindex.containsKey(p)) {      SAXRecord rec=realTSindex.get(p);      rec.removeIndex(p);      if (rec.getIndexes().isEmpty()) {        this.records.remove(String.valueOf(rec.getPayload()));      }      realTSindex.remove(p);    }  }}  }
class C{  public Dispatcher(APPlatformService platformService,String instanceId,PropertyHandler paramHandler){  this.platformService=platformService;  this.instanceId=instanceId;  this.properties=paramHandler;}  }
class C{  public static void swapC(double[] array,int i,int j){  double tmp_i=array[i];  double tmp_j=array[j];  if (tmp_i > tmp_j) {    array[i]=tmp_j;    array[j]=tmp_i;  }}  }
class C{  public VideoAdapter(Context context){  super();  mContext=context;}  }
class C{  protected void greedyMatch(){  for (int w=0; w < dim; w++) {    for (int j=0; j < dim; j++) {      if (matchJobByWorker[w] == -1 && matchWorkerByJob[j] == -1 && costMatrix[w][j] - labelByWorker[w] - labelByJob[j] == 0) {        match(w,j);      }    }  }}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public double num() throws javax.xml.transform.TransformerException {  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NUM_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:10.211 -0500",hash_original_method="439CE19804D9002003DD6A4835AE4496",hash_generated_method="629F14B051FCA1573294076D9E1BC448") @Override public String toString(){  return getClass().getName() + "[value=" + value+ ']';}  }
class C{  public static void purgeSharedManager(){  if (_sharedManager != null) {    CCScheduler.sharedScheduler().unscheduleUpdate(_sharedManager);    _sharedManager=null;  }}  }
class C{  public EntityListIterator queryIterator() throws GenericEntityException {  if (useCache) {    Debug.logWarning("Call to iterator() with cache, ignoring cache",module);  }  if (dynamicViewEntity == null) {    return delegator.find(entityName,makeWhereCondition(false),havingEntityCondition,fieldsToSelect,orderBy,makeEntityFindOptions());  } else {    return delegator.findListIteratorByCondition(dynamicViewEntity,makeWhereCondition(false),havingEntityCondition,fieldsToSelect,orderBy,makeEntityFindOptions());  }}  }
class C{  public static void main(String[] args){  Vector<String> list;  Vector<String> packages;  int i;  StringTokenizer tok;  if ((args.length == 1) && (args[0].equals("packages"))) {    list=findPackages();    for (i=0; i < list.size(); i++) {      System.out.println(list.get(i));    }  } else   if (args.length == 2) {    packages=new Vector<String>();    tok=new StringTokenizer(args[1],",");    while (tok.hasMoreTokens()) {      packages.add(tok.nextToken());    }    list=ClassDiscovery.find(args[0],packages.toArray(new String[packages.size()]));    System.out.println("Searching for '" + args[0] + "' in '"+ args[1]+ "':\n"+ "  "+ list.size()+ " found.");    for (i=0; i < list.size(); i++) {      System.out.println("  " + (i + 1) + ". "+ list.get(i));    }  } else {    System.out.println("\nUsage:");    System.out.println(ClassDiscovery.class.getName() + " packages");    System.out.println("\tlists all packages in the classpath");    System.out.println(ClassDiscovery.class.getName() + " <classname> <packagename(s)>");    System.out.println("\tlists classes derived from/implementing 'classname' that");    System.out.println("\tcan be found in 'packagename(s)' (comma-separated list");    System.out.println();    System.exit(1);  }}  }
class C{  public VertexInfo(int previous,boolean forward){  this.previous=previous;  this.forward=forward;}  }
class C{  public void addLine(String text) throws BadLocationException {  if (text == null || text.length() == 0 || text.equals("\n")) {    return;  }  document.replace(document.getLength(),0,text);}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public static void deletePortMappings(){  if (SB == null) {    return;  }  SB.setConnectedViaUpnp(false);  UPnPMapping mapping;  for (  final Entry<UPnPMappingType,UPnPMapping> entry : MAPPINGS.entrySet()) {    mapping=entry.getValue();    deletePortMapping(mapping);  }}  }
class C{  public RevCommit merge(Repository repo,RevWalk rw,final ObjectInserter ins,RevCommit merge,ThreeWayMergeStrategy mergeStrategy) throws IOException {  checkArgument(rw.getObjectReader().getCreatedFromInserter() == ins);  InMemoryInserter tmpIns=null;  if (ins instanceof InMemoryInserter) {    tmpIns=(InMemoryInserter)ins;  } else   if (!save) {    tmpIns=new InMemoryInserter(rw.getObjectReader());  }  rw.parseHeaders(merge);  String hash=merge.name();  String refName=RefNames.REFS_CACHE_AUTOMERGE + hash.substring(0,2) + "/"+ hash.substring(2);  Ref ref=repo.getRefDatabase().exactRef(refName);  if (ref != null && ref.getObjectId() != null) {    RevObject obj=rw.parseAny(ref.getObjectId());    if (obj instanceof RevCommit) {      return (RevCommit)obj;    }    return commit(repo,rw,tmpIns,ins,refName,obj,merge);  }  ResolveMerger m=(ResolveMerger)mergeStrategy.newMerger(repo,true);  DirCache dc=DirCache.newInCore();  m.setDirCache(dc);  m.setObjectInserter(tmpIns == null ? new NonFlushingWrapper(ins) : tmpIns);  boolean couldMerge;  try {    couldMerge=m.merge(merge.getParents());  } catch (  IOException e) {    log.warn("Error attempting automerge " + refName,e);    return null;  }  ObjectId treeId;  if (couldMerge) {    treeId=m.getResultTreeId();  } else {    RevCommit ours=merge.getParent(0);    RevCommit theirs=merge.getParent(1);    rw.parseBody(ours);    rw.parseBody(theirs);    String oursMsg=ours.getShortMessage();    String theirsMsg=theirs.getShortMessage();    String oursName=String.format("HEAD   (%s %s)",ours.abbreviate(6).name(),oursMsg.substring(0,Math.min(oursMsg.length(),60)));    String theirsName=String.format("BRANCH (%s %s)",theirs.abbreviate(6).name(),theirsMsg.substring(0,Math.min(theirsMsg.length(),60)));    MergeFormatter fmt=new MergeFormatter();    Map<String,MergeResult<? extends Sequence>> r=m.getMergeResults();    Map<String,ObjectId> resolved=new HashMap<>();    for (    Map.Entry<String,MergeResult<? extends Sequence>> entry : r.entrySet()) {      MergeResult<? extends Sequence> p=entry.getValue();      try (TemporaryBuffer buf=new TemporaryBuffer.LocalFile(null,10 * 1024 * 1024)){        fmt.formatMerge(buf,p,"BASE",oursName,theirsName,UTF_8.name());        buf.close();        try (InputStream in=buf.openInputStream()){          resolved.put(entry.getKey(),ins.insert(Constants.OBJ_BLOB,buf.length(),in));        }       }     }    DirCacheBuilder builder=dc.builder();    int cnt=dc.getEntryCount();    for (int i=0; i < cnt; ) {      DirCacheEntry entry=dc.getEntry(i);      if (entry.getStage() == 0) {        builder.add(entry);        i++;        continue;      }      int next=dc.nextEntry(i);      String path=entry.getPathString();      DirCacheEntry res=new DirCacheEntry(path);      if (resolved.containsKey(path)) {        res.setFileMode(entry.getFileMode());        res.setObjectId(resolved.get(path));      } else       if (next == i + 1) {        res.setFileMode(entry.getFileMode());        res.setObjectId(entry.getObjectId());      } else       if (next == i + 2) {        entry=dc.getEntry(i + 1);        res.setFileMode(entry.getFileMode());        res.setObjectId(entry.getObjectId());      } else {        res.setFileMode(entry.getFileMode());        res.setObjectId(entry.getObjectId());      }      builder.add(res);      i=next;    }    builder.finish();    treeId=dc.writeTree(ins);  }  return commit(repo,rw,tmpIns,ins,refName,treeId,merge);}  }
class C{  public KeyedObjects(){  this.data=new java.util.ArrayList();}  }
class C{  public static double[][] scatter(double[][] matrix,double[] means,double divisor,int dimension){  int rows=matrix.length;  if (rows == 0) {    return new double[0][0];  }  int cols=matrix[0].length;  double[][] cov;  if (dimension == 0) {    if (means.length != cols) {      throw new IllegalArgumentException("Length of the mean vector should equal the number of columns");    }    cov=new double[cols][cols];    for (int i=0; i < cols; i++) {      for (int j=i; j < cols; j++) {        double s=0.0;        for (int k=0; k < rows; k++) {          s+=(matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);        }        s/=divisor;        cov[i][j]=s;        cov[j][i]=s;      }    }  } else   if (dimension == 1) {    if (means.length != rows) {      throw new IllegalArgumentException("Length of the mean vector should equal the number of rows");    }    cov=new double[rows][rows];    for (int i=0; i < rows; i++) {      for (int j=i; j < rows; j++) {        double s=0.0;        for (int k=0; k < cols; k++) {          s+=(matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);        }        s/=divisor;        cov[i][j]=s;        cov[j][i]=s;      }    }  } else {    throw new IllegalArgumentException("Invalid dimension");  }  return cov;}  }
class C{  public void testMT() throws Exception {  tryMT(2);}  }
class C{  public JBBPOut Long(final long... value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final long l : value) {      _writeLong(l);    }  }  return this;}  }
class C{  public static Class<?> wrapper(Class<?> type){  if (type == null) {    return null;  } else   if (type.isPrimitive()) {    if (boolean.class == type) {      return Boolean.class;    } else     if (int.class == type) {      return Integer.class;    } else     if (long.class == type) {      return Long.class;    } else     if (short.class == type) {      return Short.class;    } else     if (byte.class == type) {      return Byte.class;    } else     if (double.class == type) {      return Double.class;    } else     if (float.class == type) {      return Float.class;    } else     if (char.class == type) {      return Character.class;    } else     if (void.class == type) {      return Void.class;    }  }  return type;}  }
class C{  public static boolean isAssignable(Types types,TypeSymbol to,TypeSymbol from){  if (to.equals(from)) {    return true;  } else {    return types.isAssignable(from.asType(),to.asType());  }}  }
class C{  public h1 addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override protected void onListItemClick(ListView list,View view,int position,long id){  Intent intent=new Intent();  intent.putExtra(Extra.ACTION,(int)id);  intent.putExtra(Extra.USER,nickname);  setResult(RESULT_OK,intent);  finish();}  }
class C{  private static <T>int gallopLeft(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (c.compare(key,a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  m_replaceMissing.input(instance);  instance=m_replaceMissing.output();  if (m_convertNominal) {    m_nominalToBinary.input(instance);    instance=m_nominalToBinary.output();  }  return m_tree.distributionForInstance(instance);}  }
class C{  public static void serialize(Node node,OutputStream os){  serialize(asString(node),os);}  }
class C{  protected List tokenize(char[] chars,int offset,int count){  if (chars == null || count == 0) {    return Collections.EMPTY_LIST;  }  StrBuilder buf=new StrBuilder();  List tokens=new ArrayList();  int pos=offset;  while (pos >= 0 && pos < count) {    pos=readNextToken(chars,pos,count,buf,tokens);    if (pos >= count) {      addToken(tokens,"");    }  }  return tokens;}  }
class C{  public void testFiveNodeManyEvents() throws Throwable {  testManyEvents(5);}  }
class C{  public Builder addPhoto(Photo photo){  if (photo != null) {    this.photos.add(new Photo.Builder(photo).build());  }  return this;}  }
class C{  public boolean deleteStatement(TestCase test,int position) throws ConstructionFailedException {  if (!ConstraintVerifier.canDelete(test,position)) {    return false;  }  logger.debug("Deleting target statement - {}",position);  Set<Integer> toDelete=new LinkedHashSet<>();  recursiveDeleteInclusion(test,toDelete,position);  List<Integer> pos=new ArrayList<>(toDelete);  Collections.sort(pos,Collections.reverseOrder());  for (  Integer i : pos) {    logger.debug("Deleting statement: {}",i);    test.remove(i);  }  return true;}  }
class C{  public static Path locateSolrHome(){  String home=null;  try {    Context c=new InitialContext();    home=(String)c.lookup("java:comp/env/" + project + "/home");    logOnceInfo("home_using_jndi","Using JNDI solr.home: " + home);  } catch (  NoInitialContextException e) {    log.debug("JNDI not configured for " + project + " (NoInitialContextEx)");  }catch (  NamingException e) {    log.debug("No /" + project + "/home in JNDI");  }catch (  RuntimeException ex) {    log.warn("Odd RuntimeException while testing for JNDI: " + ex.getMessage());  }  if (home == null) {    String prop=project + ".solr.home";    home=System.getProperty(prop);    if (home != null) {      logOnceInfo("home_using_sysprop","Using system property " + prop + ": "+ home);    }  }  if (home == null) {    home=project + '/';    logOnceInfo("home_default",project + " home defaulted to '" + home+ "' (could not find system property or JNDI)");  }  return Paths.get(home);}  }
class C{  public static boolean checkFileList(CFlags flags,String fileListFlag,String singleInputFlag,int maxFiles){  return checkFileList(flags,fileListFlag,singleInputFlag,maxFiles,false);}  }
class C{  @SuppressWarnings("unchecked") private void visitGroups(final IEvaluationContext context,final DatasetNode dataSet,final IGroupNode<IGroupMemberNode> group,TermNode graphContext){  if (group instanceof JoinGroupNode && group.getContext() != null) {    final TermNode innerGraphContext=group.getContext();    if (innerGraphContext.isConstant()) {      assertGraphInNamedDataset((BigdataURI)((TermNode)innerGraphContext).getValue(),dataSet);    }    if (graphContext == null) {      graphContext=innerGraphContext;    } else {      if (graphContext.isConstant() && innerGraphContext.isConstant()) {        assertSameURI(graphContext,innerGraphContext);      } else       if (graphContext.isVariable() && innerGraphContext.isVariable() && !graphContext.equals(innerGraphContext)) {        final FilterNode filterNode=new FilterNode(FunctionNode.sameTerm(graphContext,innerGraphContext));        final GlobalAnnotations globals=new GlobalAnnotations(context.getLexiconNamespace(),context.getTimestamp());        AST2BOpUtility.toVE(context.getBOpContext(),globals,filterNode.getValueExpressionNode());        group.addChild(filterNode);      }    }    if (group.isEmpty() && graphContext.isVariable()) {      final StatementPatternNode sp=new StatementPatternNode(VarNode.freshVarNode(),VarNode.freshVarNode(),VarNode.freshVarNode(),graphContext,Scope.NAMED_CONTEXTS);      sp.setDistinctTermScanVar((VarNode)graphContext);      group.addChild(sp);    } else     if (group.isEmpty() && graphContext.isConstant()) {      final StatementPatternNode sp=new StatementPatternNode(VarNode.freshVarNode(),VarNode.freshVarNode(),VarNode.freshVarNode(),graphContext,Scope.NAMED_CONTEXTS);      final SubqueryRoot subquery=new SubqueryRoot(QueryType.ASK);      final ProjectionNode projection=new ProjectionNode();      subquery.setProjection(projection);      subquery.addArg(new JoinGroupNode(sp));      group.addChild(sp);    }  }  for (  IGroupMemberNode child : group) {    if (child instanceof ServiceNode) {      continue;    }    if (graphContext != null) {      if (child instanceof StatementPatternNode) {        final StatementPatternNode sp=(StatementPatternNode)child;        final Scope scope=sp.getScope();        if (scope == null) {          throw new AssertionError("No scope? " + sp);        }switch (scope) {case NAMED_CONTEXTS:          break;case DEFAULT_CONTEXTS:        throw new AssertionError("Statement pattern bounded by GRAPH but has default context scope: " + sp);    }    if (sp.c() == null) {      sp.setArg(3,graphContext);    }  }}if (!(child instanceof IGroupNode<?>)) continue;visitGroups(context,dataSet,(IGroupNode<IGroupMemberNode>)child,graphContext);}}  }
class C{  public static char[] toCharArray(byte[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i];  }  return result;}  }
class C{  @Override protected void finalize() throws Throwable {  leftTop=null;  rightBottom=null;  super.finalize();}  }
class C{  void mousePressedInArrows(final MouseEvent e,final Hit part){  final int direction=HitUtil.isIncrement(part) ? 1 : -1;  fStillInArrow=true;  scrollByUnit(direction);  fScrollTimer.stop();  fScrollListener.setDirection(direction);  fScrollListener.setScrollByBlock(false);  fMousePart=part;  startTimer(true);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.STATE_ROOT__DEF:    setDef((StateSpecification)null);  return;}super.eUnset(featureID);}  }
class C{  public static String hashave(final int quantity){  if (quantity == 1) {    return "has";  } else {    return "have";  }}  }
class C{  public static <K,V,E>Map<K,V> collectEntries(Iterator<E> self,@ClosureParams(FirstParam.FirstGenericType.class) Closure<?> transform){  return collectEntries(self,new LinkedHashMap<K,V>(),transform);}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  byte code=in[in.length - 1];  int index=in.length - 1;  while (index > 0 && in[index - 1] == code) {    index--;  }  return in.length - index;}  }
class C{  public boolean equals(ReadonlyVec3D v){  try {    return (x == v.x() && y == v.y() && z == v.z());  } catch (  NullPointerException e) {    return false;  }}  }
class C{  private void installIdleThreads(){  SysMemInfo info=Modules.SysMemUserForUserModule.malloc(SysMemUserForUser.USER_PARTITION_ID,"ThreadMan-RootMem",SysMemUserForUser.PSP_SMEM_Addr,0x4000,MemoryMap.START_USERSPACE);  int reservedMem=info.addr;  IMemoryWriter memoryWriter=MemoryWriter.getMemoryWriter(IDLE_THREAD_ADDRESS,0x20,4);  memoryWriter.writeNext(MOVE(_a0,_zr));  memoryWriter.writeNext(SYSCALL("sceKernelDelayThread"));  memoryWriter.writeNext(B(-3));  memoryWriter.writeNext(NOP());  memoryWriter.flush();  idle0=new SceKernelThreadInfo("idle0",IDLE_THREAD_ADDRESS | 0x80000000,0x7f,0,PSP_THREAD_ATTR_KERNEL,KERNEL_PARTITION_ID);  idle0.setSystemStack(reservedMem,0x2000);  idle0.reset();  idle0.exitStatus=ERROR_KERNEL_THREAD_IS_NOT_DORMANT;  threadMap.put(idle0.uid,idle0);  hleChangeThreadState(idle0,PSP_THREAD_READY);  idle1=new SceKernelThreadInfo("idle1",IDLE_THREAD_ADDRESS | 0x80000000,0x7f,0,PSP_THREAD_ATTR_KERNEL,KERNEL_PARTITION_ID);  idle1.setSystemStack(reservedMem + 0x2000,0x2000);  idle1.reset();  idle1.exitStatus=ERROR_KERNEL_THREAD_IS_NOT_DORMANT;  threadMap.put(idle1.uid,idle1);  hleChangeThreadState(idle1,PSP_THREAD_READY);}  }
class C{  @Override protected void initData(){  this.loadFixCall=new LoadFixCall();}  }
class C{  public void shutdown(String dsName) throws SQLException {  ConnectionProvider provider=(ConnectionProvider)providers.get(dsName);  if (provider == null) {    throw new SQLException("There is no DataSource named '" + dsName + "'");  }  provider.shutdown();}  }
class C{  public PdxInputStream(PdxInputStream copy){  super(copy);}  }
class C{  protected int sizeof(Object o) throws IllegalArgumentException {  return MemLRUCapacityController.basicSizeof(o,this.sizer);}  }
class C{  public int convertColumnIndexToModel(int viewColumnIndex){  return viewColumnIndex;}  }
class C{  public static void generatePrettyJson(MappingJackson2HttpMessageConverter jsonConverter,Object aObject,File aFile) throws IOException {  FileUtils.writeStringToFile(aFile,toPrettyJsonString(jsonConverter,aObject));}  }
class C{  public static PropertyValuesHolder ofFloat(Property<?,Float> property,float... values){  return new FloatPropertyValuesHolder(property,values);}  }
class C{  private boolean typesMatch(Class<V> valueType,Class getterType){  if (getterType != valueType) {    if (getterType.isPrimitive()) {      return (getterType == float.class && valueType == Float.class) || (getterType == int.class && valueType == Integer.class) || (getterType == boolean.class && valueType == Boolean.class)|| (getterType == long.class && valueType == Long.class)|| (getterType == double.class && valueType == Double.class)|| (getterType == short.class && valueType == Short.class)|| (getterType == byte.class && valueType == Byte.class)|| (getterType == char.class && valueType == Character.class);    }    return false;  }  return true;}  }
class C{  @Override @Transactional public Server create(Server server,String tagName) throws ServiceException, CheckException {  if (tagName == null) {    tagName="";  }  logger.debug("create : Methods parameters : " + server);  logger.info("ServerService : Starting creating Server " + server.getName());  server.setStatus(Status.PENDING);  server.setJvmOptions("");  server.setStartDate(new Date());  Application application=server.getApplication();  User user=server.getApplication().getUser();  String containerName=AlphaNumericsCharactersCheckUtils.convertToAlphaNumerics(cuInstanceName.toLowerCase()) + "-" + AlphaNumericsCharactersCheckUtils.convertToAlphaNumerics(user.getLogin())+ "-"+ AlphaNumericsCharactersCheckUtils.convertToAlphaNumerics(server.getApplication().getName())+ "-"+ server.getName();  String imagePath=server.getImage().getPath() + tagName;  logger.debug("imagePath:" + imagePath);  String subdomain=System.getenv("CU_SUB_DOMAIN");  if (subdomain == null) {    subdomain="";  }  logger.info("env.CU_SUB_DOMAIN=" + subdomain);  server.getApplication().setSuffixCloudUnitIO(subdomain + suffixCloudUnitIO);  try {    dockerService.createServer(containerName,server,imagePath,user,null,true,null);    server=dockerService.startServer(containerName,server);    server=serverDAO.saveAndFlush(server);    if (logger.isDebugEnabled()) {      logger.debug(dockerService.getEnv(server.getName(),"CU_SERVER_PORT"));      logger.debug(dockerService.getEnv(server.getName(),"CU_SERVER_MANAGER_PORT"));      logger.debug(application.getLocation());    }    hipacheRedisUtils.createRedisAppKey(server.getApplication(),server.getContainerIP(),dockerService.getEnv(server.getName(),"CU_SERVER_PORT"),dockerService.getEnv(server.getName(),"CU_SERVER_MANAGER_PORT"));    server.setManagerLocation("http://manager-" + application.getLocation().substring(7) + dockerService.getEnv(server.getName(),"CU_SERVER_MANAGER_PATH"));    server.setStatus(Status.START);    server.setJvmMemory(512L);    server.setJvmRelease(dockerService.getEnv(server.getName(),"CU_DEFAULT_JAVA_RELEASE"));    server=this.update(server);    addCredentialsForServerManagement(server,user);    String needToRestart=dockerService.getEnv(server.getName(),"CU_SERVER_RESTART_POST_CREDENTIALS");    if ("true".equalsIgnoreCase(needToRestart)) {      dockerService.stopContainer(server.getName());      dockerService.startServer(server.getName(),server);    }    applicationEventPublisher.publishEvent(new ServerStartEvent(server));  } catch (  PersistenceException e) {    logger.error("ServerService Error : Create Server " + e);    throw new ServiceException(e.getLocalizedMessage(),e);  }catch (  DockerJSONException e) {    StringBuilder msgError=new StringBuilder(512);    msgError.append("server=").append(server);    msgError.append(", tagName=[").append(tagName).append("]");    logger.error("" + msgError,e);    throw new ServiceException(msgError.toString(),e);  }  logger.info("ServerService : Server " + server.getName() + " successfully created.");  return server;}  }
class C{  public resourceKind whatIs(URI uri) throws ODataException {  if (uri == null)   throw new IllegalArgumentException("uri must not be null.");  Map<String,String> query_parameters=null;  if (uri.getQuery() != null) {    query_parameters=new HashMap<>();    StringTokenizer st=new StringTokenizer(uri.getQuery(),"&");    while (st.hasMoreTokens()) {      String[] key_val=st.nextToken().split("=",2);      if (key_val.length != 2)       throw new UriSyntaxException(UriSyntaxException.URISYNTAX);      query_parameters.put(key_val[0],key_val[1]);    }  }  String resource_path=getResourcePath(uri);  UriInfo uri_info=parseRequest(resource_path,query_parameters);  EdmType et=uri_info.getTargetType();  if (et == null)   return resourceKind.SERVICE_ROOT;  EdmTypeKind etk=et.getKind();  if (etk == EdmTypeKind.ENTITY) {    if (uri_info.getTargetKeyPredicates().isEmpty())     return resourceKind.ENTITY_SET;    return resourceKind.ENTITY;  }  if (etk == EdmTypeKind.SIMPLE)   return resourceKind.SIMPLE_PROPERTY;  if (etk == EdmTypeKind.COMPLEX)   return resourceKind.COMPLEX_PROPERTY;  return resourceKind.UNKNOWN;}  }
class C{  public static final void showstaticGUIMessage(final StringBuffer message,final String title){  final JTextArea text_pane=new JTextArea();  text_pane.setEditable(false);  text_pane.setWrapStyleWord(true);  text_pane.append("  " + message + "  ");  final JPanel display=new JPanel();  display.setLayout(new BorderLayout());  display.add(text_pane,BorderLayout.CENTER);  final int width=(int)text_pane.getSize().getWidth();  final int height=(int)text_pane.getSize().getHeight();  display.setSize(new Dimension(width + 10,height + 10));  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);}  }
class C{  public synchronized void waitForResponse(){  try {    if (collectedResponse == null)     wait(50);  } catch (  InterruptedException e) {    logger.log(Level.INFO,"oops",e);  }}  }
class C{  public double localScore(int i,int parent){  double sum=0.0;  int count=0;  for (  SemBicScore score : semBicScores) {    double _score=score.localScore(i,parent);    if (!Double.isNaN(_score)) {      sum+=_score;      count++;    }  }  return sum / count;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String prop=getString(stack);  Airing air=getAir(stack);  ManualRecord mr=Wizard.getInstance().getManualRecord(air);  return (mr == null) ? "" : mr.getProperty(prop);}  }
class C{  @POST @ApiOperation(value="Creates a new order") @ApiResponses({@ApiResponse(code=200,response=String.class,message="The id of the created order")}) public Response createOrder(@ApiParam(value="The order to create",required=true) Order order){  String id=orderService.createOrder(order);  return Response.ok(id).build();}  }
class C{  @DSSink({DSSinkKind.VOIP}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.394 -0500",hash_original_method="E7A6CF8B50F165B49D6E8637D9CBF9BD",hash_generated_method="47F6C28109893F14B315FAA6E19D4D88") public SIPDialog createDialog(SIPTransaction transaction){  SIPDialog retval=null;  if (transaction instanceof SIPClientTransaction) {    String dialogId=((SIPRequest)transaction.getRequest()).getDialogId(false);    if (this.earlyDialogTable.get(dialogId) != null) {      SIPDialog dialog=this.earlyDialogTable.get(dialogId);      if (dialog.getState() == null || dialog.getState() == DialogState.EARLY) {        retval=dialog;      } else {        retval=new SIPDialog(transaction);        this.earlyDialogTable.put(dialogId,retval);      }    } else {      retval=new SIPDialog(transaction);      this.earlyDialogTable.put(dialogId,retval);    }  } else {    retval=new SIPDialog(transaction);  }  return retval;}  }
class C{  public boolean hasHistory(){  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void reset(){  resetMappings();  notifyDataSetChanged();}  }
class C{  public void createTable(){  putAttribute(DBF_ATTRIBUTE,EsriShapeExport.createDefaultModel(this));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DShowTVPlayer.getUseDscaler());}  }
class C{  public void toEPL(StringWriter writer){  writer.write("create window ");  writer.write(windowName);  ProjectedStream.toEPLViews(writer,views);}  }
class C{  void initialize(){  getModifiers();  getName();  getSourceName();  getEnclosingTypeName();  reset();}  }
class C{  public int countEntries(){  int size=0;  if (entriesFromStorage == null)   return 0;  for (  String ofswitch : entriesFromStorage.keySet())   size+=entriesFromStorage.get(ofswitch).size();  return size;}  }
class C{  public static void removeWorkspaceOrFolderItem(Launcher launcher,ItemInfo item,View view){  launcher.removeItem(view,item,true);  launcher.getWorkspace().stripEmptyScreens();  launcher.getDragLayer().announceForAccessibility(launcher.getString(R.string.item_removed));}  }
class C{  public String toString(){  return x + "," + y;}  }
class C{  public boolean isSettingVideoRamSizeSupported(){  return settingVideoRamSizeSupported;}  }
class C{  protected void optimizeJoinGroup(final AST2BOpContext ctx,final StaticAnalysis sa,final IBindingSet[] bSets,final JoinGroupNode group){  for (  FilterNode node : group.getChildren(FilterNode.class)) {    optimize(ctx,sa,group,node);  }}  }
class C{  public PySkeletonRefresher(@Nullable Project project,@Nullable Component ownerComponent,@NotNull Sdk sdk,@Nullable String skeletonsPath,@Nullable ProgressIndicator indicator,@Nullable String folder) throws InvalidSdkException {  myProject=project;  myIndicator=indicator;  mySdk=sdk;  mySkeletonsPath=skeletonsPath;  final PythonRemoteInterpreterManager remoteInterpreterManager=PythonRemoteInterpreterManager.getInstance();  if (PySdkUtil.isRemote(sdk) && remoteInterpreterManager != null) {    try {      mySkeletonsGenerator=remoteInterpreterManager.createRemoteSkeletonGenerator(myProject,ownerComponent,sdk,getSkeletonsPath());    } catch (    ExecutionException e) {      throw new InvalidSdkException(e.getMessage(),e.getCause());    }  } else {    mySkeletonsGenerator=new PySkeletonGenerator(getSkeletonsPath(),mySdk,folder);  }}  }
class C{  protected void updatePorts(){  if (!isChanging) {    isChanging=true;    boolean first=true;    T foundDisconnected=null;    Iterator<T> i=managedPorts.iterator();    while (i.hasNext()) {      T port=i.next();      if (!port.isConnected() && !port.isLocked()) {        if (first) {          foundDisconnected=port;          first=false;        } else {          if (minNumber == 0) {            deletePort(port);            i.remove();          }        }      }    }    if ((foundDisconnected == null) || (managedPorts.size() < minNumber)) {      do {        managedPorts.add(createPort());      } while (managedPorts.size() < minNumber);    } else {      if (minNumber == 0) {        managedPorts.remove(foundDisconnected);        managedPorts.add(foundDisconnected);        ports.pushDown(foundDisconnected);      }    }    fixNames();    isChanging=false;  }}  }
class C{  public void testGetProperty(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  assertEquals(OLD_VALUE,Beans.getProperty(introspectedTarget,STRING_PROPERTY));  assertNull(Beans.getProperty(introspectedTarget,NOT_A_PROPERTY));  assertEquals(OLD_VALUE,Beans.getProperty(hashedTarget,STRING_PROPERTY));  assertNull(Beans.getProperty(hashedTarget,NOT_A_PROPERTY));}  }
class C{  @DSComment("Sip phone call") @DSSpec(DSCat.PHONE_CALL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.831 -0500",hash_original_method="597B95CEB5AFD05C977FB508D047C50E",hash_generated_method="5A3337BA0DCEE457132408A727907816") public void close(){  close(true);}  }
class C{  public static String toString(int[] array){  StringBuffer buf=new StringBuffer();  buf.append("[");  int maxIndex=array.length - 1;  for (int i=0; i <= maxIndex; i++) {    buf.append(array[i]);    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  private void addCSSClasses(SVGPlot svgp){  final StyleLibrary style=context.getStyleLibrary();  if (!svgp.getCSSClassManager().contains(AXIS_LABEL)) {    CSSClass cls=new CSSClass(this,AXIS_LABEL);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,style.getTextColor(StyleLibrary.AXIS_LABEL));    cls.setStatement(SVGConstants.CSS_FONT_FAMILY_PROPERTY,style.getFontFamily(StyleLibrary.AXIS_LABEL));    cls.setStatement(SVGConstants.CSS_FONT_SIZE_PROPERTY,style.getTextSize(StyleLibrary.AXIS_LABEL));    cls.setStatement(SVGConstants.CSS_TEXT_ANCHOR_PROPERTY,SVGConstants.SVG_MIDDLE_VALUE);    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(INVERTEDAXIS)) {    CSSClass cls=new CSSClass(this,INVERTEDAXIS);    cls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,0.1);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_GREY_VALUE);    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  AbstractElementNS ae=(AbstractElementNS)n;  ae.namespaceURI=namespaceURI;  return n;}  }
class C{  PreparedStatementWrapper(Connection con,String sql) throws SQLException {  m_sql=sql;  m_ps=con.prepareStatement(m_sql);}  }
class C{  public static Map<String,Object> createUpdatePartyRelationshipAndRoles(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  try {    List<GenericValue> partyRelationShipList=PartyRelationshipHelper.getActivePartyRelationships(delegator,context);    if (UtilValidate.isEmpty(partyRelationShipList)) {      String partyId=(String)context.get("partyId");      String partyIdFrom=(String)context.get("partyIdFrom");      String partyIdTo=(String)context.get("partyIdTo");      String roleTypeIdFrom=(String)context.get("roleTypeIdFrom");      String roleTypeIdTo=(String)context.get("roleTypeIdTo");      String partyRelationshipTypeId=(String)context.get("partyRelationshipTypeId");      GenericValue partyToRole=null;      partyToRole=EntityQuery.use(delegator).from("PartyRole").where("partyId",partyIdTo,"roleTypeId",roleTypeIdTo).queryOne();      if (partyToRole == null) {        partyToRole=delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",partyIdTo,"roleTypeId",roleTypeIdTo));        partyToRole.create();      }      GenericValue partyFromRole=null;      partyFromRole=EntityQuery.use(delegator).from("PartyRole").where("partyId",partyIdFrom,"roleTypeId",roleTypeIdFrom).queryOne();      if (partyFromRole == null) {        partyFromRole=delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",partyIdFrom,"roleTypeId",roleTypeIdFrom));        partyFromRole.create();      }      String sideChecked=partyIdFrom.equals(partyId) ? "partyIdFrom" : "partyIdTo";      GenericValue oldPartyRelationShip=EntityQuery.use(delegator).from("PartyRelationship").where(sideChecked,partyId,"roleTypeIdFrom",roleTypeIdFrom,"roleTypeIdTo",roleTypeIdTo,"partyRelationshipTypeId",partyRelationshipTypeId).filterByDate().queryFirst();      if (UtilValidate.isNotEmpty(oldPartyRelationShip)) {        oldPartyRelationShip.setFields(UtilMisc.toMap("thruDate",UtilDateTime.nowTimestamp()));        oldPartyRelationShip.store();      }      try {        dispatcher.runSync("createPartyRelationship",context);      } catch (      GenericServiceException e) {        Debug.logWarning(e.getMessage(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyrelationshipservices.could_not_create_party_role_write",UtilMisc.toMap("errorString",e.getMessage()),locale));      }    }  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyrelationshipservices.could_not_create_party_role_write",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  private KeySelectorResult x509DataSelect(X509Data xd,SignatureMethod sm) throws KeyStoreException, KeySelectorException {  String algOID=getPKAlgorithmOID(sm.getAlgorithm());  X509CertSelector subjectcs=new X509CertSelector();  try {    subjectcs.setSubjectPublicKeyAlgID(algOID);  } catch (  IOException ioe) {    throw new KeySelectorException(ioe);  }  Collection<X509Certificate> certs=new ArrayList<>();  Iterator xi=xd.getContent().iterator();  while (xi.hasNext()) {    Object o=xi.next();    if (o instanceof X509IssuerSerial) {      X509IssuerSerial xis=(X509IssuerSerial)o;      try {        subjectcs.setSerialNumber(xis.getSerialNumber());        String issuer=new X500Principal(xis.getIssuerName()).getName();        if (issuer.endsWith("\n")) {          issuer=new String(issuer.toCharArray(),0,issuer.length() - 1);        }        subjectcs.setIssuer(issuer);      } catch (      IOException ioe) {        throw new KeySelectorException(ioe);      }    } else     if (o instanceof String) {      String sn=(String)o;      try {        String subject=new X500Principal(sn).getName();        if (subject.endsWith("\n")) {          subject=new String(subject.toCharArray(),0,subject.length() - 1);        }        subjectcs.setSubject(subject);      } catch (      IOException ioe) {        throw new KeySelectorException(ioe);      }    } else     if (o instanceof byte[]) {      byte[] ski=(byte[])o;      byte[] encodedSki=new byte[ski.length + 2];      encodedSki[0]=0x04;      encodedSki[1]=(byte)ski.length;      System.arraycopy(ski,0,encodedSki,2,ski.length);      subjectcs.setSubjectKeyIdentifier(encodedSki);    } else     if (o instanceof X509Certificate) {      certs.add((X509Certificate)o);    } else {      continue;    }  }  KeySelectorResult ksr=keyStoreSelect(subjectcs);  if (ksr != null) {    return ksr;  }  if (!certs.isEmpty() && !trusted) {    for (    X509Certificate cert : certs) {      if (subjectcs.match(cert)) {        return new SimpleKeySelectorResult(cert.getPublicKey());      }    }  }  return null;}  }
class C{  public void background(int rgb){  g.background(rgb);}  }
class C{  @Override protected void translateCore(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions){  final IOperandTreeNode registerOperand=instruction.getOperands().get(0).getRootNode().getChildren().get(0);  final IOperandTreeNode immediateOperand1=instruction.getOperands().get(1).getRootNode().getChildren().get(0);  final IOperandTreeNode immediateOperand2=instruction.getOperands().get(2).getRootNode().getChildren().get(0);  final long clearMask=TranslationHelpers.generateZeroMask(Integer.parseInt(immediateOperand1.getValue()),Integer.parseInt(immediateOperand2.getValue()),OperandSize.DWORD);  final OperandSize dw=OperandSize.DWORD;  long baseOffset=(instruction.getAddress().toLong() * 0x100) + instructions.size();  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,registerOperand.getValue(),dw,String.valueOf(clearMask),dw,registerOperand.getValue()));}  }
class C{  public static Typeface tangerineRegular(Context context){  return FontSourceProcessor.process(R.raw.tangerine_regular,context);}  }
class C{  public boolean waitIsSwitched(){synchronized (switchLock) {    int timeout=60;    while (switching) {      try {        switchLock.wait(500);      } catch (      InterruptedException e) {        break;      }      if (timeout-- <= 0) {        if (Sage.DBG)         System.out.println("WARNING Could not find transition point after over 30 seconds!");        doSwitch(true);        break;      }    }    return !switching;  }}  }
class C{  public void captureSnapshot(){  captureSnapshot(ContextHelper.getCallerMethod() + " on ");}  }
class C{  @CanIgnoreReturnValue public Stopwatch reset(){  elapsedNanos=0;  isRunning=false;  return this;}  }
class C{  public boolean match(PrefixExpression node,Object other){  if (!(other instanceof PrefixExpression)) {    return false;  }  PrefixExpression o=(PrefixExpression)other;  return (node.getOperator().equals(o.getOperator()) && safeSubtreeMatch(node.getOperand(),o.getOperand()));}  }
class C{  protected String tokenToString(List recordList,int index,String def){  try {    Object obj=recordList.get(index);    if (obj != null) {      return obj.toString();    }  } catch (  Exception e) {  }  return def;}  }
class C{  public Element store(Object o){  Enumeration<BlockBossLogic> e=BlockBossLogic.entries();  if (!e.hasMoreElements()) {    return null;  }  Element blocks=new Element("signalelements");  blocks.setAttribute("class",this.getClass().getName());  while (e.hasMoreElements()) {    BlockBossLogic p=e.nextElement();    Element block=new Element("signalelement");    block.setAttribute("signal",p.getDrivenSignal());    block.setAttribute("mode","" + p.getMode());    if (p.getApproachSensor1() != null) {      block.setAttribute("approachsensor1",p.getApproachSensor1());    }    if (p.getSensor1() != null) {      block.addContent(storeSensor(p.getSensor1()));    }    if (p.getSensor2() != null) {      block.addContent(storeSensor(p.getSensor2()));    }    if (p.getSensor3() != null) {      block.addContent(storeSensor(p.getSensor3()));    }    if (p.getSensor4() != null) {      block.addContent(storeSensor(p.getSensor4()));    }    if (p.getSensor5() != null) {      block.addContent(storeSensor(p.getSensor5()));    }    if (p.getTurnout() != null) {      block.setAttribute("watchedturnout",p.getTurnout());    }    if (p.getWatchedSignal1() != null) {      block.setAttribute("watchedsignal1",p.getWatchedSignal1());    }    if (p.getWatchedSignal1Alt() != null) {      block.setAttribute("watchedsignal1alt",p.getWatchedSignal1Alt());    }    if (p.getWatchedSignal2() != null) {      block.setAttribute("watchedsignal2",p.getWatchedSignal2());    }    if (p.getWatchedSignal2Alt() != null) {      block.setAttribute("watchedsignal2alt",p.getWatchedSignal2Alt());    }    if (p.getWatchedSensor1() != null) {      block.setAttribute("watchedsensor1",p.getWatchedSensor1());    }    if (p.getWatchedSensor1Alt() != null) {      block.setAttribute("watchedsensor1alt",p.getWatchedSensor1Alt());    }    if (p.getWatchedSensor2() != null) {      block.setAttribute("watchedsensor2",p.getWatchedSensor2());    }    if (p.getWatchedSensor2Alt() != null) {      block.setAttribute("watchedsensor2alt",p.getWatchedSensor2Alt());    }    block.setAttribute("limitspeed1","" + p.getLimitSpeed1());    block.setAttribute("limitspeed2","" + p.getLimitSpeed2());    block.setAttribute("useflashyellow","" + p.getUseFlash());    block.setAttribute("distantsignal","" + p.getDistantSignal());    if (p.getComment() != null) {      Element c=new Element("comment");      c.addContent(p.getComment());      block.addContent(c);    }    blocks.addContent(block);  }  return blocks;}  }
class C{  public boolean hasAnnotation(String annotationTypeName){  return false;}  }
class C{  @Transactional(readOnly=true) @Cacheable(value="network_download_count",key="#user.id") public int countDownloadsByUserSince(final User user,final Long period){  Objects.requireNonNull(user,"'user' parameter is null");  Objects.requireNonNull(period,"'period' parameter is null");  long current_timestamp=System.currentTimeMillis();  if (period < 0 || period > current_timestamp) {    throw new IllegalArgumentException("period time too high");  }  Date date=new Date(current_timestamp - period);  return networkUsageDao.countDownloadByUserSince(user,date);}  }
class C{  private void displayMessage(String text,Image image){  clearFormBody();  if ((null == messageComposite) || messageComposite.isDisposed()) {    messageComposite=toolkit.createComposite(mainForm.getBody());  } else {    for (    Control c : messageComposite.getChildren()) {      if (!c.isDisposed()) {        c.dispose();      }    }  }  messageComposite.setLayout(new GridLayout(2,false));  messageComposite.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));  toolkit.createLabel(messageComposite,null).setImage(image);  toolkit.createLabel(messageComposite,text,SWT.WRAP).setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,true));  mainForm.getBody().layout();}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  public CryptoException(String message){  super(message);}  }
class C{  public static int hashCode(Object[] field){  int result=0;  for (int i=0, size=field == null ? 0 : field.length; i < size; i++) {    Object element=field[i];    if (element != null) {      result=31 * result + element.hashCode();    }  }  return result;}  }
class C{  public static Scale quartiles(){  return scale(4);}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.FULL_MEMBER_REFERENCE;}  }
class C{  public void skipSpace() throws IOException {  skipWhile(" \t\r\n");}  }
class C{  public final Enumeration elements(){  return new FastVectorEnumeration(this);}  }
class C{  public void addElementToRelation(final OsmElement e,final int pos,final String role,final Relation rel){  dirty=true;  undo.save(rel);  undo.save(e);  RelationMember newMember=new RelationMember(role,e);  rel.addMember(pos,newMember);  e.addParentRelation(rel);  rel.updateState(OsmElement.STATE_MODIFIED);  try {    apiStorage.insertElementSafe(rel);    recordImagery();  } catch (  StorageException sex) {    sex.printStackTrace();  }}  }
class C{  public static String callIdeal(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  String orderId=(String)request.getAttribute("orderId");  String issuerId=(String)request.getAttribute("issuerId");  GenericValue orderHeader=null;  List<GenericValue> orderItemList=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    orderItemList=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot get the order header for order: " + orderId,module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingOrderHeader",locale));    return "error";  }  BigDecimal orderTotal=orderHeader.getBigDecimal("grandTotal");  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (productStore == null) {    Debug.logError("ProductStore is null",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString("productStoreId"),"EXT_IDEAL",null,true);  String configString=null;  String paymentGatewayConfigId=null;  if (paymentConfig != null) {    paymentGatewayConfigId=paymentConfig.getString("paymentGatewayConfigId");    configString=paymentConfig.getString("paymentPropertiesPath");  }  if (configString == null) {    configString="payment.properties";  }  String merchantId=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantId",configString,"merchantId");  String merchantSubId=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantSubId",configString,"merchantSubId");  String merchantReturnURL=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantReturnURL",configString,"merchantReturnURL");  String acquirerURL=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"acquirerURL",configString,"acquirerURL");  String acquirerTimeout=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"acquirerTimeout",configString,"acquirerTimeout");  String privateCert=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"privateCert",configString,"privateCert");  String acquirerKeyStoreFilename=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"acquirerKeyStoreFilename",configString,"acquirerKeyStoreFilename");  String acquirerKeyStorePassword=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"acquirerKeyStorePassword",configString,"acquirerKeyStorePassword");  String merchantKeyStoreFilename=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantKeyStoreFilename",configString,"merchantKeyStoreFilename");  String merchantKeyStorePassword=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantKeyStorePassword",configString,"merchantKeyStorePassword");  String expirationPeriod=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"expirationPeriod",configString,"expirationPeriod");  if (UtilValidate.isEmpty(merchantId) || UtilValidate.isEmpty(merchantReturnURL) || UtilValidate.isEmpty(privateCert)|| UtilValidate.isEmpty(merchantKeyStoreFilename)|| UtilValidate.isEmpty(merchantKeyStoreFilename)) {    Debug.logError("Payment properties is not configured properly, some notify URL from iDEAL is not correctly defined!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  List<String> descriptionList=FastList.newInstance();  for (  GenericValue orderItem : orderItemList) {    if (UtilValidate.isNotEmpty(orderItem.get("itemDescription"))) {      descriptionList.add((String)orderItem.get("itemDescription"));    }  }  String orderDescription=StringUtil.join(descriptionList,",");  String amount=orderTotal.setScale(decimals,rounding).movePointRight(2).toPlainString();  String redirectString=null;  try {    IdealConnector connector=new IdealConnector("payment");    Transaction transaction=new Transaction();    transaction.setIssuerID(issuerId);    transaction.setAmount(amount);    transaction.setPurchaseID(orderId);    transaction.setDescription(orderDescription);    String returnURL=merchantReturnURL + "?orderId=" + orderId;    Random random=new Random();    String EntranceCode=Long.toString(Math.abs(random.nextLong()),36);    transaction.setEntranceCode(EntranceCode);    transaction.setMerchantReturnURL(returnURL);    Transaction trx=connector.requestTransaction(transaction);    redirectString=trx.getIssuerAuthenticationURL();    request.getSession().setAttribute("purchaseID",orderId);    request.getSession().setAttribute("payAmount",orderTotal.toPlainString());  } catch (  IdealException ex) {    Debug.logError(ex.getMessage(),module);    request.setAttribute("_ERROR_MESSAGE_",ex.getConsumerMessage());    return "error";  }  try {    response.sendRedirect(redirectString);  } catch (  IOException e) {    Debug.logError(e,"Problems redirecting to iDEAL",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsConnectingWithIdeal",locale));    return "error";  }  return "success";}  }
class C{  public static Pointer to(short values[]){  return new Pointer(ShortBuffer.wrap(values));}  }
class C{  @Override public void connect(){  log("Requested to connect service.");  Intent intent=new Intent(mContext,RadioPlayerService.class);  mContext.bindService(intent,mServiceConnection,Context.BIND_AUTO_CREATE);}  }
class C{  public void receivePublicKeyFrom(final Person person){  receivedPublicKey=person.getPublicKey();}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public NightModeHelper(Activity activity,int theme){  int currentMode=(activity.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK);  mPrefs=PreferenceManager.getDefaultSharedPreferences(activity);  init(activity,theme,mPrefs.getInt(PREF_KEY,currentMode));}  }
class C{  private synchronized Entity ce(){  if (clientgui != null) {    return clientgui.getClient().getGame().getEntity(cen);  } else {    return null;  }}  }
class C{  public void testSetF0(){  boolean f0=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF0(f0);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup1 needs to be implemented if invoked");}  }
class C{  public static AccountInfoCache empty(){  return EMPTY;}  }
class C{  public RestControllerProcessor(Log log,Swagger swagger,String restJavaPackage,String tagPatternTemplate,Class<?> modelErrorClass) throws MojoExecutionException {  this.log=log;  this.swagger=swagger;  this.restJavaPackage=restJavaPackage;  this.modelErrorClass=modelErrorClass;  tagPattern=Pattern.compile(tagPatternTemplate);  findAndProcessRestControllers();}  }
class C{  public OnEventNotAcceptedEvent(Object source,Message<?> event){  super(source);  this.event=event;}  }
class C{  public NLDocument(NLDocument p,String file){  super(p);  fileName=file;  addAll(new SentenceSplitter(file));}  }
class C{  public void info(Throwable throwable,String msg){  innerLog(Level.INFO,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  @PrePersist @PreUpdate protected void preUpdate(){  this.modifiedDate=new Date();  if (this.createdDate == null) {    this.createdDate=this.modifiedDate;  }}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  if (result == null) {    result=new AnimatablePercentageValue(target);  }  return super.interpolate(result,to,interpolation,accumulation,multiplier);}  }
class C{  public int addHistogramPlot(String name,double[][] XYdX){  return addHistogramPlot(name,getNewColor(),XYdX);}  }
class C{  public void sceneChanged(){  markDirty();  ScenePreferences prefs=getScenePrefs();  if (null == prefs) {    prefs=ScenePreferences.getDefaultScenePrefs();    viewInfo.setScenePrefs(prefs);  }  renderer.saveCameraPosition(prefs);  renderer.saveCameraDirection(prefs);  firePositionChanged(prefs);  fireDirectionChanged(prefs);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"clc");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a clc instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  instructions.add(ReilHelpers.createStr(baseOffset,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.CARRY_FLAG));}  }
class C{  public AdvancingFrontNode locateNode(TriangulationPoint point){  return locateNode(point.getX());}  }
class C{  public TraxSource(){  super(new InputSource());}  }
class C{  public static byte[] hexStringToByteArray(String s){  if (s == null || s.length() == 0) {    return null;  }  int len=s.length();  if (len % 2 != 0) {    throw new IllegalArgumentException();  }  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(s.charAt(i),16) << 4) + Character.digit(s.charAt(i + 1),16));  }  return data;}  }
class C{  public ByteBuffer put(byte b){  byteArray.set(position++,b);  return this;}  }
class C{  public Add(double value){  this.value=value;}  }
class C{  public int read() throws IOException {  int c=in.read();  if (c >= 0)   monitor.setProgress(++nread);  if (monitor.isCanceled()) {    InterruptedIOException exc=new InterruptedIOException("progress");    exc.bytesTransferred=nread;    throw exc;  }  return c;}  }
class C{  public byte[] finishCurrentSegment(){  _allocMore();  return _currBlock;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:00.642 -0500",hash_original_method="660AADB0BB44A0CB147F8CE16CBE33CA",hash_generated_method="FC81125965E3EF690D9FFFE6CF20E937") protected int lookup(KeyEvent event,Spannable content){  int meta=event.getMetaState() | getMetaState(content);  int number=event.getNumber();  if ((meta & (MetaKeyKeyListener.META_ALT_ON | MetaKeyKeyListener.META_SHIFT_ON)) == 0) {    if (number != 0) {      return number;    }  }  int match=super.lookup(event,content);  if (match != 0) {    return match;  } else {    if (meta != 0) {      KeyData kd=new KeyData();      char[] accepted=getAcceptedChars();      if (event.getKeyData(kd)) {        for (int i=1; i < kd.meta.length; i++) {          if (ok(accepted,kd.meta[i])) {            return kd.meta[i];          }        }      }    }    return number;  }}  }
class C{  private final int increment(int aStrength,int lastValue){switch (aStrength) {case Collator.PRIMARY:    lastValue+=PRIMARYORDERINCREMENT;  lastValue&=RBCollationTables.PRIMARYORDERMASK;isOverIgnore=true;break;case Collator.SECONDARY:lastValue+=SECONDARYORDERINCREMENT;lastValue&=RBCollationTables.SECONDARYDIFFERENCEONLY;if (!isOverIgnore) maxSecOrder++;break;case Collator.TERTIARY:lastValue+=TERTIARYORDERINCREMENT;if (!isOverIgnore) maxTerOrder++;break;}return lastValue;}  }
class C{  public Boolean isLocal(){  return local;}  }
class C{  private void dumpEvent(MotionEvent event){  String names[]={"DOWN","UP","MOVE","CANCEL","OUTSIDE","POINTER_DOWN","POINTER_UP","7?","8?","9?"};  StringBuilder sb=new StringBuilder();  int action=event.getAction();  int actionCode=action & MotionEvent.ACTION_MASK;  sb.append("event ACTION_").append(names[actionCode]);  if (actionCode == MotionEvent.ACTION_POINTER_DOWN || actionCode == MotionEvent.ACTION_POINTER_UP) {    sb.append("(pid ").append(action >> MotionEvent.ACTION_POINTER_ID_SHIFT);    sb.append(")");  }  sb.append("[");  for (int i=0; i < event.getPointerCount(); i++) {    sb.append("#").append(i);    sb.append("(pid ").append(event.getPointerId(i));    sb.append(")=").append((int)event.getX(i));    sb.append(",").append((int)event.getY(i));    if (i + 1 < event.getPointerCount())     sb.append(";");  }  sb.append("]");  Log.d("tourguide",sb.toString());}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.borderStroke=SerialUtilities.readStroke(stream);  this.borderPaint=SerialUtilities.readPaint(stream);  this.backgroundPaint=SerialUtilities.readPaint(stream);  this.progressListeners=new EventListenerList();  this.changeListeners=new EventListenerList();  this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  this.renderingHints.put(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_PURE);  if (this.title != null) {    this.title.addChangeListener(this);  }  for (int i=0; i < getSubtitleCount(); i++) {    getSubtitle(i).addChangeListener(this);  }  this.plot.addChangeListener(this);}  }
class C{  public static double distance(double v1,double h1,double v2,double h2){  double dv=v2 - v1;  double dh=h2 - h1;  return Math.sqrt((dv * dv + dh * dh) / 10.0);}  }
class C{  @Override public boolean equals(@Nullable Object object){  if (object == this) {    return true;  }  if (object instanceof InternetDomainName) {    InternetDomainName that=(InternetDomainName)object;    return this.name.equals(that.name);  }  return false;}  }
class C{  public Value evaluate(macromedia.asc.util.Context cx,TypeExpressionNode node){  throw new ExpressionEvaluatorException(ASTBuilder.getLocalizationManager().getLocalizedTextString("typeNotExpected"));}  }
class C{  public boolean isParameterizedType(){  return type instanceof ParameterizedType;}  }
class C{  public DataSerializableImpl(){  super();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  AbstractPieItemLabelGenerator clone=(AbstractPieItemLabelGenerator)super.clone();  if (this.numberFormat != null) {    clone.numberFormat=(NumberFormat)this.numberFormat.clone();  }  if (this.percentFormat != null) {    clone.percentFormat=(NumberFormat)this.percentFormat.clone();  }  return clone;}  }
class C{  private static int toVersionInt(int[] javaVersions){  if (javaVersions == null) {    return 0;  }  int intVersion=0;  int len=javaVersions.length;  if (len >= 1) {    intVersion=javaVersions[0] * 100;  }  if (len >= 2) {    intVersion+=javaVersions[1] * 10;  }  if (len >= 3) {    intVersion+=javaVersions[2];  }  return intVersion;}  }
class C{  public MutableDouble2D(final java.awt.geom.Point2D p){  x=p.getX();  y=p.getY();}  }
class C{  public ShieldFrame(byte shieldId){  this.shieldId=shieldId;  this.verificationByte=getNewVerificationByte();  this.functionId=0;  arguments=new ArrayList<>();}  }
class C{  public void invoke(final String input){  ChatLineParser.parseAndHandle(input);  sleepMillis(300);}  }
class C{  public Vertex evaluateLEARN(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack) throws Exception {  if (!checkArguments(expression,arguments,1,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex learning=arguments.get(0).getTarget();  Vertex pattern=learning.getRelationship(Primitive.PATTERN);  pattern=evaluateEVAL(pattern,arguments,variables,network,startTime,maxTime,stack);  Vertex template=learning.getRelationship(Primitive.TEMPLATE);  template=evaluateEVAL(template,arguments,variables,network,startTime,maxTime,stack);  Relationship relationship=pattern.addRelationship(Primitive.RESPONSE,template);  template.addRelationship(Primitive.QUESTION,pattern);  Vertex that=learning.getRelationship(Primitive.THAT);  if (that != null) {    that=evaluateEVAL(that,arguments,variables,network,startTime,maxTime,stack);    Vertex meta=network.createMeta(relationship);    meta.addRelationship(Primitive.PREVIOUS,that);    meta.addRelationship(Primitive.REQUIRE,Primitive.PREVIOUS);  }  Vertex topic=learning.getRelationship(Primitive.TOPIC);  if (topic != null) {    topic=evaluateEVAL(topic,arguments,variables,network,startTime,maxTime,stack);    Vertex meta=network.createMeta(relationship);    meta.addRelationship(Primitive.TOPIC,topic);    meta.addRelationship(Primitive.REQUIRE,Primitive.TOPIC);  }  network.getBot().log(this,"New response learned",Level.FINER,pattern,template,that,topic);  if (!pattern.instanceOf(Primitive.PATTERN)) {    pattern.associateAll(Primitive.WORD,pattern,Primitive.QUESTION);  } else {    Vertex state=variables.get(network.createVertex(Primitive.STATE));    if (state != null) {      List<Vertex> instructions=state.orderedRelations(Primitive.DO);      Vertex sentenceState=null;      if (instructions != null) {        for (        Vertex instruction : instructions) {          if (instruction.instanceOf(Primitive.CASE)) {            Vertex variable=instruction.getRelationship(Primitive.CASE);            if ((variable != null) && variable.isVariable() && variable.hasRelationship(Primitive.INPUT)) {              sentenceState=instruction.getRelationship(Primitive.GOTO);              break;            }          }        }      }      if (sentenceState != null) {        if (sentenceState.getNetwork() != network) {          sentenceState=network.createVertex(sentenceState);        }        Vertex child=AIMLParser.parser().createState(pattern,sentenceState,network);        Vertex equation=network.createInstance(Primitive.CASE);        equation.addRelationship(Primitive.PATTERN,pattern);        if (that != null) {          equation.addRelationship(Primitive.THAT,that);        }        if (topic != null) {          equation.addRelationship(Primitive.TOPIC,topic);        }        equation.addRelationship(Primitive.TEMPLATE,template);        child.addRelationship(Primitive.DO,equation);      }    }  }  return pattern;}  }
class C{  protected boolean expectsTimeout(){  return this.minDuration > 0 || this.maxDuration > 0;}  }
class C{  public int fetchGroup(String key){  for (int i=0; i < Cell.cellGroups.length; i++)   if (Cell.cellGroups[i].equalsIgnoreCase(key))   return i;  System.out.println("Unknown cell group: " + key);  return 0;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void terminologyCheck(String logInfo,String targetTableName,String sourceTableName,String targetTranslationName,String sourceTranslationName,ArrayList<String> joinTableNames,ArrayList<String> extraTableNames){  s_logger.log(Level.FINE,"terminologyCheck",s_logger.localizeMessage(logInfo));  String vendor=m_target.getVendor();  String catalog=m_target.getCatalog();  String schema=m_target.getSchema();  DBObject targetTableObject=m_source.getObjectByName(targetTableName,m_source.getTables());  if (targetTableObject == null) {    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"targetTableMissing",new Object[]{targetTableName});    return;  }  DBObject sourceTableObject=m_source.getObjectByName(sourceTableName,m_source.getTables());  if (sourceTableObject == null) {    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"sourceTableMissing",new Object[]{sourceTableName});    return;  }  DBObject targetTranslationObject=null;  if (targetTranslationName != null && targetTranslationName.length() > 0) {    targetTranslationObject=m_source.getObjectByName(targetTranslationName,m_source.getTables());    if (targetTranslationObject == null) {      s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"targetTranslationTableMissing",new Object[]{targetTableName});      return;    }  }  DBObject sourceTranslationObject=null;  if (targetTranslationObject != null) {    if (sourceTranslationName != null && sourceTranslationName.length() > 0) {      sourceTranslationObject=m_source.getObjectByName(sourceTranslationName,m_source.getTables());    }    if (sourceTranslationObject == null) {      sourceTranslationObject=sourceTableObject;      sourceTranslationName=sourceTableName;    }  }  ArrayList<DBObject> joinTableObjects=new ArrayList<DBObject>();  String joinTableName=null;  if (joinTableNames != null && joinTableNames.size() > 0) {    for (int i=0; i < joinTableNames.size(); i++) {      joinTableName=joinTableNames.get(i);      DBObject joinTableObject=m_source.getObjectByName(joinTableName,m_source.getTables());      if (joinTableObject != null) {        joinTableObjects.add(joinTableObject);      } else {        s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"joinTableMissing",new Object[]{targetTableName});        return;      }    }  }  ArrayList<DBObject> extraTableObjects=new ArrayList<DBObject>();  String extraTableName=null;  if (extraTableNames != null && extraTableNames.size() > 0) {    for (int i=0; i < extraTableNames.size(); i++) {      extraTableName=extraTableNames.get(i);      DBObject extraTableObject=m_source.getObjectByName(extraTableName,m_source.getTables());      if (extraTableObject != null) {        extraTableObjects.add(extraTableObject);      } else {        s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"extraTableMissing",new Object[]{targetTableName});        return;      }    }  }  ArrayList<String> linkConditions=new ArrayList<String>();  if (joinTableObjects.size() > 0) {    int index=0;    String leftTableName=null;    String rightTableName=null;    DBObject leftTableObject=null;    DBObject rightTableObject=null;    String linkedColumnName=null;    index=joinTableObjects.size() - 1;    leftTableName=targetTableName;    rightTableName=joinTableNames.get(index);    leftTableObject=targetTableObject;    rightTableObject=joinTableObjects.get(index);    linkedColumnName=new StringBuffer(rightTableName).append("_ID").toString();    if (hasTableColumn(leftTableObject,linkedColumnName) && hasTableColumn(rightTableObject,linkedColumnName))     linkConditions.add(new StringBuffer("tt.").append(linkedColumnName).append(" = tj").append(index).append(".").append(linkedColumnName).append(" ").toString());    for (index=joinTableObjects.size() - 1; index > 0; index--) {      leftTableName=joinTableNames.get(index);      rightTableName=joinTableNames.get(index - 1);      leftTableObject=joinTableObjects.get(index);      rightTableObject=joinTableObjects.get(index - 1);      linkedColumnName=new StringBuffer(rightTableName).append("_ID").toString();      if (hasTableColumn(leftTableObject,linkedColumnName) && hasTableColumn(rightTableObject,linkedColumnName))       linkConditions.add(new StringBuffer("tj").append(index).append(".").append(linkedColumnName).append(" = tj").append(index - 1).append(".").append(linkedColumnName).append(" ").toString());      if (targetTableName.equalsIgnoreCase("AD_Field") && leftTableName.equalsIgnoreCase("AD_Column")) {        if (rightTableName.equalsIgnoreCase("AD_Element")) {          linkConditions.add(new StringBuffer("tj").append(index).append(".AD_Process_ID IS NULL ").toString());        } else         if (rightTableName.equalsIgnoreCase("AD_Process")) {          linkConditions.add(new StringBuffer("tj").append(index).append(".AD_Process_ID IS NOT NULL ").toString());        }      }    }    index=0;    leftTableName=joinTableNames.get(index);    rightTableName=sourceTableName;    leftTableObject=joinTableObjects.get(index);    rightTableObject=sourceTableObject;    linkedColumnName=new StringBuffer(rightTableName).append("_ID").toString();    if (hasTableColumn(leftTableObject,linkedColumnName) && hasTableColumn(rightTableObject,linkedColumnName))     linkConditions.add(new StringBuffer("tj").append(index).append(".").append(linkedColumnName).append(" = ts.").append(linkedColumnName).append(" ").toString());    if (targetTableName.equalsIgnoreCase("AD_Field") && leftTableName.equalsIgnoreCase("AD_Column")) {      if (rightTableName.equalsIgnoreCase("AD_Element")) {        linkConditions.add(new StringBuffer("tj").append(index).append(".AD_Process_ID IS NULL ").toString());      } else       if (rightTableName.equalsIgnoreCase("AD_Process")) {        linkConditions.add(new StringBuffer("tj").append(index).append(".AD_Process_ID IS NOT NULL ").toString());      }    }  } else {    String linkedColumnName=new StringBuffer(sourceTableName).append("_ID").toString();    if (hasTableColumn(targetTableObject,linkedColumnName) && hasTableColumn(sourceTableObject,linkedColumnName))     linkConditions.add(new StringBuffer("tt.").append(linkedColumnName).append(" = ts.").append(linkedColumnName).append(" ").toString()); else {      if (targetTableName.equalsIgnoreCase("AD_Table")) {        linkConditions.add("upper(case when upper(tt.TableName) like '%_TRL' " + "then substr(tt.TableName,1,length(tt.TableName)-4) " + "else tt.TableName end)||'_ID' = upper(ts.ColumnName) ");      }    }    if (targetTableName.equalsIgnoreCase("AD_WF_Node")) {      if (sourceTableName.equalsIgnoreCase("AD_Window")) {        linkConditions.add("tt.AD_Window_ID IS NOT NULL ");      } else       if (sourceTableName.equalsIgnoreCase("AD_Form")) {        linkConditions.add("tt.AD_Form_ID IS NOT NULL ");      } else       if (sourceTableName.equalsIgnoreCase("AD_Process")) {        linkConditions.add("tt.AD_Process_ID IS NOT NULL ");      }    }    if (targetTableName.equalsIgnoreCase("AD_Menu")) {      if (sourceTableName.equalsIgnoreCase("AD_Window")) {        linkConditions.add("tt.AD_Window_ID IS NOT NULL ");        linkConditions.add("tt.Action = 'W' ");      } else       if (sourceTableName.equalsIgnoreCase("AD_Process")) {        linkConditions.add("tt.AD_Process_ID IS NOT NULL ");        linkConditions.add("tt.Action IN ('R', 'P') ");      } else       if (sourceTableName.equalsIgnoreCase("AD_Form")) {        linkConditions.add("tt.AD_Form_ID IS NOT NULL ");        linkConditions.add("tt.Action = 'X' ");      } else       if (sourceTableName.equalsIgnoreCase("AD_Workflow")) {        linkConditions.add("tt.AD_Workflow_ID IS NOT NULL ");        linkConditions.add("tt.Action = 'F' ");      } else       if (sourceTableName.equalsIgnoreCase("AD_Task")) {        linkConditions.add("tt.AD_Task_ID IS NOT NULL ");        linkConditions.add("tt.Action = 'T' ");      }    }  }  if (targetTranslationObject != null) {    String rightTableName=null;    DBObject leftTableObject=null;    DBObject rightTableObject=null;    String linkedColumnName=null;    rightTableName=targetTableName;    leftTableObject=targetTranslationObject;    rightTableObject=targetTableObject;    linkedColumnName=new StringBuffer(rightTableName).append("_ID").toString();    if (hasTableColumn(leftTableObject,linkedColumnName) && hasTableColumn(rightTableObject,linkedColumnName))     linkConditions.add(new StringBuffer("ttl.").append(linkedColumnName).append(" = tt.").append(linkedColumnName).append(" ").toString());    rightTableName=sourceTableName;    leftTableObject=sourceTranslationObject;    rightTableObject=sourceTableObject;    linkedColumnName=new StringBuffer(rightTableName).append("_ID").toString();    if (hasTableColumn(leftTableObject,linkedColumnName) && hasTableColumn(rightTableObject,linkedColumnName))     linkConditions.add(new StringBuffer("tsl.").append(linkedColumnName).append(" = ts.").append(linkedColumnName).append(" ").toString());    rightTableName=sourceTranslationName;    leftTableObject=targetTranslationObject;    rightTableObject=sourceTranslationObject;    linkedColumnName="AD_Language";    if (hasTableColumn(leftTableObject,linkedColumnName) && hasTableColumn(rightTableObject,linkedColumnName))     linkConditions.add(new StringBuffer("ttl.").append(linkedColumnName).append(" = tsl.").append(linkedColumnName).append(" ").toString());  }  String poPrefix="";  ArrayList<String> extraConditions=new ArrayList<String>();  if (extraTableObjects.size() > 0) {    int index=0;    String rightTableName=null;    DBObject leftTableObject=null;    DBObject rightTableObject=null;    String linkedColumnName=null;    index=extraTableObjects.size() - 1;    rightTableName=extraTableNames.get(index);    leftTableObject=targetTableObject;    rightTableObject=extraTableObjects.get(index);    linkedColumnName=new StringBuffer(rightTableName).append("_ID").toString();    if (hasTableColumn(leftTableObject,linkedColumnName) && hasTableColumn(rightTableObject,linkedColumnName))     extraConditions.add(new StringBuffer("tt.").append(linkedColumnName).append(" = tx").append(index).append(".").append(linkedColumnName).append(" ").toString());    if (targetTableName.equalsIgnoreCase("AD_PrintFormatItem") && rightTableName.equalsIgnoreCase("AD_Client")) {      if (sourceTableName.equalsIgnoreCase("AD_Element")) {        extraConditions.add(new StringBuffer("tx").append(index).append(".IsMultilingualDocument = 'Y' ").toString());      } else {        extraConditions.add(new StringBuffer("tx").append(index).append(".IsMultilingualDocument = 'N' ").toString());      }    }    for (index=extraTableObjects.size() - 1; index > 0; index--) {      rightTableName=extraTableNames.get(index - 1);      leftTableObject=extraTableObjects.get(index);      rightTableObject=extraTableObjects.get(index - 1);      linkedColumnName=new StringBuffer(rightTableName).append("_ID").toString();      if (hasTableColumn(leftTableObject,linkedColumnName) && hasTableColumn(rightTableObject,linkedColumnName))       extraConditions.add(new StringBuffer("tx").append(index).append(".").append(linkedColumnName).append(" = tx").append(index - 1).append(".").append(linkedColumnName).append(" ").toString()); else {        if (targetTableName.equalsIgnoreCase("AD_PrintFormatItem")) {          rightTableName=extraTableNames.get(index - 1);          leftTableObject=targetTableObject;          rightTableObject=extraTableObjects.get(index - 1);          linkedColumnName=new StringBuffer(rightTableName).append("_ID").toString();          if (hasTableColumn(leftTableObject,linkedColumnName) && hasTableColumn(rightTableObject,linkedColumnName))           extraConditions.add(new StringBuffer("tt.").append(linkedColumnName).append(" = tx").append(index - 1).append(".").append(linkedColumnName).append(" ").toString());          extraConditions.add(new StringBuffer("tx").append(index - 1).append(".IsForm = 'N' ").toString());          extraConditions.add(new StringBuffer("tx").append(index - 1).append(".IsTableBased = 'Y' ").toString());        }      }      if (targetTableName.equalsIgnoreCase("AD_Field") && rightTableName.equalsIgnoreCase("AD_Window")) {        extraConditions.add(new StringBuffer("tx").append(index - 1).append(".IsSOTrx = 'N' ").toString());        poPrefix="PO_";        if (targetTranslationObject == null) {          linkConditions.add("ts.PO_Name IS NOT NULL ");        } else {          linkConditions.add("tsl.PO_Name IS NOT NULL ");        }      }    }  }  boolean hasCentrallyMaintained=false;  ArrayList<String> updateColumns=new ArrayList<String>();  ArrayList<String> updateValues=new ArrayList<String>();  ArrayList<String> updateConditions=new ArrayList<String>();  Vector<Integer> v=new Vector<Integer>(targetTableObject.getContents().keySet());  java.util.Collections.sort(v);  for (Iterator<Integer> columnIterator=v.iterator(); columnIterator.hasNext(); ) {    Integer key=columnIterator.next();    DBObject_Table_Column targetColumnObject=(DBObject_Table_Column)targetTableObject.getContents().get(key);    String targetColumnName=targetColumnObject.getName();    if (targetColumnName.equalsIgnoreCase("IsCentrallyMaintained")) {      hasCentrallyMaintained=true;    } else     if (targetColumnName.equalsIgnoreCase("Updated")) {      if (targetTranslationObject == null || hasTableColumn(targetTranslationObject,targetColumnName)) {        updateColumns.add(targetColumnName);        updateValues.add(s_dbEngine.translateExpression("POSTGRES",vendor,"now()"));      }    } else     if ((targetColumnName.equalsIgnoreCase("Name") || targetColumnName.equalsIgnoreCase("Description") || targetColumnName.equalsIgnoreCase("Help")|| targetColumnName.equalsIgnoreCase("ColumnName")|| targetColumnName.equalsIgnoreCase("PrintName")) && hasTableColumn(sourceTableObject,targetColumnName)) {      String tt="tt";      String ts="ts";      if (targetTranslationObject == null) {        if (targetTableName.equalsIgnoreCase("AD_Table") && targetColumnName.equalsIgnoreCase("Name")) {          updateColumns.add(targetColumnName);          updateValues.add(new StringBuffer("(case when upper(tt.TableName) like '%_TRL' " + "then ").append(ts).append(".").append(poPrefix).append(targetColumnName).append("||' Trl' " + "else ").append(ts).append(".").append(poPrefix).append(targetColumnName).append(" " + "end)").toString());          updateConditions.add(new StringBuffer("coalesce(").append(tt).append(".").append(targetColumnName).append(", '') <> (coalesce(").append(ts).append(".").append(poPrefix).append(targetColumnName).append(", '')||" + "case when upper(tt.TableName) like '%_TRL' then ' Trl' else '' end) ").toString());        } else         if (targetTableName.equalsIgnoreCase("AD_PrintFormatItem") && targetColumnName.equalsIgnoreCase("Name")) {          if (!extraTableNames.contains("AD_PrintFormat")) {            updateColumns.add(targetColumnName);            updateValues.add(new StringBuffer(ts).append(".").append(poPrefix).append(targetColumnName).toString());            updateConditions.add(new StringBuffer("coalesce(").append(tt).append(".").append(targetColumnName).append(", '') <> coalesce(").append(ts).append(".").append(poPrefix).append(targetColumnName).append(", '') ").toString());          }        } else         if (targetTableName.equalsIgnoreCase("AD_PrintFormatItem") && targetColumnName.equalsIgnoreCase("PrintName")) {          if (extraTableNames.contains("AD_PrintFormat")) {            updateColumns.add(targetColumnName);            updateValues.add(new StringBuffer(ts).append(".").append(poPrefix).append(targetColumnName).toString());            updateConditions.add(new StringBuffer("coalesce(").append(tt).append(".").append(targetColumnName).append(", '') <> coalesce(").append(ts).append(".").append(poPrefix).append(targetColumnName).append(", '') ").toString());            linkConditions.add("(tt.PrintName IS NOT NULL AND length(tt.PrintName)>0) ");          }        } else {          updateColumns.add(targetColumnName);          updateValues.add(new StringBuffer(ts).append(".").append(poPrefix).append(targetColumnName).toString());          updateConditions.add(new StringBuffer("coalesce(").append(tt).append(".").append(targetColumnName).append(", '') <> coalesce(").append(ts).append(".").append(poPrefix).append(targetColumnName).append(", '') ").toString());        }      } else {        tt="ttl";        ts="tsl";        if (hasTableColumn(targetTranslationObject,targetColumnName) && hasTableColumn(sourceTranslationObject,targetColumnName)) {          if (targetTableName.equalsIgnoreCase("AD_Table") && targetColumnName.equalsIgnoreCase("Name")) {            updateColumns.add(targetColumnName);            updateValues.add(new StringBuffer("(case when upper(tt.TableName) like '%_TRL' " + "then ").append(ts).append(".").append(poPrefix).append(targetColumnName).append("||' **' " + "else ").append(ts).append(".").append(poPrefix).append(targetColumnName).append(" " + "end)").toString());            updateConditions.add(new StringBuffer("coalesce(").append(tt).append(".").append(targetColumnName).append(", '') <> (coalesce(").append(ts).append(".").append(poPrefix).append(targetColumnName).append(", '')||" + "case when upper(tt.TableName) like '%_TRL' then ' **' else '' end) ").toString());          } else           if (targetTableName.equalsIgnoreCase("AD_PrintFormatItem") && targetColumnName.equalsIgnoreCase("Name")) {            if (!extraTableNames.contains("AD_PrintFormat")) {              updateColumns.add(targetColumnName);              updateValues.add(new StringBuffer(ts).append(".").append(poPrefix).append(targetColumnName).toString());              updateConditions.add(new StringBuffer("coalesce(").append(tt).append(".").append(targetColumnName).append(", '') <> coalesce(").append(ts).append(".").append(poPrefix).append(targetColumnName).append(", '') ").toString());            }          } else           if (targetTableName.equalsIgnoreCase("AD_PrintFormatItem") && targetColumnName.equalsIgnoreCase("PrintName")) {            if (extraTableNames != null && extraTableNames.contains("AD_PrintFormat")) {              updateColumns.add(targetColumnName);              updateValues.add(new StringBuffer(ts).append(".").append(poPrefix).append(targetColumnName).toString());              updateConditions.add(new StringBuffer("coalesce(").append(tt).append(".").append(targetColumnName).append(", '') <> coalesce(").append(ts).append(".").append(poPrefix).append(targetColumnName).append(", '') ").toString());              linkConditions.add("(tt.PrintName IS NOT NULL AND length(tt.PrintName)>0) ");            } else             if (extraTableNames == null) {              updateColumns.add(targetColumnName);              updateValues.add("NULL");              updateConditions.add(new StringBuffer(tt).append(".PrintName IS NOT NULL ").toString());              linkConditions.add("(tt.PrintName IS NULL OR length(tt.PrintName)=0) ");            }          } else {            updateColumns.add(targetColumnName);            updateValues.add(new StringBuffer(ts).append(".").append(poPrefix).append(targetColumnName).toString());            updateConditions.add(new StringBuffer("coalesce(").append(tt).append(".").append(targetColumnName).append(", '') <> coalesce(").append(ts).append(".").append(poPrefix).append(targetColumnName).append(", '') ").toString());          }        }      }    }  }  if (targetTranslationObject != null) {    String targetColumnName="IsTranslated";    if (hasTableColumn(targetTranslationObject,targetColumnName) && hasTableColumn(sourceTranslationObject,targetColumnName)) {      updateColumns.add(targetColumnName);      updateValues.add(new StringBuffer("tsl.").append(targetColumnName).toString());    }  }  String sqlCommand=s_dbEngine.sqlADAction_updateTerminology(vendor,catalog,schema,targetTableName,sourceTableName,targetTranslationName,sourceTranslationName,joinTableNames,linkConditions,extraTableNames,extraConditions,hasCentrallyMaintained,updateColumns,updateValues,updateConditions);  Statement stmt=m_target.setStatement();  Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);  if (sqlResult != null) {    int records=sqlResult;    logUpdateDetail(records,null);    if (records > 0)     m_counterUpd=new Integer(m_counterUpd.intValue() + 1);  }  m_target.releaseStatement(stmt);}  }
class C{  public void startedDrawingComponent(){  drawingComponent=true;  currentArea=new Area();  originalStroke=canvasGraphics.getStroke();  originalColor=canvasGraphics.getColor();  originalTx=canvasGraphics.getTransform();  originalComposite=canvasGraphics.getComposite();  originalFont=canvasGraphics.getFont();  currentTx=new AffineTransform();  initialTx=canvasGraphics.getTransform();  lastShape=null;  startTracking();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.IDENTIFIABLE_ELEMENT__NAME:    setName(NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public Object object(){  return m_obj;}  }
class C{  public int numParameters(){  return m_numParameters;}  }
class C{  public boolean isParameterUse(){  return isParameterUse;}  }
class C{  public static <T extends Date>T lastOfDay(T ts){  checkNotNull(ts);  T cloned=(T)ts.clone();  cloned.setTime(new DateTime(ts.getTime()).withTime(0,0,0,0).plusDays(1).minusSeconds(1).getMillis());  return cloned;}  }
class C{  public BinaryRulePanel(){  super();  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  JTextField biasField=createTextField(null,null);  JTextField lowerBoundField=createTextField(null,null);  JTextField upperBoundField=createTextField(null,null);  JTextField thresholdField=createTextField(null,null);  mainTab.addItem("Threshold",thresholdField);  mainTab.addItem("On Value",upperBoundField);  mainTab.addItem("Off Value",lowerBoundField);  mainTab.addItem("Bias",biasField);  mainTab.setAlignmentX(CENTER_ALIGNMENT);  this.add(mainTab);}  }
class C{  public void deleteOneToOneFileTransfers2(ContactId contact) throws RemoteException {  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  mImService.tryToDeleteFileTransfers(contact);}  }
class C{  public void takeColumnFamilySnapshot(String keyspaceName,String columnFamilyName,String tag) throws IOException {  if (keyspaceName == null)   throw new IOException("You must supply a keyspace name");  if (operationMode == Mode.JOINING)   throw new IOException("Cannot snapshot until bootstrap completes");  if (columnFamilyName == null)   throw new IOException("You must supply a table name");  if (columnFamilyName.contains("."))   throw new IllegalArgumentException("Cannot take a snapshot of a secondary index by itself. Run snapshot on the table that owns the index.");  if (tag == null || tag.equals(""))   throw new IOException("You must supply a snapshot name.");  Keyspace keyspace=getValidKeyspace(keyspaceName);  ColumnFamilyStore columnFamilyStore=keyspace.getColumnFamilyStore(columnFamilyName);  if (columnFamilyStore.snapshotExists(tag))   throw new IOException("Snapshot " + tag + " already exists.");  columnFamilyStore.snapshot(tag);}  }
class C{  public AgentInputStream(InputStream in,ClassLoader cl) throws IOException {  super(in);  classLoader=cl;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public static String nullSafeToString(float[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public StringRegressionTest(String name){  super(name);}  }
class C{  protected void addBeanInstances(Vector<Object> list){  int i;  BeanInstance beaninst;  for (i=0; i < list.size(); i++) {    if (list.get(i) instanceof BeanInstance) {      beaninst=(BeanInstance)list.get(i);      m_BeanInstancesID.add(new Integer(m_BeanInstances.size()));      m_BeanInstances.add(beaninst);      if (beaninst.getBean() instanceof MetaBean) {        addBeanInstances(((MetaBean)beaninst.getBean()).getBeansInSubFlow());      }    } else     if (list.get(i) instanceof MetaBean) {      addBeanInstances(((MetaBean)list.get(i)).getBeansInSubFlow());    } else {      System.out.println("addBeanInstances does not support Vectors of class '" + list.get(i) + "'!");    }  }}  }
class C{  public static Start builder(){  return new RepositoryFactoryBuilder();}  }
class C{  public GVTGlyphVector createGlyphVector(FontRenderContext frc,String str){  StringCharacterIterator sci=new StringCharacterIterator(str);  return createGlyphVector(frc,sci);}  }
class C{  public boolean cgCreateStep(URI rpSystemId,List<VolumeDescriptor> volumeDescriptors,String token) throws InternalException {  RecoverPointClient rp;  CGRequestParams cgParams=null;  boolean metropoint=false;  boolean lockException=false;  try {    List<VolumeDescriptor> sourceVolumeDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_SOURCE,VolumeDescriptor.Type.RP_EXISTING_SOURCE,VolumeDescriptor.Type.RP_VPLEX_VIRT_SOURCE},new VolumeDescriptor.Type[]{});    WorkflowStepCompleter.stepExecuting(token);    ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId);    URI cgId=volumeDescriptors.iterator().next().getCapabilitiesValues().getBlockConsistencyGroup();    boolean attachAsClean=true;    for (    VolumeDescriptor sourceVolumedescriptor : sourceVolumeDescriptors) {      Volume sourceVolume=_dbClient.queryObject(Volume.class,sourceVolumedescriptor.getVolumeURI());      metropoint=RPHelper.isMetroPointVolume(_dbClient,sourceVolume);      if (VolumeDescriptor.Type.RP_EXISTING_SOURCE.equals(sourceVolumedescriptor.getType())) {        attachAsClean=false;      }    }    cgParams=getCGRequestParams(volumeDescriptors,rpSystem);    updateCGParams(cgParams);    validateCGVolumes(volumeDescriptors);    rp=RPHelper.getRecoverPointClient(rpSystem);    rp.waitForVolumesToBeVisible(cgParams);    List<String> lockKeys=new ArrayList<String>();    lockKeys.add(ControllerLockingUtil.getConsistencyGroupStorageKey(_dbClient,cgId,rpSystem.getId()));    boolean lockAcquired=_workflowService.acquireWorkflowStepLocks(token,lockKeys,LockTimeoutValue.get(LockType.RP_CG));    if (!lockAcquired) {      lockException=true;      throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),String.format("Create or add volumes to RP consistency group id: %s",cgId.toString()));    }    BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,cgId);    RecoverPointCGResponse response=null;    _log.info("Submitting RP Request: " + cgParams);    if (cg.nameExistsForStorageSystem(rpSystem.getId(),cgParams.getCgName()) && rp.doesCgExist(cgParams.getCgName())) {      _log.info("CG already exists, add replication set to existing RP CG.");      response=rp.addReplicationSetsToCG(cgParams,metropoint,attachAsClean);    } else {      _log.info("CG does not already exist, creating new RP CG.");      response=rp.createCG(cgParams,metropoint,attachAsClean);      cg=_dbClient.queryObject(BlockConsistencyGroup.class,cgParams.getCgUri());      cg.addSystemConsistencyGroup(rpSystemId.toString(),cgParams.getCgName());      cg.addConsistencyGroupTypes(Types.RP.name());      _dbClient.updateObject(cg);    }    setVolumeConsistencyGroup(volumeDescriptors,cgParams.getCgUri());    if (VolumeDescriptor.getVirtualPoolChangeVolume(volumeDescriptors) != null) {      Volume volume=_dbClient.queryObject(Volume.class,VolumeDescriptor.getVirtualPoolChangeVolume(volumeDescriptors));      URI newVpoolURI=getVirtualPoolChangeNewVirtualPool(volumeDescriptors);      volume.setVirtualPool(newVpoolURI);      volume.setPersonality(Volume.PersonalityTypes.SOURCE.toString());      volume.setAccessState(Volume.VolumeAccessState.READWRITE.name());      volume.setLinkStatus(Volume.LinkStatus.IN_SYNC.name());      volume.setProtectionController(rpSystemId);      _dbClient.updateObject(volume);      VPlexUtil.updateVPlexBackingVolumeVpools(volume,newVpoolURI,_dbClient);      AuditBlockUtil.auditBlock(_dbClient,OperationTypeEnum.CHANGE_VOLUME_VPOOL,true,AuditLogManager.AUDITOP_END,token);    }    if (response.getCgId() != null) {      List<ProtectionSet> protectionSets=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,ProtectionSet.class,AlternateIdConstraint.Factory.getConstraint(ProtectionSet.class,"protectionId",response.getCgId().toString()));      ProtectionSet protectionSet=null;      if (protectionSets.isEmpty()) {        protectionSet=createProtectionSet(rpSystem,cgParams,response.getCgId());      } else {        protectionSet=protectionSets.get(0);        protectionSet=updateProtectionSet(protectionSet,cgParams);      }      _dbClient.updateObject(protectionSet);    }    rpSystem.setCgLastCreatedTime(Calendar.getInstance());    _dbClient.updateObject(rpSystem);    WorkflowStepCompleter.stepSucceded(token);    _log.info("Collecting RP statistics post CG create.");    collectRPStatistics(rpSystem);  } catch (  Exception e) {    if (lockException) {      List<URI> volUris=VolumeDescriptor.getVolumeURIs(volumeDescriptors);      ServiceError serviceError=DeviceControllerException.errors.createVolumesAborted(volUris.toString(),e);      doFailCgCreateStep(volumeDescriptors,cgParams,rpSystemId,token);      stepFailed(token,serviceError,"cgCreateStep");    } else {      doFailCgCreateStep(volumeDescriptors,cgParams,rpSystemId,token);      stepFailed(token,e,"cgCreateStep");    }    return false;  }  return true;}  }
class C{  public ViewCSS createViewCSS(AbstractStylableDocument doc){  return new CSSOMSVGViewCSS(doc.getCSSEngine());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_PARAMETER_1__LIST_1:    return list_1 != LIST_1_EDEFAULT;case UmplePackage.ANONYMOUS_PARAMETER_1__NAME_1:  return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.ANONYMOUS_PARAMETER_1__TYPE_1:return TYPE_1_EDEFAULT == null ? type_1 != null : !TYPE_1_EDEFAULT.equals(type_1);}return super.eIsSet(featureID);}  }
class C{  public FlatRegionVisitor(final FlatRegion flatRegion,final FlatRegionFunction function){  checkNotNull(flatRegion);  checkNotNull(function);  this.function=function;  this.iterator=flatRegion.asFlatRegion();}  }
class C{  public CTabbedPane(int tabPlacement,int tabLayoutPolicy){  super(tabPlacement,tabLayoutPolicy);  init();}  }
class C{  public FilteredRowManager(Table table){  super(table);  m_childToParent=new IntColumn(table.getRowCount());  m_parentToChild=new IntIntTreeMap(false);  clear();}  }
class C{  public static double toDegrees(double x){  if (Double.isInfinite(x) || x == 0.0) {    return x;  }  final double facta=57.2957763671875;  final double factb=3.145894820876798E-6;  double xa=doubleHighPart(x);  double xb=x - xa;  return xb * factb + xb * facta + xa * factb + xa * facta;}  }
class C{  public Schema(String[] names,Class[] types){  this(names.length);  if (names.length != types.length) {    throw new IllegalArgumentException("Input arrays should be the same length");  }  for (int i=0; i < names.length; ++i) {    addColumn(names[i],types[i],null);  }}  }
class C{  public ImportanceTransferTransaction(final DeserializationOptions options,final Deserializer deserializer){  super(TransactionTypes.IMPORTANCE_TRANSFER,options,deserializer);  this.mode=ImportanceTransferMode.fromValueOrDefault(deserializer.readInt("mode"));  this.remoteAccount=Account.readFrom(deserializer,"remoteAccount",AddressEncoding.PUBLIC_KEY);  if (!this.mode.isValid()) {    throw new TypeMismatchException("mode");  }}  }
class C{  public static List<INaviProject> loadProjects(final AbstractSQLProvider provider,final DebuggerTemplateManager debuggerManager) throws CouldntLoadDataException {  PostgreSQLDatabaseFunctions.checkArguments(provider,debuggerManager);  final CConnection connection=provider.getConnection();  final List<INaviProject> projects=new ArrayList<>();  if (!PostgreSQLHelpers.hasTable(connection,CTableNames.PROJECTS_TABLE)) {    return projects;  }  String query="SELECT id, name, description, creation_date, modification_date, " + " (SELECT count(*) FROM " + CTableNames.ADDRESS_SPACES_TABLE + " WHERE project_id = "+ CTableNames.PROJECTS_TABLE+ ".id) "+ " AS addressspace_count FROM "+ CTableNames.PROJECTS_TABLE;  try (ResultSet resultSet=connection.executeQuery(query,true)){    while (resultSet.next()) {      final int projectId=resultSet.getInt("id");      final String name=PostgreSQLHelpers.readString(resultSet,"name");      final String description=PostgreSQLHelpers.readString(resultSet,"description");      final int addressSpaceCount=resultSet.getInt("addressspace_count");      final Timestamp creationDate=resultSet.getTimestamp("creation_date");      final Timestamp modificationDate=resultSet.getTimestamp("modification_date");      final List<DebuggerTemplate> debuggers=PostgreSQLDatabaseFunctions.getAssignedDebuggers(connection,projectId,debuggerManager);      projects.add(new CProject(projectId,name,description == null ? "" : description,creationDate,modificationDate,addressSpaceCount,debuggers,provider));    }  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }  return new ArrayList<INaviProject>(projects);}  }
class C{  public static boolean isUnconditionalJump(final ReilInstruction instruction){  Preconditions.checkNotNull(instruction,"Instruction argument can not be null");  return com.google.security.zynamics.reil.ReilHelpers.isUnconditionalJump(instruction.getNative());}  }
class C{  protected ServiceHost initialize(String[] args,Arguments hostArgs) throws Throwable {  CommandLineArgumentParser.parse(hostArgs,args);  CommandLineArgumentParser.parse(COLOR_LOG_FORMATTER,args);  initialize(hostArgs);  setProcessOwner(true);  return this;}  }
class C{  protected static int[] updateXY(final int originalX,final int originalY,final PdfDecoderInt decode_pdf,final Values commonValues){  final PdfPageData page_data=decode_pdf.getPdfPageData();  final int mediaW=page_data.getMediaBoxWidth(commonValues.getCurrentPage());  final int mediaH=page_data.getMediaBoxHeight(commonValues.getCurrentPage());  final int cropX=page_data.getCropBoxX(commonValues.getCurrentPage());  final int cropY=page_data.getCropBoxY(commonValues.getCurrentPage());  final int cropW=page_data.getCropBoxWidth(commonValues.getCurrentPage());  final int cropH=page_data.getCropBoxHeight(commonValues.getCurrentPage());  final float scaling=page_data.getScalingValue();  final int rotation=page_data.getRotation(commonValues.getCurrentPage());  final int inset=GUI.getPDFDisplayInset();  int x=(int)(((adjustForAlignment(originalX,decode_pdf)) - inset) / scaling);  int y=(int)((originalY - inset) / scaling);  if (commonValues.maxViewY != 0) {    x=(int)(((x - (commonValues.dx * scaling)) / commonValues.viewportScale));    y=(int)((mediaH - ((mediaH - (y / scaling) - commonValues.dy) / commonValues.viewportScale)) * scaling);  }  final int[] ret=new int[2];switch (rotation) {case 90:    ret[1]=x + cropY;  ret[0]=y + cropX;break;case 180:ret[0]=mediaW - (x + mediaW - cropW - cropX);ret[1]=y + cropY;break;case 270:ret[1]=mediaH - (x + mediaH - cropH - cropY);ret[0]=mediaW - (y + mediaW - cropW - cropX);break;default :ret[0]=x + cropX;ret[1]=mediaH - (y + mediaH - cropH - cropY);break;}return ret;}  }
class C{  @UiHandler("secondChoiceButton") public void handleSecondChoiceClick(final ClickEvent event){  this.actionDelegate.secondChoiceClicked();}  }
class C{  private SocketChannel openChannel(final InetSocketAddress addr) throws IOException {  final SocketChannel socketChannel=SocketChannel.open();  try {    socketChannel.configureBlocking(blocking);    if (log.isTraceEnabled())     log.trace("Connecting to " + addr);    if (!socketChannel.connect(addr)) {      while (!socketChannel.finishConnect()) {        try {          Thread.sleep(10);        } catch (        InterruptedException e) {          Thread.currentThread().interrupt();        }      }    }  } catch (  IOException ex) {    log.error(ex);    throw ex;  }  return socketChannel;}  }
class C{  public boolean checkQuotient(Vertex currentState,Vertex sentence,Vertex questionInput,Vertex responseInput,PathType path,Map<Vertex,Vertex> variables,Network network){  Collection<Relationship> quotients=currentState.getRelationships(Primitive.QUOTIENT);  Vertex previousQuestionInput=questionInput.getRelationship(Primitive.QUESTION);  if (quotients != null) {    for (    Relationship quotient : quotients) {      if (isStopped()) {        return false;      }      Vertex quotientSentence=quotient.getTarget().getRelationship(Primitive.SENTENCE);      if ((quotientSentence != null) && (quotientSentence == sentence)) {        log("Existing quotient",Level.FINER,currentState,quotientSentence);        Relationship relationship=currentState.addRelationship(Primitive.QUOTIENT,quotient.getTarget());        addSentencePreviousMeta(relationship,questionInput,previousQuestionInput,variables,network);        return true;      }    }  }  if (isStopped()) {    return false;  }  Vertex newQuotient=createTemplate(questionInput,responseInput,variables,network);  if (newQuotient == null) {    newQuotient=sentence;  } else {    Relationship quotient=currentState.getRelationship(Primitive.QUOTIENT,newQuotient);    if (quotient != null) {      log("Existing quotient template",Level.FINER,currentState,quotient.getTarget());      Relationship relationship=currentState.addRelationship(Primitive.QUOTIENT,quotient.getTarget());      addSentencePreviousMeta(relationship,questionInput,previousQuestionInput,variables,network);      return true;    }  }  if (isStopped()) {    return false;  }  if ((path == PathType.Verb) || (path == PathType.Classification)) {    Vertex question=questionInput.getRelationship(Primitive.INPUT);    Relationship quotient=currentState.getRelationship(Primitive.POSSIBLE_QUOTIENT,newQuotient);    if (quotient != null) {      if (!quotient.getMeta().hasRelationship(Primitive.SENTENCE,question)) {        currentState.addRelationship(Primitive.QUOTIENT,newQuotient);        currentState.internalRemoveRelationship(quotient);        log("Adding new generic quotient",Bot.FINE,currentState,newQuotient,question);        return false;      } else {        log("Generic quotient already defined for sentence",Level.FINER,currentState,newQuotient,question);      }    } else {      Relationship relationship=currentState.addRelationship(Primitive.POSSIBLE_QUOTIENT,newQuotient);      Vertex meta=network.createMeta(relationship);      meta.addRelationship(Primitive.SENTENCE,question);      log("Adding new possible quotient",Level.FINE,currentState,newQuotient);    }    return false;  }  Relationship relationship=currentState.addRelationship(Primitive.QUOTIENT,newQuotient);  addSentencePreviousMeta(relationship,questionInput,previousQuestionInput,variables,network);  log("Adding new quotient",Level.FINE,currentState,newQuotient);  return false;}  }
class C{  public void unlock(long stamp){  long a=stamp & ABITS, m, s;  WNode h;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L)     break; else     if (m == WBIT) {      if (a != m)       break;      state=(s+=WBIT) == 0L ? ORIGIN : s;      if ((h=whead) != null && h.status != 0)       release(h);      return;    } else     if (a == 0L || a >= WBIT)     break; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return;      }    } else     if (tryDecReaderOverflow(s) != 0L)     return;  }  throw new IllegalMonitorStateException();}  }
class C{  public Matrix zoomIn(float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(1.4f,1.4f,x,y);  return save;}  }
class C{  public static void showReal_1D(String format,double[] x,String title){  System.out.println(title);  System.out.println("-------------------");  for (int j=0; j < x.length; j++) {    System.out.println(String.format(format,x[j]));  }  System.out.println();}  }
class C{  public static void deleteFilesInDirectory(final File directory,final FilenameFilter filter,final Logger logger,final boolean recurse) throws IOException {  FileUtils.deleteFilesInDirectory(directory,filter,logger,recurse,false);}  }
class C{  public boolean exceptionOccurred(){  return this.exceptionOccurred;}  }
class C{  private void validateVolumeLunIdParam(List<VolumeParam> volumes){  int numDeviceNumbers=0;  int volumeListSize=0;  if (volumes != null && !volumes.isEmpty()) {    volumeListSize=volumes.size();    for (    VolumeParam volParam : volumes) {      if (volParam.getLun() != ExportGroup.LUN_UNASSIGNED) {        numDeviceNumbers++;      }    }  }  if (numDeviceNumbers != 0 && numDeviceNumbers != volumeListSize) {    throw APIException.badRequests.invalidVolumeParamsAllOrNoneShouldSpecifyLun(volumes);  }}  }
class C{  public static List<Statement> basicEntity(WikibaseUris uris,String id){  Literal version=new LiteralImpl("a revision number I promise");  List<Statement> statements=new ArrayList<>();  String entityDataUri=uris.entityData() + id;  statement(statements,entityDataUri,SchemaDotOrg.ABOUT,id);  statement(statements,entityDataUri,SchemaDotOrg.VERSION,version);  statement(statements,entityDataUri,SchemaDotOrg.DATE_MODIFIED,new LiteralImpl("a date I promise"));  return statements;}  }
class C{  private static void registerEntity(Class<? extends Entity> entityClass,String entityName,int trackingRange,int updateFrequency,boolean sendsVelocityUpdates){  EntityRegistry.registerModEntity(entityClass,entityName,entityID++,TestMod3.instance,trackingRange,updateFrequency,sendsVelocityUpdates);}  }
class C{  protected boolean isWFXMLChar(String chardata,Character refInvalidChar){  if (chardata == null || (chardata.length() == 0)) {    return true;  }  char[] dataarray=chardata.toCharArray();  int datalength=dataarray.length;  if (fIsXMLVersion11) {    int i=0;    while (i < datalength) {      if (XML11Char.isXML11Invalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return false;      }    }  } else {    int i=0;    while (i < datalength) {      if (XMLChar.isInvalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return false;      }    }  }  return true;}  }
class C{  public static PhysicsState reset(){  instance=new PhysicsState();  return instance;}  }
class C{  public static void addAlignmentButtonsTo(JToolBar bar,final DrawingEditor editor,java.util.List<Disposable> dsp){  AbstractSelectedAction d;  bar.add(d=new AlignAction.West(editor)).setFocusable(false);  dsp.add(d);  bar.add(d=new AlignAction.East(editor)).setFocusable(false);  dsp.add(d);  bar.add(d=new AlignAction.Horizontal(editor)).setFocusable(false);  dsp.add(d);  bar.add(d=new AlignAction.North(editor)).setFocusable(false);  dsp.add(d);  bar.add(d=new AlignAction.South(editor)).setFocusable(false);  dsp.add(d);  bar.add(d=new AlignAction.Vertical(editor)).setFocusable(false);  dsp.add(d);  bar.addSeparator();  bar.add(d=new MoveAction.West(editor)).setFocusable(false);  dsp.add(d);  bar.add(d=new MoveAction.East(editor)).setFocusable(false);  dsp.add(d);  bar.add(d=new MoveAction.North(editor)).setFocusable(false);  dsp.add(d);  bar.add(d=new MoveAction.South(editor)).setFocusable(false);  dsp.add(d);  bar.addSeparator();  bar.add(new BringToFrontAction(editor)).setFocusable(false);  dsp.add(d);  bar.add(new SendToBackAction(editor)).setFocusable(false);  dsp.add(d);}  }
class C{  private static RsJson createErrorJson() throws IOException {  final String message="message";  return new RsJson(Json.createObjectBuilder().add("error",Json.createObjectBuilder().add("errors",Json.createArrayBuilder().add(Json.createObjectBuilder().add("domain","usageLimits").add("reason","accessNotConfigured").add("extendedHelp","https://developers.google.com"))).add(PsGoogleTest.CODE,HttpURLConnection.HTTP_BAD_REQUEST).add(message,"Access Not Configured.")).build());}  }
class C{  public boolean isRegistered(ForeignCallDescriptor descriptor){  return foreignCalls.containsKey(descriptor);}  }
class C{  public MDIApplication(){}  }
class C{  public void parsePositions(String prefix,Properties props){  prefix=PropUtils.getScopedPropertyPrefix(prefix);  for (int index=1; index > 0 && index < 128; index++) {    String entry=props.getProperty(prefix + Integer.toString(index));    if (entry != null) {      addPositionChoice(index,entry,prefix,props);    } else {      index=-1;    }  }}  }
class C{  protected void initInfo(int record_id,String value){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {      fDocumentNo.setValue(value);    } else {      String id;      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"M_InOut_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))       fBPartner_ID.setValue(new Integer(id));      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"M_Shipper_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fShipper_ID.setValue(new Integer(id).intValue());      }    }  }  return;}  }
class C{  public void online(TungstenProperties params) throws Exception {  runScript(CMD_ONLINE);  context.getEventDispatcher().put(new InSequenceNotification());}  }
class C{  public T caseS_Action(S_Action object){  return null;}  }
class C{  protected void printIdentifier(String identifier,StringBuilder ddl){  ddl.append(getDelimitedIdentifier(identifier));}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public static String[] concatenate(String[] array1,String[] array2){  if (array1 == null) {    return array2;  }  if (array2 == null) {    return array1;  }  String[] result=new String[array1.length + array2.length];  System.arraycopy(array1,0,result,0,array1.length);  System.arraycopy(array2,0,result,array1.length,array2.length);  return result;}  }
class C{  public SpanQuery sor(String s,String m,String e){  return spanOrQuery(FIELD,s,m,e);}  }
class C{  public boolean isEmpty(){  return listeners.length == 0;}  }
class C{  public void encodeBuffer(ByteBuffer aBuffer,OutputStream aStream) throws IOException {  byte[] buf=getBytes(aBuffer);  encodeBuffer(buf,aStream);}  }
class C{  public boolean remove(Object child){  return remove(child,true);}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof byte[])) {    throw new EncoderException("Parameter supplied to Base64 encode is not a byte[]");  }  return encode((byte[])pObject);}  }
class C{  public boolean isValueExistForKey(String key){  boolean isValueExists;  try {    String string=getString(key,"");    isValueExists=!string.equalsIgnoreCase("");  } catch (  ClassCastException e) {    try {      int anInt=getInt(key,0);      isValueExists=anInt != 0;    } catch (    ClassCastException e1) {      try {        long aLong=getLong(key,0);        isValueExists=aLong != 0;      } catch (      ClassCastException e2) {        try {          float aFloat=getFloat(key,0f);          isValueExists=aFloat != 0;        } catch (        ClassCastException e3) {          try {            boolean aBoolean=getBoolean(key,false);            isValueExists=!aBoolean;          } catch (          Exception e4) {            isValueExists=false;            e.printStackTrace();          }        }      }    }  }catch (  Exception e) {    isValueExists=false;  }  return isValueExists;}  }
class C{  public boolean isEmpty(){  return firstInstruction == null;}  }
class C{  protected boolean isPrimitiveWrapperClass(MetadataClass cls){  return cls.extendsClass(Number.class) || cls.equals(Boolean.class) || cls.equals(Character.class)|| cls.equals(String.class)|| cls.extendsClass(java.math.BigInteger.class)|| cls.extendsClass(java.math.BigDecimal.class)|| cls.extendsClass(java.util.Date.class)|| cls.extendsClass(java.util.Calendar.class);}  }
class C{  public void finishState(){  if (curState != -1) {    finishCurrentState();    curState=-1;  }}  }
class C{  protected void startProcessor(){  thread=Thread.currentThread();  pool=Executors.newFixedThreadPool(threadCount);  for (int i=0; i < threadCount; i++) {    pool.execute(new OrderProcessor());  }}  }
class C{  public static Unit transportedBy(final Unit unit){  return ((TripleAUnit)unit).getTransportedBy();}  }
class C{  public AffineTransformationBuilder(Coordinate src0,Coordinate src1,Coordinate src2,Coordinate dest0,Coordinate dest1,Coordinate dest2){  this.src0=src0;  this.src1=src1;  this.src2=src2;  this.dest0=dest0;  this.dest1=dest1;  this.dest2=dest2;}  }
class C{  @Override public boolean hasImproved(TestChromosome testCase){  return hasChanged(testCase) < 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void buildBootstrapMap(int numberOfChains,int numberToSample,Random random){  LOG.info("Building a bootstrap map of " + numberOfChains + " integers.");  chainMap=new TreeMap<Integer,Integer>();  for (int i=0; i < numberToSample; i++) {    Integer value=Integer.valueOf(random.nextInt(numberOfChains));    if (!chainMap.containsKey(value)) {      chainMap.put(Integer.valueOf(value),1);    } else {      int oldValue=chainMap.get(value);      chainMap.put(value,oldValue + 1);    }  }  printBootstrapMap();  LOG.info("Done building bootstrap map.");}  }
class C{  private boolean equalsNull(String c1,String c2){  if (c1 == null)   c1="";  if (c2 == null)   c2="";  return c1.equalsIgnoreCase(c2);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.098 -0500",hash_original_method="39B79927E64E599404174E0314CB7C82",hash_generated_method="14898573EFB01349EBEEEB94E8FF6811") private void readDoctype(boolean saveDtdText) throws IOException, XmlPullParserException {  read(START_DOCTYPE);  int startPosition=-1;  if (saveDtdText) {    bufferCapture=new StringBuilder();    startPosition=position;  }  try {    skip();    rootElementName=readName();    readExternalId(true,true);    skip();    if (peekCharacter() == '[') {      readInternalSubset();    }    skip();  }  finally {    if (saveDtdText) {      bufferCapture.append(buffer,0,position);      bufferCapture.delete(0,startPosition);      text=bufferCapture.toString();      bufferCapture=null;    }  }  read('>');}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ModifiableElement.class) {switch (baseFeatureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:      return N4JSPackage.FUNCTION_DECLARATION__DECLARED_MODIFIERS;default :    return -1;}}if (baseClass == Statement.class) {switch (baseFeatureID) {default :  return -1;}}if (baseClass == VariableEnvironmentElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == ThisArgProvider.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == FunctionOrFieldAccessor.class) {switch (baseFeatureID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY:return N4JSPackage.FUNCTION_DECLARATION__BODY;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK:return N4JSPackage.FUNCTION_DECLARATION__LOK;default :return -1;}}if (baseClass == TypeDefiningElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:return N4JSPackage.FUNCTION_DECLARATION__DEFINED_TYPE;default :return -1;}}if (baseClass == FunctionDefinition.class) {switch (baseFeatureID) {case N4JSPackage.FUNCTION_DEFINITION__FPARS:return N4JSPackage.FUNCTION_DECLARATION__FPARS;case N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF:return N4JSPackage.FUNCTION_DECLARATION__RETURN_TYPE_REF;case N4JSPackage.FUNCTION_DEFINITION__GENERATOR:return N4JSPackage.FUNCTION_DECLARATION__GENERATOR;case N4JSPackage.FUNCTION_DEFINITION__DECLARED_ASYNC:return N4JSPackage.FUNCTION_DECLARATION__DECLARED_ASYNC;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:return N4JSPackage.FUNCTION_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == ExportableElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:40.647 -0500",hash_original_method="40EC9D6AF0E3564A5C6CD681E96DEE48",hash_generated_method="DEF1BD49A4BA49D733C760E1419668C9") public Item(CharSequence text,Intent intent,Uri uri){  mText=text;  mIntent=intent;  mUri=uri;}  }
class C{  public Type1CFont(String baseFont,PDFObject src,PDFFontDescriptor descriptor) throws IOException {  super(baseFont,src,descriptor);  if (!PDFFont.sUseFontSubstitution) {    PDFObject dataObj=descriptor.getFontFile3();    data=dataObj.getStream();  }  pos=0;  if (!PDFFont.sUseFontSubstitution) {    parse();  }}  }
class C{  public void testSendSmallReceiveBuffer(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setRemoteOptRcvBuf(10000);  test.setLocalOptRcvBuf(10000);  test.doTestTransfer(1000000);}  }
class C{  private static String appendIfMissing(final String str,final CharSequence suffix,final boolean ignoreCase,final CharSequence... suffixes){  if (str == null || isEmpty(suffix) || endsWith(str,suffix,ignoreCase)) {    return str;  }  if (suffixes != null && suffixes.length > 0) {    for (    final CharSequence s : suffixes) {      if (endsWith(str,s,ignoreCase)) {        return str;      }    }  }  return str + suffix.toString();}  }
class C{  public static boolean isWin(String[][] m,String t){  return isHorizontalWin(m,t) || isVerticalWin(m,t) || isDiagonalWin(m,t);}  }
class C{  public SystemProperties(){}  }
class C{  public JBBPOut Skip(int numberOfBytes) throws IOException {  assertNotEnded();  if (this.processCommands) {    if (numberOfBytes < 0) {      throw new IllegalArgumentException("Value is negative");    }    this.Align();    while (numberOfBytes > 0) {      this.outStream.write(0);      numberOfBytes--;    }  }  return this;}  }
class C{  public void receiveReInvite(SipRequest reInvite) throws PayloadException, NetworkException {  if (mLogger.isActivated()) {    mLogger.debug("Session refresh request received");  }  mLastSessionRefresh=System.currentTimeMillis();  if (mLogger.isActivated()) {    mLogger.debug("Send 200 OK");  }  SipResponse resp=SipMessageFactory.create200OkReInviteResponse(mSession.getDialogPath(),reInvite);  mSession.getDialogPath().setSigEstablished();  SipTransactionContext ctx=mSession.getImsService().getImsModule().getSipManager().sendSipMessageAndWait(resp);  if (ctx.isSipAck()) {    if (mLogger.isActivated()) {      mLogger.info("ACK request received");    }    mSession.getDialogPath().setSessionEstablished();  } else {    throw new PayloadException(new StringBuilder("No ACK received for INVITE with sessionId: ").append(mSession.getId()).toString());  }}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  protected void addElementRefPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_GeneratorEntry_elementRef_feature"),getString("_UI_PropertyDescriptor_description","_UI_GeneratorEntry_elementRef_feature","_UI_GeneratorEntry_type"),SGenPackage.Literals.GENERATOR_ENTRY__ELEMENT_REF,true,false,true,null,null,null));}  }
class C{  public EntryIterableBuilder findRows(Object[] fromRow){  toEntryValues(fromRow);  return _toCursor.newEntryIterable(_entryValues);}  }
class C{  @Override public void onClick(View v){  boolean on=((Switch)v).isChecked();  if (on) {    startAdvertising();  } else {    stopAdvertising();  }}  }
class C{  private static void handlePossibleJump(ClusterIpInfo newIpinfo,String node_id,int node_count) throws Exception {  Integer node_id_number=Integer.valueOf(node_id.split("vipr")[1]);  boolean bIpv4=true;  if (newIpinfo.getIpv4Setting().getNetworkNetmask().equals(PropertyConstants.IPV4_ADDR_DEFAULT)) {    bIpv4=false;  }  log.info("Checking if new IPs had already been commited...");  for (int i=1; i < 24; i++) {    log.info("Trying to ping other nodes ...");    int alivenodes=0;    for (    String network_addr : newIpinfo.getIpv4Setting().getNetworkAddrs()) {      if (ping(network_addr,bIpv4) == 0) {        alivenodes++;      }    }    alivenodes--;    if (alivenodes > node_count / 2) {      log.info("new IPs have been commited in quorum nodes of the cluster, so committing it in local node...");      applyIpinfo(newIpinfo,node_id,node_count,true);      return;    }    Thread.sleep(5 * 1000);  }  log.info("New IPs seems have NOT been commited in quorum nodes of the cluster, so still using current IPs.");  return;}  }
class C{  private void calculateKnn(){  for (  int p0 : points) {    CMMPoint cmdp=cmmpoints.get(p0);    if (!cmdp.isNoise()) {      AutoExpandVector<Double> knnDist=new AutoExpandVector<Double>();      AutoExpandVector<Integer> knnPointIndex=new AutoExpandVector<Integer>();      getKnnInCluster(cmdp,knnNeighbourhood,points,knnDist,knnPointIndex);      double avgKnn=0;      for (int i=0; i < knnDist.size(); i++) {        avgKnn+=knnDist.get(i);      }      if (knnDist.size() != 0)       avgKnn/=knnDist.size();      cmdp.knnInCluster=avgKnn;      cmdp.knnIndices=knnPointIndex;      cmdp.p.setMeasureValue("knnAvg",cmdp.knnInCluster);      knnMeanAvg+=avgKnn;      knnDevAvg+=Math.pow(avgKnn,2);    }  }  knnMeanAvg=knnMeanAvg / (double)points.size();  knnDevAvg=knnDevAvg / (double)points.size();  double variance=knnDevAvg - Math.pow(knnMeanAvg,2.0);  if (variance <= 0.0)   variance=1e-50;  knnDevAvg=Math.sqrt(variance);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static byte[] toByteArray(int[] data){  byte[] tmp, result=new byte[data.length * 4];  for (int i=0; i < data.length; i++) {    tmp=toBytes(data[i]);    System.arraycopy(tmp,0,result,i * 4,4);  }  return result;}  }
class C{  static public MPrintFormat createFromReportView(Properties ctx,int AD_ReportView_ID,String ReportName){  int AD_Client_ID=Env.getAD_Client_ID(ctx);  s_log.info("AD_ReportView_ID=" + AD_ReportView_ID + " - AD_Client_ID="+ AD_Client_ID+ " - "+ ReportName);  MPrintFormat pf=new MPrintFormat(ctx,0,null);  pf.setAD_ReportView_ID(AD_ReportView_ID);  String sql="SELECT t.TableName," + " (SELECT COUNT(*) FROM AD_PrintFormat x WHERE x.AD_ReportView_ID=rv.AD_ReportView_ID AND x.AD_Client_ID=c.AD_Client_ID) AS Count," + " COALESCE (cpc.AD_PrintColor_ID, pc.AD_PrintColor_ID) AS AD_PrintColor_ID,"+ " COALESCE (cpf.AD_PrintFont_ID, pf.AD_PrintFont_ID) AS AD_PrintFont_ID,"+ " COALESCE (cpp.AD_PrintPaper_ID, pp.AD_PrintPaper_ID) AS AD_PrintPaper_ID,"+ " t.AD_Table_ID "+ "FROM AD_ReportView rv"+ " INNER JOIN AD_Table t ON (rv.AD_Table_ID=t.AD_Table_ID),"+ " AD_Client c"+ " LEFT OUTER JOIN AD_PrintColor cpc ON (cpc.AD_Client_ID=c.AD_Client_ID AND cpc.IsDefault='Y')"+ " LEFT OUTER JOIN AD_PrintFont cpf ON (cpf.AD_Client_ID=c.AD_Client_ID AND cpf.IsDefault='Y')"+ " LEFT OUTER JOIN AD_PrintPaper cpp ON (cpp.AD_Client_ID=c.AD_Client_ID AND cpp.IsDefault='Y'),"+ " AD_PrintColor pc, AD_PrintFont pf, AD_PrintPaper pp "+ "WHERE rv.AD_ReportView_ID=? AND c.AD_Client_ID=?"+ " AND pc.IsDefault='Y' AND pf.IsDefault='Y' AND pp.IsDefault='Y'";  PreparedStatement pstmt=null;  ResultSet rs=null;  boolean error=true;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_ReportView_ID);    pstmt.setInt(2,AD_Client_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      String name=ReportName;      if (name == null || name.length() == 0)       name=rs.getString(1);      int count=rs.getInt(2);      if (count > 0)       name+="_" + count;      pf.setName(name);      pf.setAD_PrintColor_ID(rs.getInt(3));      pf.setAD_PrintFont_ID(rs.getInt(4));      pf.setAD_PrintPaper_ID(rs.getInt(5));      pf.setAD_Table_ID(rs.getInt(6));      error=false;    } else     s_log.log(Level.SEVERE,"Not found: AD_ReportView_ID=" + AD_ReportView_ID);  } catch (  SQLException e) {    s_log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (error)   return null;  if (!pf.save())   return null;  pf.setItems(createItems(ctx,pf));  return pf;}  }
class C{  @Override public void initialize(Context context){  _getFunctions();}  }
class C{  static final J3dPolar directionTo(IMovingAgent agent1,IMovingAgent agent2){  return J3dPolar.createFrom(agent1.getLocation(),agent2.getLocation());}  }
class C{  @Override public V remove(Object key){  int hash=hash(key);  return segmentFor(hash).r(key,hash,null);}  }
class C{  public Point3d toCartesian(){  double cosElevation=Math.cos(elevation);  double x=radius * Math.cos(azimuth) * cosElevation;  double y=radius * Math.sin(azimuth) * cosElevation;  double z=radius * Math.sin(elevation);  return new Point3d(x,y,z);}  }
class C{  public static FSize calcTextSize(Paint paint,String demoText){  Rect r=new Rect();  paint.getTextBounds(demoText,0,demoText.length(),r);  return new FSize(r.width(),r.height());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public long __long__(){  return m_value.longValue();}  }
class C{  public static boolean sameSign(IntegerStamp s1,IntegerStamp s2){  return s1.isPositive() && s2.isPositive() || s1.isStrictlyNegative() && s2.isStrictlyNegative();}  }
class C{  private static void copyFile(final File directory,final String file) throws FileNotFoundException, IOException {  final InputStream inFile=CMain.class.getResourceAsStream("exporters/BinExport/" + file);  final FileOutputStream outFile=new FileOutputStream(directory.getAbsolutePath() + "/plugins/" + file);  ByteStreams.copy(inFile,outFile);  inFile.close();  outFile.close();}  }
class C{  protected String generatePassword(String tenantId){  String response=httpRequest.getParameter("SAMLResponse");  String requestId=getRequestId();  if (ADMStringUtils.isBlank(response) || ADMStringUtils.isBlank(requestId)) {    return null;  }  String password="";  try {    String decodedSamlResponse=new String(getSAMLResponse().decode(response));    password="UI" + requestId + tenantId+ decodedSamlResponse;  } catch (  UnsupportedEncodingException e) {    getLogger().logError(LogMessageIdentifier.ERROR_DECODE_SAML_RESPONSE_FAILED,response);  }  return password;}  }
class C{  void messageReceived(NextFilter nextFilter,ByteBuffer buf) throws SSLException {  if (LOGGER.isDebugEnabled()) {    if (!isOutboundDone()) {      LOGGER.debug("{} Processing the received message",sslFilter.getSessionInfo(session));    } else {      LOGGER.debug("{} Processing the received message",sslFilter.getSessionInfo(session));    }  }  if (inNetBuffer == null) {    inNetBuffer=IoBuffer.allocate(buf.remaining()).setAutoExpand(true);  }  inNetBuffer.put(buf);  if (!handshakeComplete) {    handshake(nextFilter);  } else {    inNetBuffer.flip();    if (!inNetBuffer.hasRemaining()) {      return;    }    SSLEngineResult res=unwrap();    if (inNetBuffer.hasRemaining()) {      inNetBuffer.compact();    } else {      inNetBuffer.free();      inNetBuffer=null;    }    checkStatus(res);    renegotiateIfNeeded(nextFilter,res);  }  if (isInboundDone()) {    int inNetBufferPosition=inNetBuffer == null ? 0 : inNetBuffer.position();    buf.position(buf.position() - inNetBufferPosition);    if (inNetBuffer != null) {      inNetBuffer.free();      inNetBuffer=null;    }  }}  }
class C{  public void pushEnclosingClosureExpression(ClosureExpression closureExpression){  enclosingClosures.addFirst(new EnclosingClosure(closureExpression));}  }
class C{  public Quaternionf premul(Quaternionfc q){  return premul(q,this);}  }
class C{  public DecryptionHandler(final MasterKeyProvider<K> customerMasterKeyProvider) throws AwsCryptoException {  Utils.assertNonNull(customerMasterKeyProvider,"customerMasterKeyProvider");  masterKeyProvider_=customerMasterKeyProvider;  ciphertextHeaders_=new CiphertextHeaders();  ciphertextFooters_=new CiphertextFooters();}  }
class C{  public void testSetNamedItemNS1() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  Attr newAttr1;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(0);  attributes=element.getAttributes();  newAttr1=doc.createAttributeNS("http://www.w3.org/DOM/L1","streets");  ((Element)element).setAttributeNodeNS(newAttr1);  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L1","streets");  attrName=attribute.getNodeName();  assertEquals("namednodemapsetnameditemns01","streets",attrName);}  }
class C{  private void cleanInbox(){  checkInbox(true,false,-1);}  }
class C{  @SuppressWarnings("unchecked") @Override public DescriptiveStatistics statistics(Set<? extends Vertex> vertices){  DescriptiveStatistics stats=new DescriptiveStatistics();  int iteration=SnowballStatistics.getInstance().lastIteration((Set<? extends SampledVertex>)vertices);  TObjectDoubleHashMap<? extends Vertex> coefficients=localClusteringCoefficients(vertices);  TObjectDoubleIterator<? extends Vertex> it=coefficients.iterator();  for (int i=0; i < coefficients.size(); i++) {    it.advance();    if (((SampledVertex)it.key()).getIterationSampled() <= iteration - 1) {      stats.addValue(it.value());    }  }  return stats;}  }
