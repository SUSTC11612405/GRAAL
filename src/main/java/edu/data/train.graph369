class C{  public void addIntersections(Edge e0,int segIndex0,Edge e1,int segIndex1){  if (e0 == e1 && segIndex0 == segIndex1)   return;  numTests++;  Coordinate p00=e0.getCoordinates()[segIndex0];  Coordinate p01=e0.getCoordinates()[segIndex0 + 1];  Coordinate p10=e1.getCoordinates()[segIndex1];  Coordinate p11=e1.getCoordinates()[segIndex1 + 1];  li.computeIntersection(p00,p01,p10,p11);  if (li.hasIntersection()) {    if (recordIsolated) {      e0.setIsolated(false);      e1.setIsolated(false);    }    numIntersections++;    if (!isTrivialIntersection(e0,segIndex0,e1,segIndex1)) {      hasIntersection=true;      if (includeProper || !li.isProper()) {        e0.addIntersections(li,segIndex0,0);        e1.addIntersections(li,segIndex1,1);      }      if (li.isProper()) {        properIntersectionPoint=(Coordinate)li.getIntersection(0).clone();        hasProper=true;        if (isDoneWhenProperInt) {          isDone=true;        }        if (!isBoundaryPoint(li,bdyNodes))         hasProperInterior=true;      }    }  }}  }
class C{  public Boolean isMeesevaUser(final User user){  for (  final Role role : user.getRoles())   if (role != null && role.getName().equalsIgnoreCase(MEESEVA_OPERATOR_ROLE))   return true;  return false;}  }
class C{  public PackedTokenAttributeImpl(){}  }
class C{  public void initProcessAnnotations(Iterable<? extends Processor> processors){  if (options.isSet(PROC,"none")) {    processAnnotations=false;  } else   if (procEnvImpl == null) {    procEnvImpl=JavacProcessingEnvironment.instance(context);    procEnvImpl.setProcessors(processors);    processAnnotations=procEnvImpl.atLeastOneProcessor();    if (processAnnotations) {      options.put("save-parameter-names","save-parameter-names");      reader.saveParameterNames=true;      keepComments=true;      genEndPos=true;      if (!taskListener.isEmpty())       taskListener.started(new TaskEvent(TaskEvent.Kind.ANNOTATION_PROCESSING));      deferredDiagnosticHandler=new Log.DeferredDiagnosticHandler(log);    } else {      procEnvImpl.close();    }  }}  }
class C{  public void reloadFromPreference(){  for (  String preferenceKey : PreferenceKeys.KEYS_EDIT_EMERGENCY_INFO) {    ReloadablePreferenceInterface preference=(ReloadablePreferenceInterface)findPreference(preferenceKey);    if (preference != null) {      preference.reloadFromPreference();    }  }}  }
class C{  public static void run(String configFile){  new PTMapperImpl(configFile).run();}  }
class C{  private void assignLabelManagerIntent(){  final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_touch_exploration_key);  final Preference prefManageLabels=findPreferenceByResId(R.string.pref_manage_labels_key);  if ((category == null) || (prefManageLabels == null)) {    return;  }  if (Build.VERSION.SDK_INT < LabelManagerSummaryActivity.MIN_API_LEVEL) {    category.removePreference(prefManageLabels);    return;  }  final Intent labelManagerIntent=new Intent(this,LabelManagerSummaryActivity.class);  labelManagerIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  labelManagerIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  prefManageLabels.setIntent(labelManagerIntent);}  }
class C{  public boolean isEmpty(){  return hasAttributeHistogram() || hasItemTypeDescription() || hasStats();}  }
class C{  public static IPackageFragmentRoot addVariableEntry(IJavaProject jproject,IPath path,IPath sourceAttachPath,IPath sourceAttachRoot) throws JavaModelException {  IClasspathEntry cpe=JavaCore.newVariableEntry(path,sourceAttachPath,sourceAttachRoot);  addToClasspath(jproject,cpe);  IPath resolvedPath=JavaCore.getResolvedVariablePath(path);  if (resolvedPath != null) {    return jproject.getPackageFragmentRoot(resolvedPath.toString());  }  return null;}  }
class C{  public final void testLetterOrNumberWithContextParameter(){  assertNotNull(Validators.letterOrNumber(getContext(),Case.CASE_INSENSITIVE,true,new char[]{'-'}));}  }
class C{  public TransportNetwork applyScenario(Scenario scenario){  if (scenario == null || scenario.modifications.isEmpty()) {    return this;  }  return scenario.applyToTransportNetwork(this);}  }
class C{  public StepPattern(int whatToShow,int axis,int axisForPredicate){  super(whatToShow);  m_axis=axis;}  }
class C{  @Override public void mouseClicked(int x,int y,int par3){  super.mouseClicked(x,y,par3);  this.textFieldBanJing.mouseClicked(x - containerWidth,y - containerHeight,par3);}  }
class C{  protected String extractAlternateOpenQuote(String token){  return null;}  }
class C{  protected void validate_return(StorageAlarm[] param){}  }
class C{  public PropertiesFileCallbackHandler(String pwFile,String namesFile,String proxyFile) throws IOException {  String dir=System.getProperty("test.src");  if (dir == null) {    dir=".";  }  dir=dir + "/";  if (pwFile != null) {    pwDb=new Properties();    pwDb.load(new FileInputStream(dir + pwFile));  }  if (namesFile != null) {    namesDb=new Properties();    namesDb.load(new FileInputStream(dir + namesFile));  }  if (proxyFile != null) {    proxyDb=new Properties();    proxyDb.load(new FileInputStream(dir + proxyFile));  }}  }
class C{  public static final void removeIllegal(Position pos,MoveList moveList){  int length=0;  UndoInfo ui=new UndoInfo();  boolean isInCheck=inCheck(pos);  final long occupied=pos.whiteBB | pos.blackBB;  int kSq=pos.getKingSq(pos.whiteMove);  long kingAtks=BitBoard.rookAttacks(kSq,occupied) | BitBoard.bishopAttacks(kSq,occupied);  int epSquare=pos.getEpSquare();  if (isInCheck) {    kingAtks|=pos.pieceTypeBB[pos.whiteMove ? Piece.BKNIGHT : Piece.WKNIGHT];    for (int mi=0; mi < moveList.size; mi++) {      Move m=moveList.m[mi];      boolean legal;      if ((m.from != kSq) && ((kingAtks & (1L << m.to)) == 0) && (m.to != epSquare)) {        legal=false;      } else {        pos.makeMove(m,ui);        pos.setWhiteMove(!pos.whiteMove);        legal=!inCheck(pos);        pos.setWhiteMove(!pos.whiteMove);        pos.unMakeMove(m,ui);      }      if (legal)       moveList.m[length++].copyFrom(m);    }  } else {    for (int mi=0; mi < moveList.size; mi++) {      Move m=moveList.m[mi];      boolean legal;      if ((m.from != kSq) && ((kingAtks & (1L << m.from)) == 0) && (m.to != epSquare)) {        legal=true;      } else {        pos.makeMove(m,ui);        pos.setWhiteMove(!pos.whiteMove);        legal=!inCheck(pos);        pos.setWhiteMove(!pos.whiteMove);        pos.unMakeMove(m,ui);      }      if (legal)       moveList.m[length++].copyFrom(m);    }  }  moveList.size=length;}  }
class C{  public StringCharacterIterator(String text,int begin,int end,int pos){  if (text == null)   throw new NullPointerException();  this.text=text;  if (begin < 0 || begin > end || end > text.length())   throw new IllegalArgumentException("Invalid substring range");  if (pos < begin || pos > end)   throw new IllegalArgumentException("Invalid position");  this.begin=begin;  this.end=end;  this.pos=pos;}  }
class C{  public static String toJsonWithSortedAndAlignedProperties(Map<String,String> map) throws JsonProcessingException {  return JsonUtils.toJsonWithSortedAndAlignedProperties(map);}  }
class C{  public void resetClasses(List<String> classesToReset,ClassLoader loader){  ClassResetter.getInstance().setClassLoader(loader);  long start=System.currentTimeMillis();  for (  String className : classesToReset) {    long elapsed=System.currentTimeMillis() - start;    if (!className.equals(Properties.TARGET_CLASS) && (!TimeController.getInstance().isThereStillTimeInThisPhase() || elapsed > Properties.TIMEOUT_RESET)) {    }    resetClass(className);  }}  }
class C{  public boolean isItalic(){  return italic;}  }
class C{  public FBTpbMapper(){  TransactionParameterBuffer serializableTpb=new TransactionParameterBufferImpl();  serializableTpb.addArgument(ISCConstants.isc_tpb_write);  serializableTpb.addArgument(ISCConstants.isc_tpb_wait);  serializableTpb.addArgument(ISCConstants.isc_tpb_consistency);  TransactionParameterBuffer repeatableReadTpb=new TransactionParameterBufferImpl();  repeatableReadTpb.addArgument(ISCConstants.isc_tpb_write);  repeatableReadTpb.addArgument(ISCConstants.isc_tpb_wait);  repeatableReadTpb.addArgument(ISCConstants.isc_tpb_concurrency);  TransactionParameterBuffer readCommittedTpb=new TransactionParameterBufferImpl();  readCommittedTpb.addArgument(ISCConstants.isc_tpb_write);  readCommittedTpb.addArgument(ISCConstants.isc_tpb_wait);  readCommittedTpb.addArgument(ISCConstants.isc_tpb_read_committed);  readCommittedTpb.addArgument(ISCConstants.isc_tpb_rec_version);  mapping.put(Connection.TRANSACTION_SERIALIZABLE,serializableTpb);  mapping.put(Connection.TRANSACTION_REPEATABLE_READ,repeatableReadTpb);  mapping.put(Connection.TRANSACTION_READ_COMMITTED,readCommittedTpb);}  }
class C{  public Model validateModel(Dataset dataset,URI shapesGraphURI,Resource minSeverity,boolean validateShapes,Function<RDFNode,String> labelFunction,ProgressMonitor monitor) throws InterruptedException {  if (dataset.getDefaultModel() == null) {    throw new IllegalArgumentException("Dataset requires a default model");  }  Model shapesModel=dataset.getNamedModel(shapesGraphURI.toString());  if (monitor != null) {    monitor.subTask("Preparing execution plan");  }  List<Property> constraintProperties=SHACLUtil.getAllConstraintProperties(validateShapes);  Map<Resource,List<SHConstraint>> map=buildShape2ConstraintsMap(shapesModel,dataset.getDefaultModel(),constraintProperties,validateShapes);  if (monitor != null) {    monitor.subTask("");  }  if (monitor != null) {    monitor.beginTask("Validating constraints for " + map.size() + " shapes...",map.size());  }  Model results=JenaUtil.createMemoryModel();  results.setNsPrefixes(dataset.getDefaultModel());  for (  Resource shape : map.keySet()) {    for (    SHConstraint constraint : map.get(shape)) {      validateConstraintForShape(dataset,shapesGraphURI,minSeverity,constraint,shape,results,labelFunction,monitor);      if (monitor != null) {        monitor.worked(1);        if (monitor.isCanceled()) {          throw new InterruptedException();        }      }    }  }  return results;}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  String cmd=e.getActionCommand();  if (cmd == READ_DATA_COMMAND) {    Debug.message("cachelayer","CacheLayer: Reading serialized graphics");    try {      readGraphics();    } catch (    java.io.IOException exc) {      exc.printStackTrace();    }  } else {    Debug.error("Unknown action command \"" + cmd + "\" in SaveShapeLayer.actionPerformed().");  }}  }
class C{  private ExpressionEvaluator computeAndCheckType(ExpressionEvaluator subexpressionEvaluator,ExpressionType expectedType){  ExpressionEvaluator outEvaluator=compute(subexpressionEvaluator);  if (outEvaluator.getType() == expectedType) {    return outEvaluator;  } else   if (expectedType == ExpressionType.DOUBLE && outEvaluator.getType() == ExpressionType.INTEGER) {    return new SimpleExpressionEvaluator(outEvaluator.getDoubleFunction(),expectedType,outEvaluator.isConstant());  } else   if (expectedType == ExpressionType.STRING) {    return convertToStringEvaluator(outEvaluator);  } else {    throw new FunctionInputException("expression_parser.eval.type_not_matching",getFunctionName(),getConstantName(expectedType),getConstantName(outEvaluator.getType()));  }}  }
class C{  public Wine runBackground(File workingDirectory,String executableToRun) throws ScriptFailureException {  runBackground(workingDirectory,executableToRun,null,null);  return this;}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  private Substitution<ReferenceType> selectSubstitution(List<TypeVariable> typeParameters){  Substitution<ReferenceType> substitution=new Substitution<>();  return selectSubstitution(typeParameters,substitution);}  }
class C{  public PlayerOwnsItemIncludingBankCondition(final String itemName){  this.itemName=checkNotNull(itemName);  this.amount=1;}  }
class C{  @Override public void write(int ch) throws IOException {  ch=ch & 0xff;  _os.write(ch);  try {    _state.next(ch);  } catch (  Exception e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ClassPath insertClassPath(ClassPath cp){  return source.insertClassPath(cp);}  }
class C{  public VPlexStorageViewInfo createStorageView(String viewName,List<PortInfo> targetPortInfo,List<PortInfo> initiatorPortInfo,Map<String,Integer> virtualVolumeMap) throws VPlexApiException {  s_logger.info("Request for storage view creation on VPlex at {}",_baseURI);  if ((viewName == null) || (viewName.trim().length() == 0)) {    throw new VPlexApiException("A name for the storage view must be specified.");  }  if (targetPortInfo.isEmpty()) {    throw new VPlexApiException("Target ports are required to create a storage view");  }  return _exportMgr.createStorageView(viewName,targetPortInfo,initiatorPortInfo,virtualVolumeMap);}  }
class C{  public static BigInteger toBigInteger(Object obj){  if (obj instanceof Integer) {    return BigInteger.valueOf(((Integer)obj).longValue());  }  if (obj instanceof Long) {    return BigInteger.valueOf(((Long)obj).longValue());  }  if (obj instanceof BigInteger) {    return (BigInteger)obj;  }  return null;}  }
class C{  @SmallTest public void testSomeCandidateBetterThanNonCandidate(){  Rect src=new Rect(0,0,50,50);  Rect nonCandidate=new Rect(src);  nonCandidate.offset(src.width() + 1,0);  assertIsNotCandidate(View.FOCUS_LEFT,src,nonCandidate);  Rect candidate=new Rect(src);  candidate.offset(-(4 * src.width()),0);  assertDirectionIsCandidate(View.FOCUS_LEFT,src,candidate);  assertBetterCandidate(View.FOCUS_LEFT,src,candidate,nonCandidate);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @NotNull static GitOldChangesCollector collect(@NotNull Project project,@NotNull ChangeListManager changeListManager,@NotNull ProjectLevelVcsManager vcsManager,@NotNull AbstractVcs vcs,@NotNull VcsDirtyScope dirtyScope,@NotNull VirtualFile vcsRoot) throws VcsException {  return new GitOldChangesCollector(project,changeListManager,vcsManager,vcs,dirtyScope,vcsRoot);}  }
class C{  public void testInfiniteRect(){  for (int i=0; i < 1000; i++) {    double centerLat=GeoTestUtil.nextLatitude();    double centerLon=GeoTestUtil.nextLongitude();    Rectangle rect=Rectangle.fromPointDistance(centerLat,centerLon,Double.POSITIVE_INFINITY);    assertEquals(-180.0,rect.minLon,0.0D);    assertEquals(180.0,rect.maxLon,0.0D);    assertEquals(-90.0,rect.minLat,0.0D);    assertEquals(90.0,rect.maxLat,0.0D);    assertFalse(rect.crossesDateline());  }}  }
class C{  public long persistenceId(){  return persistenceId;}  }
class C{  private void resetClassSymbol(ClassSymbol classSymbol){  if (classSymbol.members_field != null) {    for (    Symbol member : classSymbol.getEnclosedElements()) {      if (member instanceof ClassSymbol) {        resetClassSymbol((ClassSymbol)member);      }    }  }  com.redhat.ceylon.langtools.tools.javac.code.Type.ClassType classType=(ClassType)classSymbol.type;  classType.all_interfaces_field=null;  classType.interfaces_field=null;  classType.supertype_field=null;  classType.typarams_field=null;  if (classType.getTag() == TypeTag.ERROR) {    classSymbol.type=new ClassType(com.redhat.ceylon.langtools.tools.javac.code.Type.noType,null,null);    classSymbol.type.tsym=classSymbol;  }  classSymbol.members_field=null;  classSymbol.completer=null;  classSymbol.kind=Kinds.TYP;  classSymbol.flags_field=0;}  }
class C{  private int calculatePosition(int spot,int width){  if (spot < BORDER_DRAG_THICKNESS) {    return 0;  }  if (spot < CORNER_DRAG_WIDTH) {    return 1;  }  if (spot >= (width - BORDER_DRAG_THICKNESS)) {    return 4;  }  if (spot >= (width - CORNER_DRAG_WIDTH)) {    return 3;  }  return 2;}  }
class C{  public MongoDbConnectorTask(){}  }
class C{  @Override public String toString(){  return this.builder.toString();}  }
class C{  public boolean decodeValueLength(int startIndex){  if ((mWspData[startIndex] & 0xff) > WAP_PDU_LENGTH_QUOTE) {    return false;  }  if (mWspData[startIndex] < WAP_PDU_LENGTH_QUOTE) {    mUnsigned32bit=mWspData[startIndex];    mDataLength=1;  } else {    decodeUintvarInteger(startIndex + 1);    mDataLength++;  }  return true;}  }
class C{  public Walker(StackMap sm){  info=sm.get();}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  final Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  final Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  final int measureHeightOfChildren(int widthMeasureSpec,int startPosition,int endPosition,final int maxHeight,int disallowPartialChildPosition){  final ListAdapter adapter=mAdapter;  if (adapter == null) {    return mListPadding.top + mListPadding.bottom;  }  int returnedHeight=mListPadding.top + mListPadding.bottom;  final int dividerHeight=((mDividerHeight > 0) && mDivider != null) ? mDividerHeight : 0;  int prevHeightWithoutPartialChild=0;  int i;  View child;  endPosition=(endPosition == NO_POSITION) ? adapter.getCount() - 1 : endPosition;  final PLAAbsListView.RecycleBin recycleBin=mRecycler;  final boolean recyle=recycleOnMeasure();  final boolean[] isScrap=mIsScrap;  for (i=startPosition; i <= endPosition; ++i) {    child=obtainView(i,isScrap);    measureScrapChild(child,i,widthMeasureSpec);    if (i > 0) {      returnedHeight+=dividerHeight;    }    if (recyle && recycleBin.shouldRecycleViewType(((LayoutParams)child.getLayoutParams()).viewType)) {      recycleBin.addScrapView(child);    }    returnedHeight+=child.getMeasuredHeight();    if (returnedHeight >= maxHeight) {      return (disallowPartialChildPosition >= 0) && (i > disallowPartialChildPosition) && (prevHeightWithoutPartialChild > 0)&& (returnedHeight != maxHeight) ? prevHeightWithoutPartialChild : maxHeight;    }    if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {      prevHeightWithoutPartialChild=returnedHeight;    }  }  return returnedHeight;}  }
class C{  public LogFileParser(String logFileName,BufferedReader br,boolean tabOut,boolean suppressBlanks){  this.logFileName=logFileName;  this.br=br;  this.hasMoreEntries=true;  this.timestamp=null;  this.sb=new StringBuffer();  this.suppressBlanks=suppressBlanks;  this.whiteFileName=new StringBuffer();  if (tabOut) {    int numTabs=(logFileName.length() + 2) / 8;    for (int i=0; i < numTabs; i++) {      whiteFileName.append('\t');    }    for (int i=((logFileName.length() + 2) % 8); i > 0; i--) {      whiteFileName.append(' ');    }  }  if (this.logFileName != null) {    this.extLogFileName=this.logFileName + ": ";  } else {    this.extLogFileName=null;  }}  }
class C{  private void extractTestSet(boolean extractThemeAndCriterion){  testSet=new HashSet();  testSet.addAll(auditDataService.getAuditWithTest(this.audit.getId()).getTestList());  if (extractThemeAndCriterion) {    extractThemeAndCriterionSet();  }}  }
class C{  private void checkOffheapAllocated(String spaceName,boolean allocated) throws Exception {  long offheapSize=grid(0).context().offheap().allocatedSize(spaceName);  assertEquals("Unexpected offheap allocated size",allocated,(offheapSize >= 0));}  }
class C{  @Override public void flush() throws IOException {  _stream.flush();}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  mViewWidth=w;  mViewHeight=h;  if (isProgressRingOutline()) {    setPadding(Float.valueOf(mBackgroundRingSize + getPaddingLeft()).intValue(),Float.valueOf(mBackgroundRingSize + getPaddingTop()).intValue(),Float.valueOf(mBackgroundRingSize + getPaddingRight()).intValue(),Float.valueOf(mBackgroundRingSize + getPaddingBottom()).intValue());  }  setupBounds();  setupBackgroundRingPaint();  setupProgressRingPaint();  requestLayout();  invalidate();}  }
class C{  public DTMAxisIterator includeSelf(){  _includeSelf=true;  return this;}  }
class C{  @PostConstruct public void ejbCreate(){  m_no=++s_no;  try {    if (!Adempiere.startup(false))     throw new CreateException("Compiere could not start");  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }  log.info("#" + m_no + " - "+ getStatus());}  }
class C{  public static String throwableToString(Throwable t,int maxLines){  StringWriter writer;  StringBuilder result;  String[] lines;  int i;  writer=new StringWriter();  t.printStackTrace(new PrintWriter(writer));  if (maxLines > 0) {    result=new StringBuilder();    lines=writer.toString().split("\n");    for (i=0; i < maxLines; i++) {      if (i > 0)       result.append("\n");      result.append(lines[i]);    }  } else {    result=new StringBuilder(writer.toString());  }  return result.toString();}  }
class C{  public <T>T unmarshallJsonToObject(Class<T> classType,String jsonContent) throws IOException {  return new ObjectMapper().readValue(jsonContent,classType);}  }
class C{  public boolean isSingleExprImplicitReturn(){  return ((((this.isArrowFunction() && (!this.isHasBracesAroundBody())) && (!Objects.equal(this.getBody(),null))) && (!this.getBody().getStatements().isEmpty())) && (this.getBody().getStatements().get(0) instanceof ExpressionStatement));}  }
class C{  public static TreePath leftShift(TreePath self,Object p){  return self.pathByAddingChild(p);}  }
class C{  private static void split(String content,List<String> tokens,List<Integer> offsets){  Matcher matcher=SPLIT_PATTERN.matcher(content);  while (matcher.find()) {    tokens.add(matcher.group());    offsets.add(matcher.start());  }}  }
class C{  public void replaceRange(String str,int start,int end){  if (end < start) {    throw new IllegalArgumentException("end before start");  }  Document doc=getDocument();  if (doc != null) {    try {      if (doc instanceof AbstractDocument) {        ((AbstractDocument)doc).replace(start,end - start,str,null);      } else {        doc.remove(start,end - start);        doc.insertString(start,str,null);      }    } catch (    BadLocationException e) {      throw new IllegalArgumentException(e.getMessage());    }  }}  }
class C{  public HttpConnection(String proxyHost,int proxyPort,String host,int port){  this(proxyHost,proxyPort,host,null,port,Protocol.getProtocol("http"));}  }
class C{  private InputStream openContentStreamHtmlFile(final String title,final String desc,final String author) throws CoreException {  final String newline="\n";  String line;  final StringBuffer sb=new StringBuffer();  try {    final InputStream input=this.getClass().getResourceAsStream("/templates/description-html-template.resource");    final BufferedReader reader=new BufferedReader(new InputStreamReader(input));    try {      while ((line=reader.readLine()) != null) {        line=line.replaceAll("authorModel","By " + author);        line=line.replaceAll("titleModel","Description of the model " + title);        line=line.replaceAll("descModel",desc);        sb.append(line);        sb.append(newline);      }    }  finally {      reader.close();    }  } catch (  final IOException ioe) {    ioe.printStackTrace();    final IStatus status=new Status(IStatus.ERROR,"ExampleWizard",IStatus.OK,ioe.getLocalizedMessage(),null);    throw new CoreException(status);  }  return new ByteArrayInputStream(sb.toString().getBytes());}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (maximumSize != UNSET_INT) {    s.add("maximumSize",maximumSize);  }  if (maximumWeight != UNSET_INT) {    s.add("maximumWeight",maximumWeight);  }  if (expireAfterWriteNanos != UNSET_INT) {    s.add("expireAfterWrite",expireAfterWriteNanos + "ns");  }  if (expireAfterAccessNanos != UNSET_INT) {    s.add("expireAfterAccess",expireAfterAccessNanos + "ns");  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  if (valueEquivalence != null) {    s.addValue("valueEquivalence");  }  if (removalListener != null) {    s.addValue("removalListener");  }  return s.toString();}  }
class C{  public static Color rgb(int rgb){  return rgba(rgb,255);}  }
class C{  public AsyncMonitorLocation(final String monitorLocation){  mMonitorLocation=monitorLocation;}  }
class C{  @Override protected void emit_deferred_prologue(){  if (VM.VerifyAssertions)   VM._assert(method.isForOsrSpecialization());  if (isInterruptible) {    Offset offset=Entrypoints.stackLimitField.getOffset();    if (VM.BuildFor32Addr) {      asm.emitMOV_Reg_RegDisp(S0,THREAD_REGISTER,offset);      asm.emitSUB_Reg_Reg(S0,SP);      asm.emitADD_Reg_Imm(S0,method.getOperandWords() << LG_WORDSIZE);    } else {      asm.emitMOV_Reg_RegDisp_Quad(S0,THREAD_REGISTER,offset);      asm.emitSUB_Reg_Reg_Quad(S0,SP);      asm.emitADD_Reg_Imm_Quad(S0,method.getOperandWords() << LG_WORDSIZE);    }    asm.emitBranchLikelyNextInstruction();    ForwardReference fr=asm.forwardJcc(LT);    asm.emitINT_Imm(RuntimeEntrypoints.TRAP_STACK_OVERFLOW + RVM_TRAP_BASE);    fr.resolve(asm);  } else {  }  genThreadSwitchTest(RVMThread.PROLOGUE);}  }
class C{  private List<Supplier<Pair<Integer,JsonNode>>> handleActions(PatchRequestScope requestScope){  return actions.stream().map(null).collect(Collectors.toList());}  }
class C{  public ElemTemplateElement appendChildElem(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_ATTRIBUTE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public void paintInternalFrameTitlePaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void mainThreadHeartbeat(final int currentTick){  this.currentTick=currentTick;  final List<CraftTask> temp=this.temp;  parsePending();  while (isReady(currentTick)) {    final CraftTask task=pending.remove();    if (task.getPeriod() < -1l) {      if (task.isSync()) {        runners.remove(task.getTaskId(),task);      }      parsePending();      continue;    }    if (task.isSync()) {      try {        task.timings.startTiming();        task.run();        task.timings.stopTiming();      } catch (      final Throwable throwable) {        task.getOwner().getLogger().log(Level.WARNING,String.format("Task #%s for %s generated an exception",task.getTaskId(),task.getOwner().getDescription().getFullName()),throwable);      }      parsePending();    } else {      debugTail=debugTail.setNext(new CraftAsyncDebugger(currentTick + RECENT_TICKS,task.getOwner(),task.getTaskClass()));      executor.execute(task);    }    final long period=task.getPeriod();    if (period > 0) {      task.setNextRun(currentTick + period);      temp.add(task);    } else     if (task.isSync()) {      runners.remove(task.getTaskId());    }  }  pending.addAll(temp);  temp.clear();  debugHead=debugHead.getNextHead(currentTick);}  }
class C{  List<Type> attribTypes(List<JCExpression> trees,Env<AttrContext> env){  List<Type> types=attribAnyTypes(trees,env);  return chk.checkRefTypes(trees,types);}  }
class C{  @Override public boolean last() throws SQLException {  try {    debugCodeCall("last");    checkClosed();    return absolute(-1);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public IntParameter(OptionID optionID,int defaultValue){  super(optionID,Integer.valueOf(defaultValue));}  }
class C{  void copyAttributesTo(CSSElement dest){  for (int i=0; i < attrVals.length; i++) {    dest.attrVals[i]=attrVals[i];  }  Hashtable attributes=getAttributes();  if (attributes != null) {    for (Enumeration e=attributes.keys(); e.hasMoreElements(); ) {      Integer key=(Integer)e.nextElement();      String value=(String)attributes.get(key);      dest.setAttribute(key,value);    }  }}  }
class C{  @Override public synchronized boolean last() throws SQLException {  return super.last();}  }
class C{  private Rule<IString> convertRule(SampledRule rule,float[] scores,String[] featureNames,Sequence<IString> sourceSpan,int[] tm2Sys){  PhraseAlignment alignment=new PhraseAlignment(rule.e2f());  Sequence<IString> tgtSeq=toSequence(rule.tgt);  return new Rule<>(scores,featureNames,tgtSeq,sourceSpan,alignment,name);}  }
class C{  Type toType(Environment env,Context ctx){  return type;}  }
class C{  private String confirm(String msgKey,Object... args) throws IOException {  if (confirm == Confirm.none) {    return this.newVersion;  }  String version=this.newVersion;  Console console=System.console();  while (true) {    prompt:     while (true) {      args[args.length - 1]=version;      console.printf("%s",CeylonVersionMessages.msg(msgKey,args));      String ch=console.readLine();      if (ch.equals(CeylonVersionMessages.msg("mnemonic.yes"))) {        return version;      } else       if (ch.equals(CeylonVersionMessages.msg("mnemonic.help"))) {        out.append(CeylonVersionMessages.msg("help")).append(System.lineSeparator());        continue prompt;      } else       if (ch.equals(CeylonVersionMessages.msg("mnemonic.quit"))) {        return null;      } else       if (ch.equals(CeylonVersionMessages.msg("mnemonic.all"))) {        this.confirm=Confirm.none;        return version;      } else       if (ch.equals(CeylonVersionMessages.msg("mnemonic.no"))) {        return "";      } else       if (ch.equals(CeylonVersionMessages.msg("mnemonic.edit"))) {        break prompt;      } else {        continue prompt;      }    }    console.printf(CeylonVersionMessages.msg("prompt.version"));    version=console.readLine();  }}  }
class C{  public void touch(Date date){  lastSeen=(Date)date.clone();}  }
class C{  public static Complex I(){  return new Complex(0.0,1.0);}  }
class C{  public String angle(String label,Angle angle){  if (angle == null) {    String msg=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  String s;  if (this.isShowDMS())   s=String.format("%s",angle.toFormattedDMSString()).trim(); else   s=String.format(this.getFormat(FORMAT_DECIMAL_DEGREES),angle.degrees).trim();  return label != null ? label + " " + s : s;}  }
class C{  public boolean isCached(String uri,int maxWidth,int maxHeight){  return mImageLoader.isCached(uri,maxWidth,maxHeight);}  }
class C{  @GET @ZeppelinApi public Response listRepoSettings(){  AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());  LOG.info("Getting list of NoteRepo with Settings for user {}",subject.getUser());  List<NotebookRepoWithSettings> settings=noteRepos.getNotebookRepos(subject);  return new JsonResponse<>(Status.OK,"",settings).build();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void write(OutputStream os) throws IOException {  if (os == null) {    throw new IllegalArgumentException("Output stream is required.");  }  this.out=new DataOutputStream(os);  out.writeBytes(formData.toString());  out.flush();  out.close();}  }
class C{  @Thunk static void playSoundEffect(int keyCode,View v){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    v.playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);  break;case KeyEvent.KEYCODE_DPAD_RIGHT:v.playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);break;case KeyEvent.KEYCODE_DPAD_DOWN:case KeyEvent.KEYCODE_PAGE_DOWN:case KeyEvent.KEYCODE_MOVE_END:v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);break;case KeyEvent.KEYCODE_DPAD_UP:case KeyEvent.KEYCODE_PAGE_UP:case KeyEvent.KEYCODE_MOVE_HOME:v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);break;default :break;}}  }
class C{  public void close(){  this.open=false;  if (has("open")) {    remove("open");  }}  }
class C{  public NetworkConnectivityListener(){  mState=State.UNKNOWN;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean ignoreColors(){  return lockColours;}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  private static String buildDescription(final List<String> missingFields){  final StringBuilder description=new StringBuilder("Message missing required fields: ");  boolean first=true;  for (  final String field : missingFields) {    if (first) {      first=false;    } else {      description.append(", ");    }    description.append(field);  }  return description.toString();}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  @SuppressWarnings("rawtypes") public static String join(Iterator iterator,String separator){  if (separator == null) {    separator="";  }  StringBuilder buf=new StringBuilder(256);  while (iterator.hasNext()) {    buf.append(iterator.next());    if (iterator.hasNext()) {      buf.append(separator);    }  }  return buf.toString();}  }
class C{  public static void onPreRenderShaders(float partialTicks){  MinecraftForge.EVENT_BUS.post(new PreRenderShadersEvent(partialTicks));}  }
class C{  static ServiceRef.ServiceBuilder service(Class<?> serviceClass){  Objects.requireNonNull(serviceClass);  return builder().service(serviceClass);}  }
class C{  public void updateSmoke(){  for (  SmokeCloud cloud : server.getSmokeCloudList()) {    server.removeSmokeTerrain(cloud);    if (!game.getOptions().booleanOption("tacops_start_fire")) {      if ((cloud.getDuration() > 0) && ((cloud.getDuration() - 1) > 0)) {        cloud.setDuration(cloud.getDuration() - 1);      }      if (cloud.getDuration() < 1) {        cloud.setSmokeLevel(0);      }    }  }  removeEmptyClouds();  for (  SmokeCloud cloud : server.getSmokeCloudList()) {    if ((cloud.getCoordsList().size() > 0) && (cloud.getSmokeLevel() > 0)) {      createSmokeTerrain(cloud);    }  }}  }
class C{  @Override public GraphQuery hasNot(final String key){  criteria.add(new HasNot(key));  return this;}  }
class C{  private void checkSortMissingFirst(final String field,final String low,final String high){  assertU(adoc("id","0"));  assertU(adoc("id","1",field,low));  assertU(adoc("id","2",field,high));  assertU(commit());  assertQ(req("q","*:*","sort",field + " asc"),"//result/doc[1]/str[@name='id'][.=0]","//result/doc[2]/str[@name='id'][.=1]","//result/doc[3]/str[@name='id'][.=2]");  assertQ(req("q","*:*","sort",field + " desc"),"//result/doc[1]/str[@name='id'][.=0]","//result/doc[2]/str[@name='id'][.=2]","//result/doc[3]/str[@name='id'][.=1]");}  }
class C{  public void stopScanning(final BeaconServiceConnection serviceConnection){  if (serviceConnection != null) {    serviceConnection.stopMonitoringForRegion(this);    serviceConnection.stopRangingBeaconsInRegion(this);  }}  }
class C{  public void testConstructorSignBytesException1(){  byte aBytes[]={123,45,-3,-76};  int aSign=3;  try {    new BigInteger(aSign,aBytes);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.MONTH_DAY_TYPE,this);}  }
class C{  public void add(final float x){  if (isInitializing) {    q[ni++]=x;    if (ni == 2 * m + 3 + 1) {      Arrays.sort(q);      isInitializing=false;    }  } else {    addMeasurement(x);  }}  }
class C{  public void put(String key,Object value){  if (key != null && value != null) {    urlParamsWithObjects.put(key,value);  }}  }
class C{  protected void collectDatabaseSchemasForDrop(DatabaseObjectDefinition databaseObjectDefinition){  if (createDatabaseSchemas && databaseObjectDefinition.hasDatabaseSchema()) {    if (!dropDatabaseSchemas.containsKey(databaseObjectDefinition.getDatabaseSchema())) {      dropDatabaseSchemas.put(databaseObjectDefinition.getDatabaseSchema(),databaseObjectDefinition);    }  }}  }
class C{  public SendableVideoMessage.SendableVideoMessageBuilder disableNotification(boolean disableNotification){  this.disableNotification=disableNotification;  return this;}  }
class C{  public static double calculateTestStatistic(double[] sample1,double[] sample2){  double maximum=0.0;  int index1=0, index2=0;  double cdf1=0, cdf2=0;  while (index1 < sample1.length && index2 < sample2.length) {    final double x1=sample1[index1], x2=sample2[index2];    if (x1 <= x2) {      index1++;      while (index1 < sample1.length && sample1[index1] == x1) {        index1++;      }      cdf1=((double)index1 + 1.) / (sample1.length + 1.);    }    if (x1 >= x2) {      index2++;      while (index2 < sample2.length && sample2[index2] == x2) {        index2++;      }      cdf2=((double)index2 + 1.) / (sample2.length + 1.);    }    maximum=Math.max(maximum,Math.abs(cdf1 - cdf2));  }  return maximum;}  }
class C{  public NodeTextRep clone(){  NodeTextRep result=new NodeTextRep();  result.nodeText=new String[this.nodeText.length];  for (int i=0; i < result.nodeText.length; i++) {    result.nodeText[i]=this.nodeText[i];  }  result.mapping=this.mapping.clone();  for (int i=0; i < result.mapping.length; i++) {    result.mapping[i]=new Vector<MappingPair>();    for (int j=0; j < this.mapping[i].size(); j++) {      result.mapping[i].add(this.mapping[i].elementAt(j));    }  }  return result;}  }
class C{  public void testStartup() throws Exception {  startReplicatorManager();  try {    waitStatus("OFFLINE");  } catch (  Exception e) {    fail(e.getMessage());  }  stopReplicatorManager();}  }
class C{  public Boolean isSupportedForCreate(){  return supportedForCreate;}  }
class C{  private static void echo(String msg){  assert msg != null;  System.out.println(msg);}  }
class C{  public int openChannels(){  return infos.size();}  }
class C{  static boolean isIndefinite(int lengthByte){  return (isLongForm(lengthByte) && ((lengthByte & LEN_MASK) == 0));}  }
class C{  @Override public void filter(ContainerRequestContext requestContext){  final UriInfo uriInfo=requestContext.getUriInfo();  final URI oldRequestURI=uriInfo.getRequestUri();  final String oldPath=oldRequestURI.getPath().toLowerCase();  if (oldPath.startsWith("/networks")) {    redirectNetworkToSubnet(requestContext,uriInfo,oldRequestURI,oldPath);    return;  }  if (oldPath.startsWith("/projects") || oldPath.startsWith("/vms")) {    if (oldPath.contains("/networks")) {      redirectNetworkToSubnet(requestContext,uriInfo,oldRequestURI,oldPath);    }  }}  }
class C{  protected SuccessorEdges.Mutable createSuccessorEdge(){  return new SuccessorEdges.Frugal();}  }
class C{  private static List<ZipEntry> createResourceList(String root) throws IOException {  CodeSource src=Configuration.class.getProtectionDomain().getCodeSource();  List<ZipEntry> ret=new LinkedList<ZipEntry>();  String name;  if (src != null) {    ZipInputStream zip=new ZipInputStream(src.getLocation().openStream());    ZipEntry ze=null;    while ((ze=zip.getNextEntry()) != null) {      name=ze.getName();      if (name.startsWith(root)) {        ret.add(ze);      }    }  }  return ret;}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, DEMHeader, outputHeader;  int row, col, x, y;  int progress;  int c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag;  double flowDir, flowLength, flowLengthThroughCell;  double zSt, zCurrent, zLastCell;  double rad2Deg=180.0 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  DEMHeader=args[1];  outputHeader=args[2];  double d=Double.parseDouble(args[3]);  if (d <= 0) {    showFeedback("The vertical drop parameter must be set to a positive numerical value.");    return;  }  String outputType=args[4].toLowerCase().trim();  if (pointerHeader.isEmpty() || DEMHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    double noData=pointer.getNoDataValue();    double gridResX=pointer.getCellSizeX();    double gridResY=pointer.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster dem=new WhiteboxRaster(DEMHeader,"r");    if (dem.getNumberColumns() != cols || dem.getNumberRows() != rows) {      showFeedback("Each of the input images must have the same dimensions (i.e. rows and columns).");      return;    }    double demNoData=dem.getNoDataValue();    if (pointer.getXYUnits().toLowerCase().contains("deg") || dem.getXYUnits().toLowerCase().contains("deg")) {      double p1=111412.84;      double p2=-93.5;      double p3=0.118;      double lat=Math.toRadians((pointer.getNorth() - pointer.getSouth()) / 2.0);      double longlen=(p1 * Math.cos(lat)) + (p2 * Math.cos(3 * lat)) + (p3 * Math.cos(5 * lat));      for (int i=0; i < 8; i++) {        gridLengths[i]=gridLengths[i] * longlen;      }    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);switch (outputType) {case "tangent":      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {            zSt=dem.getValue(row,col);            flag=false;            x=col;            y=row;            flowLength=0;            do {              zLastCell=dem.getValue(row,col);              flowDir=pointer.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                zCurrent=dem.getValue(y,x);                if (zCurrent != demNoData) {                  if ((zSt - zCurrent) < d) {                    flowLength+=gridLengths[c];                  } else {                    flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);                    flowLength+=flowLengthThroughCell;                    output.setValue(row,col,d / flowLength);                    flag=true;                  }                } else {                  if (flowLength > 0) {                    output.setValue(row,col,(zSt - zLastCell) / flowLength);                  } else {                    output.setValue(row,col,noData);                  }                  flag=true;                }              } else {                if (flowLength > 0) {                  output.setValue(row,col,(zSt - zLastCell) / flowLength);                } else {                  output.setValue(row,col,noData);                }                flag=true;              }            } while (!flag);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    break;case "degrees":  for (row=0; row < rows; row++) {    for (col=0; col < cols; col++) {      if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {        zSt=dem.getValue(row,col);        flag=false;        x=col;        y=row;        flowLength=0;        do {          zLastCell=dem.getValue(row,col);          flowDir=pointer.getValue(y,x);          if (flowDir > 0) {            c=(int)(Math.log(flowDir) / LnOf2);            x+=dX[c];            y+=dY[c];            zCurrent=dem.getValue(y,x);            if (zCurrent != demNoData) {              if ((zSt - zCurrent) < d) {                flowLength+=gridLengths[c];              } else {                flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);                flowLength+=flowLengthThroughCell;                output.setValue(row,col,Math.atan(d / flowLength) * rad2Deg);                flag=true;              }            } else {              if (flowLength > 0) {                output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength) * rad2Deg);              } else {                output.setValue(row,col,noData);              }              flag=true;            }          } else {            if (flowLength > 0) {              output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength) * rad2Deg);            } else {              output.setValue(row,col,noData);            }            flag=true;          }        } while (!flag);      }    }    if (cancelOp) {      cancelOperation();      return;    }    progress=(int)(100f * row / (rows - 1));    updateProgress(progress);  }break;case "radians":for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {  if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {    zSt=dem.getValue(row,col);    flag=false;    x=col;    y=row;    flowLength=0;    do {      zLastCell=dem.getValue(row,col);      flowDir=pointer.getValue(y,x);      if (flowDir > 0) {        c=(int)(Math.log(flowDir) / LnOf2);        x+=dX[c];        y+=dY[c];        zCurrent=dem.getValue(y,x);        if (zCurrent != demNoData) {          if ((zSt - zCurrent) < d) {            flowLength+=gridLengths[c];          } else {            flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);            flowLength+=flowLengthThroughCell;            output.setValue(row,col,Math.atan(d / flowLength));            flag=true;          }        } else {          if (flowLength > 0) {            output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength));          } else {            output.setValue(row,col,noData);          }          flag=true;        }      } else {        if (flowLength > 0) {          output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength));        } else {          output.setValue(row,col,noData);        }        flag=true;      }    } while (!flag);  }}if (cancelOp) {  cancelOperation();  return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}break;case "distance":for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {zSt=dem.getValue(row,col);flag=false;x=col;y=row;flowLength=0;do {  zLastCell=dem.getValue(row,col);  flowDir=pointer.getValue(y,x);  if (flowDir > 0) {    c=(int)(Math.log(flowDir) / LnOf2);    x+=dX[c];    y+=dY[c];    zCurrent=dem.getValue(y,x);    if (zCurrent != demNoData) {      if ((zSt - zCurrent) < d) {        flowLength+=gridLengths[c];      } else {        flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);        flowLength+=flowLengthThroughCell;        output.setValue(row,col,flowLength);        flag=true;      }    } else {      if (flowLength > 0) {        output.setValue(row,col,flowLength);      } else {        output.setValue(row,col,noData);      }      flag=true;    }  } else {    if (flowLength > 0) {      output.setValue(row,col,flowLength);    } else {      output.setValue(row,col,noData);    }    flag=true;  }} while (!flag);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}break;}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());pointer.close();dem.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public int size(){  throw new UnsupportedOperationException();}  }
class C{  private void doComputations(String timeBucket,Integer dimensionCombinationId,String dimValueName,String valueKeyName,Number value){  StringBuilder sb=new StringBuilder();  sb.append(timeBucket).append("|").append(recordType.get(LogstreamUtil.LOG_TYPE)).append("|").append(recordType.get(LogstreamUtil.FILTER)).append("|").append(dimensionCombinationId).append("|").append(valueKeyName);  String key=sb.toString();  Map<AggregateOperation,Number> aggregations;  if (cacheObject.containsKey(key)) {    Map<String,Map<AggregateOperation,Number>> dimValueNames=cacheObject.get(key);    if (dimValueNames.containsKey(dimValueName)) {      aggregations=dimValueNames.get(dimValueName);    } else {      aggregations=new HashMap<AggregateOperation,Number>();      for (      AggregateOperation aggregationType : valueOperationTypes.get(valueKeyName)) {        aggregations.put(aggregationType,new MutableDouble(0));      }      dimValueNames.put(dimValueName,aggregations);    }  } else {    Map<String,Map<AggregateOperation,Number>> newDimValueNames=new HashMap<String,Map<AggregateOperation,Number>>();    aggregations=new HashMap<AggregateOperation,Number>();    for (    AggregateOperation aggregationType : valueOperationTypes.get(valueKeyName)) {      aggregations.put(aggregationType,new MutableDouble(0));    }    newDimValueNames.put(dimValueName,aggregations);    cacheObject.put(key,newDimValueNames);  }  if (aggregations.containsKey(AggregateOperation.SUM)) {    MutableDouble aggrVal=(MutableDouble)aggregations.get(AggregateOperation.SUM);    aggrVal.add(value);  }  if (aggregations.containsKey(AggregateOperation.COUNT)) {    MutableDouble aggrVal=(MutableDouble)aggregations.get(AggregateOperation.COUNT);    aggrVal.add(1);  }  if (aggregations.containsKey(AggregateOperation.AVERAGE)) {    double avgVal=aggregations.get(AggregateOperation.AVERAGE).doubleValue();    double countVal=aggregations.get(AggregateOperation.COUNT).doubleValue();    double newAvg=((avgVal * (countVal - 1)) + value.doubleValue()) / countVal;    aggregations.put(AggregateOperation.AVERAGE,new MutableDouble(newAvg));  }}  }
class C{  private int convertModelToColumn(int index){  int size=list.getModel().getSize();  if ((index < 0) || (index >= size)) {    return -1;  }  if (layoutOrientation != JList.VERTICAL && rowsPerColumn > 0 && columnCount > 1) {    if (layoutOrientation == JList.VERTICAL_WRAP) {      return index / rowsPerColumn;    }    return index % columnCount;  }  return 0;}  }
class C{  public CFunctionNode(final int nodeId,final INaviFunction function,final double x,final double y,final double width,final double height,final Color color,final boolean selected,final boolean visible,final List<IComment> localComments,final Set<CTag> tags,final SQLProvider provider){  super(nodeId,x,y,width,height,color,Color.BLACK,selected,visible,tags,provider);  m_function=Preconditions.checkNotNull(function,"IE00086: Function argument can not be null");  m_provider=Preconditions.checkNotNull(provider,"IE02390: provider argument can not be null");  CommentManager.get(m_provider).addListener(m_internalCommentListener);  CommentManager.get(m_provider).initializeFunctionNodeComment(this,localComments);}  }
class C{  public static void logInfo(String message){  log(IStatus.INFO,IStatus.OK,message,null);}  }
class C{  public String toString(){  return String.format("line %s",getLine());}  }
class C{  public boolean containsKey(long key){  return lookup(key).isDefined();}  }
class C{  public void parent(String name,String parentName){  ElementType child=getElementType(name);  ElementType parent=getElementType(parentName);  if (child == null) {    throw new Error("No child " + name + " for parent "+ parentName);  }  if (parent == null) {    throw new Error("No parent " + parentName + " for child "+ name);  }  child.setParent(parent);}  }
class C{  public SipCall(String callId,Map<String,String> call_details){  this(callId,call_details.get("ACCOUNTID"),call_details.get("PEER_NUMBER"),Integer.parseInt(call_details.get("CALL_TYPE")));  mCallState=stateFromString(call_details.get("CALL_STATE"));  setDetails(call_details);}  }
class C{  public DelegatingDatagramSocket(DatagramSocket delegate) throws SocketException {  this(delegate,null);}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public SystemMemberCacheJmxImpl(GemFireVM vm) throws org.apache.geode.admin.AdminException {  super(vm);  initializeMBean();}  }
class C{  public int engineSize(){  return entries.size();}  }
class C{  public static void navigate(Activity context,View transitionView,String savedAvatarUrl){  Intent intent=new Intent(context,ChooseAvatarActivity.class);  intent.putExtra(ProfileActivity.Extra.AVATAR_URL,savedAvatarUrl);  ActivityOptionsCompat optionsCompat=ActivityOptionsCompat.makeSceneTransitionAnimation(context,transitionView,context.getString(R.string.transition_name));  ActivityCompat.startActivityForResult(context,intent,ProfileActivity.REQUEST_AVATAR_SELECTION_CODE,optionsCompat.toBundle());}  }
class C{  protected void saveArchiveFilesChecksums(Map<String,VirtualFile> m){  if (!isSwcChecksumEnabled) {    swcFileChecksums=null;    return;  }  for (  Map.Entry<String,VirtualFile> entry : m.entrySet()) {    VirtualFile file=entry.getValue();    archiveFileChecksums.put(file.getName(),new Long(file.getLastModified()));  }}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public KruskalWallisTest(int numberOfGroups){  super(numberOfGroups);  if (numberOfGroups <= 1) {    throw new IllegalArgumentException("requires two or more groups");  }}  }
class C{  public boolean executeKeyEvent(KeyEvent event){  mTempRect.setEmpty();  if (!canScroll()) {    if (isFocused()) {      View currentFocused=findFocus();      if (currentFocused == this)       currentFocused=null;      View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,View.FOCUS_RIGHT);      return nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_RIGHT);    }    return false;  }  boolean handled=false;  if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_LEFT:      if (!event.isAltPressed()) {        handled=arrowScroll(View.FOCUS_LEFT);      } else {        handled=fullScroll(View.FOCUS_LEFT);      }    break;case KeyEvent.KEYCODE_DPAD_RIGHT:  if (!event.isAltPressed()) {    handled=arrowScroll(View.FOCUS_RIGHT);  } else {    handled=fullScroll(View.FOCUS_RIGHT);  }break;case KeyEvent.KEYCODE_SPACE:pageScroll(event.isShiftPressed() ? View.FOCUS_LEFT : View.FOCUS_RIGHT);break;}}return handled;}  }
class C{  public TourDisplaySetting(){  this(Color.RED);}  }
class C{  void writeSlot(int position,int w0,int w1,int w2,int w3){  position*=slotsize;  int chunkpos=position >> lowbits;  int slotpos=(position & lowmask);  if (chunkpos > chunks.size() - 1)   chunks.addElement(new int[chunkalloc]);  int[] chunk=chunks.elementAt(chunkpos);  chunk[slotpos]=w0;  chunk[slotpos + 1]=w1;  chunk[slotpos + 2]=w2;  chunk[slotpos + 3]=w3;}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public void stop(){synchronized (privateInstanceLock) {    if (connectionAcceptThread == null) {      return;    }  }  isStopped.set(true);  try {    connectionAcceptThread.interrupt();    connectionAcceptThread.join();  } catch (  InterruptedException e) {  }  try {    serverSocket.close();  } catch (  IOException e) {  }}  }
class C{  public void interpolatePathDataNode(PathDataNode nodeFrom,PathDataNode nodeTo,float fraction){  for (int i=0; i < nodeFrom.mParams.length; i++) {    mParams[i]=nodeFrom.mParams[i] * (1 - fraction) + nodeTo.mParams[i] * fraction;  }}  }
class C{  private static <T>void tandemMerge(final T[] keySrc,final long[] valSrc,final int arrStart1,final int arrLen1,final int arrStart2,final int arrLen2,final T[] keyDst,final long[] valDst,final int arrStart3,final Comparator<? super T> comparator){  final int arrStop1=arrStart1 + arrLen1;  final int arrStop2=arrStart2 + arrLen2;  int i1=arrStart1;  int i2=arrStart2;  int i3=arrStart3;  while (i1 < arrStop1 && i2 < arrStop2) {    if (comparator.compare(keySrc[i2],keySrc[i1]) < 0) {      keyDst[i3]=keySrc[i2];      valDst[i3]=valSrc[i2];      i3++;      i2++;    } else {      keyDst[i3]=keySrc[i1];      valDst[i3]=valSrc[i1];      i3++;      i1++;    }  }  if (i1 < arrStop1) {    arraycopy(keySrc,i1,keyDst,i3,arrStop1 - i1);    arraycopy(valSrc,i1,valDst,i3,arrStop1 - i1);  } else {    assert i2 < arrStop2;    arraycopy(keySrc,i2,keyDst,i3,arrStop2 - i2);    arraycopy(valSrc,i2,valDst,i3,arrStop2 - i2);  }}  }
class C{  public final void goBack(){  if (currentNode.parent != null) {    currentPos.unMakeMove(currentNode.move,currentNode.ui);    currentNode=currentNode.parent;  }}  }
class C{  public void breadthFirstTraversal(){  if (root == null)   return;  java.util.Queue<TreeNode<E>> queue=new java.util.LinkedList<>();  queue.add(root);  while (!queue.isEmpty()) {    TreeNode<E> current=queue.element();    if (current.left != null) {      queue.add(current.left);    }    if (current.right != null) {      queue.add(current.right);    }    System.out.print(queue.remove().element + " ");  }}  }
class C{  public void addVariable(String key,String value){  addVariable(key,value,true);}  }
class C{  public PropValidateChecker parents(List<ICalComponent> components){  this.components=components;  return this;}  }
class C{  public Matrix minusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] - B.A[i][j];    }  }  return this;}  }
class C{  @Override public void mousePressed(MouseEvent event){  Point point=event.getPoint();  int currentRow=table.rowAtPoint(point);  table.setRowSelectionInterval(currentRow,currentRow);}  }
class C{  public void go(Writer writer) throws IOException {  buildPage().write(writer);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent ev){  int actionMasked=MotionEventCompat.getActionMasked(ev);  if ((actionMasked & MotionEventCompat.ACTION_MASK) == MotionEvent.ACTION_DOWN) {    mActivePointerId=MotionEventCompat.getPointerId(ev,actionMasked);  }  if (mActivePointerId == INVALID_POINTER) {    return false;  }  mViewDragHelper.processTouchEvent(ev);  return ViewHelper.isViewHit(mContainer,this,(int)ev.getX(),(int)ev.getY());}  }
class C{  public static ASTNode findParentType(ASTNode node,boolean treatModifiersOutside){  StructuralPropertyDescriptor lastLocation=null;  while (node != null) {    if (node instanceof AbstractTypeDeclaration) {      AbstractTypeDeclaration decl=(AbstractTypeDeclaration)node;      if (!treatModifiersOutside || lastLocation != decl.getModifiersProperty()) {        return decl;      }    } else     if (node instanceof AnonymousClassDeclaration) {      return node;    }    lastLocation=node.getLocationInParent();    node=node.getParent();  }  return null;}  }
class C{  public void randomize(){  for (  Neuron neuron : network.getOutputNeurons()) {    neuron.clear();    neuron.randomizeFanIn();    if (neuron.getUpdateRule() instanceof BiasedUpdateRule) {      ((BiasedUpdateRule)neuron.getUpdateRule()).setBias(Math.random());    }  }  revalidateSynapseGroups();}  }
class C{  public void removeLast(K k){  LinkedList<V> l=boxedHashMap.get(k);  if (l != null && l.size() > 0) {    l.remove(l.size() - 1);  }}  }
class C{  @POST @Path("backup/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response createBackup(@QueryParam("tag") String backupTag,@QueryParam("force") @DefaultValue("false") boolean forceCreate){  log.info("Received create backup request, backup tag={}",backupTag);  List<String> descParams=getDescParams(backupTag);  try {    backupOps.createBackup(backupTag,forceCreate);    auditBackup(OperationTypeEnum.CREATE_BACKUP,AuditLogManager.AUDITLOG_SUCCESS,null,descParams.toArray());  } catch (  BackupException e) {    log.error("Failed to create backup(tag={}), e=",backupTag,e);    descParams.add(e.getLocalizedMessage());    auditBackup(OperationTypeEnum.CREATE_BACKUP,AuditLogManager.AUDITLOG_FAILURE,null,descParams.toArray());    throw APIException.internalServerErrors.createObjectError("Backup files",e);  }  return Response.ok().build();}  }
class C{  public static Object instantiate(Class implementedOrExtendedClass,Class clazz) throws ClassInstantiationException {  if (!JavaClassHelper.isSubclassOrImplementsInterface(clazz,implementedOrExtendedClass)) {    if (implementedOrExtendedClass.isInterface()) {      throw new ClassInstantiationException("Class '" + clazz.getName() + "' does not implement interface '"+ implementedOrExtendedClass.getName()+ "'");    }    throw new ClassInstantiationException("Class '" + clazz.getName() + "' does not extend '"+ implementedOrExtendedClass.getName()+ "'");  }  Object obj;  try {    obj=clazz.newInstance();  } catch (  InstantiationException ex) {    throw new ClassInstantiationException("Unable to instantiate from class '" + clazz.getName() + "' via default constructor",ex);  }catch (  IllegalAccessException ex) {    throw new ClassInstantiationException("Illegal access when instantiating class '" + clazz.getName() + "' via default constructor",ex);  }  return obj;}  }
class C{  public Long incr(final String key){  checkIsInMulti();  client.incr(key);  return client.getIntegerReply();}  }
class C{  protected void processAttribute(java.io.Writer writer,String name,String value,ElemDesc elemDesc) throws IOException {  writer.write(' ');  if (((value.length() == 0) || value.equalsIgnoreCase(name)) && elemDesc != null && elemDesc.isAttrFlagSet(name,ElemDesc.ATTREMPTY)) {    writer.write(name);  } else {    writer.write(name);    writer.write("=\"");    if (elemDesc != null && elemDesc.isAttrFlagSet(name,ElemDesc.ATTRURL))     writeAttrURI(writer,value,m_specialEscapeURLs); else     writeAttrString(writer,value,this.getEncoding());    writer.write('"');  }}  }
class C{  public CrowdJob createJob(String template) throws JsonProcessingException, IOException {  ObjectMapper mapper=new ObjectMapper();  JsonNode jsonTemplate=mapper.readTree(template);  CrowdJob job=new CrowdJob(jsonTemplate);  return crowdclient.createNewJob(job);}  }
class C{  public BigInteger generateClientCredentials(byte[] salt,byte[] identity,byte[] password){  this.x=SRP6Util.calculateX(digest,N,salt,identity,password);  this.a=selectPrivateValue();  this.A=g.modPow(a,N);  return A;}  }
class C{  public SegmentTree(int left,int right){  init(left,right);}  }
class C{  private String makeWorkItemTypeFilterWhereClause(final WorkItemType[] workItemTypes){  if (workItemTypes.length == 0) {    return null;  }  final StringBuffer sb=new StringBuffer();  sb.append("(");  for (int i=0; i < workItemTypes.length; i++) {    if (i > 0) {      sb.append(" OR ");    }    sb.append("[");    sb.append(CoreFieldReferenceNames.WORK_ITEM_TYPE);    sb.append("] = \"");    sb.append(workItemTypes[i].getName());    sb.append("\"");  }  sb.append(")");  return sb.toString();}  }
class C{  public PrintStreamDisplay(final PrintStream outputStream,final PrintStream errorStream,final int width,final int height){  super();  Check.notNull(outputStream,"outputStream");  Check.notNull(errorStream,"errorStream");  this.outputStream=outputStream;  this.errorStream=errorStream;  this.width=width;  this.height=height;}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.selectionListeners.add(listener);}  }
class C{  public List<DependencyGraph> findDependenciesWith(String objectName){  Object obj=null;  Dependency objDep=null;  for (  Dependency dep : edges) {    if (dep.depender.toString().contains(objectName)) {      obj=dep.depender;      objDep=dep;      break;    }    if (dep.dependsOn.toString().contains(objectName)) {      obj=dep.dependsOn;      objDep=dep;      break;    }  }  if (obj == null) {    return Collections.emptyList();  }  Set<Object> dependsOnObj=new HashSet<>();  dependsOnObj.add(obj);  boolean anyAdded=true;  while (anyAdded) {    anyAdded=false;    for (    Dependency dep : edges) {      if (dependsOnObj.contains(dep.dependsOn) && !dependsOnObj.contains(dep.depender)) {        anyAdded=true;        dependsOnObj.add(dep.depender);      }    }  }  Set<Object> allDependants=new HashSet<>();  for (  Dependency dep : edges) {    if ((dep.dependsOn instanceof LocalThread)) {      if (dep.depender instanceof MessageKey) {        allDependants.add(dep.dependsOn);      }    } else {      allDependants.add(dep.dependsOn);    }  }  List<DependencyGraph> result=new LinkedList<>();  for (  Object depender : dependsOnObj) {    if (!allDependants.contains(depender)) {      result.add(getSubGraph(depender));    }  }  return result;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(this.getClass().getSimpleName());  sb.append(" transactions=").append(transactions);  sb.append(" fragmentsPerTransaction=").append(fragmentsPerTransaction);  sb.append(" shards=").append(shards);  sb.append(" timestampOffset=").append(timestampOffset);  sb.append(" variation=").append(variation);  return sb.toString();}  }
class C{  final public boolean isAdded(){  return mActivity != null && mAdded;}  }
class C{  public SearchRequest routing(String routing){  this.routing=routing;  return this;}  }
class C{  public static void circle(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("circle radius must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  @Override public Double put(Integer key,Double value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public void print(char x){  out.print(x);  out.flush();}  }
class C{  public static Xid createXid(byte[] GTid) throws XAException {  byte[] globalID=new byte[GTid.length];  byte[] branchID=new byte[1];  branchID[0]=(byte)1;  System.arraycopy(GTid,0,globalID,0,GTid.length);  Xid xid=new XidImpl(0x1234,globalID,branchID);  return xid;}  }
class C{  public String resultProducerTipText(){  return "Set the result producer to use. If some results are not found " + "in the source database then this result producer is used to generate " + "them.";}  }
class C{  @Override public SurfaceData createSurfaceData(WComponentPeer peer,int numBackBuffers){  return super.createSurfaceData(peer,numBackBuffers);}  }
class C{  public void disableCamera(String code,String data){  boolean camFunc=false;  try {    JSONObject inputData=new JSONObject(data);    if (!inputData.isNull(resources.getString(R.string.intent_extra_function)) && inputData.get(resources.getString(R.string.intent_extra_function)).toString().equalsIgnoreCase(resources.getString(R.string.intent_extra_enable))) {      camFunc=false;    } else     if (!inputData.isNull(resources.getString(R.string.intent_extra_function)) && inputData.get(resources.getString(R.string.intent_extra_function)).toString().equalsIgnoreCase(resources.getString(R.string.intent_extra_disable))) {      camFunc=true;    } else     if (!inputData.isNull(resources.getString(R.string.intent_extra_function))) {      camFunc=Boolean.parseBoolean(inputData.get(resources.getString(R.string.intent_extra_function)).toString());    }    ComponentName cameraAdmin=new ComponentName(context,AgentDeviceAdminReceiver.class);    resultBuilder.build(code);    devicePolicyManager.setCameraDisabled(cameraAdmin,camFunc);  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e);  }}  }
class C{  void reportError(String message) throws SAXException {  if (errorHandler != null)   errorHandler.error(makeException(message));}  }
class C{  public static int oddRow1s(int[][] m){  for (int i=0; i < m.length; i++) {    int count=0;    for (int j=0; j < m[i].length; j++) {      if (m[i][j] == 1)       count++;    }    if (count % 2 != 0)     return i;  }  return -1;}  }
class C{  public void testSpecExampleFully() throws Exception {  doTestSpec(true);}  }
class C{  public static String trim(CharSequence s){  if (s == null) {    return null;  }  Matcher m=sTrimPattern.matcher(s);  return m.replaceAll("$1");}  }
class C{  @Override public OkHttpClient clone(){  return new OkHttpClient(this);}  }
class C{  public SlimException(final ErrorType type,final String... args){  this(null,type,args);}  }
class C{  protected void statementLog(String message){  Logger.sqlInfoLog(message);}  }
class C{  public WaferMapRenderer(int paintLimit,int paintIndexMethod){  this(new Integer(paintLimit),new Integer(paintIndexMethod));}  }
class C{  public static boolean isWaiting(final Thread thread){  return (thread != null && thread.getState().equals(State.WAITING));}  }
class C{  public static void isync(){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }}  }
class C{  protected AutouniqueAttribute_Impl(){  super();}  }
class C{  public void reply(AcelaReply r){  boolean currentstate=_memo.getTrafficController().getAcelaTrafficControllerState();  if (!currentstate) {    int replysize=r.getNumDataElements();    if (replysize == 0) {      log.warn("We got an empty reply of size: " + replysize);    } else {      if (replysize == 1) {        byte replyvalue=(byte)(r.getElement(0));        if (replyvalue == 0x00) {        } else {          log.warn("We got a bad return code: " + replyvalue);        }      } else {        for (int i=0; i < replysize; i++) {          byte replynodetype=(byte)(r.getElement(i));          int nodetype;switch (replynodetype) {case 0x00:{              nodetype=AcelaNode.AC;              break;            }case 0x01:{            nodetype=AcelaNode.TB;            break;          }case 0x02:{          nodetype=AcelaNode.D8;          break;        }case 0x03:{        nodetype=AcelaNode.WM;        break;      }case 0x04:{      nodetype=AcelaNode.SM;      break;    }case 0x05:{    nodetype=AcelaNode.SC;    break;  }case 0x06:{  nodetype=AcelaNode.SW;  break;}case 0x07:{nodetype=AcelaNode.YM;break;}case 0x08:{nodetype=AcelaNode.SY;break;}default :{nodetype=AcelaNode.UN;}}int tempaddr=i + 1;new AcelaNode(tempaddr,nodetype,_memo.getTrafficController());log.info("Created a new Acela Node [" + tempaddr + "] as a result of Acela network Poll of type: "+ replynodetype);}_memo.getTrafficController().setAcelaTrafficControllerState(true);}}} else {int replysize=r.getNumDataElements();if (replysize > 1) {AcelaTrafficController.instance().updateSensorsFromPoll(r);}}}  }
class C{  private static ReserveResponse checkReserveResponse(ReserveResponse reserveResponse) throws RpcException {  logger.info("Checking {}",reserveResponse);switch (reserveResponse.getResult()) {case OK:    break;case STALE_GENERATION:  logger.warn("Reserving resource failed with error: {}",reserveResponse.getError());throw new StaleGenerationException(reserveResponse.getError());case SYSTEM_ERROR:logger.warn("Reserving resource failed with error: {}",reserveResponse.getError());throw new SystemErrorException(reserveResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",reserveResponse.getResult()));}return reserveResponse;}  }
class C{  public static void main(String[] args){  if (args.length < 1) {    System.err.println("usage: java ToIndexFileConverter myfile.jaif [stubfile...]");    System.err.println("(myfile.jaif contains needed annotation definitions)");    System.exit(1);  }  AScene scene=new AScene();  try {    IndexFileParser.parseFile(args[0],scene);    if (args.length == 1) {      convert(scene,System.in,System.out);      return;    }    for (int i=1; i < args.length; i++) {      String f0=args[i];      String f1=(f0.endsWith(".astub") ? f0.substring(0,f0.length() - 6) : f0) + ".jaif";      try (InputStream in=new FileInputStream(f0);OutputStream out=new FileOutputStream(f1)){        convert(new AScene(scene),in,out);      }     }  } catch (  Throwable e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  private ExprCfg parseTerm(){  ExprCfg term=parseSimpleTerm();  while (true) {    ExprToken token=scanToken();switch (token) {case LPAREN:{        ExprCfg[] args=parseArgs();        ExprCfg expr=term.createMethod(args);        if (expr == null)         throw error(L.l("Method call not supported in this context `{0}'.",term));        term=expr;        break;      }case DOT:{      int ch=skipWhitespace(read());      if (!Character.isJavaIdentifierStart((char)ch))       throw error(L.l("Expected `]' at {0}.  Field references must be identifiers.",badChar(ch)));      String field=readName(ch);      term=term.createField(field);      break;    }default :  unreadToken();return term;}}}  }
class C{  static public void handleTypeError(final Throwable t,final IValueExpression<?> expr,final BOpStats stats){  stats.typeErrors.increment();  if (log.isInfoEnabled())   log.info("Type error: expr=" + expr + ", cause="+ t);}  }
class C{  private void handleProcessOutput(Process process){  try (BufferedReader br=new BufferedReader(new InputStreamReader(process.getInputStream()))){    String line;    while ((line=br.readLine()) != null) {      logger.info("PROCESS OUTPUT >>>    " + line);    }  } catch (  IOException e) {    logger.log(SEVERE,"Failed to read output from external Process: ",e.getCause());  }}  }
class C{  private static boolean sync(FileOutputStream stream){  try {    if (stream != null) {      stream.getFD().sync();    }    return true;  } catch (  IOException e) {  }  return false;}  }
class C{  public boolean add(int value){  int index=value % this.numBuckets;  Bucket bucket=this.buckets[index];  if (bucket == null) {    bucket=this.buckets[index]=new Bucket(this.bucketInitialCapacity);  } else {    for (int i=0; i < bucket.length; i++) {      if (bucket.values[i] == value)       return false;    }  }  if (bucket.values.length <= bucket.length) {    int[] tmp=new int[2 * bucket.values.length];    System.arraycopy(bucket.values,0,tmp,0,bucket.values.length);    bucket.values=tmp;  }  bucket.values[bucket.length++]=value;  this.size++;  return true;}  }
class C{  public Minutes minus(int minutes){  return plus(FieldUtils.safeNegate(minutes));}  }
class C{  protected MaterializedViewFilterScanRule(RelOptRuleOperand operand,String description){  super(operand,description);}  }
class C{  private static int bitsRequired(final int[] data){  long or=0;  for (int i=0; i < BLOCK_SIZE; ++i) {    assert data[i] >= 0;    or|=data[i];  }  return PackedInts.bitsRequired(or);}  }
class C{  public static Tree<String> processTree(Tree<String> unAnnotatedTree,int nVerticalAnnotations,int nHorizontalAnnotations,Binarization binarization,boolean manualAnnotation){  return processTree(unAnnotatedTree,nVerticalAnnotations,nHorizontalAnnotations,binarization,manualAnnotation,false,true);}  }
class C{  public static VisorTransactionConfiguration from(TransactionConfiguration src){  VisorTransactionConfiguration cfg=new VisorTransactionConfiguration();  cfg.dfltTxConcurrency=src.getDefaultTxConcurrency();  cfg.dfltTxIsolation=src.getDefaultTxIsolation();  cfg.dfltTxTimeout=src.getDefaultTxTimeout();  cfg.pessimisticTxLogLinger=src.getPessimisticTxLogLinger();  cfg.pessimisticTxLogSize=src.getPessimisticTxLogSize();  cfg.txSerEnabled=src.isTxSerializableEnabled();  return cfg;}  }
class C{  private void ib5(int a,int b,int c,int d){  int t1=~c;  int t2=b & t1;  int t3=d ^ t2;  int t4=a & t3;  int t5=b ^ t1;  X3=t4 ^ t5;  int t7=b | X3;  int t8=a & t7;  X1=t3 ^ t8;  int t10=a | d;  int t11=t1 ^ t7;  X0=t10 ^ t11;  X2=(b & t10) ^ (t4 | (a ^ c));}  }
class C{  public void toOrigin(){  this.translation.zero();}  }
class C{  public JAttributeTextField(){}  }
class C{  public static ReceiveResponse receive(String receivingAddress,String callbackUrl) throws APIException, IOException {  return receive(receivingAddress,callbackUrl,null);}  }
class C{  public static URI toURI(final String uriString) throws URISyntaxException {  URI uri;  try {    uri=new URI(uriString);  } catch (  URISyntaxException e) {    String encodedURIString=encodeURI(uriString);    try {      uri=new URI(encodedURIString);    } catch (    URISyntaxException e1) {      if (e.getCause() == null) {        e.initCause(e1);      }      throw e;    }  }  return uri;}  }
class C{  public void requestThrottleSetup(LocoAddress address,boolean control){  EliteXNetThrottle throttle;  if (log.isDebugEnabled()) {    log.debug("Requesting Throttle: " + address);  }  if (throttles.containsKey(address)) {    notifyThrottleKnown(throttles.get(address),address);  } else {    throttle=new EliteXNetThrottle((XNetSystemConnectionMemo)adapterMemo,address,tc);    throttles.put(address,throttle);    notifyThrottleKnown(throttle,address);  }}  }
class C{  public Type merge(Type other,Scene cm){  if (other instanceof RefType)   return other;  throw new RuntimeException("illegal type merge: " + this + " and "+ other);}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  public void dynInit() throws Exception {  int AD_Column_ID=3505;  MLookup lookupCur=MLookupFactory.get(Env.getCtx(),form.getWindowNo(),0,AD_Column_ID,DisplayType.TableDir);  currencyPick=new WTableDirEditor("C_Currency_ID",true,false,true,lookupCur);  currencyPick.setValue(new Integer(m_C_Currency_ID));  currencyPick.addValueChangeListener(this);  AD_Column_ID=839;  MLookup lookupOrg=MLookupFactory.get(Env.getCtx(),form.getWindowNo(),0,AD_Column_ID,DisplayType.TableDir);  organizationPick=new WTableDirEditor("AD_Org_ID",true,false,true,lookupOrg);  organizationPick.setValue(Env.getAD_Org_ID(Env.getCtx()));  organizationPick.addValueChangeListener(this);  AD_Column_ID=3499;  MLookup lookupBP=MLookupFactory.get(Env.getCtx(),form.getWindowNo(),0,AD_Column_ID,DisplayType.Search);  bpartnerSearch=new WSearchEditor("C_BPartner_ID",true,false,true,lookupBP);  bpartnerSearch.addValueChangeListener(this);  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"AllocateStatus"));  statusBar.setStatusDB("");  dateField.setValue(Env.getContextAsDate(Env.getCtx(),"#Date"));  dateField.addValueChangeListener(this);  AD_Column_ID=61804;  MLookup lookupCharge=MLookupFactory.get(Env.getCtx(),form.getWindowNo(),0,AD_Column_ID,DisplayType.TableDir);  chargePick=new WTableDirEditor("C_Charge_ID",true,false,true,lookupCharge);  chargePick.setValue(new Integer(m_C_Charge_ID));  chargePick.addValueChangeListener(this);}  }
class C{  private String buildStopMessage(){  JsonObject stopMessage=new JsonObject();  stopMessage.addProperty(ACTION,STOP);  return stopMessage.toString();}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof CGRect) {    if (this == o)     return true;    CGRect rect=(CGRect)o;    return (x == rect.x && y == rect.y && width == rect.width && height == rect.height);  }  return false;}  }
class C{  protected void updateUs(){  try {    setText(m_Editor.getAsText());  } catch (  IllegalArgumentException ex) {  }}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  protected boolean processMsg(int msgId) throws IOException {  if (msgId == -1)   return false;switch (msgId) {case TICK_PRICE:{      int version=readInt();      int tickerId=readInt();      int tickType=readInt();      double price=readDouble();      int size=0;      if (version >= 2) {        size=readInt();      }      int canAutoExecute=0;      if (version >= 3) {        canAutoExecute=readInt();      }      eWrapper().tickPrice(tickerId,tickType,price,canAutoExecute);      if (version >= 2) {        int sizeTickType=-1;switch (tickType) {case 1:          sizeTickType=0;        break;case 2:      sizeTickType=3;    break;case 4:  sizeTickType=5;break;}if (sizeTickType != -1) {eWrapper().tickSize(tickerId,sizeTickType,size);}}break;}case TICK_SIZE:{int version=readInt();int tickerId=readInt();int tickType=readInt();int size=readInt();eWrapper().tickSize(tickerId,tickType,size);break;}case POSITION:{int version=readInt();String account=readStr();Contract contract=new Contract();contract.m_conId=readInt();contract.m_symbol=readStr();contract.m_secType=readStr();contract.m_expiry=readStr();contract.m_strike=readDouble();contract.m_right=readStr();contract.m_multiplier=readStr();contract.m_exchange=readStr();contract.m_currency=readStr();contract.m_localSymbol=readStr();if (version >= 2) {contract.m_tradingClass=readStr();}int pos=readInt();double avgCost=0;if (version >= 3) {avgCost=readDouble();}eWrapper().position(account,contract,pos,avgCost);break;}case POSITION_END:{int version=readInt();eWrapper().positionEnd();break;}case ACCOUNT_SUMMARY:{int version=readInt();int reqId=readInt();String account=readStr();String tag=readStr();String value=readStr();String currency=readStr();eWrapper().accountSummary(reqId,account,tag,value,currency);break;}case ACCOUNT_SUMMARY_END:{int version=readInt();int reqId=readInt();eWrapper().accountSummaryEnd(reqId);break;}case TICK_OPTION_COMPUTATION:{int version=readInt();int tickerId=readInt();int tickType=readInt();double impliedVol=readDouble();if (impliedVol < 0) {impliedVol=Double.MAX_VALUE;}double delta=readDouble();if (Math.abs(delta) > 1) {delta=Double.MAX_VALUE;}double optPrice=Double.MAX_VALUE;double pvDividend=Double.MAX_VALUE;double gamma=Double.MAX_VALUE;double vega=Double.MAX_VALUE;double theta=Double.MAX_VALUE;double undPrice=Double.MAX_VALUE;if (version >= 6 || tickType == TickType.MODEL_OPTION) {optPrice=readDouble();if (optPrice < 0) {optPrice=Double.MAX_VALUE;}pvDividend=readDouble();if (pvDividend < 0) {pvDividend=Double.MAX_VALUE;}}if (version >= 6) {gamma=readDouble();if (Math.abs(gamma) > 1) {gamma=Double.MAX_VALUE;}vega=readDouble();if (Math.abs(vega) > 1) {vega=Double.MAX_VALUE;}theta=readDouble();if (Math.abs(theta) > 1) {theta=Double.MAX_VALUE;}undPrice=readDouble();if (undPrice < 0) {undPrice=Double.MAX_VALUE;}}eWrapper().tickOptionComputation(tickerId,tickType,impliedVol,delta,optPrice,pvDividend,gamma,vega,theta,undPrice);break;}case TICK_GENERIC:{int version=readInt();int tickerId=readInt();int tickType=readInt();double value=readDouble();eWrapper().tickGeneric(tickerId,tickType,value);break;}case TICK_STRING:{int version=readInt();int tickerId=readInt();int tickType=readInt();String value=readStr();eWrapper().tickString(tickerId,tickType,value);break;}case TICK_EFP:{int version=readInt();int tickerId=readInt();int tickType=readInt();double basisPoints=readDouble();String formattedBasisPoints=readStr();double impliedFuturesPrice=readDouble();int holdDays=readInt();String futureExpiry=readStr();double dividendImpact=readDouble();double dividendsToExpiry=readDouble();eWrapper().tickEFP(tickerId,tickType,basisPoints,formattedBasisPoints,impliedFuturesPrice,holdDays,futureExpiry,dividendImpact,dividendsToExpiry);break;}case ORDER_STATUS:{int version=readInt();int id=readInt();String status=readStr();int filled=readInt();int remaining=readInt();double avgFillPrice=readDouble();int permId=0;if (version >= 2) {permId=readInt();}int parentId=0;if (version >= 3) {parentId=readInt();}double lastFillPrice=0;if (version >= 4) {lastFillPrice=readDouble();}int clientId=0;if (version >= 5) {clientId=readInt();}String whyHeld=null;if (version >= 6) {whyHeld=readStr();}eWrapper().orderStatus(id,status,filled,remaining,avgFillPrice,permId,parentId,lastFillPrice,clientId,whyHeld);break;}case ACCT_VALUE:{int version=readInt();String key=readStr();String val=readStr();String cur=readStr();String accountName=null;if (version >= 2) {accountName=readStr();}eWrapper().updateAccountValue(key,val,cur,accountName);break;}case PORTFOLIO_VALUE:{int version=readInt();Contract contract=new Contract();if (version >= 6) {contract.m_conId=readInt();}contract.m_symbol=readStr();contract.m_secType=readStr();contract.m_expiry=readStr();contract.m_strike=readDouble();contract.m_right=readStr();if (version >= 7) {contract.m_multiplier=readStr();contract.m_primaryExch=readStr();}contract.m_currency=readStr();if (version >= 2) {contract.m_localSymbol=readStr();}if (version >= 8) {contract.m_tradingClass=readStr();}int position=readInt();double marketPrice=readDouble();double marketValue=readDouble();double averageCost=0.0;double unrealizedPNL=0.0;double realizedPNL=0.0;if (version >= 3) {averageCost=readDouble();unrealizedPNL=readDouble();realizedPNL=readDouble();}String accountName=null;if (version >= 4) {accountName=readStr();}if (version == 6 && m_parent.serverVersion() == 39) {contract.m_primaryExch=readStr();}eWrapper().updatePortfolio(contract,position,marketPrice,marketValue,averageCost,unrealizedPNL,realizedPNL,accountName);break;}case ACCT_UPDATE_TIME:{int version=readInt();String timeStamp=readStr();eWrapper().updateAccountTime(timeStamp);break;}case ERR_MSG:{int version=readInt();if (version < 2) {String msg=readStr();m_parent.error(msg);} else {int id=readInt();int errorCode=readInt();String errorMsg=readStr();m_parent.error(id,errorCode,errorMsg);}break;}case OPEN_ORDER:{int version=readInt();Order order=new Order();order.m_orderId=readInt();Contract contract=new Contract();if (version >= 17) {contract.m_conId=readInt();}contract.m_symbol=readStr();contract.m_secType=readStr();contract.m_expiry=readStr();contract.m_strike=readDouble();contract.m_right=readStr();if (version >= 32) {contract.m_multiplier=readStr();}contract.m_exchange=readStr();contract.m_currency=readStr();if (version >= 2) {contract.m_localSymbol=readStr();}if (version >= 32) {contract.m_tradingClass=readStr();}order.m_action=readStr();order.m_totalQuantity=readInt();order.m_orderType=readStr();if (version < 29) {order.m_lmtPrice=readDouble();} else {order.m_lmtPrice=readDoubleMax();}if (version < 30) {order.m_auxPrice=readDouble();} else {order.m_auxPrice=readDoubleMax();}order.m_tif=readStr();order.m_ocaGroup=readStr();order.m_account=readStr();order.m_openClose=readStr();order.m_origin=readInt();order.m_orderRef=readStr();if (version >= 3) {order.m_clientId=readInt();}if (version >= 4) {order.m_permId=readInt();if (version < 18) {readBoolFromInt();} else {order.m_outsideRth=readBoolFromInt();}order.m_hidden=readInt() == 1;order.m_discretionaryAmt=readDouble();}if (version >= 5) {order.m_goodAfterTime=readStr();}if (version >= 6) {readStr();}if (version >= 7) {order.m_faGroup=readStr();order.m_faMethod=readStr();order.m_faPercentage=readStr();order.m_faProfile=readStr();}if (version >= 8) {order.m_goodTillDate=readStr();}if (version >= 9) {order.m_rule80A=readStr();order.m_percentOffset=readDoubleMax();order.m_settlingFirm=readStr();order.m_shortSaleSlot=readInt();order.m_designatedLocation=readStr();if (m_parent.serverVersion() == 51) {readInt();} else if (version >= 23) {order.m_exemptCode=readInt();}order.m_auctionStrategy=readInt();order.m_startingPrice=readDoubleMax();order.m_stockRefPrice=readDoubleMax();order.m_delta=readDoubleMax();order.m_stockRangeLower=readDoubleMax();order.m_stockRangeUpper=readDoubleMax();order.m_displaySize=readInt();if (version < 18) {readBoolFromInt();}order.m_blockOrder=readBoolFromInt();order.m_sweepToFill=readBoolFromInt();order.m_allOrNone=readBoolFromInt();order.m_minQty=readIntMax();order.m_ocaType=readInt();order.m_eTradeOnly=readBoolFromInt();order.m_firmQuoteOnly=readBoolFromInt();order.m_nbboPriceCap=readDoubleMax();}if (version >= 10) {order.m_parentId=readInt();order.m_triggerMethod=readInt();}if (version >= 11) {order.m_volatility=readDoubleMax();order.m_volatilityType=readInt();if (version == 11) {int receivedInt=readInt();order.m_deltaNeutralOrderType=((receivedInt == 0) ? "NONE" : "MKT");} else {order.m_deltaNeutralOrderType=readStr();order.m_deltaNeutralAuxPrice=readDoubleMax();if (version >= 27 && !Util.StringIsEmpty(order.m_deltaNeutralOrderType)) {order.m_deltaNeutralConId=readInt();order.m_deltaNeutralSettlingFirm=readStr();order.m_deltaNeutralClearingAccount=readStr();order.m_deltaNeutralClearingIntent=readStr();}if (version >= 31 && !Util.StringIsEmpty(order.m_deltaNeutralOrderType)) {order.m_deltaNeutralOpenClose=readStr();order.m_deltaNeutralShortSale=readBoolFromInt();order.m_deltaNeutralShortSaleSlot=readInt();order.m_deltaNeutralDesignatedLocation=readStr();}}order.m_continuousUpdate=readInt();if (m_parent.serverVersion() == 26) {order.m_stockRangeLower=readDouble();order.m_stockRangeUpper=readDouble();}order.m_referencePriceType=readInt();}if (version >= 13) {order.m_trailStopPrice=readDoubleMax();}if (version >= 30) {order.m_trailingPercent=readDoubleMax();}if (version >= 14) {order.m_basisPoints=readDoubleMax();order.m_basisPointsType=readIntMax();contract.m_comboLegsDescrip=readStr();}if (version >= 29) {int comboLegsCount=readInt();if (comboLegsCount > 0) {contract.m_comboLegs=new Vector<ComboLeg>(comboLegsCount);for (int i=0; i < comboLegsCount; ++i) {int conId=readInt();int ratio=readInt();String action=readStr();String exchange=readStr();int openClose=readInt();int shortSaleSlot=readInt();String designatedLocation=readStr();int exemptCode=readInt();ComboLeg comboLeg=new ComboLeg(conId,ratio,action,exchange,openClose,shortSaleSlot,designatedLocation,exemptCode);contract.m_comboLegs.add(comboLeg);}}int orderComboLegsCount=readInt();if (orderComboLegsCount > 0) {order.m_orderComboLegs=new Vector<OrderComboLeg>(orderComboLegsCount);for (int i=0; i < orderComboLegsCount; ++i) {double price=readDoubleMax();OrderComboLeg orderComboLeg=new OrderComboLeg(price);order.m_orderComboLegs.add(orderComboLeg);}}}if (version >= 26) {int smartComboRoutingParamsCount=readInt();if (smartComboRoutingParamsCount > 0) {order.m_smartComboRoutingParams=new Vector<TagValue>(smartComboRoutingParamsCount);for (int i=0; i < smartComboRoutingParamsCount; ++i) {TagValue tagValue=new TagValue();tagValue.m_tag=readStr();tagValue.m_value=readStr();order.m_smartComboRoutingParams.add(tagValue);}}}if (version >= 15) {if (version >= 20) {order.m_scaleInitLevelSize=readIntMax();order.m_scaleSubsLevelSize=readIntMax();} else {readIntMax();order.m_scaleInitLevelSize=readIntMax();}order.m_scalePriceIncrement=readDoubleMax();}if (version >= 28 && order.m_scalePriceIncrement > 0.0 && order.m_scalePriceIncrement != Double.MAX_VALUE) {order.m_scalePriceAdjustValue=readDoubleMax();order.m_scalePriceAdjustInterval=readIntMax();order.m_scaleProfitOffset=readDoubleMax();order.m_scaleAutoReset=readBoolFromInt();order.m_scaleInitPosition=readIntMax();order.m_scaleInitFillQty=readIntMax();order.m_scaleRandomPercent=readBoolFromInt();}if (version >= 24) {order.m_hedgeType=readStr();if (!Util.StringIsEmpty(order.m_hedgeType)) {order.m_hedgeParam=readStr();}}if (version >= 25) {order.m_optOutSmartRouting=readBoolFromInt();}if (version >= 19) {order.m_clearingAccount=readStr();order.m_clearingIntent=readStr();}if (version >= 22) {order.m_notHeld=readBoolFromInt();}if (version >= 20) {if (readBoolFromInt()) {UnderComp underComp=new UnderComp();underComp.m_conId=readInt();underComp.m_delta=readDouble();underComp.m_price=readDouble();contract.m_underComp=underComp;}}if (version >= 21) {order.m_algoStrategy=readStr();if (!Util.StringIsEmpty(order.m_algoStrategy)) {int algoParamsCount=readInt();if (algoParamsCount > 0) {order.m_algoParams=new Vector<TagValue>(algoParamsCount);for (int i=0; i < algoParamsCount; ++i) {TagValue tagValue=new TagValue();tagValue.m_tag=readStr();tagValue.m_value=readStr();order.m_algoParams.add(tagValue);}}}}OrderState orderState=new OrderState();if (version >= 16) {order.m_whatIf=readBoolFromInt();orderState.m_status=readStr();orderState.m_initMargin=readStr();orderState.m_maintMargin=readStr();orderState.m_equityWithLoan=readStr();orderState.m_commission=readDoubleMax();orderState.m_minCommission=readDoubleMax();orderState.m_maxCommission=readDoubleMax();orderState.m_commissionCurrency=readStr();orderState.m_warningText=readStr();}eWrapper().openOrder(order.m_orderId,contract,order,orderState);break;}case NEXT_VALID_ID:{int version=readInt();int orderId=readInt();eWrapper().nextValidId(orderId);break;}case SCANNER_DATA:{ContractDetails contract=new ContractDetails();int version=readInt();int tickerId=readInt();int numberOfElements=readInt();for (int ctr=0; ctr < numberOfElements; ctr++) {int rank=readInt();if (version >= 3) {contract.m_summary.m_conId=readInt();}contract.m_summary.m_symbol=readStr();contract.m_summary.m_secType=readStr();contract.m_summary.m_expiry=readStr();contract.m_summary.m_strike=readDouble();contract.m_summary.m_right=readStr();contract.m_summary.m_exchange=readStr();contract.m_summary.m_currency=readStr();contract.m_summary.m_localSymbol=readStr();contract.m_marketName=readStr();contract.m_summary.m_tradingClass=readStr();String distance=readStr();String benchmark=readStr();String projection=readStr();String legsStr=null;if (version >= 2) {legsStr=readStr();}eWrapper().scannerData(tickerId,rank,contract,distance,benchmark,projection,legsStr);}eWrapper().scannerDataEnd(tickerId);break;}case CONTRACT_DATA:{int version=readInt();int reqId=-1;if (version >= 3) {reqId=readInt();}ContractDetails contract=new ContractDetails();contract.m_summary.m_symbol=readStr();contract.m_summary.m_secType=readStr();contract.m_summary.m_expiry=readStr();contract.m_summary.m_strike=readDouble();contract.m_summary.m_right=readStr();contract.m_summary.m_exchange=readStr();contract.m_summary.m_currency=readStr();contract.m_summary.m_localSymbol=readStr();contract.m_marketName=readStr();contract.m_summary.m_tradingClass=readStr();contract.m_summary.m_conId=readInt();contract.m_minTick=readDouble();contract.m_summary.m_multiplier=readStr();contract.m_orderTypes=readStr();contract.m_validExchanges=readStr();if (version >= 2) {contract.m_priceMagnifier=readInt();}if (version >= 4) {contract.m_underConId=readInt();}if (version >= 5) {contract.m_longName=readStr();contract.m_summary.m_primaryExch=readStr();}if (version >= 6) {contract.m_contractMonth=readStr();contract.m_industry=readStr();contract.m_category=readStr();contract.m_subcategory=readStr();contract.m_timeZoneId=readStr();contract.m_tradingHours=readStr();contract.m_liquidHours=readStr();}if (version >= 8) {contract.m_evRule=readStr();contract.m_evMultiplier=readDouble();}if (version >= 7) {int secIdListCount=readInt();if (secIdListCount > 0) {contract.m_secIdList=new Vector<TagValue>(secIdListCount);for (int i=0; i < secIdListCount; ++i) {TagValue tagValue=new TagValue();tagValue.m_tag=readStr();tagValue.m_value=readStr();contract.m_secIdList.add(tagValue);}}}eWrapper().contractDetails(reqId,contract);break;}case BOND_CONTRACT_DATA:{int version=readInt();int reqId=-1;if (version >= 3) {reqId=readInt();}ContractDetails contract=new ContractDetails();contract.m_summary.m_symbol=readStr();contract.m_summary.m_secType=readStr();contract.m_cusip=readStr();contract.m_coupon=readDouble();contract.m_maturity=readStr();contract.m_issueDate=readStr();contract.m_ratings=readStr();contract.m_bondType=readStr();contract.m_couponType=readStr();contract.m_convertible=readBoolFromInt();contract.m_callable=readBoolFromInt();contract.m_putable=readBoolFromInt();contract.m_descAppend=readStr();contract.m_summary.m_exchange=readStr();contract.m_summary.m_currency=readStr();contract.m_marketName=readStr();contract.m_summary.m_tradingClass=readStr();contract.m_summary.m_conId=readInt();contract.m_minTick=readDouble();contract.m_orderTypes=readStr();contract.m_validExchanges=readStr();if (version >= 2) {contract.m_nextOptionDate=readStr();contract.m_nextOptionType=readStr();contract.m_nextOptionPartial=readBoolFromInt();contract.m_notes=readStr();}if (version >= 4) {contract.m_longName=readStr();}if (version >= 6) {contract.m_evRule=readStr();contract.m_evMultiplier=readDouble();}if (version >= 5) {int secIdListCount=readInt();if (secIdListCount > 0) {contract.m_secIdList=new Vector<TagValue>(secIdListCount);for (int i=0; i < secIdListCount; ++i) {TagValue tagValue=new TagValue();tagValue.m_tag=readStr();tagValue.m_value=readStr();contract.m_secIdList.add(tagValue);}}}eWrapper().bondContractDetails(reqId,contract);break;}case EXECUTION_DATA:{int version=readInt();int reqId=-1;if (version >= 7) {reqId=readInt();}int orderId=readInt();Contract contract=new Contract();if (version >= 5) {contract.m_conId=readInt();}contract.m_symbol=readStr();contract.m_secType=readStr();contract.m_expiry=readStr();contract.m_strike=readDouble();contract.m_right=readStr();if (version >= 9) {contract.m_multiplier=readStr();}contract.m_exchange=readStr();contract.m_currency=readStr();contract.m_localSymbol=readStr();if (version >= 10) {contract.m_tradingClass=readStr();}Execution exec=new Execution();exec.m_orderId=orderId;exec.m_execId=readStr();exec.m_time=readStr();exec.m_acctNumber=readStr();exec.m_exchange=readStr();exec.m_side=readStr();exec.m_shares=readInt();exec.m_price=readDouble();if (version >= 2) {exec.m_permId=readInt();}if (version >= 3) {exec.m_clientId=readInt();}if (version >= 4) {exec.m_liquidation=readInt();}if (version >= 6) {exec.m_cumQty=readInt();exec.m_avgPrice=readDouble();}if (version >= 8) {exec.m_orderRef=readStr();}if (version >= 9) {exec.m_evRule=readStr();exec.m_evMultiplier=readDouble();}eWrapper().execDetails(reqId,contract,exec);break;}case MARKET_DEPTH:{int version=readInt();int id=readInt();int position=readInt();int operation=readInt();int side=readInt();double price=readDouble();int size=readInt();eWrapper().updateMktDepth(id,position,operation,side,price,size);break;}case MARKET_DEPTH_L2:{int version=readInt();int id=readInt();int position=readInt();String marketMaker=readStr();int operation=readInt();int side=readInt();double price=readDouble();int size=readInt();eWrapper().updateMktDepthL2(id,position,marketMaker,operation,side,price,size);break;}case NEWS_BULLETINS:{int version=readInt();int newsMsgId=readInt();int newsMsgType=readInt();String newsMessage=readStr();String originatingExch=readStr();eWrapper().updateNewsBulletin(newsMsgId,newsMsgType,newsMessage,originatingExch);break;}case MANAGED_ACCTS:{int version=readInt();String accountsList=readStr();eWrapper().managedAccounts(accountsList);break;}case RECEIVE_FA:{int version=readInt();int faDataType=readInt();String xml=readStr();eWrapper().receiveFA(faDataType,xml);break;}case HISTORICAL_DATA:{int version=readInt();int reqId=readInt();String startDateStr;String endDateStr;String completedIndicator="finished";if (version >= 2) {startDateStr=readStr();endDateStr=readStr();completedIndicator+="-" + startDateStr + "-"+ endDateStr;}int itemCount=readInt();for (int ctr=0; ctr < itemCount; ctr++) {String date=readStr();double open=readDouble();double high=readDouble();double low=readDouble();double close=readDouble();int volume=readInt();double WAP=readDouble();String hasGaps=readStr();int barCount=-1;if (version >= 3) {barCount=readInt();}eWrapper().historicalData(reqId,date,open,high,low,close,volume,barCount,WAP,Boolean.valueOf(hasGaps).booleanValue());}eWrapper().historicalData(reqId,completedIndicator,-1,-1,-1,-1,-1,-1,-1,false);break;}case SCANNER_PARAMETERS:{int version=readInt();String xml=readStr();eWrapper().scannerParameters(xml);break;}case CURRENT_TIME:{readInt();long time=readLong();eWrapper().currentTime(time);break;}case REAL_TIME_BARS:{readInt();int reqId=readInt();long time=readLong();double open=readDouble();double high=readDouble();double low=readDouble();double close=readDouble();long volume=readLong();double wap=readDouble();int count=readInt();eWrapper().realtimeBar(reqId,time,open,high,low,close,volume,wap,count);break;}case FUNDAMENTAL_DATA:{readInt();int reqId=readInt();String data=readStr();eWrapper().fundamentalData(reqId,data);break;}case CONTRACT_DATA_END:{readInt();int reqId=readInt();eWrapper().contractDetailsEnd(reqId);break;}case OPEN_ORDER_END:{readInt();eWrapper().openOrderEnd();break;}case ACCT_DOWNLOAD_END:{readInt();String accountName=readStr();eWrapper().accountDownloadEnd(accountName);break;}case EXECUTION_DATA_END:{readInt();int reqId=readInt();eWrapper().execDetailsEnd(reqId);break;}case DELTA_NEUTRAL_VALIDATION:{readInt();int reqId=readInt();UnderComp underComp=new UnderComp();underComp.m_conId=readInt();underComp.m_delta=readDouble();underComp.m_price=readDouble();eWrapper().deltaNeutralValidation(reqId,underComp);break;}case TICK_SNAPSHOT_END:{readInt();int reqId=readInt();eWrapper().tickSnapshotEnd(reqId);break;}case MARKET_DATA_TYPE:{readInt();int reqId=readInt();int marketDataType=readInt();eWrapper().marketDataType(reqId,marketDataType);break;}case COMMISSION_REPORT:{readInt();CommissionReport commissionReport=new CommissionReport();commissionReport.m_execId=readStr();commissionReport.m_commission=readDouble();commissionReport.m_currency=readStr();commissionReport.m_realizedPNL=readDouble();commissionReport.m_yield=readDouble();commissionReport.m_yieldRedemptionDate=readInt();eWrapper().commissionReport(commissionReport);break;}case VERIFY_MESSAGE_API:{readInt();String apiData=readStr();eWrapper().verifyMessageAPI(apiData);break;}case VERIFY_COMPLETED:{readInt();String isSuccessfulStr=readStr();boolean isSuccessful="true".equals(isSuccessfulStr);String errorText=readStr();if (isSuccessful) {m_parent.startAPI();}eWrapper().verifyCompleted(isSuccessful,errorText);break;}case DISPLAY_GROUP_LIST:{readInt();int reqId=readInt();String groups=readStr();eWrapper().displayGroupList(reqId,groups);break;}case DISPLAY_GROUP_UPDATED:{readInt();int reqId=readInt();String contractInfo=readStr();eWrapper().displayGroupUpdated(reqId,contractInfo);break;}default :{m_parent.error(EClientErrors.NO_VALID_ID,EClientErrors.UNKNOWN_ID.code(),EClientErrors.UNKNOWN_ID.msg());return false;}}return true;}  }
class C{  public static void allocateSpaceForSysCall(IR ir){  StackManager sm=(StackManager)ir.stackManager;  int nToSave=PhysicalRegisterSet.getNumberOfNonvolatileGPRs() + 1;  sm.allocateSpaceForSysCall(nToSave);}  }
class C{  public boolean containsKey(Object name){  Method method=getReadMethod(name);  return method != null;}  }
class C{  public RequestHandle post(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public static Object callStaticMethod(Class<?> clazz,String methodName,Class<?>[] parameterTypes,Object... args){  try {    return findMethodBestMatch(clazz,methodName,parameterTypes,args).invoke(null,args);  } catch (  IllegalAccessException e) {    DexposedBridge.log(e);    throw new IllegalAccessError(e.getMessage());  }catch (  IllegalArgumentException e) {    throw e;  }catch (  InvocationTargetException e) {    throw new InvocationTargetError(e.getCause());  }}  }
class C{  public void signOut(){  this.mPubNub.unsubscribeAll();  SharedPreferences.Editor edit=mSharedPrefs.edit();  edit.remove(Constants.CHAT_USERNAME);  edit.apply();  Intent intent=new Intent(this,LoginActivity.class);  intent.putExtra("oldUsername",this.username);  startActivity(intent);}  }
class C{  public DefinedParamType(String type,Parameter param){  this(type);  parameter=Optional.of(param);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.473 -0400",hash_original_method="54B5A34E53A0B96BE3D94E0D4A7D572A",hash_generated_method="3D6BB7F1FA6BA070C87313FFEA7AFD38") @Override public int read() throws IOException {  try {    beforeRead(1);    int b=in.read();    afterRead(b != -1 ? 1 : -1);    return b;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public void addHeader(View view){  bookends.addHeader(view);}  }
class C{  private void extractTemplates() throws WikiApiException {  PageIterator pageIter=new PageIterator(getWiki(),true,pageBuffer);  RevisionApi revApi=new RevisionApi(dbConf);  int pageCounter=0;  long revisionCounter=0L;  while (pageIter.hasNext()) {    pageCounter++;    if (pageCounter % VERBOSITY == 0) {      logger.info(pageCounter + " pages processed ...");    }    Page curPage=pageIter.next();    int curPageId=curPage.getPageId();    if (mode.active_for_pages) {      fillMapWithTemplateData(curPage.getText(),pageFilter,curPageId,TPLNAME_TO_PAGEIDS);    }    if (mode.active_for_revisions) {      List<Timestamp> tsList=revApi.getRevisionTimestamps(curPageId);      for (      Timestamp ts : tsList) {        revisionCounter++;        if (revisionCounter % (VERBOSITY * 10) == 0) {          logger.info(revisionCounter + " revisions processed ...");        }        Revision curRevision=revApi.getRevision(curPageId,ts);        int curRevisionId=curRevision.getRevisionID();        fillMapWithTemplateData(curRevision.getRevisionText(),revisionFilter,curRevisionId,TPLNAME_TO_REVISIONIDS);      }    }  }}  }
class C{  public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.833 -0500",hash_original_method="B90EC93300E2D6FABAAF6B3D0678EFB4",hash_generated_method="BF697BEF0C89754BDCE10554BD503811") public final void sendRequest() throws IOException {  if (responseSource != null) {    return;  }  prepareRawRequestHeaders();  initResponseSource();  if (responseCache instanceof HttpResponseCache) {    ((HttpResponseCache)responseCache).trackResponse(responseSource);  }  if (requestHeaders.isOnlyIfCached() && responseSource.requiresConnection()) {    if (responseSource == ResponseSource.CONDITIONAL_CACHE) {      IoUtils.closeQuietly(cachedResponseBody);    }    this.responseSource=ResponseSource.CACHE;    this.cacheResponse=BAD_GATEWAY_RESPONSE;    RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(cacheResponse.getHeaders());    setResponse(new ResponseHeaders(uri,rawResponseHeaders),cacheResponse.getBody());  }  if (responseSource.requiresConnection()) {    sendSocketRequest();  } else   if (connection != null) {    HttpConnectionPool.INSTANCE.recycle(connection);    connection=null;  }}  }
class C{  public SchemaCommand(Session session,Schema schema){  super(session);  this.schema=schema;}  }
class C{  public DataReader(InputStream in){  this.in=in;}  }
class C{  public static Listbox newDropdownListbox(){  Listbox listbox=new Listbox();  listbox.setMold("select");  return listbox;}  }
class C{  private void postInitViewPager(){  try {    Field scroller=ViewPager.class.getDeclaredField("mScroller");    scroller.setAccessible(true);    Field interpolator=ViewPager.class.getDeclaredField("sInterpolator");    interpolator.setAccessible(true);    mScroller=new ScrollerCustomDuration(getContext(),(Interpolator)interpolator.get(null));    scroller.set(this,mScroller);  } catch (  Exception e) {  }}  }
class C{  public InvocableEndpointTest(String name){  super(name);}  }
class C{  public static boolean isLocalhost(String host){  if (host == null)   return true;  host=chopZoneID(host);  return LOCALHOST_PATTERNS.matcher(host).matches() || localHostNames.contains(host);}  }
class C{  public String suspendService(){  Service selectedService=serviceDetailsModel.getSelectedService();  if (selectedService != null) {    try {      setService(getProvisioningService().suspendService(selectedService.getVO(),suspensionReason));    } catch (    SaaSApplicationException ex) {      ExceptionHandler.execute(ex);      FacesContext.getCurrentInstance().getAttributes().put(CLOSE_MODAL,Boolean.TRUE);      return OUTCOME_ERROR;    }  }  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_SERVICE_SUSPENDED);  suspensionReason=null;  serviceDetailsModel.setSelectedServiceKey(serviceDetailsModel.getSelectedService().getKey() + "");  return OUTCOME_SUCCESS;}  }
class C{  protected void flashResponse(HttpResponse response,HttpRequest request){  if (response == null)   return;  Session session=response.getSession();  if (session == null || PersistentMarkedSession.class.isInstance(session)) {    session=request.getSession();  }  Flash responseFlash=FlashAvailable.class.cast(response).getFlash();  if (responseFlash != null) {    if (session == null) {      session=new Session();    }    session.put(flashKey,responseFlash);  }  if (session != null) {    response.setSession(session);  }}  }
class C{  public static Ingredient fromCursor(Cursor cursor){  Ingredient ingredient=new Ingredient();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeIngredientTable.AMOUNT_COLUMN)) {      ingredient.setAmount(cursor.getString(c));    } else     if (columnName.equals(RecipeIngredientTable.DESCRIPTION_COLUMN)) {      ingredient.setDescription(cursor.getString(c));    }  }  return ingredient;}  }
class C{  private static String lookupCodeName(String code) throws MessageTranslatorException {  String newCode=codes.get(code);  if (null == newCode) {    loadExceptionCode(code);    newCode=codes.get(code);  }  return newCode;}  }
class C{  public OutputStreamWriter(java.io.OutputStream os,java.lang.String enc) throws java.io.UnsupportedEncodingException {  this.os=os;  this.enc=enc;}  }
class C{  protected void clearOutEvents(){}  }
class C{  @Override public String[] validBaudRates(){  return new String[]{"115,200 bps"};}  }
class C{  public void addAnimation(Animation a){  mAnimations.add(a);  boolean noMatrix=(mFlags & PROPERTY_MORPH_MATRIX_MASK) == 0;  if (noMatrix && a.willChangeTransformationMatrix()) {    mFlags|=PROPERTY_MORPH_MATRIX_MASK;  }  boolean changeBounds=(mFlags & PROPERTY_CHANGE_BOUNDS_MASK) == 0;  if (changeBounds && a.willChangeBounds()) {    mFlags|=PROPERTY_CHANGE_BOUNDS_MASK;  }  if ((mFlags & PROPERTY_DURATION_MASK) == PROPERTY_DURATION_MASK) {    mLastEnd=mStartOffset + mDuration;  } else {    if (mAnimations.size() == 1) {      mDuration=a.getStartOffset() + a.getDuration();      mLastEnd=mStartOffset + mDuration;    } else {      mLastEnd=Math.max(mLastEnd,a.getStartOffset() + a.getDuration());      mDuration=mLastEnd - mStartOffset;    }  }  mDirty=true;}  }
class C{  public boolean engineIsKeyEntry(String alias){  boolean isKey=false;  Object entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if ((entry instanceof PrivateKeyEntry) || (entry instanceof SecretKeyEntry)) {    isKey=true;  }  return isKey;}  }
class C{  private static void addDigest(MessageDigest digest,Annotation[] annList){  if (annList == null)   return;  for (  Annotation ann : annList)   addDigest(digest,ann);}  }
class C{  public boolean containsFacility(Id<ActivityFacility> id){  boolean answer=false;  int i=0;  while (!answer && i < this.size()) {    if (id == null && this.get(i).getFacilityId() == null) {      answer=true;    } else     if (id != null && this.get(i).getFacilityId() != null) {      answer=this.get(i).getFacilityId().compareTo(id) == 0 ? true : false;    }    i++;  }  return answer;}  }
class C{  protected int entityIndex(Entity entity){  return Arrays.binarySearch(entities,entity);}  }
class C{  public static boolean sendError(final HttpServletResponse resp,final int statusCode,final String message) throws IOException {  boolean retVal=false;  if (!resp.isCommitted()) {    resp.sendError(statusCode,message);    retVal=true;  }  return retVal;}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=findPatternStart(leftTopBlack[0],top,image);  int right=findPatternEnd(leftTopBlack[0],top,image);  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize >> 1;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  private String toString(InputStream inputStream) throws IOException {  String string;  StringBuilder outputBuilder=new StringBuilder();  if (inputStream != null) {    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream,"UTF-8"));    while (null != (string=reader.readLine())) {      outputBuilder.append(string).append('\n');    }  }  return outputBuilder.toString();}  }
class C{  @SuppressWarnings("ConstantConditions") public synchronized void add(Interactable interactable){  TerminalPosition topLeft=interactable.toBasePane(TerminalPosition.TOP_LEFT_CORNER);  TerminalSize size=interactable.getSize();  interactables.add(interactable);  int index=interactables.size() - 1;  for (int y=topLeft.getRow(); y < topLeft.getRow() + size.getRows(); y++) {    for (int x=topLeft.getColumn(); x < topLeft.getColumn() + size.getColumns(); x++) {      if (y >= 0 && y < lookupMap.length && x >= 0 && x < lookupMap[y].length) {        lookupMap[y][x]=index;      }    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  fastTime=s.readLong();}  }
class C{  public TriangleMesh addMesh(Mesh3D m){  for (  Face f : m.getFaces()) {    addFace(f.a,f.b,f.c,f.uvA,f.uvB,f.uvC);  }  return this;}  }
class C{  final public int bytesProduced(){  return bytesProduced;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMCursorElement(prefix,(AbstractDocument)doc);}  }
class C{  @Override public void saveContentRelationShip(SSP ssp,Set<Long> relatedContentIdSet){  List<Long> relatedContentIds=findRelatedContentFromSsp(ssp);  Set<Long> newRelatedContentIdSet=new HashSet<>();  for (  Long relatedContentId : relatedContentIdSet) {    if (!relatedContentIds.contains(relatedContentId)) {      newRelatedContentIdSet.add(relatedContentId);    }  }  if (!newRelatedContentIdSet.isEmpty()) {    StringBuilder queryValuesBuilder=new StringBuilder();    for (    Long relatedContentId : newRelatedContentIdSet) {      queryValuesBuilder.append("(");      queryValuesBuilder.append(ssp.getId());      queryValuesBuilder.append(",");      queryValuesBuilder.append(relatedContentId);      queryValuesBuilder.append(")");      queryValuesBuilder.append(",");    }    queryValuesBuilder.setCharAt(queryValuesBuilder.length() - 1,';');    Query query=entityManager.createNativeQuery(INSERT_QUERY + queryValuesBuilder.toString());    try {      query.executeUpdate();      flushAndCloseEntityManager();    } catch (    ConstraintViolationException micve) {      LOGGER.warn(micve.getMessage());    } finally {      flushAndCloseEntityManager();    }  }}  }
class C{  public void close() throws IOException {  fInputStream.close();}  }
class C{  public MosaicId(final Deserializer deserializer){  this.namespaceId=NamespaceId.readFrom(deserializer,"namespaceId");  this.name=deserializer.readString("name");  this.validate();}  }
class C{  public FIXValueOverflowException(String message){  super(message);}  }
class C{  public void run(){  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  State state=new State(mInfo,mService);  AndroidHttpClient client=null;  PowerManager.WakeLock wakeLock=null;  int finalStatus=DownloaderService.STATUS_UNKNOWN_ERROR;  try {    PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);    wakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,Constants.TAG);    wakeLock.acquire();    if (Constants.LOGV) {      Log.v(Constants.TAG,"initiating download for " + mInfo.mFileName);      Log.v(Constants.TAG,"  at " + mInfo.mUri);    }    client=AndroidHttpClient.newInstance(userAgent(),mContext);    boolean finished=false;    while (!finished) {      if (Constants.LOGV) {        Log.v(Constants.TAG,"initiating download for " + mInfo.mFileName);        Log.v(Constants.TAG,"  at " + mInfo.mUri);      }      ConnRouteParams.setDefaultProxy(client.getParams(),getPreferredHttpHost(mContext,state.mRequestUri));      HttpGet request=new HttpGet(state.mRequestUri);      try {        executeDownload(state,client,request);        finished=true;      } catch (      RetryDownload exc) {      } finally {        request.abort();        request=null;      }    }    if (Constants.LOGV) {      Log.v(Constants.TAG,"download completed for " + mInfo.mFileName);      Log.v(Constants.TAG,"  at " + mInfo.mUri);    }    finalizeDestinationFile(state);    finalStatus=DownloaderService.STATUS_SUCCESS;  } catch (  StopRequest error) {    Log.w(Constants.TAG,"Aborting request for download " + mInfo.mFileName + ": "+ error.getMessage());    error.printStackTrace();    finalStatus=error.mFinalStatus;  }catch (  Throwable ex) {    Log.w(Constants.TAG,"Exception for " + mInfo.mFileName + ": "+ ex);    finalStatus=DownloaderService.STATUS_UNKNOWN_ERROR;  } finally {    if (wakeLock != null) {      wakeLock.release();      wakeLock=null;    }    if (client != null) {      client.close();      client=null;    }    cleanupDestination(state,finalStatus);    notifyDownloadCompleted(finalStatus,state.mCountRetry,state.mRetryAfter,state.mRedirectCount,state.mGotData,state.mFilename);  }}  }
class C{  @Override public double[] projectRelativeRenderToScaled(double[] v){  return proj.applyRelativeInverse(v);}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  protected boolean syncContent(){  if (attending != null) {    final RPSlot bank=getBankSlot();    bank.clear();    for (    final RPObject item : getSlot("content")) {      try {        bank.addPreservingId(cloneItem(item));      } catch (      final Exception e) {        LOGGER.error("Cannot clone item " + item,e);      }    }    if (getZone().has(attending.getID()) && nextTo(attending)) {      return true;    } else {      close();      notifyWorldAboutChanges();    }  }  return false;}  }
class C{  public Builder addDefaultShareMenuItem(){  mIntent.putExtra(EXTRA_DEFAULT_SHARE_MENU_ITEM,true);  return this;}  }
class C{  public AddMarketingPermissionException(String message,Object[] params){  super(message,params);}  }
class C{  public BasicPage(@DrawableRes int drawableResId,String title,String description){  this.drawableResId=drawableResId;  this.title=title;  this.description=description;}  }
class C{  public ChangeAttribute asChangeAttribute(ReviewDb db,Change change){  ChangeAttribute a=new ChangeAttribute();  a.project=change.getProject().get();  a.branch=change.getDest().getShortName();  a.topic=change.getTopic();  a.id=change.getKey().get();  a.number=change.getId().toString();  a.subject=change.getSubject();  try {    a.commitMessage=changeDataFactory.create(db,change).commitMessage();  } catch (  Exception e) {    log.error("Error while getting full commit message for" + " change " + a.number);  }  a.url=getChangeUrl(change);  a.owner=asAccountAttribute(change.getOwner());  a.assignee=asAccountAttribute(change.getAssignee());  a.status=change.getStatus();  return a;}  }
class C{  public static String trimLeadingCharacter(String str,char leadingCharacter){  if (!hasLength(str)) {    return str;  }  StringBuilder sb=new StringBuilder(str);  while (sb.length() > 0 && sb.charAt(0) == leadingCharacter) {    sb.deleteCharAt(0);  }  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.661 -0500",hash_original_method="E5722E3313A7E9ED90B679A7B4C5AF2F",hash_generated_method="08DB39347D00CD0ACECDA317DC22500C") public void onHealthAppConfigurationStatusChange(BluetoothHealthAppConfiguration config,int status){  Log.d(TAG,"onHealthAppConfigurationStatusChange: " + config + "Status: "+ status);}  }
class C{  public void initializeStatusResistancesList(Map<String,Double> res){  resistances=new EnumMap<StatusType,Double>(StatusType.class);  for (  Entry<String,Double> entry : res.entrySet()) {    resistances.put(StatusType.parse(entry.getKey()),entry.getValue());  }}  }
class C{  final boolean isVolatile(){  return Modifier.isVolatile(getModifiers());}  }
class C{  public synchronized OMGraphicList prepare(){  OMGraphicList currentList=getList();  if (listener == null) {    listener=new LinkListener(linkManager,this,currentGenerator);  }  if (listener != null && !listener.isListening()) {    listener.startUp();  }  if (Debug.debugging("link")) {    Debug.output(getName() + "|LinkLayer.prepare(): Listener " + (listener == null ? "is null," : "is OK,")+ " listening ("+ (listener == null ? "nope" : "" + listener.isListening())+ ")");  }  Projection projection=getProjection();  if (projection == null) {    Debug.error("Link Layer needs to be added to the MapBean before it can get graphics!");    return currentList;  } else   if (currentList != null) {    currentList.generate(projection);  }  Debug.message("basic",getName() + "|LinkLayer.prepare(): doing it");  if (Debug.debugging("link")) {    System.out.println(getName() + "|LinkLayer.prepare(): " + "calling getRectangle "+ " with projection: "+ projection+ " ul = "+ projection.getUpperLeft()+ " lr = "+ projection.getLowerRight());  }  try {    ClientLink l=linkManager.getLink(true);    if (l == null) {      System.err.println("LinkLayer: unable to get link in prepare().");      return currentList;    }synchronized (l) {      sendMapRequest(l,projection);    }    linkManager.finLink();  } catch (  UnknownHostException uhe) {    System.err.println("LinkLayer: unknown host!");  }catch (  java.io.IOException ioe) {    System.err.println("LinkLayer: IOException contacting server for map request!");    System.err.println(ioe);    linkManager.resetLink();    if (!quiet) {      fireRequestMessage("Communication error between " + getName() + " layer\nand Link Server: Host: "+ host+ ", Port: "+ port);    }    System.err.println("LinkLayer: Communication error between " + getName() + " layer\nand Link Server: Host: "+ host+ ", Port: "+ port);  }  return currentList;}  }
class C{  public static void handleRemoveFromOldNetworks(Map<String,Network> networkMap,Network network,DbClient dbClient,CoordinatorClient coordinator){  List<Network> processedTzs=new ArrayList<Network>();  for (  Network net : networkMap.values()) {    if (!net.getId().equals(network.getId()) && !processedTzs.contains(net)) {      List<String> eps=new ArrayList<String>();      for (      String ep : networkMap.keySet()) {        if (networkMap.get(ep) == net) {          eps.add(ep);        }      }      _log.info("Removing endpoints {} from network {} in order to add them to {}",new Object[]{eps.toArray(),net.getLabel(),network.getLabel()});      net.removeEndpoints(eps);      handleNetworkUpdated(net,null,null,null,eps,dbClient,coordinator);      dbClient.updateAndReindexObject(net);      processedTzs.add(net);    }  }}  }
class C{  public boolean existsDir(String fspath) throws IsilonException {  fspath=scrubPath(fspath);  ClientResponse resp=null;  try {    fspath=URLEncoder.encode(fspath,"UTF-8");    sLogger.debug("IsilonApi existsDir {} - start",fspath);    resp=_client.head(_baseUrl.resolve(URI_IFS.resolve(fspath)));    sLogger.debug("IsilonApi existsDir {} - complete",fspath);    if (resp.getStatus() != 200) {      return false;    }    return true;  } catch (  Exception e) {    if (e.getCause() instanceof ConnectException) {      throw IsilonException.exceptions.unableToConnect(_baseUrl,e);    }    final Status status=resp != null ? resp.getClientResponseStatus() : Status.NOT_FOUND;    throw IsilonException.exceptions.existsDirFailed(fspath,status,e);  } finally {    if (resp != null) {      resp.close();    }  }}  }
class C{  public VNXeCommandResult deleteFileSystemSync(String fsId,boolean forceSnapDeletion) throws VNXeException {  _logger.info("deleting file system: " + fsId);  DeleteStorageResourceRequest req=new DeleteStorageResourceRequest(_khClient);  return req.deleteFileSystemSync(fsId,forceSnapDeletion);}  }
class C{  @Override protected void doAction(){  kseFrame.setKeyStoreTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);}  }
class C{  private LinkedList<Diff> diff_lineMode(String text1,String text2,long deadline){  LinesToCharsResult b=diff_linesToChars(text1,text2);  text1=b.chars1;  text2=b.chars2;  List<String> linearray=b.lineArray;  LinkedList<Diff> diffs=diff_main(text1,text2,false,deadline);  diff_charsToLines(diffs,linearray);  diff_cleanupSemantic(diffs);  diffs.add(new Diff(Operation.EQUAL,""));  int count_delete=0;  int count_insert=0;  String text_delete="";  String text_insert="";  ListIterator<Diff> pointer=diffs.listIterator();  Diff thisDiff=pointer.next();  while (thisDiff != null) {switch (thisDiff.operation) {case INSERT:      count_insert++;    text_insert+=thisDiff.text;  break;case DELETE:count_delete++;text_delete+=thisDiff.text;break;case EQUAL:if (count_delete >= 1 && count_insert >= 1) {pointer.previous();for (int j=0; j < count_delete + count_insert; j++) {pointer.previous();pointer.remove();}for (Diff newDiff : diff_main(text_delete,text_insert,false,deadline)) {pointer.add(newDiff);}}count_insert=0;count_delete=0;text_delete="";text_insert="";break;}thisDiff=pointer.hasNext() ? pointer.next() : null;}diffs.removeLast();return diffs;}  }
class C{  private static HeaderObject initHeaderObject(String line){  String parts[]=line.split(InternalConstants.TAB);  int unsortedHeaderArray[]=new int[parts.length];  int sortedHeaderArray[]=new int[parts.length];  for (int i=0; i < parts.length; i++) {    int index=parts[i].indexOf(":");    parts[i]=parts[i].substring(0,index);    String key[]=parts[i].split("_");    try {      unsortedHeaderArray[i]=Integer.parseInt(key[key.length - 1]);    } catch (    NumberFormatException nfe) {      unsortedHeaderArray[i]=-1;    }    sortedHeaderArray[i]=unsortedHeaderArray[i];  }  Map<Integer,Integer> idxFromKey=HeaderParser.createIdxFromKey(unsortedHeaderArray);  ArrayQuicksort(sortedHeaderArray);  return new HeaderObject(idxFromKey,sortedHeaderArray);}  }
class C{  public void tick(int ms){  for (  Gondola g : gondolas) {    ((RcClock)g.getClock()).tick(ms);  }  for (  Gondola g : extras) {    ((RcClock)g.getClock()).tick(ms);  }  try {    Thread.sleep(Math.min(1000,ms));  } catch (  InterruptedException e) {    logger.error(e.getMessage(),e);  }}  }
class C{  protected String resolveValue(String name){  return getVariableValue(name);}  }
class C{  public LongMap(){  this(32,0.8f);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.198 -0400",hash_original_method="9789736263D9A07C7DAA9126D0810BC9",hash_generated_method="3CDAF7744AC101D774871D60FC3C8840") private void doAcquireSharedInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  private void includeUntilAfter(BufferedReader bufferedReader,StringBuilder minified,char end) throws IOException {  char cPrevious=0;  boolean previousSet=false;  while (true) {    int cInt=bufferedReader.read();    if (cInt == -1) {      return;    }    char c=(char)cInt;    minified.append(c);    if (c == end && (!previousSet || cPrevious != '\\')) {      return;    }    previousSet=true;    cPrevious=c;  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public boolean isSetService_name(){  return this.service_name != null;}  }
class C{  public static boolean isAdmin(final User user){  return false;}  }
class C{  public void configureUserDebugLog(){  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();  try {    JoranConfigurator configurator=new JoranConfigurator();    configurator.setContext(context);    context.reset();    configurator.doConfigure(apacHome + File.separator + "config-files/user-logback-debug.xml");  } catch (  JoranException je) {  }  StatusPrinter.printInCaseOfErrorsOrWarnings(context);}  }
class C{  public String toString(){  return s[0] + "|" + s[1];}  }
class C{  public static void readFully(InputStream i,byte b[]) throws IOException {  readFully(i,b,0,b.length);}  }
class C{  public static void main(String[] args){  SpringApplication.run(Application.class,args);}  }
class C{  private static boolean seeAllp(){  SecurityManager sm=System.getSecurityManager();  if (sm == null) {    return true;  } else {    if (debug != null) {      if (sm.getClass().getClassLoader() == null && Policy.getPolicyNoCheck().getClass().getClassLoader() == null) {        return true;      }    } else {      try {        sm.checkPermission(SecurityConstants.GET_POLICY_PERMISSION);        return true;      } catch (      SecurityException se) {      }    }  }  return false;}  }
class C{  public VTreeBOM(){}  }
class C{  private void flushActivityDataHolder(){  if (activityStruct == null) {    LOG.debug("nothing to flush, struct is already null");    return;  }  int bpm=getBytesPerMinuteOfActivityData();  LOG.debug("flushing activity data samples: " + activityStruct.activityDataHolderProgress / bpm);  byte category, intensity, steps, heartrate=0;  try (DBHandler dbHandler=GBApplication.acquireDB()){    MiBandSampleProvider provider=new MiBandSampleProvider(getDevice(),dbHandler.getDaoSession());    User user=DBHelper.getUser(dbHandler.getDaoSession());    Device device=DBHelper.getDevice(getDevice(),dbHandler.getDaoSession());    int minutes=0;    try {      int timestampInSeconds=(int)(activityStruct.activityDataTimestampProgress.getTimeInMillis() / 1000);      if ((activityStruct.activityDataHolderProgress % bpm) != 0) {        throw new IllegalStateException("Unexpected data, progress should be multiple of " + bpm + ": "+ activityStruct.activityDataHolderProgress);      }      int numSamples=activityStruct.activityDataHolderProgress / bpm;      MiBandActivitySample[] samples=new MiBandActivitySample[numSamples];      for (int i=0; i < activityStruct.activityDataHolderProgress; i+=bpm) {        category=activityStruct.activityDataHolder[i];        intensity=activityStruct.activityDataHolder[i + 1];        steps=activityStruct.activityDataHolder[i + 2];        if (hasExtendedActivityData) {          heartrate=activityStruct.activityDataHolder[i + 3];          LOG.debug("heartrate received: " + (heartrate & 0xff));        }        MiBandActivitySample sample=getSupport().createActivitySample(device,user,timestampInSeconds,provider);        sample.setRawIntensity(intensity & 0xff);        sample.setSteps(steps & 0xff);        sample.setRawKind(category & 0xff);        sample.setHeartRate(heartrate & 0xff);        samples[minutes]=sample;        if (LOG.isDebugEnabled()) {          LOG.debug("sample: " + samples[minutes]);        }        minutes++;        timestampInSeconds+=60;      }      provider.addGBActivitySamples(samples);    }  finally {      activityStruct.bufferFlushed(minutes);    }  } catch (  Exception ex) {    GB.toast(getContext(),ex.getMessage(),Toast.LENGTH_LONG,GB.ERROR,ex);  }}  }
class C{  public String leftString(int length){  if (length <= 0) {    return "";  } else   if (length >= size) {    return new String(buffer,0,size);  } else {    return new String(buffer,0,length);  }}  }
class C{  public static HashMap<String,String> parseUniversalLink(Uri uri){  HashMap<String,String> map=null;  try {    if ((null == uri) || TextUtils.isEmpty(uri.getPath())) {      Log.e(LOG_TAG,"## parseUniversalLink : null");      return null;    }    if (!TextUtils.equals(uri.getHost(),"vector.im") && !TextUtils.equals(uri.getHost(),"riot.im") && !TextUtils.equals(uri.getHost(),"matrix.to")) {      Log.e(LOG_TAG,"## parseUniversalLink : unsupported host " + uri.getHost());      return null;    }    boolean isSupportedHost=TextUtils.equals(uri.getHost(),"vector.im") || TextUtils.equals(uri.getHost(),"riot.im");    if (isSupportedHost && !mSupportedVectorLinkPaths.contains(uri.getPath())) {      Log.e(LOG_TAG,"## parseUniversalLink : not supported");      return null;    }    String uriFragment;    if (null != (uriFragment=uri.getFragment())) {      uriFragment=uriFragment.substring(1);    } else {      Log.e(LOG_TAG,"## parseUniversalLink : cannot extract path");      return null;    }    String temp[]=uriFragment.split("/",3);    if (!isSupportedHost) {      ArrayList<String> compliantList=new ArrayList<>(Arrays.asList(temp));      compliantList.add(0,"room");      temp=compliantList.toArray(new String[compliantList.size()]);    }    if (temp.length < 2) {      Log.e(LOG_TAG,"## parseUniversalLink : too short");      return null;    }    if (!TextUtils.equals(temp[0],"room")) {      Log.e(LOG_TAG,"## parseUniversalLink : not supported " + temp[0]);      return null;    }    map=new HashMap<>();    if (temp.length == 2) {      map.put(ULINK_ROOM_ID_KEY,temp[1]);    } else {      String eventId=temp[2];      if (eventId.startsWith("$")) {        map.put(ULINK_ROOM_ID_KEY,temp[1]);        map.put(ULINK_EVENT_ID_KEY,temp[2]);      } else {        uri=Uri.parse(uri.toString().replace("#/room/","room/"));        map.put(ULINK_ROOM_ID_KEY,uri.getLastPathSegment());        Set<String> names=uri.getQueryParameterNames();        for (        String name : names) {          String value=uri.getQueryParameter(name);          try {            value=URLDecoder.decode(value,"UTF-8");          } catch (          Exception e) {            Log.e(LOG_TAG,"## parseUniversalLink : URLDecoder.decode " + e.getMessage());          }          map.put(name,value);        }      }    }  } catch (  Exception e) {    Log.e(LOG_TAG,"## parseUniversalLink : crashes " + e.getLocalizedMessage());  }  return map;}  }
class C{  public int partNumberMarker(){  return partNumberMarker;}  }
class C{  private void initNamespaces(){  Map<Integer,String> namespaceMap=new HashMap<Integer,String>();  try {    int b=read();    this.keywords.reset();    StringBuilder buffer=null;    while (b != -1) {      if (buffer != null) {        buffer.append((char)b);      }      if (this.keywords.check((char)b)) {switch (this.keywords.getValue()) {case KEY_START_NAMESPACES:          buffer=new StringBuilder(WikipediaXMLKeys.KEY_START_NAMESPACES.getKeyword());        break;case KEY_END_NAMESPACES:      DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    factory.setIgnoringElementContentWhitespace(true);  Document namespaces=factory.newDocumentBuilder().parse(new InputSource(new StringReader(buffer.toString())));NodeList nsList=namespaces.getChildNodes().item(0).getChildNodes();for (int i=0; i < nsList.getLength(); i++) {Node curNamespace=nsList.item(i);String prefix=curNamespace.getTextContent().trim();if (!prefix.isEmpty()) {  NamedNodeMap nsAttributes=curNamespace.getAttributes();  String namespace=nsAttributes.getNamedItem("key").getTextContent();  namespaceMap.put(Integer.parseInt(namespace),prefix);}}buffer=null;articleFilter.initializeNamespaces(namespaceMap);return;}this.keywords.reset();}b=read();}} catch (IOException e) {System.err.println("Error reading namespaces from xml dump.");}catch (ParserConfigurationException e) {System.err.println("Error parsing namespace data.");}catch (SAXException e) {System.err.println("Error parsing namespace data.");}}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.210 -0400",hash_original_method="6FB0E6644E3E04B695B0C3D04EAFF7F6",hash_generated_method="A31392A721E1E9DFE675D1960891A7E0") public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public void registerTableNodes(SnmpMib mib,MBeanServer server){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:10.614 -0400",hash_original_method="FAEDC6A34DDF69892256309EA97E7CD3",hash_generated_method="E49CDB19A0AE3B003E170829C6DC2BAC") private void writeObject(ObjectOutputStream out) throws IOException {  throw new NotSerializableException();}  }
class C{  public ListenableFuture<DestinationTable> load(DestinationTable dest,SourceFormat sourceFormat,Iterable<String> sourceUris) throws Exception {  Job job=new Job().setConfiguration(new JobConfiguration().setLoad(new JobConfigurationLoad().setWriteDisposition(dest.getWriteDisposition().toString()).setSourceFormat(sourceFormat.toString()).setSourceUris(ImmutableList.copyOf(sourceUris)).setDestinationTable(dest.getTableReference())));  return Futures.transform(runJobToCompletion(job,dest),new UpdateTableFunction());}  }
class C{  private CategoryDataset createCategoryDataset1(){  DefaultCategoryDataset result=new DefaultCategoryDataset();  result.addValue(1.0,"R0","C0");  result.addValue(1.0,"R1","C0");  result.addValue(1.0,"R2","C0");  result.addValue(4.0,"R0","C1");  result.addValue(5.0,"R1","C1");  result.addValue(6.0,"R2","C1");  return result;}  }
class C{  public static boolean isSameDay(final Calendar cal1,final Calendar cal2){  if (cal1 == null || cal2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));}  }
class C{  @Override public void paint(Graphics g){  Graphics2D g2=(Graphics2D)g;  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  int width=getWidth();  int height=getHeight();  int x=0;  int y=0;  int margin=margin();  getBorder().paintBorder(this,g,0,0,width - 1,height - 1);  g.setColor(color);  g.fillRoundRect(x + margin,y + margin,width - (2 * margin),height - (2 * margin),5,5);  ButtonModel model=getModel();  if (model.isPressed()) {    g.setColor(ROLLOVER_COLOR);    g.fillRoundRect(x + margin,y + margin,width - (2 * margin),height - (2 * margin),5,5);    g.fillRoundRect(x + margin,y + margin,width - (2 * margin),height - (2 * margin),5,5);  } else   if (model.isRollover()) {    g.setColor(ROLLOVER_COLOR);    g.fillRoundRect(x + margin,y + margin,width - (2 * margin),height - (2 * margin),5,5);  }}  }
class C{  private void normalize(){  if (segmentFraction < 0.0) {    segmentFraction=0.0;  }  if (segmentFraction > 1.0) {    segmentFraction=1.0;  }  if (componentIndex < 0) {    componentIndex=0;    segmentIndex=0;    segmentFraction=0.0;  }  if (segmentIndex < 0) {    segmentIndex=0;    segmentFraction=0.0;  }  if (segmentFraction == 1.0) {    segmentFraction=0.0;    segmentIndex+=1;  }}  }
class C{  synchronized void send(byte[] data) throws IOException {  connect();  try {    OutputStream out=socket.getOutputStream();    out.write(data);  }  finally {    socket.close();  }  server.trace("closed");}  }
class C{  @Override public void scrollToPosition(int position){  super.scrollToPosition(transformInnerPositionIfNeed(position));}  }
class C{  public SummaryPanel(final String id,final IModel<Customer> customerModel){  super(id,customerModel);  final Customer customer=customerModel.getObject();  add(new Label(EMAIL_LABEL,customer != null ? customer.getEmail() : ""));  setVisible(customer != null);}  }
class C{  protected static JCas jCasWithSentence() throws UIMAException {  JCas jCas=jCasWithTokens();  Sentence sentence=new Sentence(jCas,0,13);  sentence.addToIndexes();  return jCas;}  }
class C{  public void beginHandshake(){  Preconditions.checkState(state instanceof InitState,"must be in InitState");  if (this.featuresReply.getNTables() > 1) {    log.debug("Have {} table(s) for switch {}",this.featuresReply.getNTables(),getSwitchInfoString());  }  if (this.featuresReply.getVersion().compareTo(OFVersion.OF_13) < 0) {    setState(new WaitConfigReplyState());  } else {    setState(new WaitPortDescStatsReplyState());  }}  }
class C{  private void popByteAsInt(GPR reg){  asm.emitLWZ(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_INT,FP);  asm.emitEXTSB(reg,reg);  discardSlot();}  }
class C{  public NetworkMap(){  this.network=new Network();}  }
class C{  void collect(){  this.lastValue=this.sample.getValue();  this.maxValue=Math.max(this.lastMaxValue,this.sample.getMaxValue());  this.lastMaxValue=this.sample.getMaxValue();  this.data.put(this.lastValue);}  }
class C{  @Pure public static boolean equals(Object... parts){  if (parts.length % 2 != 0) {    throw new IllegalArgumentException("Should have even number of parameters");  }  int half=parts.length / 2;  for (int i=0; i < half; i++) {    if (!equals(parts[i],parts[i + half])) {      return false;    }  }  return true;}  }
class C{  public Edge(int id1,int id2){  super();  this.id1=id1;  this.id2=id2;}  }
class C{  public void sendMetric(final String name,final double value){  logger.debug(String.format("sendMetric(%s, %f)",name,value));  if (telemetryClient != null) {    telemetryClient.trackMetric(name,value);  }}  }
class C{  protected final int F3(int D,int Kmi,int Kri){  int I=Kmi - D;  I=I << Kri | I >>> (32 - Kri);  return ((S1[(I >>> 24) & 0xff] + S2[(I >>> 16) & 0xff]) ^ S3[(I >>> 8) & 0xff]) - S4[I & 0xff];}  }
class C{  public void testFieldScoreReverse() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newTextField("value","foo bar bar bar bar",Field.Store.NO));  writer.addDocument(doc);  doc=new Document();  doc.add(newTextField("value","foo foo foo foo foo",Field.Store.NO));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField(null,SortField.Type.SCORE,true));  TopDocs actual=searcher.search(new TermQuery(new Term("value","foo")),10,sort);  assertEquals(2,actual.totalHits);  TopDocs expected=searcher.search(new TermQuery(new Term("value","foo")),10);  assertEquals(expected.totalHits,actual.totalHits);  assertEquals(actual.scoreDocs[0].doc,expected.scoreDocs[1].doc);  assertEquals(actual.scoreDocs[1].doc,expected.scoreDocs[0].doc);  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public static void main(String[] args){  double seriesStart=1.0;  double numberOfRows=20.0;  System.out.println("\ni         m(i)     ");  System.out.println("-------------------");  for (double i=seriesStart; i <= numberOfRows; i++) {    System.out.printf("%-10.0f",i);    System.out.printf("%7.4f\n",sumSeries(i));  }}  }
class C{  public void stop(final ObjectName namePattern,final String pidAttribute,final String stopMethod,final String[] attributes,final Object[] values) throws ConnectionFailedException, IOException, MBeanInvocationFailedException, PidUnavailableException {  invokeOperationOnTargetMBean(namePattern,pidAttribute,stopMethod,attributes,values);}  }
class C{  public int numAttributes(){  return m_AttValues.length;}  }
class C{  @Deprecated public static JavaType fromType(Type type){  return instance._constructType(type,null);}  }
class C{  @SuppressWarnings("rawtypes") public SerializerRegistry register(Class<?> type,Class<? extends TypeSerializer> serializer){  return register(type,calculateTypeId(type),new DefaultTypeSerializerFactory(serializer));}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CategorySeries(String title){  mTitle=title;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static MyString2 valueOf(boolean b){  return (b ? new MyString2("true") : new MyString2("false"));}  }
class C{  static private String constructClass(String device_name,String target_os,String os_version,String className,File excludeFile,int run_id){  int i=0;  String ret="package {\n";  ret+="import flash.display.DisplayObject;\n";  ret+="import flash.system.Capabilities;\n";  if (target_os.compareToIgnoreCase(MobileUtil.IOS) == 0 || target_os.compareToIgnoreCase(MobileUtil.QNX) == 0) {    ret+="import flash.filesystem.*;\n";  }  ret+="[Mixin]\n";  ret+="/**\n";  ret+="* By including this mixin via CompileMustellaSwfs, we\n";  ret+="* can set up some variables for UnitTester to use for\n";  ret+="* an Android run.\n";  ret+="*/\n";  ret+="public class " + className + "\n";  ret+="{\n";  ret+="	public static function init(root:DisplayObject):void\n";  ret+="	{\n";  ret+="		if( UnitTester.cv == null ){\n";  ret+="			UnitTester.cv = new ConditionalValue();\n";  ret+="		}\n";  ret+="		UnitTester.cv.device = \"" + device_name + "\";\n";  ret+="		UnitTester.cv.os = \"" + target_os + "\";\n";  ret+="		UnitTester.cv.targetOS = \"" + target_os + "\";\n";  ret+="		UnitTester.cv.osVersion = \"" + os_version + "\";\n";  if ((target_os.compareToIgnoreCase(MobileUtil.MAC) == 0) || (target_os.compareToIgnoreCase(MobileUtil.WIN) == 0)) {    if (adl_extras_XscreenDPI == -1) {      ret+="		UnitTester.cv.deviceDensity = flash.system.Capabilities.screenDPI;\n";    } else {      ret+="		UnitTester.cv.deviceDensity = Util.roundDeviceDensity( flash.system.Capabilities.screenDPI );\n";    }  } else   if ((target_os.compareToIgnoreCase(MobileUtil.ANDROID) == 0) || (target_os.compareToIgnoreCase(MobileUtil.IOS) == 0)) {    if ((device_name.compareToIgnoreCase(MobileUtil.MAC) == 0) || (device_name.compareToIgnoreCase(MobileUtil.WIN) == 0)) {      if (adl_extras_XscreenDPI == -1) {        ret+="		UnitTester.cv.deviceDensity = flash.system.Capabilities.screenDPI;\n";      } else {        ret+="		UnitTester.cv.deviceDensity = Util.roundDeviceDensity( flash.system.Capabilities.screenDPI );\n";      }    } else {      ret+="		UnitTester.cv.deviceDensity = " + Integer.toString(MobileUtil.getDeviceDensity(device_name)) + ";\n";    }  } else {    ret+="		UnitTester.cv.deviceDensity = " + Integer.toString(MobileUtil.getDeviceDensity(device_name)) + ";\n";  }  ret+="		UnitTester.cv.screenDPI = flash.system.Capabilities.screenDPI;\n";  ret+="		//UnitTester.cv.deviceWidth = set by MultiResult;\n";  ret+="		//UnitTester.cv.deviceHeight = set by MultiResult;\n";  ret+="		//UnitTester.cv.color = this is not defined yet, but there are rumours it might be.\n";  ret+="		UnitTester.run_id = \"" + run_id + "\";\n";  ret+="		UnitTester.excludeFile = \"" + excludeFile.getName() + "\";\n";  for (i=0; i < Array.getLength(MobileUtil.DEVICES_USING_SDCARD); ++i) {    if (device_name.compareToIgnoreCase(MobileUtil.DEVICES_USING_SDCARD[i]) == 0) {      ret+="		UnitTester.mustellaWriteLocation = \"" + MobileUtil.SDCARD_DIR + "\";\n";      ret+="		UnitTester.writeBaselinesToDisk = true;\n";    }  }  if (target_os.compareToIgnoreCase(MobileUtil.IOS) == 0) {    ret+="		UnitTester.mustellaWriteLocation = File.documentsDirectory.nativePath;\n";    ret+="		UnitTester.writeBaselinesToDisk = true;\n";  }  if (target_os.compareToIgnoreCase(MobileUtil.QNX) == 0) {    ret+="		UnitTester.mustellaWriteLocation = File.applicationStorageDirectory.nativePath;\n";    ret+="		UnitTester.writeBaselinesToDisk = true;\n";  }  ret+="	}\n";  ret+="}\n";  ret+="}\n";  return ret;}  }
class C{  public static void print(int x){  out.print(x);  out.flush();}  }
class C{  @Override public int print(final Graphics graphics,final PageFormat pageFormat,final int page) throws PrinterException {  return -1;}  }
class C{  @Override public void configure(){  setCommandStationType(getOptionState(option1Name));  setTurnoutHandling(getOptionState(option2Name));  LnPacketizer packets=new LnPacketizer();  packets.connectPort(this);  this.getSystemConnectionMemo().setLnTrafficController(packets);  this.getSystemConnectionMemo().configureCommandStation(commandStationType,mTurnoutNoRetry,mTurnoutExtraSpace);  this.getSystemConnectionMemo().configureManagers();  packets.startThreads();}  }
class C{  public void toXML(final Object obj,final Writer out){  @SuppressWarnings("resource") final HierarchicalStreamWriter writer=hierarchicalStreamDriver.createWriter(out);  try {    marshal(obj,writer);  }  finally {    writer.flush();  }}  }
class C{  private boolean delete(IgniteUuid trashId,String name,IgniteUuid id) throws IgniteCheckedException {  assert name != null;  assert id != null;  while (true) {    IgfsEntryInfo info=meta.info(id);    if (info != null) {      if (info.isDirectory()) {        if (!deleteDirectoryContents(trashId,id))         return false;        if (meta.delete(trashId,name,id))         return true;      } else {        assert info.isFile();        IgfsEntryInfo lockedInfo=meta.lock(id,true);        if (lockedInfo == null)         return false;        assert id.equals(lockedInfo.id());        data.delete(lockedInfo).get();        boolean ret=meta.delete(trashId,name,id);        if (ret) {          IgfsPath path=IgfsUtils.extractOriginalPathFromTrash(name);          assert path != null;          IgfsUtils.sendEvents(igfsCtx.kernalContext(),path,EVT_IGFS_FILE_PURGED);        }        return ret;      }    } else     return false;  }}  }
class C{  @DSComment("Sip phone call") @DSSpec(DSCat.PHONE_CALL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.926 -0500",hash_original_method="CF2F318ECC83A27F31B207A7653E2463",hash_generated_method="4E76D8C24BA709E7E5DC0EDE2CF31391") public boolean isMuted(){synchronized (this) {    return mMuted;  }}  }
class C{  public void addVMBean(VMNodeBean vmNode){  getVmBeans().add(vmNode);}  }
class C{  private ViewAnimationUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public SwapCandidate(BlockPos coordinates,int range){  this.coordinates=coordinates;  this.range=range;}  }
class C{  public void testSjis5c() throws Exception {  byte[] origByteStream=new byte[]{(byte)0x95,(byte)0x5c,(byte)0x8e,(byte)0x96};  StringBuilder bytesOut=new StringBuilder();  for (int i=0; i < origByteStream.length; i++) {    bytesOut.append(Integer.toHexString(origByteStream[i] & 255));    bytesOut.append(" ");  }  System.out.println(bytesOut.toString());  String origString=new String(origByteStream,"SJIS");  byte[] newByteStream=StringUtils.getBytes(origString,"SJIS","ISO8859_1              ",false,null,null);  bytesOut=new StringBuilder();  for (int i=0; i < newByteStream.length; i++) {    bytesOut.append(Integer.toHexString(newByteStream[i] & 255));    bytesOut.append(" ");  }  System.out.println(bytesOut.toString());  Connection sjisConn=null;  Statement sjisStmt=null;  try {    Properties props=new Properties();    props.put("useUnicode","true");    props.put("characterEncoding","SJIS");    sjisConn=getConnectionWithProps(props);    sjisStmt=sjisConn.createStatement();    this.rs=sjisStmt.executeQuery("SHOW VARIABLES LIKE 'character_set%'");    while (this.rs.next()) {      System.out.println(this.rs.getString(1) + " = " + this.rs.getString(2));    }    sjisStmt.executeUpdate("DROP TABLE IF EXISTS sjisTest");    if (versionMeetsMinimum(4,1)) {      sjisStmt.executeUpdate("CREATE TABLE sjisTest (field1 char(50)) DEFAULT CHARACTER SET SJIS");    } else {      sjisStmt.executeUpdate("CREATE TABLE sjisTest (field1 char(50))");    }    this.pstmt=sjisConn.prepareStatement("INSERT INTO sjisTest VALUES (?)");    this.pstmt.setString(1,origString);    this.pstmt.executeUpdate();    this.rs=sjisStmt.executeQuery("SELECT * FROM sjisTest");    while (this.rs.next()) {      byte[] testValueAsBytes=this.rs.getBytes(1);      bytesOut=new StringBuilder();      for (int i=0; i < testValueAsBytes.length; i++) {        bytesOut.append(Integer.toHexString(testValueAsBytes[i] & 255));        bytesOut.append(" ");      }      System.out.println("Value retrieved from database: " + bytesOut.toString());      String testValue=this.rs.getString(1);      assertTrue(testValue.equals(origString));    }  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS sjisTest");  }}  }
class C{  protected Column removeColumn(int idx){  if (idx < 0 || idx >= m_columns.size()) {    throw new IllegalArgumentException("Column index is not legal.");  }  String name=(String)m_names.get(idx);  ((ColumnEntry)m_entries.get(name)).dispose();  Column col=(Column)m_columns.remove(idx);  m_entries.remove(name);  m_names.remove(idx);  renumberColumns();  m_lastCol=-1;  invalidateSchema();  col.removeColumnListener(this);  fireTableEvent(m_rows.getMinimumRow(),m_rows.getMaximumRow(),idx,TableModelEvent.DELETE);  return col;}  }
class C{  public ConfigurationHTTPAdapter configure(URL url) throws RuntimeException {  if (log.isInfoEnabled()) {    log.info("Configuring from url: " + url.toString());  }  try {    ConfigurationHTTPAdapterParser.doConfigure(this,url.openStream(),url.toString());    return this;  } catch (  IOException ioe) {    throw new RuntimeException("could not configure from URL: " + url,ioe);  }}  }
class C{  public void addListener(final IView2DListener listener){  m_listeners.addListener(listener);}  }
class C{  public final void replaceBiomeBlocks(int blockX,int blockZ,int inChunkX,int inChunkZ,double baseBlockNoise,Random rng,long seed,ChunkPrimer chunkPrimer,ChunkGeneratorBetweenlands chunkGenerator,Biome[] biomesForGeneration,float terrainWeight,float[] terrainWeights){  this.rng.setSeed((long)(blockX - inChunkX) * 341873128712L + (long)(blockZ - inChunkZ) * 132897987541L);  this.chunkGenerator=chunkGenerator;  this.biomesForGeneration=biomesForGeneration;  if (!this.replaceStackBlocks(blockX,blockZ,inChunkX,inChunkZ,baseBlockNoise,chunkPrimer,chunkGenerator,biomesForGeneration,terrainWeights,terrainWeight,EnumGeneratorPass.PRE_REPLACE_BIOME_BLOCKS)) {    return;  }  int baseBlockNoiseRN=(int)(baseBlockNoise / 3.0D + 3.0D + rng.nextDouble() * 0.25D);  int blocksBelow=-1;  int blocksBelowLayer=-1;  for (int y=255; y >= 0; --y) {    if (y <= this.bottomBlockHeight + rng.nextInt(this.bottomBlockFuzz)) {      chunkPrimer.setBlockState(inChunkX,y,inChunkZ,this.bottomBlockState);      continue;    }    IBlockState currentBlockState=chunkPrimer.getBlockState(inChunkX,y,inChunkZ);    if (currentBlockState == null || currentBlockState.getMaterial() == Material.AIR || currentBlockState.getBlock() == chunkGenerator.layerBlock) {      blocksBelow=-1;      continue;    } else {      blocksBelow++;    }    if (currentBlockState.getBlock() != chunkGenerator.baseBlock) {      continue;    }    int baseBlockVariationLayer=(int)(Math.abs(this.baseBlockLayerVariationNoise[inChunkX * 16 + inChunkZ] * 0.7F));    int layerBlockY=y - baseBlockVariationLayer;    if (layerBlockY < 0) {      layerBlockY=0;    }    if (this.hasBaseBlockPatches && baseBlockNoiseRN <= 0) {      chunkPrimer.setBlockState(inChunkX,y,inChunkZ,this.getBaseBlockState(layerBlockY));      return;    }    IBlockState blockAboveState=chunkPrimer.getBlockState(inChunkX,y + 1,inChunkZ);    if (blocksBelowLayer >= 0) {      blocksBelowLayer++;    }    if (currentBlockState.getBlock() == chunkGenerator.baseBlock && blockAboveState.getBlock() == chunkGenerator.layerBlock) {      blocksBelowLayer++;    }    if (blocksBelowLayer <= this.underLayerBlockHeight && blocksBelowLayer >= 0) {      chunkPrimer.setBlockState(inChunkX,y,inChunkZ,this.underLayerTopBlockState);    } else     if (blocksBelow == 0 && currentBlockState.getBlock() == chunkGenerator.baseBlock) {      chunkPrimer.setBlockState(inChunkX,y,inChunkZ,this.biome.topBlock);    } else     if (blocksBelow > 0 && blocksBelow <= this.fillerBlockHeight && currentBlockState.getBlock() == chunkGenerator.baseBlock) {      chunkPrimer.setBlockState(inChunkX,y,inChunkZ,this.biome.fillerBlock);    } else     if (currentBlockState.getBlock() == chunkGenerator.baseBlock) {      chunkPrimer.setBlockState(inChunkX,y,inChunkZ,this.getBaseBlockState(layerBlockY));    }  }  this.replaceStackBlocks(blockX,blockZ,inChunkX,inChunkZ,baseBlockNoise,chunkPrimer,chunkGenerator,biomesForGeneration,terrainWeights,terrainWeight,EnumGeneratorPass.POST_REPLACE_BIOME_BLOCKS);}  }
class C{  public GridExecutorService(ClusterGroupAdapter prj,GridKernalContext ctx){  assert prj != null;  assert ctx != null;  this.prj=prj;  this.ctx=ctx;  this.log=ctx.log(GridExecutorService.class);}  }
class C{  public void onReqAllExecutions(ZonedDateTime mktOpenDate) throws BrokerModelException {}  }
class C{  protected String augmentIdReference(String forValue,UIComponent fromComponent){  int forSuffix=forValue.lastIndexOf(UIViewRoot.UNIQUE_ID_PREFIX);  if (forSuffix <= 0) {    String id=fromComponent.getId();    if (id != null) {      int idSuffix=id.lastIndexOf(UIViewRoot.UNIQUE_ID_PREFIX);      if (idSuffix > 0) {        if (logger.isLoggable(Level.FINE)) {          logger.fine("Augmenting for attribute with " + id.substring(idSuffix) + " suffix from Id attribute");        }        forValue+=id.substring(idSuffix);      }    }  }  return forValue;}  }
class C{  @Command(description="Benchmark signing") public void signBenchmark(@Param(name="keyId",description="Key ID") String keyId) throws Exception {  String algorithm="SHA512withRSA";  String data="Hello world!";  byte[] digest=calculateDigest(getDigestAlgorithmId(algorithm),data.getBytes(StandardCharsets.UTF_8));  long startTime=System.currentTimeMillis();  for (int i=0; i < BENCHMARK_ITERATIONS; i++) {    SignerClient.execute(new Sign(keyId,algorithm,digest));  }  long duration=System.currentTimeMillis() - startTime;  System.out.println("Signed " + BENCHMARK_ITERATIONS + " times in "+ duration+ " milliseconds");}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"pushfw");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a pushfw instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final String result=Helpers.shiftFlagsIntoValue(environment,offset,OperandSize.WORD,instructions);  offset=baseOffset + instructions.size();  Helpers.generatePush(environment,offset,result,OperandSize.WORD,instructions);}  }
class C{  public UserDataDialog(java.awt.Frame parent,boolean modal,JmeSpatial spat,String userDataName){  super(parent,modal);  this.spat=spat;  setLocationRelativeTo(null);  initComponents();  jButton3.setVisible(false);  if (userDataName != null) {    jButton3.setVisible(true);    jTextField2.setEditable(false);    jComboBox1.setEnabled(false);    userData=spat.getLookup().lookup(Spatial.class).getUserData(userDataName);    jTextField2.setText(userDataName);    jTextField1.setText(userData.toString());    jPanel1.setVisible(false);    if (userData instanceof String) {      jComboBox1.setSelectedItem("String");    } else     if (userData instanceof Integer) {      jComboBox1.setSelectedItem("Int");    } else     if (userData instanceof Float) {      jComboBox1.setSelectedItem("Float");    } else     if (userData instanceof Boolean) {      jComboBox1.setSelectedItem("Boolean");    } else     if (userData instanceof Long) {      jComboBox1.setSelectedItem("Long");    } else {      jComboBox1.setSelectedItem("Custom");      buildCustomSheet(userData);    }  }}  }
class C{  @Override public Tree<String> extractBestMaxRuleParse1(int start,int end,int state,List<String> sentence){  int cState=maxcChild[start][end][state];  if (cState == -1) {    return extractBestMaxRuleParse2(start,end,state,sentence);  } else {    List<Tree<String>> child=new ArrayList<Tree<String>>();    child.add(extractBestMaxRuleParse2(start,end,cState,sentence));    String stateStr=(String)tagNumberer.object(state);    if (stateStr.endsWith("^g"))     stateStr=stateStr.substring(0,stateStr.length() - 2);    totalUsedUnaries++;    int intermediateNode=grammars[0].getUnaryIntermediate((short)state,(short)cState);    if (intermediateNode > 0) {      List<Tree<String>> restoredChild=new ArrayList<Tree<String>>();      nTimesRestoredUnaries++;      String stateStr2=(String)tagNumberer.object(intermediateNode);      if (stateStr2.endsWith("^g"))       stateStr2=stateStr2.substring(0,stateStr2.length() - 2);      restoredChild.add(new Tree<String>(stateStr2,child));      return new Tree<String>(stateStr,restoredChild);    }    return new Tree<String>(stateStr,child);  }}  }
class C{  protected String escapeAttributeEntities(String text){  char quote=format.getAttributeQuoteCharacter();  char[] block=null;  int i;  int last=0;  int size=text.length();  for (i=0; i < size; i++) {    String entity=null;    char c=text.charAt(i);switch (c) {case '<':      entity="&lt;";    break;case '>':  entity="&gt;";break;case '\'':if (quote == '\'') {entity="&apos;";}break;case '\"':if (quote == '\"') {entity="&quot;";}break;case '&':entity="&amp;";break;case '\t':case '\n':case '\r':break;default :if ((c < 32) || shouldEncodeChar(c)) {entity="&#" + (int)c + ";";}break;}if (entity != null) {if (block == null) {block=text.toCharArray();}buffer.append(block,last,i - last);buffer.append(entity);last=i + 1;}}if (last == 0) {return text;}if (last < size) {if (block == null) {block=text.toCharArray();}buffer.append(block,last,i - last);}String answer=buffer.toString();buffer.setLength(0);return answer;}  }
class C{  private void notifyReleaseTop(int offset){  if (pullToActionListener != null) {    pullToActionListener.onReleasedTop(offset);  }}  }
class C{  public void logEvent(String log){  sendLogEvent("Log",log,null);}  }
class C{  @Override public void test() throws ParameterException {  ArrayList<String> set=new ArrayList<>();  for (  Parameter<?> p : parameters) {    if (p.isDefined()) {      if (p instanceof Flag) {        if (((Flag)p).getValue().booleanValue()) {          set.add(p.getName());        }      } else {        set.add(p.getName());      }    }  }  if (set.size() > 1) {    throw new WrongParameterValueException("Global Parameter Constraint Error.\n" + "Only one of the parameters " + OptionUtil.optionsNamesToString(parameters) + " is allowed to be set. "+ "Parameters currently set: "+ set.toString());  }}  }
class C{  @Override public boolean isContainer(){  return true;}  }
class C{  public DebugGraphics(){  super();  buffer=null;  xOffset=yOffset=0;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:13:48.141 -0400",hash_original_method="97EB53FCD1385046D183D3B84D3EFDC0",hash_generated_method="7A87D5A5389578D4361D0717F8B1E8C9") public WaveHeader(){}  }
class C{  private boolean validateMetaRecommednationsForSRDF(final StoragePool sourcePool,final StoragePool targetPool,final MetaVolumeRecommendation sourceVolumeRecommendation,final MetaVolumeRecommendation targetVolumeRecommendation){  if (!sourceVolumeRecommendation.equals(targetVolumeRecommendation)) {    if (sourceVolumeRecommendation.isCreateMetaVolumes()) {      if (targetPool.getPoolClassName().equalsIgnoreCase(StoragePool.PoolClassNames.Symm_SRPStoragePool.toString())) {        _log.debug(String.format("Source storage pool %s supports Meta Volume Creation. Target volume is a non Meta.",sourcePool.getNativeId()));        return true;      }    }    if (targetVolumeRecommendation.isCreateMetaVolumes()) {      if (sourcePool.getPoolClassName().equalsIgnoreCase(StoragePool.PoolClassNames.Symm_SRPStoragePool.toString())) {        _log.debug(String.format("Target storage pool %s supports Meta Volume Creation. Source volume is a non Meta.",targetPool.getNativeId()));        return true;      }    }    _log.debug(String.format("Target storage pool %s does not match. Target volume can not be created with the same configuration as the source volume.",targetPool.getNativeId()));    return false;  }  return true;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static String readFileToString(File file) throws IOException {  return readFileToString(file,null);}  }
class C{  public static MultiErrorException check(boolean valid,String messageKey,Object... args){  return LemonUtil.check(null,valid,messageKey,args);}  }
class C{  @Override public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {  try {    int id=getNextId(TraceObject.CALLABLE_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("CallableStatement",TraceObject.CALLABLE_STATEMENT,id,"prepareCall(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ", "+ resultSetHoldability+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkHoldability(resultSetHoldability);    checkClosed();    sql=translateSQL(sql);    return new JdbcCallableStatement(this,sql,id,resultSetType,resultSetConcurrency);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public double eval(double x){  return (a * x + b) * x + c;}  }
class C{  private SystemNanoTimeSleeper(){}  }
class C{  float readBoost(Element el){  NodeList list=el.getElementsByTagName("boost");  if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_BOOST;  return Float.parseFloat(list.item(0).getFirstChild().getNodeValue());}  }
class C{  protected PublicKey engineGeneratePublic(KeySpec keySpec) throws InvalidKeySpecException {  try {    if (keySpec instanceof DSAPublicKeySpec) {      DSAPublicKeySpec dsaPubKeySpec=(DSAPublicKeySpec)keySpec;      if (SERIAL_INTEROP) {        return new DSAPublicKey(dsaPubKeySpec.getY(),dsaPubKeySpec.getP(),dsaPubKeySpec.getQ(),dsaPubKeySpec.getG());      } else {        return new DSAPublicKeyImpl(dsaPubKeySpec.getY(),dsaPubKeySpec.getP(),dsaPubKeySpec.getQ(),dsaPubKeySpec.getG());      }    } else     if (keySpec instanceof X509EncodedKeySpec) {      if (SERIAL_INTEROP) {        return new DSAPublicKey(((X509EncodedKeySpec)keySpec).getEncoded());      } else {        return new DSAPublicKeyImpl(((X509EncodedKeySpec)keySpec).getEncoded());      }    } else {      throw new InvalidKeySpecException("Inappropriate key specification");    }  } catch (  InvalidKeyException e) {    throw new InvalidKeySpecException("Inappropriate key specification: " + e.getMessage());  }}  }
class C{  public static int sumToInt(char[] array){  int sum=0;  for (  char x : array) {    sum+=x;  }  return sum;}  }
class C{  public Signature(final byte[] bytes){  if (64 != bytes.length) {    throw new IllegalArgumentException("binary signature representation must be 64 bytes");  }  final byte[][] parts=ArrayUtils.split(bytes,32);  this.r=parts[0];  this.s=parts[1];}  }
class C{  public static void enableSleepMode(){  lock.reenableKeyguard();}  }
class C{  private static synchronized void userLog(final String message,final String prefix){  final PrintStream log=getLogStream();  if (log != null) {    log.println(now() + prefix + message);    final long currentTimeMillis=System.currentTimeMillis();    if (currentTimeMillis - sLastFlushTime > FLUSH_INTERVAL) {      log.flush();      sLastFlushTime=currentTimeMillis;    }    if (log.checkError()) {      if (!log.equals(System.err)) {        if (!sLogRedirect) {          sLogRedirect=true;          System.err.println("Logging problem: redirecting logging to System.err.");          setLogStream(System.err);        }        System.err.println(now() + message);        System.err.flush();      }    }  }}  }
class C{  protected int[] computePixels(byte[] bits){  int foreground, background;  int npix, i, j, k, w;  int[] masks={1,2,4,8,16,32,64,128};  int nPixels=width * height;  int[] iPixels=new int[nPixels];  if (bits == null || (bits.length * 8) < nPixels) {    System.err.println("OMBitmap.computePixels(): not enough bits!");    return iPixels;  }  Paint paint=getDisplayPaint();  if (paint instanceof Color) {    foreground=((Color)paint).getRGB();  } else {    foreground=Color.black.getRGB();  }  paint=getFillPaint();  if (paint instanceof Color) {    background=((Color)paint).getRGB();  } else {    background=OMGraphic.clear.getRGB();  }  int defaultColor=128 << 24;  int excess=width % 8;  int bytes_per_row=width / 8;  if (excess > 0) {    Debug.message("omGraphics","OMBitmap.computePixels(): excess byte");    bytes_per_row++;  }  Debug.message("omGraphics","OMBitmap.computePixels(): bits.length = " + bits.length);  for (npix=0, i=0; i < height; i++) {    for (j=0, w=0; j < bytes_per_row; j++) {      int idx=(i * bytes_per_row) + j;      for (k=0; (k < 8) & (w < width) & (npix < nPixels); k++, w++, npix++) {        int set=masks[k] & bits[idx];        if (set > 0) {          iPixels[npix]=foreground;        } else {          iPixels[npix]=background;        }      }    }  }  if (npix < nPixels - 1) {    for (i=npix; i < nPixels; i++) {      iPixels[i]=defaultColor;    }  }  return iPixels;}  }
class C{  public static ScrollViewLicenseFragment newInstance(){  return (ScrollViewLicenseFragment)onNewInstance(new ScrollViewLicenseFragment());}  }
class C{  public static ECKey fromASN1(byte[] asn1privkey){  return new ECKey(extractPrivateKeyFromASN1(asn1privkey));}  }
class C{  public static BufferedImage createRGBImageFromYCCK(Raster ycckRaster,ICC_Profile cmykProfile){  BufferedImage image;  if (cmykProfile != null) {    ycckRaster=convertYCCKtoCMYK(ycckRaster);    image=createRGBImageFromCMYK(ycckRaster,cmykProfile);  } else {    int w=ycckRaster.getWidth(), h=ycckRaster.getHeight();    int[] rgb=new int[w * h];    int[] Y=ycckRaster.getSamples(0,0,w,h,0,(int[])null);    int[] Cb=ycckRaster.getSamples(0,0,w,h,1,(int[])null);    int[] Cr=ycckRaster.getSamples(0,0,w,h,2,(int[])null);    int[] K=ycckRaster.getSamples(0,0,w,h,3,(int[])null);    float vr, vg, vb;    for (int i=0, imax=Y.length; i < imax; i++) {      float k=K[i], y=Y[i], cb=Cb[i], cr=Cr[i];      vr=y + 1.402f * (cr - 128) - k;      vg=y - 0.34414f * (cb - 128) - 0.71414f * (cr - 128) - k;      vb=y + 1.772f * (cb - 128) - k;      rgb[i]=(0xff & (vr < 0.0f ? 0 : vr > 255.0f ? 0xff : (int)(vr + 0.5f))) << 16 | (0xff & (vg < 0.0f ? 0 : vg > 255.0f ? 0xff : (int)(vg + 0.5f))) << 8 | (0xff & (vb < 0.0f ? 0 : vb > 255.0f ? 0xff : (int)(vb + 0.5f)));    }    Raster rgbRaster=Raster.createPackedRaster(new DataBufferInt(rgb,rgb.length),w,h,w,new int[]{0xff0000,0xff00,0xff},null);    ColorSpace cs=ColorSpace.getInstance(ColorSpace.CS_sRGB);    ColorModel cm=new DirectColorModel(cs,24,0xff0000,0xff00,0xff,0x0,false,DataBuffer.TYPE_INT);    image=new BufferedImage(cm,(WritableRaster)rgbRaster,true,null);  }  return image;}  }
class C{  public static Long writeOpCRC32(String stream,byte[] payload){  CRC32 crc=requestCRC.get();  try {    crc.update(stream.getBytes());    crc.update(payload);    return crc.getValue();  }  finally {    crc.reset();  }}  }
class C{  public CircleFilter(){  try {    setEdgeAction("ZERO");  } catch (  ExpressionException e) {  }}  }
class C{  @Override public void remove(){  assert thisCell != null;}  }
class C{  public EgovPaginatedList(final Page page,final String sortCriterion,final SortOrderEnum sortDir){  super();  this.pageNumber=page.getPageNo();  this.objectsPerPage=page.getPageSize();  this.sortCriterion=sortCriterion;  this.sortDirection=sortDir;}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  if (!(params instanceof ParametersWithIV)) {    throw new IllegalArgumentException("Grain v1 Init parameters must include an IV");  }  ParametersWithIV ivParams=(ParametersWithIV)params;  byte[] iv=ivParams.getIV();  if (iv == null || iv.length != 8) {    throw new IllegalArgumentException("Grain v1 requires exactly 8 bytes of IV");  }  if (!(ivParams.getParameters() instanceof KeyParameter)) {    throw new IllegalArgumentException("Grain v1 Init parameters must include a key");  }  KeyParameter key=(KeyParameter)ivParams.getParameters();  workingIV=new byte[key.getKey().length];  workingKey=new byte[key.getKey().length];  lfsr=new int[STATE_SIZE];  nfsr=new int[STATE_SIZE];  out=new byte[2];  System.arraycopy(iv,0,workingIV,0,iv.length);  System.arraycopy(key.getKey(),0,workingKey,0,key.getKey().length);  reset();}  }
class C{  public float[] valueArray(){  return valueArray(null);}  }
class C{  public boolean useMetrics(int index){  return ((getFlag(index) & USE_MY_METRICS) != 0);}  }
class C{  public static byte asByte(int a){  if (a != (byte)a) {    throw new ArithmeticException("overflow: " + a);  }  return (byte)a;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Matrix4d rotateZYX(double angleZ,double angleY,double angleX){  return rotateZYX(angleZ,angleY,angleX,this);}  }
class C{  public void assertTrue(boolean value){  TestUtils.assertTrue(value);}  }
class C{  @Override public boolean equals(@Nullable Object object){  if (object == this) {    return true;  }  if (object instanceof InternetDomainName) {    InternetDomainName that=(InternetDomainName)object;    return this.name.equals(that.name);  }  return false;}  }
class C{  public static NormalPlayTime consumeNormalPlayTime(AttributeHelper attrHelper,String name) throws ParseException {  String value=attrHelper.consume(name,false);  if (value == null) {    return null;  }  try {    return NormalPlayTime.parse(value);  } catch (  java.text.ParseException e) {    throw new ParseException(CoreErrorDomain.ERR.invalidTimeOffset.withInternalReason("Invalid time offset value for attribute '" + name + "'"),e);  }}  }
class C{  public double computeAverageLocalEntropyRateOfObservations(){  double entRate=0.0;  double entRateCont=0.0;  for (int nextVal=0; nextVal < base; nextVal++) {    for (int prevVal=0; prevVal < base_power_k; prevVal++) {      double p_prev=(double)pastCount[prevVal] / (double)observations;      double p_joint=(double)nextPastCount[nextVal][prevVal] / (double)observations;      if (p_joint > 0.0) {        double logTerm=p_joint / p_prev;        double localValue=-Math.log(logTerm) / log_base;        entRateCont=p_joint * localValue;      } else {        entRateCont=0.0;      }      entRate+=entRateCont;    }  }  return entRate;}  }
class C{  @HLEFunction(nid=0x362CBE8F,version=150) public int sceNetAdhocctlGetAdhocId(TPointer addr){  checkInitialized();  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocctlGetAdhocId returning type=%d, adhocID='%s'",adhocctlCurrentType,adhocctlCurrentAdhocID));  }  addr.setValue32(0,adhocctlCurrentType);  addr.setStringNZ(4,ADHOC_ID_LENGTH,adhocctlCurrentAdhocID);  return 0;}  }
class C{  private int[][] computeMeans(List<CLIQUESubspace<V>> denseSubspaces){  int n=denseSubspaces.size() - 1;  int[] mi=new int[n + 1];  int[] mp=new int[n + 1];  double resultMI=0;  double resultMP=0;  for (int i=0; i < denseSubspaces.size(); i++) {    resultMI+=denseSubspaces.get(i).getCoverage();    resultMP+=denseSubspaces.get(n - i).getCoverage();    mi[i]=(int)Math.ceil(resultMI / (i + 1));    if (i != n) {      mp[n - 1 - i]=(int)Math.ceil(resultMP / (i + 1));    }  }  int[][] result=new int[2][];  result[0]=mi;  result[1]=mp;  return result;}  }
class C{  public EventStoreBuilder clusterNodeDiscoveryFromGossipSeeds(List<InetSocketAddress> endpoints){  clusterNodeDiscoveryFromGossipSeeds=endpoints.stream().map(null).collect(toList());  return this;}  }
class C{  public static void showExitCodes(final Display display){  Check.notNull(display,"display");  printHeader(display);  display.printLine(Messages.getString("Help.ExitStatusCodesHeader"));  display.printLine("");  printExitCode(display,ExitCode.SUCCESS,Messages.getString("Help.ExitCodeSuccess"));  printExitCode(display,ExitCode.PARTIAL_SUCCESS,Messages.getString("Help.ExitCodePartialSuccess"));  printExitCode(display,ExitCode.UNRECOGNIZED_COMMAND,Messages.getString("Help.ExitCodeUnrecognizedCommand"));  printExitCode(display,ExitCode.NOT_ATTEMPTED,Messages.getString("Help.ExitCodeNotAttempted"));  printExitCode(display,ExitCode.FAILURE,Messages.getString("Help.ExitCodeFailure"));}  }
class C{  private CloudSolrClient(Collection<String> zkHosts,String chroot,HttpClient httpClient,LBHttpSolrClient lbSolrClient,LBHttpSolrClient.Builder lbHttpSolrClientBuilder,boolean updatesToLeaders,boolean directUpdatesToLeadersOnly){  this.zkHost=buildZkHostString(zkHosts,chroot);  this.clientIsInternal=httpClient == null;  this.shutdownLBHttpSolrServer=lbSolrClient == null;  if (lbHttpSolrClientBuilder != null)   lbSolrClient=lbHttpSolrClientBuilder.build();  if (lbSolrClient != null)   httpClient=lbSolrClient.getHttpClient();  this.myClient=httpClient == null ? HttpClientUtil.createClient(null) : httpClient;  if (lbSolrClient == null)   lbSolrClient=createLBHttpSolrClient(myClient);  this.lbClient=lbSolrClient;  this.updatesToLeaders=updatesToLeaders;  this.directUpdatesToLeadersOnly=directUpdatesToLeadersOnly;}  }
class C{  @Override public void process(Number tuple){  RMax.this.process(tuple);}  }
class C{  public static TellerJournalData instance(final Long officeId,final Long tellerId,final Date day,final Double openingBalance,final Double settledBalance,final Double closingBalance,final Double sumReceipts,final Double sumPayments){  return new TellerJournalData(officeId,tellerId,day,openingBalance,settledBalance,closingBalance,sumReceipts,sumPayments);}  }
class C{  public static Map<String,String> parseLabels(int initialCapacity,String str) throws ParseException {  Map<String,String> selectors=parseLabelsSelectors(str);  Map<String,String> labels=new HashMap<String,String>(selectors.size() + initialCapacity);  for (  Entry<String,String> entry : selectors.entrySet()) {    if ('=' != entry.getValue().charAt(0)) {      throw new ParseException(entry.getValue(),0);    }    labels.put(entry.getKey(),entry.getValue().substring(1));  }  return labels;}  }
class C{  protected void removeIndexInfo(IndexInfo index){  indexes.remove(index.id);}  }
class C{  public List<?> searchEntriesForUserByNotebookTitle(String userId,String query,int startPosition,int maxResults){  return db.searchEntriesForUserHelper(userId,"notebookTitle",query,startPosition,maxResults);}  }
class C{  public static int nullSafeHashCode(float[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + hashCode(array[i]);  }  return hash;}  }
class C{  public ProcessSelectedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public double[][] eigenVectors(){  double[][] eigenVectors=new double[eigenPairs.length][eigenPairs.length];  for (int i=0; i < eigenPairs.length; i++) {    EigenPair eigenPair=eigenPairs[i];    VMath.setCol(eigenVectors,i,eigenPair.getEigenvector());  }  return eigenVectors;}  }
class C{  @Deprecated public static double quantile(double x,double mu,double shape){  throw new NotImplementedException();}  }
class C{  public void closeDialog(){  view.close();}  }
class C{  synchronized public Object clone(){  SnmpString newclone=null;  try {    newclone=(SnmpString)super.clone();    newclone.value=new byte[value.length];    System.arraycopy(value,0,newclone.value,0,value.length);  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }  return newclone;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.737 -0400",hash_original_method="90EDC96C8584B0F7C76A1BA2408C4520",hash_generated_method="EB18E9706549C82526146922C7D5B933") @Override protected synchronized void afterRead(int n){  if (n != -1) {    this.count+=n;  }}  }
class C{  protected void createColumnMaskArray(boolean[] mask){  if (mask != null && mask.length <= _columnCount) {    _columnMask=new Object[mask.length];    for (int i=0; i < mask.length; i++) {      if (mask[i] == true) {        _columnMask[i]=Boolean.TRUE;      } else {        _columnMask[i]=new Integer(_lengths[i]);      }    }    resolveColumns();  }}  }
class C{  public void clearSelection(){  if (selection != null) {    ButtonModel oldSelection=selection;    selection=null;    oldSelection.setSelected(false);  }}  }
class C{  public void put(NameValuePair pair){  throwIfImmutable();  if (pair == null) {    throw new NullPointerException("pair == null");  }  elements.put(pair.getName(),pair);}  }
class C{  public void testExclude() throws IOException {  CharArraySet exclusionSet=new CharArraySet(asSet("chicano"),false);  Analyzer a=new SpanishAnalyzer(SpanishAnalyzer.getDefaultStopSet(),exclusionSet);  checkOneTerm(a,"chicana","chican");  checkOneTerm(a,"chicano","chicano");  a.close();}  }
class C{  public void registerPlaylistListener(CheerleaderPlaylistListener listener){  checkState();  mCheerleaderPlaylistListeners.add(listener);}  }
class C{  private int mulsubLong(int[] q,int dh,int dl,int x,int offset){  long xLong=x & LONG_MASK;  offset+=2;  long product=(dl & LONG_MASK) * xLong;  long difference=q[offset] - product;  q[offset--]=(int)difference;  long carry=(product >>> 32) + (((difference & LONG_MASK) > (((~(int)product) & LONG_MASK))) ? 1 : 0);  product=(dh & LONG_MASK) * xLong + carry;  difference=q[offset] - product;  q[offset--]=(int)difference;  carry=(product >>> 32) + (((difference & LONG_MASK) > (((~(int)product) & LONG_MASK))) ? 1 : 0);  return (int)carry;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a string: ");  String string=input.nextLine();  System.out.println(sort(string));}  }
class C{  public CopyingRangeMarker(int offset,int length){  super(offset,length);}  }
class C{  private void assertion(boolean b,String msg){  if (!b) {    String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg});    throw new RuntimeException(fMsg);  }}  }
class C{  public void resetReadPosition(){  readHead.reset();}  }
class C{  @Override public void clear(){}  }
class C{  protected void checkInteractionCorrelationIdentifiers(Producer producer,Consumer consumer){  CorrelationIdentifier pcid=producer.getCorrelationIds().iterator().next();  CorrelationIdentifier ccid=consumer.getCorrelationIds().iterator().next();  assertEquals(pcid,ccid);}  }
class C{  public void closeOpenedItem(){  if (isOpend()) {    autoScroll(mSlideItem.offset,false);  }}  }
class C{  public ZFastTrieDistributor(final Iterable<? extends T> elements,final int log2BucketSize,final TransformationStrategy<? super T> transformationStrategy,final ChunkedHashStore<BitVector> chunkedHashStore) throws IOException {  this.transformationStrategy=transformationStrategy;  this.seed=chunkedHashStore.seed();  final ProgressLogger pl=new ProgressLogger(LOGGER);  pl.displayLocalSpeed=true;  pl.displayFreeMemory=true;  final IntermediateTrie<T> intermediateTrie=new IntermediateTrie<T>(elements,log2BucketSize,transformationStrategy,seed,pl);  size=intermediateTrie.numElements;  emptyTrie=intermediateTrie.internalNodeRepresentations.size64() == 0;  noDelimiters=intermediateTrie.delimiters == null || intermediateTrie.delimiters.size64() == 0;  if (noDelimiters) {    behaviour=null;    signatures=null;    leaves=null;    return;  }  logWMask=intermediateTrie.logWMask;  logW=intermediateTrie.logW;  signatureMask=intermediateTrie.signatureMask;  LOGGER.info("Computing behaviour function...");  behaviour=new GOV3Function.Builder<BitVector>().keys(TransformationStrategies.wrap(elements,transformationStrategy)).transform(TransformationStrategies.identity()).store(chunkedHashStore).values(intermediateTrie.externalValues,1).indirect().build();  intermediateTrie.externalValues=null;  if (!emptyTrie) {    numDelimiters=intermediateTrie.delimiters.size();    if (DDEBUG) {      System.err.println("Internal node representations: " + intermediateTrie.internalNodeRepresentations);      System.err.println("Internal node keys: " + intermediateTrie.internalNodeKeys);    }    ObjectOpenHashSet<LongArrayBitVector> rankers=new ObjectOpenHashSet<LongArrayBitVector>();    pl.itemsName="nodes";    pl.expectedUpdates=intermediateTrie.internalNodeRepresentations.size();    pl.start("Computing leaf ranker keys...");    for (    BitVector bv : intermediateTrie.internalNodeRepresentations) {      rankers.add(LongArrayBitVector.copy(bv.subVector(0,bv.lastOne() + 1)));      rankers.add(LongArrayBitVector.copy(bv).append(1,1));      LongArrayBitVector plus1=LongArrayBitVector.copy(bv);      long lastZero=plus1.lastZero();      if (lastZero != -1) {        plus1.length(lastZero + 1);        plus1.set(lastZero);        rankers.add(plus1);      }      pl.lightUpdate();    }    pl.done();    intermediateTrie.internalNodeRepresentations.close();    intermediateTrie.internalNodeRepresentations=null;    LOGGER.info("Sorting leaf ranker keys...");    LongArrayBitVector[] rankerArray=rankers.toArray(new LongArrayBitVector[rankers.size()]);    rankers=null;    Arrays.sort(rankerArray);    if (DDEBUG) {      System.err.println("Rankers: ");      for (      BitVector bv : rankerArray)       System.err.println(bv);      System.err.println();    }    LongArrayBitVector leavesBitVector=LongArrayBitVector.ofLength(rankerArray.length);    int q=0;    LOGGER.info("Setting up leaf ranker bit vector...");    final OfflineIterator<BitVector,LongArrayBitVector> delimiterIterator=intermediateTrie.delimiters.iterator();    LongArrayBitVector bv=delimiterIterator.next();    int cmp;    for (    BitVector v : rankerArray) {      while (bv != null) {        cmp=bv.compareTo(v);        if (cmp == 0)         leavesBitVector.set(q);        if (cmp >= 0)         break;        bv=delimiterIterator.hasNext() ? delimiterIterator.next() : null;      }      q++;    }    delimiterIterator.close();    intermediateTrie.delimiters.close();    leaves=new Rank9(leavesBitVector);    if (DDEBUG)     System.err.println("Rank bit vector: " + leavesBitVector);    LOGGER.info("Creating leaf ranker...");    ranker=new TwoStepsLcpMonotoneMinimalPerfectHashFunction.Builder<BitVector>().keys(Arrays.asList(rankerArray)).transform(TransformationStrategies.prefixFree()).build();    rankerArray=null;    LOGGER.info("Computing length/signature map...");    ChunkedHashStore<BitVector> intermediateTrieChunkedHashStore=new ChunkedHashStore<BitVector>(TransformationStrategies.identity(),chunkedHashStore.tempDir());    intermediateTrieChunkedHashStore.reset(seed);    intermediateTrieChunkedHashStore.addAll(intermediateTrie.internalNodeKeys.iterator(),intermediateTrie.internalNodeSignatures.iterator());    signatures=new GOV3Function.Builder<BitVector>().store(intermediateTrieChunkedHashStore,intermediateTrie.logW + intermediateTrie.signatureSize).build();    intermediateTrie.internalNodeSignatures=null;    intermediateTrie.internalNodeKeys.close();    intermediateTrie.internalNodeKeys=null;    intermediateTrieChunkedHashStore.close();    this.mistakeSignatures=new IntOpenHashSet();    final IntOpenHashSet mistakeSignatures=new IntOpenHashSet();    long c;    pl.itemsName="keys";    pl.expectedUpdates=size;    pl.start("Searching for mistakes...");    Iterator<BitVector> iterator=TransformationStrategies.wrap(elements.iterator(),transformationStrategy);    c=0;    int mistakes=0;    while (iterator.hasNext()) {      BitVector curr=iterator.next().fast();      if (DEBUG)       System.err.println("Checking element number " + c + ((c + 1) % (1L << log2BucketSize) == 0 ? " (bucket)" : ""));      if (getNodeStringLength(curr) != intermediateTrie.externalParentRepresentations.getInt(c)) {        if (DEBUG)         System.err.println("Error! " + getNodeStringLength(curr) + " != "+ intermediateTrie.externalParentRepresentations.getInt(c));        long h=Hashes.spooky4(curr,seed);        mistakeSignatures.add((int)h);        mistakes++;      }      pl.lightUpdate();      c++;    }    pl.done();    LOGGER.info("Errors: " + mistakes + " ("+ (100.0 * mistakes / size)+ "%)");    assert size < 10000 || (double)mistakes / size < .5 : "size = " + size + ", errors = "+ 100.0 * mistakes / size + "% >= 50%";    ObjectArrayList<BitVector> positives=new ObjectArrayList<BitVector>();    LongArrayList results=new LongArrayList();    c=0;    pl.expectedUpdates=size;    pl.start("Searching for false positives...");    for (    BitVector curr : TransformationStrategies.wrap(elements,transformationStrategy)) {      long h=Hashes.spooky4(curr,seed);      if (mistakeSignatures.contains((int)h)) {        positives.add(curr.copy());        results.add(intermediateTrie.externalParentRepresentations.getInt(c));      }      c++;      pl.lightUpdate();    }    pl.done();    LOGGER.info("False errors: " + (positives.size() - mistakes) + (positives.size() != 0 ? " (" + 100 * (positives.size() - mistakes) / (positives.size()) + "%)" : ""));    this.mistakeSignatures=mistakeSignatures;    LOGGER.info("Creating correction function...");    corrections=new GOV3Function.Builder<BitVector>().keys(positives).transform(TransformationStrategies.identity()).values(results,logW).build();    final int bucketSize=1 << log2BucketSize;    LOGGER.debug("Forecast signature bits per element: " + (1.0 / bucketSize) * (GOV3Function.C + log2(intermediateTrie.w) + log2(bucketSize)+ log2(log2(intermediateTrie.w))));    LOGGER.debug("Actual signature bits per element: " + (double)signatures.numBits() / size);    LOGGER.debug("Forecast ranker bits per element: " + (3.0 / bucketSize) * (GOV3Function.C + log2(Math.E) - log2(log2(Math.E)) + log2(1 + log2(3.0 * size / bucketSize)) + log2(intermediateTrie.w - log2(log2(size)))));    LOGGER.debug("Actual ranker bits per element: " + (double)ranker.numBits() / size);    LOGGER.debug("Forecast leaves bits per element: " + (3.0 / bucketSize));    LOGGER.debug("Actual leaves bits per element: " + (double)leaves.bitVector().length() / size);    LOGGER.debug("Forecast mistake bits per element: " + (log2(bucketSize) / bucketSize + 2 * GOV3Function.C / bucketSize));    LOGGER.debug("Actual mistake bits per element: " + (double)numBitsForMistakes() / size);    LOGGER.debug("Forecast behaviour bits per element: " + GOV3Function.C);    LOGGER.debug("Actual behaviour bits per element: " + (double)behaviour.numBits() / size);  } else {    signatures=null;    leaves=null;  }  if (ASSERTS) {    final Iterator<BitVector> iterator=TransformationStrategies.wrap(elements.iterator(),transformationStrategy);    int c=0;    while (iterator.hasNext()) {      BitVector curr=iterator.next();      if (DEBUG)       System.err.println("Checking element number " + c + ((c + 1) >>> log2BucketSize == 0 ? " (bucket)" : ""));      long t=getLong(curr);      assert t == c >>> log2BucketSize : "At " + c + ": "+ (c >>> log2BucketSize)+ " != "+ t;      c++;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.530 -0500",hash_original_method="19B54E9E42F50C19B80602093C26BC32",hash_generated_method="A8A3C236FF85813945F7C1B0B7869E60") @android.view.RemotableViewMethod public void smoothScrollToPosition(int position){  super.smoothScrollToPosition(position);}  }
class C{  public final DD multiply(DD y){  if (y.isNaN())   return createNaN();  return copy(this).selfMultiply(y);}  }
class C{  public PowerVmSelectionPolicyMaximumCorrelation(final PowerVmSelectionPolicy fallbackPolicy){  super();  setFallbackPolicy(fallbackPolicy);}  }
class C{  public MethodBody_ createMethodBody_(){  MethodBody_Impl methodBody_=new MethodBody_Impl();  return methodBody_;}  }
class C{  public void updateCursorCounter(){  ++cursorCounter;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public KeyedVersions(KeyedVersions other){  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersions()) {    List<VectorClock> __this__versions=new ArrayList<VectorClock>();    for (    VectorClock other_element : other.versions) {      __this__versions.add(new VectorClock(other_element));    }    this.versions=__this__versions;  }}  }
class C{  public ExecutionState basicGetState(){  return state;}  }
class C{  public static <E>SameVariableConstraint<E> newInstance(final IPredicate<E> p){  final int arity=p.arity();  Map<IVariableOrConstant<?>,Integer> vars=null;  int noccurs=0;  int nreused=0;{    for (int i=0; i < arity; i++) {      final IVariableOrConstant<?> t=p.get(i);      if (t != null && t.isVar()) {        if (vars == null) {          vars=new LinkedHashMap<IVariableOrConstant<?>,Integer>();        }        Integer cnt=vars.get(t);        if (cnt == null) {          vars.put(t,cnt=Integer.valueOf(1));        } else {          final int tmp=cnt.intValue() + 1;          vars.put(t,cnt=Integer.valueOf(tmp));          noccurs+=(tmp == 2 ? 2 : 1);          if (tmp == 2) {            nreused++;          }        }      }    }    if (nreused == 0) {      return null;    }  }  assert vars != null;  final int[] indices=new int[nreused + noccurs];{    int i=0;    final Iterator<Map.Entry<IVariableOrConstant<?>,Integer>> itr=vars.entrySet().iterator();    while (itr.hasNext()) {      final Map.Entry<IVariableOrConstant<?>,Integer> e=itr.next();      final int nused=e.getValue().intValue();      if (nused < 2)       continue;      final IVariable<?> var=(IVariable<?>)e.getKey();      indices[i++]=nused;      for (int j=0; j < arity; j++) {        final IVariableOrConstant<?> t=p.get(j);        if (t == var) {          indices[i++]=j;        }      }    }    assert i == indices.length;  }  return new SameVariableConstraint<E>(p,indices);}  }
class C{  public static long[] copyOf(long[] original,int newLength){  long[] copy=new long[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  protected EnterStateImpl(){  super();}  }
class C{  public static boolean checkInstanceOf(CharSequence targetClassName,Class<?> referenceClass){  if ((targetClassName == null) || (referenceClass == null))   return false;  if (TextUtils.equals(targetClassName,referenceClass.getName()))   return true;  final Class<?> targetClass=loadOrGetCachedClass(targetClassName.toString());  return targetClass != null && referenceClass.isAssignableFrom(targetClass);}  }
class C{  public void closeContacts(EvolutionState state,int result){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.877 -0500",hash_original_method="A6DC82312CC05525C4EDA100C7030059",hash_generated_method="E0EB1235C5A74D15A23344DCA4CDDBF1") public static int HSBtoColor(float[] hsb){  return HSBtoColor(hsb[0],hsb[1],hsb[2]);}  }
class C{  public ReferenceVectorGuidedPopulationState(List<Solution> population,double[] idealPoint,List<double[]> originalWeights,List<double[]> weights,double[] minAngles,double scalingFactor){  super();  this.population=population;  this.idealPoint=idealPoint;  this.originalWeights=originalWeights;  this.weights=weights;  this.minAngles=minAngles;  this.scalingFactor=scalingFactor;}  }
class C{  public static void sendEmail(Context context,final String[] receivers,final String subject,final String text){  sendEmail(context,receivers,subject,text,null,null,null);}  }
class C{  public Builder project(final String project){  this.project=project;  return this;}  }
class C{  public boolean isTriangleVisible(){  return (triangleVisible);}  }
class C{  @DSComment("not data related") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:54.954 -0500",hash_original_method="3A4DB6943FB30203AAE55BF43F989AF0",hash_generated_method="58A36CBF0329AE3E528072CFA778039D") public PBEKeySpec(char[] password,byte[] salt,int iterationCount,int keyLength){  if (salt == null) {    throw new NullPointerException("salt == null");  }  if (salt.length == 0) {    throw new IllegalArgumentException("salt.length == 0");  }  if (iterationCount <= 0) {    throw new IllegalArgumentException("iterationCount <= 0");  }  if (keyLength <= 0) {    throw new IllegalArgumentException("keyLength <= 0");  }  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;  this.keyLength=keyLength;}  }
class C{  public static <T>Monad<T> of(final Object of){  return new MonadWrapper(of);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int cols, rows, col, row, a, numImages, loopNum, progress;  double noData;  String inputFilesString;  String[] imageFiles;  String[] shortNames;  double[] imageTotals;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    imageTotals=new double[numImages];    shortNames=new String[numImages];    double[] data;    loopNum=0;    for (a=0; a < numImages; a++) {      loopNum++;      updateProgress("Loop " + loopNum + " of "+ numImages+ ":",0);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);      }      image.close();    }    String retstr;    DecimalFormat df=new DecimalFormat("###,###,###,###.0000");    retstr="Number of Grid Cells:\n\n";    for (a=0; a < numImages; a++) {      retstr+=shortNames[a] + ":\t" + df.format(imageTotals[a])+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected boolean isNewLineForbidden(PerlFormattingBlock block){  PsiElement element=block.getNode().getPsi();  PsiFile file=element.getContainingFile();  assert file instanceof PerlFileImpl;  return ((PerlFileImpl)file).isNewLineForbiddenAt(element);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(Math.ceil(m_arg0.execute(xctxt).num()));}  }
class C{  private void rollBackPolicyOnVplexBackendVolume(Volume volume,List<Volume> volumesToUpdate,DbClient dbClient){  Volume backendSrc=VPlexUtil.getVPLEXBackendVolume(volume,true,dbClient,false);  if (backendSrc != null) {    _log.info("rolling back auto tiering policy on VPLEX backend source volume {}({})",backendSrc.getId(),backendSrc.getLabel());    URI policyURI=oldVolToPolicyMap.get(backendSrc.getId());    if (policyURI == null) {      policyURI=NullColumnValueGetter.getNullURI();    }    backendSrc.setAutoTieringPolicyUri(policyURI);    _log.info("set volume's auto tiering policy back to {}",policyURI);    volumesToUpdate.add(backendSrc);    Volume backendHa=VPlexUtil.getVPLEXBackendVolume(volume,false,dbClient,false);    if (backendHa != null) {      _log.info("rolling back auto tiering policy on VPLEX backend distributed volume {}({})",backendHa.getId(),backendHa.getLabel());      policyURI=oldVolToPolicyMap.get(backendHa.getId());      if (policyURI == null) {        policyURI=NullColumnValueGetter.getNullURI();      }      backendHa.setAutoTieringPolicyUri(policyURI);      _log.info("set volume's auto tiering policy back to {}",policyURI);      volumesToUpdate.add(backendHa);    }  }}  }
class C{  public void testJoinEscapesSemicolons(){  Properties inner=new Properties();  inner.setProperty("baz","blorple;zot");  assertEquals("baz=blorple\\;zot",PropertyUtils.joinOnSemicolon(PropertyUtils.toMap(inner)));}  }
class C{  public static void run(AdExchangeSeller adExchangeSeller,String adClientId,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all URL channels for ad client %s\n",adClientId);  System.out.println("=================================================================");  String pageToken=null;  do {    UrlChannels urlChannels=adExchangeSeller.urlchannels().list(adClientId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (urlChannels.getItems() != null && !urlChannels.getItems().isEmpty()) {      for (      UrlChannel channel : urlChannels.getItems()) {        System.out.printf("URL channel with URL pattern \"%s\" was found.\n",channel.getUrlPattern());      }    } else {      System.out.println("No URL channels found.");    }    pageToken=urlChannels.getNextPageToken();  } while (pageToken != null);  System.out.println();}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public static SkipResult skip(String reason){  return new SkipResult(true,reason);}  }
class C{  public int exitCode(){  return exitCode;}  }
class C{  public static long[] grayI(long[] v){  long[] t=copy(v);  shiftRightI(t,1);  xorI(v,t);  return v;}  }
class C{  public boolean next(){  if (!m_started) {    pushLongestPathFrom(m_root);    m_started=true;  } else {    if (m_traversalStack.empty()) {      throw new RuntimeException("Internal Error: Traversal already finished");    }    final Pair<IOperandTreeNode,Integer> lastProcessed=m_traversalStack.pop();    final IOperandTreeNode lastProcessedNode=lastProcessed.first();    final int lastProcessedChildrenProcessed=lastProcessed.second();    if (lastProcessedChildrenProcessed < lastProcessedNode.getChildren().size()) {      if (lastProcessed.first().getChildren().size() > 1) {        m_traversalStack.add(lastProcessed);      }      pushLongestPathFrom(lastProcessedNode.getChildren().get(lastProcessedChildrenProcessed));      return true;    } else {      if (m_traversalStack.empty()) {        return false;      } else {        do {          final Pair<IOperandTreeNode,Integer> parent=m_traversalStack.pop();          if (parent.second() < (parent.first().getChildren().size() - 1)) {            m_traversalStack.push(new Pair<IOperandTreeNode,Integer>(parent.first(),parent.second() + 1));            return true;          }        } while (!m_traversalStack.empty());      }    }  }  return !m_traversalStack.empty();}  }
class C{  protected PngChunk createEmptyChunkExtended(String id,ImageInfo imgInfo){  if (id.equals(PngChunkOFFS.ID))   return new PngChunkOFFS(imgInfo);  if (id.equals(PngChunkSTER.ID))   return new PngChunkSTER(imgInfo);  return null;}  }
class C{  @SuppressWarnings("unchecked") private void notifyGraphListeners(GraphEvent ge){  Vector<GraphListener> l;synchronized (this) {    l=(Vector<GraphListener>)m_graphListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptGraph(ge);    }  }}  }
class C{  @Override public boolean isResponsible(Class<?> clazz){  return clazz == byte[].class;}  }
class C{  @Override public synchronized void flush(){}  }
class C{  static Locale parseLanguageTag(String languageTag){  String localeParts[]=languageTag.split("_",3);  if (localeParts.length >= 2) {    return new Locale(localeParts[0],localeParts[1]);  } else   if (localeParts.length >= 1) {    return new Locale(localeParts[0]);  } else {    return Locale.ENGLISH;  }}  }
class C{  public void pointerRelease(float x,float y,int[] path){  TestUtils.pointerRelease(x,y,path);}  }
class C{  private Dimension calculateElementSize(boolean selected,boolean addMargin){  if (renderingPrototype != null) {    Component unselected=renderer.getListCellRendererComponent(this,renderingPrototype,0,selected);    if (addMargin) {      return unselected.getPreferredSizeWithMargin();    } else {      return unselected.getPreferredSize();    }  }  int width=0;  int height=0;  int elements=Math.min(listSizeCalculationSampleCount,model.getSize());  int marginY=0;  int marginX=0;  for (int iter=0; iter < elements; iter++) {    Component cmp=renderer.getListCellRendererComponent(this,model.getItemAt(iter),iter,selected);    if (cmp instanceof Container) {      cmp.setShouldCalcPreferredSize(true);    }    Dimension d=cmp.getPreferredSize();    width=Math.max(width,d.getWidth());    height=Math.max(height,d.getHeight());    if (iter == 0) {      Style s=cmp.getStyle();      marginY=s.getMargin(TOP) + s.getMargin(BOTTOM);      marginX=s.getMargin(LEFT) + s.getMargin(RIGHT);    }  }  return new Dimension(width + marginX,height + marginY);}  }
class C{  public void filter_apps(List<InstalledApp> to_keep){  _app_adapter.filter_apps(to_keep);}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  public final void wait() throws java.lang.InterruptedException {  return;}  }
class C{  protected int lengthOfByteStream(TamsMessage m){  int len=m.getNumDataElements();  int cr=0;  if (!m.isBinary())   cr=1;  return len + cr;}  }
class C{  @Override @LogMessageDocs({@LogMessageDoc(level="ERROR",message="Could not push empty message",explanation="An empty message was sent to the packet streamer",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG),@LogMessageDoc(level="ERROR",message="queue for session {sessionId} is null",explanation="The queue for the packet streamer session " + "is missing",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG)}) public int pushMessageSync(Message msg) throws org.apache.thrift.TException {  if (msg == null) {    log.error("Could not push empty message");    return 0;  }  List<String> sessionids=msg.getSessionIDs();  for (  String sid : sessionids) {    SessionQueue pQueue=null;    if (!msgQueues.containsKey(sid)) {      pQueue=new SessionQueue();      msgQueues.put(sid,pQueue);    } else {      pQueue=msgQueues.get(sid);    }    log.debug("pushMessageSync: SessionId: " + sid + " Receive a message, "+ msg.toString()+ "\n");    ByteBuffer bb=ByteBuffer.wrap(msg.getPacket().getData());    BlockingQueue<ByteBuffer> queue=pQueue.getQueue();    if (queue != null) {      if (!queue.offer(bb)) {        log.error("Failed to queue message for session: " + sid);      } else {        log.debug("insert a message to session: " + sid);      }    } else {      log.error("queue for session {} is null",sid);    }  }  return 1;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"C_AllocationLine"));    return false;  }  if (!newRecord && (is_ValueChanged("C_BPartner_ID") || is_ValueChanged("C_Invoice_ID"))) {    log.severe("Cannot Change Business Partner or Invoice");    return false;  }  if (getC_BPartner_ID() == 0 && getInvoice() != null)   setC_BPartner_ID(getInvoice().getC_BPartner_ID());  if (getC_Order_ID() == 0 && getInvoice() != null)   setC_Order_ID(getInvoice().getC_Order_ID());  return true;}  }
class C{  protected final void PROLOGUE(Instruction s){  if (VM.BuildFor32Addr) {    int numFormals=Prologue.getNumberOfFormals(s);    int numLongs=0;    for (int i=0; i < numFormals; i++) {      if (Prologue.getFormal(s,i).getType().isLongType())       numLongs++;    }    if (numLongs != 0) {      Instruction s2=Prologue.create(IR_PROLOGUE,numFormals + numLongs);      for (int sidx=0, s2idx=0; sidx < numFormals; sidx++) {        RegisterOperand sForm=Prologue.getClearFormal(s,sidx);        Prologue.setFormal(s2,s2idx++,sForm);        if (sForm.getType().isLongType()) {          Prologue.setFormal(s2,s2idx++,I(regpool.getSecondReg(sForm.getRegister())));        }      }      EMIT(s2);    } else {      EMIT(s);    }  } else {    EMIT(s);  }}  }
class C{  public AmqpSender createSender() throws Exception {  return createSender(null,false);}  }
class C{  public void printRoutes(String blockName){  log.info("Routes for block " + this.getDisplayName());  log.info("Our Block, Destination, Next Block, Hop Count, Direction, Metric");  for (int i=0; i < routes.size(); i++) {    if (routes.get(i).getDestBlock().getDisplayName().equals(blockName)) {      log.info("From " + this.getDisplayName() + ", "+ (routes.get(i).getDestBlock()).getDisplayName()+ ", "+ (routes.get(i).getNextBlock()).getDisplayName()+ ", "+ routes.get(i).getHopCount()+ ", "+ Path.decodeDirection(routes.get(i).getDirection())+ ", "+ routes.get(i).getMetric());    }  }}  }
class C{  public TournamentSelection(int size,DominanceComparator comparator){  super();  this.size=size;  this.comparator=comparator;}  }
class C{  public static void frontEndInitialize(SpecObj spec,PrintStream syserr) throws InitException {  String fileName=spec.getFileName();  Errors initErrors=spec.initErrors;  try {    Configuration.ReInit();    Context.reInit();    Configuration.load(initErrors);    BuiltInLevel.load();    if (!initErrors.isSuccess()) {      syserr.println("*** Errors during initialization of SANY:\n");      syserr.print(initErrors);      spec.errorLevel=1;      throw new InitException();    }  } catch (  Exception e) {    syserr.println("Unexpected exception during SANY initialization " + fileName + "\n"+ e);    syserr.println("Initialization errors detected before " + "the unexpected exception:\n");    syserr.print(initErrors);    spec.errorLevel=1;    throw new InitException();  }  return;}  }
class C{  @Override public void validateColorCode(String code){  Preconditions.checkNotEmpty(code,"color code is empty");  Integer numericColorCode=Integer.valueOf(code);  boolean isColorCodeValid=numericColorCode > 0 && numericColorCode < 257;  if (!isColorCodeValid) {    throw new IllegalArgumentException("color code should be a number between 1 and 256");  }}  }
class C{  private double convertEpsilonIntoDistance(Person person,String type){  double maxDCScore=0.0;  double scale=this.scaleEpsilon.getEpsilonFactor(type);  maxDCScore=(Double)this.personsMaxDCScoreUnscaled.getAttribute(person.getId().toString(),type);  maxDCScore*=scale;  double travelSpeedCrowFly=this.dccg.getTravelSpeed_car();  double betaTime=this.scenario.getConfig().planCalcScore().getModes().get(TransportMode.car).getMarginalUtilityOfTraveling();  if (this.scenario.getConfig().vspExperimental().isUsingOpportunityCostOfTimeForLocationChoice()) {    betaTime-=this.scenario.getConfig().planCalcScore().getPerforming_utils_hr();  }  double maxTravelTime=Double.MAX_VALUE;  if (betaTime != 0.0) {    if (betaTime >= 0.) {      throw new RuntimeException("betaTime >= 0 in location choice; method not designed for this; aborting ...");    }    maxTravelTime=Math.abs(maxDCScore / (-1.0 * betaTime) * 3600.0);  }  double maxDistance=travelSpeedCrowFly * maxTravelTime;  if (this.dccg.getMaxDistanceDCScore() > 0.0) {    maxDistance=this.dccg.getMaxDistanceDCScore();  }  return maxDistance;}  }
class C{  protected void populateClassMap(){  this.mapClass(MilStd2525PointGraphic.class,MilStd2525PointGraphic.getSupportedGraphics());  this.mapClass(Boundary.class,Boundary.getSupportedGraphics());  this.mapClass(PhaseLine.class,PhaseLine.getSupportedGraphics());  this.mapClass(ForwardLineOfOwnTroops.class,ForwardLineOfOwnTroops.getSupportedGraphics());  this.mapClass(LineOfContact.class,LineOfContact.getSupportedGraphics());  this.mapClass(BasicArea.class,BasicArea.getSupportedGraphics());  this.mapClass(AirfieldZone.class,AirfieldZone.getSupportedGraphics());  this.mapClass(FortifiedArea.class,FortifiedArea.getSupportedGraphics());  this.mapClass(WeaponsFreeZone.class,WeaponsFreeZone.getSupportedGraphics());  this.mapClass(AviationZone.class,AviationZone.getSupportedGraphics());  this.mapClass(Route.class,Route.getSupportedGraphics());  this.mapClass(RoutePoint.class,RoutePoint.getSupportedGraphics());  this.mapClass(PullUpPoint.class,PullUpPoint.getSupportedGraphics());  this.mapClass(OffenseArea.class,OffenseArea.getSupportedGraphics());  this.mapClass(CombatSupportArea.class,CombatSupportArea.getSupportedGraphics());  this.mapClass(SpecialInterestArea.class,SpecialInterestArea.getSupportedGraphics());  this.mapClass(Airhead.class,Airhead.getSupportedGraphics());  this.mapClass(DirectionOfAttack.class,DirectionOfAttack.getSupportedGraphics());  this.mapClass(DirectionOfAttackAviation.class,DirectionOfAttackAviation.getSupportedGraphics());  this.mapClass(Aviation.class,Aviation.getSupportedGraphics());  this.mapClass(Airborne.class,Airborne.getSupportedGraphics());  this.mapClass(MainAttack.class,MainAttack.getSupportedGraphics());  this.mapClass(AttackRotaryWing.class,AttackRotaryWing.getSupportedGraphics());  this.mapClass(SupportingAttack.class,SupportingAttack.getSupportedGraphics());  this.mapClass(Dummy.class,Dummy.getSupportedGraphics());  this.mapClass(SupportByFirePosition.class,SupportByFirePosition.getSupportedGraphics());  this.mapClass(Ambush.class,Ambush.getSupportedGraphics());  this.mapClass(ForwardEdgeOfBattleArea.class,ForwardEdgeOfBattleArea.getSupportedGraphics());  this.mapClass(BattlePosition.class,BattlePosition.getSupportedGraphics());  this.mapClass(PrincipleDirectionOfFire.class,PrincipleDirectionOfFire.getSupportedGraphics());  this.mapClass(Encirclement.class,Encirclement.getSupportedGraphics());  this.mapClass(SearchArea.class,SearchArea.getSupportedGraphics());  this.mapClass(InfiltrationLane.class,InfiltrationLane.getSupportedGraphics());  this.mapClass(AdvanceForFeint.class,AdvanceForFeint.getSupportedGraphics());  this.mapClass(DirectionOfAttackForFeint.class,DirectionOfAttackForFeint.getSupportedGraphics());  this.mapClass(HoldingLine.class,HoldingLine.getSupportedGraphics());  this.mapClass(LimitedAccessArea.class,LimitedAccessArea.getSupportedGraphics());  this.mapClass(MinimumSafeDistanceZones.class,MinimumSafeDistanceZones.getSupportedGraphics());  this.mapClass(FilledArea.class,FilledArea.getSupportedGraphics());  this.mapClass(DoseRateContourLine.class,DoseRateContourLine.getSupportedGraphics());  this.mapClass(RectangularTarget.class,RectangularTarget.getSupportedGraphics());  this.mapClass(LinearTarget.class,LinearTarget.getSupportedGraphics());  this.mapClass(RectangularFireSupportArea.class,RectangularFireSupportArea.getSupportedGraphics());  this.mapClass(CircularFireSupportArea.class,CircularFireSupportArea.getSupportedGraphics());  this.mapClass(IrregularFireSupportArea.class,IrregularFireSupportArea.getSupportedGraphics());  this.mapClass(Smoke.class,Smoke.getSupportedGraphics());  this.mapClass(CircularRangeFan.class,CircularRangeFan.getSupportedGraphics());  this.mapClass(SectorRangeFan.class,SectorRangeFan.getSupportedGraphics());  this.mapClass(CircularPositionArea.class,CircularPositionArea.getSupportedGraphics());  this.mapClass(RectangularPositionArea.class,RectangularPositionArea.getSupportedGraphics());  this.mapClass(GroupOfTargets.class,GroupOfTargets.getSupportedGraphics());  this.mapClass(AttackByFirePosition.class,AttackByFirePosition.getSupportedGraphics());  this.mapClass(FireSupportLine.class,FireSupportLine.getSupportedGraphics());  this.mapClass(MunitionFlightPath.class,MunitionFlightPath.getSupportedGraphics());}  }
class C{  public static void translate(MapWidget v,Point point,Location location){  MapCalibrationData calibration=v.getConfig().getGpsConfig().getCalibration();  if (calibration == null) {    Log.w("GeoUtils","Can't translate. No calibration data!");  }  calibration.translate(point.x,point.y,location);}  }
class C{  public Rest body(final byte[] body){  this.body=body == null ? null : Arrays.copyOf(body,body.length);  return this;}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public CharSequence subSequence(int start,int end){  return substring(start,end);}  }
class C{  public void add(int code){  super.add(code);}  }
class C{  public static <I,A>Parser<I,A> chainr1(Parser<I,A> p,Parser<I,BinaryOperator<A>> op){  return scanr1(p,op);}  }
class C{  public void test_ConstructorLjava_io_FileZ(){  try {    JarFile jarFile=new JarFile(new File("Wrong.file"),true);    fail("Should throw IOException");  } catch (  IOException e) {  }  try {    Support_Resources.copyFile(resources,null,jarName);    JarFile jarFile=new JarFile(new File(resources,jarName),false);  } catch (  IOException e) {    fail("Should not throw IOException");  }}  }
class C{  public String toString(){  return s;}  }
class C{  @Override public void onResume(boolean multitasking){  this.pluginDestroyed=false;}  }
class C{  public static Status createInfoStatus(String message){  return createStatus(IStatus.INFO,message,null);}  }
class C{  public void endViewTarget() throws ParseException {}  }
class C{  public ListenerList(int mode){  if (mode != EQUALITY && mode != IDENTITY)   throw new IllegalArgumentException();  this.identity=mode == IDENTITY;}  }
class C{  public void list(PrintStream s,int level){  for (int i=0; i < level; i++)   System.out.print(' ');  if (count == 0)   System.out.println(index + ": count=" + count); else   System.out.println(index + ": count=" + count+ " red="+ (totalRed / count)+ " green="+ (totalGreen / count)+ " blue="+ (totalBlue / count));  for (int i=0; i < 8; i++)   if (leaf[i] != null)   leaf[i].list(s,level + 2);}  }
class C{  public boolean contains(Point2D point){  boolean inside=false;  for (int i=0, j=points.size() - 1; i < points.size(); j=i++)   if ((points.get(i).getY() > point.getY() != points.get(j).getY() > point.getY()) && (point.getX() < (points.get(j).getX() - points.get(i).getX()) * (point.getY() - points.get(i).getY()) / (points.get(j).getY() - points.get(i).getY()) + points.get(i).getX()))   inside=!inside;  return inside;}  }
class C{  public void testContainsIncorrectIMMatrix() throws Exception {  String a="LINESTRING (1 0, 0 2, 0 0, 2 2)";  String b="LINESTRING (0 0, 2 2)";  runRelateTest(a,b,"001F001F2");}  }
class C{  static boolean compare(ByteBuffer bb,byte[] message){  if (message.length != bb.remaining()) {    out.println("Compare failed, byte array length != to buffer remaining");    return false;  }  for (int i=0; i < message.length; i++) {    byte b=bb.get();    if (message[i] != b) {      out.println("Position " + i + ": "+ message[i]+ " != "+ b);      return false;    }  }  return true;}  }
class C{  @Procedure @PerformsWrites @Description("apoc.index.addAllNodes('name',{label1:['prop1',...],...}) YIELD type, name, config - create a free text search index") public Stream<IndexStats> addAllNodes(@Name("index") String index,@Name("structure") Map<String,List<String>> structure){  if (structure.isEmpty()) {    throw new IllegalArgumentException("No structure given.");  }  return async(executor(),"Creating index '" + index + "'",null);}  }
class C{  public boolean isFullyDepreciated(){  Object oo=get_Value(COLUMNNAME_IsFullyDepreciated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  Account account=(Account)o;  if (username != null ? !username.equals(account.username) : account.username != null) {    return false;  }  return true;}  }
class C{  protected void updateUs(){  try {    setText(m_Editor.getAsText());  } catch (  IllegalArgumentException ex) {  }}  }
class C{  public void objectOrUninitialized(int tag,int data,int pos){}  }
class C{  private void dispatchMessage(DistributionMessage msg){  InternalDistributedMember m=msg.getSender();  boolean shunned=false;  if (isShunnedOrNew(m)) {    latestViewWriteLock.lock();    try {      if (isShunned(m)) {        if (msg instanceof StartupMessage) {          endShun(m);        } else {          shunned=true;        }      }      if (!shunned) {        if (isNew(m)) {          shunned=!addSurpriseMember(m);        }      }    }  finally {      latestViewWriteLock.unlock();    }  }  if (shunned) {    warnShun(m);    if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_VIEWS)) {      logger.trace(LogMarker.DISTRIBUTION_VIEWS,"Membership: Ignoring message from shunned member <{}>:{}",m,msg);    }    throw new MemberShunnedException(m);  }  listener.messageReceived(msg);}  }
class C{  public boolean is_update_available(){  if (_version == null || _latest_version == null) {    return false;  }  if (_last_ckeck_error) {    return false;  }  String[] tokens_version=_version.split("[., -]");  String[] tokens_latest=_latest_version.split("[., -]");  if (tokens_version.length != tokens_latest.length) {    return _version.compareTo(_latest_version) < 0;  }  for (int i=0; i < tokens_version.length; ++i) {    try {      int t1=Integer.parseInt(tokens_version[i]);      int t2=Integer.parseInt(tokens_latest[i]);      if (t1 != t2) {        return t1 < t2;      }    } catch (    NumberFormatException ignored) {      int result=tokens_version[i].compareTo(tokens_latest[i]);      if (result != 0) {        return result < 0;      }    }  }  return false;}  }
class C{  public InterfaceMethodImpl(Method wrapped){  this.m=requireNonNull(wrapped);}  }
class C{  public <T extends B>MinMaxPriorityQueue<T> create(Iterable<? extends T> initialContents){  MinMaxPriorityQueue<T> queue=new MinMaxPriorityQueue<T>(this,initialQueueSize(expectedSize,maximumSize,initialContents));  for (  T element : initialContents) {    queue.offer(element);  }  return queue;}  }
class C{  public GroovyPrintStream(OutputStream out){  super(out,false);}  }
class C{  private void checkIfUpdate(int columnIndex){  if (!oldDuplicateNameColumn.equals(duplicateNameColumn) || !oldDuplicateRoleColumn.equals(duplicateRoleColumn)) {    Set<Integer> columnsUpdate=new HashSet<Integer>();    columnsUpdate.addAll(oldDuplicateNameColumn);    columnsUpdate.addAll(duplicateNameColumn);    columnsUpdate.addAll(oldDuplicateRoleColumn);    columnsUpdate.addAll(duplicateRoleColumn);    fireUpdate(columnsUpdate);  } else   if (!oldColumnErrorList.equals(columnErrorList) || parsingErrorAffectedColumns.contains(columnIndex)) {    fireUpdate();  }}  }
class C{  public int nextInt(int itemcount){  return (int)nextLong(itemcount);}  }
class C{  public static <T>List<T> nullToEmpty(@Nullable List<T> potentiallyNull){  return firstNonNull(potentiallyNull,ImmutableList.<T>of());}  }
class C{  public SideBySideViewAction(final VisionWorld visionWorld){  super("Side-by-side view");  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  this.visionWorld=visionWorld;}  }
class C{  public String toNormalform(final boolean excludeAnchor,final boolean removeSessionID){  boolean defaultPort=false;  if (this.protocol.equals("mailto")) {    return this.protocol + ":" + this.userInfo+ "@"+ this.host;  } else   if (isHTTP()) {    if (this.port < 0 || this.port == 80) {      defaultPort=true;    }  } else   if (isHTTPS()) {    if (this.port < 0 || this.port == 443) {      defaultPort=true;    }  } else   if (isFTP()) {    if (this.port < 0 || this.port == 21) {      defaultPort=true;    }  } else   if (isSMB()) {    if (this.port < 0 || this.port == 445) {      defaultPort=true;    }  } else   if (isFile()) {    defaultPort=true;  }  String urlPath=this.getFile(excludeAnchor,removeSessionID);  String h=getHost();  final StringBuilder u=new StringBuilder(20 + (urlPath == null ? 0 : urlPath.length()) + ((h == null) ? 0 : h.length()));  u.append(this.protocol);  u.append("://");  if (h != null) {    if (this.userInfo != null && !(this.isFTP() && this.userInfo.startsWith(FTPClient.ANONYMOUS))) {      u.append(this.userInfo);      u.append("@");    }    u.append(h.toLowerCase());  }  if (!defaultPort) {    u.append(":");    u.append(this.port);  }  if (isFile() && urlPath.indexOf('\\') >= 0) {    urlPath=urlPath.replace('\\','/');  }  u.append(urlPath);  String result=u.toString();  return result;}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  if (m_insideDTD)   return;  charactersFlush();  m_values.addElement(new String(ch,start,length));  int dataIndex=m_valueIndex++;  m_previous=addNode(DTM.COMMENT_NODE,DTM.COMMENT_NODE,m_parents.peek(),m_previous,dataIndex,false);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.578 -0500",hash_original_method="7F69D44B4A5B870A2ADF67B34BC1B3FD",hash_generated_method="7F69D44B4A5B870A2ADF67B34BC1B3FD") boolean pageScroll(int direction){  int nextPage=-1;  if (direction == FOCUS_UP) {    nextPage=Math.max(0,mSelectedPosition - getChildCount());  } else   if (direction == FOCUS_DOWN) {    nextPage=Math.min(mItemCount - 1,mSelectedPosition + getChildCount());  }  if (nextPage >= 0) {    setSelectionInt(nextPage);    invokeOnItemScrollListener();    awakenScrollBars();    return true;  }  return false;}  }
class C{  public final boolean isRightClick(){  return getButton() == Event.BUTTON_RIGHT || (UserAgent.isMac() && getCtrlKey());}  }
class C{  public static String eachMatch(String self,Pattern pattern,@ClosureParams(value=FromString.class,options={"List<String>","String[]"}) Closure closure){  Matcher m=pattern.matcher(self);  each(m,closure);  return self;}  }
class C{  public boolean validSystemNameFormat(String systemName,char type){  boolean aTest=aCodes.reset(systemName).matches();  boolean hTest=hCodes.reset(systemName).matches();  boolean iTest=iCodes.reset(systemName).matches();  if ((!aTest) || (aCodes.group(2).charAt(0) != type)) {    log.error("illegal character in header field system name: " + systemName);    return (false);  }  if (hTest && hCodes.groupCount() == 4) {    if (hCodes.group(3).charAt(0) < minHouseCode || hCodes.group(3).charAt(0) > maxHouseCode) {      log.error("house code field out of range in system name: " + systemName);      return (false);    }    int num;    try {      num=Integer.parseInt(hCodes.group(4));    } catch (    Exception e) {      log.error("illegal character in unit address field of system name: " + systemName);      return (false);    }    if ((num < 1) || (num > 16)) {      log.error("unit address field out of range in system name: " + systemName);      return (false);    }    return (true);  }  assert aTest;  if (!iTest) {    log.error("address did not match any valid forms: " + systemName);    return (false);  } else {    if (iCodes.groupCount() != 5) {      log.error("invalid format - " + systemName);      return (false);    } else {      return (true);    }  }}  }
class C{  public boolean decodeXWapInitiatorURI(int startIndex){  return decodeTextString(startIndex);}  }
class C{  public double distance(final java.awt.geom.Point2D p){  final double dx=(double)this.x - p.getX();  final double dy=(double)this.y - p.getY();  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public void onAnimationStart(Animator animation){  if (mRule == Dependency.WITH) {    startIfReady(animation);  }}  }
class C{  public static boolean isNonEmpty(final File f){  return checkFile(f) && f.length() > 0;}  }
class C{  public VncRecordingSidekickContainer(T vncServiceContainer){  super("richnorth/vnc-recorder:latest");  this.vncServiceContainer=vncServiceContainer;  try {    this.tempDir=createVolumeDirectory(true);    Path passwordFile=tempDir.resolve("password");    Files.write(passwordFile,vncServiceContainer.getPassword().getBytes());  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private long read32(byte[] buffer,int offset){  byte b0=buffer[offset];  byte b1=buffer[offset + 1];  byte b2=buffer[offset + 2];  byte b3=buffer[offset + 3];  int i0=((b0 & 0x80) == 0x80 ? (b0 & 0x7F) + 0x80 : b0);  int i1=((b1 & 0x80) == 0x80 ? (b1 & 0x7F) + 0x80 : b1);  int i2=((b2 & 0x80) == 0x80 ? (b2 & 0x7F) + 0x80 : b2);  int i3=((b3 & 0x80) == 0x80 ? (b3 & 0x7F) + 0x80 : b3);  return ((long)i0 << 24) + ((long)i1 << 16) + ((long)i2 << 8)+ (long)i3;}  }
class C{  private void addSimilarElementsTextualUpdates(TextChangeManager manager,IProgressMonitor monitor) throws CoreException {  final Map<String,String> simpleNames=new HashMap<String,String>();  final List<String> forbiddenSimpleNames=new ArrayList<String>();  for (Iterator<IJavaElement> iter=fFinalSimilarElementToName.keySet().iterator(); iter.hasNext(); ) {    final IJavaElement element=iter.next();    if (element instanceof IField) {      if (forbiddenSimpleNames.contains(element.getElementName()))       continue;      final String registeredNewName=simpleNames.get(element.getElementName());      final String newNameToCheck=fFinalSimilarElementToName.get(element);      if (registeredNewName == null)       simpleNames.put(element.getElementName(),newNameToCheck); else       if (!registeredNewName.equals(newNameToCheck))       forbiddenSimpleNames.add(element.getElementName());    }  }  for (Iterator<IJavaElement> iter=fFinalSimilarElementToName.keySet().iterator(); iter.hasNext(); ) {    final IJavaElement element=iter.next();    if (element instanceof IField) {      final IField field=(IField)element;      final String newName=fFinalSimilarElementToName.get(field);      TextMatchUpdater.perform(monitor,RefactoringScopeFactory.create(field),field.getElementName(),field.getDeclaringType().getFullyQualifiedName(),newName,manager,new SearchResultGroup[0],forbiddenSimpleNames.contains(field.getElementName()));    }  }}  }
class C{  public ModifiableBOpBase copyAll(final Map<String,Object> anns){  annotations.putAll(anns);  return this;}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  RenderableLayer layer=new RenderableLayer("Renderables");  wwd.getLayers().addLayer(layer);  Label sanNicolas=new Label(new Position(33.262,-119.538,0),"San Nicolas");  layer.addRenderable(sanNicolas);  TextAttributes parkAttributes=new TextAttributes().setTypeface(Typeface.create("serif",Typeface.BOLD_ITALIC)).setTextColor(new Color(0f,1f,0f,0.5f)).setTextSize(50f);  Label park1=new Label(new Position(33.9,-119.7,0),"Channel Islands",parkAttributes);  Label park2=new Label(new Position(33.9,-119.7,0),"National Park",new TextAttributes(parkAttributes).setTextOffset(Offset.topCenter()));  layer.addRenderable(park1);  layer.addRenderable(park2);  TextAttributes islandAttributes=new TextAttributes().setTypeface(Typeface.create("san-serif",Typeface.BOLD)).setTextColor(new Color(1f,1f,0f,1f));  Label santaCruz=new Label(new Position(34.04,-119.77,0),"Santa Cruz",new TextAttributes(islandAttributes).setTextSize(40f));  layer.addRenderable(santaCruz);  Label sanMiguel=new Label(new Position(34.06,-120.37,0),"Santa Miguel",new TextAttributes(islandAttributes).setTextSize(32f));  layer.addRenderable(sanMiguel);  Label santaRosa=new Label(new Position(33.95,-120.15,0),"Santa Rosa",new TextAttributes(islandAttributes).setTextSize(40f).setTextOffset(Offset.topRight()));  layer.addRenderable(santaRosa);  Label anacapa=new Label(new Position(34.005,-119.392,0),"Anacapa",new TextAttributes(islandAttributes).setTextSize(28f).setTextOffset(Offset.bottomLeft()));  layer.addRenderable(anacapa);  Label santaBarbara=new Label(new Position(33.475,-119.037,0),"Santa Barbara",anacapa.getAttributes());  layer.addRenderable(santaBarbara);  final Position pos=new Position(33.7,-119.6,0);  LookAt lookAt=new LookAt().set(pos.latitude,pos.longitude,pos.altitude,WorldWind.ABSOLUTE,30e4,0,0,0);  wwd.getNavigator().setAsLookAt(wwd.getGlobe(),lookAt);  return wwd;}  }
class C{  public static Map<String,Router> guessRouters(TransitSchedule schedule,Network network){  Map<String,Set<String>> modeAssignments=new HashMap<>();  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      Set<String> usedNetworkModes=MapUtils.getSet(transitRoute.getTransportMode(),modeAssignments);      List<Link> links=getLinksFromIds(network,getTransitRouteLinkIds(transitRoute));      for (      Link link : links) {        usedNetworkModes.addAll(link.getAllowedModes());      }    }  }  Map<Set<String>,Router> modeDependentRouters=new HashMap<>();  for (  Set<String> networkModes : modeAssignments.values()) {    if (!modeDependentRouters.containsKey(networkModes)) {      modeDependentRouters.put(networkModes,FastAStarRouter.createModeSeparatedRouter(network,networkModes));    }  }  Map<String,Router> routers=new HashMap<>();  for (  Map.Entry<String,Set<String>> e : modeAssignments.entrySet()) {    routers.put(e.getKey(),modeDependentRouters.get(e.getValue()));  }  return routers;}  }
class C{  public static double distancePointPlane(double pointX,double pointY,double pointZ,double a,double b,double c,double d){  double denom=Math.sqrt(a * a + b * b + c * c);  return (a * pointX + b * pointY + c * pointZ + d) / denom;}  }
class C{  public static String encryptIntegers(int integers[],String password) throws ServletException {  SecureRandom rand=new SecureRandom();  byte salt[]=new byte[8];  rand.nextBytes(salt);  byte[] iv;  byte[] ciphertext;  try {    SecretKeyFactory factory=SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");    KeySpec spec=new PBEKeySpec(password.toCharArray(),salt,65536,256);    SecretKey tmp=factory.generateSecret(spec);    SecretKey secret=new SecretKeySpec(tmp.getEncoded(),"AES");    Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding");    cipher.init(Cipher.ENCRYPT_MODE,secret);    AlgorithmParameters params=cipher.getParameters();    iv=params.getParameterSpec(IvParameterSpec.class).getIV();    ByteBuffer buff=ByteBuffer.allocate(integers.length * 4);    for (int i=0; i < integers.length; ++i) {      buff.putInt(integers[i]);    }    ciphertext=cipher.doFinal(buff.array());  } catch (  Exception ex) {    throw new ServletException(ex);  }  Encoder encoder=Base64.getEncoder();  String encryptedStr=encoder.encodeToString(ciphertext) + "|" + encoder.encodeToString(iv)+ "|"+ encoder.encodeToString(salt);  return encryptedStr;}  }
class C{  void addToPanel(JRadioButton b,int i){  add(b);}  }
class C{  private static IgniteCache createCache(String name,CacheAtomicityMode atomicityMode){  CacheConfiguration ccfg=new CacheConfiguration(name);  ccfg.setAtomicityMode(atomicityMode);  ccfg.setWriteSynchronizationMode(FULL_SYNC);  return Ignition.ignite().getOrCreateCache(ccfg);}  }
class C{  public static boolean checkSignature(Transaction transaction,int index,TransactionOutput outputToSpend,ECKey key,byte[] signature){  Sha256Hash hash=transaction.hashForSignature(index,outputToSpend.getScriptBytes(),SigHash.ALL,false);  return key.verify(hash,ECDSASignature.decodeFromDER(signature));}  }
class C{  @Override public boolean isComplete(){  return true;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe name of the snowball stemmer (default 'porter').\n" + "\tavailable stemmers:\n" + getStemmerList(65,"\t   "),"S",1,"-S <name>"));  return result.elements();}  }
class C{  public void addBookmarkedConference(BookmarkedConference bookmarkedConference){  bookmarkedConferences.add(bookmarkedConference);}  }
class C{  public Matrix3f rotateZYX(Vector3f angles){  return rotateZYX(angles.z,angles.y,angles.x);}  }
class C{  public boolean isTag(String field){  return (qualifierNameMap.get(field) == null && displayNameMap.get(field) == null);}  }
class C{  public static void save(ContentResolver resolver,ContentValues values,String id){  if (resolver == null) {    return;  }  if (values == null) {    return;  }  if (id == null) {    return;  }  Uri uri=Uri.withAppendedPath(Contacts.People.CONTENT_URI,id);  resolver.update(uri,values,null,null);}  }
class C{  public static <E>void registerTypeConverter(Class<E> cls,TypeConverter<E> converter){  TYPE_CONVERTERS.put(cls,converter);}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public static boolean isSelfSigned(X509Certificate cert){  return cert.getIssuerX500Principal().equals(cert.getSubjectX500Principal());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setNamedItemNS05.class,args);}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public boolean createPS(OutputStream os){  try {    String outputMimeType=DocFlavor.BYTE_ARRAY.POSTSCRIPT.getMimeType();    DocFlavor docFlavor=DocFlavor.SERVICE_FORMATTED.PAGEABLE;    StreamPrintServiceFactory[] spsfactories=StreamPrintServiceFactory.lookupStreamPrintServiceFactories(docFlavor,outputMimeType);    if (spsfactories.length == 0) {      log.log(Level.SEVERE,"(fos) - No StreamPrintService");      return false;    }    StreamPrintService sps=spsfactories[0].getPrintService(os);    if (m_layout == null)     layout();    sps.createPrintJob().print(m_layout.getPageable(false),new HashPrintRequestAttributeSet());    os.flush();    if (os instanceof FileOutputStream)     ((FileOutputStream)os).close();  } catch (  Exception e) {    log.log(Level.SEVERE,"(fos)",e);  }  return false;}  }
class C{  public Set<Clause> plResolve(Clause ci,Clause cj){  Set<Clause> resolvents=new LinkedHashSet<Clause>();  resolvePositiveWithNegative(ci,cj,resolvents);  resolvePositiveWithNegative(cj,ci,resolvents);  return resolvents;}  }
class C{  public Iterator iterator(){  return map.keySet().iterator();}  }
class C{  public DrawerBuilder withSavedInstance(Bundle savedInstance){  this.mSavedInstance=savedInstance;  return this;}  }
class C{  public static void printPermissions(UltraCosmetics ultraCosmetics){  PrintWriter writer=null;  try {    writer=new PrintWriter(new File(ultraCosmetics.getDataFolder(),"permissions.yml"),"UTF-8");  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }  SimpleDateFormat dateFormat=new SimpleDateFormat("dd/MM/yyyy");  Date date=new Date();  writer.println();  writer.println("UltraCosmetics v" + ultraCosmetics.getUpdateChecker().getCurrentVersion() + " permissions.");  writer.println("Generated automatically on " + dateFormat.format(date));  writer.println();  writer.println();  writer.println("General permissions, enabled by default.");  writer.println("  - ultracosmetics.receivechest");  writer.println("  - ultracosmetics.openmenu");  writer.println("");  writer.println("Commands:");  writer.println("  - ultracosmetics.command.*");  for (  SubCommand subCommand : ultraCosmetics.getCommandManager().getCommands())   writer.println("  - " + subCommand.getPermission());  writer.println("");  writer.println("Gadgets:");  writer.println("  - ultracosmetics.gadgets.*");  for (  GadgetType gadgetType : GadgetType.values())   writer.println("  - " + gadgetType.getPermission());  writer.println("");  writer.println("Pets:");  writer.println("  - ultracosmetics.pets.*");  for (  PetType petType : PetType.values())   writer.println("  - " + petType.getPermission());  writer.println("");  writer.println("Mounts:");  writer.println("  - ultracosmetics.mounts.*");  for (  MountType mountType : MountType.values())   writer.println("  - " + mountType.getPermission());  writer.println("");  writer.println("Morphs:");  writer.println("  - ultracosmetics.morphs.*");  for (  MorphType morphType : MorphType.values())   writer.println("  - " + morphType.getPermission());  writer.println("");  writer.println("Hats:");  writer.println("  - ultracosmetics.hats.*");  for (  HatType hat : HatType.values())   writer.println("  - " + hat.getPermission());  writer.println("");  writer.println("Particle Effects:");  writer.println("  - ultracosmetics.particleeffects.*");  for (  ParticleEffectType effect : ParticleEffectType.values())   writer.println("  - " + effect.getPermission());  writer.println("");  writer.println("Suits:");  writer.println("  - ultracosmetics.suits.*");  for (  CosmeticType cosmeticType : SuitType.values()) {    SuitType suit=((SuitType)cosmeticType);    writer.println("  - ultracosmetics.suits." + suit.getConfigName().toLowerCase() + ".*");    for (    ArmorSlot armorSlot : ArmorSlot.values())     writer.println("  - " + suit.getPermission(armorSlot));  }  writer.println("");  writer.println("Emotes:");  writer.println("  - ultracosmetics.emotes.*");  for (  EmoteType emoteType : EmoteType.values())   writer.println("  - " + emoteType.getPermission());  writer.println("");  writer.close();}  }
class C{  NTRUSignerPrng(byte[] seed,Digest hashAlg){  counter=0;  this.seed=seed;  this.hashAlg=hashAlg;}  }
class C{  public Ifge2(){  super("ifge2",2);}  }
class C{  public final AssertSubscriber<T> assertNotSubscribed(){  int s=subscriptionCount;  if (s == 1) {    throw new AssertionError("OnSubscribe called once",null);  }  if (s > 1) {    throw new AssertionError("OnSubscribe called multiple times: " + s,null);  }  return this;}  }
class C{  public Builder aclMetaReadRoles(List<String> aclMetaReadRoles){  aclBuilder().metaReadRoles(aclMetaReadRoles);  return this;}  }
class C{  @Override public void run(){  amIActive=true;  int row, col, x, y, x1, x2, y1, y2;  int progress;  double z;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int maxFlowpathLength;  double[][] flowpath1;  double[][] flowpath2;  double dist;  double gridResX, gridResY, diagGridRes;  double[] gridRes;  final double lnOf2=Math.log(2);  byte baseTestByte;  byte testByte;  int curPosFlowpath1, curPosFlowpath2;  boolean flag1, flag2;  int flowDir;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String pntrHeaderFile=args[0];  String outputHeader=args[1];  baseTestByte=30;  if ((pntrHeaderFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr1=new WhiteboxRaster(pntrHeaderFile,"r");    int rows=pntr1.getNumberRows();    int rowsLessOne=rows - 1;    int cols=pntr1.getNumberColumns();    int colsLessOne=cols - 1;    double noData=pntr1.getNoDataValue();    gridResX=pntr1.getCellSizeX();    gridResY=pntr1.getCellSizeY();    diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    gridRes=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    maxFlowpathLength=(int)(2 * Math.sqrt(cols * cols + rows * rows));    WhiteboxRaster pntr2=new WhiteboxRaster(pntrHeaderFile,"r");    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pntrHeaderFile,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    updateProgress("Loop 1 of 2:",-1);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=pntr1.getValue(row,col);        if (z != noData) {          testByte=baseTestByte;          if (row == rowsLessOne) {            testByte=2;          }          if (col == 0) {            testByte=BitOps.clearBit(testByte,(byte)4);          }          if (col == colsLessOne) {            testByte=BitOps.clearBit(testByte,(byte)1);            testByte=BitOps.clearBit(testByte,(byte)2);          }          for (int c=1; c < 5; c++) {            if (BitOps.checkBit(testByte,(byte)c)) {              x=col + dX[c];              y=row + dY[c];              flowpath1=new double[3][maxFlowpathLength];              flowpath2=new double[3][maxFlowpathLength];              x1=col;              y1=row;              x2=col + dX[c];              y2=row + dY[c];              curPosFlowpath1=0;              curPosFlowpath2=0;              flowpath1[0][curPosFlowpath1]=x1;              flowpath1[1][curPosFlowpath1]=y1;              flowpath1[2][curPosFlowpath1]=0;              flowpath2[0][curPosFlowpath1]=x2;              flowpath2[1][curPosFlowpath1]=y2;              flowpath2[2][curPosFlowpath1]=0;              flag1=true;              flag2=true;              do {                if (flag1) {                  flowDir=(int)pntr1.getValue(y1,x1);                  if (flowDir > 0) {                    curPosFlowpath1++;                    flowDir=(int)(Math.log(flowDir) / lnOf2);                    dist=gridRes[flowDir];                    x1+=dX[flowDir];                    y1+=dY[flowDir];                    flowpath1[0][curPosFlowpath1]=x1;                    flowpath1[1][curPosFlowpath1]=y1;                    flowpath1[2][curPosFlowpath1]=flowpath1[2][curPosFlowpath1 - 1] + dist;                    for (int d=curPosFlowpath2; d >= 0; d--) {                      if (flowpath2[0][d] == x1 && flowpath2[1][d] == y1) {                        dist=flowpath1[2][curPosFlowpath1];                        if (output.getValue(row,col) < dist) {                          output.setValue(row,col,dist);                        }                        dist=flowpath2[2][d];                        if (output.getValue(y,x) < dist) {                          output.setValue(y,x,dist);                        }                        flag1=false;                        flag2=false;                        break;                      }                    }                  } else {                    flag1=false;                    if (!flag2) {                      dist=flowpath1[2][curPosFlowpath1];                      if (output.getValue(row,col) < dist) {                        output.setValue(row,col,dist);                      }                      dist=flowpath2[2][curPosFlowpath2];                      if (output.getValue(y,x) < dist) {                        output.setValue(y,x,dist);                      }                      break;                    }                  }                }                if (flag2) {                  flowDir=(int)pntr2.getValue(y2,x2);                  if (flowDir > 0) {                    curPosFlowpath2+=1;                    flowDir=(int)(Math.log(flowDir) / lnOf2);                    dist=gridRes[flowDir];                    x2+=dX[flowDir];                    y2+=dY[flowDir];                    flowpath2[0][curPosFlowpath2]=x2;                    flowpath2[1][curPosFlowpath2]=y2;                    flowpath2[2][curPosFlowpath2]=flowpath2[2][curPosFlowpath2 - 1] + dist;                    for (int d=curPosFlowpath1; d >= 0; d--) {                      if (flowpath1[0][d] == x2 && flowpath1[1][d] == y2) {                        dist=flowpath2[2][curPosFlowpath2];                        if (output.getValue(y,x) < dist) {                          output.setValue(y,x,dist);                        }                        dist=flowpath1[2][d];                        if (output.getValue(row,col) < dist) {                          output.setValue(row,col,dist);                        }                        flag1=false;                        flag2=false;                        break;                      }                    }                  } else {                    flag2=false;                    if (!flag1) {                      dist=flowpath1[2][curPosFlowpath1];                      if (output.getValue(row,col) < dist) {                        output.setValue(row,col,dist);                      }                      dist=flowpath2[2][curPosFlowpath2];                      if (output.getValue(y,x) < dist) {                        output.setValue(y,x,dist);                      }                      break;                    }                  }                }              } while (flag1 || flag2);            }          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    updateProgress("Loop 2 of 2:",-1);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) != noData) {          output.setValue(row,col,output.getValue(row,col) / 1000);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr1.close();    pntr2.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int available() throws IOException {  ensureOpen();  if (reachEOF) {    return 0;  }  return 1;}  }
class C{  public void removeFooterView(View v){  AdapterWithHeader adapter=(AdapterWithHeader)super.getAdapter();  if (null != adapter) {    adapter.removeFooterView(v);  }}  }
class C{  public static int countLowerCase(final String text){  int count=0;  for (  final char chr : text.toCharArray()) {    if (Character.isLowerCase(chr)) {      count++;    }  }  return count;}  }
class C{  public static ClassLoader overrideThreadContextClassLoader(ClassLoader classLoaderToUse){  Thread currentThread=Thread.currentThread();  ClassLoader threadContextClassLoader=currentThread.getContextClassLoader();  if (classLoaderToUse != null && !classLoaderToUse.equals(threadContextClassLoader)) {    currentThread.setContextClassLoader(classLoaderToUse);    return threadContextClassLoader;  } else {    return null;  }}  }
class C{  public static Middleware<AsyncHandler<?>,AsyncHandler<Response<?>>> replyContentType(String contentType){  return null;}  }
class C{  protected AbstractCpeController(String name,String yaml,File source,CollectionProcessingEngine engine){  this.name=name;  this.yaml=yaml;  this.source=source;  this.engine=engine;  this.metrics=MetricsFactory.getMetrics(name,AbstractCpeController.class);  if (engine != null) {    this.engine.addStatusCallbackListener(this);  }}  }
class C{  public static void writeImageMap(PrintWriter writer,String name,ChartRenderingInfo info) throws IOException {  ImageMapUtilities.writeImageMap(writer,name,info,new StandardToolTipTagFragmentGenerator(),new StandardURLTagFragmentGenerator());}  }
class C{  @Override public void addArtificialLinks(Network network){  Map<Tuple<Id<Node>,Id<Node>>,Link> existingLinks=new HashMap<>();  for (  Link l : network.getLinks().values()) {    existingLinks.put(new Tuple<>(l.getFromNode().getId(),l.getToNode().getId()),l);  }  for (  ArtificialLink a : necessaryArtificialLinks) {    Tuple<Id<Node>,Id<Node>> key=new Tuple<>(a.getFromNodeId(),a.getToNodeId());    Link existingLink=existingLinks.get(key);    if (existingLink == null) {      String newLinkIdStr=config.getPrefixArtificial() + artificialId++;      Id<Node> fromNodeId=a.getFromNodeId();      Node fromNode;      Id<Node> toNodeId=a.getToNodeId();      Node toNode;      if (!network.getNodes().containsKey(fromNodeId)) {        fromNode=network.getFactory().createNode(fromNodeId,a.getFromNodeCoord());        network.addNode(fromNode);      } else {        fromNode=network.getNodes().get(fromNodeId);      }      if (!network.getNodes().containsKey(toNodeId)) {        toNode=network.getFactory().createNode(toNodeId,a.getToNodeCoord());        network.addNode(toNode);      } else {        toNode=network.getNodes().get(toNodeId);      }      Link newLink=network.getFactory().createLink(Id.createLinkId(newLinkIdStr),fromNode,toNode);      newLink.setAllowedModes(a.getAllowedModes());      newLink.setLength(a.getLength());      newLink.setFreespeed(a.getFreespeed());      newLink.setCapacity(a.getCapacity());      network.addLink(newLink);      existingLinks.put(new Tuple<>(fromNodeId,toNodeId),newLink);    }  }}  }
class C{  static void verifyProviderJar(URL codeBase) throws Exception {  JarVerifier jv=new JarVerifier(codeBase,false);  jv.verify();}  }
class C{  public PreDestroyViewMapEvent(UIViewRoot root){  super(root);}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public void rotateX(double degrees){  Transform3D other=new Transform3D();  other.rotX(degrees * Math.PI / 180);  transform(other);}  }
class C{  public void removeAccessibleSelection(int i){  if (i < 0 || i >= getItemCount()) {    return;  }  JMenuItem mi=getItem(i);  if (mi != null && mi instanceof JMenu) {    if (mi.isSelected()) {      MenuElement old[]=MenuSelectionManager.defaultManager().getSelectedPath();      MenuElement me[]=new MenuElement[old.length - 2];      for (int j=0; j < old.length - 2; j++) {        me[j]=old[j];      }      MenuSelectionManager.defaultManager().setSelectedPath(me);    }  }}  }
class C{  public static boolean isUnBoxing(Class<?> destination,Class<?> source){  return isAutoboxingOperation(unBoxingOperations,destination,source);}  }
class C{  public DataSet parseTabular(File file) throws IOException {  FileReader reader=null, reader2=null;  try {    reader=new FileReader(file);    DataSetDescription description=doFirstTabularPass(reader);    reader.close();    reader2=new FileReader(file);    DataSet dataSet=doSecondTabularPass(description,reader2);    dataSet.setName(file.getName());    this.logger.log("info","\nData set loaded!");    this.logger.reset();    return dataSet;  } catch (  IOException e) {    if (reader != null) {      reader.close();    }    throw e;  }catch (  Exception e) {    if (reader != null) {      reader.close();    }    if (reader2 != null) {      reader2.close();    }    throw new RuntimeException("Parsing failed.",e);  }}  }
class C{  public static int sendMultiple(final PacketOutputStream writer,String firstQuery,List<String> queries,int currentIndex) throws IOException {  writer.startPacket(0);  writer.write(Packet.COM_QUERY);  writer.write(firstQuery.getBytes("UTF-8"));  while (currentIndex < queries.size()) {    byte[] sqlByte=queries.get(currentIndex).getBytes("UTF-8");    if (!writer.checkRewritableLength(sqlByte.length + 1))     break;    writer.write(';');    writer.write(sqlByte);    currentIndex++;  }  writer.finishPacketWithoutRelease(true);  return currentIndex;}  }
class C{  public CToggleStarsModulesAction(final JFrame parent,final INaviModule[] modules){  super("Toggle module stars");  m_parent=parent;  m_modules=modules.clone();}  }
class C{  public static String removeExtension(String fileName){  int index=fileName.lastIndexOf('.');  if (index == -1) {    return fileName;  } else {    return fileName.substring(0,index);  }}  }
class C{  public static boolean isAppOnSdcard(PackageManager pm,String packageName){  return isAppEnabled(pm,packageName,PackageManager.GET_UNINSTALLED_PACKAGES);}  }
class C{  public void markAsToHoist(FunctionDeclaration element){  tag(Tag.toHoist,element);}  }
class C{  public void exportColumns(ImmutableBitSet selectedCols,ByteBuffer buf){  for (int i=0; i < selectedCols.trueBitCount(); i++) {    int c=selectedCols.trueBitAt(i);    buf.put(cols[c].array(),cols[c].offset(),cols[c].length());  }}  }
class C{  boolean isMeta(char c){  return metaCharacterSet.get(c);}  }
class C{  public View open(){  Window window=viewData.getViewWindow();  View view=viewData.getView();  if (window != null) {    window.setVisible(true);    return (view);  }  int xOffset=20;  int yOffset=20;  if (view == null) {switch (type) {case Help:      view=new HelpView(this);    break;case ColorBars:  view=new ColorBarView(this);break;case Console:view=new ConsoleView(this);window=Dert.getConsoleWindow();xOffset=0;yOffset=600;break;case MapElements:view=new MapElementsView((MapElementsState)this);break;case Lighting:view=new LightingView(this);break;case LightPosition:view=new LightPositionView(this);break;case SurfaceAndLayers:view=new SurfaceAndLayersView(this);break;case Viewpoint:view=new ViewpointView((ViewpointState)this);break;default :throw new IllegalArgumentException("Unknown panel type " + type);}setView(view);}if (window == null) {window=viewData.createWindow(Dert.getMainWindow(),title,xOffset,yOffset);} else {viewData.setViewWindow(window,true,xOffset,yOffset);}window.setVisible(true);return (view);}  }
class C{  protected void doStop(){}  }
class C{  public JSeparator(){  this(HORIZONTAL);}  }
class C{  public E last(){  return backingMap.lastKey();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void delete(final Player player,final List<String> args){  int i;  try {    i=Integer.parseInt(args.get(1));  } catch (  final NumberFormatException e) {    sandbox.privateText(player,"Please specify a number");    return;  }  final Sign sign=storage.get(Integer.valueOf(i));  if (sign != null) {    storage.remove(Integer.valueOf(i));    sandbox.remove(sign);    final StringBuilder sb=new StringBuilder();    sb.append("Removed sign ");    signToString(sb,sign);    sandbox.privateText(player,sb.toString());  } else {    sandbox.privateText(player,"Sign " + i + " does not exist");  }}  }
class C{  @Override public boolean load(Element shared,Element perNode){  List<Element> list=shared.getChildren("signalmast");  for (int i=0; i < list.size(); i++) {    Element e=list.get(i);    if (e.getAttribute("class") == null) {      SignalMast m;      String sys=getSystemName(e);      try {        m=InstanceManager.getDefault(jmri.SignalMastManager.class).provideSignalMast(sys);        if (getUserName(e) != null) {          m.setUserName(getUserName(e));        }        loadCommon(m,e);      } catch (      IllegalArgumentException ex) {        log.warn("Failed to provide SignalMast \"{}\" in load",sys);      }    } else {      String adapterName=e.getAttribute("class").getValue();      log.debug("load via " + adapterName);      try {        XmlAdapter adapter=(XmlAdapter)Class.forName(adapterName).newInstance();        adapter.load(e,null);      } catch (      Exception ex) {        log.error("Exception while loading " + e.getName() + ":"+ ex);        ex.printStackTrace();      }    }  }  list=shared.getChildren("turnoutsignalmast");  if (list != null) {    for (int i=0; i < list.size(); i++) {      Element e=list.get(i);      String adapterName=e.getAttribute("class").getValue();      log.debug("load via " + adapterName);      try {        XmlAdapter adapter=(XmlAdapter)Class.forName(adapterName).newInstance();        adapter.load(e,null);      } catch (      Exception ex) {        log.error("Exception while loading " + e.getName() + ":"+ ex);        ex.printStackTrace();      }    }  }  list=shared.getChildren("virtualsignalmast");  if (list != null) {    for (int i=0; i < list.size(); i++) {      Element e=list.get(i);      String adapterName=e.getAttribute("class").getValue();      log.debug("load via " + adapterName);      try {        XmlAdapter adapter=(XmlAdapter)Class.forName(adapterName).newInstance();        adapter.load(e,null);      } catch (      Exception ex) {        log.error("Exception while loading " + e.getName() + ":"+ ex);        ex.printStackTrace();      }    }  }  list=shared.getChildren("dccsignalmast");  if (list != null) {    for (int i=0; i < list.size(); i++) {      Element e=list.get(i);      String adapterName=e.getAttribute("class").getValue();      log.debug("load via " + adapterName);      try {        XmlAdapter adapter=(XmlAdapter)Class.forName(adapterName).newInstance();        adapter.load(e,null);      } catch (      Exception ex) {        log.error("Exception while loading " + e.getName() + ":"+ ex);        ex.printStackTrace();      }    }  }  list=shared.getChildren("signalmastrepeater");  if (list != null) {    DefaultSignalMastManager m=(DefaultSignalMastManager)InstanceManager.getDefault(jmri.SignalMastManager.class);    for (int i=0; i < list.size(); i++) {      Element e=list.get(i);      String masterName=e.getChild("masterMast").getText();      String slaveName=e.getChild("slaveMast").getText();      SignalMastRepeater smr=new SignalMastRepeater(masterName,slaveName);      if (e.getChild("enabled") != null && e.getChild("enabled").getText().equals("false")) {        smr.setEnabled(false);      }      if (e.getChild("update") != null) {        if (e.getChild("update").getText().equals("MasterToSlave")) {          smr.setDirection(SignalMastRepeater.MASTERTOSLAVE);        } else         if (e.getChild("update").getText().equals("SlaveToMaster")) {          smr.setDirection(SignalMastRepeater.SLAVETOMASTER);        }      }      try {        m.addRepeater(smr);      } catch (      jmri.JmriException ex) {        log.error("Unable to add mast repeater " + masterName + " : "+ slaveName);      }    }    m.initialiseRepeaters();  }  return true;}  }
class C{  public double[] toEulerAngles(){  double[] ret=new double[3];  ret[0]=Math.atan2(2 * points[1] * getW() - 2 * points[0] * points[2],1 - 2 * (points[1] * points[1]) - 2 * (points[2] * points[2]));  ret[1]=Math.asin(2 * points[0] * points[1] + 2 * points[2] * getW());  ret[2]=Math.atan2(2 * points[0] * getW() - 2 * points[1] * points[2],1 - 2 * (points[0] * points[0]) - 2 * (points[2] * points[2]));  return ret;}  }
class C{  public boolean hasTextSnippet(){  return (this.textSnippet != null) && (!this.textSnippet.getErrorCode().fail());}  }
class C{  public boolean isFile(){  return virtualFile.isFile();}  }
class C{  public int answerQuestion(FormIndex index,IAnswerData data) throws JavaRosaException {  try {    return mFormEntryController.answerQuestion(index,data);  } catch (  Exception e) {    throw new JavaRosaException(e);  }}  }
class C{  protected DropTargetAutoScroller createDropTargetAutoScroller(Component c,Point p){  return new DropTargetAutoScroller(c,p);}  }
class C{  @Override public void write(Kryo kryo,Output output,T t){  try {    preSerialize(t);    try (ByteArrayOutputStream stream=new ByteArrayOutputStream(4096)){      HTMObjectOutput writer=serializer.getObjectOutput(stream);      writer.writeObject(t,t.getClass());      writer.close();      output.writeInt(stream.size());      stream.writeTo(output);      LOGGER.debug("wrote {} bytes",stream.size());    }   } catch (  IOException e) {    throw new KryoException(e);  }}  }
class C{  public Train copyTrain(Train train,String trainName){  Train newTrain=newTrain(trainName);  newTrain.setRoute(train.getRoute());  newTrain.setTrainSkipsLocations(train.getTrainSkipsLocations());  newTrain.setDepartureTime(train.getDepartureTimeHour(),train.getDepartureTimeMinute());  newTrain._typeList.clear();  newTrain.setTypeNames(train.getTypeNames());  newTrain.setRoadOption(train.getRoadOption());  newTrain.setRoadNames(train.getRoadNames());  newTrain.setLoadOption(train.getLoadOption());  newTrain.setLoadNames(train.getLoadNames());  newTrain.setOwnerOption(train.getOwnerOption());  newTrain.setOwnerNames(train.getOwnerNames());  newTrain.setBuiltStartYear(train.getBuiltStartYear());  newTrain.setBuiltEndYear(train.getBuiltEndYear());  newTrain.setNumberEngines(train.getNumberEngines());  newTrain.setEngineModel(train.getEngineModel());  newTrain.setEngineRoad(train.getEngineRoad());  newTrain.setRequirements(train.getRequirements());  newTrain.setCabooseRoad(train.getCabooseRoad());  newTrain.setSecondLegNumberEngines(train.getSecondLegNumberEngines());  newTrain.setSecondLegEngineModel(train.getSecondLegEngineModel());  newTrain.setSecondLegEngineRoad(train.getSecondLegEngineRoad());  newTrain.setSecondLegOptions(train.getSecondLegOptions());  newTrain.setSecondLegCabooseRoad(train.getSecondLegCabooseRoad());  newTrain.setSecondLegStartLocation(train.getSecondLegStartLocation());  newTrain.setSecondLegEndLocation(train.getSecondLegEndLocation());  newTrain.setThirdLegNumberEngines(train.getThirdLegNumberEngines());  newTrain.setThirdLegEngineModel(train.getThirdLegEngineModel());  newTrain.setThirdLegEngineRoad(train.getThirdLegEngineRoad());  newTrain.setThirdLegOptions(train.getThirdLegOptions());  newTrain.setThirdLegCabooseRoad(train.getThirdLegCabooseRoad());  newTrain.setThirdLegStartLocation(train.getThirdLegStartLocation());  newTrain.setThirdLegEndLocation(train.getThirdLegEndLocation());  for (  String scriptName : train.getBuildScripts()) {    newTrain.addBuildScript(scriptName);  }  for (  String scriptName : train.getMoveScripts()) {    newTrain.addMoveScript(scriptName);  }  for (  String scriptName : train.getTerminationScripts()) {    newTrain.addTerminationScript(scriptName);  }  newTrain.setRailroadName(train.getRailroadName());  newTrain.setManifestLogoURL(train.getManifestLogoURL());  newTrain.setShowArrivalAndDepartureTimes(train.isShowArrivalAndDepartureTimesEnabled());  newTrain.setAllowLocalMovesEnabled(train.isAllowLocalMovesEnabled());  newTrain.setAllowReturnToStagingEnabled(train.isAllowReturnToStagingEnabled());  newTrain.setAllowThroughCarsEnabled(train.isAllowThroughCarsEnabled());  newTrain.setBuildConsistEnabled(train.isBuildConsistEnabled());  newTrain.setSendCarsWithCustomLoadsToStagingEnabled(train.isSendCarsWithCustomLoadsToStagingEnabled());  newTrain.setBuildTrainNormalEnabled(train.isBuildTrainNormalEnabled());  newTrain.setSendCarsToTerminalEnabled(train.isSendCarsToTerminalEnabled());  newTrain.setServiceAllCarsWithFinalDestinationsEnabled(train.isServiceAllCarsWithFinalDestinationsEnabled());  newTrain.setComment(train.getComment());  newTrain.setDescription(train.getRawDescription());  return newTrain;}  }
class C{  public GridCacheVersion last(){  return last;}  }
class C{  public JColorChooser(ColorSelectionModel model){  selectionModel=model;  updateUI();  dragEnabled=false;}  }
class C{  public XMLDecoder(InputStream inputStream){  this(inputStream,null,null,null);}  }
class C{  private Map<String,String> addIvrZonesStrategy(MDSDialog dialog,List<IvrZone> ivrZones) throws NetworkDeviceControllerException {  Map<String,String> addedIvrZoneNames=new HashMap<String,String>();  Long time=System.currentTimeMillis();  for (  IvrZone ivrZone : ivrZones) {    if (addIvrZone(dialog,ivrZone)) {      addedIvrZoneNames.put(ivrZone.getName(),SUCCESS);    } else {      addedIvrZoneNames.put(ivrZone.getName(),NO_CHANGE);    }  }  time=System.currentTimeMillis() - time;  _log.info("Ivr Zone add time (msec): " + time.toString());  return addedIvrZoneNames;}  }
class C{  public void finish(TTAnalysisTrip trip){  trip.tripTTime=last - first;  for (  SomePtTime t : this.times) {    if (t instanceof AccesWait) {      trip.accesWaitCnt=t.getCount();      trip.accesWaitTime=t.getTime();    } else     if (t instanceof AccesWalk) {      trip.accesWalkCnt=t.getCount();      trip.accesWalkTTime=t.getTime();    } else     if (t instanceof LineTT) {      trip.lineCnt=t.getCount();      trip.lineTTime=t.getTime();    } else     if (t instanceof SwitchWait) {      trip.switchWaitCnt=t.getCount();      trip.switchWaitTime=t.getTime();    } else     if (t instanceof SwitchWalk) {      trip.switchWalkCnt=t.getCount();      trip.switchWalkTTime=t.getTime();      trip.egressWalkCnt=1;      trip.egressWalkTTime=((SwitchWalk)t).getEgressWalkTime();    }  }}  }
class C{  public boolean cancelJob(long id,boolean isPersistent){  JobHolder holder;synchronized (getNextJobLock) {    if (jobConsumerExecutor.isRunning(id,isPersistent))     return false;    if (isPersistent) {synchronized (persistentJobQueue) {        holder=persistentJobQueue.findJobById(id);        if (holder == null)         return false;        persistentJobQueue.remove(holder);      }    } else {synchronized (nonPersistentJobQueue) {        holder=nonPersistentJobQueue.findJobById(id);        if (holder == null)         return false;        nonPersistentJobQueue.remove(holder);      }    }  }  BaseJob baseJob=holder.getBaseJob();  if (dependencyInjector != null) {    dependencyInjector.inject(baseJob);  }  baseJob.onCancel();  return true;}  }
class C{  public static long New(char[] c,int off,int len){  return Extend(IrredPoly,c,off,len);}  }
class C{  protected String action_translate(String act_string,int act_pos,Hashtable label_map,Hashtable label_types){  int id_start;  int pos;  int len;  String id_str;  boolean in_id;  StringBuffer result;  char buffer[];  if (act_string == null || act_string.length() == 0)   return act_string;  len=act_string.length();  result=new StringBuffer(len + 50);  buffer=new char[len + 1];  act_string.getChars(0,len,buffer,0);  buffer[len]='\0';  in_id=false;  for (pos=id_start=0; pos <= len; pos++) {    if (in_id) {      if (!is_id_char(buffer[pos])) {        id_str=new String(buffer,id_start,pos - id_start);        result.append(label_translate(id_str,act_pos,label_map,label_types));        if (buffer[pos] != '\0')         result.append(buffer,pos,1);        in_id=false;      } else {      }    } else {      if (is_id_start(buffer[pos])) {        in_id=true;        id_start=pos;      } else {        if (buffer[pos] != '\0')         result.append(buffer,pos,1);      }    }  }  return result.toString();}  }
class C{  public static GeneralPath cardinalSpline(float pts[],float slack,boolean closed){  GeneralPath path=new GeneralPath();  path.moveTo(pts[0],pts[1]);  return cardinalSpline(path,pts,slack,closed,0f,0f);}  }
class C{  public boolean isLESS(){  return value == LESS;}  }
class C{  public String search() throws Exception {  executeQuery();  return SUCCESS;}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  @Uninterruptible public static void shutdown(int value){  handlePossibleRecursiveShutdown();  if (VM.VerifyAssertions)   VM._assert(VM.runningVM);  sysCall.sysExit(value);  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public LocalTime withFields(ReadablePartial partial){  if (partial == null) {    return this;  }  return withLocalMillis(getChronology().set(partial,getLocalMillis()));}  }
class C{  private void mapCgSourceAndTargets(UnManagedProtectionSet unManagedProtectionSet,GetCGsResponse cg,Map<String,String> rpCopyAccessStateMap,Map<String,String> rpWwnToNativeWwn,List<String> storageNativeIdPrefixes,DbClient dbClient){  for (  GetRSetResponse rset : cg.getRsets()) {    for (    GetVolumeResponse volume : rset.getVolumes()) {      UnManagedVolume unManagedVolume=findUnManagedVolumeForWwn(volume.getWwn(),dbClient,storageNativeIdPrefixes);      Volume managedVolume=DiscoveryUtils.checkManagedVolumeExistsInDBByWwn(dbClient,volume.getWwn());      unManagedProtectionSet.getVolumeWwns().add(volume.getWwn());      if (null == unManagedVolume && null == managedVolume) {        log.info("Protection Set {} contains unknown Replication Set volume: {}. Skipping.",unManagedProtectionSet.getNativeGuid(),volume.getWwn());        continue;      }      if (null != managedVolume) {        log.info("Protection Set {} contains volume {} that is already managed",unManagedProtectionSet.getNativeGuid(),volume.getWwn());        if (!unManagedProtectionSet.getManagedVolumeIds().contains(managedVolume.getId().toString())) {          unManagedProtectionSet.getManagedVolumeIds().add(managedVolume.getId().toString());        }        if (!managedVolume.checkInternalFlags(Flag.INTERNAL_OBJECT) && null != unManagedVolume) {          log.info("Protection Set {} also has an orphaned UnManagedVolume {} that will be removed",unManagedProtectionSet.getNativeGuid(),unManagedVolume.getLabel());          unManagedProtectionSet.getUnManagedVolumeIds().remove(unManagedVolume.getId().toString());          unManagedVolumesToDelete.add(unManagedVolume);        }        continue;      }      log.info("Processing Replication Set UnManagedVolume {}",unManagedVolume.forDisplay());      if (!unManagedProtectionSet.getUnManagedVolumeIds().contains(unManagedVolume.getId().toString())) {        unManagedProtectionSet.getUnManagedVolumeIds().add(unManagedVolume.getId().toString());      }      String personality=Volume.PersonalityTypes.SOURCE.name();      if (!volume.isProduction()) {        personality=Volume.PersonalityTypes.TARGET.name();      }      updateCommonRPProperties(unManagedProtectionSet,unManagedVolume,personality,volume,dbClient);      StringSet rpAccessState=new StringSet();      rpAccessState.add(rpCopyAccessStateMap.get(volume.getRpCopyName()));      unManagedVolume.putVolumeInfo(SupportedVolumeInformation.RP_ACCESS_STATE.toString(),rpAccessState);      StringSet rsetName=new StringSet();      rsetName.add(rset.getName());      unManagedVolume.putVolumeInfo(SupportedVolumeInformation.RP_RSET_NAME.toString(),rsetName);      rpWwnToNativeWwn.put(volume.getWwn(),unManagedVolume.getWwn());      unManagedVolumesToUpdateByWwn.put(unManagedVolume.getWwn(),unManagedVolume);    }    for (    GetVolumeResponse volume : rset.getVolumes()) {      if (!volume.isProduction()) {        continue;      }      UnManagedVolume unManagedVolume=null;      String wwn=rpWwnToNativeWwn.get(volume.getWwn());      if (wwn != null) {        unManagedVolume=findUnManagedVolumeForWwn(wwn,dbClient,storageNativeIdPrefixes);      }      if (null == unManagedVolume) {        log.info("Protection Set {} contains unknown volume: {}. Skipping.",unManagedProtectionSet.getNativeGuid(),volume.getWwn());        continue;      }      log.info("Linking target volumes to source volume {}",unManagedVolume.forDisplay());      StringSet rpTargetVolumeIds=linkTargetVolumes(unManagedProtectionSet,unManagedVolume,rset,rpWwnToNativeWwn,storageNativeIdPrefixes,dbClient);      unManagedVolume.putVolumeInfo(SupportedVolumeInformation.RP_UNMANAGED_TARGET_VOLUMES.toString(),rpTargetVolumeIds);      unManagedVolumesToUpdateByWwn.put(unManagedVolume.getWwn(),unManagedVolume);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void updateFile(OCFile file){  setFile(file);}  }
class C{  public boolean isComposite(){  return false;}  }
class C{  public void addActionListener(EventListener listener){  addActionListener(Events.ON_CLICK,listener);}  }
class C{  public InvitationProjectsObject(){  super();}  }
class C{  public boolean isAnyPermissionPermanentlyDenied(){  boolean hasPermanentlyDeniedAnyPermission=false;  for (  PermissionDeniedResponse deniedResponse : deniedPermissionResponses) {    if (deniedResponse.isPermanentlyDenied()) {      hasPermanentlyDeniedAnyPermission=true;      break;    }  }  return hasPermanentlyDeniedAnyPermission;}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Double && val instanceof Float) {          double k=unwrapKey(key);          float v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  private void parseAll() throws XMLStreamException, SAXException {  int eventType=_xmlReader.getEventType();  if (eventType != XMLStreamConstants.START_DOCUMENT)   throw new SAXException("Currently parsing");  _contentHandler.startDocument();  boolean doContinue=true;  while (doContinue) {    CharArray uri, localName, qName, prefix, text;switch (_xmlReader.next()) {case XMLStreamConstants.START_ELEMENT:      for (int i=0, count=_xmlReader.getNamespaceCount(); i < count; i++) {        prefix=_xmlReader.getNamespacePrefix(i);        prefix=(prefix == null) ? NO_CHAR : prefix;        uri=_xmlReader.getNamespaceURI(i);        _contentHandler.startPrefixMapping(prefix,uri);      }    uri=_xmlReader.getNamespaceURI();  uri=(uri == null) ? NO_CHAR : uri;localName=_xmlReader.getLocalName();qName=_xmlReader.getQName();_contentHandler.startElement(uri,localName,qName,_xmlReader.getAttributes());break;case XMLStreamConstants.END_ELEMENT:uri=_xmlReader.getNamespaceURI();uri=(uri == null) ? NO_CHAR : uri;localName=_xmlReader.getLocalName();qName=_xmlReader.getQName();_contentHandler.endElement(uri,localName,qName);for (int i=0, count=_xmlReader.getNamespaceCount(); i < count; i++) {prefix=_xmlReader.getNamespacePrefix(i);prefix=(prefix == null) ? NO_CHAR : prefix;_contentHandler.endPrefixMapping(prefix);}break;case XMLStreamConstants.CDATA:case XMLStreamConstants.CHARACTERS:text=_xmlReader.getText();_contentHandler.characters(text.array(),text.offset(),text.length());break;case XMLStreamConstants.SPACE:text=_xmlReader.getText();_contentHandler.ignorableWhitespace(text.array(),text.offset(),text.length());break;case XMLStreamConstants.PROCESSING_INSTRUCTION:_contentHandler.processingInstruction(_xmlReader.getPITarget(),_xmlReader.getPIData());break;case XMLStreamConstants.COMMENT:break;case XMLStreamConstants.END_DOCUMENT:doContinue=false;_xmlReader.close();break;}}}  }
class C{  public void goToSleep(){  sendCommand(CMD.LOWPOWER,0);}  }
class C{  @Override protected MkTabEntry createNewDirectoryEntry(MkTabTreeNode<O> node,DBID routingObjectID,double parentDistance){  return new MkTabDirectoryEntry(routingObjectID,parentDistance,node.getPageID(),node.coveringRadiusFromEntries(routingObjectID,this),node.kNNDistances());}  }
class C{  protected final void clearAuthenticationAttributes(HttpServletRequest request){  HttpSession session=request.getSession(false);  if (session == null) {    return;  }  session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public void doDelete(final Tradestrategy tradestrategy){  try {    int result=JOptionPane.showConfirmDialog(this.getFrame(),"Do you want to delete order for the selected Tradestrategy?","Information",JOptionPane.YES_NO_OPTION);    if (result == JOptionPane.YES_OPTION) {      Tradingdays tradingdays=new Tradingdays();      Tradingday tradingday=Tradingday.newInstance(tradestrategy.getTradingday().getOpen());      tradingday.addTradestrategy(tradestrategy);      tradingdays.add(tradingday);      deleteTradeOrders(tradingdays);    }  } catch (  Exception ex) {    this.setErrorMessage("Error deleting TradeOrders.",ex.getMessage(),ex);  }}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public void addFactory(AbstractSerializerFactory factory){  _factories.add(factory);}  }
class C{  public void clear(){  this.boxed=null;}  }
class C{  private static String removeRoot(final String absoluteFilePath){  final File[] roots=File.listRoots();  for (int i=0; i < roots.length; i++) {    if (absoluteFilePath.startsWith(roots[i].getAbsolutePath())) {      return absoluteFilePath.substring(roots[i].getAbsolutePath().length(),absoluteFilePath.length());    }  }  return absoluteFilePath;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.252 -0500",hash_original_method="248FAC130B583135AFED72EC96EB473C",hash_generated_method="3572170AA4F7EEAA69DBE4A77B77CFFC") public boolean quickReject(Region rgn){  return (((rgn.getTaintInt() + getTaintInt())) == 1);}  }
class C{  public void addBinary(IFile resource,IPath containerPath){  SearchParticipant participant=SearchEngine.getDefaultSearchParticipant();  SearchDocument document=participant.getDocument(resource.getFullPath().toString());  IndexLocation indexLocation=computeIndexLocation(containerPath);  scheduleDocumentIndexing(document,containerPath,indexLocation,participant);}  }
class C{  public void generate(String formula,String path) throws IOException {  TeXFormula tf=new TeXFormula(formula);  TeXIcon ti=tf.createTeXIcon(TeXConstants.STYLE_DISPLAY,40);  BufferedImage bimg=new BufferedImage(ti.getIconWidth(),ti.getIconHeight(),BufferedImage.TYPE_4BYTE_ABGR);  Graphics2D g2d=bimg.createGraphics();  g2d.setColor(Color.white);  g2d.fillRect(0,0,ti.getIconWidth(),ti.getIconHeight());  JLabel jl=new JLabel();  jl.setForeground(new Color(0,0,0));  ti.paintIcon(jl,g2d,0,0);  File out=new File(path);  ImageIO.write(bimg,"png",out);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == StrictModeRelevant.class) {switch (baseFeatureID) {case N4JSPackage.STRICT_MODE_RELEVANT__STRICT_MODE:      return N4JSPackage.THIS_LITERAL__STRICT_MODE;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private void viewLoggingConfiguration(int[] indices){  if (indices == null || indices.length != 1) {    String msg=Localization.Main.getText("gui.logging.view.select");    JOptionPane.showMessageDialog(this,msg,"",JOptionPane.WARNING_MESSAGE);    return;  }  String loggingConfig=(String)lstLoggingConfigurations.getModel().getElementAt(indices[0]);  try {    OS.factory().openFile(new File(ConfigurationManager.getConfigurationDirectory(),Constants.LOGFILE_FOLDER + File.separator + getFilenameFromConfig(loggingConfig)));  } catch (  IOException e) {    JOptionPane.showMessageDialog(this,e.getMessage());  }}  }
class C{  @Override public boolean isComplete(){  return getProcessed() == total;}  }
class C{  @Override public long nodeNumber(){  return nodeNumber;}  }
class C{  public String binlogFilename(){  return binlogFilename;}  }
class C{  public X25Record(Name name,int dclass,long ttl,String address){  super(name,Type.X25,dclass,ttl);  this.address=checkAndConvertAddress(address);  if (this.address == null) {    throw new IllegalArgumentException("invalid PSDN address " + address);  }}  }
class C{  public static AssociationSessionType create(String sessType,String assocType) throws AssociationException {  return create(sessType,assocType,false);}  }
class C{  public boolean isResettable(){  return source.isResettable();}  }
class C{  public void close(){  if (mFifo != null) {    mFifo.close();    mFifo=null;  }}  }
class C{  public static void main(String[] argv){  runFilter(new ReplaceMissingValues(),argv);}  }
class C{  void finishPacket(ByteBuffer buffer){  addTlv(buffer,DHCP_MESSAGE_TYPE,DHCP_MESSAGE_TYPE_DISCOVER);  addTlv(buffer,DHCP_PARAMETER_LIST,mRequestedParams);  addTlvEnd(buffer);}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){  deployableFactory.registerDeployable("tomee1x",DeployableType.WAR,TomcatWAR.class);  deployableFactory.registerDeployable("tomee7x",DeployableType.WAR,TomcatWAR.class);}  }
class C{  private ClassifierSplitModel localModel(){  return (ClassifierSplitModel)m_localModel;}  }
class C{  public boolean hasDependencies(){  if (doNotCheckCapabilities()) {    return false;  }  return (m_Dependencies.size() > 0);}  }
class C{  private int eofCheck(EOFException e,int i,int start,int length) throws EOFException {  if (i == start) {    throw e;  } else {    return (i - start) * length;  }}  }
class C{  public int size(){  return points.size();}  }
class C{  private Object decodeObject(Remote r,Name name) throws NamingException {  try {    Object obj=(r instanceof RemoteReference) ? ((RemoteReference)r).getReference() : (Object)r;    return NamingManager.getObjectInstance(obj,name,this,environment);  } catch (  NamingException e) {    throw e;  }catch (  RemoteException e) {    throw (NamingException)wrapRemoteException(e).fillInStackTrace();  }catch (  Exception e) {    NamingException ne=new NamingException();    ne.setRootCause(e);    throw ne;  }}  }
class C{  public RoundedTransformationBuilder borderWidth(float widthPx){  mBorderWidth=widthPx;  return this;}  }
class C{  @Inline static void compilePutfieldBarrierShortImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.shortFieldWriteBarrierMethod);}  }
class C{  public static void main(String[] args){  runCheck(new CheckClusterer(),args);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static String toString(int M_[][]){  StringBuilder sb=new StringBuilder();  for (int j=0; j < M_.length; j++) {    for (int k=0; k < M_[j].length; k++) {      String num=String.format("%5d",M_[j][k]);      sb.append(num);    }    sb.append("\n");  }  return sb.toString();}  }
class C{  public static double metersToMiles(double meters){  return metersToKilometers(meters) * MILES_PER_KILOMETER;}  }
class C{  void updateConfig() throws RcsAccountException, IOException {  HttpsProvisioningService.cancelRetryAlarm(mCtx,mRetryIntent);  HttpsProvisioningResult result=getConfig();  processProvisioningResult(result);}  }
class C{  protected int drawLabelText(Graphics g,Label l,String text,int x,int y,int textSpaceW){  Style style=l.getStyle();  Font f=style.getFont();  boolean rtl=l.isRTL();  boolean isTickerRunning=l.isTickerRunning();  int txtW=l.getStringWidth(f);  if ((!isTickerRunning) || rtl) {    if (txtW > textSpaceW && textSpaceW > 0) {      if (rtl) {        if ((!isTickerRunning) && (l.isEndsWith3Points())) {          String points="...";          int pointsW=f.stringWidth(points);          g.drawString(points,l.getShiftText() + x,y,l.getStyle().getTextDecoration());          g.clipRect(pointsW + l.getShiftText() + x,y,textSpaceW - pointsW,f.getHeight());        }        x=x - txtW + textSpaceW;      } else {        if (l.isEndsWith3Points()) {          String points="...";          int index=1;          int widest=f.charWidth('W');          int pointsW=f.stringWidth(points);          int tlen=text.length();          while (fastCharWidthCheck(text,index,textSpaceW - pointsW,widest,f) && index < tlen) {            index++;          }          text=text.substring(0,Math.min(text.length(),Math.max(1,index - 1))) + points;          txtW=f.stringWidth(text);        }      }    }  }  g.drawString(text,l.getShiftText() + x,y,style.getTextDecoration());  return Math.min(txtW,textSpaceW);}  }
class C{  private ContentType guessContentType(CharProducer cp,InputSource is,ContentType type){  assert null != is;  assert null != cp;  if (null != type) {    return type;  }  String path=is.getUri().getPath();  return GuessContentType.guess(null,path,content);}  }
class C{  public UsersListCellRenderer(){  nameFont=new Font("Helvetica",Font.BOLD,13);  generalFont=new Font("Helvetica",Font.PLAIN,13);  mainPanelDimension=new Dimension(250,68);  activeMainPanelDimension=new Dimension(250,116);  activeColor=UIUtil.isUnderDarcula() ? UIManager.getColor("TextField.background") : Color.WHITE;  inactiveColor=UIUtil.isUnderDarcula() ? UIManager.getColor("darcula.inactiveBackground") : new Color(0xf5f5f5);  FontMetrics fontMetrics=getFontMetrics(generalFont);  generalFontHeight=fontMetrics.getHeight();  cloudLabelDimension=new Dimension(fontMetrics.stringWidth(CLOUD_LABEL_TEXT),generalFontHeight);  playLabelDimension=new Dimension(fontMetrics.stringWidth(PLAY_LABEL_TEXT),generalFontHeight);  learnMoreLabelDimension=new Dimension(fontMetrics.stringWidth(LEARN_MORE_TEXT),generalFontHeight);}  }
class C{  private byte[] maskGeneratorFunction1(byte[] Z,int zOff,int zLen,int length){  byte[] mask=new byte[length];  byte[] hashBuf=new byte[mgf1Hash.getDigestSize()];  byte[] C=new byte[4];  int counter=0;  mgf1Hash.reset();  while (counter < (length / hashBuf.length)) {    ItoOSP(counter,C);    mgf1Hash.update(Z,zOff,zLen);    mgf1Hash.update(C,0,C.length);    mgf1Hash.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * hashBuf.length,hashBuf.length);    counter++;  }  if ((counter * hashBuf.length) < length) {    ItoOSP(counter,C);    mgf1Hash.update(Z,zOff,zLen);    mgf1Hash.update(C,0,C.length);    mgf1Hash.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * hashBuf.length,mask.length - (counter * hashBuf.length));  }  return mask;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.SAVE_HISTORY__REGION:    return region != null;case SexecPackage.SAVE_HISTORY__DEEP:  return deep != DEEP_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @SuppressWarnings("unused") @Deprecated public void moreDataLoaded(){  loading=false;  mAdapter.notifyDataSetChanged();}  }
class C{  @Deprecated public boolean isArchive(){  try {    return file != null && ZipUtils.isZipFile(file);  } catch (  IOException e) {    return false;  }}  }
class C{  @Nullable public static String readTextFileFromRawResource(@NonNull final Context context,@RawRes final int resId){  final BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(context.getResources().openRawResource(resId)));  String line;  final StringBuilder body=new StringBuilder();  try {    while ((line=bufferedReader.readLine()) != null) {      body.append(line).append('\n');    }  } catch (  IOException e) {    return null;  }  return body.toString();}  }
class C{  public static void mergeBamIndexFiles(File output,List<File> files,List<Long> dataFileSizes) throws IOException {  long pointerAdjust=0;  final SequenceIndex[][] indexesSquared=new SequenceIndex[files.size()][];  final String[][] sequenceNames=new String[files.size()][];  for (int i=0; i < files.size(); i++) {    final File baiFile=files.get(i);    try (FileInputStream is=new FileInputStream(baiFile)){      final byte[] smallBuf=new byte[8];      IOUtils.readFully(is,smallBuf,0,8);      final int numSequences=ByteArrayIOUtils.bytesToIntLittleEndian(smallBuf,4);      sequenceNames[i]=new String[numSequences];      for (int j=0; j < numSequences; j++) {        sequenceNames[i][j]=Integer.toString(j);      }      indexesSquared[i]=TabixIndexMerge.loadFileIndexes(is,numSequences,pointerAdjust);    }     pointerAdjust+=dataFileSizes.get(i);  }  final List<SequenceIndex> indexes=TabixIndexMerge.collapseIndexes(indexesSquared,sequenceNames);  final SequenceIndexContainer cont=new SequenceIndexContainer(indexes,0);  TabixIndexer.mergeChunks(indexes);  try (FileOutputStream fos=new FileOutputStream(output)){    BamIndexer.writeIndex(cont,fos);  } }  }
class C{  public MetaDataRegressionTest(String name){  super(name);}  }
class C{  public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);  List<Mesh> list=new ArrayList<>();  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {    Mesh mesh=generateMesh(md5Model,md5Mesh);    handleTexture(mesh,md5Mesh,defaultColour);    list.add(mesh);  }  Mesh[] meshes=new Mesh[list.size()];  meshes=list.toArray(meshes);  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);  return result;}  }
class C{  List<Token<UriElement>> tokenize(String s) throws IllegalArgumentException {  if (s == null || s.length() == 0) {    return new ArrayList<Token<UriElement>>();  }  if (!SCHEME_URI_PATTERN.matcher(s).matches()) {    s=("http://") + s;  }  URI uri=URI.create(s);  List<Token<UriElement>> result=new ArrayList<Token<UriElement>>(10);  String scheme="http";  if (uri.getScheme() != null) {    scheme=uri.getScheme();  }  String host=uri.getHost();  String parsedPortFromAuthority=null;  String parsedUserInfoFromAuthority=null;  String userFromAuthority=null;  String passwordFromAuthority=null;  if (host == null) {    String authority=uri.getAuthority();    if (authority != null) {      host=authority;      int asteriskIdx=host.indexOf("@");      if (asteriskIdx >= 0) {        parsedUserInfoFromAuthority=host.substring(0,asteriskIdx);        host=host.substring(asteriskIdx + 1);        int colonIdx=parsedUserInfoFromAuthority.indexOf(":");        if (colonIdx >= 0) {          userFromAuthority=parsedUserInfoFromAuthority.substring(0,colonIdx);          passwordFromAuthority=parsedUserInfoFromAuthority.substring(colonIdx + 1);        }      }      int colonIdx=host.indexOf(":");      if (colonIdx >= 0) {        parsedPortFromAuthority=host.substring(colonIdx + 1);        host=host.substring(0,colonIdx);      }    } else {      throw new IllegalArgumentException("Hostname is required.");    }  }  List<String> hostParts=Arrays.asList(host.split("\\."));  Collections.reverse(hostParts);  for (  String hostPart : hostParts) {    result.add(new Token<UriElement>(hostPart,UriElement.HOST));  }  if (parsedPortFromAuthority != null) {    result.add(new Token<UriElement>(parsedPortFromAuthority,UriElement.PORT));  } else   if (uri.getPort() > 0) {    result.add(new Token<UriElement>(String.valueOf(uri.getPort()),UriElement.PORT));  } else   if (getDefaultPort(scheme) > 0) {    result.add(new Token<UriElement>(String.valueOf(getDefaultPort(scheme)),UriElement.PORT));  }  if (parsedUserInfoFromAuthority != null) {    if (userFromAuthority != null) {      result.add(new Token<UriElement>(userFromAuthority,UriElement.USERINFO));    }    if (passwordFromAuthority != null) {      result.add(new Token<UriElement>(passwordFromAuthority,UriElement.USERINFO));    }    if (userFromAuthority == null && passwordFromAuthority == null) {      result.add(new Token<UriElement>(parsedUserInfoFromAuthority,UriElement.USERINFO));    }  } else   if (uri.getUserInfo() != null) {    String userInfo=uri.getUserInfo();    int colonIdx=userInfo.indexOf(":");    if (colonIdx >= 0) {      result.add(new Token<UriElement>(userInfo.substring(0,colonIdx),UriElement.USERINFO));      result.add(new Token<UriElement>(userInfo.substring(colonIdx + 1),UriElement.USERINFO));    } else {      result.add(new Token<UriElement>(uri.getUserInfo(),UriElement.USERINFO));    }  }  if (isNotBlank(uri.getPath())) {    String path=uri.getPath();    if (path.startsWith("/")) {      path=path.substring(1);    }    if (isNotBlank(path)) {      for (      String p : path.split("/")) {        result.add(new Token<UriElement>(p,UriElement.PATH));      }    }  }  return result;}  }
class C{  public CommentDataImpl(ExtensionPoint extensionPoint){  super(extensionPoint);}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  if (alav.getNamespaceURI() == null) {    String ln=alav.getLocalName();    if (ln.equals(SVG_X1_ATTRIBUTE) || ln.equals(SVG_Y1_ATTRIBUTE) || ln.equals(SVG_X2_ATTRIBUTE)|| ln.equals(SVG_Y2_ATTRIBUTE)) {      buildShape(ctx,e,(ShapeNode)node);      handleGeometryChanged();      return;    }  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  public net.minecraft.world.chunk.Chunk provideChunk(int x,int z){  random.setSeed((long)x * 341873128712L + (long)z * 132897987541L);  net.minecraft.world.chunk.Chunk chunk;  CustomBiomeGrid biomegrid=new CustomBiomeGrid();  biomegrid.biome=new net.minecraft.world.biome.BiomeGenBase[256];  world.getWorldChunkManager().loadBlockGeneratorData(biomegrid.biome,x << 4,z << 4,16,16);  short[][] xbtypes=generator.generateExtBlockSections(this.world.getWorld(),this.random,x,z,biomegrid);  if (xbtypes != null) {    chunk=new net.minecraft.world.chunk.Chunk(this.world,x,z);    net.minecraft.world.chunk.storage.ExtendedBlockStorage[] csect=chunk.getBlockStorageArray();    int scnt=Math.min(csect.length,xbtypes.length);    for (int sec=0; sec < scnt; sec++) {      if (xbtypes[sec] == null) {        continue;      }      byte[] secBlkID=new byte[4096];      byte[] secExtBlkID=null;      short[] bdata=xbtypes[sec];      for (int i=0, j=0; i < bdata.length; i+=2, j++) {        short b1=bdata[i];        short b2=bdata[i + 1];        byte extb=(byte)((b1 >> 8) | ((b2 >> 4) & 0xF0));        secBlkID[i]=(byte)b1;        secBlkID[(i + 1)]=(byte)b2;        if (extb != 0) {          if (secExtBlkID == null) {            secExtBlkID=new byte[2048];          }          secExtBlkID[j]=extb;        }      }      csect[sec]=new net.minecraft.world.chunk.storage.ExtendedBlockStorage(sec << 4,true,secBlkID,secExtBlkID);    }  } else {    byte[][] btypes=generator.generateBlockSections(this.world.getWorld(),this.random,x,z,biomegrid);    if (btypes != null) {      chunk=new net.minecraft.world.chunk.Chunk(this.world,x,z);      net.minecraft.world.chunk.storage.ExtendedBlockStorage[] csect=chunk.getBlockStorageArray();      int scnt=Math.min(csect.length,btypes.length);      for (int sec=0; sec < scnt; sec++) {        if (btypes[sec] == null) {          continue;        }        csect[sec]=new net.minecraft.world.chunk.storage.ExtendedBlockStorage(sec << 4,true,btypes[sec],null);      }    } else {      @SuppressWarnings("deprecation") byte[] types=generator.generate(this.world.getWorld(),this.random,x,z);      int ydim=types.length / 256;      int scnt=ydim / 16;      chunk=new net.minecraft.world.chunk.Chunk(this.world,x,z);      net.minecraft.world.chunk.storage.ExtendedBlockStorage[] csect=chunk.getBlockStorageArray();      scnt=Math.min(scnt,csect.length);      for (int sec=0; sec < scnt; sec++) {        net.minecraft.world.chunk.storage.ExtendedBlockStorage cs=null;        byte[] csbytes=null;        for (int cy=0; cy < 16; cy++) {          int cyoff=cy | (sec << 4);          for (int cx=0; cx < 16; cx++) {            int cxyoff=(cx * ydim * 16) + cyoff;            for (int cz=0; cz < 16; cz++) {              byte blk=types[cxyoff + (cz * ydim)];              if (blk != 0) {                if (cs == null) {                  cs=csect[sec]=new net.minecraft.world.chunk.storage.ExtendedBlockStorage(sec << 4,true);                  csbytes=cs.getBlockLSBArray();                }                csbytes[(cy << 8) | (cz << 4) | cx]=blk;              }            }          }        }        if (cs != null) {          cs.removeInvalidBlocks();        }      }    }  }  byte[] biomeIndex=chunk.getBiomeArray();  for (int i=0; i < biomeIndex.length; i++) {    biomeIndex[i]=(byte)(biomegrid.biome[i].biomeID & 0xFF);  }  chunk.generateSkylightMap();  return chunk;}  }
class C{  public OrganizationAlreadyExistsException(final String message){  super(message);}  }
class C{  CryptoInputStream(final InputStream inputStream,final MessageCryptoHandler<K> cryptoHandler){  inputStream_=Utils.assertNonNull(inputStream,"inputStream");  cryptoHandler_=Utils.assertNonNull(cryptoHandler,"cryptoHandler");}  }
class C{  static IndexSegmentBuilder doBuildIndexSegment(final String prefix,final BTree btree,final int m,final BuildEnum buildEnum,final boolean bufferNodes) throws Exception {  final File outFile=new File(prefix + "_m" + m+ "_"+ buildEnum+ ".seg");  if (outFile.exists() && !outFile.delete()) {    fail("Could not delete old index segment: " + outFile.getAbsoluteFile());  }  final File tmpDir=outFile.getAbsoluteFile().getParentFile();  final long commitTime=System.currentTimeMillis();  if (log.isInfoEnabled())   log.info("Building index segment: in(m=" + btree.getBranchingFactor() + ", rangeCount="+ btree.rangeCount()+ "), out(m="+ m+ "), buildEnum="+ buildEnum+ ", bufferNodes="+ bufferNodes);  final IndexSegmentBuilder builder;switch (buildEnum) {case TwoPass:    builder=IndexSegmentBuilder.newInstanceTwoPass(btree,outFile,tmpDir,m,compactingMerge,commitTime,null,null,bufferNodes);  break;case FullyBuffered:builder=IndexSegmentBuilder.newInstanceFullyBuffered(btree,outFile,tmpDir,m,compactingMerge,commitTime,null,null,bufferNodes);break;default :throw new AssertionError(buildEnum.toString());}@SuppressWarnings("unused") final IndexSegmentCheckpoint checkpoint=builder.call();return builder;}  }
class C{  public static FileObject createFileObjectWithContent(String content) throws IOException {  final File tempFile=File.createTempFile("olv_temp","");  OutputStream out=new FileOutputStream(tempFile);  IOUtils.write(content,out,Charset.forName("UTF-8"));  IOUtils.closeQuietly(out);  final FileObject fileObject=VFSUtils.resolveFileObject(tempFile.toURI());  return fileObject;}  }
class C{  public boolean isTriggered(){  return checkbox.isSelected();}  }
class C{  protected OMGraphicList constructMarkerLines(double ctrLon){  OMGraphicList lines=new OMGraphicList(3);  OMPoly currentLine;  for (int j=0; j < 360; j+=180) {    float lon=(float)j;    double[] llp={90f,lon,0f,lon,-90f,lon};    currentLine=new OMPoly(llp,OMGraphic.DECIMAL_DEGREES,boxy ? OMGraphic.LINETYPE_STRAIGHT : OMGraphic.LINETYPE_GREATCIRCLE);    currentLine.setLinePaint(dateLineColor);    lines.add(currentLine);  }  double[] llp={0f,ctrLon - 180f,0f,ctrLon - 90f,0f,ctrLon,0f,ctrLon + 90f,0f,ctrLon + 180f};  currentLine=new OMPoly(llp,OMGraphic.DECIMAL_DEGREES,boxy ? OMGraphic.LINETYPE_STRAIGHT : OMGraphic.LINETYPE_GREATCIRCLE);  currentLine.setLinePaint(equatorColor);  lines.add(currentLine);  if (Debug.debugging("graticule")) {    Debug.output("GraticuleLayer.constructMarkerLines(): " + "constructed " + lines.size() + " graticule lines");  }  lines.generate(getProjection());  return lines;}  }
class C{  @PostRemove public void postRemove(final Object entity){  notifyAll(null);}  }
class C{  public boolean isCookiePolicyAccepted(){  return cookiePolicyAccepted;}  }
class C{  private boolean doAcquireNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void clearConnectedVirtualArray(){  if (_connectedVirtualArrays != null) {    _connectedVirtualArrays.clear();    setChanged("connectedVirtualArrays");    updateVirtualArrayTags();  }}  }
class C{  protected static Stamp meet(Stamp a,Stamp b){  Stamp ab=a.meet(b);  Stamp ba=b.meet(a);  Assert.assertEquals(ab,ba);  return ab;}  }
class C{  public static LatLng decode(String hash){  BitSet[] b=deInterleave(hashToBits(hash));  double lat=bitsToDouble(b[1],LAT_BIT_VALUES);  double lng=bitsToDouble(b[0],LNG_BIT_VALUES);  return new LatLng(lat,lng);}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private <T>void addProvider(@NotNull Provider<T> provider) throws ProviderConflictException {  Class<T> type=provider.type();  Annotation qualifier=provider.getQualifier();  String key=PokeHelper.makeProviderKey(type,qualifier);  addNewKeyToComponent(key,this);  provider.setComponent(this);  providers.put(key,provider);}  }
class C{  public PutRecordRequest toPutRecordRequest(String streamName){  byte[] recordBytes=toRecordBytes();  ByteBuffer bb=ByteBuffer.wrap(recordBytes);  return new PutRecordRequest().withStreamName(streamName).withExplicitHashKey(getExplicitHashKey()).withPartitionKey(getPartitionKey()).withData(bb);}  }
class C{  private void createClean(){  Comment cleanUpComment=doc.createComment("Clean up");  root.appendChild(cleanUpComment);  Element target=doc.createElement("target");  target.setAttribute("name","clean");  target.setAttribute("description","Remove all temporary files");  Comment deleteFileComment=doc.createComment("Delete files");  target.appendChild(deleteFileComment);  Element delete=doc.createElement("delete");  delete.setAttribute("dir","${build.classes}");  target.appendChild(delete);  root.appendChild(target);}  }
class C{  private Instances cleanseTrain(Instances data) throws Exception {  Instance inst;  Instances buildSet=new Instances(data);  Instances temp=new Instances(data,data.numInstances());  Instances inverseSet=new Instances(data,data.numInstances());  int count=0;  double ans;  int iterations=0;  int classIndex=m_classIndex;  if (classIndex < 0) {    classIndex=data.classIndex();  }  if (classIndex < 0) {    classIndex=data.numAttributes() - 1;  }  while (count != buildSet.numInstances()) {    iterations++;    if (m_numOfCleansingIterations > 0 && iterations > m_numOfCleansingIterations) {      break;    }    count=buildSet.numInstances();    buildSet.setClassIndex(classIndex);    m_cleansingClassifier.buildClassifier(buildSet);    temp=new Instances(buildSet,buildSet.numInstances());    for (int i=0; i < buildSet.numInstances(); i++) {      inst=buildSet.instance(i);      ans=m_cleansingClassifier.classifyInstance(inst);      if (buildSet.classAttribute().isNumeric()) {        if (ans >= inst.classValue() - m_numericClassifyThreshold && ans <= inst.classValue() + m_numericClassifyThreshold) {          temp.add(inst);        } else         if (m_invertMatching) {          inverseSet.add(inst);        }      } else {        if (ans == inst.classValue()) {          temp.add(inst);        } else         if (m_invertMatching) {          inverseSet.add(inst);        }      }    }    buildSet=temp;  }  if (m_invertMatching) {    inverseSet.setClassIndex(data.classIndex());    return inverseSet;  } else {    buildSet.setClassIndex(data.classIndex());    return buildSet;  }}  }
class C{  public java.lang.StringBuffer append(double d){  internal.append(d);  return this;}  }
class C{  protected String likeValue(final String str){  if (StringUtils.isNotBlank(str)) {    return "%" + str + "%";  }  return null;}  }
class C{  public static void lowess_stl(GeoTimeSerie fromGTS,GeoTimeSerie toGTS,int neighbours,int degree,int jump,double[] weights,double[] rho) throws WarpScriptException {  if (!isBucketized(fromGTS)) {    throw new WarpScriptException("lowess_stl method works with bucketized gts only");  }  if (fromGTS == toGTS) {    throw new WarpScriptException("in lowess_stl method, fromGTS and toGTS can't be the same object. Please consider using rlowess method instead");  }  sort(fromGTS);  int idx=fromGTS.values - 1;  int rest=(fromGTS.bucketcount - 1) % (jump + 1);  for (int j=0; j <= (fromGTS.bucketcount - 1) / (jump + 1); j++) {    long tick=fromGTS.lastbucket - (j * (jump + 1) + rest) * fromGTS.bucketspan;    while (idx > -1 && tick < tickAtIndex(fromGTS,idx)) {      idx--;    }    double estimated=pointwise_lowess(fromGTS,idx,tick,neighbours,degree,weights,rho,null,true);    setValue(toGTS,tick,GeoTimeSerie.NO_LOCATION,GeoTimeSerie.NO_ELEVATION,estimated,true);  }  for (int j=0; j < (fromGTS.bucketcount - 1) / (jump + 1); j++) {    int right=j * (jump + 1) + rest;    int left=(j + 1) * (jump + 1) + rest;    double denom=left - right;    long righttick=fromGTS.lastbucket - right * fromGTS.bucketspan;    long lefttick=fromGTS.lastbucket - left * fromGTS.bucketspan;    for (int r=1; r < jump + 1; r++) {      int middle=r + j * (jump + 1) + rest;      long tick=fromGTS.lastbucket - middle * fromGTS.bucketspan;      double alpha=(middle - right) / denom;      double interpolated=alpha * ((Number)valueAtTick(toGTS,lefttick)).doubleValue() + (1 - alpha) * ((Number)valueAtTick(toGTS,righttick)).doubleValue();      setValue(toGTS,tick,GeoTimeSerie.NO_LOCATION,GeoTimeSerie.NO_ELEVATION,interpolated,true);    }  }  if (0 != rest) {    idx=fromGTS.values - 1;    while (idx > -1 && fromGTS.lastbucket < tickAtIndex(fromGTS,idx)) {      idx--;    }    double estimated=pointwise_lowess(fromGTS,idx,fromGTS.lastbucket,neighbours,degree,weights,rho,null,true);    setValue(toGTS,fromGTS.lastbucket,GeoTimeSerie.NO_LOCATION,GeoTimeSerie.NO_ELEVATION,estimated,true);    int right=0;    int left=rest;    double denom=left - right;    long lefttick=fromGTS.lastbucket - left * fromGTS.bucketspan;    for (int r=1; r < rest; r++) {      long tick=fromGTS.lastbucket - r * fromGTS.bucketspan;      double alpha=(r - right) / denom;      double interpolated=alpha * ((Number)valueAtTick(toGTS,lefttick)).doubleValue() + (1 - alpha) * estimated;      setValue(toGTS,tick,GeoTimeSerie.NO_LOCATION,GeoTimeSerie.NO_ELEVATION,interpolated,true);    }  }}  }
class C{  public ClientConfig withReadTimeout(int readTimeout){  setReadTimeout(readTimeout);  return this;}  }
class C{  public static <B>ImmutableTypeToInstanceMap<B> of(){  return new ImmutableTypeToInstanceMap<B>(ImmutableMap.<TypeToken<? extends B>,B>of());}  }
class C{  public final void onDestruction(){  close();  Logger.panic(getClass().getName() + "#onDestruction",null,null);  System.exit(1);}  }
class C{  private static void waitForAllReplicasState(String collection,ZkController zkController,String prop,int expectedVersion,int maxWaitSecs){  final RTimer timer=new RTimer();  List<PerReplicaCallable> concurrentTasks=new ArrayList<>();  for (  String coreUrl : getActiveReplicaCoreUrls(zkController,collection)) {    PerReplicaCallable e=new PerReplicaCallable(coreUrl,prop,expectedVersion,maxWaitSecs);    concurrentTasks.add(e);  }  if (concurrentTasks.isEmpty())   return;  log.info(formatString("Waiting up to {0} secs for {1} replicas to set the property {2} to be of version {3} for collection {4}",maxWaitSecs,concurrentTasks.size(),prop,expectedVersion,collection));  int poolSize=Math.min(concurrentTasks.size(),10);  ExecutorService parallelExecutor=ExecutorUtil.newMDCAwareFixedThreadPool(poolSize,new DefaultSolrThreadFactory("solrHandlerExecutor"));  try {    List<Future<Boolean>> results=parallelExecutor.invokeAll(concurrentTasks,maxWaitSecs,TimeUnit.SECONDS);    List<String> failedList=null;    for (int f=0; f < results.size(); f++) {      Boolean success=false;      Future<Boolean> next=results.get(f);      if (next.isDone() && !next.isCancelled()) {        try {          success=next.get();        } catch (        ExecutionException e) {        }      }      if (!success) {        String coreUrl=concurrentTasks.get(f).coreUrl;        log.warn("Core " + coreUrl + "could not get the expected version "+ expectedVersion);        if (failedList == null)         failedList=new ArrayList<>();        failedList.add(coreUrl);      }    }    if (failedList != null)     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,formatString("{0} out of {1} the property {2} to be of version {3} within {4} seconds! Failed cores: {5}",failedList.size(),concurrentTasks.size() + 1,prop,expectedVersion,maxWaitSecs,failedList));  } catch (  InterruptedException ie) {    log.warn(formatString("Core  was interrupted . trying to set the property {1} to version {2} to propagate to {3} replicas for collection {4}",prop,expectedVersion,concurrentTasks.size(),collection));    Thread.currentThread().interrupt();  } finally {    ExecutorUtil.shutdownAndAwaitTermination(parallelExecutor);  }  log.info("Took {}ms to set the property {} to be of version {} for collection {}",timer.getTime(),prop,expectedVersion,collection);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera,autoFocusRequest);  }}  }
class C{  public void log(Level mesgLevel,String mesg,Throwable t){  if (mesgLevel.ordinal() >= level.ordinal()) {    StringBuilder builder=new StringBuilder();    builder.append(mesgLevel.name());    builder.append(": [");    builder.append(simpleClassName != null ? simpleClassName : className);    builder.append("] [");    builder.append(Thread.currentThread());    builder.append("] ");    builder.append(mesg);    if (mesgLevel == Level.SEVERE) {      if (logger != null) {        logger.log(java.util.logging.Level.SEVERE,builder.toString(),t);      } else {        System.err.println(builder.toString());      }    } else {      if (logger != null) {        logger.info(builder.toString());      } else {        System.out.println(builder.toString());      }    }    if (t != null) {      t.printStackTrace();    }  }}  }
class C{  public AbCompassView(Context context,AttributeSet attrs){  super(context,attrs);  this.mContext=context;}  }
class C{  public static MySQLPacket readPacket(InputStream in){  return readPacket(in,10000);}  }
class C{  public void onEvent(Event e) throws Exception {  if (m_actionActive)   return;  m_actionActive=true;  if (e.getTarget().equals(orderField)) {    ListItem li=orderField.getSelectedItem();    int C_Order_ID=0;    if (li != null && li.getValue() != null)     C_Order_ID=((Integer)li.getValue()).intValue();    rmaField.setSelectedIndex(-1);    shipmentField.setSelectedIndex(-1);    loadOrder(C_Order_ID,true);  } else   if (e.getTarget().equals(shipmentField)) {    ListItem li=shipmentField.getSelectedItem();    int M_InOut_ID=0;    if (li != null && li.getValue() != null)     M_InOut_ID=((Integer)li.getValue()).intValue();    orderField.setSelectedIndex(-1);    rmaField.setSelectedIndex(-1);    loadShipment(M_InOut_ID);  } else   if (e.getTarget().equals(rmaField)) {    ListItem li=rmaField.getSelectedItem();    int M_RMA_ID=0;    if (li != null && li.getValue() != null)     M_RMA_ID=((Integer)li.getValue()).intValue();    orderField.setSelectedIndex(-1);    shipmentField.setSelectedIndex(-1);    loadRMA(M_RMA_ID);  }  m_actionActive=false;}  }
class C{  private static boolean useField(){  assert 0 < useFieldRandomizedFactor;  return 0 != TestUtil.nextInt(random(),0,useFieldRandomizedFactor);}  }
class C{  public static boolean isEmpty(String str){  return (str == null) || (str.equals(""));}  }
class C{  public final Vect alphaTriples(){  Vect ts=new Vect();  for (int i=0; i < this.size(); i++) {    LiveExprNode ln=this.exprAt(i);    if (ln instanceof LNAll) {      ts.addElement(new TBTriple(ln,((LNAll)ln).getBody(),new LNNext(ln)));    } else     if (ln instanceof LNConj) {      LNConj lnc=(LNConj)ln;      ts.addElement(new TBTriple(lnc,lnc.getBody(0),lnc.getBody(1)));    }  }  return ts;}  }
class C{  public List<UsuarioVO> findUsuarios(String tipoUsuario,String searchTokenNombre,String searchTokenApellidos){  StringBuffer qual=new StringBuffer();  if (StringUtils.isNotBlank(tipoUsuario))   qual.append(DBUtils.getCondition(qual.toString())).append(DBUtils.generateEQTokenField(CAMPO_TIPO,tipoUsuario));  if (StringUtils.isNotBlank(searchTokenNombre))   qual.append(DBUtils.getCondition(qual.toString())).append(DBUtils.generateLikeTokenField(CAMPO_NOMBRE,searchTokenNombre));  if (StringUtils.isNotBlank(searchTokenApellidos))   qual.append(DBUtils.getCondition(qual.toString())).append(DBUtils.generateLikeTokenField(CAMPO_APELLIDOS,searchTokenApellidos));  qual.append(getOrderByClause());  return getVOS(qual.toString(),TABLE_NAME,COL_DEFS,UsuarioVO.class);}  }
class C{  public long bandwidth(){  return bandwidth;}  }
class C{  protected void updateView(){  if (fParentComposite != null) {    if (fInputElement == null) {      showEmptyPage();    } else {      showPage(PAGE_VIEWER);      String sig=DroidsafePluginUtilities.removeCloneSuffix(fInputElement.getSignature());      setContentDescription("method " + sig);      String valuesText=getValuesText(fInputElement);      fTextViewer.getDocument().set(valuesText);    }  }}  }
class C{  public void generateAtom(ExtensionProfile extProfile,XmlWriter w,String elementName) throws IOException {  generate(extProfile,w,Namespaces.atomNs,elementName,null);}  }
class C{  public TDoubleLongHashMap(int initialCapacity,TDoubleHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamSetupVideoEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExParam,TPointer workArea,int workAreaSize){  this.workArea=workArea.getAddress();  this.workAreaSize=workAreaSize;  resolution=convertResolutionExToResolution(usbCamSetupVideoExParam.resolution);  frameRate=usbCamSetupVideoExParam.framerate;  whiteBalance=usbCamSetupVideoExParam.wb;  saturation=usbCamSetupVideoExParam.saturation;  brightness=usbCamSetupVideoExParam.brightness;  contrast=usbCamSetupVideoExParam.contrast;  sharpness=usbCamSetupVideoExParam.sharpness;  imageEffectMode=usbCamSetupVideoExParam.effectmode;  frameSize=usbCamSetupVideoExParam.framesize;  evLevel=usbCamSetupVideoExParam.evlevel;  if (!setupVideo()) {    log.warn(String.format("Cannot find webcam"));    return SceKernelErrors.ERROR_USBCAM_NOT_READY;  }  return 0;}  }
class C{  public void finish(){  if (!isTracing()) {    return;  }  currentSpan().logEvent(Span.CLIENT_RECV);  this.tracer.close(this.currentSpan());}  }
class C{  public String formatCurrency(double currency){  return "" + currency;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public void castToBool(int mark,boolean emptyDefault){  int size=stack.size();  MethodVisitor mv=controller.getMethodVisitor();  if (mark == size) {    if (emptyDefault) {      mv.visitIntInsn(BIPUSH,1);    } else {      mv.visitIntInsn(BIPUSH,0);    }    stack.add(null);  } else   if (mark == stack.size() - 1) {    ClassNode last=stack.get(size - 1);    if (last == ClassHelper.boolean_TYPE)     return;    if (!ClassHelper.isPrimitiveType(last)) {      controller.getInvocationWriter().castNonPrimitiveToBool(last);    } else {      primitive2b(mv,last);    }  } else {    throw new GroovyBugError("operand stack contains " + stack.size() + " elements, but we expected only "+ mark);  }  stack.set(mark,ClassHelper.boolean_TYPE);}  }
class C{  private void createIcons(){  Border border=style.getBorderDown();  Insets insets=border.getBorderInsets(null);  final GraphicsConfiguration gc=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();  BufferedImage image=gc.createCompatibleImage(ICON_WIDTH,ICON_WIDTH,Transparency.OPAQUE);  Graphics2D g=image.createGraphics();  g.setColor(style.getForeground());  g.fillRect(0,0,ICON_WIDTH,ICON_WIDTH);  g.setClip(0,0,ICON_WIDTH,ICON_WIDTH);  border.paintBorder(null,g,0,0,ICON_WIDTH,ICON_WIDTH);  g.dispose();  defaultIcon=new ImageIcon(image);  BufferedImage image2=gc.createCompatibleImage(ICON_WIDTH,ICON_WIDTH,Transparency.OPAQUE);  g=image2.createGraphics();  g.drawImage(image,0,0,null);  BasicStroke stroke=new BasicStroke(2);  g.setStroke(stroke);  g.setColor(style.getShadowColor());  drawTick(g,insets);  g.dispose();  defaultSelectedIcon=new ImageIcon(image2);  image2=gc.createCompatibleImage(ICON_WIDTH,ICON_WIDTH,Transparency.OPAQUE);  g=image2.createGraphics();  g.setColor(style.getShadowColor());  g.fillRect(0,0,ICON_WIDTH,ICON_WIDTH);  g.setClip(0,0,ICON_WIDTH,ICON_WIDTH);  border.paintBorder(null,g,0,0,ICON_WIDTH,ICON_WIDTH);  g.dispose();  disabledIcon=new ImageIcon(image2);  image=gc.createCompatibleImage(ICON_WIDTH,ICON_WIDTH,Transparency.OPAQUE);  g=image.createGraphics();  g.drawImage(image2,0,0,null);  g.setStroke(stroke);  g.setColor(style.getHighLightColor());  drawTick(g,insets);  g.dispose();  disabledSelectedIcon=new ImageIcon(image);}  }
class C{  public static ValidationFactory init(){  try {    ValidationFactory theValidationFactory=(ValidationFactory)EPackage.Registry.INSTANCE.getEFactory(ValidationPackage.eNS_URI);    if (theValidationFactory != null) {      return theValidationFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new ValidationFactoryImpl();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.008 -0500",hash_original_method="055C1CABEC6B90DB231CF8138F07B9C1",hash_generated_method="3B58C883A45626CCAC1720C76B088B94") @Override final public boolean equals(Object o){  return super.equals(o);}  }
class C{  public Matrix inverse(){  return solve(identity(m,m));}  }
class C{  public void processPackageRemoved(String[] packages){  HashSet<String> packageSet=new HashSet<String>();  getUserApps(packageSet);  boolean packageRemoved=false;  for (  String packageName : packages) {    if (packageSet.remove(packageName)) {      packageRemoved=true;    }  }  if (packageRemoved) {    mPrefs.edit().putStringSet(mPackageSetKey,packageSet).apply();  }}  }
class C{  public LMJelinekMercerSimilarity(float lambda){  this.lambda=lambda;}  }
class C{  public Map<String,Class<?>> mapAvailableImplementations(Class<?> interfase) throws IOException {  _resourcesNotLoaded.clear();  Map<String,Class<?>> implementations=new HashMap<>();  Map<String,String> map=mapAvailableStrings(interfase.getName());  for (Iterator<Entry<String,String>> iterator=map.entrySet().iterator(); iterator.hasNext(); ) {    Entry<String,String> entry=iterator.next();    String string=entry.getKey();    String className=entry.getValue();    try {      Class<?> impl=_classLoader.loadClass(className);      if (interfase.isAssignableFrom(impl)) {        implementations.put(string,impl);      } else {        _resourcesNotLoaded.add(className);      }    } catch (    Exception notAvailable) {      _resourcesNotLoaded.add(className);    }  }  return implementations;}  }
class C{  @Override public void characters(char[] ch,int start,int length) throws SAXException {  DefaultHandler handler=getCurrentHandler();  if (handler != this) {    handler.characters(ch,start,length);  }}  }
class C{  protected SecretKey engineTranslateKey(SecretKey key) throws InvalidKeyException {  if ((key != null) && (key.getAlgorithm().equalsIgnoreCase("PBKDF2With" + prfAlgo)) && (key.getFormat().equalsIgnoreCase("RAW"))) {    if (key instanceof com.sun.crypto.provider.PBKDF2KeyImpl) {      return key;    }    if (key instanceof javax.crypto.interfaces.PBEKey) {      javax.crypto.interfaces.PBEKey pKey=(javax.crypto.interfaces.PBEKey)key;      try {        PBEKeySpec spec=new PBEKeySpec(pKey.getPassword(),pKey.getSalt(),pKey.getIterationCount(),pKey.getEncoded().length * 8);        return new PBKDF2KeyImpl(spec,prfAlgo);      } catch (      InvalidKeySpecException re) {        InvalidKeyException ike=new InvalidKeyException("Invalid key component(s)");        ike.initCause(re);        throw ike;      }    }  }  throw new InvalidKeyException("Invalid key format/algorithm");}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    if (ALLOW_BROKEN_PRNG) {      Log.w(PrngFixes.class.getSimpleName(),"Failed to seed OpenSSL PRNG",e);    } else {      throw new SecurityException("Failed to seed OpenSSL PRNG",e);    }  }}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public void lock(K key){  ReentrantLock lock=getLock(key);  lock.lock();}  }
class C{  public static void convoluteRows(Image outputImg,Image inputImg,Filter filter,int method){  for (int i=0; i < inputImg.getWidth(); i++) {switch (method) {case Filter.METHOD_CUTOFF:      filterCutOff(inputImg,i,inputImg.getHeight(),inputImg.getWidth(),outputImg,i,outputImg.getHeight(),outputImg.getWidth(),filter);    break;case Filter.METHOD_INVCUTOFF:  filterInvCutOff(inputImg,i,inputImg.getHeight(),inputImg.getWidth(),outputImg,i,outputImg.getHeight(),outputImg.getWidth(),filter);break;case Filter.METHOD_PERIODICAL:filterPeriodical(inputImg,i,inputImg.getHeight(),inputImg.getWidth(),outputImg,i,outputImg.getHeight(),outputImg.getWidth(),filter);break;case Filter.METHOD_INVPERIODICAL:filterInvPeriodical(inputImg,i,inputImg.getHeight(),inputImg.getWidth(),outputImg,i,outputImg.getHeight(),outputImg.getWidth(),filter);break;case Filter.METHOD_MIRROR:filterMirror(inputImg,i,inputImg.getHeight(),inputImg.getWidth(),outputImg,i,outputImg.getHeight(),outputImg.getWidth(),filter);break;case Filter.METHOD_INVMIRROR:filterInvMirror(inputImg,i,inputImg.getHeight(),inputImg.getWidth(),outputImg,i,outputImg.getHeight(),outputImg.getWidth(),filter);break;}}}  }
class C{  public static <T>UnboundedSource<T,UnboundedSource.CheckpointMark> of(SourceFunction<T> flinkSource){  return new UnboundedFlinkSource<>(flinkSource);}  }
class C{  private int[] makeReorderedBuffer(int colFirst,int lastValue,int[] lastExpansion,boolean forward){  int[] result;  int firstValue=ordering.getUnicodeOrder(colFirst);  if (firstValue >= RuleBasedCollator.CONTRACTCHARINDEX) {    firstValue=forward ? nextContractChar(colFirst) : prevContractChar(colFirst);  }  int[] firstExpansion=null;  if (firstValue >= RuleBasedCollator.EXPANDCHARINDEX) {    firstExpansion=ordering.getExpandValueList(firstValue);  }  if (!forward) {    int temp1=firstValue;    firstValue=lastValue;    lastValue=temp1;    int[] temp2=firstExpansion;    firstExpansion=lastExpansion;    lastExpansion=temp2;  }  if (firstExpansion == null && lastExpansion == null) {    result=new int[2];    result[0]=firstValue;    result[1]=lastValue;  } else {    int firstLength=firstExpansion == null ? 1 : firstExpansion.length;    int lastLength=lastExpansion == null ? 1 : lastExpansion.length;    result=new int[firstLength + lastLength];    if (firstExpansion == null) {      result[0]=firstValue;    } else {      System.arraycopy(firstExpansion,0,result,0,firstLength);    }    if (lastExpansion == null) {      result[firstLength]=lastValue;    } else {      System.arraycopy(lastExpansion,0,result,firstLength,lastLength);    }  }  return result;}  }
class C{  public long doIdleTimeout(long now,long timeoutNanos){  if (shouldDestroy())   return 0;synchronized (this) {    if (isActive()) {      return timeoutNanos;    } else {      long idleRemaining=remainingIdle(now,timeoutNanos);      if (idleRemaining <= 0) {        if (setShouldDestroy()) {          return -1;        } else {          return 0;        }      } else {        return idleRemaining;      }    }  }}  }
class C{  protected AbstractStreamNormalization(){  super();}  }
class C{  public static int magnitude(long v){  return Long.SIZE - Long.numberOfLeadingZeros(v);}  }
class C{  public void runTest() throws Throwable {  Document newNode;  String newValue;  newNode=(Document)load("hc_staff",true);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  public static BigdataSailRemoteRepository connect(final String sparqlEndpointURL){  return new RemoteRepositoryManager().getRepositoryForURL(sparqlEndpointURL).getBigdataSailRemoteRepository();}  }
class C{  protected KeyManagerFactory(KeyManagerFactorySpi factorySpi,Provider provider,String algorithm){  this.factorySpi=factorySpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  @Override public void start(BundleContext context) throws Exception {  this.fileProvider=new FilePreferencesProvider();  PreferencesAPI.addPreferencesProvider(fileProvider);}  }
class C{  private void generateMatrix(){  final int dwidth=mDrawable.getIntrinsicWidth();  final int dheight=mDrawable.getIntrinsicHeight();  final int vwidth=mAllowCrop ? sCropSize : getWidth();  final int vheight=mAllowCrop ? sCropSize : getHeight();  final boolean fits=(dwidth < 0 || vwidth == dwidth) && (dheight < 0 || vheight == dheight);  if (fits && !mAllowCrop) {    mMatrix.reset();  } else {    mTempSrc.set(0,0,dwidth,dheight);    if (mAllowCrop) {      mTempDst.set(mCropRect);    } else {      mTempDst.set(0,0,vwidth,vheight);    }    RectF scaledDestination=new RectF((vwidth / 2) - (dwidth * mMaxInitialScaleFactor / 2),(vheight / 2) - (dheight * mMaxInitialScaleFactor / 2),(vwidth / 2) + (dwidth * mMaxInitialScaleFactor / 2),(vheight / 2) + (dheight * mMaxInitialScaleFactor / 2));    if (mTempDst.contains(scaledDestination)) {      mMatrix.setRectToRect(mTempSrc,scaledDestination,Matrix.ScaleToFit.CENTER);    } else {      mMatrix.setRectToRect(mTempSrc,mTempDst,Matrix.ScaleToFit.CENTER);    }  }  mOriginalMatrix.set(mMatrix);}  }
class C{  public WaggingNormal(Classifier weakLearner,int interations){  super(new Normal(1,2),weakLearner,interations);}  }
class C{  @HLEFunction(nid=0x31BCD7E0,version=150) public int sceMp4TrackSampleBufPut(int mp4,TPointer trackAddr,int samples){  SceMp4TrackSampleBuf track=new SceMp4TrackSampleBuf();  track.read(trackAddr);  readHeaders(track,trackAddr);  if (samples > 0) {    SceKernelThreadInfo currentThread=Modules.ThreadManForUserModule.getCurrentThread();    Modules.ThreadManForUserModule.pushActionForThread(currentThread,new StartBufferPut(track,trackAddr,samples,currentThread));  }  return 0;}  }
class C{  public static ReilInstruction createBisz(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize thirdSize,final String thirdValue){  return createBinaryInstruction(ReilHelpers.OPCODE_BISZ,new CAddress(offset),firstSize,firstValue,thirdSize,thirdValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.806 -0500",hash_original_method="BDADB3549C258921F869033B8AFE985D",hash_generated_method="3B94C02D2A920D43CCB9AED3E5CC456E") public Result timeToValues(float[] values){  return timeToValues((int)SystemClock.uptimeMillis(),values);}  }
class C{  public static IPackageFragmentRoot addSourceContainerWithImport(IJavaProject jproject,String containerName,File zipFile,String containerEncoding,IPath[] exclusionFilters) throws InvocationTargetException, CoreException, IOException {  ZipFile file=new ZipFile(zipFile);  try {    IPackageFragmentRoot root=addSourceContainer(jproject,containerName,exclusionFilters);    ((IContainer)root.getCorrespondingResource()).setDefaultCharset(containerEncoding,null);    importFilesFromZip(file,root.getPath(),null);    return root;  }  finally {    if (file != null) {      file.close();    }  }}  }
class C{  boolean add(final IBuildConfiguration config){  return referencedBuildConfigs.add(config);}  }
class C{  public void removeConnection(int connectionId){synchronized (sConnectionCache) {    sConnectionCache.remove(connectionId);  }}  }
class C{  public void verify(){  throw new NotImplementedException();}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (e.getValueIsAdjusting()) {    return;  }  if (atm.isResorting)   return;  ListSelectionModel lsm=(ListSelectionModel)e.getSource();  if (lsm.isSelectionEmpty()) {    atm.handleNoSelection();  } else {    int sel=lsm.getMinSelectionIndex();    if (sel < atm.getSize())     atm.handleSelection(sel);  }}  }
class C{  @Deprecated public static Response publishInstallAndWaitForResponse(final Context context,final String applicationId){  return publishInstallAndWaitForResponse(context,applicationId,false);}  }
class C{  public static void migrate(final Switchboard sb,final double fromVer,final double toVer){  if (fromVer < toVer) {    if (fromVer < TAGDB_WITH_TAGHASH) {      migrateBookmarkTagsDB(sb);    }    if (fromVer < NEW_OVERLAYS) {      migrateDefaultFiles(sb);    }    ConcurrentLog.info("MIGRATION","Migrating from " + String.format(Locale.US,"%.8f",fromVer) + " to "+ String.format(Locale.US,"%.8f",toVer));    if (fromVer < 0.47d) {      presetPasswords(sb);      migrateSwitchConfigSettings(sb);      migrateWorkFiles(sb);    }  }  installSkins(sb);  if (sb.getConfigBool("server.https",false)) {    int sslport=8443;    if (fromVer > SSLPORT_CFG) {      sslport=sb.getConfigInt("port.ssl",8443);    }    if (TimeoutRequest.ping("127.0.0.1",sslport,3000)) {      sb.setConfig("server.https",false);      ConcurrentLog.config("MIGRATION","disabled https support (reason: port already used)");    }  }}  }
class C{  public static int hash32(final byte[] data,int length,int seed){  final int m=0x5bd1e995;  final int r=24;  int h=seed ^ length;  int length4=length / 4;  for (int i=0; i < length4; i++) {    final int i4=i * 4;    int k=(data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16)+ ((data[i4 + 3] & 0xff) << 24);    k*=m;    k^=k >>> r;    k*=m;    h*=m;    h^=k;  }switch (length % 4) {case 3:    h^=(data[(length & ~3) + 2] & 0xff) << 16;case 2:  h^=(data[(length & ~3) + 1] & 0xff) << 8;case 1:h^=(data[length & ~3] & 0xff);h*=m;}h^=h >>> 13;h*=m;h^=h >>> 15;return h;}  }
class C{  public ConfigurationException(){  super();}  }
class C{  public FrameState duplicateModified(StructuredGraph graph,int newBci,boolean newRethrowException,boolean newDuringCall,JavaKind popKind,JavaKind[] pushedSlotKinds,ValueNode[] pushedValues){  ArrayList<ValueNode> copy;  if (newRethrowException && !rethrowException && popKind == JavaKind.Void) {    assert popKind == JavaKind.Void;    copy=new ArrayList<>(values.subList(0,localsSize));  } else {    copy=new ArrayList<>(values.subList(0,localsSize + stackSize));    if (popKind != JavaKind.Void) {      if (stackAt(stackSize() - 1) == null) {        copy.remove(copy.size() - 1);      }      ValueNode lastSlot=copy.get(copy.size() - 1);      assert lastSlot.getStackKind() == popKind.getStackKind();      copy.remove(copy.size() - 1);    }  }  if (pushedValues != null) {    assert pushedSlotKinds.length == pushedValues.length;    for (int i=0; i < pushedValues.length; i++) {      copy.add(pushedValues[i]);      if (pushedSlotKinds[i].needsTwoSlots()) {        copy.add(null);      }    }  }  int newStackSize=copy.size() - localsSize;  copy.addAll(values.subList(localsSize + stackSize,values.size()));  assert checkStackDepth(bci,stackSize,duringCall,rethrowException,newBci,newStackSize,newDuringCall,newRethrowException);  return graph.add(new FrameState(outerFrameState(),code,newBci,copy,localsSize,newStackSize,newRethrowException,newDuringCall,monitorIds,virtualObjectMappings));}  }
class C{  private static String normalizeFileName(String fileName,boolean preserveLeadingSlashes){  String osname=System.getProperty("os.name").toLowerCase(Locale.ENGLISH);  if (osname != null) {    if (osname.startsWith("windows")) {      if (fileName.length() > 2) {        char ch1=fileName.charAt(0);        char ch2=fileName.charAt(1);        if (ch2 == ':' && ((ch1 >= 'a' && ch1 <= 'z') || (ch1 >= 'A' && ch1 <= 'Z'))) {          fileName=fileName.substring(2);        }      }    } else     if (osname.indexOf("netware") > -1) {      int colon=fileName.indexOf(':');      if (colon != -1) {        fileName=fileName.substring(colon + 1);      }    }  }  fileName=fileName.replace(File.separatorChar,'/');  while (!preserveLeadingSlashes && fileName.startsWith("/")) {    fileName=fileName.substring(1);  }  return fileName;}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  if (logger.isDebugEnabled()) {    logger.debug("Checking secure context token: " + SecurityContextHolder.getContext().getAuthentication());  }  Authentication currentUser=SecurityContextHolder.getContext().getAuthentication();  if (currentUser == null) {    doAuthenticate((HttpServletRequest)request,(HttpServletResponse)response);  }  chain.doFilter(request,response);}  }
class C{  public CActionExpandSelectionDown(final ZyGraph graph){  super("Expand Selection Down");  m_graph=graph;}  }
class C{  public boolean hasMailClass(){  return getMailClass() != null;}  }
class C{  public static void registerCnd(Repository repository,String workspace,String username,String password){  try {    Session session;    if (username == null) {      session=repository.login(workspace);    } else {      char pass[];      if (password == null) {        pass=new char[0];      } else {        pass=password.toCharArray();      }      session=repository.login(new SimpleCredentials(username,pass),workspace);    }    registerCnd(session);    session.logout();  } catch (  Exception e) {    throw new RuntimeException("Unable to register cnd file",e);  }}  }
class C{  public static int compare(double a,double b){  if (a < b)   return -1;  if (a > b)   return 1;  if (Double.isNaN(a)) {    if (Double.isNaN(b))     return 0;    return -1;  }  if (Double.isNaN(b))   return 1;  return 0;}  }
class C{  public static boolean isInside(Geo v1,Geo v2,double radius,Geo p1,Geo p2){  return v1.isInside(v2,radius,p1) || v1.isInside(v2,radius,p2) || p1.isInside(p2,radius,v1)|| p1.isInside(p2,radius,v2);}  }
class C{  public void onScreenChange(int currentScreen,int lastScreen){  ImageView[] points=platformGridView.points;  for (int i=0; i < points.length; i++) {    points[i].setImageBitmap(platformGridView.grayPoint);  }  points[currentScreen].setImageBitmap(platformGridView.bluePoint);}  }
class C{  public PullParams withTag(String tag){  this.tag=tag;  return this;}  }
class C{  void mult(Matrix3D rhs){  float lxx=xx * rhs.xx + yx * rhs.xy + zx * rhs.xz;  float lxy=xy * rhs.xx + yy * rhs.xy + zy * rhs.xz;  float lxz=xz * rhs.xx + yz * rhs.xy + zz * rhs.xz;  float lxo=xo * rhs.xx + yo * rhs.xy + zo * rhs.xz + rhs.xo;  float lyx=xx * rhs.yx + yx * rhs.yy + zx * rhs.yz;  float lyy=xy * rhs.yx + yy * rhs.yy + zy * rhs.yz;  float lyz=xz * rhs.yx + yz * rhs.yy + zz * rhs.yz;  float lyo=xo * rhs.yx + yo * rhs.yy + zo * rhs.yz + rhs.yo;  float lzx=xx * rhs.zx + yx * rhs.zy + zx * rhs.zz;  float lzy=xy * rhs.zx + yy * rhs.zy + zy * rhs.zz;  float lzz=xz * rhs.zx + yz * rhs.zy + zz * rhs.zz;  float lzo=xo * rhs.zx + yo * rhs.zy + zo * rhs.zz + rhs.zo;  xx=lxx;  xy=lxy;  xz=lxz;  xo=lxo;  yx=lyx;  yy=lyy;  yz=lyz;  yo=lyo;  zx=lzx;  zy=lzy;  zz=lzz;  zo=lzo;}  }
class C{  private MPPProductPlanning importProductPlanning(X_I_ProductPlanning ipp){  try {    MPPProductPlanning pp=null;    if (ipp.getPP_Product_Planning_ID() > 0)     pp=new MPPProductPlanning(getCtx(),ipp.getPP_Product_Planning_ID(),get_TrxName()); else {      pp=MPPProductPlanning.get(getCtx(),ipp.getAD_Client_ID(),ipp.getAD_Org_ID(),ipp.getM_Warehouse_ID(),ipp.getS_Resource_ID(),ipp.getM_Product_ID(),get_TrxName());    }    if (pp == null || pp.get_ID() <= 0) {      pp=new MPPProductPlanning(Env.getCtx(),0,get_TrxName());      pp.setAD_Org_ID(ipp.getAD_Org_ID());      pp.setM_Product_ID(ipp.getM_Product_ID());      pp.setS_Resource_ID(ipp.getS_Resource_ID());      pp.setM_Warehouse_ID(ipp.getM_Warehouse_ID());      pp.setIsRequiredDRP(false);      pp.setIsRequiredMRP(false);    }    fillValue(pp,ipp);    if (ipp.getC_BPartner_ID() > 0 && ipp.getVendorProductNo() != null) {      importPurchaseProductPlanning(ipp);    }    pp.saveEx();    isImported=true;    return pp;  } catch (  Exception e) {    ipp.setI_ErrorMsg(e.getMessage());    isImported=false;    return null;  }}  }
class C{  public QueryStringQueryBuilder phraseSlop(int phraseSlop){  this.phraseSlop=phraseSlop;  return this;}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  public void init() throws ServletException {  super.init();  bookUseCase=new BookUseCase();  factory=TransformerFactory.newInstance();}  }
class C{  public void startScan(int callingUid){  sendMessage(CMD_START_SCAN,callingUid);}  }
class C{  public TableViewerColumnBuilder cellLabelProvider(CellLabelProvider labelProvider){  this.cellLabelProvider=labelProvider;  return this;}  }
class C{  public ServerProxyConnectionRefused(){  requestFileName="getstate.query";}  }
class C{  public static AcousticEchoCanceler create(int audioSession){  AcousticEchoCanceler aec=null;  try {    aec=new AcousticEchoCanceler(audioSession);  } catch (  IllegalArgumentException e) {    Log.w(TAG,"not implemented on this device" + aec);  }catch (  UnsupportedOperationException e) {    Log.w(TAG,"not enough resources");  }catch (  RuntimeException e) {    Log.w(TAG,"not enough memory");  } finally {    return aec;  }}  }
class C{  public final void collapse(){  double errorsOfSubtree;  double errorsOfTree;  int i;  if (!m_isLeaf) {    errorsOfSubtree=getTrainingErrors();    errorsOfTree=localModel().distribution().numIncorrect();    if (errorsOfSubtree >= errorsOfTree - 1E-3) {      m_sons=null;      m_isLeaf=true;      m_localModel=new NoSplit(localModel().distribution());    } else     for (i=0; i < m_sons.length; i++)     son(i).collapse();  }}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (getByte(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  public static Map<String,Object> createOrder(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Security security=ctx.getSecurity();  List<GenericValue> toBeStored=new LinkedList<GenericValue>();  Locale locale=(Locale)context.get("locale");  Map<String,Object> successResult=ServiceUtil.returnSuccess();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderTypeId=(String)context.get("orderTypeId");  String partyId=(String)context.get("partyId");  String billFromVendorPartyId=(String)context.get("billFromVendorPartyId");  Map<String,Object> resultSecurity=new HashMap<String,Object>();  boolean hasPermission=OrderServices.hasPermission(orderTypeId,partyId,userLogin,"CREATE",security);  if (!hasPermission) {    partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,resultSecurity,"ORDERMGR","_CREATE");    if (resultSecurity.size() > 0) {      return resultSecurity;    }  }  String productStoreId=(String)context.get("productStoreId");  GenericValue productStore=null;  if ((orderTypeId.equals("SALES_ORDER")) && (UtilValidate.isNotEmpty(productStoreId))) {    try {      productStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",productStoreId).cache().queryOne();    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotFindProductStoreWithID",UtilMisc.toMap("productStoreId",productStoreId),locale) + e.toString());    }  }  boolean isImmediatelyFulfilled=false;  if (productStore != null) {    isImmediatelyFulfilled="Y".equals(productStore.getString("isImmediatelyFulfilled"));  }  successResult.put("orderTypeId",orderTypeId);  GenericValue orderType=null;  try {    orderType=EntityQuery.use(delegator).from("OrderType").where("orderTypeId",orderTypeId).cache().queryOne();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorOrderTypeLookupFailed",locale) + e.toString());  }  if (orderType == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorInvalidOrderTypeWithID",UtilMisc.toMap("orderTypeId",orderTypeId),locale));  }  List<GenericValue> orderItems=UtilGenerics.checkList(context.get("orderItems"));  if (orderItems.size() < 1) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"items.none",locale));  }  List<GenericValue> orderAdjustments=UtilGenerics.checkList(context.get("orderAdjustments"));  List<GenericValue> orderItemShipGroupInfo=UtilGenerics.checkList(context.get("orderItemShipGroupInfo"));  List<GenericValue> orderItemPriceInfo=UtilGenerics.checkList(context.get("orderItemPriceInfos"));  List<String> errorMessages=FastList.newInstance();  Map<String,BigDecimal> normalizedItemQuantities=FastMap.newInstance();  Map<String,String> normalizedItemNames=FastMap.newInstance();  Map<String,GenericValue> itemValuesBySeqId=FastMap.newInstance();  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  for (  GenericValue orderItem : orderItems) {    itemValuesBySeqId.put(orderItem.getString("orderItemSeqId"),orderItem);    String currentProductId=orderItem.getString("productId");    if (currentProductId != null) {      if (normalizedItemQuantities.get(currentProductId) == null) {        normalizedItemQuantities.put(currentProductId,orderItem.getBigDecimal("quantity"));        normalizedItemNames.put(currentProductId,orderItem.getString("itemDescription"));      } else {        BigDecimal currentQuantity=normalizedItemQuantities.get(currentProductId);        normalizedItemQuantities.put(currentProductId,currentQuantity.add(orderItem.getBigDecimal("quantity")));      }      try {        dispatcher.runSync("countProductQuantityOrdered",UtilMisc.<String,Object>toMap("productId",currentProductId,"quantity",orderItem.getBigDecimal("quantity"),"userLogin",userLogin));      } catch (      GenericServiceException e1) {        Debug.logError(e1,"Error calling countProductQuantityOrdered service",module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCallingCountProductQuantityOrderedService",locale) + e1.toString());      }    }  }  if (!"PURCHASE_ORDER".equals(orderTypeId) && productStoreId == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorTheProductStoreIdCanOnlyBeNullForPurchaseOrders",locale));  }  Timestamp orderDate=(Timestamp)context.get("orderDate");  for (  String currentProductId : normalizedItemQuantities.keySet()) {    BigDecimal currentQuantity=normalizedItemQuantities.get(currentProductId);    String itemName=normalizedItemNames.get(currentProductId);    GenericValue product=null;    try {      product=EntityQuery.use(delegator).from("Product").where("productId",currentProductId).cache().queryOne();    } catch (    GenericEntityException e) {      String errMsg=UtilProperties.getMessage(resource_error,"product.not_found",new Object[]{currentProductId},locale);      Debug.logError(e,errMsg,module);      errorMessages.add(errMsg);      continue;    }    if (product == null) {      String errMsg=UtilProperties.getMessage(resource_error,"product.not_found",new Object[]{currentProductId},locale);      Debug.logError(errMsg,module);      errorMessages.add(errMsg);      continue;    }    if ("SALES_ORDER".equals(orderTypeId)) {      if (product.get("introductionDate") != null && nowTimestamp.before(product.getTimestamp("introductionDate"))) {        String excMsg=UtilProperties.getMessage(resource_error,"product.not_yet_for_sale",new Object[]{getProductName(product,itemName),product.getString("productId")},locale);        Debug.logWarning(excMsg,module);        errorMessages.add(excMsg);        continue;      }    }    if ("SALES_ORDER".equals(orderTypeId)) {      boolean salesDiscontinuationFlag=false;      if (orderDate != null && product.get("salesDiscontinuationDate") != null) {        salesDiscontinuationFlag=orderDate.after(product.getTimestamp("salesDiscontinuationDate")) && nowTimestamp.after(product.getTimestamp("salesDiscontinuationDate"));      } else       if (product.get("salesDiscontinuationDate") != null) {        salesDiscontinuationFlag=nowTimestamp.after(product.getTimestamp("salesDiscontinuationDate"));      }      if (salesDiscontinuationFlag) {        String excMsg=UtilProperties.getMessage(resource_error,"product.no_longer_for_sale",new Object[]{getProductName(product,itemName),product.getString("productId")},locale);        Debug.logWarning(excMsg,module);        errorMessages.add(excMsg);        continue;      }    }    if ("SALES_ORDER".equals(orderTypeId)) {      try {        Map<String,Object> invReqResult=dispatcher.runSync("isStoreInventoryAvailableOrNotRequired",UtilMisc.toMap("productStoreId",productStoreId,"productId",product.get("productId"),"product",product,"quantity",currentQuantity));        if (ServiceUtil.isError(invReqResult)) {          errorMessages.add((String)invReqResult.get(ModelService.ERROR_MESSAGE));          List<String> errMsgList=UtilGenerics.checkList(invReqResult.get(ModelService.ERROR_MESSAGE_LIST));          errorMessages.addAll(errMsgList);        } else         if (!"Y".equals(invReqResult.get("availableOrNotRequired"))) {          String invErrMsg=UtilProperties.getMessage(resource_error,"product.out_of_stock",new Object[]{getProductName(product,itemName),currentProductId},locale);          Debug.logWarning(invErrMsg,module);          errorMessages.add(invErrMsg);          continue;        }      } catch (      GenericServiceException e) {        String errMsg="Fatal error calling inventory checking services: " + e.toString();        Debug.logError(e,errMsg,module);        errorMessages.add(errMsg);      }    }  }  List<GenericValue> workEfforts=UtilGenerics.checkList(context.get("workEfforts"));  for (  GenericValue orderItem : orderItems) {    if ("RENTAL_ORDER_ITEM".equals(orderItem.getString("orderItemTypeId"))) {      if (UtilValidate.isEmpty(workEfforts)) {        String errMsg="Work Efforts missing for ordertype RENTAL_ORDER_ITEM " + "Product: " + orderItem.getString("productId");        Debug.logError(errMsg,module);        errorMessages.add(errMsg);        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderRentalOrderItems",locale));      }      for (      GenericValue workEffort : workEfforts) {        if (workEffort.getString("workEffortId").equals(orderItem.getString("orderItemSeqId"))) {          List<GenericValue> selFixedAssetProduct=null;          try {            selFixedAssetProduct=EntityQuery.use(delegator).from("FixedAssetProduct").where("productId",orderItem.getString("productId"),"fixedAssetProductTypeId","FAPT_USE").filterByDate(nowTimestamp,"fromDate","thruDate").queryList();          } catch (          GenericEntityException e) {            String excMsg="Could not find related Fixed Asset for the product: " + orderItem.getString("productId");            Debug.logError(excMsg,module);            errorMessages.add(excMsg);            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCouldNotFindRelatedFixedAssetForTheProduct",UtilMisc.toMap("productId",orderItem.getString("productId")),locale));          }          if (UtilValidate.isNotEmpty(selFixedAssetProduct)) {            Iterator<GenericValue> firstOne=selFixedAssetProduct.iterator();            if (firstOne.hasNext()) {              GenericValue fixedAssetProduct=delegator.makeValue("FixedAssetProduct");              fixedAssetProduct=firstOne.next();              workEffort.set("fixedAssetId",fixedAssetProduct.get("fixedAssetId"));              workEffort.set("quantityToProduce",orderItem.get("quantity"));              workEffort.set("createdByUserLogin",userLogin.get("userLoginId"));            }          }          break;        }      }    }  }  if (errorMessages.size() > 0) {    return ServiceUtil.returnError(errorMessages);  }  String initialStatus="ORDER_CREATED";  successResult.put("statusId",initialStatus);  String orderId=(String)context.get("orderId");  String orgPartyId=null;  if (productStore != null) {    orgPartyId=productStore.getString("payToPartyId");  } else   if (billFromVendorPartyId != null) {    orgPartyId=billFromVendorPartyId;  }  if (UtilValidate.isNotEmpty(orgPartyId)) {    Map<String,Object> getNextOrderIdContext=FastMap.newInstance();    getNextOrderIdContext.putAll(context);    getNextOrderIdContext.put("partyId",orgPartyId);    getNextOrderIdContext.put("userLogin",userLogin);    if ((orderTypeId.equals("SALES_ORDER")) || (productStoreId != null)) {      getNextOrderIdContext.put("productStoreId",productStoreId);    }    if (UtilValidate.isEmpty(orderId)) {      try {        getNextOrderIdContext=ctx.makeValidContext("getNextOrderId","IN",getNextOrderIdContext);        Map<String,Object> getNextOrderIdResult=dispatcher.runSync("getNextOrderId",getNextOrderIdContext);        if (ServiceUtil.isError(getNextOrderIdResult)) {          String errMsg=UtilProperties.getMessage(resource_error,"OrderErrorGettingNextOrderIdWhileCreatingOrder",locale);          return ServiceUtil.returnError(errMsg,null,null,getNextOrderIdResult);        }        orderId=(String)getNextOrderIdResult.get("orderId");      } catch (      GenericServiceException e) {        String errMsg=UtilProperties.getMessage(resource_error,"OrderCaughtGenericServiceExceptionWhileGettingOrderId",locale);        Debug.logError(e,errMsg,module);        return ServiceUtil.returnError(errMsg);      }    }  }  if (UtilValidate.isEmpty(orderId)) {    orderId=delegator.getNextSeqId("OrderHeader");  }  String billingAccountId=(String)context.get("billingAccountId");  if (orderDate == null) {    orderDate=nowTimestamp;  }  Map<String,Object> orderHeaderMap=UtilMisc.<String,Object>toMap("orderId",orderId,"orderTypeId",orderTypeId,"orderDate",orderDate,"entryDate",nowTimestamp,"statusId",initialStatus,"billingAccountId",billingAccountId);  orderHeaderMap.put("orderName",context.get("orderName"));  if (isImmediatelyFulfilled) {    orderHeaderMap.put("needsInventoryIssuance","Y");  }  GenericValue orderHeader=delegator.makeValue("OrderHeader",orderHeaderMap);  String salesChannelEnumId=(String)context.get("salesChannelEnumId");  if ((salesChannelEnumId == null) || salesChannelEnumId.equals("UNKNWN_SALES_CHANNEL")) {    if (orderTypeId.equals("SALES_ORDER") && (productStore != null)) {      salesChannelEnumId=productStore.getString("defaultSalesChannelEnumId");    }    if (salesChannelEnumId == null) {      salesChannelEnumId="UNKNWN_SALES_CHANNEL";    }  }  orderHeader.set("salesChannelEnumId",salesChannelEnumId);  if (context.get("currencyUom") != null) {    orderHeader.set("currencyUom",context.get("currencyUom"));  }  if (context.get("firstAttemptOrderId") != null) {    orderHeader.set("firstAttemptOrderId",context.get("firstAttemptOrderId"));  }  if (context.get("grandTotal") != null) {    orderHeader.set("grandTotal",context.get("grandTotal"));  }  if (UtilValidate.isNotEmpty(context.get("visitId"))) {    orderHeader.set("visitId",context.get("visitId"));  }  if (UtilValidate.isNotEmpty(context.get("internalCode"))) {    orderHeader.set("internalCode",context.get("internalCode"));  }  if (UtilValidate.isNotEmpty(context.get("externalId"))) {    orderHeader.set("externalId",context.get("externalId"));  }  if (UtilValidate.isNotEmpty(context.get("originFacilityId"))) {    orderHeader.set("originFacilityId",context.get("originFacilityId"));  }  if (UtilValidate.isNotEmpty(context.get("productStoreId"))) {    orderHeader.set("productStoreId",context.get("productStoreId"));  }  if (UtilValidate.isNotEmpty(context.get("transactionId"))) {    orderHeader.set("transactionId",context.get("transactionId"));  }  if (UtilValidate.isNotEmpty(context.get("terminalId"))) {    orderHeader.set("terminalId",context.get("terminalId"));  }  if (UtilValidate.isNotEmpty(context.get("autoOrderShoppingListId"))) {    orderHeader.set("autoOrderShoppingListId",context.get("autoOrderShoppingListId"));  }  if (UtilValidate.isNotEmpty(context.get("webSiteId"))) {    orderHeader.set("webSiteId",context.get("webSiteId"));  }  if (userLogin != null && userLogin.get("userLoginId") != null) {    orderHeader.set("createdBy",userLogin.getString("userLoginId"));  }  String invoicePerShipment=EntityUtilProperties.getPropertyValue("AccountingConfig","create.invoice.per.shipment",delegator);  if (UtilValidate.isNotEmpty(invoicePerShipment)) {    orderHeader.set("invoicePerShipment",invoicePerShipment);  }  try {    delegator.create(orderHeader);  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot create OrderHeader entity; problems with insert",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderOrderCreationFailedPleaseNotifyCustomerService",locale));  }  String orderStatusSeqId=delegator.getNextSeqId("OrderStatus");  GenericValue orderStatus=delegator.makeValue("OrderStatus",UtilMisc.toMap("orderStatusId",orderStatusSeqId));  orderStatus.set("orderId",orderId);  orderStatus.set("statusId",orderHeader.getString("statusId"));  orderStatus.set("statusDatetime",nowTimestamp);  orderStatus.set("statusUserLogin",userLogin.getString("userLoginId"));  toBeStored.add(orderStatus);  List<GenericValue> orderItemGroups=UtilGenerics.checkList(context.get("orderItemGroups"));  if (UtilValidate.isNotEmpty(orderItemGroups)) {    for (    GenericValue orderItemGroup : orderItemGroups) {      orderItemGroup.set("orderId",orderId);      toBeStored.add(orderItemGroup);    }  }  for (  GenericValue orderItem : orderItems) {    orderItem.set("orderId",orderId);    toBeStored.add(orderItem);    String itemStatusId=delegator.getNextSeqId("OrderStatus");    GenericValue itemStatus=delegator.makeValue("OrderStatus",UtilMisc.toMap("orderStatusId",itemStatusId));    itemStatus.put("statusId",orderItem.get("statusId"));    itemStatus.put("orderId",orderId);    itemStatus.put("orderItemSeqId",orderItem.get("orderItemSeqId"));    itemStatus.put("statusDatetime",nowTimestamp);    itemStatus.set("statusUserLogin",userLogin.getString("userLoginId"));    toBeStored.add(itemStatus);  }  List<GenericValue> orderAttributes=UtilGenerics.checkList(context.get("orderAttributes"));  if (UtilValidate.isNotEmpty(orderAttributes)) {    for (    GenericValue oatt : orderAttributes) {      oatt.set("orderId",orderId);      toBeStored.add(oatt);    }  }  List<GenericValue> orderItemAttributes=UtilGenerics.checkList(context.get("orderItemAttributes"));  if (UtilValidate.isNotEmpty(orderItemAttributes)) {    for (    GenericValue oiatt : orderItemAttributes) {      oiatt.set("orderId",orderId);      toBeStored.add(oiatt);    }  }  List<String> orderInternalNotes=UtilGenerics.checkList(context.get("orderInternalNotes"));  if (UtilValidate.isNotEmpty(orderInternalNotes)) {    for (    String orderInternalNote : orderInternalNotes) {      try {        Map<String,Object> noteOutputMap=dispatcher.runSync("createOrderNote",UtilMisc.<String,Object>toMap("orderId",orderId,"internalNote","Y","note",orderInternalNote,"userLogin",userLogin));        if (ServiceUtil.isError(noteOutputMap)) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",""),locale),null,null,noteOutputMap);        }      } catch (      GenericServiceException e) {        Debug.logError(e,"Error creating internal notes while creating order: " + e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",e.toString()),locale));      }    }  }  List<String> orderNotes=UtilGenerics.checkList(context.get("orderNotes"));  if (UtilValidate.isNotEmpty(orderNotes)) {    for (    String orderNote : orderNotes) {      try {        Map<String,Object> noteOutputMap=dispatcher.runSync("createOrderNote",UtilMisc.<String,Object>toMap("orderId",orderId,"internalNote","N","note",orderNote,"userLogin",userLogin));        if (ServiceUtil.isError(noteOutputMap)) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",""),locale),null,null,noteOutputMap);        }      } catch (      GenericServiceException e) {        Debug.logError(e,"Error creating notes while creating order: " + e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",e.toString()),locale));      }    }  }  if (UtilValidate.isNotEmpty(workEfforts)) {    List<GenericValue> tempList=new LinkedList<GenericValue>();    for (    GenericValue workEffort : workEfforts) {      GenericValue workOrderItemFulfillment=delegator.makeValue("WorkOrderItemFulfillment");      GenericValue fixedAsset=null;      Debug.logInfo("find the fixedAsset",module);      try {        fixedAsset=EntityQuery.use(delegator).from("FixedAsset").where("fixedAssetId",workEffort.get("fixedAssetId")).queryOne();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderFixedAssetNotFoundFixedAssetId",UtilMisc.toMap("fixedAssetId",workEffort.get("fixedAssetId")),locale));      }      if (fixedAsset == null) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderFixedAssetNotFoundFixedAssetId",UtilMisc.toMap("fixedAssetId",workEffort.get("fixedAssetId")),locale));      }      Debug.logInfo("find the techdatacalendar",module);      GenericValue techDataCalendar=null;      try {        techDataCalendar=fixedAsset.getRelatedOne("TechDataCalendar",false);      } catch (      GenericEntityException e) {        Debug.logInfo("TechData calendar does not exist yet so create for fixedAsset: " + fixedAsset.get("fixedAssetId"),module);      }      if (techDataCalendar == null) {        for (        GenericValue currentValue : tempList) {          if ("FixedAsset".equals(currentValue.getEntityName()) && currentValue.getString("fixedAssetId").equals(workEffort.getString("fixedAssetId"))) {            fixedAsset=currentValue;            break;          }        }        for (        GenericValue currentValue : tempList) {          if ("TechDataCalendar".equals(currentValue.getEntityName()) && currentValue.getString("calendarId").equals(fixedAsset.getString("calendarId"))) {            techDataCalendar=currentValue;            break;          }        }      }      if (techDataCalendar == null) {        techDataCalendar=delegator.makeValue("TechDataCalendar");        Debug.logInfo("create techdata calendar because it does not exist",module);        String calendarId=delegator.getNextSeqId("TechDataCalendar");        techDataCalendar.set("calendarId",calendarId);        tempList.add(techDataCalendar);        Debug.logInfo("update fixed Asset",module);        fixedAsset.set("calendarId",calendarId);        tempList.add(fixedAsset);      }      workOrderItemFulfillment.set("orderItemSeqId",workEffort.get("workEffortId").toString());      String workEffortId=delegator.getNextSeqId("WorkEffort");      workEffort.set("workEffortId",workEffortId);      workEffort.set("workEffortTypeId","ASSET_USAGE");      workEffort.set("currentStatusId","_NA_");      toBeStored.add(workEffort);      workOrderItemFulfillment.set("workEffortId",workEffortId);      workOrderItemFulfillment.set("orderId",orderId);      toBeStored.add(workOrderItemFulfillment);      Timestamp estimatedStartDate=workEffort.getTimestamp("estimatedStartDate");      Timestamp estimatedCompletionDate=workEffort.getTimestamp("estimatedCompletionDate");      long dayCount=(estimatedCompletionDate.getTime() - estimatedStartDate.getTime()) / 86400000;      while (--dayCount >= 0) {        GenericValue techDataCalendarExcDay=null;        Timestamp exceptionDateStartTime=UtilDateTime.getDayStart(new Timestamp(estimatedStartDate.getTime()),(int)dayCount);        try {          techDataCalendarExcDay=EntityQuery.use(delegator).from("TechDataCalendarExcDay").where("calendarId",fixedAsset.get("calendarId"),"exceptionDateStartTime",exceptionDateStartTime).queryOne();        } catch (        GenericEntityException e) {          Debug.logInfo(" techData excday record not found so creating........",module);        }        if (techDataCalendarExcDay == null) {          for (          GenericValue currentValue : tempList) {            if ("TechDataCalendarExcDay".equals(currentValue.getEntityName()) && currentValue.getString("calendarId").equals(fixedAsset.getString("calendarId")) && currentValue.getTimestamp("exceptionDateStartTime").equals(exceptionDateStartTime)) {              techDataCalendarExcDay=currentValue;              break;            }          }        }        if (techDataCalendarExcDay == null) {          techDataCalendarExcDay=delegator.makeValue("TechDataCalendarExcDay");          techDataCalendarExcDay.set("calendarId",fixedAsset.get("calendarId"));          techDataCalendarExcDay.set("exceptionDateStartTime",exceptionDateStartTime);          techDataCalendarExcDay.set("usedCapacity",BigDecimal.ZERO);          techDataCalendarExcDay.set("exceptionCapacity",fixedAsset.getBigDecimal("productionCapacity"));        }        BigDecimal newUsedCapacity=techDataCalendarExcDay.getBigDecimal("usedCapacity").add(workEffort.getBigDecimal("quantityToProduce"));        if (fixedAsset.get("productionCapacity") != null) {          if (newUsedCapacity.compareTo(techDataCalendarExcDay.getBigDecimal("exceptionCapacity")) > 0) {            String errMsg="ERROR: fixed_Asset_sold_out AssetId: " + workEffort.get("fixedAssetId") + " on date: "+ techDataCalendarExcDay.getString("exceptionDateStartTime");            Debug.logError(errMsg,module);            errorMessages.add(errMsg);            continue;          }        }        techDataCalendarExcDay.set("usedCapacity",newUsedCapacity);        tempList.add(techDataCalendarExcDay);      }    }    if (tempList.size() > 0) {      toBeStored.addAll(tempList);    }  }  if (errorMessages.size() > 0) {    return ServiceUtil.returnError(errorMessages);  }  if (UtilValidate.isNotEmpty(orderAdjustments)) {    for (    GenericValue orderAdjustment : orderAdjustments) {      try {        orderAdjustment.set("orderAdjustmentId",delegator.getNextSeqId("OrderAdjustment"));      } catch (      IllegalArgumentException e) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotGetNextSequenceIdForOrderAdjustmentCannotCreateOrder",locale));      }      orderAdjustment.set("orderId",orderId);      orderAdjustment.set("createdDate",UtilDateTime.nowTimestamp());      orderAdjustment.set("createdByUserLogin",userLogin.getString("userLoginId"));      if (UtilValidate.isEmpty(orderAdjustment.get("orderItemSeqId"))) {        orderAdjustment.set("orderItemSeqId",DataModelConstants.SEQ_ID_NA);      }      if (UtilValidate.isEmpty(orderAdjustment.get("shipGroupSeqId"))) {        orderAdjustment.set("shipGroupSeqId",DataModelConstants.SEQ_ID_NA);      }      toBeStored.add(orderAdjustment);    }  }  List<GenericValue> orderContactMechs=UtilGenerics.checkList(context.get("orderContactMechs"));  if (UtilValidate.isNotEmpty(orderContactMechs)) {    for (    GenericValue ocm : orderContactMechs) {      ocm.set("orderId",orderId);      toBeStored.add(ocm);    }  }  List<GenericValue> orderItemContactMechs=UtilGenerics.checkList(context.get("orderItemContactMechs"));  if (UtilValidate.isNotEmpty(orderItemContactMechs)) {    for (    GenericValue oicm : orderItemContactMechs) {      oicm.set("orderId",orderId);      toBeStored.add(oicm);    }  }  List<String> dropShipGroupIds=FastList.newInstance();  if (UtilValidate.isNotEmpty(orderItemShipGroupInfo)) {    for (    GenericValue valueObj : orderItemShipGroupInfo) {      valueObj.set("orderId",orderId);      if ("OrderItemShipGroup".equals(valueObj.getEntityName())) {        if (valueObj.get("carrierRoleTypeId") == null) {          valueObj.set("carrierRoleTypeId","CARRIER");        }        if (!UtilValidate.isEmpty(valueObj.getString("supplierPartyId"))) {          dropShipGroupIds.add(valueObj.getString("shipGroupSeqId"));        }      } else       if ("OrderAdjustment".equals(valueObj.getEntityName())) {        if (UtilValidate.isEmpty(valueObj.get("orderItemSeqId"))) {          valueObj.set("orderItemSeqId",DataModelConstants.SEQ_ID_NA);        }        valueObj.set("orderAdjustmentId",delegator.getNextSeqId("OrderAdjustment"));        valueObj.set("createdDate",UtilDateTime.nowTimestamp());        valueObj.set("createdByUserLogin",userLogin.getString("userLoginId"));      }      toBeStored.add(valueObj);    }  }  Map<String,List<String>> additionalPartyRole=UtilGenerics.checkMap(context.get("orderAdditionalPartyRoleMap"));  if (additionalPartyRole != null) {    for (    Map.Entry<String,List<String>> entry : additionalPartyRole.entrySet()) {      String additionalRoleTypeId=entry.getKey();      List<String> parties=entry.getValue();      if (parties != null) {        for (        String additionalPartyId : parties) {          toBeStored.add(delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",additionalPartyId,"roleTypeId",additionalRoleTypeId)));          toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",additionalPartyId,"roleTypeId",additionalRoleTypeId)));        }      }    }  }  List<GenericValue> surveyResponses=UtilGenerics.checkList(context.get("orderItemSurveyResponses"));  if (UtilValidate.isNotEmpty(surveyResponses)) {    for (    GenericValue surveyResponse : surveyResponses) {      surveyResponse.set("orderId",orderId);      toBeStored.add(surveyResponse);    }  }  if (UtilValidate.isNotEmpty(orderItemPriceInfo)) {    for (    GenericValue oipi : orderItemPriceInfo) {      try {        oipi.set("orderItemPriceInfoId",delegator.getNextSeqId("OrderItemPriceInfo"));      } catch (      IllegalArgumentException e) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotGetNextSequenceIdForOrderItemPriceInfoCannotCreateOrder",locale));      }      oipi.set("orderId",orderId);      toBeStored.add(oipi);    }  }  List<GenericValue> orderItemAssociations=UtilGenerics.checkList(context.get("orderItemAssociations"));  if (UtilValidate.isNotEmpty(orderItemAssociations)) {    for (    GenericValue orderItemAssociation : orderItemAssociations) {      if (orderItemAssociation.get("toOrderId") == null) {        orderItemAssociation.set("toOrderId",orderId);      } else       if (orderItemAssociation.get("orderId") == null) {        orderItemAssociation.set("orderId",orderId);      }      toBeStored.add(orderItemAssociation);    }  }  List<GenericValue> orderProductPromoUses=UtilGenerics.checkList(context.get("orderProductPromoUses"));  if (UtilValidate.isNotEmpty(orderProductPromoUses)) {    for (    GenericValue productPromoUse : orderProductPromoUses) {      productPromoUse.set("orderId",orderId);      toBeStored.add(productPromoUse);    }  }  Set<String> orderProductPromoCodes=UtilGenerics.checkSet(context.get("orderProductPromoCodes"));  if (UtilValidate.isNotEmpty(orderProductPromoCodes)) {    for (    String productPromoCodeId : orderProductPromoCodes) {      GenericValue orderProductPromoCode=delegator.makeValue("OrderProductPromoCode");      orderProductPromoCode.set("orderId",orderId);      orderProductPromoCode.set("productPromoCodeId",productPromoCodeId);      toBeStored.add(orderProductPromoCode);    }  }  Map<String,String> attributeRoleMap=salesAttributeRoleMap;  if ("PURCHASE_ORDER".equals(orderTypeId)) {    attributeRoleMap=purchaseAttributeRoleMap;  }  for (  Map.Entry<String,String> attributeRoleEntry : attributeRoleMap.entrySet()) {    if (UtilValidate.isNotEmpty(context.get(attributeRoleEntry.getKey()))) {      toBeStored.add(delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",context.get(attributeRoleEntry.getKey()),"roleTypeId",attributeRoleEntry.getValue())));      toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",context.get(attributeRoleEntry.getKey()),"roleTypeId",attributeRoleEntry.getValue())));    }  }  String affiliateId=(String)context.get("affiliateId");  if (UtilValidate.isNotEmpty(affiliateId)) {    toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",affiliateId,"roleTypeId","AFFILIATE")));  }  String distributorId=(String)context.get("distributorId");  if (UtilValidate.isNotEmpty(distributorId)) {    toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",distributorId,"roleTypeId","DISTRIBUTOR")));  }  if (UtilValidate.isNotEmpty(context.get("productStoreId"))) {    try {      GenericValue productStoreRole=EntityQuery.use(delegator).from("ProductStoreRole").where("roleTypeId","VENDOR","productStoreId",context.get("productStoreId")).orderBy("-fromDate").filterByDate().queryFirst();      if (productStoreRole != null) {        toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",productStoreRole.get("partyId"),"roleTypeId","VENDOR")));      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up Vendor for the current Product Store",module);    }  }  if (UtilValidate.isNotEmpty(context.get("webSiteId"))) {    try {      GenericValue webSiteRole=EntityQuery.use(delegator).from("WebSiteRole").where("roleTypeId","VENDOR","webSiteId",context.get("webSiteId")).orderBy("-fromDate").filterByDate().queryFirst();      if (webSiteRole != null) {        toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",webSiteRole.get("partyId"),"roleTypeId","VENDOR")));      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up Vendor for the current Web Site",module);    }  }  List<GenericValue> orderPaymentInfos=UtilGenerics.checkList(context.get("orderPaymentInfo"));  if (UtilValidate.isNotEmpty(orderPaymentInfos)) {    for (    GenericValue valueObj : orderPaymentInfos) {      valueObj.set("orderId",orderId);      if ("OrderPaymentPreference".equals(valueObj.getEntityName())) {        if (valueObj.get("orderPaymentPreferenceId") == null) {          valueObj.set("orderPaymentPreferenceId",delegator.getNextSeqId("OrderPaymentPreference"));          valueObj.set("createdDate",UtilDateTime.nowTimestamp());          valueObj.set("createdByUserLogin",userLogin.getString("userLoginId"));        }        if (valueObj.get("statusId") == null) {          valueObj.set("statusId","PAYMENT_NOT_RECEIVED");        }      }      toBeStored.add(valueObj);    }  }  List<GenericValue> trackingCodeOrders=UtilGenerics.checkList(context.get("trackingCodeOrders"));  if (UtilValidate.isNotEmpty(trackingCodeOrders)) {    for (    GenericValue trackingCodeOrder : trackingCodeOrders) {      trackingCodeOrder.set("orderId",orderId);      toBeStored.add(trackingCodeOrder);    }  }  List<GenericValue> orderTerms=UtilGenerics.checkList(context.get("orderTerms"));  if (UtilValidate.isNotEmpty(orderTerms)) {    for (    GenericValue orderTerm : orderTerms) {      orderTerm.set("orderId",orderId);      if (orderTerm.get("orderItemSeqId") == null) {        orderTerm.set("orderItemSeqId","_NA_");      }      toBeStored.add(orderTerm);    }  }  String workEffortId=(String)context.get("workEffortId");  if (UtilValidate.isNotEmpty(workEffortId)) {    GenericValue orderHeaderWorkEffort=delegator.makeValue("OrderHeaderWorkEffort");    orderHeaderWorkEffort.set("orderId",orderId);    orderHeaderWorkEffort.set("workEffortId",workEffortId);    toBeStored.add(orderHeaderWorkEffort);  }  try {    delegator.storeAllBatch(toBeStored);    List<String> resErrorMessages=new LinkedList<String>();    if (UtilValidate.isNotEmpty(orderItems)) {      for (      GenericValue orderItem : orderItems) {        String productId=(String)orderItem.get("productId");        GenericValue product=delegator.getRelatedOne("Product",orderItem,false);        if (product != null && ("SERVICE_PRODUCT".equals(product.get("productTypeId")) || "AGGREGATEDSERV_CONF".equals(product.get("productTypeId")))) {          String inventoryFacilityId=null;          if ("Y".equals(productStore.getString("oneInventoryFacility"))) {            inventoryFacilityId=productStore.getString("inventoryFacilityId");            if (UtilValidate.isEmpty(inventoryFacilityId)) {              Debug.logWarning("ProductStore with id " + productStoreId + " has Y for oneInventoryFacility but inventoryFacilityId is empty, returning false for inventory check",module);            }          } else {            List<GenericValue> productFacilities=null;            GenericValue productFacility=null;            try {              productFacilities=product.getRelated("ProductFacility",product,null,true);            } catch (            GenericEntityException e) {              Debug.logWarning(e,"Error invoking getRelated in isCatalogInventoryAvailable",module);            }            if (UtilValidate.isNotEmpty(productFacilities)) {              productFacility=EntityUtil.getFirst(productFacilities);              inventoryFacilityId=(String)productFacility.get("facilityId");            }          }          Map<String,Object> ripCtx=FastMap.newInstance();          if (UtilValidate.isNotEmpty(inventoryFacilityId) && UtilValidate.isNotEmpty(productId) && orderItem.getBigDecimal("quantity").compareTo(BigDecimal.ZERO) > 0) {            GenericValue permUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").cache().queryOne();            ripCtx.put("productId",productId);            ripCtx.put("facilityId",inventoryFacilityId);            ripCtx.put("inventoryItemTypeId","SERIALIZED_INV_ITEM");            ripCtx.put("statusId","INV_AVAILABLE");            ripCtx.put("quantityAccepted",orderItem.getBigDecimal("quantity"));            ripCtx.put("quantityRejected",0.0);            ripCtx.put("userLogin",permUserLogin);            try {              Map<String,Object> ripResult=dispatcher.runSync("receiveInventoryProduct",ripCtx);              if (ServiceUtil.isError(ripResult)) {                String errMsg=ServiceUtil.getErrorMessage(ripResult);                @SuppressWarnings("unchecked") Collection<? extends String> map=(Collection<? extends String>)UtilMisc.<String,String>toMap("reasonCode","ReceiveInventoryServiceError","description",errMsg);                resErrorMessages.addAll(map);              }            } catch (            GenericServiceException e) {              Debug.logWarning(e,"Error invoking receiveInventoryProduct service in createOrder",module);            }          }        }      }    }    try {      reserveInventory(delegator,dispatcher,userLogin,locale,orderItemShipGroupInfo,dropShipGroupIds,itemValuesBySeqId,orderTypeId,productStoreId,resErrorMessages);    } catch (    GeneralException e) {      return ServiceUtil.returnError(e.getMessage());    }    if (resErrorMessages.size() > 0) {      return ServiceUtil.returnError(resErrorMessages);    }    successResult.put("orderId",orderId);  } catch (  GenericEntityException e) {    Debug.logError(e,"Problem with order storage or reservations",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotCreateOrderWriteError",locale) + e.getMessage() + ").");  }  return successResult;}  }
class C{  public final static String formatParameters(final NameValuePair[] nvps,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatParameters(null,nvps,quote).toString();}  }
class C{  public BERSequence(ASN1Encodable obj){  super(obj);}  }
class C{  public ParenthesizedExpression parenthesis(){  final ParenthesizedExpression $=ast.newParenthesizedExpression();  $.setExpression(inner);  return $;}  }
class C{  public CSettingsUpdater(final ZyGraph graph){  m_graph=graph;}  }
class C{  public static void log(String message){  log(new Status(IStatus.ERROR,getUniqueIdentifier(),IStatus.ERROR,message,null));}  }
class C{  public void openPetDataMenu(Player player){  this.openPetDataMenu(player,false);}  }
class C{  public PartialVisitContext(FacesContext facesContext,Collection<String> clientIds){  this(facesContext,clientIds,null);}  }
class C{  protected void update(IInterval interval){  if (intervals == null) {    intervals=new ArrayList<IInterval>();  }  intervals.add(interval);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:30.981 -0500",hash_original_method="07FCA8BF1CB05FED9E9EE5BE5B9D0DF8",hash_generated_method="BF297F88E2C526AD78F061C0319EEB89") private void sendRequestPendingResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  SIPResponse sipResponse=sipRequest.createResponse(Response.REQUEST_PENDING);  ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();  if (serverHeader != null) {    sipResponse.setHeader(serverHeader);  }  try {    RetryAfter retryAfter=new RetryAfter();    retryAfter.setRetryAfter(1);    sipResponse.setHeader(retryAfter);    if (sipRequest.getMethod().equals(Request.INVITE)) {      sipStack.addTransactionPendingAck(transaction);    }    transaction.sendResponse(sipResponse);    transaction.releaseSem();  } catch (  Exception ex) {    sipStack.getStackLogger().logError("Problem sending error response",ex);    transaction.releaseSem();    sipStack.removeTransaction(transaction);  }}  }
class C{  public void arrayLength(){  mv.visitInsn(Opcodes.ARRAYLENGTH);}  }
class C{  protected void addMapBeanToPanel(MapBean map){  layoutPanel(map);  map.addPropertyChangeListener(this);}  }
class C{  public static void main(String[] args){  TestNestedInlineTag tester=new TestNestedInlineTag();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public boolean isPostForm(){  return postForm;}  }
class C{  public void delete(){  this.parent.remove(this.credential.toString());  parent=null;}  }
class C{  public void addFocusListener(EventListener listener){  addEventListener(Events.ON_FOCUS,listener);  addEventListener(Events.ON_BLUR,listener);}  }
class C{  private static void dualPivotQuicksort(short[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  short ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    short t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    short t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    short t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    short t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    short t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    short t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    short t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    short t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    short t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  short pivot1=ae2;  a[e2]=a[left];  short pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public Subregion(String value){  this();  setValue(value);}  }
class C{  CompositeFilter(int depth){  this.delegates=new ArrayList<TableLineFilter<SearchResultDataLine>>(depth);  for (int i=0; i < depth; i++) {    this.delegates.add(null);  }  reset();}  }
class C{  public static void main(String[] args){  Header.printHeader(DataCleaner.class.toString(),args);  LIST.add("731eec4e9f49399907581e0fbb105a8a");  LIST.add("1dc6a2682d57603ad29b09a0881fceac");  BufferedReader br=IOUtils.getBufferedReader(args[0]);  BufferedWriter bw=IOUtils.getBufferedWriter(args[1]);  Counter counter=new Counter("   lines # ");  int recordsRemoved=0;  try {    String line=null;    while ((line=br.readLine()) != null) {      String[] sa=line.split(",");      String id=sa[1];      if (!LIST.contains(id)) {        bw.write(line);        bw.newLine();      } else {        recordsRemoved++;      }      counter.incCounter();    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Oops, cannot read/write");  } finally {    try {      br.close();      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close files.");    }  }  counter.printCounter();  LOG.info("Number of records removed: " + recordsRemoved);  Header.printFooter();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.FIELD_ACCESSOR;}  }
class C{  public Bindings add(String property,JList list){  registerPropertyChangeListener(list);  return add(new JListBinding(property,list));}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public void addDeviceFilter(DiscoveryFilter filter){}  }
class C{  void genIndex(String rootjar,String[] files) throws IOException {  List<String> jars=getJarPath(rootjar);  int njars=jars.size();  String[] jarfiles;  if (njars == 1 && files != null) {    for (int i=0; i < files.length; i++) {      jars.addAll(getJarPath(files[i]));    }    njars=jars.size();  }  jarfiles=jars.toArray(new String[njars]);  JarIndex index=new JarIndex(jarfiles);  dumpIndex(rootjar,index);}  }
class C{  @Override public String toString(){  return ToStringBuilder.reflectionToString(this,ToStringStyle.SHORT_PREFIX_STYLE);}  }
class C{  public ColorEditor(Frame owner,CompiereColor color){  super(owner,"",true);  init(color);}  }
class C{  public static <E>TopicProcessor<E> create(String name,int bufferSize,WaitStrategy strategy,boolean autoCancel){  return new TopicProcessor<>(name,bufferSize,strategy == null ? WaitStrategy.phasedOffLiteLock(200,100,TimeUnit.MILLISECONDS) : strategy,false,autoCancel,null);}  }
class C{  @Inject public ProjectTypeRegistry(Set<ProjectTypeDef> types){  projectTypes=new HashMap<>();  validatedData=new HashMap<>();  validate(types);  for (  ProjectTypeDef type : validatedData.values()) {    try {      init(type);    } catch (    ProjectTypeConstraintException e) {      LOG.error(e.getMessage());    }  }}  }
class C{  void init(TransformerFactoryImpl processor){  m_stylesheetProcessor=processor;  m_processors.push(m_schema.getElementProcessor());  this.pushNewNamespaceSupport();}  }
class C{  protected void fillList(List<MassnahmenUmsetzung> alleMassnahmen) throws CommandException {  Set<UnresolvedItem> unresolvedItems=new HashSet<UnresolvedItem>();  for (  MassnahmenUmsetzung mn : alleMassnahmen) {    String umsetzung=mn.getUmsetzung();    String siegelStufe=String.valueOf(mn.getStufe());    if ((getExecutionSet() == null || getExecutionSet().contains(umsetzung)) && (getSealSet() == null || getSealSet().contains(siegelStufe))) {      TodoViewItem item=new TodoViewItem();      if (mn.getParent() instanceof GefaehrdungsUmsetzung) {        item.setParentTitle(mn.getParent().getParent().getParent().getTitle());      } else {        item.setParentTitle(mn.getParent().getParent().getTitle());      }      item.setTitel(mn.getTitle());      item.setUmsetzung(umsetzung);      item.setUmsetzungBis(mn.getUmsetzungBis());      item.setNaechsteRevision(mn.getNaechsteRevision());      item.setStufe(siegelStufe.charAt(0));      item.setUrl(mn.getUrl());      item.setStand(mn.getStand());      item.setDbId(mn.getDbId());      unresolvedItems.add(new UnresolvedItem(item,mn.getDbId(),mn.getUmsetzungDurchLink(),mn.getNaechsteRevisionLink()));    }  }  FindLinkedPersons findCommand=new FindLinkedPersons(unresolvedItems);  findCommand=this.getCommandService().executeCommand(findCommand);  all.addAll(findCommand.getResolvedItems());  unresolvedItems=findCommand.getUnresolvedItems();  FindResponsiblePersons command=new FindResponsiblePersons(unresolvedItems,MassnahmenUmsetzung.P_VERANTWORTLICHE_ROLLEN_UMSETZUNG);  command=this.getCommandService().executeCommand(command);  unresolvedItems=command.getResolvedItems();  for (  UnresolvedItem resolvedItem : unresolvedItems) {    all.add(resolvedItem.getItem());  }}  }
class C{  public void configureCommandStation(int val){  getNceTrafficController().setCommandOptions(val);  jmri.InstanceManager.setCommandStation(nceTrafficController);}  }
class C{  @Override public ItemStack onItemRightClick(ItemStack itemStack,World world,EntityPlayer player){  if (world.isRemote) {    if (!player.isSneaking()) {      MovingObjectPosition objectMouseOver=player.rayTrace(BAN_JING,1);      if (objectMouseOver != null && objectMouseOver.typeOfHit == MovingObjectType.BLOCK) {        TileEntity tileEntity=world.getTileEntity(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ);        Block block=world.getBlock(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ);        TileEntity tile=world.getTileEntity(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ);        if (tile != null) {          if (tile instanceof TileExplosive) {            if (block == DefenseTechBlocks.blockMachine) {              return itemStack;            } else             if (this.isValidExplosive(tileEntity)) {              if (this.getEnergy(itemStack) > ENERGY) {                ArrayList data=new ArrayList();                data.add(tile.xCoord);                data.add(tile.yCoord);                data.add(tile.zCoord);                DefenseTech.netHandler.sendToServer(new ItemMessage(new ArrayList()));                this.setEnergy(itemStack,this.getEnergy(itemStack) - ENERGY);                return itemStack;              } else {                player.addChatMessage(new ChatComponentText(LangUtils.localize(Reference.CHAT_DESC + EnumColor.GREY + " "+ "message.detonator.nopower")));              }            }          }        }      }    } else {      if (this.getEnergy(itemStack) > ENERGY) {        TileEntity tileEntity=this.getSavedCoord(itemStack).getCoord(world.provider.dimensionId).getTileEntity(world);        if (this.isValidExplosive(tileEntity)) {          ArrayList data=new ArrayList();          data.add(tileEntity.xCoord);          data.add(tileEntity.yCoord);          data.add(tileEntity.zCoord);          DefenseTech.netHandler.sendToServer(new ItemMessage(data));          this.setEnergy(itemStack,this.getEnergy(itemStack) - ENERGY);        }      } else {        player.addChatMessage(new ChatComponentText(LangUtils.localize(Reference.CHAT_DESC + EnumColor.GREY + " "+ "message.detonator.nopower")));      }    }  }  return itemStack;}  }
class C{  public List<SyslogHandler> syslogHandlers(){  return subresources().syslogHandlers();}  }
class C{  @Override public void restart(){  stop();  start();}  }
class C{  public DerpibooruSearchOptions(){}  }
class C{  private void resolveResult(Status status,int requestCode){  if (mIsResolving) {    Log.w(TAG,"resolveResult: already resolving.");    return;  }  Log.d(TAG,"Resolving: " + status);  if (status.hasResolution()) {    Log.d(TAG,"STATUS: RESOLVING");    try {      status.startResolutionForResult(MainActivity.this,requestCode);      mIsResolving=true;    } catch (    IntentSender.SendIntentException e) {      Log.e(TAG,"STATUS: Failed to send resolution.",e);      hideProgress();    }  } else {    Log.e(TAG,"STATUS: FAIL");    showToast("Could Not Resolve Error");    hideProgress();  }}  }
class C{  public static boolean isComparisonImmediate(long imm){  return isArithmeticImmediate(imm);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.PROJECT_DEPENDENCIES__PROJECT_DEPENDENCIES:    getProjectDependencies().clear();  getProjectDependencies().addAll((Collection<? extends ProjectDependency>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(keySize + ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  public boolean isPortConfigResetAtDisconnect(){  return portConfigResetAtDisconnect;}  }
class C{  public static ThreadSafeWatch wrap(Object syncObj,Watch watch){  if (watch != null)   return new ThreadSafeWatch(syncObj,watch); else   return null;}  }
class C{  public boolean isDisplayed(){  String dl=m_vo.DisplayLogic;  if (dl == null || dl.equals(""))   return true;  String parsed=Env.parseContext(m_vo.ctx,this.getWindowNo(),dl,false,false).trim();  if (parsed.length() == 0)   return true;  boolean retValue=Evaluator.evaluateLogic(this,dl);  log.config(m_vo.Name + " (" + dl+ ") => "+ retValue);  return retValue;}  }
class C{  private int indexedBinarySearch(List<S2CellId> l,S2CellId key,int low){  int high=l.size() - 1;  while (low <= high) {    int mid=(low + high) >> 1;    S2CellId midVal=l.get(mid);    int cmp=midVal.compareTo(key);    if (cmp < 0) {      low=mid + 1;    } else     if (cmp > 0) {      high=mid - 1;    } else {      return mid;    }  }  return low;}  }
class C{  public SendableVoiceMessage.SendableVoiceMessageBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public MultiEpochExponential(Type units,int numEpoch){  super(units);  transitionTime=new double[numEpoch - 1];  rate=new double[numEpoch];}  }
class C{  public static void updateNteCharsFromProperties(){  String propertyRoot="ui/numeric_text_input_" + Sage.get("ui/translation_language_code","en") + "_";  for (int i=0; i < 10; i++) {    String currNteChars=new String(allNteChars[i]);    String charString=Sage.get(propertyRoot + i + "_lower",currNteChars);    if (!charString.equals(currNteChars))     allNteChars[i]=charString.toLowerCase().toCharArray();  }}  }
class C{  public RangeQueryBuilder to(String to){  this.to=to;  return this;}  }
class C{  private void initDefaultColors(){  this.categoryBackground=UIManager.getColor(PANEL_BACKGROUND_COLOR_KEY);  this.categoryForeground=UIManager.getColor(TABLE_FOREGROUND_COLOR_KEY).darker().darker().darker();  this.selectedCategoryBackground=categoryBackground.darker();  this.selectedCategoryForeground=categoryForeground;  this.propertyBackground=UIManager.getColor(TABLE_BACKGROUND_COLOR_KEY);  this.propertyForeground=UIManager.getColor(TABLE_FOREGROUND_COLOR_KEY);  this.selectedPropertyBackground=UIManager.getColor(TABLE_SELECTED_BACKGROUND_COLOR_KEY);  this.selectedPropertyForeground=UIManager.getColor(TABLE_SELECTED_FOREGROUND_COLOR_KEY);  setGridColor(categoryBackground);}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  public static long deinterleave(long b){  b&=MAGIC[0];  b=(b ^ (b >>> SHIFT[0])) & MAGIC[1];  b=(b ^ (b >>> SHIFT[1])) & MAGIC[2];  b=(b ^ (b >>> SHIFT[2])) & MAGIC[3];  b=(b ^ (b >>> SHIFT[3])) & MAGIC[4];  b=(b ^ (b >>> SHIFT[4])) & MAGIC[5];  return b;}  }
class C{  private static boolean isOtherKey(final MouseEvent e){  return e.getButton().equals(MouseButton.PRIMARY) || e.getButton().equals(MouseButton.NONE);}  }
class C{  public void openOrderEnd(ConcurrentHashMap<Integer,TradeOrder> openOrders){}  }
class C{  public void visitEnd(){}  }
class C{  private boolean isLoaded(){  return true;}  }
class C{  public int compareTo(CollationKey target){  int result=key.compareTo(((RuleBasedCollationKey)(target)).key);  if (result <= Collator.LESS)   return Collator.LESS; else   if (result >= Collator.GREATER)   return Collator.GREATER;  return Collator.EQUAL;}  }
class C{  public ButtonBubble(Window owner,String nextDockableKey,AlignedSide preferredAlignment,String i18nKey,String buttonKeyToAttach,boolean addListener,Object... arguments){  this(owner,nextDockableKey,preferredAlignment,i18nKey,buttonKeyToAttach,addListener,true,arguments);}  }
class C{  public ParseError st0contained(){  if (arg(0).equals("ST0") || arg(1).equals("ST0")) {    return null;  } else {    return new ParseError(wholeLine,argument(1),"One of the arguments must be ST0");  }}  }
class C{  public HalfBandFilter_RB_RB(float[] coefficients,float gain,boolean decimate){  super(coefficients,gain);  mDecimate=decimate;}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  protected WordBoundaryImpl(){  super();}  }
class C{  public static void hideFab(FloatingActionButton fab){  fab.hide();  fab.animate().translationY(fab.getHeight() + 100).setInterpolator(new AccelerateInterpolator(2)).start();}  }
class C{  public synchronized Enumeration elements(){  return new CacheEnumerator(table,false);}  }
class C{  public Statement where(Object operand){  statement.append(" WHERE ").append(operand);  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @ExceptionHandler(Throwable.class) @ResponseBody @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public String handleException(final Throwable cause){  final StringWriter stackTraceWriter=new StringWriter();  cause.printStackTrace(new PrintWriter(stackTraceWriter));  final String stackTrace=stackTraceWriter.toString();  if (logger.isDebugEnabled()) {    logger.debug(stackTrace);  }  return convertErrorAsJson(cause.getMessage());}  }
class C{  private InputStream open(String filename) throws IOException {  InputStream is=ClassLoader.getSystemClassLoader().getResourceAsStream(filename);  return filename.endsWith(".gz") ? new GZIPInputStream(is) : is;}  }
class C{  @Override public Bundle hasFeatures(AccountAuthenticatorResponse response,Account account,String[] features) throws NetworkErrorException {  Bundle result=new Bundle();  result.putBoolean(AccountManager.KEY_BOOLEAN_RESULT,false);  return result;}  }
class C{  public List<Certificate> peerCertificates(){  return peerCertificates;}  }
class C{  public void copyConfigDir(String fromConfig,String toConfig,Set<String> copiedToZkPaths) throws IOException {  copyConfigDirFromZk(CONFIGS_ZKNODE + "/" + fromConfig,CONFIGS_ZKNODE + "/" + toConfig,copiedToZkPaths);}  }
class C{  public void testTheMatrix(){  String matrixString="11,12,13 ; 21,22,23 ; 31,32,33 ; 41,42,43";  int[][] expected=new int[][]{new int[]{11,12,13},new int[]{21,22,23},new int[]{31,32,33},new int[]{41,42,43}};  IntegerConverter integerConverter=new IntegerConverter();  ArrayConverter arrayConverter=new ArrayConverter(int[].class,integerConverter);  ArrayConverter matrixConverter=new ArrayConverter(int[][].class,arrayConverter);  matrixConverter.setDelimiter(';');  matrixConverter.setAllowedChars(new char[]{','});  try {    Object result=matrixConverter.convert(int[][].class,matrixString);    assertEquals("Check int[][].class",int[][].class,result.getClass());    int[][] matrix=(int[][])result;    assertEquals("Check int[][] length",expected.length,matrix.length);    for (int i=0; i < expected.length; i++) {      assertEquals("Check int[" + i + "] length",expected[i].length,matrix[i].length);      for (int j=0; j < expected[i].length; j++) {        String label="Matrix int[" + i + ","+ j+ "] element";        assertEquals(label,expected[i][j],matrix[i][j]);      }    }  } catch (  Exception e) {    fail("Matrix Conversion threw " + e);  }}  }
class C{  public boolean isClinit(){  return kind.isClinit();}  }
class C{  public int orderRelativeTo(Region other){  if (this.start < other.start) {    return -1;  } else   if (this.end > other.end) {    return 1;  } else {    return 0;  }}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","kmmc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String toString(){  return ":lang(" + lang + ")";}  }
class C{  public EnhancedTextField(Icon icon){  this(null,icon);}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.MODULE_FILTER_SPECIFIER;}  }
class C{  public Object[] toArray(){  Object[] a;  final ReentrantLock lock=this.lock;  lock.lock();  try {    final int count=this.count;    a=new Object[count];    int n=items.length - takeIndex;    if (count <= n)     System.arraycopy(items,takeIndex,a,0,count); else {      System.arraycopy(items,takeIndex,a,0,n);      System.arraycopy(items,0,a,n,count - n);    }  }  finally {    lock.unlock();  }  return a;}  }
class C{  private void registerHotkeys(){  final ActionMap actionMap=((JTextField)getEditor().getEditorComponent()).getActionMap();  final InputMap imap=((JTextField)getEditor().getEditorComponent()).getInputMap();  setActionMap(actionMap);  setInputMap(JComponent.WHEN_FOCUSED,imap);  imap.put(HotKeys.GRAPH_SEARCH_NEXT_KEY.getKeyStroke(),"NEXT");  imap.put(HotKeys.GRAPH_SEARCH_NEXT_ZOOM_KEY.getKeyStroke(),"NEXT_ZOOM");  imap.put(HotKeys.GRAPH_SEARCH_PREVIOUS_KEY.getKeyStroke(),"PREVIOUS");  imap.put(HotKeys.GRAPH_SEARCH_PREVIOUS_ZOOM_KEY.getKeyStroke(),"PREVIOUS_ZOOM");  actionMap.put("NEXT",CActionProxy.proxy(new CActionHotKey("NEXT")));  actionMap.put("NEXT_ZOOM",CActionProxy.proxy(new CActionHotKey("NEXT_ZOOM")));  actionMap.put("PREVIOUS",CActionProxy.proxy(new CActionHotKey("PREVIOUS")));  actionMap.put("PREVIOUS_ZOOM",CActionProxy.proxy(new CActionHotKey("PREVIOUS_ZOOM")));}  }
class C{  public static Iterator<String> domains(final EventOrigin stack){  assert getDomains(stack) != null : "getDomains(" + stack + ") = null";  return getDomains(stack).keys(false);}  }
class C{  public static void registerServiceConfigListener(ServiceConfigListener listener){  Assert.notNull("listener",listener);  configListeners.add(listener);}  }
class C{  @SuppressWarnings("unchecked") public <Result,Progress>Promise<Result,Progress> of(Result value){  if (value == null) {    return (Promise<Result,Progress>)mAbsentPromise;  } else {    AwexPromise<Result,Progress> promise=new AwexPromise<>(this);    promise.resolve(value);    return promise;  }}  }
class C{  private Automaton substitutionsOf(String s){  List<Automaton> list=new ArrayList<>();  for (int i=0; i < s.length(); i++) {    Automaton a=Automata.makeString(s.substring(0,i));    a=Operations.concatenate(a,Automata.makeAnyChar());    a=Operations.concatenate(a,Automata.makeString(s.substring(i + 1)));    list.add(a);  }  Automaton a=Operations.union(list);  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);  return a;}  }
class C{  private static List<ServiceCatalog> generateRestServiceList(File folder){  List<ServiceCatalog> apiList=new ArrayList<ServiceCatalog>();  Collection<File> files=FileUtils.listFiles(folder,new String[]{Constants.XML_FILE_SUFFIX},false);  for (  File file : files) {    System.out.println("Loading: " + file.getAbsolutePath());    apiList.add(ServiceCatalogBuilder.build(file));  }  if (apiList.isEmpty()) {    return null;  }  return apiList;}  }
class C{  public boolean processItWithoutTrxClose(ProcessInfo pi,Trx trx){  return processIt(pi,trx,false);}  }
class C{  public SpanManager delete(Span s){  return delete(s.getStart(),s.getEnd());}  }
class C{  public ToggleButtonToolBar(){  super();  this.setFloatable(true);}  }
class C{  public static Optional<Class<?>> loadClass(String name){  return loadClass(name,getDefaultClassLoader());}  }
class C{  @Override public AugmentedResult call() throws Exception {  JUnitCore jUnitCore=getJUnitCore();  String testName=String.format("%s#%s",test.getDeclaringClass().getCanonicalName(),test.getName());  long start=System.currentTimeMillis();  try {    LOG.info(String.format("STARTING Test %s",testName));    if (retry) {      TestRunnerRetryingRule.retry();    }    Result result=jUnitCore.run(Request.method(test.getDeclaringClass(),test.getName()));    LOG.info(String.format("FINSHED Test %s in %s, result %s",testName,Util.TO_PRETTY_FORMAT.apply(System.currentTimeMillis() - start),result.wasSuccessful() ? "SUCCEEDED" : "FAILED"));    return new AugmentedResult(testName,result,outputStream);  }  finally {    outputStream.close();  }}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  timeSeries.sort();  double[] values=timeSeries.getValuesAsArray();  long[] times=timeSeries.getTimestampsAsArray();  int timeSeriesSize=timeSeries.size();  timeSeries.clear();  for (int start=0; start < timeSeriesSize; start++) {    int end=start + samples;    evaluteAveragesAndAddToTimeSeries(timeSeries,values,times,start,end);    if (end + 1 >= timeSeriesSize) {      evaluteAveragesAndAddToTimeSeries(timeSeries,values,times,start + 1,timeSeriesSize);      break;    }  }  functionValueMap.add(this);}  }
class C{  public void addObject(T object){  if (object == null) {    containsNull=true;    return;  }  Entry<T> entry=map.get(object);  if (entry == null) {    entry=new Entry<>(object);    map.put(object,entry);  }  entry.frequency++;}  }
class C{  public void clear(){  init();  setAddrPattern("");  setArguments(new Object[0]);}  }
class C{  public boolean apply(JsonElement jsonElt){  boolean result=(boolOp == BoolOp.AND) ? true : false;  for (  FilterPredClause clause : clauses) {    boolean satisfied=clause.apply(jsonElt);switch (boolOp) {case AND:      result=result && satisfied;    if (!result)     return false;  break;default :result=result || satisfied;if (result) return true;}}return result;}  }
class C{  public static boolean isLink(Node node){  Node ancestor=node;  while (ancestor != null) {    if (isLinkTag(ancestor)) {      return true;    }    ancestor=ancestor.parent();  }  return false;}  }
class C{  public final AC noGrid(){  return noGrid(curIx);}  }
class C{  public String LNormTipText(){  return "The LNorm to use for document length normalization.";}  }
class C{  public GeoBoundingBoxQueryBuilder topLeft(double lat,double lon){  box[TOP]=lat;  box[LEFT]=lon;  return this;}  }
class C{  public ConfigurationResponse createConfigurationReponse(final ConfigurationRequest configRequest) throws Exception {  ConfigurationResponse configResponse=new ConfigurationResponse();  for (int i=0; i < configRequest.getNumAttempts(); i++) {    boolean isLocked=sharedConfigLockingService.lock(SHARED_CONFIG_LOCK_NAME,5000,5000);    try {      if (isLocked) {        Set<String> groups=configRequest.getGroups();        groups.add(SharedConfiguration.CLUSTER_CONFIG);        logger.info("Building up configuration response with following configurations: {}",groups);        for (        String group : groups) {          Configuration configuration=getConfiguration(group);          configResponse.addConfiguration(configuration);        }        Object[] jars=getAllJars(groups);        if (jars != null) {          String[] jarNames=(String[])jars[0];          byte[][] jarBytes=(byte[][])jars[1];          configResponse.addJarsToBeDeployed(jarNames,jarBytes);        }        configResponse.setFailedToGetSharedConfig(false);        return configResponse;      }    }  finally {      sharedConfigLockingService.unlock(SHARED_CONFIG_LOCK_NAME);    }  }  configResponse.setFailedToGetSharedConfig(true);  return configResponse;}  }
class C{  public ProvisionNamespaceTransaction(final DeserializationOptions options,final Deserializer deserializer){  super(TransactionTypes.PROVISION_NAMESPACE,options,deserializer);  this.rentalFeeSink=Account.readFrom(deserializer,"rentalFeeSink");  this.rentalFee=Amount.readFrom(deserializer,"rentalFee");  this.newPart=new NamespaceIdPart(deserializer.readString("newPart"));  final String parent=deserializer.readOptionalString("parent");  this.parent=null == parent ? null : new NamespaceId(parent);}  }
class C{  @KnownFailure("not supported") public void testUpdate6() throws SQLException {  DatabaseCreator.fillFKCascadeTable(conn);  try {    statement.executeUpdate("UPDATE " + DatabaseCreator.FKCASCADE_TABLE + " SET name_id = 6 WHERE name_id = 2");    fail("expecting SQLException");  } catch (  SQLException ex) {  }}  }
class C{  public Associator(){  setLayout(new BorderLayout());  add(m_visual,BorderLayout.CENTER);  setAssociator(m_Associator);}  }
class C{  public void removeListener(final SelectionListener listener1){  if (this.listener == listener1)   this.listener=null;}  }
class C{  public LifecycleException(){  this(null,null);}  }
class C{  public CoordinateDMS roundSeconds(){  int secondsNorth=(tenthsOfSecondsNorth > 0 ? (int)Math.round(tenthsOfSecondsNorth / 10.) : -(int)Math.round(-tenthsOfSecondsNorth / 10.));  int secondsEast=(tenthsOfSecondsEast > 0 ? (int)Math.round(tenthsOfSecondsEast / 10.) : -(int)Math.round(-tenthsOfSecondsEast / 10.));  return new CoordinateDMS(degreesNorth,minutesNorth,secondsNorth * 10,degreesEast,minutesEast,secondsEast * 10);}  }
class C{  public static Date parseDate(String dateValue,Collection<String> dateFormats,Date startDate) throws ParseException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_HTTP_CLIENT_PATTERNS;  }  if (startDate == null) {    startDate=DEFAULT_TWO_DIGIT_YEAR_START;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  SimpleDateFormat dateParser=null;  Iterator formatIter=dateFormats.iterator();  while (formatIter.hasNext()) {    String format=(String)formatIter.next();    if (dateParser == null) {      dateParser=new SimpleDateFormat(format,Locale.ENGLISH);      dateParser.setTimeZone(GMT);      dateParser.set2DigitYearStart(startDate);    } else {      dateParser.applyPattern(format);    }    try {      return dateParser.parse(dateValue);    } catch (    ParseException pe) {    }  }  throw new ParseException("Unable to parse the date " + dateValue,0);}  }
class C{  public static boolean isListAttribute(String attributeName){  if (attributeName != null && (attributeName.equals(IModelConfigurationConstants.MODEL_CORRECTNESS_INVARIANTS) || attributeName.equals(IModelConfigurationConstants.MODEL_CORRECTNESS_PROPERTIES) || attributeName.equals(IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS)|| attributeName.equals(IModelConfigurationConstants.MODEL_PARAMETER_DEFINITIONS))) {    return true;  }  return false;}  }
class C{  public static void storeIcons(){  if (_iconMaps == null) {    return;  }  if (!jmri.util.ThreadingUtil.isGUIThread())   log.error("Not on GUI thread",new Exception("traceback"));  CatalogTreeManager manager=InstanceManager.getDefault(jmri.CatalogTreeManager.class);  CatalogTree tree=manager.getBySystemName("NXPI");  if (tree != null) {    manager.deregister(tree);  }  tree=manager.newCatalogTree("NXPI","Item Palette");  CatalogTreeNode root=tree.getRoot();  Iterator<Entry<String,HashMap<String,HashMap<String,NamedIcon>>>> it=_iconMaps.entrySet().iterator();  while (it.hasNext()) {    Entry<String,HashMap<String,HashMap<String,NamedIcon>>> entry=it.next();    root.add(store3levelMap(entry.getKey(),entry.getValue()));    if (log.isDebugEnabled()) {      log.debug("Add type node " + entry.getKey());    }  }  Iterator<Entry<String,HashMap<String,HashMap<String,HashMap<String,NamedIcon>>>>> its=_indicatorTOMaps.entrySet().iterator();  while (its.hasNext()) {    Entry<String,HashMap<String,HashMap<String,HashMap<String,NamedIcon>>>> entry=its.next();    CatalogTreeNode typeNode=new CatalogTreeNode(entry.getKey());    Iterator<Entry<String,HashMap<String,HashMap<String,NamedIcon>>>> iter=entry.getValue().entrySet().iterator();    while (iter.hasNext()) {      Entry<String,HashMap<String,HashMap<String,NamedIcon>>> ent=iter.next();      typeNode.add(store3levelMap(ent.getKey(),ent.getValue()));      if (log.isDebugEnabled()) {        log.debug("Add IndicatorTO node " + ent.getKey());      }    }    root.add(typeNode);    if (log.isDebugEnabled()) {      log.debug("Add IndicatorTO node " + entry.getKey());    }  }}  }
class C{  public byte[] toByteArray(){  ByteBuffer buffer=ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);  xStats.writeTo(buffer);  yStats.writeTo(buffer);  buffer.putDouble(sumOfProductsOfDeltas);  return buffer.array();}  }
class C{  private Method findAnyMethodMatch(Class<?> clz,String name,Class<?>[] classes){  try {    Method m=clz.getDeclaredMethod(name,classes);    if (m != null) {      return m;    }  } catch (  NoSuchMethodException ignored) {  }  Class<?> sup=clz.getSuperclass();  if (sup != null) {    Method m=findAnyMethodMatch(sup,name,classes);    if (m != null) {      return m;    }  }  Class<?>[] itfs=clz.getInterfaces();  if (itfs != null && itfs.length > 0) {    for (    Class<?> itf : itfs) {      Method m=findAnyMethodMatch(itf,name,classes);      if (m != null) {        return m;      }    }  }  return null;}  }
class C{  @Override protected void processViews(SerializationConfig config,BeanSerializerBuilder builder){  super.processViews(config,builder);  BasicBeanDescription beanDesc=builder.getBeanDescription();  if (beanDesc.getBeanClass() == ViewBean.class) {    List<BeanPropertyWriter> props=builder.getProperties();    BeanPropertyWriter[] writers=props.toArray(new BeanPropertyWriter[props.size()]);    for (int i=0; i < writers.length; ++i) {      String pname=writers[i].getName();      if ("secret".equals(pname)) {        writers[i]=null;      } else       if ("name".equals(pname)) {        writers[i]=new UpperCasingWriter(writers[i]);      }    }    builder.setFilteredProperties(writers);  }}  }
class C{  public void addComment(Comment comment){  addProperty(comment);}  }
class C{  public boolean compareTo(Vector4f rhs){  boolean ret=false;  if (this.points[0] == rhs.points[0] && this.points[1] == rhs.points[1] && this.points[2] == rhs.points[2] && this.points[3] == rhs.points[3])   ret=true;  return ret;}  }
class C{  protected BufferedImage preprocessImage(Image origImage,int imageWidth,int imageHeight) throws InterruptedException {  return getTileImagePreparer().preprocessImage(origImage,imageWidth,imageHeight);}  }
class C{  private void testRowVariances(String testName,Sparsity sparsity,DataType dataType,boolean rewrites,ExecType platform){  boolean rewritesOld=OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION;  OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION=rewrites;  RUNTIME_PLATFORM platformOld=rtplatform;switch (platform) {case MR:    rtplatform=RUNTIME_PLATFORM.HADOOP;  break;case SPARK:rtplatform=RUNTIME_PLATFORM.SPARK;break;default :rtplatform=RUNTIME_PLATFORM.SINGLE_NODE;break;}boolean sparkConfigOld=DMLScript.USE_LOCAL_SPARK_CONFIG;if (rtplatform == RUNTIME_PLATFORM.SPARK) DMLScript.USE_LOCAL_SPARK_CONFIG=true;try {getAndLoadTestConfiguration(testName);String HOME=SCRIPT_DIR + TEST_DIR;fullDMLScriptName=HOME + testName + ".dml";programArgs=new String[]{"-explain","-stats","-args",input(INPUT_NAME),output(OUTPUT_NAME)};fullRScriptName=HOME + testName + ".R";rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();double sparsityVal;switch (sparsity) {case EMPTY:sparsityVal=0;break;case SPARSE:sparsityVal=sparsitySparse;break;case DENSE:default :sparsityVal=sparsityDense;}int r;int c;switch (dataType) {case ROWVECTOR:r=1;c=cols;break;case COLUMNVECTOR:r=rows;c=1;break;case MATRIX:default :r=rows;c=cols;}double[][] X=getRandomMatrix(r,c,-1,1,sparsityVal,7);writeInputMatrixWithMTD(INPUT_NAME,X,true);runTest(true,false,null,-1);runRScript(true);HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS(OUTPUT_NAME);HashMap<CellIndex,Double> rfile=readRMatrixFromFS(OUTPUT_NAME);TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");if (rewrites && (platform == ExecType.SPARK || platform == ExecType.CP)) {String prefix=(platform == ExecType.SPARK) ? Instruction.SP_INST_PREFIX : "";if (dataType == DataType.ROWVECTOR) {String opcode=prefix + varOp;boolean rewriteApplied=Statistics.getCPHeavyHitterOpCodes().contains(opcode);Assert.assertTrue("Rewrite not applied to row vector case.",rewriteApplied);} else if (dataType == DataType.COLUMNVECTOR) {String opcode=prefix + rowVarOp;boolean rewriteApplied=!Statistics.getCPHeavyHitterOpCodes().contains(opcode);Assert.assertTrue("Rewrite not applied to column vector case.",rewriteApplied);}}}  finally {OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION=rewritesOld;rtplatform=platformOld;DMLScript.USE_LOCAL_SPARK_CONFIG=sparkConfigOld;}}  }
class C{  public static <T>T wrap(final Callable<T> exec){  try {    return exec.call();  } catch (  final RuntimeException e) {    throw e;  }catch (  final Exception e) {    throw ExceptionHelper.unchecked(e);  }}  }
class C{  public static List<String> readLines(CharSequence self){  return DefaultGroovyMethods.toList(new LineIterable(self));}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public void addEventType(String eventTypeName,Class eventClass){  addEventType(eventTypeName,eventClass.getName());}  }
class C{  public final void unit(int j){  for (int i=0; i < NDIM; i++) {    data[i]=(i == j ? 1.0 : 0.0);  }}  }
class C{  private static void testJcmdPidPerfCounterPrint() throws Exception {  OutputAnalyzer output=JcmdBase.jcmd(VM_ARGS,new String[]{"PerfCounter.print"});  output.shouldHaveExitValue(0);  matchPerfCounters(output);}  }
class C{  public static boolean isCdiAvailable(FacesContext facesContext){  boolean result;  if (facesContext != null && facesContext.getAttributes().containsKey(RIConstants.CDI_AVAILABLE)) {    result=(Boolean)facesContext.getAttributes().get(RIConstants.CDI_AVAILABLE);  } else   if (facesContext != null && facesContext.getExternalContext().getApplicationMap().containsKey(RIConstants.CDI_AVAILABLE)) {    result=(Boolean)facesContext.getExternalContext().getApplicationMap().get(RIConstants.CDI_AVAILABLE);  } else {    result=getCdiBeanManager(facesContext) != null;    if (result && facesContext != null) {      facesContext.getAttributes().put(RIConstants.CDI_AVAILABLE,result);      facesContext.getExternalContext().getApplicationMap().put(RIConstants.CDI_AVAILABLE,result);    }  }  return result;}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public void update(ReadOnlyVector3 pos,ReadOnlyVector3 normal,BasicCamera camera){  if (normal == null) {    Vector3 store=new Vector3();    Landscape.getInstance().getNormal(pos.getX(),pos.getY(),store);    setNormal(store);  } else {    setNormal(normal);  }  setTranslation(pos);  if (camera != null) {    update(camera);  }  state.updateText();}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  public boolean isDirectlyControlDependentOn(Branch branch){  if (branch == null)   return getControlDependentBranchIds().contains(-1);  for (  ControlDependency cd : getControlDependencies())   if (cd.getBranch().equals(branch))   return true;  return false;}  }
class C{  private void createDefaultRealmData(Realm realm){  List<Bone> bones1=new ArrayList<Bone>(){{      add(new Bone("Geoff",false));      add(new Bone("Larry",true));      add(new Bone("Alice",true));      add(new Bone("Bone",false));    }  };  List<Bone> bones2=new ArrayList<Bone>(){{      add(new Bone("Bob",false));      add(new Bone("Huh?",true));      add(new Bone("What?",false));    }  };  Dog dog1=new Dog("Good Boy",7,bones1);  Dog dog2=new Dog("Freddy",2,bones2);  Dog dog3=new Dog("Such Name, Much Excite, Wow",900,null,true);  Dog dog4=new Dog("Otie",4);  Cat cat1=new Cat("Grumpy Cat",dog3);  Cat cat2=new Cat("Tiger",null);  Cat cat3=new Cat("Mary-Sue",dog1);  Cat cat4=new Cat("Garfield",dog4);  Cat cat5=new Cat("Schrodinger's Cat");  Cat cat6=new Cat("I Can Has Cheezburger",dog3);  Person person1=new Person("Jon Arbuckle",30,dog4,1);  person1.getCats().add(cat4);  Person person2=new Person("Erwin Schrodinger",128,dog2,2);  person2.getCats().add(cat5);  Person person3=new Person("Le Meme",9001,dog3,3);  person3.getCats().add(cat1);  person3.getCats().add(cat6);  Person person4=new Person("Jane Harrison",28,dog1,4);  person4.getCats().add(cat2);  person4.getCats().add(cat3);  Person person5=new Person("Alex Harrison",29,dog1,5);  person5.getCats().add(cat2);  person5.getCats().add(cat3);  ArrayList<Person> people=new ArrayList<>();  people.add(person1);  people.add(person2);  people.add(person3);  people.add(person4);  people.add(person5);  realm.copyToRealm(people);}  }
class C{  static Path fromUri(UnixFileSystem fs,URI uri){  if (!uri.isAbsolute())   throw new IllegalArgumentException("URI is not absolute");  if (uri.isOpaque())   throw new IllegalArgumentException("URI is not hierarchical");  String scheme=uri.getScheme();  if ((scheme == null) || !scheme.equalsIgnoreCase("file"))   throw new IllegalArgumentException("URI scheme is not \"file\"");  if (uri.getAuthority() != null)   throw new IllegalArgumentException("URI has an authority component");  if (uri.getFragment() != null)   throw new IllegalArgumentException("URI has a fragment component");  if (uri.getQuery() != null)   throw new IllegalArgumentException("URI has a query component");  if (!uri.toString().startsWith("file:///"))   return new File(uri).toPath();  String p=uri.getRawPath();  int len=p.length();  if (len == 0)   throw new IllegalArgumentException("URI path component is empty");  if (p.endsWith("/") && len > 1)   len--;  byte[] result=new byte[len];  int rlen=0;  int pos=0;  while (pos < len) {    char c=p.charAt(pos++);    byte b;    if (c == '%') {      assert (pos + 2) <= len;      char c1=p.charAt(pos++);      char c2=p.charAt(pos++);      b=(byte)((decode(c1) << 4) | decode(c2));      if (b == 0)       throw new IllegalArgumentException("Nul character not allowed");    } else {      assert c < 0x80;      b=(byte)c;    }    result[rlen++]=b;  }  if (rlen != result.length)   result=Arrays.copyOf(result,rlen);  return new UnixPath(fs,result);}  }
class C{  public void clearAttributeSpecs(){  if (m_attributeSpecs == null) {    m_attributeSpecs=new ArrayList<AttributeSpec>();  }  m_attributeSpecs.clear();}  }
class C{  public static Collection<String> caseInsensitiveGet(Map<String,Collection<String>> headers,String headerName){  Collection<String> result=new LinkedList<>();  boolean neverFound=true;  for (  Map.Entry<String,Collection<String>> entry : headers.entrySet()) {    String key=entry.getKey();    if (headerName.equalsIgnoreCase(key)) {      neverFound=false;      result.addAll(entry.getValue());    }  }  return neverFound ? null : result;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Class loadClass(String name) throws ClassNotFoundException {  try {    return loadClass(name,false);  } catch (  NoClassDefFoundError e) {    throw new ClassNotFoundException(name);  }}  }
class C{  public BinaryBlockFrame(DataFrame dataFrame,FrameMetadata frameMetadata){  this.frameMetadata=frameMetadata;  binaryBlocks=MLContextConversionUtil.dataFrameToFrameBinaryBlocks(dataFrame,frameMetadata);}  }
class C{  public JSONObject put(String key,Map value){  super.put(key,new JSONObject(value));  return this;}  }
class C{  void zkInit() throws Exception {  form.appendChild(mainPanel);  mainPanel.setStyle("width: 99%; height: 100%; border: none; padding: 0; margin: 0");  mainPanel.appendChild(mainLayout);  mainLayout.setWidth("100%");  mainLayout.setHeight("100%");  parameterPanel.appendChild(parameterLayout);  orgLabel.setText(Msg.translate(Env.getCtx(),"AD_Org_ID"));  locatorLabel.setText(Msg.translate(Env.getCtx(),"M_Locator_ID"));  productLabel.setText(Msg.translate(Env.getCtx(),"Product"));  dateFLabel.setText(Msg.translate(Env.getCtx(),"DateFrom"));  dateTLabel.setText(Msg.translate(Env.getCtx(),"DateTo"));  mtypeLabel.setText(Msg.translate(Env.getCtx(),"MovementType"));  North north=new North();  mainLayout.appendChild(north);  north.appendChild(parameterPanel);  Rows rows=parameterLayout.newRows();  Row row=rows.newRow();  row.appendChild(orgLabel.rightAlign());  row.appendChild(orgField.getComponent());  row.appendChild(mtypeLabel.rightAlign());  row.appendChild(mtypeField.getComponent());  row.appendChild(dateFLabel.rightAlign());  row.appendChild(dateFField.getComponent());  row=rows.newRow();  row.appendChild(locatorLabel.rightAlign());  row.appendChild(locatorField.getComponent());  row.appendChild(productLabel.rightAlign());  row.appendChild(productField.getComponent());  row.appendChild(dateTLabel.rightAlign());  row.appendChild(dateTField.getComponent());  southPanel.appendChild(confirmPanel);  southPanel.appendChild(new Separator());  southPanel.appendChild(statusBar);  South south=new South();  south.setStyle("border: none");  mainLayout.appendChild(south);  south.appendChild(southPanel);  LayoutUtils.addSclass("status-border",statusBar);}  }
class C{  public boolean isSslClientAuth(){  return sslClientAuth;}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends T> list,T object,Comparator<? super T> comparator){  if (comparator == null) {    return Collections.binarySearch((List<? extends Comparable<? super T>>)list,object);  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends T> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-comparator.compare(it.next(),object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=-comparator.compare(list.get(mid),object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  public long length() throws IOException {  return checkInputFile().length();}  }
class C{  public XPathException(String message){  super(message);}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      System.out.println("Please specify a set of instances.");      return;    }    NormalEstimator newEst=new NormalEstimator(0.01);    for (int i=0; i < argv.length; i++) {      double current=Double.valueOf(argv[i]).doubleValue();      System.out.println(newEst);      System.out.println("Prediction for " + current + " = "+ newEst.getProbability(current));      newEst.addValue(current,1);    }    NormalEstimator.testAggregation();  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public void attach(FieldPortrayal2D portrayal,String name,Rectangle2D.Double bounds){  attach(portrayal,name,bounds,true);}  }
class C{  public static boolean isBodyCenterEnabled(){  return bodyCenterEnabled;}  }
class C{  private void loadAllowedOperations(){  allowedLoadTestOps=new ArrayList<>();  if (args.allowedLoadTestOps().isEmpty())   Collections.addAll(allowedLoadTestOps,Operation.values()); else {    for (    String opName : args.allowedLoadTestOps())     allowedLoadTestOps.add(Operation.valueOf(opName.toUpperCase()));  }}  }
class C{  @Override protected void onRestoreInstanceState(Bundle state){  ensureList();  super.onRestoreInstanceState(state);}  }
class C{  public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  StreamImpl stream=_stream;  if (stream != null) {    stream.write(buf,offset,length,isEnd);  }}  }
class C{  public void addSequence(final double[] datum,final double[] weights){  QL.require(datum.length == weights.length,INCOMPATIBLE_ARRAY_SIZES);  for (int i=0; i < datum.length; i++) {    add(datum[i],weights[i]);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public SelectProcessReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  public static float[] toFloatArray(Short[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].floatValue();  }  return result;}  }
class C{  public GeneratorThread(MainFrame parent,String inputFile,String outputDir){  this.parent=parent;  this.inputFile=inputFile;  this.outputDir=outputDir;}  }
class C{  private String[] alphaMixed(){  return combineStringArrays(JexlStringFunctions.alphaLower,JexlStringFunctions.alphaUpper);}  }
class C{  public void drawBackground(Graphics2D g,java.awt.Paint paint){  g.setPaint(paint);  drawBackground(g);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void updateBytes(String columnLabel,byte[] x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBytes(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueBytes.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void updateProductInfo(int C_AcctSchema_ID){  log.fine("C_Order_ID=" + get_ID());  StringBuffer sql=new StringBuffer("UPDATE M_Product_Costing pc " + "SET PriceLastPO = " + "(SELECT currencyConvert(ol.PriceActual,ol.C_Currency_ID,a.C_Currency_ID,o.DateOrdered,o.C_ConversionType_ID,o.AD_Client_ID,o.AD_Org_ID) "+ "FROM C_Order o, C_OrderLine ol, C_AcctSchema a "+ "WHERE o.C_Order_ID=ol.C_Order_ID"+ " AND pc.M_Product_ID=ol.M_Product_ID AND pc.C_AcctSchema_ID=a.C_AcctSchema_ID ");  if (DB.isOracle()) {    sql.append(" AND ROWNUM=1 ");  } else   sql.append(" AND ol.C_OrderLine_ID = (SELECT MIN(ol1.C_OrderLine_ID) " + "FROM C_Order o1, C_OrderLine ol1 " + "WHERE o1.C_Order_ID=ol1.C_Order_ID"+ " AND pc.M_Product_ID=ol1.M_Product_ID ").append("  AND o1.C_Order_ID=").append(get_ID()).append(") ");  sql.append(" AND pc.C_AcctSchema_ID=").append(C_AcctSchema_ID).append(" AND o.C_Order_ID=").append(get_ID()).append(") ").append("WHERE EXISTS (SELECT * " + "FROM C_Order o, C_OrderLine ol, C_AcctSchema a " + "WHERE o.C_Order_ID=ol.C_Order_ID"+ " AND pc.M_Product_ID=ol.M_Product_ID AND pc.C_AcctSchema_ID=a.C_AcctSchema_ID"+ " AND pc.C_AcctSchema_ID=").append(C_AcctSchema_ID).append(" AND o.C_Order_ID=").append(get_ID()).append(")");  int no=DB.executeUpdate(sql.toString(),getTrxName());  log.fine("M_Product_Costing - Updated=" + no);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.328 -0400",hash_original_method="E4D0A1E9799E4532B863FFE2D6A92452",hash_generated_method="E4D0A1E9799E4532B863FFE2D6A92452") void onReallyStop(){  if (mLoadersStarted) {    mLoadersStarted=false;    if (mLoaderManager != null) {      if (!mRetaining) {        mLoaderManager.doStop();      } else {        mLoaderManager.doRetain();      }    }  }  mFragments.dispatchReallyStop();}  }
class C{  public static String domToString(Node n){  return domToString(n,false);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testOneDest(Connection conn,Session sess,Destination cons_dest,int num_msg) throws Exception {  Destination prod_dest;  MessageProducer msg_prod;  LOG.trace("Creating echo queue and producer");  prod_dest=sess.createQueue("echo");  msg_prod=sess.createProducer(prod_dest);  testMessages(sess,msg_prod,cons_dest,num_msg);  msg_prod.close();}  }
class C{  public DexData(RandomAccessFile raf){  mDexFile=raf;}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  public ScrollBarButtonIsIncreaseButtonState(){  super("IncreaseButton");}  }
class C{  @Override public void registerClickUiObjectWatcher(String name,Selector[] conditions,Selector target){synchronized (watchers) {    if (watchers.contains(name)) {      device.removeWatcher(name);      watchers.remove(name);    }    UiSelector[] selectors=new UiSelector[conditions.length];    for (int i=0; i < conditions.length; i++) {      selectors[i]=conditions[i].toUiSelector();    }    device.registerWatcher(name,new ClickUiObjectWatcher(selectors,target.toUiSelector()));    watchers.add(name);  }}  }
class C{  public int multipleByteVectorCrossover(final int min,final int max,final int start,final int subpopulation,final Individual[] inds,final EvolutionState state,final int thread){  if (!(inds[0] instanceof ByteVectorIndividual))   state.output.fatal("Trying to produce byte vector individuals when you can't!");  if (sources.length <= 2)   state.output.error("Only two parents specified!");  int n=typicalIndsProduced();  if (n < min)   n=min;  if (n > max)   n=max;  for (int i=0; i < parents.length; i++) {    sources[i].produce(1,1,i,subpopulation,parents,state,thread);    if (!(sources[i] instanceof BreedingPipeline))     parents[i]=(ByteVectorIndividual)(parents[i].clone());  }  VectorSpecies species=(VectorSpecies)inds[0].species;  for (int i=0; i < parents[0].genomeLength(); i++) {    if (state.random[thread].nextBoolean(species.crossoverProbability)) {      for (int j=parents.length - 1; j > 0; j--) {        int swapIndex=state.random[thread].nextInt(j);        byte temp=((ByteVectorIndividual)parents[j]).genome[i];        ((ByteVectorIndividual)parents[j]).genome[i]=((ByteVectorIndividual)parents[swapIndex]).genome[i];        ((ByteVectorIndividual)parents[swapIndex]).genome[i]=temp;      }    }  }  for (int i=0, q=start; i < parents.length; i++, q++) {    parents[i].evaluated=false;    if (q < inds.length) {      inds[q]=(ByteVectorIndividual)parents[i];    }  }  return n;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void keyReleased(KeyEvent e){  char[] password1=null;  char[] password2=null;  if (exportFilePasswordField != null) {    password1=exportFilePasswordField.getPassword();  }  if (repeatExportFilePasswordField != null) {    password2=repeatExportFilePasswordField.getPassword();  }  boolean tickLabelVisible=false;  if (password1 != null && password2 != null) {    if (Arrays.equals(password1,password2)) {      tickLabelVisible=true;    }  }  tickLabel.setVisible(tickLabelVisible);  clearMessages();  if (password1 != null) {    for (int i=0; i < password1.length; i++) {      password1[i]=0;    }  }  if (password2 != null) {    for (int i=0; i < password2.length; i++) {      password2[i]=0;    }  }}  }
class C{  public static PartialLinearRange createWithStart(final int startOffset){  return new PartialLinearRange(startOffset);}  }
class C{  public static BiosCommandResult createSuccessfulResult(){  BiosCommandResult result=new BiosCommandResult();  result.success();  return result;}  }
class C{  public Object call(Context context,Object source) throws Exception {  if (source != null) {    Session session=context.getSession();    Map table=session.getMap();    if (contextual) {      return method.invoke(source,table);    }    return method.invoke(source);  }  return null;}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  flushStartDoc();  m_resultContentHandler.endPrefixMapping(prefix);}  }
class C{  public byte[] handleRequest(String request) throws IOException, MapRequestFormatException {  Properties requestProperties=convertRequestToProps(request);  String requestType=requestProperties.getProperty(REQUEST);  if (requestType != null) {    if (requestType.equalsIgnoreCase(MAP)) {      Debug.message("imageserver","MRH: Map request...");      return handleMapRequest(requestProperties);    } else {      throw new MapRequestFormatException("Request type not handled: " + requestType);    }  } else {    throw new MapRequestFormatException("Request not understood: " + request);  }}  }
class C{  protected void storeState(){  storedLikelihoodKnown=likelihoodKnown;  storedLogLikelihood=logLikelihood;  storedTreeLength=treeLength;}  }
class C{  public void dismiss(){  mPopupView.mMarker.animateClose();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:24.437 -0500",hash_original_method="8CF23C63ACF7AC4866C0217994609C5E",hash_generated_method="151BD594B611C3D0110CF64AFDFBC1A7") public Bitmap toBitmap(int width,int height,int edge,int numSample,int color){  final Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  final Canvas canvas=new Canvas(bitmap);  canvas.translate(edge,edge);  final Paint paint=new Paint();  paint.setAntiAlias(BITMAP_RENDERING_ANTIALIAS);  paint.setDither(BITMAP_RENDERING_DITHER);  paint.setColor(color);  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeJoin(Paint.Join.ROUND);  paint.setStrokeCap(Paint.Cap.ROUND);  paint.setStrokeWidth(BITMAP_RENDERING_WIDTH);  final ArrayList<GestureStroke> strokes=mStrokes;  final int count=strokes.size();  for (int i=0; i < count; i++) {    Path path=strokes.get(i).toPath(width - 2 * edge,height - 2 * edge,numSample);    canvas.drawPath(path,paint);  }  return bitmap;}  }
class C{  public Member member(){  return member;}  }
class C{  public boolean validate(InputNode node) throws Exception {  Instance value=factory.getInstance(node);  if (!value.isReference()) {    Object result=value.setInstance(null);    Class type=value.getType();    return validate(node,type);  }  return true;}  }
class C{  public static double[] readDoubles(){  return new In().readAllDoubles();}  }
class C{  public final CC gapAfter(String boundsSize){  hor.setGapAfter(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  public static IStatus validatePackageName(String name,String sourceLevel,String complianceLevel){  if (name == null) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_nullName,null);  }  int length;  if ((length=name.length()) == 0) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_emptyName,null);  }  if (name.charAt(0) == DOT || name.charAt(length - 1) == DOT) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_dotName,null);  }  if (CharOperation.isWhitespace(name.charAt(0)) || CharOperation.isWhitespace(name.charAt(name.length() - 1))) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_nameWithBlanks,null);  }  int dot=0;  while (dot != -1 && dot < length - 1) {    if ((dot=name.indexOf(DOT,dot + 1)) != -1 && dot < length - 1 && name.charAt(dot + 1) == DOT) {      return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_consecutiveDotsName,null);    }  }  StringTokenizer st=new StringTokenizer(name,".");  boolean firstToken=true;  IStatus warningStatus=null;  while (st.hasMoreTokens()) {    String typeName=st.nextToken();    typeName=typeName.trim();    char[] scannedID=scannedIdentifier(typeName,sourceLevel,complianceLevel);    if (scannedID == null) {      return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.bind(Messages.convention_illegalIdentifier,typeName),null);    }    if (firstToken && scannedID.length > 0 && ScannerHelper.isUpperCase(scannedID[0])) {      if (warningStatus == null) {        warningStatus=new Status(IStatus.WARNING,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_uppercaseName,null);      }    }    firstToken=false;  }  if (warningStatus != null) {    return warningStatus;  }  return JavaModelStatus.VERIFIED_OK;}  }
class C{  public SlideInUnderneathAnimation(View view){  this.view=view;  direction=DIRECTION_LEFT;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public static void objectStringNonRecursive(@Unretained Object obj,StringBuilder sb){  if (obj instanceof Object[]) {    sb.append('(');    boolean first=true;    for (    Object o : (Object[])obj) {      if (!first) {        sb.append(',');        sb.append(o);      } else {        first=false;        objectStringWithBytes(o,sb);      }    }    sb.append(')');  } else {    objectStringWithBytes(obj,sb);  }}  }
class C{  public String build(){  final Matcher matcher=pattern.matcher(baseString);  if (strictMode && matcher.find()) {    throw new RuntimeException("You didn't pass an arg for key " + matcher.group());  } else {    return baseString;  }}  }
class C{  public AbstractRDFParser(ValueFactory valueFactory){  try {    md5=MessageDigest.getInstance("MD5");  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }  namespaceTable=new HashMap<String,String>(16);  nextBNodePrefix=createUniqueBNodePrefix();  setValueFactory(valueFactory);  setParserConfig(new ParserConfig());}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  public IndentingWriter(Writer out,int step,int tabSize){  this(out);  if (indentStep < 0)   throw new IllegalArgumentException("negative indent step");  indentStep=step;  this.tabSize=tabSize;}  }
class C{  private void loadAttributes(AttributeSet attrs){  if (attrs != null) {    TypedArray typedArray=getContext().obtainStyledAttributes(attrs,R.styleable.Picker);    if (typedArray != null) {      textColor=typedArray.getColor(R.styleable.Picker_textColor,textColor);      dialColor=typedArray.getColor(R.styleable.Picker_dialColor,dialColor);      clockColor=typedArray.getColor(R.styleable.Picker_clockColor,clockColor);      canvasColor=typedArray.getColor(R.styleable.Picker_canvasColor,canvasColor);      hourFormat=typedArray.getBoolean(R.styleable.Picker_hourFormat,hourFormat);      trackSize=typedArray.getDimensionPixelSize(R.styleable.Picker_trackSize,trackSize);      dialRadiusDP=typedArray.getDimensionPixelSize(R.styleable.Picker_dialRadius,dialRadiusDP);      typedArray.recycle();    }  }}  }
class C{  public CharacterClassRange createCharacterClassRange(){  CharacterClassRangeImpl characterClassRange=new CharacterClassRangeImpl();  return characterClassRange;}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  static void sort(double[] a,int left,int right,double[] work,int workBase,int workLen){  while (left <= right && Double.isNaN(a[right])) {    --right;  }  for (int k=right; --k >= left; ) {    double ak=a[k];    if (ak != ak) {      a[k]=a[right];      a[right]=ak;      --right;    }  }  doSort(a,left,right,work,workBase,workLen);  int hi=right;  while (left < hi) {    int middle=(left + hi) >>> 1;    double middleValue=a[middle];    if (middleValue < 0.0d) {      left=middle + 1;    } else {      hi=middle;    }  }  while (left <= right && Double.doubleToRawLongBits(a[left]) < 0) {    ++left;  }  for (int k=left, p=left - 1; ++k <= right; ) {    double ak=a[k];    if (ak != 0.0d) {      break;    }    if (Double.doubleToRawLongBits(ak) < 0) {      a[k]=0.0d;      a[++p]=-0.0d;    }  }}  }
class C{  public CSelectionHistory(final ZyGraph graph,final int maxSnapshots){  m_graph=Preconditions.checkNotNull(graph,"IE01813: Graph argument can not be null");  Preconditions.checkArgument(maxSnapshots > 0,"IE01814: Invalid maximum snapshot number");  m_maxSnapshots=maxSnapshots;}  }
class C{  public void addBuildScript(String pathname){  _buildScripts.add(pathname);  setDirtyAndFirePropertyChange("addBuildScript",pathname,null);}  }
class C{  public void GET(final MultiProtocolURL url,final boolean concurrent) throws IOException {  if (this.currentRequest != null)   throw new IOException("Client is in use!");  final String urix=url.toNormalform(true);  HttpGet httpGet=null;  try {    httpGet=new HttpGet(urix);  } catch (  IllegalArgumentException e) {    throw new IOException(e.getMessage());  }  setHost(url.getHost());  this.currentRequest=httpGet;  execute(httpGet,concurrent);}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  public boolean canSubmitToCluster(){  int runningJobs=allClusterProjectJobsCount - pendingClusterProjectJobsCount;  if (allClusterProjectJobsCount >= gridLimit || (runningJobs == 0 && pendingClusterProjectJobsCount > 5) || (pendingClusterProjectJobsCount > (runningJobs * 0.1) && allClusterProjectJobsCount > 10)) {    return false;  }  return true;}  }
class C{  private void initConverter(){  InetAddress tracedServiceHostname=null;  try {    String host=conf.get("zipkin.traced-service-hostname",InetAddress.getLocalHost().getHostAddress());    tracedServiceHostname=InetAddress.getByName(host);  } catch (  UnknownHostException e) {    LOG.error("Couldn't get the localHost address",e);  }  short tracedServicePort=(short)conf.getInt("zipkin.traced-service-port",-1);  byte[] address=tracedServiceHostname != null ? tracedServiceHostname.getAddress() : InetAddress.getLoopbackAddress().getAddress();  int ipv4=ByteBuffer.wrap(address).getInt();  this.converter=new HTraceToZipkinConverter(ipv4,tracedServicePort);}  }
class C{  @VisibleForTesting protected void startForegroundService(PendingIntent pendingIntent,int messageId){  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setContentIntent(pendingIntent).setContentText(getString(messageId)).setContentTitle(getString(R.string.my_tracks_app_name)).setOngoing(true).setSmallIcon(R.drawable.ic_stat_notify_recording).setWhen(System.currentTimeMillis());  startForeground(1,builder.build());}  }
class C{  public NotificationChain basicSetIndex(Expression newIndex,NotificationChain msgs){  Expression oldIndex=index;  index=newIndex;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.INDEXED_ACCESS_EXPRESSION__INDEX,oldIndex,newIndex);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void flush(long nowMsSinceEpoch){  checkArgument(nowMsSinceEpoch >= 0,"Only positive timestamps supported");  if (currentIndex < 0) {    currentMsSinceEpoch=nowMsSinceEpoch - (nowMsSinceEpoch % sampleUpdateMs);    currentIndex=0;  }  checkArgument(nowMsSinceEpoch >= currentMsSinceEpoch,"Attempting to move backwards");  int newBuckets=Math.min((int)((nowMsSinceEpoch - currentMsSinceEpoch) / sampleUpdateMs),buckets.length);  while (newBuckets > 0) {    currentIndex=(currentIndex + 1) % buckets.length;    buckets[currentIndex]=function.identity();    numSamples[currentIndex]=0;    newBuckets--;    currentMsSinceEpoch+=sampleUpdateMs;  }}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  public static boolean isHeader(Header hdr){  if (hdr.getStringValue(XTENSION) != null && hdr.getIntValue(NAXIS,-1) >= 0) {    return true;  }  return false;}  }
class C{  public static Exchange newInstance(String value){  final Exchange returnInstance=new Exchange();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  @Override public boolean incrementToken() throws IOException {  if (!input.incrementToken())   return false;  char[] term=termAttribute.buffer();  int len=termAttribute.length();  if ((!keywordAtt.isKeyword()) && stemmer.stem(term,len)) {    termAttribute.setEmpty().append(stemmer.asCharSequence());  }  return true;}  }
class C{  protected void replaceEntities(final MutableString s,final MutableString entity,final boolean loose){  final char[] a=s.array();  int length=s.length();  int i=length, j;  while (i-- > 0)   if (a[i] == '&' && (j=scanEntity(a,i,length - i,loose,entity)) != -1)   length=s.replace(i,j,lastEntity).length();}  }
class C{  public static void main(String[] args){  MouseDrag simulation=new MouseDrag();  simulation.run();}  }
class C{  protected Node newNode(){  return new SVGOMTitleElement();}  }
class C{  public void filterAgainstList(String fileName){  System.err.println("Filtering against list: " + fileName);  try {    LineNumberReader fReader=IOTools.getReaderFromFile(fileName);    for (String fLine; (fLine=fReader.readLine()) != null; ) {      int[] f=IStrings.toIntArray(IStrings.toIStringArray(fLine.split("\\s+")));      if (SHOW_PHRASE_RESTRICTION)       System.err.printf("Restrict to phrase: %s\n",f.toString());      sourcePhraseTable.indexOf(f,true);    }    fReader.close();  } catch (  IOException e) {    e.printStackTrace();  }  isEnabled=true;}  }
class C{  public int capacity(){  return array.length;}  }
class C{  @Override public void dispose(){  debugGui.removeWindow(this);  super.dispose();}  }
class C{  public boolean isChanged(String key){  return m_changes.containsKey(key);}  }
class C{  public boolean isDeleteContents(){  return fDeleteContents;}  }
class C{  public HandlerSubscriber(EventExecutor executor,long demandLowWatermark,long demandHighWatermark){  this.executor=executor;  this.demandLowWatermark=demandLowWatermark;  this.demandHighWatermark=demandHighWatermark;}  }
class C{  private void writeDataTofile(Object[][] recordHolderList,int entryCountLocal,File file) throws CarbonSortKeyAndGroupByException {  if (isSortFileCompressionEnabled || prefetch) {    writeSortTempFile(recordHolderList,entryCountLocal,file);    return;  }  writeData(recordHolderList,entryCountLocal,file);}  }
class C{  private void resetLengthValue(){  targetStart=0;  targetEnd=0;}  }
class C{  void txMessage(DMessage message) throws IOException {  int size=message.getSize();  int command=message.getType();  writeDWord(size);  writeDWord(command);  writeData(message.getData(),size);  m_out.flush();synchronized (this) {    m_msgTx++;  }  getMessageCounter().messageSent(message);}  }
class C{  public static final synchronized HttpClient createHttpClient(int timeout){  HttpParams params=new BasicHttpParams();  HttpConnectionParams.setConnectionTimeout(params,timeout);  HttpConnectionParams.setSoTimeout(params,2 * timeout);  HttpClientParams.setRedirecting(params,true);  HttpClientParams.setAuthenticating(params,true);  HttpClientParams.setCookiePolicy(params,CookiePolicy.BROWSER_COMPATIBILITY);  List<String> authPref=new ArrayList<String>();  authPref.add(AuthPolicy.DIGEST);  authPref.add(AuthPolicy.BASIC);  params.setParameter(AuthPNames.TARGET_AUTH_PREF,authPref);  params.setParameter(ClientPNames.MAX_REDIRECTS,1);  params.setParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS,true);  DefaultHttpClient httpclient;  if (httpConnectionManager == null) {    httpclient=new DefaultHttpClient(params);    httpConnectionManager=httpclient.getConnectionManager();  } else {    httpclient=new DefaultHttpClient(httpConnectionManager,params);  }  return httpclient;}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == this) {    return true;  }  if (obj instanceof Fraction == false) {    return false;  }  final Fraction other=(Fraction)obj;  return getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator();}  }
class C{  public ToolbarTablet(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  private void logOutputVolume(Operator operator,OutputPort port,int rows,int columns){  logVolume(TYPE_OUTPUT_VOLUME,operator,port,rows,columns);}  }
class C{  public CommandAPDU(int cla,int ins,int p1,int p2,byte[] data,int dataOffset,int dataLength,int ne){  checkArrayBounds(data,dataOffset,dataLength);  if (dataLength > 65535) {    throw new IllegalArgumentException("dataLength is too large");  }  if (ne < 0) {    throw new IllegalArgumentException("ne must not be negative");  }  if (ne > 65536) {    throw new IllegalArgumentException("ne is too large");  }  this.ne=ne;  this.nc=dataLength;  if (dataLength == 0) {    if (ne == 0) {      this.apdu=new byte[4];      setHeader(cla,ins,p1,p2);    } else {      if (ne <= 256) {        byte len=(ne != 256) ? (byte)ne : 0;        this.apdu=new byte[5];        setHeader(cla,ins,p1,p2);        this.apdu[4]=len;      } else {        byte l1, l2;        if (ne == 65536) {          l1=0;          l2=0;        } else {          l1=(byte)(ne >> 8);          l2=(byte)ne;        }        this.apdu=new byte[7];        setHeader(cla,ins,p1,p2);        this.apdu[5]=l1;        this.apdu[6]=l2;      }    }  } else {    if (ne == 0) {      if (dataLength <= 255) {        apdu=new byte[4 + 1 + dataLength];        setHeader(cla,ins,p1,p2);        apdu[4]=(byte)dataLength;        this.dataOffset=5;        System.arraycopy(data,dataOffset,apdu,5,dataLength);      } else {        apdu=new byte[4 + 3 + dataLength];        setHeader(cla,ins,p1,p2);        apdu[4]=0;        apdu[5]=(byte)(dataLength >> 8);        apdu[6]=(byte)dataLength;        this.dataOffset=7;        System.arraycopy(data,dataOffset,apdu,7,dataLength);      }    } else {      if ((dataLength <= 255) && (ne <= 256)) {        apdu=new byte[4 + 2 + dataLength];        setHeader(cla,ins,p1,p2);        apdu[4]=(byte)dataLength;        this.dataOffset=5;        System.arraycopy(data,dataOffset,apdu,5,dataLength);        apdu[apdu.length - 1]=(ne != 256) ? (byte)ne : 0;      } else {        apdu=new byte[4 + 5 + dataLength];        setHeader(cla,ins,p1,p2);        apdu[4]=0;        apdu[5]=(byte)(dataLength >> 8);        apdu[6]=(byte)dataLength;        this.dataOffset=7;        System.arraycopy(data,dataOffset,apdu,7,dataLength);        if (ne != 65536) {          int leOfs=apdu.length - 2;          apdu[leOfs]=(byte)(ne >> 8);          apdu[leOfs + 1]=(byte)ne;        }      }    }  }}  }
class C{  public void testInitialInsert() throws Exception {  AtomicIntervalGuard<String> ati=new AtomicIntervalGuard<String>(4);  Integer[] t={new Integer(0),new Integer(1),new Integer(2),new Integer(3)};  ati.report(t[0],2,20,"2");  assertEquals("Head #1",2,ati.getLowSeqno());  assertEquals("Tail #1",2,ati.getHiSeqno());  assertEquals("Head #1 -time",20,ati.getLowTime());  assertEquals("Tail #1 -time",20,ati.getHiTime());  assertEquals("Head #1 -datum","2",ati.getLowDatum());  assertEquals("Tail #1 -datum","2",ati.getHiDatum());  ati.validate();  assertEquals("Interval #1",0,ati.getInterval());  ati.report(t[1],1,10,"1");  assertEquals("Head #2",1,ati.getLowSeqno());  assertEquals("Tail #2",2,ati.getHiSeqno());  assertEquals("Head #2 -time",10,ati.getLowTime());  assertEquals("Tail #2 -time",20,ati.getHiTime());  assertEquals("Head #2 -datum","1",ati.getLowDatum());  assertEquals("Tail #2 -datum","2",ati.getHiDatum());  assertEquals("Interval #2",10,ati.getInterval());  ati.validate();  ati.report(t[2],4,40);  assertEquals("Head #3",1,ati.getLowSeqno());  assertEquals("Tail #3",4,ati.getHiSeqno());  assertEquals("Head #3 -time",10,ati.getLowTime());  assertEquals("Tail #3 -time",40,ati.getHiTime());  assertEquals("Head #3 -datum","1",ati.getLowDatum());  assertNull("Tail #3 -datum",ati.getHiDatum());  assertEquals("Interval #3",30,ati.getInterval());  ati.validate();  ati.report(t[3],3,30,"3");  assertEquals("Head #4",1,ati.getLowSeqno());  assertEquals("Tail #4",4,ati.getHiSeqno());  assertEquals("Head #4 -time",10,ati.getLowTime());  assertEquals("Tail #4 -time",40,ati.getHiTime());  assertEquals("Head #4 -datum","1",ati.getLowDatum());  assertNull("Tail #4 -datum",ati.getHiDatum());  assertEquals("Interval #4",30,ati.getInterval());  ati.validate();}  }
class C{  protected JvmRTInputArgsEntryMeta createJvmRTInputArgsEntryMetaNode(String snmpEntryName,String tableName,SnmpMib mib,MBeanServer server){  return new JvmRTInputArgsEntryMeta(mib,objectserver);}  }
class C{  private void verifyChainIsNotCalled(final FilterChain chain) throws IOException, ServletException {  verify(chain,Mockito.never()).doFilter(Mockito.any(HttpServletRequest.class),Mockito.any(HttpServletResponse.class));}  }
class C{  public static <T>ArrayList<T> arrayList(int initialCapacity){  return new ArrayList<T>(initialCapacity);}  }
class C{  public static void assertNumSegments(SolrCore core,int expected){  RefCounted<SolrIndexSearcher> searcherRef=core.getRegisteredSearcher();  try {    assertEquals(expected,searcherRef.get().getIndexReader().leaves().size());  }  finally {    searcherRef.decref();  }}  }
class C{  public Vertex parseStateMachine(InputStream stream,boolean debug,Network network,String encoding,int maxSize){  String text=Utils.loadTextFile(stream,encoding,maxSize);  return parseStateMachine(text,debug,network);}  }
class C{  public static Hilite[] convertToHiliteArray(JavaScriptObject nativeArray){  if (nativeArray == null) {    return new Hilite[]{};  }  if (JSOHelper.isArray(nativeArray)) {    JavaScriptObject[] hilitesJS=JSOHelper.toArray(nativeArray);    Hilite[] objects=new Hilite[hilitesJS.length];    for (int i=0; i < hilitesJS.length; i++) {      JavaScriptObject hiliteJS=hilitesJS[i];      Hilite obj=(Hilite)RefDataClass.getRef(hiliteJS);      if (obj == null)       obj=new Hilite(hiliteJS);      objects[i]=obj;    }    return objects;  } else {    Hilite[] ret=new Hilite[1];    ret[0]=Hilite.getOrCreateRef(nativeArray);    return ret;  }}  }
class C{  WorkspaceComponentSerializer(final OutputStream stream){  this.stream=stream;}  }
class C{  public SharedFsCheckpointSpi(){  dirPaths.offer(DFLT_DIR_PATH);}  }
class C{  protected void installNormalBorders(JComponent c){  Component[] components=c.getComponents();  for (int i=0; i < components.length; ++i) {    setBorderToNormal(components[i]);  }}  }
class C{  public synchronized void addTextListener(TextListener cl){  m_textListeners.addElement(cl);}  }
class C{  public int lastseen(){  String x=this.get(Schema.lastseen);  if (x == null)   return Integer.MAX_VALUE;  try {    return Integer.parseInt(x);  } catch (  final NumberFormatException e) {    return Integer.MAX_VALUE;  }}  }
class C{  void maybeAddDependency(View anchorView,View childView,ViewChaseChoreography choreography){  if (childChoreography.containsKey(anchorView)) {    ChoreographyChain child=childChoreography.get(anchorView);    child.addChildDependency(childView,choreography);    return;  }  for (  ChoreographyChain d : childChoreography.values()) {    d.maybeAddDependency(anchorView,childView,choreography);  }}  }
class C{  protected void parseButtonCXForm(InStream in) throws IOException {  int buttonId=in.readUI16();  ColorTransform transform=new ColorTransform(in);  tagtypes.tagButtonCXForm(buttonId,transform);}  }
class C{  public void commentChar(int ch){  if (ch >= 0 && ch < ctype.length)   ctype[ch]=CT_COMMENT;}  }
class C{  private double calcNodeScoreADTree(int nNode){  Instances instances=m_BayesNet.m_Instances;  ParentSet oParentSet=m_BayesNet.getParentSet(nNode);  int nNrOfParents=oParentSet.getNrOfParents();  int[] nNodes=new int[nNrOfParents + 1];  for (int iParent=0; iParent < nNrOfParents; iParent++) {    nNodes[iParent]=oParentSet.getParent(iParent);  }  nNodes[nNrOfParents]=nNode;  int[] nOffsets=new int[nNrOfParents + 1];  int nOffset=1;  nOffsets[nNrOfParents]=1;  nOffset*=instances.attribute(nNode).numValues();  for (int iNode=nNrOfParents - 1; iNode >= 0; iNode--) {    nOffsets[iNode]=nOffset;    nOffset*=instances.attribute(nNodes[iNode]).numValues();  }  for (int iNode=1; iNode < nNodes.length; iNode++) {    int iNode2=iNode;    while (iNode2 > 0 && nNodes[iNode2] < nNodes[iNode2 - 1]) {      int h=nNodes[iNode2];      nNodes[iNode2]=nNodes[iNode2 - 1];      nNodes[iNode2 - 1]=h;      h=nOffsets[iNode2];      nOffsets[iNode2]=nOffsets[iNode2 - 1];      nOffsets[iNode2 - 1]=h;      iNode2--;    }  }  int nCardinality=oParentSet.getCardinalityOfParents();  int numValues=instances.attribute(nNode).numValues();  int[] nCounts=new int[nCardinality * numValues];  m_BayesNet.getADTree().getCounts(nCounts,nNodes,nOffsets,0,0,false);  return calcScoreOfCounts(nCounts,nCardinality,numValues,instances);}  }
class C{  private static void printXmlMethods(ClassRef cref){  MethodRef[] methods=cref.getMethodArray();  for (int i=0; i < methods.length; i++) {    MethodRef mref=methods[i];    String declClassName=mref.getDeclClassName();    boolean constructor;    constructor=mref.getName().equals("<init>");    if (constructor) {      out.println(IN3 + "<constructor name=\"" + classNameOnly(declClassName)+ "\">");    } else {      out.println(IN3 + "<method name=\"" + mref.getName()+ "\" return=\""+ descriptorToDot(mref.getReturnTypeName())+ "\">");    }    String[] args=mref.getArgumentTypeNames();    for (int j=0; j < args.length; j++) {      out.println(IN4 + "<parameter type=\"" + descriptorToDot(args[j])+ "\"/>");    }    if (constructor) {      out.println(IN3 + "</constructor>");    } else {      out.println(IN3 + "</method>");    }  }}  }
class C{  private static long binarySearch(RandomAccessFile raf,Date date,long l,long r) throws IOException {  if (r <= l)   return l;  long m=seekLB(raf,(l + r) / 2);  if (m <= l)   return m;  Date mDate=readDate(raf,m);  if (mDate.after(date))   return binarySearch(raf,date,l,m);  return binarySearch(raf,date,m,r);}  }
class C{  public boolean isLeaf(){  EList<Region> subRegions=getRegions();  for (  Region region : subRegions) {    if (region.getVertices().size() > 0)     return false;  }  return true;}  }
class C{  public static String stripSignatureToFQN(String signature) throws IllegalArgumentException {  signature=Signature.getTypeErasure(signature);  signature=Signature.getElementType(signature);  return Signature.toString(signature);}  }
class C{  public Long move(final byte[] key,final int dbIndex){  checkIsInMulti();  client.move(key,dbIndex);  return client.getIntegerReply();}  }
class C{  public FilteredAssociationRules(String producer,Filter filter,AssociationRules rules){  super(null,producer);  m_filter=filter;  m_wrappedRules=rules;}  }
class C{  public void loadVersion1(File f) throws ConfigPersisterException {  try {    Props props=new Props(f);    _config=new Config();    String header=props.getProperty(Config.HEADER);    _config.setHeaderType(header == null || header.toLowerCase().equals("guihead.bin") ? Config.GUI_HEADER : Config.CONSOLE_HEADER);    _config.setJar(props.getFile(Config.JAR));    _config.setOutfile(props.getFile(Config.OUTFILE));    _config.setJre(new Jre());    _config.getJre().setPath(props.getProperty(Jre.PATH));    _config.getJre().setMinVersion(props.getProperty(Jre.MIN_VERSION));    _config.getJre().setMaxVersion(props.getProperty(Jre.MAX_VERSION));    String args=props.getProperty(Jre.ARGS);    if (args != null) {      List<String> jreOptions=new ArrayList<String>();      jreOptions.add(args);      _config.getJre().setOptions(jreOptions);    }    _config.setCmdLine(props.getProperty(Config.JAR_ARGS));    _config.setChdir("true".equals(props.getProperty(Config.CHDIR)) ? "." : null);    _config.setStayAlive("true".equals(props.getProperty(Config.STAY_ALIVE)));    _config.setErrTitle(props.getProperty(Config.ERR_TITLE));    _config.setIcon(props.getFile(Config.ICON));    File splashFile=props.getFile(Splash.SPLASH_FILE);    if (splashFile != null) {      _config.setSplash(new Splash());      _config.getSplash().setFile(splashFile);      String waitfor=props.getProperty("waitfor");      _config.getSplash().setWaitForWindow(waitfor != null && !waitfor.equals(""));      String splashTimeout=props.getProperty(Splash.TIMEOUT);      if (splashTimeout != null) {        _config.getSplash().setTimeout(Integer.parseInt(splashTimeout));      }      _config.getSplash().setTimeoutErr("true".equals(props.getProperty(Splash.TIMEOUT_ERR)));    } else {      _config.setSplash(null);    }    setConfigPath(f);  } catch (  IOException e) {    throw new ConfigPersisterException(e);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public boolean isFound(){  return found;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:34.116 -0500",hash_original_method="ABB616725C31652C20F8F96BBDEFC6AA",hash_generated_method="E03276DC332DEF5DB0A396B708CD9689") private boolean isActivityAvailable(Intent intent){  PackageManager pm=mContext.getPackageManager();  List<ResolveInfo> list=pm.queryIntentActivities(intent,0);  int listSize=list.size();  for (int i=0; i < listSize; i++) {    ResolveInfo resolveInfo=list.get(i);    if ((resolveInfo.activityInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {      return true;    }  }  return false;}  }
class C{  protected XBLOMShadowTreeElement(){}  }
class C{  private boolean validateStoragePool(CIMObjectPath path,Map<String,Object> keyMap){  String serialID=(String)keyMap.get(Constants._serialID);  if (path.getKey("InstanceID").getValue().toString().contains(serialID)) {    return true;  }  return false;}  }
class C{  public StopWords(){  this(DEFAULT_BIG_STOPWORDS);}  }
class C{  protected void uninstallOnChildThread(){}  }
class C{  public boolean isStorageExisting(StorageData storageData){  for (  StorageData existing : existingStoragesSet) {    if (existing.getId().equals(storageData.getId())) {      return true;    }  }  return false;}  }
