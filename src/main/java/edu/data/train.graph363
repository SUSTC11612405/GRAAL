class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:07.691 -0500",hash_original_method="B360A744DA2558AEF3A4AD32A9DD66E9",hash_generated_method="44A00FDBD3345690E803FCDCD1070EBA") public ClientHello(SecureRandom sr,byte[] version,byte[] ses_id,CipherSuite[] cipher_suite){  client_version=version;  long gmt_unix_time=System.currentTimeMillis() / 1000;  sr.nextBytes(random);  random[0]=(byte)(gmt_unix_time & 0xFF000000 >>> 24);  random[1]=(byte)(gmt_unix_time & 0xFF0000 >>> 16);  random[2]=(byte)(gmt_unix_time & 0xFF00 >>> 8);  random[3]=(byte)(gmt_unix_time & 0xFF);  session_id=ses_id;  this.cipher_suites=cipher_suite;  compression_methods=new byte[]{0};  length=38 + session_id.length + (this.cipher_suites.length << 1)+ compression_methods.length;}  }
class C{  public static String toStringNeverNull(Object o){  return o == null ? "null" : o.toString();}  }
class C{  public IMultiPoint next(){  if (stack.empty()) {    throw new java.util.NoSuchElementException("Dimensional Traversal Iterator has no more elements");  }  Moment m=stack.peek();  advance();  return m.node.point;}  }
class C{  public static boolean onTheLineSegment(double x0,double y0,double x1,double y1,double x2,double y2){  return (pointPosition(x0,y0,x1,y1,x2,y2) == 0 && (x2 > x0) && (y2 > y0) && (x2 < x1) && (y2 < y1));}  }
class C{  @Ignore("This test needs an existing DOI registered with EZID plugged into it each time - test DOIs are periodically purged") public void testDeleteReservedExistingRegisteredDoiEZID() throws Exception {  AppConfig mockAppConfig=mock(AppConfig.class);  RegistrationManager mockRegistrationManagerEZID=mock(RegistrationManager.class);  Organisation oEZID=new Organisation();  oEZID.setKey(ORGANISATION_KEY.toString());  oEZID.setAgencyAccountPrimary(true);  oEZID.setName("GBIF");  oEZID.setDoiPrefix("10.5072/FK2");  oEZID.setCanHost(true);  oEZID.setAgencyAccountUsername("apitest");  oEZID.setAgencyAccountPassword("apitest");  oEZID.setDoiRegistrationAgency(DOIRegistrationAgency.EZID);  when(mockRegistrationManagerEZID.findPrimaryDoiAgencyAccount()).thenReturn(oEZID);  when(mockRegistrationManagerEZID.get(any(UUID.class))).thenReturn(oEZID);  ServiceConfig cfgEZID=new ServiceConfig("apitest","apitest");  EzidService ezidService=new EzidService(HttpUtil.newMultithreadedClient(10000,2,2),cfgEZID);  when(mockRegistrationManagerEZID.getDoiService()).thenReturn(ezidService);  action=new OverviewAction(mock(SimpleTextProvider.class),mockAppConfig,mockRegistrationManagerEZID,mock(ResourceManager.class),mock(UserAccountManager.class),mock(ExtensionManager.class),mock(VocabulariesManager.class),mock(GenerateDwcaFactory.class));  LOG.info("Testing EZID with test Prefix...");  action.setDeleteDoi("true");  DOI existingDOI=new DOI("doi:10.5072/FK2KNEMBG");  r.setCitationAutoGenerated(true);  r.getEml().setCitation(new Citation("Replaced by auto-generated citation",existingDOI.toString()));  r.setDoi(existingDOI);  r.setIdentifierStatus(IdentifierStatus.PUBLIC_PENDING_PUBLICATION);  action.setResource(r);  assertNotNull(r.getDoi());  assertEquals(IdentifierStatus.PUBLIC_PENDING_PUBLICATION,r.getIdentifierStatus());  assertNotNull(r.getEml().getCitation());  assertNotNull(r.getEml().getCitation().getIdentifier());  action.deleteDoi();  DoiData doiData=ezidService.resolve(existingDOI);  assertNotNull(doiData);  assertNotNull(doiData.getStatus());  assertEquals(DoiStatus.REGISTERED,doiData.getStatus());  assertNull(r.getDoi());  assertNull(r.getDoiOrganisationKey());  assertEquals(IdentifierStatus.UNRESERVED,r.getIdentifierStatus());  assertEquals(0,r.getEml().getAlternateIdentifiers().size());  assertNull(r.getEml().getCitation().getIdentifier());  LOG.info("Existing reserved registered DOI was deleted successfully without making it unavailable, DOI=" + existingDOI.getDoiName());}  }
class C{  public static ComponentUI createUI(JComponent list){  return new SeaGlassListUI();}  }
class C{  protected ShaderVar addUniform(IGlobalShaderVar var,int index){  return addUniform(var.getVarString() + Integer.toString(index),var.getDataType());}  }
class C{  XSLTElementProcessor(){}  }
class C{  public void saveManagedDBCredentialForScanner2(String username,String dbGroup,String dbuser,String password){  AppUser defaultUser=getUserManager().getUser(MetaDB.DEFAULT_USER);  AppUser metricsUser=getUserManager().getUser(getMyperfConfig().getMetricsScannerUser());  if (!MetaDB.DEFAULT_USER.equals(username) && DBUtils.findDBCredential(this,dbGroup,defaultUser) == null) {    DBCredential cred2=new DBCredential();    cred2.setAppUser(defaultUser.getName());    cred2.setDbGroupName(dbGroup);    cred2.setUsername(dbuser);    cred2.setPassword(password);    getMetaDb().upsertDBCredential(cred2);    this.dbInfoManager.getMyDatabases(cred2.getAppUser(),false).addDb(cred2.getDbGroupName());  }  if (metricsUser != null && !MetaDB.DEFAULT_USER.equals(metricsUser.getName()) && !username.equals(metricsUser.getName()) && DBUtils.findDBCredential(this,dbGroup,metricsUser) == null) {    DBCredential cred2=new DBCredential();    cred2.setAppUser(metricsUser.getName());    cred2.setDbGroupName(dbGroup);    cred2.setUsername(dbuser);    cred2.setPassword(password);    getMetaDb().upsertDBCredential(cred2);    this.dbInfoManager.getMyDatabases(cred2.getAppUser(),false).addDb(cred2.getDbGroupName());  }}  }
class C{  public Cheque withDiagnosticUser(User user){  this.setDiagnostics(SampleDataService.getSetConsistFrom(null));  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static TypesTree createDefaultDndTypesTree(final TypeManager typeManager){  Preconditions.checkNotNull(typeManager,"Error: typeManager argument can not be null");  final TypesTree typesTree=CreateDragAndDropTypesTree(typeManager);  typesTree.setModel(TypesTreeModel.createDefaultModel(typeManager));  return typesTree;}  }
class C{  private JTicketsBagSharedList(java.awt.Frame parent,boolean modal){  super(parent,modal);}  }
class C{  public TeXFormula addStrut(int type) throws InvalidUnitException {  return add(new SpaceAtom(type));}  }
class C{  public TableDemo(SpreadsheetService service,PrintStream outputStream){  this.out=outputStream;  this.service=service;  this.factory=FeedURLFactory.getDefault();  this.entriesCached=new HashMap<String,TableEntry>();}  }
class C{  public void reset(){  mSearchBarController.reset();  mAppsRecyclerView.reset();}  }
class C{  public StratifiedCrossValidation(int nfold){  super();  this.nfold=nfold;}  }
class C{  private void createJavaAnnotations(){  if (ds.contains(RDFS.LITERAL,null,null)) {    ds.add(RDFS.LITERAL,RDF.TYPE,RDFS.DATATYPE);  }  if (ds.contains(null,RDFS.SUBCLASSOF,null)) {    ds.add(RDFS.SUBCLASSOF,RDF.TYPE,OWL.ANNOTATIONPROPERTY);  }  if (ds.contains(null,RDFS.SUBPROPERTYOF,null)) {    ds.add(RDFS.SUBPROPERTYOF,RDF.TYPE,OWL.ANNOTATIONPROPERTY);  }  if (ds.contains(null,OWL.EQUIVALENTCLASS,null)) {    ds.add(OWL.EQUIVALENTCLASS,RDF.TYPE,OWL.ANNOTATIONPROPERTY);  }  if (ds.contains(null,OWL.COMPLEMENTOF,null)) {    ds.add(OWL.COMPLEMENTOF,RDF.TYPE,OWL.ANNOTATIONPROPERTY);    ds.add(OWL.COMPLEMENTOF,RDF.TYPE,OWL.FUNCTIONALPROPERTY);    ds.add(OWL.COMPLEMENTOF,RDFS.RANGE,OWL.CLASS);  }  if (ds.contains(null,OWL.INTERSECTIONOF,null)) {    ds.add(OWL.INTERSECTIONOF,RDF.TYPE,OWL.ANNOTATIONPROPERTY);  }  if (ds.contains(null,OWL.UNIONOF,null)) {    ds.add(OWL.UNIONOF,RDF.TYPE,OWL.ANNOTATIONPROPERTY);  }  if (ds.contains(null,OWL.HASVALUE,null)) {    ds.add(OWL.HASVALUE,RDF.TYPE,OWL.FUNCTIONALPROPERTY);    ds.add(OWL.HASVALUE,RDF.TYPE,OWL.ANNOTATIONPROPERTY);    ds.add(OWL.ONEOF,RDF.TYPE,OWL.ANNOTATIONPROPERTY);  } else   if (ds.contains(null,OWL.ONEOF,null)) {    ds.add(OWL.ONEOF,RDF.TYPE,OWL.ANNOTATIONPROPERTY);  }  if (ds.contains(null,OWL.SOMEVALUESFROM,null)) {    ds.add(OWL.SOMEVALUESFROM,RDF.TYPE,OWL.FUNCTIONALPROPERTY);    ds.add(OWL.SOMEVALUESFROM,RDF.TYPE,OWL.ANNOTATIONPROPERTY);    ds.add(OWL.SOMEVALUESFROM,RDFS.RANGE,OWL.CLASS);  }  if (ds.contains(null,OWL.MAXCARDINALITY,null)) {    ds.add(OWL.MAXCARDINALITY,RDF.TYPE,OWL.FUNCTIONALPROPERTY);    ds.add(OWL.MAXCARDINALITY,RDF.TYPE,OWL.ANNOTATIONPROPERTY);    ds.add(OWL.MAXCARDINALITY,RDFS.RANGE,XMLSchema.NON_NEGATIVE_INTEGER);  }  if (ds.contains(null,OWL.MINCARDINALITY,null)) {    ds.add(OWL.MINCARDINALITY,RDF.TYPE,OWL.FUNCTIONALPROPERTY);    ds.add(OWL.MINCARDINALITY,RDF.TYPE,OWL.ANNOTATIONPROPERTY);    ds.add(OWL.MINCARDINALITY,RDFS.RANGE,XMLSchema.NON_NEGATIVE_INTEGER);  }  if (ds.contains(null,OWL.CARDINALITY,null)) {    ds.add(OWL.CARDINALITY,RDF.TYPE,OWL.FUNCTIONALPROPERTY);    ds.add(OWL.CARDINALITY,RDF.TYPE,OWL.ANNOTATIONPROPERTY);    ds.add(OWL.CARDINALITY,RDFS.RANGE,XMLSchema.NON_NEGATIVE_INTEGER);  }}  }
class C{  public static ConstParameter string(String s){  return new StringConstParameter(s);}  }
class C{  protected boolean isDrawDoubleLabel(){  return !TacGrpSidc.FSUPP_LNE_C2LNE_CFL.equalsIgnoreCase(this.maskedSymbolCode);}  }
class C{  public static boolean idEquals(DataObjectRestRep first,RelatedResourceRep second){  return equals(id(first),id(second));}  }
class C{  private int keyToLevel(String key){  String[] token=key.split("/");  return (token.length - 1);}  }
class C{  @Override public int hashCode(){  int result=bucketName.hashCode();  result=31 * result + name.hashCode();  result=31 * result + createdTime.hashCode();  result=31 * result + (int)(length ^ (length >>> 32));  result=31 * result + etag.hashCode();  result=31 * result + contentType.hashCode();  return result;}  }
class C{  public int columns(){  return columns;}  }
class C{  public void copy(IndexInput in,long byteCount) throws IOException {  while (byteCount > 0) {    int left=blockSize - upto;    if (left == 0) {      if (currentBlock != null) {        addBlock(currentBlock);      }      currentBlock=new byte[blockSize];      upto=0;      left=blockSize;    }    if (left < byteCount) {      in.readBytes(currentBlock,upto,left,false);      upto=blockSize;      byteCount-=left;    } else {      in.readBytes(currentBlock,upto,(int)byteCount,false);      upto+=byteCount;      break;    }  }}  }
class C{  private void insertLineTrx(int line,String variable){  log.info("Line=" + line + " - Variable="+ variable);  StringBuffer insert=new StringBuffer("INSERT INTO T_Report " + "(AD_PInstance_ID, PA_ReportLine_ID, Record_ID,Fact_Acct_ID,LevelNo ");  for (int col=0; col < m_columns.length; col++)   insert.append(",Col_").append(col);  insert.append(") SELECT ").append(getAD_PInstance_ID()).append(",").append(m_lines[line].getPA_ReportLine_ID()).append(",").append(variable).append(",Fact_Acct_ID, ");  if (p_DetailsSourceFirst)   insert.append("-2 "); else   insert.append("2 ");  for (int col=0; col < m_columns.length; col++) {    insert.append(", ");    if (!(m_columns[col].isColumnTypeRelativePeriod() && m_columns[col].getRelativePeriodAsInt() == 0)) {      insert.append("NULL");      continue;    }    if (m_lines[line].getPAAmountType() != null)     insert.append(m_lines[line].getSelectClause(false)); else     if (m_columns[col].getPAAmountType() != null)     insert.append(m_columns[col].getSelectClause(false)); else {      insert.append("NULL");      continue;    }  }  insert.append(" FROM Fact_Acct WHERE ").append(m_lines[line].getWhereClause(p_PA_Hierarchy_ID));  String s=m_report.getWhereClause();  if (s != null && s.length() > 0)   insert.append(" AND ").append(s);  FinReportPeriod frp=getPeriod(0);  insert.append(" AND TRUNC(DateAcct, 'DD') ").append(frp.getPeriodWhere());  int no=DB.executeUpdate(insert.toString(),get_TrxName());  log.finest("Trx #=" + no + " - "+ insert);  if (no == 0)   return;}  }
class C{  public DataTypeDescriptor dataTypeDescriptor(){  return tclass.dataTypeDescriptor(this);}  }
class C{  public void showIntentReviewImageView(){  if (mIntentReviewImageView != null) {    mIntentReviewImageView.setVisibility(View.VISIBLE);  }}  }
class C{  public SignerId(X500Name issuer,BigInteger serialNumber,byte[] subjectKeyId){  this(new X509CertificateHolderSelector(issuer,serialNumber,subjectKeyId));}  }
class C{  public Compiler(CompilerConfiguration configuration){  this.configuration=configuration;}  }
class C{  public static void w(String message,Throwable cause){  Log.w(LOG_TAG,"[" + message + "]",cause);}  }
class C{  public static void localizeMarketPlace(DataService dm,long objKey) throws NonUniqueBusinessKeyException {  create(dm,objKey,LocalizedObjectTypes.MARKETPLACE_NAME,"marketplace","en");}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public boolean isMinimizeOnBack(){  return minimizeOnBack;}  }
class C{  public DefaultBigdataVocabulary(){  super();}  }
class C{  public void handleClientCommand(String type,String[] params,Server server,Conversation conversation,IRCService service){  BaseHandler command=null;  if (commands.containsKey(type.toLowerCase())) {    command=commands.get(type.toLowerCase());  } else   if (aliases.containsKey(type.toLowerCase())) {    String commandInCommands=aliases.get(type.toLowerCase());    command=commands.get(commandInCommands);  }  try {    command.execute(params,server,conversation,service);  } catch (  CommandException e) {    if (conversation != null) {      Message errorMessage=new Message(type + ": " + e.getMessage());      errorMessage.setColor(Message.COLOR_RED);      conversation.addMessage(errorMessage);      Message usageMessage=new Message("Syntax: " + command.getUsage());      conversation.addMessage(usageMessage);      Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName());      service.sendBroadcast(intent);    }  }}  }
class C{  static byte testAndMark(ObjectReference object,byte markState){  byte oldValue, newValue, oldMarkState;  oldValue=VM.objectModel.readAvailableByte(object);  oldMarkState=(byte)(oldValue & MARK_MASK);  if (oldMarkState != markState) {    newValue=(byte)((oldValue & ~MARK_MASK) | markState);    if (HeaderByte.NEEDS_UNLOGGED_BIT)     newValue|=HeaderByte.UNLOGGED_BIT;    VM.objectModel.writeAvailableByte(object,newValue);  }  return oldMarkState;}  }
class C{  public static String encodeXMLChar(char ch){switch (ch) {case '&':    return "&amp;";case '\"':  return "&quot;";case '\'':return "&#39;";case '<':return "&lt;";case '>':return "&gt;";default :return null;}}  }
class C{  public static Collection<Related> all(){  return enums.all();}  }
class C{  protected boolean accept(Component aComponent){  if (!aComponent.canBeFocusOwner()) {    return false;  }  if (!(aComponent instanceof Window)) {    for (Container enableTest=aComponent.getParent(); enableTest != null; enableTest=enableTest.getParent()) {      if (!(enableTest.isEnabled() || enableTest.isLightweight())) {        return false;      }      if (enableTest instanceof Window) {        break;      }    }  }  return true;}  }
class C{  public Boolean isSystemBackup(){  return systemBackup;}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  r=(r - 30 < 0) ? 0 : r - 30;  g=(g - 30 < 0) ? 0 : g - 30;  b=(b - 30 < 0) ? 0 : b - 30;  return Color.rgb(r,g,b);}  }
class C{  public void updateLensFlares(){  double vecX=-mPositionScreen.x * 2;  double vecY=-mPositionScreen.y * 2;  for (int f=0; f < mLensFlares.size(); f++) {    FlareInfo flare=mLensFlares.get(f);    flare.setScreenPosition(mPositionScreen.x + vecX * flare.getDistance(),mPositionScreen.y + vecY * flare.getDistance());    flare.setWantedRotation(flare.getScreenPosition().x * Math.PI * 0.25);    flare.setRotation(flare.getRotation() + (flare.getWantedRotation() - flare.getRotation()) * 0.25f);  }}  }
class C{  Version readVersion() throws FormatException {  if (parsedVersion != null) {    return parsedVersion;  }  int dimension=bitMatrix.getHeight();  int provisionalVersion=(dimension - 17) >> 2;  if (provisionalVersion <= 6) {    return Version.getVersionForNumber(provisionalVersion);  }  int versionBits=0;  int ijMin=dimension - 11;  for (int j=5; j >= 0; j--) {    for (int i=dimension - 9; i >= ijMin; i--) {      versionBits=copyBit(i,j,versionBits);    }  }  Version theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  versionBits=0;  for (int i=5; i >= 0; i--) {    for (int j=dimension - 9; j >= ijMin; j--) {      versionBits=copyBit(i,j,versionBits);    }  }  theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  throw FormatException.getFormatInstance();}  }
class C{  public int hashCode(){  return Arrays.hashCode(this.uid);}  }
class C{  public static Launcher buildDefault(){  return create().build();}  }
class C{  private void fillScientific(int precision,char[] digits,int nDigits,int exp,boolean isNegative){  int startIndex=isNegative ? 1 : 0;  int t=Math.max(0,Math.min(nDigits - 1,precision));  if (t > 0) {    mantissa=create(isNegative,t + 2);    mantissa[startIndex]=digits[0];    mantissa[startIndex + 1]='.';    System.arraycopy(digits,1,mantissa,startIndex + 2,t);  } else {    mantissa=create(isNegative,1);    mantissa[startIndex]=digits[0];  }  char expSign;  int e;  if (exp <= 0) {    expSign='-';    e=-exp + 1;  } else {    expSign='+';    e=exp - 1;  }  if (e <= 9) {    exponent=new char[]{expSign,'0',(char)(e + '0')};  } else   if (e <= 99) {    exponent=new char[]{expSign,(char)(e / 10 + '0'),(char)(e % 10 + '0')};  } else {    char hiExpChar=(char)(e / 100 + '0');    e%=100;    exponent=new char[]{expSign,hiExpChar,(char)(e / 10 + '0'),(char)(e % 10 + '0')};  }}  }
class C{  public void testCameraPairwiseScenario23() throws Exception {  genericPairwiseTestCase(Flash.ON,Exposure.MAX,WhiteBalance.AUTO,SceneMode.NIGHT,PictureSize.MEDIUM,Geotagging.ON);}  }
class C{  public int append(final Object lhs,final Object rhs,final String fieldName){  return append(lhs,rhs,null,fieldName);}  }
class C{  public void printBody(final OutputStream output) throws IOException {  final InputStream body=this.body();  final byte[] buf=new byte[4096];  while (true) {    final int bytes=body.read(buf);    if (bytes < 0) {      break;    }    output.write(buf,0,bytes);  }  output.flush();}  }
class C{  @Override public boolean equals(final Object o){  if (o == this)   return true;  if (!(o instanceof Int))   return false;  return value == ((Int)o).value;}  }
class C{  private void cleanupFunction(LinearFunction f1){  for (int i=0; i < f1._b.length; i++) {    if (f1._vars[i] == null) {      f1.removeVar(i);      i--;      continue;    }  }}  }
class C{  public XmlBuffer(Writer writer){  this.writer=writer;  state=START;  if (checkWellFormed) {    tagStack=new Stack<String>();  } else {    tagStack=null;  }  allowedEmptyTags=DEFAULT_EMPTY_TAG_ALLOWED_LIST;}  }
class C{  private String reformat(CharSequence s,int cursor){  int curIndex=cursor - 1;  String formatted=null;  mFormatter.clear();  char lastNonSeparator=0;  boolean hasCursor=false;  int len=s.length();  for (int i=0; i < len; i++) {    char c=s.charAt(i);    if (PhoneNumberUtils.isNonSeparator(c)) {      if (lastNonSeparator != 0) {        formatted=getFormattedNumber(lastNonSeparator,hasCursor);        hasCursor=false;      }      lastNonSeparator=c;    }    if (i == curIndex) {      hasCursor=true;    }  }  if (lastNonSeparator != 0) {    formatted=getFormattedNumber(lastNonSeparator,hasCursor);  }  return formatted;}  }
class C{  void fireFocusLost(){  fireFocusLost(this);}  }
class C{  public ServerProxyInvalidFault(){  requestFileName="getstate.query";  responseFile="getstate.query";  responseContentType="text/xml; charset=\"UTF-8\"; boundary=foobar";}  }
class C{  public void cancelScanning(){  finishScanning();}  }
class C{  public Object readResolve() throws ObjectStreamException {  return new InternalDiceServer();}  }
class C{  public void prepare(){  root=new Element("rpsfile");  doc=newDocument(root,dtdLocation + "rpsroster-2-3-8.dtd");  java.util.Map<String,String> m=new java.util.HashMap<String,String>();  m.put("type","text/xsl");  m.put("href",xsltLocation + "rpsroster.xsl");  ProcessingInstruction p=new ProcessingInstruction("xml-stylesheet",m);  doc.addContent(0,p);}  }
class C{  @SuppressWarnings("fallthrough") public static char[] readPassword(InputStream in,boolean isEchoOn) throws IOException {  char[] consoleEntered=null;  byte[] consoleBytes=null;  try {    Console con=null;    if (!isEchoOn && in == System.in && ((con=System.console()) != null)) {      consoleEntered=con.readPassword();      if (consoleEntered != null && consoleEntered.length == 0) {        return null;      }      consoleBytes=convertToBytes(consoleEntered);      in=new ByteArrayInputStream(consoleBytes);    }    char[] lineBuffer;    char[] buf;    int i;    buf=lineBuffer=new char[128];    int room=buf.length;    int offset=0;    int c;    boolean done=false;    while (!done) {switch (c=in.read()) {case -1:case '\n':        done=true;      break;case '\r':    int c2=in.read();  if ((c2 != '\n') && (c2 != -1)) {    if (!(in instanceof PushbackInputStream)) {      in=new PushbackInputStream(in);    }    ((PushbackInputStream)in).unread(c2);  } else {    done=true;    break;  }default :if (--room < 0) {  buf=new char[offset + 128];  room=buf.length - offset - 1;  System.arraycopy(lineBuffer,0,buf,0,offset);  Arrays.fill(lineBuffer,' ');  lineBuffer=buf;}buf[offset++]=(char)c;break;}}if (offset == 0) {return null;}char[] ret=new char[offset];System.arraycopy(buf,0,ret,0,offset);Arrays.fill(buf,' ');return ret;}  finally {if (consoleEntered != null) {Arrays.fill(consoleEntered,' ');}if (consoleBytes != null) {Arrays.fill(consoleBytes,(byte)0);}}}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.AGGREGATOR__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.AGGREGATOR__TO_CHANNELS:  return toChannels != null && !toChannels.isEmpty();case EipPackage.AGGREGATOR__FROM_CHANNELS:return fromChannels != null && !fromChannels.isEmpty();case EipPackage.AGGREGATOR__PART:return part != PART_EDEFAULT;case EipPackage.AGGREGATOR__STRATEGY:return STRATEGY_EDEFAULT == null ? strategy != null : !STRATEGY_EDEFAULT.equals(strategy);case EipPackage.AGGREGATOR__EXPRESSION:return EXPRESSION_EDEFAULT == null ? expression != null : !EXPRESSION_EDEFAULT.equals(expression);}return super.eIsSet(featureID);}  }
class C{  public DrawerBuilder withFooter(@NonNull View footerView){  this.mFooterView=footerView;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.692 -0500",hash_original_method="975CD35AA91822366EBBB59081D175D2",hash_generated_method="72D7D347D6291763DE249E123E7FE4E9") public void addHeader(Header header){  if (header == null) {    return;  }  headers.add(header);}  }
class C{  public boolean isAlwaysRenderSelection(){  return alwaysRenderSelection;}  }
class C{  private void checkMaterialPolicy(MMovementLine line){  int no=MMovementLineMA.deleteMovementLineMA(line.getM_MovementLine_ID(),get_TrxName());  if (no > 0)   log.config("Delete old #" + no);  boolean needSave=false;  if (line.getM_AttributeSetInstance_ID() == 0) {    MProduct product=MProduct.get(getCtx(),line.getM_Product_ID());    String MMPolicy=product.getMMPolicy();    MStorage[] storages=MStorage.getWarehouse(getCtx(),0,line.getM_Product_ID(),0,null,MClient.MMPOLICY_FiFo.equals(MMPolicy),true,line.getM_Locator_ID(),get_TrxName());    BigDecimal qtyToDeliver=line.getMovementQty();    for (    MStorage storage : storages) {      if (storage.getQtyOnHand().compareTo(qtyToDeliver) >= 0) {        MMovementLineMA ma=new MMovementLineMA(line,storage.getM_AttributeSetInstance_ID(),qtyToDeliver);        ma.saveEx();        qtyToDeliver=Env.ZERO;        log.fine(ma + ", QtyToDeliver=" + qtyToDeliver);      } else {        MMovementLineMA ma=new MMovementLineMA(line,storage.getM_AttributeSetInstance_ID(),storage.getQtyOnHand());        ma.saveEx();        qtyToDeliver=qtyToDeliver.subtract(storage.getQtyOnHand());        log.fine(ma + ", QtyToDeliver=" + qtyToDeliver);      }      if (qtyToDeliver.signum() == 0)       break;    }    if (qtyToDeliver.signum() != 0) {      MAttributeSetInstance asi=MAttributeSetInstance.create(getCtx(),product,get_TrxName());      int M_AttributeSetInstance_ID=asi.getM_AttributeSetInstance_ID();      MMovementLineMA ma=new MMovementLineMA(line,M_AttributeSetInstance_ID,qtyToDeliver);      ma.saveEx();      log.fine("##: " + ma);    }  }  if (needSave) {    line.saveEx();  }}  }
class C{  public void testRemainderMathContextHALF_DOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=-45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=10;  int precision=75;  RoundingMode rm=RoundingMode.HALF_DOWN;  MathContext mc=new MathContext(precision,rm);  String res="1149310942946292909508821656680979993738625937.2065885780";  int resScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.remainder(bNumber,mc);  assertEquals("incorrect quotient value",res,result.toString());  assertEquals("incorrect quotient scale",resScale,result.scale());}  }
class C{  default void environmentStart(EnvironmentClassLoader loader){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public InlineAssociationEnd_ createInlineAssociationEnd_(){  InlineAssociationEnd_Impl inlineAssociationEnd_=new InlineAssociationEnd_Impl();  return inlineAssociationEnd_;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String parameter=getString(stack);  String property=getString(stack);  String dataSource=getString(stack);  try {    return EPG.getProperty(dataSource,property,parameter);  } catch (  sage.EPGServerException e) {    return e.getMessage();  }}  }
class C{  private NetworkUtils(){}  }
class C{  public X509CertificateHolderSelector(byte[] subjectKeyId){  this(null,null,subjectKeyId);}  }
class C{  @Override public boolean containsSlots(){  return !labelTemplate.getSlots().isEmpty() || !valueTemplate.getSlots().isEmpty();}  }
class C{  protected boolean isAllowedToDequeueGroupFileTransfer(){  return isAllowedToDequeueFileTransfer();}  }
class C{  public ColumnItem(final ColumnItem parent,final int index){  if (parent == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (parent.widget.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  this.widget=parent.widget;  this.parent=parent;  this.children=new ArrayList<ColumnItem>();  parent.children.add(index,this);  parent.widget.updateContent();}  }
class C{  public Object clone(){  try {    StandardGlyphVector result=(StandardGlyphVector)super.clone();    result.clearCaches();    if (positions != null) {      result.positions=(float[])positions.clone();    }    if (gti != null) {      result.gti=new GlyphTransformInfo(result,gti);    }    return result;  } catch (  CloneNotSupportedException e) {  }  return this;}  }
class C{  public GBC gridwidth(int width){  gridwidth=width;  return this;}  }
class C{  public static String calculateDiscountPercent(Context context,double price,double discountPrice){  int percent;  if (discountPrice >= price) {    percent=0;  } else {    percent=(int)Math.round(100 - ((discountPrice / price) * 100));  }  return String.format(context.getString(R.string.format_price_discount_percents),percent);}  }
class C{  public DERSequence(ASN1Encodable[] array){  super(array);}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (0 == length)   return;  characters(ch,start,length);}  }
class C{  public void testCreateElementNS1() throws Throwable {  Document doc;  Element element;  String namespaceURI="http://www.w3.org/DOM/Test/level2";  String qualifiedName="XML:XML";  String nodeName;  String nsURI;  String localName;  String prefix;  String tagName;  doc=(Document)load("staffNS",builder);  element=doc.createElementNS(namespaceURI,qualifiedName);  nodeName=element.getNodeName();  nsURI=element.getNamespaceURI();  localName=element.getLocalName();  prefix=element.getPrefix();  tagName=element.getTagName();  assertEquals("documentcreateelementNS01_nodeName","XML:XML",nodeName);  assertEquals("documentcreateelementNS01_namespaceURI","http://www.w3.org/DOM/Test/level2",nsURI);  assertEquals("documentcreateelementNS01_localName","XML",localName);  assertEquals("documentcreateelementNS01_prefix","XML",prefix);  assertEquals("documentcreateelementNS01_tagName","XML:XML",tagName);}  }
class C{  public void initializeState(TicTacToeState state){  state.storedData(new NeighborState());}  }
class C{  public static AccessibilityNodeInfo obtain(View root,int virtualDescendantId){  AccessibilityNodeInfo info=AccessibilityNodeInfo.obtain();  info.setSource(root,virtualDescendantId);  return info;}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  @ValueConverter(rule="FQN") public IValueConverter<String> FQN(){  return fqnValueConverter;}  }
class C{  public boolean isCanceled(){  return fCanceled;}  }
class C{  public final String toString(int depth){  if (depth <= 0)   return "";  String ret="\n*APSubstInNode: " + super.toString(depth) + "\n  instantiating module: "+ instantiatingModule.getName()+ ", instantiated module: "+ instantiatedModule.getName()+ Strings.indent(2,"\nSubstitutions:");  if (this.substs != null) {    for (int i=0; i < this.substs.length; i++) {      ret+=Strings.indent(2,Strings.indent(2,"\nSubst:" + (this.substs[i] != null ? Strings.indent(2,this.substs[i].toString(depth - 1)) : "<null>")));    }  } else {    ret+=Strings.indent(2,"<null>");  }  ret+=Strings.indent(2,"\nBody:" + Strings.indent(2,(body == null ? "<null>" : body.toString(depth - 1))));  return ret;}  }
class C{  public static Streamable<Integer> range(final int start,final int end){  return fromStream(ReactiveSeq.range(start,end));}  }
class C{  public List<LineageRecord> extractFromJson() throws JSONException {  List<LineageRecord> results=new ArrayList<>();  List<String> inputs=parseInputs();  for (  String s : inputs) {    results.add(construct(s,"source","read",null,null,null,null));  }  List<String> outputs=parseOutputs();  for (  String s : outputs) {    results.add(construct(s,"target","write",null,null,null,null));  }  return results;}  }
class C{  public static Document createXMLUpdHisReg(List list,Integer bookID,int folderId,String num_reg,Locale locale){  shortFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_SHORTFORMAT));  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_SICRESLIST_TEXT);  addContext(list.size(),locale,root);  addHeadMinuta(locale,root);  addBodyMinuta(locale,root);  UpdHisFdrResults result=null;  int i=0;  for (Iterator it=list.iterator(); it.hasNext(); ) {    result=(UpdHisFdrResults)it.next();    addMinuta(i++,bookID,result,locale,root);  }  return document;}  }
class C{  default B baseColor(final BannerMeta src){  this.meta().setBaseColor(src.getBaseColor());  return this.getBuilder();}  }
class C{  @Override public int compareTo(Peer o){  String h0=this.get(Schema.hash);  String h1=o.get(Schema.hash);  return Base64Order.enhancedCoder.compare(ASCII.getBytes(h0),ASCII.getBytes(h1));}  }
class C{  public static String format(Double nr){  if (nr == null) {    return PLACEHOLDER_NULL;  }  return String.format(FORMAT_NUMBER,nr);}  }
class C{  public SlimException(final String message){  this(ErrorType.INFO_ERROR,message);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x0282A3BD,version=150) public int sceHttpGetContentLength(int requestId,@BufferInfo(usage=Usage.out) TPointer64 contentLength){  HttpRequest httpRequest=getHttpRequest(requestId);  httpRequest.connect();  contentLength.setValue(httpRequest.getContentLength());  if (log.isDebugEnabled()) {    log.debug(String.format("sceHttpGetContentLength request %s returning contentLength=%d",httpRequest,contentLength.getValue()));  }  return 0;}  }
class C{  public StunException(int id,String message){  super(message);  setID(id);}  }
class C{  private void checkForActiveTenantsUsingDomains(StringSet domains){  List<URI> matchingTenants=new ArrayList<URI>();  for (  String domainToCheck : domains) {    Map<URI,List<UserMapping>> mappings=_permissionsHelper.getAllUserMappingsForDomain(domainToCheck);    Set<URI> tenantIDset;    if (mappings == null) {      _log.debug("No matching tenant found for domain {}",domainToCheck);      continue;    }    tenantIDset=mappings.keySet();    _log.debug("{} matching tenants found for domain {}",tenantIDset.size(),domainToCheck);    List<TenantOrg> tenants=_dbClient.queryObject(TenantOrg.class,new ArrayList<URI>(tenantIDset));    if (tenants != null) {      for (      TenantOrg tenant : tenants) {        if (!tenant.getInactive()) {          matchingTenants.add(tenant.getId());        }      }    }  }  if (!matchingTenants.isEmpty()) {    throw APIException.badRequests.cannotDeleteAuthProviderWithTenants(matchingTenants.size(),matchingTenants);  }}  }
class C{  public void addConnection(Connection conn){  int position=findPositionForConnection(conn);  if (position < mConnections.size() && conn == mConnections.get(position)) {    throw new IllegalArgumentException("Already added.");  }  mConnections.add(position,conn);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static Locale localeFromString(final String localeAsString){  if (StringUtils.isBlank(localeAsString)) {    final List<ApiParameterError> dataValidationErrors=new ArrayList<>();    final ApiParameterError error=ApiParameterError.parameterError("validation.msg.invalid.locale.format","The parameter locale is invalid. It cannot be blank.","locale");    dataValidationErrors.add(error);    throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist","Validation errors exist.",dataValidationErrors);  }  String languageCode="";  String countryCode="";  String variantCode="";  final String[] localeParts=localeAsString.split("_");  if (localeParts != null && localeParts.length == 1) {    languageCode=localeParts[0];  }  if (localeParts != null && localeParts.length == 2) {    languageCode=localeParts[0];    countryCode=localeParts[1];  }  if (localeParts != null && localeParts.length == 3) {    languageCode=localeParts[0];    countryCode=localeParts[1];    variantCode=localeParts[2];  }  return localeFrom(languageCode,countryCode,variantCode);}  }
class C{  public static Object deserialize(byte[] bytes) throws IOException, ClassNotFoundException {  final ByteArrayInputStream bin=new ByteArrayInputStream(bytes);  final ObjectInputStream istr=new ObjectInputStream(bin);  return istr.readObject();}  }
class C{  public ReadStream(){  _tempRead=TempBuffers.allocate();  _readBuffer=_tempRead.buffer();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:37.884 -0400",hash_original_method="26D8064AB91F9591B711540A79522C6C",hash_generated_method="26D8064AB91F9591B711540A79522C6C") void handleNonce(ParsedDirective pd) throws SaslException {  if (null != m_nonce)   throw new SaslException("Too many nonce values.");  m_nonce=pd.getValue();}  }
class C{  public void enableAutoReceipts(){  setAutoReceiptsEnabled(true);}  }
class C{  public static int[] merge(int[] list1,int[] list2){  int[] list3=new int[list1.length + list2.length];  for (int i=0; i < list1.length; i++)   list3[i]=list1[i];  for (int i=0, j=list1.length; i < list2.length; i++, j++) {    list3[j]=list2[i];  }  sort(list3);  return list3;}  }
class C{  public static void mask(ByteBuffer buf,int mask){  unmask(buf,mask);}  }
class C{  protected HashEntry createEntry(HashEntry next,int hashCode,Object key,Object value){  return new HashEntry(next,hashCode,key,value);}  }
class C{  public static byte[] clone(final byte[] array){  if (array == null) {    return null;  }  return array.clone();}  }
class C{  public WFG7(int k,int l,int M){  super(k,l,M);}  }
class C{  public ResultVO infoResp(ErrorType errorType,String msg){  return new ResultVO(errorType.name(),OperationStatus.FAILURE,msg);}  }
class C{  public CSVTest(String name){  super(name);}  }
class C{  public boolean equals(Object rhs){  try {    return equals((GlyphVector)rhs);  } catch (  ClassCastException e) {    return false;  }}  }
class C{  public T caseAnonymous_numExpr_3_(Anonymous_numExpr_3_ object){  return null;}  }
class C{  public boolean isFinal(){  return true;}  }
class C{  private boolean isSameVendorsForUpgrade(){  boolean result=true;  if (isUpgrade()) {    if (!m_source.getVendor().equalsIgnoreCase(m_target.getVendor()))     result=false;  }  if (!result)   s_logger.log(Level.SEVERE,"vendorsNotSame");  return result;}  }
class C{  static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){  if (osName == null || osVersion == null) {    return false;  }  return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);}  }
class C{  public StopWatch(){  this.id="";}  }
class C{  public MessageInfoBar(InfoBarListeners.Dismiss listener,int iconResourceId,CharSequence title){  super(listener,iconResourceId,null,title);}  }
class C{  public Builder withAutoScalerMapHostnameAttributeName(String name){  this.autoScalerMapHostnameAttributeName=name;  return this;}  }
class C{  public GF2Vector(int length){  if (length < 0) {    throw new ArithmeticException("Negative length.");  }  this.length=length;  v=new int[(length + 31) >> 5];}  }
class C{  public Vector resolveOldTokens(MqttException reason){  final String methodName="resolveOldTokens";  log.fine(CLASS_NAME,methodName,"632",new Object[]{reason});  MqttException shutReason=reason;  if (reason == null) {    shutReason=new MqttException(MqttException.REASON_CODE_CLIENT_DISCONNECTING);  }  Vector outT=tokenStore.getOutstandingTokens();  Enumeration outTE=outT.elements();  while (outTE.hasMoreElements()) {    MqttToken tok=(MqttToken)outTE.nextElement();synchronized (tok) {      if (!tok.isComplete() && !tok.internalTok.isCompletePending() && tok.getException() == null) {        tok.internalTok.setException(shutReason);      }    }    if (!(tok instanceof MqttDeliveryToken)) {      tokenStore.removeToken(tok.internalTok.getKey());    }  }  return outT;}  }
class C{  public void doEditToolActivatedPrimary(Vector2f mouseLoc,boolean pressed,Camera camera){  ShortcutManager scm=Lookup.getDefault().lookup(ShortcutManager.class);  if (scm.isActive()) {    scm.getActiveShortcut().setCamera(camera);    scm.getActiveShortcut().actionPrimary(mouseLoc,pressed,rootNode,editorController.getCurrentDataObject());  } else   if (editTool != null) {    editTool.setCamera(camera);    editTool.actionPrimary(mouseLoc,pressed,rootNode,editorController.getCurrentDataObject());  }}  }
class C{  public DocumentConversion(String versionDate){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }  this.versionDate=versionDate;}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== CDCIPictureEssenceDescriptor ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append("================== SampleRate ======================\n");  sb.append(this.sample_rate.toString());  sb.append(String.format("essence_container = %s%n",this.essence_container.toString()));  sb.append(String.format("frame_layout = %d%n",this.frame_layout));  sb.append(String.format("stored_width = %d%n",this.stored_width));  sb.append(String.format("stored_height = %d%n",this.stored_height));  sb.append("================== AspectRatio ======================\n");  sb.append(this.aspect_ratio.toString());  if (this.video_line_map != null) {    sb.append(this.video_line_map.toString());  }  sb.append(String.format("picture_essence_coding = %s%n",this.picture_essence_coding.toString()));  sb.append(String.format("component_depth = %d%n",this.component_depth));  sb.append(String.format("horizontal_subsampling = %d%n",this.horizontal_subsampling));  sb.append(String.format("vertical_subsampling = %d%n",this.vertical_subsampling));  return sb.toString();}  }
class C{  public int read(char[] buf,int n){  int readBytes=0;  char[] buffer=new char[4];  int bufPointer=0;  int bufCounter=0;  while (readBytes < n) {    if (bufPointer == 0) {      bufCounter=read4(buffer);    }    if (bufCounter == 0) {      break;    }    while (readBytes < n && bufPointer < bufCounter) {      buf[readBytes++]=buffer[bufPointer++];    }    if (bufPointer == bufCounter) {      bufPointer=0;    }  }  return readBytes;}  }
class C{  public byte[] createJarFromClassContent(final String className,final String content) throws IOException {  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();  writeJarFromContent(className,content,byteArrayOutputStream);  return byteArrayOutputStream.toByteArray();}  }
class C{  public static void parseResultSetToModel(ResultSet queryResult,Object model){  Class<?> clazz=model.getClass();  Field[] fields=clazz.getDeclaredFields();  Object fieldVal=null;  Class<?> fieldType=null;  try {    for (    Field field : fields) {      if (field.isAccessible() == false)       field.setAccessible(true);      Column column=field.getAnnotation(Column.class);      if (column == null)       continue;      String columnName=column.name();      fieldVal=queryResult.getValue(columnName);      fieldType=field.getType();      if (fieldVal != null) {        if (fieldType.equals(fieldVal.getClass())) {          field.set(model,fieldVal);        } else         if (fieldType.equals(short.class)) {          field.setShort(model,queryResult.getShortValue(columnName));        } else         if (fieldType.equals(Short.class)) {          field.set(model,(Short)queryResult.getShortValue(columnName));        } else         if (fieldType.equals(int.class)) {          field.setInt(model,queryResult.getIntValue(columnName));        } else         if (fieldType.equals(Integer.class)) {          field.set(model,(Integer)queryResult.getIntValue(columnName));        } else         if (fieldType.equals(long.class)) {          field.setLong(model,queryResult.getLongValue(columnName));        } else         if (fieldType.equals(Long.class)) {          field.set(model,(Long)queryResult.getLongValue(columnName));        } else         if (fieldType.equals(float.class)) {          field.setFloat(model,queryResult.getFloatValue(columnName));        } else         if (fieldType.equals(Float.class)) {          field.set(model,(Float)queryResult.getFloatValue(columnName));        } else         if (fieldType.equals(double.class)) {          field.setDouble(model,queryResult.getDoubleValue(columnName));        } else         if (fieldType.equals(Double.class)) {          field.set(model,(Double)queryResult.getDoubleValue(columnName));        } else         if (fieldType.equals(boolean.class)) {          field.setBoolean(model,queryResult.getBooleanValue(columnName));        } else         if (fieldType.equals(Boolean.class)) {          field.set(model,(Boolean)queryResult.getBooleanValue(columnName));        } else         if (fieldType.equals(String.class)) {          field.set(model,queryResult.getStringValue(columnName));        } else         if (fieldType.equals(Date.class)) {          field.set(model,queryResult.getDateValue(columnName));        }      }    }  } catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  public boolean isBorderPaintedFlat(){  return flat;}  }
class C{  public Value evaluate(IsNumeric node,BindingSet bindings) throws ValueExprEvaluationException, QueryEvaluationException {  Value argValue=evaluate(node.getArg(),bindings);  if (argValue instanceof Literal) {    Literal lit=(Literal)argValue;    IRI datatype=lit.getDatatype();    return BooleanLiteral.valueOf(XMLDatatypeUtil.isNumericDatatype(datatype));  } else {    return BooleanLiteral.FALSE;  }}  }
class C{  public void loadPage(String url_text,XHTMLPanel panel) throws MalformedURLException {  URL ref=null;  if (url_text.startsWith("demo:")) {    Uu.p("starts with demo");    DemoMarker marker=new DemoMarker();    Uu.p("url text = " + url_text);    String short_url=url_text.substring(5);    if (!short_url.startsWith("/")) {      short_url="/" + short_url;    }    Uu.p("short url = " + short_url);    ref=marker.getClass().getResource(short_url);    Uu.p("ref = " + ref);    panel.setDocument(ref.toExternalForm());  } else   if (url_text.startsWith("http")) {    panel.setDocument(url_text);  } else {    ref=new File(url_text).toURL();    panel.setDocument(ref.toExternalForm());  }  Uu.p("ref = " + ref);  Uu.p("url_text = " + url_text);}  }
class C{  private int[] defineNumeric(Random random){  int[] num=new int[getNumAttributes()];  for (int i=0; i < num.length; i++) {    num[i]=Attribute.NOMINAL;  }  int numNum=0;  for (int i=0; (numNum < getNumNumeric()) && (i < getNumAttributes() * 5); i++) {    int maybeNext=(int)(random.nextDouble() * num.length);    if (num[maybeNext] != Attribute.NUMERIC) {      num[maybeNext]=Attribute.NUMERIC;      numNum++;    }  }  return num;}  }
class C{  protected boolean insertSubtree(BinarySearchTree<E> tree){  if (tree == null)   return false;  if (tree.root == null)   return true;  Iterator<E> iterator=tree.inOrderIterator();  while (iterator.hasNext()) {    BinarySearchTreeNode<E> newNode=new BinarySearchTreeNode<E>(iterator.next());    this.insert(newNode);  }  return true;}  }
class C{  protected ListDataListener createListDataListener(){  return getHandler();}  }
class C{  @Deprecated public void fromDpb(DatabaseParameterBuffer dpb){  for (  Parameter parameter : dpb) {switch (parameter.getType()) {case isc_dpb_user_name:      setUser(parameter.getValueAsString());    break;case isc_dpb_password:  setPassword(parameter.getValueAsString());break;case isc_dpb_sql_role_name:setRoleName(parameter.getValueAsString());break;case isc_dpb_lc_ctype:setEncoding(parameter.getValueAsString());break;case isc_dpb_local_encoding:setCharSet(parameter.getValueAsString());break;case isc_dpb_sql_dialect:setConnectionDialect((short)parameter.getValueAsInt());break;case isc_dpb_num_buffers:setPageCacheSize(parameter.getValueAsInt());break;case isc_dpb_connect_timeout:setConnectTimeout(parameter.getValueAsInt());break;case isc_dpb_so_timeout:setSoTimeout(parameter.getValueAsInt());break;case isc_dpb_socket_buffer_size:setSocketBufferSize(parameter.getValueAsInt());break;case isc_dpb_result_set_holdable:setResultSetDefaultHoldable(true);break;case isc_dpb_column_label_for_name:setColumnLabelForName(true);break;case isc_dpb_utf8_filename:break;case isc_dpb_specific_auth_data:break;default :log.warn(String.format("Unknown or unsupported parameter with type %d added to extra database parameters",parameter.getType()));parameter.copyTo(getExtraDatabaseParameters(),null);dirtied();}}}  }
class C{  public AnimatablePercentageValue(AnimationTarget target,float v){  super(target,v);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void checkExportGroupForCleanup(ExportGroup exportGroup,DbClient dbClient){  if (exportGroup != null && dbClient != null) {    if ((exportGroup.checkInternalFlags(Flag.INTERNAL_OBJECT)) && (CollectionUtils.isEmpty(exportGroup.getVolumes()) || CollectionUtils.isEmpty(ExportMaskUtils.getExportMasks(dbClient,exportGroup)))) {      _log.info(String.format("Marking export group [%s %s] for deletion.",exportGroup.getLabel(),exportGroup.getId()));      dbClient.markForDeletion(exportGroup);    }  }}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  public ClientResponse post(URI resourceURI,String postData){  return client.post(resourceURI,postData);}  }
class C{  public static boolean copiesEqual(ConsistencyGroupCopyUID firstCopy,ConsistencyGroupCopyUID secondCopy){  if (firstCopy != null && secondCopy != null) {    GlobalCopyUID firstCopyGlobalCopyUID=firstCopy.getGlobalCopyUID();    GlobalCopyUID secondCopyGlobalCopyUID=secondCopy.getGlobalCopyUID();    return copiesEqual(firstCopyGlobalCopyUID,secondCopyGlobalCopyUID);  }  return false;}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong == myLong.intValue()) {            return myLong.intValue();          } else {            return myLong;          }        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  public Type type(){  return _type;}  }
class C{  public String urlstring(){  if (this.alternative_urlstring != null)   return this.alternative_urlstring;  if (!pdfParser.individualPages)   return this.url().toNormalform(true);  if (!"pdf".equals(MultiProtocolURL.getFileExtension(this.url().getFileName()).toLowerCase()))   return this.url().toNormalform(true);  String pageprop=pdfParser.individualPagePropertyname;  String resultUrlstring=this.url().toNormalform(true);  int p=resultUrlstring.lastIndexOf(pageprop + "=");  if (p > 0) {    return resultUrlstring.substring(0,p - 1) + "#page=" + resultUrlstring.substring(p + pageprop.length() + 1);  }  return resultUrlstring;}  }
class C{  public boolean isLongClickable(){  return getBooleanProperty(BOOLEAN_PROPERTY_LONG_CLICKABLE);}  }
class C{  public void testLocksOnRead(){  testLockIsHeld=true;}  }
class C{  public void actionPerformed(ActionEvent evt){  root.panel.view.getSharedContext().setDebug_draw_boxes(!root.panel.view.getSharedContext().debugDrawBoxes());  root.panel.view.repaint();}  }
class C{  public void reset(final EvolutionState state,final int thread){  RuleInitializer initializer=((RuleInitializer)state.initializer);  numRules=constraints(initializer).numRulesForReset(this,state,thread);  rules=new Rule[numRules];  for (int i=0; i < rules.length; i++) {    rules[i]=(Rule)(constraints(initializer).rulePrototype.clone());    rules[i].reset(state,thread);  }}  }
class C{  public Phone phone(){  return phone;}  }
class C{  public short compareDocumentPosition(Node other) throws DOMException {  return 0;}  }
class C{  public void update(byte[] input){  engineUpdate(input,0,input.length);  state=IN_PROGRESS;}  }
class C{  @Override protected boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion r,long startTime) throws EntryExistsException, DataLocationException {  InternalDistributedMember eventSender=originalSender;  if (eventSender == null) {    eventSender=getSender();  }  @Released EntryEventImpl event=null;  try {    if (this.bridgeContext != null) {      event=EntryEventImpl.create(r,getOperation(),this.key,null,getCallbackArg(),false,eventSender,true);      event.setContext(this.bridgeContext);    } else {      event=EntryEventImpl.create(r,getOperation(),this.key,null,getCallbackArg(),false,eventSender,true,false);    }    if (this.versionTag != null) {      this.versionTag.replaceNullIDs(getSender());      event.setVersionTag(this.versionTag);    }    event.setInvokePRCallbacks(!notificationOnly);    Assert.assertTrue(eventId != null);    event.setEventId(eventId);    event.setPossibleDuplicate(this.posDup);    PartitionedRegionDataStore ds=r.getDataStore();    boolean sendReply=true;    if (!notificationOnly) {      Assert.assertTrue(ds != null,"This process should have storage for an item in " + this.toString());      try {        Integer bucket=Integer.valueOf(PartitionedRegionHelper.getHashKey(r,null,this.key,null,this.cbArg));        event.setCausedByMessage(this);        r.getDataView().destroyOnRemote(event,true,this.expectedOldValue);        if (logger.isTraceEnabled(LogMarker.DM)) {          logger.trace(LogMarker.DM,"{} updated bucket: {} with key: {}",getClass().getName(),bucket,this.key);        }      } catch (      CacheWriterException cwe) {        sendReply(getSender(),this.processorId,dm,new ReplyException(cwe),r,startTime);        return false;      }catch (      EntryNotFoundException eee) {        logger.trace(LogMarker.DM,"{}: operateOnRegion caught EntryNotFoundException",getClass().getName());        ReplyMessage.send(getSender(),getProcessorId(),new ReplyException(eee),getReplySender(dm),r.isInternalRegion());        sendReply=false;      }catch (      PrimaryBucketException pbe) {        sendReply(getSender(),getProcessorId(),dm,new ReplyException(pbe),r,startTime);        sendReply=false;      } finally {        this.versionTag=event.getVersionTag();      }    } else {      @Released EntryEventImpl e2=createListenerEvent(event,r,dm.getDistributionManagerId());      try {        r.invokeDestroyCallbacks(EnumListenerEvent.AFTER_DESTROY,e2,r.isInitialized(),true);      }  finally {        if (e2 != event) {          e2.release();        }      }    }    return sendReply;  }  finally {    if (event != null) {      event.release();    }  }}  }
class C{  MethodInvocation(AST ast){  super(ast);  if (ast.apiLevel >= AST.JLS3) {    this.typeArguments=new ASTNode.NodeList(TYPE_ARGUMENTS_PROPERTY);  }}  }
class C{  public boolean addDominator(int objectId){  return this.dominator.add(objectId);}  }
class C{  public void updateProgress(){  supportInvalidateOptionsMenu();}  }
class C{  public Resolution forwardToPageActionNotConfigured(){  return new ForwardResolution("/m/pageactions/pageaction-not-configured.jsp");}  }
class C{  public static boolean isCommunityEdition(String serverVersion){  return !isEnterpriseEdition(serverVersion);}  }
class C{  private Object readResolve(){  return ToStringStyle.NO_CLASS_NAME_STYLE;}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  public PreValidation createPreValidation(){  PreValidationImpl preValidation=new PreValidationImpl();  return preValidation;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.ENTER_STATE__STATE:    if (resolve)     return getState();  return basicGetState();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void updateSaveButton(){  m_saveButton.setEnabled(!m_stdEditPanel.getNameString().equals(m_project.getConfiguration().getName()) || !m_stdEditPanel.getDescription().equals(m_project.getConfiguration().getDescription()) || !getSelectedDebuggers().equals(new HashSet<DebuggerTemplate>(m_project.getConfiguration().getDebuggers())));}  }
class C{  public static Composer composer(DisplayBase DisplayBase){  return new Composer(DisplayBase);}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  private void validateNextArgument(@NotNull final String commandText,@NotNull final String expectedArgumentText){  final CommandLineFile file=CommandTestTools.createFileByText(myFixture,commandText);  final ValidationResult validationResult=file.getValidationResult();  assert validationResult != null : "validation failed";  final Pair<Boolean,Argument> arg=validationResult.getNextArg();  Assert.assertNotNull("No argument returned, but should",arg);  Assert.assertTrue("Required argument is not marked as required",arg.first);  Assert.assertEquals("Wrong argument text",expectedArgumentText,arg.second.getHelp().getHelpString());}  }
class C{  public static <E>Set<E> singleton(E object){  return new SingletonSet<E>(object);}  }
class C{  @Override public void onItemSelected(String id){  if (twoPaneMode) {    ArticleDetailFragment fragment=ArticleDetailFragment.newInstance(id);    getFragmentManager().beginTransaction().replace(R.id.article_detail_container,fragment).commit();  } else {    Intent detailIntent=new Intent(this,ArticleDetailActivity.class);    detailIntent.putExtra(ArticleDetailFragment.ARG_ITEM_ID,id);    startActivity(detailIntent);  }}  }
class C{  public boolean isHighlightable(OMGraphic omg){  return true;}  }
class C{  private static void removeAll(Connection conn,ArrayList<String> usedTables){  int len=usedTables.size();  for (int i=0; i < len; i++) {    String tableName=usedTables.get(i).toString();    try {      removeTable(conn,tableName);    } catch (    Throwable t) {    }  }}  }
class C{  public Object remove(Object o1,Object o2){  int hash=hashCode(o1,o2) & 0x7FFFFFFF;  int index=hash % table.length;  Entry e=table[index];  if (e == null) {    return null;  }  if (e.hash == hash && e.match(o1,o2)) {    table[index]=e.next;    count--;    return e.value;  }  Entry prev=e;  for (e=e.next; e != null; prev=e, e=e.next) {    if (e.hash == hash && e.match(o1,o2)) {      prev.next=e.next;      count--;      return e.value;    }  }  return null;}  }
class C{  public static void handle(final String configInString,final CheckRequest checkRequest){  new SimpleConversionAndCheckCallbackAsyncTask(configInString,checkRequest).execute();}  }
class C{  @Override public boolean pruneValues(double frequencyThreshold){  return false;}  }
class C{  public SVGFeFuncRElementBridge(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.201 -0500",hash_original_method="D55C30402833F6F2BAA0496774A46F30",hash_generated_method="F2E462204BE75A08A79F0954411A0C08") public String query(boolean longOutput) throws IOException {  return query(longOutput,"");}  }
class C{  public static boolean isTelephonyEnabled(Context context){  TelephonyManager tm=(TelephonyManager)context.getSystemService(context.TELEPHONY_SERVICE);  return tm != null && tm.getSimState() == TelephonyManager.SIM_STATE_READY;}  }
class C{  public Bag(Collection other){  this();  if (other != null)   addAll(other);}  }
class C{  private void findEgressPaths(ProfileRequest request,Map<LegMode,StreetRouter> egressRouter){  for (  LegMode mode : request.egressModes) {    StreetRouter streetRouter=new StreetRouter(transportNetwork.streetLayer);    streetRouter.transitStopSearch=true;    streetRouter.dominanceVariable=StreetRouter.State.RoutingVariable.DURATION_SECONDS;    if (egressUnsupportedModes.contains(mode)) {      continue;    }    streetRouter.streetMode=StreetMode.valueOf(mode.toString());    streetRouter.profileRequest=request;    streetRouter.timeLimitSeconds=request.getTimeLimit(mode);    if (streetRouter.setOrigin(request.toLat,request.toLon)) {      streetRouter.route();      TIntIntMap stops=streetRouter.getReachedStops();      egressRouter.put(mode,streetRouter);      LOG.info("Added {} edgres stops for mode {}",stops.size(),mode);    } else {      LOG.warn("MODE:{}, Edge near the origin coordinate wasn't found. Routing didn't start!",mode);    }  }}  }
class C{  Event walk(Path file){  if (closed)   throw new IllegalStateException("Closed");  Event ev=visit(file,false,false);  assert ev != null;  return ev;}  }
class C{  private Node nextNode(Node x,XMLWriter xml){  Node n, c;  if ((c=x.getChild(0)) != null) {  } else   if ((c=x.getNextSibling()) != null) {    xml.end();  } else {    c=x.getParent();    xml.end();    while (c != null) {      if ((n=c.getNextSibling()) != null) {        c=n;        xml.end();        break;      }      c=c.getParent();      xml.end();    }  }  return c;}  }
class C{  private void putS3Object(String s3BucketName,String s3ObjectKey,String content){  PutObjectRequest putObjectRequest=new PutObjectRequest(s3BucketName,s3ObjectKey,new ByteArrayInputStream(content.getBytes()),new ObjectMetadata());  s3Operations.putObject(putObjectRequest,null);}  }
class C{  private void onControlClicked(@Control int which){  int oldValue=mValue;  int changeX=0;switch (which) {case ARR_LEFT:{      mValue--;      changeX=-mBarWidth;      break;    }case ARR_RIGHT:{    mValue++;    changeX=+mBarWidth;    break;  }case FAST_ARR_LEFT:{  int valueChange=(mMaxValue - mMinValue) / 10;  mValue-=valueChange;  changeX=(int)-(0.1f * mWidth);  break;}case FAST_ARR_RIGHT:{int valueChange=(mMaxValue - mMinValue) / 10;mValue+=valueChange;changeX=(int)(0.1f * mWidth);break;}}normalizeValue();if (oldValue != mValue) {float x=mLastX + changeX;float thisDelta=mLastX - x;mLastX=x;mDelta-=thisDelta / (mDensityFactor / 2f);notifyListener(oldValue,mValue);}}  }
class C{  @Override protected boolean removeEldestEntry(final Map.Entry<A,A> eldest){  return super.size() > maxEntries;}  }
class C{  public GameComponent(){  super("Tic Tac Toe");}  }
class C{  void removeAll(final boolean mark){  if (mark) {    AbstractInsnNode insn=first;    while (insn != null) {      AbstractInsnNode next=insn.next;      insn.index=-1;      insn.prev=null;      insn.next=null;      insn=next;    }  }  size=0;  first=null;  last=null;  cache=null;}  }
class C{  public static int testBlockScheduleSnippet(){  int res=0;  container.a=0x00;  container.a=0x10;  container.a=0x20;  container.a=0x30;  container.a=0x40;  res=container.a;  container.a=0x50;  container.a=0x60;  container.a=0x70;  return res;}  }
class C{  @Override public boolean isSecondaryArcWeapon(int wn){  if ((getEquipment(wn).getLocation() == LOC_FIELD_GUNS) && !hasActiveFieldArtillery()) {    return true;  }  return false;}  }
class C{  void addChildLink(HTMLLink childLink){  if (childLinks == null) {    childLinks=new Vector();  }  childLinks.addElement(childLink);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (version: ");  result.append(version);  result.append(", importedNamespace: ");  result.append(importedNamespace);  result.append(')');  return result.toString();}  }
class C{  public boolean isToplevel(){  EObject _eContainer=this.eContainer();  if ((_eContainer instanceof ExportDeclaration)) {    EObject _eContainer_1=this.eContainer();    EObject _eContainer_2=_eContainer_1.eContainer();    return (_eContainer_2 instanceof Script);  }  EObject _eContainer_3=this.eContainer();  return (_eContainer_3 instanceof Script);}  }
class C{  public AsyncResult SetMonitoringModeAsync(SetMonitoringModeRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public IndexFile(final long maxFilesize,final int sequenceType,final long totalLength,final long maxLength,final long minLength,final long numberSequences){  mMaxFilesize=maxFilesize;  mSequenceType=sequenceType;  mTotalLength=totalLength;  mMaxLength=maxLength;  mMinLength=minLength;  mNumberSequences=numberSequences;  mPrereadArm=PrereadArm.UNKNOWN;  mPrereadType=PrereadType.UNKNOWN;  mSdfIdLowBits=0;  mSdfId=new SdfId(0);  mSeqIndexVersion=DataFileIndex.DATASIZE_VERSION;  mVersion=VERSION;}  }
class C{  public VersionMessage(NetworkParameters params,int newBestHeight){  this(params,newBestHeight,true);}  }
class C{  public static IntStream empty(){  return EMPTY;}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  public void limitResults(int intervalId,long durationBackInTime,TimeUnit unit){  long now=System.currentTimeMillis();  int clockDrift=30 * 60 * 1000;  this.spec.setStartTime(VimUtils.convertMillisToXmlCalendar(now - unit.toMillis(durationBackInTime) - clockDrift));  this.spec.setEndTime(VimUtils.convertMillisToXmlCalendar(now + clockDrift));  this.spec.setIntervalId(intervalId);}  }
class C{  public void addVertexData(String id,String description,String default_value,Function<V,String> vertex_transformer){  if (vertex_data.equals(Collections.EMPTY_MAP))   vertex_data=new HashMap<String,GraphMLMetadata<V>>();  vertex_data.put(id,new GraphMLMetadata<V>(description,default_value,vertex_transformer));}  }
class C{  @RequestMapping(value=ApiUrl.CITIZEN_LOGOUT,method=RequestMethod.POST) public ResponseEntity<String> logout(final HttpServletRequest request,final OAuth2Authentication authentication){  try {    final OAuth2AccessToken token=tokenStore.getAccessToken(authentication);    if (token == null)     return ApiResponse.newInstance().error(getMessage("msg.logout.unknown"));    tokenStore.removeAccessToken(token);    return ApiResponse.newInstance().success("",getMessage("msg.logout.success"));  } catch (  final Exception ex) {    LOGGER.error("EGOV-API ERROR ",ex);    return ApiResponse.newInstance().error(getMessage("server.error"));  }}  }
class C{  Route flipTlsMode(){  return new Route(address,proxy,inetSocketAddress,!modernTls);}  }
class C{  void sendNextItem(){  log.debug("sendNextItem");  if (!mRunButton.isSelected()) {    return;  }  if (mNextSequenceElement >= MAXSEQUENCE) {    mNextSequenceElement=0;  }  if (mUseField[mNextSequenceElement].isSelected()) {    LocoNetMessage m=createPacket(mPacketField[mNextSequenceElement].getText());    mNextEcho=m;    memo.getLnTrafficController().sendLocoNetMessage(m);  } else {    mNextSequenceElement++;    sendNextItem();  }}  }
class C{  protected static void addVolume(List<BlockObjectRestRep> blockObjects,VolumeRestRep volume,List<BlockSnapshotRestRep> snapshots){  blockObjects.add(volume);  if (CollectionUtils.isNotEmpty(snapshots)) {    Iterator<BlockSnapshotRestRep> snapshotIter=snapshots.iterator();    while (snapshotIter.hasNext()) {      BlockSnapshotRestRep snap=snapshotIter.next();      if (ResourceUtils.idEquals(snap.getParent(),volume)) {        blockObjects.add(snap);        snapshotIter.remove();      }    }  }}  }
class C{  @Override public boolean isClosed(){  return (delegate == null) ? super.isClosed() : delegate.isClosed();}  }
class C{  public String[] readNext() throws IOException {  if (this.multiLine) {    return readMultiLine();  } else {    return readSingleLine();  }}  }
class C{  public static String decryptName(final String Name,final int seed){  return scramble(Name,seed,false);}  }
class C{  public void testNoDataSourceTransactionEmulationSupport(){  AbstractLocalConfiguration configuration=new LocalConfigurationThatSupportsProperty(Arrays.asList(new String[]{DatasourcePropertySet.DATASOURCE}));  configuration.getDataSources().add(ConfigurationFixtureFactory.createDataSource().buildDataSource());  configuration.getDataSources().add(ConfigurationFixtureFactory.createDriverConfiguredDataSourceWithXaTransactionSupport().buildDataSource());  try {    configuration.collectUnsupportedDataSourcesAndThrowException();    fail("should have gotten an Exception");  } catch (  CargoException e) {    assertEquals("This configuration does not support Transactions on Driver configured " + "DataSources! JndiName: jdbc/CargoDS",e.getMessage());  }}  }
class C{  public static VOTriggerDefinition toVOTriggerDefinition(TriggerDefinition domObj){  if (domObj == null) {    return null;  }  VOTriggerDefinition vo=new VOTriggerDefinition();  vo.setType(domObj.getType());  vo.setTargetType(domObj.getTargetType());  vo.setTarget(domObj.getTarget());  vo.setSuspendProcess(domObj.isSuspendProcess());  vo.setName(domObj.getName());  if (domObj.getOrganization() != null) {    VOOrganization org=new VOOrganization();    org.setKey(domObj.getOrganization().getKey());    org.setName(domObj.getOrganization().getName());    vo.setOrganization(org);  }  updateValueObject(vo,domObj);  return vo;}  }
class C{  public TarEntry(String name,byte linkFlag){  this(name);  this.linkFlag=linkFlag;  if (linkFlag == LF_GNUTYPE_LONGNAME) {    magic=new StringBuffer(GNU_TMAGIC);  }}  }
class C{  public Point offsetToCell(int offset){  if (offset < 0 || offset >= model.getByteCount()) {    return new Point(-1,-1);  }  int row=offset / 16;  int col=offset % 16;  return new Point(row,col);}  }
class C{  public static boolean isNotEmpty(final double[] array){  return array != null && array.length != 0;}  }
class C{  public void handleClientMembership(String clientId,int eventType){  String notifType=null;  List<ManagedResource> cleanedUp=null;  if (eventType == ClientMembershipMessage.LEFT) {    notifType=NOTIF_CLIENT_LEFT;    cleanedUp=cleanupBridgeClientResources(clientId);  } else   if (eventType == ClientMembershipMessage.CRASHED) {    notifType=NOTIF_CLIENT_CRASHED;    cleanedUp=cleanupBridgeClientResources(clientId);  } else   if (eventType == ClientMembershipMessage.JOINED) {    notifType=NOTIF_CLIENT_JOINED;  }  if (cleanedUp != null) {    for (    ManagedResource resource : cleanedUp) {      MBeanUtil.unregisterMBean(resource);    }  }  Helper.sendNotification(this,new Notification(notifType,this.modelMBean,Helper.getNextNotificationSequenceNumber(),clientId));}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof DecimalStyle) {    DecimalStyle other=(DecimalStyle)obj;    return (zeroDigit == other.zeroDigit && positiveSign == other.positiveSign && negativeSign == other.negativeSign && decimalSeparator == other.decimalSeparator);  }  return false;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'updateversionmanager' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'VERSIONCODE' REAL,"+ "'UPDATEURL' TEXT,"+ "'FILESIZE' TEXT,"+ "'INTRO' TEXT,"+ "'CHECKDATE' INTEGER,"+ "'LASTTIPDATE' INTEGER);");}  }
class C{  public int indexOf(int actionCode,int startAt){  int at=-1;  for (int i=startAt; at < 0 && i < actions.length; i++) {    Action a=getAction(i);    if (a != null && a.code == actionCode)     at=i;  }  return at;}  }
class C{  private String attachFooterToText(String content) throws MessagingException, IOException {  StringBuilder builder=new StringBuilder(content);  ensureTrailingCarriageReturn(content,builder);  builder.append(getFooterText());  return builder.toString();}  }
class C{  public SIPHeader parse() throws ParseException {  ReasonList reasonList=new ReasonList();  if (debug)   dbg_enter("ReasonParser.parse");  try {    headerName(TokenTypes.REASON);    this.lexer.SPorHT();    while (lexer.lookAhead(0) != '\n') {      Reason reason=new Reason();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      String value=token.getTokenValue();      reason.setProtocol(value);      super.parse(reason);      reasonList.add(reason);      if (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("ReasonParser.parse");  }  return reasonList;}  }
class C{  @Override public Id<Link> chooseNextLinkId(){  if (this.cachedNextLinkId != null) {    return this.cachedNextLinkId;  }  if (this.cachedRouteLinkIds == null) {    if (this.currentLeg.getRoute() instanceof NetworkRoute) {      this.cachedRouteLinkIds=((NetworkRoute)this.currentLeg.getRoute()).getLinkIds();    } else {      return null;    }  }  if (this.currentLinkIdIndex >= this.cachedRouteLinkIds.size()) {    Link currentLink=this.simulation.getScenario().getNetwork().getLinks().get(this.currentLinkId);    Link destinationLink=this.simulation.getScenario().getNetwork().getLinks().get(this.cachedDestinationLinkId);    if (currentLink == destinationLink && this.currentLinkIdIndex > this.cachedRouteLinkIds.size()) {      return null;    }    if (currentLink.getToNode().equals(destinationLink.getFromNode())) {      this.cachedNextLinkId=destinationLink.getId();      return this.cachedNextLinkId;    }    if (!(this.currentLinkId.equals(this.cachedDestinationLinkId))) {      log.error("The vehicle with driver " + this.getPerson().getId() + ", currently on link "+ this.currentLinkId.toString()+ ", is at the end of its route, but has not yet reached its destination link "+ this.cachedDestinationLinkId.toString());    }    return null;  }  Id<Link> nextLinkId=this.cachedRouteLinkIds.get(this.currentLinkIdIndex);  Link currentLink=this.simulation.getScenario().getNetwork().getLinks().get(this.currentLinkId);  Link nextLink=this.simulation.getScenario().getNetwork().getLinks().get(nextLinkId);  if (currentLink.getToNode().equals(nextLink.getFromNode())) {    this.cachedNextLinkId=nextLinkId;    return this.cachedNextLinkId;  }  log.warn(this + " [no link to next routenode found: routeindex= " + this.currentLinkIdIndex+ " ]");  return null;}  }
class C{  protected static void addStreamsOptions(ContextMenu m,int numStreams){  addStreamsOptions(m,numStreams,true);}  }
class C{  private char readEscapeCharacter() throws IOException {  if (pos == limit && !fillBuffer(1)) {    throw syntaxError("Unterminated escape sequence");  }  char escaped=buffer[pos++];switch (escaped) {case 'u':    if (pos + 4 > limit && !fillBuffer(4)) {      throw syntaxError("Unterminated escape sequence");    }  String hex=stringPool.get(buffer,pos,4);pos+=4;return (char)Integer.parseInt(hex,16);case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  static void generateSuperDelegateMethod(String superClassName,String methodName,String returnType,String[] paramTypes,int modifiers,ClassWriter cw){  String[] exceptions=null;  if (returnType == null)   returnType=OBJECT;  String methodDescriptor=getMethodDescriptor(returnType,paramTypes);  CodeVisitor cv=cw.visitMethod(modifiers,"_bshSuper" + methodName,methodDescriptor,exceptions);  cv.visitVarInsn(ALOAD,0);  int localVarIndex=1;  for (int i=0; i < paramTypes.length; ++i) {    if (isPrimitive(paramTypes[i]))     cv.visitVarInsn(ILOAD,localVarIndex); else     cv.visitVarInsn(ALOAD,localVarIndex);    localVarIndex+=((paramTypes[i].equals("D") || paramTypes[i].equals("J")) ? 2 : 1);  }  cv.visitMethodInsn(INVOKESPECIAL,superClassName,methodName,methodDescriptor);  generatePlainReturnCode(returnType,cv);  cv.visitMaxs(20,20);}  }
class C{  protected void extendExprGraph(LetExpression exprGraph,BlockContainer container,Set<OutputAnchor> outsideAnchors){  if (block.getContainer().equals(container)) {    boolean added=false;    Expression expr=block.getLocalExpr(outsideAnchors);    if (block instanceof MatchBlock) {      added=exprGraph.addLetBinding(((MatchBlock)block).getPrimaryBinder(),expr);    } else     if (block instanceof ConstantMatchBlock) {      added=exprGraph.addLetBinding(new ConstantBinder(((ConstantMatchBlock)block).getValue()),expr);    } else     if (block instanceof SplitterBlock) {      added=exprGraph.addLetBinding(((SplitterBlock)block).getPrimaryBinder(),expr);    } else {      added=exprGraph.addLetBinding(binder,expr);    }    if (added) {      block.extendExprGraph(exprGraph,container,outsideAnchors);    }  }}  }
class C{  public CheckoutFooter(final String id){  super(id);}  }
class C{  public DirectedSurfacePolyline(DirectedSurfacePolyline source){  super(source);  this.arrowLength=source.getArrowLength();  this.arrowAngle=source.getArrowAngle();  this.maxScreenSize=source.getMaxScreenSize();}  }
class C{  public static void create(){  v=new Harness();}  }
class C{  public static void showDocument(URL url){  showDocument(url.toString());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_2__VALUE_1:    return VALUE_1_EDEFAULT == null ? value_1 != null : !VALUE_1_EDEFAULT.equals(value_1);}return super.eIsSet(featureID);}  }
class C{  public void cancelAndRemove(String tag){  group.cancelAndRemove(tag);}  }
class C{  private static void extractKeys(KeyStore keystore,Properties props){  String keyspec=props.getProperty(Configuration.LEVELDB_METADATA_AES);  if (null != keyspec) {    byte[] key=keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + Configuration.LEVELDB_METADATA_AES + " MUST be 128, 192 or 256 bits long.");    keystore.setKey(KeyStore.AES_LEVELDB_METADATA,key);  }  keyspec=props.getProperty(Configuration.LEVELDB_DATA_AES);  if (null != keyspec) {    byte[] key=keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + Configuration.LEVELDB_DATA_AES + " MUST be 128, 192 or 256 bits long.");    keystore.setKey(KeyStore.AES_LEVELDB_DATA,key);  }  keyspec=props.getProperty(Configuration.LEVELDB_INDEX_AES);  if (null != keyspec) {    byte[] key=keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + Configuration.LEVELDB_INDEX_AES + " MUST be 128, 192 or 256 bits long.");    keystore.setKey(KeyStore.AES_LEVELDB_INDEX,key);  }  if (null != props.getProperty(Configuration.CONFIG_FETCH_PSK)) {    keystore.setKey(KeyStore.SIPHASH_FETCH_PSK,keystore.decodeKey(props.getProperty(Configuration.CONFIG_FETCH_PSK)));    Preconditions.checkArgument((16 == keystore.getKey(KeyStore.SIPHASH_FETCH_PSK).length),Configuration.CONFIG_FETCH_PSK + " MUST be 128 bits long.");  }}  }
class C{  public void paintPanelBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public Parameter push(String s){  if (s == null)   throw new BadParameterException("Parameter pushed with null string");  if (s.equals(""))   return new Parameter(param);  return new Parameter(param + delimiter + s);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TRANSACTION_ID:    return isSetTransactionId();}throw new IllegalStateException();}  }
class C{  protected final void assertConfigs(final String solrconfigFile,final String schemaFile,final String solrHome,final String errString) throws Exception {  ignoreException(Pattern.quote(errString));  try {    if (null == solrHome) {      initCore(solrconfigFile,schemaFile);    } else {      initCore(solrconfigFile,schemaFile,solrHome);    }    CoreContainer cc=h.getCoreContainer();    for (    Map.Entry<String,CoreContainer.CoreLoadFailure> entry : cc.getCoreInitFailures().entrySet()) {      if (matches(entry.getValue().exception,errString))       return;    }  } catch (  Exception e) {    if (matches(e,errString))     return;    throw e;  } finally {    deleteCore();    resetExceptionIgnores();  }  fail("Did not encounter any exception from: " + solrconfigFile + " using "+ schemaFile);}  }
class C{  public boolean updateSign(){  for (int s=0; s < steps; s++) {    if (counter < keysize) {      oneStep();    }    if (counter == keysize) {      return true;    }  }  return false;}  }
class C{  public static String wantFilesPath(Context context,boolean externalStorageFirst){  String path=null;  if (externalStorageFirst && hasSDCardMounted()) {    path=context.getExternalFilesDir("").getAbsolutePath();  } else {    path=context.getFilesDir().getAbsolutePath();  }  return path;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  characters(ch,start,length);}  }
class C{  private void writeEsc(char ch[],int start,int length,boolean isAttVal) throws SAXException {  for (int i=start; i < start + length; i++) {switch (ch[i]) {case '&':      write("&amp;");    break;case '<':  write("&lt;");break;case '>':write("&gt;");break;case '\"':if (isAttVal) {write("&quot;");} else {write('\"');}break;default :if (!unicodeMode && ch[i] > '\u007f') {write("&#");write(Integer.toString(ch[i]));write(';');} else {write(ch[i]);}}}}  }
class C{  void subtractFlakes(int quantity){  for (int i=0; i < quantity; ++i) {    int index=numFlakes - i - 1;    flakes.remove(index);  }  setNumFlakes(numFlakes - quantity);}  }
class C{  public void zoom(float factor,int focusX,int focusY){  transformer.zoom(factor,focusX,focusY);  paintPreview((int)((1 - factor) * focusX),(int)((1 - factor) * focusY),factor);  viewChanged(MapViewEvent.Type.ZOOM);}  }
class C{  public InterchangeablePair(final First first,final Second second){  this.first=first;  this.second=second;}  }
class C{  public static double[] min(double[][] M){  double[] min=new double[M[0].length];  for (int j=0; j < min.length; j++) {    min[j]=M[0][j];    for (int i=1; i < M.length; i++)     min[j]=Math.min(min[j],M[i][j]);  }  return min;}  }
class C{  public boolean hasAnyDialog(){  return hasStringDialogs || hasYesCancelDialogs || hasYesNoCancelDialogs|| hasYesNoDialogs|| hasOptionDialogs;}  }
class C{  protected boolean consumeArgumentDelimiter() throws SyntaxError {  if (hasMoreArguments()) {    sp.expect(",");    return true;  }  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.683 -0400",hash_original_method="B82B927E9AF02AC9DAC77E074F6BBD30",hash_generated_method="8DF4356E8F366D7D46C891448336116D") @Override public void close() throws IOException {  try {    in.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public ToStringBuilder append(final String fieldName,final long[] array,final boolean fullDetail){  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));  return this;}  }
class C{  public SubscriptionStateException(String message,SubscriptionStateExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public Observable<Void> unpublishObservable(String id){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  unpublish(id,resultHandler.toHandler());  return resultHandler;}  }
class C{  public void ReInit(SimpleCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  @Override public void onAnimationRepeat(Animator animation){}  }
class C{  public static Ignite start(InputStream springCfgStream) throws IgniteCheckedException {  return start(springCfgStream,null,null,null);}  }
class C{  public V computeIfPresent(K key,BiFunction<? super K,? super V,? extends V> remappingFunction){  if (key == null || remappingFunction == null)   throw new NullPointerException();  Node<K,V> n;  Object v;  while ((n=findNode(key)) != null) {    if ((v=n.value) != null) {      @SuppressWarnings("unchecked") V vv=(V)v;      V r=remappingFunction.apply(key,vv);      if (r != null) {        if (n.casValue(vv,r))         return r;      } else       if (doRemove(key,vv) != null)       break;    }  }  return null;}  }
class C{  protected void checkResponseCode(URLConnection conn) throws Exception {  if (conn instanceof HttpURLConnection) {    HttpURLConnection httpConn=(HttpURLConnection)conn;    int responseCode=httpConn.getResponseCode();    if (responseCode == -1) {      Log.w(LOG,"Empty response code: " + responseCode + " "+ httpConn.getResponseMessage());    } else     if (responseCode < 200 || responseCode > 299) {      Log.e(LOG,"Error response code: " + responseCode + " "+ httpConn.getResponseMessage());      throw new IOException("Error response: " + responseCode + " "+ httpConn.getResponseMessage());    } else {      Log.d(LOG,"Response: " + responseCode + " "+ httpConn.getResponseMessage());    }  }}  }
class C{  public UncheckedExecutionException(@Nullable String message,@Nullable Throwable cause){  super(message,cause);}  }
class C{  @Override public void endProcessSubTokens(){  if (!skey.isEmpty()) {    map.put(skey,sval);    skey="";    sval="";  }}  }
class C{  public KeyUsageExtension(byte[] bitString) throws IOException {  this.bitString=new BitArray(bitString.length * 8,bitString).toBooleanArray();  this.extensionId=PKIXExtensions.KeyUsage_Id;  this.critical=true;  encodeThis();}  }
class C{  public static cuDoubleComplex cuCmplx(double r,double i){  cuDoubleComplex res=new cuDoubleComplex();  res.x=r;  res.y=i;  return res;}  }
class C{  public static Number ceil(Number a){  if (isFloatingPoint(a)) {    return Math.ceil(a.doubleValue());  } else {    return a.longValue();  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public ConnectIOException(String s,Exception ex){  super(s,ex);}  }
class C{  public Boolean isWdrwlAllwdInd(){  return wdrwlAllwdInd;}  }
class C{  public Word lsh(int amt){  return null;}  }
class C{  private Vector reOrder(Vector list){  Vector newList=new Vector();  if (list.size() == 0) {    return newList;  }  int previousMsgId=0;  int largestGap=0;  int largestGapMsgIdPosInList=0;  for (int i=0; i < list.size(); i++) {    int currentMsgId=((MqttWireMessage)list.elementAt(i)).getMessageId();    if (currentMsgId - previousMsgId > largestGap) {      largestGap=currentMsgId - previousMsgId;      largestGapMsgIdPosInList=i;    }    previousMsgId=currentMsgId;  }  int lowestMsgId=((MqttWireMessage)list.elementAt(0)).getMessageId();  int highestMsgId=previousMsgId;  if (MAX_MSG_ID - highestMsgId + lowestMsgId > largestGap) {    largestGapMsgIdPosInList=0;  }  for (int i=largestGapMsgIdPosInList; i < list.size(); i++) {    newList.addElement(list.elementAt(i));  }  for (int i=0; i < largestGapMsgIdPosInList; i++) {    newList.addElement(list.elementAt(i));  }  return newList;}  }
class C{  protected TextEditorBasedStructureViewModel(@NotNull PsiFile psiFile){  this(PsiEditorUtil.Service.getInstance().findEditorByPsiElement(psiFile),psiFile);}  }
class C{  protected JComponent createEditor(){  JComponent editor=spinner.getEditor();  maybeRemoveEditorBorder(editor);  installEditorBorderListener(editor);  editor.setInheritsPopupMenu(true);  updateEditorAlignment(editor);  return editor;}  }
class C{  public LocalDate withMinimumValue(){  return setCopy(getMinimumValue());}  }
class C{  @Override public void updateTalkCycle(Cycle cycle){  planAdapter.setTalkCycle(cycle);}  }
class C{  @Nullable public static SQFScope checkIfInsideSpawn(@NotNull PsiElement element){  SQFScope containingScope=SQFPsiUtil.getContainingScope(element);  PsiElement codeBlock=containingScope.getParent();  SQFScope spawnScope=containingScope;  ASTNode previous;  while (codeBlock instanceof SQFCodeBlock) {    previous=PsiUtil.getPrevSiblingNotWhitespace(codeBlock.getNode());    if (PsiUtil.isOfElementType(previous,SQFTypes.COMMAND)) {      if (previous.getText().equals("spawn")) {        return spawnScope;      }    }    spawnScope=SQFPsiUtil.getContainingScope(codeBlock);    codeBlock=spawnScope.getParent();  }  return null;}  }
class C{  private static boolean isAncestor(final COperandTreeNode child,final COperandTreeNode parent){  if (child == parent) {    return true;  }  if (child.getParent() == null) {    return false;  }  return isAncestor((COperandTreeNode)child.getParent(),parent);}  }
class C{  @ObjectiveCName("forwardContentContentWithPeer:withContent:") public void forwardContent(Peer peer,AbsContent content){  modules.getMessagesModule().forwardContent(peer,content);}  }
class C{  @Override public void afterBuild(StructDescription desc){  if (!Platform.isWindows()) {    return;  }  Class c=desc.getStructClass();  if (c == vector.class) {    desc.prependBytes(3 * Pointer.SIZE);  } else   if (c == list.class || c == list.list_node.class) {    desc.setFieldOffset("prev",5 * Pointer.SIZE,false);    if (c == list.list_node.class) {      desc.setFieldOffset("data",6 * Pointer.SIZE,false);    }  }}  }
class C{  public boolean loadBPartner(int C_BPartner_ID){  log.config("C_BPartner_ID=" + C_BPartner_ID);  if (C_BPartner_ID == 0) {    m_partner=null;    m_pLocation=null;    m_user=null;    return true;  }  m_partner=new MBPartner(Env.getCtx(),C_BPartner_ID,null);  if (m_partner.get_ID() == 0) {    ADialog.error(m_WindowNo,this,"BPartnerNotFound");    return false;  }  fValue.setText(m_partner.getValue());  fGreetingBP.setSelectedItem(getGreeting(m_partner.getC_Greeting_ID()));  fName.setText(m_partner.getName());  fName2.setText(m_partner.getName2());  m_pLocation=m_partner.getLocation(Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_BPartner_Location_ID"));  if (m_pLocation != null) {    int location=m_pLocation.getC_Location_ID();    fAddress.setValue(new Integer(location));    fPhone.setText(m_pLocation.getPhone());    fPhone2.setText(m_pLocation.getPhone2());    fFax.setText(m_pLocation.getFax());  }  m_user=m_partner.getContact(Env.getContextAsInt(Env.getCtx(),m_WindowNo,"AD_User_ID"));  if (m_user != null) {    fGreetingC.setSelectedItem(getGreeting(m_user.getC_Greeting_ID()));    fContact.setText(m_user.getName());    fTitle.setText(m_user.getTitle());    fEMail.setText(m_user.getEMail());    fPhone.setText(m_user.getPhone());    fPhone2.setText(m_user.getPhone2());    fFax.setText(m_user.getFax());  }  return true;}  }
class C{  public int indexForBounds(Rect bounds){  final int boundsHeight=bounds.height();  final int N=getChildCount();  for (int i=0; i < N; i++) {    if (boundsHeight <= mMipmapHeights[i]) {      return i;    }  }  if (N > 0) {    return N - 1;  }  return -1;}  }
class C{  private void showInfo(String text){  mHandler.removeMessages(FADE_OUT_INFO);  mInfo.setVisibility(View.VISIBLE);  mInfo.setText(text);  hideInfo();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.NEGATIVE_CONSTRAINT___CONSTRAINT_1:    return getConstraint_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void acquireRPLockKeysForExport(String taskId,Collection<RPExport> rpExports,Map<String,Set<URI>> rpSiteInitiatorsMap){  _log.info("Start : Acquiring RP lock keys for export");  List<String> lockKeys=new ArrayList<String>();  for (  RPExport rpExport : rpExports) {    Set<URI> rpSiteInitiatorUris=rpSiteInitiatorsMap.get(rpExport.getRpSite());    lockKeys.addAll(ControllerLockingUtil.getStorageLockKeysForRecoverPoint(_dbClient,rpSiteInitiatorUris,rpExport.getStorageSystem()));  }  boolean acquiredLocks=_exportWfUtils.getWorkflowService().acquireWorkflowStepLocks(taskId,lockKeys,LockTimeoutValue.get(LockType.RP_EXPORT));  if (!acquiredLocks) {    throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),"ExportOrchestrationSteps: RP Export");  }  for (  String lockKey : lockKeys) {    _log.info("Acquired lock : " + lockKey);  }  _log.info("Done : Acquiring RP lock keys for export");}  }
class C{  public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Encountered bad message \n" + message);    String msgString=sipMessage.toString();    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {      SIPMessage badReqRes=createBadReqRes(msgString,ex);      if (badReqRes != null) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Sending automatic 400 Bad Request:");          sipStack.getStackLogger().logDebug(msgString);        }        try {          this.sendMessage(badReqRes,this.getPeerInetAddress(),this.getPeerPort(),false);        } catch (        IOException e) {          if (sipStack.isLoggingEnabled())           this.sipStack.getStackLogger().logException(e);        }      } else {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Could not formulate automatic 400 Bad Request");        }      }    }    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  @Override public boolean printingEnabled(OptOptions options,boolean before){  return false;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String uploadFile(Part filePart,final String bucketName) throws IOException {  DateTimeFormatter dtf=DateTimeFormat.forPattern("-YYYY-MM-dd-HHmmssSSS");  DateTime dt=DateTime.now(DateTimeZone.UTC);  String dtString=dt.toString(dtf);  final String fileName=filePart.getSubmittedFileName() + dtString;  BlobInfo blobInfo=storage.create(BlobInfo.builder(bucketName,fileName).acl(new ArrayList<>(Arrays.asList(Acl.of(User.ofAllUsers(),Role.READER)))).build(),filePart.getInputStream());  return blobInfo.mediaLink();}  }
class C{  void encodeDone() throws IOException {  encodeDone(null);}  }
class C{  void doneWithMeta(){  parsingMeta=false;  anyToVerify=!sigFileSigners.isEmpty();  baos=null;  sigFileData=null;  pendingBlocks=null;  signerCache=null;  manDig=null;  if (sigFileSigners.containsKey(JarFile.MANIFEST_NAME)) {    CodeSigner[] codeSigners=sigFileSigners.remove(JarFile.MANIFEST_NAME);    verifiedSigners.put(JarFile.MANIFEST_NAME,codeSigners);  }}  }
class C{  public boolean hasContentType(){  return fieldSetFlags()[10];}  }
class C{  public void testGetFilterMappingsWithOneMapping() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter-mapping>" + "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping</url-pattern>"+ "  </filter-mapping>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> filterMappings=WebXmlUtils.getFilterMappings(webXml,"f1");  assertEquals(1,filterMappings.size());  assertEquals("/f1mapping",filterMappings.get(0));}  }
class C{  public boolean isModifySubscriptionPending(long subscriptionKey){  ArgumentValidator.notNull("subscriptionKey",String.valueOf(subscriptionKey));  return executeCheckForModifyOrUpgradeSubscriptionPending(Arrays.asList(TriggerType.MODIFY_SUBSCRIPTION),subscriptionKey);}  }
class C{  public static double pdf(double x,double mu,double shape){  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {    return 0;  }  final double v=(x - mu) / mu;  double t1=Math.sqrt(shape / (MathUtil.TWOPI * x * x* x));  return t1 > 0 ? t1 * Math.exp(-shape * v * v* .5 / x) : 0;}  }
class C{  @Override public void countCoveredCandidates(DataSequence sequence,double t,CountingInformations counting){  for (  Transaction transaction : sequence) {    for (    Item item : transaction) {      HashTreeNode child=children.get(item);      if (child != null) {        child.countCoveredCandidates(sequence,transaction.getTime(),counting);      }    }  }}  }
class C{  public void requestSmsVerificationCode() throws IOException {  this.pushServiceSocket.createAccount(false);}  }
class C{  public int previousNode(){  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_ITERATE,null));  if ((m_next - 1) > 0) {    m_next--;    return this.elementAt(m_next);  } else   return DTM.NULL;}  }
class C{  public boolean hasHeightExt(){  return hasExtension(GphotoHeight.class);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  GearVRJavascriptMain main=new GearVRJavascriptMain();  setMain(main,"gvr.xml");  GVRScriptManager sm=getGVRContext().getScriptManager();  sm.addVariable("utils",new ScriptUtils());switch (mode) {case USE_SINGLE_SCRIPT:{      GVRScriptFile scriptFile;      try {        scriptFile=sm.loadScript(new GVRAndroidResource(getGVRContext(),"script.js"),GVRScriptManager.LANG_JAVASCRIPT);        sm.attachScriptFile(main,scriptFile);      } catch (      IOException|GVRScriptException e) {        e.printStackTrace();      }      break;    }case USE_SCRIPT_BUNDLE:{    GVRScriptBundle scriptBundle;    try {      scriptBundle=sm.loadScriptBundle("script_bundle.json",new GVRResourceVolume(getGVRContext(),GVRResourceVolume.VolumeType.ANDROID_ASSETS));      sm.bindScriptBundle(scriptBundle,main,true);    } catch (    IOException|GVRScriptException e) {      e.printStackTrace();    }  }}}  }
class C{  public static AnnotationMirror buildAnnoMirrorWithNoPrefix(final ProcessingEnvironment env,final Class<? extends Annotation> annoClass){  if (env == null || annoClass == null) {    return null;  }  return AnnotationUtils.fromClass(env.getElementUtils(),annoClass);}  }
class C{  private static void LOGD(final String tag,String message){  if (Log.isLoggable(tag,Log.DEBUG)) {    Log.d(tag,message);  }}  }
class C{  public static boolean contains(int[] array,int valueToFind){  return indexOf(array,valueToFind) != INDEX_NOT_FOUND;}  }
class C{  void loadFromOsm(OSM osm,boolean removeIslands,boolean saveVertexIndex){  if (!osm.intersectionDetection)   throw new IllegalArgumentException("Intersection detection not enabled on OSM source");  LOG.info("Making street edges from OSM ways...");  this.osm=osm;  List<Way> parkAndRideWays=new ArrayList<>();  for (  Map.Entry<Long,Way> entry : osm.ways.entrySet()) {    Way way=entry.getValue();    if (way.hasTag("park_ride","yes"))     parkAndRideWays.add(way);    if (!isWayRoutable(way)) {      continue;    }    int nEdgesCreated=0;    int beginIdx=0;    for (int n=1; n < way.nodes.length; n++) {      if (osm.intersectionNodes.contains(way.nodes[n]) || n == (way.nodes.length - 1)) {        makeEdge(way,beginIdx,n,entry.getKey());        nEdgesCreated+=1;        beginIdx=n;      }    }  }  Edge cursor=edgeStore.getCursor();  cursor.seek(0);  int lts1=0, lts2=0, lts3=0, lts4=0, ltsUnknown=0;  do {    if (cursor.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_1))     lts1++; else     if (cursor.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_2))     lts2++; else     if (cursor.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_3))     lts3++; else     if (cursor.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_4))     lts4++; else     ltsUnknown++;  } while (cursor.advance());  LOG.info("Surrogate LTS:\n  1: {} edges\n  2: {} edges\n  3: {} edges\n  4: {} edges\n  Unknown: {} edges",lts1,lts2,lts3,lts4,ltsUnknown);  List<Node> parkAndRideNodes=new ArrayList<>();  for (  Node node : osm.nodes.values()) {    if (node.hasTag("park_ride","yes"))     parkAndRideNodes.add(node);  }  LOG.info("Done making street edges.");  LOG.info("Made {} vertices and {} edges.",vertexStore.getVertexCount(),edgeStore.nEdges());  LOG.info("Found {} P+R node candidates",parkAndRideNodes.size());  buildEdgeLists();  stressLabeler.applyIntersectionCosts(this);  if (removeIslands) {    removeDisconnectedSubgraphs(MIN_SUBGRAPH_SIZE);  }  this.indexStreets();  buildParkAndRideAreas(parkAndRideWays);  buildParkAndRideNodes(parkAndRideNodes);  VertexStore.Vertex vertex=vertexStore.getCursor();  long numOfParkAndRides=0;  while (vertex.advance()) {    if (vertex.getFlag(VertexStore.VertexFlag.PARK_AND_RIDE)) {      numOfParkAndRides++;    }  }  LOG.info("Made {} P+R vertices",numOfParkAndRides);  osm.relations.entrySet().stream().filter(null).forEach(null);  LOG.info("Created {} turn restrictions",turnRestrictions.size());  if (!saveVertexIndex)   vertexIndexForOsmNode=null;  osm=null;}  }
class C{  public PolarLocationAnimator(){  super();}  }
class C{  public final void testSetAllowedCharacters(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.CASE_INSENSITIVE,false);  characterOrNumberValidator.setAllowedCharacters(allowedCharacters);  assertEquals(allowedCharacters,characterOrNumberValidator.getAllowedCharacters());}  }
class C{  public String randomAlphaLower(int length){  return randomString(JexlStringFunctions.alphaLower,length);}  }
class C{  private boolean matches(final Path path,final ArrayDeque<PathMatcher> matchers){  for (  PathMatcher matcher : matchers) {    if (matcher.matches(path)) {      return true;    }  }  return false;}  }
class C{  public em addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:45.041 -0500",hash_original_method="CC3FF2DA7072A05A8664F97319F6C752",hash_generated_method="073681E100119D78CF7FBB2AB770DDDB") private CharSequence insertGrouping(CharSequence s){  StringBuilder result=new StringBuilder(s.length() + s.length() / 3);  int digitsLength=s.length();  int i=0;  if (s.charAt(0) == '-') {    --digitsLength;    ++i;    result.append('-');  }  int headLength=digitsLength % 3;  if (headLength == 0) {    headLength=3;  }  result.append(s,i,i + headLength);  i+=headLength;  for (; i < s.length(); i+=3) {    result.append(localeData.groupingSeparator);    result.append(s,i,i + 3);  }  return result;}  }
class C{  protected void sequence_TemplateTail(ISerializationContext context,TemplateSegment semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TEMPLATE_SEGMENT__RAW_VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TEMPLATE_SEGMENT__RAW_VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTemplateTailAccess().getRawValueTemplateTailLiteralParserRuleCall_1_0(),semanticObject.getRawValue());  feeder.finish();}  }
class C{  public void requestShowToolTip(MouseEvent me,InfoDisplayEvent event){  requestShowToolTip(event);}  }
class C{  public static FilterStream create(Filter filter){  return new FilterStream(filter);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.IF__IF_FALSE:    return getIfFalse();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void removeAlreadyExistingFiles(final List<String> files){  final Iterator<String> itr=files.iterator();  while (itr.hasNext()) {    final String file=itr.next();    if (file.trim().equals("")) {      itr.remove();      continue;    }    try {      final long sizeShould=Integer.parseInt(updateProp.getProperty("file-size." + file,""));      final long sizeIs=new File(jarFolder + file).length();      if (sizeShould == sizeIs) {        String signature=updateProp.getProperty("file-signature." + file);        if (SignatureVerifier.get().checkSignature(jarFolder + file,signature)) {          bootProp.put("file-signature." + file,signature);          itr.remove();        }      }    } catch (    final RuntimeException e) {      e.printStackTrace(System.err);    }  }}  }
class C{  public static boolean inheritsFromAndroid(SootClass clz){  return systemParents(clz).size() > 0;}  }
class C{  public ActionDefinition createActionDefinition(){  ActionDefinitionImpl actionDefinition=new ActionDefinitionImpl();  return actionDefinition;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static <T extends Tuple>TupleMask<T> create(String... cols){  return new TupleMask<>(cols[0],Arrays.copyOfRange(cols,1,cols.length - 1));}  }
class C{  public static IStatus validateFieldName(String name,String sourceLevel,String complianceLevel){  return validateIdentifier(name,sourceLevel,complianceLevel);}  }
class C{  public boolean isExclusive(){  return permits == PathLockFactory.this.maxThreads;}  }
class C{  final static int evalWhite(Position pos){  Evaluate eval=new Evaluate();  int ret=eval.evalPos(pos);  Position symPos=swapColors(pos);  int symScore=eval.evalPos(symPos);  assertEquals(ret,symScore);  if (!pos.whiteMove) {    ret=-ret;  }  return ret;}  }
class C{  public void testGetParsers() throws Exception {  Parser[] parsers=parserFactory.getParsers("text/html","http://foo.com");  assertNotNull(parsers);  assertEquals(1,parsers.length);  assertEquals("org.apache.nutch.parse.tika.TikaParser",parsers[0].getClass().getName());  parsers=parserFactory.getParsers("text/html; charset=ISO-8859-1","http://foo.com");  assertNotNull(parsers);  assertEquals(1,parsers.length);  assertEquals("org.apache.nutch.parse.tika.TikaParser",parsers[0].getClass().getName());  parsers=parserFactory.getParsers("application/x-javascript","http://foo.com");  assertNotNull(parsers);  assertEquals(1,parsers.length);  assertEquals("org.apache.nutch.parse.js.JSParseFilter",parsers[0].getClass().getName());  parsers=parserFactory.getParsers("text/plain","http://foo.com");  assertNotNull(parsers);  assertEquals(1,parsers.length);  assertEquals("org.apache.nutch.parse.tika.TikaParser",parsers[0].getClass().getName());  Parser parser1=parserFactory.getParsers("text/plain","http://foo.com")[0];  Parser parser2=parserFactory.getParsers("*","http://foo.com")[0];  assertEquals("Different instances!",parser1.hashCode(),parser2.hashCode());  parsers=parserFactory.getParsers("text/rss","http://foo.com");  assertNotNull(parsers);  assertEquals(1,parsers.length);  assertEquals("org.apache.nutch.parse.tika.TikaParser",parsers[0].getClass().getName());}  }
class C{  @SuppressWarnings("unchecked") @Override public synchronized void doPut(BaseSolrResource endpoint,Representation entity,Object json){  if (json instanceof Map) {    String resourceId=ManagedEndpoint.resolveResourceId(endpoint.getRequest());    Map<String,String> info=(Map<String,String>)json;    info.put("resourceId",resourceId);    storeManagedData(applyUpdatesToManagedData(json));  } else {    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,"Expected Map to create a new ManagedResource but received a " + json.getClass().getName());  }}  }
class C{  static PageFreeList read(PageStore store,Data data,int pageId){  PageFreeList p=new PageFreeList(store,pageId);  p.data=data;  p.read();  return p;}  }
class C{  public static BlockMirror initializeMirror(Volume volume,VirtualPool vPool,URI recommendedPoolURI,String volumeLabel,DbClient dbClient){  BlockMirror createdMirror=new BlockMirror();  createdMirror.setSource(new NamedURI(volume.getId(),volume.getLabel()));  createdMirror.setId(URIUtil.createId(BlockMirror.class));  URI cgUri=volume.getConsistencyGroup();  if (!NullColumnValueGetter.isNullURI(cgUri)) {    createdMirror.setConsistencyGroup(cgUri);  }  createdMirror.setLabel(volumeLabel);  createdMirror.setStorageController(volume.getStorageController());  createdMirror.setSystemType(volume.getSystemType());  createdMirror.setVirtualArray(volume.getVirtualArray());  if (!NullColumnValueGetter.isNullURI(volume.getAutoTieringPolicyUri())) {    createdMirror.setAutoTieringPolicyUri(volume.getAutoTieringPolicyUri());  }  createdMirror.setProtocol(new StringSet());  createdMirror.getProtocol().addAll(volume.getProtocol());  createdMirror.setCapacity(volume.getCapacity());  createdMirror.setProject(new NamedURI(volume.getProject().getURI(),createdMirror.getLabel()));  createdMirror.setTenant(new NamedURI(volume.getTenant().getURI(),createdMirror.getLabel()));  createdMirror.setPool(recommendedPoolURI);  createdMirror.setVirtualPool(vPool.getId());  createdMirror.setSyncState(SynchronizationState.UNKNOWN.toString());  createdMirror.setSyncType(BlockMirror.MIRROR_SYNC_TYPE);  createdMirror.setThinlyProvisioned(volume.getThinlyProvisioned());  dbClient.createObject(createdMirror);  addMirrorToVolume(volume,createdMirror,dbClient);  return createdMirror;}  }
class C{  public double max(double[] series){  double max=Double.MIN_VALUE;  for (int i=0; i < series.length; i++) {    if (max < series[i]) {      max=series[i];    }  }  return max;}  }
class C{  public static String parseStandardDate(Date date){  SimpleDateFormat formatter=new SimpleDateFormat("yyyyMMdd",Locale.getDefault());  formatter.setLenient(false);  return formatter.format(date);}  }
class C{  public static boolean isPhoneNumber(String str){  return isRegexMatch(str,REGEX_PHONE_NUMBER);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public WorldWindowGLJPanel(WorldWindow shareWith){  super(Configuration.getRequiredGLCapabilities(),new BasicGLCapabilitiesChooser());  if (shareWith != null)   this.setSharedContext(shareWith.getContext());  try {    this.wwd=((WorldWindowGLDrawable)WorldWind.createConfigurationComponent(AVKey.WORLD_WINDOW_CLASS_NAME));    this.wwd.initDrawable(this);    this.wwd.addPropertyChangeListener(this);    if (shareWith != null)     this.wwd.initGpuResourceCache(shareWith.getGpuResourceCache()); else     this.wwd.initGpuResourceCache(WorldWindowImpl.createGpuResourceCache());    this.createView();    this.createDefaultInputHandler();    WorldWind.addPropertyChangeListener(WorldWind.SHUTDOWN_EVENT,this);    this.wwd.endInitialization();  } catch (  Exception e) {    String message=Logging.getMessage("Awt.WorldWindowGLSurface.UnabletoCreateWindow");    Logging.logger().severe(message);    throw new WWRuntimeException(message,e);  }}  }
class C{  public void onClickContentView(NotificationView view,View contentView,NotificationEntry entry){  if (DBG)   Log.v(TAG,"onClickContentView - " + entry.ID);}  }
class C{  public boolean isDragAcceptable(DropTargetDragEvent e){  if ((e.getDropAction() & DnDConstants.ACTION_COPY_OR_MOVE) == 0) {    return false;  }  if (!e.isDataFlavorSupported(StringData.TREEPATH_FLAVOR)) {    return false;  }  Point pt=e.getLocation();  TreePath path=getClosestPathForLocation(pt.x,pt.y);  if (path.equals(m_selectedTreePath)) {    return false;  }  DataFlavor[] flavors=e.getCurrentDataFlavors();  for (  DataFlavor flavor : flavors) {    if (flavor.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType)) {      return true;    }  }  return true;}  }
class C{  public static <T1,T2,T3,R>BiFunction<T2,T3,R> partial3(final T1 t1,final TriFunction<T1,T2,T3,R> triFunc){  return null;}  }
class C{  public void flush() throws IOException {  writeCurrentBitSet();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void dropDownstreamTo(long absolutePosition){  int relativePosition=(int)(absolutePosition - totalBytesDropped);  int allocationIndex=relativePosition / allocationLength;  for (int i=0; i < allocationIndex; i++) {    allocator.release(dataQueue.remove());    totalBytesDropped+=allocationLength;  }}  }
class C{  @Override public V put(final K key,final V value){  final Object convertedKey=convertKey(key);  final int hashCode=hash(convertedKey);  final int index=hashIndex(hashCode,data.length);  HashEntry<K,V> entry=data[index];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(convertedKey,entry.key)) {      final V oldValue=entry.getValue();      updateEntry(entry,value);      return oldValue;    }    entry=entry.next;  }  addMapping(index,hashCode,key,value);  return null;}  }
class C{  public void addRule(String ruleExpression,T resultIfMatched){  mRuleMap.add(new MimeMatcherRule(ruleExpression,resultIfMatched));}  }
class C{  public DoubleMatrix jblas_SPDValues(){  return org.jblas.Singular.SVDValues(new DoubleMatrix(this.getArray()));}  }
class C{  public boolean isSetReceivers(){  return this.receivers != null;}  }
class C{  public TFloatHash(int initialCapacity,TFloatHashingStrategy strategy){  super(initialCapacity);  _hashingStrategy=strategy;}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  public String send(){  log.info("(" + m_smtpHost + ") "+ m_from+ " -> "+ m_to);  m_sentMsg=null;  if (!isValid(true)) {    m_sentMsg="Invalid Data";    return m_sentMsg;  }  Properties props=System.getProperties();  props.put("mail.store.protocol","smtp");  props.put("mail.transport.protocol","smtp");  props.put("mail.host",m_smtpHost);  if (CLogMgt.isLevelFinest())   props.put("mail.debug","true");  Session session=null;  try {    if (m_auth != null)     props.put("mail.smtp.auth","true");    if (m_smtpHost.equalsIgnoreCase("smtp.gmail.com")) {      props.put("mail.smtp.port","587");      props.put("mail.smtp.starttls.enable","true");    }    session=Session.getInstance(props,m_auth);    session.setDebug(CLogMgt.isLevelFinest());  } catch (  SecurityException se) {    log.log(Level.WARNING,"Auth=" + m_auth + " - "+ se.toString());    m_sentMsg=se.toString();    return se.toString();  }catch (  Exception e) {    log.log(Level.SEVERE,"Auth=" + m_auth,e);    m_sentMsg=e.toString();    return e.toString();  }  try {    m_msg=new SMTPMessage(session);    m_msg.setFrom(m_from);    InternetAddress[] rec=getTos();    if (rec.length == 1)     m_msg.setRecipient(Message.RecipientType.TO,rec[0]); else     m_msg.setRecipients(Message.RecipientType.TO,rec);    rec=getCcs();    if (rec != null && rec.length > 0)     m_msg.setRecipients(Message.RecipientType.CC,rec);    rec=getBccs();    if (rec != null && rec.length > 0)     m_msg.setRecipients(Message.RecipientType.BCC,rec);    if (m_replyTo != null)     m_msg.setReplyTo(new Address[]{m_replyTo});    m_msg.setSentDate(new java.util.Date());    m_msg.setHeader("Comments","AdempiereMail");    m_msg.setAllow8bitMIME(true);    m_msg.setReturnOption(SMTPMessage.RETURN_HDRS);    setContent();    m_msg.saveChanges();    Transport t=session.getTransport("smtp");    t.connect();    Transport.send(m_msg);    log.fine("Success - MessageID=" + m_msg.getMessageID());  } catch (  MessagingException me) {    Exception ex=me;    StringBuffer sb=new StringBuffer("(ME)");    boolean printed=false;    do {      if (ex instanceof SendFailedException) {        SendFailedException sfex=(SendFailedException)ex;        Address[] invalid=sfex.getInvalidAddresses();        if (!printed) {          if (invalid != null && invalid.length > 0) {            sb.append(" - Invalid:");            for (int i=0; i < invalid.length; i++)             sb.append(" ").append(invalid[i]);          }          Address[] validUnsent=sfex.getValidUnsentAddresses();          if (validUnsent != null && validUnsent.length > 0) {            sb.append(" - ValidUnsent:");            for (int i=0; i < validUnsent.length; i++)             sb.append(" ").append(validUnsent[i]);          }          Address[] validSent=sfex.getValidSentAddresses();          if (validSent != null && validSent.length > 0) {            sb.append(" - ValidSent:");            for (int i=0; i < validSent.length; i++)             sb.append(" ").append(validSent[i]);          }          printed=true;        }        if (sfex.getNextException() == null)         sb.append(" ").append(sfex.getLocalizedMessage());      } else       if (ex instanceof AuthenticationFailedException) {        sb.append(" - Invalid Username/Password - " + m_auth);      } else {        String msg=ex.getLocalizedMessage();        if (msg == null)         sb.append(": ").append(ex.toString()); else {          if (msg.indexOf("Could not connect to SMTP host:") != -1) {            int index=msg.indexOf('\n');            if (index != -1)             msg=msg.substring(0,index);            String cc="??";            if (m_ctx != null)             cc=m_ctx.getProperty("#AD_Client_ID");            msg+=" - AD_Client_ID=" + cc;          }          String className=ex.getClass().getName();          if (className.indexOf("MessagingException") != -1)           sb.append(": ").append(msg); else           sb.append(" ").append(className).append(": ").append(msg);        }      }      if (ex instanceof MessagingException)       ex=((MessagingException)ex).getNextException(); else       ex=null;    } while (ex != null);    if (CLogMgt.isLevelFinest())     log.log(Level.WARNING,sb.toString(),me); else     log.log(Level.WARNING,sb.toString());    m_sentMsg=sb.toString();    return sb.toString();  }catch (  Exception e) {    log.log(Level.SEVERE,"",e);    m_sentMsg=e.getLocalizedMessage();    return e.getLocalizedMessage();  }  if (CLogMgt.isLevelFinest())   dumpMessage();  m_sentMsg=SENT_OK;  return m_sentMsg;}  }
class C{  public SpanQuery snear(SpanQuery s,SpanQuery m,SpanQuery e,int slop,boolean inOrder){  if (inOrder) {    return spanNearOrderedQuery(slop,s,m,e);  } else {    return spanNearUnorderedQuery(slop,s,m,e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.493 -0500",hash_original_method="BBF1530237A94448CCB60A02BEEFAB6C",hash_generated_method="1209DCE3DE05B77A0B5FDB69F25297DE") protected void removeTransactionHash(SIPTransaction sipTransaction){  SIPRequest sipRequest=sipTransaction.getOriginalRequest();  if (sipRequest == null)   return;  if (sipTransaction instanceof SIPClientTransaction) {    String key=sipTransaction.getTransactionId();    if (stackLogger.isLoggingEnabled()) {      stackLogger.logStackTrace();      stackLogger.logDebug("removing client Tx : " + key);    }    clientTransactionTable.remove(key);  } else   if (sipTransaction instanceof SIPServerTransaction) {    String key=sipTransaction.getTransactionId();    serverTransactionTable.remove(key);    if (stackLogger.isLoggingEnabled()) {      stackLogger.logDebug("removing server Tx : " + key);    }  }}  }
class C{  public static boolean isTfVcs(final Project project){  ArgumentHelper.checkNotNull(project,"project");  final ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project);  return projectLevelVcsManager.checkVcsIsActive(TFSVcs.TFVC_NAME);}  }
class C{  @Override public int runCommand(boolean mergeErrorIntoOutput,String... commands) throws IOException, InterruptedException {  return runCommand(mergeErrorIntoOutput,new ArrayList<String>(Arrays.asList(commands)));}  }
class C{  public static double toDegrees(double angrad){  return 0.0d;}  }
class C{  public void reseed(byte[] additionalInput){  if (Utils.isTooLarge(additionalInput,MAX_ADDITIONAL_INPUT / 8)) {    throw new IllegalArgumentException("Additional input string too large");  }  byte[] entropy=_entropySource.getEntropy();  byte[] seedMaterial=Arrays.concatenate(pad8(_s,_seedlen),entropy,additionalInput);  _s=Utils.hash_df(_digest,seedMaterial,_seedlen);  _reseedCounter=0;}  }
class C{  public boolean containsType(ItemStack stack){  if (stack == null || stack.stackSize == 0) {    return false;  }  return StackUtils.equalsWildcard(stack,theSolid);}  }
class C{  public static String dumpStackTrace(int level){  StackTraceElement[] elems=Thread.currentThread().getStackTrace();  level=(level == 0 ? elems.length : Math.min(level + 3,elems.length));  String ret=new String();  for (int i=3; i < level; i++) {    ret=ret + "\t" + elems[i].toString()+ '\n';  }  return ret;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void initOptions(){  CHECK_BOX.setSelected(iTunesSettings.ITUNES_SUPPORT_ENABLED.getValue());}  }
class C{  public SmallShoppingCartView(final String id){  super(id);}  }
class C{  public HolderDouble(){}  }
class C{  protected void caches(VisorNodeDataCollectorJobResult res,VisorNodeDataCollectorTaskArg arg){  try {    IgniteConfiguration cfg=ignite.configuration();    for (    String cacheName : ignite.context().cache().cacheNames()) {      if (proxyCache(cacheName))       continue;      if (arg.systemCaches() || !(isSystemCache(cacheName) || isIgfsCache(cfg,cacheName))) {        long start0=U.currentTimeMillis();        try {          VisorCache cache=createVisorCache().from(ignite,cacheName,arg.sample());          if (cache != null)           res.caches().add(cache);        } catch (        IllegalStateException|IllegalArgumentException e) {          if (debug && ignite.log() != null)           ignite.log().error("Ignored cache: " + cacheName,e);        } finally {          if (debug)           log(ignite.log(),"Collected cache: " + cacheName,getClass(),start0);        }      }    }  } catch (  Exception cachesEx) {    res.cachesEx(cachesEx);  }}  }
class C{  public static void check(boolean condition,int errorCode,String[] parameters) throws RuntimeException {  if (!condition) {    throw new RuntimeException(MP.getMessage(errorCode,parameters));  }}  }
class C{  private Artifact createCustomArtifact(String deployableFile){  Mock mockArtifact=mock(Artifact.class);  mockArtifact.stubs().method("getGroupId").will(returnValue("customGroupId"));  mockArtifact.stubs().method("getArtifactId").will(returnValue("customArtifactId"));  mockArtifact.stubs().method("getType").will(returnValue("customType"));  mockArtifact.stubs().method("getClassifier").will(returnValue(null));  mockArtifact.expects(atLeastOnce()).method("getFile").will(returnValue(new File(deployableFile)));  return (Artifact)mockArtifact.proxy();}  }
class C{  public void load(Matrix3f src){  System.arraycopy(src.getArray(),0,mMat,0,mMat.length);}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,int sortOrder,InputStream inputStreamDocumentFile) throws Exception {  addDocument(name,parentDivId,fileExt,sortOrder,inputStreamDocumentFile,null);}  }
class C{  @Deprecated public static BiosCommandResult createErrorStatus(String message){  return createErrorStatus(ServiceCode.CONTROLLER_ERROR,message);}  }
class C{  public static String readTextFile(String directory,String filename){  File f=new File(Environment.getExternalStorageDirectory().getAbsolutePath() + directory,filename);  try {    String str="";    Scanner s=new Scanner(f);    while (s.hasNextLine())     str+=s.nextLine() + "\n";    return str;  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void finish(){  if (mAccountAuthenticatorResponse != null) {    if (mResultBundle != null) {      mAccountAuthenticatorResponse.onResult(mResultBundle);    } else {      mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,"canceled");    }    mAccountAuthenticatorResponse=null;  }  super.finish();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 2) {    int masky=getMediaMask(stack);    return Wizard.getInstance().searchForTitlesNTE(getString(stack),masky);  } else   return Wizard.getInstance().searchForTitlesNTE(getString(stack),DBObject.MEDIA_MASK_ALL);}  }
class C{  public static void isEmpty(Collection<?> str,String message,Object... params) throws AssertException {  if (CommonUtil.isNotEmpty(str)) {    throw new AssertException(ErrorCodeDef.NOT_NULL_20005,message,params);  }}  }
class C{  static void deleteNonDefaultModelsMetaData(SQL table,String analysisGroup) throws AdeException {  for (  IModelMetaData modelMetaData : ModelRead.readNonDefault(table,analysisGroup)) {    deleteModelMetaData(table,modelMetaData.getModelInternalId());  }}  }
class C{  public ZDT5(){  super(11);}  }
class C{  public ProjectExtensionProperties(Project project,String[] keyList){  this(project,keyList,false);}  }
class C{  public void removeAll(StatusType statusType){  for (  Status status : new LinkedList<Status>(statuses)) {    if (status.getStatusType() == statusType) {      remove(status);    }  }}  }
class C{  public static boolean isUiThread(){  return Looper.getMainLooper().getThread() == Thread.currentThread();}  }
class C{  public void put(String key,String value){  if (key != null && value != null) {    urlParams.put(key,value);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof BlockBorder)) {    return false;  }  BlockBorder that=(BlockBorder)obj;  if (!this.insets.equals(that.insets)) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  return true;}  }
class C{  public BurlapRemote(String type,String url){  this.type=type;  this.url=url;}  }
class C{  public static void logException(final Throwable exception){  NaviLogger.severe("Reason" + ": " + exception.getLocalizedMessage());  NaviLogger.severe(StackTrace.toString(exception.getStackTrace()));}  }
class C{  private static boolean isCompoundNoun(final ExpressionType curType,final ExpressionType nextType,final boolean precedingVerb){  final boolean nextIsSubjObjName=nextType.isObject() || (nextType.isSubject() && !nextType.isPronoun());  if (nextIsSubjObjName) {    final boolean currIsSubjObj=curType.isObject() || (curType.isSubject() && !curType.isPronoun() && !curType.isName());    if (currIsSubjObj) {      return true;    } else     if (curType.isAdjective()) {      return true;    } else     if (curType.isVerb() && precedingVerb) {      return true;    }  }  return false;}  }
class C{  private CResultText(){}  }
class C{  protected SVGOMDefinitionSrcElement(){}  }
class C{  public static Value create(String str){  if (str == null) {    return noneValue;  }  Matcher m=doublePattern.matcher(str);  if (m.matches()) {    return new DoubleVal(Double.parseDouble(str));  } else   if (str.equalsIgnoreCase("true")) {    return new BooleanVal(true);  } else   if (str.equalsIgnoreCase("false")) {    return new BooleanVal(false);  } else   if (str.equalsIgnoreCase("None")) {    return none();  } else {    Matcher m2=arrayPattern.matcher(str);    if (m2.matches()) {      List<Double> subVals=new ArrayList<Double>();      for (      String subVal : str.substring(1,str.length() - 1).split(",")) {        subVals.add(Double.parseDouble(subVal));      }      return new ArrayVal(subVals);    } else     if (str.startsWith("[") && str.endsWith("]")) {      if (Graph.isRelational(str)) {        RelationalVal relval=new RelationalVal(str);        if (!relval.isEmpty()) {          return relval;        }      }      LinkedList<Value> subVals=new LinkedList<Value>();      Matcher m3=setPattern.matcher(str.substring(1,str.length() - 1));      while (m3.find()) {        String subval=m3.group(0).trim();        if (subval.length() > 0) {          subVals.add(create(subval));        }      }      return new SetVal(subVals);    }  }  return new StringVal(str);}  }
class C{  public static ServiceId create(ClientId client,String serviceCode,String serviceVersion){  return create(client.getXRoadInstance(),client.getMemberClass(),client.getMemberCode(),client.getSubsystemCode(),serviceCode,serviceVersion);}  }
class C{  public T caseLiteral(Literal object){  return null;}  }
class C{  public CodedException toCodedException(){  return CodedException.fromFault(faultCode,faultString,faultActor,faultDetail);}  }
class C{  public float update(){  value=((phase / TWO_PI) * 2 - 1) * amp + offset;  cyclePhase(frequency + fmod.update());  return value;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  final double radToDeg=180 / Math.PI;  final double degToRad=Math.PI / 180;  double azimuth=315 * degToRad;  double altitude=45 * degToRad;  double zFactor=1;  double z;  int progress;  int[] Dy={-1,0,1,1,1,0,-1,-1};  int[] Dx={1,1,1,0,-1,-1,-1,0};  double sinTheta;  double cosTheta;  double tanSlope;  int row, col;  double fx, fy, aspect;  double gridRes, eightGridRes;  double[] N=new double[8];  double term1, term2, term3;  double outNoData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=(Double.parseDouble(args[2]) - 90) * degToRad;  altitude=Double.parseDouble(args[3]) * degToRad;  zFactor=Double.parseDouble(args[4]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    sinTheta=Math.sin(altitude);    cosTheta=Math.cos(altitude);    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    gridRes=inputFile.getCellSizeX();    eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        midLat=Math.toRadians(midLat);        zFactor=1.0 / (113200 * Math.cos(midLat));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,outNoData);    outputFile.setNoDataValue(outNoData);    outputFile.setPreferredPalette("grey.pal");    long[] histo=new long[256];    long numCells=0;    int index;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (int c=0; c < 8; c++) {            N[c]=inputFile.getValue(row + Dy[c],col + Dx[c]);            if (N[c] != noData) {              N[c]=N[c] * zFactor;            } else {              N[c]=z;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            tanSlope=Math.sqrt(fx * fx + fy * fy);            aspect=(180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx))) * degToRad;            term1=tanSlope / Math.sqrt(1 + tanSlope * tanSlope);            term2=sinTheta / tanSlope;            term3=cosTheta * Math.sin(azimuth - aspect);            z=term1 * (term2 - term3);          } else {            z=0.5;          }          z=(int)(z * 255);          if (z < 0) {            z=0;          }          histo[(int)z]++;          numCells++;          outputFile.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    double clipPercent=0.01;    if (args.length >= 6) {      clipPercent=Double.parseDouble(args[5]) / 100.0;    }    int newMin=0;    int newMax=0;    double targetCellNum=numCells * clipPercent;    long sum=0;    for (int c=0; c < 256; c++) {      sum+=histo[c];      if (sum >= targetCellNum) {        newMin=c;        break;      }    }    sum=0;    for (int c=255; c >= 0; c--) {      sum+=histo[c];      if (sum >= targetCellNum) {        newMax=c;        break;      }    }    if (newMax > newMin) {      outputFile.setDisplayMinimum((double)newMin);      outputFile.setDisplayMaximum((double)newMax);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public LoggingFilter(Class<?> clazz){  this(clazz.getName());}  }
class C{  private void createRequiredEntities(){  final String minimumDaysBetweenDisbursalAndFirstRepayment="7";  this.createGroupEntityWithCalendar();  this.createClientEntity();  this.associateClientToGroup(this.groupId,this.clientId);  this.createLoanProductEntity(minimumDaysBetweenDisbursalAndFirstRepayment);}  }
class C{  public static DateTime extendRegistrationWithCap(DateTime now,DateTime currentExpirationTime,Integer extendedRegistrationYears){  return earliestOf(leapSafeAddYears(currentExpirationTime,Optional.fromNullable(extendedRegistrationYears).or(0)),leapSafeAddYears(now,MAX_REGISTRATION_YEARS));}  }
class C{  public static SourceLineAnnotation fromVisitedInstruction(BytecodeScanningDetector visitor,int pc){  return fromVisitedInstructionRange(visitor.getClassContext(),visitor,pc,pc);}  }
class C{  public static void closeFolder(String sessionID,Integer bookID,int folderID,String entidad) throws BookException, SessionException, ValidationException {  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  Validator.validate_Integer(bookID,ValidationException.ATTRIBUTE_BOOK);  Transaction tran=null;  try {    Session session=HibernateUtil.currentSession(entidad);    tran=session.beginTransaction();    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    if (!cacheBag.containsKey(bookID)) {      throw new BookException(BookException.ERROR_BOOK_NOT_OPEN);    }    AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    unlock(session,bookID,folderID,user);    HibernateUtil.commitTransaction(tran);  } catch (  BookException bE) {    HibernateUtil.rollbackTransaction(tran);    throw bE;  }catch (  SessionException sE) {    HibernateUtil.rollbackTransaction(tran);    throw sE;  }catch (  Exception e) {    HibernateUtil.rollbackTransaction(tran);    log.error("Impossible to close the book [" + bookID + "] and fdrid ["+ folderID+ "] for the session ["+ sessionID+ "]",e);    throw new BookException(BookException.ERROR_CANNOT_CLOSE_FOLDER);  } finally {    HibernateUtil.closeSession(entidad);  }}  }
class C{  public void testDeployEar(){  java.io.File earFile=new java.io.File("target/test-artifacts/simple-ear.ear");  EAR ear=(EAR)factory.createDeployable("jonas5x",earFile.getAbsolutePath(),DeployableType.EAR);  ear.setName("test");  deployer.deploy(ear);  assertTrue(fileHandler.exists(deployer.getDeployableDir(ear) + "/test.ear"));}  }
class C{  public void close(){}  }
class C{  public void testToPlainStringNegPosExp(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E100";  BigDecimal aNumber=new BigDecimal(a);  String result="-1238096483923847545735673567457356356789029578490276878767828700000000000000000000000000000000000000000000000000000000000000000000000";  assertTrue("incorrect value",aNumber.toPlainString().equals(result));}  }
class C{  public double[] computeLocalUsingPreviousObservations(double[] source,double[] destination) throws Exception {  return computeLocalUsingPreviousObservations(source,destination,false);}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (!m_doneEval) {    this.m_transformer.getMsgMgr().error(xctxt.getSAXLocator(),XSLTErrorResources.ER_REFERENCING_ITSELF,new Object[]{((ElemVariable)this.object()).getName().getLocalName()});  }  VariableStack vars=xctxt.getVarStack();  int currentFrame=vars.getStackFrame();  ElemVariable velem=(ElemVariable)m_obj;  try {    m_doneEval=false;    if (-1 != velem.m_frameSize)     vars.link(velem.m_frameSize);    XObject var=velem.getValue(m_transformer,m_context);    m_doneEval=true;    return var;  }  finally {    if (-1 != velem.m_frameSize)     vars.unlink(currentFrame);  }}  }
class C{  public BadgedImageView(Context context,int badgeGravity,int badgePadding,int badgeColor){  super(context);  this.badgeGravity=badgeGravity;  this.badgePadding=badgePadding;  this.badgeColor=badgeColor;}  }
class C{  public WRAcc(double[] priors,int large){  super(priors,large);}  }
class C{  public static Element toElement(String html){  return toElement(html,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void instanceOf(final Type type){  typeInsn(Opcodes.INSTANCEOF,type);}  }
class C{  public void flush() throws IOException {  WspUtil.writeUint8(os_,0x01);  writePublicIdentifier(os_,publicID_);  WspUtil.writeUintvar(os_,WapConstants.MIB_ENUM_UTF_8);  writeStringTable(os_);  wbxmlBody_.close();  wbxmlBody_.writeTo(os_);  os_.flush();}  }
class C{  public int size(){  return nodes.size();}  }
class C{  public void add(long start,long end,SequenceNameLocus region){  if (mSize == mStarts.length) {    final int newLen=mStarts.length * 3 / 2 + 1;    mStarts=Arrays.copyOf(mStarts,newLen);    mEnds=Arrays.copyOf(mEnds,newLen);    mRegions=Arrays.copyOf(mRegions,newLen);  }  mStarts[mSize]=start;  mEnds[mSize]=end;  mRegions[mSize]=region;  mSize++;}  }
class C{  private void extractHandlerFromURLPath(SolrRequestParsers parser) throws Exception {  if (handler == null && path.length() > 1) {    handler=core.getRequestHandler(path);    if (handler == null) {      if (path.equals("/schema") || path.startsWith("/schema/")) {        solrReq=parser.parse(core,path,req);        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(solrReq,new SolrQueryResponse()));        if (path.equals(req.getServletPath())) {          action=PASSTHROUGH;          return;        } else {          action=FORWARD;          return;        }      }    }    if (handler == null && parser.isHandleSelect()) {      if ("/select".equals(path) || "/select/".equals(path)) {        solrReq=parser.parse(core,path,req);        invalidStates=checkStateIsValid(solrReq.getParams().get(CloudSolrClient.STATE_VERSION));        String qt=solrReq.getParams().get(CommonParams.QT);        handler=core.getRequestHandler(qt);        if (handler == null) {          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"unknown handler: " + qt);        }        if (qt != null && qt.startsWith("/") && (handler instanceof ContentStreamHandlerBase)) {          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Request Handler ('qt').  Do not use /select to access: " + qt);        }      }    }  }}  }
class C{  public void addPoint(double x,double y){  dataset.getSeries(0).add(x,y,true);}  }
class C{  @Nullable public IgniteUuid discardedCustomMessageId(){  return discardCustomMsgId;}  }
class C{  private InvokerBytecodeGenerator(String className,LambdaForm form,MethodType invokerType){  this(form,form.names.length,className,form.debugName,invokerType);  Name[] names=form.names;  for (int i=0, index=0; i < localsMap.length; i++) {    localsMap[i]=index;    if (i < names.length) {      BasicType type=names[i].type();      index+=type.basicTypeSlots();      localTypes[i]=type;    }  }}  }
class C{  @Deprecated public static <T>UnmodifiableIterator<T> unmodifiableIterator(UnmodifiableIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    String returnedHeader="";    for (i=0; i < numImages; i++) {      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      GeoTiff gt=new GeoTiff(imageFiles[i]);      gt.read();      int compressionType=gt.getCompressionType();      if (compressionType != 1) {        showFeedback("GeoTiff import does not currently support compressed files.");        return;      }      boolean hasNoDataValue=gt.hasNoDataTag();      double nodata;      if (hasNoDataValue) {        nodata=gt.getNoData();      } else {        nodata=-32768;      }      int nRows=gt.getNumberRows();      int nCols=gt.getNumberColumns();      int dot=imageFiles[i].lastIndexOf(".");      String tiffExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(tiffExtension,"dep");      if (i == 0) {        returnedHeader=whiteboxHeaderFile;      }      whiteboxDataFile=imageFiles[i].replace(tiffExtension,"tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      ByteOrder byteOrder=gt.getByteOrder();      WhiteboxRasterBase.DataScale myDataScale=WhiteboxRasterBase.DataScale.CONTINUOUS;      if (gt.getPhotometricInterpretation() == 2) {        myDataScale=WhiteboxRasterBase.DataScale.RGB;      }      final WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,gt.getNorth(),gt.getSouth(),gt.getEast(),gt.getWest(),nRows,nCols,myDataScale,WhiteboxRasterBase.DataType.FLOAT,nodata,nodata);      wbr.setByteOrder(byteOrder.toString());      double z;      int oldProgress=-1;      for (int row=0; row < nRows; row++) {        for (int col=0; col < nCols; col++) {          z=gt.getValue(row,col);          if (!hasNoDataValue && (z == -32768 || z == -Float.MAX_VALUE)) {            nodata=z;            hasNoDataValue=true;            wbr.setNoDataValue(nodata);          }          wbr.setValue(row,col,z);        }        progress=(int)(100f * row / (nRows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Exporting GeoTiff file...",progress);        }      }      wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      wbr.addMetadataEntry("Created on " + new Date());      String[] metaData=gt.showInfo();      for (int a=0; a < metaData.length; a++) {        wbr.addMetadataEntry(metaData[a]);      }      wbr.close();      gt.close();    }    if (!returnedHeader.isEmpty()) {      returnData(returnedHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Object lockId(){  return lockId;}  }
class C{  public boolean isMask(int mask){  return OMAction.isMask(behaviorMask,mask);}  }
class C{  public void select(Coords coords){  if ((coords == null) || game.getBoard().contains(coords)) {    setSelected(coords);    moveCursor(selectedSprite,coords);    moveCursor(firstLOSSprite,null);    moveCursor(secondLOSSprite,null);    processBoardViewEvent(new BoardViewEvent(this,coords,null,BoardViewEvent.BOARD_HEX_SELECTED,0));  }}  }
class C{  public Interval toInterval(){  return toInterval(null);}  }
class C{  public Matrix(int m,int n){  this.m=m;  this.n=n;  A=new double[m][n];}  }
class C{  @Override public void test() throws ParameterException {  if (!vector.isDefined()) {    return;  }  for (  double[] vec : vector.getValue()) {    if (vec.length != size.intValue()) {      throw new WrongParameterValueException("Global Parameter Constraint Error.\n" + "The vectors of vector list parameter " + vector.getName() + " have not the required dimension of "+ size.getValue()+ " given by integer parameter "+ size.getName()+ ".");    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void storeArg(final int arg){  storeInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public void toData(DataOutput out) throws IOException {  DataSerializer.writeObject(this.name,out);  DataSerializer.writeObject(this.lesseeThread.getDistributedMember(),out);  out.writeInt(this.lesseeThread.getThreadId());  out.writeInt(this.leaseId);  out.writeLong(this.leaseExpireTime);}  }
class C{  public DateTime(){  super();}  }
class C{  public void addInvokestatic(int clazz,String name,String desc){  add(INVOKESTATIC);  addIndex(constPool.addMethodrefInfo(clazz,name,desc));  growStack(Descriptor.dataSize(desc));}  }
class C{  public void collectDbStats(ArrayList<DbStats> dbStatsList){synchronized (mLock) {    if (mAvailablePrimaryConnection != null) {      mAvailablePrimaryConnection.collectDbStats(dbStatsList);    }    for (    SQLiteConnection connection : mAvailableNonPrimaryConnections) {      connection.collectDbStats(dbStatsList);    }    for (    SQLiteConnection connection : mAcquiredConnections.keySet()) {      connection.collectDbStatsUnsafe(dbStatsList);    }  }}  }
class C{  protected void addDocs(String index,String type,int number) throws JsonProcessingException {  ObjectMapper mapper=new ObjectMapper();  for (int i=0; i < number; i++) {    index(index,type,"doc_" + i,mapper.writeValueAsString(TestDocument.createSimpleDoc(i)));  }  flush();}  }
class C{  public boolean allocate(){  int count;  while ((count=_useCount.get()) > 0) {    if (_useCount.compareAndSet(count,count + 1))     return true;  }  return false;}  }
class C{  protected long generateZeta(double ro,double pk,MersenneTwisterFast randomGenerator){  double u, v, e, x;  long k;  if (ro != ro_prev || pk != pk_prev) {    ro_prev=ro;    pk_prev=pk;    if (ro < pk) {      c=pk - 0.5;      d=0;    } else {      c=ro - 0.5;      d=(1.0 + ro) * Math.log((1.0 + pk) / (1.0 + ro));    }  }  do {    do {      u=randomGenerator.nextDouble();      v=randomGenerator.nextDouble();      x=(c + 0.5) * Math.exp(-Math.log(u) / ro) - c;    } while (x <= 0.5 || x >= maxlongint);    k=(int)(x + 0.5);    e=-Math.log(v);  } while (e < (1.0 + ro) * Math.log((k + pk) / (x + c)) - d);  return k;}  }
class C{  public JSONObject put(String name,double value){  put(name,JSON.value(value));  return this;}  }
class C{  public static void post(int what){  Message msg=new Message();  msg.what=what;  post(msg);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.662 -0500",hash_original_method="5F0180DFE6C43FD3D2E19E724059CA58",hash_generated_method="64AE4BFA28419E9E4F0FD9C8BF57BF4D") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public void addCC(String address){  if (__cc == null)   __cc=new StringBuffer(); else   __cc.append(", ");  __cc.append(address);}  }
class C{  public static FlexTable<String> createOverallConfusionMatrix(Map<List<String>,Double> aggregateMap){  FlexTable<String> cMTable=FlexTable.forClass(String.class);  cMTable.setSortRows(false);  Set<String> labelsPred=new TreeSet<String>();  Set<String> labelsAct=new TreeSet<String>();  for (  List<String> key : aggregateMap.keySet()) {    labelsPred.add(key.get(0).substring(0,key.get(0).indexOf(Constants.CM_PREDICTED)));    labelsAct.add(key.get(1).substring(0,key.get(1).indexOf(Constants.CM_ACTUAL)));  }  List<String> labelsPredL=new ArrayList<String>(labelsPred);  List<String> labelsActL=new ArrayList<String>(labelsAct);  double[][] tempM=new double[labelsAct.size()][labelsPred.size()];  for (  List<String> key : aggregateMap.keySet()) {    int c=labelsPredL.indexOf(key.get(0).substring(0,key.get(0).indexOf(Constants.CM_PREDICTED)));    int r=labelsActL.indexOf(key.get(1).substring(0,key.get(1).indexOf(Constants.CM_ACTUAL)));    tempM[r][c]=aggregateMap.get(key);  }  for (int i=0; i < tempM.length; i++) {    LinkedHashMap<String,String> row=new LinkedHashMap<String,String>();    for (int r=0; r < tempM[0].length; r++) {      row.put(labelsPredL.get(r) + " " + Constants.CM_PREDICTED,String.valueOf(tempM[i][r]));    }    cMTable.addRow(labelsActL.get(i) + " " + Constants.CM_ACTUAL,row);  }  return cMTable;}  }
class C{  public Object2IntOpenHashMap<int[]> supportMap(){  List<ItemSet> itemSets=learn();  Object2IntOpenHashMap<int[]> confidenceMap=new Object2IntOpenHashMap<>(itemSets.size());  for (  ItemSet itemSet : itemSets) {    confidenceMap.put(itemSet.items,itemSet.support);  }  return confidenceMap;}  }
class C{  private void unclaimStorageVolume(String storageVolumeName) throws VPlexApiException {  ClientResponse response=null;  try {    s_logger.info("Unclaim storage volume {}",storageVolumeName);    VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();    VPlexStorageVolumeInfo storageVolumeInfo=discoveryMgr.findStorageVolume(storageVolumeName);    if (storageVolumeInfo != null) {      s_logger.info("Found storage volume {} to be unclaimed",storageVolumeName);      URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_UNCLAIM_VOLUME);      Map<String,String> argsMap=new HashMap<String,String>();      argsMap.put(VPlexApiConstants.ARG_DASH_D,storageVolumeInfo.getPath());      JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);      s_logger.info("Unclaim storage volume POST data is {}",postDataObject.toString());      response=_vplexApiClient.post(requestURI,postDataObject.toString());      String responseStr=response.getEntity(String.class);      s_logger.info("Unclaim storage volume response is {}",responseStr);      if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {        if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {          s_logger.info("Unclaim storage volume completing asynchrounously");          _vplexApiClient.waitForCompletion(response);        } else {          String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);          throw VPlexApiException.exceptions.unclaimVolumeFailureStatus(storageVolumeName,String.valueOf(response.getStatus()),cause);        }      }      s_logger.info("Successfully unclaimed storage volume {}",storageVolumeName);    }  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedUnclaimVolume(storageVolumeName,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  private void parseNamespaceFilterConfig(final Node node,final ConfigSettings config){  String name;  Integer value;  Node nnode;  final NodeList list=node.getChildNodes();  final int length=list.getLength();  final Set<Integer> namespaces=new HashSet<Integer>();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(NAMESPACE_TO_KEEP)) {      value=Integer.parseInt(nnode.getChildNodes().item(0).getNodeValue());      namespaces.add(value);    }  }  config.setConfigParameter(ConfigurationKeys.NAMESPACES_TO_KEEP,namespaces);}  }
class C{  public boolean testMDShare(String algo,int dataLength) throws Exception {  MessageDigest mdCommon=MessageDigest.getInstance(algo);  try (ByteArrayInputStream bais=new ByteArrayInputStream(data);DigestInputStream dis=new DigestInputStream(bais,mdCommon);ByteArrayOutputStream baos=new ByteArrayOutputStream();DigestOutputStream dos=new DigestOutputStream(baos,mdCommon)){    int k=0;    byte[] buffer=new byte[10];    while (k < data.length) {      int len=dis.read(buffer,0,buffer.length);      if (len != -1) {        k+=len;        if (k < data.length) {          dos.write(data[k]);          k++;          dis.skip(1);        }      }    }    byte[] output=mdCommon.digest();    byte[] standard=md.digest(data);    return MessageDigest.isEqual(output,standard);  } catch (  Exception ex) {    out.println("TestMDShare failed at:" + algo + "/"+ dataLength+ " with unexpected exception");    throw ex;  }}  }
class C{  public static String formatSize(int size){  String suffix=null;  if (size >= 1024) {    suffix="KB";    size/=1024;    if (size >= 1024) {      suffix="MB";      size/=1024;    }  }  StringBuilder resultBuffer=new StringBuilder(Long.toString(size));  int commaOffset=resultBuffer.length() - 3;  while (commaOffset > 0) {    resultBuffer.insert(commaOffset,',');    commaOffset-=3;  }  if (suffix != null)   resultBuffer.append(suffix);  return resultBuffer.toString();}  }
class C{  public final Thread lastThread(){  return lastThread;}  }
class C{  public boolean isSynthetic(){  return (getModifiers() & ClassFileConstants.AccSynthetic) != 0;}  }
class C{  public OptionSet removeBlock2(){  this.block2=null;  return this;}  }
class C{  public synchronized void close(){  if (!this.mIsClosed) {    this.mSocket.close();    this.mIsClosed=true;  }}  }
class C{  public AsyncResult BrowseAsync(RequestHeader RequestHeader,ViewDescription View,UnsignedInteger RequestedMaxReferencesPerNode,BrowseDescription... NodesToBrowse){  BrowseRequest req=new BrowseRequest(RequestHeader,View,RequestedMaxReferencesPerNode,NodesToBrowse);  return channel.serviceRequestAsync(req);}  }
class C{  public boolean isRebalancing(){  return this.rebalance;}  }
class C{  public boolean contains(final long[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.BOOL_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  synchronized void sendRoleRequestIfNotPending(OFControllerRole role,long xid) throws IOException {  long now=System.nanoTime();  if (now - lastAssertTimeNs < assertTimeIntervalNs) {    return;  }  lastAssertTimeNs=now;  if (assertTimeIntervalNs < MAX_ASSERT_TIME_INTERVAL_NS) {    assertTimeIntervalNs<<=1;  } else   if (role == OFControllerRole.ROLE_MASTER) {    log.warn("Reasserting master role on switch {}, " + "likely a switch config error with multiple masters",role,sw);  }  if (!requestPending)   sendRoleRequest(role,xid); else   switchManagerCounters.roleNotResentBecauseRolePending.increment();}  }
class C{  public SVGOMSetElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement elem){  if (m_selectPattern != null) {    error(XSLTErrorResources.ER_CANT_HAVE_CONTENT_AND_SELECT,new Object[]{"xsl:" + this.getNodeName()});    return null;  }  return super.appendChild(elem);}  }
class C{  public void testRenameFile() throws Exception {  create(igfs,paths(DIR,SUBDIR),paths(FILE));  igfs.rename(FILE,FILE2);  checkExist(igfs,igfsSecondary,FILE2);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public void clearAll(){  nodeToPreds=new HashMap();  nodeToSuccs=new HashMap();  edgeToLabels=new HashMap();  labelToEdges=new HashMap();  heads=new HashChain();  tails=new HashChain();}  }
class C{  public T caseStatechart(Statechart object){  return null;}  }
class C{  public ITypeBinding resolveBinding(){  return this.ast.getBindingResolver().resolveType(this);}  }
class C{  @Override protected void next(String token){  tokens.add(token);}  }
class C{  public int end(String groupName){  return end(groupIndex(groupName));}  }
class C{  public SoundEvent(String sound,int radius,int volume,SoundLayer layer){  this(sound,volume,layer);  put("radius",radius);}  }
class C{  public SearchBuilder query(ConditionBuilder<?,?>... builders){  query.addAll(Arrays.asList(builders));  return this;}  }
class C{  protected void ensureRestrictedIndex(final int index){  if (index < 0)   throw new IndexOutOfBoundsException("Index (" + index + ") is negative");  if (index >= size())   throw new IndexOutOfBoundsException("Index (" + index + ") is greater than or equal to list size ("+ (size())+ ")");}  }
class C{  protected Integer wrapValue(int k){  return new Integer(k);}  }
class C{  public boolean decodeShortInteger(int startIndex){  if ((mWspData[startIndex] & 0x80) == 0) {    return false;  }  mUnsigned32bit=mWspData[startIndex] & 0x7f;  mDataLength=1;  return true;}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  protected void dispatchSVGZoomEvent(){  if (bridgeContext.isSVG12()) {    dispatchSVGDocEvent("zoom");  } else {    dispatchSVGDocEvent("SVGZoom");  }}  }
class C{  public void debug(Object message,Throwable exception){  log(Level.FINE,String.valueOf(message),exception);}  }
class C{  @Override public boolean isReachable(ObjectReference object){  if (Plan.SCAN_BOOT_IMAGE && this == Plan.vmSpace)   return true; else   return (VM.objectModel.readAvailableByte(object) & GC_MARK_BIT_MASK) == markState;}  }
class C{  @Override public void createRedisAppKey(Application application,String dockerManagerIP,String serverPort,String serverManagerPort){  String suffixCloudUnit=application.getSuffixCloudUnitIO();  JedisPool pool=null;  Jedis jedis=null;  try {    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);    jedis=pool.getResource();    String subNameSpace=concatSubNameSpace(application);    String key=subNameSpace + suffixCloudUnit;    String frontend="frontend:" + key.toLowerCase();    jedis.rpush(frontend,key.toLowerCase());    jedis.rpush(frontend,"http://" + dockerManagerIP + ":"+ serverPort);    String frontendServerManager="frontend:manager-" + key.toLowerCase();    jedis.rpush(frontendServerManager,key.toLowerCase());    jedis.rpush(frontendServerManager,"http://" + dockerManagerIP + ":"+ serverManagerPort);  } catch (  JedisConnectionException|UnsupportedEncodingException e) {    logger.error("HipacheRedisUtils Exception",e);  } finally {    if (jedis != null) {      pool.destroy();    }  }}  }
class C{  public boolean isInterface(){  return interfaceMarker;}  }
class C{  public static String toString(char[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public static WrappingByteSource fromByteBuffer(ByteBuffer byteBuffer){  if (!byteBuffer.hasArray()) {    throw new IllegalArgumentException("incoming ByteBuffer must have a backing array");  }  return new WrappingByteSource().wrap(byteBuffer.array(),byteBuffer.arrayOffset() + byteBuffer.position(),byteBuffer.arrayOffset() + byteBuffer.limit() - byteBuffer.position());}  }
class C{  public static boolean overridingModules(){  return override;}  }
class C{  private Pack200Test(){}  }
class C{  public boolean isValid(boolean recheck){  if (!recheck)   return m_valid;  if (m_from == null || m_from.getAddress().length() == 0 || m_from.getAddress().indexOf(' ') != -1) {    log.warning("From is invalid=" + m_from);    return false;  }  InternetAddress[] ias=getTos();  if (ias == null) {    log.warning("No To");    return false;  }  for (int i=0; i < ias.length; i++) {    if (ias[i] == null || ias[i].getAddress().length() == 0 || ias[i].getAddress().indexOf(' ') != -1) {      log.warning("To(" + i + ") is invalid="+ ias[i]);      return false;    }  }  if (m_smtpHost == null || m_smtpHost.length() == 0) {    log.warning("SMTP Host is invalid" + m_smtpHost);    return false;  }  if (m_subject == null || m_subject.length() == 0) {    log.warning("Subject is invalid=" + m_subject);    return false;  }  return true;}  }
class C{  public synchronized void evictAll() throws IOException {  initialize();  for (  Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {    removeEntry(entry);  }}  }
class C{  public static byte[] readBytesAndClose(InputStream in,int length) throws IOException {  try {    if (length <= 0) {      length=Integer.MAX_VALUE;    }    int block=Math.min(Constants.IO_BUFFER_SIZE,length);    ByteArrayOutputStream out=new ByteArrayOutputStream(block);    copy(in,out,length);    return out.toByteArray();  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    in.close();  }}  }
class C{  public void resetBounds(){  bounds=null;}  }
class C{  public PolarSorter(PolarAnglePoint base){  this.baseX=base.x;  this.baseY=base.y;}  }
class C{  public double calc(){  if (counters.isEmpty())   return -1; else {    int cap=(int)(fileSize / blockSize + (fileSize % blockSize > 0 ? 1 : 0));    capacity(cap);    int sz=counters.size();    int n=F.sumInt(counters);    double mean=1.0 / sz;    double sigma=0;    for (    Integer counter : counters)     sigma+=Math.pow(counter.doubleValue() / n - mean,2);    sigma=Math.sqrt(sigma / sz);    return 1.0 - sigma;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.isArchiveFile());}  }
class C{  protected static int validateURI(String srvURI){  if (srvURI.startsWith("tcp://")) {    return URI_TYPE_TCP;  } else   if (srvURI.startsWith("ssl://")) {    return URI_TYPE_SSL;  } else   if (srvURI.startsWith("local://")) {    return URI_TYPE_LOCAL;  } else {    throw new IllegalArgumentException(srvURI);  }}  }
class C{  public static boolean isYesterday(Date date,Clock clock){  Date truncatedDate=toFirstSecond(date);  Date yesterday=getYesterday(clock);  return Objects.equals(truncatedDate,yesterday);}  }
class C{  public input addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static String createStatementRegex(StatementConstraints contraints){  Resource context=contraints.getContext();  Resource subject=contraints.getSubject();  Set<URI> predicates=contraints.getPredicates();  if (context == null && subject == null && (predicates == null || predicates.isEmpty())) {    return null;  }  String anyReg="[^" + SEP + "]*";  String contextReg=(context == null) ? anyReg : context.stringValue();  String subjectReg=(subject == null) ? anyReg : subject.stringValue();  String predicateReg="";  if (predicates == null || predicates.isEmpty()) {    predicateReg=anyReg;  } else {    predicateReg="(" + StringUtils.join(predicates,"|") + ")";  }  return "^" + contextReg + SEP+ subjectReg+ SEP+ predicateReg+ SEP+ ".*";}  }
class C{  public boolean hasCProfile(){  final boolean certRefs=DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_COMPLETE_CERTIFICATE_REFS);  final boolean revocationRefs=DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_COMPLETE_REVOCATION_REFS);  return certRefs || revocationRefs;}  }
class C{  public E removeMaximum(){  if (this.root == null)   return null;  return this.removeMaximum(this.root).comparable;}  }
class C{  public CGeneralSettingsPanel(){  super(new BorderLayout());  idaDirectoryPanel=new FileChooserPanel(ConfigManager.instance().getGeneralSettings().getIdaDirectory(),new InternalIDAListener(),"...",TEXTFIELD_WIDTH,TEXTFIELD_HEIGHT,0);  logLevelBox=new JComboBox<String>(new String[]{"Off","On","Verbose"});  logLevelBox.setPreferredSize(new Dimension(TEXTFIELD_WIDTH,TEXTFIELD_HEIGHT));  final ScriptEngineManager manager=new ScriptEngineManager();  scriptingBox=new LanguageBox(manager);  scriptingBox.setPreferredSize(new Dimension(TEXTFIELD_WIDTH,TEXTFIELD_HEIGHT));  final JPanel pMain=new JPanel(new BorderLayout());  pMain.add(createEditElementsPanel(),BorderLayout.NORTH);  emailBox.setPreferredSize(new Dimension(TEXTFIELD_WIDTH,TEXTFIELD_HEIGHT));  add(pMain);}  }
class C{  public void reset(){  getResources().clear();}  }
class C{  public synchronized void extendLifeOfCnxToServer(ServerLocation sl){  if (!this.allConnections.isEmpty()) {    final long now=System.nanoTime();    for (Iterator it=this.allConnections.iterator(); it.hasNext(); ) {      PooledConnection pc=(PooledConnection)it.next();      if (pc.remainingLife(now,lifetimeTimeoutNanos) > 0) {        break;      } else       if (pc.shouldDestroy()) {      } else       if (sl.equals(pc.getEndpoint().getLocation())) {        it.remove();        pc.setBirthDate(now);        getPoolStats().incLoadConditioningExtensions();        this.allConnections.addLast(pc);        break;      }    }  }}  }
class C{  private Field findMatchingField(JDiffField field){  Field[] fields=mClass.getDeclaredFields();  for (  Field f : fields) {    if (f.getName().equals(field.mName)) {      return f;    }  }  return null;}  }
class C{  public static boolean isLineSupported(Line.Info info){  Mixer mixer;  Mixer.Info[] infoArray=getMixerInfo();  for (int i=0; i < infoArray.length; i++) {    if (infoArray[i] != null) {      mixer=getMixer(infoArray[i]);      if (mixer.isLineSupported(info)) {        return true;      }    }  }  return false;}  }
class C{  public JLabel createLabel(String text,int x,int y,int width,int fontSize,Color color){  JLabel label=new JLabel(text);  label.setForeground(color);  label.setBounds(x,y,width,20);  label.setFont(new Font("Arial",0,fontSize));  this.add(label);  return label;}  }
class C{  public final void removeElementAt(final int id){  if (id >= 0) {    System.arraycopy(items,id + 1,items,id,current_item - 1 - id);    items[current_item - 1]="";  } else {    items[0]="";  }  current_item--;}  }
class C{  public final void length(int length){  _head=length;}  }
class C{  public LUDecomposition(Matrix A){  LU=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  piv=new int[m];  for (int i=0; i < m; i++) {    piv[i]=i;  }  pivsign=1;  double[] LUrowi;  double[] LUcolj=new double[m];  for (int j=0; j < n; j++) {    for (int i=0; i < m; i++) {      LUcolj[i]=LU[i][j];    }    for (int i=0; i < m; i++) {      LUrowi=LU[i];      int kmax=Math.min(i,j);      double s=0.0;      for (int k=0; k < kmax; k++) {        s+=LUrowi[k] * LUcolj[k];      }      LUrowi[j]=LUcolj[i]-=s;    }    int p=j;    for (int i=j + 1; i < m; i++) {      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {        p=i;      }    }    if (p != j) {      for (int k=0; k < n; k++) {        double t=LU[p][k];        LU[p][k]=LU[j][k];        LU[j][k]=t;      }      int k=piv[p];      piv[p]=piv[j];      piv[j]=k;      pivsign=-pivsign;    }    if (j < m & LU[j][j] != 0.0) {      for (int i=j + 1; i < m; i++) {        LU[i][j]/=LU[j][j];      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.IS_SORTED___PRIORITY_1:    return getPriority_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void fillDecoded(URLItem[] raw,String encoding,boolean scriptProteced,boolean sameAsArray) throws UnsupportedEncodingException {  clear();  String name, value;  for (int i=0; i < raw.length; i++) {    name=raw[i].getName();    value=raw[i].getValue();    if (raw[i].isUrlEncoded()) {      name=URLDecoder.decode(name,encoding,true);      value=URLDecoder.decode(value,encoding,true);    }    if (name.indexOf('.') != -1) {      StringList list=ListUtil.listToStringListRemoveEmpty(name,'.');      Struct parent=this;      while (list.hasNextNext()) {        parent=_fill(parent,list.next(),new CastableStruct(Struct.TYPE_LINKED),false,scriptProteced,sameAsArray);      }      _fill(parent,list.next(),value,true,scriptProteced,sameAsArray);    }    _fill(this,name,value,true,scriptProteced,sameAsArray);  }}  }
class C{  public void computeBounds(){  for (int i=0; i < diagram.getNumberOfLifelines(); i++) {    for (    Drawable view : getAllViewsAt(i)) {      processDrawable(view);    }  }  for (int i=0; i < leftOf.size(); i++) {    for (    SequenceElement arrow : leftOf.get(i)) {      processDrawable(arrow);    }  }  for (  Drawable d : other) {    processDrawable(d);  }  height+=diagram.getConfiguration().getLowerMargin();}  }
class C{  protected void parseRuleSet(){  SelectorList sl=null;  try {    sl=parseSelectorList();  } catch (  CSSParseException e) {    reportError(e);    return;  }  try {    documentHandler.startSelector(sl);    if (current != LexicalUnits.LEFT_CURLY_BRACE) {      reportError("left.curly.brace");      if (current == LexicalUnits.RIGHT_CURLY_BRACE) {        nextIgnoreSpaces();      }    } else {      nextIgnoreSpaces();      try {        parseStyleDeclaration(true);      } catch (      CSSParseException e) {        reportStyleDeclarationError(e);      }    }  }  finally {    documentHandler.endSelector(sl);  }}  }
class C{  @Override public void save(){  List<Object> contextSpecificObjects=new ArrayList<Object>();  if (!this.getBoolValue(FIELD_ADVANCED)) {    contextSpecificObjects.add(scanPolicy);  } else {    contextSpecificObjects.add(policyPanel.getScanPolicy());    if (target == null && this.customPanels != null) {      for (      CustomScanPanel customPanel : this.customPanels) {        target=customPanel.getTarget();        if (target != null) {          break;        }      }    }    getVariantPanel().saveParam(scannerParam);    if (getDisableNonCustomVectors().isSelected()) {      scannerParam.setTargetParamsInjectable(0);      scannerParam.setTargetParamsEnabledRPC(0);    }    if (!getBoolValue(FIELD_RECURSE) && injectionPointModel.getSize() > 0) {      int[][] injPoints=new int[injectionPointModel.getSize()][];      for (int i=0; i < injectionPointModel.getSize(); i++) {        Highlight hl=injectionPointModel.elementAt(i);        injPoints[i]=new int[2];        injPoints[i][0]=hl.getStartOffset();        injPoints[i][1]=hl.getEndOffset();      }      try {        if (target != null && target.getStartNode() != null) {          VariantUserDefined.setInjectionPoints(this.target.getStartNode().getHistoryReference().getURI().toString(),injPoints);          enableUserDefinedRPC();        }      } catch (      Exception e) {        logger.error(e.getMessage(),e);      }    }    scannerParam.setHostPerScan(extension.getScannerParam().getHostPerScan());    scannerParam.setThreadPerHost(extension.getScannerParam().getThreadPerHost());    scannerParam.setHandleAntiCSRFTokens(extension.getScannerParam().getHandleAntiCSRFTokens());    scannerParam.setMaxResultsToList(extension.getScannerParam().getMaxResultsToList());    contextSpecificObjects.add(scannerParam);    contextSpecificObjects.add(getTechTree().getTechSet());    if (this.customPanels != null) {      for (      CustomScanPanel customPanel : this.customPanels) {        Object[] objs=customPanel.getContextSpecificObjects();        if (objs != null) {          for (          Object obj : objs) {            contextSpecificObjects.add(obj);          }        }      }    }  }  target.setRecurse(this.getBoolValue(FIELD_RECURSE));  if (target.getContext() == null && getSelectedContext() != null) {    target.setContext(getSelectedContext());  }  this.extension.startScan(target,getSelectedUser(),contextSpecificObjects.toArray());}  }
class C{  private static boolean checkNullForDims(Object object){  Integer[] dimensions=(Integer[])object;  for (  Integer dimension : dimensions) {    if (null != dimension) {      return false;    }  }  return true;}  }
class C{  public static String createDestinationForFoldername(String template,Movie movie){  Pattern regex=Pattern.compile("\\{(.*?)\\}");  Matcher mat=regex.matcher(template);  while (mat.find()) {    template=template.replace(mat.group(0),replaceOptionalVariable(mat.group(1),movie,false));  }  return createDestination(template,movie,false);}  }
class C{  public void testNextLongBounded2(){  SplittableRandom sr=new SplittableRandom();  for (long least=-86028121; least < MAX_LONG_BOUND; least+=982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      long f=sr.nextLong(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      long j;      while (i < NCALLS && (j=sr.nextLong(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public String scopeSuffix(Scope scope){  return String.format("$%s",scope.getQualifiedNameString().replace("::","$").replace('.','$'));}  }
class C{  public void copy(PointPlacemarkAttributes attrs){  if (attrs != null) {    this.setImageAddress(attrs.getImageAddress());    this.setScale(attrs.getScale());    this.setHeading(attrs.getHeading());    this.setHeadingReference(attrs.getHeadingReference());    this.setPitch(attrs.getPitch());    this.setImageOffset(attrs.getImageOffset());    this.setImageColor(attrs.getImageColor());    this.setLineWidth(attrs.getLineWidth());    this.setLineMaterial(attrs.getLineMaterial());    this.setAntiAliasHint(attrs.getAntiAliasHint());    this.setLabelFont(attrs.getLabelFont());    this.setLabelOffset(attrs.getLabelOffset());    this.setLabelMaterial(attrs.getLabelMaterial());    this.setLabelScale(attrs.getLabelScale());    this.setUsePointAsDefaultImage(attrs.isUsePointAsDefaultImage());    this.setDrawImage(attrs.isDrawImage());    this.setDrawLabel(attrs.isDrawLabel());    this.image=attrs.image;  }}  }
class C{  public FastLongBuffer append(long element){  if ((currentBuffer == null) || (offset == currentBuffer.length)) {    needNewBuffer(size + 1);  }  currentBuffer[offset]=element;  offset++;  size++;  return this;}  }
class C{  public boolean equals(String obj2){  return m_str.equals(obj2);}  }
class C{  public LaunchExternalViewToolCommand(final ExternalTool tool,final String path,final boolean cleanUpFiles){  Check.notNull(tool,"tool");  Check.notNull(path,"filePath");  this.tool=tool;  this.path=path;  this.cleanUpFiles=cleanUpFiles;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof TimeSeriesDataItem)) {    return false;  }  TimeSeriesDataItem that=(TimeSeriesDataItem)obj;  if (!ObjectUtilities.equal(this.period,that.period)) {    return false;  }  if (!ObjectUtilities.equal(this.value,that.value)) {    return false;  }  return true;}  }
class C{  public static char[] createCharArrayTypeSignature(char[] typeName,boolean isResolved){  if (typeName == null)   throw new IllegalArgumentException("null");  int length=typeName.length;  if (length == 0)   throw new IllegalArgumentException(new String(typeName));  StringBuffer buffer=new StringBuffer(5);  int pos=encodeTypeSignature(typeName,0,isResolved,length,buffer);  pos=consumeWhitespace(typeName,pos,length);  if (pos < length)   throw new IllegalArgumentException(new String(typeName));  char[] result=new char[length=buffer.length()];  buffer.getChars(0,length,result,0);  return result;}  }
class C{  @Override public boolean containsKey(Object key){  int hash=getHash(key);  return getSegment(hash).containsKey(key,hash);}  }
class C{  public static SQLiteConnectionPool open(SQLiteDatabaseConfiguration configuration){  if (configuration == null) {    throw new IllegalArgumentException("configuration must not be null.");  }  SQLiteConnectionPool pool=new SQLiteConnectionPool(configuration);  pool.open();  return pool;}  }
class C{  public static void showManagedByParentToast(Context context){  boolean singleParentIsManager=PrefServiceBridge.getInstance().getSupervisedUserSecondCustodianName().isEmpty();  Toast.makeText(context,context.getString(singleParentIsManager ? R.string.managed_by_your_parent : R.string.managed_by_your_parents),Toast.LENGTH_LONG).show();}  }
class C{  public Map<String,OutputPort> redirectionMap(){  return redirectionMap;}  }
class C{  public void testEmptyFull(){  LinkedBlockingDeque q=new LinkedBlockingDeque(2);  assertTrue(q.isEmpty());  assertEquals("should have room for 2",2,q.remainingCapacity());  q.add(one);  assertFalse(q.isEmpty());  q.add(two);  assertFalse(q.isEmpty());  assertEquals(0,q.remainingCapacity());  assertFalse(q.offer(three));}  }
class C{  public LexicalUnit parsePropertyValue(String source) throws CSSException, IOException {  return parser.parsePropertyValue(new InputSource(new StringReader(source)));}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private static boolean validateValue(String name){  if (name == null)   return false;  final int N=name.length();  if (N == 0)   return false;  for (int i=0; i < N; i++) {    final char c=name.charAt(i);    if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c != '_')) {      return false;    }  }  return true;}  }
class C{  private int executeCompare(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return Operator.compare(executeExp(pc,sql,qr,expression.getOperand(0),row),executeExp(pc,sql,qr,expression.getOperand(1),row));}  }
class C{  public final void testGetCollection01(){  CollectionCertStoreParameters cp=new CollectionCertStoreParameters();  assertNotNull(cp.getCollection());}  }
class C{  private void expandCluster(int p,int clusterID,List<List<? extends VecPaired<VecPaired<Vec,Integer>,Double>>> knnVecList,int[] designations){  designations[p]=clusterID;  double pointEps;  int n;  Stack<Integer> seeds=new Stack<Integer>();{    List<? extends VecPaired<VecPaired<Vec,Integer>,Double>> neighbors=knnVecList.get(p);    for (int i=1; i < neighbors.size(); i++)     addSeed(neighbors,i,designations,clusterID,seeds);    pointEps=getEps(neighbors);    n=neighbors.get(k).length();  }  final double scale=Math.pow(2,alpha / n);  while (!seeds.isEmpty()) {    int currentP=seeds.pop();    List<? extends VecPaired<VecPaired<Vec,Integer>,Double>> neighbors=knnVecList.get(currentP);    double currentPEps=getEps(neighbors);    if (currentPEps <= scale * pointEps) {      for (int i=1; i < neighbors.size(); i++)       addSeed(neighbors,i,designations,clusterID,seeds);    }  }}  }
class C{  public int size(){  return count;}  }
class C{  public static IJavaProject chooseProject(Shell shell,IJavaProject initialSelection,Set<String> requiredNatures){  List<IJavaProject> javaProjects=new ArrayList<IJavaProject>();  try {    javaProjects.addAll(Arrays.asList(JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProjects()));  } catch (  JavaModelException e) {    CorePluginLog.logError(e);  }  if (requiredNatures != null) {    Iterator<IJavaProject> iter=javaProjects.iterator();    while (iter.hasNext()) {      IJavaProject javaProject=iter.next();      for (      String requiredNature : requiredNatures) {        try {          if (!NatureUtils.hasNature(javaProject.getProject(),requiredNature)) {            iter.remove();            break;          }        } catch (        CoreException e) {          CorePluginLog.logError(e);        }      }    }  }  ElementListSelectionDialog dialog=new JavaProjectSelectionDialog(shell,javaProjects,initialSelection);  if (dialog.open() == Window.OK) {    return (IJavaProject)dialog.getFirstResult();  }  return null;}  }
class C{  public FlagsAttributeImpl(){}  }
class C{  public void blob(byte[] blob) throws IOException {  print("(blob)",null);  printer.println();}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  @Override public void onCreate(){  super.onCreate();  JodaTimeAndroid.init(this);  component=createComponent();  PACKAGE_NAME=getApplicationContext().getPackageName();}  }
class C{  public void loadArgArray(){  push(argumentTypes.length);  newArray(OBJECT_TYPE);  for (int i=0; i < argumentTypes.length; i++) {    dup();    push(i);    loadArg(i);    box(argumentTypes[i]);    arrayStore(OBJECT_TYPE);  }}  }
class C{  public void insertUpdate(DocumentEvent e,Shape a,ViewFactory f){  updateChildren(e,a);  Rectangle alloc=((a != null) && isAllocationValid()) ? getInsideAllocation(a) : null;  int pos=e.getOffset();  View v=getViewAtPosition(pos,alloc);  if (v != null) {    v.insertUpdate(e,alloc,f);  }}  }
class C{  @Override public final boolean onCreate(){  db=new Database(getContext());  return true;}  }
class C{  public static long decodeZigZag64(final long n){  return (n >>> 1) ^ -(n & 1);}  }
class C{  public void init(){  if (!initialized) {    registerDelegateRegistrationHandler();    loadStoredDelegates();  }  initialized=true;}  }
class C{  public void toggleSelection(){  if (pickedObject != null) {    if (pickedObject.hasUserProperty(SELECTABLE)) {      boolean isNewSelection=pickedObject != this.selectedObject;      if (pickedObject instanceof Highlightable) {        if (isNewSelection && this.selectedObject instanceof Highlightable) {          ((Highlightable)this.selectedObject).setHighlighted(false);        }        ((Highlightable)pickedObject).setHighlighted(isNewSelection);        this.getWorldWindow().requestRedraw();      }      this.selectedObject=isNewSelection ? pickedObject : null;    } else {      Toast.makeText(getApplicationContext(),"The picked object is not selectable.",Toast.LENGTH_SHORT).show();    }  }}  }
class C{  public FieldCP(String clazz,String name,String sig){  uniq=(clazz + "&%$#&" + name+ "*()#$"+ sig).intern();  this.clazz=new ClassCP(clazz);  this.nt=new NameTypeCP(name,sig);}  }
class C{  protected boolean verboseBackup(){  return verbose;}  }
class C{  @Override public SelectResults filterEvaluate(ExecutionContext context,SelectResults intermediateResults,boolean completeExpansionNeeded,CompiledValue iterOperands,RuntimeIterator[] indpndntItrs,boolean isIntersection,boolean conditioningNeeded,boolean evaluateProjAttrib) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  Support.Assert(this._value.isDependentOnCurrentScope(context),"For a condition which does not depend on any RuntimeIterator of current scope , we should not have been in this function");  IndexInfo idxInfo[]=getIndexInfo(context);  ObjectType resultType=idxInfo[0]._index.getResultSetType();  int indexFieldsSize=-1;  SelectResults set=null;  if (resultType instanceof StructType) {    set=QueryUtils.createStructCollection(context,(StructTypeImpl)resultType);    indexFieldsSize=((StructTypeImpl)resultType).getFieldNames().length;  } else {    set=QueryUtils.createResultCollection(context,resultType);    indexFieldsSize=1;  }  int op=_is_defined ? TOK_NE : TOK_EQ;  Object key=QueryService.UNDEFINED;  QueryObserver observer=QueryObserverHolder.getInstance();  try {    observer.beforeIndexLookup(idxInfo[0]._index,op,key);    context.cachePut(CompiledValue.INDEX_INFO,idxInfo[0]);    idxInfo[0]._index.query(key,op,set,context);  }  finally {    observer.afterIndexLookup(set);  }  return QueryUtils.getconditionedIndexResults(set,idxInfo[0],context,indexFieldsSize,completeExpansionNeeded,iterOperands,indpndntItrs);}  }
class C{  public static void assertPing(String message,String expectedContent,URL pingURL,Map<String,String> requestProperties,boolean expectTrue,Logger errorLogger){  HttpUtils httpUtils=new HttpUtils();  httpUtils.setLogger(errorLogger);  HttpUtils.HttpResult result=new HttpUtils.HttpResult();  boolean success=httpUtils.ping(pingURL,requestProperties,result,PingUtils.TIMEOUT);  String text=message + ". Failed to ping [" + pingURL.toString()+ "], ";  if (result.responseCode == -1) {    text=text + "Cannot connect to the URL";  } else {    text=text + "Reason = [" + result.responseMessage+ "], Body = ["+ result.responseBody+ "], Code = ["+ result.responseCode+ "]";  }  if (expectTrue) {    assertTrue(text,success);  } else {    assertFalse(text,success);  }  if (expectedContent != null) {    String content=result.responseBody;    assertNotNull("result.responseBody is null",content);    assertTrue(content + " does not contain " + expectedContent,content.contains(expectedContent));  }}  }
class C{  public AbstractConfigurationCapabilityAndTypeValidator(ConfigurationType type,String supportsProperty){  this.type=type;  this.supportsProperty=supportsProperty;}  }
class C{  public static Config fromXml(final InputStream toConvert) throws JAXBException {  Unmarshaller stringUnmarshaller=getUnmarshaller();  return (Config)stringUnmarshaller.unmarshal(toConvert);}  }
class C{  private static Track parseTrak(ContainerAtom trak){  ContainerAtom mdia=trak.getContainerAtomOfType(Atom.TYPE_mdia);  int trackType=parseHdlr(mdia.getLeafAtomOfType(Atom.TYPE_hdlr).data);  Assertions.checkState(trackType == Track.TYPE_AUDIO || trackType == Track.TYPE_VIDEO);  Pair<Integer,Long> header=parseTkhd(trak.getLeafAtomOfType(Atom.TYPE_tkhd).data);  int id=header.first;  long timescale=parseMdhd(mdia.getLeafAtomOfType(Atom.TYPE_mdhd).data);  ContainerAtom stbl=mdia.getContainerAtomOfType(Atom.TYPE_minf).getContainerAtomOfType(Atom.TYPE_stbl);  Pair<MediaFormat,TrackEncryptionBox[]> sampleDescriptions=parseStsd(stbl.getLeafAtomOfType(Atom.TYPE_stsd).data);  return new Track(id,trackType,timescale,sampleDescriptions.first,sampleDescriptions.second);}  }
class C{  static double svd_pythag(double a,double b){  double p, r, s, t, u, temp;  p=svd_dmax(Math.abs(a),Math.abs(b));  if (p != 0.0) {    temp=svd_dmin(Math.abs(a),Math.abs(b)) / p;    r=temp * temp;    t=4.0 + r;    while (t != 4.0) {      s=r / t;      u=1.0 + 2.0 * s;      p*=u;      temp=s / u;      r*=temp * temp;      t=4.0 + r;    }  }  return p;}  }
class C{  @SuppressFBWarnings("CHROMIUM_SYNCHRONIZED_METHOD") @VisibleForTesting public synchronized void detachFromThread(){  mThreadId=null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean checkpw(String plaintext,String hashed){  return equalsNoEarlyReturn(hashed,hashpw(plaintext,hashed));}  }
class C{  public static Funnel<Integer> integerFunnel(){  return IntegerFunnel.INSTANCE;}  }
class C{  @Override public void onNewItem(int id,T item){  mGraphic.setId(id);}  }
class C{  public ByteArrayList(byte[] elements){  elements(elements);}  }
class C{  private void writeCSVFile(ExecutionContext ec,String fname) throws DMLRuntimeException {  MatrixObject mo=ec.getMatrixObject(input1.getName());  String outFmt="csv";  if (mo.isDirty()) {    mo.exportData(fname,outFmt,_formatProperties);  } else {    try {      OutputInfo oi=((MatrixFormatMetaData)mo.getMetaData()).getOutputInfo();      MatrixCharacteristics mc=((MatrixFormatMetaData)mo.getMetaData()).getMatrixCharacteristics();      if (oi == OutputInfo.CSVOutputInfo) {        WriterTextCSV writer=new WriterTextCSV((CSVFileFormatProperties)_formatProperties);        writer.addHeaderToCSV(mo.getFileName(),fname,mc.getRows(),mc.getCols());      } else       if (oi == OutputInfo.BinaryBlockOutputInfo || oi == OutputInfo.TextCellOutputInfo) {        mo.exportData(fname,outFmt,_formatProperties);      } else {        throw new DMLRuntimeException("Unexpected data format (" + OutputInfo.outputInfoToString(oi) + "): can not export into CSV format.");      }      MapReduceTool.writeMetaDataFile(fname + ".mtd",mo.getValueType(),mc,OutputInfo.CSVOutputInfo,_formatProperties);    } catch (    IOException e) {      throw new DMLRuntimeException(e);    }  }}  }
class C{  static public boolean handleRestart(){  log.debug("Start handleRestart");  try {    return InstanceManager.getDefault(jmri.ShutDownManager.class).restart();  } catch (  Exception e) {    log.error("Continuing after error in handleRestart",e);  }  return false;}  }
class C{  @Override public void addAttribute(String name,String value){  if (name.equals("length")) {    this.length=Integer.valueOf(value);  } else {    super.addAttribute(name,value);  }}  }
class C{  static final long[] compactCache(final long[] srcCache,int curCount,long thetaLong,boolean dstOrdered){  if (curCount == 0) {    return new long[0];  }  long[] cacheOut=new long[curCount];  int len=srcCache.length;  int j=0;  for (int i=0; i < len; i++) {    long v=srcCache[i];    if ((v <= 0L) || (v >= thetaLong))     continue;    cacheOut[j++]=v;  }  assert curCount == j;  if (dstOrdered) {    Arrays.sort(cacheOut);  }  return cacheOut;}  }
class C{  public boolean checkAndUpdateAlias(WBEMClient client,CIMInstance zoneServiceIns,String fabricId,String fabricWwn,ZoneWwnAlias alias) throws WBEMException {  boolean success=false;  ZoneWwnAliasUpdate updateAlias=(ZoneWwnAliasUpdate)alias;  _log.info("Starting update alias {}",updateAlias.getName());  ZoneWwnAlias existingAlias=_smisHelper.getAlias(client,updateAlias.getName(),fabricWwn,true);  if (existingAlias != null) {    _log.info("Found alias {}",updateAlias.getName());    if (!StringUtils.isEmpty(updateAlias.getNewName())) {      _log.warn("Rename alias is request and is not supported for Brocade.",existingAlias.getName());      if (StringUtils.equals(existingAlias.getName(),updateAlias.getNewName())) {        _log.info("The existing alias already has the requested name {}. Ignoring.",existingAlias.getName());      } else {        _log.error("A request is made to update alias name from {} to {}. Rename is not supported for Brocade",existingAlias.getName(),updateAlias.getNewName());        throw NetworkDeviceControllerException.exceptions.renameAliasNotSupported(alias.getName());      }    }    if (!StringUtils.isEmpty(updateAlias.getAddress()) && !StringUtils.equalsIgnoreCase(existingAlias.getAddress(),updateAlias.getAddress())) {      _log.info("The existing alias has a WWN other than the expected {}. It will not be updated.",updateAlias.getAddress());      throw NetworkDeviceControllerException.exceptions.aliasWithDifferentWwnExists(alias.getName(),existingAlias.getAddress(),updateAlias.getAddress());    }    if (!StringUtils.isEmpty(updateAlias.getNewAddress())) {      if (StringUtils.equalsIgnoreCase(existingAlias.getAddress(),updateAlias.getNewAddress())) {        _log.info("The existing alias already has the requested WWN {}. WWN will not change.",existingAlias.getAddress());      } else {        _log.info("Updating alias member from {} to {}",existingAlias.getAddress(),updateAlias.getNewAddress());        _smisHelper.removeZoneOrAliasMember(client,(CIMObjectPath)existingAlias.getCimMemberPath(),(CIMObjectPath)existingAlias.getCimObjectPath(),false);        success=_smisHelper.addZoneOrAliasMember(client,zoneServiceIns,fabricWwn,(CIMObjectPath)existingAlias.getCimObjectPath(),updateAlias.getNewAddress());        if (!success) {          return success;        }      }    }  } else {    throw NetworkDeviceControllerException.exceptions.aliasNotFound(updateAlias.getName());  }  return success;}  }
class C{  public boolean isCleanSession(){  return this.cleanSession;}  }
class C{  private boolean checkRecoverPointExportMask(UnManagedExportMask mask,List<Initiator> initiators,Set<URI> rpPortInitiators){  StringBuilder nonRecoverPointInitiators=new StringBuilder();  int rpPortInitiatorCount=0;  for (  Initiator init : initiators) {    if (rpPortInitiators.contains(init.getId())) {      s_logger.info("export mask {} contains RPA initiator {}",mask.getMaskName(),init.getInitiatorPort());      rpPortInitiatorCount++;    } else {      nonRecoverPointInitiators.append(init.getInitiatorPort()).append(" ");    }  }  if (rpPortInitiatorCount > 0) {    s_logger.info("export mask {} contains {} RPA initiators",mask.getMaskName(),rpPortInitiatorCount);    if (rpPortInitiatorCount < initiators.size()) {      s_logger.warn("   there are some ports in this mask that are not " + "RPA initiators: " + nonRecoverPointInitiators);    }    return true;  }  return false;}  }
class C{  public void exitApplication(){  codenameOneExited=true;  impl.exit();}  }
class C{  public String constantName(){  return constantName;}  }
class C{  @Override public void update(){  inner.update();}  }
class C{  private void selectLastChildOrFirstItem(SplitMenuButton button){  String lastChildView=preferencesService.getPreferences().getMainWindow().getLastChildViews().get(button.getId());  if (lastChildView == null) {    button.getItems().get(0).fire();    return;  }  button.getItems().stream().filter(null).forEach(null);}  }
class C{  private boolean verifyPaymentAllocateVsHeader(MPaymentAllocate[] pAllocs){  if (pAllocs.length > 0) {    if (getC_Charge_ID() > 0 || getC_Invoice_ID() > 0 || getC_Order_ID() > 0)     return false;  }  return true;}  }
class C{  public void loadEntriesAndMappings(Long releaseId){  if (jdbcTemplate != null) {    entryRowCallbackHandler.setInterProReleaseId(releaseId);    jdbcTemplate.query("select * from INTERPRO.ENTRY e where e.checked='Y'",entryRowCallbackHandler);    entryRowCallbackHandler.processFinalRows();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  protected void invalidate(boolean first){  super.invalidate(first);  getParent().invalidate(true);}  }
class C{  @Override public boolean validate(final UrlHelper.ParseResult parseResult){  try {    serverUrl=parseResult.getServerUrl();    final URI collectionUri=UrlHelper.createUri(parseResult.getCollectionUrl());    final GitHttpClient gitClient=getGitHttpClient(context.getClient(),collectionUri);    repository=gitClient.getRepository(parseResult.getProjectName(),parseResult.getRepoName());    final URI serverUri=UrlHelper.createUri(parseResult.getServerUrl());    if (UrlHelper.isTeamServicesUrl(parseResult.getServerUrl())) {      final CoreHttpClient coreClient=getCoreHttpClient(context.getClient(),serverUri);      collection=coreClient.getProjectCollection(parseResult.getCollectionName());    } else {      final ServerContext contextToValidate=new ServerContextBuilder(context).serverUri(serverUrl).build();      collection=getCollectionFromServer(contextToValidate,parseResult.getCollectionName());    }  } catch (  Throwable throwable) {    logger.error("validate: failed for parseResult " + parseResult.toString());    logger.warn("validate",throwable);    return false;  }  return true;}  }
class C{  protected void closeListener(){  if (listener != null && listener.isListening()) {    listener.stop();  }  isRunning=false;}  }
class C{  @Override public void onDeleted(ContactId contact,List<String> transferIds) throws RemoteException {  mListener.onDeleted(contact,new HashSet<>(transferIds));}  }
class C{  public void removeCancelListener(ActionListener a){  m_cancelBut.removeActionListener(a);}  }
class C{  protected SQLException unsupported(String message) throws SQLException {  try {    throw DbException.getUnsupportedException(message);  } catch (  Exception e) {    return logAndConvert(e);  }}  }
class C{  private static int readPid(final File pidFile) throws IOException {  BufferedReader fileReader=null;  String pidValue=null;  try {    fileReader=new BufferedReader(new FileReader(pidFile));    pidValue=fileReader.readLine();    final int pid=Integer.parseInt(pidValue);    if (pid < 1) {      throw new IllegalArgumentException("Invalid pid '" + pid + "' found in "+ pidFile);    }    return pid;  } catch (  NumberFormatException e) {    throw new IllegalArgumentException("Invalid pid '" + pidValue + "' found in "+ pidFile);  } finally {    IOUtils.close(fileReader);  }}  }
class C{  public static SecurityCategoryId create(String xRoadInstance,String securityCategory){  validateField("xRoadInstance",xRoadInstance);  validateField("securityCategory",securityCategory);  return new SecurityCategoryId(xRoadInstance,securityCategory);}  }
class C{  public void cleanOplet(String jobId,String elementId){  for (  BiConsumer<String,String> cleaner : cleaners)   cleaner.accept(jobId,elementId);}  }
class C{  public static SailRepository createRepository(final String file,final Option... args){  return createRepository(new Properties(),file,args);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public Packet nextResult(){  try {    return resultQueue.take();  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return mf == null ? null : mf.getParentFile();}  }
class C{  public CategoryDataset createDataset2(){  DefaultCategoryDataset result=new DefaultCategoryDataset();  String series1="Third";  String series2="Fourth";  String type1="Type 1";  String type2="Type 2";  String type3="Type 3";  String type4="Type 4";  String type5="Type 5";  String type6="Type 6";  String type7="Type 7";  String type8="Type 8";  result.addValue(11.0,series1,type1);  result.addValue(14.0,series1,type2);  result.addValue(13.0,series1,type3);  result.addValue(15.0,series1,type4);  result.addValue(15.0,series1,type5);  result.addValue(17.0,series1,type6);  result.addValue(17.0,series1,type7);  result.addValue(18.0,series1,type8);  result.addValue(15.0,series2,type1);  result.addValue(17.0,series2,type2);  result.addValue(16.0,series2,type3);  result.addValue(18.0,series2,type4);  result.addValue(14.0,series2,type5);  result.addValue(14.0,series2,type6);  result.addValue(12.0,series2,type7);  result.addValue(11.0,series2,type8);  return result;}  }
class C{  private boolean addTypeAndDescriptionFromDocstring(@NotNull PyNamedParameter parameter){  PyFunction function=PsiTreeUtil.getParentOfType(parameter,PyFunction.class);  if (function != null) {    final String docString=PyPsiUtils.strValue(function.getDocStringExpression());    Pair<String,String> typeAndDescr=getTypeAndDescr(docString,parameter);    String type=typeAndDescr.first;    String desc=typeAndDescr.second;    if (type != null) {      final PyType pyType=PyTypeParser.getTypeByName(parameter,type);      if (pyType instanceof PyClassType) {        myBody.addItem(": ").addWith(new LinkWrapper(PythonDocumentationProvider.LINK_TYPE_PARAM),$(pyType.getName()));      } else {        myBody.addItem(": ").addItem(type);      }    }    if (desc != null) {      myEpilog.addItem(BR).addItem(desc);    }    return type != null;  }  return false;}  }
class C{  public boolean isAllFrozen(SimulationTask task){  boolean allFrozen=!getCoords().isEmpty();  for (int i=0; i * 2 + 1 < getCoords().size(); i++) {    int row=getCoords().get(i * 2);    int col=getCoords().get(i * 2 + 1);    allFrozen&=task.getState().getBoard().isFrozenAt(row,col);  }  return allFrozen;}  }
class C{  public Object take() throws CacheException, InterruptedException {  Conflatable object=null;  Long next=null;  if ((next=this.getAndRemoveNextAvailableID()) != null) {    object=(Conflatable)this.region.get(next);    Assert.assertTrue(object != null);    object=this.getAndRemoveFromHAContainer(object);    Assert.assertTrue(object != null);    EventID eventid=object.getEventId();    long sequenceId=eventid.getSequenceID();    ThreadIdentifier threadid=getThreadIdentifier(eventid);    DispatchedAndCurrentEvents dace=(DispatchedAndCurrentEvents)this.eventsMap.get(threadid);    Assert.assertTrue(dace != null);    Object keyToConflate=null;    if (shouldBeConflated(object)) {      keyToConflate=object.getKeyToConflate();    }    dace.removeEventAndSetSequenceID(new RemovedEventInfo(next,object.getRegionToConflate(),keyToConflate),sequenceId);    this.stats.incEventsTaken();  }  if (object == null && logger.isDebugEnabled()) {    logger.debug("RegionQueue is EMPTY, returning null for take()");  }  return object;}  }
class C{  public static boolean isStatic(int mod){  return (mod & STATIC) != 0;}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (callback != null) {    callback.call(request,response);  }}  }
class C{  public static String toString(long bytes){  int unit=1024;  if (bytes < unit) {    return bytes + "B";  } else {    int exp=(int)(Math.log(bytes) / Math.log(unit));    String pre=String.valueOf("KMGTPE".charAt(exp - 1));    String result=String.format(Locale.ENGLISH,"%f",bytes / Math.pow(unit,exp));    int end=result.length();    for (; end > 0; end--) {      char c=result.charAt(end - 1);      if (c == '.') {        end--;        break;      } else       if (c != '0') {        break;      }    }    if (end == result.length()) {      return result + pre + "B";    } else {      return result.substring(0,end) + pre + "B";    }  }}  }
class C{  public OrganizationAuthorityException(String message){  super(message);}  }
class C{  private void logResults(){  if (m_counterPrg != null) {    StringBuffer total=new StringBuffer();    if (m_totalPrg != null) {      total.append("/").append(m_totalPrg.intValue());    }    s_logger.log(Level.CONFIG,"objectsPurged",new Object[]{m_counterPrg.toString(),total.toString(),m_objectTypes});  }  if (m_counterDrp != null) {    StringBuffer total=new StringBuffer();    if (m_totalDrp != null) {      total.append("/").append(m_totalDrp.intValue());    }    s_logger.log(Level.CONFIG,"objectsDropped",new Object[]{m_counterDrp.toString(),total.toString(),m_objectTypes});  }  if (m_counterUpd != null) {    StringBuffer total=new StringBuffer();    if (m_totalUpd != null) {      total.append("/").append(m_totalUpd.intValue());    }    s_logger.log(Level.CONFIG,"objectsUpdated",new Object[]{m_counterUpd.toString(),total.toString(),m_objectTypes});  }  if (m_counterAdd != null) {    StringBuffer total=new StringBuffer();    if (m_totalAdd != null) {      total.append("/").append(m_totalAdd.intValue());    }    s_logger.log(Level.CONFIG,"objectsCreated",new Object[]{m_counterAdd.toString(),total.toString(),m_objectTypes});  }  Level level=Level.FINE;  if (m_counterPrg == null && m_counterDrp == null && m_counterUpd == null && m_counterAdd == null)   level=Level.CONFIG;  if (m_detailCounterDrp != null) {    int counter=m_detailCounterDrp.intValue();    String detailType=m_detailTypes;    if (counter == 1)     detailType=m_detailType;    s_logger.log(level,"detailsDeleted",new Object[]{m_detailCounterDrp.toString(),detailType});  }  if (m_detailCounterUpd != null) {    int counter=m_detailCounterUpd.intValue();    String detailType=m_detailTypes;    if (counter == 1)     detailType=m_detailType;    s_logger.log(level,"detailsUpdated",new Object[]{m_detailCounterUpd.toString(),detailType});  }  if (m_detailCounterAdd != null) {    int counter=m_detailCounterAdd.intValue();    String detailType=m_detailTypes;    if (counter == 1)     detailType=m_detailType;    s_logger.log(level,"detailsInserted",new Object[]{m_detailCounterAdd.toString(),detailType});  }  m_target.commitChanges();  s_logger.flush();}  }
class C{  public String verify(String sig,ByteBuffer data){  exception=null;  for (  Map.Entry<String,PublicKey> entry : keys.entrySet()) {    boolean verified;    try {      verified=CryptoKeys.verify(entry.getValue(),Base64.base64ToByteArray(sig),data);      log.info("verified {} ",verified);      if (verified)       return entry.getKey();    } catch (    Exception e) {      exception=e;      log.info("NOT verified  ");    }  }  return null;}  }
class C{  public Date addToDate(Date base){  return addToDate(base,TimeZone.getDefault());}  }
class C{  public boolean stopCellEditing(){  fireEditingStopped();  return true;}  }
class C{  public boolean adjustValue(K key,double amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.101 -0400",hash_original_method="C7FCBD344022D72FF18766A4DFEA8EE1",hash_generated_method="7035C7CC0EC06D72F1A3D6EF6B3FE4EA") @Override public void close() throws IOException {  super.close();  closed=true;}  }
class C{  protected AbstractDoubleSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.LOOK_AHEAD__NOT:    return not != NOT_EDEFAULT;case RegularExpressionPackage.LOOK_AHEAD__PATTERN:  return pattern != null;}return super.eIsSet(featureID);}  }
class C{  public X509TrustManagerExtensions(X509TrustManager tm) throws IllegalArgumentException {  if (tm instanceof TrustManagerImpl) {    mDelegate=(TrustManagerImpl)tm;  } else {    throw new IllegalArgumentException("tm is not a supported type of X509TrustManager");  }}  }
class C{  public void createWorkersInCategory(WorkerCategory category){  String clientToken=UUID.randomUUID().toString().replaceAll("-","");  if (workOffline) {    LOG.info("Work offline enabled, not creating workers for {}",category);    return;  }  if (workerCatalog.observationsByWorkerId.size() >= maxWorkers) {    LOG.warn("{} workers already started, not starting more; jobs will not complete on {}",maxWorkers,category);    return;  }  if (recentlyRequestedWorkers.containsKey(category) && recentlyRequestedWorkers.get(category) >= System.currentTimeMillis() - WORKER_STARTUP_TIME) {    LOG.info("Workers still starting on {}, not starting more",category);    return;  }  int nWorkers=1;  LOG.info("Starting {} workers as there are none on {}",nWorkers,category);  RunInstancesRequest req=new RunInstancesRequest();  req.setImageId(brokerConfig.getProperty("ami-id"));  req.setInstanceType(InstanceType.valueOf(brokerConfig.getProperty("worker-type")));  req.setSubnetId(brokerConfig.getProperty("subnet-id"));  req.setMinCount(1);  req.setMaxCount(nWorkers);  workerConfig.setProperty("initial-graph-id",category.graphId);  workerConfig.setProperty("worker-version",category.workerVersion);  String workerDownloadUrl=String.format("https://r5-builds.s3.amazonaws.com/%s.jar",category.workerVersion);  workerConfig.setProperty("download-url",workerDownloadUrl);  workerConfig.setProperty("main-class",AnalystWorker.class.getName());  ByteArrayOutputStream cfg=new ByteArrayOutputStream();  try {    workerConfig.store(cfg,"Worker config");    cfg.close();  } catch (  Exception e) {    throw new RuntimeException(e);  }  String userData=new String(Base64.getEncoder().encode(cfg.toByteArray()));  req.setUserData(userData);  if (brokerConfig.getProperty("worker-iam-role") != null)   req.setIamInstanceProfile(new IamInstanceProfileSpecification().withArn(brokerConfig.getProperty("worker-iam-role")));  if (brokerConfig.getProperty("subnet") != null)   req.setSubnetId(brokerConfig.getProperty("subnet"));  req.setClientToken(clientToken);  req.setInstanceInitiatedShutdownBehavior(ShutdownBehavior.Terminate);  RunInstancesResult res=ec2.runInstances(req);  res.getReservation().getInstances().forEach(null);  recentlyRequestedWorkers.put(category,System.currentTimeMillis());  LOG.info("Requesting {} workers",nWorkers);}  }
class C{  private long grantAndRespondToRequest(DLockRequestMessage request){synchronized (request) {    if (request.respondedNoSync()) {      return -1;    }    Assert.assertTrue(request.getRemoteThread() != null);    if (!this.grantor.dm.isCurrentMember(request.getSender())) {      this.grantor.cleanupSuspendState(request);      return -1;    }    if (isSuspendLockingToken()) {synchronized (this.grantor.suspendLock) {        Assert.assertTrue(this.grantor.lockingSuspendedBy == null || this.grantor.isLockingSuspendedBy(request.getRemoteThread()),"Locking is suspended by " + this.grantor.lockingSuspendedBy + " with lockId of "+ this.grantor.suspendedLockId+ " instead of "+ request.getRemoteThread()+ " with lockId of "+ request.getLockId());      }    }    long newLeaseExpireTime=calcLeaseExpireTime(request.getLeaseTime());    grantLock(request.getSender(),newLeaseExpireTime,request.getLockId(),request.getRemoteThread());    if (isSuspendLockingToken()) {synchronized (this.grantor.suspendLock) {        this.grantor.suspendLocking(request.getRemoteThread(),request.getLockId());        Assert.assertTrue(this.grantor.isLockingSuspendedBy(request.getRemoteThread()),"Locking should now be suspended by " + request.getRemoteThread() + " with lockId of "+ request.getLockId()+ " instead of "+ this.grantor.lockingSuspendedBy+ " with lockId of "+ this.grantor.suspendedLockId);      }    }    request.respondWithGrant(newLeaseExpireTime);    if (!isLeaseHeldBy(request.getSender(),request.getLockId())) {      return -1;    }    return newLeaseExpireTime;  }}  }
class C{  public <T extends Solution>boolean removeAll(T[] solutions){  return removeAll(Arrays.asList(solutions));}  }
class C{  public boolean isPreferred(){  return preferred;}  }
class C{  public BytesWritable createValue(){  return (BytesWritable)ReflectionUtils.newInstance(BytesWritable.class,conf);}  }
class C{  public static void shuffle(List<?> list,java.util.Random random){  @SuppressWarnings("unchecked") final List<Object> objectList=(List<Object>)list;  if (list instanceof RandomAccess) {    for (int i=objectList.size() - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      objectList.set(index,objectList.set(i,objectList.get(index)));    }  } else {    Object[] array=objectList.toArray();    for (int i=array.length - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      Object temp=array[i];      array[i]=array[index];      array[index]=temp;    }    int i=0;    ListIterator<Object> it=objectList.listIterator();    while (it.hasNext()) {      it.next();      it.set(array[i++]);    }  }}  }
class C{  public @Test final void testSetGrants(){  Role role=new Role(TEST_ROLE);  SecurityObject grant=new Grant(TEST_ROLE);  assertThat(role.getGrants()).hasSize(0);  role.setGrants(new HashSet<>(Collections.singletonList(grant)));  assertThat(role.getGrants()).hasSize(1);}  }
class C{  private List<String> divideOriginalTextToStringLineList(String originalText){  List<String> listStringLine=new ArrayList<String>();  String line="";  float textWidth;  String[] listParageraphes=originalText.split("\n");  for (int j=0; j < listParageraphes.length; j++) {    String[] arrayWords=listParageraphes[j].split(" ");    for (int i=0; i < arrayWords.length; i++) {      line+=arrayWords[i] + " ";      textWidth=getTextPaint().measureText(line);      if (getTextAreaWidth() == textWidth) {        listStringLine.add(line);        line="";        continue;      } else       if (getTextAreaWidth() < textWidth) {        int lastWordCount=arrayWords[i].length();        line=line.substring(0,line.length() - lastWordCount - 1);        if (line.trim().length() == 0)         continue;        line=justifyTextLine(textPaint,line.trim(),getTextAreaWidth());        listStringLine.add(line);        line="";        i--;        continue;      }      if (i == arrayWords.length - 1) {        listStringLine.add(line);        line="";      }    }  }  return listStringLine;}  }
class C{  public ReportFieldsArray(String[] afields){  m_keys=new HashMap();  for (int i=0; i < afields.length; i++) {    m_keys.put(afields[i],new Integer(i));  }}  }
class C{  public Boolean isDirectProvisionedSwitch(){  return directProvisionedSwitch;}  }
class C{  public AcceptParser(String accept){  super(accept);}  }
class C{  public T caseThisTypeRefNominal(ThisTypeRefNominal object){  return null;}  }
class C{  public String invokeLambdaFunction(InvokeConfig invokeConfig) throws LambdaInvokeException {  InvokeRequest invokeRequest=new InvokeRequest().withFunctionName(invokeConfig.getFunctionName()).withPayload(invokeConfig.getPayload());  if (invokeConfig.isSynchronous()) {    invokeRequest.withInvocationType(InvocationType.RequestResponse).withLogType(LogType.Tail);  } else {    invokeRequest.withInvocationType(InvocationType.Event);  }  logger.log("Lambda invoke request:%n%s%nPayload:%n%s%n",invokeRequest.toString(),invokeConfig.getPayload());  InvokeResult invokeResult=client.invoke(invokeRequest);  String payload="";  if (invokeResult.getPayload() != null) {    payload=new String(invokeResult.getPayload().array(),Charset.forName("UTF-8"));  }  logger.log("Lambda invoke response:%n%s%nPayload:%n%s%n",invokeResult.toString(),payload);  if (invokeResult.getLogResult() != null) {    logger.log("Log:%n%s%n",new String(Base64.decode(invokeResult.getLogResult()),Charset.forName("UTF-8")));  }  if (StringUtils.isNotEmpty(invokeResult.getFunctionError())) {    throw new LambdaInvokeException("Function returned error of type: " + invokeResult.getFunctionError());  }  return payload;}  }
class C{  public byte[] readByteArray(){  FileInputStream fis=null;  try {    fis=new FileInputStream(file);  } catch (  FileNotFoundException ex) {    throw new IllegalArgumentException(ex.toString());  }  BufferedInputStream bis=new BufferedInputStream(fis);  BinaryInputStream bs=new BinaryInputStream(bis,bigEndian);  return bs.readByteArray();}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case USE:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  protected void processPath(VertexInfo[] vertices){  int v=network.sinkIndex;  int delta=Integer.MAX_VALUE;  while (v != network.sourceIndex) {    int u=vertices[v].previous;    int flow;    if (vertices[v].forward) {      flow=network.edge(u,v).capacity - network.edge(u,v).flow;    } else {      flow=network.edge(v,u).flow;    }    if (flow < delta) {      delta=flow;    }    v=u;  }  v=network.sinkIndex;  while (v != network.sourceIndex) {    int u=vertices[v].previous;    if (vertices[v].forward) {      network.edge(u,v).flow+=delta;    } else {      network.edge(v,u).flow-=delta;    }    v=u;  }  Arrays.fill(network.vertices,null);}  }
class C{  public static Exception unwrap(Throwable t){  assert t != null;  while (true) {    if (t instanceof Error)     throw (Error)t;    if (t instanceof GridClosureException) {      t=((GridClosureException)t).unwrap();      continue;    }    return (Exception)t;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void main(String[] args){  String outputFolder="f:/data/experiments/parkingSearchOct2013/runs/run135/output/";  int referenceIteration=410;  int startIteration=400;  int endIteration=referenceIteration - 1;  int iterationStep=1;  boolean ignoreCasesWithBothPPUse=true;  Matrix eventsReferenceMatrix=GeneralLib.readStringMatrix(getEventsFileName(outputFolder,referenceIteration));  Matrix eventsMatrixCurrentIter=GeneralLib.readStringMatrix(getEventsFileName(outputFolder,startIteration));  System.out.println("iteration\tpctDiffConsequete-FacilityId\tpctDiffReference-FacilityId\tpctDiffConsequete-parkingStrategy\tpctDiffReference-parkingStrategy\tpctDiffConsequete-groupName\tpctDiffReference-groupName");  for (int i=startIteration; i <= endIteration; i+=iterationStep) {    Matrix eventsMatrixNextIter=GeneralLib.readStringMatrix(getEventsFileName(outputFolder,i + 1));    System.out.print(i + "\t" + percentageOfDifferentParkingUsages(eventsMatrixCurrentIter,eventsMatrixNextIter,"FacilityId",ignoreCasesWithBothPPUse)+ "\t"+ percentageOfDifferentParkingUsages(eventsReferenceMatrix,eventsMatrixCurrentIter,"FacilityId",ignoreCasesWithBothPPUse));    System.out.print("\t" + percentageOfDifferentParkingUsages(eventsMatrixCurrentIter,eventsMatrixNextIter,"parkingStrategy",ignoreCasesWithBothPPUse) + "\t"+ percentageOfDifferentParkingUsages(eventsReferenceMatrix,eventsMatrixCurrentIter,"parkingStrategy",ignoreCasesWithBothPPUse));    System.out.print("\t" + percentageOfDifferentParkingUsages(eventsMatrixCurrentIter,eventsMatrixNextIter,"groupName",ignoreCasesWithBothPPUse) + "\t"+ percentageOfDifferentParkingUsages(eventsReferenceMatrix,eventsMatrixCurrentIter,"groupName",ignoreCasesWithBothPPUse));    System.out.println();    eventsMatrixCurrentIter=eventsMatrixNextIter;  }}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus modifyInstance(String instanceId,ProvisioningSettings currentSettings,ProvisioningSettings newSettings) throws APPlatformException {  LOGGER.info("modifyInstance({})",LogAndExceptionConverter.getLogText(instanceId,currentSettings));  try {    PropertyHandler ph=PropertyHandler.withSettings(newSettings);    ph.setOperation(Operation.EC2_MODIFICATION);    ph.setState(FlowState.MODIFICATION_REQUESTED);    InstanceStatus result=new InstanceStatus();    result.setChangedParameters(newSettings.getParameters());    return result;  } catch (  Throwable t) {    throw LogAndExceptionConverter.createAndLogPlatformException(t,Context.MODIFICATION);  }}  }
class C{  public synchronized Object clone() throws CloneNotSupportedException {  VariableStack vs=(VariableStack)super.clone();  vs._stackFrames=(XObject[])_stackFrames.clone();  vs._links=(int[])_links.clone();  return vs;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isEmpty(){synchronized (this) {    return m_committed && m_records == 0;  }}  }
class C{  public JRun4xConfigurationBuilder(){  try {    DocumentBuilderFactory domFactory=DocumentBuilderFactory.newInstance();    builder=domFactory.newDocumentBuilder();  } catch (  Exception e) {    throw new CargoException("Cannot initialize XML DOM document builder",e);  }}  }
class C{  @Override public Response<T> response() throws CodenvyException {  try {    Token token=authenticationManager.getToken();    if (token == null) {      token=authenticationManager.authorize();    }    request.property(TOKEN_PROPERTY_NAME,token);    javax.ws.rs.core.Response response=request.invoke();    if (Status.FORBIDDEN == Status.fromStatusCode(response.getStatus())) {      token=authenticationManager.refreshToken();      request.property(TOKEN_PROPERTY_NAME,token);      response=request.invoke();    }    if (wrapAsJSonObject) {      if (Status.Family.SUCCESSFUL == response.getStatusInfo().getFamily()) {        String jsonData=null;        JsonObject jsonObject=response.readEntity(JsonObject.class);        if (jsonObject != null) {          StringWriter stWriter=new StringWriter();          JsonWriter jsonWriter=Json.createWriter(stWriter);          jsonWriter.writeObject(jsonObject);          jsonWriter.close();          jsonData=stWriter.toString();        }        return new DefaultResponse(response,jsonData);      }      throw CodenvyErrorExceptionHelper.from(response);    }    if (genericEntityType != null) {      return new DefaultResponse(response,readEntity(response,genericEntityType));    }    return new DefaultResponse(response,entityType.equals(javax.ws.rs.core.Response.class) ? entityType.cast(response) : readEntity(response,entityType));  } catch (  ProcessingException e) {    if (e.getCause() instanceof UnknownHostException) {      throw CodenvyUnknownHostException.from((UnknownHostException)e.getCause());    }    throw CodenvyException.from(e);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.STRING_EVALUATOR__TOTO:    setToto((String)newValue);  return;case GamlPackage.STRING_EVALUATOR__EXPR:setExpr((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void checkCreates(int nrof){  for (int i=0; i < nrof; i++) {    assertTrue(mc.next());    assertEquals(mc.TYPE_CREATE,mc.getLastType());  }  assertFalse("MC contained " + mc.getLastType(),mc.next());}  }
class C{  public Separator(Dimension size){  super(JSeparator.HORIZONTAL);  setSeparatorSize(size);}  }
class C{  State newState(int label){  assert Arrays.binarySearch(labels,label) < 0 : "State already has transition labeled: " + label;  labels=Arrays.copyOf(labels,labels.length + 1);  states=Arrays.copyOf(states,states.length + 1);  labels[labels.length - 1]=label;  return states[states.length - 1]=new State();}  }
class C{  public int match(Name b){  if (this == b)   return 0;  int d;  if ((d=this.attr() - b.attr()) != 0)   return d;  if ((d=this.name.compareTo(b.name)) != 0)   return d;  if (this.isQname() && b.isQname())   return this.nsset(0).compareTo(b.nsset(0)); else   if (this.isQname() && !b.isQname()) {    for (    Namespace ns : b.nsset)     if (ns.equals(this.nsset(0)))     return 0;  } else   if (b.isQname() && !this.isQname()) {    for (    Namespace ns : this.nsset)     if (ns.equals(b.nsset(0)))     return 0;  }  return this.nsset.compareTo(b.nsset);}  }
class C{  protected void populateFacesELResolverForJsp(FacesContext context){  ApplicationAssociate appAssociate=ApplicationAssociate.getInstance(context.getExternalContext());  populateFacesELResolverForJsp(context.getApplication(),appAssociate);}  }
class C{  private Date dateChanged(BaseOpenmrsMetadata d){  Date dateChanged=d.getDateChanged();  if (dateChanged != null)   return dateChanged;  return d.getDateCreated();}  }
class C{  public DragController(Context context){  mContext=context;}  }
class C{  public String name(){  return this.name;}  }
class C{  private void initialize(){  this.setName(Constant.messages.getString("pscan.options.name"));  this.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.LINE_START;  gbc.fill=GridBagConstraints.BOTH;  this.add(new JLabel(Constant.messages.getString("pscan.options.header")),gbc);  scannersOptionsPanel=new ScannersMultipleOptionsPanel(getTableModel());  gbc.weighty=1.0;  this.add(scannersOptionsPanel,gbc);}  }
class C{  private void increment(HashMap<String,TreeMap<String,Integer>> table,String suffix,String tag){  TreeMap<String,Integer> counts=table.get(suffix);  if (counts == null) {    counts=new TreeMap<>();    table.put(suffix,counts);  }  Integer count=counts.get(tag);  if (count == null)   count=0;  counts.put(tag,count + 1);}  }
class C{  protected void reset(){  eventsFromAdapters.clear();  emptyAdapters.clear();}  }
class C{  public static Object decodeToObject(String encodedObject){  byte[] objBytes=decode(encodedObject);  java.io.ByteArrayInputStream bais=null;  java.io.ObjectInputStream ois=null;  Object obj=null;  try {    bais=new java.io.ByteArrayInputStream(objBytes);    ois=new java.io.ObjectInputStream(bais);    obj=ois.readObject();  } catch (  java.io.IOException e) {    logger.error(e,e);    obj=null;  }catch (  java.lang.ClassNotFoundException e) {    logger.error(e,e);    obj=null;  } finally {    try {      bais.close();    } catch (    Exception e) {    }    try {      ois.close();    } catch (    Exception e) {    }  }  return obj;}  }
class C{  public void bytes(BytesReference innerBytes){  this.innerBytes=innerBytes;}  }
class C{  public void close(Client client){  try {    client.client.close();  } catch (  IOException e) {  }}  }
class C{  public void log(@GuardSatisfied Level level,String msg,@GuardSatisfied Throwable thrown){  throw new RuntimeException();}  }
class C{  public static Object callMethod(Object object,String methodName,Object[] parameters) throws NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  MethodParameterPair pair=getMethodParameterPairIgnoreCase(object.getClass(),methodName,parameters);  return pair.getMethod().invoke(object,pair.getParameters());}  }
class C{  public static void checkInstancesStarted(VerificationHost host,AmazonEC2AsyncClient client,List<String> instanceIds,List<Boolean> provisioningFlags) throws Throwable {  AWSEnumerationAsyncHandler enumerationHandler=new AWSEnumerationAsyncHandler(host,AWSEnumerationAsyncHandler.MODE.CHECK_START,provisioningFlags,null,null,null,null);  DescribeInstancesRequest request=new DescribeInstancesRequest().withInstanceIds(instanceIds);  client.describeInstancesAsync(request,enumerationHandler);  host.waitFor("Waiting to get response from AWS ",null);}  }
class C{  @Override public Iterator<ShoppingCartItem> iterator(){  return cartLines.iterator();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CategoryTextAnnotation)) {    return false;  }  CategoryTextAnnotation that=(CategoryTextAnnotation)obj;  if (!super.equals(obj)) {    return false;  }  if (!this.category.equals(that.getCategory())) {    return false;  }  if (!this.categoryAnchor.equals(that.getCategoryAnchor())) {    return false;  }  if (this.value != that.getValue()) {    return false;  }  return true;}  }
class C{  public static int digitLength(int i){  if (i >= 0)   return (i >= 100000) ? (i >= 10000000) ? (i >= 1000000000) ? 10 : (i >= 100000000) ? 9 : 8 : (i >= 1000000) ? 7 : 6 : (i >= 100) ? (i >= 10000) ? 5 : (i >= 1000) ? 4 : 3 : (i >= 10) ? 2 : 1;  if (i == Integer.MIN_VALUE)   return 10;  return digitLength(-i);}  }
class C{  @Nullable public View pop(){  if (!shouldPop())   return null;  stack.pop();  setBelowViewVisibility(View.VISIBLE);  View popped=peek();  container.removeView(popped);  callOnViewRemoved();  return popped;}  }
class C{  public synchronized boolean isEmpty(){  return (tail == null);}  }
class C{  public Agent(String value){  this();  setValue(value);}  }
class C{  public void polar(double magnitude,double direction,double rotation){  magnitude=speedLimiter.applyAsDouble(magnitude) * SQRT_OF_TWO;  double dirInRad=(direction + 45.0) * Math.PI / 180.0;  double cosD=Math.cos(dirInRad);  double sinD=Math.sin(dirInRad);  double wheelSpeeds[]=new double[NUMBER_OF_MOTORS];  wheelSpeeds[LEFT_FRONT]=(sinD * magnitude + rotation);  wheelSpeeds[RIGHT_FRONT]=(cosD * magnitude - rotation);  wheelSpeeds[LEFT_REAR]=(cosD * magnitude + rotation);  wheelSpeeds[RIGHT_REAR]=(sinD * magnitude - rotation);  normalize(wheelSpeeds);  scale(wheelSpeeds,OUTPUT_SCALE_FACTOR);  leftFront.setSpeed(wheelSpeeds[LEFT_FRONT]);  leftRear.setSpeed(wheelSpeeds[LEFT_REAR]);  rightFront.setSpeed(wheelSpeeds[RIGHT_FRONT]);  rightRear.setSpeed(wheelSpeeds[RIGHT_REAR]);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 14:{        addToken(Token.PREPROCESSOR);      }case 24:    break;case 6:{    addNullToken();    return firstToken;  }case 25:break;case 18:{addToken(Token.LITERAL_CHAR);}case 26:break;case 9:{addToken(Token.WHITESPACE);}case 27:break;case 16:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 28:break;case 17:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 29:break;case 19:{addToken(Token.RESERVED_WORD);}case 30:break;case 8:{addToken(Token.SEPARATOR);}case 31:break;case 1:{addToken(Token.IDENTIFIER);}case 32:break;case 13:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 33:break;case 20:{addToken(Token.FUNCTION);}case 34:break;case 21:{addToken(Token.DATA_TYPE);}case 35:break;case 2:{addToken(Token.ERROR_IDENTIFIER);}case 36:break;case 22:{addToken(Token.LITERAL_BOOLEAN);}case 37:break;case 11:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 38:break;case 23:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 39:break;case 15:{addToken(Token.ERROR_NUMBER_FORMAT);}case 40:break;case 7:{start=zzMarkedPos - 1;yybegin(STRING);}case 41:break;case 3:{start=zzMarkedPos - 1;yybegin(EOL_COMMENT);}case 42:break;case 5:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 43:break;case 4:{addToken(Token.OPERATOR);}case 44:break;case 12:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 45:break;case 10:{}case 46:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 467:break;case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 468:break;case YYINITIAL:{addNullToken();return firstToken;}case 469:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private boolean unitDeployed(String md5){  assert Thread.holdsLock(mux);  if (md5 != null) {    for (    GridUriDeploymentUnitDescriptor d : unitLoaders)     if (md5.equals(d.getMd5()))     return true;  }  return false;}  }
class C{  public static short parseShort(CharSequence csq,Cursor cursor){  return parseShort(csq,10,cursor);}  }
class C{  public Quaterniond rotationTo(Vector3dc fromDir,Vector3dc toDir){  return rotationTo(fromDir.x(),fromDir.y(),fromDir.z(),toDir.x(),toDir.y(),toDir.z());}  }
class C{  public void addPutfield(String classname,String name,String desc){  addPutfield0(null,classname,name,desc);}  }
class C{  @Override public int put(long key){  long primaryHashValue=primaryHashFunction(key);  int bucket=(int)(primaryHashValue & bitMask);  long currentKey=array.get(bucket);  if (currentKey == defaultGetReturnValue) {    if (isAtCapacity()) {      throw new RuntimeException("Exceeded the maximum number of insertions");    }    array.set(bucket,key);    size.getAndIncrement();    numStoredKeysCounter.incr();    return bucket;  } else   if (currentKey == key) {    return bucket;  }  int secondaryHashKey=secondaryHashFunction(key,bitMask);  do {    bucket=(int)(((long)bucket + secondaryHashKey) & bitMask);    currentKey=array.get(bucket);  } while ((currentKey != defaultGetReturnValue) && (currentKey != key));  if (currentKey == defaultGetReturnValue) {    if (isAtCapacity()) {      throw new RuntimeException("Exceeded the maximum number of insertions");    }    array.set(bucket,key);    size.getAndIncrement();    numStoredKeysCounter.incr();    return bucket;  } else {    return bucket;  }}  }
class C{  public void dumpPTA(String fileName){  try {    dumpPTA(new PrintStream(fileName));  } catch (  FileNotFoundException e) {  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public ParallelLeafReader(boolean closeSubReaders,LeafReader[] readers,LeafReader[] storedFieldsReaders) throws IOException {  this.closeSubReaders=closeSubReaders;  if (readers.length == 0 && storedFieldsReaders.length > 0)   throw new IllegalArgumentException("There must be at least one main reader if storedFieldsReaders are used.");  this.parallelReaders=readers.clone();  this.storedFieldsReaders=storedFieldsReaders.clone();  if (parallelReaders.length > 0) {    final LeafReader first=parallelReaders[0];    this.maxDoc=first.maxDoc();    this.numDocs=first.numDocs();    this.hasDeletions=first.hasDeletions();  } else {    this.maxDoc=this.numDocs=0;    this.hasDeletions=false;  }  Collections.addAll(completeReaderSet,this.parallelReaders);  Collections.addAll(completeReaderSet,this.storedFieldsReaders);  for (  LeafReader reader : completeReaderSet) {    if (reader.maxDoc() != maxDoc) {      throw new IllegalArgumentException("All readers must have same maxDoc: " + maxDoc + "!="+ reader.maxDoc());    }  }  FieldInfos.Builder builder=new FieldInfos.Builder();  Sort indexSort=null;  for (  final LeafReader reader : this.parallelReaders) {    Sort leafIndexSort=reader.getIndexSort();    if (indexSort == null) {      indexSort=leafIndexSort;    } else     if (leafIndexSort != null && indexSort.equals(leafIndexSort) == false) {      throw new IllegalArgumentException("cannot combine LeafReaders that have different index sorts: saw both sort=" + indexSort + " and "+ leafIndexSort);    }    final FieldInfos readerFieldInfos=reader.getFieldInfos();    for (    FieldInfo fieldInfo : readerFieldInfos) {      if (!fieldToReader.containsKey(fieldInfo.name)) {        builder.add(fieldInfo);        fieldToReader.put(fieldInfo.name,reader);        if (fieldInfo.hasVectors()) {          tvFieldToReader.put(fieldInfo.name,reader);        }      }    }  }  fieldInfos=builder.finish();  this.indexSort=indexSort;  for (  final LeafReader reader : this.parallelReaders) {    final Fields readerFields=reader.fields();    for (    String field : readerFields) {      if (fieldToReader.get(field) == reader) {        this.fields.addField(field,readerFields.terms(field));      }    }  }  for (  LeafReader reader : completeReaderSet) {    if (!closeSubReaders) {      reader.incRef();    }    reader.registerParentReader(this);  }}  }
class C{  protected void checkForMultipleDifferences() throws Exception {  Object[] firstKey=m_Keys.get(0);  Object[] lastKey=m_Keys.get(m_Keys.size() - 1);  for (int i=0; i < firstKey.length; i++) {    if ((i != m_KeyIndex) && !firstKey[i].equals(lastKey[i])) {      throw new Exception("Keys differ on fields other than \"" + m_KeyFieldName + "\" -- time to implement multiple averaging");    }  }}  }
class C{  private Object checkValue(Object value) throws ExpressionException {  if (dimension > 1) {    if (value instanceof Array) {      if (((Array)value).getDimension() != dimension - 1)       throw new ExpressionException("You can only Append an Array with " + (dimension - 1) + " Dimension","array has wrong dimension, now is " + (((Array)value).getDimension()) + " but it must be "+ (dimension - 1));    } else     throw new ExpressionException("You can only Append an Array with " + (dimension - 1) + " Dimension","now is a object of type " + Caster.toClassName(value));  }  return value;}  }
class C{  public PubsubFuture<Void> deleteTopic(final String project,final String topic){  return deleteTopic(canonicalTopic(project,topic));}  }
class C{  public static final void printArray(Object[] array){  if (array == null) {    System.out.println("null array");    return;  }  if (array.length == 0) {    System.out.println("zero-length array");    return;  }  System.out.println("0-" + array[0].toString() + "-0");  for (int i=1; i < array.length; i++) {    System.out.println("*-" + array[i].toString() + "-*");  }}  }
class C{  public static <T>T newInstance(Class<T> clazz){  return newInstance(clazz,true);}  }
class C{  public boolean isCreateSOCommitment(){  String s=getCommitmentType();  if (s == null)   return false;  return COMMITMENTTYPE_SOCommitmentOnly.equals(s) || COMMITMENTTYPE_POSOCommitmentReservation.equals(s) || COMMITMENTTYPE_POSOCommitment.equals(s);}  }
class C{  public static MissingQueryBuilder missingQuery(String name){  return new MissingQueryBuilder(name);}  }
class C{  public boolean isColumnTranslated(int index){  if (index < 0 || index >= m_columns.length)   return false;  return m_columns[index].IsTranslated;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.533 -0500",hash_original_method="2AFBD8CC3EA20986AC27924C0AD5D7EE",hash_generated_method="ABB08D2AC960F1D8DE8C995F725AAEFC") @Override public int read() throws IOException {  while (in != null) {    int result=in.read();    if (result >= 0) {      return result;    }    nextStream();  }  return -1;}  }
class C{  public final boolean hasTypeArguments(){  return (this.flags & HAS_TYPE_ARGUMENTS) != 0;}  }
class C{  @Override public void removeIndexes(final IScope scope,final IContainer<?,?> index){  for (  final Object key : index.iterable(scope)) {    remove(key);  }}  }
class C{  private static StringBuilder dump(StringBuilder _lbuffer,long value){  for (int j=0; j < 8; j++) {    _lbuffer.append(CHARS[(int)(value >> SHIFTS[j]) & 15]);  }  return _lbuffer;}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((HeaderViewListAdapter)mAdapter).removeHeader(v)) {      if (mObserver != null) {        mObserver.onChanged();      }      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public static <K,V>MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K,? extends V> map){  Assert.notNull(map,"'map' must not be null");  Map<K,List<V>> result=new LinkedHashMap<K,List<V>>(map.size());  for (  Map.Entry<? extends K,? extends List<? extends V>> entry : map.entrySet()) {    List<V> values=Collections.unmodifiableList(entry.getValue());    result.put(entry.getKey(),values);  }  Map<K,List<V>> unmodifiableMap=Collections.unmodifiableMap(result);  return toMultiValueMap(unmodifiableMap);}  }
class C{  @Bean public OAuth2RestOperations restTemplate(OAuth2ClientContext oauth2ClientContext){  return new OAuth2RestTemplate(resource(),oauth2ClientContext);}  }
class C{  public static Frustum fromProjectionMatrix(Matrix projectionMatrix){  Matrix m=projectionMatrix;  if (m == null) {    String message=Logging.getMessage("nullValue.MatrixIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double x=m.m41 + m.m11;  double y=m.m42 + m.m12;  double z=m.m43 + m.m13;  double w=m.m44 + m.m14;  double d=Math.sqrt(x * x + y * y + z * z);  Plane left=new Plane(x / d,y / d,z / d,w / d);  x=m.m41 - m.m11;  y=m.m42 - m.m12;  z=m.m43 - m.m13;  w=m.m44 - m.m14;  d=Math.sqrt(x * x + y * y + z * z);  Plane right=new Plane(x / d,y / d,z / d,w / d);  x=m.m41 + m.m21;  y=m.m42 + m.m22;  z=m.m43 + m.m23;  w=m.m44 + m.m23;  d=Math.sqrt(x * x + y * y + z * z);  Plane bottom=new Plane(x / d,y / d,z / d,w / d);  x=m.m41 - m.m21;  y=m.m42 - m.m22;  z=m.m43 - m.m23;  w=m.m44 - m.m23;  d=Math.sqrt(x * x + y * y + z * z);  Plane top=new Plane(x / d,y / d,z / d,w / d);  x=m.m41 + m.m31;  y=m.m42 + m.m32;  z=m.m43 + m.m33;  w=m.m44 + m.m34;  d=Math.sqrt(x * x + y * y + z * z);  Plane near=new Plane(x / d,y / d,z / d,w / d);  x=m.m41 - m.m31;  y=m.m42 - m.m32;  z=m.m43 - m.m33;  w=m.m44 - m.m34;  d=Math.sqrt(x * x + y * y + z * z);  Plane far=new Plane(x / d,y / d,z / d,w / d).normalize();  return new Frustum(left,right,bottom,top,near,far);}  }
class C{  public boolean hasBeenExpanded(TreePath path){  return (path != null && expandedState.get(path) != null);}  }
class C{  public boolean hasMoreElements(){  return this.getTurnTotalEnum().hasMoreElements();}  }
class C{  public ExternalProject(File file,Iterable<String> natureIds,Iterable<String> builderIds){  super(new Path(file.getAbsolutePath()),null);  checkState(file.isDirectory(),"Resource '" + file + "' is not a directory but a file.");  this.file=file;  this.natureIds=newHashSet(natureIds);  this.builderIds=newHashSet(builderIds);}  }
class C{  public boolean isEncodeBlanks(){  return this.encodeBlanks;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  protected BootstrapModuleImpl(){  super();}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (!(obj instanceof Mutable<?>))   return false;  final Mutable<?> other=(Mutable<?>)obj;  T v=get();  Object otherV=other.get();  if (v == null) {    if (otherV != null)     return false;  } else   if (!v.equals(otherV))   return false;  return true;}  }
class C{  public static void scriptAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name).trim();    if (attributeValue.length() > 0) {      if (attributeValue.startsWith("${") && attributeValue.endsWith("}")) {        handleError("Script attribute \"" + name + "\" enclosed in \"${}\" (remove enclosing ${}).",method,element);      }      boolean scriptFound=false;      for (      String scriptName : ScriptUtil.SCRIPT_NAMES) {        String scriptPrefix=scriptName.concat(":");        if (attributeValue.contains(scriptPrefix)) {          scriptFound=true;          break;        }      }      if (!scriptFound) {        handleError("Script attribute \"" + name + "\" does not contain a script.",method,element);      }    }  }}  }
class C{  public final void testToString(){  assertNotNull(new IdentityScopeStub("Aleksei Semenov").toString());}  }
class C{  boolean priceModelIsFree(long priceModelEnd,long freePeriodEnd){  return (freePeriodEnd > priceModelEnd || freePeriodEnd >= billingInput.getBillingPeriodEnd());}  }
class C{  private void clearAllAction(){  int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),Messages.getString("menu.context.removeAll.warning"),Messages.getString("menu.context.removeAll.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);  if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {      this.simulation.getWorld().removeAllBodiesAndJoints(false);      this.simulation.getContactCounter().clear();    }    this.bodyFolder.removeAllChildren();    this.jointFolder.removeAllChildren();    this.model.reload(this.bodyFolder);    this.model.reload(this.jointFolder);    this.notifyActionListeners("clear-all");  }}  }
class C{  private List<TestPackage> buildTestsToRun(){  List<TestPackage> testPkgList=new LinkedList<TestPackage>();  try {    ITestPackageRepo testRepo=createTestCaseRepo();    Collection<ITestPackageDef> testPkgDefs=getTestPackagesToRun(testRepo);    for (    ITestPackageDef testPkgDef : testPkgDefs) {      addTestPackage(testPkgList,testPkgDef);    }    if (testPkgList.isEmpty()) {      Log.logAndDisplay(LogLevel.WARN,LOG_TAG,"No tests to run");    }  } catch (  FileNotFoundException e) {    throw new IllegalArgumentException("failed to find CTS plan file",e);  }catch (  ParseException e) {    throw new IllegalArgumentException("failed to parse CTS plan file",e);  }catch (  ConfigurationException e) {    throw new IllegalArgumentException("failed to process arguments",e);  }  return testPkgList;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.662 -0500",hash_original_method="C49A07C43A7B951DB1FE6415A49FA28D",hash_generated_method="F44AF192845D160080012C2E7CDCA275") public static int dehexchar(char hex){  if (hex >= '0' && hex <= '9') {    return hex - '0';  } else   if (hex >= 'A' && hex <= 'F') {    return hex - 'A' + 10;  } else   if (hex >= 'a' && hex <= 'f') {    return hex - 'a' + 10;  } else {    return -1;  }}  }
class C{  private static String modify(String str,String[] set,boolean expect){  CharSet chars=evaluateSet(set);  StringBuffer buffer=new StringBuffer(str.length());  char[] chrs=str.toCharArray();  int sz=chrs.length;  for (int i=0; i < sz; i++) {    if (chars.contains(chrs[i]) == expect) {      buffer.append(chrs[i]);    }  }  return buffer.toString();}  }
class C{  private static void createElementSequences(SimpleList<Sequence> candidates,int length,Type elementType,List<Sequence> inputSequences,int totStatements,List<Integer> variables){  for (int i=0; i < length; i++) {    Sequence inputSeq=candidates.get(Randomness.nextRandomInt(candidates.size()));    inputSequences.add(inputSeq);    Variable inputVar=inputSeq.randomVariableForTypeLastStatement(elementType);    assert inputVar != null;    variables.add(totStatements + inputVar.index);    totStatements+=inputSeq.size();  }}  }
class C{  protected String engineGetURI(){  return implementedTransformURI;}  }
class C{  public String toString(){switch (rule) {case RULE_OVER:    return "[CompositeRule: OVER]";case RULE_IN:  return "[CompositeRule: IN]";case RULE_OUT:return "[CompositeRule: OUT]";case RULE_ATOP:return "[CompositeRule: ATOP]";case RULE_XOR:return "[CompositeRule: XOR]";case RULE_ARITHMETIC:return ("[CompositeRule: ARITHMATIC k1:" + k1 + " k2: "+ k2+ " k3: "+ k3+ " k4: "+ k4+ ']');case RULE_MULTIPLY:return "[CompositeRule: MULTIPLY]";case RULE_SCREEN:return "[CompositeRule: SCREEN]";case RULE_DARKEN:return "[CompositeRule: DARKEN]";case RULE_LIGHTEN:return "[CompositeRule: LIGHTEN]";default :throw new Error("Unknown Composite Rule type");}}  }
class C{  private boolean isOutsideDocElem(){  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);}  }
class C{  protected int partition(int attIdx,int[] index,int l,int r){  double pivot=m_Instances.instance(index[(l + r) / 2]).value(attIdx);  int help;  while (l < r) {    while ((m_Instances.instance(index[l]).value(attIdx) < pivot) && (l < r)) {      l++;    }    while ((m_Instances.instance(index[r]).value(attIdx) > pivot) && (l < r)) {      r--;    }    if (l < r) {      help=index[l];      index[l]=index[r];      index[r]=help;      l++;      r--;    }  }  if ((l == r) && (m_Instances.instance(index[r]).value(attIdx) > pivot)) {    r--;  }  return r;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == N4ClassifierDefinition.class) {switch (derivedFeatureID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION__OWNED_MEMBERS_RAW:      return N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW;default :    return -1;}}if (baseClass == GenericDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPE_VARS:  return N4JSPackage.GENERIC_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == ThisTarget.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static Assignment createOneValue(Collection<String> variables,String string){  Assignment a=new Assignment();  variables.stream().forEach(null);  return a;}  }
class C{  public DefragLineReuseRatio(){  super(Options.set,"Defrag Line Reuse Ratio","Blocks with this fraction marked may be reused for defrag allocation",DEFAULT_DEFRAG_LINE_REUSE_RATIO);}  }
class C{  public Document read(URL url) throws DocumentException {  String systemID=url.toExternalForm();  InputSource source=new InputSource(systemID);  if (this.encoding != null) {    source.setEncoding(this.encoding);  }  return read(source);}  }
class C{  public synchronized void end(){  done=true;  wakeUp();}  }
class C{  @Override public synchronized void paintComponent(Graphics g){  GUIPreferences guip=GUIPreferences.getInstance();  if (guip.getBoolean(GUIPreferences.ADVANCED_SHOW_FPS)) {    paintCompsStartTime=System.nanoTime();  }  if (guip.getAntiAliasing()) {    ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  }  if (!isTileImagesLoaded()) {    g.drawString(Messages.getString("BoardView1.loadingImages"),20,50);    if (!tileManager.isStarted()) {      System.out.println("boardview1: loading images for board");      tileManager.loadNeededImages(game);    }    repaint(1000);    return;  }  Rectangle viewRect=scrollpane.getVisibleRect();  if (bvBgShouldTile && (bvBgImage != null)) {    Rectangle clipping=g.getClipBounds();    int x=0;    int y=0;    int w=bvBgImage.getWidth();    int h=bvBgImage.getHeight();    while (y < clipping.getHeight()) {      int yRem=0;      if (y == 0) {        yRem=clipping.y % h;      }      x=0;      while (x < clipping.getWidth()) {        int xRem=0;        if (x == 0) {          xRem=clipping.x % w;        }        if (xRem != 0 || yRem != 0) {          g.drawImage(bvBgImage.getSubimage(xRem,yRem,w - xRem,h - yRem),clipping.x + x,clipping.y + y,this);        } else {          g.drawImage(bvBgImage,clipping.x + x,clipping.y + y,this);        }        x+=w - xRem;      }      y+=h - yRem;    }  } else   if (bvBgImage != null) {    g.drawImage(bvBgImage,-getX(),-getY(),(int)viewRect.getWidth(),(int)viewRect.getHeight(),this);  } else {    MetalTheme theme=new DefaultMetalTheme();    g.setColor(theme.getControl());    g.fillRect(-getX(),-getY(),(int)viewRect.getWidth(),(int)viewRect.getHeight());  }  g.translate(HEX_W,HEX_H);  if (shadowMap == null) {    updateShadowMap();  }  drawHexes(g,g.getClipBounds());  if (guip.getShowWrecks() && !useIsometric()) {    drawSprites(g,wreckSprites);  }  if (!useIsometric() && GUIPreferences.getInstance().getShowFieldOfFire()) {    drawSprites(g,fieldofFireSprites);  }  if ((game.getPhase() == Phase.PHASE_MOVEMENT) && !useIsometric()) {    drawSprites(g,moveEnvSprites);    drawSprites(g,moveModEnvSprites);  }  drawMinefields(g);  drawArtilleryHexes(g);  drawSprite(g,highlightSprite);  drawSprite(g,cursorSprite);  drawSprite(g,selectedSprite);  drawSprite(g,firstLOSSprite);  drawSprite(g,secondLOSSprite);  if ((en_Deployer != null) && !useIsometric()) {    drawDeployment(g);  }  if ((game.getPhase() == IGame.Phase.PHASE_SET_ARTYAUTOHITHEXES) && (showAllDeployment)) {    drawAllDeployment(g);  }  drawSprites(g,flareSprites);  drawSprites(g,c3Sprites);  if (game.getBoard().onGround()) {    drawSprites(g,flyOverSprites);  }  drawSprites(g,entitySprites);  drawSprites(g,movingEntitySprites);  drawSprites(g,ghostEntitySprites);  drawSprites(g,attackSprites);  if (game.useVectorMove() && (game.getPhase() == IGame.Phase.PHASE_MOVEMENT)) {    drawSprites(g,movementSprites);  }  drawSprites(g,pathSprites);  if ((game.getPhase() == Phase.PHASE_FIRING) || (game.getPhase() == Phase.PHASE_OFFBOARD)) {    drawSprites(g,firingSprites);  }  if (game.getPhase() == Phase.PHASE_FIRING) {    for (    Coords c : strafingCoords) {      drawHexBorder(g,getHexLocation(c),Color.yellow,0,3);    }  }  if (rulerStart != null) {    Point start=getCentreHexLocation(rulerStart);    if (rulerEnd != null) {      Point end=getCentreHexLocation(rulerEnd);      g.setColor(Color.yellow);      g.drawLine(start.x,start.y,end.x,end.y);      g.setColor(rulerEndColor);      g.fillRect(end.x - 1,end.y - 1,2,2);    }    g.setColor(rulerStartColor);    g.fillRect(start.x - 1,start.y - 1,2,2);  }  g.translate(-HEX_W,-HEX_H);  if (displayablesRect == null) {    displayablesRect=new Rectangle();  }  displayablesRect.x=-getX();  displayablesRect.y=-getY();  displayablesRect.width=scrollpane.getViewport().getViewRect().width;  displayablesRect.height=scrollpane.getViewport().getViewRect().height;  for (int i=0; i < displayables.size(); i++) {    IDisplayable disp=displayables.get(i);    disp.draw(g,displayablesRect);  }  if (guip.getBoolean(GUIPreferences.ADVANCED_SHOW_FPS)) {    if (frameCount == FRAMES) {      averageTime=totalTime / FRAMES;      totalTime=0;      frameCount=0;    } else {      totalTime+=System.nanoTime() - paintCompsStartTime;      frameCount++;    }    String s=String.format("%1$5.3f",averageTime / 1000000d);    g.setFont(fpsFont);    g.setColor(Color.YELLOW);    g.drawString(s,-getX() + 5,-getY() + 20);  }}  }
class C{  public static String randomString(int length){  char[] someChars=new char[length];  for (int i=0; i < length; i++) {    someChars[i]=(char)(r.nextInt(ALPHABET_SIZE) + 'a');  }  return new String(someChars);}  }
class C{  public Lifecycle(){  _log=null;}  }
class C{  private void printOutput(final String locale,HttpServletResponse resp,String message) throws IOException {  resp.setCharacterEncoding("UTF-8");  resp.setContentType("text/html; charset=UTF-8");  String title=Messages.get(locale,"servlet_notification_title");  String html=Messages.get(locale,"servlet_notification_html",new Object[]{title,title,message});  PrintWriter out=resp.getWriter();  out.println(html);  out.close();}  }
class C{  void startCustomExceptionHandler(){  List<CrashReportingService> services=getEnabledServicesForType(CrashReportingService.class);  if (services != null && !services.isEmpty()) {    if (customExceptionHandler == null) {      customExceptionHandler=new CustomExceptionHandler(context,services,foamApiKeys.wifiOnly());    }    if (!customExceptionHandler.isRunning()) {      customExceptionHandler.start();    }  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public void deleteAll(){  for (  T entity : readAll())   delete(entity);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static void addLookupServiceProvider(LookupServiceProvider provider){  if (!_providers.contains(provider)) {    _providers.addElement(provider);  }}  }
class C{  public ExifUtil(ExifInterface exif){  mExif=exif;}  }
class C{  private void processTermPositionVector(Terms terms,String field,BLAS blas) throws ArrayIndexOutOfBoundsException, IOException {  if (terms == null)   return;  Hashtable<Integer,String> localTermPositions=new Hashtable<Integer,String>();  ArrayList<Integer> thePositions=new ArrayList<Integer>();  TermsEnum termsEnum=terms.iterator(null);  BytesRef text;  while ((text=termsEnum.next()) != null) {    String theTerm=text.utf8ToString();    if (!semanticTermVectors.containsVector(theTerm))     continue;    DocsAndPositionsEnum docsAndPositions=termsEnum.docsAndPositions(null,null);    if (docsAndPositions == null)     continue;    docsAndPositions.nextDoc();    int freq=docsAndPositions.freq();    for (int x=0; x < freq; x++) {      int thePosition=docsAndPositions.nextPosition();      if (subsamplingProbabilities == null || !subsamplingProbabilities.containsKey(field + ":" + theTerm) || random.nextDouble() > subsamplingProbabilities.get(field + ":" + theTerm)) {        localTermPositions.put(thePosition,theTerm);        thePositions.add(thePosition);      }    }  }  Collections.sort(thePositions);  for (  int focusposn : thePositions) {    String focusterm=localTermPositions.get(focusposn);    int effectiveWindowRadius=flagConfig.windowradius();    if (flagConfig.subsampleinwindow)     effectiveWindowRadius=random.nextInt(flagConfig.windowradius()) + 1;    int windowstart=Math.max(0,focusposn - effectiveWindowRadius);    int windowend=Math.min(focusposn + effectiveWindowRadius,thePositions.size());    for (int cursor=windowstart; cursor < windowend; cursor++) {      if (cursor == focusposn)       continue;      String coterm=localTermPositions.get(thePositions.get(cursor));      Vector toSuperpose=elementalTermVectors.getVector(coterm);      if (flagConfig.positionalmethod().equals(PositionalMethod.EMBEDDINGS)) {        ArrayList<Vector> contextVectors=new ArrayList<Vector>();        ArrayList<Integer> contextLabels=new ArrayList<Integer>();        contextVectors.add(toSuperpose);        contextLabels.add(1);        while (contextVectors.size() <= flagConfig.negsamples) {          Vector randomTerm=null;          double max=totalPool;          while (randomTerm == null) {            double test=random.nextDouble() * max;            if (termDic.ceilingEntry(test) != null) {              String testTerm=termDic.ceilingEntry(test).getValue();              if (!testTerm.equals(coterm))               randomTerm=elementalTermVectors.getVector(testTerm);            }          }          contextVectors.add(randomTerm);          contextLabels.add(0);        }        this.processEmbeddings(semanticTermVectors.getVector(focusterm),contextVectors,contextLabels,alpha,blas);      } else {        float globalweight=luceneUtils.getGlobalTermWeight(new Term(field,coterm));        if (flagConfig.positionalmethod() == PositionalMethod.PROXIMITY) {          toSuperpose=elementalTermVectors.getVector(coterm).copy();          toSuperpose.bind(positionalNumberVectors.getVector(cursor - focusposn));        }        if (flagConfig.positionalmethod() == PositionalMethod.BASIC || flagConfig.positionalmethod() == PositionalMethod.PERMUTATIONPLUSBASIC || flagConfig.positionalmethod() == PositionalMethod.PROXIMITY) {          semanticTermVectors.getVector(focusterm).superpose(toSuperpose,globalweight,null);        }        if (flagConfig.positionalmethod() == PositionalMethod.PERMUTATION || flagConfig.positionalmethod() == PositionalMethod.PERMUTATIONPLUSBASIC) {          int[] permutation=permutationCache[cursor - focusposn + flagConfig.windowradius()];          semanticTermVectors.getVector(focusterm).superpose(toSuperpose,globalweight,permutation);        } else         if (flagConfig.positionalmethod() == PositionalMethod.DIRECTIONAL) {          int[] permutation=permutationCache[(int)Math.max(0,Math.signum(cursor - focusposn))];          semanticTermVectors.getVector(focusterm).superpose(toSuperpose,globalweight,permutation);        }      }    }  }  totalDocCount.incrementAndGet();}  }
class C{  public boolean shouldRoute(String address){  long check=ipToLong(address);  return check >= begin && check <= end;}  }
class C{  public static int quadTreeLevelsForPrecision(double meters){  assert meters >= 0;  if (meters == 0) {    return QuadPrefixTree.MAX_LEVELS_POSSIBLE;  } else {    final double ratio=1 + (EARTH_POLAR_DISTANCE / EARTH_EQUATOR);    final double width=Math.sqrt((meters * meters) / (ratio * ratio));    final long part=Math.round(Math.ceil(EARTH_EQUATOR / width));    final int level=Long.SIZE - Long.numberOfLeadingZeros(part) - 1;    return (part <= (1l << level)) ? level : (level + 1);  }}  }
class C{  @Override public void onCreate(){  super.onCreate();  Fabric.with(this,new Crashlytics());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.MORE_GUARDS___ANONYMOUS_MORE_GUARDS_11:    getAnonymous_moreGuards_1_1().clear();  getAnonymous_moreGuards_1_1().addAll((Collection<? extends Anonymous_moreGuards_1_>)newValue);return;case UmplePackage.MORE_GUARDS___CODE_1:setCode_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Object convertJavaFieldToSqlArgValue(Object fieldVal) throws SQLException {  if (fieldVal == null) {    return null;  } else {    return fieldConverter.javaToSqlArg(this,fieldVal);  }}  }
class C{  void attribClass(ClassSymbol c) throws CompletionFailure {  if (c.type.hasTag(ERROR))   return;  chk.checkNonCyclic(null,c.type);  Type st=types.supertype(c.type);  if ((c.flags_field & Flags.COMPOUND) == 0) {    if (st.hasTag(CLASS))     attribClass((ClassSymbol)st.tsym);    if (c.owner.kind == TYP && c.owner.type.hasTag(CLASS))     attribClass((ClassSymbol)c.owner);  }  if ((c.flags_field & UNATTRIBUTED) != 0) {    c.flags_field&=~UNATTRIBUTED;    Env<AttrContext> env=enter.typeEnvs.get(c);    Env<AttrContext> lintEnv=env;    while (lintEnv.info.lint == null)     lintEnv=lintEnv.next;    env.info.lint=lintEnv.info.lint.augment(c);    Lint prevLint=chk.setLint(env.info.lint);    JavaFileObject prev=log.useSource(c.sourcefile);    ResultInfo prevReturnRes=env.info.returnResult;    try {      deferredLintHandler.flush(env.tree);      env.info.returnResult=null;      if (st.tsym == syms.enumSym && ((c.flags_field & (Flags.ENUM | Flags.COMPOUND)) == 0))       log.error(env.tree.pos(),"enum.no.subclassing");      if (st.tsym != null && ((st.tsym.flags_field & Flags.ENUM) != 0) && ((c.flags_field & (Flags.ENUM | Flags.COMPOUND)) == 0)) {        log.error(env.tree.pos(),"enum.types.not.extensible");      }      attribClassBody(env,c);      chk.checkDeprecatedAnnotation(env.tree.pos(),c);      chk.checkClassOverrideEqualsAndHashIfNeeded(env.tree.pos(),c);      chk.checkFunctionalInterface((JCClassDecl)env.tree,c);    }  finally {      env.info.returnResult=prevReturnRes;      log.useSource(prev);      chk.setLint(prevLint);    }  }}  }
class C{  public final Object newInstance(Object[] args) throws CannotCreateException {  int n=constructors.length;  for (int i=0; i < n; ++i) {    try {      return constructors[i].newInstance(args);    } catch (    IllegalArgumentException e) {    }catch (    InstantiationException e) {      throw new CannotCreateException(e);    }catch (    IllegalAccessException e) {      throw new CannotCreateException(e);    }catch (    InvocationTargetException e) {      throw new CannotCreateException(e);    }  }  throw new CannotCreateException("no constructor matches");}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){  if (mRemoveEnabled && mIsRemoving) {    mPositionX=position.x;  }}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  private RtcpPacket parseRtcpPacket(Packet packet) throws IOException {  RtcpCompoundPacket compoundPacket=new RtcpCompoundPacket(packet);  Vector<RtcpPacket> subpackets=new Vector<RtcpPacket>();  DataInputStream in=new DataInputStream(new ByteArrayInputStream(compoundPacket.mData,compoundPacket.mOffset,compoundPacket.mLength));  mRtcpSession.updateavgrtcpsize(compoundPacket.mLength);  int length=0;  for (int offset=0; offset < compoundPacket.mLength; offset+=length) {    int firstbyte=in.readUnsignedByte();    if ((firstbyte & 0xc0) != 128) {      throw new IOException(new StringBuilder("Bad RTCP packet version for firstbyte : ").append(firstbyte).toString());    }    int type=in.readUnsignedByte();    length=in.readUnsignedShort();    length=length + 1 << 2;    int padlen=0;    if (offset + length > compoundPacket.mLength) {      throw new IOException(new StringBuilder("Bad RTCP packet length : ").append(offset + length).toString());    }    if (offset + length == compoundPacket.mLength) {      if ((firstbyte & 0x20) != 0) {        padlen=compoundPacket.mData[compoundPacket.mOffset + compoundPacket.mLength - 1] & 0xff;        if (padlen == 0) {          if (sLogger.isActivated()) {            sLogger.error("Bad RTCP packet format");          }          throw new IOException(new StringBuilder("Bad RTCP packet format with length : ").append(padlen).toString());        }      }    } else     if ((firstbyte & 0x20) != 0) {      throw new IOException("Bad RTCP packet format (P != 0)");    }    int inlength=length - padlen;    firstbyte&=0x1f;    RtcpPacket subpacket;switch (type) {case RtcpPacket.RTCP_SR:      mStats.numSrPkts++;    if (inlength != 28 + 24 * firstbyte) {      mStats.numMalformedRtcpPkts++;      throw new IOException("Bad RTCP SR packet format");    }  RtcpSenderReportPacket srp=new RtcpSenderReportPacket(compoundPacket);subpacket=srp;srp.ssrc=in.readInt();srp.ntptimestampmsw=in.readInt() & 0xffffffffL;srp.ntptimestamplsw=in.readInt() & 0xffffffffL;srp.rtptimestamp=in.readInt() & 0xffffffffL;srp.packetcount=in.readInt() & 0xffffffffL;srp.octetcount=in.readInt() & 0xffffffffL;srp.reports=new RtcpReport[firstbyte];RtpSource sourceSR=mRtcpSession.getMySource();if (sourceSR != null) {sourceSR.receivedSenderReport(srp);}for (int i=0; i < srp.reports.length; i++) {srp.reports[i]=getRtcpReport(in);}notifyRtcpListeners(new RtcpSenderReportEvent(srp));break;case RtcpPacket.RTCP_RR:if (inlength != 8 + 24 * firstbyte) {mStats.numMalformedRtcpPkts++;throw new IOException("Bad RTCP RR packet format");}RtcpReceiverReportPacket rrp=new RtcpReceiverReportPacket(compoundPacket);subpacket=rrp;rrp.ssrc=in.readInt();rrp.reports=new RtcpReport[firstbyte];for (int i=0; i < rrp.reports.length; i++) {rrp.reports[i]=getRtcpReport(in);}notifyRtcpListeners(new RtcpReceiverReportEvent(rrp));break;case RtcpPacket.RTCP_SDES:RtcpSdesPacket sdesp=new RtcpSdesPacket(compoundPacket);subpacket=sdesp;sdesp.sdes=new RtcpSdesBlock[firstbyte];int sdesoff=4;for (int i=0; i < sdesp.sdes.length; i++) {RtcpSdesBlock chunk=new RtcpSdesBlock();sdesp.sdes[i]=chunk;chunk.ssrc=in.readInt();sdesoff+=5;Vector<RtcpSdesItem> items=new Vector<RtcpSdesItem>();boolean gotcname=false;int j;while ((j=in.readUnsignedByte()) != 0) {if (j < 1 || j > 8) {mStats.numMalformedRtcpPkts++;throw new IOException("Bad RTCP SDES packet format");}if (j == 1) {gotcname=true;}RtcpSdesItem item=new RtcpSdesItem();items.addElement(item);item.type=j;int sdeslen=in.readUnsignedByte();item.data=new byte[sdeslen];in.readFully(item.data);sdesoff+=2 + sdeslen;}if (!gotcname) {mStats.numMalformedRtcpPkts++;throw new IOException("Bad RTCP SDES packet format");}chunk.items=new RtcpSdesItem[items.size()];items.copyInto(chunk.items);if ((sdesoff & 3) != 0) {if (in.skip(4 - (sdesoff & 3)) != 4 - (sdesoff & 3)) {throw new IOException("Bad RTCP SDES packet format");}sdesoff=sdesoff + 3 & -4;}}if (inlength != sdesoff) {mStats.numMalformedRtcpPkts++;throw new IOException("Bad RTCP SDES packet format");}notifyRtcpListeners(new RtcpSdesEvent(sdesp));break;case RtcpPacket.RTCP_BYE:RtcpByePacket byep=new RtcpByePacket(compoundPacket);subpacket=byep;byep.mSsrc=new int[firstbyte];for (int i=0; i < byep.mSsrc.length; i++) {byep.mSsrc[i]=in.readInt();}int reasonlen;if (inlength > 4 + 4 * firstbyte) {reasonlen=in.readUnsignedByte();byep.mReason=new byte[reasonlen];reasonlen++;} else {reasonlen=0;byep.mReason=new byte[0];}reasonlen=reasonlen + 3 & -4;if (inlength != 4 + 4 * firstbyte + reasonlen) {mStats.numMalformedRtcpPkts++;throw new IOException("Bad RTCP BYE packet format");}in.readFully(byep.mReason);int skipBye=reasonlen - byep.mReason.length;if (in.skip(skipBye) != skipBye) {throw new IOException("Bad RTCP BYE packet format");}notifyRtcpListeners(new RtcpByeEvent(byep));break;case RtcpPacket.RTCP_APP:if (inlength < 12) {throw new IOException("Bad RTCP APP packet format");}RtcpAppPacket appp=new RtcpAppPacket(compoundPacket);subpacket=appp;appp.mSsrc=in.readInt();appp.mName=in.readInt();appp.mSubtype=firstbyte;appp.mData=new byte[inlength - 12];in.readFully(appp.mData);int skipApp=inlength - 12 - appp.mData.length;if (in.skip(skipApp) != skipApp) {throw new IOException("Bad RTCP APP packet format");}notifyRtcpListeners(new RtcpApplicationEvent(appp));break;default :mStats.numUnknownTypes++;throw new IOException("Bad RTCP packet format");}subpacket.mOffset=offset;subpacket.mLength=length;subpackets.addElement(subpacket);if (in.skipBytes(padlen) != padlen) {throw new IOException("Bad RTCP packet format");}}compoundPacket.mPackets=new RtcpPacket[subpackets.size()];subpackets.copyInto(compoundPacket.mPackets);return compoundPacket;}  }
class C{  public static boolean isDefaultClusterDuplicateDetection(){  return DEFAULT_CLUSTER_DUPLICATE_DETECTION;}  }
class C{  protected void stopping(){  if (momentos != null) {    for (int i=0; i < momentos.length; i++) {      momentos[i].restore();    }  }}  }
class C{  public void addCustomParameter(CustomParameter customParameter){  if (customParameter == null) {    throw new NullPointerException("Null custom parameter");  }  customParameters.add(customParameter);}  }
class C{  public boolean userCanEditGroup(int connectedUserId,int GroupId,String entidad) throws Exception {  boolean can=false;  int mgrGroup=Defs.NULL_ID;  try {    mgrGroup=this.getGroupMgrId(GroupId,entidad);    can=hasUserGroupAuth(connectedUserId,USER_ACTION_ID_EDIT,mgrGroup,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  private String appendAction(String url,Action action){  return url + "?" + Protocol.ACTION_PARAM_NAME+ "="+ action.toString();}  }
class C{  protected Solution[] createParents(int numberOfVariables){  Solution parent1=new Solution(numberOfVariables,0);  Solution parent2=new Solution(numberOfVariables,0);  for (int i=0; i < numberOfVariables; i++) {    parent1.setVariable(i,new RealVariable(0.0,0.0,1.0));    parent2.setVariable(i,new RealVariable(1.0,0.0,1.0));  }  return new Solution[]{parent1,parent2};}  }
class C{  private static void removeLast(List<LIRInstruction> seq){  seq.remove(seq.size() - 1);}  }
class C{  private void initialize(Locale locale){  this.locale=locale;  LocaleProviderAdapter adapter=LocaleProviderAdapter.getAdapter(DecimalFormatSymbolsProvider.class,locale);  if (!(adapter instanceof ResourceBundleBasedAdapter)) {    adapter=LocaleProviderAdapter.getResourceBundleBased();  }  Object[] data=adapter.getLocaleResources(locale).getDecimalFormatSymbolsData();  String[] numberElements=(String[])data[0];  decimalSeparator=numberElements[0].charAt(0);  groupingSeparator=numberElements[1].charAt(0);  patternSeparator=numberElements[2].charAt(0);  percent=numberElements[3].charAt(0);  zeroDigit=numberElements[4].charAt(0);  digit=numberElements[5].charAt(0);  minusSign=numberElements[6].charAt(0);  exponential=numberElements[7].charAt(0);  exponentialSeparator=numberElements[7];  perMill=numberElements[8].charAt(0);  infinity=numberElements[9];  NaN=numberElements[10];  if (locale.getCountry().length() > 0) {    try {      currency=Currency.getInstance(locale);    } catch (    IllegalArgumentException e) {    }  }  if (currency != null) {    intlCurrencySymbol=currency.getCurrencyCode();    if (data[1] != null && data[1] == intlCurrencySymbol) {      currencySymbol=(String)data[2];    } else {      currencySymbol=currency.getSymbol(locale);      data[1]=intlCurrencySymbol;      data[2]=currencySymbol;    }  } else {    intlCurrencySymbol="XXX";    try {      currency=Currency.getInstance(intlCurrencySymbol);    } catch (    IllegalArgumentException e) {    }    currencySymbol="\u00A4";  }  monetarySeparator=decimalSeparator;}  }
class C{  private Map<UUID,List<Integer>> traderCachePartitions(Ignite ignite){  Affinity<?> affinity=ignite.affinity(TRADER_CACHE);  List<Integer> partNumbers=new ArrayList<>(affinity.partitions());  for (int i=0; i < affinity.partitions(); i++)   partNumbers.add(i);  Map<Integer,ClusterNode> partPerNodes=affinity.mapPartitionsToNodes(partNumbers);  Map<UUID,List<Integer>> nodesToPart=new HashMap<>();  for (  Map.Entry<Integer,ClusterNode> entry : partPerNodes.entrySet()) {    List<Integer> nodeParts=nodesToPart.get(entry.getValue().id());    if (nodeParts == null) {      nodeParts=new ArrayList<>();      nodesToPart.put(entry.getValue().id(),nodeParts);    }    nodeParts.add(entry.getKey());  }  return nodesToPart;}  }
class C{  @RolesAllowed({"PLATFORM_OPERATOR"}) public Properties loadPropertiesFromDB(String languageCode){  ArgumentValidator.notNull("Language code",languageCode);  Properties props=loadMessagePropertiesFromDB(languageCode);  Properties mailProps=loadMailPropertiesFromFileAndDB(languageCode);  props.putAll(mailProps);  return props;}  }
class C{  public XMLString xstr(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XSTR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  protected void reportMatching(TypeParameter[] typeParameters,IJavaElement enclosingElement,IJavaElement parent,Binding binding,MatchingNodeSet nodeSet) throws CoreException {  if (typeParameters == null)   return;  for (int i=0, l=typeParameters.length; i < l; i++) {    TypeParameter typeParameter=typeParameters[i];    if (typeParameter != null) {      Integer level=(Integer)nodeSet.matchingNodes.removeKey(typeParameter);      if (level != null) {        if (level.intValue() > -1 && encloses(enclosingElement)) {          int offset=typeParameter.sourceStart;          SearchMatch match=this.patternLocator.newDeclarationMatch(typeParameter,enclosingElement,binding,level.intValue(),typeParameter.sourceEnd - offset + 1,this);          report(match);        }      }      boolean matchedClassContainer=(this.matchContainer & PatternLocator.ALL_CONTAINER) != 0;      if (typeParameter.annotations != null) {        reportMatching(typeParameter.annotations,enclosingElement,null,typeParameter.binding,nodeSet,matchedClassContainer,encloses(enclosingElement));      }      if (typeParameter.type != null) {        reportMatching(typeParameter.type.annotations,enclosingElement,typeParameter.binding,nodeSet,matchedClassContainer);        level=(Integer)nodeSet.matchingNodes.removeKey(typeParameter.type);        if (level != null) {          IJavaElement localElement=createHandle(typeParameter,enclosingElement);          this.patternLocator.matchReportReference(typeParameter.type,enclosingElement,localElement,null,binding,level.intValue(),this);        }        if (typeParameter.type instanceof ParameterizedSingleTypeReference) {          ParameterizedSingleTypeReference paramSTR=(ParameterizedSingleTypeReference)typeParameter.type;          if (paramSTR.typeArguments != null) {            int length=paramSTR.typeArguments.length;            for (int k=0; k < length; k++) {              TypeReference typeArgument=paramSTR.typeArguments[k];              reportMatching(typeArgument.annotations,enclosingElement,typeArgument.resolvedType,nodeSet,matchedClassContainer);              level=(Integer)nodeSet.matchingNodes.removeKey(typeArgument);              if (level != null) {                IJavaElement localElement=createHandle(typeParameter,enclosingElement);                this.patternLocator.matchReportReference(typeArgument,enclosingElement,localElement,null,binding,level.intValue(),this);              }              if (typeArgument instanceof Wildcard) {                TypeReference wildcardBound=((Wildcard)typeArgument).bound;                if (wildcardBound != null) {                  reportMatching(wildcardBound.annotations,enclosingElement,wildcardBound.resolvedType,nodeSet,matchedClassContainer);                  level=(Integer)nodeSet.matchingNodes.removeKey(wildcardBound);                  if (level != null) {                    IJavaElement localElement=createHandle(typeParameter,enclosingElement);                    this.patternLocator.matchReportReference(wildcardBound,enclosingElement,localElement,null,binding,level.intValue(),this);                  }                }              }            }          }        }      }      if (typeParameter.bounds != null) {        for (int j=0, b=typeParameter.bounds.length; j < b; j++) {          TypeReference typeParameterBound=typeParameter.bounds[j];          if (typeParameterBound.annotations != null) {            reportMatching(typeParameterBound.annotations,enclosingElement,binding,nodeSet,matchedClassContainer);          }          level=(Integer)nodeSet.matchingNodes.removeKey(typeParameterBound);          if (level != null) {            IJavaElement localElement=createHandle(typeParameter,enclosingElement);            this.patternLocator.matchReportReference(typeParameterBound,enclosingElement,localElement,null,binding,level.intValue(),this);          }          if (typeParameterBound instanceof ParameterizedSingleTypeReference) {            ParameterizedSingleTypeReference paramSTR=(ParameterizedSingleTypeReference)typeParameterBound;            if (paramSTR.typeArguments != null) {              int length=paramSTR.typeArguments.length;              for (int k=0; k < length; k++) {                TypeReference typeArgument=paramSTR.typeArguments[k];                if (typeArgument.annotations != null) {                  reportMatching(typeArgument.annotations,enclosingElement,binding,nodeSet,matchedClassContainer);                }                level=(Integer)nodeSet.matchingNodes.removeKey(typeArgument);                if (level != null) {                  IJavaElement localElement=createHandle(typeParameter,enclosingElement);                  this.patternLocator.matchReportReference(typeArgument,enclosingElement,localElement,null,binding,level.intValue(),this);                }                if (typeArgument instanceof Wildcard) {                  TypeReference wildcardBound=((Wildcard)typeArgument).bound;                  if (wildcardBound != null) {                    if (wildcardBound.annotations != null) {                      reportMatching(wildcardBound.annotations,enclosingElement,binding,nodeSet,matchedClassContainer);                    }                    level=(Integer)nodeSet.matchingNodes.removeKey(wildcardBound);                    if (level != null) {                      IJavaElement localElement=createHandle(typeParameter,enclosingElement);                      this.patternLocator.matchReportReference(wildcardBound,enclosingElement,localElement,null,binding,level.intValue(),this);                    }                  }                }              }            }          }        }      }    }  }}  }
class C{  @HLEFunction(nid=0x157E6225,version=150) public int sceNetAdhocPtpClose(@CheckArgument("checkPtpId") int id,int unknown){  ptpObjects.remove(id).delete();  return 0;}  }
class C{  int requestGroupData(char groupNum){  setCurrDataGroup(groupNum);  currGrpItems=knownGrpItems.get(Integer.valueOf(getCurrDataGroup()));  char[] payLoad={groupNum};  return (writeTelegram(payLoad,CMD_GROUP_READ,null));}  }
class C{  public static boolean addImportStatement(@NotNull PsiFile file,@NotNull String name,@Nullable String asName,@Nullable ImportPriority priority,@Nullable PsiElement anchor){  if (!(file instanceof PyFile)) {    return false;  }  final List<PyImportElement> existingImports=((PyFile)file).getImportTargets();  for (  PyImportElement element : existingImports) {    final QualifiedName qName=element.getImportedQName();    if (qName != null && name.equals(qName.toString())) {      if ((asName != null && asName.equals(element.getAsName())) || asName == null) {        return false;      }    }  }  final PyElementGenerator generator=PyElementGenerator.getInstance(file.getProject());  final LanguageLevel languageLevel=LanguageLevel.forElement(file);  final PyImportStatement importNodeToInsert=generator.createImportStatement(languageLevel,name,asName);  final PyImportStatementBase importStatement=PsiTreeUtil.getParentOfType(anchor,PyImportStatementBase.class,false);  final PsiElement insertParent=importStatement != null && importStatement.getContainingFile() == file ? importStatement.getParent() : file;  try {    if (anchor instanceof PyImportStatementBase) {      insertParent.addAfter(importNodeToInsert,anchor);    } else {      insertParent.addBefore(importNodeToInsert,getInsertPosition(insertParent,importNodeToInsert,priority));    }  } catch (  IncorrectOperationException e) {    LOG.error(e);  }  return true;}  }
class C{  public CreateSnapshotRequest source(Map source){  for (  Map.Entry<String,Object> entry : ((Map<String,Object>)source).entrySet()) {    String name=entry.getKey();    if (name.equals("indices")) {      if (entry.getValue() instanceof String) {        indices(Strings.splitStringByCommaToArray((String)entry.getValue()));      } else       if (entry.getValue() instanceof ArrayList) {        indices((ArrayList<String>)entry.getValue());      } else {        throw new IllegalArgumentException("malformed indices section, should be an array of strings");      }    } else     if (name.equals("partial")) {      partial(nodeBooleanValue(entry.getValue()));    } else     if (name.equals("settings")) {      if (!(entry.getValue() instanceof Map)) {        throw new IllegalArgumentException("malformed settings section, should indices an inner object");      }      settings((Map<String,Object>)entry.getValue());    } else     if (name.equals("include_global_state")) {      includeGlobalState=nodeBooleanValue(entry.getValue());    }  }  indicesOptions(IndicesOptions.fromMap((Map<String,Object>)source,IndicesOptions.lenientExpandOpen()));  return this;}  }
class C{  public PresortRioLoader(final IStatementBuffer<?> buffer){  this(buffer,true);}  }
class C{  public void removeLayoutWrapper(@NonNull SnapLayoutWrapper wrapper){  this.layoutWrappers.remove(wrapper);}  }
class C{  private void drawZoomRectangle(Graphics2D g2,boolean xor){  Rectangle2D zoomRectangle=(Rectangle2D)getChartFieldValueByName("zoomRectangle");  if (zoomRectangle != null) {    zoomRectangle=coordinateTransformation.transformRectangle(zoomRectangle,this);    if (!(coordinateTransformation instanceof NullCoordinateTransformation)) {      g2=coordinateTransformation.getTransformedGraphics(this);    }    if (xor) {      g2.setXORMode(Color.gray);    }    if ((Boolean)getChartFieldValueByName("fillZoomRectangle")) {      g2.setPaint((Paint)getChartFieldValueByName("zoomFillPaint"));      g2.fill(zoomRectangle);    } else {      g2.setPaint((Paint)getChartFieldValueByName("zoomOutlinePaint"));      g2.draw(zoomRectangle);    }    if (xor) {      g2.setPaintMode();    }  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private void updateProgress(){  HostProcess hp=getSelectedHostProcess();  if (scan.getHostProcesses() != null && hp != null) {    model.updateValues(scan,hp);    if (scan.isStopped()) {      this.stopThread=true;    }    if (chart != null) {      ResponseCountSnapshot snapshot=scan.getRequestHistory();      while (snapshot != null) {        try {          Second second=new Second(snapshot.getDate());          this.seriesTotal.add(second,snapshot.getTotal());          this.series100.add(second,snapshot.getResp100());          this.series200.add(second,snapshot.getResp200());          this.series300.add(second,snapshot.getResp300());          this.series400.add(second,snapshot.getResp400());          this.series500.add(second,snapshot.getResp500());          snapshot=scan.getRequestHistory();          for (          Plugin plugin : scan.getHostProcesses().get(0).getRunning()) {            if (!labelsAdded.contains(plugin.getName())) {              ValueMarker vm=new ValueMarker(plugin.getTimeStarted().getTime());              double center=chart.getXYPlot().getRangeAxis().getRange().getCentralValue();              if (lastCentre != center) {                if (lastCentre != -1) {                  @SuppressWarnings("rawtypes") List annotations=chart.getXYPlot().getAnnotations();                  for (                  Object o : annotations) {                    if (o instanceof XYTextAnnotation) {                      XYTextAnnotation annotation=(XYTextAnnotation)o;                      annotation.setY(center);                    }                  }                }                lastCentre=center;              }              XYTextAnnotation updateLabel=new XYTextAnnotation(plugin.getName(),plugin.getTimeStarted().getTime(),center);              updateLabel.setFont(FontUtils.getFont("Sans Serif"));              updateLabel.setRotationAnchor(TextAnchor.BASELINE_CENTER);              updateLabel.setTextAnchor(TextAnchor.BASELINE_CENTER);              updateLabel.setRotationAngle(-3.14 / 2);              updateLabel.setPaint(Color.black);              chart.getXYPlot().addDomainMarker(vm,Layer.BACKGROUND);              chart.getXYPlot().addAnnotation(updateLabel);              labelsAdded.add(plugin.getName());            }          }        } catch (        Exception e) {          log.error(e.getMessage(),e);          snapshot=null;        }      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String publicId;  String nullNS=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root","PUB",nullNS);  publicId=docType.getPublicId();  assertEquals("documenttypepublicid01","PUB",publicId);}  }
class C{  public void testLoadData() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS loadDataRegress");    this.stmt.executeUpdate("CREATE TABLE loadDataRegress (field1 int, field2 int)");    File tempFile=File.createTempFile("mysql",".txt");    System.out.println(tempFile);    Writer out=new FileWriter(tempFile);    int localCount=0;    int rowCount=128;    for (int i=0; i < rowCount; i++) {      out.write((localCount++) + "\t" + (localCount++)+ "\n");    }    out.close();    StringBuilder fileNameBuf=null;    if (File.separatorChar == '\\') {      fileNameBuf=new StringBuilder();      String fileName=tempFile.getAbsolutePath();      int fileNameLength=fileName.length();      for (int i=0; i < fileNameLength; i++) {        char c=fileName.charAt(i);        if (c == '\\') {          fileNameBuf.append("/");        } else {          fileNameBuf.append(c);        }      }    } else {      fileNameBuf=new StringBuilder(tempFile.getAbsolutePath());    }    int updateCount=this.stmt.executeUpdate("LOAD DATA LOCAL INFILE '" + fileNameBuf.toString() + "' INTO TABLE loadDataRegress CHARACTER SET "+ CharsetMapping.getMysqlCharsetForJavaEncoding(((MySQLConnection)this.conn).getEncoding(),(com.mysql.jdbc.Connection)this.conn));    assertTrue(updateCount == rowCount);  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS loadDataRegress");  }}  }
class C{  @Override public synchronized boolean isFirst() throws SQLException {  return super.isFirst();}  }
class C{  private VisorIgfsProfilerJob(String arg,boolean debug){  super(arg,debug);}  }
class C{  public Object[] wait(ManagedObjectReference moRef,String[] fetchProps,String[] propsToMatch,Object[][] propsMatchValues,Integer maxWaitSeconds) throws InvalidPropertyFaultMsg, RuntimeFaultFaultMsg, InvalidCollectorVersionFaultMsg {  VimPortType vimPort;  ManagedObjectReference filterSpecRef=null;  ServiceContent serviceContent;  try {    vimPort=this.connection.getVimPort();    serviceContent=this.connection.getServiceContent();  } catch (  Throwable cause) {    throw new BaseHelper.HelperException(cause);  }  String version="";  Object[] endVals=new Object[propsToMatch.length];  String stateVal=null;  PropertyFilterSpec spec=propertyFilterSpec(moRef,fetchProps,propsToMatch);  filterSpecRef=vimPort.createFilter(serviceContent.getPropertyCollector(),spec,true);  boolean reached=false;  UpdateSet updateset;  List<PropertyFilterUpdate> filtupary;  List<ObjectUpdate> objupary;  List<PropertyChange> propchgary;  WaitOptions waitOptions=new WaitOptions();  waitOptions.setMaxWaitSeconds(DEFAULT_MAX_WAIT_SECONDS);  long timeout=-1;  if (maxWaitSeconds != null) {    timeout=System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(maxWaitSeconds);  }  while (!reached && shouldContinue(timeout)) {    updateset=vimPort.waitForUpdatesEx(serviceContent.getPropertyCollector(),version,waitOptions);    if (updateset == null || updateset.getFilterSet() == null) {      continue;    }    version=updateset.getVersion();    filtupary=updateset.getFilterSet();    for (    PropertyFilterUpdate filtup : filtupary) {      objupary=filtup.getObjectSet();      for (      ObjectUpdate objup : objupary) {        propchgary=objup.getChangeSet();        for (        PropertyChange propchg : propchgary) {          updateValues(propsToMatch,endVals,propchg);        }      }    }    for (int chgi=0; chgi < endVals.length && !reached; chgi++) {      for (int vali=0; vali < propsMatchValues[chgi].length && !reached; vali++) {        Object expectedValue=propsMatchValues[chgi][vali];        Object endVal=endVals[chgi];        if (endVal == null) {        } else         if (endVal.toString().contains("val: null")) {          Element stateElement=(Element)endVal;          if (stateElement.getFirstChild() != null) {            stateVal=stateElement.getFirstChild().getTextContent();            reached=expectedValue.toString().equalsIgnoreCase(stateVal) || reached;          }        } else {          expectedValue=propsMatchValues[chgi][vali];          reached=expectedValue.equals(endVal) || reached;          stateVal="filtervals";        }      }    }  }  if (!reached) {    return null;  }  Object[] retVal=null;  try {    vimPort.destroyPropertyFilter(filterSpecRef);  } catch (  RuntimeFaultFaultMsg e) {    e.printStackTrace();  }  if (stateVal != null) {    if (stateVal.equalsIgnoreCase("ready")) {      retVal=new Object[]{HttpNfcLeaseState.READY};    }    if (stateVal.equalsIgnoreCase("error")) {      retVal=new Object[]{HttpNfcLeaseState.ERROR};    }    if (stateVal.equals("filtervals")) {      retVal=fetchFinalValues(moRef,fetchProps);    }  } else {    retVal=new Object[]{HttpNfcLeaseState.ERROR};  }  return retVal;}  }
class C{  boolean help(){  return help;}  }
class C{  public boolean isControlDown(){  return (modifiers & CTRL_MASK) != 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.156 -0500",hash_original_method="AC6703CEA3D1C6D4141402E5D377F54E",hash_generated_method="05566A625BFEF78DBF408CB613129282") static float cosineDistance(float[] vector1,float[] vector2){  float sum=0;  int len=vector1.length;  for (int i=0; i < len; i++) {    sum+=vector1[i] * vector2[i];  }  return (float)Math.acos(sum);}  }
class C{  private boolean isHeaderOnly(){  return headerOnly;}  }
class C{  public static BigDecimal normalizeDecimalValue(BigDecimal bigDecimal,int allowedPrecision){  if (bigDecimal.precision() > allowedPrecision) {    return null;  }  return bigDecimal;}  }
class C{  public static StringBuffer replace(StringBuffer original,String search,String replace){  return doReplace(original,search,replace,false,true);}  }
class C{  @Override public void unRegisterListener(){  mGcmListener=null;  LocalBroadcastManager.getInstance(mContext).unregisterReceiver(mMessageReceiver);}  }
class C{  protected void onStop(){  isStarted=false;}  }
class C{  protected void handleReaderImport(Reader in,JTextComponent c) throws BadLocationException, IOException {  char[] buff=new char[1024];  int nch;  boolean lastWasCR=false;  int last;  StringBuffer sbuff=null;  while ((nch=in.read(buff,0,buff.length)) != -1) {    if (sbuff == null) {      sbuff=new StringBuffer(nch);    }    last=0;    for (int counter=0; counter < nch; counter++) {switch (buff[counter]) {case '\r':        if (lastWasCR) {          if (counter == 0)           sbuff.append('\n'); else           buff[counter - 1]='\n';        } else         lastWasCR=true;      break;case '\n':    if (lastWasCR) {      if (counter > (last + 1))       sbuff.append(buff,last,counter - last - 1);      lastWasCR=false;      last=counter;    }  break;default :if (lastWasCR) {  if (counter == 0)   sbuff.append('\n'); else   buff[counter - 1]='\n';  lastWasCR=false;}break;}}if (last < nch) {if (lastWasCR) {if (last < (nch - 1)) sbuff.append(buff,last,nch - last - 1);} else sbuff.append(buff,last,nch - last);}}if (withinSameComponent) {((RTextArea)c).beginAtomicEdit();}if (lastWasCR) sbuff.append('\n');c.replaceSelection(sbuff != null ? sbuff.toString() : "");}  }
class C{  public static <T>LazyPStackX<T> fromIterable(Reducer<PStack<T>> collector,Iterable<T> it){  if (it instanceof LazyPStackX)   return (LazyPStackX<T>)it;  if (it instanceof PStack)   return new LazyPStackX<T>((PStack<T>)it,collector);  return new LazyPStackX<T>(Flux.fromIterable(it),collector);}  }
class C{  public LWL(Classifier classifier,int k,DistanceMetric dm,KernelFunction kf,VectorCollectionFactory<VecPaired<Vec,Double>> vcf){  setClassifier(classifier);  setNeighbors(k);  setDistanceMetric(dm);  setKernelFunction(kf);  this.vcf=vcf;}  }
class C{  void expireGTX(){  if (timedOut)   return;  timedOut=true;  LogWriterI18n writer=TransactionUtils.getLogWriterI18n();  try {    if (writer.infoEnabled())     writer.info(LocalizedStrings.GlobalTransaction_TRANSACTION_0_HAS_TIMED_OUT,this);    TransactionManagerImpl.getTransactionManager().removeTranxnMappings(transactions);    setStatus(Status.STATUS_NO_TRANSACTION);  } catch (  Exception e) {    if (writer.severeEnabled())     writer.severe(LocalizedStrings.GlobalTransaction_GLOBATRANSACTION_EXPIREGTX_ERROR_OCCURED_WHILE_REMOVING_TRANSACTIONAL_MAPPINGS_0,e,e);  }}  }
class C{  public final void trace(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {    log(SimpleLog.LOG_LEVEL_TRACE,message,t);  }}  }
class C{  public Matrix4d translation(double x,double y,double z){  m00=1.0;  m01=0.0;  m02=0.0;  m03=0.0;  m10=0.0;  m11=1.0;  m12=0.0;  m13=0.0;  m20=0.0;  m21=0.0;  m22=1.0;  m23=0.0;  m30=x;  m31=y;  m32=z;  m33=1.0;  properties=PROPERTY_AFFINE | PROPERTY_TRANSLATION;  return this;}  }
class C{  void stop(){  ResourcesPlugin.getWorkspace().removeResourceChangeListener(this);}  }
class C{  @Override public IType fromFacetType(){  return Types.FILE;}  }
class C{  public void cancel(final UUID queryId) throws Exception {  mgr.cancel(queryId);}  }
class C{  public static boolean canAddClassInPackageOf(Class<?> cls){  final Package beanPackage=cls.getPackage();  if (beanPackage != null) {    if (beanPackage.isSealed()) {      return false;    }    String pname=beanPackage.getName();    if (pname.startsWith("java.") || pname.startsWith("javax.security.")) {      return false;    }  }  return true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.ACTIVE_STATE_REFERENCE_EXPRESSION__VALUE:    setValue((State)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected AbstractDataset(){  this.group=new DatasetGroup();  this.listenerList=new EventListenerList();  this.notify=true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.701 -0500",hash_original_method="CF8913A55801AA3E419E95D1888FBD68",hash_generated_method="410715A9FAC9A509EFEB2FA43EFA347B") private void init(String publicId,String systemId,int lineNumber,int columnNumber){  this.publicId=publicId;  this.systemId=systemId;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;}  }
class C{  private void replyToComment(IMarker marker){  Shell activeShell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();  EditCommentDialog dialog=new EditCommentDialog(activeShell,EditCommentDialog.Mode.REPLY);  dialog.setReplyToText(marker.getAttribute(IMarker.MESSAGE,""));  dialog.setReplyToAuthor(marker.getAttribute(ReviewMarkerAttributes.REVIEW_AUTHOR_MARKER_ATTRIBUTE,""));  dialog.create();  if (dialog.open() == Window.OK) {    ReviewComment comment=new ReviewComment();    comment.setDescription(dialog.getComment());    comment.setResolved(dialog.getResolved());    String parentCommentId=marker.getAttribute(ReviewMarkerAttributes.REVIEW_ID_MARKER_ATTRIBUTE,"");    comment.setParent(parentCommentId);    ReviewCommentLocation location=new ReviewCommentLocation();    location.setCommit(AppraiseUiPlugin.getDefault().getCurrentCommit());    location.setPath(getFilePath());    ReviewCommentLocationRange range=new ReviewCommentLocationRange();    range.setStartLine(marker.getAttribute(IMarker.LINE_NUMBER,0));    location.setRange(range);    comment.setLocation(location);    AppraiseUiPlugin.getDefault().writeCommentForActiveTask(comment);  }}  }
class C{  private double sign(double a,double b){  if (b < 0.0) {    return -Math.abs(a);  } else {    return Math.abs(a);  }}  }
class C{  public SigningFailsInClientProxy(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  public void dequeueUser(String userID) throws XMPPException {  DepartQueuePacket departPacket=new DepartQueuePacket(this.workgroupJID);  this.connection.sendPacket(departPacket);}  }
class C{  protected void restoreState(){  updateMatrix=true;}  }
class C{  @Override protected boolean includeReadAttribute(Method method,String beanKey){  Method interfaceMethod=findJmxMethod(method,beanKey);  boolean metric=interfaceMethod != null && attributeSource.getManagedMetric(interfaceMethod) != null;  boolean operation=interfaceMethod != null && attributeSource.getManagedOperation(interfaceMethod) != null;  boolean result=interfaceMethod != null && (metric || !operation);  return result;}  }
class C{  public ins removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void createConnection(NetworkInterface anotherInterface){  if (!isConnected(anotherInterface) && (this != anotherInterface)) {    Connection con=new VBRConnection(this.host,this,anotherInterface.getHost(),anotherInterface);    connect(con,anotherInterface);  }}  }
class C{  protected void doRenderGraphic(DrawContext dc){  this.polygon.render(dc);}  }
class C{  public body removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private File compressBackupFolder(File backupFolder){  File backupZip=new File(backupFolder.getParentFile(),backupFolder.getName() + BackupConstants.COMPRESS_SUFFIX);  try {    ZipUtil.pack(backupFolder,backupZip,Deflater.NO_COMPRESSION);  } catch (  IOException ex) {    if (backupZip.exists()) {      backupZip.delete();    }    throw BackupException.fatals.failedToCompressBackupFolder(backupFolder.getName(),backupZip.getName(),ex);  } finally {    if (backupFolder != null && backupFolder.exists()) {      FileUtils.deleteQuietly(backupFolder);    }  }  return backupZip;}  }
class C{  @Override protected void uninstallDefaults(){  if (spinner.getLayout() instanceof UIResource) {    spinner.setLayout(null);  }  SynthContext context=getContext(spinner,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;}  }
class C{  @Override public HeadersRequestCondition combine(HeadersRequestCondition other){  Set<HeaderExpression> set=new LinkedHashSet<>(this.expressions);  set.addAll(other.expressions);  return new HeadersRequestCondition(set);}  }
class C{  @Override public void shrinkToMaxSize(final int maxsize){  if (maxsize < 0)   return;  Long key;synchronized (this) {    while (this.map.size() > maxsize) {      key=this.pam.firstKey();      if (key == null)       break;      this.map.remove(this.pam.remove(key));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.148 -0500",hash_original_method="9D52040F814FD0C684C6F66DC8E8CB93",hash_generated_method="74664AE927DA46BD6FF402D1EE4BC805") public void copyTo(short[] d){  validateIsInt16();  mRS.validate();  mRS.nAllocationRead(getID(),d);}  }
class C{  public static String generateActivationKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public static void main(String[] args) throws Exception {  new SPQRResourceManagerServer().run(args);}  }
class C{  public SpecificLight(String systemName,SerialTrafficController tc,String userName){  super(systemName,tc,userName);  this.tc=tc;  maxDimStep=tc.getNumberOfIntensitySteps();}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[(nbSubroutines - 1) / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  public void cleanup(){  if (mPopup != null) {    mPopup.dismiss();  }  mPaused=true;  mLastPopupEventID=INVALID_EVENT_ID;  if (mHandler != null) {    mHandler.removeCallbacks(mDismissPopup);    mHandler.removeCallbacks(mUpdateCurrentTime);  }  Utils.setSharedPreference(mContext,GeneralPreferences.KEY_DEFAULT_CELL_HEIGHT,mCellHeight);  eventClickCleanup();  mRemeasure=false;  mScrolling=false;}  }
class C{  public boolean contains(int integer){  for (int i=0; i < size; i++) {    if (data[i] == integer)     return true;  }  return false;}  }
class C{  public static Map<ApiIdentifier,ApiDescriptor> parseResource(List<Element> resourceList){  if (resourceList == null) {    throw new NullPointerException("Please navigate to right resource tag before parse it");  }  Map<ApiIdentifier,ApiDescriptor> resourceMap=new HashMap<ApiIdentifier,ApiDescriptor>();  for (  Element element : resourceList) {    String path=element.getAttributeValue(Constants.ATTRIBUTE_NAME).trim();    Element opElement=element.getChild(Constants.OPERATION_NODE);    String method=opElement.getAttributeValue(Constants.ATTRIBUTE_NAME).trim();    ApiIdentifier apiIdentifier=new ApiIdentifier(method,path);    ApiDescriptor apiResource=new ApiDescriptor();    Element opInValue=opElement.getChild(Constants.OPERATION_INVALUE_NODE);    if (opInValue != null) {      Element xmlElement=opInValue.getChild(Constants.XML_ELEMENT_NODE);      if (xmlElement != null && xmlElement.getAttributeValue(Constants.ATTRIBUTE_ELEMENT_NAME) != null) {        apiResource.setRequestElement(xmlElement.getAttributeValue(Constants.ATTRIBUTE_ELEMENT_NAME).trim());      }    }    Element opOutValue=opElement.getChild(Constants.OPERATION_OUTVALUE_NODE);    if (opOutValue != null) {      Element xmlElement=opOutValue.getChild(Constants.XML_ELEMENT_NODE);      if (xmlElement != null && xmlElement.getAttributeValue(Constants.ATTRIBUTE_ELEMENT_NAME) != null) {        apiResource.setResponseElement(xmlElement.getAttributeValue(Constants.ATTRIBUTE_ELEMENT_NAME).trim());      }    }    for (    Element paramElement : opElement.getChildren(Constants.OPERATION_PARAMETER_NODE)) {      if (paramElement.getAttributeValue(Constants.ATTRIBUTE_NAME) != null) {        apiResource.getParameters().add(paramElement.getAttributeValue(Constants.ATTRIBUTE_NAME).trim());      }    }    resourceMap.put(apiIdentifier,apiResource);  }  return resourceMap;}  }
class C{  public void reset(){  advancedXmlEscape=true;  setUseCdataFor("script,style");  translateSpecialEntities=true;  recognizeUnicodeChars=true;  omitUnknownTags=false;  treatUnknownTagsAsContent=false;  omitDeprecatedTags=false;  treatDeprecatedTagsAsContent=false;  omitComments=false;  omitXmlDeclaration=OptionalOutput.alwaysOutput;  omitDoctypeDeclaration=OptionalOutput.alwaysOutput;  omitHtmlEnvelope=OptionalOutput.alwaysOutput;  useEmptyElementTags=true;  allowMultiWordAttributes=true;  allowHtmlInsideAttributes=false;  ignoreQuestAndExclam=true;  namespacesAware=true;  addNewlineToHeadAndBody=true;  keepWhitespaceAndCommentsInHead=true;  hyphenReplacementInComment="=";  setPruneTags(null);  setAllowTags(null);  booleanAttributeValues=BOOL_ATT_SELF;  charset="UTF-8";  cleanerTransformations.clear();  resetPruneTagSet();  if (this.getHtmlVersion() == HtmlCleaner.HTML_4) {    tagInfoProvider=Html4TagProvider.INSTANCE;  } else {    tagInfoProvider=Html5TagProvider.INSTANCE;  }  htmlModificationListeners=new ArrayList<HtmlModificationListener>();  omitCdataOutsideScriptAndStyle=false;  trimAttributeValues=true;}  }
class C{  public void syncBeginTagFile(){  saveNestedVariables();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  protected void sequence_FunctionTypeExpressionOLD_PrimaryTypeExpression_TAnonymousFormalParameterList_TypeRefWithModifiers(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private static void addInitiator(Map<String,Initiator> initiatorMap,Map<String,Set<String>> directorToInitiators,Map<String,URI> initiatorIdToNetwork,String director,String wwn,String net){  Initiator initiator=new Initiator();  initiator.setId(URI.create(director + "-" + wwn));  initiator.setLabel(director + "-" + wwn);  initiator.setInitiatorPort(wwn);  initiatorMap.put(initiator.getId().toString(),initiator);  if (directorToInitiators.get(director) == null) {    directorToInitiators.put(director,new HashSet<String>());  }  URI netURI=URI.create(net);  directorToInitiators.get(director).add(initiator.getId().toString());  initiatorIdToNetwork.put(initiator.getId().toString(),netURI);}  }
class C{  private void paintLinearGraph(){  int loopX=loopToX(loops[idxMin]);  int valueY=valueToY(values[idxMin]);  for (int i=idxMin; i < idxMax; i++) {    final int nextLoopX=loopToX(loops[i + 1]);    final int nextValueY=valueToY(values[i + 1]);    g.drawLine(loopX,valueY,nextLoopX,nextValueY);    loopX=nextLoopX;    valueY=nextValueY;  }}  }
class C{  private int findWindowHandle(Shell shell){  try {    Field handleField=shell.getClass().getField("handle");    Object handle=handleField.get(shell);    if (handle instanceof Integer) {      return ((Integer)handle).intValue();    }  } catch (  Exception e) {  }  return 0;}  }
class C{  public void makeImmutable(){  if (!isImmutable) {    overflowEntries=overflowEntries.isEmpty() ? Collections.<K,V>emptyMap() : Collections.unmodifiableMap(overflowEntries);    isImmutable=true;  }}  }
class C{  private static String printClusterings(Clusterer clusterer,String trainFileName,String testFileName,Range attributesToOutput) throws Exception {  StringBuffer text=new StringBuffer();  int i=0;  int cnum;  DataSource source=null;  Instance inst;  Instances structure;  if (testFileName.length() != 0) {    source=new DataSource(testFileName);  } else {    source=new DataSource(trainFileName);  }  structure=source.getStructure();  while (source.hasMoreElements(structure)) {    inst=source.nextElement(structure);    try {      cnum=clusterer.clusterInstance(inst);      text.append(i + " " + cnum+ " "+ attributeValuesString(inst,attributesToOutput)+ "\n");    } catch (    Exception e) {      text.append(i + " Unclustered " + attributeValuesString(inst,attributesToOutput)+ "\n");    }    i++;  }  return text.toString();}  }
class C{  public void close(){  if (writer != null && count > 0) {    flush();  }  if (buf.length <= 1024 * 8) {    bufLocal.set(new SoftReference<char[]>(buf));  }  this.buf=null;}  }
class C{  public double[] computeLocalOfPreviousObservations() throws Exception {  return computeLocalUsingPreviousObservations(null,null,true);}  }
class C{  public TextClassificationSequence_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_id=jcas.getRequiredFeatureDE(casType,"id","uima.cas.Integer",featOkTst);  casFeatCode_id=(null == casFeat_id) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_id).getCode();}  }
class C{  public void sendXNetMessage(XNetMessage m,XNetListener reply){  if (m.length() != 0) {    sendMessage(m,reply);    java.lang.Thread.yield();  }}  }
class C{  public S2Point vertex(int i){  try {    return vertices[i >= vertices.length ? i - vertices.length : i];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalStateException("Invalid vertex index");  }}  }
class C{  public void stop(){  ActivityManager.stopThread();}  }
class C{  public TimeZone read(String zone){  return TimeZone.getTimeZone(zone);}  }
class C{  protected ClassifierSplitModel localModel(){  return m_localModel;}  }
class C{  public static byte[] gzip(final String input){  final ByteArrayOutputStream baos=new FastByteArrayOutputStream();  GZIPOutputStream gzos=null;  try {    gzos=new GZIPOutputStream(baos);    gzos.write(input.getBytes("UTF-8"));  } catch (  final IOException e) {    MainUtil.handleError(e);  } finally {    if (gzos != null) {      try {        gzos.close();      } catch (      final IOException ignore) {      }    }  }  return baos.toByteArray();}  }
class C{  protected void cleanUp(){  origin=null;  intermediateDest=null;  destination=null;}  }
class C{  @Override public void run(){  if (!SwitchAccessPreferenceActivity.isAutoScanEnabled(mContext)) {    stopScan();    return;  }  if (mIsScanInProgress) {    if (mReverseScan) {      mOptionManager.moveToParent(true);    } else {      mOptionManager.selectOption(OptionManager.OPTION_INDEX_NEXT);    }    if (mIsScanInProgress) {      mHandler.postDelayed(mAutoScanRunnable,getAutoScanDelay());    }  }}  }
class C{  public DropTarget(Component c,int ops,DropTargetListener dtl,boolean act) throws HeadlessException {  this(c,ops,dtl,act,null);}  }
class C{  private void calculateGridSizes(float numbersRadius,float xCenter,float yCenter,float textSize,float[] textGridHeights,float[] textGridWidths){  float offset1=numbersRadius;  float offset2=numbersRadius * ((float)Math.sqrt(3)) / 2f;  float offset3=numbersRadius / 2f;  mPaint.setTextSize(textSize);  mSelectedPaint.setTextSize(textSize);  yCenter-=(mPaint.descent() + mPaint.ascent()) / 2;  textGridHeights[0]=yCenter - offset1;  textGridWidths[0]=xCenter - offset1;  textGridHeights[1]=yCenter - offset2;  textGridWidths[1]=xCenter - offset2;  textGridHeights[2]=yCenter - offset3;  textGridWidths[2]=xCenter - offset3;  textGridHeights[3]=yCenter;  textGridWidths[3]=xCenter;  textGridHeights[4]=yCenter + offset3;  textGridWidths[4]=xCenter + offset3;  textGridHeights[5]=yCenter + offset2;  textGridWidths[5]=xCenter + offset2;  textGridHeights[6]=yCenter + offset1;  textGridWidths[6]=xCenter + offset1;}  }
class C{  private void login(XMLRPCCallback callback){  try {    XMLRPCClient client=new XMLRPCClient(new URL(mApiUrl.replace("http://","https://")),mUserAgent);    client.callAsync(callback,"LogIn","","","en",mUserAgent);  } catch (  MalformedURLException e) {    e.printStackTrace();  }}  }
class C{  @Override public PLRange clone(){  return new PLRange(min,max);}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.500 -0400",hash_original_method="9212C488AEDF56E62CAE314A88D3084B",hash_generated_method="6DEEF8A07D7BEB51320645C091091EC2") public int compare(File file1,File file2){  String suffix1=FilenameUtils.getExtension(file1.getName());  String suffix2=FilenameUtils.getExtension(file2.getName());  return caseSensitivity.checkCompareTo(suffix1,suffix2);}  }
class C{  public CCachedTextCriterium(final String text,final boolean regularExpression,final boolean caseSensitive){  m_text=text;  m_regularExpression=regularExpression;  m_caseSensitive=caseSensitive;}  }
class C{  public synchronized void printProcessStandartOutput(PrintStream printTo){  if (stdout != null && stdout.length() > 0) {    printTo.println("========= Child VM System.out ========");    printTo.print(stdout);    printTo.println("======================================");  }}  }
class C{  public boolean complete(){  return data.complete();}  }
class C{  public final AlertDialog initiateScan(){  return initiateScan(ALL_CODE_TYPES,-1);}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public static void process(ASTOperationContainer qc,String externalBaseURI) throws MalformedQueryException {  ParsedURI parsedBaseURI=null;  ASTBaseDecl baseDecl=qc.getBaseDecl();  if (baseDecl != null) {    parsedBaseURI=new ParsedURI(baseDecl.getIRI());    if (!parsedBaseURI.isAbsolute()) {      throw new MalformedQueryException("BASE IRI is not an absolute IRI: " + externalBaseURI);    }  } else   if (externalBaseURI != null) {    parsedBaseURI=new ParsedURI(externalBaseURI);    if (!parsedBaseURI.isAbsolute()) {      throw new IllegalArgumentException("Supplied base URI is not an absolute IRI: " + externalBaseURI);    }  } else {  }  if (parsedBaseURI != null) {    ASTUnparsedQuadDataBlock dataBlock=null;    if (qc.getOperation() instanceof ASTInsertData) {      ASTInsertData insertData=(ASTInsertData)qc.getOperation();      dataBlock=insertData.jjtGetChild(ASTUnparsedQuadDataBlock.class);    } else     if (qc.getOperation() instanceof ASTDeleteData) {      ASTDeleteData deleteData=(ASTDeleteData)qc.getOperation();      dataBlock=deleteData.jjtGetChild(ASTUnparsedQuadDataBlock.class);    }    if (dataBlock != null) {      final String baseURIDeclaration="BASE <" + parsedBaseURI + "> \n";      dataBlock.setDataBlock(baseURIDeclaration + dataBlock.getDataBlock());    } else {      RelativeIRIResolver visitor=new RelativeIRIResolver(parsedBaseURI);      try {        qc.jjtAccept(visitor,null);      } catch (      VisitorException e) {        throw new MalformedQueryException(e);      }    }  }}  }
class C{  public SimpleHttpRequestBuilder content(byte[] bytes){  this.content=bytes;  return this;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public LambdaConverter(final Mapper mapper,final ReflectionProvider reflectionProvider,final ClassLoaderReference classLoaderReference){  super(mapper,reflectionProvider,classLoaderReference);}  }
class C{  public void readExif(String inFileName) throws FileNotFoundException, IOException {  if (inFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=(InputStream)new BufferedInputStream(new FileInputStream(inFileName));    readExif(is);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  public ParsableBitArray(byte[] data){  this(data,data.length);}  }
class C{  private void srcFromToken(SLStatementNode node,Token token){  node.setSourceSection(source.createSection(token.val,token.charPos,token.val.length()));}  }
class C{  public String displayNodeWithInstrumentation(Node node){  if (node == null) {    return "null";  }  final StringBuilder sb=new StringBuilder();  sb.append(displayNodeName(node));  sb.append("(");  sb.append(displayTags(node));  if (node.getParent() instanceof WrapperNode) {    sb.append(",Probed");  }  sb.append(") ");  sb.append(displaySourceInfo(node));  return sb.toString();}  }
class C{  public boolean onItemUse(ItemStack itemstack,EntityPlayer player,World world,int x,int y,int z,int meta,float hitPosX,float hitPosY,float hitPosZ){  if (meta != 1) {    return false;  } else {    ++y;    Block block;    block=AdvancedRocketryBlocks.blockAirLock;    if (player.canPlayerEdit(x,y,z,meta,itemstack) && player.canPlayerEdit(x,y + 1,z,meta,itemstack)) {      if (!block.canPlaceBlockAt(world,x,y,z)) {        return false;      } else {        int i1=MathHelper.floor_double((double)((player.rotationYaw + 180.0F) * 4.0F / 360.0F) - 0.5D) & 3;        placeDoorBlock(world,x,y,z,i1,block);        --itemstack.stackSize;        return true;      }    } else {      return false;    }  }}  }
class C{  public UpdateSketchBuilder initMemory(Memory dstMem){  bDstMem=dstMem;  return this;}  }
class C{  public void offset(final double offsetX,final double offsetY){  for (  Neuron neuron : neuronList) {    neuron.setX(neuron.getX() + offsetX);    neuron.setY(neuron.getY() + offsetY);  }}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public String seedTipText(){  return "Random seed for sampling instances.";}  }
class C{  public boolean isStateActive(State state){switch (state) {case region_1_Idle:    return stateVector[0] == State.region_1_Idle;case region_1_Number1Pressed:  return stateVector[0] == State.region_1_Number1Pressed;case region_1_Number2Pressed:return stateVector[0] == State.region_1_Number2Pressed;case region_1_Number3Pressed:return stateVector[0] == State.region_1_Number3Pressed;case _region1_Closed:return stateVector[1] == State._region1_Closed;case _region1_Open:return stateVector[1] == State._region1_Open;default :return false;}}  }
class C{  public void remove(Integer... tab){  int tabIndex=0;  if (tab.length > 0) {    tabIndex=tab[0].intValue();  }  Vector<BeanConnection> connections=TABBED_CONNECTIONS.get(tabIndex);  EventSetDescriptor tempEsd=getSourceEventSetDescriptor();  try {    Method deregisterMethod=tempEsd.getRemoveListenerMethod();    Object targetBean=getTarget().getBean();    Object[] args=new Object[1];    args[0]=targetBean;    deregisterMethod.invoke(getSource().getBean(),args);  } catch (  Exception ex) {    ex.printStackTrace();  }  if (getTarget().getBean() instanceof BeanCommon) {    ((BeanCommon)getTarget().getBean()).disconnectionNotification(tempEsd.getName(),getSource().getBean());  }  connections.remove(this);}  }
class C{  public void call(final String methodName,final Object[] params,final ResultListener listener){  callWithSeed(methodName,null,params,listener);}  }
class C{  public Reporter reporter(){  return this.reporter;}  }
class C{  default Traversable<T> intersperse(final T value){  return traversable().intersperse(value);}  }
class C{  public boolean fixUtils(String[] utils) throws Exception {  for (  String util : utils) {    if (!checkUtil(util)) {      if (checkUtil("busybox")) {        if (hasUtil(util,"busybox")) {          fixUtil(util,RootTools.utilPath);        }      } else {        if (checkUtil("toolbox")) {          if (hasUtil(util,"toolbox")) {            fixUtil(util,RootTools.utilPath);          }        } else {          return false;        }      }    }  }  return true;}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  if (entityResolver != null) {    return entityResolver.resolveEntity(publicId,systemId);  } else {    return null;  }}  }
class C{  public static void checkPermissions(IUser user,IChannel channel,List<IRole> roles,EnumSet<Permissions> required) throws MissingPermissionsException {  try {    if (!isUserHigher(channel.getGuild(),user,roles))     throw new MissingPermissionsException("Edited roles hierarchy is too high.");    checkPermissions(user,channel,required);  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public Match(@NonNull MatchThread matchThread,@NonNull UUID uuid,@NonNull LoadedMap map,@NonNull World world){  this.matchThread=matchThread;  this.uuid=uuid;  this.map=map;  this.world=world;  players=Sets.newHashSet();  playerContainers=Sets.newHashSet();  this.matchNumber=matchCounter++;  state=MatchState.WAITING;}  }
class C{  private void onMouseDown(){  panel.setStyleName(toolbarResources.toolbar().popupButtonPanelDown());}  }
class C{  public AsyncResult HistoryReadAsync(HistoryReadRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public KdNode(double _x,double _y,Object data){  p=new Coordinate(_x,_y);  left=null;  right=null;  count=1;  this.data=data;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!MobileEnv.initWeb(config))   throw new ServletException("WFieldUpdate.init");}  }
class C{  public void testPreconditions(){  assertNotNull("mTestActivity is null",mTestActivity);  assertNotNull("mTestFragment is null",mTestFragment);}  }
class C{  public LicenseAction(){  super("License");}  }
class C{  @Override protected void doInitContents(){  ArrayList<Gefaehrdung> arrListAllGefaehrdungen=(ArrayList<Gefaehrdung>)getRiskAnalysisWizard().getAllGefaehrdungen();  viewer.setLabelProvider(new CheckboxTableViewerLabelProvider());  viewer.setContentProvider(new ArrayContentProvider());  viewer.setInput(arrListAllGefaehrdungen);  viewer.setSorter(new GefaehrdungenSorter());  assignBausteinGefaehrdungen();  checkAllSelectedGefaehrdungen();  packAllColumns();  getRiskAnalysisWizard().setCanFinish(false);  checkPageComplete();}  }
class C{  public AnnotationMemberValue(ConstPool cp){  this(null,cp);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetdoctype.class,args);}  }
class C{  public static boolean isInstalling(){  return isInstalling;}  }
class C{  public static <T>SortedSet<T> plus(SortedSet<T> left,Iterable<T> right){  return (SortedSet<T>)plus((Collection<T>)left,asCollection(right));}  }
class C{  public static final Instance meka2mulan(Instance x,int L){  x.setDataset(null);  for (int j=0; j < L; j++) {    x.insertAttributeAt(x.numAttributes());    x.deleteAttributeAt(0);  }  return x;}  }
class C{  public final ArrayList<WifiRecord> loadWifisOverviewWithin(final int session,final Double minLon,final Double maxLon,final Double minLat,final Double maxLat){  final ArrayList<WifiRecord> wifis=new ArrayList<>();  String selection=null;  String[] selectionArgs=null;  if (minLon != null && maxLon != null && minLat != null && maxLat != null) {    selection="b." + Schema.COL_LONGITUDE + " >= ?"+ " AND b."+ Schema.COL_LONGITUDE+ " <= ?"+ " AND b."+ Schema.COL_LATITUDE+ " >= ?"+ " AND b."+ Schema.COL_LATITUDE+ " <= ?";    selectionArgs=new String[]{String.valueOf(minLon),String.valueOf(maxLon),String.valueOf(minLat),String.valueOf(maxLat)};  }  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(Uri.withAppendedPath(ContentProvider.CONTENT_URI_WIFI,ContentProvider.CONTENT_URI_OVERVIEW_SUFFIX),session),null,selection,selectionArgs,null);  final int columnIndex=cursor.getColumnIndex(Schema.COL_BSSID);  final int columnIndex2=cursor.getColumnIndex(Schema.COL_SSID);  final int columnIndex3=cursor.getColumnIndex(Schema.COL_CAPABILITIES);  final int columnIndex4=cursor.getColumnIndex(Schema.COL_FREQUENCY);  final int columnIndex5=cursor.getColumnIndex(Schema.COL_MAX_LEVEL);  final int columnIndex6=cursor.getColumnIndex(Schema.COL_TIMESTAMP);  final int columnIndex7=cursor.getColumnIndex(Schema.COL_BEGIN_POSITION_ID);  final int columnIndex8=cursor.getColumnIndex(Schema.COL_END_POSITION_ID);  final int columnIndex9=cursor.getColumnIndex(Schema.COL_KNOWN_WIFI);  while (cursor.moveToNext()) {    final WifiRecord wifi=new WifiRecord();    wifi.setBssid(cursor.getString(columnIndex));    wifi.setSsid(cursor.getString(columnIndex2));    wifi.setCapabilities(cursor.getString(columnIndex3));    wifi.setFrequency(cursor.getInt(columnIndex4));    wifi.setLevel(cursor.getInt(columnIndex5));    wifi.setOpenBmapTimestamp(cursor.getLong(columnIndex6));    wifi.setBeginPosition(loadPositionById(cursor.getString(columnIndex7)));    wifi.setEndPosition(loadPositionById(cursor.getString(columnIndex8)));    wifi.setCatalogStatus(CatalogStatus.values()[cursor.getInt(columnIndex9)]);    wifis.add(wifi);  }  cursor.close();  return wifis;}  }
class C{  @Override public int intValue(){  return value;}  }
class C{  public void unregisterTopic(JetstreamTopic topic){  Object contextList[]=topic.getContexts();  Object arr$[]=contextList;  int len$=arr$.length;  for (int i=0; i < contextList.length; i++) {    Object context=contextList[i];    String path=(String)context;    try {      m_group.leave(prependPath(path));    } catch (    Exception e) {      LOGGER.error(" Exception on leaving group :" + path,e);    }  }}  }
class C{  private String write(Object value,int length) throws Exception {  String[] list=new String[length];  for (int i=0; i < length; i++) {    Object entry=Array.get(value,i);    if (entry != null) {      list[i]=delegate.write(entry);    }  }  return split.write(list);}  }
class C{  public String toString(){  return "java.util.ServiceLoader[" + service.getName() + "]";}  }
class C{  public final int whichSubset(Instance instance){  return 0;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public Code39Reader(boolean usingCheckDigit,boolean extendedMode){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=extendedMode;  decodeRowResult=new StringBuilder(20);  counters=new int[9];}  }
class C{  protected long unwrapKey(Object key){  return ((Long)key).longValue();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:06.959 -0500",hash_original_method="F2BDC8EF225CC7A51A21F48B4E490296",hash_generated_method="75E24165127208B8AF8739F55AB06C6E") public static List<ComprehensionTlv> decodeMany(byte[] data,int startIndex) throws ResultException {  ArrayList<ComprehensionTlv> items=new ArrayList<ComprehensionTlv>();  int endIndex=data.length;  while (startIndex < endIndex) {    ComprehensionTlv ctlv=ComprehensionTlv.decode(data,startIndex);    if (ctlv != null) {      items.add(ctlv);      startIndex=ctlv.mValueIndex + ctlv.mLength;    } else {      CatLog.d(LOG_TAG,"decodeMany: ctlv is null, stop decoding");      items.clear();      break;    }  }  return items;}  }
class C{  private static ClassNode[] parseOption(final String option,final SourceUnit sourceUnit,final CompilationUnit compilationUnit,final MethodNode mn,final ASTNode usage){  return GenericsUtils.parseClassNodesFromString(option,sourceUnit,compilationUnit,mn,usage);}  }
class C{  public void generateAndUploadSSHKey(@NotNull AsyncRequestCallback<Void> callback) throws IllegalArgumentException {  checkArgument(callback != null,"callback");  final String requestUrl=getBaseUrl() + SSH_KEYS;  asyncRequestFactory.createPostRequest(requestUrl,null).loader(loaderFactory.newLoader()).send(callback);}  }
class C{  public static void initialize(BinderManager binderManager){  binderManager.register(new BindLayoutBinder());  binderManager.register(new BindViewBinder());  binderManager.register(new BindFragmentBinder());  binderManager.register(new BindClickBinder());  binderManager.register(new BindResourceBinder());  ViewResolverManager.shared().addViewResolver(new DefaultViewResolver());  ContextResolverManager.shared().addContextResolver(new DefaultContextResolver());  FragmentResolverManager.shared().addFragmentResolver(new DefaultFragmentResolver());  tryInitializeSupportBindings();}  }
class C{  public static void ensure32BitIe(){  File ie32=new File(IE32_LOCATION);  if (findBrowser(IE32_NAME) == null && ie32.exists()) {    createBrowserDescriptor(IE32_NAME,IE32_LOCATION);  }}  }
class C{  public OneSheeldDevice(String address,String name){  checkBluetoothAddress(address);  this.name=name;  this.address=address;  this.isPaired=false;  this.isTypePlus=false;  initialize();}  }
class C{  public List<ErrorLogger.ErrorObject> build() throws IOException {  org.smpte_ra.schemas.st0429_9_2007.AM.AssetMapType assetMapType=IMFAssetMapObjectFieldsFactory.constructAssetMapType_2007();  assetMapType.setId(UUIDHelper.fromUUID(this.uuid));  assetMapType.setAnnotationText(this.annotationText);  assetMapType.setCreator(this.creator);  assetMapType.setVolumeCount(new BigInteger("1"));  assetMapType.setIssueDate(this.issueDate);  assetMapType.setIssuer(this.issuer);  org.smpte_ra.schemas.st0429_9_2007.AM.AssetMapType.AssetList assetList=new org.smpte_ra.schemas.st0429_9_2007.AM.AssetMapType.AssetList();  List<org.smpte_ra.schemas.st0429_9_2007.AM.AssetType> assetMapTypeAssets=assetList.getAsset();  for (  AssetMapBuilder.Asset assetMapBuilderAsset : this.assets) {    org.smpte_ra.schemas.st0429_9_2007.AM.AssetType assetType=new AssetType();    assetType.setId(assetMapBuilderAsset.uuid);    assetType.setPackingList(assetMapBuilderAsset.packingList);    org.smpte_ra.schemas.st0429_9_2007.AM.AssetType.ChunkList chunkList=new org.smpte_ra.schemas.st0429_9_2007.AM.AssetType.ChunkList();    assetType.setChunkList(chunkList);    List<org.smpte_ra.schemas.st0429_9_2007.AM.ChunkType> chunkTypes=chunkList.getChunk();    List<AssetMapBuilder.Chunk> chunks=assetMapBuilderAsset.getChunks();    for (    Chunk chunk : chunks) {      org.smpte_ra.schemas.st0429_9_2007.AM.ChunkType assetMapAssetChunk=new org.smpte_ra.schemas.st0429_9_2007.AM.ChunkType();      assetMapAssetChunk.setPath(chunk.getPath());      assetMapAssetChunk.setVolumeIndex(chunk.getVolumeIndex());      assetMapAssetChunk.setOffset(chunk.getOffset());      assetMapAssetChunk.setLength(chunk.getLength());      chunkTypes.add(assetMapAssetChunk);    }    assetMapTypeAssets.add(assetType);  }  assetMapType.setAssetList(assetList);  File outputFile=new File(this.workingDirectory + File.separator + this.assetMapFileName);  List<ErrorLogger.ErrorObject> errors=serializeAssetMapToXML(assetMapType,outputFile,true);  this.imfErrorLogger.addAllErrors(errors);  return imfErrorLogger.getErrors();}  }
class C{  public static String leakInfo(Context context,HeapDump heapDump,AnalysisResult result){  PackageManager packageManager=context.getPackageManager();  String packageName=context.getPackageName();  PackageInfo packageInfo;  try {    packageInfo=packageManager.getPackageInfo(packageName,0);  } catch (  PackageManager.NameNotFoundException e) {    throw new RuntimeException(e);  }  String versionName=packageInfo.versionName;  int versionCode=packageInfo.versionCode;  String info="In " + packageName + ":"+ versionName+ ":"+ versionCode+ ".\n";  if (result.leakFound) {    if (result.excludedLeak) {      info+="* LEAK CAN BE IGNORED.\n";    }    info+="* " + result.className;    if (!heapDump.referenceName.equals("")) {      info+=" (" + heapDump.referenceName + ")";    }    info+=" has leaked:\n" + result.leakTrace.toString() + "\n";  } else   if (result.failure != null) {    info+="* FAILURE:\n" + Log.getStackTraceString(result.failure) + "\n";  } else {    info+="* NO LEAK FOUND.\n\n";  }  info+="* Reference Key: " + heapDump.referenceKey + "\n"+ "* Device: "+ Build.MANUFACTURER+ " "+ Build.BRAND+ " "+ Build.MODEL+ " "+ Build.PRODUCT+ "\n"+ "* Android Version: "+ Build.VERSION.RELEASE+ " API: "+ Build.VERSION.SDK_INT+ " LeakCanary: "+ "\n"+ "* Durations: watch="+ heapDump.watchDurationMs+ "ms, gc="+ heapDump.gcDurationMs+ "ms, heap dump="+ heapDump.heapDumpDurationMs+ "ms, analysis="+ result.analysisDurationMs+ "ms"+ "\n";  return info;}  }
class C{  private boolean isBottomTop(){  return (m_from.y + m_from.height <= m_to.y);}  }
class C{  public void stepRight(boolean shiftDown){  if (shiftDown)   viewpointNode.drag(1,0); else   viewpointNode.rotate(0,-1);}  }
class C{  public void addObjectToSelection(MathObject newObj){  if (focusedObj == null) {    setFocusedObject(newObj);    return;  }  if (focusedObj.getParentPage() != newObj.getParentPage()) {    setFocusedObject(newObj);    return;  }  if (!(focusedObj instanceof Grouping)) {    resetAndRemoveTempGroup();    focusedObj.getParentContainer().addObject(tempGroup);    tempGroup.addObjectFromPage(focusedObj);    tempGroup.addObjectFromPage(newObj);    setFocusedObject(tempGroup);    repaintDoc();  }}  }
class C{  private void register() throws ServerUnavailableException, RegistrationException, StorageException {  try {    AgentConfig agentConfiguration=connection.register(configurationStorage.getAgentName(),versionService.getVersionAsString());    platformId=agentConfiguration.getPlatformId();    configurationStorage.setAgentConfiguration(agentConfiguration);    if (log.isDebugEnabled()) {      log.debug("Received platform ID: " + platformId);    }  } catch (  BusinessException exception) {    log.error("The agent was not able to get configuration from the server. " + exception.getMessage());    throw new BeanInitializationException("The agent was not able to get configuration from the server.",exception);  }}  }
class C{  public Base64OutputStream(OutputStream outputStream,int wrapAt){  this.outputStream=outputStream;  this.linelength=wrapAt;}  }
class C{  public void addFile(final File file){  m_listModel.add(file);}  }
class C{  public void toBack(final WorkflowAnnotation anno){  if (anno == null) {    throw new IllegalArgumentException("anno must not be null!");  }synchronized (lock) {    if (annotationsDrawOrder.remove(anno)) {      annotationsDrawOrder.add(0,anno);    }    if (annotationsEventOrder.remove(anno)) {      annotationsEventOrder.add(annotationsEventOrder.size(),anno);    }  }}  }
class C{  public void testReset(){  DoubleBuffer buffer=new DoubleBuffer(10);  for (int i=0; i < 100; i++) {    buffer.setNext(i);  }  assertTrue(buffer.isFull());  buffer.reset();  assertFalse(buffer.isFull());  assertEquals(0.0,buffer.getAverage());  double[] averageAndVariance=buffer.getAverageAndVariance();  assertEquals(0.0,averageAndVariance[0]);  assertEquals(0.0,averageAndVariance[1]);}  }
class C{  public SHAvite224(){  super();}  }
class C{  public static int execute(ExecutablePool pool,EnumInfo ei){  AbstractOp op=new GetPDXIdForEnumOpImpl(ei);  return ((Integer)pool.execute(op)).intValue();}  }
class C{  public CertificateVersion(DerInputStream in) throws IOException {  version=V1;  DerValue derVal=in.getDerValue();  construct(derVal);}  }
class C{  public FilterEditorsComboBoxModel(){  super();  selection=FilterEditors.VALUES.get(0);}  }
class C{  public int toY(int v){  return v / N + 1;}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","Y");  panel=new VGenPanel(this,WindowNo,frame);  try {    super.dynInit();    dynInit();    jbInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"init",ex);  }}  }
class C{  public void removeMovieSet(MovieSet movieSet){  int oldValue=movieSetList.size();  movieSet.removeAllMovies();  try {    movieSetList.remove(movieSet);    MovieModuleManager.getInstance().removeMovieSetFromDb(movieSet);  } catch (  Exception e) {    LOGGER.error("Error removing movie set from DB: " + e.getMessage());  }  firePropertyChange("removedMovieSet",null,movieSet);  firePropertyChange("movieSetCount",oldValue,movieSetList.size());}  }
class C{  public ModifyMonitoredItemsResponse ModifyMonitoredItems(ModifyMonitoredItemsRequest req) throws ServiceFaultException, ServiceResultException {  return (ModifyMonitoredItemsResponse)channel.serviceRequest(req);}  }
class C{  protected boolean switchProfiles(IProfile newSelection){  if (newSelection == null) {    return false;  }  if (mCurrentProfile == newSelection) {    return true;  }  if (mAlternativeProfileHeaderSwitching) {    int prevSelection=-1;    if (mProfileFirst == newSelection) {      prevSelection=1;    } else     if (mProfileSecond == newSelection) {      prevSelection=2;    } else     if (mProfileThird == newSelection) {      prevSelection=3;    }    IProfile tmp=mCurrentProfile;    mCurrentProfile=newSelection;    if (prevSelection == 1) {      mProfileFirst=tmp;    } else     if (prevSelection == 2) {      mProfileSecond=tmp;    } else     if (prevSelection == 3) {      mProfileThird=tmp;    }  } else {    if (mProfiles != null) {      ArrayList<IProfile> previousActiveProfiles=new ArrayList<>(Arrays.asList(mCurrentProfile,mProfileFirst,mProfileSecond,mProfileThird));      if (previousActiveProfiles.contains(newSelection)) {        int position=-1;        for (int i=0; i < 4; i++) {          if (previousActiveProfiles.get(i) == newSelection) {            position=i;            break;          }        }        if (position != -1) {          previousActiveProfiles.remove(position);          previousActiveProfiles.add(0,newSelection);          mCurrentProfile=previousActiveProfiles.get(0);          mProfileFirst=previousActiveProfiles.get(1);          mProfileSecond=previousActiveProfiles.get(2);          mProfileThird=previousActiveProfiles.get(3);        }      } else {        mProfileThird=mProfileSecond;        mProfileSecond=mProfileFirst;        mProfileFirst=mCurrentProfile;        mCurrentProfile=newSelection;      }    }  }  if (mOnlySmallProfileImagesVisible) {    mProfileThird=mProfileSecond;    mProfileSecond=mProfileFirst;    mProfileFirst=mCurrentProfile;    mCurrentProfile=mProfileThird;  }  buildProfiles();  return false;}  }
class C{  public void readGeneralizedTime() throws IOException {  if (tag == ASN1Constants.TAG_GENERALIZEDTIME) {    readContent();    if (buffer[offset - 1] != 'Z') {      throw new ASN1Exception("ASN.1 GeneralizedTime: encoded format is not implemented");    }    if (length != 15 && (length < 17 || length > 19)) {      throw new ASN1Exception("ASN.1 GeneralizedTime wrongly encoded at [" + contentOffset + "]");    }    if (length > 16) {      byte char14=buffer[contentOffset + 14];      if (char14 != '.' && char14 != ',') {        throw new ASN1Exception("ASN.1 GeneralizedTime wrongly encoded at [" + contentOffset + "]");      }    }    if (times == null) {      times=new int[7];    }    times[0]=strToInt(contentOffset,4);    times[1]=strToInt(contentOffset + 4,2);    times[2]=strToInt(contentOffset + 6,2);    times[3]=strToInt(contentOffset + 8,2);    times[4]=strToInt(contentOffset + 10,2);    times[5]=strToInt(contentOffset + 12,2);    if (length > 16) {      times[6]=strToInt(contentOffset + 15,length - 16);      if (length == 17) {        times[6]=times[6] * 100;      } else       if (length == 18) {        times[6]=times[6] * 10;      }    }  } else   if (tag == ASN1Constants.TAG_C_GENERALIZEDTIME) {    throw new ASN1Exception("Decoding constructed ASN.1 GeneralizedTime type is not supported");  } else {    throw expected("GeneralizedTime");  }}  }
class C{  public static Function abs(Object column){  return new Function(format("abs(%s)",column));}  }
class C{  public void addXPathProperty(String name,String xpath,QName type){  XPathPropertyDesc desc=new XPathPropertyDesc(name,xpath,type);  xPathProperties.put(name,desc);}  }
class C{  public void addMicroserviceMetadata(final Object service,String basePath){  for (  Method method : service.getClass().getMethods()) {    if (method.isAnnotationPresent(PostConstruct.class) || method.isAnnotationPresent(PreDestroy.class)) {      continue;    }    if (Modifier.isPublic(method.getModifiers()) && isHttpMethodAvailable(method)) {      String relativePath="";      if (method.getAnnotation(Path.class) != null) {        relativePath=method.getAnnotation(Path.class).value();      }      String absolutePath=String.format("%s/%s",basePath,relativePath);      patternRouter.add(absolutePath,new HttpResourceModel(absolutePath,method,service,false));    } else {      log.trace("Not adding method {}({}) to path routing like. " + "HTTP calls will not be routed to this method",method.getName(),method.getParameterTypes());    }  }}  }
class C{  protected void startFontTag(String style) throws IOException {  boolean callIndent=false;  if (inFontTag()) {    endFontTag();    callIndent=true;  }  writeStartTag("<font style=\"" + style + "\">");  if (callIndent) {    indent();  }}  }
class C{  public boolean isCompileOnly(){  return compileOnly;}  }
class C{  public void removeGeneratedFiles(){  try {    String classFileName=ctxt.getClassFileName();    if (classFileName != null) {      File classFile=new File(classFileName);      if (log.isLoggable(Level.FINE))       log.fine("Deleting " + classFile);      classFile.delete();    }  } catch (  Exception e) {  }  try {    String javaFileName=ctxt.getServletJavaFileName();    if (javaFileName != null) {      File javaFile=new File(javaFileName);      if (log.isLoggable(Level.FINE))       log.fine("Deleting " + javaFile);      javaFile.delete();    }  } catch (  Exception e) {  }}  }
class C{  private void addGeofencesInternal(){  Log.v(TAG,ACTION_ADD_GEOFENCES);  if (!Utils.checkFineLocationPermission(this)) {    return;  }  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(LocationServices.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    PendingIntent pendingIntent=PendingIntent.getBroadcast(this,0,new Intent(this,UtilityReceiver.class),0);    GeofencingApi.addGeofences(googleApiClient,TouristAttractions.getGeofenceList(),pendingIntent);    googleApiClient.disconnect();  } else {    Log.e(TAG,String.format(Constants.GOOGLE_API_CLIENT_ERROR_MSG,connectionResult.getErrorCode()));  }}  }
class C{  public void clear(int capacity){  _data=new double[capacity];  _pos=0;}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public String parse(String helpCommandFirstLine) throws UnhandledMameVersionPatternException {  Pattern p=Pattern.compile("^.*v([0-9]+)\\.([0-9]+).*$");  Matcher m=p.matcher(helpCommandFirstLine);  if (!m.matches()) {    throw new UnhandledMameVersionPatternException("Can't parse version from string: \"" + helpCommandFirstLine + "\"");  }  return m.group(1) + "." + m.group(2);}  }
class C{  public Symbol(Object value){  this.value=value;}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  public ColumnAttribute(final int index){  this.index=index;}  }
class C{  public static final byte composeSmscDeliveryReceipt(byte esmClass){  return composeMessageType(esmClass,SMPPConstant.ESMCLS_SMSC_DELIV_RECEIPT);}  }
class C{  public List<FunctionArgumentSignature> createDefaultArgumentSignature(Parameter parameter){  List<FunctionArgumentSignature> list=new LinkedList<>();  String name=getParameterName(parameter);  Object defaultValue=getDefaultValue(parameter);  list.add(new FunctionArgumentSignature(name,defaultValue));  return list;}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public ValidationFactoryImpl(){  super();}  }
class C{  @Override public void receiveDetections(Detector.Detections<TextBlock> detections){  mGraphicOverlay.clear();  SparseArray<TextBlock> items=detections.getDetectedItems();  for (int i=0; i < items.size(); ++i) {    TextBlock item=items.valueAt(i);    if (item != null && item.getValue() != null) {      Log.d("OcrDetectorProcessor","Text detected! " + item.getValue());    }    OcrGraphic graphic=new OcrGraphic(mGraphicOverlay,item);    mGraphicOverlay.add(graphic);  }}  }
class C{  public TestRunner(PrintStream writer){  this(new ResultPrinter(writer));}  }
class C{  public void toggleLabelDisplay(String field){  Boolean display=fState.labelDisplayMap.get(field);  if (display != null)   fState.labelDisplayMap.put(field,!display.booleanValue());}  }
class C{  public void incFunctionExecutionsRunning(){  this._stats.incInt(_functionExecutionsRunningId,1);}  }
class C{  public OMPoint(double lat,double lon,int offsetx,int offsety){  this(lat,lon,offsetx,offsety,DEFAULT_RADIUS);}  }
class C{  protected void verifyBeaHome(){  List<String> requiredDirs=this.getBeaHomeDirs();  List<String> requiredFiles=this.getBeaHomeFiles();  String errorPrefix="Invalid WebLogic installation. ";  String errorSuffix="Make sure the BEA_HOME directory you have specified points to the " + "correct location (it is currently pointing to [" + getBeaHome() + "])";  verify(errorPrefix,errorSuffix,requiredDirs,requiredFiles);}  }
class C{  public boolean isEmpty(){  return this.root == null;}  }
class C{  @Override public void PV(final PdfObject pdfObject,final int type){  if (showMethods) {    System.out.println("DefaultActionHandler.PV()");  }  final FormObject pageDictionary=(FormObject)pdfObject.getDictionary(type);  currentPdfFile.checkResolved(pageDictionary);  if (pageDictionary != null) {    final FormObject PVdictionary=(FormObject)pageDictionary.getDictionary(PdfDictionary.PV);    currentPdfFile.checkResolved(PVdictionary);    if (PVdictionary != null) {      final String jsCode=PVdictionary.getTextStreamValue(PdfDictionary.JS);      javascript.executeAction(jsCode);    }  }}  }
class C{  public HeavyWeightWindow(Window parent){  super(parent);  setFocusableWindowState(false);  setName("###overrideRedirect###");  try {    setAlwaysOnTop(true);  } catch (  SecurityException se) {  }}  }
class C{  private ProjectedEnergy projectedEnergy(Relation<V> relation,ORCLUSCluster c_i,ORCLUSCluster c_j,int i,int j,int dim){  NumberVectorDistanceFunction<? super V> distFunc=SquaredEuclideanDistanceFunction.STATIC;  ORCLUSCluster c_ij=union(relation,c_i,c_j,dim);  double sum=0.;  NumberVector c_proj=DoubleVector.wrap(project(c_ij,c_ij.centroid));  for (DBIDIter iter=c_ij.objectIDs.iter(); iter.valid(); iter.advance()) {    NumberVector o_proj=DoubleVector.wrap(project(c_ij,relation.get(iter).toArray()));    sum+=distFunc.distance(o_proj,c_proj);  }  sum/=c_ij.objectIDs.size();  return new ProjectedEnergy(i,j,c_ij,sum);}  }
class C{  private PdfObject readLegacyReferenceTable(PdfObject rootObj,int pointer,final int eof,final PdfFileReader currentPdfFile) throws PdfException {  int endTable, current=0;  byte[] Bytes;  int bufSize=1024;  while (true) {    try {      Bytes=Trailer.readTrailer(bufSize,pointer,eof,pdf_datafile);    } catch (    final Exception e) {      try {        closeFile();      } catch (      final IOException e1) {        LogWriter.writeLog("Exception " + e + " closing file "+ e1);      }      throw new PdfException("Exception " + e + " reading trailer");    }    if (Bytes == null) {      break;    }    int i=0;    final int maxLen=Bytes.length;    boolean trailerNotFound=true;    while (i < maxLen - 7) {      if (Bytes[i] == 116 && Bytes[i + 1] == 114 && Bytes[i + 2] == 97 && Bytes[i + 3] == 105 && Bytes[i + 4] == 108 && Bytes[i + 5] == 101 && Bytes[i + 6] == 114) {        trailerNotFound=false;        break;      }      i++;    }    endTable=i;    if (i == Bytes.length || trailerNotFound) {      break;    }    while (Bytes[i] != 60 && Bytes[i - 1] != 60) {      i++;    }    i++;    final PdfObject pdfObject=new CompressedObject("0 0 R");    Dictionary.readDictionary(pdfObject,i,Bytes,-1,true,currentPdfFile);    int level=0;    while (true) {      if (Bytes[i] == 60 && Bytes[i - 1] == 60) {        level++;        i++;      } else       if (Bytes[i] == '[') {        i++;        while (Bytes[i] != ']') {          i++;          if (i == Bytes.length) {            break;          }        }      } else       if (Bytes[i] == 62 && Bytes[i - 1] == 62) {        level--;        i++;      }      if (level == 0) {        break;      }      i++;    }    final int XRefStm=pdfObject.getInt(PdfDictionary.XRefStm);    if (XRefStm != -1) {      pointer=XRefStm;    } else {      boolean hasRef=true;      i=StreamReaderUtils.skipSpaces(Bytes,i);      while (Bytes[i] == '%') {        while (Bytes[i] != 10) {          i++;        }        i++;      }      while (Bytes[i] != 116 && Bytes[i + 1] != 120 && Bytes[i + 2] != 114 && Bytes[i + 3] != 101 && Bytes[i + 4] != 102) {        if (Bytes[i] == 'o' && Bytes[i + 1] == 'b' && Bytes[i + 2] == 'j') {          hasRef=false;          break;        }        i++;      }      if (hasRef) {        i+=8;        while ((i < maxLen) && (Bytes[i] == 10 || Bytes[i] == 32 || Bytes[i] == 13)) {          i++;        }        final int s=i;        while (i < maxLen && Bytes[i] != 10 && Bytes[i] != 32 && Bytes[i] != 13) {          i++;        }        if (s != i) {          pointer=NumberUtils.parseInt(s,i,Bytes);        }      }    }    i=StreamReaderUtils.skipSpaces(Bytes,0);    if (pointer == -1) {      LogWriter.writeLog("No startRef");    } else     if (Bytes[i] == 120 && Bytes[i + 1] == 114 && Bytes[i + 2] == 101 && Bytes[i + 3] == 102) {      i=StreamReaderUtils.skipSpaces(Bytes,5);      current=offset.readXRefs(current,Bytes,endTable,i,eof,pdf_datafile);      if (rootObj == null) {        rootObj=pdfObject.getDictionary(PdfDictionary.Root);        encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);        if (encryptObj != null) {          final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);          if (IDs != null && this.ID == null) {            this.ID=IDs[0];          }        }        infoObject=pdfObject.getDictionary(PdfDictionary.Info);      }      pointer=pdfObject.getInt(PdfDictionary.Prev);      if (pointer != -1 && pointer < this.eof) {        bufSize=1024;        offset.addXref(pointer);      } else {        pointer=-1;      }    } else {      pointer=-1;      rootObj=new PageObject(BrokenRefTable.findOffsets(pdf_datafile,offset));      currentPdfFile.readObject(rootObj);      offset.setRefTableInvalid(true);    }    if (pointer == -1) {      break;    }  }  if (encryptObj == null && rootObj != null) {    int type=-1;    int status=rootObj.getStatus();    byte[] data=rootObj.getUnresolvedData();    try {      final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);      objectDecoder.checkResolved(rootObj);      type=rootObj.getParameterConstant(PdfDictionary.Type);    } catch (    Exception e) {      rootObj.setStatus(status);      rootObj.setUnresolvedData(data,status);      LogWriter.writeLog("[PDF] Exception reading type on root object " + e);    }    if (type == PdfDictionary.Font) {      rootObj=null;    }  }  if (rootObj == null) {    offset.clear();    offset.reuse();    rootObj=new PageObject(BrokenRefTable.findOffsets(pdf_datafile,offset));    currentPdfFile.readObject(rootObj);    offset.setRefTableInvalid(true);  }  return rootObj;}  }
class C{  public Organization(){  super(KEY);}  }
class C{  public void reload(){  currentController.hide(Actions.sequence(hidingActionProvider.provideAction(currentController,currentController),Actions.run(CommonActionRunnables.getActionPosterRunnable(getViewReloadingRunnable()))));}  }
class C{  public Number factorial(){  this.failIfOutOfFactorialRange();  return this.from == 0 ? Integer.valueOf(1) : this.product();}  }
class C{  public boolean shouldTick(){  for (  Cube cube : cubeMap) {    if (cube.getTickets().shouldTick()) {      return true;    }  }  return false;}  }
class C{  @Override protected void initData(){  if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {    if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.READ_PHONE_STATE)) {    } else {      ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.READ_PHONE_STATE},REQUEST_READ_PHONE_STATE);    }  } else {    this.setData();  }}  }
class C{  default Task<?> preDeactivation(AbstractActor<?> actor){  return Task.done();}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  public PlacemarkAttributes(){  this.imageSource=null;  this.imageColor=new Color(1,1,1,1);  this.imageOffset=Offset.center();  this.imageScale=1;  this.minimumImageScale=0;  this.drawLeader=false;  this.depthTest=true;  this.labelAttributes=new TextAttributes();  this.leaderAttributes=new ShapeAttributes();}  }
class C{  public boolean isSentReply(){  return sentReply;}  }
class C{  public S1Angle(S2Point x,S2Point y){  this.radians=x.angle(y);}  }
class C{  public int numNodes(){  if (m_Attribute == -1) {    return 1;  } else {    int size=1;    for (    Tree m_Successor : m_Successors) {      size+=m_Successor.numNodes();    }    return size;  }}  }
class C{  public void remove(String name){  metadata.remove(name);}  }
class C{  public void addActionListener(ActionListener listener){  myBrowseButton.addActionListener(listener);}  }
class C{  public boolean hasGeoPt(){  return super.hasElement(GeoPt.KEY);}  }
class C{  public double xmin(){  return xmin;}  }
class C{  @Override public void deleteGroupSnapshots(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(snapshot));    List<BlockSnapshot> snapshots=_dbClient.queryObject(BlockSnapshot.class,Arrays.asList(snapshot));    BlockSnapshot snapshotObj=snapshots.get(0);    String consistencyGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(snapshotObj,_dbClient);    StorageSystem newStorage=findProviderFactory.withGroup(storage,consistencyGroupName).find();    if (newStorage == null) {      _log.warn("Replication Group {} not found.",consistencyGroupName);    }    String snapshotGroupName=snapshotObj.getReplicationGroupInstance();    boolean snapshotGroupExists=false;    CIMObjectPath groupSynchronized=_cimPath.getGroupSynchronizedPath(storage,consistencyGroupName,snapshotGroupName);    if (_helper.checkExists(storage,groupSynchronized,false,false) != null) {      snapshotGroupExists=true;      CIMArgument[] returnSnapGroupInput=_helper.getReturnGroupSyncToPoolInputArguments(groupSynchronized);      _helper.callModifyReplica(storage,returnSnapGroupInput);    }    boolean hadDeleteFailure=false;    List<BlockSnapshot> snaps=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshotObj,_dbClient);    if (snapshotGroupExists) {      for (      BlockSnapshot snap : snaps) {        _log.info(String.format("vnxDeleteGroupSnapshots -- deleting snapshot %s",snap.getId().toString()));        if (!deleteConsistencyGroupSnapshot(storage,snap,taskCompleter)) {          hadDeleteFailure=true;        }      }    }    if (!hadDeleteFailure) {      for (      BlockSnapshot snap : snaps) {        snap.setInactive(true);        snap.setIsSyncActive(false);        _dbClient.updateObject(snap);      }      taskCompleter.ready(_dbClient);    }  } catch (  Exception e) {    String message=String.format("Generic exception when trying to delete snapshots from consistency group on array %s",storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("deleteGroupSnapshots",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  @Redirect(method=READ_PLAYER_DATA,at=@At(value="INVOKE",target=COMPRESSED_READ_FILE)) private NBTTagCompound spongeReadPlayerData(InputStream inputStream) throws IOException {  Instant creation=this.file == null ? Instant.now() : Files.readAttributes(this.file,BasicFileAttributes.class).creationTime().toInstant();  NBTTagCompound compound=CompressedStreamTools.readCompressed(inputStream);  Instant lastPlayed=Instant.now();  if (compound.hasKey(NbtDataUtil.BUKKIT,NbtDataUtil.TAG_COMPOUND)) {    final NBTTagCompound bukkitCompound=compound.getCompoundTag(NbtDataUtil.BUKKIT);    creation=Instant.ofEpochMilli(bukkitCompound.getLong(NbtDataUtil.BUKKIT_FIRST_PLAYED));    lastPlayed=Instant.ofEpochMilli(bukkitCompound.getLong(NbtDataUtil.BUKKIT_LAST_PLAYED));  }  UUID playerId=null;  if (compound.hasUniqueId(NbtDataUtil.UUID)) {    playerId=compound.getUniqueId(NbtDataUtil.UUID);  }  if (playerId != null) {    Optional<Instant> savedFirst=SpongePlayerDataHandler.getFirstJoined(playerId);    if (savedFirst.isPresent()) {      creation=savedFirst.get();    }    Optional<Instant> savedJoined=SpongePlayerDataHandler.getLastPlayed(playerId);    if (savedJoined.isPresent()) {      lastPlayed=savedJoined.get();    }    SpongePlayerDataHandler.setPlayerInfo(playerId,creation,lastPlayed);  }  this.file=null;  return compound;}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  public CRegisterViewSynchronizer(final JRegisterView registerView,final CRegisterProvider dataProvider,final CDebugPerspectiveModel debugPerspectiveModel){  Preconditions.checkNotNull(registerView,"IE01479: Register view argument can not be null");  Preconditions.checkNotNull(dataProvider,"IE01480: Data provider argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01481: Debug perspective model argument can not be null");  m_registerView=registerView;  m_dataProvider=dataProvider;  m_debugPerspectiveModel=debugPerspectiveModel;  final IDebugger activeDebugger=debugPerspectiveModel.getCurrentSelectedDebugger();  synchronizeDebugger(null,activeDebugger);  debugPerspectiveModel.addListener(m_debugListener);}  }
class C{  public boolean plResolution(KnowledgeBase kb,Sentence alpha){  Set<Clause> clauses=setOfClausesInTheCNFRepresentationOfKBAndNotAlpha(kb,alpha);  Set<Clause> newClauses=new LinkedHashSet<Clause>();  do {    List<Clause> clausesAsList=new ArrayList<Clause>(clauses);    for (int i=0; i < clausesAsList.size() - 1; i++) {      Clause ci=clausesAsList.get(i);      for (int j=i + 1; j < clausesAsList.size(); j++) {        Clause cj=clausesAsList.get(j);        Set<Clause> resolvents=plResolve(ci,cj);        if (resolvents.contains(Clause.EMPTY)) {          return true;        }        newClauses.addAll(resolvents);      }    }    if (clauses.containsAll(newClauses)) {      return false;    }    clauses.addAll(newClauses);  } while (true);}  }
class C{  public static void v(String msg){  if (!allowV)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  newVector.addElement("measureTreeSize");  newVector.addElement("measureNumLeaves");  newVector.addElement("measureMaxDepth");  if (m_Stats != null) {    newVector.addAll(Collections.list(m_Stats.enumerateMeasures()));  }  return newVector.elements();}  }
class C{  public void testUnspecifiedProperties() throws InterruptedException {  NetworkClientFilter ncf=new NetworkClientFilter();  ncf.setTungstenSchema("tungsten_foo");  try {    filterHelper.setContext(replicatorContext);    filterHelper.setFilter(ncf);    filterHelper.done();    fail("Exception not thrown during configure though definitionsFile property was not set");  } catch (  ReplicatorException e) {    logger.info("Expected error received: " + e);  }}  }
class C{  public static Collection<URL> effectiveClassPathUrls(ClassLoader... classLoaders){  return ClasspathHelper.forManifest(ClasspathHelper.forClassLoader(classLoaders));}  }
class C{  public ObjectFactory(){}  }
class C{  public void last(Container parent){synchronized (parent.getTreeLock()) {    checkLayout(parent);    int ncomponents=parent.getComponentCount();    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      if (comp.isVisible()) {        comp.setVisible(false);        break;      }    }    if (ncomponents > 0) {      currentCard=ncomponents - 1;      parent.getComponent(currentCard).setVisible(true);      parent.validate();    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean isOpen(){  return m_zipFile != null;}  }
class C{  public void testGetF13(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF13();  assertEquals(expResult,result);}  }
class C{  public static String encodeQueryParam(String value){  return encodeValue(value,queryNameValueEncoding);}  }
class C{  private boolean repeat(double[] repError,int entries){  int i;  double mean=0;  double variance=0;  if (m_threshold < 0) {    return false;  }  if (entries == 1) {    return true;  }  for (i=0; i < entries; i++) {    mean+=repError[i];  }  mean/=entries;  for (i=0; i < entries; i++) {    variance+=((repError[i] - mean) * (repError[i] - mean));  }  variance/=entries;  if (variance > 0) {    variance=Math.sqrt(variance);  }  if ((variance / mean) > m_threshold) {    return true;  }  return false;}  }
class C{  public JFXRippler(Node control,RipplerPos pos){  this(control,RipplerMask.RECT,pos);}  }
class C{  private void updateTransferredBytesAvg(int newValue){  int realCount=0;  int sum=0;  this.avgSamples[this.nextSampleIndex++]=newValue;  if (this.nextSampleIndex >= BYTES_TRANSFERRED_AVG_SAMPLES) {    this.nextSampleIndex=0;  }  for (int i=0; i < BYTES_TRANSFERRED_AVG_SAMPLES; i++) {    if (this.avgSamples[i] > 0) {      realCount++;      sum+=this.avgSamples[i];    }  }  if (realCount > 0) {    this.avgTransferredBytes=sum / realCount;  } else {    this.avgTransferredBytes=0;  }}  }
class C{  public final boolean upperNumericBoundIsOpen(){  if (m_AttributeMetaInfo == null) {    return true;  }  return m_AttributeMetaInfo.m_UpperBoundIsOpen;}  }
class C{  public void testGetConfiguration() throws IOException {  String id=Long.toString((new Date()).getTime());  Profile project=new Profile(this.getName(),id,new File(this.workspace.toFile(),id));  AuxiliaryConfiguration config=JmriConfigurationProvider.getConfiguration(project);  assertNotNull(config);  FileUtil.delete(project.getPath());}  }
class C{  public static void disableLogging(){  ANLog.disableLogging();}  }
class C{  private void loadConfiguration(){  Properties properties=new Properties();  File file=new File(getConfigFileName());  if (file.exists() && file.canRead() && file.isFile()) {    FileInputStream in;    try {      in=new FileInputStream(getConfigFileName());      properties.load(in);      in.close();    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }    in=null;  }  Enumeration<Object> e=properties.keys();  while (e.hasMoreElements()) {    String key=(String)e.nextElement();    setParameter(key,properties.getProperty(key));  }  properties.clear();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  public int read() throws IOException {  return (read(scratch,0,1) != -1) ? scratch[0] & 0xff : -1;}  }
class C{  public static boolean isPropertyValue(@NotNull PsiElement element){  final PsiElement parent=element.getParent();  return parent instanceof JsonProperty && element == ((JsonProperty)parent).getValue();}  }
class C{  private Set<String> parseGameSearch(String json){  Set<String> result=new HashSet<>();  try {    JSONParser parser=new JSONParser();    JSONObject root=(JSONObject)parser.parse(json);    Object games=root.get("games");    if (!(games instanceof JSONArray)) {      LOGGER.warning("Error parsing game search: Should be array");      return null;    }    Iterator it=((JSONArray)games).iterator();    while (it.hasNext()) {      Object obj=it.next();      if (obj instanceof JSONObject) {        String name=(String)((JSONObject)obj).get("name");        result.add(name);      }    }    return result;  } catch (  ParseException ex) {    LOGGER.warning("Error parsing game search.");    return null;  }catch (  NullPointerException ex) {    LOGGER.warning("Error parsing game search: Unexpected null");    return null;  }catch (  ClassCastException ex) {    LOGGER.warning("Error parsing game search: Unexpected type");    return null;  }}  }
class C{  public ImageExceptionBean(ApplicationExceptionBean sup,Reason reason){  super(sup);  setReason(reason);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public String globalInfo(){  return "A filter that uses a PartitionGenerator to generate partition " + "membership values; filtered instances are composed of these values " + "plus the class attribute (if set in the input data) and rendered "+ "as sparse instances.";}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<com.vividsolutions.jts.geom.Geometry>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.difference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g1,g2);    }    ShapeFile output=null;    AttributeTable reader=input1.getAttributeTable();    int numFields=1 + reader.getFieldCount();    DBFField fields[]=new DBFField[numFields];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    for (int a=0; a < reader.getFieldCount(); a++) {      DBFField inputField=reader.getField(a);      fields[a + 1]=inputField;      if (inputField.getName().equals("FID")) {        fields[a + 1].setName("PARENT_FID");      }    }    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input1);    PreparedGeometry[] tests=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs[a]=g1.getGeometryN(a);    }    Object[][] attributeTableRecords=new Object[reader.getNumberOfRecords()][numFields];    for (int a=0; a < reader.getNumberOfRecords(); a++) {      Object[] rec=reader.nextRecord();      for (int b=0; b < numFields - 1; b++) {        attributeTableRecords[a][b + 1]=rec[b];      }    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          for (int m=0; m < tests.length; m++) {            if (tests[m].overlaps(gN) || gN.distance(testGs[m]) < 0.0001) {              parentRecNum=userData[m];              break;            }          }          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests.length; m++) {            if (tests[m].overlaps(gN) || gN.distance(testGs[m]) < 0.0001) {              parentRecNum=userData[m];              break;            }          }          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests.length; m++) {            if (tests[m].contains(gN.getInteriorPoint())) {              parentRecNum=userData[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          for (int m=0; m < tests.length; m++) {            if (tests[m].contains(gN.getInteriorPoint())) {              parentRecNum=userData[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public static void registerInterest(){  try {    Region region1=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME1);    Region region2=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME2);    assertTrue(region1 != null);    assertTrue(region2 != null);    region1.registerInterest("ALL_KEYS");    region2.registerInterest("ALL_KEYS");  } catch (  CacheWriterException e) {    fail("test failed due to " + e);  }}  }
class C{  private static void _trustAllHostnames(){  if (_hostnameVerifier == null) {    _hostnameVerifier=new FakeHostnameVerifier();  }  HttpsURLConnection.setDefaultHostnameVerifier(_hostnameVerifier);}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  super.appendAndPush(handler,elem);  elem.setDOMBackPointer(handler.getOriginatingNode());  handler.getStylesheet().setTemplate((ElemTemplate)elem);}  }
class C{  public void println(int v) throws IOException {  print(v);  println();}  }
class C{  public static String formatDistanceBetween(LatLng point1,LatLng point2){  if (point1 == null || point2 == null) {    return null;  }  NumberFormat numberFormat=NumberFormat.getNumberInstance();  double distance=Math.round(SphericalUtil.computeDistanceBetween(point1,point2));  if (distance >= 1000) {    numberFormat.setMaximumFractionDigits(1);    return numberFormat.format(distance / 1000) + DISTANCE_KM_POSTFIX;  }  return numberFormat.format(distance) + DISTANCE_M_POSTFIX;}  }
class C{  public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append(eventUUID);  sb.append('\t');  sb.append(resource.indexName);  sb.append('\t');  sb.append(resource.partitionId);  sb.append('\t');  sb.append(resource.file);  sb.append('\t');  sb.append(majorEventType.getClass().getName());  sb.append('\t');  sb.append(majorEventType);  sb.append('\t');  sb.append(minorEventType.getClass().getName());  sb.append('\t');  sb.append(minorEventType);  sb.append('\t');  sb.append(startTime);  sb.append('\t');  sb.append(endTime);  sb.append('\t');  if (complete) {    sb.append(endTime - startTime);    sb.append('\t');  } else {    sb.append('\t');  }  sb.append(complete);  sb.append('\t');  sb.append(hostname);  sb.append('\t');  sb.append(serviceIface.getName());  sb.append('\t');  sb.append(serviceName);  sb.append('\t');  sb.append(serviceUUID);  if (details != null) {    final String[] keys=details.keySet().toArray(new String[]{});    Arrays.sort(keys);    for (    String s : keys) {      sb.append('\t');      sb.append(s);      sb.append("=");      sb.append("" + details.get(s));    }  }  sb.append('\n');  return sb.toString();}  }
class C{  protected boolean isPersisted(Resource resource){  boolean result=false;  try {    InputStream stream=editingDomain.getResourceSet().getURIConverter().createInputStream(resource.getURI());    if (stream != null) {      result=true;      stream.close();    }  } catch (  IOException e) {  }  return result;}  }
class C{  public BeanFactoryData(){}  }
class C{  public int size(){  return mSampleIds.length;}  }
class C{  public void testConstruction(){  PolynomialTerm term=new PolynomialTerm(0.5,new int[]{1,2,0});  assertEquals(0.5,term.getCoefficient(),0.00001);  assertEquals(1,term.getVariable(0));  assertEquals(2,term.getVariable(1));  assertEquals(0,term.getVariable(2));  System.out.println(term);}  }
class C{  private String percent(){  return "" + ((bar.getValue() * 100) / bar.getMaximum()) + "%";}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_SETTER_DECLARATION__DECLARED_MODIFIERS:    return declaredModifiers != null && !declaredModifiers.isEmpty();case N4JSPackage.N4_SETTER_DECLARATION__OWNER:  return basicGetOwner() != null;case N4JSPackage.N4_SETTER_DECLARATION__ANNOTATION_LIST:return annotationList != null;}return super.eIsSet(featureID);}  }
class C{  protected ProblemHistory(){}  }
class C{  public static int asInt(String datum,int n){  if ((datum == null) || datum.isEmpty()) {    throw new SketchesArgumentException("Input is null or empty.");  }  byte[] data=datum.getBytes(UTF_8);  return asInteger(toLongArray(data),n);}  }
class C{  public Vertex evaluateSRAI(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack) throws Exception {  if (!checkArguments(expression,arguments,1,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex sentence=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  if (!sentence.instanceOf(Primitive.SENTENCE) && sentence.instanceOf(Primitive.FRAGMENT)) {    sentence.addRelationship(Primitive.INSTANTIATION,Primitive.SENTENCE);  }  Vertex input=variables.get(network.createVertex(Primitive.INPUT_VARIABLE));  input=input.copy();  input.setRelationship(Primitive.INPUT,sentence);  Vertex response=network.getBot().mind().getThought(Language.class).input(input,sentence,variables,network);  if (response == null) {    return network.createVertex(Primitive.NULL);  }  return response;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.200 -0500",hash_original_method="E3876C81F77C4C65824998CB51869857",hash_generated_method="1171480E4D0A7406002DC8F060F5B518") public FromHeader createFromHeader(Address address,String tag) throws ParseException {  if (address == null)   throw new NullPointerException("null address arg");  From from=new From();  from.setAddress(address);  if (tag != null)   from.setTag(tag);  return from;}  }
class C{  private static Class<? extends OrmLiteSqliteOpenHelper> lookupHelperClass(Context context,Class<?> componentClass){  Resources resources=context.getResources();  int resourceId=resources.getIdentifier(HELPER_CLASS_RESOURCE_NAME,"string",context.getPackageName());  if (resourceId != 0) {    String className=resources.getString(resourceId);    try {      @SuppressWarnings("unchecked") Class<? extends OrmLiteSqliteOpenHelper> castClass=(Class<? extends OrmLiteSqliteOpenHelper>)Class.forName(className);      return castClass;    } catch (    Exception e) {      throw new IllegalStateException("Could not create helper instance for class " + className,e);    }  }  for (Class<?> componentClassWalk=componentClass; componentClassWalk != null; componentClassWalk=componentClassWalk.getSuperclass()) {    Type superType=componentClassWalk.getGenericSuperclass();    if (superType == null || !(superType instanceof ParameterizedType)) {      continue;    }    Type[] types=((ParameterizedType)superType).getActualTypeArguments();    if (types == null || types.length == 0) {      continue;    }    for (    Type type : types) {      if (!(type instanceof Class)) {        continue;      }      Class<?> clazz=(Class<?>)type;      if (OrmLiteSqliteOpenHelper.class.isAssignableFrom(clazz)) {        @SuppressWarnings("unchecked") Class<? extends OrmLiteSqliteOpenHelper> castOpenHelperClass=(Class<? extends OrmLiteSqliteOpenHelper>)clazz;        return castOpenHelperClass;      }    }  }  throw new IllegalStateException("Could not find OpenHelperClass because none of the generic parameters of class " + componentClass + " extends OrmLiteSqliteOpenHelper.  You should use getHelper(Context, Class) instead.");}  }
class C{  public void enableResultSet(boolean enable){  params.isResultSetEnabled=enable;  if (enable) {    enableInterface(true);    enable(true);  }}  }
class C{  public static RegionSizeResponse create(DistributionManager dm,InternalDistributedMember recipient){  RegionSizeResponse m=new RegionSizeResponse();  m.setRecipient(recipient);  return m;}  }
class C{  public Analyzer add(String name,NondominatedPopulation result){  List<NondominatedPopulation> list=data.get(name);  if (list == null) {    list=new ArrayList<NondominatedPopulation>();    data.put(name,list);  }  list.add(result);  return this;}  }
class C{  private Argon2Constants(){}  }
class C{  public void writeByte(int v){  try {    dos.writeByte(v);  } catch (  Exception e) {    handleException(e);  }}  }
class C{  public void logError(Throwable exception,String message,Object... args){  message=MessageFormat.format(message,args);  LogUtils.log(log,IStatus.ERROR,IStatus.OK,message,exception);}  }
class C{  private static String normalize(Point p1,Point p2){  int a, b;  float c;  if (p1.x == p2.x) {    b=0;    a=1;    c=p1.x;  } else   if (p1.y == p2.y) {    a=0;    b=1;    c=p2.y;  } else {    int dx=p1.x - p2.x;    int dy=p1.y - p2.y;    int gcd=gcd(Math.abs(dx),Math.abs(dy));    a=dy / gcd;    b=dx / gcd;    if (a * b < 0) {      a=-1 * Math.abs(a);      b=Math.abs(b);    } else {      a=Math.abs(a);      b=Math.abs(b);    }    c=a * p1.x + b * p1.y;  }  return a + "|" + b+ "|"+ c;}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,String key,E defaultValue){  try {    Object val=this.opt(key);    if (NULL.equals(val)) {      return defaultValue;    }    if (clazz.isAssignableFrom(val.getClass())) {      @SuppressWarnings("unchecked") E myE=(E)val;      return myE;    }    return Enum.valueOf(clazz,val.toString());  } catch (  IllegalArgumentException|NullPointerException e) {    return defaultValue;  }}  }
class C{  private void removeOrphanedStates(Context context){  AppWidgetManager wm=AppWidgetManager.getInstance(context);  int[] ids=wm.getAppWidgetIds(getComponentName(context));  for (  int id : ids) {    BookmarkThumbnailWidgetService.deleteWidgetState(context,id);  }}  }
class C{  public ScatterPlotComponent(final String name,final ScatterPlotModel model){  super(name);  this.model=model;  initializeAttributes();  addListener();}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public static void addProvider(final PathProvider provider){  if (API.manualAPI != null)   API.manualAPI.addProvider(provider);}  }
class C{  public Atan(){  super(Number.class,Number.class);}  }
class C{  public void cancelSync(Account account,String authority){  int userId=UserHandle.getCallingUserId();  long identityToken=clearCallingIdentity();  try {    SyncManager syncManager=getSyncManager();    if (syncManager != null) {      syncManager.clearScheduledSyncOperations(account,userId,authority);      syncManager.cancelActiveSync(account,userId,authority);    }  }  finally {    restoreCallingIdentity(identityToken);  }}  }
class C{  public CSVWriter(Writer writer,char separator){  this(writer,separator,DEFAULT_QUOTE_CHARACTER);}  }
class C{  @Override public void flush(){}  }
class C{  private static int nextPowerOfTwo(int val){  int res=1;  while (res < val)   res=res << 1;  if (res < 0)   throw new IllegalArgumentException("Value is too big to find positive pow2: " + val);  return res;}  }
class C{  @Override public void registerOutParameter(String parameterName,int sqlType,String typeName) throws SQLException {  registerOutParameter(getIndexForName(parameterName),sqlType,typeName);}  }
class C{  protected final void assertToken(Scanner.TokenType type,String errorMessage) throws ParserException {  if (token.isNot(type)) {    throwException(errorMessage);  }}  }
class C{  public void clear(){  corpus.clear();  tokenCountsClear();  hamMessageCount=0;  spamMessageCount=0;}  }
class C{  public NBTTagCompound write(NBTTagCompound nbtTags){  if (stored != null && stored.getGas() != null) {    nbtTags.setTag("stored",stored.write(new NBTTagCompound()));  }  nbtTags.setInteger("maxGas",maxGas);  return nbtTags;}  }
class C{  public static double[] rank(ExampleSet eSet,Attribute att,Attribute mappingAtt,double fuzz){  TreeMap<Double,ArrayList<Integer>> map;  if (fuzz == 0.0) {    map=new TreeMap<Double,ArrayList<Integer>>();  } else {    FuzzyComp fc=new FuzzyComp(fuzz);    map=new TreeMap<Double,ArrayList<Integer>>(fc);  }  double[] rank=new double[eSet.size()];  Iterator<Example> reader=eSet.iterator();  int i=0;  while (reader.hasNext()) {    Example e=reader.next();    double x=e.getValue(att);    if (att.isNominal() && mappingAtt != null) {      String xString=att.getMapping().mapIndex((int)x);      x=mappingAtt.getMapping().getIndex(xString);    }    if (Double.isNaN(x)) {      rank[i++]=Double.NaN;    } else {      if (!map.containsKey(x)) {        map.put(x,new ArrayList<Integer>());      }      map.get(x).add(i++);    }  }  double r=0;  for (  double x : map.keySet()) {    ArrayList<Integer> y=map.get(x);    double v=r + (1.0 + y.size()) / 2.0;    for (    int j : y) {      rank[j]=v;    }    r+=y.size();  }  return rank;}  }
class C{  protected void addToMaintenanceQueue(NodePortTuple npt){  if (maintenanceQueue.contains(npt) == false) {    maintenanceQueue.add(npt);  }}  }
class C{  private void grow(){  m_allocatedSize*=2;  boolean newVector[]=new boolean[m_allocatedSize];  System.arraycopy(m_values,0,newVector,0,m_index + 1);  m_values=newVector;}  }
class C{  public boolean isLine(){  return TYPE_LINES.equals(getType());}  }
class C{  public StandardPCPolicy(OMGraphicHandlerLayer layer,boolean alwaysSpawnThreadForPrepare){  setLayer(layer);  setAlwaysSpawnThread(alwaysSpawnThreadForPrepare);}  }
class C{  public Endpoint(Endpoint other){  __isset_bitfield=other.__isset_bitfield;  this.ipv4=other.ipv4;  this.port=other.port;  if (other.isSetService_name()) {    this.service_name=other.service_name;  }}  }
class C{  protected FireworkMetaBuilder(final FireworkMeta meta){  this.meta=meta.clone();}  }
class C{  public static <T,V extends Comparable<? super V>>T minBy(Iterable<T> iterable,Function<? super T,? extends V> function){  if (iterable instanceof RichIterable) {    return ((RichIterable<T>)iterable).minBy(function);  }  if (iterable instanceof RandomAccess) {    return RandomAccessListIterate.minBy((List<T>)iterable,function);  }  if (iterable != null) {    return IterableIterate.minBy(iterable,function);  }  throw new IllegalArgumentException("Cannot perform a minBy on null");}  }
class C{  public static <T extends TBase>T deserializeJson(T dest,String thriftJson) throws TException {  new TDeserializer(new TJSONProtocol.Factory()).deserialize(dest,thriftJson,THRIFT_CHARSET);  return dest;}  }
class C{  @Override public boolean execute(String[] params,String remainder){  final RPAction walk=new RPAction();  walk.put(TYPE,WALK);  walk.put(TARGET,StringHelper.unquote(remainder));  ClientSingletonRepository.getClientFramework().send(walk);  return true;}  }
class C{  public Query(String id,String type,long countdown){  super(id,type,countdown);}  }
class C{  private long measureMachinePerformance(){  Random r=new Random();  final int NUMBER_ITERATIONS=20000;  double counter=0.0;  long start=System.currentTimeMillis();  for (int i=0; i < NUMBER_ITERATIONS; i++) {    counter+=r.nextDouble();  }  if (counter < 0)   System.out.println("this should never happen.");  return System.currentTimeMillis() - start;}  }
class C{  public void encode(OutputStream out) throws IOException {  if (version == V1) {    return;  }  DerOutputStream tmp=new DerOutputStream();  tmp.putInteger(version);  DerOutputStream seq=new DerOutputStream();  seq.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0),tmp);  out.write(seq.toByteArray());}  }
class C{  public EventListenerWrapper(EventListener l){  listener=l;}  }
class C{  private static void checkRange(int fromIndex,int toIndex){  if (fromIndex < 0)   throw new IndexOutOfBoundsException("fromIndex < 0: " + fromIndex);  if (toIndex < 0)   throw new IndexOutOfBoundsException("toIndex < 0: " + toIndex);  if (fromIndex > toIndex)   throw new IndexOutOfBoundsException("fromIndex: " + fromIndex + " > toIndex: "+ toIndex);}  }
class C{  private static void populateFileExtensionMimeTypeMapping(){  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("3gp",Collections.singletonList("video/3gpp"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("7z",Collections.singletonList("application/x-7z-compressed"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("accdb",Collections.singletonList("application/msaccess"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ai",Collections.singletonList("application/illustrator"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("apk",Collections.singletonList("application/vnd.android.package-archive"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("arw",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("avi",Collections.singletonList("video/x-msvideo"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("bash",Collections.singletonList("text/x-shellscript"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("blend",Collections.singletonList("application/x-blender"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("bin",Collections.singletonList("application/x-bin"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("bmp",Collections.singletonList("image/bmp"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("bpg",Collections.singletonList("image/bpg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cb7",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cba",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cbr",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cbt",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cbtc",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cbz",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cc",Collections.singletonList("text/x-c"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cdr",Collections.singletonList("application/coreldraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cnf",Collections.singletonList("text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("conf",Collections.singletonList("text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cpp",Collections.singletonList("text/x-c++src"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cr2",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("css",Collections.singletonList("text/css"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("csv",Collections.singletonList("text/csv"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cvbdl",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("c",Collections.singletonList("text/x-c"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("c++",Collections.singletonList("text/x-c++src"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("dcr",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("deb",Collections.singletonList("application/x-deb"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("dng",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("doc",Collections.singletonList("application/msword"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("docm",Collections.singletonList("application/vnd.ms-word.document.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("docx",Collections.singletonList("application/vnd.openxmlformats-officedocument.wordprocessingml.document"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("dot",Collections.singletonList("application/msword"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("dotx",Collections.singletonList("application/vnd.openxmlformats-officedocument.wordprocessingml.template"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("dv",Collections.singletonList("video/dv"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("eot",Collections.singletonList("application/vnd.ms-fontobject"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("epub",Collections.singletonList("application/epub+zip"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("eps",Collections.singletonList("application/postscript"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("erf",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("exe",Collections.singletonList("application/x-ms-dos-executable"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("flac",Collections.singletonList("audio/flac"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("flv",Collections.singletonList("video/x-flv"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("gif",Collections.singletonList("image/gif"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("gz",Collections.singletonList("application/x-gzip"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("gzip",Collections.singletonList("application/x-gzip"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("h",Collections.singletonList("text/x-h"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("hh",Collections.singletonList("text/x-h"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("html",Arrays.asList("text/html","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("htm",Arrays.asList("text/html","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ical",Collections.singletonList("text/calendar"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ics",Collections.singletonList("text/calendar"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("iiq",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("impress",Collections.singletonList("text/impress"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("jpeg",Collections.singletonList("image/jpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("jpg",Collections.singletonList("image/jpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("jps",Collections.singletonList("image/jpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("js",Arrays.asList("application/javascript","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("json",Arrays.asList("application/json","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("k25",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("kdc",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("key",Collections.singletonList("application/x-iwork-keynote-sffkey"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("keynote",Collections.singletonList("application/x-iwork-keynote-sffkey"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("kra",Collections.singletonList("application/x-krita"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("m2t",Collections.singletonList("video/mp2t"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("m4v",Collections.singletonList("video/mp4"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("markdown",Collections.singletonList("text/markdown"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mdown",Collections.singletonList("text/markdown"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("md",Collections.singletonList("text/markdown"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mdb",Collections.singletonList("application/msaccess"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mdwn",Collections.singletonList("text/markdown"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mkd",Collections.singletonList("text/markdown"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mef",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mkv",Collections.singletonList("video/x-matroska"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mobi",Collections.singletonList("application/x-mobipocket-ebook"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mov",Collections.singletonList("video/quicktime"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mp3",Collections.singletonList("audio/mpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mp4",Collections.singletonList("video/mp4"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mpeg",Collections.singletonList("video/mpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mpg",Collections.singletonList("video/mpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mpo",Collections.singletonList("image/jpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("msi",Collections.singletonList("application/x-msi"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mts",Collections.singletonList("video/MP2T"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mt2s",Collections.singletonList("video/MP2T"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("nef",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("numbers",Collections.singletonList("application/x-iwork-numbers-sffnumbers"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("odf",Collections.singletonList("application/vnd.oasis.opendocument.formula"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("odg",Collections.singletonList("application/vnd.oasis.opendocument.graphics"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("odp",Collections.singletonList("application/vnd.oasis.opendocument.presentation"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ods",Collections.singletonList("application/vnd.oasis.opendocument.spreadsheet"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("odt",Collections.singletonList("application/vnd.oasis.opendocument.text"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("oga",Collections.singletonList("audio/ogg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ogg",Collections.singletonList("audio/ogg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ogv",Collections.singletonList("video/ogg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("opus",Collections.singletonList("audio/ogg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("orf",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("otf",Collections.singletonList("application/font-sfnt"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pages",Collections.singletonList("application/x-iwork-pages-sffpages"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pdf",Collections.singletonList("application/pdf"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pfb",Collections.singletonList("application/x-font"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pef",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("php",Collections.singletonList("application/x-php"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pl",Collections.singletonList("application/x-perl"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("png",Collections.singletonList("image/png"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pot",Collections.singletonList("application/vnd.ms-powerpoint"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("potm",Collections.singletonList("application/vnd.ms-powerpoint.template.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("potx",Collections.singletonList("application/vnd.openxmlformats-officedocument.presentationml.template"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ppa",Collections.singletonList("application/vnd.ms-powerpoint"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ppam",Collections.singletonList("application/vnd.ms-powerpoint.addin.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pps",Collections.singletonList("application/vnd.ms-powerpoint"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ppsm",Collections.singletonList("application/vnd.ms-powerpoint.slideshow.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ppsx",Collections.singletonList("application/vnd.openxmlformats-officedocument.presentationml.slideshow"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ppt",Collections.singletonList("application/vnd.ms-powerpoint"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pptm",Collections.singletonList("application/vnd.ms-powerpoint.presentation.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pptx",Collections.singletonList("application/vnd.openxmlformats-officedocument.presentationml.presentation"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ps",Collections.singletonList("application/postscript"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("psd",Collections.singletonList("application/x-photoshop"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("py",Collections.singletonList("text/x-python"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("raf",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("rar",Collections.singletonList("application/x-rar-compressed"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("reveal",Collections.singletonList("text/reveal"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("rtf",Collections.singletonList("application/rtf"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("rw2",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("sgf",Collections.singletonList("application/sgf"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("sh-lib",Collections.singletonList("text/x-shellscript"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("sh",Collections.singletonList("text/x-shellscript"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("srf",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("sr2",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("svg",Arrays.asList("image/svg+xml","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("swf",Arrays.asList("application/x-shockwave-flash","application/octet-stream"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("tar",Collections.singletonList("application/x-tar"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("gz",Collections.singletonList("application/x-compressed"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("tex",Collections.singletonList("application/x-tex"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("tgz",Collections.singletonList("application/x-compressed"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("tiff",Collections.singletonList("image/tiff"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("tif",Collections.singletonList("image/tiff"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ttf",Collections.singletonList("application/font-sfnt"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("txt",Collections.singletonList("text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("vcard",Collections.singletonList("text/vcard"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("vcf",Collections.singletonList("text/vcard"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("vob",Collections.singletonList("video/dvd"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("wav",Collections.singletonList("audio/wav"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("webm",Collections.singletonList("video/webm"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("woff",Collections.singletonList("application/font-woff"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("wmv",Collections.singletonList("video/x-ms-wmv"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xcf",Collections.singletonList("application/x-gimp"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xla",Collections.singletonList("application/vnd.ms-excel"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xlam",Collections.singletonList("application/vnd.ms-excel.addin.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xls",Collections.singletonList("application/vnd.ms-excel"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xlsb",Collections.singletonList("application/vnd.ms-excel.sheet.binary.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xlsm",Collections.singletonList("application/vnd.ms-excel.sheet.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xlsx",Collections.singletonList("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xlt",Collections.singletonList("application/vnd.ms-excel"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xltm",Collections.singletonList("application/vnd.ms-excel.template.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xltx",Collections.singletonList("application/vnd.openxmlformats-officedocument.spreadsheetml.template"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xml",Arrays.asList("application/xml","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xrf",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("yaml",Arrays.asList("application/yaml","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("yml",Arrays.asList("application/yaml","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("zip",Collections.singletonList("application/zip"));}  }
class C{  private void maybeShowPopup(final MouseEvent event){  if (event.isPopupTrigger()) {    final JPopupMenu menu=new JPopupMenu();    menu.add(new CopyLogAction(m_textArea));    menu.show(event.getComponent(),event.getX(),event.getY());  }}  }
class C{  public void addStandbyProductionCopy(CreateCopyParams standbyProdCopy,CreateCopyParams standbyLocalCopyParams,List<CreateRSetParams> rSets,RPCopyRequestParams activeProdCopy){  String cgName="";  String activeCgCopyName="";  try {    ConsistencyGroupCopyUID activeProdCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(activeProdCopy.getCopyVolumeInfo());    ConsistencyGroupUID cgUID=activeProdCopyUID.getGroupUID();    cgName=functionalAPI.getGroupName(cgUID);    logger.info(String.format("Adding Standby production and local volumes to Metropoint CG %s",cgName));    activeCgCopyName=functionalAPI.getGroupCopyName(activeProdCopyUID);    List<CreateCopyParams> copies=new ArrayList<CreateCopyParams>();    copies.add(standbyProdCopy);    if (standbyLocalCopyParams != null) {      copies.add(standbyLocalCopyParams);    }    Set<RPSite> allSites=scan(copies,rSets);    CreateVolumeParams volume=standbyProdCopy.getJournals().get(0);    ClusterUID clusterUid=RecoverPointUtils.getRPSiteID(functionalAPI,volume.getInternalSiteName());    ConsistencyGroupCopyUID standbyProdCopyUID=addCopyToCG(cgUID,allSites,standbyProdCopy,clusterUid,null,RecoverPointCGCopyType.PRODUCTION);    addStandbyCopyLinkSettings(activeProdCopyUID,standbyProdCopyUID);    ConsistencyGroupCopyUID standbyLocalCopyUID=null;    if (standbyLocalCopyParams != null) {      standbyLocalCopyUID=addCopyToCG(cgUID,allSites,standbyLocalCopyParams,clusterUid,rSets,RecoverPointCGCopyType.LOCAL);      logger.info("Setting link policy between production copy and local copy on standby cluster(id) : " + standbyLocalCopyUID.getGlobalCopyUID().getClusterUID().getId());      setLinkPolicy(false,standbyProdCopyUID,standbyLocalCopyUID,cgUID);    }    if (standbyLocalCopyUID != null) {      logger.info("enable standby local copy for CG ",cgName);      functionalAPI.enableConsistencyGroupCopy(standbyLocalCopyUID,true);    }    logger.info("enable production standby copy for CG ",cgName);    functionalAPI.enableConsistencyGroupCopy(standbyProdCopyUID,true);    logger.info("enable CG " + cgName + " after standby copies added");    functionalAPI.startGroupTransfer(cgUID);    RecoverPointImageManagementUtils rpiMgmt=new RecoverPointImageManagementUtils();    rpiMgmt.waitForCGLinkState(functionalAPI,cgUID,RecoverPointImageManagementUtils.getPipeActiveState(functionalAPI,cgUID));  } catch (  Exception e) {    throw RecoverPointException.exceptions.failedToFailoverCopy(activeCgCopyName,cgName,e);  }}  }
class C{  public DrawerBuilder withActionBarDrawerToggle(boolean actionBarDrawerToggleEnabled){  this.mActionBarDrawerToggleEnabled=actionBarDrawerToggleEnabled;  return this;}  }
class C{  public boolean match(ConstructorInvocation node,Object other){  if (!(other instanceof ConstructorInvocation)) {    return false;  }  ConstructorInvocation o=(ConstructorInvocation)other;  if (node.getAST().apiLevel >= AST.JLS3) {    if (!safeSubtreeListMatch(node.typeArguments(),o.typeArguments())) {      return false;    }  }  return safeSubtreeListMatch(node.arguments(),o.arguments());}  }
class C{  public void addFreeShippingProductPromoAction(GenericValue productPromoAction){  if (productPromoAction == null)   return;  if (!"PROMO_FREE_SHIPPING".equals(productPromoAction.getString("productPromoActionEnumId")))   return;  this.removeFreeShippingProductPromoAction(productPromoAction.getPrimaryKey());  this.freeShippingProductPromoActions.add(productPromoAction);}  }
class C{  public void scanJarFile(){  fileCombo.removeAllItems();  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    while ((entry=zin.getNextJarEntry()) != null) {      String nameOfEntry=entry.getName();      if (nameOfEntry.endsWith(".javaSGT") || nameOfEntry.endsWith("java-jzy3D"))       fileCombo.addItem(nameOfEntry);      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public int removeFoundation(int suit){  int rank=foundationEncoding[suit];  if (rank == 0) {    return 0;  }  return foundationEncoding[suit]--;}  }
