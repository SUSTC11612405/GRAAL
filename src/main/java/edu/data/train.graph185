class C{  public AlertReport createAlertReport(long reportTimestamp,AlertEntry alert){  AlertReport ar=new AlertReport();  ar.setReportTimestamp(reportTimestamp);  ar.setDbGroupName(alert.getDbGroup());  ar.setDbHostName(alert.getDbHost());  ar.setTimestamp(alert.getTs());  ar.setRootPath(getAlertRootPath());  ar.setAlertReason(alert.getAlertReason());  ar.setAlertValue(alert.getAlertValue());  return ar;}  }
class C{  static private void dumpStream(OutputListener diagnostics,InputStream stream) throws IOException {  BufferedReader in=new BufferedReader(new InputStreamReader(stream));  String line;  while ((line=in.readLine()) != null) {    diagnostics.putString(line);  }}  }
class C{  public void addPixel(float x,float y,float z,float[] scale,int w,int h){  PositionTextureVertex[] verts=new PositionTextureVertex[8];  TexturedPolygon[] poly=new TexturedPolygon[6];  float x1=x + scale[0];  float y1=y + scale[1];  float z1=z + scale[2];  float[] f={x,y,z};  float[] f1={x1,y,z};  float[] f2={x1,y1,z};  float[] f3={x,y1,z};  float[] f4={x,y,z1};  float[] f5={x1,y,z1};  float[] f6={x1,y1,z1};  float[] f7={x,y1,z1};  PositionTextureVertex positionTexturevertex=new PositionTextureVertex(f[0],f[1],f[2],0.0F,0.0F);  PositionTextureVertex positionTexturevertex1=new PositionTextureVertex(f1[0],f1[1],f1[2],0.0F,8F);  PositionTextureVertex positionTexturevertex2=new PositionTextureVertex(f2[0],f2[1],f2[2],8F,8F);  PositionTextureVertex positionTexturevertex3=new PositionTextureVertex(f3[0],f3[1],f3[2],8F,0.0F);  PositionTextureVertex positionTexturevertex4=new PositionTextureVertex(f4[0],f4[1],f4[2],0.0F,0.0F);  PositionTextureVertex positionTexturevertex5=new PositionTextureVertex(f5[0],f5[1],f5[2],0.0F,8F);  PositionTextureVertex positionTexturevertex6=new PositionTextureVertex(f6[0],f6[1],f6[2],8F,8F);  PositionTextureVertex positionTexturevertex7=new PositionTextureVertex(f7[0],f7[1],f7[2],8F,0.0F);  verts[0]=positionTexturevertex;  verts[1]=positionTexturevertex1;  verts[2]=positionTexturevertex2;  verts[3]=positionTexturevertex3;  verts[4]=positionTexturevertex4;  verts[5]=positionTexturevertex5;  verts[6]=positionTexturevertex6;  verts[7]=positionTexturevertex7;  poly[0]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex5,positionTexturevertex1,positionTexturevertex2,positionTexturevertex6},w,h,w + 1,h + 1);  poly[1]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex,positionTexturevertex4,positionTexturevertex7,positionTexturevertex3},w,h,w + 1,h + 1);  poly[2]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex5,positionTexturevertex4,positionTexturevertex,positionTexturevertex1},w,h,w + 1,h + 1);  poly[3]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex2,positionTexturevertex3,positionTexturevertex7,positionTexturevertex6},w,h,w + 1,h + 1);  poly[4]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex1,positionTexturevertex,positionTexturevertex3,positionTexturevertex2},w,h,w + 1,h + 1);  poly[5]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex4,positionTexturevertex5,positionTexturevertex6,positionTexturevertex7},w,h,w + 1,h + 1);  copyTo(verts,poly);}  }
class C{  public void updateStatus(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.LOGICAL_AND_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)null);  return;case ExpressionsPackage.LOGICAL_AND_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)null);return;}super.eUnset(featureID);}  }
class C{  @Override public final ClassifierSplitModel selectModel(Instances train,Instances test){  return selectModel(train);}  }
class C{  public void updateCheckingConsistency(){  updateSubTreeCheckingConsistency(new TreePath(this.model.getRoot()));}  }
class C{  public void closeDB(){  if (mSQLiteDatabase.isOpen()) {    mSQLiteDatabase.close();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_BODY__PATTERN:    return pattern != null;}return super.eIsSet(featureID);}  }
class C{  public final void addHousehold(final Household household){  if (this.getHouseholds().containsKey(household.getId())) {    throw new IllegalArgumentException("Household with Id " + household.getId() + " already exisits.");  }  this.households.put(household.getId(),household);}  }
class C{  public static CassandraApplicationConfig parse(ByteString bytes) throws IOException {  return parse(bytes.toByteArray());}  }
class C{  public synchronized boolean removeElement(Object object){  int index;  if ((index=indexOf(object,0)) == -1) {    return false;  }  removeElementAt(index);  return true;}  }
class C{  private HashMap<String,List<StorageTier>> discoverStorageTier(StorageSystem system,VNXeApiClient client) throws VNXeException {  HashMap<String,List<StorageTier>> storageTiers=new HashMap<String,List<StorageTier>>();  List<StorageTier> newTiers=new ArrayList<StorageTier>();  List<StorageTier> existingTiers=new ArrayList<StorageTier>();  List<VNXeStorageTier> tiers=client.getStorageTiers();  String systemNativeGuid=NativeGUIDGenerator.generateNativeGuid(system);  for (  VNXeStorageTier tier : tiers) {    String nativeId=tier.getId();    StorageTier tierObj=null;    String tierNativeGuid=NativeGUIDGenerator.generateStorageTierNativeGuidForVmaxTier(systemNativeGuid,nativeId);    URIQueryResultList results=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageTierByIdConstraint(tierNativeGuid),results);    Iterator<URI> it=results.iterator();    if (it.hasNext()) {      _logger.info("Getting the storage tier.");      StorageTier tmpTier=_dbClient.queryObject(StorageTier.class,it.next());      _logger.info(String.format("Actual StorageDevice %s : storage tier : %s",system.getId(),tmpTier.getNativeGuid()));      tierObj=tmpTier;    }    boolean isNewTier=false;    if (null == tierObj) {      tierObj=new StorageTier();      tierObj.setId(URIUtil.createId(StorageTier.class));      tierObj.setNativeGuid(tierNativeGuid);      isNewTier=true;    }    tierObj.setLabel(tier.getId());    tierObj.setTotalCapacity(VNXeUtils.convertDoubleSizeToViPRLong(tier.getSizeTotal()));    if (isNewTier) {      newTiers.add(tierObj);    } else {      existingTiers.add(tierObj);    }  }  storageTiers.put(NEW,newTiers);  storageTiers.put(EXISTING,existingTiers);  return storageTiers;}  }
class C{  private MultiLineString readMultiLine(OraGeom oraGeom){  int nElem=oraGeom.numElements();  List geoms=new ArrayList();  for (int i=0; i < nElem; i++) {    int etype=oraGeom.eType(i);    if (etype != OraGeom.ETYPE.LINE)     break;    geoms.add(readLine(oraGeom,i));  }  MultiLineString lines=geometryFactory.createMultiLineString(GeometryFactory.toLineStringArray(geoms));  return lines;}  }
class C{  private void outputSingleBest(boolean b){  this.outputSingleBest=b;}  }
class C{  public BasicTreeAttributes(TreeAttributes attributes){  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.copy(attributes);}  }
class C{  void addScrapView(View scrap,int position,int viewType){  if (viewTypeCount == 1) {    currentScrapViews.put(position,scrap);  } else {    scrapViews[viewType].put(position,scrap);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    scrap.setAccessibilityDelegate(null);  }}  }
class C{  public static String render(Tree tree){  StringBuilder sb=new StringBuilder();  renderTree(tree,0,false,false,false,true,sb);  sb.append('\n');  return sb.toString();}  }
class C{  public void testBug3540() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("testBug3540","(x int, out y int)\nBEGIN\nSELECT 1;end\n");  this.rs=this.conn.getMetaData().getProcedureColumns(null,null,"testBug3540%","%");  assertTrue(this.rs.next());  assertEquals("testBug3540",this.rs.getString(3));  assertEquals("x",this.rs.getString(4));  assertTrue(this.rs.next());  assertEquals("testBug3540",this.rs.getString(3));  assertEquals("y",this.rs.getString(4));  assertTrue(!this.rs.next());}  }
class C{  public void clear(){  action.call();}  }
class C{  protected String assembleDefaultName(String storageSystemSerialNumber,String volumeNativeId){  StringBuilder nameBuilder=new StringBuilder();  nameBuilder.append(VPlexApiConstants.VOLUME_NAME_PREFIX);  nameBuilder.append(storageSystemSerialNumber);  nameBuilder.append(VPlexApiConstants.HYPHEN_OPERATOR);  nameBuilder.append(volumeNativeId);  return nameBuilder.toString();}  }
class C{  public static <T>Map<VM,T> invokeInEveryVM(final SerializableCallableIF<T> callable){  return invokeInEveryVM(null,callable);}  }
class C{  public boolean hasPriority(){  return hasExtension(Priority.class);}  }
class C{  public static UserAccess createUserAccess(){  return new UserAccessImpl();}  }
class C{  public static void attachProductFeaturesToCategory(String productCategoryId,Set<String> productFeatureTypeIdsToInclude,Set<String> productFeatureTypeIdsToExclude,Delegator delegator,boolean doSubCategories,Timestamp nowTimestamp) throws GenericEntityException {  if (nowTimestamp == null) {    nowTimestamp=UtilDateTime.nowTimestamp();  }  List<GenericValue> subCategoryList=EntityQuery.use(delegator).from("ProductCategoryRollup").where("parentProductCategoryId",productCategoryId).queryList();  if (doSubCategories) {    for (    GenericValue productCategoryRollup : subCategoryList) {      attachProductFeaturesToCategory(productCategoryRollup.getString("productCategoryId"),productFeatureTypeIdsToInclude,productFeatureTypeIdsToExclude,delegator,true,nowTimestamp);    }  }  Map<String,Set<String>> productFeatureIdByTypeIdSetMap=FastMap.newInstance();  List<GenericValue> productCategoryMemberList=EntityQuery.use(delegator).from("ProductCategoryMember").where("productCategoryId",productCategoryId).queryList();  for (  GenericValue productCategoryMember : productCategoryMemberList) {    String productId=productCategoryMember.getString("productId");    EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId),EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp),EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);    EntityListIterator productFeatureAndApplEli=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where(condition).queryIterator();    GenericValue productFeatureAndAppl=null;    while ((productFeatureAndAppl=productFeatureAndApplEli.next()) != null) {      String productFeatureId=productFeatureAndAppl.getString("productFeatureId");      String productFeatureTypeId=productFeatureAndAppl.getString("productFeatureTypeId");      if (UtilValidate.isNotEmpty(productFeatureTypeIdsToInclude) && !productFeatureTypeIdsToInclude.contains(productFeatureTypeId)) {        continue;      }      if (productFeatureTypeIdsToExclude != null && productFeatureTypeIdsToExclude.contains(productFeatureTypeId)) {        continue;      }      Set<String> productFeatureIdSet=productFeatureIdByTypeIdSetMap.get(productFeatureTypeId);      if (productFeatureIdSet == null) {        productFeatureIdSet=FastSet.newInstance();        productFeatureIdByTypeIdSetMap.put(productFeatureTypeId,productFeatureIdSet);      }      productFeatureIdSet.add(productFeatureId);    }    productFeatureAndApplEli.close();  }  for (  Map.Entry<String,Set<String>> entry : productFeatureIdByTypeIdSetMap.entrySet()) {    String productFeatureTypeId=entry.getKey();    Set<String> productFeatureIdSet=entry.getValue();    String productFeatureGroupId=productCategoryId + "_" + productFeatureTypeId;    if (productFeatureGroupId.length() > 20) {      Debug.logWarning("Manufactured productFeatureGroupId was greater than 20 characters, means that we had some long productCategoryId and/or productFeatureTypeId values, at the category part should be unique since it is first, so if the feature type isn't unique it just means more than one type of feature will go into the category...",module);      productFeatureGroupId=productFeatureGroupId.substring(0,20);    }    GenericValue productFeatureGroup=EntityQuery.use(delegator).from("ProductFeatureGroup").where("productFeatureGroupId",productFeatureGroupId).queryOne();    if (productFeatureGroup == null) {      String description="Feature Group for type [" + productFeatureTypeId + "] features in category ["+ productCategoryId+ "]";      productFeatureGroup=delegator.makeValue("ProductFeatureGroup",UtilMisc.toMap("productFeatureGroupId",productFeatureGroupId,"description",description));      productFeatureGroup.create();      GenericValue productFeatureCatGrpAppl=delegator.makeValue("ProductFeatureCatGrpAppl",UtilMisc.toMap("productFeatureGroupId",productFeatureGroupId,"productCategoryId",productCategoryId,"fromDate",nowTimestamp));      productFeatureCatGrpAppl.create();    }    for (    String productFeatureId : productFeatureIdSet) {      EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productFeatureId",EntityOperator.EQUALS,productFeatureId),EntityCondition.makeCondition("productFeatureGroupId",EntityOperator.EQUALS,productFeatureGroupId),EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp),EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);      if (EntityQuery.use(delegator).from("ProductFeatureGroupAppl").where(condition).queryCount() == 0) {        GenericValue productFeatureGroupAppl=delegator.makeValue("ProductFeatureGroupAppl",UtilMisc.toMap("productFeatureGroupId",productFeatureGroupId,"productFeatureId",productFeatureId,"fromDate",nowTimestamp));        productFeatureGroupAppl.create();      }    }  }  for (  GenericValue productCategoryRollup : subCategoryList) {    String subProductCategoryId=productCategoryRollup.getString("productCategoryId");    EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productCategoryId",EntityOperator.EQUALS,subProductCategoryId),EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp),EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);    EntityListIterator productFeatureCatGrpApplEli=EntityQuery.use(delegator).from("ProductFeatureCatGrpAppl").where(condition).queryIterator();    GenericValue productFeatureCatGrpAppl=null;    while ((productFeatureCatGrpAppl=productFeatureCatGrpApplEli.next()) != null) {      String productFeatureGroupId=productFeatureCatGrpAppl.getString("productFeatureGroupId");      EntityCondition checkCondition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productCategoryId",EntityOperator.EQUALS,productCategoryId),EntityCondition.makeCondition("productFeatureGroupId",EntityOperator.EQUALS,productFeatureGroupId),EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp),EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);      if (EntityQuery.use(delegator).from("ProductFeatureCatGrpAppl").where(checkCondition).queryCount() == 0) {        GenericValue productFeatureGroupAppl=delegator.makeValue("ProductFeatureCatGrpAppl",UtilMisc.toMap("productFeatureGroupId",productFeatureGroupId,"productCategoryId",productCategoryId,"fromDate",nowTimestamp));        productFeatureGroupAppl.create();      }    }    productFeatureCatGrpApplEli.close();  }}  }
class C{  @Override public String lset(final String key,final long index,final String value){  checkIsInMultiOrPipeline();  client.lset(key,index,value);  return client.getStatusCodeReply();}  }
class C{  private void checkValid(Polygon g){  checkInvalidCoordinates(g);  if (validErr != null)   return;  checkClosedRings(g);  if (validErr != null)   return;  GeometryGraph graph=new GeometryGraph(0,g);  checkTooFewPoints(graph);  if (validErr != null)   return;  checkConsistentArea(graph);  if (validErr != null)   return;  if (!isSelfTouchingRingFormingHoleValid) {    checkNoSelfIntersectingRings(graph);    if (validErr != null)     return;  }  checkHolesInShell(g,graph);  if (validErr != null)   return;  checkHolesNotNested(g,graph);  if (validErr != null)   return;  checkConnectedInteriors(graph);}  }
class C{  private LinearRing readLinearRingText() throws IOException, ParseException {  return geometryFactory.createLinearRing(getCoordinates());}  }
class C{  public void dimOnListRowMenuSwiped(float alpha){  alpha=Math.max(alpha,maxAlpha);  menuIndicatorView.setAlpha(alpha);  leftIndicatorView.setAlpha(alpha);  rightIndicatorView.setAlpha(alpha);  textView.setAlpha(alpha);}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  public boolean hasHeader(String header){  return getHeaders().containsKey(header);}  }
class C{  public void leaveBed(boolean setSpawn){  Preconditions.checkState(bed != null,"Player is not in bed");  GlowBlock head=BlockBed.getHead(bed);  GlowBlock foot=BlockBed.getFoot(bed);  Block exitBlock=BlockBed.getExitLocation(head,foot);  if (exitBlock == null) {    exitBlock=head.getRelative(BlockFace.UP);  }  Location exitLocation=exitBlock.getLocation().add(0.5,0.1,0.5);  if (setSpawn) {    setBedSpawnLocation(head.getLocation());  }  BlockBed.setOccupied(head,foot,false);  bed=null;  sleeping=false;  setRawLocation(exitLocation,false);  teleported=true;  EventFactory.callEvent(new PlayerBedLeaveEvent(this,head));  getSession().send(new AnimateEntityMessage(SELF_ID,AnimateEntityMessage.OUT_LEAVE_BED));  AnimateEntityMessage msg=new AnimateEntityMessage(getEntityId(),AnimateEntityMessage.OUT_LEAVE_BED);  world.getRawPlayers().stream().filter(null).forEach(null);}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  @Override public int isNullable(int columnIndex){  return ResultSetMetaData.columnNullableUnknown;}  }
class C{  public static void main(String[] args) throws IOException, ServiceException {  String locale=null;  String itemType=null;  args=init(args,"Google-ItemTypesExample-1.0");  if (args.length == 0) {  } else   if (args.length == 1) {    locale=args[0];  } else   if (args.length == 2) {    locale=args[0];    itemType=args[1];  } else {    System.err.println("Invalid argument count.");    System.err.println("Expected either two arguments, to get an itemtype:");    System.err.println(" locale itemtype");    System.err.println("or one argument, to get the itemtypes of a locale:");    System.err.println(" locale");    System.err.println("or no argument, to get the locales.");    System.exit(1);  }  if (locale == null) {    queryLocales();  } else {    if (itemType == null) {      queryItemTypes(locale);    } else {      queryItemType(locale,itemType);    }  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  OHLCSeriesCollection clone=(OHLCSeriesCollection)super.clone();  clone.data=(List)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public KeyStroke[] keys(){  if (arrayTable == null) {    return null;  }  KeyStroke[] keys=new KeyStroke[arrayTable.size()];  arrayTable.getKeys(keys);  return keys;}  }
class C{  public static IntRange downTo(int endpoint,BoundType boundType){switch (boundType) {case OPEN:    return greaterThan(endpoint);case CLOSED:  return atLeast(endpoint);default :throw new AssertionError();}}  }
class C{  public synchronized void verify(PublicKey key,String sigProvider) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {  if (sigProvider == null) {    sigProvider="";  }  if ((verifiedPublicKey != null) && verifiedPublicKey.equals(key)) {    if (sigProvider.equals(verifiedProvider)) {      return;    }  }  if (signedCRL == null) {    throw new CRLException("Uninitialized CRL");  }  Signature sigVerf=null;  if (sigProvider.length() == 0) {    sigVerf=Signature.getInstance(sigAlgId.getName());  } else {    sigVerf=Signature.getInstance(sigAlgId.getName(),sigProvider);  }  sigVerf.initVerify(key);  if (tbsCertList == null) {    throw new CRLException("Uninitialized CRL");  }  sigVerf.update(tbsCertList,0,tbsCertList.length);  if (!sigVerf.verify(signature)) {    throw new SignatureException("Signature does not match.");  }  verifiedPublicKey=key;  verifiedProvider=sigProvider;}  }
class C{  @DataProvider(name="emptyMap") public Object[][] providesEmptyMap(){  return new Object[][]{{newEmptyMap()}};}  }
class C{  public boolean equals(final Object o){  if (!(o instanceof SinkRequest))   return false;  final SinkRequest r=(SinkRequest)o;  return joinTask == r.joinTask && locator.equals(r.locator);}  }
class C{  protected int readName(int type) throws IOException, XMLException {  if (current == -1) {    throw createXMLException("unexpected.eof");  }  if (!XMLUtilities.isXMLNameFirstCharacter((char)current)) {    throw createXMLException("invalid.name");  }  do {    nextChar();  } while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));  return type;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.EXPRESSION__LEFT:    setLeft((Expression)null);  return;case GamlPackage.EXPRESSION__OP:setOp(OP_EDEFAULT);return;case GamlPackage.EXPRESSION__RIGHT:setRight((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public HtmlLabelRenderer(){  super(String.class,null);}  }
class C{  public static boolean isStandardAddRemoveNotify(Component component){  JRootPane rootPane=findMainRootPane(component);  return rootPane == null || rootPane.getClientProperty(DISPOSE_TEMPORARY) == null;}  }
class C{  public DrawerBuilder withCloseOnClick(boolean closeOnClick){  this.mCloseOnClick=closeOnClick;  return this;}  }
class C{  public static boolean isContentRelated(Class<? extends TLObject> clazz){  return !clazz.getSimpleName().startsWith("MT");}  }
class C{  @Override public void addBatch(String sql) throws SQLException {  try {    debugCodeCall("addBatch",sql);    checkClosed();    sql=JdbcConnection.translateSQL(sql,escapeProcessing);    if (batchCommands == null) {      batchCommands=New.arrayList();    }    batchCommands.add(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static void appendSeparator(DateTimeFormatterBuilder bld,boolean extended){  if (extended) {    bld.appendLiteral('-');  }}  }
class C{  private double roundMGRS(double value){  double ivalue=Math.floor(value);  long ival;  double fraction=value - ivalue;  ival=(long)(ivalue);  if ((fraction > 0.5) || ((fraction == 0.5) && (ival % 2 == 1)))   ival++;  return (double)ival;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported06.class,args);}  }
class C{  public static Intent createResponseHandlingIntent(Context context,Uri responseUri){  Intent intent=createBaseIntent(context);  intent.setData(responseUri);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);  return intent;}  }
class C{  private String computeTimeSeparationStringFromMsgTimeStamp(long timestamp){  long now=new Date().getTime();  if (now - timestamp < MINUTE && mContext != null) {    return mContext.getString(R.string.time_just_now);  } else   if (now - timestamp < HOUR) {    return DateUtils.getRelativeTimeSpanString(timestamp,now,0,0).toString();  } else {    return DateUtils.formatSameDayTime(timestamp,now,DateFormat.SHORT,DateFormat.SHORT).toString();  }}  }
class C{  @Override public int compareTo(GeoLocation o){  if (this.equals(o))   return 0;  long s=(ph(this.getPopulation()) << 30) + this.hashCode();  long t=(ph(o.getPopulation()) << 30) + o.hashCode();  if (s > t)   return -1;  if (s < t)   return 1;  return 0;}  }
class C{  public int remove(Value begin,Value end){  List<byte[]> digestList=getDigestList();  Key beginKey=makeSubKey(begin);  Key endKey=makeSubKey(end);  int start=digestList.indexOf(beginKey.digest);  int stop=digestList.indexOf(endKey.digest);  int count=stop - start + 1;  ;  for (int i=start; i < stop; i++) {    Key subKey=new Key(this.key.namespace,(byte[])digestList.get(i),null,null);    client.delete(this.policy,subKey);  }  client.operate(this.policy,this.key,ListOperation.removeRange(this.binNameString,start,count));  return count;}  }
class C{  public OAuthHelper(@NonNull String consumerKey,@NonNull String consumerSecret,@NonNull String callbackUrl){  this.callbackUrl=callbackUrl;  consumer=new DefaultOAuthConsumer(consumerKey,consumerSecret);  provider=new DefaultOAuthProvider(REQUEST_TOKEN_URL,ACCESS_TOKEN_URL,AUTHORIZE_URL);}  }
class C{  public BytesRestResponse(RestStatus status,String contentType,BytesReference content){  this.status=status;  this.content=content;  this.contentType=contentType;}  }
class C{  private void pullViewPositionFromModel(){  Point2D p=new Point2D.Double(getTextObject().getX(),getTextObject().getY());  this.setGlobalTranslation(p);}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public MailMessage addRecipientTo(String address){  if (address != null) {    to.add(address);  }  return this;}  }
class C{  @VisibleForTesting protected void logProcessFailures(Resource resource){  StringBuilder sb=new StringBuilder();  sb.append("Resource [");  sb.append(resource.getTitleAndShortname());  sb.append("] has ");  if (resourceManager.getProcessFailures().containsKey(resource.getShortname())) {    List<Date> failures=resourceManager.getProcessFailures().get(resource.getShortname());    sb.append(String.valueOf(failures.size()));    sb.append(" failed publications on: ");    Iterator<Date> iter=failures.iterator();    while (iter.hasNext()) {      sb.append(DateFormatUtils.format(iter.next(),"yyyy-MM-dd HH:mm:SS"));      if (iter.hasNext()) {        sb.append(", ");      } else {        sb.append(".");      }    }  } else {    sb.append("0 failed publications");  }  LOG.debug(sb.toString());}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int docContext=dtm.getDocument();  if (DTM.NULL == docContext)   error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);  XObject arg=m_arg0.execute(xctxt);  int argType=arg.getType();  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());  NodeSetDTM nodeSet=nodes.mutableNodeset();  if (XObject.CLASS_NODESET == argType) {    DTMIterator ni=arg.iter();    StringVector usedrefs=null;    int pos=ni.nextNode();    while (DTM.NULL != pos) {      DTM ndtm=ni.getDTM(pos);      String refval=ndtm.getStringValue(pos).toString();      pos=ni.nextNode();      usedrefs=getNodesByID(xctxt,docContext,refval,usedrefs,nodeSet,DTM.NULL != pos);    }  } else   if (XObject.CLASS_NULL == argType) {    return nodes;  } else {    String refval=arg.str();    getNodesByID(xctxt,docContext,refval,null,nodeSet,false);  }  return nodes;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:03.516 -0500",hash_original_method="C17F5F6F39FEAB50212EA7D808E14AB6",hash_generated_method="14895F7A4DF93FE4018C5567C0185149") void clearExpiredCookies(long now){  if (mDataBase == null) {    return;  }  mDataBase.clearExpiredCookies(now);}  }
class C{  public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;    m_docIsEmpty=false;  } else   if (m_cdataTagOpen)   closeCDATA();  try {    if (m_needToOutputDocTypeDecl) {      if (null != getDoctypeSystem()) {        outputDocTypeDecl(name,true);      }      m_needToOutputDocTypeDecl=false;    }    if (m_elemContext.m_startTagOpen) {      closeStartTag();      m_elemContext.m_startTagOpen=false;    }    if (namespaceURI != null)     ensurePrefixIsDeclared(namespaceURI,name);    m_ispreserve=false;    if (shouldIndent() && m_startNewLine) {      indent();    }    m_startNewLine=true;    final java.io.Writer writer=m_writer;    writer.write('<');    writer.write(name);  } catch (  IOException e) {    throw new SAXException(e);  }  if (atts != null)   addAttributes(atts);  m_elemContext=m_elemContext.push(namespaceURI,localName,name);  m_isprevtext=false;  if (m_tracer != null)   firePseudoAttributes();}  }
class C{  public static int copy(File in,File out) throws IOException {  Assert.notNull(in,"No input File specified");  Assert.notNull(out,"No output File specified");  return copy(new BufferedInputStream(new FileInputStream(in)),new BufferedOutputStream(new FileOutputStream(out)));}  }
class C{  @Override protected void cleanup(){  die();  this.sourceBuffer=null;  super.cleanup();}  }
class C{  public boolean isLocal(){  return loc.isLocal();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.437 -0500",hash_original_method="92692099E41FF98F0151DCCF5CDE9533",hash_generated_method="7FE21AC05C7F0A0FC6BB932DDC01DE96") public Console format(String format,Object... args){  Formatter f=new Formatter(writer);  f.format(format,args);  f.flush();  return this;}  }
class C{  protected void paintBackground(Graphics g,JMenuItem menuItem,Color bgColor){  ButtonModel model=menuItem.getModel();  Color oldColor=g.getColor();  int menuWidth=menuItem.getWidth();  int menuHeight=menuItem.getHeight();  if (menuItem.isOpaque()) {    if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {      g.setColor(bgColor);      g.fillRect(0,0,menuWidth,menuHeight);    } else {      g.setColor(menuItem.getBackground());      g.fillRect(0,0,menuWidth,menuHeight);    }    g.setColor(oldColor);  } else   if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {    __Icon9Factory__.getInstance().getBgIcon_ItemSelected().draw((Graphics2D)g,0,0,menuWidth,menuHeight);  }}  }
class C{  public static void UNREACHABLE() throws OptimizingCompilerException {  throw new OptimizingCompilerException("Executed UNREACHABLE code");}  }
class C{  private JPanel createSubGroupPanel(String labelText){  JLabel subGroupLabel=new JLabel();  Font font=subGroupLabel.getFont();  font=font.deriveFont(Font.BOLD,14f);  subGroupLabel.setFont(font);  subGroupLabel.setForeground(SettingsTabs.COLOR_SUBGROUP);  subGroupLabel.setText(labelText);  int top=SUBGROUP_TOP_MARGIN;  if (isFirstSubGroup) {    isFirstSubGroup=false;    top=FIRST_SUBGROUP_TOP_MARGIN;  }  subGroupLabel.setBorder(BorderFactory.createEmptyBorder(top,0,7,0));  JPanel subGroupPanel=new JPanel();  subGroupPanel.setLayout(new BoxLayout(subGroupPanel,BoxLayout.LINE_AXIS));  subGroupPanel.add(subGroupLabel);  subGroupPanel.add(Box.createHorizontalGlue());  return subGroupPanel;}  }
class C{  public void testBatteryUsage_showTrackList(){  recordingLongTrack(true,R.string.track_detail_map_tab);}  }
class C{  public ClientMessage sendMessage(String address,byte[] body){  return sendMessage(SimpleString.toSimpleString(address),body);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public static boolean isHttpsScheme(String value){  if (value == null) {    return false;  }  return URL_SCHEME_MATCHER.match(HTTPS_SCHEME,value);}  }
class C{  @Override public void place(Node r){  m_noLevels=Node.getHeight(r,0) + 1;  m_yRatio=1 / (double)m_noLevels;  m_levels=new double[m_noLevels];  m_levelNode=new int[m_noLevels];  for (int noa=0; noa < m_noLevels; noa++) {    m_levels[noa]=1;    m_levelNode[noa]=0;  }  setNumOfNodes(r,0);  for (int noa=0; noa < m_noLevels; noa++) {    m_levels[noa]=1 / m_levels[noa];  }  placer(r,0);}  }
class C{  public synchronized void unsetLogTargets(final boolean recursive){  if (null != m_parent) {    m_logTargets=m_parent.safeGetLogTargets();  } else {    m_logTargets=null;  }  m_logTargetsForceSet=false;  resetChildLogTargets(recursive);}  }
class C{  public Supplier<Pair<Integer,JsonNode>> handlePost(StateContext state) throws HttpStatusException {  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  synchronized void _removeDeeply(Parameter parameter){  if (checked)   return;  checked=true;  remove(parameter);  int size=parents.size();  for (int x=0; x < size; x++)   ((ParameterDatabase)(parents.elementAt(x))).removeDeeply(parameter);}  }
class C{  private synchronized void notifyLoggerCreated(final String category,final Logger logger){  if (null != m_loggerListener) {    m_loggerListener.loggerCreated(category,logger);  }}  }
class C{  @Override public <T>T unwrap(Class<T> iface) throws SQLException {  throw DbException.getUnsupportedException("unwrap");}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,new Byte((byte)readInt(items[readUnsignedShort(v)])));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,new Short((short)readInt(items[readUnsignedShort(v)])));v+=2;break;case 'C':av.visit(name,new Character((char)readInt(items[readUnsignedShort(v)])));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  @Override protected void notifyPostTableBuild(T table){  if (this.modelChanged() || this.dataChanged()) {    Header header=new Header(this.header().tag(),table.dataLength());    ((Table)table).header=header;  }}  }
class C{  public static void main(String[] args) throws IOException {  List<Byte> binBook=createBinBook();  FileOutputStream out=new FileOutputStream("../src/book.bin");  int bookLen=binBook.size();  byte[] binBookA=new byte[bookLen];  for (int i=0; i < bookLen; i++)   binBookA[i]=binBook.get(i);  out.write(binBookA);  out.close();}  }
class C{  public boolean canHandleInputOperationDirectly(String operationName){  return iface.containsOperation(operationName);}  }
class C{  public <R>Stream<R> map(BiFunction<? super K,? super V,? extends R> mapper){  return map(null);}  }
class C{  public Line3D(Stack<Vector3> points,float thickness){  this(points,thickness,null);}  }
class C{  public static float valueOfHexFloatLiteral(char[] source){  long bits=convertHexFloatingPointLiteralToBits(source);  return Float.intBitsToFloat((int)bits);}  }
class C{  public void exportData() throws IOException, SailException, RDFHandlerException {  prepare();  final CloseableIteration<? extends Statement,SailException> itr=conn.getStatements(null,null,null,includeInferred,new Resource[]{});  try {    final File file=new File(kbdir,"data." + format.getDefaultFileExtension() + ".gz");    System.out.println("Writing " + file);    final OutputStream os=new GZIPOutputStream(new FileOutputStream(file));    try {      final RDFWriter writer=RDFWriterRegistry.getInstance().get(format).getWriter(os);      writer.startRDF();      while (itr.hasNext()) {        final Statement stmt=itr.next();        writer.handleStatement(stmt);      }      writer.endRDF();    }  finally {      os.close();    }  }  finally {    itr.close();  }}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public OpApplNode(UniqueString us,ExprOrOpArgNode[] ops,FormalParamNode[] odns,TreeNode stn,ModuleNode mn){  super(OpApplKind,stn);  this.operands=ops;  this.unboundedBoundSymbols=odns;  this.boundedBoundSymbols=null;  this.tupleOrs=null;  this.ranges=new ExprNode[0];  this.operator=Context.getGlobalContext().getSymbol(us);}  }
class C{  public boolean isReplyPath(){  return isReplyPath(esmClass);}  }
class C{  public void close(){}  }
class C{  private void toggleMultiSelectionMode(){  resetActivityTitle();  mIsMultiSelectionMode=!mIsMultiSelectionMode;  mAdapter.setMultiSelectionMode(mIsMultiSelectionMode);  refreshMenuEntries();  mAdapter.notifyDataSetChanged();}  }
class C{  public Map<String,Object> read(final Schema schema,final Object primaryKey){  final TPS tps=(TPS)read(schema,primaryKey,MIN_TIMESTAMP,CURRENT_ROW,null);  if (tps == null) {    return null;  }  return tps.asMap();}  }
class C{  private void performFadeOut(){  if (!translucencySupported) {    close();  } else {    float opacity=window.getOpacity();    if (opacity < 0.1) {      close();    } else {      setOpacity(opacity - 0.05f);    }  }}  }
class C{  public boolean containsCategoricalData(){  return categoricalValues.length > 0;}  }
class C{  public int link(final int size){  _currentFrameBottom=_frameTop;  _frameTop+=size;  if (_frameTop >= _stackFrames.length) {    XObject newsf[]=new XObject[_stackFrames.length + XPathContext.RECURSIONLIMIT + size];    System.arraycopy(_stackFrames,0,newsf,0,_stackFrames.length);    _stackFrames=newsf;  }  if (_linksTop + 1 >= _links.length) {    int newlinks[]=new int[_links.length + (CLEARLIMITATION * 2)];    System.arraycopy(_links,0,newlinks,0,_links.length);    _links=newlinks;  }  _links[_linksTop++]=_currentFrameBottom;  return _currentFrameBottom;}  }
class C{  private String convertLessThanOneThousand(int number){  String soFar;  if (number % 100 < 20) {    soFar=numNames[number % 100];    number/=100;  } else {    soFar=numNames[number % 10];    number/=10;    soFar=tensNames[number % 10] + soFar;    number/=10;  }  if (number == 0)   return soFar;  return numNames[number] + "Ratus " + soFar;}  }
class C{  public void addFieldProperty(String name,String accessorField){  fieldProperties.add(new LegacyFieldPropDesc(name,accessorField));}  }
class C{  public String bpartner(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_BPartner_ID=(Integer)value;  if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)   return "";  String sql="SELECT p.AD_Language,p.C_PaymentTerm_ID," + "p.M_PriceList_ID,p.PaymentRule,p.POReference," + "p.SO_Description,p.IsDiscountPrinted,"+ "p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,"+ "l.C_BPartner_Location_ID,c.AD_User_ID "+ "FROM C_BPartner p, C_BPartner_Location l, AD_User c "+ "WHERE l.IsActive='Y' AND p.C_BPartner_ID=l.C_BPartner_ID(+)"+ " AND p.C_BPartner_ID=c.C_BPartner_ID(+)"+ " AND p.C_BPartner_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_BPartner_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      boolean IsSOTrx="Y".equals(Env.getContext(ctx,WindowNo,"IsSOTrx"));      if (!IsSOTrx) {        Integer ii=new Integer(rs.getInt("C_BPartner_Location_ID"));        if (rs.wasNull())         mTab.setValue("C_BPartner_Location_ID",null); else         mTab.setValue("C_BPartner_Location_ID",ii);        ii=new Integer(rs.getInt("AD_User_ID"));        if (rs.wasNull())         mTab.setValue("AD_User_ID",null); else         mTab.setValue("AD_User_ID",ii);      }      if (IsSOTrx) {        double CreditAvailable=rs.getDouble("CreditAvailable");        if (!rs.wasNull() && CreditAvailable < 0)         mTab.fireDataStatusEEvent("CreditLimitOver",DisplayType.getNumberFormat(DisplayType.Amount).format(CreditAvailable),false);      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);  }  return "";}  }
class C{  public boolean isValidName(){  throw new UnsupportedOperationException();}  }
class C{  public boolean deploy(MMedia[] media){  if (this.getIP_Address().equals("127.0.0.1") || this.getName().equals("localhost")) {    log.warning("You have not defined your own server, we will not really deploy to localhost!");    return true;  }  FTPClient ftp=new FTPClient();  try {    ftp.connect(getIP_Address());    if (ftp.login(getUserName(),getPassword()))     log.info("Connected to " + getIP_Address() + " as "+ getUserName()); else {      log.warning("Could NOT connect to " + getIP_Address() + " as "+ getUserName());      return false;    }  } catch (  Exception e) {    log.log(Level.WARNING,"Could NOT connect to " + getIP_Address() + " as "+ getUserName(),e);    return false;  }  boolean success=true;  String cmd=null;  try {    cmd="cwd";    ftp.changeWorkingDirectory(getFolder());    cmd="list";    String[] fileNames=ftp.listNames();    log.log(Level.FINE,"Number of files in " + getFolder() + ": "+ fileNames.length);    cmd="bin";    ftp.setFileType(FTPClient.BINARY_FILE_TYPE);    for (int i=0; i < media.length; i++) {      if (!media[i].isSummary()) {        log.log(Level.INFO," Deploying Media Item:" + media[i].get_ID() + media[i].getExtension());        MImage thisImage=media[i].getImage();        byte[] buffer=thisImage.getData();        ByteArrayInputStream is=new ByteArrayInputStream(buffer);        String fileName=media[i].get_ID() + media[i].getExtension();        cmd="put " + fileName;        ftp.storeFile(fileName,is);        is.close();      }    }  } catch (  Exception e) {    log.log(Level.WARNING,cmd,e);    success=false;  }  try {    cmd="logout";    ftp.logout();    cmd="disconnect";    ftp.disconnect();  } catch (  Exception e) {    log.log(Level.WARNING,cmd,e);  }  ftp=null;  return success;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public void writeAll(List<String[]> allLines,boolean applyQuotesToAll){  writeAll((Iterable<String[]>)allLines,applyQuotesToAll);}  }
class C{  public boolean isApplicationPreConfigured(){  return isApplicationPreConfigured;}  }
class C{  private void checkRemarks() throws Exception {  int index;  if (_remarks != null) {    index=_remarks.indexOf("\"");    if (index > -1)     ISicresAdminBasicException.throwException(ISicresAdminVolumeKeys.EC_VOL_REMARKS_EXIST_QUOTES);  }}  }
class C{  public int length(){  return superSection.length();}  }
class C{  public static double[][] add(double[][] M1,double[][] M2){  if (M1.length != M2.length) {    System.err.println("Matrices must be of the same dimension");    return M1;  }  double[][] M=new double[M1.length][M1[0].length];  for (int i=0; i < M1.length; i++) {    if (M1[i].length != M2[i].length) {      System.err.println("Matrices must be of the same dimension");      return M1;    }    for (int j=0; j < M1[i].length; j++) {      M[i][j]=M1[i][j] + M2[i][j];    }  }  return M;}  }
class C{  private Number[] createVertices(int count){  Number[] v=new Number[count];  for (int i=0; i < count; i++) {    v[i]=new Integer(i);    graph.addVertex(v[i]);  }  return v;}  }
class C{  public boolean userCanDeleteDir(int connectedUserId,int dirId,String entidad) throws Exception {  boolean can=false;  int parentId;  int parentDirMgrId=ISicresAdminDefsKeys.NULL_ID;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    parentId=DbSelectFns.selectLongInteger(dbConn,DaoDATNodeTbl.getTblName(),DaoDATNodeTbl.getParentIdColName(true),table.getLoadNodeDirQual(dirId));    if (parentId == ISicresAdminDefsKeys.ROOT_DIR_ID)     parentDirMgrId=0; else     parentDirMgrId=this.getDirMgrId(parentId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_DELETE,ISicresAdminDefsKeys.NULL_ID,parentDirMgrId,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  @Override public int available() throws IOException {  return (outBytes_.length + inputStream_.available());}  }
class C{  public static List<Synapse> connectAllToAll(final List<Neuron> sourceNeurons,final List<Neuron> targetNeurons,final boolean recurrent,final boolean allowSelfConnection,final boolean looseSynapses){  ArrayList<Synapse> syns=new ArrayList<Synapse>((int)(targetNeurons.size() * sourceNeurons.size()));  if (recurrent && !allowSelfConnection) {    for (    Neuron source : sourceNeurons) {      for (      Neuron target : targetNeurons) {        if (!(source.equals(target))) {          Synapse s=new Synapse(source,target);          syns.add(s);        }      }    }  } else {    for (    Neuron source : sourceNeurons) {      for (      Neuron target : targetNeurons) {        Synapse s=new Synapse(source,target);        syns.add(s);      }    }  }  if (looseSynapses) {    for (    Synapse s : syns) {      s.getSource().getNetwork().addSynapse(s);    }  }  return syns;}  }
class C{  public void mouseClicked(MouseEvent e){}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static void drawTo(Bitmap src,Bitmap dest,int color){  clearBitmap(src,color);  Canvas canvas=new Canvas(dest);  canvas.drawBitmap(src,0,0,null);  canvas.setBitmap(null);}  }
class C{  public Grammar createGrammar(GrammarRootAST ast){  final Grammar g;  if (ast.grammarType == ANTLRParser.LEXER)   g=new LexerGrammar(this,ast); else   g=new Grammar(this,ast);  GrammarTransformPipeline.setGrammarPtr(g,ast);  return g;}  }
class C{  @DSComment("ViewAnimator, check callbacks modeled") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:26.367 -0500",hash_original_method="EFCC34AA69F6F34103211EDFAD5FB56A",hash_generated_method="C8057A111EAE9FF161EAC71A04735053") @android.view.RemotableViewMethod public void showNext(){  setDisplayedChild(mWhichChild + 1);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public double[] coefficients(){  double[] coefficients=new double[m_SelectedAttributes.length + 1];  int counter=0;  for (int i=0; i < m_SelectedAttributes.length; i++) {    if ((m_SelectedAttributes[i]) && ((i != m_ClassIndex))) {      coefficients[i]=m_Coefficients[counter++];    }  }  coefficients[m_SelectedAttributes.length]=m_Coefficients[counter];  return coefficients;}  }
class C{  protected Node newNode(){  return new SVGOMHandlerElement();}  }
class C{  protected void importButtonListener(){  try {    AzureManager manager=AzureManagerImpl.getManager();    List<Subscription> subList=manager.getSubscriptionList();    if (subList.size() > 0) {      if (manager.authenticated()) {        createSubscriptionDialog(false);      } else {        manager.clearImportedPublishSettingsFiles();        WizardCacheManager.clearSubscriptions();        createSubscriptionDialog(true);      }    } else {      createSubscriptionDialog(true);    }  } catch (  Exception ex) {    Activator.getDefault().log(Messages.importErrMsg,ex);  }}  }
class C{  public static void slideInFromLeftAnimator(@NonNull List<Animator> animators,@NonNull View view,RecyclerView recyclerView,@FloatRange(from=0.0,to=1.0) float percent){  alphaAnimator(animators,view,0f);  animators.add(ObjectAnimator.ofFloat(view,"translationX",-recyclerView.getLayoutManager().getWidth() * percent,0));  if (FlexibleAdapter.DEBUG)   Log.v(TAG,"Added LEFT Animator");}  }
class C{  public AuthenticationToken(String sharedSecretKey){  this.authMode=AuthenticationMode.SHARED_SECRET_KEY;  this.sharedSecretKey=sharedSecretKey;}  }
class C{  public boolean canLoad(Entity unit){  boolean result=false;  if (unit instanceof Dropship) {    Dropship ds=(Dropship)unit;    result=true;    if (ds.isDockCollarDamaged()) {      result=false;    }    if ((currentSpace < 1) || isDamaged()) {      result=false;    }  }  return result;}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  public boolean matches(double time,String line,String route){  boolean within=from <= time && time < to;  if (!within)   return false;  return matches(line,route);}  }
class C{  static void addSpecialKey(String specialKeyName,int specialKeyCode){  if (specialKeys == null) {    specialKeys=new Hashtable();  }  specialKeys.put(specialKeyName,new Integer(specialKeyCode));}  }
class C{  public void addError(InetSocketAddress address){  errors.add(address);}  }
class C{  public synchronized void trimToSize(){  if (elementData.length != elementCount) {    grow(elementCount);  }}  }
class C{  public static Instances makePartitionDataset(Instances D,int part[],int P,int N) throws Exception {  int L=D.classIndex();  Instances D_=new Instances(D);  D_.setClassIndex(-1);  D_=F.keepLabels(D,L,part);  D_.setClassIndex(part.length);  D_=PSUtils.PSTransformation(D_,P,N);  return D_;}  }
class C{  public void validate(String site,String filePath) throws Exception {  if (HDFSResourceUtils.isNullOrEmpty(site))   throw new Exception("Invalid Request Received ... Site is Empty Or Null..");  if (HDFSResourceUtils.isNullOrEmpty(filePath))   throw new Exception("Invalid Request Received ... file/Directory Path is Empty Or Null..");}  }
class C{  public boolean isIDcol(){  return m_isIDcol;}  }
class C{  public static TreebankNode selectHighestMatchingTreebankNode(JCas jCas,Annotation annotation){  TreebankNode highestNode=null;  int smallestDepth=Integer.MAX_VALUE;  for (  TreebankNode node : JCasUtil.selectCovered(jCas,TreebankNode.class,annotation)) {    if (node.getBegin() == annotation.getBegin() && node.getEnd() == annotation.getEnd()) {      int depth=getDepth(node);      if (depth < smallestDepth) {        highestNode=node;        smallestDepth=depth;      }    }  }  return highestNode;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_GUARD_2__MORE_GUARDS_1:    getMoreGuards_1().clear();  getMoreGuards_1().addAll((Collection<? extends MoreGuards_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void fillEntityFields(final ImportTuple tuple,final Object object,final Collection<ImportColumn> importColumns) throws Exception {  final Class clz=object.getClass();  PropertyDescriptor propertyDescriptor=null;  for (  ImportColumn importColumn : importColumns) {    try {      if (StringUtils.isNotBlank(importColumn.getName())) {        Object writeObject=object;        if (importColumn.getName().indexOf('.') == -1) {          propertyDescriptor=new PropertyDescriptor(importColumn.getName(),clz);        } else {          final String[] chain=importColumn.getName().split("\\.");          for (int i=0; i < chain.length - 1; i++) {            propertyDescriptor=new PropertyDescriptor(chain[i],writeObject.getClass());            writeObject=propertyDescriptor.getReadMethod().invoke(writeObject);          }          propertyDescriptor=new PropertyDescriptor(chain[chain.length - 1],writeObject.getClass());        }        Object singleObjectValue=tuple.getColumnValue(importColumn,valueDataAdapter);        if (importColumn.getLanguage() != null) {          final I18NModel model=new StringI18NModel((String)propertyDescriptor.getReadMethod().invoke(object));          model.putValue(importColumn.getLanguage(),singleObjectValue != null ? String.valueOf(singleObjectValue) : null);          singleObjectValue=model.toString();        }        if (singleObjectValue != null && !singleObjectValue.getClass().equals(propertyDescriptor.getPropertyType())) {          singleObjectValue=extendedConversionService.convert(singleObjectValue,TypeDescriptor.valueOf(singleObjectValue.getClass()),TypeDescriptor.valueOf((propertyDescriptor.getPropertyType())));        }        propertyDescriptor.getWriteMethod().invoke(writeObject,singleObjectValue);      }    } catch (    Exception exp) {      final String propName=propertyDescriptor != null ? propertyDescriptor.getName() : null;      final String propType=propertyDescriptor != null ? propertyDescriptor.getPropertyType().getName() : null;      throw new Exception(MessageFormat.format("Failed to process property name {0} type {1} object is {2}",propName,propType,object),exp);    }  }}  }
class C{  public SymbolTableEntryInternal steFor_$instanceof(){  return getSymbolTableEntryInternal("$instanceof",true);}  }
class C{  static void validateLabelFieldForTrainer(Schema inputSchema,String labelField){  Schema.Field prediction=inputSchema.getField(labelField);  if (prediction == null) {    throw new IllegalArgumentException(String.format("Label field %s does not exists in the input schema.",labelField));  }  Schema predictionSchema=prediction.getSchema();  Schema.Type predictionFieldType=predictionSchema.isNullableSimple() ? predictionSchema.getNonNullable().getType() : predictionSchema.getType();  if (predictionFieldType != Schema.Type.DOUBLE) {    throw new IllegalArgumentException(String.format("Label field must be of type Double, but was %s.",predictionFieldType));  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public @Test final void testCreationNegative1(){  thrown.expect(IllegalArgumentException.class);  new Role("");}  }
class C{  @Override public void clear(){}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","fjnu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void enlargeOffset(){  if (offset == 0) {    offCount=offCount == 0 ? 1 : offCount * 2;    offset=offCount;    Object[] narr=new Object[arr.length + offset];    for (int i=0; i < size; i++) {      narr[offset + i]=arr[i];    }    arr=narr;  }}  }
class C{  private void unsetBuffers(){  buffers=null;  curBuf=null;  curBufIndex=0;}  }
class C{  public static long copy(InputStream input,OutputStream output) throws IOException {  byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];  long count=0;  int n=0;  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public static boolean isOverlappingRoots(IPath rootPath1,IPath rootPath2){  if (rootPath1 == null || rootPath2 == null) {    return false;  }  return rootPath1.isPrefixOf(rootPath2) || rootPath2.isPrefixOf(rootPath1);}  }
class C{  SnapshotDescriptor copyTo(Buffer buffer){  this.buffer=buffer.writeLong(index).writeLong(timestamp).writeBoolean(locked).skip(BYTES - buffer.position()).flush();  return this;}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tFull class name of classifier to include, followed\n" + "\tby scheme options. May be specified multiple times.\n" + "\t(default: \"weka.classifiers.rules.ZeroR\")","B",1,"-B <classifier specification>"));  newVector.addAll(Collections.list(super.listOptions()));  for (  Classifier classifier : getClassifiers()) {    if (classifier instanceof OptionHandler) {      newVector.addElement(new Option("","",0,"\nOptions specific to classifier " + classifier.getClass().getName() + ":"));      newVector.addAll(Collections.list(((OptionHandler)classifier).listOptions()));    }  }  return newVector.elements();}  }
class C{  public SensorMatrixEditorException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public static Collection<AnnotationValue> resolveTypeQualifiers(AnnotationValue value){  LinkedList<AnnotationValue> result=new LinkedList<AnnotationValue>();  resolveTypeQualifierNicknames(value,result,new LinkedList<ClassDescriptor>());  return result;}  }
class C{  static String stripLeadingHyphens(String str){  if (str == null) {    return null;  }  if (str.startsWith("--")) {    return str.substring(2,str.length());  } else   if (str.startsWith("-")) {    return str.substring(1,str.length());  }  return str;}  }
class C{  public boolean isPinchZoomEnabled(){  return mPinchZoomEnabled;}  }
class C{  public static double[][] deleteColumnsRange(double[][] x,int J1,int J2){  double[][] array=new double[x.length][x[0].length - (J2 - J1 + 1)];  for (int i=0; i < array.length; i++) {    System.arraycopy(x[i],0,array[i],0,J1);    System.arraycopy(x[i],J2 + 1,array[i],J1,x[i].length - (J2 + 1));  }  return array;}  }
class C{  public static double P_Precision(int y[],int ypred[]){  if (allMissing(y)) {    return Double.NaN;  }  double tp=P_TruePositives(y,ypred);  double fp=P_FalsePositives(y,ypred);  if (tp == 0.0 && fp == 0.0)   return 0.0;  return tp / (tp + fp);}  }
class C{  private void handleClickEvent(final Event event){  for (int i=0; i < this.items.size(); i++) {    final LauncherItem item=this.items.get(i);    if (item.label != null && item.label.equals(event.widget)) {      if (this.selection != i) {        changeColor(this.selection,false);        this.selection=i;        changeColor(this.selection,true);      }      return;    }  }}  }
class C{  public void addNotify(){  super.addNotify();  enableInputMethodsIfNecessary();}  }
class C{  private void cancelInplaceEditing(){  if (myInplaceComponent == null || myInsideChange) {    return;  }  myInsideChange=true;  try {    LOG.assertTrue(myInplaceProperty != null);    LOG.assertTrue(myInplaceEditor != null);    removeInplaceEditorComponent();    myInplaceEditor.removePropertyEditorListener(myPropertyEditorListener);    myFocusWatcher.deinstall(myInplaceEditorComponent);    myInplaceComponent=null;    myInplaceEditorComponent=null;    myInplaceComponent=null;    disableEvents(MouseEvent.MOUSE_EVENT_MASK);  }  finally {    myInsideChange=false;  }  repaint();}  }
class C{  public void sendPacket(GridClockMessage msg,InetAddress addr,int port) throws IgniteCheckedException {  try {    DatagramPacket packet=new DatagramPacket(msg.toBytes(),GridClockMessage.PACKET_SIZE,addr,port);    if (log.isDebugEnabled())     log.debug("Sending time sync packet [msg=" + msg + ", addr="+ addr+ ", port="+ port);    sock.send(packet);  } catch (  IOException e) {    if (!sock.isClosed())     throw new IgniteCheckedException("Failed to send datagram message to remote node [addr=" + addr + ", port="+ port+ ", msg="+ msg+ ']',e);  }}  }
class C{  @Deprecated public static <V1,V2,V3,V4>GridTuple4<V1,V2,V3,V4> t4(){  return new GridTuple4<>();}  }
class C{  public ElapsedTimeCollector(){  super();  startTime=System.nanoTime();}  }
class C{  public ISPO[] array(){  assertOpen();  return stmts;}  }
class C{  private void initializeCommonReferencesForAllMatchers(ObjectLocalCache cache,CoordinatorClient coordinator){  Map<String,AttributeMatcher> uniqueMatcherMap=new HashMap<>();  @SuppressWarnings("unchecked") List<AttributeMatcher> vpoolMatchers=(List<AttributeMatcher>)getBeanFromContext(AttributeMatcher.VPOOL_MATCHERS);  for (  AttributeMatcher matcher : vpoolMatchers) {    uniqueMatcherMap.put(matcher.getClass().getSimpleName(),matcher);  }  @SuppressWarnings("unchecked") List<AttributeMatcher> basicMatchers=(List<AttributeMatcher>)getBeanFromContext(AttributeMatcher.BASIC_PLACEMENT_MATCHERS);  for (  AttributeMatcher matcher : basicMatchers) {    uniqueMatcherMap.put(matcher.getClass().getSimpleName(),matcher);  }  @SuppressWarnings("unchecked") List<AttributeMatcher> placementMatchers=(List<AttributeMatcher>)getBeanFromContext(AttributeMatcher.PLACEMENT_MATCHERS);  for (  AttributeMatcher matcher : placementMatchers) {    uniqueMatcherMap.put(matcher.getClass().getSimpleName(),matcher);  }  for (  AttributeMatcher matcher : uniqueMatcherMap.values()) {    matcher.setCoordinatorClient(coordinator);    matcher.setObjectCache(cache);  }}  }
class C{  public WriteSingleRegisterResponse(int reference,int value){  super();  setReference(reference);  setRegisterValue(value);  setDataLength(4);  setFunctionCode(Modbus.WRITE_SINGLE_REGISTER);}  }
class C{  static double incompleteBetaFraction2(double a,double b,double x) throws ArithmeticException {  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;  double k1, k2, k3, k4, k5, k6, k7, k8;  double r, t, ans, z, thresh;  int n;  k1=a;  k2=b - 1.0;  k3=a;  k4=a + 1.0;  k5=1.0;  k6=a + b;  k7=a + 1.0;  ;  k8=a + 2.0;  pkm2=0.0;  qkm2=1.0;  pkm1=1.0;  qkm1=1.0;  z=x / (1.0 - x);  ans=1.0;  r=1.0;  n=0;  thresh=3.0 * MACHEP;  do {    xk=-(z * k1 * k2) / (k3 * k4);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    xk=(z * k5 * k6) / (k7 * k8);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (qk != 0)     r=pk / qk;    if (r != 0) {      t=Math.abs((ans - r) / r);      ans=r;    } else     t=1.0;    if (t < thresh)     return ans;    k1+=1.0;    k2-=1.0;    k3+=2.0;    k4+=2.0;    k5+=1.0;    k6+=1.0;    k7+=2.0;    k8+=2.0;    if ((Math.abs(qk) + Math.abs(pk)) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {      pkm2*=big;      pkm1*=big;      qkm2*=big;      qkm1*=big;    }  } while (++n < 300);  return ans;}  }
class C{  public void register(DnsResolvedFields dnsResolvedFields) throws PayloadException, NetworkException {  try {    if (sLogger.isActivated()) {      sLogger.debug("Register to IMS");    }    if (dnsResolvedFields == null) {      dnsResolvedFields=getDnsResolvedFields();    }    mSip.initStack(mAccess.getIpAddress(),dnsResolvedFields.mIpAddress,dnsResolvedFields.mPort,mImsProxyProtocol,mTcpFallback);    mSip.getSipStack().addSipEventListener(mImsModule);    mRegistration.register();    if (sLogger.isActivated()) {      sLogger.debug("IMS registered: ".concat(Boolean.toString(mRegistration.isRegistered())));    }    if (!mRegistration.isRegistered()) {      return;    }    if (mRcsSettings.isSipKeepAliveEnabled() && !ListeningPoint.UDP.equals(mImsProxyProtocol)) {      mSip.getSipStack().getKeepAliveManager().start();    }  } catch (  UnknownHostException e) {    throw new PayloadException("Unable to register due to stack initialization failure for address : " + mImsProxyAddr,e);  }}  }
class C{  protected CascadedTable(){  this(TableTuple.class);}  }
class C{  public ParameterizedLinkedHashMap(Equality keyEquality){  super(keyEquality);  accessOrder=false;}  }
class C{  private static void resync(){  setScanner(new Scanner(new java.io.BufferedInputStream(System.in),CHARSET_NAME));}  }
class C{  public static String xmldsigtoRFC2253(String dn){  String normalized=normalize(dn,false);  return xmltoRFC(normalized);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_11:    return ((InternalEList<?>)getAnonymous_genExpr_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.GEN_EXPR___EQUALITY_OP_1:  return ((InternalEList<?>)getEqualityOp_1()).basicRemove(otherEnd,msgs);case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_21:return ((InternalEList<?>)getAnonymous_genExpr_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected void executeLoginCommand(final String email,final String password){  shoppingCartCommandFactory.execute(ShoppingCartCommand.CMD_LOGIN,cartMixin.getCurrentCart(),new HashMap<String,Object>(){{      put(ShoppingCartCommand.CMD_LOGIN_P_EMAIL,email);      put(ShoppingCartCommand.CMD_LOGIN_P_PASS,password);      put(ShoppingCartCommand.CMD_LOGIN,ShoppingCartCommand.CMD_LOGIN);    }  });}  }
class C{  public jMatrix solve(jMatrix B){  if (B.getRowDimension() != n) {    throw new IllegalArgumentException("jMatrix row dimensions must agree.");  }  if (!isspd) {    throw new RuntimeException("jMatrix is not symmetric positive definite.");  }  double[][] X=B.getArrayCopy();  int nx=B.getColumnDimension();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      for (int i=0; i < k; i++) {        X[k][j]-=X[i][j] * L[k][i];      }      X[k][j]/=L[k][k];    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      for (int i=k + 1; i < n; i++) {        X[k][j]-=X[i][j] * L[i][k];      }      X[k][j]/=L[k][k];    }  }  return new jMatrix(X,n,nx);}  }
class C{  private static boolean overflowInParse(long current,int digit,int radix){  if (current >= 0) {    if (current < maxValueDivs[radix]) {      return false;    }    if (current > maxValueDivs[radix]) {      return true;    }    return (digit > maxValueMods[radix]);  }  return true;}  }
class C{  private OAuth2AccessTokenEntity createAssociatedToken(final ClientDetailsEntity client,final Set<String> scope){  final OAuth2AccessTokenEntity oldToken=tokenService.getRegistrationAccessTokenForClient(client);  if (oldToken != null) {    tokenService.revokeAccessToken(oldToken);  }  final Map<String,String> authorizationParameters=Maps.newHashMap();  final OAuth2Request clientAuth=new OAuth2Request(authorizationParameters,client.getClientId(),Sets.newHashSet(new SimpleGrantedAuthority(OIDCConstants.ROLE_CLIENT)),true,scope,null,null,null,null);  final OAuth2Authentication authentication=new OAuth2Authentication(clientAuth,null);  final OAuth2AccessTokenEntity token=new OAuth2AccessTokenEntity();  token.setClient(client);  token.setScope(scope);  AuthenticationHolderEntity authHolder=new AuthenticationHolderEntity();  authHolder.setAuthentication(authentication);  authHolder=authenticationHolderRepository.save(authHolder);  token.setAuthenticationHolder(authHolder);  final JWTClaimsSet claims=new JWTClaimsSet.Builder().audience(Lists.newArrayList(client.getClientId())).issuer(configBean.getIssuer()).issueTime(new Date()).expirationTime(token.getExpiration()).jwtID(UUID.randomUUID().toString()).build();  final JWSAlgorithm signingAlg=jwtService.getDefaultSigningAlgorithm();  final JWSHeader header=new JWSHeader(signingAlg,null,null,null,null,null,null,null,null,null,jwtService.getDefaultSignerKeyId(),null,null);  final SignedJWT signed=new SignedJWT(header,claims);  jwtService.signJwt(signed);  token.setJwt(signed);  return token;}  }
class C{  private void onProfileImageClick(View v,boolean current){  IProfile profile=(IProfile)v.getTag(R.id.material_drawer_profile_header);  boolean consumed=false;  if (mOnAccountHeaderProfileImageListener != null) {    consumed=mOnAccountHeaderProfileImageListener.onProfileImageClick(v,profile,current);  }  if (!consumed) {    onProfileClick(v,current);  }}  }
class C{  public ClearScrollRequest(ActionRequest request){  super(request);}  }
class C{  public void endTimedEvent(@NonNull AnalyticsEvent event){  endTimedEvent(event.name());}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){  if (source == m_listenee) {    m_listenee=null;  }}  }
class C{  protected Rectangle2D trimPadding(Rectangle2D area){  this.padding.trim(area);  return area;}  }
class C{  public void stopAutoScroll(){  this.autoScrolling=false;}  }
class C{  public static RSAKey toRSAKey(Key key) throws InvalidKeyException {  if ((key instanceof RSAPrivateKeyImpl) || (key instanceof RSAPrivateCrtKeyImpl) || (key instanceof RSAPublicKeyImpl)) {    return (RSAKey)key;  } else {    return (RSAKey)INSTANCE.engineTranslateKey(key);  }}  }
class C{  public Interval(ReadableInstant start,ReadableDuration duration){  super(start,duration);}  }
class C{  static public int round(float x){  return (int)(x + BIG_ENOUGH_ROUND) - BIG_ENOUGH_INT;}  }
class C{  public static final Criterion headerDateBefore(String headerName,Date date,DateResolution res){  return new HeaderCriterion(headerName,new DateOperator(DateComparator.BEFORE,date,res));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("FactLine=[");  sb.append(getAD_Table_ID()).append(":").append(getRecord_ID()).append(",").append(m_acct).append(",Cur=").append(getC_Currency_ID()).append(", DR=").append(getAmtSourceDr()).append("|").append(getAmtAcctDr()).append(", CR=").append(getAmtSourceCr()).append("|").append(getAmtAcctCr()).append("]");  return sb.toString();}  }
class C{  public int read(ByteBuffer dst,int dstStart,int dstLength) throws IOException {  final int remaining=(int)Math.min(this.length - this.position,Integer.MAX_VALUE);  final int read=Math.min(remaining,dstLength);  final int bufferPosition=checkOffset(position,read);  final long srcAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;  if (dst.isDirect()) {    final long dstAddress=PlatformDependent.directBufferAddress(dst) + dstStart;    PlatformDependent.copyMemory(srcAddress,dstAddress,read);  } else {    final byte[] dstArray=dst.array();    PlatformDependent.copyMemory(srcAddress,dstArray,dstStart,read);  }  position+=read;  return read;}  }
class C{  public Vector3f interpolate(Vector3f beginVec,Vector3f finalVec,float changeAmnt){  this.x=(1 - changeAmnt) * beginVec.x + changeAmnt * finalVec.x;  this.y=(1 - changeAmnt) * beginVec.y + changeAmnt * finalVec.y;  this.z=(1 - changeAmnt) * beginVec.z + changeAmnt * finalVec.z;  return this;}  }
class C{  public void storeByte(final long address,final byte b){  m_data[(int)(address - m_address)]=b;}  }
class C{  public void removeProperty(String propertyName){  Property property=this.entityManager.find(Property.class,propertyName);  if (property != null) {    this.entityManager.remove(property);  }  super.removeProperty(propertyName);}  }
class C{  public AppMenuHandler(Activity activity,AppMenuPropertiesDelegate delegate,int menuResourceId){  mActivity=activity;  mDelegate=delegate;  mObservers=new ArrayList<AppMenuObserver>();  mMenuResourceId=menuResourceId;  mHardwareButtonMenuAnchor=activity.findViewById(R.id.menu_anchor_stub);  assert mHardwareButtonMenuAnchor != null : "Using AppMenu requires to have menu_anchor_stub view";}  }
class C{  public FciMax(IndependenceTest independenceTest,List<Node> searchVars){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());  Set<Node> remVars=new HashSet<>();  for (  Node node1 : this.variables) {    boolean search=false;    for (    Node node2 : searchVars) {      if (node1.getName().equals(node2.getName())) {        search=true;      }    }    if (!search) {      remVars.add(node1);    }  }  this.variables.removeAll(remVars);}  }
class C{  protected void updateXhTree(){  GPIndividual ind;  IXholon xhSys=xhRoot.getFirstChild();  IXholon xhGp;  for (int i=0; i < population.subpops[0].individuals.length; i++) {    xhGp=xhSys.getFirstChild().getNextSibling();    ind=(GPIndividual)population.subpops[0].individuals[i];    ind.trees[0].setParentChildLinks(xhGp);    setId(ind.trees[0]);    xhSys.setRoleName("fitness" + ((KozaFitness)ind.fitness).fitness());    xhSys=xhSys.getNextSibling();  }}  }
class C{  public Message(int id){  this(new Header(id));}  }
class C{  public static Boolean saveAs(Process process,boolean async){  String initial=null;  if (process.getRepositoryLocation() != null) {    initial=process.getRepositoryLocation().toString();  }  String loc=RepositoryLocationChooser.selectLocation(null,initial,RapidMinerGUI.getMainFrame(),true,false,false,true,true);  if (loc != null) {    try {      RepositoryLocation location=new RepositoryLocation(loc);      Entry entry=location.locateEntry();      if (entry instanceof ProcessEntry) {        if (SwingTools.showConfirmDialog("overwrite",ConfirmDialog.YES_NO_OPTION,entry.getLocation()) == ConfirmDialog.NO_OPTION) {          return false;        }      }      process.setProcessLocation(new RepositoryProcessLocation(location));    } catch (    MalformedRepositoryLocationException e) {      SwingTools.showSimpleErrorMessage("cannot_save_process",e,loc,e.getMessage());    }catch (    RepositoryException e) {      SwingTools.showSimpleErrorMessage("cannot_save_process",e,loc,e.getMessage());    }    if (async) {      SaveAction.saveAsync(process);      return null;    } else {      return SaveAction.save(process);    }  }  return false;}  }
class C{  private void checkSyncStashState(){  if (processResultState == null) {    LOG.error("unexpected result state during a check sync stash state");    return;  }  syncResult=projectRepositoryValidator == null ? new ProjectRepositoryValidator(processResultState).checkSyncStashState() : projectRepositoryValidator.checkSyncStashState();  syncStashCheckbox.setVisible(false);  syncStashCheckbox.setSelected(false);  warningHeader.setVisible(false);  warningMessage.setVisible(false);  checkBackgroundSessions();  if (syncResult.needsStash() && syncResult.needsSync()) {    setOkText(false);    syncStashCheckbox.setVisible(true);    assert syncResult.getTargetSyncSha() != null;    syncStashCheckbox.setText(GctBundle.getString("clouddebug.stash.local.changes.and.sync",syncResult.getTargetSyncSha().substring(0,7)));    syncStashCheckbox.setSelected(true);  } else   if (syncResult.needsStash()) {    setOkText(false);    syncStashCheckbox.setVisible(true);    syncStashCheckbox.setText(GctBundle.getString("clouddebug.stashbuttontext"));    syncStashCheckbox.setSelected(true);  } else   if (syncResult.needsSync() && syncResult.getTargetSyncSha() == null) {    setOkText(true);    warningHeader.setVisible(true);    warningMessage.setVisible(true);    warningMessage.setText(GctBundle.getString("clouddebug.no.matching.sha"));  } else   if (syncResult.needsSync()) {    setOkText(false);    syncStashCheckbox.setVisible(true);    assert syncResult.getTargetSyncSha() != null;    syncStashCheckbox.setText("Sync to " + syncResult.getTargetSyncSha().substring(0,7));    syncStashCheckbox.setSelected(true);  } else   if (!syncResult.hasRemoteRepository()) {    setOkText(true);    warningHeader.setVisible(true);    warningMessage.setVisible(true);    if (syncResult.getRepositoryType() != null) {      warningMessage.setText(GctBundle.getString("clouddebug.repositories.are.not.supported",syncResult.getRepositoryType()));    } else {      warningMessage.setText(GctBundle.getString("clouddebug.no.remote.repository"));    }  } else {    setOkText(false);  }}  }
class C{  public double computeAverageLocalOfObservations(int[] reordering) throws Exception {  int N=continuousDataX.length;  if (!tryKeepAllPairsNorms || (N > MAX_DATA_SIZE_FOR_KEEP_ALL_PAIRS_NORM)) {    int[] originalDiscreteData=discreteData;    discreteData=MatrixUtils.extractSelectedTimePoints(discreteData,reordering);    double newMI=computeAverageLocalOfObservationsWhileComputingDistances();    discreteData=originalDiscreteData;    return newMI;  }  int[] reorderedDiscreteData=MatrixUtils.extractSelectedTimePoints(discreteData,reordering);  if (xNorms == null) {    computeNorms();  }  double averageDiGammas=0;  double avNxz=0;  double avNyz=0;  double avNz=0;  double averageInverseCountInJointXZ=0;  double averageInverseCountInJointYZ=0;  for (int t=0; t < N; t++) {    double[][] jointNorm=new double[N][2];    for (int t2=0; t2 < N; t2++) {      jointNorm[t2][0]=Math.max(xNorms[t][t2],zNorms[t][t2]);      jointNorm[t2][1]=t2;    }    double eps_x=0.0;    double eps_z=0.0;    int[] timeStepsOfKthMins=null;    timeStepsOfKthMins=MatrixUtils.kMinIndicesSubjectTo(jointNorm,0,k,reorderedDiscreteData,reorderedDiscreteData[t]);    for (int j=0; j < k; j++) {      int timeStepOfJthPoint=timeStepsOfKthMins[j];      if (xNorms[t][timeStepOfJthPoint] > eps_x) {        eps_x=xNorms[t][timeStepOfJthPoint];      }      if (zNorms[t][timeStepOfJthPoint] > eps_z) {        eps_z=zNorms[t][timeStepOfJthPoint];      }    }    int n_xz=0;    int n_yz=0;    int n_z=0;    for (int t2=0; t2 < N; t2++) {      if (zNorms[t][t2] <= eps_z) {        n_z++;        if (xNorms[t][t2] <= eps_x) {          n_xz++;        }        if (reorderedDiscreteData[t] == reorderedDiscreteData[t2]) {          n_yz++;        }      }    }    avNxz+=n_xz;    avNyz+=n_yz;    avNz+=n_z;    averageDiGammas+=MathsUtils.digamma(n_z) - MathsUtils.digamma(n_xz) - MathsUtils.digamma(n_yz);    double invN_xz=1.0 / (double)n_xz;    averageInverseCountInJointXZ+=invN_xz;    double invN_yz=1.0 / (double)n_yz;    averageInverseCountInJointYZ+=invN_yz;  }  averageDiGammas/=(double)N;  averageInverseCountInJointXZ/=(double)N;  averageInverseCountInJointYZ/=(double)N;  condMi=MathsUtils.digamma(k) - 2.0 / (double)k + averageDiGammas + averageInverseCountInJointXZ + averageInverseCountInJointYZ;  miComputed=true;  if (debug) {    avNxz/=(double)N;    avNyz/=(double)N;    avNz/=(double)N;    System.out.println(String.format("Average n_xz=%.3f, Average n_yz=%.3f, Average n_z=%.3f",avNxz,avNyz,avNz));    System.out.printf("Av = digamma(k)=%.3f + <digammas>=%.3f +<inverses>=%.3f - 2/k=%.3f = %.3f (<1/n_yz>=%.3f, <1/n_xz>=%.3f)\n",MathsUtils.digamma(k),averageDiGammas,averageInverseCountInJointXZ + averageInverseCountInJointYZ,2.0 / (double)k,condMi,averageInverseCountInJointYZ,averageInverseCountInJointXZ);  }  return condMi;}  }
class C{  public static PolicyMappings createFromList(List<PolicyMapping> listOfPolicyMappings){  CertPolicyId[] issuerDomainPolicies=new CertPolicyId[listOfPolicyMappings.size()];  CertPolicyId[] subjectDomainPolicies=new CertPolicyId[listOfPolicyMappings.size()];  for (int i=0; i < listOfPolicyMappings.size(); i++) {    PolicyMapping policyMapping=listOfPolicyMappings.get(i);    issuerDomainPolicies[i]=CertPolicyId.getInstance(policyMapping.getIssuerDomainPolicy());    subjectDomainPolicies[i]=CertPolicyId.getInstance(policyMapping.getSubjectDomainPolicy());  }  return new PolicyMappings(issuerDomainPolicies,subjectDomainPolicies);}  }
class C{  @Override protected String translate(final String name){  return "data/sprites/" + name + ".png";}  }
class C{  @Override public String toSummaryString(){  return m_delegate.toSummaryString();}  }
class C{  @Override public int executeUpdate(String sql,int[] columnIndexes) throws SQLException {  try {    debugCode("executeUpdate(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void drawArtilleryHexes(Graphics g){  Mounted weapon=getSelectedArtilleryWeapon();  Rectangle view=g.getClipBounds();  int drawX=(view.x / (int)(HEX_WC * scale)) - 1;  int drawY=(view.y / (int)(HEX_H * scale)) - 1;  int drawWidth=(view.width / (int)(HEX_WC * scale)) + 3;  int drawHeight=(view.height / (int)(HEX_H * scale)) + 3;  Image artyIconImage;  for (Enumeration<ArtilleryAttackAction> attacks=game.getArtilleryAttacks(); attacks.hasMoreElements(); ) {    ArtilleryAttackAction a=attacks.nextElement();    Coords c=a.getTarget(game).getPosition();    if ((c.getX() >= drawX) && (c.getX() <= (drawX + drawWidth)) && (c.getY() >= drawY)&& (c.getY() <= (drawY + drawHeight))) {      Point p=getHexLocation(c);      artyIconImage=tileManager.getArtilleryTarget(TilesetManager.ARTILLERY_INCOMING);      g.drawImage(getScaledImage(artyIconImage,true),p.x,p.y,this);    }  }  if (localPlayer != null) {    for (    Coords c : localPlayer.getArtyAutoHitHexes()) {      if ((c.getX() >= drawX) && (c.getX() <= (drawX + drawWidth)) && (c.getY() >= drawY)&& (c.getY() <= (drawY + drawHeight))) {        Point p=getHexLocation(c);        artyIconImage=tileManager.getArtilleryTarget(TilesetManager.ARTILLERY_AUTOHIT);        g.drawImage(getScaledImage(artyIconImage,true),p.x,p.y,this);      }    }  }  if (weapon != null) {    for (    ArtilleryTracker.ArtilleryModifier attackMod : selectedEntity.aTracker.getWeaponModifiers(weapon)) {      Coords c=attackMod.getCoords();      if ((c.getX() >= drawX) && (c.getX() <= (drawX + drawWidth)) && (c.getY() >= drawY)&& (c.getY() <= (drawY + drawHeight))) {        Point p=getHexLocation(c);        if (attackMod.getModifier() == TargetRoll.AUTOMATIC_SUCCESS) {          artyIconImage=tileManager.getArtilleryTarget(TilesetManager.ARTILLERY_AUTOHIT);        } else {          artyIconImage=tileManager.getArtilleryTarget(TilesetManager.ARTILLERY_ADJUSTED);        }        g.drawImage(getScaledImage(artyIconImage,true),p.x,p.y,this);      }    }  }}  }
class C{  public WFG9(int k,int l,int M){  super(k,l,M);}  }
class C{  public IgniteTxTimeoutCheckedException(String msg){  super(msg);}  }
class C{  private BinInfo findBin(double x){  BinInfo bin=new BinInfo();  bin.isInRange=false;  bin.isUnderflow=false;  bin.isOverflow=false;  if (x < minValue) {    bin.isUnderflow=true;  } else   if (x > maxValue) {    bin.isOverflow=true;  } else {    bin.isInRange=true;    for (int i=0; i < numBins; i++) {      if (x < binUpperBounds[i]) {        bin.index=i;        break;      }    }    if (x == maxValue) {      bin.index=numBins - 1;    }  }  return bin;}  }
class C{  public void xor(FixedBitSet other){  xor(other.bits,other.numWords);}  }
class C{  public void openCamera(Activity activity,String path,String fileName){  FileUtils.makeDirs(path);  File cameraFile=new File(path,fileName);  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  intent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(cameraFile));  activity.startActivityForResult(intent,CAMERA_REQ_CODE);}  }
class C{  void showToast(String text,boolean longDuration){  if (mLastToast != null)   mLastToast.cancel();  mLastToast=Toast.makeText(TermuxActivity.this,text,longDuration ? Toast.LENGTH_LONG : Toast.LENGTH_SHORT);  mLastToast.setGravity(Gravity.TOP,0,0);  mLastToast.show();}  }
class C{  protected int bytesPerLine(){  return (57);}  }
class C{  void shiftRight(){  for (int i=0; i < getCount() - 2; i++) {    mMonths.add(0,CalendarUtils.addMonths(mMonths.remove(getCount() - 1),-getCount()));    mCursors.add(0,mCursors.remove(getCount() - 1));  }  for (int i=0; i < getCount(); i++) {    swapCursor(i,null,null);  }  for (int i=0; i <= 2; i++) {    bind(getCount() - 1 - i);  }}  }
class C{  public Vec2 divide(double divisor){  this.x/=divisor;  this.y/=divisor;  return this;}  }
class C{  private void initialiseCommands(){  reward=new AchievementRewards(this);  achievementDisplay=new AchievementDisplay(this);  giveCommand=new GiveCommand(this);  bookCommand=new BookCommand(this);  topCommand=new TopCommand(this);  statsCommand=new StatsCommand(this);  infoCommand=new InfoCommand(this);  listCommand=new ListCommand(this);  helpCommand=new HelpCommand(this);  checkCommand=new CheckCommand(this);  deleteCommand=new DeleteCommand(this);}  }
class C{  public void init() throws ServletException {}  }
class C{  public boolean isComplete(){  if (!this.classifierName.isEmpty() && !this.classifierModuleSpecifier.isEmpty() && this.uri != null) {    return true;  }  return false;}  }
class C{  public DictItem addDictItem(long userId,long dictCollectionId,long dictVersionId,String itemCode,Map<Locale,String> itemNameMap,long parentId,ServiceContext serviceContext) throws NoSuchDictVersionException, SystemException, NoSuchDictItemException {  long dictItemId=CounterLocalServiceUtil.increment(DictItem.class.getName());  DictItem dictItem=dictItemPersistence.create(dictItemId);  DictVersion dictVersion=dictVersionPersistence.findByPrimaryKey(dictVersionId);  Date now=new Date();  String treeIndex=getTreeIndex(dictItemId,parentId);  dictItem.setCompanyId(serviceContext.getCompanyId());  dictItem.setCreateDate(now);  dictItem.setDictCollectionId(dictCollectionId);  dictItem.setGroupId(serviceContext.getScopeGroupId());  dictItem.setIssueStatus(PortletConstants.DRAFTING);  dictItem.setItemCode(itemCode);  dictItem.setItemNameMap(itemNameMap);  dictItem.setModifiedDate(now);  dictItem.setParentItemId(parentId);  dictItem.setTreeIndex(treeIndex);  dictItem.setUserId(userId);  dictItem.setDictVersionId(dictVersion.getDictVersionId());  return dictItemPersistence.update(dictItem);}  }
class C{  public TweetTimelineListAdapter build(){  return new TweetTimelineListAdapter(context,timeline,styleResId,actionCallback);}  }
class C{  private void createAccountPanel(){  Borderlayout borderlayout=new Borderlayout();  borderlayout.setStyle("position: absolute");  borderlayout.setWidth("100%");  borderlayout.setHeight("100%");  m_pnlAccount.appendChild(borderlayout);  North north=new North();  north.setBorder("none");  borderlayout.appendChild(north);  Label label=new Label(Msg.getMsg(Env.getCtx(),"ChargeFromAccount"));  label.setStyle("font-weight: bold;");  north.appendChild(label);  Center center=new Center();  center.setBorder("none");  center.setFlex(true);  center.setAutoscroll(true);  borderlayout.appendChild(center);  center.appendChild(m_tblData);  South south=new South();  south.setBorder("none");  borderlayout.appendChild(south);  Panel southPanel=new Panel();  southPanel.setAlign("right");  south.appendChild(southPanel);  m_btnAccount.setLabel(Msg.getMsg(Env.getCtx(),AD_MESSAGE_CREATE) + " " + Msg.getMsg(Env.getCtx(),"From")+ " "+ Msg.getElement(Env.getCtx(),"Account_ID"));  m_btnAccount.addEventListener(Events.ON_CLICK,this);  southPanel.appendChild(m_btnAccount);  return;}  }
class C{  private SnmpPduPacket makeResponsePdu(SnmpPduPacket reqPdu,Object userData){  SnmpAdaptorServer snmpServer=(SnmpAdaptorServer)adaptorServer;  SnmpPduPacket respPdu=null;  snmpServer.updateRequestCounters(reqPdu.type);  if (reqPdu.varBindList != null)   snmpServer.updateVarCounters(reqPdu.type,reqPdu.varBindList.length);  if (checkPduType(reqPdu)) {    respPdu=checkAcl(reqPdu);    if (respPdu == null) {      if (mibs.size() < 1) {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"makeResponsePdu","Request " + reqPdu.requestId + " received but no MIB registered.");        }        return makeNoMibErrorPdu((SnmpPduRequest)reqPdu,userData);      }switch (reqPdu.type) {case SnmpPduPacket.pduGetRequestPdu:case SnmpPduPacket.pduGetNextRequestPdu:case SnmpPduPacket.pduSetRequestPdu:        respPdu=makeGetSetResponsePdu((SnmpPduRequest)reqPdu,userData);      break;case SnmpPduPacket.pduGetBulkRequestPdu:    respPdu=makeGetBulkResponsePdu((SnmpPduBulk)reqPdu,userData);  break;}} else {if (!snmpServer.getAuthRespEnabled()) {respPdu=null;}if (snmpServer.getAuthTrapEnabled()) {try {  snmpServer.snmpV1Trap(SnmpPduTrap.trapAuthenticationFailure,0,new SnmpVarBindList());} catch (Exception x) {  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponsePdu","Failure when sending authentication trap",x);  }}}}}return respPdu;}  }
class C{  private static boolean isManifest(final String entryName){  final boolean manifest=entryName.equals(META_INF_FOLDER + "manifest.xml");  return manifest;}  }
class C{  @Override public void handlePatch(Operation op){  collectStats(op);  op.complete();}  }
class C{  public GenericProxyFactory addHook(ConsumerHook... hooks){  Collections.addAll(this.hooks,hooks);  return this;}  }
class C{  public boolean ensureMetabitsDemispace(final boolean useDemispace){  final boolean isDemispace=m_metaBitsAddr > 0;  if (isDemispace != useDemispace || m_useMetabitsDemispace != useDemispace) {    m_useMetabitsDemispace=useDemispace;    m_metaBitsAddr=0;    m_recentAlloc=true;    return true;  } else {    return false;  }}  }
class C{  public NotFoundPath(SchemeMap schemeMap,String url){  super(schemeMap);  _url=url;}  }
class C{  public void logWarning(String tag,String message){  log(LogEntryType.Warning,tag,message);}  }
class C{  public static Table createPartitionedTable(Configuration conf,HiveMetastoreClient ms,HiveObjectSpec tableSpec,TableType tableType,Path warehouseRoot) throws IOException, HiveMetastoreException {  Path tableLocation=getPathForHiveObject(warehouseRoot,tableSpec);  Table table=new Table();  table.setDbName(tableSpec.getDbName());  table.setTableName(tableSpec.getTableName());  Map<String,String> parameters=new HashMap<>();  parameters.put(HiveParameterKeys.TLDT,Long.toString(System.currentTimeMillis()));  table.setParameters(parameters);  table.setTableType(tableType.toString());  List<FieldSchema> partitionCols=new ArrayList<>();  partitionCols.add(new FieldSchema("ds","string","my ds comment"));  partitionCols.add(new FieldSchema("hr","string","my hr comment"));  table.setPartitionKeys(partitionCols);  StorageDescriptor sd=new StorageDescriptor();  List<FieldSchema> columns=new ArrayList<>();  columns.add(new FieldSchema("key","string","my comment"));  sd.setCols(columns);  if (tableType == TableType.MANAGED_TABLE || tableType == TableType.EXTERNAL_TABLE) {    sd.setLocation(tableLocation.toString());  }  sd.setSerdeInfo(new SerDeInfo("LazySimpleSerde","org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",new HashMap<>()));  table.setSd(sd);  if (!ms.existsDb(table.getDbName())) {    ms.createDatabase(new Database(table.getDbName(),null,null,null));  }  ms.createTable(table);  return table;}  }
class C{  public final void log(String string){  try {synchronized (this) {      println(string);      flush();    }  } catch (  Exception e) {  }}  }
class C{  @LogMessageDoc(level="ERROR",message="No listener dependency solution: " + "No listeners without incoming dependencies",explanation="The set of listeners installed " + "have dependencies with no solution",recommendation="Install a different set of listeners " + "or install all dependencies.  This is a defect in " + "the controller installation.") public void addListener(U type,T listener){  List<T> newlisteners=new ArrayList<T>();  if (listeners != null)   newlisteners.addAll(listeners);  newlisteners.add(listener);  List<T> terminals=new ArrayList<T>();  for (  T i : newlisteners) {    boolean isterm=true;    for (    T j : newlisteners) {      if (ispre(type,i,j)) {        isterm=false;        break;      }    }    if (isterm) {      terminals.add(i);    }  }  if (terminals.size() == 0) {    logger.error("No listener dependency solution: " + "No listeners without incoming dependencies");    listeners=newlisteners;    return;  }  HashSet<T> visited=new HashSet<T>();  List<T> ordering=new ArrayList<T>();  for (  T term : terminals) {    visit(newlisteners,type,visited,ordering,term);  }  listeners=ordering;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    if (!isOpen()) {      throw new IOException("InputStreamReader is closed");    }    char[] buf=new char[1];    return read(buf,0,1) != -1 ? buf[0] : -1;  }}  }
class C{  static Class<?> createReflectionClass(RVMMethod methodToCall){  if (VM.VerifyAssertions)   VM._assert(VM.runningVM);  if (DynamicTypeCheck.instanceOfResolved(TypeReference.baseReflectionClass.resolve(),methodToCall.getDeclaringClass())) {    return null;  }  int[] constantPool=new int[methodToCall.getParameterTypes().length + 3];  String reflectionClassName="Lorg/jikesrvm/classloader/ReflectionBase$$Reflect" + methodToCall.getMemberRef().getId() + ";";  TypeReference reflectionClass=TypeReference.findOrCreate(reflectionClassName);  RVMType klass=reflectionClass.peekType();  if (klass == null) {    MethodReference reflectionMethodRef=MethodReference.findOrCreate(reflectionClass,Atom.findOrCreateUnicodeAtom("invokeInternal"),Atom.findOrCreateUnicodeAtom("(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;")).asMethodReference();    MethodReference constructorMethodRef=MethodReference.findOrCreate(reflectionClass,Atom.findOrCreateUnicodeAtom("<init>"),Atom.findOrCreateUnicodeAtom("()V")).asMethodReference();    RVMMethod[] reflectionMethods=new RVMMethod[]{methodToCall.createReflectionMethod(reflectionClass,constantPool,reflectionMethodRef),RVMMethod.createDefaultConstructor(reflectionClass,constructorMethodRef)};    final short modifiers=(short)(ACC_SYNTHETIC | ACC_PUBLIC | ACC_FINAL);    klass=new RVMClass(reflectionClass,constantPool,modifiers,modifiers,TypeReference.baseReflectionClass.resolve().asClass(),emptyVMClass,emptyVMField,reflectionMethods,null,null,null,null,null,null,null,null);    reflectionClass.setType(klass);    RuntimeEntrypoints.initializeClassForDynamicLink(klass.asClass());  }  return klass.getClassForType();}  }
class C{  public boolean isAccepted(){  return mAccepted;}  }
class C{  public RippleBuilder rippleHighlightColor(int highlightColor){  this.rippleHighlightColor=highlightColor;  return this;}  }
class C{  @Override void doInsideScores(Tree<StateSet> tree,boolean noSmoothing,boolean debugOutput,double[][][] spanScores){  if (grammar.isLogarithmMode() || lexicon.isLogarithmMode())   throw new Error("Grammar in logarithm mode!  Cannot do inside scores!");  if (tree.isLeaf()) {    return;  }  List<Tree<StateSet>> children=tree.getChildren();  for (  Tree<StateSet> child : children) {    if (!child.isLeaf())     doInsideScores(child,noSmoothing,debugOutput,spanScores);  }  StateSet parent=tree.getLabel();  short pState=parent.getState();  int nParentStates=parent.numSubStates();  if (tree.isPreTerminal()) {    StateSet wordStateSet=tree.getChildren().get(0).getLabel();    double[] lexiconScores=lexicon.score(wordStateSet,pState,noSmoothing,false);    if (lexiconScores.length != nParentStates) {      System.out.println("Have more scores than substates!");    }    parent.setIScores(lexiconScores);    parent.scaleIScores(0);  } else {switch (children.size()) {case 0:      break;case 1:    StateSet child=children.get(0).getLabel();  short cState=child.getState();HierarchicalAdaptiveUnaryRule urule=(HierarchicalAdaptiveUnaryRule)grammar.getUnaryRule(pState,cState);double[] iScores=new double[nParentStates];for (HierarchicalAdaptiveUnaryRule.SubRule subRule : urule.subRuleList) {if (subRule == null) continue;int level=subRule.level;int i=substatesToCover[level] * subRule.child;int j=i + substatesToCover[level];int k=substatesToCover[level] * subRule.parent;int l=k + substatesToCover[level];double cS=0;for (int cp=i; cp < j; cp++) {cS+=child.getIScore(cp);}if (pState == 0) l=1;for (int np=k; np < l; np++) {double score=cS * subRule.score;iScores[np]+=score;}}parent.setIScores(iScores);parent.scaleIScores(child.getIScale());break;case 2:StateSet leftChild=children.get(0).getLabel();StateSet rightChild=children.get(1).getLabel();short lState=leftChild.getState();short rState=rightChild.getState();double[] iScores2=new double[nParentStates];HierarchicalAdaptiveBinaryRule brule=(HierarchicalAdaptiveBinaryRule)grammar.getBinaryRule(pState,lState,rState);for (HierarchicalAdaptiveBinaryRule.SubRule subRule : brule.subRuleList) {if (subRule == null) continue;int level=subRule.level;int e=substatesToCover[level] * subRule.lChild;int f=e + substatesToCover[level];int i=substatesToCover[level] * subRule.rChild;int j=i + substatesToCover[level];int k=substatesToCover[level] * subRule.parent;int l=k + substatesToCover[level];double lS=0;for (int lp=e; lp < f; lp++) {lS+=leftChild.getIScore(lp);}double rS=0;for (int rp=i; rp < j; rp++) {rS+=rightChild.getIScore(rp);}for (int np=k; np < l; np++) {double score=lS * rS * subRule.score;iScores2[np]+=score;}}if (spanScores != null) {for (int i=0; i < nParentStates; i++) {iScores2[i]*=spanScores[parent.from][parent.to][stateClass[pState]];}}parent.setIScores(iScores2);parent.scaleIScores(leftChild.getIScale() + rightChild.getIScale());break;default :throw new Error("Malformed tree: more than two children");}}}  }
class C{  public static void createImageToFileSystem(String url,Component targetList,ListModel model,int targetOffset,String targetKey,String destFile,Image placeholder,byte priority){  createImageToFileSystem(url,targetList,model,targetOffset,targetKey,destFile,null,priority,placeholder,defaultMaintainAspectRatio);}  }
class C{  public static void sendMessage(SearchLoadAndWriteProcessor processor,String regionName,Object key,boolean multicast,Set recipients,int timeoutMs,int ttl,int idleTime){  QueryMessage msg=new QueryMessage();  msg.initialize(processor,regionName,key,multicast,timeoutMs,ttl,idleTime);  msg.setRecipients(recipients);  if (!multicast && recipients.size() == 1) {    msg.alwaysSendResult=true;  }  processor.distributionManager.putOutgoing(msg);}  }
class C{  public String globalInfo(){  return "Classifier for building linear logistic regression models. LogitBoost with simple regression " + "functions as base learners is used for fitting the logistic models. The optimal number of LogitBoost " + "iterations to perform is cross-validated, which leads to automatic attribute selection. "+ "For more information see:\n"+ getTechnicalInformation().toString();}  }
class C{  private static boolean didNullKeysChange(ArrayList<OneRowChange.ColumnVal> currentKeyValues,ArrayList<OneRowChange.ColumnVal> previousKeyValues){  for (int i=0; i < currentKeyValues.size(); i++) {    if (previousKeyValues.get(i).getValue() == null || currentKeyValues.get(i).getValue() == null)     if (!(previousKeyValues.get(i).getValue() == null && currentKeyValues.get(i).getValue() == null))     return true;  }  return false;}  }
class C{  public JH512(){}  }
class C{  private void drawZoomRectangle(Graphics2D g2,boolean xor){  if (this.zoomRectangle != null) {    if (xor) {      g2.setXORMode(Color.gray);    }    if (this.fillZoomRectangle) {      g2.setPaint(this.zoomFillPaint);      g2.fill(this.zoomRectangle);    } else {      g2.setPaint(this.zoomOutlinePaint);      g2.draw(this.zoomRectangle);    }    if (xor) {      g2.setPaintMode();    }  }}  }
class C{  private void resetModeStatus(){  int sourceID=0;  int targetID=0;  if (m_sourceVendor.getSelectedItem() != null)   sourceID=s_dbEngine.getDBVendorID(m_sourceVendor.getSelectedItem().toString());  if (m_targetVendor.getSelectedItem() != null)   targetID=s_dbEngine.getDBVendorID(m_targetVendor.getSelectedItem().toString());  if (sourceID == targetID) {    if (!m_modeUpgrade.isEnabled()) {      m_modeUpgrade.setEnabled(true);      m_modeUpgrade.setSelected(true);      m_modeTransfer.setSelected(false);      resetOptionStatus();    }  } else {    if (m_modeUpgrade.isEnabled()) {      m_modeUpgrade.setEnabled(false);      m_modeUpgrade.setSelected(false);      m_modeTransfer.setSelected(true);      resetOptionStatus();    }  }}  }
class C{  public static void assertInterchangedArraysEquals(int[] expecteds,int[] actuals){  assertEquals("different number of elements in arrays",expecteds.length,actuals.length);  ArrayList<Integer> foundIndexes=new ArrayList<Integer>();  expactation:   for (int i=0; i < expecteds.length; i++) {    for (int j=0; j < actuals.length; j++) {      if (expecteds[i] == actuals[j] && !foundIndexes.contains(Integer.valueOf(j))) {        foundIndexes.add(Integer.valueOf(j));        continue expactation;      }    }    fail("Missing element " + expecteds[i]);  }}  }
class C{  public boolean isComplex(){  return complexResult;}  }
class C{  public void onComplete(R result,Throwable failure,ExecutionContext context){}  }
class C{  public void updateComponentTreeUI(){  SwingUtilities.updateComponentTreeUI(dialog);}  }
class C{  public AsyncHttpClient(int httpPort,int httpsPort){  this(false,httpPort,httpsPort);}  }
class C{  public static void validateArticleFields(final HttpServletRequest request,final JSONObject requestJSONObject) throws RequestProcessAdviceException {  final LatkeBeanManager beanManager=Lifecycle.getBeanManager();  final LangPropsService langPropsService=beanManager.getReference(LangPropsServiceImpl.class);  final TagQueryService tagQueryService=beanManager.getReference(TagQueryService.class);  final String articleTitle=requestJSONObject.optString(Article.ARTICLE_TITLE);  if (Strings.isEmptyOrNull(articleTitle) || articleTitle.length() > MAX_ARTICLE_TITLE_LENGTH) {    throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("articleTitleErrorLabel")));  }  final int articleType=requestJSONObject.optInt(Article.ARTICLE_TYPE);  if (Article.isInvalidArticleType(articleType)) {    throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("articleTypeErrorLabel")));  }  String articleTags=requestJSONObject.optString(Article.ARTICLE_TAGS);  if (Strings.isEmptyOrNull(articleTags)) {    throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("tagsErrorLabel")));  }  final ArticleMgmtService articleMgmtService=beanManager.getReference(ArticleMgmtService.class);  articleTags=articleTags.replaceAll("\\s+",",");  articleTags=articleMgmtService.formatArticleTags(articleTags);  String[] tagTitles=articleTags.split(",");  if (null == tagTitles || 0 == tagTitles.length) {    throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("tagsErrorLabel")));  }  tagTitles=new LinkedHashSet<String>(Arrays.asList(tagTitles)).toArray(new String[0]);  final List<String> invalidTags=tagQueryService.getInvalidTags();  final StringBuilder tagBuilder=new StringBuilder();  for (int i=0; i < tagTitles.length; i++) {    final String tagTitle=tagTitles[i].trim();    if (Strings.isEmptyOrNull(tagTitle)) {      throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("tagsErrorLabel")));    }    if (!Tag.TAG_TITLE_PATTERN.matcher(tagTitle).matches()) {      throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("tagsErrorLabel")));    }    if (Strings.isEmptyOrNull(tagTitle) || tagTitle.length() > Tag.MAX_TAG_TITLE_LENGTH || tagTitle.length() < 1) {      throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("tagsErrorLabel")));    }    final JSONObject currentUser=(JSONObject)request.getAttribute(User.USER);    if (!Role.ADMIN_ROLE.equals(currentUser.optString(User.USER_ROLE)) && ArrayUtils.contains(Symphonys.RESERVED_TAGS,tagTitle)) {      throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("articleTagReservedLabel") + " [" + tagTitle+ "]"));    }    if (invalidTags.contains(tagTitle)) {      throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("articleTagInvalidLabel") + " [" + tagTitle+ "]"));    }    tagBuilder.append(tagTitle).append(",");  }  if (tagBuilder.length() > 0) {    tagBuilder.deleteCharAt(tagBuilder.length() - 1);  }  requestJSONObject.put(Article.ARTICLE_TAGS,tagBuilder.toString());  String articleContent=requestJSONObject.optString(Article.ARTICLE_CONTENT);  articleContent=StringUtils.strip(articleContent);  if (Strings.isEmptyOrNull(articleContent) || articleContent.length() > MAX_ARTICLE_CONTENT_LENGTH || articleContent.length() < MIN_ARTICLE_CONTENT_LENGTH) {    throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("articleContentErrorLabel")));  }  final int rewardPoint=requestJSONObject.optInt(Article.ARTICLE_REWARD_POINT,0);  if (rewardPoint < 0) {    throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,"invalidRewardPointLabel"));  }  if (rewardPoint > 0) {    final String articleRewardContnt=requestJSONObject.optString(Article.ARTICLE_REWARD_CONTENT);    if (Strings.isEmptyOrNull(articleRewardContnt) || articleRewardContnt.length() > MAX_ARTICLE_CONTENT_LENGTH || articleRewardContnt.length() < MIN_ARTICLE_CONTENT_LENGTH) {      throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get("articleRewardContentErrorLabel")));    }  }}  }
class C{  public void testConstructor6(){  Integer[] ints=new Integer[SIZE];  for (int i=0; i < SIZE; ++i)   ints[i]=new Integer(i);  LinkedBlockingQueue q=new LinkedBlockingQueue(Arrays.asList(ints));  for (int i=0; i < SIZE; ++i)   assertEquals(ints[i],q.poll());}  }
class C{  public int numNodes(){  if (m_isLeaf) {    return 1;  }  int numNodes=1;  for (  LMTNode m_son : m_sons) {    numNodes+=m_son.numNodes();  }  return numNodes;}  }
class C{  private static int chunkSize(final InputStream stream) throws IOException {  final ByteArrayOutputStream baos=ChunkedInputStream.sizeLine(stream);  final int result;  final String data=baos.toString(Charset.defaultCharset().name());  final int separator=data.indexOf(';');  try {    if (separator > 0) {      result=Integer.parseInt(data.substring(0,separator).trim(),16);    } else {      result=Integer.parseInt(data.trim(),16);    }    return result;  } catch (  final NumberFormatException ex) {    throw new IOException(String.format("Bad chunk size: %s",baos.toString(Charset.defaultCharset().name())),ex);  }}  }
class C{  public void send(){  if (closed)   throw new RuntimeException("sender is closed.");  HeapDataOutputStream buf=new HeapDataOutputStream(CHUNK_SIZE + 2048,null);  String dataType=null;  int typeSize=0;  int rowCount=0;  int dataSize=0;  try {    if (rows.hasNext()) {      typeSize=sendType(buf);      buf.writeByte(DATA_CHUNK);      int rowSize=structType == null ? 2 : structType.getFieldNames().length;      while (rows.hasNext()) {        rowCount++;        Object[] row=rows.next();        if (rowCount < 2)         dataType=entryDataType(row);        if (rowSize != row.length)         throw new IOException(rowToString("Expect " + rowSize + " columns, but got ",row));        serializeRowToBuffer(row,buf);        if (buf.size() > CHUNK_SIZE) {          dataSize+=sendBufferredData(buf,false);          buf.writeByte(DATA_CHUNK);        }      }    }    dataSize+=sendBufferredData(buf,true);    logger.info(desc + ": " + rowCount+ " rows, type="+ dataType+ ", type.size="+ typeSize+ ", data.size="+ dataSize+ ", row.avg.size="+ (rowCount == 0 ? "NaN" : String.format("%.1f",((float)dataSize) / rowCount)));  } catch (  IOException|RuntimeException e) {    sendException(buf,e);  } finally {    closed=true;  }}  }
class C{  public String draw(IGraphEntity n){  return "[style=filled,fillcolor=\"gray50\" label=\"" + n.nodeLabel() + "\"]";}  }
class C{  public BOSHConfiguration(boolean https,String host,int port,String filePath,ProxyInfo proxy,String xmppDomain){  super(host,port,xmppDomain,proxy);  setSASLAuthenticationEnabled(true);  ssl=https;  file=(filePath != null ? filePath : "/");}  }
class C{  public void ReInit(CharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  @Override public boolean onScale(ScaleGestureDetector detector){  return false;}  }
class C{  public void shutdown(){}  }
class C{  public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  return new Builder<K,V>(Ordering.natural()).put(k1,v1).put(k2,v2).put(k3,v3).build();}  }
class C{  private static boolean eq(long v1,long v2){  return v1 == v2;}  }
class C{  @Inject public AuditNotifier(MetricService metricService,AnnotationService annotationService,AuditService auditService,SystemConfiguration config,Provider<EntityManager> emf){  super(metricService,annotationService,config);  _auditService=auditService;  _config=config;}  }
class C{  @GET @Path("void/forbidden") @View("hello.jsp") public void voidForbiddenException(){  throw new ForbiddenException();}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  public static String convertToColumnName(int index){  if (index < 0) {    throw new IllegalArgumentException("Indices below 0 are not allowed");  }  StringBuilder sb=new StringBuilder();  index++;  while (index-- > 0) {    sb.append((char)('A' + index % 26));    index/=26;  }  return sb.reverse().toString();}  }
class C{  public boolean isCoveredBy(){  boolean hasPointInCommon=isTrue(matrix[Location.INTERIOR][Location.INTERIOR]) || isTrue(matrix[Location.INTERIOR][Location.BOUNDARY]) || isTrue(matrix[Location.BOUNDARY][Location.INTERIOR])|| isTrue(matrix[Location.BOUNDARY][Location.BOUNDARY]);  return hasPointInCommon && matrix[Location.INTERIOR][Location.EXTERIOR] == Dimension.FALSE && matrix[Location.BOUNDARY][Location.EXTERIOR] == Dimension.FALSE;}  }
class C{  public boolean isSelected(){  return (stateMask & SELECTED) != 0;}  }
class C{  public static void copyFiles(final File src,final File dest) throws IOException {  if (!src.exists()) {    throw new IOException("Can not find source: " + src.getAbsolutePath());  } else   if (!src.canRead()) {    throw new IOException("Cannot read: " + src.getAbsolutePath() + ". Check file permissions.");  }  final List<String> noCopy=Arrays.asList("org.eclipse.core.runtime","org.eclipse.e4.workbench","org.eclipse.emf.common.ui","org.eclipse.ui.workbench","org.eclipse.xtext.builder");  if (src.isDirectory()) {    if (noCopy.contains(src.getName()))     return;    if (!dest.exists()) {      if (!dest.mkdirs()) {        throw new IOException("Could not create direcotry: " + dest.getAbsolutePath());      }    }    final String list[]=src.list();    if (list != null)     for (int i=0; i < list.length; i++) {      final File dest1=new File(dest,list[i]);      final File src1=new File(src,list[i]);      copyFiles(src1,dest1);    }  } else {    final byte[] buffer=new byte[4096];    int bytesRead;    try (FileInputStream fin=new FileInputStream(src);FileOutputStream fout=new FileOutputStream(dest)){      while ((bytesRead=fin.read(buffer)) >= 0) {        fout.write(buffer,0,bytesRead);      }    } catch (    final IOException e) {      final IOException wrapper=new IOException("Unable to copy file: " + src.getAbsolutePath() + "to"+ dest.getAbsolutePath());      wrapper.initCause(e);      wrapper.setStackTrace(e.getStackTrace());      throw wrapper;    }  }}  }
class C{  public static void capacity(long memPtr,int cap){  assert !isExternal(memPtr) : "Attempt to update external memory chunk capacity: " + memPtr;  GridUnsafe.putInt(memPtr + MEM_HDR_OFF_CAP,cap);}  }
class C{  public static String stringFor(int n){switch (n) {case CU_CUBEMAP_FACE_POSITIVE_X:    return "CU_CUBEMAP_FACE_POSITIVE_X";case CU_CUBEMAP_FACE_NEGATIVE_X:  return "CU_CUBEMAP_FACE_NEGATIVE_X";case CU_CUBEMAP_FACE_POSITIVE_Y:return "CU_CUBEMAP_FACE_POSITIVE_Y";case CU_CUBEMAP_FACE_NEGATIVE_Y:return "CU_CUBEMAP_FACE_NEGATIVE_Y";case CU_CUBEMAP_FACE_POSITIVE_Z:return "CU_CUBEMAP_FACE_POSITIVE_Z";case CU_CUBEMAP_FACE_NEGATIVE_Z:return "CU_CUBEMAP_FACE_NEGATIVE_Z";}return "INVALID CUarray_cubemap_face: " + n;}  }
class C{  protected boolean tryDelete(){  if (folder == null) {    return true;  }  return recursiveDelete(folder);}  }
class C{  public final void check(final Predicate3<P,P2,T> property){  final TheoryRunner<Tuple3<P,P2,T>,Tuple3<P,P2,T>> qc=new TheoryRunner<>(this.state.get(),ps,null,Function.identity(),ps);  qc.check(null);}  }
class C{  public static boolean startActivities(Context context,Intent[] intents,Bundle options){  final int version=Build.VERSION.SDK_INT;  if (version >= 16) {    ContextCompatJellybean.startActivities(context,intents,options);    return true;  } else   if (version >= 11) {    ContextCompatHoneycomb.startActivities(context,intents);    return true;  }  return false;}  }
class C{  @Override public void remove(){  current.buffer[current.dataOffset]=MessageType.NO_MESSAGE_VALUE;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.410 -0500",hash_original_method="91CEDBDE7A81F4DCE85242430A46DCF1",hash_generated_method="E43FE0F770A94438D408F0C9100BE8BD") @Override public byte[] read(int length) throws IOException {  if (length > available()) {    throw new EndOfBufferException();  }  byte[] res=new byte[length];  System.arraycopy(buffer,read_pos,res,0,length);  read_pos=read_pos + length;  return res;}  }
class C{  protected JButton createArrowButton(){  JButton button=super.createArrowButton();  return button;}  }
class C{  public LZMAInputStream(InputStream in,long uncompSize,byte propsByte,int dictSize) throws IOException {  initialize(in,uncompSize,propsByte,dictSize,null);}  }
class C{  private void verifyUserChangesAndMails(int expectedNumberOfUsers,int expectedNumberOfMails) throws Exception {  int numOfUsers=getNumberOfSubUsers();  Assert.assertEquals("Number of assigned users must not have changed",expectedNumberOfUsers,numOfUsers);  Assert.assertEquals("Wrong number of mails sent. None must be sent as txn is rolled back.",expectedNumberOfMails,mailCounter);}  }
class C{  @SuppressWarnings("unchecked") public void loadXML(String fileName) throws Exception {  if (!fileName.endsWith(".kfml")) {    throw new Exception("File must be an XML flow (*.kfml)");  }  BeanConnection.init();  BeanInstance.init();  XMLBeans xml=new XMLBeans(null,null,0);  Vector<?> v=(Vector<?>)xml.read(new File(fileName));  m_beans=(Vector<Object>)v.get(XMLBeans.INDEX_BEANINSTANCES);  if (m_env != null) {    String parentDir=(new File(fileName)).getParent();    if (parentDir == null) {      parentDir="./";    }    m_env.addVariable("Internal.knowledgeflow.directory",parentDir);  } else {    System.err.println("++++++++++++ Environment variables null!!...");  }}  }
class C{  private Value readValue(Type type,Class real,NodeMap node,String key) throws Exception {  Value value=readValue(type,real,node);  if (key != null) {    return new Allocate(value,this,key);  }  return value;}  }
class C{  public final LC gridGapX(String boundsSize){  setGridGapX(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  public Firmar(){}  }
class C{  public Requirement(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public boolean hitObject(Object object,DrawInfo2D range){  return false;}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  protected void populateColumnDataTypes(HashSet<String> columnNamesSet) throws SQLException {  ResultSet rsColumns;  DatabaseMetaData meta=store.getConnection().getMetaData();  rsColumns=meta.getColumns(null,null,getTablename().toUpperCase(),null);  if (!rsColumns.isBeforeFirst()) {    rsColumns=meta.getColumns(null,null,getTablename().toLowerCase(),null);    if (!rsColumns.isBeforeFirst()) {      rsColumns=meta.getColumns(null,null,getTablename(),null);      if (!rsColumns.isBeforeFirst()) {        throw new RuntimeException("Table name not found");      }    }  }  boolean readAllColumns=columnNamesSet.size() == 0 ? true : false;  int remainingColumns=columnNamesSet.size();  while (rsColumns.next()) {    if (readAllColumns || remainingColumns > 0) {      if (readAllColumns || columnNamesSet.contains(rsColumns.getString("COLUMN_NAME").toUpperCase())) {        columnNames.add(rsColumns.getString("COLUMN_NAME"));        columnNullabilities.add(rsColumns.getInt("NULLABLE"));        columnDataTypes.add(rsColumns.getInt("DATA_TYPE"));        remainingColumns--;      }    } else {      break;    }  }}  }
class C{  private void processSelectedLinkType(){  final LinkControlProvider linkControlProvider=getSelectedLinkControlProvider();  if (linkControlProvider instanceof RelatedWorkitemControlProvider) {    final WorkItemLinkTypeEnd relatedLinkTypeEnd=getSelectedWorkItemLinkTypeEnd();    if (relatedLinkTypeEnd != null) {      ((RelatedWorkitemControlProvider)linkControlProvider).setLinkType(relatedLinkTypeEnd);    }  }}  }
class C{  public void testCabooseChanges(){  Setup.setBuildAggressive(true);  Location harvard=lmanager.newLocation("Harvard");  Track loc1trk1=harvard.addTrack("Harvard Yard 1",Track.YARD);  loc1trk1.setLength(80);  Location arlington=lmanager.newLocation("Arlington");  Track loc2trk1=arlington.addTrack("Arlington Siding",Track.YARD);  loc2trk1.setLength(80);  Location boston=lmanager.newLocation("Boston");  Track loc3trk1=boston.addTrack("Boston Yard 1",Track.YARD);  loc3trk1.setLength(80);  Location chelmsford=lmanager.newLocation("Chelmsford");  Track loc4trk1=chelmsford.addTrack("Chelmsford Yard 1",Track.YARD);  loc4trk1.setLength(80);  Location westford=lmanager.newLocation("Westford");  Track loc5trk1=westford.addTrack("Westford Yard",Track.YARD);  loc5trk1.setLength(40);  Car c1=cmanager.newCar("ABC","1");  c1.setTypeName("Caboose");  c1.setLength("32");  c1.setCaboose(true);  Assert.assertEquals("Place c1",Track.OKAY,c1.setLocation(harvard,loc1trk1));  Car c2=cmanager.newCar("ABC","2");  c2.setTypeName("Caboose");  c2.setLength("32");  c2.setCaboose(true);  Assert.assertEquals("Place c2",Track.OKAY,c2.setLocation(arlington,loc2trk1));  Car c3=cmanager.newCar("XYZ","3");  c3.setTypeName("Caboose");  c3.setLength("32");  c3.setCaboose(true);  c2.setMoves(10);  Assert.assertEquals("Place c3",Track.OKAY,c3.setLocation(arlington,loc2trk1));  Car c4=cmanager.newCar("ABC","4");  c4.setTypeName("Caboose");  c4.setLength("32");  c4.setCaboose(true);  Assert.assertEquals("Place c4",Track.OKAY,c4.setLocation(chelmsford,loc4trk1));  Car c5=cmanager.newCar("XYZ","5");  c5.setTypeName("Caboose");  c5.setLength("32");  c5.setCaboose(true);  c5.setMoves(10);  Assert.assertEquals("Place c5",Track.OKAY,c5.setLocation(chelmsford,loc4trk1));  Car f1=cmanager.newCar("CBA","1");  f1.setTypeName("Boxcar");  f1.setLength("32");  f1.setFred(true);  Assert.assertEquals("Place f1",Track.OKAY,f1.setLocation(harvard,loc1trk1));  Route rte1=rmanager.newRoute("Route Harvard to Westford");  rte1.addLocation(harvard);  RouteLocation rlArlington=rte1.addLocation(arlington);  rte1.addLocation(boston);  RouteLocation rlChelmsford=rte1.addLocation(chelmsford);  rte1.addLocation(westford);  Train train1=tmanager.newTrain("TestCabooseChanges");  train1.setRoute(rte1);  train1.setRequirements(Train.CABOOSE);  train1.setSecondLegOptions(Train.ADD_CABOOSE);  train1.setSecondLegStartLocation(rlArlington);  train1.setSecondLegCabooseRoad("XYZ");  train1.setThirdLegOptions(Train.ADD_CABOOSE);  train1.setThirdLegStartLocation(rlChelmsford);  train1.setThirdLegCabooseRoad("XYZ");  new TrainBuilder().build(train1);  Assert.assertEquals("Train should build",true,train1.isBuilt());  Assert.assertEquals("Caboose is part of train",arlington,c1.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c2.getDestination());  Assert.assertEquals("Caboose is part of train",chelmsford,c3.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c4.getDestination());  Assert.assertEquals("Caboose is part of train",westford,c5.getDestination());  Assert.assertEquals("Place c3",Track.OKAY,c3.setLocation(null,null));  train1.reset();  new TrainBuilder().build(train1);  Assert.assertEquals("Train should not build",false,train1.isBuilt());  train1.reset();  Assert.assertEquals("Place c3",Track.OKAY,c3.setLocation(arlington,loc2trk1));  new TrainBuilder().build(train1);  Assert.assertEquals("Train should build",true,train1.isBuilt());  train1.reset();  Assert.assertEquals("Place c5",Track.OKAY,c5.setLocation(null,null));  new TrainBuilder().build(train1);  Assert.assertEquals("Train should not build",false,train1.isBuilt());  train1.reset();  Assert.assertEquals("Place c5",Track.OKAY,c5.setLocation(chelmsford,loc4trk1));  new TrainBuilder().build(train1);  Assert.assertEquals("Train should build",true,train1.isBuilt());  train1.setSecondLegOptions(Train.REMOVE_CABOOSE);  loc2trk1.setLength(150);  train1.reset();  new TrainBuilder().build(train1);  Assert.assertEquals("Train should build",true,train1.isBuilt());  Assert.assertEquals("Caboose is part of train",arlington,c1.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c2.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c3.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c4.getDestination());  Assert.assertEquals("Caboose is part of train",westford,c5.getDestination());  train1.setRequirements(Train.NO_CABOOSE_OR_FRED);  train1.setSecondLegOptions(Train.ADD_CABOOSE);  train1.setThirdLegOptions(Train.REMOVE_CABOOSE);  loc4trk1.setLength(150);  train1.reset();  new TrainBuilder().build(train1);  Assert.assertEquals("Train should build",true,train1.isBuilt());  Assert.assertEquals("Caboose is not part of train",null,c1.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c2.getDestination());  Assert.assertEquals("Caboose is part of train",chelmsford,c3.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c4.getDestination());  Assert.assertEquals("Caboose is part of train",null,c5.getDestination());  train1.setRequirements(Train.FRED);  train1.reset();  new TrainBuilder().build(train1);  Assert.assertEquals("Train should build",true,train1.isBuilt());  Assert.assertEquals("Boxcar is part of train",arlington,f1.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c1.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c1.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c2.getDestination());  Assert.assertEquals("Caboose is part of train",chelmsford,c3.getDestination());  Assert.assertEquals("Caboose is not part of train",null,c4.getDestination());  Assert.assertEquals("Caboose is part of train",null,c5.getDestination());}  }
class C{  public Logarithmic(double p,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(p);}  }
class C{  public PrimitiveType basicGetAssignmentCompatible(){  return assignmentCompatible;}  }
class C{  public boolean containsKey(Object key){  key=convertKey(key);  int hashCode=hash(key);  HashEntry entry=data[hashIndex(hashCode,data.length)];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.key)) {      return true;    }    entry=entry.next;  }  return false;}  }
class C{  public SolrResourceLoader(String instanceDir,ClassLoader parent){  this(instanceDir,parent,null);}  }
class C{  public static void log(final String msg,final Throwable t){  if (DEBUG) {    log(msg);    t.printStackTrace(System.out);  }}  }
class C{  private void addItem(File directory){  if (directory == null) {    return;  }  boolean useShellFolder=FilePane.usesShellFolder(chooser);  directories.clear();  File[] baseFolders=(useShellFolder) ? (File[])ShellFolder.get("fileChooserComboBoxFolders") : fsv.getRoots();  directories.addAll(Arrays.asList(baseFolders));  File canonical;  try {    canonical=directory.getCanonicalFile();  } catch (  IOException e) {    canonical=directory;  }  try {    File sf=useShellFolder ? ShellFolder.getShellFolder(canonical) : canonical;    File f=sf;    Vector<File> path=new Vector<File>(10);    do {      path.addElement(f);    } while ((f=f.getParentFile()) != null);    int pathCount=path.size();    for (int i=0; i < pathCount; i++) {      f=path.get(i);      if (directories.contains(f)) {        int topIndex=directories.indexOf(f);        for (int j=i - 1; j >= 0; j--) {          directories.insertElementAt(path.get(j),topIndex + i - j);        }        break;      }    }    calculateDepths();    setSelectedItem(sf);  } catch (  FileNotFoundException ex) {    calculateDepths();  }}  }
class C{  @Override public View onCreateInputView(){  mInputView=(LatinKeyboardView)getLayoutInflater().inflate(R.layout.input,null);  mInputView.setOnKeyboardActionListener(this);  mInputView.setPreviewEnabled(false);  setLatinKeyboard(mQwertyKeyboard);  return mInputView;}  }
class C{  public Map parseCatalog(String catalogURI){  URL url;  Map map=null;  InputStream s=null;  try {    url=FSCatalog.class.getClassLoader().getResource(catalogURI);    s=new BufferedInputStream(url.openStream());    map=parseCatalog(new InputSource(s));  } catch (  Exception ex) {    XRLog.xmlEntities(Level.WARNING,"Could not open XML catalog from URI '" + catalogURI + "'",ex);    map=new HashMap();  } finally {    try {      if (s != null) {        s.close();      }    } catch (    IOException e) {    }  }  return map;}  }
class C{  public UnassignedDatasetException(String message){  super(message);}  }
class C{  private Geometry unionNoOpt(Geometry g0){  Geometry empty=geomFact.createPoint((Coordinate)null);  return SnapIfNeededOverlayOp.overlayOp(g0,empty,OverlayOp.UNION);}  }
class C{  public static <E>List<E> singletonList(E object){  return new SingletonList<E>(object);}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  public void reset(){  super.reset();  H1=H1t;  H2=H2t;  H3=H3t;  H4=H4t;  H5=H5t;  H6=H6t;  H7=H7t;  H8=H8t;}  }
class C{  protected void onChannelInfo(String channel,int userCount,String topic){}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  public boolean isEnd(){  return false;}  }
class C{  public static Enum<?> doReadEnum(BinaryInputStream in,Class<?> cls) throws BinaryObjectException {  assert cls != null;  if (!cls.isEnum())   throw new BinaryObjectException("Class does not represent enum type: " + cls.getName());  int ord=in.readInt();  return BinaryEnumCache.get(cls,ord);}  }
class C{  private void writeResourceInst(int instId) throws IOException {  if (logger.isTraceEnabled(LogMarker.STATISTICS)) {    logger.trace(LogMarker.STATISTICS,"StatArchiveWriter#writeResourceInst instId={}",instId);  }  if (instId > MAX_BYTE_RESOURCE_INST_ID) {    if (instId > MAX_SHORT_RESOURCE_INST_ID) {      this.dataOut.writeByte(INT_RESOURCE_INST_ID_TOKEN);      this.dataOut.writeInt(instId);      if (this.trace && (traceResourceInstId == -1 || traceResourceInstId == instId)) {        this.traceDataOut.println("writeResourceInst#writeByte INT_RESOURCE_INST_ID_TOKEN: " + INT_RESOURCE_INST_ID_TOKEN);        if (instId == ILLEGAL_RESOURCE_INST_ID) {          this.traceDataOut.println("writeResourceInst#writeInt ILLEGAL_RESOURCE_INST_ID: " + ILLEGAL_RESOURCE_INST_ID);        } else {          this.traceDataOut.println("writeResourceInst#writeInt instId: " + instId);        }      }    } else {      this.dataOut.writeByte(SHORT_RESOURCE_INST_ID_TOKEN);      this.dataOut.writeShort(instId);      if (this.trace && (traceResourceInstId == -1 || traceResourceInstId == instId)) {        this.traceDataOut.println("writeResourceInst#writeByte SHORT_RESOURCE_INST_ID_TOKEN: " + SHORT_RESOURCE_INST_ID_TOKEN);        if (instId == ILLEGAL_RESOURCE_INST_ID) {          this.traceDataOut.println("writeResourceInst#writeShort ILLEGAL_RESOURCE_INST_ID: " + ILLEGAL_RESOURCE_INST_ID);        } else {          this.traceDataOut.println("writeResourceInst#writeShort instId: " + instId);        }      }    }  } else {    this.dataOut.writeByte(instId);    if (this.trace && (traceResourceInstId == -1 || traceResourceInstId == instId)) {      if (instId == ILLEGAL_RESOURCE_INST_ID) {        this.traceDataOut.println("writeResourceInst#writeByte ILLEGAL_RESOURCE_INST_ID: " + ILLEGAL_RESOURCE_INST_ID);      } else {        this.traceDataOut.println("writeResourceInst#writeByte instId: " + instId);      }    }  }}  }
class C{  public String paramString(){  return super.paramString() + " " + getLatLon();}  }
class C{  protected boolean useNonBlockingRead(){  return !Registry.is("output.reader.blocking.mode",false);}  }
class C{  public synchronized OMGraphicList prepare(){  OMGraphicList list=getList();  if (list != null) {    list.clear();  } else {    list=new OMGraphicList();  }  if (spatialIndex == null)   return list;  try {    if (bufferedList == null) {      bufferedList=getWholePlanet();    }  } catch (  FormatException fe) {    if (logger.isLoggable(Level.FINE)) {      logger.fine(fe.getMessage());    }    return list;  }catch (  IOException ioe) {    if (logger.isLoggable(Level.FINE)) {      logger.fine(ioe.getMessage());    }    return list;  }  Projection proj=getProjection();  Point2D ul=proj.getUpperLeft();  Point2D lr=proj.getLowerRight();  double ulLat=ul.getY();  double ulLon=ul.getX();  double lrLat=lr.getY();  double lrLon=lr.getX();  try {    if (ProjMath.isCrossingDateline(ulLon,lrLon,proj.getScale())) {      if (logger.isLoggable(Level.FINE)) {        logger.fine(getName() + ": Dateline is on screen");      }      double ymin=Math.min(ulLat,lrLat);      double ymax=Math.max(ulLat,lrLat);      checkSpatialIndexEntries(ulLon,ymin,180.0d,ymax,list,proj);      checkSpatialIndexEntries(-180.0d,ymin,lrLon,ymax,list,proj);    } else {      double xmin=Math.min(ulLon,lrLon);      double xmax=Math.max(ulLon,lrLon);      double ymin=Math.min(ulLat,lrLat);      double ymax=Math.max(ulLat,lrLat);      checkSpatialIndexEntries(xmin,ymin,xmax,ymax,list,proj);    }  } catch (  FormatException fe) {    if (logger.isLoggable(Level.FINE)) {      logger.fine(fe.getMessage());    }  }catch (  IOException ioe) {    if (logger.isLoggable(Level.FINE)) {      logger.fine(ioe.getMessage());    }  }  return list;}  }
class C{  @Override public final int doStartTag() throws JspException {  output_date=date;  return EVAL_BODY_TAG;}  }
class C{  public void putBytes(DataOutputStream dataOut) throws IOException {  dataOut.write(readBytes,0,idx);  idx=0;}  }
class C{  public final boolean contains(String s){  if (null == s)   return false;  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equals(s))     return true;  }  return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.PROVIDED_RUNTIME_LIBRARIES__PROVIDED_RUNTIME_LIBRARIES:    return ((InternalEList<?>)getProvidedRuntimeLibraries()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void encodeDimension(BigInteger value,byte dest[],int offset){  NumericUtils.bigIntToSortableBytes(value,BYTES,dest,offset);}  }
class C{  public JSONArray append(float value){  return append((double)value);}  }
class C{  @Override protected boolean mutatesTo(Object o1,Object o2){  if (this.propertyNames.length > 0) {    if (BeansUtils.declaredEquals(o1.getClass())) {      return o1.equals(o2);    }  }  return super.mutatesTo(o1,o2);}  }
class C{  private void checkUnsorted(Map<Action,Constraints> unsortedMap,Action action,List<Action> result){  Iterator<Map.Entry<Action,Constraints>> itr=unsortedMap.entrySet().iterator();  while (itr.hasNext()) {    Map.Entry<Action,Constraints> entry=itr.next();    String actionId=actionManager.getId(action);    Action relatedAction=entry.getKey();    Constraints relatedConstraints=entry.getValue();    if (relatedConstraints.myRelativeToActionId.equals(actionId)) {      if (relatedConstraints.myAnchor.equals(Anchor.BEFORE)) {        result.add(result.indexOf(action),relatedAction);      } else       if (relatedConstraints.myAnchor.equals(Anchor.AFTER)) {        result.add(result.indexOf(action) + 1,relatedAction);      }      itr.remove();      checkUnsorted(unsortedMap,relatedAction,result);    }  }}  }
class C{  public String toMonitorString(){  String test=Constants.toMonitorString(this);  return "Recv[" + getNumDataElements() + "]: "+ test+ "\n";}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  public void initServerStarted(){  String dhus_url=configurationManager.getServerConfiguration().getUrl();  solrClient.setBaseURL(dhus_url + SOLR_SVC);}  }
class C{  public Label(String label,String suffix){  mLabel=label == null ? "" : label;  mSuffix=suffix == null ? "" : suffix;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MIssueUser[");  sb.append(get_ID()).append("-").append(getUserName()).append(",AD_User_ID=").append(getAD_User_ID()).append("]");  return sb.toString();}  }
class C{  @NotNull private static String transformClassNameToBemFormat(@NotNull String className,@NotNull String separator,@NotNull GenerationNode node){  Pair<String,Integer> cleanStringAndDepth=getCleanStringAndDepth(className,separator);  Integer depth=cleanStringAndDepth.second;  if (depth > 0) {    GenerationNode donor=node;    while (donor.getParent() != null && depth > 0) {      donor=donor.getParent();      depth--;    }    BemState bemState=BEM_STATE.get(donor);    if (bemState != null) {      String prefix=bemState.getBlock();      if (!isNullOrEmpty(prefix)) {        String element=bemState.getElement();        if (MODIFIER_SEPARATOR.equals(separator) && !isNullOrEmpty(element)) {          prefix=prefix + separator + element;        }        return prefix + separator + cleanStringAndDepth.first;      }    }  }  return className;}  }
class C{  private boolean checkEquals(Object obj) throws Exception {  if (obj == null)   return false;  if (obj instanceof Proxy) {    InvocationHandler ih=Proxy.getInvocationHandler(obj);    if (ih instanceof AnnotationImpl) {      AnnotationImpl other=(AnnotationImpl)ih;      return annotation.equals(other.annotation);    }  }  Class otherAnnotationType=(Class)JDK_ANNOTATION_TYPE_METHOD.invoke(obj,(Object[])null);  if (getAnnotationType().equals(otherAnnotationType) == false)   return false;  Method[] methods=annotationType.getDeclaredMethods();  for (int i=0; i < methods.length; ++i) {    String name=methods[i].getName();    MemberValue mv=annotation.getMemberValue(name);    Object value=null;    Object otherValue=null;    try {      if (mv != null)       value=mv.getValue(classLoader,pool,methods[i]);      if (value == null)       value=getDefault(name,methods[i]);      otherValue=methods[i].invoke(obj,(Object[])null);    } catch (    RuntimeException e) {      throw e;    }catch (    Exception e) {      throw new RuntimeException("Error retrieving value " + name + " for annotation "+ annotation.getTypeName(),e);    }    if (value == null && otherValue != null)     return false;    if (value != null && value.equals(otherValue) == false)     return false;  }  return true;}  }
class C{  public static <T extends Comparable<T>>void comparedEqual(T a,T b){  if (a == null && b == null) {    return;  } else   if (a == null || b == null) {    fail("Not both null");  } else {    boolean equals=a.equals(b);    boolean hashCode=a.hashCode() == b.hashCode();    boolean compareTo=a.compareTo(b) == 0;    assertTrue(equals && hashCode && compareTo);  }}  }
class C{  public void rulesR8R9R10(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node c : nodes) {    List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);    for (    Node a : intoCArrows) {      if (!(graph.getEndpoint(c,a) == Endpoint.CIRCLE))       continue;      if (!ruleR8(a,c,graph)) {        boolean b=ruleR9(a,c,graph);        if (!b) {          ruleR10(a,c,graph);        }      }    }  }}  }
class C{  public void beforeInsert(int index,boolean element){  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  ensureCapacity(size + 1);  System.arraycopy(elements,index,elements,index + 1,size - index);  elements[index]=element;  size++;}  }
class C{  void hide(){  isVisible=false;  ViewCompat.animate(this).setDuration(150).alpha(0).scaleX(0).scaleY(0).start();}  }
class C{  public static int reverse(int num){  long rev=0;  while (num != 0) {    rev=rev * 10 + num % 10;    num/=10;  }  return num < 0 ? -1 * (int)rev : (int)rev;}  }
class C{  boolean isReusable(){  return true;}  }
class C{  public LiveAttributeException(Element e,String an,short code,String val){  this.e=e;  this.attributeName=an;  this.code=code;  this.value=val;}  }
class C{  private void stepInput(){  for (  final Port port : Port.VALUES) {    final Pipe receivingPipe=getCasing().getReceivingPipe(getFace(),port);    if (!receivingPipe.isReading()) {      receivingPipe.beginRead();    }    if (receivingPipe.canTransfer()) {      process(receivingPipe.read());      receivingPipe.beginRead();    }  }}  }
class C{  public boolean isHiPass(){  return this.hiPass;}  }
class C{  public AffineTransformer(){}  }
class C{  public static byte[] des_cksum(byte[] ivec,byte[] msg,byte[] key) throws KrbCryptoException {  Cipher cipher=null;  byte[] result=new byte[8];  try {    cipher=Cipher.getInstance("DES/CBC/NoPadding");  } catch (  Exception e) {    KrbCryptoException ke=new KrbCryptoException("JCE provider may not be installed. " + e.getMessage());    ke.initCause(e);    throw ke;  }  IvParameterSpec params=new IvParameterSpec(ivec);  SecretKeySpec skSpec=new SecretKeySpec(key,"DES");  try {    SecretKeyFactory skf=SecretKeyFactory.getInstance("DES");    SecretKey sk=(SecretKey)skSpec;    cipher.init(Cipher.ENCRYPT_MODE,sk,params);    for (int i=0; i < msg.length / 8; i++) {      result=cipher.doFinal(msg,i * 8,8);      cipher.init(Cipher.ENCRYPT_MODE,sk,(new IvParameterSpec(result)));    }  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }  return result;}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if ((obj == null) || (obj.getClass() != getClass()))   return false;  ExecOptionPermission that=(ExecOptionPermission)obj;  return this.getName().equals(that.getName());}  }
class C{  public static void waitFor(){  cb.waitForShutdown();}  }
class C{  public static void generateErrorException(final String errCode,final Logger logger,final Exception exception){  generateErrorException(errCode,null,logger,exception);}  }
class C{  public static void escapeJavaScript(Writer out,String str) throws IOException {  escapeJavaStyleString(out,str,true);}  }
class C{  public CActionZoomFit(final ZyGraph graph){  super("Fit Graph to Screen");  m_graph=Preconditions.checkNotNull(graph,"IE02833: graph argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Zooms the graph so far that the whole graph is visible");  putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/centerview_up.jpg")));}  }
class C{  public static Bitmap shrink(Bitmap bitmap,float scale){  if (scale >= 1.0f) {    return bitmap.copy(bitmap.getConfig(),false);  }  Matrix matrix=new Matrix();  matrix.postScale(scale,scale);  return Bitmap.createBitmap(bitmap,0,0,(int)(scale * bitmap.getWidth()),(int)(scale * bitmap.getHeight()),matrix,true);}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("adqstatus") @Valid AppDeploymentQueueStatus adqStatus,BindingResult bindingResult,Principal principal){  LOGGER.debug("Entering into insert for adq_status table");  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.AppDeploymentQueueStatus jpaAdqStatus=new com.wipro.ats.bdre.md.dao.jpa.AppDeploymentQueueStatus();    jpaAdqStatus.setAppDeploymentStatusId(adqStatus.getAppDeploymentStatusId());    jpaAdqStatus.setDescription(adqStatus.getDescription());    Short appDeploymentStatusId=appDeploymentQueueStatusDAO.insert(jpaAdqStatus);    adqStatus.setAppDeploymentStatusId(appDeploymentStatusId);    LOGGER.debug("Exiting from insert for adq_status table");    restWrapper=new RestWrapper(adqStatus,RestWrapper.OK);    LOGGER.info(RECORDWITHID + " inserted in AppDeploymentQueueStatus by User:" + principal.getName()+ adqStatus);  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private void loadBuiltinStrings(String localeSuffix){  logger.info("Loading builtin strings for locale {} ",localeSuffix);  String path=Config.v().ANDROID_LIB_DIR.getPath() + File.separator + "res/values";  if (localeSuffix != null && !localeSuffix.isEmpty() && !localeSuffix.equalsIgnoreCase("US"))   path=path + "-" + localeSuffix;  path=path + File.separator + "strings.xml";  XmlFile xmlFile=new XmlFile(path);  processStrings(xmlFile);}  }
class C{  public Modulo3Equation(final int c,final int numVars){  this.c=c;  this.bitVector=LongArrayBitVector.ofLength(numVars * 2);  this.bits=bitVector.bits();  this.list=bitVector.asLongBigList(2);  this.firstVar=Integer.MAX_VALUE;  this.isEmpty=true;}  }
class C{  public static boolean reflectionEquals(final Object lhs,final Object rhs,final boolean testTransients,final Class<?> reflectUpToClass,final String... excludeFields){  if (lhs == rhs) {    return true;  }  if (lhs == null || rhs == null) {    return false;  }  final Class<?> lhsClass=lhs.getClass();  final Class<?> rhsClass=rhs.getClass();  Class<?> testClass;  if (lhsClass.isInstance(rhs)) {    testClass=lhsClass;    if (!rhsClass.isInstance(lhs)) {      testClass=rhsClass;    }  } else   if (rhsClass.isInstance(lhs)) {    testClass=rhsClass;    if (!lhsClass.isInstance(rhs)) {      testClass=lhsClass;    }  } else {    return false;  }  final EqualsBuilder equalsBuilder=new EqualsBuilder();  try {    if (testClass.isArray()) {      equalsBuilder.append(lhs,rhs);    } else {      reflectionAppend(lhs,rhs,testClass,equalsBuilder,testTransients,excludeFields);      while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {        testClass=testClass.getSuperclass();        reflectionAppend(lhs,rhs,testClass,equalsBuilder,testTransients,excludeFields);      }    }  } catch (  final IllegalArgumentException e) {    return false;  }  return equalsBuilder.isEquals();}  }
class C{  public void addShape3D(float x,float y,float z,Shape2D shape,float depth,int shapeTextureWidth,int shapeTextureHeight,int sideTextureWidth,int sideTextureHeight,float rotX,float rotY,float rotZ){  addShape3D(x,y,z,shape,depth,shapeTextureWidth,shapeTextureHeight,sideTextureWidth,sideTextureHeight,rotX,rotY,rotZ,null);}  }
class C{  public static boolean performNavigationByDOMObject(AccessibilityNodeInfoCompat node,int direction){  final int action=(direction == DIRECTION_FORWARD) ? AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT : AccessibilityNodeInfoCompat.ACTION_PREVIOUS_HTML_ELEMENT;  return node.performAction(action);}  }
class C{  public TextLogitStream(StreamExpression expression,StreamFactory factory) throws IOException {  String collectionName=factory.getValueOperand(expression,0);  List<StreamExpressionNamedParameter> namedParams=factory.getNamedOperands(expression);  StreamExpressionNamedParameter zkHostExpression=factory.getNamedOperand(expression,"zkHost");  List<StreamExpression> streamExpressions=factory.getExpressionOperandsRepresentingTypes(expression,Expressible.class,TupleStream.class);  if (expression.getParameters().size() != 1 + namedParams.size() + streamExpressions.size()) {    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - unknown operands found",expression));  }  if (null == collectionName) {    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - collectionName expected as first operand",expression));  }  if (0 == namedParams.size()) {    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'",expression));  }  Map<String,String> params=new HashMap<String,String>();  for (  StreamExpressionNamedParameter namedParam : namedParams) {    if (!namedParam.getName().equals("zkHost")) {      params.put(namedParam.getName(),namedParam.getParameter().toString().trim());    }  }  String name=params.get("name");  if (name != null) {    params.remove("name");  } else {    throw new IOException("name param cannot be null for TextLogitStream");  }  String feature=params.get("field");  if (feature != null) {    params.remove("field");  } else {    throw new IOException("field param cannot be null for TextLogitStream");  }  TupleStream stream=null;  if (streamExpressions.size() > 0) {    stream=factory.constructStream(streamExpressions.get(0));  } else {    throw new IOException("features must be present for TextLogitStream");  }  String maxIterationsParam=params.get("maxIterations");  int maxIterations=0;  if (maxIterationsParam != null) {    maxIterations=Integer.parseInt(maxIterationsParam);    params.remove("maxIterations");  } else {    throw new IOException("maxIterations param cannot be null for TextLogitStream");  }  String outcomeParam=params.get("outcome");  if (outcomeParam != null) {    params.remove("outcome");  } else {    throw new IOException("outcome param cannot be null for TextLogitStream");  }  String positiveLabelParam=params.get("positiveLabel");  int positiveLabel=1;  if (positiveLabelParam != null) {    positiveLabel=Integer.parseInt(positiveLabelParam);    params.remove("positiveLabel");  }  String thresholdParam=params.get("threshold");  double threshold=0.5;  if (thresholdParam != null) {    threshold=Double.parseDouble(thresholdParam);    params.remove("threshold");  }  int iteration=0;  String iterationParam=params.get("iteration");  if (iterationParam != null) {    iteration=Integer.parseInt(iterationParam);    params.remove("iteration");  }  List<Double> weights=null;  String weightsParam=params.get("weights");  if (weightsParam != null) {    weights=new ArrayList<>();    String[] weightsArray=weightsParam.split(",");    for (    String weightString : weightsArray) {      weights.add(Double.parseDouble(weightString));    }    params.remove("weights");  }  String zkHost=null;  if (null == zkHostExpression) {    zkHost=factory.getCollectionZkHost(collectionName);  } else   if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {    zkHost=((StreamExpressionValue)zkHostExpression.getParameter()).getValue();  }  if (null == zkHost) {    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - zkHost not found for collection '%s'",expression,collectionName));  }  init(collectionName,zkHost,params,name,feature,stream,weights,outcomeParam,positiveLabel,threshold,maxIterations,iteration);}  }
class C{  public int read(byte b[]) throws IOException {  return read(b,0,b.length);}  }
class C{  private void ensureValid(){  if (!CloseableReference.isValid(mBufRef)) {    throw new InvalidStreamException();  }}  }
class C{  public LinkedHashMap(){  super();  accessOrder=false;}  }
class C{  private void printStatusMessages(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,int coveredBranches,int coveredMethods,double fitness){  if (coveredBranches > maxCoveredBranches) {    maxCoveredBranches=coveredBranches;    logger.info("(Branches) Best individual covers " + coveredBranches + "/"+ (totalBranches * 2)+ " branches and "+ coveredMethods+ "/"+ totalMethods+ " methods");    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }  if (coveredMethods > maxCoveredMethods) {    logger.info("(Methods) Best individual covers " + coveredBranches + "/"+ (totalBranches * 2)+ " branches and "+ coveredMethods+ "/"+ totalMethods+ " methods");    maxCoveredMethods=coveredMethods;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }  if (fitness < bestFitness) {    logger.info("(Fitness) Best individual covers " + coveredBranches + "/"+ (totalBranches * 2)+ " branches and "+ coveredMethods+ "/"+ totalMethods+ " methods");    bestFitness=fitness;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }}  }
class C{  public PerformChangeOperation(Change change){  Assert.isNotNull(change);  fChange=change;  fSchedulingRule=ResourcesPlugin.getWorkspace().getRoot();}  }
class C{  private boolean arrayKeyValueExists(String key,String value){  if (visitedPost.containsKey(key)) {    for (    String s : visitedPost.get(key)) {      if (s.equals(value)) {        return true;      }    }  }  return false;}  }
class C{  public void init(){  getJobRegions();}  }
class C{  @Override public TemplateElement[] accept(Environment env) throws IOException {  env.getOut().write(text);  return null;}  }
class C{  public static void deregisterAllDrivers(Class<? extends Driver> driverClass) throws NoSuchFieldException, IllegalAccessException, ClassNotFoundException {  Field field=DriverManager.class.getDeclaredField("registeredDrivers");  field.setAccessible(true);  List<?> list=(List<?>)field.get(null);  for (  Object driverInfo : list) {    Class<?> driverInfoClass=DBUtils.class.getClassLoader().loadClass("java.sql.DriverInfo");    Field driverField=driverInfoClass.getDeclaredField("driver");    driverField.setAccessible(true);    Driver d=(Driver)driverField.get(driverInfo);    if (d == null) {      LOG.debug("Found null driver object in drivers list. Ignoring.");      continue;    }    LOG.debug("Removing non-null driver object from drivers list.");    ClassLoader registeredDriverClassLoader=d.getClass().getClassLoader();    if (registeredDriverClassLoader == null) {      LOG.debug("Found null classloader for default driver {}. Ignoring since this may be using system classloader.",d.getClass().getName());      continue;    }    if (d.getClass().getClassLoader().equals(driverClass.getClassLoader())) {      LOG.debug("Removing default driver {} from registeredDrivers",d.getClass().getName());      list.remove(driverInfo);    }  }}  }
class C{  private void fillLabel(String sql,int parameter){  log.fine(sql + "; Parameter=" + parameter);  String retValue=DB.getSQLValueString(null,sql,parameter);  if (retValue != null)   label.setText(retValue);}  }
class C{  public boolean isSetLayerSize(){  return EncodingUtils.testBit(__isset_bitfield,__LAYERSIZE_ISSET_ID);}  }
class C{  public static String intsToString(int[] b){  if (b.length < 4) {    return "0.0.0.0";  }  return String.format("%d.%d.%d.%d",b[0],b[1],b[2],b[3]);}  }
class C{  protected void parseDefineFont(InStream in) throws IOException {  int id=in.readUI16();  int firstOffset=in.readUI16();  int numGlyphs=firstOffset / 2;  SWFVectors vectors=tagtypes.tagDefineFont(id,numGlyphs);  if (vectors == null) {    return;  }  for (int i=1; i < numGlyphs; i++) {    in.readUI16();  }  for (int i=0; i < numGlyphs; i++) {    parseShape(in,vectors,false,false);  }}  }
class C{  @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier) throws FilterUnsupportedException {  FilterResolverMetadata metadata=new FilterResolverMetadata();  metadata.setTableIdentifier(absoluteTableIdentifier);  if ((!isExpressionResolve) && exp instanceof BinaryConditionalExpression) {    BinaryConditionalExpression binaryConditionalExpression=(BinaryConditionalExpression)exp;    Expression leftExp=binaryConditionalExpression.getLeft();    Expression rightExp=binaryConditionalExpression.getRight();    if (leftExp instanceof ColumnExpression) {      ColumnExpression columnExpression=(ColumnExpression)leftExp;      metadata.setColumnExpression(columnExpression);      metadata.setExpression(rightExp);      metadata.setIncludeFilter(isIncludeFilter);      CarbonDimension dimension=columnExpression.getDimension();      if (FilterUtil.checkIfExpressionContainsColumn(rightExp) || FilterUtil.isExpressionNeedsToResolved(rightExp,isIncludeFilter) && dimension.hasEncoding(Encoding.DICTIONARY) && !dimension.hasEncoding(Encoding.DIRECT_DICTIONARY)) {        isExpressionResolve=true;      } else {        dimColResolvedFilterInfo.populateFilterInfoBasedOnColumnType(FilterInfoTypeVisitorFactory.getResolvedFilterInfoVisitor(columnExpression),metadata);      }    } else     if (rightExp instanceof ColumnExpression) {      ColumnExpression columnExpression=(ColumnExpression)rightExp;      metadata.setColumnExpression(columnExpression);      metadata.setExpression(leftExp);      metadata.setIncludeFilter(isIncludeFilter);      if (columnExpression.getDataType().equals(DataType.TimestampType)) {        isExpressionResolve=true;      } else {        if (FilterUtil.checkIfExpressionContainsColumn(leftExp)) {          isExpressionResolve=true;        } else {          dimColResolvedFilterInfo.populateFilterInfoBasedOnColumnType(FilterInfoTypeVisitorFactory.getResolvedFilterInfoVisitor(columnExpression),metadata);        }      }    } else {      isExpressionResolve=true;    }  }  if (isExpressionResolve && exp instanceof ConditionalExpression) {    ConditionalExpression conditionalExpression=(ConditionalExpression)exp;    List<ColumnExpression> columnList=conditionalExpression.getColumnList();    metadata.setColumnExpression(columnList.get(0));    metadata.setExpression(exp);    metadata.setIncludeFilter(isIncludeFilter);    if (!columnList.get(0).getDimension().hasEncoding(Encoding.DICTIONARY)) {      dimColResolvedFilterInfo.populateFilterInfoBasedOnColumnType(FilterInfoTypeVisitorFactory.getResolvedFilterInfoVisitor(columnList.get(0)),metadata);    } else     if (columnList.get(0).getDimension().hasEncoding(Encoding.DICTIONARY) && !(columnList.get(0).getDimension().getDataType() == org.carbondata.core.carbon.metadata.datatype.DataType.STRUCT || columnList.get(0).getDimension().getDataType() == org.carbondata.core.carbon.metadata.datatype.DataType.ARRAY)) {      dimColResolvedFilterInfo.setFilterValues(FilterUtil.getFilterListForAllValues(absoluteTableIdentifier,exp,columnList.get(0),isIncludeFilter));      dimColResolvedFilterInfo.setColumnIndex(columnList.get(0).getDimension().getOrdinal());      dimColResolvedFilterInfo.setDimension(columnList.get(0).getDimension());    }  }}  }
class C{  public static void closeSilently(Writer writer){  if (writer != null) {    try {      writer.flush();      writer.close();    } catch (    Exception e) {    }  }}  }
class C{  public final String join(@Nullable Object first,@Nullable Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  public static byte[] load(InputStream inputStream){  String base64;  try {    DocumentBuilder documentBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    Document doc=documentBuilder.parse(inputStream);    base64=(String)xpath.evaluate("//KeyFile/Key/Data/text()",doc,XPathConstants.STRING);    if (base64 == null) {      return null;    }  } catch (  Exception e) {    return null;  }  return Base64.decodeBase64(base64.getBytes());}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  private int[] invertKey(int[] inKey){  int t1, t2, t3, t4;  int p=52;  int[] key=new int[52];  int inOff=0;  t1=mulInv(inKey[inOff++]);  t2=addInv(inKey[inOff++]);  t3=addInv(inKey[inOff++]);  t4=mulInv(inKey[inOff++]);  key[--p]=t4;  key[--p]=t3;  key[--p]=t2;  key[--p]=t1;  for (int round=1; round < 8; round++) {    t1=inKey[inOff++];    t2=inKey[inOff++];    key[--p]=t2;    key[--p]=t1;    t1=mulInv(inKey[inOff++]);    t2=addInv(inKey[inOff++]);    t3=addInv(inKey[inOff++]);    t4=mulInv(inKey[inOff++]);    key[--p]=t4;    key[--p]=t2;    key[--p]=t3;    key[--p]=t1;  }  t1=inKey[inOff++];  t2=inKey[inOff++];  key[--p]=t2;  key[--p]=t1;  t1=mulInv(inKey[inOff++]);  t2=addInv(inKey[inOff++]);  t3=addInv(inKey[inOff++]);  t4=mulInv(inKey[inOff]);  key[--p]=t4;  key[--p]=t3;  key[--p]=t2;  key[--p]=t1;  return key;}  }
class C{  @Override protected void readNonNdefMessage(){  toast(getString(R.string.readNonNDEFMessage));}  }
class C{  public void bob(MowzieModelRenderer box,float speed,float degree,boolean bounce,float f,float f1){  float bob=(float)(Math.sin(f * speed) * f1 * degree - f1 * degree);  if (bounce)   bob=(float)-Math.abs((Math.sin(f * speed) * f1 * degree));  box.rotationPointY+=bob;}  }
class C{  static Instruction instanceOf(Instruction s,IR ir){  RegisterOperand result=InstanceOf.getClearResult(s);  TypeReference LHStype=InstanceOf.getType(s).getTypeRef();  Operand ref=InstanceOf.getClearRef(s);  Instruction next=s.nextInstructionInCodeOrder();  if (next.operator() == INT_IFCMP && IfCmp.getVal1(next) instanceof RegisterOperand && result.similar(IfCmp.getVal1(next))) {    Operand val2=IfCmp.getVal2(next);    if (VM.VerifyAssertions)     VM._assert(val2.isIntConstant());    int ival2=((IntConstantOperand)val2).value;    ConditionOperand cond=IfCmp.getCond(next);    boolean branchCondition=(((ival2 == 0) && (cond.isNOT_EQUAL() || cond.isLESS_EQUAL())) || ((ival2 == 1) && (cond.isEQUAL() || cond.isGREATER_EQUAL())));    BasicBlock branchBB=next.getBranchTarget();    RegisterOperand oldGuard=IfCmp.getGuardResult(next);    next.remove();    BasicBlock fallThroughBB=fallThroughBB(s,ir);    BasicBlock falseBranch=branchCondition ? fallThroughBB : branchBB;    BasicBlock trueBranch=branchCondition ? branchBB : fallThroughBB;    BranchProfileOperand bp=IfCmp.getClearBranchProfile(next);    if (branchCondition)     bp=bp.flip();    Instruction nullComp=IfCmp.create(REF_IFCMP,oldGuard.copyRO(),ref.copy(),new NullConstantOperand(),ConditionOperand.EQUAL(),falseBranch.makeJumpTarget(),BranchProfileOperand.unlikely());    s.insertBefore(nullComp);    BasicBlock myBlock=s.getBasicBlock();    BasicBlock instanceOfBlock=myBlock.splitNodeAt(nullComp,ir);    myBlock.insertOut(instanceOfBlock);    myBlock.insertOut(falseBranch);    ir.cfg.linkInCodeOrder(myBlock,instanceOfBlock);    Operand RHStib=getTIB(s,ir,ref,oldGuard.copyRO());    return generateBranchingTypeCheck(s,ir,ref.copy(),LHStype,RHStib,trueBranch,falseBranch,oldGuard.copy().asRegister(),bp);  } else {    RegisterOperand guard=ir.regpool.makeTempValidation();    BasicBlock instanceOfBlock=s.getBasicBlock().segregateInstruction(s,ir);    BasicBlock prevBB=instanceOfBlock.prevBasicBlockInCodeOrder();    BasicBlock nextBB=instanceOfBlock.nextBasicBlockInCodeOrder();    BasicBlock nullCaseBB=instanceOfBlock.createSubBlock(s.getBytecodeIndex(),ir,.01f);    prevBB.appendInstruction(IfCmp.create(REF_IFCMP,guard,ref.copy(),new NullConstantOperand(),ConditionOperand.EQUAL(),nullCaseBB.makeJumpTarget(),BranchProfileOperand.unlikely()));    nullCaseBB.appendInstruction(Move.create(INT_MOVE,result.copyD2D(),IC(0)));    nullCaseBB.appendInstruction(Goto.create(GOTO,nextBB.makeJumpTarget()));    prevBB.insertOut(nullCaseBB);    nullCaseBB.insertOut(nextBB);    ir.cfg.addLastInCodeOrder(nullCaseBB);    Operand RHStib=getTIB(s,ir,ref,guard.copyD2U());    return generateValueProducingTypeCheck(s,ir,ref.copy(),LHStype,RHStib,result);  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean hasCuisine(){  return cuisine.size() > 0;}  }
class C{  public boolean equals(Object obj2){  if (null == obj2)   return false; else   if (obj2 instanceof XNodeSet)   return obj2.equals(this); else   if (obj2 instanceof XNumber)   return obj2.equals(this); else   return str().equals(obj2.toString());}  }
class C{  String[] primedNodeText(){  if (!this.isPrimed) {    return this.nodeText;  }  boolean needsParens=(!this.isSubexpressionName) && primingNeedsParens(this.semanticNode);  String[] result=this.nodeText.clone();  if (needsParens) {    result=prependToStringArray(result,"(");    result[result.length - 1]=StringHelper.trimEnd(result[result.length - 1]) + ")'";  } else {    result[result.length - 1]=StringHelper.trimEnd(result[result.length - 1]) + "'";  }  return result;}  }
class C{  @Override public boolean equals(final Object other){  if (!(other instanceof Envelope3D)) {    return false;  }  final Envelope3D otherEnvelope=(Envelope3D)other;  if (isNull()) {    return otherEnvelope.isNull();  }  if (super.equals(other) && Comparison.equal(minz,otherEnvelope.getMinZ()) && Comparison.equal(maxz,otherEnvelope.getMaxZ())) {    return true;  }  return false;}  }
class C{  protected boolean isAfter(int x,int y,Rectangle innerAlloc){  if (majorAxis == View.X_AXIS) {    return (x > (innerAlloc.width + innerAlloc.x));  } else {    return (y > (innerAlloc.height + innerAlloc.y));  }}  }
class C{  static void linearTimeIncrementHistogramCounters(final double[] samples,final int offset,final int numSamples,final long weight,final double[] splitPoints,final long[] counters){  int i=0;  int j=0;  while (i < numSamples && j < splitPoints.length) {    if (samples[i + offset] < splitPoints[j]) {      counters[j]+=weight;      i++;    } else {      j++;    }  }  if (j == splitPoints.length) {    counters[j]+=(weight * (numSamples - i));  }}  }
class C{  public boolean hasValue(){  return true;}  }
class C{  public LaunchDiagnosticTool(){  super();}  }
class C{  public void addVerticesToSet(Set<VertexType> set){  set.add(this.m_vertex);  Iterator<SearchTree<VertexType>> i=childIterator();  while (i.hasNext()) {    SearchTree<VertexType> child=i.next();    child.addVerticesToSet(set);  }}  }
class C{  public boolean sameLine(SourcePosition other){  return (line == other.line);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  private static boolean hasSubscription(Context context){  final TelephonyManager tele=TelephonyManager.from(context);  return tele.getSimState() == SIM_STATE_READY || !TextUtils.isEmpty(tele.getLine1Number());}  }
class C{  public static double angle(NumberVector v1,NumberVector v2,NumberVector o){  final int dim1=v1.getDimensionality(), dim2=v2.getDimensionality(), dimo=o.getDimensionality();  final int mindim=(dim1 <= dim2) ? dim1 : dim2;  double cross=0, l1=0, l2=0;  for (int k=0; k < mindim; k++) {    final double ok=k < dimo ? o.doubleValue(k) : 0.;    final double r1=v1.doubleValue(k) - ok;    final double r2=v2.doubleValue(k) - ok;    cross+=r1 * r2;    l1+=r1 * r1;    l2+=r2 * r2;  }  for (int k=mindim; k < dim1; k++) {    final double ok=k < dimo ? o.doubleValue(k) : 0.;    final double r1=v1.doubleValue(k) - ok;    l1+=r1 * r1;  }  for (int k=mindim; k < dim2; k++) {    final double ok=k < dimo ? o.doubleValue(k) : 0.;    final double r2=v2.doubleValue(k) - ok;    l2+=r2 * r2;  }  final double a=(cross == 0.) ? 0. : (l1 == 0. || l2 == 0.) ? 1. : Math.sqrt((cross / l1) * (cross / l2));  return (a < 1.) ? a : 1.;}  }
class C{  public boolean isSetTimestamp(){  return EncodingUtils.testBit(__isset_bitfield,__TIMESTAMP_ISSET_ID);}  }
class C{  private Entry attribute(int index) throws Exception {  return new Entry(parser,index);}  }
class C{  private void addSimpleRegistrationToAuthRequest(HttpServletRequest httpReq,AuthRequest authReq) throws MessageException {  SRegRequest sregReq=SRegRequest.createFetchRequest();  String[] attributes={"nickname","email","fullname","dob","gender","postcode","country","language","timezone"};  for (int i=0, l=attributes.length; i < l; i++) {    String attribute=attributes[i];    String value=httpReq.getParameter(attribute);    if (OPTIONAL_VALUE.equals(value)) {      sregReq.addAttribute(attribute,false);    } else     if (REQUIRED_VALUE.equals(value)) {      sregReq.addAttribute(attribute,true);    }  }  if (!sregReq.getAttributes().isEmpty()) {    authReq.addExtension(sregReq);  }}  }
class C{  public MapKeep(int bits){  super(bits);  this.list=new Object[this.capacity];  this.map=new HashMap(this.capacity);}  }
class C{  private boolean testCount(){  int no=-1;  no=getCount();  MRole role=MRole.getDefault();  if (role.isQueryMax(no))   return ADialog.ask(getWindowNo(),m_frame,"InfoHighRecordCount",String.valueOf(no));  return true;}  }
class C{  private int compareVersion(Object[] left,Object[] right){  int result=((Integer)left[0]).compareTo((Integer)right[0]);  if (result != 0)   return result;  result=((Integer)left[1]).compareTo((Integer)right[1]);  if (result != 0)   return result;  result=((Integer)left[2]).compareTo((Integer)right[2]);  if (result != 0)   return result;  return ((String)left[3]).compareTo((String)right[3]);}  }
class C{  public static Iterable<GatewayMetaState.IndexMetaWriteInfo> resolveStatesToBeWritten(ImmutableSet<String> previouslyWrittenIndices,Set<String> potentiallyUnwrittenIndices,MetaData previousMetaData,MetaData newMetaData){  List<GatewayMetaState.IndexMetaWriteInfo> indicesToWrite=new ArrayList<>();  for (  String index : potentiallyUnwrittenIndices) {    IndexMetaData newIndexMetaData=newMetaData.index(index);    IndexMetaData previousIndexMetaData=previousMetaData == null ? null : previousMetaData.index(index);    String writeReason=null;    if (previouslyWrittenIndices.contains(index) == false || previousIndexMetaData == null) {      writeReason="freshly created";    } else     if (previousIndexMetaData.getVersion() != newIndexMetaData.getVersion()) {      writeReason="version changed from [" + previousIndexMetaData.getVersion() + "] to ["+ newIndexMetaData.getVersion()+ "]";    }    if (writeReason != null) {      indicesToWrite.add(new GatewayMetaState.IndexMetaWriteInfo(newIndexMetaData,previousIndexMetaData,writeReason));    }  }  return indicesToWrite;}  }
class C{  protected boolean pop(int where){  State s=stack.remove(stack.size() - 1);  s.pop(where);  if (s.size() > 0)   completed.add(s);  if (stack.size() == 0) {    push(new State(TokenizerState.IN_SENTENCE),where + 1);    this.state=stack.get(stack.size() - 1).stateIndex();    return true;  } else {    this.state=stack.get(stack.size() - 1).stateIndex();    return false;  }}  }
class C{  public static Date parseDate(final String dateValue) throws DateParseException {  return parseDate(dateValue,null);}  }
class C{  public String[] next(){  String[] temp=nextLine;  try {    nextLine=reader.readNext();  } catch (  IOException e) {    throw new RuntimeException(e);  }  return temp;}  }
class C{  public PM(double probability,double distributionIndex){  super();  this.probability=probability;  this.distributionIndex=distributionIndex;}  }
class C{  public void releaseRemoteDownloadLock(String svcId){  try {    if (_remoteDownloadLock != null) {      _remoteDownloadLock.release();      publishRemoteDownloadLeader(null);    }  } catch (  Exception e) {    _log.error("Can not release leader lock {}",svcId,e);  }}  }
class C{  public static void handleGoForwardControlVisibility(){  if (publicWebRender.currentProgress != 100) {    goForwardImgBtn.setBackgroundResource(WebThemeHelper.isDark ? R.drawable.main_cross_rot_icon_light : R.drawable.main_cross_rot_icon);    goForwardImgBtn.setVisibility(View.VISIBLE);  } else {    if (publicWebRender.canGoForward()) {      goForwardImgBtn.setBackgroundResource(WebThemeHelper.isDark ? R.drawable.ic_arrow_forward_white_48dp : R.drawable.ic_arrow_forward_black_48dp);      goForwardImgBtn.setVisibility(View.VISIBLE);    } else     goForwardImgBtn.setVisibility(View.INVISIBLE);  }}  }
class C{  @Override public boolean isValid(int playerId,IGame game){  boolean retVal=false;  for (int index=0; (index < entityIds.length) && !retVal; index++) {    if ((game.getEntity(entityIds[index]) != null) && (playerId == game.getEntity(entityIds[index]).getOwnerId())) {      retVal=true;    }  }  return retVal;}  }
class C{  public boolean onItemClick(IDrawerItem selectedDrawerItem){  if (selectedDrawerItem.isSelectable()) {    if (mCrossFader != null) {      if (mCrossFader.isCrossfaded()) {        mCrossFader.crossfade();      }    }    int identifier=selectedDrawerItem.getIdentifier();    setSelection(identifier);    return false;  } else {    return true;  }}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public static String grep(String val,String pattern){  return grepInner(val,pattern,false);}  }
class C{  public byte[] encrypt(byte[] input) throws OpenStegoException {  try {    return this.encryptCipher.doFinal(input);  } catch (  Exception ex) {    if (ex instanceof OpenStegoException) {      throw (OpenStegoException)ex;    } else {      throw new OpenStegoException(ex);    }  }}  }
class C{  public static GeoShapeQueryBuilder geoIntersectionQuery(String name,ShapeBuilder shape){  return geoShapeQuery(name,shape,ShapeRelation.INTERSECTS);}  }
class C{  public static IDPConfiguration createAffinitizedIDPConfiguration(String alias,String entityID,X509Certificate signingCertificate,List<String> nameIDFormats,List<SingleSignOnService> singleSignOnServices,List<SingleLogoutService> singleLogoutServices){  return new IDPConfiguration(alias,entityID,signingCertificate,nameIDFormats,singleSignOnServices,singleLogoutServices,DEFAULT_CLOCK_TOLERANCE_SEC,true);}  }
class C{  public RE extractRE() throws InterruptedException {  arden();  if (!coeffs.isEmpty()) {    throw new RuntimeException("production still has free variables");  }  return unionREs(terms);}  }
class C{  public PortableRandom(long seed){  setSeed(seed);}  }
class C{  public MatrixF(String mname,int nrows){  super(mname,nrows);}  }
class C{  public Exception exception(){  return mException;}  }
class C{  @Override public void createControl(final Composite parent){  final Composite container=new Composite(parent,SWT.NULL);  container.setLayout(new GridLayout());  setControl(container);  final Label descriptionTextLabel=new Label(container,SWT.WRAP);  descriptionTextLabel.setLayoutData(new GridData(GridData.BEGINNING,GridData.BEGINNING,false,false));  descriptionTextLabel.setText(Messages.getString("SelectChangesetsWizardPage.DescriptionLabelText"));  ControlSize.setCharWidthHint(descriptionTextLabel,MergeWizard.TEXT_CHARACTER_WIDTH);  final Label selectTheChangesLabel=new Label(container,SWT.NONE);  selectTheChangesLabel.setText(Messages.getString("SelectChangesetsWizardPage.SelectChangesLabelText"));  createTable(container);  addColumns();  addMenus();  ControlSize.setCharWidthHint(table,80);  ControlSize.setCharHeightHint(table,15);  tableViewer.setInput(mergeCandidates);}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder(this.asString());  for (  PolicyNodeImpl node : mChildren) {    buffer.append(node);  }  return buffer.toString();}  }
class C{  private void evaluateLuceneQueries(Collection<SearchQueryEvaluator> queries,TupleExpr tupleExpr) throws SailException {  if (closed.get()) {    throw new SailException("Sail has been closed already");  }  try {    this.luceneIndex.beginReading();  } catch (  IOException e) {    throw new SailException(e);  }  for (  SearchQueryEvaluator query : queries) {    Collection<BindingSet> bindingSets=luceneIndex.evaluate(query);    boolean hasResult=bindingSets != null && !bindingSets.isEmpty();    if (hasResult) {      BindingSetAssignment bsa=new BindingSetAssignment();      bsa.setBindingSets(bindingSets);      if (bindingSets instanceof BindingSetCollection) {        bsa.setBindingNames(((BindingSetCollection)bindingSets).getBindingNames());      }      addBindingSets(query,bsa);    }    query.updateQueryModelNodes(hasResult);  }}  }
class C{  private boolean checkInvokeTarget(Executable method){  Class<?> holder=method.getDeclaringClass();  if (method instanceof Constructor) {    if (OptionValue.class.isAssignableFrom(holder)) {      return true;    }  } else   if (Arrays.asList(boxingTypes).contains(holder)) {    return method.getName().equals("valueOf");  } else   if (method.getDeclaringClass().equals(Class.class)) {    return method.getName().equals("desiredAssertionStatus");  }  return false;}  }
class C{  public Collection<UpdateRepositoryJob> forceAllCmrRepositoriesOnlineStatusUpdate(){  List<UpdateRepositoryJob> jobs=new ArrayList<>();  for (  CmrRepositoryDefinition cmrRepositoryDefinition : cmrRepositoryDefinitions) {    jobs.add(this.forceCmrRepositoryOnlineStatusUpdate(cmrRepositoryDefinition));  }  return jobs;}  }
class C{  private void assignInstancesToContainers(ArrayList<Container> containers,Map<Integer,List<InstanceId>> allocation,Map<String,Integer> parallelismMap,int firstTaskIndex,Resource containerCapacity){  ArrayList<RamRequirement> ramRequirements=getSortedRAMInstances(parallelismMap);  int globalTaskIndex=firstTaskIndex;  for (  RamRequirement ramRequirement : ramRequirements) {    String component=ramRequirement.getComponentName();    int numInstance=parallelismMap.get(component);    for (int j=0; j < numInstance; j++) {      Resource instanceResource=this.defaultInstanceResources.cloneWithRam(ramRequirement.getRamRequirement());      int containerId=placeFFDInstance(containers,new PackingPlan.InstancePlan(new InstanceId(component,globalTaskIndex,j),instanceResource),containerCapacity);      List<InstanceId> instances=allocation.get(containerId);      if (instances == null) {        instances=new ArrayList<>();      }      instances.add(new InstanceId(component,globalTaskIndex++,j));      allocation.put(containerId,instances);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.104 -0500",hash_original_method="944AB7146038DECB09A155E81BB22663",hash_generated_method="126306B8785401B8C74EB7916AA2C2C9") public void removePort(){  sentBy.removePort();}  }
class C{  public static double chiVal(double[][] matrix,boolean useYates){  int df, nrows, ncols, row, col;  double[] rtotal, ctotal;  double expect=0, chival=0, n=0;  boolean yates=true;  nrows=matrix.length;  ncols=matrix[0].length;  rtotal=new double[nrows];  ctotal=new double[ncols];  for (row=0; row < nrows; row++) {    for (col=0; col < ncols; col++) {      rtotal[row]+=matrix[row][col];      ctotal[col]+=matrix[row][col];      n+=matrix[row][col];    }  }  df=(nrows - 1) * (ncols - 1);  if ((df > 1) || (!useYates)) {    yates=false;  } else   if (df <= 0) {    return 0;  }  chival=0.0;  for (row=0; row < nrows; row++) {    if (Utils.gr(rtotal[row],0)) {      for (col=0; col < ncols; col++) {        if (Utils.gr(ctotal[col],0)) {          expect=(ctotal[col] * rtotal[row]) / n;          chival+=chiCell(matrix[row][col],expect,yates);        }      }    }  }  return chival;}  }
class C{  public EventSetDescriptor(Class<?> sourceClass,String eventSetName,Class<?> listenerType,String listenerMethodNames[],String addListenerMethodName,String removeListenerMethodName) throws IntrospectionException {  this(sourceClass,eventSetName,listenerType,listenerMethodNames,addListenerMethodName,removeListenerMethodName,null);}  }
class C{  public boolean isReactComponent(String resourceType){  Invocable invocable=((Invocable)engine);  try {    Bindings AemGlobal=(Bindings)engine.get("AemGlobal");    Object registry=AemGlobal.get("registry");    Object component=invocable.invokeMethod(registry,"getComponent",resourceType);    return component != null;  } catch (  NoSuchMethodException|ScriptException e) {    throw new TechnicalException("cannot render react on server",e);  }}  }
class C{  protected boolean include(VirtualFile file) throws IOException, LexerException {  if (!file.isFile())   return false;  if (getFeature(Feature.DEBUG))   System.err.println("pp: including " + file);  push_source(file.getSource(),true);  return true;}  }
class C{  public static double distance(double x1,double y1,double z1,double x2,double y2,double z2){  return Math.sqrt(Math.pow(x2 - x1,2) + Math.pow(y2 - y1,2) + Math.pow(y2 - y1,2));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.887 -0500",hash_original_method="A1CBC473D8947BEFDC4AD1E1869906E2",hash_generated_method="DE07BE4A3EDC9BA8DE2984613851382F") public final Iterator<String> categoriesIterator(){  return mCategories != null ? mCategories.iterator() : null;}  }
class C{  void write(ImageOutputStream ios) throws IOException {}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(R.drawable.wheel_hight_bg);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }}  }
class C{  public String[] validBaudRates(){  return new String[]{"57,600","115,200","230,400","250,000","288,000","333,333","460,800"};}  }
class C{  public String readString(int nbytes) throws IOException {  byte[] data=new byte[nbytes];  readFully(data);  return new String(data);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.345 -0400",hash_original_method="52567BA40A41F53DE2F6B00E0A08B85C",hash_generated_method="7B4516413F39E90CDAA552700076F548") public int length(){  return bytes.length;}  }
class C{  public void init(KeyGenerationParameters param){  this.random=param.getRandom();  this.strength=(param.getStrength() + 7) / 8;  if (strength == 0 || strength == (168 / 8)) {    strength=DESedeParameters.DES_EDE_KEY_LENGTH;  } else   if (strength == (112 / 8)) {    strength=2 * DESedeParameters.DES_KEY_LENGTH;  } else   if (strength != DESedeParameters.DES_EDE_KEY_LENGTH && strength != (2 * DESedeParameters.DES_KEY_LENGTH)) {    throw new IllegalArgumentException("DESede key must be " + (DESedeParameters.DES_EDE_KEY_LENGTH * 8) + " or "+ (2 * 8 * DESedeParameters.DES_KEY_LENGTH)+ " bits long.");  }}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof AttributeWeight)) {    return false;  }  AttributeWeight w=(AttributeWeight)o;  return this.name.equals(w.name) && (this.weight == w.weight);}  }
class C{  public ReplEvent peek() throws InterruptedException {  return readQueue.peek();}  }
class C{  public Urn(String urnString){  this.urnString=urnString;  String[] splitResult=urnString.split(":///");  datasetType=splitResult[0].toLowerCase();  Logger.debug(urnString);switch (datasetType) {case "hdfs":    abstractObjectName="/" + splitResult[1];  schemaName="";break;case "teradata":case "oracle":case "mysql":case "espresso":case "pinot":case "hive":case "dalids":String[] split2=splitResult[1].split("/");abstractObjectName=split2[split2.length - 1];StringBuffer sb=new StringBuffer();if (split2.length > 1) {for (int i=0; i < split2.length - 1; i++) {sb.append(split2[i]);sb.append("/");}sb.deleteCharAt(sb.length() - 1);}schemaName=sb.toString();break;default :abstractObjectName=splitResult[1];}}  }
class C{  @Override public double weightSum(){  return sampleWeight_;}  }
class C{  private double toNumber(IXMLElement elem,String str) throws IOException {  return toLength(elem,str,viewportStack.peek().numberFactor);}  }
class C{  @Override public CredentialsBuilder withUsername(String username){  this.username=username;  return this;}  }
class C{  public Position createPosition(int offset) throws BadLocationException {  if (marks == null) {    marks=new Vector<PosRec>();  }  return new StickyPosition(offset);}  }
class C{  private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {  int codewordPosition=1 + bits.getByteOffset();  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);  int count;  if (d1 == 0) {    count=bits.available() / 8;  } else   if (d1 < 250) {    count=d1;  } else {    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);  }  if (count < 0) {    throw FormatException.getFormatInstance();  }  byte[] bytes=new byte[count];  for (int i=0; i < count; i++) {    if (bits.available() < 8) {      throw FormatException.getFormatInstance();    }    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);  }  byteSegments.add(bytes);  try {    result.append(new String(bytes,"ISO8859_1"));  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException("Platform does not support required encoding: " + uee);  }}  }
class C{  protected ScriptDocValues.Doubles docFieldDoubles(String field){  return (ScriptDocValues.Doubles)doc().get(field);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  String namespaceURI="http://www.w3.org/DOM/Test/Level2";  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("/");  qualifiedNames.add("//");  qualifiedNames.add("\\");  qualifiedNames.add(";");  qualifiedNames.add("&");  qualifiedNames.add("*");  qualifiedNames.add("]]");  qualifiedNames.add(">");  qualifiedNames.add("<");  doc=(Document)load("staffNS",false);  for (int indexN1005A=0; indexN1005A < qualifiedNames.size(); indexN1005A++) {    qualifiedName=(String)qualifiedNames.get(indexN1005A);{      boolean success=false;      try {        attribute=doc.createAttributeNS(namespaceURI,qualifiedName);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("documentcreateattributeNS03",success);    }  }}  }
class C{  @Override public final boolean isCancelled(){  return s == SubscriptionHelper.cancelled();}  }
class C{  public String toString(){  return getClass().getName() + "[name=" + getName()+ ",maxpri="+ maxPriority+ "]";}  }
class C{  public byte[] encode(byte[] bytes){  return encodeUrl(WWW_FORM_URL,bytes);}  }
class C{  public int previousIndex(){  try {    return currentIndex() - 1;  } catch (  GenericEntityException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error getting the current index",e);  }}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","Y");  try {    fillPicks();    jbInit();    dynInit();    frame.getContentPane().add(tabbedPane,BorderLayout.CENTER);    frame.getContentPane().add(statusBar,BorderLayout.SOUTH);  } catch (  Exception ex) {    log.log(Level.SEVERE,"init",ex);  }}  }
class C{  public void normalize(){  double weightMin=Double.POSITIVE_INFINITY;  double weightMax=Double.NEGATIVE_INFINITY;  for (  String name : getAttributeNames()) {    double weight=Math.abs(getWeight(name));    weightMin=Math.min(weightMin,weight);    weightMax=Math.max(weightMax,weight);  }  Iterator<AttributeWeight> w=weightMap.values().iterator();  double diff=weightMax - weightMin;  while (w.hasNext()) {    AttributeWeight attributeWeight=w.next();    double newWeight=1.0d;    if (diff != 0.0d) {      newWeight=(Math.abs(attributeWeight.getWeight()) - weightMin) / diff;    }    attributeWeight.setWeight(newWeight);  }}  }
class C{  private boolean checkRequestedKeyAge(String keyEntry) throws NumberFormatException {  long requestedTokenKeyTS=Long.parseLong(keyEntry);  long now=System.currentTimeMillis();  long diff=now - requestedTokenKeyTS;  if (diff > (2 * _keyRotationIntervalInMsecs)) {    _log.debug("Requested key is older than twice the rotation intervale: {}",keyEntry);    return false;  }  long youngestKey=Long.parseLong(_cachedTokenKeysBundle.getCurrentKeyEntry());  if (youngestKey < Long.parseLong(keyEntry)) {    _log.debug("Requested key is newer than the most recent cached key: {}",keyEntry);    return false;  }  return true;}  }
class C{  public boolean userCanViewDept(int connectedUserId,String entidad) throws Exception {  boolean can=false;  try {    can=hasUserDeptAuth(connectedUserId,USER_ACTION_ID_VIEW,Defs.NULL_ID,Defs.NULL_ID,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public static void showUnknownError(Context context,Throwable t,DialogInterface.OnCancelListener listener){  showError(context,String.format(context.getString(R.string.afc_pmsg_unknown_error),t),listener);}  }
class C{  public static void arraycopy32Bit(Object src,int srcIdx,Object dst,int dstIdx,int len){  Address srcPtr=Magic.objectAsAddress(src).plus(srcIdx << LOG_BYTES_IN_INT);  Address dstPtr=Magic.objectAsAddress(dst).plus(dstIdx << LOG_BYTES_IN_INT);  int copyBytes=len << LOG_BYTES_IN_INT;  aligned32Copy(dstPtr,srcPtr,copyBytes);}  }
class C{  private List<PlanElement> fillWithActivities(final List<Leg> baseTrip,final Facility fromFacility,final Facility toFacility,double departureTime,Person person){  List<PlanElement> trip=new ArrayList<>();  Coord nextCoord=null;  int i=0;  for (  Leg leg : baseTrip) {    if (i == 0) {      Facility firstToFacility;      if (baseTrip.size() > 1) {        ExperimentalTransitRoute tRoute=(ExperimentalTransitRoute)baseTrip.get(1).getRoute();        firstToFacility=this.transitSchedule.getFacilities().get(tRoute.getAccessStopId());      } else {        firstToFacility=toFacility;      }      Route route=new GenericRouteImpl(fromFacility.getLinkId(),firstToFacility.getLinkId());      final List<? extends PlanElement> walkRoute=walkRouter.calcRoute(fromFacility,firstToFacility,departureTime,person);      route.setDistance(((Leg)walkRoute.get(0)).getRoute().getDistance());      route.setTravelTime(leg.getTravelTime());      leg.setRoute(route);      trip.add(leg);    } else {      if (leg.getRoute() instanceof ExperimentalTransitRoute) {        ExperimentalTransitRoute tRoute=(ExperimentalTransitRoute)leg.getRoute();        tRoute.setTravelTime(leg.getTravelTime());        tRoute.setDistance(RouteUtils.calcDistance(tRoute,transitSchedule,network));        Activity act=PopulationUtils.createActivityFromCoordAndLinkId(PtConstants.TRANSIT_ACTIVITY_TYPE,this.transitSchedule.getFacilities().get(tRoute.getAccessStopId()).getCoord(),tRoute.getStartLinkId());        act.setMaximumDuration(0.0);        trip.add(act);        nextCoord=this.transitSchedule.getFacilities().get(tRoute.getEgressStopId()).getCoord();      } else {        if (i == baseTrip.size() - 1) {          ExperimentalTransitRoute tRoute=(ExperimentalTransitRoute)baseTrip.get(baseTrip.size() - 2).getRoute();          Facility lastFromFacility=this.transitSchedule.getFacilities().get(tRoute.getEgressStopId());          Route route=new GenericRouteImpl(lastFromFacility.getLinkId(),toFacility.getLinkId());          final List<? extends PlanElement> walkRoute=walkRouter.calcRoute(lastFromFacility,toFacility,departureTime,person);          route.setDistance(((Leg)walkRoute.get(0)).getRoute().getDistance());          route.setTravelTime(leg.getTravelTime());          leg.setRoute(route);        }        Activity act=PopulationUtils.createActivityFromCoordAndLinkId(PtConstants.TRANSIT_ACTIVITY_TYPE,nextCoord,leg.getRoute().getStartLinkId());        act.setMaximumDuration(0.0);        trip.add(act);      }      trip.add(leg);    }    i++;  }  return trip;}  }
class C{  @SuppressWarnings("unused") public StreamingViewAsList(DataflowRunner runner,View.AsList<T> transform){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPost(getURI(url)),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public void end_of_file(){  _elapsed_time+=_timestamp_end - _timestamp_beg;  long end=(long)Math.ceil(_timestamp_end);  long addend=_file_timestamp_gap + _file_timestamp_gap_min - 1;  _timestamp_ofs=(end + addend) / _file_timestamp_gap * _file_timestamp_gap;  _timestamp_beg=_input_has_time_zero ? _timestamp_ofs : -1.0;  _timestamp_end=_timestamp_beg;}  }
class C{  public void registerConverter(final Converter converter,final int priority){  if (converterRegistry != null) {    converterRegistry.registerConverter(converter,priority);  }}  }
class C{  private void findLargestCells(int widthMeasureSpec){  boolean firstRow=true;  final int count=getChildCount();  for (int i=0; i < count; i++) {    final View child=getChildAt(i);    if (child.getVisibility() == GONE) {      continue;    }    if (child instanceof TableRow) {      final TableRow row=(TableRow)child;      final ViewGroup.LayoutParams layoutParams=row.getLayoutParams();      layoutParams.height=LayoutParams.WRAP_CONTENT;      final int[] widths=row.getColumnsWidths(widthMeasureSpec);      final int newLength=widths.length;      if (firstRow) {        if (mMaxWidths == null || mMaxWidths.length != newLength) {          mMaxWidths=new int[newLength];        }        System.arraycopy(widths,0,mMaxWidths,0,newLength);        firstRow=false;      } else {        int length=mMaxWidths.length;        final int difference=newLength - length;        if (difference > 0) {          final int[] oldMaxWidths=mMaxWidths;          mMaxWidths=new int[newLength];          System.arraycopy(oldMaxWidths,0,mMaxWidths,0,oldMaxWidths.length);          System.arraycopy(widths,oldMaxWidths.length,mMaxWidths,oldMaxWidths.length,difference);        }        final int[] maxWidths=mMaxWidths;        length=Math.min(length,newLength);        for (int j=0; j < length; j++) {          maxWidths[j]=Math.max(maxWidths[j],widths[j]);        }      }    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private boolean checkSetup(){  this.txmgr=TransactionManagerImp.getTransactionManager();  if (this.txmgr == null) {    try {      Hashtable<String,String> env=new Hashtable<String,String>();      env.put(Context.INITIAL_CONTEXT_FACTORY,this.initialContextFactory);      env.put(Context.PROVIDER_URL,this.providerUrl);      Context ctx=new InitialContext(env);      this.txmgrServer=(UserTransactionServer)PortableRemoteObject.narrow(ctx.lookup(this.userTransactionServerLookupName),UserTransactionServer.class);    } catch (    Exception e) {      e.printStackTrace();      throw new RuntimeException(getNotFoundMessage());    }    if (this.txmgrServer == null)     throw new RuntimeException(getNotFoundMessage());  }  return this.txmgr != null;}  }
class C{  public static <T extends ConfigGroup>T addOrGetModule(Config config,String groupName,Class<T> moduleClass){  ConfigGroup module=config.getModule(groupName);  if (module == null || module.getClass() == ConfigGroup.class) {    try {      module=moduleClass.newInstance();      config.addModule(module);    } catch (    InstantiationException|IllegalAccessException e) {      throw new RuntimeException(e);    }  }  return moduleClass.cast(module);}  }
class C{  final public SyntaxTreeNode ParamSubDecl() throws ParseException {  SyntaxTreeNode tn, sn[];  Token t, u;  bpa("Parameter declaration item");  t=jj_consume_token(CONSTANT);  sn=new SyntaxTreeNode[1];  sn[0]=new SyntaxTreeNode(mn,t);  tn=new SyntaxTreeNode(mn,N_ConsDecl,sn);  epa();{    if (true)     return tn;  }  throw new Error("Missing return statement in function");}  }
class C{  public static boolean isElementList(Resource resource){  if (RDF.nil.equals(resource)) {    return true;  } else {    Statement firstS=resource.getProperty(RDF.first);    if (firstS != null && firstS.getObject().isResource()) {      Resource first=firstS.getResource();      return asElement(first) != null;    } else {      return false;    }  }}  }
class C{  void removeDispatchedEvents(EventID lastDispatched) throws CacheException, InterruptedException {  ThreadIdentifier ti=getThreadIdentifier(lastDispatched);  long sequenceID=lastDispatched.getSequenceID();  DispatchedAndCurrentEvents dace=(DispatchedAndCurrentEvents)this.eventsMap.get(ti);  if (dace != null && dace.lastDispatchedSequenceId < sequenceID) {    dace.setLastDispatchedIDAndRemoveEvents(sequenceID);  } else   if (dace == null) {    dace=new DispatchedAndCurrentEvents(this);    dace.lastDispatchedSequenceId=sequenceID;    DispatchedAndCurrentEvents oldDace=(DispatchedAndCurrentEvents)this.eventsMap.putIfAbsent(ti,dace);    if (oldDace != null) {      dace=oldDace;      if (dace.lastDispatchedSequenceId < sequenceID) {        dace.setLastDispatchedIDAndRemoveEvents(sequenceID);      }    } else {      this.region.put(ti,Long.valueOf(dace.lastDispatchedSequenceId));      this.stats.incThreadIdentifiers();    }  }}  }
class C{  public boolean oppositeColor(Card c){  if (c == null)   return false;  return oppositeColor(c.getSuit());}  }
class C{  public ImageDownloadService(String url,ActionListener l){  init(url);  addResponseListener(l);  setDuplicateSupported(true);}  }
class C{  public Object[] toArray(){  return copyElements(new Object[size()]);}  }
class C{  public static Style createRGBStyle(final GridCoverage2DReader reader){  GridCoverage2D cov=null;  try {    cov=reader.read(null);  } catch (  final IOException giveUp) {    throw new RuntimeException(giveUp);  }  final int numBands=cov.getNumSampleDimensions();  if (numBands < 3) {    return null;  }  final String[] sampleDimensionNames=new String[numBands];  for (int i=0; i < numBands; i++) {    final GridSampleDimension dim=cov.getSampleDimension(i);    sampleDimensionNames[i]=dim.getDescription().toString();  }  final int RED=0, GREEN=1, BLUE=2;  final int[] channelNum={-1,-1,-1};  for (int i=0; i < numBands; i++) {    final String name=sampleDimensionNames[i].toLowerCase();    if (name != null) {      if (name.matches("red.*")) {        channelNum[RED]=i + 1;      } else       if (name.matches("green.*")) {        channelNum[GREEN]=i + 1;      } else       if (name.matches("blue.*")) {        channelNum[BLUE]=i + 1;      }    }  }  if (channelNum[RED] < 0 || channelNum[GREEN] < 0 || channelNum[BLUE] < 0) {    channelNum[RED]=1;    channelNum[GREEN]=2;    channelNum[BLUE]=3;  }  final SelectedChannelType[] sct=new SelectedChannelType[cov.getNumSampleDimensions()];  final ContrastEnhancement ce=styleFactory.contrastEnhancement(filterFactory.literal(1.0),ContrastMethod.NORMALIZE);  for (int i=0; i < 3; i++) {    sct[i]=styleFactory.createSelectedChannelType(String.valueOf(channelNum[i]),ce);  }  final RasterSymbolizer sym=styleFactory.getDefaultRasterSymbolizer();  final ChannelSelection sel=styleFactory.channelSelection(sct[RED],sct[GREEN],sct[BLUE]);  sym.setChannelSelection(sel);  return SLD.wrapSymbolizers(sym);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  void dispatch(TCacheEntryEvent<K,V> event){  if (eventManager == null)   return;  if (!interested(event))   return;  @SuppressWarnings("unchecked") CacheEntryListener<K,V> listenerRef=(CacheEntryListener<K,V>)this.listener;  if (!dispatchMode.isAsync()) {    sendEvent(event,listenerRef);  } else {    try {      dispatchQueue.put(createSingleEvent(event));    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }}  }
class C{  public void playPrevious(){  if (mPrevListener != null && mPrevButton != null && mPrevButton.getVisibility() == View.VISIBLE) {    mPrevListener.onClick(mPrevButton);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RegisterNodesResponse RegisterNodes(RegisterNodesRequest req) throws ServiceFaultException, ServiceResultException {  return (RegisterNodesResponse)channel.serviceRequest(req);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:19.744 -0500",hash_original_method="43849E9B2F1DCB4A199E2A722DA4C20F",hash_generated_method="6EFA064CF0CC9132072FA500D2048A5C") public boolean autoUrlDetect(){  return mAutoUrlDetect;}  }
class C{  @Transactional public void addCommentedNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_COMMENTED);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=commented] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public int hashCode(){  int hash=0;  for (int i=0; i < iTypes.length; i++) {    hash+=iTypes[i].hashCode();  }  return hash;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("GenerateModel[").append("]");  return sb.toString();}  }
class C{  private static void configureHeadLessSimulation(){  System.setProperty("java.awt.headless","true");  GAMA.setHeadLessMode();}  }
class C{  private boolean hasNextPostponed(){  return !postponedRoutes.isEmpty();}  }
class C{  public boolean hasMoreData(){  return 0 != this.stream.available();}  }
class C{  public void stop(){  play=false;  currentFrame=0;  repeatCount=0;}  }
class C{  public void initialize() throws IOException {  System.out.println("Randomly initialzing topic assignments ...");  topicAssignments=new ArrayList<Integer>();  for (int i=0; i < numDocuments; i++) {    int topic=FuncUtils.nextDiscrete(multiPros);    docTopicCount[topic]+=1;    int docSize=corpus.get(i).size();    for (int j=0; j < docSize; j++) {      topicWordCount[topic][corpus.get(i).get(j)]+=1;      sumTopicWordCount[topic]+=1;    }    topicAssignments.add(topic);  }}  }
class C{  public BatchPercolateSourceBuilder addDoc(DocBuilder docBuilder){  docBuilders.add(docBuilder);  return this;}  }
class C{  public static byte[] doubleToRegisters(double d){  return longToRegisters(Double.doubleToLongBits(d));}  }
class C{  default URI type(){  return Defaults.TYPE;}  }
class C{  String retrieveRawJudgments(CrowdJob job) throws UnsupportedEncodingException, IOException {  RestTemplate restTemplate=new RestTemplate();  restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());  byte[] resultJsonZip=restTemplate.getForObject(judgmentsURL,byte[].class,job.getId(),apiKey);  if (resultJsonZip != null && resultJsonZip.length > 0) {    String resultJsonString=new String(unzip(resultJsonZip),"UTF-8");    return resultJsonString;  } else {    return "";  }}  }
class C{  protected boolean isSingleScopeEvent(Event evt){  return evt instanceof MutationEvent || evt instanceof ShadowTreeEvent;}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_settingValue || m_settingFocus || m_stopediting)   return;  log.config(m_columnName + " - " + e.getActionCommand()+ ", ComboValue="+ m_combo.getSelectedItem()+ ", TextValue="+ m_text.getDisplay());  if (e.getActionCommand().equals(ValuePreference.NAME)) {    if (MRole.getDefault().isShowPreference())     ValuePreference.start(m_mField,getValue(),getDisplay());    return;  } else   if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND)) {    FieldRecordInfo.start(m_mField);    return;  } else   if (e.getSource() == m_combo) {    Object value=getValue();    Object o=m_combo.getSelectedItem();    if (o != null) {      String s=o.toString();      if (s.startsWith(MLookup.INACTIVE_S) && s.endsWith(MLookup.INACTIVE_E)) {        log.info(m_columnName + " - selection inactive set to NULL");        value=null;      }    }    actionCombo(value);  } else   if (e.getSource() == m_button)   actionButton(""); else   if (e.getSource() == m_text)   actionText(); else   if (e.getSource() == mInfo)   actionButton(""); else   if (e.getSource() == mZoom)   actionZoom(m_combo.getSelectedItem()); else   if (e.getSource() == mRefresh)   actionRefresh(); else   if (e.getSource() == mBPartnerNew)   actionBPartner(true); else   if (e.getSource() == mBPartnerUpd)   actionBPartner(false);}  }
class C{  public String write(Character value) throws Exception {  return value.toString();}  }
class C{  @Override public void offset(int offset){  _writeLength=offset;}  }
class C{  public void mergeWithNew(Annotation newAnnotation,Collection<? extends Annotation> annotations){  add(newAnnotation);  mergeWithExisting(newAnnotation,annotations);}  }
class C{  private static void addJdbcFields(Document doc,Node parent,String name,Collection<PojoField> fields){  if (!fields.isEmpty()) {    Element prop=addProperty(doc,parent,name,null);    Element list=addElement(doc,prop,"list");    for (    PojoField field : fields) {      Element item=addBean(doc,list,JdbcTypeField.class);      Element dbType=addProperty(doc,item,"databaseFieldType",null);      addElement(doc,dbType,"util:constant","static-field","java.sql.Types." + field.dbTypeName());      addProperty(doc,item,"databaseFieldName",field.dbName());      addProperty(doc,item,"javaFieldType",field.javaTypeName());      addProperty(doc,item,"javaFieldName",field.javaName());    }  }}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(0x82);  buffer.setAtIndexAndInc(version);  super.loadByteArray(buffer);}  }
class C{  public SIPHeader parse() throws ParseException {  ReplyTo replyTo=new ReplyTo();  if (debug)   dbg_enter("ReplyTo.parse");  try {    headerName(TokenTypes.REPLY_TO);    replyTo.setHeaderName(SIPHeaderNames.REPLY_TO);    super.parse(replyTo);    return replyTo;  }  finally {    if (debug)     dbg_leave("ReplyTo.parse");  }}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  public NumberOfInterveningJobs(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {  if (name.equals("[dtd]"))   m_inExternalDTD=true;  if (!m_expandDTDEntities && !m_inExternalDTD) {    startNonEscaping();    characters("&" + name + ';');    endNonEscaping();  }  m_inEntityRef=true;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static TopicConfiguration parseTopicConfiguration(final Node node) throws Exception {  String topicName=node.getAttributes().getNamedItem(NAME_ATTR).getNodeValue();  return newTopic(topicName);}  }
class C{  void showAppNotification(){  NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  CharSequence from="Joe";  CharSequence message;switch ((new Random().nextInt()) % 3) {case 0:    message="r u hungry?  i am starved";  break;case 1:message="im nearby u";break;default :message="kthx. meet u for dinner. cul8r";break;}PendingIntent contentIntent=PendingIntent.getActivities(this,0,makeMessageIntentStack(this,from,message),PendingIntent.FLAG_CANCEL_CURRENT);String tickerText=getString(R.string.imcoming_message_ticker_text,message);Notification notif=new Notification(R.drawable.stat_sample,tickerText,System.currentTimeMillis());notif.setLatestEventInfo(this,from,message,contentIntent);notif.defaults=Notification.DEFAULT_ALL;nm.notify(R.string.imcoming_message_ticker_text,notif);}  }
class C{  public void onDestroy(@NonNull Fragment fragment){  if (component == null) {    return;  }  if (fragment.getActivity().isFinishing()) {    component.getPresenter().onDestroy();    removeComponent();  } else   if (fragment.isRemoving() && !mOnSaveInstanceCalled) {    component.getPresenter().onDestroy();    removeComponent();  }}  }
class C{  public BatchUpdateException(Throwable cause){  this(null,cause);}  }
class C{  @Override public int hashCode(){  return isPresent ? Long.hashCode(value) : 0;}  }
class C{  public static void filledSquare(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("square side length must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static void writeVarLong(OutputStream out,long x) throws IOException {  while ((x & ~0x7f) != 0) {    out.write((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  out.write((byte)x);}  }
class C{  protected boolean readAttributes(DataInputStream d,int attributes_count,attribute_info[] ai) throws IOException {  attribute_info a=null;  int i;  int j;  long len;  String s;  for (i=0; i < attributes_count; i++) {    j=d.readUnsignedShort();    len=d.readInt() & 0xFFFFFFFFL;    s=((CONSTANT_Utf8_info)(constant_pool[j])).convert();    if (s.compareTo(attribute_info.SourceFile) == 0) {      SourceFile_attribute sa=new SourceFile_attribute();      sa.sourcefile_index=d.readUnsignedShort();      a=(attribute_info)sa;    } else     if (s.compareTo(attribute_info.ConstantValue) == 0) {      ConstantValue_attribute ca=new ConstantValue_attribute();      ca.constantvalue_index=d.readUnsignedShort();      a=(attribute_info)ca;    } else     if (s.compareTo(attribute_info.Code) == 0) {      Code_attribute ca=new Code_attribute();      ca.max_stack=d.readUnsignedShort();      ca.max_locals=d.readUnsignedShort();      ca.code_length=d.readInt() & 0xFFFFFFFFL;      ca.code=new byte[(int)ca.code_length];      d.read(ca.code);      ca.exception_table_length=d.readUnsignedShort();      ca.exception_table=new exception_table_entry[ca.exception_table_length];      int k;      exception_table_entry e;      for (k=0; k < ca.exception_table_length; k++) {        e=new exception_table_entry();        e.start_pc=d.readUnsignedShort();        e.end_pc=d.readUnsignedShort();        e.handler_pc=d.readUnsignedShort();        e.catch_type=d.readUnsignedShort();        ca.exception_table[k]=e;      }      ca.attributes_count=d.readUnsignedShort();      ca.attributes=new attribute_info[ca.attributes_count];      readAttributes(d,ca.attributes_count,ca.attributes);      a=(attribute_info)ca;    } else     if (s.compareTo(attribute_info.Exceptions) == 0) {      Exception_attribute ea=new Exception_attribute();      ea.number_of_exceptions=d.readUnsignedShort();      if (ea.number_of_exceptions > 0) {        int k;        ea.exception_index_table=new int[ea.number_of_exceptions];        for (k=0; k < ea.number_of_exceptions; k++)         ea.exception_index_table[k]=d.readUnsignedShort();      }      a=(attribute_info)ea;    } else     if (s.compareTo(attribute_info.LineNumberTable) == 0) {      LineNumberTable_attribute la=new LineNumberTable_attribute();      la.line_number_table_length=d.readUnsignedShort();      int k;      line_number_table_entry e;      la.line_number_table=new line_number_table_entry[la.line_number_table_length];      for (k=0; k < la.line_number_table_length; k++) {        e=new line_number_table_entry();        e.start_pc=d.readUnsignedShort();        e.line_number=d.readUnsignedShort();        la.line_number_table[k]=e;      }      a=(attribute_info)la;    } else     if (s.compareTo(attribute_info.LocalVariableTable) == 0) {      LocalVariableTable_attribute la=new LocalVariableTable_attribute();      la.local_variable_table_length=d.readUnsignedShort();      int k;      local_variable_table_entry e;      la.local_variable_table=new local_variable_table_entry[la.local_variable_table_length];      for (k=0; k < la.local_variable_table_length; k++) {        e=new local_variable_table_entry();        e.start_pc=d.readUnsignedShort();        e.length=d.readUnsignedShort();        e.name_index=d.readUnsignedShort();        e.descriptor_index=d.readUnsignedShort();        e.index=d.readUnsignedShort();        la.local_variable_table[k]=e;      }      a=(attribute_info)la;    } else     if (s.compareTo(attribute_info.LocalVariableTypeTable) == 0) {      LocalVariableTypeTable_attribute la=new LocalVariableTypeTable_attribute();      la.local_variable_type_table_length=d.readUnsignedShort();      int k;      local_variable_type_table_entry e;      la.local_variable_type_table=new local_variable_type_table_entry[la.local_variable_type_table_length];      for (k=0; k < la.local_variable_type_table_length; k++) {        e=new local_variable_type_table_entry();        e.start_pc=d.readUnsignedShort();        e.length=d.readUnsignedShort();        e.name_index=d.readUnsignedShort();        e.signature_index=d.readUnsignedShort();        e.index=d.readUnsignedShort();        la.local_variable_type_table[k]=e;      }      a=(attribute_info)la;    } else     if (s.compareTo(attribute_info.Synthetic) == 0) {      Synthetic_attribute ia=new Synthetic_attribute();      a=(attribute_info)ia;    } else     if (s.compareTo(attribute_info.Signature) == 0) {      Signature_attribute ia=new Signature_attribute();      ia.signature_index=d.readUnsignedShort();      a=(attribute_info)ia;    } else     if (s.compareTo(attribute_info.Deprecated) == 0) {      Deprecated_attribute da=new Deprecated_attribute();      a=(attribute_info)da;    } else     if (s.compareTo(attribute_info.EnclosingMethod) == 0) {      EnclosingMethod_attribute ea=new EnclosingMethod_attribute();      ea.class_index=d.readUnsignedShort();      ea.method_index=d.readUnsignedShort();      a=(attribute_info)ea;    } else     if (s.compareTo(attribute_info.InnerClasses) == 0) {      InnerClasses_attribute ia=new InnerClasses_attribute();      ia.inner_classes_length=d.readUnsignedShort();      ia.inner_classes=new inner_class_entry[ia.inner_classes_length];      for (int k=0; k < ia.inner_classes_length; k++) {        inner_class_entry e=new inner_class_entry();        e.inner_class_index=d.readUnsignedShort();        e.outer_class_index=d.readUnsignedShort();        e.name_index=d.readUnsignedShort();        e.access_flags=d.readUnsignedShort();        ia.inner_classes[k]=e;      }      a=(attribute_info)ia;    } else     if (s.compareTo(attribute_info.RuntimeVisibleAnnotations) == 0) {      RuntimeVisibleAnnotations_attribute ra=new RuntimeVisibleAnnotations_attribute();      ra.number_of_annotations=d.readUnsignedShort();      ra.annotations=new annotation[ra.number_of_annotations];      for (int k=0; k < ra.number_of_annotations; k++) {        annotation annot=new annotation();        annot.type_index=d.readUnsignedShort();        annot.num_element_value_pairs=d.readUnsignedShort();        annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);        ra.annotations[k]=annot;      }      a=(attribute_info)ra;    } else     if (s.compareTo(attribute_info.RuntimeInvisibleAnnotations) == 0) {      RuntimeInvisibleAnnotations_attribute ra=new RuntimeInvisibleAnnotations_attribute();      ra.number_of_annotations=d.readUnsignedShort();      ra.annotations=new annotation[ra.number_of_annotations];      for (int k=0; k < ra.number_of_annotations; k++) {        annotation annot=new annotation();        annot.type_index=d.readUnsignedShort();        annot.num_element_value_pairs=d.readUnsignedShort();        annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);        ra.annotations[k]=annot;      }      a=(attribute_info)ra;    } else     if (s.compareTo(attribute_info.RuntimeVisibleParameterAnnotations) == 0) {      RuntimeVisibleParameterAnnotations_attribute ra=new RuntimeVisibleParameterAnnotations_attribute();      ra.num_parameters=d.readUnsignedByte();      ra.parameter_annotations=new parameter_annotation[ra.num_parameters];      for (int x=0; x < ra.num_parameters; x++) {        parameter_annotation pAnnot=new parameter_annotation();        pAnnot.num_annotations=d.readUnsignedShort();        pAnnot.annotations=new annotation[pAnnot.num_annotations];        for (int k=0; k < pAnnot.num_annotations; k++) {          annotation annot=new annotation();          annot.type_index=d.readUnsignedShort();          annot.num_element_value_pairs=d.readUnsignedShort();          annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);          pAnnot.annotations[k]=annot;        }        ra.parameter_annotations[x]=pAnnot;      }      a=(attribute_info)ra;    } else     if (s.compareTo(attribute_info.RuntimeInvisibleParameterAnnotations) == 0) {      RuntimeInvisibleParameterAnnotations_attribute ra=new RuntimeInvisibleParameterAnnotations_attribute();      ra.num_parameters=d.readUnsignedByte();      ra.parameter_annotations=new parameter_annotation[ra.num_parameters];      for (int x=0; x < ra.num_parameters; x++) {        parameter_annotation pAnnot=new parameter_annotation();        pAnnot.num_annotations=d.readUnsignedShort();        pAnnot.annotations=new annotation[pAnnot.num_annotations];        for (int k=0; k < pAnnot.num_annotations; k++) {          annotation annot=new annotation();          annot.type_index=d.readUnsignedShort();          annot.num_element_value_pairs=d.readUnsignedShort();          annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);          pAnnot.annotations[k]=annot;        }        ra.parameter_annotations[x]=pAnnot;      }      a=(attribute_info)ra;    } else     if (s.compareTo(attribute_info.AnnotationDefault) == 0) {      AnnotationDefault_attribute da=new AnnotationDefault_attribute();      element_value[] result=readElementValues(1,d,false,0);      da.default_value=result[0];      a=(attribute_info)da;    } else     if (s.equals(attribute_info.BootstrapMethods)) {      BootstrapMethods_attribute bsma=new BootstrapMethods_attribute();      int count=d.readUnsignedShort();      bsma.method_handles=new short[count];      bsma.arg_indices=new short[count][];      for (int num=0; num < count; num++) {        short index=(short)d.readUnsignedShort();        bsma.method_handles[num]=index;        int argCount=d.readUnsignedShort();        bsma.arg_indices[num]=new short[argCount];        for (int numArg=0; numArg < argCount; numArg++) {          short indexArg=(short)d.readUnsignedShort();          bsma.arg_indices[num][numArg]=indexArg;        }      }      assert bootstrap_methods_attribute == null : "More than one bootstrap methods attribute!";      a=bootstrap_methods_attribute=bsma;    } else {      Generic_attribute ga=new Generic_attribute();      if (len > 0) {        ga.info=new byte[(int)len];        d.read(ga.info);      }      a=(attribute_info)ga;    }    a.attribute_name=j;    a.attribute_length=len;    ai[i]=a;  }  return true;}  }
class C{  private ACEDocument processAceEntry(File subFolderEntry,ACEDocumentAnnotation annotationACE,String annotationFile) throws FileNotFoundException {  boolean is2004mode=ReadACEAnnotation.is2004mode;  ACEDocument aceDoc=new ACEDocument();  String docFile=annotationFile.replace(".apf.xml",".sgm");  List<String> lines=LineIO.read(docFile);  String content="";  for (  String line : lines) {    content+=line + "\n";  }  content=content.replaceAll("<ANNOTATION>","").replaceAll("</ANNOTATION>","");  String contentWithoutEnter=content.replaceAll("\n"," ");  int textContentStartPosition=contentWithoutEnter.indexOf("<TEXT>");  int textContentEndPosition=contentWithoutEnter.lastIndexOf("</TEXT>");  if (subFolderEntry.getAbsolutePath().endsWith("nw")) {    int headlineEndOffset=content.indexOf("</HEADLINE>");    if (headlineEndOffset != -1 && headlineEndOffset < textContentStartPosition) {      textContentStartPosition=headlineEndOffset;    }  } else   if (subFolderEntry.getAbsolutePath().endsWith("un")) {    int headlineStartOffset=content.indexOf("<HEADLINE>");    if (headlineStartOffset != -1 && headlineStartOffset < textContentStartPosition) {      textContentStartPosition=headlineStartOffset;    }  }  StringBuilder textContentWithoutTagsBuilder=new StringBuilder();  String preTextMarketString=removeXMLTags(contentWithoutEnter.substring(0,textContentStartPosition));  for (int i=0; i < preTextMarketString.length(); i++)   textContentWithoutTagsBuilder.append(" ");  String textContent=removeXMLTags(contentWithoutEnter.substring(textContentStartPosition,textContentEndPosition));  textContentWithoutTagsBuilder.append(textContent);  String contentRemovingTags=textContentWithoutTagsBuilder.toString();  Pair<List<Pair<String,Paragraph>>,Map<String,String>> parsedResult=null;  if (subFolderEntry.getAbsolutePath().endsWith("bc")) {    parsedResult=ACE_BC_Reader.parse(contentWithoutEnter,contentRemovingTags);  } else   if (subFolderEntry.getAbsolutePath().endsWith("bn")) {    parsedResult=ACE_BN_Reader.parse(contentWithoutEnter,contentRemovingTags,is2004mode);  } else   if (subFolderEntry.getAbsolutePath().endsWith("cts")) {    parsedResult=ACE_CTS_Reader.parse(contentWithoutEnter,contentRemovingTags);  } else   if (subFolderEntry.getAbsolutePath().endsWith("nw")) {    parsedResult=ACE_NW_Reader.parse(contentWithoutEnter,contentRemovingTags);  } else   if (subFolderEntry.getAbsolutePath().endsWith("un")) {    parsedResult=ACE_UN_Reader.parse(contentWithoutEnter,contentRemovingTags);  } else   if (subFolderEntry.getAbsolutePath().endsWith("wl")) {    parsedResult=ACE_WL_Reader.parse(contentWithoutEnter,contentRemovingTags);  }  String cleanedTextContent=StringCleanup.normalizeToAscii(contentRemovingTags);  aceDoc.aceAnnotation=annotationACE;  aceDoc.orginalContent=content;  aceDoc.contentRemovingTags=cleanedTextContent;  aceDoc.originalLines=lines;  if (parsedResult != null) {    aceDoc.paragraphs=parsedResult.getFirst();    aceDoc.metadata=parsedResult.getSecond();  }  return aceDoc;}  }
class C{  public boolean defVisible(Edge edge){  if (containsEdge(edge)) {    Node A=Edges.getDirectedEdgeTail(edge);    Node B=Edges.getDirectedEdgeHead(edge);    List<Node> adjToA=getAdjacentNodes(A);    while (!adjToA.isEmpty()) {      Node Curr=adjToA.remove(0);      if (!((getAdjacentNodes(Curr)).contains(B)) && ((getEdge(Curr,A)).getProximalEndpoint(A) == Endpoint.ARROW)) {        return true;      }    }    return false;  } else {    throw new IllegalArgumentException("Given edge is not in the graph.");  }}  }
class C{  public void appendCloseParagraphTag(){  text.append("</p>");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isValid(){  for (  Component c : constraintList.keySet()) {    if (!isValid(c)) {      return false;    }  }  return true;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  expressionEClass=createEClass(EXPRESSION);  literalEClass=createEClass(LITERAL);  boolLiteralEClass=createEClass(BOOL_LITERAL);  createEAttribute(boolLiteralEClass,BOOL_LITERAL__VALUE);  intLiteralEClass=createEClass(INT_LITERAL);  createEAttribute(intLiteralEClass,INT_LITERAL__VALUE);  doubleLiteralEClass=createEClass(DOUBLE_LITERAL);  createEAttribute(doubleLiteralEClass,DOUBLE_LITERAL__VALUE);  floatLiteralEClass=createEClass(FLOAT_LITERAL);  createEAttribute(floatLiteralEClass,FLOAT_LITERAL__VALUE);  hexLiteralEClass=createEClass(HEX_LITERAL);  createEAttribute(hexLiteralEClass,HEX_LITERAL__VALUE);  stringLiteralEClass=createEClass(STRING_LITERAL);  createEAttribute(stringLiteralEClass,STRING_LITERAL__VALUE);  nullLiteralEClass=createEClass(NULL_LITERAL);  assignmentExpressionEClass=createEClass(ASSIGNMENT_EXPRESSION);  createEReference(assignmentExpressionEClass,ASSIGNMENT_EXPRESSION__VAR_REF);  createEAttribute(assignmentExpressionEClass,ASSIGNMENT_EXPRESSION__OPERATOR);  createEReference(assignmentExpressionEClass,ASSIGNMENT_EXPRESSION__EXPRESSION);  conditionalExpressionEClass=createEClass(CONDITIONAL_EXPRESSION);  createEReference(conditionalExpressionEClass,CONDITIONAL_EXPRESSION__CONDITION);  createEReference(conditionalExpressionEClass,CONDITIONAL_EXPRESSION__TRUE_CASE);  createEReference(conditionalExpressionEClass,CONDITIONAL_EXPRESSION__FALSE_CASE);  logicalOrExpressionEClass=createEClass(LOGICAL_OR_EXPRESSION);  createEReference(logicalOrExpressionEClass,LOGICAL_OR_EXPRESSION__LEFT_OPERAND);  createEReference(logicalOrExpressionEClass,LOGICAL_OR_EXPRESSION__RIGHT_OPERAND);  logicalAndExpressionEClass=createEClass(LOGICAL_AND_EXPRESSION);  createEReference(logicalAndExpressionEClass,LOGICAL_AND_EXPRESSION__LEFT_OPERAND);  createEReference(logicalAndExpressionEClass,LOGICAL_AND_EXPRESSION__RIGHT_OPERAND);  logicalNotExpressionEClass=createEClass(LOGICAL_NOT_EXPRESSION);  createEReference(logicalNotExpressionEClass,LOGICAL_NOT_EXPRESSION__OPERAND);  bitwiseXorExpressionEClass=createEClass(BITWISE_XOR_EXPRESSION);  createEReference(bitwiseXorExpressionEClass,BITWISE_XOR_EXPRESSION__LEFT_OPERAND);  createEReference(bitwiseXorExpressionEClass,BITWISE_XOR_EXPRESSION__RIGHT_OPERAND);  bitwiseOrExpressionEClass=createEClass(BITWISE_OR_EXPRESSION);  createEReference(bitwiseOrExpressionEClass,BITWISE_OR_EXPRESSION__LEFT_OPERAND);  createEReference(bitwiseOrExpressionEClass,BITWISE_OR_EXPRESSION__RIGHT_OPERAND);  bitwiseAndExpressionEClass=createEClass(BITWISE_AND_EXPRESSION);  createEReference(bitwiseAndExpressionEClass,BITWISE_AND_EXPRESSION__LEFT_OPERAND);  createEReference(bitwiseAndExpressionEClass,BITWISE_AND_EXPRESSION__RIGHT_OPERAND);  logicalRelationExpressionEClass=createEClass(LOGICAL_RELATION_EXPRESSION);  createEReference(logicalRelationExpressionEClass,LOGICAL_RELATION_EXPRESSION__LEFT_OPERAND);  createEAttribute(logicalRelationExpressionEClass,LOGICAL_RELATION_EXPRESSION__OPERATOR);  createEReference(logicalRelationExpressionEClass,LOGICAL_RELATION_EXPRESSION__RIGHT_OPERAND);  shiftExpressionEClass=createEClass(SHIFT_EXPRESSION);  createEReference(shiftExpressionEClass,SHIFT_EXPRESSION__LEFT_OPERAND);  createEAttribute(shiftExpressionEClass,SHIFT_EXPRESSION__OPERATOR);  createEReference(shiftExpressionEClass,SHIFT_EXPRESSION__RIGHT_OPERAND);  numericalAddSubtractExpressionEClass=createEClass(NUMERICAL_ADD_SUBTRACT_EXPRESSION);  createEReference(numericalAddSubtractExpressionEClass,NUMERICAL_ADD_SUBTRACT_EXPRESSION__LEFT_OPERAND);  createEAttribute(numericalAddSubtractExpressionEClass,NUMERICAL_ADD_SUBTRACT_EXPRESSION__OPERATOR);  createEReference(numericalAddSubtractExpressionEClass,NUMERICAL_ADD_SUBTRACT_EXPRESSION__RIGHT_OPERAND);  numericalMultiplyDivideExpressionEClass=createEClass(NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION);  createEReference(numericalMultiplyDivideExpressionEClass,NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__LEFT_OPERAND);  createEAttribute(numericalMultiplyDivideExpressionEClass,NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__OPERATOR);  createEReference(numericalMultiplyDivideExpressionEClass,NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__RIGHT_OPERAND);  numericalUnaryExpressionEClass=createEClass(NUMERICAL_UNARY_EXPRESSION);  createEAttribute(numericalUnaryExpressionEClass,NUMERICAL_UNARY_EXPRESSION__OPERATOR);  createEReference(numericalUnaryExpressionEClass,NUMERICAL_UNARY_EXPRESSION__OPERAND);  primitiveValueExpressionEClass=createEClass(PRIMITIVE_VALUE_EXPRESSION);  createEReference(primitiveValueExpressionEClass,PRIMITIVE_VALUE_EXPRESSION__VALUE);  featureCallEClass=createEClass(FEATURE_CALL);  createEReference(featureCallEClass,FEATURE_CALL__OWNER);  createEReference(featureCallEClass,FEATURE_CALL__FEATURE);  createEAttribute(featureCallEClass,FEATURE_CALL__OPERATION_CALL);  createEReference(featureCallEClass,FEATURE_CALL__ARGS);  createEReference(featureCallEClass,FEATURE_CALL__ARRAY_SELECTOR);  createEAttribute(featureCallEClass,FEATURE_CALL__ARRAY_ACCESS);  elementReferenceExpressionEClass=createEClass(ELEMENT_REFERENCE_EXPRESSION);  createEReference(elementReferenceExpressionEClass,ELEMENT_REFERENCE_EXPRESSION__REFERENCE);  createEAttribute(elementReferenceExpressionEClass,ELEMENT_REFERENCE_EXPRESSION__OPERATION_CALL);  createEReference(elementReferenceExpressionEClass,ELEMENT_REFERENCE_EXPRESSION__ARGS);  createEReference(elementReferenceExpressionEClass,ELEMENT_REFERENCE_EXPRESSION__ARRAY_SELECTOR);  createEAttribute(elementReferenceExpressionEClass,ELEMENT_REFERENCE_EXPRESSION__ARRAY_ACCESS);  parenthesizedExpressionEClass=createEClass(PARENTHESIZED_EXPRESSION);  createEReference(parenthesizedExpressionEClass,PARENTHESIZED_EXPRESSION__EXPRESSION);  typeCastExpressionEClass=createEClass(TYPE_CAST_EXPRESSION);  createEReference(typeCastExpressionEClass,TYPE_CAST_EXPRESSION__OPERAND);  createEReference(typeCastExpressionEClass,TYPE_CAST_EXPRESSION__TYPE);  assignmentOperatorEEnum=createEEnum(ASSIGNMENT_OPERATOR);  shiftOperatorEEnum=createEEnum(SHIFT_OPERATOR);  additiveOperatorEEnum=createEEnum(ADDITIVE_OPERATOR);  multiplicativeOperatorEEnum=createEEnum(MULTIPLICATIVE_OPERATOR);  unaryOperatorEEnum=createEEnum(UNARY_OPERATOR);  relationalOperatorEEnum=createEEnum(RELATIONAL_OPERATOR);}  }
class C{  public void initialize(){}  }
class C{  public int execSync(String[] command,File workingDirectory,IStreamListener outStreamListener,IStreamListener errorStreamListener,IProgressMonitor monitor,String[] envp,ILaunchConfiguration launchConfiguration) throws CoreException {  if (monitor == null) {    monitor=new NullProgressMonitor();  }  AngularCLIPlugin.logInfo("Sync Execute command line: " + Arrays.toString(command));  IProcess prcs=exec(command,workingDirectory,monitor,envp,launchConfiguration);  if (prcs == null) {    return 0;  }  setTracing(command,outStreamListener,errorStreamListener,prcs);  while (!prcs.isTerminated()) {    try {      if (monitor.isCanceled()) {        prcs.terminate();        break;      }      Thread.sleep(50);    } catch (    InterruptedException e) {      AngularCLIPlugin.logError(e,"Exception waiting for process to terminate");    }  }  return prcs.getExitValue();}  }
class C{  public int length(){  return uint16FromData(6);}  }
class C{  public static boolean isRope(Block block){  return GrowthCraftCore.blocks.ropeBlock.equals(block);}  }
class C{  private UnManagedConsistencyGroup createUnManagedCG(String unManagedCGNativeGuid,XtremIOConsistencyGroup consistencyGroup,URI storageSystemURI,DbClient dbClient){  UnManagedConsistencyGroup unManagedCG=new UnManagedConsistencyGroup();  unManagedCG.setId(URIUtil.createId(UnManagedConsistencyGroup.class));  unManagedCG.setLabel(consistencyGroup.getName());  unManagedCG.setName(consistencyGroup.getName());  unManagedCG.setNativeGuid(unManagedCGNativeGuid);  unManagedCG.setStorageSystemUri(storageSystemURI);  unManagedCG.setNumberOfVols(consistencyGroup.getNumOfVols());  dbClient.createObject(unManagedCG);  return unManagedCG;}  }
class C{  public SelectResults auxFilterEvaluate(ExecutionContext context,SelectResults intermediateResults) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  return filterEvaluate(context,intermediateResults);}  }
class C{  private void prepareRPConsistencyGroupData() throws Exception {  String cg2Name="rpCg";  BlockConsistencyGroup rpCg=createBlockConsistencyGroup(cg2Name,null,Types.RP.name(),true);  rpConsistencyGroupURI=rpCg.getId();  addProtectionSetAndVolumes(rpCg,"rpCg",0);}  }
class C{  public void editSelected(){  if (model.getSelected() == null) {    return;  }  removeEditor();  createEditor();  createEditPanel();  editPane.requestFocusInWindow();  view.repaint();}  }
class C{  public ApplierWrapper(RawApplier applier){  this.applier=applier;}  }
class C{  static <T>Collection<T> cast(Iterable<T> iterable){  return (Collection<T>)iterable;}  }
class C{  public void rollback(){  checkCommitRollback();  currentTransactionName=null;  boolean needCommit=false;  if (undoLog.size() > 0) {    rollbackTo(null,false);    needCommit=true;  }  if (transaction != null) {    rollbackTo(null,false);    needCommit=true;    transaction.commit();    transaction=null;  }  if (locks.size() > 0 || needCommit) {    database.commit(this);  }  cleanTempTables(false);  if (autoCommitAtTransactionEnd) {    autoCommit=true;    autoCommitAtTransactionEnd=false;  }  endTransaction();}  }
class C{  public boolean isNominal(){  if (getInputFormat() == null) {    return false;  } else {    return getInputFormat().attribute(m_AttIndex.getIndex()).isNominal();  }}  }
class C{  private ShowHelpDontAnnoy(java.awt.Component parent,String resource){  super((java.awt.Frame)SwingUtilities.windowForComponent(parent),true);  this.resource=resource;  initComponents();  try {    help.setPage(getClass().getResource(resource));  } catch (  IOException ex) {    ex.printStackTrace();  }  pack();  setLocationRelativeTo(parent);  setVisible(true);}  }
class C{  public boolean isSmscDeliveryReceipt(){  return isSmscDeliveryReceipt(esmClass);}  }
class C{  public T height(String value){  return attr("height",value);}  }
class C{  public <ResultT>Optional<ResultT> toValue(Converter<ResultT> converter){  try {    if (cursor != null && cursor.moveToFirst()) {      return Optional.ofNullable(converter.convert(cursor));    }    return Optional.empty();  }  finally {    close();  }}  }
class C{  public Format(final char[] lineIndenter,final char[] newLine,final int mode){  this(lineIndenter,newLine,mode,new NoNameCoder());}  }
class C{  private void orderParagraphsLTR(boolean ordarParaLTR){  orderParagraphsLTR=ordarParaLTR;}  }
class C{  public static void createSupportEMail(Frame owner,String subject,String message){  log.config("ADialog.createSupportEMail");  String to=Adempiere.getSupportEMail();  MUser from=MUser.get(Env.getCtx(),Env.getAD_User_ID(Env.getCtx()));  StringBuffer myMessage=new StringBuffer(message);  myMessage.append("\n");  CLogMgt.getInfo(myMessage);  CLogMgt.getInfoDetail(myMessage,Env.getCtx());  ModelValidationEngine.get().getInfoDetail(myMessage,Env.getCtx());  EMailDialog emd=new EMailDialog(owner,Msg.getMsg(Env.getCtx(),"EMailSupport"),from,to,"Support: " + subject,myMessage.toString(),null);}  }
class C{  @Override public FrameReader newReader(BufferedSource source,boolean client){  return new Reader(source,4096,client);}  }
class C{  public void restart(){synchronized (mThread) {    mPosition=0;    mThread.notify();  }}  }
class C{  public int findColumn(String columnName) throws SQLException {  checkState();  return rs.findColumn(columnName);}  }
class C{  private INaviFunction findForwardedFunction(final INaviModule module,final INaviFunction function) throws MaybeNullException {  if (module.isLoaded()) {    for (    final INaviFunction sourceFunction : module.getContent().getFunctionContainer().getFunctions()) {      if (sourceFunction.getForwardedFunctionModuleId() == function.getModule().getConfiguration().getId() && sourceFunction.getForwardedFunctionAddress().equals(function.getAddress())) {        return sourceFunction;      }    }  }  throw new MaybeNullException();}  }
class C{  public static CodedException translateException(Throwable ex){  if (ex instanceof CodedException) {    return (CodedException)ex;  } else   if (ex instanceof UnknownHostException || ex instanceof MalformedURLException || ex instanceof SocketException|| ex instanceof UnknownServiceException|| ex instanceof UnresolvedAddressException) {    return new CodedException(X_NETWORK_ERROR,ex);  } else   if (ex instanceof IOException) {    return new CodedException(X_IO_ERROR,ex);  } else   if (ex instanceof CertificateException) {    return new CodedException(X_INCORRECT_CERTIFICATE,ex);  } else   if (ex instanceof SOAPException) {    return new CodedException(X_INVALID_SOAP,ex);  } else   if (ex instanceof MimeException) {    return new CodedException(X_MIME_PARSING_FAILED,ex);  } else   if (ex instanceof SAXException) {    return new CodedException(X_INVALID_XML,ex);  } else {    return new CodedException(X_INTERNAL_ERROR,ex);  }}  }
class C{  public void dequeue(){  _clock.dequeue(this);}  }
class C{  public byte[] wrap(byte[] outgoing,int start,int len) throws SaslException {  if (!completed) {    throw new IllegalStateException("DIGEST-MD5 authentication not completed");  }  if (secCtx == null) {    throw new IllegalStateException("Neither integrity nor privacy was negotiated");  }  return (secCtx.wrap(outgoing,start,len));}  }
class C{  public String substring(int start,int end){  char[] buf=new char[end - start];  getChars(start,end,buf,0);  return new String(buf);}  }
class C{  public static long parseId(Uri contentUri){  String last=contentUri.getLastPathSegment();  return last == null ? -1 : Long.parseLong(last);}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  WhileStatement s=(WhileStatement)clone();  s.cond=cond.copyInline(ctx);  if (body != null) {    s.body=body.copyInline(ctx,valNeeded);  }  return s;}  }
class C{  public Where<T,ID> gt(String columnName,Object value) throws SQLException {  addClause(new SimpleComparison(columnName,findColumnFieldType(columnName),value,SimpleComparison.GREATER_THAN_OPERATION));  return this;}  }
class C{  @Override public ConstantScoreQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  private boolean containsInvalidToken(HttpServletRequest httpRequest){  String queryString=httpRequest.getQueryString();  int tokenIdx=queryString.indexOf("token=");  if (tokenIdx >= 0) {    String encodedParam=queryString.substring(tokenIdx + 5);    try {      URLDecoder.decode(encodedParam,"UTF-8");    } catch (    Exception e) {      return true;    }  }  return false;}  }
class C{  void initCache(BayesNet bayesNet,Instances instances) throws Exception {  double[] fBaseScores=new double[instances.numAttributes()];  int nNrOfAtts=instances.numAttributes();  m_Cache=new Cache(nNrOfAtts);  for (int iAttribute=0; iAttribute < nNrOfAtts; iAttribute++) {    updateCache(iAttribute,nNrOfAtts,bayesNet.getParentSet(iAttribute));  }  for (int iAttribute=0; iAttribute < nNrOfAtts; iAttribute++) {    fBaseScores[iAttribute]=calcNodeScore(iAttribute);  }  for (int iAttributeHead=0; iAttributeHead < nNrOfAtts; iAttributeHead++) {    for (int iAttributeTail=0; iAttributeTail < nNrOfAtts; iAttributeTail++) {      if (iAttributeHead != iAttributeTail) {        Operation oOperation=new Operation(iAttributeTail,iAttributeHead,Operation.OPERATION_ADD);        m_Cache.put(oOperation,calcScoreWithExtraParent(iAttributeHead,iAttributeTail) - fBaseScores[iAttributeHead]);      }    }  }}  }
class C{  public List<GroupLocalDeviceDB> _queryGroupDB_LocalDevices(long groupId){synchronized (this) {    if (groupDB_LocalDevicesQuery == null) {      QueryBuilder<GroupLocalDeviceDB> queryBuilder=queryBuilder();      queryBuilder.where(Properties.GroupId.eq(null));      groupDB_LocalDevicesQuery=queryBuilder.build();    }  }  Query<GroupLocalDeviceDB> query=groupDB_LocalDevicesQuery.forCurrentThread();  query.setParameter(0,groupId);  return query.list();}  }
class C{  public void writeRawMessageSetExtension(final int fieldNumber,final ByteString value) throws IOException {  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_START_GROUP);  writeUInt32(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber);  writeBytes(WireFormat.MESSAGE_SET_MESSAGE,value);  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_END_GROUP);}  }
class C{  public void save(String filename){  File file=new File(filename);  String suffix=filename.substring(filename.lastIndexOf('.') + 1);  if (suffix.toLowerCase().equals("png")) {    try {      ImageIO.write(offscreenImage,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else   if (suffix.toLowerCase().equals("jpg")) {    WritableRaster raster=offscreenImage.getRaster();    WritableRaster newRaster;    newRaster=raster.createWritableChild(0,0,width,height,0,0,new int[]{0,1,2});    DirectColorModel cm=(DirectColorModel)offscreenImage.getColorModel();    DirectColorModel newCM=new DirectColorModel(cm.getPixelSize(),cm.getRedMask(),cm.getGreenMask(),cm.getBlueMask());    BufferedImage rgbBuffer=new BufferedImage(newCM,newRaster,false,null);    try {      ImageIO.write(rgbBuffer,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else {    System.out.println("Invalid image file type: " + suffix);  }}  }
class C{  public static void reallocateUnpooled(long memPtr,int cap){  assert cap > 0;  assert !isExternal(memPtr) : "Attempt to reallocate external memory chunk directly: " + memPtr;  assert !isPooled(memPtr) : "Attempt to reallocate pooled memory chunk directly: " + memPtr;  long dataPtr=data(memPtr);  long newDataPtr=GridUnsafe.reallocateMemory(dataPtr,cap);  if (dataPtr != newDataPtr)   GridUnsafe.putLong(memPtr,newDataPtr);  GridUnsafe.putInt(memPtr + MEM_HDR_OFF_CAP,cap);}  }
class C{  private Set<PathOperation> toPathOperationsSet(Map<String,Path> paths){  Set<PathOperation> pathOperations;  if (config.getOperationOrdering() != null) {    pathOperations=new TreeSet<>(config.getOperationOrdering());  } else {    pathOperations=new LinkedHashSet<>();  }  for (  Map.Entry<String,Path> path : paths.entrySet()) {    Map<HttpMethod,Operation> operations=path.getValue().getOperationMap();    if (MapUtils.isNotEmpty(operations)) {      for (      Map.Entry<HttpMethod,Operation> operation : operations.entrySet()) {        pathOperations.add(new PathOperation(operation.getKey(),path.getKey(),operation.getValue()));      }    }  }  return pathOperations;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9);}  }
class C{  public static GasStack readFromNBT(NBTTagCompound nbtTags){  if (nbtTags == null || nbtTags.hasNoTags()) {    return null;  }  GasStack stack=new GasStack();  stack.read(nbtTags);  if (stack.getGas() == null || stack.amount <= 0) {    return null;  }  return stack;}  }
class C{  final boolean hasInvalidNext(){  return invalidIndex < invalidTypes.size();}  }
class C{  public boolean testSphere(float x,float y,float z,float r){  return nxX * x + nxY * y + nxZ * z + nxW >= -r && pxX * x + pxY * y + pxZ * z + pxW >= -r && nyX * x + nyY * y + nyZ * z + nyW >= -r && pyX * x + pyY * y + pyZ * z + pyW >= -r && nzX * x + nzY * y + nzZ * z + nzW >= -r && pzX * x + pzY * y + pzZ * z + pzW >= -r;}  }
class C{  public boolean remove(URI uri,HttpCookie ck){  if (ck == null) {    throw new NullPointerException("cookie is null");  }  boolean modified=false;  lock.lock();  try {    modified=cookieJar.remove(ck);  }  finally {    lock.unlock();  }  storeCookies();  return modified;}  }
class C{  public MutablePeriod(ReadableInstant startInstant,ReadableInstant endInstant){  super(startInstant,endInstant,null);}  }
class C{  public void startOrStopPlaying(View view){  if (mPingReceiver != null) {    stopPlaying();  } else {    int count=Integer.valueOf(mCountEditText.getText().toString());    if (count <= 0)     UiUtils.showToast(this,"Please specify a count value that's > 0"); else     if (!mProcessButtonClick)     UiUtils.showToast(this,"Game is in progress"); else     startPlaying(count);  }}  }
class C{  public MailBuilder from(String name,String email){  return param("from",name + " <" + email+ ">");}  }
class C{  public final void clear(){  m_index=-1;}  }
class C{  public boolean createTranslation(PO po){  if (!isActiveLanguages(false))   return true;  if (po.get_ID() == 0)   throw new IllegalArgumentException("PO ID is 0");  StringBuffer sql1=new StringBuffer();  sql1.append("INSERT INTO ").append(m_trlTableName).append(" (");  StringBuffer sql2=new StringBuffer();  sql2.append(") SELECT ");  sql1.append(m_baseTableName).append("_ID,AD_Language");  sql2.append("b.").append(m_baseTableName).append("_ID,l.AD_Language");  sql1.append(", AD_Client_ID,AD_Org_ID,IsActive, Created,CreatedBy,Updated,UpdatedBy, IsTranslated");  sql2.append(", b.AD_Client_ID,b.AD_Org_ID,b.IsActive, b.Created,b.CreatedBy,b.Updated,b.UpdatedBy, 'N'");  for (int i=0; i < m_columns.size(); i++) {    String columnName=(String)m_columns.get(i);    Object value=po.get_Value(columnName);    if (value == null)     continue;    sql1.append(",").append(columnName);    sql2.append(",b.").append(columnName);  }  StringBuffer sql=new StringBuffer();  sql.append(sql1).append(sql2).append(" FROM AD_Language l, " + m_baseTableName + " b WHERE l.IsActive = 'Y' AND l.IsSystemLanguage = 'Y' AND b."+ m_baseTableName+ "_ID=").append(po.get_ID());  int no=DB.executeUpdate(sql.toString(),po.get_TrxName());  log.fine(m_trlTableName + ": ID=" + po.get_ID()+ " #"+ no);  return no != 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.049 -0500",hash_original_method="F1B6F008CE79EB2FBE5188D2B8BB2F2C",hash_generated_method="63D88837AF9AA04B382889DBEED2351C") public String encodeBody(){  return text != null ? Integer.toString(code) + SP + agent+ SP+ DOUBLE_QUOTE+ text+ DOUBLE_QUOTE : Integer.toString(code) + SP + agent;}  }
class C{  public Builder parameter(String name,String value){  if (!validParamChars.containsOnly(name)) {    throw Messages.INSTANCE.getIllegalArgumentException(23);  }  if (value == null) {    parameters.remove(name);  } else {    parameters.put(name,value);  }  return this;}  }
class C{  public InterruptedException(){  super();}  }
class C{  public final Activity waitForActivityWithTimeout(long timeOut){synchronized (this) {    if (mLastActivity == null) {      try {        wait(timeOut);      } catch (      InterruptedException e) {      }    }    if (mLastActivity == null) {      return null;    } else {      Activity res=mLastActivity;      mLastActivity=null;      return res;    }  }}  }
class C{  public boolean isTimeoutMailSent(){  return timeoutMailSent;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  DocumentType newDocType;  String publicId="http://www.w3.org/DOM/Test/dom2.dtd";  String systemId="dom2.dtd";  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("{");  qualifiedNames.add("}");  qualifiedNames.add("'");  qualifiedNames.add("~");  qualifiedNames.add("`");  qualifiedNames.add("@");  qualifiedNames.add("#");  qualifiedNames.add("$");  qualifiedNames.add("%");  qualifiedNames.add("^");  qualifiedNames.add("&");  qualifiedNames.add("*");  qualifiedNames.add("(");  qualifiedNames.add(")");  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  for (int indexN10073=0; indexN10073 < qualifiedNames.size(); indexN10073++) {    qualifiedName=(String)qualifiedNames.get(indexN10073);{      boolean success=false;      try {        newDocType=domImpl.createDocumentType(qualifiedName,publicId,systemId);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("domimplementationcreatedocumenttype04",success);    }  }}  }
class C{  private void startHotRefresh(){  try {    String host=new URL(mUri.toString()).getHost();    String wsUrl="ws://" + host + ":8082";    mWXHandler.obtainMessage(Constants.HOT_REFRESH_CONNECT,0,0,wsUrl).sendToTarget();  } catch (  MalformedURLException e) {    e.printStackTrace();  }}  }
class C{  Object processENUM_OR_PQNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  Object objToReturn=null;  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      if (!avt.isSimple())       return avt; else       objToReturn=avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  }  int key=this.getEnum(value);  if (key != StringToIntTable.INVALID_KEY) {    if (objToReturn == null)     objToReturn=new Integer(key);  } else {    try {      QName qname=new QName(value,handler,true);      if (objToReturn == null)       objToReturn=qname;      if (qname.getPrefix() == null) {        StringBuffer enumNamesList=getListOfEnums();        enumNamesList.append(" <qname-but-not-ncname>");        handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},null);        return null;      }    } catch (    IllegalArgumentException ie) {      StringBuffer enumNamesList=getListOfEnums();      enumNamesList.append(" <qname-but-not-ncname>");      handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},ie);      return null;    }catch (    RuntimeException re) {      StringBuffer enumNamesList=getListOfEnums();      enumNamesList.append(" <qname-but-not-ncname>");      handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},re);      return null;    }  }  return objToReturn;}  }
class C{  public T caseMethodDeclarator_(MethodDeclarator_ object){  return null;}  }
class C{  private void performNextTask(){  if (!mOnScreenRemoveMarkerTasks.isEmpty()) {    removeMarker(mOnScreenRemoveMarkerTasks.poll());  } else   if (!mAnimationTasks.isEmpty()) {    mAnimationTasks.poll().perform();  } else   if (!mOnScreenCreateMarkerTasks.isEmpty()) {    mOnScreenCreateMarkerTasks.poll().perform(this);  } else   if (!mCreateMarkerTasks.isEmpty()) {    mCreateMarkerTasks.poll().perform(this);  } else   if (!mRemoveMarkerTasks.isEmpty()) {    removeMarker(mRemoveMarkerTasks.poll());  }}  }
class C{  private ZyOperandBuilder(){}  }
class C{  public Session createSession(SecureChannel channel,UnsignedInteger maxResponseMessageSize,Double requestedSessionTimeout,String sessionName,EndpointDescription[] discoveredEndpoints) throws IllegalArgumentException, ServiceResultException {  if (maxResponseMessageSize == null)   maxResponseMessageSize=UnsignedInteger.valueOf(4 * 1024 * 1024);  if (requestedSessionTimeout == null)   requestedSessionTimeout=60 * 60 * 1000.0;  EndpointDescription endpoint=channel.getEndpointDescription();  Client client=this;  if (endpoint == null || channel == null)   throw new IllegalArgumentException("null arg");  Session session=new Session();  if (sessionName == null)   sessionName=UUID.randomUUID() + "-" + String.format("%08X",System.identityHashCode(session));  session.endpoint=endpoint;  session.name=sessionName;  final KeyPair cert=client.application.getApplicationInstanceCertificate();  if (cert != null && channel.getEndpointDescription().needsCertificate()) {    session.clientCertificate=cert.getCertificate();    session.clientPrivateKey=cert.getPrivateKey();  }  session.clientNonce=CryptoUtil.createNonce(32);  CreateSessionRequest req=new CreateSessionRequest();  req.setClientNonce(session.clientNonce);  req.setClientDescription(client.createApplicationDescription());  if (session.clientCertificate != null)   req.setClientCertificate(session.getClientCertificate().getEncoded());  req.setEndpointUrl(endpoint.getEndpointUrl());  req.setMaxResponseMessageSize(maxResponseMessageSize);  if (endpoint.getServer() != null)   req.setServerUri(endpoint.getServer().getApplicationUri());  req.setSessionName(session.name);  req.setRequestedSessionTimeout(requestedSessionTimeout);  RequestHeader requestHeader=new RequestHeader();  requestHeader.setTimestamp(DateTime.currentTime());  req.setRequestHeader(requestHeader);  CreateSessionResponse res=(CreateSessionResponse)channel.serviceRequest(req);  byte[] serverCert=res.getServerCertificate();  session.serverCertificate=serverCert == null || serverCert.length == 0 ? null : new Cert(serverCert);  session.serverNonce=res.getServerNonce();  session.sessionId=res.getSessionId();  session.authenticationToken=res.getAuthenticationToken();  session.sessionTimeout=res.getRevisedSessionTimeout();  session.maxRequestMessageSize=res.getMaxRequestMessageSize();  session.serverSoftwareCertificates=res.getServerSoftwareCertificates();  logger.debug("MessageSecurityMode: {}",channel.getMessageSecurityMode());  if (!MessageSecurityMode.None.equals(channel.getMessageSecurityMode())) {    SignatureData serverSignature=res.getServerSignature();    byte[] dataServerSigned=ByteBufferUtils.concatenate(req.getClientCertificate(),session.clientNonce);    String signatureAlgorithm=serverSignature == null ? null : serverSignature.getAlgorithm();    logger.debug("Algorithm: {}",signatureAlgorithm);    SecurityAlgorithm algorithm=SecurityAlgorithm.valueOfUri(signatureAlgorithm);    boolean ok=CryptoUtil.getCryptoProvider().verifyAsymm(session.serverCertificate.getCertificate().getPublicKey(),algorithm,dataServerSigned,serverSignature.getSignature());    if (!ok)     throw new ServiceResultException(Bad_ApplicationSignatureInvalid,"The signature generated with the server certificate is missing or invalid.");  }  EndpointDescription[] endpoints=res.getServerEndpoints();  if (endpoints == null || endpoints.length == 0) {    throw new ServiceResultException(StatusCodes.Bad_UnexpectedError,"The CreateSessionResponse's endpoint list received from the server is empty");  }  String uri=channel.getEndpointDescription().getTransportProfileUri();  validateEndpoints(uri,endpoints,discoveredEndpoints);  EndpointDescription[] filteredEndpoints=select(endpoints,endpoint.getEndpointUrl(),null,endpoint.getSecurityMode(),SecurityPolicy.getSecurityPolicy(endpoint.getSecurityPolicyUri()),endpoint.getServerCertificate());  if (filteredEndpoints.length == 0 && discoveredEndpoints == null)   filteredEndpoints=select(endpoints,null,null,endpoint.getSecurityMode(),SecurityPolicy.getSecurityPolicy(endpoint.getSecurityPolicyUri()),endpoint.getServerCertificate());  if (filteredEndpoints.length == 0) {    logger.error("Requested endpoint is not found on the server: Endpoint={}",endpoint);    logger.debug("endpoints={}",Arrays.asList(endpoints));    throw new ServiceResultException(StatusCodes.Bad_SecurityModeRejected,"Requested endpoint is not found on the server");  }  if (filteredEndpoints.length == 1)   session.endpoint=filteredEndpoints[0];  return session;}  }
class C{  public T caseAbstractIntLiteral(AbstractIntLiteral object){  return null;}  }
class C{  @SuppressWarnings("unchecked") public final void testIsSatisfiedWhenNoConstraintsAreSatisfied(){  Constraint<Object> constraint1=new ConstraintImplementation(false);  Constraint<Object> constraint2=new ConstraintImplementation(false);  Constraint<Object>[] constraints=new Constraint[2];  constraints[0]=constraint1;  constraints[1]=constraint2;  DisjunctiveConstraint<Object> disjunctiveConstraint=new DisjunctiveConstraint<>(constraints);  assertFalse(disjunctiveConstraint.isSatisfied(new Object()));}  }
class C{  protected void checkNotExist(IgfsImpl igfs,IgfsSecondaryFileSystemTestAdapter igfsSecondary,IgfsPath... paths) throws Exception {  checkNotExist(igfs,paths);  if (mode != PRIMARY)   checkNotExist(igfsSecondary,paths);}  }
class C{  public synchronized void saveCommitPoint(Long indexCommitGen){  AtomicInteger reserveCount=savedCommits.get(indexCommitGen);  if (reserveCount == null)   reserveCount=new AtomicInteger();  reserveCount.incrementAndGet();  savedCommits.put(indexCommitGen,reserveCount);}  }
class C{  Mode(ASCIIBits bits){  _lowMask=bits._lowerMask;  _highMask=bits._upperMask;}  }
class C{  public String toString(){  return " at " + index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public NumberFileParser(LineNumberReader reader,String pSourceName) throws IOException {  mInputReader=reader;  mSourceName=pSourceName;  mCloseReader=false;  advanceChar();  advanceToken();}  }
class C{  public PaintContext createContext(ColorModel cm,Rectangle deviceBounds,Rectangle2D userBounds,AffineTransform transform,RenderingHints hints){  transform=new AffineTransform(transform);  transform.concatenate(gradientTransform);  try {    return new LinearGradientPaintContext(cm,deviceBounds,userBounds,transform,hints,start,end,fractions,this.getColors(),cycleMethod,colorSpace);  } catch (  NoninvertibleTransformException e) {    e.printStackTrace();    throw new IllegalArgumentException("transform should be" + "invertible");  }}  }
class C{  public PartitionNotAvailableException(Throwable cause){  super(cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.800 -0500",hash_original_method="8AE6DA2951569D3F1B1B45FDE2C61B3C",hash_generated_method="10CE462B07C3B7D01E1AC1F092312A2E") public void parse(String systemId) throws IOException, SAXException {  parse(new InputSource(systemId));}  }
class C{  protected void doResolvePick(DrawContext dc,Rectangle pickRect,Layer layer){  int[] colorCodes=dc.getPickColorsInRectangle(pickRect,this.minAndMaxColorCodes);  if (colorCodes == null || colorCodes.length == 0)   return;  for (  int colorCode : colorCodes) {    if (colorCode == 0)     continue;    PickedObject po=this.lookupPickableObject(colorCode);    if (po == null)     continue;    if (layer != null)     po.setParentLayer(layer);    dc.addObjectInPickRectangle(po);  }}  }
class C{  private void notifyListeners(){  for (  final IStackModelListener listener : m_listeners) {    try {      listener.dataChanged();    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public void rotateKeys() throws Exception {  try {    _log.info("Rotating keys...");    TokenKeysBundle newBundle=TokenKeysBundle.createNewTokenKeysBundleWithRotatedKeys(_cachedTokenKeysBundle);    createOrUpdateBundle(newBundle);    _log.info("Done rotating keys...");  } catch (  NumberFormatException ex) {    _log.error("NumberFormatException while trying to rotate token keys, could not convert timestamp",ex);  }catch (  Exception ex) {    _log.error("Exception while trying to rotate token keys",ex);  } finally {    updateCachedKeys();  }}  }
class C{  public OutputBitStream(final String name,final int bufSize) throws FileNotFoundException {  this(new FileOutputStream(name),bufSize);}  }
class C{  public String toString(){  return "RemoteNewDataVO[test=" + Test + "-"+ TableName+ "]";}  }
class C{  private static void generateTransactionID(TransactionID tid,int nb){  long left=System.currentTimeMillis();  long right=random.nextLong();  int b=nb / 2;  for (int i=0; i < b; i++) {    tid.transactionID[i]=(byte)((left >> (i * 8)) & 0xFFL);    tid.transactionID[i + b]=(byte)((right >> (i * 8)) & 0xFFL);  }  tid.hashCode=(tid.transactionID[3] << 24 & 0xFF000000) | (tid.transactionID[2] << 16 & 0x00FF0000) | (tid.transactionID[1] << 8 & 0x0000FF00)| (tid.transactionID[0] & 0x000000FF);}  }
class C{  public NoSuchMechanismException(){  super();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.DOCLET__LINE_TAGS:    return ((InternalEList<?>)getLineTags()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static boolean isInEasternEightZones(){  return TimeZone.getDefault() == TimeZone.getTimeZone("GMT+08");}  }
class C{  @PreAuthorize("hasAnyRole('ROLE_USER_MANAGER','ROLE_DATA_MANAGER','ROLE_SYSTEM_MANAGER')") @Transactional(readOnly=true,propagation=Propagation.REQUIRED) public int count(String filter){  return userDao.countNotDeleted(filter);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public PartialFunction receive(){  return ReceiveBuilder.match(ParseArticle.class,null).build();}  }
class C{  public static Extension newExtension(ObjectIdentifier extensionId,boolean critical,byte[] rawExtensionValue) throws IOException {  Extension ext=new Extension();  ext.extensionId=extensionId;  ext.critical=critical;  ext.extensionValue=rawExtensionValue;  return ext;}  }
class C{  public UpdateRoomRequestParam(String topic,Boolean noIndex,String tags){  this.topic=topic;  this.noIndex=noIndex;  this.tags=tags;}  }
class C{  public void deleteCookie(Cookie cookie){  String name=cookie.getName() + cookie.getDomain();  cookies.remove(name);  SharedPreferences.Editor prefsWriter=cookiePrefs.edit();  prefsWriter.remove(COOKIE_NAME_PREFIX + name);  prefsWriter.commit();}  }
class C{  public static Class<?> forName(String name,ClassLoader classLoader) throws ClassNotFoundException, LinkageError {  Class<?> clazz=resolvePrimitiveClassName(name);  if (clazz != null) {    return clazz;  }  if (name.endsWith(ARRAY_SUFFIX)) {    String elementClassName=name.substring(0,name.length() - ARRAY_SUFFIX.length());    Class<?> elementClass=forName(elementClassName,classLoader);    return Array.newInstance(elementClass,0).getClass();  }  int internalArrayMarker=name.indexOf(INTERNAL_ARRAY_PREFIX);  if (internalArrayMarker != -1 && name.endsWith(";")) {    String elementClassName=null;    if (internalArrayMarker == 0) {      elementClassName=name.substring(INTERNAL_ARRAY_PREFIX.length(),name.length() - 1);    } else     if (name.startsWith("[")) {      elementClassName=name.substring(1);    }    Class<?> elementClass=forName(elementClassName,classLoader);    return Array.newInstance(elementClass,0).getClass();  }  ClassLoader classLoaderToUse=classLoader;  if (classLoaderToUse == null) {    classLoaderToUse=getClassLoader();  }  return classLoaderToUse.loadClass(name);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void evictAll() throws IOException {  cache.evictAll();}  }
class C{  public void testDateSortMissingFirst() throws Exception {  checkSortMissingFirst("datedv_missingfirst","1900-12-31T23:59:59.999Z","2005-12-31T23:59:59.999Z");}  }
class C{  public void run() throws Exception {  Task task=getTask();  int size=getLoopCount();  if (size <= 0 || task == null) {    return;  }  long[] times=new long[size];  for (int i=0; i < size; i++) {    long start=System.currentTimeMillis();    task.run();    long end=System.currentTimeMillis();    times[i]=end - start;  }  printSummary(times);}  }
class C{  public JOptionPane(Object message,int messageType,int optionType,Icon icon){  this(message,messageType,optionType,icon,null);}  }
class C{  private void handleSelectionView(IProfile profile,boolean on){  if (on) {    if (Build.VERSION.SDK_INT >= 21) {      ((FrameLayout)mAccountHeaderContainer).setForeground(UIUtils.getCompatDrawable(mAccountHeaderContainer.getContext(),mAccountHeaderTextSectionBackgroundResource));      mAccountHeaderContainer.setOnClickListener(onSelectionClickListener);      mAccountHeaderContainer.setTag(R.id.material_drawer_profile_header,profile);    } else {      mAccountHeaderTextSection.setBackgroundResource(mAccountHeaderTextSectionBackgroundResource);      mAccountHeaderTextSection.setOnClickListener(onSelectionClickListener);      mAccountHeaderTextSection.setTag(R.id.material_drawer_profile_header,profile);    }  } else {    if (Build.VERSION.SDK_INT >= 21) {      ((FrameLayout)mAccountHeaderContainer).setForeground(null);      mAccountHeaderContainer.setOnClickListener(null);    } else {      UIUtils.setBackground(mAccountHeaderTextSection,null);      mAccountHeaderTextSection.setOnClickListener(null);    }  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setContentRequired(false);}  }
class C{  protected SRegRequest(ParameterList params){  _parameters=params;}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public void repeat(float offset,String syncbaseID,int repeatIteration){  TimingSpecifier ts=new RepeatTimingSpecifier(owner,isBegin,offset,syncbaseID,repeatIteration);  timingSpecifiers.add(ts);}  }
class C{  public synchronized boolean instanceOf(Vertex type){  return hasRelationship(this.network.createVertex(Primitive.INSTANTIATION),type);}  }
class C{  private void scheduleAccessibilityEventSender(){  if (mAccessibilityEventSender == null) {    mAccessibilityEventSender=new AccessibilityEventSender();  } else {    removeCallbacks(mAccessibilityEventSender);  }  postDelayed(mAccessibilityEventSender,TIMEOUT_SEND_ACCESSIBILITY_EVENT);}  }
class C{  public static String componentToMixNMatchKey(String component){  if (component.equals(ThemesColumns.MODIFIES_LAUNCHER)) {    return MixnMatchColumns.KEY_HOMESCREEN;  } else   if (component.equals(ThemesColumns.MODIFIES_ICONS)) {    return MixnMatchColumns.KEY_ICONS;  } else   if (component.equals(ThemesColumns.MODIFIES_LOCKSCREEN)) {    return MixnMatchColumns.KEY_LOCKSCREEN;  } else   if (component.equals(ThemesColumns.MODIFIES_FONTS)) {    return MixnMatchColumns.KEY_FONT;  } else   if (component.equals(ThemesColumns.MODIFIES_BOOT_ANIM)) {    return MixnMatchColumns.KEY_BOOT_ANIM;  } else   if (component.equals(ThemesColumns.MODIFIES_ALARMS)) {    return MixnMatchColumns.KEY_ALARM;  } else   if (component.equals(ThemesColumns.MODIFIES_NOTIFICATIONS)) {    return MixnMatchColumns.KEY_NOTIFICATIONS;  } else   if (component.equals(ThemesColumns.MODIFIES_RINGTONES)) {    return MixnMatchColumns.KEY_RINGTONE;  } else   if (component.equals(ThemesColumns.MODIFIES_OVERLAYS)) {    return MixnMatchColumns.KEY_OVERLAYS;  } else   if (component.equals(ThemesColumns.MODIFIES_STATUS_BAR)) {    return MixnMatchColumns.KEY_STATUS_BAR;  } else   if (component.equals(ThemesColumns.MODIFIES_NAVIGATION_BAR)) {    return MixnMatchColumns.KEY_NAVIGATION_BAR;  } else   if (component.equals(ThemesColumns.MODIFIES_LIVE_LOCK_SCREEN)) {    return MixnMatchColumns.KEY_LIVE_LOCK_SCREEN;  }  return null;}  }
class C{  public XPath createXPath(String xpathExpression) throws InvalidXPathException {  DefaultXPath xpath=new DefaultXPath(xpathExpression);  if (xpathNamespaceURIs != null) {    xpath.setNamespaceURIs(xpathNamespaceURIs);  }  return xpath;}  }
class C{  @Override public void tupleNotMatched(Map<K,V> tuple){  except.emit(cloneTuple(tuple));}  }
class C{  public static boolean executableExists(String executable){  File directFile=new File(executable);  if (directFile.exists() && directFile.canExecute()) {    return true;  }  for (  String pathString : getSystemPath()) {    Path path=Paths.get(pathString);    if (Files.exists(path.resolve(executable)) && Files.isExecutable(path.resolve(executable))) {      return true;    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(!DShowMediaPlayer.getUseOverlay() && !DShowMediaPlayer.getUseVmr() && !DShowMediaPlayer.getUseEvr());}  }
class C{  void close(){  if (executingStatement != null) {    try {      executingStatement.cancel();    } catch (    Exception e) {    }  }  if (conn != null) {    try {      conn.close();    } catch (    Exception e) {    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:43.020 -0500",hash_original_method="51D086FA18F9CD076FA7BBB430E7197D",hash_generated_method="852CD7224B40120AD7EF5834D0CD6E2D") public int globalTotal(){  int count=0;  for (int i=0; i < NUM_INSTR; i++) {    count+=mCounts[i];  }  return count;}  }
class C{  public void addFooterView(View view){  addFooterView(view,false);}  }
class C{  @Override public Vertex readVertex(final InputStream inputStream,final Function<Attachable<Vertex>,Vertex> vertexAttachMethod,final Function<Attachable<Edge>,Edge> edgeAttachMethod,final Direction attachEdgesOfThisDirection) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public void selectParameters(List<Parameter> params){}  }
class C{  public Vector add(double x,double y,double z){  return new Vector(this.x + x,this.y + y,this.z + z);}  }
class C{  public static CodedInputStream newInstance(final byte[] buf,final int off,final int len){  CodedInputStream result=new CodedInputStream(buf,off,len);  try {    result.pushLimit(len);  } catch (  InvalidProtocolBufferException ex) {    throw new IllegalArgumentException(ex);  }  return result;}  }
class C{  public final void meshNormalMapped(Mesh3D mesh,boolean vertexNormals){  meshNormalMapped(mesh,new XYZNormalMapper(),vertexNormals);}  }
class C{  private ScServerOperatingSystem findOsType(StorageCenterAPI api,String ssn,HostOsType hostOsType){  String product;  String version;switch (hostOsType) {case Windows:    product="Windows";  version="2012 MPIO";break;case HPUX:product="HP UX";version="11i v3";break;case Linux:product="Red Hat Linux";version="6.x";break;case Esx:product="VMWare";version="5.1";break;case AIX:case AIXVIO:product="AIX";version="7.1 MPIO";break;case SUNVCS:case No_OS:case Other:default :product="Other";version="Multipath";break;}ScServerOperatingSystem[] osTypes=api.getServerOperatingSystems(ssn,product);for (ScServerOperatingSystem os : osTypes) {if (os.version.contains(version)) {return os;}}for (ScServerOperatingSystem os : osTypes) {return os;}if (hostOsType != HostOsType.Other) {LOG.warn("Unable to find OS type, falling back to Other type.");return findOsType(api,ssn,HostOsType.Other);}return null;}  }
class C{  public int size(){  return n;}  }
class C{  public boolean isFailed(){  return failed;}  }
class C{  protected void calcYValueCount(List<? extends DataSet<?>> dataSets){  mYValCount=0;  if (dataSets == null)   return;  int count=0;  for (int i=0; i < dataSets.size(); i++) {    count+=dataSets.get(i).getEntryCount();  }  mYValCount=count;}  }
class C{  public boolean isRooted(){  rootChecker=new Root();  return rootChecker.isDeviceRooted();}  }
class C{  public TestEnvironment build() throws Throwable {  if (null == this.hostCount) {    throw new IllegalArgumentException("Host count is required");  }  CloudStoreHelper cloudStoreHelper=this.cloudStoreHelper;  if (cloudStoreHelper == null) {    cloudStoreHelper=mock(CloudStoreHelper.class);  }  HostClientFactory hostClientFactory=this.hostClientFactory;  if (hostClientFactory == null) {    hostClientFactory=mock(HostClientFactory.class);  }  NsxClientFactory nsxClientFactory=this.nsxClientFactory;  if (nsxClientFactory == null) {    nsxClientFactory=mock(NsxClientFactory.class);  }  TestEnvironment testEnvironment=new TestEnvironment(cloudStoreHelper,hostClientFactory,nsxClientFactory,this.hostCount,this.isBackgroundPaused);  testEnvironment.start();  return testEnvironment;}  }
class C{  @Override public void addBatch(String sql) throws SQLException {  try {    debugCodeCall("addBatch",sql);    checkClosed();    sql=JdbcConnection.translateSQL(sql,escapeProcessing);    if (batchCommands == null) {      batchCommands=New.arrayList();    }    batchCommands.add(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private int availableChunkData() throws IOException {  if (this.nextChunkLeft == -1) {    return -1;  }  if (this.nextChunkLeft > 0) {    return this.nextChunkLeft;  }  final StringBuilder sb=new StringBuilder();  boolean chunkExt=false;  final byte[] b={(byte)0x00};  int read=0;  if (this.nextChunkSize > 0) {    read=this.is.read();    if (read == 13) {      read=this.is.read();    }  }  read=this.is.read();  while (read > -1 && read != 10 && read != 13) {    if (read == 59) {      chunkExt=true;    }    if (chunkExt == false) {      b[0]=(byte)(read & 0xFF);      sb.append(new String(b,0,1));    }    read=this.is.read();  }  if (read == -1 && sb.length() == 0) {    return -1;  }  if (read == 13) {    read=this.is.read();  }  this.nextChunkSize=0;  if (sb.length() > 0) {    this.nextChunkSize=Integer.parseInt(sb.toString().trim(),16);  }  if (this.nextChunkSize == 0) {    this.nextChunkLeft=-1;    this.readTrailers();  } else {    this.completeSize+=this.nextChunkSize;    this.nextChunkLeft=this.nextChunkSize;  }  return this.nextChunkLeft;}  }
class C{  public boolean isSupported(DurationFieldType type){  if (type == null) {    return false;  }  return type.getField(getChronology()).isSupported();}  }
class C{  public static <T,R>void register(Class<T> from,Class<R> to,Function<T,R> transform){  REGISTRY.register(from,to,transform);}  }
class C{  public static void scrollToPositionWithOffset(RecyclerView recyclerView,int position,int offset){  RecyclerView.LayoutManager lm=recyclerView.getLayoutManager();  if (lm instanceof LinearLayoutManager) {    ((LinearLayoutManager)lm).scrollToPositionWithOffset(position,offset);  } else   if (lm instanceof StaggeredGridLayoutManager) {    ((StaggeredGridLayoutManager)lm).scrollToPositionWithOffset(position,offset);  } else {    recyclerView.scrollToPosition(position);  }}  }
class C{  @Override public void start() throws LifecycleException {  if (getLogger().isDebugEnabled()) {    getLogger().debug(this + ": Starting");  }  if (this.started.get()) {    return;  }  this.lifecycle.fireLifecycleEvent(START_EVENT,null);  try {    init();  } catch (  Throwable t) {    getLogger().error(t.getMessage(),t);  }  registerJvmRouteBinderValve();  if (isCommitValveEnabled()) {    registerCommitSessionValve();  }  initializeSessionCache();  scheduleTimerTasks();  this.started.set(true);}  }
class C{  protected void customOnClose(){}  }
class C{  public ReflectiveProperty(Class<T> propertyHolder,Class<V> valueType,String name){  super(valueType,name);  char firstLetter=Character.toUpperCase(name.charAt(0));  String theRest=name.substring(1);  String capitalizedName=firstLetter + theRest;  String getterName=PREFIX_GET + capitalizedName;  try {    mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);  } catch (  NoSuchMethodException e) {    try {      mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);      mGetter.setAccessible(true);    } catch (    NoSuchMethodException e2) {      getterName=PREFIX_IS + capitalizedName;      try {        mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);      } catch (      NoSuchMethodException e3) {        try {          mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);          mGetter.setAccessible(true);        } catch (        NoSuchMethodException e4) {          try {            mField=propertyHolder.getField(name);            Class fieldType=mField.getType();            if (!typesMatch(valueType,fieldType)) {              throw new NoSuchPropertyException("Underlying type (" + fieldType + ") "+ "does not match Property type ("+ valueType+ ")");            }            return;          } catch (          NoSuchFieldException e5) {            throw new NoSuchPropertyException("No accessor method or field found for" + " property with name " + name);          }        }      }    }  }  Class getterType=mGetter.getReturnType();  if (!typesMatch(valueType,getterType)) {    throw new NoSuchPropertyException("Underlying type (" + getterType + ") "+ "does not match Property type ("+ valueType+ ")");  }  String setterName=PREFIX_SET + capitalizedName;  try {    mSetter=propertyHolder.getDeclaredMethod(setterName,getterType);    mSetter.setAccessible(true);  } catch (  NoSuchMethodException ignored) {  }}  }
class C{  protected void assertResultSetOrdered(ResultSet rs,String[][] data) throws SQLException {  assertResultSet(true,rs,data);}  }
class C{  public void testGetEnclosingJsniRegionSelectionWrapsJsni(){  ITextSelection sel=new TextSelection(88,346);  assertNull(JsniParser.getEnclosingJsniRegion(sel,getTestClassDocument()));}  }
class C{  public static Object putKey1Val1(){  try {    Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(region);    region.create("key1","value1");    return eventId;  } catch (  Exception e) {    fail("put failed due to ",e);  }  return null;}  }
class C{  public void testMixupDocs() throws Exception {  Directory dir=newDirectory();  IndexWriterConfig iwc=newIndexWriterConfig(new MockAnalyzer(random()));  iwc.setMergePolicy(newLogMergePolicy());  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,iwc);  Document doc=new Document();  FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);  customType.setStoreTermVectors(true);  customType.setStoreTermVectorPositions(true);  customType.setStoreTermVectorPayloads(true);  customType.setStoreTermVectorOffsets(random().nextBoolean());  Field field=new Field("field","",customType);  TokenStream ts=new MockTokenizer(MockTokenizer.WHITESPACE,true);  ((Tokenizer)ts).setReader(new StringReader("here we go"));  field.setTokenStream(ts);  doc.add(field);  writer.addDocument(doc);  Token withPayload=new Token("withPayload",0,11);  withPayload.setPayload(new BytesRef("test"));  ts=new CannedTokenStream(withPayload);  assertTrue(ts.hasAttribute(PayloadAttribute.class));  field.setTokenStream(ts);  writer.addDocument(doc);  ts=new MockTokenizer(MockTokenizer.WHITESPACE,true);  ((Tokenizer)ts).setReader(new StringReader("another"));  field.setTokenStream(ts);  writer.addDocument(doc);  DirectoryReader reader=writer.getReader();  Terms terms=reader.getTermVector(1,"field");  assert terms != null;  TermsEnum termsEnum=terms.iterator();  assertTrue(termsEnum.seekExact(new BytesRef("withPayload")));  PostingsEnum de=termsEnum.postings(null,PostingsEnum.ALL);  assertEquals(0,de.nextDoc());  assertEquals(0,de.nextPosition());  assertEquals(new BytesRef("test"),de.getPayload());  writer.close();  reader.close();  dir.close();}  }
class C{  void orderCardGroups(){  int[] cs=new int[origCards.size()];  for (int i=0; i < cs.length; i++)   cs[i]=cards[origCards.get(i)];  GameTableViews.newCardGroup(orig,cs);  cs=new int[orderedCards.size()];  for (int i=0; i < cs.length; i++)   cs[i]=cards[orderedCards.get(i)];  GameTableViews.newCardGroup(ordered,cs);  canSelect();}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public String toDebugString(int depth){  StringBuffer buffer=new StringBuffer();  for (int i=0; i < depth; i++) {    buffer.append('\t');  }  buffer.append(((JavaElement)getElement()).toDebugString());  toDebugString(buffer);  IJavaElementDelta[] children=getAffectedChildren();  if (children != null) {    for (int i=0; i < children.length; ++i) {      buffer.append("\n");      buffer.append(((JavaElementDelta)children[i]).toDebugString(depth + 1));    }  }  for (int i=0; i < this.resourceDeltasCounter; i++) {    buffer.append("\n");    for (int j=0; j < depth + 1; j++) {      buffer.append('\t');    }    IResourceDelta resourceDelta=this.resourceDeltas[i];    buffer.append(resourceDelta.toString());    buffer.append("[");switch (resourceDelta.getKind()) {case IResourceDelta.ADDED:      buffer.append('+');    break;case IResourceDelta.REMOVED:  buffer.append('-');break;case IResourceDelta.CHANGED:buffer.append('*');break;default :buffer.append('?');break;}buffer.append("]");}IJavaElementDelta[] annotations=getAnnotationDeltas();if (annotations != null) {for (int i=0; i < annotations.length; ++i) {buffer.append("\n");buffer.append(((JavaElementDelta)annotations[i]).toDebugString(depth + 1));}}return buffer.toString();}  }
class C{  public boolean isZoomButtonsVisible(){  return zoomButtonsVisible;}  }
class C{  public URL url(){  return this.url;}  }
class C{  @Override @Transactional public BudgetUsage releaseEncumbranceBudget(final String appropriationnumber,final Long financialyearid,final Integer moduleid,final String referencenumber,final Integer departmentid,final Long functionid,final Integer functionaryid,final Integer schemeid,final Integer subschemeid,final Integer boundaryid,final List<Long> budgetheadid,final Integer fundid,final double amount){  return getBudgetUsageDetails(financialyearid,moduleid,referencenumber,departmentid,functionid,functionaryid,schemeid,subschemeid,boundaryid,budgetheadid,fundid,amount,false,appropriationnumber);}  }
class C{  public static UiObjectMatcher withText(String text,Class klass){  Pattern pattern=Pattern.compile("(?i)" + Pattern.quote(text));  UiSelector uiSelector=new UiSelector().textMatches(pattern.pattern());  BySelector bySelector=By.text(pattern);  if (klass != null) {    uiSelector=uiSelector.className(klass);    bySelector.clazz(klass);  }  return new UiObjectMatcher(uiSelector,bySelector);}  }
class C{  public static RefactoringStatus createStatus(int severity,String msg,RefactoringStatusContext context,String pluginId,int code,Object data){  RefactoringStatus result=new RefactoringStatus();  result.fEntries.add(new RefactoringStatusEntry(severity,msg,context,pluginId,code,data));  result.fSeverity=severity;  return result;}  }
class C{  @SuppressWarnings("NullableProblems") public void run(boolean printResults) throws GridClientException {  Collection<TestThread> workers=new ArrayList<>(threadCnt);  client=GridClientFactory.start(configuration());  long startTime=System.currentTimeMillis();  for (int i=0; i < threadCnt; i++) {    TestThread th=new TestThread();    workers.add(th);    th.start();  }  U.joinThreads(workers,null);  if (printResults)   countAndPrintSummary(workers,startTime);  GridClientFactory.stopAll();}  }
class C{  public void focusLost(FocusEvent e){  m_setting=true;  try {    String clear=getText();    if (clear.length() > m_fieldLength)     clear=clear.substring(0,m_fieldLength);    fireVetoableChange(m_columnName,m_oldText,clear);  } catch (  PropertyVetoException pve) {  }  m_setting=false;  m_infocus=false;  setText(getText());}  }
class C{  protected void uninstallSheet(){  if (isInstalled) {    Window owner=getOwner();    if (owner != null) {      owner.setEnabled(true);      owner.removeComponentListener(ownerMovementHandler);      if (shiftBackLocation != null) {        owner.setLocation(shiftBackLocation);      }      if (oldFocusOwner != null) {        owner.toFront();        oldFocusOwner.requestFocus();      }    }    isInstalled=false;  }}  }
class C{  public XMLWriter(PrintWriter out){  this(out,2);}  }
class C{  public static ProgressDialog initProgressDialog(Context context,String message,boolean isCancelable,boolean isIndeterminate){  ProgressDialog loadingDialog=null;  try {    if (context != null) {      if (message == null) {        message="Loading. Please wait...";      }      loadingDialog=new ProgressDialog(context);      loadingDialog.setCancelable(isCancelable);      loadingDialog.setMessage(message);      loadingDialog.setIndeterminate(isIndeterminate);    }  } catch (  Exception e) {    logThis(TAG,"initProgressDialog Exception",e);  }  return loadingDialog;}  }
class C{  public SecurityCheckException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void incrementCount(A a,B b){{    Map<B,Integer> bMap;    if (counts.containsKey(a)) {      bMap=counts.get(a);    } else {      bMap=new HashMap<>();      counts.put(a,bMap);    }    Integer previousCount;    if (bMap.containsKey(b)) {      previousCount=bMap.get(b);    } else {      previousCount=0;    }    bMap.put(b,previousCount + 1);  }{    Integer previousTotal;    if (bTotals.containsKey(b)) {      previousTotal=bTotals.get(b);    } else {      previousTotal=0;    }    bTotals.put(b,previousTotal + 1);  }{    if (probabilities.containsKey(a)) {      probabilities.get(a).clear();    }    if (reverseProbabilities.containsKey(b)) {      reverseProbabilities.get(b).clear();    }  }}  }
class C{  public SAXParser newSAXParser() throws ParserConfigurationException {  try {    return SAXParserImpl.newInstance(features);  } catch (  SAXException se) {    throw new ParserConfigurationException(se.getMessage());  }}  }
class C{  protected void addToPopulation(Solution newSolution){  List<Integer> dominates=new ArrayList<Integer>();  boolean dominated=false;  for (int i=0; i < population.size(); i++) {    int flag=dominanceComparator.compare(newSolution,population.get(i));    if (flag < 0) {      dominates.add(i);    } else     if (flag > 0) {      dominated=true;    }  }  if (!dominates.isEmpty()) {    population.remove(dominates.get(PRNG.nextInt(dominates.size())));    population.add(newSolution);  } else   if (!dominated) {    population.remove(PRNG.nextInt(population.size()));    population.add(newSolution);  }}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.610 -0500",hash_original_method="E3A8AF53901269F90797322614E1EFAB",hash_generated_method="D3098C42F37B6011CB4E0F35D59D626A") public void joinGroup(SocketAddress groupAddress,NetworkInterface netInterface) throws IOException {  checkJoinOrLeave(groupAddress,netInterface);  impl.joinGroup(groupAddress,netInterface);}  }
class C{  public boolean onSneakMachineActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float hitX,float hitY,float hitZ){  return false;}  }
class C{  public String[] remove(String name){  return vals.remove(name);}  }
class C{  public boolean update(K key){  Long curr=new Long(System.currentTimeMillis());  Long prev=cache.putIfAbsent(key,curr);  if (prev == null) {    return false;  }  if (curr - prev > this.timeoutInterval) {    if (cache.replace(key,prev,curr)) {      return false;    }  }  return true;}  }
class C{  public static String encodePath(final String unescaped) throws URIException {  return encodePath(unescaped,URI.getDefaultProtocolCharset());}  }
class C{  protected Boolean matchInterface(String interfaceName){  return null;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("SSAX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SSAX");    translateAll(environment,instruction,"SSAX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SSUBADDX");    translateAll(environment,instruction,"SSUBADDX",instructions);  }}  }
class C{  public void testSingleMultiPolygonManyPointsNoHoleRoundTrip() throws SQLException {  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setGenerationAlgorithm(PolygonGenerator.BOX);  pgc.setNumberPoints(1000);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPolygon pt=(MultiPolygon)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  MultiPolygon pt2=(MultiPolygon)or.read(st);  assertTrue("The input MultiPolygon is not the same as the output MultiPolygon",pt.equals(pt2));}  }
class C{  public void java_lang_reflect_Array_multiNewArray(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  public List findNodesOfDegree(int degree){  List nodesFound=new ArrayList();  for (Iterator i=nodeIterator(); i.hasNext(); ) {    Node node=(Node)i.next();    if (node.getDegree() == degree)     nodesFound.add(node);  }  return nodesFound;}  }
class C{  @Override protected void doRender(KMLTraversalContext tc,DrawContext dc){  super.doRender(tc,dc);  if (this.getNetworkResource() != null)   this.getNetworkResource().render(tc,dc);}  }
class C{  public double naturalDistance(Key otherKey){  return Math.log(new BigInteger(1,hash).subtract(new BigInteger(1,otherKey.hash)).mod(new BigInteger(1,MAX_KEY.hash).add(new BigInteger("1"))).doubleValue()) / Math.log(2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.078 -0500",hash_original_method="7F91DC25C3C3CDE10A09CD9C14BFD4B5",hash_generated_method="A69BA93BB45D8DD9CC8C1228B4D15887") public Builder(RenderScript rs,Element e){  e.checkValid();  mRS=rs;  mElement=e;}  }
class C{  public RetractItem(String itemId){  if (itemId == null)   throw new IllegalArgumentException("itemId must not be 'null'");  id=itemId;}  }
class C{  public BarChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,Type type){  super(dataset,renderer);  mType=type;}  }
class C{  protected void processMappingKeyConverter(DatabaseMapping mapping,String convertValue,List<ConvertMetadata> converts,MetadataClass referenceClass,MetadataClass referenceClassWithGenerics){  processMappingConverter(mapping,convertValue,getMapKeyConverts(converts),referenceClass,referenceClassWithGenerics,true);}  }
class C{  public static void sort(int[][] m){  for (int i=0; i < m.length; i++) {    int minCol1=m[i][1];    int minCol0=m[i][0];    int minIndex=i;    for (int j=i + 1; j < m.length; j++) {      if (minCol1 > m[j][1]) {        minCol1=m[j][1];        minCol0=m[j][0];        minIndex=j;      }    }    if (minIndex != i) {      m[minIndex][1]=m[i][1];      m[minIndex][0]=m[i][0];      m[i][1]=minCol1;      m[i][0]=minCol0;    }  }}  }
class C{  private boolean dependencyPruning(Context c){  if (dependencyPruning == false)   return false;  Context p1=c.getParents().get(0);  Context p2=c.getParents().get(1);  boolean sample_p1_p2=true;  for (  ContextualDatum d : p1.getSample()) {    if (!p2.containDatum(d)) {      sample_p1_p2=false;      break;    }  }  boolean sample_p2_p1=true;  for (  ContextualDatum d : p2.getSample()) {    if (!p1.containDatum(d)) {      sample_p2_p1=false;      break;    }  }  if (sample_p1_p2) {    return true;  } else   if (sample_p2_p1) {    return true;  } else {    return false;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String newMode=getString(stack);  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    if ("netflix".equals(newMode)) {      newMode="netflix --ui-query-string=source_type=2";    } else     if (newMode.startsWith("youtube")) {      if (!Sage.getBoolean("enable_youtube_leanback",false)) {        if (Sage.DBG)         System.out.println("ERROR: Requested to launch youtube, but it is disabled!");        return null;      }      if (Sage.DBG)       System.out.println("Testing YouTube connectivity before launching app...");      try {        java.net.InetSocketAddress sa=new java.net.InetSocketAddress("www.youtube.com",80);        java.net.Socket ytTest=new java.net.Socket();        ytTest.connect(sa,10000);        if (Sage.DBG)         System.out.println("Connection succeeded!");        ytTest.close();      } catch (      Exception e) {        Catbert.processUISpecificHook("MediaPlayerError",new Object[]{Sage.rez("GENERAL_ERROR_TITLE"),Sage.rez("YT_CONNECTION_ERROR")},stack.getUIMgr(),true);        return null;      }    }    ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).switchAppMode(newMode);  }  return null;}  }
class C{  @DSComment("no input, no suspicious activity and output is just an instance of a parser") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:12.119 -0500",hash_original_method="0194E8A94417A2CEABB2D1EB1F726482",hash_generated_method="C0016DE88A673311BBA5B3D10DAC16C8") public XmlPullParser newPullParser() throws XmlPullParserException {  if (parserClasses == null)   throw new XmlPullParserException("Factory initialization was incomplete - has not tried " + classNamesLocation);  if (parserClasses.size() == 0)   throw new XmlPullParserException("No valid parser classes found in " + classNamesLocation);  final StringBuilder issues=new StringBuilder();  for (int i=0; i < parserClasses.size(); i++) {    final Class ppClass=(Class)parserClasses.get(i);    try {      final XmlPullParser pp=(XmlPullParser)ppClass.newInstance();      for (Iterator iter=features.keySet().iterator(); iter.hasNext(); ) {        final String key=(String)iter.next();        final Boolean value=(Boolean)features.get(key);        if (value != null && value.booleanValue()) {          pp.setFeature(key,true);        }      }      return pp;    } catch (    Exception ex) {      issues.append(ppClass.getName() + ": " + ex.toString()+ "; ");    }  }  throw new XmlPullParserException("could not create parser: " + issues);}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(getAccessFlags());}  }
class C{  public CF6(){  this(10);}  }
class C{  public long computeMillis(boolean resetFields,String text){  SavedField[] savedFields=iSavedFields;  int count=iSavedFieldsCount;  if (iSavedFieldsShared) {    iSavedFields=savedFields=(SavedField[])iSavedFields.clone();    iSavedFieldsShared=false;  }  sort(savedFields,count);  if (count > 0) {    DurationField months=DurationFieldType.months().getField(iChrono);    DurationField days=DurationFieldType.days().getField(iChrono);    DurationField first=savedFields[0].iField.getDurationField();    if (compareReverse(first,months) >= 0 && compareReverse(first,days) <= 0) {      saveField(DateTimeFieldType.year(),iDefaultYear);      return computeMillis(resetFields,text);    }  }  long millis=iMillis;  try {    for (int i=0; i < count; i++) {      millis=savedFields[i].set(millis,resetFields);    }    if (resetFields) {      for (int i=0; i < count; i++) {        millis=savedFields[i].set(millis,i == (count - 1));      }    }  } catch (  IllegalFieldValueException e) {    if (text != null) {      e.prependMessage("Cannot parse \"" + text + '"');    }    throw e;  }  if (iOffset != null) {    millis-=iOffset;  } else   if (iZone != null) {    int offset=iZone.getOffsetFromLocal(millis);    millis-=offset;    if (offset != iZone.getOffset(millis)) {      String message="Illegal instant due to time zone offset transition (" + iZone + ')';      if (text != null) {        message="Cannot parse \"" + text + "\": "+ message;      }      throw new IllegalArgumentException(message);    }  }  return millis;}  }
class C{  public void addClimbStandardDefaults(Iterable<? extends AnnotationMirror> tops,Iterable<? extends AnnotationMirror> bottoms){  for (  TypeUseLocation loc : standardClimbDefaultsTop) {    for (    AnnotationMirror top : tops) {      if (!conflictsWithExistingDefaults(checkedCodeDefaults,top,loc)) {        addCheckedCodeDefault(top,loc);      }    }  }  for (  TypeUseLocation loc : standardClimbDefaultsBottom) {    for (    AnnotationMirror bottom : bottoms) {      if (!conflictsWithExistingDefaults(checkedCodeDefaults,bottom,loc)) {        addCheckedCodeDefault(bottom,loc);      }    }  }}  }
class C{  String playSong(Map<String,String> args){  return "ok";}  }
class C{  public void testContainsClassInWebinfClasses() throws Exception {  WarArchive war=new DefaultWarArchive(getResourcePath(PACKAGE_PATH + "containsclass.war"));  assertTrue(war.containsClass("test.Test"));}  }
class C{  protected static void writeBinary(String binary,Object o) throws Exception {  FileOutputStream fo;  ObjectOutputStream oo;  fo=new FileOutputStream(binary);  oo=new ObjectOutputStream(new BufferedOutputStream(fo));  oo.writeObject(o);  oo.close();}  }
class C{  public boolean letsRedstoneGoIn(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity){  return false;}  }
class C{  protected boolean repeat(int pointIndex){  return ((getFlag(pointIndex) & 0x8) != 0);}  }
class C{  public boolean isReadWrite(){  return super.isEditable();}  }
class C{  public final double[][] minsAndMaxs(Instances data,double[][] minsAndMaxs,int index){  double[][] newMinsAndMaxs=new double[data.numAttributes()][2];  for (int i=0; i < data.numAttributes(); i++) {    newMinsAndMaxs[i][0]=minsAndMaxs[i][0];    newMinsAndMaxs[i][1]=minsAndMaxs[i][1];    if (i == m_attIndex) {      if (data.attribute(m_attIndex).isNominal()) {        newMinsAndMaxs[m_attIndex][1]=1;      } else {        newMinsAndMaxs[m_attIndex][1 - index]=m_splitPoint;      }    }  }  return newMinsAndMaxs;}  }
class C{  public static PosOrderModel createOrder(MPOS pos,MBPartner partner){  PosOrderModel order=new PosOrderModel(Env.getCtx(),0,null,pos);  order.setAD_Org_ID(pos.getAD_Org_ID());  order.setIsSOTrx(true);  order.setC_POS_ID(pos.getC_POS_ID());  if (pos.getC_DocType_ID() != 0)   order.setC_DocTypeTarget_ID(pos.getC_DocType_ID()); else   order.setC_DocTypeTarget_ID(MOrder.DocSubTypeSO_POS);  if (partner == null || partner.get_ID() == 0)   partner=pos.getBPartner();  if (partner == null || partner.get_ID() == 0) {    throw new AdempierePOSException("No BPartner for order");  }  order.setBPartner(partner);  order.setM_PriceList_ID(pos.getM_PriceList_ID());  order.setM_Warehouse_ID(pos.getM_Warehouse_ID());  order.setSalesRep_ID(pos.getSalesRep_ID());  order.setPaymentRule(MOrder.PAYMENTRULE_Cash);  if (!order.save()) {    order=null;    throw new AdempierePOSException("Save order failed");  }  return order;}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public Gavc(final String url) throws JAXBException {  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(url);  _matrixParamSet=_uriBuilder.addPathSegment("search");  _matrixParamSet=_uriBuilder.addPathSegment("gavc");  _templateAndMatrixParameterValues=new HashMap<String,Object>();}  }
class C{  public static boolean isAndroidRuntime(){  final String runtime=System.getProperty("java.runtime.name");  return runtime != null && runtime.equals("Android Runtime");}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public final TextState deepCopy(){  final TextState ts=new TextState();  ts.writingMode=writingMode;  if (TmAtStart != null) {    for (int i=0; i < 3; i++) {      System.arraycopy(TmAtStart[i],0,ts.TmAtStart[i],0,3);    }  }  if (Tm != null) {    for (int i=0; i < 3; i++) {      System.arraycopy(Tm[i],0,ts.Tm[i],0,3);    }  }  if (font_ID != null) {    ts.font_ID=new String(StringUtils.toBytes(font_ID));  }  ts.TL=TL;  ts.character_spacing=character_spacing;  ts.Tfs=Tfs;  ts.text_rise=text_rise;  ts.th=th;  ts.word_spacing=word_spacing;  ts.hasFontChanged=hasFontChanged;  return ts;}  }
class C{  private boolean isSMIS8XProvider(String providerVersion){  String provStr[]=providerVersion.split(Constants.SMIS_DOT_REGEX);  return Integer.parseInt(provStr[0]) >= 8;}  }
class C{  public void overrideButtonClick(OnClickListener listener){  if (shotStateStore.hasShot()) {    return;  }  if (mEndButton != null) {    if (listener != null) {      mEndButton.setOnClickListener(listener);    } else {      mEndButton.setOnClickListener(hideOnClickListener);    }  }  hasCustomClickListener=true;}  }
class C{  public Terminal createTerminalEmulator(){  Window window;  if (!forceAWTOverSwing && hasSwing()) {    window=createSwingTerminal();  } else {    window=createAWTTerminal();  }  if (autoOpenTerminalFrame) {    window.setVisible(true);  }  return (Terminal)window;}  }
class C{  private static void generateGroupSummaryReport(J2DAnalyzer.SingleResultSetHolder baseSRSH,J2DAnalyzer.SingleResultSetHolder targetSRSH,Map consolBaseResult,Map consolTargetResult,Map testCaseBaseResult,Map testCaseResultCount,Map testCaseTargetResult){  File groupSummaryReportFile=new File(resultsDir,"Summary_Report.html");  PrintWriter writer=openFile(groupSummaryReportFile.getAbsolutePath(),HTMLGEN_FILE_NEW);  String header=getHeader(baseSRSH,targetSRSH,"J2DBench - Summary Report","System_Properties.html");  writer.println(header);  writer.flush();  writer.println("<br><hr size=\"1\">");  Map baseValuesMap=new HashMap();  Map targetValuesMap=new HashMap();  String tempGroup=null;  for (int i=0; i < groups.size(); i++) {    tempGroup=groups.get(i).toString();    baseValuesMap.put(tempGroup,new Double(0));    targetValuesMap.put(tempGroup,new Double(0));  }  Object key=null;  double baseValue=0, targetValue=0;  Iterator resultsIter=consolBaseResult.keySet().iterator();  while (resultsIter.hasNext()) {    key=resultsIter.next();    baseValue=((Double)consolBaseResult.get(key)).doubleValue();    targetValue=((Double)consolTargetResult.get(key)).doubleValue();    tempGroup=getGroup(key.toString());    Object curTotalScoreObj=null;    double curTotalScore=0;    curTotalScoreObj=baseValuesMap.get(tempGroup);    if (curTotalScoreObj != null) {      curTotalScore=((Double)curTotalScoreObj).doubleValue();    }    curTotalScore=curTotalScore + baseValue;    baseValuesMap.put(tempGroup,new Double(curTotalScore));    curTotalScore=0;    curTotalScoreObj=targetValuesMap.get(tempGroup);    if (curTotalScoreObj != null) {      curTotalScore=((Double)curTotalScoreObj).doubleValue();    }    curTotalScore=curTotalScore + targetValue;    targetValuesMap.put(tempGroup,new Double(curTotalScore));  }  writer.println("<A NAME=\"results_summary\"></A>" + "<H3>Results Summary:</H3>");  writer.println("<table cols=\"4\" cellspacing=\"0\" " + "cellpadding=\"3\" border=\"1\" width=\"80%\">");  writer.println("<TR BGCOLOR=\"#CCCCFF\">");  writer.println("<TD><B>Testcase</B></TD>");  writer.println("<TD align=\"center\"><B>Score for " + baseBuild + "</B></TD>");  writer.println("<TD align=\"center\"><B>Score for " + targetBuild + "</B></TD>");  writer.println("<TD align=\"center\"><B>% Speedup</TD>");  writer.println("</TR>");  StringBuffer betterResultTags=new StringBuffer();  StringBuffer sameResultTags=new StringBuffer();  StringBuffer worseResultTags=new StringBuffer();  resultsIter=baseValuesMap.keySet().iterator();  double speedup=0;  while (resultsIter.hasNext()) {    key=resultsIter.next();    baseValue=((Double)baseValuesMap.get(key)).doubleValue();    targetValue=((Double)targetValuesMap.get(key)).doubleValue();    speedup=calculateSpeedupPercentage(baseValue,targetValue);    int selColorIndex=selectColor(baseValue,targetValue);    String tcFileName=key.toString().replace('.','_');    tcFileName=tcFileName.toLowerCase() + ".html";switch (selColorIndex) {case 0:      betterResultTags.append("<tr bgcolor=\"" + color[selColorIndex] + "\">");    betterResultTags.append("<td><a href=" + "\"Testcase_Summary_Report.html#status_" + key + "\">"+ groupNames.get(key)+ "</a></td>");  betterResultTags.append("<td align=\"center\">" + decimalFormat.format(baseValue) + "</td>");betterResultTags.append("<td align=\"center\">" + decimalFormat.format(targetValue) + "</td>");betterResultTags.append("<td align=\"center\">" + decimalFormat.format(speedup) + "</td>");betterResultTags.append("</tr>");break;case 1:sameResultTags.append("<tr bgcolor=\"" + color[selColorIndex] + "\">");sameResultTags.append("<td>" + "<a href=\"Testcase_Summary_Report.html#status_" + key + "\">"+ groupNames.get(key)+ "</a></td>");sameResultTags.append("<td align=\"center\">" + decimalFormat.format(baseValue) + "</td>");sameResultTags.append("<td align=\"center\">" + decimalFormat.format(targetValue) + "</td>");sameResultTags.append("<td align=\"center\">" + decimalFormat.format(speedup) + "</td>");sameResultTags.append("</tr>");break;case 2:worseResultTags.append("<tr bgcolor=\"" + color[selColorIndex] + "\">");worseResultTags.append("<td>" + "<a href=\"Testcase_Summary_Report.html#status_" + key + "\">"+ groupNames.get(key)+ "</a></td>");worseResultTags.append("<td align=\"center\">" + decimalFormat.format(baseValue) + "</td>");worseResultTags.append("<td align=\"center\">" + decimalFormat.format(targetValue) + "</td>");worseResultTags.append("<td align=\"center\">" + decimalFormat.format(speedup) + "</td>");worseResultTags.append("</tr>");break;}}writer.println(betterResultTags.toString());writer.flush();writer.println(sameResultTags.toString());writer.flush();writer.println(worseResultTags.toString());writer.flush();writer.println("</table>");writer.println(getFooter());writer.flush();writer.close();}  }
class C{  public final void testFactoryMethod(){  Constraint<Object> constraint=new ConstraintImplementation(true);  NegateConstraint<Object> negateConstraint=NegateConstraint.create(constraint);  assertEquals(constraint,negateConstraint.getConstraint());}  }
class C{  protected CSSValue createCSSValue(String name){  int idx=cssEngine.getPropertyIndex(name);  if (idx > SVGCSSEngine.FINAL_INDEX) {    if (cssEngine.getValueManagers()[idx] instanceof SVGPaintManager) {      return new StyleDeclarationPaintValue(name);    }    if (cssEngine.getValueManagers()[idx] instanceof SVGColorManager) {      return new StyleDeclarationColorValue(name);    }  } else {switch (idx) {case SVGCSSEngine.FILL_INDEX:case SVGCSSEngine.STROKE_INDEX:      return new StyleDeclarationPaintValue(name);case SVGCSSEngine.FLOOD_COLOR_INDEX:case SVGCSSEngine.LIGHTING_COLOR_INDEX:case SVGCSSEngine.STOP_COLOR_INDEX:    return new StyleDeclarationColorValue(name);}}return super.createCSSValue(name);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  return builder.build();}  }
class C{  public boolean isMeasureWithLargestChildEnabled(){  return mUseLargestChild;}  }
class C{  public static ModifiableDBIDs difference(DBIDs ids1,DBIDs ids2){  ModifiableDBIDs result=DBIDUtil.newHashSet(ids1);  result.removeDBIDs(ids2);  return result;}  }
class C{  public String toShortString(){  return toShortString(new StringBuilder(32));}  }
class C{  @Override public int hashCode(){  return toString().toLowerCase(Locale.US).hashCode();}  }
class C{  private static LiveCalc liveness(ParseTreeNode node,LiveSet onEntry){  node.getAttributes().set(LIVENESS,onEntry);  LiveCalc onExit;  if (node instanceof Statement) {    onExit=processStatement((Statement)node,onEntry);    if (node instanceof LabeledStatement) {      onExit=processLabel(((LabeledStatement)node),onExit);    }  } else   if (node instanceof Expression) {    onExit=new LiveCalc(processExpression((Expression)node,onEntry),ExitModes.COMPLETES);  } else {    throw new RuntimeException(node.getClass().getName());  }  onExit=onExit.filter(ScopeAnalyzer.containingScopeForNode(node));  return onExit;}  }
class C{  @Override public synchronized void rollback() throws SQLException {  try {    debugCodeCall("rollback");    checkClosedForWrite();    try {      rollbackInternal();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void resetNotes(){  if (errorInStatus1) {    if (editMode) {      statusText1.setText(editStatus1);    } else {      statusText1.setText(stdStatus1);    }    errorInStatus1=false;  }  resetNotes2();}  }
class C{  public void add(Permission permission){  if (!(permission instanceof AllPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");  all_allowed=true;}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] enclosingRectangle=image.getEnclosingRectangle();  if (enclosingRectangle == null) {    throw NotFoundException.getNotFoundInstance();  }  int left=enclosingRectangle[0];  int top=enclosingRectangle[1];  int width=enclosingRectangle[2];  int height=enclosingRectangle[3];  BitMatrix bits=new BitMatrix(MATRIX_WIDTH,MATRIX_HEIGHT);  for (int y=0; y < MATRIX_HEIGHT; y++) {    int iy=top + (y * height + height / 2) / MATRIX_HEIGHT;    for (int x=0; x < MATRIX_WIDTH; x++) {      int ix=left + (x * width + width / 2 + (y & 0x01) * width / 2) / MATRIX_WIDTH;      if (image.get(ix,iy)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public BPTTTrainer(BPTTNetwork bptt){  super(bptt);  this.bptt=bptt;  errorMap=new HashMap<Neuron,Double>();  weightDeltaMap=new HashMap<Synapse,Double>();  biasDeltaMap=new HashMap<Neuron,Double>();  setIteration(0);  mse=0;}  }
class C{  protected Notification(){  super(null);}  }
class C{  public T pop(){  int size=size();  if (size <= 0) {    return null;  }  return remove(size - 1);}  }
class C{  static Varargs sub(Varargs args){  final LuaString s=args.checkstring(1);  final int l=s.length();  int start=posrelat(args.checkint(2),l);  int end=posrelat(args.optint(3,-1),l);  if (start < 1)   start=1;  if (end > l)   end=l;  if (start <= end) {    return s.substring(start - 1,end);  } else {    return EMPTYSTRING;  }}  }
class C{  @Override int calculateEndLeftBound(float xAxisDelta){  return getView().getLeft() + (int)xAxisDelta;}  }
class C{  public void testAddEjbReferenceDescription() throws Exception {  String xml="<orion-web-app></orion-web-app>";  OrionWebXml descr=OrionWebXmlIo.parseOrionXml(new ByteArrayInputStream(xml.getBytes("UTF-8")));  EjbRef ref=new EjbRef();  ref.setName("foo");  ref.setJndiName("fee");  descr.addEjbReference(ref);  List<Element> nl=descr.getDocument().getRootElement().getChildren("ejb-ref-mapping");  Element n=nl.get(0);  assertEquals("foo",n.getAttribute("name").getValue());  assertEquals("fee",n.getAttribute("location").getValue());  assertEquals(1,nl.size());}  }
class C{  protected static boolean match(Object ref,Object test){  if (ref == null) {    return false;  }  if (ref == test) {    return true;  }  if (ref instanceof LabelList && test instanceof LabelList) {    final LabelList lref=(LabelList)ref;    final LabelList ltest=(LabelList)test;    final int s1=lref.size(), s2=ltest.size();    if (s1 == 0 || s2 == 0) {      return false;    }    for (int i=0; i < s1; i++) {      String l1=lref.get(i);      if (l1 == null) {        continue;      }      for (int j=0; j < s2; j++) {        if (l1.equals(ltest.get(j))) {          return true;        }      }    }  }  return ref.equals(test);}  }
class C{  public static void main(String[] args) throws Exception {  BeautyEyeLNFHelper.debug=true;  BeautyEyeLNFHelper.launchBeautyEyeLNF();  SwingSet2 swingset=new SwingSet2(null,GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration());}  }
class C{  public CopyAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("CopyAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("CopyAction.statusbar"));  putValue(NAME,res.getString("CopyAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("CopyAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("CopyAction.image")))));}  }
class C{  public boolean applies(BigDecimal Value,int M_Product_ID,int M_Product_Category_ID){  if (!isActive())   return false;  if (Value.compareTo(getBreakValue()) < 0)   return false;  if (getM_Product_ID() == 0 && getM_Product_Category_ID() == 0)   return true;  if (getM_Product_ID() == M_Product_ID)   return true;  if (M_Product_Category_ID != 0)   return getM_Product_Category_ID() == M_Product_Category_ID;  return MProductCategory.isCategory(getM_Product_Category_ID(),M_Product_ID);}  }
class C{  public static final void drawDistanceJoint(GL2 gl,DistanceJoint joint){  Vector2 v1=joint.getAnchor1();  Vector2 v2=joint.getAnchor2();  gl.glColor4f(0.0f,0.0f,0.0f,0.3f);  if (joint.isSpring()) {    final double h=0.03;    final double w=0.25;    double offset=h * 0.5;    int loops=(int)Math.ceil((joint.getDistance() - offset * 2.0) / h);    Vector2 n=v1.to(v2);    double x=n.normalize();    Vector2 t=n.getRightHandOrthogonalVector();    double d=(x - offset * 2.0) / (loops - 1);    Vector2 d1=n.product(offset).add(v1);    gl.glBegin(GL.GL_LINES);    gl.glVertex2d(v1.x,v1.y);    gl.glVertex2d(d1.x,d1.y);    Vector2 ct=t.product(w * 0.5);    Vector2 cn=n.product(d * 0.5);    Vector2 first=ct.sum(cn).add(d1);    gl.glVertex2d(d1.x,d1.y);    gl.glVertex2d(first.x,first.y);    Vector2 prev=first;    for (int i=1; i < loops - 1; i++) {      ct=t.product(w * 0.5 * ((i + 1) % 2 == 1 ? 1.0 : -1.0));      cn=n.product(d * (i + 0.5) + offset);      Vector2 p2=ct.sum(cn).add(v1);      gl.glVertex2d(prev.x,prev.y);      gl.glVertex2d(p2.x,p2.y);      prev=p2;    }    Vector2 d2=n.product(-offset).add(v2);    gl.glVertex2d(prev.x,prev.y);    gl.glVertex2d(d2.x,d2.y);    gl.glVertex2d(d2.x,d2.y);    gl.glVertex2d(v2.x,v2.y);    gl.glEnd();  } else {    Vector2 t=v1.to(v2);    t.normalize();    t.left();    t.multiply(0.025);    gl.glBegin(GL2.GL_QUADS);    gl.glVertex2d(v1.x - t.x,v1.y - t.y);    gl.glVertex2d(v1.x + t.x,v1.y + t.y);    gl.glVertex2d(v2.x + t.x,v2.y + t.y);    gl.glVertex2d(v2.x - t.x,v2.y - t.y);    gl.glEnd();  }}  }
class C{  private void clearHistories(){  List<History> histories=((List<History>)viewer.getInput());  if (!histories.isEmpty()) {    mapping.clear();    histories.clear();    refreshView();  }}  }
class C{  public Integer call(){  running=true;  for (int i=0; running && i < numNodesToAdd; i++) {    final String nodePath=ZkStateReader.LIVE_NODES_ZKNODE + "/thrasher-" + id+ "-"+ i;    try {      client.makePath(nodePath,CreateMode.EPHEMERAL,true);      numAdded++;    } catch (    Exception e) {      log.error("failed to create: " + nodePath,e);    }  }  return numAdded;}  }
class C{  static ChronoZonedDateTimeImpl<?> ofInstant(Chronology chrono,Instant instant,ZoneId zone){  ZoneRules rules=zone.getRules();  ZoneOffset offset=rules.getOffset(instant);  Objects.requireNonNull(offset,"offset");  LocalDateTime ldt=LocalDateTime.ofEpochSecond(instant.getEpochSecond(),instant.getNano(),offset);  ChronoLocalDateTimeImpl<?> cldt=(ChronoLocalDateTimeImpl<?>)chrono.localDateTime(ldt);  return new ChronoZonedDateTimeImpl<>(cldt,offset,zone);}  }
class C{  public void quitarRolesUsuario(List roles,String[] usuarios) throws ActionNotAllowedException {  checkPermission(ControlAccesoSecurityManager.MODIFICACION_USUARIO);  Locale locale=getServiceClient().getLocale();  LoggingEvent event=AuditUsuarios.getLogginEventDeasignacionRole(this);  if (roles != null && roles.size() > 0) {    List listaRoles=new ArrayList(roles);    AuditUsuarios.addDataLogInfoRoles(locale,event,listaRoles);    CollectionUtils.transform(listaRoles,VO2IDTransformer.getInstance());    String[] roleIDs=(String[])listaRoles.toArray(ArrayUtils.EMPTY_STRING_ARRAY);    iniciarTransaccion();    int nUsuarios=usuarios.length;    for (int i=0; i < nUsuarios; i++) {      rolUsuarioDBEntity.removeRolesUsuario(usuarios[i],roleIDs);    }    commit();  }}  }
class C{  public String seedTipText(){  return "Seed to use for randomly generating xval splits.";}  }
class C{  public void addRecurrenceDates(RecurrenceDates recurrenceDates){  addProperty(recurrenceDates);}  }
class C{  @SuppressWarnings("MethodOverridesStaticMethodOfSuperclass") @Parameterized.Parameters(name="with Gradle-{0}") public static Collection<Object[]> data() throws Throwable {  return Arrays.asList(new Object[][]{{BASE_GRADLE_VERSION}});}  }
class C{  public String normalizeDocLengthTipText(){  return "If true then document length is normalized according " + "to the settings for norm and lnorm";}  }
class C{  public static WebXmlVersion valueOf(DocType theDocType) throws NullPointerException {  return valueOf(theDocType.getPublicID());}  }
class C{  public static int countOccurrencesOf(String str,String sub){  if (str == null || sub == null || str.length() == 0 || sub.length() == 0) {    return 0;  }  int count=0;  int pos=0;  int idx;  while ((idx=str.indexOf(sub,pos)) != -1) {    ++count;    pos=idx + sub.length();  }  return count;}  }
class C{  public static int[] expand(int al){  if (al == 0)   return new int[0];  final int numLinks=((31 - Integer.numberOfLeadingZeros(al)) / 8) + 1;  final int[] links=new int[numLinks];  for (int i=0; i < numLinks; ++i) {    int pos=i * 8;    int mask=0xff << pos;    int lnk=(al & mask) >>> pos;    links[i]=lnk - 1;  }  return links;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MConversionRate[");  sb.append(get_ID()).append(",Currency=").append(getC_Currency_ID()).append(",To=").append(getC_Currency_ID_To()).append(", Multiply=").append(getMultiplyRate()).append(",Divide=").append(getDivideRate()).append(", ValidFrom=").append(getValidFrom());  sb.append("]");  return sb.toString();}  }
class C{  private void runEnumeration() throws Throwable {  ResourceEnumerationTaskState enumTask=createResourceEnumerationTask(this.outPool.documentSelfLink,this.computeHost.documentSelfLink,GCPEnumerationAdapterService.SELF_LINK,this.isMock,this.computeHost.tenantLinks);  ResourceEnumerationTaskState enumTaskState=performResourceEnumeration(this.host,null,enumTask);  this.host.waitForFinishedTask(ResourceEnumerationTaskState.class,enumTaskState.documentSelfLink);}  }
class C{  public void freeze(){}  }
class C{  protected void writeTrailer(){  out.println("}");}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  if ((params == null) || (params.length < getMinimumParameters())) {    return false;  }  final RPAction alter=new RPAction();  alter.put("type","altercreature");  alter.put("target",params[0]);  alter.put("text",params[1]);  ClientSingletonRepository.getClientFramework().send(alter);  return true;}  }
class C{  public DynamicColumnData(final TableColumn tableColumn,final String preferredLength,final String minLength){  this(tableColumn,DynamicLengthFormat.parse(preferredLength),DynamicLengthFormat.parse(minLength));}  }
class C{  public void addConstant(ConstantPoolEntry entry){  if (entry instanceof Utf8Constant) {    Utf8Constant utf8=(Utf8Constant)entry;    _utf8Map.put(utf8.getValue(),utf8);  }  _entries.add(entry);}  }
class C{  private CloseableHttpResponse submit(HttpUriRequest request,int expectedStatus){  try {    try (CloseableHttpResponse response=client().execute(request)){      if (response.getStatusLine().getStatusCode() != expectedStatus) {        throw new ContainedException("Non-" + expectedStatus + " response from triple store:  "+ response+ " body=\n"+ responseBodyAsString(response));      }      return response;    }   } catch (  IOException e) {    throw new ContainedException("Making HTTP request",e);  }}  }
class C{  public boolean checkRequired(String... flags){  for (  final String flag : flags) {    final Flag aFlag=getFlag(flag);    if ((aFlag == null) || !aFlag.isSet()) {      setParseMessage("The flag " + LONG_FLAG_PREFIX + flag+ " is required");      return false;    }  }  return true;}  }
class C{  public boolean isStart(){switch (compareType) {case Comparison.EQUAL:case Comparison.EQUAL_NULL_SAFE:case Comparison.BIGGER_EQUAL:case Comparison.BIGGER:    return true;default :  return false;}}  }
class C{  public List<GenericEntry> retrieveAllAliases() throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return retrieveAllPages(new URL("https://apps-apis.google.com/a/feeds/alias/2.0/" + domain));}  }
class C{  void reconnect(){  traceDebug(TAG,"Reconnect to server, client size=" + connections.size());  for (  MqttConnection client : connections.values()) {    traceDebug("Reconnect Client:",client.getClientId() + '/' + client.getServerURI());    if (this.isOnline()) {      client.reconnect();    }  }}  }
class C{  public double[] computeLocalFromPreviousObservations(int timeSeries[]){  int timeSteps=timeSeries.length;  double[] localPredictive=new double[timeSteps];  if (timeSteps < k + (k - 1)) {    return localPredictive;  }  average=0;  max=0;  min=0;  int prevVal=0;  int nextVal=0;  for (int p=0; p < k; p++) {    prevVal*=numDiscreteValues;    prevVal+=timeSeries[p];    nextVal*=numDiscreteValues;    nextVal+=timeSeries[k - 1 + p];  }  double logTerm=0.0;  for (int t=k; t < timeSteps - (k - 1); t++) {    nextVal-=maxShiftedValue[timeSeries[t - 1]];    nextVal*=numDiscreteValues;    nextVal+=timeSeries[k - 1 + t];    logTerm=((double)jointCount[nextVal][prevVal]) / ((double)nextCount[nextVal] * (double)prevCount[prevVal]);    logTerm*=(double)observations;    localPredictive[t]=Math.log(logTerm) / log_base;    average+=localPredictive[t];    if (localPredictive[t] > max) {      max=localPredictive[t];    } else     if (localPredictive[t] < min) {      min=localPredictive[t];    }    prevVal-=maxShiftedValue[timeSeries[t - k]];    prevVal*=numDiscreteValues;    prevVal+=timeSeries[t];  }  average=average / (double)(timeSteps - k - (k - 1));  return localPredictive;}  }
class C{  public ExecutionTargetException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void initSlider(){  setOrientation(HORIZONTAL);}  }
class C{  protected void prepare(){  p_Record_ID=getRecord_ID();  ProcessInfoParameter[] parameters=getParameter();  for (  ProcessInfoParameter para : parameters) {    String name=para.getParameterName();    if (para.getParameter() == null)     ;    if (MView.COLUMNNAME_AD_View_ID.equals(para.getParameterName()))     p_AD_View_ID=para.getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static void storeLogcat(){  LogUtilities.rotateLogs();  File cacheDirectory=LogUtilities.ensureLogDirectoryExists();  File file=new File(cacheDirectory,"logcat.txt");  FileOutputStream stream=null;  try {    stream=new FileOutputStream(file);    stream.write(LogUtilities.getLogCatDebug().getBytes());  } catch (  Exception e) {    Log.e(LOG_TAG,"storeLogcat fails with " + e.getLocalizedMessage());  } finally {    try {      stream.close();    } catch (    Exception e) {      Log.e(LOG_TAG,"storeLogcat fails with " + e.getLocalizedMessage());    }  }}  }
class C{  public static void ASTORE_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ASTORE_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  private <T>Collection<T> convert(Enumeration<T> iter){  List<T> list=new ArrayList<>();  while (iter.hasMoreElements())   list.add(iter.nextElement());  return list;}  }
class C{  public Enumeration<Instruction> forwardInstrEnumerator(){  return IREnumeration.forwardGlobalIE(this);}  }
class C{  @Override public boolean isValid(){  return (item != null);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public static void showDownloadMapsWindow(final String mapName){  showDownloadMapsWindow(Optional.of(mapName));}  }
class C{  @HLEFunction(nid=0xC41C2853,version=150) public int sceRtcGetTickResolution(){  return 1000000;}  }
class C{  public static void addImports(final CompilationUnitRewrite rewrite,ImportRewriteContext context,final ASTNode node,final Map<Name,String> typeImports,final Map<Name,String> staticImports,final Collection<IBinding> excludeBindings,final boolean declarations){  Assert.isNotNull(rewrite);  Assert.isNotNull(node);  Assert.isNotNull(typeImports);  Assert.isNotNull(staticImports);  final Set<SimpleName> types=new HashSet<SimpleName>();  final Set<SimpleName> members=new HashSet<SimpleName>();  ImportReferencesCollector.collect(node,rewrite.getCu().getJavaProject(),null,declarations,types,members);  final ImportRewrite rewriter=rewrite.getImportRewrite();  final ImportRemover remover=rewrite.getImportRemover();  Name name=null;  IBinding binding=null;  for (final Iterator<SimpleName> iterator=types.iterator(); iterator.hasNext(); ) {    name=iterator.next();    binding=name.resolveBinding();    if (binding instanceof ITypeBinding) {      final ITypeBinding type=(ITypeBinding)binding;      if (excludeBindings == null || !excludeBindings.contains(type)) {        typeImports.put(name,rewriter.addImport(type,context));        remover.registerAddedImport(((SimpleName)name).getIdentifier());      }    }  }  for (final Iterator<SimpleName> iterator=members.iterator(); iterator.hasNext(); ) {    name=iterator.next();    binding=name.resolveBinding();    if (binding instanceof IVariableBinding) {      final IVariableBinding variable=(IVariableBinding)binding;      final ITypeBinding declaring=variable.getDeclaringClass();      if (declaring != null && (excludeBindings == null || !excludeBindings.contains(variable))) {        staticImports.put(name,rewriter.addStaticImport(variable,context));        remover.registerAddedStaticImport(declaring.getQualifiedName(),variable.getName(),true);      }    } else     if (binding instanceof IMethodBinding) {      final IMethodBinding method=(IMethodBinding)binding;      final ITypeBinding declaring=method.getDeclaringClass();      if (declaring != null && (excludeBindings == null || !excludeBindings.contains(method))) {        staticImports.put(name,rewriter.addStaticImport(method,context));        remover.registerAddedStaticImport(declaring.getQualifiedName(),method.getName(),false);      }    }  }}  }
class C{  private void handleRouteRegistration(final HttpServerRequest request){  log.debug("handleRouteRegistration > " + request.uri());  request.bodyHandler(null);}  }
class C{  public boolean drawCurve(GL2 gl,Point2D center1,Point2D center2,QuadCurve2D curve,GLEntity shape1,GLEntity shape2,QuadCurve2D last){  double p1X=curve.getP1().getX();  double p1Y=curve.getP1().getY();  double p2X=curve.getP2().getX();  double p2Y=curve.getP2().getY();  if (shape1.contains(p2X,p2Y)) {    return false;  }  if (shape2.contains(p1X,p1Y)) {    return false;  }  if (shape1.contains(p1X,p1Y)) {    if (shape2.contains(p2X,p2Y)) {      return divideAndDraw(gl,center1,center2,curve,shape1,shape2,last);    } else {      if (new Vec2(curve.getP2()).minus(new Vec2(curve.getP1())).length() < AWTShape.lineFlatness) {        AWTShape.draw(gl,curve);        return false;      } else {        divideAndDraw(gl,center1,center2,curve,shape1,shape2,last);        return false;      }    }  } else   if (shape2.contains(p2X,p2Y)) {    if (new Vec2(curve.getP2()).minus(new Vec2(curve.getP1())).length() < AWTShape.lineFlatness) {      last.setCurve(curve);      AWTShape.draw(gl,curve);      return true;    } else {      return divideAndDraw(gl,center1,center2,curve,shape1,shape2,last);    }  } else {    AWTShape.draw(gl,curve);  }  return false;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  byte[] src=get();  byte[] dest=new byte[src.length];  ConstPool cp=getConstPool();  LocalVariableAttribute attr=makeThisAttr(newCp,dest);  int n=ByteArray.readU16bit(src,0);  ByteArray.write16bit(n,dest,0);  int j=2;  for (int i=0; i < n; ++i) {    int start=ByteArray.readU16bit(src,j);    int len=ByteArray.readU16bit(src,j + 2);    int name=ByteArray.readU16bit(src,j + 4);    int type=ByteArray.readU16bit(src,j + 6);    int index=ByteArray.readU16bit(src,j + 8);    ByteArray.write16bit(start,dest,j);    ByteArray.write16bit(len,dest,j + 2);    if (name != 0)     name=cp.copy(name,newCp,null);    ByteArray.write16bit(name,dest,j + 4);    if (type != 0) {      String sig=cp.getUtf8Info(type);      sig=Descriptor.rename(sig,classnames);      type=newCp.addUtf8Info(sig);    }    ByteArray.write16bit(type,dest,j + 6);    ByteArray.write16bit(index,dest,j + 8);    j+=10;  }  return attr;}  }
class C{  @Override public void finish() throws IOException {  if (out == null) {    throw new IOException("Stream is closed");  }  if (cDir == null) {    return;  }  if (entries.isEmpty()) {    throw new ZipException("No entries");  }  if (currentEntry != null) {    closeEntry();  }  int cdirSize=cDir.size();  writeLong(cDir,ENDSIG);  writeShort(cDir,0);  writeShort(cDir,0);  writeShort(cDir,entries.size());  writeShort(cDir,entries.size());  writeLong(cDir,cdirSize);  writeLong(cDir,offset);  writeShort(cDir,commentBytes.length);  if (commentBytes.length > 0) {    cDir.write(commentBytes);  }  cDir.writeTo(out);  cDir=null;}  }
class C{  protected boolean isSupported(Element element){  return true;}  }
class C{  public CustomerTransaction(){}  }
class C{  public static void write(double x){  write(Double.doubleToRawLongBits(x));}  }
class C{  public static Sentence selectSentenceAt(JCas aJcas,int aBegin,int aEnd){  return selectSingleAt(aJcas,Sentence.class,aBegin,aEnd);}  }
class C{  protected AbstractMRMessage pollMessage(){  return null;}  }
class C{  public Element createElement(Document d){  throw new RuntimeException("Not implemented!");}  }
class C{  public boolean isExternalEntity(String name){  Object obj=this.entities.get(name);  return !(obj instanceof java.lang.String);}  }
class C{  public boolean invalidateIt(){  log.info(toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  public TypeComponent(Serializable type){  super(type);}  }
class C{  public static <K>void verifyQueryKeys(LuceneQuery<K,Object> query,K... expectedKeys) throws LuceneQueryException {  Set<K> expectedKeySet=new HashSet<>(Arrays.asList(expectedKeys));  Set<K> actualKeySet=new HashSet<>(query.findKeys());  assertEquals(expectedKeySet,actualKeySet);}  }
class C{  public void renameParameter(String oldAttributeName,String newAttributeName){  String value=keyToValueMap.get(oldAttributeName);  if (value != null) {    keyToValueMap.remove(oldAttributeName);    keyToValueMap.put(newAttributeName,value);  }}  }
class C{  public String invokeStringMethod(String stringObj,String methodName,List<String> methodArgs){  String value="";  try {    CustomConfigMethod configMethodDef=getCustomConfigMethod(methodName);    if (configMethodDef == null) {      logger.error("Couldn't find a string manipulation function with name {}",methodName);      return null;    }    logger.debug("Invoking string method on string: {}",stringObj);    logger.debug("Method: {} with method args: {}",configMethodDef.getName(),methodArgs);    value=configMethodDef.invoke(stringObj,methodArgs);  } catch (  Exception e) {    logger.error("Exception while invoking string method-",e);  }  return value;}  }
class C{  public ToggleLineWrapAction(Application app,@Nullable View view){  super(app,view);  labels.configureAction(this,ID);  setPropertyName("lineWrap");}  }
class C{  public boolean isSetUpdateTime(){  return EncodingUtils.testBit(__isset_bitfield,__UPDATETIME_ISSET_ID);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  CounterNode remove(List<String> hierarchyElements){  CounterNode cur=this;  String keyToRemove=hierarchyElements.remove(hierarchyElements.size() - 1);  for (  String element : hierarchyElements) {    cur=cur.children.get(element);    if (cur == null) {      break;    }  }  CounterNode removed=null;  if (cur != null) {    removed=cur.children.remove(keyToRemove);  }  return removed;}  }
class C{  private NameIDType createIssuer(){  NameIDType issuer=_assertionFactory.createNameIDType();  issuer.setFormat(ISSUER_FORMAT);  issuer.setValue(ISSUER);  return issuer;}  }
class C{  public boolean isTypeNameCompleted(boolean allowSimpleTypeRefs){  FullMemberReference ref=nodeAsFullMemberReference();  if (ref != null) {    if (allowSimpleTypeRefs) {      if (ref.moduleNameSet() && !ref.getModuleName().contains("/")) {        if (lastCharOneOf(".#")) {          return true;        }        return ref.typeNameSet();      }    }    if (ref.typeNameSet()) {      if (lastCharOneOf(".#")) {        return true;      }      return ref.memberNameSet();    }  }  return false;}  }
class C{  public synchronized void addVisualizableErrorListener(VisualizableErrorListener vel){  m_visualizableErrorListeners.add(vel);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  @Override public synchronized void connect() throws SQLException {  super.connect();  String timeZone="00:00";  try {    String SQL="alter session set TIME_ZONE='" + timeZone + "'";    if (logger.isDebugEnabled()) {      logger.debug("Setting timezone to " + timeZone);      logger.debug("With the following SQL : " + SQL);    }    executeUpdate(SQL);  } catch (  SQLException e) {    logger.warn("Unable to set timezone");  }}  }
class C{  @Interruptible public void createFinalExceptionTable(IR ir){  if (ir.hasReachableExceptionHandlers()) {    eTable=OptExceptionTable.encode(ir);  }}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public List<NamedRelatedResourceRep> listByStoragePool(URI storagePoolId){  StorageTierList response=client.get(StorageTierList.class,PathConstants.STORAGE_TIER_BY_STORAGE_POOL,storagePoolId);  return defaultList(response.getStorageTiers());}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public void exiting(String sourceClass,String sourceMethod,Object result){  logp(Level.FINER,sourceClass,sourceMethod,"RETURN {0}",result);}  }
class C{  private void saveAll(){  StringBuilder targetLayout=new StringBuilder();  ArrayList<String> existingImages=new ArrayList<String>();  boolean hasValidTargets=false;  for (int i=mTargetOffset + 1; i <= mTargetOffset + mMaxTargets; i++) {    TargetInfo info=mTargetStore.get(i);    String uri=info.uri;    if (info.iconSource != null) {      existingImages.add(info.iconSource);    }    if (!TextUtils.equals(uri,GlowPadView.EMPTY_TARGET)) {      try {        Intent intent=Intent.parseUri(info.uri,0);        intent.removeExtra(GlowPadView.ICON_RESOURCE);        intent.removeExtra(GlowPadView.ICON_FILE);        if (info.iconType != null) {          intent.putExtra(info.iconType,info.iconSource);        }        if (GlowPadView.ICON_RESOURCE.equals(info.iconType) && info.packageName != null) {          intent.putExtra(GlowPadView.ICON_PACKAGE,info.packageName);        } else {          intent.removeExtra(GlowPadView.ICON_PACKAGE);        }        uri=intent.toUri(0);        hasValidTargets=true;      } catch (      URISyntaxException e) {        Log.w(TAG,"Invalid uri " + info.uri + " on save, ignoring");        uri=GlowPadView.EMPTY_TARGET;      }    }    if (targetLayout.length() > 0) {      targetLayout.append("|");    }    targetLayout.append(uri);  }  final String targets=hasValidTargets ? targetLayout.toString() : null;  Settings.System.putString(mActivity.getContentResolver(),Settings.System.LOCKSCREEN_TARGETS,targets);  for (  File image : mActivity.getFilesDir().listFiles()) {    if (image.getName().startsWith("lockscreen_") && !existingImages.contains(image.getAbsolutePath())) {      image.delete();    }  }}  }
class C{  public boolean replaceKey(String oldKey,String newKey){  if (!this.keyed.containsKey(oldKey) || this.keyed.containsKey(newKey)) {    return false;  }  VALUE oldVal=this.keyed.get(oldKey);  this.keyed.remove(oldKey);  this.keyed.put(newKey,oldVal);  return true;}  }
class C{  public double sqDifference(int index,double val1,double val2){  double val=difference(index,val1,val2);  return val * val;}  }
class C{  protected void close() throws SQLException {  handleClose();}  }
class C{  public char read() throws IOException {  int ch=this.currentReader.pbReader.read();  while (ch < 0) {    if (this.readers.empty()) {      throw new IOException("Unexpected EOF");    }    this.currentReader.pbReader.close();    this.currentReader=(StackedReader)this.readers.pop();    ch=this.currentReader.pbReader.read();  }  return (char)ch;}  }
class C{  public void updateValue(Column column,RowId rowId,Object value) throws IOException {  Object[] row=new Object[_columns.size()];  Arrays.fill(row,Column.KEEP_VALUE);  column.setRowValue(row,value);  updateRow(rowId,row);}  }
class C{  public double distanceSq(final MutableInt2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  public TupleTableConfig(final String table,final String rowKeyField,final String timestampField){  super(table);  this.tupleRowKeyField=rowKeyField;  this.tupleTimestampField=timestampField;  this.columnFamilies=new HashMap<String,Set<String>>();}  }
class C{  @Override public boolean isValidSecondaryFacing(int dir){  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Response addMember(String roomName,String jid){  return restClient.post("chatrooms/" + roomName + "/members/"+ jid,null,new HashMap<String,String>());}  }
class C{  public JavaGenerator(){  this(new JavaTransformFactory());}  }
class C{  public AMM(double lambda,int classBudget){  super(lambda,classBudget);  setEpochs(10);}  }
class C{  public boolean isAddressWatched(Address address){  Script script=ScriptBuilder.createOutputScript(address);  return isWatchedScript(script);}  }
class C{  Object[] handledObjects(){  return handles.entries;}  }
class C{  public void clear(){  m_Output.setText("");}  }
class C{  public char[] GetSuffix(int len){  char[] ret=new char[len];  if ((bufpos + 1) >= len)   System.arraycopy(buffer,bufpos - len + 1,ret,0,len); else {    System.arraycopy(buffer,bufsize - (len - bufpos - 1),ret,0,len - bufpos - 1);    System.arraycopy(buffer,0,ret,len - bufpos - 1,bufpos + 1);  }  return ret;}  }
class C{  public Type create(){  if (mDimZ > 0) {    if ((mDimX < 1) || (mDimY < 1)) {      throw new RSInvalidStateException("Both X and Y dimension required when Z is present.");    }    if (mDimFaces) {      throw new RSInvalidStateException("Cube maps not supported with 3D types.");    }  }  if (mDimY > 0) {    if (mDimX < 1) {      throw new RSInvalidStateException("X dimension required when Y is present.");    }  }  if (mDimFaces) {    if (mDimY < 1) {      throw new RSInvalidStateException("Cube maps require 2D Types.");    }  }  if (mYuv != 0) {    if ((mDimZ != 0) || mDimFaces || mDimMipmaps) {      throw new RSInvalidStateException("YUV only supports basic 2D.");    }  }  int id=mRS.nTypeCreate(mElement.getID(mRS),mDimX,mDimY,mDimZ,mDimMipmaps,mDimFaces,mYuv);  Type t=new Type(id,mRS);  t.mElement=mElement;  t.mDimX=mDimX;  t.mDimY=mDimY;  t.mDimZ=mDimZ;  t.mDimMipmaps=mDimMipmaps;  t.mDimFaces=mDimFaces;  t.mDimYuv=mYuv;  t.calcElementCount();  return t;}  }
class C{  public void unhighlight(OMGraphic omg){  VPFFeatureInfoHandler vfih=warehouse.getFeatInfoHandler();  if (vfih != null && vfih.shouldPaintHighlight(omg)) {    super.unhighlight(omg);  }}  }
class C{  static void errorUnexpectedCDATA(String systemID,int lineNr) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"No CDATA section is expected here");}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void terminate(){  if (sLogger.isActivated()) {    sLogger.info("Terminate the IMDN manager");  }  mBuffer.close();}  }
class C{  void recomposeTemplates(ElemTemplate template){  m_templateList.setTemplate(template);}  }
class C{  public Matrix4x3d shadow(Vector4dc light,Matrix4x3dc planeTransform){  return shadow(light,planeTransform,this);}  }
class C{  public FixedMillisecond(){  this(System.currentTimeMillis());}  }
class C{  void addToPanel(JRadioButton b,int i){  if (i == 1) {    add(b);  }}  }
class C{  private static int checkIdentifier(final String signature,int pos){  if (!Character.isJavaIdentifierStart(getChar(signature,pos))) {    throw new IllegalArgumentException(signature + ": identifier expected at index " + pos);  }  ++pos;  while (Character.isJavaIdentifierPart(getChar(signature,pos))) {    ++pos;  }  return pos;}  }
class C{  @Override protected void moveRollingStock(RouteLocation current,RouteLocation next){  if (current == getRouteLocation()) {    if (getConsist() == null || getConsist().isLead(this)) {      if (getRouteLocation() != getRouteDestination() && getTrain() != null && !isBunit() && getTrain().getLeadEngine() != this) {        if (((getTrain().getSecondLegStartLocation() == current && (getTrain().getSecondLegOptions() & Train.CHANGE_ENGINES) == Train.CHANGE_ENGINES)) || ((getTrain().getThirdLegStartLocation() == current && (getTrain().getThirdLegOptions() & Train.CHANGE_ENGINES) == Train.CHANGE_ENGINES))) {          log.debug("New lead locomotive ({}) for train ({})",toString(),getTrain().getName());          getTrain().setLeadEngine(this);          getTrain().createTrainIcon(current);        }      }    }  }  super.moveRollingStock(current,next);}  }
class C{  private void prettyPrintMatrixBlock(MatrixBlock mb,int rowIndex,int colIndex){  if (rowIndex <= 0 && colIndex <= 0) {    for (int i=0; i < min(mb.getNumRows(),DISPLAY_MAX_ROWS); i++) {      for (int j=0; j < min(mb.getNumColumns(),DISPLAY_MAX_COLUMNS); j++) {        System.out.format("%.4f\t",mb.quickGetValue(i,j));      }      System.out.println();    }    if (mb.getNumRows() > DISPLAY_MAX_ROWS || mb.getNumColumns() > DISPLAY_MAX_COLUMNS) {      System.out.format("WARNING: DML matrix/vector is too large to display on the screen." + "\nOnly a snapshot of %d row(s) and %d column(s) is being displayed.\n",min(mb.getNumRows(),DISPLAY_MAX_ROWS),min(mb.getNumColumns(),DISPLAY_MAX_COLUMNS));    }  } else   if (rowIndex >= 0 && colIndex >= 0) {    System.out.format("%.4f\n",mb.quickGetValue(rowIndex - 1,colIndex - 1));  } else   if (rowIndex >= 0) {    for (int j=0; j < min(mb.getNumColumns(),DISPLAY_MAX_COLUMNS); j++) {      System.out.format("%.4f\t",mb.quickGetValue(rowIndex - 1,j));    }    System.out.println();    if (mb.getNumColumns() > DISPLAY_MAX_COLUMNS) {      System.out.format("WARNING: the row of given DML matrix/vector is too large to display on the screen." + "\nOnly a snapshot of %d column(s) is being displayed.\n",min(mb.getNumColumns(),DISPLAY_MAX_COLUMNS));    }  } else   if (colIndex >= 0) {    for (int i=0; i < min(mb.getNumRows(),DISPLAY_MAX_ROWS); i++) {      System.out.format("%.4f\t",mb.quickGetValue(i,colIndex - 1));      System.out.println();    }    if (mb.getNumRows() > DISPLAY_MAX_ROWS) {      System.out.format("WARNING: the column of given DML matrix/vector is too large to display on the screen." + "\nOnly a snapshot of %d row(s) is being displayed.\n",min(mb.getNumRows(),DISPLAY_MAX_ROWS));    }  }}  }
class C{  public static int dehexchar(char hex){  if (hex >= '0' && hex <= '9') {    return hex - '0';  } else   if (hex >= 'A' && hex <= 'F') {    return hex - 'A' + 10;  } else   if (hex >= 'a' && hex <= 'f') {    return hex - 'a' + 10;  } else {    return -1;  }}  }
class C{  public int hashCode(){  long start=getStartMillis();  long end=getEndMillis();  int result=97;  result=31 * result + ((int)(start ^ (start >>> 32)));  result=31 * result + ((int)(end ^ (end >>> 32)));  result=31 * result + getChronology().hashCode();  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:41.323 -0500",hash_original_method="1B6C09AD0427EF95355AB3C916EF6822",hash_generated_method="293BBAAE63E6421CC2C1A13B172ADBFA") public String checkSize(int actual){  if (actual < minimumSize) {    return "expected a minimial record size of " + minimumSize + " for "+ this+ " but received "+ actual;  }  if (maximumSize == 0) {    return null;  }  if (actual > maximumSize) {    return "expected a maximum record size of " + maximumSize + " for "+ this+ " but received "+ actual;  }  return null;}  }
class C{  public boolean start(float velocityX,float velocityY){  if (mRunning) {    return false;  }  mLastRunTime=NEVER;  mVelocityX=velocityX;  mVelocityY=velocityY;  mStop=false;  mRunning=true;  mHeader.post(this);  return true;}  }
class C{  static boolean familyNameOK(java.awt.Frame frame,String type,String family,Iterator<String> it){  if (family == null || family.length() == 0) {    JOptionPane.showMessageDialog(frame,Bundle.getMessage("EnterFamilyName"),Bundle.getMessage("WarningTitle"),JOptionPane.WARNING_MESSAGE);    return false;  }  while (it.hasNext()) {    if (family.equals(it.next())) {      JOptionPane.showMessageDialog(frame,java.text.MessageFormat.format(Bundle.getMessage("DuplicateFamilyName"),new Object[]{family,type}),Bundle.getMessage("WarningTitle"),JOptionPane.WARNING_MESSAGE);      return false;    }  }  return true;}  }
class C{  private void createStorageAdapter(StorageHADomain adapter,CIMInstance adapterInstance,AccessProfile profile) throws URISyntaxException, IOException {  if (null == adapter) {    adapter=new StorageHADomain();    adapter.setId(URIUtil.createId(StorageHADomain.class));    adapter.setStorageDeviceURI(profile.getSystemId());    adapter.setName(getCIMPropertyValue(adapterInstance,NAME));    adapter.setAdapterName(getCIMPropertyValue(adapterInstance,EMCADAPTERNAME));    adapter.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(_dbClient,adapter));  }  adapter.setNumberofPorts(getCIMPropertyValue(adapterInstance,EMCNUMPORTS));  adapter.setProtocol(getCIMPropertyValue(adapterInstance,EMCPROTOCOL));  adapter.setSlotNumber(getCIMPropertyValue(adapterInstance,EMCSLOTNUMBER));  String[] roles=(String[])adapterInstance.getPropertyValue(ROLES);  adapter.setAdapterType(HADomainType.getHADomainTypeName(roles[0]));  _storageAdapterList.add(adapter);}  }
class C{  public BufferedInputStream(InputStream in){  this(in,defaultBufferSize);}  }
class C{  public String[] contentsfields(){  return contentsfields;}  }
class C{  public void debug(boolean enable){  mDebug=enable;}  }
class C{  public boolean isInterpolatableCommand(char command){  if (command == 'L' || command == 'V' || command == 'H')   return true;  return false;}  }
class C{  private void addSample(final String id,final SampleWrapper sampleWrapper){  this.samples.put(id,sampleWrapper);}  }
class C{  public static boolean findMatchWithWildcard(char[] src,char[] pat){  if (src == null || pat == null)   return false;  if (pat.length == 0)   return false;  if (src.length == 0)   return (pat.length == 0 || (pat.length == 1 && (pat[0] == '*' || pat[0] == '?')));  boolean star=false;  int srcLen=src.length;  int patLen=pat.length;  int srcIdx=0;  int patIdx=0;  for (; srcIdx < srcLen; srcIdx++) {    if (patIdx == patLen) {      if (patLen < (srcLen - srcIdx))       patIdx=0; else       return false;    }    char s=src[srcIdx];    char m=pat[patIdx];switch (m) {case '*':      if (patIdx == pat.length - 1)       return true;    star=true;  ++patIdx;break;case '?':++patIdx;break;default :if (s != m) {if (!star) {if (patLen < (srcLen - srcIdx)) patIdx=0; else return false;}} else {star=false;++patIdx;}break;}}if (patIdx < patLen) return false;return !star;}  }
class C{  private static int moveToTiffEntryWithTag(InputStream is,int length,boolean isLittleEndian,int tagToFind) throws IOException {  if (length < 14) {    return 0;  }  int numEntries=StreamProcessor.readPackedInt(is,2,isLittleEndian);  length-=2;  while (numEntries-- > 0 && length >= 12) {    int tag=StreamProcessor.readPackedInt(is,2,isLittleEndian);    length-=2;    if (tag == tagToFind) {      return length;    }    is.skip(10);    length-=10;  }  return 0;}  }
class C{  public NotificationChain basicSetAnnotationList(ExpressionAnnotationList newAnnotationList,NotificationChain msgs){  ExpressionAnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_CLASS_EXPRESSION__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @SuppressWarnings("unchecked") public void writeLong(long x) throws SQLException {  attribs.add(Long.valueOf(x));}  }
class C{  public static String replaceFunctionParameter(String functionString){  if (!functionString.contains("SQL_")) {    return functionString;  }  char[] input=functionString.toCharArray();  StringBuilder sb=new StringBuilder();  int index;  for (index=0; index < input.length; index++) {    if (input[index] != ' ') {      break;    }  }  for (; ((input[index] >= 'a' && index <= 'z') || (input[index] >= 'A' && input[index] <= 'Z')) && index < input.length; index++) {    sb.append(input[index]);  }  String func=sb.toString().toLowerCase();  if (func.equals("convert") || func.equals("timestampdiff") || func.equals("timestampadd")) {    String paramPrefix;    if (func.equals("timestampdiff") || func.equals("timestampadd")) {      for (; index < input.length; index++) {        if (!Character.isWhitespace(input[index]) && input[index] != '(') {          break;        }      }      if (index == input.length) {        return new String(input);      }      if (index >= input.length - 8) {        return new String(input);      }      paramPrefix=new String(input,index,8);      if (paramPrefix.equals("SQL_TSI_")) {        return new String(input,0,index) + new String(input,index + 8,input.length - (index + 8));      }      return new String(input);    }    int lastCommaIndex=functionString.lastIndexOf(',');    for (index=lastCommaIndex + 1; index < input.length; index++) {      if (!Character.isWhitespace(input[index])) {        break;      }    }    if (index >= input.length - 4) {      return new String(input);    }    paramPrefix=new String(input,index,4);    if (paramPrefix.equals("SQL_")) {      return new String(input,0,index) + new String(input,index + 4,input.length - (index + 4));    }  }  return new String(input);}  }
class C{  public synchronized void add(Node obj){  ArrayList newList=new ArrayList<Node>(this.list);  newList.add(obj);  this.list=Collections.unmodifiableList(newList);  incrementVersion();}  }
class C{  public AntlrParser(ExpressionContext lookup){  this.lookup=lookup;}  }
class C{  public boolean isSequentialFileRead(){  return sequentialFileRead;}  }
class C{  private void loadPathExpression(){  FileDialog loadFileDialog=new FileDialog(control.getShell());  loadFileDialog.setText("Select a File to Load a Path Expression");  loadFileDialog.setFilterPath(Platform.getLocation().toOSString());  String filePath=loadFileDialog.open();  if (filePath == null) {    return;  }  XmlPersistentPathExpression persist=new XmlPersistentPathExpression();  PathMatcherTerm[] list=new PathMatcherTerm[0];  try {    list=persist.load(new URI("file://" + filePath));  } catch (  URISyntaxException e) {    System.err.println("Malformed URI! Check the filename!");    e.printStackTrace();  }  for (  PathMatcherTerm finder : list) {    pathMatchers.add(finder);  }}  }
class C{  public void dismissSelected(){  List<Integer> list=touchListener.getPositionsSelected();  int[] dismissPositions=new int[list.size()];  int height=0;  for (int i=0; i < list.size(); i++) {    int position=list.get(i);    dismissPositions[i]=position;    int auxHeight=touchListener.dismiss(position);    if (auxHeight > 0) {      height=auxHeight;    }  }  if (height > 0) {    touchListener.handlerPendingDismisses(height);  } else {    onDismiss(dismissPositions);    touchListener.resetPendingDismisses();  }  touchListener.returnOldActions();}  }
class C{  private boolean hasChangedAccount(){  return mLastUserAccount == null || mCurrentUserAccount != null && (!mCurrentUserAccount.equalsIgnoreCase(mLastUserAccount));}  }
class C{  public static void enqueueDomainResourceTask(DomainResource domain){  ofy().assertInTransaction();  String tld=domain.getTld();  if (domain.getLaunchNotice() == null) {    getQueue(QUEUE_SUNRISE).add(TaskOptions.Builder.withTag(tld).method(Method.PULL).payload(getCsvLineForSunriseDomain(domain,ofy().getTransactionTime())));  } else {    getQueue(QUEUE_CLAIMS).add(TaskOptions.Builder.withTag(tld).method(Method.PULL).payload(getCsvLineForClaimsDomain(domain,ofy().getTransactionTime())));  }}  }
class C{  public final void testIPv4AddressWithCharSequenceParameter(){  assertNotNull(Validators.iPv4Address("foo"));}  }
class C{  private synchronized void userHasJoined(){  List<String> rooms=joinedRooms.get(connection);  if (rooms == null) {    rooms=new ArrayList<String>();    joinedRooms.put(connection,rooms);  }  rooms.add(room);}  }
class C{  protected boolean leftOn(Vector2 a,Vector2 b,Vector2 p){  return Segment.getLocation(p,a,b) >= 0;}  }
class C{  public AnimatableLengthOrIdentValue(AnimationTarget target,String ident){  super(target);  this.ident=ident;  this.isIdent=true;}  }
class C{  public void renameNodeValue(int nTargetNode,String sValue,String sNewValue){  if (m_bNeedsUndoAction) {    addUndoAction(new RenameValueAction(nTargetNode,sValue,sNewValue));  }  Attribute att=m_Instances.attribute(nTargetNode);  int nCardinality=att.numValues();  ArrayList<String> values=new ArrayList<String>(nCardinality);  for (int iValue=0; iValue < nCardinality; iValue++) {    if (att.value(iValue).equals(sValue)) {      values.add(sNewValue);    } else {      values.add(att.value(iValue));    }  }  replaceAtt(nTargetNode,att.name(),values);}  }
class C{  protected float[] parseKeyPoints(){  String keyPointsString=element.getAttributeNS(null,SVG_KEY_POINTS_ATTRIBUTE);  int len=keyPointsString.length();  if (len == 0) {    return null;  }  List keyPoints=new ArrayList(7);  int i=0, start=0, end;  char c;  outer:   while (i < len) {    while (keyPointsString.charAt(i) == ' ') {      i++;      if (i == len) {        break outer;      }    }    start=i++;    if (i != len) {      c=keyPointsString.charAt(i);      while (c != ' ' && c != ';' && c != ',') {        i++;        if (i == len) {          break;        }        c=keyPointsString.charAt(i);      }    }    end=i++;    try {      float keyPointCoord=Float.parseFloat(keyPointsString.substring(start,end));      keyPoints.add(new Float(keyPointCoord));    } catch (    NumberFormatException nfEx) {      throw new BridgeException(ctx,element,nfEx,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_KEY_POINTS_ATTRIBUTE,keyPointsString});    }  }  len=keyPoints.size();  float[] ret=new float[len];  for (int j=0; j < len; j++) {    ret[j]=((Float)keyPoints.get(j)).floatValue();  }  return ret;}  }
class C{  @Deprecated public void restartService(String nodeId,String name){  UriBuilder builder=client.uriBuilder(CONTROL_RESTART_URL);  addQueryParam(builder,NODE_ID_PARAM,nodeId);  addQueryParam(builder,NAME_PARAM,name);  client.postURI(String.class,builder.build());}  }
class C{  protected boolean isTokenSeparator(char ch){  return (ch == ',');}  }
class C{  @TargetApi(VERSION_CODES.LOLLIPOP) public ListenableFuture<CameraProxy> openCamera2PortabilityDevice(Lifetime requestLifetime,CameraId cameraId){  CameraDeviceKey key=new CameraDeviceKey(ApiType.CAMERA_API_PORTABILITY_API2,cameraId);  return openDevice(requestLifetime,key,mPortabilityCameraActionProvider);}  }
class C{  NodeTextRep toNodeTextRep(){  NodeTextRep result=new NodeTextRep(nodeText,mapping);  if (decomposition != null) {    result.renaming=decomposition.renaming;  }  return result;}  }
class C{  synchronized boolean deliverError(OFErrorMsg error){  if (!requestPending)   return false;  if (pendingXid == error.getXid()) {    if (error.getErrType() == OFErrorType.BAD_REQUEST) {      switchManagerCounters.roleReplyErrorUnsupported.increment();      setSwitchRole(pendingRole,RoleRecvStatus.UNSUPPORTED);    } else {      String msg=String.format("Switch: [%s], State: [%s], " + "Unexpected error %s in respone to our " + "role request for %s.",OFSwitchHandshakeHandler.this.getSwitchInfoString(),OFSwitchHandshakeHandler.this.state.toString(),error.toString(),pendingRole);      throw new SwitchStateException(msg);    }    return true;  }  return false;}  }
class C{  public SurfaceEllipse(SurfaceEllipse source){  super(source);  this.center=source.center;  this.majorRadius=source.majorRadius;  this.minorRadius=source.minorRadius;  this.heading=source.heading;  this.intervals=source.intervals;}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case StextPackage.ROOT:    return createRoot();case StextPackage.DEF_ROOT:  return createDefRoot();case StextPackage.STATECHART_ROOT:return createStatechartRoot();case StextPackage.STATE_ROOT:return createStateRoot();case StextPackage.TRANSITION_ROOT:return createTransitionRoot();case StextPackage.STATECHART_SPECIFICATION:return createStatechartSpecification();case StextPackage.STATE_SPECIFICATION:return createStateSpecification();case StextPackage.TRANSITION_SPECIFICATION:return createTransitionSpecification();case StextPackage.STATECHART_SCOPE:return createStatechartScope();case StextPackage.INTERFACE_SCOPE:return createInterfaceScope();case StextPackage.INTERNAL_SCOPE:return createInternalScope();case StextPackage.IMPORT_SCOPE:return createImportScope();case StextPackage.EVENT_DEFINITION:return createEventDefinition();case StextPackage.VARIABLE_DEFINITION:return createVariableDefinition();case StextPackage.OPERATION_DEFINITION:return createOperationDefinition();case StextPackage.TYPE_ALIAS_DEFINITION:return createTypeAliasDefinition();case StextPackage.LOCAL_REACTION:return createLocalReaction();case StextPackage.TRANSITION_REACTION:return createTransitionReaction();case StextPackage.GUARD:return createGuard();case StextPackage.ENTRY_POINT_SPEC:return createEntryPointSpec();case StextPackage.EXIT_POINT_SPEC:return createExitPointSpec();case StextPackage.EVENT_SPEC:return createEventSpec();case StextPackage.REGULAR_EVENT_SPEC:return createRegularEventSpec();case StextPackage.TIME_EVENT_SPEC:return createTimeEventSpec();case StextPackage.BUILTIN_EVENT_SPEC:return createBuiltinEventSpec();case StextPackage.ENTRY_EVENT:return createEntryEvent();case StextPackage.EXIT_EVENT:return createExitEvent();case StextPackage.ALWAYS_EVENT:return createAlwaysEvent();case StextPackage.SIMPLE_SCOPE:return createSimpleScope();case StextPackage.REACTION_TRIGGER:return createReactionTrigger();case StextPackage.DEFAULT_TRIGGER:return createDefaultTrigger();case StextPackage.REACTION_EFFECT:return createReactionEffect();case StextPackage.EVENT_RAISING_EXPRESSION:return createEventRaisingExpression();case StextPackage.EVENT_VALUE_REFERENCE_EXPRESSION:return createEventValueReferenceExpression();case StextPackage.ACTIVE_STATE_REFERENCE_EXPRESSION:return createActiveStateReferenceExpression();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  protected SVGOMFEGaussianBlurElement(){}  }
class C{  private boolean alwaysRefreshZone(){  boolean alwaysRefresh=false;  try {    alwaysRefresh=Boolean.valueOf(ControllerUtils.getPropertyValueFromCoordinator(_coordinator,"controller_ns_zone_refresh_always"));  } catch (  Exception ex) {    _log.warn("Failed to get the values for controller_ns_zone_refresh_always from resource bundle " + ex.getMessage());  }  return alwaysRefresh;}  }
class C{  public void startListening() throws JMSException, SystemException {  if (active)   throw new IllegalStateException("MessageConsumerSession: startListening() called a second time without stopListening() in between");  if (getDestinationName() == null)   throw new JMSException("Please set property 'destination' or 'destinationName' first");  if (factory == null)   throw new JMSException("Please set the ConnectionFactory first");  tm.setStartupTransactionService(true);  tm.init();  tm.setStartupTransactionService(false);  active=true;  startNewThread();  StringBuffer msg=new StringBuffer();  msg.append("MessageConsumerSession configured with [");  msg.append("user=").append(getUser()).append(", ");  msg.append("password=").append(password).append(", ");  msg.append("transactionTimeout=").append(getTransactionTimeout()).append(", ");  msg.append("destination=").append(getDestinationName()).append(", ");  msg.append("notifyListenerOnClose= ").append(getNotifyListenerOnClose()).append(", ");  msg.append("messageSelector=").append(getMessageSelector()).append(", ");  msg.append("daemonThreads=").append(getDaemonThreads()).append(", ");  msg.append("messageListener=").append(getMessageListener()).append(", ");  msg.append("exceptionListener=").append(getExceptionListener()).append(", ");  msg.append("connectionFactory=").append(getAtomikosConnectionFactoryBean());  msg.append("]");  if (LOGGER.isTraceEnabled())   LOGGER.logTrace(msg.toString());}  }
class C{  public static String normalize(String dn){  return normalize(dn,true);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.COMPOSITE_PROCESSOR__TO_CHANNELS:    return ((InternalEList<?>)getToChannels()).basicRemove(otherEnd,msgs);case EipPackage.COMPOSITE_PROCESSOR__FROM_CHANNELS:  return ((InternalEList<?>)getFromChannels()).basicRemove(otherEnd,msgs);case EipPackage.COMPOSITE_PROCESSOR__OWNED_ENDPOINTS:return ((InternalEList<?>)getOwnedEndpoints()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  text.append("SMOreg\n\n");  if (m_weights != null) {    text.append("weights (not support vectors):\n");    for (int i=0; i < m_data.numAttributes(); i++) {      if (i != m_classIndex) {        text.append((m_weights[i] >= 0 ? " + " : " - ") + Utils.doubleToString(Math.abs(m_weights[i]),12,4) + " * ");        if (m_SVM.getFilterType().getSelectedTag().getID() == SMOreg.FILTER_STANDARDIZE) {          text.append("(standardized) ");        } else         if (m_SVM.getFilterType().getSelectedTag().getID() == SMOreg.FILTER_NORMALIZE) {          text.append("(normalized) ");        }        text.append(m_data.attribute(i).name() + "\n");      }    }  } else {    text.append("Support vectors:\n");    for (int i=0; i < m_nInstances; i++) {      if (m_alpha[i] > 0) {        text.append("+" + m_alpha[i] + " * k["+ i+ "]\n");      }      if (m_alphaStar[i] > 0) {        text.append("-" + m_alphaStar[i] + " * k["+ i+ "]\n");      }    }  }  text.append((m_b <= 0 ? " + " : " - ") + Utils.doubleToString(Math.abs(m_b),12,4) + "\n\n");  text.append("\n\nNumber of kernel evaluations: " + m_nEvals);  if (m_nCacheHits >= 0 && m_nEvals > 0) {    double hitRatio=1 - m_nEvals * 1.0 / (m_nCacheHits + m_nEvals);    text.append(" (" + Utils.doubleToString(hitRatio * 100,7,3).trim() + "% cached)");  }  return text.toString();}  }
class C{  public Window(double[] w){  this.w=w.clone();}  }
class C{  public static double angle(Tuple3d a,Tuple3d b){  double dx=b.x - a.x;  double dy=b.y - a.y;  double angle=0.0d;  if (dx == 0.0) {    if (dy == 0.0)     angle=0.0; else     if (dy > 0.0)     angle=Math.PI / 2.0; else     angle=(Math.PI * 3.0) / 2.0;  } else   if (dy == 0.0) {    if (dx > 0.0)     angle=0.0; else     angle=Math.PI;  } else {    if (dx < 0.0)     angle=Math.atan(dy / dx) + Math.PI; else     if (dy < 0.0)     angle=Math.atan(dy / dx) + (2 * Math.PI); else     angle=Math.atan(dy / dx);  }  return angle;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static boolean isXML11ValidNCName(String ncName){  int length=ncName.length();  if (length == 0)   return false;  int i=1;  char ch=ncName.charAt(0);  if (!isXML11NCNameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=ncName.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCNameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=ncName.charAt(i);    if (!isXML11NCName(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=ncName.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCName(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  public static String sanitizeProcOrFuncName(String src){  if ((src == null) || (src.equals("%"))) {    return null;  }  return src;}  }
class C{  public static long nextPow2Long(long x){  --x;  x|=x >>> 1;  x|=x >>> 2;  x|=x >>> 4;  x|=x >>> 16;  x|=x >>> 32;  return ++x;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void loadCommandLineDefs(String[] cl) throws IOException {  StringBuffer sb=new StringBuffer();  for (int i=0; i < cl.length; ++i)   sb.append(cl[i]).append("\n");  load(new ByteArrayInputStream(sb.toString().getBytes()));}  }
class C{  public static String encodePassword(String password,String algorithm){  byte[] unencodedPassword=password.getBytes();  MessageDigest md=null;  try {    md=MessageDigest.getInstance(algorithm);  } catch (  Exception e) {    return password;  }  md.reset();  md.update(unencodedPassword);  byte[] encodedPassword=md.digest();  StringBuffer buf=new StringBuffer();  for (int i=0; i < encodedPassword.length; i++) {    if ((encodedPassword[i] & 0xff) < 0x10) {      buf.append("0");    }    buf.append(Long.toString(encodedPassword[i] & 0xff,16));  }  return buf.toString();}  }
class C{  void registerDelegate(String path,ProviderDelegate<T> delegate){  int existingCode=mUriMatcher.match(Uri.parse("content://" + Contracts.CONTENT_AUTHORITY + "/"+ path));  if (existingCode != UriMatcher.NO_MATCH) {    throw new IllegalStateException("Path '" + path + "' is already registered to be handled by '"+ mDelegates.get(existingCode).toString()+ "'.");  }  int code=mCodeGenerator.getAndIncrement();  mUriMatcher.addURI(Contracts.CONTENT_AUTHORITY,path,code);  mDelegates.put(code,delegate);}  }
class C{  static void dump(Font font){  System.out.println("Family=" + font.getFamily());  System.out.println("FontName=" + font.getFontName());  System.out.println("Name=" + font.getName());  System.out.println("PSName=" + font.getPSName());  System.out.println("Style=" + font.getStyle());  System.out.println("Size=" + font.getSize());  System.out.println("Attributes:");  Map map=font.getAttributes();  Iterator keys=map.keySet().iterator();  while (keys.hasNext()) {    Object key=keys.next();    Object value=map.get(key);    System.out.println(" - " + key + "="+ value);  }  System.out.println(font);}  }
class C{  private static double[] nextPointAroundLine(double lat1,double lon1,double lat2,double lon2){  double x1=lon1;  double x2=lon2;  double y1=lat1;  double y2=lat2;  double minX=Math.min(x1,x2);  double maxX=Math.max(x1,x2);  double minY=Math.min(y1,y2);  double maxY=Math.max(y1,y2);  if (minX == maxX) {    return new double[]{nextLatitudeBetween(minY,maxY),nextLongitudeNear(minX,0.01 * (maxY - minY))};  } else   if (minY == maxY) {    return new double[]{nextLatitudeNear(minY,0.01 * (maxX - minX)),nextLongitudeBetween(minX,maxX)};  } else {    double x=nextLongitudeBetween(minX,maxX);    double y=(y1 - y2) / (x1 - x2) * (x - x1) + y1;    if (Double.isFinite(y) == false) {      y=Math.copySign(90,x1);    }    double delta=(maxY - minY) * 0.01;    y=Math.min(90,y);    y=Math.max(-90,y);    return new double[]{nextLatitudeNear(y,delta),x};  }}  }
class C{  public double noise(double x,double frequency,double amplitude){  return this.noise(x,0,0,frequency,amplitude);}  }
class C{  public ActiveMQConnectionMetaData(final Version serverVersion){  this.serverVersion=serverVersion;}  }
class C{  public boolean isSubscibe(){  return parseBoolean(getFieldValue(ConfigureNodeFields.subscribe));}  }
class C{  public XYStepAreaRenderer(int type,XYToolTipGenerator toolTipGenerator,XYURLGenerator urlGenerator){  super();  setBaseToolTipGenerator(toolTipGenerator);  setURLGenerator(urlGenerator);  if (type == AREA) {    this.plotArea=true;  } else   if (type == SHAPES) {    this.shapesVisible=true;  } else   if (type == AREA_AND_SHAPES) {    this.plotArea=true;    this.shapesVisible=true;  }  this.showOutline=false;  this.stepPoint=1.0;}  }
class C{  private void transferEntry(long index,Entry entry,Segment compactSegment){  compactSegment.append(entry);  if (!segment.isLive(index)) {    compactSegment.release(index);  }}  }
class C{  public void removeOfferListener(OfferListener offerListener){synchronized (offerListeners) {    offerListeners.remove(offerListener);  }}  }
class C{  private void populateData(final Long rolloutId){  if (rolloutId == null) {    return;  }  editRolloutEnabled=Boolean.TRUE;  rolloutForEdit=rolloutManagement.findRolloutById(rolloutId);  rolloutName.setValue(rolloutForEdit.getName());  description.setValue(rolloutForEdit.getDescription());  distributionSet.setValue(DistributionSetIdName.generate(rolloutForEdit.getDistributionSet()));  final List<RolloutGroup> rolloutGroups=rolloutForEdit.getRolloutGroups();  setThresholdValues(rolloutGroups);  setActionType(rolloutForEdit);  if (rolloutForEdit.getStatus() != RolloutStatus.READY) {    disableRequiredFieldsOnEdit();  }  noOfGroups.setEnabled(false);  targetFilterQuery.setValue(rolloutForEdit.getTargetFilterQuery());  removeComponent(1,2);  targetFilterQueryCombo.removeValidator(nullValidator);  addComponent(targetFilterQuery,1,2);  targetFilterQuery.addValidator(nullValidator);  totalTargetsCount=targetManagement.countTargetByTargetFilterQuery(rolloutForEdit.getTargetFilterQuery());  totalTargetsLabel.setValue(getTotalTargetMessage());  totalTargetsLabel.setVisible(true);  window.setOrginaleValues();}  }
class C{  public void removeAndReleaseAll(boolean reduce) throws InterruptedException {  for (  String name : names()) {    UniversalDataSource ds=remove(name);    try {      try {        if (reduce) {          ds.reduce();        }      }  finally {        ds.release();      }    } catch (    ReplicatorException e) {      logger.warn("Error while releasing data source: name=" + name,e);    }  }}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public fieldset addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MSmartBrowseField").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  private void loadConfiguration(){  configurationFile=getConfigFile();  configurationLoader=HoconConfigurationLoader.builder().setFile(configurationFile).build();  try {    if (!configurationFile.exists()) {      configurationFile.createNewFile();      config=configurationLoader.load();      config.setComment("This contains settings for MCStats: http://mcstats.org");      config.getNode("mcstats.guid").setValue(UUID.randomUUID().toString());      config.getNode("mcstats.opt-out").setValue(false);      config.getNode("mcstats.debug").setValue(false);      configurationLoader.save(config);    } else {      config=configurationLoader.load();    }    guid=config.getNode("mcstats.guid").getString();    debug=config.getNode("mcstats.debug").getBoolean();  } catch (  final IOException e) {    MainUtil.handleError(e);  }}  }
class C{  public boolean close(final boolean askForConfirmation){  if (changed) {    ProcessLocation loc=process.getProcessLocation();    String locName;    if (loc != null) {      locName=loc.getShortName();    } else {      locName="unnamed";    }switch (SwingTools.showConfirmDialog("save",ConfirmDialog.YES_NO_CANCEL_OPTION,locName)) {case ConfirmDialog.YES_OPTION:      SaveAction.save(getProcess());    return !isChanged();case ConfirmDialog.NO_OPTION:  if (askForConfirmation) {    if (RapidMinerGUI.getMainFrame().getProcessState() == Process.PROCESS_STATE_RUNNING || RapidMinerGUI.getMainFrame().getProcessState() == Process.PROCESS_STATE_PAUSED) {      if (SwingTools.showConfirmDialog("close_running_process",ConfirmDialog.YES_NO_OPTION) == ConfirmDialog.NO_OPTION) {        return false;      }    }  }if (getProcessState() != Process.PROCESS_STATE_STOPPED) {synchronized (processThread) {    processThread.stopProcess();  }}return true;default :return false;}} else {return true;}}  }
class C{  public void postOnWallWithImage(Context context,String tagIdSelected,String latitude,String longitude,String message,String imagepath,String groupId,String keywords){  Intent intent=new Intent(context,WallPostIntentService.class);  intent.setAction(ACTION_POST);  intent.putExtra(HttpConstants.POST_MESSAGE,message);  intent.putExtra(HttpConstants.POST_LATITUDE,latitude);  intent.putExtra(HttpConstants.POST_LONGITUDE,longitude);  intent.putExtra(HttpConstants.POST_TAG_ID,tagIdSelected);  intent.putExtra(HttpConstants.GROUP_ID,groupId);  intent.putExtra(HttpConstants.KEYWORDS,keywords);  intent.putExtra(HttpConstants.POST_CITY,mCityName.split(",")[0]);  intent.putExtra(HttpConstants.POST_ADDRESS,mAddressName);  intent.putExtra(HttpConstants.POST_COUNTRY,mCountryName);  intent.putExtra(AppConstants.WALL_IMAGE_NAME,imagepath);  context.startService(intent);  this.finish();}  }
class C{  public Duration plus(ReadableDuration amount){  if (amount == null) {    return this;  }  return withDurationAdded(amount.getMillis(),1);}  }
class C{  @Override public DataTable compute(AppContext ctx,ProjectAnalysisJob job,Integer maxResults,Integer startIndex,boolean lazy) throws ComputingException, InterruptedException {  long start=System.currentTimeMillis();  logger.info("Starting preview compute for job " + job.getId());  DashboardAnalysis analysis;  try {    analysis=buildDashboardAnalysis(ctx,job,lazy);  } catch (  Exception e) {    throw new ComputingException(e);  }  DataMatrix datamatrix=ComputingService.INSTANCE.glitterAnalysis(analysis,null);  if (lazy && (datamatrix == null)) {    throw new NotInCacheException("Lazy preview, analysis " + analysis.getJobId() + "  not in cache");  } else {    job.setRedisKey(datamatrix.getRedisKey());    long stop=System.currentTimeMillis();    logger.info("task=" + this.getClass().getName() + " method=compute"+ " jobid="+ job.getId().getAnalysisJobId()+ " duration="+ (stop - start));    JobStats queryLog=new JobStats(job.getId().getAnalysisJobId(),"AnalysisJobComputer.compute",(stop - start),job.getId().getProjectId());    queryLog.setError(false);    PerfDB.INSTANCE.save(queryLog);    DataTable res=datamatrix.toDataTable(ctx,maxResults,startIndex,false,job.getOptionKeys());    logger.debug("Is result set in REDIS complete? " + res.getFullset());    return res;  }}  }
class C{  protected void registerViewContainerBean(Class<?> clazz){  BeanDefinitionRegistry registry=null;  if (applicationContext instanceof BeanDefinitionRegistry) {    registry=(BeanDefinitionRegistry)applicationContext;  } else   if (applicationContext instanceof ConfigurableApplicationContext) {    ConfigurableListableBeanFactory beanFactory=((ConfigurableApplicationContext)applicationContext).getBeanFactory();    if (beanFactory instanceof BeanDefinitionRegistry)     registry=(BeanDefinitionRegistry)beanFactory;  }  if (registry == null) {    throw new BeanDefinitionStoreException("BeanDefinitionRegistry is not accessible");  }  BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition(ViewContainerRegistrationBean.class);  builder.addPropertyValue("beanClass",clazz);  builder.setScope(UIScopeImpl.VAADIN_UI_SCOPE_NAME);  builder.setRole(BeanDefinition.ROLE_SUPPORT);  AbstractBeanDefinition beanDefinition=builder.getBeanDefinition();  String name=getBeanNameGenerator().generateBeanName(beanDefinition,registry);  registry.registerBeanDefinition(name,beanDefinition);}  }
class C{  @Override public void mapChanged(ColorMap cMap){  palette.build(cMap);  palette.repaint();  palette.invalidate();  revalidate();}  }
class C{  public static void typeface(Activity activity,TypefaceCollection typefaceCollection){  typeface(activity.findViewById(android.R.id.content),typefaceCollection);}  }
class C{  public void readHeader() throws IOException {  if (this.socket != null) {    final ByteBuffer cb=getCommBuffer();synchronized (cb) {      fetchHeader();      final int type=cb.getInt();      final int numParts=cb.getInt();      final int txid=cb.getInt();      cb.clear();      if (!MessageType.validate(type)) {        throw new IOException(LocalizedStrings.ChunkedMessage_INVALID_MESSAGE_TYPE_0_WHILE_READING_HEADER.toLocalizedString(Integer.valueOf(type)));      }      this.msgType=type;      this.numberOfParts=numParts;      this.transactionId=txid;    }  } else {    throw new IOException(LocalizedStrings.ChunkedMessage_DEAD_CONNECTION.toLocalizedString());  }}  }
class C{  @Override protected final void finalize() throws Throwable {  try {    close();  } catch (  IOException e1) {    try {      if (self == this) {        super.close();      }    } catch (    IOException e2) {    }  } finally {    super.finalize();  }}  }
class C{  public final Matrix transpose(){  try {    return new Matrix(m_Matrix.transpose().getArrayCopy());  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void testDeployWarDefinedWithRelativePath() throws Exception {  File artifactDir=new File(getTestData().targetDir).getParentFile();  File artifactFile=new File(artifactDir,"simple.war").getAbsoluteFile();  Copy copyTask=(Copy)new AntUtils().createProject().createTask("copy");  copyTask.setTofile(artifactFile);  copyTask.setFile(new File(getTestData().getTestDataFileFor("simple-war")));  copyTask.execute();  Deployable war=new DefaultDeployableFactory().createDeployable(getContainer().getId(),artifactFile.getAbsolutePath(),DeployableType.WAR);  getLocalContainer().getConfiguration().addDeployable(war);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/simple/index.jsp");  startAndStop(warPingURL);}  }
class C{  protected AbstractCaseClauseImpl(){  super();}  }
class C{  public boolean isClip(){  return this.clip;}  }
class C{  protected void load(Reader reader) throws IOException {  BufferedReader lineReader=null;  try {    lineReader=new BufferedReader(reader);    String line=lineReader.readLine();    if (line == null) {      throw new IOException("trail missing header line");    }    String[] tokens=line.split("\\s+");    width=Integer.parseInt(tokens[0]);    height=Integer.parseInt(tokens[1]);    map=new State[width][height];    int i=0;    int j=0;    while ((line=lineReader.readLine()) != null) {      i=0;      while (i < line.length()) {        char c=line.charAt(i);        if (c == ' ') {          map[i][j]=State.EMPTY;        } else         if (c == '#') {          map[i][j]=State.FOOD;          totalFood++;        } else         if (c == '.') {          map[i][j]=State.TRAIL;        } else {          throw new IllegalStateException();        }        i++;      }      while (i < width) {        map[i][j]=State.EMPTY;        i++;      }      j++;    }    while (j < height) {      i=0;      while (i < width) {        map[i][j]=State.EMPTY;        i++;      }      j++;    }  }  finally {    if (lineReader != null) {      lineReader.close();    }  }}  }
class C{  public boolean isClosed(){synchronized (closeLock) {    return closed;  }}  }
class C{  public static String time2Str(Date d){  return date2Str(d,TIME_FORMAT);}  }
class C{  public void onMouseEntered(MapMouseEvent ev){}  }
class C{  public void write(int c){  try {synchronized (lock) {      ensureOpen();      out.write(c);    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void selectClipPath(){  mPSStream.println(mClipOpStr);}  }
class C{  public int height(){  return height(root);}  }
class C{  public void addZoomListener(ZoomListener listener){  if (mPinchZoom != null) {    mPinchZoom.addZoomListener(listener);  }}  }
class C{  public static String convertLineEndings(final String input){  return input.replaceAll("(\r\n)|\r|\n",LS);}  }
class C{  @Override public void writeBatch() throws IOException {  if (getInstances() == null) {    throw new IOException("No instances to save");  }  if (getRetrieval() == INCREMENTAL) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  setRetrieval(BATCH);  setWriteMode(WRITE);  m_XMLInstances.setInstances(getInstances());  if ((retrieveFile() == null) && (getWriter() == null)) {    System.out.println(m_XMLInstances.toString());    setWriteMode(WAIT);  } else {    PrintWriter outW=new PrintWriter(getWriter());    outW.println(m_XMLInstances.toString());    outW.flush();    outW.close();    setWriteMode(WAIT);    outW=null;    resetWriter();    setWriteMode(CANCEL);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  private void assertTablesInSchema(String schema,String... tableNames){  final SortedSet<String> expected=new TreeSet<>();  final AkibanInformationSchema ais=ddl().getAIS(session());  for (  String name : tableNames) {    final Table table=ais.getTable(schema,name);    assertNotNull(schema + "." + name+ " in AIS",table);    expected.add(name);  }  final SortedSet<String> actual=new TreeSet<>();  Schema schemaObj=ais.getSchema(schema);  if (schemaObj != null) {    actual.addAll(schemaObj.getTables().keySet());  }  assertEquals("tables in: " + schema,expected,actual);}  }
class C{  public static void main(String[] args){  try {  } catch (  Exception e) {  }  frame=new JFrame();  frame.setTitle("LGoodDatePicker Demo " + InternalUtilities.getProjectVersionString());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  panel=new DemoPanel();  frame.getContentPane().add(panel);  createDemoButtons();  DatePickerSettings dateSettings;  int row=rowMultiplier;  datePicker1=new DatePicker();  panel.panel1.add(datePicker1,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 1, Default Settings:");  dateSettings=new DatePickerSettings();  datePicker2=new DatePicker(dateSettings);  dateSettings.setHighlightPolicy(new SampleHighlightPolicy());  panel.panel1.add(datePicker2,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 2, Highlight Policy:");  dateSettings=new DatePickerSettings();  datePicker=new DatePicker(dateSettings);  dateSettings.setVetoPolicy(new SampleDateVetoPolicy());  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 3, Veto Policy:");  dateSettings=new DatePickerSettings();  datePicker=new DatePicker(dateSettings);  dateSettings.setHighlightPolicy(new SampleHighlightPolicy());  dateSettings.setVetoPolicy(new SampleDateVetoPolicy());  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 4, Both Policies:");  dateSettings=new DatePickerSettings();  int newHeight=(int)(dateSettings.getSizeDatePanelMinimumHeight() * 1.6);  int newWidth=(int)(dateSettings.getSizeDatePanelMinimumWidth() * 1.6);  dateSettings.setSizeDatePanelMinimumHeight(newHeight);  dateSettings.setSizeDatePanelMinimumWidth(newWidth);  datePicker=new DatePicker(dateSettings);  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 5, Change Calendar Size:");  dateSettings=new DatePickerSettings();  dateSettings.setColor(DateArea.BackgroundOverallCalendarPanel,Color.green);  dateSettings.setColorBackgroundWeekdayLabels(Color.orange,true);  dateSettings.setColor(DateArea.BackgroundMonthAndYearMenuButtons,Color.yellow);  dateSettings.setColor(DateArea.BackgroundTodayButton,Color.yellow);  dateSettings.setColor(DateArea.BackgroundClearButton,Color.yellow);  dateSettings.setColor(DateArea.BackgroundMonthAndYearNavigationButtons,Color.cyan);  datePicker=new DatePicker(dateSettings);  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 6, Change Colors:");  URL dateImageURL=FullDemo.class.getResource("/images/datepickerbutton1.png");  Image dateExampleImage=Toolkit.getDefaultToolkit().getImage(dateImageURL);  ImageIcon dateExampleIcon=new ImageIcon(dateExampleImage);  dateSettings=new DatePickerSettings();  datePicker=new DatePicker(dateSettings);  datePicker.setDateToToday();  JButton datePickerButton=datePicker.getComponentToggleCalendarButton();  datePickerButton.setText("");  datePickerButton.setIcon(dateExampleIcon);  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 7, Custom Icon:");  dateSettings=new DatePickerSettings();  dateSettings.setFontValidDate(new Font("Monospaced",Font.ITALIC | Font.BOLD,17));  dateSettings.setColor(DateArea.DatePickerTextValidDate,new Color(0,100,0));  datePicker=new DatePicker(dateSettings);  datePicker.setDateToToday();  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 8, Custom Font:");  dateSettings=new DatePickerSettings();  dateSettings.setFormatForDatesCommonEra("yyyy/MM/dd");  dateSettings.setFormatForDatesBeforeCommonEra("uuuu/MM/dd");  datePicker=new DatePicker(dateSettings);  datePicker.setDateToToday();  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 9, Custom Date Format:");  dateSettings=new DatePickerSettings();  dateSettings.setFormatForDatesCommonEra("d MMM yyyy");  dateSettings.setFormatForDatesBeforeCommonEra("d MMM uuuu");  datePicker=new DatePicker(dateSettings);  datePicker.setDateToToday();  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 10, Another Custom Date Format:");  dateSettings=new DatePickerSettings();  dateSettings.setFirstDayOfWeek(DayOfWeek.MONDAY);  datePicker=new DatePicker(dateSettings);  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 11, Set First Day Of Week (Mon):");  dateSettings=new DatePickerSettings();  dateSettings.setWeekNumbersDisplayed(true,true);  datePicker=new DatePicker(dateSettings);  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 12, Show Week Numbers:");  dateSettings=new DatePickerSettings();  dateSettings.setAllowEmptyDates(false);  datePicker=new DatePicker(dateSettings);  datePicker.addDateChangeListener(new SampleDateChangeListener("datePicker13 (Disallow Empty Dates or Null), "));  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 13, Disallow Empty Dates:");  dateSettings=new DatePickerSettings();  dateSettings.setAllowKeyboardEditing(false);  datePicker=new DatePicker(dateSettings);  datePicker.setDateToToday();  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 14, Disallow Keyboard Editing:");  ArrayList<CalendarBorderProperties> borderProperties=new ArrayList<CalendarBorderProperties>();  borderProperties.add(new CalendarBorderProperties(new Point(1,1),new Point(5,5),Color.YELLOW,10));  borderProperties.add(new CalendarBorderProperties(new Point(4,1),new Point(4,1),Color.YELLOW,15));  borderProperties.add(new CalendarBorderProperties(new Point(3,3),new Point(5,5),Color.GREEN,10));  borderProperties.add(new CalendarBorderProperties(new Point(3,3),new Point(3,3),Color.BLUE,1));  borderProperties.add(new CalendarBorderProperties(new Point(5,3),new Point(5,3),Color.BLUE,1));  dateSettings=new DatePickerSettings();  dateSettings.setBorderPropertiesList(borderProperties);  datePicker=new DatePicker(dateSettings);  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 15, Custom Borders:");  dateSettings=new DatePickerSettings();  dateSettings.setWeekNumbersDisplayed(true,true);  dateSettings.setBorderPropertiesList(borderProperties);  datePicker=new DatePicker(dateSettings);  panel.panel1.add(datePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel1,1,(row++ * rowMultiplier),"Date 16, Custom Borders with Week Numbers:");  TimePickerSettings timeSettings;  row=rowMultiplier;  timePicker1=new TimePicker();  panel.panel2.add(timePicker1,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 1, Default Settings:");  timeSettings=new TimePickerSettings();  timeSettings.setDisplayToggleTimeMenuButton(false);  timeSettings.setInitialTimeToNow();  timePicker2=new TimePicker(timeSettings);  panel.panel2.add(timePicker2,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 2, No Buttons:");  timeSettings=new TimePickerSettings();  timeSettings.setDisplayToggleTimeMenuButton(false);  timeSettings.setDisplaySpinnerButtons(true);  timeSettings.setInitialTimeToNow();  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 3, With Spinner Buttons:");  timeSettings=new TimePickerSettings();  timeSettings.setDisplaySpinnerButtons(true);  timeSettings.setInitialTimeToNow();  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 4, With All Buttons:");  timeSettings=new TimePickerSettings();  timeSettings.use24HourClockFormat();  timeSettings.initialTime=LocalTime.of(15,30);  timeSettings.generatePotentialMenuTimes(TimeIncrement.FifteenMinutes,null,null);  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 5, Interval 15 minutes, and 24 hour clock:");  Locale chineseLocale=new Locale("zh");  timeSettings=new TimePickerSettings(chineseLocale);  timeSettings.initialTime=LocalTime.now();  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 6, Localized (to Chinese):");  URL timeIconURL=FullDemo.class.getResource("/images/timepickerbutton1.png");  Image timeExampleImage=Toolkit.getDefaultToolkit().getImage(timeIconURL);  ImageIcon timeExampleIcon=new ImageIcon(timeExampleImage);  timeSettings=new TimePickerSettings();  timeSettings.initialTime=LocalTime.of(15,00);  timePicker=new TimePicker(timeSettings);  JButton timePickerButton=timePicker.getComponentToggleTimeMenuButton();  timePickerButton.setText("");  timePickerButton.setIcon(timeExampleIcon);  Dimension newTimeButtonSize=new Dimension(timeExampleIcon.getIconWidth() + 4,timeExampleIcon.getIconHeight() + 4);  timePickerButton.setPreferredSize(newTimeButtonSize);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 7, Custom Icon:");  dateTimePicker1=new DateTimePicker();  panel.panel2.add(dateTimePicker1,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"DateTimePicker 1, Default settings:");  dateSettings=new DatePickerSettings();  timeSettings=new TimePickerSettings();  dateSettings.setAllowEmptyDates(false);  timeSettings.setAllowEmptyTimes(false);  dateTimePicker2=new DateTimePicker(dateSettings,timeSettings);  panel.panel2.add(dateTimePicker2,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"DateTimePicker 2, Disallow empty dates and times:");  dateTimePicker3=new DateTimePicker();  dateTimePicker3.addDateTimeChangeListener(new SampleDateTimeChangeListener("dateTimePicker3"));  panel.panel2.add(dateTimePicker3,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"DateTimePicker 3, With Change Listener:");  timeSettings=new TimePickerSettings();  timeSettings.setAllowEmptyTimes(false);  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 8, Disallow Empty Times:");  timeSettings=new TimePickerSettings();  timePicker=new TimePicker(timeSettings);  timePicker.addTimeChangeListener(new SampleTimeChangeListener("timePicker7"));  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 9, With a TimeChangeListener:");  timeSettings=new TimePickerSettings();  timeSettings.maximumVisibleMenuRows=20;  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 10, With 20 visible menu rows:");  timeSettings=new TimePickerSettings();  timeSettings.setFormatForDisplayTime("ha");  timeSettings.setFormatForMenuTimes("ha");  timeSettings.initialTime=LocalTime.of(15,00);  timeSettings.generatePotentialMenuTimes(TimeIncrement.OneHour,null,null);  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 11, Custom Format:");  timeSettings=new TimePickerSettings();  timePicker=new TimePicker(timeSettings);  timeSettings.setVetoPolicy(new SampleTimeVetoPolicy());  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 12, With Veto Policy (Only 9a-5p allowed):");  timeSettings=new TimePickerSettings();  timeSettings.setFormatForDisplayTime(PickerUtilities.createFormatterFromPatternString("HH:mm:ss",timeSettings.getLocale()));  timeSettings.setFormatForMenuTimes(PickerUtilities.createFormatterFromPatternString("HH:mm",timeSettings.getLocale()));  timeSettings.initialTime=LocalTime.of(15,00,00);  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 13, Seconds precision (ISO format):");  timeSettings=new TimePickerSettings();  timeSettings.setFormatForDisplayTime(PickerUtilities.createFormatterFromPatternString("HH:mm:ss.SSS",timeSettings.getLocale()));  timeSettings.setFormatForMenuTimes(PickerUtilities.createFormatterFromPatternString("HH:mm",timeSettings.getLocale()));  timeSettings.initialTime=LocalTime.of(15,00,00,999000000);  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 14, Millisecond precision (ISO format):");  timeSettings=new TimePickerSettings();  DateTimeFormatter displayTimeFormatter=DateTimeFormatter.ISO_LOCAL_TIME;  timeSettings.setFormatForDisplayTime(displayTimeFormatter);  timeSettings.setFormatForMenuTimes(PickerUtilities.createFormatterFromPatternString("HH:mm",timeSettings.getLocale()));  timeSettings.initialTime=LocalTime.of(15,00,00,999999999);  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"<html>Time 15, Nanosecond precision:<br/>(ISO format. Use \".\" to type nanoseconds.)</html>");  timeSettings=new TimePickerSettings();  timeSettings.setAllowKeyboardEditing(false);  timePicker=new TimePicker(timeSettings);  panel.panel2.add(timePicker,getConstraints(1,(row * rowMultiplier),1));  panel.addLabel(panel.panel2,1,(row++ * rowMultiplier),"Time 16, Disallow Keyboard Editing:");  int rowMarker=0;  addLocalizedPickerAndLabel(++rowMarker,"Arabic:","ar");  addLocalizedPickerAndLabel(++rowMarker,"Chinese:","zh");  addLocalizedPickerAndLabel(++rowMarker,"Czech:","cs");  addLocalizedPickerAndLabel(++rowMarker,"Danish:","da");  addLocalizedPickerAndLabel(++rowMarker,"Dutch:","nl");  addLocalizedPickerAndLabel(++rowMarker,"English:","en");  addLocalizedPickerAndLabel(++rowMarker,"French:","fr");  addLocalizedPickerAndLabel(++rowMarker,"German:","de");  addLocalizedPickerAndLabel(++rowMarker,"Greek:","el");  addLocalizedPickerAndLabel(++rowMarker,"Hindi:","hi");  addLocalizedPickerAndLabel(++rowMarker,"Italian:","it");  addLocalizedPickerAndLabel(++rowMarker,"Indonesian:","in");  addLocalizedPickerAndLabel(++rowMarker,"Japanese:","ja");  addLocalizedPickerAndLabel(++rowMarker,"Korean:","ko");  addLocalizedPickerAndLabel(++rowMarker,"Polish:","pl");  addLocalizedPickerAndLabel(++rowMarker,"Portuguese:","pt");  addLocalizedPickerAndLabel(++rowMarker,"Romanian:","ro");  addLocalizedPickerAndLabel(++rowMarker,"Russian:","ru");  addLocalizedPickerAndLabel(++rowMarker,"Spanish:","es");  addLocalizedPickerAndLabel(++rowMarker,"Swedish:","sv");  addLocalizedPickerAndLabel(++rowMarker,"Turkish:","tr");  addLocalizedPickerAndLabel(++rowMarker,"Vietnamese:","vi");  DatePickerSettings settings=new DatePickerSettings();  CalendarPanel calendarPanel=new CalendarPanel(settings);  calendarPanel.setSelectedDate(LocalDate.now());  calendarPanel.addCalendarSelectionListener(new SampleCalendarSelectionListener());  calendarPanel.setBorder(new LineBorder(Color.lightGray));  panel.independentCalendarPanel.add(calendarPanel,CC.xy(2,2));  frame.pack();  frame.validate();  int maxWidth=GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width;  int maxHeight=GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().height;  frame.setSize(maxWidth / 4 * 3,maxHeight / 8 * 7);  frame.setLocation(maxWidth / 8,maxHeight / 16);  frame.setVisible(true);}  }
class C{  public static boolean delFileOrFolder(File file){  if (file == null || !file.exists()) {  } else   if (file.isFile())   file.delete(); else   if (file.isDirectory()) {    File[] files=file.listFiles();    if (files != null)     for (    File sonFile : files)     delFileOrFolder(sonFile);    file.delete();  }  return true;}  }
class C{  public static void saveAsImage(int x,int y,int width,int height,String path,CompressFormat compressFormat,int quality) throws FileNotFoundException {  Bitmap bmp=getPixelsFromBuffer(x,y,width,height);  try {    File file=new File(path);    try {      file.createNewFile();    } catch (    IOException e1) {      e1.printStackTrace();    }    FileOutputStream fos=new FileOutputStream(file);    bmp.compress(compressFormat,quality,fos);    try {      fos.flush();    } catch (    IOException e) {      e.printStackTrace();    }    try {      fos.close();    } catch (    IOException e) {      e.printStackTrace();    }  } catch (  FileNotFoundException e) {    throw (e);  }}  }
class C{  public Task<NetworkSystemRestRep> deactivate(URI id){  return doDeactivateWithTask(id);}  }
class C{  public static void evolve(Permutation permutation){  int i=PRNG.nextInt(permutation.size());  int j=PRNG.nextInt(permutation.size() - 1);  if (i == j) {    j=permutation.size() - 1;  }  permutation.swap(i,j);}  }
class C{  private static IgniteConfiguration igniteConfiguration(int gridIdx,boolean client){  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName((client ? "demo-server-" : "demo-client-") + gridIdx);  cfg.setLocalHost("127.0.0.1");  cfg.setIncludeEventTypes(EVTS_DISCOVERY);  TcpDiscoveryVmIpFinder ipFinder=new TcpDiscoveryVmIpFinder();  ipFinder.setAddresses(Collections.singletonList("127.0.0.1:60900.." + (60900 + NODE_CNT - 1)));  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setLocalPort(60900);  discoSpi.setIpFinder(ipFinder);  cfg.setDiscoverySpi(discoSpi);  TcpCommunicationSpi commSpi=new TcpCommunicationSpi();  commSpi.setSharedMemoryPort(-1);  commSpi.setLocalPort(60800);  cfg.setCommunicationSpi(commSpi);  cfg.setGridLogger(new Log4JLogger(log));  cfg.setMetricsLogFrequency(0);  cfg.getConnectorConfiguration().setPort(60700);  if (client)   cfg.setClientMode(true);  cfg.setCacheConfiguration(cacheCountry(),cacheDepartment(),cacheEmployee(),cacheParking(),cacheCar());  cfg.setSwapSpaceSpi(new FileSwapSpaceSpi());  return cfg;}  }
class C{  public int add(GL10 gl,Drawable drawable,int minWidth,int minHeight){  return add(gl,drawable,null,null,minWidth,minHeight);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private Collection<CollisionJobContext> sortJobs(Collection<CollisionJobContext> waitJobs,int waitSize){  List<CollisionJobContext> passiveList=new ArrayList<>(waitJobs.size());  int i=0;  for (  CollisionJobContext waitJob : waitJobs) {    passiveList.add(waitJob);    if (i++ == waitSize)     break;  }  Collections.sort(passiveList,comparator());  return passiveList;}  }
class C{  public long value(){  return value;}  }
class C{  public void register(final int applicationPort,final int adminPort){  final AgentClient agent=consul.agentClient();  if (agent.isRegistered(serviceId)) {    LOGGER.info("Service ({}) [{}] already registered",configuration.getServiceName(),serviceId);    return;  }  servicePort.compareAndSet(null,applicationPort);  serviceAdminPort.compareAndSet(null,adminPort);  LOGGER.info("Registering service ({}) [{}] on port {} (admin port {}) with a health check of {}s",configuration.getServiceName(),serviceId,servicePort.get(),serviceAdminPort.get(),configuration.getCheckInterval().toSeconds());  final Registration.RegCheck check=ImmutableRegCheck.builder().http(getHealthCheckUrl()).interval(String.format("%ss",configuration.getCheckInterval().toSeconds())).deregisterCriticalServiceAfter("1m").build();  final ImmutableRegistration.Builder builder=ImmutableRegistration.builder().port(servicePort.get()).check(check).name(configuration.getServiceName()).id(serviceId);  if (serviceAddress.get() != null) {    builder.address(serviceAddress.get());  }  if (tags.get() != null) {    builder.tags(tags.get());  }  try {    consul.agentClient().register(builder.build());  } catch (  ConsulException e) {    LOGGER.error("Failed to register service in Consul",e);  }}  }
class C{  public boolean equals(Object object){  if (object instanceof DefaultNamespace) {    DefaultNamespace that=(DefaultNamespace)object;    if (that.parent == parent) {      return super.equals(object);    }  }  return false;}  }
class C{  public void testIFB() throws IOException {  SimilarityBase sim=new DFRSimilarity(new BasicModelIF(),new AfterEffectB(),new Normalization.NoNormalization());  float B=(TOTAL_TERM_FREQ + 1 + 1) / ((DOC_FREQ + 1) * (FREQ + 1));  float IF=(float)(FREQ * SimilarityBase.log2(1 + (NUMBER_OF_DOCUMENTS + 1) / (TOTAL_TERM_FREQ + 0.5)));  float gold=B * IF;  correctnessTestCore(sim,gold);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected File chooseFile(int type){  Frame frame=getFrame();  File f=null;  if (fileChooser == null)   fileChooser=new JFileChooser();  fileChooser.setCurrentDirectory(E00File);  if (type == 0)   fileChooser.setDialogType(JFileChooser.OPEN_DIALOG); else   fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);  int retval=fileChooser.showDialog(frame,null);  if (retval == JFileChooser.APPROVE_OPTION)   f=fileChooser.getSelectedFile();  return f;}  }
class C{  public boolean isFinal(){  return this.modifierKeyword == ModifierKeyword.FINAL_KEYWORD;}  }
class C{  List<String> parseDatePattern(String pattern){  List<String> tokens=new Vector<String>();  String tmp=null;  for (int i=0; i < pattern.length(); i++) {    char ch=pattern.charAt(i);    if (ch == EXPLICIT_LITERAL) {      int n=pattern.indexOf(EXPLICIT_LITERAL,i + 1);      if (n != -1) {        if (tmp != null) {          tokens.add(tmp.charAt(0) + tmp);          tmp=null;        }        tokens.add(LITERAL_LETTER + pattern.substring(i + 1,n));      }      i=n;      continue;    }    boolean isValid=PATTERN_LETTERS.indexOf(ch) != -1;    if (isValid == false) {      if (tmp != null) {        tokens.add(tmp.charAt(0) + tmp);        tmp=null;      }      int n;      for (n=i; n < pattern.length(); n++) {        ch=pattern.charAt(n);        if (PATTERN_LETTERS.indexOf(ch) != -1) {          break;        }        if (isAlpha(ch)) {          throw new IllegalArgumentException("Illegal pattern character: " + ch);        }      }      tokens.add(LITERAL_LETTER + pattern.substring(i,n));      i=n - 1;      continue;    }    if (tmp == null) {      tmp=String.valueOf(ch);      continue;    } else     if (ch == tmp.charAt(0)) {      tmp+=ch;    } else {      tokens.add(tmp.charAt(0) + tmp);      tmp=String.valueOf(ch);    }  }  if (tmp != null) {    tokens.add(tmp.charAt(0) + tmp);  }  return tokens;}  }
class C{  public BoruvkaMST(EdgeWeightedGraph G){  UF uf=new UF(G.V());  for (int t=1; t < G.V() && mst.size() < G.V() - 1; t=t + t) {    Edge[] closest=new Edge[G.V()];    for (    Edge e : G.edges()) {      int v=e.either(), w=e.other(v);      int i=uf.find(v), j=uf.find(w);      if (i == j)       continue;      if (closest[i] == null || less(e,closest[i]))       closest[i]=e;      if (closest[j] == null || less(e,closest[j]))       closest[j]=e;    }    for (int i=0; i < G.V(); i++) {      Edge e=closest[i];      if (e != null) {        int v=e.either(), w=e.other(v);        if (!uf.connected(v,w)) {          mst.add(e);          weight+=e.weight();          uf.union(v,w);        }      }    }  }  assert check(G);}  }
class C{  public static void fill(long[] a,int fromIndex,int toIndex,long val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public final boolean sendMessageDelayed(Message msg,long delayMillis){  return mExec.sendMessageDelayed(msg,delayMillis);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  StringBuilder url=new StringBuilder();  User user=User.get();  url.append("http://stendhalgame.org/world/atlas.html");  if (user != null) {    url.append("?me=");    url.append(user.getZoneName());    url.append(".");    url.append(Math.round(user.getX()));    url.append(".");    url.append(Math.round(user.getY()));  }  String urlString=url.toString();  ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine("Trying to open #" + urlString + " in your browser.",NotificationType.CLIENT));  BareBonesBrowserLaunch.openURL(urlString);  return true;}  }
class C{  private AttributeValues findAttributeValues(String attr){  AttributeValues list=attributes.get(attr);  if (list == null) {    list=new AttributeValues();    AttributeValues prev=attributes.putIfAbsent(attr,list);    if (prev != null)     return prev;  }  return list;}  }
class C{  protected void onTitleRightIconClick(View rightIcon){}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static Runner toRunner(Vector<Object> xmlRpcParameters){  Runner runner=null;  if (!xmlRpcParameters.isEmpty()) {    log.debug("Extracting runner from XML-RPC parameters %s",xmlRpcParameters);    runner=Runner.newInstance((String)getParameter(RUNNER_NAME_IDX,xmlRpcParameters));    runner.setServerName(StringUtils.stripToNull((String)getParameter(RUNNER_SERVER_NAME_IDX,xmlRpcParameters)));    runner.setServerPort(StringUtils.stripToNull((String)getParameter(RUNNER_SERVER_PORT_IDX,xmlRpcParameters)));    runner.setSecured((Boolean)getParameter(RUNNER_SECURED_IDX,xmlRpcParameters));    ClasspathSet classpaths=new ClasspathSet((Vector<String>)getParameter(RUNNER_CLASSPATH_IDX,xmlRpcParameters));    runner.setClasspaths(classpaths);  }  return runner;}  }
class C{  public void translate(float tx,float ty,float tz){  g.translate(tx,ty,tz);}  }
class C{  public void preStart(){  cluster.subscribe(getSelf(),LeaderChanged.class);}  }
class C{  private boolean hasAttributes(){  return getAttributes() != null && !getAttributes().isEmpty();}  }
class C{  <T,R>IgniteInternalFuture<R> executeAsync(Class<? extends IgfsTask<T,R>> taskCls,@Nullable IgfsRecordResolver rslvr,Collection<IgfsPath> paths,@Nullable T arg){  return executeAsync(taskCls,rslvr,paths,true,cfg.getMaximumTaskRangeLength(),arg);}  }
class C{  protected void testsPerClassType(int classType,boolean weighted,boolean multiInstance){  boolean PNom=canPredict(true,false,false,false,false,multiInstance,classType)[0];  boolean PNum=canPredict(false,true,false,false,false,multiInstance,classType)[0];  boolean PStr=canPredict(false,false,true,false,false,multiInstance,classType)[0];  boolean PDat=canPredict(false,false,false,true,false,multiInstance,classType)[0];  boolean PRel;  if (!multiInstance) {    PRel=canPredict(false,false,false,false,true,multiInstance,classType)[0];  } else {    PRel=false;  }  if (PNom || PNum || PStr|| PDat|| PRel) {    if (weighted) {      instanceWeights(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    }    if (classType == Attribute.NOMINAL) {      canHandleNClasses(PNom,PNum,PStr,PDat,PRel,multiInstance,4);    }    if (!multiInstance) {      canHandleClassAsNthAttribute(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,0);      canHandleClassAsNthAttribute(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,1);    }    canHandleZeroTraining(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    boolean handleMissingPredictors=canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,true,false,20)[0];    if (handleMissingPredictors) {      canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,true,false,100);    }    boolean handleMissingClass=canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,false,true,20)[0];    if (handleMissingClass) {      canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,false,true,100);    }    correctBuildInitialisation(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    datasetIntegrity(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,handleMissingPredictors,handleMissingClass);  }}  }
class C{  public void assertEqual(byte expected,byte actual,String errorMessage){  TestUtils.assertEqual(expected,actual,errorMessage);}  }
class C{  @Override public void initializeRTOEstimators(long measuredRTT,int estimatorType,RemoteEndpoint endpoint){  long RTT=measuredRTT;  long RTTVAR=measuredRTT / 2;  long RTO=RTT + kValue[estimatorType - 1] * RTTVAR;  long newRTO=Math.round((double)RTO * (weighting[estimatorType - 1]) + Math.round((double)(endpoint.getRTO() * (1 - weighting[estimatorType - 1]))));  endpoint.setEstimatorValues(RTO,RTT,RTTVAR,estimatorType);  endpoint.setRTOtimestamp(System.currentTimeMillis(),estimatorType);  endpoint.setRTOtimestamp(System.currentTimeMillis(),OVERALLRTOTYPE);  endpoint.updateRTO(newRTO);}  }
class C{  public boolean isPasswordChangeRequired(){  VOUserDetails user=getLoggedInUser();  return user != null && user.getStatus() == UserAccountStatus.PASSWORD_MUST_BE_CHANGED;}  }
class C{  public static void verify(TimeStampToken tsToken,List<X509Certificate> tspCerts) throws Exception {  if (tspCerts.isEmpty()) {    throw new CodedException(X_INTERNAL_ERROR,"No TSP service providers are configured.");  }  SignerId signerId=tsToken.getSID();  X509Certificate cert=getTspCertificate(signerId,tspCerts);  if (cert == null) {    throw new CodedException(X_INTERNAL_ERROR,"Could not find TSP certificate for timestamp");  }  SignerInformation signerInfo=tsToken.toCMSSignedData().getSignerInfos().get(signerId);  if (signerInfo == null) {    throw new CodedException(X_INTERNAL_ERROR,"Could not get signer information for " + signerId.getSerialNumber());  }  SignerInformationVerifier verifier=createVerifier(cert);  if (!signerInfo.verify(verifier)) {    throw new CodedException(X_TIMESTAMP_VALIDATION,"Failed to verify timestamp");  }}  }
class C{  public boolean isModified(@NotNull GitVcsSettings settings,@NotNull GitSharedSettings sharedSettings){  return !settings.getAppSettings().getPathToGit().equals(getCurrentExecutablePath()) || (settings.isIdeaSsh() != IDEA_SSH.equals(mySSHExecutableComboBox.getSelectedItem())) || !settings.autoUpdateIfPushRejected() == myAutoUpdateIfPushRejected.isSelected() || ((settings.getSyncSetting() == DvcsSyncSettings.Value.SYNC) != mySyncControl.isSelected() || settings.isAutoCommitOnCherryPick() != myAutoCommitOnCherryPick.isSelected() || settings.warnAboutCrlf() != myWarnAboutCrlf.isSelected() || settings.warnAboutDetachedHead() != myWarnAboutDetachedHead.isSelected() || settings.isForcePushAllowed() != myEnableForcePush.isSelected() || settings.getUpdateType() != myUpdateMethodComboBox.getModel().getSelectedItem() || !ContainerUtil.sorted(sharedSettings.getForcePushProhibitedPatterns()).equals(ContainerUtil.sorted(getProtectedBranchesPatterns())));}  }
class C{  public void test_getFloatLjava_lang_ObjectI(){  float[] x={1};  float ret=0;  boolean thrown=false;  try {    ret=Array.getFloat(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret,0.0);  try {    ret=Array.getFloat(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getFloat(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getFloat(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  @Override protected void finalize() throws Throwable {  type=null;  regex=null;  super.finalize();}  }
class C{  private Object execute(String expression,Map<String,Object> transientState){  FunctionResolver functionResolver=StellarFunctions.FUNCTION_RESOLVER();  VariableResolver variableResolver=new MapVariableResolver(state,transientState);  StellarProcessor processor=new StellarProcessor();  return processor.parse(expression,variableResolver,functionResolver,context);}  }
class C{  public void sendRawPacket(final ByteBuf packet){  sendRawPacket(packet,false);}  }
class C{  public StorageManager(ContentResolver resolver,Looper tgtLooper) throws RemoteException {  mResolver=resolver;  mTgtLooper=tgtLooper;  mMountService=IMountService.Stub.asInterface(ServiceManager.getService("mount"));  if (mMountService == null) {    Log.e(TAG,"Unable to connect to mount service! - is it running yet?");    return;  }}  }
class C{  public static void log(Throwable t){  TestReporting.getInstance().logException(t);}  }
class C{  public int key(){  return _map._set[_index];}  }
class C{  public Vec4[] perpendicularVectors(){  Vec4 v=this;  Vec4 v1=v.x <= v.y && v.x <= v.z ? Vec4.UNIT_X : v.y <= v.x && v.y <= v.z ? Vec4.UNIT_Y : Vec4.UNIT_Z;  Vec4 va=v.cross3(v1).normalize3();  Vec4 vb=v.cross3(va).normalize3();  return new Vec4[]{va,vb};}  }
class C{  public void register(IOutput out){  this.out=out;}  }
class C{  public String minDefaultTipText(){  return "The default value to replace values that are below the minimum threshold.";}  }
class C{  public SpringHandlerInstantiator(AutowireCapableBeanFactory beanFactory){  Assert.notNull(beanFactory,"BeanFactory must not be null");  this.beanFactory=beanFactory;}  }
class C{  public void prepareTriangulation(TriangulationContext<?> tcx){  int hint=_points.size();  if (_steinerPoints != null) {    hint+=_steinerPoints.size();  }  if (_holes != null) {    for (    Polygon p : _holes) {      hint+=p.pointCount();    }  }  HashMap<TriangulationPoint,TriangulationPoint> uniquePts=new HashMap<TriangulationPoint,TriangulationPoint>(hint);  TriangulationPoint.mergeInstances(uniquePts,_points);  if (_steinerPoints != null) {    TriangulationPoint.mergeInstances(uniquePts,_steinerPoints);  }  if (_holes != null) {    for (    Polygon p : _holes) {      TriangulationPoint.mergeInstances(uniquePts,p._points);    }  }  if (m_triangles == null) {    m_triangles=new ArrayList<DelaunayTriangle>(_points.size());  } else {    m_triangles.clear();  }  for (int i=0; i < _points.size() - 1; i++) {    tcx.newConstraint(_points.get(i),_points.get(i + 1));  }  tcx.newConstraint(_points.get(0),_points.get(_points.size() - 1));  if (_holes != null) {    for (    Polygon p : _holes) {      for (int i=0; i < p._points.size() - 1; i++) {        tcx.newConstraint(p._points.get(i),p._points.get(i + 1));      }      tcx.newConstraint(p._points.get(0),p._points.get(p._points.size() - 1));    }  }  tcx.addPoints(uniquePts.keySet());}  }
class C{  public Interpreter createInterpreter(URL documentURL,boolean svg12){  return new JaclInterpreter();}  }
class C{  public static NbtOutputStream write(NbtTag tag,File file,boolean append) throws IOException {  createFile(file);  NbtOutputStream out=new NbtOutputStream(new FileOutputStream(file,append));  out.write(tag);  return out;}  }
class C{  public void testJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public Type basicGetDefinedType(){  return definedType;}  }
class C{  protected int determineDumpNumber(){  String dumpNr=System.getProperty("MAT_HPROF_DUMP_NR");  return dumpNr == null ? 0 : Integer.parseInt(dumpNr);}  }
class C{  public void disconnect(){  this.user=null;  this.domain=null;}  }
class C{  public boolean isHash(){  return hash;}  }
class C{  private void dumpTree(int depth,StringBuffer text) throws Exception {  int i, j;  for (i=0; i < m_sons.length; i++) {    text.append("\n");    ;    for (j=0; j < depth; j++) {      text.append("|   ");    }    text.append(m_localModel.leftSide(m_train));    text.append(m_localModel.rightSide(i,m_train));    if (m_sons[i].m_isLeaf) {      text.append(": ");      text.append(m_localModel.dumpLabel(i,m_train));    } else {      m_sons[i].dumpTree(depth + 1,text);    }  }}  }
class C{  @Override public String toString(){  return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE).append("country",this.country).append("address",this.address).append("province",this.province).append("postalCode",this.postalCode).append("city",this.city).toString();}  }
class C{  public void removePostInstantiateDelegate(Closure delegate){  getProxyBuilder().postInstantiateDelegates.remove(delegate);}  }
class C{  private static int nextNonQuoteIndex(String trimmed,int i,boolean forward){  while (trimmed.charAt(i) == '\u0022' || trimmed.charAt(i) == '\'' || trimmed.charAt(i) == '\u0060' || trimmed.charAt(i) == '\u00B4' || trimmed.charAt(i) == '\u2018' || trimmed.charAt(i) == '\u2019' || trimmed.charAt(i) == '\u201C' || trimmed.charAt(i) == '\u201D') {    if (forward)     i++; else     i--;  }  return i;}  }
class C{  public boolean replaceRef(Object oldRef,Object newRef) throws IOException {  Integer value=(Integer)_refs.remove(oldRef);  if (value != null) {    _refs.put(newRef,value);    return true;  } else   return false;}  }
class C{  public boolean isDisk(){  return disk;}  }
class C{  public void addCustomViewToHolder(View view){  holder.removeAllViews();  holder.addView(view);}  }
class C{  public HessianRuntimeException(String message){  super(message);}  }
class C{  public void testIntegration1(){  boolean res;  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  String originalAppIdName=mAppIdName;  String originalContentTypeName=mContentTypeName;  String originalClassName=mClassName;  byte[] originalMessageBody=mMessageBody;  Random rd=new Random();  mMessageBody=new byte[100 + rd.nextInt(100)];  rd.nextBytes(mMessageBody);  byte[] pdu=createPDU(1);  byte[] wappushPdu=retrieveWspBody();  mClassName="com.android.smspush.unitTests.ReceiverActivity";  try {    IWapPushManager iwapman=getInterface();    IDataVerify dataverify=getVerifyInterface();    dataverify.resetData();    if (isContentTypeMapped(mContentTypeValue)) {      mContentTypeName=getContentTypeName(mContentTypeValue);      Log.d(LOG_TAG,"mContentTypeValue mapping " + mContentTypeName + ":"+ mContentTypeValue);    } else {      mContentTypeName=Integer.toString(mContentTypeValue);    }    iwapman.addPackage(Integer.toString(mAppIdValue),mContentTypeName,mPackageName,mClassName,WapPushManagerParams.APP_TYPE_ACTIVITY,false,false);    dispatchWapPdu(wappushPdu,iwapman);    iwapman.deletePackage(Integer.toString(mAppIdValue),mContentTypeName,mPackageName,mClassName);    assertTrue(dataverify.verifyData(mMessageBody));  } catch (  RemoteException e) {  }  mClassName=originalClassName;  mAppIdName=originalAppIdName;  mContentTypeName=originalContentTypeName;  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;  mMessageBody=originalMessageBody;}  }
class C{  public Matrix4d reflection(double nx,double ny,double nz,double px,double py,double pz){  double invLength=1.0 / Math.sqrt(nx * nx + ny * ny + nz * nz);  double nnx=nx * invLength;  double nny=ny * invLength;  double nnz=nz * invLength;  return reflection(nnx,nny,nnz,-nnx * px - nny * py - nnz * pz);}  }
class C{  public static Operation createPutOperation(StatelessService service,ResourceState state,String existingStateLink){  URI existingStateURI=UriUtils.buildUri(service.getHost(),existingStateLink);  return Operation.createPut(existingStateURI).setBody(state).setReferer(service.getUri());}  }
class C{  public void writeAlignments(List<Alignment> alignments,XMLWriter writer){  int index=1;  for (  Alignment alignment : alignments) {    if (alignments.size() > 1) {      alignment.setId(AlignmentParser.ALIGNMENT + index);    } else {      alignment.setId(AlignmentParser.ALIGNMENT);    }    writeAlignment(alignment,writer);    index+=1;    writer.writeText("");  }}  }
class C{  public int score(){  return score;}  }
class C{  public Builder<T> siblingNode(T value){  return parentBuilder.childNode(value);}  }
class C{  protected void calculateCutPointsByEqualWidthBinning(int index){  double max=0, min=1, currentVal;  Instance currentInstance;  for (int i=0; i < getInputFormat().numInstances(); i++) {    currentInstance=getInputFormat().instance(i);    if (!currentInstance.isMissing(index)) {      currentVal=currentInstance.value(index);      if (max < min) {        max=min=currentVal;      }      if (currentVal > max) {        max=currentVal;      }      if (currentVal < min) {        min=currentVal;      }    }  }  double binWidth=(max - min) / m_NumBins;  double[] cutPoints=null;  if ((m_NumBins > 1) && (binWidth > 0)) {    cutPoints=new double[m_NumBins - 1];    for (int i=1; i < m_NumBins; i++) {      cutPoints[i - 1]=min + binWidth * i;    }  }  m_CutPoints[index]=cutPoints;}  }
class C{  public synchronized void scale(float scale){  scale((double)scale);}  }
class C{  public static final void drawVector(GL2 gl,Vector2 s,Vector2 d,double l){  RenderUtilities.drawVector(gl,s.x,s.y,d.x,d.y,l);}  }
class C{  public void onStart(){}  }
class C{  public synchronized int updatePurchase(String orderId,String productId,PurchaseState purchaseState,long purchaseTime,String developerPayload){  insertOrder(orderId,productId,purchaseState,purchaseTime,developerPayload);  Cursor cursor=mDb.query(PURCHASE_HISTORY_TABLE_NAME,HISTORY_COLUMNS,HISTORY_PRODUCT_ID_COL + "=?",new String[]{productId},null,null,null,null);  if (cursor == null) {    return 0;  }  int quantity=0;  try {    while (cursor.moveToNext()) {      int stateIndex=cursor.getInt(2);      PurchaseState state=PurchaseState.valueOf(stateIndex);      if (state == PurchaseState.PURCHASED || state == PurchaseState.REFUNDED) {        quantity+=1;      }    }    updatePurchasedItem(productId,quantity);  }  finally {    if (cursor != null) {      cursor.close();    }  }  return quantity;}  }
class C{  protected UnManagedFileExportRule checkUnManagedFsExportRuleExistsInDB(DbClient dbClient,String fsExportRuleNativeId){  UnManagedFileExportRule unManagedExportRule=null;  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileExporRuleNativeGUIdConstraint(fsExportRuleNativeId),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI unExportRuleURI=iter.next();    unManagedExportRule=dbClient.queryObject(UnManagedFileExportRule.class,unExportRuleURI);    return unManagedExportRule;  }  return unManagedExportRule;}  }
class C{  public static <T1,T2,T3>Procedure2<T1,T3> bind(Procedure2<? super T2,T3> delegate,Function<? super T1,T2> function){  return new BindProcedure2<>(delegate,function);}  }
class C{  protected void messageEvent(String selection){  Vector<Object> transferObjects=new Vector<Object>();  if (null != this.transferObject) {    transferObjects.add(this.transferObject);  }  m_notifier.notifyEvent(new MessageEvent(selection),transferObjects);}  }
class C{  public static void saveAsXML(NSObject root,OutputStream out) throws IOException {  OutputStreamWriter w=new OutputStreamWriter(out,"UTF-8");  w.write(root.toXMLPropertyList());  w.close();}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints the ASM code to generate the given class.");    System.err.println("Usage: ASMifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(null,new ASMifier(),new PrintWriter(System.out)),flags);}  }
class C{  public ValidationException(String message,ValidationExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  long readFieldRef(){  return readID(vm.sizeofFieldRef);}  }
class C{  public void disconnect(OnConnectionChangedListener callback){  mPeripheral.disconnect(callback);}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (null != m_resultDTDHandler)   m_resultDTDHandler.unparsedEntityDecl(name,publicId,systemId,notationName);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public static void blackListItemFromLoonium(Item item){  looniumBlacklist.add(item);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.385 -0400",hash_original_method="17DD951E869A5C24EC057ACC20C936AE",hash_generated_method="1DE09DB95E82E30B7FC9E344C11CE619") public AnnotationFormatError(String message){  super(message);}  }
class C{  public static final void drawVerticalText(Graphics graphics,String text,Point location,boolean upToDown){  drawVerticalText(graphics,text,location.x,location.y,upToDown);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.934 -0500",hash_original_method="08D5FBAA11FAAE0244D1BD87258C05E0",hash_generated_method="EEF14964EDF3E0241435E51BAF061B2D") public int lastIndexOf(String subString,int start){  addTaint(subString.getTaintInt());  return getTaintInt();}  }
class C{  public IElementType parseTr(){  popState();  CharSequence buffer=getBuffer();  int currentOffset=getTokenEnd();  int bufferEnd=getBufferEnd();  char openQuote=buffer.charAt(currentOffset);  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);  boolean quotesDiffer=openQuote != closeQuote;  pushPreparsedToken(currentOffset++,currentOffset,REGEX_QUOTE_OPEN);  currentOffset=parseTrBlockContent(currentOffset,openQuote,closeQuote);  if (currentOffset < bufferEnd) {    pushPreparsedToken(currentOffset++,currentOffset,quotesDiffer ? REGEX_QUOTE_CLOSE : REGEX_QUOTE);  }  if (quotesDiffer) {    currentOffset=lexWhiteSpacesAndComments(currentOffset,preparsedTokensList);  }  if (currentOffset < bufferEnd) {    if (quotesDiffer) {      openQuote=buffer.charAt(currentOffset);      closeQuote=RegexBlock.getQuoteCloseChar(openQuote);      pushPreparsedToken(currentOffset++,currentOffset,REGEX_QUOTE_OPEN);    }    currentOffset=parseTrBlockContent(currentOffset,openQuote,closeQuote);  }  if (currentOffset < bufferEnd) {    pushPreparsedToken(currentOffset++,currentOffset,REGEX_QUOTE_CLOSE);  }  if (currentOffset < bufferEnd) {    int blockStart=currentOffset;    while (currentOffset < bufferEnd && StringUtil.containsChar(TR_MODIFIERS,buffer.charAt(currentOffset))) {      currentOffset++;    }    if (blockStart < currentOffset) {      pushPreparsedToken(blockStart,currentOffset,REGEX_MODIFIER);    }  }  return getPreParsedToken();}  }
class C{  public void fillRect(int x,int y,int width,int height){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling rect: " + new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fillRect(x,y,width,height);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fillRect(x,y,width,height);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fillRect(x,y,width,height);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static synchronized boolean hasKey(String key){  return getInstance().properties.contains(key);}  }
class C{  public static boolean isCrossingDateline(double leftLon,double rightLon,float projScale){  return ((leftLon > rightLon) || (MoreMath.approximately_equal(leftLon,rightLon,.001f) && projScale > 1000000f));}  }
