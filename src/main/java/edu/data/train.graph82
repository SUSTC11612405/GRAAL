class C{  public void clearValueSources(){  for (  ValueSource valueSource : valueSourceList) {    valueSource.removeAllListeners();  }  valueSourceList.clear();  setAutoLabelIfEnabled();  fireCleared();}  }
class C{  protected Entry find(Object key){  return null;}  }
class C{  public void clear(){  fullyLock();  try {    for (Node<E> p, h=head; (p=h.next) != null; h=p) {      h.next=h;      p.item=null;    }    head=last;    if (count.getAndSet(0) == capacity)     notFull.signal();  }  finally {    fullyUnlock();  }}  }
class C{  protected Node newNode(){  return new SVGOMColorProfileElement();}  }
class C{  public V put(K key,V value){  reap();  return backingStore.put(new IdentityWeakReference(key,queue),value);}  }
class C{  public boolean isDefined(Object attrName){  return table.containsKey(attrName);}  }
class C{  public void testLineDocFile() throws Exception {  Path lineFile=createTempFile("test.reuters.lines",".txt");  final int NUM_TRY_DOCS=50;  String algLines1[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource","content.source.forever=true","line.file.out=" + lineFile.toAbsolutePath().toString().replace('\\','/'),"# ----- alg ","{WriteLineDoc()}:" + NUM_TRY_DOCS};  Benchmark benchmark=execBenchmark(algLines1);  BufferedReader r=Files.newBufferedReader(lineFile,StandardCharsets.UTF_8);  int numLines=0;  String line;  while ((line=r.readLine()) != null) {    if (numLines == 0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {      continue;    }    numLines++;  }  r.close();  assertEquals("did not see the right number of docs; should be " + NUM_TRY_DOCS + " but was "+ numLines,NUM_TRY_DOCS,numLines);  String algLines2[]={"# ----- properties ","analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + lineFile.toAbsolutePath().toString().replace('\\','/'),"content.source.forever=false","doc.reuse.fields=false","ram.flush.mb=4","# ----- alg ","ResetSystemErase","CreateIndex","{AddDoc}: *","CloseIndex"};  benchmark=execBenchmark(algLines2);  IndexWriter iw=new IndexWriter(benchmark.getRunData().getDirectory(),new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));  iw.close();  IndexReader ir=DirectoryReader.open(benchmark.getRunData().getDirectory());  assertEquals(numLines + " lines were created but " + ir.numDocs()+ " docs are in the index",numLines,ir.numDocs());  ir.close();}  }
class C{  private Object toDate(Class type,String value){  if (type.equals(java.sql.Date.class)) {    try {      return java.sql.Date.valueOf(value);    } catch (    IllegalArgumentException e) {      throw new ConversionException("String must be in JDBC format [yyyy-MM-dd] to create a java.sql.Date");    }  }  if (type.equals(java.sql.Time.class)) {    try {      return java.sql.Time.valueOf(value);    } catch (    IllegalArgumentException e) {      throw new ConversionException("String must be in JDBC format [HH:mm:ss] to create a java.sql.Time");    }  }  if (type.equals(java.sql.Timestamp.class)) {    try {      return java.sql.Timestamp.valueOf(value);    } catch (    IllegalArgumentException e) {      throw new ConversionException("String must be in JDBC format [yyyy-MM-dd HH:mm:ss.fffffffff] " + "to create a java.sql.Timestamp");    }  }  String msg=toString(getClass()) + " does not support default String to '" + toString(type)+ "' conversion.";  throw new ConversionException(msg);}  }
class C{  private void arraylengthHelper(Instruction s,BasicBlock b){  TypeReference type=GuardedUnary.getVal(s).getType();  if (type.isArrayType()) {    if (!type.getArrayElementType().isPrimitiveType()) {      type=TypeReference.JavaLangObjectArray;    }    registerUse(s,type);  }}  }
class C{  public static int[] discretiseMaxEntropy(double data[],int numBins){  int[] newData=new int[data.length];  double[] tempData=new double[data.length];  System.arraycopy(data,0,tempData,0,data.length);  Arrays.sort(tempData);  int compartmentSize;  double[] cutOffValues=new double[numBins];  for (int i=0; i < numBins; i++) {    compartmentSize=(int)((double)(i + 1) * (double)(data.length) / (double)numBins) - 1;    cutOffValues[i]=tempData[compartmentSize];  }  for (int i=0; i < data.length; i++) {    for (int m=0; m < numBins; m++) {      if (data[i] <= cutOffValues[m]) {        newData[i]=m;        break;      }    }  }  return newData;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public PendingDelete(ShardId shardId,Settings settings){  this.index=shardId.getIndex();  this.shardId=shardId.getId();  this.settings=settings;  this.deleteIndex=false;}  }
class C{  private void paintControl(final PaintEvent e){  final GC gc=e.gc;  gc.setAdvanced(true);  gc.setAntialias(SWT.ON);  final int width=getSize().x;  final int height=getSize().y;  drawBackground(gc,width,height);  final Iterator<BreadcrumbItem> it=this.items.iterator();  int x=0;  while (it.hasNext()) {    final BreadcrumbItem item=it.next();    item.setGc(gc).setToolbarHeight(height).setIsLastItemOfTheBreadCrumb(!it.hasNext());    item.drawButtonAtPosition(x);    x+=item.getWidth();  }}  }
class C{  @Override public ArrayList<ArrayList<Region>> defineRegions(ArrayList<ChartSet> data){  final int nSets=data.size();  final int nEntries=data.get(0).size();  final int yZeroCoord=(int)this.getZeroPosition();  ArrayList<ArrayList<Region>> result=new ArrayList<ArrayList<Region>>(nSets);  for (int i=0; i < nSets; i++)   result.add(new ArrayList<Region>(nEntries));  float offset;  BarSet barSet;  Bar bar;  for (int i=0; i < nEntries; i++) {    offset=data.get(0).getEntry(i).getX() - drawingOffset;    for (int j=0; j < nSets; j++) {      barSet=(BarSet)data.get(j);      bar=(Bar)barSet.getEntry(i);      if (bar.getValue() > 0)       result.get(j).add(new Region((int)offset,(int)bar.getY(),(int)(offset+=barWidth),yZeroCoord)); else       result.get(j).add(new Region((int)offset,yZeroCoord,(int)(offset+=barWidth),(int)bar.getY()));      if (j != nSets - 1)       offset+=style.setSpacing;    }  }  return result;}  }
class C{  private Message deserializeHelper(String json,Object context) throws Exception {  JSONObject jo=new JSONObject(json);  if (!SchemaUtils.checkValidKeys(jo,FIRST_LEVEL_FIELD_COMBINATIONS)) {    throw new IOException("Invalid keys");  }  String id=jo.getString(DataQuerySnapshot.FIELD_ID);  String type=jo.getString(DataQuerySnapshot.FIELD_TYPE);  if (!type.equals(DataQuerySnapshot.TYPE)) {    LOG.error("Found type {} in the query json, but expected type {}.",type,DataQuerySnapshot.TYPE);    return null;  }  long countdown=-1L;  boolean hasCountdown=jo.has(DataQuerySnapshot.FIELD_COUNTDOWN);  if (hasCountdown) {    countdown=jo.getLong(DataQuerySnapshot.FIELD_COUNTDOWN);  }  Map<String,String> schemaKeys=null;  Set<String> fieldsSet=Sets.newHashSet();  if (jo.has(DataQuerySnapshot.FIELD_DATA)) {    JSONObject data=jo.getJSONObject(DataQuerySnapshot.FIELD_DATA);    if (!SchemaUtils.checkValidKeys(data,DATA_FIELD_COMBINATIONS)) {      LOG.error("Error validating {} field",DataQuerySnapshot.FIELD_DATA);      throw new IOException("Invalid keys");    }    if (data.has(DataQuerySnapshot.FIELD_SCHEMA_KEYS)) {      schemaKeys=SchemaUtils.extractMap(data.getJSONObject(DataQuerySnapshot.FIELD_SCHEMA_KEYS));    }    if (data.has(DataQuerySnapshot.FIELD_FIELDS)) {      JSONArray jArray=data.getJSONArray(DataQuerySnapshot.FIELD_FIELDS);      for (int index=0; index < jArray.length(); index++) {        String field=jArray.getString(index);        if (!fieldsSet.add(field)) {          LOG.error("The field {} was listed more than once, this is an invalid query.",field);        }      }    }  }  Fields fields=new Fields(fieldsSet);  if (!hasCountdown) {    return new DataQuerySnapshot(id,fields,schemaKeys);  } else {    return new DataQuerySnapshot(id,fields,countdown,schemaKeys);  }}  }
class C{  public static void main(String... args) throws Exception {  CheckResourceKeys c=new CheckResourceKeys();  if (c.run(args))   return;  if (is_jtreg())   throw new Exception(c.errors + " errors occurred"); else   System.exit(1);}  }
class C{  private TCustomHashMap<long[],List<ArrayModifiableDBIDs>> extractClusters(Relation<V> relation,DiSHClusterOrder clusterOrder){  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Extract Clusters",relation.size(),LOG) : null;  TCustomHashMap<long[],List<ArrayModifiableDBIDs>> clustersMap=new TCustomHashMap<>(BitsUtil.TROVE_HASH_STRATEGY);  WritableDataStore<Pair<long[],ArrayModifiableDBIDs>> entryToClusterMap=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT,Pair.class);  for (DBIDIter iter=clusterOrder.iter(); iter.valid(); iter.advance()) {    V object=relation.get(iter);    long[] preferenceVector=clusterOrder.getCommonPreferenceVector(iter);    List<ArrayModifiableDBIDs> parallelClusters=clustersMap.get(preferenceVector);    if (parallelClusters == null) {      parallelClusters=new ArrayList<>();      clustersMap.put(preferenceVector,parallelClusters);    }    ArrayModifiableDBIDs cluster=null;    for (    ArrayModifiableDBIDs c : parallelClusters) {      NumberVector c_centroid=ProjectedCentroid.make(preferenceVector,relation,c);      long[] commonPreferenceVector=BitsUtil.andCMin(preferenceVector,preferenceVector);      int subspaceDim=subspaceDimensionality(object,c_centroid,preferenceVector,preferenceVector,commonPreferenceVector);      if (subspaceDim == clusterOrder.getCorrelationValue(iter)) {        double d=weightedDistance(object,c_centroid,commonPreferenceVector);        if (d <= 2 * epsilon) {          cluster=c;          break;        }      }    }    if (cluster == null) {      cluster=DBIDUtil.newArray();      parallelClusters.add(cluster);    }    cluster.add(iter);    entryToClusterMap.put(iter,new Pair<>(preferenceVector,cluster));    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  if (LOG.isDebuggingFiner()) {    int dim=RelationUtil.dimensionality(relation);    StringBuilder msg=new StringBuilder("Step 0");    for (    Map.Entry<long[],List<ArrayModifiableDBIDs>> clusterList : clustersMap.entrySet()) {      for (      ArrayModifiableDBIDs c : clusterList.getValue()) {        msg.append('\n').append(BitsUtil.toStringLow(clusterList.getKey(),dim)).append(" ids ").append(c.size());      }    }    LOG.debugFiner(msg.toString());  }  DBIDVar cur=DBIDUtil.newVar(), pre=DBIDUtil.newVar();  for (  long[] pv : clustersMap.keySet()) {    List<ArrayModifiableDBIDs> parallelClusters=clustersMap.get(pv);    for (    ArrayModifiableDBIDs cluster : parallelClusters) {      if (cluster.isEmpty()) {        continue;      }      cluster.assignVar(0,cur);      clusterOrder.getPredecessor(cur,pre);      if (!pre.isSet() || DBIDUtil.equal(pre,cur)) {        continue;      }      if (BitsUtil.equal(clusterOrder.getCommonPreferenceVector(pre),clusterOrder.getCommonPreferenceVector(cur))) {        continue;      }      if (clusterOrder.getCorrelationValue(pre) < clusterOrder.getCorrelationValue(cur) || clusterOrder.getReachability(pre) < clusterOrder.getReachability(cur)) {        continue;      }      Pair<long[],ArrayModifiableDBIDs> oldCluster=entryToClusterMap.get(pre);      oldCluster.second.remove(pre);      cluster.add(pre);      entryToClusterMap.put(pre,new Pair<>(pv,cluster));    }  }  return clustersMap;}  }
class C{  public Set<Color> readPixelColors(int x,int y,int width,int height){  int pixelCount=width * height;  ByteBuffer pixelBuffer=(ByteBuffer)this.scratchBuffer(pixelCount * 4).clear();  GLES20.glReadPixels(x,y,width,height,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuffer);  HashSet<Color> resultSet=new HashSet<>();  Color result=new Color();  for (int idx=0; idx < pixelCount; idx++) {    pixelBuffer.get(this.pixelArray,0,4);    result.red=(this.pixelArray[0] & 0xFF) / (float)0xFF;    result.green=(this.pixelArray[1] & 0xFF) / (float)0xFF;    result.blue=(this.pixelArray[2] & 0xFF) / (float)0xFF;    result.alpha=(this.pixelArray[3] & 0xFF) / (float)0xFF;    if (resultSet.add(result)) {      result=new Color();    }  }  return resultSet;}  }
class C{  public boolean slotsAreEmpty(@Nonnull IInventory inv){  for (int slot=0; slot < inv.getSizeInventory(); ++slot) {    if (inv.getStackInSlot(slot) != null)     return false;  }  return true;}  }
class C{  public SymbolTable createSymbolTable(){  SymbolTableImpl symbolTable=new SymbolTableImpl();  return symbolTable;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void sendNotification(final String text){  if (!"NONE".equals(text)) {    this.getRemotePlayer().reportMessage(text,text);  }}  }
class C{  public void testTrackName_date_iso_8601(){  PreferencesUtils.setString(getContext(),R.string.track_name_key,getContext().getString(R.string.settings_recording_track_name_date_iso_8601_value));  SimpleDateFormat simpleDateFormat=new SimpleDateFormat(TrackNameUtils.ISO_8601_FORMAT,Locale.US);  assertEquals(simpleDateFormat.format(new Date(START_TIME)),TrackNameUtils.getTrackName(getContext(),TRACK_ID,START_TIME,null));}  }
class C{  public boolean core_equals(lr_item_core other){  return other != null && _the_production.equals(other._the_production) && _dot_pos == other._dot_pos;}  }
class C{  @Override public void removeUiObject(String obj){  uiObjects.remove(obj);}  }
class C{  public void fadeOutAllLayers(){  mTransitionState=TRANSITION_STARTING;  Arrays.fill(mIsLayerOn,false);  invalidateSelf();}  }
class C{  public static <T>T[] newArray(T[] reference,int length){  return Platform.newArray(reference,length);}  }
class C{  protected SVGOMViewElement(){}  }
class C{  protected boolean shouldInjectApplication(){  return true;}  }
class C{  public void remove(lalr_item_set other) throws internal_error {  not_null(other);  for (Enumeration e=other.all(); e.hasMoreElements(); )   remove((lalr_item)e.nextElement());}  }
class C{  public FirstClassQuartersCargoBay(double space,int doors){  totalSpace=(int)space / 10;  weight=space;  currentSpace=(int)space / 10;  this.doors=doors;}  }
class C{  protected XBLOMXBLElement(){}  }
class C{  public boolean isTheClientIPBlocked(String clientIP){  try {    if (null != clientIP && !clientIP.isEmpty()) {      String zkPath=getZkPath(clientIP);      InvalidLogins invLogins=(InvalidLogins)_distDataManager.getData(zkPath,false);      if (null != invLogins) {        if (isClientInvalidRecordExpired(invLogins)) {          removeInvalidRecord(clientIP);          return false;        }        if (invLogins.getLoginAttempts() < _maxAuthnLoginAttemtsCount) {          return false;        }      } else {        return false;      }      _log.error("The client IP is blocked, too many error logins from that IP: {}",clientIP);    } else {      _log.error("The provided client IP is null or empty.");    }  } catch (  Exception ex) {    _log.error("Failed to check the error login count",ex);  }  return true;}  }
class C{  public void throttling(int tenantClass){  super.starting(Operation.READ,tenantClass);}  }
class C{  @VisibleForTesting void writeGrade(double grade,StringBuilder builder,int resId,String lineBreak){  long gradeInPercent=Double.isNaN(grade) || Double.isInfinite(grade) ? 0L : Math.round(grade * 100);  builder.append(context.getString(resId,gradeInPercent));  builder.append(lineBreak);}  }
class C{  public LogisticRegression(DataSet dataSet){  this.dataSet=dataSet;  dataCols=dataSet.getDoubleData().transpose().toArray();  setRows(new int[dataSet.getNumRows()]);  for (int i=0; i < getRows().length; i++)   getRows()[i]=i;}  }
class C{  public static void println(Object... args){  boolean space=false;  if (args.length > 0) {    for (    Object arg : args) {      if (space) {        System.out.print(" ");      }      System.out.print(arg.toString());      space=true;    }  }  System.out.println();}  }
class C{  public static Map<String,String> splitCertificateSubject(InputStream certificate,String password) throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException {  String subject=getCertificate(certificate,password).getSubjectDN().getName();  return splitCertificateSubject(subject);}  }
class C{  public void deleteBucketTagging(GenericRequest genericRequest) throws OSSException, ClientException {  assertParameterNotNull(genericRequest,"genericRequest");  String bucketName=genericRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new HashMap<String,String>();  params.put(SUBRESOURCE_TAGGING,null);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.DELETE).setBucket(bucketName).setParameters(params).setOriginalRequest(genericRequest).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  public void remove(int index){  checkWidget();  if (index == getSelectionIndex() && index > 0) {    select(0);  }  this.table.remove(index);}  }
class C{  public static List<? extends Node> childNodeList(Node node){  if (node == null)   return null;  List<Node> nodes=new LinkedList<Node>();  do {    if (node.getNodeType() == Node.ELEMENT_NODE || node.getNodeType() == Node.COMMENT_NODE) {      nodes.add(node);    }  } while ((node=node.getNextSibling()) != null);  return nodes;}  }
class C{  private static void checkOffset(String value,int offset,char expected) throws IndexOutOfBoundsException {  char found=value.charAt(offset);  if (found != expected) {    throw new IndexOutOfBoundsException("Expected '" + expected + "' character but found '"+ found+ "'");  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.893 -0500",hash_original_method="11ADA6ED2A991966CB49663045730556",hash_generated_method="8EE1CF0F7DD5C3FC6C7691B1A914AA34") public int compareTo(Object o){  ObjectStreamField f=(ObjectStreamField)o;  boolean thisPrimitive=this.isPrimitive();  boolean fPrimitive=f.isPrimitive();  if (thisPrimitive != fPrimitive) {    return thisPrimitive ? -1 : 1;  }  return this.getName().compareTo(f.getName());}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  static public DataSource instance(){  return existingInstance;}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  public static String concatenate(String[] lines,String delimiter){  StringBuffer buffer=new StringBuffer();  for (int i=0; i < lines.length; i++) {    if (i > 0)     buffer.append(delimiter);    buffer.append(lines[i]);  }  return buffer.toString();}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public OIDCClientDTO add(OIDCClientMetadataDTO oidcClientMetadataDTO){  String clientId=null;  try {    OIDCClient oidcClient=OIDCClientMapper.getOIDCClient(oidcClientMetadataDTO);    clientId=oidcClient.getClientId();    getIDMClient().addOIDCClient(this.tenant,oidcClient);    return OIDCClientMapper.getOIDCClientDTO(getIDMClient().getOIDCClient(this.tenant,clientId));  } catch (  NoSuchTenantException e) {    log.debug("Failed to add an OIDC client for tenant '{}' due to missing tenant",this.tenant,e);    throw new NotFoundException(this.sm.getString("ec.404"),e);  }catch (  DTOMapperException|InvalidArgumentException|DuplicatedOIDCRedirectURLException e) {    log.debug("Failed to add an OIDC client for tenant '{}' due to a client side error",this.tenant,e);    throw new BadRequestException(this.sm.getString("res.oidcclient.create.failed",clientId,this.tenant),e);  }catch (  Exception e) {    log.error("Failed to add an OIDC client for tenant '{}' due to a server side error",this.tenant,e);    throw new InternalServerErrorException(this.sm.getString("ec.500"),e);  }}  }
class C{  public static void registerPseudoClass(Class<? extends PseudoClass> pseudoClassType){  PseudoClass pseudoClass;  try {    pseudoClass=pseudoClassType.newInstance();  } catch (  Exception ex) {    throw new CSSellyException(ex);  }  PSEUDO_CLASS_MAP.put(pseudoClass.getPseudoClassName(),pseudoClass);}  }
class C{  public static InstructionFragment newInstance(Recipe recipe,int sectionNumber){  InstructionFragment fragment=new InstructionFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public static Object decode(Object value,Type type){  if (value instanceof Integer) {    int i=(Integer)value;switch (type.getTag()) {case BOOLEAN:      return i != 0;case CHAR:    return (char)i;case BYTE:  return (byte)i;case SHORT:return (short)i;}}return value;}  }
class C{  void present(){  if (caps.GL_NV_draw_texture) {    NVDrawTexture.glDrawTextureNV(raytraceTexture,sampler,0.0f,0.0f,width,height,0.0f,0.0f,0.0f,1.0f,1.0f);  } else {    glUseProgram(quadProgram);    glBindVertexArray(vao);    glBindTexture(GL_TEXTURE_2D,raytraceTexture);    glBindSampler(0,this.sampler);    glDrawArrays(GL_TRIANGLES,0,6);    glBindSampler(0,0);    glBindTexture(GL_TEXTURE_2D,0);    glBindVertexArray(0);    glUseProgram(0);  }}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction action=new RPAction();  action.put("type","adminnote");  action.put("target",params[0]);  action.put("note",remainder);  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  protected void updatePositions(DocumentEvent event){  for (  PositionUpdater u : fPositionUpdaters) {    u.update(event);  }}  }
class C{  public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg,Object[] params){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  setResourceBundle(record);  log(record);}  }
class C{  public static List<Double> unmodifiableView(double[] array,int length){  return Collections.unmodifiableList(view(array,length));}  }
class C{  public void testRandom() throws IOException {  Random random=random();  final Analyzer a=new JapaneseAnalyzer(null,Mode.SEARCH,JapaneseAnalyzer.getDefaultStopSet(),JapaneseAnalyzer.getDefaultStopTags());  checkRandomData(random,a,atLeast(1000));  a.close();}  }
class C{  public void characters(char[] characters,int offset,int length) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.characters(characters,offset,length);}  }
class C{  public Builder field(GraphQLFieldDefinition.Builder builder){  this.fields.add(builder.build());  return this;}  }
class C{  public static boolean isDiamond(JCTree tree){switch (tree.getTag()) {case TYPEAPPLY:    return ((JCTypeApply)tree).getTypeArguments().isEmpty();case NEWCLASS:  return isDiamond(((JCNewClass)tree).clazz);case ANNOTATED_TYPE:return isDiamond(((JCAnnotatedType)tree).underlyingType);default :return false;}}  }
class C{  public static List<Vec> sampleBasisVectors(KernelTrick k,DataSet dataset,final List<Vec> X,SamplingMethod method,int basisSize,boolean sampleWithReplacment,Random rand){  List<Vec> basisVecs=new ArrayList<Vec>(basisSize);  final int N=dataset.getSampleSize();switch (method) {case DIAGONAL:    double[] diags=new double[N];  diags[0]=k.eval(X.get(0),X.get(0));for (int i=1; i < N; i++) diags[i]=diags[i - 1] + k.eval(X.get(i),X.get(i));sample(basisSize,rand,diags,X,sampleWithReplacment,basisVecs);break;case NORM:double[] norms=new double[N];List<Vec> gramVecs=new ArrayList<Vec>();for (int i=0; i < N; i++) gramVecs.add(new DenseVector(N));List<Double> tmpCache=k.getAccelerationCache(X);for (int i=0; i < N; i++) {gramVecs.get(i).set(i,k.eval(i,i,X,tmpCache));for (int j=i + 1; j < N; j++) {double val=k.eval(i,j,X,tmpCache);gramVecs.get(i).set(j,val);gramVecs.get(j).set(i,val);}}norms[0]=gramVecs.get(0).pNorm(2);for (int i=1; i < gramVecs.size(); i++) norms[i]=norms[i - 1] + gramVecs.get(i).pNorm(2);sample(basisSize,rand,norms,X,sampleWithReplacment,basisVecs);break;case KMEANS:HamerlyKMeans kMeans=new HamerlyKMeans(new EuclideanDistance(),SeedSelectionMethods.SeedSelection.KPP);kMeans.setStoreMeans(true);kMeans.cluster(dataset,basisSize);basisVecs.addAll(kMeans.getMeans());break;case UNIFORM:default :if (sampleWithReplacment) {Set<Integer> sampled=new IntSet(basisSize);while (sampled.size() < basisSize) sampled.add(rand.nextInt(N));for (int indx : sampled) basisVecs.add(X.get(indx));} else for (int i=0; i < basisSize; i++) basisVecs.add(X.get(rand.nextInt(N)));}return basisVecs;}  }
class C{  public void updateConsulta(ConsultaVO consultaVO){  final String qual=new StringBuffer().append("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,consultaVO.getId())).toString();  HashMap mapColumnsToUpdate=new HashMap();  mapColumnsToUpdate.put(CAMPO_ANO,consultaVO.getAno());  mapColumnsToUpdate.put(CAMPO_ORDEN,new Integer(consultaVO.getOrden()));  mapColumnsToUpdate.put(CAMPO_TEMA,consultaVO.getTema());  mapColumnsToUpdate.put(CAMPO_TIPOENTCONSULTORA,consultaVO.getTipoentconsultora());  mapColumnsToUpdate.put(CAMPO_NORGCONSULTOR,consultaVO.getNorgconsultor());  mapColumnsToUpdate.put(CAMPO_NUSRCONSULTOR,consultaVO.getNusrconsultor());  mapColumnsToUpdate.put(CAMPO_FINICIALRESERVA,consultaVO.getFinicialreserva());  mapColumnsToUpdate.put(CAMPO_FENTREGA,consultaVO.getFentrega());  mapColumnsToUpdate.put(CAMPO_FMAXFINCONSULTA,consultaVO.getFmaxfinconsulta());  mapColumnsToUpdate.put(CAMPO_ESTADO,new Integer(consultaVO.getEstado()));  mapColumnsToUpdate.put(CAMPO_FESTADO,consultaVO.getFestado());  mapColumnsToUpdate.put(CAMPO_MOTIVO,consultaVO.getMotivo());  mapColumnsToUpdate.put(CAMPO_IDARCHIVO,consultaVO.getIdarchivo());  mapColumnsToUpdate.put(CAMPO_IDUSRSOLICITANTE,consultaVO.getIdusrsolicitante());  mapColumnsToUpdate.put(CAMPO_INFORMACION,consultaVO.getInformacion());  mapColumnsToUpdate.put(CAMPO_TIPO,new Integer(consultaVO.getTipo()));  mapColumnsToUpdate.put(CAMPO_DATOSAUTORIZADO,consultaVO.getDatosautorizado());  mapColumnsToUpdate.put(CAMPO_DATOSSOLICITANTE,consultaVO.getDatossolicitante());  mapColumnsToUpdate.put(CAMPO_TIPOENTREGA,consultaVO.getTipoentrega());  mapColumnsToUpdate.put(CAMPO_OBSERVACIONES,consultaVO.getObservaciones());  mapColumnsToUpdate.put(CAMPO_ID_MOTIVO,consultaVO.getIdMotivo());  mapColumnsToUpdate.put(CAMPO_IDUSRCSALA,consultaVO.getIdusrcsala());  updateFields(qual,mapColumnsToUpdate,TABLE_NAME);}  }
class C{  public void addThemeProps(Hashtable themeProps){  if (accessible) {    buildTheme(themeProps);    styles.clear();    selectedStyles.clear();    imageCache.clear();    current.refreshTheme(false);  }}  }
class C{  public boolean isManualDragEnabled(){  return mIsManualDragEnabled;}  }
class C{  public RETokenizer tokenizer(String text){  return new RETokenizer(this,text);}  }
class C{  private int groupPositionToBin(int groupPosition){  if (!mDataValid)   return -1;  if (groupPosition < 0 || groupPosition >= DateSorter.DAY_COUNT) {    throw new AssertionError("group position out of range");  }  if (DateSorter.DAY_COUNT == mNumberOfBins || 0 == mNumberOfBins) {    return groupPosition;  }  int arrayPosition=-1;  while (groupPosition > -1) {    arrayPosition++;    if (mItemMap[arrayPosition] != 0) {      groupPosition--;    }  }  return arrayPosition;}  }
class C{  private void writeName(JsonGenerator jsonGenerator,Object entity) throws IOException {  jsonGenerator.writeFieldName(NAME);  if (entity instanceof EntitySet) {    jsonGenerator.writeObject(((EntitySet)entity).getName());  } else {    jsonGenerator.writeObject(((Singleton)entity).getName());  }}  }
class C{  public void releaseAddress(){  InstanceManager.throttleManagerInstance().releaseThrottle(throttle,this);  if (consistThrottle != null) {    InstanceManager.throttleManagerInstance().releaseThrottle(consistThrottle,this);    consistThrottle=null;  }  notifyThrottleDisposed();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String readAll(final Reader input) throws IOException {  final char[] b=new char[BUFFER_LENGTH];  try (StringWriter str=new StringWriter(BUFFER_LENGTH)){    while (true) {      final int length=input.read(b);      if (length == EOF) {        break;      } else       if (length == 0) {        throw new RuntimeException();      } else {        str.write(b,0,length);      }    }    return str.toString();  } }  }
class C{  public String toString(String charset){  StringBuilder sb=new StringBuilder();  sb.append("data:");  sb.append(contentType);  if (data != null) {    sb.append(";base64,");    sb.append(Base64.encodeBase64String(data));  } else   if (text != null) {    if (charset == null) {      sb.append(',').append(text);    } else {      byte[] data;      try {        data=text.getBytes(charset);      } catch (      UnsupportedEncodingException e) {        throw new IllegalArgumentException(Messages.INSTANCE.getExceptionMessage(44,charset),e);      }      sb.append(";charset=").append(charset);      sb.append(";base64,");      sb.append(Base64.encodeBase64String(data));    }  } else {    sb.append(',');  }  return sb.toString();}  }
class C{  AddressMessage(NetworkParameters params,byte[] payload,boolean parseLazy,boolean parseRetain,int length) throws ProtocolException {  super(params,payload,0,parseLazy,parseRetain,length);}  }
class C{  public void ifZCmp(final int mode,final Label label){  mv.visitJumpInsn(mode,label);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Deprecated protected static TemplateLoader createLegacyDefaultTemplateLoader(){  return _TemplateAPI.createDefaultTemplateLoader(Configuration.VERSION_2_3_0);}  }
class C{  private void testInputStream() throws IOException {  InputStream is=null;  byte[] buffer=new byte[Settings.BUFFER_SIZE];  try {    is=FileProtection.openInputStream(file);    while (is.read(buffer) != -1) {    }  }  finally {    if (is != null) {      is.close();    }  }}  }
class C{  public void placeVolumes(URI exportMaskURI,Map<URI,Volume> volumes){  maskToVolumes.put(exportMaskURI,new HashMap<>(volumes));  for (  URI volumeId : volumes.keySet()) {    unplacedVolumes.remove(volumeId);  }}  }
class C{  protected String generateExistingConfigurationText(String containerId,ContainerType type){  StringBuilder output=new StringBuilder();  if (this.configurationFactory.isConfigurationRegistered(containerId,type,ConfigurationType.EXISTING)) {    output.append("| [Existing Local Configuration for " + type.getType() + " container|Existing Local Configuration] | ");    output.append("(/) {{" + computedFQCN(this.configurationFactory.getConfigurationClass(containerId,type,ConfigurationType.EXISTING).getName()) + "}} | (/) | (/) | |");  } else {    output.append("| [Existing Local Configuration for " + type.getType() + " container|Existing Local Configuration] | (x) | (x) | (x) | |");  }  return output.toString();}  }
class C{  public void test_toString(){  final Collection<Locale> locVal=Arrays.asList(Locale.CANADA,Locale.CANADA_FRENCH,Locale.CHINA,Locale.FRANCE,Locale.GERMANY,Locale.ITALY,Locale.JAPAN,Locale.KOREA,Locale.PRC,Locale.SIMPLIFIED_CHINESE,Locale.TAIWAN,Locale.TRADITIONAL_CHINESE,Locale.UK,Locale.US);  final Collection<String> locDat=Arrays.asList("CAD","CAD","CNY","EUR","EUR","EUR","JPY","KRW","CNY","CNY","TWD","TWD","GBP","USD");  Iterator<String> dat=locDat.iterator();  for (  Locale l : locVal) {    String d=dat.next().trim();    assertEquals("For locale " + l + " Currency.toString method returns wrong value",Currency.getInstance(l).toString(),d);  }}  }
class C{  public boolean canAlign(){  if (this.tooLong) {    return true;  }  boolean canAlign=true;  Alignment enclosingAlignment=this.enclosing;  while (enclosingAlignment != null) {switch (enclosingAlignment.kind) {case Alignment.ALLOCATION:case Alignment.MESSAGE_ARGUMENTS:      if (enclosingAlignment.isWrapped() && (enclosingAlignment.fragmentIndex > 0 || enclosingAlignment.fragmentCount < 2)) {        return !this.blockAlign;      }    if (enclosingAlignment.tooLong) {      return true;    }  canAlign=false;break;case Alignment.MESSAGE_SEND:switch (this.kind) {case Alignment.ALLOCATION:case Alignment.MESSAGE_ARGUMENTS:case Alignment.MESSAGE_SEND:Alignment superEnclosingAlignment=enclosingAlignment.enclosing;while (superEnclosingAlignment != null) {switch (superEnclosingAlignment.kind) {case Alignment.ALLOCATION:case Alignment.MESSAGE_ARGUMENTS:case Alignment.MESSAGE_SEND:  if (this.scribe.nlsTagCounter == 0) {    enclosingAlignment.blockAlign=true;  }return !this.blockAlign;}superEnclosingAlignment=superEnclosingAlignment.enclosing;}break;}return !this.blockAlign;}enclosingAlignment=enclosingAlignment.enclosing;}return canAlign && !this.blockAlign;}  }
class C{  public static OrderDialogFragment newInstance(String patientUuid,Order order){  Bundle args=new Bundle();  args.putString("patientUuid",patientUuid);  args.putBoolean("new",order == null);  args.putLong("now_millis",DateTime.now().getMillis());  if (order != null) {    args.putString("uuid",order.uuid);    args.putString("instructions",order.instructions);    args.putLong("start_millis",order.start.getMillis());    if (order.stop != null) {      args.putLong("stop_millis",order.stop.getMillis());    }  }  OrderDialogFragment fragment=new OrderDialogFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public void store(int value){}  }
class C{  @Override public void valueChanged(ListSelectionEvent e){  if (e.getValueIsAdjusting()) {    return;  }  if (selectedMovies.size() > 0 && selectedMovie != selectedMovies.get(0)) {    Movie oldValue=selectedMovie;    selectedMovie=selectedMovies.get(0);    if (oldValue != null && oldValue != initialMovie) {      oldValue.removePropertyChangeListener(propertyChangeListener);    }    if (selectedMovie != null && selectedMovie != initialMovie) {      selectedMovie.addPropertyChangeListener(propertyChangeListener);    }    firePropertyChange(SELECTED_MOVIE,oldValue,selectedMovie);  }  if (selectedMovies.size() == 0) {    Movie oldValue=selectedMovie;    selectedMovie=initialMovie;    if (oldValue != null && oldValue != initialMovie) {      oldValue.removePropertyChangeListener(propertyChangeListener);    }    firePropertyChange(SELECTED_MOVIE,oldValue,selectedMovie);  }}  }
class C{  public boolean ownInsertsAreVisible(int type) throws SQLException {  return ResultSet.TYPE_SCROLL_INSENSITIVE == type || ResultSet.TYPE_SCROLL_SENSITIVE == type;}  }
class C{  public boolean[] elements(){  return elements;}  }
class C{  void removeConsumer(final MessageConsumer consumer){  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("removeConsumer(" + consumer + ")");  }synchronized (consumers) {    consumers.remove(consumer);  }}  }
class C{  public StrTokenizer(final char[] input,final char delim){  this(input);  setDelimiterChar(delim);}  }
class C{  public void togglePlayback() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  if (MainApplication.getAudioService().getPlayerState().equals(AudioService.PlayerState.PLAYING) || MainApplication.getAudioService().getPlayerState().equals(AudioService.PlayerState.PAUSED)) {    MainApplication.getAudioService().togglePause();  } else {    checkConnectivity();    boolean isPlaying=isRemoteMoviePlaying();    if (isPlaying) {      pause();    } else {      if (mState == MediaStatus.PLAYER_STATE_IDLE && mIdleReason == MediaStatus.IDLE_REASON_FINISHED) {        loadMedia(getRemoteMediaInformation(),true,0);      } else {        play();      }    }  }}  }
class C{  private void process(String dir,String db,boolean quiet){  ArrayList<String> files=FileLister.getDatabaseFiles(dir,db,true);  if (files.size() == 0 && !quiet) {    printNoDatabaseFilesFound(dir,db);  }  for (  String fileName : files) {    process(fileName,quiet);    if (!quiet) {      out.println("Processed: " + fileName);    }  }}  }
class C{  public void dumpPTA(){  dumpPTA(System.out);}  }
class C{  public SequenceElement parse(InputStream stream) throws IOException, SAXException, ParserConfigurationException {  return parse(stream,"UTF-8");}  }
class C{  public static char binaryToHexDigit(final boolean[] src){  return binaryToHexDigit(src,0);}  }
class C{  public boolean categoryDesignatorIsLabels(){  return (this.key[4] == 0x04);}  }
class C{  public int rsq(int from,int to){  return rsq(1,from,to);}  }
class C{  public static PatchResult load(Context context,String apkPath,HashMap<String,Object> contentMap){  if (!new File(apkPath).exists()) {    return new PatchResult(false,PatchResult.FILE_NOT_FOUND,"FILE not found on " + apkPath);  }  PatchResult result=loadAllCallbacks(context,apkPath,context.getClassLoader());  if (!result.isSuccess()) {    return result;  }  if (loadedPatchCallbacks.getSize() == 0) {    return new PatchResult(false,PatchResult.NO_PATCH_CLASS_HANDLE,"No patch class to be handle");  }  PatchParam lpparam=new PatchParam(loadedPatchCallbacks);  lpparam.context=context;  lpparam.contentMap=contentMap;  return PatchCallback.callAll(lpparam);}  }
class C{  private void startPolling(){  String notifier=Preference.getString(context,Constants.PreferenceFlag.NOTIFIER_TYPE);  if (Constants.NOTIFIER_LOCAL.equals(notifier) && !Constants.AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED) {    LocalNotification.startPolling(context);  }}  }
class C{  public void advanceBy(ReadableDuration duration){  currentTimeMillis.addAndGet(duration.getMillis());}  }
class C{  public static Serializer switchSerializerIfHTML(String ns,String localName,Properties props,Serializer oldSerializer) throws TransformerException {  Serializer newSerializer=oldSerializer;  if (((null == ns) || (ns.length() == 0)) && localName.equalsIgnoreCase("html")) {    if (null != getOutputPropertyNoDefault(OutputKeys.METHOD,props))     return newSerializer;    Properties prevProperties=props;    OutputProperties htmlOutputProperties=new OutputProperties(Method.HTML);    htmlOutputProperties.copyFrom(prevProperties,true);    Properties htmlProperties=htmlOutputProperties.getProperties();{      if (null != oldSerializer) {        Serializer serializer=SerializerFactory.getSerializer(htmlProperties);        Writer writer=oldSerializer.getWriter();        if (null != writer)         serializer.setWriter(writer); else {          OutputStream os=serializer.getOutputStream();          if (null != os)           serializer.setOutputStream(os);        }        newSerializer=serializer;      }    }  }  return newSerializer;}  }
class C{  static int fixRoots(double res[],int rc){  int tc=0;  for (int i=0; i < rc; i++) {    out: {      for (int j=i + 1; j < rc; j++) {        if (isZero(res[i] - res[j])) {          break out;        }      }      res[tc++]=res[i];    }  }  return tc;}  }
class C{  protected void onQuit(String sourceNick,String sourceLogin,String sourceHostname,String reason){}  }
class C{  private final void createTestSchedule(final Scenario scenario){  TransitSchedule schedule=scenario.getTransitSchedule();  TransitScheduleFactory f=schedule.getFactory();  TransitStopFacility f1=f.createTransitStopFacility(Id.create("1",TransitStopFacility.class),new Coord((double)0,(double)0),false);  TransitStopFacility f2=f.createTransitStopFacility(Id.create("2",TransitStopFacility.class),new Coord((double)500,(double)500),false);  TransitStopFacility f3=f.createTransitStopFacility(Id.create("3",TransitStopFacility.class),new Coord((double)1000,(double)0),false);  TransitStopFacility f4=f.createTransitStopFacility(Id.create("4",TransitStopFacility.class),new Coord((double)1500,(double)500),false);  TransitStopFacility f5=f.createTransitStopFacility(Id.create("5",TransitStopFacility.class),new Coord((double)2000,(double)0),false);  schedule.addStopFacility(f1);  schedule.addStopFacility(f2);  schedule.addStopFacility(f3);  schedule.addStopFacility(f4);  schedule.addStopFacility(f5);  TransitLine line1=f.createTransitLine(Id.create("1",TransitLine.class));  List<TransitRouteStop> stops=new ArrayList<TransitRouteStop>();  stops.add(f.createTransitRouteStop(f1,Time.UNDEFINED_TIME,0.0));  stops.add(f.createTransitRouteStop(f2,Time.UNDEFINED_TIME,300.0));  stops.add(f.createTransitRouteStop(f3,Time.UNDEFINED_TIME,600.0));  stops.add(f.createTransitRouteStop(f4,Time.UNDEFINED_TIME,900.0));  stops.add(f.createTransitRouteStop(f5,1200.0,Time.UNDEFINED_TIME));  TransitRoute route1=f.createTransitRoute(Id.create("1",TransitRoute.class),null,stops,"pt");  line1.addRoute(route1);  schedule.addTransitLine(line1);  route1.addDeparture(f.createDeparture(Id.create("1",Departure.class),6.0 * 3600));  TransitLine line2=f.createTransitLine(Id.create("2",TransitLine.class));  List<TransitRouteStop> stops2=new ArrayList<TransitRouteStop>();  stops2.add(f.createTransitRouteStop(f1,Time.UNDEFINED_TIME,0.0));  stops2.add(f.createTransitRouteStop(f3,Time.UNDEFINED_TIME,750.0));  stops2.add(f.createTransitRouteStop(f5,1100.0,Time.UNDEFINED_TIME));  TransitRoute route2=f.createTransitRoute(Id.create("2",TransitRoute.class),null,stops2,"pt");  line2.addRoute(route2);  schedule.addTransitLine(line2);  route2.addDeparture(f.createDeparture(Id.create("2",Departure.class),6.0 * 3600 - 60));}  }
class C{  @Override protected void makeCastlingMove(Move move){  FischerRandomUtils.makeCastlingMove(this,move,initialKingFile,initialShortRookFile,initialLongRookFile);}  }
class C{  protected void kMeansPlusPlusInit(Instances data) throws Exception {  Random randomO=new Random(getSeed());  HashMap<DecisionTableHashKey,String> initC=new HashMap<DecisionTableHashKey,String>();  int index=randomO.nextInt(data.numInstances());  m_ClusterCentroids.add(data.instance(index));  DecisionTableHashKey hk=new DecisionTableHashKey(data.instance(index),data.numAttributes(),true);  initC.put(hk,null);  int iteration=0;  int remainingInstances=data.numInstances() - 1;  if (m_NumClusters > 1) {    double[] distances=new double[data.numInstances()];    double[] cumProbs=new double[data.numInstances()];    for (int i=0; i < data.numInstances(); i++) {      distances[i]=m_DistanceFunction.distance(data.instance(i),m_ClusterCentroids.instance(iteration));    }    for (int i=1; i < m_NumClusters; i++) {      double[] weights=new double[data.numInstances()];      System.arraycopy(distances,0,weights,0,distances.length);      Utils.normalize(weights);      double sumOfProbs=0;      for (int k=0; k < data.numInstances(); k++) {        sumOfProbs+=weights[k];        cumProbs[k]=sumOfProbs;      }      cumProbs[data.numInstances() - 1]=1.0;      double prob=randomO.nextDouble();      for (int k=0; k < cumProbs.length; k++) {        if (prob < cumProbs[k]) {          Instance candidateCenter=data.instance(k);          hk=new DecisionTableHashKey(candidateCenter,data.numAttributes(),true);          if (!initC.containsKey(hk)) {            initC.put(hk,null);            m_ClusterCentroids.add(candidateCenter);          } else {            System.err.println("We shouldn't get here....");          }          remainingInstances--;          break;        }      }      iteration++;      if (remainingInstances == 0) {        break;      }      for (int k=0; k < data.numInstances(); k++) {        if (distances[k] > 0) {          double newDist=m_DistanceFunction.distance(data.instance(k),m_ClusterCentroids.instance(iteration));          if (newDist < distances[k]) {            distances[k]=newDist;          }        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:11.995 -0400",hash_original_method="55A4228DA4C3FEF05B3C611B8D880567",hash_generated_method="8BDE2BB18D773931E3CCC8AFDA2C01FB") public void defaultRouteSet(boolean enabled){  mDefaultRouteSet.set(enabled);}  }
class C{  public int hash(V v){  int h=v.hashCode();  if (h < 0)   h=0 - h;  return h % tableSize;}  }
class C{  protected boolean hasLob(boolean isForMapKey){  return false;}  }
class C{  public void testIndexOfQuoteDoubleAware() throws Exception {  final String[] searchInDoubledQt=new String[]{"A 'strange' \"STRONG\" `SsStRiNg` to be searched in","A ''strange'' \"\"STRONG\"\" ``SsStRiNg`` to be searched in"};  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware(null,null,0));  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware(null,"'",0));  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware("abc",null,0));  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware("abc","",0));  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware("abc","bcd",0));  assertEquals(0,StringUtils.indexOfQuoteDoubleAware("abc","abc",0));  int qtPos=0;  assertEquals(2,qtPos=StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0],"'",0));  assertEquals(10,qtPos=StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0],"'",qtPos + 1));  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0],"'",qtPos + 1));  assertEquals(12,qtPos=StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0],"\"",0));  assertEquals(19,qtPos=StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0],"\"",qtPos + 1));  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0],"\"",qtPos + 1));  assertEquals(21,qtPos=StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0],"`",0));  assertEquals(30,qtPos=StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0],"`",qtPos + 1));  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[0],"`",qtPos + 1));  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[1],"'",0));  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[1],"\"",0));  assertEquals(-1,StringUtils.indexOfQuoteDoubleAware(searchInDoubledQt[1],"`",0));}  }
class C{  public static void main(String[] args){  CopyLocale copyLocale=new CopyLocale();  copyLocale.run(args);}  }
class C{  public void addFragment(XmlFragment fragment){  assertNotNull(fragment);  fragments.add(fragment);  fragment.setParent(this);}  }
class C{  public boolean isWithinRange(final Duration duration){  return duration.compareTo(min) >= 0 && duration.compareTo(max) <= 0;}  }
class C{  private CViewContainerFunctions(){}  }
class C{  private CodeAttribute(ConstPool cp,CodeAttribute src,Map classnames) throws BadBytecode {  super(cp,tag);  maxStack=src.getMaxStack();  maxLocals=src.getMaxLocals();  exceptions=src.getExceptionTable().copy(cp,classnames);  attributes=new ArrayList();  List src_attr=src.getAttributes();  int num=src_attr.size();  for (int i=0; i < num; ++i) {    AttributeInfo ai=(AttributeInfo)src_attr.get(i);    attributes.add(ai.copy(cp,classnames));  }  info=src.copyCode(cp,classnames,exceptions,this);}  }
class C{  public void updatePassword(String username,String password,String newPassword) throws AuthenticatorException {  Debug.logInfo(this.getClass().getName() + " Authenticator updatePassword()",module);}  }
class C{  public static CompileStates instance(Context context){  CompileStates instance=context.get(compileStatesKey);  if (instance == null) {    instance=new CompileStates(context);  }  return instance;}  }
class C{  @Transactional @SuppressWarnings("unchecked") public PersistedNucleotideSequences insertNewNucleotideSequences(Collection<NucleotideSequence> newSequences){  PersistedNucleotideSequences persistedNucleotideSequences=new PersistedNucleotideSequences();  if (newSequences.size() > 0) {    final List<String> newMd5s=new ArrayList<String>(newSequences.size());    for (    NucleotideSequence newSequence : newSequences) {      newMd5s.add(newSequence.getMd5());      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("MD5 of new nucleotide sequence: " + newSequence.getMd5());      }    }    final Map<String,NucleotideSequence> md5ToExistingSequence=new HashMap<String,NucleotideSequence>();    final Query query=entityManager.createQuery("select n from NucleotideSequence n left outer join fetch n.xrefs where n.md5 in (:md5)");    query.setParameter("md5",newMd5s);    for (    NucleotideSequence existingSequence : (List<NucleotideSequence>)query.getResultList()) {      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("Found 1 existing nucleotide sequence with MD5: " + existingSequence.getMd5());      }      md5ToExistingSequence.put(existingSequence.getMd5(),existingSequence);    }    for (    NucleotideSequence candidate : newSequences) {      if (md5ToExistingSequence.keySet().contains(candidate.getMd5())) {        NucleotideSequence existingSequence=md5ToExistingSequence.get(candidate.getMd5());        boolean updateRequired=false;        if (candidate.getCrossReferences() != null) {          for (          NucleotideSequenceXref xref : candidate.getCrossReferences()) {            if (!existingSequence.getCrossReferences().contains(xref)) {              existingSequence.addCrossReference(xref);              updateRequired=true;            }          }        }        if (updateRequired) {          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("Merging nucleotide sequence with new Xrefs: " + existingSequence);          }          entityManager.merge(existingSequence);        }        persistedNucleotideSequences.addPreExistingSequence(existingSequence);      } else {        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("Saving new nucleotide sequence: " + candidate);        }        entityManager.persist(candidate);        persistedNucleotideSequences.addNewSequence(candidate);        md5ToExistingSequence.put(candidate.getMd5(),candidate);      }    }  }  entityManager.flush();  return persistedNucleotideSequences;}  }
class C{  @Ignore("TODO: Disabled for 52351") @Test public void testReplicatedSerialAsyncEventQueueWithPeristenceEnabled_Restart(){  Integer lnPort=(Integer)vm0.invoke(null);  vm1.invoke(createCacheRunnable(lnPort));  vm2.invoke(createCacheRunnable(lnPort));  vm3.invoke(createCacheRunnable(lnPort));  vm4.invoke(createCacheRunnable(lnPort));  String firstDStore=(String)vm1.invoke(null);  vm1.invoke(createReplicatedRegionRunnable());  vm1.invoke(pauseAsyncEventQueueRunnable());  vm1.invoke(null);  vm1.invoke(null);  vm1.invoke(createCacheRunnable(lnPort));  vm1.invoke(null);  vm1.invoke(createReplicatedRegionRunnable());  vm1.invoke(null);}  }
class C{  public void selectLogsPage(){  LGuiUtils.runInEDT(selectLogsPageTask);}  }
class C{  public void postMultipart(String url,Map<String,String> map) throws Exception {  String boundaryStr="-----boundary0";  StringBuilder sb=new StringBuilder();  map.forEach(null);  String request="POST " + url + " HTTP/1.0\r"+ "Content-Type: multipart/form-data; boundary="+ boundaryStr+ "\r"+ "Content-Length: "+ sb.length()+ "\r"+ "\r"+ sb;  request(request,null);}  }
class C{  public AggregatorFactories parseAggregators(XContentParser parser,SearchContext context) throws IOException {  return parseAggregators(parser,context,0);}  }
class C{  public static Map<String,String> commitItemAsParameterMap(CommitItem commitItem){  Map<String,String> returnedForJenkins=new HashMap<>();  for (  String key : jenkinsParams.keySet()) {    if (key.contains("commitid")) {      if (jenkinsParams.get(key).equals("true")) {        returnedForJenkins.put("commitid",commitItem.getBranchDescriptor().getNewBranch());      } else       if (!jenkinsParams.get(key).equals("false")) {        returnedForJenkins.put(jenkinsParams.get(key),commitItem.getBranchDescriptor().getNewBranch());      }    } else     if (key.contains("committer")) {      if (jenkinsParams.get(key).equals("true")) {        returnedForJenkins.put("committer",commitItem.getBranchDescriptor().getCommitter());      } else       if (!jenkinsParams.get(key).equals("false")) {        returnedForJenkins.put(jenkinsParams.get(key),commitItem.getBranchDescriptor().getCommitter());      }    } else     if (key.contains("longid")) {      if (jenkinsParams.get(key).equals("true")) {        returnedForJenkins.put("longid",commitItem.getBranchDescriptor().getCommitId());      } else       if (!jenkinsParams.get(key).equals("false")) {        returnedForJenkins.put(jenkinsParams.get(key),commitItem.getBranchDescriptor().getCommitId());      }    } else     if (key.contains("jenkinsparam.protected")) {      if (jenkinsParams.get(key).equals("true")) {        returnedForJenkins.put("protected",commitItem.getBranchDescriptor().getProtectedBranch());      } else       if (!jenkinsParams.get(key).equals("false")) {        returnedForJenkins.put(jenkinsParams.get(key),commitItem.getBranchDescriptor().getProtectedBranch());      }    } else     if (key.contains("parent")) {      String paraent=commitItem.getParent() == null ? commitItem.getBranchDescriptor().getProtectedBranch() : commitItem.getParent().getBranchDescriptor().getNewBranch();      if (jenkinsParams.get(key).equals("true")) {        returnedForJenkins.put("parent",paraent);      } else       if (!jenkinsParams.get(key).equals("false")) {        returnedForJenkins.put(jenkinsParams.get(key),paraent);      }    }  }  return returnedForJenkins;}  }
class C{  public Fast64CodeWordCoder(final BitVector[] codeWord){  super(codeWord);  this.longCodeWord=new long[codeWord.length];  for (int i=0; i < codeWord.length; i++) {    final BitVector v=codeWord[i];    final int nbits=v.size();    final long longValue=Long.reverse(v.getLong(0,Math.min(64,nbits)) << (64 - nbits));    this.longCodeWord[i]=longValue;  }  length=new int[codeWord.length];  for (int i=length.length; i-- != 0; )   length[i]=codeWord[i].size();}  }
class C{  public void testGetDeployableDir(){  this.fileHandler.createFile("ram:///test.jar");  EJB ejb=(EJB)factory.createDeployable("jonas4x","ram:///test.jar",DeployableType.EJB);  assertEquals(JONAS_BASE + "/ejbjars",deployer.getDeployableDir(ejb));  this.fileHandler.createFile("ram:///test.ear");  EAR ear=(EAR)factory.createDeployable("jonas4x","ram:///test.ear",DeployableType.EAR);  assertEquals(JONAS_BASE + "/apps",deployer.getDeployableDir(ear));  this.fileHandler.createFile("ram:///test.war");  WAR war=(WAR)factory.createDeployable("jonas4x","ram:///test.war",DeployableType.WAR);  assertEquals(JONAS_BASE + "/webapps",deployer.getDeployableDir(war));  this.fileHandler.createFile("ram:///test.rar");  RAR rar=(RAR)factory.createDeployable("jonas4x","ram:///test.rar",DeployableType.RAR);  assertEquals(JONAS_BASE + "/rars",deployer.getDeployableDir(rar));}  }
class C{  private static String SpacesString(int n){  int i=0;  String result="";  if (i < 0) {    PcalDebug.ReportBug("SpacesString called with negative argument");  }  while (i < n) {    result=result + " ";    i=i + 1;  }  return result;}  }
class C{  public static BigDecimal bomPriceLimit(int p_M_Product_ID,int p_M_PriceList_Version_ID) throws SQLException {  return bomPrice(p_M_Product_ID,p_M_PriceList_Version_ID,"PriceLimit");}  }
class C{  @Override public GoogleCredentials createScoped(Collection<String> newScopes){  return new ServiceAccountCredentials(clientId,clientEmail,privateKey,privateKeyId,newScopes,transportFactory,tokenServerUri);}  }
class C{  public final void printLatin1(String string) throws IOException {  if (string == null)   string="null";  int length=string.length();  int offset=0;  char[] chars=_chars;  while (length > 0) {    int sublen=Math.min(length,CHARS_LENGTH);    string.getChars(offset,offset + sublen,chars,0);    printLatin1(chars,0,sublen);    length-=sublen;    offset+=sublen;  }}  }
class C{  public LogEntryIterator(final Statement statement,final ResultSet resultSet){  super(statement,resultSet);}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  @SuppressWarnings("unchecked") public CountRequest source(Map querySource){  try {    XContentBuilder builder=XContentFactory.contentBuilder(Requests.CONTENT_TYPE);    builder.map(querySource);    return source(builder);  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + querySource + "]",e);  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success) {    MInOutLine inout_line=(MInOutLine)getM_InOutLine();    for (    MTransaction trx : MTransaction.getByInOutLine(inout_line)) {      CostEngineFactory.getCostEngine(getAD_Client_ID()).createCostDetail(trx,this);    }  }  return success;}  }
class C{  public void walk(float speed,float degree,boolean invert,float offset,float weight,float walk,float walkAmount){  this.rotateAngleX+=this.calculateRotation(speed,degree,invert,offset,weight,walk,walkAmount);}  }
class C{  public void endDocument(Augmentations augs) throws XNIException {  try {    if (fDocumentHandler != null) {      fDocumentHandler.endDocument();    }    if (fContentHandler != null) {      fContentHandler.endDocument();    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public Tamaki(){  super(3,3,1);}  }
class C{  public static ArrayList<Object> singletons(Instances instances) throws Exception {  ArrayList<Object> setOfItemSets=new ArrayList<Object>();  ItemSet current;  for (int i=0; i < instances.numAttributes(); i++) {    if (instances.attribute(i).isNumeric()) {      throw new Exception("Can't handle numeric attributes!");    }    for (int j=0; j < instances.attribute(i).numValues(); j++) {      current=new ItemSet(instances.numInstances());      current.m_items=new int[instances.numAttributes()];      for (int k=0; k < instances.numAttributes(); k++) {        current.m_items[k]=-1;      }      current.m_items[i]=j;      setOfItemSets.add(current);    }  }  return setOfItemSets;}  }
class C{  public String abbreviate(){  final String s=get();  return s.substring(0,Math.min(s.length(),9));}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.remote_binding_options);  Button button=(Button)findViewById(R.id.bind_normal);  button.setOnClickListener(mBindNormalListener);  button=(Button)findViewById(R.id.bind_not_foreground);  button.setOnClickListener(mBindNotForegroundListener);  button=(Button)findViewById(R.id.bind_above_client);  button.setOnClickListener(mBindAboveClientListener);  button=(Button)findViewById(R.id.bind_allow_oom);  button.setOnClickListener(mBindAllowOomListener);  button=(Button)findViewById(R.id.bind_waive_priority);  button.setOnClickListener(mBindWaivePriorityListener);  button=(Button)findViewById(R.id.bind_important);  button.setOnClickListener(mBindImportantListener);  button=(Button)findViewById(R.id.bind_with_activity);  button.setOnClickListener(mBindWithActivityListener);  button=(Button)findViewById(R.id.unbind);  button.setOnClickListener(mUnbindListener);  mCallbackText=(TextView)findViewById(R.id.callback);  mCallbackText.setText("Not attached.");}  }
class C{  public static OptionBuilder withArgName(String name){  OptionBuilder.argName=name;  return instance;}  }
class C{  private void updateDistributionProperties(){  double f=laplaceCorrectionEnabled ? 1 / totalWeight : Double.MIN_VALUE;  double logFactorCoefficient=Math.sqrt(2 * Math.PI);  for (int i=0; i < numberOfClasses; i++) {    priors[i]=Math.log(classWeights[i] / totalWeight);  }  for (int i=0; i < numberOfAttributes; i++) {    if (nominal[i]) {      for (int j=0; j < numberOfClasses; j++) {        for (int k=0; k < weightSums[i][j].length; k++) {          distributionProperties[i][j][k]=Math.log((weightSums[i][j][k] + f) / (classWeights[j] + f * weightSums[i][j].length));        }      }    } else {      for (int j=0; j < numberOfClasses; j++) {        double classWeight=classWeights[j] - weightSums[i][j][INDEX_MISSING_WEIGHTS];        distributionProperties[i][j][INDEX_MEAN]=weightSums[i][j][INDEX_VALUE_SUM] / classWeight;        double standardDeviationSquared=(weightSums[i][j][INDEX_SQUARED_VALUE_SUM] - weightSums[i][j][INDEX_VALUE_SUM] * weightSums[i][j][INDEX_VALUE_SUM] / classWeight) / (classWeight - 1);        double standardDeviation=1e-3;        if (standardDeviationSquared > 0) {          standardDeviation=Math.sqrt(standardDeviationSquared);          if (Double.isNaN(standardDeviation) || standardDeviation <= 1e-3) {            standardDeviation=1e-3;          }        }        distributionProperties[i][j][INDEX_STANDARD_DEVIATION]=standardDeviation;        distributionProperties[i][j][INDEX_LOG_FACTOR]=Math.log(distributionProperties[i][j][INDEX_STANDARD_DEVIATION] * logFactorCoefficient);      }    }  }  modelRecentlyUpdated=false;}  }
class C{  public CActionContextHelp(final JFrame parent){  super("Context Help");  m_parent=Preconditions.checkNotNull(parent,"IE02863: parent argument can not be null");  putValue(MNEMONIC_KEY,KeyEvent.VK_C);  putValue(ACCELERATOR_KEY,HotKeys.CONTEXT_HELP_HK.getKeyStroke());}  }
class C{  public void decrement() throws IOException {  writeCode(DECREMENT);}  }
class C{  public static ArrayType v(Type baseType,int numDimensions){  if (numDimensions < 1)   throw new RuntimeException("attempt to create array with " + numDimensions + " dimensions");  ArrayType ret;  Type elementType;  if (numDimensions == 1) {    elementType=baseType;  } else {    elementType=ArrayType.v(baseType,numDimensions - 1);  }  ret=elementType.getArrayType();  if (ret == null) {    ret=new ArrayType(baseType,numDimensions);    elementType.setArrayType(ret);  }  return ret;}  }
class C{  protected float calculateAnimationDisplacement(float initialVelocity,float duration){  return initialVelocity * duration / 2000;}  }
class C{  public boolean pageScroll(int direction){  boolean down=direction == View.FOCUS_DOWN;  int height=getHeight();  if (down) {    mTempRect.top=getScrollY() + height;    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      if (mTempRect.top + height > view.getBottom()) {        mTempRect.top=view.getBottom() - height;      }    }  } else {    mTempRect.top=getScrollY() - height;    if (mTempRect.top < 0) {      mTempRect.top=0;    }  }  mTempRect.bottom=mTempRect.top + height;  return scrollAndFocus(direction,mTempRect.top,mTempRect.bottom);}  }
class C{  public void deleteUnused(){  while (queue != null) {    Reference<? extends Object> ref=queue.poll();    if (ref == null) {      break;    }    deleteFile(ref,null);  }}  }
class C{  public void testManyConnectionsUsingOneThread(){  try {    int maxConnections=getConnectionNum();    openConnections(maxConnections);    assertEquals("Incorrect number of created connections",maxConnections,vc.size());  } catch (  Exception e) {    fail("Unexpected Exception " + e.toString());  }}  }
class C{  public static boolean isValidWithNetMask(String address){  return isValidIPv4WithNetmask(address) || isValidIPv6WithNetmask(address);}  }
class C{  public SQLTimeoutException(Throwable cause){  super(cause);}  }
class C{  public void initializeDefinition(String definition){  m_definition=definition;  s_logger.log(Level.FINEST,toString());}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","llhc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  @Override public boolean rollbackTransaction() throws IOException {  if (inTransaction) {    inTransaction=false;    if (!hardWriteMode) {      rollBackOut.close();      finishTransaction();      return true;    }  }  File rollBackFile=getRollBackFile();  if (!rollBackFile.exists() || rollBackFile.length() == 0)   return true;  InputStream rfIn=new BufferedInputStream(new FileInputStream(rollBackFile));  committedNextRowId=readRollBackHeader(rfIn);synchronized (this) {    rwRaf.seek(NEXT_ROW_ID_POS);    rwRaf.writeInt(committedNextRowId);    rwRaf.setLength(HEADER_SIZE + recordSize * committedNextRowId);  }  int numSoftCommitRecords=Util.readInt(rfIn);  byte[] recordData=new byte[recordSize];  byte[] idBytes=new byte[4];  for (int softCommitRecordsCount=0; softCommitRecordsCount < numSoftCommitRecords; softCommitRecordsCount++) {    if (database.isCancelOpen)     return false;    if (!readFullyForRollBack(rfIn,idBytes,true))     break;    int id=Util.byteArrayToInt(idBytes,0);    if (id > committedNextRowId) {      setTableCorrupt();      throw new IllegalStateException("rollback log attempted to write to a row not in committed set," + " row id requested: " + id + ", this: "+ this);    }    readFullyForRollBack(rfIn,recordData,false);synchronized (this) {      rwRaf.seek(recordSize * id + HEADER_SIZE);      rwRaf.write(recordData);    }  }  rwRaf.getFD().sync();  rfIn.close();  getRollBackFile().delete();  return true;}  }
class C{  public boolean trySet(K key,V value,boolean onlyIfUnchanged){  VersionedValue current=map.get(key);  if (onlyIfUnchanged) {    VersionedValue old=getValue(key,readLogId);    if (!map.areValuesEqual(old,current)) {      long tx=getTransactionId(current.operationId);      if (tx == transaction.transactionId) {        if (value == null) {          return true;        } else         if (current.value == null) {        } else {          return false;        }      } else {        return false;      }    }  }  VersionedValue newValue=new VersionedValue();  newValue.operationId=getOperationId(transaction.transactionId,transaction.logId);  newValue.value=value;  if (current == null) {    transaction.log(mapId,key,current);    VersionedValue old=map.putIfAbsent(key,newValue);    if (old != null) {      transaction.logUndo();      return false;    }    return true;  }  long id=current.operationId;  if (id == 0) {    transaction.log(mapId,key,current);    if (!map.replace(key,current,newValue)) {      transaction.logUndo();      return false;    }    return true;  }  int tx=getTransactionId(current.operationId);  if (tx == transaction.transactionId) {    transaction.log(mapId,key,current);    if (!map.replace(key,current,newValue)) {      transaction.logUndo();      return false;    }    return true;  }  return false;}  }
class C{  @Override public void prepare(String sql,Result<CursorPrepareSync> result){  result.ok(_kraken.query(sql).prepare());}  }
class C{  public void clearCategories(){  super.removeElement(Category.KEY);}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public static double intersectRayTriangleFront(double originX,double originY,double originZ,double dirX,double dirY,double dirZ,double v0X,double v0Y,double v0Z,double v1X,double v1Y,double v1Z,double v2X,double v2Y,double v2Z,double epsilon){  double edge1X=v1X - v0X;  double edge1Y=v1Y - v0Y;  double edge1Z=v1Z - v0Z;  double edge2X=v2X - v0X;  double edge2Y=v2Y - v0Y;  double edge2Z=v2Z - v0Z;  double pvecX=dirY * edge2Z - dirZ * edge2Y;  double pvecY=dirZ * edge2X - dirX * edge2Z;  double pvecZ=dirX * edge2Y - dirY * edge2X;  double det=edge1X * pvecX + edge1Y * pvecY + edge1Z * pvecZ;  if (det <= epsilon)   return -1.0;  double tvecX=originX - v0X;  double tvecY=originY - v0Y;  double tvecZ=originZ - v0Z;  double u=tvecX * pvecX + tvecY * pvecY + tvecZ * pvecZ;  if (u < 0.0 || u > det)   return -1.0;  double qvecX=tvecY * edge1Z - tvecZ * edge1Y;  double qvecY=tvecZ * edge1X - tvecX * edge1Z;  double qvecZ=tvecX * edge1Y - tvecY * edge1X;  double v=dirX * qvecX + dirY * qvecY + dirZ * qvecZ;  if (v < 0.0 || u + v > det)   return -1.0;  double invDet=1.0 / det;  double t=(edge2X * qvecX + edge2Y * qvecY + edge2Z * qvecZ) * invDet;  return t;}  }
class C{  @Override public final int skipBytes(int n) throws IOException {  return dis.skipBytes(n);}  }
class C{  private void init(Object[] parameters){  this.bean=new ApplicationExceptionBean();  setId(Long.valueOf(System.currentTimeMillis() % Long.MAX_VALUE).toString());  String className=getClass().getName();  bean.setMessageKey(MESSAGE_PREFIX + className.substring(className.lastIndexOf(".") + 1));  bean.setMessageParams(toStringArray(parameters));}  }
class C{  public boolean pathExists(String path) throws KeeperException, InterruptedException {  return zkClient.exists(path,true);}  }
class C{  public KeyRecordIterator select(String namespace,String set,Filter filter,Map<String,String> sortMap,Qualifier... qualifiers){  Statement stmt=new Statement();  stmt.setNamespace(namespace);  stmt.setSetName(set);  if (filter != null)   stmt.setFilters(filter);  return select(stmt,sortMap,qualifiers);}  }
class C{  private static void parseImageryFile(Resources r,InputStream is,final boolean async) throws IOException {  JsonReader reader=new JsonReader(new InputStreamReader(is,"UTF-8"));  try {    try {      reader.beginArray();      while (reader.hasNext()) {        TileLayerServer osmts=readServer(reader,r,async);        if (osmts != null) {          if (osmts.overlay && !overlayServerList.containsKey(osmts.id)) {            overlayServerList.put(osmts.id,osmts);          } else           if (!backgroundServerList.containsKey(osmts.id)) {            backgroundServerList.put(osmts.id,osmts);          }        }      }      reader.endArray();    } catch (    IOException e) {      e.printStackTrace();    }  }  finally {    reader.close();  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public int findTokenEnd(CharSequence text,int cursor){  int i=cursor;  int len=text.length();  char c;  while (i < len) {    if ((c=text.charAt(i)) == ',' || c == ';') {      return i;    } else {      i++;    }  }  return len;}  }
class C{  @SuppressWarnings({"ForLoopReplaceableByForEach","unchecked"}) private Map<K,EntryProcessorResult> updateWithBatch(GridCacheOperation op,Collection<? extends K> keys,@Nullable Iterable<?> vals,@Nullable Object[] invokeArgs,@Nullable ExpiryPolicy expiryPlc,GridCacheVersion ver,@Nullable CacheEntryPredicate[] filter,boolean keepBinary,UUID subjId,String taskName) throws IgniteCheckedException {  List<GridCacheEntryEx> locked=lockEntries(keys);  try {    int size=locked.size();    Map<Object,Object> putMap=null;    Collection<Object> rmvKeys=null;    List<CacheObject> writeVals=null;    Map<K,EntryProcessorResult> invokeResMap=op == TRANSFORM ? U.<K,EntryProcessorResult>newHashMap(size) : null;    List<GridCacheEntryEx> filtered=new ArrayList<>(size);    CachePartialUpdateCheckedException err=null;    Iterator<?> valsIter=vals != null ? vals.iterator() : null;    boolean intercept=ctx.config().getInterceptor() != null;    for (int i=0; i < size; i++) {      GridCacheEntryEx entry=locked.get(i);      Object val=valsIter != null ? valsIter.next() : null;      if (val == null && op != DELETE)       throw new NullPointerException("Null value.");      try {        try {          if (!ctx.isAllLocked(entry,filter)) {            if (log.isDebugEnabled())             log.debug("Entry did not pass the filter (will skip write) [entry=" + entry + ", filter="+ Arrays.toString(filter)+ ']');            continue;          }        } catch (        IgniteCheckedException e) {          if (err == null)           err=partialUpdateException();          err.add(F.asList(entry.key()),e);          continue;        }        if (op == TRANSFORM) {          ctx.kernalContext().resource().inject(val,GridResourceIoc.AnnotationSet.ENTRY_PROCESSOR,ctx.name());          EntryProcessor<Object,Object,Object> entryProcessor=(EntryProcessor<Object,Object,Object>)val;          CacheObject old=entry.innerGet(null,null,true,true,true,true,true,subjId,entryProcessor,taskName,null,keepBinary);          Object oldVal=null;          CacheInvokeEntry<Object,Object> invokeEntry=new CacheInvokeEntry<>(entry.key(),old,entry.version(),keepBinary,entry);          CacheObject updated;          Object updatedVal=null;          CacheInvokeResult invokeRes=null;          try {            Object computed=entryProcessor.process(invokeEntry,invokeArgs);            updatedVal=ctx.unwrapTemporary(invokeEntry.getValue());            updated=ctx.toCacheObject(updatedVal);            if (computed != null)             invokeRes=CacheInvokeResult.fromResult(ctx.unwrapTemporary(computed));          } catch (          Exception e) {            invokeRes=CacheInvokeResult.fromError(e);            updated=old;          }          if (invokeRes != null)           invokeResMap.put((K)entry.key().value(ctx.cacheObjectContext(),false),invokeRes);          if (updated == null) {            if (intercept) {              IgniteBiTuple<Boolean,?> interceptorRes=ctx.config().getInterceptor().onBeforeRemove(new CacheLazyEntry(ctx,entry.key(),invokeEntry.key(),old,oldVal,keepBinary));              if (ctx.cancelRemove(interceptorRes))               continue;            }            if (putMap != null) {              err=updatePartialBatch(filtered,ver,writeVals,putMap,null,expiryPlc,keepBinary,err,subjId,taskName);              putMap=null;              writeVals=null;              filtered=new ArrayList<>();            }            if (rmvKeys == null)             rmvKeys=new ArrayList<>(size);            rmvKeys.add(entry.key().value(ctx.cacheObjectContext(),false));          } else {            if (intercept) {              Object interceptorVal=ctx.config().getInterceptor().onBeforePut(new CacheLazyEntry(ctx,entry.key(),invokeEntry.getKey(),old,oldVal,keepBinary),updatedVal);              if (interceptorVal == null)               continue;              updated=ctx.toCacheObject(ctx.unwrapTemporary(interceptorVal));            }            if (rmvKeys != null) {              err=updatePartialBatch(filtered,ver,null,null,rmvKeys,expiryPlc,keepBinary,err,subjId,taskName);              rmvKeys=null;              filtered=new ArrayList<>();            }            if (putMap == null) {              putMap=new LinkedHashMap<>(size,1.0f);              writeVals=new ArrayList<>(size);            }            putMap.put(CU.value(entry.key(),ctx,false),CU.value(updated,ctx,false));            writeVals.add(updated);          }        } else         if (op == UPDATE) {          CacheObject cacheVal=ctx.toCacheObject(val);          if (intercept) {            CacheObject old=entry.innerGet(null,null,true,ctx.loadPreviousValue(),true,true,true,subjId,null,taskName,null,keepBinary);            Object interceptorVal=ctx.config().getInterceptor().onBeforePut(new CacheLazyEntry(ctx,entry.key(),old,keepBinary),val);            if (interceptorVal == null)             continue;            cacheVal=ctx.toCacheObject(ctx.unwrapTemporary(interceptorVal));          }          if (putMap == null) {            putMap=new LinkedHashMap<>(size,1.0f);            writeVals=new ArrayList<>(size);          }          putMap.put(CU.value(entry.key(),ctx,false),CU.value(cacheVal,ctx,false));          writeVals.add(cacheVal);        } else {          assert op == DELETE;          if (intercept) {            CacheObject old=entry.innerGet(null,null,true,ctx.loadPreviousValue(),true,true,true,subjId,null,taskName,null,keepBinary);            IgniteBiTuple<Boolean,?> interceptorRes=ctx.config().getInterceptor().onBeforeRemove(new CacheLazyEntry(ctx,entry.key(),old,keepBinary));            if (ctx.cancelRemove(interceptorRes))             continue;          }          if (rmvKeys == null)           rmvKeys=new ArrayList<>(size);          rmvKeys.add(entry.key().value(ctx.cacheObjectContext(),false));        }        filtered.add(entry);      } catch (      IgniteCheckedException e) {        if (err == null)         err=partialUpdateException();        err.add(F.asList(entry.key()),e);      }catch (      GridCacheEntryRemovedException ignore) {        assert false : "Entry cannot become obsolete while holding lock.";      }    }    if (putMap != null || rmvKeys != null) {      err=updatePartialBatch(filtered,ver,writeVals,putMap,rmvKeys,expiryPlc,keepBinary,err,subjId,taskName);    } else     assert filtered.isEmpty();    if (err != null)     throw err;    return invokeResMap;  }  finally {    unlockEntries(locked);  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public void addSeriesRenderer(int index,SimpleSeriesRenderer renderer){  mRenderers.add(index,renderer);}  }
class C{  public static ServiceNotPublishedException convertToApi(org.oscm.internal.types.exception.ServiceNotPublishedException oldEx){  return convertExceptionToApi(oldEx,ServiceNotPublishedException.class);}  }
class C{  public final int readInt(){  int ch1=read();  int ch2=read() & 0xFF;  int ch3=read() & 0xFF;  int ch4=read() & 0xFF;  return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4 << 0));}  }
class C{  public void registerMediaListener(MediaListener mediaListener){  mediaListenerList.add(mediaListener);}  }
class C{  public Builder accessTokenGroups(GroupMembershipType accessTokenGroupsRequested){  this.accessTokenGroupsRequested=accessTokenGroupsRequested;  return this;}  }
class C{  public void drawTile(VPFGraphicWarehouse warehouse,double dpplat,double dpplon,LatLonPoint ll1,LatLonPoint ll2){  double ll1lat=ll1.getY();  double ll1lon=ll1.getX();  double ll2lat=ll2.getY();  double ll2lon=ll2.getX();  try {    for (List<Object> text=new ArrayList<Object>(); parseRow(text); ) {      String textval=(String)text.get(textColumn);      CoordFloatString coords=(CoordFloatString)text.get(coordColumn);      double lat=coords.getYasFloat(0);      double lon=coords.getXasFloat(0);      if ((lat > ll2lat) && (lat < ll1lat) && (lon > ll1lon)&& (lon < ll2lon)) {        warehouse.createText(covtable,this,text,lat,lon,textval);      }    }  } catch (  FormatException f) {    System.out.println("Exception: " + f.getClass() + " "+ f.getMessage());  }}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  private ArrayList<AStarNode> findNeighbours(AStarNode node){  ArrayList<AStarNode> r=new ArrayList<AStarNode>();  int x=node.x;  int y=node.y;  int z=node.z;  int dist=node.getG();  if (node.parent != null) {    int px=node.parent.x;    int py=node.parent.y;    int pz=node.parent.z;    boolean stairs=py != y;    int nY;    int dx=(x - px) / Math.max(Math.abs(x - px),1);    int dz=(z - pz) / Math.max(Math.abs(z - pz),1);    if (dx != 0 && dz != 0) {      if (stairs) {        return getAllNeighborsWithoutParent(x,y,z,dx,dz,node);      }      int leftY=0;      int rightY=0;      nY=getGroundNodeHeight(x,y,z + dz);      if (nY > 0) {        leftY=nY;        r.add(new AStarNode(x,nY,z + dz,dist + 1,node));      }      nY=getGroundNodeHeight(x + dx,y,z);      if (nY > 0) {        rightY=nY;        r.add(new AStarNode(x + dx,nY,z,dist + 1,node));      }      if (leftY != 0 || rightY != 0) {        r.add(new AStarNode(x + dx,Math.max(leftY,rightY),z + dz,dist + 2,node));      }      if (leftY != 0) {        if (getGroundNodeHeight(x - dx,py,z) == 0) {          r.add(new AStarNode(x - dx,leftY,z + dz,dist + 2,node));        }      }      if (rightY != 0) {        if (getGroundNodeHeight(x,py,z - dz) == 0) {          r.add(new AStarNode(x + dx,rightY,z - dz,dist + 2,node));        }      }    } else {      if (dx == 0) {        nY=getGroundNodeHeight(x,y,z + dz);        if (nY > 0) {          r.add(new AStarNode(x,nY,z + dz,dist + 1,node));          if (stairs) {            r.add(new AStarNode(x + 1,nY,z + dz,dist + 2,node));            r.add(new AStarNode(x - 1,nY,z + dz,dist + 2,node));          } else {            int nnY=getGroundNodeHeight(x + 1,nY,z);            if (nnY == 0) {              r.add(new AStarNode(x + 1,nY,z + dz,dist + 2,node));            }            nnY=getGroundNodeHeight(x - 1,nY,z);            if (nnY == 0) {              r.add(new AStarNode(x - 1,nY,z + dz,dist + 2,node));            }          }        }      } else {        nY=getGroundNodeHeight(x + dx,y,z);        if (nY > 0) {          r.add(new AStarNode(x + dx,nY,z,dist + 1,node));          if (stairs) {            r.add(new AStarNode(x + dx,nY,z + 1,dist + 2,node));            r.add(new AStarNode(x + dx,nY,z - 1,dist + 2,node));          } else {            int nnY=getGroundNodeHeight(x,nY,z + 1);            if (nnY == 0) {              r.add(new AStarNode(x + dx,nY,z + 1,dist + 2,node));            }            nnY=getGroundNodeHeight(x,nY,z - 1);            if (nnY == 0) {              r.add(new AStarNode(x + dx,nY,z - 1,dist + 2,node));            }          }        }      }    }  } else {    for (    int[] offset : neighbourOffsets) {      int nY=getGroundNodeHeight(x + offset[0],y,z + offset[1]);      if (nY > 0) {        r.add(new AStarNode(x + offset[0],nY,z + offset[1],nY,node));      }    }  }  return r;}  }
class C{  private void interruptWorkers(){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers)     w.interruptIfStarted();  }  finally {    mainLock.unlock();  }}  }
class C{  public boolean isNaturalOrdering(){  return comparator == ComparableComparator.INSTANCE;}  }
class C{  protected final void fireExpressionChange(){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i) {    ((ExpressionListener)lstnrs[i]).expressionChanged(this);  }}  }
class C{  public MovingAverageProcessor(double alpha){  if ((alpha < 0.0) || (alpha > 1.0)) {    throw new IllegalArgumentException("Alpha must be between zero and one.");  }  this.alpha=alpha;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a hex string: ");  String hexString=input.next();  System.out.println("The decimal equivalent of " + hexString + " is "+ hex2Dec(hexString));}  }
class C{  public void showDialog(WindowBasedTextGUI textGUI,boolean blockUntilClosed){  textGUI.addWindow(this);  if (blockUntilClosed) {    waitUntilClosed();  }}  }
class C{  private String createLambdaFunction(DeployConfig config,FunctionCode functionCode) throws IOException {  CreateFunctionRequest createFunctionRequest=new CreateFunctionRequest().withDescription(config.getDescription()).withFunctionName(config.getFunctionName()).withHandler(config.getHandler()).withMemorySize(config.getMemorySize()).withPublish(config.getPublish()).withTimeout(config.getTimeout()).withRole(config.getRole()).withRuntime(config.getRuntime()).withCode(functionCode);  if (config.getSubnets().size() > 0 && config.getSecurityGroups().size() > 0) {    VpcConfig vpcConfig=new VpcConfig().withSubnetIds(config.getSubnets()).withSecurityGroupIds(config.getSecurityGroups());    createFunctionRequest.withVpcConfig(vpcConfig);  }  logger.log("Lambda create function request:%n%s%n",createFunctionRequest.toString());  CreateFunctionResult uploadFunctionResult=client.createFunction(createFunctionRequest);  logger.log("Lambda create response:%n%s%n",uploadFunctionResult.toString());  return uploadFunctionResult.getVersion();}  }
class C{  public static final TimeoutToken addTimeoutHandler(long runTime,Runnable handler){  TimeoutToken token=new TimeoutToken(runTime,handler);synchronized (todolist) {    todolist.add(token);    Collections.sort(todolist);    if (timeoutThread != null)     timeoutThread.interrupt(); else {      timeoutThread=new TimeoutThread();      timeoutThread.setDaemon(true);      timeoutThread.start();    }  }  return token;}  }
class C{  protected AbstractTrap(SootClass exception,UnitBox beginUnitBox,UnitBox endUnitBox,UnitBox handlerUnitBox){  this.exception=exception;  this.beginUnitBox=beginUnitBox;  this.endUnitBox=endUnitBox;  this.handlerUnitBox=handlerUnitBox;  unitBoxes=new ArrayList();  unitBoxes.add(beginUnitBox);  unitBoxes.add(endUnitBox);  unitBoxes.add(handlerUnitBox);  unitBoxes=Collections.unmodifiableList(unitBoxes);}  }
class C{  public AbstractMouseHandlerFX(String id,boolean altKey,boolean ctrlKey,boolean metaKey,boolean shiftKey){  ParamChecks.nullNotPermitted(id,"id");  this.id=id;  this.enabled=true;  this.altKey=altKey;  this.ctrlKey=ctrlKey;  this.metaKey=metaKey;  this.shiftKey=shiftKey;}  }
class C{  public boolean isStepupPending(){  return stepupPending;}  }
class C{  @SuppressLint("Override") public static String replaceUnicodeDigits(String number){  StringBuilder normalizedDigits=new StringBuilder(number.length());  for (  char c : number.toCharArray()) {    int digit=Character.digit(c,10);    if (digit != -1) {      normalizedDigits.append(digit);    } else {      normalizedDigits.append(c);    }  }  return normalizedDigits.toString();}  }
class C{  public void pause(){  torrentHandle.pause();}  }
class C{  public void testIssue352() throws Exception {  ObjectMapper mapper=new ObjectMapper();  mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE,JsonTypeInfo.As.PROPERTY);  DiscussBean d1=new DiscussBean();  d1.subject="mouse";  d1.weight=88;  DomainBeanWrapper wrapper=new DomainBeanWrapper();  wrapper.name="mickey";  wrapper.myBean=d1;  String json=mapper.writeValueAsString(wrapper);  DomainBeanWrapper result=mapper.readValue(json,DomainBeanWrapper.class);  assertNotNull(result);  assertNotNull(wrapper.myBean);  assertSame(DiscussBean.class,wrapper.myBean.getClass());}  }
class C{  @Override public boolean isApplicable(XStudent student){  return iStudentIds.contains(student.getStudentId());}  }
class C{  public DetectorResult detect() throws NotFoundException {  ResultPoint[] cornerPoints=rectangleDetector.detect();  ResultPoint pointA=cornerPoints[0];  ResultPoint pointB=cornerPoints[1];  ResultPoint pointC=cornerPoints[2];  ResultPoint pointD=cornerPoints[3];  List<ResultPointsAndTransitions> transitions=new ArrayList<ResultPointsAndTransitions>(4);  transitions.add(transitionsBetween(pointA,pointB));  transitions.add(transitionsBetween(pointA,pointC));  transitions.add(transitionsBetween(pointB,pointD));  transitions.add(transitionsBetween(pointC,pointD));  Collections.sort(transitions,new ResultPointsAndTransitionsComparator());  ResultPointsAndTransitions lSideOne=transitions.get(0);  ResultPointsAndTransitions lSideTwo=transitions.get(1);  Map<ResultPoint,Integer> pointCount=new HashMap<ResultPoint,Integer>();  increment(pointCount,lSideOne.getFrom());  increment(pointCount,lSideOne.getTo());  increment(pointCount,lSideTwo.getFrom());  increment(pointCount,lSideTwo.getTo());  ResultPoint maybeTopLeft=null;  ResultPoint bottomLeft=null;  ResultPoint maybeBottomRight=null;  for (  Map.Entry<ResultPoint,Integer> entry : pointCount.entrySet()) {    ResultPoint point=entry.getKey();    Integer value=entry.getValue();    if (value == 2) {      bottomLeft=point;    } else {      if (maybeTopLeft == null) {        maybeTopLeft=point;      } else {        maybeBottomRight=point;      }    }  }  if (maybeTopLeft == null || bottomLeft == null || maybeBottomRight == null) {    throw NotFoundException.getNotFoundInstance();  }  ResultPoint[] corners={maybeTopLeft,bottomLeft,maybeBottomRight};  ResultPoint.orderBestPatterns(corners);  ResultPoint bottomRight=corners[0];  bottomLeft=corners[1];  ResultPoint topLeft=corners[2];  ResultPoint topRight;  if (!pointCount.containsKey(pointA)) {    topRight=pointA;  } else   if (!pointCount.containsKey(pointB)) {    topRight=pointB;  } else   if (!pointCount.containsKey(pointC)) {    topRight=pointC;  } else {    topRight=pointD;  }  int dimensionTop=transitionsBetween(topLeft,topRight).getTransitions();  int dimensionRight=transitionsBetween(bottomRight,topRight).getTransitions();  if ((dimensionTop & 0x01) == 1) {    dimensionTop++;  }  dimensionTop+=2;  if ((dimensionRight & 0x01) == 1) {    dimensionRight++;  }  dimensionRight+=2;  BitMatrix bits;  ResultPoint correctedTopRight;  if (4 * dimensionTop >= 7 * dimensionRight || 4 * dimensionRight >= 7 * dimensionTop) {    correctedTopRight=correctTopRightRectangular(bottomLeft,bottomRight,topLeft,topRight,dimensionTop,dimensionRight);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    dimensionTop=transitionsBetween(topLeft,correctedTopRight).getTransitions();    dimensionRight=transitionsBetween(bottomRight,correctedTopRight).getTransitions();    if ((dimensionTop & 0x01) == 1) {      dimensionTop++;    }    if ((dimensionRight & 0x01) == 1) {      dimensionRight++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionTop,dimensionRight);  } else {    int dimension=Math.min(dimensionRight,dimensionTop);    correctedTopRight=correctTopRight(bottomLeft,bottomRight,topLeft,topRight,dimension);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    int dimensionCorrected=Math.max(transitionsBetween(topLeft,correctedTopRight).getTransitions(),transitionsBetween(bottomRight,correctedTopRight).getTransitions());    dimensionCorrected++;    if ((dimensionCorrected & 0x01) == 1) {      dimensionCorrected++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionCorrected,dimensionCorrected);  }  return new DetectorResult(bits,new ResultPoint[]{topLeft,bottomLeft,bottomRight,correctedTopRight});}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void testPropagationPrimary() throws Exception {  mode=PRIMARY;  checkPropagation();}  }
class C{  public int size(){  return this.compositeOutputStream.size();}  }
class C{  public boolean isAskForUsername(){  return askForUsername;}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(g);  Dimension dim=getSize();  Color c1=UIManager.getColor("Label.disabledShadow");  Color c2=UIManager.getColor("Label.disabledForeground");  if (osxSizeGrip != null) {    g.drawImage(osxSizeGrip,dim.width - 16,dim.height - 16,null);    return;  }  ComponentOrientation orientation=getComponentOrientation();  if (orientation.isLeftToRight()) {    int width=dim.width-=3;    int height=dim.height-=3;    g.setColor(c1);    g.fillRect(width - 9,height - 1,3,3);    g.fillRect(width - 5,height - 1,3,3);    g.fillRect(width - 1,height - 1,3,3);    g.fillRect(width - 5,height - 5,3,3);    g.fillRect(width - 1,height - 5,3,3);    g.fillRect(width - 1,height - 9,3,3);    g.setColor(c2);    g.fillRect(width - 9,height - 1,2,2);    g.fillRect(width - 5,height - 1,2,2);    g.fillRect(width - 1,height - 1,2,2);    g.fillRect(width - 5,height - 5,2,2);    g.fillRect(width - 1,height - 5,2,2);    g.fillRect(width - 1,height - 9,2,2);  } else {    int height=dim.height-=3;    g.setColor(c1);    g.fillRect(10,height - 1,3,3);    g.fillRect(6,height - 1,3,3);    g.fillRect(2,height - 1,3,3);    g.fillRect(6,height - 5,3,3);    g.fillRect(2,height - 5,3,3);    g.fillRect(2,height - 9,3,3);    g.setColor(c2);    g.fillRect(10,height - 1,2,2);    g.fillRect(6,height - 1,2,2);    g.fillRect(2,height - 1,2,2);    g.fillRect(6,height - 5,2,2);    g.fillRect(2,height - 5,2,2);    g.fillRect(2,height - 9,2,2);  }}  }
class C{  public static String toMapString(Map self){  return toMapString(self,-1);}  }
class C{  public static CC parseComponentConstraint(String s){  CC cc=new CC();  if (s == null || s.isEmpty())   return cc;  String[] parts=toTrimmedTokens(s,',');  for (  String part : parts) {    try {      if (part.length() == 0)       continue;      int ix=-1;      char c=part.charAt(0);      if (c == 'n') {        if (part.equals("north")) {          cc.setDockSide(0);          continue;        }        if (part.equals("newline")) {          cc.setNewline(true);          continue;        }        if (part.startsWith("newline ")) {          String gapSz=part.substring(7).trim();          cc.setNewlineGapSize(parseBoundSize(gapSz,true,true));          continue;        }      }      if (c == 'f' && (part.equals("flowy") || part.equals("flowx"))) {        cc.setFlowX(part.charAt(4) == 'x' ? Boolean.TRUE : Boolean.FALSE);        continue;      }      if (c == 's') {        ix=startsWithLenient(part,"skip",4,true);        if (ix > -1) {          String num=part.substring(ix).trim();          cc.setSkip(num.length() != 0 ? Integer.parseInt(num) : 1);          continue;        }        ix=startsWithLenient(part,"split",5,true);        if (ix > -1) {          String split=part.substring(ix).trim();          cc.setSplit(split.length() > 0 ? Integer.parseInt(split) : LayoutUtil.INF);          continue;        }        if (part.equals("south")) {          cc.setDockSide(2);          continue;        }        ix=startsWithLenient(part,new String[]{"spany","sy"},new int[]{5,2},true);        if (ix > -1) {          cc.setSpanY(parseSpan(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,new String[]{"spanx","sx"},new int[]{5,2},true);        if (ix > -1) {          cc.setSpanX(parseSpan(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,"span",4,true);        if (ix > -1) {          String[] spans=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.setSpanX(spans[0].length() > 0 ? Integer.parseInt(spans[0]) : LayoutUtil.INF);          cc.setSpanY(spans.length > 1 ? Integer.parseInt(spans[1]) : 1);          continue;        }        ix=startsWithLenient(part,"shrinkx",7,true);        if (ix > -1) {          cc.getHorizontal().setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"shrinky",7,true);        if (ix > -1) {          cc.getVertical().setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"shrink",6,false);        if (ix > -1) {          String[] shrinks=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.getHorizontal().setShrink(parseFloat(shrinks[0],ResizeConstraint.WEIGHT_100));          if (shrinks.length > 1)           cc.getVertical().setShrink(parseFloat(shrinks[1],ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,new String[]{"shrinkprio","shp"},new int[]{10,3},true);        if (ix > -1) {          String sp=part.substring(ix).trim();          if (sp.startsWith("x") || sp.startsWith("y")) {            (sp.startsWith("x") ? cc.getHorizontal() : cc.getVertical()).setShrinkPriority(Integer.parseInt(sp.substring(2)));          } else {            String[] shrinks=toTrimmedTokens(sp,' ');            cc.getHorizontal().setShrinkPriority(Integer.parseInt(shrinks[0]));            if (shrinks.length > 1)             cc.getVertical().setShrinkPriority(Integer.parseInt(shrinks[1]));          }          continue;        }        ix=startsWithLenient(part,new String[]{"sizegroupx","sizegroupy","sgx","sgy"},new int[]{9,9,2,2},true);        if (ix > -1) {          String sg=part.substring(ix).trim();          char lc=part.charAt(ix - 1);          if (lc != 'y')           cc.getHorizontal().setSizeGroup(sg);          if (lc != 'x')           cc.getVertical().setSizeGroup(sg);          continue;        }      }      if (c == 'g') {        ix=startsWithLenient(part,"growx",5,true);        if (ix > -1) {          cc.getHorizontal().setGrow(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"growy",5,true);        if (ix > -1) {          cc.getVertical().setGrow(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"grow",4,false);        if (ix > -1) {          String[] grows=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.getHorizontal().setGrow(parseFloat(grows[0],ResizeConstraint.WEIGHT_100));          cc.getVertical().setGrow(parseFloat(grows.length > 1 ? grows[1] : "",ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,new String[]{"growprio","gp"},new int[]{8,2},true);        if (ix > -1) {          String gp=part.substring(ix).trim();          char c0=gp.length() > 0 ? gp.charAt(0) : ' ';          if (c0 == 'x' || c0 == 'y') {            (c0 == 'x' ? cc.getHorizontal() : cc.getVertical()).setGrowPriority(Integer.parseInt(gp.substring(2)));          } else {            String[] grows=toTrimmedTokens(gp,' ');            cc.getHorizontal().setGrowPriority(Integer.parseInt(grows[0]));            if (grows.length > 1)             cc.getVertical().setGrowPriority(Integer.parseInt(grows[1]));          }          continue;        }        if (part.startsWith("gap")) {          BoundSize[] gaps=parseGaps(part);          if (gaps[0] != null)           cc.getVertical().setGapBefore(gaps[0]);          if (gaps[1] != null)           cc.getHorizontal().setGapBefore(gaps[1]);          if (gaps[2] != null)           cc.getVertical().setGapAfter(gaps[2]);          if (gaps[3] != null)           cc.getHorizontal().setGapAfter(gaps[3]);          continue;        }      }      if (c == 'a') {        ix=startsWithLenient(part,new String[]{"aligny","ay"},new int[]{6,2},true);        if (ix > -1) {          cc.getVertical().setAlign(parseUnitValueOrAlign(part.substring(ix).trim(),false,null));          continue;        }        ix=startsWithLenient(part,new String[]{"alignx","ax"},new int[]{6,2},true);        if (ix > -1) {          cc.getHorizontal().setAlign(parseUnitValueOrAlign(part.substring(ix).trim(),true,null));          continue;        }        ix=startsWithLenient(part,"align",2,true);        if (ix > -1) {          String[] gaps=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.getHorizontal().setAlign(parseUnitValueOrAlign(gaps[0],true,null));          if (gaps.length > 1)           cc.getVertical().setAlign(parseUnitValueOrAlign(gaps[1],false,null));          continue;        }      }      if ((c == 'x' || c == 'y') && part.length() > 2) {        char c2=part.charAt(1);        if (c2 == ' ' || (c2 == '2' && part.charAt(2) == ' ')) {          if (cc.getPos() == null) {            cc.setPos(new UnitValue[4]);          } else           if (cc.isBoundsInGrid() == false) {            throw new IllegalArgumentException("Cannot combine 'position' with 'x/y/x2/y2' keywords.");          }          int edge=(c == 'x' ? 0 : 1) + (c2 == '2' ? 2 : 0);          UnitValue[] pos=cc.getPos();          pos[edge]=parseUnitValue(part.substring(2).trim(),null,c == 'x');          cc.setPos(pos);          cc.setBoundsInGrid(true);          continue;        }      }      if (c == 'c') {        ix=startsWithLenient(part,"cell",4,true);        if (ix > -1) {          String[] grs=toTrimmedTokens(part.substring(ix).trim(),' ');          if (grs.length < 2)           throw new IllegalArgumentException("At least two integers must follow " + part);          cc.setCellX(Integer.parseInt(grs[0]));          cc.setCellY(Integer.parseInt(grs[1]));          if (grs.length > 2)           cc.setSpanX(Integer.parseInt(grs[2]));          if (grs.length > 3)           cc.setSpanY(Integer.parseInt(grs[3]));          continue;        }      }      if (c == 'p') {        ix=startsWithLenient(part,"pos",3,true);        if (ix > -1) {          if (cc.getPos() != null && cc.isBoundsInGrid())           throw new IllegalArgumentException("Can not combine 'pos' with 'x/y/x2/y2' keywords.");          String[] pos=toTrimmedTokens(part.substring(ix).trim(),' ');          UnitValue[] bounds=new UnitValue[4];          for (int j=0; j < pos.length; j++)           bounds[j]=parseUnitValue(pos[j],null,j % 2 == 0);          if (bounds[0] == null && bounds[2] == null || bounds[1] == null && bounds[3] == null)           throw new IllegalArgumentException("Both x and x2 or y and y2 can not be null!");          cc.setPos(bounds);          cc.setBoundsInGrid(false);          continue;        }        ix=startsWithLenient(part,"pad",3,true);        if (ix > -1) {          UnitValue[] p=parseInsets(part.substring(ix).trim(),false);          cc.setPadding(new UnitValue[]{p[0],p.length > 1 ? p[1] : null,p.length > 2 ? p[2] : null,p.length > 3 ? p[3] : null});          continue;        }        ix=startsWithLenient(part,"pushx",5,true);        if (ix > -1) {          cc.setPushX(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"pushy",5,true);        if (ix > -1) {          cc.setPushY(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"push",4,false);        if (ix > -1) {          String[] pushs=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.setPushX(parseFloat(pushs[0],ResizeConstraint.WEIGHT_100));          cc.setPushY(parseFloat(pushs.length > 1 ? pushs[1] : "",ResizeConstraint.WEIGHT_100));          continue;        }      }      if (c == 't') {        ix=startsWithLenient(part,"tag",3,true);        if (ix > -1) {          cc.setTag(part.substring(ix).trim());          continue;        }      }      if (c == 'w' || c == 'h') {        if (part.equals("wrap")) {          cc.setWrap(true);          continue;        }        if (part.startsWith("wrap ")) {          String gapSz=part.substring(5).trim();          cc.setWrapGapSize(parseBoundSize(gapSz,true,true));          continue;        }        boolean isHor=c == 'w';        if (isHor && (part.startsWith("w ") || part.startsWith("width "))) {          String uvStr=part.substring(part.charAt(1) == ' ' ? 2 : 6).trim();          cc.getHorizontal().setSize(parseBoundSize(uvStr,false,true));          continue;        }        if (!isHor && (part.startsWith("h ") || part.startsWith("height "))) {          String uvStr=part.substring(part.charAt(1) == ' ' ? 2 : 7).trim();          cc.getVertical().setSize(parseBoundSize(uvStr,false,false));          continue;        }        if (part.startsWith("wmin ") || part.startsWith("wmax ") || part.startsWith("hmin ")|| part.startsWith("hmax ")) {          String uvStr=part.substring(5).trim();          if (uvStr.length() > 0) {            UnitValue uv=parseUnitValue(uvStr,null,isHor);            boolean isMin=part.charAt(3) == 'n';            DimConstraint dc=isHor ? cc.getHorizontal() : cc.getVertical();            dc.setSize(new BoundSize(isMin ? uv : dc.getSize().getMin(),dc.getSize().getPreferred(),isMin ? (dc.getSize().getMax()) : uv,uvStr));            continue;          }        }        if (part.equals("west")) {          cc.setDockSide(1);          continue;        }        if (part.startsWith("hidemode ")) {          cc.setHideMode(Integer.parseInt(part.substring(9)));          continue;        }      }      if (c == 'i' && part.startsWith("id ")) {        cc.setId(part.substring(3).trim());        int dIx=cc.getId().indexOf('.');        if (dIx == 0 || dIx == cc.getId().length() - 1)         throw new IllegalArgumentException("Dot must not be first or last!");        continue;      }      if (c == 'e') {        if (part.equals("east")) {          cc.setDockSide(3);          continue;        }        if (part.equals("external")) {          cc.setExternal(true);          continue;        }        ix=startsWithLenient(part,new String[]{"endgroupx","endgroupy","egx","egy"},new int[]{-1,-1,-1,-1},true);        if (ix > -1) {          String sg=part.substring(ix).trim();          char lc=part.charAt(ix - 1);          DimConstraint dc=(lc == 'x' ? cc.getHorizontal() : cc.getVertical());          dc.setEndGroup(sg);          continue;        }      }      if (c == 'd') {        if (part.equals("dock north")) {          cc.setDockSide(0);          continue;        }        if (part.equals("dock west")) {          cc.setDockSide(1);          continue;        }        if (part.equals("dock south")) {          cc.setDockSide(2);          continue;        }        if (part.equals("dock east")) {          cc.setDockSide(3);          continue;        }        if (part.equals("dock center")) {          cc.getHorizontal().setGrow(100f);          cc.getVertical().setGrow(100f);          cc.setPushX(100f);          cc.setPushY(100f);          continue;        }      }      if (c == 'v') {        ix=startsWithLenient(part,new String[]{"visualpadding","vp"},new int[]{3,2},true);        if (ix > -1) {          UnitValue[] p=parseInsets(part.substring(ix).trim(),false);          cc.setVisualPadding(new UnitValue[]{p[0],p.length > 1 ? p[1] : null,p.length > 2 ? p[2] : null,p.length > 3 ? p[3] : null});          continue;        }      }      UnitValue horAlign=parseAlignKeywords(part,true);      if (horAlign != null) {        cc.getHorizontal().setAlign(horAlign);        continue;      }      UnitValue verAlign=parseAlignKeywords(part,false);      if (verAlign != null) {        cc.getVertical().setAlign(verAlign);        continue;      }      throw new IllegalArgumentException("Unknown keyword.");    } catch (    Exception ex) {      throw new IllegalArgumentException("Error parsing Constraint: '" + part + "'",ex);    }  }  return cc;}  }
class C{  public boolean validateMinimum(final String candidate){  boolean valid=true;  try {    if (Double.parseDouble(candidate) >= this.maximumValue) {      valid=false;    }  } catch (  final NumberFormatException e) {    valid=false;  }  return valid;}  }
class C{  public static _RequestType fromString(final String value) throws SOAPSerializationException {  return (_RequestType)Enumeration.fromString(value,_RequestType.VALUES_TO_INSTANCES);}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  int length=getParamElemCount();  for (int i=0; i < length; i++) {    ElemWithParam ewp=getParamElem(i);    ewp.compose(sroot);  }  if ((null != m_templateName) && (null == m_template)) {    m_template=this.getStylesheetRoot().getTemplateComposed(m_templateName);    if (null == m_template) {      String themsg=XSLMessages.createMessage(XSLTErrorResources.ER_ELEMTEMPLATEELEM_ERR,new Object[]{m_templateName});      throw new TransformerException(themsg,this);    }    length=getParamElemCount();    for (int i=0; i < length; i++) {      ElemWithParam ewp=getParamElem(i);      ewp.m_index=-1;      int etePos=0;      for (ElemTemplateElement ete=m_template.getFirstChildElem(); null != ete; ete=ete.getNextSiblingElem()) {        if (ete.getXSLToken() == Constants.ELEMNAME_PARAMVARIABLE) {          ElemParam ep=(ElemParam)ete;          if (ep.getName().equals(ewp.getName())) {            ewp.m_index=etePos;          }        } else         break;        etePos++;      }    }  }}  }
class C{  @NonNull public DividerAdapterBuilder innerResource(@LayoutRes int resource){  return innerView(asViewFactory(resource));}  }
class C{  public static FXMLLoader createFxmlLoader(final Class parent,final String fxmlFile){  return new FXMLLoader(parent.getResource(fxmlFile));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.346 -0500",hash_original_method="F2D26D3BB1859BB9D7AC567B8EA30F7D",hash_generated_method="D63FC22CD5BA247533281126B37F5678") public CRLNumber(byte[] encoding) throws IOException {  super(encoding);  number=new BigInteger((byte[])ASN1.decode(encoding));}  }
class C{  public void validate(){  if (maxZoom < 0) {    throw new IllegalArgumentException("Cannot set max zoom to a number < 1");  }  if (touchRadius < 0) {    throw new IllegalArgumentException("Cannot set touch radius value to a number <= 0 ");  }  if (initialCropWindowPaddingRatio < 0 || initialCropWindowPaddingRatio >= 0.5) {    throw new IllegalArgumentException("Cannot set initial crop window padding value to a number < 0 or >= 0.5");  }  if (aspectRatioX <= 0) {    throw new IllegalArgumentException("Cannot set aspect ratio value to a number less than or equal to 0.");  }  if (aspectRatioY <= 0) {    throw new IllegalArgumentException("Cannot set aspect ratio value to a number less than or equal to 0.");  }  if (borderLineThickness < 0) {    throw new IllegalArgumentException("Cannot set line thickness value to a number less than 0.");  }  if (borderCornerThickness < 0) {    throw new IllegalArgumentException("Cannot set corner thickness value to a number less than 0.");  }  if (guidelinesThickness < 0) {    throw new IllegalArgumentException("Cannot set guidelines thickness value to a number less than 0.");  }  if (minCropWindowHeight < 0) {    throw new IllegalArgumentException("Cannot set min crop window height value to a number < 0 ");  }  if (minCropResultWidth < 0) {    throw new IllegalArgumentException("Cannot set min crop result width value to a number < 0 ");  }  if (minCropResultHeight < 0) {    throw new IllegalArgumentException("Cannot set min crop result height value to a number < 0 ");  }  if (maxCropResultWidth < minCropResultWidth) {    throw new IllegalArgumentException("Cannot set max crop result width to smaller value than min crop result width");  }  if (maxCropResultHeight < minCropResultHeight) {    throw new IllegalArgumentException("Cannot set max crop result height to smaller value than min crop result height");  }  if (outputRequestWidth < 0) {    throw new IllegalArgumentException("Cannot set request width value to a number < 0 ");  }  if (outputRequestHeight < 0) {    throw new IllegalArgumentException("Cannot set request height value to a number < 0 ");  }  if (rotationDegrees < 0 || rotationDegrees > 360) {    throw new IllegalArgumentException("Cannot set rotation degrees value to a number < 0 or > 360");  }}  }
class C{  private void resize(int size){  String[] temp=new String[size];  for (int i=0; i < list.length; i++) {    temp[i]=list[i];  }  list=temp;}  }
class C{  private void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (oldValue != null && newValue != null && oldValue.equals(newValue)) {    return;  }  getCurrentChangeSupport().firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  protected boolean isMultiReport(HttpServletRequest request,HttpServletResponse response,ActionForm form,ActionMapping mapping){  return true;}  }
class C{  public WalletData addWallet(final BitcoinController bitcoinController,Wallet wallet,String walletFilename){  if (walletFilename == null) {    return null;  }  for (  WalletData loopModelData : perWalletModelDataList) {    if (walletFilename.equals(loopModelData.getWalletFilename())) {      return loopModelData;    }  }  WalletData newPerWalletModelData=new WalletData();  newPerWalletModelData.setWallet(wallet);  newPerWalletModelData.setWalletFilename(walletFilename);  newPerWalletModelData.setWalletTableDataList(new ArrayList<WalletTableData>());  if (thereIsNoActiveWallet()) {    perWalletModelDataList.remove(activeWalletModelData);    activeWalletModelData=newPerWalletModelData;  }  perWalletModelDataList.add(newPerWalletModelData);  if (wallet != null) {    wallet.addEventListener(bitcoinController);  }  createWalletTableData(bitcoinController,walletFilename);  createAddressBookReceivingAddresses(walletFilename);  return newPerWalletModelData;}  }
class C{  public static boolean installNormal(Context context,String filePath){  Intent i=new Intent(Intent.ACTION_VIEW);  File file=new File(filePath);  if (!file.exists() || !file.isFile() || file.length() <= 0) {    return false;  }  i.setDataAndType(Uri.parse("file://" + filePath),"application/vnd.android.package-archive");  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  private boolean isParentLeftToRight(){  if (rootParent instanceof JFrame) {    return SeaGlassLookAndFeel.isLeftToRight((JFrame)rootParent);  } else   if (rootParent instanceof JDialog) {    return SeaGlassLookAndFeel.isLeftToRight((JDialog)rootParent);  } else {    return false;  }}  }
class C{  private void processPages(){  PageIterator pageIter=new PageIterator(getWiki(),true,pageBuffer);  int pageCounter=0;  while (pageIter.hasNext()) {    pageCounter++;    if (pageCounter % VERBOSITY == 0) {      logger.info(pageCounter + " pages processed ...");    }    Page curPage=pageIter.next();    int curPageId=curPage.getPageId();    fillMapWithTemplateData(curPage.getText(),pageFilter,curPageId,TPLNAME_TO_PAGEIDS);  }}  }
class C{  public boolean hasAnnotation(final AnnotableElement element){  return getAnnotation(element) != null;}  }
class C{  public void add(Unsigned16 b){  long sumHi;  long sumLo;  long reshibit, hibit0, hibit1;  sumHi=hi8 + b.hi8;  hibit0=(lo8 & 0x8000000000000000L);  hibit1=(b.lo8 & 0x8000000000000000L);  sumLo=lo8 + b.lo8;  reshibit=(sumLo & 0x8000000000000000L);  if ((hibit0 & hibit1) != 0 | ((hibit0 ^ hibit1) != 0 && reshibit == 0))   sumHi++;  hi8=sumHi;  lo8=sumLo;}  }
class C{  public String toString(){  return "(" + x + ", "+ y+ ", "+ z+ ")";}  }
class C{  public void addColumn(String header){  WTableColumn tableColumn;  tableColumn=new WTableColumn();  tableColumn.setHeaderValue(Util.cleanAmp(header));  setColumnVisibility(tableColumn,true);  m_tableColumns.add(tableColumn);  return;}  }
class C{  @Override protected void tearDown() throws Exception {  if (consumer != null) {    consumer.stop();  }  if (producer != null) {    producer.stop();  }  if (context != null) {    context.destroy();  }}  }
class C{  public static int unescapedIndexOfDot(String identifier){  int indexof=identifier.indexOf(".");  if (indexof == -1) {    return -1;  }  for (int i=0; i < identifier.length(); i++) {    char c=identifier.charAt(i);    if (c != '.') {      continue;    }    if (i > 0) {      if (identifier.charAt(i - 1) == '\\') {        continue;      }    }    return i;  }  return -1;}  }
class C{  public static String normalize(String oid){  return oid.startsWith("OID.") ? oid.substring(4) : oid;}  }
class C{  public String encode(long... numbers){  for (  long number : numbers) {    if (number > 9007199254740992L) {      throw new IllegalArgumentException("number can not be greater than 9007199254740992L");    }  }  String retval="";  if (numbers.length == 0) {    return retval;  }  return this._encode(numbers);}  }
class C{  public ListBindingSet(){  current=new LinkedList<E>();}  }
class C{  public GenericURI parseUrl(String url) throws ParseException {  return new URLParser(url).parse();}  }
class C{  private int handleH(String value,DoubleMetaphoneResult result,int index){  if ((index == 0 || isVowel(charAt(value,index - 1))) && isVowel(charAt(value,index + 1))) {    result.append('H');    index+=2;  } else {    index++;  }  return index;}  }
class C{  public boolean isNotificationEnabled(){  return ((DataTableModel)getModel()).isNotificationEnabled();}  }
class C{  public final void testNotEmptyWithContextParameter(){  assertNotNull(Validators.notEmpty(getContext()));}  }
class C{  public BinaryLogicalExpression createBinaryLogicalExpression(){  BinaryLogicalExpressionImpl binaryLogicalExpression=new BinaryLogicalExpressionImpl();  return binaryLogicalExpression;}  }
class C{  @RequestMapping(method={RequestMethod.GET,RequestMethod.HEAD},value="/ping") @ApiOperation(value="Check Rest service status ",notes="Check whether gemfire REST service is up and running!",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK"),@ApiResponse(code=500,message="if GemFire throws an error or exception")}) public ResponseEntity<?> ping(){  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  public void actionPerformed(ActionEvent e){  tournament(100);}  }
class C{  private Bundle messageToBundle(String messageId,String topic,MqttMessage message){  Bundle result=new Bundle();  result.putString(MqttServiceConstants.CALLBACK_MESSAGE_ID,messageId);  result.putString(MqttServiceConstants.CALLBACK_DESTINATION_NAME,topic);  result.putParcelable(MqttServiceConstants.CALLBACK_MESSAGE_PARCEL,new ParcelableMqttMessage(message));  return result;}  }
class C{  protected void processInstance(Instance instance){  if (m_currentInst < m_SampleSize) {    m_subSample[m_currentInst]=(Instance)instance.copy();  } else {    double r=m_random.nextDouble();    if (r < ((double)m_SampleSize / (double)m_currentInst)) {      r=m_random.nextDouble();      int replace=(int)(m_SampleSize * r);      m_subSample[replace]=(Instance)instance.copy();    }  }  m_currentInst++;}  }
class C{  public TryStatement createTryStatement(){  TryStatementImpl tryStatement=new TryStatementImpl();  return tryStatement;}  }
class C{  private boolean filterEntry(ConsoleEntry entry){  if ((logDisabledTypesMask & getMask(entry.type)) != 0) {    return false;  }  return length(filterText) == 0 || containsIgnoreCase(entry.message,filterText);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case MappingPackage.MAPPING_MODEL__REFERENCES:    return ((InternalEList<?>)getReferences()).basicRemove(otherEnd,msgs);case MappingPackage.MAPPING_MODEL__RULES:  return ((InternalEList<?>)getRules()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void main(String[] args){  System.out.print("Goodbye, ");  System.out.println("cruel world");}  }
class C{  @AfterClass public static void afterClass() throws SQLException {  if (proxySet != null) {    for (    TcpProxy[] tcpProxies : proxySet.values()) {      for (      TcpProxy tcpProxy : tcpProxies) {        try {          tcpProxy.stop();        } catch (        Exception e) {        }      }    }  }}  }
class C{  public static void animateSunblind(RecyclerView.ViewHolder holder,boolean goesDown){  int holderHeight=holder.itemView.getHeight();  holder.itemView.setPivotY(goesDown == true ? 0 : holderHeight);  holder.itemView.setPivotX(holder.itemView.getHeight());  AnimatorSet animatorSet=new AnimatorSet();  ObjectAnimator animatorTranslateY=ObjectAnimator.ofFloat(holder.itemView,"translationY",goesDown == true ? 300 : -300,0);  ObjectAnimator animatorRotation=ObjectAnimator.ofFloat(holder.itemView,"rotationX",goesDown == true ? -90f : 90,0f);  ObjectAnimator animatorScaleX=ObjectAnimator.ofFloat(holder.itemView,"scaleX",0.5f,1f);  animatorSet.playTogether(animatorTranslateY,animatorRotation,animatorScaleX);  animatorSet.setInterpolator(new DecelerateInterpolator(1.1f));  animatorSet.setDuration(1000);  animatorSet.start();}  }
class C{  @Override public boolean inExcludeSegments(){  for (Segment segment=getSegment(this.segmentStart); segment.getSegmentStart() < this.segmentEnd; segment.inc()) {    if (!segment.inExceptionSegments()) {      return (false);    }  }  return true;}  }
class C{  public void detach(){  ClassPool cp=getClassPool();  CtClass obj=cp.removeCached(getName());  if (obj != this)   cp.cacheCtClass(getName(),obj,false);}  }
class C{  public float floatValue(){  return toNumber().floatValue();}  }
class C{  public void testUserDataHandlerNotifiedOfOnlyShallowAdoptions() throws Exception {  domToString(document);  RecordingHandler handler=new RecordingHandler();  name.setUserData("a","apple",handler);  name.setUserData("b","banana",handler);  standard.setUserData("c","cat",handler);  waffles.setUserData("d","dog",handler);  Document newDocument=builder.newDocument();  assertSame(name,newDocument.adoptNode(name));  assertSame(newDocument,name.getOwnerDocument());  assertSame(newDocument,standard.getOwnerDocument());  assertSame(newDocument,waffles.getOwnerDocument());  Set<String> expected=new HashSet<String>();  expected.add(notification(NODE_ADOPTED,"a","apple",name,null));  expected.add(notification(NODE_ADOPTED,"b","banana",name,null));  assertEquals(expected,handler.calls);}  }
class C{  public final void removeMessages(int what){  mExec.removeMessages(what);}  }
class C{  public JettySolrRunner startJettySolrRunner() throws Exception {  return startJettySolrRunner(newNodeName(),jettyConfig.context,jettyConfig);}  }
class C{  public static String stack_to_string(Exception e){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  e.printStackTrace(pw);  pw.close();  return sw.toString();}  }
class C{  private boolean verifySortedCoordinatesPropertiesFile(File coordinatePropertiesFile){  log("Checking for lexically sorted non-duplicated '/org/name' keys in: " + coordinatePropertiesFile,verboseLevel);  boolean success=true;  String line=null;  String currentKey=null;  String previousKey=null;  try (InputStream stream=new FileInputStream(coordinatePropertiesFile);Reader reader=new InputStreamReader(stream,StandardCharsets.ISO_8859_1);BufferedReader bufferedReader=new BufferedReader(reader)){    while (null != (line=readLogicalPropertiesLine(bufferedReader))) {      final Matcher keyMatcher=COORDINATE_KEY_PATTERN.matcher(line);      if (!keyMatcher.lookingAt()) {        continue;      }      currentKey=keyMatcher.group(1);      if (null != previousKey) {        int comparison=currentKey.compareTo(previousKey);        if (0 == comparison) {          log("DUPLICATE coordinate key '" + currentKey + "' in "+ coordinatePropertiesFile.getName(),Project.MSG_ERR);          success=false;        } else         if (comparison < 0) {          log("OUT-OF-ORDER coordinate key '" + currentKey + "' in "+ coordinatePropertiesFile.getName(),Project.MSG_ERR);          success=false;        }      }      previousKey=currentKey;    }  } catch (  IOException e) {    throw new BuildException("Exception reading " + coordinatePropertiesFile.getPath() + ": "+ e.toString(),e);  }  return success;}  }
class C{  public SimpleLogFileReader(LogFile tf,long maxRecords){  this.tf=tf;  this.howMany=maxRecords;}  }
class C{  public static AdjustmentListener remove(AdjustmentListener l,AdjustmentListener oldl){  return (AdjustmentListener)removeInternal(l,oldl);}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,String key,E defaultValue){  try {    Object val=this.opt(key);    if (NULL.equals(val)) {      return defaultValue;    }    if (clazz.isAssignableFrom(val.getClass())) {      @SuppressWarnings("unchecked") E myE=(E)val;      return myE;    }    return Enum.valueOf(clazz,val.toString());  } catch (  IllegalArgumentException e) {    return defaultValue;  }catch (  NullPointerException e) {    return defaultValue;  }}  }
class C{  public void serialize(XmlSerializer serializer,String elementName,Object element) throws IOException {  serialize(serializer,elementName,element,true);}  }
class C{  public NonRegisteringDriver() throws SQLException {}  }
class C{  private static void deleteRecursively(final File file){  try {    FileDeleter.delete(file.toPath());  } catch (  IOException e) {    throw new RuntimeException("Error while recursively cleaning up content of " + file + ".");  }}  }
class C{  public void done(final boolean isInternalReturnEdge){  if (isDone)   throw new IllegalStateException("Can't call done() more than once");  if (points.size() < 3)   throw new IllegalArgumentException("Polygon needs at least three points.");  if (isInternalReturnEdge)   isInternalEdges.set(points.size() - 1);  isDone=true;  edges=new SidedPlane[points.size()];  notableEdgePoints=new GeoPoint[points.size()][];  for (int i=0; i < points.size(); i++) {    final GeoPoint start=points.get(i);    final GeoPoint end=points.get(legalIndex(i + 1));    final Plane planeToFind=new Plane(start,end);    int endPointIndex=-1;    for (int j=0; j < points.size(); j++) {      final int index=legalIndex(j + i + 2);      if (!planeToFind.evaluateIsZero(points.get(index))) {        endPointIndex=index;        break;      }    }    if (endPointIndex == -1) {      throw new IllegalArgumentException("Polygon points are all coplanar: " + points);    }    final GeoPoint check=points.get(endPointIndex);    final SidedPlane sp=new SidedPlane(check,start,end);    edges[i]=sp;    notableEdgePoints[i]=new GeoPoint[]{start,end};  }  eitherBounds=new HashMap<>(edges.length);  prevBrotherMap=new HashMap<>(edges.length);  nextBrotherMap=new HashMap<>(edges.length);  for (int edgeIndex=0; edgeIndex < edges.length; edgeIndex++) {    final SidedPlane edge=edges[edgeIndex];    int bound1Index=legalIndex(edgeIndex + 1);    while (edges[legalIndex(bound1Index)].isNumericallyIdentical(edge)) {      bound1Index++;    }    int bound2Index=legalIndex(edgeIndex - 1);    while (edges[legalIndex(bound2Index)].isNumericallyIdentical(edge)) {      bound2Index--;    }    bound1Index=legalIndex(bound1Index);    bound2Index=legalIndex(bound2Index);    int startingIndex=bound2Index;    while (true) {      startingIndex=legalIndex(startingIndex + 1);      if (startingIndex == bound1Index) {        break;      }      final GeoPoint interiorPoint=points.get(startingIndex);      if (!edges[bound1Index].isWithin(interiorPoint) || !edges[bound2Index].isWithin(interiorPoint)) {        throw new IllegalArgumentException("Convex polygon has a side that is more than 180 degrees");      }    }    eitherBounds.put(edge,new EitherBound(edges[bound1Index],edges[bound2Index]));    nextBrotherMap.put(edge,edges[bound1Index]);    prevBrotherMap.put(edge,edges[bound2Index]);  }  int edgePointCount=1;  if (holes != null) {    for (    final GeoPolygon hole : holes) {      edgePointCount+=hole.getEdgePoints().length;    }  }  edgePoints=new GeoPoint[edgePointCount];  edgePointCount=0;  edgePoints[edgePointCount++]=points.get(0);  if (holes != null) {    for (    final GeoPolygon hole : holes) {      final GeoPoint[] holeEdgePoints=hole.getEdgePoints();      for (      final GeoPoint p : holeEdgePoints) {        edgePoints[edgePointCount++]=p;      }    }  }  if (isWithinHoles(points.get(0))) {    throw new IllegalArgumentException("Polygon edge intersects a polygon hole; not allowed");  }}  }
class C{  public JBBPOut Align() throws IOException {  assertNotEnded();  if (this.processCommands) {    this.outStream.align(0);  }  return this;}  }
class C{  protected ConnectionStateSSLv3(SSLSessionImpl session){  try {    CipherSuite cipherSuite=session.cipherSuite;    boolean is_exportabe=cipherSuite.isExportable();    hash_size=cipherSuite.getMACLength();    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;    int iv_size=cipherSuite.ivSize;    block_size=cipherSuite.getBlockSize();    String algName=cipherSuite.getBulkEncryptionAlgorithm();    String hashName=cipherSuite.getHashName();    if (logger != null) {      logger.println("ConnectionStateSSLv3.create:");      logger.println("  cipher suite name: " + session.getCipherSuite());      logger.println("  encryption alg name: " + algName);      logger.println("  hash alg name: " + hashName);      logger.println("  hash size: " + hash_size);      logger.println("  block size: " + block_size);      logger.println("  IV size:" + iv_size);      logger.println("  key size: " + key_size);    }    byte[] clientRandom=session.clientRandom;    byte[] serverRandom=session.serverRandom;    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];    byte[] seed=new byte[clientRandom.length + serverRandom.length];    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);    PRF.computePRF_SSLv3(key_block,session.master_secret,seed);    byte[] client_mac_secret=new byte[hash_size];    byte[] server_mac_secret=new byte[hash_size];    byte[] client_key=new byte[key_size];    byte[] server_key=new byte[key_size];    boolean is_client=!session.isServer;    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);    IvParameterSpec clientIV=null;    IvParameterSpec serverIV=null;    if (is_exportabe) {      if (logger != null) {        logger.println("ConnectionStateSSLv3: is_exportable");      }      MessageDigest md5=MessageDigest.getInstance("MD5");      md5.update(client_key);      md5.update(clientRandom);      md5.update(serverRandom);      client_key=md5.digest();      md5.update(server_key);      md5.update(serverRandom);      md5.update(clientRandom);      server_key=md5.digest();      key_size=cipherSuite.expandedKeyMaterial;      if (block_size != 0) {        md5.update(clientRandom);        md5.update(serverRandom);        clientIV=new IvParameterSpec(md5.digest(),0,iv_size);        md5.update(serverRandom);        md5.update(clientRandom);        serverIV=new IvParameterSpec(md5.digest(),0,iv_size);      }    } else     if (block_size != 0) {      clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size);      serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size);    }    if (logger != null) {      logger.println("is exportable: " + is_exportabe);      logger.println("master_secret");      logger.print(session.master_secret);      logger.println("client_random");      logger.print(clientRandom);      logger.println("server_random");      logger.print(serverRandom);      logger.println("client_mac_secret");      logger.print(client_mac_secret);      logger.println("server_mac_secret");      logger.print(server_mac_secret);      logger.println("client_key");      logger.print(client_key,0,key_size);      logger.println("server_key");      logger.print(server_key,0,key_size);      if (clientIV != null) {        logger.println("client_iv");        logger.print(clientIV.getIV());        logger.println("server_iv");        logger.print(serverIV.getIV());      } else {        logger.println("no IV.");      }    }    if (algName == null) {      encCipher=new NullCipher();      decCipher=new NullCipher();    } else {      encCipher=Cipher.getInstance(algName);      decCipher=Cipher.getInstance(algName);      if (is_client) {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);      } else {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);      }    }    messageDigest=MessageDigest.getInstance(hashName);    if (is_client) {      mac_write_secret=client_mac_secret;      mac_read_secret=server_mac_secret;    } else {      mac_write_secret=server_mac_secret;      mac_read_secret=client_mac_secret;    }    if (hashName.equals("MD5")) {      pad_1=SSLv3Constants.MD5pad1;      pad_2=SSLv3Constants.MD5pad2;    } else {      pad_1=SSLv3Constants.SHApad1;      pad_2=SSLv3Constants.SHApad2;    }  } catch (  Exception e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));  }}  }
class C{  private static OrderDetails waitForUpdatedOrder(String orderId,Long lastUpdated){  if (lastUpdated == null) {    Logger.debug("No last updated value");    return new OrderDetails(orderId);  }  Map<URI,String> oldTasksStateMap=null;  int updateAttempts=0;  while (true) {    OrderDetails details=new OrderDetails(orderId);    if (details.isNewer(lastUpdated)) {      Logger.debug("Found update for order %s newer than: %s",details.order.getOrderNumber(),lastUpdated);      return details;    }    if (details.isFinished()) {      Logger.debug("Found finished order %s",details.order.getOrderNumber());      return details;    }    if (oldTasksStateMap != null && details.viprTasks != null) {      if (isTaskStateChanged(oldTasksStateMap,details.viprTasks)) {        Logger.debug("Found task state change for order %s",details.order.getOrderNumber());        return details;      }    } else {      oldTasksStateMap=createTaskStateMap(details.viprTasks);    }    if (++updateAttempts >= RECEIPT_UPDATE_ATTEMPTS) {      Logger.debug("Updating order %s after %d attempts to find order change",details.order.getOrderNumber(),RECEIPT_UPDATE_ATTEMPTS);      return details;    }    int delay=getWaitDelay(details);    Logger.debug("No update for order %s, waiting for %s ms",details.order.getOrderNumber(),delay);    await(delay);  }}  }
class C{  protected String metaDataTableNameForForeignKeys(Table table){  return table.getName();}  }
class C{  public static void main(String[] args){  GeometricObject[] squares={new Square(4.5),new Square(14),new Square(8.2),new Square(12),new Square(10)};  for (int i=0; i < squares.length; i++) {    System.out.println("\nSquare #" + (i + 1));    System.out.println("Area: " + squares[i].getArea());    System.out.println("How to color: " + ((Square)squares[i]).howToColor());  }}  }
class C{  @Override public boolean supportsMultipleTransactions(){  debugCodeCall("supportsMultipleTransactions");  return true;}  }
class C{  public void popMode(){  m_modes.pop();}  }
class C{  public static void upto(long self,Number to,@ClosureParams(FirstParam.class) Closure closure){  long to1=to.longValue();  if (self <= to1) {    for (long i=self; i <= to1; i++) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to upto() cannot be less than the value ("+ self+ ") it's called on.");}  }
class C{  private void fetchPlain(){  savePossibleSimpleKey();  this.allowSimpleKey=false;  Token tok=scanPlain();  this.tokens.add(tok);}  }
class C{  public static int indexOf(int[] a,int key){  int lo=0;  int hi=a.length - 1;  while (lo <= hi) {    int mid=lo + (hi - lo) / 2;    if (key < a[mid])     hi=mid - 1; else     if (key > a[mid])     lo=mid + 1; else     return mid;  }  return -1;}  }
class C{  public boolean canSave(){  return true;}  }
class C{  static void interpolationTest(int interpolationMethod,int numberOfRows,int numberOfColumns,double exp){  System.out.println("");switch (interpolationMethod) {case 0:    logger.info("Interpolation test for bilinear interpolation on a " + numberOfRows + "*"+ numberOfColumns+ " grid...");  break;case 1:logger.info("Interpolation test for bicubic spline interpolation on a " + numberOfRows + "*"+ numberOfColumns+ " grid...");break;case 2:logger.info("Interpolation test for inverse distance weigthing on a " + numberOfRows + "*"+ numberOfColumns+ " grid with an exponent of "+ exp+ "...");}MiniTest testScenario=new MiniTest(interpolationMethod,numberOfRows,numberOfColumns,exp);testScenario.testKnownValues(3);testScenario.testSpecificValues();testScenario.testRangeOfValues();logger.info("Interpolation time: " + testScenario.getInterpolationTime() + " ms.");try {out.write(testScenario.getInterpolationTime() + " ms \t\t");} catch (IOException e) {e.printStackTrace();}if (!testScenario.isInterpolationUseful()) {switch (interpolationMethod) {case 0:logger.warn("The bilinear interpolation test on a " + numberOfRows + "*"+ numberOfColumns+ " grid was not successful!");break;case 1:logger.warn("The bicubic spline interpolation test on a " + numberOfRows + "*"+ numberOfColumns+ " grid was not successful!");break;case 2:logger.warn("The interpolation test for the inverse distance weighting method on a " + numberOfRows + "*"+ numberOfColumns+ " grid with an exponent of "+ exp+ ", was not successful!");}}}  }
class C{  AbstractMediaResource(){}  }
class C{  @Override public void writeFile(final String filename){  log.info("Writing google earth file to " + filename);  this.mainKml=kmlObjectFactory.createKmlType();  this.mainDoc=kmlObjectFactory.createDocumentType();  this.mainKml.setAbstractFeatureGroup(kmlObjectFactory.createDocument(mainDoc));  createStyles();  this.mainFolder=kmlObjectFactory.createFolderType();  this.mainFolder.setName("Comparison, Iteration " + this.iterationNumber);  this.mainDoc.getAbstractFeatureGroup().add(kmlObjectFactory.createFolder(this.mainFolder));  this.writer=new KMZWriter(filename);  try {    this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(createLegend()));  } catch (  IOException e) {    log.error("Cannot add legend to the KMZ file.",e);  }  try {    this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(MatsimKMLLogo.writeMatsimKMLLogo(writer)));  } catch (  IOException e) {    log.error("Cannot add logo to the KMZ file.",e);  }  try {    this.writer.addNonKMLFile(MatsimResource.getAsInputStream("icons/plus.png"),CROSSICON);    this.writer.addNonKMLFile(MatsimResource.getAsInputStream("icons/minus.png"),MINUSICON);  } catch (  IOException e) {    log.error("Could not copy copy plus-/minus-icons to the KMZ.",e);  }  FolderType simRealFolder=kmlObjectFactory.createFolderType();  simRealFolder.setName("XY Comparison Plots");  this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createFolder(simRealFolder));{    ScreenOverlayType errorGraph=createBiasErrorGraph(filename);    errorGraph.setVisibility(Boolean.TRUE);    this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(errorGraph));  }{    ScreenOverlayType errorGraph=createBoxPlotErrorGraph();    if (errorGraph != null) {      errorGraph.setVisibility(Boolean.FALSE);      this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(errorGraph));    }  }{    ScreenOverlayType awtv=null;    try {      awtv=this.createAWTVGraph();    } catch (    Exception ee) {      log.warn("generating awtv (average weekday traffic volumes) graph failed; printing stacktrace but continuing anyways ...");      for (int ii=0; ii < ee.getStackTrace().length; ii++) {        log.info(ee.getStackTrace()[ii].toString());      }    }    if (awtv != null) {      awtv.setVisibility(Boolean.FALSE);      this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(awtv));    }  }  this.createCountsLoadCurveGraphs();  for (int h=1; h < 25; h++) {    TimeSpanType timespan=kmlObjectFactory.createTimeSpanType();    timespan.setBegin("1999-01-01T" + Time.writeTime(((h - 1) * 3600)));    timespan.setEnd("1999-01-01T" + Time.writeTime((h * 3600)));    this.addCountsSimRealPerHourGraphs(simRealFolder,h,timespan);    FolderType subfolder=kmlObjectFactory.createFolderType();    subfolder.setName(createFolderName(h));    subfolder.setAbstractTimePrimitiveGroup(kmlObjectFactory.createTimeSpan(timespan));    this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createFolder(subfolder));    writeLinkData(this.countComparisonFilter.getCountsForHour(Integer.valueOf(h)),subfolder);  }  finish();}  }
class C{  protected void writeHeader() throws IOException {  writeStartTag("<head>");  writeStartTag("<style>");  writeStartTag("<!--");  writeStyles();  writeEndTag("-->");  writeEndTag("</style>");  writeEndTag("</head>");}  }
class C{  protected void updateStatsForConditionalDensityEstimator(ConditionalDensityEstimator classifier,Instance classMissing,double classValue) throws Exception {  if (m_PriorEstimator == null) {    setNumericPriorsFromBuffer();  }  m_SumSchemeEntropy-=classifier.logDensity(classMissing,classValue) * classMissing.weight() / Utils.log2;  m_SumPriorEntropy-=m_PriorEstimator.logDensity(classValue) * classMissing.weight() / Utils.log2;}  }
class C{  private static int sameBaselineUpTo(Font font,char[] text,int start,int limit){  return limit;}  }
class C{  protected String formatDate(Date d){  return fmtThreadLocal.get().format(d);}  }
class C{  public static String readFileToString(File f) throws IOException {  StringWriter sw=new StringWriter();  IO.copyAndCloseBoth(Common.asReaderUTF8Lenient(new FileInputStream(f)),sw);  return sw.toString();}  }
class C{  static int compareString(String a,String b){  if (a == b) {    return 0;  }  if (a == null) {    return -1;  }  if (b == null) {    return 1;  }  return a.compareTo(b);}  }
class C{  public static double mapValueFromRangeToRange(double value,double fromLow,double fromHigh,double toLow,double toHigh){  double fromRangeSize=fromHigh - fromLow;  double toRangeSize=toHigh - toLow;  double valueScale=(value - fromLow) / fromRangeSize;  return toLow + (valueScale * toRangeSize);}  }
class C{  public Raster createChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){  return createWritableChild(x,y,width,height,x0,y0,bandList);}  }
class C{  private void copyVdcObject(VirtualDataCenter src,VirtualDataCenter dest){  log.info("Copy object {}",dest.getId());  dest.setShortId(src.getShortId());  dest.setVersion(src.getVersion());  dest.setApiEndpoint(src.getApiEndpoint());  dest.setConnectionStatus(src.getConnectionStatus());  dest.setLocal(src.getLocal());  dest.setHostCount(src.getHostCount());  dest.setHostIPv4AddressesMap(src.getHostIPv4AddressesMap());  dest.setHostIPv6AddressesMap(src.getHostIPv6AddressesMap());  Assert.assertNotNull(src.getHostIPv4AddressesMap());}  }
class C{  public static void main(String[] argv){  runClassifier(new RandomForest(),argv);}  }
class C{  public static Attr toAttr(Document doc,Object o) throws PageException {  if (o instanceof Attr)   return (Attr)o;  if (o instanceof Struct && ((Struct)o).size() == 1) {    Struct sct=(Struct)o;    Entry<Key,Object> e=sct.entryIterator().next();    Attr attr=doc.createAttribute(e.getKey().getString());    attr.setValue(Caster.toString(e.getValue()));    return attr;  }  throw new XMLException("can't cast Object of type " + Caster.toClassName(o) + " to a XML Attribute");}  }
class C{  public void addComittedNonHeapMemorySize(long comittedNonHeapMemorySize){  this.totalComittedNonHeapMemorySize+=comittedNonHeapMemorySize;}  }
class C{  public address addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private int refreshFileList(){  File[] files=null;  try {    files=new File(path).listFiles();  } catch (  Exception e) {    files=null;  }  if (files == null) {    Toast.makeText(getContext(),sOnErrorMsg,Toast.LENGTH_SHORT).show();    return -1;  }  if (list != null) {    list.clear();  } else {    list=new ArrayList<Map<String,Object>>(files.length);  }  ArrayList<Map<String,Object>> lfolders=new ArrayList<Map<String,Object>>();  ArrayList<Map<String,Object>> lfiles=new ArrayList<Map<String,Object>>();  if (!this.path.equals(sRoot)) {    Map<String,Object> map=new HashMap<String,Object>();    map.put("name",sRoot);    map.put("path",sRoot);    map.put("img",getImageId(sRoot));    list.add(map);    map=new HashMap<String,Object>();    map.put("name",sParent);    map.put("path",path);    map.put("img",getImageId(sParent));    list.add(map);  }  for (  File file : files) {    if (file.isDirectory() && file.listFiles() != null) {      Map<String,Object> map=new HashMap<String,Object>();      map.put("name",file.getName());      map.put("path",file.getPath());      map.put("img",getImageId(sFolder));      lfolders.add(map);    } else     if (file.isFile()) {      String sf=getSuffix(file.getName()).toLowerCase(Locale.getDefault());      if (suffix == null || suffix.length() == 0 || (sf.length() > 0 && suffix.indexOf("." + sf + ";") >= 0)) {        Map<String,Object> map=new HashMap<String,Object>();        map.put("name",file.getName());        map.put("path",file.getPath());        map.put("img",getImageId(sf));        lfiles.add(map);      }    }  }  list.addAll(lfolders);  list.addAll(lfiles);  SimpleAdapter adapter=new SimpleAdapter(getContext(),list,R.layout.filedialogitem,new String[]{"img","name","path"},new int[]{R.id.filedialogitem_img,R.id.filedialogitem_name,R.id.filedialogitem_path});  this.setAdapter(adapter);  return files.length;}  }
class C{  public PlayerID(final String name,final boolean optional,final boolean canBeDisabled,final GameData data){  super(name,data);  m_optional=optional;  m_canBeDisabled=canBeDisabled;  m_unitsHeld=new UnitCollection(this,data);  m_resources=new ResourceCollection(data);  m_technologyFrontiers=new TechnologyFrontierList(data);}  }
class C{  public SqlOperation(int object,int operation,String schema,String name){  this(object,operation,schema,name,true);}  }
class C{  protected void reset(){  this.paths=null;}  }
class C{  public CompanyApplicationObject(CompanyApplicationObject parent){  this.id=parent.getId();  this.teamName=parent.getTeamName();  this.contactEmail=parent.getContactEmail();  this.contactName=parent.getContactName();  this.description=parent.getDescription();  this.teamSize=parent.getTeamSize();  this.codeHost=parent.getCodeHost();  this.code=parent.getCode();}  }
class C{  public void lock(int key){  getLock(key).lock();}  }
class C{  protected CommentCandidate pickCommentConsiderDoubleStar(List<INode> comments) throws InstantiationException {  if (comments.size() == 1) {    return new CommentCandidate(comments.get(0).getText());  }  ListIterator<INode> iter=comments.listIterator(comments.size());  String bestCandidateString=iter.previous().getText();  if (bestCandidateString.startsWith("/**")) {    return new CommentCandidate(bestCandidateString);  }  String candidateTextString="";  while (iter.hasPrevious()) {    candidateTextString=iter.previous().getText();    if (candidateTextString.startsWith("/**")) {      bestCandidateString=candidateTextString;      break;    }  }  return new CommentCandidate(bestCandidateString);}  }
class C{  public final boolean isOverwriteEnabled(){  return overwrite;}  }
class C{  public StreamHost addStreamHost(final String JID,final String address){  return addStreamHost(JID,address,0);}  }
class C{  static void onPermissionsRequested(Collection<String> grantedPermissions,Collection<String> deniedPermissions){  instance.onPermissionRequestGranted(grantedPermissions);  instance.onPermissionRequestDenied(deniedPermissions);}  }
class C{  protected void onDataLoadingChange(){}  }
class C{  public PostMethod buildCancelPreapprovalRequest(String preapprovalKey) throws DOMException, ParserConfigurationException, TransformerException {  final Document doc=createBody("CancelPreapprovalRequest");  addElement(doc.getDocumentElement(),"preapprovalKey",preapprovalKey);  return createPostMethod(doc,"CancelPreapproval");}  }
class C{  public TimeSeriesPlotComponent(final String name,final int numDataSources){  super(name);  model=new TimeSeriesModel(numDataSources);  initializeAttributes();  addListener();}  }
class C{  public static boolean isEnumField(PsiField field){  PsiType type=field.getType();  if (!(type instanceof PsiClassType)) {    return false;  }  final PsiClassType classType=(PsiClassType)type;  final PsiClass aClass=classType.resolve();  return (aClass != null) && aClass.isEnum();}  }
class C{  public ObjectFactory(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public OutbindRequest waitForOutbind(long timeout) throws IllegalStateException, TimeoutException {  SessionState currentSessionState=getSessionState();  if (currentSessionState.equals(SessionState.OPEN)) {    new SMPPOutboundServerSession.PDUReaderWorker().start();    try {      return outbindRequestReceiver.waitForRequest(timeout);    } catch (    IllegalStateException e) {      throw new IllegalStateException("Invocation of waitForOutbind() has been made",e);    }catch (    TimeoutException e) {      close();      throw e;    }  } else {    throw new IllegalStateException("waitForOutbind() should be invoked on OPEN state, actual state is " + currentSessionState);  }}  }
class C{  @Override public String toString(){  if (m_useTree) {    return treeToString();  } else {    return ruleToString();  }}  }
class C{  @Override protected void doAction(){  try {    if (helpBroker != null) {      if (helpBroker.isDisplayed()) {        return;      }      helpBroker.setDisplayed(true);      return;    }    createAndDisplayHelp();  } catch (  HelpSetException ex) {    DError.displayError(frame,ex);  }}  }
class C{  public Yytoken yylex() throws java.io.IOException, ParseException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{        sb.append(yytext());      }case 25:    break;case 4:{    sb.delete(0,sb.length());    yybegin(STRING_BEGIN);  }case 26:break;case 16:{sb.append('\b');}case 27:break;case 6:{return new Yytoken(Yytoken.TYPE_RIGHT_BRACE,null);}case 28:break;case 23:{Boolean val=Boolean.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 29:break;case 22:{return new Yytoken(Yytoken.TYPE_VALUE,null);}case 30:break;case 13:{yybegin(YYINITIAL);return new Yytoken(Yytoken.TYPE_VALUE,sb.toString());}case 31:break;case 12:{sb.append('\\');}case 32:break;case 21:{Double val=Double.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 33:break;case 1:{throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_CHAR,new Character(yycharat(0)));}case 34:break;case 8:{return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE,null);}case 35:break;case 19:{sb.append('\r');}case 36:break;case 15:{sb.append('/');}case 37:break;case 10:{return new Yytoken(Yytoken.TYPE_COLON,null);}case 38:break;case 14:{sb.append('"');}case 39:break;case 5:{return new Yytoken(Yytoken.TYPE_LEFT_BRACE,null);}case 40:break;case 17:{sb.append('\f');}case 41:break;case 24:{try {int ch=Integer.parseInt(yytext().substring(2),16);sb.append((char)ch);} catch (Exception e) {throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_EXCEPTION,e);}}case 42:break;case 20:{sb.append('\t');}case 43:break;case 7:{return new Yytoken(Yytoken.TYPE_LEFT_SQUARE,null);}case 44:break;case 2:{Long val=Long.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 45:break;case 18:{sb.append('\n');}case 46:break;case 9:{return new Yytoken(Yytoken.TYPE_COMMA,null);}case 47:break;case 3:{}case 48:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @Override public ParcelFileDescriptor openFile(@NonNull Uri uri,String mode) throws FileNotFoundException {  if (GlobalState.hasVerboseLogging()) {    logVerboseOpenFileInfo(uri,mode);  }  String path;  Cursor cursor=query(uri,new String[]{"_data"},null,null,null);  try {    int count=cursor.getCount();    if (count != 1) {      if (count == 0) {        throw new FileNotFoundException("No entry for " + uri);      }      throw new FileNotFoundException("Multiple items at " + uri);    }    cursor.moveToFirst();    path=cursor.getString(0);  }  finally {    cursor.close();  }  if (path == null) {    throw new FileNotFoundException("No filename found.");  }  if (!Helpers.isFilenameValid(path,downloadsDataDir)) {    LLog.d("INTERNAL FILE DOWNLOAD LOL COMMENTED EXCEPTION");  }  if (!"r".equals(mode)) {    throw new FileNotFoundException("Bad mode for " + uri + ": "+ mode);  }  ParcelFileDescriptor ret=ParcelFileDescriptor.open(new File(path),ParcelFileDescriptor.MODE_READ_ONLY);  if (ret == null) {    LLog.v("couldn't open file");    throw new FileNotFoundException("couldn't open file");  }  return ret;}  }
class C{  public TelnetTerminalServer(ServerSocketFactory serverSocketFactory,int port,Charset charset) throws IOException {  this.serverSocket=serverSocketFactory.createServerSocket(port);  this.charset=charset;}  }
class C{  public static AccessibilityNodeInfoCompat focusSearch(AccessibilityNodeInfoCompat node,int direction){  final AccessibilityNodeInfoRef ref=AccessibilityNodeInfoRef.unOwned(node);  if (ref == null)   return null;switch (direction) {case SEARCH_FORWARD:{      if (!ref.nextInOrder()) {        return null;      }      return ref.release();    }case SEARCH_BACKWARD:{    if (!ref.previousInOrder()) {      return null;    }    return ref.release();  }}return null;}  }
class C{  public AccentedAtom(Atom base,TeXFormula acc) throws InvalidTeXFormulaException, InvalidSymbolTypeException {  if (acc == null)   throw new InvalidTeXFormulaException("The accent TeXFormula can't be null!"); else {    Atom root=acc.root;    if (root instanceof SymbolAtom) {      accent=(SymbolAtom)root;      if (accent.type == TeXConstants.TYPE_ACCENT)       this.base=base; else       throw new InvalidSymbolTypeException("The accent TeXFormula represents a single symbol with the name '" + accent.getName() + "', but this symbol is not defined as an accent ("+ TeXSymbolParser.TYPE_ATTR+ "='acc') in '"+ TeXSymbolParser.RESOURCE_NAME+ "'!");    } else     throw new InvalidTeXFormulaException("The accent TeXFormula does not represent a single symbol!");  }}  }
class C{  public boolean remove(V value){  int index=indexOf(value);  if (index >= 0) {    remove(index);    return true;  }  return false;}  }
class C{  public void checkinConnectionAndClose(DBConnectionWrapper conn){  conn.setCurrentStatement(null);  conn.close();synchronized (this) {    for (int i=0; i < this.connections.size(); i++) {      if (conn == this.connections.get(i)) {        logger.fine("Remove closed connection as requested (" + conn.getAppUser() + ","+ conn.getDb());        this.connections.remove(i);        break;      }    }  }}  }
class C{  public static BashFunctionDef findNextVarDefFunctionDefScope(PsiElement varDef){  PsiElement element=PsiTreeUtil.getStubOrPsiParent(varDef);  while (element != null) {    if (element instanceof BashFunctionDef) {      return (BashFunctionDef)element;    }    element=PsiTreeUtil.getStubOrPsiParent(element);  }  return null;}  }
class C{  boolean isSterile(){  if ((access_flags & ACC_PUBLIC) != 0 && (access_flags & ACC_FINAL) == 0)   return false;  return true;}  }
class C{  private <T>void put(URI url,String id,String key,T obj) throws IsilonException {  ClientResponse resp=null;  try {    String body=new Gson().toJson(obj);    resp=_client.put(url.resolve(id),null,body);    if (resp.getStatus() != 200) {      if (resp.hasEntity()) {        JSONObject jObj=resp.getEntity(JSONObject.class);        processErrorResponse("modify",key + ": " + id,resp.getStatus(),jObj);      } else {        processErrorResponse("modify",key + ": " + id,resp.getStatus(),null);      }    }  } catch (  IsilonException ie) {    throw ie;  }catch (  Exception e) {    String response=String.format("%1$s",(resp == null) ? "" : resp);    throw IsilonException.exceptions.modifyResourceFailedOnIsilonArray(key,id,response,e);  } finally {    if (resp != null) {      resp.close();    }  }}  }
class C{  Type(int value){  this.value=value;}  }
class C{  void foo(String s){  bar(s);}  }
class C{  public void unpauseAnimations(){  ctx.getAnimationEngine().unpause();}  }
class C{  void remove(){  active=false;}  }
class C{  @Override public void encodeEnd(FacesContext context,UIComponent component) throws IOException {  context.getResponseWriter().write("</div>");  super.encodeEnd(context,component);}  }
class C{  public static void validate(int[] oid){  if (oid == null) {    throw new IllegalArgumentException("oid == null");  }  if (oid.length < 2) {    throw new IllegalArgumentException("OID MUST have at least 2 subidentifiers");  }  if (oid[0] > 2) {    throw new IllegalArgumentException("Valid values for first subidentifier are 0, 1 and 2");  } else   if (oid[0] != 2 && oid[1] > 39) {    throw new IllegalArgumentException("If the first subidentifier has 0 or 1 value the " + "second subidentifier value MUST be less than 40");  }  for (  int anOid : oid) {    if (anOid < 0) {      throw new IllegalArgumentException("Subidentifier MUST have positive value");    }  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:10.970 -0500",hash_original_method="C73CBA236E994654D9EB18CB745C41F4",hash_generated_method="DBE8EADF017633BD71ABF01BC72E1357") public SIPDate(){  wkday=-1;  day=-1;  month=-1;  year=-1;  hour=-1;  minute=-1;  second=-1;  javaCal=null;}  }
class C{  public UsuarioVO asignarRevisionDocAGestor(RevisionDocumentacionVO revDocVO,String idGestor) throws ActionNotAllowedException {  this.check(ServiciosSecurityManager.CEDER_CONTROL_ACTION);  LoggingEvent event=getLogginEvent(ArchivoActions.SERVICIOS_MODULE_CESION_PRESTAMO_REVISION_DOC);  Locale locale=getServiceClient().getLocale();  ServiceRepository services=ServiceRepository.getInstance(getServiceSession());  GestionControlUsuariosBI usuariosBI=services.lookupGestionControlUsuariosBI();  UsuarioVO usuarioAnterior=usuariosBI.getUsuario(revDocVO.getIdUsrGestor());  UsuarioVO usuarioNuevo=usuariosBI.getUsuario(idGestor);  DataLoggingEvent data=event.getDataLoggingEvent(ArchivoObjects.OBJECT_PRESTAMO,revDocVO.getIdUsrGestor());  data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_USUARIO_ANTERIOR,usuarioAnterior.getNombreCompleto());  data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_USUARIO_NUEVO,usuarioNuevo.getNombreCompleto());  data.addDetalle(locale,ArchivoDetails.DEPOSITO_SIGNATURA,revDocVO.getSignaturaUdoc());  revDocVO.setIdUsrGestor(idGestor);  revisionDocumentacionDBEntity.update(revDocVO);  return usuarioNuevo;}  }
class C{  @Interruptible private static void init(String bootstrapClasspath,String[] bootCompilerArgs){  if (VM.VerifyAssertions)   VM._assert(!VM.runningVM);  BootRecord.the_boot_record=new BootRecord();  RVMClassLoader.init(bootstrapClasspath);  if (writingBootImage) {    BootImageCompiler.init(bootCompilerArgs);  }  RuntimeEntrypoints.init();  RVMThread.init();}  }
class C{  public NQueensViewCtrl(StackPane viewRoot){  viewRoot.getChildren().add(gridPane);  viewRoot.setAlignment(Pos.BOTTOM_CENTER);  gridPane.maxWidthProperty().bind(Bindings.min(viewRoot.widthProperty(),viewRoot.heightProperty()).subtract(20));  gridPane.maxHeightProperty().bind(Bindings.min(viewRoot.widthProperty(),viewRoot.heightProperty()).subtract(10));}  }
class C{  @RequestMapping(value="/{cubeName}/init_start_offsets",method={RequestMethod.PUT}) @ResponseBody public GeneralResponse initStartOffsets(@PathVariable String cubeName){  checkCubeName(cubeName);  CubeInstance cubeInstance=cubeService.getCubeManager().getCube(cubeName);  if (cubeInstance.getSourceType() != ISourceAware.ID_STREAMING) {    String msg="Cube '" + cubeName + "' is not a Streaming Cube.";    throw new IllegalArgumentException(msg);  }  final GeneralResponse response=new GeneralResponse();  try {    final Map<Integer,Long> startOffsets=KafkaClient.getCurrentOffsets(cubeInstance);    CubeDesc desc=cubeInstance.getDescriptor();    desc.setPartitionOffsetStart(startOffsets);    cubeService.getCubeDescManager().updateCubeDesc(desc);    response.setProperty("result","success");    response.setProperty("offsets",startOffsets.toString());  } catch (  Exception e) {    throw new RuntimeException(e);  }  return response;}  }
class C{  public void writeLine(long time,double[] column){  String str=Long.toString(time);  for (int i=0; i < column.length; ++i) {    str+=", " + column[i];  }  writer.println(str);}  }
class C{  public StackedXYAreaRenderer(){  this(AREA);}  }
class C{  public static String timeToString(long period){  period/=10;  final long milsecs=period % 100;  period/=100;  final long secs=period % 60;  period/=60;  final long mins=period % 60;  period/=60;  final long hours=period;  return String.format("%02d:%02d:%02d.%02d",hours,mins,secs,milsecs);}  }
class C{  public GMLHandler(GeometryFactory gf,ErrorHandler delegate){  this.delegate=delegate;  this.gf=gf;  stack.push(new Handler(null,null));}  }
class C{  private void processTimerData(EntityManager entityManager,InvocationSequenceData invData,InvocationSequenceData topInvocationParent,double exclusiveDurationDelta){  TimerData timerData=invData.getTimerData();  if (null != timerData) {    double exclusiveTime=invData.getTimerData().getDuration() - exclusiveDurationDelta;    timerData.setExclusiveCount(1L);    timerData.setExclusiveDuration(exclusiveTime);    timerData.calculateExclusiveMax(exclusiveTime);    timerData.calculateExclusiveMin(exclusiveTime);    timerData.addInvocationParentId(topInvocationParent.getId());    passToChainedProcessors(invData.getTimerData(),entityManager);  }}  }
class C{  public void encodeImage(BufferedImage buf,OutputStream os) throws IOException {  ImageWriter writer=ImageWriterRegistry.getInstance().getWriterFor("image/jpeg");  ImageWriterParams params=new ImageWriterParams();  params.setJPEGQuality(1,false);  writer.writeImage(buf,os,params);}  }
class C{  void updated(Object key,Object val){  if (updates == null)   updates=new GridLeanMap<>();  updates.put(key,val);}  }
class C{  public CategoricalResults(int numCategories){  n=numCategories;  probabilities=new double[numCategories];}  }
class C{  public String attributeIndexTipText(){  return "Choose attribute to be used for selection (default last).";}  }
class C{  public NTRUEncryptionPublicKeyParameters(InputStream is,NTRUEncryptionParameters params) throws IOException {  super(false,params);  h=IntegerPolynomial.fromBinary(is,params.N,params.q);}  }
class C{  public Boolean isWhiteLabelWallet(){  return whiteLabelWallet;}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.198 -0500",hash_original_method="B9AFE31805DA49D5CF66B21B19FA6A72",hash_generated_method="6BD011116FB54A602164B5846E190397") @Override public final String toString(){  StringBuilder cab=new StringBuilder(50 + getHopCount() * 30);  cab.append("RouteTracker[");  if (this.localAddress != null) {    cab.append(this.localAddress);    cab.append("->");  }  cab.append('{');  if (this.connected)   cab.append('c');  if (this.tunnelled == TunnelType.TUNNELLED)   cab.append('t');  if (this.layered == LayerType.LAYERED)   cab.append('l');  if (this.secure)   cab.append('s');  cab.append("}->");  if (this.proxyChain != null) {    for (int i=0; i < this.proxyChain.length; i++) {      cab.append(this.proxyChain[i]);      cab.append("->");    }  }  cab.append(this.targetHost);  cab.append(']');  return cab.toString();}  }
class C{  @Override public void keyReleased(KeyEvent e){}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    FileInputStream fis=null;    try {      fis=new FileInputStream(file);      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public boolean isSanSupported(){  return sanSupported;}  }
class C{  public static <T>CompletableFuture<T> exceptionalFutureAsync(Throwable t,Executor executor){  CompletableFuture<T> future=new CompletableFuture<>();  executor.execute(null);  return future;}  }
class C{  private FList<TextRange> doMatchFragments(String name,int patternIndex,int nameIndex,MatchingState matchingState){  if (!isFirstCharMatching(name,nameIndex,patternIndex)) {    return null;  }  int minFragment=isPatternChar(patternIndex - 1,'*') && !isWildcard(patternIndex + 1) && Character.isLetterOrDigit(name.charAt(nameIndex))&& !isWordStart(name,nameIndex) ? 3 : 1;  int i=1;  boolean ignoreCase=myOptions != NameUtil.MatchingCaseSensitivity.ALL;  while (nameIndex + i < name.length() && patternIndex + i < myPattern.length && charEquals(myPattern[patternIndex + i],patternIndex + i,name.charAt(nameIndex + i),ignoreCase)) {    if (isUpperCase[patternIndex + i] && myHasHumps) {      if (i < minFragment) {        return null;      }      if (myPattern[patternIndex + i] != name.charAt(nameIndex + i)) {        int nextWordStart=indexOfWordStart(name,patternIndex + i,nameIndex + i);        FList<TextRange> ranges=matchWildcards(name,patternIndex + i,nextWordStart,matchingState);        if (ranges != null) {          return prependRange(ranges,nameIndex,i);        }        if (i > 1 && isUpperCase[patternIndex + i - 1] && isUpperCase[patternIndex + i - 2]) {          if (nameIndex + i + 1 == name.length() || patternIndex + i + 1 < myPattern.length && !isLowerCase[patternIndex + i + 1]) {            return null;          }        }      }    }    i++;  }  if (patternIndex + i >= myPattern.length) {    return FList.<TextRange>emptyList().prepend(TextRange.from(nameIndex,i));  }  while (i >= minFragment || isWildcard(patternIndex + i)) {    FList<TextRange> ranges=isWildcard(patternIndex + i) ? matchWildcards(name,patternIndex + i,nameIndex + i,matchingState) : matchSkippingWords(name,patternIndex + i,nameIndex + i,false,matchingState);    if (ranges != null) {      return prependRange(ranges,nameIndex,i);    }    i--;  }  return null;}  }
class C{  @Override public void updateNClob(int columnIndex,Reader x,long length) throws SQLException {  updateClob(columnIndex,x,length);}  }
class C{  private static boolean[] createSafeOctets(String safeChars){  int maxChar=-1;  char[] safeCharArray=safeChars.toCharArray();  for (  char c : safeCharArray) {    maxChar=Math.max(c,maxChar);  }  boolean[] octets=new boolean[maxChar + 1];  for (  char c : safeCharArray) {    octets[c]=true;  }  return octets;}  }
class C{  public void mutableAdd(double r,double i){  this.real+=r;  this.imag+=i;}  }
class C{  @Override public void put(final String key,final Object value){  if (null == key)   throw new IllegalArgumentException("key may not be null");  if (key.isEmpty())   throw new IllegalArgumentException("key may not be empty");  globalScope.put(key,value);}  }
class C{  @Override protected void createEditPolicies(){  final boolean editEnabled=isEditEnabled();  if (editEnabled) {    installEditPolicy(EditPolicy.COMPONENT_ROLE,new NoteEditPolicy());  }}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<?>,V>ImmutableRangeMap<K,V> of(){  return (ImmutableRangeMap<K,V>)EMPTY;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  if (f != null)   Seeker.getInstance().removeArchiveDirectory(f,Seeker.VIDEO_DIR_MASK);  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.UNARY_EXPRESSION__OP:    return op != OP_EDEFAULT;case N4JSPackage.UNARY_EXPRESSION__EXPRESSION:  return expression != null;}return super.eIsSet(featureID);}  }
class C{  public void testInterrupt() throws Exception, SQLException {  ThreadPool threadPool=new ThreadPool(numThreads);  ResultSet userTabs;  userTabs=conn.getMetaData().getTables(null,null,null,null);  while (userTabs.next()) {    String tableName=userTabs.getString("TABLE_NAME");    if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {      statement.execute(DatabaseCreator.DROP_TABLE1);    }  }  db.exec(DatabaseCreator.CREATE_TABLE3,null);  db.exec(DatabaseCreator.CREATE_TABLE1,null);  int id1=numOfRecords - 3;  threadPool.runTask(createTask1(id1,dbFile.getPath(),tracker));  int id2=numOfRecords + 3;  threadPool.runTask(createTask2Interrupt(id2,dbFile.getPath(),tracker));  threadPool.join();  List<String> errors=tracker.getErrors();  System.out.println("Last error: " + db.error_message());  if (errors.size() > 0) {    assertEquals(errors.get(0),db.error_string(Constants.SQLITE_LOCKED));    for (    String s : errors) {      Logger.global.info("INTERRUPT Error: " + s);    }  } else {    fail("Should have one exception: database should be locked.");  }  db.exec("delete from " + DatabaseCreator.TEST_TABLE1 + " where 1",null);  db.exec("delete from " + DatabaseCreator.TEST_TABLE3 + " where 1",null);}  }
class C{  public void unregisterPlayerListener(CheerleaderPlayerListener listener){  checkState();  mCheerleaderPlayerListeners.remove(listener);}  }
class C{  public static int intersectLineSegmentAar(double p0X,double p0Y,double p1X,double p1Y,double minX,double minY,double maxX,double maxY,Vector2d result){  double dirX=p1X - p0X, dirY=p1Y - p0Y;  double invDirX=1.0 / dirX, invDirY=1.0 / dirY;  double tNear, tFar, tymin, tymax;  if (invDirX >= 0.0) {    tNear=(minX - p0X) * invDirX;    tFar=(maxX - p0X) * invDirX;  } else {    tNear=(maxX - p0X) * invDirX;    tFar=(minX - p0X) * invDirX;  }  if (invDirY >= 0.0) {    tymin=(minY - p0Y) * invDirY;    tymax=(maxY - p0Y) * invDirY;  } else {    tymin=(maxY - p0Y) * invDirY;    tymax=(minY - p0Y) * invDirY;  }  if (tNear > tymax || tymin > tFar)   return OUTSIDE;  tNear=tymin > tNear || Double.isNaN(tNear) ? tymin : tNear;  tFar=tymax < tFar || Double.isNaN(tFar) ? tymax : tFar;  int type=OUTSIDE;  if (tNear < tFar && tNear <= 1.0 && tFar >= 0.0) {    if (tNear > 0.0 && tFar > 1.0) {      tFar=tNear;      type=ONE_INTERSECTION;    } else     if (tNear < 0.0 && tFar < 1.0) {      tNear=tFar;      type=ONE_INTERSECTION;    } else     if (tNear < 0.0 && tFar > 1.0) {      type=INSIDE;    } else {      type=TWO_INTERSECTION;    }    result.x=tNear;    result.y=tFar;  }  return type;}  }
class C{  public static ItemStack sanitize(ItemStack stack){  if (stack == null || stack.getType() == null || stack.getType() == Material.AIR) {    return null;  }  Material item=getItem(getName(stack.getType()));  if (item == null) {    return null;  }  if (item != stack.getType()) {    stack=stack.clone();    stack.setType(item);  }  return stack;}  }
class C{  public TraitTypeCheckingExtension(final StaticTypeCheckingVisitor typeCheckingVisitor){  super(typeCheckingVisitor);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xF21A1FCA,version=150) public int sceSdRemoveValue(@BufferInfo(lengthInfo=LengthInfo.fixedLength,length=40,usage=Usage.inout) TPointer ctx2Addr,@BufferInfo(lengthInfo=LengthInfo.nextParameter,usage=Usage.in) TPointer data,int size){  SAVEDATA.SD_Ctx1 ctx=new SAVEDATA.SD_Ctx1();  ctx.read(ctx2Addr);  byte[] bytes=new byte[size];  Utilities.readBytes(data.getAddress(),size,bytes,0);  int result=crypto.getSAVEDATAEngine().hleSdRemoveValue(ctx,bytes,size);  ctx.write(ctx2Addr);  return result;}  }
class C{  public static Builder builder(){  return new Builder(new AcceptResponse());}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey,Base64.DEFAULT);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  IllegalArgumentException e) {    Log.e(TAG,"Base64 decoding failed.");    throw e;  }}  }
class C{  static NumberFormatException forInputString(String s){  return new NumberFormatException("For input string: \"" + s + "\"");}  }
class C{  public static List<PrincipalUserDto> transformToDto(List<PrincipalUser> users){  if (users == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  List<PrincipalUserDto> result=new ArrayList<>();  for (  PrincipalUser user : users) {    result.add(transformToDto(user));  }  return result;}  }
class C{  public void tagAvatar(AvatarConfig config){  config.addCredentials(this);  POST(this.url + "/tag-avatar",config.toXML());}  }
class C{  protected ByteArrayOutputStream serializeObject(Object obj) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  if (null != obj) {    ObjectOutputStream out=new ObjectOutputStream(baos);    out.writeObject(obj);    out.flush();  }  return baos;}  }
class C{  public SVGOMAnimateMotionElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  @Override protected void onListItemClick(ListView listView,View view,int position,long id){  long idFormsTable=((SimpleCursorAdapter)getListAdapter()).getItemId(position);  Uri formUri=ContentUris.withAppendedId(FormsColumns.CONTENT_URI,idFormsTable);  Collect.getInstance().getActivityLogger().logAction(this,"onListItemClick",formUri.toString());  String action=getIntent().getAction();  if (Intent.ACTION_PICK.equals(action)) {    setResult(RESULT_OK,new Intent().setData(formUri));  } else {    startActivity(new Intent(Intent.ACTION_EDIT,formUri));  }  finish();}  }
class C{  public ConditionIn(Database database,Expression left,ArrayList<Expression> values){  this.database=database;  this.left=left;  this.valueList=values;}  }
class C{  public static boolean isInDeclaredNamespace(XmlTag context,String nsUri,String nsPrefix){  if (nsUri == null || nsUri.length() == 0 || nsPrefix != null && nsPrefix.length() > 0) {    return true;  }  do {    if (context.getLocalNamespaceDeclarations().containsValue(nsUri))     return true;    context=(XmlTag)(context.getParent() instanceof XmlTag ? context.getParent() : null);  } while (context != null);  return false;}  }
class C{  public int multipleShortVectorCrossover(final int min,final int max,final int start,final int subpopulation,final Individual[] inds,final EvolutionState state,final int thread){  if (!(inds[0] instanceof ShortVectorIndividual))   state.output.fatal("Trying to produce short vector individuals when you can't!");  if (sources.length <= 2)   state.output.error("Only two parents specified!");  int n=typicalIndsProduced();  if (n < min)   n=min;  if (n > max)   n=max;  for (int i=0; i < parents.length; i++) {    sources[i].produce(1,1,i,subpopulation,parents,state,thread);    if (!(sources[i] instanceof BreedingPipeline))     parents[i]=(ShortVectorIndividual)(parents[i].clone());  }  VectorSpecies species=(VectorSpecies)inds[0].species;  for (int i=0; i < parents[0].genomeLength(); i++) {    if (state.random[thread].nextBoolean(species.crossoverProbability)) {      for (int j=parents.length - 1; j > 0; j--) {        int swapIndex=state.random[thread].nextInt(j);        short temp=((ShortVectorIndividual)parents[j]).genome[i];        ((ShortVectorIndividual)parents[j]).genome[i]=((ShortVectorIndividual)parents[swapIndex]).genome[i];        ((ShortVectorIndividual)parents[swapIndex]).genome[i]=temp;      }    }  }  for (int i=0, q=start; i < parents.length; i++, q++) {    parents[i].evaluated=false;    if (q < inds.length) {      inds[q]=(ShortVectorIndividual)parents[i];    }  }  return n;}  }
class C{  public static String checkAndAppendHDFSUrl(String filePath){  String currentPath=filePath;  if (null != filePath && filePath.length() != 0 && FileFactory.getFileType(filePath) != FileFactory.FileType.HDFS && FileFactory.getFileType(filePath) != FileFactory.FileType.VIEWFS) {    String baseDFSUrl=CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_DDL_BASE_HDFS_URL);    if (null != baseDFSUrl) {      String dfsUrl=conf.get(FS_DEFAULT_FS);      if (null != dfsUrl && (dfsUrl.startsWith(HDFS_PREFIX) || dfsUrl.startsWith(VIEWFS_PREFIX))) {        baseDFSUrl=dfsUrl + baseDFSUrl;      }      if (baseDFSUrl.endsWith("/")) {        baseDFSUrl=baseDFSUrl.substring(0,baseDFSUrl.length() - 1);      }      if (!filePath.startsWith("/")) {        filePath="/" + filePath;      }      currentPath=baseDFSUrl + filePath;    }  }  return currentPath;}  }
class C{  public static <T>T splitEachLine(URL self,Pattern pattern,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self),pattern,closure);}  }
class C{  private ECKey(@Nullable BigInteger privKey,@Nullable byte[] pubKey){  this(privKey,pubKey,false);}  }
class C{  private void expireSession(long index,long timestamp,ServerSessionContext session,CompletableFuture<Void> future,ThreadContext context){  if (!log.isOpen()) {    context.executor().execute(null);    return;  }  if (!session.state().active()) {    context.executor().execute(null);    return;  }  executor.tick(index,timestamp);  executor.init(index,Instant.ofEpochMilli(timestamp),ServerStateMachineContext.Type.COMMAND);  session.expire(index);  for (  SessionListener listener : executor.context().sessions().listeners) {    listener.expire(session);    listener.close(session);  }  long lastCompleted=calculateLastCompleted(index);  executor.commit();  context.executor().execute(null);}  }
class C{  boolean expansionFilesDelivered(){  for (  XAPKFile xf : xAPKS) {    String fileName=Helpers.getExpansionAPKFileName(this,xf.mIsMain,xf.mFileVersion);    if (!Helpers.doesFileExist(this,fileName,xf.mFileSize,false))     return false;  }  return true;}  }
class C{  public boolean isCached(URI id){  return cache.containsKey(id);}  }
class C{  public static Calendar toCalendar(Date self){  Calendar cal=Calendar.getInstance();  cal.setTime(self);  return cal;}  }
class C{  public void updateSensorsFromPoll(AcelaReply r){  for (int i=0; i < getNumNodes(); i++) {    AcelaNode node=(AcelaNode)getNode(i);    if (node.getSensorBitsPerCard() > 0) {      node.markChanges(r);    }  }}  }
class C{  public Node encode(mxCodec enc,Object obj){  Node node=null;  if (obj instanceof mxGraphModel) {    mxGraphModel model=(mxGraphModel)obj;    String name=mxCodecRegistry.getName(obj);    node=enc.document.createElement(name);    Node rootNode=enc.document.createElement("root");    enc.encodeCell((mxICell)model.getRoot(),rootNode,true);    node.appendChild(rootNode);  }  return node;}  }
class C{  public void addResultListener(ResultListener listener){  getHierarchy().addResultListener(listener);}  }
class C{  public WithStatement createWithStatement(){  WithStatementImpl withStatement=new WithStatementImpl();  return withStatement;}  }
class C{  public void afterPrimaryIdentificationFromBackup(ServerLocation primaryEndpoint){}  }
class C{  public boolean rewriteExif(ByteBuffer buf,Collection<ExifTag> tags) throws IOException {  ExifModifier mod=null;  try {    mod=new ExifModifier(buf,this);    for (    ExifTag t : tags) {      mod.modifyTag(t);    }    return mod.commit();  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }}  }
class C{  public void removeSeries(TimePeriodValues series){  ParamChecks.nullNotPermitted(series,"series");  this.data.remove(series);  series.removeChangeListener(this);  fireDatasetChanged();}  }
class C{  public static int translate(String sourceType,String targetType,int n){  return getGlobalNumberer(targetType).number(getGlobalNumberer(sourceType).object(n));}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  void createEntry(int hash,K key,V value,int bucketIndex){  Entry<K,V> e=table[bucketIndex];  table[bucketIndex]=new Entry<>(hash,key,value,e,keyEquality);  size++;}  }
class C{  protected DefaultAudioAction(SwingSet2 swingset){  super("Audio Default");  this.swingset=swingset;}  }
class C{  public boolean isRadioButton(){  return emblem instanceof RadioButton;}  }
class C{  public static Object paintCachedTeXFormula(Object o,Graphics2DInterface g) throws ParseException {  if (o == null || !(o instanceof CachedTeXFormula)) {    return null;  }  CachedTeXFormula cached=(CachedTeXFormula)o;  SoftReference<CachedImage> img=cache.get(cached);  if (img == null || img.get() == null) {    img=makeImage(cached);  }  g.drawImage(img.get().image,identity);  return cached;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_AFTER_CODE_1__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_AFTER_CODE_1__CODE_LANGS_1:  return ((InternalEList<?>)getCodeLangs_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  void clearValues(){  values.clear();}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  fsb().sendSAXcharacters(ch,m_start,m_length);}  }
class C{  public static void writeRectangularData(DataSet dataSet,Writer out,char separator) throws IOException {  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  StringBuilder buf=new StringBuilder();  for (int col=0; col < dataSet.getNumColumns(); col++) {    String name=dataSet.getVariable(col).getName();    if (name.trim().equals("")) {      name="C" + (col - 1);    }    buf.append(name);    if (col < dataSet.getNumColumns() - 1) {      buf.append(separator);    }  }  for (int row=0; row < dataSet.getNumRows(); row++) {    buf.append("\n");    for (int col=0; col < dataSet.getNumColumns(); col++) {      Node variable=dataSet.getVariable(col);      if (variable instanceof ContinuousVariable) {        double value=dataSet.getDouble(row,col);        if (ContinuousVariable.isDoubleMissingValue(value)) {          buf.append("*");        } else {          buf.append(nf.format(value));        }        if (col < dataSet.getNumColumns() - 1) {          buf.append(separator);        }      } else       if (variable instanceof DiscreteVariable) {        Object obj=dataSet.getObject(row,col);        String val=((obj == null) ? "" : obj.toString());        buf.append(val);        if (col < dataSet.getNumColumns() - 1) {          buf.append(separator);        }      }    }  }  buf.append("\n");  out.write(buf.toString());  out.close();}  }
class C{  public void resetState(){  sessionState.clear();}  }
class C{  @Override public boolean isWritable(int columnIndex){  return false;}  }
class C{  private void parseArray(String fieldName){  int chr;  int idx=0;  while (true) {    sr.skipWhitespaceRead();    sr.unreadLastCharacter();    parseValue(fieldName + "[" + (idx++)+ "]");    chr=sr.skipWhitespaceRead();    if (chr == END_ARRAY) {      break;    }    if (chr != VALUE_SEPARATOR) {      throw new IllegalArgumentException("Expected ',' or ']' inside array at position " + sr.getPosition());    }  }}  }
class C{  public static void modify(Calendar val,int field,int modType){  if (val.get(Calendar.YEAR) > 280000000) {    throw new ArithmeticException("Calendar value too large for accurate calculations");  }  if (field == Calendar.MILLISECOND) {    return;  }  Date date=val.getTime();  long time=date.getTime();  boolean done=false;  int millisecs=val.get(Calendar.MILLISECOND);  if (MODIFY_TRUNCATE == modType || millisecs < 500) {    time=time - millisecs;  }  if (field == Calendar.SECOND) {    done=true;  }  int seconds=val.get(Calendar.SECOND);  if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {    time=time - (seconds * 1000L);  }  if (field == Calendar.MINUTE) {    done=true;  }  int minutes=val.get(Calendar.MINUTE);  if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {    time=time - (minutes * 60000L);  }  if (date.getTime() != time) {    date.setTime(time);    val.setTime(date);  }  boolean roundUp=false;  for (int i=0; i < fields.length; i++) {    for (int j=0; j < fields[i].length; j++) {      if (fields[i][j] == field) {        if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {          if (field == ApacheCommonsDateUtils.SEMI_MONTH) {            if (val.get(Calendar.DATE) == 1) {              val.add(Calendar.DATE,15);            } else {              val.add(Calendar.DATE,-15);              val.add(Calendar.MONTH,1);            }          } else           if (field == Calendar.AM_PM) {            if (val.get(Calendar.HOUR_OF_DAY) == 0) {              val.add(Calendar.HOUR_OF_DAY,12);            } else {              val.add(Calendar.HOUR_OF_DAY,-12);              val.add(Calendar.DATE,1);            }          } else {            val.add(fields[i][0],1);          }        }        return;      }    }    int offset=0;    boolean offsetSet=false;switch (field) {case ApacheCommonsDateUtils.SEMI_MONTH:      if (fields[i][0] == Calendar.DATE) {        offset=val.get(Calendar.DATE) - 1;        if (offset >= 15) {          offset-=15;        }        roundUp=offset > 7;        offsetSet=true;      }    break;case Calendar.AM_PM:  if (fields[i][0] == Calendar.HOUR_OF_DAY) {    offset=val.get(Calendar.HOUR_OF_DAY);    if (offset >= 12) {      offset-=12;    }    roundUp=offset >= 6;    offsetSet=true;  }break;}if (!offsetSet) {int min=val.getActualMinimum(fields[i][0]);int max=val.getActualMaximum(fields[i][0]);offset=val.get(fields[i][0]) - min;roundUp=offset > ((max - min) / 2);}if (offset != 0) {val.set(fields[i][0],val.get(fields[i][0]) - offset);}}throw new IllegalArgumentException("The field " + field + " is not supported");}  }
class C{  Object putInternal(CharSequence key,Object value,boolean overwrite){  if (key == null) {    throw new IllegalArgumentException("The key argument was null");  }  if (key.length() == 0) {    throw new IllegalArgumentException("The key argument was zero-length");  }  if (value == null) {    throw new IllegalArgumentException("The value argument was null");  }  acquireWriteLock();  try {    SearchResult searchResult=searchTree(key);    SearchResult.Classification classification=searchResult.classification;switch (classification) {case EXACT_MATCH:{        Object existingValue=searchResult.nodeFound.getValue();        if (!overwrite && existingValue != null) {          return existingValue;        }        Node replacementNode=nodeFactory.createNode(searchResult.nodeFound.getIncomingEdge(),value,searchResult.nodeFound.getOutgoingEdges(),false);        searchResult.parentNode.updateOutgoingEdge(replacementNode);        return existingValue;      }case KEY_ENDS_MID_EDGE:{      CharSequence keyCharsFromStartOfNodeFound=key.subSequence(searchResult.charsMatched - searchResult.charsMatchedInNodeFound,key.length());      CharSequence commonPrefix=CharSequences.getCommonPrefix(keyCharsFromStartOfNodeFound,searchResult.nodeFound.getIncomingEdge());      CharSequence suffixFromExistingEdge=CharSequences.subtractPrefix(searchResult.nodeFound.getIncomingEdge(),commonPrefix);      Node newChild=nodeFactory.createNode(suffixFromExistingEdge,searchResult.nodeFound.getValue(),searchResult.nodeFound.getOutgoingEdges(),false);      Node newParent=nodeFactory.createNode(commonPrefix,value,Arrays.asList(newChild),false);      searchResult.parentNode.updateOutgoingEdge(newParent);      return null;    }case INCOMPLETE_MATCH_TO_END_OF_EDGE:{    CharSequence keySuffix=key.subSequence(searchResult.charsMatched,key.length());    Node newChild=nodeFactory.createNode(keySuffix,value,Collections.<Node>emptyList(),false);    List<Node> edges=new ArrayList<Node>(searchResult.nodeFound.getOutgoingEdges().size() + 1);    edges.addAll(searchResult.nodeFound.getOutgoingEdges());    edges.add(newChild);    Node clonedNode=nodeFactory.createNode(searchResult.nodeFound.getIncomingEdge(),searchResult.nodeFound.getValue(),edges,searchResult.nodeFound == root);    if (searchResult.nodeFound == root) {      this.root=clonedNode;    } else {      searchResult.parentNode.updateOutgoingEdge(clonedNode);    }    return null;  }case INCOMPLETE_MATCH_TO_MIDDLE_OF_EDGE:{  CharSequence keyCharsFromStartOfNodeFound=key.subSequence(searchResult.charsMatched - searchResult.charsMatchedInNodeFound,key.length());  CharSequence commonPrefix=CharSequences.getCommonPrefix(keyCharsFromStartOfNodeFound,searchResult.nodeFound.getIncomingEdge());  CharSequence suffixFromExistingEdge=CharSequences.subtractPrefix(searchResult.nodeFound.getIncomingEdge(),commonPrefix);  CharSequence suffixFromKey=key.subSequence(searchResult.charsMatched,key.length());  Node n1=nodeFactory.createNode(suffixFromKey,value,Collections.<Node>emptyList(),false);  Node n2=nodeFactory.createNode(suffixFromExistingEdge,searchResult.nodeFound.getValue(),searchResult.nodeFound.getOutgoingEdges(),false);  @SuppressWarnings({"NullableProblems"}) Node n3=nodeFactory.createNode(commonPrefix,null,Arrays.asList(n1,n2),false);  searchResult.parentNode.updateOutgoingEdge(n3);  return null;}default :{throw new IllegalStateException("Unexpected classification for search result: " + searchResult);}}}  finally {releaseWriteLock();}}  }
class C{  @POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path("/{alertId}/triggers") @Description("Creates new triggers for the given alert ID.") public List<TriggerDto> addTrigger(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId,TriggerDto triggerDto){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (triggerDto == null) {    throw new WebApplicationException("Null trigger object cannot be created.",Status.BAD_REQUEST);  }  Alert alert=alertService.findAlertByPrimaryKey(alertId);  if (alert != null) {    validateResourceAuthorization(req,alert.getOwner(),getRemoteUser(req));    Trigger trigger=new Trigger(alert,triggerDto.getType(),triggerDto.getName(),triggerDto.getThreshold(),triggerDto.getSecondaryThreshold(),triggerDto.getInertia());    List<Trigger> triggers=new ArrayList<Trigger>(alert.getTriggers());    triggers.add(trigger);    alert.setTriggers(triggers);    alert.setModifiedBy(getRemoteUser(req));    return TriggerDto.transformToDto(alertService.updateAlert(alert).getTriggers());  }  throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);}  }
class C{  public String createLabel(CompletionProposal proposal){  return createStyledLabel(proposal).getString();}  }
class C{  public static void createClientCache2(String host,Integer port1) throws Exception {  int PORT1=port1.intValue();  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  new PutAllDUnitTest().createCache(props);  props.setProperty("retryAttempts","2");  props.setProperty("endpoints","ep1=" + host + ":"+ PORT1);  props.setProperty("redundancyLevel","-1");  props.setProperty("establishCallbackConnection","true");  props.setProperty("LBPolicy","Sticky");  props.setProperty("readTimeout","2000");  props.setProperty("socketBufferSize","1000");  props.setProperty("retryInterval","250");  props.setProperty("connectionsPerServer","2");  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  PoolImpl p=(PoolImpl)ClientServerTestCase.configureConnectionPool(factory,host,PORT1,-1,true,-1,2,null);  CacheListener clientListener=new HAEventIdPropagationListenerForClient2();  factory.setCacheListener(clientListener);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);  assertNotNull(region);  region.registerInterest("ALL_KEYS",InterestResultPolicy.NONE);  pool=p;}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  public static GraphRequest newUploadPhotoRequest(AccessToken accessToken,Uri photoUri,Callback callback) throws FileNotFoundException {  if (Utility.isFileUri(photoUri)) {    return newUploadPhotoRequest(accessToken,new File(photoUri.getPath()),callback);  } else   if (!Utility.isContentUri(photoUri)) {    throw new FacebookException("The photo Uri must be either a file:// or content:// Uri");  }  Bundle parameters=new Bundle(1);  parameters.putParcelable(PICTURE_PARAM,photoUri);  return new GraphRequest(accessToken,MY_PHOTOS,parameters,HttpMethod.POST,callback);}  }
class C{  public ProcessWorkflow addWorkflow(long serviceProcessId,long preProcessStepId,long postProcessStepId,String autoEvent,String actionName,boolean assignUser,long actionUserId,boolean requestPayment,String paymentFee,boolean generateReceptionNo,String receptionNoPattern,boolean generateDeadline,String deadlinePattern,boolean isFinishStep,String preCondition,boolean isMultipled,ServiceContext context) throws PortalException, SystemException {  long processWorkflowId=counterLocalService.increment(ProcessWorkflow.class.getName());  ProcessWorkflow workflow=processWorkflowPersistence.create(processWorkflowId);  Date now=new Date();  if (Validator.isNotNull(workflow)) {    workflow.setCompanyId(context.getCompanyId());    workflow.setGroupId(context.getScopeGroupId());    workflow.setUserId(context.getUserId());    workflow.setCreateDate(now);    workflow.setModifiedDate(now);    workflow.setServiceProcessId(serviceProcessId);    workflow.setPreProcessStepId(preProcessStepId);    workflow.setPostProcessStepId(postProcessStepId);    workflow.setAutoEvent(autoEvent);    workflow.setActionName(actionName);    workflow.setAssignUser(assignUser);    workflow.setActionUserId(actionUserId);    workflow.setRequestPayment(requestPayment);    workflow.setPaymentFee(paymentFee);    workflow.setGenerateReceptionNo(generateReceptionNo);    workflow.setReceptionNoPattern(receptionNoPattern);    workflow.setGenerateDeadline(generateDeadline);    workflow.setDeadlinePattern(deadlinePattern);    workflow.setIsFinishStep(isFinishStep);    workflow.setPreCondition(preCondition);    workflow.setIsMultipled(isMultipled);    processWorkflowPersistence.update(workflow);  }  return workflow;}  }
class C{  public void addKeyValue(String key,Object value){  keys.add(key);  resources.setThemeProperty(themeName,key,value);  Collections.sort(keys);  int row=keys.indexOf(key);  fireTableRowsInserted(row,row);  refreshTheme();}  }
class C{  @SuppressWarnings("unchecked") public static <V extends Parcelable>Map<String,V> readHashMapStringKey(Parcel in,ClassLoader loader){  if (in == null) {    return null;  }  int size=in.readInt();  if (size == -1) {    return null;  }  Map<String,V> map=new HashMap<String,V>();  for (int i=0; i < size; i++) {    String key=in.readString();    map.put(key,(V)in.readParcelable(loader));  }  return map;}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  @Override protected TreeKernelSvmBooleanOutcomeClassifier newClassifier(){  return new TreeKernelSvmBooleanOutcomeClassifier(this.featuresEncoder,this.outcomeEncoder,this.model);}  }
class C{  public boolean isDocOrdered(){  return true;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public MultiFieldQueryParser(String[] fields,Analyzer analyzer,Map<String,Float> boosts){  this(fields,analyzer);  this.boosts=boosts;}  }
class C{  protected Dimension computeLengths(String annoText){  String[] lines=Util.splitLines(annoText);  int lineLength=0;  for (  String line : lines) {    if (line.length() > lineLength)     lineLength=line.length();  }  return new Dimension(lineLength + 5,lines.length + 1);}  }
class C{  public void testSetObject_int_Object_int() throws SQLException {  PreparedStatement ps=null;  try {    String query="insert into type (IntVal) values (?);";    ps=conn.prepareStatement(query);    Statement st=null;    try {      ps.setObject(1,Integer.MAX_VALUE,Types.INTEGER);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where IntVal=" + Integer.MAX_VALUE);      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type (LongVal) values (?);";    ps=conn.prepareStatement(query);    try {      ps.setObject(1,"test text",Types.CHAR);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where LongVal='test text';");      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type (DecVal) values (?);";    ps=conn.prepareStatement(query);    ps.setObject(1,new Object(),Types.DECIMAL);    ps.execute();    query="insert into type (dateVal) values (?);";    ps=conn.prepareStatement(query);    Date d=new Date(123456789);    try {      ps.setObject(1,d,Types.DATE);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where dateVal='" + d.getTime() + "';");      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type (BlobVal) values (?);";    ps=conn.prepareStatement(query);    try {      ps.setObject(1,"",Types.BLOB);      ps.execute();    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }  }  finally {    try {      ps.close();    } catch (    Exception ee) {    }  }  try {    ps.setObject(1,Integer.MAX_VALUE,Types.INTEGER);    fail("Exception not thrown");  } catch (  SQLException e) {  }}  }
class C{  public void hide(){  if (mSettingPopup != null) {    mSettingPopup.dismiss();  }  if (mAnchor == null) {    return;  }  try {    mAnchor.removeView(this);    mHandler.removeMessages(SHOW_PROGRESS);  } catch (  IllegalArgumentException ex) {    Log.w("MediaController","already removed");  }  mShowing=false;}  }
class C{  public h4 addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static QueryAssociatedPortsForProcessorResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryAssociatedPortsForProcessorResponse object=new QueryAssociatedPortsForProcessorResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryAssociatedPortsForProcessorResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryAssociatedPortsForProcessorResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(VasaAssociationObject.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(VasaAssociationObject.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((VasaAssociationObject[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(VasaAssociationObject.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public synchronized void clear(){  Entry<?,?> tab[]=table;  modCount++;  for (int index=tab.length; --index >= 0; )   tab[index]=null;  count=0;}  }
class C{  protected int textPosIn(String text,int start,int end,String p){  int plen=p.length();  int max=end - plen;  if (!this.fIgnoreCase) {    int i=text.indexOf(p,start);    if (i == -1 || i > max) {      return -1;    }    return i;  }  for (int i=start; i <= max; ++i) {    if (text.regionMatches(true,i,p,0,plen)) {      return i;    }  }  return -1;}  }
class C{  public TransformMatrix2D inverse(){  if (this == UNITY_MATRIX)   return UNITY_MATRIX;  final double determinant=determinant();  if (determinant == 0.0d)   return null;  return new TransformMatrix2D(d / determinant,-b / determinant,-c / determinant,a / determinant,(c * f - d * e) / determinant,(b * e - a * f) / determinant);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.dialBackgroundPaint,stream);  SerialUtilities.writePaint(this.dialOutlinePaint,stream);  SerialUtilities.writePaint(this.needlePaint,stream);  SerialUtilities.writePaint(this.valuePaint,stream);  SerialUtilities.writePaint(this.tickPaint,stream);  SerialUtilities.writePaint(this.tickLabelPaint,stream);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.round(z1));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean doYesNoDialog(String title,String question){  ConfirmDialog confirm=new ConfirmDialog(frame,title,question);  confirm.setVisible(true);  return confirm.getAnswer();}  }
class C{  private void createSeparator(){  final Composite c=new Composite(this.parent.shell,SWT.NONE);  c.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,false));  c.setBackground(this.getGreyColor());  final GridLayout gridLayout=new GridLayout(1,false);  gridLayout.marginHeight=gridLayout.marginWidth=0;  c.setLayout(gridLayout);  final Label separator=new Label(c,SWT.SEPARATOR | SWT.HORIZONTAL);  separator.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,false));}  }
class C{  @Override public void paintCurrentValue(Graphics g,Rectangle bounds,boolean hasFocus){  ListCellRenderer renderer=comboBox.getRenderer();  Component c;  c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,false,false);  boolean shouldValidate=false;  if (c instanceof JPanel) {    shouldValidate=true;  }  if (c instanceof UIResource) {    c.setName("ComboBox.renderer");  }  boolean force=forceOpaque && c instanceof JComponent;  if (force) {    ((JComponent)c).setOpaque(false);  }  int x=bounds.x, y=bounds.y, w=bounds.width, h=bounds.height;  if (padding != null) {    x=bounds.x + padding.left;    y=bounds.y + padding.top;    w=bounds.width - (padding.left + padding.right);    h=bounds.height - (padding.top + padding.bottom);  }  currentValuePane.paintComponent(g,c,comboBox,x,y,w,h,shouldValidate);  if (force) {    ((JComponent)c).setOpaque(true);  }}  }
class C{  public long toEpochSecond(){  return transition.toEpochSecond(offsetBefore);}  }
class C{  public static TouchedChecker prefixTouched(String dataPrefix,String touchedPrefix){  return (null);}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeDouble(parentDistance);}  }
class C{  @Override public List<String> mget(final String... keys){  checkIsInMultiOrPipeline();  client.mget(keys);  return client.getMultiBulkReply();}  }
class C{  public static Literal parseLiteral(String nTriplesLiteral,ValueFactory valueFactory) throws IllegalArgumentException {  if (nTriplesLiteral.startsWith("\"")) {    int endLabelIdx=findEndOfLabel(nTriplesLiteral);    if (endLabelIdx != -1) {      int startLangIdx=nTriplesLiteral.indexOf("@",endLabelIdx);      int startDtIdx=nTriplesLiteral.indexOf("^^",endLabelIdx);      if (startLangIdx != -1 && startDtIdx != -1) {        throw new IllegalArgumentException("Literals can not have both a language and a datatype");      }      String label=nTriplesLiteral.substring(1,endLabelIdx);      label=unescapeString(label);      if (startLangIdx != -1) {        String language=nTriplesLiteral.substring(startLangIdx + 1);        return valueFactory.createLiteral(label,language);      } else       if (startDtIdx != -1) {        String datatype=nTriplesLiteral.substring(startDtIdx + 2);        IRI dtURI=parseURI(datatype,valueFactory);        return valueFactory.createLiteral(label,dtURI);      } else {        return valueFactory.createLiteral(label);      }    }  }  throw new IllegalArgumentException("Not a legal N-Triples literal: " + nTriplesLiteral);}  }
class C{  public static String computeHashMD5(final String text) throws NoSuchAlgorithmException {  MessageDigest md=MessageDigest.getInstance("MD5");  md.update(text.getBytes(),0,text.length());  byte hashData[]=md.digest();  StringBuilder sb=new StringBuilder(hashData.length * 2);  for (int i=0; i < hashData.length; i++) {    int b=(0xFF & hashData[i]);    if (b <= 0xF)     sb.append('0');    sb.append(Integer.toHexString(b));  }  return sb.toString().toUpperCase();}  }
class C{  public static Group createGroup(){  return new GroupImpl();}  }
class C{  public String sql_select(String vendorName,String catalogName,String schemaName,String tableName){  ArrayList<String> columnNames=null;  ArrayList<String> aliasNames=null;  ArrayList<String> conditions=null;  ArrayList<String> sortColumns=null;  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  @Override public Long lpush(final byte[] key,final byte[]... strings){  checkIsInMultiOrPipeline();  client.lpush(key,strings);  return client.getIntegerReply();}  }
class C{  public static long allocateId(){  return RegistryEnvironment.UNITTEST.equals(RegistryEnvironment.get()) ? nextTestId.getAndIncrement() : DatastoreServiceFactory.getDatastoreService().allocateIds(APP_WIDE_ALLOCATION_KIND,1).iterator().next().getId();}  }
class C{  public static void main(String... args) throws Exception {  ArchiveToolStore app=new ArchiveToolStore();  String arg=args.length != 3 ? null : args[0];  if ("-compress".equals(arg)) {    app.fileName=args[1];    app.compress(args[2]);  } else   if ("-extract".equals(arg)) {    app.fileName=args[1];    app.expand(args[2]);  } else {    System.out.println("Command line options:");    System.out.println("-compress <file> <sourceDir>");    System.out.println("-extract <file> <targetDir>");  }}  }
class C{  private String[] parseLine(String nextLine,boolean multi) throws IOException {  if (!multi && pending != null) {    pending=null;  }  if (nextLine == null) {    if (pending != null) {      String s=pending;      pending=null;      return new String[]{s};    } else {      return null;    }  }  List<String> tokensOnThisLine=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  StringBuilder sb=new StringBuilder(INITIAL_READ_SIZE);  boolean inQuotes=false;  if (pending != null) {    sb.append(pending);    pending=null;    inQuotes=!this.ignoreQuotations;  }  inQuotes=checkForQuotes(nextLine,tokensOnThisLine,sb,inQuotes);  if ((inQuotes && !ignoreQuotations)) {    if (multi) {      sb.append('\n');      charCountInsideQuote=sb.length() - (sb.indexOf("\"") + 1);      if (charCountInsideQuote >= 10000) {        throw new IOException("Un-terminated quoted field after 10000 characters");      }      pending=sb.toString();      sb=null;    } else {      throw new IOException("Un-terminated quoted field at end of CSV line");    }  } else {    inField=false;    charCountInsideQuote=0;  }  if (sb != null) {    tokensOnThisLine.add(sb.toString());  }  return tokensOnThisLine.toArray(new String[tokensOnThisLine.size()]);}  }
class C{  public InGroupPredicate(){}  }
class C{  public NotificationChain basicSetDeclaredName(LiteralOrComputedPropertyName newDeclaredName,NotificationChain msgs){  LiteralOrComputedPropertyName oldDeclaredName=declaredName;  declaredName=newDeclaredName;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_METHOD_DECLARATION__DECLARED_NAME,oldDeclaredName,newDeclaredName);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private static WindowsFileAttributes fromFileAttributeData(long address,int reparseTag){  int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_ATTRIBUTE_DATA_ATTRIBUTES);  long creationTime=unsafe.getLong(address + OFFSETOF_FILE_ATTRIBUTE_DATA_CREATETIME);  long lastAccessTime=unsafe.getLong(address + OFFSETOF_FILE_ATTRIBUTE_DATA_LASTACCESSTIME);  long lastWriteTime=unsafe.getLong(address + OFFSETOF_FILE_ATTRIBUTE_DATA_LASTWRITETIME);  long size=((long)(unsafe.getInt(address + OFFSETOF_FILE_ATTRIBUTE_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(address + OFFSETOF_FILE_ATTRIBUTE_DATA_SIZELOW) & 0xFFFFFFFFL);  return new WindowsFileAttributes(fileAttrs,creationTime,lastAccessTime,lastWriteTime,size,reparseTag,0,0,0);}  }
class C{  final long computeZobristHash(){  long hash=0;  for (int sq=0; sq < 64; sq++) {    int p=squares[sq];    hash^=psHashKeys[p][sq];    if ((p == Piece.WPAWN) || (p == Piece.BPAWN))     pHashKey^=psHashKeys[p][sq];  }  if (whiteMove)   hash^=whiteHashKey;  hash^=castleHashKeys[castleMask];  hash^=epHashKeys[(epSquare >= 0) ? getX(epSquare) + 1 : 0];  return hash;}  }
class C{  static String mapLibraryName(String libname){  return VMCommonLibrarySupport.mapLibraryName(libname);}  }
class C{  public int compareTo(ByteBuffer otherBuffer){  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();  int thisPos=position;  int otherPos=otherBuffer.position;  byte thisByte, otherByte;  while (compareRemaining > 0) {    thisByte=get(thisPos);    otherByte=otherBuffer.get(otherPos);    if (thisByte != otherByte) {      return thisByte < otherByte ? -1 : 1;    }    thisPos++;    otherPos++;    compareRemaining--;  }  return remaining() - otherBuffer.remaining();}  }
class C{  public SampleModel createSubsetSampleModel(int bands[]){  if (bands.length > bankIndices.length)   throw new RasterFormatException("There are only " + bankIndices.length + " bands");  int newBankIndices[]=new int[bands.length];  int newBandOffsets[]=new int[bands.length];  for (int i=0; i < bands.length; i++) {    newBankIndices[i]=bankIndices[bands[i]];    newBandOffsets[i]=bandOffsets[bands[i]];  }  return new BandedSampleModel(this.dataType,width,height,this.scanlineStride,newBankIndices,newBandOffsets);}  }
class C{  public InterruptedBridgeException(){}  }
class C{  public void add(String entry) throws JarException {  MessageHeader mh=manifest.getEntry(entry);  if (mh == null) {    throw new JarException("entry " + entry + " not in manifest");  }  MessageHeader smh;  try {    smh=computeEntry(mh);  } catch (  IOException e) {    throw new JarException(e.getMessage());  }  entries.addElement(smh);}  }
class C{  public UF11(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);  if ((numberOfVariables != 10) && (numberOfVariables != 30)) {    throw new IllegalArgumentException("number of variables must be 10 or 30");  }  problem=new DTLZ2(numberOfVariables,numberOfObjectives);}  }
class C{  protected void run(WorkerThread.Paceable paceable){  Log.logger.log(Level.INFO,"START");  try {    status=sCONNECTING;    buildMQJavaResources();    status=sRUNNING;    Log.logger.log(Level.FINE,"Entering client loop");    if (startTime == 0)     startTime=System.currentTimeMillis();    pace(paceable);    done=true;  } catch (  Throwable e) {    handleException(e);  } finally {    if (done) {      status=(status & sERROR) | sENDING;      if (endTime == 0)       endTime=System.currentTimeMillis();      if (writeLastMsgOnShutdown > 0) {        try {          if (inMessage != null) {            if (inMessage.getMessageLength() > 0) {              if (inMessage.getMessageLength() > 200) {                String line=inMessage.readLine();                if (line.length() > 200)                 System.out.println("\nResponse msg (Thread " + this.getThreadNum() + ", MsgLength "+ inMessage.getTotalMessageLength()+ ") : "+ line.substring(0,199)+ "..."); else                 System.out.println("\nResponse msg (Thread " + this.getThreadNum() + ", MsgLength "+ inMessage.getTotalMessageLength()+ ") : "+ line+ "...");              } else               System.out.println("\nResponse msg (Thread " + this.getThreadNum() + ", MsgLength "+ inMessage.getTotalMessageLength()+ ") : "+ inMessage.readLine());            } else             System.out.println("\nResponse msg (" + this.getThreadNum() + ") : ERROR zero length message");          } else           System.out.println("\nResponse msg (" + this.getThreadNum() + ") : No MQ message");        } catch (        IOException e) {          if (e.getMessage().contains("MQJE088")) {            System.out.println("Failed to decode response message");          } else {            e.printStackTrace();          }        }      }      destroyMQJavaResources(false);      Log.logger.info("STOP");      status=(status & sERROR) | sENDED;      try {        int wait=Config.parms.getInt("ss");        if (wait < 0)         wait=1;        Thread.sleep(1000 * wait);      } catch (      InterruptedException e) {      }      ControlThread.signalShutdown();    }  }}  }
class C{  public QuestSmallerThanCondition(final String questname,final int state){  this.questname=checkNotNull(questname);  this.index=-1;  this.state=state;  this.acceptEmpty=false;}  }
class C{  @Override public void halfClose(){  MeshLog.e(DEBUG,USE_LOG4J,CLASS,"halfClose()");  mIsHalfClosed=true;}  }
class C{  public static boolean isServiceRunning(Context mContext,String serviceName){  boolean isRunning=false;  ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.RunningServiceInfo> serviceList=activityManager.getRunningServices(300);  if (!(serviceList.size() > 0)) {    return false;  }  for (int i=0; i < serviceList.size(); i++) {    if (serviceList.get(i).service.getClassName().equals(serviceName)) {      return true;    }  }  return isRunning;}  }
class C{  private void synchronizeDebugger(final IDebugger oldDebugger,final IDebugger newDebugger){  if (oldDebugger != null) {    oldDebugger.getProcessManager().removeListener(m_processListener);  }  m_model.reset();  if (newDebugger != null) {    for (    final MemoryModule module : newDebugger.getProcessManager().getModules()) {      m_model.addModule(module);    }    newDebugger.getProcessManager().addListener(m_processListener);  }}  }
class C{  public void startInsertBefore(String targetId) throws IOException {  startChangesIfNecessary();  inInsertBefore=true;  ResponseWriter writer=getWrapped();  writer.startElement("insert",null);  writer.startElement("before",null);  writer.writeAttribute("id",targetId,null);  writer.startCDATA();}  }
class C{  public Map<URI,List<URI>> addTargetVolumeSnapshots(){  List<URI> blockSnapshots=Lists.newArrayList();  Map<URI,List<URI>> snapshotsMap=new HashMap<>();  URI targetCG=null;  for (  URI volumeId : uris(volumeIds)) {    List<URI> targets=getTargets(volumeId);    for (    URI target : targets) {      if (targetCG == null) {        targetCG=getConsistencyGroup(target);      }      List<URI> snapshots=getSnapshots(target);      blockSnapshots.addAll(snapshots);      snapshotsMap.put(target,snapshots);    }  }  if (!blockSnapshots.isEmpty() && targetCG != null) {    BlockStorageUtils.addVolumesToConsistencyGroup(targetCG,blockSnapshots);  }  return snapshotsMap;}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  return builder.build();}  }
class C{  public boolean shouldDelay(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent,String url){  return Common.shouldDelay(groupPosition,-1,convertView,parent,url);}  }
class C{  public TermQueryBuilder(String name,int value){  this(name,(Object)value);}  }
class C{  synchronized void serviceResolved(ServiceEvent event){  ServiceInfo info=event.getInfo();  if ((info != null) && (info.hasData())) {    String qualifiedName=event.getName() + "." + event.getType();    ServiceInfo previousServiceInfo=_addedServices.get(qualifiedName);    if (!_sameInfo(info,previousServiceInfo)) {      if (null == previousServiceInfo) {        if (null == _addedServices.putIfAbsent(qualifiedName,info.clone())) {          this.getListener().serviceResolved(event);        }      } else {        if (_addedServices.replace(qualifiedName,previousServiceInfo,info.clone())) {          this.getListener().serviceResolved(event);        }      }    } else {      logger.finer("Service Resolved called for a service already resolved: " + event);    }  } else {    logger.warning("Service Resolved called for an unresolved event: " + event);  }}  }
class C{  public static void main(String... args) throws Exception {  if (System.getProperty("boot.module.loader") == null) {    System.setProperty("boot.module.loader","org.wildfly.swarm.bootstrap.modules.BootModuleLoader");  }  Module bootstrap=Module.getBootModuleLoader().loadModule(ModuleIdentifier.create("swarm.application"));  ServiceLoader<ContainerFactory> factory=bootstrap.loadService(ContainerFactory.class);  Iterator<ContainerFactory> factoryIter=factory.iterator();  if (!factoryIter.hasNext()) {    simpleMain(args);  } else {    factoryMain(factoryIter.next(),args);  }}  }
class C{  static public TSIG fromString(String str){  String[] parts=str.split("[:/]",3);  if (parts.length < 2)   throw new IllegalArgumentException("Invalid TSIG key " + "specification");  if (parts.length == 3) {    try {      return new TSIG(parts[0],parts[1],parts[2]);    } catch (    IllegalArgumentException e) {      parts=str.split("[:/]",2);    }  }  return new TSIG(HMAC_MD5,parts[0],parts[1]);}  }
class C{  public static GenericValue searchDuplicatedAncestor(String productId,String productIdKey,String bomType,Date inDate,Delegator delegator,LocalDispatcher dispatcher,GenericValue userLogin) throws GenericEntityException {  return searchDuplicatedAncestor(productId,productIdKey,null,bomType,inDate,delegator,dispatcher,userLogin);}  }
class C{  @Override public ChatEvent parse(String text){  if (text.length() < 200) {    int identifierIndex=text.indexOf(IDENTIFIER);    if (identifierIndex != -1) {      StringTokenizer tok=new StringTokenizer(text.substring(identifierIndex + IDENTIFIER.length(),text.length())," '(");      return new ChatEvent(IcsUtils.stripTitles(tok.nextToken()),ChatType.FOLLOWING,text);    } else {      if (text.indexOf(IDENTIFIER2) != -1) {        return new ChatEvent(null,ChatType.NOT_FOLLOWING,text.trim());      } else {        return null;      }    }  } else {    return null;  }}  }
class C{  public void trainClassifier(Classifier h,Instances D,int partition[][]) throws Exception {  f=new SuperNodeFilter();  f.setIndices(partition);  f.setP(m_P >= 0 ? m_P : rand.nextInt(Math.abs(m_P)));  f.setN(m_N >= 0 ? m_N : rand.nextInt(Math.abs(m_N)));  Instances D_=f.process(D);  if (getDebug()) {    int N=D.numInstances();    int U=MLUtils.numberOfUniqueCombinations(D);    System.out.println("PS(" + f.getP() + ","+ m_N+ ") reduced: "+ N+ " -> "+ D_.numInstances()+ " / "+ U+ " -> "+ MLUtils.numberOfUniqueCombinations(D_));  }  m_InstancesTemplate=D_;  m_Classifier.buildClassifier(D_);}  }
class C{  public void stop(){  m_progressPanel.stop();  CGlobalProgressManager.instance().remove(this);}  }
class C{  private ClientRemToken(String uid,String random){  this.uid=uid;  this.random=random;}  }
class C{  public static float[] toPrimitive(Float[] array,float valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_FLOAT_ARRAY;  }  final float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    Float b=array[i];    result[i]=(b == null ? valueForNull : b.floatValue());  }  return result;}  }
class C{  public final void testHashCode03(){  assertTrue(new ECFieldF2m(111).hashCode() == new ECFieldF2m(111).hashCode());}  }
class C{  public void clearListeners(){  listeners=new ArrayList<T>();}  }
class C{  public static int ceilLog(BigInteger a){  int result=0;  BigInteger p=ONE;  while (p.compareTo(a) < 0) {    result++;    p=p.shiftLeft(1);  }  return result;}  }
class C{  public static <T>ListIterator<T> emptyListIterator(){  return Collections.<T>emptyList().listIterator();}  }
class C{  public IndicesQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public void useSourceImageAspectRatio(){  mOptionBundle.putFloat(EXTRA_ASPECT_RATIO_X,0);  mOptionBundle.putFloat(EXTRA_ASPECT_RATIO_Y,0);}  }
class C{  public static int calcVal(String regex){  int v=1;  for (  char c : regex.toCharArray()) switch (c) {case '\\':    v+=2;case '[':case '(':case '{':case '?':  v+=1;case '.':case '*':case '+':case '^':v+=1;}return v;}  }
class C{  private void handlePersistence(DbClient dbClient,boolean flush){  if (null != unManagedCGsInsert) {    if (flush || (unManagedCGsInsert.size() > BATCH_SIZE)) {      partitionManager.insertInBatches(unManagedCGsInsert,BATCH_SIZE,dbClient,UNMANAGED_PROTECTION_SET);      unManagedCGsInsert.clear();    }  }  if (null != unManagedCGsUpdate) {    if (flush || (unManagedCGsUpdate.size() > BATCH_SIZE)) {      partitionManager.updateAndReIndexInBatches(unManagedCGsUpdate,BATCH_SIZE,dbClient,UNMANAGED_PROTECTION_SET);      unManagedCGsUpdate.clear();    }  }  if (null != unManagedVolumesToUpdateByWwn) {    if (flush || (unManagedVolumesToUpdateByWwn.size() > BATCH_SIZE)) {      partitionManager.updateAndReIndexInBatches(new ArrayList<UnManagedVolume>(unManagedVolumesToUpdateByWwn.values()),BATCH_SIZE,dbClient,UNMANAGED_VOLUME);      unManagedVolumesToUpdateByWwn.clear();    }  }  if (null != unManagedVolumesToDelete) {    if (flush || (unManagedVolumesToDelete.size() > BATCH_SIZE)) {      dbClient.markForDeletion(unManagedVolumesToDelete);      unManagedVolumesToDelete.clear();    }  }}  }
class C{  @Override protected void onSizeChanged(int newWidth,int newHeight,int oldWidth,int oldHeight){  super.onSizeChanged(newWidth,newHeight,oldWidth,oldHeight);  layoutWidth=newWidth;  layoutHeight=newHeight;  setupBounds();  setupPaints();  invalidate();}  }
class C{  public void close(){  dispose(false);}  }
class C{  public List<SearchResultResourceRep> performSearchBy(String name,Object value){  Map<String,Object> params=Collections.singletonMap(name,value);  return performSearch(params);}  }
class C{  private CapabilitiesValues processCapabilities(TwainCapability[] capabilities) throws TwainIOException {  TwainCapability capability=null;  CapabilitiesValues values=new CapabilitiesValues();  for (int i=0; i < capabilities.length; i++) {    capability=capabilities[i];    if ("ICAP_SUPPORTEDSIZES".equals(capability.getName())) {      values.setSupportedSizes(transformIntegerArray(capability.getItems()));    } else     if ("ICAP_XRESOLUTION".equals(capability.getName())) {      values.setxResolutionList(transformDoubleArray(capability.getItems()));    } else     if ("ICAP_PIXELTYPE".equals(capability.getName())) {      values.setPixelTypeList(transformIntegerArray(capability.getItems()));    } else     if ("CAP_DUPLEX".equals(capability.getName())) {      values.setDuplexSupport(capability.booleanValue());    } else     if ("CAP_FEEDERENABLED".equals(capability.getName())) {      values.setAdfSupport(capability.booleanValue());    }  }  return values;}  }
class C{  public static boolean isJavaClassName(String name){  if (name == null || name.isEmpty())   return false;  if (name.endsWith(".") || name.contains(".."))   return false;  for (  String part : name.split("\\.")) {    if (javaKeywords.contains(part) || !JAVA_CLASS_NAME_PART_PATTERN.matcher(part).matches()) {      return false;    }  }  return true;}  }
class C{  public static boolean checkConnection(Connection conn){  String sql="select now()";  Statement stmt=null;  ResultSet rs=null;  try {    stmt=conn.createStatement();    stmt.setQueryTimeout(180);    rs=stmt.executeQuery(sql);    if (rs != null && rs.next())     return true;    return false;  } catch (  Exception ex) {  } finally {    close(rs);    close(stmt);  }  return false;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("Status ");  if (severity == OK) {    buf.append("OK");  } else   if (severity == ERROR) {    buf.append("ERROR");  } else   if (severity == WARNING) {    buf.append("WARNING");  } else   if (severity == INFO) {    buf.append("INFO");  } else   if (severity == CANCEL) {    buf.append("CANCEL");  } else {    buf.append("severity=");    buf.append(severity);  }  buf.append(": ");  buf.append(pluginId);  buf.append(" code=");  buf.append(code);  buf.append(' ');  buf.append(message);  buf.append(' ');  buf.append(exception);  return buf.toString();}  }
class C{  public VertexStore extendOnlyCopy(){  VertexStore copy=new VertexStore(0);  copy.fixedLats=new TIntAugmentedList(this.fixedLats);  copy.fixedLons=new TIntAugmentedList(this.fixedLons);  copy.vertexFlags=new TByteArrayList(vertexFlags);  return copy;}  }
class C{  public void stop(boolean withAnimation){  if (mDestinationValues == null) {    initialiseCollections();  }  mState=STATE_STOP;  int collapseSize=(int)(mContentHeight - mStopSize);  if (mDestinationValues.length <= 0) {    return;  }  for (int i=0; i < mBlockNumber; i++) {    if (mDestinationValues[i] == null) {      continue;    }    if (withAnimation) {      mDestinationValues[i].setTargetPosition(collapseSize);    } else {      mDestinationValues[i].setPosition(collapseSize);    }  }}  }
class C{  public ThreadClosedParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_THREAD_CLOSED);}  }
class C{  public static String runVmstatCmd() throws IOException, InterruptedException {  Vector<String> commands=new Vector<String>();  commands.add("vmstat -t -S m");  String output=runBashCommand(commands);  if (output != null) {    System.out.println("vmstat -t -S m output: \n" + output);  }  return "";}  }
class C{  public boolean hasPrivateKey(){  return null != this.privateKey;}  }
class C{  private void initialCoords(mxGraph facade,mxGraphHierarchyModel model){  calculateWidestRank(facade,model);  for (int i=widestRank; i >= 0; i--) {    if (i < model.maxRank) {      rankCoordinates(i,facade,model);    }  }  for (int i=widestRank + 1; i <= model.maxRank; i++) {    if (i > 0) {      rankCoordinates(i,facade,model);    }  }}  }
class C{  public EventObject(Object source){  if (source == null)   throw new IllegalArgumentException("null source");  this.source=source;}  }
class C{  public AbScrollTextView(Context context){  super(context);}  }
class C{  public GlowAnimal(Location location,EntityType type,double maxHealth){  super(location,type,maxHealth);}  }
class C{  public SurfaceText(String text,Position position){  this.setText(text);  this.setPosition(position);}  }
class C{  public void testExtensionb(){  final ByteChunks bc=new ByteChunks(200,7);  bc.integrity();  assertEquals(2,bc.arrayLength());  assertEquals(200,bc.length());  bc.set(0,42);  assertEquals(42,bc.get(0));  bc.set(199,43);  assertEquals(43,bc.get(199));  set(0,bc);  check(bc);  assertEquals(200,bc.extendBy(10));  assertEquals(210,bc.length());  assertEquals(2,bc.arrayLength());  set(200,bc);  check(bc);  assertEquals(210,bc.extendBy(10));  assertEquals(220,bc.length());  assertEquals(2,bc.arrayLength());  assertEquals(220,bc.extendBy(0));  assertEquals(220,bc.length());  assertEquals(2,bc.arrayLength());  assertEquals(220,bc.extendBy(100));  assertEquals(320,bc.length());  assertEquals(6,bc.arrayLength());  set(210,bc);  check(bc);  assertEquals(320,bc.extendBy(1000));  assertEquals(1320,bc.length());  assertEquals(14,bc.arrayLength());  set(320,bc);  check(bc);  try {    bc.extendBy(-1);    fail();  } catch (  final IllegalArgumentException e) {    assertEquals("-1",e.getMessage());  }}  }
class C{  public void testUnivariateSignatureMatchesMultivariate() throws Exception {  TransferEntropyCalculatorMultiVariateKraskov teCalc=new TransferEntropyCalculatorMultiVariateKraskov();  String kraskov_K="4";  teCalc.setProperty(TransferEntropyCalculatorMultiVariateKraskov.PROP_KRASKOV_ALG_NUM,"1");  teCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  super.testUnivariateMatchesMultivariateRoute(teCalc,100,1);}  }
class C{  public SolrClusterResizeRequest(final int clusterSize){  Validator.isTrue((clusterSize > 0),"clusterSize cannot be lower than 0");  this.clusterSize=clusterSize;}  }
class C{  public void addProperties(Properties p){  getPropertyHandler().addProperties(p);}  }
class C{  public static void main(String[] args){  Log.printLine("Starting CloudSimExample8...");  try {    int num_user=2;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    GlobalBroker globalBroker=new GlobalBroker("GlobalBroker");    @SuppressWarnings("unused") Datacenter datacenter0=createDatacenter("Datacenter_0");    @SuppressWarnings("unused") Datacenter datacenter1=createDatacenter("Datacenter_1");    DatacenterBroker broker=createBroker("Broker_0");    int brokerId=broker.getId();    vmList=createVM(brokerId,5,0);    cloudletList=createCloudlet(brokerId,10,0);    broker.submitVmList(vmList);    broker.submitCloudletList(cloudletList);    CloudSim.startSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    newList.addAll(globalBroker.getBroker().getCloudletReceivedList());    CloudSim.stopSimulation();    printCloudletList(newList);    Log.printLine("CloudSimExample8 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  protected void removeAt(int index){  _states[index]=REMOVED;  super.removeAt(index);}  }
class C{  public String listFiles() throws ManagerResponseException {  checkConnectedAndInFileExplorer();  String url=authentificationUtils.finalHost + "/file/container/" + currentContainerId+ "?path="+ currentPath;  String json=restUtils.sendGetCommand(url,authentificationUtils.getMap()).get("body");  String result=MessageConverter.buildListFileUnit(JsonConverter.getFileUnits(json));  return result;}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  int findMinGrandChild(int index){  int leftChildIndex=getLeftChildIndex(index);  if (leftChildIndex < 0) {    return -1;  }  return findMin(getLeftChildIndex(leftChildIndex),4);}  }
class C{  public RestartGroupChatSession restartGroupChatSession(String chatId){  boolean logActivated=sLogger.isActivated();  if (logActivated) {    sLogger.info("Restart group chat session");  }  assertAvailableChatSession("Max chat sessions reached");  GroupChatInfo groupChat=mMessagingLog.getGroupChatInfo(chatId);  if (groupChat == null) {    if (logActivated) {      sLogger.warn("Group chat " + chatId + " can't be restarted: conversation not found");    }    throw new ServerApiPersistentStorageException("Group chat conversation not found in database");  }  if (logActivated) {    sLogger.debug("Restart group chat: " + groupChat.toString());  }  Map<ContactId,ParticipantStatus> storedParticipants=groupChat.getParticipants();  if (storedParticipants.isEmpty()) {    if (logActivated) {      sLogger.warn("Group chat " + chatId + " can't be restarted: participants not found");    }    throw new ServerApiPersistentStorageException("No connected group chat participants found in database");  }  long timestamp=groupChat.getTimestamp();  return new RestartGroupChatSession(this,ImsModule.getImsUserProfile().getImConferenceUri(),groupChat.getSubject(),chatId,storedParticipants,mRcsSettings,mMessagingLog,timestamp,mContactManager);}  }
class C{  public char[] toCharArray(){  if (this.writer != null) {    throw new UnsupportedOperationException("writer not null");  }  char[] newValue=new char[count];  System.arraycopy(buf,0,newValue,0,count);  return newValue;}  }
class C{  private static Datacenter createDatacenter(String name){  List<Host> hostList=new ArrayList<Host>();  List<Pe> peList=new ArrayList<Pe>();  int mips=1000;  peList.add(new Pe(0,new PeProvisionerSimple(mips)));  int hostId=0;  int ram=2048;  long storage=Consts.MILLION;  int bw=10000;  hostList.add(new Host(hostId,new RamProvisionerSimple(ram),new BwProvisionerSimple(bw),storage,peList,new VmSchedulerTimeSharedOverSubscription(peList)));  String arch="x86";  String os="Linux";  String vmm="Xen";  double time_zone=10.0;  double cost=3.0;  double costPerMem=0.05;  double costPerStorage=0.001;  double costPerBw=0.0;  LinkedList<Storage> storageList=new LinkedList<Storage>();  DatacenterCharacteristics characteristics=new DatacenterCharacteristics(arch,os,vmm,hostList,time_zone,cost,costPerMem,costPerStorage,costPerBw);  Datacenter datacenter=null;  try {    datacenter=new Datacenter(name,characteristics,new VmAllocationPolicySimple(hostList),storageList,0);  } catch (  Exception e) {    e.printStackTrace();  }  return datacenter;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static File createTempFile(final String prefix,final String suffix){  File tempFile;  try {    tempFile=File.createTempFile(prefix,suffix);  } catch (  IOException ioException) {    throw new IllegalStateException(ioException);  }  return tempFile;}  }
class C{  public void removed(java.awt.Container cont){  if (autoTimer) {    timer.stop();    updateTimerButton();  }}  }
class C{  protected boolean saveChanges(){  return saveChanges(true);}  }
class C{  public String peeterswim(int index){switch (index) {case 0:    return "0";case 1:  return "1";case 2:return "2";default :return null;}}  }
class C{  private static void tryToSetReceiverForegroundFlag(Intent intent){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {    return;  }  intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);}  }
class C{  private static byte[] transform(final InputStream body) throws IOException {  final SAXSource source=new SAXSource(new InputSource(body));  final ByteArrayOutputStream result=new ByteArrayOutputStream();  try {    final XMLReader xmlreader=SAXParserFactory.newInstance().newSAXParser().getXMLReader();    source.setXMLReader(xmlreader);    xmlreader.setFeature(RsPrettyXml.LOAD_EXTERNAL_DTD,false);    final String yes="yes";    final Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,yes);    RsPrettyXml.prepareDocType(body,transformer);    transformer.setOutputProperty(OutputKeys.INDENT,yes);    transformer.transform(source,new StreamResult(result));  } catch (  final TransformerException ex) {    throw new IOException(ex);  }catch (  final SAXException ex) {    throw new IOException(ex);  }catch (  final ParserConfigurationException ex) {    throw new IOException(ex);  }  return result.toByteArray();}  }
class C{  public void giveBook(Player player){  if (timeAuthorisedBook(player)) {    if (additionalEffects) {      try {        ParticleEffect.ENCHANTMENT_TABLE.display(0,2,0,1,1000,player.getLocation(),100);      } catch (      Exception e) {        plugin.getLogger().severe("Error while displaying additional particle effects for books.");      }    }    if (sound) {      if (version < 9) {        player.getWorld().playSound(player.getLocation(),Sound.valueOf("LEVEL_UP"),1,0);      } else {        player.getWorld().playSound(player.getLocation(),Sound.ENTITY_PLAYER_LEVELUP,1,0);      }    }    List<String> achievements=plugin.getDb().getPlayerAchievementsList(player);    fillBook(achievements,player);    player.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("book-received","You received your achievements book!"));  } else {    player.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("book-delay","You must wait TIME seconds between each book reception!").replace("TIME",Integer.toString(bookTime / 1000)));  }}  }
class C{  public static synchronized boolean isSplashConstructed(){  return INSTANCE != null;}  }
class C{  public static void question(String message){  show(message,MessageType.QUESTION);}  }
class C{  public void enterAnimationsForToolbarSearch(final long ANIMATION_DURATION,final CardView SUGGESTIONS_BACKGROUND,final AutoCompleteTextView GO_TO_SUB_FIELD,final ImageView CLOSE_BUTTON){  SUGGESTIONS_BACKGROUND.animate().translationY(headerHeight).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(ANIMATION_DURATION + ANIMATE_DURATION_OFFSET).start();  GO_TO_SUB_FIELD.animate().alpha(1f).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(ANIMATION_DURATION).start();  CLOSE_BUTTON.animate().alpha(1f).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(ANIMATION_DURATION).start();}  }
class C{  public static void markAsIncompatible(ModelClient modelClient,DataObject target,String message){  if (target instanceof DiscoveredSystemObject) {    DiscoveredSystemObject obj=(DiscoveredSystemObject)target;    obj.setDiscoveryStatus(DataCollectionJobStatus.COMPLETE.name());    obj.setCompatibilityStatus(CompatibilityStatus.INCOMPATIBLE.name());    obj.setLastDiscoveryStatusMessage(message);    obj.setLastDiscoveryRunTime(System.currentTimeMillis());    modelClient.save(obj);  }}  }
class C{  public int indexOf(XYSeries series){  ParamChecks.nullNotPermitted(series,"series");  return this.data.indexOf(series);}  }
class C{  public void dragFinished(DragSourceEvent event){  risikoMassnahmenUmsetzungen.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.841 -0500",hash_original_method="64AD6AE28B963471C0AF85BE0E89B856",hash_generated_method="7439A5458564ACEE115AF724D68C9BB0") protected void parseSms(){  if (mEnvelope.teleService == SmsEnvelope.TELESERVICE_MWI) {    mBearerData=new BearerData();    if (mEnvelope.bearerData != null) {      mBearerData.numberOfMessages=0x000000FF & mEnvelope.bearerData[0];    }    if (false) {      Log.d(LOG_TAG,"parseSms: get MWI " + Integer.toString(mBearerData.numberOfMessages));    }    return;  }  mBearerData=BearerData.decode(mEnvelope.bearerData);  if (Log.isLoggable(LOGGABLE_TAG,Log.VERBOSE)) {    Log.d(LOG_TAG,"MT raw BearerData = '" + HexDump.toHexString(mEnvelope.bearerData) + "'");    Log.d(LOG_TAG,"MT (decoded) BearerData = " + mBearerData);  }  messageRef=mBearerData.messageId;  if (mBearerData.userData != null) {    userData=mBearerData.userData.payload;    userDataHeader=mBearerData.userData.userDataHeader;    messageBody=mBearerData.userData.payloadStr;  }  if (originatingAddress != null) {    originatingAddress.address=new String(originatingAddress.origBytes);    if (false)     Log.v(LOG_TAG,"SMS originating address: " + originatingAddress.address);  }  if (mBearerData.msgCenterTimeStamp != null) {    scTimeMillis=mBearerData.msgCenterTimeStamp.toMillis(true);  }  if (false)   Log.d(LOG_TAG,"SMS SC timestamp: " + scTimeMillis);  if (mBearerData.messageType == BearerData.MESSAGE_TYPE_DELIVERY_ACK) {    if (!mBearerData.messageStatusSet) {      Log.d(LOG_TAG,"DELIVERY_ACK message without msgStatus (" + (userData == null ? "also missing" : "does have") + " userData).");      status=0;    } else {      status=mBearerData.errorClass << 8;      status|=mBearerData.messageStatus;    }  } else   if (mBearerData.messageType != BearerData.MESSAGE_TYPE_DELIVER) {    throw new RuntimeException("Unsupported message type: " + mBearerData.messageType);  }  if (messageBody != null) {    if (false)     Log.v(LOG_TAG,"SMS message body: '" + messageBody + "'");    parseMessageBody();  } else   if ((userData != null) && (false)) {    Log.v(LOG_TAG,"SMS payload: '" + IccUtils.bytesToHexString(userData) + "'");  }}  }
class C{  public Builder(TweetUi tweetUi){  if (tweetUi == null) {    throw new IllegalArgumentException("TweetUi instance must not be null");  }  this.tweetUi=tweetUi;}  }
class C{  private static KV<ByteString,Iterable<Mutation>> makeWrite(String key,String value){  ByteString rowKey=ByteString.copyFromUtf8(key);  Iterable<Mutation> mutations=ImmutableList.of(Mutation.newBuilder().setSetCell(SetCell.newBuilder().setValue(ByteString.copyFromUtf8(value))).build());  return KV.of(rowKey,mutations);}  }
class C{  @Util private static void restarting(){  flash.success(MessagesUtils.get("setup.waitStable.description"));  Maintenance.maintenance(Common.reverseRoute(Setup.class,"index"));}  }
class C{  @ObjectiveCName("isGroupNotificationsEnabled") public boolean isGroupNotificationsEnabled(){  return modules.getSettingsModule().isGroupNotificationsEnabled();}  }
class C{  public static String addToNumberString(String numberString,long addAmount){  if (numberString == null)   return null;  int origLength=numberString.length();  long number=Long.parseLong(numberString);  return padNumberString(Long.toString(number + addAmount),origLength);}  }
class C{  protected void clearOutEvents(){}  }
class C{  @Deprecated static public SerialLightManager instance(){  return null;}  }
class C{  private void installListeners(){  if (window != null) {    windowListener=createWindowListener();    window.addWindowListener(windowListener);    propertyChangeListener=createWindowPropertyChangeListener();    window.addPropertyChangeListener(propertyChangeListener);  }}  }
class C{  public boolean isDiscovering(){  return mBluetoothAdapter.isDiscovering();}  }
class C{  public Node replaceChild(Node newChild,Node oldChild){  if (newChild == null) {    throw new IllegalArgumentException("newChild == null!");  }  checkNode(newChild);  checkNode(oldChild);  IIOMetadataNode newChildNode=(IIOMetadataNode)newChild;  IIOMetadataNode oldChildNode=(IIOMetadataNode)oldChild;  IIOMetadataNode previous=oldChildNode.previousSibling;  IIOMetadataNode next=oldChildNode.nextSibling;  if (previous != null) {    previous.nextSibling=newChildNode;  }  if (next != null) {    next.previousSibling=newChildNode;  }  newChildNode.parent=this;  newChildNode.previousSibling=previous;  newChildNode.nextSibling=next;  if (firstChild == oldChildNode) {    firstChild=newChildNode;  }  if (lastChild == oldChildNode) {    lastChild=newChildNode;  }  oldChildNode.parent=null;  oldChildNode.previousSibling=null;  oldChildNode.nextSibling=null;  return oldChildNode;}  }
class C{  @Override @Intrinsic @Uninterruptible public int length(){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  return data.length;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public static Notification info(String title,String message){  return info(title,message,true);}  }
class C{  public PLHotspot(long identifier,float atv,float ath){  super(identifier);  this.setAtv(atv);  this.setAth(ath);}  }
class C{  protected void OSR(BURS burs,Instruction s){  if (VM.VerifyAssertions) {    opt_assert(OsrPoint.conforms(s));  }  InlinedOsrTypeInfoOperand typeInfo;  if (VM.BuildFor32Addr) {    typeInfo=OsrPoint.getClearInlinedTypeInfo(s);  } else {    typeInfo=OsrPoint.getInlinedTypeInfo(s);  }  if (VM.VerifyAssertions) {    if (typeInfo == null) {      VM.sysWriteln("OsrPoint " + s + " has a <null> type info:");      VM.sysWriteln("  position :" + s.getBytecodeIndex() + "@"+ s.position().method);    }    opt_assert(typeInfo != null);  }  int numparam=OsrPoint.getNumberOfElements(s);  if (VM.BuildFor32Addr) {    int numlong=0;    for (int i=0; i < numparam; i++) {      Operand param=OsrPoint.getElement(s,i);      if (param.getType().isLongType()) {        numlong++;      }    }    Operand[] params=new Operand[numparam];    for (int i=0; i < numparam; i++) {      params[i]=OsrPoint.getClearElement(s,i);    }    typeInfo.validOps=numparam;    burs.append(OsrPoint.mutate(s,s.operator(),typeInfo,numparam + numlong));    int pidx=numparam;    for (int i=0; i < numparam; i++) {      Operand param=params[i];      OsrPoint.setElement(s,i,param);      if (param instanceof RegisterOperand) {        RegisterOperand rparam=(RegisterOperand)param;        if (rparam.getType().isLongType()) {          OsrPoint.setElement(s,pidx++,L(burs.ir.regpool.getSecondReg(rparam.getRegister())));        }      } else       if (param instanceof LongConstantOperand) {        LongConstantOperand val=(LongConstantOperand)param;        if (VM.TraceOnStackReplacement) {          VM.sysWriteln("caught a long const " + val);        }        OsrPoint.setElement(s,i,IC(val.upper32()));        OsrPoint.setElement(s,pidx++,IC(val.lower32()));      } else       if (param instanceof IntConstantOperand) {      } else {        throw new OptimizingCompilerException("BURS_Helpers","unexpected parameter type" + param);      }    }    if (pidx != (numparam + numlong)) {      VM.sysWriteln("pidx = " + pidx);      VM.sysWriteln("numparam = " + numparam);      VM.sysWriteln("numlong = " + numlong);    }    if (VM.VerifyAssertions) {      opt_assert(pidx == (numparam + numlong));    }  } else {    typeInfo.validOps=numparam;    burs.append(s);  }}  }
class C{  public static CascadedStyle createLayoutStyle(CascadedStyle startingPoint,PropertyDeclaration[] decls){  return new CascadedStyle(startingPoint,Arrays.asList(decls).iterator());}  }
class C{  public synchronized CeylonConfig merge(CeylonConfig other){  for (  String key : other.getOptionNames(null)) {    String[] values=other.getOptionValues(key);    setOptionValues(key,values);  }  return this;}  }
class C{  public synchronized void connect(BluetoothDevice device,boolean secure){  if (D)   Log.d(TAG,"connect to: " + device);  handler.sendEmptyMessage(BLUETOOTH_IS_CONNECTING);  if (mState == STATE_CONNECTING) {    if (mConnectThread != null) {      mConnectThread.cancel();      mConnectThread=null;    }  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  mConnectThread=new ConnectThread(device,secure);  mConnectThread.start();  setState(STATE_CONNECTING);}  }
class C{  @Override protected GraphDocument generateAnalysisDocument(IProgressMonitor monitor) throws IOException {  String classPath=page.getClassPath();  String directoryFilter=page.getDirectoryFilter();  String packageFilter=page.getPackageFilter();  Collection<String> packageWhitelist=splitFilter(packageFilter);  ElementFilter filter=new DefaultElementFilter(packageWhitelist);  GraphModel resultGraph=new GraphModel();  DependenciesListener builder=new DependenciesDispatcher(filter,resultGraph.getBuilder());  Collection<String> directoryWhitelist=splitFilter(directoryFilter);  monitor.worked(1);  monitor.setTaskName("Load Classes...");  ProgressListener baseProgress=new ProgressListenerMonitor(monitor);  ProgressListener quickProgress=new QuickProgressListener(baseProgress,300);  if (classPath.endsWith(".jar") || classPath.endsWith(".zip")) {    readZipFile(classPath,builder,quickProgress);  } else {    readTree(classPath,builder,quickProgress);  }  logger.info(analysisStats.getClassesLoaded() + "/" + analysisStats.getClassesTotal()+ " classes loaded. "+ analysisStats.getClassesFailed()+ " failed.");  monitor.worked(1);  return createGraphDocument(resultGraph,JavaActivator.PLUGIN_ID,FileSystemActivator.PLUGIN_ID,Resources.PLUGIN_ID);}  }
class C{  protected void closeStartTag() throws SAXException {  if (m_elemContext.m_startTagOpen) {    try {      if (m_tracer != null)       super.fireStartElem(m_elemContext.m_elementName);      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        processAttributes(m_writer,nAttrs);        m_attributes.clear();      }      m_writer.write('>');    } catch (    IOException e) {      throw new SAXException(e);    }    if (m_CdataElems != null)     m_elemContext.m_isCdataSection=isCdataSection();    if (m_doIndent) {      m_isprevtext=false;      m_preserves.push(m_ispreserve);    }  }}  }
class C{  void writeExternalizable(Object obj) throws IOException {  Externalizable extObj=(Externalizable)obj;  extObj.writeExternal(this);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  final boolean isSystemClassLoader(){  return BootstrapClassLoader.getBootstrapClassLoader() == this;}  }
class C{  public SslRMIServerSocketFactory(String[] enabledCipherSuites,String[] enabledProtocols,boolean needClientAuth) throws IllegalArgumentException {  this(null,enabledCipherSuites,enabledProtocols,needClientAuth);}  }
class C{  public LocalCandidate findLocalCandidate(TransportAddress localAddress){  for (  Component cmp : components.values()) {    LocalCandidate cnd=cmp.findLocalCandidate(localAddress);    if (cnd != null)     return cnd;  }  return null;}  }
class C{  public final boolean unifiable(final JIPTerm term){  return m_obj.unifiable(term.m_obj);}  }
class C{  private static void initializeMessages(String bundleName,Class<?> clazz){  NLS.initializeMessages(bundleName == null ? BUNDLE_NAME : bundleName,Messages.class);}  }
class C{  @Override public void onShown(Snackbar snackbar){  super.onShown(snackbar);  if (snackbarCallback != null) {    snackbarCallback.onSnackbarShown(snackbar);  }  if (showCallback != null) {    showCallback.onSnackbarShown(snackbar);  }}  }
class C{  public void writeUnsafeTo(final PacketOutputStream os){  if (escapedArray == null)   escapeUtf8();  os.buffer.put(escapedArray,0,position);}  }
class C{  public CSP(List<Variable> vars){  this();  for (  Variable v : vars)   addVariable(v);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetnodevaluenomodificationallowederr.class,args);}  }
class C{  public SearchResult(String title,Drawable icon){  this.title=title;  this.icon=icon;}  }
class C{  @Override public void transform(AffineTransform tx){  invalidateTransformedShape();  if (get(TRANSFORM) != null || (tx.getType() & (AffineTransform.TYPE_TRANSLATION | AffineTransform.TYPE_MASK_SCALE)) != tx.getType()) {    if (get(TRANSFORM) == null) {      set(TRANSFORM,(AffineTransform)tx.clone());    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    Point2D.Double anchor=getStartPoint();    Point2D.Double lead=getEndPoint();    setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));  }}  }
class C{  public AnimatorSet playSequentially(List list){  AnimatorSet animatorSet=new AnimatorSet();  animatorSet.playSequentially(list);  return animatorSet;}  }
class C{  public static char[] toCharArray(Integer[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i].intValue();  }  return result;}  }
class C{  public static boolean isBuilt(){  return hawkFacade.isBuilt();}  }
class C{  public A first(){  return a;}  }
class C{  public void reloadDocument(Document doc){  if (this.doc == null) {    XRLog.render("Reload called on BasicPanel, but there is no document set on the panel yet.");    return;  }  ;  this.doc=doc;  setDocument(this.doc,getSharedContext().getBaseURL(),getSharedContext().getNamespaceHandler());}  }
class C{  public static boolean isSameLength(double[] array1,double[] array2){  if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {    return false;  }  return true;}  }
class C{  public OutputProperties(Properties defaults){  m_properties=new Properties(defaults);}  }
class C{  protected void buildTree() throws Exception {  if (m_Instances == null)   throw new Exception("No instances supplied yet. Have to call " + "setInstances(instances) with a set of Instances " + "first.");  m_InstList=new int[m_Instances.numInstances()];  for (int i=0; i < m_InstList.length; i++) {    m_InstList[i]=i;  }  m_DistanceFunction.setInstances(m_Instances);  m_TreeConstructor.setInstances(m_Instances);  m_TreeConstructor.setInstanceList(m_InstList);  m_TreeConstructor.setEuclideanDistanceFunction((EuclideanDistance)m_DistanceFunction);  m_Root=m_TreeConstructor.buildTree();}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  BufferedImage image;  Rectangle r=getBounds2D(src).getBounds();  int w=r.x + r.width;  int h=r.y + r.height;  if (w <= 0) {    throw new RasterFormatException("Transformed width (" + w + ") is less than or equal to 0.");  }  if (h <= 0) {    throw new RasterFormatException("Transformed height (" + h + ") is less than or equal to 0.");  }  if (destCM == null) {    ColorModel cm=src.getColorModel();    if (interpolationType != TYPE_NEAREST_NEIGHBOR && (cm instanceof IndexColorModel || cm.getTransparency() == Transparency.OPAQUE)) {      image=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);    } else {      image=new BufferedImage(cm,src.getRaster().createCompatibleWritableRaster(w,h),cm.isAlphaPremultiplied(),null);    }  } else {    image=new BufferedImage(destCM,destCM.createCompatibleWritableRaster(w,h),destCM.isAlphaPremultiplied(),null);  }  return image;}  }
class C{  public static void resetUIInputChildren(UIComponent uiComponent){  if (uiComponent != null) {    List<UIComponent> children=uiComponent.getChildren();    for (    UIComponent child : children) {      if (child instanceof UIInput) {        UIInput uiInput=(UIInput)child;        uiInput.setSubmittedValue(null);        uiInput.setValue(null);        uiInput.setLocalValueSet(false);      } else {        resetUIInputChildren(child);      }    }  }}  }
class C{  public void zoomIn(){  final int pivotX=(getWidth() / 2);  final int pivotY=(getHeight() / 2);  zoomIn(pivotX,pivotY);}  }
class C{  @Override public Character remove(int index){  return null;}  }
class C{  @SuppressWarnings("unchecked") public static boolean supports(Class cls){  return getMapper(cls) != null;}  }
class C{  public static Object instantiate(ClassLoader loader,String name) throws IOException, ClassNotFoundException {  return internalInstantiate(loader,name,null,null);}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  @Inline private int sizeClassCount(){  return SegregatedFreeListSpace.sizeClassCount();}  }
class C{  public String generateLogoutRequest(String idpSessionIndex,String nameID,String logoutURL,String keystorePath,String issuer,String keyAlias,String keystorePass) throws SaaSApplicationException {  try {    return getRequest(logoutURL,nameID,FORMAT,idpSessionIndex,keystorePath,issuer,keyAlias,keystorePass);  } catch (  XMLStreamException|IOException|GeneralSecurityException e) {    throw new SaaSApplicationException("Exception during SAML logout URL generation.",e);  }}  }
class C{  public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof PKCS10))   return false;  if (encoded == null)   return false;  byte[] otherEncoded=((PKCS10)other).getEncoded();  if (otherEncoded == null)   return false;  return java.util.Arrays.equals(encoded,otherEncoded);}  }
class C{  @Override protected MkCoPEntry createRootEntry(){  return new MkCoPDirectoryEntry(null,0.,0,0.,null);}  }
class C{  public Variable decode(Variable variable,String string){  if (variable instanceof RealVariable) {    RealVariable rv=(RealVariable)variable;    rv.setValue(Double.parseDouble(string));    return rv;  } else   if (variable instanceof BinaryVariable) {    BinaryVariable bv=(BinaryVariable)variable;    if (bv.getNumberOfBits() != string.length()) {      throw new FrameworkException("invalid bit string");    }    for (int i=0; i < bv.getNumberOfBits(); i++) {      char c=string.charAt(i);      if (c == '0') {        bv.set(i,false);      } else       if (c == '1') {        bv.set(i,true);      } else {        throw new FrameworkException("invalid bit string");      }    }    return bv;  } else   if (variable instanceof Permutation) {    Permutation p=(Permutation)variable;    String[] tokens=string.split(",");    int[] array=new int[tokens.length];    for (int i=0; i < tokens.length; i++) {      array[i]=Integer.parseInt(tokens[i]);    }    try {      p.fromArray(array);    } catch (    IllegalArgumentException e) {      throw new FrameworkException("invalid permutation",e);    }    return p;  } else {    if (string.equals("-")) {      if (!printedWarning) {        System.err.println(ENCODING_WARNING);        printedWarning=true;      }      return variable;    } else {      try {        return deserialize(string);      } catch (      Exception e) {        throw new FrameworkException("deserialization failed",e);      }    }  }}  }
class C{  public boolean contains(S2CellId id){  int pos=Collections.binarySearch(cellIds,id);  if (pos < 0) {    pos=-pos - 1;  }  if (pos < cellIds.size() && cellIds.get(pos).rangeMin().lessOrEquals(id)) {    return true;  }  return pos != 0 && cellIds.get(pos - 1).rangeMax().greaterOrEquals(id);}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  @Post public String store(String fmJson){  IFirewallService firewall=(IFirewallService)getContext().getAttributes().get(IFirewallService.class.getCanonicalName());  FirewallRule rule=jsonToFirewallRule(fmJson);  if (rule == null) {    return "{\"status\" : \"Error! Could not parse firewall rule, see log for details.\"}";  }  String status=null;  if (checkRuleExists(rule,firewall.getRules())) {    status="Error! A similar firewall rule already exists.";    log.error(status);    return ("{\"status\" : \"" + status + "\"}");  } else {    firewall.addRule(rule);    status="Rule added";    return ("{\"status\" : \"" + status + "\", \"rule-id\" : \""+ Integer.toString(rule.ruleid)+ "\"}");  }}  }
class C{  public void testSearchAfterSync(){  waitForProgressFragment();  click(viewWithId(R.id.action_search));  inPatientListClickFirstPatient();}  }
class C{  public long start(){  return start;}  }
class C{  private void verifyReplicatedForcedPostAfterDelete(Map<String,ExampleServiceState> childStates) throws Throwable {  Entry<String,ExampleServiceState> childEntry=childStates.entrySet().iterator().next();  TestContext ctx=this.host.testCreate(1);  Operation delete=Operation.createDelete(this.host.getPeerServiceUri(childEntry.getKey())).setCompletion(ctx.getCompletion());  this.host.send(delete);  ctx.await();  if (!this.host.isRemotePeerTest()) {    this.host.waitFor("services not deleted",null);  }  TestContext postCtx=this.host.testCreate(1);  Operation opPost=Operation.createPost(this.host.getPeerServiceUri(this.replicationTargetFactoryLink)).addPragmaDirective(Operation.PRAGMA_DIRECTIVE_FORCE_INDEX_UPDATE).setBody(childEntry.getValue()).setCompletion(null);  this.host.send(opPost);  this.host.testWait(postCtx);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean parseBoolean(String value,boolean defaultValue){  if (value == null) {    return defaultValue;  }  return !(value.equals("false") || value.equals("0") || value.equals("off")|| value.equals("no"));}  }
class C{  public void dispatchCommand(Command cmd,ActionEvent ev){  cmd.actionPerformed(ev);  if (!ev.isConsumed()) {    actionCommandImpl(cmd,ev);  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:19.659 -0500",hash_original_method="AFE36656D81E6CEABC73EB58D0237E28",hash_generated_method="9D5BF2DF6504F04DF11A5443CE90ED0E") private static Context createActivityContext(Context context,ComponentName activity){  Context theirContext=null;  try {    theirContext=context.createPackageContext(activity.getPackageName(),0);  } catch (  PackageManager.NameNotFoundException e) {    Log.e(LOG_TAG,"Package not found " + activity.getPackageName());  }catch (  java.lang.SecurityException e) {    Log.e(LOG_TAG,"Can't make context for " + activity.getPackageName(),e);  }  return theirContext;}  }
class C{  public static List<AbstractInsnNode> findInvocationsOf(InsnList insnList,Method expectedMethod){  Validate.notNull(insnList);  Validate.notNull(expectedMethod);  List<AbstractInsnNode> ret=new ArrayList<>();  Type expectedMethodDesc=Type.getType(expectedMethod);  Type expectedMethodOwner=Type.getType(expectedMethod.getDeclaringClass());  String expectedMethodName=expectedMethod.getName();  Iterator<AbstractInsnNode> it=insnList.iterator();  while (it.hasNext()) {    AbstractInsnNode instructionNode=it.next();    Type methodDesc;    Type methodOwner;    String methodName;    if (instructionNode instanceof MethodInsnNode) {      MethodInsnNode methodInsnNode=(MethodInsnNode)instructionNode;      methodDesc=Type.getType(methodInsnNode.desc);      methodOwner=Type.getObjectType(methodInsnNode.owner);      methodName=expectedMethod.getName();    } else {      continue;    }    if (methodDesc.equals(expectedMethodDesc) && methodOwner.equals(expectedMethodOwner) && methodName.equals(expectedMethodName)) {      ret.add(instructionNode);    }  }  return ret;}  }
class C{  public Throwable fillInStackTrace(){  if (!fillInStackTrace) {    return null;  } else {    return super.fillInStackTrace();  }}  }
class C{  public boolean hasPendingData(){  if (!isInitialized()) {    return false;  }  boolean isDataPending=applyDolbyPassthroughQuirk() || (getSubmittedFrames() > audioTrackUtil.getPlaybackHeadPosition() || overrideHasPendingData());  if (log.allowVerbose()) {    log.v("hasPendingData = " + isDataPending);  }  return isDataPending;}  }
class C{  public Vector3f mulDirection(Matrix4fc mat){  return mulDirection(mat,this);}  }
class C{  private void checkValidClass(FactoryAnnotatedClass item) throws ProcessingException {  TypeElement classElement=item.getTypeElement();  if (!classElement.getModifiers().contains(Modifier.PUBLIC)) {    throw new ProcessingException(classElement,"The class %s is not public.",classElement.getQualifiedName().toString());  }  if (classElement.getModifiers().contains(Modifier.ABSTRACT)) {    throw new ProcessingException(classElement,"The class %s is abstract. You can't annotate abstract classes with @%",classElement.getQualifiedName().toString(),Factory.class.getSimpleName());  }  TypeElement superClassElement=elementUtils.getTypeElement(item.getQualifiedFactoryGroupName());  if (superClassElement.getKind() == ElementKind.INTERFACE) {    if (!classElement.getInterfaces().contains(superClassElement.asType())) {      throw new ProcessingException(classElement,"The class %s annotated with @%s must implement the interface %s",classElement.getQualifiedName().toString(),Factory.class.getSimpleName(),item.getQualifiedFactoryGroupName());    }  } else {    TypeElement currentClass=classElement;    while (true) {      TypeMirror superClassType=currentClass.getSuperclass();      if (superClassType.getKind() == TypeKind.NONE) {        throw new ProcessingException(classElement,"The class %s annotated with @%s must inherit from %s",classElement.getQualifiedName().toString(),Factory.class.getSimpleName(),item.getQualifiedFactoryGroupName());      }      if (superClassType.toString().equals(item.getQualifiedFactoryGroupName())) {        break;      }      currentClass=(TypeElement)typeUtils.asElement(superClassType);    }  }  for (  Element enclosed : classElement.getEnclosedElements()) {    if (enclosed.getKind() == ElementKind.CONSTRUCTOR) {      ExecutableElement constructorElement=(ExecutableElement)enclosed;      if (constructorElement.getParameters().size() == 0 && constructorElement.getModifiers().contains(Modifier.PUBLIC)) {        return;      }    }  }  throw new ProcessingException(classElement,"The class %s must provide an public empty default constructor",classElement.getQualifiedName().toString());}  }
class C{  public void obtain() throws IOException {  if (fileLock != null && fileLock.isValid()) {    return;  }  fileLock=fileToLock.lock();}  }
class C{  public Matrix4x4 multiplySelf(double factor){  for (int i=0; i < 4; i++) {    double[] m=matrix[i];    m[0]*=factor;    m[1]*=factor;    m[2]*=factor;    m[3]*=factor;  }  return this;}  }
class C{  public Builder signer(PrivateKeyEntry signer){  this.signer=signer;  return this;}  }
class C{  public void comment(String data) throws SAXException {  m_docIsEmpty=false;  final int length=data.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  data.getChars(0,length,m_charsBuff,0);  comment(m_charsBuff,0,length);}  }
class C{  private static void signMessage(Node nodeToSign,String referenceURI,Key privateKey,Certificate cert){  XMLSignatureFactory xmlsig=XMLSignatureFactory.getInstance();  try {    List<Transform> transformList=new ArrayList<Transform>();    transformList.add(xmlsig.newCanonicalizationMethod(Transform.ENVELOPED,(C14NMethodParameterSpec)null));    transformList.add(xmlsig.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE,new ExcC14NParameterSpec(Arrays.asList("xs","xsi"))));    Reference ref=xmlsig.newReference(referenceURI,xmlsig.newDigestMethod(DigestMethod.SHA256,null),transformList,null,null);    SignedInfo signedInfo=xmlsig.newSignedInfo(xmlsig.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE,(C14NMethodParameterSpec)null),xmlsig.newSignatureMethod("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",null),Collections.singletonList(ref));    Node insertBefore=nodeToSign.getOwnerDocument().getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion","Subject").item(0);    DOMSignContext dsc=new DOMSignContext(privateKey,nodeToSign,insertBefore);    dsc.putNamespacePrefix(XMLSignature.XMLNS,"ds");    KeyInfoFactory kif=KeyInfoFactory.getInstance();    XMLSignature signature=xmlsig.newXMLSignature(signedInfo,kif.newKeyInfo(Collections.singletonList(kif.newX509Data(Collections.singletonList(cert)))));    signature.sign(dsc);  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException("XML digital signature configuration error",e);  }catch (  InvalidAlgorithmParameterException e) {    throw new RuntimeException("XML digital signature configuration error",e);  }catch (  MarshalException e) {    throw new RuntimeException("Error while signing document",e);  }catch (  XMLSignatureException e) {    throw new RuntimeException("Error while signing document",e);  }}  }
class C{  public static SemEstimatorWrapper serializableInstance(){  List<Node> variables=new LinkedList<>();  ContinuousVariable x=new ContinuousVariable("X");  variables.add(x);  DataSet dataSet=new ColtDataSet(10,variables);  for (int i=0; i < dataSet.getNumRows(); i++) {    for (int j=0; j < dataSet.getNumColumns(); j++) {      dataSet.setDouble(i,j,RandomUtil.getInstance().nextDouble());    }  }  Dag dag=new Dag();  dag.addNode(x);  SemPm pm=new SemPm(dag);  Parameters params1=new Parameters();  return new SemEstimatorWrapper(dataSet,pm,params1);}  }
class C{  private void initDataBlock() throws IOException {  if (blkAppender == null) {    blkAppender=writerBCF.prepareDataBlock();  }}  }
class C{  public DefaultAttribute(Element parent,String name,String value,Namespace namespace){  super(name,value,namespace);  this.parent=parent;}  }
class C{  public void enable(){  active=true;}  }
class C{  private static boolean check(float[][][] definition){  if (definition.length != 4) {    return false;  }  for (  float[][] color : definition) {    if (color.length < 2) {      return false;    }    for (int i=0; i < color.length; ++i) {      float[] controlPoint=color[i];      if (controlPoint.length != 3) {        return false;      }      if (i == 0) {        if (controlPoint[0] != 0.0f) {          return false;        }      } else       if (i == color.length - 1) {        if (controlPoint[0] != 1.0f) {          return false;        }      } else {        if (controlPoint[0] < color[i - 1][0] || controlPoint[0] >= 1.0f) {          return false;        }      }      if (controlPoint[1] < 0.0f || controlPoint[1] > 1.0f) {        return false;      }      if (controlPoint[2] < 0.0f || controlPoint[2] > 1.0f) {        return false;      }    }  }  return true;}  }
class C{  public PaymentException(String msg){  super(msg);}  }
class C{  public static Collection<PropertiesDiceRoller> loadFromFile(){  final List<PropertiesDiceRoller> rollers=new ArrayList<>();  final File f=new File(ClientFileSystemHelper.getRootFolder(),"dice_servers");  if (!f.exists()) {    throw new IllegalStateException("No dice server folder:" + f);  }  final java.util.List<Properties> propFiles=new ArrayList<>();  final File[] files=f.listFiles();  for (  final File file : files) {    if (!file.isDirectory() && file.getName().endsWith(".properties")) {      try {        final Properties props=new Properties();        try (final FileInputStream fin=new FileInputStream(file)){          props.load(fin);          propFiles.add(props);        }       } catch (      final IOException e) {        System.out.println("error reading file:" + file);        ClientLogger.logQuietly(e);      }    }  }  Collections.sort(propFiles,null);  for (  final Properties prop : propFiles) {    rollers.add(new PropertiesDiceRoller(prop));  }  return rollers;}  }
class C{  public boolean enforcesContext(){  return contexts.length != 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:27.221 -0500",hash_original_method="84826A0727261744241F6F54A16F49D4",hash_generated_method="A36C205E088A9E4C3D9C93BF346D1FC0") public Request addRequestHeader(String header,String value){  if (header == null) {    throw new NullPointerException("header cannot be null");  }  if (header.contains(":")) {    throw new IllegalArgumentException("header may not contain ':'");  }  if (value == null) {    value="";  }  mRequestHeaders.add(Pair.create(header,value));  return this;}  }
class C{  private static boolean isOctal(final byte c){  return '0' <= c && c <= '7';}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private CIMObjectPath[] exposePathsWithVolumesAndInitiatorsOnly(StorageSystem storage,URI exportMaskURI,VolumeURIHLU[] volumeURIHLUs,List<Initiator> initiatorList) throws Exception {  CIMArgument[] inArgs=_helper.getCreateOrGrowStorageGroupInputArguments(storage,exportMaskURI,volumeURIHLUs,initiatorList,null);  CIMArgument[] outArgs=new CIMArgument[5];  _helper.invokeMethod(storage,_cimPath.getControllerConfigSvcPath(storage),"ExposePaths",inArgs,outArgs);  return _cimPath.getProtocolControllersFromOutputArgs(outArgs);}  }
class C{  public static void dragQuarterScreenDown(InstrumentationTestCase test,Activity activity){  Display display=activity.getWindowManager().getDefaultDisplay();  final Point size=new Point();  display.getSize(size);  final float x=size.x / 2.0f;  final float fromY=size.y * 0.5f;  final float toY=size.y * 0.75f;  drag(test,x,x,fromY,toY,4);}  }
class C{  protected final int MaskBegin(int integer){  int value;  for (value=0; integer >= 0; integer=integer << 1, value++)   ;  return value;}  }
class C{  public static Locale parseLocale(String localeString){  if (UtilValidate.isEmpty(localeString)) {    return null;  }  Locale locale=null;  if (localeString.length() == 2) {    locale=new Locale(localeString);  } else   if (localeString.length() == 5) {    String language=localeString.substring(0,2);    String country=localeString.substring(3,5);    locale=new Locale(language,country);  } else   if (localeString.length() > 6) {    String language=localeString.substring(0,2);    String country=localeString.substring(3,5);    String extension=localeString.substring(6);    locale=new Locale(language,country,extension);  } else {    Debug.logWarning("Do not know what to do with the localeString [" + localeString + "], should be length 2, 5, or greater than 6, returning null",module);  }  return locale;}  }
class C{  public void startScanFeatures(Observation obsr){  currentFeatures.clear();  currentFeatureIdx=0;  for (int i=0; i < obsr.cps.length; i++) {    Element elem=(Element)dict.dict.get(new Integer(obsr.cps[i]));    if (elem == null) {      continue;    }    if (!(elem.isScanned)) {      Iterator it=elem.lbCntFidxes.keySet().iterator();      while (it.hasNext()) {        Integer labelInt=(Integer)it.next();        CountFIdx cntFIdx=(CountFIdx)elem.lbCntFidxes.get(labelInt);        if (cntFIdx.fidx >= 0) {          Feature f=new Feature();          f.FeatureInit(labelInt.intValue(),obsr.cps[i]);          f.idx=cntFIdx.fidx;          elem.cpFeatures.add(f);        }      }      elem.isScanned=true;    }    for (int j=0; j < elem.cpFeatures.size(); j++) {      currentFeatures.add(elem.cpFeatures.get(j));    }  }}  }
class C{  protected boolean isRightEdge(@NonNull SpanLookup spanLookup,int position){  int spanIndex=spanLookup.getIndex(position);  return (spanIndex + spanLookup.getSpanSize(position)) == spanLookup.getSpanCount();}  }
class C{  private void createSignalSystems(){switch (signalType) {case SIGNAL4_X_SECOND_Z:case SIGNAL4_SYLVIA_V2Z:case SIGNAL4_SYLVIA_Z2V:case SIGNAL4_RESPONSIVE:    createSignalSystemAtNode(this.scenario.getNetwork().getNodes().get(Id.createNodeId(4)));  break;default :for (Node node : this.scenario.getNetwork().getNodes().values()) {switch (node.getId().toString()) {case "2":case "3":case "4":case "5":    createSignalSystemAtNode(node);  break;default :break;}}}}  }
class C{  @HLEFunction(nid=0xEA3C6108,version=150) public int sceNetAdhocMatchingCancelTarget(@CheckArgument("checkMatchingId") int matchingId,pspNetMacAddress macAddress){  return matchingObjects.get(matchingId).cancelTarget(macAddress);}  }
class C{  public long waitAvailable(int requested,int waitMillis) throws IOException, InterruptedException {  if (available >= requested)   return available;  long timeoutMillis=System.currentTimeMillis() + waitMillis;  long nextReportMillis=System.currentTimeMillis() + 1000;  while (available() < requested && System.currentTimeMillis() < timeoutMillis) {    if (Thread.interrupted())     throw new InterruptedException();    Thread.sleep(50);    if (System.currentTimeMillis() > nextReportMillis) {      if (logger.isDebugEnabled())       logger.debug("Waited 1000ms for input to appear");      nextReportMillis=System.currentTimeMillis() + 1000;    }  }  return available;}  }
class C{  public final void testHashCode01(){  ECFieldFp f=new ECFieldFp(BigInteger.valueOf(23L));  int hc=f.hashCode();  assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestComplexOomage.class);}  }
class C{  protected Node newNode(){  return new SVGOMAElement();}  }
class C{  private void writeNucSiteModel(int num,XMLWriter writer,PartitionSubstitutionModel model){  String prefix=model.getPrefix(num);  String prefix2=model.getPrefix();  writer.writeComment("site model");  writer.writeOpenTag(GammaSiteModel.SITE_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + SiteModel.SITE_MODEL)});  writer.writeOpenTag(GammaSiteModelParser.SUBSTITUTION_MODEL);  if (model.isUnlinkedSubstitutionModel()) {switch (model.getNucSubstitutionModel()) {case JC:      writer.writeIDref(NucModelType.HKY.getXMLName(),prefix + "jc");    break;case HKY:  writer.writeIDref(NucModelType.HKY.getXMLName(),prefix + "hky");break;case GTR:writer.writeIDref(GTRParser.GTR_MODEL,prefix + "gtr");break;case TN93:writer.writeIDref(NucModelType.TN93.getXMLName(),prefix + "tn93");break;default :throw new IllegalArgumentException("Unknown substitution model.");}} else {switch (model.getNucSubstitutionModel()) {case JC:writer.writeIDref(NucModelType.HKY.getXMLName(),prefix2 + "jc");break;case HKY:writer.writeIDref(NucModelType.HKY.getXMLName(),prefix2 + "hky");break;case GTR:writer.writeIDref(GTRParser.GTR_MODEL,prefix2 + "gtr");break;case TN93:writer.writeIDref(NucModelType.TN93.getXMLName(),prefix2 + "tn93");break;default :throw new IllegalArgumentException("Unknown substitution model.");}}writer.writeCloseTag(GammaSiteModelParser.SUBSTITUTION_MODEL);if (model.hasCodonPartitions()) {writeParameter(num,GammaSiteModelParser.RELATIVE_RATE,"mu",model,writer);} else {writeParameter(GammaSiteModelParser.RELATIVE_RATE,"mu",model,writer);}if (model.isGammaHetero()) {writer.writeOpenTag(GammaSiteModelParser.GAMMA_SHAPE,new Attribute.Default<String>(GammaSiteModelParser.GAMMA_CATEGORIES,"" + model.getGammaCategories()));if (num == -1 || model.isUnlinkedHeterogeneityModel()) {writeParameter(num,"alpha",model,writer);} else {if (num == 1) {writeParameter("alpha",model,writer);} else {writer.writeIDref(ParameterParser.PARAMETER,prefix2 + "alpha");}}writer.writeCloseTag(GammaSiteModelParser.GAMMA_SHAPE);}if (model.isInvarHetero()) {writer.writeOpenTag(GammaSiteModelParser.PROPORTION_INVARIANT);if (num == -1 || model.isUnlinkedHeterogeneityModel()) {writeParameter(num,"pInv",model,writer);} else {if (num == 1) {writeParameter("pInv",model,writer);} else {writer.writeIDref(ParameterParser.PARAMETER,prefix2 + "pInv");}}writer.writeCloseTag(GammaSiteModelParser.PROPORTION_INVARIANT);}writer.writeCloseTag(GammaSiteModel.SITE_MODEL);writer.writeText("");}  }
class C{  private static void dumpHeader(PrintData pd){  log.info(pd.toString());  if (pd.getColumnInfo() != null) {    for (int i=0; i < pd.getColumnInfo().length; i++)     log.config(i + ": " + pd.getColumnInfo()[i]);  }}  }
class C{  public static void checkValidVarrayForUnmanagedVolume(UnManagedVolume unmanagedVolume,URI varrayURI,Map<String,String> clusterIdToNameMap,Map<String,String> varrayToClusterIdMap,DbClient dbClient) throws IngestionException {  if (isVplexVolume(unmanagedVolume)) {    StringSet unmanagedVolumeClusters=unmanagedVolume.getVolumeInformation().get(SupportedVolumeInformation.VPLEX_CLUSTER_IDS.toString());    if (unmanagedVolumeClusters == null) {      String reason="Unmanaged VPLEX volume has no cluster info";      _logger.error(reason);      throw IngestionException.exceptions.varrayIsInvalidForVplexVolume(unmanagedVolume.getLabel(),reason);    }    String varrayClusterId=varrayToClusterIdMap.get(varrayURI.toString());    if (null == varrayClusterId) {      varrayClusterId=ConnectivityUtil.getVplexClusterForVarray(varrayURI,unmanagedVolume.getStorageSystemUri(),dbClient);      varrayToClusterIdMap.put(varrayURI.toString(),varrayClusterId);      _logger.debug("added {} to varrayToClusterIdMap cache",varrayClusterId);    }    if (varrayClusterId.equals(ConnectivityUtil.CLUSTER_UNKNOWN)) {      String reason="Virtual Array is not associated with either cluster of the VPLEX";      _logger.error(reason);      throw IngestionException.exceptions.varrayIsInvalidForVplexVolume(unmanagedVolume.getLabel(),reason);    }    String varrayClusterName=clusterIdToNameMap.get(varrayClusterId);    if (null == varrayClusterName) {      varrayClusterName=VPlexControllerUtils.getClusterNameForId(varrayClusterId,unmanagedVolume.getStorageSystemUri(),dbClient);      clusterIdToNameMap.put(varrayClusterId,varrayClusterName);      _logger.debug("added {} to clusterIdToNameMap cache",varrayClusterName);    }    if (null == varrayClusterName) {      String reason="Couldn't find VPLEX cluster name for cluster id " + varrayClusterId;      _logger.error(reason);      throw IngestionException.exceptions.varrayIsInvalidForVplexVolume(unmanagedVolume.getLabel(),reason);    }    if (!unmanagedVolumeClusters.contains(varrayClusterName)) {      String reason="volume is available on cluster " + unmanagedVolumeClusters + ", but the varray is only connected to "+ varrayClusterName;      _logger.error(reason);      throw IngestionException.exceptions.varrayIsInvalidForVplexVolume(unmanagedVolume.getLabel(),reason);    }  }}  }
class C{  public QuickConnectionManager(){  currentConnector=allToAll;}  }
class C{  protected synchronized void openConnection(){  super.openConnection();  m_statement=null;  try {    final Connection connection=getConnection();    if (null != connection) {      m_statement=connection.prepareStatement(getStatementSQL());    }  } catch (  final SQLException se) {    getErrorHandler().error("Error preparing statement",se,null);  }}  }
class C{  protected void notAllowNonAvailableRegisteredSubPartitions(BusinessObjectFormatKey businessObjectFormatKey,List<List<String>> matchedAvailablePartitionFilters,List<List<String>> availablePartitions,List<String> storageNames){  List<StorageUnitEntity> matchedNotAvailableStorageUnitEntities=storageUnitDao.getStorageUnitsByPartitionFiltersAndStorages(businessObjectFormatKey,matchedAvailablePartitionFilters,null,null,storageNames,StoragePlatformEntity.S3,null,false);  matchedNotAvailableStorageUnitEntities=storageUnitHelper.excludeBusinessObjectDataStatus(matchedNotAvailableStorageUnitEntities,BusinessObjectDataStatusEntity.DELETED);  matchedNotAvailableStorageUnitEntities=storageUnitHelper.excludePartitions(matchedNotAvailableStorageUnitEntities,availablePartitions);  if (!CollectionUtils.isEmpty(matchedNotAvailableStorageUnitEntities)) {    BusinessObjectDataKey businessObjectDataKey=businessObjectDataHelper.getBusinessObjectDataKey(matchedNotAvailableStorageUnitEntities.get(0).getBusinessObjectData());    throw new ObjectNotFoundException(String.format("Business object data {namespace: \"%s\", businessObjectDefinitionName: \"%s\", businessObjectFormatUsage: \"%s\", " + "businessObjectFormatFileType: \"%s\", businessObjectFormatVersion: %d, partitionValue: \"%s\", " + "subpartitionValues: \"%s\", businessObjectDataVersion: %d} is not available in \"%s\" storage(s).",businessObjectFormatKey.getNamespace(),businessObjectFormatKey.getBusinessObjectDefinitionName(),businessObjectFormatKey.getBusinessObjectFormatUsage(),businessObjectFormatKey.getBusinessObjectFormatFileType(),businessObjectFormatKey.getBusinessObjectFormatVersion(),businessObjectDataKey.getPartitionValue(),StringUtils.join(businessObjectDataKey.getSubPartitionValues(),","),businessObjectDataKey.getBusinessObjectDataVersion(),StringUtils.join(storageNames,",")));  }}  }
class C{  public BytesReference internalSourceRef(){  return source;}  }
class C{  @Override public Object clone(){  SimpleDateFormat other=(SimpleDateFormat)super.clone();  other.formatData=(DateFormatSymbols)formatData.clone();  return other;}  }
class C{  public void processEvent(Object theEvent){  if (theEvent instanceof TimerEvent) {    processTimeEvent((TimerEvent)theEvent);    return;  }  EventBean eventBean;  if (theEvent instanceof EventBean) {    eventBean=(EventBean)theEvent;  } else {    eventBean=wrapEvent(theEvent);  }  processWrappedEvent(eventBean);}  }
class C{  static ContentConfig fromJson(JsonNode node){  ContentConfig config=new ContentConfig();  try {    if (node.has(JsonKeys.VERSION)) {      config.setReleaseVersion(node.get(JsonKeys.VERSION).asText());    }    if (node.has(JsonKeys.CONTENT_URL)) {      config.setContentUrl(node.get(JsonKeys.CONTENT_URL).asText());    }    if (node.has(JsonKeys.MINIMUM_NATIVE_VERSION)) {      config.setMinimumNativeVersion(node.get(JsonKeys.MINIMUM_NATIVE_VERSION).asInt());    } else {      config.setMinimumNativeVersion(0);    }    if (node.has(JsonKeys.UPDATE)) {      config.setUpdateTime(UpdateTime.fromString(node.get(JsonKeys.UPDATE).asText()));    } else {      config.setUpdateTime(UpdateTime.ON_START);    }  } catch (  Exception e) {    e.printStackTrace();  }  return config;}  }
class C{  public void removeNmeaListener(GpsStatus.NmeaListener listener){  try {    GpsStatusListenerTransport transport=mNmeaListeners.remove(listener);    if (transport != null) {      mService.removeGpsStatusListener(transport);    }  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in unregisterGpsStatusListener: ",e);  }}  }
class C{  public static Split[] tailSplit(final ResourceManager resourceManager,final BTree btree){  if (resourceManager == null)   throw new IllegalArgumentException();  if (btree == null)   throw new IllegalArgumentException();  if (btree.getHeight() == 0) {    throw new IllegalArgumentException("B+Tree is only a root leaf.");  }  final String name=btree.getIndexMetadata().getName();  final LocalPartitionMetadata oldpmd=btree.getIndexMetadata().getPartitionMetadata();  if (oldpmd == null) {    throw new RuntimeException("Not an index partition?");  }  final Node node=(Node)btree.getRightMostNode(true);  final int childIndex=0;  final Leaf leaf=(Leaf)node.getChild(childIndex);  final byte[] separatorKey=leaf == null ? null : leaf.getKeys().get(0);  if (leaf == null || separatorKey == null) {    throw new RuntimeException("Could not locate separator key? Node=" + node + ", nchildren="+ node.getChildCount()+ ", childIndex="+ childIndex+ ", leaf="+ leaf+ (leaf == null ? "" : ("nkeys=" + leaf.getKeyCount() + ", keys="+ leaf.getKeys())));  }  final int separatorIndex=assertEntryCount(btree.indexOf(separatorKey));  assert separatorIndex >= 0;  final Split[] splits=new Split[2];{    final int partitionId=resourceManager.nextPartitionId(name);    final byte[] fromKey=oldpmd.getLeftSeparatorKey();    final LocalPartitionMetadata pmd=new LocalPartitionMetadata(partitionId,-1,fromKey,separatorKey,null,null);    final int fromIndex=0;    splits[0]=new Split(pmd,fromIndex,separatorIndex);  }{    final int partitionId=resourceManager.nextPartitionId(name);    final byte[] toKey=oldpmd.getRightSeparatorKey();    final LocalPartitionMetadata pmd=new LocalPartitionMetadata(partitionId,-1,separatorKey,toKey,null,null);    splits[1]=new Split(pmd,separatorIndex,(int)btree.getEntryCount());  }  return splits;}  }
class C{  public static String parse(final int error){switch (error) {case 0x0001:    return "GATT INVALID HANDLE";case 0x0002:  return "GATT READ NOT PERMIT";case 0x0003:return "GATT WRITE NOT PERMIT";case 0x0004:return "GATT INVALID PDU";case 0x0005:return "GATT INSUF AUTHENTICATION";case 0x0006:return "GATT REQ NOT SUPPORTED";case 0x0007:return "GATT INVALID OFFSET";case 0x0008:return "GATT INSUF AUTHORIZATION";case 0x0009:return "GATT PREPARE Q FULL";case 0x000a:return "GATT NOT FOUND";case 0x000b:return "GATT NOT LONG";case 0x000c:return "GATT INSUF KEY SIZE";case 0x000d:return "GATT INVALID ATTR LEN";case 0x000e:return "GATT ERR UNLIKELY";case 0x000f:return "GATT INSUF ENCRYPTION";case 0x0010:return "GATT UNSUPPORT GRP TYPE";case 0x0011:return "GATT INSUF RESOURCE";case 0x0087:return "GATT ILLEGAL PARAMETER";case 0x0080:return "GATT NO RESOURCES";case 0x0081:return "GATT INTERNAL ERROR";case 0x0082:return "GATT WRONG STATE";case 0x0083:return "GATT DB FULL";case 0x0084:return "GATT BUSY";case 0x0085:return "GATT ERROR";case 0x0086:return "GATT CMD STARTED";case 0x0088:return "GATT PENDING";case 0x0089:return "GATT AUTH FAIL";case 0x008a:return "GATT MORE";case 0x008b:return "GATT INVALID CFG";case 0x008c:return "GATT SERVICE STARTED";case 0x008d:return "GATT ENCRYPTED NO MITM";case 0x008e:return "GATT NOT ENCRYPTED";case 0x008f:return "GATT CONGESTED";case 0x00FD:return "GATT CCCD CFG ERROR";case 0x00FE:return "GATT PROCEDURE IN PROGRESS";case 0x00FF:return "GATT VALUE OUT OF RANGE";case 0x0101:return "TOO MANY OPEN CONNECTIONS";case DfuBaseService.ERROR_DEVICE_DISCONNECTED:return "DFU DEVICE DISCONNECTED";case DfuBaseService.ERROR_FILE_ERROR:return "DFU FILE ERROR";case DfuBaseService.ERROR_FILE_INVALID:return "DFU NOT A VALID HEX FILE";case DfuBaseService.ERROR_FILE_SIZE_INVALID:return "DFU FILE NOT WORD ALIGNED";case DfuBaseService.ERROR_FILE_IO_EXCEPTION:return "DFU IO EXCEPTION";case DfuBaseService.ERROR_FILE_NOT_FOUND:return "DFU FILE NOT FOUND";case DfuBaseService.ERROR_SERVICE_DISCOVERY_NOT_STARTED:return "DFU SERVICE DISCOVERY NOT STARTED";case DfuBaseService.ERROR_SERVICE_NOT_FOUND:return "DFU SERVICE NOT FOUND";case DfuBaseService.ERROR_CHARACTERISTICS_NOT_FOUND:return "DFU CHARACTERISTICS NOT FOUND";case DfuBaseService.ERROR_FILE_TYPE_UNSUPPORTED:return "DFU FILE TYPE NOT SUPPORTED";case DfuBaseService.ERROR_BLUETOOTH_DISABLED:return "BLUETOOTH ADAPTER DISABLED";case DfuBaseService.ERROR_INIT_PACKET_REQUIRED:return "INIT PACKET REQUIRED";default :if ((DfuBaseService.ERROR_REMOTE_MASK & error) > 0) {return LegacyDfuError.parse(error);}}return "UNKNOWN (" + error + ")";}  }
class C{  public static int prevPow2(int x){  if (x < 1)   throw new IllegalArgumentException("x must be greater or equal 1");  return (int)Math.pow(2,Math.floor(Math.log(x) / Math.log(2)));}  }
class C{  @GET @Path("download/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Produces({MediaType.APPLICATION_OCTET_STREAM}) public Response downloadBackup(@QueryParam("tag") final String backupTag){  log.info("Received download backup request, backup tag={}",backupTag);  try {    final BackupFileSet files=getDownloadList(backupTag);    if (files.isEmpty()) {      throw APIException.internalServerErrors.createObjectError(String.format("can not find target backup set '%s'.",backupTag),null);    }    if (!files.isValid()) {      throw APIException.internalServerErrors.noNodeAvailableError("download backup files");    }    InputStream pipeIn=getDownloadStream(files);    return Response.ok(pipeIn).type(MediaType.APPLICATION_OCTET_STREAM).build();  } catch (  Exception e) {    log.error("create backup final file failed. e=",e);    throw APIException.internalServerErrors.createObjectError("Download backup files",e);  }}  }
class C{  public IntegerMap(final IntegerMap<T> integerMap){  mapValues=new HashMap<>(integerMap.size());  for (  final T t : integerMap.keySet()) {    mapValues.put(t,integerMap.getInt(t));  }}  }
class C{  public SaaSApplicationException(String message){  super(message);  init();}  }
class C{  private synchronized void initRegistry(boolean force) throws MatlabConnectionException {  if (_registry == null || force) {    try {      _registry=LocalHostRMIHelper.createRegistry(_options.getPort());    } catch (    Exception e) {      try {        _registry=LocalHostRMIHelper.getRegistry(_options.getPort());      } catch (      Exception ex) {        throw new MatlabConnectionException("Could not create or connect to the RMI registry",ex);      }    }  }}  }
class C{  public static String format(Date date,boolean millis){  return format(date,millis,TIMEZONE_GMT);}  }
class C{  static public String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String s=Double.toString(d);  if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {    while (s.endsWith("0")) {      s=s.substring(0,s.length() - 1);    }    if (s.endsWith(".")) {      s=s.substring(0,s.length() - 1);    }  }  return s;}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  if (++bufpos >= maxNextCharInd)   FillBuff();  char c=buffer[bufpos];  UpdateLineColumn(c);  return c;}  }
class C{  public boolean shouldYieldConnection(SQLiteConnection connection,int connectionFlags){synchronized (mLock) {    if (!mAcquiredConnections.containsKey(connection)) {      throw new IllegalStateException("Cannot perform this operation " + "because the specified connection was not acquired " + "from this pool or has already been released.");    }    if (!mIsOpen) {      return false;    }    return isSessionBlockingImportantConnectionWaitersLocked(connection.isPrimaryConnection(),connectionFlags);  }}  }
class C{  public static int generateViewId(){  for (; ; ) {    final int result=sNextGeneratedId.get();    int newValue=result + 1;    if (newValue > 0x00FFFFFF)     newValue=1;    if (sNextGeneratedId.compareAndSet(result,newValue)) {      return result;    }  }}  }
class C{  public static boolean hasEmbeddedIPv4ClientAddress(Inet6Address ip){  return isCompatIPv4Address(ip) || is6to4Address(ip) || isTeredoAddress(ip);}  }
class C{  public synchronized boolean isConnectionOk(String portName){  String stateText=getConnectionState(portName);  if (stateText.equals(CONNECTION_DOWN)) {    return false;  } else {    return true;  }}  }
class C{  public DCBServiceImpl(final Billable billable){  this.billable=billable;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static String[] nonGcmCiphers(){  final SSLContext sslContext;  try {    sslContext=SSLContext.getDefault();  } catch (  NoSuchAlgorithmException e) {    throw Throwables.propagate(e);  }  final String[] defaultCiphers=sslContext.getDefaultSSLParameters().getCipherSuites();  return Stream.of(defaultCiphers).filter(null).toArray(null);}  }
class C{  public static ConditionEvaluationResult disabled(String reason){  return new ConditionEvaluationResult(false,reason);}  }
class C{  public static long nextNanoTime(){  final int limit=1000;  int i=0;  long nanoTime;  do {    nanoTime=System.nanoTime();    if (i++ >= limit)     throw new AssertionError();  } while (nanoTime == lastNanoTime);  if (nanoTime < lastNanoTime) {    throw new AssertionError("Nano time goes backward: lastNanoTime=" + lastNanoTime + ", nanoTime="+ nanoTime);  }  lastNanoTime=nanoTime;  return nanoTime;}  }
class C{  private AnimatedSprite(final Sprite[] frames,final int delay,final boolean animating,final Object reference){  this(frames,createDelays(delay,frames.length),animating,reference);}  }
class C{  public static boolean hasGwtFacet(IProject project){  boolean hasFacet=false;  try {    hasFacet=FacetedProjectFramework.hasProjectFacet(project,IGwtFacetConstants.GWT_PLUGINS_FACET_ID);  } catch (  CoreException e) {    CorePluginLog.logInfo("hasGetFacet: Error, can't figure GWT facet.",e);  }  return hasFacet;}  }
class C{  public static void visit(int i){  MAIN.addVisit(i);}  }
class C{  public ServiceCounterDataType clone(){  ServiceCounterDataType result=new ServiceCounterDataType();  result.TotalCount=TotalCount;  result.ErrorCount=ErrorCount;  return result;}  }
class C{  private void onWaypointLocationEnd(){  if (content != null) {    String parts[]=content.trim().split(",");    if (parts.length != 2 && parts.length != 3) {      return;    }    longitude=parts[0];    latitude=parts[1];    altitude=parts.length == 3 ? parts[2] : null;  }}  }
class C{  public void putBridge(Bridge bridge){  putBridge(bridge.getNamespaceURI(),bridge.getLocalName(),bridge);}  }
class C{  private void storeResult(byte[] result) throws PayloadException {  if (mUploadManager.isCancelled()) {    return;  }  if (result != null) {    mFileInfoDoc=FileTransferUtils.parseFileTransferHttpDocument(result,mRcsSettings);  }  if (mFileInfoDoc != null) {    if (sLogger.isActivated()) {      sLogger.debug("Upload done with success: ".concat(mFileInfoDoc.getUri().toString()));    }    removeSession();    mListener.handleUploadTerminated(mFileInfoDoc);  } else {    if (sLogger.isActivated()) {      sLogger.debug("Upload has failed");    }    removeSession();    mListener.handleUploadError(FileSharingError.MEDIA_UPLOAD_FAILED);  }}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public LabelNode rangeLabel(final LabelNode l){  return rangeTable.get(l);}  }
class C{  public char abbreviation(){  return name.charAt(0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.712 -0500",hash_original_method="281DC0E6C574993A1EBB9069DA08A49C",hash_generated_method="C3C0A8184EB5568A3FA06C5AF5D879D4") public static String ipBytesToStr(byte[] ip){  try {    return InetAddress.getByAddress(null,ip).getHostAddress();  } catch (  UnknownHostException e) {    throw new IllegalArgumentException("Unexpected IP address: " + Arrays.toString(ip));  }}  }
class C{  @Override public boolean tryOpenEditCommandBlock(EntityPlayer player){  if (player.getEntityWorld().isRemote) {    final BlockPos pos=getPosition();    player.openGui(TestMod3.instance,GuiIDs.SURVIVAL_COMMAND_BLOCK,player.getEntityWorld(),pos.getX(),pos.getY(),pos.getZ());  } else {    TileEntitySurvivalCommandBlock.this.sendToClient((EntityPlayerMP)player);  }  return true;}  }
class C{  public int[] reset(){  return Arrays.copyOf(nums,nums.length);}  }
class C{  public static Object evaluate(Object context,Object self,String expr,List<String> engineConfigs,boolean includeTemplates) throws SBExpressionException {  String trimmedExpr=StringUtils.trim(expr);  String function=expr;  if (trimmedExpr.startsWith("{")) {    function="(function()%expr)()";    function=function.replace("%expr",expr);  }  Context cx=Context.enter();  cx.setOptimizationLevel(OPTIMIZATION_LEVEL);  cx.setMaximumInterpreterStackDepth(MAX_STACK_DEPTH);  cx.setClassShutter(new SBExpressionDenyAllClassShutter());  try {    Scriptable globalScope=cx.initStandardObjects();    if (includeTemplates) {      Reader templateLibReader=new InputStreamReader(SBExpressionJavascriptResolver.class.getResourceAsStream("underscore-min.js"));      cx.evaluateReader(globalScope,templateLibReader,"underscore-min.js",1,null);    }    if (engineConfigs != null) {      for (int i=0; i < engineConfigs.size(); i++) {        Reader engineConfigReader=new StringReader(engineConfigs.get(i));        cx.evaluateReader(globalScope,engineConfigReader,"engineConfig_" + i + ".js",1,null);      }    }    putToScope(EXPR_CONTEXT_NAME,context,cx,globalScope);    putToScope(EXPR_SELF_NAME,self,cx,globalScope);    Scriptable resultScope=cx.newObject(globalScope);    resultScope.setPrototype(globalScope);    resultScope.setParentScope(globalScope);    Object result=cx.evaluateString(resultScope,function,"script",1,null);    if (result == null || result instanceof Undefined) {      return null;    }    Object wrappedResult=Context.javaToJS(result,globalScope);    putToScope("$result",wrappedResult,cx,globalScope);    ScriptableObject.putProperty(globalScope,"$result",wrappedResult);    String finalFunction="(function() { " + "           var result = $result;" + "           var type = result instanceof Array? \"array\" : typeof result;"+ "           return JSON.stringify({ \"result\" : result, \"type\" : type }); "+ "     })()";    Scriptable wrapScope=cx.newObject(globalScope);    wrapScope.setPrototype(globalScope);    wrapScope.setParentScope(globalScope);    result=cx.evaluateString(wrapScope,finalFunction,"script",1,null);    return castResult(result);  } catch (  Exception e) {    String msg=String.format("Failed evaluating expression %s.",expr);    throw new SBExpressionException(msg,e);  } finally {    Context.exit();  }}  }
class C{  private void addSelection(){  IStructuredSelection selection=(IStructuredSelection)table.getSelection();  List selectionList=selection.toList();  for (  Object item : selectionList) {    if (item instanceof PropertyType) {      PropertyType propertyType=(PropertyType)item;      selectedProperties.add(propertyType);      unselectedProperties.remove(propertyType);    }    if (item instanceof PropertyGroup) {      PropertyGroup group=(PropertyGroup)item;      selectedProperties.addAll(group.getPropertyTypes());      unselectedProperties.removeAll(group.getPropertyTypes());    }  }  selectedContentProvider.setVisibleTyps(selectedProperties);  contentProvider.setVisibleTyps(unselectedProperties);  tableSelected.setInput(selectedItems);  table.setInput(selectedItems);  tableSelected.setSelection(selection);  table.getControl().setFocus();}  }
class C{  public RoundBorder strokeColor(int strokeColor){  this.strokeColor=strokeColor;  return this;}  }
class C{  public void attachOverlayGraph(StorageGraph sgraph){  overlayGraph.set(sgraph);}  }
class C{  public synchronized TypeInstance createInstance(final String name,final String comment,final BaseType baseType,final Section section,final long sectionOffset) throws CouldntSaveDataException, CouldntLoadDataException {  Preconditions.checkNotNull(name,"Error: name argument can not be null");  Preconditions.checkArgument(comment == null || !comment.isEmpty(),"Error: comment can either be null or a non empty string");  Preconditions.checkNotNull(baseType,"Error: baseType argument can not be null");  Preconditions.checkNotNull(section,"Error: section argument can not be null");  Preconditions.checkArgument(sectionOffset >= 0,"Error: section offset must be greater or equal to zero");  Preconditions.checkArgument(!instancesByAddress.containsKey(new TypeInstanceAddress(section.getStartAddress(),sectionOffset)));  final TypeInstance instance=backend.createTypeInstance(name,comment,baseType,section,sectionOffset);  instancesByAddress.put(instance.getAddress(),instance);  instances.add(instance);  notifyInstanceAdded(instance);  return instance;}  }
class C{  public BERTaggedObject(int tagNo){  super(false,tagNo,new BERSequence());}  }
class C{  public ZkNodeProps(Map<String,Object> propMap){  this.propMap=propMap;}  }
class C{  public boolean isMandatory(){  Object oo=get_Value(COLUMNNAME_IsMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static long copy(FileInputStream in,FileOutputStream out) throws IOException {  FileChannel source=null;  FileChannel destination=null;  try {    source=in.getChannel();    destination=out.getChannel();    return source.transferTo(0,source.size(),destination);  }  finally {    CloseableUtils.close(source);    CloseableUtils.close(destination);  }}  }
class C{  private void handleTableCell(HTMLElement tdTag,int align){  newLineIfNotEmpty(align);  tableCells.addElement(curContainer);  Container cell=new Container();  cell.getStyle().setBgTransparency(0);  cell.setLayout(new BoxLayout(BoxLayout.Y_AXIS));  HTMLElement trTag=(HTMLElement)tdTag.getParent();  while ((trTag != null) && (trTag.getTagId() != HTMLElement.TAG_TR)) {    trTag=(HTMLElement)trTag.getParent();  }  CellConstraint constraint=new CellConstraint();  int halign=align;  int valign=Component.CENTER;  if (trTag != null) {    HTMLElement tGroupTag=(HTMLElement)trTag.getParent();    int tagId=tGroupTag.getTagId();    if ((tagId == HTMLElement.TAG_TBODY) || (tagId == HTMLElement.TAG_THEAD) || (tagId == HTMLElement.TAG_TFOOT)) {      halign=getHorizAlign(tGroupTag.getAttributeById(HTMLElement.ATTR_ALIGN),halign,false);      valign=getVertAlign(tGroupTag.getAttributeById(HTMLElement.ATTR_VALIGN),valign);    }    halign=getHorizAlign(trTag.getAttributeById(HTMLElement.ATTR_ALIGN),halign,false);    valign=getVertAlign(trTag.getAttributeById(HTMLElement.ATTR_VALIGN),valign);  }  halign=getHorizAlign(tdTag.getAttributeById(HTMLElement.ATTR_ALIGN),halign,false);  valign=getVertAlign(tdTag.getAttributeById(HTMLElement.ATTR_VALIGN),valign);  int colspan=getInt(tdTag.getAttributeById(HTMLElement.ATTR_COLSPAN));  int rowspan=getInt(tdTag.getAttributeById(HTMLElement.ATTR_ROWSPAN));  String cWidth=tdTag.getAttributeById(HTMLElement.ATTR_WIDTH);  int pW=getPercentage(cWidth);  if ((pW > 0) && (pW < 100)) {  } else {    pW=getInt(cWidth);    if (pW != 0) {      cell.setPreferredW(pW);    }  }  String cHeight=tdTag.getAttributeById(HTMLElement.ATTR_HEIGHT);  int pH=getPercentage(cHeight);  if ((pH > 0) && (pH < 100)) {  } else {    pH=getInt(cHeight);    if (pH != 0) {      cell.setPreferredH(pH);    }  }  constraint.setHorizontalAlign(halign);  constraint.setVerticalAlign(valign);  if (colspan > 1) {    constraint.setHorizontalSpan(colspan);  }  if (rowspan > 1) {    constraint.setVerticalSpan(rowspan);  }  curContainer=cell;  if (curTable != null) {    curTable.addCell(cell,(tdTag.getTagId() == HTMLElement.TAG_TH),constraint);  }  if (loadCSS) {    tdTag.setAssociatedComponents(cell);    if (trTag != null) {      trTag.addAssociatedComponent(cell);    }  }}  }
class C{  public HighlightSeverity(@NonNls @NotNull String name,int val){  myName=name;  myVal=val;}  }
class C{  private void tryToGetAudioFocus(){  LogHelper.d(TAG,"tryToGetAudioFocus");  if (mAudioFocus != AUDIO_FOCUSED) {    int result=mAudioManager.requestAudioFocus(this,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);    if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {      mAudioFocus=AUDIO_FOCUSED;    }  }}  }
class C{  public static UCrop of(@NonNull Uri source,@NonNull Uri destination){  return new UCrop(source,destination);}  }
class C{  public void saveVideoData(Video v,InputStream videoData) throws IOException {  assert (videoData != null);  Path target=getVideoPath(v);  Files.copy(videoData,target,StandardCopyOption.REPLACE_EXISTING);}  }
class C{  public int typeCount(int aType){  if (this.typeCountCache == null) {    HashMap<Integer,Integer> countCache=new HashMap<Integer,Integer>();    if (this.columnSpec != null) {      for (      ColumnSpec cs : columnSpec) {        int csType=cs.getType();        Integer count=countCache.get(csType);        if (count == null)         countCache.put(csType,1); else         countCache.put(csType,count + 1);      }    }    if (this.keySpec != null) {      for (      ColumnSpec ks : keySpec) {        int ksType=ks.getType();        Integer count=countCache.get(ksType);        if (count == null)         countCache.put(ksType,1); else         countCache.put(ksType,count + 1);      }    }    typeCountCache=countCache;  }  Integer count=typeCountCache.get(aType);  if (count == null)   return 0; else   return count;}  }
class C{  public <T>T read(Class<? extends T> type,String source) throws Exception {  return read(type,source,true);}  }
class C{  public static String smartQuote(String s){  if (s.contains(" ")) {    return dumbQuote(s);  } else {    return s;  }}  }
class C{  public ArrayDeque(int numElements){  allocateElements(numElements);}  }
class C{  public static long currentTime(){  return im.actor.runtime.Runtime.getActorTime();}  }
class C{  public RequestHandle post(String url,ResponseHandlerInterface responseHandler){  return post(null,url,null,responseHandler);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TANNOTATION_TYPE_REF_ARGUMENT___GET_ARG_AS_STRING:    return getArgAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public NBTOutputStream(OutputStream os) throws IOException {  this(os,true);}  }
class C{  private void processRestMethodReturnValue(Class<?> returnType,Operation operation,String returnDescription) throws MojoExecutionException {  log.debug("Processing REST method return value \"" + returnType.getName() + "\".");  exampleClassNames.add(returnType.getSimpleName());  operation.response(200,new Response().description(returnDescription == null ? "Success" : returnDescription).schema(new RefProperty(getXmlType(returnType).name().trim())));  if (modelErrorClass != null) {    operation.defaultResponse(new Response().description("General Error").schema(new RefProperty(getXmlType(modelErrorClass).name().trim())));  }}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=FloatMath.sqrt(dx * dx + dy * dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);  mVelocity=velocity;  mDuration=getSplineFlingDuration(velocity);  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  double totalDistance=getSplineFlingDistance(velocity);  mDistance=(int)(totalDistance * Math.signum(velocity));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + (int)Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + (int)Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  public void add(char[] w,int wLen){  if (i + wLen >= b.length) {    char[] new_b=new char[i + wLen + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  for (int c=0; c < wLen; c++)   b[i++]=w[c];}  }
class C{  public boolean isEmptyTokenAsNull(){  return this.emptyAsNull;}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public static String toString(int[] values){  String result="";  for (  int value : values) {    result+=value + ",";  }  if (StringUtils.isNotBlank(result)) {    result=result.substring(0,result.length() - 1);  }  return result;}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  public void ruleR6R7(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    List<Node> adjacents=graph.getAdjacentNodes(b);    if (adjacents.size() < 2)     continue;    ChoiceGenerator cg=new ChoiceGenerator(adjacents.size(),2);    for (int[] choice=cg.next(); choice != null; choice=cg.next()) {      Node a=adjacents.get(choice[0]);      Node c=adjacents.get(choice[1]);      if (graph.isAdjacentTo(a,c))       continue;      if (!(graph.getEndpoint(b,a) == Endpoint.TAIL))       continue;      if (!(graph.getEndpoint(c,b) == Endpoint.CIRCLE))       continue;      if (graph.getEndpoint(a,b) == Endpoint.TAIL) {        graph.setEndpoint(c,b,Endpoint.TAIL);        logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Single tails (tail)",graph.getEdge(c,b)));        changeFlag=true;      }      if (graph.getEndpoint(a,b) == Endpoint.CIRCLE) {        logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Single tails (tail)",graph.getEdge(c,b)));        graph.setEndpoint(c,b,Endpoint.TAIL);        changeFlag=true;      }    }  }}  }
class C{  public void open() throws IOException {  FileFactory.FileType fileType=FileFactory.getFileType(fileName);  dataOutputStream=FileFactory.getDataOutputStream(fileName,fileType,bufferSize,append);  binaryOut=new TCompactProtocol(new TIOStreamTransport(dataOutputStream));}  }
class C{  public ComposedChildAdapterTag addAdapter(@NonNull RecyclerView.Adapter adapter,int position){  if (hasObservers() && hasStableIds()) {    if (!adapter.hasStableIds()) {      throw new IllegalStateException("Wrapped child adapter must has stable IDs");    }  }  final ComposedChildAdapterTag tag=mAdaptersSet.addAdapter(adapter,position);  final int segment=mAdaptersSet.getAdapterSegment(tag);  mSegmentedPositionTranslator.invalidateSegment(segment);  notifyDataSetChanged();  return tag;}  }
class C{  public static JavaRDD<LabeledPoint> binaryBlockToLabeledPoints(JavaPairRDD<MatrixIndexes,MatrixBlock> in){  JavaRDD<LabeledPoint> pointrdd=in.values().flatMap(new PrepareBinaryBlockFunction());  return pointrdd;}  }
class C{  public void addTradeOrder(TradeOrder tradeOrders){  this.tradeOrders.add(tradeOrders);}  }
class C{  public void insert(String name,long cnt){  if (_values == null) {    _values=new ArrayList<>(30);  }  _values.add(0,new Count(this,name,cnt));}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private int dipsToPix(float dps){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dps,getResources().getDisplayMetrics());}  }
class C{  public boolean wasHeld(){  return m_current && m_last;}  }
class C{  @Override public void endSampling(Sampler<?,?,?> sampler){  dump(sampler);}  }
class C{  public VerletParticle2D(ReadonlyVec2D v){  this(v.x(),v.y(),1);}  }
class C{  public void testNextLong(){  SplittableRandom sr=new SplittableRandom();  long f=sr.nextLong();  int i=0;  while (i < NCALLS && sr.nextLong() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  private void collectReferencePropertyTypeIds(){  referenceElementTypeIds=new HashSet<>();  referencePropertyTypeIds=new HashSet<>();  Collection<EntityType> entityTypes=getHuiTypeFactory().getAllEntityTypes();  for (  EntityType entityType : entityTypes) {    collectReferencePropertyTypeIds(entityType);  }}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void updateButtonActionPerformed(){  nodeType=nodeTypeBox.getSelectedIndex();  log.debug("update performed: was " + curNode.getNodeType() + " request "+ nodeType);  if (curNode.getNodeType() != nodeType) {    curNode.setNodeType(nodeType);  }  setNodeParameters();  changedNode=true;  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrBox.setVisible(true);  nodeAddrStatic.setVisible(false);  nodeTypeBox.setVisible(false);  nodeTypeStatic.setVisible(true);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);  statusText1.setText(rb.getString("FeedBackUpdate") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;  d8outputConfigModel.setEditMode(false);  swoutputConfigModel.setEditMode(false);  ymoutputConfigModel.setEditMode(false);  TBoutputConfigModel.setEditMode(false);  TBsensorConfigModel.setEditMode(false);  smoutputConfigModel.setEditMode(false);  wmsensorConfigModel.setEditMode(false);  sysensorConfigModel.setEditMode(false);  contentPane.repaint();}  }
class C{  private void initResourceBundle(UIDefaults table){  table.addResourceBundle("com.sun.java.swing.plaf.motif.resources.motif");}  }
class C{  public KMLChange(String namespaceURI){  super(namespaceURI);}  }
class C{  public void test_compressed_timestamp_01a() throws Exception {  new TestHelper("compressed-timestamp-01a","compressed-timestamp-01a.rq","compressed-timestamp.ttl","compressed-timestamp-01.srx").runTest();}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public Multicast(final Object theObject,final String theMulticastAddress,final int thePort,final int theBufferSize){  super(null,theMulticastAddress,thePort,theBufferSize);  _myParent=theObject;  _myListener=this;  _myNetPlug=new NetPlug(_myParent);  init(theMulticastAddress,thePort);}  }
class C{  public TraceLogger(final Debugger debugger,final Project project){  Preconditions.checkNotNull(debugger,"Error: Debugger argument can not be null");  Preconditions.checkNotNull(project,"Error: Project argument can not be null");  this.debugger=debugger;  this.project=project;  this.module=null;}  }
class C{  public void endGetEntry(long start,int numInc){  if (CachePerfStats.enableClockStats) {    this.stats.incLong(getEntryTimeId,CachePerfStats.getStatTime() - start);  }  this.stats.incInt(getEntriesCompletedId,numInc);}  }
class C{  public List<String> permanentBouncedEmails(){  return Optional.ofNullable(bounce).filter(null).map(null).map(null).orElse(Collections.emptyList());}  }
class C{  public static boolean isAbsolutePath(String systemId){  if (systemId == null)   return false;  final File file=new File(systemId);  return file.isAbsolute();}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String upSlopeHeader=null;  String creekHeader=null;  String localInHeader=null;  double mdInfPower=1;  String outputType=null;  boolean logTransform=false;  int numRows;  int numCols;  int row;  int col;  int x;  int y;  double z;  int i;  int c;  double noData;  float progress=0;  if (args.length == 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  upSlopeHeader=args[1];  creekHeader=args[2];  localInHeader=args[3];  mdInfPower=Double.parseDouble(args[4]);  outputType=args[5].toLowerCase();  logTransform=Boolean.parseBoolean(args[6]);  if (!args[7].toLowerCase().equals("not specified")) {    caThreshold=Double.parseDouble(args[7]);  } else {    caThreshold=-9999;  }  if ((demHeader == null) || (upSlopeHeader == null) || (creekHeader == null)|| (localInHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    upSlope=new WhiteboxRaster(upSlopeHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    upSlope.setPreferredPalette("blueyellow.pal");    upSlope.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    upSlope.setZUnits("dimensionless");    creek=new WhiteboxRaster(creekHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    creek.setPreferredPalette("blueyellow.pal");    creek.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    creek.setZUnits("dimensionless");    localIn=new WhiteboxRaster(localInHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    localIn.setPreferredPalette("blueyellow.pal");    localIn.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    localIn.setZUnits("dimensionless");    tmpArea=new WhiteboxRaster(upSlopeHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpArea.isTemporaryFile=true;    tmpCount=new WhiteboxRaster(upSlopeHeader.replace(".dep","_tmp2.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpCount.isTemporaryFile=true;    updateProgress("Loop 1 of 4:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        z=dem.getValue(row,col);        if (z != noData) {          i=0;          for (c=0; c < 8; c++) {            x=col + xd[c];            y=row + yd[c];            if (z < dem.getValue(y,x)) {              i++;            }          }          tmpCount.setValue(row,col,i);          tmpArea.setValue(row,col,1);          upSlope.setValue(row,col,0);          creek.setValue(row,col,0);          localIn.setValue(row,col,0);        } else {          tmpArea.setValue(row,col,noData);          upSlope.setValue(row,col,noData);          creek.setValue(row,col,noData);          localIn.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          if (tmpCount.getValue(row,col) == 0) {            MDInfAccum(row,col,mdInfPower,noData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    updateProgress("Loop 3 of 4:",0);switch (outputType) {case "specific catchment area (sca)":      for (row=0; row < numRows; row++) {        for (col=0; col < numCols; col++) {          if (upSlope.getValue(row,col) != noData) {            upSlope.setValue(row,col,upSlope.getValue(row,col) * gridRes);          }          if (creek.getValue(row,col) != noData) {            creek.setValue(row,col,creek.getValue(row,col) * gridRes);          }          if (localIn.getValue(row,col) != noData) {            localIn.setValue(row,col,localIn.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (numRows - 1));        updateProgress("Loop 3 of 4:",(int)progress);      }    break;case "total catchment area":  double gridCellArea=gridRes * gridRes;for (row=0; row < numRows; row++) {  for (col=0; col < numCols; col++) {    if (upSlope.getValue(row,col) != noData) {      upSlope.setValue(row,col,upSlope.getValue(row,col) * gridCellArea);    }    if (creek.getValue(row,col) != noData) {      creek.setValue(row,col,creek.getValue(row,col) * gridCellArea);    }    if (localIn.getValue(row,col) != noData) {      localIn.setValue(row,col,localIn.getValue(row,col) * gridCellArea);    }  }  if (cancelOp) {    cancelOperation();    return;  }  progress=(float)(100f * row / (numRows - 1));  updateProgress("Loop 3 of 4:",(int)progress);}break;}updateProgress("Loop 4 of 4:",0);if (logTransform) {for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {if (upSlope.getValue(row,col) != noData) {  upSlope.setValue(row,col,Math.log(upSlope.getValue(row,col)));}if (creek.getValue(row,col) != noData) {  creek.setValue(row,col,Math.log(creek.getValue(row,col)));}if (localIn.getValue(row,col) != noData) {  localIn.setValue(row,col,Math.log(localIn.getValue(row,col)));}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 4 of 4:",(int)progress);}} else {upSlope.setNonlinearity(0.2);}upSlope.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");upSlope.addMetadataEntry("Created on " + new Date());creek.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");creek.addMetadataEntry("Created on " + new Date());localIn.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");localIn.addMetadataEntry("Created on " + new Date());dem.close();upSlope.close();creek.close();localIn.close();tmpArea.close();tmpCount.close();returnData(upSlopeHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public MqttSpyDaemonConfigLoader() throws XMLException {  super();  readFromClassPath(MqttSpyDaemonConstants.DEFAULT_PROPERTIES_FILE_NAME);  this.parser=new XMLParser(MqttSpyDaemonConstants.PACKAGE,new String[]{MqttConfigurationUtils.SPY_COMMON_SCHEMA,MqttConfigurationUtils.MQTT_COMMON_SCHEMA,MqttSpyDaemonConstants.SCHEMA});}  }
class C{  public static Intent createConversationIntent(String broadcastType,int serverId,String conversationName){  Intent intent=new Intent(broadcastType);  intent.putExtra(Extra.SERVER,serverId);  intent.putExtra(Extra.CONVERSATION,conversationName);  return intent;}  }
class C{  protected void initImageLoader(Context context){  ImageLoaderConfiguration config=new ImageLoaderConfiguration.Builder(context).threadPriority(Thread.NORM_PRIORITY - 2).denyCacheImageMultipleSizesInMemory().discCacheFileNameGenerator(new Md5FileNameGenerator()).tasksProcessingOrder(QueueProcessingType.FIFO).build();  ImageLoader.getInstance().init(config);}  }
class C{  public PiePlotState(PlotRenderingInfo info){  super(info);  this.passesRequired=1;  this.total=0.0;}  }
class C{  public PasswordAuthentication(String userName,String password){  this.userName=userName;  this.password=password;}  }
class C{  private void doReceived(ChannelBuffer res){  lock.lock();  try {    response=res;    if (done != null) {      done.signal();    }  }  finally {    lock.unlock();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.551 -0500",hash_original_method="6BB12F6B6A2A60E765D247BDBB325022",hash_generated_method="983C38CF37685DAEA43C9890A5C93689") public static byte[] encode(byte[] data){  int len=(data.length + 2) / 3 * 4;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.encode(data,0,data.length,bOut);  } catch (  IOException e) {    throw new RuntimeException("exception encoding base64 string: " + e);  }  return bOut.toByteArray();}  }
class C{  public static void upto(Long self,Number to,@ClosureParams(FirstParam.class) Closure closure){  long to1=to.longValue();  if (self <= to1) {    for (long i=self; i <= to1; i++) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to upto() cannot be less than the value ("+ self+ ") it's called on.");}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @POST @RequiresPermissions(permissions=ManyToManyAction.PERMISSION_UPDATE) @Produces(MimeTypes.APPLICATION_JSON_UTF8) @Consumes(MimeTypes.APPLICATION_JSON_UTF8) public Response httpPostJson(String jsonObject) throws Exception {  JSONObject obj=new JSONObject(jsonObject);  logger.debug(jsonObject);  if (!correctlyConfigured) {    return Response.serverError().entity(configurationForm).build();  }  for (  Object key : obj.keySet()) {    try {      loadOnePk(key);    } catch (    Exception e) {      logger.error("Cannot get key " + key,e);    }    JSONArray selectedKeysJson=obj.getJSONArray(onePk.toString());    for (int i=0; i < selectedKeysJson.length(); i++) {      selectedPrimaryKeys.add(selectedKeysJson.get(i).toString());    }    try {      loadAssociations();    } catch (    Exception e) {      logger.error("Could not load associations",e);      return Response.serverError().entity(e).build();    }    PkHelper pkHelper=new PkHelper(manyTableAccessor);    String onePropertyName=m2mConfiguration.getActualOnePropertyName();    PropertyAccessor onePropertyAccessor=relationTableAccessor.getProperty(onePropertyName);    String manyPropertyName=m2mConfiguration.getManySelectionProvider().getActualSelectionProvider().getReferences().get(0).getActualFromColumn().getActualPropertyName();    PropertyAccessor manyPropertyAccessor=relationTableAccessor.getProperty(manyPropertyName);    PropertyAccessor[] manyKeyProperties=manyTableAccessor.getKeyProperties();    PropertyAccessor manyPkAccessor=manyTableAccessor.getProperty(manyKeyProperties[0].getName());    for (    String pkString : selectedPrimaryKeys) {      Serializable pkObject=pkHelper.getPrimaryKey(pkString.split("/"));      Object pk=manyPkAccessor.get(pkObject);      if (!isExistingAssociation(manyPropertyAccessor,pk)) {        Object newRelation=saveNewRelation(pk,onePropertyAccessor,manyPropertyAccessor);        existingAssociations.add(newRelation);      }    }    Iterator it=existingAssociations.iterator();    while (it.hasNext()) {      Object o=it.next();      Object pkObject=manyPropertyAccessor.get(o);      String pkString=(String)OgnlUtils.convertValue(pkObject,String.class);      if (!selectedPrimaryKeys.contains(pkString)) {        deleteRelation(o);        it.remove();      }    }  }  session.getTransaction().commit();  return objectCreated();}  }
class C{  public final LC width(String width){  setWidth(ConstraintParser.parseBoundSize(width,false,true));  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.509 -0500",hash_original_method="EBFDF03354240070ED50C53BEBC6AA29",hash_generated_method="EC8949E43E6219B41CA57D2AB2395ACE") public SIPHeader parse() throws ParseException {  headerName(TokenTypes.PROXY_AUTHENTICATE);  ProxyAuthenticate proxyAuthenticate=new ProxyAuthenticate();  super.parse(proxyAuthenticate);  return proxyAuthenticate;}  }
class C{  public void test_Of_EEEE(){  EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.c,EnumWithInnerClass.d);  assertEquals("Size of enumSet should be 4",4,enumSet.size());  assertTrue("enumSet should contain EnumWithSubclass.a:",enumSet.contains(EnumWithInnerClass.a));  assertTrue("enumSet should contain EnumWithSubclass.d:",enumSet.contains(EnumWithInnerClass.d));  try {    EnumSet.of((EnumWithInnerClass)null,null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.c,HugeEnumWithInnerClass.d);  assertEquals(4,hugeEnumSet.size());  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.d));  try {    EnumSet.of((HugeEnumWithInnerClass)null,null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }}  }
class C{  public static void checkAndSetScreenCreditParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    ScreenCredit sc=getScreenCredit(context,paramName,xpath);    if (sc != null)     params.setValue(paramKey,sc);  }}  }
class C{  public void addAttribute(String alias,String typeUri,boolean required) throws MessageException {  addAttribute(alias,typeUri,required,1);}  }
class C{  public NamedFragmentPagerAdapter(FragmentManager fragmentManager){  super(fragmentManager);}  }
class C{  private void fillResource(){  ListItem listItem=fieldResourceType.getSelectedItem();  if (listItem == null)   return;  KeyNamePair pp=new KeyNamePair((Integer)listItem.getValue(),listItem.getLabel());  int S_ResourceType_ID=pp.getKey();  KeyNamePair defaultValue=null;  m_loading=true;  fieldResource.getChildren().clear();  String sql="SELECT S_Resource_ID, Name FROM S_Resource WHERE S_ResourceType_ID=? ORDER BY 2";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,S_ResourceType_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      pp=new KeyNamePair(rs.getInt(1),rs.getString(2));      if (m_mAssignment.getS_Resource_ID() == pp.getKey())       defaultValue=pp;      fieldResource.appendItem(pp.getName(),pp.getKey());    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (defaultValue != null) {    int cnt=fieldResource.getItemCount();    for (int i=0; i < cnt; i++) {      ListItem li=fieldResource.getItemAtIndex(i);      Integer key=(Integer)li.getValue();      if (key.intValue() == defaultValue.getKey()) {        fieldResource.setSelectedItem(li);        break;      }    }  } else   if (fieldResource.getItemCount() > 0) {    fieldResource.setSelectedIndex(0);  }  m_loading=false;}  }
class C{  @Override public List<Action> search(Problem p){  clearInstrumentation();  return recursiveDLS(nodeExpander.createRootNode(p.getInitialState()),p,limit);}  }
class C{  public static char sum(char[] array){  char sum=0;  for (  char x : array) {    sum+=x;  }  return sum;}  }
class C{  public double expectedFalsePositiveProbability(){  return getFalsePositiveProbability(expectedNumberOfFilterElements);}  }
class C{  @Override public void addVetoableChangeListener(String name,VetoableChangeListener vcl){  m_bcSupport.addVetoableChangeListener(name,vcl);}  }
class C{  protected void sequence_AnnotatedExpression_AsyncNoTrailingLineBreak_FunctionBody_FunctionHeader_FunctionImpl_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void offset(Point offset){  this.rect=new RotatedRect(new Point(rect.center.x + offset.x,rect.center.y + offset.y),rect.size,rect.angle);}  }
class C{  protected void removeIndexCandidatesFromOuterBranch(Map<IAccessMethod,AccessMethodAnalysisContext> analyzedAMs){  String innerDataset=null;  if (rightSubTree.getDataset() != null) {    innerDataset=rightSubTree.getDataset().getDatasetName();  }  Iterator<Map.Entry<IAccessMethod,AccessMethodAnalysisContext>> amIt=analyzedAMs.entrySet().iterator();  while (amIt.hasNext()) {    Map.Entry<IAccessMethod,AccessMethodAnalysisContext> entry=amIt.next();    AccessMethodAnalysisContext amCtx=entry.getValue();    Iterator<Map.Entry<Index,List<Pair<Integer,Integer>>>> indexIt=amCtx.indexExprsAndVars.entrySet().iterator();    while (indexIt.hasNext()) {      Map.Entry<Index,List<Pair<Integer,Integer>>> indexExprAndVarEntry=indexIt.next();      Iterator<Pair<Integer,Integer>> exprsAndVarIter=indexExprAndVarEntry.getValue().iterator();      boolean indexFromInnerBranch=false;      while (exprsAndVarIter.hasNext()) {        Pair<Integer,Integer> exprAndVarIdx=exprsAndVarIter.next();        IOptimizableFuncExpr optFuncExpr=amCtx.matchedFuncExprs.get(exprAndVarIdx.first);        if (indexExprAndVarEntry.getKey().getDatasetName().equals(innerDataset)) {          if (optFuncExpr.getOperatorSubTree(exprAndVarIdx.second).equals(rightSubTree)) {            indexFromInnerBranch=true;          }        }      }      if (!indexFromInnerBranch) {        indexIt.remove();      }    }  }}  }
class C{  public void recompose(StylesheetRoot root) throws TransformerException {}  }
class C{  public static void init(){  config=new ModuleConfig("Toast");  for (  Property prop : Property.values())   prop.read(config);}  }
class C{  public void execute(){  DataModel source=getDataModel();  if (!(source instanceof DataSet)) {    throw new IllegalArgumentException("Expecting a rectangular data set.");  }  DataSet data=(DataSet)source;  if (!data.isContinuous()) {    throw new IllegalArgumentException("Expecting a continuous data set.");  }  Lingam lingam=new Lingam();  Parameters params=getParams();  lingam.setPruneFactor(params.getDouble("pruneFactor",1.0));  Graph graph=lingam.search(data);  setResultGraph(graph);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else {    GraphUtils.circleLayout(graph,200,200,150);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'VIDEO_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  public boolean isAttribute(){  return true;}  }
class C{  public static void dumpCurrentRow(Cursor cursor,PrintStream stream){  String[] cols=cursor.getColumnNames();  stream.println("" + cursor.getPosition() + " {");  int length=cols.length;  for (int i=0; i < length; i++) {    String value;    try {      value=cursor.getString(i);    } catch (    SQLiteException e) {      value="<unprintable>";    }    stream.println("   " + cols[i] + '='+ value);  }  stream.println("}");}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public LegendItemCollection(){  this.items=new java.util.ArrayList();}  }
class C{  void remove(int v1,int v2){  if (isTOP()) {    throw new OptimizingCompilerException("Unexpected lattice operation");  }  ValueNumberPair[] old=numbers;  ValueNumberPair[] numbers=new ValueNumberPair[CAPACITY];  int index=0;  ValueNumberPair p=new ValueNumberPair(v1,v2);  for (int i=0; i < size; i++) {    if (old[i].equals(p)) {      size--;    } else {      numbers[index++]=old[i];    }  }}  }
class C{  public VersionedThemeResource(String resourceId){  super(resourceId);}  }
class C{  private void invalidateFileHandle(){  if (file != null) {    file=null;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:    return declaredName != null;}return super.eIsSet(featureID);}  }
class C{  static void testHardLinks(Path dir) throws IOException {  Path foo=dir.resolve("foo");  Files.createFile(foo);  try {    Path bar=dir.resolve("bar");    try {      Files.createLink(bar,foo);    } catch (    UnsupportedOperationException x) {      return;    }catch (    IOException x) {      return;    }    try {      Object key1=Files.readAttributes(foo,BasicFileAttributes.class).fileKey();      Object key2=Files.readAttributes(bar,BasicFileAttributes.class).fileKey();      assertTrue((key1 == null) || (key1.equals(key2)));    }  finally {      Files.delete(bar);    }  }  finally {    Files.delete(foo);  }}  }
class C{  void add(JavaProject javaProject,IPath pathToAdd,int includeMask,HashSet projectsToBeAdded,HashSet visitedProjects,IClasspathEntry referringEntry) throws JavaModelException {  IPath projectPath=javaProject.getFullPath();  String projectPathString=projectPath.toString();  addEnclosingProjectOrJar(projectPath);  IClasspathEntry[] entries=javaProject.getResolvedClasspath();  for (int i=0, length=entries.length; i < length; i++) {    IClasspathEntry entry=entries[i];    AccessRuleSet access=null;    ClasspathEntry cpEntry=(ClasspathEntry)entry;    if (referringEntry != null) {      if (!entry.isExported() && entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {        continue;      }      cpEntry=cpEntry.combineWith((ClasspathEntry)referringEntry);    }    access=cpEntry.getAccessRuleSet();switch (entry.getEntryKind()) {case IClasspathEntry.CPE_LIBRARY:      IClasspathEntry rawEntry=null;    rawKind: switch (cpEntry.getEntryKind()) {case IClasspathEntry.CPE_LIBRARY:case IClasspathEntry.CPE_VARIABLE:      if ((includeMask & APPLICATION_LIBRARIES) != 0) {        IPath path=entry.getPath();        if (pathToAdd == null || pathToAdd.equals(path)) {          String pathToString=path.getDevice() == null ? path.toString() : path.toOSString();          add(projectPath.toString(),"",pathToString,false,access);          addEnclosingProjectOrJar(entry.getPath());        }      }    break;case IClasspathEntry.CPE_CONTAINER:  IClasspathContainer container=JavaCore.getClasspathContainer(rawEntry.getPath(),javaProject);if (container == null) break;switch (container.getKind()) {case IClasspathContainer.K_APPLICATION:if ((includeMask & APPLICATION_LIBRARIES) == 0) break rawKind;break;case IClasspathContainer.K_SYSTEM:case IClasspathContainer.K_DEFAULT_SYSTEM:if ((includeMask & SYSTEM_LIBRARIES) == 0) break rawKind;break;default :break rawKind;}IPath path=entry.getPath();if (pathToAdd == null || pathToAdd.equals(path)) {Object target=JavaModel.getTarget(path,false);if (target instanceof IFolder) path=((IFolder)target).getFullPath();String pathToString=path.getDevice() == null ? path.toString() : path.toOSString();add(projectPath.toString(),"",pathToString,false,access);addEnclosingProjectOrJar(entry.getPath());}break;}break;case IClasspathEntry.CPE_PROJECT:break;case IClasspathEntry.CPE_SOURCE:if ((includeMask & SOURCES) != 0) {IPath path=entry.getPath();if (pathToAdd == null || pathToAdd.equals(path)) {add(projectPath.toString(),path.toOSString().substring(projectPath.toString().length() + 1),projectPathString,false,access);}}break;}}}  }
class C{  @Override public NamedList<Object> request(@SuppressWarnings("rawtypes") SolrRequest request,String collection) throws SolrServerException, IOException {  ResponseAccumulator acc=new ResponseAccumulator();  for (  SolrClient s : this.shards.server4read())   acc.addResponse(s.request(request,collection));  return acc.getAccumulatedResponse();}  }
class C{  public List list(BindedCompiledSQL bsql){  return list(bsql,1,Integer.MAX_VALUE);}  }
class C{  private static int parseNumericFontWeight(String fontWeightString){  return fontWeightString.length() == 3 && fontWeightString.endsWith("00") && fontWeightString.charAt(0) <= '9' && fontWeightString.charAt(0) >= '1' ? 100 * (fontWeightString.charAt(0) - '0') : -1;}  }
class C{  public PSPHistory(PSP c){  super(c);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  boolean filterAlwaysSatisifed(FilterNode filterNode,Set<IVariable<?>> definiteVars,Set<IVariable<?>> maybeVars){  boolean alwaysSatisifed=false;  alwaysSatisifed|=boundAlwaysSatisifed(filterNode.getValueExpressionNode(),definiteVars);  alwaysSatisifed|=notBoundAlwaysSatisifed(filterNode.getValueExpressionNode(),maybeVars);  return alwaysSatisifed;}  }
class C{  public void addDouble(int o,double x,double d){  if (force_defaults || x != d) {    addDouble(x);    slot(o);  }}  }
class C{  public static <T,P,R extends Collection<T>>R rejectWith(Iterable<T> iterable,Predicate2<? super T,? super P> predicate,P parameter,R targetCollection){  if (iterable instanceof RichIterable) {    return ((RichIterable<T>)iterable).rejectWith(predicate,parameter,targetCollection);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.rejectWith((ArrayList<T>)iterable,predicate,parameter,targetCollection);  }  if (iterable instanceof RandomAccess) {    return RandomAccessListIterate.rejectWith((List<T>)iterable,predicate,parameter,targetCollection);  }  if (iterable != null) {    return IterableIterate.rejectWith(iterable,predicate,parameter,targetCollection);  }  throw new IllegalArgumentException("Cannot perform a rejectWith on null");}  }
class C{  public UserEntry createUser(String username,String givenName,String familyName,String password,Integer quotaLimitInMb) throws AppsForYourDomainException, ServiceException, IOException {  return createUser(username,givenName,familyName,password,null,quotaLimitInMb);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  void filterUp(byte[] pixels,int startPos,int width){  int i, nBytes;  byte current_byte;  nBytes=width * bytesPerPixel;  for (i=0; i < nBytes; i++) {    current_byte=pixels[startPos + i];    pixels[startPos + i]=(byte)((pixels[startPos + i] - priorRow[i]) % 256);    priorRow[i]=current_byte;  }}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  public void append(byte[] buffer,int length){  for (int i=0; i < length; i++)   processByte(buffer[i]);}  }
class C{  public boolean isCancelled(){  return cancelled;}  }
class C{  public boolean isClosureProgram(IStep step){  if (step == null)   throw new IllegalArgumentException();  if (step.isRule())   return false;  final IProgram program=(IProgram)step;  if (program.isClosure())   return false;  final Iterator<IStep> itr=program.steps();  while (itr.hasNext()) {    if (isClosureProgram2(itr.next()))     return true;  }  return false;}  }
class C{  private static Collection<List<?>> decodeGeneralNames(Extension extension) throws IOException {  if (extension == null) {    return null;  }  Collection<List<?>> collection=((GeneralNames)GeneralNames.ASN1.decode(extension.getExtnValue())).getPairsList();  if (collection.size() == 0) {    return null;  }  return Collections.unmodifiableCollection(collection);}  }
class C{  public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  try {    if (started) {      out.write(" />");    } else {      out.write("</" + qName + ">");    }    started=false;  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public final AlertDialog shareText(CharSequence text){  return shareText(text,"TEXT_TYPE");}  }
class C{  public static void fillFourthQuadrantWithSectorPoints(int radius,Map<String,Point> sector,List<String> indexesKeys,Map<String,Integer> keysIndexes){  if (SHOW_LOGS)   Log.v(TAG,">> fillFourthQuadrantWithSectorPoints, size " + sector.size());  for (int y=1; y <= radius; y++) {    int x=(int)Math.sqrt(Math.pow(radius,2) - Math.pow(y,2));    String key=getSectorKey(x,y);    if (SHOW_LOGS)     Log.v(TAG,"fillFourthQuadrantWithSectorPoints, key[" + key + "]");    indexesKeys.add(key);    keysIndexes.put(key,indexesKeys.size() - 1);    sector.put(key,new Point(x,y));  }  if (SHOW_LOGS)   Log.v(TAG,"<< fillFourthQuadrantWithSectorPoints");}  }
class C{  public void stop(){  run=false;  printer.interrupt();}  }
class C{  private boolean checkActions(int qq){  final Status status=Status.self();  try {    while (!bStopCore) {      if (Cfg.DEBUG) {        Check.log(TAG + " checkActions: " + qq);      }      if (Cfg.STATISTICS) {        M.printMostused();        logMemory();      }      final Trigger[] actionIds=status.getTriggeredActions(qq);      if (Cfg.POWER_MANAGEMENT) {        Status.self().acquirePowerLock();      }      if (actionIds.length == 0) {        if (Cfg.DEBUG) {          Check.log(TAG + " (checkActions): triggered without actions: " + qq);        }      }      if (Cfg.DEMO && !Cfg.DEMO_SILENT) {        Beep.bip();      }      if (!Cfg.DEBUG && Cfg.CHECK_ANTI_DEBUG) {        AntiDebug ad=new AntiDebug();        if (ad.isDebug()) {          stopAll();          return true;        }      }      if (Cfg.DEBUG) {        PackageManager pm=Status.getAppContext().getPackageManager();        Log.w("QZ","testing \"com.skype.raider\"");        try {          if (pm.getInstallerPackageName("com.skype.raider") != null) {            Log.w("QZ","packagename: " + pm.getInstallerPackageName("com.skype.raider"));          } else {            Log.w("QZ"," packagename: " + pm.getInstallerPackageName("com.skype.raider"));          }        } catch (        Exception e) {          Log.w("QZ"," NOT installed ");        }        Log.w("QZ","testing" + Status.getAppContext().getPackageName());        if (pm.getInstallerPackageName(Status.getAppContext().getPackageName()) != null) {          Log.w("QZ","packagename: " + pm.getInstallerPackageName(Status.getAppContext().getPackageName()));        } else {          Log.w("QZ"," packagename: LOCAL");        }      }      for (      final Trigger trigger : actionIds) {        final Action action=status.getAction(trigger.getActionId());        final Exit exitValue=executeAction(action,trigger);        if (exitValue == Exit.UNINSTALL) {          if (Cfg.DEBUG_SPECIFIC) {            Check.log(TAG + " Info: checkActions: Uninstall");          }          UninstallAction.actualExecute();          return true;        }      }    }    return false;  } catch (  final Throwable ex) {    if (Cfg.DEBUG) {      Check.log(ex);      Check.log(TAG + " FATAL: checkActions error, restart: " + ex);    }    return false;  }}  }
class C{  public void pushRegister(int registerNumber) throws IOException {  print("push",new String[]{"register( " + registerNumber + " )"});}  }
class C{  static BaggageImpl create(BaggageMessage message){  if (message == null || message.getNamespaceCount() == 0) {    return null;  }  Map<ByteString,SetMultimap<ByteString,ByteString>> data=Maps.newHashMapWithExpectedSize(message.getNamespaceCount());  for (  NamespaceData namespaceData : message.getNamespaceList()) {    SetMultimap<ByteString,ByteString> namespace=HashMultimap.create(namespaceData.getBagCount(),1);    for (    BagData bag : namespaceData.getBagList()) {      namespace.putAll(bag.getKey(),bag.getValueList());    }    if (!namespace.isEmpty()) {      data.put(namespaceData.getKey(),namespace);    }  }  if (data.isEmpty()) {    return null;  }  BaggageImpl impl=new BaggageImpl(data);  Handlers.postDeserialize(impl);  return impl;}  }
class C{  protected TeXIcon(Box b,float size){  this(b,size,false);}  }
class C{  private boolean isForwarding(){  return (_depth > 0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){  if (mRemoveEnabled && mIsRemoving) {    mPositionX=position.x;  }}  }
class C{  public boolean isProcedure(){  return is(PROCEDURE);}  }
class C{  public OptionsBuilder optionsBuilder(){  OptionsBuilder builder=new OptionsBuilder();  builder.forks(forks);  builder.warmupIterations(warmupIterations);  builder.measurementIterations(measurementIterations);  builder.timeUnit(outputTimeUnit);  builder.threads(threads);  if (benchmarkModes != null) {    for (    Mode benchmarkMode : benchmarkModes)     builder.getBenchModes().add(benchmarkMode);  }  if (benchmarks != null) {    for (    Object benchmark : benchmarks) {      if (benchmark instanceof Class)       builder.include(((Class)benchmark).getSimpleName()); else       builder.include(benchmark.toString());    }  }  if (jvmArgs != null)   builder.jvmArgs(jvmArgs);  if (output != null)   builder.output(output);  if (profilers != null) {    for (    Class profiler : profilers)     builder.addProfiler(profiler);  }  return builder;}  }
class C{  public static void paintHeadCell(Graphics g,Dimension headCellSize){  int w=headCellSize.width, h=headCellSize.height - 1;  __Icon9Factory__.getInstance().getTableHeaderCellBg1().draw((Graphics2D)g,0,0,w,h);  __Icon9Factory__.getInstance().getTableHeaderCellSeparator1().draw((Graphics2D)g,w - 2,0,4,h - 1);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenFlds[");  for (int i=0; i < m_al.size(); i++) {    buffer.append(" [Field").append(i + 1);    buffer.append(" = ").append((m_al.get(i)).toString());    buffer.append("] ");  }  buffer.append("]");  return buffer.toString();}  }
class C{  public ObjectSelection(){}  }
class C{  public ReadWriteLockedOffHeapClockCacheFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,EvictionListener<K,V> evictionListener){  this(tableSource,storageEngineFactory,evictionListener,DEFAULT_TABLE_SIZE);}  }
class C{  public QualifiedName newQualifiedName(Name qualifier,SimpleName name){  QualifiedName result=new QualifiedName(this);  result.setQualifier(qualifier);  result.setName(name);  return result;}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public static Class<?> classForName(String className){  try {    return Class.forName(className);  } catch (  ClassNotFoundException|VerifyError e) {    return null;  }}  }
class C{  private void dumpDecList(StringBuffer text) throws Exception {  text.append(m_localModel.leftSide(m_train));  text.append(m_localModel.rightSide(indeX,m_train));  if (m_sons[indeX].m_isLeaf) {    text.append(": ");    text.append(m_localModel.dumpLabel(indeX,m_train) + "\n");  } else {    text.append(" AND\n");    m_sons[indeX].dumpDecList(text);  }}  }
class C{  public FastStringBuffer(int initialSize){  this.value=new char[initialSize];  this.count=0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private Map<String,String> permission(FsPermission perm){  if (perm == null)   perm=FsPermission.getDefault();  return F.asMap(IgfsUtils.PROP_PERMISSION,toString(perm));}  }
class C{  public static void searchProbableMaster(AuroraListener listener,HostAddress probableMaster){  AuroraProtocol protocol=getNewProtocol(listener.getProxy(),listener.getUrlParser());  try {    protocol.setHostAddress(probableMaster);    protocol.connect();    listener.removeFromBlacklist(protocol.getHostAddress());    if (listener.isMasterHostFailReconnect() && protocol.isMasterConnection()) {      protocol.setMustBeMasterConnection(true);      listener.foundActiveMaster(protocol);    } else     if (listener.isSecondaryHostFailReconnect() && !protocol.isMasterConnection()) {      protocol.setMustBeMasterConnection(false);      listener.foundActiveSecondary(protocol);    } else {      protocol.close();      protocol=getNewProtocol(listener.getProxy(),listener.getUrlParser());    }  } catch (  QueryException e) {    listener.addToBlacklist(protocol.getHostAddress());  }}  }
class C{  public static void printMatrix(int n){  for (int rows=0; rows < n; rows++) {    for (int cols=0; cols < n; cols++) {      System.out.print((int)(Math.random() * 2));    }    System.out.println();  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  static double[][] loadLnMant(){  return LN_MANT.clone();}  }
class C{  public CharSequence readText() throws IOException {  _messageReader.next();  return _messageReader.getText();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.490 -0500",hash_original_method="052F52042D38B800260CF7B2BCDFC3AB",hash_generated_method="4368B68CA0A9A282C2EFDB17A3E71D9C") DatagramPacket _newDatagram(DatagramPacket datagram,byte[] data){  data[0]=0;  data[1]=(byte)_type;  data[2]=(byte)((_blockNumber & 0xffff) >> 8);  data[3]=(byte)(_blockNumber & 0xff);  if (data != _data)   System.arraycopy(_data,_offset,data,4,_length);  datagram.setAddress(_address);  datagram.setPort(_port);  datagram.setData(data);  datagram.setLength(_length + 4);  return datagram;}  }
class C{  @Override public void stop(){  if (isRunning) {    discoveryController.stop();    isRunning=false;  }  for (  ServiceDescription serviceDescription : foundServices.values()) {    notifyListenersThatServiceLost(serviceDescription);  }  foundServices.clear();}  }
class C{  private void initRectsWithBorders(){  mBorderRect.set(mRect);  mBorderRect.inset(mBorderWidth / 1.3f,mBorderWidth / 1.3f);  if (mShadowWidth > 0) {    mBorderRect.right-=mShadowWidth;    mBorderRect.bottom-=mShadowWidth;  }  mImageRect.set(mBorderRect);  mImageRect.inset(mBorderWidth / 1.3f,mBorderWidth / 1.3f);}  }
class C{  private static void usage(String err){  if (err != null && err.length() > 0) {    System.err.println("==>" + err);  }  System.err.println("Usage: ... [url]");  System.exit(1);}  }
class C{  public static int executeUpdate(String sql,boolean ignoreError,String trxName){  return executeUpdate(sql,ignoreError,trxName,0);}  }
class C{  public static String encode(byte[] input){  if (input.length == 0) {    return "";  }  int zeros=0;  while (zeros < input.length && input[zeros] == 0) {    ++zeros;  }  input=Arrays.copyOf(input,input.length);  char[] encoded=new char[input.length * 2];  int outputStart=encoded.length;  for (int inputStart=zeros; inputStart < input.length; ) {    encoded[--outputStart]=ALPHABET[divmod(input,inputStart,256,58)];    if (input[inputStart] == 0) {      ++inputStart;    }  }  while (outputStart < encoded.length && encoded[outputStart] == ENCODED_ZERO) {    ++outputStart;  }  while (--zeros >= 0) {    encoded[--outputStart]=ENCODED_ZERO;  }  return new String(encoded,outputStart,encoded.length - outputStart);}  }
class C{  protected MethodVisitor makeDelegateCall(final String name,final String desc,final String signature,final String[] exceptions,final int accessFlags){  MethodVisitor mv=super.visitMethod(accessFlags,name,desc,signature,exceptions);  mv.visitVarInsn(ALOAD,0);  mv.visitFieldInsn(GETFIELD,proxyName,DELEGATE_OBJECT_FIELD,BytecodeHelper.getTypeDescription(delegateClass));  int size;  mv.visitLdcInsn(name);  Type[] args=Type.getArgumentTypes(desc);  BytecodeHelper.pushConstant(mv,args.length);  mv.visitTypeInsn(ANEWARRAY,"java/lang/Object");  size=6;  int idx=1;  for (int i=0; i < args.length; i++) {    Type arg=args[i];    mv.visitInsn(DUP);    BytecodeHelper.pushConstant(mv,i);    if (isPrimitive(arg)) {      mv.visitIntInsn(getLoadInsn(arg),idx);      String wrappedType=getWrappedClassDescriptor(arg);      mv.visitMethodInsn(INVOKESTATIC,wrappedType,"valueOf","(" + arg.getDescriptor() + ")L"+ wrappedType+ ";",false);    } else {      mv.visitVarInsn(ALOAD,idx);    }    size=Math.max(size,5 + registerLen(arg));    idx+=registerLen(arg);    mv.visitInsn(AASTORE);  }  mv.visitMethodInsn(INVOKESTATIC,"org/codehaus/groovy/runtime/InvokerHelper","invokeMethod","(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;",false);  unwrapResult(mv,desc);  mv.visitMaxs(size,registerLen(args) + 1);  return mv;}  }
class C{  public boolean isTooManyResults(){  return tooManyResults;}  }
class C{  public void resetPolicy(){  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));  setRetryUntil(DEFAULT_RETRY_UNTIL);  setMaxRetries(DEFAULT_MAX_RETRIES);  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);  mPreferences.commit();}  }
class C{  public static void decorateAsLinkButton(JButton button){  button.setBorderPainted(false);  button.setContentAreaFilled(false);  button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));}  }
class C{  @Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){  super.onViewPositionChanged(changedView,left,top,dx,dy);  mDragOffset=Math.abs(top);  float fractionScreen=(float)mDragOffset / mConfigView.getVerticalDragRange();  mConfigView.onViewPositionChanged(fractionScreen >= 1 ? 1 : fractionScreen);}  }
class C{  protected void cookieSent(Cookie c){}  }
class C{  @Deprecated public Reader charStream(Reader reader){  return reader;}  }
class C{  public String classifiersTipText(){  return "The base classifiers to be used.";}  }
class C{  public static void translate(double dx,double dy,Coordinate[] coords){  int last=coords.length - 1;  for (int i=0; i < last; i++) {    coords[i].x+=dx;    coords[i].y+=dy;  }  if (coords[0] != coords[last]) {    coords[last].x+=dx;    coords[last].y+=dy;  }}  }
class C{  private boolean checkFormForChanges(){  return true;}  }
class C{  public void testFindUserGroupsOpenLdapWithEmptyBase() throws Exception {  LdapManager mgr=getLdapOpenLdap();  List ret=null;  AndFilter filter=new AndFilter();  filter.and(new EqualsFilter(mgr.getGroupsReturningAttribute(LdapGroupAttributeConstants.LDAP_GROUP_ATTRIBUTE_MEMBER),"cn=ngomila,ou=Usuarios,DC=portsdebalears,DC=com"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setBase("");    searchMgrVO.setAddGroupClasses(true);    ret=mgr.findUserGroups(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(2,ret.size());}  }
class C{  public static void walkFileTree(File directory,FileTreeVisitor visitor){  visitor.preVisitDirectory(directory);  File[] files=directory.listFiles();  if (files != null) {    for (    File file : files) {      if (file.isDirectory()) {        walkFileTree(file,visitor);      } else {        visitor.visitFile(file);      }    }  }  visitor.postVisitDirectory(directory);}  }
class C{  public static byte[] decode(final byte[] base64Data){  return new Base64().decode(base64Data);}  }
class C{  public XMLString fixWhiteSpace(boolean trimHead,boolean trimTail,boolean doublePunctuationSpaces){  return new XMLStringDefault(m_str.trim());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public float screenZ(float x,float y,float z){  return g.screenZ(x,y,z);}  }
class C{  private void accept(Socket socket){  log.info("Client connected from {}",socket.getInetAddress());  try {    try (Connection clientConnection=new Connection(socket)){      ServerSession session=ServerSession.newSession(services,clientConnection,command);      log.info("Client {} disconnected",socket);    }   } catch (  IOException e) {    log.info("Could not accept connection from {}: {}",socket.getInetAddress(),e.toString());  } finally {    try {      socket.close();    } catch (    IOException e) {    }  }}  }
class C{  public final boolean contentEquals(java.lang.CharSequence csq){  if (csq.length() != _length)   return false;  for (int i=0; i < _length; ) {    char c=_high[i >> B1][i & M1];    if (csq.charAt(i++) != c)     return false;  }  return true;}  }
class C{  @Override public boolean contains(Point2D.Double p){  return getHitShape().contains(p);}  }
class C{  protected void appendContentEnd(StringBuffer buffer){  buffer.append(contentEnd);}  }
class C{  protected Path createPath(){  Path path=new Path();  path.setFollowTerrain(true);  path.setPathType(AVKey.LINEAR);  path.setAltitudeMode(this.getAltitudeMode());  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  public HttpResponse addContactToGrantedList(ContactId contact) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Add " + contact + " to granted list");  }  String url="/resource-lists/users/" + Uri.encode(ImsModule.getImsUserProfile().getPublicUri()) + "/index/~~/resource-lists/list%5B@name=%22rcs%22%5D/entry%5B@uri=%22"+ Uri.encode(PhoneUtils.formatContactIdToUri(contact).toString())+ "%22%5D";  String content="<entry uri='" + contact + "'></entry>";  HttpPutRequest request=new HttpPutRequest(url,content,"application/xcap-el+xml");  HttpResponse response=sendRequestToXDMS(request);  if (response.isSuccessfullResponse()) {    if (sLogger.isActivated()) {      sLogger.info(contact + " has been added with success to granted list");    }  } else {    if (sLogger.isActivated()) {      sLogger.info("Can't add " + contact + " to granted list: "+ response.getResponseCode()+ " error");    }  }  return response;}  }
class C{  public void actionPerformed(ActionEvent e){  try {    switchPage(currentDisplayed,true);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @org.junit.Test public void verifyGetMapResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/primitiaveMapResponse","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,"{\"key\":\"key\",\"value\":\"string\"}");}  }
class C{  public void checkCoordinates(){  if (hiD1 >= projector.getUpstairs().getDimensions()) {    hiD1=0;  }  if (hiD2 >= projector.getUpstairs().getDimensions()) {    hiD2=1;  }}  }
class C{  public static void dropTable(String table,Connection connection){  table=table.replace(";","");  StringBuilder dropTableQuery=new StringBuilder();  dropTableQuery.append("DROP TABLE ");  dropTableQuery.append(table);  LOG.info("Drop Table: ");  LOG.info(dropTableQuery);  executeStatementIfExists(dropTableQuery.toString(),connection);}  }
class C{  public static MessageDialogButton showMessageDialog(WindowBasedTextGUI textGUI,String title,String text,MessageDialogButton... buttons){  MessageDialogBuilder builder=new MessageDialogBuilder().setTitle(title).setText(text);  if (buttons.length == 0) {    builder.addButton(MessageDialogButton.OK);  }  for (  MessageDialogButton button : buttons) {    builder.addButton(button);  }  return builder.build().showDialog(textGUI);}  }
class C{  public boolean hasChildren(){  return !children.isEmpty();}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("DeleteEventRequestsTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();  StepRequest request=erm.createStepRequest(mainThread,StepRequest.STEP_LINE,StepRequest.STEP_OVER);  request.enable();  erm.deleteEventRequests(erm.stepRequests());  listenUntilVMDisconnect();  if (!testFailed) {    println("DeleteEventRequestsTest: passed");  } else {    throw new Exception("DeleteEventRequestsTest: failed");  }}  }
class C{  private static Uri saveFile(File folder,InputStream stream,String defaultFileName,String mimeType){  String filename=defaultFileName;  if (null == filename) {    filename="file" + System.currentTimeMillis();    if (null != mimeType) {      String extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);      if (null != extension) {        filename+="." + extension;      }    }  }  Uri fileUri=null;  try {    File file=new File(folder,filename);    if (file.exists()) {      file.delete();    }    FileOutputStream fos=new FileOutputStream(file.getPath());    try {      byte[] buf=new byte[1024 * 32];      int len;      while ((len=stream.read(buf)) != -1) {        fos.write(buf,0,len);      }    } catch (    Exception e) {      Log.e(LOG_TAG,"## saveFile failed " + e.getMessage());    }    fos.flush();    fos.close();    stream.close();    fileUri=Uri.fromFile(file);  } catch (  Exception e) {    Log.e(LOG_TAG,"## saveFile failed " + e.getMessage());  }  return fileUri;}  }
class C{  public static void main(String[] args) throws Exception {  StellarShell shell=new StellarShell(args);  shell.execute();}  }
class C{  public Date parseMath(String math) throws ParseException {  Calendar cal=Calendar.getInstance(zone,loc);  cal.setTime(getNow());  if (0 == math.length()) {    return cal.getTime();  }  String[] ops=splitter.split(math);  int pos=0;  while (pos < ops.length) {    if (1 != ops[pos].length()) {      throw new ParseException("Multi character command found: \"" + ops[pos] + "\"",pos);    }    char command=ops[pos++].charAt(0);switch (command) {case '/':      if (ops.length < pos + 1) {        throw new ParseException("Need a unit after command: \"" + command + "\"",pos);      }    try {      round(cal,ops[pos++]);    } catch (    IllegalArgumentException e) {      throw new ParseException("Unit not recognized: \"" + ops[pos - 1] + "\"",pos - 1);    }  break;case '+':case '-':if (ops.length < pos + 2) {  throw new ParseException("Need a value and unit for command: \"" + command + "\"",pos);}int val=0;try {val=Integer.valueOf(ops[pos++]);} catch (NumberFormatException e) {throw new ParseException("Not a Number: \"" + ops[pos - 1] + "\"",pos - 1);}if ('-' == command) {val=0 - val;}try {String unit=ops[pos++];add(cal,val,unit);} catch (IllegalArgumentException e) {throw new ParseException("Unit not recognized: \"" + ops[pos - 1] + "\"",pos - 1);}break;default :throw new ParseException("Unrecognized command: \"" + command + "\"",pos - 1);}}return cal.getTime();}  }
class C{  public static String[] parseSet(String setDefinition){  return EnumToStringFilter.parseListDefString("set",setDefinition);}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (null != m_selectPattern)   m_selectPattern.getExpression().callVisitors(m_selectPattern,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public void removeMessageListener(MessageListener listener){  m_notifier.remove(listener);}  }
class C{  public final AlertDialog initiateScan(){  return initiateScan(ALL_CODE_TYPES,-1);}  }
class C{  private boolean availableNeighbor(TicTacToeBoard board,Cell previousMove){  if (previousMove == null) {    return true;  }  int count=0;  for (int cd=-1; cd <= 1; cd++) {    for (int rd=-1; rd <= 1; rd++) {      if ((cd == 0) && (rd == 0)) {        continue;      }      int tcol=previousMove.col + cd;      int trow=previousMove.row + rd;      if ((0 <= tcol) && (tcol < board.numColumns()) && (0 <= trow)&& (trow < board.numRows())) {        if (board.isClear(tcol,trow)) {          count++;        }      }    }  }  return (count == 0);}  }
class C{  public void paintBorderBackground(Graphics g,Component c){  int x=c.getX();  int y=c.getY();  int width=c.getWidth();  int height=c.getHeight();  if (outerBorder != null) {    if (paintOuterBorderFirst) {      outerBorder.paintBorderBackground(g,c);      paintBorderBackground(g,x + thickness,y + thickness,width - thickness * 2,height - thickness * 2,c);    } else {      paintBorderBackground(g,x + thickness,y + thickness,width - thickness * 2,height - thickness * 2,c);      outerBorder.paintBorderBackground(g,c);    }  } else {    paintBorderBackground(g,x,y,width,height,c);  }}  }
class C{  public boolean nextIsSep(){  if (Character.isLetterOrDigit(str.charAt(currentPosition)))   return false; else   return true;}  }
class C{  public static double log(double base,double x){  return Math.log(x) / Math.log(base);}  }
class C{  public OKA1(){  super(2,2);}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.INTERFACE_SCOPE;}  }
class C{  public static Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  Logger.TAG=tag;  return settings;}  }
class C{  private int singleUpdateView(GenericEntity entity,ModelViewEntity modelViewEntity,List<ModelField> fieldsToSave,SQLProcessor sqlP) throws GenericEntityException {  Delegator delegator=entity.getDelegator();  int retVal=0;  ModelEntity memberModelEntity=null;  for (  ModelViewEntity.ModelMemberEntity modelMemberEntity : modelViewEntity.getMemberModelMemberEntities().values()) {    String meName=modelMemberEntity.getEntityName();    String meAlias=modelMemberEntity.getEntityAlias();    if (Debug.verboseOn())     Debug.logVerbose("[singleUpdateView]: Processing MemberEntity " + meName + " with Alias "+ meAlias,module);    try {      memberModelEntity=delegator.getModelReader().getModelEntity(meName);    } catch (    GenericEntityException e) {      throw new GenericEntityException("Failed to get model entity for " + meName,e);    }    Map<String,Object> findByMap=new HashMap<String,Object>();    Iterator<ModelViewEntity.ModelViewLink> linkIter=modelViewEntity.getViewLinksIterator();    while (linkIter != null && linkIter.hasNext()) {      ModelViewEntity.ModelViewLink modelViewLink=linkIter.next();      if (modelViewLink.getEntityAlias().equals(meAlias) || modelViewLink.getRelEntityAlias().equals(meAlias)) {        Iterator<ModelKeyMap> kmIter=modelViewLink.getKeyMapsIterator();        while (kmIter != null && kmIter.hasNext()) {          ModelKeyMap keyMap=kmIter.next();          String fieldName="";          if (modelViewLink.getEntityAlias().equals(meAlias)) {            fieldName=keyMap.getFieldName();          } else {            fieldName=keyMap.getRelFieldName();          }          if (Debug.verboseOn())           Debug.logVerbose("[singleUpdateView]: --- Found field to set: " + meAlias + "."+ fieldName,module);          Object value=null;          if (modelViewEntity.isField(keyMap.getFieldName())) {            value=entity.get(keyMap.getFieldName());            if (Debug.verboseOn())             Debug.logVerbose("[singleUpdateView]: --- Found map value: " + value.toString(),module);          } else           if (modelViewEntity.isField(keyMap.getRelFieldName())) {            value=entity.get(keyMap.getRelFieldName());            if (Debug.verboseOn())             Debug.logVerbose("[singleUpdateView]: --- Found map value: " + value.toString(),module);          } else {            throw new GenericNotImplementedException("Update on view entities: no direct link found, unable to update");          }          findByMap.put(fieldName,value);        }      }    }    List<GenericValue> meResult=null;    try {      meResult=EntityQuery.use(delegator).from(meName).where(findByMap).queryList();    } catch (    GenericEntityException e) {      throw new GenericEntityException("Error while retrieving partial results for entity member: " + meName,e);    }    if (Debug.verboseOn())     Debug.logVerbose("[singleUpdateView]: --- Found " + meResult.size() + " results for entity member "+ meName,module);    GenericValue meGenericValue=null;    if (meResult.size() == 0) {      try {        meGenericValue=delegator.makeValue(meName,findByMap);      } catch (      Exception e) {        throw new GenericEntityException("Could not create new value for member entity" + meName + " of view "+ modelViewEntity.getEntityName(),e);      }    } else     if (meResult.size() == 1) {      meGenericValue=meResult.iterator().next();    } else {      throw new GenericEntityException("Found more than one result for member entity " + meName + " in view "+ modelViewEntity.getEntityName()+ " - this is no updatable view");    }    List<ModelField> meFieldsToSave=new LinkedList<ModelField>();    for (    ModelField modelField : fieldsToSave) {      if (memberModelEntity.isField(modelField.getName())) {        ModelField meModelField=memberModelEntity.getField(modelField.getName());        if (meModelField != null) {          meGenericValue.set(meModelField.getName(),entity.get(modelField.getName()));          meFieldsToSave.add(meModelField);          if (Debug.verboseOn())           Debug.logVerbose("[singleUpdateView]: --- Added field to save: " + meModelField.getName() + " with value "+ meGenericValue.get(meModelField.getName()),module);        } else {          throw new GenericEntityException("Could not get field " + modelField.getName() + " from model entity "+ memberModelEntity.getEntityName());        }      }    }    if (meResult.size() == 0) {      retVal+=singleInsert(meGenericValue,memberModelEntity,memberModelEntity.getFieldsUnmodifiable(),sqlP);    } else {      if (meFieldsToSave.size() > 0) {        retVal+=singleUpdate(meGenericValue,memberModelEntity,meFieldsToSave,sqlP);      } else {        if (Debug.verboseOn())         Debug.logVerbose("[singleUpdateView]: No update on member entity " + memberModelEntity.getEntityName() + " needed",module);      }    }  }  return retVal;}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  private boolean pathToDest(final Player player,final StendhalRPZone zone,final int x,final int y,final PassiveEntity entity){  final List<Node> path=Path.searchPath(entity,zone,player.getX(),player.getY(),new Rectangle(x,y,1,1),64,false);  if (path.isEmpty()) {    player.sendPrivateText("There is no easy path to that place.");  }  return !path.isEmpty();}  }
class C{  public static Text createText(Composite parent,int style,int hspan,int width,int height,int fill){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  gd.widthHint=width;  gd.heightHint=height;  t.setLayoutData(gd);  return t;}  }
class C{  public double distance(final MutableInt3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  @Override public void shutdown(){  if (web != null && web.isRunning(false)) {    web.stop();    web=null;  }  if (tcp != null && tcp.isRunning(false)) {    tcp.stop();    tcp=null;  }  if (pg != null && pg.isRunning(false)) {    pg.stop();    pg=null;  }  if (frame != null) {    frame.dispose();    frame=null;  }  if (trayIconUsed) {    try {      Utils.callMethod(tray,"remove",trayIcon);    } catch (    Exception e) {    } finally {      trayIcon=null;      tray=null;      trayIconUsed=false;    }    System.gc();    for (    Thread t : Thread.getAllStackTraces().keySet()) {      if (t.getName().startsWith("AWT-")) {        t.interrupt();      }    }    Thread.currentThread().interrupt();  }}  }
class C{  public Histogram(int[] times,int[] weight){  int maxSecs=Integer.MIN_VALUE;  for (  int time : times) {    if (time == Integer.MAX_VALUE)     continue;    if (time > maxSecs)     maxSecs=time;  }  int[] binnedCounts=new int[maxSecs + 1];  int[] binnedWeights=new int[maxSecs + 1];  for (int i=0; i < times.length; i++) {    if (times[i] == Integer.MAX_VALUE)     continue;    binnedCounts[times[i]]+=1;    binnedWeights[times[i]]+=weight[i];  }  counts=weightingFunction.apply(binnedCounts);  sums=weightingFunction.apply(binnedWeights);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/link-targets") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList linkTargetVolumes(@PathParam("id") URI id,SnapshotSessionLinkTargetsParam param){  return getSnapshotSessionManager().linkTargetVolumesToSnapshotSession(id,param);}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean sameButton(MouseEvent me){  return button == getButton(me);}  }
class C{  VcfSampleStripper(boolean removeAll){  mRemoveAll=removeAll;  mKeepMode=false;  mSamples=null;}  }
class C{  public static int launchFileWindows(String path) throws IOException {  try {    return SystemUtils.openFile(path);  } catch (  IOException iox) {    throw new LaunchException(iox,path);  }}  }
class C{  @Override public void onCreate(){  super.onCreate();  mediaPlayerBinder=new PlayerBinder();}  }
class C{  public static CommonTransitions createCover(int type,boolean forward,int duration){  CommonTransitions t=new CommonTransitions(TYPE_COVER);  t.slideType=type;  t.forward=forward;  t.speed=duration;  t.position=0;  return t;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getReferencedStateMachine_();}  }
class C{  public void shear(double shx,double shy,Point2D from){  inverse=null;  AffineTransform at=AffineTransform.getTranslateInstance(from.getX(),from.getY());  at.shear(shx,shy);  at.translate(-from.getX(),-from.getY());  transform.preConcatenate(at);  fireStateChanged();}  }
class C{  public static <E>ConstantSet<E> of(Collection<? extends E> elements){  SparseSet<E> sparse=new SparseSet<E>();  for (  E e : elements)   sparse.add(e);  return new ConstantSet<E>(sparse);}  }
class C{  public static void clearPreferences(Context context){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  mainPref.edit().clear().commit();}  }
class C{  public GPUImage3x3ConvolutionFilter(){  this(new float[]{0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f});}  }
class C{  public void initialize(String prefix,Properties props){  if (props == null) {    Debug.error("AreaHandler: initialize received bad input:\n\tprefix: " + prefix + "\n\tproperties: "+ (props == null ? "null" : "OK"));    politicalAreas=null;    return;  }  prefix=PropUtils.getScopedPropertyPrefix(prefix);  politicalAreas=new Hashtable();  String cacheFile=props.getProperty(prefix + CacheFileProperty);  try {    cacheURL=PropUtils.getResourceOrFileOrURL(this,cacheFile);    if (cacheURL != null) {      omgraphics=readCachedGraphics(cacheURL);    } else {      String dbfFile=props.getProperty(prefix + dbfFileProperty);      URL dbfFileURL=null;      if (dbfFile != null) {        dbfFileURL=PropUtils.getResourceOrFileOrURL(this,dbfFile);      }      if (dbfFileURL != null) {        InputStream is=dbfFileURL.openStream();        dbfModel=new DbfTableModel(new DbfInputStream(is));      }      if (dbfModel == null) {        String csvFile=props.getProperty(prefix + csvFileProperty);        URL infofileURL=null;        if (csvFile != null) {          infofileURL=PropUtils.getResourceOrFileOrURL(this,csvFile);        }        if (infofileURL != null) {          infoFile=new CSVShapeInfoFile(csvFile);          infoFile.setHeadersExist(PropUtils.booleanFromProperties(props,prefix + csvHeaderProperty,true));          infoFile.loadData(true);        }      }    }  } catch (  java.net.MalformedURLException murle) {    omgraphics=new OMGraphicList();  }catch (  java.io.IOException ioe) {    omgraphics=new OMGraphicList();  }catch (  Exception exc) {    omgraphics=new OMGraphicList();  }  keyIndex=PropUtils.intFromProperties(props,prefix + keyIndexProperty,keyIndex);  nameIndex=PropUtils.intFromProperties(props,prefix + nameIndexProperty,nameIndex);  String areas=props.getProperty(prefix + areasProperty);  if (areas == null)   areas="";  StringTokenizer tokenizer=new StringTokenizer(areas," ");  String currentArea;  while (tokenizer.hasMoreTokens()) {    currentArea=tokenizer.nextToken();    PoliticalArea newParams=new PoliticalArea(currentArea);    if (Debug.debugging("areas")) {      Debug.output("AreaHandler: setting SPECIALIZED attributes for \"" + newParams.id + "\"");    }    areasItems.addElement(currentArea);    newParams.drawingAttributes=new DrawingAttributes(prefix + areasProperty + "."+ currentArea,props);    politicalAreas.put(newParams.id.toUpperCase().intern(),newParams);  }  if (Debug.debugging("areas")) {    Debug.output("AreaHandler: finished initialization");  }}  }
class C{  void addAllForTreeSet(SortedSet set,Object defaultVal){  try {    buildFromSorted(set.size(),set.iterator(),null,defaultVal);  } catch (  java.io.IOException cannotHappen) {  }catch (  ClassNotFoundException cannotHappen) {  }}  }
class C{  public boolean collidesOnLine(final int x1,final int y1,final int x2,final int y2){  List<Point> points;  if ((x1 < x2) || ((x1 == x2) && (y1 < y2))) {    points=Line.renderLine(x1,y1,x2,y2);  } else {    points=Line.renderLine(x2,y2,x1,y1);  }  for (  final Point point : points) {    if (collides((int)point.getX(),(int)point.getY())) {      return true;    }  }  return false;}  }
class C{  public static double standardDeviation(double variance){  return Math.sqrt(variance);}  }
class C{  public static String convertCrlToPEM(final X509CRL crl) throws DSSException {  try {    final byte[] derCrl=crl.getEncoded();    String pemCrlPre=Base64.encodeBase64String(derCrl);    final String pemCrl=CRL_BEGIN + NEW_LINE + pemCrlPre+ NEW_LINE+ CRL_END;    return pemCrl;  } catch (  CRLException e) {    throw new DSSException("Unable to convert CRL to PEM encoding : " + e.getMessage());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void waitOnRebuild(URI vplexURI,URI vplexVolumeURI,String stepId) throws WorkflowException {  String volumeName=null;  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);    volumeName=vplexVolume.getLabel();    WaitOnRebuildResult rebuildResult=client.waitOnRebuildCompletion(vplexVolume.getDeviceLabel());    _log.info(String.format("Finished waiting on rebuild for virtual volume: %s path: %s rebuild-status: %s",vplexVolume.getDeviceLabel(),vplexVolume.getNativeId(),rebuildResult.name()));    if (WaitOnRebuildResult.SUCCESS == rebuildResult) {      WorkflowStepCompleter.stepSucceded(stepId);    } else {      ServiceError serviceError;      if (WaitOnRebuildResult.FAILED == rebuildResult) {        serviceError=VPlexApiException.errors.waitOnRebuildFailed(volumeName);      } else       if (WaitOnRebuildResult.TIMED_OUT == rebuildResult) {        serviceError=VPlexApiException.errors.waitOnRebuildTimedOut(volumeName);      } else {        serviceError=VPlexApiException.errors.waitOnRebuildInvalid(volumeName);      }      WorkflowStepCompleter.stepFailed(stepId,serviceError);    }  } catch (  VPlexApiException vae) {    _log.error("Exception checking the rebuild status: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception checking the rebuild status: " + ex.getMessage(),ex);    ServiceError serviceError=VPlexApiException.errors.waitOnRebuildException(volumeName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  protected void Pattern() throws javax.xml.transform.TransformerException {  while (true) {    LocationPathPattern();    if (tokenIs('|')) {      nextToken();    } else {      break;    }  }}  }
class C{  public void showDialog(@NotNull AsyncCallback<Void> callback){  this.callback=callback;  view.setMessage("");  view.setHost("");  view.setEnabledUploadButton(false);  view.showDialog();}  }
class C{  public boolean forEachDescending(TIntProcedure procedure){  for (int i=_pos; i-- > 0; ) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  public void cursorRight(double units){  this.cursor=this.cursor + units;}  }
class C{  void show(){  if (isAnimating()) {    if (DEBUG)     Slog.v(TAG,"show: immediate");    show(mLayer,mTargetAlpha,0);  }}  }
class C{  public String simpleQueryForString(){  acquireReference();  try {    return getSession().executeForString(getSql(),getBindArgs(),getConnectionFlags());  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public Quaternionf integrate(float dt,float vx,float vy,float vz){  return integrate(dt,vx,vy,vz,this);}  }
class C{  public void refresh(){  updateEnableState();}  }
class C{  @Override public void close() throws IOException {  PipedInputStream stream=target;  if (stream != null) {    stream.done();    target=null;  }}  }
class C{  public synchronized int removeStatements(final ISPO[] stmts) throws SailException {  return removeStatements(stmts,stmts.length);}  }
class C{  public static void purgeTables(DataSource ds) throws Exception {  try (Connection cn=ds.getConnection()){    Statement stmt=cn.createStatement();    stmt.execute("DELETE FROM persons");  } }  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public AgentInitializationException(String s,int returnValue){  super(s);  this.returnValue=returnValue;}  }
class C{  @Override public void flush() throws IOException {  writer.write(buffer,0,fill);  fill=0;}  }
class C{  protected Long wrapKey(long k){  return new Long(k);}  }
class C{  public TechnicalServiceMultiSubscriptions(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static Value decodeValue(final String s){  if (s == null)   return null;  final int slen=s.length();  if (slen == 0)   throw new IllegalArgumentException("<Empty String>");  final char ch=s.charAt(0);  if (ch == '\"' || ch == '\'') {    final int closeQuotePos=s.lastIndexOf(ch);    if (closeQuotePos == 0)     throw new IllegalArgumentException(s);    final String label=s.substring(1,closeQuotePos);    if (slen == closeQuotePos + 1) {      return new LiteralImpl(label);    }    final char ch2=s.charAt(closeQuotePos + 1);    if (ch2 == '@') {      final String languageCode=s.substring(closeQuotePos + 2);      return new LiteralImpl(label,languageCode);    } else     if (ch2 == '^') {      if (slen <= closeQuotePos + 2)       throw new IllegalArgumentException(s);      if (s.charAt(closeQuotePos + 2) != '^')       throw new IllegalArgumentException(s);      final String datatypeStr=s.substring(closeQuotePos + 3);      final URI datatypeURI=decodeURI(datatypeStr);      return new LiteralImpl(label,datatypeURI);    } else {      throw new IllegalArgumentException(s);    }  } else   if (ch == '<') {    if (s.charAt(slen - 1) != '>')     throw new IllegalArgumentException(s);    final String uriStr=s.substring(1,slen - 1);    return new URIImpl(uriStr);  } else {    throw new IllegalArgumentException(s);  }}  }
class C{  private void requestForUpload(OCFile file){  Intent i=new Intent(mContext,FileUploader.class);  i.putExtra(FileUploader.KEY_ACCOUNT,mAccount);  i.putExtra(FileUploader.KEY_FILE,file);  i.putExtra(FileUploader.KEY_UPLOAD_TYPE,FileUploader.UPLOAD_SINGLE_FILE);  i.putExtra(FileUploader.KEY_FORCE_OVERWRITE,true);  mContext.startService(i);  mTransferWasRequested=true;}  }
class C{  public boolean isBufferResultSetToLocalTemp(){  return bufferResultSetToLocalTemp;}  }
class C{  public AxisChangeEvent(Axis axis){  super(axis);  this.axis=axis;}  }
class C{  @Override public void onLoadFinished(Loader<Cursor> loader,Cursor data){  if (mInitialScrollPosition == NO_INITIAL_SCROLL_POSITION) {    mInitialScrollPosition=mViewPager.getCurrentItem();  }  mAdapter.swapCursor(data);  final int newItemCount=mAdapter.getCount();  if (((newItemCount == 0)) || (mInitialScrollPosition >= newItemCount))   mInitialScrollPosition=NO_INITIAL_SCROLL_POSITION;  if (Global.debugEnabledSql) {    Log.i(Global.LOG_CONTEXT,mDebugPrefix + " onLoadFinished" + getDebugContext()+ " found "+ ((data == null) ? 0 : newItemCount)+ " rows");  }  mAdapter.notifyDataSetChanged();  mViewPager.setAdapter(mAdapter);  onLoadCompleted();}  }
class C{  static final public Object deserialize(final ByteBuffer buf){  if (true && buf.hasArray()) {    final int off=buf.arrayOffset() + buf.position();    final int len=buf.remaining();    final Object ret=deserialize(buf.array(),off,len);    buf.position(buf.limit());    return ret;  }  final ByteBufferInputStream bais=new ByteBufferInputStream(buf);  try {    final ObjectInputStream ois=new ObjectInputStream(bais);    return ois.readObject();  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static Map<Class<? extends Annotation>,Annotation> parseAnnotations(byte[] rawAnnotations,ConstantPool constPool,Class<?> container){  if (rawAnnotations == null)   return Collections.emptyMap();  try {    return parseAnnotations2(rawAnnotations,constPool,container,null);  } catch (  BufferUnderflowException e) {    throw new AnnotationFormatError("Unexpected end of annotations.");  }catch (  IllegalArgumentException e) {    throw new AnnotationFormatError(e);  }}  }
class C{  public double nextDouble(double alpha,double beta){  double a=alpha;  double b=beta;  if ((a_setup != a) || (b_setup != b)) {    double mpa, mmb, mode;    double amb;    double a_, b_, a_1, b_1, pl;    double help_1, help_2;    amb=a * a - b * b;    samb=Math.sqrt(amb);    mode=b / samb;    help_1=a * Math.sqrt(2.0 * samb + 1.0);    help_2=b * (samb + 1.0);    mpa=(help_2 + help_1) / amb;    mmb=(help_2 - help_1) / amb;    a_=mpa - mode;    b_=-mmb + mode;    hr=-1.0 / (-a * mpa / Math.sqrt(1.0 + mpa * mpa) + b);    hl=1.0 / (-a * mmb / Math.sqrt(1.0 + mmb * mmb) + b);    a_1=a_ - hr;    b_1=b_ - hl;    mmb_1=mode - b_1;    mpa_1=mode + a_1;    s=(a_ + b_);    pm=(a_1 + b_1) / s;    pr=hr / s;    pmr=pm + pr;    a_setup=a;    b_setup=b;  }  for (; ; ) {    u=randomGenerator.raw();    v=randomGenerator.raw();    if (u <= pm) {      x=mmb_1 + u * s;      if (Math.log(v) <= (-a * Math.sqrt(1.0 + x * x) + b * x + samb))       break;    } else {      if (u <= pmr) {        e=-Math.log((u - pm) / pr);        x=mpa_1 + hr * e;        if ((Math.log(v) - e) <= (-a * Math.sqrt(1.0 + x * x) + b * x + samb))         break;      } else {        e=Math.log((u - pmr) / (1.0 - pmr));        x=mmb_1 + hl * e;        if ((Math.log(v) + e) <= (-a * Math.sqrt(1.0 + x * x) + b * x + samb))         break;      }    }  }  return (x);}  }
class C{  private static void exportDimensionAttributes(String axes,XMLStreamWriter xmlWriter,String sizeMode,double size,String units) throws XMLStreamException {  if (Size.NATIVE_DIMENSION.equals(sizeMode)) {    xmlWriter.writeAttribute(axes,"-1");  } else   if (Size.MAINTAIN_ASPECT_RATIO.equals(sizeMode))   xmlWriter.writeAttribute(axes,"0"); else   if (Size.EXPLICIT_DIMENSION.equals(sizeMode)) {    xmlWriter.writeAttribute(axes,Double.toString(size));    xmlWriter.writeAttribute(axes + "units",KMLUtil.wwUnitsToKMLUnits(units));  } else {    Logging.logger().warning(Logging.getMessage("generic.UnknownSizeMode",sizeMode));  }}  }
class C{  public static void close(ResultSet rs) throws SQLException {  if (rs != null) {    rs.close();  }}  }
class C{  public CommunicationException(Throwable target){  super(target.getMessage());  initCause(target);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final Uri storeSession(final Session newSession){  Log.d(TAG,"Storing new session " + newSession.toString());  final ContentValues values=new ContentValues();  values.put(Schema.COL_CREATED_AT,newSession.getCreatedAt());  values.put(Schema.COL_LAST_UPDATED,newSession.getLastUpdated());  values.put(Schema.COL_DESCRIPTION,newSession.getDescription());  values.put(Schema.COL_HAS_BEEN_EXPORTED,newSession.hasBeenExported());  values.put(Schema.COL_IS_ACTIVE,newSession.isActive());  values.put(Schema.COL_NUMBER_OF_CELLS,0);  values.put(Schema.COL_NUMBER_OF_WIFIS,0);  return contentResolver.insert(ContentProvider.CONTENT_URI_SESSION,values);}  }
class C{  private static URL handleRedirect(URL originalUrl,String location) throws IOException {  if (location == null) {    throw new ProtocolException("Null location redirect");  }  URL url=new URL(originalUrl,location);  String protocol=url.getProtocol();  if (!"https".equals(protocol) && !"http".equals(protocol)) {    throw new ProtocolException("Unsupported protocol redirect: " + protocol);  }  return url;}  }
class C{  public void replace(String orig,String replacement){  for (int col=0; col < columns.length; col++) {    replace(orig,replacement,col);  }}  }
class C{  public void runOnce(){  List<MetricDatumWithKey<KeyType>> dataToPublish=null;synchronized (queue) {    long timeSinceFlush=Math.max(0,getTime() - lastFlushTime);    if (timeSinceFlush >= bufferTimeMillis || queue.size() >= flushSize || shuttingDown) {      dataToPublish=queue.drain(flushSize);      LOG.debug("Drained {} datums from queue",dataToPublish.size());      if (shuttingDown) {        LOG.debug("Shutting down with {} datums left on the queue",queue.size());        shutdown=queue.isEmpty();      }    } else {      long waitTime=bufferTimeMillis - timeSinceFlush;      LOG.debug("Waiting up to {}ms for {} more datums to appear.",waitTime,flushSize - queue.size());      try {        queue.wait(waitTime);      } catch (      InterruptedException e) {      }    }  }  if (dataToPublish != null) {    try {      metricsPublisher.publishMetrics(dataToPublish);    } catch (    Throwable t) {      LOG.error("Caught exception thrown by metrics Publisher in CWPublisherRunnable",t);    }    lastFlushTime=getTime() + nextJitterValueToUse;    if (maxJitter != 0) {      nextJitterValueToUse=maxJitter - rand.nextInt(2 * maxJitter);    }  }}  }
class C{  public Alloc(Token t,int site,List<Expression> args){  super(t);  this.site=site;  this.args=args;}  }
class C{  protected String createRangeLabelString(double radius,String altitude){  NumberFormat df=this.getRadiusFormat();  StringBuilder sb=new StringBuilder();  sb.append("RG ").append(df.format(radius));  if (!WWUtil.isEmpty(altitude)) {    sb.append("\nALT ").append(altitude);  }  return sb.toString();}  }
class C{  public static ArrayList<File> searchExactFileNames(File folder,String ext){  ArrayList<File> list=new ArrayList<File>();  File[] files=folder.listFiles();  for (  File f : files) {    if (f.isDirectory()) {      for (      File f1 : searchExactFileNames(f,ext)) {        list.add(f1);      }    } else     if (f.isFile() && f.getName().equals(ext)) {      list.add(f);    }  }  return list;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String01() throws NoSuchProviderException, NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      SSLContext.getInstance(defaultProtocol,provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      SSLContext.getInstance(defaultProtocol,"");      fail("IllegalArgumentException must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  private int lookupOneTouchSize(){  return DefaultLookup.getInt(splitPaneUI.getSplitPane(),splitPaneUI,"SplitPaneDivider.oneTouchButtonSize",ONE_TOUCH_SIZE);}  }
class C{  public TimeoutRunnable(Object sync,long timeout){  this.sync=sync;  this.timeout=timeout;}  }
class C{  public void generateReport() throws AdeException {  if (m_messageInputDateTime != null) {    generateReport(m_messageInputDateTime);  } else {    generateReport("EndOfFile_No_Date");  }}  }
class C{  public AudioResource(String name){  this.name=name;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.IS_A__SINGLE_IS_A1:    getSingleIsA_1().clear();  return;case UmplePackage.IS_A__MULTIPLE_IS_A1:getMultipleIsA_1().clear();return;}super.eUnset(featureID);}  }
class C{  public NodeSubstitute(Element prev,Element newe){  super();  this.prev=prev;  this.newe=newe;}  }
class C{  public static Relevance relevantJoinRule(Fact fact,Schema schema){  if (Schema.isSchemaTriple(fact.getTriple())) {    return Relevance.NONE;  }  URI predURI=fact.getPredicate();  Value object=fact.getObject();  boolean relevantToSubject=false;  boolean relevantToObject=false;  boolean literalObject=object instanceof Literal;  if (predURI.equals(RDF.TYPE)) {    Resource typeURI=(Resource)fact.getObject();    if (schema.hasClass(typeURI)) {      OwlClass c=schema.getClass(typeURI);      if (!c.getOnProperty().isEmpty() || !c.getSvfRestrictions().isEmpty() || !c.getAvfRestrictions().isEmpty()|| !c.getQCRestrictions().isEmpty()|| !c.getDisjointClasses().isEmpty()|| !c.getComplementaryClasses().isEmpty()) {        relevantToSubject=true;      }    }  }  if (schema.hasProperty(predURI)) {    OwlProperty prop=schema.getProperty(predURI);    if (prop.isTransitive()) {      relevantToSubject=true;      relevantToObject=!literalObject;    } else {      if (!prop.getDisjointProperties().isEmpty()) {        relevantToSubject=true;      }      for (      Resource rURI : prop.getRestrictions()) {        OwlClass r=schema.getClass(rURI);        if (!r.allValuesFrom().isEmpty()) {          relevantToSubject=true;        }        if (!literalObject && (r.getMaxCardinality() >= 0 || r.getMaxQualifiedCardinality() >= 0 || !r.someValuesFrom().isEmpty())) {          relevantToObject=true;        }        if (relevantToSubject && (relevantToObject || literalObject)) {          break;        }      }    }  }  return Relevance.get(relevantToSubject,relevantToObject);}  }
class C{  protected void addDeclarationPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ImportDeclaration_declaration_feature"),getString("_UI_PropertyDescriptor_description","_UI_ImportDeclaration_declaration_feature","_UI_ImportDeclaration_type"),SGraphPackage.Literals.IMPORT_DECLARATION__DECLARATION,true,false,true,null,null,null));}  }
class C{  public String globalInfo(){  return "Changes the order of the classes so that the class values are " + "no longer of in the order specified in the header. " + "The values will be in the order specified by the user "+ "-- it could be either in ascending/descending order by the class "+ "frequency or in random order. Note that this filter currently does not "+ "change the header, only the class values of the instances, "+ "so there is not much point in using it in conjunction with the "+ "FilteredClassifier. The value can also be converted back using "+ "'originalValue(double value)' procedure.";}  }
class C{  public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  public boolean isSetParamValue(){  return this.paramValue != null;}  }
class C{  protected void loadRdf2(final Object source,final String baseURI,final RDFFormat rdfFormat,final String defaultGraph,final RDFParserOptions options) throws Exception {  if (source == null)   throw new IllegalArgumentException();  if (!(source instanceof Reader) && !(source instanceof InputStream)) {    throw new IllegalArgumentException();  }  if (options == null)   throw new IllegalArgumentException();  if (log.isInfoEnabled())   log.info("format=" + rdfFormat + ", options="+ options);  this.defaultGraph=defaultGraph;  final RDFParser parser=getParser(rdfFormat);  options.apply(parser);  parser.setRDFHandler(newRDFHandler());  insertStart=System.currentTimeMillis();  insertTime=0;  stmtsAdded=0;  try {    before();    log.info("Starting parse.");    if (source instanceof Reader) {      parser.parse((Reader)source,baseURI);    } else     if (source instanceof InputStream) {      parser.parse((InputStream)source,baseURI);    } else     throw new AssertionError();    insertTime=System.currentTimeMillis() - insertStart;    if (log.isInfoEnabled())     log.info("parse complete: elapsed=" + insertTime + "ms, toldTriples="+ stmtsAdded+ ", tps="+ getInsertRate());    success();  } catch (  RuntimeException ex) {    insertTime+=System.currentTimeMillis() - insertStart;    try {      error(ex);    } catch (    Exception ex2) {      log.error("Ignoring: " + ex2);    }    throw ex;  } finally {    cleanUp();  }}  }
class C{  protected void optimize2() throws Exception {  int nNumChanged=0;  boolean bExamineAll=true;  while (nNumChanged > 0 || bExamineAll) {    nNumChanged=0;    if (bExamineAll) {      for (int i=0; i < m_nInstances; i++) {        nNumChanged+=examineExample(i);      }    } else {      boolean bInnerLoopSuccess=true;      do {        if (takeStep(m_iUp,m_iLow,m_alpha[m_iLow],m_alphaStar[m_iLow],m_error[m_iLow]) > 0) {          bInnerLoopSuccess=true;          nNumChanged+=1;        } else {          bInnerLoopSuccess=false;        }      } while ((m_bUp <= m_bLow - 2 * m_fTolerance) && bInnerLoopSuccess);      nNumChanged=0;    }    if (bExamineAll) {      bExamineAll=false;    } else     if (nNumChanged == 0) {      bExamineAll=true;    }  }}  }
class C{  public static void editTag(final JFrame parent,final CTag tag){  final CViewCommentDialog dlg=new CViewCommentDialog(parent,"Edit Tag",tag.getName(),tag.getDescription());  dlg.setVisible(true);  if (!dlg.wasCancelled()) {    try {      tag.setName(dlg.getName());    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00126: " + "Could not change tag name";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The name of the tag '%s' could not be changed.",tag.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The tag name could not be changed."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }    try {      tag.setDescription(dlg.getComment());    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00127: " + "Could not change tag description";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The description of the tag '%s' could not be changed.",tag.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The tag description could not be changed."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  public static Map<String,String> mergeProps(Map<String,String> defaultProps,Map<String,String> overrideProps){  Map<String,String> mergedProps=new HashMap<String,String>(defaultProps);  for (  Map.Entry<String,String> entry : overrideProps.entrySet()) {    mergedProps.put(entry.getKey(),entry.getValue());  }  return mergedProps;}  }
class C{  public static JSONObject createOpenGraphActionForPost(String type){  JSONObject action=new JSONObject();  if (type != null) {    try {      action.put("type",type);    } catch (    JSONException e) {      throw new FacebookException("An error occurred while setting up the open graph action",e);    }  }  return action;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == FunctionOrFieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_NAME:      return N4JSPackage.FIELD_ACCESSOR___GET_NAME;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeProvidingElement.class) {switch (baseOperationID) {case N4JSPackage.TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF:  return N4JSPackage.FIELD_ACCESSOR___GET_DECLARED_TYPE_REF;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.FIELD_ACCESSOR___GET_NAME;default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___GET_NAME:return N4JSPackage.FIELD_ACCESSOR___GET_NAME;case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:return N4JSPackage.FIELD_ACCESSOR___IS_VALID_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public int hashCode(){  return this.path.hashCode();}  }
class C{  protected boolean canParseContentType(String mimeType){  return KMLConstants.KML_MIME_TYPE.equals(mimeType) || KMLConstants.KMZ_MIME_TYPE.equals(mimeType) || "text/plain".equals(mimeType)|| "text/xml".equals(mimeType);}  }
class C{  public GenerateCodeDialog(ModelerFile modelerFile){  this.scene=(JPAModelerScene)modelerFile.getModelerScene();  this.configData=new ApplicationConfigData();  this.modelerFileObject=modelerFile.getFileObject();  this.entityMappings=(EntityMappings)modelerFile.getDefinitionElement();  initComponents();  manageGenerateButtonStatus();  propertyChangeSupport=new PropertyChangeSupport(this);  populateExistingProjectElementGroup();  setPackage(entityMappings.getPackage());  propertyChangeSupport.addPropertyChangeListener(this);  this.setTitle(NbBundle.getMessage(GenerateCodeDialog.class,"GenerateCodeDialog.title"));  getRootPane().setDefaultButton(generateSourceCode);  modelerFilePackage=getPackageForFolder(sourceGroup,modelerFileObject.getParent());  initLayer();}  }
class C{  public SimpleSystemPermissionSet(Set<SystemPermission> permissions){  this.permissions=permissions;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.158 -0500",hash_original_method="AF980EBAC4BC6C4AB1174BED3B10073B",hash_generated_method="A2DB36E986688669AC7CAE62C370C146") private boolean doAcquireNanos(int arg,long nanosTimeout) throws InterruptedException {  long lastTime=System.nanoTime();  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      if (nanosTimeout <= 0)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      long now=System.nanoTime();      nanosTimeout-=now - lastTime;      lastTime=now;      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void testCertStore05() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    certS=CertStore.getInstance(dValid[i],dParams);    assertEquals("Incorrect type",certS.getType(),dValid[i]);    certS.getCertStoreParameters();  }}  }
class C{  public boolean isInCG(){  return !NullColumnValueGetter.isNullURI(getConsistencyGroup());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelement.class,args);}  }
class C{  private boolean checkIfVolumeExistsInCG(List<List<Object>> volList,Volume volume){  for (  List<Object> vols : volList) {    if (null != vols.get(1)) {      String cgVolLabel=vols.get(1).toString();      if (cgVolLabel.equalsIgnoreCase(volume.getLabel())) {        return true;      }    }  }  return false;}  }
class C{  public boolean packageHasActiveAdmins(String packageName){  if (mService != null) {    try {      return mService.packageHasActiveAdmins(packageName,UserHandle.myUserId());    } catch (    RemoteException e) {      Log.w(TAG,"Failed talking with device policy service",e);    }  }  return false;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  public BaseCheckBox(String label,DirectionEstimator directionEstimator){  this();  setDirectionEstimator(directionEstimator);  setText(label);}  }
class C{  public static String reverse(String s){  String r="";  for (int i=s.length() - 1; i >= 0; i--) {    r=r + s.charAt(i);  }  return r;}  }
class C{  protected Map<String,String> loadSessionVariables(HttpServletRequest req) throws ServletException {  Map<String,String> datastoreMap=new HashMap<>();  String sessionId=getCookieValue(req,"bookshelfSessionId");  if (sessionId.equals("")) {    return datastoreMap;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    StringBuilder logNames=new StringBuilder();    if (stateEntity != null) {      for (      String varName : stateEntity.names()) {        req.getSession().setAttribute(varName,stateEntity.getString(varName));        datastoreMap.put(varName,stateEntity.getString(varName));        logNames.append(varName + " ");      }    } else {    }  }  finally {    if (transaction.active()) {      transaction.rollback();    }  }  return datastoreMap;}  }
class C{  private void updateSaveFields(){  m_nameTextField.setModified(!m_savedName.equals(m_nameTextField.getText()));  m_descriptionField.setModified(!m_savedDescription.equals(m_descriptionField.getText()));}  }
class C{  public static synchronized void initialize(){  if (!isInitialized) {    ensureRapidMinerHomeSet(Level.OFF);    initializeReleasePlatform();    initializeReleaseVersion();    initializeReleaseRevision();    isInitialized=true;  }}  }
class C{  public boolean hasTree() throws IOException, ImportException {  try {    skipUntil("(");    unreadCharacter('(');  } catch (  EOFException e) {    lastTree=null;    return false;  }  return true;}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public static double floor(double value){  if (USE_JDK_MATH) {    return Math.floor(value);  }  if (Math.abs(value) <= (double)Integer.MAX_VALUE) {    if (value > 0.0) {      return (double)(int)value;    } else     if (value < 0.0) {      double anteCommaDigits=(double)(int)value;      if (value != anteCommaDigits) {        return anteCommaDigits - 1.0;      } else {        return anteCommaDigits;      }    } else {      return value;    }  } else   if (Math.abs(value) < TWO_POW_52) {    double highPart=((int)(value * TWO_POW_N26)) * TWO_POW_26;    if (value > 0.0) {      return highPart + (double)((int)(value - highPart));    } else {      double anteCommaDigits=highPart + (double)((int)(value - highPart));      if (value != anteCommaDigits) {        return anteCommaDigits - 1.0;      } else {        return anteCommaDigits;      }    }  } else {    return value;  }}  }
class C{  public void refreshType(TypeScope scope){  this.binder.refreshBinderType(scope);}  }
class C{  public void createAsyncScenario01_01() throws Exception {  long supplierKey=basicSetup.getSupplierAdminKey();  long customerAdminKey=basicSetup.getCustomerAdminKey();  VOUser customerAdmin=basicSetup.getCustomerAdmin();  BillingIntegrationTestBase.setDateFactoryInstance("2013-05-01 12:00:00");  setCutOffDay(supplierKey,1);  VOServiceDetails service=serviceSetup.createPublishAndActivateMarketableService(supplierKey,"test_01_01",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_PARS,technicalServiceAsync,supplierMarketplace);  login("2013-06-01 07:00:00",customerAdminKey,ROLE_ORGANIZATION_ADMIN);  VORoleDefinition role=VOServiceFactory.getRole(service,"USER");  VOSubscriptionDetails subscription=subscrSetup.subscribeToService("test_01_01",service,customerAdmin,role);  BillingIntegrationTestBase.addToCache(subscription);  resetCutOffDay(supplierKey);}  }
class C{  public DomParser(HtmlLexer lexer,boolean wantsComments,InputSource src,MessageQueue mq) throws ParseException {  this(lexer,wantsComments,src,Namespaces.HTML_DEFAULT,mq);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  Diff other=(Diff)obj;  if (operation != other.operation) {    return false;  }  if (text == null) {    if (other.text != null) {      return false;    }  } else   if (!text.equals(other.text)) {    return false;  }  return true;}  }
class C{  protected ReadWorker(){  super(ctx.gridName(),"grid-time-server-reader",GridClockServer.this.log);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textparseintolistofelements.class,args);}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Rectangle2D defaultRegion=in.getBounds2D();  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  ComponentTransferFunction funcR=null;  ComponentTransferFunction funcG=null;  ComponentTransferFunction funcB=null;  ComponentTransferFunction funcA=null;  for (Node n=filterElement.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    Element e=(Element)n;    Bridge bridge=ctx.getBridge(e);    if (bridge == null || !(bridge instanceof SVGFeFuncElementBridge)) {      continue;    }    SVGFeFuncElementBridge funcBridge=(SVGFeFuncElementBridge)bridge;    ComponentTransferFunction func=funcBridge.createComponentTransferFunction(filterElement,e);    if (funcBridge instanceof SVGFeFuncRElementBridge) {      funcR=func;    } else     if (funcBridge instanceof SVGFeFuncGElementBridge) {      funcG=func;    } else     if (funcBridge instanceof SVGFeFuncBElementBridge) {      funcB=func;    } else     if (funcBridge instanceof SVGFeFuncAElementBridge) {      funcA=func;    }  }  Filter filter=new ComponentTransferRable8Bit(in,funcA,funcR,funcG,funcB);  handleColorInterpolationFilters(filter,filterElement);  filter=new PadRable8Bit(filter,primitiveRegion,PadMode.ZERO_PAD);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  public static List<Float> calculate(final float originalSize,final int dpi){  float mdpi=1f;switch (dpi) {case Dpi.XXXHDPI:    mdpi=originalSize / DpiRatio.RATIO_XXXHDPI;  break;case Dpi.XXHDPI:mdpi=originalSize / DpiRatio.RATIO_XHDPI;break;case Dpi.XHDPI:mdpi=originalSize / DpiRatio.RATIO_XHDPI;break;case Dpi.HDPI:mdpi=originalSize / DpiRatio.RATIO_HDPI;break;case Dpi.MDPI:mdpi=originalSize / DpiRatio.RATIO_MDPI;break;case Dpi.LDPI:mdpi=originalSize / DpiRatio.RATIO_LDPI;break;case Dpi.TVDPI:mdpi=originalSize / DpiRatio.RATIO_TVDPI;break;}final List<Float> sizes=new ArrayList<>(Constants.DENSITIES_COUNT);sizes.add(Dpi.XXXHDPI,mdpi * DpiRatio.RATIO_XXXHDPI);sizes.add(Dpi.XXHDPI,mdpi * DpiRatio.RATIO_XXHDPI);sizes.add(Dpi.XHDPI,mdpi * DpiRatio.RATIO_XHDPI);sizes.add(Dpi.HDPI,mdpi * DpiRatio.RATIO_HDPI);sizes.add(Dpi.MDPI,mdpi);sizes.add(Dpi.LDPI,mdpi * DpiRatio.RATIO_LDPI);sizes.add(Dpi.TVDPI,mdpi * DpiRatio.RATIO_TVDPI);return sizes;}  }
class C{  public static java.util.Date parseDateTime(String date,String format,String locale,String timeZone){  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);  try {synchronized (dateFormat) {      return dateFormat.parse(date);    }  } catch (  Exception e) {    throw DbException.get(ErrorCode.PARSE_ERROR_1,e,date);  }}  }
class C{  void checkCertUsage(X509Certificate userCert,boolean[] bad){  if (bad != null) {    bad[0]=bad[1]=bad[2]=false;  }  boolean[] keyUsage=userCert.getKeyUsage();  if (keyUsage != null) {    keyUsage=Arrays.copyOf(keyUsage,9);    if (!keyUsage[0] && !keyUsage[1]) {      if (bad != null) {        bad[0]=true;        badKeyUsage=true;      }    }  }  try {    List<String> xKeyUsage=userCert.getExtendedKeyUsage();    if (xKeyUsage != null) {      if (!xKeyUsage.contains("2.5.29.37.0") && !xKeyUsage.contains("1.3.6.1.5.5.7.3.3")) {        if (bad != null) {          bad[1]=true;          badExtendedKeyUsage=true;        }      }    }  } catch (  java.security.cert.CertificateParsingException e) {  }  try {    byte[] netscapeEx=userCert.getExtensionValue("2.16.840.1.113730.1.1");    if (netscapeEx != null) {      DerInputStream in=new DerInputStream(netscapeEx);      byte[] encoded=in.getOctetString();      encoded=new DerValue(encoded).getUnalignedBitString().toByteArray();      NetscapeCertTypeExtension extn=new NetscapeCertTypeExtension(encoded);      Boolean val=extn.get(NetscapeCertTypeExtension.OBJECT_SIGNING);      if (!val) {        if (bad != null) {          bad[2]=true;          badNetscapeCertType=true;        }      }    }  } catch (  IOException e) {  }}  }
class C{  public ActivityChooserView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.STRING_LITERAL;}  }
class C{  public synchronized void close() throws IOException {  getOutputStream().close();  socket.close();}  }
class C{  private void testEvents(int nodes) throws Throwable {  createServers(nodes);  CopycatClient client=createClient();  client.onEvent("test",null);  createClient().onEvent("test",null);  createClient().onEvent("test",null);  client.submit(new TestEvent(false)).thenAccept(null);  await(30000,4);}  }
class C{  public <T>JSONAPIDocument<List<T>> readDocumentCollection(InputStream dataStream,Class<T> clazz){  try {    resourceCache.init();    JsonNode rootNode=objectMapper.readTree(dataStream);    ValidationUtils.ensureNotError(objectMapper,rootNode);    ValidationUtils.ensureCollection(rootNode);    resourceCache.cache(parseIncluded(rootNode));    List<T> resourceList=new ArrayList<>();    for (    JsonNode element : rootNode.get(DATA)) {      T pojo=readObject(element,clazz,true);      resourceList.add(pojo);    }    JSONAPIDocument<List<T>> result=new JSONAPIDocument<>(resourceList,objectMapper);    if (rootNode.has(META)) {      result.setMeta(mapMeta(rootNode.get(META)));    }    if (rootNode.has(LINKS)) {      result.setLinks(new Links(mapLinks(rootNode.get(LINKS))));    }    return result;  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  } finally {    resourceCache.clear();  }}  }
class C{  public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  Size2D base=new Size2D(getWidth(),getHeight());  return constraint.calculateConstrainedSize(base);}  }
class C{  public Object newTransport(HttpEngine httpEngine) throws IOException {  return (spdyConnection != null) ? new SpdyTransport(httpEngine,spdyConnection) : new HttpTransport(httpEngine,out,in);}  }
class C{  public ItemFilterParser(Element element) throws FilterException {  if (element.getChild("item") == null) {    throw new MissingFilterChildException("item",element);  }  item=DocumentItems.getItem(element.getChild("item"));}  }
class C{  protected void tearDown(){}  }
class C{  public static UseCandidateAttribute createUseCandidateAttribute(){  UseCandidateAttribute attribute=new UseCandidateAttribute();  return attribute;}  }
class C{  public static String uuid(int len,int radix){  if (radix > CHARS.length) {    throw new IllegalArgumentException();  }  char[] uuid=new char[len];  for (int i=0; i < len; i++) {    uuid[i]=CHARS[(int)(Math.random() * radix)];  }  return new String(uuid);}  }
class C{  public static Object parseWithException(Reader in) throws IOException, ParseException {  JSONParser parser=new JSONParser();  return parser.parse(in);}  }
class C{  @Override public void startInternal() throws LifecycleException {  super.startInternal();  if (getLogger().isDebugEnabled()) {    getLogger().debug(this + ": Starting");  }  if (this.started.get()) {    return;  }  fireLifecycleEvent(START_EVENT,null);  registerJvmRouteBinderValve();  if (isCommitValveEnabled()) {    registerCommitSessionValve();  }  initializeSessionCache();  try {    load();  } catch (  ClassNotFoundException e) {    throw new LifecycleException("Exception starting manager",e);  }catch (  IOException e) {    throw new LifecycleException("Exception starting manager",e);  }  scheduleTimerTasks();  this.started.set(true);  this.setState(LifecycleState.STARTING);}  }
class C{  public boolean handleMediaSessionNotification(Notification notification){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {    return false;  }  MusicSpec musicSpec=new MusicSpec();  MusicStateSpec stateSpec=new MusicStateSpec();  Bundle extras=notification.extras;  if (extras == null)   return false;  if (extras.get(Notification.EXTRA_MEDIA_SESSION) == null)   return false;  MediaController c;  try {    c=new MediaController(getApplicationContext(),(MediaSession.Token)extras.get(Notification.EXTRA_MEDIA_SESSION));  } catch (  NullPointerException e) {    return false;  }  PlaybackState s=c.getPlaybackState();  stateSpec.position=(int)(s.getPosition() / 1000);  stateSpec.playRate=Math.round(100 * s.getPlaybackSpeed());  stateSpec.repeat=1;  stateSpec.shuffle=1;switch (s.getState()) {case PlaybackState.STATE_PLAYING:    stateSpec.state=MusicStateSpec.STATE_PLAYING;  break;case PlaybackState.STATE_STOPPED:stateSpec.state=MusicStateSpec.STATE_STOPPED;break;case PlaybackState.STATE_PAUSED:stateSpec.state=MusicStateSpec.STATE_PAUSED;break;default :stateSpec.state=MusicStateSpec.STATE_UNKNOWN;break;}MediaMetadata d=c.getMetadata();if (d == null) return false;if (d.containsKey(MediaMetadata.METADATA_KEY_ARTIST)) musicSpec.artist=d.getString(MediaMetadata.METADATA_KEY_ARTIST);if (d.containsKey(MediaMetadata.METADATA_KEY_ALBUM)) musicSpec.album=d.getString(MediaMetadata.METADATA_KEY_ALBUM);if (d.containsKey(MediaMetadata.METADATA_KEY_TITLE)) musicSpec.track=d.getString(MediaMetadata.METADATA_KEY_TITLE);if (d.containsKey(MediaMetadata.METADATA_KEY_DURATION)) musicSpec.duration=(int)d.getLong(MediaMetadata.METADATA_KEY_DURATION) / 1000;if (d.containsKey(MediaMetadata.METADATA_KEY_NUM_TRACKS)) musicSpec.trackCount=(int)d.getLong(MediaMetadata.METADATA_KEY_NUM_TRACKS);if (d.containsKey(MediaMetadata.METADATA_KEY_TRACK_NUMBER)) musicSpec.trackNr=(int)d.getLong(MediaMetadata.METADATA_KEY_TRACK_NUMBER);GBApplication.deviceService().onSetMusicInfo(musicSpec);GBApplication.deviceService().onSetMusicState(stateSpec);return true;}  }
class C{  private void ChainingConsumers(Movie movie){  Consumer<Movie> chainedConsumer=auditMovie.andThen(persistMovie).andThen(distributeMovie);  chainedConsumer.accept(movie);}  }
class C{  protected void runSignalControlledTrain(){  waitForStartblockToGetOccupied();  allocateBlocksAndSetTurnouts(0);  setTrainDirection();  SCTrainRunner thread=new SCTrainRunner(this);  new Thread(thread).start();}  }
class C{  public String senSegment(String text){  text=text.replaceAll("([\t \n])+","$1");  List markList=new ArrayList();  List data=FeatureGenerator.doFeatureGen(new HashMap(),text,markList,false);  if (markList.isEmpty())   return text + "\n";  List labels=classifier.classify(data);  String result=text.substring(0,((Integer)markList.get(0)).intValue());  for (int i=0; i < markList.size(); ++i) {    int curPos=((Integer)markList.get(i)).intValue();    if (((String)labels.get(i)).equals(positiveLabel)) {      result+=" " + text.charAt(curPos) + "\n";    } else     result+=text.charAt(curPos);    if (i < markList.size() - 1) {      int nexPos=((Integer)markList.get(i + 1)).intValue();      result+=text.substring(curPos + 1,nexPos);    }  }  int finalMarkPos=((Integer)markList.get(markList.size() - 1)).intValue();  result+=text.substring(finalMarkPos + 1,text.length());  result=result.replaceAll("\n ","\n");  result=result.replaceAll("\n\n","\n");  result=result.replaceAll("\\.\\. \\.","...");  return result;}  }
class C{  @Override protected void loadPlugins(){  pickingPlugin=new PickingGraphMousePlugin<V,E>();  animatedPickingPlugin=new AnimatedPickingGraphMousePlugin<V,E>();  translatingPlugin=new TranslatingGraphMousePlugin(InputEvent.BUTTON1_MASK);  scalingPlugin=new ScalingGraphMousePlugin(new CrossoverScalingControl(),0,in,out);  rotatingPlugin=new RotatingGraphMousePlugin();  shearingPlugin=new ShearingGraphMousePlugin();  add(scalingPlugin);  setMode(Mode.TRANSFORMING);}  }
class C{  public FakeClock decrementTime(long durationMs){  incrementTime(-durationMs);  return this;}  }
class C{  public Builder withButtonColor(final int color){  this.color=color;  return this;}  }
class C{  public void start(){  if (!started) {    started=true;    deltaUs=elapsedRealtimeMinus(positionUs);  }}  }
class C{  private boolean noObjectWasClickedOn(){  boolean pickedNodeNull=(pickedNode == null);  boolean cameraPicked=(pickedNode instanceof PCamera);  return (pickedNodeNull || cameraPicked);}  }
class C{  private ConfigException error(String message){  return new ConfigException(message + " in " + _string);}  }
class C{  public static String buildResponseUrl(String tenant,LogoutState logoutState){  String retval=null;  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());  if (samlResponse != null) {    log.info("SAML SLO Response is " + samlResponse.toString());    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);  }  return retval;}  }
class C{  public Element(ElementType type,boolean defaultAttributes){  theType=type;  if (defaultAttributes)   theAtts=new AttributesImpl(type.atts()); else   theAtts=new AttributesImpl();  theNext=null;  preclosed=false;}  }
class C{  private long lastStartFor(Instant timestamp){  return timestamp.getMillis() - timestamp.plus(period).minus(offset).getMillis() % period.getMillis();}  }
class C{  public List<JCExpression> Types(List<Type> ts){  ListBuffer<JCExpression> lb=new ListBuffer<JCExpression>();  for (List<Type> l=ts; l.nonEmpty(); l=l.tail)   lb.append(Type(l.head));  return lb.toList();}  }
class C{  public void fail(final Exception e){  if (e instanceof javax.jms.JMSException) {    JMSException exception=(JMSException)e;    String message=e.toString();    Exception linkedException=exception.getLinkedException();    if (linkedException != null) {      message+=" [linked exception: " + linkedException + "]";    }    Assert.fail(message);  } else {    Assert.fail(e.getMessage());  }}  }
class C{  public DateTime toDateTime(Chronology chronology){  chronology=DateTimeUtils.getChronology(chronology);  if (getChronology() == chronology) {    return this;  }  return super.toDateTime(chronology);}  }
class C{  public DocumentAnalysisRequest addDocuments(Collection<SolrInputDocument> docs){  documents.addAll(docs);  return this;}  }
class C{  public CsvReader createCsvReader(Reader reader){  return createCsvReader(new BufferedReader(reader));}  }
class C{  public static Float createFloat(String val){  return Float.valueOf(val);}  }
class C{  private boolean hasNonMetadataNodes(DefaultMutableTreeNode node){  for (Enumeration<?> e=node.children(); e.hasMoreElements(); ) {    DefaultMutableTreeNode n=(DefaultMutableTreeNode)e.nextElement();    Object uo=n.getUserObject();    if (uo instanceof XNodeInfo) {switch (((XNodeInfo)uo).getType()) {case ATTRIBUTES:case NOTIFICATIONS:case OPERATIONS:        break;default :      return true;  }} else {  return true;}}return false;}  }
class C{  public PriorityQueue(int initialCapacity,Comparator<? super E> comparator){  if (initialCapacity < 1) {    throw new IllegalArgumentException();  }  elements=newElementArray(initialCapacity);  this.comparator=comparator;}  }
class C{  public WriteRequest(final int objectId,final int objectInstanceId,final int resourceId,final Map<Integer,?> values,Type type){  this(Mode.REPLACE,ContentFormat.TLV,new LwM2mPath(objectId,objectInstanceId,resourceId),LwM2mMultipleResource.newResource(resourceId,values,type));}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  IntIntPair other=(IntIntPair)obj;  return (this.first == other.first) && (this.second == other.second);}  }
class C{  public boolean remove(double val){  int index=index(val);  if (index >= 0) {    removeAt(index);    return true;  }  return false;}  }
class C{  public static Years yearsBetween(ReadablePartial start,ReadablePartial end){  if (start instanceof LocalDate && end instanceof LocalDate) {    Chronology chrono=DateTimeUtils.getChronology(start.getChronology());    int years=chrono.years().getDifference(((LocalDate)end).getLocalMillis(),((LocalDate)start).getLocalMillis());    return Years.years(years);  }  int amount=BaseSingleFieldPeriod.between(start,end,ZERO);  return Years.years(amount);}  }
class C{  protected void parseh() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x=parseFloat();pathHandler.linetoHorizontalRel(x);expectNumber=skipCommaSpaces2();}}  }
class C{  public static Motor jaguar(int channel){  return jaguar(channel,SPEED_LIMITER);}  }
class C{  public static void w(String tag,String msg,Throwable tr){  println(WARN,tag,msg,tr);}  }
class C{  public TimeGrid(@Time @NonNegative final double end,@NonNegative final int steps){  QL.require(end > 0.0,"negative times not allowed");  final double dt=end / steps;  this.times=new Array(steps + 1);  for (int i=0; i <= steps; i++) {    times.set(i,dt * i);  }  this.mandatoryTimes=new Array(1).fill(end);  this.dt=new Array(steps).fill(dt);}  }
class C{  public void addEventListener2(IMultimediaMessagingSessionListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Add an event listener");  }  try {synchronized (mLock) {      mMultimediaMessagingSessionEventBroadcaster.addMultimediaMessagingEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRfQResponseLine[");  sb.append(get_ID()).append(",Winner=").append(isSelectedWinner()).append("]");  return sb.toString();}  }
class C{  private static String addTimeInfoToEvent(String message,Long currTime,int delayInMillis){  String eventTimeString=Long.toString((currTime - delayInMillis) / 1000 * 1000);  String dateString=fmt.print(currTime);  message=message + "," + eventTimeString+ ","+ dateString;  return message;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  String inputFilesString=null;  String outputFileSuffix="_HistoEqual";  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int rows=0;  int cols=0;  double z;  float progress=0;  long numCells=0;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int numBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFileSuffix=args[1];  numBins=Integer.parseInt(args[2]);  if ((inputFilesString == null) || (outputFileSuffix == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      image=new WhiteboxRaster(imageFiles[i],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      outputHeader=imageFiles[i].replace(".dep",outputFileSuffix + ".dep");      output=new WhiteboxRaster(outputHeader,"rw",imageFiles[i],WhiteboxRaster.DataType.INTEGER,noData);      output.setPreferredPalette(image.getPreferredPalette());      double minValue=image.getMinimumValue();      double maxValue=image.getMaximumValue();      double binSize=(maxValue - minValue) / numBins;      long[] histogram=new long[numBins];      int binNum;      int numBinsLessOne=numBins - 1;      double[] data;      if (image.getDataScale() != WhiteboxRaster.DataScale.RGB) {        updateProgress("Loop 1 of 2:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              numCells++;              binNum=(int)((data[col] - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              histogram[binNum]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 1 of 2:",(int)progress);        }        double[] cdf=new double[numBins];        cdf[0]=histogram[0];        for (int j=1; j < numBins; j++) {          cdf[j]=cdf[j - 1] + histogram[j];        }        histogram=null;        updateProgress("Loop 2 of 2:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              binNum=(int)((data[col] - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              z=Math.round((cdf[binNum] - cdf[0]) / (numCells - cdf[0]) * numBinsLessOne);              output.setValue(row,col,z);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 2 of 2:",(int)progress);        }      } else {        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[i],WhiteboxRaster.DataType.FLOAT,noData);        output.setPreferredPalette(image.getPreferredPalette());        output.setDataScale(WhiteboxRaster.DataScale.RGB);        double h, s, v;        int a, r, g, b;        minValue=99999999;        maxValue=-99999999;        float[] hsbvals=new float[3];        float[] rgbvals=new float[3];        updateProgress("Loop 1 of 3:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              Color.RGBtoHSB(r,g,b,hsbvals);              v=hsbvals[2];              if (v < minValue) {                minValue=v;              }              if (v > maxValue) {                maxValue=v;              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 1 of 3:",(int)progress);        }        binSize=(maxValue - minValue) / numBins;        histogram=new long[numBins];        numBinsLessOne=numBins - 1;        updateProgress("Loop 2 of 3:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              Color.RGBtoHSB(r,g,b,hsbvals);              v=hsbvals[2];              numCells++;              binNum=(int)((v - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              histogram[binNum]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 2 of 3:",(int)progress);        }        double[] cdf=new double[numBins];        cdf[0]=histogram[0];        for (int j=1; j < numBins; j++) {          cdf[j]=cdf[j - 1] + histogram[j];        }        histogram=null;        updateProgress("Loop 3 of 3:",0);        float val=0;        int rgb=0;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              z=data[col];              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              a=((int)data[col] >> 24) & 0xFF;              hsbvals=Color.RGBtoHSB(r,g,b,null);              v=hsbvals[2];              binNum=(int)((v - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              val=(float)((cdf[binNum] - cdf[0]) / (numCells - cdf[0]));              rgb=Color.HSBtoRGB(hsbvals[0],hsbvals[1],val);              r=(rgb >> 16) & 0xFF;              g=(rgb >> 8) & 0xFF;              b=rgb & 0xFF;              z=(double)((a << 24) | (b << 16) | (g << 8)| r);              output.setValue(row,col,z);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 3 of 3:",(int)progress);        }      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      image.close();      output.close();      returnData(outputHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private String nextToInternal(String excluded){  int start=pos;  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n' || excluded.indexOf(c) != -1) {      return in.substring(start,pos);    }  }  return in.substring(start);}  }
class C{  public BuiltinEventSpecItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected Anonymous_concreteMethodDeclaration_2_Impl(){  super();}  }
class C{  public void testGetCrossReferenceUsingInfoSchema() throws Exception {  if (versionMeetsMinimum(5,0,7)) {    this.stmt.executeUpdate("DROP TABLE IF EXISTS child");    this.stmt.executeUpdate("DROP TABLE If EXISTS parent");    this.stmt.executeUpdate("CREATE TABLE parent(id INT NOT NULL, PRIMARY KEY (id)) ENGINE=INNODB");    this.stmt.executeUpdate("CREATE TABLE child(id INT, parent_id INT, " + "FOREIGN KEY (parent_id) REFERENCES parent(id) ON DELETE SET NULL) ENGINE=INNODB");    Properties props=new Properties();    props.put("useInformationSchema","true");    Connection conn1=null;    try {      conn1=getConnectionWithProps(props);      DatabaseMetaData metaData=conn1.getMetaData();      this.rs=metaData.getCrossReference(null,null,"parent",null,null,"child");      this.rs.next();      assertEquals("parent",this.rs.getString("PKTABLE_NAME"));      assertEquals("id",this.rs.getString("PKCOLUMN_NAME"));      assertEquals("child",this.rs.getString("FKTABLE_NAME"));      assertEquals("parent_id",this.rs.getString("FKCOLUMN_NAME"));    }  finally {      this.stmt.executeUpdate("DROP TABLE IF EXISTS child");      this.stmt.executeUpdate("DROP TABLE If EXISTS parent");      if (conn1 != null) {        conn1.close();      }    }  }}  }
class C{  protected void fireColumnRemoved(TableColumnModelEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableColumnModelListener.class) {      ((TableColumnModelListener)listeners[i + 1]).columnRemoved(e);    }  }}  }
class C{  public TaxCustCategoryInfo(String id,String name){  m_sID=id;  m_sName=name;}  }
class C{  public void print(long lnum){  print(String.valueOf(lnum));}  }
class C{  private static CompilerAdviceAttribute readOneAttribute(StringTokenizer st){  int compiler, optLevel=-1;  try {    Atom cls=Atom.findOrCreateUnicodeAtom(st.nextToken());    Atom mth=Atom.findOrCreateUnicodeAtom(st.nextToken());    Atom sig=Atom.findOrCreateUnicodeAtom(st.nextToken());    compiler=Integer.parseInt(st.nextToken());    optLevel=Integer.parseInt(st.nextToken());    CompilerAdviceAttribute newAttrib;    if (optLevel >= 0) {      newAttrib=new CompilerAdviceAttribute(cls,mth,sig,compiler,optLevel);    } else {      newAttrib=new CompilerAdviceAttribute(cls,mth,sig,compiler);    }    return newAttrib;  } catch (  NoSuchElementException e) {    return null;  }}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof MultiPhrasePrefixQuery))   return false;  MultiPhrasePrefixQuery other=(MultiPhrasePrefixQuery)o;  return this.getBoost() == other.getBoost() && this.slop == other.slop && termArraysEquals(this.termArrays,other.termArrays) && this.positions.equals(other.positions);}  }
class C{  public static Bitmap rotate(Bitmap original,final int angle){  if ((angle % 360) == 0) {    return original;  }  final boolean dimensionsChanged=angle == 90 || angle == 270;  final int oldWidth=original.getWidth();  final int oldHeight=original.getHeight();  final int newWidth=dimensionsChanged ? oldHeight : oldWidth;  final int newHeight=dimensionsChanged ? oldWidth : oldHeight;  Bitmap bitmap=Bitmap.createBitmap(newWidth,newHeight,original.getConfig());  Canvas canvas=new Canvas(bitmap);  Matrix matrix=new Matrix();  matrix.preTranslate((newWidth - oldWidth) / 2f,(newHeight - oldHeight) / 2f);  matrix.postRotate(angle,bitmap.getWidth() / 2f,bitmap.getHeight() / 2);  canvas.drawBitmap(original,matrix,null);  original.recycle();  return bitmap;}  }
