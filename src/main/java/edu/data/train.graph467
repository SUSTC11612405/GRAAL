class C{  public Shape apply(V v){  Icon icon=iconMap.get(v);  if (icon != null && icon instanceof ImageIcon) {    Image image=((ImageIcon)icon).getImage();    Shape shape=(Shape)shapeMap.get(image);    if (shape == null) {      shape=ImageShapeUtils.getShape(image,30);      if (shape.getBounds().getWidth() > 0 && shape.getBounds().getHeight() > 0) {        int width=image.getWidth(null);        int height=image.getHeight(null);        AffineTransform transform=AffineTransform.getTranslateInstance(-width / 2,-height / 2);        shape=transform.createTransformedShape(shape);        shapeMap.put(image,shape);      }    }    return shape;  } else {    return delegate.apply(v);  }}  }
class C{  public Quagliarella(){  this(16);}  }
class C{  public static <T>LazyPQueueX<T> fromIterable(Reducer<PQueue<T>> collector,Iterable<T> it){  if (it instanceof LazyPQueueX)   return (LazyPQueueX<T>)it;  if (it instanceof PQueue)   return new LazyPQueueX<T>((PQueue<T>)it,collector);  return new LazyPQueueX<T>(Flux.fromIterable(it),collector);}  }
class C{  public void remove(String userId) throws ServerException {  requireNonNull(userId,"Required non-null user id");  preferenceDao.remove(userId);}  }
class C{  public boolean isSourceAvailable(){  return sourceAvailable;}  }
class C{  public boolean isFixedView(View v){{    ArrayList<FixedViewInfo> where=mHeaderViewInfos;    int len=where.size();    for (int i=0; i < len; ++i) {      FixedViewInfo info=where.get(i);      if (info.view == v) {        return true;      }    }  }{    ArrayList<FixedViewInfo> where=mFooterViewInfos;    int len=where.size();    for (int i=0; i < len; ++i) {      FixedViewInfo info=where.get(i);      if (info.view == v) {        return true;      }    }  }  return false;}  }
class C{  public boolean equals(Object other){  if (other == null || !(other instanceof GF2nPolynomialElement)) {    return false;  }  GF2nPolynomialElement otherElem=(GF2nPolynomialElement)other;  if (mField != otherElem.mField) {    if (!mField.getFieldPolynomial().equals(otherElem.mField.getFieldPolynomial())) {      return false;    }  }  return polynomial.equals(otherElem.polynomial);}  }
class C{  public boolean isZero(){  return value.isZero();}  }
class C{  public void stopMonitorApiCnx(Activity activity){  mClientsToNotify.remove(activity);}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  @Inline @Entrypoint public static double doubleFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_DOUBLE_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().doubleRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public OperationWorker(final TaskRequest request,final AsyncHttpClient client,final HttpPollerProcessor httpPollerProcessor){  super();  this.client=client;  this.request=request;  this.trueTargetNode=(request.getHostUniform() == null) ? request.getHost() : request.getHostUniform();  if (request.isPollable()) {    pollerData=new PollerData();    this.httpPollerProcessor=httpPollerProcessor;    logger.info("Request is Pollable: poller info: " + httpPollerProcessor.toString());  }}  }
class C{  public void addRow(Expression[] expr){  list.add(expr);}  }
class C{  public void send(final OutputStream os) throws IOException {  PacketOutputStream writeBuffer=(PacketOutputStream)os;  writeBuffer.startPacket(packetSeq);  final byte[] authData;switch (plugin) {case "":case DefaultAuthenticationProvider.MYSQL_NATIVE_PASSWORD:    try {      authData=Utils.encryptPassword(password,seed);      break;    } catch (    NoSuchAlgorithmException e) {      throw new RuntimeException("Could not use SHA-1, failing",e);    }case DefaultAuthenticationProvider.MYSQL_CLEAR_PASSWORD:  authData=password.getBytes();break;default :authData=new byte[0];}writeBuffer.writeInt((int)clientCapabilities).writeInt(1024 * 1024 * 1024).writeByte(serverLanguage);writeBuffer.writeBytes((byte)0,19).writeInt((int)(clientCapabilities >> 32));if (username == null || "".equals(username)) username=System.getProperty("user.name");writeBuffer.writeString(username).writeByte((byte)0);if ((clientCapabilities & MariaDbServerCapabilities.PLUGIN_AUTH_LENENC_CLIENT_DATA) != 0) {writeBuffer.writeFieldLength(authData.length).writeByteArray(authData);} else if ((clientCapabilities & MariaDbServerCapabilities.SECURE_CONNECTION) != 0) {writeBuffer.writeByte((byte)authData.length).writeByteArray(authData);} else {writeBuffer.writeByteArray(authData).writeByte((byte)0);}if ((clientCapabilities & MariaDbServerCapabilities.CONNECT_WITH_DB) != 0) {writeBuffer.writeString(database).writeByte((byte)0);}if ((clientCapabilities & MariaDbServerCapabilities.PLUGIN_AUTH) != 0) {writeBuffer.writeString(plugin).writeByte((byte)0);}if ((clientCapabilities & MariaDbServerCapabilities.CONNECT_ATTRS) != 0) {writeConnectAttributes(writeBuffer);}writeBuffer.finishPacketWithoutRelease(false);writeBuffer.releaseBuffer();}  }
class C{  public String toValue(){  return value;}  }
class C{  private static String[] norm(String path){  String[] elements=path.split("[/\\\\]");  ArrayList<String> stack=new ArrayList<String>();  for (  String e : elements) {    if (e.isEmpty() || e.equals("."))     continue;    if (e.equals("..")) {      if (!stack.isEmpty())       stack.remove(stack.size() - 1); else       return null;      continue;    }    stack.add(e);  }  return stack.toArray(new String[stack.size()]);}  }
class C{  protected boolean[] canTakeOptions(){  boolean[] result=new boolean[2];  print("options...");  if (m_Clusterer instanceof OptionHandler) {    println("yes");    if (m_Debug) {      println("\n=== Full report ===");      Enumeration<Option> enu=((OptionHandler)m_Clusterer).listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        print(option.synopsis() + "\n" + option.description()+ "\n");      }      println("\n");    }    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public boolean testPowerOfTwo(int testValue){  int a=1;  while (a < testValue) {    a<<=1;  }  if (testValue == a) {    return true;  }  return false;}  }
class C{  public MethodDeclaration createSetter(){  if (getVariables().size() != 1)   throw new IllegalStateException("You can use this only when the field declares only 1 variable name");  ClassOrInterfaceDeclaration parentClass=getParentNodeOfType(ClassOrInterfaceDeclaration.class);  EnumDeclaration parentEnum=getParentNodeOfType(EnumDeclaration.class);  if ((parentClass == null && parentEnum == null) || (parentClass != null && parentClass.isInterface()))   throw new IllegalStateException("You can use this only when the field is attached to a class or an enum");  VariableDeclarator variable=getVariables().get(0);  String fieldName=variable.getId().getName();  String fieldNameUpper=fieldName.toUpperCase().substring(0,1) + fieldName.substring(1,fieldName.length());  final MethodDeclaration setter;  if (parentClass != null)   setter=parentClass.addMethod("set" + fieldNameUpper,PUBLIC); else   setter=parentEnum.addMethod("set" + fieldNameUpper,PUBLIC);  setter.setType(VOID_TYPE);  setter.getParameters().add(new Parameter(variable.getType(),new VariableDeclaratorId(fieldName)));  BlockStmt blockStmt2=new BlockStmt();  setter.setBody(blockStmt2);  blockStmt2.addStatement(new AssignExpr(new NameExpr("this." + fieldName),new NameExpr(fieldName),Operator.assign));  return setter;}  }
class C{  public final SpaceEffGraphNode lastNode(){  return _lastNode;}  }
class C{  public static boolean isWindows81(){  return win81;}  }
class C{  protected void terminate(){  hasTerminated=true;  setEnabled(false);}  }
class C{  public void pushSAXLocatorNull(){  m_saxLocations.push(null);}  }
class C{  public Secret createSecret(String name,String content){  String hmac=cryptographer.computeHmac(content.getBytes(UTF_8));  if (hmac == null) {    throw new ContentEncodingException("Error encoding content in SecretFixture!");  }  String encryptedContent=cryptographer.encryptionKeyDerivedFrom(name).encrypt(content);  long id=secretDAO.createSecret(name,encryptedContent,hmac,"creator",ImmutableMap.of(),0,"",null,ImmutableMap.of());  return transformer.transform(secretDAO.getSecretById(id).get());}  }
class C{  private int count(Database conn) throws SQLException {  Statement stmt=null;  ResultSet res=null;  int taskRows=0;  try {    stmt=conn.createStatement();    res=stmt.executeQuery(allSeqnoQuery);    while (res.next()) {      taskRows++;    }  }  finally {    connectionManager.close(res);    connectionManager.close(stmt);  }  return taskRows;}  }
class C{  public static CmdLine defineCommand(final String nameArgs){  Validate.defineString(nameArgs).testNotNullEmpty().testMaxLength(CmdLine.MAX_LENGTH).throwExceptionOnFailedValidation().validate();  final String[] nameArgTokens=nameArgs.split(CmdLine.DEFINED_COMMAND_REGEX_PARSE_PATTERN);  CmdLine.defineCommand(nameArgTokens);  return (CmdLine.INSTANCE);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.314 -0500",hash_original_method="28715ED51BABD0145D8C6E4EC8A7426B",hash_generated_method="A5AEC7C9FB9724C8F7496171A4624E6F") public boolean match(Object other){  if (!this.getClass().equals(other.getClass()))   return false;  GenericObjectList that=(GenericObjectList)other;  ListIterator hisIterator=that.listIterator();  outer:   while (hisIterator.hasNext()) {    Object hisobj=hisIterator.next();    Object myobj=null;    ListIterator myIterator=this.listIterator();    while (myIterator.hasNext()) {      myobj=myIterator.next();      if (myobj instanceof GenericObject)       System.out.println("Trying to match  = " + ((GenericObject)myobj).encode());      if (GenericObject.isMySubclass(myobj.getClass()) && ((GenericObject)myobj).match(hisobj))       break outer; else       if (GenericObjectList.isMySubclass(myobj.getClass()) && ((GenericObjectList)myobj).match(hisobj))       break outer;    }    System.out.println(((GenericObject)hisobj).encode());    return false;  }  return true;}  }
class C{  public void trim(){  for (  String key : keyNames()) {    String value=(String)properties.get(key);    if (value != null)     properties.put(key,value.trim());  }}  }
class C{  public static void deleteDbFiles(File dbFile){  dbFile.delete();  new File(dbFile + "-journal").delete();}  }
class C{  public synchronized void clear(){  cookies.clear();}  }
class C{  private void showMainActivityActionItems(MenuInflater inflater,Menu menu){  getMenu().clear();  inflater=getMenuInflater();  inflater.inflate(R.menu.main_activity,menu);  getActionBar().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(mContext));  getActionBar().setDisplayShowTitleEnabled(true);  getActionBar().setDisplayUseLogoEnabled(false);  getActionBar().setHomeButtonEnabled(true);  int actionBarTitleId=Resources.getSystem().getIdentifier("action_bar_title","id","android");  if (actionBarTitleId > 0) {    TextView title=(TextView)findViewById(actionBarTitleId);    if (title != null) {      title.setTextColor(0xFFFFFFFF);    }  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  this.resource=ResourceBundle.getBundle(baseName,locale);}  }
class C{  public static void showAddressOnMap(Context mContext,String address){  address=address.replace(' ','+');  Intent geoIntent=new Intent(Intent.ACTION_VIEW,Uri.parse("geo:0,0?q=" + address));  mContext.startActivity(geoIntent);}  }
class C{  protected void specificProcessing(StorageSystem storageSystem,DbClient dbClient,WBEMClient client,Volume volume,CIMInstance volumeInstance,CIMObjectPath volumePath){  String elementName=CIMPropertyFactory.getPropertyValue(volumeInstance,SmisConstants.CP_ELEMENT_NAME);  volume.setDeviceLabel(elementName);  volume.setCompressionRatio(SmisUtils.getCompressionRatioForVolume(volumeInstance));}  }
class C{  public static int[][] duplicateMatrix(int[][] src){  int[][] dest=new int[src.length][];  for (int r=0; r < src.length; r++) {    dest[r]=new int[src[r].length];    System.arraycopy(src[r],0,dest[r],0,src[r].length);  }  return dest;}  }
class C{  protected void encodeBasic(Element element,Object obj,Class<?> runtimeType){  element.setTextContent(obj == null ? NULL_VALUE : obj.toString());}  }
class C{  public DefaultClientWebRequestBuilder header(String name,String... values){  Arrays.stream(values).forEach(null);  return this;}  }
class C{  @Override public final boolean sendValues(){  return true;}  }
class C{  public static String escape(String string){  char c;  String s=string.trim();  int length=s.length();  StringBuilder sb=new StringBuilder(length);  for (int i=0; i < length; i+=1) {    c=s.charAt(i);    if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {      sb.append('%');      sb.append(Character.forDigit((char)((c >>> 4) & 0x0f),16));      sb.append(Character.forDigit((char)(c & 0x0f),16));    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public static String encodeWithinPath(final String unescaped,final String charset) throws URIException {  return encode(unescaped,URI.allowed_within_path,charset);}  }
class C{  public static void atled(int[] a,int offset,int len){  a[offset]--;  for (int i=offset + 1; i < offset + len; ++i) {    a[i]+=a[i - 1];  }}  }
class C{  public static byte[] readFileAsByteArray(String absolutePath) throws IOException {  return new FileReader(absolutePath).readFully().toByteArray();}  }
class C{  public static Icon resize(Icon icon,int width,int height){  Image image=getImage(icon);  if (image == null)   return icon;  image=image.getScaledInstance(width,height,Image.SCALE_SMOOTH);  return new ImageIcon(image);}  }
class C{  public void notifyFunctionLockableChanged(int functionNumber,boolean isLockable){  if (mThrottle == null) {    if (log.isDebugEnabled()) {      log.debug("throttle pointer null in notifyFunctionLockableChanged");    }    return;  }switch (functionNumber) {case 0:    mThrottle.setF0Momentary(!isLockable);  break;case 1:mThrottle.setF1Momentary(!isLockable);break;case 2:mThrottle.setF2Momentary(!isLockable);break;case 3:mThrottle.setF3Momentary(!isLockable);break;case 4:mThrottle.setF4Momentary(!isLockable);break;case 5:mThrottle.setF5Momentary(!isLockable);break;case 6:mThrottle.setF6Momentary(!isLockable);break;case 7:mThrottle.setF7Momentary(!isLockable);break;case 8:mThrottle.setF8Momentary(!isLockable);break;case 9:mThrottle.setF9Momentary(!isLockable);break;case 10:mThrottle.setF10Momentary(!isLockable);break;case 11:mThrottle.setF11Momentary(!isLockable);break;case 12:mThrottle.setF12Momentary(!isLockable);break;case 13:mThrottle.setF13Momentary(!isLockable);break;case 14:mThrottle.setF14Momentary(!isLockable);break;case 15:mThrottle.setF15Momentary(!isLockable);break;case 16:mThrottle.setF16Momentary(!isLockable);break;case 17:mThrottle.setF17Momentary(!isLockable);break;case 18:mThrottle.setF18Momentary(!isLockable);break;case 19:mThrottle.setF19Momentary(!isLockable);break;case 20:mThrottle.setF20Momentary(!isLockable);break;case 21:mThrottle.setF21Momentary(!isLockable);break;case 22:mThrottle.setF22Momentary(!isLockable);break;case 23:mThrottle.setF23Momentary(!isLockable);break;case 24:mThrottle.setF24Momentary(!isLockable);break;case 25:mThrottle.setF25Momentary(!isLockable);break;case 26:mThrottle.setF26Momentary(!isLockable);break;case 27:mThrottle.setF27Momentary(!isLockable);break;case 28:mThrottle.setF28Momentary(!isLockable);break;default :break;}}  }
class C{  private Object executeExponent(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return Integer.valueOf(Caster.toIntValue(executeExp(pc,sql,qr,expression.getOperand(0),row)) ^ Caster.toIntValue(executeExp(pc,sql,qr,expression.getOperand(1),row)));}  }
class C{  public void skipOptionalCall() throws IOException {  int tag=read();  if (tag == 'c') {    read();    read();  } else   _peek=tag;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'USER_DB' ("+ "'_id' INTEGER PRIMARY KEY NOT NULL ,"+ "'EMAIL' TEXT NOT NULL ,"+ "'KEY' TEXT NOT NULL ,"+ "'NAME' TEXT NOT NULL ,"+ "'IS_LAST_LOGIN' INTEGER NOT NULL );");}  }
class C{  public GetRequest id(String id){  this.id=id;  return this;}  }
class C{  public void ignoreUser(InstagramAPIResponseCallback<IGRelationship> callback,String userId){  updateRelationShip(callback,InstagramKitConstants.kRelationshipActionIgnore,userId);}  }
class C{  public boolean hasMuchoStuff(){  return fieldSetFlags()[2];}  }
class C{  public static void sort(short[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public static void rethrow(Throwable t){  Rethrow.<Error>rethrow0(t);}  }
class C{  private String validateEntriesParentsBeforeChildren(RequestAndResponse requestAndResponse,String[] idsToValidate,LinkedList<EntryAndIsFromList> validatedEntriesList) throws ServletException, IOException {  final HashSet<String> validatedIdsSet=new HashSet<String>();  for (int i=idsToValidate.length - 1; i >= 0; --i) {    final String[] idToValidateArray=idsToValidate[i].split(":");    final String idToValidate=idToValidateArray[idToValidateArray.length == 1 ? 0 : 1];    final boolean isFromList=idToValidateArray.length != 1;    if (!dbLogic.getIdGenerator().isIdWellFormed(idToValidate)) {      return servletText.errorIdIsInvalidFormat();    }    final Entry movedEntry=dbLogic.getEntryById(idToValidate);    if (movedEntry == null) {      return servletText.errorEntryCouldNotBeFound();    }    if (validatedIdsSet.contains(idToValidate)) {      return servletText.errorDuplicateEntry();    }    validatedIdsSet.add(idToValidate);    final Entry oldParentOfMovedEntry=dbLogic.getEntryById(movedEntry.getParentId());    if (oldParentOfMovedEntry != null && validatedIdsSet.contains(oldParentOfMovedEntry.getId())) {      servletText.errorParentMustBeMovedBeforeChild();    }    validatedEntriesList.addFirst(new EntryAndIsFromList(movedEntry,isFromList));  }  return null;}  }
class C{  public Fits(String filename,boolean compressed) throws FitsException {  if (filename == null) {    throw new FitsException("Null FITS Identifier String");  }  try {    File fil=new File(filename);    if (fil.exists()) {      fileInit(fil,compressed);      return;    }  } catch (  Exception e) {    LOG.log(Level.FINE,"not a file " + filename,e);  }  try {    InputStream str=Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);    if (str != null) {      streamInit(str);      return;    }  } catch (  Exception e) {    LOG.log(Level.FINE,"not a resource " + filename,e);  }  try {    InputStream is=FitsUtil.getURLStream(new URL(filename),0);    streamInit(is);    return;  } catch (  Exception e) {    LOG.log(Level.FINE,"not a url " + filename,e);  }  throw new FitsException("could not detect type of " + filename);}  }
class C{  public void contextualDecrementSelectedObjects(){  for (  PNode node : getSelection()) {    if (node instanceof NeuronNode) {      NeuronNode neuronNode=(NeuronNode)node;      neuronNode.getNeuron().getUpdateRule().contextualDecrement(neuronNode.getNeuron());    }  }}  }
class C{  @Override public Message<?> preSend(Message<?> message,MessageChannel channel){  return MessageBuilder.fromMessage(message).setHeader(Span.SAMPLED_NAME,Span.SPAN_NOT_SAMPLED).build();}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public void initWithContext(URI uri,Context ctx,SpeechConfiguration sc){  this.setHostURL(uri);  this.appCtx=ctx;  this.sConfig=sc;}  }
class C{  public RaceGUI(String appName){  UIManager.put("swing.boldMetal",Boolean.FALSE);  JFrame f=new JFrame(appName);  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.setLayout(new BorderLayout());  track=new TrackView();  f.add(track,BorderLayout.CENTER);  controlPanel=new RaceControlPanel();  f.add(controlPanel,BorderLayout.SOUTH);  f.pack();  f.setVisible(true);}  }
class C{  public SWFText tagDefineText2(int id,Rect bounds,Matrix matrix) throws IOException {  return new TextDumper();}  }
class C{  @SuppressWarnings("unchecked") public synchronized E peek(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public static boolean noUpdates(){  if (Mekanism.latestVersionNumber.contains("null")) {    return true;  }  if (Mekanism.versionNumber.comparedState(Version.get(Mekanism.latestVersionNumber)) == -1) {    return false;  }  for (  IModule module : Mekanism.modulesLoaded) {    if (module.getVersion().comparedState(Version.get(Mekanism.latestVersionNumber)) == -1) {      return false;    }  }  return true;}  }
class C{  public void testCertPathValidator03() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator certPV;  for (int i=0; i < validValues.length; i++) {    certPV=CertPathValidator.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);  }}  }
class C{  private void resizeWidgetIfNeeded(boolean onDismiss){  int xThreshold=mCellLayout.getCellWidth() + mCellLayout.getWidthGap();  int yThreshold=mCellLayout.getCellHeight() + mCellLayout.getHeightGap();  int deltaX=mDeltaX + mDeltaXAddOn;  int deltaY=mDeltaY + mDeltaYAddOn;  float hSpanIncF=1.0f * deltaX / xThreshold - mRunningHInc;  float vSpanIncF=1.0f * deltaY / yThreshold - mRunningVInc;  int hSpanInc=0;  int vSpanInc=0;  int cellXInc=0;  int cellYInc=0;  int countX=mCellLayout.getCountX();  int countY=mCellLayout.getCountY();  if (Math.abs(hSpanIncF) > RESIZE_THRESHOLD) {    hSpanInc=Math.round(hSpanIncF);  }  if (Math.abs(vSpanIncF) > RESIZE_THRESHOLD) {    vSpanInc=Math.round(vSpanIncF);  }  if (!onDismiss && (hSpanInc == 0 && vSpanInc == 0))   return;  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)mWidgetView.getLayoutParams();  int spanX=lp.cellHSpan;  int spanY=lp.cellVSpan;  int cellX=lp.useTmpCoords ? lp.tmpCellX : lp.cellX;  int cellY=lp.useTmpCoords ? lp.tmpCellY : lp.cellY;  int hSpanDelta=0;  int vSpanDelta=0;  if (mLeftBorderActive) {    cellXInc=Math.max(-cellX,hSpanInc);    cellXInc=Math.min(lp.cellHSpan - mMinHSpan,cellXInc);    hSpanInc*=-1;    hSpanInc=Math.min(cellX,hSpanInc);    hSpanInc=Math.max(-(lp.cellHSpan - mMinHSpan),hSpanInc);    hSpanDelta=-hSpanInc;  } else   if (mRightBorderActive) {    hSpanInc=Math.min(countX - (cellX + spanX),hSpanInc);    hSpanInc=Math.max(-(lp.cellHSpan - mMinHSpan),hSpanInc);    hSpanDelta=hSpanInc;  }  if (mTopBorderActive) {    cellYInc=Math.max(-cellY,vSpanInc);    cellYInc=Math.min(lp.cellVSpan - mMinVSpan,cellYInc);    vSpanInc*=-1;    vSpanInc=Math.min(cellY,vSpanInc);    vSpanInc=Math.max(-(lp.cellVSpan - mMinVSpan),vSpanInc);    vSpanDelta=-vSpanInc;  } else   if (mBottomBorderActive) {    vSpanInc=Math.min(countY - (cellY + spanY),vSpanInc);    vSpanInc=Math.max(-(lp.cellVSpan - mMinVSpan),vSpanInc);    vSpanDelta=vSpanInc;  }  mDirectionVector[0]=0;  mDirectionVector[1]=0;  if (mLeftBorderActive || mRightBorderActive) {    spanX+=hSpanInc;    cellX+=cellXInc;    if (hSpanDelta != 0) {      mDirectionVector[0]=mLeftBorderActive ? -1 : 1;    }  }  if (mTopBorderActive || mBottomBorderActive) {    spanY+=vSpanInc;    cellY+=cellYInc;    if (vSpanDelta != 0) {      mDirectionVector[1]=mTopBorderActive ? -1 : 1;    }  }  if (!onDismiss && vSpanDelta == 0 && hSpanDelta == 0)   return;  if (onDismiss) {    mDirectionVector[0]=mLastDirectionVector[0];    mDirectionVector[1]=mLastDirectionVector[1];  } else {    mLastDirectionVector[0]=mDirectionVector[0];    mLastDirectionVector[1]=mDirectionVector[1];  }  if (mCellLayout.createAreaForResize(cellX,cellY,spanX,spanY,mWidgetView,mDirectionVector,onDismiss)) {    if (mStateAnnouncer != null && (lp.cellHSpan != spanX || lp.cellVSpan != spanY)) {      mStateAnnouncer.announce(mLauncher.getString(R.string.widget_resized,spanX,spanY));    }    lp.tmpCellX=cellX;    lp.tmpCellY=cellY;    lp.cellHSpan=spanX;    lp.cellVSpan=spanY;    mRunningVInc+=vSpanDelta;    mRunningHInc+=hSpanDelta;    if (!onDismiss) {      updateWidgetSizeRanges(mWidgetView,mLauncher,spanX,spanY);    }  }  mWidgetView.requestLayout();}  }
class C{  private static String executeCommand(String command) throws IOException, InterruptedException {  StringBuilder output=new StringBuilder();  Process p;  p=Runtime.getRuntime().exec(command);  p.waitFor();  BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()));  String line="";  while ((line=reader.readLine()) != null) {    output.append(line).append("\n");  }  BufferedReader stdError=new BufferedReader(new InputStreamReader(p.getErrorStream()));  String errorLine="";  while ((errorLine=stdError.readLine()) != null) {    System.out.println(errorLine);  }  return output.toString();}  }
class C{  public void onIceCandidate(String endpointName,String candidate,int sdpMLineIndex,String sdpMid,String participantId) throws RoomException {  log.debug("Request [ICE_CANDIDATE] endpoint={} candidate={} " + "sdpMLineIdx={} sdpMid={} ({})",endpointName,candidate,sdpMLineIndex,sdpMid,participantId);  Participant participant=getParticipant(participantId);  participant.addIceCandidate(endpointName,new IceCandidate(candidate,sdpMid,sdpMLineIndex));}  }
class C{  protected double measureCartesianAngularOverlap(ComplexVector other){  toCartesian();  other.toCartesian();  double cumulativeCosine=0;  int nonZeroDimensionPairs=0;  for (int i=0; i < dimension * 2; i+=2) {    double resultThisPair=coordinates[i] * other.coordinates[i];    resultThisPair+=coordinates[i + 1] * other.coordinates[i + 1];    double norm1=coordinates[i] * coordinates[i];    norm1+=coordinates[i + 1] * coordinates[i + 1];    double norm2=other.coordinates[i] * other.coordinates[i];    norm2+=other.coordinates[i + 1] * other.coordinates[i + 1];    norm1=Math.sqrt(norm1);    norm2=Math.sqrt(norm2);    if (norm1 > 0 && norm2 > 0) {      cumulativeCosine+=resultThisPair / (norm1 * norm2);      ++nonZeroDimensionPairs;    }  }  return (nonZeroDimensionPairs != 0) ? (cumulativeCosine / nonZeroDimensionPairs) : 0;}  }
class C{  public static ConstantNode forFloatingStamp(Stamp stamp,double value){  return forFloatingKind(stamp.getStackKind(),value);}  }
class C{  public GridifyArgumentAdapter(Class<?> cls,String mtdName,Class<?>[] types,Object[] params,Object target){  this.cls=cls;  this.mtdName=mtdName;  this.types=types;  this.params=params;  this.target=target;}  }
class C{  private Selectable doSelect(Selectable selectable,boolean multi){  if (!multi && !selectedItems.contains(selectable)) {    selectedItems.clear();  }  if (selectable != null) {    selectedItems.add(selectable);  }  if (selectable instanceof Component) {    ((Component)selectable).requestFocusInWindow();  }  repaint();  return selectable;}  }
class C{  public ProjectionComponent(final String name){  super(name);  projectionModel=new ProjectionModel();  initializeConsumers();  addListener();}  }
class C{  public final void clear(){  checkPoint=-1;  if (current_item > 0) {    for (int i=0; i < current_item; i++) {      items[i]=null;    }  } else {    for (int i=0; i < max_size; i++) {      items[i]=null;    }  }  current_item=0;}  }
class C{  public Uri.Builder buildUponBaseHostUrl(String... paths){  final Uri.Builder builder=Uri.parse(getBaseHostUrl()).buildUpon();  if (paths != null) {    for (    String p : paths) {      builder.appendPath(p);    }  }  return builder;}  }
class C{  public static boolean checkIfInitiatorsForRP(List<Initiator> initiatorList){  if (initiatorList == null) {    return false;  }  _log.debug("Checking Initiators to see if this is RP");  boolean isRP=true;  for (  Initiator initiator : initiatorList) {    if (!initiator.checkInternalFlags(Flag.RECOVERPOINT)) {      isRP=false;      break;    }  }  _log.debug("Are these RP initiators? " + (isRP ? "Yes!" : "No!"));  return isRP;}  }
class C{  @PostConstruct public void init(){  super.init("label.configuration.auth.header");  configurationEnabled=isConfigEnabled();  detailLayout=new VerticalLayout();  detailLayout.setImmediate(true);  final HorizontalLayout caRootAuthorityLayout=new HorizontalLayout();  caRootAuthorityLayout.setSpacing(true);  final Label caRootAuthorityLabel=new LabelBuilder().name("SSL Issuer Hash:").buildLabel();  caRootAuthorityLabel.setDescription("The SSL Issuer iRules.X509 hash, to validate against the controller request certifcate.");  caRootAuthorityLabel.setWidthUndefined();  caRootAuthorityTextField=new TextFieldBuilder().immediate(true).maxLengthAllowed(160).buildTextComponent();  caRootAuthorityTextField.setWidth("100%");  caRootAuthorityTextField.addTextChangeListener(null);  caRootAuthorityLayout.addComponent(caRootAuthorityLabel);  caRootAuthorityLayout.setExpandRatio(caRootAuthorityLabel,0);  caRootAuthorityLayout.addComponent(caRootAuthorityTextField);  caRootAuthorityLayout.setExpandRatio(caRootAuthorityTextField,1);  caRootAuthorityLayout.setWidth("100%");  detailLayout.addComponent(caRootAuthorityLayout);  if (isConfigEnabled()) {    caRootAuthorityTextField.setValue(getCaRootAuthorityValue());    setDetailVisible(true);  }}  }
class C{  public void debug(String msg,Throwable t){  log(Log.VERBOSE,msg,t);}  }
class C{  public void loadStreamConf(Optional<DistributedLogConfiguration> streamConfiguration){  if (!streamConfiguration.isPresent()) {    return;  }  ArrayList<Object> ignoredSettings=new ArrayList<Object>();  Iterator iterator=streamConfiguration.get().getKeys();  while (iterator.hasNext()) {    Object setting=iterator.next();    if (setting instanceof String && streamSettings.contains(setting)) {      String settingStr=(String)setting;      setProperty(settingStr,streamConfiguration.get().getProperty(settingStr));    } else {      ignoredSettings.add(setting);    }  }  if (LOG.isWarnEnabled() && !ignoredSettings.isEmpty()) {    LOG.warn("invalid stream configuration override(s): {}",StringUtils.join(ignoredSettings,";"));  }}  }
class C{  public int search(char[] text){  int m=pattern.length;  int n=text.length;  int skip;  for (int i=0; i <= n - m; i+=skip) {    skip=0;    for (int j=m - 1; j >= 0; j--) {      if (pattern[j] != text[i + j]) {        skip=Math.max(1,j - right[text[i + j]]);        break;      }    }    if (skip == 0)     return i;  }  return n;}  }
class C{  public static final Parameter base(){  return new Parameter(P_EC);}  }
class C{  public static double computeInterpolationFactor(double v,double x,double y){  return clamp((v - x) / (y - x),0d,1d);}  }
class C{  private Round(Round prev,Set<JavaFileObject> newSourceFiles,Map<String,JavaFileObject> newClassFiles){  this(prev.nextContext(),prev.number + 1,prev.compiler.log.nerrors,prev.compiler.log.nwarnings,null);  this.genClassFiles=prev.genClassFiles;  List<JCCompilationUnit> parsedFiles=compiler.parseFiles(newSourceFiles);  roots=cleanTrees(prev.roots).appendList(parsedFiles);  if (unrecoverableError())   return;  enterClassFiles(genClassFiles);  List<ClassSymbol> newClasses=enterClassFiles(newClassFiles);  genClassFiles.putAll(newClassFiles);  enterTrees(roots);  if (unrecoverableError())   return;  topLevelClasses=join(getTopLevelClasses(parsedFiles),getTopLevelClassesFromClasses(newClasses));  packageInfoFiles=join(getPackageInfoFiles(parsedFiles),getPackageInfoFilesFromClasses(newClasses));  findAnnotationsPresent();}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  protected void onPostExecute(Uri imagePath){  Intent intent=MainActivity.makeDownloadCompleteIntent(imagePath);  LocalBroadcastManager.getInstance(DownloadImageActivity.this).sendBroadcast(intent);  Log.d(TAG,"onPostExecute() finishing activity");  DownloadImageActivity.this.finish();}  }
class C{  protected void blockDrawerFromOpening(){  DrawerLayout drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);  if (drawerLayout != null) {    drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);  }}  }
class C{  public void addSequence(GenericClass clazz,TestCase sequence){  ObjectSequence seq=new ObjectSequence(clazz,sequence);  addSequence(seq);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize >> 1;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public boolean replace(int key,E oldValue,E newValue){  if (oldValue == null || newValue == null || array.length <= key) {    return false;  }  E prev=(E)array[key];  if (prev.equals(oldValue)) {    array[key]=newValue;    size++;    return true;  }  return false;}  }
class C{  public OneVSOne(Classifier baseClassifier,boolean concurrentTrain){  this.baseClassifier=baseClassifier;  this.concurrentTrain=concurrentTrain;}  }
class C{  @Override @Pure public void instantiate(){}  }
class C{  protected void parseDefineSound(InStream in) throws IOException {  int id=in.readUI16();  int format=(int)in.readUBits(4);  int frequency=(int)in.readUBits(2);  boolean bits16=in.readUBits(1) != 0;  boolean stereo=in.readUBits(1) != 0;  int sampleCount=(int)in.readUI32();  byte[] soundData=in.read();  tagtypes.tagDefineSound(id,format,frequency,bits16,stereo,sampleCount,soundData);}  }
class C{  public PdfBitmap(Bitmap image,int width,int height,int pdfX,int pdfY,int page,Type type){  this.image=image;  this.height=height;  this.width=width;  this.pdfX=pdfX;  this.pdfY=pdfY;  this.pageNumber=page;  this.type=type;  this.isRemovable=true;  this.metadata=new HashMap<>();}  }
class C{  public static TextUtils.TruncateAt parse(String ellipsizeName){  return parse(ellipsizeName,TextUtils.TruncateAt.END);}  }
class C{  public SmoothOverScroller(Context context){  this(context,null);}  }
class C{  private static boolean isURIString(String p_uric){  if (p_uric == null) {    return false;  }  int end=p_uric.length();  char testChar='\0';  for (int i=0; i < end; i++) {    testChar=p_uric.charAt(i);    if (testChar == '%') {      if (i + 2 >= end || !isHex(p_uric.charAt(i + 1)) || !isHex(p_uric.charAt(i + 2))) {        return false;      } else {        i+=2;        continue;      }    }    if (isReservedCharacter(testChar) || isUnreservedCharacter(testChar)) {      continue;    } else {      return false;    }  }  return true;}  }
class C{  void _addChild(final AbstractPage child){  assert isOverflowDirectory();  assert !isReadOnly();  final MutableDirectoryPageData pdata=(MutableDirectoryPageData)data;  for (int i=0; i < pdata.childAddr.length; i++) {    final AbstractPage aChild=childRefs[i] == null ? null : childRefs[i].get();    if (aChild == null && pdata.childAddr[i] == NULL) {      childRefs[i]=(Reference<AbstractPage>)child.self;      assert !child.isPersistent();      child.parent=(Reference<DirectoryPage>)self;      return;    }  }  final DirectoryPage pd=getParentDirectory();  if (pd.isOverflowDirectory()) {    assert false;  } else {    final DirectoryPage blob=new DirectoryPage((HTree)htree,getOverflowKey(),getOverflowPageDepth());    blob._addChild(this);    blob._addChild(child);    pd.replaceChildRef(this.self,blob);    if (INFO)     log.info("New Overflow Level: " + getLevel());  }}  }
class C{  protected SVGOMFEFuncRElement(){}  }
class C{  public EdgeNGramTokenFilter(TokenStream input,int minGram,int maxGram){  super(input);  if (minGram < 1) {    throw new IllegalArgumentException("minGram must be greater than zero");  }  if (minGram > maxGram) {    throw new IllegalArgumentException("minGram must not be greater than maxGram");  }  this.minGram=minGram;  this.maxGram=maxGram;}  }
class C{  public void addActionListener(ActionListener l){  dispatcher.addListener(l);}  }
class C{  @Override public final int read() throws IOException {  return Util.readSingleByte(this);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  ButterKnife.bind(this);}  }
class C{  public void init(Controller c){  super.init(c);  display=new Display2D(ForagingHoneyBeeSimulation.WIDTH,ForagingHoneyBeeSimulation.HEIGHT,this,1);  displayFrame=display.createFrame();  displayFrame.setTitle("Honey bee playground");  c.registerFrame(displayFrame);  displayFrame.setVisible(true);  display.attach(vidPortrayal,"Agents");  display.setInterval(1);  initGraphDisplays(c);}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  XYChart chart=getXYChart(seriesIndex);  chart.drawLegendShape(canvas,renderer,x,y,getChartSeriesIndex(seriesIndex),paint);}  }
class C{  public void unregisterGatewayEventListener(AsyncEventListener listener){synchronized (eventLock) {    List<AsyncEventListener> oldListeners=this.eventListeners;    if (oldListeners.contains(listener)) {      List<AsyncEventListener> newListeners=new ArrayList<AsyncEventListener>(oldListeners);      if (newListeners.remove(listener)) {        this.eventListeners=newListeners;      }    }  }}  }
class C{  public TextFieldBorder(SeaglassUI ui,Insets insets){  super(ui,insets);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void mousePress(int x,int y,int mouseButton){  mouseX=x;  mouseY=y;  timestamp=System.currentTimeMillis();  velocity=0;  amplitude=0;}  }
class C{  public void show(RenameRefactoringSession renameRefactoringSession){  this.renameRefactoringSession=renameRefactoringSession;  prepareWizard();switch (renameRefactoringSession.getWizardType()) {case COMPILATION_UNIT:    view.setTitle(locale.renameCompilationUnitTitle());  view.setVisiblePatternsPanel(true);view.setVisibleFullQualifiedNamePanel(true);view.setVisibleSimilarlyVariablesPanel(true);break;case PACKAGE:view.setTitle(locale.renamePackageTitle());view.setVisiblePatternsPanel(true);view.setVisibleFullQualifiedNamePanel(true);view.setVisibleRenameSubpackagesPanel(true);break;case TYPE:view.setTitle(locale.renameTypeTitle());view.setVisiblePatternsPanel(true);view.setVisibleFullQualifiedNamePanel(true);view.setVisibleSimilarlyVariablesPanel(true);break;case FIELD:view.setTitle(locale.renameFieldTitle());view.setVisiblePatternsPanel(true);break;case ENUM_CONSTANT:view.setTitle(locale.renameEnumTitle());view.setVisiblePatternsPanel(true);break;case TYPE_PARAMETER:view.setTitle(locale.renameTypeVariableTitle());break;case METHOD:view.setTitle(locale.renameMethodTitle());view.setVisibleKeepOriginalPanel(true);break;case LOCAL_VARIABLE:view.setTitle(locale.renameLocalVariableTitle());break;default :}view.show();}  }
class C{  public Message(String content,double priority){  this.content=content;  this.priority=priority;}  }
class C{  public static double convertLatOrLongToDouble(Rational[] coordinate,String reference){  try {    double degrees=coordinate[0].toDouble();    double minutes=coordinate[1].toDouble();    double seconds=coordinate[2].toDouble();    double result=degrees + minutes / 60.0 + seconds / 3600.0;    if ((reference.equals("S") || reference.equals("W"))) {      return -result;    }    return result;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException();  }}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),pATimeStamp.asn1Encode());  if (pAUSec != null) {    temp=new DerOutputStream();    temp.putInteger(BigInteger.valueOf(pAUSec.intValue()));    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  }  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public static Map<String,Object> createContentMethod(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  context.put("entityOperation","_CREATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_CREATE");  if (Debug.infoOn())   Debug.logInfo("in createContentMethod, targetOperationList: " + targetOperationList,null);  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  String contentId=(String)context.get("contentId");  if (UtilValidate.isEmpty(contentId)) {    contentId=delegator.getNextSeqId("Content");  }  GenericValue content=delegator.makeValue("Content",UtilMisc.toMap("contentId",contentId));  content.setNonPKFields(context);  GenericValue userLogin=(GenericValue)context.get("userLogin");  String userLoginId=(String)userLogin.get("userLoginId");  if (UtilValidate.isEmpty(context.get("statusId"))) {    try {      GenericValue statusItem=EntityQuery.use(delegator).from("StatusItem").where("statusTypeId","CONTENT_STATUS").orderBy("sequenceId").queryFirst();      if (statusItem != null) {        content.put("statusId",statusItem.get("statusId"));      }    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(e.getMessage());    }  }  content.put("createdByUserLogin",userLoginId);  content.put("lastModifiedByUserLogin",userLoginId);  content.put("createdDate",nowTimestamp);  content.put("lastModifiedDate",nowTimestamp);  context.put("currentContent",content);  if (Debug.infoOn())   Debug.logInfo("in createContentMethod, context: " + context,null);  Map<String,Object> permResults=ContentWorker.callContentPermissionCheckResult(delegator,dispatcher,context);  String permissionStatus=(String)permResults.get("permissionStatus");  if (permissionStatus != null && permissionStatus.equalsIgnoreCase("granted")) {    try {      content.create();    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(e.getMessage());    }catch (    Exception e2) {      return ServiceUtil.returnError(e2.getMessage());    }    result.put("contentId",contentId);  } else {    String errorMsg=(String)permResults.get(ModelService.ERROR_MESSAGE);    result.put(ModelService.ERROR_MESSAGE,errorMsg);    return ServiceUtil.returnFailure(errorMsg);  }  context.remove("currentContent");  return result;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (modelList == null) {    throw new NullPointerException();  }  if (knowledge == null) {    throw new NullPointerException();  }}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int w,int h){  Graphics copy=g.create();  if (copy != null) {    try {      copy.translate(x,y);      paintLine(c,copy,w,h);    }  finally {      copy.dispose();    }  }}  }
class C{  @Override public void unregisterListener(RadioListener mRadioListener){  log("Register unregistered.");  mService.unregisterListener(mRadioListener);}  }
class C{  private double distance(Instance first,Instance second){  double diff, distance=0;  for (int i=0; i < m_instances.numAttributes(); i++) {    if (i == m_instances.classIndex()) {      continue;    }    double firstVal=m_globalMeansOrModes[i];    double secondVal=m_globalMeansOrModes[i];switch (m_instances.attribute(i).type()) {case Attribute.NUMERIC:      if (!first.isMissing(i)) {        firstVal=first.value(i);      }    if (!second.isMissing(i)) {      secondVal=second.value(i);    }  diff=norm(firstVal,i) - norm(secondVal,i);break;default :diff=0;break;}distance+=diff * diff;}return Math.sqrt(distance);}  }
class C{  private static Method findGetTopologyMethod(Object topologySource,String methodName) throws NoSuchMethodException {  Class clazz=topologySource.getClass();  Method[] methods=clazz.getMethods();  ArrayList<Method> candidates=new ArrayList<Method>();  for (  Method method : methods) {    if (!method.getName().equals(methodName)) {      continue;    }    if (!method.getReturnType().equals(StormTopology.class)) {      continue;    }    Class[] paramTypes=method.getParameterTypes();    if (paramTypes.length != 1) {      continue;    }    if (paramTypes[0].isAssignableFrom(Map.class) || paramTypes[0].isAssignableFrom(Config.class)) {      candidates.add(method);    }  }  if (candidates.size() == 0) {    throw new IllegalArgumentException("Unable to find method '" + methodName + "' method in class: "+ clazz.getName());  } else   if (candidates.size() > 1) {    LOG.warn("Found multiple candidate methods in class '" + clazz.getName() + "'. Using the first one found");  }  return candidates.get(0);}  }
class C{  public boolean checkSlotAndSize(@Nonnull IInventory inv,@Nullable IMultiItemStacks expected,int src){  final ItemStack actual=inv.getStackInSlot(src);  if (expected == null) {    if (actual != null)     return false;  } else {    if (actual == null)     return false;    if (!expected.containsItemStack(actual))     return false;    if (actual.stackSize < expected.getStackSize())     return false;  }  return true;}  }
class C{  public void write(String str,int off,int len) throws IOException {  internalOut.write(str,off,len);}  }
class C{  public static InputStream systemDotIn(){  return System.in;}  }
class C{  public void onMotion(MotionEvent event,Interaction iact){}  }
class C{  public void put(E e) throws InterruptedException {  checkNotNull(e);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length)     notFull.await();    enqueue(e);  }  finally {    lock.unlock();  }}  }
class C{  public void draw(Shape s){  Stroke stroke=gc.getStroke();  if (stroke instanceof BasicStroke) {    Element svgShape=shapeConverter.toSVG(s);    if (svgShape != null) {      domGroupManager.addElement(svgShape,DOMGroupManager.DRAW);    }  } else {    Shape strokedShape=stroke.createStrokedShape(s);    fill(strokedShape);  }}  }
class C{  public void tank(double leftSpeed,double rightSpeed){  leftSpeed=speedLimiter.applyAsDouble(leftSpeed);  rightSpeed=speedLimiter.applyAsDouble(rightSpeed);  left.setSpeed(leftSpeed);  right.setSpeed(rightSpeed);}  }
class C{  @Override public InputHandler copy(){  return new DefaultInputHandler(this);}  }
class C{  public void schedBowlGames(){  for (int i=0; i < teamList.size(); ++i) {    teamList.get(i).updatePollScore();  }  Collections.sort(teamList,new TeamCompPoll());  semiG14=new Game(teamList.get(0),teamList.get(3),"Semis, 1v4");  teamList.get(0).gameSchedule.add(semiG14);  teamList.get(3).gameSchedule.add(semiG14);  semiG23=new Game(teamList.get(1),teamList.get(2),"Semis, 2v3");  teamList.get(1).gameSchedule.add(semiG23);  teamList.get(2).gameSchedule.add(semiG23);  bowlGames[0]=new Game(teamList.get(4),teamList.get(6),bowlNames[0]);  teamList.get(4).gameSchedule.add(bowlGames[0]);  teamList.get(6).gameSchedule.add(bowlGames[0]);  bowlGames[1]=new Game(teamList.get(5),teamList.get(7),bowlNames[1]);  teamList.get(5).gameSchedule.add(bowlGames[1]);  teamList.get(7).gameSchedule.add(bowlGames[1]);  bowlGames[2]=new Game(teamList.get(8),teamList.get(14),bowlNames[2]);  teamList.get(8).gameSchedule.add(bowlGames[2]);  teamList.get(14).gameSchedule.add(bowlGames[2]);  bowlGames[3]=new Game(teamList.get(9),teamList.get(15),bowlNames[3]);  teamList.get(9).gameSchedule.add(bowlGames[3]);  teamList.get(15).gameSchedule.add(bowlGames[3]);  bowlGames[4]=new Game(teamList.get(10),teamList.get(11),bowlNames[4]);  teamList.get(10).gameSchedule.add(bowlGames[4]);  teamList.get(11).gameSchedule.add(bowlGames[4]);  bowlGames[5]=new Game(teamList.get(12),teamList.get(13),bowlNames[5]);  teamList.get(12).gameSchedule.add(bowlGames[5]);  teamList.get(13).gameSchedule.add(bowlGames[5]);  bowlGames[6]=new Game(teamList.get(16),teamList.get(20),bowlNames[6]);  teamList.get(16).gameSchedule.add(bowlGames[6]);  teamList.get(20).gameSchedule.add(bowlGames[6]);  bowlGames[7]=new Game(teamList.get(17),teamList.get(21),bowlNames[7]);  teamList.get(17).gameSchedule.add(bowlGames[7]);  teamList.get(21).gameSchedule.add(bowlGames[7]);  bowlGames[8]=new Game(teamList.get(18),teamList.get(22),bowlNames[8]);  teamList.get(18).gameSchedule.add(bowlGames[8]);  teamList.get(22).gameSchedule.add(bowlGames[8]);  bowlGames[9]=new Game(teamList.get(19),teamList.get(23),bowlNames[9]);  teamList.get(19).gameSchedule.add(bowlGames[9]);  teamList.get(23).gameSchedule.add(bowlGames[9]);  hasScheduledBowls=true;}  }
class C{  public Element(ElementType type,boolean defaultAttributes){  theType=type;  if (defaultAttributes)   theAtts=new AttributesImpl(type.atts()); else   theAtts=new AttributesImpl();  theNext=null;  preclosed=false;}  }
class C{  protected AbstractEvent retargetEvent(AbstractEvent e,NodeEventTarget target){  AbstractEvent clonedEvent=e.cloneEvent();  setTarget(clonedEvent,target);  return clonedEvent;}  }
class C{  protected void sequence_TypeRef_TypeRefWithModifiers_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void updatePhysicalInterval(Register p,CompoundInterval c,BasicInterval stop){  CompoundInterval physInterval=regAllocState.getInterval(p);  if (physInterval == null) {    regAllocState.setInterval(p,c.copy(p,stop));  } else {    if (VM.VerifyAssertions)     VM._assert(!c.intersects(physInterval));    stop=new BasicInterval(stop.getBegin(),stop.getEnd());    physInterval.addNonIntersectingInterval(c,stop);  }}  }
class C{  protected boolean isAssignable(AnnotatedTypeMirror varType,AnnotatedTypeMirror receiverType,Tree variable){  return true;}  }
class C{  public void releaseStreamAllocation() throws IOException {  streamAllocation.release();}  }
class C{  public void removeControllerListener(ControllerListener listener){  listeners.removeListener(listener);}  }
class C{  static JsonObject wrap(JobRegistryService.EventType evType,Job job){  JsonObject value=new JsonObject();  value.addProperty("time",(Number)System.currentTimeMillis());  value.addProperty("event",evType.toString());  JsonObject obj=new JsonObject();  obj.addProperty("id",job.getId());  obj.addProperty("name",job.getName());  obj.addProperty("state",job.getCurrentState().toString());  obj.addProperty("nextState",job.getNextState().toString());  obj.addProperty("health",job.getHealth().toString());  obj.addProperty("lastError",job.getLastError());  value.add("job",obj);  return value;}  }
class C{  public void namespaceAfterStartElement(String prefix,String uri) throws SAXException {  if (m_elemContext.m_elementURI == null) {    String prefix1=getPrefixPart(m_elemContext.m_elementName);    if (prefix1 == null && EMPTYSTRING.equals(prefix)) {      m_elemContext.m_elementURI=uri;    }  }  startPrefixMapping(prefix,uri,false);}  }
class C{  public String toStringX(Properties ctx){  String in=Msg.getMsg(ctx,"Include");  String ex=Msg.getMsg(ctx,"Exclude");  StringBuffer sb=new StringBuffer();  sb.append(Msg.translate(ctx,"AD_Table_ID")).append("=").append(getTableName(ctx));  if (ACCESSTYPERULE_Accessing.equals(getAccessTypeRule()))   sb.append(" - ").append(Msg.translate(ctx,"IsReadOnly")).append("=").append(isReadOnly()); else   if (ACCESSTYPERULE_Exporting.equals(getAccessTypeRule()))   sb.append(" - ").append(Msg.translate(ctx,"IsCanExport")).append("=").append(isCanExport()); else   if (ACCESSTYPERULE_Reporting.equals(getAccessTypeRule()))   sb.append(" - ").append(Msg.translate(ctx,"IsCanReport")).append("=").append(isCanReport());  sb.append(" - ").append(isExclude() ? ex : in);  return sb.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public DropDownTriangle(final UpDirection upState,final boolean down,final String upLabel,final String downLabel,final Window parent){  ddTriangle=new ClickableTriangle(upState,down);  upTriLabel=new JLabel(upLabel);  downTriLabel=new JLabel(downLabel);  this.parent=parent;  this.down=down;  this.setLayout(new BoxLayout(this,BoxLayout.X_AXIS));  initLayout();  addMouseListener(this);}  }
class C{  public static String clearLastViewedProducts(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  if (session != null) {    session.setAttribute("lastViewedProducts",FastList.newInstance());  }  return "success";}  }
class C{  @Override public void stopCq(String cqName,ClientProxyMembershipID clientId) throws CqException {  String serverCqName=cqName;  if (clientId != null) {    serverCqName=this.constructServerCqName(cqName,clientId);  }  ServerCQImpl cQuery=null;  StringId errMsg=null;  Exception ex=null;  try {    HashMap<String,CqQueryImpl> cqMap=cqQueryMap;    if (!cqMap.containsKey(serverCqName)) {      return;    }    cQuery=(ServerCQImpl)getCq(serverCqName);  } catch (  CacheLoaderException e1) {    errMsg=LocalizedStrings.CqService_CQ_NOT_FOUND_IN_THE_CQ_META_REGION_CQNAME_0;    ex=e1;  }catch (  TimeoutException e2) {    errMsg=LocalizedStrings.CqService_TIMEOUT_WHILE_TRYING_TO_GET_CQ_FROM_META_REGION_CQNAME_0;    ex=e2;  } finally {    if (ex != null) {      String s=errMsg.toLocalizedString(cqName);      if (logger.isDebugEnabled()) {        logger.debug(s);      }      throw new CqException(s,ex);    }  }  try {    if (!cQuery.isStopped()) {      cQuery.stop();    }  } catch (  CqClosedException cce) {    throw new CqException(cce.getMessage());  } finally {    this.removeFromMatchingCqMap(cQuery);  }  cQuery.getCqBaseRegion().getFilterProfile().stopCq(cQuery);}  }
class C{  private boolean isRunning(SystemMember member){  if (member instanceof ManagedEntity) {    return ((ManagedEntity)member).isRunning();  } else {    return true;  }}  }
class C{  private static int NewLongArray(JNIEnvironment env,int length){  if (traceJNI)   VM.sysWrite("JNI called: NewLongArray  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    long[] newArray=new long[length];    return env.pushJNIRef(newArray);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private void fillPicks() throws Exception {  Properties ctx=Env.getCtx();  MLookup resourceL=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(I_M_Product.Table_Name,"S_Resource_ID"),DisplayType.TableDir);  resource=new VLookup("S_Resource_ID",false,false,true,resourceL);}  }
class C{  @DSComment("Dalvik class method") @DSBan(DSCat.DALVIK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.732 -0500",hash_original_method="51AB769B18373F25E42ACAB5FC64B8CC",hash_generated_method="2F173EE517FB3C5BC94167DFC70EE753") public Enumeration<String> entries(){  return new DFEnum(this);}  }
class C{  public TomcatServiceBuilder baseDir(Path baseDir){  baseDir=requireNonNull(baseDir,"baseDir").toAbsolutePath();  if (!Files.isDirectory(baseDir)) {    throw new IllegalArgumentException("baseDir: " + baseDir + " (expected: a directory)");  }  this.baseDir=baseDir;  return this;}  }
class C{  public void complete(ITextViewer viewer,int completionPosition,ICompilationUnit compilationUnit){  IDocument document=viewer.getDocument();  if (!(fContextType instanceof CompilationUnitContextType))   return;  Point selection=viewer.getSelectedRange();  Position position=new Position(completionPosition,selection.y);  String selectedText=null;  if (selection.y != 0) {    try {      selectedText=document.get(selection.x,selection.y);      document.addPosition(position);      fPositions.put(document,position);    } catch (    BadLocationException e) {    }  }  CompilationUnitContext context=((CompilationUnitContextType)fContextType).createContext(document,position,compilationUnit);  context.setVariable("selection",selectedText);  int start=context.getStart();  int end=context.getEnd();  IRegion region=new Region(start,end - start);  Template[] templates=JavaPlugin.getDefault().getTemplateStore().getTemplates();  if (selection.y == 0) {    for (int i=0; i != templates.length; i++) {      Template template=templates[i];      if (context.canEvaluate(template)) {        fProposals.add(new TemplateProposal(template,context,region,getImage()));      }    }  } else {    if (context.getKey().length() == 0)     context.setForceEvaluation(true);    boolean multipleLinesSelected=areMultipleLinesSelected(viewer);    for (int i=0; i != templates.length; i++) {      Template template=templates[i];      if (context.canEvaluate(template) && (!multipleLinesSelected && template.getPattern().indexOf($_WORD_SELECTION) != -1 || (multipleLinesSelected && template.getPattern().indexOf($_LINE_SELECTION) != -1))) {        fProposals.add(new TemplateProposal(templates[i],context,region,getImage()));      }    }  }}  }
class C{  private BluetoothSocket(int type,int fd,boolean auth,boolean encrypt,String address,int port) throws IOException {  this(type,fd,auth,encrypt,new BluetoothDevice(address),port,null);}  }
class C{  public final double similarity(final boolean[] sig1,final boolean[] sig2){  double agg=0;  for (int i=0; i < sig1.length; i++) {    if (sig1[i] == sig2[i]) {      agg++;    }  }  agg=agg / sig1.length;  return Math.cos((1 - agg) * Math.PI);}  }
class C{  public UDAnimator cancel(){  AnimatorUtil.cancel(getAnimator());  if (mTarget != null) {    mTarget.cancelAnimation();  }  return this;}  }
class C{  protected boolean engineVerify(byte[] signature) throws SignatureException {  return engineVerify(signature,0,signature.length);}  }
class C{  public boolean isLaunchedAsService(){  return launchedAsService;}  }
class C{  Vect extractComponent(BEGraphNode node){  BEGraphNode node1=(BEGraphNode)comStack.pop();  if (node == node1 && !node.transExists(node)) {    node.setNumber(MAX_FIRST);    return null;  }  Vect nodes=new Vect();  numFirstCom=secondNum++;  numSecondCom=thirdNum;  node1.setNumber(numFirstCom);  nodes.addElement(node1);  while (node != node1) {    node1=(BEGraphNode)comStack.pop();    node1.setNumber(numFirstCom);    nodes.addElement(node1);  }  return nodes;}  }
class C{  public MultiGeneralAndersonDarlingTest(List<List<Double>> data,List<RealDistribution> distributions){  if (distributions == null) {    throw new NullPointerException();  }  this.distributions=distributions;  for (  List<Double> _data : data) {    Collections.sort(_data);  }  this.data=data;  runTest();}  }
class C{  public CPaper(double x,double y,int units,boolean landscape,double left,double top,double right,double bottom){  super();  setMediaSize(x,y,units,landscape);  setImageableArea(left,top,getWidth() - left - right,getHeight() - top - bottom);}  }
class C{  public static int compareTimestamps(final int a,final int b){  long diff=diffTimestamps(a,b);  return diff < 0 ? -1 : (diff > 0 ? 1 : 0);}  }
class C{  public static void main(String[] args){  try {    new Replier(args).run();  } catch (  Exception ex) {    System.err.println("Exception: " + ex.getMessage());    ex.printStackTrace();  } finally {    System.exit(0);  }}  }
class C{  public ClassDefinitionBuilder methods(List<MethodDefinitionBuilder> mdbs){  for (  MethodDefinitionBuilder mdb : mdbs) {    method(mdb);  }  return this;}  }
class C{  protected synchronized void rotate() throws IOException {  close();  final File file=m_fileStrategy.nextFile();  setFile(file,m_append);  openFile();}  }
class C{  public ASN1Primitive toASN1Primitive(){  return seq;}  }
class C{  public final void testValidateSucceeds(){  IRIValidator iriValidator=new IRIValidator("foo");  assertTrue(iriValidator.validate(""));  assertTrue(iriValidator.validate("http://www.foo.com"));  assertTrue(iriValidator.validate("http://www.foo123.com"));  assertTrue(iriValidator.validate("http://www.foo.com/bar/bar_2"));  assertTrue(iriValidator.validate("http://www.foo123.com/bar/bar_2"));  assertTrue(iriValidator.validate("http://foo.com"));  assertTrue(iriValidator.validate("http://foo123.com"));  assertTrue(iriValidator.validate("http://www.foo.com:8080"));  assertTrue(iriValidator.validate("http://www.foo123.com:8080"));  assertTrue(iriValidator.validate("http://www.foo.com.au"));  assertTrue(iriValidator.validate("http://www.foo123.com.au"));  assertTrue(iriValidator.validate("www.foo.com"));  assertTrue(iriValidator.validate("www.foo123.com"));}  }
class C{  @Override public Label conditionalJump(int index,Condition condition){  Label label;  if (conditionalLabelPointer <= conditionalLabels.size()) {    label=new Label();    conditionalLabels.add(label);    conditionalLabelPointer=conditionalLabels.size();  } else {    label=conditionalLabels.get(conditionalLabelPointer++);  }  conditionalJump(index,condition,label);  return label;}  }
class C{  public void addWhitelistURL(String URL){  serviceWhitelist.add(URL);}  }
class C{  @Override protected boolean isSplitable(JobContext context,Path filename){  RDFFormat rdfFormat=getRDFFormat(context);  if (RDFFormat.NTRIPLES.equals(rdfFormat) || RDFFormat.NQUADS.equals(rdfFormat)) {    return super.isSplitable(context,filename);  }  return false;}  }
class C{  @SuppressWarnings("unchecked") private Segment<K,V> ensureSegment(int k){  final Segment<K,V>[] ss=this.segments;  long u=(k << SSHIFT) + SBASE;  Segment<K,V> seg;  if ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {    Segment<K,V> proto=ss[0];    int cap=proto.table.length;    float lf=proto.loadFactor;    int threshold=(int)(cap * lf);    HashEntry<K,V>[] tab=(HashEntry<K,V>[])new HashEntry<?,?>[cap];    if ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {      Segment<K,V> s=new Segment<K,V>(lf,threshold,tab);      while ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {        if (UNSAFE.compareAndSwapObject(ss,u,null,seg=s))         break;      }    }  }  return seg;}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    StochasticOscillatorItem dataItem=(StochasticOscillatorItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Value: "+ dataItem.getStochasticOscillator());  }}  }
class C{  @SuppressWarnings("unchecked") private static void replacePlayerCape(AbstractClientPlayer player){  final String displayName=player.getDisplayNameString();  final NetworkPlayerInfo playerInfo;  try {    playerInfo=(NetworkPlayerInfo)GET_PLAYER_INFO.invokeExact(player);  } catch (  Throwable throwable) {    Logger.fatal(throwable,"Failed to get NetworkPlayerInfo of %s",displayName);    return;  }  if (playerInfo == null) {    Logger.fatal("NetworkPlayerInfo of %s is null",displayName);    return;  }  final Map<MinecraftProfileTexture.Type,ResourceLocation> playerTextures;  try {    playerTextures=(Map<MinecraftProfileTexture.Type,ResourceLocation>)GET_PLAYER_TEXTURES.invokeExact(playerInfo);  } catch (  Throwable throwable) {    Logger.fatal(throwable,"Failed to get player textures of %s",displayName);    return;  }  playerTextures.put(MinecraftProfileTexture.Type.CAPE,CAPE_LOCATION);  Logger.info("Replaced cape of %s!",displayName);}  }
class C{  static int parseTenthsOfSecond(String text) throws ParseException {  int pos=text.indexOf(".");  int lastPos=text.lastIndexOf(".");  if (pos != lastPos)   throw new ParseException(text,lastPos);  final int tenthsOfSecond;  if (pos == -1) {    int seconds=Integer.parseInt(text);    tenthsOfSecond=seconds * 10;  } else {    String secondsStr=text.substring(0,pos);    String tenthsStr=text.substring(pos + 1);    int seconds=Integer.parseInt(secondsStr);    int tenths=tenthsStr.length() == 0 ? 0 : Integer.parseInt(tenthsStr);    tenthsOfSecond=seconds * 10 + tenths;  }  return tenthsOfSecond;}  }
class C{  public void showTableItemControlDecoration(TableViewer tableViewer,Object data,String message){  if (null == tableViewer) {    return;  }  for (  TableItemControlDecoration decoration : tableItemControlDecorations) {    if (data == decoration.getData()) {      decoration.show();      decoration.setDescriptionText(message);      return;    }  }  for (  TableItem tableItem : tableViewer.getTable().getItems()) {    if (tableItem.getData() == data) {      TableItemControlDecoration decoration=new TableItemControlDecoration(tableItem);      decoration.show();      decoration.setDescriptionText(message);      tableItemControlDecorations.add(decoration);      return;    }  }}  }
class C{  public void removeUnusableGenerators(){  generatorCache.clear();  Set<GenericClass> removed=new LinkedHashSet<>();  for (  Map.Entry<GenericClass,Set<GenericAccessibleObject<?>>> entry : generators.entrySet()) {    if (entry.getValue().isEmpty()) {      recursiveRemoveGenerators(entry.getKey());    }    Set<GenericClass> toRemove=new LinkedHashSet<>();    for (    GenericAccessibleObject<?> gao : entry.getValue()) {      GenericClass owner=gao.getOwnerClass();      if (removed.contains(owner)) {        continue;      }      try {        cacheGenerators(owner);      } catch (      ConstructionFailedException e) {        continue;      }      if (generatorCache.get(owner).isEmpty()) {        toRemove.add(owner);      }    }    for (    GenericClass tr : toRemove) {      recursiveRemoveGenerators(tr);      removed.add(tr);    }  }  removeOnlySelfGenerator();  removeDirectCycle();  generatorCache.clear();}  }
class C{  protected boolean isLeaderInShard(String shardId){  return gondola.getShard(shardId).getLocalMember().isLeader();}  }
class C{  public EventType(String name,String description,EventAttribute attribute){  this(name,description,new EventAttribute[]{attribute});}  }
class C{  public void testXformLoadFailed_ShowsError(){  mController.init();  mFakeGlobalEventBus.post(new FetchXformFailedEvent(FetchXformFailedEvent.Reason.UNKNOWN));  verify(mMockUi).showError(R.string.fetch_xform_failed_unknown_reason);}  }
class C{  public T summary(String value){  return attr("summary",value);}  }
class C{  public static double[] toDoubleArray(short[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(double)array[i];  }  return result;}  }
class C{  protected void appendConfiguration(StringBuffer sb){  ConfigurationParameter[] params=this.getConfiguration();  for (int i=0; i < params.length; i++) {    ConfigurationParameter param=params[i];    if (!param.isModifiable()) {      continue;    }    String name=param.getName();    String value=param.getValueAsString();    if (value != null && !value.equals("")) {      if (name.equals(LOCATORS)) {        String locator=value;        int firstBracket=locator.indexOf('[');        int lastBracket=locator.indexOf(']');        if (firstBracket > -1 && lastBracket > -1) {          String host=locator.substring(0,firstBracket);          String port=locator.substring(firstBracket + 1,lastBracket);          locator=host + ":" + port;        }        sb.append(" ");        sb.append(name);        sb.append("=");        sb.append(locator);      } else {        sb.append(" ");        sb.append(name);        sb.append("=");        sb.append(value);      }    }  }}  }
class C{  protected MetadataImpl(){  super();}  }
class C{  private static byte charToByte(char c){  return (byte)"0123456789ABCDEF".indexOf(c);}  }
class C{  public void sortFromTo(int from,int to){  final int widthThreshold=10000;  if (size == 0)   return;  checkRangeFromTo(from,to,size);  char min=elements[from];  char max=elements[from];  char[] theElements=elements;  for (int i=from + 1; i <= to; ) {    char elem=theElements[i++];    if (elem > max)     max=elem; else     if (elem < min)     min=elem;  }  double N=(double)to - (double)from + 1.0;  double quickSortEstimate=N * Math.log(N) / 0.6931471805599453;  double width=(double)max - (double)min + 1.0;  double countSortEstimate=Math.max(width,N);  if (width < widthThreshold && countSortEstimate < quickSortEstimate) {    countSortFromTo(from,to,min,max);  } else {    quickSortFromTo(from,to);  }}  }
class C{  public void finaliseAddObservations(){  totalObservations=0;  for (  double[] currentObservation : vectorOfObservations) {    totalObservations+=currentObservation.length - k;  }  destPastVectors=new double[totalObservations][k];  destNextVectors=new double[totalObservations][1];  int startObservation=0;  for (  double[] currentObservation : vectorOfObservations) {    double[][] currentDestPastVectors=makeJointVectorForPast(currentObservation);    MatrixUtils.arrayCopy(currentDestPastVectors,0,0,destPastVectors,startObservation,0,currentDestPastVectors.length,k);    double[][] currentDestNextVectors=makeJointVectorForNext(currentObservation);    MatrixUtils.arrayCopy(currentDestNextVectors,0,0,destNextVectors,startObservation,0,currentDestNextVectors.length,1);    startObservation+=currentObservation.length - k;  }  try {    miKernel.setObservations(destPastVectors,destNextVectors);  } catch (  Exception e) {    throw new RuntimeException(e);  }  addedMoreThanOneObservationSet=vectorOfObservations.size() > 1;  vectorOfObservations=null;}  }
class C{  public static void checkGLError(String label){  int error;  while ((error=GLES20.glGetError()) != GLES20.GL_NO_ERROR) {    Log.e(TAG,label + ": glError " + error);    throw new RuntimeException(label + ": glError " + error);  }}  }
class C{  private void isElementIndex(int index){  if (index < 0 || index >= size) {    throw new IndexOutOfBoundsException("Index [" + index + "] must be less than size ["+ size+ "]");  }}  }
class C{  protected void validateManagerSameInstance(Locale countryLocale,HolidayCalendar countryCalendar){  Locale defaultLocale=Locale.getDefault();  Locale.setDefault(countryLocale);  try {    HolidayManager defaultManager=HolidayManager.getInstance();    HolidayManager countryManager=HolidayManager.getInstance(countryCalendar);    Assert.assertEquals("Unexpected manager found",defaultManager,countryManager);  } catch (  Exception e) {    Assert.fail("Unexpected error occurred: " + e.getClass().getName() + " - "+ e.getMessage());  } finally {    Locale.setDefault(defaultLocale);  }}  }
class C{  public static void main(String[] args){  Application app;  String os=System.getProperty("os.name").toLowerCase();  if (os.startsWith("mac")) {    app=new OSXApplication();  } else   if (os.startsWith("win")) {    app=new SDIApplication();  } else {    app=new SDIApplication();  }  DefaultApplicationModel model=new NetApplicationModel();  model.setName("JHotDraw Net");  model.setVersion(Main.class.getPackage().getImplementationVersion());  model.setCopyright("Copyright 2006-2010 (c) by the authors of JHotDraw and all its contributors.\n" + "This software is licensed under LGPL and Creative Commons 3.0 Attribution.");  model.setViewClassName("org.jhotdraw.samples.net.NetView");  app.setModel(model);  app.launch(args);}  }
class C{  public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return xctxt.getCurrentNode();}  }
class C{  protected void attemptGridStrokeSelection(){  StrokeChooserPanel panel=new StrokeChooserPanel(this.gridStrokeSample,this.availableStrokeSamples);  int result=JOptionPane.showConfirmDialog(this,panel,localizationResources.getString("Stroke_Selection"),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);  if (result == JOptionPane.OK_OPTION) {    this.gridStrokeSample.setStroke(panel.getSelectedStroke());  }}  }
class C{  private static Class<?> boxPrimatives(Class<?> type){  if (type == byte.class) {    return Byte.class;  } else   if (type == short.class) {    return Short.class;  } else   if (type == int.class) {    return Integer.class;  } else   if (type == long.class) {    return Long.class;  } else   if (type == float.class) {    return Float.class;  } else   if (type == double.class) {    return Double.class;  } else   if (type == char.class) {    return Character.class;  } else   if (type == boolean.class) {    return Boolean.class;  }  return type;}  }
class C{  public String buildImage(final BuildImageParams params,final ProgressMonitor progressMonitor) throws IOException {  if (params.getRemote() != null) {    DockerConnection dockerConnection=connectionFactory.openConnection(dockerDaemonUri).query("remote",params.getRemote());    return buildImage(dockerConnection,params,progressMonitor);  }  final File tar=Files.createTempFile(null,".tar").toFile();  try {    File[] files=new File[params.getFiles().size()];    files=params.getFiles().toArray(files);    createTarArchive(tar,files);    try (InputStream tarInput=new FileInputStream(tar)){      DockerConnection dockerConnection=connectionFactory.openConnection(dockerDaemonUri).header("Content-Type","application/x-compressed-tar").header("Content-Length",tar.length()).entity(tarInput);      return buildImage(dockerConnection,params,progressMonitor);    }   }  finally {    FileCleaner.addFile(tar);  }}  }
class C{  public void newProcessingInstruction(String target,Reader reader){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:02.476 -0500",hash_original_method="43F228216BAE54D0FCDF4DEA936A6994",hash_generated_method="2D27E6B01FD5503A17C0CE28F2EA1FAE") static public boolean isSyncEnabled(Context context){  Cursor cursor=null;  try {    cursor=context.getContentResolver().query(CONTENT_URI,new String[]{VALUE},KEY + "=?",new String[]{KEY_SYNC_ENABLED},null);    if (cursor == null || !cursor.moveToFirst()) {      return false;    }    return cursor.getInt(0) != 0;  }  finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public void start(){  thd=new Thread(this,"ConnectorHandler: initializing");  thd.start();}  }
class C{  @SuppressWarnings({"StringContatenationInLoop"}) protected static String[] determineStreamNames(StreamSpecCompiled[] streams){  String[] streamNames=new String[streams.length];  for (int i=0; i < streams.length; i++) {    streamNames[i]=streams[i].getOptionalStreamName();    if (streamNames[i] == null) {      streamNames[i]="stream_" + i;    }  }  return streamNames;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void add(Input key){synchronized (this.keys) {    this.keys.put(key.getEvent(),key);  }}  }
class C{  private static TextContainer parseTextContainer(TextContainer textContainer){  textContainer.setCurrentScale(1.0f).setCurrentColor(0x808080);  textContainer.registerTag(new FormatTags.TagNewLine());  textContainer.registerTag(new FormatTags.TagScale(1.0F));  textContainer.registerTag(new FormatTags.TagColor(0x808080));  textContainer.registerTag(new FormatTags.TagTooltip("N/A"));  textContainer.registerTag(new FormatTags.TagSimple("bold",ChatFormatting.BOLD));  textContainer.registerTag(new FormatTags.TagSimple("obfuscated",ChatFormatting.OBFUSCATED));  textContainer.registerTag(new FormatTags.TagSimple("italic",ChatFormatting.ITALIC));  textContainer.registerTag(new FormatTags.TagSimple("strikethrough",ChatFormatting.STRIKETHROUGH));  textContainer.registerTag(new FormatTags.TagSimple("underline",ChatFormatting.UNDERLINE));  textContainer.registerTag(new FormatTags.TagPagelink());  textContainer.registerTag(new FormatTags.TagRainbow());  try {    textContainer.parse();  } catch (  Exception e) {    e.printStackTrace();  }  return textContainer;}  }
class C{  public PKCS10Attribute(ObjectIdentifier attributeId,Object attributeValue){  this.attributeId=attributeId;  this.attributeValue=attributeValue;}  }
class C{  protected void figureOutChartSeriesForEntries(BinaryFile binFile) throws IOException, FormatException {  RpfTocEntry[] entriesAlreadyChecked=new RpfTocEntry[entries.length];  System.arraycopy(entries,0,entriesAlreadyChecked,0,entries.length);  for (int i=0; i < numFrameIndexRecords; i++) {    if (DEBUG_RPFTOCFRAMEDETAIL) {      Debug.output("RpfTocHandler: parseToc(): Read frame file index rec #: " + i);    }    binFile.seek(locations[3].componentLocation + indexRecordLength * i);    int boundaryId=(int)binFile.readShort();    if (DEBUG_RPFTOCFRAMEDETAIL) {      Debug.output("boundary id for frame: " + i + " is "+ boundaryId);    }    if (boundaryId > numBoundaries - 1) {      throw new FormatException("Bad boundary id in FF index record " + i);    }    RpfTocEntry entry=entriesAlreadyChecked[boundaryId];    if (entry == null) {      continue;    } else {      entriesAlreadyChecked[boundaryId]=null;    }    binFile.readShort();    binFile.readShort();    binFile.readInteger();    String filename=binFile.readFixedLengthString(12);    int dot=filename.lastIndexOf('.');    entry.setInfo(filename.substring(dot + 1,dot + 3).intern());  }}  }
class C{  public int editOperationsBaseline(){  return editOperationsBaseline;}  }
class C{  public void rebalanceNestedOperations(){  nestedOperations=preparedOperations;}  }
class C{  public boolean isInfoEnabled(){  return true;}  }
class C{  public boolean isWorkflow(){  return getAD_Workflow_ID() > 0;}  }
class C{  public long node(){  if (version() != 1) {    throw new UnsupportedOperationException("Not a time-based UUID");  }  return leastSigBits & 0x0000FFFFFFFFFFFFL;}  }
class C{  protected void afterAttachActions() throws SQLException {  getDatabaseInfo(getDescribeDatabaseInfoBlock(),1024,getDatabaseInformationProcessor());}  }
class C{  public void incThreadIdentifiers(){  this._stats.incInt(_threadIdentifiersId,1);}  }
class C{  public WebResource createWebResource(String serviceURL){  Client client=Client.create();  WebResource webResource=client.resource(serviceURL);  return webResource;}  }
class C{  public boolean hasAgent(){  return super.hasElement(Agent.KEY);}  }
class C{  public void abort(){  if (_inputStream != null) {    try {      _inputStream.close();    } catch (    Throwable e) {    }  }  if (_errorStream != null) {    try {      _errorStream.close();    } catch (    Throwable e) {    }  }  if (_process != null) {    try {      _process.destroy();    } catch (    Throwable e) {      log.log(Level.FINE,e.toString(),e);    }  }}  }
class C{  public static String toString(double M_[][]){  return toString(M_,2);}  }
class C{  public static BigDecimal allocated(int p_C_Payment_ID,int p_C_Currency_ID) throws SQLException {  BigDecimal PayAmt=null;  int C_Charge_ID=0;  String sql="SELECT PayAmt, C_Charge_ID " + "FROM C_Payment_v " + "WHERE C_Payment_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_Payment_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    PayAmt=rs.getBigDecimal(1);    C_Charge_ID=rs.getInt(2);  }  rs.close();  pstmt.close();  if (C_Charge_ID > 0)   return PayAmt;  int C_ConversionType_ID=0;  BigDecimal allocatedAmt=getAllocatedAmt(p_C_Payment_ID,p_C_Currency_ID,C_ConversionType_ID);  return Currency.round(allocatedAmt,p_C_Currency_ID,null);}  }
class C{  public CorrelationMatrix(ICovarianceMatrix matrix,boolean inPlace){  this(matrix.getVariables(),(inPlace ? matrix.getMatrix() : new CovarianceMatrix(matrix).getMatrix()),matrix.getSampleSize(),inPlace);}  }
class C{  @Override public int size(){  return this._set.size();}  }
class C{  public static void isGTE(String argName,long i,long min){  if (i < min) {    throw new IllegalArgumentException(String.format("%s must be >= %d; was %d",argName,min,i));  }}  }
class C{  public String toString(){  return ":" + getLocalName();}  }
class C{  public static CompiledScript compileScriptString(String language,String script) throws ScriptException {  Assert.notNull("language",language,"script",script);  String cacheKey=language.concat("://").concat(script);  CompiledScript compiledScript=parsedScripts.get(cacheKey);  if (compiledScript == null) {    ScriptEngineManager manager=new ScriptEngineManager();    ScriptEngine engine=manager.getEngineByName(language);    if (engine == null) {      throw new IllegalArgumentException("The script type is not supported for language: " + language);    }    try {      Compilable compilableEngine=(Compilable)engine;      compiledScript=compilableEngine.compile(script);      if (Debug.verboseOn()) {        Debug.logVerbose("Compiled script [" + script + "] using engine "+ engine.getClass().getName(),module);      }    } catch (    ClassCastException e) {      if (Debug.verboseOn()) {        Debug.logVerbose("Script engine " + engine.getClass().getName() + " does not implement Compilable",module);      }    }    if (compiledScript != null) {      parsedScripts.putIfAbsent(cacheKey,compiledScript);    }  }  return compiledScript;}  }
class C{  public void notifyDataChanged(){  init(mDataSets);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DrawerBuilder withItemAnimator(@NonNull RecyclerView.ItemAnimator itemAnimator){  mItemAnimator=itemAnimator;  return this;}  }
class C{  public void testGetServletRunAsRole() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <servlet>"+ "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "    <run-as>"+ "      <role-name>r1</role-name>"+ "    </run-as>"+ "  </servlet>"+ "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  String roleName=WebXmlUtils.getServletRunAsRoleName(webXml,"s1");  assertEquals("r1",roleName);}  }
class C{  public boolean isAllowUnassignedIssues(){  return allowUnassignedIssues;}  }
class C{  public static double blackFormula(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@StdDev final double stddev,@DiscountFactor final double discount,@Real final double displacement){  return blackFormula(payoff.optionType(),payoff.strike(),forward,stddev,discount,displacement);}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();}  }
class C{  public static void remove(final String key){  SharedPreferences prefs=getOptimusPref();  final Editor editor=prefs.edit();  editor.remove(key).apply();}  }
class C{  public boolean isConnectEnabled(){  return connectEnabled;}  }
class C{  public void loadPDF(final String input){  if (input == null) {    return;  }  scale=1;  PDFfile=input;  fileLoc.setText(PDFfile);  if (input.startsWith("http")) {    openFile(null,input,true);  } else {    openFile(new File(input),null,false);  }}  }
class C{  public static boolean unexportObject(Remote obj,boolean force) throws NoSuchObjectException {  return sun.rmi.transport.ObjectTable.unexportObject(obj,force);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:25.948 -0500",hash_original_method="55B596B0C996801BF0FD9956A535E1C7",hash_generated_method="1CE8E8BF6FF20203CD69EBA8E105DEF8") public SimpleSessionDescription(String message){  String[] lines=message.trim().replaceAll(" +"," ").split("[\r\n]+");  Fields fields=mFields;  for (  String line : lines) {    try {      if (line.charAt(1) != '=') {        throw new IllegalArgumentException();      }      if (line.charAt(0) == 'm') {        String[] parts=line.substring(2).split(" ",4);        String[] ports=parts[1].split("/",2);        Media media=newMedia(parts[0],Integer.parseInt(ports[0]),(ports.length < 2) ? 1 : Integer.parseInt(ports[1]),parts[2]);        for (        String format : parts[3].split(" ")) {          media.setFormat(format,null);        }        fields=media;      } else {        fields.parse(line);      }    } catch (    Exception e) {      throw new IllegalArgumentException("Invalid SDP: " + line);    }  }}  }
class C{  private void resetPhotoView(){  if (mPhotoView != null) {    mPhotoView.bindPhoto(null);  }}  }
class C{  public List<K> toKeys(){  return root.toList(null);}  }
class C{  public GeometryLocation locateNonVertexPoint(Coordinate testPt,double tolerance){  Geometry geom=getGeometry();  if (geom == null)   return null;  return GeometryPointLocater.locateNonVertexPoint(getGeometry(),testPt,tolerance);}  }
class C{  final Object peek(){  int size=stack.size();  return size == 0 ? null : stack.get(size - 1);}  }
class C{  private void initNullGraphicsDevice(){  graphicsDevices[NULL_GRAPHICS_DEVICE_INDEX]=NullGraphicsDevice.getInstance();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String substring;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  substring=child.substringData(0,8);  assertEquals("characterdataSubStringValueAssert","Margaret",substring);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.054 -0400",hash_original_method="AE8D2F77597464B24506681CBB435A18",hash_generated_method="F96AA07650E84FF2DD96427AE369120F") @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  mFragments.noteStateNotSaved();  int index=requestCode >> 16;  if (index != 0) {    index--;    if (mFragments.mActive == null || index < 0 || index >= mFragments.mActive.size()) {      Log.w(TAG,"Activity result fragment index out of range: 0x" + Integer.toHexString(requestCode));      return;    }    Fragment frag=mFragments.mActive.get(index);    if (frag == null) {      Log.w(TAG,"Activity result no fragment exists for index: 0x" + Integer.toHexString(requestCode));    } else {      frag.onActivityResult(requestCode & 0xffff,resultCode,data);    }    return;  }  super.onActivityResult(requestCode,resultCode,data);}  }
class C{  public static void customMethod(String methodType,String methodName,Class<?> clazz){  String completeName=clazz.getCanonicalName();  String packageName=clazz.getPackage().getName();  String className=completeName.substring(packageName.length() + 1);  throw new MalformedBeanException(MSG.INSTANCE.message(customMethodException,methodType,methodName,className));}  }
class C{  public static String scrubSubscriberId(String subscriberId){  if ("eng".equals(Build.TYPE)) {    return subscriberId;  } else   if (subscriberId != null) {    return subscriberId.substring(0,Math.min(6,subscriberId.length())) + "...";  } else {    return "null";  }}  }
class C{  public void println(char x){  out.println(x);}  }
class C{  public void testDetectLanguageVi(){  LOGGER.debug("detectLanguage vi");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "vi.wikipedia.org-wiki_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("vi",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("vi",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("vi",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.SNIPPET__CODE:    return CODE_EDEFAULT == null ? code != null : !CODE_EDEFAULT.equals(code);}return super.eIsSet(featureID);}  }
class C{  public LayersPanel(){  super();  setKey(defaultKey);  setLayout(new BorderLayout());}  }
class C{  public static boolean startsWithHTTP(final String s){  try {    int at=0;    while (Character.isWhitespace(s.charAt(at))) {      ++at;    }    return ("HTTP".equals(s.substring(at,at + 4)));  } catch (  final StringIndexOutOfBoundsException e) {    return false;  }}  }
class C{  private void unindex(final VirtualFile root,final List<FilePath> files,boolean toUnversioned) throws VcsException {  GitFileUtils.delete(myProject,root,files,"--cached","-f");  if (toUnversioned) {    final GitRepository repo=GitUtil.getRepositoryManager(myProject).getRepositoryForRoot(root);    final GitUntrackedFilesHolder untrackedFilesHolder=(repo == null ? null : repo.getUntrackedFilesHolder());    for (    FilePath path : files) {      final VirtualFile vf=VcsUtil.getVirtualFile(path.getIOFile());      if (untrackedFilesHolder != null && vf != null) {        untrackedFilesHolder.add(vf);      }    }  }}  }
class C{  public static void log(String event,String user,String reason,Map<String,Object> data){  Map<String,Object> message=new LinkedHashMap<>();  message.put(EVENT_PARAM,event + FAILURE_SUFFIX);  message.put(USER_PARAM,user);  message.put(REASON_PARAM,reason);  message.put(DATA_PARAM,data);  log(JsonUtils.getSerializer().toJson(message));}  }
class C{  static final int advanceProbe(int probe){  probe^=probe << 13;  probe^=probe >>> 17;  probe^=probe << 5;  setProbe(probe);  return probe;}  }
class C{  public VariableStatementKeyword createVariableStatementKeywordFromString(EDataType eDataType,String initialValue){  VariableStatementKeyword result=VariableStatementKeyword.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  private void nextToken(String r){  int t=0;  try {    t=m_st.nextToken();  } catch (  IOException e) {  }  if (t == StreamTokenizer.TT_EOF) {    System.out.println("eof , " + r);  } else   if (t == StreamTokenizer.TT_NUMBER) {    System.out.println("got a number , " + r);  }}  }
class C{  public ClientResourceException(final int statusCode){  this.statusCode=statusCode;}  }
class C{  private void buildModel(RecordHolder record,Map<String,List<String>> modelAccessionNestsModelAccession){  if (record.getModelAc() != null) {    clanData.addModel(record.getModelAc());    if (record.getNestedDomains().size() > 0) {      for (      String nestedDomain : record.getNestedDomains()) {        List<String> nestedDomains=modelAccessionNestsModelAccession.get(record.getModelAc());        if (nestedDomains == null) {          nestedDomains=new ArrayList<String>();        }        nestedDomains.add(nestedDomain);        modelAccessionNestsModelAccession.put(record.getModelAc(),nestedDomains);      }    }  }}  }
class C{  public synchronized void write(int b) throws IOException {  while (pos >= buffer.length)   push();  buffer[pos++]=(byte)b;}  }
class C{  public byte[] encode(StunStack stunStack) throws IllegalStateException {  prepareForEncoding();  validateAttributePresentity();  final char dataLength;  dataLength=getDataLength();  byte binMsg[]=new byte[HEADER_LENGTH + dataLength];  int offset=0;  binMsg[offset++]=(byte)(getMessageType() >> 8);  binMsg[offset++]=(byte)(getMessageType() & 0xFF);  final int messageLengthOffset=offset;  offset+=2;  byte tranID[]=getTransactionID();  if (tranID.length == 12) {    System.arraycopy(MAGIC_COOKIE,0,binMsg,offset,4);    offset+=4;    System.arraycopy(tranID,0,binMsg,offset,TRANSACTION_ID_LENGTH);    offset+=TRANSACTION_ID_LENGTH;  } else {    System.arraycopy(tranID,0,binMsg,offset,RFC3489_TRANSACTION_ID_LENGTH);    offset+=RFC3489_TRANSACTION_ID_LENGTH;  }  Vector<Map.Entry<Character,Attribute>> v=new Vector<>();  Iterator<Map.Entry<Character,Attribute>> iter=null;  char dataLengthForContentDependentAttribute=0;synchronized (attributes) {    v.addAll(attributes.entrySet());  }  iter=v.iterator();  while (iter.hasNext()) {    Attribute attribute=iter.next().getValue();    int attributeLength=attribute.getDataLength() + Attribute.HEADER_LENGTH;    attributeLength+=(4 - attributeLength % 4) % 4;    dataLengthForContentDependentAttribute+=attributeLength;    byte[] binAtt;    if (attribute instanceof ContentDependentAttribute) {      binMsg[messageLengthOffset]=(byte)(dataLengthForContentDependentAttribute >> 8);      binMsg[messageLengthOffset + 1]=(byte)(dataLengthForContentDependentAttribute & 0xFF);      binAtt=((ContentDependentAttribute)attribute).encode(stunStack,binMsg,0,offset);    } else {      binAtt=attribute.encode();    }    System.arraycopy(binAtt,0,binMsg,offset,binAtt.length);    offset+=attributeLength;  }  binMsg[messageLengthOffset]=(byte)(dataLength >> 8);  binMsg[messageLengthOffset + 1]=(byte)(dataLength & 0xFF);  return binMsg;}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  protected Total applyTaxToCartItemsAndCalculateItemTotal(final MutableShoppingCart cart){  final ShoppingContext ctx=cart.getShoppingContext();  final String currency=cart.getCurrencyCode();  final CartItemPrices prices=new CartItemPrices();  final List<CartItem> items=cart.getCartItemList();  if (items != null) {    for (    final CartItem item : cart.getCartItemList()) {      if (!item.isGift() && !MoneyUtils.isFirstBiggerThanOrEqualToSecond(BigDecimal.ZERO,item.getQty()) && item.getPrice() != null) {        final TaxProvider.Tax tax=taxProvider.determineTax(ctx.getShopCode(),currency,ctx.getCountryCode(),ctx.getStateCode(),item.getProductSkuCode());        final BigDecimal price=item.getPrice();        final MoneyUtils.Money money=calculateMoney(price,tax.getRate(),!tax.isExcluded());        final BigDecimal netPrice=money.getNet();        final BigDecimal grossPrice=money.getGross();        cart.setProductSkuTax(item.getProductSkuCode(),netPrice,grossPrice,tax.getRate(),tax.getCode(),tax.isExcluded());      }      prices.add(new CartItemPrices(item));    }  }  return new TotalImpl(prices.listPrice,prices.salePrice,prices.nonSalePrice,prices.finalPrice,false,null,prices.finalPrice,prices.finalTax,prices.grossFinalPrice,Total.ZERO,Total.ZERO,false,null,Total.ZERO,Total.ZERO,prices.finalPrice,prices.finalTax,prices.grossListPrice,prices.grossFinalPrice);}  }
class C{  private static void shutdown(){  log.trace("shutdown()");  actorSystem.shutdown();}  }
class C{  private void writeEncoded(String str){  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);switch (c) {case 0x0A:      this.writer.print(c);    break;case '<':  this.writer.print("&lt;");break;case '>':this.writer.print("&gt;");break;case '&':this.writer.print("&amp;");break;case '\'':this.writer.print("&apos;");break;case '"':this.writer.print("&quot;");break;default :if ((c < ' ') || (c > 0x7E)) {this.writer.print("&#x");this.writer.print(Integer.toString(c,16));this.writer.print(';');} else {this.writer.print(c);}}}}  }
class C{  public AnimatableNumberOptionalNumberValue(AnimationTarget target,float n){  super(target);  number=n;}  }
class C{  public void addTaskEventListener(HeadlessJsTaskEventListener listener){  mHeadlessJsTaskEventListeners.add(listener);}  }
class C{  public void buildLayout(){  final HorizontalLayout horizontalLayout=new HorizontalLayout();  upload=new Upload();  upload.setEnabled(false);  upload.setButtonCaption("Bulk Upload");  upload.setReceiver(this);  upload.setImmediate(true);  upload.setWidthUndefined();  upload.addSucceededListener(this);  upload.addFailedListener(this);  upload.addStartedListener(this);  horizontalLayout.addComponent(upload);  horizontalLayout.setComponentAlignment(upload,Alignment.BOTTOM_RIGHT);  setCompositionRoot(horizontalLayout);}  }
class C{  protected static com.bbn.openmap.corba.CSpecialist.MouseEvent constructGesture(MapGesture gest){  com.bbn.openmap.corba.CSpecialist.Mouse mouse=new com.bbn.openmap.corba.CSpecialist.Mouse();  mouse.point=new com.bbn.openmap.corba.CSpecialist.XYPoint((short)gest.point.x,(short)gest.point.y);  mouse.llpoint=new com.bbn.openmap.corba.CSpecialist.LLPoint(gest.llpoint.getLatitude(),gest.llpoint.getLongitude());  mouse.press=gest.press;  mouse.mousebutton=gest.mousebutton;  mouse.modifiers=new com.bbn.openmap.corba.CSpecialist.key_modifiers(gest.alt,gest.shift,gest.control);  com.bbn.openmap.corba.CSpecialist.MouseEvent event=new com.bbn.openmap.corba.CSpecialist.MouseEvent();switch (gest.event_type) {case com.bbn.openmap.corba.CSpecialist.MouseType._ClickEvent:    event.click(mouse);  break;case com.bbn.openmap.corba.CSpecialist.MouseType._MotionEvent:event.motion(mouse);break;case com.bbn.openmap.corba.CSpecialist.MouseType._KeyEvent:event.keypress(new com.bbn.openmap.corba.CSpecialist.Keypress(mouse.point,gest.key,mouse.modifiers));break;default :System.err.println("JGraphic.constructGesture() - invalid type");}return event;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.775 -0400",hash_original_method="5FCAC44BDC2A7F1CC8FB3837FD1118B9",hash_generated_method="211D4B144F9A7E0B9FE154FE655316F1") public void stop(){  SR_RecognizerStop(mRecognizer);  SR_RecognizerDeactivateRule(mRecognizer,mActiveGrammar.mGrammar,"trash");}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  private Object conditionalCopy(Object o){  return o;}  }
class C{  void sendByte5Baud(int address) throws IOException {  long start=System.currentTimeMillis();  sendBit5Baud(false);  for (int i=0; i < 8; i++) {    sendBit5Baud((address & (1 << i)) != 0);  }  sendBit5Baud(true);  log.debug(String.format("TX-5Baud:%02X finished after %dms",address,System.currentTimeMillis() - start));}  }
class C{  public static NameMatcher<TriggerKey> triggerNameEquals(String compareTo){  return NameMatcher.nameEquals(compareTo);}  }
class C{  public static void main(String... args) throws Exception {  new XMLChecker().run(args);}  }
class C{  public static int findKeyCode(KeyID keyID){  return (idCode[keyID.ordinal()]);}  }
class C{  public double deltaLongitude(){  return this.maxLongitude - this.minLongitude;}  }
class C{  public void shutdown(){  log.info("Interrupting server thread");  this.interrupt();  try {    this.join();  } catch (  InterruptedException e) {    return;  }}  }
class C{  public static Image reflectionImage(Image source,float mirrorRatio,int alphaRatio){  return reflectionImage(source,mirrorRatio,alphaRatio,0);}  }
class C{  public boolean isKeyRotating(ECKey key){  long time=vKeyRotationTimestamp;  return time != 0 && key.getCreationTimeSeconds() < time;}  }
class C{  public MailOperationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public byte[] createImage(Projection proj,int scaledWidth,int scaledHeight,int includedLayerMask,Paint background){  logger.fine("using the new ProjectionPainter interface!  createImage with layer mask.");  if (formatter == null) {    logger.warning("no formatter set! Can't create image.");    return new byte[0];  }  ImageFormatter imageFormatter=formatter.makeClone();  Graphics graphics=createGraphics(imageFormatter,proj.getWidth(),proj.getHeight());  if (graphics == null) {    return new byte[0];  }  ((Proj)proj).drawBackground((Graphics2D)graphics,background);  if (logger.isLoggable(Level.FINE)) {    logger.fine("considering " + layers.length + " for image...");  }  if (layers != null) {    for (int i=layers.length - 1; i >= 0; i--) {      if ((includedLayerMask & (0x00000001 << i)) != 0) {        if (logger.isLoggable(Level.FINE)) {          logger.fine("image request adding layer graphics from : " + layers[i].getName());        }        layers[i].renderDataForProjection(proj,graphics);      } else {        if (logger.isLoggable(Level.FINE)) {          logger.fine("skipping layer graphics from : " + layers[i].getName());        }      }    }  } else {    if (logger.isLoggable(Level.FINE)) {      logger.fine("no layers available");    }  }  byte[] formattedImage=getFormattedImage(imageFormatter,scaledWidth,scaledHeight);  graphics.dispose();  return formattedImage;}  }
class C{  public ConfigPackage(File file) throws IOException, ZipException {  super(file);  Manifest manifest=getManifest();  if (manifest == null) {    throw new IOException("Not a valid config package. MANIFEST.MF is not present.");  }  Attributes attr=manifest.getMainAttributes();  configPackageName=attr.getValue(ATTRIBUTE_DT_CONF_PACKAGE_NAME);  appPackageName=attr.getValue(ATTRIBUTE_DT_APP_PACKAGE_NAME);  appPackageGroupId=attr.getValue(ATTRIBUTE_DT_APP_PACKAGE_GROUP_ID);  appPackageMinVersion=attr.getValue(ATTRIBUTE_DT_APP_PACKAGE_MIN_VERSION);  appPackageMaxVersion=attr.getValue(ATTRIBUTE_DT_APP_PACKAGE_MAX_VERSION);  configPackageDescription=attr.getValue(ATTRIBUTE_DT_CONF_PACKAGE_DESCRIPTION);  String classPathString=attr.getValue(ATTRIBUTE_CLASS_PATH);  String filesString=attr.getValue(ATTRIBUTE_FILES);  if (configPackageName == null) {    throw new IOException("Not a valid config package.  DT-Conf-Package-Name is missing from MANIFEST.MF");  }  if (!StringUtils.isBlank(classPathString)) {    classPath.addAll(Arrays.asList(StringUtils.split(classPathString," ")));  }  if (!StringUtils.isBlank(filesString)) {    files.addAll(Arrays.asList(StringUtils.split(filesString," ")));  }  ZipFile zipFile=new ZipFile(file);  if (zipFile.isEncrypted()) {    throw new ZipException("Encrypted conf package not supported yet");  }  File newDirectory=Files.createTempDirectory("dt-configPackage-").toFile();  newDirectory.mkdirs();  directory=newDirectory.getAbsolutePath();  zipFile.extractAll(directory);  processPropertiesXml();  processAppDirectory(new File(directory,"app"));}  }
class C{  public static HashtagEntity createHashtagEntity(final int start,final int end,final String text){  return new HashtagEntityJSONImpl(start,end,text);}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  private int parseKeyProviderId(final byte[] b,final int off) throws ParseException {  final int bytesToParseLen=b.length - off;  if (bytesToParseLen >= keyProviderIdLen_) {    keyProviderId_=Arrays.copyOfRange(b,off,off + keyProviderIdLen_);    return keyProviderIdLen_;  } else {    throw new ParseException("Not enough bytes to parse key provider id");  }}  }
class C{  public static Handling suppress(){  return suppress;}  }
class C{  public Card popCard(int i){  return cards.remove(i);}  }
class C{  public static Pointer to(NativePointerObject... pointers){  if (pointers == null) {    throw new IllegalArgumentException("Pointer may not point to null objects");  }  return new Pointer(pointers);}  }
class C{  public IElementType captureHereDoc(boolean afterEmptyCloser){  popState();  final PerlHeredocQueueElement heredocQueueElement=heredocQueue.remove(0);  final String heredocMarker=heredocQueueElement.getMarker();  final int oldState=heredocQueueElement.getState();  IElementType tokenType=HEREDOC;  if (oldState == LEX_HEREDOC_WAITING_QQ) {    tokenType=HEREDOC_QQ;  } else   if (oldState == LEX_HEREDOC_WAITING_QX) {    tokenType=HEREDOC_QX;  }  CharSequence buffer=getBuffer();  int tokenStart=getTokenEnd();  if (!afterEmptyCloser) {    pushPreparsedToken(tokenStart++,tokenStart,TokenType.NEW_LINE_INDENT);  }  int bufferEnd=getBufferEnd();  int currentPosition=tokenStart;  int linePos=currentPosition;  while (true) {    while (linePos < bufferEnd && buffer.charAt(linePos) != '\n' && buffer.charAt(linePos) != '\r') {      linePos++;    }    int lineContentsEnd=linePos;    if (linePos < bufferEnd && buffer.charAt(linePos) == '\r') {      linePos++;    }    if (linePos < bufferEnd && buffer.charAt(linePos) == '\n') {      linePos++;    }    if (heredocMarker.isEmpty() && lineContentsEnd == currentPosition && linePos > lineContentsEnd) {      if (currentPosition > tokenStart) {        pushPreparsedToken(tokenStart,currentPosition,tokenType);      }      pushPreparsedToken(currentPosition,lineContentsEnd + 1,HEREDOC_END);      if (!heredocQueue.isEmpty() && bufferEnd > lineContentsEnd + 1) {        setTokenEnd(lineContentsEnd + 1);        return captureHereDoc(true);      } else {        return getPreParsedToken();      }    } else     if (StringUtil.equals(heredocMarker,buffer.subSequence(currentPosition,lineContentsEnd))) {      if (currentPosition > tokenStart) {        pushPreparsedToken(tokenStart,currentPosition,tokenType);      }      pushPreparsedToken(currentPosition,lineContentsEnd,HEREDOC_END);      return getPreParsedToken();    } else     if (linePos == bufferEnd) {      if (linePos > tokenStart) {        pushPreparsedToken(tokenStart,linePos,tokenType);      }      return getPreParsedToken();    }    currentPosition=linePos;  }}  }
class C{  public static List<Point> SpatialKnnQueryUsingIndex(PointRDD pointRDD,Point queryCenter,Integer k){  if (pointRDD.indexedRDDNoId == null) {    throw new NullPointerException("Need to invoke buildIndex() first, indexedRDDNoId is null");  }  JavaRDD<Point> tmp=pointRDD.indexedRDDNoId.mapPartitions(new PointKnnJudgementUsingIndex(queryCenter,k));  return tmp.takeOrdered(k,new PointDistanceComparator(queryCenter));}  }
class C{  public void testEdgeCase(){  final int bits=3;  final int size=1 << bits;  final ByteIndex ix0=new ByteChunks(size - 1,bits);  ix0.integrity();  final ByteIndex ix1=new ByteChunks(size,bits);  ix1.integrity();  final ByteIndex ix2=new ByteChunks(size + 1,bits);  ix2.integrity();}  }
class C{  public VCardTempXUpdatePresenceExtension(byte[] imageBytes){  this.computeXML();  this.updateImage(imageBytes);}  }
class C{  public List<JCCompilationUnit> enterTreesIfNeeded(List<JCCompilationUnit> roots){  if (shouldStop(CompileState.ATTR))   return List.nil();  return enterTrees(roots);}  }
class C{  public KeyBuilder action(){  modifiers|=ModifierKeys.ACTION;  return this;}  }
class C{  public static UniqueString uniqueStringOf(String str){  return internTbl.put(str);}  }
class C{  public void addSystemConsistencyGroup(String systemUri,String cgName){  if (systemConsistencyGroups == null) {    setSystemConsistencyGroups(new StringSetMap());  }  if (!systemConsistencyGroups.containsKey(systemUri)) {    systemConsistencyGroups.put(systemUri,new StringSet());  }  StringSet systemCgNames=systemConsistencyGroups.get(systemUri);  systemCgNames.add(cgName);}  }
class C{  public Word loadWord(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  private void startThundering(){  int delay=Rand.randExponential(THUNDER_DELAY) + 1;  SingletonRepository.getTurnNotifier().notifyInSeconds(delay,thunderer);}  }
class C{  private void writeTypicalAndMinimumActivityDurations(final String configFile){  Config config=new Config();  config.addCoreModules();  ConfigReader reader=new ConfigReader(config);  reader.readFile(configFile);  SortedMap<String,Double> act2TypDur=new TreeMap<>();  SortedMap<String,Double> act2MinDur=new TreeMap<>();  for (  String actTyp : config.planCalcScore().getActivityTypes()) {    act2TypDur.put(actTyp,config.planCalcScore().getActivityParams(actTyp).getTypicalDuration());    act2MinDur.put(actTyp,config.planCalcScore().getActivityParams(actTyp).getMinimalDuration());  }  String fileName=outputDir + "/analysis/actTyp2TypicalAndMinimumActDurations.txt";  BufferedWriter writer=IOUtils.getBufferedWriter(fileName);  try {    writer.write("actType \t typicalActDuration \t minimumActDuration \n");    for (    String actTyp : act2MinDur.keySet()) {      writer.write(actTyp + "\t" + act2TypDur.get(actTyp)+ "\t"+ act2MinDur.get(actTyp)+ "\n");    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written. Reason - " + e);  }  ActivityType2DurationHandler.LOG.info("Data is written to file " + fileName);}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,Node[] trees,int nbatches) throws Exception {  int ncycles=trees.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(trees[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  static Point translateCoordinates(long src,long dst,Point p){  Point translated=null;  XToolkit.awtLock();  try {    XTranslateCoordinates xtc=new XTranslateCoordinates(src,dst,p.x,p.y);    try {      int status=xtc.execute(XErrorHandler.IgnoreBadWindowHandler.getInstance());      if ((status != 0) && ((XErrorHandlerUtil.saved_error == null) || (XErrorHandlerUtil.saved_error.get_error_code() == XConstants.Success))) {        translated=new Point(xtc.get_dest_x(),xtc.get_dest_y());      }    }  finally {      xtc.dispose();    }  }  finally {    XToolkit.awtUnlock();  }  return translated;}  }
class C{  public void addSeriesRenderer(SimpleSeriesRenderer renderer){  mRenderers.add(renderer);}  }
class C{  public void updateFromChild(){  double[] fis=update(m_childNode);  if (fis == null) {    m_fiChild=null;  } else {    m_fiChild=fis;    double sum=0;    for (int iPos=0; iPos < m_nCardinality; iPos++) {      sum+=m_fiChild[iPos];    }    for (int iPos=0; iPos < m_nCardinality; iPos++) {      m_fiChild[iPos]/=sum;    }  }}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=IOUtils.readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=IOUtils.readString(is);  entry.etag=IOUtils.readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=IOUtils.readLong(is);  entry.lastModified=IOUtils.readLong(is);  entry.ttl=IOUtils.readLong(is);  entry.softTtl=IOUtils.readLong(is);  entry.responseHeaders=IOUtils.readStringStringMap(is);  return entry;}  }
class C{  protected void containsBox(int column,int row,int width,int height){  if (column < 0 || column + width > columns || row < 0 || row + height > rows)   throw new IndexOutOfBoundsException("column:" + column + ", row:"+ row+ " ,width:"+ width+ ", height:"+ height);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceCaseDef_();}  }
class C{  public static int UTF16toUTF8(CharSequence s,int offset,int len,byte[] result,int resultOffset){  final int end=offset + len;  int upto=resultOffset;  for (int i=offset; i < end; i++) {    final int code=(int)s.charAt(i);    if (code < 0x80)     result[upto++]=(byte)code; else     if (code < 0x800) {      result[upto++]=(byte)(0xC0 | (code >> 6));      result[upto++]=(byte)(0x80 | (code & 0x3F));    } else     if (code < 0xD800 || code > 0xDFFF) {      result[upto++]=(byte)(0xE0 | (code >> 12));      result[upto++]=(byte)(0x80 | ((code >> 6) & 0x3F));      result[upto++]=(byte)(0x80 | (code & 0x3F));    } else {      if (code < 0xDC00 && (i < end - 1)) {        int utf32=(int)s.charAt(i + 1);        if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {          utf32=((code - 0xD7C0) << 10) + (utf32 & 0x3FF);          i++;          result[upto++]=(byte)(0xF0 | (utf32 >> 18));          result[upto++]=(byte)(0x80 | ((utf32 >> 12) & 0x3F));          result[upto++]=(byte)(0x80 | ((utf32 >> 6) & 0x3F));          result[upto++]=(byte)(0x80 | (utf32 & 0x3F));          continue;        }      }      result[upto++]=(byte)0xEF;      result[upto++]=(byte)0xBF;      result[upto++]=(byte)0xBD;    }  }  return upto - resultOffset;}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  @Override public void logError(final String message,final Throwable throwable){switch (mLevel) {default :case Debug:case Error:    Log.e(getTag(),message,throwable);}}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public boolean supportsBatchUpdates() throws SQLException {  return true;}  }
class C{  public double eval(double params[]){  return (Math.asin(1.0 / params[0]));}  }
class C{  private void updateFixedCircleRadius(){  if (mTouchedDotView == null) {    return;  }  final float deltaLength=Math.max(mTouchedDotView.getMaxStretchLength() - getLengthBetweenCenter(),0);  final float fraction=deltaLength / mTouchedDotView.getMaxStretchLength();  mFollowCircle.radius=fraction * mTouchCircle.radius;}  }
class C{  protected void processElement(String defaultNamespace,Properties namespaces) throws Exception {  String fullName=XMLUtil.scanIdentifier(this.reader);  String name=fullName;  XMLUtil.skipWhitespace(this.reader,null);  String prefix=null;  int colonIndex=name.indexOf(':');  if (colonIndex > 0) {    prefix=name.substring(0,colonIndex);    name=name.substring(colonIndex + 1);  }  Vector attrNames=new Vector();  Vector attrValues=new Vector();  Vector attrTypes=new Vector();  this.validator.elementStarted(fullName,this.reader.getSystemID(),this.reader.getLineNr());  char ch;  for (; ; ) {    ch=this.reader.read();    if ((ch == '/') || (ch == '>')) {      break;    }    this.reader.unread(ch);    this.processAttribute(attrNames,attrValues,attrTypes);    XMLUtil.skipWhitespace(this.reader,null);  }  Properties extraAttributes=new Properties();  this.validator.elementAttributesProcessed(fullName,extraAttributes,this.reader.getSystemID(),this.reader.getLineNr());  Enumeration enm=extraAttributes.keys();  while (enm.hasMoreElements()) {    String key=(String)enm.nextElement();    String value=extraAttributes.getProperty(key);    attrNames.addElement(key);    attrValues.addElement(value);    attrTypes.addElement("CDATA");  }  for (int i=0; i < attrNames.size(); i++) {    String key=(String)attrNames.elementAt(i);    String value=(String)attrValues.elementAt(i);    String type=(String)attrTypes.elementAt(i);    if (key.equals("xmlns")) {      defaultNamespace=value;    } else     if (key.startsWith("xmlns:")) {      namespaces.put(key.substring(6),value);    }  }  if (prefix == null) {    this.builder.startElement(name,prefix,defaultNamespace,this.reader.getSystemID(),this.reader.getLineNr());  } else {    this.builder.startElement(name,prefix,namespaces.getProperty(prefix),this.reader.getSystemID(),this.reader.getLineNr());  }  for (int i=0; i < attrNames.size(); i++) {    String key=(String)attrNames.elementAt(i);    if (key.startsWith("xmlns")) {      continue;    }    String value=(String)attrValues.elementAt(i);    String type=(String)attrTypes.elementAt(i);    colonIndex=key.indexOf(':');    if (colonIndex > 0) {      String attPrefix=key.substring(0,colonIndex);      key=key.substring(colonIndex + 1);      this.builder.addAttribute(key,attPrefix,namespaces.getProperty(attPrefix),value,type);    } else {      this.builder.addAttribute(key,null,null,value,type);    }  }  if (prefix == null) {    this.builder.elementAttributesProcessed(name,prefix,defaultNamespace);  } else {    this.builder.elementAttributesProcessed(name,prefix,namespaces.getProperty(prefix));  }  if (ch == '/') {    if (this.reader.read() != '>') {      XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"`>'");    }    this.validator.elementEnded(name,this.reader.getSystemID(),this.reader.getLineNr());    if (prefix == null) {      this.builder.endElement(name,prefix,defaultNamespace);    } else {      this.builder.endElement(name,prefix,namespaces.getProperty(prefix));    }    return;  }  StringBuffer buffer=new StringBuffer(16);  for (; ; ) {    buffer.setLength(0);    String str;    for (; ; ) {      XMLUtil.skipWhitespace(this.reader,buffer);      str=XMLUtil.read(this.reader,'&');      if ((str.charAt(0) == '&') && (str.charAt(1) != '#')) {        XMLUtil.processEntity(str,this.reader,this.entityResolver);      } else {        break;      }    }    if (str.charAt(0) == '<') {      str=XMLUtil.read(this.reader,'\0');      if (str.charAt(0) == '/') {        XMLUtil.skipWhitespace(this.reader,null);        str=XMLUtil.scanIdentifier(this.reader);        if (!str.equals(fullName)) {          XMLUtil.errorWrongClosingTag(reader.getSystemID(),reader.getLineNr(),name,str);        }        XMLUtil.skipWhitespace(this.reader,null);        if (this.reader.read() != '>') {          XMLUtil.errorClosingTagNotEmpty(reader.getSystemID(),reader.getLineNr());        }        this.validator.elementEnded(fullName,this.reader.getSystemID(),this.reader.getLineNr());        if (prefix == null) {          this.builder.endElement(name,prefix,defaultNamespace);        } else {          this.builder.endElement(name,prefix,namespaces.getProperty(prefix));        }        break;      } else {        this.reader.unread(str.charAt(0));        this.scanSomeTag(true,defaultNamespace,(Properties)namespaces.clone());      }    } else {      if (str.charAt(0) == '&') {        ch=XMLUtil.processCharLiteral(str);        buffer.append(ch);      } else {        reader.unread(str.charAt(0));      }      this.validator.PCDataAdded(this.reader.getSystemID(),this.reader.getLineNr());      Reader r=new ContentReader(this.reader,this.entityResolver,buffer.toString());      this.builder.addPCData(r,this.reader.getSystemID(),this.reader.getLineNr());      r.close();    }  }}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  GoogleBaseService service=RecipeUtil.getGoogleBaseService(request,this.getServletContext());  String id=request.getParameter(RecipeUtil.ID_PARAMETER);  recipeDisplay(request,response,service,id);}  }
class C{  public void executeASync(ProcessInfo pi){}  }
class C{  static void __gl_meshZapFace(GLUface fZap){  GLUhalfEdge eStart=fZap.anEdge;  GLUhalfEdge e, eNext, eSym;  GLUface fPrev, fNext;  eNext=eStart.Lnext;  do {    e=eNext;    eNext=e.Lnext;    e.Lface=null;    if (e.Sym.Lface == null) {      if (e.Onext == e) {        KillVertex(e.Org,null);      } else {        e.Org.anEdge=e.Onext;        Splice(e,e.Sym.Lnext);      }      eSym=e.Sym;      if (eSym.Onext == eSym) {        KillVertex(eSym.Org,null);      } else {        eSym.Org.anEdge=eSym.Onext;        Splice(eSym,eSym.Sym.Lnext);      }      KillEdge(e);    }  } while (e != eStart);  fPrev=fZap.prev;  fNext=fZap.next;  fNext.prev=fPrev;  fPrev.next=fNext;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node clonedNode;  Node parentNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  clonedNode=employeeNode.cloneNode(false);  parentNode=clonedNode.getParentNode();  assertNull("nodeCloneGetParentNullAssert1",parentNode);}  }
class C{  public static ExtendedBlockState extendBlockstateContainer(ExtendedBlockState original,IProperty[] newProperties,IUnlistedProperty[] newUnlistedProperties){  Collection<IProperty> properties=new ArrayList<IProperty>();  properties.addAll(original.getProperties());  properties.addAll(Arrays.asList(newProperties));  Collection<IUnlistedProperty> unlistedProperties=new ArrayList<IUnlistedProperty>();  unlistedProperties.addAll(original.getUnlistedProperties());  unlistedProperties.addAll(Arrays.asList(newUnlistedProperties));  return new ExtendedBlockState(original.getBlock(),properties.toArray(new IProperty[0]),unlistedProperties.toArray(new IUnlistedProperty[0]));}  }
class C{  public static Typeface androidNation(Context context){  sAndroidNation=getFontFromRes(R.raw.androidnation,context);  return sAndroidNation;}  }
class C{  public boolean supportsCatalogsInIndexDefinitions() throws SQLException {  return false;}  }
class C{  public void releaseMemory(){  corpus=null;  realTokens=null;  originalTokens=null;  tokenToNodeMap=null;  originalTokenToNodeMap=null;  tokenToListInfo=null;  wsClassifier=null;  hposClassifier=null;}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public AffinityUuid(Object affKey){  super(IgniteUuid.randomUuid(),affKey);}  }
class C{  static char randomChar(){  return (char)TestUtil.nextInt(random(),'a','z');}  }
class C{  void done(){  summary.remove(this);}  }
class C{  public GridCacheAffinityRoutingSelfTest(){  super(false);}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 >= z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 >= constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 >= constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void flush() throws IOException {  if (_isDisableFlush || _source == null) {    return;  }  int len=_writeLength;  if (len > 0) {    _writeLength=0;    _source.write(_writeBuffer,0,len,false);    _position+=len;    _isFlushRequired=true;  }  if (_source != null && _isFlushRequired) {    _isFlushRequired=false;    _source.flush();  }}  }
class C{  private void markCacheComplete(){  NodeVector nv=getVector();  if (nv != null) {    m_cache.setCacheComplete(true);  }}  }
class C{  private void updateText(){  if (!currentTextVisibility) {    return;  }  double act=neuron.getActivation();  activationText.setScale(1);  setActivationTextPosition();  priorityText.setScale(1);  setPriorityTextPosition();  priorityText.setText("" + neuron.getUpdatePriority());  if (java.lang.Double.isNaN(neuron.getActivation())) {    activationText.setText("NaN");    activationText.scale(.7);    activationText.translate(-4,3);  } else   if ((act > 0) && (neuron.getActivation() < 1)) {    activationText.setFont(NEURON_FONT_BOLD);    String text=Utils.round(act,1);    if (text.startsWith("0.")) {      text=text.replaceAll("0.",".");      if (text.equals(".0")) {        text="0";      }    } else {      text=text.replaceAll(".0$","");    }    activationText.setText(text);  } else   if ((act > -1) && (act < 0)) {    activationText.setFont(NEURON_FONT_BOLD);    activationText.setText(Utils.round(act,1).replaceAll("^-0*","-").replaceAll(".0$",""));  } else {    activationText.setFont(NEURON_FONT_BOLD);    if (Math.abs(act) < 10) {      activationText.scale(.9);    } else     if (Math.abs(act) < 100) {      activationText.scale(.8);      activationText.translate(1,1);    } else {      activationText.scale(.7);      activationText.translate(-1,2);    }    activationText.setText(String.valueOf((int)Math.round(act)));  }}  }
class C{  private void write(double duration_home_work_min,double distance_home_work_meter,double duration_work_home_min,double distance_work_home_meter,String mode,Person p){  UrbanSimPersonCSVWriter.write(p.getId().toString(),duration_home_work_min,distance_home_work_meter,duration_work_home_min,distance_work_home_meter,mode);}  }
class C{  public static DataType userDefinedType(String qualifiedName){  return new DataType(qualifiedName,qualifiedName,Types.OTHER,-1,-1,null,0);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.043 -0500",hash_original_method="DB9408C548BB70BC9C2AC261FCDA28D9",hash_generated_method="1962DC9CA9457658A119FC983749DA2B") public static void fill(double[] array,double value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  private SchemaVersionDAO createSchemaVersionDAO(){  SchemaVersionDAO metaDataTable=mock(SchemaVersionDAO.class);  when(metaDataTable.findAppliedMigrations()).thenReturn(new ArrayList<AppliedMigration>());  return metaDataTable;}  }
class C{  @RequestProcessing(value="/member/{userName}/comments",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeComments(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {  final JSONObject user=(JSONObject)request.getAttribute(User.USER);  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/comments.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("userHomeCmtsCnt");  final int windowSize=Symphonys.getInt("userHomeCmtsWindowSize");  fillHomeUser(dataModel,user);  avatarQueryService.fillUserAvatarURL(user);  final String followingId=user.optString(Keys.OBJECT_ID);  dataModel.put(Follow.FOLLOWING_ID,followingId);  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);  JSONObject currentUser=null;  if (isLoggedIn) {    currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);    final String followerId=currentUser.optString(Keys.OBJECT_ID);    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);    dataModel.put(Common.IS_FOLLOWING,isFollowing);  }  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));  final List<JSONObject> userComments=commentQueryService.getUserComments(user.optString(Keys.OBJECT_ID),pageNum,pageSize,currentUser);  dataModel.put(Common.USER_HOME_COMMENTS,userComments);  final int commentCnt=user.optInt(UserExt.USER_COMMENT_COUNT);  final int pageCount=(int)Math.ceil((double)commentCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);}  }
class C{  public int resizePartWidth(){  if (!frame.isResizable()) {    return 0;  }  return FrameBorder.BORDER_SIZE;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  @Override public String toString(){  return this.getClass().getName() + '(' + getName()+ ':'+ getTypeInternal()+ ')';}  }
class C{  @RpcMethod public void ping() throws InterruptedException, RpcException {  SyncHandler<Object,AgentControl.AsyncClient.ping_call> syncHandler=new SyncHandler<>();  ping(syncHandler);  syncHandler.await();}  }
class C{  public ChangedFolderNode(String name,NodesResources nodesResources){  this.name=name;  this.nodesResources=nodesResources;}  }
class C{  public String toStringShort(){  return AbstractFormatter.shape(this);}  }
class C{  public LoggingPermission(String name,String actions) throws IllegalArgumentException {  super(name);  if (!name.equals("control")) {    throw new IllegalArgumentException("name: " + name);  }  if (actions != null && actions.length() > 0) {    throw new IllegalArgumentException("actions: " + actions);  }}  }
class C{  protected SVGOMAnimationElement(){}  }
class C{  public ModbusTCPListener(int poolsize){  threadPool=new ThreadPool(poolsize);  try {    address=InetAddress.getByAddress(new byte[]{0,0,0,0});  } catch (  UnknownHostException ex) {  }}  }
class C{  private void drawText(int x1,int y1,int s,boolean e_or_n,Graphics g){  Color oldColor=g.getColor();  g.setPaintMode();  if (m_FontColor == null) {    g.setColor(Color.black);  } else {    g.setColor(m_FontColor);  }  String st;  if (e_or_n) {    Edge e=m_edges[s].m_edge;    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());    }  } else {    Node e=m_nodes[s].m_node;    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());    }  }  g.setColor(oldColor);}  }
class C{  public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void addBasicBlock(BasicBlock newBB){  int blocknum=newBB.getBlockNumber();  if (blocknum >= basicBlocks.length) {    int currentSize=basicBlocks.length;    int newSize=15;    if (currentSize != 2) {      if (currentSize == 15) {        newSize=bytelength >> 4;      } else {        newSize=currentSize + currentSize >> 3;      }      if (newSize <= blocknum) {        newSize=blocknum + 20;      }    }    BasicBlock[] biggerBlocks=new BasicBlock[newSize];    for (int i=0; i < currentSize; i++) {      biggerBlocks[i]=basicBlocks[i];    }    basicBlocks=biggerBlocks;  }  basicBlocks[blocknum]=newBB;}  }
class C{  public String toKeyString(){  return (nodeId.toString() + "|" + portId.toString());}  }
class C{  public static Font[] filterMonospaced(Font... fonts){  List<Font> result=new ArrayList<Font>(fonts.length);  for (  Font font : fonts) {    if (isFontMonospaced(font)) {      result.add(font);    }  }  return result.toArray(new Font[result.size()]);}  }
class C{  @Override public void flushData(){  recordMethodCounts();  if (emitBounds()) {    Range bounds=traces.getBounds();    recordGaugeValue("cpu.trace." + bounds.getLeft(),bounds.getLeft());    recordGaugeValue("cpu.trace." + bounds.getRight(),bounds.getRight());  }}  }
class C{  public DagToPag(Graph dag){  this.dag=dag;}  }
class C{  public static BigInteger calculateGx(BigInteger p,BigInteger g,BigInteger x){  return g.modPow(x,p);}  }
class C{  public boolean hasMoreElements(){  if (curindex < length)   return true;  return false;}  }
class C{  public boolean equals(Object anObj){  if (anObj == null) {    return false;  }  if (anObj.getClass().getName().equals(this.getClass().getName())) {    NewPortfolio np=(NewPortfolio)anObj;    if (!np.name.equals(this.name) || (np.id != this.id) || !np.type.equals(this.type)|| !np.status.equals(this.status)) {      return false;    }    if (np.positions == null) {      if (this.positions != null) {        return false;      }    } else {      if (np.positions.size() != this.positions.size()) {        return false;      } else {        Iterator itr=np.positions.values().iterator();        Position pos;        while (itr.hasNext()) {          pos=(Position)itr.next();          if (!this.positions.containsValue(pos)) {            return false;          }        }      }    }  } else {    return false;  }  return true;}  }
class C{  public void receiveFA(int faDataType,String xml){  ByteArrayInputStream inputSource=null;  try {    inputSource=new ByteArrayInputStream(xml.getBytes("utf-8"));switch (faDataType) {case EClientSocket.ALIASES:{        _log.debug("Aliases: /n" + xml);        final TWSAccountAliasRequest request=new TWSAccountAliasRequest();        final Aspects aspects=(Aspects)request.fromXML(inputSource);        for (        Aspect aspect : aspects.getAspect()) {          Account item=(Account)aspect;          Account account=m_tradePersistentModel.findAccountByNumber(item.getAccountNumber());          if (null == account) {            account=new Account(item.getAccountNumber(),item.getAccountNumber(),Currency.USD,AccountType.INDIVIDUAL);          }          account.setAlias(item.getAlias());          account.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());          m_tradePersistentModel.persistAspect(account);        }        m_client.requestFA(EClientSocket.GROUPS);        break;      }case EClientSocket.PROFILES:{      _log.debug("Profiles: /n" + xml);      final TWSAllocationRequest request=new TWSAllocationRequest();      final Aspects aspects=(Aspects)request.fromXML(inputSource);      for (      Aspect aspect : aspects.getAspect()) {        m_tradePersistentModel.persistPortfolio((Portfolio)aspect);      }      this.fireFAAccountsCompleted();      break;    }case EClientSocket.GROUPS:{    _log.debug("Groups: /n" + xml);    final TWSGroupRequest request=new TWSGroupRequest();    final Aspects aspects=(Aspects)request.fromXML(inputSource);    for (    Aspect aspect : aspects.getAspect()) {      m_tradePersistentModel.persistPortfolio((Portfolio)aspect);    }    m_client.requestFA(EClientSocket.PROFILES);    break;  }default :{  _log.debug("receiveFA: /n" + xml);}}} catch (Exception ex) {error(faDataType,3235,ex.getMessage());} finally {try {if (null != inputSource) inputSource.close();} catch (IOException ex) {error(faDataType,3236,ex.getMessage());}}}  }
class C{  public FractionAtom(Atom num,Atom den,boolean rule){  this(num,den,!rule,TeXConstants.UNIT_PIXEL,0f);}  }
class C{  public static boolean isAlpha(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if (Character.isLetter(str.charAt(i)) == false) {      return false;    }  }  return true;}  }
class C{  public void writeText(char text) throws IOException {  closeStartIfNecessary();  if (dontEscape) {    writer.write(text);  } else {    charHolder[0]=text;    HtmlUtils.writeText(writer,true,true,buffer,charHolder);  }}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  public boolean hasPayloads(){  return storePayloads;}  }
class C{  public void print(java.io.PrintWriter out){  new Printer(this,out).print();}  }
class C{  public static String wordShape(String inStr,int wordShaper,Collection<String> knownLCWords){  if (knownLCWords != null && dontUseLC(wordShaper)) {    knownLCWords=null;  }switch (wordShaper) {case NOWORDSHAPE:    return inStr;case WORDSHAPEDAN1:  return wordShapeDan1(inStr);case WORDSHAPECHRIS1:return wordShapeChris1(inStr);case WORDSHAPEDAN2:return wordShapeDan2(inStr,knownLCWords);case WORDSHAPEDAN2USELC:return wordShapeDan2(inStr,knownLCWords);case WORDSHAPEDAN2BIO:return wordShapeDan2Bio(inStr,knownLCWords);case WORDSHAPEDAN2BIOUSELC:return wordShapeDan2Bio(inStr,knownLCWords);case WORDSHAPEJENNY1:return wordShapeJenny1(inStr,knownLCWords);case WORDSHAPEJENNY1USELC:return wordShapeJenny1(inStr,knownLCWords);case WORDSHAPECHRIS2:return wordShapeChris2(inStr,false,knownLCWords);case WORDSHAPECHRIS2USELC:return wordShapeChris2(inStr,false,knownLCWords);case WORDSHAPECHRIS3:return wordShapeChris2(inStr,true,knownLCWords);case WORDSHAPECHRIS3USELC:return wordShapeChris2(inStr,true,knownLCWords);case WORDSHAPECHRIS4:return wordShapeChris4(inStr,false,knownLCWords);default :throw new IllegalStateException("Bad WordShapeClassifier");}}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.171 -0500",hash_original_method="DFC23EFD31E5C4FF40E98CE1A64FD5ED",hash_generated_method="DFC23EFD31E5C4FF40E98CE1A64FD5ED") void pauseLoad(boolean pause){  if (mRequestHandle != null) {    mRequestHandle.pauseRequest(pause);  }}  }
class C{  protected byte[] last() throws IOException, SpaceExceededException {  assert (this.index != null) : "index == null; closeDate=" + this.closeDate + ", now="+ new Date();  if (this.index == null) {    log.severe("this.index == null in last(); closeDate=" + this.closeDate + ", now="+ new Date()+ this.heapFile == null ? "" : (" file = " + this.heapFile.toString()));    return null;  }synchronized (this.index) {    byte[] key=this.index.largestKey();    if (key == null)     return null;    return get(key);  }}  }
class C{  private String obtainGateway(String token) throws ParseException {  String s=null;  try {    s=((String)((JSONObject)JSON_PARSER.parse(Requests.GET.makeRequest("https://discordapp.com/api/gateway",new BasicNameValuePair("authorization",token)))).get("url")).replaceAll("wss","ws");  } catch (  HTTP403Exception e) {    Discord4J.logger.error("Received 403 error attempting to get gateway; is your login correct?");  }  Discord4J.logger.debug("Obtained gateway {}.",s);  return s;}  }
class C{  public static void tweakTipEditorPane(JEditorPane textArea){  if (UIManager.getLookAndFeel().getName().equals("Nimbus")) {    Color selBG=textArea.getSelectionColor();    Color selFG=textArea.getSelectedTextColor();    textArea.setUI(new javax.swing.plaf.basic.BasicEditorPaneUI());    textArea.setSelectedTextColor(selFG);    textArea.setSelectionColor(selBG);  }  textArea.setEditable(false);  textArea.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  textArea.getCaret().setSelectionVisible(true);  textArea.setBackground(TipUtil.getToolTipBackground());  Font font=UIManager.getFont("Label.font");  if (font == null) {    font=new Font("SansSerif",Font.PLAIN,12);  }  HTMLDocument doc=(HTMLDocument)textArea.getDocument();  doc.getStyleSheet().addRule("body { font-family: " + font.getFamily() + "; font-size: "+ font.getSize()+ "pt; }");}  }
class C{  public void close() throws IOException {}  }
class C{  public static LazyPQueueX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private WebEmbed handleNotRendered(Element e){  if (!e.getAttribute("class").contains("twitter-tweet")) {    return null;  }  NodeList<Element> anchors=e.getElementsByTagName("a");  if (anchors.getLength() == 0) {    return null;  }  AnchorElement tweetAnchor=AnchorElement.as(anchors.getItem(anchors.getLength() - 1));  if (!DomUtil.hasRootDomain(tweetAnchor.getHref(),"twitter.com")) {    return null;  }  String path=tweetAnchor.getPropertyString("pathname");  String id=getTweetIdFromPath(path);  if (id == null) {    return null;  }  return new WebEmbed(e,"twitter",id,null);}  }
class C{  @Override protected void finalize() throws Throwable {  close();  super.finalize();}  }
class C{  public void unbox(final Type type){  Type t=NUMBER_TYPE;  Method sig=null;switch (type.getSort()) {case Type.VOID:    return;case Type.CHAR:  t=CHARACTER_TYPE;sig=CHAR_VALUE;break;case Type.BOOLEAN:t=BOOLEAN_TYPE;sig=BOOLEAN_VALUE;break;case Type.DOUBLE:sig=DOUBLE_VALUE;break;case Type.FLOAT:sig=FLOAT_VALUE;break;case Type.LONG:sig=LONG_VALUE;break;case Type.INT:case Type.SHORT:case Type.BYTE:sig=INT_VALUE;}if (sig == null) {checkCast(type);} else {checkCast(t);invokeVirtual(t,sig);}}  }
class C{  public static String ItThey(final int quantity){  return makeUpperCaseWord(itthey(quantity));}  }
class C{  @SuppressWarnings("unchecked") private void mergeAt(int i){  assert stackSize >= 2;  assert i >= 0;  assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  assert len1 > 0 && len2 > 0;  assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight((Comparable<Object>)a[base2],a,base1,len1,0);  assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft((Comparable<Object>)a[base1 + len1 - 1],a,base2,len2,len2 - 1);  assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public mxCellMarker(mxGraphComponent graphComponent,Color validColor,Color invalidColor){  this(graphComponent,validColor,invalidColor,mxConstants.DEFAULT_HOTSPOT);}  }
class C{  public static byte[] toByteArrayForPBE(char[] chars){  byte[] out=new byte[chars.length];  for (int i=0; i < chars.length; i++) {    out[i]=(byte)chars[i];  }  int length=out.length * 2;  byte[] ret=new byte[length + 2];  int j=0;  for (int i=0; i < out.length; i++) {    j=i * 2;    ret[j]=0;    ret[j + 1]=out[i];  }  ret[length]=0;  ret[length + 1]=0;  return ret;}  }
class C{  public ByteBuffer buildPacket(int encap,short destUdp,short srcUdp){  ByteBuffer result=ByteBuffer.allocate(MAX_LENGTH);  InetAddress destIp=mBroadcast ? Inet4Address.ALL : mYourIp;  InetAddress srcIp=mBroadcast ? Inet4Address.ANY : mSrcIp;  fillInPacket(encap,destIp,srcIp,destUdp,srcUdp,result,DHCP_BOOTREPLY,mBroadcast);  result.flip();  return result;}  }
class C{  public int compare(IMove o1,IMove o2){  JumpMove j1=(JumpMove)o1;  JumpMove j2=(JumpMove)o2;  int sc1=weights[j1.from] + weights[j1.over] + weights[j1.to];  int sc2=weights[j2.from] + weights[j2.over] + weights[j2.to];  return sc2 - sc1;}  }
class C{  public boolean isMultiSelection(){  return m_multiSelection;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIComponent() != null)   return stack.getUIComponent().getWidget(); else   return null;}  }
class C{  @Path("propdel") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse propdel(final PropertyDeleteRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.propdel(request);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof EvenPortAttribute))   return false;  if (obj == this)   return true;  EvenPortAttribute att=(EvenPortAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || att.rFlag != rFlag)   return false;  return true;}  }
class C{  public boolean isChapAuthSettable(){  return chapAuthSettable;}  }
class C{  public static void seek(final long position){  if (musicPlaybackService != null) {    try {      musicPlaybackService.seek(position);    } catch (    final RemoteException ignored) {    }  }}  }
class C{  public synchronized Relationship addRelationship(Vertex type,Vertex target,int index,boolean internal){  BasicRelationship relationship=new BasicRelationship(this,type,target);  relationship.setIndex(index);  return addRelationship(relationship,internal,false,0.5f);}  }
class C{  public DelphiProject(String projName){  name=projName;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens02.class,args);}  }
class C{  public OperationNotPermittedException(String message){  super(message);}  }
class C{  private void closeConnection() throws IOException {  if (this.clientOutput != null)   this.clientOutput.close();  if (this.clientInput != null)   this.clientInput.close();  if (this.ControlSocket != null)   this.ControlSocket.close();  if (this.DataSocketActive != null)   this.DataSocketActive.close();  if (this.DataSocketPassive != null)   this.DataSocketPassive.close();}  }
class C{  private static void addActionByClsID(Action action,String clsID,int regLevel) throws RegisterFailedException {  String verb=action.getVerb();  String desc=action.getDescription();  String cmd=action.getCommand();  String clsIDKey=getClsIDKey(clsID,regLevel);  String shellKey=clsIDKey + "\\" + KN_SHELL;  String verbKey=shellKey + "\\" + verb;  String cmdKey=verbKey + "\\" + KN_COMMAND;  if (cmdKey != null) {    regCreateKeyEx(cmdKey,regLevel);    if (cmd != null) {      setDefaultValue(cmdKey,cmd,regLevel);      if ((desc != null) && (verbKey != null)) {        setDefaultValue(verbKey,desc,regLevel);      }    }  }}  }
class C{  public BufferedImage buildBufferedImage(Dimension size){  return new BufferedImage(size.width,size.height,BufferedImage.TYPE_INT_ARGB);}  }
class C{  private Images(){}  }
class C{  public XCalDocument(InputStream in) throws SAXException, IOException {  this(XmlUtils.toDocument(in));}  }
class C{  private static String[] parseHierarchy(String cRealm,String sRealm){  String[] cComponents=cRealm.split("\\.");  String[] sComponents=sRealm.split("\\.");  int cPos=cComponents.length;  int sPos=sComponents.length;  boolean hasCommon=false;  for (sPos--, cPos--; sPos >= 0 && cPos >= 0 && sComponents[sPos].equals(cComponents[cPos]); sPos--, cPos--) {    hasCommon=true;  }  LinkedList<String> path=new LinkedList<>();  for (int i=0; i <= cPos; i++) {    path.addLast(subStringFrom(cComponents,i));  }  if (hasCommon) {    path.addLast(subStringFrom(cComponents,cPos + 1));  }  for (int i=sPos; i >= 0; i--) {    path.addLast(subStringFrom(sComponents,i));  }  path.removeLast();  return path.toArray(new String[path.size()]);}  }
class C{  private void initializeUserDirectives(){  userDirectives=new ArrayList<>();  IEclipsePreferences preferences=VelocityCorePlugin.getPreferences();  String directives=preferences.get(IPreferencesConstants.VELOCITY_USER_DIRECTIVES,"");  StringTokenizer st=new StringTokenizer(directives,",\n\r");  while (st.hasMoreElements()) {    String directive=(String)st.nextElement();    String name=directive.substring(0,directive.indexOf(' '));    int type=(directive.endsWith("[Block]") ? Directive.BLOCK : Directive.LINE);    userDirectives.add('#' + name);    addDirective(new VelocityDirective(name,type));  }}  }
class C{  @Override public int read(byte b[],int off,int len) throws IOException {  if (markerFound) {    return -1;  }  int count=0;  if (segment.isEntropyCoded()) {    for (; count < len; count++) {      int data=read();      if (data == -1) {        if (count == 0)         return -1;        break;      }      b[off + count]=(byte)data;    }  } else {    long available=segment.length - offset + segment.offset;    if (available <= 0) {      return -1;    }    if (available < len) {      len=(int)available;    }    count=in.read(b,off,len);    if (count != -1) {      offset+=count;    }  }  return count;}  }
class C{  public void testDrainToSelfN(){  LinkedBlockingDeque q=populatedDeque(SIZE);  try {    q.drainTo(q,0);    shouldThrow();  } catch (  IllegalArgumentException success) {  }}  }
class C{  public void waitDbRingRebuildDone(String vdcShortId,int vdcHosts){  String prefix=new StringBuilder("Waiting for DB rebuild to finish for vdc with shortId '").append(vdcShortId).append("' and ").append(vdcHosts).append(" hosts...").toString();  log.info(prefix);  DbJmxClient geoInstance=getJmxClient(LOCALHOST);  int quorum=vdcHosts / 2 + 1;  long start=System.currentTimeMillis();  while (System.currentTimeMillis() - start < DB_RING_TIMEOUT) {    try {      List<String> fullOwners=geoInstance.getDcNodeFullOwnership(vdcShortId);      if (fullOwners.size() >= quorum) {        log.info("Full owner nodes: {}",fullOwners.toString());        return;      } else {        log.info("db {} rebuild not finish yet",vdcShortId);      }      TimeUnit.SECONDS.sleep(WAIT_INTERVAL_IN_SEC);    } catch (    InterruptedException ex) {    }catch (    Exception ex) {      log.error("Exception checking DB cluster status",ex);    }  }  log.info("{} Timed out",prefix);  throw new IllegalStateException(String.format("%s : Timed out",prefix));}  }
class C{  private boolean check(@NonNull String text,char key){  char[] chars=text.toCharArray();  boolean bool=true;  for (int i=0; i < chars.length; i++) {    bool&=(chars[i] == key);    if (!bool) {      break;    }  }  return bool;}  }
class C{  public int[] numVerticesDetected(Set<? extends SampledVertex> vertices){  int it=-1;  TIntIntHashMap map=new TIntIntHashMap();  for (  SampledVertex v : vertices) {    if (v.isDetected()) {      map.adjustOrPutValue(v.getIterationDetected(),1,1);      it=Math.max(it,v.getIterationDetected());    }  }  int[] list=new int[it + 1];  for (int i=0; i <= it; i++) {    list[i]=map.get(i);  }  list[0]+=map.get(-1);  return list;}  }
class C{  public void incMarkerEventsConflated(){  this._stats.incLong(_markerEventsConflatedId,1);}  }
class C{  public static boolean isWellFormedAddress(String p_address){  if (p_address == null) {    return false;  }  String address=p_address.trim();  int addrLength=address.length();  if (addrLength == 0 || addrLength > 255) {    return false;  }  if (address.startsWith(".") || address.startsWith("-")) {    return false;  }  int index=address.lastIndexOf('.');  if (address.endsWith(".")) {    index=address.substring(0,index).lastIndexOf('.');  }  if (index + 1 < addrLength && isDigit(p_address.charAt(index + 1))) {    char testChar;    int numDots=0;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isDigit(address.charAt(i - 1)) || (i + 1 < addrLength && !isDigit(address.charAt(i + 1)))) {          return false;        }        numDots++;      } else       if (!isDigit(testChar)) {        return false;      }    }    if (numDots != 3) {      return false;    }  } else {    char testChar;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isAlphanum(address.charAt(i - 1))) {          return false;        }        if (i + 1 < addrLength && !isAlphanum(address.charAt(i + 1))) {          return false;        }      } else       if (!isAlphanum(testChar) && testChar != '-') {        return false;      }    }  }  return true;}  }
class C{  public Stack<IMove> solution(){  if (moveStack == null) {    return new Stack<IMove>();  }  return moveStack;}  }
class C{  public void removeListener(Listener<ComplexBuffer> listener){synchronized (mComplexBufferBroadcaster) {    mComplexBufferBroadcaster.removeListener(listener);    if (!mComplexBufferBroadcaster.hasListeners()) {      mBufferProcessor.stop();    }  }}  }
class C{  public HttpMethod process(HttpServletRequest request,String url) throws HttpException {  HttpMethodBase method=null;  if (request.getMethod().equalsIgnoreCase("GET")) {    method=new GetMethod(url);  } else   if (request.getMethod().equalsIgnoreCase("HEAD")) {    method=new HeadMethod(url);  } else   if (request.getMethod().equalsIgnoreCase("DELETE")) {    method=new DeleteMethod(url);  } else {    return null;  }  setHeaders(method,request);  return method;}  }
class C{  protected void clearEvents(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  Node[] genObjs(int nobjs){  Node[] objs=new Node[nobjs];  for (int i=0; i < nobjs; i++)   objs[i]=new Node();  return objs;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String toString(Object val){  if (val instanceof String) {    return trimLeadingSlash((String)val);  } else   if (val instanceof InetAddress) {    return ((InetAddress)val).getHostAddress();  } else {    return trimLeadingSlash(val.toString());  }}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static long nextLong(){synchronized (random) {    return random.nextLong();  }}  }
class C{  public PrefixSearchTupleSet(boolean caseSensitive){  m_trie=new Trie(caseSensitive);}  }
class C{  public T caseExecutionSlot(ExecutionSlot object){  return null;}  }
class C{  public static Region createLocalRegion(String regionName) throws RegionExistsException {  AttributesFactory attr=new AttributesFactory();  attr.setScope(Scope.LOCAL);  Region localRegion=createCache().createRegion(regionName,attr.create());  return localRegion;}  }
class C{  public int compareTo(Object o){  return compareTo((MutableDouble)o);}  }
class C{  public void testNodeDocumentFragmentNormalize1() throws Throwable {  Document doc;  DocumentFragment docFragment;  String nodeValue;  Text txtNode;  Node retval;  doc=(Document)load("hc_staff",builder);  docFragment=doc.createDocumentFragment();  txtNode=doc.createTextNode("foo");  retval=docFragment.appendChild(txtNode);  txtNode=doc.createTextNode("bar");  retval=docFragment.appendChild(txtNode);  docFragment.normalize();  txtNode=(Text)docFragment.getFirstChild();  nodeValue=txtNode.getNodeValue();  assertEquals("normalizedNodeValue","foobar",nodeValue);  retval=txtNode.getNextSibling();  assertNull("singleChild",retval);}  }
class C{  public AtomicReferenceArray(E[] array){  this.array=Arrays.copyOf(array,array.length,Object[].class);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.487 -0500",hash_original_method="FCCCC0193355017A3AB410227E2B8C63",hash_generated_method="D9A90AA848BD3378AFD8B57E938B259A") public Intent putStringArrayListExtra(String name,ArrayList<String> value){  mExtras.put(name,value);  return this;}  }
class C{  public final CC gapBefore(String boundsSize){  hor.setGapBefore(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  @Override public void registerOutParameter(int parameterIndex,int sqlType) throws SQLException {  registerOutParameter(parameterIndex);}  }
class C{  public static String copyToString(InputStream in,Charset charset) throws IOException {  Assert.notNull(in,"No InputStream specified");  StringBuilder out=new StringBuilder();  InputStreamReader reader=new InputStreamReader(in,charset);  char[] buffer=new char[BUFFER_SIZE];  int bytesRead=-1;  while ((bytesRead=reader.read(buffer)) != -1) {    out.append(buffer,0,bytesRead);  }  return out.toString();}  }
class C{  public static boolean isValidPath(String path){  Path test=new Path(path);  for (int i=0, max=test.segmentCount(); i < max; i++)   if (!isValidSegment(test.segment(i)))   return false;  return true;}  }
class C{  public static BuilderForGossipSeedDiscoverer forGossipSeedDiscoverer(){  return new BuilderForGossipSeedDiscoverer();}  }
class C{  public TileEntity createTileEntity(GlowChunk chunk,int cx,int cy,int cz){  return null;}  }
class C{  public static Interval zeroToBy(int count,int step){  return Interval.fromToBy(0,count,step);}  }
class C{  public String plural(final String word){  final WordEntry entry=words.get(trimWord(word));  if (entry != null) {    if ((entry.getType() != null) && !entry.getType().isPlural()) {      return entry.getPlurSing();    } else {      return entry.getNormalized();    }  } else {    return Grammar.plural(word);  }}  }
class C{  public int innerNameIndex(int nth){  return ByteArray.readU16bit(get(),nth * 8 + 6);}  }
class C{  public byte[] toWire(){  WireFormat.ArrayWriter writer=new WireFormat.ArrayWriter();  try {    writer.writeHash(transactionId);    writer.writeUint32(outputIndex);  } catch (  IOException e) {  }  return writer.toByteArray();}  }
class C{  public static Version fromOrdinal(short ordinal,boolean forGFEClients) throws UnsupportedVersionException {  if (ordinal == NOT_SUPPORTED_ORDINAL) {    throw new UnsupportedVersionException("Un-versioned clients are not supported. ");  }  if (ordinal == TOKEN_ORDINAL) {    return TOKEN;  }  if ((VALUES.length < ordinal + 1) || VALUES[ordinal] == null || (forGFEClients && CommandInitializer.getCommands(VALUES[ordinal]) == null)) {    throw new UnsupportedVersionException(LocalizedStrings.Version_REMOTE_VERSION_NOT_SUPPORTED.toLocalizedString(ordinal,CURRENT.name));  }  return VALUES[ordinal];}  }
class C{  protected CCLabel(CharSequence string,String fontname,float fontsize,int fontStyle){  this(string,CGSize.make(0,0),TextAlignment.CENTER,fontname,fontsize,fontStyle);}  }
class C{  protected boolean isSameBackDestination(Container source,Container destination){  return source.getName() == null || destination.getName() == null || source.getName().equals(destination.getName());}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  private AnalyticsQuery createAnalysisFromParams(AnalyticsQuery query,String BBID,String[] groupBy,String[] metrics,String[] filterExpressions,String period,String[] timeframe,String[] compareframe,String[] orderExpressions,String[] rollupExpressions,Long limit,Long offset,String[] beyondLimit,Integer maxResults,Integer startIndex,String lazy,Style style) throws ScopeException {  if (query == null)   query=new AnalyticsQueryImpl();  query.setBBID(BBID);  int groupByLength=groupBy != null ? groupBy.length : 0;  if (groupByLength > 0) {    query.setGroupBy(new ArrayList<String>());    for (    String value : groupBy) {      if (value != null && value.length() > 0)       query.getGroupBy().add(value);    }  }  if ((metrics != null) && (metrics.length > 0)) {    query.setMetrics(new ArrayList<String>());    for (    String value : metrics) {      if (value != null && value.length() > 0)       query.getMetrics().add(value);    }  }  if ((filterExpressions != null) && (filterExpressions.length > 0)) {    query.setFilters(new ArrayList<String>());    for (    String value : filterExpressions) {      if (value != null && value.length() > 0)       query.getFilters().add(value);    }  }  if (period != null) {    query.setPeriod(period);  }  if (timeframe != null && timeframe.length > 0) {    query.setTimeframe(new ArrayList<String>());    for (    String value : timeframe) {      if (value != null && value.length() > 0)       query.getTimeframe().add(value);    }  }  if (compareframe != null && compareframe.length > 0) {    query.setCompareTo(new ArrayList<String>());    for (    String value : compareframe) {      if (value != null && value.length() > 0)       query.getCompareTo().add(value);    }  }  if ((orderExpressions != null) && (orderExpressions.length > 0)) {    query.setOrderBy(new ArrayList<String>());    for (    String value : orderExpressions) {      if (value != null && value.length() > 0)       query.getOrderBy().add(value);    }  }  if ((rollupExpressions != null) && (rollupExpressions.length > 0)) {    List<RollUp> rollups=new ArrayList<RollUp>();    int pos=1;    for (int i=0; i < rollupExpressions.length; i++) {      RollUp rollup=new RollUp();      String expr=rollupExpressions[i].toLowerCase();      Position position=Position.FIRST;      if (expr.startsWith("last(")) {        position=Position.LAST;      }      expr=expr.replaceAll("","");      try {        int index=Integer.parseInt(expr);        if (index < -1 || index >= groupByLength) {          throw new ScopeException("invalid rollup expression at position " + pos + ": the index specified ("+ index+ ") is not defined");        }        rollup.setCol(index);        rollup.setPosition(position);      } catch (      NumberFormatException e) {        throw new ScopeException("invalid rollup expression at position " + pos + ": must be a valid indexe N or the expression FIRST(N) or LAST(N) to set the rollup position");      }      rollups.add(rollup);    }    query.setRollups(rollups);  }  if (limit != null && limit > 0)   query.setLimit(limit);  if (offset != null && offset > 0)   query.setOffset(offset);  if (beyondLimit != null && beyondLimit.length > 0) {    query.setBeyondLimit(new ArrayList<String>());    for (    String value : beyondLimit) {      if (value != null && value.length() > 0)       query.getBeyondLimit().add(value);    }  }  if (maxResults != null && maxResults > 0)   query.setMaxResults(maxResults);  if (startIndex != null && startIndex > 0)   query.setStartIndex(startIndex);  if (lazy != null)   query.setLazy(lazy);  if (style != null)   query.setStyle(style);  return query;}  }
class C{  void close(int contextPrec,int ownPrec) throws IOException {  if (ownPrec < contextPrec)   out.write(")");}  }
class C{  public void addTag(String text){  addTag(text,mChildViews.size());}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  allocateElements(size);  head=0;  tail=size;  for (int i=0; i < size; i++)   elements[i]=s.readObject();}  }
class C{  public void unsetId(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,ID_ISSET_ID);}  }
class C{  private void drawBetterImage(Graphics g,int yLoc){  int xLoc=100;  int delta=(int)(SCALE_FACTOR * FULL_SIZE);  for (int scaledSize=FULL_SIZE; scaledSize > 0; scaledSize-=delta) {    Image scaledImage=getOptimalScalingImage(originalImage,FULL_SIZE,scaledSize);    g.drawImage(scaledImage,xLoc,yLoc + (FULL_SIZE - scaledSize) / 2,null);    xLoc+=scaledSize + 20;  }}  }
class C{  public void removeObserver(final Observer observer){  observers.remove(observer);}  }
class C{  public static void clearWinContext(int WindowNo){  clearWinContext(getCtx(),WindowNo);}  }
class C{  public static <K,V>Map<K,V> singletonMap(K key,V value){  return new SingletonMap<K,V>(key,value);}  }
class C{  private void readAndSetPreference(String name,byte typeId,DataInputStream reader,Editor editor) throws IOException {  boolean save=true;  if (doNotBackup.contains(name)) {    save=false;  }switch (typeId) {case ContentTypeIds.BOOLEAN_TYPE_ID:    boolean booleanValue=reader.readBoolean();  if (save) {    editor.putBoolean(name,booleanValue);  }return;case ContentTypeIds.LONG_TYPE_ID:long longValue=reader.readLong();if (save) {editor.putLong(name,longValue);}return;case ContentTypeIds.FLOAT_TYPE_ID:float floatValue=reader.readFloat();if (save) {editor.putFloat(name,floatValue);}return;case ContentTypeIds.INT_TYPE_ID:int intValue=reader.readInt();if (save) {editor.putInt(name,intValue);}return;case ContentTypeIds.STRING_TYPE_ID:String utfValue=reader.readUTF();if (save) {editor.putString(name,utfValue);}return;}}  }
class C{  public Environment(){  this(null);}  }
class C{  @Bean public PlatformTransactionManager transactionManager(final EntityManagerFactory emf){  final JpaTransactionManager txManager=new JpaTransactionManager();  txManager.setEntityManagerFactory(emf);  return txManager;}  }
class C{  public QuasiRandomColors(){  colorCache=new HashMap<Integer,Color>();  colorVariance=new float[]{0.00f,1.00f,0.75f,0.25f,0.25f,0.75f};}  }
class C{  public String productSummary(MPPProductBOM bom){  String value=bom.getValue();  String name=bom.get_Translation(MPPProductBOM.COLUMNNAME_Name);  StringBuffer sb=new StringBuffer(value);  if (name != null && !name.equals(value))   sb.append("_").append(name);  return sb.toString();}  }
class C{  public void translateRectInScreenToAppWindow(Rect rect){  rect.scale(applicationInvertedScale);}  }
class C{  public static SupportedCountry findOrCreate(DataService mgr,String countryCode) throws NonUniqueBusinessKeyException {  SupportedCountry result=(SupportedCountry)mgr.find(new SupportedCountry(countryCode));  if (result == null) {    result=persistCountry(mgr,countryCode);  }  return result;}  }
class C{  public final CC x2(String x2){  return corrPos(x2,2);}  }
class C{  @HLEFunction(nid=0x5F10D406,version=150) public void sceKernelCpuResumeIntr(int flagInterrupts){  hleKernelCpuResumeIntr(flagInterrupts);}  }
class C{  public boolean containsImage(GliderImage image){  return image != null && this.imageTable.contains(image);}  }
class C{  public DViewCertCsrPem(JDialog parent,String title,PKCS10CertificationRequest pkcs10Csr) throws CryptoException {  super(parent,title,ModalityType.DOCUMENT_MODAL);  this.pkcs10Csr=pkcs10Csr;  initComponents();}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  if (DBG)   log("writeToParcel(Parcel, int): " + toString());  dest.writeInt(mNetworkId);  dest.writeInt(mSystemId);  dest.writeInt(mBasestationId);  dest.writeInt(mLongitude);  dest.writeInt(mLatitude);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.PATTERN_CHARACTER__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);}return super.eIsSet(featureID);}  }
class C{  public void move(MouseEvent e){  Point2D pnt=getProjectionPoint(e);  int x=(int)pnt.getX();  int y=(int)pnt.getY();  if (line.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {    gpm=new OffsetGrabPoint(x,y);    gpm.addGrabPoint(gp1);    gpm.addGrabPoint(gp2);  } else {    gpm=gpo;    gpm.set(x,y);    gpm.updateOffsets();  }  movingPoint=gpm;}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(AxisLocation.TOP_OR_RIGHT)) {    return AxisLocation.TOP_OR_RIGHT;  } else   if (this.equals(AxisLocation.BOTTOM_OR_RIGHT)) {    return AxisLocation.BOTTOM_OR_RIGHT;  } else   if (this.equals(AxisLocation.TOP_OR_LEFT)) {    return AxisLocation.TOP_OR_LEFT;  } else   if (this.equals(AxisLocation.BOTTOM_OR_LEFT)) {    return AxisLocation.BOTTOM_OR_LEFT;  }  return null;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData && z1 != 0) {          outputFile.setValue(row,col,1 / z1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void initialize(Instances dataset,int capacity){  if (capacity < 0) {    capacity=0;  }  m_ClassIndex=dataset.m_ClassIndex;  m_RelationName=dataset.m_RelationName;  m_Attributes=dataset.m_Attributes;  m_Instances=new ArrayList<Instance>(capacity);}  }
class C{  public static void initQuirksList() throws IOException {  String userDir=System.getProperty("user.dir");  if (!userDir.endsWith(File.separator)) {    userDir+=File.separator;  }  String filePath=Configuration.dataDir().getAbsolutePath() + File.separator + "canonUnitQuirks.xml";  canonQuirkMap=loadQuirksFile(filePath);  filePath=userDir + "mmconf" + File.separator+ "unitQuirksOverride.xml";  customQuirkMap=loadQuirksFile(filePath);  initialized.set(true);}  }
class C{  protected void addVM(int pid,RemoteDUnitVMIF client){  VM vm=new VM(this,pid,client);  this.vms.add(vm);}  }
class C{  public ExtendedGSSContext x(){  return x;}  }
class C{  protected void applyToBlockContainer(BlockContainer bc){  Iterator iterator=bc.getBlocks().iterator();  while (iterator.hasNext()) {    Block b=(Block)iterator.next();    applyToBlock(b);  }}  }
class C{  public static byte[] randomBytes(char len){  byte[] data=new byte[len];  for (int i=0; i < len; i++) {    data[i]=randomByte();  }  return data;}  }
class C{  protected void onException(final Exception e){}  }
class C{  public FencedAtom(Atom base,SymbolAtom l,SymbolAtom r){  this(base,l,null,r);}  }
class C{  public static Object buildTwoDimensionalArray(int methodId,int dim0,int dim1,RVMArray arrayType){  RVMMethod method=MemberReference.getMethodRef(methodId).peekResolvedMethod();  if (VM.VerifyAssertions)   VM._assert(method != null);  if (!arrayType.isInstantiated()) {    arrayType.resolve();    arrayType.instantiate();  }  Object[] newArray=(Object[])resolvedNewArray(dim0,arrayType);  RVMArray innerArrayType=arrayType.getElementType().asArray();  if (!innerArrayType.isInstantiated()) {    innerArrayType.resolve();    innerArrayType.instantiate();  }  for (int i=0; i < dim0; i++) {    newArray[i]=resolvedNewArray(dim1,innerArrayType);  }  return newArray;}  }
class C{  public int addAlias(Alias alias){  if (alias != null) {    mAliases.add(alias);    int index=mAliases.size() - 1;    fireTableRowsInserted(index,index);    broadcast(new AliasEvent(alias,Event.ADD));    return index;  }  return -1;}  }
class C{  public Sorter(Comparator<Description> comparator){  this.comparator=comparator;}  }
class C{  public static <T>T checkNotNull(T reference){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  private void init(){  timeOut=Integer.parseInt(Configurator.getInstance().getProperty(ConfigurationKeys.KEY_SERVER_CACHE_ENTRY_TIMEOUT)) * 1000;}  }
class C{  public void shareText(CharSequence text){  Intent intent=new Intent();  intent.addCategory(Intent.CATEGORY_DEFAULT);  intent.setAction(BS_PACKAGE + ".ENCODE");  intent.putExtra("ENCODE_TYPE","TEXT_TYPE");  intent.putExtra("ENCODE_DATA",text);  String targetAppPackage=findTargetAppPackage(intent);  if (targetAppPackage == null) {    showDownloadDialog();  } else {    intent.setPackage(targetAppPackage);    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);    activity.startActivity(intent);  }}  }
class C{  private ZyNodeBuilder(){}  }
class C{  public CoalesceExpression add(Expression expression){  this.getChildren().add(expression);  return this;}  }
class C{  @Override public void paintComponent(Graphics g){  Graphics2D g2d=(Graphics2D)g;  GradientPaint gradient=new GradientPaint(0,0,color1,getWidth(),getHeight(),color2);  g2d.setPaint(gradient);  g.fillRect(0,0,this.getWidth(),this.getHeight());}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  ModelPackage theModelPackage=(ModelPackage)EPackage.Registry.INSTANCE.getEPackage(ModelPackage.eNS_URI);  InformationModelPackage theInformationModelPackage=(InformationModelPackage)EPackage.Registry.INSTANCE.getEPackage(InformationModelPackage.eNS_URI);  FunctionblockPackage theFunctionblockPackage=(FunctionblockPackage)EPackage.Registry.INSTANCE.getEPackage(FunctionblockPackage.eNS_URI);  DatatypePackage theDatatypePackage=(DatatypePackage)EPackage.Registry.INSTANCE.getEPackage(DatatypePackage.eNS_URI);  mappingModelEClass.getESuperTypes().add(theModelPackage.getModel());  infoModelMappingModelEClass.getESuperTypes().add(this.getMappingModel());  infoModelMappingRuleEClass.getESuperTypes().add(this.getMappingRule());  infomodelSourceEClass.getESuperTypes().add(this.getSource());  infoModelPropertySourceEClass.getESuperTypes().add(this.getInfomodelSource());  infoModelAttributeSourceEClass.getESuperTypes().add(this.getInfomodelSource());  functionBlockMappingModelEClass.getESuperTypes().add(this.getMappingModel());  functionBlockMappingRuleEClass.getESuperTypes().add(this.getMappingRule());  functionBlockSourceEClass.getESuperTypes().add(this.getSource());  functionBlockPropertySourceEClass.getESuperTypes().add(this.getFunctionBlockSource());  functionBlockAttributeSourceEClass.getESuperTypes().add(this.getFunctionBlockSource());  configurationSourceEClass.getESuperTypes().add(this.getFunctionBlockPropertySource());  statusSourceEClass.getESuperTypes().add(this.getFunctionBlockPropertySource());  operationSourceEClass.getESuperTypes().add(this.getFunctionBlockSource());  eventSourceEClass.getESuperTypes().add(this.getFunctionBlockSource());  entityMappingModelEClass.getESuperTypes().add(this.getDataTypeMappingModel());  entityMappingRuleEClass.getESuperTypes().add(this.getMappingRule());  entitySourceEClass.getESuperTypes().add(this.getSource());  entityPropertySourceEClass.getESuperTypes().add(this.getEntitySource());  entityAttributeSourceEClass.getESuperTypes().add(this.getEntitySource());  enumMappingModelEClass.getESuperTypes().add(this.getDataTypeMappingModel());  enumMappingRuleEClass.getESuperTypes().add(this.getMappingRule());  enumSourceEClass.getESuperTypes().add(this.getSource());  enumPropertySourceEClass.getESuperTypes().add(this.getEnumSource());  enumAttributeSourceEClass.getESuperTypes().add(this.getEnumSource());  dataTypeMappingModelEClass.getESuperTypes().add(this.getMappingModel());  referenceTargetEClass.getESuperTypes().add(this.getTarget());  stereoTypeTargetEClass.getESuperTypes().add(this.getTarget());  faultSourceEClass.getESuperTypes().add(this.getFunctionBlockPropertySource());  initEClass(mappingModelEClass,MappingModel.class,"MappingModel",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getMappingModel_Rules(),this.getMappingRule(),null,"rules",null,0,-1,MappingModel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getMappingModel_TargetPlatform(),ecorePackage.getEString(),"targetPlatform",null,0,1,MappingModel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(infoModelMappingModelEClass,InfoModelMappingModel.class,"InfoModelMappingModel",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(infoModelMappingRuleEClass,InfoModelMappingRule.class,"InfoModelMappingRule",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(infomodelSourceEClass,InfomodelSource.class,"InfomodelSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getInfomodelSource_Model(),theInformationModelPackage.getInformationModel(),null,"model",null,0,1,InfomodelSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(infoModelPropertySourceEClass,InfoModelPropertySource.class,"InfoModelPropertySource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getInfoModelPropertySource_Property(),theInformationModelPackage.getFunctionblockProperty(),null,"property",null,0,1,InfoModelPropertySource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(infoModelAttributeSourceEClass,InfoModelAttributeSource.class,"InfoModelAttributeSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getInfoModelAttributeSource_Attribute(),this.getModelAttribute(),"attribute",null,0,1,InfoModelAttributeSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(functionBlockMappingModelEClass,FunctionBlockMappingModel.class,"FunctionBlockMappingModel",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(functionBlockMappingRuleEClass,FunctionBlockMappingRule.class,"FunctionBlockMappingRule",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(functionBlockSourceEClass,FunctionBlockSource.class,"FunctionBlockSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getFunctionBlockSource_Model(),theFunctionblockPackage.getFunctionblockModel(),null,"model",null,0,1,FunctionBlockSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(functionBlockPropertySourceEClass,FunctionBlockPropertySource.class,"FunctionBlockPropertySource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(functionBlockAttributeSourceEClass,FunctionBlockAttributeSource.class,"FunctionBlockAttributeSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFunctionBlockAttributeSource_Attribute(),this.getModelAttribute(),"attribute",null,0,1,FunctionBlockAttributeSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(configurationSourceEClass,ConfigurationSource.class,"ConfigurationSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getConfigurationSource_Property(),theDatatypePackage.getProperty(),null,"property",null,0,1,ConfigurationSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(statusSourceEClass,StatusSource.class,"StatusSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStatusSource_Property(),theDatatypePackage.getProperty(),null,"property",null,0,1,StatusSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(operationSourceEClass,OperationSource.class,"OperationSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getOperationSource_Operation(),theFunctionblockPackage.getOperation(),null,"operation",null,0,1,OperationSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(eventSourceEClass,EventSource.class,"EventSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEventSource_Event(),theFunctionblockPackage.getEvent(),null,"event",null,0,1,EventSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getEventSource_EventProperty(),theDatatypePackage.getProperty(),null,"eventProperty",null,0,1,EventSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(entityMappingModelEClass,EntityMappingModel.class,"EntityMappingModel",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(entityMappingRuleEClass,EntityMappingRule.class,"EntityMappingRule",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(entitySourceEClass,EntitySource.class,"EntitySource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEntitySource_Model(),theDatatypePackage.getEntity(),null,"model",null,0,1,EntitySource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(entityPropertySourceEClass,EntityPropertySource.class,"EntityPropertySource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEntityPropertySource_Property(),theDatatypePackage.getProperty(),null,"property",null,0,1,EntityPropertySource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(entityAttributeSourceEClass,EntityAttributeSource.class,"EntityAttributeSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getEntityAttributeSource_Attribute(),this.getModelAttribute(),"attribute",null,0,1,EntityAttributeSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(enumMappingModelEClass,EnumMappingModel.class,"EnumMappingModel",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(enumMappingRuleEClass,EnumMappingRule.class,"EnumMappingRule",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(enumSourceEClass,EnumSource.class,"EnumSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEnumSource_Model(),theDatatypePackage.getEnum(),null,"model",null,0,1,EnumSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(enumPropertySourceEClass,EnumPropertySource.class,"EnumPropertySource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEnumPropertySource_Property(),theDatatypePackage.getEnumLiteral(),null,"property",null,0,1,EnumPropertySource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(enumAttributeSourceEClass,EnumAttributeSource.class,"EnumAttributeSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getEnumAttributeSource_Attribute(),this.getModelAttribute(),"attribute",null,0,1,EnumAttributeSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(dataTypeMappingModelEClass,DataTypeMappingModel.class,"DataTypeMappingModel",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(targetEClass,Target.class,"Target",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(referenceTargetEClass,ReferenceTarget.class,"ReferenceTarget",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReferenceTarget_MappingModel(),this.getMappingModel(),null,"mappingModel",null,0,1,ReferenceTarget.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(stereoTypeTargetEClass,StereoTypeTarget.class,"StereoTypeTarget",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getStereoTypeTarget_Name(),ecorePackage.getEString(),"name",null,0,1,StereoTypeTarget.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStereoTypeTarget_Attributes(),this.getAttribute(),null,"attributes",null,0,-1,StereoTypeTarget.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(attributeEClass,Attribute.class,"Attribute",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getAttribute_Name(),ecorePackage.getEString(),"name",null,0,1,Attribute.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getAttribute_Value(),ecorePackage.getEString(),"value",null,0,1,Attribute.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(sourceEClass,Source.class,"Source",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(faultSourceEClass,FaultSource.class,"FaultSource",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getFaultSource_Property(),theDatatypePackage.getProperty(),null,"property",null,0,1,FaultSource.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(mappingRuleEClass,MappingRule.class,"MappingRule",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getMappingRule_Target(),this.getTarget(),null,"target",null,0,1,MappingRule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getMappingRule_Sources(),this.getSource(),null,"sources",null,0,-1,MappingRule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,!IS_ORDERED);  initEEnum(modelAttributeEEnum,ModelAttribute.class,"ModelAttribute");  addEEnumLiteral(modelAttributeEEnum,ModelAttribute.NAME);  addEEnumLiteral(modelAttributeEEnum,ModelAttribute.NAMESPACE);  addEEnumLiteral(modelAttributeEEnum,ModelAttribute.VERSION);  addEEnumLiteral(modelAttributeEEnum,ModelAttribute.DISPLAYNAME);  addEEnumLiteral(modelAttributeEEnum,ModelAttribute.DESCRIPTION);  addEEnumLiteral(modelAttributeEEnum,ModelAttribute.CATEGORY);  createResource(eNS_URI);}  }
class C{  private void registerListener(TrackDataType trackDataType){switch (trackDataType) {case TRACKS_TABLE:    dataSource.registerContentObserver(TracksColumns.CONTENT_URI,tracksTableObserver);  break;case WAYPOINTS_TABLE:dataSource.registerContentObserver(WaypointsColumns.CONTENT_URI,waypointsTableObserver);break;case SAMPLED_IN_TRACK_POINTS_TABLE:dataSource.registerContentObserver(TrackPointsColumns.CONTENT_URI,trackPointsTableObserver);break;case SAMPLED_OUT_TRACK_POINTS_TABLE:break;case PREFERENCE:dataSource.registerOnSharedPreferenceChangeListener(preferenceListener);break;default :break;}}  }
class C{  public Surface translate(float x,float y){  tx().translate(x,y);  return this;}  }
class C{  protected void sequence_AnnotatedPropertyAssignment_BogusTypeRefFragment_ColonSepTypeRef_GetterHeader_PropertyGetterDeclaration(ISerializationContext context,PropertyGetterDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:00.118 -0500",hash_original_method="FEB84A328EE7F3166E4E0FA71F02D2E0",hash_generated_method="A8A19550D0A1B28AF44CDAE5D0E2399B") private static String limit(int lower,int upper){  if ((lower < 0) || (upper <= 0) || (upper < lower)) {    throw new IllegalArgumentException();  }  return "{" + lower + ","+ upper+ "}";}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.BOOL_EXPR___LITERAL_1:    return LITERAL_1_EDEFAULT == null ? literal_1 != null : !LITERAL_1_EDEFAULT.equals(literal_1);case UmplePackage.BOOL_EXPR___NAME_1:  return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.BOOL_EXPR___EQUALITY_OP_1:return equalityOp_1 != null && !equalityOp_1.isEmpty();case UmplePackage.BOOL_EXPR___INDEX_1:return INDEX_1_EDEFAULT == null ? index_1 != null : !INDEX_1_EDEFAULT.equals(index_1);}return super.eIsSet(featureID);}  }
class C{  public T caseConditionalExpression(ConditionalExpression object){  return null;}  }
class C{  @Override public GraphQuery has(final String key,final Predicate predicate,final Object value){  if (!knownPredicates.contains(predicate.getClass())) {    throw new IllegalArgumentException();  }  criteria.add(new Has(key,value,BigdataPredicate.toBigdataPredicate(predicate)));  return this;}  }
class C{  public boolean isContentsEmpty(){  return contents.isEmpty();}  }
class C{  public Property weekyear(){  return new Property(this,getChronology().weekyear());}  }
class C{  public static int maxProfitB(int[] prices){  if (prices == null || prices.length < 2) {    return 0;  }  int min=prices[0];  int max=0;  int len=prices.length;  int[] history=new int[len];  for (int i=0; i < len - 1; i++) {    min=min < prices[i] ? min : prices[i];    if (i > 0) {      history[i]=Math.max(history[i - 1],prices[i] - min);      max=history[i] > max ? history[i] : max;    }  }  return max;}  }
class C{  public static <T>Set<T> eachWithIndex(Set<T> self,@ClosureParams(value=FromString.class,options="T,java.lang.Integer") Closure closure){  return (Set<T>)eachWithIndex((Iterable<T>)self,closure);}  }
class C{  public void testPipelineWithEvents() throws Exception {  TungstenProperties config=helper.createRuntimeWithStore(1);  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());  Future<ReplDBMSHeader> wait=pipeline.watchForCommittedSequenceNumber(9,false);  ReplDBMSHeader lastEvent=wait.get(10,TimeUnit.SECONDS);  assertEquals("Expected 10 sequence numbers",9,lastEvent.getSeqno());  assertEquals("committed event seqno",9,pipeline.getLastAppliedEvent().getSeqno());  assertEquals("applied seqno",9,pipeline.getLastAppliedSeqno());  assertEquals("extracted seqno",9,pipeline.getLastExtractedSeqno());  List<ShardProgress> shards=pipeline.getShardProgress();  assertEquals("empty shard list",1,shards.size());  List<TaskProgress> tasks=pipeline.getTaskProgress();  assertEquals("two tasks in list",2,tasks.size());  TaskProgress task=tasks.get(1);  assertEquals("applied event",lastEvent,task.getLastCommittedEvent());  assertEquals("committed event seqno",lastEvent.getSeqno(),task.getLastCommittedEvent().getSeqno());  assertEquals("events processed on task",10,task.getEventCount());  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  public Instrumenter attachR1Collector(){  includeR1=true;  return this;}  }
class C{  private void quadFullScreenVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  @Override public void initCPTs(BayesNet bayesNet) throws Exception {  bayesNet.m_Distributions=new Estimator[bayesNet.m_Instances.numAttributes()][2];}  }
class C{  public static List<CliFunctionResult> cleanResults(List<?> results){  List<CliFunctionResult> returnResults=new ArrayList<CliFunctionResult>(results.size());  for (  Object result : results) {    if (result instanceof CliFunctionResult) {      returnResults.add((CliFunctionResult)result);    }  }  Collections.sort(returnResults);  return returnResults;}  }
class C{  public RenameEnumConstProcessor(JavaRefactoringArguments arguments,RefactoringStatus status){  super(null);  RefactoringStatus initializeStatus=initialize(arguments);  status.merge(initializeStatus);}  }
class C{  public PolicyQualifierInfoTableModel(){  columnNames=new String[1];  columnNames[0]=res.getString("PolicyQualifierInfoTableModel.PolicyQualifierInfoColumn");  data=new Object[0][0];}  }
class C{  @Override public String readLine() throws IOException {  if (this.pointer >= this.data.length - 1) {    return null;  } else {    final StringBuilder buf=new StringBuilder();    int c;    while ((c=read()) >= 0) {      if ((c == 10) || (c == 13)) {        if (((peek() == 10) || (peek() == 13)) && (peek() != c)) {          read();        }        break;      }      buf.append((char)c);    }    return buf.toString();  }}  }
class C{  public static void putbytes2Uint8s(char[] destUint8s,byte[] srcBytes,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destUint8s[destOffset + i]=convertByte2Uint8(srcBytes[srcOffset + i]);  }}  }
class C{  protected SMMessage(int sender,int cid,int type,ApplicationState state,View view,int regency,int leader){  super(sender);  this.state=state;  this.view=view;  this.cid=cid;  this.type=type;  this.sender=sender;  this.regency=regency;  this.leader=leader;  if (type == TOMUtil.TRIGGER_SM_LOCALLY && sender == -1)   this.TRIGGER_SM_LOCALLY=true; else   this.TRIGGER_SM_LOCALLY=false;}  }
class C{  @Override public IMultiPoint[] generate(int size){  return convert(pointGen.generate(size));}  }
class C{  public short calcHeaderLength(DbfTableModel model){  int length=0;  length+=model.getColumnCount() * 32;  length+=32;  length+=1;  Integer integer=new Integer(length);  return integer.shortValue();}  }
class C{  protected BlockConsistencyGroup findConsistencyGroup(String consistencyGroupId,String openstackTenantId){  BlockConsistencyGroup blockConsistencyGroup=(BlockConsistencyGroup)getCinderHelper().queryByTag(URI.create(consistencyGroupId),getUserFromContext(),BlockConsistencyGroup.class);  return blockConsistencyGroup;}  }
class C{  public Item pop(){  if (isEmpty())   throw new NoSuchElementException("Stack underflow");  Item item=first.item;  first=first.next;  n--;  return item;}  }
class C{  public Bucket createBucket(CreateBucketRequest createBucketRequest) throws OSSException, ClientException {  assertParameterNotNull(createBucketRequest,"createBucketRequest");  String bucketName=createBucketRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> headers=new HashMap<String,String>();  addOptionalACLHeader(headers,createBucketRequest.getCannedACL());  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.PUT).setBucket(bucketName).setHeaders(headers).setInputStreamWithLength(createBucketRequestMarshaller.marshall(createBucketRequest)).setOriginalRequest(createBucketRequest).build();  doOperation(request,emptyResponseParser,bucketName,null);  return new Bucket(bucketName);}  }
class C{  private static Pair<String,String> postIndexedROR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String index=environment.getNextVariableString();  final String tmpVar=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,"-" + Integer.decode(immediateNodeValue),dw,tmpVar1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(32 - Integer.decode(immediateNodeValue)),dw,tmpVar2));  instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpVar1,dw,tmpVar2,dw,tmpVar3));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar3,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public boolean selectAll(double x,double y){  beginMark=textPainter.selectFirst(this);  endMark=textPainter.selectLast(this);  return true;}  }
class C{  protected final boolean handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,stateCount[2],stateCountTotal);  if (!Float.isNaN(centerI)) {    centerJ=crossCheckHorizontal((int)centerJ,(int)centerI,stateCount[2],stateCountTotal);    if (!Float.isNaN(centerJ)) {      float estimatedModuleSize=(float)stateCountTotal / 7.0f;      boolean found=false;      for (int index=0; index < possibleCenters.size(); index++) {        FinderPattern center=possibleCenters.get(index);        if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {          possibleCenters.set(index,center.combineEstimate(centerI,centerJ,estimatedModuleSize));          found=true;          break;        }      }      if (!found) {        FinderPattern point=new FinderPattern(centerJ,centerI,estimatedModuleSize);        possibleCenters.add(point);        if (resultPointCallback != null) {          resultPointCallback.foundPossibleResultPoint(point);        }      }      return true;    }  }  return false;}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public Type pingType(final Type type_){  Type typex=type_;  if ("void*".equals(typex.name) && getTypeByName(typex.name) != null)   return getTypeByName(typex.name);  if (typex.name != null)   typex=Type.merge(typex,getTypeByName(typex.name)); else   typex=Type.merge(typex,getTypeByNTypes(new Pair(typex.type32,typex.type64)));  putTypeByName(typex.name,typex);  putTypeByNTypes(new Pair(typex.type32,typex.type64),typex);  return typex;}  }
class C{  public static SmashQueue buildSmashQueue(Context context){  try {    String packageName=context.getPackageName();    PackageInfo info=context.getPackageManager().getPackageInfo(packageName,0);    sCachedUserAgent=packageName + "/" + info.versionCode;  } catch (  PackageManager.NameNotFoundException ignored) {  }  SmashQueue queue=new SmashQueue();  queue.start();  return queue;}  }
class C{  private int lastIndexOf(int elem){  int boffset=m_firstFree & m_MASK;  for (int index=m_firstFree >>> m_SHIFT; index >= 0; --index) {    int[] block=m_map[index];    if (block != null)     for (int offset=boffset; offset >= 0; --offset)     if (block[offset] == elem)     return offset + index * m_blocksize;    boffset=0;  }  return -1;}  }
class C{  public void showNext(){  setDisplayedChild(mWhichChild + 1);}  }
class C{  final void putFloat(int offset,float value){  unsafe.putFloat(offset + address,value);}  }
class C{  public Sequence(Class<?>... types){  super(types[types.length - 1],types);}  }
class C{  @Override public void closingCancel(){}  }
class C{  @Deprecated public void write(DataOutput out) throws IOException {  this.comparator.write(out);}  }
class C{  public AverageTrueRangeSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  public static String encrypt(String text) throws GeneralSecurityException {  return new String(encrypt(text.getBytes()));}  }
class C{  @Override public boolean exists(){  return getJar().exists(getPath());}  }
class C{  @Override public boolean mayIntersect(S2Cell cell){  if (numVertices() == 0) {    return false;  }  for (int i=0; i < numVertices(); ++i) {    if (cell.contains(vertex(i))) {      return true;    }  }  S2Point[] cellVertices=new S2Point[4];  for (int i=0; i < 4; ++i) {    cellVertices[i]=cell.getVertex(i);  }  for (int j=0; j < 4; ++j) {    S2EdgeUtil.EdgeCrosser crosser=new S2EdgeUtil.EdgeCrosser(cellVertices[j],cellVertices[(j + 1) & 3],vertex(0));    for (int i=1; i < numVertices(); ++i) {      if (crosser.robustCrossing(vertex(i)) >= 0) {        return true;      }    }  }  return false;}  }
class C{  public void add(int index,int element){  checkRangeIncludingEndpoint(index);  ensureCapacity(size + 1);  int numtomove=size - index;  System.arraycopy(array,index,array,index + 1,numtomove);  array[index]=element;  size++;}  }
class C{  public void load(PolicyMappings policyMappings){  ASN1Sequence policyMappingsSeq=(ASN1Sequence)policyMappings.toASN1Primitive();  ASN1Encodable[] asn1EncArray=policyMappingsSeq.toArray();  PolicyMapping[] policyMappingsArray=new PolicyMapping[asn1EncArray.length];  for (int i=0; i < asn1EncArray.length; i++) {    policyMappingsArray[i]=PolicyMapping.getInstance(asn1EncArray[i]);  }  Arrays.sort(policyMappingsArray,new IssuerDomainPolicyComparator());  data=new Object[policyMappingsArray.length][2];  int i=0;  for (  PolicyMapping policyMapping : policyMappingsArray) {    data[i][0]=policyMapping;    data[i][1]=policyMapping;    i++;  }  fireTableDataChanged();}  }
class C{  public static void addParserContext(String[] mimeTypes,XMLEventParserContext prototypeContext){  if (mimeTypes == null || mimeTypes.length == 0) {    String message=Logging.getMessage("nullValue.MimeTypeListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (prototypeContext == null) {    String message=Logging.getMessage("nullValue.ParserContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  parsers.add(new ParserTableEntry(mimeTypes,prototypeContext));}  }
class C{  LootmodeActionListener(String mode){  this.mode=mode;}  }
class C{  protected BreakIterator parseBreakIterator(String type,Locale locale){  if (type == null || "SENTENCE".equals(type)) {    return BreakIterator.getSentenceInstance(locale);  } else   if ("LINE".equals(type)) {    return BreakIterator.getLineInstance(locale);  } else   if ("WORD".equals(type)) {    return BreakIterator.getWordInstance(locale);  } else   if ("CHARACTER".equals(type)) {    return BreakIterator.getCharacterInstance(locale);  } else   if ("WHOLE".equals(type)) {    return new WholeBreakIterator();  } else {    throw new IllegalArgumentException("Unknown " + HighlightParams.BS_TYPE + ": "+ type);  }}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public static String mangleNativeMethod(String owner,String name,String desc){  StringBuilder sb=new StringBuilder();  sb.append("Java_");  sb.append(mangleNativeString(owner));  sb.append("_");  sb.append(mangleNativeString(name));  if (desc != null) {    sb.append("__");    sb.append(mangleNativeString(desc.substring(1,desc.lastIndexOf(')'))));  }  return sb.toString();}  }
class C{  public boolean maybeDirty(){  return !_mainHashShared;}  }
class C{  public void firePan(int direction,float amount){  if (direction < PanEvent.PAN_FIRST || direction > PanEvent.PAN_LAST) {    throw new IllegalArgumentException("Bad value, " + direction + " for direction in "+ "PanSupport.firePan()");  }  float az=PanEvent.dir2Az(direction);  firePan(az);}  }
class C{  public Class<? extends XtextEditor> bindXtextEditor(){  return N4MFEditor.class;}  }
class C{  private static void printPositionMenuHelp(){  System.out.println("<command> (<abbreviated command>) : <description>");  System.out.println("-------------------------------------------------");  System.out.println("list (l)           : list positions");  System.out.println("show (s)           : show position");  System.out.println("back (b)           : go back to previous menu");  System.out.println("transactions (t)   : go to the transactions menu");  System.out.println("help (h)           : help");  System.out.println("quit (q)           : quit");  System.out.println("");}  }
class C{  public void skipIgnored(int options){  if ((options & SKIP_WHITESPACE) != 0) {    for (; ; ) {      int a=_current();      if (!UCharacterProperty.isRuleWhiteSpace(a))       break;      _advance(UTF16.getCharCount(a));    }  }}  }
class C{  public CustomProperty(){  super(KEY);}  }
class C{  public static void main(String[] args){  TermStep fs=new TermStep();  TermStepInfo termStepInfo=fs.execute(args);  OozieUtil oozieUtil=new OozieUtil();  try {    oozieUtil.persistBeanData(termStepInfo,false);  } catch (  Exception e) {    LOGGER.error(e);    throw new MetadataException(e);  }}  }
class C{  public static boolean grOrEq(double a,double b){  return (b - a < SMALL);}  }
class C{  public InactiveState(DownloadInfoRunnable downloadInfoRunnable){  super(downloadInfoRunnable);}  }
class C{  public HierarchicalClusterModel(ClusterModel clusterModel){  rootNode=new HierarchicalClusterNode("root");  for (  Cluster cluster : clusterModel.getClusters()) {    rootNode.addSubNode(new HierarchicalClusterLeafNode(cluster.getClusterId(),cluster.getExampleIds()));  }}  }
class C{  @Override public synchronized boolean isValid(int timeout){  try {    debugCodeCall("isValid",timeout);    if (session == null || session.isClosed()) {      return false;    }    getTransactionIsolation();    return true;  } catch (  Exception e) {    logAndConvert(e);    return false;  }}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public StorageIndex(){  this.version=VERSION_NO;}  }
class C{  public static <T>int createTableIfNotExists(ConnectionSource connectionSource,Class<T> dataClass) throws SQLException {  return createTable(connectionSource,dataClass,true);}  }
class C{  public void updateSummaries(){  PrefServiceBridge prefServiceBridge=PrefServiceBridge.getInstance();  CheckBoxPreference navigationErrorPref=(CheckBoxPreference)findPreference(PREF_NAVIGATION_ERROR);  navigationErrorPref.setChecked(prefServiceBridge.isResolveNavigationErrorEnabled());  CheckBoxPreference searchSuggestionsPref=(CheckBoxPreference)findPreference(PREF_SEARCH_SUGGESTIONS);  searchSuggestionsPref.setChecked(prefServiceBridge.isSearchSuggestEnabled());  CheckBoxPreference extendedReportingPref=(CheckBoxPreference)findPreference(PREF_SAFE_BROWSING_EXTENDED_REPORTING);  if (extendedReportingPref != null) {    extendedReportingPref.setChecked(prefServiceBridge.isSafeBrowsingExtendedReportingEnabled());  }  CheckBoxPreference safeBrowsingPref=(CheckBoxPreference)findPreference(PREF_SAFE_BROWSING);  if (safeBrowsingPref != null) {    safeBrowsingPref.setChecked(prefServiceBridge.isSafeBrowsingEnabled());  }  Preference doNotTrackPref=findPreference(PREF_DO_NOT_TRACK);  if (prefServiceBridge.isDoNotTrackEnabled()) {    doNotTrackPref.setSummary(getActivity().getResources().getText(R.string.text_on));  } else {    doNotTrackPref.setSummary(getActivity().getResources().getText(R.string.text_off));  }  Preference contextualPref=findPreference(PREF_CONTEXTUAL_SEARCH);  if (contextualPref != null) {    if (prefServiceBridge.isContextualSearchDisabled()) {      contextualPref.setSummary(getActivity().getResources().getText(R.string.text_off));    } else {      contextualPref.setSummary(getActivity().getResources().getText(R.string.text_on));    }  }  PrivacyPreferencesManager privacyPrefManager=PrivacyPreferencesManager.getInstance(getActivity());  if (privacyPrefManager.isCellularExperimentEnabled()) {    Preference usageAndCrashPref=findPreference(PREF_USAGE_AND_CRASH_REPORTING);    if (privacyPrefManager.isUsageAndCrashReportingEnabled()) {      usageAndCrashPref.setSummary(getActivity().getResources().getText(R.string.text_on));    } else {      usageAndCrashPref.setSummary(getActivity().getResources().getText(R.string.text_off));    }  }}  }
class C{  public static Sv2Command extractMessageType(LocoNetMessage m){  if (isSupportedSv2Message(m)) {    int msgCmd=m.getElement(SV2_SV_CMD_ELEMENT_INDEX);    for (    Sv2Command s : Sv2Command.values()) {      if (s.getCmd() == msgCmd) {        log.debug("LocoNet message has SV2 message command " + msgCmd);        return s;      }    }  }  return null;}  }
class C{  protected SQLException unsupported(String message) throws SQLException {  try {    throw DbException.getUnsupportedException(message);  } catch (  Exception e) {    return logAndConvert(e);  }}  }
class C{  public final void close(){  try {    log.info("Closing ...");    assert (writer != null);    writer.flush();    writer.close();    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=processDeploymentQueueDAO.totalRecordCount();    List<com.wipro.ats.bdre.md.dao.jpa.ProcessDeploymentQueue> jpaPdqList=processDeploymentQueueDAO.list(startPage,pageSize);    List<ProcessDeploymentQueue> processDeploymentQueues=new ArrayList<ProcessDeploymentQueue>();    for (    com.wipro.ats.bdre.md.dao.jpa.ProcessDeploymentQueue pdq : jpaPdqList) {      ProcessDeploymentQueue processDeploymentQueue=new ProcessDeploymentQueue();      processDeploymentQueue.setDeploymentId(pdq.getDeploymentId());      processDeploymentQueue.setProcessTypeId(pdq.getProcessType().getProcessTypeId());      processDeploymentQueue.setDeployStatusId((int)pdq.getDeployStatus().getDeployStatusId());      processDeploymentQueue.setStartTs(pdq.getStartTs());      processDeploymentQueue.setEndTs(pdq.getEndTs());      processDeploymentQueue.setInsertTs(pdq.getInsertTs());      processDeploymentQueue.setBusDomainId(pdq.getBusDomain().getBusDomainId());      processDeploymentQueue.setDeployScriptLocation(pdq.getDeployScriptLocation());      processDeploymentQueue.setUserName(pdq.getUserName());      processDeploymentQueue.setProcessId(pdq.getProcess().getProcessId());      processDeploymentQueue.setCounter(counter);      processDeploymentQueues.add(processDeploymentQueue);    }    for (    ProcessDeploymentQueue pdq : processDeploymentQueues) {      if (pdq.getEndTs() != null) {        pdq.setTableEndTs(DateConverter.dateToString(pdq.getEndTs()));      }      if (pdq.getStartTs() != null) {        pdq.setTableStartTs(DateConverter.dateToString(pdq.getStartTs()));      }      pdq.setTableInsertTs(DateConverter.dateToString(pdq.getInsertTs()));    }    restWrapper=new RestWrapper(processDeploymentQueues,RestWrapper.OK);    LOGGER.info("All records listed from ProcessDeploymentQueue by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  @Override public void debug(String format,Object argA,Object argB){  if (logger.isLoggable(Level.FINE)) {    FormattingTuple ft=MessageFormatter.format(format,argA,argB);    log(SELF,Level.FINE,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public Matrix4x3d add(Matrix4x3fc other){  return add(other,this);}  }
class C{  private void log(String str){  Log.i(this.getClass().getSimpleName(),"-----------------" + str);}  }
class C{  protected void prettyPrint(Reader in,Writer out) throws TranscoderException {  try {    PrettyPrinter pp=new PrettyPrinter();    NewlineValue nlv=(NewlineValue)hints.get(KEY_NEWLINE);    if (nlv != null) {      pp.setNewline(nlv.getValue());    }    Boolean b=(Boolean)hints.get(KEY_FORMAT);    if (b != null) {      pp.setFormat(b.booleanValue());    }    Integer i=(Integer)hints.get(KEY_TABULATION_WIDTH);    if (i != null) {      pp.setTabulationWidth(i.intValue());    }    i=(Integer)hints.get(KEY_DOCUMENT_WIDTH);    if (i != null) {      pp.setDocumentWidth(i.intValue());    }    DoctypeValue dtv=(DoctypeValue)hints.get(KEY_DOCTYPE);    if (dtv != null) {      pp.setDoctypeOption(dtv.getValue());    }    String s=(String)hints.get(KEY_PUBLIC_ID);    if (s != null) {      pp.setPublicId(s);    }    s=(String)hints.get(KEY_SYSTEM_ID);    if (s != null) {      pp.setSystemId(s);    }    s=(String)hints.get(KEY_XML_DECLARATION);    if (s != null) {      pp.setXMLDeclaration(s);    }    pp.print(in,out);    out.flush();  } catch (  IOException e) {    getErrorHandler().fatalError(new TranscoderException(e.getMessage()));  }}  }
class C{  public List<JCVariableDecl> Params(List<Type> argtypes,Symbol owner){  ListBuffer<JCVariableDecl> params=new ListBuffer<JCVariableDecl>();  MethodSymbol mth=(owner.kind == MTH) ? ((MethodSymbol)owner) : null;  if (mth != null && mth.params != null && argtypes.length() == mth.params.length()) {    for (    VarSymbol param : ((MethodSymbol)owner).params)     params.append(VarDef(param,null));  } else {    int i=0;    for (List<Type> l=argtypes; l.nonEmpty(); l=l.tail)     params.append(Param(paramName(i++),l.head,owner));  }  return params.toList();}  }
class C{  private boolean anyCharactersAreTheSame(char separator,char quotechar,char escape){  return isSameCharacter(separator,quotechar) || isSameCharacter(separator,escape) || isSameCharacter(quotechar,escape);}  }
class C{  public <E extends Layout,AE extends Array1D<E>>GenArray1D(Class<E> elementInterfaceClass,Class<AE> userDefinedArrayClass){  elementInterfaceClassName=ImplHelper.getInterfaceClassName(elementInterfaceClass);  elementImplClassName=ImplHelper.getImplClassName(elementInterfaceClass);  if (null == userDefinedArrayClass) {    arrayImplClassName=ImplHelper.getArray1DClassImplName(elementInterfaceClass);    arrayInterfaceClassName="com/ibm/layout/Array1D";    arrayInterfaceClassSig="L" + arrayInterfaceClassName + "<L"+ elementInterfaceClassName+ ";>;";  } else {    arrayImplClassName=ImplHelper.getImplClassName(userDefinedArrayClass);    arrayInterfaceClassName=userDefinedArrayClass.getName().replace('.','/');    arrayInterfaceClassSig=null;  }  dbgPrintNames();}  }
class C{  public static void add(List<String> options,char option,Object value){  add(options,"" + option,value);}  }
class C{  public static void main(String[] args){  MyPoint point1=new MyPoint();  MyPoint point2=new MyPoint(10,30.5);  System.out.println("The distance between (" + point1.getX() + ", "+ point1.getY()+ ") and ("+ point2.getX()+ ", "+ point2.getY()+ ") is: "+ point1.distance(point2));}  }
class C{  public void load(Element element,Object o){  log.warn("unexpected call of 2nd load form");}  }
class C{  public static CCSprite sprite(String filepath){  return new CCSprite(filepath);}  }
class C{  protected void installListeners(Component c){  installListeners(c,EventID.CONTAINER);  installListeners(c,EventID.FOCUS);  if (AWTEventMonitor.componentListener_private != null) {    installListeners(c,EventID.COMPONENT);  }  if (AWTEventMonitor.keyListener_private != null) {    installListeners(c,EventID.KEY);  }  if (AWTEventMonitor.mouseListener_private != null) {    installListeners(c,EventID.MOUSE);  }  if (AWTEventMonitor.mouseMotionListener_private != null) {    installListeners(c,EventID.MOTION);  }  if (AWTEventMonitor.windowListener_private != null) {    installListeners(c,EventID.WINDOW);  }  if (AWTEventMonitor.actionListener_private != null) {    installListeners(c,EventID.ACTION);  }  if (AWTEventMonitor.adjustmentListener_private != null) {    installListeners(c,EventID.ADJUSTMENT);  }  if (AWTEventMonitor.itemListener_private != null) {    installListeners(c,EventID.ITEM);  }  if (AWTEventMonitor.textListener_private != null) {    installListeners(c,EventID.TEXT);  }}  }
class C{  protected int weightChildNodes(Element rootEl){  int weight=0;  Element caption=null;  List<Element> pEls=new ArrayList<Element>(5);  for (  Element child : rootEl.children()) {    String ownText=child.ownText();    int ownTextLength=ownText.length();    if (ownTextLength < 20)     continue;    if (ownTextLength > 200)     weight+=Math.max(50,ownTextLength / 10);    if (child.tagName().equals("h1") || child.tagName().equals("h2")) {      weight+=30;    } else     if (child.tagName().equals("div") || child.tagName().equals("p")) {      weight+=calcWeightForChild(child,ownText);      if (child.tagName().equals("p") && ownTextLength > 50)       pEls.add(child);      if (child.className().toLowerCase().equals("caption"))       caption=child;    }  }  if (caption != null)   weight+=30;  if (pEls.size() >= 2) {    for (    Element subEl : rootEl.children()) {      if ("h1;h2;h3;h4;h5;h6".contains(subEl.tagName())) {        weight+=20;      } else       if ("table;li;td;th".contains(subEl.tagName())) {        addScore(subEl,-30);      }      if ("p".contains(subEl.tagName()))       addScore(subEl,30);    }  }  return weight;}  }
class C{  @Override public void finishStage(ResponseBuilder rb){  SolrParams params=rb.req.getParams();  LOG.info("SuggestComponent finishStage with : " + params);  if (!params.getBool(COMPONENT_NAME,false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)   return;  int count=params.getInt(SUGGEST_COUNT,1);  List<SuggesterResult> suggesterResults=new ArrayList<>();  for (  ShardRequest sreq : rb.finished) {    for (    ShardResponse srsp : sreq.responses) {      NamedList<Object> resp;      if ((resp=srsp.getSolrResponse().getResponse()) != null) {        @SuppressWarnings("unchecked") Map<String,SimpleOrderedMap<NamedList<Object>>> namedList=(Map<String,SimpleOrderedMap<NamedList<Object>>>)resp.get(SuggesterResultLabels.SUGGEST);        LOG.info(srsp.getShard() + " : " + namedList);        suggesterResults.add(toSuggesterResult(namedList));      }    }  }  SuggesterResult suggesterResult=merge(suggesterResults,count);  Map<String,SimpleOrderedMap<NamedList<Object>>> namedListResults=new HashMap<>();  toNamedList(suggesterResult,namedListResults);  rb.rsp.add(SuggesterResultLabels.SUGGEST,namedListResults);}  }
class C{  protected double[] computeMeans(Instances insts){  double[] means=new double[insts.numAttributes()];  double[] counts=new double[insts.numAttributes()];  for (int j=0; j < insts.numInstances(); j++) {    Instance inst=insts.instance(j);    for (int i=0; i < insts.numAttributes(); i++) {      means[i]+=inst.weight() * inst.value(i);      counts[i]+=inst.weight();    }  }  for (int i=0; i < insts.numAttributes(); i++) {    if (counts[i] > 0) {      means[i]/=counts[i];    } else {      means[i]=0.0;    }  }  return means;}  }
class C{  public InformationModelFactoryImpl(){  super();}  }
class C{  public boolean equals(final Object that){  if (that == null) {    return false;  }  if (this.getClass().equals(that.getClass())) {    final TransactionalEntity thatEntity=(TransactionalEntity)that;    if (this.getId() == null || thatEntity.getId() == null) {      return false;    }    if (this.getId().equals(thatEntity.getId())) {      return true;    }  }  return false;}  }
class C{  public boolean equals(Object that){  if (that.getClass() != this.getClass())   return false;  SIPDate other=(SIPDate)that;  return this.wkday == other.wkday && this.day == other.day && this.month == other.month && this.year == other.year && this.hour == other.hour && this.minute == other.minute && this.second == other.second;}  }
class C{  public JythonScript(Document doc,File file){  super(doc,file);}  }
class C{  public static String genUniquePathname(String format){  String ret=null;  if (null != format && !format.isEmpty()) {    ret=String.format(format,(new SimpleDateFormat("ddMMyy-hhmmss.SSS").format(new Date())));  }  return ret;}  }
class C{  public boolean isBluetoothAvailable(){  BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();  if (mBluetoothAdapter == null) {    Toast.makeText(mContext,"Bluetooth not supported",Toast.LENGTH_SHORT).show();    return false;  } else   return true;}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.SequenceType.ResourceList buildResourceList(List<org.smpte_ra.schemas.st2067_2_2016.BaseResourceType> trackResourceList){  org.smpte_ra.schemas.st2067_2_2016.SequenceType.ResourceList resourceList=new org.smpte_ra.schemas.st2067_2_2016.SequenceType.ResourceList();  resourceList.getResource().addAll(trackResourceList);  return resourceList;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void addAnnotation(Method ann) throws ObjectStoreConfigException {  if (annotations.containsKey(ann))   throw new ObjectStoreConfigException(ann.toString() + " can only be added once");  annotations.put(ann,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.781 -0500",hash_original_method="EEEC9A9B7336175FA90CC43255548EC9",hash_generated_method="A6283962EC4BC9718A7AF6E989D32E51") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AllowParser.parse");  AllowList list=new AllowList();  try {    headerName(TokenTypes.ALLOW);    Allow allow=new Allow();    allow.setHeaderName(SIPHeaderNames.ALLOW);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    allow.setMethod(token.getTokenValue());    list.add(allow);    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      allow=new Allow();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      allow.setMethod(token.getTokenValue());      list.add(allow);      this.lexer.SPorHT();    }    this.lexer.SPorHT();    this.lexer.match('\n');    return list;  }  finally {    if (debug)     dbg_leave("AllowParser.parse");  }}  }
class C{  int parseAmPmMarker(String source,int ofs) throws ParseException {  String markers[]=getDateFormatSymbols().getAmPmStrings();  int mlen=markers.length;  for (int i=0; i < mlen; i++) {    if (markers[i].equalsIgnoreCase(source)) {      return i;    }  }  char ch=source.charAt(ofs);  if (ch == markers[0].charAt(0)) {    return Calendar.AM;  }  if (ch == markers[1].charAt(0)) {    return Calendar.PM;  }  return throwInvalid("am/pm marker",ofs);}  }
class C{  private static int appendClassTypeSignature(char[] string,int start,boolean fullyQualifyTypeNames,StringBuffer buffer){  if (start >= string.length - 2) {    throw new IllegalArgumentException();  }  char c=string[start];  if (c != C_RESOLVED && c != C_UNRESOLVED) {    throw new IllegalArgumentException();  }  boolean resolved=(c == C_RESOLVED);  boolean removePackageQualifiers=!fullyQualifyTypeNames;  if (!resolved) {    removePackageQualifiers=false;  }  int p=start + 1;  int checkpoint=buffer.length();  int innerTypeStart=-1;  boolean inAnonymousType=false;  while (true) {    if (p >= string.length) {      throw new IllegalArgumentException();    }    c=string[p];switch (c) {case C_SEMICOLON:      return p;case C_GENERIC_START:    int e=appendTypeArgumentSignatures(string,p,fullyQualifyTypeNames,buffer);  removePackageQualifiers=false;p=e;break;case C_DOT:if (removePackageQualifiers) {buffer.setLength(checkpoint);} else {buffer.append('.');}break;case '/':if (removePackageQualifiers) {buffer.setLength(checkpoint);} else {buffer.append('/');}break;case C_DOLLAR:innerTypeStart=buffer.length();inAnonymousType=false;if (resolved) {removePackageQualifiers=false;buffer.append('.');}break;default :if (innerTypeStart != -1 && !inAnonymousType && Character.isDigit(c)) {inAnonymousType=true;buffer.setLength(innerTypeStart);buffer.insert(checkpoint,"new ");buffer.append("(){}");}if (!inAnonymousType) buffer.append(c);innerTypeStart=-1;}p++;}}  }
class C{  synchronized void sendRoleRequest(OFControllerRole role,long xid) throws IOException {  Boolean supportsNxRole=(Boolean)sw.getAttribute(IOFSwitch.SWITCH_SUPPORTS_NX_ROLE);  if ((supportsNxRole != null) && !supportsNxRole) {    setSwitchRole(role,RoleRecvStatus.UNSUPPORTED);  } else {    pendingXid=sendNiciraRoleRequest(role,xid);    pendingRole=role;    this.roleSubmitTimeNs=System.nanoTime();    requestPending=true;  }}  }
class C{  public MalformedURIException(){  super();}  }
class C{  private void prepareQuery(final Map workflowheaderparams,final StringBuilder qryStr){  qryStr.append("select id from  WorkFlowMatrix  where objectType = :objecttype and department IN (:departments) ");  if (!"-1".equals(workflowheaderparams.get(ADDITIONALRULE))) {    qryStr.append("and additionalRule = :additionalrule");  }  qryStr.append(" group by id,objectType,department,fromDate,toDate,fromQty,toQty ");  if (!"-1".equals(workflowheaderparams.get(ADDITIONALRULE))) {    qryStr.append(",additionalRule ");  }}  }
class C{  public static void main(String[] args){  try {    String path=parseArgs(args,null);    String low=parseArgs(args,ARG_KEY_CHAR_RANGE_LOW);    String high=parseArgs(args,ARG_KEY_CHAR_RANGE_HIGH);    String id=parseArgs(args,ARG_KEY_ID);    String ascii=parseArgs(args,ARG_KEY_ASCII);    String testCard=parseArgs(args,ARG_KEY_TESTCARD);    String outPath=parseArgs(args,ARG_KEY_OUTPUT_PATH);    String autoRange=parseArgs(args,ARG_KEY_AUTO_RANGE);    PrintStream ps=null;    FileOutputStream fos=null;    if (outPath != null) {      fos=new FileOutputStream(outPath);      ps=new PrintStream(fos);    } else {      ps=System.out;    }    if (path != null) {      Font font=Font.create(path);      writeSvgBegin(ps);      writeSvgDefsBegin(ps);      writeFontAsSVGFragment(ps,font,id,(low != null ? Integer.parseInt(low) : -1),(high != null ? Integer.parseInt(high) : -1),(autoRange != null),(ascii != null));      writeSvgDefsEnd(ps);      if (testCard != null) {        String fontFamily=font.getNameTable().getRecord(Table.nameFontFamilyName);        writeSvgTestCard(ps,fontFamily);      }      writeSvgEnd(ps);      if (fos != null) {        fos.close();      }    } else {      usage();    }  } catch (  Exception e) {    e.printStackTrace();    System.err.println(e.getMessage());    usage();  }}  }
class C{  public void fillPolygon(int xPoints[],int yPoints[],int nPoints){  if (nPoints > 0) {    int minX=xPoints[0];    int minY=yPoints[0];    int maxX=xPoints[0];    int maxY=yPoints[0];    for (int i=1; i < nPoints; i++) {      if (xPoints[i] < minX) {        minX=xPoints[i];      } else       if (xPoints[i] > maxX) {        maxX=xPoints[i];      }      if (yPoints[i] < minY) {        minY=yPoints[i];      } else       if (yPoints[i] > maxY) {        maxY=yPoints[i];      }    }    addDrawingRect(minX,minY,maxX - minX,maxY - minY);  }  mPrintMetrics.fill(this);}  }
class C{  public VerifiedDownload(Logger log,ArtifactContext context,FileContentStore fileContentStore,Node node){  this.log=log;  this.context=context;  parent=NodeUtils.firstParent(node);  if (parent == null) {    throw new IllegalArgumentException("Parent should not be null: " + node);  }  this.node=node;  this.fileContentStore=fileContentStore;  File f;  File parentDir=fileContentStore.getFile(parent);  parentDir.mkdirs();  try {    f=File.createTempFile(node.getLabel() + ".",".tmp",parentDir);  } catch (  IOException e) {    e.printStackTrace();    log.debug("IOException while creating temp file: " + e);    f=new File(parentDir,node.getLabel() + AbstractNodeRepositoryManager.VALIDATING);    FileUtil.delete(f);  }  f.deleteOnExit();  tempNode=parent.getChild(f.getName());  tempFile=fileContentStore.getFile(tempNode);}  }
class C{  public HistogramComponent(final String name){  super(name);  model=new HistogramModel(HistogramModel.INITIAL_DATA_SOURCES);  init();  addListener();}  }
class C{  public static boolean isNumber(final String textString){  final byte[] data=StringUtils.toBytes(textString);  final int strLength=data.length;  boolean isNumber=true;  for (int j=0; j < strLength; j++) {    if ((data[j] >= zeroInt && data[j] <= nineInt) || data[j] == fullStopInt || (j == 0 && data[j] == minusInt)) {    } else {      isNumber=false;      j=strLength;    }  }  return isNumber;}  }
class C{  protected BasicPooledConnAdapter(ThreadSafeClientConnManager tsccm,AbstractPoolEntry entry){  super(tsccm,entry);  markReusable();}  }
class C{  private void copyAttributes(CSSElement element,Vector selectors,HTMLElement addTo){  if (selectors == null) {    return;  }  for (Enumeration e=selectors.elements(); e.hasMoreElements(); ) {    CSSElement selector=(CSSElement)e.nextElement();    addTo.addChild(selector);    while (selector.getNumChildren() > 0) {      selector=selector.getCSSChildAt(0);    }    element.copyAttributesTo(selector);  }}  }
class C{  static protected int countSharedNeighbors(DBIDs neighbors1,DBIDs neighbors2){  int intersection=0;  DBIDIter iter1=neighbors1.iter();  DBIDIter iter2=neighbors2.iter();  while (iter1.valid() && iter2.valid()) {    final int comp=DBIDUtil.compare(iter1,iter2);    if (comp == 0) {      intersection++;      iter1.advance();      iter2.advance();    } else     if (comp < 0) {      iter1.advance();    } else {      iter2.advance();    }  }  return intersection;}  }
class C{  public boolean hasRecords(short platformID,short platformSpecificID){  for (Iterator i=records.keySet().iterator(); i.hasNext(); ) {    NameRecord rec=(NameRecord)i.next();    if (rec.platformID == platformID && rec.platformSpecificID == platformSpecificID) {      return true;    }  }  return false;}  }
class C{  public void stop(){  threadChecker.checkIsOnValidThread();  Log.d(TAG,"stop" + AppRTCUtils.getThreadInfo());  if (proximitySensor == null) {    return;  }  sensorManager.unregisterListener(this,proximitySensor);}  }
class C{  ImgComp(final BufferedImage img,final Rectangle off,final boolean right){  this.img=img;  at=AffineTransform.getTranslateInstance(-off.x,0);  d=new Dimension(off.width,off.height);  isRight=right;}  }
class C{  public SVGOMAnimatedPathData(AbstractElement elt,String ns,String ln,String defaultValue){  super(elt,ns,ln);  this.defaultValue=defaultValue;}  }
class C{  public static boolean wildcardMatch(String filename,String wildcardMatcher,IOCase caseSensitivity){  if (filename == null && wildcardMatcher == null) {    return true;  }  if (filename == null || wildcardMatcher == null) {    return false;  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  String[] wcs=splitOnTokens(wildcardMatcher);  boolean anyChars=false;  int textIdx=0;  int wcsIdx=0;  Stack<int[]> backtrack=new Stack<int[]>();  do {    if (backtrack.size() > 0) {      int[] array=backtrack.pop();      wcsIdx=array[0];      textIdx=array[1];      anyChars=true;    }    while (wcsIdx < wcs.length) {      if (wcs[wcsIdx].equals("?")) {        textIdx++;        if (textIdx > filename.length()) {          break;        }        anyChars=false;      } else       if (wcs[wcsIdx].equals("*")) {        anyChars=true;        if (wcsIdx == wcs.length - 1) {          textIdx=filename.length();        }      } else {        if (anyChars) {          textIdx=caseSensitivity.checkIndexOf(filename,textIdx,wcs[wcsIdx]);          if (textIdx == -1) {            break;          }          int repeat=caseSensitivity.checkIndexOf(filename,textIdx + 1,wcs[wcsIdx]);          if (repeat >= 0) {            backtrack.push(new int[]{wcsIdx,repeat});          }        } else {          if (!caseSensitivity.checkRegionMatches(filename,textIdx,wcs[wcsIdx])) {            break;          }        }        textIdx+=wcs[wcsIdx].length();        anyChars=false;      }      wcsIdx++;    }    if (wcsIdx == wcs.length && textIdx == filename.length()) {      return true;    }  } while (backtrack.size() > 0);  return false;}  }
class C{  public Scroll(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public void valueChanged(ListSelectionEvent e){  ThreadsTableSelectionModel ttsm=(ThreadsTableSelectionModel)e.getSource();  TableSorter ts=(TableSorter)ttsm.getTable().getModel();  int[] rows=ttsm.getTable().getSelectedRows();  StringBuffer sb=new StringBuffer();  for (int i=0; i < rows.length; i++) {    appendThreadInfo(sb,((ThreadsTableModel)ts.getTableModel()).getInfoObjectAtRow(ts.modelIndex(rows[i])));  }  displayContent(sb.toString());  setThreadDisplay(true);}  }
class C{  public boolean containsExtensionElementURI(String uri){  if (null == m_ExtensionElementURIs)   return false;  return m_ExtensionElementURIs.contains(uri);}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  public static boolean addAsFieldMethodCall(BytecodeInstruction f){  if (!f.isMethodCallOfField())   return false;  if (!f.canBeInstrumented())   return false;  registerAsDefUse(f);  registerAsFieldMethodCall(f);  return true;}  }
class C{  @Override public synchronized boolean removeAll(Collection<?> collection){  return super.removeAll(collection);}  }
class C{  private void changeOrientation(){  if (mainPanel.getWidth() > mainPanel.getHeight()) {    speedSlider.setOrientation(JSlider.HORIZONTAL);    if (speedSliderContinuous != null) {      speedSliderContinuous.setOrientation(JSlider.HORIZONTAL);    }    mainPanel.remove(buttonPanel);    mainPanel.add(buttonPanel,BorderLayout.EAST);  } else {    speedSlider.setOrientation(JSlider.VERTICAL);    if (speedSliderContinuous != null) {      speedSliderContinuous.setOrientation(JSlider.VERTICAL);    }    mainPanel.remove(buttonPanel);    mainPanel.add(buttonPanel,BorderLayout.SOUTH);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public MBeanException(java.lang.Exception e){  super();  exception=e;}  }
class C{  public static <O,A extends Comparable<A>>CompositePersistence<O,A> of(Persistence<O,A> primaryPersistence,Persistence<O,A> secondaryPersistence){  return new CompositePersistence<O,A>(primaryPersistence,secondaryPersistence,Collections.<Persistence<O,A>>emptyList());}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public TypeResolver(){  this("java.lang.Object");}  }
class C{  public void init(ModeledAuthenticatedUser currentUser,ConnectionModel connectionModel){  this.currentUser=currentUser;  this.connectionModel=connectionModel;}  }
class C{  public static ByteRange fixed(byte num){  return new ByteRange(num,num);}  }
class C{  public static void logStart(@Nullable IgniteLogger log,Class<?> clazz,long start){  log0(log,start,"[" + clazz.getSimpleName() + "]: STARTED");}  }
class C{  @Override public LocalLearner create(){  return new NaiveBayes();}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  public static RxANRequest.MultiPartBuilder upload(String url){  return new RxANRequest.MultiPartBuilder(url);}  }
class C{  private void onSecondaryPointerUp(MotionEvent ev){  final int pointerIndex=MotionEventCompat.getActionIndex(ev);  final int pointerId=MotionEventCompat.getPointerId(ev,pointerIndex);  if (pointerId == activePointerId) {    final int newPointerIndex=pointerIndex == 0 ? 1 : 0;    lastMotionX=MotionEventCompat.getX(ev,newPointerIndex);    activePointerId=MotionEventCompat.getPointerId(ev,newPointerIndex);    if (velocityTracker != null) {      velocityTracker.clear();    }  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.TESTED_PROJECTS;}  }
class C{  public static InetSocketAddress parseAddress(String address){  String[] addressSections=address.split(":");  int port=25565;  if (addressSections.length < 1)   throw new IllegalArgumentException("The address \"" + address + "\" is invalid.");  if (addressSections.length >= 2) {    try {      port=Integer.parseInt(addressSections[1].trim());    } catch (    NumberFormatException ex) {      port=25565;    }  }  return new InetSocketAddress(addressSections[0].trim(),port);}  }
class C{  private static int nextKeyIndex(int i,int len){  return (i + 2 < len ? i + 2 : 0);}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  public boolean isServerProcess(){  Object oo=get_Value(COLUMNNAME_IsServerProcess);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static void createRefreshTimer(){  try {    refreshTimer=new javax.management.timer.Timer();    mbeanServer.registerMBean(refreshTimer,refreshTimerObjectName);    refreshTimer.start();  } catch (  JMException e) {    logStackTrace(Level.WARN,e,LocalizedStrings.MBeanUtil_FAILED_TO_CREATE_REFRESH_TIMER.toLocalizedString());  }catch (  JMRuntimeException e) {    logStackTrace(Level.WARN,e,LocalizedStrings.MBeanUtil_FAILED_TO_CREATE_REFRESH_TIMER.toLocalizedString());  }catch (  Exception e) {    logStackTrace(Level.WARN,e,LocalizedStrings.MBeanUtil_FAILED_TO_CREATE_REFRESH_TIMER.toLocalizedString());  }}  }
class C{  public Builder consumerKey(String consumerKey){  this.consumerKey=checkNotNull(consumerKey,"consumerKey == null");  return this;}  }
class C{  public static NbtOutputStream writeCompressed(NbtTag tag,OutputStream outputStream) throws IOException {  NbtOutputStream out=new NbtOutputStream(new GZIPOutputStream(outputStream));  out.write(tag);  return out;}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public static void applyDebuggerSystemProperty(Arguments args){  if ("1".equals(SystemProperties.get("ro.debuggable"))) {    args.debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;  }}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  void copyProductAndModifyParametersForUpdate(Subscription subscription,Product targetProduct,PlatformUser currentUser,List<VOParameter> voTargetParameters) throws SubscriptionMigrationException, TechnicalServiceNotAliveException {  Product targetProductCopy=null;  ProvisioningType provisioningType=targetProduct.getTechnicalProduct().getProvisioningType();  if (provisioningType.equals(ProvisioningType.SYNCHRONOUS)) {    targetProductCopy=targetProduct;  } else   if (provisioningType.equals(ProvisioningType.ASYNCHRONOUS)) {    targetProductCopy=copyProductForSubscription(targetProduct,subscription,true);  }  List<Parameter> modifiedParametersForLog=updateConfiguredParameterValues(targetProductCopy,voTargetParameters,subscription);  checkPlatformParameterConstraints(subscription,targetProductCopy,currentUser);  try {    if (provisioningType.equals(ProvisioningType.ASYNCHRONOUS)) {      subscription.setAsyncTempProduct(targetProductCopy);      handleAsyncUpdateSubscription(subscription,targetProductCopy);    } else     if (provisioningType.equals(ProvisioningType.SYNCHRONOUS)) {      if (subscription.getStatus() != SubscriptionStatus.PENDING) {        appManager.modifySubscription(subscription);      }    }  } catch (  TechnicalServiceNotAliveException e) {    sessionCtx.setRollbackOnly();    throw e;  }catch (  TechnicalServiceOperationException e1) {    sessionCtx.setRollbackOnly();    Object[] params;    String subscriptionId=subscription.getSubscriptionId();    if (e1.getMessageParams() != null && e1.getMessageParams().length > 1) {      params=new Object[]{subscriptionId,e1.getMessage(),e1.getMessageParams()[1]};    } else {      params=new Object[]{subscriptionId,e1.getMessage(),""};    }    SubscriptionMigrationException smf=new SubscriptionMigrationException("Modify ParameterSet failed",Reason.PARAMETER,params);    LOG.logError(Log4jLogger.SYSTEM_LOG,smf,LogMessageIdentifier.ERROR_MODIFY_PARAMETER_SET_FAILED);    throw smf;  }  audit.editSubscriptionParameterConfiguration(dataManager,targetProductCopy,modifiedParametersForLog);}  }
class C{  public static String humanReadableByteCount(long bytes,boolean si){  int unit=si ? 1000 : 1024;  if (bytes < unit)   return bytes + " B";  int exp=(int)(Math.log(bytes) / Math.log(unit));  String pre=(si ? "kMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");  return String.format(Locale.getDefault(),"%.1f %sB",bytes / Math.pow(unit,exp),pre);}  }
class C{  public LevelDBBlockStore(Context context,File directory) throws BlockStoreException {  this(context,directory,JniDBFactory.factory);}  }
class C{  public ParetoDistr(double shape,double location){  numGen=new ParetoDistribution(location,shape);}  }
class C{  public DateTimeFormatterBuilder appendFractionOfMinute(int minDigits,int maxDigits){  return appendFraction(DateTimeFieldType.minuteOfDay(),minDigits,maxDigits);}  }
class C{  protected void addToGUI(JPanel gui,JTextField b,String cmd){  b.setActionCommand(cmd);  b.addActionListener(this);  gui.add(b);}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("ContainsOperator ( ").append("value = ").append(this.value).append(TAB).append(" )");  return retValue.toString();}  }
class C{  public static void removeAllView(final JFrame parent,final BackEndDebuggerProvider debuggerProvider,final INaviView view){  Preconditions.checkNotNull(parent,"IE01933: Parent argument can't be null");  Preconditions.checkNotNull(debuggerProvider,"IE02251: Debugger provider argument can not be null");  Preconditions.checkNotNull(view,"IE01956: View argument can't be null");  if (JOptionPane.YES_OPTION == CMessageBox.showYesNoCancelQuestion(parent,"Do you really want to remove all breakpoints from this view?")) {    for (    final IDebugger debugger : debuggerProvider) {      removeAllView(debugger.getBreakpointManager(),view);    }  }}  }
class C{  @Override public int hashCode(){  return getClass().hashCode();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MCost[");  sb.append("AD_Client_ID=").append(getAD_Client_ID());  if (getAD_Org_ID() != 0)   sb.append(",AD_Org_ID=").append(getAD_Org_ID());  if (getM_Warehouse_ID() != 0)   sb.append(",M_Warehouse_ID=").append(getM_Warehouse_ID());  sb.append(",M_Product_ID=").append(getM_Product_ID());  if (getM_AttributeSetInstance_ID() != 0)   sb.append(",AD_ASI_ID=").append(getM_AttributeSetInstance_ID());  sb.append(",M_CostElement_ID=").append(getM_CostElement_ID());  sb.append(", CurrentCost=").append(getCurrentCostPrice()).append(", C.Amt=").append(getCumulatedAmt()).append(",C.Qty=").append(getCumulatedQty()).append("]");  return sb.toString();}  }
class C{  public int bitAt(int position){  boolean bit=bits.get(position + firstBitNum);  if (!bit) {    return 0;  } else {    return 1;  }}  }
class C{  public PowerShellResponse executeScript(String scriptPath,String params){  BufferedReader reader=null;  BufferedWriter writer=null;  File tmpFile=null;  try {    File scriptToExecute=new File(scriptPath);    if (!scriptToExecute.exists()) {      return new PowerShellResponse(true,"Wrong script path: " + scriptToExecute,false);    }    tmpFile=File.createTempFile("psscript_" + new Date().getTime(),".ps1");    if (tmpFile == null || !tmpFile.exists()) {      return new PowerShellResponse(true,"Cannot create temp script file",false);    }    reader=new BufferedReader(new FileReader(scriptToExecute));    writer=new BufferedWriter(new FileWriter(tmpFile));    String line;    while ((line=reader.readLine()) != null) {      writer.write(line);      writer.newLine();    }    writer.write("Write-Host \"" + END_SCRIPT_STRING + "\"");  } catch (  FileNotFoundException fnfex) {    Logger.getLogger(PowerShell.class.getName()).log(Level.SEVERE,"Unexpected error when processing PowerShell script",fnfex);  }catch (  IOException ioex) {    Logger.getLogger(PowerShell.class.getName()).log(Level.SEVERE,"Unexpected error when processing PowerShell script",ioex);  } finally {    try {      if (reader != null) {        reader.close();      }      if (writer != null) {        writer.close();      }    } catch (    IOException ex) {      Logger.getLogger(PowerShell.class.getName()).log(Level.SEVERE,"Unexpected error when processing PowerShell script",ex);    }  }  this.scriptMode=true;  return executeCommand(tmpFile.getAbsolutePath() + " " + params);}  }
class C{  public ElementRule(String name,XMLSyntaxRule[] rules,String description,int min,int max){  this.name=name;  this.rules=rules;  this.description=description;  this.min=min;  this.max=max;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void testTestBitNegative1(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(aNumber.testBit(number));}  }
class C{  public static byte[] imageToByteArray(BufferedImage image,String imageFileName,OpenStegoPlugin plugin) throws OpenStegoException {  ByteArrayOutputStream barrOS=new ByteArrayOutputStream();  String imageType=null;  try {    if (imageFileName != null) {      imageType=imageFileName.substring(imageFileName.lastIndexOf('.') + 1).toLowerCase();      if (!plugin.getWritableFileExtensions().contains(imageType)) {        throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.IMAGE_TYPE_INVALID,imageType);      }      if (imageType.equals("jp2")) {        imageType="jpeg 2000";      }      ImageIO.write(image,imageType,barrOS);    } else {      ImageIO.write(image,DEFAULT_IMAGE_TYPE,barrOS);    }    return barrOS.toByteArray();  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }}  }
class C{  public UnrecoverableEntryException(){  super();}  }
class C{  @Override public String globalInfo(){  return "Multinomial BMA Estimator.";}  }
class C{  public boolean isWordStart(char aChar){  return aChar == '#';}  }
class C{  public Cliff(){  super();}  }
class C{  @Override public void registerResourceFactories(ResourceSet resourceSet){  super.registerResourceFactories(resourceSet);}  }
class C{  public static int ENOLCK(){  return Errno.ENOLCK.intValue();}  }
class C{  public void lock(final T tx,final long timeout) throws InterruptedException, DeadlockException {  if (tx == null)   throw new NullPointerException();  if (timeout < 0L)   throw new IllegalArgumentException();  if (DEBUG)   log.debug("enter: tx=" + tx + ", queue="+ this);  lock.lock();  if (DEBUG)   log.debug("have private lock: tx=" + tx + ", queue="+ this);  final long begin=System.currentTimeMillis();  try {    assertNotDead();    if (queue.peek() == tx) {      if (INFO)       log.info("Already owns lock: tx=" + tx + ", queue="+ this);      return;    }    if (queue.isEmpty()) {      queue.add(tx);      if (INFO)       log.info("Granted lock with empty queue: tx=" + tx + ", queue="+ this);      return;    }    if (waitsFor != null) {      final Object[] predecessors=queue.toArray();      try {        waitsFor.addEdges(tx,predecessors);      } catch (      DeadlockException ex) {        log.warn("Deadlock: tx=" + tx + ", queue="+ this);        throw ex;      }    }    queue.add(tx);    try {      while (true) {        final long elapsed=System.currentTimeMillis() - begin;        if (timeout != 0L && elapsed >= timeout) {          throw new TimeoutException("After " + elapsed + " ms: tx="+ tx+ ", queue="+ this);        }        if (INFO)         log.info("Awaiting resource: tx=" + tx + ", queue="+ this);        final long remaining=timeout - elapsed;        if (timeout == 0L) {          available.await();        } else {          if (!available.await(remaining,TimeUnit.MILLISECONDS)) {            throw new TimeoutException("After " + elapsed + " ms: tx="+ tx+ ", queue="+ this);          }        }        if (INFO)         log.info("Continuing after wait: tx=" + tx + ", queue="+ this);        if (dead.get()) {          throw new InterruptedException("Resource is dead: " + resource);        }        if (queue.peek() == tx) {          if (INFO)           log.info("Lock granted after wait: tx=" + tx + ", queue="+ this);          return;        }      }    } catch (    Throwable t) {      if (waitsFor != null) {synchronized (waitsFor) {          try {            final boolean waiting=true;            waitsFor.removeEdges(tx,waiting);          } catch (          Throwable t2) {            log.warn(t2);          }        }      }      queue.remove(tx);      if (t instanceof RuntimeException)       throw (RuntimeException)t;      if (t instanceof InterruptedException)       throw (InterruptedException)t;      throw new RuntimeException(t);    }  }  finally {    lock.unlock();    if (DEBUG)     log.debug("released private lock: tx=" + tx + ", queue="+ this);  }}  }
class C{  private boolean isClosed(){  return str == null;}  }
class C{  public static void verifyClearRecursively(FinishedTriggers finishedSet){  ExecutableTriggerStateMachine trigger=ExecutableTriggerStateMachine.create(AfterAllStateMachine.of(AfterFirstStateMachine.of(AfterPaneStateMachine.elementCountAtLeast(3),AfterWatermarkStateMachine.pastEndOfWindow()),AfterAllStateMachine.of(AfterPaneStateMachine.elementCountAtLeast(10),AfterProcessingTimeStateMachine.pastFirstElementInPane())));  setFinishedRecursively(finishedSet,trigger);  assertTrue(finishedSet.isFinished(trigger));  assertTrue(finishedSet.isFinished(trigger.subTriggers().get(0)));  assertTrue(finishedSet.isFinished(trigger.subTriggers().get(0).subTriggers().get(0)));  assertTrue(finishedSet.isFinished(trigger.subTriggers().get(0).subTriggers().get(1)));  finishedSet.clearRecursively(trigger.subTriggers().get(1));  assertTrue(finishedSet.isFinished(trigger));  verifyFinishedRecursively(finishedSet,trigger.subTriggers().get(0));  verifyUnfinishedRecursively(finishedSet,trigger.subTriggers().get(1));}  }
class C{  public UserConfig fetch(UserConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/check-user",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    UserConfig user=new UserConfig();    user.parseXML(root);    return user;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public MovieScraperMetadataPanel(MovieScraperMetadataConfig config){  this.config=config;  initComponents();}  }
class C{  private void computeImpliedVersions(Version... versionList){  impliedVersions.add(this);  for (  Version v : versionList) {    addImpliedVersion(v);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public X509CertImpl(byte[] encoding) throws IOException {  this((Certificate)Certificate.ASN1.decode(encoding));}  }
class C{  protected void insertTimestamp(final String header){  final Document doc=textPane.getDocument();  try {    if (header.length() > 0) {      doc.insertString(doc.getLength(),header,textPane.getStyle("timestamp"));    }  } catch (  final BadLocationException e) {    logger.error("Couldn't insert initial text.",e);  }}  }
class C{  protected void rollback(){  Trx trx=null;  if (trxName != null)   trx=Trx.get(trxName,false);  if (trx != null && trx.isActive()) {    try {      trx.rollback();    }  finally {      trx.close();    }  }  trx=null;}  }
class C{  private static BitMatrix bitMatrixFrombitArray(byte[][] input,int margin){  BitMatrix output=new BitMatrix(input[0].length + 2 * margin,input.length + 2 * margin);  output.clear();  for (int y=0, yOutput=output.getHeight() - margin - 1; y < input.length; y++, yOutput--) {    for (int x=0; x < input[0].length; x++) {      if (input[y][x] == 1) {        output.set(x + margin,yOutput);      }    }  }  return output;}  }
class C{  public int scale(){  return scale;}  }
class C{  public static boolean focusEditor(final IEditorPart editor){  Check.notNull(editor,"editor");  if (editor.getEditorInput() == null) {    log.warn("Asked to focus editor with no editor input");    return false;  }  if (editor.getEditorSite() == null || editor.getEditorSite().getId() == null) {    log.warn("Asked to focus editor with no editor site");    return false;  }  Check.notNull(editor.getEditorInput(),"editor.getEditorInput");  final IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();  if (page == null) {    log.warn(MessageFormat.format("Could not locate workbench page to focus editor '{0}'",editor.getEditorInput().getName()));    return false;  }  try {    page.openEditor(editor.getEditorInput(),editor.getEditorSite().getId());  } catch (  final PartInitException e) {    log.warn(MessageFormat.format("Could not focus editor '{0}'",editor.getEditorInput().getName()),e);    return false;  }  return true;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private Zeroes(){}  }
class C{  public static void writePopulationData2CSV(final Map<Id,SpatialReferenceObject> personLocations,UrbanSimParameterConfigModuleV3 module){  try {    log.info("Initializing AnalysisPopulationCSVWriter ...");    BufferedWriter bwPopulation=IOUtils.getBufferedWriter(module.getMATSim4OpusOutput() + FILE_NAME);    log.info("Writing (population) data into " + module.getMATSim4OpusOutput() + FILE_NAME+ " ...");    bwPopulation.write(InternalConstants.PERSON_ID + "," + InternalConstants.PARCEL_ID+ ","+ InternalConstants.X_COORDINATE+ ","+ InternalConstants.Y_COORDINATE);    bwPopulation.newLine();    Iterator<SpatialReferenceObject> personIterator=personLocations.values().iterator();    while (personIterator.hasNext()) {      SpatialReferenceObject person=personIterator.next();      bwPopulation.write(person.getObjectID() + "," + person.getParcelID()+ ","+ person.getCoord().getX()+ ","+ person.getCoord().getY());      bwPopulation.newLine();    }    bwPopulation.flush();    bwPopulation.close();    log.info("... done!");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean isSubDirectoryOf(IgfsPath path){  A.notNull(path,"path");  return this.path.startsWith(path.path.endsWith(SLASH) ? path.path : path.path + SLASH);}  }
class C{  protected void updateConsistencyGroup(URI cguri,DbClient dbClient){  BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,cguri);  if (cg != null && !cg.getInactive()) {    if (cg.getArrayConsistency()) {      log.info("Updated consistency group arrayConsistency");      cg.setArrayConsistency(false);      dbClient.updateObject(cg);    }  }}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber((int)(left.num() / right.num()));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return VALUES;case 4:return RESPONSE_TO;default :return null;}}  }
class C{  @Override public synchronized boolean addLogger(Logger logger){  EnvironmentLogger envLogger=addLogger(logger.getName(),logger.getResourceBundleName());  if (!logger.getClass().equals(Logger.class)) {    return envLogger.addCustomLogger(logger);  }  return false;}  }
class C{  public T value(String value){  return attr("value",value);}  }
class C{  protected String printOptions(String[] options){  if (options == null) {    return ("<null>");  } else {    return Utils.joinOptions(options);  }}  }
class C{  public void testBug20888() throws Exception {  String s="SELECT 'What do you think about D\\'Artanian''?', \"What do you think about D\\\"Artanian\"\"?\"";  this.pstmt=((com.mysql.jdbc.Connection)this.conn).clientPrepareStatement(s);  this.rs=this.pstmt.executeQuery();  this.rs.next();  assertEquals(this.rs.getString(1),"What do you think about D'Artanian'?");  assertEquals(this.rs.getString(2),"What do you think about D\"Artanian\"?");}  }
class C{  public Collection<SynchronizingStorageEngine> values(){  return localStores.values();}  }
class C{  public TextEditor deleteAll(String pattern){  return replaceAll(pattern,"");}  }
class C{  public void proceed(String username,String password){  this.handler.proceed(username,password);}  }
class C{  protected ProcessorsFactory newProcessorsFactory(){  return new DefaultProcessorsFactory();}  }
class C{  protected Map<String,Double> loadLexicon(String path) throws FileNotFoundException {  Map<String,Double> lexiMap=new HashMap<String,Double>();  File file=new File("resources/lexi/" + path + ".txt");  Scanner scanner=new Scanner(file);  while (scanner.hasNextLine()) {    String[] line=scanner.nextLine().split("\t");    if (line.length == 4) {      lexiMap.put(line[0],Double.parseDouble(line[1]));    }  }  scanner.close();  return lexiMap;}  }
class C{  public void addRow(Assignment condition,double head,double prob){  addRow(condition,ValueFactory.create(head),prob);}  }
class C{  public void parseDataTypes(OneRowChange oneRowChange) throws UnsupportedEncodingException, ReplicatorException, SerialException, SQLException {  oneColVal currentCol=null;  columnValues=new ArrayList<oneColVal>();  for (Iterator<PlogLCRTag> iterator=rawTags.iterator(); iterator.hasNext(); ) {    PlogLCRTag tag=iterator.next();switch (tag.id) {case PlogLCRTag.TAG_COL_ID:      currentCol=new oneColVal();    columnValues.add(currentCol);  currentCol.id=tag.valueInt();currentCol.columnSpec=oneRowChange.new ColumnSpec();currentCol.columnSpec.setBlob(false);currentCol.columnSpec.setNotNull(false);currentCol.columnVal=oneRowChange.new ColumnVal();iterator.remove();break;case PlogLCRTag.TAG_COL_NAME:currentCol.name=tag.valueString();currentCol.columnSpec.setName(currentCol.name);iterator.remove();break;case PlogLCRTag.TAG_COL_TYPE:currentCol.datatype=tag.valueString();currentCol.columnSpec.setTypeDescription(currentCol.datatype);int tagTypeAsSQLType=currentCol.typeAsSQLType();currentCol.columnSpec.setType(tagTypeAsSQLType);currentCol.columnSpec.setSigned(tagTypeAsSQLType == java.sql.Types.NUMERIC);iterator.remove();break;case PlogLCRTag.TAG_LOB_POSITION:currentCol.lobPosition=tag.valueInt();iterator.remove();break;case PlogLCRTag.TAG_LOBOFFSET:currentCol.lobOffset=tag.valueLong();iterator.remove();break;case PlogLCRTag.TAG_LOBLEN:currentCol.lobLength=tag.valueLong();iterator.remove();break;case PlogLCRTag.TAG_PREIMAGE:case PlogLCRTag.TAG_POSTIMAGE:case PlogLCRTag.TAG_KEYIMAGE:case PlogLCRTag.TAG_LOBDATA:currentCol.imageType=tag.id;currentCol.rawVal=tag.rawData;currentCol.parseValue();iterator.remove();break;default :}}}  }
class C{  protected final DTMAxisIterator resetPosition(){  _position=0;  return this;}  }
class C{  @Nullable public static <T>CloseableReference<T> cloneOrNull(@Nullable CloseableReference<T> ref){  return (ref != null) ? ref.cloneOrNull() : null;}  }
class C{  public DatabaseAggregatedTimerData(Timestamp timestamp,long platformIdent,long sensorTypeIdent,long methodIdent){  super(timestamp,platformIdent,sensorTypeIdent,methodIdent);}  }
class C{  public static synchronized boolean deleteOldActivityDatabase(Context context){  DBHelper dbHelper=new DBHelper(context);  boolean result=true;  if (dbHelper.existsDB(DBConstants.DATABASE_NAME)) {    result=getContext().deleteDatabase(DBConstants.DATABASE_NAME);  }  return result;}  }
class C{  protected boolean isRegionVisible(DrawContext dc){  if (this.getCurrentData().getAltitudeMode() == WorldWind.CLAMP_TO_GROUND && dc.getVisibleSector() != null && this.getCurrentData().getSector() != null && !dc.getVisibleSector().intersects(this.getCurrentData().getSector())) {    return false;  }  if (this.getCurrentData().getExtent() != null && dc.isSmall(this.getCurrentData().getExtent(),1))   return false;  return this.intersectsFrustum(dc);}  }
class C{  @Override public void update(ExampleSet exampleSet){  Attribute weightAttribute=exampleSet.getAttributes().getWeight();  for (  Example example : exampleSet) {    double weight=weightAttribute == null ? 1.0d : example.getWeight();    totalWeight+=weight;    double labelValue=example.getLabel();    if (!Double.isNaN(labelValue)) {      int classIndex=(int)example.getLabel();      classWeights[classIndex]+=weight;      int attributeIndex=0;      for (      Attribute attribute : exampleSet.getAttributes()) {        double attributeValue=example.getValue(attribute);        if (nominal[attributeIndex]) {          if (!Double.isNaN(attributeValue)) {            if ((int)attributeValue < weightSums[attributeIndex][classIndex].length - 1) {              weightSums[attributeIndex][classIndex][(int)attributeValue]+=weight;            } else {              for (int i=0; i < numberOfClasses; i++) {                double[] newWeightSums=new double[(int)attributeValue + 2];                newWeightSums[newWeightSums.length - 1]=weightSums[attributeIndex][i][weightSums[attributeIndex][i].length - 1];                for (int j=0; j < weightSums[attributeIndex][i].length - 1; j++) {                  newWeightSums[j]=weightSums[attributeIndex][i][j];                }                weightSums[attributeIndex][i]=newWeightSums;                distributionProperties[attributeIndex][i]=new double[(int)attributeValue + 2];              }              weightSums[attributeIndex][classIndex][(int)attributeValue]+=weight;              attributeValues[attributeIndex]=new String[(int)attributeValue + 2];              for (int i=0; i < attributeValues[attributeIndex].length - 1; i++) {                attributeValues[attributeIndex][i]=attribute.getMapping().mapIndex(i);              }              attributeValues[attributeIndex][attributeValues[attributeIndex].length - 1]=UNKNOWN_VALUE_NAME;            }          } else {            weightSums[attributeIndex][classIndex][weightSums[attributeIndex][classIndex].length - 1]+=weight;          }        } else {          if (!Double.isNaN(attributeValue)) {            kernelDistributions[attributeIndex][classIndex].update(attributeValue,weight);          }        }        attributeIndex++;      }    }  }  modelRecentlyUpdated=true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS01.class,args);}  }
class C{  public boolean connectedToNetwork(URI networkUri){  if (networkUri != null) {    if (networkUri.equals(_id)) {      return true;    }    if (_routedNetworks != null) {      return _routedNetworks.contains(networkUri.toString());    }  }  return false;}  }
class C{  public DecoWildWheat(int type){  farmtype=type == 0 ? Blocks.potatoes : type == 1 ? Blocks.carrots : Blocks.wheat;}  }
class C{  public void disconnected(){}  }
class C{  private void parseAndFillEndpoints(NodeList children,EList<Endpoint> endpoints){  for (int i=0; i < children.getLength(); i++) {    Node childNode=children.item(i);    if (childNode.getNodeType() == Node.ELEMENT_NODE && !"channel".equals(childNode.getLocalName())) {      Endpoint endpoint=createEndpoint(childNode);      if (endpoint != null) {        endpoints.add(endpoint);        if (endpoint instanceof CompositeProcessor) {          NodeList compositeChildren=childNode.getChildNodes();          parseAndFillEndpoints(compositeChildren,((CompositeProcessor)endpoint).getOwnedEndpoints());        }      }    }  }}  }
class C{  public static Disjunction or(Criterion... criteria){  return new Disjunction(criteria);}  }
class C{  private void validateTableMetaData_allNormalTables(String tableNamePattern) throws Exception {  Set<String> expectedNormalTables=new HashSet<>(Arrays.asList("TEST_NORMAL_TABLE","test_quoted_normal_table"));  Set<String> retrievedTables=new HashSet<>();  Map<TableMetaData,Object> rules=getDefaultValueValidationRules();  rules.put(TableMetaData.TABLE_TYPE,TABLE);  try (ResultSet tables=dbmd.getTables(null,null,tableNamePattern,new String[]{TABLE})){    while (tables.next()) {      String tableName=tables.getString(TableMetaData.TABLE_NAME.name());      assertTrue("TABLE_NAME is not allowed to be null or empty",tableName != null && tableName.length() > 0);      retrievedTables.add(tableName);      if ((tableName.startsWith("RDB$") || tableName.startsWith("MON$"))) {        fail("Only expect normal tables, not starting with RDB$ or MON$, retrieved " + tableName);      }      validateRowValues(tables,rules);    }    assertEquals("getTables() did not return expected tables: ",expectedNormalTables,retrievedTables);  } }  }
class C{  private void goPrinterSetting(){  Intent intent=new Intent(getApplicationContext(),MainActivity_.class);  startActivity(intent);  this.finish();}  }
class C{  protected boolean doQuery(String queryStr) throws AdeException {  System.out.println("Querying the databse");  return super.doQuery(m_dataStore,queryStr);}  }
class C{  public N4JSNewWizardsActionGroup(final IWorkbenchSite site){  fSite=site;}  }
class C{  public static int poisson(double lambda){  if (!(lambda > 0.0))   throw new IllegalArgumentException("Parameter lambda must be positive");  if (Double.isInfinite(lambda))   throw new IllegalArgumentException("Parameter lambda must not be infinite");  int k=0;  double p=1.0;  double L=Math.exp(-lambda);  do {    k++;    p*=uniform();  } while (p >= L);  return k - 1;}  }
class C{  public boolean isSetId(){  return EncodingUtils.testBit(__isset_bitfield,__ID_ISSET_ID);}  }
class C{  protected void rehash(){  int oldCapacity=table.length;  Entry oldMap[]=table;  int newCapacity=oldCapacity * 2 + 1;  Entry newMap[]=new Entry[newCapacity];  threshold=(int)(newCapacity * loadFactor);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldMap[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=(e.hash & 0x7FFFFFFF) % newCapacity;      e.next=newMap[index];      newMap[index]=e;    }  }}  }
class C{  public static boolean startsWithPattern(final byte[] byteArray,final byte[] pattern){  Preconditions.checkNotNull(byteArray);  Preconditions.checkNotNull(pattern);  if (pattern.length > byteArray.length) {    return false;  }  for (int i=0; i < pattern.length; ++i) {    if (byteArray[i] != pattern[i]) {      return false;    }  }  return true;}  }
class C{  public boolean remove(INode n){  return tree.remove(n) != null;}  }
class C{  @Override public void onAction(){  onAction(ActionType.USE);}  }
class C{  public static void connectFromMatlab(String receiverID,int port){  connect(receiverID,port,false);}  }
class C{  public T caseFunctionBlockPropertySource(FunctionBlockPropertySource object){  return null;}  }
class C{  private StyledString appendTypeParameterList(StyledString buffer,CompletionProposal typeProposal){  char[] signature=SignatureUtil.fix83600(typeProposal.getSignature());  char[][] typeParameters=Signature.getTypeArguments(signature);  for (int i=0; i < typeParameters.length; i++) {    char[] param=typeParameters[i];    typeParameters[i]=Signature.toCharArray(param);  }  return appendParameterSignature(buffer,typeParameters,null);}  }
class C{  public static <K,V,E>Map<K,V> collectEntries(E[] self){  return collectEntries(self,Closure.IDENTITY);}  }
class C{  public boolean addGpsDateTimeStampTag(long timestamp){  ExifTag t=buildTag(TAG_GPS_DATE_STAMP,mGPSDateStampFormat.format(timestamp));  if (t == null) {    return false;  }  setTag(t);  mGPSTimeStampCalendar.setTimeInMillis(timestamp);  t=buildTag(TAG_GPS_TIME_STAMP,new Rational[]{new Rational(mGPSTimeStampCalendar.get(Calendar.HOUR_OF_DAY),1),new Rational(mGPSTimeStampCalendar.get(Calendar.MINUTE),1),new Rational(mGPSTimeStampCalendar.get(Calendar.SECOND),1)});  if (t == null) {    return false;  }  setTag(t);  return true;}  }
class C{  public static boolean sm(double a,double b){  return (b - a > SMALL);}  }
class C{  public void startOrStopPlaying(View view){  if (mPingReceiver != null) {    stopPlaying();  } else {    int count=Integer.valueOf(mCountEditText.getText().toString());    if (count <= 0)     UiUtils.showToast(this,"Please specify a count value that's > 0"); else     startPlaying(count);  }}  }
class C{  public int update(@NotNull @SQL String sql,Object... args){  return update(SqlQuery.query(sql,args));}  }
class C{  public LineEvent(Line line,Type type,long position){  super(line);  this.type=type;  this.position=position;}  }
class C{  public MandatoryUdaMissingException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public Predicate<ExecutableSequence> createTestOutputPredicate(Set<Sequence> excludeSet,Set<Class<?>> coveredClasses,Pattern includePattern){  Predicate<ExecutableSequence> isOutputTest;  if (GenInputsAbstract.dont_output_tests) {    isOutputTest=new AlwaysFalse<>();  } else {    Predicate<ExecutableSequence> baseTest;    baseTest=new ExcludeTestPredicate(excludeSet);    if (includePattern != null) {      baseTest=baseTest.and(new IncludeTestPredicate(includePattern));    }    if (!coveredClasses.isEmpty()) {      baseTest=baseTest.and(new IncludeIfCoversPredicate(coveredClasses));    }    Predicate<ExecutableSequence> checkTest=new AlwaysFalse<>();    if (!GenInputsAbstract.no_error_revealing_tests) {      checkTest=new ErrorTestPredicate();    }    if (!GenInputsAbstract.no_regression_tests) {      checkTest=checkTest.or(new RegressionTestPredicate());    }    isOutputTest=baseTest.and(checkTest);  }  return isOutputTest;}  }
class C{  public final T callbackExecutor(Executor callbackExecutor){  this.callbackExecutor=checkNotNull(callbackExecutor,"callbackExecutor == null");  return self();}  }
class C{  public int readTag() throws IOException {  if (isAtEnd()) {    lastTag=0;    return 0;  }  lastTag=readRawVarint32();  if (lastTag == 0) {    throw InvalidProtocolBufferNanoException.invalidTag();  }  return lastTag;}  }
class C{  public static String toString(Object value,String defaultValue){  if (value == null)   return defaultValue;  return toString(value.toString(),defaultValue);}  }
class C{  protected boolean oneSameNetwork(MacAddress m1,MacAddress m2){  String net1=macToGuid.get(m1);  String net2=macToGuid.get(m2);  if (net1 == null)   return false;  if (net2 == null)   return false;  return net1.equals(net2);}  }
class C{  public Enumerable<Object> project(final int[] fields){  return backingTable.project(fields);}  }
class C{  public TokenRO persistShoppingCart(final HttpServletRequest request,final HttpServletResponse response){  final ShoppingCart cart=getCurrentCart();  shoppingCartPersister.persistShoppingCart(request,response,cart);  return new TokenRO(cart.getGuid());}  }
class C{  @Override public boolean isAllowAll(){  return _mode == RobotRulesMode.ALLOW_ALL;}  }
class C{  @Override public synchronized void stopAll(){  final Iterator<Map.Entry<Integer,BaseEvent>> it=instances.entrySet().iterator();  if (Cfg.DEBUG) {    Check.log(TAG + " (stopAll)");  }  while (it.hasNext()) {    final Map.Entry<Integer,BaseEvent> pairs=it.next();    int key=pairs.getKey();    stop(key);  }  if (Cfg.DEBUG) {    Check.ensures(threads.size() == 0,"Non empty threads");  }  instances.clear();  threads.clear();  if (Cfg.DEBUG) {    Check.ensures(instances.size() == 0,"Non empty running");  }}  }
class C{  public TreeViewerBuilder(Composite parent){  this(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.BORDER);}  }
class C{  public QueryBuilder groupBy(final Optional<List<String>> groupBy){  checkNotNull(groupBy,"groupBy must not be null");  this.groupBy=pickOptional(this.groupBy,groupBy);  return this;}  }
class C{  public RotationAnimation(View view){  this.view=view;  degrees=360;  pivot=PIVOT_CENTER;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  protected void validateClusterHosts(){  if (hostCluster != null) {    VcenterDataCenter datacenter=getModelClient().datacenters().findById(datacenterId);    Cluster cluster=getModelClient().clusters().findById(hostCluster.getId());    ClusterComputeResource vcenterCluster=vmware.getCluster(datacenter.getLabel(),cluster.getLabel());    if (vcenterCluster == null) {      ExecutionUtils.fail("failTask.vmware.cluster.notfound",args(),args(cluster.getLabel()));    }    Set<String> vCenterHostUuids=Sets.newHashSet();    for (    HostSystem hostSystem : vcenterCluster.getHosts()) {      if (hostSystem.getHardware() != null && hostSystem.getHardware().systemInfo != null) {        vCenterHostUuids.add(hostSystem.getHardware().systemInfo.uuid);      }    }    List<Host> dbHosts=getModelClient().hosts().findByCluster(hostCluster.getId());    Set<String> dbHostUuids=Sets.newHashSet();    for (    Host host : dbHosts) {      if (!DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.toString().equalsIgnoreCase(host.getCompatibilityStatus())) {        ExecutionUtils.fail("failTask.vmware.cluster.hostincompatible",args(),args(cluster.getLabel(),host.getLabel()));      } else       if (DiscoveredDataObject.DataCollectionJobStatus.ERROR.toString().equalsIgnoreCase(host.getDiscoveryStatus())) {        ExecutionUtils.fail("failTask.vmware.cluster.hostsdiscoveryfailed",args(),args(cluster.getLabel(),host.getLabel()));      }      dbHostUuids.add(host.getUuid());    }    if (!vCenterHostUuids.equals(dbHostUuids)) {      ExecutionUtils.fail("failTask.vmware.cluster.mismatch",args(),args(cluster.getLabel()));    } else {      info("Hosts in cluster %s matches correctly",cluster.getLabel());    }  }}  }
class C{  public PaymentGatewayExt(){}  }
class C{  public boolean equals(Object o){  return this == o;}  }
class C{  protected Instances headerFromXML() throws Exception {  Instances result;  Element root;  Element node;  Vector<Element> list;  ArrayList<Attribute> atts;  Version version;  int[] classIndex;  root=m_Document.getDocumentElement();  version=new Version();  if (version.isOlder(root.getAttribute(ATT_VERSION))) {    System.out.println("WARNING: loading data of version " + root.getAttribute(ATT_VERSION) + " with version "+ Version.VERSION);  }  list=getChildTags(root,TAG_HEADER);  node=list.get(0);  list=getChildTags(node,TAG_ATTRIBUTES);  node=list.get(0);  classIndex=new int[1];  atts=createAttributes(node,classIndex);  result=new Instances(root.getAttribute(ATT_NAME),atts,0);  result.setClassIndex(classIndex[0]);  return result;}  }
class C{  public static void validateInput(String field,String message) throws CheckException {  validateInputSizeMax(field,message,64);}  }
class C{  public boolean verifyKeyedChecksum(byte[] data,int size,byte[] key,byte[] checksum,int usage) throws KrbCryptoException {  try {    byte[] newCksum=Aes128.calculateChecksum(key,usage,data,0,size);    return isChecksumEqual(checksum,newCksum);  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }}  }
class C{  public static ActionBarBackground fadeOut(AppCompatActivity activity){  ActionBarBackground abColor=new ActionBarBackground(activity);  abColor.fadeOut();  return abColor;}  }
class C{  public boolean onUpOrCancel(){  boolean state=isPressed();  setPressed(false);  return state;}  }
class C{  protected void storeState(){}  }
class C{  public RollingResourceAppender(Layout layout,Resource res,Charset charset,boolean append,RetireListener listener) throws IOException {  this(layout,res,charset,append,DEFAULT_MAX_FILE_SIZE,DEFAULT_MAX_BACKUP_INDEX,60,listener);}  }
class C{  public int delete(DatabaseConnection databaseConnection,PreparedDelete<T> preparedDelete) throws SQLException {  CompiledStatement stmt=preparedDelete.compile(databaseConnection,StatementType.DELETE);  try {    return stmt.runUpdate();  }  finally {    stmt.close();  }}  }
class C{  protected boolean engineVerify(byte[] sigBytes) throws SignatureException {  if (sigBytes == null) {    throw new NullPointerException("sigBytes == null");  }  return checkSignature(sigBytes,0,0);}  }
class C{  public boolean deleteFriendBytes(byte[] key){  SQLiteDatabase db=getWritableDatabase();  if (db == null)   return false;  if (key == null) {    throw new IllegalArgumentException("Null friend deleted through addFriendBytes()");  }  return deleteFriend(bytesToBase64(key));}  }
class C{  public void write(String string,Color color){  setForeground(color);  write(string);}  }
class C{  public static void createImageToFileSystem(String url,Component targetList,int targetOffset,String targetKey,String destFile,Image placeholder,byte priority){  createImageToFileSystem(url,targetList,null,targetOffset,targetKey,destFile,null,priority,placeholder,defaultMaintainAspectRatio);}  }
class C{  public TypeConstraintItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void handleKeepAliveSignal(long platformIdent){  AgentStatusData agentStatusData=agentStatusDataMap.get(platformIdent);  if (null != agentStatusData) {    agentStatusData.setLastKeepAliveTimestamp(System.currentTimeMillis());    if (agentStatusData.getAgentConnection() == AgentConnection.NO_KEEP_ALIVE) {      agentStatusData.setAgentConnection(AgentConnection.CONNECTED);      if (log.isInfoEnabled()) {        log.info("Platform " + platformIdent + " sending keep-alive signals again.");      }    }  }}  }
class C{  public FutureW<T> future(String key,Executor ex){  return pipes.oneOrErrorAsync(key,ex);}  }
class C{  public byte[] decrypt(byte[] cipherText){  int length=cipherText.length;  if (length % 8 != 0) {    System.out.println("Array must be a multiple of 8");    return null;  }  byte[] clearText=new byte[length];  int count=length / 8;  for (int i=0; i < count; i++)   encrypt(cipherText,i * 8,clearText,i * 8);  return clearText;}  }
class C{  public TurnVectors(int normalCount,int totalCount,int ssCount,int jsCount,int wsCount,int dsCount,int scCount,int aeroCount,int evenCount,int min){  this.numEven=evenCount;  this.numNormal=normalCount;  this.numTotal=totalCount;  this.numSS=ssCount;  this.numJS=jsCount;  this.numWS=wsCount;  this.numDS=dsCount;  this.numSC=scCount;  this.numAero=aeroCount;  this.normal_turns=new Vector<ITurnOrdered>(normalCount);  this.total_turns=new Vector<ITurnOrdered>(this.numTotal);  this.even_turns=new Vector<ITurnOrdered>(evenCount);  this.space_station_turns=new Vector<ITurnOrdered>(ssCount);  this.jumpship_turns=new Vector<ITurnOrdered>(jsCount);  this.warship_turns=new Vector<ITurnOrdered>(wsCount);  this.dropship_turns=new Vector<ITurnOrdered>(dsCount);  this.small_craft_turns=new Vector<ITurnOrdered>(scCount);  this.aero_turns=new Vector<ITurnOrdered>(aeroCount);  this.min=min;}  }
class C{  private static long calcSize(long size,long skip,long limit){  return size >= 0 ? Math.max(-1,Math.min(size - skip,limit)) : -1;}  }
class C{  public void replaceTags(Map<String,String> newTags){  if (newTags == null) {    throw new IllegalArgumentException("Replacing the current tags with a null map.");  }  tags.clear();  for (  Entry<String,String> tag : newTags.entrySet()) {    putTag(tag.getKey(),tag.getValue());  }}  }
class C{  public void testNextDoubleBounded2(){  SplittableRandom sr=new SplittableRandom();  for (double least=0.0001; least < 1.0e20; least*=8) {    for (double bound=least * 1.001; bound < 1.0e20; bound*=16) {      double f=sr.nextDouble(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      double j;      while (i < NCALLS && (j=sr.nextDouble(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public static Link createLink(Composite parent,String text,Font font,int hspan){  Link l=new Link(parent,SWT.UNDERLINE_LINK);  l.setFont(font);  l.setText(text);  GridData gd=new GridData(GridData.BEGINNING,GridData.VERTICAL_ALIGN_CENTER,true,false,hspan,1);  l.setLayoutData(gd);  return l;}  }
class C{  public Key min(){  if (isEmpty())   throw new NoSuchElementException("Priority queue underflow");  return pq[1];}  }
class C{  public List<ErrorLogger.ErrorObject> buildPackingList_2007(@Nonnull org.smpte_ra.schemas.st0429_8_2007.PKL.UserText annotationText,@Nonnull org.smpte_ra.schemas.st0429_8_2007.PKL.UserText issuer,@Nonnull org.smpte_ra.schemas.st0429_8_2007.PKL.UserText creator,@Nonnull List<PackingListBuilderAsset_2007> assets) throws IOException {  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  org.smpte_ra.schemas.st0429_8_2007.PKL.PackingListType packingListType=IMFPKLObjectFieldsFactory.constructPackingListType_2007();  packingListType.setId(UUIDHelper.fromUUID(this.uuid));  packingListType.setAnnotationText(annotationText);  packingListType.setIconId(this.iconId);  packingListType.setIssueDate(this.issueDate);  packingListType.setIssuer(issuer);  packingListType.setCreator(creator);  packingListType.setGroupId(this.groupId);  org.smpte_ra.schemas.st0429_8_2007.PKL.PackingListType.AssetList assetList=new org.smpte_ra.schemas.st0429_8_2007.PKL.PackingListType.AssetList();  List<org.smpte_ra.schemas.st0429_8_2007.PKL.AssetType> packingListAssets=assetList.getAsset();  for (  PackingListBuilderAsset_2007 asset : assets) {    org.smpte_ra.schemas.st0429_8_2007.PKL.AssetType packingListAssetType=new org.smpte_ra.schemas.st0429_8_2007.PKL.AssetType();    packingListAssetType.setId(asset.getUUID());    packingListAssetType.setAnnotationText(asset.getAnnotationText());    packingListAssetType.setHash(asset.getHash());    packingListAssetType.setSize(asset.getSize());    packingListAssetType.setType(asset.getAssetType().toString());    packingListAssetType.setOriginalFileName(asset.getOriginalFileName());    packingListAssets.add(packingListAssetType);  }  packingListType.setAssetList(assetList);  packingListType.setSigner(null);  packingListType.setSignature(null);  File outputFile=new File(this.workingDirectory + File.separator + this.pklFileName);  boolean formatted=true;  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();  try (InputStream packingListSchemaAsAStream=contextClassLoader.getResourceAsStream("org/smpte_ra/schemas/st0429_8_2007/PKL/packingList_schema.xsd");InputStream dsigSchemaAsAStream=contextClassLoader.getResourceAsStream("org/w3/_2000_09/xmldsig/xmldsig-core-schema.xsd");OutputStream outputStream=new FileOutputStream(outputFile)){    try {      SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);      StreamSource[] schemaSources=new StreamSource[2];      schemaSources[0]=new StreamSource(dsigSchemaAsAStream);      schemaSources[1]=new StreamSource(packingListSchemaAsAStream);      Schema schema=schemaFactory.newSchema(schemaSources);      JAXBContext jaxbContext=JAXBContext.newInstance("org.smpte_ra.schemas.st0429_8_2007.PKL");      Marshaller marshaller=jaxbContext.createMarshaller();      ValidationEventHandlerImpl validationEventHandler=new ValidationEventHandlerImpl(true);      marshaller.setEventHandler(validationEventHandler);      marshaller.setSchema(schema);      marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formatted);      marshaller.marshal(new JAXBElement<>(new QName("http://www.smpte-ra.org/schemas/429-8/2007/PKL","PackingList"),org.smpte_ra.schemas.st0429_8_2007.PKL.PackingListType.class,packingListType),outputStream);      outputStream.close();      if (validationEventHandler.hasErrors()) {        for (        ValidationEventHandlerImpl.ValidationErrorObject validationErrorObject : validationEventHandler.getErrors()) {          imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_PKL_ERROR,validationErrorObject.getValidationEventSeverity(),validationErrorObject.getErrorMessage());        }      }    } catch (    SAXException|JAXBException e) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,e.getMessage());    }  }   return imfErrorLogger.getErrors();}  }
class C{  public static byte[] encodeFloat(Number number){  ByteBuffer fBuf=null;  if (number instanceof Float) {    fBuf=ByteBuffer.allocate(4);    fBuf.putFloat(number.floatValue());  } else {    fBuf=ByteBuffer.allocate(8);    fBuf.putDouble(number.doubleValue());  }  return fBuf.array();}  }
class C{  protected PDFDestination(PDFObject pageObj,int type){  this.pageObj=pageObj;  this.type=type;}  }
class C{  public static boolean matchPinyinUnits(final List<PinyinUnit> pinyinUnits,final String baseData,String search,StringBuffer chineseKeyWord){  if ((null == pinyinUnits) || (null == search) || (null == chineseKeyWord)) {    return false;  }  StringBuffer matchSearch=new StringBuffer();  matchSearch.delete(0,matchSearch.length());  chineseKeyWord.delete(0,chineseKeyWord.length());  int pinyinUnitsLength=0;  pinyinUnitsLength=pinyinUnits.size();  StringBuffer searchBuffer=new StringBuffer();  for (int i=0; i < pinyinUnitsLength; i++) {    int j=0;    chineseKeyWord.delete(0,chineseKeyWord.length());    searchBuffer.delete(0,searchBuffer.length());    searchBuffer.append(search);    boolean found=findPinyinUnits(pinyinUnits,i,j,baseData,searchBuffer,chineseKeyWord);    if (true == found) {      return true;    }  }  return false;}  }
class C{  public boolean isLoaded(){  return m_addressSpace.isLoaded();}  }
class C{  public void map(Text key,Writable value,OutputCollector<Text,ObjectWritable> output,Reporter reporter) throws IOException {  ObjectWritable objWrite=new ObjectWritable();  objWrite.set(value);  output.collect(key,objWrite);}  }
class C{  static LegacyGWTHostPageSelectionTreeItem[] buildTree(Map<String,Set<String>> modulesHostPages){  List<LegacyGWTHostPageSelectionTreeItem> treeItems=new ArrayList<LegacyGWTHostPageSelectionTreeItem>();  for (  String moduleName : modulesHostPages.keySet()) {    LegacyGWTHostPageSelectionTreeItem moduleItem=new LegacyGWTHostPageSelectionTreeItem(Path.fromPortableString(moduleName.replace('.','/')));    treeItems.add(moduleItem);    for (    String hostPage : modulesHostPages.get(moduleName)) {      new LegacyGWTHostPageSelectionTreeItem(Path.fromPortableString(hostPage),moduleItem);    }  }  return treeItems.toArray(new LegacyGWTHostPageSelectionTreeItem[0]);}  }
class C{  private void addTraceHeaders(RoutingContext ctx,ProxyContext pc){  for (  String th : pc.traceHeaders) {    ctx.response().headers().add(XOkapiHeaders.TRACE,th);  }}  }
class C{  public void init(CredentialInfo info,APIAccessCallBack apiAccessCallBack,Context appContext){  IdentityProxy.clientID=info.getClientID();  IdentityProxy.clientSecret=info.getClientSecret();  this.apiAccessCallBack=apiAccessCallBack;  context=appContext;  SharedPreferences mainPref=context.getSharedPreferences(Constants.APPLICATION_PACKAGE,Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putString(Constants.CLIENT_ID,clientID);  editor.putString(Constants.CLIENT_SECRET,clientSecret);  editor.putString(Constants.TOKEN_ENDPOINT,info.getTokenEndPoint());  editor.commit();  setAccessTokenURL(info.getTokenEndPoint());  AccessTokenHandler accessTokenHandler=new AccessTokenHandler(info,this);  accessTokenHandler.obtainAccessToken();}  }
class C{  @Override public boolean acceptSource(final Object source){  return source instanceof GamaCSVFile;}  }
class C{  public boolean isLastChunk(){  if ((this.lastChunk & 0X01) == 0X01) {    return true;  }  return false;}  }
class C{  public double convertToAttribX(double scx){  double temp=m_XaxisEnd - m_XaxisStart;  double temp2=((scx - m_XaxisStart) * (m_maxX - m_minX)) / temp;  temp2=temp2 + m_minX;  return temp2;}  }
class C{  @Override @SuppressWarnings("unchecked") public List<StoragePool> matchStoragePoolsWithAttributeOn(List<StoragePool> pools,Map<String,Object> attributeMap,StringBuffer errorMessage){  List<StoragePool> matchedPools=new ArrayList<StoragePool>();  Set<String> systems=(Set<String>)attributeMap.get(Attributes.storage_system.toString());  Iterator<StoragePool> poolIterator=pools.iterator();  while (poolIterator.hasNext()) {    StoragePool pool=poolIterator.next();    if (systems.contains(pool.getStorageDevice().toString())) {      matchedPools.add(pool);    }  }  _logger.info("{} pools are matching with systems after matching.",matchedPools.size());  if (CollectionUtils.isEmpty(matchedPools)) {    errorMessage.append(String.format("No matching storage pool for the Storage systems : %s. ",systems));    _logger.error(errorMessage.toString());  }  return matchedPools;}  }
class C{  public Boolean isShellAccess(){  return shellAccess;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:18.130 -0500",hash_original_method="45431E38A045C0C983A2E1F24B9ACFC3",hash_generated_method="75FF6DCE1A5016BCF3AE6BCA9B4BE9D0") public LayerDrawable(Drawable[] layers){  this(layers,null);}  }
class C{  public static String guessFormat(String name){  String ext=FileUtil.getFilenameExtension(name);  for (  String format : FORMATS) {    if (format.equals(ext)) {      return ext;    }  }  return null;}  }
class C{  @SuppressWarnings("TooBroadScope") private void flush(){  Collection<Entry> entries0;  rwLock.writeLock().lock();  try {    entries0=entries;    entries=new ConcurrentLinkedDeque8<>();  }  finally {    rwLock.writeLock().unlock();  }  cnt.set(0);  if (!entries0.isEmpty()) {    boolean addHdr=!file.exists();    FileOutputStream fos=null;    OutputStreamWriter osw=null;    BufferedWriter bw=null;    try {      fos=new FileOutputStream(file,true);      osw=new OutputStreamWriter(fos);      bw=new BufferedWriter(osw);      if (addHdr)       bw.write(HDR + U.nl());      for (      Entry entry : entries0)       bw.write(entry + U.nl());    } catch (    IOException e) {      U.error(null,"Failed to flush logged entries to a disk due to an IO exception.",e);    } finally {      U.closeQuiet(bw);      U.closeQuiet(osw);      U.closeQuiet(fos);    }  }}  }
class C{  public void testExtractEncodingFromElidedLine(){  String encoding=ExtractXMLEncoding.extractEncoding(elidedLine);  assertEquals("iso-8859-1",encoding);}  }
class C{  private void handleStartedStage(final State current) throws RpcException {switch (current.taskState.subStage) {case GET_HOST_INFO:    this.getHostInfo(current);  break;case TRIGGER_SCAN:this.triggerImageScan(current);break;case WAIT_FOR_SCAN_COMPLETION:this.waitForImageScanCompletion(current);break;case TRIGGER_DELETE:this.triggerImageDelete(current);break;case WAIT_FOR_DELETE_COMPLETION:this.waitForImageDeleteCompletion(current);break;default :this.failTask(new RuntimeException(String.format("Un-expected stage: %s",current.taskState.stage)));}}  }
class C{  public boolean isRelevant(final int minimumWords){  return this.dict.size() >= minimumWords;}  }
class C{  public static Date parseDateStrictly(final String str,final Locale locale,final String... parsePatterns) throws ParseException {  return parseDateWithLeniency(str,null,parsePatterns,false);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  @Override public void reset(){  editorSite.getActionBars().getStatusLineManager().setErrorMessage(null);}  }
class C{  public static double[][] makeDelayEmbeddingVector(double[][] data,int k,int startKthPoint,int numEmbeddingVectors) throws Exception {  if (startKthPoint < k - 1) {    throw new Exception("Start point t=" + startKthPoint + " is too early for a "+ k+ " length embedding vector");  }  if (numEmbeddingVectors + startKthPoint > data.length) {    throw new Exception("Too many embedding vectors " + numEmbeddingVectors + " requested for the given startPoint "+ startKthPoint+ " and time series length "+ data.length);  }  int columns=data[0].length;  double[][] embeddingVectors=new double[numEmbeddingVectors][k * columns];  for (int t=startKthPoint; t < numEmbeddingVectors + startKthPoint; t++) {    for (int i=0; i < k; i++) {      for (int c=0; c < columns; c++) {        embeddingVectors[t - startKthPoint][i * columns + c]=data[t - i][c];      }    }  }  return embeddingVectors;}  }
class C{  public void addOnItemTouchListener(RecyclerView.OnItemTouchListener listener){  mRecycler.addOnItemTouchListener(listener);}  }
class C{  protected void rethrow(SQLException cause,String sql,Object[] params) throws SQLException {  StringBuilder msg=new StringBuilder(cause.getMessage());  msg.append(" Query: ");  msg.append(sql);  msg.append(" Parameters: ");  if (params == null) {    msg.append("[]");  } else {    msg.append(Arrays.asList(params));  }  SQLException e=new SQLException(msg.toString(),cause.getSQLState(),cause.getErrorCode());  e.setNextException(cause);  throw e;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public AlgorithmTerminationException(Algorithm algorithm,String message){  super(algorithm,message);}  }
class C{  public static Token newSymbol(String type,int startLine,int startColumn){  return new Token(Types.lookupSymbol(type),type,startLine,startColumn);}  }
class C{  public static Optional<Excerpt> freshBuilder(Block block,Metadata metadata){  if (!metadata.getBuilderFactory().isPresent()) {    return Optional.absent();  }  Excerpt defaults=block.declare("_defaults","%s _defaults = %s;",metadata.getGeneratedBuilder(),metadata.getBuilderFactory().get().newBuilder(metadata.getBuilder(),TypeInference.INFERRED_TYPES));  return Optional.of(defaults);}  }
class C{  protected boolean executeInternal(String sql,int fetchSize) throws SQLException {  executing=true;  QueryException exception=null;  lock.lock();  try {    executeQueryProlog();    batchResultSet=null;    ExecutionResult internalExecutionResult;    if (options.allowMultiQueries || options.rewriteBatchedStatements) {      internalExecutionResult=new MultiVariableIntExecutionResult(this,1,fetchSize,true);    } else {      internalExecutionResult=new SingleExecutionResult(this,fetchSize,true,false,true);    }    protocol.executeQuery(protocol.isMasterConnection(),internalExecutionResult,Utils.nativeSql(sql,connection.noBackslashEscapes),resultSetScrollType);    executionResult=internalExecutionResult;    return executionResult.getResultSet() != null;  } catch (  QueryException e) {    exception=e;    return false;  } finally {    lock.unlock();    executeQueryEpilog(exception);    executing=false;  }}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplySender dm,boolean result,VersionedObjectList versions,ReplyException ex){  Assert.assertTrue(recipient != null,"RemoveAllReplyMessage NULL reply message");  RemoveAllReplyMessage m=new RemoveAllReplyMessage(processorId,result,versions,ex);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  @Override public synchronized V put(K key,V value){  mbean.puts.incrementAndGet();  CacheEntry<V> entry=newSoftCacheEntry(key,value);  CacheEntry<V> oldEntry=cacheEntries.put(key,entry);  return safeValue(oldEntry);}  }
class C{  public static LatLon locationFromUTMCoord(int zone,String hemisphere,double easting,double northing,Globe globe){  UTMCoord coord=UTMCoord.fromUTM(zone,hemisphere,easting,northing,globe);  return new LatLon(coord.getLatitude(),coord.getLongitude());}  }
class C{  private void verify(final Task<Diff> task,final Diff decodedDiff,final Diff originalDiff) throws SQLConsumerException {  String orig=originalDiff.toString();  String deco=decodedDiff.toString();  boolean notEqual=!orig.equals(deco);  if (notEqual && MODE_SURROGATES == SurrogateModes.REPLACE) {    char[] origDiff=orig.toCharArray();    if (Surrogates.scan(origDiff)) {      String repDiff=new String(Surrogates.replace(origDiff));      notEqual=!repDiff.equals(deco);    }  }  if (notEqual) {    if (MODE_DEBUG_OUTPUT_ACTIVATED) {      try {        WikipediaXMLWriter writer=new WikipediaXMLWriter(LOGGING_PATH_DIFFTOOL + LOGGING_PATH_DEBUG + task.getHeader().getArticleName()+ ".dbg");switch (task.getTaskType()) {case TASK_FULL:case TASK_PARTIAL_FIRST:          writer.writeDiff(task);        break;case TASK_PARTIAL:case TASK_PARTIAL_LAST:{        int revCount=originalDiff.getRevisionCounter();        Diff d;        boolean fullRev=false;        for (int diffCount=0; !fullRev && diffCount < originalDiff.size(); diffCount++) {          d=task.get(diffCount);          if (d.getRevisionCounter() <= revCount && d.isFullRevision()) {            fullRev=true;            writer.writeDiff(task,diffCount);          }        }        if (!fullRev) {          writer.writeDiffFile(task);        }      }    break;default :  throw new IOException("Unknown TaskType");}writer.close();} catch (IOException e) {ConsumerLogMessages.logException(logger,e);}}throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_ENCODING_VERIFICATION_FAILED,"Redecoding of " + task.getHeader().getArticleName() + " failed at revision "+ originalDiff.getRevisionCounter()+ ".");}}  }
class C{  private RUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public ExamineSslAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("ExamineSslAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() + InputEvent.ALT_MASK));  putValue(LONG_DESCRIPTION,res.getString("ExamineSslAction.statusbar"));  putValue(NAME,res.getString("ExamineSslAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ExamineSslAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ExamineSslAction.image")))));}  }
class C{  public static String toNullIfEmptyOrWhitespace(String s){  return (StringUtil.isEmptyOrWhitespace(s)) ? null : s;}  }
class C{  public static void play(double sample){  if (Double.isNaN(sample))   throw new IllegalArgumentException("sample is NaN");  if (sample < -1.0)   sample=-1.0;  if (sample > +1.0)   sample=+1.0;  short s=(short)(MAX_16_BIT * sample);  buffer[bufferSize++]=(byte)s;  buffer[bufferSize++]=(byte)(s >> 8);  if (bufferSize >= buffer.length) {    line.write(buffer,0,buffer.length);    bufferSize=0;  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {}  }
class C{  public EaseOut(float overshoot){  this.overshoot=overshoot;}  }
class C{  public Swagger2MarkupConfigBuilder withFlatBody(){  config.flatBodyEnabled=true;  return this;}  }
class C{  public static <T>T newInstance(Class<T> cl,Object contextProvider){  Check.assumeNotNull(contextProvider,"contextProvider not null");  final Properties ctx=getCtx(contextProvider);  final String trxName=getTrxName(contextProvider);  return create(ctx,cl,trxName);}  }
class C{  public static void printResults(PowerDatacenter datacenter,List<Vm> vms,double lastClock,String experimentName,boolean outputInCsv,String outputFolder){  Log.enable();  List<Host> hosts=datacenter.getHostList();  int numberOfHosts=hosts.size();  int numberOfVms=vms.size();  double totalSimulationTime=lastClock;  double energy=datacenter.getPower() / (3600 * 1000);  int numberOfMigrations=datacenter.getMigrationCount();  Map<String,Double> slaMetrics=getSlaMetrics(vms);  double slaOverall=slaMetrics.get("overall");  double slaAverage=slaMetrics.get("average");  double slaDegradationDueToMigration=slaMetrics.get("underallocated_migration");  double slaTimePerActiveHost=getSlaTimePerActiveHost(hosts);  double sla=slaTimePerActiveHost * slaDegradationDueToMigration;  List<Double> timeBeforeHostShutdown=getTimesBeforeHostShutdown(hosts);  int numberOfHostShutdowns=timeBeforeHostShutdown.size();  double meanTimeBeforeHostShutdown=Double.NaN;  double stDevTimeBeforeHostShutdown=Double.NaN;  if (!timeBeforeHostShutdown.isEmpty()) {    meanTimeBeforeHostShutdown=MathUtil.mean(timeBeforeHostShutdown);    stDevTimeBeforeHostShutdown=MathUtil.stDev(timeBeforeHostShutdown);  }  List<Double> timeBeforeVmMigration=getTimesBeforeVmMigration(vms);  double meanTimeBeforeVmMigration=Double.NaN;  double stDevTimeBeforeVmMigration=Double.NaN;  if (!timeBeforeVmMigration.isEmpty()) {    meanTimeBeforeVmMigration=MathUtil.mean(timeBeforeVmMigration);    stDevTimeBeforeVmMigration=MathUtil.stDev(timeBeforeVmMigration);  }  if (outputInCsv) {    File folder=new File(outputFolder);    if (!folder.exists()) {      folder.mkdir();    }    File folder1=new File(outputFolder + "/stats");    if (!folder1.exists()) {      folder1.mkdir();    }    File folder2=new File(outputFolder + "/time_before_host_shutdown");    if (!folder2.exists()) {      folder2.mkdir();    }    File folder3=new File(outputFolder + "/time_before_vm_migration");    if (!folder3.exists()) {      folder3.mkdir();    }    File folder4=new File(outputFolder + "/metrics");    if (!folder4.exists()) {      folder4.mkdir();    }    StringBuilder data=new StringBuilder();    String delimeter=",";    data.append(experimentName + delimeter);    data.append(parseExperimentName(experimentName));    data.append(String.format("%d",numberOfHosts) + delimeter);    data.append(String.format("%d",numberOfVms) + delimeter);    data.append(String.format("%.2f",totalSimulationTime) + delimeter);    data.append(String.format("%.5f",energy) + delimeter);    data.append(String.format("%d",numberOfMigrations) + delimeter);    data.append(String.format("%.10f",sla) + delimeter);    data.append(String.format("%.10f",slaTimePerActiveHost) + delimeter);    data.append(String.format("%.10f",slaDegradationDueToMigration) + delimeter);    data.append(String.format("%.10f",slaOverall) + delimeter);    data.append(String.format("%.10f",slaAverage) + delimeter);    data.append(String.format("%d",numberOfHostShutdowns) + delimeter);    data.append(String.format("%.2f",meanTimeBeforeHostShutdown) + delimeter);    data.append(String.format("%.2f",stDevTimeBeforeHostShutdown) + delimeter);    data.append(String.format("%.2f",meanTimeBeforeVmMigration) + delimeter);    data.append(String.format("%.2f",stDevTimeBeforeVmMigration) + delimeter);    if (datacenter.getVmAllocationPolicy() instanceof PowerVmAllocationPolicyMigrationAbstract) {      PowerVmAllocationPolicyMigrationAbstract vmAllocationPolicy=(PowerVmAllocationPolicyMigrationAbstract)datacenter.getVmAllocationPolicy();      double executionTimeVmSelectionMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryVmSelection());      double executionTimeVmSelectionStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryVmSelection());      double executionTimeHostSelectionMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryHostSelection());      double executionTimeHostSelectionStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryHostSelection());      double executionTimeVmReallocationMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryVmReallocation());      double executionTimeVmReallocationStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryVmReallocation());      double executionTimeTotalMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryTotal());      double executionTimeTotalStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryTotal());      data.append(String.format("%.5f",executionTimeVmSelectionMean) + delimeter);      data.append(String.format("%.5f",executionTimeVmSelectionStDev) + delimeter);      data.append(String.format("%.5f",executionTimeHostSelectionMean) + delimeter);      data.append(String.format("%.5f",executionTimeHostSelectionStDev) + delimeter);      data.append(String.format("%.5f",executionTimeVmReallocationMean) + delimeter);      data.append(String.format("%.5f",executionTimeVmReallocationStDev) + delimeter);      data.append(String.format("%.5f",executionTimeTotalMean) + delimeter);      data.append(String.format("%.5f",executionTimeTotalStDev) + delimeter);      writeMetricHistory(hosts,vmAllocationPolicy,outputFolder + "/metrics/" + experimentName+ "_metric");    }    data.append("\n");    writeDataRow(data.toString(),outputFolder + "/stats/" + experimentName+ "_stats.csv");    writeDataColumn(timeBeforeHostShutdown,outputFolder + "/time_before_host_shutdown/" + experimentName+ "_time_before_host_shutdown.csv");    writeDataColumn(timeBeforeVmMigration,outputFolder + "/time_before_vm_migration/" + experimentName+ "_time_before_vm_migration.csv");  } else {    Log.setDisabled(false);    Log.printLine();    Log.printLine(String.format("Experiment name: " + experimentName));    Log.printLine(String.format("Number of hosts: " + numberOfHosts));    Log.printLine(String.format("Number of VMs: " + numberOfVms));    Log.printLine(String.format("Total simulation time: %.2f sec",totalSimulationTime));    Log.printLine(String.format("Energy consumption: %.2f kWh",energy));    Log.printLine(String.format("Number of VM migrations: %d",numberOfMigrations));    Log.printLine(String.format("SLA: %.5f%%",sla * 100));    Log.printLine(String.format("SLA perf degradation due to migration: %.2f%%",slaDegradationDueToMigration * 100));    Log.printLine(String.format("SLA time per active host: %.2f%%",slaTimePerActiveHost * 100));    Log.printLine(String.format("Overall SLA violation: %.2f%%",slaOverall * 100));    Log.printLine(String.format("Average SLA violation: %.2f%%",slaAverage * 100));    Log.printLine(String.format("Number of host shutdowns: %d",numberOfHostShutdowns));    Log.printLine(String.format("Mean time before a host shutdown: %.2f sec",meanTimeBeforeHostShutdown));    Log.printLine(String.format("StDev time before a host shutdown: %.2f sec",stDevTimeBeforeHostShutdown));    Log.printLine(String.format("Mean time before a VM migration: %.2f sec",meanTimeBeforeVmMigration));    Log.printLine(String.format("StDev time before a VM migration: %.2f sec",stDevTimeBeforeVmMigration));    if (datacenter.getVmAllocationPolicy() instanceof PowerVmAllocationPolicyMigrationAbstract) {      PowerVmAllocationPolicyMigrationAbstract vmAllocationPolicy=(PowerVmAllocationPolicyMigrationAbstract)datacenter.getVmAllocationPolicy();      double executionTimeVmSelectionMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryVmSelection());      double executionTimeVmSelectionStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryVmSelection());      double executionTimeHostSelectionMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryHostSelection());      double executionTimeHostSelectionStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryHostSelection());      double executionTimeVmReallocationMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryVmReallocation());      double executionTimeVmReallocationStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryVmReallocation());      double executionTimeTotalMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryTotal());      double executionTimeTotalStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryTotal());      Log.printLine(String.format("Execution time - VM selection mean: %.5f sec",executionTimeVmSelectionMean));      Log.printLine(String.format("Execution time - VM selection stDev: %.5f sec",executionTimeVmSelectionStDev));      Log.printLine(String.format("Execution time - host selection mean: %.5f sec",executionTimeHostSelectionMean));      Log.printLine(String.format("Execution time - host selection stDev: %.5f sec",executionTimeHostSelectionStDev));      Log.printLine(String.format("Execution time - VM reallocation mean: %.5f sec",executionTimeVmReallocationMean));      Log.printLine(String.format("Execution time - VM reallocation stDev: %.5f sec",executionTimeVmReallocationStDev));      Log.printLine(String.format("Execution time - total mean: %.5f sec",executionTimeTotalMean));      Log.printLine(String.format("Execution time - total stDev: %.5f sec",executionTimeTotalStDev));    }    Log.printLine();  }  Log.setDisabled(true);}  }
class C{  public Instance calcPivot(MyIdxList list1,MyIdxList list2,Instances insts){  int classIdx=m_Instances.classIndex();  double[] attrVals=new double[insts.numAttributes()];  Instance temp;  for (int i=0; i < list1.length(); i++) {    temp=insts.instance(list1.get(i).idx);    for (int k=0; k < temp.numValues(); k++) {      if (temp.index(k) == classIdx) {        continue;      }      attrVals[k]+=temp.valueSparse(k);    }  }  for (int j=0; j < list2.length(); j++) {    temp=insts.instance(list2.get(j).idx);    for (int k=0; k < temp.numValues(); k++) {      if (temp.index(k) == classIdx) {        continue;      }      attrVals[k]+=temp.valueSparse(k);    }  }  for (int j=0, numInsts=list1.length() + list2.length(); j < attrVals.length; j++) {    attrVals[j]/=numInsts;  }  temp=new DenseInstance(1.0,attrVals);  return temp;}  }
class C{  private static void usage(){  int consoleWidth=ConsoleUtil.getConsoleWidth();  if (consoleWidth <= 0) {    consoleWidth=80;  }  System.out.println("java -cp baksmali.jar org.jf.dexlib2.analysis.DumpFields -d path/to/framework/jar/files <dex-file>");}  }
class C{  public static byte[] decode(char[] in,int iOff,int iLen){  if (iLen % 4 != 0)   throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  while (iLen > 0 && in[iOff + iLen - 1] == '=')   iLen--;  int oLen=(iLen * 3) / 4;  byte[] out=new byte[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++];    int i1=in[ip++];    int i2=ip < iEnd ? in[ip++] : 'A';    int i3=ip < iEnd ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int b0=map2[i0];    int b1=map2[i1];    int b2=map2[i2];    int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int o0=(b0 << 2) | (b1 >>> 4);    int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen)     out[op++]=(byte)o1;    if (op < oLen)     out[op++]=(byte)o2;  }  return out;}  }
class C{  public Stream<? extends SymbolInformation> search(String query){  Stream<SymbolInformation> classes=allSymbols(ElementKind.CLASS);  Stream<SymbolInformation> methods=allSymbols(ElementKind.METHOD);  return Stream.concat(classes,methods).filter(null);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public static ButtonDialog createNewDialog(String uri){  ButtonDialogBuilder builder=new ButtonDialogBuilder("browser_unavailable");  JPanel mainPanel=new JPanel(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.insets=new Insets(5,5,5,5);  gbc.gridy=0;  gbc.gridx=0;  JTextField urlTextField=makeTextField(uri);  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  mainPanel.add(urlTextField,gbc);  gbc.insets=new Insets(5,0,5,5);  JButton copyButton=makeCopyButton(uri);  gbc.gridx+=1;  gbc.weightx=0.0;  gbc.fill=GridBagConstraints.NONE;  gbc.ipady=-1;  mainPanel.add(copyButton,gbc);  ButtonDialog dialog=builder.setContent(mainPanel,ButtonDialog.MESSAGE).setButtons(DefaultButtons.CLOSE_BUTTON).setOwner(KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()).build();  return dialog;}  }
class C{  @RequestProcessing(value="/verifycode/remove-expired",method=HTTPRequestMethod.GET) public void removeExpriedVerifycodes(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String key=Symphonys.get("keyOfSymphony");  if (!key.equals(request.getParameter("key"))) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  verifycodeMgmtService.removeExpiredVerifycodes();  context.renderJSON().renderTrueResult();}  }
class C{  private void updateAndRender(float targetProgress){  if (this.fadeTimeMs > 0) {    if (targetProgress > 0f && this.progress == 0f)     this.fadeIn(); else     if (targetProgress < 1f && this.progress == 1f)     this.fadeIn(); else     if (targetProgress == 0f && this.progress > 0f)     this.fadeOut(); else     if (targetProgress == 1f && this.progress < 1f)     this.fadeOut();  }  this.progress=targetProgress;  if (Looper.myLooper() == Looper.getMainLooper()) {    this.invalidate();  } else {    this.postInvalidate();  }}  }
class C{  public IllegalArgumentException(String message){  super(message);}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public void removeIndex(IIndex index){  if (index != null) {    indices.remove(index);  }}  }
class C{  public void remove(){  purge(cursor);}  }
class C{  public double computeSecondCover(boolean leaf){  double max=0.;  for (  DistanceEntry<E> e : secondAssignments) {    double cover=leaf ? e.getDistance() : (e.getEntry().getCoveringRadius() + e.getDistance());    max=cover > max ? cover : max;  }  return max;}  }
class C{  public Random(){  this(System.currentTimeMillis());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    double fx, fy;    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          slope=(float)(Math.atan(Math.sqrt(fx * fx + fy * fy)) * radToDeg);          outputFile.setValue(row,col,slope);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public boolean declaresMethod(String subsignature){  checkLevel(SIGNATURES);  return declaresMethod(Scene.v().getSubSigNumberer().findOrAdd(subsignature));}  }
class C{  public static void scrollToVisible(JTable table,int row,int col){  if (!(table.getParent() instanceof JViewport))   return;  JViewport viewport=(JViewport)table.getParent();  Rectangle rect=table.getCellRect(row,col,true);  Point pt=viewport.getViewPosition();  rect.setLocation(rect.x - pt.x,rect.y - pt.y);  viewport.scrollRectToVisible(rect);}  }
class C{  public boolean isCrossFadeEnabled(){  return mCrossFade;}  }
class C{  public static AnnotatedClass construct(Class<?> cls,AnnotationIntrospector aintr,MixInResolver mir){  List<Class<?>> st=ClassUtil.findSuperTypes(cls,null);  AnnotatedClass ac=new AnnotatedClass(cls,st,aintr,mir,null);  ac.resolveClassAnnotations();  return ac;}  }
class C{  private String validateSnmpDirectory(String snmpDir){  return snmpDir;}  }
class C{  public void swap(String n0,String n1){  if (n0 == null || n1 == null) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Can not swap unnamed cores.");  }  solrCores.swap(n0,n1);  coresLocator.swap(this,solrCores.getCoreDescriptor(n0),solrCores.getCoreDescriptor(n1));  log.info("swapped: " + n0 + " with "+ n1);}  }
class C{  public char next(){  if (_length <= ++_pos) {    _pos=_length;    return DONE;  } else   return _string.charAt(_pos);}  }
class C{  public void searchStopped(){}  }
class C{  public static double tau_b(ExampleSet eSet,Attribute a,Attribute b,double fuzz) throws OperatorException {  ExampleSet e=extract(eSet,a,b);  FuzzyComp fc=new FuzzyComp(fuzz);  int c=0;  int d=0;  int ta=0;  int tb=0;  int n=0;  Iterator<Example> i=e.iterator();  while (i.hasNext()) {    Example z1=i.next();    n++;    double x=z1.getValue(a);    double y=z1.getValue(b);    if (b.isNominal() && a != null) {      String yString=b.getMapping().mapIndex((int)y);      y=a.getMapping().getIndex(yString);    }    Iterator<Example> j=e.iterator();    for (int k=0; k < n; k++) {      j.next();    }    while (j.hasNext()) {      Example z2=j.next();      double xx=z2.getValue(a);      double yy=z2.getValue(b);      if (b.isNominal() && a != null) {        String yyString=b.getMapping().mapIndex((int)yy);        yy=a.getMapping().getIndex(yyString);      }      int xc=fc.compare(x,xx);      int yc=fc.compare(y,yy);      if (xc == 0) {        if (yc == 0) {        } else {          ta++;        }      } else       if (yc == 0) {        tb++;      } else       if (xc == yc) {        c++;      } else {        d++;      }    }  }  double num=c - d;  double den=Math.sqrt((c + d + ta) * (c + d + tb));  if (den != 0) {    return num / den;  } else {    return 0;  }}  }
class C{  public final void renameAttributeValue(Attribute att,String val,String name){  int v=att.indexOfValue(val);  if (v == -1)   throw new IllegalArgumentException(val + " not found");  renameAttributeValue(att.index(),v,name);}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:case Constants.ELEMNAME_APPLY_TEMPLATES:case Constants.ELEMNAME_APPLY_IMPORTS:case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_FOREACH:case Constants.ELEMNAME_VALUEOF:case Constants.ELEMNAME_COPY_OF:case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_CHOOSE:case Constants.ELEMNAME_IF:case Constants.ELEMNAME_TEXT:case Constants.ELEMNAME_COPY:case Constants.ELEMNAME_VARIABLE:case Constants.ELEMNAME_MESSAGE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public void sendCanMessage(CanMessage m,CanListener reply){  log.debug("TrafficController sendCanMessage() " + m.toString());  sendMessage(m,reply);}  }
class C{  public ParsedURLData parseURL(ParsedURL baseURL,String urlStr){  if (urlStr.length() == 0)   return baseURL.data;  int idx=0, len=urlStr.length();  if (len == 0)   return baseURL.data;  char ch=urlStr.charAt(idx);  while ((ch == '-') || (ch == '+') || (ch == '.')|| ((ch >= 'a') && (ch <= 'z'))|| ((ch >= 'A') && (ch <= 'Z'))) {    idx++;    if (idx == len) {      ch=0;      break;    }    ch=urlStr.charAt(idx);  }  String protocol=null;  if (ch == ':') {    protocol=urlStr.substring(0,idx).toLowerCase();  }  if (protocol != null) {    if (!protocol.equals(baseURL.getProtocol()))     return parseURL(urlStr);    idx++;    if (idx == urlStr.length())     return parseURL(urlStr);    if (urlStr.charAt(idx) == '/')     return parseURL(urlStr);    urlStr=urlStr.substring(idx);  }  if (urlStr.startsWith("/")) {    if ((urlStr.length() > 1) && (urlStr.charAt(1) == '/')) {      return parseURL(baseURL.getProtocol() + ":" + urlStr);    }    return parseURL(baseURL.getPortStr() + urlStr);  }  if (urlStr.startsWith("#")) {    String base=baseURL.getPortStr();    if (baseURL.getPath() != null)     base+=baseURL.getPath();    return parseURL(base + urlStr);  }  String path=baseURL.getPath();  if (path == null)   path="";  idx=path.lastIndexOf('/');  if (idx == -1)   path=""; else   path=path.substring(0,idx + 1);  return parseURL(baseURL.getPortStr() + path + urlStr);}  }
class C{  public void testBoundedLongs(){  AtomicInteger fails=new AtomicInteger(0);  SplittableRandom r=new SplittableRandom();  long size=123L;  for (long least=-86028121; least < MAX_LONG_BOUND; least+=1982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      final long lo=least, hi=bound;      r.longs(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  public void fireLayer(int type,Layer[] layers){  if (logger.isLoggable(Level.FINE)) {    logger.fine("calling setLayers on " + size() + " objects");  }  if (isEmpty())   return;  LayerEvent evt=new LayerEvent(source,type,layers);  for (  LayerListener listener : this) {    listener.setLayers(evt);  }}  }
class C{  public SVGOMMetadataElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static PnSignalingParams defaultInstance(){  MediaConstraints pcConstraints=PnSignalingParams.defaultPcConstraints();  MediaConstraints videoConstraints=PnSignalingParams.defaultVideoConstraints();  MediaConstraints audioConstraints=PnSignalingParams.defaultAudioConstraints();  List<PeerConnection.IceServer> iceServers=PnSignalingParams.defaultIceServers();  return new PnSignalingParams(iceServers,pcConstraints,videoConstraints,audioConstraints);}  }
class C{  private GF2Polynomial lower(int k){  GF2Polynomial result=new GF2Polynomial(k << 5);  System.arraycopy(value,0,result.value,0,Math.min(k,blocks));  return result;}  }
class C{  public boolean isEmpty(){  return empty;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean equals(Object other){  if (this == other) {    return true;  }  if (!(other instanceof EllipticCurve)) {    return false;  }  EllipticCurve otherEc=(EllipticCurve)other;  return this.field.equals(otherEc.field) && this.a.equals(otherEc.a) && this.b.equals(otherEc.b)&& Arrays.equals(this.seed,otherEc.seed);}  }
class C{  @Override public void accumulate(Object value){  this.distinct.addAll((Set)value);}  }
class C{  public OnlineLDAsvi(int K,int D,int W){  setK(K);  setD(D);  setVocabSize(W);}  }
class C{  public double computeLogLiGradient(double[] lambda,double[] gradLogLi,int numIter,PrintWriter fout){  double logLi=0.0;  int ii, i;  for (i=0; i < numFeatures; i++) {    gradLogLi[i]=-1 * lambda[i] / model.option.sigmaSquare;    logLi-=(lambda[i] * lambda[i]) / (2 * model.option.sigmaSquare);  }  for (ii=0; ii < model.data.trnData.size(); ii++) {    Observation obsr=(Observation)model.data.trnData.get(ii);    for (i=0; i < numLabels; i++) {      temp[i]=0.0;    }    double obsrLogLi=0.0;    model.feaGen.startScanFeatures(obsr);    while (model.feaGen.hasNextFeature()) {      Feature f=model.feaGen.nextFeature();      if (f.label == obsr.humanLabel) {        gradLogLi[f.idx]+=f.val;        obsrLogLi+=lambda[f.idx] * f.val;      }      temp[f.label]+=lambda[f.idx] * f.val;    }    double Zx=0.0;    for (i=0; i < numLabels; i++) {      Zx+=Math.exp(temp[i]);    }    model.feaGen.scanReset();    while (model.feaGen.hasNextFeature()) {      Feature f=model.feaGen.nextFeature();      gradLogLi[f.idx]-=f.val * Math.exp(temp[f.label]) / Zx;    }    obsrLogLi-=Math.log(Zx);    logLi+=obsrLogLi;  }  System.out.println();  System.out.println("Iteration: " + Integer.toString(numIter));  System.out.println("\tLog-likelihood                 = " + Double.toString(logLi));  double gradLogLiNorm=Train.norm(gradLogLi);  System.out.println("\tNorm (log-likelihood gradient) = " + Double.toString(gradLogLiNorm));  double lambdaNorm=Train.norm(lambda);  System.out.println("\tNorm (lambda)                  = " + Double.toString(lambdaNorm));  if (model.option.isLogging) {    fout.println();    fout.println("Iteration: " + Integer.toString(numIter));    fout.println("\tLog-likelihood                 = " + Double.toString(logLi));    fout.println("\tNorm (log-likelihood gradient) = " + Double.toString(gradLogLiNorm));    fout.println("\tNorm (lambda)                  = " + Double.toString(lambdaNorm));  }  return logLi;}  }
class C{  public String toString(){  int iMax=length() - 1;  if (iMax == -1) {    return "[]";  }  StringBuilder b=new StringBuilder((17 + 2) * (iMax + 1));  b.append('[');  for (int i=0; ; i++) {    b.append(longBitsToDouble(longs.get(i)));    if (i == iMax) {      return b.append(']').toString();    }    b.append(',').append(' ');  }}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.209 -0400",hash_original_method="4007BD37B56F652F2DD863D7816336D0",hash_generated_method="2024B0D60D55840B17528B87EB493ED5") @Override public void write(char[] chr,int st,int end) throws IOException {  out.write(chr,st,end);}  }
class C{  public static Map<String,Double> calculate(CombinedSmallContingencyTable cSCTable,int numberOfSmallContingencyTables,boolean softEvaluation){  double tp=cSCTable.getTruePositives();  double fp=cSCTable.getFalsePositives();  double fn=cSCTable.getFalseNegatives();  double tn=cSCTable.getTrueNegatives();  Double accuracy=0.0;  double n=(Double)(tp + fp + fn+ tn) / numberOfSmallContingencyTables;  if (n != 0.0) {    accuracy=(Double)tp / n;  } else   if (!softEvaluation) {    accuracy=Double.NaN;  }  Map<String,Double> results=new HashMap<String,Double>();  results.put(Accuracy.class.getSimpleName(),accuracy);  return results;}  }
class C{  public void connect(final BluetoothDevice device){  if (mConnected)   return;synchronized (mLock) {    if (mBluetoothGatt != null) {      mBluetoothGatt.close();      mBluetoothGatt=null;    } else {      mContext.registerReceiver(mBluetoothStateBroadcastReceiver,new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));      mContext.registerReceiver(mBondingBroadcastReceiver,new IntentFilter(BluetoothDevice.ACTION_BOND_STATE_CHANGED));    }  }  final boolean autoConnect=shouldAutoConnect();  mUserDisconnected=!autoConnect;  mBluetoothDevice=device;  mConnectionState=BluetoothGatt.STATE_CONNECTING;  mBluetoothGatt=device.connectGatt(mContext,autoConnect,mGattCallback=new BleManagerGattCallback());}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.371 -0500",hash_original_method="8603CA8C8DA2F2A8742D0D3D57F85A73",hash_generated_method="8603CA8C8DA2F2A8742D0D3D57F85A73") Values(){  initializeTable(INITIAL_SIZE);  this.size=0;  this.tombstones=0;}  }
class C{  public FtHttpResumeDownload(Uri downloadServerAddress,Uri file,Uri fileIcon,MmContent content,ContactId contact,String chatId,String filetransferId,boolean isGroup,long timestamp,long timestampSent,long fileExpiration,long iconExpiration,boolean accepted,String remoteSipInstance){  super(Direction.INCOMING,file,content.getName(),content.getEncoding(),content.getSize(),fileIcon,contact,chatId,filetransferId,isGroup,timestamp,timestampSent);  mServerAddress=downloadServerAddress;  mFileExpiration=fileExpiration;  mIconExpiration=iconExpiration;  mAccepted=accepted;  mRemoteSipInstance=remoteSipInstance;  if (downloadServerAddress == null || filetransferId == null)   throw new IllegalArgumentException("Invalid argument");}  }
class C{  public boolean isInitialized(){  return getNative().isInitialized();}  }
class C{  public UserDTO(){  super();}  }
class C{  public boolean belongs(IPackageFragment fragment){  if (fragment == null)   return false;  if (fJavaProject.equals(fragment.getJavaProject())) {    return fName.equals(fragment.getElementName());  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public List<PoiType> loadPoiTypesFromStream(InputStreamReader inputStreamReader){  try {    H2GeoDto h2GeoDto=gson.fromJson(inputStreamReader,H2GeoDto.class);    sharedPreferences.edit().putString(application.getString(R.string.shared_prefs_h2geo_version),h2GeoDto.getVersion()).putString(application.getString(R.string.shared_prefs_h2geo_date),h2GeoDto.getLastUpdate()).apply();    return loadPoiTypesFromH2GeoDto(h2GeoDto);  } catch (  Exception e) {    Timber.e(e,"Error while loading POI Types from assets");    throw new RuntimeException(e);  } finally {    CloseableUtils.closeQuietly(inputStreamReader);  }}  }
class C{  public SelectionInputDialog(Window owner,String key,T[] selectionValues,T initialSelectionValue,Object... keyArguments){  this(owner,key,selectionValues,initialSelectionValue,null,keyArguments);}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  private String validateInputs(){  if (jarRadio.getSelection()) {    File f=new File(jarPath.getText());    if (!f.exists()) {      return "Jar file doesn't exists";    }    if (!f.canRead()) {      return "Can't read Jar file directory";    }  } else {    File f=new File(dirPath.getText());    if (!f.exists()) {      return "Base Path directory doesn't exists";    }    if (!f.canRead()) {      return "Can't read Base Path directory";    }  }  return null;}  }
class C{  private void addSynapseGroupBidirectional(SynapseGroup sg1,SynapseGroup sg2){  SynapseGroupNodeBidirectional synGBD=SynapseGroupNodeBidirectional.createBidirectionalSynapseGN(this,sg1,sg2);  canvas.getLayer().addChild(synGBD);  objectNodeMap.put(sg1,synGBD);  objectNodeMap.put(sg2,synGBD);  NeuronGroupNode srcNode=(NeuronGroupNode)objectNodeMap.get(sg1.getSourceNeuronGroup());  if (srcNode != null) {    srcNode.addPropertyChangeListener(PNode.PROPERTY_FULL_BOUNDS,synGBD);  }  NeuronGroupNode tarNode=(NeuronGroupNode)objectNodeMap.get(sg1.getTargetNeuronGroup());  if (tarNode != null) {    tarNode.addPropertyChangeListener(PNode.PROPERTY_FULL_BOUNDS,synGBD);  }}  }
class C{  public static boolean validateTypeSize(final JTextField size){  try {    if (size.getText().isEmpty() || Integer.parseInt(size.getText()) < 0) {      return false;    }  } catch (  final NumberFormatException exception) {    return false;  }  return true;}  }
class C{  public static XMLObjectWriter newInstance(OutputStream out) throws XMLStreamException {  XMLObjectWriter writer=new XMLObjectWriter();  writer.setOutput(out);  return writer;}  }
class C{  public static ToleratedUpdateError parseMetadataIfToleratedUpdateError(String metadataKey,String metadataVal){  if (!metadataKey.startsWith(META_PRE)) {    return null;  }  final int typeEnd=metadataKey.indexOf(':',META_PRE_LEN);  if (typeEnd < 0) {    return null;  }  return new ToleratedUpdateError(CmdType.valueOf(metadataKey.substring(META_PRE_LEN,typeEnd)),metadataKey.substring(typeEnd + 1),metadataVal);}  }
class C{  protected boolean startsWithOpenBracket(Word w){  return w.form.startsWith("(") || w.form.startsWith("{") || w.form.startsWith("[")|| w.form.startsWith("-LBR-");}  }
class C{  protected TypeHierarchy createTypeHierarchy(){  return new DefaultTypeHierarchy(checker,getQualifierHierarchy(),checker.getOption("ignoreRawTypeArguments","true").equals("true"),checker.hasOption("invariantArrays"));}  }
class C{  public void buildPathPart(Appendable buffer,String url) throws WebAppConfigurationException, IOException {  if (servletPath == null) {    throw new IllegalStateException("Servlet path is unknown");  }  buffer.append(servletPath);  if (!url.startsWith("/")) {    buffer.append("/");  }  buffer.append(url);}  }
class C{  private void resetSourceParameters(){  resetVendor(s_isSource,null);  resetHost(s_isSource,null);  resetPort(s_isSource,null);  resetUser(s_isSource,null);  resetPassword(s_isSource,null);  resetSystemUser(s_isSource,null);  resetSystemPassword(s_isSource,null);  resetSystemUserStatus(s_isSource);  resetName(s_isSource,null);  resetURL(s_isSource,null);  resetCatalog(s_isSource,null);  resetSchema(s_isSource,null);  resetVersion(s_isSource);}  }
class C{  @After public void tearDown(){  test=null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void removeSubdirectory(String directory){  LinkedList<String> entriesToRemove=new LinkedList<String>();  for (  Entry<String,JarEntry> JarEntry : jarEntries.entrySet()) {    if (JarEntry.getKey().startsWith(directory)) {      entriesToRemove.add(JarEntry.getKey());    }  }  for (  String entryToRemove : entriesToRemove) {    jarEntries.remove(entryToRemove);  }}  }
class C{  public void refreshOwner(){  if (model.isNoSubscriptionOwner()) {    User owner=model.getSelectedOwner();    if (owner != null) {      owner.setOwnerSelected(false);    }    model.setSelectedOwner(null);  } else {    model.setSelectedOwner(model.getStoredOwner());  }  refreshSelectedOwnerName(model.getSelectedOwner());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.079 -0500",hash_original_method="3CB53268EE03367F93FB62614B11BBE8",hash_generated_method="62695132D3996D94203F0867318C9D15") public boolean canContain(ElementType other){  return (theModel & other.theMemberOf) != 0;}  }
class C{  private void centerBitmap(){  RectF rect=new RectF(0,0,imageW,imageH);  matrix.mapRect(rect);  float height=rect.height();  float width=rect.width();  float deltaX=0, deltaY=0;  deltaX=(viewW - width - leftMargins * 2) / 2;  deltaY=-(viewH - height - topBottomMargins) / 2;  matrix.postTranslate(deltaX,deltaY);}  }
class C{  private void updateParentContainerStructureFrom(CollectionElementVariable2 elemVar,ConstraintVariable2 v1){  ConstraintVariable2 elemContainer=elemVar.getParentConstraintVariable();  ParametricStructure elemContainerStructure=elemStructure(elemContainer);  if (elemContainerStructure == ParametricStructure.NONE)   return;  if (elemContainerStructure == null) {    elemContainerStructure=newParametricType(elemContainer.getType());    setStructureAndPush(elemContainer,elemContainerStructure);  }  ParametricStructure v1Structure=elemStructure(v1);  int parmIdx=elemVar.getDeclarationTypeVariableIndex();  if (parmIdx == CollectionElementVariable2.NOT_DECLARED_TYPE_VARIABLE_INDEX)   return;  if (elemContainerStructure == v1Structure || containsSubStructure(v1Structure,elemContainerStructure)) {    if (!(elemStructure(elemVar) == ParametricStructure.NONE))     setStructureAndPush(elemVar,ParametricStructure.NONE);    if (elemContainerStructure.getParameters()[parmIdx] == null) {      elemContainerStructure.getParameters()[parmIdx]=ParametricStructure.NONE;      fWorkList2.push(elemContainer);    }  } else   if (updateStructureOfIthParamFrom(elemContainerStructure,parmIdx,v1Structure)) {    setStructureAndPush(elemVar,elemContainerStructure.getParameters()[parmIdx]);    fWorkList2.push(elemContainer);    if (DEBUG_INITIALIZATION)     System.out.println("  updated structure of " + elemContainer + " to "+ elemContainerStructure);  }}  }
class C{  public void showMessage(String title,String message,T data){  Notification n=new Notification(title,message,listener,expireTime);  n.setHideMethod(hideMethod);  n.setFallbackTimeout(maxDisplayTime);  n.setActivityTime(activityTime);  if (displayed.size() < maxItems) {    showNotification(n);  } else {    queue.add(n);    checkQueueSize();  }  notificationData.put(n,data);}  }
class C{  public static Vector<?> create(Vector<String> markerNames,String prefix,Properties properties,ProgressSupport progressSupport,boolean matchInOutVectorSize){  return getInstance()._create(markerNames,prefix,properties,progressSupport,matchInOutVectorSize);}  }
class C{  @Deprecated public JPASubscription(){}  }
class C{  public FastAdapterBottomSheetDialog<Item> add(int position,Item item){  mFastItemAdapter.add(position,item);  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static double normalCdf(double x,double mu,double sigma) throws Exception {  if (sigma < 0) {    throw new Exception("Standard deviation cannot be < 0");  }  double erfArg=(x - mu) / Math.sqrt(2.0 * sigma * sigma);  double cdf=0.5 * (1 + erf(erfArg));  return cdf;}  }
class C{  public synchronized boolean remove(Node obj){  ArrayList<Node> newList=new ArrayList<Node>(this.list);  boolean ret=newList.remove(obj);  if (ret) {    this.list=Collections.unmodifiableList(newList);    incrementVersion();  }  return ret;}  }
class C{  static public Locator southWest(boolean isTransform){  return new RelativeLocator(0.0,1.0,isTransform);}  }
class C{  public ValidationInfo(@NotNull String message){  this(message,null);}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public void removeStatementEventListener(StatementEventListener listener){synchronized (this.statementEventListeners) {    this.statementEventListeners.remove(listener);  }}  }
class C{  public void reply(CanReply m){}  }
class C{  public DeletionConstraintException(String message,DeletionConstraintExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public static void disableTotalKeySizeTracking(){  factory.disableTotalKeySizeTracking();}  }
class C{  public BogusRegExLiteralException(String message,INode node,String value){  super(message,node,value,null);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public Color mixColors(final Color... colors){  int totalRed=this.getRed();  int totalGreen=this.getGreen();  int totalBlue=this.getBlue();  int totalMax=Math.max(Math.max(totalRed,totalGreen),totalBlue);  for (  final Color color : colors) {    totalRed+=color.getRed();    totalGreen+=color.getGreen();    totalBlue+=color.getBlue();    totalMax+=Math.max(Math.max(color.getRed(),color.getGreen()),color.getBlue());  }  final float averageRed=totalRed / (colors.length + 1);  final float averageGreen=totalGreen / (colors.length + 1);  final float averageBlue=totalBlue / (colors.length + 1);  final float averageMax=totalMax / (colors.length + 1);  final float maximumOfAverages=Math.max(Math.max(averageRed,averageGreen),averageBlue);  final float gainFactor=averageMax / maximumOfAverages;  return Color.fromRGB((int)(averageRed * gainFactor),(int)(averageGreen * gainFactor),(int)(averageBlue * gainFactor));}  }
class C{  public PrintfFormat(String fmtArg) throws IllegalArgumentException {  this(Locale.getDefault(),fmtArg);}  }
class C{  public void cancel(){  try {    bluetoothSSocket.close();  } catch (  IOException e) {    Log.e(TAG,"Unable to close bluetooth socket.",e);  }}  }
class C{  private void resizeWidgetIfNeeded(boolean onDismiss){  int xThreshold=mCellLayout.getCellWidth() + mCellLayout.getWidthGap();  int yThreshold=mCellLayout.getCellHeight() + mCellLayout.getHeightGap();  int deltaX=mDeltaX + mDeltaXAddOn;  int deltaY=mDeltaY + mDeltaYAddOn;  float hSpanIncF=1.0f * deltaX / xThreshold - mRunningHInc;  float vSpanIncF=1.0f * deltaY / yThreshold - mRunningVInc;  int hSpanInc=0;  int vSpanInc=0;  int cellXInc=0;  int cellYInc=0;  int countX=mCellLayout.getCountX();  int countY=mCellLayout.getCountY();  if (Math.abs(hSpanIncF) > RESIZE_THRESHOLD) {    hSpanInc=Math.round(hSpanIncF);  }  if (Math.abs(vSpanIncF) > RESIZE_THRESHOLD) {    vSpanInc=Math.round(vSpanIncF);  }  if (!onDismiss && (hSpanInc == 0 && vSpanInc == 0))   return;  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)mWidgetView.getLayoutParams();  int spanX=lp.cellHSpan;  int spanY=lp.cellVSpan;  int cellX=lp.useTmpCoords ? lp.tmpCellX : lp.cellX;  int cellY=lp.useTmpCoords ? lp.tmpCellY : lp.cellY;  int hSpanDelta=0;  int vSpanDelta=0;  if (mLeftBorderActive) {    cellXInc=Math.max(-cellX,hSpanInc);    cellXInc=Math.min(lp.cellHSpan - mMinHSpan,cellXInc);    hSpanInc*=-1;    hSpanInc=Math.min(cellX,hSpanInc);    hSpanInc=Math.max(-(lp.cellHSpan - mMinHSpan),hSpanInc);    hSpanDelta=-hSpanInc;  } else   if (mRightBorderActive) {    hSpanInc=Math.min(countX - (cellX + spanX),hSpanInc);    hSpanInc=Math.max(-(lp.cellHSpan - mMinHSpan),hSpanInc);    hSpanDelta=hSpanInc;  }  if (mTopBorderActive) {    cellYInc=Math.max(-cellY,vSpanInc);    cellYInc=Math.min(lp.cellVSpan - mMinVSpan,cellYInc);    vSpanInc*=-1;    vSpanInc=Math.min(cellY,vSpanInc);    vSpanInc=Math.max(-(lp.cellVSpan - mMinVSpan),vSpanInc);    vSpanDelta=-vSpanInc;  } else   if (mBottomBorderActive) {    vSpanInc=Math.min(countY - (cellY + spanY),vSpanInc);    vSpanInc=Math.max(-(lp.cellVSpan - mMinVSpan),vSpanInc);    vSpanDelta=vSpanInc;  }  mDirectionVector[0]=0;  mDirectionVector[1]=0;  if (mLeftBorderActive || mRightBorderActive) {    spanX+=hSpanInc;    cellX+=cellXInc;    if (hSpanDelta != 0) {      mDirectionVector[0]=mLeftBorderActive ? -1 : 1;    }  }  if (mTopBorderActive || mBottomBorderActive) {    spanY+=vSpanInc;    cellY+=cellYInc;    if (vSpanDelta != 0) {      mDirectionVector[1]=mTopBorderActive ? -1 : 1;    }  }  if (!onDismiss && vSpanDelta == 0 && hSpanDelta == 0)   return;  if (onDismiss) {    mDirectionVector[0]=mLastDirectionVector[0];    mDirectionVector[1]=mLastDirectionVector[1];  } else {    mLastDirectionVector[0]=mDirectionVector[0];    mLastDirectionVector[1]=mDirectionVector[1];  }  if (mCellLayout.createAreaForResize(cellX,cellY,spanX,spanY,mWidgetView,mDirectionVector,onDismiss)) {    lp.tmpCellX=cellX;    lp.tmpCellY=cellY;    lp.cellHSpan=spanX;    lp.cellVSpan=spanY;    mRunningVInc+=vSpanDelta;    mRunningHInc+=hSpanDelta;    if (!onDismiss) {      updateWidgetSizeRanges(mWidgetView,mLauncher,spanX,spanY);    }  }  mWidgetView.requestLayout();}  }
class C{  public static Uri.Builder appendId(Uri.Builder builder,long id){  return builder.appendEncodedPath(String.valueOf(id));}  }
class C{  public final void reset(){  cursor=Address.zero();  limit=Address.zero();  internalLimit=Address.zero();  initialRegion=Address.zero();  region=Address.zero();}  }
class C{  public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(Constants.INDENT);  buffer.append("ulMacSizeInBits: ");  buffer.append(ulMacSizeInBits);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulKeySizeInBits: ");  buffer.append(ulKeySizeInBits);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulIVSizeInBits: ");  buffer.append(ulIVSizeInBits);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("bIsExport: ");  buffer.append(bIsExport);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("RandomInfo: ");  buffer.append(RandomInfo);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pReturnedKeyMaterial: ");  buffer.append(pReturnedKeyMaterial);  return buffer.toString();}  }
class C{  synchronized int addTrack(final MediaFormat format){  if (mIsStarted)   throw new IllegalStateException("muxer already started");  final int trackIx=mMediaMuxer.addTrack(format);  if (DEBUG)   Log.i(TAG,"addTrack:trackNum=" + mEncoderCount + ",trackIx="+ trackIx+ ",format="+ format);  return trackIx;}  }
class C{  public void removeElements(final int from,final int to){  CharArrays.ensureFromTo(size,from,to);  System.arraycopy(a,to,a,from,size - to);  size-=(to - from);}  }
class C{  public IconOverlay(IGeoPoint position,Drawable icon){  super();  set(position,icon);}  }
class C{  @Override public boolean isStopped(){  if (mIsTaskStop) {    if (!mFileDownloadTaskImpl.isStopped()) {      stopInternalImpl();    }  }  return mIsTaskStop;}  }
class C{  public StatementInfoProcessor(final AbstractFbStatement statement,final FbDatabase database){  this.statement=statement;  this.database=database;}  }
class C{  public static Number extractNumber(Object value){  NumberFormat numberFormat=NumberFormat.getInstance();  if (value instanceof Number) {    return (Number)value;  } else   if (value == null) {    return new Long(0);  } else {    try {      return numberFormat.parse(value.toString());    } catch (    ParseException ex) {      DTThrowable.rethrow(ex);    }  }  return new Long(0);}  }
class C{  final V remove(Object key,int hash,Object value){  if (!tryLock())   scanAndLock(key,hash);  V oldValue=null;  try {    HashEntry<K,V>[] tab=table;    int index=(tab.length - 1) & hash;    HashEntry<K,V> e=entryAt(tab,index);    HashEntry<K,V> pred=null;    while (e != null) {      K k;      HashEntry<K,V> next=e.next;      if ((k=e.key) == key || (e.hash == hash && key.equals(k))) {        V v=e.value;        if (value == null || value == v || value.equals(v)) {          if (pred == null)           setEntryAt(tab,index,next); else           pred.setNext(next);          ++modCount;          --count;          oldValue=v;        }        break;      }      pred=e;      e=next;    }  }  finally {    unlock();  }  return oldValue;}  }
class C{  public boolean isMaxYSet(int scale){  return mMaxY[scale] != -MathHelper.NULL_VALUE;}  }
class C{  @Override public void registerNode(jmri.jmrix.AbstractNode node){  if (node instanceof XBeeNode) {    super.registerNode(node);    XBeeNode xbnode=(XBeeNode)node;    xbnode.setTrafficController(this);  } else {    throw new java.lang.IllegalArgumentException("Attempt to register node of incorrect type for this connection");  }}  }
class C{  public boolean isLeaderNode(){  String myNodeId=coordinator.getInetAddessLookupMap().getNodeId();  String localZkMode=getCoordinatorMode(myNodeId);  return isLeaderNode(localZkMode);}  }
class C{  private boolean readHeader() throws IOException {  if (consecutiveLineBreaks > 1) {    consecutiveLineBreaks=0;    return false;  }  readName();  consecutiveLineBreaks=0;  readValue();  return consecutiveLineBreaks > 0;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  Diff other=(Diff)obj;  if (operation != other.operation) {    return false;  }  if (text == null) {    if (other.text != null) {      return false;    }  } else   if (!text.equals(other.text)) {    return false;  }  return true;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter two integers: ");  int m=Integer.parseInt(input.next());  int n=Integer.parseInt(input.next());  System.out.println("The greatest common divisor of " + m + " and "+ n+ " is "+ gcd(m,n));}  }
class C{  public static void throwTargetException(InvocationTargetException itex) throws Exception {  throw extractTargetException(itex);}  }
class C{  private boolean cleanUp(Reference<?> reference){  Method finalizeReferentMethod=getFinalizeReferentMethod();  if (finalizeReferentMethod == null) {    return false;  }  do {    reference.clear();    if (reference == frqReference) {      return false;    }    try {      finalizeReferentMethod.invoke(reference);    } catch (    Throwable t) {      logger.log(Level.SEVERE,"Error cleaning up after reference.",t);    }  } while ((reference=queue.poll()) != null);  return true;}  }
class C{  private void addTagListener(final CTag tag){  if (!m_cachedTagListeners.containsKey(tag)) {    m_cachedTagListeners.put(tag,0);    tag.addListener(m_internalTagListener);  }  m_cachedTagListeners.put(tag,m_cachedTagListeners.get(tag) + 1);}  }
class C{  private LogPolicy addPolicy(String propertyName,boolean defaultValue){  String flag=LogManager.getLogManager().getProperty(propertyName);  if (flag != null) {    policy.put(propertyName,Boolean.parseBoolean(flag));  } else {    policy.put(propertyName,defaultValue);  }  return this;}  }
class C{  public boolean isRTPMarkerSet(){  return (flags & FLAG_RTP_MARKER) != 0;}  }
class C{  public TouchHandler(GraphicalView view,AbstractChart chart){  graphicalView=view;  zoomR=graphicalView.getZoomRectangle();  if (chart instanceof XYChart) {    mRenderer=((XYChart)chart).getRenderer();  } else {    mRenderer=((RoundChart)chart).getRenderer();  }  if (mRenderer.isPanEnabled()) {    mPan=new Pan(chart);  }  if (mRenderer.isZoomEnabled()) {    mPinchZoom=new Zoom(chart,true,1);  }}  }
class C{  @Override public String childByDescription(Selector collection,Selector child,String text) throws UiObjectNotFoundException {  UiObject obj;  if (exist(collection) && objInfo(collection).isScrollable()) {    obj=new UiScrollable(collection.toUiSelector()).getChildByDescription(child.toUiSelector(),text);  } else {    obj=new UiCollection(collection.toUiSelector()).getChildByDescription(child.toUiSelector(),text);  }  return addUiObject(obj);}  }
class C{  public static void encodeRaypickColorId(int id,PickerIDAttribute out){  out.r=id & 0x000000FF;  out.g=(id & 0x0000FF00) >>> 8;  out.b=(id & 0x00FF0000) >>> 16;}  }
class C{  @Subscribe @AllowConcurrentEvents public void sessionFailed(final SessionFailedEvent event){  LOGGER.info("Received test session failed event. " + (event.getComment().isPresent() ? event.getComment().get() : ""));  failedSessionIds.add(event.getSessionId());  countDown();}  }
class C{  public static String escapeHtml(String str){  if (str == null) {    return null;  }  try {    StringWriter writer=new StringWriter((int)(str.length() * 1.5));    escapeHtml(writer,str);    return writer.toString();  } catch (  IOException ioe) {    throw new UnhandledException(ioe);  }}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.mediaplayer_2);  mPreview=(SurfaceView)findViewById(R.id.surface);  holder=mPreview.getHolder();  holder.addCallback(this);  holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);  extras=getIntent().getExtras();}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public void receive(DatagramPacket p) throws IOException {  if (delegateAsDelegatingSocket != null) {    delegateAsDelegatingSocket.receive(p);  } else {    SocketChannel channel=getChannel();    if (channel == null) {      if (inputStream == null)       inputStream=getInputStream();      DelegatingSocket.receiveFromInputStream(p,inputStream,getInetAddress(),getPort());    } else {      receiveFromChannel(channel,p);    }    InetSocketAddress localAddress=(InetSocketAddress)super.getLocalSocketAddress();    if (StunDatagramPacketFilter.isStunPacket(p) || DelegatingDatagramSocket.logNonStun(++nbReceivedPackets)) {      StunStack.logPacketToPcap(p,false,localAddress.getAddress(),localAddress.getPort());    }  }}  }
class C{  public static double acos(double x){  return HALF_PI - MathLib.asin(x);}  }
class C{  public static TvListing parse(InputStream inputStream) throws IOException {  BufferedReader in=new BufferedReader(new InputStreamReader(inputStream));  String line;  List<Channel> channels=new ArrayList<>();  List<Program> programs=new ArrayList<>();  Map<Integer,Integer> channelMap=new HashMap<>();  int defaultDisplayNumber=0;  while ((line=in.readLine()) != null) {    if (line.startsWith("#EXTINF:")) {      String id=null;      String displayName=null;      String displayNumber=null;      int originalNetworkId=0;      String icon=null;      String[] parts=line.split(",",2);      if (parts.length == 2) {        for (        String part : parts[0].split(" ")) {          if (part.startsWith("#EXTINF:")) {            displayNumber=part.substring(8).replaceAll("^0+","");            if (displayNumber.isEmpty())             displayNumber=defaultDisplayNumber + "";            if (displayNumber.equals("-1"))             displayNumber=defaultDisplayNumber + "";            defaultDisplayNumber++;            originalNetworkId=Integer.parseInt(displayNumber);          } else           if (part.startsWith("tvg-id=")) {            int end=part.indexOf("\"",8);            if (end > 8) {              id=part.substring(8,end);            }          } else           if (part.startsWith("tvg-logo=")) {            int end=part.indexOf("\"",10);            if (end > 10) {              icon=part.substring(10,end);            }          }        }        displayName=parts[1].replaceAll("\\[\\/?(COLOR |)[^\\]]*\\]","");      }      if (originalNetworkId != 0 && displayName != null) {        Channel channel=new Channel().setChannelId(Integer.parseInt(id)).setName(displayName).setNumber(displayNumber).setLogoUrl(icon).setOriginalNetworkId(originalNetworkId);        if (channelMap.containsKey(originalNetworkId)) {          int freeChannel=1;          while (channelMap.containsKey(new Integer(freeChannel))) {            freeChannel++;          }          channelMap.put(freeChannel,channels.size());          channel.setNumber(freeChannel + "");          channels.add(channel);        } else {          channelMap.put(originalNetworkId,channels.size());          channels.add(channel);        }      } else {        Log.d(TAG,"Import failed: " + originalNetworkId + "= "+ line);      }    } else     if (line.startsWith("http") && channels.size() > 0) {      channels.get(channels.size() - 1).setInternalProviderData(line);    } else     if (line.startsWith("rtmp") && channels.size() > 0) {      channels.get(channels.size() - 1).setInternalProviderData(line);    }  }  TvListing tvl=new TvListing(channels,programs);  Log.d(TAG,"Done parsing");  Log.d(TAG,tvl.toString());  return new TvListing(channels,programs);}  }
class C{  private Object toggleExponentSign(int offset,char aChar) throws BadLocationException, ParseException {  String string=getFormattedTextField().getText();  int replaceLength=0;  int loc=getAttributeStart(NumberFormat.Field.EXPONENT_SIGN);  if (loc >= 0) {    replaceLength=1;    offset=loc;  }  if (aChar == getPositiveSign()) {    string=getReplaceString(offset,replaceLength,null);  } else {    string=getReplaceString(offset,replaceLength,new String(new char[]{aChar}));  }  return stringToValue(string);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public EclipseApp productBuildCmd(File buildDir) throws Exception {  EclipseApp antApp=new EclipseApp(EclipseApp.AntRunner.ID);  antApp.addArg("buildfile",getPdeBuildProductBuildXml().getAbsolutePath());  antApp.addArg("Dbuilder=" + FileMisc.quote(buildDir));  return antApp;}  }
class C{  private void summaryRecursive(IgfsFile file,IgfsPathSummary sum) throws IgniteCheckedException {  assert file != null;  assert sum != null;  if (file.isDirectory()) {    if (!F.eq(IgfsPath.ROOT,file.path()))     sum.directoriesCount(sum.directoriesCount() + 1);    for (    IgfsFile childFile : listFiles(file.path()))     summaryRecursive(childFile,sum);  } else {    sum.filesCount(sum.filesCount() + 1);    sum.totalLength(sum.totalLength() + file.length());  }}  }
class C{  void release(){  if (inNetBuffer != null) {    inNetBuffer.free();    inNetBuffer=null;  }  if (outNetBuffer != null) {    outNetBuffer.free();    outNetBuffer=null;  }}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (!getItemVisible(row,column)) {    return;  }  int visibleRow=state.getVisibleSeriesIndex(row);  if (visibleRow < 0) {    return;  }  int visibleRowCount=state.getVisibleSeriesCount();  PlotOrientation orientation=plot.getOrientation();  MultiValueCategoryDataset d=(MultiValueCategoryDataset)dataset;  List values=d.getValues(row,column);  if (values == null) {    return;  }  int valueCount=values.size();  for (int i=0; i < valueCount; i++) {    double x1;    if (this.useSeriesOffset) {      x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());    } else {      x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());    }    Number n=(Number)values.get(i);    double value=n.doubleValue();    double y1=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());    Shape shape=getItemShape(row,column);    if (orientation == PlotOrientation.HORIZONTAL) {      shape=ShapeUtilities.createTranslatedShape(shape,y1,x1);    } else     if (orientation == PlotOrientation.VERTICAL) {      shape=ShapeUtilities.createTranslatedShape(shape,x1,y1);    }    if (getItemShapeFilled(row,column)) {      if (this.useFillPaint) {        g2.setPaint(getItemFillPaint(row,column));      } else {        g2.setPaint(getItemPaint(row,column));      }      g2.fill(shape);    }    if (this.drawOutlines) {      if (this.useOutlinePaint) {        g2.setPaint(getItemOutlinePaint(row,column));      } else {        g2.setPaint(getItemPaint(row,column));      }      g2.setStroke(getItemOutlineStroke(row,column));      g2.draw(shape);    }  }}  }
class C{  protected void removeSocket(TransportAddress localAddress,TransportAddress remoteAddress){  Connector connector=null;  final Map<TransportAddress,Map<TransportAddress,Connector>> connectorsMap=(localAddress.getTransport() == Transport.UDP) ? udpConnectors : tcpConnectors;synchronized (connectorsMap) {    Map<TransportAddress,Connector> connectorsForLocalAddress=connectorsMap.get(localAddress);    if (connectorsForLocalAddress != null) {      connector=connectorsForLocalAddress.get(remoteAddress);      if (connector != null) {        connectorsForLocalAddress.remove(remoteAddress);        if (connectorsForLocalAddress.isEmpty())         connectorsMap.remove(localAddress);      }    }  }  if (connector != null)   connector.stop();}  }
class C{  public boolean isDrawerOpen(){  return false;}  }
class C{  float map(float value,float start1,float stop1,float start2,float stop2){  return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));}  }
class C{  public td addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public CompilationUnitChange attachChange(CompilationUnitChange cuChange,boolean generateGroups) throws CoreException {  boolean needsAstRewrite=fRewrite != null;  boolean needsImportRemoval=fImportRemover != null && fImportRemover.hasRemovedNodes();  boolean needsImportRewrite=fImportRewrite != null && fImportRewrite.hasRecordedChanges() || needsImportRemoval;  if (!needsAstRewrite && !needsImportRemoval && !needsImportRewrite)   return null;  MultiTextEdit multiEdit=(MultiTextEdit)cuChange.getEdit();  if (multiEdit == null) {    multiEdit=new MultiTextEdit();    cuChange.setEdit(multiEdit);  }  if (needsAstRewrite) {    TextEdit rewriteEdit;    if (fRememberContent != null) {      rewriteEdit=fRewrite.rewriteAST(fRememberContent,WorkerMessageHandler.get().getOptions());    } else {      rewriteEdit=fRewrite.rewriteAST(document,WorkerMessageHandler.get().getOptions());    }    if (!isEmptyEdit(rewriteEdit)) {      multiEdit.addChild(rewriteEdit);      if (generateGroups) {        for (Iterator<TextEditGroup> iter=fTextEditGroups.iterator(); iter.hasNext(); ) {          TextEditGroup group=iter.next();          cuChange.addTextEditGroup(group);        }      }    }  }  if (needsImportRemoval) {    fImportRemover.applyRemoves(getImportRewrite());  }  if (needsImportRewrite) {    TextEdit importsEdit=fImportRewrite.rewriteImports();    if (!isEmptyEdit(importsEdit)) {      multiEdit.addChild(importsEdit);      String importUpdateName=RefactoringCoreMessages.INSTANCE.ASTData_update_imports();      cuChange.addTextEditGroup(new TextEditGroup(importUpdateName,importsEdit));    }  } else {  }  if (isEmptyEdit(multiEdit))   return null;  return cuChange;}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  if (m_Filter.numPendingOutput() > 0) {    throw new Exception("Filter output queue not empty!");  }  if (!m_Filter.input(instance)) {    throw new Exception("Filter didn't make the test instance immediately available!");  }  m_Filter.batchFinished();  Instance newInstance=m_Filter.output();  return m_Clusterer.distributionForInstance(newInstance);}  }
class C{  public ScaleIOSnapshotVolumeResponse snapshotMultiVolume(Map<String,String> id2snapshot,String systemId) throws Exception {  String uri=ScaleIOConstants.getSnapshotVolumesURI(systemId);  ScaleIOSnapshotVolumes spVol=new ScaleIOSnapshotVolumes();  for (  Map.Entry<String,String> entry : id2snapshot.entrySet()) {    spVol.addSnapshot(entry.getKey(),entry.getValue());  }  ClientResponse response=post(URI.create(uri),getJsonForEntity(spVol));  return getResponseObject(ScaleIOSnapshotVolumeResponse.class,response);}  }
class C{  public static String decodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length());  char[] chars=s.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c == '\\' && chars[i + 1] == 'u') {      char cc=0;      for (int j=0; j < 4; j++) {        char ch=Character.toLowerCase(chars[i + 2 + j]);        if ('0' <= ch && ch <= '9' || 'a' <= ch && ch <= 'f') {          cc|=(Character.digit(ch,16) << (3 - j) * 4);        } else {          cc=0;          break;        }      }      if (cc > 0) {        i+=5;        sb.append(cc);        continue;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  private JSONObject executeSqlStatementNDK(String query,JSONArray paramsAsJson,CallbackContext cbc) throws Exception {  JSONObject rowsResult=new JSONObject();  boolean hasRows;  SQLiteStatement myStatement=mydb.prepareStatement(query);  try {    for (int i=0; i < paramsAsJson.length(); ++i) {      if (paramsAsJson.isNull(i)) {        myStatement.bindNull(i + 1);      } else {        Object p=paramsAsJson.get(i);        if (p instanceof Float || p instanceof Double)         myStatement.bindDouble(i + 1,paramsAsJson.getDouble(i)); else         if (p instanceof Number)         myStatement.bindLong(i + 1,paramsAsJson.getLong(i)); else         myStatement.bindTextNativeString(i + 1,paramsAsJson.getString(i));      }    }    hasRows=myStatement.step();  } catch (  Exception ex) {    ex.printStackTrace();    String errorMessage=ex.getMessage();    Log.v("executeSqlBatch","SQLitePlugin.executeSql[Batch](): Error=" + errorMessage);    myStatement.dispose();    throw ex;  }  if (hasRows) {    JSONArray rowsArrayResult=new JSONArray();    String key;    int colCount=myStatement.getColumnCount();    do {      JSONObject row=new JSONObject();      try {        for (int i=0; i < colCount; ++i) {          key=myStatement.getColumnName(i);switch (myStatement.getColumnType(i)) {case SQLColumnType.NULL:            row.put(key,JSONObject.NULL);          break;case SQLColumnType.REAL:        row.put(key,myStatement.getColumnDouble(i));      break;case SQLColumnType.INTEGER:    row.put(key,myStatement.getColumnLong(i));  break;case SQLColumnType.BLOB:case SQLColumnType.TEXT:default :row.put(key,myStatement.getColumnTextNativeString(i));}}rowsArrayResult.put(row);} catch (JSONException e) {e.printStackTrace();}} while (myStatement.step());try {rowsResult.put("rows",rowsArrayResult);} catch (JSONException e) {e.printStackTrace();}}myStatement.dispose();return rowsResult;}  }
class C{  public void paint(Graphics g,JComponent c){  if (progressBar.isIndeterminate()) {    paintIndeterminate(g,c);  } else {    paintDeterminate(g,c);  }}  }
class C{  @After public void tearDown(){  List<HashMap> financialActivities=this.financialActivityAccountHelper.getAllFinancialActivityAccounts(this.responseSpec);  for (  HashMap financialActivity : financialActivities) {    Integer financialActivityAccountId=(Integer)financialActivity.get("id");    Integer deletedFinancialActivityAccountId=this.financialActivityAccountHelper.deleteFinancialActivityAccount(financialActivityAccountId,this.responseSpec,CommonConstants.RESPONSE_RESOURCE_ID);    Assert.assertNotNull(deletedFinancialActivityAccountId);    Assert.assertEquals(financialActivityAccountId,deletedFinancialActivityAccountId);  }}  }
class C{  public <T>Tuple5<T,A,B,C,D> prepend(T t){  return Tuple5.of(t,_1,_2,_3,_4);}  }
class C{  public String doImport(){  boolean alreadyDone;  try {    alreadyDone=isImportAlreadyDone();  } catch (  ImporterMetaDataException e) {    errorMessage=e.getMessage();    return ERROR;  }  if (importerManager.isInProgress() || alreadyDone) {    return WAIT;  }  ImportAction.logger.info("doImport");  this.importerManager.importAll();  return Action.SUCCESS;}  }
class C{  public NetworkTopologyEventImpl(JmDNS jmDNS,InetAddress inetAddress){  super(jmDNS);  this._inetAddress=inetAddress;}  }
class C{  public void endVisit(MethodInvocation node){}  }
class C{  public boolean cancelLeaseOfIPv4(IPv4Address ip){  DHCPBinding binding=this.getDHCPbindingFromIPv4(ip);  if (binding != null) {    binding.clearLeaseTimes();    binding.setLeaseStatus(false);    this.setPoolAvailability(this.getPoolAvailability() + 1);    this.setPoolFull(false);    return true;  }  return false;}  }
class C{  void customize(){}  }
class C{  @Override public void run(){  try {    handleAlarm();  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  } finally {    _isRunning=false;    _runningAlarmCount.decrementAndGet();  }}  }
class C{  public Builder(){}  }
class C{  public void test_checkServerTrusted_01() throws Exception {  X509TrustManagerImpl xtm=new X509TrustManagerImpl();  X509Certificate[] xcert=null;  try {    xtm.checkServerTrusted(xcert,"SSL");    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  xcert=new X509Certificate[0];  try {    xtm.checkServerTrusted(xcert,"SSL");    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  xcert=setX509Certificate();  try {    xtm.checkServerTrusted(xcert,null);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  try {    xtm.checkServerTrusted(xcert,"");    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public final String toString(){  return description;}  }
class C{  public boolean supportsPreStripping(){  return false;}  }
class C{  public static <T>Key<T> of(Class<T> type,Annotation ann){  Objects.requireNonNull(type);  Objects.requireNonNull(ann);  return new Key<>(type,new Annotation[]{ann});}  }
class C{  private void lazyChopIfNeeded(Object object){  if (lazyChop) {    if (object instanceof LazyValueMap) {      LazyValueMap m=(LazyValueMap)object;      m.chopMap();    } else     if (object instanceof ValueList) {      ValueList list=(ValueList)object;      list.chopList();    }  }}  }
class C{  protected void loadRefs(){  try {    myLocalBranches.clear();    myRemoteBranches.clear();    myTags.clear();    final VirtualFile root=gitRoot();    GitRepository repository=GitUtil.getRepositoryManager(myProject).getRepositoryForRoot(root);    if (repository != null) {      myLocalBranches.addAll(repository.getBranches().getLocalBranches());      myRemoteBranches.addAll(repository.getBranches().getRemoteBranches());      myCurrentBranch=repository.getCurrentBranch();    } else {      LOG.error("Repository is null for root " + root);    }    GitTag.list(myProject,root,myTags);  } catch (  VcsException e) {    GitUIUtil.showOperationError(myProject,e,"git branch -a");  }}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  public static void main(String[] args){  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Now,, beweber@ea.com, true,,false",true));  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Now,, beweber@ea.com, true,,false",false));  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Hourly,19:35, beweber@ea.com, true,,false",true));  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Daily,11:00, beweber@ea.com, true,,false",true));  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Weekly,Sun 18:00, beweber@ea.com, false,,false",true));  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Monthly,24 11:30, beweber@ea.com, true,,false",true));  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Never,, beweber@ea.com, true,,false",true));  System.out.println(parseSchedule("PvZ2_Model, //GAI/popcap/,tasks/berfu/PvZ2_Model/pvz2_model_data.R,Monthly,27 11:45,bduraksen@popcap.com,TRUE,,",true));}  }
class C{  @Override public void close(){  this.allowedOps.clear();}  }
class C{  public static String createFaultXml(String faultCode,String faultString,String faultActor,String detail) throws IOException {  return createFaultXml(new QName(faultCode),faultString,faultActor,detail);}  }
class C{  void shrink(){  int n=m_opMap.elementAt(MAPINDEX_LENGTH);  m_opMap.setToSize(n + 4);  m_opMap.setElementAt(0,n);  m_opMap.setElementAt(0,n + 1);  m_opMap.setElementAt(0,n + 2);  n=m_tokenQueue.size();  m_tokenQueue.setToSize(n + 4);  m_tokenQueue.setElementAt(null,n);  m_tokenQueue.setElementAt(null,n + 1);  m_tokenQueue.setElementAt(null,n + 2);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.FUNCTION_DECLARATION__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  return;case N4JSPackage.FUNCTION_DECLARATION__BODY:setBody((Block)null);return;case N4JSPackage.FUNCTION_DECLARATION__LOK:set_lok((LocalArgumentsVariable)null);return;case N4JSPackage.FUNCTION_DECLARATION__DEFINED_TYPE:setDefinedType((Type)null);return;case N4JSPackage.FUNCTION_DECLARATION__FPARS:getFpars().clear();return;case N4JSPackage.FUNCTION_DECLARATION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)null);return;case N4JSPackage.FUNCTION_DECLARATION__GENERATOR:setGenerator(GENERATOR_EDEFAULT);return;case N4JSPackage.FUNCTION_DECLARATION__DECLARED_ASYNC:setDeclaredAsync(DECLARED_ASYNC_EDEFAULT);return;case N4JSPackage.FUNCTION_DECLARATION__TYPE_VARS:getTypeVars().clear();return;case N4JSPackage.FUNCTION_DECLARATION__NAME:setName(NAME_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static ThreadContext push(String key,Object value) throws IllegalArgumentException {  if (key == null)   throw new IllegalArgumentException("null key");  ThreadContext oldContext=getContext();  if (oldContext == null)   oldContext=new ThreadContext(null,null,null);  ThreadContext newContext=new ThreadContext(oldContext,key,value);  setContext(newContext);  return oldContext;}  }
class C{  public boolean hasRestriction(Resource r){  return classes.containsKey(r) && !classes.get(r).getOnProperty().isEmpty();}  }
class C{  public static void openShareFileIntent(Context context,File file,String shareDialogMessage){  try {    context.startActivity(Intent.createChooser(getShareFileIntent(context,file),shareDialogMessage));  } catch (  Exception e) {    logThis(TAG,"openShareFileIntent Exception",e);  }}  }
class C{  @Override public boolean isReadOnly() throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("isReadOnly");    }    checkClosed();    return session.isReadOnly();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  void optimize(Environment env,Label lbl){  lbl.pc=REACHED;  for (Instruction inst=lbl.next; inst != null; inst=inst.next) {switch (inst.pc) {case NOTREACHED:      inst.optimize(env);    inst.pc=REACHED;  break;case REACHED:return;case NEEDED:break;}switch (inst.opc) {case opc_label:case opc_dead:if (inst.pc == REACHED) {inst.pc=NOTREACHED;}break;case opc_ifeq:case opc_ifne:case opc_ifgt:case opc_ifge:case opc_iflt:case opc_ifle:case opc_if_icmpeq:case opc_if_icmpne:case opc_if_icmpgt:case opc_if_icmpge:case opc_if_icmplt:case opc_if_icmple:case opc_if_acmpeq:case opc_if_acmpne:case opc_ifnull:case opc_ifnonnull:optimize(env,(Label)inst.value);break;case opc_goto:optimize(env,(Label)inst.value);return;case opc_jsr:optimize(env,(Label)inst.value);break;case opc_ret:case opc_return:case opc_ireturn:case opc_lreturn:case opc_freturn:case opc_dreturn:case opc_areturn:case opc_athrow:return;case opc_tableswitch:case opc_lookupswitch:{SwitchData sw=(SwitchData)inst.value;optimize(env,sw.defaultLabel);for (Enumeration<Label> e=sw.tab.elements(); e.hasMoreElements(); ) {optimize(env,e.nextElement());}return;}case opc_try:{TryData td=(TryData)inst.value;td.getEndLabel().pc=NEEDED;for (Enumeration<CatchData> e=td.catches.elements(); e.hasMoreElements(); ) {CatchData cd=e.nextElement();optimize(env,cd.getLabel());}break;}}}}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  private static void queryPositionEntry(FinanceService service,String entryUrl) throws IOException, MalformedURLException, ServiceException {  System.out.println("Requesting Entry at location " + entryUrl);  PositionEntry positionEntry=service.getEntry(new URL(entryUrl),PositionEntry.class);  printPositionEntry(positionEntry);}  }
class C{  public void sort(final int columnIndex,final boolean sortAscending){  sortingController.sort(columnIndex,sortAscending);}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public String prettyPrint(String sparql){  return OpAsQuery.asQuery(Algebra.compile(QueryFactory.create(sparql))).serialize();}  }
class C{  public ArrayStoreException(){  super();}  }
class C{  private RDOParameter createRoleBasedParameter(RDOParameter parameterRdo,RDORole role,int parentEntryNr){  RDOParameter roleBasedParameter=new RDOParameter();  roleBasedParameter.setParentEntryNr(parentEntryNr);  roleBasedParameter.setEntryNr(sequence.nextValue());  roleBasedParameter.setId(parameterRdo.getId());  roleBasedParameter.setValue(parameterRdo.getValue());  roleBasedParameter.setValueFactor(parameterRdo.getValueFactor());  roleBasedParameter.setBasePrice(role.getBasePrice());  roleBasedParameter.setPrice(role.getPrice());  roleBasedParameter.setFactor(role.getFactor());  return roleBasedParameter;}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  @Nonnull public BugInstance addSourceLine(SourceLineAnnotation sourceLine){  add(sourceLine);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  return Thread.currentThread().getContextClassLoader();}  }
class C{  public int convertColumnIndexToModel(int viewColumnIndex){  return viewColumnIndex;}  }
class C{  private int compare(WorkSource other,int i1,int i2){  final int diff=mUids[i1] - other.mUids[i2];  if (diff != 0) {    return diff;  }  return mNames[i1].compareTo(other.mNames[i2]);}  }
class C{  @Override public int[] reduce(List<ComputeJobResult> results){  if (results.size() == 1)   return results.get(0).getData();  assert results.size() == 2;  int[] arr1=results.get(0).getData();  int[] arr2=results.get(1).getData();  return mergeArrays(arr1,arr2);}  }
class C{  public void actionPerformed(ActionEvent e){  GraphicsEnvironment.getLocalGraphicsEnvironment();  if (!GraphicsEnvironment.isHeadless()) {    if (UI == null) {      UI=new UserInterface();    } else {      UI.setVisible(true);    }  } else {    new FacelessServer();  }}  }
class C{  Object processValue(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  int type=getType();  Object processedValue=null;switch (type) {case T_AVT:    processedValue=processAVT(handler,uri,name,rawName,value,owner);  break;case T_CDATA:processedValue=processCDATA(handler,uri,name,rawName,value,owner);break;case T_CHAR:processedValue=processCHAR(handler,uri,name,rawName,value,owner);break;case T_ENUM:processedValue=processENUM(handler,uri,name,rawName,value,owner);break;case T_EXPR:processedValue=processEXPR(handler,uri,name,rawName,value,owner);break;case T_NMTOKEN:processedValue=processNMTOKEN(handler,uri,name,rawName,value,owner);break;case T_PATTERN:processedValue=processPATTERN(handler,uri,name,rawName,value,owner);break;case T_NUMBER:processedValue=processNUMBER(handler,uri,name,rawName,value,owner);break;case T_QNAME:processedValue=processQNAME(handler,uri,name,rawName,value,owner);break;case T_QNAMES:processedValue=processQNAMES(handler,uri,name,rawName,value);break;case T_QNAMES_RESOLVE_NULL:processedValue=processQNAMESRNU(handler,uri,name,rawName,value);break;case T_SIMPLEPATTERNLIST:processedValue=processSIMPLEPATTERNLIST(handler,uri,name,rawName,value,owner);break;case T_URL:processedValue=processURL(handler,uri,name,rawName,value,owner);break;case T_YESNO:processedValue=processYESNO(handler,uri,name,rawName,value);break;case T_STRINGLIST:processedValue=processSTRINGLIST(handler,uri,name,rawName,value);break;case T_PREFIX_URLLIST:processedValue=processPREFIX_URLLIST(handler,uri,name,rawName,value);break;case T_ENUM_OR_PQNAME:processedValue=processENUM_OR_PQNAME(handler,uri,name,rawName,value,owner);break;case T_NCNAME:processedValue=processNCNAME(handler,uri,name,rawName,value,owner);break;case T_AVT_QNAME:processedValue=processAVT_QNAME(handler,uri,name,rawName,value,owner);break;case T_PREFIXLIST:processedValue=processPREFIX_LIST(handler,uri,name,rawName,value);break;default :}return processedValue;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  private static int convertToValue(final String rawValue){  int value=-1;  if (rawValue.equals("\"SUM\"")) {    value=SUM;  } else   if (rawValue.equals("\"AVG\"")) {    value=AVG;  } else   if (rawValue.equals("\"PRD\"")) {    value=PRD;  } else   if (rawValue.equals("\"MIN\"")) {    value=MIN;  } else   if (rawValue.equals("\"MAX\"")) {    value=MAX;  }  return value;}  }
class C{  public static final String toFEN(Position pos){  StringBuilder ret=new StringBuilder();  for (int r=7; r >= 0; r--) {    int numEmpty=0;    for (int c=0; c < 8; c++) {      int p=pos.getPiece(Position.getSquare(c,r));      if (p == Piece.EMPTY) {        numEmpty++;      } else {        if (numEmpty > 0) {          ret.append(numEmpty);          numEmpty=0;        }switch (p) {case Piece.WKING:          ret.append('K');        break;case Piece.WQUEEN:      ret.append('Q');    break;case Piece.WROOK:  ret.append('R');break;case Piece.WBISHOP:ret.append('B');break;case Piece.WKNIGHT:ret.append('N');break;case Piece.WPAWN:ret.append('P');break;case Piece.BKING:ret.append('k');break;case Piece.BQUEEN:ret.append('q');break;case Piece.BROOK:ret.append('r');break;case Piece.BBISHOP:ret.append('b');break;case Piece.BKNIGHT:ret.append('n');break;case Piece.BPAWN:ret.append('p');break;default :throw new RuntimeException();}}}if (numEmpty > 0) {ret.append(numEmpty);}if (r > 0) {ret.append('/');}}ret.append(pos.whiteMove ? " w " : " b ");boolean anyCastle=false;if (pos.h1Castle()) {ret.append('K');anyCastle=true;}if (pos.a1Castle()) {ret.append('Q');anyCastle=true;}if (pos.h8Castle()) {ret.append('k');anyCastle=true;}if (pos.a8Castle()) {ret.append('q');anyCastle=true;}if (!anyCastle) {ret.append('-');}{ret.append(' ');if (pos.getEpSquare() >= 0) {int x=Position.getX(pos.getEpSquare());int y=Position.getY(pos.getEpSquare());ret.append((char)(x + 'a'));ret.append((char)(y + '1'));} else {ret.append('-');}}ret.append(' ');ret.append(pos.halfMoveClock);ret.append(' ');ret.append(pos.fullMoveCounter);return ret.toString();}  }
class C{  public static void announceDeletion(final DigestURL url,final int depth,final State state){  if (state == State.INVENTORY || state == State.ANY)   inventory.announceDeletion(url,depth);  if (state == State.ARCHIVE || state == State.ANY)   archive.announceDeletion(url,depth);}  }
class C{  public void stopProcess(){  if (getProcessState() != Process.PROCESS_STATE_STOPPED) {    getProcess().getLogger().info("Process stopped. Completing current operator.");    getStatusBar().setSpecialText("Process stopped. Completing current operator.");    if (processThread != null) {      if (processThread.isAlive()) {        processThread.setPriority(Thread.MIN_PRIORITY);        processThread.stopProcess();      }    }  }}  }
class C{  public CUnselectSubtreeNodesAction(final ZyGraph graph,final ITreeNode<CTag> tag){  super("Unselect Subtree Nodes");  m_graph=Preconditions.checkNotNull(graph,"IE02323: Graph argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE02324: Tag can't be null");}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public final boolean isClassC(){  return (ipAddress & 0x00000007) == 3;}  }
class C{  public SemIm(SemPm semPm){  this(semPm,null,new Parameters());}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static String addSentenceMarkers(String s){  return Vocabulary.START_SYM + " " + s+ " "+ Vocabulary.STOP_SYM;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private void inspect(final Player admin,final RPObject target){  final StringBuilder sb=new StringBuilder();  sb.append("Inspecting " + target.get("name") + "\n");  for (  final String value : target) {    sb.append(value + ": " + target.get(value)+ "\n");  }  admin.sendPrivateText(sb.toString());  sb.setLength(0);  for (  final RPSlot slot : target.slots()) {    if (slot.getName().equals("!buddy") || slot.getName().equals("!ignore")) {      continue;    }    sb.append("\nSlot " + slot.getName() + ": \n");    for (    final RPObject object : slot) {      sb.append("   " + object + "\n");    }    sb.append("\n");    admin.sendPrivateText(sb.toString());    sb.setLength(0);  }  if (target instanceof Player) {    Player player=(Player)target;    sb.append("Production:\n   ");    final ProducerRegister producerRegister=SingletonRepository.getProducerRegister();    final List<String> produceList=new LinkedList<String>();    for (    String food : producerRegister.getProducedItemNames("food")) {      produceList.add(food);    }    for (    String drink : producerRegister.getProducedItemNames("drink")) {      produceList.add(drink);    }    for (    String resource : producerRegister.getProducedItemNames("resource")) {      produceList.add(resource);    }    for (    String product : produceList) {      int quant=player.getQuantityOfProducedItems(product);      if (quant > 0) {        sb.append("[" + product + "="+ Integer.toString(quant)+ "]");      }    }    sb.append("\n");    admin.sendPrivateText(sb.toString());    sb.setLength(0);    Collection<Item> itemList=SingletonRepository.getEntityManager().getItems();    sb.append("Loots:\n   ");    int itemCount=0;    for (    Item item : itemList) {      itemCount=player.getNumberOfLootsForItem(item.getName());      if (itemCount > 0) {        sb.append("[" + item.getName() + "="+ Integer.toString(itemCount)+ "]");      }    }    sb.append("\n");    admin.sendPrivateText(sb.toString());    sb.setLength(0);    sb.append("Harvested Items (FishSource, FlowerGrower, VegetableGrower):\n   ");    itemCount=0;    for (    Item item : itemList) {      itemCount=player.getQuantityOfHarvestedItems(item.getName());      if (itemCount > 0) {        sb.append("[" + item.getName() + "="+ Integer.toString(itemCount)+ "]");      }    }    sb.append("\n");    admin.sendPrivateText(sb.toString());    sb.setLength(0);  }}  }
class C{  private boolean isViewTopHigherThenPreviousViewBottom(int previousViewBottom,int viewTop){  return viewTop < previousViewBottom;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.704 -0500",hash_original_method="7B8E28B63F298B36AFEC228A9203A43A",hash_generated_method="BA670570AB62185827AD01CD9C696E60") public static void checkURI(String uri) throws IOException {  try {    URI ur=new URI(uri);    if (ur.getScheme() == null || ur.getRawSchemeSpecificPart().isEmpty()) {      throw new IOException("No scheme or scheme-specific-part in uniformResourceIdentifier: " + uri);    }    if (!ur.isAbsolute()) {      throw new IOException("Relative uniformResourceIdentifier: " + uri);    }  } catch (  URISyntaxException e) {    throw (IOException)new IOException("Bad representation of uniformResourceIdentifier: " + uri).initCause(e);  }}  }
class C{  @SuppressWarnings("WeakerAccess") public TerminalEmulatorDeviceConfiguration(int lineBufferScrollbackSize,int blinkLengthInMilliSeconds,CursorStyle cursorStyle,TextColor cursorColor,boolean cursorBlinking){  this(lineBufferScrollbackSize,blinkLengthInMilliSeconds,cursorStyle,cursorColor,cursorBlinking,true);}  }
class C{  private void cmdConvert(CommandSender sender,String[] args){  if (isNotPermissed(sender,"nametagedit.convert"))   return;  if (args.length != 4) {    NametagMessages.USAGE_CONVERT.send(sender);  } else {    boolean sourceIsFile=args[1].equalsIgnoreCase("file");    boolean destinationIsSQL=args[2].equalsIgnoreCase("db");    boolean legacy=args[3].equalsIgnoreCase("true");    NametagMessages.CONVERSION.send(sender,"groups & players",sourceIsFile ? "file" : "mysql",destinationIsSQL ? "mysql" : "file",legacy);    if (sourceIsFile && !destinationIsSQL && legacy) {      new Converter().legacyConversion(sender,handler.getPlugin());    } else     if ((destinationIsSQL && sourceIsFile) || (!sourceIsFile && !destinationIsSQL)) {      new ConverterTask(!destinationIsSQL,sender,handler.getPlugin()).runTaskAsynchronously(handler.getPlugin());    }  }}  }
class C{  public List<Synapse> connectAllToAll(List<Neuron> sourceNeurons,List<Neuron> targetNeurons){  return connectAllToAll(sourceNeurons,targetNeurons,Utils.intersects(sourceNeurons,targetNeurons),selfConnectionAllowed,true);}  }
class C{  public Vset checkAmbigName(Environment env,Context ctx,Vset vset,Hashtable exp,UnaryExpression loc){  return checkValue(env,ctx,vset,exp);}  }
class C{  public final int size(){  return numOfEntries;}  }
class C{  public void initializeClassifier(Instances data) throws Exception {  m_RandomInstance=new Random(m_Seed);  int classIndex=data.classIndex();  if (m_Classifier == null) {    throw new Exception("A base classifier has not been specified!");  }  if (!(m_Classifier instanceof WeightedInstancesHandler) && !m_UseResampling) {    m_UseResampling=true;  }  getCapabilities().testWithFail(data);  if (m_Debug) {    System.err.println("Creating copy of the training data");  }  m_data=new Instances(data);  m_data.deleteWithMissingClass();  if (m_data.numAttributes() == 1) {    System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");    m_ZeroR=new weka.classifiers.rules.ZeroR();    m_ZeroR.buildClassifier(m_data);    return;  } else {    m_ZeroR=null;  }  m_NumClasses=m_data.numClasses();  m_ClassAttribute=m_data.classAttribute();  if (m_Debug) {    System.err.println("Creating base classifiers");  }  m_Classifiers=new ArrayList<Classifier[]>();  int numInstances=m_data.numInstances();  m_trainFs=new double[numInstances][m_NumClasses];  m_trainYs=new double[numInstances][m_NumClasses];  for (int j=0; j < m_NumClasses; j++) {    for (int i=0, k=0; i < numInstances; i++, k++) {      m_trainYs[i][j]=(m_data.instance(k).classValue() == j) ? 1.0 - m_Offset : 0.0 + (m_Offset / (double)m_NumClasses);    }  }  m_data.setClassIndex(-1);  m_data.deleteAttributeAt(classIndex);  m_data.insertAttributeAt(new Attribute("'pseudo class'"),classIndex);  m_data.setClassIndex(classIndex);  m_NumericClassData=new Instances(m_data,0);  m_probs=initialProbs(numInstances);  m_logLikelihood=logLikelihood(m_trainYs,m_probs);  m_NumGenerated=0;  if (m_Debug) {    System.err.println("Avg. log-likelihood: " + m_logLikelihood);  }  m_sumOfWeights=m_data.sumOfWeights();}  }
class C{  public int compare(JavaScriptElement element1,JavaScriptElement element2){  int category1=category(element1);  int category2=category(element2);  if (category1 != category2) {    return category1 - category2;  }  return element1.friendlyString().compareTo(element2.friendlyString());}  }
class C{  public static double quantile(double p,double k,double theta,double shift){  return Math.log(GammaDistribution.quantile(p,k,theta)) + shift;}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public static void selectClickedRow(final JTable table,final MouseEvent event){  final int row=table.rowAtPoint(event.getPoint());  if (row == -1) {    return;  }  table.setRowSelectionInterval(row,row);}  }
class C{  public int size(){  return al.size();}  }
class C{  public static void i(Object... msg){  if (LuaViewConfig.isDebug()) {    Log.i(DEFAULT_PREFIX,getMsg(msg));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public PointMutation(double probability){  super();  this.probability=probability;}  }
class C{  protected static File createRelativePath(File absolute) throws Exception {  File userDir=new File(System.getProperty("user.dir"));  String userPath=userDir.getAbsolutePath() + File.separator;  String targetPath=(new File(absolute.getParent())).getPath() + File.separator;  String fileName=absolute.getName();  StringBuffer relativePath=new StringBuffer();  int subdir=targetPath.indexOf(userPath);  if (subdir == 0) {    if (userPath.length() == targetPath.length()) {      relativePath.append(fileName);    } else {      int ll=userPath.length();      relativePath.append(targetPath.substring(ll));      relativePath.append(fileName);    }  } else {    int sepCount=0;    String temp=new String(userPath);    while (temp.indexOf(File.separator) != -1) {      int ind=temp.indexOf(File.separator);      sepCount++;      temp=temp.substring(ind + 1,temp.length());    }    String targetTemp=new String(targetPath);    String userTemp=new String(userPath);    int tcount=0;    while (targetTemp.indexOf(File.separator) != -1) {      int ind=targetTemp.indexOf(File.separator);      int ind2=userTemp.indexOf(File.separator);      String tpart=targetTemp.substring(0,ind + 1);      String upart=userTemp.substring(0,ind2 + 1);      if (tpart.compareTo(upart) != 0) {        if (tcount == 0) {          tcount=-1;        }        break;      }      tcount++;      targetTemp=targetTemp.substring(ind + 1,targetTemp.length());      userTemp=userTemp.substring(ind2 + 1,userTemp.length());    }    if (tcount == -1) {      throw new Exception("Can't construct a path to file relative to user " + "dir.");    }    if (targetTemp.indexOf(File.separator) == -1) {      targetTemp="";    }    for (int i=0; i < sepCount - tcount; i++) {      relativePath.append(".." + File.separator);    }    relativePath.append(targetTemp + fileName);  }  return new File(relativePath.toString());}  }
class C{  protected void pickUpCar(PrintWriter file,Car car,boolean isManifest){  if (isManifest) {    pickUpCar(file,car,new StringBuffer(padAndTruncateString(Setup.getPickupCarPrefix(),Setup.getManifestPrefixLength())),Setup.getPickupManifestMessageFormat(),isManifest);  } else {    pickUpCar(file,car,new StringBuffer(padAndTruncateString(Setup.getSwitchListPickupCarPrefix(),Setup.getSwitchListPrefixLength())),Setup.getPickupSwitchListMessageFormat(),isManifest);  }}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  String errM="";  sessionContext.checkPermission(Right.TimetableManagers);  WebTable.setOrder(sessionContext,"timetableManagerList.ord",request.getParameter("order"),1);  boolean showAll="1".equals(sessionContext.getUser().getProperty("TimetableManagers.showAll","0"));  if (request.getParameter("all") != null) {    showAll=("true".equalsIgnoreCase(request.getParameter("all")));    sessionContext.getUser().setProperty("TimetableManagers.showAll",showAll ? "1" : "0");  }  PdfWebTable table=new TimetableManagerBuilder().getManagersTable(sessionContext,true,showAll);  int order=WebTable.getOrder(sessionContext,"timetableManagerList.ord");  String tblData=table.printTable(order);  if ("Export PDF".equals(request.getParameter("op"))) {    ExportUtils.exportPDF(new TimetableManagerBuilder().getManagersTable(sessionContext,false,showAll),order,response,"managers");    return null;  }  request.setAttribute("schedDeputyList",errM + tblData);  request.setAttribute("showAllManagers",showAll);  return mapping.findForward("success");}  }
class C{  public Configurator emptyImage(int imageRes){  if (imageRes > 0) {    viewEmptyImage=imageRes;  }  return this;}  }
class C{  public BaseElement(Node n,BaseElement parent){  node=n;  attributes=n.getAttributes();  if (parent != null) {    this.parent=parent;    parent.children.add(this);    errors_are_exceptions=parent.errors_are_exceptions;    log=parent.log;  }}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b2=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b3=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b4=decodingTable[data.charAt(i++)];    if ((b1 | b2 | b3| b4) < 0) {      throw new IOException("invalid characters encountered in base64 data");    }    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    length+=3;    i=nextI(data,i,finish);  }  length+=decodeLastBlock(out,data.charAt(end - 4),data.charAt(end - 3),data.charAt(end - 2),data.charAt(end - 1));  return length;}  }
class C{  private String printOFormat(final long x){  String sx=null;  if (x == Long.MIN_VALUE) {    sx="1000000000000000000000";  } else   if (x < 0) {    final String t=Long.toString((~(-x - 1)) ^ Long.MIN_VALUE,8);switch (t.length()) {case 1:      sx="100000000000000000000" + t;    break;case 2:  sx="10000000000000000000" + t;break;case 3:sx="1000000000000000000" + t;break;case 4:sx="100000000000000000" + t;break;case 5:sx="10000000000000000" + t;break;case 6:sx="1000000000000000" + t;break;case 7:sx="100000000000000" + t;break;case 8:sx="10000000000000" + t;break;case 9:sx="1000000000000" + t;break;case 10:sx="100000000000" + t;break;case 11:sx="10000000000" + t;break;case 12:sx="1000000000" + t;break;case 13:sx="100000000" + t;break;case 14:sx="10000000" + t;break;case 15:sx="1000000" + t;break;case 16:sx="100000" + t;break;case 17:sx="10000" + t;break;case 18:sx="1000" + t;break;case 19:sx="100" + t;break;case 20:sx="10" + t;break;case 21:sx='1' + t;break;}} else {sx=Long.toString(x,8);}return printOFormat(sx);}  }
class C{  public void init() throws ServletException {}  }
class C{  public void removeItem(YeomanGeneratorType type,String name,GeneratedItemView itemView){  List<String> existingNames=namesByTypes.get(type);  if (existingNames != null && existingNames.contains(name)) {    existingNames.remove(name);    if (existingNames.isEmpty()) {      namesByTypes.remove(type);      FoldingPanel previous=widgetByTypes.remove(type);      view.removeFoldingPanel(previous);    } else {      FoldingPanel selectedPanel=widgetByTypes.get(type);      selectedPanel.remove(itemView);    }  }  updateGenerateButton();}  }
