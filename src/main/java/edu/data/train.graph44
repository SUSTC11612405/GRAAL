class C{  @Override public void restoreSingleVolumeSnapshot(StorageSystem storage,URI volume,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  Volume vol=_dbClient.queryObject(Volume.class,volume);  try {    _helper.doApplyRecoverPointTag(storage,vol,false);    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(snapshot));    BlockSnapshot from=_dbClient.queryObject(BlockSnapshot.class,snapshot);    CIMObjectPath syncObjectPath=_cimPath.getSyncObject(storage,from);    if (_helper.checkExists(storage,syncObjectPath,false,false) != null) {      terminateAnyRestoreSessions(storage,from,volume,taskCompleter);    }    CIMObjectPath cimJob;    if (storage.checkIfVmax3()) {      Volume to=_dbClient.queryObject(Volume.class,volume);      cimJob=_helper.callModifySettingsDefineState(storage,_helper.getRestoreFromSnapshotInputArguments(storage,to,from));    } else {      cimJob=_helper.callModifyReplica(storage,_helper.getRestoreFromReplicaInputArguments(syncObjectPath));    }    ControllerServiceImpl.enqueueJob(new QueueJob(new SmisBlockRestoreSnapshotJob(cimJob,storage.getId(),taskCompleter)));  } catch (  WBEMException e) {    String message=String.format("Error encountered when trying to restore from snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    try {      _log.info(String.format("Enabling the RecoverPoint tag on volume %s",volume.toString()));      _helper.doApplyRecoverPointTag(storage,vol,true);    } catch (    Exception ex) {      _log.error(String.format("An error has occured trying to enable the RecoverPoint tag on volume %s."),ex);    }    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  }catch (  Exception e) {    String message=String.format("Generic exception when trying to restore from snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    try {      _log.info(String.format("Enabling the RecoverPoint tag on volume %s",volume.toString()));      _helper.doApplyRecoverPointTag(storage,vol,true);    } catch (    Exception ex) {      _log.error(String.format("An error has occured trying to enable the RecoverPoint tag on volume %s."),ex);    }    ServiceError error=DeviceControllerErrors.smis.methodFailed("restoreSingleVolumeSnapshot",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  public static void toHexFile(String fileName,ByteBuffer buffer,int offset,int size) throws IOException {  PrintWriter writer=new PrintWriter(new FileWriter(fileName));  try {    writer.println(toHexString(buffer,offset,size));  }  finally {    writer.close();  }}  }
class C{  public ZoomEditorAction(DrawingEditor editor,double scaleFactor,AbstractButton button,boolean updateAllViews){  super(editor);  this.scaleFactor=scaleFactor;  this.button=button;  this.updateAllViews=updateAllViews;  label=(int)(scaleFactor * 100) + " %";  putValue(Action.DEFAULT,label);  putValue(Action.NAME,label);}  }
class C{  public void onAnimationStart(Animator animation){  if (mRule == Dependency.WITH) {    startIfReady(animation);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.COMMA_EXPRESSION__EXPRS:    return ((InternalEList<?>)getExprs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public SmartJList(){  this.init();}  }
class C{  protected void drawTick(Graphics2D g2,Rectangle2D meterArea,double value){  drawTick(g2,meterArea,value,false);}  }
class C{  public void removeDebugger(final DebuggerTemplate debugger) throws CouldntDeleteException {  Preconditions.checkNotNull(debugger,"IE00812: Debugger argument can not be null");  Preconditions.checkArgument(debugger.inSameDatabase(sqlProvider),"IE00813: Debugger template and debugger template manager are not in the same database");  sqlProvider.deleteDebugger(debugger);  debuggers.remove(debugger);  for (  final IDebuggerTemplateManagerListener listener : listeners) {    try {      listener.removedDebugger(this,debugger);    } catch (    final Exception e) {      CUtilityFunctions.logException(e);    }  }}  }
class C{  public SearchPanel(LayoutType layout,boolean regExp,String prefix,String button){  this(layout,regExp,prefix,false,button);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GROUP' ("+ "'GROUP_ID' TEXT PRIMARY KEY NOT NULL ,"+ "'NAME' TEXT,"+ "'PORTRAIT_URI' TEXT,"+ "'CREATE_TIME' INTEGER,"+ "'NUMBER' TEXT,"+ "'CREATE_ID' INTEGER,"+ "'INTRODUCE' INTEGER);");}  }
class C{  public void rotatePathfinder(final int destFacing,final boolean isManeuver){  while (getFinalFacing() != destFacing) {    final MoveStepType stepType=getDirection(getFinalFacing(),destFacing);    addStep(stepType,isManeuver,isManeuver);  }}  }
class C{  public LnSensorUpdateThread(LnSensorManager sm,LnTrafficController tc){  this.sm=sm;  this.tc=tc;}  }
class C{  public void delete(File webapp){  if (webapp.isDirectory()) {    File[] files=webapp.listFiles();    for (    File f : files) {      delete(f);    }    webapp.delete();  } else   webapp.delete();}  }
class C{  public static ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder... values){  ObjectAnimator anim=new ObjectAnimator();  anim.mTarget=target;  anim.setValues(values);  return anim;}  }
class C{  private void highlightValue(boolean highlight){  valueHighlighted=highlight;  if (highlight) {    valuePanel.setBorder(BorderFactory.createMatteBorder(1,1,1,1,SwingTools.RAPIDMINER_ORANGE));    valuePanel.setBackground(Color.LIGHT_GRAY);  } else {    valuePanel.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.GRAY));    valuePanel.setBackground(defaultBackground);  }}  }
class C{  @Override public void free(){  super.free();  if (stunHarvest != null)   stunHarvest.close();}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();  if (Constants.ELEMNAME_SORT == type) {    setSortElem((ElemSort)newChild);    return newChild;  } else   return super.appendChild(newChild);}  }
class C{  public TransactionOutPoint(NetworkParameters params,byte[] payload,int offset,Message parent,boolean parseLazy,boolean parseRetain) throws ProtocolException {  super(params,payload,offset,parent,parseLazy,parseRetain,MESSAGE_LENGTH);}  }
class C{  protected int placeTo(ByteBuffer[] dsts,int offset,int length){  if (buffer == null) {    return 0;  }  int pos=0;  int len=buffer.length;  int rem;  for (int i=offset; i < offset + length; i++) {    rem=dsts[i].remaining();    if (len - pos < rem) {      dsts[i].put(buffer,pos,len - pos);      pos=len;      break;    }    dsts[i].put(buffer,pos,rem);    pos+=rem;  }  if (pos != len) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("The received application data could not be fully written" + "into the destination buffers"));  }  buffer=null;  return len;}  }
class C{  private void createInvalidatePut(){  createAndInvalidate();  region.put(new Integer(1),new Integer(2));}  }
class C{  final void normalize(){  if (intLen == 0) {    offset=0;    return;  }  int index=offset;  if (value[index] != 0)   return;  int indexBound=index + intLen;  do {    index++;  } while (index < indexBound && value[index] == 0);  int numZeros=index - offset;  intLen-=numZeros;  offset=(intLen == 0 ? 0 : offset + numZeros);}  }
class C{  public JBBPFieldStruct parse(final byte[] array) throws IOException {  JBBPUtils.assertNotNull(array,"Array must not be null");  return this.parse(new ByteArrayInputStream(array),null,null);}  }
class C{  private static <T>List<T> swap(final List<T> ts,final int i1,final int i2){  if (i1 < ts.size() && i2 < ts.size()) {    final T t=ts.get(i1);    lisp.replace(ts,ts.get(i2),i1);    lisp.replace(ts,t,i2);  }  return ts;}  }
class C{  public ObdCodeItem(String code,String description){  setKeyAttribute(FIELDS[0]);  put(FID_CODE,code);  put(FID_DESCRIPT,description);}  }
class C{  public static int translateLine(@NotNull CharSequence before,@NotNull CharSequence after,int line) throws FilesTooBigForDiffException {  return translateLine(before,after,line,false);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:56.422 -0400",hash_original_method="33C4C2C18C24F6A9AB6F6705D1C4986B",hash_generated_method="F21A2971278C3B7FBBB3A74CBAFEF3A2") List<String> performCommand(String[] cmdAttribs,int max,long timeout) throws IOException {  List<String> lines=new ArrayList<String>(20);  Process proc=null;  InputStream in=null;  OutputStream out=null;  InputStream err=null;  BufferedReader inr=null;  try {    Thread monitor=ThreadMonitor.start(timeout);    proc=openProcess(cmdAttribs);    in=proc.getInputStream();    out=proc.getOutputStream();    err=proc.getErrorStream();    inr=new BufferedReader(new InputStreamReader(in));    String line=inr.readLine();    while (line != null && lines.size() < max) {      line=line.toLowerCase(Locale.ENGLISH).trim();      lines.add(line);      line=inr.readLine();    }    proc.waitFor();    ThreadMonitor.stop(monitor);    if (proc.exitValue() != 0) {      throw new IOException("Command line returned OS error code '" + proc.exitValue() + "' for command "+ Arrays.asList(cmdAttribs));    }    if (lines.isEmpty()) {      throw new IOException("Command line did not return any info " + "for command " + Arrays.asList(cmdAttribs));    }    return lines;  } catch (  InterruptedException ex) {    throw new IOExceptionWithCause("Command line threw an InterruptedException " + "for command " + Arrays.asList(cmdAttribs) + " timeout="+ timeout,ex);  } finally {    IOUtils.closeQuietly(in);    IOUtils.closeQuietly(out);    IOUtils.closeQuietly(err);    IOUtils.closeQuietly(inr);    if (proc != null) {      proc.destroy();    }  }}  }
class C{  public Max2(){  super("max2",2);}  }
class C{  public Matrix3 translate(float x,float y){  tmp[0]=1;  tmp[1]=0;  tmp[2]=0;  tmp[3]=0;  tmp[4]=1;  tmp[5]=0;  tmp[6]=x;  tmp[7]=y;  tmp[8]=1;  mul(val,tmp);  return this;}  }
class C{  protected PostgreSQLModuleViewsLoader(){}  }
class C{  public void removeAnnotation(int index){  mAnnotations.remove(index);  mStringXY.removeByIndex(index);}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked,final boolean urlSafe){  return encodeBase64(binaryData,isChunked,urlSafe,Integer.MAX_VALUE);}  }
class C{  public HashCodeBuilder append(float[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (int i=0; i < array.length; i++) {      append(array[i]);    }  }  return this;}  }
class C{  private void updateActionStatus(final Message message){  final ActionUpdateStatus actionUpdateStatus=convertMessage(message,ActionUpdateStatus.class);  final Action action=checkActionExist(message,actionUpdateStatus);  final ActionStatus actionStatus=createActionStatus(message,actionUpdateStatus,action);  updateLastPollTime(action.getTarget());switch (actionUpdateStatus.getActionStatus()) {case DOWNLOAD:    actionStatus.setStatus(Status.DOWNLOAD);  break;case RETRIEVED:actionStatus.setStatus(Status.RETRIEVED);break;case RUNNING:actionStatus.setStatus(Status.RUNNING);break;case CANCELED:actionStatus.setStatus(Status.CANCELED);break;case FINISHED:actionStatus.setStatus(Status.FINISHED);break;case ERROR:actionStatus.setStatus(Status.ERROR);break;case WARNING:actionStatus.setStatus(Status.WARNING);break;case CANCEL_REJECTED:handleCancelRejected(message,action,actionStatus);break;default :logAndThrowMessageError(message,"Status for action does not exisit.");}final Action addUpdateActionStatus=getUpdateActionStatus(actionStatus);if (!addUpdateActionStatus.isActive()) {lookIfUpdateAvailable(action.getTarget());}}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void v(String msg,Object... args){  if (!allowV)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public DefaultEntityViewInfo createWayInfo(float minScale,float minNameScale,int printOrder,UColor wayColor,float wayWidth){  DefaultEntityViewInfo result=createDefaultInfo();  result.minVisibleScale=minScale;  result.minNameScale=minNameScale;  result.printOrder=printOrder;  result.wayColor=wayColor;  result.wayWidth=wayWidth;  return result;}  }
class C{  static public double i1e(double x) throws ArithmeticException {  double y, z;  z=Math.abs(x);  if (z <= 8.0) {    y=(z / 2.0) - 2.0;    z=Arithmetic.chbevl(y,A_i1,29) * z;  } else {    z=Arithmetic.chbevl(32.0 / z - 2.0,B_i1,25) / Math.sqrt(z);  }  if (x < 0.0)   z=-z;  return (z);}  }
class C{  public JpegReader(byte[] data){  _data=data;}  }
class C{  public List toList(){  Object[] copiedElements=new Object[numElements];  System.arraycopy(elements,0,copiedElements,0,numElements);  return Arrays.asList(copiedElements);}  }
class C{  public static void checkReferenceGuid(final SAMFileHeader header,final SdfId referenceSdfId){  checkReferenceGuid(getReferenceGuid(header),referenceSdfId);}  }
class C{  public void removeClassInstructor(ClassInstructor classInstr){  Set s=this.getClassInstructors();  for (Iterator iter=s.iterator(); iter.hasNext(); ) {    ClassInstructor ci=(ClassInstructor)iter.next();    if (ci.getUniqueId().intValue() == classInstr.getUniqueId().intValue()) {      s.remove(ci);      break;    }  }}  }
class C{  public ColorLayoutImpl(BufferedImage image){  this.img=image;  imgYSize=image.getHeight();  imgXSize=image.getWidth();  init();}  }
class C{  public int size(){  return mSize;}  }
class C{  public void println(){  newline();}  }
class C{  private Object readResolve(){  return ObjectUtils.NULL;}  }
class C{  private void placeCars(int percent,boolean firstPass) throws BuildFailedException {  addLine(_buildReport,THREE,BLANK_LINE);  if (percent < 100) {    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildMultiplePass"),new Object[]{percent}));    multipass=true;  }  if (percent == 100 && multipass) {    addLine(_buildReport,THREE,Bundle.getMessage("buildFinalPass"));  }  for (int routeIndex=0; routeIndex < _routeList.size(); routeIndex++) {    RouteLocation rl=_routeList.get(routeIndex);    if (_train.skipsLocation(rl.getId())) {      addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildLocSkipped"),new Object[]{rl.getName(),rl.getId(),_train.getName()}));      continue;    }    if (!rl.isPickUpAllowed()) {      addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildLocNoPickups"),new Object[]{_train.getRoute().getName(),rl.getId(),rl.getName()}));      continue;    }    if (routeIndex > 0 && rl.getLocation().isStaging()) {      addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildNoPickupsFromStaging"),new Object[]{rl.getName()}));      continue;    }    if (!checkPickUpTrainDirection(rl)) {      continue;    }    _completedMoves=0;    _success=true;    _reqNumOfMoves=(rl.getMaxCarMoves() - rl.getCarMoves()) * percent / 99;    int remainder=(rl.getMaxCarMoves() - rl.getCarMoves()) % (100 / percent);    if (percent < 51 && remainder > 0) {      _reqNumOfMoves++;    }    if (firstPass) {      if (routeIndex == 0 && _departStageTrack != null) {        _reqNumOfMoves=0;        if (_departStageTrack == _terminateStageTrack) {          if (!_train.isAllowReturnToStagingEnabled() && !Setup.isAllowReturnToStagingEnabled()) {            for (            RollingStock rs : carManager.getList()) {              if (rs.getTrack() == _departStageTrack && rs.getRouteDestination() == null) {                rs.setLocation(rs.getLocation(),null);              }            }          } else {            addLine(_buildReport,THREE,BLANK_LINE);            addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildWarnDepartStaging"),new Object[]{_departStageTrack.getLocation().getName(),_departStageTrack.getName()}));            addLine(_buildReport,THREE,BLANK_LINE);          }        }        addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildDepartStagingAggressive"),new Object[]{_departStageTrack.getLocation().getName()}));      }    } else     if (routeIndex == 0 && _departStageTrack != null && _departStageTrack == _terminateStageTrack && !_train.isAllowReturnToStagingEnabled() && !Setup.isAllowReturnToStagingEnabled()) {      for (      Car car : _carList) {        if (car.getLocation() == _departStageTrack.getLocation() && car.getTrack() == null) {          car.setLocation(_departStageTrack.getLocation(),_departStageTrack,RollingStock.FORCE);          if (car.getKernel() != null) {            for (            Car k : car.getKernel().getCars()) {              k.setLocation(_departStageTrack.getLocation(),_departStageTrack,RollingStock.FORCE);            }          }        }      }    }    int saveReqMoves=_reqNumOfMoves;    addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildLocReqMoves"),new Object[]{rl.getName(),rl.getId(),_reqNumOfMoves,rl.getMaxCarMoves() - rl.getCarMoves(),rl.getMaxCarMoves()}));    addLine(_buildReport,FIVE,BLANK_LINE);    if (routeIndex == 0 && _departStageTrack != null && _reqNumOfMoves > 0 && (_departStageTrack.isAddCustomLoadsEnabled() || _departStageTrack.isAddCustomLoadsAnySpurEnabled() || _departStageTrack.isAddCustomLoadsAnyStagingTrackEnabled())) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCustomLoadOptions"),new Object[]{_departStageTrack.getName()}));      if (_departStageTrack.isAddCustomLoadsEnabled()) {        addLine(_buildReport,FIVE,Bundle.getMessage("buildLoadCarLoads"));      }      if (_departStageTrack.isAddCustomLoadsAnySpurEnabled()) {        addLine(_buildReport,FIVE,Bundle.getMessage("buildLoadAnyCarLoads"));      }      if (_departStageTrack.isAddCustomLoadsAnyStagingTrackEnabled()) {        addLine(_buildReport,FIVE,Bundle.getMessage("buildLoadsStaging"));      }      addLine(_buildReport,FIVE,BLANK_LINE);    }    _carIndex=0;    findDestinationsForCarsFromLocation(rl,routeIndex,false);    if (Setup.isBuildAggressive() && saveReqMoves != _reqNumOfMoves) {      log.debug("Perform extra pass at location ({})",rl.getName());      if (_reqNumOfMoves < (rl.getMaxCarMoves() - rl.getCarMoves()) * percent / 200) {        _reqNumOfMoves=(rl.getMaxCarMoves() - rl.getCarMoves()) * percent / 200;      }      findDestinationsForCarsFromLocation(rl,routeIndex,true);    }    if (redirectCarsFromAlternateTrack()) {      addLine(_buildReport,SEVEN,BLANK_LINE);    }    if (routeIndex == 0) {      checkDepartureForStaging(percent);    }    addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildStatusMsg"),new Object[]{(saveReqMoves <= _completedMoves ? Bundle.getMessage("Success") : Bundle.getMessage("Partial")),Integer.toString(_completedMoves),Integer.toString(saveReqMoves),rl.getName(),_train.getName()}));    reportCarsNotMoved(rl,percent);  }  checkDepartureForStaging(percent);}  }
class C{  @PostConstruct void init(){  super.init(targetTableHeader,targetTable,targetDetails);}  }
class C{  @HLEFunction(nid=0xABED3790,version=150) public int sceNetAdhocPdpSend(@CheckArgument("checkPdpId") int id,pspNetMacAddress destMacAddress,int port,TPointer data,int len,int timeout,int nonblock){  if (log.isTraceEnabled()) {    log.trace(String.format("Send data: %s",Utilities.getMemoryDump(data.getAddress(),len)));  }  return pdpObjects.get(id).send(destMacAddress,port,data,len,timeout,nonblock);}  }
class C{  public static String splitString(String name){  String[] splitname=name.split("-");  if (splitname.length > 1 && !splitname[1].startsWith("(")) {    try {      Integer.parseInt(splitname[1]);    } catch (    NumberFormatException e) {      return name.trim();    }  }  return splitname[0].trim();}  }
class C{  long readMethodRef(){  return readID(vm.sizeofMethodRef);}  }
class C{  protected TraceFor_Impl(){  super();}  }
class C{  public Frame<V> init(final Frame<? extends V> src){  returnValue=src.returnValue;  System.arraycopy(src.values,0,values,0,values.length);  top=src.top;  return this;}  }
class C{  public int icon(){  return mIcon;}  }
class C{  @Override final public boolean equals(Object o){  return super.equals(o);}  }
class C{  @Override public String toString(){  return "AcronymExpansion [lf=" + lf + ", freq="+ freq+ ", since="+ since+ "]";}  }
class C{  public void write(byte[] bytes,int length){  if (digest == null) {    return;  }  digest.update(bytes,0,length);}  }
class C{  public Object readLoader(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  int i;  String name;  String file;  File fl;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=Class.forName(node.getAttribute(ATT_CLASS)).newInstance();  children=XMLDocument.getChildTags(node);  file="";  Object relativeB=null;  boolean relative=false;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_FILE)) {      file=(String)invokeReadFromXML(child);    } else     if (name.equals(VAL_RELATIVE_PATH)) {      relativeB=readFromXML(child);      if (relativeB instanceof Boolean) {        relative=((Boolean)relativeB).booleanValue();      }    } else {      readFromXML(result,name,child);    }  }  if (result instanceof weka.core.converters.FileSourcedConverter) {    ((weka.core.converters.FileSourcedConverter)result).setUseRelativePath(relative);  }  if (file.equals("")) {    file=null;  }  if (file != null) {    String tempFile=file;    boolean containsEnv=false;    containsEnv=Environment.containsEnvVariables(file);    fl=new File(file);    if (containsEnv || fl.exists() || this.getClass().getClassLoader().getResource(file) != null) {      ((weka.core.converters.AbstractFileLoader)result).setSource(new File(file));    } else {      System.out.println("WARNING: The file '" + tempFile + "' does not exist!");    }  }  return result;}  }
class C{  @Override public boolean start(){  if (!mIsRunning) {synchronized (this) {      mIsRunning=true;      return true;    }  }  return false;}  }
class C{  private boolean constraints_66_NonOverride(MemberMatrix mm){  if (mm.hasOwned()) {    boolean bFoundWronglyDeclaredMember=false;    for (    TMember member : mm.owned()) {      if (member.isDeclaredOverride()) {        TMember m=mm.possibleOverrideCandidateOrError(member);        if (m == null) {          bFoundWronglyDeclaredMember=true;          if (member.isStatic() && mm.hasNonImplemented() && !mm.hasInherited()&& !mm.hasImplemented()) {            final TMember other=mm.nonImplemented().iterator().next();            String message=getMessageForCLF_OVERRIDE_NON_EXISTENT_INTERFACE(validatorMessageHelper.description(member),validatorMessageHelper.description(other));            addIssue(message,member.getAstElement(),N4JSPackage.Literals.PROPERTY_NAME_OWNER__DECLARED_NAME,CLF_OVERRIDE_NON_EXISTENT_INTERFACE);          } else {            String message=getMessageForCLF_OVERRIDE_NON_EXISTENT(keywordProvider.keyword(member),member.getName());            addIssue(message,member.getAstElement(),N4JSPackage.Literals.PROPERTY_NAME_OWNER__DECLARED_NAME,CLF_OVERRIDE_NON_EXISTENT);          }        }      }    }    return bFoundWronglyDeclaredMember;  }  return true;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  Provider[] providers=Security.getProviders("KeyPairGenerator.DSA");  for (int i=0; i < providers.length; i++) {    KeyPairGenerator.getInstance("DSA",providers[i].getName());  }  try {    KeyPairGenerator.getInstance("DSA","");    fail("Should have thrown IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public static Appendable format(double d,Appendable a) throws IOException {  if (a == null)   throw new IllegalArgumentException("Appendable Cannot Be Null");  return TypeFormat.format(d,-1,(MathLib.abs(d) >= 1E7) || (MathLib.abs(d) < 0.001),false,a);}  }
class C{  public void startDrag(View v,DragSource source,Object dragInfo,DragBehavior dragBehavior){  if (source.allowDrag()) {    mOriginator=v;    final Bitmap b=getViewBitmap(v);    if (b != null) {      final int[] loc=mCoordinatesTemp;      v.getLocationOnScreen(loc);      final int screenX=loc[0];      final int screenY=loc[1];      startDrag(b,screenX,screenY,0,0,b.getWidth(),b.getHeight(),source,dragInfo,dragBehavior);      b.recycle();      if (dragBehavior == DragBehavior.MOVE) {        v.setVisibility(View.GONE);      }    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.758 -0500",hash_original_method="FF30C4A715862D404FA915E9EED652EB",hash_generated_method="E4CCE78079DEBE872337D58AF3DC982E") private void sortNodes(){  if (mNeedsSort) {    mSortedNodes.clear();    ArrayList<Node> roots=new ArrayList<Node>();    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies == null || node.dependencies.size() == 0) {        roots.add(node);      }    }    ArrayList<Node> tmpRoots=new ArrayList<Node>();    while (roots.size() > 0) {      int numRoots=roots.size();      for (int i=0; i < numRoots; ++i) {        Node root=roots.get(i);        mSortedNodes.add(root);        if (root.nodeDependents != null) {          int numDependents=root.nodeDependents.size();          for (int j=0; j < numDependents; ++j) {            Node node=root.nodeDependents.get(j);            node.nodeDependencies.remove(root);            if (node.nodeDependencies.size() == 0) {              tmpRoots.add(node);            }          }        }      }      roots.clear();      roots.addAll(tmpRoots);      tmpRoots.clear();    }    mNeedsSort=false;    if (mSortedNodes.size() != mNodes.size()) {      throw new IllegalStateException("Circular dependencies cannot exist" + " in AnimatorSet");    }  } else {    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies != null && node.dependencies.size() > 0) {        int numDependencies=node.dependencies.size();        for (int j=0; j < numDependencies; ++j) {          Dependency dependency=node.dependencies.get(j);          if (node.nodeDependencies == null) {            node.nodeDependencies=new ArrayList<Node>();          }          if (!node.nodeDependencies.contains(dependency.node)) {            node.nodeDependencies.add(dependency.node);          }        }      }      node.done=false;    }  }}  }
class C{  @SuppressWarnings("fallthrough") void write(DataOutputStream out,ConstantPool tab) throws IOException {switch (opc) {case opc_try:case opc_label:case opc_dead:    break;case opc_bipush:case opc_newarray:case opc_iload:case opc_lload:case opc_fload:case opc_dload:case opc_aload:case opc_ret:  out.writeByte(opc);out.writeByte(((Number)value).intValue());break;case opc_iload + 256:case opc_lload + 256:case opc_fload + 256:case opc_dload + 256:case opc_aload + 256:case opc_ret + 256:out.writeByte(opc_wide);out.writeByte(opc - 256);out.writeShort(((Number)value).intValue());break;case opc_istore:case opc_lstore:case opc_fstore:case opc_dstore:case opc_astore:out.writeByte(opc);out.writeByte((value instanceof Number) ? ((Number)value).intValue() : ((LocalVariable)value).slot);break;case opc_istore + 256:case opc_lstore + 256:case opc_fstore + 256:case opc_dstore + 256:case opc_astore + 256:out.writeByte(opc_wide);out.writeByte(opc - 256);out.writeShort((value instanceof Number) ? ((Number)value).intValue() : ((LocalVariable)value).slot);break;case opc_sipush:out.writeByte(opc);out.writeShort(((Number)value).intValue());break;case opc_ldc:out.writeByte(opc);out.writeByte(tab.index(value));break;case opc_ldc_w:case opc_ldc2_w:case opc_new:case opc_putstatic:case opc_getstatic:case opc_putfield:case opc_getfield:case opc_invokevirtual:case opc_invokespecial:case opc_invokestatic:case opc_instanceof:case opc_checkcast:out.writeByte(opc);out.writeShort(tab.index(value));break;case opc_iinc:out.writeByte(opc);out.writeByte(((int[])value)[0]);out.writeByte(((int[])value)[1]);break;case opc_iinc + 256:out.writeByte(opc_wide);out.writeByte(opc - 256);out.writeShort(((int[])value)[0]);out.writeShort(((int[])value)[1]);break;case opc_anewarray:out.writeByte(opc);out.writeShort(tab.index(value));break;case opc_multianewarray:out.writeByte(opc);out.writeShort(tab.index(((ArrayData)value).type));out.writeByte(((ArrayData)value).nargs);break;case opc_invokeinterface:out.writeByte(opc);out.writeShort(tab.index(value));out.writeByte(((MemberDefinition)value).getType().stackSize() + 1);out.writeByte(0);break;case opc_goto:case opc_jsr:case opc_ifeq:case opc_ifne:case opc_ifgt:case opc_ifge:case opc_iflt:case opc_ifle:case opc_ifnull:case opc_ifnonnull:case opc_if_acmpeq:case opc_if_acmpne:case opc_if_icmpeq:case opc_if_icmpne:case opc_if_icmpgt:case opc_if_icmpge:case opc_if_icmplt:case opc_if_icmple:out.writeByte(opc);out.writeShort(((Instruction)value).pc - pc);break;case opc_goto_w:case opc_jsr_w:out.writeByte(opc);out.writeLong(((Instruction)value).pc - pc);break;case opc_tableswitch:{SwitchData sw=(SwitchData)value;out.writeByte(opc);for (int n=1; ((pc + n) % 4) != 0; n++) {out.writeByte(0);}out.writeInt(sw.defaultLabel.pc - pc);out.writeInt(sw.minValue);out.writeInt(sw.maxValue);for (int n=sw.minValue; n <= sw.maxValue; n++) {Label lbl=sw.get(n);int target_pc=(lbl != null) ? lbl.pc : sw.defaultLabel.pc;out.writeInt(target_pc - pc);}break;}case opc_lookupswitch:{SwitchData sw=(SwitchData)value;out.writeByte(opc);int n=pc + 1;for (; (n % 4) != 0; n++) {out.writeByte(0);}out.writeInt(sw.defaultLabel.pc - pc);out.writeInt(sw.tab.size());for (Enumeration<Integer> e=sw.sortedKeys(); e.hasMoreElements(); ) {Integer v=e.nextElement();out.writeInt(v.intValue());out.writeInt(sw.get(v).pc - pc);}break;}case opc_nop:if (value != null) {if (value instanceof Integer) out.writeByte(((Integer)value).intValue()); else out.writeShort(tab.index(value));return;}default :out.writeByte(opc);break;}}  }
class C{  public Vector2D rotateByQuarterCircle(int numQuarters){  int nQuad=numQuarters % 4;  if (numQuarters < 0 && nQuad != 0) {    nQuad=nQuad + 4;  }switch (nQuad) {case 0:    return create(x,y);case 1:  return create(-y,x);case 2:return create(-x,-y);case 3:return create(y,-x);}Assert.shouldNeverReachHere();return null;}  }
class C{  @Override public String toString(){  return getAttempts() + "*" + getDelayTime()+ "msecs";}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent evt){}  }
class C{  @Override public boolean findAugmentingPath(VertexInfo[] vertices){  Arrays.fill(vertices,null);  int n=vertices.length;  BinaryHeap<Integer> pq=new BinaryHeap<Integer>(n);  boolean inqueue[]=new boolean[n];  for (int u=0; u < n; u++) {    if (u == sourceIndex) {      dist[u]=0;      pq.insert(sourceIndex,0);      inqueue[u]=true;    } else {      dist[u]=Integer.MAX_VALUE;    }  }  while (!pq.isEmpty()) {    int u=pq.smallestID();    inqueue[u]=false;    if (u == sinkIndex) {      break;    }    for (int v=0; v < n; v++) {      if (v == sourceIndex || v == u)       continue;      EdgeInfo cei=info[u][v];      if (cei != null && cei.flow < cei.capacity) {        int newDist=dist[u] + cei.cost;        if (0 <= newDist && newDist < dist[v]) {          vertices[v]=new VertexInfo(u,Search.FORWARD);          dist[v]=newDist;          if (inqueue[v]) {            pq.decreaseKey(v,newDist);          } else {            pq.insert(v,newDist);            inqueue[v]=true;          }        }      }      cei=info[v][u];      if (cei != null && cei.flow > 0) {        int newDist=dist[u] - cei.cost;        if (0 <= newDist && newDist < dist[v]) {          vertices[v]=new VertexInfo(u,Search.BACKWARD);          dist[v]=newDist;          if (inqueue[v]) {            pq.decreaseKey(v,newDist);          } else {            pq.insert(v,newDist);            inqueue[v]=true;          }        }      }    }  }  return dist[sinkIndex] != Integer.MAX_VALUE;}  }
class C{  public static HistogramComponent open(final InputStream input,final String name,final String format){  HistogramModel dataModel=(HistogramModel)HistogramModel.getXStream().fromXML(input);  return new HistogramComponent(name,dataModel);}  }
class C{  public boolean removeSubTree(int taxId){  final TaxonNode node=mNodes.get(taxId);  if (node == null) {    return false;  }  for (  final TaxonNode tn : node.depthFirstTraversal()) {    mNodes.remove(tn.getId());  }  node.detach();  return true;}  }
class C{  private void assertOpen(){  Assert.state(currentSegment != null,"segment manager not open");}  }
class C{  protected void sequence_CharacterClassEscapeSequence(ISerializationContext context,CharacterClassEscapeSequence semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.CHARACTER_CLASS_ESCAPE_SEQUENCE__SEQUENCE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.CHARACTER_CLASS_ESCAPE_SEQUENCE__SEQUENCE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getCharacterClassEscapeSequenceAccess().getSequenceCHARACTER_CLASS_ESCAPETerminalRuleCall_0(),semanticObject.getSequence());  feeder.finish();}  }
class C{  public int nextObjectId(){  return objectId++;}  }
class C{  public void EndWrite(){  this.hasWriter=false;  this.notifyAll();}  }
class C{  public void importStyleSheet(URL url){  try {    InputStream is;    is=url.openStream();    Reader r=new BufferedReader(new InputStreamReader(is));    CssParser parser=new CssParser();    parser.parse(url,r,false,true);    r.close();    is.close();  } catch (  Throwable e) {  }}  }
class C{  public static int parseInt(final byte[] b,final int off) throws ParseException {  final int size=Integer.SIZE / Byte.SIZE;  final int len=b.length - off;  if (len >= size) {    return getInt(b,off);  } else {    throw new ParseException("Not enough bytes to parse an integer.");  }}  }
class C{  public void testLoginException03(){  String msg=null;  LoginException lE=new LoginException(msg);  assertNull("getMessage() must return null.",lE.getMessage());  assertNull("getCause() must return null",lE.getCause());}  }
class C{  final boolean isOwnedBy(AbstractQueuedSynchronizer sync){  return sync == AbstractQueuedSynchronizer.this;}  }
class C{  public BaseContentEntry<?> createPage(String kind,String title,String parent) throws SitesException, MalformedURLException, IOException, ServiceException {  BaseContentEntry<?> entry=null;  if (kind.equals("announcement")) {    entry=new AnnouncementEntry();  } else   if (kind.equals("announcementspage")) {    entry=new AnnouncementsPageEntry();  } else   if (kind.equals("comment")) {    entry=new CommentEntry();  } else   if (kind.equals("filecabinet")) {    entry=new FileCabinetPageEntry();  } else   if (kind.equals("listitem")) {    entry=new ListItemEntry();  } else   if (kind.equals("listpage")) {    entry=new ListPageEntry();  } else   if (kind.equals("webpage")) {    entry=new WebPageEntry();  } else {    if (kind.equals("attachment") || kind.equals("webattachment")) {      throw new SitesException("Trying to create " + kind + ". Please use upload command instead.");    } else {      throw new SitesException("Unknown kind '" + kind + "'");    }  }  entry.setTitle(new PlainTextConstruct(title));  setContentBlob(entry);  if (parent != null) {    if (parent.lastIndexOf("/") == -1) {      parent=getContentFeedUrl() + parent;    }    entry.addLink(SitesLink.Rel.PARENT,Link.Type.ATOM,parent);  }  return service.insert(new URL(getContentFeedUrl()),entry);}  }
class C{  public void destroy(){  view.setScale(oldScale);  view.setStates(oldStates);  view.setGraphBounds(oldBounds);}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public ScaleIOVolume addVolume(String protectionDomainId,String storagePoolId,String volumeName,String volumeSize) throws Exception {  ScaleIOCreateVolume volume=new ScaleIOCreateVolume();  Long sizeInKb=Long.parseLong(volumeSize) / 1024L;  volume.setVolumeSizeInKb(sizeInKb.toString());  volume.setStoragePoolId(storagePoolId);  volume.setName(volumeName);  volume.setProtectionDomainId(protectionDomainId);  ClientResponse response=post(URI.create(ScaleIOConstants.VOLUMES_URI),getJsonForEntity(volume));  ScaleIOVolume createdVol=getResponseObject(ScaleIOVolume.class,response);  return queryVolume(createdVol.getId());}  }
class C{  public boolean isOnline(){  return online;}  }
class C{  private static RunQueryResponse makeStatKindResponse(long entitySizeInBytes){  RunQueryResponse.Builder statKindResponse=RunQueryResponse.newBuilder();  Entity.Builder entity=Entity.newBuilder();  entity.setKey(makeKey("dummyKind","dummyId"));  entity.getMutableProperties().put("entity_bytes",makeValue(entitySizeInBytes).build());  EntityResult.Builder entityResult=EntityResult.newBuilder();  entityResult.setEntity(entity);  QueryResultBatch.Builder batch=QueryResultBatch.newBuilder();  batch.addEntityResults(entityResult);  statKindResponse.setBatch(batch);  return statKindResponse.build();}  }
class C{  public void close(){  try {    dos.close();  } catch (  Exception e) {    System.err.println("Can't close output stream:");    e.printStackTrace();    System.exit(1);  }}  }
class C{  public boolean isGroup(){  return GROUP.equals(value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.162 -0500",hash_original_method="B6AB9C2BD67E148832650E309163688C",hash_generated_method="B848B6DC63319F80C3C05AEAF05408E5") @DSSafe(DSCat.ANDROID_CALLBACK) @DSVerified public boolean dispatchGenericMotionEvent(MotionEvent ev){  if (mWindow.superDispatchGenericMotionEvent(ev)) {    return true;  }  return onGenericMotionEvent(ev);}  }
class C{  @Override public boolean hasNonVolatileHandlerStore(){  return true;}  }
class C{  public static int counterChars(String str){  if (TextUtils.isEmpty(str)) {    return 0;  }  int count=0;  for (int i=0; i < str.length(); i++) {    int tmp=(int)str.charAt(i);    if (tmp > 0 && tmp < 127) {      count+=1;    } else {      count+=2;    }  }  return count;}  }
class C{  public static long[] zeroI(long[] v){  Arrays.fill(v,0);  return v;}  }
class C{  static Result details(long id,ContentValues vals) throws IOException {  Result result=new Result();  String restaurantId=String.valueOf(id);  String placeId=vals.getAsString(Restaurants.PLACE_ID);  if (placeId.startsWith("NOT_FOUND_")) {    return result;  }  ContentResolver cr=cr();  Response<Place> resp=Places.details(Params.create().placeId(placeId),DETAILS_FIELDS);  result.status=resp.getStatus();  result.place=resp.getResult();  if (STATUS_OK.equals(result.status) && result.place != null) {    try {      cr.update(ContentUris.withAppendedId(Restaurants.CONTENT_URI,id),Restaurants.values(vals,result.place),null,null);    } catch (    SQLiteConstraintException e) {      Log.e(TAG,"updating restaurant from Place details",e);      exception(e);    }    List<Place.Review> reviews=result.place.getReviews();    if (!reviews.isEmpty()) {      Uri uri=Reviews.CONTENT_URI;      String[] proj={SQLite.millis("max",Reviews.WRITTEN_ON)};      String sel=Reviews.RESTAURANT_ID + " = ? AND " + Reviews.TYPE_ID+ " = ?";      String[] args={restaurantId,String.valueOf(GOOGLE.id)};      long latest=Cursors.firstLong(cr.query(uri,proj,sel,args,null));      ContentValues reviewVals=new ContentValues();      sel+=" AND " + Reviews.WRITTEN_ON + " = ?";      args=Arrays.copyOf(args,3);      for (int i=0, size=reviews.size(); i < size; i++) {        Place.Review review=reviews.get(i);        Reviews.values(reviewVals,id,review);        if (reviewVals.size() > 0) {          args[2]=reviewVals.getAsString(Reviews.WRITTEN_ON);          if (cr.update(uri,reviewVals,sel,args) == 0) {            long reviewId=ContentUris.parseId(cr.insert(uri,reviewVals));            if (reviewId > 0 && review.getTime() * 1000 > latest) {              result.addReviewTime(reviewId,args[2]);            }          }        }      }      cr.call(AUTHORITY_URI,CALL_UPDATE_RESTAURANT_RATING,restaurantId,null);    }    deleteHours(cr,restaurantId);    ContentValues[] hourVals=OpenHours.values(id,result.place);    if (hourVals != null) {      cr.bulkInsert(OpenHours.CONTENT_URI,hourVals);    }    ContentValues[] dayVals=OpenDays.values(id,result.place);    if (dayVals != null) {      cr.bulkInsert(OpenDays.CONTENT_URI,dayVals);    }    String[] proj={_ID};    String sel=RestaurantPhotos.RESTAURANT_ID + " = ?";    String[] args={restaurantId};    result.photoId=Cursors.firstLong(cr.query(Uris.limit(RestaurantPhotos.CONTENT_URI,1),proj,sel,args,_ID));    if (result.photoId <= 0) {      ContentValues[] photoVals=RestaurantPhotos.values(id,result.place);      if (photoVals != null) {        for (        ContentValues photoVal : photoVals) {          Uri uri=cr.insert(RestaurantPhotos.CONTENT_URI,photoVal);          if (result.photoId <= 0) {            result.photoId=ContentUris.parseId(uri);          }        }      }      if (result.photoId < 0) {        result.photoId=0L;      }    }  } else {    if (STATUS_NOT_FOUND.equals(result.status)) {      vals.clear();      vals.put(Restaurants.PLACE_ID,"NOT_FOUND_" + id);      vals.put(Restaurants.REFRESHED_ON,SQLite.datetime());      vals.put(Restaurants.STATUS_ID,DELETED.id);      vals.put(Restaurants.DIRTY,1);      cr.update(ContentUris.withAppendedId(Restaurants.CONTENT_URI,id),vals,null,null);      deleteHours(cr,restaurantId);    }    Log.e(TAG,"Places.details failed, status: " + result.status);    event("restaurant","Places.details failed",result.status);  }  return result;}  }
class C{  public Builder slugWithOwnerId(String slug,Long ownerId){  this.slug=slug;  this.ownerId=ownerId;  return this;}  }
class C{  public static void safeCloseStreams(InputStream in,OutputStream out){  if (in != null) {    try {      in.close();    } catch (    Exception e) {      log.error(e.getMessage(),e);    }  }  if (out != null) {    try {      out.close();    } catch (    Exception e) {      log.error(e.getMessage(),e);    }  }}  }
class C{  public DateTime(long instant,DateTimeZone zone){  super(instant,zone);}  }
class C{  public static NdefMessage generateNdefMessage(WifiNetwork wifiNetwork){  byte[] payload=generateNdefPayload(wifiNetwork);  NdefRecord mimeRecord=new NdefRecord(NdefRecord.TNF_MIME_MEDIA,NfcUtils.NFC_TOKEN_MIME_TYPE.getBytes(Charset.forName("US-ASCII")),new byte[0],payload);  NdefRecord aarRecord=NdefRecord.createApplicationRecord(PACKAGE_NAME);  return new NdefMessage(new NdefRecord[]{mimeRecord,aarRecord});}  }
class C{  public void update(Value... values){  for (  Value value : values) {    this.update(value);  }}  }
class C{  protected final Object clone(){  return this;}  }
class C{  @Nullable public V addx(V val){  A.notNull(val,"val");  if (comp == null) {    for (    V v : vals)     if (v.equals(val))     return v;    vals.add(val);    return null;  }  if (strict) {    for (ListIterator<V> it=vals.listIterator(); it.hasNext(); ) {      V v=it.next();      if (v.equals(val))       return v;      int c=comp.compare(v,val);      if (c == 0)       throw new IllegalStateException("Inconsistent equals and compare methods.");      if (c > 0) {        it.previous();        it.add(val);        return null;      }    }    vals.add(val);    return null;  }  for (  V v : vals)   if (v.equals(val))   return v;  for (ListIterator<V> it=vals.listIterator(); it.hasNext(); ) {    V v=it.next();    if (comp.compare(v,val) > 0) {      do {        v=it.previous();      } while (comp.compare(v,val) == 0);      it.add(val);      return null;    }  }  vals.add(val);  return null;}  }
class C{  public void populate(net.minecraft.world.chunk.IChunkProvider icp,int i,int i1){}  }
class C{  public static ProcessBuilder createJavaProcessBuilder(String... command) throws Exception {  return createJavaProcessBuilder(false,command);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Nullable public static SQFPrivateDecl parse(SQFCommandExpression expression){  PsiElement postfix=expression.getPostfixArgument();  String commandName=expression.getCommandName();  SQFPrivateDecl privateDecl=null;  if (commandName.equals("private")) {    if (postfix instanceof SQFLiteralExpression) {      SQFLiteralExpression literal=(SQFLiteralExpression)postfix;      if (literal.getArrayVal() != null) {        privateDecl=new SQFPrivateDecl(expression);        SQFArrayVal array=literal.getArrayVal();        List<SQFLiteralExpression> arrayLiterals=SQFPsiUtil.getExpressionsOfType(array,SQFLiteralExpression.class);        for (        SQFLiteralExpression literalExpression : arrayLiterals) {          if (literalExpression.getString() != null) {            privateDecl.privateDeclVars.add(new SQFPrivateDeclVar(literalExpression.getString(),privateDecl));          }        }        return privateDecl;      } else       if (literal.getString() != null) {        privateDecl=new SQFPrivateDecl(expression);        privateDecl.privateDeclVars.add(new SQFPrivateDeclVar(literal.getString(),new SQFPrivateDecl(expression)));      }    }  }  return privateDecl;}  }
class C{  public void onSelectImageClick(View view){  CropImage.startPickImageActivity(this);}  }
class C{  public HeaderItem(){}  }
class C{  public byte[] wrap(byte[] outgoing,int offset,int len) throws SaslException {  if (completed) {    throw new SaslException("PLAIN supports neither integrity nor privacy");  } else {    throw new IllegalStateException("PLAIN authentication not completed");  }}  }
class C{  protected Vertex createURL(URL url,Network network){  try {    Vertex vertex=network.createVertex(url.toURI());    vertex.addRelationship(Primitive.INSTANTIATION,Primitive.URL);    return vertex;  } catch (  URISyntaxException exception) {    throw new RuntimeException(exception);  }}  }
class C{  public static void continueAll(boolean isIncludedErrorDownloads,DownloadConfiguration downloadConfiguration){  List<String> urls=new ArrayList<String>();  List<DownloadFileInfo> downloadFileInfos=getDownloadFiles();  if (downloadFileInfos != null) {    for (    DownloadFileInfo downloadFileInfo : downloadFileInfos) {      if (!DownloadFileUtil.isLegal(downloadFileInfo)) {        continue;      }      if (downloadFileInfo.getStatus() != Status.DOWNLOAD_STATUS_COMPLETED) {        if (isIncludedErrorDownloads) {          urls.add(downloadFileInfo.getUrl());        } else {          if (downloadFileInfo.getStatus() != Status.DOWNLOAD_STATUS_ERROR) {            urls.add(downloadFileInfo.getUrl());          } else {          }        }      }    }  }  start(urls,downloadConfiguration);}  }
class C{  public T hreflang(String value){  return attr("hreflang",value);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void scheduleTimeoutRequestsTimer(){  HttpsClientPendingRequest nextRequest=_getNextTimeoutingPendingRequest();  if (nextRequest == null) {    cancelTimeoutPendingRequestTask();  } else {    TimerTask task=timeoutPendingRequestsTask.get();    if (task == null || task.scheduledExecutionTime() > nextRequest.timeoutTime) {      cancelTimeoutPendingRequestTask();      task=TimerUtil.schedule(timer,timeoutRun,executor,nextRequest.timeoutTime);      if (!timeoutPendingRequestsTask.compareAndSet(null,task))       task.cancel();    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.PROJECT_DESCRIPTION__VENDOR_NAME:    return VENDOR_NAME_EDEFAULT == null ? vendorName != null : !VENDOR_NAME_EDEFAULT.equals(vendorName);case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_VERSION:  return projectVersion != null;case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_TYPE:return projectType != PROJECT_TYPE_EDEFAULT;case N4mfPackage.PROJECT_DESCRIPTION__MAIN_MODULE:return MAIN_MODULE_EDEFAULT == null ? mainModule != null : !MAIN_MODULE_EDEFAULT.equals(mainModule);case N4mfPackage.PROJECT_DESCRIPTION__EXTENDED_RUNTIME_ENVIRONMENT:return extendedRuntimeEnvironment != null;case N4mfPackage.PROJECT_DESCRIPTION__PROVIDED_RUNTIME_LIBRARIES:return providedRuntimeLibraries != null;case N4mfPackage.PROJECT_DESCRIPTION__REQUIRED_RUNTIME_LIBRARIES:return requiredRuntimeLibraries != null;case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_DEPENDENCIES:return projectDependencies != null;case N4mfPackage.PROJECT_DESCRIPTION__IMPLEMENTATION_ID:return IMPLEMENTATION_ID_EDEFAULT == null ? implementationId != null : !IMPLEMENTATION_ID_EDEFAULT.equals(implementationId);case N4mfPackage.PROJECT_DESCRIPTION__IMPLEMENTED_PROJECTS:return implementedProjects != null;case N4mfPackage.PROJECT_DESCRIPTION__INIT_MODULES:return initModules != null;case N4mfPackage.PROJECT_DESCRIPTION__EXEC_MODULE:return execModule != null;case N4mfPackage.PROJECT_DESCRIPTION__OUTPUT_PATH:return OUTPUT_PATH_EDEFAULT == null ? outputPath != null : !OUTPUT_PATH_EDEFAULT.equals(outputPath);case N4mfPackage.PROJECT_DESCRIPTION__LIBRARY_PATHS:return libraryPaths != null && !libraryPaths.isEmpty();case N4mfPackage.PROJECT_DESCRIPTION__RESOURCE_PATHS:return resourcePaths != null && !resourcePaths.isEmpty();case N4mfPackage.PROJECT_DESCRIPTION__SOURCE_FRAGMENT:return sourceFragment != null && !sourceFragment.isEmpty();case N4mfPackage.PROJECT_DESCRIPTION__MODULE_FILTERS:return moduleFilters != null && !moduleFilters.isEmpty();case N4mfPackage.PROJECT_DESCRIPTION__TESTED_PROJECTS:return testedProjects != null;case N4mfPackage.PROJECT_DESCRIPTION__MODULE_LOADER:return moduleLoader != MODULE_LOADER_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @Override public boolean equals(int id){  return id == mIdentifier;}  }
class C{  public static String calculateYouTubeUrl(String quality,boolean fallback,String videoId) throws IOException {  String uriStr=null;  OkHttpClient client=ButterApplication.getHttpClient();  Request.Builder request=new Request.Builder();  request.url(YOUTUBE_VIDEO_INFORMATION_URL + videoId);  Call call=client.newCall(request.build());  Response response=call.execute();  if (!response.isSuccessful())   return null;  String infoStr=response.body().string();  String[] args=infoStr.split("&");  Map<String,String> argMap=new HashMap<String,String>();  for (  String arg : args) {    String[] valStrArr=arg.split("=");    if (valStrArr.length >= 2) {      argMap.put(valStrArr[0],URLDecoder.decode(valStrArr[1]));    }  }  String fmtList=URLDecoder.decode(argMap.get("fmt_list"),"utf-8");  ArrayList<Format> formats=new ArrayList<Format>();  if (null != fmtList) {    String formatStrs[]=fmtList.split(",");    for (    String lFormatStr : formatStrs) {      Format format=new Format(lFormatStr);      formats.add(format);    }  }  String streamList=argMap.get("url_encoded_fmt_stream_map");  if (null != streamList) {    String streamStrs[]=streamList.split(",");    ArrayList<VideoStream> streams=new ArrayList<VideoStream>();    for (    String streamStr : streamStrs) {      VideoStream lStream=new VideoStream(streamStr);      streams.add(lStream);    }    int formatId=Integer.parseInt(quality);    Format searchFormat=new Format(formatId);    while (!formats.contains(searchFormat) && fallback) {      int oldId=searchFormat.getId();      int newId=getSupportedFallbackId(oldId);      if (oldId == newId) {        break;      }      searchFormat=new Format(newId);    }    int index=formats.indexOf(searchFormat);    if (index >= 0) {      VideoStream searchStream=streams.get(index);      uriStr=searchStream.getUrl();    }  }  return uriStr;}  }
class C{  public Boolean isSmcRecommended(){  return smcRecommended;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.745 -0500",hash_original_method="B143F86B302A5932C8EBD6FB2BD46478",hash_generated_method="B2115C0DC328A5BA3B9C03D90D22162C") public Time(){  this(TimeZone.getDefault().getID());}  }
class C{  public DCTrackingFrequencyControl(int maximum){  mMaximumFrequencyCorrection=maximum;}  }
class C{  protected void validate_return(long[] param){}  }
class C{  public void addSimulationListener(MobsimListener listener){  if (listener instanceof MobsimInitializedListener) {    addSimulationInitializedListener((MobsimInitializedListener)listener);  }  if (listener instanceof MobsimBeforeSimStepListener) {    addSimulationBeforeSimStepListener((MobsimBeforeSimStepListener)listener);  }  if (listener instanceof MobsimAfterSimStepListener) {    addSimulationAfterSimStepListener((MobsimAfterSimStepListener)listener);  }  if (listener instanceof MobsimBeforeCleanupListener) {    addSimulationBeforeCleanupListener((MobsimBeforeCleanupListener)listener);  }}  }
class C{  public IllegalMonitorStateException(){}  }
class C{  public void keyPressed(KeyEvent e){}  }
class C{  private void writeFlowMod(IOFSwitch sw,OFFlowModCommand command,OFBufferId bufferId,Match match,OFPort outPort){  OFFlowMod.Builder fmb;  if (command == OFFlowModCommand.DELETE) {    fmb=sw.getOFFactory().buildFlowDelete();  } else {    fmb=sw.getOFFactory().buildFlowAdd();  }  fmb.setMatch(match);  fmb.setCookie((U64.of(LearningSwitch.LEARNING_SWITCH_COOKIE)));  fmb.setIdleTimeout(LearningSwitch.FLOWMOD_DEFAULT_IDLE_TIMEOUT);  fmb.setHardTimeout(LearningSwitch.FLOWMOD_DEFAULT_HARD_TIMEOUT);  fmb.setPriority(LearningSwitch.FLOWMOD_PRIORITY);  fmb.setBufferId(bufferId);  fmb.setOutPort((command == OFFlowModCommand.DELETE) ? OFPort.ANY : outPort);  Set<OFFlowModFlags> sfmf=new HashSet<OFFlowModFlags>();  if (command != OFFlowModCommand.DELETE) {    sfmf.add(OFFlowModFlags.SEND_FLOW_REM);  }  fmb.setFlags(sfmf);  List<OFAction> al=new ArrayList<OFAction>();  al.add(sw.getOFFactory().actions().buildOutput().setPort(outPort).setMaxLen(Integer.MAX_VALUE).build());  fmb.setActions(al);  if (log.isTraceEnabled()) {    log.trace("{} {} flow mod {}",new Object[]{sw,(command == OFFlowModCommand.DELETE) ? "deleting" : "adding",fmb.build()});  }  counterFlowMod.increment();  sw.write(fmb.build());}  }
class C{  public synchronized IComment editComment(final TypeInstance instance,final IComment comment,final String newCommentText) throws CouldntSaveDataException {  return backend.editComment(instance,comment,newCommentText);}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  static byte[] toIntegerBytes(final BigInteger bigInt){  int bitlen=bigInt.bitLength();  bitlen=((bitlen + 7) >> 3) << 3;  final byte[] bigBytes=bigInt.toByteArray();  if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {    return bigBytes;  }  int startSrc=0;  int len=bigBytes.length;  if ((bigInt.bitLength() % 8) == 0) {    startSrc=1;    len--;  }  final int startDst=bitlen / 8 - len;  final byte[] resizedBytes=new byte[bitlen / 8];  System.arraycopy(bigBytes,startSrc,resizedBytes,startDst,len);  return resizedBytes;}  }
class C{  public void mousePressed(MouseEvent e){  checkPopup(e);}  }
class C{  public void showHideToolBar(){  Container contentPane=frame.getContentPane();  boolean toolBarShown=false;  for (int i=0; i < contentPane.getComponentCount(); i++) {    if (contentPane.getComponent(i).equals(jtbToolBar)) {      toolBarShown=true;      break;    }  }  if (toolBarShown) {    frame.getContentPane().remove(jtbToolBar);    applicationSettings.setShowToolBar(false);  } else {    frame.getContentPane().add(jtbToolBar,BorderLayout.NORTH);    applicationSettings.setShowToolBar(true);  }}  }
class C{  public boolean canBuildParser(){  return isParser(getFormatter());}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  private void convertMetadata(String metadataFormatName,IIOMetadata inData,IIOMetadata outData){  String formatName=null;  String nativeFormatName=inData.getNativeMetadataFormatName();  if (nativeFormatName != null && nativeFormatName.equals(metadataFormatName)) {    formatName=metadataFormatName;  } else {    String[] extraFormatNames=inData.getExtraMetadataFormatNames();    if (extraFormatNames != null) {      for (int i=0; i < extraFormatNames.length; i++) {        if (extraFormatNames[i].equals(metadataFormatName)) {          formatName=metadataFormatName;          break;        }      }    }  }  if (formatName == null && inData.isStandardMetadataFormatSupported()) {    formatName=STANDARD_METADATA_NAME;  }  if (formatName != null) {    try {      Node root=inData.getAsTree(formatName);      outData.mergeTree(formatName,root);    } catch (    IIOInvalidTreeException e) {    }  }}  }
class C{  @SuppressWarnings("unchecked") public static Closure ensureClosure(Object o){  if (o == null)   throw new UnsupportedOperationException();  if (o instanceof Closure)   return (Closure)o;  return new ReturnValueWrappingClosure(o);}  }
class C{  public void assignArray(TestCase test,VariableReference array,int arrayIndex,int position) throws ConstructionFailedException {  List<VariableReference> objects=test.getObjects(array.getComponentType(),position);  Iterator<VariableReference> iterator=objects.iterator();  GenericClass componentClass=new GenericClass(array.getComponentType());  while (iterator.hasNext()) {    VariableReference var=iterator.next();    if (var instanceof ArrayIndex) {      if (((ArrayIndex)var).getArray().equals(array))       iterator.remove(); else       if (((ArrayIndex)var).getArray().getType().equals(array.getType()))       iterator.remove();    }    if (componentClass.isWrapperType()) {      Class<?> rawClass=ClassUtils.wrapperToPrimitive(componentClass.getRawClass());      if (!var.getVariableClass().equals(rawClass) && !var.getVariableClass().equals(componentClass.getRawClass())) {        iterator.remove();      }    }  }  logger.debug("Reusable objects: " + objects);  assignArray(test,array,arrayIndex,position,objects);}  }
class C{  public NakaRushtonRulePanel(){  super();  tfSteepness=createTextField(null,null);  tfSemiSaturation=createTextField(null,null);  tfTimeConstant=createTextField(null,null);  tsUseAdaptation=createYesNoChoiceBox(null,null);  tfAdaptationParam=createTextField(null,null);  tfAdaptationTime=createTextField(null,null);  tsUseAdaptation.addActionListener(this);  this.add(tabbedPane);  mainTab.addItem("Steepness",tfSteepness);  mainTab.addItem("Semi-saturation constant",tfSemiSaturation);  mainTab.addItem("Time constant",tfTimeConstant);  mainTab.addItem("Add noise",getAddNoise());  mainTab.addItem("Use Adaptation",tsUseAdaptation);  mainTab.addItem("Adaptation parameter",tfAdaptationParam);  mainTab.addItem("Adaptation time constant",tfAdaptationTime);  tabbedPane.add(mainTab,"Main");  tabbedPane.add(getNoisePanel(),"Noise");}  }
class C{  public EditableOMCircle(GraphicAttributes ga){  createGraphic(ga);}  }
class C{  public IdentityHashMap(int maxSize){  if (maxSize < 0) {    throw new IllegalArgumentException("maxSize < 0: " + maxSize);  }  size=0;  threshold=getThreshold(maxSize);  elementData=newElementArray(computeElementArraySize());}  }
class C{  public String objectToXml(Object obj) throws JAXBException {  return objectToXml(obj,false);}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  public Entity(MacAddress macAddress,VlanVid vlan,IPv4Address ipv4Address,DatapathId switchDPID,OFPort switchPort,Date lastSeenTimestamp){  this.macAddress=macAddress;  this.ipv4Address=ipv4Address;  this.vlan=vlan;  this.switchDPID=switchDPID;  this.switchPort=switchPort;  this.lastSeenTimestamp=lastSeenTimestamp;  this.activeSince=lastSeenTimestamp;}  }
class C{  public boolean hasGeoRssPoint(){  return hasExtension(GeoRssPoint.class);}  }
class C{  public final AC gap(String size,int... indexes){  BoundSize bsa=size != null ? ConstraintParser.parseBoundSize(size,true,true) : null;  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    if (bsa != null)     cList.get(ix).setGapAfter(bsa);  }  return this;}  }
class C{  @Override public String modelName(){  return "org.apache.zest.library.alarm.model.simple";}  }
class C{  public CLIOutputResponse propdel(final PropertyDeleteRequest request) throws IOException, ServerException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  addDepth(uArgs,request.getDepth().getValue());  uArgs.add("propdel");  uArgs.add(request.getName());  final CommandLineResult result=runCommand(null,uArgs,projectPath,Arrays.asList(request.getPath()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public List<RefCountChangeInfo> peekRefCountInfo(long address){  if (!trackReferenceCounts())   return null;  return stacktraces.get(address);}  }
class C{  public static int digitLength(long l){  if (l >= 0)   return (l <= Integer.MAX_VALUE) ? digitLength((int)l) : (l >= 100000000000000L) ? (l >= 10000000000000000L) ? (l >= 1000000000000000000L) ? 19 : (l >= 100000000000000000L) ? 18 : 17 : (l >= 1000000000000000L) ? 16 : 15 : (l >= 100000000000L) ? (l >= 10000000000000L) ? 14 : (l >= 1000000000000L) ? 13 : 12 : (l >= 10000000000L) ? 11 : 10;  if (l == Long.MIN_VALUE)   return 19;  return digitLength(-l);}  }
class C{  private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){  Map<String,String> labels=containerConfig.getLabels();  if (labels == null) {    labels=new HashMap<>();  }  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());  containerConfig.withLabels(labels);}  }
class C{  public MultithreadingTester numRoundsPerThread(int roundsPerThreads){  if (roundsPerThreads <= 0) {    throw new IllegalArgumentException("Invalid roundsPerThreads parameter: " + roundsPerThreads + " -- must be greater than 0");  }  this.roundsPerThreads=roundsPerThreads;  return this;}  }
class C{  public int readListStart() throws IOException {  return read();}  }
class C{  protected boolean checkNext(char expected,TextStream stream){  stream.skipWhitespace();  char next=stream.peek();  if (next == expected) {    stream.skip();    return true;  }  return false;}  }
class C{  public void testNoRun(){  Settings.setRunIndex(-1);  assertEquals("[val1 ; val2;val3; val4 ]",s.getSetting(RS_S));}  }
class C{  public synchronized void logicalRoomLeave(){  log.debug("logicalRoomLeave ");  try {    IConnection current=Red5.getConnectionLocal();    String streamid=current.getClient().getId();    log.debug(streamid + " is leaving");    RoomClient currentClient=this.clientListManager.getClientByStreamId(streamid);    this.roomLeaveByScope(currentClient,current.getScope(),true);  } catch (  Exception err) {    log.error("[logicalRoomLeave]",err);  }}  }
class C{  public ModelWriter(){  this.tlaBuffer=new StringBuffer(1024);  this.cfgBuffer=new StringBuffer(1024);}  }
class C{  public static int fromVersionString(final String input){  int dot_pos=input.indexOf('.');  try {    if (dot_pos > 0) {      int major=Integer.parseInt(input.substring(0,dot_pos));      int minor=Integer.parseInt(input.substring(dot_pos + 1));      return (major << 8) + minor;    }  } catch (  NumberFormatException ignore) {  }  return 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetentitiestype.class,args);}  }
class C{  public void testVerifyJBossHomeWhenFileInsteadOfDirectory() throws Exception {  this.fsManager.resolveFile("ram:///jboss/bin").createFile();  try {    this.container.verifyJBossHome();    fail("Should have thrown an exception here");  } catch (  ContainerException expected) {    assertEquals("Invalid JBoss installation. The [ram:///jboss/bin] path should be a " + "directory. Make sure the JBoss container home directory you have specified " + "points to the right location (It's currently pointing to [ram:///jboss])",expected.getMessage());  }}  }
class C{  public boolean isHidden(){  return m_hidden;}  }
class C{  public FakeAgent(final TransitStopFacility enterStop,final TransitStopFacility exitStop){  this.exitStop=exitStop;  this.dummyLeg=PopulationUtils.createLeg(TransportMode.pt);  if ((enterStop != null) && (exitStop != null)) {    Route route=new ExperimentalTransitRoute(enterStop,null,null,exitStop);    route.setStartLinkId(enterStop.getLinkId());    route.setEndLinkId(exitStop.getLinkId());    route.setRouteDescription("PT1 " + enterStop.getId().toString() + " T1 "+ exitStop.getId().toString());    this.dummyLeg.setRoute(route);  }}  }
class C{  public T caseFeatureTypeLibrary(FeatureTypeLibrary object){  return null;}  }
class C{  public boolean allow(SearchResultDataLine line){  return true;}  }
class C{  public void processProperty(CIMProperty<?> p){  processProperty("",p);}  }
class C{  public void unmarshal(GridCacheContext ctx,ClassLoader clsLdr) throws IgniteCheckedException {  if (key == null) {    assert keyBytes != null;    CacheObjectContext cacheObjCtx=ctx.cacheObjectContext();    Object key0=ctx.cacheObjects().unmarshal(cacheObjCtx,keyBytes,clsLdr);    key=ctx.cacheObjects().toCacheKeyObject(cacheObjCtx,ctx,key0,false);  } else   key.finishUnmarshal(ctx.cacheObjectContext(),clsLdr);  if (val != null)   val.finishUnmarshal(ctx.cacheObjectContext(),clsLdr);  long remaining=expireTime;  expireTime=remaining < 0 ? 0 : U.currentTimeMillis() + remaining;  if (expireTime < 0)   expireTime=0;}  }
class C{  private Map<String,MetricHeaderInfo> processCSVFileDataHeader(DbClient dbClient,StorageSystem storageSystem,String directorName,List<String> headers){  Map<String,MetricHeaderInfo> metricToObjectMap=new HashMap<>();  for (  String header : headers) {    Matcher matcher=METRIC_NAME_PATTERN.matcher(header);    if (matcher.matches()) {      String name=matcher.group(1);      if (!METRICS_NAMES_TO_GATHER.contains(name)) {        continue;      }      String objectName=matcher.group(2);      String units=matcher.group(3);      if (Strings.isNullOrEmpty(objectName)) {        objectName=EMPTY;      }      StorageHADomain vplexDirector=lookupVPlexDirectorByName(dbClient,storageSystem,directorName);      if (objectName.equals(EMPTY)) {        MetricHeaderInfo headerInfo=new MetricHeaderInfo();        headerInfo.type=MetricHeaderInfo.Type.DIRECTOR;        headerInfo.director=vplexDirector;        headerInfo.units=units;        metricToObjectMap.put(header,headerInfo);      } else {        StoragePort storagePort=lookupVPlexFrontStoragePortByName(dbClient,vplexDirector,objectName);        if (storagePort != null) {          MetricHeaderInfo headerInfo=new MetricHeaderInfo();          headerInfo.type=MetricHeaderInfo.Type.PORT;          headerInfo.director=vplexDirector;          headerInfo.port=storagePort;          headerInfo.units=units;          metricToObjectMap.put(header,headerInfo);        }      }    }  }  return metricToObjectMap;}  }
class C{  public void adjustTransformation(double minXW,double minYW,double maxXW,double maxYW){  double scaleX=1f;  double scaleY=1f;  if (maxXW > minXW)   scaleX=(getWidth() - borderLeft - borderRight) / (maxXW - minXW);  if (maxYW > minYW)   scaleY=(getHeight() - borderTop - borderBottom) / (maxYW - minYW);  offsetX=-minXW;  offsetY=-minYW;  scale=Math.min(scaleX,scaleY);}  }
class C{  public void testReset(){  MatsimRandom.reset();  int value1=MatsimRandom.getRandom().nextInt();  MatsimRandom.reset();  int value2=MatsimRandom.getRandom().nextInt();  assertEquals(value1,value2);}  }
class C{  public boolean contains(int position){  return position >= mPositionOffset && position < mVisibleCount + mPositionOffset;}  }
class C{  public static String parseDiskString(String input){  String delims="[ ]+";  String[] tokens=input.split(delims);  return tokens[0];}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CFilterAction(){  super("",new ImageIcon(CMain.class.getResource("data/funnel.png")));}  }
class C{  javax.cache.Cache<Integer,Integer> createJsr107Cache(String cacheName){  CachingProvider cachingProvider=Caching.getCachingProvider();  cacheManager=cachingProvider.getCacheManager();  MutableConfiguration<Integer,Integer> mc=new MutableConfiguration<Integer,Integer>();  mc.setManagementEnabled(true);  mc.setStatisticsEnabled(true);  javax.cache.Cache<Integer,Integer> cache=cacheManager.createCache(cacheName,mc);  return cache;}  }
class C{  private double computeModifierUnbounded(final double x){  return expMultiplier * Math.exp(-x * x / expMember);}  }
class C{  public StoragePoolRestRep update(URI id,StoragePoolUpdate input){  return client.put(StoragePoolRestRep.class,input,getIdUrl(),id);}  }
class C{  public static Typeface caviarDreamsItalic(Context context){  return FontSourceProcessor.process(R.raw.caviardreams_italic,context);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.193 -0500",hash_original_method="6B2ECCD3AB22E94B5B1243023E902F6D",hash_generated_method="11E14FB2D8B9288473842E4011F1F597") public void sendTrackballEventSync(MotionEvent event){  validateNotAppThread();  try {    (IWindowManager.Stub.asInterface(ServiceManager.getService("window"))).injectTrackballEvent(event,true);  } catch (  RemoteException e) {  }}  }
class C{  private double nextRadicalInverse(){  counter++;  if (counter >= MAXFAST) {    counter=0;    inverse+=MAXFAST;    current=radicalInverse(inverse);    return current;  }  double nextInverse=current + invbase;  if (nextInverse < ALMOST_ONE) {    current=nextInverse;    return current;  } else {    double digit1=invbase, digit2=invbase * invbase;    while (current + digit2 >= ALMOST_ONE) {      digit1=digit2;      digit2*=invbase;    }    current+=(digit1 - 1.0) + digit2;    return current;  }}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public static AbProgressDialogFragment newInstance(int indeterminateDrawable,String message){  AbProgressDialogFragment f=new AbProgressDialogFragment();  Bundle args=new Bundle();  args.putInt("indeterminateDrawable",indeterminateDrawable);  args.putString("message",message);  f.setArguments(args);  return f;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  if (listener == null) {    log.warn("No listener!");  }  listenerList.remove(PropertyChangeListener.class,listener);}  }
class C{  public final LC minWidth(String width){  setWidth(LayoutUtil.derive(getWidth(),ConstraintParser.parseUnitValue(width,true),null,null));  return this;}  }
class C{  private Point2D edge_point(Point2D p,double current_azimuth){  LatLonPoint tmpll=GreatCircle.sphericalBetween(centerY,centerX,MoreMath.HALF_PI_D,current_azimuth);  double phi=tmpll.getRadLat();  double lambda=tmpll.getRadLon();  double cosPhi=Math.cos(phi);  double lambdaMinusCtrLon=lambda - centerX;  double x=(scaled_radius * cosPhi * Math.sin(lambdaMinusCtrLon)) + wx;  double y=hy - (scaled_radius * (cosCtrLat * Math.sin(phi) - sinCtrLat * cosPhi * Math.cos(lambdaMinusCtrLon)));  p.setLocation(x,y);  return p;}  }
class C{  public static MediaSizeName findMedia(Media[] media,float x,float y,int units){  if (x <= 0.0f || y <= 0.0f || units < 1) {    throw new IllegalArgumentException("args must be +ve values");  }  if (media == null || media.length == 0) {    throw new IllegalArgumentException("args must have valid array of media");  }  int size=0;  MediaSizeName[] msn=new MediaSizeName[media.length];  for (int i=0; i < media.length; i++) {    if (media[i] instanceof MediaSizeName) {      msn[size++]=(MediaSizeName)media[i];    }  }  if (size == 0) {    return null;  }  int match=0;  double ls=x * x + y * y;  double tmp_ls;  float[] dim;  float diffx=x;  float diffy=y;  for (int i=0; i < size; i++) {    MediaSize mediaSize=MediaSize.getMediaSizeForName(msn[i]);    if (mediaSize == null) {      continue;    }    dim=mediaSize.getSize(units);    if (x == dim[0] && y == dim[1]) {      match=i;      break;    } else {      diffx=x - dim[0];      diffy=y - dim[1];      tmp_ls=diffx * diffx + diffy * diffy;      if (tmp_ls < ls) {        ls=tmp_ls;        match=i;      }    }  }  return msn[match];}  }
class C{  public MethodInvokingStateMachineRuntimeProcessor(Object targetObject,String methodName){  delegate=new StateMachineMethodInvokerHelper<T,S,E>(targetObject,methodName);}  }
class C{  public Model(){  points=new HashMap<>();}  }
class C{  public void lockFileSet(String fileSet,FileSetInfo fileSetInfo,CreateMode mode) throws Exception {  try {    zkClient.get().create(getFileSetLockPath(fileSet),fileSetInfo.toJson(),ZK_ACL_LIST,mode);  } catch (  KeeperException e) {    if (e instanceof KeeperException.NodeExistsException) {      LOG.error("File set " + fileSet + " is already locked.");    }    throw e;  }}  }
class C{  private void drawBackground(final Rectangle clientArea,final GC gc){  gc.setBackground(shellHover.getDisplay().getSystemColor(SWT.COLOR_WHITE));  gc.fillRectangle(clientArea);}  }
class C{  public static Gender unknown(){  return new Gender(UNKNOWN);}  }
class C{  @Override public String toString(){  if (count == 0) {    return "";  }  int wasted=value.length - count;  if (wasted >= 256 || (wasted >= INITIAL_CAPACITY && wasted >= (count >> 1))) {    return new String(value,0,count);  }  shared=true;  return new String(0,count,value);}  }
class C{  public ContentProposalAdapter(Control control,IControlContentAdapter controlContentAdapter,IContentProposalProvider proposalProvider,KeyStroke keyStroke,char[] autoActivationCharacters){  super();  Assert.isNotNull(control);  Assert.isNotNull(controlContentAdapter);  this.control=control;  this.controlContentAdapter=controlContentAdapter;  this.proposalProvider=proposalProvider;  this.triggerKeyStroke=keyStroke;  if (autoActivationCharacters != null) {    this.autoActivateString=new String(autoActivationCharacters);  }  addControlListener(control);}  }
class C{  public CSVFormat withDelimiter(final char delimiter){  if (isLineBreak(delimiter)) {    throw new IllegalArgumentException("The delimiter cannot be a line break");  }  return new CSVFormat(delimiter,quoteChar,quotePolicy,commentStart,escape,ignoreSurroundingSpaces,ignoreEmptyLines,recordSeparator,nullString,header,skipHeaderRecord);}  }
class C{  private static List findLabeledEdgeRings(Collection dirEdges){  List edgeRingStarts=new ArrayList();  long currLabel=1;  for (Iterator i=dirEdges.iterator(); i.hasNext(); ) {    PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)i.next();    if (de.isMarked())     continue;    if (de.getLabel() >= 0)     continue;    edgeRingStarts.add(de);    List edges=EdgeRing.findDirEdgesInRing(de);    label(edges,currLabel);    currLabel++;  }  return edgeRingStarts;}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof MatrixNode) {    if (translateSet || scaleSet || rotationSet)     throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidChildMatrixNode");    matrix=(MatrixNode)child;  } else   if (child instanceof GradientEntryNode) {    if (entries == null) {      entries=new ArrayList<GradientEntryNode>(4);    } else     if (entries.size() >= GRADIENT_ENTRIES_MAX_INCLUSIVE) {      FXGLog.getLogger().log(FXGLogger.WARN,"InvalidLinearGradientNumElements",null,getDocumentName(),startLine,startColumn);      return;    }    entries.add((GradientEntryNode)child);  } else {    super.addChild(child);  }}  }
class C{  public Settings newSettings(){  if (multipleSettings)   return new Settings(preferences);  return null;}  }
class C{  public boolean leftClick(MouseEvent me){  if (DEBUG) {    Debug.output("leftClick(MAP) at " + me.getX() + ", "+ me.getY());  }  if (grp != null && grp.receivesMapEvents() && me instanceof MapMouseEvent) {    return grp.leftClick((MapMouseEvent)me);  }  return false;}  }
class C{  protected void rebuildListModel(){  DefaultListModel dlm=(DefaultListModel)getListModel();  OMGraphicList list=getList();  int[] selectedIndicies=null;  if (list != null) {    if (selectedTiles != null && selectedTiles.length > 0) {      selectedIndicies=new int[selectedTiles.length];    }    int tileCount=0;    int selectedIndex=0;    if (selectedIndicies != null) {      for (      OMGraphic omg : list) {        ImageTile imageTile=(ImageTile)omg;        if (imageTile.isSelected() && selectedIndex < selectedIndicies.length) {          selectedIndicies[selectedIndex++]=tileCount;        }        tileCount++;      }    }    dlm.clear();    for (    OMGraphic omg : list) {      tileCount++;      dlm.addElement(omg);    }  }  if (resultsList != null) {    if (selectedIndicies != null) {      resultsList.setSelectedIndices(selectedIndicies);    }    resultsList.repaint();  }}  }
class C{  public void addBookLanguage(Language bookLanguage){  assert copyOfBook == null;  if (getBookLanguages() == null) {    bookLanguages=new LinkedList<Language>();  }  if (!bookLanguages.contains(bookLanguage)) {    bookLanguages.add(bookLanguage);  }}  }
class C{  public JSONArray put(int index,Collection<Object> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  public void sendNotification(String notificationName){  sendNotification(notificationName,null,null);}  }
class C{  public static String validateRoutingNo(String routingNo){  int length=checkNumeric(routingNo).length();  if (length > 0)   return "";  return "PaymentBankRoutingNotValid";}  }
class C{  public boolean equals(Object objectToCompare){  if (this == objectToCompare) {    return true;  }  if (objectToCompare == null) {    return false;  }  if (!(objectToCompare instanceof OrderState)) {    return false;  }  OrderState state=(OrderState)objectToCompare;  if (CoreUtils.nullSafeComparator(new Money(m_commission),new Money(state.m_commission)) != 0 || (CoreUtils.nullSafeComparator(new Money(m_minCommission),new Money(state.m_minCommission)) != 0) || (CoreUtils.nullSafeComparator(new Money(m_maxCommission),new Money(state.m_maxCommission)) != 0)) {    return false;  }  if ((CoreUtils.nullSafeComparator(m_status,state.m_status) != 0) || (CoreUtils.nullSafeComparator(m_initMargin,state.m_initMargin) != 0) || (CoreUtils.nullSafeComparator(m_maintMargin,state.m_maintMargin) != 0)|| (CoreUtils.nullSafeComparator(m_equityWithLoan,state.m_equityWithLoan) != 0)|| (CoreUtils.nullSafeComparator(m_commissionCurrency,state.m_commissionCurrency) != 0)) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.490 -0400",hash_original_method="C58FF31B6CE06AE1641E1EEB8394D33A",hash_generated_method="167BD54252CA376600139F1023026E37") public void testStartStopSco(){  int iterations=BluetoothTestRunner.sStartStopScoIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.HEADSET,null);  mTestUtils.connectProfile(adapter,device,BluetoothProfile.HEADSET,null);  mTestUtils.stopSco(adapter,device);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("startStopSco iteration " + (i + 1) + " of "+ iterations);    mTestUtils.startSco(adapter,device);    sleep(SCO_SLEEP_TIME);    mTestUtils.stopSco(adapter,device);    sleep(SCO_SLEEP_TIME);  }  mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.HEADSET,null);  mTestUtils.unpair(adapter,device);  mTestUtils.disable(adapter);}  }
class C{  public double[] readDoubleArray(int n1,int n2){  try {    DataInput dis;    if (bigEndian) {      dis=new DataInputStream(stream);    } else {      dis=new LEDataInputStream(stream);    }    double[] array=new double[n2 - n1];    dis.skipBytes(n1 * 4);    for (int i=0; i < array.length; i++) {      array[i]=dis.readDouble();    }    return array;  } catch (  IOException e) {    throw new IllegalArgumentException("InputStream is unreadable : " + e.toString());  }}  }
class C{  public TacticalGraphicLabel(String text){  this.setText(text);}  }
class C{  public WTableModelEvent(ListModel source,int row){  this(source,row,row,ALL_COLUMNS,CONTENTS_CHANGED);}  }
class C{  public MainLayoutPanel(boolean revealOption,Window parent){  this(DEFAULT_INITIAL_LAYOUT,revealOption,parent);}  }
class C{  private void createPO(){  int noOrders=0;  String info="";  MOrder order=null;  MWarehouse wh=null;  X_T_Replenish[] replenishs=getReplenish("M_WarehouseSource_ID IS NULL");  for (int i=0; i < replenishs.length; i++) {    X_T_Replenish replenish=replenishs[i];    if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())     wh=MWarehouse.get(getCtx(),replenish.getM_Warehouse_ID());    if (order == null || order.getC_BPartner_ID() != replenish.getC_BPartner_ID() || order.getM_Warehouse_ID() != replenish.getM_Warehouse_ID()) {      order=new MOrder(getCtx(),0,get_TrxName());      order.setIsSOTrx(false);      order.setC_DocTypeTarget_ID(p_C_DocType_ID);      MBPartner bp=new MBPartner(getCtx(),replenish.getC_BPartner_ID(),get_TrxName());      order.setBPartner(bp);      order.setSalesRep_ID(getAD_User_ID());      order.setDescription(Msg.getMsg(getCtx(),"Replenishment"));      order.setAD_Org_ID(wh.getAD_Org_ID());      order.setM_Warehouse_ID(wh.getM_Warehouse_ID());      if (!order.save())       return;      log.fine(order.toString());      noOrders++;      info+=" - " + order.getDocumentNo();    }    MOrderLine line=new MOrderLine(order);    line.setM_Product_ID(replenish.getM_Product_ID());    line.setQty(replenish.getQtyToOrder());    line.setPrice();    line.saveEx();  }  m_info="#" + noOrders + info;  log.info(m_info);}  }
class C{  public static long fieldOffset(Class<?> cls,String fieldName){  try {    return objectFieldOffset(cls.getDeclaredField(fieldName));  } catch (  NoSuchFieldException e) {    throw new IllegalStateException(e);  }}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  for (int i=0; i < data.length; i++) {    result.append((i == 0 ? "" : ",") + data[i]);  }  return result.toString();}  }
class C{  public SQLFeatureNotSupportedException(){}  }
class C{  public SerializerWrapper(){}  }
class C{  public File images(){  return imagesFile;}  }
class C{  public static Properties retrieveSparkProperties(SparkApplicationData appData){  String prop=appData.getEnvironmentData().getSparkProperty(SPARK_EXTRA_JAVA_OPTIONS);  Properties properties=new Properties();  if (prop != null) {    try {      Map<String,String> javaOptions=Utils.parseJavaOptions(prop);      for (      String key : javaOptions.keySet()) {        properties.setProperty(key,unescapeString(javaOptions.get(key)));      }      logger.info("Parsed options:" + properties.toString());    } catch (    IllegalArgumentException e) {      logger.error("Encountered error while parsing java options into urls: " + e.getMessage());    }  } else {    logger.error("Unable to retrieve the scheduler info for application [" + appData.getGeneralData().getApplicationId() + "]. It does not contain ["+ SPARK_EXTRA_JAVA_OPTIONS+ "] property in its spark properties.");  }  return properties;}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  private Model trainModel(ExampleSet exampleSet) throws OperatorException {  trainingInnerSource.deliver(exampleSet);  getSubprocess(0).execute();  return modelInnerSink.getData(Model.class);}  }
class C{  int[] addSubscriptions(List<MqttTopicSubscription> subscriptions) throws Exception {  int[] qos=new int[subscriptions.size()];  for (int i=0; i < subscriptions.size(); i++) {    addSubscription(subscriptions.get(i));    qos[i]=subscriptions.get(i).qualityOfService().value();  }  return qos;}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:33.838 -0400",hash_original_method="B344CD189BA7D1BDB7605103D52B5490",hash_generated_method="A21034D3BD494D96EA24AA81098D5498") public HttpService(final HttpProcessor proc,final ConnectionReuseStrategy connStrategy,final HttpResponseFactory responseFactory){  super();  setHttpProcessor(proc);  setConnReuseStrategy(connStrategy);  setResponseFactory(responseFactory);}  }
class C{  private void checkResult(final Waiter waiter,final long actualPacketSize,final long expectedPacketSize,final BigDecimal transferRateBps,final BigDecimal transferRateOps,final boolean isDownload,final boolean isRepeat){  if (!isRepeat) {    waiter.assertEquals(expectedPacketSize,actualPacketSize);  }  waiter.assertNotNull(transferRateBps);  waiter.assertNotNull(transferRateOps);  waiter.assertTrue(transferRateBps.intValue() > 0);  waiter.assertTrue(transferRateOps.intValue() > 0);  final float check=transferRateOps.multiply(new BigDecimal("8")).floatValue();  waiter.assertTrue(((transferRateBps.floatValue() + 0.1) >= check) && ((transferRateBps.floatValue() - 0.1) <= check));  if (isDownload) {    SpeedTestUtils.testReportNotEmpty(waiter,mSocket.getLiveDownloadReport(),expectedPacketSize,false,isRepeat);  } else {    SpeedTestUtils.testReportNotEmpty(waiter,mSocket.getLiveUploadReport(),expectedPacketSize,false,isRepeat);  }}  }
class C{  public static int[][] sumRows(int[][] m){  int[][] totals=new int[m.length][2];  for (int row=0; row < m.length; row++) {    totals[row][0]=row;    totals[row][1]=0;    for (int col=0; col < m[row].length; col++) {      totals[row][1]+=m[row][col];    }  }  return totals;}  }
class C{  public static <T>boolean equals(List<T> a,List<T> b){  if (a == b) {    return true;  } else   if (a == null || b == null) {    return false;  } else   if (a.size() != b.size()) {    return false;  } else {    for (int i=0; i < a.size(); i++) {      T itemA=a.get(i);      T itemB=b.get(i);      if (!equal(itemA,itemB)) {        return false;      }    }    return true;  }}  }
class C{  public boolean roomExists(String number){  return mRooms.containsKey(number);}  }
class C{  public ViPRSysCall(ViPRSystemClient client){  if (client == null) {    throw new IllegalArgumentException("ViPR system client cannot be null");  }  this.client=client;}  }
class C{  protected void assertEqualReaders(Reader expected,Reader actual,int len) throws IOException {  for (int i=0; len < 0 || i < len; i++) {    int ce=expected.read();    int ca=actual.read();    Assert.assertEquals(expected,actual);    assertEquals(ce,ca);    if (ce == -1) {      break;    }  }  expected.close();  actual.close();}  }
class C{  private static void checkTitleColor(){  TitledBorder titledBorder=new TitledBorder(new EmptyBorder(1,1,1,1));  Color defaultColor=UIManager.getLookAndFeelDefaults().getColor("TitledBorder.titleColor");  Color titledBorderColor=titledBorder.getTitleColor();  if (defaultColor == null) {    if (titledBorderColor == null) {      return;    } else {      throw new RuntimeException("TitledBorder default color should be null");    }  }  if (!defaultColor.equals(titledBorderColor)) {    throw new RuntimeException("L&F default color " + defaultColor.toString() + " differs from TitledBorder color "+ titledBorderColor.toString());  }  Color color=Color.green;  titledBorder.setTitleColor(color);  if (!color.equals(titledBorder.getTitleColor())) {    throw new RuntimeException("TitledBorder color should be " + color.toString());  }  titledBorder.setTitleColor(null);  if (!defaultColor.equals(titledBorder.getTitleColor())) {    throw new RuntimeException("L&F default color " + defaultColor.toString() + " differs from TitledBorder color "+ titledBorderColor.toString());  }}  }
class C{  public void clearProxyCredentials(){  proxyCred.clear();}  }
class C{  void dispatchOnLauncherTransitionPrepare(View v,boolean animated,boolean toWorkspace){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionPrepare(mLauncher,animated,toWorkspace);  }}  }
class C{  protected void addNonMatch(StringBuilder sb,String text){  sb.append(text);}  }
class C{  static String gzipBase64(String string) throws IOException {  if (isEmpty(string)) {    return string;  }  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(string.length());  GZIPOutputStream gzip=new GZIPOutputStream(byteOut);  gzip.write(string.getBytes("UTF-8"));  gzip.close();  byte[] bytes=byteOut.toByteArray();  byteOut.close();  return Base64.encodeToString(bytes,Base64.URL_SAFE);}  }
class C{  public void writeProperties(MultiValueHashMap<String,String> props) throws IOException {  int row=0;  byte[] writeBuf=new byte[super.getRecordSize()];  for (  Map.Entry<String,List<String>> e : props.entrySet()) {    for (    String val : e.getValue()) {      writeMapEntryIntoRecord(e.getKey(),val,writeBuf);      if (row < getNextRowId())       updateRecord(row,writeBuf); else       insertRecord(row,writeBuf);      row++;    }  }}  }
class C{  public boolean hasFocus(){  return fHasFocus;}  }
class C{  @Deprecated public static <X,Y>Y reduce(Iterable<? extends X> c,IgniteReducer<? super X,Y> f){  A.notNull(c,"c",f,"f");  for (  X x : c)   if (!f.collect(x))   break;  return f.reduce();}  }
class C{  public void testNegNegSameLength(){  String numA="-283746278342837476784564875684767";  String numB="-293478573489347658763745839457637";  String res="71412358434940908477702819237626";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public void execute(){  Object model=getDataModel();  if (model == null && getSourceGraph() != null) {    model=getSourceGraph();  }  if (model == null) {    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");  }  Parameters params=getParams();  double penaltyDiscount=params.getDouble("penaltyDiscount",4);  if (model instanceof Graph) {    IndependenceTest test=new IndTestDSep((Graph)model);    GraphScore gesScore=new GraphScore((Graph)model);    gfci=new GFci(test,gesScore);    gfci.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));    gfci.setVerbose(true);  } else {    if (model instanceof DataSet) {      DataSet dataSet=(DataSet)model;      if (dataSet.isContinuous()) {        IndependenceTest test=new IndTestFisherZ(new CovarianceMatrixOnTheFly((DataSet)model),0.001);        SemBicScore gesScore=new SemBicScore(new CovarianceMatrixOnTheFly((DataSet)model));        gesScore.setPenaltyDiscount(penaltyDiscount);        gesScore.setPenaltyDiscount(penaltyDiscount);        System.out.println("Score done");        gfci=new GFci(test,gesScore);      } else {        throw new IllegalStateException("Data set must either be continuous or discrete.");      }    } else     if (model instanceof ICovarianceMatrix) {      IndependenceTest test=new IndTestFisherZ((ICovarianceMatrix)model,0.001);      SemBicScore gesScore=new SemBicScore((ICovarianceMatrix)model);      gesScore.setPenaltyDiscount(penaltyDiscount);      gesScore.setPenaltyDiscount(penaltyDiscount);      gfci=new GFci(test,gesScore);    } else     if (model instanceof DataModelList) {      DataModelList list=(DataModelList)model;      for (      DataModel dataModel : list) {        if (!(dataModel instanceof DataSet || dataModel instanceof ICovarianceMatrix)) {          throw new IllegalArgumentException("Need a combination of all continuous data sets or " + "covariance matrices, or else all discrete data sets, or else a single initialGraph.");        }      }      if (list.size() != 1) {        throw new IllegalArgumentException("FGS takes exactly one data set, covariance matrix, or initialGraph " + "as input. For multiple data sets as input, use IMaGES.");      }      if (allContinuous(list)) {        double penalty=params.getDouble("penaltyDiscount",4);        SemBicScoreImages fgsScore=new SemBicScoreImages(list);        IndTestScore test=new IndTestScore(fgsScore);        fgsScore.setPenaltyDiscount(penalty);        gfci=new GFci(test,fgsScore);      } else {        throw new IllegalArgumentException("Data must be either all discrete or all continuous.");      }    } else {      System.out.println("No viable input.");    }  }  gfci.setVerbose(true);  gfci.setFaithfulnessAssumed(params.getBoolean("faithfulnessAssumed",true));  Graph graph=gfci.search();  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);}  }
class C{  public UtilsRegressionTest(String name){  super(name);}  }
class C{  public static void doSaveConfigurationCopy(ILaunchConfigurationWorkingCopy config){}  }
class C{  public void takeHints(Collection<Hint> c,int maxElements) throws InterruptedException {  int count=0;  try {    while (count == 0) {      hintLock.lock();      while (hintQueue.isEmpty()) {        hintsAvailable.await();      }      while (count < maxElements && !hintQueue.isEmpty()) {        HintKey hintKey=hintQueue.pollFirst();        if (hintKey != null) {          List<Versioned<byte[]>> values=hints.remove(hintKey);          if (values == null) {            continue;          }          c.add(new Hint(hintKey,values));          count+=1;        }      }    }  }  finally {    hintLock.unlock();  }}  }
class C{  public boolean hasCharset(){  return charset != null;}  }
class C{  public Vector4d add(Vector4fc v){  x+=v.x();  y+=v.y();  z+=v.z();  w+=v.w();  return this;}  }
class C{  public void mutate(final EvolutionState state,final int thread){  RuleInitializer initializer=((RuleInitializer)state.initializer);  for (int i=0; i < numRules; i++) {    rules[i].mutate(state,thread);  }  while (state.random[thread].nextBoolean(constraints(initializer).p_del) && numRules > constraints(initializer).minSize) {    removeRandomRule(state,thread);  }  while (state.random[thread].nextBoolean(constraints(initializer).p_add) && numRules < constraints(initializer).maxSize) {    addRandomRule(state,thread);  }  if (state.random[thread].nextBoolean(constraints(initializer).p_randorder)) {    randomizeRulesOrder(state,thread);  }}  }
class C{  public void keyReleased(KeyEvent e){  if (CLogMgt.isLevelFinest())   log.finest("Key=" + e.getKeyCode() + " - "+ e.getKeyChar()+ " -> "+ m_text.getText());  if (e.getKeyCode() == KeyEvent.VK_ESCAPE)   m_text.setText(m_initialText); else   if (e.getKeyChar() == KeyEvent.CHAR_UNDEFINED)   return;}  }
class C{  public boolean isDepthTest(){  return depthTest;}  }
class C{  public GridConcurrentHashSet(){  super(new ConcurrentHashMap8<E,E>());}  }
class C{  public Allpass(int order){  this.order=order;  k=new double[order];  state=new double[order + 1];  constructRationalRepresentation();}  }
class C{  static synchronized void invalidateStyle(){  xp=null;  themeActive=null;  skinPainter.flush();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(4);  testEmployee.setAttribute("district","dallas");  attrValue=testEmployee.getAttribute("district");  assertEquals("elementAddNewAttributeAssert","dallas",attrValue);}  }
class C{  String validateSignalMastReference(String name){  SignalMast h=null;  if (name != null) {    if (name.length() > 0) {      h=InstanceManager.getDefault(jmri.SignalMastManager.class).getByUserName(name);      if (h != null) {        return name;      }    }    try {      h=InstanceManager.getDefault(jmri.SignalMastManager.class).provideSignalMast(name);    } catch (    IllegalArgumentException ex) {      h=null;    }  }  if (h == null) {    messageInvalidActionItemName(name,"SignalMast");    return null;  }  return name;}  }
class C{  public PnLStream add(PnLStream other){  PersistentHashMap<LocalDate,Float> added=PersistentHashMap.emptyMap();  for (  Entry<LocalDate,Float> entry : getPnls().entrySet()) {    Float fo=other.getPnls().get(entry.getKey());    if (fo == null) {      throw new PnLStreamElementNotPresentException("For Date: " + entry.getKey());    }    added=added.assoc(entry.getKey(),fo + entry.getValue());  }  return new PnLStream(added);}  }
class C{  @Override public List<T> step(int step){  return new ArrayList<T>();}  }
class C{  public static boolean eraseWhitespaceAndComma(ASTNode parent_node,PsiElement item,boolean backwards){  boolean is_comma;  boolean got_comma=false;  ASTNode current=item.getNode();  ASTNode candidate;  boolean have_skipped_the_item=false;  while (current != null) {    candidate=current;    current=backwards ? current.getTreePrev() : current.getTreeNext();    if (have_skipped_the_item) {      is_comma=",".equals(candidate.getText());      got_comma|=is_comma;      if (is_comma || candidate.getElementType() == TokenType.WHITE_SPACE) {        parent_node.removeChild(candidate);      } else {        break;      }    } else {      have_skipped_the_item=true;    }  }  return got_comma;}  }
class C{  @Override protected <T extends DataObject>GarbageCollectionRunnable genGCTask(Class<T> clazz){  return new GlobalGCRunnable(dbClient,clazz,dependencyTracker,gcDelayMins,coordinator);}  }
class C{  private static void sort(SavedField[] array,int high){  if (high > 10) {    Arrays.sort(array,0,high);  } else {    for (int i=0; i < high; i++) {      for (int j=i; j > 0 && (array[j - 1]).compareTo(array[j]) > 0; j--) {        SavedField t=array[j];        array[j]=array[j - 1];        array[j - 1]=t;      }    }  }}  }
class C{  private boolean adjustEventFactors(){  float userSum=0.0f;  float defaultSum=0.0f;  int defaultCount=0;  for (int i=0; i < FACTORZ_COUNT; ++i) {    if (mFactors[i] <= 0.0f) {      userSum-=mFactors[i];    } else {      defaultSum+=mFactors[i];      ++defaultCount;    }  }  if (userSum > 100.0f) {    System.err.println("** Event weights > 100%");    return false;  }  if (defaultCount == 0 && (userSum < 99.9f || userSum > 100.1f)) {    System.err.println("** Event weights != 100%");    return false;  }  float defaultsTarget=(100.0f - userSum);  float defaultsAdjustment=defaultsTarget / defaultSum;  for (int i=0; i < FACTORZ_COUNT; ++i) {    if (mFactors[i] <= 0.0f) {      mFactors[i]=-mFactors[i];    } else {      mFactors[i]*=defaultsAdjustment;    }  }  if (mVerbose > 0) {    CLog.d("// Event percentages:");    for (int i=0; i < FACTORZ_COUNT; ++i) {      CLog.d("//   " + i + ": "+ mFactors[i]+ "%");    }  }  float sum=0.0f;  for (int i=0; i < FACTORZ_COUNT; ++i) {    sum+=mFactors[i] / 100.0f;    mFactors[i]=sum;  }  return true;}  }
class C{  public boolean isSmapSuppressed(){  return isSmapSuppressed;}  }
class C{  private void processConstantDefns(){  ModuleNode[] mods=this.moduleTbl.getModuleNodes();  for (int i=0; i < mods.length; i++) {    if ((!mods[i].isInstantiated()) || ((mods[i].getConstantDecls().length == 0) && (mods[i].getVariableDecls().length == 0))) {      this.processConstantDefns(mods[i]);    }  }}  }
class C{  public Object propertyNamed(String propertyName){  return properties.get(propertyName);}  }
class C{  @Override public boolean canExecute(){  boolean returnVal=true;  ERDEntity foreignKeyEntity=relationship.getForeignKeyEntity();  if (foreignKeyEntity.equals(targetPrimaryKey)) {    returnVal=false;  } else {    List<?> relationships=targetPrimaryKey.getPrimaryKeyRelationships();    for (int i=0; i < relationships.size(); i++) {      ERDAssociation relationship=((ERDAssociation)(relationships.get(i)));      if (relationship.getForeignKeyEntity().equals(sourceForeignKey) && relationship.getPrimaryKeyEntity().equals(targetPrimaryKey)) {        returnVal=false;        break;      }    }  }  return returnVal;}  }
class C{  public MekaDialog(Dialog owner,String title,ModalityType modality){  super(owner,title,modality);  initialize();  initGUI();  finishInit();}  }
class C{  public boolean search(int source,int sink){  for (int i=0; i < numVertices; i++) {    visited[i]=0;  }  queue[0]=source;  int head=0, tail=1;  previous[source]=-1;  visited[source]=1;  while (head != tail) {    int u=queue[head];    head=(head + 1) % QUEUE_SIZE;    visited[u]=2;    for (int v=0; v < numVertices; v++) {      if (visited[v] == 0 && capacity[u][v] > flow[u][v]) {        queue[tail]=v;        tail=(tail + 1) % QUEUE_SIZE;        visited[v]=1;        previous[v]=u;      }    }  }  return visited[sink] != 0;}  }
class C{  public Node appendNode(Object name){  return new Node(this,name);}  }
class C{  private Element drawLine(DBIDRef iter){  SVGPath path=new SVGPath();  double[] yPos=proj.fastProjectDataToRenderSpace(relation.get(iter));  boolean drawn=false;  int valid=0;  for (int i=0; i < yPos.length; i++) {    if (yPos[i] != yPos[i]) {      valid=0;      continue;    }    ++valid;    if (valid > 1) {      if (valid == 2) {        path.moveTo(getVisibleAxisX(i - 1),yPos[i - 1]);      }      path.lineTo(getVisibleAxisX(i),yPos[i]);      drawn=true;    }  }  if (!drawn) {    return null;  }  return path.makeElement(svgp);}  }
class C{  public static final int sign(long x){  return (x < 0) ? -1 : 1;}  }
class C{  public void add(long value){  if (size == values.length) {    values=Arrays.copyOf(values,size * 2);  }  values[size++]=value;}  }
class C{  private double[] max(double[] distances1,double[] distances2){  if (distances1.length != distances2.length) {    throw new RuntimeException("different lengths!");  }  double[] result=new double[distances1.length];  for (int i=0; i < distances1.length; i++) {    result[i]=Math.max(distances1[i],distances2[i]);  }  return result;}  }
class C{  private synchronized void writeData(byte chunk[]) throws NetworkException {  try {    mStream.write(chunk);    mStream.flush();  } catch (  IOException e) {    throw new NetworkException("Failed to write data!",e);  }}  }
class C{  public static Map<String,Object> updateTelecomNumber(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  boolean isModified=false;  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_UPDATE");  if (result.size() > 0)   return result;  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_id_generation_failure",locale));  }  String contactMechId=(String)context.get("contactMechId");  GenericValue contactMech=null;  GenericValue partyContactMech=null;  try {    contactMech=EntityQuery.use(delegator).from("ContactMech").where("contactMechId",contactMechId).queryOne();    partyContactMech=EntityQuery.use(delegator).from("PartyContactMech").where("partyId",partyId,"contactMechId",contactMechId).orderBy("fromDate").filterByDate().queryFirst();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    contactMech=null;    partyContactMech=null;  }  if (contactMech == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_find_specified_contact_info_read",locale));  }  if (partyContactMech == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.cannot_update_specified_contact_info_not_corresponds",locale));  }  toBeStored.add(partyContactMech);  GenericValue newContactMech=GenericValue.create(contactMech);  GenericValue newPartyContactMech=GenericValue.create(partyContactMech);  GenericValue relatedEntityToSet=null;  if ("TELECOM_NUMBER".equals(contactMech.getString("contactMechTypeId"))) {    GenericValue telNum=null;    try {      telNum=EntityQuery.use(delegator).from("TelecomNumber").where("contactMechId",contactMechId).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      telNum=null;    }    relatedEntityToSet=GenericValue.create(telNum);    relatedEntityToSet.set("countryCode",context.get("countryCode"));    relatedEntityToSet.set("areaCode",context.get("areaCode"));    relatedEntityToSet.set("contactNumber",context.get("contactNumber"));    if (telNum == null || !relatedEntityToSet.equals(telNum)) {      isModified=true;    }    relatedEntityToSet.set("contactMechId",newCmId);    newPartyContactMech.set("extension",context.get("extension"));  } else {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_update_contact_as_TELECOM_NUMBER_specified",UtilMisc.toMap("contactMechTypeId",contactMech.getString("contactMechTypeId")),locale));  }  newPartyContactMech.set("roleTypeId",context.get("roleTypeId"));  newPartyContactMech.set("allowSolicitation",context.get("allowSolicitation"));  if (!newContactMech.equals(contactMech))   isModified=true;  if (!newPartyContactMech.equals(partyContactMech))   isModified=true;  toBeStored.add(newContactMech);  toBeStored.add(newPartyContactMech);  if (isModified) {    if (relatedEntityToSet != null)     toBeStored.add(relatedEntityToSet);    newContactMech.set("contactMechId",newCmId);    newPartyContactMech.set("contactMechId",newCmId);    newPartyContactMech.set("fromDate",now);    newPartyContactMech.set("thruDate",null);    try {      Iterator<GenericValue> partyContactMechPurposes=UtilMisc.toIterator(partyContactMech.getRelated("PartyContactMechPurpose",null,null,false));      while (partyContactMechPurposes != null && partyContactMechPurposes.hasNext()) {        GenericValue tempVal=GenericValue.create(partyContactMechPurposes.next());        tempVal.set("contactMechId",newCmId);        toBeStored.add(tempVal);      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }    partyContactMech.set("thruDate",now);    try {      delegator.storeAll(toBeStored);    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }  } else {    result.put("newContactMechId",contactMechId);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resourceError,"contactmechservices.no_changes_made_not_updating",locale));    return result;  }  result.put("newContactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  private void assertNoBackendCodeInUIThread(){  Assert.assertTrue("Test requires active MonitorAspect aspect!",MonitorAdaptor.aspectIsActive());  if (MonitorAdaptor.hasTriggeredBackendCode()) {    Set<JoinPoint> joinPoints=MonitorAdaptor.getTriggeredJoinPoints();    for (    JoinPoint joinPoint : joinPoints) {      System.err.println(joinPoint);    }  }  Assert.assertFalse("Backend code (e.g. parsing must not be executed in UI thread) times executed: " + MonitorAdaptor.getTriggeredJoinPoints().size(),MonitorAdaptor.hasTriggeredBackendCode());  MonitorAdaptor.reset();}  }
class C{  public void initKeyboardEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,AbstractView viewArg,String keyIdentifierArg,int keyLocationArg,String modifiersList){  initUIEvent(typeArg,canBubbleArg,cancelableArg,viewArg,0);  keyIdentifier=keyIdentifierArg;  keyLocation=keyLocationArg;  modifierKeys.clear();  String[] modifiers=split(modifiersList);  for (int i=0; i < modifiers.length; i++) {    modifierKeys.add(modifiers[i]);  }}  }
class C{  private void configureEmail() throws Exception {  String smtpHost=rsvc.getString(RuntimeConstants.LOGSYSTEM_LOG4J_EMAIL_SERVER);  String emailFrom=rsvc.getString(RuntimeConstants.LOGSYSTEM_LOG4J_EMAIL_FROM);  String emailTo=rsvc.getString(RuntimeConstants.LOGSYSTEM_LOG4J_EMAIL_TO);  String emailSubject=rsvc.getString(RuntimeConstants.LOGSYSTEM_LOG4J_EMAIL_SUBJECT);  String bufferSize=rsvc.getString(RuntimeConstants.LOGSYSTEM_LOG4J_EMAIL_BUFFER_SIZE);  if (smtpHost == null || smtpHost.trim().equals("") || emailFrom == null || smtpHost.trim().equals("") || emailTo == null || emailTo.trim().equals("") || emailSubject == null || emailSubject.trim().equals("") || bufferSize == null || bufferSize.trim().equals("")) {    return;  }  SMTPAppender appender=new SMTPAppender();  appender.setSMTPHost(smtpHost);  appender.setFrom(emailFrom);  appender.setTo(emailTo);  appender.setSubject(emailSubject);  appender.setBufferSize(Integer.parseInt(bufferSize));  appender.setLayout(layout);  appender.activateOptions();  logger.addAppender(appender);}  }
class C{  int computedLevel(){  if (isRootGroup()) {    return -1;  }  int level=0;  Group currentParent=parent;  if (currentParent == null) {    return -2;  }  while (!currentParent.isRootGroup()) {    currentParent=currentParent.getParent();    if (currentParent == null) {      return -3;    }    level++;  }  return level;}  }
class C{  @Override public StatusBarNotificationEvo clone(){  final StatusBarNotificationEvo clone=from(super.clone());  clone.tag=tag;  clone.id=id;  clone.tag_decorated=tag_decorated;  clone.updateKey();  return clone;}  }
class C{  public void failover(int statementId,Protocol unProxiedProtocol){  this.statementId=statementId;  this.unProxiedProtocol=unProxiedProtocol;  this.parameterTypeHeader=new MariaDbType[parameters.length];  this.shareCounter=1;  this.isBeingDeallocate=false;}  }
class C{  @Override public final synchronized V remove(final Object s){  final V r=this.levelB.remove(s);  if (r != null)   return r;  return this.levelA.remove(s);}  }
class C{  public static double pdf(double val,double loc,double scale,double shape1,double shape2){  final double c=cdf(val,loc,scale,shape1,shape2);  val=(val - loc) / scale;  if (shape1 != 0.) {    val=1 - shape1 * val;    if (val < 1e-15) {      return 0.;    }    val=(1. - 1. / shape1) * Math.log(val);  }  return Math.exp(-val) / scale * Math.pow(c,1. - shape2);}  }
class C{  public boolean hasYomi(){  return super.hasAttribute(YOMI);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:02.030 -0500",hash_original_method="5DC934A1F65A8C13AADF3FD37642D2BD",hash_generated_method="0A6A7C8D7ECB8D2FD01AD136CFCB11FF") private int processPollFds() throws IOException {  if (pollFds.get(0).revents == POLLIN) {    byte[] buffer=new byte[8];    while (IoBridge.read(wakeupIn,buffer,0,1) > 0) {    }  }  int readyKeyCount=0;  for (int i=1; i < pollFds.size(); ++i) {    StructPollfd pollFd=pollFds.get(i);    if (pollFd.revents == 0) {      continue;    }    if (pollFd.fd == null) {      break;    }    SelectionKeyImpl key=(SelectionKeyImpl)pollFd.userData;    pollFd.fd=null;    pollFd.userData=null;    int ops=key.interestOpsNoCheck();    int selectedOp=0;    if ((pollFd.revents & POLLIN) != 0) {      selectedOp=ops & (OP_ACCEPT | OP_READ);    } else     if ((pollFd.revents & POLLOUT) != 0) {      if (key.isConnected()) {        selectedOp=ops & OP_WRITE;      } else {        selectedOp=ops & OP_CONNECT;      }    }    if (selectedOp != 0) {      boolean wasSelected=mutableSelectedKeys.contains(key);      if (wasSelected && key.readyOps() != selectedOp) {        key.setReadyOps(key.readyOps() | selectedOp);        ++readyKeyCount;      } else       if (!wasSelected) {        key.setReadyOps(selectedOp);        mutableSelectedKeys.add(key);        ++readyKeyCount;      }    }  }  return readyKeyCount;}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public static void cleanup(){  md5Cache.clear();}  }
class C{  @Override public boolean onCreate(){  mDatabaseHelper=new WeatherDatabaseHelper(getContext());  return true;}  }
class C{  private boolean test_float4_3D(){  CUarray array=new CUarray();  CUDA_ARRAY3D_DESCRIPTOR ad=new CUDA_ARRAY3D_DESCRIPTOR();  ad.Format=CU_AD_FORMAT_FLOAT;  ad.Width=sizeX;  ad.Height=sizeY;  ad.Depth=sizeZ;  ad.NumChannels=4;  cuArray3DCreate(array,ad);  CUDA_MEMCPY3D copy=new CUDA_MEMCPY3D();  copy.srcMemoryType=CUmemorytype.CU_MEMORYTYPE_HOST;  copy.srcHost=Pointer.to(input_float4_3D);  copy.srcPitch=sizeX * Sizeof.FLOAT * 4;  copy.srcHeight=sizeY;  copy.dstMemoryType=CUmemorytype.CU_MEMORYTYPE_ARRAY;  copy.dstArray=array;  copy.dstHeight=sizeX;  copy.WidthInBytes=sizeX * Sizeof.FLOAT * 4;  copy.Height=sizeY;  copy.Depth=sizeZ;  cuMemcpy3D(copy);  CUtexref texref=new CUtexref();  cuModuleGetTexRef(texref,module,"texture_float4_3D");  cuTexRefSetFilterMode(texref,CU_TR_FILTER_MODE_LINEAR);  cuTexRefSetAddressMode(texref,0,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetAddressMode(texref,1,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetAddressMode(texref,2,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetFlags(texref,CU_TRSF_NORMALIZED_COORDINATES);  cuTexRefSetFormat(texref,CU_AD_FORMAT_FLOAT,4);  cuTexRefSetArray(texref,array,CU_TRSA_OVERRIDE_FORMAT);  CUdeviceptr dOutput=new CUdeviceptr();  cuMemAlloc(dOutput,Sizeof.FLOAT * 4);  CUfunction function=new CUfunction();  cuModuleGetFunction(function,module,"test_float4_3D");  Pointer kernelParameters=Pointer.to(Pointer.to(dOutput),Pointer.to(new float[]{posX}),Pointer.to(new float[]{posY}),Pointer.to(new float[]{posZ}));  cuLaunchKernel(function,1,1,1,1,1,1,0,null,kernelParameters,null);  cuCtxSynchronize();  float hOutput[]=new float[4];  cuMemcpyDtoH(Pointer.to(hOutput),dOutput,Sizeof.FLOAT * 4);  log("Result float4 3D " + Arrays.toString(hOutput));  float expected[]=new float[]{3.5f,3.5f,3.5f,3.5f};  boolean passed=Arrays.equals(hOutput,expected);  log("Test   float4 3D " + (passed ? "PASSED" : "FAILED"));  cuArrayDestroy(array);  cuMemFree(dOutput);  return passed;}  }
class C{  private static ApiField copyField(ApiField apiField){  ApiField fieldCopy=new ApiField();  fieldCopy.name=apiField.name;  fieldCopy.required=apiField.required;  fieldCopy.primitiveType=apiField.primitiveType;  fieldCopy.wrapperName=apiField.wrapperName;  fieldCopy.description=apiField.description;  fieldCopy.validValues=Lists.newArrayList(apiField.validValues);  fieldCopy.collection=apiField.collection;  fieldCopy.min=apiField.min;  fieldCopy.max=apiField.max;  return fieldCopy;}  }
class C{  public static <IT,OT>void execute(final Task<IT,OT> task){  exec(task);}  }
class C{  protected synchronized void ensurePrefetchAmount(){  if (mPrefetchedAdList.size() < PREFETCHED_ADS_SIZE && (mFetchFailCount < MAX_FETCH_ATTEMPT)) {    fetchAd();  }}  }
class C{  private boolean checkJarFile(File jarFile){  log("Scanning: " + jarFile.getPath(),verboseLevel);  if (!skipChecksum) {    boolean skipDueToSnapshot=skipSnapshotsChecksum && jarFile.getName().contains("-SNAPSHOT");    if (!skipDueToSnapshot && !matchesRegexChecksum(jarFile,skipRegexChecksum)) {      final File checksumFile=new File(licenseDirectory,jarFile.getName() + "." + CHECKSUM_TYPE);      if (!(checksumFile.exists() && checksumFile.canRead())) {        log("MISSING " + CHECKSUM_TYPE + " checksum file for: "+ jarFile.getPath(),Project.MSG_ERR);        log("EXPECTED " + CHECKSUM_TYPE + " checksum file : "+ checksumFile.getPath(),Project.MSG_ERR);        this.failures=true;        return false;      } else {        final String expectedChecksum=readChecksumFile(checksumFile);        try {          final MessageDigest md=MessageDigest.getInstance(CHECKSUM_TYPE);          byte[] buf=new byte[CHECKSUM_BUFFER_SIZE];          try {            FileInputStream fis=new FileInputStream(jarFile);            try {              DigestInputStream dis=new DigestInputStream(fis,md);              try {                while (dis.read(buf,0,CHECKSUM_BUFFER_SIZE) != -1) {                }              }  finally {                dis.close();              }            }  finally {              fis.close();            }          } catch (          IOException ioe) {            throw new BuildException("IO error computing checksum of file: " + jarFile,ioe);          }          final byte[] checksumBytes=md.digest();          final String checksum=createChecksumString(checksumBytes);          if (!checksum.equals(expectedChecksum)) {            log("CHECKSUM FAILED for " + jarFile.getPath() + " (expected: \""+ expectedChecksum+ "\" was: \""+ checksum+ "\")",Project.MSG_ERR);            this.failures=true;            return false;          }        } catch (        NoSuchAlgorithmException ae) {          throw new BuildException("Digest type " + CHECKSUM_TYPE + " not supported by your JVM",ae);        }      }    } else     if (skipDueToSnapshot) {      log("Skipping jar because it is a SNAPSHOT : " + jarFile.getAbsolutePath(),Project.MSG_INFO);    } else {      log("Skipping jar because it matches regex pattern: " + jarFile.getAbsolutePath() + " pattern: "+ skipRegexChecksum.pattern(),Project.MSG_INFO);    }  }  Map<File,LicenseType> foundLicenses=new LinkedHashMap<>();  List<File> expectedLocations=new ArrayList<>();  outer:   for (  String mappedPath : licenseMapper.mapFileName(jarFile.getName())) {    for (    LicenseType licenseType : LicenseType.values()) {      File licensePath=new File(licenseDirectory,mappedPath + licenseType.licenseFileSuffix());      if (licensePath.exists()) {        foundLicenses.put(licensePath,licenseType);        log(" FOUND " + licenseType.name() + " license at "+ licensePath.getPath(),verboseLevel);        break outer;      } else {        expectedLocations.add(licensePath);      }    }  }  for (  Map.Entry<File,LicenseType> e : foundLicenses.entrySet()) {    LicenseType license=e.getValue();    String licensePath=e.getKey().getName();    String baseName=licensePath.substring(0,licensePath.length() - license.licenseFileSuffix().length());    File noticeFile=new File(licenseDirectory,baseName + license.noticeFileSuffix());    if (noticeFile.exists()) {      log(" FOUND NOTICE file at " + noticeFile.getAbsolutePath(),verboseLevel);    } else {      if (license.isNoticeRequired()) {        this.failures=true;        log("MISSING NOTICE for the license file:\n  " + licensePath + "\n  Expected location below:\n  "+ noticeFile.getAbsolutePath(),Project.MSG_ERR);      }    }  }  if (foundLicenses.isEmpty()) {    this.failures=true;    StringBuilder message=new StringBuilder();    message.append("MISSING LICENSE for the following file:\n  " + jarFile.getAbsolutePath() + "\n  Expected locations below:\n");    for (    File location : expectedLocations) {      message.append("  => ").append(location.getAbsolutePath()).append("\n");    }    log(message.toString(),Project.MSG_ERR);    return false;  }  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int x=getInt(stack);  if (Sage.WINDOWS_OS)   Sage.writeDwordValue(Sage.HKEY_LOCAL_MACHINE,"SOFTWARE\\Frey Technologies\\Common\\DSFilters\\MpegDeMux","AudioDelay",x);  return null;}  }
class C{  protected ModelAndView handleLogFile(HttpServletRequest request,HttpServletResponse response,LogDestination logDest) throws Exception {  return new ModelAndView(getViewName()).addObject("log",logDest);}  }
class C{  @Override public String findLibrary(String name){  String systemName=System.mapLibraryName(name);  ArrayList<Loader> loaders=getLoaders();  for (int i=0; i < loaders.size(); i++) {    Loader loader=loaders.get(i);    Path path=loader.getPath(systemName);    if (path != null && path.canRead()) {      return path.getNativePath();    }    path=loader.getPath("native/" + systemName);    if (path != null && path.canRead()) {      return path.getNativePath();    }  }  for (int i=0; i < _nativePath.size(); i++) {    Path path=_nativePath.get(i);    if (path.canRead())     return path.getNativePath();  }  return super.findLibrary(name);}  }
class C{  public void createVmAsync(final String projectId,final VmCreateSpec vmCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {  final String path=String.format("%s/%s/vms",getBasePath(),projectId);  createObjectAsync(path,serializeObjectAsJson(vmCreateSpec),responseCallback);}  }
class C{  private void skipToEndOfLine() throws IOException {  while (pos < limit || fillBuffer(1)) {    char c=buffer[pos++];    if (c == '\r' || c == '\n') {      break;    }  }}  }
class C{  public static String trim(final String value){  return (value == null ? null : value.trim());}  }
class C{  private void createGrid(){  if (attributeCombo1 == null || m_setting)   return;  Object attr1=attributeCombo1.getSelectedItem().getValue();  Object attr2=attributeCombo2.getSelectedItem().getValue();  if (attr1.equals(attr2)) {    FDialog.warn(m_WindowNo,"Same Attribute Selected",getTitle());    log.warning("Same Attribute Selected");    tabbox.setSelectedIndex(0);    return;  }  m_setting=true;  m_M_PriceList_Version_ID=0;  ListItem pl=pickPriceList.getSelectedItem();  if (pl != null)   m_M_PriceList_Version_ID=Integer.valueOf(pl.getValue().toString());  m_M_Warehouse_ID=0;  ListItem wh=pickWarehouse.getSelectedItem();  if (wh != null)   m_M_Warehouse_ID=Integer.valueOf(wh.getValue().toString());  int noOfCols=2;  int indexAttr1=0;  MAttributeValue[] xValues=null;  if (attr1 != null) {    int value=Integer.parseInt(attr1.toString());    for (int i=0; i < m_attributes.length; i++) {      if (m_attributes[i].getKeyNamePair().getKey() == value) {        xValues=m_attributes[i].getMAttributeValues();        indexAttr1=i;        break;      }    }  }  if (xValues != null)   noOfCols=xValues.length;  int noOfRows=2;  int indexAttr2=0;  MAttributeValue[] yValues=null;  if (attr2 != null) {    int value=Integer.parseInt(attr2.toString());    for (int i=0; i < m_attributes.length; i++) {      if (m_attributes[i].getKeyNamePair().getKey() == value) {        yValues=m_attributes[i].getMAttributeValues();        indexAttr2=i;        break;      }    }  }  if (yValues != null)   noOfRows=yValues.length;  gridView.getChildren().clear();  Rows rows=new Rows();  gridView.appendChild(rows);  log.info("Rows=" + noOfRows + " - Cols="+ noOfCols);  for (int rowIndex=0; rowIndex < noOfRows; rowIndex++) {    Row row=new Row();    row.setWidth("100%");    rows.appendChild(row);    for (int colIndex=0; colIndex < noOfCols; colIndex++) {      MAttributeValue xValue=null;      if (xValues != null)       xValue=xValues[colIndex];      MAttributeValue yValue=null;      if (yValues != null)       yValue=yValues[rowIndex];      if (rowIndex == 0 && colIndex == 0) {        Vbox descr=new Vbox();        descr.setWidth("100%");        if (xValues != null) {          Div div=new Div();          div.setAlign("right");          div.appendChild(new Label(m_attributes[indexAttr1].getName()));          descr.appendChild(div);        }        if (yValues != null)         descr.appendChild(new Label(m_attributes[indexAttr2].getName()));        row.appendChild(descr);      } else       if (rowIndex == 0) {        if (xValue != null) {          Div div=new Div();          div.setAlign("center");          div.appendChild(new Label(xValue.getName()));          row.appendChild(div);        } else         row.appendChild(new Label());      } else       if (colIndex == 0) {        if (yValue != null)         row.appendChild(new Label(yValue.getName())); else         row.appendChild(new Label());      } else {        row.appendChild(getGridElement(xValue,yValue));      }    }  }  tabbox.setSelectedIndex(1);  m_setting=false;}  }
class C{  public PropertyChangeSupport(Object sourceBean){  if (sourceBean == null) {    throw new NullPointerException("sourceBean == null");  }  this.sourceBean=sourceBean;}  }
class C{  public void removeAllUsers(){synchronized (this) {    allUsers.clear();    activeUser=null;    GoogleLoginPrefs.removeAllUsers();    notifyLoginStatusChange();  }}  }
class C{  protected void selectPreviousPossibleValue(){  int si;  if (comboBox.isPopupVisible()) {    si=listBox.getSelectedIndex();  } else {    si=comboBox.getSelectedIndex();  }  if (si > 0) {    listBox.setSelectedIndex(si - 1);    listBox.ensureIndexIsVisible(si - 1);    if (!isTableCellEditor) {      if (!(UIManager.getBoolean("ComboBox.noActionOnKeyNavigation") && comboBox.isPopupVisible())) {        comboBox.setSelectedIndex(si - 1);      }    }    comboBox.repaint();  }}  }
class C{  Expression eval(){  if (left.op == LONGVAL && right.op == INTVAL) {    return eval(((LongExpression)left).value,((IntExpression)right).value);  }  return super.eval();}  }
class C{  @SuppressWarnings("ConstantConditions") public void hardRefresh(){  if (repoState.hasSourceRepository()) {    List<VirtualFile> list=VfsUtil.markDirty(true,true,repoState.getSourceRepository().getRoot());    if (!list.isEmpty()) {      LocalFileSystem.getInstance().refreshFiles(list,false,true,null);    }  }}  }
class C{  public void unsetAttachments(){  this.attachments=null;}  }
class C{  public static Date dateFromHeaderString(String datstr){  SimpleDateFormat fmt=new SimpleDateFormat(HTTP_FORMAT,Locale.US);  ParsePosition zero=new ParsePosition(0);  fmt.setTimeZone(GMT_ZONE);  return (fmt.parse(datstr,zero));}  }
class C{  private static boolean strContains(Set<String> messages,String messageKey){  String key=messageKey;  do {    if (messages.contains(key)) {      return true;    }    int dot=key.indexOf('.');    if (dot < 0)     return false;    key=key.substring(dot + 1);  } while (true);}  }
class C{  public ManagedSSLGuacamoleSocket(String hostname,int port,Runnable socketClosedTask) throws GuacamoleException {  super(hostname,port);  this.socketClosedTask=socketClosedTask;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  protected void parseConfigParameters(Properties prop){  if (prop == null)   return;  Enumeration<?> e=prop.propertyNames();  while (e.hasMoreElements()) {    String key=(String)e.nextElement();    String configValue=null;    int lastPeriod=key.lastIndexOf(".");    String moduleName=key.substring(0,lastPeriod);    String configKey=key.substring(lastPeriod + 1);    String systemKey=System.getProperty(key);    if (systemKey != null) {      configValue=systemKey;    } else {      configValue=prop.getProperty(key);    }    IFloodlightModule mod=moduleNameMap.get(moduleName);    if (mod == null) {      logger.debug("Module {} not found or loaded. " + "Not adding configuration option {} = {}",new Object[]{moduleName,configKey,configValue});    } else {      logger.debug("Adding configuration option {} = {} for module {}",new Object[]{configKey,configValue,moduleName});      floodlightModuleContext.addConfigParam(mod,configKey,configValue);    }  }}  }
class C{  public void processFinished(){  ProverHelper.compareStepStatusComputations(proverJob);}  }
class C{  static protected int countMatches(final Graph g,final Resource s,final URI p,final Value o){  int n=0;  final Iterator<Statement> itr=g.match(s,p,o);  while (itr.hasNext()) {    itr.next();    n++;  }  return n;}  }
class C{  public static void closeQuietly(LineIterator iterator){  if (iterator != null) {    iterator.close();  }}  }
class C{  @DSComment("From safe class list") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.066 -0500",hash_original_method="83E6088E5FD422B34A78952B80516F81",hash_generated_method="D02F3B64A279C32A1CC10AD39F39AB60") public StringBuffer append(long l){  addTaint(l);  return this;}  }
class C{  private void validateVNXFileSMISProviderMandatoryDetails(StorageSystemUpdateRequestParam param){  if (param.getSmisProviderIP() != null) {    ArgValidator.checkFieldValidIP(param.getSmisProviderIP(),"smis_provider_ip");  }  if (param.getSmisUserName() != null) {    ArgValidator.checkFieldNotEmpty(param.getSmisUserName(),"smis_user_name");  }  if (param.getSmisPassword() != null) {    ArgValidator.checkFieldNotEmpty(param.getSmisPassword(),"smis_password");  }  if (param.getSmisPortNumber() != null) {    ArgValidator.checkFieldRange(param.getSmisPortNumber(),1,65535,"smis_port_number");  }}  }
class C{  public final int available() throws IOException {  return src.available();}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  private JavacHolder findCompiler(Path path){  if (testJavac.isPresent())   return testJavac.get();  Path dir=path.getParent();  return findConfig(dir).map(null).orElseThrow(null);}  }
class C{  public void clear(){  Arrays.fill(elements,0);  size=0;}  }
class C{  public static String padRight(String s,int len,char pad_ch){  if (s.length() >= len) {    return s;  } else {    StringBuilder sb=new StringBuilder();    int n=len - s.length();    sb.append(s);    for (int i=0; i < n; i++) {      sb.append(pad_ch);    }    return sb.toString();  }}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  startElement(elementNamespaceURI,elementLocalName,elementName,null);}  }
class C{  public ChunkedOutputStream(final SessionOutputBuffer out) throws IOException {  this(out,2048);}  }
class C{  private LuaDouble(double d){  this.v=d;}  }
class C{  final void initDocument(int documentNumber){  m_docHandle=documentNumber << DOCHANDLE_SHIFT;  nodes.writeSlot(0,DOCUMENT_NODE,-1,-1,0);  done=false;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X500Principal subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,convertName(subject),key,attributes,signingKey,provider);}  }
class C{  public Location(Location location){  if (location == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","constructor","missingLocation"));  }  this.latitude=location.latitude;  this.longitude=location.longitude;}  }
class C{  public void filter(Geometry g){  if (g instanceof Polygon) {    Polygon poly=(Polygon)g;    linework.add(poly.getExteriorRing());    for (int i=0; i < poly.getNumInteriorRing(); i++) {      linework.add(poly.getInteriorRingN(i));    }  }}  }
class C{  public Boolean isReportMissingObjectsInResults(){  return reportMissingObjectsInResults;}  }
class C{  protected static JdbcExecutor newExecutor(ReviewDb db) throws OrmException {  return new JdbcExecutor(((JdbcSchema)db).getConnection());}  }
class C{  public SipTransactionContext sendSipMessageAndWait(SipMessage message,long timeout,SipTransactionContext.INotifySipProvisionalResponse callback) throws NetworkException, PayloadException {  SipTransactionContext ctx=mSipInterface.sendSipMessageAndWait(message,callback);  ctx.waitResponse(timeout);  if (!(message instanceof SipRequest) || !ctx.isSipResponse()) {    return ctx;  }  String method=((SipRequest)message).getMethod();  SipResponse response=ctx.getSipResponse();  if (response == null) {    return ctx;  }  if (!Request.REGISTER.equals(method)) {    WarningHeader warn=(WarningHeader)response.getHeader(WarningHeader.NAME);    if (Response.FORBIDDEN == ctx.getStatusCode() && warn == null) {      mNetworkInterface.getRegistrationManager().restart();    }  }  if (!Request.INVITE.equals(method) && !Request.REGISTER.equals(method)) {    return ctx;  }  KeepAliveManager keepAliveManager=mNetworkInterface.getSipManager().getSipStack().getKeepAliveManager();  if (keepAliveManager == null) {    return ctx;  }  ListIterator<ViaHeader> iterator=response.getViaHeaders();  if (!iterator.hasNext()) {    keepAliveManager.setPeriod(mRcsSettings.getSipKeepAlivePeriod());    return ctx;  }  ViaHeader respViaHeader=iterator.next();  String keepStr=respViaHeader.getParameter("keep");  if (keepStr == null) {    keepAliveManager.setPeriod(mRcsSettings.getSipKeepAlivePeriod());    return ctx;  }  try {    long viaKeep=Integer.parseInt(keepStr) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE;    if (viaKeep > 0) {      keepAliveManager.setPeriod(viaKeep);    } else {      keepAliveManager.setPeriod(mRcsSettings.getSipKeepAlivePeriod());    }  } catch (  NumberFormatException e) {    keepAliveManager.setPeriod(mRcsSettings.getSipKeepAlivePeriod());  }  return ctx;}  }
class C{  protected DurationField(){  super();  this.setTimeZone(TimeZone.getTimeZone(ZONEID_UTC));  durationFormat.setTimeZone(TimeZone.getTimeZone(ZONEID_UTC));  additionalFormat.setTimeZone(TimeZone.getTimeZone(ZONEID_UTC));  durationFormat.setLenient(false);  additionalFormat.setLenient(false);  this.setResolution(Resolution.SECOND);  this.setDateFormat(DURATION_FORMAT_STIRNG);  this.addStyleName(CSS_STYLE_NAME);  this.addStyleName(ValoTheme.TEXTFIELD_TINY);  this.setWidth("100px");  this.setLocale(Locale.GERMANY);  this.addValueChangeListener(this);}  }
class C{  protected SSLRecordProtocol(HandshakeProtocol handshakeProtocol,AlertProtocol alertProtocol,SSLInputStream in,Appendable appData){  this.handshakeProtocol=handshakeProtocol;  this.handshakeProtocol.setRecordProtocol(this);  this.alertProtocol=alertProtocol;  this.alertProtocol.setRecordProtocol(this);  this.in=in;  this.appData=appData;}  }
class C{  public boolean closeSwipeIfNeed(){  if (mLastSm != null) {    mLastSm.close();    mLastSm=null;    return true;  }  return false;}  }
class C{  @Inline @Uninterruptible public static void scanObject(int code,Object object,TransitiveClosure trace){  scanObject(code,0,object,trace,false);}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,ImageObserver observer){  System.out.println("drawImage");  return true;}  }
class C{  public MetalBumps(int width,int height,Color newTopColor,Color newShadowColor,Color newBackColor){  setBumpArea(width,height);  setBumpColors(newTopColor,newShadowColor,newBackColor);}  }
class C{  protected Volume(){  this.volumeAssociations=new HashSet<>();}  }
class C{  public void testIsFirstUse() throws IOException {  String id=Long.toString((new Date()).getTime());  Profile project=new Profile(this.getName(),id,new File(this.workspace.toFile(),id));  JmriPreferencesProvider shared=JmriPreferencesProvider.findProvider(project.getPath(),true);  assertEquals(shared.isFirstUse(),true);  Preferences prefs=shared.getPreferences(this.getClass());  prefs.put("test","test");  try {    prefs.flush();  } catch (  BackingStoreException ex) {    assertNull(ex);  }  shared=new JmriPreferencesProvider(project.getPath(),true);  assertEquals(shared.isFirstUse(),false);}  }
class C{  protected LexicalUnit dimension(boolean positive,LexicalUnit prev){  try {    float sgn=(positive) ? 1 : -1;    String val=scanner.getStringValue();    int i;    loop:     for (i=0; i < val.length(); i++) {switch (val.charAt(i)) {default :        break loop;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '.':    }  }  int line=getLineNumber();  nextIgnoreSpaces();  return CSSLexicalUnit.createDimension(sgn * Float.parseFloat(val.substring(0,i)),val.substring(i),prev,line);} catch (NumberFormatException e) {  throw createCSSParseException("number.format");}}  }
class C{  public void addToDictionary(){  if (!getAutoComplete())   return;  if (dict == null) {    setUp();    this.dict=createDefaultDictionary();  }  dict.addEntry(getText().trim());}  }
class C{  public static boolean parseStatementModifier(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  if (((PerlBuilder)b).getPerlParser().parseStatementModifier(b,l)) {    return true;  }  PsiBuilder.Marker m=b.mark();  if (PerlParserImpl.statement_modifier(b,l)) {    IElementType tokenType=b.getTokenType();    if (((PerlBuilder)b).getPerlParser().getConsumableSemicolonTokens().contains(tokenType) || ((PerlBuilder)b).getPerlParser().getUnconsumableSemicolonTokens().contains(tokenType)) {      m.drop();      return true;    } else {      m.rollbackTo();      return false;    }  } else {    m.drop();    return false;  }}  }
class C{  public RedirectException(){  super();}  }
class C{  public boolean commitText(CharSequence text,int newCursorPosition){  if (DEBUG)   Log.v(TAG,"commitText " + text);  replaceText(text,newCursorPosition,false);  sendCurrentText();  return true;}  }
class C{  public T protocolVersion(String value){  setString(PROTOCOL_VERSION,value);  return (T)this;}  }
class C{  public static String toString(Object object) throws JSONException {  return toString(object,null);}  }
class C{  public AngularObject remove(String name,String noteId,String paragraphId){  return remove(name,noteId,paragraphId,true);}  }
class C{  public void testFilterMultipleBags() throws InvalidAdviceException {  BaggageAPIForTest baggage=new BaggageAPIForTest();  baggage.put("bag1",new Object[][]{{"v1","b1_v2"},{"b1_v3","v1"},{"v2","b1_v5"}});  baggage.put("bag2",new Object[][]{{"b2_v1","v2"},{"b2_v3","v1"},{"b2_v5","v3"}});  EmitAPIForTest results=new EmitAPIForTest();  Advice advice=AdviceTestUtils.newAdvice().observe("a","b").unpack("bag1","c","d").unpack("bag2","e","f").where("\"{}\"==\"{}\"","c","f").emit("test1","a","b","c","d","e","f").build(baggage,results);  assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);  advice.advise("vva","vvb");  results.expectTuple("vva","vvb","v2","b1_v5","b2_v1","v2");  results.expectTuple("vva","vvb","v1","b1_v2","b2_v3","v1");  results.check();  assertTrue("Expect 2 output tuple emitted",results.emitted.size() == 2);}  }
class C{  public static AbRefreshDialogFragment newInstance(int style,int theme){  AbRefreshDialogFragment f=new AbRefreshDialogFragment();  Bundle args=new Bundle();  args.putInt("style",style);  args.putInt("theme",theme);  f.setArguments(args);  return f;}  }
class C{  public DrawerBuilder inflateMenu(@MenuRes int menuRes){  MenuInflater menuInflater=new SupportMenuInflater(mActivity);  MenuBuilder mMenu=new MenuBuilder(mActivity);  menuInflater.inflate(menuRes,mMenu);  addMenuItems(mMenu,false);  return this;}  }
class C{  private CFollowInDumpMenu(){}  }
class C{  public double matthewsCorrelationCoefficient(int classIndex){  return m_delegate.matthewsCorrelationCoefficient(classIndex);}  }
class C{  public void paintComponent(Graphics g){  g.setColor(getBackground());  g.fillRect(0,0,getWidth(),getHeight());  g.setColor(currentColor);  g.fillOval(0,0,getWidth(),getHeight());}  }
class C{  public static Drawable rect(){  return Drawables.darkColor();}  }
class C{  public final CC growY(){  ver.setGrow(ResizeConstraint.WEIGHT_100);  return this;}  }
class C{  public Answer(Lifeline caller,Lifeline callee,SequenceDiagram diagram,MessageData data,ForwardMessage forwardMsg){  super(caller,callee,diagram,data);  forward=forwardMsg;}  }
class C{  public ForgeChunk_All(FaweQueue parent,int x,int z){  super(parent,x,z);}  }
class C{  public static CoordinateSequence projectToXY(CoordinateSequence seq){  return new AxisPlaneCoordinateSequence(seq,XY_INDEX);}  }
class C{  protected boolean[] weightedInstancesHandler(){  boolean[] result=new boolean[2];  print("weighted instances clusterer...");  if (m_Clusterer instanceof WeightedInstancesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  protected HttpURLConnection post(String url,String body) throws IOException {  return post(url,"application/x-www-form-urlencoded;charset=UTF-8",body);}  }
class C{  public void i(Object str){  if (debug) {    if (logLevel <= Log.INFO) {      String name=getFunctionName();      if (name != null) {        Log.i(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.i(tag,str.toString());      }    }  }}  }
class C{  public void loadLibrary(String libName){  loadLibrary0(libName,RVMClass.getClassLoaderFromStackFrame(1),true);}  }
class C{  public SharedPreferences putFloat(String key,float value){  editor.putFloat(key,value);  return this;}  }
class C{  public AsyncResult CallAsync(CallRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public Object compiled(){  return compiled;}  }
class C{  public QuantitySpinnerAdapter(Context context,List<ProductQuantity> quantities){  super(context,layoutID,quantities);  this.quantities=quantities;  this.layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}  }
class C{  public static void main(final String[] args) throws Exception {  Banner.banner();  boolean nothing=false;  boolean includeInferred=false;  RDFFormat format=null;  File propertyFile=null;  File outdir=new File(".");  final List<String> namespaces=new LinkedList<String>();  int i=0;  for (; i < args.length; ) {    final String s=args[i];    if (!s.startsWith("-")) {      break;    }    i++;    if (s.equals("-n")) {      nothing=true;    } else     if (s.equals("-help")) {      usage();      System.exit(0);    } else     if (s.equals("-format")) {      format=RDFFormat.valueOf(args[i++]);    } else     if (s.equals("-includeInferred")) {      includeInferred=true;    } else     if (s.equals("-outdir")) {      outdir=new File(args[i++]);    } else {      System.err.println("Unknown option: " + s);      usage();      System.exit(1);    }  }  if (i == args.length) {    usage();    System.exit(1);  } else {    propertyFile=new File(args[i++]);    if (!propertyFile.exists()) {      System.err.println("No such file: " + propertyFile);      System.exit(1);    }  }  final Properties properties=loadProperties(propertyFile);{    final String[] overrides=new String[]{com.bigdata.journal.Options.FILE};    for (    String s : overrides) {      if (System.getProperty(s) != null) {        final String v=System.getProperty(s);        System.out.println("Using: " + s + "="+ v);        properties.setProperty(s,v);      }    }  }  final Journal indexManager=new Journal(properties);  try {    final long commitTime=indexManager.getLastCommitTime();    if (i == args.length) {      namespaces.addAll(getNamespaces(indexManager));    } else {      for (; i < args.length; ) {        final String namespace=args[i++];        final ILocatableResource<?> kb=indexManager.getResourceLocator().locate(namespace,commitTime);        if (kb == null) {          throw new RuntimeException("No such namespace: " + namespace);        }        if (!(kb instanceof AbstractTripleStore)) {          throw new RuntimeException("Not a KB: " + namespace);        }        namespaces.add(namespace);      }    }    for (    String namespace : namespaces) {      final BigdataSail sail=new BigdataSail(namespace,indexManager);      try {        sail.initialize();        final BigdataSailConnection conn=sail.getReadOnlyConnection(commitTime);        try {          final File kbdir=new File(outdir,munge(namespace));          RDFFormat fmt=format;          if (fmt == null) {            if (conn.getTripleStore().isStatementIdentifiers()) {              fmt=RDFFormat.RDFXML;            } else             if (conn.isQuads()) {              fmt=RDFFormat.TRIX;            } else {              fmt=RDFFormat.RDFXML;            }          }          System.out.println("Exporting " + namespace + " as "+ fmt.getName()+ " on "+ kbdir);          if (!nothing) {            new ExportKB(conn,kbdir,fmt,includeInferred).export();          }        }  finally {          conn.close();        }      }  finally {        sail.shutDown();      }    }    System.out.println("Done");  }  finally {    indexManager.close();  }}  }
class C{  public void throwRuntime(String reason,Optional<Throwable> t){  throw func.apply(Pair.of(reason,t));}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer(this.toBriefString());  buffer.append(":\n  ");  for (Iterator i=exceptionsIncluded.iterator(); i.hasNext(); ) {    buffer.append('+');    Object o=i.next();    buffer.append(o == null ? "null" : o.toString());  }  for (Iterator i=exceptionsExcluded.iterator(); i.hasNext(); ) {    buffer.append('-');    buffer.append(i.next().toString());  }  return buffer.toString();}  }
class C{  public void validate(X509Certificate cert,Map<String,String> authStatExt) throws CertificateRevocationCheckException, IdmCertificateRevokedException, InvalidArgumentException, CertificatePathBuildingException {  if (null == cert) {    throw new InvalidArgumentException("No certs to validate.");  }  if (logger.isDebugEnabled()) {    logger.debug("Certificate policy: " + this.certPolicy.toString());    logger.debug("Checking revocation for certificate: " + cert.getSubjectDN());  }  long startTime=System.nanoTime();  CertPath certPath=buildCertPath(cert);  authStatExt.put("buildCertPath",String.format("%d Ms",TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime)));  startTime=System.nanoTime();  validateCertPath(certPath);  authStatExt.put("validateCertPath",String.format("%d Ms",TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime)));  logger.info("Successfully validated client certificate : " + cert.getSubjectDN());}  }
class C{  public int readMapStart() throws IOException {  return read();}  }
class C{  public void append(int key,int value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    int[] nvalues=new int[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  public List<QueryStat> outstandingQueries(){  return _outstandingQueryList;}  }
class C{  public void addObservations(int[] states,int destinationIndex,int[] groupOffsets){  int jointValue=0;  for (int i=0; i < numVars; i++) {    int thisValue=states[(destinationIndex + groupOffsets[i] + states.length) % states.length];    marginalCounts[i][thisValue]++;    jointValue*=base;    jointValue+=thisValue;  }  jointCount[jointValue]++;  observations++;}  }
class C{  protected void sequence_ObjectLiteral(ISerializationContext context,ObjectLiteral semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static AuthenticatorDescription newKey(String type){  if (type == null)   throw new IllegalArgumentException("type cannot be null");  return new AuthenticatorDescription(type);}  }
class C{  public final void update(byte[] input,int offset,int len) throws IllegalStateException {  chooseFirstProvider();  if (initialized == false) {    throw new IllegalStateException("MAC not initialized");  }  if (input != null) {    if ((offset < 0) || (len > (input.length - offset)) || (len < 0))     throw new IllegalArgumentException("Bad arguments");    spi.engineUpdate(input,offset,len);  }}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.UNARY_EXPRESSION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void writeTagDict(final Map<String,Collection<Category>> tagDict,final File file) throws FileNotFoundException, UnsupportedEncodingException {  final PrintWriter writer=new PrintWriter(file,"UTF-8");  for (  final java.util.Map.Entry<String,Collection<Category>> entry : tagDict.entrySet()) {    writer.print(entry.getKey());    for (    final Category c : entry.getValue()) {      writer.print("\t" + c.toString());    }    writer.println();  }  writer.close();}  }
class C{  public static boolean is10Inches(Context c){  int dp=c.getResources().getConfiguration().smallestScreenWidthDp;  return dp >= 720;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.LESS_OP___LESS_OP_1:    setLessOp_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private static void init() throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException {  String vmVendor=System.getProperty("java.vm.vendor");  if (vmVendor != null && (vmVendor.contains("Sun Microsystems") || vmVendor.contains("Apple Computer") || vmVendor.contains("Apple Inc.")|| vmVendor.contains("IBM Corporation"))) {    reflectionFactory=getReflectionFactory();    String vmVer=System.getProperty("java.runtime.version");    Class[] paramTypes;    if (vmVer.startsWith("1.4")) {      paramTypes=new Class[]{Field.class};    } else {      paramTypes=new Class[]{Field.class,Boolean.TYPE};    }    newFieldAccessor=reflectionFactory.getClass().getMethod("newFieldAccessor",paramTypes);    get=newFieldAccessor.getReturnType().getMethod("get",Object.class);  }}  }
class C{  public void expand(){  if (body != null) {    setActive(true);    body.setDisplay(Display.BLOCK);  }}  }
class C{  public int size(){  Record record=client.operate(this.policy,this.key,ListOperation.size(this.binNameString));  if (record != null) {    return record.getInt(this.binNameString);  }  return 0;}  }
class C{  @Override public void init(){  String at=getParameter("alg");  if (at == null) {    at="BubbleSort";  }  algName=at + "Algorithm";  scramble();  resize(100,100);  addMouseListener(this);}  }
class C{  private int doRegister(int registrations){  long adjust=((long)registrations << PARTIES_SHIFT) | registrations;  final Phaser parent=this.parent;  int phase;  for (; ; ) {    long s=(parent == null) ? state : reconcileState();    int counts=(int)s;    int parties=counts >>> PARTIES_SHIFT;    int unarrived=counts & UNARRIVED_MASK;    if (registrations > MAX_PARTIES - parties)     throw new IllegalStateException(badRegister(s));    phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     break;    if (counts != EMPTY) {      if (parent == null || reconcileState() == s) {        if (unarrived == 0)         root.internalAwaitAdvance(phase,null); else         if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s + adjust))         break;      }    } else     if (parent == null) {      long next=((long)phase << PHASE_SHIFT) | adjust;      if (UNSAFE.compareAndSwapLong(this,stateOffset,s,next))       break;    } else {synchronized (this) {        if (state == s) {          phase=parent.doRegister(1);          if (phase < 0)           break;          while (!UNSAFE.compareAndSwapLong(this,stateOffset,s,((long)phase << PHASE_SHIFT) | adjust)) {            s=state;            phase=(int)(root.state >>> PHASE_SHIFT);          }          break;        }      }    }  }  return phase;}  }
class C{  private void logSearchTerm(String event,String searchText){  if (searchText.length() > 50) {    searchText=searchText.substring(0,50) + "[...]";  }  ActionStatisticsCollector.INSTANCE.log(ActionStatisticsCollector.TYPE_OPERATOR_SEARCH,event,searchText);}  }
class C{  public static Builder builder(JoinRequest request){  return new Builder(request);}  }
class C{  public void doRun(final Tradestrategy tradestrategy){  try {    if (tradestrategy.isDirty()) {      this.setStatusBarMessage("Please save or refresh before running strategy ...\n",BasePanel.WARNING);    } else {      Tradingdays tradingdays=new Tradingdays();      Tradingday tradingday=Tradingday.newInstance(tradestrategy.getTradingday().getOpen());      tradingday.setIdTradingDay(Integer.MAX_VALUE);      tradingday.addTradestrategy(tradestrategy);      tradingdays.add(tradingday);      runStrategy(tradingdays,false);    }  } catch (  Exception ex) {    this.setErrorMessage("Error running Trade Strategies.",ex.getMessage(),ex);  }}  }
class C{  public String toString(){  String s="";  for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      s=s + cells[c][r];      if (c < cells.length - 1) {        s=s + "|";      }    }    if (r < cells[0].length - 1) {      s=s + "\n-+-+-\n";    }  }  return s;}  }
class C{  public void notice(String target,String notice){  checkArgument(StringUtils.isNotBlank(target),"Target '%s' is blank",target);  bot.sendRaw().rawLineSplit("NOTICE " + target + " :",notice);}  }
class C{  private void checkQtyAvailable(Properties ctx,GridTab mTab,int WindowNo,int M_Product_ID,BigDecimal MovementQty){  if (M_Product_ID != 0) {    MProduct product=MProduct.get(ctx,M_Product_ID);    if (product.isStocked()) {      if (MovementQty == null)       MovementQty=(BigDecimal)mTab.getValue("MovementQty");      int M_Locator_ID=Env.getContextAsInt(ctx,WindowNo,"M_Locator_ID");      if (M_Locator_ID <= 0)       return;      int M_AttributeSetInstance_ID=Env.getContextAsInt(ctx,WindowNo,"M_AttributeSetInstance_ID");      BigDecimal available=MStorage.getQtyAvailable(0,M_Locator_ID,M_Product_ID,M_AttributeSetInstance_ID,null);      if (available == null)       available=Env.ZERO;      if (available.signum() == 0)       mTab.fireDataStatusEEvent("NoQtyAvailable","0",false); else       if (available.compareTo(MovementQty) < 0)       mTab.fireDataStatusEEvent("InsufficientQtyAvailable",available.toString(),false);    }  }}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public blockquote addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static long[] insert(long[] dest,long[] src,int offset){  long[] temp=new long[dest.length + src.length];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset,temp,src.length + offset,dest.length - offset);  return temp;}  }
class C{  @Override protected void finalize() throws Throwable {  mName=null;  mValues=null;  super.finalize();}  }
class C{  @SuppressWarnings("ConstantConditions") public static <T>void assertOneToOne(Iterable<T> it,IgnitePredicate<T>... ps){  Collection<IgnitePredicate<T>> ps0=new ArrayList<>(Arrays.asList(ps));  Collection<T2<IgnitePredicate<T>,T>> passed=new ArrayList<>();  for (  T elem : it) {    for (    T2<IgnitePredicate<T>,T> p : passed) {      if (p.get1().apply(elem))       throw new AssertionError("Two elements match one predicate [elem1=" + p.get2() + ", elem2="+ elem+ ", pred="+ p.get1()+ ']');    }    IgnitePredicate<T> matched=null;    for (    IgnitePredicate<T> p : ps0) {      if (p.apply(elem)) {        if (matched != null)         throw new AssertionError("Element matches more than one predicate [elem=" + elem + ", pred1="+ p+ ", pred2="+ matched+ ']');        matched=p;      }    }    if (matched == null)     throw new AssertionError("The element does not match [elem=" + elem + ", numRemainingPreds="+ ps0.size()+ ']');    ps0.remove(matched);    passed.add(new T2<>(matched,elem));  }}  }
class C{  public static boolean isContentTypeId(IDOMNode node,String contentTypeId){  if (contentTypeId == null) {    return false;  }  String nodeContentTypeId=getContentTypeId(node);  return contentTypeId.equals(nodeContentTypeId);}  }
class C{  public static String readFileToString(File file,String encoding) throws IOException {  return readFileToString(file,Charsets.toCharset(encoding));}  }
class C{  public ListMultimap(int initialCapacity){  this(new LinkedHashMap<K,List<V>>(initialCapacity));}  }
class C{  public static boolean isEffective(String string){  if ((string == null) || ("".equals(string)) || (" ".equals(string))|| ("null".equals(string))|| ("\n".equals(string)))   return false; else   return true;}  }
class C{  public static String IsAre(final int quantity){  return makeUpperCaseWord(isare(quantity));}  }
class C{  public Set<String> addUserInput(String userInput){  Assignment a=new Assignment(settings.userInput,userInput);  return addContent(a);}  }
class C{  public void encodeAndSign(X500Name subject,Signature signature) throws CertificateException, IOException, SignatureException {  DerOutputStream out, scratch;  byte[] certificateRequestInfo;  byte[] sig;  if (encoded != null)   throw new SignatureException("request is already signed");  this.subject=subject;  scratch=new DerOutputStream();  scratch.putInteger(BigInteger.ZERO);  subject.encode(scratch);  scratch.write(subjectPublicKeyInfo.getEncoded());  attributeSet.encode(scratch);  out=new DerOutputStream();  out.write(DerValue.tag_Sequence,scratch);  certificateRequestInfo=out.toByteArray();  scratch=out;  signature.update(certificateRequestInfo,0,certificateRequestInfo.length);  sig=signature.sign();  AlgorithmId algId=null;  try {    algId=AlgorithmId.get(signature.getAlgorithm());  } catch (  NoSuchAlgorithmException nsae) {    throw new SignatureException(nsae);  }  algId.encode(scratch);  scratch.putBitString(sig);  out=new DerOutputStream();  out.write(DerValue.tag_Sequence,scratch);  encoded=out.toByteArray();}  }
class C{  public void testInvoke(){  testInvoke(mainPool());}  }
class C{  public InstalledAppsAdapter(Context c,Boolean includeOwnApp,Boolean showHiddenApps){  mContext=c;  mIncludeOwnApp=includeOwnApp;  mShowHiddenApps=showHiddenApps;  mDefaultLauncherPackage=AppStarter.getLauncherPackageName(mContext);  mSettings=SettingsProvider.getInstance(mContext);  loadInstalledApps();}  }
class C{  public boolean isStandard(){  return !TextUtils.isEmpty(text) || resId != -1;}  }
class C{  public CCodeNodeParser(final ICodeNodeProvider dataProvider,final List<? extends INaviModule> modules,final SQLProvider sqlProvider){  this.dataProvider=Preconditions.checkNotNull(dataProvider,"IE00645: Data provider argument can't be null");  this.sqlProvider=Preconditions.checkNotNull(sqlProvider,"IE00646: SQL provider argument can't be null");  Preconditions.checkNotNull(modules,"IE01664: modules argument can not be null");  for (  final INaviModule module : modules) {    this.modules.put(module.getConfiguration().getId(),module);  }}  }
class C{  void registerEventHooks(){  view.addDrawDecorator(processAnnotationDrawer,RenderPhase.ANNOTATIONS);  view.addDrawDecorator(operatorAnnotationDrawer,RenderPhase.OPERATOR_ANNOTATIONS);  view.addDrawDecorator(workflowAnnotationDrawerHighlight,RenderPhase.OVERLAY);  view.addDrawDecorator(opAnnotationIconDrawer);  view.getOverviewPanelDrawer().addDecorator(processAnnotationDrawer,RenderPhase.ANNOTATIONS);  view.getOverviewPanelDrawer().addDecorator(operatorAnnotationDrawer,RenderPhase.OPERATOR_ANNOTATIONS);  hook.registerDecorators();  view.addComponentListener(colorPanelMover);  ApplicationFrame.getApplicationFrame().addComponentListener(colorPanelMover);}  }
class C{  public Distance(com.google.maps.model.Distance distance){  this.distance=distance;}  }
class C{  public void addDigicoreVehicle(DigicoreVehicle vehicle){  if (vehicles.containsKey(vehicle.getId())) {    throw new IllegalArgumentException("There is already a vehicle with Id " + vehicle.getId().toString() + " in the population.");  }  this.vehicles.put(vehicle.getId(),vehicle);  counter++;  if (this.counter % this.nextMsg == 0) {    nextMsg*=2;    printVehicleCount();  }}  }
class C{  private Coordinate checkShellInsideHole(LinearRing shell,LinearRing hole,GeometryGraph graph){  Coordinate[] shellPts=shell.getCoordinates();  Coordinate[] holePts=hole.getCoordinates();  Coordinate shellPt=findPtNotNode(shellPts,hole,graph);  if (shellPt != null) {    boolean insideHole=CGAlgorithms.isPointInRing(shellPt,holePts);    if (!insideHole) {      return shellPt;    }  }  Coordinate holePt=findPtNotNode(holePts,shell,graph);  if (holePt != null) {    boolean insideShell=CGAlgorithms.isPointInRing(holePt,shellPts);    if (insideShell) {      return holePt;    }    return null;  }  Assert.shouldNeverReachHere("points in shell and hole appear to be equal");  return null;}  }
class C{  @Override public void actionPerformed(ActionEvent arg0){  String line=textField.getText();  textField.setText("");  ChatLineParser.parseAndHandle(line);  this.repaint();}  }
class C{  public void addPart(String key,File file){  addPart(key,file,null);}  }
class C{  public Set<String> allowedProperties(){  return properties.keySet();}  }
class C{  protected void displayImageFromResource(int resID,ImageView imageView){  if (resID > 0 && imageView != null) {    imageView.setImageResource(resID);  }}  }
class C{  public Socket accept() throws IOException {  Socket socket=super.accept();  BufferedInputStream in=new BufferedInputStream(socket.getInputStream());  RMIMasterSocketFactory.proxyLog.log(Log.BRIEF,"socket accepted (checking for POST)");  in.mark(4);  boolean isHttp=(in.read() == 'P') && (in.read() == 'O') && (in.read() == 'S')&& (in.read() == 'T');  in.reset();  if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.BRIEF)) {    RMIMasterSocketFactory.proxyLog.log(Log.BRIEF,(isHttp ? "POST found, HTTP socket returned" : "POST not found, direct socket returned"));  }  if (isHttp)   return new HttpReceiveSocket(socket,in,null); else   return new WrappedSocket(socket,in,null);}  }
class C{  private static void fixTypes(MethodNode mth,InsnNode insn,LiteralArg litArg){  DexNode dex=mth.dex();  PostTypeInference.process(mth,insn);switch (insn.getType()) {case CONST:    insn.getArg(0).merge(dex,insn.getResult());  break;case MOVE:insn.getResult().merge(dex,insn.getArg(0));insn.getArg(0).merge(dex,insn.getResult());break;case IPUT:case SPUT:IndexInsnNode node=(IndexInsnNode)insn;insn.getArg(0).merge(dex,((FieldInfo)node.getIndex()).getType());break;case IF:{InsnArg arg0=insn.getArg(0);InsnArg arg1=insn.getArg(1);if (arg0 == litArg) {arg0.merge(dex,arg1);} else {arg1.merge(dex,arg0);}break;}case CMP_G:case CMP_L:InsnArg arg0=insn.getArg(0);InsnArg arg1=insn.getArg(1);if (arg0 == litArg) {arg0.merge(dex,arg1);} else {arg1.merge(dex,arg0);}break;case RETURN:if (insn.getArgsCount() != 0) {insn.getArg(0).merge(dex,mth.getReturnType());}break;case INVOKE:InvokeNode inv=(InvokeNode)insn;List<ArgType> types=inv.getCallMth().getArgumentsTypes();int count=insn.getArgsCount();int k=types.size() == count ? 0 : -1;for (int i=0; i < count; i++) {InsnArg arg=insn.getArg(i);if (!arg.getType().isTypeKnown()) {ArgType type;if (k >= 0) {type=types.get(k);} else {type=mth.getParentClass().getClassInfo().getType();}arg.merge(dex,type);}k++;}break;case ARITH:litArg.merge(dex,insn.getResult());break;case APUT:case AGET:if (litArg == insn.getArg(1)) {litArg.merge(dex,ArgType.INT);}break;case NEW_ARRAY:if (litArg == insn.getArg(0)) {litArg.merge(dex,ArgType.INT);}break;default :break;}}  }
class C{  private void computePercentBusyAverages(Long numeratorDelta,Long denomDelta,Long iopsDelta,StringMap dbMetrics,String nativeGuid,String name,Long sampleTime,StorageSystem system){  Long avgCountValue=MetricsKeys.getLong(MetricsKeys.avgCount,dbMetrics);  Long avgStartTimeValue=MetricsKeys.getLong(MetricsKeys.avgStartTime,dbMetrics);  Double avgPercentBusyValue=MetricsKeys.getDouble(MetricsKeys.avgPercentBusy,dbMetrics);  Double emaPercentBusy=MetricsKeys.getDouble(MetricsKeys.emaPercentBusy,dbMetrics);  Double percentBusy=(numeratorDelta * 100.0 / denomDelta);  if (percentBusy < 0.0) {    _log.error(String.format("Percent busy negative, num %d denom %d",numeratorDelta,denomDelta));    return;  }  if (percentBusy > 100.0) {    percentBusy=100.0;  }  if (avgPercentBusyValue.isNaN() || avgPercentBusyValue.isInfinite()) {    _log.error("avgPercentBusyValue invalid: " + avgPercentBusyValue.toString());    avgPercentBusyValue=percentBusy;  }  Double avgPercentBusy=(1.0 / (avgCountValue + 1.0)) * percentBusy + ((double)avgCountValue / (avgCountValue + 1.0)) * avgPercentBusyValue;  Long currentTime=System.currentTimeMillis();  Long averagePeriod=getMinutesToAverage(DiscoveredDataObject.Type.valueOf(system.getSystemType())) * MSEC_PER_MIN;  avgCountValue++;  if ((currentTime - avgStartTimeValue) > averagePeriod) {    _log.debug("Resetting average for: " + nativeGuid + " "+ name);    avgCountValue=0L;    MetricsKeys.putLong(MetricsKeys.avgStartTime,currentTime,dbMetrics);    double emaFactor=getEmaFactor(DiscoveredDataObject.Type.valueOf(system.getSystemType()));    if (emaFactor > 1.0) {      emaFactor=1.0;    }    if (emaPercentBusy.isNaN() || emaPercentBusy.isInfinite() || emaPercentBusy < 0.0) {      _log.error("emaPercentBusy invalid: " + emaPercentBusy.toString());      emaPercentBusy=avgPercentBusy;    }    emaPercentBusy=avgPercentBusy * emaFactor + (1.0 - emaFactor) * emaPercentBusy;    MetricsKeys.putDouble(MetricsKeys.emaPercentBusy,emaPercentBusy,dbMetrics);  }  MetricsKeys.putLong(MetricsKeys.avgCount,avgCountValue,dbMetrics);  MetricsKeys.putDouble(MetricsKeys.avgPercentBusy,avgPercentBusy,dbMetrics);  MetricsKeys.putLong(MetricsKeys.lastSampleTime,currentTime,dbMetrics);  Date sampleDate=new Date(sampleTime);  _log.info(String.format("%s (%s): numDelta %d denomDelta %d iops %d percentBusy %f avgPercentBusy %f emaPercentbusy %f avgCount %d sampleTime %s",name,nativeGuid,numeratorDelta,denomDelta,iopsDelta,percentBusy,avgPercentBusy,emaPercentBusy,avgCountValue,sampleDate.toString()));}  }
class C{  protected void onChanged(){}  }
class C{  public static double cos(double a){  return StrictMath.cos(a);}  }
class C{  public Name(DNSInput in) throws WireParseException {  int len, pos;  boolean done=false;  byte[] label=new byte[MAXLABEL + 1];  boolean savedState=false;  while (!done) {    len=in.readU8();switch (len & LABEL_MASK) {case LABEL_NORMAL:      if (getlabels() >= MAXLABELS)       throw new WireParseException("too many labels");    if (len == 0) {      append(emptyLabel,0,1);      done=true;    } else {      label[0]=(byte)len;      in.readByteArray(label,1,len);      append(label,0,1);    }  break;case LABEL_COMPRESSION:pos=in.readU8();pos+=((len & ~LABEL_MASK) << 8);if (Options.check("verbosecompression")) System.err.println("currently " + in.current() + ", pointer to "+ pos);if (pos >= in.current() - 2) throw new WireParseException("bad compression");if (!savedState) {in.save();savedState=true;}in.jump(pos);if (Options.check("verbosecompression")) System.err.println("current name '" + this + "', seeking to "+ pos);break;default :throw new WireParseException("bad label type");}}if (savedState) {in.restore();}}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int x=0; x < this.getSeriesCount(); x++) {    CommodityChannelIndexSeries series=this.getSeries(x);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  private void checkConnection(){  try {    Transport transport=getTransport();    transport.connect(smptHost,smptPort,smptUser,smptPassword);    transport.close();    log.info("|-eMail Service active and connected...");    connected=true;  } catch (  AuthenticationFailedException e) {    log.warn("|-eMail Service was not able to connect! Authentication failed!");    connected=false;  }catch (  MessagingException e) {    log.warn("|-eMail Service was not able to connect! Check connection settings!");    connected=false;  }}  }
class C{  public static final HashSet readSetXml(InputStream in) throws XmlPullParserException, IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (HashSet)readValueXml(parser,new String[1]);}  }
class C{  public void testGetQueryParametersEmptyValue(){  assertEquals(Arrays.asList(""),Uri.parse("http://foo/path?abc").getQueryParameters("abc"));  assertEquals(Arrays.asList(""),Uri.parse("http://foo/path?foo=bar&abc").getQueryParameters("abc"));  assertEquals(Arrays.asList(""),Uri.parse("http://foo/path?abcd=abc&abc").getQueryParameters("abc"));  assertEquals(Arrays.asList("a","",""),Uri.parse("http://foo/path?abc=a&abc=&abc").getQueryParameters("abc"));  assertEquals(Arrays.asList("a","",""),Uri.parse("http://foo/path?abc=a&abc=&abc=").getQueryParameters("abc"));}  }
class C{  public void stop() throws IOException {  writeCode(STOP);}  }
class C{  public void removeLifeline(String name){  if (lifelineMap.remove(name) == null) {    throw new IllegalArgumentException("lifeline " + name + " should be removed, but does not exist");  }}  }
class C{  private boolean validateAndUpdateStorageGroupPolicyAndLimits(StorageSystem storage,ExportMask exportMask,String childGroupName,List<URI> volumeURIs,VirtualPool newVirtualPool,Set<String> phantomSGNames,TaskCompleter taskCompleter) throws WBEMException, Exception {  boolean policyUpdated=false;  boolean isVmax3=storage.checkIfVmax3();  _log.info("Checking on Storage Group {}",childGroupName);  WBEMClient client=_helper.getConnection(storage).getCimClient();  String newPolicyName=ControllerUtils.getFastPolicyNameFromVirtualPool(_dbClient,storage,newVirtualPool);  if (isVmax3) {    newPolicyName=_helper.getVMAX3FastSettingForVolume(volumeURIs.get(0),newPolicyName);  }  StorageGroupPolicyLimitsParam newVirtualPoolPolicyLimits=new StorageGroupPolicyLimitsParam(newPolicyName,newVirtualPool.getHostIOLimitBandwidth(),newVirtualPool.getHostIOLimitIOPs(),newVirtualPool.getCompressionEnabled(),storage);  CIMObjectPath childGroupPath=_cimPath.getMaskingGroupPath(storage,childGroupName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);  if (!isVmax3 && !phantomSGNames.isEmpty() && !_helper.isFastPolicy(_helper.getAutoTieringPolicyNameAssociatedWithVolumeGroup(storage,childGroupPath))&& !_helper.isCascadedSG(storage,childGroupPath)) {    _log.info("**** Phantom Storage Group ****");    Map<String,List<URI>> volumeGroup=new HashMap<String,List<URI>>();    List<URI> volumeURIsOfNonFASTSG=new ArrayList<URI>();    volumeURIsOfNonFASTSG.addAll(volumeURIs);    for (    String phantomSGName : phantomSGNames) {      List<URI> volURIs=_helper.findVolumesInStorageGroup(storage,phantomSGName,volumeURIs);      if (!volURIs.isEmpty()) {        volumeGroup.put(phantomSGName,volURIs);        volumeURIsOfNonFASTSG.removeAll(volURIs);      }    }    if (!volumeURIsOfNonFASTSG.isEmpty()) {      volumeGroup.put(childGroupName,volumeURIsOfNonFASTSG);    }    for (    Entry<String,List<URI>> sgNameToVolumes : volumeGroup.entrySet()) {      String sgName=sgNameToVolumes.getKey();      List<URI> volumesInSG=sgNameToVolumes.getValue();      CIMObjectPath sgPath=_cimPath.getMaskingGroupPath(storage,sgName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);      boolean forceFlag=false;      for (      URI volURI : volumesInSG) {        if (!forceFlag) {          forceFlag=ExportUtils.useEMCForceFlag(_dbClient,volURI);        }      }      String currentPolicyName=_helper.getAutoTieringPolicyNameAssociatedWithVolumeGroup(storage,sgPath);      _log.info("FAST policy name associated with Storage Group {} : {}",sgName,currentPolicyName);      if (!_helper.isFastPolicy(currentPolicyName)) {        addVolumesToPhantomStorageGroup(storage,exportMask,volumesInSG,newPolicyName,childGroupName,taskCompleter,forceFlag);      } else {        _log.info("Checking on Phantom Storage Group {}",sgName);        if (isGivenVolumeListSameAsInStorageGroup(storage,sgPath,volumesInSG)) {          _log.info("Changing Policy on Phantom Storage Group {} since it is requested " + "for all the volumes in the Group.",sgName);          if (!currentPolicyName.equalsIgnoreCase(newPolicyName)) {            if (_helper.isFastPolicy(currentPolicyName)) {              _helper.removeVolumeGroupFromAutoTieringPolicy(storage,sgPath);            }            if (_helper.isFastPolicy(newPolicyName)) {              _log.info("Adding Storage Group {} to FAST Policy {}",sgName,newPolicyName);              addVolumeGroupToAutoTieringPolicy(storage,newPolicyName,sgPath,taskCompleter);              StorageGroupPolicyLimitsParam phantomStorageGroupPolicyLimitsParam=new StorageGroupPolicyLimitsParam(newPolicyName);              String newSGName=generateNewNameForPhantomSG(storage,childGroupName,phantomStorageGroupPolicyLimitsParam);              _helper.updateStorageGroupName(client,sgPath,newSGName);            }          } else {            _log.info("Current and new policy names are same '{}'." + " No need to update it on SG.",currentPolicyName);          }          if (!_helper.isFastPolicy(newPolicyName)) {            removePhantomStorageGroup(storage,client,exportMask.getId(),sgName,sgPath,volumesInSG,forceFlag);          }        } else {          _log.info("Request is made for part of volumes in the Group");          removePhantomStorageGroup(storage,client,exportMask.getId(),sgName,sgPath,volumesInSG,forceFlag);          if (_helper.isFastPolicy(newPolicyName)) {            addVolumesToPhantomStorageGroup(storage,exportMask,volumesInSG,newPolicyName,childGroupName,taskCompleter,forceFlag);          }        }      }      policyUpdated=true;    }  } else {    if (isGivenVolumeListSameAsInStorageGroup(storage,childGroupPath,volumeURIs)) {      _log.info("Request is made for all volumes in the Group. Updating Policy and Limits on this Storage Group..");      CIMInstance childGroupInstance=null;      if (isVmax3) {        childGroupInstance=_helper.getInstance(storage,childGroupPath,false,false,SmisConstants.PS_V3_STORAGE_GROUP_PROPERTIES);      } else {        childGroupInstance=_helper.checkExists(storage,childGroupPath,false,false);      }      StorageGroupPolicyLimitsParam currentStorageGroupPolicyLimits=_helper.createStorageGroupPolicyLimitsParam(storage,childGroupInstance);      String currentPolicyName=currentStorageGroupPolicyLimits.getAutoTierPolicyName();      if (!currentPolicyName.equalsIgnoreCase(newPolicyName)) {        _log.info("FAST policy name associated with Storage Group {} : {}",childGroupName,currentPolicyName);        if (isVmax3) {          CIMInstance toUpdate=new CIMInstance(childGroupInstance.getObjectPath(),_helper.getV3FastSettingProperties(newPolicyName));          _helper.modifyInstance(storage,toUpdate,SmisConstants.PS_V3_FAST_SETTING_PROPERTIES);          _log.info("Modified Storage Group {} FAST Setting to {}",childGroupName,newPolicyName);        } else {          if (_helper.isFastPolicy(currentPolicyName)) {            _helper.removeVolumeGroupFromAutoTieringPolicy(storage,childGroupPath);          }          if (_helper.isFastPolicy(newPolicyName)) {            _log.info("Adding Storage Group {} to FAST Policy {}",childGroupName,newPolicyName);            addVolumeGroupToAutoTieringPolicy(storage,newPolicyName,childGroupPath,taskCompleter);          }        }      } else {        _log.info("Current and new policy names are same '{}'." + " No need to update it on Storage Group.",currentPolicyName);      }      policyUpdated=true;      boolean newCompressionSetting=newVirtualPoolPolicyLimits.getCompression();      if (currentStorageGroupPolicyLimits.getCompression() != newCompressionSetting) {        CIMInstance toUpdate=new CIMInstance(childGroupInstance.getObjectPath(),_helper.getV3CompressionProperties(newCompressionSetting));        _helper.modifyInstance(storage,toUpdate,SmisConstants.PS_EMC_COMPRESSION);        _log.info("Modified Storage Group {} Compression setting to {}",childGroupName,newCompressionSetting);      } else {        _log.info("Current and new compression values are same '{}'." + " No need to update it on Storage Group.",newCompressionSetting);      }      if (!HostIOLimitsParam.isEqualsLimit(currentStorageGroupPolicyLimits.getHostIOLimitBandwidth(),newVirtualPoolPolicyLimits.getHostIOLimitBandwidth())) {        _helper.updateHostIOLimitBandwidth(client,childGroupPath,newVirtualPoolPolicyLimits.getHostIOLimitBandwidth());        policyUpdated=true;      }      if (!HostIOLimitsParam.isEqualsLimit(currentStorageGroupPolicyLimits.getHostIOLimitIOPs(),newVirtualPoolPolicyLimits.getHostIOLimitIOPs())) {        _helper.updateHostIOLimitIOPs(client,childGroupPath,newVirtualPoolPolicyLimits.getHostIOLimitIOPs());        policyUpdated=true;      }      if (policyUpdated) {        Set<Initiator> initiators=ExportMaskUtils.getInitiatorsForExportMask(_dbClient,exportMask,null);        _helper.updateStorageGroupName(client,childGroupPath,generateStorageGroupName(storage,exportMask,initiators,newVirtualPoolPolicyLimits));      }    } else     if (isVmax3) {      _log.info("Request is made for part of volumes in the Group (VMAX3). Moving those volumes to new Storage Group..");      if (!_helper.isCascadedSG(storage,childGroupPath) && !_helper.findStorageGroupsAssociatedWithOtherMaskingViews(storage,childGroupName)) {        String parentGroupName=_helper.getStorageGroupForGivenMaskingView(exportMask.getMaskName(),storage);        Map<StorageGroupPolicyLimitsParam,List<String>> childGroupsByFast=_helper.groupStorageGroupsByAssociation(storage,parentGroupName);        List<String> newChildGroups=childGroupsByFast.get(newVirtualPoolPolicyLimits);        CIMObjectPath newChildGroupPath=null;        boolean newGroup=false;        String newChildGroupName=null;        if (newChildGroups != null && !newChildGroups.isEmpty()) {          newChildGroupName=newChildGroups.iterator().next();          newChildGroupPath=_cimPath.getMaskingGroupPath(storage,newChildGroupName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);        } else {          newGroup=true;          String[] tokens=newPolicyName.split(Constants.SMIS_PLUS_REGEX);          newChildGroupPath=_helper.createVolumeGroupBasedOnSLO(storage,storage,tokens[0],tokens[1],tokens[2]);          boolean forceFlag=false;          for (          URI volURI : volumeURIs) {            if (!forceFlag) {              forceFlag=ExportUtils.useEMCForceFlag(_dbClient,volURI);            }          }          addGroupsToCascadedVolumeGroup(storage,parentGroupName,newChildGroupPath,null,null,forceFlag);        }        if (childGroupName.equalsIgnoreCase(newChildGroupName)) {          _log.info("Current Storage Group {} has the required charcteristics" + "No need to invoke SMI-S moveMembers method. Performing NO-OP",newChildGroupName);        } else {          SmisJob moveVolumesToSGJob=new SmisSynchSubTaskJob(null,storage.getId(),SmisConstants.MOVE_MEMBERS);          _helper.moveVolumesFromOneStorageGroupToAnother(storage,childGroupPath,newChildGroupPath,volumeURIs,moveVolumesToSGJob);        }        if (newGroup) {          if (newVirtualPoolPolicyLimits.isHostIOLimitBandwidthSet()) {            _helper.updateHostIOLimitBandwidth(client,newChildGroupPath,newVirtualPoolPolicyLimits.getHostIOLimitBandwidth());          }          if (newVirtualPoolPolicyLimits.isHostIOLimitIOPsSet()) {            _helper.updateHostIOLimitIOPs(client,newChildGroupPath,newVirtualPoolPolicyLimits.getHostIOLimitIOPs());          }          if (!newVirtualPoolPolicyLimits.getCompression()) {            CIMInstance newChildGroupInstance=_helper.getInstance(storage,newChildGroupPath,false,false,SmisConstants.PS_EMC_COMPRESSION);            if (SmisUtils.getEMCCompressionForStorageGroup(newChildGroupInstance)) {              CIMInstance toUpdate=new CIMInstance(newChildGroupInstance.getObjectPath(),_helper.getV3CompressionProperties(false));              _helper.modifyInstance(storage,toUpdate,SmisConstants.PS_EMC_COMPRESSION);            }          }          Set<Initiator> initiators=ExportMaskUtils.getInitiatorsForExportMask(_dbClient,exportMask,null);          _helper.updateStorageGroupName(client,newChildGroupPath,generateStorageGroupName(storage,exportMask,initiators,newVirtualPoolPolicyLimits));        }        policyUpdated=true;      } else {        _log.info("Conditions for 'moveMembers' didn't meet for Storage Group {}." + " Hence, cannot move volumes to new Storage Group with new policy and limits.",childGroupName);      }    } else {      _log.info("Given Volume list is not same as the one in Storage Group {}." + " Hence, FAST policy change won't be done on it.",childGroupName);    }  }  return policyUpdated;}  }
class C{  public void ifICmp(final int mode,final Label label){  ifCmp(Type.INT_TYPE,mode,label);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addElement(AdditionalName.KEY);  builder.addElement(FamilyName.KEY);  builder.addElement(FullName.KEY);  builder.addElement(GivenName.KEY);  builder.addElement(NamePrefix.KEY);  builder.addElement(NameSuffix.KEY);}  }
class C{  public ByteBuffer(int capacity){  buffer=new byte[capacity / SIZE + 1][SIZE];  position=0;  last=-1;}  }
class C{  @MediumTest public void testPreconditions(){  assertTrue("center button should be right of left button",mLeftButton.getRight() < mCenterButton.getLeft());  assertTrue("right button should be right of center button",mCenterButton.getRight() < mRightButton.getLeft());  assertTrue("left button should be focused",mLeftButton.isFocused());}  }
class C{  public static WifiP2pDnsSdServiceRequest newInstance(String serviceType){  if (serviceType == null) {    throw new IllegalArgumentException("service type cannot be null");  }  return new WifiP2pDnsSdServiceRequest(serviceType + ".local.",WifiP2pDnsSdServiceInfo.DNS_TYPE_PTR,WifiP2pDnsSdServiceInfo.VERSION_1);}  }
class C{  public FreeRingDual(int capacity,int softCapacity){  _freeRing=new FreeRing<T>(capacity);  _freeRingSoft=new FreeRingSoft<T>(capacity);}  }
class C{  public void addNestedFieldTranslation(String attributeName,DatabaseField sourceField,String aggregateFieldName){  nestedFieldTranslations.put(attributeName,new Object[]{sourceField,aggregateFieldName});}  }
class C{  public static ReferenceRanges<String> createFullReferenceRanges(SAMFileHeader header){  final ReferenceRanges<String> rangeMap=new ReferenceRanges<>(true);  for (  final SAMSequenceRecord r : header.getSequenceDictionary().getSequences()) {    final int rlen=r.getSequenceLength();    if (rlen > 0) {      rangeMap.put(r.getSequenceName(),new RangeList<>(new RangeList.RangeData<>(0,rlen,r.getSequenceName())));    }  }  rangeMap.setIdMap(SamUtils.getSequenceIdLookup(header.getSequenceDictionary()));  return rangeMap;}  }
class C{  MutableBucketData(final MutableKeyBuffer keys,final MutableValueBuffer values,final long[] versionTimestamps,final boolean[] deleteMarkers,final boolean[] rawRecords){  assert keys != null;  assert values != null;  assert keys.capacity() == values.capacity();  if (versionTimestamps != null) {    assert versionTimestamps.length == keys.capacity();  }  if (deleteMarkers != null) {    assert deleteMarkers.length == keys.capacity();  }  if (rawRecords != null) {    assert rawRecords.length == keys.capacity();  }  this.keys=keys;  this.vals=values;  this.versionTimestamps=versionTimestamps;  this.deleteMarkers=deleteMarkers;  this.rawRecords=rawRecords;  if (versionTimestamps != null)   recalcMinMaxVersionTimestamp();}  }
class C{  public final Vec3D normalize(){  float mag=(float)Math.sqrt(x * x + y * y + z * z);  if (mag > 0) {    mag=1f / mag;    x*=mag;    y*=mag;    z*=mag;  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.104 -0400",hash_original_method="469B53AEEEAB044B53B373E873C95965",hash_generated_method="4B609E9BBBF2C69210C7BA3781ECD267") public X509CRLImpl(CertificateList crl){  this.crl=crl;  this.tbsCertList=crl.getTbsCertList();  this.extensions=tbsCertList.getCrlExtensions();}  }
class C{  protected List createRecords(byte[] bytes) throws IOException {  return createRecords(new InStream(bytes));}  }
class C{  private int readFromPeekBuffer(byte[] target,int offset,int length){  if (peekBufferLength == 0) {    return 0;  }  int peekBytes=Math.min(peekBufferLength,length);  System.arraycopy(peekBuffer,0,target,offset,peekBytes);  updatePeekBuffer(peekBytes);  return peekBytes;}  }
class C{  synchronized void receive(char oneChar) throws IOException {  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (lastReader != null && !lastReader.isAlive()) {    throw new IOException("Pipe broken");  }  lastWriter=Thread.currentThread();  try {    while (buffer != null && out == in) {      notifyAll();      wait(1000);      if (lastReader != null && !lastReader.isAlive()) {        throw new IOException("Pipe broken");      }    }  } catch (  InterruptedException e) {    throw new InterruptedIOException();  }  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (in == -1) {    in=0;  }  buffer[in++]=oneChar;  if (in == buffer.length) {    in=0;  }}  }
class C{  public static NoiseSuppressor create(int audioSession){  NoiseSuppressor ns=null;  try {    ns=new NoiseSuppressor(audioSession);  } catch (  IllegalArgumentException e) {    Log.w(TAG,"not implemented on this device " + ns);  }catch (  UnsupportedOperationException e) {    Log.w(TAG,"not enough resources");  }catch (  RuntimeException e) {    Log.w(TAG,"not enough memory");  } finally {    return ns;  }}  }
class C{  protected String xmlToString(Object xmlClass){  try {    JAXBContext jaxbContext=JAXBContext.newInstance(xmlClass.getClass());    StringWriter st=new StringWriter();    jaxbContext.createMarshaller().marshal(xmlClass,st);    String xml=st.toString();    return xml;  } catch (  JAXBException e) {    throw new MCApiRuntimeException(e);  }}  }
class C{  private static HashMap<BasicBlockPair,HashSet<Register>> findSplitPoints(IR ir,LiveAnalysis live,LSTGraph lst){  HashMap<BasicBlockPair,HashSet<Register>> result=new HashMap<BasicBlockPair,HashSet<Register>>(10);  for (Enumeration<GraphNode> e=lst.enumerateNodes(); e.hasMoreElements(); ) {    LSTNode node=(LSTNode)e.nextElement();    BasicBlock header=node.getHeader();    BitVector loop=node.getLoop();    if (loop == null)     continue;    for (Enumeration<BasicBlock> in=header.getIn(); in.hasMoreElements(); ) {      BasicBlock bb=in.nextElement();      if (loop.get(bb.getNumber()))       continue;      HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,header);      for (      Register r : liveRegisters) {        if (r.isSymbolic()) {          HashSet<Register> s=findOrCreateSplitSet(result,bb,header);          s.add(r);        }      }    }    for (int i=0; i < loop.length(); i++) {      if (loop.get(i)) {        BasicBlock bb=ir.getBasicBlock(i);        for (Enumeration<BasicBlock> out=bb.getNormalOut(); out.hasMoreElements(); ) {          BasicBlock dest=out.nextElement();          if (loop.get(dest.getNumber()))           continue;          HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,dest);          for (          Register r : liveRegisters) {            if (r.isSymbolic()) {              HashSet<Register> s=findOrCreateSplitSet(result,bb,dest);              s.add(r);            }          }        }      }    }  }  addEntriesForInfrequentBlocks(ir,live,result);  return result;}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  protected static CreateStatement produce(CharSequence table,CharSequence clause){  CreateStatement createStmt=new CreateStatement();  createStmt.statement.append("INSERT");  if (clause != null)   createStmt.statement.append(" OR ").append(clause);  createStmt.statement.append(" INTO ").append(table);  return createStmt;}  }
class C{  public static boolean isRootOfDestructuringPattern(EObject nodeWithinDestructuringPattern){  return !isParentPartOfSameDestructuringPattern(nodeWithinDestructuringPattern);}  }
class C{  public TcpDiscoveryVmIpFinder(boolean shared){  setShared(shared);}  }
class C{  public void flyPath(Path path,int numInbetweens,int millis,boolean loop,double height,boolean grab,String seqPath){  flyParams.numInbetweens=numInbetweens;  flyParams.millisPerFrame=millis;  flyParams.loop=loop;  flyParams.pathHeight=height;  flyParams.grab=grab;  flyParams.imageSequencePath=seqPath;  Vector3[] curve=path.getCurve(numInbetweens);  flyList=new Vector<ViewpointStore>();  BasicCamera cam=new BasicCamera((BasicCamera)viewpointNode.getCamera());  for (int i=0; i < curve.length - 1; ++i) {    ViewpointStore vps=getViewpoint(Integer.toString(i),curve[i],curve[i + 1],height,cam);    if (vps.direction.length() != 0)     flyList.add(vps);  }  ViewpointStore lastVps=new ViewpointStore(Integer.toString(curve.length - 1),cam);  lastVps.location.set(curve[curve.length - 1]);  lastVps.lookAt.addLocal(lastVps.direction);  flyList.add(lastVps);}  }
class C{  private boolean handleActionShare(){  boolean handled;  try {    final Bitmap bitmap=Bitmap.createBitmap(SHARED_IMAGE_SIZE,SHARED_IMAGE_SIZE,Bitmap.Config.ARGB_8888);    final Canvas canvas=new Canvas(bitmap);    canvas.drawColor(mColorItem.getColor());    final ByteArrayOutputStream bytes=new ByteArrayOutputStream();    bitmap.compress(Bitmap.CompressFormat.JPEG,SHARED_IMAGE_QUALITY,bytes);    bitmap.recycle();    final File outputDirectory=new File(getFilesDir(),SHARED_DIRECTORY);    if (outputDirectory.isDirectory() || outputDirectory.mkdirs()) {      final File shareColorFile=new File(outputDirectory,SHARED_IMAGE_FILE);      final FileOutputStream fo=new FileOutputStream(shareColorFile);      fo.write(bytes.toByteArray());      fo.close();      final Uri contentUri=FileProvider.getUriForFile(this,FILE_PROVIDER_AUTHORITY,shareColorFile);      final Intent intent=new Intent(Intent.ACTION_SEND);      intent.putExtra(Intent.EXTRA_STREAM,contentUri);      intent.putExtra(Intent.EXTRA_TEXT,mColorItem.getHexString() + "\n" + mColorItem.getRgbString()+ "\n"+ mColorItem.getHsvString());      intent.setType("image/jpeg");      intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);      startActivity(Intent.createChooser(intent,null));      handled=true;    } else {      handled=false;    }  } catch (  IOException e) {    handled=false;  }  return handled;}  }
class C{  protected void disposeBackingImage(){  Object oldKey=this.textureKey;  this.textureKey=new Object();  this.disposedTextureKeys.add(oldKey);}  }
class C{  public ValidatorMixin(W inputWidget,ErrorHandler errorHandler){  this.inputWidget=inputWidget;  this.errorHandler=errorHandler;  eventBus=new SimpleEventBus();  setupValueChangeValidation();}  }
class C{  public void transformNode(int node) throws TransformerException {  setExtensionsTable(getStylesheet());synchronized (m_serializationHandler) {    m_hasBeenReset=false;    XPathContext xctxt=getXPathContext();    DTM dtm=xctxt.getDTM(node);    try {      pushGlobalVars(node);      StylesheetRoot stylesheet=this.getStylesheet();      int n=stylesheet.getGlobalImportCount();      for (int i=0; i < n; i++) {        StylesheetComposed imported=stylesheet.getGlobalImport(i);        int includedCount=imported.getIncludeCountComposed();        for (int j=-1; j < includedCount; j++) {          Stylesheet included=imported.getIncludeComposed(j);          included.runtimeInit(this);          for (ElemTemplateElement child=included.getFirstChildElem(); child != null; child=child.getNextSiblingElem()) {            child.runtimeInit(this);          }        }      }      DTMIterator dtmIter=new org.apache.xpath.axes.SelfIteratorNoPredicate();      dtmIter.setRoot(node,xctxt);      xctxt.pushContextNodeList(dtmIter);      try {        this.applyTemplateToNode(null,null,node);      }  finally {        xctxt.popContextNodeList();      }      if (null != m_serializationHandler) {        m_serializationHandler.endDocument();      }    } catch (    Exception se) {      while (se instanceof org.apache.xml.utils.WrappedRuntimeException) {        Exception e=((org.apache.xml.utils.WrappedRuntimeException)se).getException();        if (null != e)         se=e;      }      if (null != m_serializationHandler) {        try {          if (se instanceof org.xml.sax.SAXParseException)           m_serializationHandler.fatalError((org.xml.sax.SAXParseException)se); else           if (se instanceof TransformerException) {            TransformerException te=((TransformerException)se);            SAXSourceLocator sl=new SAXSourceLocator(te.getLocator());            m_serializationHandler.fatalError(new org.xml.sax.SAXParseException(te.getMessage(),sl,te));          } else {            m_serializationHandler.fatalError(new org.xml.sax.SAXParseException(se.getMessage(),new SAXSourceLocator(),se));          }        } catch (        Exception e) {        }      }      if (se instanceof TransformerException) {        m_errorHandler.fatalError((TransformerException)se);      } else       if (se instanceof org.xml.sax.SAXParseException) {        m_errorHandler.fatalError(new TransformerException(se.getMessage(),new SAXSourceLocator((org.xml.sax.SAXParseException)se),se));      } else {        m_errorHandler.fatalError(new TransformerException(se));      }    } finally {      this.reset();    }  }}  }
class C{  @Deprecated @SuppressWarnings("static-method") public final boolean isAsciiOnly(){  return true;}  }
class C{  private static SimpleInsn moveInsnFor(RegisterSpec src,int destIndex){  return DalvInsn.makeMove(SourcePosition.NO_INFO,RegisterSpec.make(destIndex,src.getType()),src);}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == CODE_FILEPICKER) {    if (data != null) {      data.setClass(getApplicationContext(),ImportChallengeActivity.class);      startActivity(data);    }    return;  }  super.onActivityResult(requestCode,resultCode,data);}  }
class C{  public Query append(final String name,final String value) throws UnsupportedEncodingException {  params.add(new Tuple<String,Tuple<String,String>>(name,new Tuple<String,String>(value,URLEncoder.encode(value,"UTF-8"))));  return this;}  }
class C{  public Shape modelToView(int p0,Position.Bias b0,int p1,Position.Bias b1,Shape a) throws BadLocationException {  Shape s0=modelToView(p0,a,b0);  Shape s1;  if (p1 == getEndOffset()) {    try {      s1=modelToView(p1,a,b1);    } catch (    BadLocationException ble) {      s1=null;    }    if (s1 == null) {      Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();      s1=new Rectangle(alloc.x + alloc.width - 1,alloc.y,1,alloc.height);    }  } else {    s1=modelToView(p1,a,b1);  }  Rectangle r0=s0.getBounds();  Rectangle r1=(s1 instanceof Rectangle) ? (Rectangle)s1 : s1.getBounds();  if (r0.y != r1.y) {    Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();    r0.x=alloc.x;    r0.width=alloc.width;  }  r0.add(r1);  if (p1 > p0)   r0.width-=r1.width;  return r0;}  }
class C{  public void addListener(ResourceNotificationListener listener){  if (listener == null) {    logger.error("Attempting to add null listener");  }  listeners.add(listener);}  }
class C{  @LargeTest public void testCameraPairwiseScenario12() throws Exception {  genericPairwiseTestCase(Flash.AUTO,Exposure.MIN,WhiteBalance.CLOUDY,SceneMode.AUTO,PictureSize.LARGE,Geotagging.OFF);}  }
class C{  public void run(){  run(this,null);}  }
class C{  public boolean isMemoryLow(){  return mLowMemFlag;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.535 -0500",hash_original_method="90E3D05E7FA8C4A5A0CC776C9A15B4D4",hash_generated_method="638BC91476844A0336C657D1247F41AF") public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport){  return addMessageToUri(resolver,uri,address,body,subject,date,read,deliveryReport,-1L);}  }
class C{  public static boolean isVoidReturnType(FunctionTypeExprOrRef funTypeRef){  if (funTypeRef instanceof FunctionTypeExpression && funTypeRef.getReturnTypeRef() == null) {    return true;  } else {    return funTypeRef != null ? isVoid(funTypeRef.getReturnTypeRef()) : false;  }}  }
class C{  public int argCount(){  if (classes == null)   decodeClassName(0);  return classes.size() - 1;}  }
class C{  public static void main(String[] args){  TestDocErrorReporter tester=new TestDocErrorReporter();  int actualExitCode=run(tester,ARGS,TEST,NEGATED_TEST);  tester.checkExitCode(EXPECTED_EXIT_CODE,actualExitCode);  tester.printSummary();}  }
class C{  protected void initForm(){  log.info("");  try {    staticInitialise();    dynamicInitialise();    zkInit();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  return;}  }
class C{  public void memberValuePair(int memberNameIndex) throws IOException {  write16bit(memberNameIndex);}  }
class C{  public static Thread createThread(RVMThread vmdata,String myName){  if (VM.VerifyAssertions)   VM._assert(VM.runningVM);  Thread bootThread=new Thread(new VMThread(vmdata),myName,vmdata.getPriority(),vmdata.isDaemonThread());  bootThread.group=ThreadGroup.root;  return bootThread;}  }
class C{  public void add(Node node){  availableNodes.add(node);}  }
class C{  public void registerContainer(String containerId,ContainerType containerType,String containerClassName){  registerImplementation(new RegistrationKey(new SimpleContainerIdentity(containerId),containerType.getType()),containerClassName);}  }
class C{  protected Size2D arrangeFF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  double[] w=new double[5];  double[] h=new double[5];  w[0]=constraint.getWidth();  if (this.topBlock != null) {    RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE);    Size2D size=this.topBlock.arrange(g2,c1);    h[0]=size.height;  }  w[1]=w[0];  if (this.bottomBlock != null) {    RectangleConstraint c2=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE);    Size2D size=this.bottomBlock.arrange(g2,c2);    h[1]=size.height;  }  h[2]=constraint.getHeight() - h[1] - h[0];  if (this.leftBlock != null) {    RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);    Size2D size=this.leftBlock.arrange(g2,c3);    w[2]=size.width;  }  h[3]=h[2];  if (this.rightBlock != null) {    RectangleConstraint c4=new RectangleConstraint(0.0,new Range(0.0,Math.max(constraint.getWidth() - w[2],0.0)),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);    Size2D size=this.rightBlock.arrange(g2,c4);    w[3]=size.width;  }  h[4]=h[2];  w[4]=constraint.getWidth() - w[3] - w[2];  RectangleConstraint c5=new RectangleConstraint(w[4],h[4]);  if (this.centerBlock != null) {    this.centerBlock.arrange(g2,c5);  }  if (this.topBlock != null) {    this.topBlock.setBounds(new Rectangle2D.Double(0.0,0.0,w[0],h[0]));  }  if (this.bottomBlock != null) {    this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,h[0] + h[2],w[1],h[1]));  }  if (this.leftBlock != null) {    this.leftBlock.setBounds(new Rectangle2D.Double(0.0,h[0],w[2],h[2]));  }  if (this.rightBlock != null) {    this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4],h[0],w[3],h[3]));  }  if (this.centerBlock != null) {    this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],w[4],h[4]));  }  return new Size2D(constraint.getWidth(),constraint.getHeight());}  }
class C{  public void testNonCriticalPartitioning() throws Exception {  TungstenProperties conf=generateConfig();  PluginContext context=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  ParallelQueueStore pqs=new ParallelQueueStore();  pqs.setPartitions(4);  pqs.setMaxSize(10);  pqs.setSyncEnabled(false);  pqs.setPartitionerClass(ShardListPartitioner.class.getName());  pqs.configure(context);  pqs.prepare(context);  ShardListPartitioner partitioner=(ShardListPartitioner)pqs.getPartitioner();  TungstenProperties partCfg=new TungstenProperties();  partCfg.setString("db0","0");  partCfg.setString("db1","1");  partCfg.setString("db2","2");  partCfg.setString("(*)","3");  File partCfgFile=File.createTempFile("part1","properties");  FileOutputStream cfgFos=new FileOutputStream(partCfgFile);  partCfg.store(cfgFos);  cfgFos.close();  partitioner.setShardMap(partCfgFile);  for (int i=0; i <= 5; i++) {    ReplDBMSEvent event=createEvent(i,"db" + i);    pqs.put(0,event);  }  long storeSize=pqs.getStoreSize();  assertEquals("Total store size after loading",6,storeSize--);  for (int i=0; i < 3; i++) {    ReplDBMSEvent event=(ReplDBMSEvent)pqs.get(i);    assertEquals("Sequence number must match partition",i,event.getSeqno());    assertEquals("Total store size after removing 1",storeSize--,pqs.getStoreSize());  }  for (int i=3; i < 6; i++) {    ReplDBMSEvent event=(ReplDBMSEvent)pqs.get(3);    assertEquals("Sequence number must match partition",i,event.getSeqno());    assertEquals("Total store size after removing 1",storeSize--,pqs.getStoreSize());  }  pqs.release(context);  partCfgFile.delete();}  }
class C{  public void doRefresh(final Tradingday tradingday){  try {    this.clearStatusBarMessage();    Tradingday currentTradingday=m_tradingdays.getTradingday(tradingday.getOpen(),tradingday.getClose());    if (null != currentTradingday && null != currentTradingday.getIdTradingDay()) {      Tradingday instance=m_tradePersistentModel.findTradingdayById(currentTradingday.getIdTradingDay());      instance.populateStrategyData(currentTradingday);      m_tradingdays.replaceTradingday(instance);    }  } catch (  Exception ex) {    this.setErrorMessage("Error finding Tradingday.",ex.getMessage(),ex);  }}  }
class C{  @Override public MethodAmp method(String methodName,Class<?>[] paramTypes){  MethodAmp method=_stubMain.method(methodName,paramTypes);  System.out.println("MJ: " + methodName);  return new MethodJournal(method);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double slopeX;  double slopeY;  double val;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  double[] maskX={1,1,1,0,-1,-1,-1,0};  double[] maskY={1,0,-1,-1,-1,0,1,1};  int numPixelsInFilter;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    numPixelsInFilter=8;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          slopeX=0;          slopeY=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val == noData) {              val=z;            }            slopeX+=val * maskX[a];            slopeY+=val * maskY[a];          }          val=Math.sqrt(slopeX * slopeX + slopeY * slopeY);          outputFile.setValue(row,col,val);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void merge(SourceCallChainInfo other){  if (method != other.method)   throw new RuntimeException("methods don't match: " + method + ", "+ other.method+ " "+ method.equals(other.method)+ " "+ method.hashCode()+ " "+ other.method.hashCode());  if (contents.length == 0) {    contents=other.contents;    return;  } else   if (other.contents.length == 0) {    return;  }  List<SourceCallChainInfo> ccis=new ArrayList<SourceCallChainInfo>(Arrays.asList(contents));  Map<SootMethod,SourceCallChainInfo> minfo=new HashMap<SootMethod,SourceCallChainInfo>();  for (  SourceCallChainInfo cci : contents)   minfo.put(cci.method,cci);  for (  SourceCallChainInfo other_cci : other.contents) {    SourceCallChainInfo cci=minfo.get(other_cci.method);    if (cci == null)     ccis.add(other_cci); else     cci.merge(other_cci);  }  if (contents.length == ccis.size())   logger.info("merge: {} old/new size = {}",method,ccis.size()); else   logger.info("merge: {} orig {} elems, new {} elems",method,contents.length,ccis.size());  contents=ccis.toArray(new SourceCallChainInfo[0]);}  }
class C{  public <T extends GeoVisibleResource>Iterator<T> queryObjectsField(Class<T> clazz,String fieldName,List<URI> ids) throws Exception {  BulkIdParam param=new BulkIdParam();  param.setIds(ids);  WebResource rRoot=createRequest(GEOVISIBLE_URI + clazz.getName() + "/field/"+ fieldName);  rRoot.accept(MediaType.APPLICATION_OCTET_STREAM);  ClientResponse resp=addSignature(rRoot).post(ClientResponse.class,param);  InputStream input=resp.getEntityInputStream();  ObjectInputStream objInputStream=new ObjectInputStream(input);  @SuppressWarnings("unchecked") ResourcesResponse<T> resources=(ResourcesResponse<T>)objInputStream.readObject();  List<T> list=resources.getObjects();  return list.iterator();}  }
class C{  private void processElementStatic(GeneratorMain gen,Node cur){  String name=((Element)cur).getAttribute(ATTR_NAME);  if (name == null) {    throw new AbortException("No cluster name given in specification file.");  }  ArrayList<double[]> points=new ArrayList<>();  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (TAG_POINT.equals(child.getNodeName())) {      processElementPoint(points,child);    } else     if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }  GeneratorStatic cluster=new GeneratorStatic(name,points);  gen.addCluster(cluster);  if (LOG.isVerbose()) {    LOG.verbose("Loaded cluster " + cluster.name + " from specification.");  }}  }
class C{  public void cancelSensorTimer(String sname){  for (int i=0; i < _actionList.size(); i++) {    ConditionalAction action=_actionList.get(i);    if ((action.getType() == Conditional.ACTION_DELAYED_SENSOR) || (action.getType() == Conditional.ACTION_RESET_DELAYED_SENSOR)) {      if (action.isTimerActive()) {        String devName=getDeviceName(action);        if (devName.equals(sname)) {          action.stopTimer();        } else {          Sensor sn=InstanceManager.sensorManagerInstance().getSensor(devName);          if (sn == null) {            log.error(getDisplayName() + " Unknown sensor *" + action.getDeviceName()+ " in cancelSensorTimer.");          } else           if (sname.equals(sn.getSystemName()) || sname.equals(sn.getUserName())) {            action.stopTimer();          }        }      }    }  }}  }
class C{  public void assertLabel(String text){  TestUtils.assertLabel(text);}  }
class C{  public String[] servers(){  return servers;}  }
class C{  public SHAvite384(){  super();}  }
class C{  @Override public void doNotify() throws Exception {  log.info("Received notification that related system properties are changed");  ScheduledExecutorService svc=service;  if (svc != null) {    try {      svc.schedule((Callable<Object>)this,0L,TimeUnit.MICROSECONDS);    } catch (    RejectedExecutionException ex) {      if (svc.isShutdown()) {        log.info("Property change notification ignored because this node is no longer backup leader.");      } else {        throw ex;      }    }  } else {    log.info("Property change notification ignored because this node is no longer backup leader.");  }}  }
class C{  public void testStressUnisolatedAllocationContextRecycling(){  final Journal store=(Journal)getStore(1);  try {    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    final IAllocationContext cntxt=rw.newAllocationContext(false);    final int allocs=100000;    final Random ran=new Random();    for (int r=0; r < 20; r++) {      final ArrayList<Integer> addrs=new ArrayList<Integer>();      for (int a=0; a < allocs; a++) {        addrs.add(rw.alloc(50,cntxt));      }      final PseudoRandom ps=new PseudoRandom(allocs,ran.nextInt(allocs));      for (      int a : addrs) {        rw.free(addrs.get(ps.next()),50,cntxt);      }    }    assertTrue(rw.getFixedAllocatorCount() < 20);    if (log.isInfoEnabled()) {      final StringBuilder str=new StringBuilder();      rw.showAllocators(str);      log.info(str);    }    store.commit();  }  finally {    store.destroy();  }}  }
class C{  public PortalSetupDescriptor(final int x,final int y,final Object identifier){  super(x,y);  this.identifier=identifier;  destinationZone=null;  destinationIdentifier=null;  replacing=false;}  }
class C{  public void takeScreenshot(){  BufferedImage screenshot=renderer.takeScreenshot();  FileDialog fd=new FileDialog(getSite().getShell(),SWT.SAVE);  fd.setText("Save Screenshot:");  String[] filterExt={"*.png","*.jpg","*.gif","*.bmp","*.*"};  fd.setFilterExtensions(filterExt);  String selected=fd.open();  IActionBars bars=getEditorSite().getActionBars();  if (null == selected) {    bars.getStatusLineManager().setErrorMessage("To take a screenshot, you must specify a filename.");    return;  }  if (selected.lastIndexOf('.') == -1) {    selected=selected + ".png";  }  try {    ImageIO.write(screenshot,selected.substring(selected.lastIndexOf('.') + 1),new File(selected));    bars.getStatusLineManager().setMessage("Image saved to " + selected);  } catch (  IOException e) {    e.printStackTrace();    bars.getStatusLineManager().setErrorMessage("Error while saving screenshot");  }}  }
class C{  public static boolean isConstantPlusExpressionAttribute(String attributeValue){  if (attributeValue.length() > 0) {    if (attributeValue.startsWith("${") && attributeValue.endsWith("}")) {      String expression=attributeValue.substring(2,attributeValue.length() - 1);      if (!expression.contains("${")) {        return true;      }    }    FlexibleStringExpander fse=FlexibleStringExpander.getInstance(attributeValue);    return FlexibleStringExpander.containsConstant(fse);  }  return true;}  }
class C{  public String[] highlight(String field,Query query,IndexSearcher searcher,TopDocs topDocs) throws IOException {  return highlight(field,query,searcher,topDocs,1);}  }
class C{  public MyTreeTable(VariableModel model){  super(model);}  }
class C{  private void scanAttributeForAnnotation(InputStream is) throws IOException {  int nameIndex=readShort(is);  int length=readInt(is);  if (!isNameAnnotation(nameIndex)) {    is.skip(length);    return;  }  int count=readShort(is);  for (int i=0; i < count; i++) {    int annTypeIndex=scanAnnotation(is);    if (annTypeIndex > 0 && _cpLengths[annTypeIndex] > 2) {      _matcher.addClassAnnotation(_charBuffer,_cpData[annTypeIndex] + 1,_cpLengths[annTypeIndex] - 2);    }  }}  }
class C{  private float[] popFloatArray() throws PDFParseException {  Object obj=stack.pop();  if (!(obj instanceof Object[])) {    throw new PDFParseException("Expected an [array] here.");  }  Object[] source=(Object[])obj;  float[] ary=new float[source.length];  for (int i=0; i < ary.length; i++) {    if (source[i] instanceof Double) {      ary[i]=((Double)source[i]).floatValue();    } else {      throw new PDFParseException("This array doesn't consist only of floats.");    }  }  return ary;}  }
class C{  public int lowestValue(){  if (m_values.isEmpty()) {    return 0;  }  int min=Integer.MAX_VALUE;  for (  final int value : m_values.values()) {    if (value < min) {      min=value;    }  }  return min;}  }
class C{  private void doCloneEntry(String orig,String dest,boolean changePassword) throws Exception {  if (orig == null) {    orig=keyAlias;  }  if (keyStore.containsAlias(dest)) {    MessageFormat form=new MessageFormat(rb.getString("Destination.alias.dest.already.exists"));    Object[] source={dest};    throw new Exception(form.format(source));  }  Pair<Entry,char[]> objs=recoverEntry(keyStore,orig,storePass,keyPass);  Entry entry=objs.fst;  keyPass=objs.snd;  PasswordProtection pp=null;  if (keyPass != null) {    if (!changePassword || P12KEYSTORE.equalsIgnoreCase(storetype)) {      keyPassNew=keyPass;    } else {      if (keyPassNew == null) {        keyPassNew=promptForKeyPass(dest,orig,keyPass);      }    }    pp=new PasswordProtection(keyPassNew);  }  keyStore.setEntry(dest,entry,pp);}  }
class C{  public void addStepsToReplicateNFSExports(URI systemTarget,URI fsURI,StoragePort nfsPort,String taskId){  s_logger.info("Generating steps for Replicating NFS exports to Target Cluster");  FileWorkflowCompleter completer=new FileWorkflowCompleter(fsURI,taskId);  Workflow workflow=null;  FileShare targetFileShare=null;  try {    FileShare sourceFileShare=s_dbClient.queryObject(FileShare.class,fsURI);    if (sourceFileShare.getPersonality().equals(PersonalityTypes.SOURCE.name())) {      List<String> targetfileUris=new ArrayList<String>();      targetfileUris.addAll(sourceFileShare.getMirrorfsTargets());      targetFileShare=s_dbClient.queryObject(FileShare.class,URI.create(targetfileUris.get(0)));    } else {      targetFileShare=s_dbClient.queryObject(FileShare.class,sourceFileShare.getParentFileShare());    }    workflow=this._workflowService.getNewWorkflow(this,REPLICATE_NFS_EXPORT_TO_TARGET_WF_NAME,false,taskId,completer);    FSExportMap sourceNFSExportMap=sourceFileShare.getFsExports();    FSExportMap targetNFSExportMap=targetFileShare.getFsExports();    if (targetNFSExportMap == null && sourceNFSExportMap != null) {      List<FileExport> sourceNFSExports=new ArrayList<FileExport>(sourceNFSExportMap.values());      createNFSExportOnTarget(workflow,systemTarget,sourceNFSExports,nfsPort,targetFileShare,sourceFileShare);    } else     if (sourceNFSExportMap != null && targetNFSExportMap != null) {      List<FileExport> sourceNFSExports=new ArrayList<FileExport>(sourceNFSExportMap.values());      List<FileExport> targetNFSExports=new ArrayList<FileExport>(targetNFSExportMap.values());      List<FileExport> targetNFSExportstoCreate=new ArrayList<FileExport>();      HashMap<String,FileExport> sourceFileExportMap=FileOrchestrationUtils.getFileExportMap(sourceNFSExports);      HashMap<String,FileExport> targetFileExportMap=FileOrchestrationUtils.getFileExportMap(targetNFSExports);      String waitFor=null;      for (      String exportPath : sourceFileExportMap.keySet()) {        if (exportPath.equals(sourceFileShare.getPath())) {          if (targetFileExportMap.get(targetFileShare.getPath()) == null) {            targetNFSExportstoCreate.add(sourceFileExportMap.get(exportPath));          }        } else {          ArrayList<String> subdirName=new ArrayList<String>();          subdirName.add(exportPath.split(sourceFileShare.getPath())[1]);          if (targetFileExportMap.get(targetFileShare.getPath() + subdirName.get(0)) == null) {            targetNFSExportstoCreate.add(sourceFileExportMap.get(exportPath));          }        }      }      if (!targetNFSExportstoCreate.isEmpty()) {        waitFor=createNFSExportOnTarget(workflow,systemTarget,targetNFSExportstoCreate,nfsPort,targetFileShare,sourceFileShare);      }      for (      String exportPath : targetFileExportMap.keySet()) {        String stepDescription=String.format("deleting NFS export : %s",exportPath);        String exportdeletionStep=workflow.createStepId();        if (exportPath.equals(targetFileShare.getPath())) {          if (sourceFileExportMap.get(sourceFileShare.getPath()) == null) {            Object[] args=new Object[]{systemTarget,targetFileShare.getId(),false,null};            waitFor=_fileDeviceController.createMethod(workflow,waitFor,DELETE_FILESYSTEM_EXPORT_METHOD,exportdeletionStep,stepDescription,systemTarget,args);          }        } else {          ArrayList<String> subdirName=new ArrayList<String>();          subdirName.add(exportPath.split(targetFileShare.getPath())[1]);          if (sourceFileExportMap.get(sourceFileShare.getPath() + subdirName.get(0)) == null) {            Object[] args=new Object[]{systemTarget,targetFileShare.getId(),false,subdirName.get(0).substring(1)};            waitFor=_fileDeviceController.createMethod(workflow,waitFor,DELETE_FILESYSTEM_EXPORT_METHOD,exportdeletionStep,stepDescription,systemTarget,args);          }        }      }    }    String successMessage=String.format("Replicating source File System : %s NFS Exports to Target System finished successfully",sourceFileShare.getId());    workflow.executePlan(completer,successMessage);  } catch (  Exception ex) {    s_logger.error("Could not replicate source filesystem NFS Exports : " + fsURI,ex);    String opName=ResourceOperationTypeEnum.FILE_PROTECTION_ACTION_FAILOVER.getName();    ServiceError serviceError=DeviceControllerException.errors.createFileSharesFailed(fsURI.toString(),opName,ex);    completer.error(s_dbClient,this._locker,serviceError);  }}  }
class C{  public FieldBinding[] syntheticFields(){  if (this.synthetics == null)   return null;  int fieldSize=this.synthetics[SourceTypeBinding.FIELD_EMUL] == null ? 0 : this.synthetics[SourceTypeBinding.FIELD_EMUL].size();  int literalSize=this.synthetics[SourceTypeBinding.CLASS_LITERAL_EMUL] == null ? 0 : this.synthetics[SourceTypeBinding.CLASS_LITERAL_EMUL].size();  int totalSize=fieldSize + literalSize;  if (totalSize == 0)   return null;  FieldBinding[] bindings=new FieldBinding[totalSize];  if (this.synthetics[SourceTypeBinding.FIELD_EMUL] != null) {    Iterator elements=this.synthetics[SourceTypeBinding.FIELD_EMUL].values().iterator();    for (int i=0; i < fieldSize; i++) {      SyntheticFieldBinding synthBinding=(SyntheticFieldBinding)elements.next();      bindings[synthBinding.index]=synthBinding;    }  }  if (this.synthetics[SourceTypeBinding.CLASS_LITERAL_EMUL] != null) {    Iterator elements=this.synthetics[SourceTypeBinding.CLASS_LITERAL_EMUL].values().iterator();    for (int i=0; i < literalSize; i++) {      SyntheticFieldBinding synthBinding=(SyntheticFieldBinding)elements.next();      bindings[fieldSize + synthBinding.index]=synthBinding;    }  }  return bindings;}  }
class C{  public int loadData(int size){  List<String> list=new ArrayList<>();  for (int i=0; i < size; i++)   list.add("" + size);  return list.size();}  }
class C{  protected IBindingSet[] combineChunks(final List<IBindingSet[]> chunks,final int bindingSetCount){  final int chunkCount=chunks.size();  assert chunkCount > 0;  assert bindingSetCount > 0;  final IBindingSet[] chunk;  if (chunkCount == 1) {    chunk=chunks.get(0);  } else {    chunk=new IBindingSet[bindingSetCount];    final Iterator<IBindingSet[]> itr=chunks.iterator();    int offset=0;    while (itr.hasNext()) {      final IBindingSet[] a=itr.next();      System.arraycopy(a,0,chunk,offset,a.length);      offset+=a.length;    }  }  if (halt)   throw new RuntimeException(firstCause.get());  if (DEBUG) {    log.debug("Read chunk(s): nchunks=" + chunkCount + ", #bindingSets="+ chunk.length+ ", orderIndex="+ orderIndex+ ", partitionId="+ partitionId);  }  stats.bindingSetChunksIn+=chunkCount;  stats.bindingSetsIn+=bindingSetCount;  if (trace)   System.err.print(" chunk[" + chunk.length + "]");  return chunk;}  }
class C{  public String normalizeDimWidthsTipText(){  return "Whether to normalize the widths(ranges) of the dimensions " + "(attributes) before selecting the widest one.";}  }
class C{  public float[] generateTransformedValuesBubble(List<? extends Entry> entries,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil(to - from) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    Entry e=entries.get(j / 2 + from);    if (e != null) {      valuePoints[j]=(float)(e.getXIndex() - from) * phaseX + from;      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public void send(String remoteAddr,int remotePort,byte[] data) throws IOException {  if (data == null) {    return;  }  if (connection != null) {    InetAddress address=InetAddress.getByName(remoteAddr);    DatagramPacket packet=new DatagramPacket(data,data.length,address,remotePort);    connection.send(packet);  } else {    throw new IOException("Connection not openned");  }}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.IDENTIFIER_REF_IM;}  }
class C{  public Builder readPartitions(final String... readPartitions){  return this.readPartitions(Arrays.asList(readPartitions));}  }
class C{  public <R>Maybe<R> match(final Object... t){  return cases.match(t);}  }
class C{  protected void resetDynamicAccounts(){  setDynamicAccounts(null);}  }
class C{  private long retrieveMaxMinPK(Database conn,Table table,boolean max) throws Exception {  long value=-1;  if (table.getPrimaryKey() == null)   throw new Exception(table.getName() + " has no PK"); else   if (table.getPrimaryKey().getColumns().size() != 1)   throw new Exception(table.getName() + " PK is not a single-column one " + table.getPrimaryKey().getColumns());  String function="MIN";  if (max)   function="MAX";  String query=String.format("SELECT %s(%s) FROM %s",function,table.getPrimaryKey().getColumns().get(0).getName(),table.getName());  Statement st=null;  ResultSet rs=null;  try {    st=conn.createStatement();    rs=st.executeQuery(query);    if (rs.next()) {      value=rs.getLong(1);    }  }  finally {    if (rs != null) {      try {        rs.close();      } catch (      SQLException e) {      }    }    if (st != null) {      try {        st.close();      } catch (      SQLException e) {      }    }  }  return value;}  }
class C{  public static String FTLStringLiteralDec(String s) throws ParseException {  int idx=s.indexOf('\\');  if (idx == -1) {    return s;  }  int lidx=s.length() - 1;  int bidx=0;  StringBuilder buf=new StringBuilder(lidx);  do {    buf.append(s.substring(bidx,idx));    if (idx >= lidx) {      throw new ParseException("The last character of string literal is backslash",0,0);    }    char c=s.charAt(idx + 1);switch (c) {case '"':      buf.append('"');    bidx=idx + 2;  break;case '\'':buf.append('\'');bidx=idx + 2;break;case '\\':buf.append('\\');bidx=idx + 2;break;case 'n':buf.append('\n');bidx=idx + 2;break;case 'r':buf.append('\r');bidx=idx + 2;break;case 't':buf.append('\t');bidx=idx + 2;break;case 'f':buf.append('\f');bidx=idx + 2;break;case 'b':buf.append('\b');bidx=idx + 2;break;case 'g':buf.append('>');bidx=idx + 2;break;case 'l':buf.append('<');bidx=idx + 2;break;case 'a':buf.append('&');bidx=idx + 2;break;case '{':buf.append('{');bidx=idx + 2;break;case 'x':{idx+=2;int x=idx;int y=0;int z=lidx > idx + 3 ? idx + 3 : lidx;while (idx <= z) {char b=s.charAt(idx);if (b >= '0' && b <= '9') {y<<=4;y+=b - '0';} else if (b >= 'a' && b <= 'f') {y<<=4;y+=b - 'a' + 10;} else if (b >= 'A' && b <= 'F') {y<<=4;y+=b - 'A' + 10;} else {break;}idx++;}if (x < idx) {buf.append((char)y);} else {throw new ParseException("Invalid \\x escape in a string literal",0,0);}bidx=idx;break;}default :throw new ParseException("Invalid escape sequence (\\" + c + ") in a string literal",0,0);}idx=s.indexOf('\\',bidx);} while (idx != -1);buf.append(s.substring(bidx));return buf.toString();}  }
class C{  public int index(int i){  return ByteArray.readU16bit(info,i * 10 + 10);}  }
class C{  public boolean isCollapseSeparators(){  return collapseSeparators;}  }
class C{  public void stopLocation(){  if (_locationManager != null) {    if (_locationListenerNetworkProvider != null) {      try {        _locationManager.removeUpdates(_locationListenerNetworkProvider);      } catch (      SecurityException exc) {        Log.e(TAG,exc.getMessage());      }      _locationListenerNetworkProvider=null;    }    _locationManager=null;    if (_locationDataBuffer != null) {      _locationDataBuffer.clear();    }    try {      Thread.currentThread().interrupt();    } catch (    SecurityException exc) {      Log.e(TAG,exc.getMessage());      sendCallback(PluginResult.Status.ERROR,JSONHelper.errorJSON(LocationManager.NETWORK_PROVIDER,ErrorMessages.FAILED_THREAD_INTERRUPT()));    }  }  Log.d(TAG,"Stopping network geolocation");}  }
class C{  protected V createVector(){  return factory.newNumberVector(attributes,attributes);}  }
class C{  public FormatsValidate(Formats fmt,FormatsConstrain constrain){  this(fmt,new FormatsConstrain[]{constrain});}  }
class C{  protected void serializeElement(Element node,boolean bStart) throws SAXException {  if (bStart) {    fElementDepth++;    if ((fFeatures & WELLFORMED) != 0) {      isElementWellFormed(node);    }    if (!applyFilter(node,NodeFilter.SHOW_ELEMENT)) {      return;    }    if ((fFeatures & NAMESPACES) != 0) {      fNSBinder.pushContext();      fLocalNSBinder.reset();      recordLocalNSDecl(node);      fixupElementNS(node);    }    fSerializer.startElement(node.getNamespaceURI(),node.getLocalName(),node.getNodeName());    serializeAttList(node);  } else {    fElementDepth--;    if (!applyFilter(node,NodeFilter.SHOW_ELEMENT)) {      return;    }    this.fSerializer.endElement(node.getNamespaceURI(),node.getLocalName(),node.getNodeName());    if ((fFeatures & NAMESPACES) != 0) {      fNSBinder.popContext();    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.456 -0500",hash_original_method="B1F6BB5033A022FAFBEA87494F8412EB",hash_generated_method="F555FC379CC33F661BA067D214FC3E04") public long keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  OpDefNode startOpDefNode(UniqueString us,TreeNode tn,int kind,FormalParamNode[] params,boolean localness,ModuleNode oModNode,SymbolTable st){  OpDefNode odn=new OpDefNode(us,UserDefinedOpKind,params,localness,null,oModNode,st,tn,false,null);  oModNode.recursiveDecls.addElement(odn);  odn.letInLevel=curLevel;  odn.inRecursive=true;  odn.inRecursiveSection=true;  odn.recursiveSection=recursiveSectionCount;  oModNode.opDefsInRecursiveSection.addElement(odn);  return odn;}  }
class C{  public CActionMagnifyingGlassViewMode(final ZyGraph graph){  super("Toggle magnifying glass");  m_graph=Preconditions.checkNotNull(graph,"IE01252: Graph argument can not be null");  putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/nomagnifieingglass_hover.jpg")));  putValue(Action.SHORT_DESCRIPTION,"Magnifying Glass");}  }
class C{  public FrameBlock readTransformMetaDataFromFile(String spec,String metapath,String colDelim) throws IOException {  return TfMetaUtils.readTransformMetaDataFromFile(spec,metapath,colDelim);}  }
class C{  public void testSinglePartitionWithTwoStatementPattern(){  final StatementPatternNode spn1=stmtPatternWithVar("x1");  final StatementPatternNode spn2=stmtPatternWithVar("x2");  final List<IGroupMemberNode> nodes=new ArrayList<IGroupMemberNode>();  nodes.add(spn1);  nodes.add(spn2);  final GroupNodeVarBindingInfoMap bindingInfo=new GroupNodeVarBindingInfoMap(nodes,statisAnalysisForNodes(nodes),null);  final Set<IVariable<?>> external=new HashSet<IVariable<?>>();  external.add(Var.var("y"));  final ASTJoinGroupPartitions partitions=new ASTJoinGroupPartitions(nodes,bindingInfo,external);  assertEquals(1,partitions.getPartitionList().size());  assertEquals(2,partitions.extractNodeList(true).size());  assertTrue(partitions.extractNodeList(true).contains(spn1));  assertTrue(partitions.extractNodeList(true).contains(spn2));  ASTJoinGroupPartition partition=partitions.getPartitionList().get(0);  assertEquals(2,partition.extractNodeList(true).size());  assertTrue(partition.extractNodeList(true).contains(spn1));  assertTrue(partition.extractNodeList(true).contains(spn2));  assertTrue(partition.externallyBound.equals(external));  assertEquals(2,partition.nonOptionalNonMinusNodes.size());  assertTrue(partition.nonOptionalNonMinusNodes.contains(spn1));  assertTrue(partition.nonOptionalNonMinusNodes.contains(spn2));  assertNull(partition.optionalOrMinus);  assertEquals(3,partition.definitelyProduced.size());  assertTrue(partition.definitelyProduced.contains(Var.var("x1")));  assertTrue(partition.definitelyProduced.contains(Var.var("x2")));  assertTrue(partition.definitelyProduced.contains(Var.var("y")));}  }
class C{  public void writeSyncValue(String storeName,Scope scope,boolean persist,byte[] key,Iterable<Versioned<byte[]>> values) throws PersistException {  SynchronizingStorageEngine store=storeRegistry.get(storeName);  if (store == null) {    store=storeRegistry.register(storeName,scope,persist);  }  store.writeSyncValue(new ByteArray(key),values);}  }
class C{  void createJavaStratum(){  baseStratumIndex=stratumIndex;  storeStratum(BASE_STRATUM_NAME);  storeFile(1,jplsFilename,NullString);  storeLine(1,65536,1,1,65536,1);  storeStratum("Aux");}  }
class C{  public Uri(String uri) throws MalformedURLException {  init(uri);}  }
class C{  public void testRoundRobinParallelStore() throws Exception {  TungstenProperties conf=this.getConfig(1,1,3,12);  conf.setString("replicator.store.output.partitionerClass",RoundRobinPartitioner.class.getName());  ReplicatorRuntime runtime=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  ParallelQueueStore inputPqs=(ParallelQueueStore)pipeline.getStore("input");  inputPqs.setSyncInterval(100);  ParallelQueueStore outputPqs=(ParallelQueueStore)pipeline.getStore("output");  outputPqs.setSyncInterval(100);  assertEquals("1 input partition defined",1,inputPqs.getPartitions());  for (int i=0; i < 12; i++) {    ReplDBMSEvent event=createEvent(i);    inputPqs.put(0,event);  }  pipeline.start(new MockEventDispatcher());  assertEquals("3 output partitions defined",3,outputPqs.getPartitions());  for (int i=0; i < 12; i++) {    int partId=i % 3;    ReplEvent raw=outputPqs.get(partId);    ReplDBMSEvent event=(ReplDBMSEvent)raw;    assertEquals("Event event has expected seqno",i,event.getSeqno());  }  pipeline.shutdown(true);  pipeline.release(runtime);}  }
class C{  private void grow(){  XZAddressable[] oldBuckets=this.buckets;  this.buckets=new XZAddressable[this.buckets.length * 2];  this.refreshFields();  for (  XZAddressable oldBucket : oldBuckets) {    if (oldBucket == null) {      continue;    }    int index=getIndex(oldBucket.getX(),oldBucket.getZ());    XZAddressable bucket=this.buckets[index];    while (bucket != null) {      bucket=this.buckets[index=getNextIndex(index)];    }    this.buckets[index]=oldBucket;  }}  }
class C{  public String toString(){  return url.toString();}  }
class C{  private static boolean isOptimizableForDescendantIterator(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  int stepType;  int stepCount=0;  boolean foundDorDS=false;  boolean foundSelf=false;  boolean foundDS=false;  int nodeTestType=OpCodes.NODETYPE_NODE;  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    if (nodeTestType != OpCodes.NODETYPE_NODE && nodeTestType != OpCodes.NODETYPE_ROOT)     return false;    stepCount++;    if (stepCount > 3)     return false;    boolean mightBeProximate=mightBeProximate(compiler,stepOpCodePos,stepType);    if (mightBeProximate)     return false;switch (stepType) {case OpCodes.FROM_FOLLOWING:case OpCodes.FROM_FOLLOWING_SIBLINGS:case OpCodes.FROM_PRECEDING:case OpCodes.FROM_PRECEDING_SIBLINGS:case OpCodes.FROM_PARENT:case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:case OpCodes.FROM_NAMESPACE:case OpCodes.FROM_ANCESTORS:case OpCodes.FROM_ANCESTORS_OR_SELF:case OpCodes.FROM_ATTRIBUTES:case OpCodes.MATCH_ATTRIBUTE:case OpCodes.MATCH_ANY_ANCESTOR:case OpCodes.MATCH_IMMEDIATE_ANCESTOR:      return false;case OpCodes.FROM_ROOT:    if (1 != stepCount)     return false;  break;case OpCodes.FROM_CHILDREN:if (!foundDS && !(foundDorDS && foundSelf)) return false;break;case OpCodes.FROM_DESCENDANTS_OR_SELF:foundDS=true;case OpCodes.FROM_DESCENDANTS:if (3 == stepCount) return false;foundDorDS=true;break;case OpCodes.FROM_SELF:if (1 != stepCount) return false;foundSelf=true;break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}nodeTestType=compiler.getStepTestType(stepOpCodePos);int nextStepOpCodePos=compiler.getNextStepPos(stepOpCodePos);if (nextStepOpCodePos < 0) break;if (OpCodes.ENDOP != compiler.getOp(nextStepOpCodePos)) {if (compiler.countPredicates(stepOpCodePos) > 0) {return false;}}stepOpCodePos=nextStepOpCodePos;}return true;}  }
class C{  public void findAndUpdatePreferredPools(StorageSystem system,DbClient dbClient,PartitionManager partitionManager) throws Exception {  XtremIOClient xtremIOClient=XtremIOProvUtils.getXtremIOClient(dbClient,system,xtremioRestClientFactory);  String xioClusterName=xtremIOClient.getClusterDetails(system.getSerialNumber()).getName();  ArrayListMultimap<String,Initiator> igNameToInitiatorsMap=ArrayListMultimap.create();  Map<URI,Set<String>> hostToIGNamesMap=new HashMap<URI,Set<String>>();  Map<String,Set<String>> igNameToHostsMap=new HashMap<String,Set<String>>();  List<XtremIOInitiator> initiators=xtremIOClient.getXtremIOInitiatorsInfo(xioClusterName);  for (  XtremIOInitiator initiator : initiators) {    String initiatorNetworkId=initiator.getPortAddress();    Initiator knownInitiator=NetworkUtil.getInitiator(initiatorNetworkId,dbClient);    if (knownInitiator == null) {      log.debug("Skipping XtremIO initiator {} as it is not found in database",initiatorNetworkId);      continue;    }    URI hostId=knownInitiator.getHost();    String hostName=knownInitiator.getHostName();    if (!NullColumnValueGetter.isNullURI(hostId)) {      log.info("Found a host {}({}) in ViPR for initiator {}",hostId.toString(),knownInitiator.getHostName(),initiatorNetworkId);      String igName=initiator.getInitiatorGroup().get(1);      igNameToInitiatorsMap.put(igName,knownInitiator);      Set<String> hostIGNames=hostToIGNamesMap.get(hostId);      if (hostIGNames == null) {        hostIGNames=new HashSet<String>();        hostToIGNamesMap.put(hostId,hostIGNames);      }      hostIGNames.add(igName);      Set<String> igHostNames=igNameToHostsMap.get(igName);      if (igHostNames == null) {        igHostNames=new HashSet<String>();        igNameToHostsMap.put(igName,igHostNames);      }      igHostNames.add(hostName);    } else {      log.info("No host in ViPR found configured for initiator {}",initiatorNetworkId);    }  }  log.info("IG name to Initiators Map: {}",Joiner.on(",").join(igNameToInitiatorsMap.asMap().entrySet()));  log.info("IG name to Hosts Map: {}",Joiner.on(",").join(igNameToHostsMap.entrySet()));  log.info("Host to IG names Map: {}",Joiner.on(",").join(hostToIGNamesMap.entrySet()));  Map<String,Set<String>> igToVolumesMap=getIgToVolumesMap(xtremIOClient,xioClusterName);  StoragePool storagePool=XtremIOProvUtils.getXtremIOStoragePool(system.getId(),dbClient);  List<Host> hostsToUpdate=new ArrayList<Host>();  List<URI> hostURIs=dbClient.queryByType(Host.class,true);  Iterator<Host> hosts=dbClient.queryIterativeObjectFields(Host.class,ArrayAffinityDiscoveryUtils.HOST_PROPERTIES,hostURIs);  while (hosts.hasNext()) {    Host host=hosts.next();    if (host != null && !host.getInactive()) {      log.info("Processing Host {}",host.getLabel());      Map<String,String> preferredPoolMap=new HashMap<String,String>();      Set<String> volumeNames=getVolumesForHost(hostToIGNamesMap.get(host.getId()),igToVolumesMap);      filterKnownVolumes(system,dbClient,xtremIOClient,xioClusterName,volumeNames);      if (!volumeNames.isEmpty()) {        log.info("UnManaged Volumes found for this Host: {}",volumeNames);        if (storagePool != null) {          String maskType=getMaskTypeForHost(xtremIOClient,xioClusterName,igNameToInitiatorsMap,igNameToHostsMap,hostToIGNamesMap.get(host.getId()),volumeNames);          ArrayAffinityDiscoveryUtils.addPoolToPreferredPoolMap(preferredPoolMap,storagePool.getId().toString(),maskType);        }      } else {        log.info("No UnManaged Volumes found for this Host");      }      if (ArrayAffinityDiscoveryUtils.updatePreferredPools(host,Sets.newHashSet(system.getId().toString()),dbClient,preferredPoolMap)) {        hostsToUpdate.add(host);      }    }  }  if (!hostsToUpdate.isEmpty()) {    partitionManager.updateAndReIndexInBatches(hostsToUpdate,Constants.DEFAULT_PARTITION_SIZE,dbClient,HOST);  }}  }
class C{  public static int[] indexOfIgnoreCase(String s,String arr[],int start){  int arrLen=arr.length;  int index=Integer.MAX_VALUE;  int last=-1;  for (int j=0; j < arrLen; j++) {    int i=indexOfIgnoreCase(s,arr[j],start);    if (i != -1) {      if (i < index) {        index=i;        last=j;      }    }  }  return last == -1 ? null : new int[]{last,index};}  }
class C{  protected String doIt() throws Exception {  m_language=new MLanguage(getCtx(),p_AD_Language_ID,get_TrxName());  log.info("Mode=" + p_MaintenanceMode + ", ID="+ p_AD_Language_ID+ " - "+ m_language);  if (m_language.isBaseLanguage())   throw new Exception("Base Language has no Translations");  int deleteNo=0;  int insertNo=0;  if (MAINTENANCEMODE_Delete.equals(p_MaintenanceMode) || MAINTENANCEMODE_ReCreate.equals(p_MaintenanceMode)) {    deleteNo=m_language.maintain(false);  }  if (MAINTENANCEMODE_Add.equals(p_MaintenanceMode) || MAINTENANCEMODE_ReCreate.equals(p_MaintenanceMode)) {    if (m_language.isActive() && m_language.isSystemLanguage()) {      insertNo=m_language.maintain(true);    } else     throw new Exception("Language not active System Language");  }  if (MAINTENANCEMODE_Delete.equals(p_MaintenanceMode)) {    if (m_language.isSystemLanguage()) {      m_language.setIsSystemLanguage(false);      m_language.saveEx();    }  }  return "@Deleted@=" + deleteNo + " - @Inserted@="+ insertNo;}  }
class C{  public final void skipLookupSwitchPairs(int num){  if (VM.VerifyAssertions)   VM._assert(opcode == JBC_lookupswitch);  bcIndex+=(num << (LOG_BYTES_IN_INT + 1));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String distanceOutputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double distConvFactor=1.0;  double gridRes=0;  double currentVal=0;  double currentMaxVal=0;  double maxValDist=0;  double maxDist=0;  double lineSlope=0;  boolean saveDistance=false;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double slope=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double aSmallValue=-9999999;  maxDist=Double.MAX_VALUE;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=Double.parseDouble(args[2]);  if (azimuth > 360 || azimuth < 0) {    azimuth=0.1;  }  if (azimuth == 0) {    azimuth=0.1;  }  if (azimuth == 180) {    azimuth=179.9;  }  if (azimuth == 360) {    azimuth=359.9;  }  if (azimuth < 180) {    lineSlope=Math.tan(Math.toRadians(90 - azimuth));  } else {    lineSlope=Math.tan(Math.toRadians(270 - azimuth));  }  if (!args[3].toLowerCase().equals("not specified")) {    maxDist=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().equals("not specified")) {    saveDistance=true;    distanceOutputHeader=args[4];  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.setForceAllDataInMemory(true);    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    if (DEM.getXYUnits().toLowerCase().contains("deg") || DEM.getProjection().toLowerCase().contains("geog")) {      double midLat=(DEM.getNorth() - DEM.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        distConvFactor=(113200 * Math.cos(Math.toRadians(midLat)));      }    }    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2 * distConvFactor;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setForceAllDataInMemory(true);    WhiteboxRaster outputDist=null;    if (saveDistance) {      outputDist=new WhiteboxRaster(distanceOutputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);      outputDist.setPreferredPalette("blue_white_red.pal");      outputDist.setForceAllDataInMemory(true);    }    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          yIntercept=-row - lineSlope * col;          currentMaxVal=aSmallValue;          maxValDist=aSmallValue;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            z=z1 + (y - y1) * (z2 - z1);            slope=(z - currentVal) / dist;            if (slope > currentMaxVal) {              currentMaxVal=slope;              maxValDist=dist;            } else             if (currentMaxVal < 0) {              maxValDist=dist;            }          } while (flag);          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(-y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            z=z1 + (x - x1) * (z2 - z1);            slope=(z - currentVal) / dist;            if (slope > currentMaxVal) {              currentMaxVal=slope;              maxValDist=dist;            } else             if (currentMaxVal < 0) {              maxValDist=dist;            }          } while (flag);          z=Math.toDegrees(Math.atan(currentMaxVal));          if (z < -89) {            z=0;          }          if (currentMaxVal != aSmallValue) {            output.setValue(row,col,z);            if (saveDistance) {              if (z < 0) {                maxValDist=maxValDist * -1;              }              outputDist.setValue(row,col,maxValDist);            }          } else {            output.setValue(row,col,noData);            if (saveDistance) {              outputDist.setValue(row,col,noData);            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    if (saveDistance) {      outputDist.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public XmlEntity() throws XmlPullParserException {  super.namespaceDictionary=new XmlNamespaceDictionary();  super.namespaceDictionary.set("s3","http://s3.amazonaws.com/doc/2006-03-01/");  super.namespaceDictionary.set("","");  this.xmlPullParser=Xml.createParser();  this.defaultNamespaceDictionary=new XmlNamespaceDictionary();}  }
class C{  public void add(String category,String[] titles,double[] values){  mCategories.add(category);  mTitles.add(titles);  mValues.add(values);}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public static synchronized void init(Context context,ConnectableDeviceStore connectableDeviceStore){  instance=new DiscoveryManager(context,connectableDeviceStore);}  }
class C{  public static <NodeType extends ZyGraphNode<?>>void zoomToNodes(final AbstractZyGraph<NodeType,?> graph,final Collection<NodeType> nodes){  Preconditions.checkNotNull(nodes,"Error: nodes argument can not be null");  if (nodes.size() == 0) {    return;  }  final double oldZoom=graph.getView().getZoom();  final Point2D oldViewPoint=graph.getView().getViewPoint2D();  final Rectangle2D box=GraphHelpers.calculateBoundingBox(nodes);  graph.getView().zoomToArea(box.getX(),box.getY(),box.getWidth(),box.getHeight());  ZoomHelpers.keepZoomValid(graph.getView());  graph.zoomOut();  final double newZoom=graph.getView().getZoom();  final Point2D newCenter=graph.getView().getCenter();  graph.getView().setZoom(oldZoom);  graph.getView().setViewPoint((int)oldViewPoint.getX(),(int)oldViewPoint.getY());  graph.getView().focusView(newZoom,newCenter,graph.getSettings().getLayoutSettings().getAnimateLayout());  graph.updateViews();}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public BoxLayout(int axis){  this.axis=axis;}  }
class C{  public List<Event> serialize(Node data){  SilentEmitter emitter=new SilentEmitter();  Serializer serializer=new Serializer(emitter,resolver,dumperOptions,null);  try {    serializer.open();    serializer.serialize(data);    serializer.close();  } catch (  IOException e) {    throw new YAMLException(e);  }  return emitter.getEvents();}  }
class C{  public boolean isMutable(){  return m_mutable;}  }
class C{  public final int compareTo(TileKey key){  if (key == null) {    String msg=Logging.getMessage("nullValue.KeyIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (key.level == this.level && key.row == this.row && key.col == this.col)   return 0;  if (this.level < key.level)   return -1;  if (this.level > key.level)   return 1;  if (this.row < key.row)   return -1;  if (this.row > key.row)   return 1;  if (this.col < key.col)   return -1;  return 1;}  }
class C{  protected TreeCellRenderer createDefaultCellRenderer(){  return new WindowsTreeCellRenderer();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildMargaret(zone);}  }
class C{  private boolean isParentIcon(){  if (rootParent instanceof JFrame) {    return (((JFrame)rootParent).getExtendedState() & Frame.ICONIFIED) != 0;  } else {    return false;  }}  }
class C{  private static void writeError(BinaryRawWriterEx writer,Exception ex){  if (ex.getCause() instanceof PlatformNativeException)   writer.writeObjectDetached(((PlatformNativeException)ex.getCause()).cause()); else {    writer.writeObjectDetached(ex.getClass().getName());    writer.writeObjectDetached(ex.getMessage());    writer.writeObjectDetached(X.getFullStackTrace(ex));  }}  }
class C{  protected void onSetContentView(){  setContentView(com.android.internal.R.layout.activity_list);}  }
class C{  public boolean visit(UnionType node){  return true;}  }
class C{  public MemoryCacheImageInputStream(InputStream stream){  if (stream == null) {    throw new IllegalArgumentException("stream == null!");  }  this.stream=stream;  disposerRecord=new StreamDisposerRecord(cache);  if (getClass() == MemoryCacheImageInputStream.class) {    disposerReferent=new Object();    Disposer.addRecord(disposerReferent,disposerRecord);  } else {    disposerReferent=new StreamFinalizer(this);  }}  }
class C{  public InvalidBucketNameException(String bucketName,String message){  super(message);  this.bucketName=bucketName;}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (!getItemVisible(row,column)) {    return;  }  if (!getItemLineVisible(row,column) && !getItemShapeVisible(row,column)) {    return;  }  Number v=dataset.getValue(row,column);  if (v == null) {    return;  }  int visibleRow=state.getVisibleSeriesIndex(row);  if (visibleRow < 0) {    return;  }  int visibleRowCount=state.getVisibleSeriesCount();  PlotOrientation orientation=plot.getOrientation();  double x1;  if (this.useSeriesOffset) {    x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());  } else {    x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  }  double value=v.doubleValue();  double y1=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());  if (pass == 0 && getItemLineVisible(row,column)) {    if (column != 0) {      Number previousValue=dataset.getValue(row,column - 1);      if (previousValue != null) {        double previous=previousValue.doubleValue();        double x0;        if (this.useSeriesOffset) {          x0=domainAxis.getCategorySeriesMiddle(column - 1,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());        } else {          x0=domainAxis.getCategoryMiddle(column - 1,getColumnCount(),dataArea,plot.getDomainAxisEdge());        }        double y0=rangeAxis.valueToJava2D(previous,dataArea,plot.getRangeAxisEdge());        Line2D line=null;        if (orientation == PlotOrientation.HORIZONTAL) {          line=new Line2D.Double(y0,x0,y1,x1);        } else         if (orientation == PlotOrientation.VERTICAL) {          line=new Line2D.Double(x0,y0,x1,y1);        }        g2.setPaint(getItemPaint(row,column));        g2.setStroke(getItemStroke(row,column));        g2.draw(line);      }    }  }  if (pass == 1) {    Shape shape=getItemShape(row,column);    if (orientation == PlotOrientation.HORIZONTAL) {      shape=ShapeUtilities.createTranslatedShape(shape,y1,x1);    } else     if (orientation == PlotOrientation.VERTICAL) {      shape=ShapeUtilities.createTranslatedShape(shape,x1,y1);    }    if (getItemShapeVisible(row,column)) {      if (getItemShapeFilled(row,column)) {        if (this.useFillPaint) {          g2.setPaint(getItemFillPaint(row,column));        } else {          g2.setPaint(getItemPaint(row,column));        }        g2.fill(shape);      }      if (this.drawOutlines) {        if (this.useOutlinePaint) {          g2.setPaint(getItemOutlinePaint(row,column));        } else {          g2.setPaint(getItemPaint(row,column));        }        g2.setStroke(getItemOutlineStroke(row,column));        g2.draw(shape);      }    }    if (isItemLabelVisible(row,column)) {      if (orientation == PlotOrientation.HORIZONTAL) {        drawItemLabel(g2,orientation,dataset,row,column,y1,x1,(value < 0.0));      } else       if (orientation == PlotOrientation.VERTICAL) {        drawItemLabel(g2,orientation,dataset,row,column,x1,y1,(value < 0.0));      }    }    int datasetIndex=plot.indexOf(dataset);    updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,x1,y1,orientation);    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      addItemEntity(entities,dataset,row,column,shape);    }  }}  }
class C{  protected String doIt() throws java.lang.Exception {  log.info("M_Locator_ID=" + p_M_Locator_ID + ",MovementDate="+ p_MovementDate);  if (p_UpdateCosting) {    if (p_C_AcctSchema_ID <= 0) {      throw new IllegalArgumentException("Accounting Schema required!");    }    if (p_M_CostType_ID <= 0) {      throw new IllegalArgumentException("Cost Type required!");    }    if (p_M_CostElement_ID <= 0) {      throw new IllegalArgumentException("Cost Element required!");    }    if (p_AD_OrgTrx_ID < 0) {      throw new IllegalArgumentException("AD_OrgTrx required!");    }    acctSchema=MAcctSchema.get(getCtx(),p_C_AcctSchema_ID,get_TrxName());  }  StringBuffer sql=null;  int no=0;  String clientCheck=" AND AD_Client_ID=" + p_AD_Client_ID;  if (p_DeleteOldImported) {    sql=new StringBuffer("DELETE I_Inventory " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Delete Old Imported=" + no);  }  sql=new StringBuffer("UPDATE I_Inventory " + "SET AD_Client_ID = COALESCE (AD_Client_ID,").append(p_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID,").append(p_AD_Org_ID).append("),");  if (p_MovementDate != null)   sql.append(" MovementDate = COALESCE (MovementDate,").append(DB.TO_DATE(p_MovementDate)).append("),");  sql.append(" IsActive = COALESCE (IsActive, 'Y')," + " Created = COALESCE (Created, SysDate)," + " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " M_Warehouse_ID = NULL,"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset=" + no);  sql=new StringBuffer("UPDATE I_Inventory o " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Org, '" + "WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0"+ " OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Org=" + no);  sql=new StringBuffer("UPDATE I_Inventory i " + "SET M_Locator_ID=(SELECT MAX(M_Locator_ID) FROM M_Locator l" + " WHERE i.LocatorValue=l.Value AND i.AD_Client_ID=l.AD_Client_ID) "+ "WHERE M_Locator_ID IS NULL AND LocatorValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Locator from Value =" + no);  sql=new StringBuffer("UPDATE I_Inventory i " + "SET M_Locator_ID=(SELECT MAX(M_Locator_ID) FROM M_Locator l" + " WHERE i.X=l.X AND i.Y=l.Y AND i.Z=l.Z AND i.AD_Client_ID=l.AD_Client_ID) "+ "WHERE M_Locator_ID IS NULL AND X IS NOT NULL AND Y IS NOT NULL AND Z IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Locator from X,Y,Z =" + no);  if (p_M_Locator_ID != 0) {    sql=new StringBuffer("UPDATE I_Inventory " + "SET M_Locator_ID = ").append(p_M_Locator_ID).append(" WHERE M_Locator_ID IS NULL" + " AND I_IsImported<>'Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Set Locator from Parameter=" + no);  }  sql=new StringBuffer("UPDATE I_Inventory " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Location, ' " + "WHERE M_Locator_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Location=" + no);  sql=new StringBuffer("UPDATE I_Inventory i " + "SET M_Warehouse_ID=(SELECT M_Warehouse_ID FROM M_Locator l WHERE i.M_Locator_ID=l.M_Locator_ID) " + "WHERE M_Locator_ID IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Warehouse from Locator =" + no);  sql=new StringBuffer("UPDATE I_Inventory " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Warehouse, ' " + "WHERE M_Warehouse_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Warehouse=" + no);  sql=new StringBuffer("UPDATE I_Inventory i " + "SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p" + " WHERE i.Value=p.Value AND i.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND Value IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product from Value=" + no);  sql=new StringBuffer("UPDATE I_Inventory i " + "SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p" + " WHERE i.UPC=p.UPC AND i.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND UPC IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product from UPC=" + no);  sql=new StringBuffer("UPDATE I_Inventory " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Product, ' " + "WHERE M_Product_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Product=" + no);  sql=new StringBuffer("UPDATE I_Inventory " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Qty Count, ' " + "WHERE QtyCount IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No QtyCount=" + no);  commitEx();  MInventory inventory=null;  int noInsert=0;  int noInsertLine=0;  sql=new StringBuffer("SELECT * FROM I_Inventory " + "WHERE I_IsImported='N'").append(clientCheck).append(" ORDER BY M_Warehouse_ID, TRUNC(MovementDate), I_Inventory_ID");  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    int x_M_Warehouse_ID=-1;    Timestamp x_MovementDate=null;    while (rs.next()) {      X_I_Inventory imp=new X_I_Inventory(getCtx(),rs,get_TrxName());      Timestamp MovementDate=TimeUtil.getDay(imp.getMovementDate());      if (inventory == null || imp.getM_Warehouse_ID() != x_M_Warehouse_ID || !MovementDate.equals(x_MovementDate)) {        inventory=new MInventory(getCtx(),0,get_TrxName());        inventory.setClientOrg(imp.getAD_Client_ID(),imp.getAD_Org_ID());        inventory.setDescription("I " + imp.getM_Warehouse_ID() + " "+ MovementDate);        inventory.setM_Warehouse_ID(imp.getM_Warehouse_ID());        inventory.setMovementDate(MovementDate);        if (!inventory.save()) {          log.log(Level.SEVERE,"Inventory not saved");          break;        }        x_M_Warehouse_ID=imp.getM_Warehouse_ID();        x_MovementDate=MovementDate;        noInsert++;      }      int M_AttributeSetInstance_ID=0;      if (imp.getLot() != null || imp.getSerNo() != null) {        MProduct product=MProduct.get(getCtx(),imp.getM_Product_ID());        if (product.isInstanceAttribute()) {          MAttributeSet mas=product.getAttributeSet();          MAttributeSetInstance masi=new MAttributeSetInstance(getCtx(),0,mas.getM_AttributeSet_ID(),get_TrxName());          if (mas.isLot() && imp.getLot() != null)           masi.setLot(imp.getLot(),imp.getM_Product_ID());          if (mas.isSerNo() && imp.getSerNo() != null)           masi.setSerNo(imp.getSerNo());          masi.setDescription();          masi.saveEx();          M_AttributeSetInstance_ID=masi.getM_AttributeSetInstance_ID();        }      }      MInventoryLine line=new MInventoryLine(inventory,imp.getM_Locator_ID(),imp.getM_Product_ID(),M_AttributeSetInstance_ID,imp.getQtyBook(),imp.getQtyCount());      line.saveEx();      imp.setI_IsImported(true);      imp.setM_Inventory_ID(line.getM_Inventory_ID());      imp.setM_InventoryLine_ID(line.getM_InventoryLine_ID());      imp.setProcessed(true);      imp.saveEx();      noInsertLine++;      if (p_UpdateCosting) {        line.setCurrentCostPrice(imp.getCurrentCostPrice());        line.saveEx();      }    }    rs.close();    pstmt.close();  } catch (  Exception e) {    log.log(Level.SEVERE,sql.toString(),e);  }  sql=new StringBuffer("UPDATE I_Inventory " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInsert),"@M_Inventory_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noInsertLine),"@M_InventoryLine_ID@: @Inserted@");  return "";}  }
class C{  public int drawText(Canvas canvas,String text,int maxWPix,TextPaint paint){  if (TextUtils.isEmpty(text)) {    return 1;  }  List<String> mStrList=getDrawRowStr(text,maxWPix,paint);  FontMetrics fm=paint.getFontMetrics();  int hSize=(int)Math.ceil(fm.descent - fm.ascent);  for (int i=0; i < mStrList.size(); i++) {    float x=leftPadding;    float y=topPadding + hSize / 2 + i * (hSize + lineSpacing) + bottomPadding;    String textLine=mStrList.get(i);    if (i < maxLines) {      canvas.drawText(textLine,x,y,paint);    }  }  return mStrList.size();}  }
class C{  public void flush() throws java.io.IOException {  os.flush();}  }
class C{  @Override public void createSingleVolumeMirror(StorageSystem storageSystem,URI mirrorVolumeURI,Boolean createInactive,TaskCompleter taskCompleter) throws DeviceControllerException {  log.info("START createSingleVolumeMirror operation");  try {    HDSApiClient hdsApiClient=hdsApiFactory.getClient(HDSUtils.getHDSServerManagementServerInfo(storageSystem),storageSystem.getSmisUserName(),storageSystem.getSmisPassword());    HDSApiProtectionManager hdsApiProtectionManager=hdsApiClient.getHdsApiProtectionManager();    String replicationGroupObjectID=hdsApiClient.getHdsApiProtectionManager().getReplicationGroupObjectId();    if (replicationGroupObjectID == null) {      log.error("Unable to find replication group information/pair management server for pair configuration");      throw HDSException.exceptions.replicationGroupNotAvailable();    }    BlockMirror mirrorObj=dbClient.queryObject(BlockMirror.class,mirrorVolumeURI);    Volume source=dbClient.queryObject(Volume.class,mirrorObj.getSource());    hdsProtectionOperations.createSecondaryVolumeForMirror(storageSystem,source.getId(),mirrorObj);    mirrorObj=dbClient.queryObject(BlockMirror.class,mirrorVolumeURI);    hdsProtectionOperations.addDummyLunPath(hdsApiClient,mirrorObj);    String pairName=hdsProtectionOperations.generatePairName(source,mirrorObj);    log.info("Pair Name :{}",pairName);    ReplicationInfo replicationInfo=hdsApiProtectionManager.createShadowImagePair(replicationGroupObjectID,pairName,HDSUtils.getSystemArrayType(storageSystem),HDSUtils.getSystemSerialNumber(storageSystem),source.getNativeId(),mirrorObj.getNativeId(),storageSystem.getModel());    mirrorObj.setSyncState(SynchronizationState.SYNCHRONIZED.name());    dbClient.persistObject(mirrorObj);    log.info("Replication Info object :{}",replicationInfo.toXMLString());    taskCompleter.ready(dbClient);  } catch (  Exception e) {    String errorMsg=String.format(CREATE_ERROR_MSG_FORMAT,mirrorVolumeURI);    log.error(errorMsg,e);    ServiceError serviceError=DeviceControllerErrors.hds.methodFailed("createSingleVolumeMirror",e.getMessage());    taskCompleter.error(dbClient,serviceError);  }  log.info("FINISHED createSingleVolumeMirror operation");}  }
class C{  private Launcher(){}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (proposition == null) {    throw new NullPointerException();  }}  }
class C{  public static int copy(InputStream in,OutputStream out,byte[] workbuff) throws IOException {  int bytescopied=0;  int bytesread=0;  while ((bytesread=in.read(workbuff)) != -1) {    out.write(workbuff,0,bytesread);    bytescopied+=bytesread;  }  return bytescopied;}  }
class C{  public static void assertFeature(String expectedName,MissingValue expectedValue,Feature actualFeature){  Assert.assertNotNull(actualFeature);  Assert.assertEquals(expectedName,actualFeature.getName());  Assert.assertEquals(expectedValue,actualFeature.getValue());}  }
class C{  public MatchResult match(){  if (!matchSuccessful) {    throw new IllegalStateException();  }  return matcher.toMatchResult();}  }
class C{  public AmbienceLayer(ResourceLocation name){  this.name=name;  this.maxTracks=Integer.MAX_VALUE;}  }
class C{  public static FunctionAlias newInstanceFromSource(Schema schema,int id,String name,String source,boolean force,boolean bufferResultSetToLocalTemp){  FunctionAlias alias=new FunctionAlias(schema,id,name);  alias.source=source;  alias.bufferResultSetToLocalTemp=bufferResultSetToLocalTemp;  alias.init(force);  return alias;}  }
class C{  public void removeSubInterface(InterfaceType type){  if (null == subInterfaces) {    return;  }  subInterfaces.remove(type);}  }
class C{  public void writeState(FacesContext context,Object state) throws IOException {  getResponseStateManager(context).writeState(context,state);}  }
class C{  public void testAbsoluteDirectoryReplacement(){  this.task.setAction("stop");  this.task.setHome("home");  this.task.createConfiguration();  this.task.getConfiguration().setHome("configuration-home");  this.task.createZipURLInstaller().setDownloadDir("downlad-dir");  this.task.createZipURLInstaller().setExtractDir("extract-dir");  assertFalse("Container home is already absolute",new File(this.task.getHome()).isAbsolute());  assertFalse("Container configuration home is already absolute",new File(this.task.getConfiguration().getHome()).isAbsolute());  assertFalse("Zip URL installer download directory is already absolute",new File(this.task.getZipURLInstaller().getDownloadDir()).isAbsolute());  assertFalse("Zip URL installer extract directory is already absolute",new File(this.task.getZipURLInstaller().getExtractDir()).isAbsolute());  this.task.execute();  assertTrue("Container home is not absolute",new File(this.task.getHome()).isAbsolute());  assertTrue("Container configuration home is not absolute",new File(this.task.getConfiguration().getHome()).isAbsolute());  assertTrue("Zip URL installer download directory is not absolute",new File(this.task.getZipURLInstaller().getDownloadDir()).isAbsolute());  assertTrue("Zip URL installer extract directory is not absolute",new File(this.task.getZipURLInstaller().getExtractDir()).isAbsolute());}  }
class C{  public static void hideKeyboard(Activity act){  if (act != null && act.getCurrentFocus() != null) {    InputMethodManager inputMethodManager=(InputMethodManager)act.getSystemService(Activity.INPUT_METHOD_SERVICE);    inputMethodManager.hideSoftInputFromWindow(act.getCurrentFocus().getWindowToken(),0);  }}  }
class C{  public static CommMessage createRequest(String operationName,String resourcePath,Value value){  return new CommMessage(getNewMessageId(),operationName,resourcePath,Value.createDeepCopy(value),null);}  }
class C{  public static float intPow(float b,int e){  if (e == 0) {    return 1;  }  float result=1;  float currPow=b;  do {    if ((e & 1) == 1)     result*=currPow;    currPow=currPow * currPow;    e>>=1;  } while (e > 0);  return result;}  }
class C{  public void addPointerPressedListener(ActionListener l){  if (pointerPressedListeners == null) {    pointerPressedListeners=new EventDispatcher();  }  pointerPressedListeners.addListener(l);}  }
class C{  public boolean isSetAttachments(){  return this.attachments != null;}  }
class C{  public static TrackSampleTable parseStbl(Track track,Atom.ContainerAtom stblAtom){  ParsableByteArray stsz=stblAtom.getLeafAtomOfType(Atom.TYPE_stsz).data;  ParsableByteArray chunkOffsets;  Atom.LeafAtom chunkOffsetsAtom=stblAtom.getLeafAtomOfType(Atom.TYPE_stco);  if (chunkOffsetsAtom == null) {    chunkOffsetsAtom=stblAtom.getLeafAtomOfType(Atom.TYPE_co64);  }  chunkOffsets=chunkOffsetsAtom.data;  ParsableByteArray stsc=stblAtom.getLeafAtomOfType(Atom.TYPE_stsc).data;  ParsableByteArray stts=stblAtom.getLeafAtomOfType(Atom.TYPE_stts).data;  Atom.LeafAtom stssAtom=stblAtom.getLeafAtomOfType(Atom.TYPE_stss);  ParsableByteArray stss=stssAtom != null ? stssAtom.data : null;  Atom.LeafAtom cttsAtom=stblAtom.getLeafAtomOfType(Atom.TYPE_ctts);  ParsableByteArray ctts=cttsAtom != null ? cttsAtom.data : null;  stsz.setPosition(Atom.FULL_HEADER_SIZE);  int fixedSampleSize=stsz.readUnsignedIntToInt();  int sampleCount=stsz.readUnsignedIntToInt();  long[] offsets=new long[sampleCount];  int[] sizes=new int[sampleCount];  long[] timestamps=new long[sampleCount];  int[] flags=new int[sampleCount];  if (sampleCount == 0) {    return new TrackSampleTable(offsets,sizes,timestamps,flags);  }  chunkOffsets.setPosition(Atom.FULL_HEADER_SIZE);  int chunkCount=chunkOffsets.readUnsignedIntToInt();  stsc.setPosition(Atom.FULL_HEADER_SIZE);  int remainingSamplesPerChunkChanges=stsc.readUnsignedIntToInt() - 1;  Assertions.checkState(stsc.readInt() == 1,"stsc first chunk must be 1");  int samplesPerChunk=stsc.readUnsignedIntToInt();  stsc.skipBytes(4);  int nextSamplesPerChunkChangeChunkIndex=-1;  if (remainingSamplesPerChunkChanges > 0) {    nextSamplesPerChunkChangeChunkIndex=stsc.readUnsignedIntToInt() - 1;  }  int chunkIndex=0;  int remainingSamplesInChunk=samplesPerChunk;  stts.setPosition(Atom.FULL_HEADER_SIZE);  int remainingTimestampDeltaChanges=stts.readUnsignedIntToInt() - 1;  int remainingSamplesAtTimestampDelta=stts.readUnsignedIntToInt();  int timestampDeltaInTimeUnits=stts.readUnsignedIntToInt();  int remainingSamplesAtTimestampOffset=0;  int remainingTimestampOffsetChanges=0;  int timestampOffset=0;  if (ctts != null) {    ctts.setPosition(Atom.FULL_HEADER_SIZE);    remainingTimestampOffsetChanges=ctts.readUnsignedIntToInt() - 1;    remainingSamplesAtTimestampOffset=ctts.readUnsignedIntToInt();    timestampOffset=ctts.readInt();  }  int nextSynchronizationSampleIndex=-1;  int remainingSynchronizationSamples=0;  if (stss != null) {    stss.setPosition(Atom.FULL_HEADER_SIZE);    remainingSynchronizationSamples=stss.readUnsignedIntToInt();    nextSynchronizationSampleIndex=stss.readUnsignedIntToInt() - 1;  }  long offsetBytes;  if (chunkOffsetsAtom.type == Atom.TYPE_stco) {    offsetBytes=chunkOffsets.readUnsignedInt();  } else {    offsetBytes=chunkOffsets.readUnsignedLongToLong();  }  long timestampTimeUnits=0;  for (int i=0; i < sampleCount; i++) {    offsets[i]=offsetBytes;    sizes[i]=fixedSampleSize == 0 ? stsz.readUnsignedIntToInt() : fixedSampleSize;    timestamps[i]=timestampTimeUnits + timestampOffset;    flags[i]=stss == null ? C.SAMPLE_FLAG_SYNC : 0;    if (i == nextSynchronizationSampleIndex) {      flags[i]=C.SAMPLE_FLAG_SYNC;      remainingSynchronizationSamples--;      if (remainingSynchronizationSamples > 0) {        nextSynchronizationSampleIndex=stss.readUnsignedIntToInt() - 1;      }    }    timestampTimeUnits+=timestampDeltaInTimeUnits;    remainingSamplesAtTimestampDelta--;    if (remainingSamplesAtTimestampDelta == 0 && remainingTimestampDeltaChanges > 0) {      remainingSamplesAtTimestampDelta=stts.readUnsignedIntToInt();      timestampDeltaInTimeUnits=stts.readUnsignedIntToInt();      remainingTimestampDeltaChanges--;    }    if (ctts != null) {      remainingSamplesAtTimestampOffset--;      if (remainingSamplesAtTimestampOffset == 0 && remainingTimestampOffsetChanges > 0) {        remainingSamplesAtTimestampOffset=ctts.readUnsignedIntToInt();        timestampOffset=ctts.readInt();        remainingTimestampOffsetChanges--;      }    }    remainingSamplesInChunk--;    if (remainingSamplesInChunk == 0) {      chunkIndex++;      if (chunkIndex < chunkCount) {        if (chunkOffsetsAtom.type == Atom.TYPE_stco) {          offsetBytes=chunkOffsets.readUnsignedInt();        } else {          offsetBytes=chunkOffsets.readUnsignedLongToLong();        }      }      if (chunkIndex == nextSamplesPerChunkChangeChunkIndex) {        samplesPerChunk=stsc.readUnsignedIntToInt();        stsc.skipBytes(4);        remainingSamplesPerChunkChanges--;        if (remainingSamplesPerChunkChanges > 0) {          nextSamplesPerChunkChangeChunkIndex=stsc.readUnsignedIntToInt() - 1;        }      }      if (chunkIndex < chunkCount) {        remainingSamplesInChunk=samplesPerChunk;      }    } else {      offsetBytes+=sizes[i];    }  }  Util.scaleLargeTimestampsInPlace(timestamps,1000000,track.timescale);  Assertions.checkArgument(remainingSynchronizationSamples == 0);  Assertions.checkArgument(remainingSamplesAtTimestampDelta == 0);  Assertions.checkArgument(remainingSamplesInChunk == 0);  Assertions.checkArgument(remainingTimestampDeltaChanges == 0);  Assertions.checkArgument(remainingTimestampOffsetChanges == 0);  return new TrackSampleTable(offsets,sizes,timestamps,flags);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public Profiler stopCollecting(){  stop=true;  if (thread != null) {    try {      thread.join();    } catch (    InterruptedException e) {    }    thread=null;  }  return this;}  }
class C{  public void initDiskCache(){synchronized (mDiskCacheLock) {    if (mDiskLruCache == null || mDiskLruCache.isClosed()) {      File diskCacheDir=mCacheParams.diskCacheDir;      if (mCacheParams.diskCacheEnabled && diskCacheDir != null) {        if (!diskCacheDir.exists()) {          diskCacheDir.mkdirs();        }        if (Utils.getUsableSpace(diskCacheDir) > mCacheParams.diskCacheSize) {          try {            mDiskLruCache=DiskLruCache.open(diskCacheDir,APP_VERSION,VALUE_COUNT,mCacheParams.diskCacheSize);            if (BuildConfig.DEBUG) {              VolleyLog.d("Disk cache initialized");            }          } catch (          final IOException e) {            mCacheParams.diskCacheDir=null;            VolleyLog.e("initDiskCache - " + e);          }        }      }    }    mDiskCacheStarting=false;    mDiskCacheLock.notifyAll();  }}  }
class C{  public static SystemMemberType fromOrdinal(int ordinal){  return VALUES[ordinal];}  }
class C{  public void addQuat(Quaternion input){  this.dirty=true;  addQuat(input,this);}  }
class C{  public Integer add(JCas aJcas,int aBegin,int aEnd,AnnotationFeature aFeature,Object aValue) throws BratAnnotationException {  if (aBegin == aEnd) {    return updateCas(aJcas.getCas(),aBegin,aEnd,aFeature,aValue);  }  if (crossMultipleSentence || isSameSentence(aJcas,aBegin,aEnd)) {    if (lockToTokenOffsets) {      List<Token> tokens=selectOverlapping(aJcas,Token.class,aBegin,aEnd);      if (tokens.isEmpty()) {        throw new BratAnnotationException("No token is found to annotate");      }      return updateCas(aJcas.getCas(),tokens.get(0).getBegin(),tokens.get(0).getEnd(),aFeature,aValue);    } else     if (allowMultipleToken) {      List<Token> tokens=selectOverlapping(aJcas,Token.class,aBegin,aEnd);      aBegin=tokens.get(0).getBegin();      aEnd=tokens.get(tokens.size() - 1).getEnd();      return updateCas(aJcas.getCas(),aBegin,aEnd,aFeature,aValue);    } else {      return updateCas(aJcas.getCas(),aBegin,aEnd,aFeature,aValue);    }  } else {    throw new MultipleSentenceCoveredException("Annotation coveres multiple sentences, " + "limit your annotation to single sentence!");  }}  }
class C{  private URI canonicalize(String uriString) throws URISyntaxException {  if (uriString == null) {    uriString="local://0@localhost";    return new URI(uriString);  }  URI u=new URI(uriString);  if (u.isAbsolute()) {    if (u.isOpaque()) {      u=new URI(u.getScheme(),"//" + u.getSchemeSpecificPart(),u.getFragment());    }  } else {    if (!uriString.startsWith("//")) {      if (u.getFragment() == null) {        u=new URI("//" + u.getSchemeSpecificPart());      } else {        u=new URI("//" + u.getSchemeSpecificPart() + "#"+ u.getFragment());      }    }  }  return u;}  }
class C{  public static InnerClassAccessMap create(){  return new InnerClassAccessMap();}  }
class C{  public static ItemStack size(ItemStack itemstack,int size){  ItemStack newStack=itemstack.copy();  newStack.stackSize=size;  return newStack;}  }
class C{  static String scanPublicID(StringBuffer publicID,IXMLReader reader) throws IOException, XMLParseException {  if (!XMLUtil.checkLiteral(reader,"UBLIC")) {    return null;  }  XMLUtil.skipWhitespace(reader,null);  publicID.append(XMLUtil.scanString(reader,'\0',null));  XMLUtil.skipWhitespace(reader,null);  return XMLUtil.scanString(reader,'\0',null);}  }
class C{  public void putSymbol(Symbol symbol){  if (symbol.getName() == null)   throw new IllegalArgumentException("null symbol name");  ensureSymbolTable();  symbolTable.put(symbol.getName(),symbol);  symbol.setContainingTable(this);  top.addSymbol(symbol);}  }
class C{  @Override public int hashCode(){  if (cachedHash == 0) {    cachedHash=map.hashCode();  }  return cachedHash;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public OFMatchReconcile(){  ofmWithSwDpid=new OFMatchWithSwDpid();  rcAction=ReconcileAction.NO_CHANGE;  cntx=new FloodlightContext();}  }
class C{  @Entrypoint public static void yieldpointFromNativeEpilogue(){}  }
class C{  public CResolveAllFunctionsAction(final JComponent parent,final IDatabase database){  super("Resolve all imported functions");  m_parent=Preconditions.checkNotNull(parent,"IE01915: Parent argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE01916: Database argument can not be null");}  }
class C{  protected String deriveMappingForUI(String uiBeanName){  SpringUI annotation=getWebApplicationContext().findAnnotationOnBean(uiBeanName,SpringUI.class);  return resolvePropertyPlaceholders(annotation.path());}  }
class C{  public void applySettings(boolean loadCoreComponents){  Locale locale=(Locale)languageOptions.getSelectedItem();  LanguageUtils.setLocale(locale);  ResourceManager.validateLocaleAndFonts(locale);  languageLabel.setText(I18n.tr("Language:"));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.295 -0500",hash_original_method="B5C941269BF1E9CDD155EBF5B7D0DBA9",hash_generated_method="EAECF9932D0154241C5F903CA0B78FCB") private final void growBuffer(){  final int columns=mColumns;  int newsize=size() + 1;  newsize=ArrayUtils.idealIntArraySize(newsize * columns) / columns;  int[] newvalues=new int[newsize * columns];  final int[] valuegap=mValueGap;  final int rowgapstart=mRowGapStart;  int after=mRows - (rowgapstart + mRowGapLength);  if (mValues != null) {    System.arraycopy(mValues,0,newvalues,0,columns * rowgapstart);    System.arraycopy(mValues,(mRows - after) * columns,newvalues,(newsize - after) * columns,after * columns);  }  for (int i=0; i < columns; i++) {    if (valuegap[i] >= rowgapstart) {      valuegap[i]+=newsize - mRows;      if (valuegap[i] < rowgapstart) {        valuegap[i]=rowgapstart;      }    }  }  mRowGapLength+=newsize - mRows;  mRows=newsize;  mValues=newvalues;}  }
class C{  protected Boolean compute(Date value){  if (value == null) {    return true;  } else {    return false;  }}  }
class C{  @Deprecated public static GridTupleV tv(Object... objs){  assert objs != null;  return new GridTupleV(objs);}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  public static boolean isBoolean(final LuaValue target){  return target != null && target.type() == LuaValue.TBOOLEAN;}  }
class C{  public Matrix4f m23(float m23){  this.m23=m23;  properties&=~(PROPERTY_IDENTITY | PROPERTY_AFFINE | PROPERTY_TRANSLATION);  return this;}  }
class C{  private void readCallLogs(String args){  ArrayList<Call> arrayList=mPhoneMgr.getPhoneLogs();  XmppMsg all=new XmppMsg();  int callLogsNumber=Tools.parseInt(args,10);  List<Call> callList=Tools.getLastElements(arrayList,callLogsNumber);  if (callList.size() > 0) {    for (    Call call : callList) {      all.appendItalic(DateFormat.getDateTimeInstance().format(call.date));      all.append(" - ");      all.appendBold(ContactsManager.getContactName(sContext,call.phoneNumber));      all.appendLine(" - " + call.type(sContext) + getString(R.string.chat_call_duration)+ call.duration());    }  } else {    all.appendLine(getString(R.string.chat_no_call));  }  send(all);}  }
class C{  @Override public void addValue(double value,double weight){  m_WeightedSum+=value * weight;  m_WeightedSumSquared+=value * value * weight;  m_SumOfWeights+=weight;  if (m_TM.get(value) == null) {    m_TM.put(value,weight);  } else {    m_TM.put(value,m_TM.get(value) + weight);  }}  }
class C{  public void xaSuspend() throws XAException {  if (!this.isXaSuspended) {    try {      if (LOGGER.isDebugEnabled()) {        LOGGER.logDebug("XAResource.suspend ( " + this.xidToHexString + " , XAResource.TMSUSPEND ) on resource "+ this.resourcename+ " represented by XAResource instance "+ this.xaresource);      }      this.xaresource.end(this.xid,XAResource.TMSUSPEND);      this.isXaSuspended=true;    } catch (    XAException xaerr) {      String msg=interpretErrorCode(this.resourcename,"suspend",this.xid,xaerr.errorCode);      LOGGER.logWarning(msg,xaerr);      throw xaerr;    }  }}  }
class C{  public html addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public VirusInfectionDemo(long seed){  super(seed);}  }
class C{  public ArrayAccessTree buildArrayAccess(ExpressionTree array,ExpressionTree index){  ArrayType arrayType=(ArrayType)InternalUtils.typeOf(array);  JCTree.JCArrayAccess access=maker.Indexed((JCTree.JCExpression)array,(JCTree.JCExpression)index);  access.setType((Type)arrayType.getComponentType());  return access;}  }
class C{  public SnmpIndex(SnmpOid[] oidList){  size=oidList.length;  for (int i=0; i < size; i++) {    oids.addElement(oidList[i]);  }}  }
class C{  @Around("execution(* org.yes.cart.service.domain.impl.CustomerServiceImpl.resetPassword(..))") public Object doResetPassword(final ProceedingJoinPoint pjp) throws Throwable {  return notifyInternal(pjp,false);}  }
class C{  public boolean sendPasswordToBeExpiredMail(Map parameters){  String to=getMailAddressOfUser("root");  if (to == null || to.isEmpty()) {    _log.warn("root's mail address haven't configured, skip sending mail");    return false;  }  String title=String.format("ATTENTION - %s Password Is About To Expire",parameters.get("user"));  String content=MailHelper.readTemplate("PasswordToBeExpireEmail.html");  content=MailHelper.parseTemplate(parameters,content);  getMailHelper().sendMailMessage(to,title,content);  return true;}  }
class C{  private String checkForMatch(String givenString,Collection<String> collectionOfStrings,boolean caseSensitive){  if (givenString == null || collectionOfStrings == null) {    return null;  }  String returnString=null;  Collections.sort(new ArrayList<String>(collectionOfStrings));  for (  String vectorString : collectionOfStrings) {    if (vectorString == null) {      continue;    }    if (caseSensitive) {      if (vectorString.startsWith(givenString)) {        returnString=vectorString;        break;      }    } else {      if (vectorString.toLowerCase(Locale.ENGLISH).startsWith(givenString.toLowerCase(Locale.ENGLISH))) {        returnString=vectorString;        break;      }    }  }  return returnString;}  }
class C{  @Override public void close(int timeout){  if (closed) {    return;  }  closed=true;  if (timeout > 0) {    long start=System.currentTimeMillis();    while (DefaultFuture.hasFuture(HeaderExchangeChannel.this) && System.currentTimeMillis() - start < timeout) {      try {        Thread.sleep(10);      } catch (      InterruptedException e) {        logger.warn(e.getMessage(),e);      }    }  }  close();}  }
class C{  Optional<Aggregation> legacyAggregation(){  if (groupBy.isPresent()) {    return Optional.of(Group.of(groupBy,aggregation));  }  return aggregation;}  }
class C{  public static Map toMap(Object o,boolean duplicate) throws PageException {  if (o instanceof Struct) {    if (duplicate)     return (Map)Duplicator.duplicate(o,false);    return ((Struct)o);  } else   if (o instanceof Map) {    if (duplicate)     return (Map)Duplicator.duplicate(o,false);    return (Map)o;  } else   if (o instanceof Node) {    if (duplicate) {      return toMap(XMLCaster.toXMLStruct((Node)o,false),duplicate);    }    return (XMLCaster.toXMLStruct((Node)o,false));  } else   if (o instanceof ObjectWrap) {    return toMap(((ObjectWrap)o).getEmbededObject(),duplicate);  }  throw new CasterException(o,"Map");}  }
class C{  public void addAll(Collection<Sequence> col){  if (col == null) {    throw new IllegalArgumentException("col is null");  }  for (  Sequence c : col) {    add(c);  }}  }
class C{  public boolean hasActiveBody(){  return activeBody != null;}  }
class C{  protected byte[] encodeSurrogate(char highSurrogate,char lowSurrogate){  return null;}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  public void hide(){  animationController.hide(getElement());}  }
class C{  public static Number pow(Number a,Number b){  return Math.pow(a.doubleValue(),b.doubleValue());}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  private void removeHelpProperties(JComponent component){  component.putClientProperty(HELP_ID_PROPERTY,null);  component.putClientProperty(HELP_SET_PROPERTY,null);}  }
class C{  int count(){  int ct=0;  if (below != null) {    ct+=below.count();  }  ct++;  if (above != null) {    ct+=above.count();  }  return ct;}  }
class C{  public void flush(){  buffer.force();}  }
class C{  public void render(float worldScale,boolean oldRotateOrder){  if (field_1402_i) {    return;  }  if (!showModel) {    return;  }  if (!compiled || forcedRecompile) {    compileDisplayList(worldScale);  }  if (rotateAngleX != 0.0F || rotateAngleY != 0.0F || rotateAngleZ != 0.0F) {    GL11.glPushMatrix();    GL11.glTranslatef(rotationPointX * worldScale,rotationPointY * worldScale,rotationPointZ * worldScale);    if (!oldRotateOrder && rotateAngleY != 0.0F) {      GL11.glRotatef(rotateAngleY * 57.29578F,0.0F,1.0F,0.0F);    }    if (rotateAngleZ != 0.0F) {      GL11.glRotatef((oldRotateOrder ? -1 : 1) * rotateAngleZ * 57.29578F,0.0F,0.0F,1.0F);    }    if (oldRotateOrder && rotateAngleY != 0.0F) {      GL11.glRotatef(-rotateAngleY * 57.29578F,0.0F,1.0F,0.0F);    }    if (rotateAngleX != 0.0F) {      GL11.glRotatef(rotateAngleX * 57.29578F,1.0F,0.0F,0.0F);    }    callDisplayList();    if (childModels != null) {      for (      Object childModel : childModels) {        ((ModelRenderer)childModel).render(worldScale);      }    }    GL11.glPopMatrix();  } else   if (rotationPointX != 0.0F || rotationPointY != 0.0F || rotationPointZ != 0.0F) {    GL11.glTranslatef(rotationPointX * worldScale,rotationPointY * worldScale,rotationPointZ * worldScale);    callDisplayList();    if (childModels != null) {      for (      Object childModel : childModels) {        ((ModelRenderer)childModel).render(worldScale);      }    }    GL11.glTranslatef(-rotationPointX * worldScale,-rotationPointY * worldScale,-rotationPointZ * worldScale);  } else {    callDisplayList();    if (childModels != null) {      for (      Object childModel : childModels) {        ((ModelRenderer)childModel).render(worldScale);      }    }  }}  }
class C{  private void uninstall(){  uninstallListeners();  window=null;  removeAll();}  }
class C{  private void createName(){  ArffSortedTableModel model;  model=(ArffSortedTableModel)m_TableArff.getModel();  if ((model != null) && (model.getInstances() != null)) {    m_LabelName.setText("Relation: " + model.getInstances().relationName());  } else {    m_LabelName.setText("");  }}  }
class C{  public void makeUnselectable(boolean isSelected){  if (isEnabled()) {    myIsSelectedWhenSelectable=isSelected();    setEnabled(false);  }  setSelected(isSelected);}  }
class C{  protected void sendMessage(boolean closed){  if (!mPulseTimerOn) {    if (getNumberOutputBits() == 1) {      if (getControlType() == 0) {        if ((OutputBits.instance().getOutputBit(tBit) ^ getInverted()) != closed) {          OutputBits.instance().setOutputBit(tBit,closed ^ getInverted());        } else {          int kState=getKnownState();          if (closed) {            if ((kState & Turnout.THROWN) != 0) {              OutputBits.instance().setOutputBit(tBit,false ^ getInverted());            }          } else {            if ((kState & Turnout.CLOSED) != 0) {              OutputBits.instance().setOutputBit(tBit,true ^ getInverted());            }          }        }      } else {      }    }  }}  }
class C{  public EdgeAtom(final String id,final String label,final String fromId,final String toId){  super(id,label);  this.fromId=fromId;  this.toId=toId;}  }
class C{  public static String evaluateFormatterEdit(String string,TextEdit edit,Position[] positions){  try {    Document doc=createDocument(string,positions);    edit.apply(doc,0);    if (positions != null) {      for (int i=0; i < positions.length; i++) {        Assert.isTrue(!positions[i].isDeleted,"Position got deleted");      }    }    return doc.get();  } catch (  BadLocationException e) {    log(e);    Assert.isTrue(false,"Formatter created edits with wrong positions: " + e.getMessage());  }  return null;}  }
class C{  public static GeneralizedBlackScholesProcess clone(final GeneralizedBlackScholesProcess process,final SimpleQuote volQuote){  final Handle<? extends Quote> stateVariable=process.stateVariable();  final Handle<YieldTermStructure> dividendYield=process.dividendYield();  final Handle<YieldTermStructure> riskFreeRate=process.riskFreeRate();  final Handle<BlackVolTermStructure> blackVol=process.blackVolatility();  final Handle<BlackVolTermStructure> volatility=new Handle<BlackVolTermStructure>(new BlackConstantVol(blackVol.currentLink().referenceDate(),blackVol.currentLink().calendar(),new Handle<Quote>(volQuote),blackVol.currentLink().dayCounter()));  return new GeneralizedBlackScholesProcess(stateVariable,dividendYield,riskFreeRate,volatility);}  }
class C{  private synchronized void updateLocalInfo(){  if (contributor != null) {    myContribution=new ContributionBox(new Address(contributor.getName()),contributor.getContribution());  }  final Long now=new Long(System.currentTimeMillis());  if (controller != null) {    Set newcomms=controller.getCommands();    if (newcomms == null)     return;    Iterator i=newcomms.iterator();    while (i.hasNext())     commands.put(i.next(),now);  }}  }
class C{  private void free(int i){  if (!allocated[i]) {    throw new AssertionError("Stack " + i + " is not allocated");  }  Address base=baseAddress(i);  SimulatedMemory.unmap(base,sizeInBytes());  allocated[i]=false;}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static WorkspaceConfig createConfig(String devMachineRam,String... machineRams) throws Exception {  return createWorkspace(DEFAULT_USER_NAME,devMachineRam,machineRams).getConfig();}  }
class C{  public static void add(List<String> options,String option,Object value){  if (!value.getClass().isArray())   throw new IllegalArgumentException("Value is not an array!");  for (int i=0; i < Array.getLength(value); i++) {    Object element=Array.get(value,i);    if (element instanceof OptionHandler) {      add(options,option,(OptionHandler)element);    } else {      options.add("-" + option);      options.add("" + element);    }  }}  }
class C{  private String[] combineArrays(String[] firstArray,String[] secondArray){  Set<String> unionSet=new LinkedHashSet<>();  unionSet.addAll(Arrays.asList(firstArray));  unionSet.addAll(Arrays.asList(secondArray));  return unionSet.toArray(new String[unionSet.size()]);}  }
class C{  public static void addCrusherRecipe(ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addCrusherRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  private int findPLV(int M_PriceList_ID){  Timestamp priceDate=null;  String dateStr=Env.getContext(m_ctx,p_WindowNo,"DateOrdered");  if (dateStr != null && dateStr.length() > 0)   priceDate=Env.getContextAsDate(m_ctx,p_WindowNo,"DateOrdered"); else {    dateStr=Env.getContext(m_ctx,p_WindowNo,"DateInvoiced");    if (dateStr != null && dateStr.length() > 0)     priceDate=Env.getContextAsDate(m_ctx,p_WindowNo,"DateInvoiced");  }  if (priceDate == null)   priceDate=new Timestamp(System.currentTimeMillis());  log.config("M_PriceList_ID=" + M_PriceList_ID + " - "+ priceDate);  int retValue=0;  String sql="SELECT plv.M_PriceList_Version_ID, plv.ValidFrom " + "FROM M_PriceList pl, M_PriceList_Version plv " + "WHERE pl.M_PriceList_ID=plv.M_PriceList_ID"+ " AND plv.IsActive='Y'"+ " AND pl.M_PriceList_ID=? "+ "ORDER BY plv.ValidFrom DESC";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,M_PriceList_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next() && retValue == 0) {      Timestamp plDate=rs.getTimestamp(2);      if (!priceDate.before(plDate))       retValue=rs.getInt(1);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  Env.setContext(m_ctx,p_WindowNo,"M_PriceList_Version_ID",retValue);  return retValue;}  }
class C{  public String renderDialogScript(String path,String resourceType){  String html=this._includeResource(path,resourceType,true);  Document document=Jsoup.parse(html);  EditDialog editDialog=null;  for (  Node node : document.body().childNodes()) {    if (node instanceof Element) {      editDialog=parseEditDialog(node);      for (      Node child : node.childNodes()) {        if (child instanceof Element) {          EditDialog childDialog=parseEditDialog(child);          editDialog.setChild(childDialog);          childDialog.setHtml(((Element)child).html());          break;        }      }      break;    }  }  if (editDialog == null) {    return "null";  }  try {    return mapper.writeValueAsString(editDialog);  } catch (  JsonProcessingException e) {    LOG.error("cannot convert editdialog to json",e);    return "null";  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private int binarySearch(String str){  if ((contents.size() == 0) || (str.compareTo(contents.elementAt(0)) < 0)) {    return -1;  }  if (contents.elementAt(contents.size() - 1).compareTo(str) <= 0) {    return contents.size() - 1;  }  int bot=0;  int top=contents.size() - 1;  while (bot + 1 < top) {    int mid=bot + ((top - bot) / 2);    if (str.compareTo(contents.elementAt(mid)) < 0) {      top=mid;    } else {      bot=mid;    }  }  return bot;}  }
class C{  public void executeMethod(final HttpMethod method) throws IOException, HttpException {  if (method == null) {    throw new IllegalArgumentException("Method may not be null");  }  this.hostConfiguration.getParams().setDefaults(this.params);  method.getParams().setDefaults(this.hostConfiguration.getParams());  Collection<?> defaults=(Collection<?>)this.hostConfiguration.getParams().getParameter(HostParams.DEFAULT_HEADERS);  if (defaults != null) {    Iterator<?> i=defaults.iterator();    while (i.hasNext()) {      method.addRequestHeader((Header)i.next());    }  }  try {    int maxRedirects=this.params.getIntParameter(HttpClientParams.MAX_REDIRECTS,100);    for (int redirectCount=0; ; ) {      if (this.conn != null && !hostConfiguration.hostEquals(this.conn)) {        this.conn.setLocked(false);        this.conn.releaseConnection();        this.conn=null;      }      if (this.conn == null) {        this.conn=connectionManager.getConnectionWithTimeout(hostConfiguration,this.params.getConnectionManagerTimeout());        this.conn.setLocked(true);        if (this.params.isAuthenticationPreemptive() || this.state.isAuthenticationPreemptive()) {          LOG.debug("Preemptively sending default basic credentials");          method.getHostAuthState().setPreemptive();          method.getHostAuthState().setAuthAttempted(true);          if (this.conn.isProxied() && !this.conn.isSecure()) {            method.getProxyAuthState().setPreemptive();            method.getProxyAuthState().setAuthAttempted(true);          }        }      }      authenticate(method);      executeWithRetry(method);      if (this.connectMethod != null) {        fakeResponse(method);        break;      }      boolean retry=false;      if (isRedirectNeeded(method)) {        if (processRedirectResponse(method)) {          retry=true;          ++redirectCount;          if (redirectCount >= maxRedirects) {            LOG.error("Narrowly avoided an infinite loop in execute");            throw new RedirectException("Maximum redirects (" + maxRedirects + ") exceeded");          }          if (LOG.isDebugEnabled()) {            LOG.debug("Execute redirect " + redirectCount + " of "+ maxRedirects);          }        }      }      if (isAuthenticationNeeded(method)) {        if (processAuthenticationResponse(method)) {          LOG.debug("Retry authentication");          retry=true;        }      }      if (!retry) {        break;      }      if (method.getResponseBodyAsStream() != null) {        method.getResponseBodyAsStream().close();      }    }  }  finally {    if (this.conn != null) {      this.conn.setLocked(false);    }    if ((releaseConnection || method.getResponseBodyAsStream() == null) && this.conn != null) {      this.conn.releaseConnection();    }  }}  }
class C{  @Override public int fill(FluidStack resource,boolean doFill){  return 0;}  }
class C{  protected void init() throws ConfigurationException, LoggingException {  this.sqlEncoder=new SQLEncoder(logger);}  }
class C{  public static void removePrivateDataProvider(String elementName,String namespace){  String key=getProviderKey(elementName,namespace);  privateDataProviders.remove(key);}  }
class C{  public void ensureDiscoverable(){  if (D)   Log.d(TAG,"ensure discoverable");  if (mBluetoothAdapter.getScanMode() != BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {    Intent discoverableIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);    discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION,300);    context.startActivity(discoverableIntent);  }}  }
class C{  public static void secureDelete(File file) throws IOException {  log.debug("Start of secureDelete");  RandomAccessFile raf=null;  if (file != null && file.exists()) {    try {      file.setWritable(true);      System.gc();      long length=file.length();      raf=new RandomAccessFile(file,"rws");      raf.seek(0);      raf.getFilePointer();      int pos=0;      while (pos < length) {        raf.write(SECURE_DELETE_FILL_BYTES);        pos+=SECURE_DELETE_FILL_BYTES.length;      }    }  finally {      if (raf != null) {        raf.close();        raf=null;      }    }    boolean deleteSuccess=file.delete();    log.debug("Result of delete of file '" + file.getAbsolutePath() + "' was "+ deleteSuccess);  }  log.debug("End of secureDelete");}  }
class C{  private boolean cmd_save(){  KeyNamePair pp=(KeyNamePair)orderField.getSelectedItem();  if (pp != null && pp.getKey() > 0)   return cmd_saveOrder(pp.getKey());  pp=(KeyNamePair)invoiceField.getSelectedItem();  if (pp != null && pp.getKey() > 0)   return cmd_saveInvoice(pp.getKey());  pp=(KeyNamePair)projectField.getSelectedItem();  if (pp != null && pp.getKey() > 0)   return cmd_saveProject(pp.getKey());  log.log(Level.SEVERE,"Nothing selected");  return false;}  }
class C{  public int read() throws IOException {synchronized (lock) {    ensureOpen();    for (; ; ) {      if (nextChar >= nChars) {        fill();        if (nextChar >= nChars)         return -1;      }      if (skipLF) {        skipLF=false;        if (cb[nextChar] == '\n') {          nextChar++;          continue;        }      }      return cb[nextChar++];    }  }}  }
class C{  public static <E extends Comparable<E>>ArrayList<E> removeDuplicates(ArrayList<E> list){  for (int i=0; i < list.size() - 1; i++) {    for (int j=i + 1; j < list.size(); j++) {      if (list.get(i).compareTo(list.get(j)) == 0)       list.remove(j);    }  }  return list;}  }
class C{  private String compute(String left,String right){  if (left == null && right == null) {    return null;  }  return (left == null ? "" : left) + (right == null ? "" : right);}  }
class C{  public WarningSign(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  private DefaultDownloadRequest(String url,RequestMethod requestMethod,String fileFolder,String filename,boolean autoNameByHead,boolean isRange,boolean isDeleteOld){  super(url,requestMethod);  this.mFileDir=fileFolder;  this.mFileName=filename;  this.mAutoNameByHead=autoNameByHead;  this.isRange=isRange;  this.isDeleteOld=isDeleteOld;}  }
class C{  public static void noChildElements(SimpleMethod method,Element element) throws ValidationException {  Node node=element.getFirstChild();  while (node != null) {    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)node;      handleError("Child element <" + childElement.getTagName() + "> is not valid.",method,element);    }    node=node.getNextSibling();  }}  }
class C{  public void testComputeSignificanceDoesntAlterAverage(MutualInfoCalculatorMultiVariate miCalc,int dimensions,int timeSteps) throws Exception {  miCalc.initialise(dimensions,dimensions);  RandomGenerator rg=new RandomGenerator();  double[][] sourceData=rg.generateNormalData(timeSteps,dimensions,0,1);  double[][] destData=rg.generateNormalData(timeSteps,dimensions,0,1);  miCalc.setObservations(sourceData,destData);  double mi=miCalc.computeAverageLocalOfObservations();  System.out.printf("Average was %.5f\n",mi);  int[][] newOrderings=rg.generateDistinctRandomPerturbations(timeSteps,2);  EmpiricalMeasurementDistribution measDist=miCalc.computeSignificance(newOrderings);  assertFalse(mi == measDist.distribution[0]);  for (int i=0; i < 10; i++) {    double lastAverage=miCalc.getLastAverage();    assertEquals(mi,lastAverage);    double averageCheck1=miCalc.computeAverageLocalOfObservations();    assertEquals(mi,averageCheck1);  }}  }
class C{  public void checkKey(Object key) throws PartitionedRegionException {  if (!hasHash) {    return;  }  if (key == null) {    return;  }  int expected=key.hashCode();  if (expected == keyHash) {    return;  }  throw new PartitionedRegionException("Object hashCode inconsistent between cache peers. Here = " + expected + "; peer calculated = "+ keyHash);}  }
class C{  public void testEndOfMessage(){  ParallaxRfidProtocol instance=new ParallaxRfidProtocol();  assertEquals(true,instance.endOfMessage(msgStandalone));}  }
class C{  protected <R extends Representation,P extends RequestParameters>Response put(Request request,RestBackend.Put<R,P> backend,R content,P params){  int version=getVersion(request);  prepareData(version,params,true,content,true);  if (content != null) {    content.setId(params.getId());    content.setETag(params.getETag());  }  backend.put(content,params);  return Response.noContent().build();}  }
class C{  public void listAllEntries() throws IOException, ServiceException {  TableFeed feed=service.getFeed(tablesFeedUrl,TableFeed.class);  for (  TableEntry entry : feed.getEntries()) {    printAndCacheEntry(entry);  }  if (feed.getEntries().size() == 0) {    System.out.println("No entries yet!");  }}  }
class C{  public StatisticNotFoundException(){  super();}  }
class C{  public JCMethodDecl MethodDef(MethodSymbol m,Type mtype,JCBlock body){  return (JCMethodDecl)new JCMethodDecl(Modifiers(m.flags(),Annotations(m.getRawAttributes())),m.name,Type(mtype.getReturnType()),TypeParams(mtype.getTypeArguments()),null,Params(mtype.getParameterTypes(),m),Types(mtype.getThrownTypes()),body,null,m).setPos(pos).setType(mtype);}  }
class C{  @Override public void run(){  MultipleObjectsBundle data=generator.loadData();  if (LOG.isVerbose()) {    LOG.verbose("Writing output ...");  }  try {    if (outputFile.exists() && LOG.isVerbose()) {      LOG.verbose("The file " + outputFile + " already exists, "+ "the generator result will be APPENDED.");    }    try (OutputStreamWriter outStream=new FileWriter(outputFile,true)){      writeClusters(outStream,data);    }   } catch (  IOException e) {    throw new AbortException("IO Error in data generator.",e);  }  if (LOG.isVerbose()) {    LOG.verbose("Done.");  }}  }
class C{  public NotificationChain basicSetFalseCase(Expression newFalseCase,NotificationChain msgs){  Expression oldFalseCase=falseCase;  falseCase=newFalseCase;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.CONDITIONAL_EXPRESSION__FALSE_CASE,oldFalseCase,newFalseCase);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static float intersectRayPlane(float originX,float originY,float originZ,float dirX,float dirY,float dirZ,float a,float b,float c,float d,float epsilon){  float denom=a * dirX + b * dirY + c * dirZ;  if (denom < 0.0f) {    float t=-(a * originX + b * originY + c * originZ + d) / denom;    if (t >= 0.0f)     return t;  }  return -1.0f;}  }
class C{  @PreUpdate void preUpdate(){  this.changedDate=new Date();}  }
class C{  void notifyChange(final String table){  for (  final SQLiteLoaderObserver entry : mActiveLoaders) {    Logger.d(TAG,"Notify change: %s",entry.table);    if (entry.table.contains(table)) {      entry.loader.onContentChanged();    }  }}  }
class C{  public static void plotPoints(double[] a){  int n=a.length;  StdDraw.setXscale(-1,n);  StdDraw.setPenRadius(1.0 / (3.0 * n));  for (int i=0; i < n; i++) {    StdDraw.point(i,a[i]);  }}  }
class C{  public static boolean save(PO po,boolean newRecord){  if (!TranslationTable.isActiveLanguages(false))   return true;  TranslationTable table=TranslationTable.get(po.get_TableName());  if (newRecord)   return table.createTranslation(po);  return table.resetTranslationFlag(po);}  }
class C{  public synchronized void deleteObserver(Observer o){  obs.removeElement(o);}  }
class C{  public String toString(){  return "wallclock(" + time.toString() + ")";}  }
class C{  @Override public Request pop(final boolean delay,final CrawlSwitchboard cs,final RobotsTxt robots) throws IOException {  long sleeptime=0;  Request crawlEntry=null;  CrawlProfile profileEntry=null;  byte[] failhash=null;  while (!this.urlFileIndex.isEmpty()) {    byte[] nexthash=getbest(robots,cs);    if (nexthash == null)     return null;synchronized (this) {      Row.Entry rowEntry=(nexthash == null) ? null : this.urlFileIndex.remove(nexthash);      if (rowEntry == null)       continue;      crawlEntry=new Request(rowEntry);      if (Switchboard.urlBlacklist.isListed(BlacklistType.CRAWLER,crawlEntry.url())) {        ConcurrentLog.fine("CRAWLER","URL '" + crawlEntry.url() + "' is in blacklist.");        continue;      }      profileEntry=cs.get(UTF8.getBytes(crawlEntry.profileHandle()));      if (profileEntry == null) {        ConcurrentLog.fine("Balancer","no profile entry for handle " + crawlEntry.profileHandle());        continue;      }      sleeptime=Latency.getDomainSleepTime(robots,profileEntry,crawlEntry.url());      assert Base64Order.enhancedCoder.equal(nexthash,rowEntry.getPrimaryKeyBytes()) : "result = " + ASCII.String(nexthash) + ", rowEntry.getPrimaryKeyBytes() = "+ ASCII.String(rowEntry.getPrimaryKeyBytes());      assert Base64Order.enhancedCoder.equal(nexthash,crawlEntry.url().hash()) : "result = " + ASCII.String(nexthash) + ", crawlEntry.url().hash() = "+ ASCII.String(crawlEntry.url().hash());      if (failhash != null && Base64Order.enhancedCoder.equal(failhash,nexthash))       break;      break;    }  }  if (crawlEntry == null)   return null;  ClientIdentification.Agent agent=profileEntry == null ? ClientIdentification.yacyInternetCrawlerAgent : profileEntry.getAgent();  long robotsTime=Latency.getRobotsTime(robots,crawlEntry.url(),agent);  Latency.updateAfterSelection(crawlEntry.url(),profileEntry == null ? 0 : robotsTime);  if (delay && sleeptime > 0) {    ConcurrentLog.info("BALANCER","forcing crawl-delay of " + sleeptime + " milliseconds for "+ crawlEntry.url().getHost()+ ": "+ Latency.waitingRemainingExplain(crawlEntry.url(),robots,agent)+ ", domainStacks.size() = "+ this.domainStacks.size()+ ", domainStacksInitSize = "+ this.domStackInitSize);    long loops=sleeptime / 1000;    long rest=sleeptime % 1000;    if (loops < 3) {      rest=rest + 1000 * loops;      loops=0;    }    Thread.currentThread().setName("Balancer waiting for " + crawlEntry.url().getHost() + ": "+ sleeptime+ " milliseconds");synchronized (this) {      if (rest > 0) {        try {          this.wait(rest);        } catch (        final InterruptedException e) {        }      }      for (int i=0; i < loops; i++) {        ConcurrentLog.info("BALANCER","waiting for " + crawlEntry.url().getHost() + ": "+ (loops - i)+ " seconds remaining...");        try {          this.wait(1000);        } catch (        final InterruptedException e) {        }      }    }    Latency.updateAfterSelection(crawlEntry.url(),robotsTime);  }  return crawlEntry;}  }
class C{  public float nextFloat(){  return 0.0f;}  }
class C{  protected void inLocationSelectionClickLocation(String name){  click(viewThat(hasText(name)));  waitForProgressFragment();}  }
class C{  public void printTo(StringBuffer buf,ReadablePartial partial){  DateTimePrinter printer=requirePrinter();  if (partial == null) {    throw new IllegalArgumentException("The partial must not be null");  }  printer.printTo(buf,partial,iLocale);}  }
class C{  private boolean verify(String username){  Subject subject=SecurityUtils.getSubject();  if (subject.hasRole(Role.ADMINISTRATOR.name())) {    return true;  } else {    if (username.equals(((String)subject.getPrincipal()))) {      return true;    }  }  return false;}  }
class C{  public Document makeDocument(){  return new ModalDocument(new Element("root","http://www.xom.nu/fakeRoot"));}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  public SnmpPdu decodeSnmpPdu() throws SnmpStatusException {  SnmpPduPacket pdu=null;  BerDecoder bdec=new BerDecoder(data);  try {    int type=bdec.getTag();    bdec.openSequence(type);switch (type) {case pduGetRequestPdu:case pduGetNextRequestPdu:case pduInformRequestPdu:case pduGetResponsePdu:case pduSetRequestPdu:case pduV2TrapPdu:case pduReportPdu:      SnmpPduRequest reqPdu=new SnmpPduRequest();    reqPdu.requestId=bdec.fetchInteger();  reqPdu.errorStatus=bdec.fetchInteger();reqPdu.errorIndex=bdec.fetchInteger();pdu=reqPdu;break;case pduGetBulkRequestPdu:SnmpPduBulk bulkPdu=new SnmpPduBulk();bulkPdu.requestId=bdec.fetchInteger();bulkPdu.nonRepeaters=bdec.fetchInteger();bulkPdu.maxRepetitions=bdec.fetchInteger();pdu=bulkPdu;break;case pduV1TrapPdu:SnmpPduTrap trapPdu=new SnmpPduTrap();trapPdu.enterprise=new SnmpOid(bdec.fetchOid());byte[] b=bdec.fetchOctetString(SnmpValue.IpAddressTag);if (b.length != 0) trapPdu.agentAddr=new SnmpIpAddress(b); else trapPdu.agentAddr=null;trapPdu.genericTrap=bdec.fetchInteger();trapPdu.specificTrap=bdec.fetchInteger();trapPdu.timeStamp=bdec.fetchInteger(SnmpValue.TimeticksTag);pdu=trapPdu;break;default :throw new SnmpStatusException(snmpRspWrongEncoding);}pdu.type=type;pdu.varBindList=decodeVarBindList(bdec);bdec.closeSequence();} catch (BerException e) {if (SNMP_LOGGER.isLoggable(Level.FINEST)) {SNMP_LOGGER.logp(Level.FINEST,SnmpMessage.class.getName(),"decodeSnmpPdu","BerException",e);}throw new SnmpStatusException(snmpRspWrongEncoding);}catch (IllegalArgumentException e) {if (SNMP_LOGGER.isLoggable(Level.FINEST)) {SNMP_LOGGER.logp(Level.FINEST,SnmpMessage.class.getName(),"decodeSnmpPdu","IllegalArgumentException",e);}throw new SnmpStatusException(snmpRspWrongEncoding);}pdu.version=version;pdu.community=community;pdu.address=address;pdu.port=port;return pdu;}  }
class C{  public void testBusy_handler() throws SQLException, Exception {  TestBusyHandler bh=new TestBusyHandler();  db.busy_handler(bh);  int counter=0;  ThreadPool threadPool=new ThreadPool(numThreads);  ResultSet userTabs;  userTabs=conn.getMetaData().getTables(null,null,null,null);  while (userTabs.next()) {    String tableName=userTabs.getString("TABLE_NAME");    if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {      statement.execute(DatabaseCreator.DROP_TABLE1);    }  }  db.exec(DatabaseCreator.CREATE_TABLE3,null);  db.exec(DatabaseCreator.CREATE_TABLE1,null);  try {    conn.setAutoCommit(false);    int id1=numOfRecords - 3;    threadPool.runTask(createTask1(id1,dbFile.getPath(),tracker));    int id2=numOfRecords + 3;    threadPool.runTask(createTask2(id2,dbFile.getPath(),tracker));    int oldID=5;    int newID=100;    threadPool.runTask(createTask3(oldID,dbFile.getPath(),newID,tracker));    threadPool.join();    List<String> errors=tracker.getErrors();    if (errors.size() > 0) {      for (      String s : errors) {        System.out.println("Round 2 Error: " + s);      }    } else {      fail("No error happened");    }    db.exec("delete from " + DatabaseCreator.TEST_TABLE1 + " where 1",null);    db.exec("delete from " + DatabaseCreator.TEST_TABLE3 + " where 1",null);  }  finally {    conn.setAutoCommit(true);    db.exec(DatabaseCreator.DROP_TABLE1,null);    db.exec(DatabaseCreator.DROP_TABLE3,null);  }}  }
class C{  public void addKeyStore(KeyStore keyStore,File keyStoreFile,Password password){  KeyStoreHistory history=new KeyStoreHistory(keyStore,keyStoreFile,password);  addKeyStoreHistory(history);}  }
class C{  public final long consumption(){  return ((long)pages.size()) << 12;}  }
class C{  public static double incompleteBetaFraction1(double a,double b,double x){  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;  double k1, k2, k3, k4, k5, k6, k7, k8;  double r, t, ans, thresh;  int n;  k1=a;  k2=a + b;  k3=a;  k4=a + 1.0;  k5=1.0;  k6=b - 1.0;  k7=k4;  k8=a + 2.0;  pkm2=0.0;  qkm2=1.0;  pkm1=1.0;  qkm1=1.0;  ans=1.0;  r=1.0;  n=0;  thresh=3.0 * MACHEP;  do {    xk=-(x * k1 * k2) / (k3 * k4);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    xk=(x * k5 * k6) / (k7 * k8);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (qk != 0)     r=pk / qk;    if (r != 0) {      t=Math.abs((ans - r) / r);      ans=r;    } else     t=1.0;    if (t < thresh)     return ans;    k1+=1.0;    k2+=1.0;    k3+=2.0;    k4+=2.0;    k5+=1.0;    k6-=1.0;    k7+=2.0;    k8+=2.0;    if ((Math.abs(qk) + Math.abs(pk)) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {      pkm2*=big;      pkm1*=big;      qkm2*=big;      qkm1*=big;    }  } while (++n < 300);  return ans;}  }
class C{  public double distanceTo(Vector that){  if (this.d != that.d)   throw new IllegalArgumentException("Dimensions don't agree");  return this.minus(that).magnitude();}  }
class C{  public PrincipalId findActiveUserInSystemDomain(String tenantName,String attributeName,String attributeValue) throws NoSuchTenantException, NoSuchIdpException, InvalidPrincipalException, Exception {  return getService().findActiveUserInSystemDomain(tenantName,attributeName,attributeValue,this.getServiceContext());}  }
class C{  public void addPeerDiscovery(PeerDiscovery peerDiscovery){  lock.lock();  try {    if (getMaxConnections() == 0)     setMaxConnections(DEFAULT_CONNECTIONS);    peerDiscoverers.add(peerDiscovery);  }  finally {    lock.unlock();  }}  }
class C{  public static String unescapeHtml(String str){  if (str == null) {    return null;  }  try {    StringWriter writer=new StringWriter((int)(str.length() * 1.5));    unescapeHtml(writer,str);    return writer.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public boolean isUtc(){  return utc;}  }
class C{  public JSONArray put(boolean value){  put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  @Override @CallSuper public void onSupportActionModeFinished(ActionMode mode){}  }
class C{  public HashCodeBuilder append(final float[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final float element : array) {      append(element);    }  }  return this;}  }
class C{  public Message(String text){  this(text,null,TYPE_MESSAGE);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public GifSequenceWriter(ImageOutputStream outputStream,int imageType,int timeBetweenFramesMS,boolean loopContinuously) throws IIOException, IOException {  gifWriter=getWriter();  imageWriteParam=gifWriter.getDefaultWriteParam();  ImageTypeSpecifier imageTypeSpecifier=ImageTypeSpecifier.createFromBufferedImageType(imageType);  imageMetaData=gifWriter.getDefaultImageMetadata(imageTypeSpecifier,imageWriteParam);  String metaFormatName=imageMetaData.getNativeMetadataFormatName();  IIOMetadataNode root=(IIOMetadataNode)imageMetaData.getAsTree(metaFormatName);  IIOMetadataNode graphicsControlExtensionNode=getNode(root,"GraphicControlExtension");  graphicsControlExtensionNode.setAttribute("disposalMethod","restoreToBackgroundColor");  graphicsControlExtensionNode.setAttribute("userInputFlag","FALSE");  graphicsControlExtensionNode.setAttribute("transparentColorFlag","FALSE");  graphicsControlExtensionNode.setAttribute("delayTime",Integer.toString(timeBetweenFramesMS / 10));  graphicsControlExtensionNode.setAttribute("transparentColorIndex","0");  IIOMetadataNode commentsNode=getNode(root,"CommentExtensions");  commentsNode.setAttribute("CommentExtension","Created by MAH");  IIOMetadataNode appEntensionsNode=getNode(root,"ApplicationExtensions");  IIOMetadataNode child=new IIOMetadataNode("ApplicationExtension");  child.setAttribute("applicationID","NETSCAPE");  child.setAttribute("authenticationCode","2.0");  int loop=loopContinuously ? 0 : 1;  child.setUserObject(new byte[]{0x1,(byte)(loop & 0xFF),(byte)((loop >> 8) & 0xFF)});  appEntensionsNode.appendChild(child);  imageMetaData.setFromTree(metaFormatName,root);  gifWriter.setOutput(outputStream);  gifWriter.prepareWriteSequence(null);}  }
class C{  public static Map<String,String> createIdMap(String toolName,LxfGraph aSource){  Map<String,String> ids=new HashMap<>();  if (aSource != null) {    for (    LxfNode n : aSource.getNodes()) {      for (      String tool : n.getAnnotations().keySet()) {        ids.put(n.getAnnotations().get(tool).get("class"),tool);      }    }  }  if (!ids.containsKey(LAYER_DEPENDENCY))   ids.put(LAYER_DEPENDENCY,toolName);  if (!ids.containsKey(LAYER_MORPHOLOGY))   ids.put(LAYER_MORPHOLOGY,toolName);  if (!ids.containsKey(LAYER_SENTENCE))   ids.put(LAYER_SENTENCE,toolName);  if (!ids.containsKey(LAYER_TOKEN))   ids.put(LAYER_TOKEN,toolName);  return ids;}  }
class C{  private static int uarimaxGe(double value,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ixMax=bv.length;  if (value < bv[0] || value >= bv[bv.length - 1])   return ixMax;  int ix=Arrays.binarySearch(bv,value);  if (ix < 0)   ix=Math.abs(ix) - 2;  ixMax=bvi[ix] + 1;  return ixMax;}  }
class C{  HttpsConnection(Context context,HttpHost host,HttpHost proxy,RequestFeeder requestFeeder){  super(context,host,requestFeeder);  mProxyHost=proxy;}  }
class C{  public float parseFloat(){  int mant=0;  int mantDig=0;  boolean mantPos=true;  boolean mantRead=false;  int exp=0;  int expDig=0;  int expAdj=0;  boolean expPos=true;switch (current) {case '-':    mantPos=false;case '+':  current=read();}m1: switch (current) {default :return Float.NaN;case '.':break;case '0':mantRead=true;l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;case '.':case 'e':case 'E':break m1;default :return 0.0f;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':mantRead=true;l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');} else {expAdj++;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}if (current == '.') {current=read();m2: switch (current) {default :case 'e':case 'E':if (!mantRead) {reportUnexpectedCharacterError(current);return 0.0f;}break;case '0':if (mantDig == 0) {l: for (; ; ) {current=read();expAdj--;switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :if (!mantRead) {return 0.0f;}break m2;case '0':}}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');expAdj--;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}}switch (current) {case 'e':case 'E':current=read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '-':expPos=false;case '+':current=read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}en: switch (current) {case '0':l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :break en;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (expDig < 3) {expDig++;exp=exp * 10 + (current - '0');}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}default :}if (!expPos) {exp=-exp;}exp+=expAdj;if (!mantPos) {mant=-mant;}return buildFloat(mant,exp);}  }
class C{  public ProcessStartReplyParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_PROCESS_START);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:02.070 -0500",hash_original_method="1A50CFE77F83A9D61A2F23666507E72F",hash_generated_method="9301EF03F4097022CBB38B7C603C1D58") public boolean add(E e){  if (super.add(e))   return true; else   throw new IllegalStateException("Queue full");}  }
class C{  public boolean addMessage(Context context,String messageId,String message,double trust,double priority,String pseudonym,long timestamp,boolean enforceLimit,long timebound,Location location,String parent,boolean isRead,int minContactsHop,int hop,String exchange,String bigparent){  SQLiteDatabase db=getWritableDatabase();  if (db != null && message != null) {    if (enforceLimit) {      trust=streamlineTrust(trust);    } else {      checkTrust(trust);    }    if (SecurityManager.getCurrentProfile(context).getFeedSize() > 0) {      Cursor cursor=db.rawQuery("SELECT " + COL_ROWID + " FROM "+ TABLE+ " WHERE "+ COL_DELETED+ "="+ FALSE+ " ORDER BY "+ COL_ROWID+ " ASC;",null);      int overflow=cursor.getCount() - SecurityManager.getCurrentProfile(context).getFeedSize();      cursor.close();      if (overflow >= 0) {        db.execSQL("UPDATE " + TABLE + " SET "+ COL_DELETED+ "="+ TRUE+ " WHERE "+ COL_ROWID+ " IN (SELECT "+ COL_ROWID+ " FROM "+ TABLE+ " WHERE "+ COL_DELETED+ "="+ FALSE+ " ORDER BY "+ COL_ROWID+ " ASC LIMIT "+ (1 + overflow)+ ");");      }    }    Cursor cursr=db.rawQuery("SELECT " + COL_BIGPARENT + " FROM "+ TABLE+ " WHERE "+ COL_MESSAGE_ID+ "='"+ bigparent+ "' limit 1;",null);    if (cursr.getCount() > 0) {      cursr.moveToFirst();      String tempBigparent=cursr.getString(cursr.getColumnIndex(COL_BIGPARENT));      if (tempBigparent != null)       bigparent=tempBigparent;    }    cursr.close();    if (bigparent != null)     db.execSQL("UPDATE " + TABLE + " SET "+ COL_BIGPARENT+ "='"+ bigparent+ "' WHERE "+ COL_PARENT+ "='"+ messageId+ "';");    if (message.length() > MAX_MESSAGE_SIZE)     message=message.substring(0,MAX_MESSAGE_SIZE);    Calendar tempCal=Calendar.getInstance();    tempCal.setTimeInMillis(timestamp);    Calendar reducedTimestamp=Utils.reduceCalendarMin(tempCal);    if (containsOrRemoved(message)) {      db.execSQL("UPDATE " + TABLE + " SET "+ COL_TRUST+ "="+ trust+ ","+ COL_DELETED+ "="+ FALSE+ ","+ COL_LIKES+ "="+ priority+ ","+ COL_PSEUDONYM+ "='"+ pseudonym+ "',"+ COL_BIGPARENT+ "='"+ bigparent+ "',"+ COL_PARENT+ "='"+ parent+ "',"+ COL_READ+ "="+ (isRead ? TRUE : FALSE)+ ","+ ((location != null) ? (COL_LATLONG + "='" + location.getLatitude()+ " "+ location.getLongitude()+ "',") : "")+ COL_TIMESTAMP+ "="+ reducedTimestamp.getTimeInMillis()+ ","+ ((exchange != null) ? (COL_EXCHANGE + "=" + exchange+ ",") : "")+ COL_EXPIRE+ "="+ timebound+ " WHERE "+ COL_MESSAGE+ "='"+ message+ "';");      log.debug("Message was already in store and was simply updated.");    } else {      ContentValues content=new ContentValues();      content.put(COL_MESSAGE_ID,messageId);      content.put(COL_MESSAGE,message);      content.put(COL_TRUST,trust);      content.put(COL_LIKES,priority);      if (location != null)       content.put(COL_LATLONG,location.getLatitude() + " " + location.getLongitude());      content.put(COL_PSEUDONYM,pseudonym);      content.put(COL_EXPIRE,timebound);      content.put(COL_TIMESTAMP,reducedTimestamp.getTimeInMillis());      content.put(COL_BIGPARENT,bigparent);      content.put(COL_PARENT,parent);      content.put(COL_READ,isRead ? TRUE : FALSE);      if (exchange != null)       content.put(COL_EXCHANGE,exchange);      content.put(COL_MIN_CONTACTS_FOR_HOP,minContactsHop);      content.put(COL_HOP,hop);      db.insert(TABLE,null,content);      log.debug("Message added to store.");    }    return true;  }  log.debug("Message not added to store, either message or database is null. [" + message + "]");  return false;}  }
class C{  @Override protected void removeAt(int index){  _set[index]=(int)0;  super.removeAt(index);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.247 -0500",hash_original_method="A339A3BD9B311A61AF23D5CD23AA066A",hash_generated_method="75C8DBB5EA65768EA9E86FB77BE0A833") protected void time(Calendar calendar) throws ParseException {  try {    String s=lexer.number();    int hour=Integer.parseInt(s);    calendar.set(Calendar.HOUR_OF_DAY,hour);    lexer.match(':');    s=lexer.number();    int min=Integer.parseInt(s);    calendar.set(Calendar.MINUTE,min);    lexer.match(':');    s=lexer.number();    int sec=Integer.parseInt(s);    calendar.set(Calendar.SECOND,sec);  } catch (  Exception ex) {    throw createParseException("error processing time ");  }}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  return toSVG(gc.getRenderingHints());}  }
class C{  private boolean updateGroupsAndRootGroupsInLDAPByMemberAttribute(StorageOSUserDAO storageOSUser,ValidationFailureReason[] failureReason){  boolean foundUserGroups=false;  if (_type != ProvidersType.ldap) {    return foundUserGroups;  }  String memberEntryDN=storageOSUser.getDistinguishedName();  Set<String> allGroupsOfUser=new HashSet<String>();  findGroupsInLDAPByMemberAttribute(memberEntryDN,allGroupsOfUser,failureReason);  if (CollectionUtils.isEmpty(allGroupsOfUser)) {    return foundUserGroups;  }  for (  String groupWithDomain : allGroupsOfUser) {    if (StringUtils.isNotBlank(groupWithDomain)) {      storageOSUser.addGroup(groupWithDomain);      foundUserGroups=true;      _log.debug("Group {} added to user {}",groupWithDomain,storageOSUser.getDistinguishedName());    }  }  return foundUserGroups;}  }
class C{  public StatusComponent(){  STEPPING=false;  NF=null;  LABEL=new JLabel();  BAR=new JProgressBar();  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  construct();  GUIUtils.setOpaque(false,this);  if (BAR != null && !OSUtils.isMacOSX()) {    BAR.setOpaque(true);  }  BAR.setIndeterminate(true);}  }
class C{  public static void test1(){  DataFlavor df=new DataFlavor("text/plain-test1",null);  String nat="native1";  List<String> natives=fm.getNativesForFlavor(df);  fm.addUnencodedNativeForFlavor(df,nat);  List<String> nativesNew=fm.getNativesForFlavor(df);  if (natives.equals(nativesNew)) {    System.err.println("orig=" + natives);    System.err.println("new=" + nativesNew);    throw new RuntimeException("Test failed");  }  List<DataFlavor> flavors=fm.getFlavorsForNative(nat);  fm.addFlavorForUnencodedNative(nat,df);  List<DataFlavor> flavorsNew=fm.getFlavorsForNative(nat);  if (flavors.equals(flavorsNew)) {    System.err.println("orig=" + flavors);    System.err.println("new=" + flavorsNew);    throw new RuntimeException("Test failed");  }}  }
class C{  public long aggregatedPartSize(){  return aggregatedPartSize;}  }
class C{  public static void export(ProgressCallback progress,StopCallback stop,boolean writeObj,boolean writeMtl){  File objfile=new File(Options.outputDir,Options.objFileName);  File mtlfile=new File(Options.outputDir,Options.mtlFileName);  File tmpdir=new File(Options.outputDir,"temp");  if (tmpdir.exists()) {    Log.error("Cannot create directory: " + tmpdir.getAbsolutePath() + "\nSomething is in the way.",null);    return;  }  try {    if (writeObj)     objfile.createNewFile();    if (writeMtl)     mtlfile.createNewFile();  } catch (  IOException e) {    Log.error("Cannot write to the chosen location!",e);    return;  }  try {    if (writeMtl) {      Materials.copyMTLFile(mtlfile);      Log.info("Saved materials to " + mtlfile.getAbsolutePath());    }    if (writeObj) {      if (Options.maxX - Options.minX == 0 || Options.maxY - Options.minY == 0 || Options.maxZ - Options.minZ == 0) {        Log.error(Messages.getString("MainPanel.SEL_ERR"),null,true);        return;      }      PrintWriter obj_writer=new PrintWriter(new FileWriter(objfile));      Point cs=Chunk.getChunkPos(Options.minX,Options.minZ);      Point ce=Chunk.getChunkPos(Options.maxX + 15,Options.maxZ + 15);      int oxs, oys, ozs;      if (Options.offsetType == OffsetType.CENTER) {        oxs=-(Options.minX + (Options.maxX - Options.minX) / 2);        oys=-Options.minY;        ozs=-(Options.minZ + (Options.maxZ - Options.minZ) / 2);        Log.info("Center offset: " + oxs + "/"+ oys+ "/"+ ozs);      } else       if (Options.offsetType == OffsetType.CUSTOM) {        oxs=Options.offsetX;        oys=0;        ozs=Options.offsetZ;        Log.info("Custom offset: " + oxs + "/"+ oys+ "/"+ ozs);      } else {        oxs=0;        oys=0;        ozs=0;      }      if (Options.useUVFile) {        Log.info("Using file to recalculate UVs: " + Options.UVFile.getAbsolutePath());        try {          UVRecalculate.load(Options.UVFile);        } catch (        Exception e) {          Log.error("Cannot load UV file!",e);          obj_writer.close();          return;        }      }      int chunksToDo=(ce.x - cs.x + 1) * (ce.y - cs.y + 1);      ChunkDataBuffer chunk_buffer=new ChunkDataBuffer(Options.minX,Options.maxX,Options.minY,Options.maxY,Options.minZ,Options.maxZ);      ThreadInputQueue inputQueue=new ThreadInputQueue();      ThreadOutputQueue outputQueue=new ThreadOutputQueue();      WriterRunnable writeRunner=new WriterRunnable(outputQueue,obj_writer,progress,stop,chunksToDo);      writeRunner.setOffset(oxs,oys,ozs);      writeRunner.setScale(Options.scale);      obj_writer.println("mtllib " + mtlfile.getName());      obj_writer.println();      if (!Options.objectPerMaterial && !Options.objectPerBlock && !Options.objectPerChunk) {        obj_writer.println("g minecraft");        obj_writer.println();      }      if (Options.singleMaterial) {        obj_writer.println("usemtl minecraft_material");        obj_writer.println();        if (Options.objectPerBlock)         writeRunner.setPrintUseMTL(false);      }      Banner.resetReadError();      Log.info("Processing chunks...");      Thread[] threads=new Thread[Options.exportThreads];      for (int i=0; i < Options.exportThreads; i++) {        threads[i]=new Thread(new ReaderRunnable(chunk_buffer,cs,ce,inputQueue,outputQueue,stop));        threads[i].setName("ReadThread-" + i);        threads[i].setPriority(Thread.NORM_PRIORITY - 1);        threads[i].start();      }      Thread writeThread=new Thread(writeRunner);      writeThread.setName("WriteThread");      writeThread.start();      long timer=System.nanoTime();      long timer2=System.nanoTime();      for (int cx=cs.x; cx <= ce.x; cx++) {        for (int cz=cs.y; cz <= ce.y; cz++) {          if (chunkExists(cx,cz)) {            inputQueue.add(cx,cz);          }        }      }      Log.info("Adding to queue:" + (System.nanoTime() - timer) / 1000000000d);      inputQueue.finish();      timer=System.nanoTime();      for (      Thread thread : threads) {        thread.join();      }      Log.info("Reading Chunks:" + (System.nanoTime() - timer) / 1000000000d);      timer=System.nanoTime();      outputQueue.finish();      writeThread.join();      Log.info("Writing File:" + (System.nanoTime() - timer) / 1000000000d);      Log.info("Total:" + (System.nanoTime() - timer2) / 1000000000d);      chunk_buffer.removeAllChunks();      obj_writer.close();      if (stop != null && stop.stopRequested())       return;      if (progress != null)       progress.setProgress(1);      Log.info("Saved model to " + objfile.getAbsolutePath());      if (!Options.objectPerBlock && !Options.objectPerChunk) {        Log.info("Sorting OBJ file...");        if (!tmpdir.mkdir()) {          Log.error("Cannot temp create directory: " + tmpdir.getAbsolutePath(),null);          return;        }        File mainfile=new File(tmpdir,"main");        PrintWriter main=new PrintWriter(mainfile);        File vertexfile=new File(tmpdir,"vertex");        PrintWriter vertex=new PrintWriter(vertexfile);        File normalfile=new File(tmpdir,"normal");        PrintWriter normal=new PrintWriter(normalfile);        File uvfile=new File(tmpdir,"uv");        PrintWriter uv=new PrintWriter(uvfile);        BufferedReader objin=new BufferedReader(new FileReader(objfile));        Map<String,FaceFile> faces=new HashMap<String,FaceFile>();        int facefilecount=1;        FaceFile current_ff=null;        String current_g="g default";        int maxcount=(int)objfile.length();        if (maxcount == 0)         maxcount=1;        int count=0;        String line;        while ((line=objin.readLine()) != null) {          if (line.length() == 0)           continue;          count+=line.length() + 1;          if (count > maxcount)           count=maxcount;          if (progress != null)           progress.setProgress(0.5f * (float)count / (float)maxcount);          if (line.startsWith("usemtl ")) {            line=line.substring(7).trim();            if (!faces.containsKey(line)) {              current_ff=new FaceFile();              current_ff.name=line;              current_ff.file=new File(tmpdir,"" + facefilecount);              facefilecount++;              current_ff.writer=new PrintWriter(current_ff.file);              faces.put(line,current_ff);            } else             current_ff=faces.get(line);            if (Options.objectPerChunk) {              current_ff.writer.println();              current_ff.writer.println(current_g);              current_ff.writer.println();            }          } else           if (line.startsWith("f ")) {            if (current_ff != null) {              current_ff.writer.println(line);            }          } else           if (line.startsWith("v ")) {            vertex.println(line);          } else           if (line.startsWith("vn ")) {            normal.println(line);          } else           if (line.startsWith("vt ")) {            uv.println(line);          } else           if (line.startsWith("g ")) {            current_g=line;          } else {            main.println(line);            if (line.startsWith("mtllib"))             main.println();          }        }        objin.close();        vertex.close();        normal.close();        uv.close();        if (Options.singleMaterial) {          main.println("usemtl minecraft_material");          main.println();        }        BufferedReader norm_reader=new BufferedReader(new FileReader(normalfile));        while ((line=norm_reader.readLine()) != null)         main.println(line);        norm_reader.close();        normalfile.delete();        BufferedReader uv_reader=new BufferedReader(new FileReader(uvfile));        while ((line=uv_reader.readLine()) != null)         main.println(line);        uv_reader.close();        uvfile.delete();        BufferedReader vertex_reader=new BufferedReader(new FileReader(vertexfile));        while ((line=vertex_reader.readLine()) != null)         main.println(line);        vertex_reader.close();        vertexfile.delete();        count=0;        maxcount=faces.size();        for (        FaceFile ff : faces.values()) {          String current_mat=ff.name;          ff.writer.close();          count++;          if (progress != null)           progress.setProgress(0.5f + 0.5f * (float)count / (float)maxcount);          vertex.println();          if (Options.objectPerMaterial && !Options.objectPerChunk)           main.println("g " + ff.name);          main.println();          if (!Options.singleMaterial) {            main.println("usemtl " + ff.name);            main.println();          }          BufferedReader reader=new BufferedReader(new FileReader(ff.file));          while ((line=reader.readLine()) != null) {            if (Options.objectPerChunk && line.startsWith("g ")) {              if (Options.objectPerMaterial)               main.println(line + "_" + current_mat); else               main.println(line);            } else             main.println(line);          }          reader.close();          ff.file.delete();        }        main.close();        Filesystem.moveFile(mainfile,objfile);        if (progress != null)         progress.setProgress(1);        if (!tmpdir.delete())         Log.error("Failed to erase temp dir: " + tmpdir.getAbsolutePath() + "\nPlease remove it yourself!",null);      }    }    Log.info("Done!");  } catch (  Exception e) {    Log.error("Error while exporting OBJ:",e);  }}  }
class C{  public BufferedImage createBufferedImage(int width,int height){  return createBufferedImage(width,height,null);}  }
class C{  public static void startActionDownload(Context context,String url){  Intent intent=new Intent(context,DownloadIntentService.class);  intent.setAction(ACTION_DOWNLOAD);  intent.putExtra(IMAGE_URL,url);  context.startService(intent);}  }
class C{  public SprogTurnout(int number,SprogSystemConnectionMemo memo){  super(memo.getSystemPrefix() + "T" + number);  _number=number;  _memo=memo;}  }
class C{  static public void addNotificationListener(JMXConnector jmxConnector,Class<?> mbeanClass,NotificationListener notificationListener) throws InstanceNotFoundException, Exception {  MBeanServerConnection mbsc=jmxConnector.getMBeanServerConnection();  ObjectName objectName=generateMBeanObjectName(mbeanClass);  mbsc.addNotificationListener(objectName,notificationListener,null,null);}  }
class C{  @Category(FlakyTest.class) @Test public void testPut_ValidateDataOnMember_PrimarySecondary_Datastore(){  member1.invoke(null);  FixedPartitionAttributes fpa1=FixedPartitionAttributes.createFixedPartition(Quarter1,true,3);  FixedPartitionAttributes fpa2=FixedPartitionAttributes.createFixedPartition(Quarter2,false,3);  List<FixedPartitionAttributes> fpaList=new ArrayList<FixedPartitionAttributes>();  fpaList.add(fpa1);  fpaList.add(fpa2);  member1.invoke(null);  member2.invoke(null);  fpa1=FixedPartitionAttributes.createFixedPartition(Quarter2,true,3);  fpa2=FixedPartitionAttributes.createFixedPartition(Quarter3,false,3);  fpaList.clear();  fpaList.add(fpa1);  fpaList.add(fpa2);  member2.invoke(null);  member3.invoke(null);  fpa1=FixedPartitionAttributes.createFixedPartition(Quarter3,true,3);  fpa2=FixedPartitionAttributes.createFixedPartition(Quarter4,false,3);  fpaList.clear();  fpaList.add(fpa1);  fpaList.add(fpa2);  member3.invoke(null);  member4.invoke(null);  fpa1=FixedPartitionAttributes.createFixedPartition(Quarter4,true,3);  fpa2=FixedPartitionAttributes.createFixedPartition(Quarter1,false,3);  fpaList.clear();  fpaList.add(fpa1);  fpaList.add(fpa2);  member4.invoke(null);  member1.invoke(null);  member1.invoke(null);  member2.invoke(null);  member3.invoke(null);  member4.invoke(null);  member1.invoke(null);  member2.invoke(null);  member3.invoke(null);  member4.invoke(null);}  }
class C{  public IPv4RangeBuilder addMaskRange(String key,String mask){  long[] fromTo=cidrMaskToMinMax(mask);  if (fromTo == null) {    throw new SearchSourceBuilderException("invalid CIDR mask [" + mask + "] in ip_range aggregation ["+ getName()+ "]");  }  ranges.add(new Range(key,fromTo[0] < 0 ? null : fromTo[0],fromTo[1] < 0 ? null : fromTo[1]));  return this;}  }
class C{  protected void onPrepareRingtonePickerIntent(Intent ringtonePickerIntent){  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI,onRestoreRingtone());  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT,mShowDefault);  if (mShowDefault) {    ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI,RingtoneManager.getDefaultUri(getRingtoneType()));  }  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT,mShowSilent);  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,mRingtoneType);  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,getTitle());}  }
class C{  private void clockSensorChanged(){  if (clockSensor.getKnownState() == Sensor.ACTIVE) {    if (pauseTime == null) {      return;    }    setRun(true);  } else {    if (pauseTime != null) {      return;    }    setRun(false);  }}  }
class C{  @Interruptible public static int computeHeaderSize(Object ref){  return computeHeaderSize(getObjectType(ref));}  }
class C{  public static String replace(String input,String find,String repl,boolean firstOnly,boolean ignoreCase){  int findLen=find.length();  if (findLen == 0)   return input;  if (!ignoreCase && findLen == repl.length()) {    if (find.equals(repl))     return input;    if (!firstOnly && findLen == 1)     return input.replace(find.charAt(0),repl.charAt(0));  }  int pos=ignoreCase ? indexOfIgnoreCase(input,find) : input.indexOf(find);  if (pos == -1)   return input;  int start=0;  StringBuilder sb=new StringBuilder(repl.length() > find.length() ? (int)Math.ceil(input.length() * 1.2) : input.length());  while (pos != -1) {    sb.append(input.substring(start,pos));    sb.append(repl);    start=pos + findLen;    if (firstOnly)     break;    pos=ignoreCase ? indexOfIgnoreCase(input,find,start) : input.indexOf(find,start);  }  if (input.length() > start)   sb.append(input.substring(start));  return sb.toString();}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  public boolean isSpecMethod(SootMethod m){  return spec_methods.contains(m);}  }
class C{  protected static ResultSet search(Connection conn,String text,int limit,int offset,boolean data) throws SQLException {  SimpleResultSet result=createResultSet(data);  if (conn.getMetaData().getURL().startsWith("jdbc:columnlist:")) {    return result;  }  if (text == null || text.trim().length() == 0) {    return result;  }  FullTextSettings setting=FullTextSettings.getInstance(conn);  if (!setting.isInitialized()) {    init(conn);  }  HashSet<String> words=New.hashSet();  addWords(setting,words,text);  HashSet<Integer> rIds=null, lastRowIds=null;  HashMap<String,Integer> allWords=setting.getWordList();  PreparedStatement prepSelectMapByWordId=setting.prepare(conn,SELECT_MAP_BY_WORD_ID);  for (  String word : words) {    lastRowIds=rIds;    rIds=New.hashSet();    Integer wId=allWords.get(word);    if (wId == null) {      continue;    }    prepSelectMapByWordId.setInt(1,wId.intValue());    ResultSet rs=prepSelectMapByWordId.executeQuery();    while (rs.next()) {      Integer rId=rs.getInt(1);      if (lastRowIds == null || lastRowIds.contains(rId)) {        rIds.add(rId);      }    }  }  if (rIds == null || rIds.size() == 0) {    return result;  }  PreparedStatement prepSelectRowById=setting.prepare(conn,SELECT_ROW_BY_ID);  int rowCount=0;  for (  int rowId : rIds) {    prepSelectRowById.setInt(1,rowId);    ResultSet rs=prepSelectRowById.executeQuery();    if (!rs.next()) {      continue;    }    if (offset > 0) {      offset--;    } else {      String key=rs.getString(1);      int indexId=rs.getInt(2);      IndexInfo index=setting.getIndexInfo(indexId);      if (data) {        Object[][] columnData=parseKey(conn,key);        result.addRow(index.schema,index.table,columnData[0],columnData[1],1.0);      } else {        String query=StringUtils.quoteIdentifier(index.schema) + "." + StringUtils.quoteIdentifier(index.table)+ " WHERE "+ key;        result.addRow(query,1.0);      }      rowCount++;      if (limit > 0 && rowCount >= limit) {        break;      }    }  }  return result;}  }
class C{  public RowTotalEditor(final double initialRowTotal){  rowTotalField=new DoubleTextField(initialRowTotal,4,NumberFormatUtil.getInstance().getNumberFormat());  buildGui();}  }
class C{  public void iinc(final int local,final int amount){  mv.visitIincInsn(local,amount);}  }
class C{  public boolean writeToURI(Node nodeArg,String uri) throws LSException {  if (nodeArg == null) {    return false;  }  Serializer serializer=fXMLSerializer;  serializer.reset();  if (nodeArg != fVisitedNode) {    String xmlVersion=getXMLVersion(nodeArg);    fEncoding=getInputEncoding(nodeArg);    if (fEncoding == null) {      fEncoding=fEncoding != null ? fEncoding : getXMLEncoding(nodeArg) == null ? "UTF-8" : getXMLEncoding(nodeArg);    }    serializer.getOutputFormat().setProperty("version",xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION,xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_ENCODING,fEncoding);    if ((nodeArg.getNodeType() != Node.DOCUMENT_NODE || nodeArg.getNodeType() != Node.ELEMENT_NODE || nodeArg.getNodeType() != Node.ENTITY_NODE) && ((fFeatures & XMLDECL) != 0)) {      fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,DOMConstants.DOM3_DEFAULT_FALSE);    }    fVisitedNode=nodeArg;  }  fXMLSerializer.setOutputFormat(fDOMConfigProperties);  try {    if (uri == null) {      String msg=Utils.messages.createMessage(MsgKey.ER_NO_OUTPUT_SPECIFIED,null);      if (fDOMErrorHandler != null) {        fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_NO_OUTPUT_SPECIFIED));      }      throw new LSException(LSException.SERIALIZE_ERR,msg);    } else {      String absoluteURI=SystemIDResolver.getAbsoluteURI(uri);      URL url=new URL(absoluteURI);      OutputStream urlOutStream=null;      String protocol=url.getProtocol();      String host=url.getHost();      if (protocol.equalsIgnoreCase("file") && (host == null || host.length() == 0 || host.equals("localhost"))) {        urlOutStream=new FileOutputStream(getPathWithoutEscapes(url.getPath()));      } else {        URLConnection urlCon=url.openConnection();        urlCon.setDoInput(false);        urlCon.setDoOutput(true);        urlCon.setUseCaches(false);        urlCon.setAllowUserInteraction(false);        if (urlCon instanceof HttpURLConnection) {          HttpURLConnection httpCon=(HttpURLConnection)urlCon;          httpCon.setRequestMethod("PUT");        }        urlOutStream=urlCon.getOutputStream();      }      serializer.setOutputStream(urlOutStream);    }    if (fDOMSerializer == null) {      fDOMSerializer=(DOM3Serializer)serializer.asDOM3Serializer();    }    if (fDOMErrorHandler != null) {      fDOMSerializer.setErrorHandler(fDOMErrorHandler);    }    if (fSerializerFilter != null) {      fDOMSerializer.setNodeFilter(fSerializerFilter);    }    fDOMSerializer.setNewLine(fEndOfLine.toCharArray());    fDOMSerializer.serializeDOM3(nodeArg);  } catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,e.getMessage(),null,e));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }  return true;}  }
class C{  public <T>T put(final Object key,T value){  if (mCache != null) {    mCache.put(key,value);  }  return value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:07.728 -0500",hash_original_method="54F56FCB0FE10A11F3FC3B4B0BA615D4",hash_generated_method="E5158DEF50508063A3FAA4CB78999168") public static boolean isPositiveCompletion(int reply){  return (reply >= 200 && reply < 300);}  }
class C{  @Override public Pane createRootPane(){  BorderPane root=new BorderPane();  StackPane stateView=new StackPane();  stateViewCtrl=new NQueensViewCtrl(stateView);  Parameter[] params=createParameters();  SimulationPaneBuilder builder=new SimulationPaneBuilder();  builder.defineParameters(params);  builder.defineStateView(stateView);  builder.defineInitMethod(null);  builder.defineSimMethod(null);  simPaneCtrl=builder.getResultFor(root);  simPaneCtrl.setParam(SimulationPaneCtrl.PARAM_SIM_SPEED,1);  return root;}  }
class C{  @Override public void shutdown(){  if (queue != null) {    queue.stop();    queue=null;  }}  }
class C{  public void tick(){  if (!changed)   return;  Iterator<E> joinIt=joinQueue.iterator();  while (joinIt.hasNext()) {    this.add(joinIt.next());    joinIt.remove();  }  Iterator<E> removeIt=removeQueue.iterator();  while (removeIt.hasNext()) {    this.remove(removeIt.next());    removeIt.remove();  }  changed=false;  removeIt=null;  joinIt=null;}  }
class C{  public void doSomethingElse(String z){  if (true)   System.out.println("True");}  }
class C{  private void writeLocations(Track track,long offset) throws InterruptedException {  boolean wroteTrack=false;  boolean wroteSegment=false;  boolean isLastLocationValid=false;  TrackWriterLocationFactory locationFactory=new TrackWriterLocationFactory();  int locationNumber=0;  LocationIterator locationIterator=null;  try {    locationIterator=myTracksProviderUtils.getTrackPointLocationIterator(track.getId(),-1L,false,locationFactory);    while (locationIterator.hasNext()) {      if (Thread.interrupted()) {        throw new InterruptedException();      }      Location location=locationIterator.next();      setLocationTime(location,offset);      locationNumber++;      boolean isLocationValid=LocationUtils.isValidLocation(location);      boolean isSegmentValid=isLocationValid && isLastLocationValid;      if (!wroteTrack && isSegmentValid) {        trackWriter.writeBeginTrack(track,locationFactory.lastLocation);        wroteTrack=true;      }      if (isSegmentValid) {        if (!wroteSegment) {          trackWriter.writeOpenSegment();          wroteSegment=true;          trackWriter.writeLocation(locationFactory.lastLocation);        }        trackWriter.writeLocation(location);        if (trackExporterListener != null) {          trackExporterListener.onProgressUpdate(locationNumber,track.getNumberOfPoints());        }      } else {        if (wroteSegment) {          trackWriter.writeCloseSegment();          wroteSegment=false;        }      }      locationFactory.swapLocations();      isLastLocationValid=isLocationValid;    }    if (wroteSegment) {      trackWriter.writeCloseSegment();      wroteSegment=false;    }    if (wroteTrack) {      Location lastValidTrackPoint=myTracksProviderUtils.getLastValidTrackPoint(track.getId());      setLocationTime(lastValidTrackPoint,offset);      trackWriter.writeEndTrack(track,lastValidTrackPoint);    } else {      trackWriter.writeBeginTrack(track,null);      trackWriter.writeEndTrack(track,null);    }  }  finally {    if (locationIterator != null) {      locationIterator.close();    }  }}  }
class C{  public Protocol(PluginContext context,SocketWrapper socket) throws IOException {  this.pluginContext=context;  this.socket=socket;  oos=new ObjectOutputStream(new BufferedOutputStream(socket.getOutputStream()));  oos.flush();  if (context instanceof ReplicatorRuntime) {    ReplicatorRuntime runtime=(ReplicatorRuntime)context;    if (runtime.getOpenReplicatorContext() instanceof OpenReplicatorManager) {      OpenReplicatorManager manager=(OpenReplicatorManager)runtime.getOpenReplicatorContext();      rmiHost=manager.getRmiHost();      rmiPort=manager.getRmiPort();    }  }  resetPeriod=1;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    XPathContext xctxt=transformer.getXPathContext();    int sourceNode=xctxt.getCurrentNode();    XObject value=m_selectExpression.execute(xctxt,sourceNode,this);    SerializationHandler handler=transformer.getSerializationHandler();    if (null != value) {      int type=value.getType();      String s;switch (type) {case XObject.CLASS_BOOLEAN:case XObject.CLASS_NUMBER:case XObject.CLASS_STRING:        s=value.str();      handler.characters(s.toCharArray(),0,s.length());    break;case XObject.CLASS_NODESET:  DTMIterator nl=value.iter();DTMTreeWalker tw=new TreeWalker2Result(transformer,handler);int pos;while (DTM.NULL != (pos=nl.nextNode())) {DTM dtm=xctxt.getDTMManager().getDTM(pos);short t=dtm.getNodeType(pos);if (t == DTM.DOCUMENT_NODE) {for (int child=dtm.getFirstChild(pos); child != DTM.NULL; child=dtm.getNextSibling(child)) {  tw.traverse(child);}} else if (t == DTM.ATTRIBUTE_NODE) {SerializerUtils.addAttribute(handler,pos);} else {tw.traverse(pos);}}break;case XObject.CLASS_RTREEFRAG:SerializerUtils.outputResultTreeFragment(handler,value,transformer.getXPathContext());break;default :s=value.str();handler.characters(s.toCharArray(),0,s.length());break;}}} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);}}  }
class C{  public static double gamma(double x){  return Math.exp(logGamma(x));}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  @ObjectiveCName("startDownloadingWithReference:") public void startDownloading(FileReference reference){  modules.getFilesModule().startDownloading(reference);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  @Override public void transform(AffineTransform tx){  if (get(TRANSFORM) != null || (tx.getType() & (AffineTransform.TYPE_TRANSLATION)) != tx.getType()) {    if (get(TRANSFORM) == null) {      TRANSFORM.setClone(this,tx);    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    Point2D.Double anchor=getStartPoint();    Point2D.Double lead=getEndPoint();    setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));    if (get(FILL_GRADIENT) != null && !get(FILL_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=FILL_GRADIENT.getClone(this);      g.transform(tx);      set(FILL_GRADIENT,g);    }    if (get(STROKE_GRADIENT) != null && !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=STROKE_GRADIENT.getClone(this);      g.transform(tx);      set(STROKE_GRADIENT,g);    }  }  invalidate();}  }
class C{  public NotificationChain basicSetDeepEnterSequence(Sequence newDeepEnterSequence,NotificationChain msgs){  Sequence oldDeepEnterSequence=deepEnterSequence;  deepEnterSequence=newDeepEnterSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_REGION__DEEP_ENTER_SEQUENCE,oldDeepEnterSequence,newDeepEnterSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public String maximumVariancePercentageAllowedTipText(){  return "Set the threshold for the highest variance allowed before a nominal attribute will be deleted." + "Specifically, if (number_of_distinct_values / total_number_of_values * 100)" + " is greater than this value then the attribute will be removed.";}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.752 -0500",hash_original_method="046A4642208AB0946E7553D201BA8A62",hash_generated_method="FEFD3AEF3C654851B345F063F22ACBC3") private boolean compareAndDecrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect - 1);}  }
class C{  @Override public boolean formatPercent(){  if (type == KAPPA) {    return false;  } else {    return true;  }}  }
class C{  public void saveWavFile(byte[] pcmdata,int srate,int channel,int format){  byte[] header=new byte[44];  byte[] data=pcmdata;  long totalDataLen=data.length + 36;  long bitrate=srate * channel * format;  header[0]='R';  header[1]='I';  header[2]='F';  header[3]='F';  header[4]=(byte)(totalDataLen & 0xff);  header[5]=(byte)((totalDataLen >> 8) & 0xff);  header[6]=(byte)((totalDataLen >> 16) & 0xff);  header[7]=(byte)((totalDataLen >> 24) & 0xff);  header[8]='W';  header[9]='A';  header[10]='V';  header[11]='E';  header[12]='f';  header[13]='m';  header[14]='t';  header[15]=' ';  header[16]=(byte)format;  header[17]=0;  header[18]=0;  header[19]=0;  header[20]=1;  header[21]=0;  header[22]=(byte)channel;  header[23]=0;  header[24]=(byte)(srate & 0xff);  header[25]=(byte)((srate >> 8) & 0xff);  header[26]=(byte)((srate >> 16) & 0xff);  header[27]=(byte)((srate >> 24) & 0xff);  header[28]=(byte)((bitrate / 8) & 0xff);  header[29]=(byte)(((bitrate / 8) >> 8) & 0xff);  header[30]=(byte)(((bitrate / 8) >> 16) & 0xff);  header[31]=(byte)(((bitrate / 8) >> 24) & 0xff);  header[32]=(byte)((channel * format) / 8);  header[33]=0;  header[34]=16;  header[35]=0;  header[36]='d';  header[37]='a';  header[38]='t';  header[39]='a';  header[40]=(byte)(data.length & 0xff);  header[41]=(byte)((data.length >> 8) & 0xff);  header[42]=(byte)((data.length >> 16) & 0xff);  header[43]=(byte)((data.length >> 24) & 0xff);  try {    raf.write(header,0,44);    raf.write(data);    raf.close();  } catch (  IOException e) {    Log.e(TAG,"Error writing data to wav file");    e.printStackTrace();  }  Log.e(TAG,"wrote Wav File");}  }
class C{  public void createPanel(Layer[] layers){  createLayerClasses(layers);  createPanel();}  }
class C{  static void writeArrayTable(ObjectOutputStream s,ArrayTable table) throws IOException {  Object keys[];  if (table == null || (keys=table.getKeys(null)) == null) {    s.writeInt(0);  } else {    int validCount=0;    for (int counter=0; counter < keys.length; counter++) {      Object key=keys[counter];      if ((key instanceof Serializable && table.get(key) instanceof Serializable) || (key instanceof ClientPropertyKey && ((ClientPropertyKey)key).getReportValueNotSerializable())) {        validCount++;      } else {        keys[counter]=null;      }    }    s.writeInt(validCount);    if (validCount > 0) {      for (      Object key : keys) {        if (key != null) {          s.writeObject(key);          s.writeObject(table.get(key));          if (--validCount == 0) {            break;          }        }      }    }  }}  }
class C{  public void addPrintln(String message){  addGetstatic("java.lang.System","err","Ljava/io/PrintStream;");  addLdc(message);  addInvokevirtual("java.io.PrintStream","println","(Ljava/lang/String;)V");}  }
class C{  static Object substitute(Object arg){  if (arg instanceof Class<?>) {    return ((Class<?>)arg).getCanonicalName();  } else {    return arg;  }}  }
class C{  @PUT @Path("/{providerName}") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public IdentityProviderDTO update(@PathParam("providerName") String providerName,IdentityProviderDTO identityProvider){  validateProviderType(identityProvider.getType());  validateAuthenticationType(identityProvider.getType(),identityProvider.getAuthenticationType());  try {    IIdentityStoreData identityStoreData=IdentityProviderMapper.getIdentityStoreData(identityProvider);    getIDMClient().setProvider(tenant,identityStoreData);    return IdentityProviderMapper.getIdentityProviderDTO(getIDMClient().getProvider(tenant,providerName));  } catch (  NoSuchTenantException e) {    log.warn("Failed to update identity provider '{}' for tenant '{}'",providerName,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException|IDMLoginException|InvalidProviderException e) {    log.warn("Failed to update identity provider '{}' for tenant {} due to a client side error",providerName,tenant,e);    throw new BadRequestException(sm.getString("res.provider.update.failed",providerName,tenant),e);  }catch (  Exception e) {    log.error("Failed to update identity provider '{}' for tenant '{}' due to a server side error",providerName,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:55.327 -0500",hash_original_method="55D7CD04E09ADF38D9006E9AF738C98A",hash_generated_method="81C27825B791A36CD6CE2C59B1B76623") public TimeInfo(NtpV3Packet msgPacket,long returnTime,boolean doComputeDetails){  this(msgPacket,returnTime,null,doComputeDetails);}  }
class C{  private void executeSave(HttpServletRequest request,WebSessionCtx wsc,WWindowStatus ws){  log.info("");  boolean error=updateFields(request,wsc,ws);  log.fine("Mandatory check");  int size=ws.curTab.getFieldCount();  for (int i=0; i < size; i++) {    GridField field=ws.curTab.getField(i);    if (field.isMandatory(true)) {      Object value=field.getValue();      if (value == null || value.toString().length() == 0) {        field.setInserting(true);        field.setError(true);        field.setErrorValue(value == null ? null : value.toString());        if (!error)         error=true;        log.info("Mandatory Error: " + field.getColumnName());      } else       field.setError(false);    }  }  if (error)   return;  if (!ws.curTab.dataSave(true))   ws.curTab.dataIgnore();  log.fine("done");}  }
class C{  public final void print(CharSegment segment) throws IOException {  print(segment.buffer(),segment.offset(),segment.length());}  }
class C{  @Override public void clear(){  if (mSize != 0) {    freeArrays(mHashes,mArray,mSize);    mHashes=SupportContainerInternals.EMPTY_INTS;    mArray=SupportContainerInternals.EMPTY_OBJECTS;    mSize=0;  }}  }
class C{  public void selfAdd(SymetricalMatrix s){  if ((rows != s.rows) || (columns != s.columns)) {    throw new IllegalArgumentException("cannot add a " + s.rows + 'x'+ s.columns+ " matrix to a "+ rows+ 'x'+ columns+ " matrix");  }  for (int i=0; i < rows; ++i) {    int indexU=i * (columns + 1);    int indexL=indexU;    data[indexU]+=s.data[indexU];    for (int j=i + 1; j < columns; ++j) {      ++indexU;      indexL+=columns;      data[indexU]+=s.data[indexU];      data[indexL]=data[indexU];    }  }}  }
class C{  public static byte[] copyOfRange(byte[] data,int from,int to){  int newLength=getLength(from,to);  byte[] tmp=new byte[newLength];  if (data.length - from < newLength) {    System.arraycopy(data,from,tmp,0,data.length - from);  } else {    System.arraycopy(data,from,tmp,0,newLength);  }  return tmp;}  }
class C{  private void verifyExtraEntryFromOpLogs(){  assertTrue("Cache is found as null ",cache != null);  Region rgn=cache.getRegion(regionName);  assertEquals(0,rgn.size());}  }
class C{  public void removePair(String owner,String service,String name) throws ServerException, NotFoundException {  sshDao.remove(owner,service,name);}  }
class C{  @Deprecated public boolean containsAllRelatedObjects(@NonNull OddObject oddObject){  for (  Relationship relationship : oddObject.getRelationships()) {    for (    Identifier identifier : relationship.getIdentifiers()) {      if (getObject(identifier) == null)       return false;    }  }  return true;}  }
class C{  private int viewOpenCount(final INaviView view){  int counter=0;  for (int i=0; i < getOpenGraphCount(); i++) {    final IGraphPanel component=(IGraphPanel)m_tabbedPane.getComponentAt(i);    if (view == component.getModel().getGraph().getRawView()) {      counter++;    }  }  return counter;}  }
class C{  @Override protected void onPause(){  super.onPause();  if (mProgressDialog != null) {    mProgressDialog.dismiss();  }  paused=true;  LocalBroadcastManager.getInstance(this).unregisterReceiver(broadcastReceiver);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TransportConfiguration(){  this.params=new HashMap<>();}  }
class C{  @Override public final int delete(final Uri uri,final String selection,final String[] selectionArgs){  final SQLiteDatabase dbConnection=db.getWritableDatabase();  int deleteCount=0;  try {    dbConnection.beginTransaction();switch (URI_MATCHER.match(uri)) {case SITE_DIR:      deleteCount=dbConnection.delete(SiteTable.TABLE_NAME,selection,selectionArgs);    dbConnection.setTransactionSuccessful();  break;case SITE_ID:deleteCount=dbConnection.delete(SiteTable.TABLE_NAME,SiteTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case USERINFO_DIR:deleteCount=dbConnection.delete(UserInfoTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case USERINFO_ID:deleteCount=dbConnection.delete(UserInfoTable.TABLE_NAME,UserInfoTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case FEATURED_USERS_DIR:deleteCount=dbConnection.delete(Featured_usersTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case FEATURED_USERS_ID:deleteCount=dbConnection.delete(Featured_usersTable.TABLE_NAME,Featured_usersTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case CATEGORY_PROPERTIES_DIR:deleteCount=dbConnection.delete(Category_propertiesTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case CATEGORY_PROPERTIES_ID:deleteCount=dbConnection.delete(Category_propertiesTable.TABLE_NAME,Category_propertiesTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case CATEGORIES_DIR:deleteCount=dbConnection.delete(CategoriesTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case CATEGORIES_ID:deleteCount=dbConnection.delete(CategoriesTable.TABLE_NAME,CategoriesTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case TOPICS_DIR:deleteCount=dbConnection.delete(TopicsTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICS_ID:deleteCount=dbConnection.delete(TopicsTable.TABLE_NAME,TopicsTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case TOPICSDETAILS_DIR:deleteCount=dbConnection.delete(TopicsDetailsTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICSDETAILS_ID:deleteCount=dbConnection.delete(TopicsDetailsTable.TABLE_NAME,TopicsDetailsTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case TOPICSPARTICIPANTS_DIR:deleteCount=dbConnection.delete(TopicsParticipantsTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICSPARTICIPANTS_ID:deleteCount=dbConnection.delete(TopicsParticipantsTable.TABLE_NAME,TopicsParticipantsTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case SUGGESTED_TOPICS_DIR:deleteCount=dbConnection.delete(Suggested_topicsTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case SUGGESTED_TOPICS_ID:deleteCount=dbConnection.delete(Suggested_topicsTable.TABLE_NAME,Suggested_topicsTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case CATEGORY_GROUP_PERMISSIONS_DIR:deleteCount=dbConnection.delete(Category_group_permissionsTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case CATEGORY_GROUP_PERMISSIONS_ID:deleteCount=dbConnection.delete(Category_group_permissionsTable.TABLE_NAME,Category_group_permissionsTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case TOPICS_USERS_DIR:deleteCount=dbConnection.delete(Topics_usersTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICS_USERS_ID:deleteCount=dbConnection.delete(Topics_usersTable.TABLE_NAME,Topics_usersTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case TOPICS_PROPERTIES_DIR:deleteCount=dbConnection.delete(Topics_propertiesTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICS_PROPERTIES_ID:deleteCount=dbConnection.delete(Topics_propertiesTable.TABLE_NAME,Topics_propertiesTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;case TOPIC_POSTERS_DIR:deleteCount=dbConnection.delete(Topic_postersTable.TABLE_NAME,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPIC_POSTERS_ID:deleteCount=dbConnection.delete(Topic_postersTable.TABLE_NAME,Topic_postersTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;default :throw new IllegalArgumentException("Unsupported URI:" + uri);}}  finally {dbConnection.endTransaction();}if (deleteCount > 0) {getContext().getContentResolver().notifyChange(uri,null);}return deleteCount;}  }
class C{  private static PackedInts.Mutable createArray(int length,List<Integer> runs){  PackedInts.Mutable array=PackedInts.getMutable(length,1,0);  int endRun=-1;  for (  long len : runs) {    array.set(endRun+=len,1);  }  array.set(length - 1,0);  return array;}  }
class C{  static OptimizedObjectInputStream in() throws IgniteInterruptedCheckedException {  if (inPool != null) {    try {      return inPool.take();    } catch (    InterruptedException e) {      throw new IgniteInterruptedCheckedException("Failed to take input object stream from pool (thread interrupted).",e);    }  } else   return holder().acquireIn();}  }
class C{  public GridWorkbench(Properties ctx,int AD_Window_ID){  m_ctx=ctx;  m_windows.add(new WBWindow(TYPE_WINDOW,AD_Window_ID));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderBlue=args[0];  inputHeaderGreen=args[1];  inputHeaderRed=args[2];  outputHeader=args[3];  if ((inputHeaderRed == null) || (inputHeaderGreen == null) || (inputHeaderBlue == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    int r, g, b;    double z;    float progress=0;    if (inputHeaderRed.toLowerCase().contains("not specified")) {      inputHeaderRed=inputHeaderGreen;      inputHeaderGreen=inputHeaderBlue;    }    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    if ((green.getNumberRows() != rows) || (green.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    double noData=red.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeaderRed,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("rgb.pal");    outputFile.setDataScale(WhiteboxRaster.DataScale.RGB);    if (!inputHeaderGreen.equals(inputHeaderBlue)) {      WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);      if ((blue.getNumberRows() != rows) || (blue.getNumberColumns() != cols)) {        showFeedback("All input images must have the same dimensions.");        return;      }      redMin=red.getDisplayMinimum();      greenMin=green.getDisplayMinimum();      blueMin=blue.getDisplayMinimum();      redRange=red.getDisplayMaximum() - redMin;      greenRange=green.getDisplayMaximum() - greenMin;      blueRange=blue.getDisplayMaximum() - blueMin;      double[] dataRed, dataGreen, dataBlue;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      red.close();      green.close();      blue.close();    } else {      redMin=red.getDisplayMinimum();      greenMin=green.getDisplayMinimum();      blueMin=greenMin;      redRange=red.getDisplayMaximum() - redMin;      greenRange=green.getDisplayMaximum() - greenMin;      blueRange=greenRange;      double[] dataRed, dataGreen;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataGreen[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      red.close();      green.close();    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isBoundsEnforced(){  return boundsEnforced;}  }
class C{  public void go(Writer writer) throws TransformerException {  createXCardDocument().write(writer,outputProperties);}  }
class C{  public void addControl(Control control){  controls.add(control);}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      processStartedState(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public Geometry(ColladaAbstractGeometry geometry){  this.colladaGeometry=geometry;}  }
class C{  public void addVarDecl(String name,String className,int line){  VarDecl ref=new VarDecl(name,className,line);  (varDecls != null ? varDecls : (varDecls=new LinkedHashMap<String,VarDecl>())).put(name,ref);  addImportName(className,line);}  }
class C{  public Ray mul(Matrix4 matrix){  tmp.set(origin).add(direction);  tmp.mul(matrix);  origin.mul(matrix);  direction.set(tmp.sub(origin));  return this;}  }
class C{  public Object clone(){  OpenLongObjectHashMap copy=(OpenLongObjectHashMap)super.clone();  copy.table=(long[])copy.table.clone();  copy.values=(Object[])copy.values.clone();  copy.state=(byte[])copy.state.clone();  return copy;}  }
class C{  public void mousePressed(MouseEvent e){  if (isVisible())   e.consume();}  }
class C{  public Object clone(){  GVector v=null;  try {    v=(GVector)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  v.values=new double[length];  for (int i=0; i < length; i++) {    v.values[i]=values[i];  }  return v;}  }
class C{  private static void MIR2MC(ArrayList<OptimizationPlanElement> p){  addComponent(p,new ConvertMIRtoMC());}  }
class C{  public SignerInfoGenerator build(ContentSigner contentSigner,byte[] subjectKeyIdentifier) throws OperatorCreationException {  SignerIdentifier sigId=new SignerIdentifier(new DEROctetString(subjectKeyIdentifier));  return createGenerator(contentSigner,sigId);}  }
class C{  @Nullable public V oldValue(){  return oldVal;}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(FileChooserDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new FileChooserDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  static void dumbDeleteRecrusive(File file) throws IOException {  if (file.isDirectory()) {    for (    File entry : file.listFiles()) {      dumbDeleteRecrusive(entry);    }  }  if (!file.delete() && file.exists()) {    throw new IOException("could not delete: " + file);  }}  }
class C{  public void addBiomeType(BiomeDictionary.Type type){  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type)));  entryList.remove(BiomeGenBase.hell);  entryList.remove(BiomeGenBase.sky);  Iterator<BiomeGenBase> iter=entryList.iterator();  while (iter.hasNext()) {    BiomeGenBase nextbiome=iter.next();    for (    BiomeEntry entry : allowedBiomes) {      if (BiomeDictionary.areBiomesEquivalent(entry.biome,nextbiome))       iter.remove();    }  }  allowedBiomes.addAll(getBiomesEntries(entryList));}  }
class C{  @Override protected void finalize() throws Throwable {  this.errorCallback=null;  super.finalize();}  }
class C{  public Boolean isChangeTrackingSupported(){  return changeTrackingSupported;}  }
class C{  public void addParameter(IntParameter param,Distribution dist){  if (param == null)   throw new IllegalArgumentException("null not allowed for parameter");  searchParams.add(param);  searchValues.add(dist.clone());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean itagIsSupported(int itag){  for (  ItagItem item : itagList) {    if (itag == item.id) {      return true;    }  }  return false;}  }
class C{  public SunJDKParser(BufferedReader bis,Map threadStore,int lineCounter,boolean withCurrentTimeStamp,int startCounter,DateMatcher dm){  super(bis,dm);  this.threadStore=threadStore;  this.withCurrentTimeStamp=withCurrentTimeStamp;  this.lineCounter=lineCounter;  this.counter=startCounter;}  }
class C{  public final double calculateIntervalLikelihood(DemographicFunction demoFunction,double width,double timeOfPrevCoal,int lineageCount){  return calculateIntervalLikelihood(demoFunction,width,timeOfPrevCoal,lineageCount,CoalescentEventType.COALESCENT);}  }
class C{  public int hashCode(){  return thisX500Name.hashCode();}  }
class C{  private String constructRemoveISCSIQuery(String systemId,String hsdId,List<String> scsiNameList,String model){  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray array=new StorageArray(systemId);  Delete deleteOp=new Delete(HDSConstants.ISCSI_NAME_FOR_HSD_TARGET);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.DELETE,deleteOp);  attributeMap.put(HDSConstants.MODEL,model);  HostStorageDomain hsd=new HostStorageDomain(hsdId);  attributeMap.put(HDSConstants.HOST_STORAGE_DOMAIN,hsd);  List<ISCSIName> iSCSIObjList=new ArrayList<ISCSIName>();  if (null != scsiNameList && !scsiNameList.isEmpty()) {    for (    String iScsiName : scsiNameList) {      ISCSIName iSCSIName=new ISCSIName(iScsiName,null);      iSCSIObjList.add(iSCSIName);    }  }  attributeMap.put(HDSConstants.ISCSINAME_LIST,iSCSIObjList);  String removeISCSINamesToHSDQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.REMOVE_ISCSI_NAME_FROM_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  return removeISCSINamesToHSDQuery;}  }
class C{  public KeyGenerationParameters(SecureRandom random,int strength){  this.random=random;  this.strength=strength;}  }
class C{  public void test_DELETE_accessPath_delete_c_nothingMatched() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.trig");  final long mutationResult=doDeleteWithAccessPath(null,null,null,new URIImpl("http://xmlns.com/foaf/0.1/XXX"));  assertEquals(0,mutationResult);}  }
class C{  public void testSortTaskDemo(){  ThreadLocalRandom rnd=ThreadLocalRandom.current();  long[] array=new long[1007];  for (int i=0; i < array.length; i++)   array[i]=rnd.nextLong();  long[] arrayClone=array.clone();  testInvokeOnPool(mainPool(),new SortTask(array));  Arrays.sort(arrayClone);  assertTrue(Arrays.equals(array,arrayClone));}  }
class C{  @Override protected void validate() throws IllegalStateException {  super.validate();  if (getMarkupLanguage() == null) {    throw new IllegalStateException(MOBILE_MARKUP_LANG + " is not set");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  EPG.getInstance().clearOverride(EPG.getInstance().getProviderIDForEPGDSName(s),getChannel(stack).getStationID());  return null;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public CanvasContainerBuilder onAdd(Consumer<CanvasComponent> adder){  adders.add(adder);  return this;}  }
class C{  public List<Statistics> findByCategoryAndUser(long categoryId,User user){  List<Statistics> userStatistics=findByUser(user.getId());  if (categoryId == CategoryDataSource.CATEGORY_ID_ALL)   return userStatistics; else {    List<Statistics> statistics=new ArrayList<>();    for (    Statistics statistic : userStatistics) {      Challenge challenge;      challenge=mDaoSession.getChallengeDao().load(statistic.getChallengeId());      if (challenge.getCategoryId() == categoryId) {        statistics.add(statistic);      }    }    return statistics;  }}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public Control(){  super(KEY);}  }
class C{  public static String readFileToString(File file){  if (file == null) {    return null;  }  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    StringBuilder fileContents=new StringBuilder("");    boolean isFirstLine=true;    String currentLine=reader.readLine();    while (currentLine != null) {      if (isFirstLine)       isFirstLine=false; else       fileContents.append(System.lineSeparator());      fileContents.append(currentLine);      currentLine=reader.readLine();    }    return fileContents.toString();  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return null;  } finally {    try {      if (reader != null) {        reader.close();      }    } catch (    Exception e) {      logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    }  }}  }
class C{  public LongPolynomial5 mult(TernaryPolynomial poly2){  long[][] prod=new long[5][coeffs.length + (poly2.size() + 4) / 5 - 1];  int[] ones=poly2.getOnes();  for (int idx=0; idx != ones.length; idx++) {    int pIdx=ones[idx];    int cIdx=pIdx / 5;    int m=pIdx - cIdx * 5;    for (int i=0; i < coeffs.length; i++) {      prod[m][cIdx]=(prod[m][cIdx] + coeffs[i]) & 0x7FF7FF7FF7FF7FFL;      cIdx++;    }  }  int[] negOnes=poly2.getNegOnes();  for (int idx=0; idx != negOnes.length; idx++) {    int pIdx=negOnes[idx];    int cIdx=pIdx / 5;    int m=pIdx - cIdx * 5;    for (int i=0; i < coeffs.length; i++) {      prod[m][cIdx]=(0x800800800800800L + prod[m][cIdx] - coeffs[i]) & 0x7FF7FF7FF7FF7FFL;      cIdx++;    }  }  long[] cCoeffs=Arrays.copyOf(prod[0],prod[0].length + 1);  for (int m=1; m <= 4; m++) {    int shift=m * 12;    int shift60=60 - shift;    long mask=(1L << shift60) - 1;    int pLen=prod[m].length;    for (int i=0; i < pLen; i++) {      long upper, lower;      upper=prod[m][i] >> shift60;      lower=prod[m][i] & mask;      cCoeffs[i]=(cCoeffs[i] + (lower << shift)) & 0x7FF7FF7FF7FF7FFL;      int nextIdx=i + 1;      cCoeffs[nextIdx]=(cCoeffs[nextIdx] + upper) & 0x7FF7FF7FF7FF7FFL;    }  }  int shift=12 * (numCoeffs % 5);  for (int cIdx=coeffs.length - 1; cIdx < cCoeffs.length; cIdx++) {    long iCoeff;    int newIdx;    if (cIdx == coeffs.length - 1) {      iCoeff=numCoeffs == 5 ? 0 : cCoeffs[cIdx] >> shift;      newIdx=0;    } else {      iCoeff=cCoeffs[cIdx];      newIdx=cIdx * 5 - numCoeffs;    }    int base=newIdx / 5;    int m=newIdx - base * 5;    long lower=iCoeff << (12 * m);    long upper=iCoeff >> (12 * (5 - m));    cCoeffs[base]=(cCoeffs[base] + lower) & 0x7FF7FF7FF7FF7FFL;    int base1=base + 1;    if (base1 < coeffs.length) {      cCoeffs[base1]=(cCoeffs[base1] + upper) & 0x7FF7FF7FF7FF7FFL;    }  }  return new LongPolynomial5(cCoeffs,numCoeffs);}  }
class C{  public void add(Component component,Object constraints,int index){  if (!(component instanceof UIResource)) {    Icon icon=constraints instanceof Icon ? (Icon)constraints : null;    String title=constraints instanceof String ? (String)constraints : null;    insertTab(title,icon,component,null,index == -1 ? getTabCount() : index);  } else {    super.add(component,constraints,index);  }}  }
class C{  protected int defaultMaximumAllowedCharacter(){  String encoding=format.getEncoding();  if (encoding != null) {    if (encoding.equals("US-ASCII")) {      return 127;    }  }  return -1;}  }
class C{  private void handleRegisterRequest(Intent intent){  boolean force=intent.getBooleanExtra(EXTRA_FORCE_ACTION,false);  if (!isChromeBeingUsed() && !force) {    cancelRepeatingAlarm();    return;  }  long currentTimestamp=mBackoffScheduler.getCurrentTime();  boolean isTooOld=hasRequest() && mCurrentRequest.getAgeInMilliseconds(currentTimestamp) >= MS_BETWEEN_REQUESTS;  boolean isOverdue=!hasRequest() && currentTimestamp >= mTimestampForNewRequest;  if (isTooOld || isOverdue || force) {    registerNewRequest(currentTimestamp);  }  if (hasRequest()) {    Intent postIntent=createPostRequestIntent(mApplicationContext,force);    startService(postIntent);  }}  }
class C{  @Deprecated public static <E>Iterable<E> unmodifiableIterable(ImmutableCollection<E> iterable){  return checkNotNull(iterable);}  }
class C{  @Override public void AddToSuppressLLDPs(DatapathId sw,OFPort port){  NodePortTuple npt=new NodePortTuple(sw,port);  this.suppressLinkDiscovery.add(npt);  deleteLinksOnPort(npt,"LLDP suppressed.");}  }
class C{  public ODataFeed readFeed(String resource_path,Map<String,String> query_parameters) throws IOException, ODataException {  if (resource_path == null || resource_path.isEmpty())   throw new IllegalArgumentException("resource_path must not be null or empty.");  ContentType contentType=ContentType.APPLICATION_ATOM_XML;  String absolutUri=serviceRoot.toString() + '/' + resource_path;  absolutUri=appendQueryParam(absolutUri,query_parameters);  InputStream content=execute(absolutUri,contentType,"GET");  return EntityProvider.readFeed(contentType.type(),getEntitySet(resource_path),content,EntityProviderReadProperties.init().build());}  }
class C{  static Class<?> comparableClassFor(Object x){  if (x instanceof Comparable) {    Class<?> c;    Type[] ts, as;    Type t;    ParameterizedType p;    if ((c=x.getClass()) == String.class)     return c;    if ((ts=c.getGenericInterfaces()) != null) {      for (int i=0; i < ts.length; ++i) {        if (((t=ts[i]) instanceof ParameterizedType) && ((p=(ParameterizedType)t).getRawType() == Comparable.class) && (as=p.getActualTypeArguments()) != null && as.length == 1 && as[0] == c)         return c;      }    }  }  return null;}  }
class C{  public void yield(String value){  builder.yield(value,true);}  }
class C{  public void enableEventHistory(){  if (this.eventHistory == null) {    this.eventHistory=new ArrayList();  }}  }
class C{  public void draw(int mouseX,int mouseY){  for (  ManualWidgetBase widget : widgets)   widget.draw(mouseX,mouseY);  for (  ManualWidgetBase widget : widgets)   widget.drawToolTip();}  }
class C{  private Map<String,String> makeRenamedToReferenceMap(Set<String> referenceFilenames){  HashMap<String,String> tmpPathMap=Maps.newHashMap();  for (  String refFilename : referenceFilenames) {    String renamed=this.renameFile(refFilename);    LinkedList<String> renamedPathParts=Lists.newLinkedList(FILE_SEP_SPLITTER.split(renamed));    LinkedList<String> refPathParts=Lists.newLinkedList(FILE_SEP_SPLITTER.split(refFilename));    while (!renamedPathParts.isEmpty() && !refPathParts.isEmpty()) {      tmpPathMap.put(FILE_SEP_JOINER.join(renamedPathParts),FILE_SEP_JOINER.join(refPathParts));      renamedPathParts.removeLast();      refPathParts.removeLast();    }  }  return ImmutableMap.copyOf(tmpPathMap);}  }
class C{  @Override public boolean test(final Array params){  int k=0;  for (int i=0; i < arguments_.size(); i++) {    final int size=arguments_.get(i).size();    final Array testParams=new Array(size);    for (int j=0; j < size; j++, k++) {      testParams.set(j,params.get(k));    }    if (!arguments_.get(i).testParams(testParams))     return false;  }  return true;}  }
class C{  protected void createPaths(DrawContext dc){  Globe globe=dc.getGlobe();  this.paths=new ArrayList<Path>();  double halfWidth=this.getWidth() / 2.0;  Iterator<? extends Position> iterator=this.getPositions().iterator();  Position posA=iterator.next();  Vec4 pA=globe.computePointFromPosition(posA);  Vec4 pB;  Vec4 normal=globe.computeSurfaceNormalAtPoint(pA);  while (iterator.hasNext()) {    Position posB=iterator.next();    pB=globe.computePointFromPosition(posB);    Vec4 vAB=pB.subtract3(pA);    Vec4 perpendicular=vAB.cross3(normal);    perpendicular=perpendicular.normalize3().multiply3(halfWidth);    Vec4 pStart=pA.add3(perpendicular);    Vec4 pEnd=pB.add3(perpendicular);    Position posStart=globe.computePositionFromPoint(pStart);    Position posEnd=globe.computePositionFromPoint(pEnd);    Path path=this.createPath(posStart,posEnd);    this.paths.add(path);    pStart=pA.subtract3(perpendicular);    pEnd=pB.subtract3(perpendicular);    posStart=globe.computePositionFromPoint(pStart);    posEnd=globe.computePositionFromPoint(pEnd);    path=this.createPath(posStart,posEnd);    this.paths.add(path);    pA=pB;  }  double radius=this.getWidth() / 2.0;  for (  TacticalPoint p : this.getControlPoints()) {    p.setModifier(SymbologyConstants.DISTANCE,radius);  }}  }
class C{  @Nullable public static ECKey recoverFromSignature(int recId,ECDSASignature sig,Sha256Hash message,boolean compressed){  Preconditions.checkArgument(recId >= 0,"recId must be positive");  Preconditions.checkArgument(sig.r.compareTo(BigInteger.ZERO) >= 0,"r must be positive");  Preconditions.checkArgument(sig.s.compareTo(BigInteger.ZERO) >= 0,"s must be positive");  Preconditions.checkNotNull(message);  BigInteger n=CURVE.getN();  BigInteger i=BigInteger.valueOf((long)recId / 2);  BigInteger x=sig.r.add(i.multiply(n));  ECCurve.Fp curve=(ECCurve.Fp)CURVE.getCurve();  BigInteger prime=curve.getQ();  if (x.compareTo(prime) >= 0) {    return null;  }  ECPoint R=decompressKey(x,(recId & 1) == 1);  if (!R.multiply(n).isInfinity())   return null;  BigInteger e=message.toBigInteger();  BigInteger eInv=BigInteger.ZERO.subtract(e).mod(n);  BigInteger rInv=sig.r.modInverse(n);  BigInteger srInv=rInv.multiply(sig.s).mod(n);  BigInteger eInvrInv=rInv.multiply(eInv).mod(n);  ECPoint.Fp q=(ECPoint.Fp)ECAlgorithms.sumOfTwoMultiplies(CURVE.getG(),eInvrInv,R,srInv);  if (compressed) {    q=new ECPoint.Fp(curve,q.getX(),q.getY(),true);  }  return new ECKey((byte[])null,q.getEncoded());}  }
class C{  public ClassMemberValue(int index,ConstPool cp){  super('c',cp);  this.valueIndex=index;}  }
class C{  public void makeDirty(){  updateMatrix=true;}  }
class C{  public Bipartite(Graph G){  isBipartite=true;  color=new boolean[G.V()];  marked=new boolean[G.V()];  edgeTo=new int[G.V()];  for (int v=0; v < G.V(); v++) {    if (!marked[v]) {      dfs(G,v);    }  }  assert check(G);}  }
class C{  public static Protos.FrameworkID toFrameworkID(ByteBuffer bb){  try {    return Protos.FrameworkID.parseFrom(getBytes(bb,bb.getInt()));  } catch (  Exception e) {    throw new RuntimeException("Failed to parse Framework ID",e);  }}  }
class C{  public del removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public PolynomialGF2mSmallM modDiv(PolynomialGF2mSmallM divisor,PolynomialGF2mSmallM modulus){  int[] resultCoeff=modDiv(coefficients,divisor.coefficients,modulus.coefficients);  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.347 -0500",hash_original_method="9F2D00AD0B3B7E97E6983E3E4DE01E8D",hash_generated_method="56906FD291BF502C1DD05AC4C1CC4DDF") public void recycle(){  mMessage.recycle();synchronized (sPoolSync) {    if (sPoolSize < MAX_POOL_SIZE) {      mNext=sPool;      sPool=this;      sPoolSize++;    }  }}  }
class C{  public void unlockPortal(final int ID){  if (!unlockedPortals.contains(ID)) {    unlockedPortals.add(ID);    logger.debug("Added portal ID " + Integer.toString(ID) + " to unlocked portals for player "+ getName()+ ".");  }}  }
class C{  protected void sequence_WhileStatement(ISerializationContext context,WhileStatement semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ITERATION_STATEMENT__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ITERATION_STATEMENT__EXPRESSION));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ITERATION_STATEMENT__STATEMENT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ITERATION_STATEMENT__STATEMENT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0(),semanticObject.getExpression());  feeder.accept(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0(),semanticObject.getStatement());  feeder.finish();}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  public static MR4CConfig clone(MR4CConfig config){synchronized (config) {    MR4CConfig newConfig=new MR4CConfig(false);    for (    CategoryConfig catConf : config.getAllCategoryConfigs()) {      CategoryConfig newCatConf=new CategoryConfig(catConf.getCategory());      newCatConf.init(false);      newCatConf.setProperties(catConf.getProperties(false));      newConfig.addCategory(newCatConf);    }    return newConfig;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.MODULE_FILTER__MODULE_FILTER_TYPE:    setModuleFilterType(MODULE_FILTER_TYPE_EDEFAULT);  return;case N4mfPackage.MODULE_FILTER__MODULE_SPECIFIERS:getModuleSpecifiers().clear();return;}super.eUnset(featureID);}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){  float x, y;  markBounds=new java.util.Vector<Rectangle2D>();  Set<Integer> selectedPoints=getSelectedPoints();  int n=xData.getCount();  if (colours != null && colours.size() == n) {    for (int i=0; i < n; i++) {      x=(float)transformX(((Number)xData.get(i)).doubleValue());      y=(float)transformY(((Number)yData.get(i)).doubleValue());      if (selectedPoints.contains(i)) {        drawMarkHilighted(g2,x,y);      } else {        drawMark(g2,x,y,colours.get(i));      }    }  } else {    for (int i=0; i < n; i++) {      x=(float)transformX(((Number)xData.get(i)).doubleValue());      y=(float)transformY(((Number)yData.get(i)).doubleValue());      if (selectedPoints.contains(i)) {        drawMarkHilighted(g2,x,y);      } else {        drawMark(g2,x,y,null);      }    }  }}  }
class C{  public TranslationImportException(String message,TranslationImportExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public KDTree(Instances insts){  super(insts);  if (getMeasurePerformance())   m_Stats=m_TreeStats=new TreePerformanceStats();}  }
class C{  private void writeNodeStartTag(Node node) throws IOException, RDFHandlerException {  writeNodeStartOfStartTag(node);  writeEndOfStartTag();  writeNewLine();}  }
class C{  public void zoom(Rectangle2D selection){  Point2D selectOrigin=translateScreenToJava2D(new Point((int)Math.ceil(selection.getX()),(int)Math.ceil(selection.getY())));  PlotRenderingInfo plotInfo=this.info.getPlotInfo();  Rectangle2D scaledDataArea=getScreenDataArea((int)selection.getCenterX(),(int)selection.getCenterY());  if ((selection.getHeight() > 0) && (selection.getWidth() > 0)) {    double hLower=(selection.getMinX() - scaledDataArea.getMinX()) / scaledDataArea.getWidth();    double hUpper=(selection.getMaxX() - scaledDataArea.getMinX()) / scaledDataArea.getWidth();    double vLower=(scaledDataArea.getMaxY() - selection.getMaxY()) / scaledDataArea.getHeight();    double vUpper=(scaledDataArea.getMaxY() - selection.getMinY()) / scaledDataArea.getHeight();    Plot p=this.chart.getPlot();    if (p instanceof Zoomable) {      boolean savedNotify=p.isNotify();      p.setNotify(false);      Zoomable z=(Zoomable)p;      if (z.getOrientation() == PlotOrientation.HORIZONTAL) {        z.zoomDomainAxes(vLower,vUpper,plotInfo,selectOrigin);        z.zoomRangeAxes(hLower,hUpper,plotInfo,selectOrigin);      } else {        z.zoomDomainAxes(hLower,hUpper,plotInfo,selectOrigin);        z.zoomRangeAxes(vLower,vUpper,plotInfo,selectOrigin);      }      p.setNotify(savedNotify);    }  }}  }
class C{  public static Set<Node> nodeSet(NodeList nl){  return new NodeSet(nl);}  }
class C{  public Toilet(){  super();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  TimeSeriesCollection clone=(TimeSeriesCollection)super.clone();  clone.data=(List)ObjectUtilities.deepClone(this.data);  clone.workingCalendar=(Calendar)this.workingCalendar.clone();  return clone;}  }
class C{  @Override @Deprecated public LinkedNotebook createNotebook(Notebook notebook) throws TException, EDAMUserException, EDAMSystemException, EDAMNotFoundException {  return super.createNotebook(notebook);}  }
class C{  protected Textifier createTextifier(){  return new Textifier();}  }
class C{  public double sample(Instance x,double ypred[],Random r) throws Exception {  double p[]=distribution(x,ypred);  return A.samplePMF(p,r);}  }
class C{  public synchronized void removeStatisticsNotificationListener(StatisticsNotificationListener l){  if (m_StatisticsNotificationListeners == null)   m_StatisticsNotificationListeners=new HashSet<>();  m_StatisticsNotificationListeners.remove(l);}  }
class C{  public Set<UserParticipant> closeRoom(String roomName) throws RoomException {  Room room=rooms.get(roomName);  if (room == null) {    throw new RoomException(Code.ROOM_NOT_FOUND_ERROR_CODE,"Room '" + roomName + "' not found");  }  if (room.isClosed()) {    throw new RoomException(Code.ROOM_CLOSED_ERROR_CODE,"Room '" + roomName + "' already closed");  }  Set<UserParticipant> participants=getParticipants(roomName);  Set<String> pids=new HashSet<String>(room.getParticipantIds());  for (  String pid : pids) {    try {      room.leave(pid);    } catch (    RoomException e) {      log.warn("Error evicting participant with id '{}' from room '{}'",pid,roomName,e);    }  }  room.close();  rooms.remove(roomName);  log.warn("Room '{}' removed and closed",roomName);  return participants;}  }
class C{  public void close() throws IOException {  while (!this.atEndOfData) {    char ch=this.savedChar;    if (ch == 0) {      ch=this.reader.read();    } else {      this.savedChar=0;    }    if (ch == ']') {      char ch2=this.reader.read();      if (ch2 == ']') {        char ch3=this.reader.read();        if (ch3 == '>') {          break;        }        this.savedChar=ch2;        this.reader.unread(ch3);      } else {        this.reader.unread(ch2);      }    }  }  this.atEndOfData=true;}  }
class C{  private Date parseDate(String dateString) throws ParseException {  java.util.Date parsedDate=DateField.parse(dateString);  if (parsedDate == null)   return null;  return new Date(parsedDate.getTime());}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    if (zzMarkedPosL > zzStartRead) {switch (zzBufferL[zzMarkedPosL - 1]) {case '\n':case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        zzAtBOL=true;      break;case '\r':    if (zzMarkedPosL < zzEndReadL)     zzAtBOL=zzBufferL[zzMarkedPosL] != '\n'; else     if (zzAtEOF)     zzAtBOL=false; else {      boolean eof=zzRefill();      zzMarkedPosL=zzMarkedPos;      zzEndReadL=zzEndRead;      zzBufferL=zzBuffer;      if (eof)       zzAtBOL=false; else       zzAtBOL=zzBufferL[zzMarkedPosL] != '\n';    }  break;default :zzAtBOL=false;}}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;if (zzAtBOL) zzState=ZZ_LEXSTATE[zzLexicalState + 1]; else zzState=ZZ_LEXSTATE[zzLexicalState];zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {  zzInput=YYEOF;  break zzForAction;} else {  zzInput=zzBufferL[zzCurrentPosL++];}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{addToken(Token.RESERVED_WORD);}case 16:break;case 1:{addToken(Token.IDENTIFIER);}case 17:break;case 12:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 18:break;case 9:{addToken(Token.FUNCTION);}case 19:break;case 5:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 20:break;case 14:{addToken(Token.VARIABLE);}case 21:break;case 7:{addToken(Token.WHITESPACE);}case 22:break;case 10:{addToken(Token.PREPROCESSOR);}case 23:break;case 15:{addToken(Token.DATA_TYPE);}case 24:break;case 4:{addToken(Token.ERROR_CHAR);}case 25:break;case 8:{addToken(Token.OPERATOR);}case 26:break;case 2:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 27:break;case 13:{addToken(Token.LITERAL_CHAR);}case 28:break;case 3:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 29:break;case 6:{addNullToken();return firstToken;}case 30:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 669:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public boolean determines(List<Node> z,Node x) throws UnsupportedOperationException {  throw new UnsupportedOperationException();}  }
class C{  public void unsubscribeForIndications(String subscriptionsIdentifier){  s_logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  s_logger.info("Initiating unsubscription of passive provider {}",subscriptionsIdentifier);  _subscriptionManager=new CimSubscriptionManager(this,subscriptionsIdentifier);  _listener.unregister(this);  _subscriptionManager.unsubscribe();  s_logger.info("unsubscription of passive provider {} completed",subscriptionsIdentifier);  s_logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  public static Object valueAtTick(GeoTimeSerie gts,long tick){  if (0 == gts.values) {    return null;  }  sort(gts,false);  int idx=Arrays.binarySearch(gts.ticks,0,gts.values,tick);  if (idx < 0) {    return null;  } else {    if (TYPE.LONG == gts.type) {      return gts.longValues[idx];    } else     if (TYPE.DOUBLE == gts.type) {      return gts.doubleValues[idx];    } else     if (TYPE.STRING == gts.type) {      return gts.stringValues[idx];    } else     if (TYPE.BOOLEAN == gts.type) {      return gts.booleanValues.get(idx);    } else {      return null;    }  }}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  public LoggingSessionInputBuffer(final SessionInputBuffer in,final Wire wire){  super();  this.in=in;  this.wire=wire;}  }
class C{  private void push(String input,int pos,int limit,boolean addTrailingSlash,boolean alreadyEncoded){  String segment=canonicalize(input,pos,limit,PATH_SEGMENT_ENCODE_SET,alreadyEncoded,false,false,true);  if (isDot(segment)) {    return;  }  if (isDotDot(segment)) {    pop();    return;  }  if (encodedPathSegments.get(encodedPathSegments.size() - 1).isEmpty()) {    encodedPathSegments.set(encodedPathSegments.size() - 1,segment);  } else {    encodedPathSegments.add(segment);  }  if (addTrailingSlash) {    encodedPathSegments.add("");  }}  }
class C{  public static void centerNode(final ZyGraph graph,final NaviNode node,final boolean zoom){  Preconditions.checkNotNull(graph,"IE02103: Graph argument can not be null");  Preconditions.checkNotNull(node,"IE02104: Node argument can not be null");  final double oldZoom=graph.getView().getZoom();  graph.showNode(node,true);  if (zoom) {    ZoomFunctions.zoomToNode(graph,node);  } else {    MoveFunctions.centerNode(graph,node);    if (Double.compare(oldZoom,graph.getView().getZoom()) != 0) {      focusView(graph,oldZoom,graph.getView().getCenter());    }  }}  }
class C{  @Override public Request<RunnerStatus> run(ProjectReference projectReference){  String projectName=projectReference.name();  List<DummyRunnerStatus> statuses=availableRunnerStatuses.get(projectName);  DummyRunnerStatus runnerStatus=null;  if (statuses == null || statuses.isEmpty()) {    runnerStatus=null;  } else {    runnerStatus=statuses.get(runnerStatusIndex);    runnerStatus.setStatus(RunnerState.RUNNING);    List<DummyRunnerStatus> currents=currentRunnerStatuses.get(projectName);    if (currents == null) {      currents=new ArrayList<>();      currentRunnerStatuses.put(projectName,currents);    }    currents.add(runnerStatus);  }  return new DummyRequest<RunnerStatus>(runnerStatus);}  }
class C{  public void store(final long address,final byte[] data){  System.arraycopy(data,0,m_data,(int)(address - m_address),data.length);}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  public CompiereThemeIce(){  setDefault();  s_theme=this;  s_name=NAME;}  }
class C{  public ByteArrayPool(boolean direct,int maxFreeBuffers,int maxFreeMemory){  this.direct=direct;  freeBuffers=new ArrayList<Stack<DirectBufferByteArray>>();  for (int i=0; i < MAX_BITS; i++) {    freeBuffers.add(new Stack<DirectBufferByteArray>());  }  this.maxFreeBuffers=maxFreeBuffers;  this.maxFreeMemory=maxFreeMemory;  this.freed=false;}  }
class C{  public boolean isObservable(){  return observable;}  }
class C{  protected GenericObject next(ListIterator iterator){  try {    return (GenericObject)iterator.next();  } catch (  NoSuchElementException ex) {    return null;  }}  }
class C{  public long size64(){  return n;}  }
class C{  private double calculateFitnessForObject(Integer objectId){  ExecutionTrace objectTrace=result.getTrace().getTraceForObject(objectId);  double fitness=1;  if (isSpecialDefinition(goalDefinition)) {    double useFitness=callTestFitnessFunctionForTrace(objectTrace,goalUseFitness);    fitness=normalize(useFitness);    if (ArrayUtil.contains(Properties.CRITERION,Criterion.DEFUSE) && fitness == 0.0)     goal.setCovered(individual,objectTrace,objectId);    return fitness;  }  List<Integer> usePositions=DefUseExecutionTraceAnalyzer.getUsePositions(goalUse,objectTrace,objectId);  List<Integer> goalDefinitionPositions=DefUseExecutionTraceAnalyzer.getDefinitionPositions(goalDefinition,objectTrace,objectId);  if (!defVariable.equals(useVariable)) {    logger.debug("Checking an aliasing case: " + goalDefinition + "\n"+ goalUse);  }  for (  Integer usePos : usePositions) {    int activeDefId=DefUseExecutionTraceAnalyzer.getActiveDefinitionIdAt(defVariable,objectTrace,usePos,objectId);    logger.debug("Activedef at position " + usePos + " is: "+ DefUsePool.getDefinitionByDefId(activeDefId));    if (activeDefId == goalDefinition.getDefId()) {      if (ArrayUtil.contains(Properties.CRITERION,Criterion.DEFUSE))       goal.setCovered(individual,objectTrace,objectId);{        if (!defVariable.equals(useVariable)) {          Object definedObject=DefUseExecutionTraceAnalyzer.getActiveObjectAtDefinition(result.getTrace(),defVariable,objectId,usePos);          Object usedObject=DefUseExecutionTraceAnalyzer.getActiveObjectAtUse(result.getTrace(),useVariable,objectId,usePos);          logger.info(definedObject + ", " + usedObject);          if (definedObject == usedObject) {            logger.debug("That's the target def we're looking for, and objects are equal!");            return 0.0;          } else {            logger.debug("That's the target def we're looking for, but objects are not equal!");            continue;          }        }        return 0.0;      }    }  }  if (!goalUse.isRootBranchDependent())   for (  Integer goalDefinitionPos : goalDefinitionPositions) {    double useFitness;    try {      useFitness=calculateUseFitnessForDefinitionPos(objectTrace,objectId,goalDefinitionPos);    } catch (    UnexpectedFitnessException e) {      continue;    }    double newFitness=normalize(useFitness);    if (newFitness < fitness)     fitness=newFitness;  }  return fitness;}  }
class C{  public ExamineFileAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("ExamineFileAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("ExamineFileAction.statusbar"));  putValue(NAME,res.getString("ExamineFileAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ExamineFileAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ExamineFileAction.image")))));}  }
class C{  public void removeChannelKey(String key){  if (key == null)   throw new IllegalArgumentException("Can't remove channel key with null key");  setMode("-k",key);}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (ch == null || start < 0 || length >= (ch.length - start) || length < 0)   return;  append(m_doc.createComment(new String(ch,start,length)));}  }
class C{  public void applyTemplates(Document document) throws Exception {  applyTemplates(document,this.modeName);}  }
class C{  public OutlierResult run(Database database,Relation<N> nrel,Relation<? extends NumberVector> relation){  final NeighborSetPredicate npred=getNeighborSetPredicateFactory().instantiate(database,nrel);  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  MeanVariance zmv=new MeanVariance();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    DBIDs neighbors=npred.getNeighborDBIDs(iditer);    Mean localmean=new Mean();    for (DBIDIter iter=neighbors.iter(); iter.valid(); iter.advance()) {      if (DBIDUtil.equal(iditer,iter)) {        continue;      }      localmean.put(relation.get(iter).doubleValue(0));    }    final double localdiff;    if (localmean.getCount() > 0) {      localdiff=relation.get(iditer).doubleValue(0) - localmean.getMean();    } else {      localdiff=0.0;    }    scores.putDouble(iditer,localdiff);    zmv.put(localdiff);  }  DoubleMinMax minmax=new DoubleMinMax();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double score=Math.abs(scores.doubleValue(iditer) - zmv.getMean()) / zmv.getSampleStddev();    minmax.put(score);    scores.putDouble(iditer,score);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("ZTest","Z Test score",scores,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.0,Double.POSITIVE_INFINITY,0);  OutlierResult or=new OutlierResult(scoreMeta,scoreResult);  or.addChildResult(npred);  return or;}  }
class C{  private static ValueSource buildStringSource(IndexSchema schema,String expressionString){  int paren=expressionString.indexOf('(');  String[] arguments;  if (paren < 0) {    return buildFieldSource(schema,expressionString,FIELD_TYPE);  } else {    arguments=ExpressionFactory.getArguments(expressionString.substring(paren + 1,expressionString.lastIndexOf(')')).trim());  }  String operands=arguments[0];  String operation=expressionString.substring(0,paren).trim();  if (operation.equals(AnalyticsParams.CONSTANT_STRING)) {    operands=expressionString.substring(paren + 1,expressionString.lastIndexOf(')'));    return new ConstStringSource(operands);  } else   if (operation.equals(AnalyticsParams.FILTER)) {    return buildFilterSource(schema,operands,FIELD_TYPE);  } else   if (operation.equals(AnalyticsParams.REVERSE)) {    if (arguments.length != 1) {      throw new SolrException(ErrorCode.BAD_REQUEST,"\"" + AnalyticsParams.REVERSE + "\" requires exactly one argument. The number of arguments in "+ expressionString+ " is not 1.");    }    return new ReverseStringFunction(buildStringSource(schema,operands));  }  List<ValueSource> subExpressions=new ArrayList<>();  for (  String argument : arguments) {    subExpressions.add(buildSourceTree(schema,argument));  }  if (operation.equals(AnalyticsParams.CONCATENATE)) {    return new ConcatStringFunction(subExpressions.toArray(new ValueSource[0]));  }  if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)) {    return buildNumericSource(schema,expressionString);  } else   if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)) {    return buildDateSource(schema,expressionString);  }  throw new SolrException(ErrorCode.BAD_REQUEST,"The operation [" + expressionString + "] is not supported.");}  }
class C{  private void validateCommandPageChange(final int originalPage,final int triedChangingTo){  final boolean didChange=(originalPage != getIndexOfCurrentPage());  final boolean shouldHaveChanged;  if (triedChangingTo == originalPage) {    shouldHaveChanged=false;  } else {    shouldHaveChanged=getPagingLockMode().allowsCommands();  }  assertThat("locking conditions passed",didChange,is(shouldHaveChanged));}  }
class C{  public static boolean isWithElement(Node node){  return node.getNodeType() == Node.ELEMENT_NODE && UiBinderConstants.UI_BINDER_XML_NAMESPACE.equals(node.getNamespaceURI()) && UiBinderConstants.UI_BINDER_WITH_ELEMENT_NAME.equalsIgnoreCase(node.getLocalName());}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public void send(String theString){  send(theString.getBytes());}  }
class C{  public void addProvider(Provider provider,int logo){  authProviders[providerCount]=provider;  authProviderLogos[providerCount]=logo;  providerCount++;}  }
class C{  protected int hleRtcTickAdd64(TPointer64 dstPtr,TPointer64 srcPtr,long value,long multiplier){  if (log.isDebugEnabled()) {    log.debug(String.format("hleRtcTickAdd64 dstPtr=%s, srcPtr=%s(%d), %d * %d",dstPtr,srcPtr,srcPtr.getValue(),value,multiplier));  }  long src=srcPtr.getValue();  dstPtr.setValue(src + multiplier * value);  return 0;}  }
class C{  private boolean isDownloading(int position){  return loading[position];}  }
class C{  public void removeExpiredAcronyms(){  final String SELECTION_EXPIRATION=AcronymEntry.COLUMN_EXPIRATION_TIME + " <= ?";  String[] selectionArgs={String.valueOf(System.nanoTime())};}  }
class C{  public PropertyNotFoundException(String message){  super(message);}  }
class C{  private CombinedRangeXYPlot createPlot(){  XYDataset data1=createDataset1();  XYItemRenderer renderer1=new StandardXYItemRenderer();  NumberAxis xAxis1=new NumberAxis("X1");  XYPlot subplot1=new XYPlot(data1,xAxis1,null,renderer1);  subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);  XYTextAnnotation annotation=new XYTextAnnotation("Hello!",50.0,10000.0);  annotation.setFont(new Font("SansSerif",Font.PLAIN,9));  annotation.setRotationAngle(Math.PI / 4.0);  subplot1.addAnnotation(annotation);  XYDataset data2=createDataset2();  XYItemRenderer renderer2=new StandardXYItemRenderer();  NumberAxis xAxis2=new NumberAxis("X2");  xAxis2.setAutoRangeIncludesZero(false);  XYPlot subplot2=new XYPlot(data2,xAxis2,null,renderer2);  subplot2.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);  CombinedRangeXYPlot plot=new CombinedRangeXYPlot(new NumberAxis("Range"));  plot.setGap(10.0);  plot.add(subplot1,1);  plot.add(subplot2,1);  plot.setOrientation(PlotOrientation.VERTICAL);  return plot;}  }
class C{  public GPOSRecord(Name name,int dclass,long ttl,double longitude,double latitude,double altitude){  super(name,Type.GPOS,dclass,ttl);  validate(longitude,latitude);  this.longitude=Double.toString(longitude).getBytes();  this.latitude=Double.toString(latitude).getBytes();  this.altitude=Double.toString(altitude).getBytes();}  }
class C{  public IoBuffer encodeMessage(RTMP rtmp,Header header,IRTMPEvent message){  IServiceCall call=null;switch (header.getDataType()) {case TYPE_CHUNK_SIZE:    return encodeChunkSize((ChunkSize)message);case TYPE_INVOKE:  call=((Invoke)message).getCall();if (call != null) {  Object[] args=call.getArguments();  if (args != null && args.length > 0) {    Object a0=args[0];    if (a0 instanceof Status) {      Status status=(Status)a0;      if (StatusCodes.NS_SEEK_NOTIFY.equals(status.getCode())) {        int seekTime=Integer.valueOf(status.getDescription().split(" ")[1]);        int[] channels=new int[]{5,6};        for (        int channelId : channels) {          LiveTimestampMapping mapping=rtmp.getLastTimestampMapping(channelId);          if (mapping != null) {            long timestamp=mapping.getClockStartTime() + (seekTime & 0xFFFFFFFFL);            mapping.setLastStreamTime(timestamp);          } else {            log.debug("No ts mapping for channel id: {}",channelId);          }        }      }    }  }}return encodeInvoke((Invoke)message,rtmp);case TYPE_NOTIFY:call=((Notify)message).getCall();if (call == null) {return encodeStreamMetadata((Notify)message);} else {return encodeNotify((Notify)message,rtmp);}case TYPE_PING:return encodePing((Ping)message);case TYPE_BYTES_READ:return encodeBytesRead((BytesRead)message);case TYPE_AGGREGATE:return encodeAggregate((Aggregate)message);case TYPE_AUDIO_DATA:return encodeAudioData((AudioData)message);case TYPE_VIDEO_DATA:return encodeVideoData((VideoData)message);case TYPE_FLEX_SHARED_OBJECT:return encodeFlexSharedObject((ISharedObjectMessage)message,rtmp);case TYPE_SHARED_OBJECT:return encodeSharedObject((ISharedObjectMessage)message,rtmp);case TYPE_SERVER_BANDWIDTH:return encodeServerBW((ServerBW)message);case TYPE_CLIENT_BANDWIDTH:return encodeClientBW((ClientBW)message);case TYPE_FLEX_MESSAGE:return encodeFlexMessage((FlexMessage)message,rtmp);case TYPE_FLEX_STREAM_SEND:return encodeFlexStreamSend((FlexStreamSend)message);default :log.warn("Unknown object type: {}",header.getDataType());}return null;}  }
class C{  public IJsniTypeReferenceChange createChange(ICompilationUnit cu){  return new JsniTypeReferenceChange(refactoringSupport,cu);}  }
class C{  public String trimUserName(String text){  TextStream stream=new TextStream(text);  StringWriter writer=new StringWriter();  while (!stream.atEnd()) {    char next=stream.next();    if (Character.isLetter(next)) {      writer.append(next);    }  }  return writer.toString().toLowerCase();}  }
class C{  public void close() throws SQLException {  this.connection.close();}  }
class C{  public String register(String coreName,final CoreDescriptor desc) throws Exception {  return register(coreName,desc,false,false);}  }
class C{  public static Shape reverse(Shape shape){  List<PathSegment> segments=getSegments(shape);  boolean closed=false;  Path2D reversed=new Path2D.Double(Path2D.WIND_NON_ZERO,segments.size());  ListIterator<PathSegment> i=segments.listIterator(segments.size());  while (i.hasPrevious()) {    PathSegment segment=i.previous();    if (segment.type == PathIterator.SEG_CLOSE) {      closed=true;      continue;    }    if (reversed.getCurrentPoint() == null) {      reversed.moveTo(segment.end.getX(),segment.end.getY());    }    if (segment.type == PathIterator.SEG_LINETO) {      reversed.lineTo(segment.start.getX(),segment.start.getY());    } else     if (segment.type == PathIterator.SEG_QUADTO) {      reversed.quadTo(segment.coords[0],segment.coords[1],segment.start.getX(),segment.start.getY());    } else     if (segment.type == PathIterator.SEG_CUBICTO) {      reversed.curveTo(segment.coords[2],segment.coords[3],segment.coords[0],segment.coords[1],segment.start.getX(),segment.start.getY());    } else     if (segment.type == PathIterator.SEG_MOVETO) {      if (closed) {        reversed.closePath();        closed=false;      }    }  }  return reversed;}  }
class C{  public StartRecordingKillsAction(final String questSlot,final int index,String creature,int requiredSolo,int requiredShared){  this.toKill=new HashMap<String,Pair<Integer,Integer>>();  toKill.put(creature,new Pair<Integer,Integer>(requiredSolo,requiredShared));  this.questname=checkNotNull(questSlot);  this.index=index;}  }
class C{  public int flags(){  return flags;}  }
class C{  public String message(){  return message;}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  MobileSessionCtx wctx=MobileSessionCtx.get((HttpServletRequest)request);  String sessionID=wctx.ctx.getProperty("#AD_Session_ID");  if (sessionID == null) {  }  String uri="";  if (request instanceof HttpServletRequest) {    HttpServletRequest req=(HttpServletRequest)request;    uri=req.getRequestURI();  }  boolean pass=true;  boolean check=true;  if (sessionID == null)   if (uri.endsWith("index.html") || uri.endsWith("login.js") || uri.endsWith("toolbar.png")|| uri.endsWith("WLogin"))   ; else   if (uri.contains("/iui/"))   ; else   pass=false; else   if (!uri.startsWith(MobileEnv.DIR_BASE) || uri.endsWith(".gif") || uri.endsWith(".jpg")|| uri.endsWith(".png")|| uri.endsWith(".html")|| uri.endsWith(".css")|| uri.endsWith(".js"))   check=false; else   ;  StringBuffer sb=new StringBuffer("| Parameters");  if (check) {    try {      String enc=request.getCharacterEncoding();      if (enc == null)       request.setCharacterEncoding(MobileEnv.ENCODING);    } catch (    Exception e) {      log.log(Level.SEVERE,"Set CharacterEndocung=" + MobileEnv.ENCODING,e);    }    Enumeration en=request.getParameterNames();    while (en.hasMoreElements()) {      String name=(String)en.nextElement();      sb.append(" - ").append(name).append("=").append(request.getParameter(name));    }    if (uri.endsWith("WWindowStatus"))     pass=false;  }  if (pass && check)   log.info("Start " + uri + sb.toString());  long myTime=0l;  if (pass && check && m_timing)   myTime=System.currentTimeMillis();  if (pass)   chain.doFilter(request,response); else {    RequestDispatcher rd=request.getRequestDispatcher("/WLogin");    rd.forward(request,response);  }  if (check && pass) {    if (m_timing)     myTime=System.currentTimeMillis() - myTime;  }}  }
class C{  @Override protected void handleError(final AttachReply reply){  getDebugger().setTerminated();}  }
class C{  private void _open_search_page(Context ctx,InstalledApp app){  Uri uri=Uri.parse(String.format(PreferenceManager.getDefaultSharedPreferences(ctx).getString(SettingsFragment.KEY_PREF_SEARCH_ENGINE,ctx.getString(R.string.search_engine_default)),app.get_display_name(),app.get_latest_version(),app.get_package_name()));  ctx.startActivity(new Intent(Intent.ACTION_VIEW,uri));}  }
class C{  @Override public Object adapt(Object object,Object type){  if (isFactoryForType(type)) {    Object adapter=super.adapt(object,type);    if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {      return adapter;    }  }  return null;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o instanceof LineSegmentPair) {    LineSegmentPair lsp=(LineSegmentPair)o;    return (lsp.one == one && lsp.two == two) || (lsp.two == one && lsp.one == two);  }  return false;}  }
class C{  private boolean recentlyAttemptedExchangeWithPeer(Peer peer){  long now=(new Date()).getTime();  long then=getNextExchangeAttemptTime(peer).getTime();  return (now < then);}  }
class C{  public final void writeFloat(float v){  ensureCapacity(4);  if (this.overflowBuf != null) {    this.overflowBuf.writeFloat(v);    return;  }  this.buffer.putFloat(v);}  }
class C{  private void calculateBaseUnits(){  FontMetrics metrics=Toolkit.getDefaultToolkit().getFontMetrics(UIManager.getFont("Button.font"));  baseUnitX=metrics.stringWidth("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");  baseUnitX=(baseUnitX / 26 + 1) / 2;  baseUnitY=metrics.getAscent() + metrics.getDescent() - 1;}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  public static int nextInt(int max){  wasAccessed=true;  return currentNumber % max;}  }
class C{  public TechnicalServiceNotAliveException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @Override public void stop(ShutdownModeAmp mode){  if (_httpContainer != null) {    _httpContainer.shutdown(mode);  }}  }
class C{  private boolean isProjectMatching(final ProjectConfigDto project,final String repositoryUrl,final String branch){  if (isNullOrEmpty(repositoryUrl) || isNullOrEmpty(branch)) {    return false;  }  final SourceStorageDto source=project.getSource();  if (source == null) {    return false;  }  final String projectType=source.getType();  final String projectLocation=source.getLocation();  final String projectBranch=source.getParameters().get("branch");  if (isNullOrEmpty(projectType) || isNullOrEmpty(projectLocation)) {    return false;  }  return (repositoryUrl.equals(projectLocation) || (repositoryUrl + ".git").equals(projectLocation)) && ("master".equals(branch) || (!isNullOrEmpty(projectBranch) && branch.equals(projectBranch)));}  }
class C{  private static GaData executeDataQuery(Analytics analytics,String profileId) throws IOException {  return analytics.data().ga().get("ga:" + profileId,"2012-01-01","2012-01-14","ga:visits").setDimensions("ga:source,ga:keyword").setSort("-ga:visits,ga:source").setFilters("ga:medium==organic").setMaxResults(25).execute();}  }
class C{  private void putInputElementHandlerIntoTheMap(){  for (  Element el : inputElementHandler.get()) {    Element tmpElement=el.parent();    while (StringUtils.isNotBlank(tmpElement.tagName())) {      if (tmpElement.tagName().equals(FORM_ELEMENT)) {        if (inputFormMap.containsKey(tmpElement)) {          inputFormMap.get(tmpElement).add(el);        } else {          ElementHandler<Element> inputElement=new ElementHandlerImpl();          inputElement.add(el);          inputFormMap.put(tmpElement,inputElement);        }        break;      }      tmpElement=tmpElement.parent();    }  }}  }
class C{  public boolean isInDispute(){  Object oo=get_Value(COLUMNNAME_IsInDispute);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(String[] args){  runTokenizer(new NGramTokenizer(),args);}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public ParallelUnionQuery(HGQuery<T> left,HGQuery<T> right,HyperGraph graph){  this.left=left;  this.right=right;  this.setHyperGraph(graph);}  }
class C{  @Inline @Uninterruptible public static boolean logRequired(ObjectReference object){  Word value=VM.objectModel.readAvailableBitsWord(object);  return value.and(LOGGING_MASK).EQ(UNLOGGED);}  }
class C{  public String tailFile(String containerId,String filename,Integer maxRows) throws ServiceException {  String execOutput="";  try {    String logDir=getLogDirectory(containerId);    if (!logDir.endsWith("/")) {      logDir=logDir + "/";    }    final String command="tail -n " + maxRows + " "+ logDir+ filename;    execOutput=dockerService.execCommand(containerId,command);    if (execOutput != null && execOutput.contains("cannot access") == false) {      return execOutput;    }  } catch (  FatalDockerJSONException e) {    StringBuilder builder=new StringBuilder(256);    builder.append("containerId=").append(containerId);    builder.append(",file=").append(filename);    builder.append(",nbRows=").append(maxRows);    throw new ServiceException(builder.toString(),e);  }  return execOutput;}  }
class C{  public void update(){  update(this._group,_roadName,_roadNumber,_dccAddress,_mfg,_decoderMfgID,_decoderVersionID,_id);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private boolean isInSingleUserMode(){  return singleUserName != null;}  }
class C{  private void stopResin20x(String[] args) throws Exception {  Method closeMethod=this.resinServer.getClass().getMethod("close",null);  closeMethod.invoke(this.resinServer,null);}  }
class C{  private void displayMessage(String text,Image image){  if ((null == messageComposite) || messageComposite.isDisposed()) {    messageComposite=toolkit.createComposite(mainForm.getBody());  } else {    for (    Control c : messageComposite.getChildren()) {      if (!c.isDisposed()) {        c.dispose();      }    }  }  messageComposite.setLayout(new GridLayout(2,false));  messageComposite.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));  toolkit.createLabel(messageComposite,null).setImage(image);  toolkit.createLabel(messageComposite,text,SWT.WRAP).setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,true));}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public void finishOptions() throws UpdateConstraintException {  if (obsoleteOptions.size() > 0) {    if (parameterDef.definesParametersOfUndeletedProduct()) {      UpdateConstraintException e=new UpdateConstraintException(ClassEnum.TECHNICAL_SERVICE,technicalProductId);      throw e;    } else {      for (      ParameterOption option : obsoleteOptions) {        parameterDef.getOptionList().remove(option);        dm.remove(option);      }      dm.flush();      obsoleteOptions.clear();    }  }}  }
class C{  protected String engineGetURI(){  return implementedTransformURI;}  }
class C{  public String id(){  return id;}  }
class C{  public static String format(final List<? extends NameValuePair> parameters,final String charset){  final StringBuilder result=new StringBuilder();  for (  final NameValuePair parameter : parameters) {    final String encodedName=encodeFormFields(parameter.getName(),charset);    final String encodedValue=encodeFormFields(parameter.getValue(),charset);    if (result.length() > 0) {      result.append(PARAMETER_SEPARATOR);    }    result.append(encodedName);    if (encodedValue != null) {      result.append(NAME_VALUE_SEPARATOR);      result.append(encodedValue);    }  }  return result.toString();}  }
class C{  public static void putPfPwMapping(long pfid,long pwid){  if (_disabled)   return;  _mapPwPf.put(pwid,pfid);}  }
class C{  public static double distanceTo(double x1,double y1,double z1,double x2,double y2,double z2){  final double a=x1 - x2;  final double b=y1 - y2;  final double c=z1 - z2;  return Math.sqrt(a * a + b * b + c * c);}  }
class C{  public static boolean isVelocimacro(String vmName,String templateName){  return ri.isVelocimacro(vmName,templateName);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.SIMPLE_TYPE_REFERENCE__OWNER:    return basicGetOwner() != null;case DomPackage.SIMPLE_TYPE_REFERENCE__TYPE_NAME:  return TYPE_NAME_EDEFAULT == null ? typeName != null : !TYPE_NAME_EDEFAULT.equals(typeName);}return super.eIsSet(featureID);}  }
class C{  public OrganizationAuthoritiesException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public final boolean compareAndSet(double expect,double update){  return updater.compareAndSet(this,doubleToRawLongBits(expect),doubleToRawLongBits(update));}  }
class C{  public void addChild(ResourceNode childNode){  if (children == null) {    children=new HashMap<String,ResourceNode>();  }  childNode.parent=this;  children.put(childNode.getKey(),childNode);}  }
class C{  private void validateLdapPropertyValue(Map<SettingType,String> attrMap,SettingType setting,String userValue,String ldapValue) throws ValidationException {  if (attrMap.containsKey(setting) && userValue != null && userValue.length() != 0 && !userValue.equals(ldapValue)) {    ValidationException vf=new ValidationException(ReasonEnum.LDAP_VALUE_MISMATCH,null,new Object[]{ldapValue,setting.toString(),userValue});    logger.logError(Log4jLogger.SYSTEM_LOG,vf,LogMessageIdentifier.ERROR_VALIDATION_PARAMETER_LDAP_FOUND_ERROR,"User Value");    throw vf;  }}  }
class C{  public CSaveField(final String text){  super(text);}  }
class C{  public void dumpNoTabs(PrintStream out){  print(3,true,out,"seq");  out.print(' ');  print(19,false,out,"version");  out.print(' ');  print(formatDates ? 12 : 10,false,out,"time");  print(1 + 7,true,out,"classes");  print(1 + WIDTH,true,out,"NCSS");  print(1 + WIDTH,true,out,"added");  print(1 + WIDTH,true,out,"newCode");  print(1 + WIDTH,true,out,"fixed");  print(1 + WIDTH,true,out,"removed");  print(1 + WIDTH,true,out,"retained");  print(1 + WIDTH,true,out,"dead");  print(1 + WIDTH,true,out,"active");  out.println();  for (int i=0; i < versionList.length; ++i) {    Version version=versionList[i];    AppVersion appVersion=sequenceToAppVersionMap.get(version.getSequence());    print(3,true,out,i);    out.print(' ');    print(19,false,out,appVersion != null ? appVersion.getReleaseName() : "");    out.print(' ');    long ts=(appVersion != null ? appVersion.getTimestamp() : 0L);    if (formatDates) {      print(12,false,out,dateFormat.format(ts));    } else {      print(10,false,out,ts / 1000);    }    out.print(' ');    print(7,true,out,appVersion != null ? appVersion.getNumClasses() : 0);    out.print(' ');    print(WIDTH,true,out,appVersion != null ? appVersion.getCodeSize() : 0);    for (int j=0; j < TUPLE_SIZE; ++j) {      out.print(' ');      print(WIDTH,true,out,version.get(j));    }    out.println();  }}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone() && m_dontFilterAfterFirstBatch) {    push((Instance)instance.copy());    return true;  }  if (instance.isMissing(m_AttIndex.getIndex())) {    if (!getMatchMissingValues()) {      push((Instance)instance.copy());      return true;    } else {      return false;    }  }  if (isNumeric()) {    if (!m_Values.getInvert()) {      if (instance.value(m_AttIndex.getIndex()) < m_Value) {        push((Instance)instance.copy());        return true;      }    } else {      if (instance.value(m_AttIndex.getIndex()) >= m_Value) {        push((Instance)instance.copy());        return true;      }    }  }  if (isNominal()) {    if (m_Values.isInRange((int)instance.value(m_AttIndex.getIndex()))) {      Instance temp=(Instance)instance.copy();      if (getModifyHeader()) {        temp.setValue(m_AttIndex.getIndex(),m_NominalMapping[(int)instance.value(m_AttIndex.getIndex())]);      }      push(temp);      return true;    }  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static double[][] chi2(double M[][][],double Exp[][][]){  int K=M.length;  int L=M[0].length;  int DoF=K - 1;  double V[][]=new double[L][L];  for (int i=0; i < K; i++) {    for (int j=0; j < L; j++) {      for (int k=j + 1; k < L; k++) {        double J=M[i][j][k];        double E=Exp[i][j][k];        V[j][k]+=(((J - E) * (J - E)) / E);      }    }  }  double p=CRITICAL[DoF];  for (int j=0; j < L; j++) {    for (int k=j + 1; k < L; k++) {      V[j][k]-=p;    }  }  return V;}  }
class C{  public DiscoverRequest(int objectId){  this(new LwM2mPath(objectId));}  }
class C{  public void focusGained(FocusEvent e){  if (log.isDebugEnabled()) {    log.debug("focusGained");  }  enterField();}  }
class C{  public void updateNow(DrawContext dc){  this.highlight(this.annotation.getAttributes().isHighlighted());  String text=this.makeAnnotationText(this.wwd.getModel().getLayers());  this.annotation.setText(text);  this.size=this.annotation.getPreferredSize(dc);  this.annotation.getAttributes().setDrawOffset(new Point(this.size.width / 2,0));  this.update=false;}  }
class C{  public void testGetF25(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF25();  assertEquals(expResult,result);}  }
class C{  public void writeStartDocument(String version) throws XMLStreamException {  writeStartDocument(_encoding,version,null);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T invokeMethod(final Object object,final String methodName,final Class<?>[] parameterTypes,Object... parameterValues) throws ReflectionException {  return (T)helper(object,null,methodName,parameterTypes,parameterValues);}  }
class C{  protected Frame<V> newFrame(final Frame<? extends V> src){  return new Frame<V>(src);}  }
class C{  public int numProcessors(){  return m_processors;}  }
class C{  public Node find(Coordinate coord){  return (Node)nodeMap.get(coord);}  }
class C{  public RcsServiceException(Throwable cause){  super(cause);}  }
class C{  public void fetchAndParseDataFiles(Log log) throws IOException {  for (  EnumMap.Entry<DataFileType,URL> entry : dataFiles.entrySet()) {    DataFileType fileType=entry.getKey();    URL url=entry.getValue();    log.info("\t\tFetching/parsing: " + url.getPath());    fileType.scan(url,this);    log.info("\t\tCompleted: " + url.getPath());  }}  }
class C{  public ProgressReporterLogger(Logger log){  this.log=log;}  }
class C{  protected boolean hasOutstandingChanges(){  return (fieldFrom.hasChanged() || fieldResource.hasChanged() || fieldResourceType.hasChanged()|| fieldTo.hasChanged());}  }
class C{  public DefaultEntityViewInfo createPoiInfo(float minScale,int printOrder,EntityIcon icon){  DefaultEntityViewInfo result=createDefaultInfo();  result.minVisibleScale=minScale;  result.printOrder=printOrder;  result.icon=icon;  return result;}  }
class C{  Account(){  id=0;  balance=0;  annualInterestRate=0;  dateCreated=new Date();}  }
class C{  @Override public void increment(double coord,short value){  if (cachefill >= 0) {    if (cachefill < cachec.length) {      cachec[cachefill]=coord;      cachev[cachefill]=value;      cachefill++;      return;    } else {      materialize();    }  }  testResample(coord);  super.increment(coord,value);}  }
class C{  public void testReplaceValuesRandomAccess(){  Multimap<String,Integer> multimap=create();  multimap.put("foo",1);  multimap.put("foo",3);  assertTrue(multimap.replaceValues("foo",Arrays.asList(2,4)) instanceof RandomAccess);  assertTrue(multimap.replaceValues("bar",Arrays.asList(2,4)) instanceof RandomAccess);}  }
class C{  public void testLeaderStepsDownAndVotesOnHigherTerm() throws Throwable {  runOnServer(null);}  }
class C{  public ByteLookupTable(int offset,byte data[]){  super(offset,data.length);  numComponents=1;  numEntries=data.length;  this.data=new byte[1][];  this.data[0]=data;}  }
class C{  public void useAttributeFor(final Class<?> type){  if (attributeMapper == null) {    throw new InitializationException("No " + AttributeMapper.class.getName() + " available");  }  attributeMapper.addAttributeFor(type);}  }
class C{  public static MethodOperand COMPILED(RVMMethod callee,Offset offset){  byte type=callee.isStatic() ? STATIC : VIRTUAL;  MethodOperand op=new MethodOperand(callee.getMemberRef(),callee,type);  op.jtocOffset=offset;  op.designatedOffset=true;  op.isPreciseTarget=true;  return op;}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  public RegionExistsException(Region rgn){  super(rgn.getFullPath());  this.region=rgn;}  }
class C{  private static void stepInFunctionNode(final INaviFunctionNode node,final UnrelocatedAddress address,final Set<BreakpointAddress> instructions){  if (address.getAddress().equals(node.getFunction().getAddress())) {    instructions.addAll(CSteppingHelper.getSuccessors(node));  }}  }
class C{  private StorageProvider createNewStorageProviderInstance(SMISProvider smisProvider){  StorageProvider storageProvider=new StorageProvider();  storageProvider.setId(URIUtil.createId(StorageProvider.class));  storageProvider.setCompatibilityStatus(smisProvider.getCompatibilityStatus());  storageProvider.setConnectionStatus(smisProvider.getConnectionStatus());  storageProvider.setCreationTime(smisProvider.getCreationTime());  storageProvider.setDecommissionedSystems(smisProvider.getDecommissionedSystems());  storageProvider.setDescription(smisProvider.getDescription());  storageProvider.setInterfaceType(StorageProvider.InterfaceType.smis.name());  storageProvider.setIPAddress(smisProvider.getIPAddress());  storageProvider.setLabel(smisProvider.getLabel());  storageProvider.setLastScanStatusMessage(smisProvider.getLastScanStatusMessage());  storageProvider.setLastScanTime(smisProvider.getLastScanTime());  storageProvider.setManufacturer(smisProvider.getManufacturer());  storageProvider.setNextScanTime(smisProvider.getNextScanTime());  storageProvider.setPassword(smisProvider.getPassword());  storageProvider.setPortNumber(smisProvider.getPortNumber());  storageProvider.setProviderID(smisProvider.getProviderID());  storageProvider.setRegistrationStatus(smisProvider.getRegistrationStatus());  storageProvider.setScanStatus(smisProvider.getScanStatus());  storageProvider.setOpStatus(smisProvider.getOpStatus());  StringSet storageSystems=smisProvider.getStorageSystems();  if (storageSystems != null) {    StringSet newStoargeSystems=new StringSet();    newStoargeSystems.addAll(storageSystems);    storageProvider.setStorageSystems(newStoargeSystems);  }  storageProvider.setSuccessScanTime(smisProvider.getSuccessScanTime());  storageProvider.setTag(smisProvider.getTag());  storageProvider.setUserName(smisProvider.getUserName());  storageProvider.setUseSSL(smisProvider.getUseSSL());  storageProvider.setVersionString(smisProvider.getVersionString());  return storageProvider;}  }
class C{  private Operator findOperator(Point point){  int processIndex=view.getProcessIndexUnder(point);  if (processIndex != -1) {    Point mousePositionRelativeToProcess=view.toProcessSpace(point,processIndex);    if (mousePositionRelativeToProcess == null) {      return null;    }    for (    Operator op : view.getModel().getDisplayedChain().getSubprocess(processIndex).getOperators()) {      Rectangle2D rect=view.getModel().getOperatorRect(op);      if (rect.contains(new Point2D.Double(mousePositionRelativeToProcess.x,mousePositionRelativeToProcess.y))) {        return op;      }    }  }  return null;}  }
class C{  public static int[] randomInts(int max,int count){  int[] vals=new int[count];  for (int i=0; i < count; i++)   vals[i]=SEEDED_RANDOM.nextInt(max);  return vals;}  }
class C{  private void writePatternList(final PartitionData partition,int offset,int every,final String codonPrefix,final boolean unique,final boolean strip,final XMLWriter writer){  Alignment alignment=partition.getAlignment();  int from=partition.getFromSite();  int to=partition.getToSite();  int partEvery=partition.getEvery();  if (partEvery > 1 && every > 1)   throw new IllegalArgumentException();  if (from < 1)   from=1;  every=Math.max(partEvery,every);  from+=offset;  SitePatterns patterns=new SitePatterns(alignment,null,from - 1,to - 1,every,strip,unique);  writer.writeComment("The " + (unique ? "unique " : "") + "patterns from "+ from+ " to "+ (to > 0 ? to : "end")+ ((every > 1) ? " every " + every : ""),"npatterns=" + patterns.getPatternCount());  List<Attribute> attributes=new ArrayList<Attribute>();  if (codonPrefix != null) {    attributes.add(new Attribute.Default<String>(XMLParser.ID,partition.getPrefix() + codonPrefix + SitePatternsParser.PATTERNS));  }  attributes.add(new Attribute.Default<String>("from","" + from));  if (to >= 0)   attributes.add(new Attribute.Default<String>("to","" + to));  if (every > 1) {    attributes.add(new Attribute.Default<String>("every","" + every));  }  if (!unique) {    attributes.add(new Attribute.Default<Boolean>(SitePatternsParser.UNIQUE,false));  }  if (strip) {    attributes.add(new Attribute.Default<Boolean>(SitePatternsParser.STRIP,false));  }  writer.writeOpenTag(SitePatternsParser.PATTERNS,attributes);  writer.writeIDref(AlignmentParser.ALIGNMENT,alignment.getId());  writer.writeCloseTag(SitePatternsParser.PATTERNS);}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public void stop(){  if (getSpeechRecordState() == SpeechRecord.STATE_INITIALIZED && mRecorder.getRecordingState() == SpeechRecord.RECORDSTATE_RECORDING) {    try {      mRecorder.stop();      setState(State.STOPPED);    } catch (    IllegalStateException e) {      handleError("native stop() called in illegal state: " + e.getMessage());    }  } else {    handleError("stop() called in illegal state");  }}  }
class C{  public State isWatching(){  lock.lock();  try {    if (hashToKeys.isEmpty())     return State.EMPTY;    return isWatching ? State.WATCHING : State.REGULAR;  }  finally {    lock.unlock();  }}  }
class C{  public WmsLayerConfig(){}  }
class C{  public void test_removeAt_siftUp(){  PriorityQueue<Integer> q=new PriorityQueue<Integer>();  for (  int i : new int[]{0,3,1,4,5,6,2}) {    q.add(i);  }  q.remove(4);  for (  int i : new int[]{0,1,2,3,5,6}) {    assertEquals(i,(int)q.poll());  }  assertNull(q.poll());}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  @SuppressWarnings("unchecked") public T build(){  if (scheduleBuilder == null)   scheduleBuilder=SimpleScheduleBuilder.simpleSchedule();  MutableTrigger trig=scheduleBuilder.build();  trig.setCalendarName(calendarName);  trig.setDescription(description);  trig.setStartTime(startTime);  trig.setEndTime(endTime);  if (key == null)   key=new TriggerKey(Key.createUniqueName(null),null);  trig.setKey(key);  if (jobKey != null)   trig.setJobKey(jobKey);  trig.setPriority(priority);  if (!jobDataMap.isEmpty())   trig.setJobDataMap(jobDataMap);  return (T)trig;}  }
class C{  private void testTlsSessionWithServerSideAnonymousDisabled() throws Exception {  boolean ssl=true;  Task task=null;  ServerSocket serverSocket=null;  Socket socket=null;  try {    serverSocket=NetUtils.createServerSocket(PORT,ssl);    serverSocket.setSoTimeout(WAIT_LONGER_MILLIS);    String[] defaultCipherSuites=SSLContext.getDefault().getServerSocketFactory().getDefaultCipherSuites();    ((SSLServerSocket)serverSocket).setEnabledCipherSuites(defaultCipherSuites);    task=createServerSocketTask(serverSocket);    task.execute(TASK_PREFIX + "AnonDisabled");    Thread.sleep(WAIT_MILLIS);    socket=NetUtils.createLoopbackSocket(PORT,ssl);    assertTrue("loopback socket should be connected",socket.isConnected());    SSLSession session=((SSLSocket)socket).getSession();    assertFalse("TLS session should be invalid when the server" + "disables anonymous TLS",session.isValid());    assertEquals("SSL_NULL_WITH_NULL_NULL",session.getCipherSuite());  }  finally {    closeSilently(socket);    closeSilently(serverSocket);    if (task != null) {      assertTrue(task.getException() != null);      assertEquals(javax.net.ssl.SSLHandshakeException.class.getName(),task.getException().getClass().getName());      assertContains(task.getException().getMessage(),"certificate_unknown");      task.join();    }  }}  }
class C{  public Query union(Query query){  if (immutable) {    return fork().union(query);  }  addCompoundSelect(CompoundSelect.union(query));  return this;}  }
class C{  public void writeURIAttribute(String name,Object value,String componentPropertyName) throws IOException {  if (name == null || value == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  writer.write(" ");  writer.write(name);  writer.write("=\"");  String strValue=value.toString();  writer.write(' ');  writer.write(name);  writer.write("=\"" + strValue + "\"");}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  private static img createImage(String AD_Language,String name,String js_command,boolean enabled,boolean pressed){  StringBuffer imgName=new StringBuffer(name);  if (!enabled)   imgName.append("D"); else   if (pressed)   imgName.append("X");  imgName.append("16.gif");  img img=new img(WebEnv.getImageDirectory(imgName.toString()),name);  if (enabled)   img.setAlt(Msg.getMsg(AD_Language,name));  if (!pressed || !enabled)   img.setID("imgButton"); else   img.setID("imgButtonPressed");  img.setHeight(16);  img.setWidth(16);  img.setBorder(0);  img.setTitle(name);  return img;}  }
class C{  IteratorWrapper(Iterator<T> it){  this.it=it;}  }
class C{  protected void doCreateTextSymbols(FeatureMap featureMap,Collection<VPFSymbol> outCollection){  for (  Map.Entry<VPFSymbolKey,CombinedFeature> entry : featureMap.entrySet()) {    CombinedFeature feature=entry.getValue();    for (    VPFSymbolAttributes attr : this.getSymbolAttributes(feature,entry.getKey())) {switch (attr.getFeatureType()) {case TEXT:        this.addTextSymbol(feature,attr,outCollection);      break;  }}}}  }
class C{  public final SIPRequest createErrorAck(To responseToHeader) throws SipException, ParseException {  SIPRequest newRequest=new SIPRequest();  newRequest.setRequestLine((RequestLine)this.requestLine.clone());  newRequest.setMethod(Request.ACK);  newRequest.setHeader((Header)this.callIdHeader.clone());  newRequest.setHeader((Header)this.maxForwardsHeader.clone());  newRequest.setHeader((Header)this.fromHeader.clone());  newRequest.setHeader((Header)responseToHeader.clone());  newRequest.addFirst((Header)this.getTopmostVia().clone());  newRequest.setHeader((Header)cSeqHeader.clone());  newRequest.getCSeq().setMethod(Request.ACK);  if (this.getRouteHeaders() != null) {    newRequest.setHeader((SIPHeaderList)this.getRouteHeaders().clone());  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  long addNote(OwnCloudNote note){  SQLiteDatabase db=this.getWritableDatabase();  ContentValues values=new ContentValues();  if (note instanceof DBNote) {    DBNote dbNote=(DBNote)note;    if (dbNote.getId() > 0) {      values.put(key_id,dbNote.getId());    }    values.put(key_status,dbNote.getStatus().getTitle());  } else {    values.put(key_status,DBStatus.VOID.getTitle());  }  if (note.getRemoteId() > 0) {    values.put(key_remote_id,note.getRemoteId());  }  values.put(key_title,note.getTitle());  values.put(key_modified,note.getModified(NoteSQLiteOpenHelper.DATE_FORMAT));  values.put(key_content,note.getContent());  long id=db.insert(table_notes,null,values);  db.close();  return id;}  }
class C{  public Builder behindViewPage(){  mLayoutBehindViewPage=true;  return this;}  }
class C{  public String convertEventDirectionToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  void appendEnumeration(Enumeration<?> enumeration){  if (m_next == null) {    m_next=new Enumerator(enumeration);  } else {    m_next.appendEnumeration(enumeration);  }}  }
class C{  public static int dimensionality(Relation<? extends SpatialComparable> relation){  final SimpleTypeInformation<? extends SpatialComparable> type=relation.getDataTypeInformation();  if (type instanceof FieldTypeInformation) {    return ((FieldTypeInformation)type).getDimensionality();  }  return -1;}  }
class C{  private double costPendingPhrases(){  double score=0.0;  for (  PendingPhrase<TK,FV> pendingPhrase : pendingPhrases) {    ConcreteRule<TK,FV> opt=pendingPhrase.concreteOpt;    assert (opt.abstractRule instanceof DTURule);    DTURule<TK> dtuOpt=(DTURule<TK>)opt.abstractRule;    for (int i=pendingPhrase.segmentIdx + 1; i < dtuOpt.dtus.length; ++i) {      score+=pendingPhrase.futureCosts[i];    }  }  return score;}  }
class C{  public static InstanceOfExpression instanceOf(Expression expression,String typeName,String... typeNames){  return new InstanceOfExpression(expression,typeName,typeNames);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void checkValid() throws IOException {  if (true == m_closed) {    throw new EOFException("OutputStreamLogger closed");  }}  }
class C{  public static BufferedImage convert(Image srcImage){  ImageData imageData=srcImage.getImageData();  int width=imageData.width;  int height=imageData.height;  ImageData maskData=null;  int alpha[]=new int[1];  if (imageData.alphaData == null)   maskData=imageData.getTransparencyMask();  BufferedImage image=new BufferedImage(imageData.width,imageData.height,BufferedImage.TYPE_INT_ARGB);  WritableRaster alphaRaster=image.getAlphaRaster();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      int color=imageData.getPixel(x,y);      color=translateColor(imageData,color);      image.setRGB(x,y,color);      if (alphaRaster != null) {        if (imageData.alphaData != null) {          alpha[0]=imageData.getAlpha(x,y);          alphaRaster.setPixel(x,y,alpha);        } else {          if (maskData != null) {            alpha[0]=maskData.getPixel(x,y) == 0 ? 0 : 255;            alphaRaster.setPixel(x,y,alpha);          }        }      }    }  }  return image;}  }
class C{  public void output(OutputStream out){  html.output(out);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public boolean addAll(Collection<? extends E> c){  return addAll(size,c);}  }
class C{  public void close(){  shouldLive=false;}  }
class C{  public static void sendTitlePacket(Player player,String mainJson,String subJson) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException, InstantiationException, NoSuchFieldException {  Object craftPlayer=Class.forName(PackageType.CRAFTBUKKIT + ".entity.CraftPlayer").cast(player);  Object craftHandle=Class.forName(PackageType.CRAFTBUKKIT + ".entity.CraftPlayer").getMethod("getHandle").invoke(craftPlayer);  Object playerConnection=Class.forName(PackageType.MINECRAFT_SERVER + ".EntityPlayer").getField("playerConnection").get(craftHandle);  Object parsedMainMessage;  try {    parsedMainMessage=Class.forName(PackageType.MINECRAFT_SERVER + ".IChatBaseComponent$ChatSerializer").getMethod("a",String.class).invoke(null,ChatColor.translateAlternateColorCodes("&".charAt(0),mainJson));  } catch (  ClassNotFoundException e) {    parsedMainMessage=Class.forName(PackageType.MINECRAFT_SERVER + ".ChatSerializer").getMethod("a",String.class).invoke(null,ChatColor.translateAlternateColorCodes("&".charAt(0),mainJson));  }  Object parsedSubMessage;  try {    parsedSubMessage=Class.forName(PackageType.MINECRAFT_SERVER + ".IChatBaseComponent$ChatSerializer").getMethod("a",String.class).invoke(null,ChatColor.translateAlternateColorCodes("&".charAt(0),subJson));  } catch (  ClassNotFoundException e) {    parsedSubMessage=Class.forName(PackageType.MINECRAFT_SERVER + ".ChatSerializer").getMethod("a",String.class).invoke(null,ChatColor.translateAlternateColorCodes("&".charAt(0),subJson));  }  Class<?> titleClass;  try {    titleClass=PackageType.MINECRAFT_SERVER.getClass("PacketPlayOutTitle$EnumTitleAction");  } catch (  ClassNotFoundException e) {    titleClass=PackageType.MINECRAFT_SERVER.getClass("EnumTitleAction");  }  Enum<?> mainTitleEnumValue=null;  Enum<?> subTitleEnumValue=null;  for (  Object o : titleClass.getEnumConstants()) {    Enum<?> e=(Enum<?>)o;    if ("TITLE".equalsIgnoreCase(e.name()))     mainTitleEnumValue=e;    if ("SUBTITLE".equalsIgnoreCase(e.name()))     subTitleEnumValue=e;  }  Object packetPlayOutChatMainTitle=ReflectionUtils.getConstructor(Class.forName(PackageType.MINECRAFT_SERVER + ".PacketPlayOutTitle"),Class.forName(PackageType.MINECRAFT_SERVER + ".PacketPlayOutTitle$EnumTitleAction"),Class.forName(PackageType.MINECRAFT_SERVER + ".IChatBaseComponent")).newInstance(mainTitleEnumValue,parsedMainMessage);  Class.forName(PackageType.MINECRAFT_SERVER + ".PlayerConnection").getMethod("sendPacket",Class.forName(PackageType.MINECRAFT_SERVER + ".Packet")).invoke(playerConnection,packetPlayOutChatMainTitle);  Object packetPlayOutChatSubTitle=ReflectionUtils.getConstructor(Class.forName(PackageType.MINECRAFT_SERVER + ".PacketPlayOutTitle"),Class.forName(PackageType.MINECRAFT_SERVER + ".PacketPlayOutTitle$EnumTitleAction"),Class.forName(PackageType.MINECRAFT_SERVER + ".IChatBaseComponent")).newInstance(subTitleEnumValue,parsedSubMessage);  Class.forName(PackageType.MINECRAFT_SERVER + ".PlayerConnection").getMethod("sendPacket",Class.forName(PackageType.MINECRAFT_SERVER + ".Packet")).invoke(playerConnection,packetPlayOutChatSubTitle);}  }
class C{  public void load() throws CouldntLoadDataException, CPartialLoadException, LoadCancelledException {  if (!view.isLoaded()) {    view.load();  }  final ZyGraph graph=container instanceof CModuleContainer ? CGraphBuilder.buildDnDGraph(view,container.getModules().get(0).getTypeManager()) : CGraphBuilder.buildGraph(view);  CRegisterHotKeys.register(graph);  if (window == null) {    final CGraphWindow navi=new CGraphWindow();    final CGraphModel model=new CGraphModel(navi,container.getDatabase(),container,graph);    CNodeUpdaterInitializer.addUpdaters(model);    final CGraphPanel panel=new CGraphPanel(model);    navi.addGraph(panel);    CWindowManager.instance().register(navi);    navi.setSize(Toolkit.getDefaultToolkit().getScreenSize());    navi.setVisible(true);    GuiHelper.applyWindowFix(navi);    navi.setExtendedState(Frame.MAXIMIZED_BOTH);    workArounds(panel);    graphModel=model;  } else {    final CGraphModel model=new CGraphModel(window,container.getDatabase(),container,graph);    CNodeUpdaterInitializer.addUpdaters(model);    final CGraphPanel panel=new CGraphPanel(model);    window.addGraph(panel);    workArounds(panel);    window.toFront();    graphModel=model;  }}  }
class C{  @SuppressWarnings("unchecked") public final E remove(ClassLoader loader){  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof EnvironmentClassLoader) {      EnvironmentClassLoader envLoader=(EnvironmentClassLoader)loader;      return (E)envLoader.removeAttribute(_varName);    }  }  return setGlobal(null);}  }
class C{  public boolean matches(HttpServletRequest request){  String uri=getURI(request);  Matcher matcher=matchPattern.matcher(uri);  return matcher.matches();}  }
class C{  public Poisson(double lambda){  setLambda(lambda);}  }
class C{  public boolean hasCountHint(){  return getCountHint() != null;}  }
class C{  public static void updateRunId(SAMFileHeader header){  final ArrayList<String> newComments=new ArrayList<>();  for (  final String comment : header.getComments()) {    if (comment.replaceAll("@CO\t","").startsWith(RUN_ID_ATTRIBUTE)) {      newComments.add(SamUtils.RUN_ID_ATTRIBUTE + CommandLine.getRunId().toString());    } else {      newComments.add(comment);    }  }  header.setComments(newComments);}  }
class C{  public void resetAllRotationPoints(){  rotationPointX=initRotationPointX;  rotationPointY=initRotationPointY;  rotationPointZ=initRotationPointZ;}  }
class C{  public static String xmlAttr(String name,String value){  return " " + name + "=\""+ xmlText(value)+ "\"";}  }
class C{  protected boolean validateCommit(){  if (!readonly)   for (  Map.Entry<VBox<?>,VBoxBody<?>> entry : bodiesRead.entrySet()) {    if (entry.getKey().body.version != entry.getValue().version) {      return false;    }  }  return true;}  }
class C{  public void fromData(DataInput in) throws IOException, ClassNotFoundException {  this.myData=DataSerializer.readByteArray(in);}  }
class C{  public static FileTransferHttpResumeInfo parseFileTransferHttpResumeInfo(byte[] xml) throws ParserConfigurationException, SAXException, IOException {  return new FileTransferHttpResumeInfoParser(new InputSource(new ByteArrayInputStream(xml))).getResumeInfo();}  }
class C{  public void disable(){  enabled=false;}  }
class C{  public String buildSentence(){  String sentence="There was a problem assembling the sentence!";  try {    sentence=String.format("%s %s %s %s %s.",getWord("SUBJECT"),getWord("VERB"),getWord("ARTICLE"),getWord("ADJECTIVE"),getWord("NOUN"));  } catch (  Exception e) {    System.out.println(e);  }  return sentence;}  }
class C{  public Boolean hasFeature(Feature feature){  Boolean result=getFeatures().get(feature);  if (result == null) {    result=Boolean.FALSE;  }  return result;}  }
class C{  protected void notifyUpdate(String key,Object value){  for (  ISharedObjectListener listener : listeners) {    listener.onSharedObjectUpdate(this,key,value);  }}  }
class C{  public void closeDrawer(){  if (mSlideView == null) {    throw new IllegalArgumentException("Drawer not found");  }  if (mFirstLayout) {    final LayoutParams lp=(LayoutParams)mSlideView.getLayoutParams();    lp.onScreen=0.f;    lp.knownOpen=false;  } else {    mDragHelper.smoothSlideViewTo(mSlideView,mCollapseWidth,mSlideView.getTop());  }  invalidate();}  }
class C{  public void testRandomUnibiHugeStrings() throws Exception {  Random random=random();  checkRandomData(random,unibiAnalyzer,100 * RANDOM_MULTIPLIER,8192);}  }
class C{  public static VOConfigurationSetting toValueObject(ConfigurationSetting doSetting){  if (doSetting == null) {    return null;  }  VOConfigurationSetting voSetting=new VOConfigurationSetting();  copyToVOAttributes(doSetting,voSetting);  updateValueObject(voSetting,doSetting);  return voSetting;}  }
class C{  public DrawerBuilder withSliderBackgroundDrawable(@NonNull Drawable sliderBackgroundDrawable){  this.mSliderBackgroundDrawable=sliderBackgroundDrawable;  return this;}  }
class C{  public void reportError(Object src,long where,String err,String msg){  if (src == null) {    if (errorFileName != null) {      flushErrors();      errorFileName=null;    }    if (err.startsWith("warn.")) {      if (warnings()) {        nwarnings++;        output(msg);      }      return;    }    output("error: " + msg);    nerrors++;    flags|=F_ERRORSREPORTED;  } else   if (src instanceof String) {    String fileName=(String)src;    if (!fileName.equals(errorFileName)) {      flushErrors();      errorFileName=fileName;    }    if (err.startsWith("warn.")) {      if (err.indexOf("is.deprecated") >= 0) {        if (!deprecationFiles.contains(src)) {          deprecationFiles.addElement(src);        }        if (deprecation()) {          if (insertError(where,msg)) {            ndeprecations++;          }        } else {          ndeprecations++;        }      } else {        if (warnings()) {          if (insertError(where,msg)) {            nwarnings++;          }        } else {          nwarnings++;        }      }    } else {      if (insertError(where,msg)) {        nerrors++;        flags|=F_ERRORSREPORTED;      }    }  } else   if (src instanceof ClassFile) {    reportError(((ClassFile)src).getPath(),where,err,msg);  } else   if (src instanceof Identifier) {    reportError(src.toString(),where,err,msg);  } else   if (src instanceof ClassDeclaration) {    try {      reportError(((ClassDeclaration)src).getClassDefinition(this),where,err,msg);    } catch (    ClassNotFound e) {      reportError(((ClassDeclaration)src).getName(),where,err,msg);    }  } else   if (src instanceof ClassDefinition) {    ClassDefinition c=(ClassDefinition)src;    if (!err.startsWith("warn.")) {      c.setError();    }    reportError(c.getSource(),where,err,msg);  } else   if (src instanceof MemberDefinition) {    reportError(((MemberDefinition)src).getClassDeclaration(),where,err,msg);  } else {    output(src + ":error=" + err+ ":"+ msg);  }}  }
