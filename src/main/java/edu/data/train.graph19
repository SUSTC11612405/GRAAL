class C{  public boolean addTriangle(Triangle triangle){  return getTriangles().add(triangle);}  }
class C{  public String invertSelectionTipText(){  return "Set attribute selection mode. If false, only selected " + "attributes in the range will be worked on; if " + "true, only non-selected attributes will be processed.";}  }
class C{  public static ActiveMQConnectionFactory createConnectionFactoryWithHA(final DiscoveryGroupConfiguration groupConfiguration,JMSFactoryType jmsFactoryType){  ActiveMQConnectionFactory factory=null;  if (jmsFactoryType.equals(JMSFactoryType.CF)) {    factory=new ActiveMQJMSConnectionFactory(true,groupConfiguration);  } else   if (jmsFactoryType.equals(JMSFactoryType.QUEUE_CF)) {    factory=new ActiveMQQueueConnectionFactory(true,groupConfiguration);  } else   if (jmsFactoryType.equals(JMSFactoryType.TOPIC_CF)) {    factory=new ActiveMQTopicConnectionFactory(true,groupConfiguration);  } else   if (jmsFactoryType.equals(JMSFactoryType.XA_CF)) {    factory=new ActiveMQXAConnectionFactory(true,groupConfiguration);  } else   if (jmsFactoryType.equals(JMSFactoryType.QUEUE_XA_CF)) {    factory=new ActiveMQXAQueueConnectionFactory(true,groupConfiguration);  } else   if (jmsFactoryType.equals(JMSFactoryType.TOPIC_XA_CF)) {    factory=new ActiveMQXATopicConnectionFactory(true,groupConfiguration);  }  return factory;}  }
class C{  public UnicastServerRef2(){}  }
class C{  public static boolean isPaddyWithWater(IBlockAccess world,int x,int y,int z,int amount){  final Block block=world.getBlock(x,y,z);  if (isPaddy(block)) {    final int meta=world.getBlockMetadata(x,y,z);    return meta >= amount;  }  return false;}  }
class C{  public boolean isDistinct(){  return isDistinct;}  }
class C{  private void childInv(Node r){  Edge e;  Node s;  for (int noa=0; (e=r.getChild(noa)) != null; noa++) {    s=e.getTarget();    s.setVisible(false);    childInv(s);  }}  }
class C{  @Override public void resize(int width,int height){  float aspectRatio=1.0f * width / height;  camera.setToOrtho(false,width,height);  trackSatellite(camera,aspectRatio);}  }
class C{  private void compileIllegal(final IGame game,final Entity entity,final MoveStep prev){  final MoveStepType stepType=getType();  final boolean isInfantry=entity instanceof Infantry;  Coords curPos=getPosition();  Coords lastPos=prev.getPosition();  boolean isUnjammingRAC=entity.isUnjammingRAC();  prevStepOnPavement=prev.isPavementStep();  isTurning=prev.isTurning();  isUnloaded=prev.isUnloaded();  if (isInfantry && ((getMpUsed() - getMp()) == 0)) {    setFirstStep(true);  }  movementType=EntityMovementType.MOVE_ILLEGAL;  if ((entity instanceof Dropship) && !prev.getCrushedBuildingLocs().isEmpty()) {    return;  }  if (entity.isAirborne()) {    if (!(entity instanceof Aero)) {switch (type) {case TURN_LEFT:case TURN_RIGHT:        movementType=EntityMovementType.MOVE_WALK;default :      break;  }  return;}int tmpSafeTh=entity.getWalkMP();Aero a=(Aero)entity;if (a.isImmobile()) {  return;}if (!isFirstStep() && (prev.getMovementType(false) == EntityMovementType.MOVE_ILLEGAL)) {  return;}if (game.getOptions().booleanOption("fuel_consumption")) {  int fuelUsed=mpUsed + Math.max(mpUsed - a.getWalkMP(),0);  if (fuelUsed > a.getFuel()) {    return;  }}if (game.getBoard().inSpace()) {  if ((entity instanceof SpaceStation) && !((type == MoveStepType.TURN_LEFT) || (type == MoveStepType.TURN_RIGHT) || (type == MoveStepType.LAUNCH)|| (type == MoveStepType.UNDOCK))) {    return;  }  if (!game.useVectorMove() && (distance == 0) && (velocity != 0)&& ((type == MoveStepType.TURN_LEFT) || (type == MoveStepType.TURN_RIGHT))) {    return;  }  if (!game.useVectorMove() && (a instanceof SmallCraft) && (velocity != 0)&& (getNTurns() > 2)) {    return;  }  if (!game.useVectorMove() && (a instanceof Jumpship) && (velocity != 0)&& (getNTurns() > 1)) {    return;  }}if (useAeroAtmosphere(game,entity) && ((type == MoveStepType.TURN_LEFT) || (type == MoveStepType.TURN_RIGHT)) && !prev.canAeroTurn(game)) {  return;}if ((type == MoveStepType.FORWARDS) && game.getBoard().inAtmosphere() && !a.isOutControl()) {  IHex desth=game.getBoard().getHex(getPosition());  if (altitude <= desth.ceiling(true)) {    return;  }}if ((type == MoveStepType.TURN_LEFT) && (a.getRightThrustHits() > 2) && !useSpheroidAtmosphere(game,entity)) {  return;}if ((type == MoveStepType.TURN_RIGHT) && (a.getLeftThrustHits() > 2) && !useSpheroidAtmosphere(game,entity)) {  return;}if (!isFirstStep() && (prev.getType() == MoveStepType.LAUNCH) && (getType() != MoveStepType.UNDOCK)) {  return;}if (!isFirstStep() && (prev.getType() == MoveStepType.UNDOCK) && (getType() != MoveStepType.LAUNCH)) {  return;}if (!isFirstStep() && (prev.getType() == MoveStepType.RECOVER)) {  return;}if (!isFirstStep() && (prev.getType() == MoveStepType.JOIN)) {  return;}if (!isFirstStep() && ((prev.getType() == MoveStepType.LAND) || (prev.getType() == MoveStepType.VLAND))) {  return;}boolean bDumping=false;for (Mounted mo : entity.getAmmo()) {  if (mo.isDumping()) {    bDumping=true;    break;  }}if (bDumping && (getMpUsed() > tmpSafeTh) && !a.isRandomMove()) {  return;}if ((getVelocityLeft() >= 0) || useSpheroidAtmosphere(game,entity)) {  if (useAeroAtmosphere(game,entity) && game.getBoard().onGround() && (getVelocityLeft() == 0)&& (getNMoved() > 0)) {    return;  }  if (getMpUsed() <= tmpSafeTh) {    movementType=EntityMovementType.MOVE_SAFE_THRUST;  } else   if (getMpUsed() <= entity.getRunMPwithoutMASC()) {    movementType=EntityMovementType.MOVE_OVER_THRUST;  } else   if (a.isRandomMove()) {    movementType=EntityMovementType.MOVE_OVER_THRUST;  }}return;}if (prev.isDiggingIn) {isDiggingIn=true;if ((type != MoveStepType.TURN_LEFT) && (type != MoveStepType.TURN_RIGHT)) {  return;}movementType=EntityMovementType.MOVE_NONE;} else if ((type == MoveStepType.DIG_IN) || (type == MoveStepType.FORTIFY)) {if (!isInfantry || !isFirstStep()) {  return;}Infantry inf=(Infantry)entity;if ((inf.getDugIn() != Infantry.DUG_IN_NONE) && (inf.getDugIn() != Infantry.DUG_IN_COMPLETE)) {  return;}if (game.getBoard().getHex(curPos).containsTerrain(Terrains.PAVEMENT) || game.getBoard().getHex(curPos).containsTerrain(Terrains.FORTIFIED) || game.getBoard().getHex(curPos).containsTerrain(Terrains.BUILDING)|| game.getBoard().getHex(curPos).containsTerrain(Terrains.ROAD)) {  return;}isDiggingIn=true;movementType=EntityMovementType.MOVE_NONE;}if (prev.isTakingCover) {return;}if (type == MoveStepType.TAKE_COVER) {if (!isInfantry) {  return;}if (!Infantry.hasValidCover(game,getPosition(),getElevation())) {  return;}isTakingCover=true;movementType=prev.getMovementType(false);return;}if (isFirstStep() && (type == MoveStepType.UP) && (entity.getMovementMode() == EntityMovementMode.WIGE)&& (entity.getRunMP() >= 5)) {movementType=EntityMovementType.MOVE_WALK;}if (entity.getMovementMode() == EntityMovementMode.WIGE && type == MoveStepType.DOWN && getElevation() == 0 && prev.getElevation() > 0) {movementType=EntityMovementType.MOVE_LEGAL;}if ((type == MoveStepType.FLEE) && entity.canFlee()) {movementType=EntityMovementType.MOVE_LEGAL;}if ((type == MoveStepType.CLIMB_MODE_ON) || (type == MoveStepType.CLIMB_MODE_OFF)) {movementType=prev.movementType;}if (type == MoveStepType.EJECT) {movementType=EntityMovementType.MOVE_NONE;}if (type == MoveStepType.SEARCHLIGHT) {movementType=prev.movementType;}if (type == MoveStepType.UNJAM_RAC) {movementType=EntityMovementType.MOVE_NONE;}if ((type == MoveStepType.CLEAR_MINEFIELD) && (entity instanceof Infantry)) {movementType=EntityMovementType.MOVE_NONE;}if (type == MoveStepType.EVADE) {if (entity.hasHipCrit()) {  movementType=EntityMovementType.MOVE_ILLEGAL;  return;}movementType=EntityMovementType.MOVE_RUN;}if (type == MoveStepType.SHUTDOWN) {movementType=EntityMovementType.MOVE_NONE;}if (type == MoveStepType.STARTUP) {movementType=EntityMovementType.MOVE_NONE;}if (type == MoveStepType.SELF_DESTRUCT) {movementType=EntityMovementType.MOVE_NONE;}if (isJumping() && (getMpUsed() <= entity.getJumpMPWithTerrain()) && !isProne()&& !isHullDown()&& !((entity instanceof Protomech) && (entity.getInternal(Protomech.LOC_LEG) == IArmorState.ARMOR_DESTROYED))&& (!entity.isStuck() || entity.canUnstickByJumping())) {movementType=EntityMovementType.MOVE_JUMP;}if (isFirstStep() && (entity instanceof Protomech) && (entity.getInternal(Protomech.LOC_LEG) == IArmorState.ARMOR_DESTROYED)&& ((stepType == MoveStepType.TURN_LEFT) || (stepType == MoveStepType.TURN_RIGHT))&& !entity.isStuck()) {movementType=EntityMovementType.MOVE_WALK;}if (isInfantry && ((stepType == MoveStepType.TURN_LEFT) || (stepType == MoveStepType.TURN_RIGHT)) && isFirstStep()) {if (isJumping()) {  movementType=EntityMovementType.MOVE_JUMP;} else {  movementType=EntityMovementType.MOVE_WALK;}}int tmpWalkMP=entity.getWalkMP();final int runMP=entity.getRunMP();final int runMPnoMASC=entity.getRunMPwithoutMASC();final int sprintMP=entity.getSprintMP();final int sprintMPnoMASC=entity.getSprintMPwithoutMASC();final boolean isMASCUsed=entity.isMASCUsed();final boolean hasPoorPerformance=entity.hasQuirk(OptionsConstants.QUIRK_NEG_POOR_PERFORMANCE);IHex currHex=game.getBoard().getHex(curPos);IHex lastHex=game.getBoard().getHex(lastPos);if ((getEntity().getMovementMode() == EntityMovementMode.INF_UMU) && (currHex.containsTerrain(Terrains.WATER) && lastHex.containsTerrain(Terrains.WATER) && (entity.relHeight() < currHex.surface()))) {tmpWalkMP=entity.getActiveUMUCount();}if ((getEntity().getMovementMode() == EntityMovementMode.BIPED_SWIM) || (getEntity().getMovementMode() == EntityMovementMode.QUAD_SWIM)) {tmpWalkMP=entity.getActiveUMUCount();}if ((getEntity().getMovementMode() == EntityMovementMode.VTOL) && (getElevation() != 0) && !(getEntity() instanceof VTOL)) {tmpWalkMP=entity.getJumpMP();}if (!isJumping() && !entity.isStuck() && (tmpWalkMP > 0)&& (getMp() > 0)) {if ((stepType != MoveStepType.TURN_LEFT) && (stepType != MoveStepType.TURN_RIGHT) && (stepType != MoveStepType.GET_UP)&& (stepType != MoveStepType.LOAD)&& (stepType != MoveStepType.CAREFUL_STAND)&& (stepType != MoveStepType.HULL_DOWN)&& (stepType != MoveStepType.GO_PRONE)&& !(entity instanceof Tank)&& (isProne() || isHullDown())) {  movementType=EntityMovementType.MOVE_ILLEGAL;  return;}if (!isFirstStep() && (entity.getMovementMode() == EntityMovementMode.WIGE) && (getElevation() == 0)&& (prev.getElevation() == 0)) {  movementType=EntityMovementType.MOVE_ILLEGAL;  return;}if (getMpUsed() <= tmpWalkMP) {  if ((getEntity().getMovementMode() == EntityMovementMode.VTOL) && (getElevation() > 0)) {    movementType=EntityMovementType.MOVE_VTOL_WALK;  } else {    movementType=EntityMovementType.MOVE_WALK;  }} else if ((entity instanceof Infantry) && (curPos.distance(entity.getPosition()) == 1) && (lastPos.equals(entity.getPosition()))) {  if ((getEntity().getMovementMode() == EntityMovementMode.VTOL) && (getElevation() > 0)) {    movementType=EntityMovementType.MOVE_VTOL_WALK;  } else {    movementType=EntityMovementType.MOVE_WALK;  }} else if ((entity instanceof Tank) && !(entity instanceof VTOL) && (getEntity().getMovementMode() != EntityMovementMode.WIGE)&& isOnlyPavement()&& (getMpUsed() == (tmpWalkMP + 1))) {  movementType=EntityMovementType.MOVE_WALK;  entity.gotPavementBonus=true;} else if ((((getMpUsed() <= runMP) && isMASCUsed) || (getMpUsed() <= runMPnoMASC)) && !isRunProhibited()) {  if (hasPoorPerformance && (entity.getMpUsedLastRound() < entity.getWalkMP())) {    movementType=EntityMovementType.MOVE_ILLEGAL;    return;  }  if (entity.getMovementMode() == EntityMovementMode.VTOL) {    movementType=EntityMovementType.MOVE_VTOL_RUN;  } else {    movementType=EntityMovementType.MOVE_RUN;  }} else if ((getMpUsed() <= runMP) && !isRunProhibited() && !isEvading()) {  setUsingMASC(true);  setTargetNumberMASC(entity.getMASCTarget());  if (entity.getMovementMode() == EntityMovementMode.VTOL) {    movementType=EntityMovementType.MOVE_VTOL_RUN;  } else {    movementType=EntityMovementType.MOVE_RUN;  }} else if ((entity instanceof Tank) && !(entity instanceof VTOL) && isOnlyPavement()&& (getMpUsed() <= (runMP + 1))&& !isRunProhibited()) {  movementType=EntityMovementType.MOVE_RUN;  entity.gotPavementBonus=true;} else if (game.getOptions().booleanOption("tacops_sprint") && (entity instanceof Mech) && ((getMpUsed() <= sprintMPnoMASC) || ((getMpUsed() <= sprintMP) && isMASCUsed))&& !isRunProhibited()&& !isEvading()) {  movementType=EntityMovementType.MOVE_SPRINT;} else if ((getMpUsed() <= sprintMP) && !isRunProhibited() && !isEvading()&& game.getOptions().booleanOption("tacops_sprint")) {  setUsingMASC(true);  setTargetNumberMASC(entity.getMASCTarget());  movementType=EntityMovementType.MOVE_SPRINT;}}if (isInfantry && (getEntity().getWalkMP() == 0) && getEntity().getPosition().equals(prev.getPosition())&& (prev.getElevation() == entity.getElevation())&& (getEntity().getPosition().distance(getPosition()) <= 1)&& (Math.abs(entity.getElevation() - getElevation()) <= entity.getMaxElevationChange())&& (movementType != EntityMovementType.MOVE_JUMP)) {movementType=EntityMovementType.MOVE_WALK;}if (((stepType == MoveStepType.TURN_LEFT) || (stepType == MoveStepType.TURN_RIGHT)) && (getMp() == 0)) {movementType=prev.movementType;}if (isJumping() && (entity.getJumpType() == Mech.JUMP_BOOSTER) && ((stepType == MoveStepType.TURN_LEFT) || (stepType == MoveStepType.TURN_RIGHT))) {movementType=EntityMovementType.MOVE_ILLEGAL;}if ((getMp() == 0) && (stepType == MoveStepType.GO_PRONE) && isHullDown()) {movementType=prev.movementType;}if ((movementType == EntityMovementType.MOVE_WALK) && (prev.movementType == EntityMovementType.MOVE_RUN)) {movementType=EntityMovementType.MOVE_RUN;} else if ((movementType == EntityMovementType.MOVE_VTOL_WALK) && (prev.movementType == EntityMovementType.MOVE_VTOL_RUN)) {movementType=EntityMovementType.MOVE_VTOL_RUN;} else if (((movementType == EntityMovementType.MOVE_WALK) || (movementType == EntityMovementType.MOVE_RUN)) && (prev.movementType == EntityMovementType.MOVE_SPRINT)) {movementType=EntityMovementType.MOVE_SPRINT;}if ((entity.getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_GYRO,Mech.LOC_CT) > 1) && !isFirstStep()) {movementType=EntityMovementType.MOVE_ILLEGAL;}if (((stepType == MoveStepType.GET_UP) || (stepType == MoveStepType.CAREFUL_STAND)) && (entity instanceof Mech) && entity.isLocationBad(Mech.LOC_LARM)&& entity.isLocationBad(Mech.LOC_RARM)&& (entity.isLocationBad(Mech.LOC_RLEG) || entity.isLocationBad(Mech.LOC_LLEG))) {movementType=EntityMovementType.MOVE_ILLEGAL;return;}if ((MoveStepType.GET_UP == stepType) && (1 == entity.getRunMP()) && (entity.mpUsed < 1)&& !entity.isStuck()) {movementType=EntityMovementType.MOVE_RUN;}if ((MoveStepType.CAREFUL_STAND == stepType) && (entity.mpUsed > 1)) {movementType=EntityMovementType.MOVE_ILLEGAL;}if (isFirstStep() && ((stepType == MoveStepType.TAKEOFF) || (stepType == MoveStepType.VTAKEOFF))) {movementType=EntityMovementType.MOVE_SAFE_THRUST;} else if ((entity instanceof VTOL) && (movementType == EntityMovementType.MOVE_VTOL_RUN) && ((VTOL)entity).isStabiliserHit(VTOL.LOC_ROTOR)) {movementType=EntityMovementType.MOVE_ILLEGAL;}if ((entity.getMovementMode() == EntityMovementMode.INF_UMU) && !game.getBoard().getHex(curPos).containsTerrain(Terrains.WATER) && (movementType == EntityMovementType.MOVE_RUN)) {movementType=EntityMovementType.MOVE_ILLEGAL;}if (isFirstStep() && (movementType == EntityMovementType.MOVE_ILLEGAL) && (entity.getWalkMP() > 0)&& !entity.isProne()&& !entity.isHullDown()&& !entity.isStuck()&& (stepType == MoveStepType.FORWARDS)) {movementType=EntityMovementType.MOVE_RUN;}if (stepType == MoveStepType.UNLOAD) {if (entity instanceof Aero) {  movementType=EntityMovementType.MOVE_NONE;} else {  if (isFirstStep()) {    if (getMpUsed() <= entity.getRunMP()) {      movementType=EntityMovementType.MOVE_RUN;      if (getMpUsed() <= entity.getWalkMP()) {        movementType=EntityMovementType.MOVE_WALK;      }    }  } else {    movementType=prev.getMovementType(false);  }  if ((getMpUsed() <= entity.getRunMP()) && (entity.isProne() || entity.isHullDown()) && (movementType == EntityMovementType.MOVE_ILLEGAL)) {    movementType=EntityMovementType.MOVE_RUN;    if (getMpUsed() <= entity.getWalkMP()) {      movementType=EntityMovementType.MOVE_WALK;    }  }  Targetable target=getTarget(game);  if (target instanceof Entity) {    Entity other=(Entity)target;    if ((null != Compute.stackingViolation(game,other,curPos,entity)) || other.isLocationProhibited(curPos,getElevation())) {      movementType=EntityMovementType.MOVE_ILLEGAL;    }  } else {    movementType=EntityMovementType.MOVE_ILLEGAL;  }}}if (stepType == MoveStepType.SHAKE_OFF_SWARMERS) {if ((getMp() == 0) || !(entity instanceof Tank)) {  movementType=EntityMovementType.MOVE_ILLEGAL;} else {  if (entity.getMovementMode() == EntityMovementMode.VTOL) {    movementType=EntityMovementType.MOVE_VTOL_RUN;  } else {    movementType=EntityMovementType.MOVE_RUN;  }}}if (isUnjammingRAC && ((movementType == EntityMovementType.MOVE_RUN) || (movementType == EntityMovementType.MOVE_SPRINT) || (movementType == EntityMovementType.MOVE_VTOL_RUN)|| isJumping())) {movementType=EntityMovementType.MOVE_ILLEGAL;}if ((stepType == MoveStepType.GO_PRONE) && (isProne() || !(entity instanceof Mech) || entity.isStuck())) {movementType=EntityMovementType.MOVE_ILLEGAL;}if (stepType == MoveStepType.HULL_DOWN) {if ((isHullDown() || !((entity instanceof Mech) || (entity instanceof Tank)) || entity.isStuck())) {  movementType=EntityMovementType.MOVE_ILLEGAL;}if ((entity instanceof Tank) && !(game.getBoard().getHex(curPos).containsTerrain(Terrains.FORTIFIED))) {  movementType=EntityMovementType.MOVE_ILLEGAL;}if (entity instanceof Mech) {  int gyroHits=entity.getHitCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_GYRO,Mech.LOC_CT);  if (entity.getGyroType() != Mech.GYRO_HEAVY_DUTY) {    gyroHits++;  }  if (gyroHits > 2) {    movementType=EntityMovementType.MOVE_ILLEGAL;  }}}if (((stepType == MoveStepType.CHARGE) || (stepType == MoveStepType.DFA)) && entity.isProne()) {movementType=EntityMovementType.MOVE_ILLEGAL;}if (!isFirstStep() && !curPos.equals(lastPos) && climbMode&& (movementType != EntityMovementType.MOVE_JUMP)&& game.getBoard().getHex(curPos).containsTerrain(Terrains.BRIDGE)&& !game.getBoard().getHex(curPos).containsTerrainExit(Terrains.BRIDGE,curPos.direction(lastPos))) {movementType=EntityMovementType.MOVE_ILLEGAL;}if ((entity instanceof Mech) && ((Mech)entity).isSuperHeavy() && climbMode&& game.getBoard().getHex(curPos).containsTerrain(Terrains.BUILDING)) {movementType=EntityMovementType.MOVE_ILLEGAL;}if ((type == MoveStepType.LAY_MINE) && !entity.canLayMine()) {movementType=EntityMovementType.MOVE_ILLEGAL;return;}if ((type == MoveStepType.LAY_MINE) && entity.canLayMine()) {movementType=prev.movementType;if (entity instanceof BattleArmor && !((prev.movementType == EntityMovementType.MOVE_JUMP) || (prev.movementType == EntityMovementType.MOVE_VTOL_RUN) || (prev.movementType == EntityMovementType.MOVE_VTOL_WALK))) {  movementType=EntityMovementType.MOVE_ILLEGAL;}}if (prev.type == MoveStepType.LAY_MINE && !prev.isFirstStep()) {movementType=EntityMovementType.MOVE_ILLEGAL;return;}if (stepType == MoveStepType.MOUNT) {movementType=EntityMovementType.MOVE_WALK;}if (!isMovementPossible(game,lastPos,prev.getElevation()) || isUnloaded) {movementType=EntityMovementType.MOVE_ILLEGAL;}if (EntityMovementType.MOVE_ILLEGAL == prev.movementType) {movementType=EntityMovementType.MOVE_ILLEGAL;}if (movementType == EntityMovementType.MOVE_ILLEGAL) {return;}int prevEl=prev.getElevation();danger|=Compute.isPilotingSkillNeeded(game,entity.getId(),lastPos,curPos,movementType,isTurning,prevStepOnPavement,prevEl,getElevation(),this);if (stepType == MoveStepType.GET_UP) {danger=true;}pastDanger|=danger;switch (stepType) {case TURN_LEFT:case TURN_RIGHT:setTurning(true);break;case UNLOAD:setUnloaded(true);break;default :setTurning(false);break;}if (stepType == MoveStepType.GO_PRONE) {setProne(true);setHullDown(false);} else if (stepType == MoveStepType.GET_UP) {setProne(false);setHullDown(false);} else if (stepType == MoveStepType.HULL_DOWN) {setProne(false);setHullDown(true);}if (entity.isCarefulStand()) {movementType=EntityMovementType.MOVE_CAREFUL_STAND;}if (game.getPlanetaryConditions().getWindStrength() == PlanetaryConditions.WI_TORNADO_F4) {if (movementType != EntityMovementType.MOVE_WALK) {movementType=EntityMovementType.MOVE_ILLEGAL;return;}}if (entity instanceof Tank && entity.getExternalUnits().size() > 0) {if ((movementType == EntityMovementType.MOVE_JUMP) || (movementType == EntityMovementType.MOVE_VTOL_WALK) || (movementType == EntityMovementType.MOVE_VTOL_RUN)|| ((entity.getMovementMode() == EntityMovementMode.WIGE) && (getElevation() != 0))) {movementType=EntityMovementType.MOVE_ILLEGAL;return;}}}  }
class C{  public Point2D pointAtLength(float length){  int upperIndex=findUpperIndex(length);  if (upperIndex == -1) {    return null;  }  PathSegment upper=(PathSegment)segments.get(upperIndex);  if (upperIndex == 0) {    return new Point2D.Float(upper.getX(),upper.getY());  }  PathSegment lower=(PathSegment)segments.get(upperIndex - 1);  float offset=length - lower.getLength();  double theta=Math.atan2(upper.getY() - lower.getY(),upper.getX() - lower.getX());  float xPoint=(float)(lower.getX() + offset * Math.cos(theta));  float yPoint=(float)(lower.getY() + offset * Math.sin(theta));  return new Point2D.Float(xPoint,yPoint);}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord || is_ValueChanged("C_BP_Group_ID")) {    MBPGroup grp=getBPGroup();    if (grp == null) {      log.saveWarning("Error",Msg.parseTranslation(getCtx(),"@NotFound@:  @C_BP_Group_ID@"));      return false;    }    setBPGroup(grp);  }  return true;}  }
class C{  public void append(Selector item){  if (length == list.length) {    Selector[] tmp=list;    list=new Selector[1 + list.length + list.length / 2];    System.arraycopy(tmp,0,list,0,tmp.length);  }  list[length++]=item;}  }
class C{  public synchronized int hashCode(){  int h=0;  if (count == 0 || loadFactor < 0)   return h;  loadFactor=-loadFactor;  Entry<?,?>[] tab=table;  for (  Entry<?,?> entry : tab) {    while (entry != null) {      h+=entry.hashCode();      entry=entry.next;    }  }  loadFactor=-loadFactor;  return h;}  }
class C{  @Override public void mousePressed(GlobalMouseEvent event){}  }
class C{  public SexMemo(final SequencesReader reader,final ReferencePloidy ploidy) throws IOException {  final Sex[] sexValues=Sex.values();  mReferences=new ReferenceGenome[sexValues.length];  mParMap=new MyFrickenMap[sexValues.length];  mAutosomes=new HashSet<>();  for (  final Sex sex : sexValues) {    final ReferenceGenome referenceGenome=new ReferenceGenome(reader,sex,ploidy);    mReferences[sex.ordinal()]=referenceGenome;    final MyFrickenMap parmap=new MyFrickenMap();    for (    ReferenceSequence rs : referenceGenome.sequences()) {      if (sex == Sex.EITHER && rs.isSpecified() && rs.ploidy() == Ploidy.DIPLOID) {        mAutosomes.add(rs.name());      }      if (rs.hasDuplicates()) {        final String refName=rs.name();        final EffectivePloidyList result=new EffectivePloidyList();        for (        Pair<RegionRestriction,RegionRestriction> dup : rs.duplicates()) {          final RegionRestriction r=dup.getA();          final RegionRestriction s=dup.getB();          if (refName.equals(r.getSequenceName())) {            result.add(new Pair<>(r,Ploidy.DIPLOID));          }          if (refName.equals(s.getSequenceName())) {            result.add(new Pair<>(s,Ploidy.NONE));          }        }        parmap.put(refName,result);      }    }    mParMap[sex.ordinal()]=parmap;  }}  }
class C{  private static byte[] lmResponse(final byte[] hash,final byte[] challenge) throws AuthenticationException {  try {    final byte[] keyBytes=new byte[21];    System.arraycopy(hash,0,keyBytes,0,16);    final Key lowKey=createDESKey(keyBytes,0);    final Key middleKey=createDESKey(keyBytes,7);    final Key highKey=createDESKey(keyBytes,14);    final Cipher des=Cipher.getInstance("DES/ECB/NoPadding");    des.init(Cipher.ENCRYPT_MODE,lowKey);    final byte[] lowResponse=des.doFinal(challenge);    des.init(Cipher.ENCRYPT_MODE,middleKey);    final byte[] middleResponse=des.doFinal(challenge);    des.init(Cipher.ENCRYPT_MODE,highKey);    final byte[] highResponse=des.doFinal(challenge);    final byte[] lmResponse=new byte[24];    System.arraycopy(lowResponse,0,lmResponse,0,8);    System.arraycopy(middleResponse,0,lmResponse,8,8);    System.arraycopy(highResponse,0,lmResponse,16,8);    return lmResponse;  } catch (  Exception e) {    throw new AuthenticationException(e.getMessage(),e);  }}  }
class C{  public Calendar addToCalendar(Calendar cal){  cal.add(Calendar.MILLISECOND,this.milliseconds);  cal.add(Calendar.SECOND,this.seconds);  cal.add(Calendar.MINUTE,this.minutes);  cal.add(Calendar.HOUR,this.hours);  cal.add(Calendar.DAY_OF_MONTH,this.days);  cal.add(Calendar.MONTH,this.months);  cal.add(Calendar.YEAR,this.years);  return cal;}  }
class C{  public void replace(String querySQL,String[] columnNames,Session session,boolean recursive,boolean force){  String oldQuerySQL=this.querySQL;  Column[] oldColumnTemplates=this.columnTemplates;  boolean oldRecursive=this.recursive;  init(querySQL,null,columnTemplates,session,recursive);  DbException e=recompile(session,force,true);  if (e != null) {    init(oldQuerySQL,null,oldColumnTemplates,session,oldRecursive);    recompile(session,true,false);    throw e;  }}  }
class C{  private void customEvictionTest(boolean reverse){  int MAP_SIZE=1000;  int WRITES_PER_TYPE=100 * MAP_SIZE;  int ACCEPTABLE_NON_PREMIUM_RATE=11;  Builder<Integer,CustomerType> builder=TCacheFactory.standardFactory().builder();  builder.setId("customEviction-reverse=" + reverse).setExpectedMapSize(MAP_SIZE);  builder.setEvictionClass(new CustomerClassEvictor());  Cache<Integer,CustomerType> ccache=builder.build();  int autoindex=0;  CustomerType[] ctForward={CustomerType.Guest,CustomerType.Premium};  CustomerType[] ctBackward={CustomerType.Premium,CustomerType.Guest};  CustomerType[] customerTypes=reverse ? ctBackward : ctForward;  for (  CustomerType custType : customerTypes) {    for (int i=0; i < WRITES_PER_TYPE; i++) {      ccache.put(autoindex++,custType);    }  }  try {    Thread.sleep(100);  } catch (  InterruptedException e) {  }  int countNonPremium=0;  for (  Integer key : ccache.keySet()) {    CustomerType customerType=ccache.get(key);    if (customerType != CustomerType.Premium) {      countNonPremium++;    }  }  if (reverse) {    int size=ccache.size();    int allowedNonPremium=size * ACCEPTABLE_NON_PREMIUM_RATE / 100;    assertTrue("Most CustomerType != Premium must be evicted for type 'backward'. countNonPremium=" + countNonPremium + ", allowedNonPremium="+ allowedNonPremium,countNonPremium < allowedNonPremium);  } else {    int allowedNonPremium=0;    assertTrue("All CustomerType != Premium must be evicted for type 'forward'. countNonPremium=" + countNonPremium + ", allowedNonPremium="+ allowedNonPremium,countNonPremium == 0);  }}  }
class C{  public StreamingJsonBuilder(Writer writer,Object content,JsonGenerator generator) throws IOException {  this.writer=writer;  this.generator=generator;  if (content != null) {    writer.write(generator.toJson(content));  }}  }
class C{  public MinRowExpression add(Expression expression){  this.getChildren().add(expression);  return this;}  }
class C{  public InputStream openInputStream(String file) throws IOException {  return Util.getImplementation().openFileInputStream(file);}  }
class C{  private void validateConfig(int expDataCfgs,GridClientConfiguration cfg){  assertEquals(GridClientRandomBalancer.class,cfg.getBalancer().getClass());  assertEquals(10000,cfg.getConnectTimeout());  assertEquals(null,cfg.getSecurityCredentialsProvider());  assertEquals(expDataCfgs,cfg.getDataConfigurations().size());  if (expDataCfgs == 2) {    GridClientDataConfiguration nullCfg=cfg.getDataConfiguration(null);    assertEquals(null,nullCfg.getName());    assertEquals(null,nullCfg.getAffinity());    assertEquals(GridClientRandomBalancer.class,nullCfg.getPinnedBalancer().getClass());    GridClientDataConfiguration partCfg=cfg.getDataConfiguration("partitioned");    assertEquals("partitioned",partCfg.getName());    assertEquals(GridClientPartitionAffinity.class,partCfg.getAffinity().getClass());    assertEquals(GridClientRoundRobinBalancer.class,partCfg.getPinnedBalancer().getClass());  }  assertEquals(DFLT_MAX_CONN_IDLE_TIME,cfg.getMaxConnectionIdleTime());  assertEquals(GridClientProtocol.TCP,cfg.getProtocol());  assertEquals(Arrays.asList("localhost:11211"),new ArrayList<>(cfg.getServers()));  assertEquals(true,cfg.isEnableAttributesCache());  assertEquals(true,cfg.isEnableMetricsCache());  assertEquals(true,cfg.isTcpNoDelay());  assertEquals(null,cfg.getSslContextFactory(),null);  assertEquals(DFLT_TOP_REFRESH_FREQ,cfg.getTopologyRefreshFrequency());}  }
class C{  private HashMap<String,String> readConfig(String configPath) throws Exception {  log.debug("LdapLoginmanagement.readConfig : " + configPath);  File configFile=new File(configPath);  if (!configFile.isFile())   return null;  ConfigReader reader=new ConfigReader();  reader.readConfig(configPath);  return reader.getConfigMap();}  }
class C{  @Override public void onDraw(Canvas c,RecyclerView parent,RecyclerView.State state){  if (this.mOrientation == VERTICAL_LIST) {    drawVertical(c,parent);  } else {    drawHorizontal(c,parent);  }}  }
class C{  public static void main(final String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Verifies the given class.");    System.err.println("Usage: CheckClassAdapter " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[0].endsWith(".class")) {    cr=new ClassReader(new FileInputStream(args[0]));  } else {    cr=new ClassReader(args[0]);  }  verify(cr,false,new PrintWriter(System.err));}  }
class C{  public static long spooky4(final BitVector bv,final long seed){  long h0, h1, h2, h3;  h0=seed;  h1=seed;  h2=ARBITRARY_BITS;  h3=ARBITRARY_BITS;  final int length=(int)bv.length();  int remaining=length;  int pos=0;  while (remaining >= Long.SIZE * 4) {    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h3+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);    h2=Long.rotateLeft(h2,50);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,52);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,30);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,41);    h1+=h2;    h3^=h1;    h2=Long.rotateLeft(h2,54);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,48);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,38);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,37);    h1+=h2;    h3^=h1;    h2=Long.rotateLeft(h2,62);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,34);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,5);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,36);    h1+=h2;    h3^=h1;    h0+=bv.getLong(pos + 2 * Long.SIZE,pos + 3 * Long.SIZE);    h1+=bv.getLong(pos + 3 * Long.SIZE,pos + 4 * Long.SIZE);    remaining-=4 * Long.SIZE;    pos+=4 * Long.SIZE;  }  if (remaining >= Long.SIZE * 2) {    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h3+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);    remaining-=2 * Long.SIZE;    pos+=2 * Long.SIZE;    h2=Long.rotateLeft(h2,50);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,52);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,30);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,41);    h1+=h2;    h3^=h1;    h2=Long.rotateLeft(h2,54);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,48);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,38);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,37);    h1+=h2;    h3^=h1;    h2=Long.rotateLeft(h2,62);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,34);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,5);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,36);    h1+=h2;    h3^=h1;  }  if (remaining > Long.SIZE) {    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h3+=bv.getLong(pos + 1 * Long.SIZE,length);  } else   if (remaining > 0) {    h2+=bv.getLong(pos,length);  } else {    h2+=ARBITRARY_BITS;    h3+=ARBITRARY_BITS;  }  h0+=length;  h3^=h2;  h2=Long.rotateLeft(h2,15);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,52);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,26);  h1+=h0;  h2^=h1;  h1=Long.rotateLeft(h1,51);  h2+=h1;  h3^=h2;  h2=Long.rotateLeft(h2,28);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,9);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,47);  h1+=h0;  h2^=h1;  h1=Long.rotateLeft(h1,54);  h2+=h1;  h3^=h2;  h2=Long.rotateLeft(h2,32);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,25);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,63);  h1+=h0;  return h0;}  }
class C{  public static DirectedAcyclicGraph<Action,DefaultEdge> buildWorkflowGraph(Workflow workflow,Config config,String outputDir,boolean generateGraphviz,String graphvizFormat) throws WorkflowGraphException {  forkCount=0;  Map<String,Action> actionsByName=new HashMap<>();  List<Action> workflowActions=workflow.getActions();  for (  Action a : workflowActions) {    actionsByName.put(a.getName(),a);  }  DirectedAcyclicGraph<Action,DefaultEdge> inputGraph=new DirectedAcyclicGraph<>(DefaultEdge.class);  for (  Action a : workflowActions) {    inputGraph.addVertex(a);  }  for (  Action a : workflowActions) {    if (a.getDependencies() != null) {      for (      String d : a.getDependencies()) {        Action source=actionsByName.get(d);        if (source == null) {          throw new WorkflowGraphException("Missing action for dependency " + d);        }        try {          inputGraph.addDagEdge(source,a);        } catch (        DirectedAcyclicGraph.CycleFoundException e) {          throw new WorkflowGraphException("Cycle found while building original graph",e);        }      }    }  }  if (generateGraphviz) {    GraphvizGenerator.generateGraphviz(inputGraph,outputDir + "/" + workflow.getName()+ "-input.dot",graphvizFormat);  }  DirectedAcyclicGraph<Action,DefaultEdge> workflowGraph;  Action startTransitionNode;  Action endTransitionNode;  try {    Triple<DirectedAcyclicGraph<Action,DefaultEdge>,Action,Action> workflowGraphTriple=processSubcomponents(inputGraph);    workflowGraph=workflowGraphTriple.getLeft();    startTransitionNode=workflowGraphTriple.getMiddle();    endTransitionNode=workflowGraphTriple.getRight();    Action start=new Action();    start.setName("start");    start.setType("start");    workflowGraph.addVertex(start);    workflowGraph.addDagEdge(start,startTransitionNode);    Action end=new Action();    end.setName("end");    end.setType("end");    workflowGraph.addVertex(end);    if (workflow.getErrorHandler() != null) {      workflowGraph.addVertex(workflow.getErrorHandler());      workflowGraph.addDagEdge(workflow.getErrorHandler(),end);      workflowGraph.addDagEdge(endTransitionNode,workflow.getErrorHandler());    } else {      workflowGraph.addDagEdge(endTransitionNode,end);    }    if (config.getKillMessage() != null && config.getKillName() != null) {      Action kill=new Action();      kill.setType("kill");      kill.setName(config.getKillName());      kill.setProperty("message",NamedArgumentInterpolator.interpolate(config.getKillMessage(),ImmutableMap.of("name",workflow.getName()),null));      workflowGraph.addVertex(kill);    }  } catch (  DirectedAcyclicGraph.CycleFoundException e) {    throw new WorkflowGraphException("Cycle found while generating workflow",e);  }  return workflowGraph;}  }
class C{  public void onWatched(ChunkDataBase chunkStorage,EntityPlayerMP player){  this.watchers.add(player);}  }
class C{  public Object resolveRemote(String type,String url) throws IOException {  HessianRemoteResolver resolver=getRemoteResolver();  if (resolver != null)   return resolver.lookup(type,url); else   return new HessianRemote(type,url);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.INTERFACE_DEFINITION___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.INTERFACE_DEFINITION___DEPEND_1:  return depend_1 != null && !depend_1.isEmpty();case UmplePackage.INTERFACE_DEFINITION___INTERFACE_BODY_1:return interfaceBody_1 != null && !interfaceBody_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public boolean canImport(JComponent comp,DataFlavor[] flavors){  JTextComponent c=(JTextComponent)comp;  if (!(c.isEditable() && c.isEnabled()))   return false;  return (getImportFlavor(flavors,c) != null);}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public URL toURL() throws MalformedURLException {  if (!absolute) {    throw new IllegalArgumentException("URI is not absolute: " + toString());  }  return new URL(toString());}  }
class C{  public void clear(){  Node<T> node=head.next, next;  size=0;  head.reset();  tail=head;  iterator.currentNode=head;  while (node != null) {    next=node.next;    node.free(pool);    node=next;  }}  }
class C{  public static Object[] replaceKey(final Object[] keyValues,final Object oldKey,final Object newKey){  final Object[] kvs=new Object[keyValues.length];  for (int i=0; i < keyValues.length; i=i + 2) {    if (keyValues[i].equals(oldKey))     kvs[i]=newKey; else     kvs[i]=keyValues[i];    kvs[i + 1]=keyValues[i + 1];  }  return kvs;}  }
class C{  private Assert(){}  }
class C{  @Action(value="/receipts/challan-saveOnCancel") @SkipValidation public String saveOnCancel(){  boolean isInstrumentDeposited=false;  setSourcePage(CollectionConstants.CANCELRECEIPT);  for (  InstrumentHeader instrumentHeader : receiptHeader.getReceiptInstrument())   if (instrumentHeader.getInstrumentType().getType().equals(CollectionConstants.INSTRUMENTTYPE_CASH)) {    if (instrumentHeader.getStatusId().getDescription().equals(CollectionConstants.INSTRUMENT_RECONCILED_STATUS)) {      isInstrumentDeposited=true;      break;    }  } else   if (instrumentHeader.getStatusId().getDescription().equals(CollectionConstants.INSTRUMENT_DEPOSITED_STATUS)) {    isInstrumentDeposited=true;    break;  }  if (isInstrumentDeposited) {    if (collectionsUtil.checkChallanValidity(receiptHeader.getChallan())) {      receiptHeaderService.persist(receiptHeader);      receiptHeader=collectionCommon.createPendingReceiptFromCancelledChallanReceipt(receiptHeader);      LOGGER.info(" Created a receipt in PENDING status in lieu of the cancelled receipt ");      loadReceiptDetails();      setCollectionModesNotAllowed();      return CollectionConstants.CREATERECEIPT;    } else {      collectionCommon.cancelChallanReceipt(receiptHeader,false);      addActionMessage(getText("challan.expired.message","Please note that a new receipt can not be created as the corresponding challan " + receiptHeader.getChallan().getChallanNumber() + " has expired"));    }  } else {    collectionCommon.cancelChallanReceipt(receiptHeader,true);    if (!receiptHeader.getState().getValue().equals(CollectionConstants.WF_STATE_END))     receiptHeaderService.endReceiptWorkFlowOnCancellation(receiptHeader);    if (collectionsUtil.checkChallanValidity(receiptHeader.getChallan())) {      final ReceiptHeader newReceipt=collectionCommon.createPendingReceiptFromCancelledChallanReceipt(receiptHeader);      receiptHeaderService.persist(newReceipt);      LOGGER.info(" Created a receipt in PENDING status in lieu of the cancelled receipt ");    }  }  return SUCCESS;}  }
class C{  public void listenOn(String channel){  this.pcClient.listenOn(channel);}  }
class C{  public ScaleAndIndex index(int index){  return new ScaleAndIndex(scale,index);}  }
class C{  public HttpCookie(String name,String value){  String ntrim=name.trim();  if (!isValidName(ntrim)) {    throw new IllegalArgumentException("Invalid name: " + name);  }  this.name=ntrim;  this.value=value;}  }
class C{  @Override public Map<double[],Double> discretise(int nbBuckets){  return points;}  }
class C{  public static String readURLConnection(URLConnection uc) throws Exception {  StringBuffer buffer=new StringBuffer();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(uc.getInputStream()));    int letter=0;    while ((letter=reader.read()) != -1) {      buffer.append((char)letter);    }    reader.close();  } catch (  Exception e) {    BaseServlet.log(UPS2Servlet.class,"Could not read from URL: " + e.toString());    throw e;  } finally {    if (reader != null) {      reader.close();      reader=null;    }  }  return buffer.toString();}  }
class C{  static public Pair<List<PastCourse>,List<PastCourse>> separateByDistinction(List<PastCourse> pastCourseList){  List<PastCourse> regularList=new ArrayList<>();  List<PastCourse> honorList=new ArrayList<>();  for (  PastCourse c : pastCourseList) {    if (c.isHonor())     honorList.add(c); else     regularList.add(c);  }  return new Pair<>(regularList,honorList);}  }
class C{  public byte[] encode() throws UnsupportedOperationException {  throw new UnsupportedOperationException("ContentDependentAttributes should be encoded " + "through the contend-dependent encode method");}  }
class C{  public ConstantScoreQuery(Query query){  this.query=Objects.requireNonNull(query,"Query must not be null");}  }
class C{  private Geometry unionSafe(Geometry g0,Geometry g1){  if (g0 == null && g1 == null)   return null;  if (g0 == null)   return (Geometry)g1.clone();  if (g1 == null)   return (Geometry)g0.clone();  return unionOptimized(g0,g1);}  }
class C{  public synchronized <T extends EventListener>void remove(Class<T> t,T l){  if (l == null) {    return;  }  if (!t.isInstance(l)) {    throw new IllegalArgumentException("Listener " + l + " is not of type "+ t);  }  int index=-1;  for (int i=listenerList.length - 2; i >= 0; i-=2) {    if ((listenerList[i] == t) && (listenerList[i + 1].equals(l) == true)) {      index=i;      break;    }  }  if (index != -1) {    Object[] tmp=new Object[listenerList.length - 2];    System.arraycopy(listenerList,0,tmp,0,index);    if (index < tmp.length)     System.arraycopy(listenerList,index + 2,tmp,index,tmp.length - index);    listenerList=(tmp.length == 0) ? NULL_ARRAY : tmp;  }}  }
class C{  @SuppressWarnings("UnnecessaryLocalVariable") public boolean intersects(Viewport viewport){  if (viewport == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Viewport","intersects","missingViewport"));  }  Viewport that=viewport;  return this.width > 0 && this.height > 0 && that.width > 0 && that.height > 0 && this.x < (that.x + that.width) && that.x < (this.x + this.width) && this.y < (that.y + that.height) && that.y < (this.y + this.height);}  }
class C{  private boolean isIncluded(final HttpServletRequest request){  String uri=(String)request.getAttribute("javax.servlet.include.request_uri");  boolean includeRequest=!(uri == null);  if (includeRequest && log.isDebugEnabled()) {    log.debug("{} resulted in an include request. This is unusable, because" + "the response will be assembled into the overrall response. Not gzipping.",request.getRequestURL());  }  return includeRequest;}  }
class C{  private void constructLopsCtable() throws HopsException, LopsException {  if (_op != OpOp3.CTABLE)   throw new HopsException("Unexpected operation: " + _op + ", expecting "+ OpOp3.CTABLE);  DataType dt1=getInput().get(0).getDataType();  DataType dt2=getInput().get(1).getDataType();  DataType dt3=getInput().get(2).getDataType();  Ternary.OperationTypes tertiaryOpOrig=Ternary.findCtableOperationByInputDataTypes(dt1,dt2,dt3);  Lop[] inputLops=new Lop[getInput().size()];  for (int i=0; i < getInput().size(); i++) {    inputLops[i]=getInput().get(i).constructLops();  }  ExecType et=optFindExecType();  setRequiresReblock(false);  if (et == ExecType.CP || et == ExecType.SPARK) {    Ternary.OperationTypes tertiaryOp=isSequenceRewriteApplicable(true) ? Ternary.OperationTypes.CTABLE_EXPAND_SCALAR_WEIGHT : tertiaryOpOrig;    boolean ignoreZeros=false;    if (isMatrixIgnoreZeroRewriteApplicable()) {      ignoreZeros=true;      inputLops[0]=((ParameterizedBuiltinOp)getInput().get(0)).getTargetHop().getInput().get(0).constructLops();      inputLops[1]=((ParameterizedBuiltinOp)getInput().get(1)).getTargetHop().getInput().get(0).constructLops();    }    Ternary tertiary=new Ternary(inputLops,tertiaryOp,getDataType(),getValueType(),ignoreZeros,et);    tertiary.getOutputParameters().setDimensions(_dim1,_dim2,getRowsInBlock(),getColsInBlock(),-1);    tertiary.setAllPositions(this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());    if (et == ExecType.SPARK) {      tertiary.getOutputParameters().setDimensions(_dim1,_dim2,-1,-1,-1);      setRequiresReblock(true);    } else     tertiary.getOutputParameters().setDimensions(_dim1,_dim2,getRowsInBlock(),getColsInBlock(),-1);    setLops(tertiary);  } else {    Ternary.OperationTypes tertiaryOp=isSequenceRewriteApplicable() ? Ternary.OperationTypes.CTABLE_EXPAND_SCALAR_WEIGHT : tertiaryOpOrig;    Group group1=null, group2=null, group3=null, group4=null;    group1=new Group(inputLops[0],Group.OperationTypes.Sort,getDataType(),getValueType());    group1.getOutputParameters().setDimensions(getDim1(),getDim2(),getRowsInBlock(),getColsInBlock(),getNnz());    group1.setAllPositions(this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());    Ternary tertiary=null;switch (tertiaryOp) {case CTABLE_TRANSFORM:      group2=new Group(inputLops[1],Group.OperationTypes.Sort,getDataType(),getValueType());    group2.getOutputParameters().setDimensions(getDim1(),getDim2(),getRowsInBlock(),getColsInBlock(),getNnz());  group2.setAllPositions(this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());group3=new Group(inputLops[2],Group.OperationTypes.Sort,getDataType(),getValueType());group3.getOutputParameters().setDimensions(getDim1(),getDim2(),getRowsInBlock(),getColsInBlock(),getNnz());group3.setAllPositions(this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());if (inputLops.length == 3) tertiary=new Ternary(new Lop[]{group1,group2,group3},tertiaryOp,getDataType(),getValueType(),et); else tertiary=new Ternary(new Lop[]{group1,group2,group3,inputLops[3],inputLops[4]},tertiaryOp,getDataType(),getValueType(),et);break;case CTABLE_TRANSFORM_SCALAR_WEIGHT:group2=new Group(inputLops[1],Group.OperationTypes.Sort,getDataType(),getValueType());group2.getOutputParameters().setDimensions(getDim1(),getDim2(),getRowsInBlock(),getColsInBlock(),getNnz());group2.setAllPositions(this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());if (inputLops.length == 3) tertiary=new Ternary(new Lop[]{group1,group2,inputLops[2]},tertiaryOp,getDataType(),getValueType(),et); else tertiary=new Ternary(new Lop[]{group1,group2,inputLops[2],inputLops[3],inputLops[4]},tertiaryOp,getDataType(),getValueType(),et);break;case CTABLE_EXPAND_SCALAR_WEIGHT:int left=isSequenceRewriteApplicable(true) ? 1 : 0;Group group=new Group(getInput().get(left).constructLops(),Group.OperationTypes.Sort,getDataType(),getValueType());group.getOutputParameters().setDimensions(getDim1(),getDim2(),getRowsInBlock(),getColsInBlock(),getNnz());if (inputLops.length == 3) tertiary=new Ternary(new Lop[]{group,getInput().get(2).constructLops(),new LiteralOp(left).constructLops()},tertiaryOp,getDataType(),getValueType(),et); else tertiary=new Ternary(new Lop[]{group,getInput().get(2).constructLops(),new LiteralOp(left).constructLops(),inputLops[3],inputLops[4]},tertiaryOp,getDataType(),getValueType(),et);break;case CTABLE_TRANSFORM_HISTOGRAM:if (inputLops.length == 3) tertiary=new Ternary(new Lop[]{group1,getInput().get(1).constructLops(),getInput().get(2).constructLops()},tertiaryOp,getDataType(),getValueType(),et); else tertiary=new Ternary(new Lop[]{group1,getInput().get(1).constructLops(),getInput().get(2).constructLops(),inputLops[3],inputLops[4]},tertiaryOp,getDataType(),getValueType(),et);break;case CTABLE_TRANSFORM_WEIGHTED_HISTOGRAM:group3=new Group(getInput().get(2).constructLops(),Group.OperationTypes.Sort,getDataType(),getValueType());group3.getOutputParameters().setDimensions(getDim1(),getDim2(),getRowsInBlock(),getColsInBlock(),getNnz());group3.setAllPositions(this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());if (inputLops.length == 3) tertiary=new Ternary(new Lop[]{group1,getInput().get(1).constructLops(),group3},tertiaryOp,getDataType(),getValueType(),et); else tertiary=new Ternary(new Lop[]{group1,getInput().get(1).constructLops(),group3,inputLops[3],inputLops[4]},tertiaryOp,getDataType(),getValueType(),et);break;default :throw new HopsException("Invalid ternary operator type: " + _op);}tertiary.getOutputParameters().setDimensions(_dim1,_dim2,(_dimInputsPresent ? getRowsInBlock() : -1),(_dimInputsPresent ? getColsInBlock() : -1),-1);setLineNumbers(tertiary);Lop lctable=tertiary;if (!(_disjointInputs || tertiaryOp == Ternary.OperationTypes.CTABLE_EXPAND_SCALAR_WEIGHT)) {group4=new Group(tertiary,Group.OperationTypes.Sort,getDataType(),getValueType());group4.getOutputParameters().setDimensions(_dim1,_dim2,(_dimInputsPresent ? getRowsInBlock() : -1),(_dimInputsPresent ? getColsInBlock() : -1),-1);group4.setAllPositions(this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());Aggregate agg1=new Aggregate(group4,HopsAgg2Lops.get(AggOp.SUM),getDataType(),getValueType(),ExecType.MR);agg1.getOutputParameters().setDimensions(_dim1,_dim2,(_dimInputsPresent ? getRowsInBlock() : -1),(_dimInputsPresent ? getColsInBlock() : -1),-1);agg1.setAllPositions(this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());agg1.setupCorrectionLocation(CorrectionLocationType.NONE);lctable=agg1;}setLops(lctable);if (!dimsKnown() && !_dimInputsPresent) {setRequiresReblock(true);}}}  }
class C{  public static boolean isConfigured(){  return System.getProperty("java.util.logging.config.file") != null;}  }
class C{  @SuppressLint("NewApi") public static void tryAccessibilityAnnounce(View view,CharSequence text){  if (isJellybeanOrLater() && view != null && text != null) {    view.announceForAccessibility(text);  }}  }
class C{  public boolean equals(Object obj2){  if (null == obj2)   return false;  if (obj2 instanceof XNumber)   return obj2.equals(this); else   if (obj2 instanceof XNodeSet)   return obj2.equals(this); else   if (obj2 instanceof XStringForFSB)   return equals((XMLString)obj2); else   return equals(obj2.toString());}  }
class C{  public void clearStatus(){  Iterator<Timer> i=m_timers.values().iterator();  while (i.hasNext()) {    i.next().stop();  }  m_timers.clear();  m_tableIndexes.clear();  while (m_tableModel.getRowCount() > 0) {    m_tableModel.removeRow(0);  }}  }
class C{  private void animateFollowSanta(LatLng futurePosition){  if (futurePosition == null) {    return;  }  mCameraUpdate=CameraUpdateFactory.newLatLng(futurePosition);  executeRunnable(mThreadAnimate);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int sendMessageAsync(Message message){  if (mParticipant instanceof Contact) {    OtrChatManager cm=OtrChatManager.getInstance();    SessionID sId=cm.getSessionId(message.getFrom().getAddress(),mParticipant.getAddress().getAddress());    SessionStatus otrStatus=cm.getSessionStatus(sId);    message.setTo(new XmppAddress(sId.getRemoteUserId()));    message.setType(Imps.MessageType.OUTGOING);    boolean isOffline=!((Contact)mParticipant).getPresence().isOnline();    if (isOffline || otrStatus != SessionStatus.ENCRYPTED) {      if (OtrChatManager.getInstance().canDoKnockPushMessage(sId)) {        if (!mPushSent) {          OtrChatManager.getInstance().sendKnockPushMessage(sId);          mPushSent=true;        }        message.setType(Imps.MessageType.POSTPONED);        return message.getType();      }    }    mPushSent=false;    if (otrStatus == SessionStatus.ENCRYPTED) {      if (!OtrChatManager.getInstance().canDoKnockPushMessage(sId)) {        cm.maybeBeginPushWhitelistTokenExchange(sId);      }      boolean verified=cm.getKeyManager().isVerified(sId);      if (verified) {        message.setType(Imps.MessageType.OUTGOING_ENCRYPTED_VERIFIED);      } else {        message.setType(Imps.MessageType.OUTGOING_ENCRYPTED);      }    } else     if (otrStatus == SessionStatus.FINISHED) {      message.setType(Imps.MessageType.POSTPONED);      return message.getType();    }    boolean canSend=cm.transformSending(message);    if (canSend) {      mManager.sendMessageAsync(this,message);    } else {      message.setType(Imps.MessageType.POSTPONED);      return message.getType();    }  } else   if (mParticipant instanceof ChatGroup) {    message.setTo(mParticipant.getAddress());    message.setType(Imps.MessageType.OUTGOING);    mManager.sendMessageAsync(this,message);  }  return message.getType();}  }
class C{  private void releaseWaiters(int phase){  QNode q;  Thread t;  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  while ((q=head.get()) != null && q.phase != (int)(root.state >>> PHASE_SHIFT)) {    if (head.compareAndSet(q,q.next) && (t=q.thread) != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  public ClusteringContentEvent(long index,Instance instance){  this.instance=instance;  this.setKey(Long.toString(index));}  }
class C{  public CVCertificate(ASN1InputStream aIS) throws IOException {  initFrom(aIS);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:36.457 -0500",hash_original_method="5FD28FD097FA7AFD0A367EAC6C59D766",hash_generated_method="D479575CB2424DCD39BA62A902BB6AA3") public static Date parseDate(final String dateValue,String[] dateFormats) throws DateParseException {  return parseDate(dateValue,dateFormats,null);}  }
class C{  public ClusterException(String message){  super(message);}  }
class C{  public static <A>SetTValue<A> of(final AnyMValue<? extends Set<A>> monads){  return new SetTValue<>(monads);}  }
class C{  public static boolean restartSpringboard(String message){  int inputData=-1;  BufferedReader keyboardInput=null;  Process p=null;  boolean ret=false;  try {    String[] cmd={"ssh","-p","2222","root@localhost","launchctl","stop","com.apple.SpringBoard"};    p=Runtime.getRuntime().exec(cmd);    p.waitFor();    System.out.println(message);    keyboardInput=new BufferedReader(new InputStreamReader(System.in));    inputData=keyboardInput.read();    System.out.println("got it, thanks");    ret=true;  } catch (  Exception e) {    e.printStackTrace();    ret=false;  }  return ret;}  }
class C{  public static boolean defDoublesAsUse(Operand d,Instruction s){  for (Enumeration<Operand> u=s.getUses(); u.hasMoreElements(); ) {    Operand use=u.nextElement();    if (use != null) {      if (use.similar(d))       return true;    }  }  return false;}  }
class C{  private void accesBreakpointInstruction(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){  for (int i=0; i < instructions.size(); i++) {    Instruction currInst=instructions.get(i);    if (op == 0) {      if (currInst instanceof MRJobInstruction) {        MRJobInstruction currMRInst=(MRJobInstruction)currInst;        if (currMRInst.findMRInstructions(lineNumber)) {          BreakPointInstruction breakpoint=new BreakPointInstruction();          breakpoint.setLocation(currInst);          breakpoint.setInstID(instID++);          breakpoint.setBPInstructionLocation(location);          instructions.add(i,breakpoint);          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);          return;        }      } else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {        if (currInst.getLineNum() == lineNumber) {          BreakPointInstruction breakpoint=new BreakPointInstruction();          breakpoint.setLocation(currInst);          breakpoint.setInstID(instID++);          breakpoint.setBPInstructionLocation(location);          instructions.add(i,breakpoint);          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);          return;        }      } else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);        breakpoint.setBPInstructionLocation(location);        instructions.set(i,breakpoint);        DMLBreakpointManager.updateBreakpoint(lineNumber,status);        return;      }    } else {      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {        if (op == 1) {          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;          breakpoint.setLocation(currInst);          breakpoint.setInstID(currInst.getInstID());          breakpoint.setBPInstructionStatus(status);          breakpoint.setBPInstructionLocation(location);          instructions.set(i,breakpoint);          DMLBreakpointManager.updateBreakpoint(lineNumber,status);        } else {          instructions.remove(i);          DMLBreakpointManager.removeBreakpoint(lineNumber,status);        }        return;      }    }  }}  }
class C{  public static InputStream open(final Context context,final String assetFilePath){  try {    return context.getAssets().open(assetFilePath);  } catch (  IOException e) {    return null;  }}  }
class C{  public void testCompareToDiffSigns1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(1,aNumber.compareTo(bNumber));}  }
class C{  public Value createBlob(InputStream x,long length){  if (x == null) {    return ValueNull.INSTANCE;  }  if (length <= 0) {    length=-1;  }  Value v=ValueLobDb.createTempBlob(x,length);  session.addTemporaryLob(v);  return v;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (builtInFacetKey: ");  result.append(builtInFacetKey);  result.append(')');  return result.toString();}  }
class C{  public AggregationPopulationPlotter(ExampleSet originalExampleSet,Attribute[] allAttributes,FeatureGenerator generator){  this.originalExampleSet=originalExampleSet;  this.allAttributes=allAttributes;  this.generator=generator;}  }
class C{  @Override public void processFinished() throws OperatorException {  super.processFinished();  Iterator i=getListenerListCopy().iterator();  while (i.hasNext()) {    ((ProcessListener)i.next()).processEnded(this.process);  }}  }
class C{  public void testEmptySet(){  assertEquals(0,CharArraySet.EMPTY_SET.size());  assertTrue(CharArraySet.EMPTY_SET.isEmpty());  for (  String stopword : TEST_STOP_WORDS) {    assertFalse(CharArraySet.EMPTY_SET.contains(stopword));  }  assertFalse(CharArraySet.EMPTY_SET.contains("foo"));  assertFalse(CharArraySet.EMPTY_SET.contains((Object)"foo"));  assertFalse(CharArraySet.EMPTY_SET.contains("foo".toCharArray()));  assertFalse(CharArraySet.EMPTY_SET.contains("foo".toCharArray(),0,3));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public VecWithNorm(Vec base,double norm){  this.base=base;  this.normSqrd=norm * norm;}  }
class C{  static int applyMaskPenaltyRule4(ByteMatrix matrix){  int numDarkCells=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    byte[] arrayY=array[y];    for (int x=0; x < width; x++) {      if (arrayY[x] == 1) {        numDarkCells++;      }    }  }  int numTotalCells=matrix.getHeight() * matrix.getWidth();  int fivePercentVariances=Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells;  return fivePercentVariances * N4;}  }
class C{  public boolean uninstallActiveVersion(){  File file=findFile(selectedVersion);  if (file != null && file.exists()) {    file.delete();  }  installedVersions.remove(selectedVersion);  selectedVersion=null;  active=false;  if (installedVersions.isEmpty()) {    MANAGED_EXTENSIONS.remove(this.getPackageId());  }  saveConfiguration();  return true;}  }
class C{  public Map<String,String> retrievePop(String user) throws IllegalArgumentException, IOException, ServiceException {  if (isBlankOrNullString(user)) {    throw new IllegalArgumentException();  }  logger.log(Level.INFO,"Getting POP settings for user " + user + " ...");  GenericEntry popEntry=retrieveSettingsEntry(user,Constants.POP);  if (popEntry != null) {    Map<String,String> pop=new HashMap<String,String>();    pop.put(Constants.ENABLE,popEntry.getProperty(Constants.ENABLE));    pop.put(Constants.ACTION,popEntry.getProperty(Constants.ACTION));    return pop;  }  return null;}  }
class C{  public Map<ICloud.MBSFile,Outcome> write(ByteString signature,IOFunction<OutputStream,Long> writer) throws IOException, InterruptedException {  logger.trace("<< write() < signature: {}",Bytes.hex(signature));  lock.lockInterruptibly();  try {    Map<ICloud.MBSFile,Outcome> outcomes=new HashMap<>();    Set<ICloud.MBSFile> files=signatureToFileSet.remove(signature);    if (files == null) {      logger.warn("-- write() > unreferenced signature: {}",Bytes.hex(signature));    } else {      for (      ICloud.MBSFile file : files) {        outcomes.put(file,cloudWriter.write(file,writer));        outBytes.addAndGet(file.getSize());      }      logger.debug("-- write() > out: {} failed: {} total: {}",outBytes,failedBytes,totalBytes);    }    logger.trace(">> write()");    return outcomes;  }  finally {    lock.unlock();  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public double maxDist(SpatialComparable mbr1,SpatialComparable mbr2){  final int dim1=mbr1.getDimensionality(), dim2=mbr2.getDimensionality();  final int mindim=(dim1 < dim2) ? dim1 : dim2;  double agg=0.;  for (int d=0; d < mindim; d++) {    double d1=mbr1.getMax(d) - mbr2.getMin(d);    double d2=mbr2.getMax(d) - mbr1.getMin(d);    double delta=d1 > d2 ? d1 : d2;    agg+=delta * delta;  }  for (int d=mindim; d < dim1; d++) {    double d1=Math.abs(mbr1.getMin(d)), d2=Math.abs(mbr1.getMax(d));    double delta=d1 > d2 ? d1 : d2;    agg+=delta * delta;  }  for (int d=mindim; d < dim2; d++) {    double d1=Math.abs(mbr2.getMin(d)), d2=Math.abs(mbr2.getMax(d));    double delta=d1 > d2 ? d1 : d2;    agg+=delta * delta;  }  return Math.sqrt(agg);}  }
class C{  public IDialogSettings removeSection(String sectionName){  return sections.remove(sectionName);}  }
class C{  @NotNull public PsiQuery parents(@NotNull final Class<? extends PsiElement> clazz){  final List<PsiElement> result=new ArrayList<PsiElement>();  for (  final PsiElement element : myPsiElements) {    final PsiElement parent=PsiTreeUtil.getParentOfType(element,clazz);    if (parent != null) {      result.add(parent);    }  }  return new PsiQuery(result);}  }
class C{  private final void prevToken(){  if (m_queueMark > 0) {    m_queueMark--;    m_token=(String)m_ops.m_tokenQueue.elementAt(m_queueMark);    m_tokenChar=m_token.charAt(0);  } else {    m_token=null;    m_tokenChar=0;  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case goto_abstract:    return stateVector[0] == State.goto_abstract;case goto_boolean:  return stateVector[0] == State.goto_boolean;case goto_void:return stateVector[0].ordinal() >= State.goto_void.ordinal() && stateVector[0].ordinal() <= State.goto_void_volatile_state.ordinal();case goto_void_volatile_transient:return stateVector[0].ordinal() >= State.goto_void_volatile_transient.ordinal() && stateVector[0].ordinal() <= State.goto_void_volatile_transient_throw_false.ordinal();case goto_void_volatile_transient_throw_false:return stateVector[0] == State.goto_void_volatile_transient_throw_false;case goto_void_volatile_state:return stateVector[0] == State.goto_void_volatile_state;default :return false;}}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public void addEntry(Label start,Label end,Label handler,CP cat){  addEntry(new CatchEntry(start,end,handler,cat));}  }
class C{  public AppletAudioClip(URL url){  this.url=url;  try {    InputStream in=url.openStream();    createAppletAudioClip(in);  } catch (  IOException e) {    if (DEBUG) {      System.err.println("IOException creating AppletAudioClip" + e);    }  }}  }
class C{  private static int appendCaptureTypeSignature(char[] string,int start,boolean fullyQualifyTypeNames,StringBuffer buffer){  if (start >= string.length - 1) {    throw new IllegalArgumentException();  }  char c=string[start];  if (c != C_CAPTURE) {    throw new IllegalArgumentException();  }  buffer.append(CAPTURE).append(' ');  return appendTypeArgumentSignature(string,start + 1,fullyQualifyTypeNames,buffer);}  }
class C{  public ConditionalTransferEntropyCalculatorGaussian() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(COND_MI_CALCULATOR_GAUSSIAN);}  }
class C{  public static JsonValue parse(String string){  if (string == null) {    throw new NullPointerException("string is null");  }  try {    return new JsonParser(string).parse();  } catch (  IOException exception) {    throw new RuntimeException(exception);  }}  }
class C{  public ContainsCondition docValues(Boolean docValues){  this.docValues=docValues;  return this;}  }
class C{  protected PacketWriter(XMPPConnection connection){  this.queue=new ArrayBlockingQueue<Packet>(500,true);  this.connection=connection;  init();}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  RemoteOperationResult result;  if (mTargetParentPath.startsWith(mSrcPath)) {    return new RemoteOperationResult(ResultCode.INVALID_COPY_INTO_DESCENDANT);  }  mFile=getStorageManager().getFileByPath(mSrcPath);  if (mFile == null) {    return new RemoteOperationResult(ResultCode.FILE_NOT_FOUND);  }  String targetPath=mTargetParentPath + mFile.getFileName();  if (mFile.isFolder()) {    targetPath+=OCFile.PATH_SEPARATOR;  }  CopyRemoteFileOperation operation=new CopyRemoteFileOperation(mSrcPath,targetPath,false);  result=operation.execute(client);  if (result.isSuccess()) {    getStorageManager().copyLocalFile(mFile,targetPath);  }  return result;}  }
class C{  protected boolean hasOutstandingChanges(){  return (fDocumentNo.hasChanged() || fDescription.hasChanged() || fPOReference.hasChanged()|| fIsSOTrx.hasChanged()|| fBPartner_ID.hasChanged()|| fShipper_ID.hasChanged()|| fDateFrom.hasChanged()|| fDateTo.hasChanged());}  }
class C{  public String customPropsFileTipText(){  return "The custom properties that the user can use to override the default ones.";}  }
class C{  public static boolean moveFile(Context context,@NonNull final File source,@NonNull final File targetDir){  File target=new File(targetDir,source.getName());  boolean success=source.renameTo(target);  if (!success) {    success=copyFile(context,source,targetDir);    if (success) {      success=deleteFile(context,source);    }  }  return success;}  }
class C{  private void addBlockBasedOnMinMaxValue(FilterExecuter filterExecuter,List<DataRefNode> listOfDataBlocksToScan,DataRefNode dataRefNode,SegmentProperties segmentProperties){  BitSet bitSet=filterExecuter.isScanRequired(dataRefNode.getColumnsMaxValue(),dataRefNode.getColumnsMinValue());  if (!bitSet.isEmpty()) {    listOfDataBlocksToScan.add(dataRefNode);  }}  }
class C{  public static DateBuilder newDateInLocale(Locale lc){  return new DateBuilder(lc);}  }
class C{  public final void pushPair(Node v1,Node v2){  if (null == m_map) {    m_map=new Node[m_blocksize];    m_mapSize=m_blocksize;  } else {    if ((m_firstFree + 2) >= m_mapSize) {      m_mapSize+=m_blocksize;      Node newMap[]=new Node[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree);      m_map=newMap;    }  }  m_map[m_firstFree]=v1;  m_map[m_firstFree + 1]=v2;  m_firstFree+=2;}  }
class C{  @SuppressWarnings("rawtypes") public static Map<String,String> parseKeyAndValueToMap(JSONObject sourceObj){  if (sourceObj == null) {    return null;  }  Map<String,String> keyAndValueMap=new HashMap<String,String>();  for (Iterator iter=sourceObj.keys(); iter.hasNext(); ) {    String key=(String)iter.next();    keyAndValueMap.put(key,getString(sourceObj,key,""));  }  return keyAndValueMap;}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  super.dynInit();  window.setTitle(getTitle());  sameWarehouseCb.setSelected(true);  sameWarehouseCb.addActionListener(this);  MLocatorLookup locator=new MLocatorLookup(Env.getCtx(),p_WindowNo);  locatorField=new WLocatorEditor("M_Locator_ID",true,false,true,locator,p_WindowNo);  initBPartner(false);  bPartnerField.addValueChangeListener(this);  locatorLabel.setMandatory(true);  upcField=new WStringEditor("UPC",false,false,true,10,30,null,null);  upcField.getComponent().addEventListener(Events.ON_CHANGE,this);  return true;}  }
class C{  public static void putLong(byte[] arr,long off,long val){  if (UNALIGNED)   UNSAFE.putLong(arr,off,val); else   putLongByByte(arr,off,val,BIG_ENDIAN);}  }
class C{  public void deleteInvalidFlows(IOFSwitch sw,Map<OFPort,List<Match>> invalidOutportAndMatch){  log.debug("Deleting invalid flows on switch : " + sw.getId());  Map<OFPort,List<Match>> invalidNeighborIngressAndMatches=new HashMap<OFPort,List<Match>>();  for (  OFPort outPort : invalidOutportAndMatch.keySet()) {    List<OFFlowStatsReply> flows=getFlows(sw,outPort);    for (    OFFlowStatsReply flow : flows) {      for (      OFFlowStatsEntry entry : flow.getEntries()) {        for (        Match match : invalidOutportAndMatch.get(outPort)) {          if (entry.getMatch().get(MatchField.ETH_DST).equals(match.get(MatchField.ETH_DST)) && entry.getMatch().get(MatchField.ETH_SRC).equals(match.get(MatchField.ETH_SRC)) && entry.getMatch().get(MatchField.ETH_TYPE).equals(match.get(MatchField.ETH_TYPE))&& entry.getMatch().get(MatchField.VLAN_VID).equals(match.get(MatchField.VLAN_VID))&& entry.getMatch().get(MatchField.IPV4_DST).equals(match.get(MatchField.IPV4_DST))&& entry.getMatch().get(MatchField.IP_PROTO).equals(match.get(MatchField.IP_PROTO))&& entry.getMatch().get(MatchField.IPV4_SRC).equals(match.get(MatchField.IPV4_SRC))&& entry.getMatch().get(MatchField.IP_DSCP).equals(match.get(MatchField.IP_DSCP))&& entry.getMatch().get(MatchField.IP_ECN).equals(match.get(MatchField.IP_ECN))) {            if (invalidNeighborIngressAndMatches.containsKey(match.get(MatchField.IN_PORT)))             invalidNeighborIngressAndMatches.get(match.get(MatchField.IN_PORT)).add(match); else {              List<Match> matches=new ArrayList<Match>();              matches.add(match);              invalidNeighborIngressAndMatches.put(match.get(MatchField.IN_PORT),matches);            }            clearFlowMods(sw,entry.getMatch(),outPort);          }        }      }    }    Map<IOFSwitch,Map<OFPort,List<Match>>> neighborSwitches=new HashMap<IOFSwitch,Map<OFPort,List<Match>>>();    for (    Link link : links.keySet()) {      if (link.getDst().equals(sw.getId())) {        for (        Entry<OFPort,List<Match>> ingressPort : invalidNeighborIngressAndMatches.entrySet()) {          if (link.getDstPort().equals(ingressPort.getKey())) {            Map<OFPort,List<Match>> invalidNeighborOutportAndMatch=new HashMap<OFPort,List<Match>>();            invalidNeighborOutportAndMatch.put(link.getSrcPort(),ingressPort.getValue());            neighborSwitches.put(switchService.getSwitch(link.getSrc()),invalidNeighborOutportAndMatch);          }        }      }    }    log.debug("We have " + neighborSwitches.size() + " neighbors to deal with!");    for (    IOFSwitch neighborSwitch : neighborSwitches.keySet()) {      log.debug("NeighborSwitch ID : " + neighborSwitch.getId());      deleteInvalidFlows(neighborSwitch,neighborSwitches.get(neighborSwitch));    }  }}  }
class C{  public SerializerRegistry registerDefault(Class<?> baseType,Class<? extends TypeSerializer> serializer){  return registerDefault(baseType,new DefaultTypeSerializerFactory(serializer));}  }
class C{  public Bundler putString(String key,String value){  bundle.putString(key,value);  return this;}  }
class C{  public synchronized void start() throws RemoteException {  if (!isRunning()) {    if (ssf != null) {      registry=LocateRegistry.createRegistry(port,null,ssf);    } else {      registry=LocateRegistry.createRegistry(port);    }    isRunning=true;  }}  }
class C{  @NoInline @Interruptible public static ITableArray newITableArray(int size){  if (!VM.runningVM) {    return ITableArray.allocate(size);  }  return (ITableArray)newRuntimeTable(size,RVMType.ITableArrayType);}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public static void writeFileWithArray(ArrayList<String[]> array,String fileName,int param){  try {    FileWriter fw=new FileWriter(fileName);    BufferedWriter bw=new BufferedWriter(fw);    try (PrintWriter outputFile=new PrintWriter(bw)){      if (param == 1) {        for (int i=0; i < array.size(); i++) {          for (int j=0; j < array.get(i).length; j++) {            if (j == array.get(i).length - 1) {              outputFile.println(array.get(i)[j]);            } else {              outputFile.print(array.get(i)[j] + " : ");            }          }        }      } else       if (param == 2) {        for (int i=0; i < array.size(); i++) {          for (int j=0; j < array.get(i).length; j++) {            if (!(array.get(i)[j] == null || array.get(i)[j].equals("")))             outputFile.println(array.get(i)[j]);          }          outputFile.println("-------------------");        }      }    }   } catch (  Exception e) {    System.out.println("Error : " + e.toString() + e);  }}  }
class C{  public static Organization updateCustomer(Organization organization,VOOrganization voOrganization) throws ValidationException, ConcurrentModificationException {  validate(voOrganization);  verifyVersionAndKey(organization,voOrganization);  copyAttributes(organization,voOrganization);  return organization;}  }
class C{  public boolean isShortName(){  return isShortName;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isXLevelTechnicallyValid(final String signatureId){  SignatureWrapper signatureWrapper=getSignatureByIdNullSafe(signatureId);  return signatureWrapper.isXLevelTechnicallyValid();}  }
class C{  public boolean contains(Point2D p){  if (!super.contains(p)) {    return false;  }  List list=getTextRuns();  for (int i=0; i < list.size(); i++) {    StrokingTextPainter.TextRun run=(StrokingTextPainter.TextRun)list.get(i);    TextSpanLayout layout=run.getLayout();    float x=(float)p.getX();    float y=(float)p.getY();    TextHit textHit=layout.hitTestChar(x,y);    if (textHit != null && contains(p,layout.getBounds2D())) {      return true;    }  }  return false;}  }
class C{  public void sortInstances(){  if (m_CurrentCol == -1) {    return;  }  ((DataSortedTableModel)m_TableData.getModel()).sortInstances(m_CurrentCol);}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  private NullValue(){}  }
class C{  private TaskList rpVPlexDataMigration(List<Volume> volumes,VirtualPool newVpool,String taskId,List<RPVPlexMigration> validMigrations,VirtualPoolChangeParam vpoolChangeParam) throws InternalException {  TaskList taskList=new TaskList();  if (validMigrations == null || validMigrations.isEmpty()) {    _log.warn(String.format("No RP+VPLEX migrations found"));    return taskList;  }  _log.info(String.format("%s RP+VPLEX migrations found",validMigrations.size()));  List<RPVPlexMigration> sourceVpoolMigrations=new ArrayList<RPVPlexMigration>();  List<RPVPlexMigration> targetVpoolMigrations=new ArrayList<RPVPlexMigration>();  List<RPVPlexMigration> journalVpoolMigrations=new ArrayList<RPVPlexMigration>();  try {    for (    RPVPlexMigration migration : validMigrations) {switch (migration.getType()) {case SOURCE:        sourceVpoolMigrations.add(migration);      break;case TARGET:    targetVpoolMigrations.add(migration);  break;case METADATA:journalVpoolMigrations.add(migration);break;default :break;}}boolean sourceMigrationsExist=(!sourceVpoolMigrations.isEmpty());boolean targetMigrationsExist=(!targetVpoolMigrations.isEmpty());boolean journalMigrationsExist=(!journalVpoolMigrations.isEmpty());if (!sourceMigrationsExist && (targetMigrationsExist || journalMigrationsExist)) {validateSourceVolumesInRGForMigrationRequest(volumes);}_log.info(String.format("%s SOURCE migrations, %s TARGET migrations, %s METADATA migrations",sourceVpoolMigrations.size(),targetVpoolMigrations.size(),journalVpoolMigrations.size()));StringBuffer logMigrations=new StringBuffer();logMigrations.append("\n\nRP+VPLEX Migrations:\n");HashMap<VirtualPool,List<Volume>> allSourceVolumesToMigrate=new HashMap<VirtualPool,List<Volume>>();HashMap<VirtualPool,List<Volume>> allTargetVolumesToMigrate=new HashMap<VirtualPool,List<Volume>>();findSourceAndTargetMigrations(volumes,newVpool,sourceMigrationsExist,allSourceVolumesToMigrate,targetMigrationsExist,allTargetVolumesToMigrate,targetVpoolMigrations,taskList,taskId);Map<Volume,VirtualPool> singleMigrations=new HashMap<Volume,VirtualPool>();rpVPlexGroupedMigrations(allSourceVolumesToMigrate,singleMigrations,Volume.PersonalityTypes.SOURCE.name(),logMigrations,taskList,taskId,vpoolChangeParam);rpVPlexGroupedMigrations(allTargetVolumesToMigrate,singleMigrations,Volume.PersonalityTypes.TARGET.name(),logMigrations,taskList,taskId,vpoolChangeParam);Set<URI> cgURIs=BlockConsistencyGroupUtils.getAllCGsFromVolumes(volumes);rpVPlexJournalMigrations(journalMigrationsExist,journalVpoolMigrations,singleMigrations,cgURIs,logMigrations,taskList,taskId);logMigrations.append("\n");_log.info(logMigrations.toString());List<VolumeDescriptor> migrateVolumeDescriptors=new ArrayList<VolumeDescriptor>();for (Map.Entry<Volume,VirtualPool> entry : singleMigrations.entrySet()) {Volume migrateVolume=entry.getKey();VirtualPool migrateToVpool=entry.getValue();StorageSystem vplexStorageSystem=_dbClient.queryObject(StorageSystem.class,migrateVolume.getStorageController());migrateVolumeDescriptors.addAll(vplexBlockServiceApiImpl.createChangeVirtualPoolDescriptors(vplexStorageSystem,migrateVolume,migrateToVpool,taskId,null,null,null));}if (!sourceMigrationsExist && (targetMigrationsExist || journalMigrationsExist)) {_log.info("No RP+VPLEX Source migrations detected, creating DUMMY_MIGRATE volume descriptors for the Source volumes.");for (Volume volume : volumes) {if (volume.checkPersonality(Volume.PersonalityTypes.SOURCE)) {VolumeDescriptor dummyMigrate=new VolumeDescriptor(VolumeDescriptor.Type.DUMMY_MIGRATE,volume.getStorageController(),volume.getId(),volume.getPool(),null);Map<String,Object> volumeParams=new HashMap<String,Object>();volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,volume.getId());volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,volume.getVirtualPool());dummyMigrate.setParameters(volumeParams);migrateVolumeDescriptors.add(dummyMigrate);}}}if (!migrateVolumeDescriptors.isEmpty()) {BlockOrchestrationController controller=getController(BlockOrchestrationController.class,BlockOrchestrationController.BLOCK_ORCHESTRATION_DEVICE);controller.changeVirtualPool(migrateVolumeDescriptors,taskId);} else {_log.info(String.format("No extra migrations needed."));}} catch (Exception e) {String errorMsg=String.format("Volume VirtualPool change error: %s",e.getMessage());_log.error(errorMsg,e);for (TaskResourceRep volumeTask : taskList.getTaskList()) {volumeTask.setState(Operation.Status.error.name());volumeTask.setMessage(errorMsg);_dbClient.updateTaskOpStatus(Volume.class,volumeTask.getResource().getId(),taskId,new Operation(Operation.Status.error.name(),errorMsg));}throw e;}return taskList;}  }
class C{  public HessianOutput createHessianOutput(OutputStream os){  return new HessianOutput(os);}  }
class C{  public static void main(String[] args){  if (args.length > 0) {    System.out.printf("Lombok %s\n",getFullVersion());  } else {    System.out.println(VERSION);  }}  }
class C{  public SimpleReceipt(String ticketline,DataLogicSales dlSales,DataLogicCustomers dlCustomers,TaxesLogic taxeslogic){  initComponents();  ticketlines=new JTicketLines(ticketline);  this.dlCustomers=dlCustomers;  this.dlSales=dlSales;  this.taxeslogic=taxeslogic;  jPanel2.add(ticketlines,BorderLayout.CENTER);}  }
class C{  public static boolean parseHashIndex(PsiBuilder b,int l){  if (consumeToken(b,LEFT_BRACE)) {    boolean r=convertBracedString(b,l);    if (!r) {      r=PerlParserImpl.expr(b,l,-1);    }    if (!r && b.getTokenType() == RIGHT_BRACE) {      r=true;      b.mark().error("Empty hash index");    }    return r && consumeToken(b,RIGHT_BRACE);  }  return false;}  }
class C{  public void createFieldEditors(){  addField(new BooleanFieldEditor(PreferenceConstants.P_ENABLE_ECLIPSE_LISTENER,"&Enable Eclipse Listener to prevent Jetty leaks when Eclipse crash (Take effect after Eclipse restarted).",getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_DEFAULT_ENABLE_SCANNER,"Default Enable &Scanner when create new run configuration.",getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_AUTO_PORT,"Find a &unused port that between 10000~ 15000 when creating new run configuration.",getFieldEditorParent()));  addField(new ComboFieldEditor(PreferenceConstants.P_DEFAULT_JETTY_VERSION,"Default Jetty &version to use:",getJettyVersions(),getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_LAZY_CLASSPATH_ENTRY_STATUS,"Lazy load classpath entry status of launch configuration(experimental, do not check it if you have no problem about it).",getFieldEditorParent()));}  }
class C{  public ObjectFactory(){}  }
class C{  public ReindexServiceImpl(final TaskExecutor executor,final RemoteBackdoorService remoteBackdoorService,final NodeService nodeService){  super(executor);  this.remoteBackdoorService=remoteBackdoorService;  this.nodeService=nodeService;}  }
class C{  public String toString(){  return "[" + getClass().getSimpleName() + ": item="+ getItem()+ "; order="+ getOrder()+ "]";}  }
class C{  private void attemptAuthentication(boolean getPasswdFromSharedState) throws LoginException {  if (krb5PrincName != null) {    try {      principal=new PrincipalName(krb5PrincName.toString(),PrincipalName.KRB_NT_PRINCIPAL);    } catch (    KrbException e) {      LoginException le=new LoginException(e.getMessage());      le.initCause(e);      throw le;    }  }  try {    if (useTicketCache) {      if (debug)       System.out.println("Acquire TGT from Cache");      cred=Credentials.acquireTGTFromCache(principal,ticketCacheName);      if (cred != null) {        if (!isCurrent(cred)) {          if (renewTGT) {            cred=renewCredentials(cred);          } else {            cred=null;            if (debug)             System.out.println("Credentials are" + " no longer valid");          }        }      }      if (cred != null) {        if (principal == null) {          principal=cred.getClient();        }      }      if (debug) {        System.out.println("Principal is " + principal);        if (cred == null) {          System.out.println("null credentials from Ticket Cache");        }      }    }    if (cred == null) {      if (principal == null) {        promptForName(getPasswdFromSharedState);        principal=new PrincipalName(krb5PrincName.toString(),PrincipalName.KRB_NT_PRINCIPAL);      }      if (useKeyTab) {        if (!unboundServer) {          KerberosPrincipal kp=new KerberosPrincipal(principal.getName());          ktab=(keyTabName == null) ? KeyTab.getInstance(kp) : KeyTab.getInstance(kp,new File(keyTabName));        } else {          ktab=(keyTabName == null) ? KeyTab.getUnboundInstance() : KeyTab.getUnboundInstance(new File(keyTabName));        }        if (isInitiator) {          if (Krb5Util.keysFromJavaxKeyTab(ktab,principal).length == 0) {            ktab=null;            if (debug) {              System.out.println("Key for the principal " + principal + " not available in "+ ((keyTabName == null) ? "default key tab" : keyTabName));            }          }        }      }      KrbAsReqBuilder builder;      if (ktab == null) {        promptForPass(getPasswdFromSharedState);        builder=new KrbAsReqBuilder(principal,password);        if (isInitiator) {          cred=builder.action().getCreds();        }        if (storeKey) {          encKeys=builder.getKeys(isInitiator);        }      } else {        builder=new KrbAsReqBuilder(principal,ktab);        if (isInitiator) {          cred=builder.action().getCreds();        }      }      builder.destroy();      if (debug) {        System.out.println("principal is " + principal);        HexDumpEncoder hd=new HexDumpEncoder();        if (ktab != null) {          System.out.println("Will use keytab");        } else         if (storeKey) {          for (int i=0; i < encKeys.length; i++) {            System.out.println("EncryptionKey: keyType=" + encKeys[i].getEType() + " keyBytes (hex dump)="+ hd.encodeBuffer(encKeys[i].getBytes()));          }        }      }      if (isInitiator && (cred == null)) {        throw new LoginException("TGT Can not be obtained from the KDC ");      }    }  } catch (  KrbException e) {    LoginException le=new LoginException(e.getMessage());    le.initCause(e);    throw le;  }catch (  IOException ioe) {    LoginException ie=new LoginException(ioe.getMessage());    ie.initCause(ioe);    throw ie;  }}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public void addAuditory(int id){  mAuditoryFeedback.add(id);}  }
class C{  protected final List<MailetMatcherDescriptor> buildDescriptors(MavenProject project){  final DefaultDescriptorsExtractor extractor=new DefaultDescriptorsExtractor();  if (project.isExecutionRoot()) {    logProject(project);    for (    MavenProject subproject : reactorProjects) {      logSubproject(subproject);      extractor.extract(subproject,getLog());    }  } else {    logNoSubprojects(project);    extractor.extract(project,getLog());  }  return extractor.descriptors();}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x0809C831,version=150) public int sceHttpEnableRedirect(int templateId){  return 0;}  }
class C{  public static TaskExecution createSampleTaskExecution(long executionId){  Date startTime=new Date();  String taskName=UUID.randomUUID().toString();  String externalExecutionId=UUID.randomUUID().toString();  List<String> args=new ArrayList<>(ARG_SIZE);  for (int i=0; i < ARG_SIZE; i++) {    args.add(UUID.randomUUID().toString());  }  return new TaskExecution(executionId,null,taskName,startTime,null,null,args,null,externalExecutionId);}  }
class C{  public MicroBurlapOutput(){}  }
class C{  @Override public void execute(ExecutionContext ec) throws DMLRuntimeException {  _runID=_idSeq.getNextID();  changeTmpInput(_runID,ec);  changeTmpOutput(_runID);  ArrayList<DataIdentifier> inputParams=null;  try {    inputParams=getInputParams();    for (    DataIdentifier di : inputParams) {      Data d=ec.getVariable(di.getName());      if (d.getDataType() == DataType.MATRIX) {        MatrixObject inputObj=(MatrixObject)d;        inputObj.exportData();      }    }  } catch (  Exception e) {    throw new DMLRuntimeException(this.printBlockErrorLocation() + "Error exporting input variables to HDFS",e);  }  if (block2CellInst != null) {    ArrayList<Instruction> tempInst=new ArrayList<Instruction>();    tempInst.addAll(block2CellInst);    try {      this.executeInstructions(tempInst,ec);    } catch (    Exception e) {      throw new DMLRuntimeException(this.printBlockErrorLocation() + "Error executing " + tempInst.toString(),e);    }  }  for (int i=0; i < _inst.size(); i++) {    try {      if (_inst.get(i) instanceof ExternalFunctionInvocationInstruction)       executeInstruction(ec,(ExternalFunctionInvocationInstruction)_inst.get(i));    } catch (    Exception e) {      throw new DMLRuntimeException(this.printBlockErrorLocation() + "Failed to execute instruction " + _inst.get(i).toString(),e);    }  }  if (cell2BlockInst != null) {    ArrayList<Instruction> tempInst=new ArrayList<Instruction>();    try {      tempInst.clear();      tempInst.addAll(cell2BlockInst);      this.executeInstructions(tempInst,ec);    } catch (    Exception e) {      throw new DMLRuntimeException(this.printBlockErrorLocation() + "Failed to execute instruction " + cell2BlockInst.toString(),e);    }  }  checkOutputParameters(ec.getVariables());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Paragraph clearParagraphOutput(String paragraphId){synchronized (paragraphs) {    for (    Paragraph p : paragraphs) {      if (p.getId().equals(paragraphId)) {        p.setReturn(null,null);        return p;      }    }  }  return null;}  }
class C{  public void inline(Context context) throws CFGBuilderException {  CFG result=context.getResult();  context.checkForRecursion();  Subroutine subroutine=context.getSubroutine();  CFG subCFG=subroutine.getCFG();  while (context.hasMoreWork()) {    BasicBlock subBlock=context.nextItem();    BasicBlock resultBlock=context.getBlock(subBlock);    resultBlock.setInJSRSubroutine(context.getCaller() != null);    BasicBlock.InstructionIterator insIter=subBlock.instructionIterator();    while (insIter.hasNext()) {      InstructionHandle handle=insIter.next();      resultBlock.addInstruction(handle);    }    if (subBlock.isExceptionThrower()) {      resultBlock.setExceptionThrower(subBlock.getExceptionThrower());    }    if (subBlock.isExceptionHandler()) {      resultBlock.setExceptionGen(null,subBlock.getExceptionGen());    }    Iterator<Edge> edgeIter=subCFG.outgoingEdgeIterator(subBlock);    while (edgeIter.hasNext()) {      Edge edge=edgeIter.next();      int edgeType=edge.getType();      if (edgeType == JSR_EDGE) {        InstructionHandle jsrHandle=subBlock.getLastInstruction();        JsrInstruction jsr=(JsrInstruction)jsrHandle.getInstruction();        Subroutine jsrSub=jsrSubroutineMap.get(jsr.getTarget());        Context jsrContext=new Context(context,jsrSub,context.getResult());        BasicBlock resultJSRStartBlock=jsrContext.getBlock(jsrSub.getStartBlock());        result.createEdge(resultBlock,resultJSRStartBlock,GOTO_EDGE);        BasicBlock subJSRSuccessorBlock=subroutine.getBlock(jsrHandle.getNext());        BasicBlock resultJSRSuccessorBlock=context.getBlock(subJSRSuccessorBlock);        jsrContext.mapBlock(jsrSub.getExit(),resultJSRSuccessorBlock);        inline(jsrContext);      } else {        BasicBlock resultTarget=context.getBlock(edge.getTarget());        result.createEdge(resultBlock,resultTarget,edge.getType());      }    }    Iterator<EscapeTarget> escapeTargetIter=subroutine.escapeTargetIterator(subBlock);    while (escapeTargetIter.hasNext()) {      EscapeTarget escapeTarget=escapeTargetIter.next();      InstructionHandle targetInstruction=escapeTarget.getTarget();      Context caller=context.getCaller();      while (caller != null) {        if (caller.getSubroutine().containsInstruction(targetInstruction)) {          break;        }        caller=caller.getCaller();      }      if (caller == null) {        throw new CFGBuilderException("Unknown caller for escape target " + targetInstruction + " referenced by "+ context.getSubroutine().getStartInstruction());      }      BasicBlock subCallerTargetBlock=caller.getSubroutine().getBlock(targetInstruction);      BasicBlock resultCallerTargetBlock=caller.getBlock(subCallerTargetBlock);      result.createEdge(resultBlock,resultCallerTargetBlock,escapeTarget.getEdgeType());    }    if (subroutine.isReturnBlock(subBlock)) {      result.createEdge(resultBlock,result.getExit(),RETURN_EDGE);    }    if (subroutine.isExitBlock(subBlock)) {      result.createEdge(resultBlock,result.getExit(),EXIT_EDGE);    }    if (subroutine.isUnhandledExceptionBlock(subBlock)) {      result.createEdge(resultBlock,result.getExit(),UNHANDLED_EXCEPTION_EDGE);    }  }}  }
class C{  private void basicVerifyStats(boolean recovValues){  String oldValue=System.getProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME);  System.setProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME,"" + recovValues);  try {    diskProps.setDiskDirs(dirs);    diskProps.setPersistBackup(true);    diskProps.setRegionName("basicVerifyStats");    region=DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache,diskProps,Scope.LOCAL);    region.put(new Integer(1),new Integer(1));    region.put(new Integer(1),new Integer(2));    region.close();    region=DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache,diskProps,Scope.LOCAL);    DiskRegion dr=((LocalRegion)region).getDiskRegion();    if (recovValues) {      waitForInVMToBe(dr,1);      assertEquals(0,dr.getNumOverflowOnDisk());    } else {      assertEquals(0,dr.getNumEntriesInVM());      assertEquals(1,dr.getNumOverflowOnDisk());    }    region.clear();    assertEquals(0,dr.getNumEntriesInVM());    assertEquals(0,dr.getNumOverflowOnDisk());    region.put(new Integer(1),new Integer(1));    region.localInvalidate(new Integer(1));    region.close();    region=DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache,diskProps,Scope.LOCAL);    dr=((LocalRegion)region).getDiskRegion();    assertEquals(1,region.size());    assertEquals(0,dr.getNumEntriesInVM());    assertEquals(0,dr.getNumOverflowOnDisk());    region.clear();    assertEquals(0,dr.getNumEntriesInVM());    assertEquals(0,dr.getNumOverflowOnDisk());    region.create(new Integer(1),null);    region.put(new Integer(1),new Integer(2));    region.close();    region=DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache,diskProps,Scope.LOCAL);    dr=((LocalRegion)region).getDiskRegion();    if (recovValues) {      waitForInVMToBe(dr,1);      assertEquals(0,dr.getNumOverflowOnDisk());    } else {      assertEquals(0,dr.getNumEntriesInVM());      assertEquals(1,dr.getNumOverflowOnDisk());    }    region.clear();    assertEquals(0,dr.getNumEntriesInVM());    assertEquals(0,dr.getNumOverflowOnDisk());    region.create(new Integer(1),null);    region.localInvalidate(new Integer(1));    region.close();    region=DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache,diskProps,Scope.LOCAL);    dr=((LocalRegion)region).getDiskRegion();    assertEquals(0,dr.getNumEntriesInVM());    assertEquals(0,dr.getNumOverflowOnDisk());  }  finally {    if (oldValue != null) {      System.setProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME,oldValue);    } else {      System.clearProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME);    }  }}  }
class C{  public static DBID importInteger(int id){  return DBIDFactory.FACTORY.importInteger(id);}  }
class C{  public Builder requestTimeoutMs(long requestTimeoutMs){  this._requestTimeoutMs=requestTimeoutMs;  return this;}  }
class C{  public static boolean isConnected(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();  return networkInfo != null && networkInfo.isConnected();}  }
class C{  public PrintException(){  super();}  }
class C{  private void addErrorMessage(String errorKey,boolean showContinueButton){  addMessage(null,FacesMessage.SEVERITY_ERROR,errorKey);  showError=true;  showButton=showContinueButton;}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public boolean isArray(){  return getRawClass().isArray();}  }
class C{  protected static void deleteNodes(final CConnection connection,final int viewId) throws SQLException {  final String query="DELETE FROM " + CTableNames.NODES_TABLE + " WHERE view_id = "+ viewId;  connection.executeUpdate(query,true);}  }
class C{  private void registerDebugEvents() throws FloodlightModuleException {  if (debugEventService == null) {    debugEventService=new MockDebugEventService();  }  evSwitch=debugEventService.buildEvent(SwitchEvent.class).setModuleName(this.counters.getPrefix()).setEventName("switch-event").setEventDescription("Switch connected, disconnected or port changed").setEventType(EventType.ALWAYS_LOG).setBufferCapacity(100).register();}  }
class C{  public void testDoubleValuePosMaxValue(){  byte[] a={0,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=1;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == Double.MAX_VALUE);}  }
class C{  @Override public double conf(double totalWeight,double delta){  double inverseNormal=inverseNormal(1 - delta / 2);  return 3.0d / (2.0d * Math.sqrt(totalWeight)) * inverseNormal + (totalWeight + Math.sqrt(totalWeight)) / (4.0d * totalWeight * Math.sqrt(totalWeight)) * Math.pow(inverseNormal,2.0d) + Math.pow(inverseNormal,3.0d) / (8.0d * totalWeight * Math.sqrt(totalWeight));}  }
class C{  public ApprovalDialog(Dialog owner){  super(owner);}  }
class C{  public GeometricObject(){  dateCreated=new java.util.Date();}  }
class C{  private void report(String name,int burnin){  double treeLength=0.0;  int count=0;  try {    FileReader fileReader=new FileReader(new File(name));    TreeImporter importer=new NexusImporter(fileReader);    while (importer.hasTree()) {      Tree tree=importer.importNextTree();      if (count >= burnin) {        treeLength+=TreeLength.FACTORY.createStatistic().getSummaryStatistic(tree)[0];      }      count++;    }    treeLength/=(count - burnin);    System.out.println(name + "\t" + burnin+ "\t"+ treeLength);  } catch (  Importer.ImportException e) {    System.err.println("Error Parsing Input Tree: " + e.getMessage());  }catch (  IOException e) {    System.err.println("Error Parsing Input Tree: " + e.getMessage());  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (factors == null) {    throw new NullPointerException();  }  if (parents == null) {    throw new IllegalStateException();  }}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  NDCGRelevanceModel<U,I>.UserNDCGRelevanceModel userRelModel=(NDCGRelevanceModel<U,I>.UserNDCGRelevanceModel)relModel.getModel(recommendation.getUser());  double ndcg=0.0;  int rank=0;  for (  Tuple2od<I> pair : recommendation.getItems()) {    ndcg+=userRelModel.gain(pair.v1) * disc.disc(rank);    rank++;    if (rank >= cutoff) {      break;    }  }  if (ndcg > 0) {    ndcg/=idcg(userRelModel);  }  return ndcg;}  }
class C{  public static String thisthese(final int quantity){  if (quantity == 1) {    return "this";  } else {    return "these";  }}  }
class C{  public static void testVNX2NetAllocAssign(Map<URI,List<Initiator>> net2InitiatorsMapA,Map<URI,List<Initiator>> net2InitiatorsMapB,Map<URI,List<Initiator>> net2InitiatorsMapC,Map<URI,List<Initiator>> net2InitiatorsMapD,int maxPaths,int minPaths,int pathsPerInitiator,int initiatorsPerPort) throws Exception {  Map<URI,Map<URI,List<Initiator>>> hostToNetToInitiatorsMap=new HashMap<URI,Map<URI,List<Initiator>>>();  URI hostA=getHostURI(net2InitiatorsMapA);  hostToNetToInitiatorsMap.put(hostA,net2InitiatorsMapA);  if (net2InitiatorsMapB != null) {    URI hostB=getHostURI(net2InitiatorsMapB);    hostToNetToInitiatorsMap.put(hostB,net2InitiatorsMapB);  }  if (net2InitiatorsMapC != null) {    URI hostC=getHostURI(net2InitiatorsMapC);    hostToNetToInitiatorsMap.put(hostC,net2InitiatorsMapC);  }  if (net2InitiatorsMapD != null) {    URI hostD=getHostURI(net2InitiatorsMapD);    hostToNetToInitiatorsMap.put(hostD,net2InitiatorsMapD);  }  PortAllocationContext net1ctx=createVNXNet1();  PortAllocationContext net2ctx=createVNXNet2();  PortAllocationContext[] contexts=new PortAllocationContext[]{net1ctx,net2ctx};  testAllocationAssignment(contexts,hostToNetToInitiatorsMap,maxPaths,minPaths,pathsPerInitiator,initiatorsPerPort,"vnxblock",null);}  }
class C{  public void removeDebugger(final IDebugger debugger){  debuggers.remove(debugger);  for (  final DebuggerProviderListener listener : m_listeners) {    try {      listener.debuggerRemoved(this,debugger);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public void storeLocal(final int local){  storeInsn(getLocalType(local),local);}  }
class C{  public void flushQuietly(){  try {    flush();  } catch (  IOException e) {  }}  }
class C{  public PoBox(String value){  this();  setValue(value);}  }
class C{  public static void updateType(final Connection connection,final BaseType baseType,final String name,final int size,final boolean isSigned,final INaviModule module) throws CouldntSaveDataException {  try {    final PreparedStatement statement=connection.prepareStatement("UPDATE " + CTableNames.BASE_TYPES_TABLE + " SET name = ?, size = ?, signed = ? WHERE module_id = ? AND id = ?");    try {      statement.setString(1,name);      statement.setInt(2,size);      statement.setBoolean(3,isSigned);      statement.setInt(4,module.getConfiguration().getId());      statement.setInt(5,baseType.getId());      statement.executeUpdate();    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public void paintText(SynthContext ss,Graphics g,String text,Icon icon,int hAlign,int vAlign,int hTextPosition,int vTextPosition,int iconTextGap,int mnemonicIndex,int textOffset){  if ((icon == null) && (text == null)) {    return;  }  Graphics2D g2d=(Graphics2D)g.create();  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  JComponent c=ss.getComponent();  FontMetrics fm=SwingUtilities2.getFontMetrics(c,g2d);  Insets insets=SeaGlassLookAndFeel.getPaintingInsets(ss,paintInsets);  paintViewR.x=insets.left;  paintViewR.y=insets.top;  paintViewR.width=c.getWidth() - (insets.left + insets.right);  paintViewR.height=c.getHeight() - (insets.top + insets.bottom);  paintIconR.x=paintIconR.y=paintIconR.width=paintIconR.height=0;  paintTextR.x=paintTextR.y=paintTextR.width=paintTextR.height=0;  String clippedText=layoutText(ss,fm,text,icon,hAlign,vAlign,hTextPosition,vTextPosition,paintViewR,paintIconR,paintTextR,iconTextGap);  if (icon != null) {    Color color=g2d.getColor();    paintIconR.x+=textOffset;    paintIconR.y+=textOffset;    SeaGlassIcon.paintIcon(icon,ss,g2d,paintIconR.x,paintIconR.y,paintIconR.width,paintIconR.height);    g2d.setColor(color);  }  if (text != null) {    View v=(View)c.getClientProperty(BasicHTML.propertyKey);    if (v != null) {      v.paint(g2d,paintTextR);    } else {      paintTextR.x+=textOffset;      paintTextR.y+=textOffset;      paintText(ss,g2d,clippedText,paintTextR,mnemonicIndex);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.973 -0400",hash_original_method="F892F249392A40C312747AD59BC47A28",hash_generated_method="6E34DDC4D732A9732C387B06C7143C16") public FileAlterationObserver(String directoryName,FileFilter fileFilter){  this(new File(directoryName),fileFilter);}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public Cone(Position centerPosition,double northSouthRadius,double verticalRadius,double eastWestRadius,Angle heading,Angle tilt,Angle roll){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.heading=heading;  this.tilt=tilt;  this.roll=roll;  this.setUpGeometryCache();}  }
class C{  public void testConfigFileFile() throws Exception {  Properties properties=loadProperties("test-configFile-file");  assertEquals("12345",properties.getProperty("cargo.servlet.port"));}  }
class C{  private void updateUploadPrefs(){  SharedPreferences.Editor editor=mSharedPreferences.edit();  int day=getCurrentDay();  int prevCount=mSharedPreferences.getInt(PREF_UPLOAD_COUNT,0);  if (mSharedPreferences.getInt(PREF_LAST_UPLOAD_DAY,0) != day) {    prevCount=0;  }  editor.putInt(PREF_LAST_UPLOAD_DAY,day).putInt(PREF_UPLOAD_COUNT,prevCount + 1).apply();}  }
class C{  public QuotaLineItemEntity add(QuotaLineItemEntity val){  return operate(OpCode.ADD,val);}  }
class C{  public Builder strict(final boolean strict){  this.strict=strict;  return this;}  }
class C{  public void clear(){  count=0;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(GridBagLayoutDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new GridBagLayoutDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public double[] instanceToSchema(Instance inst,MiningSchema miningSchema) throws Exception {  Instances miningSchemaI=miningSchema.getMiningSchemaAsInstances();  double[] result=new double[miningSchema.getFieldsAsInstances().numAttributes()];  for (int i=0; i < miningSchemaI.numAttributes(); i++) {    result[i]=inst.value(m_fieldsMap[i]);    if (miningSchemaI.attribute(i).isNominal() || miningSchemaI.attribute(i).isString()) {      if (!Utils.isMissingValue(inst.value(m_fieldsMap[i]))) {        int[] valueMap=m_nominalValueMaps[i];        int index=valueMap[(int)inst.value(m_fieldsMap[i])];        String incomingAttValue=inst.attribute(m_fieldsMap[i]).value((int)inst.value(m_fieldsMap[i]));        if (index >= 0) {          result[i]=index;        } else {          result[i]=UNKNOWN_NOMINAL_VALUE;          String warningString="[MappingInfo] WARNING: Can't match nominal value " + incomingAttValue;          if (m_log != null) {            m_log.logMessage(warningString);          } else {            System.err.println(warningString);          }        }      }    }  }  miningSchema.applyMissingAndOutlierTreatments(result);  ArrayList<DerivedFieldMetaInfo> derivedFields=miningSchema.getDerivedFields();  for (int i=0; i < derivedFields.size(); i++) {    DerivedFieldMetaInfo temp=derivedFields.get(i);    double r=temp.getDerivedValue(result);    result[i + miningSchemaI.numAttributes()]=r;  }  return result;}  }
class C{  public NbtInputLimitedStream(InputStream in,NbtLimiter limiter){  super(in);  this.limiter=limiter;}  }
class C{  public Parameter createParameter(){  ParameterImpl parameter=new ParameterImpl();  return parameter;}  }
class C{  @Override public int compare(CLIQUESubspace<?> s1,CLIQUESubspace<?> s2){  return -(s1.getCoverage() - s2.getCoverage());}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("action")) {    action=changes.get("action");  }  if (changes.has("text")) {    text=changes.get("text");  }}  }
class C{  public boolean isCreatePOCommitment(){  String s=getCommitmentType();  if (s == null)   return false;  return COMMITMENTTYPE_POCommitmentOnly.equals(s) || COMMITMENTTYPE_POCommitmentReservation.equals(s) || COMMITMENTTYPE_POSOCommitmentReservation.equals(s)|| COMMITMENTTYPE_POSOCommitment.equals(s);}  }
class C{  static void parseAttributeValue(Element element,ElementMetadata<?,?> metadata,AttributeKey<?> attKey,AttributeMetadata<?> attMeta,Object value) throws ParseException {  if (attMeta == null) {    element.setAttributeValue(attKey,value);  } else {    attMeta.parseValue(element,metadata,value);  }}  }
class C{  public byte[] generateSignature(byte[] message){  byte[] otsSig=new byte[mdLength];  byte[] authPathBytes;  byte[] indexBytes;  otsSig=ots.getSignature(message);  authPathBytes=gmssUtil.concatenateArray(currentAuthPaths[numLayer - 1]);  indexBytes=gmssUtil.intToBytesLittleEndian(index[numLayer - 1]);  byte[] gmssSigFirstPart=new byte[indexBytes.length + otsSig.length + authPathBytes.length];  System.arraycopy(indexBytes,0,gmssSigFirstPart,0,indexBytes.length);  System.arraycopy(otsSig,0,gmssSigFirstPart,indexBytes.length,otsSig.length);  System.arraycopy(authPathBytes,0,gmssSigFirstPart,(indexBytes.length + otsSig.length),authPathBytes.length);  byte[] gmssSigNextPart=new byte[0];  for (int i=numLayer - 1 - 1; i >= 0; i--) {    authPathBytes=gmssUtil.concatenateArray(currentAuthPaths[i]);    indexBytes=gmssUtil.intToBytesLittleEndian(index[i]);    byte[] helpGmssSig=new byte[gmssSigNextPart.length];    System.arraycopy(gmssSigNextPart,0,helpGmssSig,0,gmssSigNextPart.length);    gmssSigNextPart=new byte[helpGmssSig.length + indexBytes.length + subtreeRootSig[i].length+ authPathBytes.length];    System.arraycopy(helpGmssSig,0,gmssSigNextPart,0,helpGmssSig.length);    System.arraycopy(indexBytes,0,gmssSigNextPart,helpGmssSig.length,indexBytes.length);    System.arraycopy(subtreeRootSig[i],0,gmssSigNextPart,(helpGmssSig.length + indexBytes.length),subtreeRootSig[i].length);    System.arraycopy(authPathBytes,0,gmssSigNextPart,(helpGmssSig.length + indexBytes.length + subtreeRootSig[i].length),authPathBytes.length);  }  byte[] gmssSig=new byte[gmssSigFirstPart.length + gmssSigNextPart.length];  System.arraycopy(gmssSigFirstPart,0,gmssSig,0,gmssSigFirstPart.length);  System.arraycopy(gmssSigNextPart,0,gmssSig,gmssSigFirstPart.length,gmssSigNextPart.length);  return gmssSig;}  }
class C{  public void addResultSet(MariaSelectResultSet result,boolean moreResultAvailable){  this.result=result;  this.insertId=Statement.SUCCESS_NO_INFO;  this.affectedRows=-1;  this.setMoreResultAvailable(moreResultAvailable);}  }
class C{  protected void reportFatalError(String msg,long lineNo,long columnNo) throws RDFParseException {  RDFParserHelper.reportFatalError(msg,lineNo,columnNo,getParseErrorListener());}  }
class C{  private void nextWindow(Calendar startTime){  if (isDaily()) {    startTime.add(Calendar.DAY_OF_MONTH,1);  } else   if (isWeekly()) {    startTime.add(Calendar.WEEK_OF_MONTH,1);  } else   if (isMonthly()) {    int month=startTime.get(Calendar.MONTH);    adjustDayOfMonth(startTime,month + 1);  }}  }
class C{  public static void write(float lt,float ln,int offset_x1,int offset_y1,int w,int h,byte[] bytes,Color[] colorTable,int trans,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RASTER_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RASTER);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeByte(COLORMODEL_INDEXED);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(offset_x1);  dos.writeInt(offset_y1);  dos.writeInt(w);  dos.writeInt(h);  dos.writeInt(bytes.length);  dos.write(bytes,0,bytes.length);  dos.writeInt(colorTable.length);  int i;  for (i=0; i < colorTable.length; i++) {    dos.writeInt(colorTable[i].getRGB());  }  dos.writeInt(trans);  properties.write(dos);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDC");  final long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset));}  }
class C{  public synchronized void processedFiles(int numberOfFiles,long totalSize){  processedFiles=numberOfFiles;  processedSize=totalSize;}  }
class C{  public DocumentTemplateContext(TemplateContextType type,Document document,Position position){  super(type);  Assert.isNotNull(document);  Assert.isNotNull(position);  Assert.isTrue(position.getOffset() <= document.getLength());  fDocument=document;  fPosition=position;  fOriginalOffset=fPosition.getOffset();  fOriginalLength=fPosition.getLength();}  }
class C{  public boolean equals(Object obj){  return (obj != null && obj instanceof CompositeName && impl.equals(((CompositeName)obj).impl));}  }
class C{  public void handle(ConfigEvent event,Context context) throws IOException {  Regions region=Regions.fromName(System.getenv(AWS_REGION_PROPERTY));  AmazonConfig configClient=new AmazonConfigClient().withRegion(region);  doHandle(event,context,configClient);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private JCas convertSourceDocumentToCas(File aFile,Class aReader,SourceDocument aDocument) throws UIMAException, IOException {  TypeSystemDescription builtInTypes=TypeSystemDescriptionFactory.createTypeSystemDescription();  List<TypeSystemDescription> projectTypes=getProjectTypes(aDocument.getProject());  projectTypes.add(builtInTypes);  TypeSystemDescription allTypes=CasCreationUtils.mergeTypeSystems(projectTypes);  CAS cas=JCasFactory.createJCas(allTypes).getCas();  CollectionReader reader=CollectionReaderFactory.createReader(aReader,ResourceCollectionReaderBase.PARAM_SOURCE_LOCATION,aFile.getParentFile().getAbsolutePath(),ResourceCollectionReaderBase.PARAM_PATTERNS,new String[]{"[+]" + aFile.getName()});  if (!reader.hasNext()) {    throw new FileNotFoundException("Annotation file [" + aFile.getName() + "] not found in ["+ aFile.getPath()+ "]");  }  reader.getNext(cas);  JCas jCas=cas.getJCas();  boolean hasTokens=JCasUtil.exists(jCas,Token.class);  boolean hasSentences=JCasUtil.exists(jCas,Sentence.class);  if (!hasTokens || !hasSentences) {    AnalysisEngine pipeline=createEngine(createEngineDescription(BreakIteratorSegmenter.class,BreakIteratorSegmenter.PARAM_WRITE_TOKEN,!hasTokens,BreakIteratorSegmenter.PARAM_WRITE_SENTENCE,!hasSentences));    pipeline.process(cas.getJCas());  }  try {    casDoctor.repair(aDocument.getProject(),cas);  } catch (  Exception e) {    throw new DataRetrievalFailureException("Error repairing CAS on import for source document [" + aDocument.getName() + "] ("+ aDocument.getId()+ ") in project["+ aDocument.getProject().getName()+ "] ("+ aDocument.getProject().getId()+ ")",e);  }  return jCas;}  }
class C{  @Override public boolean onDragEvent(DragEvent event){  if (event.getClipDescription() != null && event.getClipDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN) && event.getClipDescription().getLabel().equals(WorkspaceView.BLOCK_GROUP_CLIP_DATA_LABEL)) {    return false;  }  return super.onDragEvent(event);}  }
class C{  public NoticeReference(String organization,Vector numbers){  this(organization,convertVector(numbers));}  }
class C{  @Override public <T>Record<T> retrieveRecord(String key,boolean isEncrypted,String encryptKey){  key=safetyKey(key);  File file=new File(cacheDirectory,key);  try {    if (isEncrypted) {      file=fileEncryptor.decrypt(encryptKey,file);    }    Type partialType=jolyglot.newParameterizedType(Record.class,Object.class);    Record tempDiskRecord=jolyglot.fromJson(file,partialType);    Class classData=Class.forName(tempDiskRecord.getDataClassName());    Class classCollectionData=tempDiskRecord.getDataCollectionClassName() == null ? Object.class : Class.forName(tempDiskRecord.getDataCollectionClassName());    boolean isCollection=Collection.class.isAssignableFrom(classCollectionData);    boolean isArray=classCollectionData.isArray();    boolean isMap=Map.class.isAssignableFrom(classCollectionData);    Record<T> diskRecord;    if (isCollection) {      Type typeCollection=jolyglot.newParameterizedType(classCollectionData,classData);      Type typeRecord=jolyglot.newParameterizedType(Record.class,typeCollection);      diskRecord=jolyglot.fromJson(file.getAbsoluteFile(),typeRecord);    } else     if (isArray) {      Type typeRecord=jolyglot.newParameterizedType(Record.class,classCollectionData);      diskRecord=jolyglot.fromJson(file.getAbsoluteFile(),typeRecord);    } else     if (isMap) {      Class classKeyMap=Class.forName(tempDiskRecord.getDataKeyMapClassName());      Type typeMap=jolyglot.newParameterizedType(classCollectionData,classKeyMap,classData);      Type typeRecord=jolyglot.newParameterizedType(Record.class,typeMap);      diskRecord=jolyglot.fromJson(file.getAbsoluteFile(),typeRecord);    } else {      Type type=jolyglot.newParameterizedType(Record.class,classData);      diskRecord=jolyglot.fromJson(file.getAbsoluteFile(),type);    }    diskRecord.setSizeOnMb(file.length() / 1024f / 1024f);    return diskRecord;  } catch (  Exception ignore) {    return null;  } finally {    if (isEncrypted) {      file.delete();    }  }}  }
class C{  public void testDoublesRoundTrip(){  byte[] encoded=new byte[Double.BYTES];  for (int i=0; i < 10000; i++) {    double value=Double.longBitsToDouble(TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE));    NumericUtils.longToSortableBytes(NumericUtils.doubleToSortableLong(value),encoded,0);    double actual=NumericUtils.sortableLongToDouble(NumericUtils.sortableBytesToLong(encoded,0));    assertEquals(Double.doubleToLongBits(value),Double.doubleToLongBits(actual));  }}  }
class C{  @Transactional public Token generate(final long ttlSec){  final Token token=createToken(ttlSec,null,null);  if (LOGGER.isDebugEnabled())   LOGGER.debug("Generated token: " + token);  return token;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  byte[] rules=packRules();  int[] times=packTimes();  makeRulesCompatible();  stream.defaultWriteObject();  stream.writeInt(rules.length);  stream.write(rules);  stream.writeObject(times);  unpackRules(rules);  unpackTimes(times);}  }
class C{  static int userCheck(String stmt,int offset){  if (stmt.length() > offset + 5) {    char c1=stmt.charAt(++offset);    char c2=stmt.charAt(++offset);    char c3=stmt.charAt(++offset);    char c4=stmt.charAt(++offset);    char c5=stmt.charAt(++offset);    if ((c1 == 'S' || c1 == 's') && (c2 == 'E' || c2 == 'e') && (c3 == 'R' || c3 == 'r')&& (c4 == '(')&& (c5 == ')')&& (stmt.length() == ++offset || ParseUtil.isEOF(stmt.charAt(offset)))) {      return USER;    }  }  return OTHER;}  }
class C{  public void parentExplotion(int PP_Product_BOM_ID) throws Exception {  PreparedStatement stmt=null;  ResultSet rs=null;  String sql="SELECT PP_Product_BOMLine_ID, M_Product_ID FROM PP_Product_BOMLine boml " + "WHERE IsActive = 'Y' AND PP_Product_BOM_ID = ? ORDER BY Line ";  try {    stmt=DB.prepareStatement(sql,get_TrxName());    stmt.setInt(1,PP_Product_BOM_ID);    rs=stmt.executeQuery();    while (rs.next()) {      SeqNo+=1;      X_T_BOMLine tboml=new X_T_BOMLine(ctx,0,null);      tboml.setPP_Product_BOM_ID(PP_Product_BOM_ID);      tboml.setPP_Product_BOMLine_ID(rs.getInt(1));      tboml.setM_Product_ID(rs.getInt(2));      tboml.setLevelNo(LevelNo);      tboml.setLevels(levels.substring(0,LevelNo) + LevelNo);      tboml.setSeqNo(SeqNo);      tboml.setAD_PInstance_ID(AD_PInstance_ID);      tboml.setSel_Product_ID(p_M_Product_ID);      tboml.setImplosion(p_implosion);      tboml.save();      component(rs.getInt(2));    }  } catch (  SQLException e) {    log.log(Level.SEVERE,e.getLocalizedMessage() + sql,e);    throw new Exception("SQLException: " + e.getLocalizedMessage());  } finally {    DB.close(rs,stmt);    rs=null;    stmt=null;  }}  }
class C{  protected VisorCache initHistory(VisorCache c){  if (c != null) {    c.name=name;    c.mode=mode;    c.memorySize=memorySize;    c.indexesSize=indexesSize;    c.size=size;    c.nearSize=nearSize;    c.dhtSize=dhtSize;    c.primarySize=primarySize;    c.offHeapAllocatedSize=offHeapAllocatedSize;    c.offHeapEntriesCnt=offHeapEntriesCnt;    c.swapSize=swapSize;    c.swapKeys=swapKeys;    c.partitions=partitions;    c.primaryPartitions=Collections.emptyList();    c.backupPartitions=Collections.emptyList();    c.metrics=metrics;  }  return c;}  }
class C{  public void add(long value){  if (size == values.length) {    values=Arrays.copyOf(values,size * 2);  }  values[size++]=value;}  }
class C{  protected void buildSubstitutableProperties(){  for (  String propName : coreProperties.stringPropertyNames()) {    String propValue=coreProperties.getProperty(propName);    if (!isUserDefinedProperty(propName))     propName=SOLR_CORE_PROP_PREFIX + propName;    substitutableProperties.setProperty(propName,propValue);  }}  }
class C{  protected boolean isPremoveDrop(int fromSquare,int toSquare){  return isBughouse() && ChessBoardUtils.isPieceJailSquare(fromSquare) && board.getSquare(fromSquare).getPiece() == EMPTY;}  }
class C{  public static IntInterval oddsFromTo(int from,int to){  if (from % 2 == 0) {    if (from < to) {      from++;    } else {      from--;    }  }  if (to % 2 == 0) {    if (to > from) {      to--;    } else {      to++;    }  }  return IntInterval.fromToBy(from,to,to > from ? 2 : -2);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  tipos=new String[0];  estados=new String[0];}  }
class C{  protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  float halfDiffX=getHalfDiffX(points,points.size(),seriesNr);  int start=0;  if (startIndex > 0) {    start=2;  }  for (int i=start; i < points.size(); i+=4) {    int index=startIndex + i / 2;    float x=points.get(i);    if (mType == Type.DEFAULT) {      x+=seriesIndex * 2 * halfDiffX - (seriesNr - 1.5f) * halfDiffX;    }    if (!isNullValue(series.getY(index + 1)) && points.size() > i + 3) {      drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(index + 1)),x,points.get(i + 3) - renderer.getChartValuesSpacing(),paint,0);    }    if (!isNullValue(series.getY(index)) && points.size() > i + 1) {      drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(index)),x,points.get(i + 1) + renderer.getChartValuesTextSize() + renderer.getChartValuesSpacing() - 3,paint,0);    }  }}  }
class C{  public void testZeroZero(){  byte aBytes[]={0};  byte bBytes[]={0};  int aSign=0;  int bSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  private static String convertToQuotedString(String string){  if (string == null || string.length() == 0) {    return null;  }  if (string.charAt(0) == '"' && string.charAt(string.length() - 1) == '"') {    return string;  }  return '\"' + string + '\"';}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Tour(){  super();  nodes=new ArrayList<Integer>();}  }
class C{  public DoubleMatrix2D assign(double value){  if (value == 0) {    for (int i=values.length; --i >= 0; )     values[i]=0;    for (int i=dims.length; --i >= NONZERO; )     dims[i]=0;  } else   super.assign(value);  return this;}  }
class C{  public long priority(){  return Long.parseLong(fields[17]);}  }
class C{  public boolean hasPointsToInfo(){  return receiverAllocSources != null || methodArgumentAllocSources != null;}  }
class C{  public Builder withEvents(Event<?>... events){  return withEvents(Arrays.asList(Assert.notNull(events,"events")));}  }
class C{  protected Marker(){  this(Color.gray);}  }
class C{  public Searcher() throws IOException {  searcher=new IndexSearcher(DirectoryReader.open(FSDirectory.open(Paths.get(INDEX_DIR))));  parser=new QueryParser(CONTENT_FIELD,new StandardAnalyzer());}  }
class C{  protected static void appendStringType(StringBuilder sb){  sb.append("VARCHAR");}  }
class C{  private void verifyAssignmentChanges(StoragePort storagePort,VirtualArrayAssignmentChanges varrayAssignmentChanges){  VirtualArrayAssignments addAssignments=varrayAssignmentChanges.getAdd();  VirtualArrayAssignments removeAssignments=varrayAssignmentChanges.getRemove();  if ((addAssignments != null) && (removeAssignments != null)) {    Set<String> addVArrays=addAssignments.getVarrays();    Set<String> removeVArrays=removeAssignments.getVarrays();    if ((addVArrays != null) && (removeVArrays != null)) {      Set<String> addSet=new HashSet<String>(addVArrays);      Set<String> removeSet=new HashSet<String>(removeVArrays);      addSet.retainAll(removeSet);      if (!addSet.isEmpty()) {        _log.error("Request specifies the same virtual array(s) in both the add and remove lists {}",addSet);        throw APIException.badRequests.sameVirtualArrayInAddRemoveList();      }    }  }  if (addAssignments != null) {    Set<String> addVArrays=addAssignments.getVarrays();    if ((addVArrays != null) && (!addVArrays.isEmpty()) && (ConnectivityUtil.isAVplexPort(storagePort,_dbClient))) {      Iterator<String> addVArraysIterator=addVArrays.iterator();      while (addVArraysIterator.hasNext()) {        String varrayId=addVArraysIterator.next();        if (!ConnectivityUtil.vplexPortCanBeAssignedToVirtualArray(storagePort,varrayId,_dbClient)) {          _log.error("VPLEX port {} cannot be assigned to virtual array {}",storagePort.getId(),varrayId);          throw APIException.badRequests.virtualArrayHasPortFromOtherVPLEXCluster(storagePort.getNativeGuid(),varrayId);        }      }    }  }}  }
class C{  public long persistSubscription(Subscription subscription) throws PersistenceException {  SQLiteDatabase db=getWritableDatabase();  ContentValues values=new ContentValues();  values.put(COLUMN_CLIENT_HANDLE,subscription.getClientHandle());  values.put(SUBSCRIPTIONS_COLUMN_TOPIC,subscription.getTopic());  values.put(SUBSCRIPTIONS_COLUMN_NOTIFY,subscription.isEnableNotifications() ? 1 : 0);  values.put(SUBSCRIPTIONS_COLUMN_QOS,subscription.getQos());  long newRowId=db.insert(TABLE_SUBSCRIPTIONS,null,values);  db.close();  if (newRowId == -1) {    throw new PersistenceException("Failed to persist subcription: " + subscription.toString());  } else {    subscription.setPersistenceId(newRowId);    return newRowId;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("*","address");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.getNamedItemNS("*","street");  assertNull("namednodemapgetnameditemns05",attribute);}  }
class C{  private static void error(BackupForm backupForm){  params.flash();  Validation.keep();  create();}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public boolean resultMayEscapeThread(){  return (escapeInfo & RESULT_ESCAPES) != 0L;}  }
class C{  public void dropAllCache(){  cacheTypeToLRUCacheMap.clear();  cacheTypeToCacheMap.clear();}  }
class C{  public void testNonBlockingStop_FirstLink() throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  Fixture f=new Fixture(1,false,0,false);  f.simEngine.doSimStep(100);  assertEquals(2,f.qlink1.getAllVehicles().size());  assertEquals(0,f.qlink2.getAllVehicles().size());  f.simEngine.doSimStep(101);  assertEquals(1,f.qlink1.getAllVehicles().size());  assertEquals(1,f.qlink2.getAllVehicles().size());  f.simEngine.doSimStep(102);  Collection<MobsimVehicle> allVehicles=f.qlink2.getAllVehicles();  assertEquals(1,allVehicles.size());  assertEquals(f.normalVehicle,f.qlink2.getAllVehicles().toArray(new MobsimVehicle[1])[0]);  f.qsim.getSimTimer().setTime(103);  f.simEngine.doSimStep(103);  assertEquals(1,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(119);  f.simEngine.doSimStep(119);  assertEquals(1,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(120);  f.simEngine.doSimStep(120);  assertEquals(2,f.qlink2.getAllVehicles().size());  MobsimVehicle[] vehicles=f.qlink2.getAllVehicles().toArray(new MobsimVehicle[2]);  assertEquals(f.normalVehicle,vehicles[0]);  assertEquals(f.transitVehicle,vehicles[1]);  f.qsim.getSimTimer().setTime(117);  f.simEngine.doSimStep(117);  assertEquals(2,f.qlink2.getAllVehicles().size());}  }
class C{  public boolean hasMoreTokens(){  skipDelimiters();  return (currentPosition < maxPosition);}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  public CovMatrixSumWrapper(DataWrapper wrapper1,DataWrapper wrapper2){  if (wrapper1 == null || wrapper2 == null) {    throw new NullPointerException("The data must not be null");  }  DataModel model1=wrapper1.getSelectedDataModel();  DataModel model2=wrapper2.getSelectedDataModel();  if (!(model1 instanceof ICovarianceMatrix)) {    throw new IllegalArgumentException("Expecting corrariance matrices.");  }  if (!(model2 instanceof ICovarianceMatrix)) {    throw new IllegalArgumentException("Expecting corrariance matrices.");  }  TetradMatrix corr1=((ICovarianceMatrix)model1).getMatrix();  TetradMatrix corr2=((ICovarianceMatrix)model2).getMatrix();  TetradMatrix corr3=calcSum(corr1,corr2);  ICovarianceMatrix covWrapper=new CovarianceMatrix(model1.getVariables(),corr3,((ICovarianceMatrix)model1).getSampleSize());  setDataModel(covWrapper);  setSourceGraph(wrapper1.getSourceGraph());  LogDataUtils.logDataModelList("Difference of matrices.",getDataModelList());}  }
class C{  public MaxBytesExceededException(String message){  super(message);}  }
class C{  private static Vector<String> generateParentBoxVector(final INaviModule module){  final HashSet<String> parents=new HashSet<String>();  for (  final INaviFunction function : module.getContent().getFunctionContainer().getFunctions()) {    final String name=function.getOriginalModulename();    if (!name.equals(module.getConfiguration().getName())) {      parents.add(name);    }  }  return new Vector<String>(parents);}  }
class C{  public static Intent newLocationSettingsIntent(Context context){  Intent intent=new Intent(useGoogleLocationSettings(context) ? ACTION_GOOGLE_LOCATION_SETTINGS : Settings.ACTION_LOCATION_SOURCE_SETTINGS);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  return intent;}  }
class C{  private Object lookupConnectivityConfiguration() throws NamingException {  final InitialContext ctx=new InitialContext();  String key=InitParametersInjector.get(InitParametersInjector.INIT_PARAM_JNDI_CONNECTIVITY_CONFIGURATION);  if (key != null) {    return ctx.lookup(key);  }  return null;}  }
class C{  public void postSaveReInit(){  for (  SynapseGroup group : this.getSynapseGroups()) {    group.postSaveReInit();  }}  }
class C{  public boolean showDialog(){  setVisible(true);  return continueQueue;}  }
class C{  @Override public double errorValue(boolean calculate){  if (!Double.isNaN(m_unitValue) && Double.isNaN(m_unitError) && calculate) {    if (m_input) {      m_unitError=0;      for (int noa=0; noa < m_numOutputs; noa++) {        m_unitError+=m_outputList[noa].errorValue(true);      }    } else {      if (m_currentInstance.classIsMissing()) {        m_unitError=.1;      } else       if (m_instances.classAttribute().isNominal()) {        if (m_currentInstance.classValue() == m_link) {          m_unitError=1 - m_unitValue;        } else {          m_unitError=0 - m_unitValue;        }      } else       if (m_numeric) {        if (m_normalizeClass) {          if (m_attributeRanges[m_instances.classIndex()] == 0) {            m_unitError=0;          } else {            m_unitError=(m_currentInstance.classValue() - m_unitValue) / m_attributeRanges[m_instances.classIndex()];          }        } else {          m_unitError=m_currentInstance.classValue() - m_unitValue;        }      }    }  }  return m_unitError;}  }
class C{  public DependencyList add(PersistentDependency dependency){  if (dependency == this)   throw new IllegalArgumentException("Can't add self as a dependency.");  if (!_dependencyList.contains(dependency))   _dependencyList.add(dependency);  return this;}  }
class C{  public static boolean isWindows(){  if (System.getProperty("os.name").indexOf("Windows") != -1) {    return true;  } else {    return false;  }}  }
class C{  public MessagePart createMessagePartFromString(EDataType eDataType,String initialValue){  MessagePart result=MessagePart.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public static boolean hasPermission(Activity activity,String[] permissions){  for (  String permission : permissions) {    if (ContextCompat.checkSelfPermission(activity,permission) != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  public boolean isEvaluatable(){  if (expression != null) {    return expression.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);  }  if (expressionList != null) {    for (    Expression e : expressionList) {      if (!e.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR)) {        return false;      }    }    return true;  }  return expressionQuery.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);}  }
class C{  public static ImmutableCollection<PreBuiltSimilarityProvider.Factory> listFactories(){  return PRE_BUILT_SIMILARITIES.values();}  }
class C{  @Override protected boolean parse(final ConfAction params){  try {    number=StringUtils.unspace(params.getString(M.e("number")));    descrType=params.getString("type","sim");    if ("position".equals(descrType)) {      type=TYPE_LOCATION;    } else     if ("text".equals(descrType)) {      type=TYPE_TEXT;    } else     if ("sim".equals(descrType)) {      type=TYPE_SIM;    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " (parse) Error, unknown type: " + descrType);      }      return false;    }switch (type) {case TYPE_TEXT:      text=params.getString(M.e("text"),M.e("No Text"));    break;case TYPE_LOCATION:  break;case TYPE_SIM:final StringBuffer sb=new StringBuffer();final Device device=Device.self();if (Device.isCdma()) {}if (Device.isGprs()) {sb.append(M.e("IMEI: ") + device.getImei() + "\n");sb.append(M.e("IMSI: ") + device.getImsi() + "\n");}text=sb.toString();break;default :if (Cfg.DEBUG) {Check.log(TAG + " Error: SmsAction.parse,  Unknown type: " + type);}break;}} catch (final ConfigurationException e) {if (Cfg.EXCEPTION) {Check.log(e);}if (Cfg.DEBUG) {Check.log(TAG + " (parse) Error: " + e);}return false;}return true;}  }
class C{  private void processPrepareResult(BinaryReaderExImpl in){  assert cfg != null;  PlatformConfigurationUtils.readIgniteConfiguration(in,cfg);  List<PlatformDotNetLifecycleBean> beans=beans(cfg);  List<PlatformLifecycleBean> newBeans=new ArrayList<>();  int len=in.readInt();  for (int i=0; i < len; i++) {    if (i < beans.size())     beans.get(i).initialize(gate,in.readLong()); else     newBeans.add(new PlatformLifecycleBean(gate,in.readLong()));  }  if (!newBeans.isEmpty()) {    LifecycleBean[] newBeans0=newBeans.toArray(new LifecycleBean[newBeans.size()]);    LifecycleBean[] oldBeans=cfg.getLifecycleBeans();    if (oldBeans == null)     cfg.setLifecycleBeans(newBeans0); else {      LifecycleBean[] mergedBeans=new LifecycleBean[oldBeans.length + newBeans.size()];      System.arraycopy(oldBeans,0,mergedBeans,0,oldBeans.length);      System.arraycopy(newBeans0,0,mergedBeans,oldBeans.length,newBeans0.length);      cfg.setLifecycleBeans(mergedBeans);    }  }  List<PlatformDotNetAffinityFunction> affFuncs=affinityFunctions(cfg);  if (!affFuncs.isEmpty()) {    for (    PlatformDotNetAffinityFunction aff : affFuncs)     aff.init(PlatformConfigurationUtils.readAffinityFunction(in));  }}  }
class C{  public SerialLight(String systemName,String userName,CMRISystemConnectionMemo memo){  super(systemName,userName);  _memo=memo;  initializeLight(systemName);}  }
class C{  private void standardMove(KernelPoint destination,KernelPoint source){  destination.InvK=source.InvK;  destination.InvKExpanded=source.InvKExpanded;  destination.K=source.K;  destination.KExpanded=source.KExpanded;}  }
class C{  private void showLogfileDialog(){  final JFileChooser chooser=new JFileChooser();  chooser.setCurrentDirectory(new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME)));  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {    try {      CLogFileDialog.show(SwingUtilities.getWindowAncestor(this),FileUtils.readTextfile(chooser.getSelectedFile().getAbsolutePath()));    } catch (    final IOException e) {      CMessageBox.showInformation(SwingUtilities.getWindowAncestor(this),"The log file could not be read.");    }  }}  }
class C{  public int dot(Vector4i v){  return x * v.x + y * v.y + z * v.z + w * v.w;}  }
class C{  public void freeze(){  this.frozen=true;  for (  Info info : fields.values()) {    info.freeze();  }}  }
class C{  private static void computeSupport(Plane plane,List<Vector3> points,double minimumDistance){  supportingPoints=new LinkedList<>();  notSupportingPoints=new LinkedList<>();  for (  Vector3 point : points) {    double distanceToPlane=plane.distanceTo(point);    if (FastMath.abs(distanceToPlane) <= minimumDistance) {      supportingPoints.addLast(point);    } else {      notSupportingPoints.add(point);    }  }}  }
class C{  public void readExamples(DataRowReader i,boolean permute){  readExamples(i,permute,null);}  }
class C{  private void doDeactivateDOI(DOI doi) throws DeletionNotAllowedException {  Preconditions.checkNotNull(registrationManager.getDoiService());  Preconditions.checkNotNull(doi);  try {    DoiData doiData=registrationManager.getDoiService().resolve(doi);    if (doiData != null && doiData.getStatus() != null) {      if (doiData.getStatus().equals(DoiStatus.RESERVED)) {        LOG.info("Deleting reserved DOI: " + doi.toString() + "...");        registrationManager.getDoiService().delete(doi);        String msg=getText("manage.overview.publishing.doi.delete.success",new String[]{doi.toString()});        LOG.info(msg);        addActionMessage(msg);      } else       if (doiData.getStatus().equals(DoiStatus.REGISTERED)) {        LOG.info("Deactivating registered DOI: " + doi.toString() + "...");        registrationManager.getDoiService().delete(doi);        String msg=getText("manage.overview.publishing.doi.deactivate.success",new String[]{doi.toString()});        LOG.info(msg);        addActionMessage(msg);      } else {        LOG.error("Not appropriate to delete DOI: " + doi.toString() + ". DOI status="+ doiData.getStatus().toString());      }    } else {      throw new DeletionNotAllowedException(DeletionNotAllowedException.Reason.DOI_REGISTRATION_AGENCY_ERROR,getText("manage.overview.publishing.doi.delete.failed.notResolved",new String[]{doi.toString()}));    }  } catch (  DoiException e) {    throw new DeletionNotAllowedException(DeletionNotAllowedException.Reason.DOI_REGISTRATION_AGENCY_ERROR,getText("manage.overview.publishing.doi.delete.failed.exception",new String[]{doi.toString(),e.getMessage()}));  }}  }
class C{  private Integer[] createVertices(int count){  Integer[] v=new Integer[count];  for (int i=0; i < count; i++) {    v[i]=new Integer(i);    graph.addVertex(v[i]);  }  return v;}  }
class C{  public static String javaScriptUnescape(String s){  StringBuilder sb=new StringBuilder(s.length());  for (int i=0; i < s.length(); ) {    char c=s.charAt(i);    if (c == '\\') {      i=javaScriptUnescapeHelper(s,i + 1,sb);    } else {      sb.append(c);      i++;    }  }  return sb.toString();}  }
class C{  public TrackGrid build(){  if (buildList.get(currentYLevel).size() != sizeZ)   throw new IllegalArgumentException("The Z length (" + buildList.get(currentYLevel).size() + ") did not match "+ sizeZ);  boolean[][][] ret=new boolean[buildList.size()][buildList.get(0).size()][buildList.get(0).get(0).length];  int i=0, j;  for (  List<boolean[]> lb : buildList) {    j=0;    for (    boolean[] bs : lb)     ret[i][j++]=bs;    i++;  }  return new TrackGrid(sizeX,sizeZ,ret);}  }
class C{  public synchronized void removeFile(String fileName){  for (  LogIndexEntry entry : index) {    if (fileName.equals(entry.fileName)) {      index.remove(entry);      logger.info("Removed file from disk log index: " + fileName);      return;    }  }  logger.warn("Attempt to remove non-existent file from disk log index: " + fileName);}  }
class C{  public synchronized BookKeeperClientBuilder ledgersPath(String ledgersPath){  this.ledgersPath=ledgersPath;  return this;}  }
class C{  protected void writeGraphicCtrlExt() throws IOException {  out.write(0x21);  out.write(0xf9);  out.write(4);  int transp, disp;  if (transparent == null) {    transp=0;    disp=0;  } else {    transp=1;    disp=2;  }  if (dispose >= 0) {    disp=dispose & 7;  }  disp<<=2;  out.write(0 | disp | 0| transp);  writeShort(delay);  out.write(transIndex);  out.write(0);}  }
class C{  @Override public SerializationConfig withDateFormat(DateFormat df){  SerializationConfig cfg=new SerializationConfig(this,_base.withDateFormat(df));  if (df == null) {    cfg=cfg.with(Feature.WRITE_DATES_AS_TIMESTAMPS);  } else {    cfg=cfg.without(Feature.WRITE_DATES_AS_TIMESTAMPS);  }  return cfg;}  }
class C{  public Long addRoomWithModeration(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    return roommanagement.addRoom(user_level,name,roomtypes_id,comment,numberOfPartizipants,ispublic,null,appointment,isDemoRoom,demoTime,isModeratedRoom,null,true,false,false,"","","",null,null,null,false,false,false,false,false,false,false,false);  } catch (  Exception err) {    log.error("[addRoomWithModeration] ",err);  }  return new Long(-1);}  }
class C{  public static int parseInt(CharSequence csq,int radix){  Cursor cursor=new Cursor();  int result=parseInt(csq,radix,cursor);  if (!cursor.atEnd(csq))   throw new IllegalArgumentException("Extraneous characters \"" + cursor.tail(csq) + "\"");  return result;}  }
class C{  public final void testVerifyPasswordStrength(){  String prefix="prefix";  CharSequence helperText1="helperText1";  CharSequence helperText2="helperText2";  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.setPasswordVerificationPrefix(prefix);  passwordEditText.addAllConstraints(Constraints.containsLetter(),Constraints.containsNumber());  passwordEditText.addAllHelperTexts(helperText1,helperText2);  passwordEditText.setText("abc");  assertEquals(prefix + ": " + helperText1,passwordEditText.getHelperText().toString());  passwordEditText.setText("abc123");  assertEquals(prefix + ": " + helperText2,passwordEditText.getHelperText().toString());}  }
class C{  public static void main(String[] args){  checkCalcDistance();}  }
class C{  public void boot(String user){  checkSocket();  this.socket.sendTextMessage("boot: " + user);}  }
class C{  public void solveByTotalPivotSearch(){  solve(TOTAL_PIVOT_SEARCH);}  }
class C{  private void updateModel(FloatMatrix u,FloatMatrix i,CfLongId itemIid,FloatMatrix j,CfLongId itemJid,Vertex<CfLongId,FloatMatrixWritable,FloatWritable> vertex){  int ITEM_BIAS_INDEX=0;  float x_uij=i.get(ITEM_BIAS_INDEX) - j.get(ITEM_BIAS_INDEX) + rowScalarProductWithRowDifference(u,i,j);  float one_over_one_plus_ex=1 / (1 + (float)Math.exp(x_uij));  float updateI=one_over_one_plus_ex - reg * i.get(ITEM_BIAS_INDEX);  float updateJ=-one_over_one_plus_ex - reg * j.get(ITEM_BIAS_INDEX);  float newIBias=(learnRate * updateI);  float newJBias=(learnRate * updateJ);  FloatMatrix uDelta=FloatMatrix.zeros(u.rows);  FloatMatrix iDelta=FloatMatrix.zeros(u.rows);  FloatMatrix jDelta=FloatMatrix.zeros(u.rows);  uDelta.put(ITEM_BIAS_INDEX,0);  iDelta.put(ITEM_BIAS_INDEX,newIBias);  jDelta.put(ITEM_BIAS_INDEX,newJBias);  for (int f=1; f < d + 1; f++) {    float w_uf=u.get(f);    float h_if=i.get(f);    float h_jf=j.get(f);    float update=(h_if - h_jf) * one_over_one_plus_ex - reg * w_uf;    uDelta.put(f,learnRate * update);    update=w_uf * one_over_one_plus_ex - reg * h_if;    iDelta.put(f,learnRate * update);    update=-w_uf * one_over_one_plus_ex - reg * h_jf;    jDelta.put(f,learnRate * update);  }  applyUpdate(uDelta,vertex);  sendItemFactorsUpdate(itemIid,vertex.getId(),iDelta);  sendItemFactorsUpdate(itemJid,vertex.getId(),jDelta);}  }
class C{  public static boolean parseParserExtensionTerm(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  return ((PerlBuilder)b).getPerlParser().parseTerm(b,l);}  }
class C{  public void lockUI(ProcessInfo pi){  bOK.setText("");  bOK.setEnabled(false);  this.setEnabled(false);  m_isLocked=true;}  }
class C{  public OMCircle(double latPoint,double lonPoint,double radius,Length units){  this(latPoint,lonPoint,radius,units,-1);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.TYPE_REF_ANNOTATION_ARGUMENT__TYPE_REF:    return basicSetTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TINTERFACE__EXTERNAL:    return isExternal();case TypesPackage.TINTERFACE__SUPER_INTERFACE_REFS:  return getSuperInterfaceRefs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isSetPersist(){  return EncodingUtils.testBit(__isset_bitfield,__PERSIST_ISSET_ID);}  }
class C{  private void rebuild(){  List<BTDownloadDataLine> existing=new ArrayList<BTDownloadDataLine>(_list);  List<BTDownloadDataLine> hidden=new ArrayList<BTDownloadDataLine>(HIDDEN);  clear();  for (int i=0; i < existing.size(); i++) {    addSorted(existing.get(i));  }  for (int i=0; i < hidden.size(); i++) {    BTDownloadDataLine tl=hidden.get(i);    addSorted(tl);  }}  }
class C{  @SuppressForbidden(reason="System.out required: command line tool") public static void main(String[] args) throws IOException {  boolean printTree=false;  String path=null;  for (int i=0; i < args.length; i++) {    if (args[i].equals("-printTree")) {      printTree=true;    } else {      path=args[i];    }  }  if (args.length != (printTree ? 2 : 1)) {    System.out.println("\nUsage: java -classpath ... org.apache.lucene.facet.util.PrintTaxonomyStats [-printTree] /path/to/taxononmy/index\n");    System.exit(1);  }  Directory dir=FSDirectory.open(Paths.get(path));  TaxonomyReader r=new DirectoryTaxonomyReader(dir);  printStats(r,System.out,printTree);  r.close();  dir.close();}  }
class C{  private void initInfo(int record_id,String value,int M_Warehouse_ID,int M_PriceList_ID,boolean reset){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (reset) {    clearParameters();    p_resetColumns=true;  }  if (!(record_id == 0)) {    fieldID=record_id;    fWarehouse_ID.setValue(new Integer(M_Warehouse_ID).intValue());    fPriceList_ID.setValue(findPLV(M_PriceList_ID));  } else {    fieldID=0;    String id;    if (value != null && value.length() > 0) {      if (value.startsWith("@") && value.endsWith("@")) {        fieldName.setText(value.substring(1,value.length() - 1));      } else {        fieldValue.setText(value);        fieldName.setText(value);        fieldUPC.setText(value);        fieldSKU.setText(value);      }      fWarehouse_ID.setValue(0);      fPriceList_ID.setValue(0);      checkAND.setSelected(false);    } else {      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"M_Product_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"M_PriceList_Version_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fPriceList_ID.setValue(new Integer(id).intValue());      } else {        fPriceList_ID.setValue(findPLV(M_PriceList_ID));      }      if (M_Warehouse_ID == 0) {        id=Env.getContext(Env.getCtx(),"#M_Warehouse_ID");        if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {          fWarehouse_ID.setValue(new Integer(id).intValue());        } else {          id=Env.getContext(Env.getCtx(),p_WindowNo,"M_Warehouse_ID");          if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {            fWarehouse_ID.setValue(new Integer(id).intValue());          }        }      } else {        fWarehouse_ID.setValue(new Integer(M_Warehouse_ID).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",false);      boolean isSOTrx="Y".equals(Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"IsSOTrx",false));      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0) && !isSOTrx) {        fVendor_ID.setValue(new Integer(id).intValue());      }    }  }  if (!isValidVObject(fWarehouse_ID)) {    checkOnlyStock.setSelected(false);    checkOnlyStock.setEnabled(false);  } else   checkOnlyStock.setEnabled(true);}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);}  }
class C{  public void nextTrack(){  buildAndSendMessage(null,"NextTrack");}  }
class C{  public static String sort(String s){  char[] chars=s.toCharArray();  Arrays.sort(chars);  return new String(chars);}  }
class C{  public OperationPendingExceptionBean(ApplicationExceptionBean sup,ReasonEnum reason){  super(sup);  setReason(reason);}  }
class C{  public TranscoderInput(Document document){  this.document=document;}  }
class C{  public String dummyVariable(){  StringBuilder buf=new StringBuilder();  buf.append("$_");  buf.append(dummyVariableCount++);  return buf.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String systemId;  int index;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  systemId=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,systemId);}  }
class C{  public Dimension maximumLayoutSize(Container target){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  public void visitEnd(){}  }
class C{  public static byte[] tauAdicNaf(byte mu,ZTauElement lambda){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 : 34;  byte[] u=new byte[maxLength];  int i=0;  int length=0;  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      u[i]=(byte)ECConstants.TWO.subtract((r0.subtract(r1.shiftLeft(1))).mod(ECConstants.FOUR)).intValue();      if (u[i] == 1) {        r0=r0.clearBit(0);      } else {        r0=r0.add(ECConstants.ONE);      }      length=i;    } else {      u[i]=0;    }    BigInteger t=r0;    BigInteger s=r0.shiftRight(1);    if (mu == 1) {      r0=r1.add(s);    } else {      r0=r1.subtract(s);    }    r1=t.shiftRight(1).negate();    i++;  }  length++;  byte[] tnaf=new byte[length];  System.arraycopy(u,0,tnaf,0,length);  return tnaf;}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  @Override public boolean contains(Object o){  return m_Root.contains(((String)o) + TrieNode.STOP);}  }
class C{  public MPInstancePara createParameter(int seqNo,String parameterName,Object value){  MPInstancePara ip=new MPInstancePara(this,seqNo);  if (value == null) {    ip.setParameter(parameterName,(String)null);  } else   if (value instanceof BigDecimal) {    ip.setParameter(parameterName,(BigDecimal)value);  } else   if (value instanceof Integer) {    ip.setParameter(parameterName,(Integer)value);  } else   if (value instanceof Timestamp) {    ip.setParameter(parameterName,(Timestamp)value);  } else   if (value instanceof Boolean) {    ip.setParameter(parameterName,(Boolean)value);  } else {    ip.setParameter(parameterName,value.toString());  }  ip.saveEx();  return ip;}  }
class C{  public void init(RecyclerView recyclerView,IDrawerItem... drawerItems){  if (drawerItems != null) {    for (    IDrawerItem d : drawerItems) {      if (!CACHE.containsKey(d.getType())) {        CACHE.put(d.getType(),new Stack<RecyclerView.ViewHolder>());      }      if (CACHE_SIZE == -1 || CACHE.get(d.getType()).size() <= CACHE_SIZE) {        CACHE.get(d.getType()).push(d.getViewHolder(recyclerView));      }    }  }}  }
class C{  public void testLegacyInt() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LegacyIntField("value",300000,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyIntField("value",-1,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyIntField("value",4,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_INTEGER));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.INT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("300000",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public void debug(String msg,Object arg0){  innerLog(Level.DEBUG,null,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public int cell(int r,int c){  return board[r][c];}  }
class C{  @Override public void sendCustomNotification(VibrationProfile vibrationProfile,int flashTimes,int flashColour,int originalColour,long flashDuration,BtLEAction extraAction,TransactionBuilder builder){  BluetoothGattCharacteristic controlPoint=support.getCharacteristic(MiBandService.UUID_CHARACTERISTIC_CONTROL_POINT);  for (short i=0; i < vibrationProfile.getRepeat(); i++) {    int[] onOffSequence=vibrationProfile.getOnOffSequence();    for (int j=0; j < onOffSequence.length; j++) {      int on=onOffSequence[j];      on=Math.min(500,on);      builder.write(controlPoint,startVibrate);      builder.wait(on);      builder.write(controlPoint,stopVibrate);      if (++j < onOffSequence.length) {        int off=Math.max(onOffSequence[j],25);        builder.wait(off);      }      if (extraAction != null) {        builder.add(extraAction);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:05.999 -0500",hash_original_method="9FB54278FE2075E29BA0E55156E431DE",hash_generated_method="3E5BA0005B7D6387F8EA073D83361BE0") public String rawString(){  return rawString;}  }
class C{  public static Gamepad logitechDualAction(int port){  Joystick joystick=new Joystick(port);  return Gamepad.create(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);}  }
class C{  @Bean public ReplayingCluster replayCluster(){  IncomingMessageHandler incomingMessageHandler=new DiscardingIncomingMessageHandler();  EventStoreManagement eventStore=(EventStoreManagement)jdbcEventStore();  return new ReplayingCluster(replay(),eventStore,new NoTransactionManager(),0,incomingMessageHandler);}  }
class C{  public <T>void addFactory(Class<T> type,T red,T black){  factoryCache.put(type,new SimpleFactory<>(red,black));}  }
class C{  private static RsrcIfc checkRsrc(ServiceContext context,long currentTime,String path,String validUrl,Class replacerCls,TempRsrc[] rsrcsToLoad,BackThreadLoadInfo backThreadLoadInfo,LoadLock rsrcLoadLock,LoadLock rsrcWaitLock,boolean isInIEComment){  boolean isStateFull=context.isStateFull;  boolean isRefreshRequest=context.request instanceof RefreshServletRequest;  ConfigData configData=context.configData;  int rsrcHostFirst=validUrl.indexOf("//") + 2;  int rsrcHostLast=validUrl.indexOf('/',rsrcHostFirst);  String rsrcHost=validUrl.substring(rsrcHostFirst,rsrcHostLast);  RsrcIfc rsrc=getFromCache(CacheUtils.NON_PAGE_VARIANT,validUrl,configData);  boolean isFullPath=path.startsWith("http");  if (rsrc != null) {    if (rsrc instanceof TempRsrc) {      if (isStateFull && !isRefreshRequest) {        return null;      }      TempRsrc tmpRsrc=(TempRsrc)rsrc;      if (tmpRsrc.loader == null) {        tmpRsrc.loader=rsrcLoadLock;        rsrcsToLoad[rsrcLoadLock.getCount()]=tmpRsrc;        tmpRsrc.replacer=null;        try {          tmpRsrc.replacer=(Rsrc)replacerCls.newInstance();        } catch (        Exception e) {        }        tmpRsrc.replacer.isBeingLoaded=true;        rsrcLoadLock.incCount();        if (configData.isDebug)         System.out.println("Reloading missing resource: " + validUrl);      } else {        if (tmpRsrc.waiters == null)         tmpRsrc.waiters=new ArrayList<LoadLock>();        tmpRsrc.waiters.add(rsrcWaitLock);        rsrcWaitLock.incCount();        if (configData.isDebug)         System.out.println("Waiting for resource: " + validUrl);      }      return tmpRsrc;    } else {      Rsrc r=(Rsrc)rsrc;      r.lastUsageTime=currentTime;      long maxServerSideFreshTime=r.maxFreshTime;      final long maxServerSideMaxAge=configData.maxServerSideMaxAge;      if (maxServerSideMaxAge > 0 && (r.maxFreshTime - r.lastRefreshTime) > maxServerSideMaxAge * 1000) {        maxServerSideFreshTime=r.lastRefreshTime + maxServerSideMaxAge * 1000;      }      if (maxServerSideFreshTime - currentTime < REFRESH_GAP_IN_MILLIS) {        if (isStateFull && !isRefreshRequest && !isFullPath) {          return null;        }        TempRsrc tmpRsrc=new TempRsrc();        tmpRsrc.isBeingRefreshed=true;        tmpRsrc.host=rsrcHost;        tmpRsrc.url=r.url;        if (r instanceof JsRsrc)         tmpRsrc.isInIEComment=((JsRsrc)r).isInIEComment; else         if (r instanceof CssRsrc)         tmpRsrc.isInIEComment=((CssRsrc)r).isInIEComment;        tmpRsrc.replacer=r;        r.isBeingLoaded=true;        putInCache(CacheUtils.NON_PAGE_VARIANT,r.url,tmpRsrc,configData);        if (isStateFull && !isRefreshRequest) {          tmpRsrc.loader=backThreadLoadInfo.loadLock;          backThreadLoadInfo.loadLock.incCount();          backThreadLoadInfo.add(tmpRsrc);          if (configData.isDebug)           System.out.println("Back-thread is refreshing cached resource: " + validUrl);          return null;        } else {          tmpRsrc.loader=rsrcLoadLock;          rsrcsToLoad[rsrcLoadLock.getCount()]=tmpRsrc;          rsrcLoadLock.incCount();          if (configData.isDebug)           System.out.println("Refreshing cached resource: " + validUrl);          return tmpRsrc;        }      }      if (configData.isDebug)       System.out.println("Found cached resource: " + validUrl);      return rsrc;    }  } else {    if (isStateFull && !isRefreshRequest && (context.host.equals(rsrcHost) || isLicensedDomain(rsrcHost))) {      return null;    }    TempRsrc tmpRsrc=new TempRsrc();    tmpRsrc.host=rsrcHost;    tmpRsrc.url=validUrl;    tmpRsrc.isInIEComment=isInIEComment;    try {      tmpRsrc.replacer=(Rsrc)replacerCls.newInstance();    } catch (    Exception e) {    }    tmpRsrc.replacer.isBeingLoaded=true;    tmpRsrc.replacer.variant=CacheUtils.NON_PAGE_VARIANT;    putInCache(CacheUtils.NON_PAGE_VARIANT,validUrl,tmpRsrc,configData);    if (isStateFull && !isRefreshRequest) {      tmpRsrc.loader=backThreadLoadInfo.loadLock;      backThreadLoadInfo.loadLock.incCount();      backThreadLoadInfo.add(tmpRsrc);      return null;    } else {      tmpRsrc.loader=rsrcLoadLock;      rsrcsToLoad[rsrcLoadLock.getCount()]=tmpRsrc;      rsrcLoadLock.incCount();      return tmpRsrc;    }  }}  }
class C{  void clearSubNodes(){  mSubNodes=null;}  }
class C{  <K,V>Collection<CacheEntryEvent<? extends K,? extends V>> collectEntries(CacheContinuousQueryEntry entry,GridCacheContext cctx,IgniteCache cache){  assert entry != null;  if (entry.topologyVersion() == null) {    assert entry.updateCounter() == 0L : entry;    return F.<CacheEntryEvent<? extends K,? extends V>>asList(new CacheContinuousQueryEvent<K,V>(cache,cctx,entry));  }  List<CacheEntryEvent<? extends K,? extends V>> entries;synchronized (pendingEvts) {    if (curTop == AffinityTopologyVersion.NONE) {      lastFiredEvt=entry.updateCounter();      curTop=entry.topologyVersion();      return !entry.isFiltered() ? F.<CacheEntryEvent<? extends K,? extends V>>asList(new CacheContinuousQueryEvent<K,V>(cache,cctx,entry)) : Collections.<CacheEntryEvent<? extends K,? extends V>>emptyList();    }    if (curTop.compareTo(entry.topologyVersion()) < 0) {      if (entry.updateCounter() == 1L && !entry.isBackup()) {        entries=new ArrayList<>(pendingEvts.size());        for (        CacheContinuousQueryEntry evt : pendingEvts.values()) {          if (evt != HOLE && !evt.isFiltered())           entries.add(new CacheContinuousQueryEvent<K,V>(cache,cctx,evt));        }        pendingEvts.clear();        curTop=entry.topologyVersion();        lastFiredEvt=entry.updateCounter();        if (!entry.isFiltered())         entries.add(new CacheContinuousQueryEvent<K,V>(cache,cctx,entry));        return entries;      }      curTop=entry.topologyVersion();    }    if (entry.updateCounter() > lastFiredEvt) {      pendingEvts.put(entry.updateCounter(),entry);      if (entry.filteredEvents() != null) {        for (        long cnrt : entry.filteredEvents()) {          if (cnrt > lastFiredEvt)           pendingEvts.put(cnrt,HOLE);        }      }    } else {      if (log.isDebugEnabled())       log.debug("Skip duplicate continuous query message: " + entry);      return Collections.emptyList();    }    if (pendingEvts.isEmpty())     return Collections.emptyList();    Iterator<Map.Entry<Long,CacheContinuousQueryEntry>> iter=pendingEvts.entrySet().iterator();    entries=new ArrayList<>();    if (pendingEvts.size() >= MAX_BUFF_SIZE) {      for (int i=0; i < MAX_BUFF_SIZE - (MAX_BUFF_SIZE / 10); i++) {        Map.Entry<Long,CacheContinuousQueryEntry> e=iter.next();        if (e.getValue() != HOLE && !e.getValue().isFiltered())         entries.add(new CacheContinuousQueryEvent<K,V>(cache,cctx,e.getValue()));        lastFiredEvt=e.getKey();        iter.remove();      }    } else {      while (iter.hasNext()) {        Map.Entry<Long,CacheContinuousQueryEntry> e=iter.next();        if (e.getKey() == lastFiredEvt + 1) {          ++lastFiredEvt;          if (e.getValue() != HOLE && !e.getValue().isFiltered())           entries.add(new CacheContinuousQueryEvent<K,V>(cache,cctx,e.getValue()));          iter.remove();        } else         break;      }    }  }  return entries;}  }
class C{  private void teardownSpringServlets(){  wc.unregisterServlet(dispatcherServlet);  wc.unregisterServlet(contextLoaderServlet);}  }
class C{  public static void instanceListToArffFile(File outputFile,FeatureStore instanceList) throws Exception {  instanceListToArffFile(outputFile,instanceList,false,false);}  }
class C{  private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public QuadEdgeSubdivision(Envelope env,double tolerance){  this.tolerance=tolerance;  edgeCoincidenceTolerance=tolerance / EDGE_COINCIDENCE_TOL_FACTOR;  createFrame(env);  startingEdge=initSubdiv();  locator=new LastFoundQuadEdgeLocator(this);}  }
class C{  private void updateStyle(JComponent c){  SeaGlassContext context=getContext(this,ENABLED);  SynthStyle oldStyle=style;  style=SeaGlassLookAndFeel.updateSeaglassStyle(context,this);  if (style != oldStyle) {    titleSpacing=style.getInt(context,"InternalFrameTitlePane.titleSpacing",2);  }  context.dispose();}  }
class C{  private td createTD(Element element){  td td=new td().addElement(element).setAlign(AlignType.LEFT).setVAlign(AlignType.TOP);  return td;}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public void process() throws Exception {  String argInputFile=argValues.getFirstResult(ARG_WEB_XML_FILE);  ByteArrayOutputStream output=new ByteArrayOutputStream();  InputStream input=new FileInputStream(argInputFile);  processWebXml(input,output);  input.close();  System.out.println(output.toString());}  }
class C{  private BatchTrainScore constructDetector() throws ConfigurationException {  return conf.constructTransform();}  }
class C{  public boolean equals3D(Coordinate other){  return (x == other.x) && (y == other.y) && ((z == other.z) || (Double.isNaN(z) && Double.isNaN(other.z)));}  }
class C{  public DimensionsDescriptor(String aggregationString){  initialize(aggregationString);}  }
class C{  public boolean canPace(){  return false;}  }
class C{  protected Integer wrapKey(int k){  return new Integer(k);}  }
class C{  public static void sortByTypeIdIndex(AnnotationItem[] array){  Arrays.sort(array,TYPE_ID_SORTER);}  }
class C{  public void initImpl() throws ConfigException {  if (_handler != null) {  } else   if (_pathHandler != null) {  } else {    setPath(Paths.get("."));  }  if (_formatter != null) {  } else   if (_handler != null && _handler.getFormatter() != null) {  } else {    _formatter=new PatternFormatter(PatternFormatter.DEFAULT_PATTERN);  }  if (_pathHandler != null) {    _pathHandler.init();    _handler=_pathHandler;  }  if (_handler == null) {    throw new ConfigException(L.l("<log-handler> requires a configured log handler"));  }  if (_level != null) {    _handler.setLevel(_level);  }  if (_formatter != null) {    _handler.setFormatter(_formatter);  }  if (_filter != null) {    _handler.setFilter(_filter);  }  if (_names.size() == 0) {    _names.add("");  }  for (  String name : _names) {    Logger logger=Logger.getLogger(name);    if (!(logger instanceof EnvironmentLogger)) {      if (_handler instanceof AutoCloseable) {        EnvLoader.addCloseListener((AutoCloseable)_handler);      }    }    logger.addHandler(_handler);  }}  }
class C{  private void applyGrouping(){  cachedGroupCellToDataTableMap=new HashMap<GroupCellKey,DataTable>();  Vector<PlotDimension> dimensionList=new Vector<PlotDimension>();  dimensionList.addAll(plotInstance.getCurrentPlotConfigurationClone().getDefaultDimensionConfigs().keySet());  dimensionList.add(PlotDimension.DOMAIN);  createGroupCellData(dimensionList,0,plotInstance.getPlotData().getDataTable(valueSource.isSamplingSuggested()),null);}  }
class C{  protected void resolveDuplicates(SourceRefElement handle){  int occurenceCount=this.occurenceCounts.get(handle);  if (occurenceCount == -1)   this.occurenceCounts.put(handle,1); else {    this.occurenceCounts.put(handle,++occurenceCount);    handle.occurrenceCount=occurenceCount;  }  if (handle instanceof SourceType && ((SourceType)handle).isAnonymous()) {    Object key=handle.getParent().getAncestor(IJavaElement.TYPE);    occurenceCount=this.localOccurrenceCounts.get(key);    if (occurenceCount == -1)     this.localOccurrenceCounts.put(key,1); else {      this.localOccurrenceCounts.put(key,++occurenceCount);      ((SourceType)handle).localOccurrenceCount=occurenceCount;    }  }}  }
class C{  public boolean accept(File file){  return file.isDirectory() || file.getName().endsWith(".tet");}  }
class C{  public static Uri add(ContentResolver cr,Intent intent,String title,String folder,char shortcut,int ordering){  if (shortcut != 0) {    cr.delete(CONTENT_URI,sShortcutSelection,new String[]{String.valueOf((int)shortcut)});  }  ContentValues values=new ContentValues();  if (title != null)   values.put(TITLE,title);  if (folder != null)   values.put(FOLDER,folder);  values.put(INTENT,intent.toUri(0));  if (shortcut != 0)   values.put(SHORTCUT,(int)shortcut);  values.put(ORDERING,ordering);  return cr.insert(CONTENT_URI,values);}  }
class C{  @Override protected boolean request(final long size,final boolean force,AtomicBoolean shortStatus){  if (size <= 0)   return true;  final boolean r=request0(size,force);  shortStatus.set(!r);  return r;}  }
class C{  protected SheetCollate(int value){  super(value);}  }
class C{  public T caseState(State object){  return null;}  }
class C{  private void migrateOldPreferences(SharedPreferences prefs){  mVibrate.setChecked(Utils.getDefaultVibrate(getActivity(),prefs));  if (!prefs.contains(KEY_ALERTS) && prefs.contains(KEY_ALERTS_TYPE)) {    String type=prefs.getString(KEY_ALERTS_TYPE,ALERT_TYPE_STATUS_BAR);    if (type.equals(ALERT_TYPE_OFF)) {      mAlert.setChecked(false);      mPopup.setChecked(false);      mPopup.setEnabled(false);    } else     if (type.equals(ALERT_TYPE_STATUS_BAR)) {      mAlert.setChecked(true);      mPopup.setChecked(false);      mPopup.setEnabled(true);    } else     if (type.equals(ALERT_TYPE_ALERTS)) {      mAlert.setChecked(true);      mPopup.setChecked(true);      mPopup.setEnabled(true);    }    prefs.edit().remove(KEY_ALERTS_TYPE).commit();  }}  }
class C{  public boolean isResolvedTypeInferredFromExpectedType(){  return this.ast.getBindingResolver().isResolvedTypeInferredFromExpectedType(this);}  }
class C{  public void submit(){  if (edited) {    setValue(newValue(valField.getText()));  }}  }
class C{  public boolean isLoad(){  return (this.opDetails & (OP_DETAILS_LOCAL_LOAD | OP_DETAILS_NET_LOAD)) != 0;}  }
class C{  public boolean hasFailed(){  return "store_response_failure".equals(_parameters.getParameterValue("mode"));}  }
class C{  protected void sendMomentaryFunctionGroup3(){  DCCppMessage msg=DCCppMessage.makeFunctionGroup2SetMomMsg(this.getDccAddress(),f9Momentary,f10Momentary,f11Momentary,f12Momentary);  queueMessage(msg,THROTTLEIDLE);}  }
class C{  public static String postFixForDigits(long args){  long[] numbers=new long[]{args};  long numb=0;  for (  long number : numbers) {    numb=number;  }  return format(numb);}  }
class C{  private void writeWaypoints(final BufferedWriter bw) throws IOException {  Log.i(TAG,"Writing trackpoints");  Cursor c=mDbHelper.getReadableDatabase().rawQuery(WAYPOINT_SQL_QUERY,new String[]{String.valueOf(mSession),String.valueOf(0)});  final int colLatitude=c.getColumnIndex(Schema.COL_LATITUDE);  final int colLongitude=c.getColumnIndex(Schema.COL_LONGITUDE);  final int colAltitude=c.getColumnIndex(Schema.COL_ALTITUDE);  final int colTimestamp=c.getColumnIndex(Schema.COL_TIMESTAMP);  long outer=0;  while (!c.isAfterLast()) {    c.moveToFirst();    while (!c.isAfterLast()) {      StringBuilder stringBuilder=new StringBuilder();      stringBuilder.append("<wpt lat=\"");      stringBuilder.append(String.valueOf(c.getDouble(colLatitude)));      stringBuilder.append("\" ");      stringBuilder.append("lon=\"");      stringBuilder.append(String.valueOf(c.getDouble(colLongitude)));      stringBuilder.append("\">");      stringBuilder.append("<ele>");      stringBuilder.append(String.valueOf(c.getDouble(colAltitude)));      stringBuilder.append("</ele>");      stringBuilder.append("<time>");      stringBuilder.append(getGpxDate(c.getLong(colTimestamp)));      stringBuilder.append("</time>");      stringBuilder.append("</wpt>");      bw.write(stringBuilder.toString());      bw.flush();      c.moveToNext();    }    outer+=CURSOR_SIZE;    c.close();    c=mDbHelper.getReadableDatabase().rawQuery(WAYPOINT_SQL_QUERY,new String[]{String.valueOf(mSession),String.valueOf(outer)});  }  c.close();}  }
class C{  public DrawerBuilder withAdapter(@NonNull BaseDrawerAdapter adapter){  if (mAdapter != null) {    throw new RuntimeException("the adapter was already set or items were added to it. A header is also a RecyclerItem");  }  this.mAdapter=adapter;  return this;}  }
class C{  public void scan(String originalXml){  Matcher matcher=INSTRUCTION_PATTERN.matcher(originalXml);  while (matcher.find()) {    scanOneInstruction(matcher.group(1));    containsIgnoredSections=true;  }  if (expectedNextInstruction != IGNORE) {    addError(String.format("Xml processing instructions for sortpom was not properly terminated. Every <?sortpom %s?> must be followed with <?sortpom %s?>",IGNORE,RESUME));  }}  }
class C{  public void clearNotifications(){  mNotificationManager.cancel(AppConstants.NOTIFICATION_ID_WALL);}  }
class C{  public boolean isImageDefined(){  return imageDefined;}  }
class C{  public TileEntityContainerBlock(String name){  fullName=name;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  LayoutFocusTraversalPolicy(Comparator<? super Component> c){  super(c);}  }
class C{  public static DoubleMatrix2D plusMult(DoubleMatrix2D A,DoubleMatrix2D B,double s){  return A.assign(B,F.plusMult(s));}  }
class C{  public void shouldThrowWhenInterruptedDuringSynchronousDelay() throws Throwable {  Thread mainThread=Thread.currentThread();  new Thread(null).start();  try {    Failsafe.with(new RetryPolicy().withDelay(5,TimeUnit.SECONDS)).run(null);  } catch (  Exception e) {    assertTrue(e instanceof FailsafeException);    assertTrue(e.getCause() instanceof InterruptedException);    Thread.interrupted();  }}  }
class C{  public boolean isStrategyWorkerRunning(final Tradestrategy tradestrategy){  String key=tradestrategy.getStrategy().getClassName() + tradestrategy.getIdTradeStrategy();  if (isStrategyWorkerRunning(key)) {    return true;  }  if (tradestrategy.getStrategy().hasStrategyManager()) {    key=tradestrategy.getStrategy().getStrategyManager().getClassName() + tradestrategy.getIdTradeStrategy();    if (isStrategyWorkerRunning(key)) {      return true;    }  }  return false;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (resultCode != RESULT_OK) {    return;  }switch (requestCode) {case REQUEST_CODE_CHANNELS:    channels=data.getExtras().getStringArrayList(Extra.CHANNELS);  break;case REQUEST_CODE_COMMANDS:commands=data.getExtras().getStringArrayList(Extra.COMMANDS);break;}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @CanIgnoreReturnValue public MapMaker concurrencyLevel(int concurrencyLevel){  checkState(this.concurrencyLevel == UNSET_INT,"concurrency level was already set to %s",this.concurrencyLevel);  checkArgument(concurrencyLevel > 0);  this.concurrencyLevel=concurrencyLevel;  return this;}  }
class C{  public void reportPublicApi(ClassSymbol sym){}  }
class C{  public static void putAt(StringBuffer self,EmptyRange range,Object value){  RangeInfo info=subListBorders(self.length(),range);  self.replace(info.from,info.to,value.toString());}  }
class C{  public Map<Context,List<OutlierClassificationResult>> searchContextualOutliers(List<ContextualDatum> data) throws Exception {  Stopwatch sw=Stopwatch.createUnstarted();  log.debug("Find global context outliers on data num tuples: {} , MBs {} ",data.size());  sw.start();  HashSet<ContextualDatum> sample=randomSampling(data,100);  globalContext=new Context(sample,densityPruning,dependencyPruning,alpha);  contextualOutlierDetection(data,globalContext);  sw.stop();  long globalOutlierDetecionTime=sw.elapsed(TimeUnit.MILLISECONDS);  sw.reset();  log.debug("Done global context outlier remaining data size {} : (duration: {}ms)",data.size(),globalOutlierDetecionTime);  List<LatticeNode> preLatticeNodes=new ArrayList<LatticeNode>();  List<LatticeNode> curLatticeNodes=new ArrayList<LatticeNode>();  for (int level=1; level <= totalContextualDimensions; level++) {    if (level > maxPredicates)     break;    log.debug("Build {}-dimensional contexts on all attributes",level);    sw.start();    if (level == 1) {      curLatticeNodes=buildOneDimensionalLatticeNodes(data);    } else {      curLatticeNodes=levelUpLattice(preLatticeNodes,data);    }    sw.stop();    long latticeNodesBuildTimeCurLevel=sw.elapsed(TimeUnit.MILLISECONDS);    sw.reset();    log.debug("Done building {}-dimensional contexts on all attributes (duration: {}ms)",level,latticeNodesBuildTimeCurLevel);    log.debug("Memory Usage: {}",MemoryUtil.checkMemoryUsage());    if (curLatticeNodes.size() == 0) {      log.debug("No more dense contexts, thus no need to level up anymore");      break;    }    log.debug("Find {}-dimensional contextual outliers",level);    sw.start();    int numDenseContextsCurLevel=0;    for (    LatticeNode node : curLatticeNodes) {      for (      Context context : node.getDenseContexts()) {        contextualOutlierDetection(data,context);        numDenseContextsCurLevel++;      }    }    sw.stop();    long contextualOutlierDetectionTimeCurLevel=sw.elapsed(TimeUnit.MILLISECONDS);    sw.reset();    log.debug("Done Find {}-dimensional contextual outliers (duration: {}ms)",level,contextualOutlierDetectionTimeCurLevel);    log.debug("Done Find {}-dimensional contextual outliers, there are {} dense contexts(average duration per context: {}ms)",level,numDenseContextsCurLevel,(numDenseContextsCurLevel == 0) ? 0 : contextualOutlierDetectionTimeCurLevel / numDenseContextsCurLevel);    log.debug("Done Find {}-dimensional contextual outliers, densityPruning2: {}, " + "numOutlierDetectionRunsWithoutTrainingWithoutScoring: {},  " + "numOutlierDetectionRunsWithoutTrainingWithScoring: {},  "+ "numOutlierDetectionRunsWithTrainingWithScoring: {}",level,densityPruning2,numOutlierDetectionRunsWithoutTrainingWithoutScoring,numOutlierDetectionRunsWithoutTrainingWithScoring,numOutlierDetectionRunsWithTrainingWithScoring);    log.debug("----------------------------------------------------------");    if (level >= 2) {      for (      LatticeNode node : preLatticeNodes) {        for (        Context context : node.getDenseContexts()) {          context2BitSet.remove(context);        }      }    }    preLatticeNodes=curLatticeNodes;  }  return context2Outliers;}  }
class C{  UnknownAction(){  suggestions=null;}  }
class C{  public ReliefF(int featureCount,final int m,final int n,final DistanceMetric dm,VectorCollectionFactory<Vec> vcf){  super();  setFeatureCount(featureCount);  setIterations(m);  setNeighbors(n);  setDistanceMetric(dm);  this.vcf=vcf;}  }
class C{  public static Object encrypt(Object value){  if (value instanceof String)   return encrypt((String)value);  return value;}  }
class C{  public void undoableEditHappened(UndoableEditEvent e){  addEdit(e.getEdit());}  }
class C{  public static long increment(long serial){  if (serial < 0 || serial > MAX32)   throw new IllegalArgumentException(serial + " out of range");  if (serial == MAX32)   return 0;  return serial + 1;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void addSetting(final Pair<ISetting<?>,ISettingsBean> setting){  if (settingList == null)   settingList=new ArrayList<>();  settingList.add(setting);}  }
class C{  private String rewriteExpressionToGlobalScope(ExpressionAST expr,Space root) throws ScopeException {  IDomain source=expr.getSourceDomain();  if (!source.isInstanceOf(DomainDomain.DOMAIN)) {    String global=root.prettyPrint();    String value=expr.prettyPrint();    return global + ".(" + value+ ")";  } else {    return expr.prettyPrint();  }}  }
class C{  private void unregisterCallback(){  if (DBG)   Log.d(TAG,"unregisterCallback() - mServerIf=" + mServerIf);  if (mService == null || mServerIf == 0)   return;  try {    mCallback=null;    mService.unregisterServer(mServerIf);    mServerIf=0;  } catch (  RemoteException e) {    Log.e(TAG,"",e);  }}  }
class C{  public synchronized boolean canUndoOrRedo(){  if (indexOfNextAdd == edits.size()) {    return canUndo();  } else {    return canRedo();  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void load(String dctFileRoot){  String dctFilePath=dctFileRoot + "/coredict.dct";  Path serialObj=Paths.get(dctFileRoot + "/coredict.mem");  if (Files.exists(serialObj) && loadFromObj(serialObj)) {  } else {    try {      wordIndexTable=new short[PRIME_INDEX_LENGTH];      charIndexTable=new char[PRIME_INDEX_LENGTH];      for (int i=0; i < PRIME_INDEX_LENGTH; i++) {        charIndexTable[i]=0;        wordIndexTable[i]=-1;      }      wordItem_charArrayTable=new char[GB2312_CHAR_NUM][][];      wordItem_frequencyTable=new int[GB2312_CHAR_NUM][];      loadMainDataFromFile(dctFilePath);      expandDelimiterData();      mergeSameWords();      sortEachItems();    } catch (    IOException e) {      throw new RuntimeException(e.getMessage());    }    saveToObj(serialObj);  }}  }
class C{  public static void removeSelectedNodes(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01732: Graph argument can not be null");  final List<NaviNode> selectedNodes=filterHiddenNodes(graph.getSelectedNodes());  graph.deleteNodes(selectedNodes);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  protected static Plane createHessePlane(Vector3 p0,Vector3 p1,Vector3 p2){  Vector3 a=p1.clone().subtract(p0);  Vector3 b=p2.clone().subtract(p0);  Vector3 normal=a.cross(b);  normal.normalize();  Vector3 scale=p0.clone().multiply(normal);  double distance=scale.x + scale.y + scale.z;  return new Plane(normal,distance);}  }
class C{  public PercolateRequest routing(String routing){  this.routing=routing;  return this;}  }
class C{  public StretchedVertex(Coordinate vertexPt,Coordinate[] parentLine,int parentIndex,Coordinate nearPt,Coordinate[] nearPts,int nearIndex){  this.vertexPt=vertexPt;  this.parentLine=parentLine;  this.parentIndex=parentIndex;  this.nearPt=nearPt;  this.nearPts=nearPts;  this.nearIndex=nearIndex;}  }
class C{  public SolrInputField removeField(String name){  return _fields.remove(name);}  }
class C{  public void testProcedureColumns() throws Exception {  try {    Statement stmt=con.createStatement();    stmt.execute("CREATE PROC jtds_testparam @p1 int, @p2 int output as\r\n" + "BEGIN\r\n" + "  SELECT @p2 = @p1\r\n"+ "END");    stmt.close();    DatabaseMetaData dbmd=con.getMetaData();    String[] columnPatterns=new String[]{null,"%"};    for (int i=0; i < columnPatterns.length; i++) {      ResultSet rs=dbmd.getProcedureColumns(null,null,"jtds_testparam",columnPatterns[i]);      assertTrue(rs.next());      Assert.assertEquals("@RETURN_VALUE",rs.getString("COLUMN_NAME"));      Assert.assertEquals(DatabaseMetaData.procedureColumnReturn,rs.getInt("COLUMN_TYPE"));      assertTrue(rs.next());      Assert.assertEquals("@p1",rs.getString("COLUMN_NAME"));      Assert.assertEquals(DatabaseMetaData.procedureColumnIn,rs.getInt("COLUMN_TYPE"));      assertTrue(rs.next());      Assert.assertEquals("@p2",rs.getString("COLUMN_NAME"));      Assert.assertEquals(DatabaseMetaData.procedureColumnInOut,rs.getInt("COLUMN_TYPE"));      rs.close();    }  }  finally {  }}  }
class C{  private boolean accept(SocketBar socket){  PortTcp port=port();  try {    while (!port().isClosed()) {      if (_serverSocket.accept(socket)) {        if (port.isClosed()) {          socket.close();          return false;        } else         if (isThrottle()) {          socket.close();        } else {          return true;        }      }    }  } catch (  Throwable e) {    if (port.isActive() && log.isLoggable(Level.FINER)) {      log.log(Level.FINER,e.toString(),e);    }  }  return false;}  }
class C{  public float bearingTo(Location dest){synchronized (mResults) {    if (mLatitude != mLat1 || mLongitude != mLon1 || dest.mLatitude != mLat2 || dest.mLongitude != mLon2) {      computeDistanceAndBearing(mLatitude,mLongitude,dest.mLatitude,dest.mLongitude,mResults);      mLat1=mLatitude;      mLon1=mLongitude;      mLat2=dest.mLatitude;      mLon2=dest.mLongitude;      mDistance=mResults[0];      mInitialBearing=mResults[1];    }    return mInitialBearing;  }}  }
class C{  KrbApReq(APOptions apOptions,Ticket ticket,EncryptionKey key,PrincipalName cname,Checksum cksum,KerberosTime ctime,EncryptionKey subKey,SeqNumber seqNumber,AuthorizationData authorizationData) throws Asn1Exception, IOException, KdcErrException, KrbCryptoException {  init(apOptions,ticket,key,cname,cksum,ctime,subKey,seqNumber,authorizationData,KeyUsage.KU_PA_TGS_REQ_AUTHENTICATOR);}  }
class C{  public boolean isContaining(String include){  if (value == null) {    return false;  }  if (splits == null) {    splits=StringUtil.splitc(value,' ');  }  for (  String s : splits) {    if (s.equals(include)) {      return true;    }  }  return false;}  }
class C{  public boolean add(AbstractPlugin plugin){  return plugins.add(plugin);}  }
class C{  public void dynamicDisplay(int col){  if (!gridTab.isOpen()) {    return;  }  if (col > 0)   return;  boolean noData=gridTab.getRowCount() == 0;  List<WEditor> list=renderer.getEditors();  for (  WEditor comp : list) {    GridField mField=comp.getGridField();    if (mField != null && mField.getIncluded_Tab_ID() <= 0) {      if (noData) {        comp.setReadWrite(false);      } else {        boolean rw=mField.isEditable(true);        comp.setReadWrite(rw);        comp.dynamicDisplay();      }    }  }}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws org.xml.sax.SAXException {  if (qName.equals(PrintData.XML_TAG)) {    String name=attributes.getValue(PrintData.XML_ATTRIBUTE_NAME);    if (m_pd == null) {      m_pd=new PrintData(m_ctx,name);      push(m_pd);    } else {      PrintData temp=new PrintData(m_ctx,name);      m_curPD.addNode(temp);      push(temp);    }  } else   if (qName.equals(PrintData.XML_ROW_TAG)) {    m_curPD.addRow(false,0);  } else   if (qName.equals(PrintDataElement.XML_TAG)) {    m_curPDEname=attributes.getValue(PrintDataElement.XML_ATTRIBUTE_NAME);    m_curPDEvalue=new StringBuffer();  }}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public final double radian(Coords d){  final IdealHex src=IdealHex.get(this);  final IdealHex dst=IdealHex.get(d);  if (src.cy == dst.cy) {    return (src.cx < dst.cx) ? Math.PI / 2 : Math.PI * 1.5;  }  double r=Math.atan((dst.cx - src.cx) / (src.cy - dst.cy));  if (src.cy < dst.cy) {    r=(r + Math.PI) % (Math.PI * 2);  }  if (r < 0) {    r+=Math.PI * 2;  }  return r;}  }
class C{  public void testInit(){  System.out.println("init");  mockInitialisationCalls(true,AuditStatus.CONTENT_LOADING);  getInstance();  setVerifyMode();}  }
class C{  protected void addToChildren(ZipEntry parent,ZipEntry child){  List childList=(List)children.get(parent);  if (childList == null) {    childList=new ArrayList();    children.put(parent,childList);  }  childList.add(child);}  }
class C{  @Override public boolean addAll(Collection<? extends E> c){  Iterator<? extends E> i=c.iterator();  boolean changed=false;  while (i.hasNext()) {    boolean ret=add(i.next());    if (!changed) {      changed=ret;    }  }  return changed;}  }
class C{  protected void addAdditionalActionItems(){  getColumnControlPopup().addAdditionalActionItems(Collections.unmodifiableList(getAdditionalActions()));}  }
class C{  @Override public boolean add(Object element){  if (isFull()) {    remove();  }  return super.add(element);}  }
class C{  public static boolean isPrimitiveDatatype(IRI datatype){  return datatype.equals(XMLSchema.DURATION) || datatype.equals(XMLSchema.DATETIME) || datatype.equals(XMLSchema.TIME)|| datatype.equals(XMLSchema.DATE)|| datatype.equals(XMLSchema.GYEARMONTH)|| datatype.equals(XMLSchema.GYEAR)|| datatype.equals(XMLSchema.GMONTHDAY)|| datatype.equals(XMLSchema.GDAY)|| datatype.equals(XMLSchema.GMONTH)|| datatype.equals(XMLSchema.STRING)|| datatype.equals(XMLSchema.BOOLEAN)|| datatype.equals(XMLSchema.BASE64BINARY)|| datatype.equals(XMLSchema.HEXBINARY)|| datatype.equals(XMLSchema.FLOAT)|| datatype.equals(XMLSchema.DECIMAL)|| datatype.equals(XMLSchema.DOUBLE)|| datatype.equals(XMLSchema.ANYURI)|| datatype.equals(XMLSchema.QNAME)|| datatype.equals(XMLSchema.NOTATION);}  }
class C{  public static IStatus validateJavaTypeName(String name){  return validateJavaTypeName(name,org.eclipse.jdt.core.JavaCore.VERSION_1_3,org.eclipse.jdt.core.JavaCore.VERSION_1_3);}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public final void value(int i,double v){  data[i]=v;}  }
class C{  public boolean equals(Object o){  if (o == null || !(o instanceof ZipLong)) {    return false;  }  return value == ((ZipLong)o).getValue();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean areSame(Collection<? extends AnnotationMirror> c1,Collection<? extends AnnotationMirror> c2){  if (c1.size() != c2.size()) {    return false;  }  if (c1.size() == 1) {    return areSame(c1.iterator().next(),c2.iterator().next());  }  Set<AnnotationMirror> s1=createAnnotationSet();  Set<AnnotationMirror> s2=createAnnotationSet();  s1.addAll(c1);  s2.addAll(c2);  Iterator<AnnotationMirror> iter1=s1.iterator();  Iterator<AnnotationMirror> iter2=s2.iterator();  while (iter1.hasNext()) {    AnnotationMirror anno1=iter1.next();    AnnotationMirror anno2=iter2.next();    if (!areSame(anno1,anno2)) {      return false;    }  }  return true;}  }
class C{  public static int writeBEInt(byte[] b,int off,int val){  b[off + 0]=(byte)((val >> 24) & 0xff);  b[off + 1]=(byte)((val >> 16) & 0xff);  b[off + 2]=(byte)((val >> 8) & 0xff);  b[off + 3]=(byte)((val) & 0xff);  return 4;}  }
class C{  public PlatformServices withAsync(){  if (services.isAsync())   return this;  return new PlatformServices(platformCtx,services.withAsync(),srvKeepBinary);}  }
class C{  public void insert(int offset,float[] values,int valOffset,int len){  if (offset == _pos) {    add(values,valOffset,len);    return;  }  ensureCapacity(_pos + len);  System.arraycopy(_data,offset,_data,offset + len,_pos - offset);  System.arraycopy(values,valOffset,_data,offset,len);  _pos+=len;}  }
class C{  public static final byte composeSmeManualAckRequested(byte registeredDelivery){  return composeSmeAck(registeredDelivery,SMPPConstant.REGDEL_SME_MANUAL_ACK_REQUESTED);}  }
class C{  public void addValue(IFitsHeader key,double val) throws HeaderCardException {  addValue(key.key(),val,key.comment());}  }
class C{  private boolean parseHtmlInline(){  String m=match(HTML_TAG);  if (m != null) {    HtmlInline node=new HtmlInline();    node.setLiteral(m);    appendNode(node);    return true;  } else {    return false;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.DEPRECATABLE_ELEMENT__DEPRECATED:    setDeprecated(DEPRECATED_EDEFAULT);  return;case SGenPackage.DEPRECATABLE_ELEMENT__COMMENT:setComment(COMMENT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static void init(String propsFilename) throws Exception {  RuntimeSingleton.init(propsFilename);}  }
class C{  public int updateJobDetail(Connection conn,JobDetail job) throws IOException, SQLException {  ByteArrayOutputStream baos=serializeJobData(job.getJobDataMap());  PreparedStatement ps=null;  int insertResult=0;  try {    ps=conn.prepareStatement(rtp(UPDATE_JOB_DETAIL));    ps.setString(1,job.getDescription());    ps.setString(2,job.getJobClass().getName());    setBoolean(ps,3,job.isDurable());    setBoolean(ps,4,job.isConcurrentExectionDisallowed());    setBoolean(ps,5,job.isPersistJobDataAfterExecution());    setBoolean(ps,6,job.requestsRecovery());    setBytes(ps,7,baos);    ps.setString(8,job.getKey().getName());    ps.setString(9,job.getKey().getGroup());    insertResult=ps.executeUpdate();  }  finally {    closeStatement(ps);  }  return insertResult;}  }
class C{  private boolean pointInCurrentPolygon(final Point p){  if (m_current == null) {    return false;  }  for (  final Polygon item : m_current) {    if (item.contains(p)) {      return true;    }  }  return false;}  }
class C{  public Observable<RxCameraData> oneShotRequest(){  return new TakeOneShotRequest(rxCamera).get();}  }
class C{  protected void addOffHeapNotificationListener(){  ManagementService service=ManagementService.getExistingManagementService(getCache());  assertNotNull(service);  assertTrue(service.isManager());  MemberMXBean memberBean=service.getMemberMXBean();  assertNotNull(memberBean);  assertTrue(memberBean instanceof MemberMBean);  ((MemberMBean)memberBean).addNotificationListener(notificationListener,null,null);}  }
class C{  public boolean isSupported(DurationFieldType type){  return getPeriodType().isSupported(type);}  }
class C{  public static String shortToHex(final short src,final int srcPos,final String dstInit,final int dstPos,final int nHexs){  if (0 == nHexs) {    return dstInit;  }  if ((nHexs - 1) * 4 + srcPos >= 16) {    throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 16");  }  final StringBuilder sb=new StringBuilder(dstInit);  int shift=0;  int append=sb.length();  for (int i=0; i < nHexs; i++) {    shift=i * 4 + srcPos;    final int bits=0xF & (src >> shift);    if (dstPos + i == append) {      ++append;      sb.append(intToHexDigit(bits));    } else {      sb.setCharAt(dstPos + i,intToHexDigit(bits));    }  }  return sb.toString();}  }
class C{  private void updateHoverEntry(Point p){  long hoverEntryBefore=hoverEntry;  hoverEntry=findHoverEntry(p);  if (hoverEntry != hoverEntryBefore) {    repaint();    if (listener != null) {      if (hoverEntry == -1) {        listener.noItemSelected();      } else {        StreamInfoHistoryItem item=history.get(hoverEntry);        if (item == null) {          LOGGER.warning("Hovered Entry " + hoverEntry + " was null");          hoverEntry=-1;        } else {          listener.itemSelected(item.getViewers(),item.getTitle(),item.getGame());        }      }    }  }}  }
class C{  private PostgreSQLTracesLoader(){}  }
class C{  public int size(){  return this.parameters.size();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void drawCubic(Canvas c,LineDataSet dataSet,List<Entry> entries){  Transformer trans=mChart.getTransformer(dataSet.getAxisDependency());  Entry entryFrom=dataSet.getEntryForXIndex(mMinX);  Entry entryTo=dataSet.getEntryForXIndex(mMaxX);  int minx=dataSet.getEntryPosition(entryFrom);  int maxx=Math.min(dataSet.getEntryPosition(entryTo) + 1,entries.size());  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  float intensity=dataSet.getCubicIntensity();  cubicPath.reset();  int size=(int)Math.ceil((maxx - minx) * phaseX + minx);  minx=Math.max(minx - 2,0);  size=Math.min(size + 2,entries.size());  if (size - minx >= 2) {    float prevDx=0f;    float prevDy=0f;    float curDx=0f;    float curDy=0f;    Entry cur=entries.get(minx);    Entry next=entries.get(minx + 1);    Entry prev=entries.get(minx);    Entry prevPrev=entries.get(minx);    cubicPath.moveTo(cur.getXIndex(),cur.getVal() * phaseY);    prevDx=(next.getXIndex() - cur.getXIndex()) * intensity;    prevDy=(next.getVal() - cur.getVal()) * intensity;    cur=entries.get(minx + 1);    next=entries.get(minx + (size - minx > 2 ? 2 : 1));    curDx=(next.getXIndex() - prev.getXIndex()) * intensity;    curDy=(next.getVal() - prev.getVal()) * intensity;    cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);    for (int j=minx + 2; j < size - 1; j++) {      prevPrev=entries.get(j - 2);      prev=entries.get(j - 1);      cur=entries.get(j);      next=entries.get(j + 1);      prevDx=(cur.getXIndex() - prevPrev.getXIndex()) * intensity;      prevDy=(cur.getVal() - prevPrev.getVal()) * intensity;      curDx=(next.getXIndex() - prev.getXIndex()) * intensity;      curDy=(next.getVal() - prev.getVal()) * intensity;      cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);    }    if (size > entries.size() - 1) {      cur=entries.get(entries.size() - 1);      prev=entries.get(entries.size() - 2);      prevPrev=entries.get((entries.size() >= 3) ? entries.size() - 3 : entries.size() - 2);      next=cur;      prevDx=(cur.getXIndex() - prevPrev.getXIndex()) * intensity;      prevDy=(cur.getVal() - prevPrev.getVal()) * intensity;      curDx=(next.getXIndex() - prev.getXIndex()) * intensity;      curDy=(next.getVal() - prev.getVal()) * intensity;      cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);    }  }  if (dataSet.isDrawFilledEnabled()) {    cubicFillPath.reset();    cubicFillPath.addPath(cubicPath);    drawCubicFill(mBitmapCanvas,dataSet,cubicFillPath,trans,entryFrom.getXIndex(),entryFrom.getXIndex() + size);  }  mRenderPaint.setColor(dataSet.getColor());  mRenderPaint.setStyle(Paint.Style.STROKE);  trans.pathValueToPixel(cubicPath);  mBitmapCanvas.drawPath(cubicPath,mRenderPaint);  mRenderPaint.setPathEffect(null);}  }
class C{  public boolean hasComments(){  return super.hasElement(Comments.KEY);}  }
class C{  public boolean eatOptionalNewlines(int maxNewlines){  return eatOptionalNewlines(maxNewlines,false);}  }
class C{  public boolean isEmpty(){  return mostRecentEvents.isEmpty();}  }
class C{  public static Map<String,Object> productImportFromSpreadsheet(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  String path=System.getProperty("user.dir") + "/spreadsheet";  List<File> fileItems=FastList.newInstance();  if (UtilValidate.isNotEmpty(path)) {    File importDir=new File(path);    if (importDir.isDirectory() && importDir.canRead()) {      File[] files=importDir.listFiles();      for (int i=0; i < files.length; i++) {        if (files[i].getName().toUpperCase().endsWith("XLS")) {          fileItems.add(files[i]);        }      }    } else {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductImportDirectoryNotFound",locale));    }  } else {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductImportPathNotSpecified",locale));  }  if (fileItems.size() < 1) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductImportPathNoSpreadsheetExists",locale) + path);  }  for (  File item : fileItems) {    List<Map<String,Object>> products=FastList.newInstance();    List<Map<String,Object>> inventoryItems=FastList.newInstance();    POIFSFileSystem fs=null;    HSSFWorkbook wb=null;    try {      fs=new POIFSFileSystem(new FileInputStream(item));      wb=new HSSFWorkbook(fs);    } catch (    IOException e) {      Debug.logError("Unable to read or create workbook from file",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductImportCannotCreateWorkbookFromFile",locale));    }    HSSFSheet sheet=wb.getSheetAt(0);    int sheetLastRowNumber=sheet.getLastRowNum();    for (int j=1; j <= sheetLastRowNumber; j++) {      HSSFRow row=sheet.getRow(j);      if (row != null) {        HSSFCell cell2=row.getCell(2);        cell2.setCellType(HSSFCell.CELL_TYPE_STRING);        String productId=cell2.getRichStringCellValue().toString();        HSSFCell cell5=row.getCell(5);        BigDecimal quantityOnHand=BigDecimal.ZERO;        if (cell5 != null && cell5.getCellType() == HSSFCell.CELL_TYPE_NUMERIC)         quantityOnHand=new BigDecimal(cell5.getNumericCellValue());        boolean productExists=ImportProductHelper.checkProductExists(productId,delegator);        if (productId != null && !productId.trim().equalsIgnoreCase("") && !productExists) {          products.add(ImportProductHelper.prepareProduct(productId));          if (quantityOnHand.compareTo(BigDecimal.ZERO) >= 0)           inventoryItems.add(ImportProductHelper.prepareInventoryItem(productId,quantityOnHand,delegator.getNextSeqId("InventoryItem"))); else           inventoryItems.add(ImportProductHelper.prepareInventoryItem(productId,BigDecimal.ZERO,delegator.getNextSeqId("InventoryItem")));        }        int rowNum=row.getRowNum() + 1;        if (row.toString() != null && !row.toString().trim().equalsIgnoreCase("") && productExists) {          Debug.logWarning("Row number " + rowNum + " not imported from "+ item.getName(),module);        }      }    }    for (int j=0; j < products.size(); j++) {      GenericValue productGV=delegator.makeValue("Product",products.get(j));      GenericValue inventoryItemGV=delegator.makeValue("InventoryItem",inventoryItems.get(j));      if (!ImportProductHelper.checkProductExists(productGV.getString("productId"),delegator)) {        try {          delegator.create(productGV);          delegator.create(inventoryItemGV);        } catch (        GenericEntityException e) {          Debug.logError("Cannot store product",module);          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductImportCannotStoreProduct",locale));        }      }    }    int uploadedProducts=products.size() + 1;    if (products.size() > 0)     Debug.logInfo("Uploaded " + uploadedProducts + " products from file "+ item.getName(),module);  }  return ServiceUtil.returnSuccess();}  }
class C{  public void init(){  int len=Constants.FILE_BLOCK_SIZE;  byte[] salt;  byte[] magic=HEADER.getBytes(Constants.UTF8);  if (length() < HEADER_LENGTH) {    checkedWriting=false;    writeDirect(magic,0,len);    salt=generateSalt();    writeDirect(salt,0,len);    initKey(salt);    write(magic,0,len);    checkedWriting=true;  } else {    seek(0);    byte[] buff=new byte[len];    readFullyDirect(buff,0,len);    if (!Arrays.equals(buff,magic)) {      throw DbException.get(ErrorCode.FILE_VERSION_ERROR_1,name);    }    salt=new byte[len];    readFullyDirect(salt,0,len);    initKey(salt);    readFully(buff,0,Constants.FILE_BLOCK_SIZE);    if (!Arrays.equals(buff,magic)) {      throw DbException.get(ErrorCode.FILE_ENCRYPTION_ERROR_1,name);    }  }}  }
class C{  @Override public void start(){  paused=false;  GUIFrame gui=system.getModule(GUIFrame.class);  if (gui == null) {    throw new RuntimeException("Nuance connection requires access to the GUI");  }  ttsCache=new HashMap<String,SpeechData>();}  }
class C{  @Override public int addSorted(E element,Comparator<? super E> cmp){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public void clear(){  headers.clear();}  }
class C{  public final String toString(){  return TextIO.moveToUCIString(this);}  }
class C{  public void delete() throws IOException {  close();  Utils.deleteContents(directory);}  }
class C{  public void onError(CqEvent aCqEvent){  if (true) {    throw new IllegalStateException(LocalizedStrings.CqListenerImpl_NOT_YET_SUPPORTED.toLocalizedString());  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected int engineDoFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws IllegalBlockSizeException, ShortBufferException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  private void checkRunning() throws AdminException {  if (this.isRunning()) {    throw new AdminException(LocalizedStrings.SystemMemberBridgeServerImpl_CANNOT_CHANGE_THE_CONFIGURATION_OF_A_RUNNING_BRIDGE_SERVER.toLocalizedString());  }}  }
class C{  public T caseTypeProvidingElement(TypeProvidingElement object){  return null;}  }
class C{  public CAbstractOrExpression(final List<IAbstractNode> children){  m_children=new ArrayList<IAbstractNode>(children);}  }
class C{  private Query makeXDL(boolean crossedDateLine){  return new TermQuery(new Term(field_xdl,crossedDateLine ? "T" : "F"));}  }
class C{  protected void paintTabBorder(Graphics g,int tabPlacement,int tabIndex,int x,int y,int w,int h,boolean isSelected){  g.setColor(lightHighlight);switch (tabPlacement) {case LEFT:    g.drawLine(x + 1,y + h - 2,x + 1,y + h - 2);  g.drawLine(x,y + 2,x,y + h - 3);g.drawLine(x + 1,y + 1,x + 1,y + 1);g.drawLine(x + 2,y,x + w - 1,y);g.setColor(shadow);g.drawLine(x + 2,y + h - 2,x + w - 1,y + h - 2);g.setColor(darkShadow);g.drawLine(x + 2,y + h - 1,x + w - 1,y + h - 1);break;case RIGHT:g.drawLine(x,y,x + w - 3,y);g.setColor(shadow);g.drawLine(x,y + h - 2,x + w - 3,y + h - 2);g.drawLine(x + w - 2,y + 2,x + w - 2,y + h - 3);g.setColor(darkShadow);g.drawLine(x + w - 2,y + 1,x + w - 2,y + 1);g.drawLine(x + w - 2,y + h - 2,x + w - 2,y + h - 2);g.drawLine(x + w - 1,y + 2,x + w - 1,y + h - 3);g.drawLine(x,y + h - 1,x + w - 3,y + h - 1);break;case BOTTOM:g.drawLine(x,y,x,y + h - 3);g.drawLine(x + 1,y + h - 2,x + 1,y + h - 2);g.setColor(shadow);g.drawLine(x + 2,y + h - 2,x + w - 3,y + h - 2);g.drawLine(x + w - 2,y,x + w - 2,y + h - 3);g.setColor(darkShadow);g.drawLine(x + 2,y + h - 1,x + w - 3,y + h - 1);g.drawLine(x + w - 2,y + h - 2,x + w - 2,y + h - 2);g.drawLine(x + w - 1,y,x + w - 1,y + h - 3);break;case TOP:default :g.drawLine(x,y + 2,x,y + h - 1);g.drawLine(x + 1,y + 1,x + 1,y + 1);g.drawLine(x + 2,y,x + w - 3,y);g.setColor(shadow);g.drawLine(x + w - 2,y + 2,x + w - 2,y + h - 1);g.setColor(darkShadow);g.drawLine(x + w - 1,y + 2,x + w - 1,y + h - 1);g.drawLine(x + w - 2,y + 1,x + w - 2,y + 1);}}  }
class C{  public void internalFrameClosing(InternalFrameEvent e){}  }
class C{  public static void sendPatchToEnumerationTask(StatelessService service,URI taskLink){  sendPatchToEnumerationTask(service,taskLink,null);}  }
class C{  private Object extractIdToFieldObject(T data) throws SQLException {  return idField.extractJavaFieldToSqlArgValue(data);}  }
class C{  public Assignment(String var,double val){  this();  map.put(var,ValueFactory.create(val));}  }
class C{  public SortArrowIcon(boolean ascending,String colorKey){  this.ascending=ascending;  this.colorKey=colorKey;  if (colorKey == null) {    throw new IllegalArgumentException();  }}  }
class C{  public DoubleMatrix jblas_solveSymmetric(double[][] B){  return org.jblas.Solve.solveSymmetric(new DoubleMatrix(this.getArray()),new DoubleMatrix(B));}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public static String reverseUrl(URL url){  String host=url.getHost();  String file=url.getFile();  String protocol=url.getProtocol();  int port=url.getPort();  StringBuilder buf=new StringBuilder();  reverseAppendSplits(host,buf);  buf.append(':');  buf.append(protocol);  if (port != -1) {    buf.append(':');    buf.append(port);  }  if (file.length() > 0 && '/' != file.charAt(0)) {    buf.append('/');  }  buf.append(file);  return buf.toString();}  }
class C{  public void analyseCode(CompilationUnitScope unitScope){  if (this.ignoreFurtherInvestigation)   return;  try {    internalAnalyseCode(null,FlowInfo.initial(this.maxFieldCount));  } catch (  AbortType e) {    this.ignoreFurtherInvestigation=true;  }}  }
class C{  public CellEntry(Cell cell){  this();  if (cell != null) {    setExtension(cell);  }}  }
class C{  public void addRtpStreamListener(RtpStreamListener rtpStreamListener){  this.rtpStreamListener=rtpStreamListener;}  }
class C{  protected double reportReturn(String methodCall,double value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(TaskQueueSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from " + "https://code.google.com/apis/console/?api=taskqueue into " + "taskqueue-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,Collections.singleton(TaskqueueScopes.TASKQUEUE)).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  private Object readResolve(){  if (getDescriptor().getFieldNames().length == 0) {    OpenType<Object> xopenType=cast(openType);    Set<Object> xlegalValues=cast(legalValues);    Comparable<Object> xminValue=cast(minValue);    Comparable<Object> xmaxValue=cast(maxValue);    return new OpenMBeanAttributeInfoSupport(name,description,openType,isReadable(),isWritable(),isIs(),makeDescriptor(xopenType,defaultValue,xlegalValues,xminValue,xmaxValue));  } else   return this;}  }
class C{  private UploadSingleCredentialExtensionResponse extendUploadSingleCredentials(BusinessObjectData businessObjectData){  return uploadDownloadRestController.extendUploadSingleCredentials(businessObjectData.getNamespace(),businessObjectData.getBusinessObjectDefinitionName(),businessObjectData.getBusinessObjectFormatUsage(),businessObjectData.getBusinessObjectFormatFileType(),businessObjectData.getBusinessObjectFormatVersion(),businessObjectData.getPartitionValue(),businessObjectData.getVersion());}  }
class C{  private Reader createReader(InputStream inputStream,String encoding,Boolean isBigEndian) throws IOException, JasperException {  if (encoding == null) {    encoding="UTF-8";  }  String ENCODING=encoding.toUpperCase(Locale.ENGLISH);  if (ENCODING.equals("UTF-8")) {    return new UTF8Reader(inputStream,fBufferSize);  }  if (ENCODING.equals("US-ASCII")) {    return new ASCIIReader(inputStream,fBufferSize);  }  if (ENCODING.equals("ISO-10646-UCS-4")) {    if (isBigEndian != null) {      boolean isBE=isBigEndian.booleanValue();      if (isBE) {        return new UCSReader(inputStream,UCSReader.UCS4BE);      } else {        return new UCSReader(inputStream,UCSReader.UCS4LE);      }    } else {      err.jspError("jsp.error.xml.encodingByteOrderUnsupported",encoding);    }  }  if (ENCODING.equals("ISO-10646-UCS-2")) {    if (isBigEndian != null) {      boolean isBE=isBigEndian.booleanValue();      if (isBE) {        return new UCSReader(inputStream,UCSReader.UCS2BE);      } else {        return new UCSReader(inputStream,UCSReader.UCS2LE);      }    } else {      err.jspError("jsp.error.xml.encodingByteOrderUnsupported",encoding);    }  }  boolean validIANA=XMLChar.isValidIANAEncoding(encoding);  boolean validJava=XMLChar.isValidJavaEncoding(encoding);  if (!validIANA || (fAllowJavaEncodings && !validJava)) {    err.jspError("jsp.error.xml.encodingDeclInvalid",encoding);    encoding="ISO-8859-1";  }  String javaEncoding=EncodingMap.getIANA2JavaMapping(ENCODING);  if (javaEncoding == null) {    if (fAllowJavaEncodings) {      javaEncoding=encoding;    } else {      err.jspError("jsp.error.xml.encodingDeclInvalid",encoding);      javaEncoding="ISO8859_1";    }  }  return new InputStreamReader(inputStream,javaEncoding);}  }
class C{  public void test_smallSlotWasteRecylcing(){  final Journal store=(Journal)getSmallSlotStore(1024,10,20.0f);  try {    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    final int cSlotSize=128;    final int cAllocSize=99;    int breaks=0;    int contiguous=0;    ArrayList<Integer> recycle=new ArrayList<Integer>();    long pap=rw.physicalAddress(rw.alloc(cAllocSize,null));    for (int i=0; i < 500000; i++) {      final int a=rw.alloc(cSlotSize,null);      final long pa=rw.physicalAddress(a);      if (r.nextInt(7) < 3) {        recycle.add(a);      }      if (pa == (pap + cSlotSize)) {        contiguous++;      } else {        breaks++;      }      if ((i + 1) % 20000 == 0) {        store.commit();      }      pap=pa;      if (recycle.size() > 5000) {        log.warn("Transient Frees for immediate recyling");        for (        int e : recycle) {          rw.free(e,cAllocSize);        }        recycle.clear();      }    }    store.commit();    final StringBuilder sb=new StringBuilder();    rw.showAllocators(sb);    log.warn("Contiguous: " + contiguous + ", breaks: "+ breaks+ "\n"+ sb.toString());  }  finally {    store.destroy();  }}  }
class C{  private int medianXValue(Object[] connectedCells,int rankValue){  if (connectedCells.length == 0) {    return 0;  }  int[] medianValues=new int[connectedCells.length];  for (int i=0; i < connectedCells.length; i++) {    medianValues[i]=((mxGraphAbstractHierarchyCell)connectedCells[i]).getGeneralPurposeVariable(rankValue);  }  Arrays.sort(medianValues);  if (connectedCells.length % 2 == 1) {    return medianValues[connectedCells.length / 2];  } else {    int medianPoint=connectedCells.length / 2;    int leftMedian=medianValues[medianPoint - 1];    int rightMedian=medianValues[medianPoint];    return ((leftMedian + rightMedian) / 2);  }}  }
class C{  public static int compareBoolean(int a,int b){  if ((a > 0 && b > 0) || (a <= 0 && b <= 0))   return Math.abs(a - b); else   return -1 * Math.abs(a - b);}  }
class C{  public void clear(){  new ByteArrayList(this.state).fillFromToWith(0,this.state.length - 1,FREE);  this.distinct=0;  this.freeEntries=table.length;  trimToSize();}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction invisible=new RPAction();  invisible.put("type","invisible");  ClientSingletonRepository.getClientFramework().send(invisible);  return true;}  }
class C{  private boolean conjIsDecomposable(OpApplNode node){  ExprOrOpArgNode[] conjuncts=node.getArgs();  for (int i=0; i < conjuncts.length; i++) {    if (conjuncts[i] instanceof OpApplNode) {      OpApplNode curNode=(OpApplNode)conjuncts[i];      if ((curNode.getOperator().getKind() == ASTConstants.UserDefinedOpKind) && ((OpDefNode)curNode.getOperator()).getBody() instanceof OpApplNode) {        curNode=(OpApplNode)((OpDefNode)curNode.getOperator()).getBody();      }      if (curNode.getOperator() instanceof OpDefNode) {        UniqueString opId=((OpDefNode)curNode.getOperator()).getName();        String opName=opId.toString();        if (((!this.state.splitChosen()) && ((opId == ASTConstants.OP_dl) || opName.equals("\\lor") || (opId == ASTConstants.OP_sa))) || (opId == ASTConstants.OP_be) || (opId == ASTConstants.OP_ue)|| (((opId == ASTConstants.OP_cl) || opName.equals("\\land")) && conjIsDecomposable(curNode))) {          return true;        }      }    }  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static long computeHash(long k0,long k1,DirectoryFindRequest request){  return computeHash(k0,k1,request.getTimestamp(),request.getClassSelector(),request.getLabelsSelectors());}  }
class C{  public static ConstantNode forInt(int i){  return createPrimitive(JavaConstant.forInt(i));}  }
class C{  private void parseServiceProviderExt(Node node){  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (childnode.getNodeName().equals("characteristic")) {        if (childnode.getAttributes().getLength() > 0) {          Node typenode=childnode.getAttributes().getNamedItem("type");          if (typenode != null) {            if (typenode.getNodeValue().equalsIgnoreCase("joyn")) {              parseRcs(childnode);            }          }        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case VALUES:  return isSetValues();case ERROR:return isSetError();}throw new IllegalStateException();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static <K extends Comparable<?>,V>Builder<K,V> reverseOrder(){  return new Builder<K,V>(Ordering.natural().reverse());}  }
class C{  @Override public void onDetailLoadFailure(){  Snackbar.make(mRootView,R.string.unknown_error,Snackbar.LENGTH_SHORT).show();}  }
class C{  public static String encodeString(String src){  return encode(src);}  }
class C{  public Builder permitDiskWrites(){  return disable(DETECT_DISK_WRITE);}  }
class C{  public static boolean waitToSeeLive(ZkStateReader zkStateReader,String collection,String coreNodeName,String baseUrl,int timeoutInMs){  long timeout=System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutInMs,TimeUnit.MILLISECONDS);  while (System.nanoTime() < timeout) {    log.debug("waiting to see replica just created live collection={} replica={} baseUrl={}",collection,coreNodeName,baseUrl);    ClusterState clusterState=zkStateReader.getClusterState();    if (clusterState != null) {      DocCollection docCollection=clusterState.getCollection(collection);      Collection<Slice> slices=docCollection.getSlices();      for (      Slice slice : slices) {        if (slice.getState().equals(Slice.ACTIVE)) {          Collection<Replica> replicas=slice.getReplicas();          for (          Replica replica : replicas) {            boolean live=clusterState.liveNodesContain(replica.getNodeName());            String rcoreNodeName=replica.getName();            String rbaseUrl=replica.getStr(ZkStateReader.BASE_URL_PROP);            if (live && coreNodeName.equals(rcoreNodeName) && baseUrl.equals(rbaseUrl)) {              return true;            }          }        }      }      try {        Thread.sleep(TIMEOUT_POLL_MS);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        throw new SolrException(ErrorCode.SERVER_ERROR,"Interrupted");      }    }  }  log.error("Timed out waiting to see replica just created in cluster state. Continuing...");  return false;}  }
class C{  public void test_agg11() throws MalformedQueryException {  final String query="PREFIX : <http://www.example.org/>\n" + "SELECT ((?O1 + ?O2) AS ?O12) (COUNT(?O1) AS ?C)\n" + "WHERE { ?S :p ?O1; :q ?O2 } GROUP BY (?S)";  negativeTest(query);}  }
class C{  void handleConnect(MqttConnectMessage connect,ChannelHandlerContext ctx) throws Exception {  this.ctx=ctx;  connectionEntry.ttl=connect.variableHeader().keepAliveTimeSeconds() * 1500;  String clientId=connect.payload().clientIdentifier();  session.getConnectionManager().connect(clientId,connect.payload().userName(),connect.payload().password(),connect.variableHeader().isWillFlag(),connect.payload().willMessage(),connect.payload().willTopic(),connect.variableHeader().isWillRetain(),connect.variableHeader().willQos(),connect.variableHeader().isCleanSession());}  }
class C{  public static String replaceCharacters(final ConversionMethod conversionMethod,final String input,final int fromCharacter,final int toCharacter,final String wrap){  String convertedText=input;  for (int i=fromCharacter; i <= toCharacter; i++) {    final String characterToReplace=new String(Character.toChars(i));    if (wrap != null) {      convertedText=convertedText.replace(characterToReplace,wrap + convertText(conversionMethod,characterToReplace) + wrap);    } else {      convertedText=convertedText.replace(characterToReplace,convertText(conversionMethod,characterToReplace));    }  }  return convertedText;}  }
class C{  public boolean isSetAuthScheme(){  return this.authScheme != null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Hashtable<String,String> parseHashtableConfig(final String config){  Hashtable<String,String> hashtable=new Hashtable<>();  String[] topElements=config.split(";");  for (  String element : topElements) {    String[] expression=element.split("=");    if (expression.length != 2) {      throw new IllegalArgumentException("Invalid expression " + element + " at "+ config);    }    hashtable.put(expression[0].trim(),expression[1].trim());  }  return hashtable;}  }
class C{  public Value(String key,String description,boolean documented){  this.key=key;  this.description=description;  this.documented=documented;}  }
class C{  protected boolean readSetupData(){  outTest=outputButton.isSelected();  wrapTest=wrapButton.isSelected();  try {    ua=Integer.parseInt(uaAddrField.getText());  } catch (  Exception e) {    statusText1.setText("Error - Bad character in Node(UA) field, please try again.");    statusText1.setVisible(true);    return (false);  }  if ((ua < 0) || (ua > 127)) {    statusText1.setText("Error - Node(UA) is not between 0 and 127, please try again.");    statusText1.setVisible(true);    return (false);  }  node=(SerialNode)_memo.getTrafficController().getNodeFromAddress(ua);  if (node == null) {    statusText1.setText("Error - Unknown address in Node(UA) field, please try again.");    statusText1.setVisible(true);    return (false);  }  int type=node.getNodeType();  isSMINI=(type == SerialNode.SMINI);  isUSIC_SUSIC=(type == SerialNode.USIC_SUSIC);  numOutputCards=node.numOutputCards();  numInputCards=node.numInputCards();  numCards=numOutputCards + numInputCards;  try {    outCardNum=Integer.parseInt(outCardField.getText());  } catch (  Exception e) {    statusText1.setText("Error - Bad character in Out Card field, please try again.");    statusText1.setVisible(true);    return (false);  }  if (isUSIC_SUSIC) {    if ((outCardNum < 0) || (outCardNum >= numCards)) {      statusText1.setText("Error - Out Card is not between 0 and " + Integer.toString(numCards - 1) + ", please try again.");      statusText1.setVisible(true);      return (false);    }    if (!node.isOutputCard(outCardNum)) {      statusText1.setText("Error - Out Card is not an Output Card in your Node definition, " + "please try again.");      statusText1.setVisible(true);      return (false);    }  }  if (isSMINI && ((outCardNum < 0) || (outCardNum > 1))) {    statusText1.setText("Error - Out Card is not 0 or 1, please try again.");    statusText1.setVisible(true);    return (false);  }  if (outTest) {    try {      obsDelay=Integer.parseInt(obsDelayField.getText());    } catch (    Exception e) {      statusText1.setText("Error - Bad character in Observation Delay field, please try again.");      statusText1.setVisible(true);      return (false);    }  }  if (wrapTest) {    try {      inCardNum=Integer.parseInt(inCardField.getText());    } catch (    Exception e) {      statusText1.setText("Error - Bad character in In Card field, please try again.");      statusText1.setVisible(true);      return (false);    }    if (isUSIC_SUSIC) {      if ((inCardNum < 0) || (inCardNum >= numCards)) {        statusText1.setText("Error - In Card is not between 0 and " + Integer.toString(numCards - 1) + ", please try again.");        statusText1.setVisible(true);        return (false);      }      if (!node.isInputCard(inCardNum)) {        statusText1.setText("Error - In Card is not an Input Card in your Node definition, " + "please try again.");        statusText1.setVisible(true);        return (false);      }    }    if (isSMINI && (inCardNum != 2)) {      statusText1.setText("Error - In Card not 2 for SMINI, please try again.");      statusText1.setVisible(true);      return (false);    }    try {      filterDelay=Integer.parseInt(filterDelayField.getText());    } catch (    Exception e) {      statusText1.setText("Error - Bad character in Filtering Delay field, please try again.");      statusText1.setVisible(true);      return (false);    }  }  int portsPerCard=(node.getNumBitsPerCard()) / 8;  begOutByte=(node.getOutputCardIndex(outCardNum)) * portsPerCard;  endOutByte=begOutByte + portsPerCard - 1;  nOutBytes=numOutputCards * portsPerCard;  if (wrapTest) {    begInByte=(node.getInputCardIndex(inCardNum)) * portsPerCard;    endInByte=begInByte + portsPerCard - 1;    nInBytes=numInputCards * portsPerCard;  }  return (true);}  }
class C{  public void format(String name,Action<FormatExtension> closure){  FormatExtension extension=new FormatExtension(name,this);  closure.execute(extension);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_NAME:    return getName();case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_LOCAL_ARGUMENTS_VARIABLE:  return getLocalArgumentsVariable();case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___IS_ASYNC:return isAsync();case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_DEFINED_FUNCTION_OR_ACCESSOR:return getDefinedFunctionOrAccessor();case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:return appliesOnlyToBlockScopedElements();}return super.eInvoke(operationID,arguments);}  }
class C{  public MySqlSpoutConfig(MySqlConfig mysqlConfig,ZkBinLogStateConfig zkBinLogStateConfig,FailureConfig failureConfig,int metricsTimeBucketSizeInSecs,int bufferCapacity){  this.mysqlConfig=mysqlConfig;  this.zkBinLogStateConfig=zkBinLogStateConfig;  this.failureConfig=failureConfig;  this.metricsTimeBucketSizeInSecs=metricsTimeBucketSizeInSecs;  this.bufferCapacity=bufferCapacity;}  }
class C{  @Override public int hashCode(){  return getPath().hashCode();}  }
class C{  public ApproximateUpdater(BayesIm bayesIm,Evidence evidence){  if (bayesIm == null) {    throw new NullPointerException();  }  this.bayesIm=bayesIm;  setEvidence(evidence);}  }
class C{  public TraceType_ createTraceType_(){  TraceType_Impl traceType_=new TraceType_Impl();  return traceType_;}  }
class C{  public Where<T,ID> le(String columnName,Object value) throws SQLException {  addClause(new SimpleComparison(columnName,findColumnFieldType(columnName),value,SimpleComparison.LESS_THAN_EQUAL_TO_OPERATION));  return this;}  }
class C{  private void processOverdueFilterStatus(){  overdueBtnClicked=!overdueBtnClicked;  managementUIState.getTargetTableFilters().setOverdueFilterEnabled(overdueBtnClicked);  if (overdueBtnClicked) {    buttonClicked.addStyleName(BTN_CLICKED);    eventBus.publish(this,TargetFilterEvent.FILTER_BY_STATUS);  } else {    buttonClicked.removeStyleName(BTN_CLICKED);    eventBus.publish(this,TargetFilterEvent.REMOVE_FILTER_BY_STATUS);  }}  }
class C{  public static Operator indexScan_Default(IndexRowType indexType,boolean reverse,IndexKeyRange indexKeyRange){  if (indexKeyRange == null) {    indexKeyRange=IndexKeyRange.unbounded(indexType);  }  return indexScan_Default(indexType,reverse,indexKeyRange,indexType.tableType());}  }
class C{  public void initialize(){  if (isInitialized()) {    return;  }  this.isInitialized=true;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  private void buildIfNeededMap(){  if (map == null) {    map=new HashMap<String,Value>(items.length);    for (    Entry<String,Value> miv : items) {      if (miv == null) {        break;      }      map.put(miv.getKey(),miv.getValue());    }  }}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses conditional independence tests " + "to find a skeleton, finds V-nodes and applies a set of rules to find the directions " + "of the remaining arrows.";}  }
class C{  public long key(){  return _map._set[_index];}  }
class C{  protected CtClass removeCached(String classname){  return (CtClass)classes.remove(classname);}  }
class C{  public static String formatTime(Date date){synchronized (dateFormat) {    return dateFormat.format(date);  }}  }
class C{  public String sqlAD_getSystemColumnsWithoutElement(String vendorName,String catalogName,String schemaName,ArrayList<String> customEntities){  String tableName="AD_Column";  String tableAlias="c";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("ColumnName");  columnNames.add("Name");  columnNames.add("Description");  columnNames.add("Help");  columnNames.add("EntityType");  ArrayList<String> aliasNames=null;  ArrayList<String> conditions=new ArrayList<String>();  String subQuery=sql_select(vendorName,catalogName,schemaName,"AD_Element","e",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList("UPPER(c.ColumnName)=UPPER(e.ColumnName)")),null,false);  conditions.add(new StringBuffer("NOT EXISTS (").append(subQuery).append(")").toString());  StringBuffer entityClause=new StringBuffer();  if (customEntities != null && customEntities.size() > 0) {    for (int i=0; i < customEntities.size(); i++) {      if (i == 0)       entityClause.append("c.entitytype NOT IN ("); else       entityClause.append(", ");      entityClause.append("'").append(customEntities.get(i)).append("'");    }    entityClause.append(")");  }  conditions.add(entityClause.toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,tableAlias,columnNames,aliasNames,conditions,sortColumns,true);}  }
class C{  @Override public int hashCode(){  return 65537 * super.hashCode() + 37 * _host.hashCode() + _port;}  }
class C{  protected void assertTextMessageEqual(String message,TextMessage m1,TextMessage m2) throws JMSException {  assertFalse(message + ": expected {" + m1+ "}, but was {"+ m2+ "}",m1 == null ^ m2 == null);  if (m1 == null) {    return;  }  assertEquals(message,m1.getText(),m2.getText());}  }
class C{  @Deprecated public boolean isDetectMovieMultiDir(){  return detectMovieMultiDir;}  }
class C{  public ByteSendPacket send(byte[] bytes){  return send(bytes,null);}  }
class C{  boolean nodeIsTooSmall(NodeData nodeData){  return nodeData.getSelectedAttributes().length < 2 || SelectionCreator.getArbitraryValue(nodeData.getAllSelectedExamples()).length < MINIMAL_EXAMPLES_FOR_GROWING_PARALLEL;}  }
class C{  public E poll(){  final Node<E> f=first;  return (f == null) ? null : unlinkFirst(f);}  }
class C{  void pointToCellRounded(int x,int y,int[] result){  pointToCellExact(x + (mCellWidth / 2),y + (mCellHeight / 2),result);}  }
class C{  void checkNotClosed(){  if (status == STATUS_CLOSED) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED,"Transaction is closed");  }}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(PolarAxisLocation.NORTH_RIGHT)) {    return PolarAxisLocation.NORTH_RIGHT;  } else   if (this.equals(PolarAxisLocation.NORTH_LEFT)) {    return PolarAxisLocation.NORTH_LEFT;  } else   if (this.equals(PolarAxisLocation.SOUTH_RIGHT)) {    return PolarAxisLocation.SOUTH_RIGHT;  } else   if (this.equals(PolarAxisLocation.SOUTH_LEFT)) {    return PolarAxisLocation.SOUTH_LEFT;  } else   if (this.equals(PolarAxisLocation.EAST_ABOVE)) {    return PolarAxisLocation.EAST_ABOVE;  } else   if (this.equals(PolarAxisLocation.EAST_BELOW)) {    return PolarAxisLocation.EAST_BELOW;  } else   if (this.equals(PolarAxisLocation.WEST_ABOVE)) {    return PolarAxisLocation.WEST_ABOVE;  } else   if (this.equals(PolarAxisLocation.WEST_BELOW)) {    return PolarAxisLocation.WEST_BELOW;  }  return null;}  }
class C{  public void valueChanged(ListSelectionEvent e){  selectionChanged();}  }
class C{  private void prepareUserForRanking(User user){  User updatedUser=userRepository.findOne(user.getId(),0);  if (updatedUser.getImported() == null || !updatedUser.getImported()) {    updatedUser.setImported(true);    updatedUser.setPagerank(null);    updatedUser.setLastPageRank(null);    updatedUser.setCurrentRank(null);    updatedUser.setPreviousRank(null);    userRepository.save(updatedUser,0);  }}  }
class C{  public void testGetHashKey() throws ChessParseError {  Position pos=TextIO.readFEN("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");  long key=0x463b96181691fc9cL;  assertEquals(key,PolyglotBook.getHashKey(pos));  pos=TextIO.readFEN("rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1");  key=0x823c9b50fd114196L;  assertEquals(key,PolyglotBook.getHashKey(pos));  pos=TextIO.readFEN("rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 2");  key=0x0756b94461c50fb0L;  assertEquals(key,PolyglotBook.getHashKey(pos));  pos=TextIO.readFEN("rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2");  key=0x662fafb965db29d4L;  assertEquals(key,PolyglotBook.getHashKey(pos));  pos=TextIO.readFEN("rnbqkbnr/ppp1p1pp/8/3pPp2/8/8/PPPP1PPP/RNBQKBNR w KQkq f6 0 3");  key=0x22a48b5a8e47ff78L;  assertEquals(key,PolyglotBook.getHashKey(pos));  pos=TextIO.readFEN("rnbqkbnr/ppp1p1pp/8/3pPp2/8/8/PPPPKPPP/RNBQ1BNR b kq - 0 3");  key=0x652a607ca3f242c1L;  assertEquals(key,PolyglotBook.getHashKey(pos));  pos=TextIO.readFEN("rnbq1bnr/ppp1pkpp/8/3pPp2/8/8/PPPPKPPP/RNBQ1BNR w - - 0 4");  key=0x00fdd303c946bdd9L;  assertEquals(key,PolyglotBook.getHashKey(pos));  pos=TextIO.readFEN("rnbqkbnr/p1pppppp/8/8/PpP4P/8/1P1PPPP1/RNBQKBNR b KQkq c3 0 3");  key=0x3c8123ea7b067637L;  assertEquals(key,PolyglotBook.getHashKey(pos));  pos=TextIO.readFEN("rnbqkbnr/p1pppppp/8/8/P6P/R1p5/1P1PPPP1/1NBQKBNR b Kkq - 0 4");  key=0x5c3f9b829b279560L;  assertEquals(key,PolyglotBook.getHashKey(pos));}  }
class C{  public ContourPath(ContourAttrib attr,int levelIndex,double[] x,double[] y){  xArr=x;  yArr=y;  this.levelIndex=levelIndex;  attributes=attr;  int np=xArr.length;  if (Math.abs(x[0] - x[np - 1]) < kSmallX && Math.abs(y[0] - y[np - 1]) < kSmallY) {    closed=true;    x[np - 1]=x[0];    y[np - 1]=y[0];  } else   closed=false;}  }
class C{  public WritableRaster createCompatibleWritableRaster(int w,int h){  if (w <= 0 || h <= 0) {    throw new RasterFormatException("negative " + ((w <= 0) ? "width" : "height"));  }  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);  return new ByteInterleavedRaster(sm,new Point(0,0));}  }
class C{  public Strftime(String origFormat,Locale locale){  String convertedFormat=convertDateFormat(origFormat);  simpleDateFormat=new SimpleDateFormat(convertedFormat,locale);}  }
class C{  public int[][] generateDistinctRandomSets(int n,int p,int maxNumSets){  int maxPossibleNumSets=0;  try {    maxPossibleNumSets=MathsUtils.numOfSets(n,p);    if (maxNumSets > maxPossibleNumSets) {      maxNumSets=maxPossibleNumSets;      return generateAllDistinctSets(n,p);    }  } catch (  Exception e) {  }  int[][] sets=new int[maxNumSets][p];  Vector<Integer> availableChoices=new Vector<Integer>();  for (int i=0; i < n; i++) {    availableChoices.add(new Integer(i));  }  Vector<Integer> thisSet=new Vector<Integer>();  Hashtable<Vector<Integer>,Integer> chosenSets=new Hashtable<Vector<Integer>,Integer>();  for (int s=0; s < maxNumSets; s++) {    for (; ; ) {      availableChoices.addAll(thisSet);      thisSet.clear();      for (int q=0; q < p; q++) {        int randIndex=random.nextInt(n - q);        Integer nextSelection=availableChoices.remove(randIndex);        sets[s][q]=nextSelection.intValue();      }      Arrays.sort(sets[s]);      for (int q=0; q < p; q++) {        thisSet.add(new Integer(sets[s][q]));      }      if (chosenSets.get(thisSet) == null) {        chosenSets.put(thisSet,new Integer(0));        break;      }    }  }  return sets;}  }
class C{  private boolean checkPlayServices(){  GoogleApiAvailability apiAvailability=GoogleApiAvailability.getInstance();  int resultCode=apiAvailability.isGooglePlayServicesAvailable(this);  if (resultCode != ConnectionResult.SUCCESS) {    if (apiAvailability.isUserResolvableError(resultCode)) {      apiAvailability.getErrorDialog(this,resultCode,PLAY_SERVICES_RESOLUTION_REQUEST).show();    } else {      Log.i(LOG_TAG,"This device is not supported.");      finish();    }    return false;  }  return true;}  }
class C{  public double mahalanobisDistance(NumberVector vec){  double agg=0.;  for (int i=0; i < mean.length; i++) {    double diff=vec.doubleValue(i) - mean[i];    agg+=diff / variance * diff;  }  return agg;}  }
class C{  private static Map<UUID,AccessInformation> filterUser(Map<UUID,AccessInformation> map,String username){  if (username == null || username.isEmpty()) {    return map;  }  Map<UUID,AccessInformation> res=new HashMap<>();  for (  Entry<UUID,AccessInformation> ent : map.entrySet()) {    String accessuser=ent.getValue().getUsername();    if (accessuser != null && accessuser.equals(username)) {      res.put(ent.getKey(),ent.getValue());    }  }  return res;}  }
class C{  public void removeAllListeners(){  statementListenerSet.removeAllListeners();  statementContext.getStatementResultService().setUpdateListeners(statementListenerSet,false);  if (statementLifecycleSvc != null) {    statementLifecycleSvc.dispatchStatementLifecycleEvent(new StatementLifecycleEvent(this,StatementLifecycleEvent.LifecycleEventType.LISTENER_REMOVE_ALL));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ServerRegionProxy(Region r){  super(calcPool(r));  assert r instanceof LocalRegion;  this.region=(LocalRegion)r;  this.regionName=r.getFullPath();}  }
class C{  private static void reportTimer(){  final Timer timer=registry.timer(APP_PREFIX.tagged("what","incoming-request-time").tagged("endpoint","/v1/get_stuff"));  final Context context=timer.time();  try {    Thread.sleep(100);  } catch (  final InterruptedException e) {    e.printStackTrace();  }  context.stop();}  }
class C{  private void computeSplitValues(){  float latMid=(bb.getLatMin() + bb.getLatMax()) / 2f;  double width=(bb.getLonMax() - bb.getLonMin()) * Math.cos(latMid * Math.PI / 180.0);  double height=bb.getLatMax() - bb.getLatMin();  if (height > width) {    splitAtLat=true;    splitValue=latMid;  } else {    splitAtLat=false;    splitValue=(bb.getLonMin() + bb.getLonMax()) / 2;  }}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public void handleDecode(Result rawResult,Bitmap barcode){  inactivityTimer.onActivity();  lastResult=rawResult;  ResultHandler resultHandler=ResultHandlerFactory.makeResultHandler(this,rawResult);  boolean fromLiveScan=barcode != null;  if (fromLiveScan) {    historyManager.addHistoryItem(rawResult,resultHandler);    beepManager.playBeepSoundAndVibrate();    drawResultPoints(barcode,rawResult);  }switch (source) {case NATIVE_APP_INTENT:case PRODUCT_SEARCH_LINK:    handleDecodeExternally(rawResult,resultHandler,barcode);  break;case ZXING_LINK:if (returnUrlTemplate == null) {  handleDecodeInternally(rawResult,resultHandler,barcode);} else {  handleDecodeExternally(rawResult,resultHandler,barcode);}break;case NONE:SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)) {String message=getResources().getString(fakeR.getId("string","msg_bulk_mode_scanned")) + " (" + rawResult.getText()+ ')';Toast.makeText(this,message,Toast.LENGTH_SHORT).show();restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);} else {handleDecodeInternally(rawResult,resultHandler,barcode);}break;}}  }
class C{  public long readLongZeta(final int k) throws IOException {  if (k < 1)   throw new IllegalArgumentException("The shrinking factor " + k + " is not positive");  if (k == 3) {    int preComp;    if ((fill >= 16 || refill() >= 16) && (preComp=ZETA_3[current >> (fill - 16) & 0xFFFF]) != 0) {      readBits+=preComp >> 16;      fill-=preComp >> 16;      return preComp & 0xFFFF;    }  }  final int h=readUnary();  final long left=1L << h * k;  final long m=readLong(h * k + k - 1);  if (m < left)   return m + left - 1;  return (m << 1) + readBit() - 1;}  }
class C{  public static int hsba(float h,float s,float b,float a){  return setAlpha(Color.HSBtoRGB(h,s,b),(int)(a * 255 + 0.5) & 0xFF);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Element merge(final Element element){  types.addAll(element.types);  possibleValues.addAll(element.possibleValues);  return this;}  }
class C{  public void start(){  log.info("Initializing diagnostics scheduler");  ScheduledExecutorService service=Executors.newScheduledThreadPool(1);  service.scheduleAtFixedRate(this,SERVICE_START_LAG,LAG_BETWEEN_RUNS_ALERTS,TimeUnit.SECONDS);}  }
class C{  private HttpURLConnection doHTTPPostRequest(String location,String clientSessionId,Map<String,String> metadata,String postBody) throws CommunicationException {  OutputStreamWriter writer=null;  try {    URL url=new URL(location);    HttpURLConnection connection=(HttpURLConnection)url.openConnection();    connection.setRequestMethod("POST");    connection.addRequestProperty("Content-Type","application/json");    if (clientSessionId != null) {      connection.addRequestProperty(HTTP_HEADER_SESSION_ID,"GCS v1Client:" + clientSessionId);    }    if (metadata != null) {      connection.addRequestProperty(HTTP_HEADER_METADATA,GcUtil.getBase64EncodedMetadata(metadata));    }    if (Constants.ENABLE_REQUEST_LOGGING) {      logRequest(connection,postBody);    }    connection.setDoOutput(true);    writer=new OutputStreamWriter(connection.getOutputStream(),"UTF-8");    writer.write(postBody);    writer.flush();    if (connection.getResponseCode() != 200) {      throw new CommunicationException("No status 200 received, status is :" + connection.getResponseCode());    }    return connection;  } catch (  MalformedURLException e) {    Log.e(TAG,"doHTTPPostRequest, Unable to parse url " + location);    throw new CommunicationException("Unable to parse url " + location);  }catch (  IOException e) {    Log.e(TAG,"doHTTPPostRequest, IOException while opening connection " + e.getMessage());    throw new CommunicationException("IOException while opening connection " + e.getMessage(),e);  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException e) {        Log.i(TAG,"doHTTPPostRequest, IOException while closing connection " + e.getMessage());      }    }  }}  }
class C{  public static void error(String msg,Throwable ex,boolean popup){  System.err.println(msg);  if (ex != null)   ex.printStackTrace();  if (Options.uiMode == UIMode.GUI) {    MainWindow.log("ERROR: " + msg,true);    if (ex != null) {      if (popup == true)       JOptionPane.showMessageDialog(MainWindow.main,msg + "\n" + ex.getClass().getSimpleName()+ ": "+ ex.getMessage());      final StringWriter sw=new StringWriter();      ex.printStackTrace(new PrintWriter(sw));      MainWindow.log(sw.toString(),true);    } else {      if (popup == true)       JOptionPane.showMessageDialog(MainWindow.main,msg);    }  }}  }
class C{  public ElementCache(int size,int overflow){  super(size,overflow);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String imageURL=getEditorial(stack).getImageURL();  return (imageURL == null || imageURL.length() == 0) ? Boolean.FALSE : Boolean.TRUE;}  }
class C{  public boolean hasExchange(){  return getExchange() != null;}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.COMPOSITE__CONTENTS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getContents()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  void saveEditingState(Main main){  TileLayerServer osmts=map.getOpenStreetMapTilesOverlay().getRendererInfo();  EditState editState=new EditState(main.getApplicationContext(),this,osmts,main.getImageFileName(),viewBox,main.getFollowGPS());  new SavingHelper<EditState>().save(main,EDITSTATE_FILENAME,editState,false);}  }
class C{  public jMatrix minus(jMatrix B){  checkMatrixDimensions(B);  jMatrix X=new jMatrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] - B.A[i][j];    }  }  return X;}  }
class C{  public static PsiFile findFileContext(PsiElement element){  return element.getContainingFile();}  }
class C{  public void muteDevice(org.wso2.emm.agent.beans.Operation operation){  operation.setStatus(resources.getString(R.string.operation_value_completed));  resultBuilder.build(operation);  AudioManager audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);  audioManager.setStreamVolume(AudioManager.STREAM_RING,DEFAULT_VOLUME,DEFAULT_FLAG);  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"Device muted");  }}  }
class C{  public static <T>boolean moveForward(final List<T> list,final int[] indices){  if (indices.length == 0)   return false;  sortReversed(indices);  if (indices[0] == list.size() - 1)   return false;  for (  final int idx : indices) {    final T element=list.get(idx);    list.set(idx,list.get(idx + 1));    list.set(idx + 1,element);  }  return true;}  }
class C{  public boolean validate(InputNode node) throws Exception {  Class expect=type.getType();  String name=entry.getKey();  if (name == null) {    name=context.getName(expect);  }  if (!entry.isAttribute()) {    return validateElement(node,name);  }  return validateAttribute(node,name);}  }
class C{  protected static long[] known_N_compute_B_and_K_slow(long N,double epsilon,double delta,int quantiles,double[] returnSamplingRate){  final int maxBuffers=50;  final int maxHeight=50;  final double N_double=N;  long ret_b=1;  long ret_k=N;  double sampling_rate=1.0;  long memory=N;  final double logarithm=Math.log(2.0 * quantiles / delta);  final double c=2.0 * epsilon * N_double;  for (long b=2; b < maxBuffers; b++)   for (long h=3; h < maxHeight; h++) {    double binomial=Arithmetic.binomial(b + h - 2,h - 1);    long tmp=(long)Math.ceil(N_double / binomial);    if ((b * tmp < memory) && ((h - 2) * binomial - Arithmetic.binomial(b + h - 3,h - 3) + Arithmetic.binomial(b + h - 3,h - 2) <= c)) {      ret_k=tmp;      ret_b=b;      memory=ret_k * b;      sampling_rate=1.0;    }    if (delta > 0.0) {      double t=(h - 2) * Arithmetic.binomial(b + h - 2,h - 1) - Arithmetic.binomial(b + h - 3,h - 3) + Arithmetic.binomial(b + h - 3,h - 2);      double u=logarithm / epsilon;      double v=Arithmetic.binomial(b + h - 2,h - 1);      double w=logarithm / (2.0 * epsilon * epsilon);      double x=0.5 + 0.5 * Math.sqrt(1.0 + 4.0 * t / u);      long k=(long)Math.ceil(w * x * x / v);      if (b * k < memory) {        ret_k=k;        ret_b=b;        memory=b * k;        sampling_rate=N_double * 2.0 * epsilon* epsilon / logarithm;      }    }  }  long[] result=new long[2];  result[0]=ret_b;  result[1]=ret_k;  returnSamplingRate[0]=sampling_rate;  return result;}  }
class C{  public ExpiringMap(int timeToLive){  this(timeToLive,DEFAULT_EXPIRATION_INTERVAL);}  }
class C{  public static boolean isWindowShapingSupported(){  Toolkit curToolkit=Toolkit.getDefaultToolkit();  if (!(curToolkit instanceof SunToolkit)) {    return false;  }  return ((SunToolkit)curToolkit).isWindowShapingSupported();}  }
class C{  public T abbr(String value){  return attr("abbr",value);}  }
class C{  @SuppressWarnings("unchecked") protected final boolean type(final Class<?> dependencyType){  return this.dependencyType.isAssignableFrom(dependencyType);}  }
class C{  @Override public String toString(){  return mItem.name;}  }
class C{  public PreparedLineStringIntersects(PreparedLineString prepLine){  this.prepLine=prepLine;}  }
class C{  protected void emit_TField_SemicolonKeyword_5_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  private void hideProgressIfLoop(List<Api.Tag> tags){  MediaView actualView=viewer != null ? viewer.getActualMediaView() : null;  if (actualView instanceof AbstractProgressMediaView) {    if (Iterables.any(tags,null)) {      ((AbstractProgressMediaView)actualView).setProgressEnabled(false);    }  }}  }
class C{  @Override public long downloadToStream(String uri,OutputStream outputStream,final BitmapUtils.BitmapLoadTask<?> task){  if (task == null || task.isCancelled() || task.getTargetContainer() == null)   return -1;  URLConnection urlConnection=null;  BufferedInputStream bis=null;  OtherUtils.trustAllHttpsURLConnection();  long result=-1;  long fileLen=0;  long currCount=0;  try {    if (uri.startsWith("/")) {      FileInputStream fileInputStream=new FileInputStream(uri);      fileLen=fileInputStream.available();      bis=new BufferedInputStream(fileInputStream);      result=System.currentTimeMillis() + this.getDefaultExpiry();    } else     if (uri.startsWith("assets/")) {      InputStream inputStream=this.getContext().getAssets().open(uri.substring(7,uri.length()));      fileLen=inputStream.available();      bis=new BufferedInputStream(inputStream);      result=Long.MAX_VALUE;    } else {      final URL url=new URL(uri);      urlConnection=url.openConnection();      urlConnection.setConnectTimeout(this.getDefaultConnectTimeout());      urlConnection.setReadTimeout(this.getDefaultReadTimeout());      bis=new BufferedInputStream(urlConnection.getInputStream());      result=urlConnection.getExpiration();      result=result < System.currentTimeMillis() ? System.currentTimeMillis() + this.getDefaultExpiry() : result;      fileLen=urlConnection.getContentLength();    }    if (task.isCancelled() || task.getTargetContainer() == null)     return -1;    byte[] buffer=new byte[4096];    int len=0;    BufferedOutputStream out=new BufferedOutputStream(outputStream);    while ((len=bis.read(buffer)) != -1) {      out.write(buffer,0,len);      currCount+=len;      if (task.isCancelled() || task.getTargetContainer() == null)       return -1;      task.updateProgress(fileLen,currCount);    }    out.flush();  } catch (  Throwable e) {    result=-1;    LogUtils.e(e.getMessage(),e);  } finally {    IOUtils.closeQuietly(bis);  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.180 -0500",hash_original_method="9DD74CD1F13AD5E4F4CF15160B046494",hash_generated_method="D646522144ACE816F1B9C19EDF69A0F0") public void forgetLoadedWallpaper(){  sGlobals.forgetLoadedWallpaper();}  }
class C{  @Override public boolean onPreferenceClick(Preference preference){  if (preference == mLinkPref) {    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(PasswordUIView.getAccountDashboardURL()));    intent.setPackage(getActivity().getPackageName());    getActivity().startActivity(intent);  } else {    Intent intent=new Intent();    intent.setClassName(getActivity(),getActivity().getClass().getName());    intent.putExtra(Preferences.EXTRA_SHOW_FRAGMENT,PasswordEntryEditor.class.getName());    intent.putExtra(Preferences.EXTRA_SHOW_FRAGMENT_ARGUMENTS,preference.getExtras());    startActivityForResult(intent,RESULT_DELETE_PASSWORD);  }  return true;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public PeerNetwork clone(){  PeerNetwork clone=new BluetoothLEPeerNetwork(mBluetoothLEDevice);  return clone;}  }
class C{  public static void registerSerDeser(Class<?> clazz,EntitySerDeser<?> entitySerDeser){  _serDeserMap.put(clazz,entitySerDeser);}  }
class C{  public void testGetGeneratedKeysAllCases() throws Exception {  System.out.println("Using Statement.executeUpdate()\n");  try {    createGGKTables();    for (int i=0; i < tests.length; i++) {      doGGKTestStatement(tests[i],true);    }  }  finally {    dropGGKTables();  }  nextID=1;  count=0;  System.out.println("Using Statement.execute()\n");  try {    createGGKTables();    for (int i=0; i < tests.length; i++) {      doGGKTestStatement(tests[i],false);    }  }  finally {    dropGGKTables();  }  nextID=1;  count=0;  System.out.println("Using PreparedStatement.executeUpdate()\n");  try {    createGGKTables();    for (int i=0; i < tests.length; i++) {      doGGKTestPreparedStatement(tests[i],true);    }  }  finally {    dropGGKTables();  }  nextID=1;  count=0;  System.out.println("Using PreparedStatement.execute()\n");  try {    createGGKTables();    for (int i=0; i < tests.length; i++) {      doGGKTestPreparedStatement(tests[i],false);    }  }  finally {    dropGGKTables();  }}  }
class C{  public static boolean equals(int[] array1,int[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public boolean removeAll(Collection<?> c){  return al.removeAll(c);}  }
class C{  public void fill3DRect(int x,int y,int width,int height,boolean raised){  g.fill3DRect(x,y,width,height,raised);}  }
class C{  private int registerSourceFile(String file){  if (sourceFiles.contains(file))   return -1;  sourceFiles.add(file);  this.size++;  return sourceFiles.size() - 1;}  }
class C{  public Iterator<Sensor> iterator(){  return getSelection().iterator();}  }
class C{  public boolean isSubsequenceB(String s,String t){  if (s.length() == 0) {    return true;  }  for (int i=0; i < t.length(); i++) {    if (s.charAt(0) == t.charAt(i)) {      return isSubsequenceB(s.substring(1),t.substring(i + 1));    }  }  return false;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"test");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a test instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize size=targetResult.getSize();  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  Helpers.generateAnd(environment,offset,size,sourceRegister,targetRegister,instructions);}  }
class C{  public static boolean isSynchronized(int flags){  return (flags & AccSynchronized) != 0;}  }
class C{  public void insert(int index,BigDecimal v){  if (v == null) {    insertNull(index);  } else {    _insert(index,numberNode(v));  }}  }
class C{  public void dropTables(){  try (Connection connection=getConnection();Statement statement=connection.createStatement()){    executeDropStatements(statement);  } catch (  SQLException e) {    throw new TableModificationException(e);  }}  }
class C{  private String deleteAllSrdfVolumesInCG(Map<URI,Volume> sourcesVolumeMap,final Workflow workflow,String waitFor,final List<VolumeDescriptor> sourceDescriptors){  Volume sourceVolume=sourcesVolumeMap.get(sourceDescriptors.get(0).getVolumeURI());  Volume targetVolume=getFirstTarget(sourceVolume);  if (targetVolume == null) {    log.info("No target volume available for source {}",sourceVolume.getId());    return waitFor;  }  RemoteDirectorGroup group=dbClient.queryObject(RemoteDirectorGroup.class,targetVolume.getSrdfGroup());  StorageSystem sourceSystem=dbClient.queryObject(StorageSystem.class,group.getSourceStorageSystemUri());  StorageSystem targetSystem=dbClient.queryObject(StorageSystem.class,group.getRemoteStorageSystemUri());  Method method=suspendSRDFLinkMethod(targetSystem.getId(),sourceVolume.getId(),targetVolume.getId(),false);  String splitStep=workflow.createStep(DELETE_SRDF_MIRRORS_STEP_GROUP,SPLIT_SRDF_MIRRORS_STEP_DESC,waitFor,targetSystem.getId(),targetSystem.getSystemType(),getClass(),method,null,null);  Workflow.Method detachMethod=detachGroupPairsMethod(targetSystem.getId(),sourceVolume.getId(),targetVolume.getId());  String detachMirrorStep=workflow.createStep(DELETE_SRDF_MIRRORS_STEP_GROUP,DETACH_SRDF_MIRRORS_STEP_DESC,splitStep,targetSystem.getId(),targetSystem.getSystemType(),getClass(),detachMethod,null,null);  waitFor=detachMirrorStep;  List<URI> targetVolumeIds=new ArrayList<URI>();  for (  Volume source : sourcesVolumeMap.values()) {    StringSet srdfTargets=source.getSrdfTargets();    for (    String srdfTarget : srdfTargets) {      log.info("suspend and detach: source:{}, target:{}",source.getId(),srdfTarget);      URI targetURI=URI.create(srdfTarget);      Volume target=dbClient.queryObject(Volume.class,targetURI);      if (null == target) {        log.warn("Target volume {} not available for SRDF source volume {}",source.getId(),targetURI);        return DELETE_SRDF_MIRRORS_STEP_GROUP;      }      log.info("target Volume {} with srdf group {}",target.getNativeGuid(),target.getSrdfGroup());      Workflow.Method removeGroupsMethod=removeDeviceGroupsMethod(sourceSystem.getId(),source.getId(),targetURI);      waitFor=workflow.createStep(DELETE_SRDF_MIRRORS_STEP_GROUP,REMOVE_DEVICE_GROUPS_STEP_DESC,waitFor,sourceSystem.getId(),sourceSystem.getSystemType(),getClass(),removeGroupsMethod,null,null);    }  }  if (null != targetSystem) {    addStepToRefreshSystem(DELETE_SRDF_MIRRORS_STEP_GROUP,targetSystem,targetVolumeIds,waitFor,workflow);  }  return DELETE_SRDF_MIRRORS_STEP_GROUP;}  }
class C{  private int parseNonceLen(final byte[] b,final int off) throws ParseException {  nonceLen_=PrimitivesParser.parseByte(b,off);  if (nonceLen_ < 0) {    throw new BadCiphertextException("Invalid nonce length in ciphertext");  }  return 1;}  }
class C{  public Vector2i mul(Vector2i v){  x+=v.x;  y+=v.y;  return this;}  }
class C{  public void convertInfixToPostfix(String infixExp) throws Exception {  m_originalInfix=infixExp;  infixExp=Utils.removeSubstring(infixExp," ");  infixExp=Utils.replaceSubstring(infixExp,"log","l");  infixExp=Utils.replaceSubstring(infixExp,"abs","b");  infixExp=Utils.replaceSubstring(infixExp,"cos","c");  infixExp=Utils.replaceSubstring(infixExp,"exp","e");  infixExp=Utils.replaceSubstring(infixExp,"sqrt","s");  infixExp=Utils.replaceSubstring(infixExp,"floor","f");  infixExp=Utils.replaceSubstring(infixExp,"ceil","h");  infixExp=Utils.replaceSubstring(infixExp,"rint","r");  infixExp=Utils.replaceSubstring(infixExp,"tan","t");  infixExp=Utils.replaceSubstring(infixExp,"sin","n");  StringTokenizer tokenizer=new StringTokenizer(infixExp,OPERATORS,true);  m_postFixExpVector=new Vector<ExpressionComponent>();  while (tokenizer.hasMoreTokens()) {    String tok=tokenizer.nextToken();    if (tok.length() > 1) {      handleOperand(tok);    } else {      if (isOperator(tok.charAt(0))) {        handleOperator(tok);      } else {        handleOperand(tok);      }    }    m_previousTok=tok;  }  while (!m_operatorStack.empty()) {    String popop=(String)(m_operatorStack.pop());    if (popop.charAt(0) == '(' || popop.charAt(0) == ')') {      throw new Exception("Mis-matched parenthesis!");    }    m_postFixExpVector.addElement(new Operator(popop.charAt(0)));  }}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (isShowing() && mDropDownList.getSelectedItemPosition() >= 0) {    boolean consumed=mDropDownList.onKeyUp(keyCode,event);    if (consumed && isConfirmKey(keyCode)) {      dismiss();    }    return consumed;  }  return false;}  }
class C{  @NotNull public static Result parsePathExprQualifierForExprStatement(@NotNull PsiBuilder builder,@NotNull GroovyParser parser){  PsiBuilder.Marker marker=builder.mark();  IElementType qualifierType=PrimaryExpression.parsePrimaryExpression(builder,parser);  if (qualifierType != GroovyElementTypes.WRONGWAY) {    return parseAfterQualifier(builder,parser,marker,qualifierType);  } else {    marker.drop();    return Result.WRONG_WAY;  }}  }
class C{  @Override public void init(Context context){  super.init(context);  String s;  s=context.getResolvedEntityAttribute(ACCEPT_LINE_REGEX);  if (s != null) {    acceptLineRegex=Pattern.compile(s);  }  s=context.getResolvedEntityAttribute(SKIP_LINE_REGEX);  if (s != null) {    skipLineRegex=Pattern.compile(s);  }  url=context.getResolvedEntityAttribute(URL);  if (url == null)   throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"'" + URL + "' is a required attribute");}  }
class C{  public void createPartControl(Composite parent){  text=new Text(parent,SWT.MULTI | SWT.VERTICAL);  text.setToolTipText("Paste Stack Trace here and execute action!");  makeActions();  contributeToActionBars();}  }
class C{  public static void doEntryOperations(String keyPrefix) throws Exception {  Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME);  for (int i=0; i < PUTS_PER_SERVER; i++) {    r1.put(keyPrefix + i,keyPrefix + "val-" + i);  }}  }
class C{  public static int daysBetween(DateValue date1,DateValue date2){  return fixedFromGregorian(date1) - fixedFromGregorian(date2);}  }
class C{  public boolean saveImage(OutputStream output,String format,double scale){  try {    Dimension d=new Dimension((int)(scale * getWidth()),(int)(scale * getHeight()));    BufferedImage img=getNewOffscreenBuffer(d.width,d.height);    Graphics2D g=(Graphics2D)img.getGraphics();    Point2D p=new Point2D.Double(0,0);    zoom(p,scale);    boolean q=isHighQuality();    setHighQuality(true);    paintDisplay(g,d);    setHighQuality(q);    zoom(p,1 / scale);    ImageIO.write(img,format,output);    return true;  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  throw new RejectedExecutionException("Task " + r.toString() + " rejected from "+ e.toString());}  }
class C{  public Point2D.Double chop(Point2D.Double from){  Rectangle2D.Double r=getBounds();  return Geom.angleToPoint(r,Geom.pointToAngle(r,from));}  }
class C{  private static String which(String classname,ClassLoader loader){  String classnameAsResource=classname.replace('.','/') + ".class";  if (loader == null)   loader=ClassLoader.getSystemClassLoader();  URL it=loader.getResource(classnameAsResource);  return it != null ? it.toString() : null;}  }
class C{  public static int doubleSubG(double d1,double d2){  if (d1 == d2) {    ConstantPoolManager.getInstance().addDynamicConstant(d1);    return 0;  } else {    if (Double.isNaN(d1) || Double.isNaN(d2)) {      return 1;    }    return doubleSubHelper(d1,d2);  }}  }
class C{  public Source findSourceByQName(QName qName){  return qNameTable.get(qName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:10.978 -0500",hash_original_method="124CFAD93358C90C664BE8C1CAE8945E",hash_generated_method="4983D95CB1196E5796EB9C6C952CAE2F") public String encode(){  String dayString;  if (day < 10) {    dayString="0" + day;  } else   dayString="" + day;  String hourString;  if (hour < 10) {    hourString="0" + hour;  } else   hourString="" + hour;  String minuteString;  if (minute < 10) {    minuteString="0" + minute;  } else   minuteString="" + minute;  String secondString;  if (second < 10) {    secondString="0" + second;  } else   secondString="" + second;  String encoding="";  if (sipWkDay != null)   encoding+=sipWkDay + Separators.COMMA + Separators.SP;  encoding+=dayString + Separators.SP;  if (sipMonth != null)   encoding+=sipMonth + Separators.SP;  encoding+=year + Separators.SP + hourString+ Separators.COLON+ minuteString+ Separators.COLON+ secondString+ Separators.SP+ GMT;  return encoding;}  }
class C{  public boolean exportPkcs8(){  return jrbPkcs8.isSelected();}  }
class C{  public DOMUnsupportedException(String msg){  this(null,msg);}  }
class C{  public void removeAssignedVirtualArray(String virtualArrayURI){  if ((virtualArrayURI != null) && (_assignedVirtualArrays != null)) {    _assignedVirtualArrays.remove(virtualArrayURI);    updateVirtualArrayTags();  }}  }
class C{  @Detainted public Optional<O> extractUntyped(@Tainted Map<String,?> jsonMap){  Object value=jsonMap.get(name);  I castedValue;  try {    castedValue=typeIn.cast(value);  } catch (  ClassCastException e) {    throw new FormFieldException(String.format("Type error: got: %s, expected: %s",value.getClass().getSimpleName(),typeIn.getSimpleName())).propagate(name);  }  return convert(castedValue);}  }
class C{  public final void forceSize(int size){  if (size > data.length * 8) {    throw new IllegalArgumentException("Size exceeds byte[] store");  } else {    this.size=size;  }}  }
class C{  private void fillData(final Table table,final List<DLItem> listOfData){  final boolean itemsContainImage=itemsContainImage();  for (  final DLItem item : listOfData) {    final TableItem tableItem=new TableItem(table,SWT.NONE);    tableItem.setData(item);    if (item.getBackground() != null) {      tableItem.setBackground(item.getBackground());    }    if (item.getForeground() != null) {      tableItem.setForeground(item.getForeground());    }    if (item.getImage() != null) {      tableItem.setImage(0,item.getImage());    }    if (item.getFont() != null) {      tableItem.setFont(item.getFont());    }    final int textColumn=itemsContainImage ? 1 : 0;    tableItem.setText(textColumn,item.getText());  }}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>T deserialize(File serializedFile) throws IOException {  FileInputStream fis=new FileInputStream(serializedFile);  BufferedInputStream bufStr=new BufferedInputStream(fis);  InputStream underlyingStream=null;  if (serializedFile.getName().endsWith(".gz")) {    underlyingStream=new GZIPInputStream(bufStr);  } else   if (serializedFile.getName().endsWith(".bz2")) {    fis.read();    fis.read();    underlyingStream=new CBZip2InputStream(bufStr);  } else {    underlyingStream=bufStr;  }  ObjectInputStream deserializer=new ObjectInputStream(underlyingStream);  Object deserializedObject=null;  try {    deserializedObject=deserializer.readObject();  } catch (  ClassNotFoundException e) {    throw new IOException("The serialized file was probably corrupted.",e);  } finally {    deserializer.close();  }  return (T)deserializedObject;}  }
class C{  public static <E>void mergeSort(final E[] chunk){  if (chunk == null)   throw new IllegalArgumentException();  if (chunk.length == 0)   return;  GenericSorting.mergeSort(0,chunk.length,new MyIntComparator((Comparable[])chunk),new MySwapper((Object[])chunk));  return;}  }
class C{  public PrivateKeyUnencryptedException(String message){  super(message);}  }
class C{  public boolean login() throws LoginException {  if (ApplicationProperties.getProperty("tmtbl.authenticate.ldap.provider") == null)   return false;  sLog.debug("Performing ldap authentication ... ");  if (getCallbackHandler() == null)   throw new LoginException("Error: no CallbackHandler available ");  Callback[] callbacks=new Callback[2];  callbacks[0]=new NameCallback("User Name: ");  callbacks[1]=new PasswordCallback("Password: ",true);  try {    getCallbackHandler().handle(callbacks);    String n=((NameCallback)callbacks[0]).getName();    String p=String.valueOf(((PasswordCallback)callbacks[1]).getPassword());    HashMap userProps=new HashMap();    userProps.put("username",n);    userProps.put("password",p);    if (doAuthenticate(userProps))     return true;    sLog.debug("Ldap authentication failed ... ");    setAuthSucceeded(false);    return false;  } catch (  Exception ex) {    sLog.debug("Ldap authentication failed ... " + ex.getMessage(),ex);    setAuthSucceeded(false);    return false;  }}  }
class C{  public float[] keys(){  float[] keys=new float[size()];  float[] k=_set;  Object[] values=_values;  for (int i=k.length, j=0; i-- > 0; ) {    if (isFull(values,i)) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  protected String makeTickLabel(double val){  return makeTickLabel(val,false);}  }
class C{  public void runEmpty(){  puller.switchOf();  System.out.println("Switched of Url Puller");}  }
class C{  protected static boolean isArrayAccessExpression(Expression expression){  return expression instanceof BinaryExpression && isArrayOp(((BinaryExpression)expression).getOperation().getType());}  }
class C{  public final void removeCols(int[] cols){  int[] rows=new int[dataBox.numRows()];  for (int i=0; i < dataBox.numRows(); i++) {    rows[i]=i;  }  int[] retainedCols=new int[variables.size() - cols.length];  int i=-1;  for (int j=0; j < variables.size(); j++) {    if (Arrays.binarySearch(cols,j) < 0) {      retainedCols[++i]=j;    }  }  List<Node> retainedVars=new LinkedList<>();  for (  int retainedCol : retainedCols) {    retainedVars.add(variables.get(retainedCol));  }  dataBox=viewSelection(rows,cols);  variables=retainedVars;  selection=new HashSet<>();  multipliers=new HashMap<>(multipliers);  knowledge=knowledge.copy();}  }
class C{  public void info(String tag,String message){  stream.println(String.format(LOG_FORMAT,tag,message));}  }
class C{  public static void forceMkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      String message="File " + directory + " exists and is "+ "not a directory. Unable to create directory.";      throw new IOException(message);    }  } else {    if (!directory.mkdirs()) {      if (!directory.isDirectory()) {        String message="Unable to create directory " + directory;        throw new IOException(message);      }    }  }}  }
class C{  public RemoteFileChannel(String hostname,File file,int uploadId) throws IOException {  this(hostname,file.getPath(),uploadId);}  }
class C{  public CCTouchHandler(CCTouchDelegateProtocol delegate,int priority){  assert delegate != null : "Touch delegate may not be nil";  delegate_=delegate;  priority_=priority;  enabledSelectors_=ccTouchSelectorFlag.ccTouchSelectorNoneBit.getFlag();}  }
class C{  public SimpleNaiveBayesClassifier(IndexReader indexReader,Analyzer analyzer,Query query,String classFieldName,String... textFieldNames){  this.indexReader=indexReader;  this.indexSearcher=new IndexSearcher(this.indexReader);  this.textFieldNames=textFieldNames;  this.classFieldName=classFieldName;  this.analyzer=analyzer;  this.query=query;}  }
class C{  public void loadNeededImages(IGame game){  loaded=false;  IBoard board=game.getBoard();  int width=board.getWidth();  int height=board.getHeight();  if ((width * height) > ImageCache.MAX_SIZE) {    int max_dim=(int)Math.sqrt(ImageCache.MAX_SIZE);    width=height=max_dim;  }  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      IHex hex=board.getHex(x,y);      loadHexImage(hex);    }  }  for (  Entity e : game.getEntitiesVector()) {    if (e.getSecondaryPositions().isEmpty()) {      loadImage(e,-1);    } else {      for (      Integer secPos : e.getSecondaryPositions().keySet()) {        loadImage(e,secPos);      }    }  }  minefieldSign=boardview.getToolkit().getImage(new File(Configuration.hexesDir(),Minefield.FILENAME_IMAGE).toString());  nightFog=boardview.getToolkit().getImage(new File(Configuration.hexesDir(),FILENAME_NIGHT_IMAGE).toString());  hexMask=boardview.getToolkit().getImage(new File(Configuration.hexesDir(),FILENAME_HEX_MASK).toString());  artilleryAutohit=boardview.getToolkit().getImage(new File(Configuration.hexesDir(),FILENAME_ARTILLERY_AUTOHIT_IMAGE).toString());  artilleryAdjusted=boardview.getToolkit().getImage(new File(Configuration.hexesDir(),FILENAME_ARTILLERY_ADJUSTED_IMAGE).toString());  artilleryIncoming=boardview.getToolkit().getImage(new File(Configuration.hexesDir(),FILENAME_ARTILLERY_INCOMING_IMAGE).toString());  started=true;}  }
class C{  public void put(K key,V value){  List<V> values=(List<V>)map.get(key);  if (values == null) {    values=new ArrayList<V>();    map.put(key,values);  }  values.add(value);  valuesSize++;}  }
class C{  @Override public void writeValueEdit(Object value){  Object[] customer=(Object[])value;  m_oId=customer[0];  m_jTaxID.setText((String)customer[1]);  m_jSearchkey.setText((String)customer[2]);  m_jName.setText((String)customer[3]);  String test=m_jName.getText();  m_jNotes.setText((String)customer[4]);  m_jVisible.setSelected(((Boolean)customer[5]));  jcard.setText((String)customer[6]);  txtMaxdebt.setText(Formats.CURRENCY.formatValue(customer[7]));  txtCurdate.setText(Formats.DATE.formatValue(customer[8]));  txtCurdebt.setText(Formats.CURRENCY.formatValue(customer[9]));  txtFirstName.setText(Formats.STRING.formatValue(customer[10]));  txtLastName.setText(Formats.STRING.formatValue(customer[11]));  txtEmail.setText(Formats.STRING.formatValue(customer[12]));  txtPhone.setText(Formats.STRING.formatValue(customer[13]));  txtPhone2.setText(Formats.STRING.formatValue(customer[14]));  txtFax.setText(Formats.STRING.formatValue(customer[15]));  txtAddress.setText(Formats.STRING.formatValue(customer[16]));  txtAddress2.setText(Formats.STRING.formatValue(customer[17]));  txtPostal.setText(Formats.STRING.formatValue(customer[18]));  txtCity.setText(Formats.STRING.formatValue(customer[19]));  txtRegion.setText(Formats.STRING.formatValue(customer[20]));  txtCountry.setText(Formats.STRING.formatValue(customer[21]));  m_CategoryModel.setSelectedKey(customer[22]);  m_jImage.setImage((BufferedImage)customer[23]);  j_mDOB.setText(Formats.DATE.formatValue(customer[24]));  txtDiscount.setText(Formats.PERCENT.formatValue(customer[25]));  m_jTaxID.setEnabled(true);  m_jSearchkey.setEnabled(true);  m_jName.setEnabled(true);  m_jNotes.setEnabled(true);  txtMaxdebt.setEnabled(true);  txtDiscount.setEnabled(true);  txtCurdebt.setEnabled(true);  txtCurdate.setEnabled(true);  m_jVisible.setEnabled(true);  jcard.setEnabled(true);  txtFirstName.setEnabled(true);  txtLastName.setEnabled(true);  txtEmail.setEnabled(true);  txtPhone.setEnabled(true);  txtPhone2.setEnabled(true);  txtFax.setEnabled(true);  m_jImage.setEnabled(true);  txtAddress.setEnabled(true);  txtAddress2.setEnabled(true);  txtPostal.setEnabled(true);  txtCity.setEnabled(true);  txtRegion.setEnabled(true);  txtCountry.setEnabled(true);  j_mDOB.setEnabled(true);  m_jCategory.setEnabled(true);  jButton2.setEnabled(true);  jButton3.setEnabled(true);  transactionModel=new TransactionTableModel(getTransactionOfName((String)customer[3]));  jTable1.setModel(transactionModel);  jTable1.setEnabled(true);  jTable1.setVisible(true);  txtCurdate.repaint();  txtCurdebt.repaint();  updateDoB();  repaint();  refresh();}  }
class C{  @SuppressWarnings("deprecation") private static Throwable executeReflectionCodeThreaded(ReflectionCode code,PrintStream out){  RunnerThread runnerThread=new RunnerThread(null);  runnerThread.setup(code);  try {    runnerThread.start();    runnerThread.join(timeout);    if (!runnerThread.runFinished) {      if (Log.isLoggingOn()) {        Log.log("Exceeded max wait: aborting test input.");      }      runnerThread.stop();      return new TimeoutExceededException();    }    return runnerThread.exceptionThrown;  } catch (  java.lang.InterruptedException e) {    throw new IllegalStateException("A RunnerThread thread shouldn't be interrupted by anyone! " + "(this may be a bug in Randoop; please report it.)");  }}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,null,lines,lineEnding,false);}  }
class C{  public FireworkEffectMetaBuilder start(){  return new FireworkEffectMetaBuilder();}  }
class C{  public PopParams build(){  return new PopParams(this);}  }
class C{  private static Entry buildFromSorted(int level,int lo,int hi,int redLevel,Iterator it,java.io.ObjectInputStream str,Object defaultVal) throws java.io.IOException, ClassNotFoundException {  if (hi < lo) {    return null;  }  int mid=(lo + hi) / 2;  Entry left=null;  if (lo < mid) {    left=buildFromSorted(level + 1,lo,mid - 1,redLevel,it,str,defaultVal);  }  Object key;  Object value;  if (it != null) {    if (defaultVal == null) {      Map.Entry entry=(Map.Entry)it.next();      key=entry.getKey();      value=entry.getValue();    } else {      key=it.next();      value=defaultVal;    }  } else {    key=str.readObject();    value=(defaultVal != null ? defaultVal : str.readObject());  }  Entry middle=new Entry(key,value,null);  if (level == redLevel) {    middle.color=RED;  }  if (left != null) {    middle.left=left;    left.parent=middle;  }  if (mid < hi) {    Entry right=buildFromSorted(level + 1,mid + 1,hi,redLevel,it,str,defaultVal);    middle.right=right;    right.parent=middle;  }  return middle;}  }
class C{  public boolean contains(String key){  if (key == null)   throw new NullPointerException("called contains(null)");  if (key.length() == 0)   throw new IllegalArgumentException("invalid key");  Node p;  Node x=head;  do {    p=x;    if (safeBitTest(key,x.b))     x=x.right; else     x=x.left;  } while (p.b < x.b);  return x.key.equals(key);}  }
class C{  @Override public InetSocketAddress ipRemote(){  Socket s=getSocket();  if (s != null) {    return (InetSocketAddress)s.getRemoteSocketAddress();  } else {    return null;  }}  }
class C{  private static List<TextRange> addNextComma(PsiElement e,int cursorOffset){  PsiElement nextCommaSibling=e.getNextSibling();  if (nextCommaSibling != null) {    ASTNode node=nextCommaSibling.getNode();    if (node != null) {      IElementType commaType=node.getElementType();      if (commaType == PyTokenTypes.COMMA) {        PsiElement nextSpaceSibling=nextCommaSibling.getNextSibling();        if (nextSpaceSibling != null) {          TextRange textRange=e.getTextRange();          TextRange offsetRange;          if (nextSpaceSibling instanceof PsiWhiteSpace) {            offsetRange=new TextRange(textRange.getStartOffset(),textRange.getEndOffset() + 2);          } else {            offsetRange=new TextRange(textRange.getStartOffset(),textRange.getEndOffset() + 1);          }          if (offsetRange.contains(cursorOffset) && offsetRange.getLength() > 1) {            return Collections.singletonList(offsetRange);          }        }      }    }  }  return Collections.emptyList();}  }
class C{  public void startGeneralEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  try {    if (augs != null && Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {      if (fContentHandler != null) {        fContentHandler.skippedEntity(name);      }    } else {      if (fLexicalHandler != null) {        fLexicalHandler.startEntity(name);      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public static void sleep(long sleepTime){  try {    Thread.sleep(sleepTime);  } catch (  InterruptedException e) {    LOG.error("Unexpectedly interrupted!");  }}  }
class C{  @Override public void pause(boolean toPause){  paused=toPause;}  }
class C{  public void addValue(int seriesNumber,int index,float value){  invalidateRangeInfo();  if (seriesNumber >= this.valueHistory.length) {    throw new IllegalArgumentException("TimeSeriesDataset.addValue(): series #" + seriesNumber + "unspecified in c'tor");  }  if (this.valueHistory[seriesNumber] == null) {    this.valueHistory[seriesNumber]=new ValueSequence(this.historyCount);    this.seriesCount++;  }  this.valueHistory[seriesNumber].enterData(index,value);  fireSeriesChanged();}  }
class C{  public boolean down(){  if (isWithinCurrentMonth(mRow + 1,mColumn)) {    mRow++;    return false;  }  nextMonth();  mRow=0;  while (!isWithinCurrentMonth(mRow,mColumn)) {    mRow++;  }  return true;}  }
class C{  final void addHalfEdges(DoubleEdgeListVertex v1,DoubleEdgeListVertex v2){  DoubleEdgeListFace face=new DoubleEdgeListFace();  DoubleEdgeListHalfEdge left=new DoubleEdgeListHalfEdge();  DoubleEdgeListHalfEdge right=new DoubleEdgeListHalfEdge();  DoubleEdgeListFace referenceDoubleEdgeListFace=this.getReferenceFace(v1,v2);  DoubleEdgeListHalfEdge prev1=this.getPreviousEdge(v1,referenceDoubleEdgeListFace);  DoubleEdgeListHalfEdge prev2=this.getPreviousEdge(v2,referenceDoubleEdgeListFace);  face.edge=left;  referenceDoubleEdgeListFace.edge=right;  left.face=face;  left.next=prev2.next;  left.origin=v1;  left.twin=right;  right.face=referenceDoubleEdgeListFace;  right.next=prev1.next;  right.origin=v2;  right.twin=left;  prev1.next=left;  prev2.next=right;  DoubleEdgeListHalfEdge curr=left.next;  while (curr != left) {    curr.face=face;    curr=curr.next;  }  this.edges.add(left);  this.edges.add(right);  this.faces.add(face);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.357 -0500",hash_original_method="85C1BF55B1F968333EFFBCF4DBC75BE6",hash_generated_method="369026569CB74E2410F62F5387F7F141") public PrivacyHeader createPrivacyHeader(String privacyType){  if (privacyType == null)   throw new NullPointerException("null privacyType arg");  Privacy privacy=new Privacy(privacyType);  return privacy;}  }
class C{  @Override public final SplitEvaluate copy() throws Exception {  CorrelationSplitInfo s=(CorrelationSplitInfo)this.clone();  return s;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double slope;  double z, z2;  int i, n;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX2={2,2,2,2,2,1,0,-1,-2,-2,-2,-2,-2,-1,0,1};  int[] dY2={-2,-1,0,1,2,2,2,2,2,1,0,-1,-2,-2,-2,-2};  int[] breachcell={0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,0};  double dist;  double gridRes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    double[] data=null;    for (row=0; row < rows; row++) {      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        output.setValue(row,col,data[col]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          n=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 < z) {              n++;            }          }          if (n == 0) {            for (i=0; i < 16; i++) {              z2=DEM.getValue(row + dY2[i],col + dX2[i]);              if (z2 < z && z2 != noData) {                output.setValue(row + dY[breachcell[i]],col + dX[breachcell[i]],(z + z2) / 2);              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  public String[] validBaudRates(){  return new String[]{"57,600 baud"};}  }
class C{  public static void registerProtocol(final String id,final Protocol protocol){  if (id == null) {    throw new IllegalArgumentException("id is null");  }  if (protocol == null) {    throw new IllegalArgumentException("protocol is null");  }  PROTOCOLS.put(id,protocol);}  }
class C{  public final void timeoutExceeded(){  uiAccessor.access(null);}  }
class C{  public static Vector padRight(Collection strings){  Vector v=new Vector();  int length=maxLength(strings);  for (Iterator i=strings.iterator(); i.hasNext(); ) {    String string=(String)i.next();    v.add(padRight(string,length));  }  return v;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (documentHandler != null)   documentHandler.ignorableWhitespace(ch,start,length);}  }
class C{  public int skip(int n){  mark(pos);  pos+=n;  return n;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ID;case 2:  return TYPE;case 3:return NAME;case 5:return FILE_SIZE;case 6:return URL;default :return null;}}  }
class C{  public String generateRowLabel(CategoryDataset dataset,int row){  return dataset.getRowKey(row).toString();}  }
class C{  public final Vec2D rotate(float theta){  float co=(float)Math.cos(theta);  float si=(float)Math.sin(theta);  float xx=co * x - si * y;  y=si * x + co * y;  x=xx;  return this;}  }
class C{  @UiThread @Override public void onBindParentViewHolder(@NonNull HorizontalParentViewHolder parentViewHolder,int parentPosition,@NonNull HorizontalParent horizontalParent){  parentViewHolder.bind(horizontalParent.getParentNumber(),horizontalParent.getParentText());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.THROW_STATEMENT__EXPRESSION:    setExpression((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  private void skipEmployees(List<Employee> employees){  Stream<String> employeesNamesStream=employees.stream().skip(2).map(null);  employeesNamesStream.forEach(null);}  }
class C{  public void addPoint(Coord point,int pos){  points.put(pos,point);}  }
class C{  public static void main(String[] args) throws CloneNotSupportedException {  MyStack stack1=new MyStack();  System.out.println("Pushing the number 4, 5, and 6 to 1st stack...");  stack1.push(new Integer(4));  stack1.push(new Integer(5));  stack1.push(new Integer(6));  System.out.println("Cloning 1st stack...");  MyStack stack2=(MyStack)stack1.clone();  System.out.println("Popping object from 1st stack...");  stack1.pop();  System.out.print("1st ");  System.out.println(stack1);  System.out.print("2nd ");  System.out.println(stack2);  System.out.println("Is the 1st stack equal to the 2nd? " + (stack1 == stack2));}  }
class C{  public int size(){  return m_sets.size();}  }
class C{  public Key(){  this.columns=new ArrayList<Column>();}  }
class C{  private static void recycleLightWeightPopup(LightWeightPopup popup){synchronized (LightWeightPopup.class) {    List<LightWeightPopup> lightPopupCache=getLightWeightPopupCache();    if (lightPopupCache.size() < MAX_CACHE_SIZE) {      lightPopupCache.add(popup);    }  }}  }
class C{  @Override protected MkAppTreeNode<O> createNewLeafNode(){  return new MkAppTreeNode<>(leafCapacity,true);}  }
class C{  public BaseType pointsTo(){  return pointsTo;}  }
class C{  private void handleSubStage(EnumerationContext ctx){  if (!this.ongoingEnumerations.contains(getEnumKey(ctx))) {    ctx.stage=EnumerationStages.FINISHED;    handleEnumerationRequest(ctx);    return;  }switch (ctx.subStage) {case LISTVMS:    enumerate(ctx);  break;case QUERY:queryForComputeStates(ctx,ctx.virtualMachines);break;case UPDATE:update(ctx);break;case CREATE:create(ctx);break;case PATCH_ADDITIONAL_FIELDS:patchAdditionalFields(ctx);break;case DELETE:delete(ctx);break;case FINISHED:ctx.stage=EnumerationStages.FINISHED;handleEnumerationRequest(ctx);break;default :String msg=String.format("Unknown Azure enumeration sub-stage %s ",ctx.subStage.toString());ctx.error=new IllegalStateException(msg);ctx.stage=EnumerationStages.ERROR;handleEnumerationRequest(ctx);break;}}  }
class C{  public String debugTipText(){  return "If set to true, filter may output additional info to " + "the console.";}  }
class C{  private void broadcastStart(){  for (  MapDownloadListener listener : mapDownloadListeners) {    listener.downloadStart();  }}  }
class C{  @Override public boolean add(T linkable){  insert(_size,linkable);  return true;}  }
class C{  public long calculateAllocations(){  checkThreadSafety();  long mark1=((threadAllocatedBytes() - MEASURING_COST_IN_BYTES) - allocated.get());  return mark1;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_genExpr_2_();}  }
class C{  public void endElement(String namespaceURI,String localName,String name) throws org.xml.sax.SAXException {  if (m_tracer != null)   super.fireEndElem(name);}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  public LongColumn(){  this(0,10,0L);}  }
class C{  public void doCompile(final Rule rule){  try {    setMessageText(null,false,false,null);    String fileName="temp" + "/" + StrategyRule.PACKAGE.replace('.','/');    fileName=fileName + rule.getStrategy().getClassName() + ".java";    doSaveFile(fileName,this.getContent());    Vector<Object> parm=new Vector<Object>(0);    BrokerModel brokerManagerModel=(BrokerModel)ClassFactory.getServiceForInterface(BrokerModel._brokerTest,this);    CandleDataset candleDataset=new CandleDataset();    CandleSeries candleSeries=new CandleSeries("Test",new Contract(SECType.STOCK,"Test",Exchange.SMART,Currency.USD,null,null),BarSize.FIVE_MIN,TradingCalendar.getDateTimeNowMarketTimeZone(),TradingCalendar.getDateTimeNowMarketTimeZone());    candleDataset.addSeries(candleSeries);    StrategyData strategyData=new StrategyData(rule.getStrategy(),candleDataset);    parm.add(brokerManagerModel);    parm.add(strategyData);    parm.add(new Integer(0));    DynamicCode dynacode=new DynamicCode();    dynacode.addSourceDir(new File("temp"));    dynacode.newProxyInstance(StrategyRule.class,StrategyRule.PACKAGE + rule.getStrategy().getClassName(),parm);    this.setStatusBarMessage("File compiled.",BasePanel.INFORMATION);  } catch (  Exception ex) {    setMessageText("Error compiling strategy: " + rule.getStrategy().getName() + ex.getMessage(),false,true,colorRedAttr);  }}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public void createSubUsageScenario09() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.1);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO09_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO09_PERUNIT_WEEK",serviceDetails,null,role);  long userAssignedTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3);  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  VORoleDefinition changedRole=VOServiceFactory.getRole(serviceDetails,"USER");  subscrSetup.addUser(basicSetup.getSecondCustomerUser2(),changedRole,subDetails.getSubscriptionId());  long userDeassignedTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.5);  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(basicSetup.getSecondCustomerUser2(),subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.7);  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  changedRole=VOServiceFactory.getRole(serviceDetails,"GUEST");  subscrSetup.addUser(basicSetup.getSecondCustomerUser2(),changedRole,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.weeksToMillis(0.7);  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(basicSetup.getSecondCustomerUser2(),subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.weeksToMillis(0.4);  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.weeksToMillis(0.2);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO09_PERUNIT_WEEK",subDetails);}  }
class C{  public void dropActionChanged(DragSourceDragEvent dsde){}  }
class C{  public GF2Polynomial(int length,BigInteger bi){  int l=length;  if (l < 1) {    l=1;  }  blocks=((l - 1) >> 5) + 1;  value=new int[blocks];  len=l;  int i;  byte[] val=bi.toByteArray();  if (val[0] == 0) {    byte[] dummy=new byte[val.length - 1];    System.arraycopy(val,1,dummy,0,dummy.length);    val=dummy;  }  int ov=val.length & 0x03;  int k=((val.length - 1) >> 2) + 1;  for (i=0; i < ov; i++) {    value[k - 1]|=(val[i] & 0x000000ff) << ((ov - 1 - i) << 3);  }  int m=0;  for (i=0; i <= (val.length - 4) >> 2; i++) {    m=val.length - 1 - (i << 2);    value[i]=(val[m]) & 0x000000ff;    value[i]|=((val[m - 1]) << 8) & 0x0000ff00;    value[i]|=((val[m - 2]) << 16) & 0x00ff0000;    value[i]|=((val[m - 3]) << 24) & 0xff000000;  }  if ((len & 0x1f) != 0) {    value[blocks - 1]&=reverseRightMask[len & 0x1f];  }  reduceN();}  }
class C{  @Override public void testStarted(Description description){  LoggingUtils.getEvoLogger().info("* Started: " + "ClassName: " + description.getClassName() + ", MethodName: "+ description.getMethodName());  this.start=System.nanoTime();  this.testResult=new JUnitResult(description.getClassName() + "#" + description.getMethodName(),this.junitRunner.getJUnitClass());}  }
class C{  @RequestMapping(value="/container/{containerId}/application/{applicationName}",method=RequestMethod.GET) @CloudUnitSecurable public void downloadFile(@PathVariable final String applicationName,@PathVariable final String containerId,@RequestParam("path") String path,@RequestParam("fileName") final String fileName,HttpServletRequest request,HttpServletResponse response) throws ServiceException, CheckException, IOException {  downloadOrEditFile(applicationName,containerId,path,fileName,request,response,false);}  }
class C{  private static int indexOf(CharSequence cs,CharSequence searchChar,int start){  return cs.toString().indexOf(searchChar.toString(),start);}  }
class C{  public void testPrivateMode() throws Exception {  processTestBothNodesDeploy(DeploymentMode.PRIVATE);}  }
class C{  public static double angleBetweenOriented(Coordinate tip1,Coordinate tail,Coordinate tip2){  double a1=angle(tail,tip1);  double a2=angle(tail,tip2);  double angDel=a2 - a1;  if (angDel <= -Math.PI)   return angDel + PI_TIMES_2;  if (angDel > Math.PI)   return angDel - PI_TIMES_2;  return angDel;}  }
class C{  public final char nextChar(CharSequence csq){  return csq.charAt(index++);}  }
class C{  private CorrelationMatrix(List<Node> variables,TetradMatrix matrix,int sampleSize,boolean inPlace){  super(variables,inPlace ? MatrixUtils.convertCovToCorr(matrix) : MatrixUtils.convertCovToCorr(matrix.copy()),sampleSize);}  }
class C{  public CoreContainer(SolrResourceLoader loader,ConfigSolr config){  this.loader=checkNotNull(loader);  this.solrHome=loader.getInstanceDir();  this.cfg=checkNotNull(config);  this.coresLocator=config.getCoresLocator();}  }
class C{  public Builder add(String name,String value){  checkNameAndValue(name,value);  return addLenient(name,value);}  }
class C{  public static Network tagTransitLinksInNetwork(TransitSchedule transitSchedule,Network network){  log.info("Tagging pt network links");  if (transitSchedule == null) {    log.info("No transit schedule given. Returning unmodified network...");    return network;  }  for (  TransitStopFacility stopFacitlity : transitSchedule.getFacilities().values()) {    Set<String> allowedModes=new TreeSet<String>(network.getLinks().get(stopFacitlity.getLinkId()).getAllowedModes());    allowedModes.add(TransportMode.pt);    network.getLinks().get(stopFacitlity.getLinkId()).setAllowedModes(allowedModes);  }  for (  TransitLine transitLine : transitSchedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      NetworkRoute route=transitRoute.getRoute();      Set<String> allowedModes;      allowedModes=new TreeSet<String>(network.getLinks().get(route.getStartLinkId()).getAllowedModes());      allowedModes.add(TransportMode.pt);      network.getLinks().get(route.getStartLinkId()).setAllowedModes(allowedModes);      for (      Id linkId : route.getLinkIds()) {        allowedModes=new TreeSet<String>(network.getLinks().get(linkId).getAllowedModes());        allowedModes.add(TransportMode.pt);        network.getLinks().get(linkId).setAllowedModes(allowedModes);      }      allowedModes=new TreeSet<String>(network.getLinks().get(route.getEndLinkId()).getAllowedModes());      allowedModes.add(TransportMode.pt);      network.getLinks().get(route.getEndLinkId()).setAllowedModes(allowedModes);    }  }  int taggedLinks=0;  for (  Link link : network.getLinks().values()) {    if (link.getAllowedModes().contains(TransportMode.pt)) {      taggedLinks++;    }  }  log.info("Finished - " + taggedLinks + " links were tagged");  return network;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {  return encrypt(plaintext.getBytes(encoding),secretKeys);}  }
class C{  protected LeatherArmorMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(LeatherArmorMeta.class);}  }
class C{  protected String checkHeap(){  if (comparator == null) {    for (int i=1; i < size; i++) {      final int parent=(i - 1) >>> 1;      @SuppressWarnings("unchecked") Comparable<Object> po=(Comparable<Object>)queue[parent];      if (po.compareTo(queue[i]) > 0) {        return "@" + parent + ": "+ queue[parent]+ " < @"+ i+ ": "+ queue[i];      }    }  } else {    for (int i=1; i < size; i++) {      final int parent=(i - 1) >>> 1;      if (comparator.compare(queue[parent],queue[i]) > 0) {        return "@" + parent + ": "+ queue[parent]+ " < @"+ i+ ": "+ queue[i];      }    }  }  return null;}  }
class C{  private ExampleSet applyOnDataIntegers(ExampleSet exampleSet) throws ProcessStoppedException {  List<Attribute> nominalAttributes=new ArrayList<>();  LinkedList<Attribute> transformedAttributes=new LinkedList<>();  for (  Attribute attribute : exampleSet.getAttributes()) {    if (!attribute.isNumerical()) {      nominalAttributes.add(attribute);      transformedAttributes.add(AttributeFactory.createAttribute(attribute.getName(),Ontology.NUMERICAL));    }  }  exampleSet.getExampleTable().addAttributes(transformedAttributes);  int progressCompletedCounter=0;  int workloadForEachLoop=nominalAttributes.size();  int progressTriggerCounter=0;  if (getOperator() != null) {    getOperator().getProgress().setTotal(exampleSet.size());  }  for (  Example example : exampleSet) {    Iterator<Attribute> target=transformedAttributes.iterator();    for (    Attribute attribute : nominalAttributes) {      example.setValue(target.next(),example.getValue(attribute));    }    progressCompletedCounter++;    if (getOperator() != null && ++progressTriggerCounter * workloadForEachLoop > LOOPS_UNTIL_PROGRESS_TRIGGER) {      progressTriggerCounter=0;      getOperator().getProgress().setCompleted(progressCompletedCounter);    }  }  Attributes attributes=exampleSet.getAttributes();  for (  Attribute attribute : exampleSet.getAttributes()) {    if (!attribute.isNumerical()) {      attributes.replace(attribute,transformedAttributes.poll());    }  }  return exampleSet;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.METHOD_BODY___ANONYMOUS_METHOD_BODY_11:    return getAnonymous_methodBody_1_1();case UmplePackage.METHOD_BODY___CODE_1:  return getCode_1();case UmplePackage.METHOD_BODY___ANONYMOUS_METHOD_BODY_21:return getAnonymous_methodBody_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private int expandChildren(Candidate candidate,S2Cell cell,int numLevels){  numLevels--;  S2Cell[] childCells=new S2Cell[4];  for (int i=0; i < 4; ++i) {    childCells[i]=new S2Cell();  }  cell.subdivide(childCells);  int numTerminals=0;  for (int i=0; i < 4; ++i) {    if (numLevels > 0) {      if (region.mayIntersect(childCells[i])) {        numTerminals+=expandChildren(candidate,childCells[i],numLevels);      }      continue;    }    Candidate child=newCandidate(childCells[i]);    if (child != null) {      candidate.children[candidate.numChildren++]=child;      if (child.isTerminal) {        ++numTerminals;      }    }  }  return numTerminals;}  }
class C{  public boolean isCreate(){  return create;}  }
class C{  public boolean isTooManyResults(){  return tooManyResults;}  }
class C{  public Trace createTrace(String name,String description) throws CouldntSaveDataException {  try {    return new Trace(m_module.getContent().getTraceContainer().createTrace(name,description));  } catch (  com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.NULL_LITERAL;}  }
class C{  public void init(Controller controller){  this.controller=controller;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static String descriptorFromProtoArray(String[] protos,String returnType){  StringBuilder builder=new StringBuilder();  builder.append("(");  for (int i=0; i < protos.length; i++) {    builder.append(protos[i]);  }  builder.append(")");  builder.append(returnType);  return builder.toString();}  }
class C{  private void executeBlock(SuperBlock work){  int bc=0;  int next=0;  if (DEBUGSTACKMAP) {    System.out.println("working on sb " + work.getIndex());    System.out.println("initial type state:");    TypeInfo.print(locals,localsTop,stack,stackTop,itsConstantPool);  }  for (int bci=work.getStart(); bci < work.getEnd(); bci+=next) {    bc=itsCodeBuffer[bci] & 0xFF;    next=execute(bci);    if (isBranch(bc)) {      SuperBlock targetSB=getBranchTarget(bci);      if (DEBUGSTACKMAP) {        System.out.println("sb " + work.getIndex() + " points to sb "+ targetSB.getIndex()+ " (offset "+ bci+ " -> "+ targetSB.getStart()+ ")");        System.out.println("type state at " + bci + ":");        TypeInfo.print(locals,localsTop,stack,stackTop,itsConstantPool);      }      flowInto(targetSB);      if (DEBUGSTACKMAP) {        System.out.println("type state of " + targetSB + " after merge:");        TypeInfo.print(targetSB.getLocals(),targetSB.getStack(),itsConstantPool);      }    } else     if (bc == ByteCode.TABLESWITCH) {      int switchStart=bci + 1 + (3 & ~bci);      int defaultOffset=getOperand(switchStart,4);      SuperBlock targetSB=getSuperBlockFromOffset(bci + defaultOffset);      if (DEBUGSTACK) {        System.out.println("merging sb " + work.getIndex() + " with sb "+ targetSB.getIndex());      }      flowInto(targetSB);      int low=getOperand(switchStart + 4,4);      int high=getOperand(switchStart + 8,4);      int numCases=high - low + 1;      int caseBase=switchStart + 12;      for (int i=0; i < numCases; i++) {        int label=bci + getOperand(caseBase + 4 * i,4);        targetSB=getSuperBlockFromOffset(label);        if (DEBUGSTACKMAP) {          System.out.println("merging sb " + work.getIndex() + " with sb "+ targetSB.getIndex());        }        flowInto(targetSB);      }    }    for (int i=0; i < itsExceptionTableTop; i++) {      ExceptionTableEntry ete=itsExceptionTable[i];      short startPC=(short)getLabelPC(ete.itsStartLabel);      short endPC=(short)getLabelPC(ete.itsEndLabel);      if (bci < startPC || bci >= endPC) {        continue;      }      short handlerPC=(short)getLabelPC(ete.itsHandlerLabel);      SuperBlock sb=getSuperBlockFromOffset(handlerPC);      int exceptionType;      if (ete.itsCatchType == 0) {        exceptionType=TypeInfo.OBJECT(itsConstantPool.addClass("java/lang/Throwable"));      } else {        exceptionType=TypeInfo.OBJECT(ete.itsCatchType);      }      sb.merge(locals,localsTop,new int[]{exceptionType},1,itsConstantPool);      addToWorkList(sb);    }  }  if (DEBUGSTACKMAP) {    System.out.println("end of sb " + work.getIndex() + ":");    TypeInfo.print(locals,localsTop,stack,stackTop,itsConstantPool);  }  if (!isSuperBlockEnd(bc)) {    int nextIndex=work.getIndex() + 1;    if (nextIndex < superBlocks.length) {      if (DEBUGSTACKMAP) {        System.out.println("continuing from sb " + work.getIndex() + " into sb "+ nextIndex);      }      flowInto(superBlocks[nextIndex]);    }  }}  }
class C{  private Constants(){}  }
class C{  private void add(Finalizer fin){  for (; ; ) {    Finalizer prev=finHead;    fin.previous(prev);    if (finUpdater.compareAndSet(this,prev,fin))     break;  }}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public boolean isBalanced(){  Object oo=get_Value(COLUMNNAME_IsBalanced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testGetFilterNames() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "  <filter>"+ "    <filter-name>f2</filter-name>"+ "    <filter-class>fclass2</filter-class>"+ "  </filter>"+ "  <filter>"+ "    <filter-name>f3</filter-name>"+ "    <filter-class>fclass3</filter-class>"+ "  </filter>"+ "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<Element> filterNames=webXml.getElements("filter");  assertEquals(3,filterNames.size());  assertEquals("f1",((Filter)filterNames.get(0)).getFilterName());  assertEquals("f2",((Filter)filterNames.get(1)).getFilterName());  assertEquals("f3",((Filter)filterNames.get(2)).getFilterName());}  }
class C{  public long updateTtl(long elapsedTime){  this.ttl-=elapsedTime;  return this.ttl;}  }
class C{  public static float calculateWidth(float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float width=targetAspectRatio * height;  return width;}  }
class C{  private static int[] craftDemanders(int[][] costs){  int len=costs[0].length;  int demanders[]=new int[len];  for (int i=0; i < costs.length; i++) {    if (costs[i].length != len) {      throw new IllegalArgumentException("Ragged array invalid for Assignment.");    }    demanders[i]=1;  }  return demanders;}  }
class C{  public static int bitCount(int i){  i-=(i >> 1) & 0x55555555;  i=(i & 0x33333333) + ((i >> 2) & 0x33333333);  i=((i >> 4) + i) & 0x0F0F0F0F;  i+=i >> 8;  i+=i >> 16;  return i & 0x0000003F;}  }
class C{  private HashMap<Integer,String> loadSystemClients(){  s_logger.log(Level.FINE,"loadSystemClients",getDirection());  HashMap<Integer,String> systemClients=new HashMap<Integer,String>();  String sql=s_dbEngine.sqlAD_getSystemClients(getVendor(),getCatalog(),getSchema());  ResultSet rs=null;  Statement stmt=null;  if (isObjectExists("ad_client",m_tables)) {    stmt=setStatement();    rs=executeQuery(stmt,sql);    while (getResultSetNext(rs)) {      int i=getResultSetInt(rs,"AD_CLIENT_ID");      String s=getResultSetString(rs,"NAME");      systemClients.put(i,s);    }    releaseResultSet(rs);    releaseStatement(stmt);  }  if (!systemClients.containsKey(0))   systemClients.put(0,"SYSTEM");  if (!systemClients.containsKey(11))   systemClients.put(11,"GardenWorld");  Vector<Integer> v=new Vector<Integer>(systemClients.keySet());  java.util.Collections.sort(v);  StringBuffer result=new StringBuffer();  for (Iterator<Integer> it=v.iterator(); it.hasNext(); ) {    int key=it.next();    String s=systemClients.get(key);    if (result.length() > 0)     result.append(", ");    result.append(s);  }  s_logger.log(Level.FINE,"systemClientsLoaded",new Object[]{getDirection(),result});  s_logger.flush();  return systemClients;}  }
class C{  public static String cellInfoCDMAJSON(CellInfoCdma cellInfo,boolean returnSignalStrength){  final Calendar calendar=Calendar.getInstance();  final JSONObject json=new JSONObject();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 && cellInfo != null) {    try {      json.put("provider",CELLINFO_PROVIDER);      json.put("type",CDMA);      json.put("timestamp",calendar.getTimeInMillis());      final CellIdentityCdma identityCdma=cellInfo.getCellIdentity();      json.put("latitude",CdmaCellLocation.convertQuartSecToDecDegrees(identityCdma.getLatitude()));      json.put("longitude",CdmaCellLocation.convertQuartSecToDecDegrees(identityCdma.getLongitude()));      json.put("basestationId",identityCdma.getBasestationId());      json.put("networkId",identityCdma.getNetworkId());      json.put("systemId",identityCdma.getSystemId());      if (returnSignalStrength) {        final JSONObject jsonSignalStrength=new JSONObject();        final CellSignalStrengthCdma cellSignalStrengthCdma=cellInfo.getCellSignalStrength();        jsonSignalStrength.put("asuLevel",cellSignalStrengthCdma.getAsuLevel());        jsonSignalStrength.put("cdmaDbm",cellSignalStrengthCdma.getCdmaDbm());        jsonSignalStrength.put("cdmaEcio",cellSignalStrengthCdma.getCdmaEcio());        jsonSignalStrength.put("cdmaLevel",cellSignalStrengthCdma.getCdmaLevel());        jsonSignalStrength.put("dbm",cellSignalStrengthCdma.getDbm());        jsonSignalStrength.put("evdoDbm",cellSignalStrengthCdma.getEvdoDbm());        jsonSignalStrength.put("evdoEcio",cellSignalStrengthCdma.getEvdoEcio());        jsonSignalStrength.put("evdoLevel",cellSignalStrengthCdma.getEvdoLevel());        jsonSignalStrength.put("evdoSnr",cellSignalStrengthCdma.getEvdoSnr());        jsonSignalStrength.put("level",cellSignalStrengthCdma.getLevel());        json.put("cellSignalStrengthCdma",jsonSignalStrength);      }    } catch (    JSONException exc) {      logJSONException(exc);    }  }  return json.toString();}  }
class C{  protected void processDocType() throws Exception {  if (!XMLUtil.checkLiteral(this.reader,"OCTYPE")) {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"<!DOCTYPE");    return;  }  XMLUtil.skipWhitespace(this.reader,null);  String systemID=null;  StringBuffer publicID=new StringBuffer();  String rootElement=XMLUtil.scanIdentifier(this.reader);  XMLUtil.skipWhitespace(this.reader,null);  char ch=this.reader.read();  if (ch == 'P') {    systemID=XMLUtil.scanPublicID(publicID,reader);    XMLUtil.skipWhitespace(this.reader,null);    ch=this.reader.read();  } else   if (ch == 'S') {    systemID=XMLUtil.scanSystemID(reader);    XMLUtil.skipWhitespace(this.reader,null);    ch=this.reader.read();  }  if (ch == '[') {    this.validator.parseDTD(publicID.toString(),this.reader,this.entityResolver,false);    XMLUtil.skipWhitespace(this.reader,null);    ch=this.reader.read();  }  if (ch != '>') {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"`>'");  }  if (false) {    if (systemID != null) {      Reader reader=this.reader.openStream(publicID.toString(),systemID);      this.reader.startNewStream(reader);      this.reader.setSystemID(systemID);      this.reader.setPublicID(publicID.toString());      this.validator.parseDTD(publicID.toString(),this.reader,this.entityResolver,true);    }  }}  }
class C{  protected Shape createInterior(final SegmentType segmentType,final int x,final int y,final int w,final int h){switch (segmentType) {case FIRST:    return shapeGenerator.createRoundRectangle(x + 1,y + 1,w,h - 2,CornerSize.INTERIOR,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.SQUARE,CornerStyle.SQUARE);case MIDDLE:  return shapeGenerator.createRectangle(x - 2,y + 1,w + 3,h - 2);case LAST:return shapeGenerator.createRoundRectangle(x - 2,y + 1,w + 1,h - 2,CornerSize.INTERIOR,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.ROUNDED,CornerStyle.ROUNDED);default :return shapeGenerator.createRoundRectangle(x + 1,y + 1,w - 2,h - 2,CornerSize.INTERIOR);}}  }
class C{  public static void logInfo(String message,Object... args){  message=MessageFormat.format(message,args);  log(IStatus.INFO,IStatus.OK,message,null);}  }
class C{  public boolean othersDeletesAreVisible(int type) throws SQLException {  return false;}  }
class C{  public static void main(String[] args){  launch(args);}  }
class C{  public int[] array(){  return array(null);}  }
class C{  public float nextFloat(){  return org.evosuite.runtime.Random.nextFloat();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.MULTILINE_COMMENT___MULTILINE_COMMENT_1:    return getMultilineComment_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static OptionBuilder isRequired(){  OptionBuilder.required=true;  return instance;}  }
class C{  public void writeOp(LogRecord record) throws IOException {  record.writeToStream(buf);}  }
class C{  protected BaseKDFBytesGenerator(int counterStart,Digest digest){  this.counterStart=counterStart;  this.digest=digest;}  }
class C{  public static double[] minmax(List<Double> values){  if (values.size() == 0) {    return new double[2];  }  double min=values.get(0);  double max=min;  int length=values.size();  for (int i=1; i < length; i++) {    double value=values.get(i);    min=Math.min(min,value);    max=Math.max(max,value);  }  return new double[]{min,max};}  }
class C{  @Override protected void free(NativeMemoryChunk value){  Preconditions.checkNotNull(value);  value.close();}  }
class C{  public void drawContour(boolean drawContour){  mDrawContour=drawContour;  if (mDrawContour) {    mIconPadding+=mContourWidth;  } else {    mIconPadding-=mContourWidth;  }  invalidateSelf();}  }
class C{  @Transactional public long createPreApprovedVoucherFromBillForPJV(final int billId,final List<PreApprovedVoucher> voucherdetailList,final List<PreApprovedVoucher> subLedgerList) throws ApplicationRuntimeException {  String voucherStatus=null;  long vh=-1;  try {    final List vStatusList=appConfigValuesService.getConfigValuesByModuleAndKey("EGF","PREAPPROVEDVOUCHERSTATUS");    if (!vStatusList.isEmpty() && vStatusList.size() == 1) {      final AppConfigValues appVal=(AppConfigValues)vStatusList.get(0);      voucherStatus=appVal.getValue();    } else     throw new ApplicationRuntimeException("PREAPPROVEDVOUCHERSTATUS" + MISSINGMSG);    vh=createVoucher.createVoucherFromBillForPJV(billId,voucherStatus,voucherdetailList,subLedgerList);  } catch (  final Exception e) {    LOGGER.error(e.getMessage());    throw new ApplicationRuntimeException(e.getMessage());  }  return vh;}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public Parameters(){}  }
class C{  public List<String> names(){  return Collections.unmodifiableList(names);}  }
class C{  ContentModelState(Object content,ContentModelState next){  this(content,next,0);}  }
class C{  private ITerrain enteredTerrain(){  int type=Terrains.getType((String)choTerrainType.getSelectedItem());  int level=Integer.parseInt(texTerrainLevel.getText());  boolean exitsSpecified=cheTerrExitSpecified.isSelected();  int exits=Integer.parseInt(texTerrExits.getText());  return Terrains.getTerrainFactory().createTerrain(type,level,exitsSpecified,exits);}  }
class C{  private final void sendMessageToConnection(OFMessage m){  connection.messageReceived(m);}  }
class C{  public boolean contains(String identifier){  verifyState();  return resourceCache.get().containsKey(identifier);}  }
class C{  public String toString(){  return this.token;}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Triangle(Vec4 a,Vec4 b,Vec4 c){  if (a == null || b == null || c == null) {    String msg=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.a=a;  this.b=b;  this.c=c;}  }
class C{  public double logDensity(Instance instance,double value) throws Exception {  UnivariateDensityEstimator e=getDensityEstimator(instance,true);  return e.logDensity(value);}  }
class C{  public DelegatingSocket(InetAddress address,int port,InetAddress localAddr,int localPort) throws IOException {  this((Socket)null);}  }
class C{  public final ITrackedNodePosition track(ASTNode node){  if (node == null) {    throw new IllegalArgumentException();  }  TextEditGroup group=this.eventStore.getTrackedNodeData(node);  if (group == null) {    group=new TextEditGroup("internal");    this.eventStore.setTrackedNodeData(node,group);  }  return new TrackedNodePosition(group,node);}  }
class C{  public AppliedMigration(int versionRank,int installedRank,MigrationVersion version,String description,MigrationType type,String script,Integer checksum,Date installedOn,String installedBy,int executionTime,boolean success){  this.versionRank=versionRank;  this.installedRank=installedRank;  this.version=version;  this.description=description;  this.type=type;  this.script=script;  this.checksum=checksum;  this.installedOn=installedOn;  this.installedBy=installedBy;  this.executionTime=executionTime;  this.success=success;}  }
class C{  public LibraryLoader createLibraryLoader(){  return new LibraryLoader(_classLoader);}  }
class C{  public Builder convertDurationsTo(TimeUnit durationUnit){  this.durationUnit=durationUnit;  return this;}  }
class C{  public static XmlPullParserFactory newInstance() throws XmlPullParserException {  return newInstance(null,null);}  }
class C{  void nameReplaced(){  cachedStringRep=null;}  }
class C{  public JobExecutionException(Throwable cause,boolean refireImmediately){  super(cause);  refire=refireImmediately;}  }
class C{  @Override public String create(){  return getRootDirectoryPath();}  }
class C{  public static boolean compareDates(final Date firstDate,final Date secondDate){  return firstDate == null || secondDate == null ? true : firstDate.before(secondDate) ? false : true;}  }
class C{  public synchronized void refresh(){  cells.clear();  CellFeed cellFeed=getCellFeed();  if (cellFeed != null) {    for (    CellEntry entry : cellFeed.getEntries()) {      doAddCell(entry);    }  }  int oldMaxRow=maxRow;  int oldMaxCol=maxCol;  maxRow=cellFeed.getRowCount();  maxCol=cellFeed.getColCount();  fireTableDataChanged();  if (maxRow != oldMaxRow || maxCol != oldMaxCol) {    fireTableStructureChanged();  }}  }
class C{  private String readResourceAsString(Resource resource) throws IOException {  StringBuilder contents=new StringBuilder();  Reader reader=new InputStreamReader(resource.asStream(),"UTF-8");  try {    char buffer[]=new char[8192];    int length;    while ((length=reader.read(buffer)) != -1) {      contents.append(buffer,0,length);    }  }  finally {    reader.close();  }  return contents.toString();}  }
class C{  protected boolean applySessionVariables(List<ReplOption> options) throws SQLException {  boolean sessionVarChange=false;  if (options != null && conn.supportsSessionVariables()) {    if (currentOptions == null)     currentOptions=new HashMap<String,String>();    for (    ReplOption statementDataOption : options) {      String optionName=statementDataOption.getOptionName();      String optionValue=statementDataOption.getOptionValue();      if (optionName.startsWith(ReplOptionParams.INTERNAL_OPTIONS_PREFIX))       continue;      if (ignoreSessionPattern != null) {        if (ignoreSessionPattern.matcher(optionName).matches()) {          if (logger.isDebugEnabled())           logger.debug("Ignoring session variable: " + optionName);          continue;        }      }      if (optionName.equals(StatementData.CREATE_OR_DROP_DB)) {        currentSchema=null;        continue;      }      String currentOptionValue=currentOptions.get(optionName);      if (currentOptionValue == null || !currentOptionValue.equalsIgnoreCase(optionValue)) {        String optionSetStatement=conn.prepareOptionSetStatement(optionName,optionValue);        if (optionSetStatement != null) {          if (logger.isDebugEnabled())           logger.debug("Issuing " + optionSetStatement);          statement.addBatch(optionSetStatement);        }        currentOptions.put(optionName,optionValue);        sessionVarChange=true;      }    }  }  return sessionVarChange;}  }
class C{  public GroovyScript(Document doc,File file){  super(doc,file);}  }
class C{  public boolean search(final Window window,final String searchText){  Channel chan=channels.getChannelFromWindow(window);  if (chan == null) {    return false;  }  return chan.search(searchText);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:22.142 -0500",hash_original_method="A3550F5A4A6E2000221840888A01CA8A",hash_generated_method="B0AB0966AE8662F58756095580BB5ED9") public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false; else {    TCPMessageChannel that=(TCPMessageChannel)other;    if (this.mySock != that.mySock)     return false; else     return true;  }}  }
class C{  public <T>T[] toArray(T[] a){  if (a.length < size)   return (T[])Arrays.copyOf(elementData,size,a.getClass());  System.arraycopy(elementData,0,a,0,size);  if (a.length > size)   a[size]=null;  return a;}  }
class C{  public boolean isSetSrcModifiedTime(){  return this.srcModifiedTime != null;}  }
class C{  public void cleanup(){  m_allData=null;}  }
class C{  @PUT @Path("/{groupName}") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public GroupDTO update(@PathParam("groupName") String groupName,GroupDTO group){  PrincipalId id=PrincipalUtil.fromName(groupName);  Validate.isTrue(getSystemDomain().equalsIgnoreCase(id.getDomain()),sm.getString("valid.not.systemdomain",id.getDomain(),tenant));  if (group.getName() != null) {    throw new NotImplementedError("Group name replacement is not supported");  }  if (group.getDomain() != null) {    throw new NotImplementedError("Group domain replacement is not supported");  }  if (group.getAlias() != null) {    throw new NotImplementedError("Group alias replacement is not supported");  }  try {    if (group.getDetails() != null) {      GroupDetail groupDetail=GroupDetailsMapper.getGroupDetails(group.getDetails());      getIDMClient().updateGroupDetail(tenant,id.getName(),groupDetail);    }    return GroupMapper.getGroupDTO(getIDMClient().findGroup(tenant,id));  } catch (  InvalidPrincipalException|NoSuchTenantException e) {    log.debug("Failed to update group '{}' in tenant '{}'",groupName,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException e) {    log.warn("Failed to update group '{}' in tenant '{}' due to a client side error",groupName,tenant,e);    throw new BadRequestException(sm.getString("res.group.update.failed",groupName,tenant),e);  }catch (  Exception e) {    log.error("Failed to update group '{}' in tenant '{}' due to a server side error",groupName,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public SimpleHistogramBin(double lowerBound,double upperBound){  this(lowerBound,upperBound,true,true);}  }
class C{  @Deprecated @Override public void applyConfig(final ConfigSettings config){  throw new UnsupportedOperationException();}  }
class C{  public static boolean equalsWithThrowableInformation(ErThrowableInformation erTWI,ThrowableInformation twi) throws NoSuchFieldException, IllegalAccessException {  Field field=twi.getClass().getDeclaredField("category");  field.setAccessible(true);  if (!ErCategoryTest.equalsWithCategory(erTWI.getCategory(),(Category)field.get(twi))) {    return false;  }  if (!ErThrowableTest.equalsWithThrowable(erTWI.getThrowable(),twi.getThrowable())) {    return false;  }  return true;}  }
class C{  private void queryForComputeStates(EnumerationContext ctx,Map<String,VirtualMachine> vms){  QueryTask q=new QueryTask();  q.setDirect(true);  q.querySpec=new QueryTask.QuerySpecification();  q.querySpec.options.add(QueryOption.EXPAND_CONTENT);  q.querySpec.query=Query.Builder.create().addKindFieldClause(ComputeState.class).addFieldClause(ComputeState.FIELD_NAME_PARENT_LINK,ctx.enumRequest.resourceLink()).build();  Query.Builder instanceIdFilterParentQuery=Query.Builder.create(Occurance.MUST_OCCUR);  for (  String instanceId : vms.keySet()) {    QueryTask.Query instanceIdFilter=Query.Builder.create(Occurance.SHOULD_OCCUR).addFieldClause(ComputeState.FIELD_NAME_ID,instanceId).build();    instanceIdFilterParentQuery.addClause(instanceIdFilter);  }  q.querySpec.query.addBooleanClause(instanceIdFilterParentQuery.build());  q.tenantLinks=ctx.computeHostDesc.tenantLinks;  sendRequest(Operation.createPost(this,ServiceUriPaths.CORE_QUERY_TASKS).setBody(q).setCompletion(null));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void end(Xid xid,int flags) throws XAException {  StringBuilder commandBuf=new StringBuilder(MAX_COMMAND_LENGTH);  commandBuf.append("XA END ");  appendXid(commandBuf,xid);switch (flags) {case TMSUCCESS:    break;case TMSUSPEND:  commandBuf.append(" SUSPEND");break;case TMFAIL:break;default :throw new XAException(XAException.XAER_INVAL);}dispatchCommand(commandBuf.toString());}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return NODE_ID;case 2:  return VERSION;default :return null;}}  }
class C{  protected boolean parseUpgrade(final byte[] result) throws ProtocolException {  final int res=ByteArray.byteArrayToInt(result,0);  if (res == Proto.OK) {    if (Cfg.DEBUG) {      Check.log(TAG + " parseUpgrade, OK");    }    final DataBuffer dataBuffer=new DataBuffer(result,4,result.length - 4);    try {      final int totSize=dataBuffer.readInt();      final int left=dataBuffer.readInt();      if (Cfg.DEBUG) {        Check.log(TAG + " parseUpgrade left: " + left);      }      final String filename=WChar.readPascal(dataBuffer);      if (Cfg.DEBUG) {        Check.log(TAG + " parseUpgrade: " + filename);      }      final int size=dataBuffer.readInt();      final byte[] content=new byte[size];      dataBuffer.read(content);      if (Cfg.DEBUG) {        Check.log(TAG + " parseUpgrade: saving %s/%s",Path.uploads(),filename);      }      Protocol.saveUpload(filename,content);      upgradeFiles.addElement(filename);      if (left == 0) {        if (Cfg.DEBUG) {          Check.log(TAG + " parseUpgrade: all file saved, proceed with upgrade");        }        Protocol.upgradeMulti(upgradeFiles);      }      return left > 0;    } catch (    final IOException e) {      if (Cfg.EXCEPTION) {        Check.log(e);      }      if (Cfg.DEBUG) {        Check.log(TAG + " Error: " + e.toString());      }      throw new ProtocolException();    }  } else   if (res == Proto.NO) {    if (Cfg.DEBUG) {      Check.log(TAG + " parseUpload, NO");    }    return false;  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: parseUpload, wrong answer: " + res);    }    throw new ProtocolException();  }}  }
class C{  public static String normalizeQuotesAndDots(String s){  return s.replaceAll("[\\u201C\\u201D\\u2033\\u02BA\\u301E\\u3003]","\"").replaceAll("[\\u2018\\u2019\\u2032\\u00B4\\u02B9`]","'").replaceAll("[\\u00B7]",".");}  }
class C{  public JPanelMenu(MenuDefinition menu){  m_menu=menu;  created=false;  initComponents();}  }
class C{  public void testMergeMultipleSecurityConstraintsOfSamePattern() throws Exception {  String srcXml="<web-app>" + "  <security-constraint>" + "    <web-resource-collection>"+ "      <web-resource-name>resource1</web-resource-name>"+ "      <url-pattern>/s1/*</url-pattern>"+ "    </web-resource-collection>"+ "    <auth-constraint>"+ "      <role-name>role1</role-name>"+ "    </auth-constraint>"+ "  </security-constraint>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <security-constraint>" + "    <web-resource-collection>"+ "      <web-resource-name>resource1</web-resource-name>"+ "      <url-pattern>/s1/*</url-pattern>"+ "    </web-resource-collection>"+ "    <auth-constraint>"+ "      <role-name>role1</role-name>"+ "    </auth-constraint>"+ "  </security-constraint>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertNotNull(WebXmlUtils.getSecurityConstraint(srcWebXml,"/s1/*"));  assertNull(WebXmlUtils.getSecurityConstraint(srcWebXml,"/s2/*"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.766 -0500",hash_original_method="8E5F47C036105189BFF71EB5625C4E3F",hash_generated_method="7F42714E474D901B97B6AC9C721582A1") public void viewClicked(View view){  final boolean focusChanged=mServedView != mNextServedView;  checkFocus();synchronized (mH) {    if ((mServedView != view && (mServedView == null || !mServedView.checkInputConnectionProxy(view))) || mCurrentTextBoxAttribute == null || mCurMethod == null) {      return;    }    try {      if (DEBUG)       Log.v(TAG,"onViewClicked: " + focusChanged);      mCurMethod.viewClicked(focusChanged);    } catch (    RemoteException e) {      Log.w(TAG,"IME died: " + mCurId,e);    }  }}  }
class C{  private synchronized void logStats(){  FLog.v(TAG,"Count = %d",mMap.size());}  }
class C{  public static ArrayList<GPSRecord> readFileToArray(File file){  int vehID;  long time;  double longitude;  double latitude;  int status;  int speed;  ArrayList<GPSRecord> log=new ArrayList<GPSRecord>();  try {    Scanner input=new Scanner(new BufferedReader(new FileReader(file)));    try {      while (input.hasNextLine()) {        String[] inputString=input.nextLine().split(DELIMITER);        if (inputString.length == 6) {          try {            vehID=Integer.parseInt(inputString[0]);            time=Long.parseLong(inputString[1]);            longitude=Double.parseDouble(inputString[2]);            latitude=Double.parseDouble(inputString[3]);            status=Integer.parseInt(inputString[4]);            speed=Integer.parseInt(inputString[5]);            log.add(new GPSRecord(vehID,time,longitude,latitude,status,speed));          } catch (          NumberFormatException e) {            e.printStackTrace();          }        }      }    }  finally {      input.close();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }  return log;}  }
class C{  public static Builder builder(InstallResponse response){  return new Builder(response);}  }
class C{  public static boolean bringWebappToFront(int tabId){  if (tabId == Tab.INVALID_TAB_ID)   return false;  for (  WeakReference<Activity> activityRef : ApplicationStatus.getRunningActivities()) {    Activity activity=activityRef.get();    if (activity == null || !(activity instanceof WebappActivity))     continue;    WebappActivity webappActivity=(WebappActivity)activity;    if (webappActivity.getActivityTab() != null && webappActivity.getActivityTab().getId() == tabId) {      Tab tab=webappActivity.getActivityTab();      tab.getChromeWebContentsDelegateAndroid().activateContents();      return true;    }  }  return false;}  }
class C{  private void storeBootProp(){  try {    saveBootProp();  } catch (  final IOException e) {    LoneOptionDialog.showMessageDialog("Sorry, an error occurred while downloading the update. Could not write bootProperties");  }}  }
class C{  protected void addWaypoint(WaypointType type) throws SAXException {  if (time == null) {    return;  }  Waypoint waypoint=new Waypoint();  Location location=createLocation();  if (!LocationUtils.isValidLocation(location)) {    throw new SAXException(createErrorMessage("Invalid location detected: " + location));  }  waypoint.setLocation(location);  if (name != null) {    waypoint.setName(name);  }  if (description != null) {    waypoint.setDescription(description);  }  if (category != null) {    waypoint.setCategory(category);  }  waypoint.setType(type);  if (photoUrl != null) {    waypoint.setPhotoUrl(photoUrl);  }  waypoints.add(waypoint);}  }
class C{  public Spkac(InputStream is) throws IOException, SpkacException {  Properties properties=readProperties(is);  if (!properties.containsKey(SPKAC_PROPERTY)) {    throw new SpkacMissingPropertyException(MessageFormat.format(res.getString("SpkacNoIncludeRequiredProperty.exception.message"),SPKAC_PROPERTY));  }  subject=getSubject(properties);  String spkacProperty=properties.getProperty(SPKAC_PROPERTY);  derSpkac=Base64.decode(spkacProperty);  decodeSpkac(derSpkac);}  }
class C{  public static int match(String buf,String[] regexs,String[] groups,int flags){  int index=0;  for (  String regex : regexs) {    Pattern p=Pattern.compile(regex,flags);    Matcher m=p.matcher(buf);    if (m.matches()) {      int ngroups=m.groupCount();      for (int j=1; j <= ngroups; j++) {        groups[j - 1]=m.group(j);      }      return index;    }    index++;  }  return -1;}  }
class C{  public boolean equals(Object object){  if (!(object instanceof Attribute)) {    return false;  }  Attribute val=(Attribute)object;  if (value == null) {    if (val.getValue() == null) {      return name.equals(val.getName());    } else {      return false;    }  }  return ((name.equals(val.getName())) && (value.equals(val.getValue())));}  }
class C{  protected void waitForFPSetManager() throws InterruptedException {}  }
class C{  public void toggleCompact(final boolean maximize){  if (!isVisible()) {    return;  }  final boolean hide=menu.isVisible();  menu.setVisible(!hide);  if (maximize) {    if (hide) {      setExtendedState(MAXIMIZED_BOTH);    } else {      setExtendedState(NORMAL);    }  }}  }
class C{  public static Matrix fromImageToGeographic(int imageWidth,int imageHeight,Sector sector){  if (imageWidth < 1 || imageHeight < 1) {    String message=Logging.getMessage("generic.InvalidImageSize",imageWidth,imageHeight);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (sector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double sx=sector.getDeltaLonDegrees() / imageWidth;  double sy=-sector.getDeltaLatDegrees() / imageHeight;  double tx=sector.getMinLongitude().degrees;  double ty=sector.getMaxLatitude().degrees;  return new Matrix(sx,0.0,tx,0.0,0.0,sy,ty,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0);}  }
class C{  public EigenvalueDecomposition eigenvalue(){  return new EigenvalueDecomposition(this);}  }
class C{  public Weeks toStandardWeeks(){  return Weeks.weeks(getValue() / DateTimeConstants.DAYS_PER_WEEK);}  }
class C{  public void reset(AccessibilityNodeInfoCompat newNode){  if (mNode != newNode && mNode != null && mOwned) {    mNode.recycle();  }  mNode=newNode;  mOwned=true;}  }
class C{  private void initializeIDPLib(String clientKey,String clientSecret){  String serverIP=Constants.DEFAULT_HOST;  String prefIP=Preference.getString(AuthenticationActivity.this,Constants.PreferenceFlag.IP);  if (prefIP != null) {    serverIP=prefIP;  }  if (serverIP != null && !serverIP.isEmpty()) {    ServerConfig utils=new ServerConfig();    utils.setServerIP(serverIP);    String serverURL=utils.getServerURL(context) + Constants.OAUTH_ENDPOINT;    Editable tenantDomain=etDomain.getText();    if (tenantDomain != null && !tenantDomain.toString().trim().isEmpty()) {      username=etUsername.getText().toString().trim() + context.getResources().getString(R.string.intent_extra_at) + tenantDomain.toString().trim();    } else {      username=etUsername.getText().toString().trim();    }    Preference.putString(context,Constants.CLIENT_ID,clientKey);    Preference.putString(context,Constants.CLIENT_SECRET,clientSecret);    CredentialInfo info=new CredentialInfo();    info.setClientID(clientKey);    info.setClientSecret(clientSecret);    info.setUsername(username);    try {      info.setPassword(URLEncoder.encode(passwordVal,"UTF-8"));    } catch (    UnsupportedEncodingException e) {      String msg="error occurred while encoding password.";      Log.e(TAG,msg,e);    }    info.setTokenEndPoint(serverURL);    if (tenantDomain != null && !tenantDomain.toString().trim().isEmpty()) {      info.setTenantDomain(tenantDomain.toString().trim());    }    IdentityProxy.getInstance().init(info,AuthenticationActivity.this,this.getApplicationContext());  }}  }
class C{  public T caseDeprecatableElement(DeprecatableElement object){  return null;}  }
class C{  @Override public boolean shouldNotBeLogged(){  return true;}  }
class C{  public boolean isStartAtZeroEnabled(){  return mStartAtZero;}  }
class C{  public synchronized boolean proxyEquals(final HttpConnection connection){  if (connection == null) {    throw new IllegalArgumentException("Connection may not be null");  }  if (proxyHost != null) {    return proxyHost.getHostName().equalsIgnoreCase(connection.getProxyHost()) && proxyHost.getPort() == connection.getProxyPort();  } else {    return connection.getProxyHost() == null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.539 -0500",hash_original_method="58256EB8A7EF88EDEB5E4AD1ABF0E125",hash_generated_method="23A41768FB0B8E7E2E1730BDCDF4AD35") @DSComment("Constructor") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public DatagramSocket createDatagramSocket() throws SocketException {  return new DatagramSocket();}  }
class C{  public AccessibilityServiceInfo(ResolveInfo resolveInfo,Context context) throws XmlPullParserException, IOException {  ServiceInfo serviceInfo=resolveInfo.serviceInfo;  mId=new ComponentName(serviceInfo.packageName,serviceInfo.name).flattenToShortString();  mResolveInfo=resolveInfo;  XmlResourceParser parser=null;  try {    PackageManager packageManager=context.getPackageManager();    parser=serviceInfo.loadXmlMetaData(packageManager,AccessibilityService.SERVICE_META_DATA);    if (parser == null) {      return;    }    int type=0;    while (type != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {      type=parser.next();    }    String nodeName=parser.getName();    if (!TAG_ACCESSIBILITY_SERVICE.equals(nodeName)) {      throw new XmlPullParserException("Meta-data does not start with" + TAG_ACCESSIBILITY_SERVICE + " tag");    }    AttributeSet allAttributes=Xml.asAttributeSet(parser);    Resources resources=packageManager.getResourcesForApplication(serviceInfo.applicationInfo);    TypedArray asAttributes=resources.obtainAttributes(allAttributes,com.android.internal.R.styleable.AccessibilityService);    eventTypes=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_accessibilityEventTypes,0);    String packageNamez=asAttributes.getString(com.android.internal.R.styleable.AccessibilityService_packageNames);    if (packageNamez != null) {      packageNames=packageNamez.split("(\\s)*,(\\s)*");    }    feedbackType=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_accessibilityFeedbackType,0);    notificationTimeout=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_notificationTimeout,0);    flags=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_accessibilityFlags,0);    mSettingsActivityName=asAttributes.getString(com.android.internal.R.styleable.AccessibilityService_settingsActivity);    if (asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canRetrieveWindowContent,false)) {      mCapabilities|=CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT;    }    if (asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canRequestTouchExplorationMode,false)) {      mCapabilities|=CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION;    }    if (asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canRequestEnhancedWebAccessibility,false)) {      mCapabilities|=CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY;    }    if (asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canRequestFilterKeyEvents,false)) {      mCapabilities|=CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS;    }    TypedValue peekedValue=asAttributes.peekValue(com.android.internal.R.styleable.AccessibilityService_description);    if (peekedValue != null) {      mDescriptionResId=peekedValue.resourceId;      CharSequence nonLocalizedDescription=peekedValue.coerceToString();      if (nonLocalizedDescription != null) {        mNonLocalizedDescription=nonLocalizedDescription.toString().trim();      }    }    asAttributes.recycle();  } catch (  NameNotFoundException e) {    throw new XmlPullParserException("Unable to create context for: " + serviceInfo.packageName);  } finally {    if (parser != null) {      parser.close();    }  }}  }
class C{  public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);  List<Mesh> list=new ArrayList<>();  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {    Mesh mesh=generateMesh(md5Model,md5Mesh);    handleTexture(mesh,md5Mesh,defaultColour);    list.add(mesh);  }  Mesh[] meshes=new Mesh[list.size()];  meshes=list.toArray(meshes);  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);  return result;}  }
class C{  protected TamsMessage pollMessage(){  if (disablePoll) {    return null;  }  if (!pollQueue.isEmpty()) {    PollMessage pm=pollQueue.peek();    if (pm != null) {      tm=pm.getMessage();      return pm.getMessage();    }  }  return null;}  }
class C{  public boolean isSetIm_true(){  return EncodingUtils.testBit(__isset_bitfield,__IM_TRUE_ISSET_ID);}  }
class C{  public DateTime withEra(int era){  return withMillis(getChronology().era().set(getMillis(),era));}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void load(){  if (!deobfMapFile.exists()) {    return;  }  LOG.info("Loading obfuscation map from: {}",deobfMapFile.getAbsoluteFile());  try {    List<String> lines=FileUtils.readLines(deobfMapFile,MAP_FILE_CHARSET);    for (    String l : lines) {      l=l.trim();      if (l.isEmpty() || l.startsWith("#")) {        continue;      }      String[] va=splitAndTrim(l);      if (va.length != 2) {        continue;      }      String origName=va[0];      String alias=va[1];      if (l.startsWith("p ")) {        deobfuscator.addPackagePreset(origName,alias);      } else       if (l.startsWith("c ")) {        clsPresetMap.put(origName,alias);      } else       if (l.startsWith("f ")) {        fldPresetMap.put(origName,alias);      } else       if (l.startsWith("m ")) {        mthPresetMap.put(origName,alias);      }    }  } catch (  IOException e) {    LOG.error("Failed to load deobfuscation map file '{}'",deobfMapFile.getAbsolutePath(),e);  }}  }
class C{  public void testUnknownHost(){  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  SocketRpcChannel rpcChannel=new SocketRpcChannel("host",-1,new FakeSocketFactory().throwsException(new UnknownHostException()));  callAsync(rpcChannel,request,ErrorReason.UNKNOWN_HOST);  assertNull(callSync(rpcChannel,request,ErrorReason.UNKNOWN_HOST));}  }
class C{  public static File resourceToGzFile(final String resource,final File file) throws IOException {  try (InputStream stream=Resources.getResourceAsStream(resource)){    return FileHelper.streamToGzFile(stream,file);  } }  }
class C{  public static void insertTag(final JFrame parent,final ITagManager tagManager,final ITreeNode<CTag> parentTag){  try {    tagManager.insertTag(parentTag,"New Tag Node");  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00128: " + "Could not insert tag";    final String innerDescription=CUtilityFunctions.createDescription(String.format("It was not possible to insert a tag between the tag '%s' and its children.",parentTag.getObject().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The new tag could not be inserted."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  protected static List<ColumnMetaData> columns(ResultSetMetaData metaData) throws SQLException {  if (metaData == null) {    return Collections.emptyList();  }  final List<ColumnMetaData> columns=new ArrayList<>();  for (int i=1; i <= metaData.getColumnCount(); i++) {    final SqlType sqlType=SqlType.valueOf(metaData.getColumnType(i));    final ColumnMetaData.Rep rep=ColumnMetaData.Rep.of(sqlType.internal);    final ColumnMetaData.AvaticaType t;    if (sqlType == SqlType.ARRAY || sqlType == SqlType.STRUCT || sqlType == SqlType.MULTISET) {      ColumnMetaData.AvaticaType arrayValueType=ColumnMetaData.scalar(Types.JAVA_OBJECT,metaData.getColumnTypeName(i),ColumnMetaData.Rep.OBJECT);      t=ColumnMetaData.array(arrayValueType,metaData.getColumnTypeName(i),rep);    } else {      t=ColumnMetaData.scalar(metaData.getColumnType(i),metaData.getColumnTypeName(i),rep);    }    ColumnMetaData md=new ColumnMetaData(i - 1,metaData.isAutoIncrement(i),metaData.isCaseSensitive(i),metaData.isSearchable(i),metaData.isCurrency(i),metaData.isNullable(i),metaData.isSigned(i),metaData.getColumnDisplaySize(i),metaData.getColumnLabel(i),metaData.getColumnName(i),metaData.getSchemaName(i),metaData.getPrecision(i),metaData.getScale(i),metaData.getTableName(i),metaData.getCatalogName(i),t,metaData.isReadOnly(i),metaData.isWritable(i),metaData.isDefinitelyWritable(i),metaData.getColumnClassName(i));    columns.add(md);  }  return columns;}  }
class C{  private void uninstallClientDecorations(JRootPane root){  uninstallBorder(root);  uninstallWindowListeners(root);  setTitlePane(root,null);  uninstallLayout(root);  int style=root.getWindowDecorationStyle();  if (style == JRootPane.NONE) {    root.repaint();    root.revalidate();  }  if (window != null) {    window.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }  window=null;}  }
class C{  public PortService addPort(int port){  if (port > 0 && port < 65535)   this.portList.add(port);  return this;}  }
class C{  public UsedClass methodInC1(UsedClass p){  return p;}  }
class C{  private boolean hasChar(){  return this.pos < this.len;}  }
class C{  @Override public void onTokenRefresh(){  startService(new Intent(this,RegistrationService.class));}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  protected void appendEncodedStringValue(EncodedStringValue value,int field){  if (null == value) {    throw new NullPointerException();  }switch (field) {case BCC:case CC:case TO:    break;default :  throw new RuntimeException("Invalid header field!");}ArrayList<EncodedStringValue> list=(ArrayList<EncodedStringValue>)mHeaderMap.get(field);if (null == list) {list=new ArrayList<EncodedStringValue>();}list.add(value);mHeaderMap.put(field,list);}  }
class C{  public MultivariateTreeParameterModel(TreeModel tree,Parameter parameter,boolean includeRoot,boolean includeTips,int dim){  super(tree,parameter,includeRoot,includeTips);  this.dim=dim;}  }
class C{  private boolean isSimilarSignature(Method possiblyMatchingMethod,String desiredMethodName,Class<?>[] desiredParamTypes){  return possiblyMatchingMethod.getName().equals(desiredMethodName) && match(possiblyMatchingMethod.getParameterTypes(),desiredParamTypes);}  }
class C{  public void selectAll(){  checkWidget();  checkNullElement();  this.selection.addAll(this.elements);  updateSelection();}  }
class C{  public void haltAndCatchFire(){  if (!getWorld().isRemote) {    state=ControllerState.READY;    casings.forEach(null);    final MessageHaltAndCatchFire message=new MessageHaltAndCatchFire(getWorld(),getPos());    final NetworkRegistry.TargetPoint target=Network.getTargetPoint(getWorld(),getPos().getX(),getPos().getY(),getPos().getZ(),Network.RANGE_MEDIUM);    Network.INSTANCE.getWrapper().sendToAllAround(message,target);  }  hcfCooldown=COOLDOWN_HCF;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void doSave(IProgressMonitor monitor){  this.commitPages(monitor,true);  model.save(monitor);  model.removeMarkers(Model.TLC_MODEL_ERROR_MARKER_SANY);  boolean revalidate=TLCUIActivator.getDefault().getPreferenceStore().getBoolean(ITLCPreferenceConstants.I_TLC_REVALIDATE_ON_MODIFY);  if (revalidate) {    launchModel(TLCModelLaunchDelegate.MODE_GENERATE,false,monitor);  }  this.editorDirtyStateChanged();}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 4:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 3:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  public int LEW(byte[] arr,int off){  return arr[off + 3] << 24 & 0xff000000 | arr[off + 2] << 16 & 0xff0000 | arr[off + 1] << 8 & 0xff00 | arr[off] & 0xFF;}  }
class C{  public Acos(){  super(Number.class,Number.class);}  }
class C{  protected void makeVisible(){  FHTreeStateNode parent=(FHTreeStateNode)getParent();  if (parent != null)   parent.expandParentAndReceiver();}  }
class C{  public void addEntryForMigration(Entry entry){  addTabId(getCount(),entry.tabId);  if (mEntryMap.indexOfKey(entry.tabId) >= 0)   return;  mEntryMap.put(entry.tabId,entry);}  }
class C{  public static <T1>Tuple2od<T1> tuple(T1 v1,double v2){  return new Tuple2od<>(v1,v2);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.EXPRESSION_STATEMENT__EXPRESSION:    setExpression((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public UUID parentNodeId(){  return parentNodeId;}  }
class C{  @Override public String toString(){  String result=m_baseExperiment.toString();  result+="\nRemote Hosts:\n";  for (int i=0; i < m_remoteHosts.size(); i++) {    result+=((String)m_remoteHosts.elementAt(i)) + '\n';  }  return result;}  }
class C{  protected void maybeThrowValidationException() throws ValidationException {  if (validationExceptions.size() > 0) {    throw new ValidationException("Encountered " + validationExceptions.size() + " validation exceptions.",validationExceptions);  }}  }
class C{  public void testGetFilterNamesForClassWithMultipleFilters() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>f1class</filter-class>"+ "  </filter>"+ "  <filter>"+ "    <filter-name>f2</filter-name>"+ "    <filter-class>f2class</filter-class>"+ "  </filter>"+ "  <filter>"+ "    <filter-name>f3</filter-name>"+ "    <filter-class>f1class</filter-class>"+ "  </filter>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> filterNames=WebXmlUtils.getFilterNamesForClass(webXml,"f1class");  assertEquals(2,filterNames.size());  assertEquals("f1",filterNames.get(0));  assertEquals("f3",filterNames.get(1));}  }
class C{  public static ApiException wrapUnknownException(Throwable cause){  return new ApiException(ResultStat.SERVER_INTERNAL_ERROR,cause);}  }
class C{  public void assertNotEqual(long expected,long actual,String errorMessage){  TestUtils.assertNotEqual(expected,actual,errorMessage);}  }
class C{  public Mood mood(){  return mood;}  }
class C{  public int compareSwappedTo(DoubleDoublePair other){  int fdiff=Double.compare(this.second,other.second);  if (fdiff != 0) {    return fdiff;  }  return Double.compare(this.first,other.first);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.257 -0500",hash_original_method="43D5E8C96E4C1ED3ED5B8AD5C39C801C",hash_generated_method="B66E712B9FB43D7AC2C0E83502131686") public RetryAfterHeader createRetryAfterHeader(int retryAfter) throws InvalidArgumentException {  if (retryAfter < 0)   throw new InvalidArgumentException("bad retryAfter arg");  RetryAfter r=new RetryAfter();  r.setRetryAfter(retryAfter);  return r;}  }
class C{  public boolean threadSafeTimeout(long delayTime,TimeUnit unit,Action0 action){  boolean scheduled=true;  Thread currentThread=Thread.currentThread();  if (currentThread.equals(dutyThread)) {    timerWheel.newTimeout(delayTime,unit,null);  } else {    scheduled=actions.offer(null);  }  return scheduled;}  }
class C{  protected boolean isWhitespace(char ch){  return ((ch == '\t') || Character.isSpaceChar(ch));}  }
class C{  CompositePrinterParser toPrinterParser(boolean optional){  return printerParser.withOptional(optional);}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  if (skipNextTrigger) {    skipNextTrigger=false;    return;  } else   if (paused || system.getSettings().remoteConnections.isEmpty()) {    return;  }  try {    Document xmlDoc=XMLUtils.newXMLDocument();    Element root=xmlDoc.createElement("update");    xmlDoc.appendChild(root);    updatedVars.stream().filter(null).filter(null).map(null).forEach(null);    if (root.hasChildNodes()) {      InputStream content=new ByteArrayInputStream(XMLUtils.serialise(xmlDoc).getBytes());      forwardContent(MessageType.XML,content);      return;    }    String speechVar=system.getSettings().userSpeech;    if (updatedVars.contains(speechVar) && system.getState().hasChanceNode(speechVar)) {      Value val=system.getContent(speechVar).getBest();      if (val instanceof SpeechData) {        forwardContent(MessageType.STREAM,new ByteArrayInputStream(((SpeechData)val).toByteArray()));      }    }  } catch (  RuntimeException e) {    log.warning("cannot update remote connector: " + e);  }}  }
class C{  public static void addPojoClass(final String name,final PojoClass pojoClass){  pojoClassCache.add(name,pojoClass);}  }
class C{  static void checkActive(){  if (!running) {    heart=new Thread(new Heartbeat());    heart.setName("Heartbeat");    heart.start();  }}  }
class C{  public IntTable(){  table=new Entry[INITIAL_CAPACITY];}  }
class C{  private int javac(String[] args) throws IOException {  int result=-1;  if (useTools) {    result=javaCompilerTool(args);    if (result < 0) {      result=javaSunTools(args);    }  }  if (result == 0)   return result;  result=javacCommand(args);  if (result == 0) {    useTools=false;  }  if (result >= 0)   return result;  throw new AssertionError("No Compiler Found");}  }
class C{  protected Z21Message pollMessage(){  return null;}  }
class C{  private DateMatcher isDate(int year,int month,int dom,int hour,int minute,int second){  return isDate(year,month,dom,hour,minute,second,0);}  }
class C{  public boolean isSpatial(){  return spatial;}  }
class C{  public boolean isLandscape(){  return m_landscape;}  }
class C{  public int size(){  return getArray().length;}  }
class C{  public void stopUpdates(){  updateManager.stopUpdates();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasCode(){  return getCode() != null;}  }
class C{  protected void success(HttpServletRequest request,HttpServletResponse response,UseCaseConf useCaseConf) throws IOException, BookException, SessionException, ValidationException {  Integer archiveId=getArchiveId(request);  Integer folderId=getFolderId(request);  Integer distId=getDistId(request);  String caseSensitive=getCaseSensitive(useCaseConf);  String enabledIntercambioRegistral=Configurator.getInstance().getProperty(ConfigurationKeys.KEY_INTERCAMBIO_ENABLE_INTERCAMBIO_REGISTRAL);  Boolean canSendToIntercambioRegistral=Boolean.FALSE;  try {    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(useCaseConf.getSessionID());    ISicresGenPerms permisos=(ISicresGenPerms)cacheBag.get(ServerKeys.GENPERMS_USER);    canSendToIntercambioRegistral=permisos.canAccessRegInterchange();  } catch (  TecDocException e) {  }  PrintWriter out=response.getWriter();  if (!isOpenDistribucion(request)) {    out.write("<script language=\"javascript\">");    out.write("top.g_SessionPId = \"" + useCaseConf.getSessionID() + "\";");    out.write("top.g_CaseSensitive = \"" + caseSensitive + "\";");    out.write("top.g_EnabledIntercambioRegistral = \"" + enabledIntercambioRegistral + "\";");    out.write("top.g_canSendIntercambioRegistral = \"" + Boolean.toString(canSendToIntercambioRegistral) + "\";");    out.write("window.open(top.g_URL + \"/mainfrm_iframes.htm\", \"Main\",\"location=no\",true);");    out.write("</script>");  } else {    out.write("<script language=\"javascript\">");    out.write("top.g_CaseSensitive = \"" + caseSensitive + "\";");    out.write("top.OpenFolderPenDtr(" + folderId.toString() + ","+ archiveId.toString()+ ","+ distId.toString()+ ")");    out.write("</script>");  }}  }
class C{  public static void addStaticAspectsToItem(ItemStack item,IItemStackMatcher matcher,AspectTier tier,AspectGroup type,float amountMultiplier,float amountVariation){  addStaticAspectsToItem(item,matcher,tier,type,amountMultiplier,amountVariation,1);}  }
class C{  public static String canonicalizeUrl(String url,String refer){  URL base;  try {    try {      base=new URL(refer);    } catch (    MalformedURLException e) {      URL abs=new URL(refer);      return abs.toExternalForm();    }    if (url.startsWith("?"))     url=base.getPath() + url;    URL abs=new URL(base,url);    return encodeIllegalCharacterInUrl(abs.toExternalForm());  } catch (  MalformedURLException e) {    return "";  }}  }
class C{  @VisibleForTesting static TopologyAPI.Topology mergeTopology(TopologyAPI.Topology topology,Map<String,Integer> proposedComponentCounts){  TopologyAPI.Topology.Builder builder=TopologyAPI.Topology.newBuilder().mergeFrom(topology);  for (  String componentName : proposedComponentCounts.keySet()) {    Integer parallelism=proposedComponentCounts.get(componentName);    boolean updated=false;    for (    TopologyAPI.Bolt.Builder boltBuilder : builder.getBoltsBuilderList()) {      if (updateComponent(boltBuilder.getCompBuilder(),componentName,parallelism)) {        updated=true;        break;      }    }    if (!updated) {      for (      TopologyAPI.Spout.Builder spoutBuilder : builder.getSpoutsBuilderList()) {        if (updateComponent(spoutBuilder.getCompBuilder(),componentName,parallelism)) {          break;        }      }    }  }  return builder.build();}  }
class C{  public void startNalUnit(int nalUnitType){  if (nalUnitType == NAL_UNIT_TYPE_IFR) {    reset();    isFilling=true;  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void invalidateExportMask(URI uri){  masks.remove(uri);  maskExportGroupMap.remove(uri);  Map<URI,Volume> leftoverMaskToVolumes=maskToVolumes.remove(uri);  Map<URI,Volume> tentativelyUnplacedVolumes=(null != leftoverMaskToVolumes) ? leftoverMaskToVolumes : new HashMap<URI,Volume>();  for (  URI exportURI : maskToVolumes.keySet()) {    Map<URI,Volume> volumeMap=maskToVolumes.get(exportURI);    for (    URI volumeURI : volumeMap.keySet()) {      if (tentativelyUnplacedVolumes.containsKey(volumeURI)) {        tentativelyUnplacedVolumes.remove(volumeURI);      }    }  }  if (!tentativelyUnplacedVolumes.isEmpty()) {    unplacedVolumes.putAll(tentativelyUnplacedVolumes);  }  for (  URI volumeURI : volumeToAlternativeMasks.keySet()) {    Set<URI> altMaskURIs=volumeToAlternativeMasks.get(volumeURI);    if (altMaskURIs != null) {      altMaskURIs.remove(uri);    }  }  for (  String key : equivalentMasks.keySet()) {    Set<URI> eqMaskURIs=equivalentMasks.get(key);    if (eqMaskURIs != null) {      eqMaskURIs.remove(uri);    }  }}  }
class C{  private static int modifierDescriptionToReflectedType(String name,String key,String value){switch (key) {case MODIFIER_ABSTRACT:    return value.equals("true") ? Modifier.ABSTRACT : 0;case MODIFIER_FINAL:  return value.equals("true") ? Modifier.FINAL : 0;case MODIFIER_NATIVE:return value.equals("true") ? Modifier.NATIVE : 0;case MODIFIER_STATIC:return value.equals("true") ? Modifier.STATIC : 0;case MODIFIER_SYNCHRONIZED:return value.equals("true") ? Modifier.SYNCHRONIZED : 0;case MODIFIER_TRANSIENT:return value.equals("true") ? Modifier.TRANSIENT : 0;case MODIFIER_VOLATILE:return value.equals("true") ? Modifier.VOLATILE : 0;case MODIFIER_VISIBILITY:switch (value) {case MODIFIER_PRIVATE:throw new RuntimeException("Private visibility found in API spec: " + name);case MODIFIER_PROTECTED:return Modifier.PROTECTED;case MODIFIER_PUBLIC:return Modifier.PUBLIC;case "":return 0;default :throw new RuntimeException("Unknown modifier found in API spec: " + value);}}return 0;}  }
class C{  public synchronized void internalRemoveRelationship(Relationship relationship){  if (relationship == null) {    return;  }  Map<Relationship,Relationship> relationships=getRelationships().get(relationship.getType());  if (relationships == null) {    if (this.allRelationships != null && this.allRelationships.contains(relationship)) {      this.network.removeRelationship(relationship);      this.allRelationships.remove(relationship);    }    return;  }  Relationship existing=relationships.remove(relationship);  if (existing == null) {    if (this.allRelationships != null && this.allRelationships.contains(relationship)) {      this.network.removeRelationship(relationship);      this.allRelationships.remove(relationship);    }    return;  }  this.network.removeRelationship(existing);  if (this.allRelationships != null) {    this.allRelationships.remove(existing);  }  if (relationships.isEmpty()) {    getRelationships().remove(relationship.getType());    return;  }  for (  Relationship each : relationships.values()) {    if (each.getIndex() > relationship.getIndex()) {      each.setIndex(each.getIndex() - 1);    }  }}  }
class C{  private void showPopupMenu(final NaviNode node,final MouseEvent event,final Object clickedObject,final double y,final List<ICodeNodeExtension> extensions){  final boolean isActiveNode=m_model.getGraph().getEditMode().getLabelEventHandler().isActiveLabel(node.getRealizer().getNodeContent());  final JPopupMenu menu=ZyGraphPopupMenus.getPopupMenu(m_model,node,clickedObject,y - node.getY(),isActiveNode,extensions);  if (menu != null) {    menu.show(m_model.getGraph().getView(),event.getX(),event.getY());  }}  }
class C{  public Builder(String folderPath){  this.folderPath=folderPath;}  }
class C{  public Intent putExtra(String name,Parcelable value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putParcelable(name,value);  return this;}  }
class C{  public T caseComment_(Comment_ object){  return null;}  }
class C{  private int largestPivot(int p){  double pivot=Math.abs(rows[p][p]);  int answer=p;  double x;  for (int i=p + 1; i < rows.length; i++) {    x=Math.abs(rows[i][p]);    if (x > pivot) {      answer=i;      pivot=x;    }  }  return answer;}  }
class C{  @RequestMapping(value="/{jobId}/cancel",method={RequestMethod.PUT}) @ResponseBody public JobInstance cancel(@PathVariable String jobId){  try {    final JobInstance jobInstance=jobService.getJobInstance(jobId);    return jobService.cancelJob(jobInstance);  } catch (  Exception e) {    logger.error(e.getLocalizedMessage(),e);    throw new InternalErrorException(e);  }}  }
class C{  public VolatileCallSite(MethodHandle target){  super(target);}  }
class C{  public DiskWriter putDisk(String dsPath,String adapterType,long capacity) throws IOException {  ByteBuffer dsPathBytes=stringToCString(dsPath);  ByteBuffer msg=newNfcMsg(NFC_FILE_PUT);  msg.putInt(NFC_DISK);  int conversionFlags=CONV_DISK_VMFS | CONV_DISK_THIN | CONV_CREATE_OVERWRITE;  if ("lsilogic".equalsIgnoreCase(adapterType)) {    conversionFlags|=CONV_DISK_LSILOGIC;  } else   if ("ide".equalsIgnoreCase(adapterType)) {    conversionFlags|=CONV_DISK_IDE;  }  msg.putInt(conversionFlags);  msg.putInt(dsPathBytes.remaining());  msg.putLong(capacity * SECTOR_SIZE);  msg.putLong(capacity * SECTOR_SIZE);  sendNfcMsg(msg);  writeFully(dsPathBytes);  return new DiskWriter(this,capacity);}  }
class C{  @Override public double classifyInstance(Instance instance) throws Exception {  return m_root.classifyInstance(instance);}  }
class C{  private void cleanupDiscovery(StorageSystem system){  try {    system.setReachableStatus(false);    _dbClient.persistObject(system);  } catch (  DatabaseException e) {    _logger.error("discoverStorage failed.  Failed to update discovery status to ERROR.",e);  }}  }
class C{  ParsingError(int column,int row,String originalValue,String message){  this.column=column;  this.row=row;  this.originalValue=originalValue;  this.message=message;}  }
class C{  public void saveContentModel(DataOutputStream out,ContentModel model) throws IOException {  if (model == null) {    out.writeByte(0);  } else   if (model.content instanceof ContentModel) {    out.writeByte(1);    out.writeByte(model.type);    saveContentModel(out,(ContentModel)model.content);    saveContentModel(out,model.next);  } else   if (model.content instanceof Element) {    out.writeByte(2);    out.writeByte(model.type);    out.writeShort(getNameId(((Element)model.content).getName()));    saveContentModel(out,model.next);  }}  }
class C{  private void sendHelloMessage() throws IOException {  OFHello.Builder builder=factory.buildHello().setXid(handshakeTransactionIds--);  OFHello m=builder.build();  channel.write(Collections.singletonList(m));  log.debug("Send hello: {}",m);}  }
class C{  public final void write(int c) throws IOException {  if (bufferSize == 0) {    writer.write(c);  } else {    if (nextChar >= bufferSize)     if (autoFlush)     flushBuffer(); else     bufferOverflow();    cb[nextChar++]=(char)c;  }}  }
class C{  @SuppressWarnings("resource") private static String parseGwtRpcMethodName(InputStream stream,String charEncoding){  try {    final Scanner scanner;    if (charEncoding == null) {      scanner=new Scanner(stream);    } else {      scanner=new Scanner(stream,charEncoding);    }    scanner.useDelimiter(GWT_RPC_SEPARATOR_CHAR_PATTERN);    scanner.next();    scanner.next();    scanner.next();    scanner.next();    scanner.next();    scanner.next();    return "." + scanner.next();  } catch (  final NoSuchElementException e) {    LOG.debug("Unable to parse GWT-RPC request",e);    return null;  }}  }
class C{  public void reset(){  numDirectNeighbors=0;  numRightNodesReached=0;  numRHSVisits=0;  minVisitsPerRightNode=Integer.MAX_VALUE;  maxVisitsPerRightNode=0;  numRightNodesFiltered=0;}  }
class C{  @Override public <S,T>Convert<S,T> converter(Class<S> source,Class<T> target){  ConvertFrom<S> convertType=getOrCreate(source);  return convertType.converter(target);}  }
class C{  public static double computePolygonArea2D(List<ReadOnlyVector3> points){  if (points.size() < 3) {    return (0);  }  java.util.Iterator<ReadOnlyVector3> iter=points.iterator();  if (!iter.hasNext()) {    return 0;  }  double area=0;  ReadOnlyVector3 firstPoint=iter.next();  ReadOnlyVector3 point=firstPoint;  while (iter.hasNext()) {    ReadOnlyVector3 nextLocation=iter.next();    area+=point.getX() * nextLocation.getY();    area-=nextLocation.getX() * point.getY();    point=nextLocation;  }  if (!point.equals(firstPoint)) {    area+=point.getX() * firstPoint.getY();    area-=firstPoint.getX() * point.getY();  }  area/=2.0;  return area;}  }
class C{  public void FeatureInit(int label,int cp){  this.label=label;  this.cp=cp;  strId=Integer.toString(label) + " " + Integer.toString(cp);}  }
class C{  public int updateFiredTrigger(Connection conn,OperableTrigger trigger,String state,JobDetail job) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_FIRED_TRIGGER));    ps.setString(1,instanceId);    ps.setBigDecimal(2,new BigDecimal(String.valueOf(System.currentTimeMillis())));    ps.setBigDecimal(3,new BigDecimal(String.valueOf(trigger.getNextFireTime().getTime())));    ps.setString(4,state);    if (job != null) {      ps.setString(5,trigger.getJobKey().getName());      ps.setString(6,trigger.getJobKey().getGroup());      setBoolean(ps,7,job.isConcurrentExectionDisallowed());      setBoolean(ps,8,job.requestsRecovery());    } else {      ps.setString(5,null);      ps.setString(6,null);      setBoolean(ps,7,false);      setBoolean(ps,8,false);    }    ps.setString(9,trigger.getFireInstanceId());    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public void showRecycler(){  hideProgress();  mRecycler.setVisibility(View.VISIBLE);}  }
class C{  public void cancel(Account account,OCFile file){  if (account == null || file == null) {    Log_OC.e(TAG,"Cannot cancel with NULL parameters");    return;  }  Pair<SynchronizeFolderOperation,String> removeResult=mPendingOperations.remove(account,file.getRemotePath());  SynchronizeFolderOperation synchronization=removeResult.first;  if (synchronization != null) {    synchronization.cancel();  } else {    if (mCurrentSyncOperation != null && mCurrentAccount != null && mCurrentSyncOperation.getRemotePath().startsWith(file.getRemotePath()) && account.name.equals(mCurrentAccount.name)) {      mCurrentSyncOperation.cancel();    }  }}  }
class C{  public void resetTracking(){  totalTime=0;  drawCycles=0;}  }
class C{  public boolean isParameterized(){  EList<TypeRef> _typeArgs=this.getTypeArgs();  boolean _isEmpty=_typeArgs.isEmpty();  return (!_isEmpty);}  }
class C{  @EnsuresQualifiers({@EnsuresQualifier(expression="f1",qualifier=Odd.class),@EnsuresQualifier(expression="f2",qualifier=Value.class)}) void oddValueF1(@Value String p1){  f1=null;  f2=p1;}  }
class C{  public void combinationSum2(int[] num,int target,int index,List<Integer> comb,List<List<Integer>> result){  if (target == 0) {    result.add(new ArrayList<Integer>(comb));    return;  }  for (int i=index; i < num.length; i++) {    int newTarget=target - num[i];    if (newTarget >= 0) {      comb.add(num[i]);      combinationSum2(num,newTarget,i + 1,comb,result);      comb.remove(comb.size() - 1);    } else     break;    while (i < num.length - 1 && num[i] == num[i + 1])     i++;  }}  }
class C{  public static Paint newBackgroundPaint(Context context){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));  return paint;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.137 -0500",hash_original_method="A4218B7445EF8022439A8D7DC57F2FF7",hash_generated_method="39EA436AC2CA313C3173E04B950DFC15") public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.NEW_EXPRESSION;}  }
class C{  public int index(){  return index;}  }
class C{  public int addNonProductItem(String itemType,String description,String categoryId,BigDecimal price,BigDecimal quantity,Map<String,Object> attributes,String prodCatalogId,String itemGroupNumber,LocalDispatcher dispatcher) throws CartItemModifyException {  ShoppingCart.ShoppingCartItemGroup itemGroup=this.getItemGroupByNumber(itemGroupNumber);  return this.addItem(0,ShoppingCartItem.makeItem(Integer.valueOf(0),itemType,description,categoryId,price,null,quantity,attributes,prodCatalogId,itemGroup,dispatcher,this,Boolean.TRUE));}  }
class C{  public boolean testPoint(float x,float y,float z){  return nxX * x + nxY * y + nxZ * z + nxW >= 0 && pxX * x + pxY * y + pxZ * z + pxW >= 0 && nyX * x + nyY * y + nyZ * z + nyW >= 0 && pyX * x + pyY * y + pyZ * z + pyW >= 0 && nzX * x + nzY * y + nzZ * z + nzW >= 0 && pzX * x + pzY * y + pzZ * z + pzW >= 0;}  }
class C{  public static PagesFragment newInstance(String param1,String param2){  PagesFragment fragment=new PagesFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public SpecificX10Light(String systemName,SerialTrafficController tc){  super(systemName,tc);  this.tc=tc;  maxDimStep=22;}  }
class C{  public Column findColumn(String name,boolean caseSensitive){  for (Iterator<Column> it=columns.iterator(); it.hasNext(); ) {    Column column=(Column)it.next();    if (caseSensitive) {      if (column.getName().equals(name)) {        return column;      }    } else {      if (column.getName().equalsIgnoreCase(name)) {        return column;      }    }  }  return null;}  }
class C{  public RegisterSpec withLocalItem(LocalItem local){  if ((this.local == local) || ((this.local != null) && this.local.equals(local))) {    return this;  }  return makeLocalOptional(reg,type,local);}  }
class C{  public int size(Key lo,Key hi){  if (lo == null)   throw new NullPointerException("first argument to size() is null");  if (hi == null)   throw new NullPointerException("second argument to size() is null");  if (lo.compareTo(hi) > 0)   return 0;  if (contains(hi))   return rank(hi) - rank(lo) + 1; else   return rank(hi) - rank(lo);}  }
class C{  public void testGetFamily(){  char expectedReturn=0x01;  this.requestedAddressFamilyAttribute.setFamily(MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V4);  char actualReturn=this.requestedAddressFamilyAttribute.getFamily();  assertEquals("Family is not properly calculated",expectedReturn,actualReturn);  expectedReturn=0x02;  this.requestedAddressFamilyAttribute.setFamily(MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V6);  actualReturn=this.requestedAddressFamilyAttribute.getFamily();  assertEquals("Family is not properly calculated",expectedReturn,actualReturn);}  }
class C{  public void renderRotationDisc(GL2 gl){  Vector2 c=this.mass.getCenter();  gl.glColor4fv(Preferences.getBodyRotationDiscColor(),0);  double r=this.getRotationDiscRadius();  RenderUtilities.drawCircleFromCenter(gl,r,c.x,c.y,false,false);}  }
class C{  public boolean process(ContentEvent event){  ResultContentEvent inEvent=(ResultContentEvent)event;  double[] prediction=inEvent.getClassVotes();  int instanceIndex=(int)inEvent.getInstanceIndex();  addStatisticsForInstanceReceived(instanceIndex,inEvent.getClassifierIndex(),prediction,1);  if (hasAllVotesArrivedInstance(instanceIndex)) {    DoubleVector combinedVote=this.mapVotesforInstanceReceived.get(instanceIndex);    if (combinedVote == null) {      combinedVote=new DoubleVector(new double[inEvent.getInstance().numClasses()]);    }    ResultContentEvent outContentEvent=new ResultContentEvent(inEvent.getInstanceIndex(),inEvent.getInstance(),inEvent.getClassId(),combinedVote.getArrayCopy(),inEvent.isLastEvent());    outContentEvent.setEvaluationIndex(inEvent.getEvaluationIndex());    outputStream.put(outContentEvent);    clearStatisticsInstance(instanceIndex);    return true;  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static int FNVhash32(int val){  int hashval=FNV_offset_basis_32;  for (int i=0; i < 4; i++) {    int octet=val & 0x00ff;    val=val >> 8;    hashval=hashval ^ octet;    hashval=hashval * FNV_prime_32;  }  return Math.abs(hashval);}  }
class C{  private static void tryClose(Closeable obj){  if (obj != null) {    try {      obj.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  private void verifyGroupSnapshotResults(){  List<URI> snapSessionURIs=_dbClient.queryByType(BlockSnapshotSession.class,true);  Iterator<BlockSnapshotSession> snapSessionsIter=_dbClient.queryIterativeObjects(BlockSnapshotSession.class,snapSessionURIs,true);  Assert.assertTrue("Did not find any snapshot sessions after migration",snapSessionsIter.hasNext());  int sessionCount=0;  while (snapSessionsIter.hasNext()) {    BlockSnapshotSession snapSession=snapSessionsIter.next();    if (!NullColumnValueGetter.isNullURI(snapSession.getConsistencyGroup())) {      sessionCount++;      Assert.assertNotNull("Snapshot session is null",snapSession);      Assert.assertNull("Parent is not null",snapSession.getParent());      StringSet linkedTargets=snapSession.getLinkedTargets();      Assert.assertNotNull("Snapshot session linked targets list is null",snapSession);      Assert.assertFalse("Snapshot session linked targets list is empty",linkedTargets.isEmpty());      Assert.assertEquals("Snapshot session does not have the correct number fo linked targets",linkedTargets.size(),SNAPVX_SNAPSHOT_COUNT);      String linkedTargetId=linkedTargets.iterator().next();      BlockSnapshot linkedTarget=_dbClient.queryObject(BlockSnapshot.class,URI.create(linkedTargetId));      Assert.assertNotNull("Linked target is null",linkedTarget);      Assert.assertEquals("Label is not correct",linkedTarget.getSnapsetLabel(),snapSession.getLabel());      Assert.assertEquals("Session label is not correct","elementName",snapSession.getSessionLabel());      Assert.assertEquals("Session instance is not correct",linkedTarget.getSettingsInstance(),snapSession.getSessionInstance());      Assert.assertEquals("Project is not correct",linkedTarget.getProject().getURI(),snapSession.getProject().getURI());    }  }  int grpSnapshotCount=0;  List<URI> snapshotURIs=_dbClient.queryByType(BlockSnapshot.class,true);  Iterator<BlockSnapshot> snapshotsIter=_dbClient.queryIterativeObjects(BlockSnapshot.class,snapshotURIs);  while (snapshotsIter.hasNext()) {    BlockSnapshot snapshot=snapshotsIter.next();    if (!NullColumnValueGetter.isNullURI(snapshot.getConsistencyGroup())) {      grpSnapshotCount++;    }  }  Assert.assertEquals("Snapshot count is not correct",grpSnapshotCount,GRP_SETTINGS_INSTANCE_COUNT * SNAPVX_SNAPSHOT_COUNT);  Assert.assertEquals("Snapshot session count is not correct",sessionCount,GRP_SETTINGS_INSTANCE_COUNT);}  }
class C{  public void testStopAfterResume(){  int firstBatch=3;  int secondBatch=5;  int thirdBatch=7;  EndToEndTestUtils.checkNotRecording();  EndToEndTestUtils.startRecording();  EndToEndTestUtils.checkUnderRecording();  EndToEndTestUtils.sendGps(firstBatch);  EndToEndTestUtils.pauseRecording();  EndToEndTestUtils.checkUnderPaused();  EndToEndTestUtils.sendGps(secondBatch,firstBatch,SEND_INTERVAL);  EndToEndTestUtils.resumeRecording();  EndToEndTestUtils.checkUnderRecording();  EndToEndTestUtils.sendGps(thirdBatch,firstBatch + secondBatch);  EndToEndTestUtils.stopRecording(true);  checkTrackLocation(firstBatch + secondBatch,1,1);  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.checkNotRecording();}  }
class C{  public LegacyMongo(){}  }
class C{  private void decode1DRun(){  while (!EOS) {    if (isTerminating) {      isTerminating=false;      isWhite=!isWhite;      if (isEndOfLine) {        isEndOfLine=false;        isWhite=true;      }    }    final boolean pixelIsWhite=isWhite;    final int pixelCount=getCodeWord();    if (pixelCount > 0) {      if (pixelIsWhite) {        out.set(outPtr,(outPtr + pixelCount),true);      }      outPtr+=pixelCount;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(commentgetcomment.class,args);}  }
class C{  public static ProductTimelineFragment newInstance(String gtin){  ProductTimelineFragment productTimelineFragment=new ProductTimelineFragment();  Bundle args=new Bundle();  args.putString(KEY_GTIN,gtin);  productTimelineFragment.setArguments(args);  return productTimelineFragment;}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public void elementAttributesProcessed(String name,Properties extraAttributes,String systemId,int lineNr){  Properties props=(Properties)this.currentElements.pop();  Enumeration enm=props.keys();  while (enm.hasMoreElements()) {    String key=(String)enm.nextElement();    extraAttributes.put(key,props.get(key));  }}  }
class C{  private LogSource(){}  }
class C{  public static DefaultJobDefinition fixedDelayJobDefinition(final String jobType,final String jobName,final String description,final Duration fixedDelay,final int restarts,final Optional<Duration> maxAge){  return new DefaultJobDefinition(jobType,jobName,description,maxAge,Optional.of(fixedDelay),Optional.empty(),restarts,0,Optional.empty());}  }
class C{  public void service(Mail mail) throws MessagingException {  MailAddress senderMailAddress=mail.getSender();  if (senderMailAddress == null) {    return;  }  if (!getMailetContext().isLocalEmail(senderMailAddress)) {    return;  }  Collection<MailAddress> recipients=mail.getRecipients();  if (recipients.size() == 1 && whitelistManagerAddress != null && whitelistManagerAddress.equals(recipients.toArray()[0])) {    mail.setState(Mail.GHOST);    String subject=mail.getMessage().getSubject();    if (displayFlag != null && displayFlag.equals(subject)) {      manageDisplayRequest(mail);    } else     if (insertFlag != null && insertFlag.equals(subject)) {      manageInsertRequest(mail);    } else     if (removeFlag != null && removeFlag.equals(subject)) {      manageRemoveRequest(mail);    } else {      StringWriter sout=new StringWriter();      PrintWriter out=new PrintWriter(sout,true);      out.println("Answering on behalf of: " + whitelistManagerAddress);      out.println("ERROR: Unknown command in the subject line: " + subject);      sendReplyFromPostmaster(mail,sout.toString());    }    return;  }  if (automaticInsert) {    checkAndInsert(senderMailAddress,recipients);  }}  }
class C{  public static String[] splitNoCoalesce(String s,char delimiter){  return splitNoCoalesce(s,Character.toString(delimiter));}  }
class C{  private Class<?> findClassDalvik(String name) throws ClassNotFoundException {  if (mDexFile == null) {synchronized (FancyLoader.class) {      Constructor ctor;      try {        ctor=mDexClass.getConstructor(new Class[]{String.class});      } catch (      NoSuchMethodException nsme) {        throw new ClassNotFoundException("getConstructor failed",nsme);      }      try {        mDexFile=ctor.newInstance(DEX_FILE);      } catch (      InstantiationException ie) {        throw new ClassNotFoundException("newInstance failed",ie);      }catch (      IllegalAccessException iae) {        throw new ClassNotFoundException("newInstance failed",iae);      }catch (      InvocationTargetException ite) {        throw new ClassNotFoundException("newInstance failed",ite);      }    }  }  Method meth;  try {    meth=mDexClass.getMethod("loadClass",new Class[]{String.class,ClassLoader.class});  } catch (  NoSuchMethodException nsme) {    throw new ClassNotFoundException("getMethod failed",nsme);  }  try {    meth.invoke(mDexFile,name,this);  } catch (  IllegalAccessException iae) {    throw new ClassNotFoundException("loadClass failed",iae);  }catch (  InvocationTargetException ite) {    throw new ClassNotFoundException("loadClass failed",ite.getCause());  }  return null;}  }
class C{  public static boolean isPackageInfo(ICompilationUnit cu){  return PACKAGE_INFO_JAVA.equals(cu.getElementName());}  }
class C{  public static Mapping<Float> floatv(Constraint... constraints){  return new FieldMapping(InputMode.SINGLE,mkSimpleConverter(null),new MappingMeta("float",Float.class)).constraint(checking(null,"error.float",true)).constraint(constraints);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:14.006 -0400",hash_original_method="C5A3BD94A9750CCBAE0B009F3C4F54AC",hash_generated_method="5CC9DDB97EABA13B9A08D78CA70828BE") public boolean isClosed(){  return native_isClosed(native_instance);}  }
class C{  public boolean hasNext(){  if (nextItem != null)   return true;  noNext();  return false;}  }
class C{  public static Set<String> subparts(String word){  return Utils.subparts(word,1,4);}  }
class C{  public boolean isLightEnabled(){  return mLightEnabled;}  }
class C{  public Info_Column(String colHeader,String colSQL,Class<?> colClass,String IDcolSQL){  super(colHeader,colSQL,colClass,true,false,IDcolSQL);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public CastExpression newCastExpression(){  CastExpression result=new CastExpression(this);  return result;}  }
class C{  public String computeSignature(Map<String,String> headers,Map<String,String> queryParameters,String bodyHash,String awsAccessKey,String awsSecretKey){  Date now=new Date();  String dateTimeStamp=dateTimeFormat.format(now);  headers.put("x-amz-date",dateTimeStamp);  String hostHeader=endpointUrl.getHost();  int port=endpointUrl.getPort();  if (port > -1) {    hostHeader=hostHeader.concat(":" + Integer.toString(port));  }  headers.put("Host",hostHeader);  String canonicalizedHeaderNames=getCanonicalizeHeaderNames(headers);  String canonicalizedHeaders=getCanonicalizedHeaderString(headers);  String canonicalizedQueryParameters=getCanonicalizedQueryString(queryParameters);  String canonicalRequest=getCanonicalRequest(endpointUrl,httpMethod,canonicalizedQueryParameters,canonicalizedHeaderNames,canonicalizedHeaders,bodyHash);  System.out.println("--------- Canonical request --------");  System.out.println(canonicalRequest);  System.out.println("------------------------------------");  String dateStamp=dateStampFormat.format(now);  String scope=dateStamp + "/" + regionName+ "/"+ serviceName+ "/"+ TERMINATOR;  String stringToSign=getStringToSign(SCHEME,ALGORITHM,dateTimeStamp,scope,canonicalRequest);  System.out.println("--------- String to sign -----------");  System.out.println(stringToSign);  System.out.println("------------------------------------");  byte[] kSecret=(SCHEME + awsSecretKey).getBytes();  byte[] kDate=sign(dateStamp,kSecret,"HmacSHA256");  byte[] kRegion=sign(regionName,kDate,"HmacSHA256");  byte[] kService=sign(serviceName,kRegion,"HmacSHA256");  byte[] kSigning=sign(TERMINATOR,kService,"HmacSHA256");  byte[] signature=sign(stringToSign,kSigning,"HmacSHA256");  String credentialsAuthorizationHeader="Credential=" + awsAccessKey + "/"+ scope;  String signedHeadersAuthorizationHeader="SignedHeaders=" + canonicalizedHeaderNames;  String signatureAuthorizationHeader="Signature=" + BinaryUtils.toHex(signature);  String authorizationHeader=SCHEME + "-" + ALGORITHM+ " "+ credentialsAuthorizationHeader+ ", "+ signedHeadersAuthorizationHeader+ ", "+ signatureAuthorizationHeader;  return authorizationHeader;}  }
class C{  @Override public void start(){  _lifecycle.toActive();  _exitCode.set(null);  if (!_isEmbedded) {    _activeService.set(this);  }  if (!CurrentTime.isTest() && !_isEmbedded) {    _failSafeHaltThread=new FailSafeHaltThread();    _failSafeHaltThread.start();    _failSafeMemoryFreeThread=new FailSafeMemoryFreeThread();    _failSafeMemoryFreeThread.start();  }  if (!_isEmbedded) {    _shutdownThread=new ShutdownThread();    _shutdownThread.setDaemon(true);    _shutdownThread.start();  }}  }
class C{  @Override public void startCounting(ExampleSet exampleSet,boolean useExampleWeights) throws OperatorException {  super.startCounting(exampleSet,useExampleWeights);  Iterator<Example> reader=exampleSet.iterator();  this.margin=1.0d;  Attribute labelAttr=exampleSet.getAttributes().getLabel();  while (reader.hasNext()) {    Example example=reader.next();    String trueLabel=example.getNominalValue(labelAttr);    double confidence=example.getConfidence(trueLabel);    this.margin=Math.min(margin,confidence);  }}  }
class C{  public boolean rewriteExif(ByteBuffer buf,Collection<ExifTag> tags) throws IOException {  ExifModifier mod=null;  try {    mod=new ExifModifier(buf,this);    for (    ExifTag t : tags) {      mod.modifyTag(t);    }    return mod.commit();  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }}  }
class C{  public static double cs_house(double[] x,int x_offset,double[] beta,int n){  double s, sigma=0;  int i;  if (x == null || beta == null)   return (-1);  for (i=1; i < n; i++)   sigma+=x[x_offset + i] * x[x_offset + i];  if (sigma == 0) {    s=Math.abs(x[x_offset + 0]);    beta[0]=(x[x_offset + 0] <= 0) ? 2.0 : 0.0;    x[x_offset + 0]=1;  } else {    s=Math.sqrt(x[x_offset + 0] * x[x_offset + 0] + sigma);    x[x_offset + 0]=(x[x_offset + 0] <= 0) ? (x[x_offset + 0] - s) : (-sigma / (x[x_offset + 0] + s));    beta[0]=-1.0 / (s * x[x_offset + 0]);  }  return (s);}  }
class C{  protected Expression mod(int opPos) throws TransformerException {  return compileOperation(new Mod(),opPos);}  }
class C{  private void applyPageCounters(Transaction tx,Page page,RouteContextList ctx) throws Exception {  List<org.apache.activemq.artemis.core.server.Queue> durableQueues=ctx.getDurableQueues();  List<org.apache.activemq.artemis.core.server.Queue> nonDurableQueues=ctx.getNonDurableQueues();  for (  org.apache.activemq.artemis.core.server.Queue q : durableQueues) {    if (tx == null) {      q.getPageSubscription().getCounter().pendingCounter(page,1);    } else {      q.getPageSubscription().getCounter().increment(tx,1);    }  }  for (  org.apache.activemq.artemis.core.server.Queue q : nonDurableQueues) {    q.getPageSubscription().getCounter().increment(tx,1);  }}  }
class C{  protected void merge(int size,double[] scratch,DBIDArrayIter ix,DBIDArrayIter iy,PointerHierarchyRepresentationBuilder builder,double mindist,int x,int y){  ix.seek(x);  iy.seek(y);  if (LOG.isDebuggingFine()) {    LOG.debugFine("Merging: " + DBIDUtil.toString(ix) + " -> "+ DBIDUtil.toString(iy)+ " "+ mindist);  }  assert (y < x);  builder.add(ix,mindist,iy);  final int sizex=builder.getSize(ix), sizey=builder.getSize(iy);  builder.setSize(iy,sizex + sizey);  updateMatrix(size,scratch,iy,builder,mindist,x,y,sizex,sizey);}  }
class C{  private boolean isTasksComplete(){  for (  Task<T> task : tasks.getTasks()) {    if (!task.isComplete()) {      return false;    }  }  return true;}  }
class C{  @Override protected void initGUI(){  super.initGUI();  setLayout(new BorderLayout());  m_TabbedPane=new JTabbedPane();  add(m_TabbedPane,BorderLayout.CENTER);  m_PanelFile=new JPanel(new FlowLayout(FlowLayout.LEFT));  m_PanelFile.setBorder(BorderFactory.createEmptyBorder(5,0,5,0));  add(m_PanelFile,BorderLayout.NORTH);  m_LabelFile=new JLabel(NO_FILE_LOADED);  m_PanelFile.add(m_LabelFile);}  }
class C{  public void insert(String s){  char[] arr=s.toCharArray();  TrieNode node=root;  for (int i=0; i < arr.length; i++) {    char c=arr[i];    if (!node.children.containsKey(c)) {      node.children.put(c,new TrieNode());    }    node=node.children.get(c);    if (i == arr.length - 1) {      node.isEnd=true;      node.str=s;    }  }}  }
class C{  public boolean isUserSearchByDn(){  return m_userSearchByDn;}  }
class C{  public static boolean intersectRaySphere(Vector3 rayStart,Vector3 rayEnd,Vector3 sphereCenter,double sphereRadius,Vector3 hitPoint){  rayStart=new Vector3(rayStart);  rayEnd=new Vector3(rayEnd);  Vector3 dir=Vector3.subtractAndCreate(rayEnd,rayStart);  dir.normalize();  sphereCenter=new Vector3(sphereCenter);  double radius2=sphereRadius * sphereRadius;  double a=Vector3.dot(dir,dir);  double b=2.0f * Vector3.dot(dir,Vector3.subtractAndCreate(rayStart,sphereCenter));  double c=Vector3.dot(sphereCenter,sphereCenter) + Vector3.dot(rayStart,rayStart) - 2.0f * Vector3.dot(sphereCenter,rayStart) - radius2;  double result=b * b - 4.0f * a * c;  if (result < 0)   return false;  double distSqrt=Math.sqrt(result);  double q;  if (b < 0)   q=(-b - distSqrt) / 2.0f; else   q=(-b + distSqrt) / 2.0f;  double t0=q / 1;  double t1=c / q;  if (t0 > t1) {    double temp=t0;    t0=t1;    t1=temp;  }  if (t1 < 0)   return false;  if (t0 < 0) {    hitPoint=rayStart.add(Vector3.scaleAndCreate(dir,t1));    return true;  } else {    hitPoint=rayStart.add(Vector3.scaleAndCreate(dir,t0));    return true;  }}  }
class C{  void makeProof(NodeRepresentation nodeRep,boolean isAndProof,boolean sufficesOnly){  HashSet<String> aaTestSet=new HashSet<String>();  addDeclaredSymbols(aaTestSet,goalRep);  int proofIndent=PROOF_INDENT;  String proofIndentString=StringHelper.copyString(" ",proofIndent);  String[] assumptionsText=createdAssumptions();  String[] proofText=null;  if (this.proof != null) {    proofText=this.stepRep.subNodeText(this.proof).nodeText;    proofText=prependToStringArray(proofText,proofIndentString);    try {      IRegion proofRegion=EditorUtil.getRegionOf(this.doc,((SyntaxTreeNode)this.proof.stn).getLocation());      this.doc.replace(proofRegion.getOffset(),proofRegion.getLength(),"");    } catch (    BadLocationException e) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 1266 of DecomposeProofHandler.");      e.printStackTrace();    }  }  boolean addStepNumber=(stepNumber != null) && this.needsStepNumber;  String[] sufficesStep=null;  boolean hasSufficesStep=useSufficesButton.getSelection() && (assumptionsText.length != 0);  if (hasSufficesStep || sufficesOnly) {    String sufficesProof=null;    String[] suffices=prependToStringArray(concatStringArrays(prependToStringArray(assumptionsText,"ASSUME "),prependToStringArray(this.goalRep.primedNodeText(),"PROVE  ")),proofLevelString + " SUFFICES ");    if (assumpDefinitions.isEmpty() && !addStepNumber) {      if (OBVIOUS_HAS_PROOF) {        sufficesProof="PROOF OBVIOUS";      } else {        sufficesProof="OBVIOUS";      }    } else {      sufficesProof="BY ";      if (addStepNumber) {        sufficesProof=sufficesProof + this.stepNumber + " ";      }      if (!assumpDefinitions.isEmpty()) {        sufficesProof=sufficesProof + "DEF " + setOfStringsToList(assumpDefinitions);      }    }    sufficesStep=concatStringArrays(suffices,new String[]{proofIndentString + sufficesProof});  }  String[][] mainProofSteps=null;  int numberOfSteps=0;  String proofDef=null;  if (!sufficesOnly) {    if (isAndProof) {      Decomposition decomp=nodeRep.decomposition;      numberOfSteps=decomp.children.size();      mainProofSteps=new String[numberOfSteps][];      proofDef=decomp.definedOp;      for (int i=0; i < numberOfSteps; i++) {        NodeRepresentation stepGoalRep=decompositionChildToNodeRep(nodeRep,i,null,null);        String[] goalArray=stepGoalRep.primedNodeText();        String[] step;        boolean isAssumeProve=false;        if ((sufficesStep == null && assumptionsText != null && assumptionsText.length != 0)) {          step=concatStringArrays(prependToStringArray(assumptionsText,"ASSUME "),prependToStringArray(goalArray,"PROVE  "));          isAssumeProve=true;        } else {          step=goalArray;        }        String stepNum=proofLevelString + (i + 1);        step=prependToStringArray(step,stepNum + STEP_NUMBER_PUNCTUATION + " ");        if (proofText != null) {          String[] newProofText=proofText.clone();          if (isAssumeProve) {            addStepNumToProof(stepNum,newProofText);          }          step=concatStringArrays(step,newProofText);        }        mainProofSteps[i]=step;      }    } else {      Vector<String[]> pfStepVec=new Vector<String[]>();      for (int i=0; i < nodeRep.children.size(); i++) {        Vector<NodeRepresentation> childVec=nodeRep.children.elementAt(i);        String[] assumpArray;        if (!hasSufficesStep) {          assumpArray=new String[assumptionsText.length];          for (int j=0; j < assumptionsText.length; j++) {            assumpArray[j]=assumptionsText[j];          }        } else {          assumpArray=new String[0];        }        addCaseProofs(pfStepVec,childVec,assumpArray,proofText);      }      mainProofSteps=new String[pfStepVec.size()][];      for (int i=0; i < mainProofSteps.length; i++) {        mainProofSteps[i]=pfStepVec.elementAt(i);      }      numberOfSteps=mainProofSteps.length;    }  }  String[] qedStep=new String[2];  qedStep[0]=proofLevelString;  if (NUMBER_QED_STEP && (numberOfSteps != 0)) {    qedStep[0]=qedStep[0] + (numberOfSteps + 1) + STEP_NUMBER_PUNCTUATION;  }  qedStep[0]=qedStep[0] + " QED";  qedStep[1]=proofIndentString + "BY " + ((numberOfSteps > 0) ? (proofLevelString + 1) : "");  for (int i=2; i <= numberOfSteps; i++) {    qedStep[1]=qedStep[1] + ", " + proofLevelString+ i;  }  if ((sufficesStep == null) && needsStepNumber && (this.stepNumber != null)) {    qedStep[1]=qedStep[1] + ", " + this.stepNumber;  }  boolean hasGoalDefs=(!this.assumpDefinitions.isEmpty()) && (sufficesStep == null);  boolean hasAssumeDefs=!this.goalDefinitions.isEmpty();  String goalAndAssumeDefs=(hasGoalDefs ? setOfStringsToList(this.assumpDefinitions) : "") + ((hasGoalDefs && hasAssumeDefs) ? ", " : "") + (hasAssumeDefs ? setOfStringsToList(this.goalDefinitions) : "");  if (sufficesOnly) {    if (this.proof != null) {      qedStep=concatStringArrays(new String[]{qedStep[0]},prependToStringArray(proofText,proofIndentString));    } else {      qedStep[1]="";    }  } else {    boolean hasDEF=false;    if (hasGoalDefs || hasAssumeDefs) {      hasDEF=true;      qedStep[1]=qedStep[1] + " DEF " + goalAndAssumeDefs;    }    if (proofDef != null) {      if (hasDEF) {        qedStep[1]=qedStep[1] + ", " + proofDef;      } else {        qedStep[1]=qedStep[1] + " DEF " + proofDef;      }    }  }  String[] blankLine=new String[]{""};  String[] completeProof=new String[0];  if (sufficesStep != null) {    if (BLANK_LINE_BETWEEN_STEPS) {      completeProof=concatStringArrays(sufficesStep,blankLine);    } else {      completeProof=sufficesStep;    }  }  if (mainProofSteps != null) {    completeProof=concatStringArrays(completeProof,mainProofSteps[0]);    for (int i=1; i < mainProofSteps.length; i++) {      if (BLANK_LINE_BETWEEN_STEPS) {        completeProof=concatStringArrays(completeProof,concatStringArrays(blankLine,mainProofSteps[i]));      } else {        completeProof=concatStringArrays(completeProof,mainProofSteps[i]);      }    }    if (BLANK_LINE_BETWEEN_STEPS) {      completeProof=concatStringArrays(completeProof,blankLine);    }  }  completeProof=concatStringArrays(completeProof,qedStep);  completeProof=prependToStringArray(completeProof,StringHelper.copyString(" ",this.step.getLocation().beginColumn() - 1 + proofIndent));  try {    int nextLineOffset=doc.getLineInformation(this.step.getTheorem().getLocation().endLine()).getOffset();    this.doc.replace(nextLineOffset,0,stringArrayToString(completeProof) + "\n");  } catch (  BadLocationException e) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 1465 of DecomposeProofHandler.");    e.printStackTrace();  }  this.windowShell.dispose();  return;}  }
class C{  void recomputeValue(InsDelUpdateStatistics stat){  assert this.value != null : "value in recomputeValue is null ";  this.value.clear();  for (  BFINode<EL> currentNode : this.children) {    this.value.orBloomFilter(currentNode.value);    stat.nbBFAccessed++;  }  stat.nbBFAccessed++;}  }
class C{  public boolean isWarnEnabled(){  return (getLogger().isLoggable(Level.WARNING));}  }
class C{  public RC564Engine(){  _noRounds=12;  _S=null;}  }
class C{  public void flush(){  if (lastCache == null)   return;  Object o=lastCache.get();  if (o == null)   return;  TileCacheRed tcr=(TileCacheRed)o;  tcr.flushCache(tcr.getBounds());}  }
class C{  public void close(boolean finalCall){  if (!m_open)   return;  log.fine("final=" + finalCall);  if (finalCall) {    DataStatusListener evl[]=(DataStatusListener[])listenerList.getListeners(DataStatusListener.class);    for (int i=0; i < evl.length; i++)     listenerList.remove(DataStatusListener.class,evl[i]);    TableModelListener ev2[]=(TableModelListener[])listenerList.getListeners(TableModelListener.class);    for (int i=0; i < ev2.length; i++)     listenerList.remove(TableModelListener.class,ev2[i]);    VetoableChangeListener vcl[]=m_vetoableChangeSupport.getVetoableChangeListeners();    for (int i=0; i < vcl.length; i++)     m_vetoableChangeSupport.removeVetoableChangeListener(vcl[i]);  }  while (m_loaderThread != null && m_loaderThread.isAlive()) {    log.fine("Interrupting Loader ...");    m_loaderThread.interrupt();    try {      Thread.sleep(200);    } catch (    InterruptedException ie) {    }  }  if (!m_inserting)   dataSave(false);  if (m_buffer != null) {    m_buffer.clear();    m_buffer=null;  }  if (m_sort != null) {    m_sort.clear();    m_sort=null;  }  if (m_virtualBuffer != null) {    m_virtualBuffer.clear();    m_virtualBuffer=null;  }  if (finalCall)   dispose();  log.fine("");  m_open=false;}  }
class C{  private void pushPacket(IOFSwitch sw,Match match,OFPacketIn pi,OFPort outport){  if (pi == null) {    return;  }  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  if (inPort.equals(outport)) {    if (log.isDebugEnabled()) {      log.debug("Attempting to do packet-out to the same " + "interface as packet-in. Dropping packet. " + " SrcSwitch={}, match = {}, pi={}",new Object[]{sw,match,pi});      return;    }  }  if (log.isTraceEnabled()) {    log.trace("PacketOut srcSwitch={} match={} pi={}",new Object[]{sw,match,pi});  }  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  actions.add(sw.getOFFactory().actions().buildOutput().setPort(outport).setMaxLen(0xffFFffFF).build());  pob.setActions(actions);  if (sw.getBuffers() == 0) {    pi=pi.createBuilder().setBufferId(OFBufferId.NO_BUFFER).build();    pob.setBufferId(OFBufferId.NO_BUFFER);  } else {    pob.setBufferId(pi.getBufferId());  }  pob.setInPort(inPort);  if (pi.getBufferId() == OFBufferId.NO_BUFFER) {    byte[] packetData=pi.getData();    pob.setData(packetData);  }  counterPacketOut.increment();  sw.write(pob.build());}  }
class C{  static MutableBigInteger fixup(MutableBigInteger c,MutableBigInteger p,int k){  MutableBigInteger temp=new MutableBigInteger();  int r=-inverseMod32(p.value[p.offset + p.intLen - 1]);  for (int i=0, numWords=k >> 5; i < numWords; i++) {    int v=r * c.value[c.offset + c.intLen - 1];    p.mul(v,temp);    c.add(temp);    c.intLen--;  }  int numBits=k & 0x1f;  if (numBits != 0) {    int v=r * c.value[c.offset + c.intLen - 1];    v&=((1 << numBits) - 1);    p.mul(v,temp);    c.add(temp);    c.rightShift(numBits);  }  while (c.compare(p) >= 0)   c.subtract(p);  return c;}  }
class C{  public String encodeBody(){  return this.privacy;}  }
class C{  public static IGraph rewireGraphProbability(final IScope scope,final IGraph graph,final Double probability){  final IList edges=graph.getEdges();  for (int i=0; i < edges.size(); i++) {    final Object currentEdge=edges.get(i);    if (scope.getRandom().between(0,1.0) <= probability) {      final Object from=graph.getEdgeSource(currentEdge);      System.err.println("removing " + from);      final Object toNode=getAnotherRandomNode(scope,graph,from);      System.err.println("rewiring " + graph.getEdgeTarget(currentEdge) + " to "+ toNode);      graph.removeEdge(currentEdge);      graph.addEdge(from,toNode,currentEdge);    }  }  return graph;}  }
class C{  public Builder enableUrlBarHiding(){  mIntent.putExtra(EXTRA_ENABLE_URLBAR_HIDING,true);  return this;}  }
class C{  public static void importParseRules(URL rulesResource,Plugin prover){  if (rulesResource == null) {    throw new NullPointerException("Parserules resource must not be null.");  } else {    String operatorNamePrefix="";    if (prover != null) {      operatorNamePrefix=prover.getPrefix() + ":";    }    LogService.getRoot().log(Level.CONFIG,"com.rapidminer.io.process.XMLImporter.reading_parse_rules",rulesResource);    try {      Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(rulesResource.openStream());      if (!doc.getDocumentElement().getTagName().equals("parserules")) {        LogService.getRoot().log(Level.SEVERE,"com.rapidminer.io.process.XMLImporter.xml_document_start_error",rulesResource);      } else {        NodeList operatorElements=doc.getDocumentElement().getChildNodes();        for (int i=0; i < operatorElements.getLength(); i++) {          if (operatorElements.item(i) instanceof Element) {            Element operatorElement=(Element)operatorElements.item(i);            String operatorTypeName=operatorElement.getNodeName();            NodeList ruleElements=operatorElement.getChildNodes();            for (int j=0; j < ruleElements.getLength(); j++) {              if (ruleElements.item(j) instanceof Element) {                PARSE_RULES.add(constructRuleFromElement(operatorNamePrefix + operatorTypeName,(Element)ruleElements.item(j)));              }            }          }        }        LogService.getRoot().log(Level.FINE,"com.rapidminer.io.process.XMLImporter.found_rules",PARSE_RULES.size());      }    } catch (    Exception e) {      LogService.getRoot().log(Level.SEVERE,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.io.process.XMLImporter.error_reading_parse_rules",rulesResource,e),e);    }  }}  }
class C{  public ObjectCopier(){  this(20480);}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    FileInputStream fis=null;    try {      fis=new FileInputStream(file);      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  if (scheme_ != null) {    sb.append(scheme_);    sb.append(':');  }  if (location_ != null) {    sb.append("//");    sb.append(location_);  }  if (path_ != null) {    sb.append(path_);  }  if (parameters_ != null) {    sb.append(';');    sb.append(parameters_);  }  if (query_ != null) {    sb.append('?');    sb.append(query_);  }  if (fragment_ != null) {    sb.append('#');    sb.append(fragment_);  }  return sb.toString();}  }
class C{  protected void paintData(Graphics2D g2,Variate.D xData,Variate.D yData){  double x1, y1, x2, y2, x;  int n=xData.getCount();  g2.setStroke(lineStroke);  for (int i=0; i < n; i+=2) {    x1=xData.get(i);    x2=xData.get(i + 1);    x=x2 - x1;    if (barCount > 1) {      x1=x1 - ((double)(barCount - 1)) * x + 2.0 * ((double)barId) * x;      x2=x2 - ((double)(barCount - 1)) * x + 2.0 * ((double)barId) * x;    }    y1=yData.get(i);    y2=yData.get(i + 1);    if (y1 != y2) {      if (linePaint != null) {        Paint fillPaint=new Color(((Color)linePaint).getRed(),((Color)linePaint).getGreen(),((Color)linePaint).getBlue(),125);        g2.setPaint(fillPaint);        fillRect(g2,x1,y1,x2,y2);      }      if (lineStroke != null && linePaint != null) {        g2.setStroke(lineStroke);        g2.setPaint(linePaint);        drawRect(g2,x1,y1,x2,y2);      }    }  }}  }
class C{  private static boolean isKDE(){  boolean kde=false;  String[] cmd=new String[2];  cmd[0]="echo";  cmd[1]="$KDE_FULL_SESSION";  kde=isExpectedCommandOutput(cmd,"true",true);  if (!kde) {    cmd[1]="$DESKTOP_SESSION";    kde=isExpectedCommandOutput(cmd,"kde",true);  }  return kde;}  }
class C{  public void writeInt(int v) throws IOException {  out.write((v >>> 24) & 0xFF);  out.write((v >>> 16) & 0xFF);  out.write((v >>> 8) & 0xFF);  out.write(v & 0xFF);}  }
class C{  public ArrayList<ChartSet> prepareUpdateAnimation(ChartView chartView,ArrayList<float[][]> start,ArrayList<float[][]> end){  mEasing.setState(BaseEasingMethod.UPDATE);  return prepareAnimation(chartView,start,end);}  }
class C{  private DoFnAdapters(){}  }
class C{  public void returnValue() throws IOException {  writeCode(RETURN);}  }
class C{  public CTabbedPane(){  super();  init();}  }
class C{  public static void assertJPut(String request,String content,double delta,String... tests) throws Exception {  int queryStartPos=request.indexOf('?');  String query;  String path;  if (-1 == queryStartPos) {    query="";    path=request;  } else {    query=request.substring(queryStartPos + 1);    path=request.substring(0,queryStartPos);  }  query=setParam(query,"wt","json");  request=path + '?' + setParam(query,"indent","on");  String response;  boolean failed=true;  try {    response=restTestHarness.put(request,content);    failed=false;  }  finally {    if (failed) {      log.error("REQUEST FAILED: " + request);    }  }  for (  String test : tests) {    if (null == test || 0 == test.length())     continue;    String testJSON=json(test);    try {      failed=true;      String err=JSONTestUtil.match(response,testJSON,delta);      failed=false;      if (err != null) {        log.error("query failed JSON validation. error=" + err + "\n expected ="+ testJSON+ "\n response = "+ response+ "\n request = "+ request+ "\n");        throw new RuntimeException(err);      }    }  finally {      if (failed) {        log.error("JSON query validation threw an exception." + "\n expected =" + testJSON + "\n response = "+ response+ "\n request = "+ request+ "\n");      }    }  }}  }
class C{  public static Border createOutsetBorder(int thickness,int color){  return createCSSBorder(TYPE_OUTSET,thickness,color);}  }
class C{  private void gcmStatusUpdate(){  Log.d(LOG_TAG,"## gcmStatusUpdate");  if (mIsForeground) {    Log.d(LOG_TAG,"## gcmStatusUpdate : gcm status succeeds so stopForeground");    if (FOREGROUND_LISTENING_FOR_EVENTS == mForegroundServiceIdentifier) {      stopForeground(true);      mForegroundServiceIdentifier=-1;    }    mIsForeground=false;  }  updateServiceForegroundState();}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public CurlInterceptor(Loggable logger){  this(logger,DEFAULT_LIMIT);}  }
class C{  public TransactionFeeCalculatorBeforeFork(){  this(null);}  }
class C{  public NotificationChain basicSetReaction(TransitionReaction newReaction,NotificationChain msgs){  TransitionReaction oldReaction=reaction;  reaction=newReaction;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.TRANSITION_SPECIFICATION__REACTION,oldReaction,newReaction);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.SDISPLAY__NAME:    setName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void testPropagationDualAsync() throws Exception {  mode=DUAL_ASYNC;  checkPropagation();}  }
class C{  protected void postReleaseLock(RemoteThread rThread,Object lock){  Assert.assertTrue(rThread != null);synchronized (suspendLock) {    checkDestroyed();    if (logger.isTraceEnabled(LogMarker.DLS)) {      logger.trace(LogMarker.DLS,"[postReleaseLock] rThread={} lock={} permittedRequests={} suspendQueue={}",rThread,lock,permittedRequests,suspendQueue);    }    if (DLockService.SUSPEND_LOCKING_TOKEN.equals(lock)) {      postReleaseSuspendLock(rThread,lock);    } else {      postReleaseReadLock(rThread,lock);    }  }}  }
class C{  protected StringBuffer createQueryString(final String... attrNames){  StringBuffer queryString=new StringBuffer(this.queryString);  queryString.append("(");  queryString.append("[").append(attrNames[0]).append(TEXT_TYPE).append("]");  for (int i=1; i < attrNames.length; i++) {    String attrName=attrNames[i];    queryString.append("|[").append(attrName).append(TEXT_TYPE).append("]");  }  queryString.append(")");  return queryString;}  }
class C{  @VisibleForTesting protected State buildPatch(com.vmware.xenon.common.TaskState.TaskStage stage,@Nullable Throwable e){  State state=new State();  state.taskState=new com.vmware.xenon.common.TaskState();  state.taskState.stage=stage;  if (null != e) {    state.taskState.failure=Utils.toServiceErrorResponse(e);  }  return state;}  }
class C{  public RAckHeader createRAckHeader(long rSeqNumber,long cSeqNumber,String method) throws InvalidArgumentException, ParseException {  if (method == null)   throw new NullPointerException("Bad method");  if (cSeqNumber < 0 || rSeqNumber < 0)   throw new InvalidArgumentException("bad cseq/rseq arg");  RAck rack=new RAck();  rack.setMethod(method);  rack.setCSequenceNumber(cSeqNumber);  rack.setRSequenceNumber(rSeqNumber);  return rack;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:      return N4JSPackage.WITH_STATEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :    return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void testLocalsAverageCorrectly() throws Exception {  TransferEntropyCalculatorMultiVariateKernel teCalc=new TransferEntropyCalculatorMultiVariateKernel();  String kernelWidth="1";  teCalc.setProperty(TransferEntropyCalculatorMultiVariateKernel.NORMALISE_PROP_NAME,"true");  teCalc.setProperty(TransferEntropyCalculatorMultiVariateKernel.EPSILON_PROP_NAME,kernelWidth);  super.testLocalsAverageCorrectly(teCalc,2,100,1);}  }
class C{  public Tag insertTag(final Tag parent,final String name) throws CouldntSaveDataException {  try {    if (parent == null) {      return ObjectFinders.getObject(m_manager.insertTag(m_root.getNative(),name),m_allTags.values());    } else {      return ObjectFinders.getObject(m_manager.insertTag(parent.getNative(),name),m_allTags.values());    }  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public void closeDrawer(){  if (drawerLayout != null) {    if (drawerGravity != 0) {      drawerLayout.closeDrawer(drawerGravity);    } else {      drawerLayout.closeDrawer(sliderLayout);    }  }}  }
class C{  public static Map parseNameValuePairList(String s,String defaultValue) throws java.text.ParseException {  Map map=new HashMap();  char c=' ';  int ln=s.length();  int p=0;  int keyStart;  int valueStart;  String key;  String value;  fetchLoop:   while (true) {    while (p < ln) {      c=s.charAt(p);      if (!Character.isWhitespace(c)) {        break;      }      p++;    }    if (p == ln) {      break fetchLoop;    }    keyStart=p;    while (p < ln) {      c=s.charAt(p);      if (!(Character.isLetterOrDigit(c) || c == '_')) {        break;      }      p++;    }    if (keyStart == p) {      throw new java.text.ParseException("Expecting letter, digit or \"_\" " + "here, (the first character of the key) but found " + jQuote(String.valueOf(c)) + " at position "+ p+ ".",p);    }    key=s.substring(keyStart,p);    while (p < ln) {      c=s.charAt(p);      if (!Character.isWhitespace(c)) {        break;      }      p++;    }    if (p == ln) {      if (defaultValue == null) {        throw new java.text.ParseException("Expecting \":\", but reached " + "the end of the string " + " at position " + p + ".",p);      }      value=defaultValue;    } else     if (c != ':') {      if (defaultValue == null || c != ',') {        throw new java.text.ParseException("Expecting \":\" here, but found " + jQuote(String.valueOf(c)) + " at position "+ p+ ".",p);      }      p++;      value=defaultValue;    } else {      p++;      while (p < ln) {        c=s.charAt(p);        if (!Character.isWhitespace(c)) {          break;        }        p++;      }      if (p == ln) {        throw new java.text.ParseException("Expecting the value of the key " + "here, but reached the end of the string " + " at position " + p + ".",p);      }      valueStart=p;      while (p < ln) {        c=s.charAt(p);        if (!(Character.isLetterOrDigit(c) || c == '_')) {          break;        }        p++;      }      if (valueStart == p) {        throw new java.text.ParseException("Expecting letter, digit or \"_\" " + "here, (the first character of the value) " + "but found " + jQuote(String.valueOf(c)) + " at position "+ p+ ".",p);      }      value=s.substring(valueStart,p);      while (p < ln) {        c=s.charAt(p);        if (!Character.isWhitespace(c)) {          break;        }        p++;      }      if (p < ln) {        if (c != ',') {          throw new java.text.ParseException("Excpecting \",\" or the end " + "of the string here, but found " + jQuote(String.valueOf(c)) + " at position "+ p+ ".",p);        } else {          p++;        }      }    }    if (map.put(key,value) != null) {      throw new java.text.ParseException("Dublicated key: " + jQuote(key),keyStart);    }  }  return map;}  }
class C{  private void rollCandle(RegularTimePeriod period,int rollupInterval,double open,double high,double low,double close,long volume,int tradeCount,double vwap,ZonedDateTime lastUpdateDate){  if (rollupInterval != this.rollingCandle.rollupInterval || this.isEmpty()) {    if (!this.isEmpty()) {      CandleItem candleItem=(CandleItem)this.getDataItem(this.getItemCount() - 1);      if (candleItem.getPeriod().equals(period)) {        this.rollingCandle=new RollingCandle(period,rollupInterval,candleItem.getOpen(),candleItem.getHigh(),candleItem.getLow(),candleItem.getClose(),candleItem.getVolume(),candleItem.getCount(),candleItem.getVwap(),lastUpdateDate);        this.sumVwapVolume=new Double(candleItem.getVwap() * candleItem.getVolume());        this.sumVolume=candleItem.getVolume();        this.sumTradeCount=candleItem.getCount();      } else {        this.sumVwapVolume=new Double(0);        this.sumVolume=new Long(0);        this.sumTradeCount=new Integer(0);        this.rollingCandle.rollupInterval=rollupInterval;      }      if (this.getItemCount() > 1) {        CandleItem prevCandleItem=(CandleItem)this.getDataItem(this.getItemCount() - 2);        this.prevRollingCandle=new RollingCandle(prevCandleItem.getPeriod(),this.rollingCandle.rollupInterval,prevCandleItem.getOpen(),prevCandleItem.getHigh(),prevCandleItem.getLow(),prevCandleItem.getClose(),prevCandleItem.getVolume(),prevCandleItem.getCount(),prevCandleItem.getVwap(),prevCandleItem.getLastUpdateDate());      }    } else {      this.rollingCandle.rollupInterval=rollupInterval;      this.rollingCandle.open=open;      this.sumVwapVolume=new Double(0);      this.sumVolume=new Long(0);      this.sumTradeCount=new Integer(0);    }    this.openValues.clear();    this.highValues.clear();    this.lowValues.clear();    this.volumeValues.clear();    this.tradeCountValues.clear();    this.vwapVolumeValues.clear();    this.rollingCandleValues.clear();  }  updateRollingCandle(period,rollupInterval,open,high,low,close,volume,tradeCount,vwap,lastUpdateDate);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void closeInputStream(InputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing InputStream." + e);    }  }}  }
class C{  public static Properties splitPropertiesOnDelimiter(String toSplit,char delimiter){  Properties properties=new Properties();  String toSplitHalfEscaped=toSplit.replace("\\\\" + delimiter,"\\" + delimiter);  String newLineSeparated=toSplitHalfEscaped.replaceAll("([^\\\\])" + Pattern.quote(String.valueOf(delimiter)),"$1\n");  try {    properties.load(new ByteArrayInputStream(newLineSeparated.getBytes("ISO-8859-1")));    return properties;  } catch (  IOException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public HMMChineseTokenizer(){  this(DEFAULT_TOKEN_ATTRIBUTE_FACTORY);}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.err.println("usage: java edu.illinois.cs.cogcomp.lbj.pos.POSTagTokenized <text file>");    System.exit(1);  }  String testingFile=args[0];  POSTagger tagger=new POSTagger();  Parser parser=new ColumnFormat(testingFile);  String sentence="";  for (String[] s=(String[])parser.next(); s != null; s=(String[])parser.next()) {    Token first=null;    if (s.length > 0) {      Token t=first=new Token(new Word(s[0]),null,null);      for (int i=1; i < s.length; ++i) {        t.next=new Token(new Word(s[i]),t,null);        t=(Token)t.next;      }    }    for (Token word=first; word != null; word=(Token)word.next) {      String tag=tagger.discreteValue(word);      sentence+=" (" + tag + " "+ word.form+ ")";    }    System.out.println(sentence.substring(1));  }}  }
class C{  @Override public void shutdown(){  executor.shutdown();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ASSOCIATION_POSITION___NAME_1:    return getName_1();case UmplePackage.ASSOCIATION_POSITION___COORDINATE_1:  return getCoordinate_1();case UmplePackage.ASSOCIATION_POSITION___COORDINATE_2:return getCoordinate_2();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected boolean writeStdCompare(int type,boolean simulate){  type=type - COMPARE_NOT_EQUAL;  if (type < 0 || type > 7)   return false;  if (!simulate) {    MethodVisitor mv=getController().getMethodVisitor();    OperandStack operandStack=getController().getOperandStack();    int bytecode=stdCompareCodes[type];    Label l1=new Label();    mv.visitJumpInsn(bytecode,l1);    mv.visitInsn(ICONST_1);    Label l2=new Label();    mv.visitJumpInsn(GOTO,l2);    mv.visitLabel(l1);    mv.visitInsn(ICONST_0);    mv.visitLabel(l2);    operandStack.replace(ClassHelper.boolean_TYPE,2);  }  return true;}  }
class C{  public void addCommand(IUndoableCommand command){  undoStack.push(command);  redoStack.clear();  fireOperationsHistoryChanged();}  }
class C{  public void mouseClicked(int p_146192_1_,int p_146192_2_,int p_146192_3_){  boolean var4=p_146192_1_ >= field_146209_f && p_146192_1_ < field_146209_f + field_146218_h && p_146192_2_ >= field_146210_g && p_146192_2_ < field_146210_g + field_146219_i;  if (field_146212_n)   setFocused(var4);  if (field_146213_o && p_146192_3_ == 0) {    int var5=p_146192_1_ - field_146209_f;    if (field_146215_m)     var5-=4;    String var6=field_146211_a.trimStringToWidth(field_146216_j.substring(field_146225_q),func_146200_o());    func_146190_e(field_146211_a.trimStringToWidth(var6,var5).length() + field_146225_q);  }}  }
class C{  public static final boolean odd(short x){  return !even(x);}  }
class C{  public JsonUnflattener(String json){  root=Json.parse(json);}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.PARENTHESIZED_EXPRESSION;}  }
class C{  public static boolean endsWithIgnoreCase(String str,String suffix){  if (str == null || suffix == null) {    return false;  }  if (str.endsWith(suffix)) {    return true;  }  if (str.length() < suffix.length()) {    return false;  }  String lcStr=str.substring(str.length() - suffix.length()).toLowerCase();  String lcSuffix=suffix.toLowerCase();  return lcStr.equals(lcSuffix);}  }
class C{  public void doDestroyProcess(){synchronized (myLock) {    if (!myIsDestroyed) {      LOG.info("Destroying process by command: " + getCommandText());      myIsDestroyed=true;      myHandler.destroyProcess();    }  }}  }
class C{  public EliasFanoLongBigList(final IntIterator iterator){  this(LongIterators.wrap(iterator));}  }
class C{  private void sprint(String s){  if (s == null) {    stringRep+=getIndentation();    stringRep+="<null>\n";    return;  }  if (s.compareTo("}") == 0 || s.compareTo("]") == 0) {    indentation--;  }  stringRep+=getIndentation();  stringRep+=s;  stringRep+="\n";  if (s.compareTo("{") == 0 || s.compareTo("[") == 0) {    indentation++;  }}  }
class C{  public MandatoryUdaMissingException(String message){  super(message);}  }
class C{  protected boolean isFullDetail(Boolean fullDetailRequest){  if (fullDetailRequest == null) {    return defaultFullDetail;  }  return fullDetailRequest.booleanValue();}  }
class C{  public static Block fromJsonObject(final NemesisBlockInfo nemesisBlockInfo,final JSONObject jsonObject,final DeserializationContext context){  final Deserializer deserializer=new JsonDeserializer(jsonObject,context);  return deserialize(nemesisBlockInfo,deserializer);}  }
class C{  public static void configureJob(Job job,Class<?> jarByClass,Class<? extends Mapper> mapperClass,Class<? extends Reducer> reducerClass,String commaSeparatedInputFiles,String outputPath) throws IOException {  job.setJarByClass(jarByClass);  job.setJobName(jarByClass.getName());  job.setMapperClass(mapperClass);  job.setReducerClass(reducerClass);  job.setInputFormatClass(WARCInputFormat.class);  LazyOutputFormat.setOutputFormatClass(job,WARCOutputFormat.class);  job.setMapOutputKeyClass(Text.class);  job.setMapOutputValueClass(WARCWritable.class);  job.setOutputKeyClass(NullWritable.class);  job.setOutputValueClass(WARCWritable.class);  FileOutputFormat.setCompressOutput(job,true);  FileOutputFormat.setOutputCompressorClass(job,GzipCodec.class);  FileInputFormat.addInputPaths(job,commaSeparatedInputFiles);  FileOutputFormat.setOutputPath(job,new Path(outputPath));}  }
class C{  public static CCAnimation animation(String name,ArrayList<CCSpriteFrame> frames){  return new CCAnimation(name,frames);}  }
class C{  public static void register(Map tagletMap){  UmplesourceTaglet tag=new UmplesourceTaglet();  Taglet t=(Taglet)tagletMap.get(tag.getName());  if (t != null) {    tagletMap.remove(tag.getName());  }  tagletMap.put(tag.getName(),tag);}  }
class C{  public boolean consumed(){  return left == 0;}  }
class C{  public void reset(){  m_cachedValuesSemaphore.acquireUninterruptibly();  m_modules.clear();  m_cachedValues=null;  m_cachedValuesSemaphore.release();  fireTableDataChanged();}  }
class C{  public boolean isPYDML(){  return scriptType.isPYDML();}  }
class C{  public static double[][] random(int m,int n,double min,double max){  double[][] array=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      array[i][j]=min + Random.raw() * (max - min);    }  }  return array;}  }
class C{  public String toMultiLineString(){  return LineUtil.toMultiLineString(buffer);}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints the ASM code to generate the given class.");    System.err.println("Usage: ASMifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(null,new ASMifier(),new PrintWriter(System.out)),flags);}  }
class C{  static void closeOnEscape(final JFrame frame){  closeOnEscape(frame,frame.getRootPane());}  }
class C{  @Override public boolean canUndo(){  return ((DataSortedTableModel)m_TableData.getModel()).canUndo();}  }
class C{  protected boolean addService(Class<?> serviceClass,BeanContextServiceProvider provider,boolean fireEvent){  if (serviceClass == null || provider == null) {    throw new NullPointerException();  }synchronized (globalHierarchyLock) {synchronized (services) {      if (services.containsKey(serviceClass)) {        return false;      }      services.put(serviceClass,createBCSSServiceProvider(serviceClass,provider));      if (provider instanceof Serializable) {        serializable++;      }    }  }  if (fireEvent) {    notifyServiceAvailable(new BeanContextServiceAvailableEvent(this,serviceClass));  }  return true;}  }
class C{  protected boolean[] runBasicTest(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int classIndex,int missingLevel,boolean predictorMissing,boolean classMissing,int numTrain,int numClasses,ArrayList<String> accepts){  boolean[] result=new boolean[2];  Instances train=null;  ASSearch search=null;  ASEvaluation evaluation=null;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,classIndex,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);    }    search=ASSearch.makeCopies(getSearch(),1)[0];    evaluation=ASEvaluation.makeCopies(getEvaluator(),1)[0];  } catch (  Exception ex) {    ex.printStackTrace();    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    search(search,evaluation,train);    println("yes");    result[0]=true;  } catch (  Exception ex) {    boolean acceptable=false;    String msg;    if (ex.getMessage() == null) {      msg="";    } else {      msg=ex.getMessage().toLowerCase();    }    if (msg.indexOf("not in classpath") > -1) {      m_ClasspathProblems=true;    }    for (int i=0; i < accepts.size(); i++) {      if (msg.indexOf(accepts.get(i)) >= 0) {        acceptable=true;      }    }    println("no" + (acceptable ? " (OK error message)" : ""));    result[1]=acceptable;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during training");      println(": " + ex.getMessage() + "\n");      if (!acceptable) {        if (accepts.size() > 0) {          print("Error message doesn't mention ");          for (int i=0; i < accepts.size(); i++) {            if (i != 0) {              print(" or ");            }            print('"' + accepts.get(i) + '"');          }        }        println("here is the dataset:\n");        println("=== Train Dataset ===\n" + train.toString() + "\n");      }    }  }  return result;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void testNonExistingIndexingFilter() throws IndexingException {  Configuration conf=NutchConfiguration.create();  String class1="NonExistingFilter";  String class2="org.apache.nutch.indexer.basic.BasicIndexingFilter";  conf.set(IndexingFilters.INDEXINGFILTER_ORDER,class1 + " " + class2);  IndexingFilters filters=new IndexingFilters(conf);  filters.filter(new NutchDocument(),new ParseImpl("text",new ParseData(new ParseStatus(),"title",new Outlink[0],new Metadata())),new Text("http://www.example.com/"),new CrawlDatum(),new Inlinks());}  }
class C{  public q addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private void processRunStartedTag(String identifier){  Pattern numTestsPattern=Pattern.compile("Running (\\d+) test[s]? from .*");  Matcher numTests=numTestsPattern.matcher(identifier);  if (numTests.find()) {    try {      mNumTestsExpected=Integer.parseInt(numTests.group(1));    } catch (    NumberFormatException e) {      Log.e(LOG_TAG,"Unable to determine number of tests expected, received: " + numTests.group(1));    }  }  if (mNumTestsExpected > 0) {    reportTestRunStarted();    mNumTestsRun=0;    mTestRunInProgress=true;  }}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  protected boolean includeAuthorityInRequestLine(){  return connection == null ? policy.usingProxy() : connection.getRoute().getProxy().type() == Proxy.Type.HTTP;}  }
class C{  public void testErf(){  double[] octaveResults={0.000000,0.112463,0.222703,0.328627,0.428392,0.520500,0.603856,0.677801,0.742101,0.796908,0.842701,0.880205,0.910314,0.934008,0.952285,0.966105,0.976348,0.983790,0.989091,0.992790,0.995322,0.997021,0.998137,0.998857,0.999311,0.999593,0.999764,0.999866,0.999925,0.999959,0.999978,0.999988,0.999994,0.999997,0.999998,0.999999,1.000000};  for (int n=0; n < octaveResults.length; n++) {    assertEquals(octaveResults[n],MathsUtils.erf(n * 0.1),0.000001);  }}  }
class C{  private Map<String,List<SolrDocument>> collectDocuments(String query,SolrQueryRequest req,JoinFunction collectionKey) throws IOException {  Set<String> fields=getFields(req.getParams().get(CommonParams.FL),req.getSchema().getFields());  fields.add(Schema.DATA);  if (!isEmptyArray(collectionKey.involvedFields())) {    Collections.addAll(fields,collectionKey.involvedFields());  }  DocList result=docListProvider.doSimpleQuery(query,req,0,Integer.MAX_VALUE);  SolrDocumentList docs=docListProvider.docListToSolrDocumentList(result,req.getSearcher(),fields,null);  return SolrDocumentBuilder.collect(docs,collectionKey);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public CloneableIterator<byte[]> keys(final boolean up,final byte[] firstKey) throws IOException {  assert (this.index != null) : "index == null; closeDate=" + this.closeDate + ", now="+ new Date();  if (this.index == null) {    log.severe("this.index == null in keys(); closeDate=" + this.closeDate + ", now="+ new Date()+ this.heapFile == null ? "" : (" file = " + this.heapFile.toString()));    return null;  }synchronized (this.index) {    return this.index.keys(up,firstKey);  }}  }
class C{  public GitConflictException(String message,List<String> conflictingPaths){  super(message);  this.conflictingPaths=conflictingPaths;}  }
class C{  public void viewBox(float x,float y,float width,float height) throws ParseException {  hasViewBox=true;  viewBox=new float[4];  viewBox[0]=x;  viewBox[1]=y;  viewBox[2]=width;  viewBox[3]=height;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  PseudoMenu pm=(stack.getUIMgr() == null) ? null : stack.getUIMgr().getCurrUI();  return (pm == null) ? null : pm.getBlueprint();}  }
class C{  @Override public Set<Statement> gather(final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> state,final Value u,final Statement e){  return Collections.singleton(e);}  }
class C{  public void configure(ISourceViewer sourceViewer,SourceViewerConfiguration configuration){  fPrefixesMap=null;  String[] types=configuration.getConfiguredContentTypes(sourceViewer);  Map prefixesMap=new HashMap(types.length);  for (int i=0; i < types.length; i++) {    String type=types[i];    String[] prefixes=configuration.getDefaultPrefixes(sourceViewer,type);    if (prefixes != null && prefixes.length > 0) {      int emptyPrefixes=0;      for (int j=0; j < prefixes.length; j++)       if (prefixes[j].length() == 0)       emptyPrefixes++;      if (emptyPrefixes > 0) {        String[] nonemptyPrefixes=new String[prefixes.length - emptyPrefixes];        for (int j=0, k=0; j < prefixes.length; j++) {          String prefix=prefixes[j];          if (prefix.length() != 0) {            nonemptyPrefixes[k]=prefix;            k++;          }        }        prefixes=nonemptyPrefixes;      }      prefixesMap.put(type,prefixes);    }  }  fDocumentPartitioning=configuration.getConfiguredDocumentPartitioning(sourceViewer);  fPrefixesMap=prefixesMap;}  }
class C{  protected void mutation(){}  }
