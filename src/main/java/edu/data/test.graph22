class C{  private void handleIgnoredTag(boolean opening,Editable output){  int len=output.length();  if (opening) {    output.setSpan(new Annotation(IGNORED_ANNOTATION_KEY,IGNORED_ANNOTATION_VALUE),len,len,Spanned.SPAN_MARK_MARK);  } else {    Object start=getOpeningAnnotation(output);    if (start != null) {      int where=output.getSpanStart(start);      output.removeSpan(start);      output.delete(where,len);    }  }}  }
class C{  public void run(){  try {    Collection<RuleBufferObject> rulesToUpdate=null;synchronized (BUFFER_LOCK) {      rulesToUpdate=new ArrayList<RuleBufferObject>();      Integer actCounter=null;      boolean hasJustBeenUpdated=false;      boolean forceCacheUpdate=false;      for (      Long actTagId : UPDATE_RECEIVED_FLAGS.keySet()) {        hasJustBeenUpdated=((Boolean)UPDATE_RECEIVED_FLAGS.get(actTagId)).booleanValue();        actCounter=(Integer)CYCLE_COUNTERS.get(actTagId);        forceCacheUpdate=(actCounter != null && actCounter.intValue() >= MAX_CYCLES_WAIT);        if (!hasJustBeenUpdated || forceCacheUpdate) {          RuleBufferObject rbo=new RuleBufferObject((RuleBufferObject)RULE_OBJECT_BUF.get(actTagId));          rulesToUpdate.add(rbo);          if (forceCacheUpdate) {            LOG.debug("CacheUpdaterTask() - Forcing a cache update for rule " + actTagId + " since it was already delayed by "+ MAX_CYCLES_WAIT * BUFFER_TIMER_MILLIS + " ms.");          }        } else {          UPDATE_RECEIVED_FLAGS.put(actTagId,Boolean.FALSE);          if (actCounter == null) {            CYCLE_COUNTERS.put(actTagId,new Integer(1));          } else {            CYCLE_COUNTERS.put(actTagId,new Integer(actCounter.intValue() + 1));          }        }      }      Long actTagId;      for (      RuleBufferObject rbo : rulesToUpdate) {        actTagId=rbo.id;        UPDATE_RECEIVED_FLAGS.remove(actTagId);        RULE_OBJECT_BUF.remove(actTagId);        CYCLE_COUNTERS.remove(actTagId);      }      if (UPDATE_RECEIVED_FLAGS.size() == 0) {        if (LOG.isTraceEnabled())         LOG.trace("CacheUpdaterTask() - Canceling next cache updater check, because there are no more updates registered.");        this.cancel();        isCacheUpdaterRunning=false;      }    }    if (rulesToUpdate.size() > 0) {      for (      RuleBufferObject rbo : rulesToUpdate) {        if (rbo.qualityCollection.isEmpty()) {          if (LOG.isTraceEnabled())           LOG.trace("CacheUpdaterTask() - updating cache for rule id " + rbo.id + ": value="+ rbo.value+ ", description="+ rbo.valueDesc+ ", timestamp="+ rbo.timestamp);          try {            ruleTagFacade.updateAndValidate(rbo.id,rbo.value,rbo.valueDesc,rbo.timestamp);          } catch (          CacheElementNotFoundException cacheEx) {            LOG.warn("Unable to update rule (can happen during rule reconfiguration)",cacheEx);          }catch (          Exception exception) {            LOG.warn("Unexpected error during rule evaluation",exception);          }        } else {          if (LOG.isTraceEnabled())           LOG.trace("CacheUpdaterTask() - invalidating cache for rule id " + rbo.id + ": reasons="+ rbo.qualityCollection+ ", descriptions="+ rbo.qualityDescriptions+ ", timestamp="+ rbo.timestamp);          try {            ruleTagFacade.setQuality(rbo.id,rbo.qualityCollection,null,rbo.qualityDescriptions,rbo.timestamp);          } catch (          CacheElementNotFoundException cacheEx) {            LOG.warn("Unable to update rule as could not be located in cache (normal during rule reconfiguration)",cacheEx);          }        }      }    }  } catch (  Exception ex) {    LOG.error("Exception caught during rule update - should not be ignored!",ex);  }}  }
class C{  public static double log(final double x){  return log(x,null);}  }
class C{  public StringDataType(){  this.s="";}  }
class C{  public static Tailer create(File file,TailerListener listener,long delayMillis){  return create(file,listener,delayMillis,false);}  }
class C{  public ClusterConfigurationException(String str,Throwable cause){  super(str,cause);}  }
class C{  @Override public String toString(){  return "Entry, x: " + x + " y (sum): "+ getY();}  }
class C{  public static double distance(LatLng pointA,LatLng pointB){  double lat=Math.toRadians(pointA.latitude);  double lat2=Math.toRadians(pointB.latitude);  double difLat=Math.toRadians(pointB.latitude - pointA.latitude);  double difLong=Math.toRadians(pointB.longitude - pointA.longitude);  double a=(Math.pow(Math.sin(difLat / 2),2)) + (Math.cos(lat) * Math.cos(lat2) * Math.pow(Math.sin(difLong / 2),2));  double c=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));  return EARTH * c;}  }
class C{  public static float toFloatBits(float r,float g,float b,float a){  int color=((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8)| ((int)(255 * r));  return NumberUtils.intToFloatColor(color);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_CANT_INVITE_WHEN_HE_IS_ASKED_QUESTION(String value0){  return new SM_SYSTEM_MESSAGE(1400567,value0);}  }
class C{  public UrlSpaceConfigurer credentialsProvider(CredentialsProvider credentialsProvider){  return securityConfig(new SecurityConfig(credentialsProvider));}  }
class C{  @Override public boolean remove(Object object){  final int index=indexOf(object);  if (index >= 0) {    removeAt(index);    return true;  }  return false;}  }
class C{  public NGramGaussNormSymWinDocument(int iMinGraphSize,int iMaxGraphSize,int iGraphCorrelationWindow,int iMinHistogramSize,int iMaxHistogramSize){  Graph=new DocumentNGramGaussNormSymWinGraph(iMinGraphSize,iMaxGraphSize,iGraphCorrelationWindow);  Histogram=new DocumentNGramHistogram(iMinHistogramSize,iMaxHistogramSize);}  }
class C{  public void createFieldsInHosts(){  if (!fieldsExistsInHost()) {    Logger.info(this,"********************START CREATE FIELDS FOR TWITTER PLUGIN*********************");    Logger.info(this,"*The required fields for the Twitter plugin didn't exits in the Host structure*");    Structure hostStructure=StructureFactory.getStructureByVelocityVarName("Host");    addFieldToHostStructure(hostStructure,Configuration.HOSTFIELDNAME_TWITTERLINEDIVIDER,Field.FieldType.LINE_DIVIDER,Field.DataType.SECTION_DIVIDER,95);    addFieldToHostStructure(hostStructure,Configuration.HOSTFIELDNAME_TWITTERCONSUMERKEY,Field.FieldType.TEXT,Field.DataType.TEXT,96);    addFieldToHostStructure(hostStructure,Configuration.HOSTFIELDNAME_TWITTERSECRETCONSUMERKEY,Field.FieldType.TEXT,Field.DataType.TEXT,97);    addFieldToHostStructure(hostStructure,Configuration.HOSTFIELDNAME_TWITTERACCESSTOKEN,Field.FieldType.TEXT,Field.DataType.TEXT,98);    addFieldToHostStructure(hostStructure,Configuration.HOSTFIELDNAME_TWITTERSECRETACCESSTOKEN,Field.FieldType.TEXT,Field.DataType.TEXT,99);    FieldsCache.removeFields(hostStructure);    ContentTypeCacheImpl contentTypeCache=new ContentTypeCacheImpl();    contentTypeCache.remove(hostStructure);    try {      StructureFactory.saveStructure(hostStructure);    } catch (    DotHibernateException e) {      throw new RuntimeException(e.toString(),e);    }    FieldsCache.addFields(hostStructure,hostStructure.getFieldsBySortOrder());    Logger.info(this,"*All the missing fields for the Twitter plugin are added to the Host structure*");    Logger.info(this,"*********************END CREATE FIELDS FOR TWITTER PLUGIN**********************");  }}  }
class C{  public ApplicationException(){}  }
class C{  public GatewayResponse(InputStream xmlstream,GatewayRequest req) throws Exception {  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=builderFactory.newDocumentBuilder();  Document doc=builder.parse(xmlstream);  Node rootnode=doc.getDocumentElement();  String root=rootnode.getNodeName();  if (root != "ewayResponse") {    throw new Exception("Bad root element in response: " + root);  }  NodeList list=doc.getElementsByTagName("*");  for (int i=0; i < list.getLength(); i++) {    Node node=list.item(i);    String name=node.getNodeName();    if (name == "ewayResponse")     continue;    Text textnode=(Text)node.getFirstChild();    String value="";    if (textnode != null)     value=textnode.getNodeValue();    if (name == "ewayTrxnError")     txTrxnError=value; else     if (name == "ewayTrxnStatus") {      if (value.toLowerCase().trim().equals("true")) {        txTrxnStatus=true;      }    } else     if (name == "ewayTrxnNumber")     txTrxnNumber=value; else     if (name == "ewayTrxnOption1")     txTrxnOption1=value; else     if (name == "ewayTrxnOption2")     txTrxnOption2=value; else     if (name == "ewayTrxnOption3")     txTrxnOption3=value; else     if (name == "ewayReturnAmount") {      if (!value.equals("")) {        txReturnAmount=Integer.parseInt(value);      }    } else     if (name == "ewayAuthCode")     txAuthCode=value; else     if (name == "ewayTrxnReference")     txTrxnReference=value; else     if (name == "ewayBeagleScore") {      if (!value.equals("")) {        txBeagleScore=Double.parseDouble(value);      }    } else {      throw new Exception("Unknown field in response: " + name);    }  }  if (req.isTestMode()) {    Debug.logInfo("[eWay Reply]\n" + this.toString(),module);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200284,skillname);}  }
class C{  public void deleteRequest(@NonNull Context context,String url,ApiListener apiListener){  request(context,Request.Method.DELETE,url,null,apiListener);}  }
class C{  public void error(JSONObject message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  private void collectMethodsReturningClassType(TypeElement originalClass){  TypeElement clazz=originalClass;  while (clazz.getSuperclass().getKind() != TypeKind.NONE) {    for (    Element subElement : clazz.getEnclosedElements()) {      Set<Modifier> modifiers=subElement.getModifiers();      if (subElement.getKind() == ElementKind.METHOD && !modifiers.contains(Modifier.PRIVATE) && !modifiers.contains(Modifier.FINAL) && !modifiers.contains(Modifier.STATIC)) {        TypeMirror methodReturnType=((ExecutableType)subElement.asType()).getReturnType();        if (methodReturnType.equals(clazz.asType()) || typeUtils.isSubtype(clazz.asType(),methodReturnType)) {          List<? extends TypeMirror> params=((ExecutableType)subElement.asType()).getParameterTypes();          String methodName=subElement.getSimpleName().toString();          if (methodName.equals(RESET_METHOD) && params.isEmpty()) {            continue;          }          if (params.size() == 1) {            TypeMirror param=params.get(0);            ParameterSpec parameterSpec;            if (methodName.equals(LAYOUT_METHOD) && param.getKind() == TypeKind.INT) {              parameterSpec=ParameterSpec.builder(int.class,methodName).addAnnotation(LAYOUT_RES_ANNOTATION).build();            } else {              parameterSpec=ParameterSpec.builder(TypeName.get(param),methodName).build();            }            methodsReturningClassType.add(new MethodInfo(methodName,modifiers,Collections.singletonList(parameterSpec)));          } else {            methodsReturningClassType.add(new MethodInfo(methodName,modifiers,buildParamList(params)));          }        }      }    }    clazz=(TypeElement)typeUtils.asElement(clazz.getSuperclass());  }}  }
class C{  private void clearRegistryForComponent(WXComponent component){  WXComponent removedComponent=mRegistry.remove(component.getDomObject().ref);  if (removedComponent != null) {    removedComponent.removeAllEvent();    removedComponent.removeStickyStyle();  }  if (component instanceof WXVContainer) {    WXVContainer container=(WXVContainer)component;    int count=container.childCount();    for (int i=count - 1; i >= 0; --i) {      clearRegistryForComponent(container.getChild(i));    }  }}  }
class C{  @Override protected Result doInBackground(Void... params){  try {    if (!isCancelled()) {      BitmapUtils.DecodeBitmapResult decodeResult=BitmapUtils.decodeSampledBitmap(mContext,mUri,mWidth,mHeight);      if (!isCancelled()) {        BitmapUtils.RotateBitmapResult rotateResult=BitmapUtils.rotateBitmapByExif(decodeResult.bitmap,mContext,mUri);        return new Result(mUri,rotateResult.bitmap,decodeResult.sampleSize,rotateResult.degrees);      }    }    return null;  } catch (  Exception e) {    return new Result(mUri,e);  }}  }
class C{  public boolean isValidInfrastructureTld(String iTld){  iTld=unicodeToASCII(iTld);  return Arrays.binarySearch(INFRASTRUCTURE_TLDS,(chompLeadingDot(iTld.toLowerCase(Locale.ENGLISH)))) >= 0;}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  IsNotEqualToImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 3)) {    filter=new IsNotEqualToExtended();  } else {    LiteralExpressionImpl matchCase=(LiteralExpressionImpl)parameterList.get(2);    filter=new IsNotEqualToExtended(parameterList.get(0),parameterList.get(1),(Boolean)matchCase.getValue());  }  return filter;}  }
class C{  public Expression containsValue(Value map,Value arg){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public S2CellId prevWrap(){  S2CellId p=prev();  if (p.id < WRAP_OFFSET) {    return p;  }  return new S2CellId(p.id + WRAP_OFFSET);}  }
class C{  @Override public final void run(){  try {    runImpl();  } catch (  Throwable e) {    String name;    Account account=getConnection().getAccount();    if (account != null) {      name=account.getName();    } else {      name=getConnection().getIP();    }    log.error("error handling client (" + name + ") message "+ this,e);  }}  }
class C{  public static int updateTable(String table,String where,Object[] whereArgs,V sets){  StringBuilder sql=new StringBuilder();  sql.append("update ").append(table).append(" set ");  StringBuilder s=new StringBuilder();  for (  String name : sets.names()) {    if (s.length() > 0)     s.append(",");    s.append(name).append("=?");  }  sql.append(s);  if (where != null) {    sql.append(" where ").append(where);  }  Connection c=null;  PreparedStatement p=null;  int updated=0;  try {    c=getConnection();    if (c == null)     return -1;    p=c.prepareStatement(sql.toString());    int order=1;    for (    String name : sets.names()) {      Object v=sets.value(name);      try {        setParameter(p,order++,v);      } catch (      Exception e) {        log.error(name + "=" + v,e);      }    }    if (whereArgs != null) {      for (int i=0; i < whereArgs.length; i++) {        Object o=whereArgs[i];        setParameter(p,order++,o);      }    }    updated=p.executeUpdate();  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql.toString() + toString(whereArgs) + sets.toString(),e);  } finally {    close(p,c);  }  return updated;}  }
class C{  protected void removeTrackedServices(){  for (  ServiceTracker<ExtHttpService,ExtHttpService> tracker : trackers) {    tracker.close();  }}  }
class C{  public static Executor createTaskDistributor(){  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-"));}  }
class C{  private void flingOccurred(float x,float y,float tx,float ty,float vx,float vy){  if (mEdgeSwipeHandler != null && mEdgeSwipeStarted) {    mEdgeSwipeHandler.swipeFlingOccurred(x,y,tx,ty,vx,vy);  }}  }
class C{  public static double max(final double[] values){  double max=values[0];  for (int i=1; i < values.length; i++) {    if (values[i] > max) {      max=values[i];    }  }  return max;}  }
class C{  public void clear(){synchronized (contexts) {    contexts.clear();  }}  }
class C{  public EsriOracleArcSDE(){  addFieldTranslation("INSTANCE",DataSourceConnectorArcSDE.FIELD_PORT);  addFieldTranslation("VERSION",DataSourceConnectorArcSDE.FIELD_VERSION);  addFieldTranslation("USER",DataSourceConnectorArcSDE.FIELD_USER);  addDefaultValue(DataSourceConnectorArcSDE.FIELD_DB_TYPE,"arcsde");  addDefaultValue(DataSourceConnectorArcSDE.FIELD_SERVER,"none");  addDefaultValue(DataSourceConnectorArcSDE.FIELD_INSTANCE,"none");  addDefaultValue(DataSourceConnectorArcSDE.FIELD_PASSWORD,null);}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (comboBox != null) {      return comboBox.isEnabled();    }  }  return false;}  }
class C{  public DatatypeConfigurationException(Throwable cause){  super(cause);}  }
class C{  private Map mapRegToGroups(ServiceRegistrar reg,String[] curGroups){  HashMap groupsMap=new HashMap(1);  groupsMap.put(reg,curGroups);  return groupsMap;}  }
class C{  public UsersGetFollowersQuery(VkApiClient client,UserActor actor){  super(client,"users.getFollowers",GetFollowersResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public NewsfeedGetQuery endTime(Integer value){  return unsafeParam("end_time",value);}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public LoadImplementor(LoadModel model,LoadView view){  this.model=model;  this.view=view;}  }
class C{  public ASBSetCursor queryASBSet(long id){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_ASB_SETS;  qh.Selection="ar." + S.COLUMN_ASB_SET_ID + " = ?";  qh.SelectionArgs=new String[]{String.valueOf(id)};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit="1";  return new ASBSetCursor(wrapJoinHelper(builderASBSet(),qh));}  }
class C{  @VisibleForTesting @Transactional public void markAssetExtractionAsLastSuccessful(Asset asset,AssetExtraction assetExtraction){  logger.debug("Marking asset extraction as last successful, assetExtractionId: {}",assetExtraction.getId());  asset.setLastSuccessfulAssetExtraction(assetExtraction);  assetRepository.save(asset);}  }
class C{  private static BitMatrix bitMatrixFrombitArray(byte[][] input,int margin){  BitMatrix output=new BitMatrix(input[0].length + 2 * margin,input.length + 2 * margin);  output.clear();  for (int y=0, yOutput=output.getHeight() - margin - 1; y < input.length; y++, yOutput--) {    for (int x=0; x < input[0].length; x++) {      if (input[y][x] == 1) {        output.set(x + margin,yOutput);      }    }  }  return output;}  }
class C{  public void writeByte(byte value) throws JMSException {  initializeWriting();  try {    this.dataOut.write(_BYTE);    this.dataOut.writeByte(value);  } catch (  IOException ioe) {    raise(ioe);  }}  }
class C{  public boolean matchId(){  return tok.ttype == StreamTokenizer.TT_WORD && !keywords.contains(tok.sval);}  }
class C{  public DelegationRelativeTime(long minStart,long maxStart,long minStop,long maxStop){  if (minStart > maxStart || maxStart > minStop || minStop > maxStop || minStop < 0) {    throw new IllegalArgumentException("invalid durations");  }  this.minStart=minStart;  this.maxStart=maxStart;  this.minStop=minStop;  this.maxStop=maxStop;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @Override public void close(){  socket.close();}  }
class C{  public boolean drain(){  return true;}  }
class C{  public static BigInteger pow(final BigInteger k,long e) throws IllegalArgumentException {  if (e < 0) {    throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",k,e);  }  BigInteger result=BigInteger.ONE;  BigInteger k2p=k;  while (e != 0) {    if ((e & 0x1) != 0) {      result=result.multiply(k2p);    }    k2p=k2p.multiply(k2p);    e=e >> 1;  }  return result;}  }
class C{  public ApplicationSnapshotDescriptor(ApplicationSnapshot snapshot){  super(snapshot,resolveSnapshotName(snapshot),NbBundle.getMessage(ApplicationSnapshotDescriptor.class,"DESCR_ApplicationSnapshot"),resolveIcon(snapshot),resolvePosition(snapshot,POSITION_AT_THE_END,true),EXPAND_NEVER);}  }
class C{  private static void updateAndroidRuleModule(Project project,WorkspaceRoot workspaceRoot,ArtifactLocationDecoder artifactLocationDecoder,AndroidSdkPlatform androidSdkPlatform,RuleIdeInfo rule,Module module,ModifiableRootModel modifiableRootModel,@Nullable AndroidResourceModule androidResourceModule){  Collection<File> resources=androidResourceModule != null ? artifactLocationDecoder.decodeAll(androidResourceModule.resources) : ImmutableList.of();  Collection<File> transitiveResources=androidResourceModule != null ? artifactLocationDecoder.decodeAll(androidResourceModule.transitiveResources) : ImmutableList.of();  AndroidRuleIdeInfo androidRuleIdeInfo=rule.androidRuleIdeInfo;  assert androidRuleIdeInfo != null;  File moduleDirectory=workspaceRoot.fileForPath(rule.label.blazePackage());  ArtifactLocation manifestArtifactLocation=androidRuleIdeInfo.manifest;  File manifest=manifestArtifactLocation != null ? artifactLocationDecoder.decode(manifestArtifactLocation) : new File(moduleDirectory,"AndroidManifest.xml");  String resourceJavaPackage=androidRuleIdeInfo.resourceJavaPackage;  ResourceModuleContentRootCustomizer.setupContentRoots(modifiableRootModel,resources);  createAndroidModel(project,androidSdkPlatform,module,moduleDirectory,manifest,resourceJavaPackage,transitiveResources);}  }
class C{  public static IOFileFilter ageFileFilter(Date cutoffDate){  return new AgeFileFilter(cutoffDate);}  }
class C{  private static void createWriter(OutputStream outputStream){  try {    closeWriter();    Writer oWriter=new OutputStreamWriter(outputStream,"UTF-8");    writer=new BufferedWriter(oWriter);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTotem_A_TO_B(String skillcaster,String value0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201038,skillcaster,value0,skilltarget,skillname);}  }
class C{  @Override public Object analyse(double[] frame){  int expectedFrameLength=0;  for (int i=0; i < periodLengths.length; i++) {    expectedFrameLength+=periodLengths[i];  }  if (frame.length != expectedFrameLength)   System.err.println("Expected frame of length " + expectedFrameLength + "("+ periodLengths.length+ " periods)"+ ", got "+ frame.length);  return LpcAnalyser.calcLPC(frame,lpOrder);}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  public DataColorAction(String group,String dataField,int dataType,String colorField,int[] palette){  super(group,colorField);  setDataType(dataType);  setDataField(dataField);  m_palette=palette;}  }
class C{  public boolean containsKey(short key){  return contains(key);}  }
class C{  public Type(String name,String extension){  this.name=name;  this.extension=extension;}  }
class C{  @Override public void onLocationChanged(Location loc){  mCurLocation=loc;  LocationService.location=loc;  updateUI();}  }
class C{  public void mouseEntered(MouseEvent e){  mIsControlDown=e.isControlDown();  mIsShiftDown=e.isShiftDown();  mIsAltDown=e.isAltDown();}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public TableSwitchStmt newTableSwitchStmt(Value key,int lowIndex,int highIndex,List<? extends Unit> targets,Unit defaultTarget){  return new JTableSwitchStmt(key,lowIndex,highIndex,targets,defaultTarget);}  }
class C{  public String post(Context context,String url,Header[] headers,HttpEntity entity,String contentType) throws HttpException {  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPost(url),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,context);}  }
class C{  @Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {  if (!context.isEntityUnparsed(content))   throw new InvalidDatatypeValueException("ENTITYNotUnparsed",new Object[]{content});}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  @Override public void justSelected(){  setCachedExpression(generateExpression());  checkSymbolIsValid();}  }
class C{  private void processLabelRenderer(StyledLayerDescriptor sld,JsonArray labelRenderArrayElement,int transparency){  if (sld != null) {    if (labelRenderArrayElement != null) {      List<StyledLayer> styledLayers=sld.layers();      if (!styledLayers.isEmpty()) {        if (styledLayers.get(0) instanceof NamedLayer) {          NamedLayer namedLayer=(NamedLayer)styledLayers.get(0);          List<Style> styleList=namedLayer.styles();          if (!styleList.isEmpty()) {            List<FeatureTypeStyle> ftsList=styleList.get(0).featureTypeStyles();            if (!ftsList.isEmpty()) {              List<Rule> ruleList=ftsList.get(0).rules();              List<Rule> newLabelRuleList=new ArrayList<Rule>();              for (int index=0; index < labelRenderArrayElement.size(); index++) {                JsonElement labelRenderElement=labelRenderArrayElement.get(index);                JsonObject renderer=labelRenderElement.getAsJsonObject();                boolean found=false;                for (                String labelRendererType : labelRendererMap.keySet()) {                  JsonElement obj=renderer.get(labelRendererType);                  if (obj != null) {                    EsriLabelRendererInterface esriLabelRenderer=labelRendererMap.get(labelRendererType);                    if (esriLabelRenderer != null) {                      for (                      Rule rule : ruleList) {                        esriLabelRenderer.convert(newLabelRuleList,rule,obj,transparency);                      }                    }                    found=true;                    break;                  }                }                if (!found) {                  ConsoleManager.getInstance().error(this,"Unsupported label renderer : " + SymbolUtils.extractName(labelRenderElement));                }              }              ruleList.addAll(newLabelRuleList);            }          }        }      }    }  }}  }
class C{  @Override public boolean isDerivedFrom(String typeNamespaceArg,String typeNameArg,int derivationMethod){  if (needsSyncData()) {    synchronizeData();  }  if (type != null) {    if (type instanceof XSSimpleTypeDecl) {      return ((XSSimpleTypeDecl)type).isDOMDerivedFrom(typeNamespaceArg,typeNameArg,derivationMethod);    } else     if (type instanceof XSComplexTypeDecl) {      return ((XSComplexTypeDecl)type).isDOMDerivedFrom(typeNamespaceArg,typeNameArg,derivationMethod);    }  }  return false;}  }
class C{  public static final double[] trim(double[] a,int size){  if (a.length == size) {    return a;  } else {    double[] b=new double[size];    System.arraycopy(a,0,b,0,size);    return b;  }}  }
class C{  @Override public void onComicLoadSuccess(Comic comic){  mDetailAdapter.setInfo(comic.getSource(),comic.getCover(),comic.getTitle(),comic.getAuthor(),comic.getIntro(),comic.getFinish(),comic.getUpdate(),comic.getLast());  if (comic.getTitle() != null && comic.getCover() != null) {    int resId=comic.getFavorite() != null ? R.drawable.ic_favorite_white_24dp : R.drawable.ic_favorite_border_white_24dp;    mStarButton.setImageResource(resId);    mStarButton.setVisibility(View.VISIBLE);  }}  }
class C{  public void testSetValue(){  VirtualFile file=myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values-v21/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values-night/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values-port/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values-port-v21/styles.xml");  ItemResourceValue item=new ItemResourceValue("colorAccent",false,"#000000",false,null);  checkSetValue(file,item,"","-v21","-night","-port","-port-v21");}  }
class C{  private static List<ResultPoint[]> detect(boolean multiple,BitMatrix bitMatrix){  List<ResultPoint[]> barcodeCoordinates=new ArrayList<>();  int row=0;  int column=0;  boolean foundBarcodeInRow=false;  while (row < bitMatrix.getHeight()) {    ResultPoint[] vertices=findVertices(bitMatrix,row,column);    if (vertices[0] == null && vertices[3] == null) {      if (!foundBarcodeInRow) {        break;      }      foundBarcodeInRow=false;      column=0;      for (      ResultPoint[] barcodeCoordinate : barcodeCoordinates) {        if (barcodeCoordinate[1] != null) {          row=(int)Math.max(row,barcodeCoordinate[1].getY());        }        if (barcodeCoordinate[3] != null) {          row=Math.max(row,(int)barcodeCoordinate[3].getY());        }      }      row+=ROW_STEP;      continue;    }    foundBarcodeInRow=true;    barcodeCoordinates.add(vertices);    if (!multiple) {      break;    }    if (vertices[2] != null) {      column=(int)vertices[2].getX();      row=(int)vertices[2].getY();    } else {      column=(int)vertices[4].getX();      row=(int)vertices[4].getY();    }  }  return barcodeCoordinates;}  }
class C{  private void subscribeToSupervisionTopic() throws JMSException {  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  MessageConsumer consumer=session.createConsumer(supervisionTopic);  consumer.setMessageListener(supervisionListenerWrapper);}  }
class C{  public void removeLast(){  remove(innerChain.getLast());}  }
class C{  public List<Customer> readCustomers(EntityManager em,String bpXml){  ArrayList<Customer> customers=new ArrayList<Customer>();  String role="01";  Date date=null;  DateFormat formatter=new SimpleDateFormat("yyyymmdd");  try {    XMLInputFactory inputFactory=XMLInputFactory.newInstance();    in=getResourceAsInputStream(bpXml);    eventReader=inputFactory.createXMLEventReader(in);    Customer cus=null;    while (eventReader.hasNext()) {      XMLEvent event=eventReader.nextEvent();      if (event.isStartElement()) {        StartElement startElement=event.asStartElement();        if (startElement.getName().getLocalPart() == (BUSINESS_PARTNER)) {          cus=new Customer();        }        if (event.asStartElement().getName().getLocalPart().equals(BP_ID)) {          event=eventReader.nextEvent();          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_FIRST_NAME)) {          event=eventReader.nextEvent();          cus.setFirstName(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_LAST_NAME)) {          event=eventReader.nextEvent();          cus.setLastName(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_DATE_OF_BIRTH)) {          event=eventReader.nextEvent();          date=formatter.parse(getEvent(event).toString());          Calendar cal=Calendar.getInstance();          cal.setTime(date);          cus.setDateOfBirth(cal);          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_ROLE)) {          event=eventReader.nextEvent();          role=getEvent(event);          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_ADDRESS)) {          event=eventReader.nextEvent();          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_CITY)) {          event=eventReader.nextEvent();          cus.setCity(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_POSTAL_CODE)) {          event=eventReader.nextEvent();          cus.setPostalCode(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_STREET)) {          event=eventReader.nextEvent();          cus.setStreet(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_BUILDING)) {          event=eventReader.nextEvent();          cus.setHouseNumber(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_COUNTRY)) {          event=eventReader.nextEvent();          cus.setCountry(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_PHONE_NUMBER)) {          event=eventReader.nextEvent();          cus.setPhoneNumber(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_EMAIL_ADDRESS)) {          event=eventReader.nextEvent();          cus.setEmailAddress(getEvent(event));          continue;        }      }      if (event.isEndElement()) {        EndElement endElement=event.asEndElement();        if (endElement.getName().getLocalPart() == (BUSINESS_PARTNER)) {          if (Integer.parseInt(role) == 1) {            em.persist(cus);            customers.add(cus);          }        }      }    }  } catch (  Exception e) {    logger.error("Exception occured",e);    status=false;  } finally {    try {      in.close();      eventReader.close();    } catch (    IOException e) {      logger.error("IO Exception occured",e);      status=false;    }catch (    XMLStreamException e) {      logger.error("XMLStream exception occured",e);      status=false;    }  }  return customers;}  }
class C{  Domino<T,R> newThread(){  return schedule(new NewThreadScheduler());}  }
class C{  public static ProbeItemDescriptor discreteLineItem(String name,String description,ItemValueFormatter formatter){  return discreteOutlineItem(name,description,formatter,1d,0,MAX_VALUE_UNDEFINED,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,null);}  }
class C{  public static Style indigo(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_INDIGO);  return style;}  }
class C{  public static void deleteFile(final File file){  deleteFile(file,false);}  }
class C{  public static DiscCacheAware createReserveDiscCache(File cacheDir){  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return new TotalSizeLimitedDiscCache(cacheDir,2 * 1024 * 1024);}  }
class C{  protected void _writeExternal(ObjectOutput out) throws IOException {  if (entryInfo != null) {    out.writeBoolean(true);    if (entryInfo.m_UID != null) {      out.writeBoolean(true);      out.writeUTF(entryInfo.m_UID);    } else {      out.writeBoolean(false);    }    out.writeInt(entryInfo.m_VersionID);    out.writeLong(entryInfo.m_TimeToLive);  } else {    out.writeBoolean(false);  }  out.writeBoolean(isFifo);  out.writeBoolean(isTransient);  out.writeBoolean(m_NOWriteLeaseMode);}  }
class C{  private void moveCancel(TableJson json,Storage src,Storage dest){  Delta delta=json.newMoveCancel(src);  Audit audit=new AuditBuilder().set("_op","doMoveCancel").set("_srcUuid",src.getUuidString()).set("_srcPlacement",src.getPlacement()).set("_destUuid",dest.getUuidString()).set("_destPlacement",dest.getPlacement()).build();  updateTableMetadata(json.getTable(),delta,audit,InvalidationScope.GLOBAL);}  }
class C{  public FaveGetUsersQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public boolean buildFullUrl(Appendable buffer,String url,boolean useSSL) throws WebAppConfigurationException, IOException {  boolean makeSecure=buildHostPart(buffer,url,useSSL);  buildPathPart(buffer,url);  return makeSecure;}  }
class C{  public void logCompleted(String message){  this.clear();  if (monitor != null) {    monitor.subTask(" ");  }}  }
class C{  public int findFirstVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public void focusWithoutAnimation(){  mEditText.setHint(null);  mLabel.setVisibility(View.VISIBLE);  mEditText.requestFocus();}  }
class C{  public synchronized void allowThreadDecoding(ThreadSet threads){  for (  Thread t : threads) {    allowThreadDecoding(t);  }}  }
class C{  public List<SootMethod> all(){  List<SootMethod> ret=new ArrayList<SootMethod>();  ret.addAll(application());  ret.addAll(implicit());  return ret;}  }
class C{  private void appendNewBlock(){  setLastRecordPosition(0);  currentPos=pointerSize * 2;  currentBlk=myPage.append(logFile);}  }
class C{  @Override public Vector3D toSpace(final Point<Euclidean2D> point){  final Vector2D p2D=(Vector2D)point;  return new Vector3D(p2D.getX(),u,p2D.getY(),v,-originOffset,w);}  }
class C{  public void export(String fileName,int sampleRate,byte[] samples) throws IOException {  nBytesPerSample=2;  buf=new byte[samples.length];  System.arraycopy(samples,0,buf,0,samples.length);  byte b=0;  for (int j=0; j < buf.length; j+=2) {    b=buf[j];    buf[j]=buf[j + 1];    buf[j + 1]=b;  }  doWrite(fileName,sampleRate);}  }
class C{  public TransformationAdapterWrapper build(){  if (rows < MIN_ROWS) {    throw new IllegalArgumentException("Rows can't be lower than " + MIN_ROWS);  }  if (columns < MIN_COLUMNS) {    throw new IllegalArgumentException("Columns can't be lower than " + MIN_COLUMNS);  }  if (piecesSpacing < 0) {    throw new IllegalArgumentException("Pieces spacing can't be lower than 0");  }  if (bitmapScale <= 0 || bitmapScale > 1) {    throw new IllegalArgumentException("Bitmap scale coefficient must be in range (0, 1]");  }  if (complexViewDetector == null) {    complexViewDetector=new ComplexViewDetectorImpl();  }  if (bitmapTransformerFactory == null) {    bitmapTransformerFactory=new BitmapTransformerImpl.Factory();  }  return new TransformationAdapterWrapper(this);}  }
class C{  @Override public Message toMessage(Object object,Session session) throws JMSException, MessageConversionException {  String xmlString=this.xmlConverter.toXml(object);  return session.createTextMessage(xmlString);}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  if (this.cordova.getActivity().isFinishing())   return true;  if (action.equals("beep")) {    this.beep(args.getLong(0));  } else   if (action.equals("alert")) {    this.alert(args.getString(0),args.getString(1),args.getString(2),callbackContext);    return true;  } else   if (action.equals("confirm")) {    this.confirm(args.getString(0),args.getString(1),args.getJSONArray(2),callbackContext);    return true;  } else   if (action.equals("prompt")) {    this.prompt(args.getString(0),args.getString(1),args.getJSONArray(2),args.getString(3),callbackContext);    return true;  } else   if (action.equals("activityStart")) {    this.activityStart(args.getString(0),args.getString(1));  } else   if (action.equals("activityStop")) {    this.activityStop();  } else   if (action.equals("progressStart")) {    this.progressStart(args.getString(0),args.getString(1));  } else   if (action.equals("progressValue")) {    this.progressValue(args.getInt(0));  } else   if (action.equals("progressStop")) {    this.progressStop();  } else {    return false;  }  callbackContext.success();  return true;}  }
class C{  public static void createCodeGroupMethod(ICodeUnit unit,StructureInfo struInfo){  IMetadataGroup grp=new DexMetadataGroupMethod("codeAnalysisMethods",MetadataGroupType.CLASSID,struInfo);  unit.getMetadataManager().addGroup(grp);}  }
class C{  public static <E>DoubleStream shiftingWindowAveragingLong(Stream<E> stream,int rollingFactor,ToLongFunction<? super E> mapper){  Objects.requireNonNull(stream);  Objects.requireNonNull(mapper);  LongStream longStream=stream.mapToLong(mapper);  return shiftingWindowAveragingLong(longStream,rollingFactor);}  }
class C{  public void sendDelayedTimeDeadbandValues(){  this.equipmentLogger.trace("sendDelayedTimeDeadbandValues - Sending all time deadband delayed values to the server");  for (  SDTTimeDeadbandScheduler tagScheduler : this.sdtTimeDeadbandSchedulers.values()) {    if (tagScheduler.isScheduledForSending()) {      tagScheduler.run();    }  }}  }
class C{  public void signalRewrittenEntry(String uid){  if (_reWrittenEntries == null)   _reWrittenEntries=new ConcurrentHashMap<String,String>();  _reWrittenEntries.put(uid,uid);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200588,skillcaster,skillname);}  }
class C{  private void updateButtonState(boolean dataChanged){  btnApply.setEnabled(dataChanged);  btnRevert.setEnabled(dataChanged);}  }
class C{  public CompositeComparator(Comparator[] cmp,boolean reverse){  this(cmp.length,reverse);  System.arraycopy(cmp,0,m_cmp,0,cmp.length);  m_size=cmp.length;}  }
class C{  public static Properties readPropertyFileFromClassPath(final String propertyFileLocation) throws ConfigurationException {  final Properties fileProperties=new Properties();  try {    final InputStream inputStream=PropertyFileLoader.class.getResourceAsStream(propertyFileLocation);    fileProperties.load(inputStream);    if (inputStream == null) {      throw new FileNotFoundException("Property file '" + propertyFileLocation + "' not found in the classpath");    }  } catch (  IOException e) {    throw new ConfigurationException("Cannot load the properties file",e);  }  return fileProperties;}  }
class C{  public Text(byte[] utf8){  set(utf8);}  }
class C{  private void waitForSearchToEnd(){  By loaderLocator=By.xpath(".//div[@class='loading-indicator' and text()='Loading content...']");  bobcatWait.withTimeout(Timeouts.BIG).until(CommonExpectedConditions.scopedElementLocatedByNotPresent(resultsPanel,loaderLocator));}  }
class C{  public ChangeSet increment(String path,short delta){  return add(new IncrementSpaceEntryMutator(path,delta));}  }
class C{  public WallEditCommentQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("meganize daaFile=");  final ArrayList<String> daaFiles=new ArrayList<>();  daaFiles.add(np.getWordFileNamePunctuation());  while (np.peekMatchAnyTokenIgnoreCase(",")) {    np.matchIgnoreCase(",");    daaFiles.add(np.getWordFileNamePunctuation());  }  float minScore=Document.DEFAULT_MINSCORE;  if (np.peekMatchIgnoreCase("minScore")) {    np.matchIgnoreCase("minScore=");    minScore=(float)np.getDouble(0,Float.MAX_VALUE);  }  float maxExpected=Document.DEFAULT_MAXEXPECTED;  if (np.peekMatchIgnoreCase("maxExpected")) {    np.matchIgnoreCase("maxExpected=");    maxExpected=(float)np.getDouble(0,Float.MAX_VALUE);  }  float minPercentIdentity=Document.DEFAULT_MIN_PERCENT_IDENTITY;  if (np.peekMatchIgnoreCase("minPercentIdentity")) {    np.matchIgnoreCase("minPercentIdentity=");    minPercentIdentity=(float)np.getDouble(0,Float.MAX_VALUE);  }  float topPercent=Document.DEFAULT_TOPPERCENT;  if (np.peekMatchIgnoreCase("topPercent")) {    np.matchIgnoreCase("topPercent=");    topPercent=(float)np.getDouble(0,100);  }  float minSupportPercent=Document.DEFAULT_MINSUPPORT_PERCENT;  if (np.peekMatchIgnoreCase("minSupportPercent")) {    np.matchIgnoreCase("minSupportPercent=");    minSupportPercent=(float)np.getDouble(0,100);  }  int minSupport=Document.DEFAULT_MINSUPPORT;  if (np.peekMatchIgnoreCase("minSupport")) {    np.matchIgnoreCase("minSupport=");    minSupport=np.getInt(0,Integer.MAX_VALUE);  }  boolean weightedLCA=Document.DEFAULT_WEIGHTED_LCA;  if (np.peekMatchIgnoreCase("weightedLCA")) {    np.matchIgnoreCase("weightedLCA=");    weightedLCA=np.getBoolean();    ProgramProperties.put("weightedLCA",weightedLCA);  }  float weightedLCAPercent=Document.DEFAULT_WEIGHTED_LCA_PERCENT;  if (np.peekMatchAnyTokenIgnoreCase("weightedLCAPercent")) {    np.matchIgnoreCase("weightedLCAPercent=");    weightedLCAPercent=(float)np.getDouble(1,100);    ProgramProperties.put("weightedLCAPercent",weightedLCAPercent);  }  float minComplexity=0;  if (np.peekMatchIgnoreCase("minComplexity")) {    np.matchIgnoreCase("minComplexity=");    minComplexity=(float)np.getDouble(-1.0,1.0);    if (minComplexity > 0)     System.err.println("IGNORED setting: minComplexity=" + minComplexity);  }  boolean useIdentityFilter=Document.DEFAULT_USE_IDENTITY;  if (np.peekMatchIgnoreCase("useIdentityFilter")) {    np.matchIgnoreCase("useIdentityFilter=");    useIdentityFilter=np.getBoolean();    if (useIdentityFilter)     System.err.println("IGNORED setting: useIdentityFilter=" + useIdentityFilter);  }  final Collection<String> known=ClassificationManager.getAllSupportedClassificationsExcludingNCBITaxonomy();  final ArrayList<String> list=new ArrayList<>();  if (np.peekMatchIgnoreCase("fNames=")) {    np.matchIgnoreCase("fNames=");    while (!np.peekMatchIgnoreCase(";")) {      String token=np.getWordRespectCase();      if (!known.contains(token)) {        np.pushBack();        break;      }      list.add(token);    }  }  final String[] cNames=list.toArray(new String[list.size()]);  boolean pairedReads=false;  int pairSuffixLength=0;  if (np.peekMatchIgnoreCase("paired")) {    np.matchIgnoreCase("paired=");    pairedReads=np.getBoolean();    if (pairedReads) {      np.matchIgnoreCase("pairSuffixLength=");      pairSuffixLength=np.getInt(0,10);      System.err.println("Assuming paired-reads distinguishing suffix has length: " + pairSuffixLength);    }  }  if (np.peekMatchIgnoreCase("hasMagnitudes")) {    np.matchIgnoreCase("hasMagnitudes=");    final boolean hasMagnitudes=np.getBoolean();    ReadMagnitudeParser.setEnabled(hasMagnitudes);    ProgramProperties.put("allow-read-weights",hasMagnitudes);  }  String description=null;  if (np.peekMatchIgnoreCase("description")) {    np.matchIgnoreCase("description=");    description=np.getWordFileNamePunctuation().trim();  }  np.matchIgnoreCase(";");  ReadMagnitudeParser.setUnderScoreEnabled(ProgramProperties.get("allow-read-weights-underscore",false));  final Director dir=(Director)getDir();  final Document doc=dir.getDocument();  int countFailed=0;  for (  String daaFile : daaFiles) {    try {      System.err.println("Meganizing file: " + daaFile);      final Director openDir=findOpenDirector(daaFile);      if (openDir != null) {        throw new IOException("File is currently open, cannot meganize open files");      }      Meganize.apply(((Director)getDir()).getDocument().getProgressListener(),daaFile,"",cNames,minScore,maxExpected,minPercentIdentity,topPercent,minSupportPercent,minSupport,pairedReads,pairSuffixLength,weightedLCA,weightedLCAPercent);{        final Document tmpDoc=new Document();        tmpDoc.getMeganFile().setFileFromExistingFile(daaFile,false);        tmpDoc.loadMeganFile();        if (description != null && description.length() > 0) {          description=description.replaceAll("^ +| +$|( )+","$1");          final String sampleName=Basic.replaceFileSuffix(Basic.getFileNameWithoutPath(tmpDoc.getMeganFile().getFileName()),"");          tmpDoc.getSampleAttributeTable().put(sampleName,SampleAttributeTable.DescriptionAttribute,description);        }        if (tmpDoc.getNumberOfReads() == 0)         NotificationsInSwing.showWarning(getViewer().getFrame(),"No reads found");      }      MeganProperties.addRecentFile(daaFile);      if (ProgramProperties.isUseGUI() && daaFiles.size() == 1) {        int result=JOptionPane.showConfirmDialog(getViewer().getFrame(),"Open meganized file?","Open?",JOptionPane.YES_NO_OPTION);        if (result == JOptionPane.YES_OPTION) {          if (daaFiles.size() == 1 && doc.neverOpenedReads) {            dir.getDocument().clearReads();            dir.getMainViewer().setDoReInduce(true);            dir.getMainViewer().setDoReset(true);            dir.executeImmediately("open file='" + daaFile + "';",dir.getMainViewer().getCommandManager());          } else {            final Director newDir=Director.newProject();            newDir.getMainViewer().setDoReInduce(true);            newDir.getMainViewer().setDoReset(true);            newDir.execute("open file='" + daaFile + "';",newDir.getMainViewer().getCommandManager());          }        }      }    } catch (    CanceledException ex) {      throw ex;    }catch (    Exception ex) {      System.err.println("Error: " + ex.getMessage());      countFailed++;    }  }  NotificationsInSwing.showInformation("Finished meganzing " + daaFiles.size() + " files"+ (countFailed > 0 ? ". ERRORS: " + countFailed : "."));}  }
class C{  public void clear(){synchronized (mLock) {    mList.clear();  }  notifyDataSetChanged();}  }
class C{  public void printMcepMean(){  printVectors(mcepMean,mcepVariance);}  }
class C{  @Override public void endAttlist(Augmentations augs) throws XNIException {}  }
class C{  @Override public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augs) throws XNIException {  try {    if (fDeclHandler != null) {      fDeclHandler.internalEntityDecl(name,text.toString());    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public <T extends BinarySearchTreeSearchCriteria<E>>T search(T criteria){  if (this.root == null)   return criteria;  BinarySearchTreeNode<E> node=this.root;  while (node != null) {    int result=criteria.evaluate(node.comparable);    if (result < 0) {      node=node.left;    } else     if (result > 0) {      node=node.right;    } else {      break;    }  }  return criteria;}  }
class C{  public static Bitmap generate(Resources resources,int resId,int width,int height,BitmapInBitmapCache inBitmapCache){  if (width == 0 || height == 0) {    return BitmapFactory.decodeResource(resources,resId);  }  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inJustDecodeBounds=true;  BitmapFactory.decodeResource(resources,resId,decodeOptions);  decodeOptions.inSampleSize=calculateInSampleSize(decodeOptions,width,height);  if (hasHoneycomb()) {    addInBitmapOptions(decodeOptions,inBitmapCache);  }  decodeOptions.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(resources,resId,decodeOptions);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_ALL_OPTION_REMOVED(String value0){  return new SM_SYSTEM_MESSAGE(1300465,value0);}  }
class C{  public static void hideKeyboard(Context context){  try {    InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    View currentFocus=((Activity)context).getCurrentFocus();    if (imm != null && currentFocus != null) {      IBinder windowToken=currentFocus.getWindowToken();      if (windowToken != null) {        imm.hideSoftInputFromWindow(windowToken,0);      }    }  } catch (  Exception e) {    Log.e(LOG_TAG,"Can't even hide keyboard " + e.getMessage());  }}  }
class C{  boolean hasFreshFileCache(){  return myInitialScanState.numXmlReparsed * 4 <= myInitialScanState.numXml;}  }
class C{  private MetricGroup up_down_host_(String host,boolean up){  final GroupName group=GroupName.valueOf(getBasePath(),Tags.valueOf(singletonMap("host",MetricValue.fromStrValue(host))));  return new SimpleMetricGroup(group,singleton(up ? UP_METRIC : DOWN_METRIC));}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  public void drawConnection(ViewTransform transform,Graphics2D g,ColorSet colorSet,boolean isSelected,boolean showMargin,int originalCreator,float progress){  if (!mAnchor.isConnected()) {    return;  }  if (mAnchor != null && mAnchor.getConnectionCreator() == ConstraintAnchor.AUTO_CONSTRAINT_CREATOR) {    startLock();  }  ConnectionDrawing drawing=new ConnectionDrawing();  ConstraintWidget targetWidget=mAnchor.getTarget().getOwner();  WidgetCompanion targetCompanion=(WidgetCompanion)targetWidget.getCompanionWidget();  if (targetCompanion == null) {    return;  }  WidgetInteractionTargets interactionTargets=targetCompanion.getWidgetInteractionTargets();  ConstraintHandle targetHandle=interactionTargets.getConstraintHandle(mAnchor.getTarget());  if (targetHandle == null) {    return;  }  g.setStroke(sSimpleStroke);  int sx=transform.getSwingFX(mX);  int sy=transform.getSwingFY(mY);  int tx=transform.getSwingFX(targetHandle.getDrawX());  int ty=transform.getSwingFY(targetHandle.getDrawY());  if (targetHandle.getOwner().isRootContainer()) {    if (mAnchor.isVerticalAnchor()) {      tx=sx;    } else {      ty=sy;    }  }  int minimum=(int)(1.5 * ConnectionDraw.CONNECTION_ANCHOR_SIZE);  if (Math.abs(sx - tx) < minimum && Math.abs(sy - ty) < minimum) {switch (mAnchor.getType()) {case LEFT:{        drawShadowedArrow(g,colorSet,ConnectionDraw.getLeftArrow(),sx,sy);      }    break;case TOP:{    drawShadowedArrow(g,colorSet,ConnectionDraw.getTopArrow(),sx,sy);  }break;case RIGHT:{drawShadowedArrow(g,colorSet,ConnectionDraw.getRightArrow(),sx,sy);}break;case BOTTOM:{drawShadowedArrow(g,colorSet,ConnectionDraw.getBottomArrow(),sx,sy);}break;}return;}if (mAnchor.getOpposite() != null && mAnchor.getOpposite().isConnected()) {if (mAnchor.getOpposite().getTarget() == mAnchor.getTarget()) {addPathCenteredConnectionOnSameAnchor(transform,g,isSelected,drawing,targetHandle,targetWidget);} else if ((mAnchor.getOpposite().getTarget().getOwner() == mAnchor.getTarget().getOwner()) && targetWidget != getOwner().getParent()) {if (mAnchor.getConnectionCreator() == ConstraintAnchor.AUTO_CONSTRAINT_CREATOR) {g.setStroke(colorSet.getSoftConstraintStroke());}addPathCenteredConnectionOnSameWidget(transform,g,isSelected,drawing,colorSet,targetHandle,targetWidget);} else {if (mAnchor.getConnectionCreator() == ConstraintAnchor.AUTO_CONSTRAINT_CREATOR) {g.setStroke(colorSet.getSoftConstraintStroke());}addPathCenteredConnection(transform,g,isSelected,drawing,colorSet,targetHandle,targetWidget);}} else {addPathConnection(transform,g,isSelected,showMargin,drawing,colorSet,targetHandle.getDrawX(),targetHandle.getDrawY(),mAnchor.isConnected(),targetHandle.getAnchor().isConnected());}if (progress <= 1 && progress >= 0.1) {int distance=lengthOfPath(drawing.mPath);int dashFull=(int)(distance * progress);int dashEmpty=(int)(distance * (1 - progress));if (dashFull > 0 || dashEmpty > 0) {Stroke s=g.getStroke();if (originalCreator == ConstraintAnchor.AUTO_CONSTRAINT_CREATOR || originalCreator == ConstraintAnchor.SCOUT_CREATOR) {if (originalCreator != ConstraintAnchor.SCOUT_CREATOR) {g.setColor(colorSet.getSoftConstraintColor());g.setStroke(colorSet.getSoftConstraintStroke());drawing.draw(g);}Stroke progressStroke=new BasicStroke(2,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0,new float[]{dashFull,dashEmpty},0);g.setStroke(progressStroke);if (progress != 1) {drawing.mDrawArrow=false;}if (originalCreator != ConstraintAnchor.SCOUT_CREATOR) {g.setColor(colorSet.getSelectedConstraints());}drawing.draw(g);} else {g.setColor(colorSet.getSoftConstraintColor());g.setStroke(colorSet.getSoftConstraintStroke());drawing.draw(g);Stroke progressStroke=new BasicStroke(2,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0,new float[]{dashEmpty,dashFull},0);g.setColor(colorSet.getSelectedConstraints());g.setStroke(progressStroke);if (progress == 1) {drawing.mDrawArrow=false;}drawing.draw(g);}int distanceCircle=(int)(2 * Math.PI * 10);Color prev=g.getColor();int solidCircle=(int)(distanceCircle * progress);int emptyCircle=(int)(distanceCircle * (1 - progress));Stroke circleProgressStrokeOuter=new BasicStroke(4,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0,new float[]{solidCircle,emptyCircle},0);g.setColor(colorSet.getBackground());g.setStroke(circleProgressStrokeOuter);int d=2 * sCountDownRadius;g.drawRoundRect(sx - sCountDownRadius,sy - sCountDownRadius,d,d,d,d);Stroke circleProgressStroke=new BasicStroke(3,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0,new float[]{solidCircle,emptyCircle},0);g.setColor(prev);g.setStroke(circleProgressStroke);g.drawRoundRect(sx - sCountDownRadius,sy - sCountDownRadius,d,d,d,d);g.setStroke(s);}} else {paintShadow(g,colorSet,drawing);drawing.draw(g);}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ExtendAuraRange_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200513,skilltarget,skillname);}  }
class C{  private void editWorldAction(){synchronized (Simulation.LOCK) {    EditWorldDialog.show(ControlUtilities.getParentWindow(this),this.simulation.getWorld());  }  this.model.nodeChanged(this.root);}  }
class C{  public boolean replaceNaNByZero(){  boolean changed=false;  for (int i=0; i < matrix.length; i++) {    for (int j=0; j < matrix.length; j++) {      if (Double.isNaN(matrix[i][j])) {        matrix[i][j]=0;        changed=true;      }    }  }  return changed;}  }
class C{  public boolean isSymbol(){  return myPath == null && mySnippets == null && myObject != null && myObject.getClass() == String.class;}  }
class C{  private Task<T> readTaskUsingFreshClassLoader(ObjectInput in) throws ClassNotFoundException, IOException {  ClassLoader old=ClassLoaderHelper.getContextClassLoader();  try {    ClassLoaderHelper.setContextClassLoader(new TaskClassLoader(new URL[]{},old),true);    return (Task<T>)in.readObject();  }  finally {    ClassLoaderHelper.setContextClassLoader(old,true);  }}  }
class C{  public void animateX(int durationMillis,EasingFunction easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(easing);  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof ServiceType))   return false;  ServiceType t=(ServiceType)o;  return hash == t.hash;}  }
class C{  protected void drawXAxis(Graphics2D gc){}  }
class C{  public FriendsEditListQuery(VkApiClient client,UserActor actor,int listId){  super(client,"friends.editList",OkResponse.class);  accessToken(actor.getAccessToken());  listId(listId);}  }
class C{  public boolean open_nesting(){  return soot.PhaseOptions.getBoolean(options,"open-nesting");}  }
class C{  public MurmurHash3Variant variant(){  return variant;}  }
class C{  @Override public int available(){  if (inputSource == null)   return 0;  return inputSource.available();}  }
class C{  public PhotosConfirmTagQuery confirmTag(UserActor actor,String photoId,int tagId){  return new PhotosConfirmTagQuery(getClient(),actor,photoId,tagId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Deform_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200654,skillcaster,value0,skillname);}  }
class C{  public static void onAttack(NpcAI2 npcAI,Creature creature){  handleNumericEvent(npcAI,creature,ShoutEventType.ATTACK_K);}  }
class C{  private void drawTitle(Graphics2D gc){  if (chartTitle != null) {    Dimension labelSize=Basic.getStringSize(gc,chartTitle,gc.getFont()).getSize();    int x=(getWidth() - labelSize.width) / 2;    int y=labelSize.height + 5;    gc.setFont(getFont(ChartViewer.FontKeys.TitleFont.toString()));    gc.setColor(getFontColor(ChartViewer.FontKeys.TitleFont.toString(),Color.BLACK));    gc.drawString(chartTitle,x,y);  }}  }
class C{  public boolean loadBitmap(final String type,final Long resourceId,final ImageView imageView,final String path){  final String imageKey=String.valueOf(resourceId);  BitmapDrawable bitmap=mCacheManager.getBitmapFromMemCache(imageKey);  if (bitmap != null) {    imageView.setImageDrawable(bitmap);    return true;  }  if (GalleryLoader.cancelPotentialWork(resourceId,imageView)) {    GalleryLoader galleryLoader=new GalleryLoader(mContext,imageView,type,mCacheManager,path);    GalleryLoader.AsyncDrawable asyncDrawable=new GalleryLoader.AsyncDrawable(mContext.getResources(),mPlaceHolderBitmap,galleryLoader);    imageView.setImageDrawable(asyncDrawable);    try {      galleryLoader.execute(resourceId);    } catch (    RejectedExecutionException exception) {      exception.printStackTrace();      return false;    }  }  return true;}  }
class C{  private void init(final AttributeSet attrs){  Typeface typeface;  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {    super.setTypeface(typeface,typeface.getStyle());  }}  }
class C{  public void stopRecording(){  m_line.stop();  m_line.close();}  }
class C{  public static String httpArray2(List<String> classIds){  String s="";  for (  Object o : classIds) {    s=s + o.toString() + ",";  }  return s.substring(0,s.length() - 1);}  }
class C{  public Location multiply(double m){  x*=m;  y*=m;  z*=m;  return this;}  }
class C{  public void init$Children(){  children=new ASTNode[6];  setChild(new List(),2);  setChild(new List(),3);  setChild(new Opt(),4);  setChild(new List(),5);}  }
class C{  public static FifoSupport fromOld(boolean isFifo){  return isFifo ? FifoSupport.ALL : FifoSupport.OFF;}  }
class C{  protected void sanityCheck(){  boolean err=false;  Iterator it=edges.keySet().iterator();  while (it.hasNext()) {    PurityNode src=(PurityNode)it.next();    Iterator itt=edges.get(src).iterator();    while (itt.hasNext()) {      PurityEdge e=(PurityEdge)itt.next();      if (!src.equals(e.getSource())) {        G.v().out.println("invalid edge source " + e + ", should be "+ src);        err=true;      }      if (!nodes.contains(e.getSource())) {        G.v().out.println("nodes does not contain edge source " + e);        err=true;      }      if (!nodes.contains(e.getTarget())) {        G.v().out.println("nodes does not contain edge target " + e);        err=true;      }      if (!backEdges.get(e.getTarget()).contains(e)) {        G.v().out.println("backEdges does not contain edge " + e);        err=true;      }      if (!e.isInside() && !e.getTarget().isLoad()) {        G.v().out.println("target of outside edge is not a load node " + e);        err=true;      }    }  }  it=backEdges.keySet().iterator();  while (it.hasNext()) {    PurityNode dst=(PurityNode)it.next();    Iterator itt=backEdges.get(dst).iterator();    while (itt.hasNext()) {      PurityEdge e=(PurityEdge)itt.next();      if (!dst.equals(e.getTarget())) {        G.v().out.println("invalid backEdge dest " + e + ", should be "+ dst);        err=true;      }      if (!edges.get(e.getSource()).contains(e)) {        G.v().out.println("backEdge not in edges " + e);        err=true;      }    }  }  it=nodes.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (n.isParam() && !paramNodes.contains(n)) {      G.v().out.println("paramNode not in paramNodes " + n);      err=true;    }  }  it=paramNodes.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!n.isParam()) {      G.v().out.println("paramNode contains a non-param node " + n);      err=true;    }    if (!nodes.contains(n)) {      G.v().out.println("paramNode not in nodes " + n);      err=true;    }  }  it=globEscape.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!nodes.contains(n)) {      G.v().out.println("globEscape not in nodes " + n);      err=true;    }  }  it=locals.keySet().iterator();  while (it.hasNext()) {    Local l=(Local)it.next();    Iterator itt=locals.get(l).iterator();    while (itt.hasNext()) {      PurityNode n=(PurityNode)itt.next();      if (!nodes.contains(n)) {        G.v().out.println("target of local node in nodes " + l + " / "+ n);        err=true;      }      if (!backLocals.get(n).contains(l)) {        G.v().out.println("backLocals does contain local " + l + " / "+ n);        err=true;      }    }  }  it=backLocals.keySet().iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    Iterator itt=backLocals.get(n).iterator();    while (itt.hasNext()) {      Local l=(Local)itt.next();      if (!nodes.contains(n)) {        G.v().out.println("backLocal node not in in nodes " + l + " / "+ n);        err=true;      }      if (!locals.get(l).contains(n)) {        G.v().out.println("locals does contain backLocal " + l + " / "+ n);        err=true;      }    }  }  it=ret.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!nodes.contains(n)) {      G.v().out.println("target of ret not in nodes " + n);      err=true;    }  }  it=mutated.keySet().iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!nodes.contains(n)) {      G.v().out.println("mutated node not in nodes " + n);      err=true;    }  }  if (err) {    dump();    DotGraph dot=new DotGraph("sanityCheckFailure");    fillDotGraph("chk",dot);    dot.plot("sanityCheckFailure.dot");    throw new Error("PurityGraph sanity check failed!!!");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_MONSTER_SKILL(String value0,String value1,String value2){  return new SM_SYSTEM_MESSAGE(1300729,value0,value1,value2);}  }
class C{  private void assertMatchProperties(PhoneNumberMatch match,String text,String number,String region) throws Exception {  PhoneNumber expectedResult=phoneUtil.parse(number,region);  assertNotNull("Did not find a number in '" + text + "'; expected "+ number,match);  assertEquals(expectedResult,match.number());  assertEquals(number,match.rawString());}  }
class C{  synchronized static void ensureSecurityManager(){  if (System.getSecurityManager() == null) {    System.setSecurityManager(new RMISecurityManager());  }}  }
class C{  public synchronized void deleteCustomPropertiesStorage(){  if (propertiesFile != null && propertiesFile.exists())   if (!propertiesFile.delete())   propertiesFile.deleteOnExit();}  }
class C{  private FindResult findNode(final String path,final boolean create){  checkModified();  final ArrayList<String> parts=new ArrayList<>(Arrays.asList(path.split("\\.")));  JSONObject current=json;  for (  final String item : parts.subList(0,parts.size() - 1)) {    if (!current.has(item) && create) {      current.put(item,new JSONObject());    }    current=current.getJSONObject(item);  }  return new FindResult(current,parts.get(parts.size() - 1));}  }
class C{  public DataReadOnlyException(String message){  super(message);}  }
class C{  int positionOfItem(Item item){  int offset=0;  for (  List<?> section : mSections) {    int index=section.indexOf(item);    if (index != -1) {      return offset + index;    }    offset+=section.size();  }  return -1;}  }
class C{  public static <E>E justChoose(E v,E... not){  return v;}  }
class C{  protected void prepareRows(){  JQueryElement rows=$table.find("tr.data-row");  rows.off("." + name);  if (!selectionType.equals(SelectionType.NONE)) {    rows.on("tap." + name + " click."+ name,null);  }  rows.on("contextmenu." + name,null);  rows.on("dblclick." + name,null);  JQueryExtension.$(rows).longpress(null,null,longPressDuration);  JQueryElement expands=$table.find("i#expand");  expands.off("." + name);  if (useRowExpansion) {    expands.on("tap." + name + " click."+ name,null);  }  subheaderLib.detect();  subheaderLib.recalculate(true);}  }
class C{  public void insertKey(DataType key,RecordID rid){  BPlusNode.getBPlusNode(this,rootPageNum).insertKey(key,rid);}  }
class C{  public static double sumSquaredError(double[] a,double[] b){  if (a.length != b.length) {    throw new IllegalArgumentException("Arrays must be equal length");  }  double sum=0;  for (int i=0; i < a.length; i++) {    double delta=a[i] - b[i];    if (!Double.isNaN(delta)) {      sum+=delta * delta;    }  }  return sum;}  }
class C{  public boolean isGreaterThan(GameTime gt){  return this.getTime() > gt.getTime();}  }
class C{  private void triggerProblem(BinaryExpression objExpression){  PsiElement objLeftOperand=objExpression.getLeftOperand();  PsiElement objRightOperand=objExpression.getRightOperand();  if (objRightOperand instanceof StringLiteralExpression || objLeftOperand instanceof StringLiteralExpression) {    PsiElement objNonStringOperand;    String strLiteralValue;    if (objRightOperand instanceof StringLiteralExpression) {      strLiteralValue=((StringLiteralExpression)objRightOperand).getContents();      objNonStringOperand=objLeftOperand;    } else {      strLiteralValue=((StringLiteralExpression)objLeftOperand).getContents();      objNonStringOperand=objRightOperand;    }    objNonStringOperand=ExpressionSemanticUtil.getExpressionTroughParenthesis(objNonStringOperand);    if (null != objNonStringOperand && ClassInStringContextStrategy.apply(objNonStringOperand,holder,objExpression,strProblemDescriptionMissingToStringMethod)) {      return;    }    if (strLiteralValue.length() > 0 && !strLiteralValue.matches("^[0-9\\+\\-]+$")) {      holder.registerProblem(objExpression,strProblemDescriptionSafeToReplace,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);      return;    }  }  holder.registerProblem(objExpression,strProblemDescription,ProblemHighlightType.WEAK_WARNING);}  }
class C{  public String removeUser(String user){  ResponseEntity<String> response=restTemplate.exchange(url + RMAControllerMappings.REMOVE_USER_MAPPING + "userName="+ user,HttpMethod.GET,request,String.class);  return response.getBody();}  }
class C{  public static float abs(float fValue){  if (fValue < 0) {    return -fValue;  }  return fValue;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private void mapConfigProperties(ContainerState containerState,Map<String,Object> config){  if (config == null) {    return;  }  @SuppressWarnings("unchecked") Collection<String> commandList=(Collection<String>)config.get(DOCKER_CONTAINER_COMMAND_PROP_NAME);  if (commandList != null) {    containerState.command=commandList.toArray(new String[0]);  }  String image=(String)config.get(DOCKER_CONTAINER_IMAGE_PROP_NAME);  if (image != null) {    containerState.image=image;  }}  }
class C{  public static int findGlobalPeakLocation(float[] data){  float max=Float.NaN;  int imax=-1;  for (int i=0; i < data.length; i++) {    if (Float.isNaN(data[i]))     continue;    if (Float.isNaN(max) || data[i] > max) {      max=data[i];      imax=i;    }  }  return imax;}  }
class C{  public static MBeanServerConnection createMBeanServerConnection(String jndiURL) throws Exception {  JMXServiceURL url=new JMXServiceURL(JMXUtilities.createJMXUrl(jndiURL));  JMXConnector jmxc=JMXConnectorFactory.connect(url,null);  return jmxc.getMBeanServerConnection();}  }
class C{  public OrderedDataOutputStream(OutputStream out){  super(out);  _order=ByteOrder.LITTLE_ENDIAN;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_LISTING_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1390218,value0);}  }
class C{  public T dotProduct(final Vector3D v){  return x.linearCombination(v.getX(),x,v.getY(),y,v.getZ(),z);}  }
class C{  public Vector<OCFile> filterHiddenFiles(Vector<OCFile> files){  Vector<OCFile> ret=new Vector<>();  OCFile current;  for (int i=0; i < files.size(); i++) {    current=files.get(i);    if (!current.isHidden()) {      ret.add(current);    }  }  return ret;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCBuff_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201249,skilltarget,skillname);}  }
class C{  public boolean isCancelled(){  return this.request != null && request.isCancelled();}  }
class C{  public synchronized void cancel(){}  }
class C{  public Bundler putString(String key,String value){  bundle.putString(key,value);  return this;}  }
class C{  public TimeMetaData(String name,DateTimeZone timeZone){  this(name,timeZone,null,null);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (server == null) {    throw new InvalidObjectException("TxnMgrAdminProxy.readObject " + "failure - server " + "field is null");  }  if (proxyID == null) {    throw new InvalidObjectException("TxnMgrAdminProxy.proxyID " + "failure - proxyID " + "field is null");  }}  }
class C{  public PhotosGetAllQuery needHidden(Boolean value){  return unsafeParam("need_hidden",value);}  }
class C{  private void initView(){  this.progressView=(CircularProgressView)findViewById(R.id.container_user_profile_progressView);  progressView.setVisibility(VISIBLE);  this.profileContainer=(RelativeLayout)findViewById(R.id.container_user_profile_profileContainer);  profileContainer.setVisibility(GONE);  this.locationTxt=(TextView)findViewById(R.id.container_user_profile_locationTxt);  DisplayUtils.setTypeface(getContext(),locationTxt);  this.bioTxt=(TextView)findViewById(R.id.container_user_profile_bio);  DisplayUtils.setTypeface(getContext(),bioTxt);  if (Mysplash.getInstance().isLightTheme()) {    ((ImageView)findViewById(R.id.container_user_profile_locationIcon)).setImageResource(R.drawable.ic_location_light);  } else {    ((ImageView)findViewById(R.id.container_user_profile_locationIcon)).setImageResource(R.drawable.ic_location_dark);  }}  }
class C{  public boolean isApplicable(){  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;}  }
class C{  public static float mean(float[] data,int[] inds){  float mean=0;  for (int i=0; i < inds.length; i++) {    if (Float.isNaN(data[inds[i]]))     throw new IllegalArgumentException("NaN not allowed in mean calculation");    mean+=data[inds[i]];  }  mean/=inds.length;  return mean;}  }
class C{  public static void clear(String collection){  try {    MongoCollection<Document> c=MongoHelper.getCollection(collection);    if (c != null) {      c.deleteMany(new BasicDBObject());    }  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(e.getMessage(),e);  }}  }
class C{  public Z Times(double a,Z b){  re=a * b.re;  im=a * b.im;  return this;}  }
class C{  public void showProgressView(){  if (null != mBaseLayout) {    mBaseLayout.showProgressView();  }}  }
class C{  public void cancelAllTasks(boolean mayInterruptIfRunning){  for (  SingleAsyncTask singleAsyncTask : mSingleAsyncTaskList) {    cancelTask(singleAsyncTask,mayInterruptIfRunning);  }  mSingleAsyncTaskList.clear();}  }
class C{  public boolean isSetResponseInfo(){  return this.responseInfo != null;}  }
class C{  public BrowsableImplementor(BrowsableModel model,BrowsableView view){  this.model=model;  this.view=view;}  }
class C{  @RequestMapping(value="/race-results/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteRaceResult(@PathVariable String id){  log.debug("REST request to delete RaceResult : {}",id);  raceResultRepository.delete(UUID.fromString(id));  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("raceResult",id.toString())).build();}  }
class C{  private String computeOverrideMethodDesc(String desc,boolean isStatic){  if (isStatic) {    return desc;  } else {    return instanceToStaticDescPrefix + desc.substring(1);  }}  }
class C{  public final Event<Boolean> updateFromSource(final Long dataTagId,final SourceDataTagValue sourceDataTagValue){  tagCache.acquireWriteLockOnKey(dataTagId);  try {    T dataTag=tagCache.get(dataTagId);    if (sourceDataTagValue != null && sourceDataTagValue.getValue() != null && isKnownClass(dataTag.getDataType())) {      Object convertedValue=TypeConverter.cast(sourceDataTagValue.getValue(),dataTag.getDataType());      sourceDataTagValue.setValue(convertedValue);    }    Event<Boolean> returnEvent=updateFromSource(dataTag,sourceDataTagValue);    if (returnEvent.getReturnValue()) {      tagCache.put(dataTagId,dataTag);    }    return returnEvent;  }  finally {    tagCache.releaseWriteLockOnKey(dataTagId);  }}  }
class C{  public static double uniform(double a,double b){  if (!(a < b))   throw new IllegalArgumentException("Invalid range");  return a + uniform() * (b - a);}  }
class C{  public NBodyForce(){  this(DEFAULT_GRAV_CONSTANT,DEFAULT_DISTANCE,DEFAULT_THETA);}  }
class C{  public DatagramDoubleDataSource(LinkedList<Datagram> datagrams){  super((DoubleDataSource)null);  this.datagrams=datagrams;  dataLength=0;  for (  Datagram d : datagrams) {    dataLength+=d.getDuration();  }}  }
class C{  public static byte readByte(){  return scanner.nextByte();}  }
class C{  void receiveReplacedText(CharacterDataImpl node){  if (node == null)   return;  if (node == fStartContainer) {    fStartOffset=0;  }  if (node == fEndContainer) {    fEndOffset=0;  }}  }
class C{  public static final void banPlayer(Player bannedPlayer,Player banGiver){  Preconditions.checkNotNull(bannedPlayer,"Banned player should not be null");  Preconditions.checkNotNull(banGiver,"Bangiver player should not be null");  PlayerAlliance alliance=banGiver.getPlayerAlliance2();  if (alliance != null) {    if (alliance.getTeamType().isDefence()) {      VortexService.getInstance().removeDefenderPlayer(bannedPlayer);    }    PlayerAllianceMember bannedMember=alliance.getMember(bannedPlayer.getObjectId());    if (bannedMember != null) {      alliance.onEvent(new PlayerAllianceLeavedEvent(alliance,bannedMember.getObject(),LeaveReson.BAN,banGiver.getName()));    } else {      log.warn("TEAM2: banning player not in alliance {}",alliance.onlineMembers());    }  }}  }
class C{  @SuppressWarnings("unchecked") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  public void removeArguments(String label){  List<PBArgument> remove=new ArrayList<>();  for (  PBArgument arg : l_arguments) {    if (arg.isLabel(label))     remove.add(arg);  }  l_arguments.removeAll(remove);}  }
class C{  private static void assertJsonArrayEquals(String expected,String actual){  ObjectMapper mapper=new ObjectMapper();  TypeReference<List<Object>> ref=new TypeReference<List<Object>>(){  };  try {    List<Object> el=mapper.readValue(expected,ref);    List<Object> al=mapper.readValue(actual,ref);    assertEquals(el,al);  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isNonsingular()) {    throw new RuntimeException("Matrix is singular.");  }  int nx=B.getColumnDimension();  Matrix Xmat=B.getMatrix(piv,0,nx - 1);  double[][] X=Xmat.getArray();  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=LU[k][k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  return Xmat;}  }
class C{  private String computeConsensus(Map<String,String> globalAlignment,char unknownChar){  if (globalAlignment.size() > 0) {    String firstRow=globalAlignment.values().iterator().next();    StringBuilder buf=new StringBuilder();    Map<Character,Integer> char2count=new HashMap<>();    for (int i=0; i < firstRow.length(); i++) {      for (      String row : globalAlignment.values()) {        char ch=row.charAt(i);        if (Character.isLetter(ch)) {          Integer count=char2count.get(ch);          if (count == null)           char2count.put(ch,1); else           char2count.put(ch,count + 1);        }      }      char bestChar=unknownChar;      int bestCount=0;      for (      Character ch : char2count.keySet()) {        if (char2count.get(ch) > bestCount) {          bestChar=ch;          bestCount=char2count.get(ch);        }      }      buf.append(bestChar);      char2count.clear();    }    return buf.toString();  } else   return "";}  }
class C{  @Override public void startAttlist(String elementName,Augmentations augmentations) throws XNIException {}  }
class C{  public void deleteSortLocationIfExists() throws CarbonSortKeyAndGroupByException {  CarbonDataProcessorUtil.deleteSortLocationIfExists(parameters.getTempFileLocation());}  }
class C{  public static Map<String,Object> callDataResourcePermissionCheckResult(Delegator delegator,LocalDispatcher dispatcher,Map<String,Object> context){  Map<String,Object> permResults=FastMap.newInstance();  String skipPermissionCheck=(String)context.get("skipPermissionCheck");  if (Debug.infoOn())   Debug.logInfo("in callDataResourcePermissionCheckResult, skipPermissionCheck:" + skipPermissionCheck,"");  if (UtilValidate.isEmpty(skipPermissionCheck) || (!"true".equalsIgnoreCase(skipPermissionCheck) && !"granted".equalsIgnoreCase(skipPermissionCheck))) {    GenericValue userLogin=(GenericValue)context.get("userLogin");    Map<String,Object> serviceInMap=FastMap.newInstance();    serviceInMap.put("userLogin",userLogin);    serviceInMap.put("targetOperationList",context.get("targetOperationList"));    serviceInMap.put("contentPurposeList",context.get("contentPurposeList"));    serviceInMap.put("entityOperation",context.get("entityOperation"));    String ownerContentId=(String)context.get("ownerContentId");    if (UtilValidate.isNotEmpty(ownerContentId)) {      try {        GenericValue content=EntityQuery.use(delegator).from("Content").where("contentId",ownerContentId).queryOne();        if (content != null)         serviceInMap.put("currentContent",content);      } catch (      GenericEntityException e) {        Debug.logError(e,"e.getMessage()","ContentServices");      }    }    try {      permResults=dispatcher.runSync("checkContentPermission",serviceInMap);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problem checking permissions","ContentServices");    }  } else {    permResults.put("permissionStatus","granted");  }  return permResults;}  }
class C{  public Item add_CharacterTransfer(Item item){  if (item.getItemTemplate().isKinah()) {    this.kinahItem=item;  } else   if (!itemStorage.putItem(item)) {    return null;  }  item.setItemLocation(storageType.getId());  setPersistentState(PersistentState.UPDATE_REQUIRED);  return item;}  }
class C{  @Override public Document newDocument(){  return new mf.org.apache.xerces.dom.DocumentImpl();}  }
class C{  public static StorableLocationFence exiting(double latitude,double longitude,double radius){  return new StorableLocationFence(EXIT_TYPE,latitude,longitude,radius,0);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set pc1=1 pc2=3;");}  }
class C{  private Utils(){}  }
class C{  public byte[] toByteArray(){  byte newbuf[]=new byte[_count];  System.arraycopy(_buffer,0,newbuf,0,_count);  return newbuf;}  }
class C{  public void execute(DelegateExecution execution){  leave(execution);}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  private String parseTimeFromPing(String ping){  String time="";  if (ping.contains(TIME_PING)) {    int index=ping.indexOf(TIME_PING);    time=ping.substring(index + 5);    index=time.indexOf(" ");    time=time.substring(0,index);  }  return time;}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   httpDelete.setHeaders(headers);  return sendRequest(httpClient,httpContext,httpDelete,null,responseHandler,context);}  }
class C{  public WallCreateCommentQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  public TelemetryService(AirMapFlight flight){  this.flight=flight;  connect();}  }
class C{  public static void stopTiming(Object caller){  stopTiming(caller.getClass().getSimpleName());}  }
class C{  public static String readFileToString(File file) throws IOException {  return readFileToString(file,Charset.defaultCharset());}  }
class C{  public static float ulp(float x){  if (Float.isInfinite(x)) {    return Float.POSITIVE_INFINITY;  }  return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));}  }
class C{  public HalfPhoneTarget(String name,Element maryxmlElement,boolean isLeftHalf){  super(name,maryxmlElement);  this.isLeftHalf=isLeftHalf;}  }
class C{  public static NamedLayer createNewNamedLayer(){  NamedLayer namedLayer=styleFactory.createNamedLayer();  return namedLayer;}  }
class C{  public UnitFileReader(String fileName) throws IOException, MaryConfigurationException {  load(fileName);}  }
class C{  public Object[] keys(){  Object[] keys=new Object[size()];  K[] k=(K[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != FREE && k[i] != REMOVED) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public int numberOfObjects(){  return numberOfObjects;}  }
class C{  public static Paint newBorderPaint(@NonNull Resources resources){  final Paint paint=new Paint();  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(resources.getDimension(R.dimen.border_thickness));  paint.setColor(resources.getColor(R.color.border));  return paint;}  }
class C{  public synchronized void stopPreview(){  if (camera != null && previewing) {    camera.stopPreview();    previewing=false;  }}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  public static IOFileFilter ageFileFilter(long cutoff,boolean acceptOlder){  return new AgeFileFilter(cutoff,acceptOlder);}  }
class C{  public JSONArray names(){  return nameValuePairs.isEmpty() ? null : new JSONArray(new ArrayList<String>(nameValuePairs.keySet()));}  }
class C{  public static Map<String,String> arrayToMap(String[] a){  Map<String,String> m=new HashMap<String,String>();  for (int i=0; i < a.length; i+=2) {    m.put(a[i],a[i + 1]);  }  return m;}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new List(),0);}  }
class C{  public void mergedWith(Node n1,Node n2){}  }
class C{  public static boolean retryInfinitelyBoolean(final Callable<Boolean> callable){  return booleanResponseRetryer.retryInfinitely(callable);}  }
class C{  void addContext(ContextVarNode cvn,Object context){  if (cvns == null)   cvns=new HashMap<Object,ContextVarNode>();  cvns.put(context,cvn);}  }
class C{  public FriendsGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public PhotosGetQuery rev(Boolean value){  return unsafeParam("rev",value);}  }
class C{  @Override public void runSyncIgnore(String localName,ModelService modelService,Map<String,Object> context) throws GenericServiceException {  runSync(localName,modelService,context);}  }
class C{  static BitArray interleaveWithECBytes(BitArray bits,int numTotalBytes,int numDataBytes,int numRSBlocks) throws WriterException {  if (bits.getSizeInBytes() != numDataBytes) {    throw new WriterException("Number of bits and data bytes does not match");  }  int dataBytesOffset=0;  int maxNumDataBytes=0;  int maxNumEcBytes=0;  Collection<BlockPair> blocks=new ArrayList<>(numRSBlocks);  for (int i=0; i < numRSBlocks; ++i) {    int[] numDataBytesInBlock=new int[1];    int[] numEcBytesInBlock=new int[1];    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);    int size=numDataBytesInBlock[0];    byte[] dataBytes=new byte[size];    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);    blocks.add(new BlockPair(dataBytes,ecBytes));    maxNumDataBytes=Math.max(maxNumDataBytes,size);    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);    dataBytesOffset+=numDataBytesInBlock[0];  }  if (numDataBytes != dataBytesOffset) {    throw new WriterException("Data bytes does not match offset");  }  BitArray result=new BitArray();  for (int i=0; i < maxNumDataBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] dataBytes=block.getDataBytes();      if (i < dataBytes.length) {        result.appendBits(dataBytes[i],8);      }    }  }  for (int i=0; i < maxNumEcBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] ecBytes=block.getErrorCorrectionBytes();      if (i < ecBytes.length) {        result.appendBits(ecBytes[i],8);      }    }  }  if (numTotalBytes != result.getSizeInBytes()) {    throw new WriterException("Interleaving error: " + numTotalBytes + " and "+ result.getSizeInBytes()+ " differ.");  }  return result;}  }
class C{  public String nextCDATA() throws JSONException {  char c;  int i;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=next();    if (end()) {      throw syntaxError("Unclosed CDATA");    }    sb.append(c);    i=sb.length() - 3;    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {      sb.setLength(i);      return sb.toString();    }  }}  }
class C{  public void ensureStateIsDraft(Experiment experiment){  Experiment.State state=experiment.getState();  if (!state.equals(Experiment.State.DRAFT)) {    throw new InvalidExperimentStateException(experiment.getID(),Experiment.State.DRAFT,experiment.getState());  }}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public void release(int... keys){  for (  int key : keys) {    release(key);  }}  }
class C{  @Override public String toString(){  return gson.toJson(this);}  }
class C{  private void assignCoordinatesToNodesRec(Node v,BitSet splitsInPath,NodeSet nodesVisited,boolean useWeights,PhyloTreeView view) throws NotOwnerException {  PhyloTree graph=(PhyloTree)view.getGraph();  if (!nodesVisited.contains(v)) {    nodesVisited.add(v);    Iterator it=graph.getAdjacentEdges(v);    while (it.hasNext()) {      Edge e=(Edge)it.next();      int s=graph.getSplit(e);      if (!splitsInPath.get(s)) {        Node w=graph.getOpposite(v,e);        Point2D p=Geometry.translateByAngle(view.getLocation(v),graph.getAngle(e),useWeights ? graph.getWeight(e) : 1);        view.setLocation(w,p);        splitsInPath.set(s,true);        assignCoordinatesToNodesRec(w,splitsInPath,nodesVisited,useWeights,view);        splitsInPath.set(s,false);      }    }  }}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  resetData();}  }
class C{  protected void importFrames(double[] frames,double step){  ArrayList<PitchTarget> newTargets=new ArrayList<PitchTarget>();  double t=xmin;  for (int i=0; i < frames.length; i++) {    if (!Double.isNaN(frames[i])) {      newTargets.add(new PitchTarget(t,frames[i]));    }    t+=step;  }  targets=newTargets.toArray(new PitchTarget[0]);  numTargets=targets.length;}  }
class C{  public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY,boolean flywheel){  this(context,interpolator,flywheel);}  }
class C{  @Override public Object analyse(double[] frame){  if (frame.length != getFrameLengthSamples())   throw new IllegalArgumentException("Expected frame of length " + getFrameLengthSamples() + ", got "+ frame.length);  System.arraycopy(frame,0,correlationInput,0,frame.length);  Arrays.fill(correlationInput,frame.length,correlationInput.length,0);  return FFT.autoCorrelate(correlationInput);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTEND_INVENTORY_CANT_EXTEND_MORE_DUE_TO_MAXIMUM_EXTEND_LEVEL_BY_THIS_NPC(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300437,value0,value1);}  }
class C{  protected void onBindFooterViewHolder(RecyclerView.ViewHolder holder,int position){}  }
class C{  private void populateRoute(Context context){  Time.sleep(300);  try {    List<Pokestop> stops=context.getMap().getMapObjects().getPokestops().stream().filter(null).collect(Collectors.toList());    int count=stops.size();    last=S2LatLng.fromDegrees(context.getLat().doubleValue(),context.getLng().doubleValue());    while (route.size() < count - 1) {      List<Pokestop> tempStops=stops.stream().filter(null).sorted(null).collect(Collectors.toList());      if (tempStops.size() == 0) {        logger.fatal("Critical Pokestop Error");        break;      }      Pokestop first=tempStops.get(0);      route.add(last=S2LatLng.fromDegrees(first.getLatitude(),first.getLongitude()));      ids.add(first.getId());    }    route.add(S2LatLng.fromDegrees(context.getLat().get(),context.getLng().get()));  } catch (  RemoteServerException e) {    logger.error("Remote server error",e);  }catch (  LoginFailedException e) {    logger.error("Login failed.",e);  }catch (  NullPointerException e) {    logger.error("Null pointer error.",e);  }}  }
class C{  public XSWildcardDecl performUnionWith(XSWildcardDecl wildcard,short processContents){  if (wildcard == null)   return null;  XSWildcardDecl unionWildcard=new XSWildcardDecl();  unionWildcard.fProcessContents=processContents;  if (areSame(wildcard)) {    unionWildcard.fType=fType;    unionWildcard.fNamespaceList=fNamespaceList;  } else   if ((fType == NSCONSTRAINT_ANY) || (wildcard.fType == NSCONSTRAINT_ANY)) {    unionWildcard.fType=NSCONSTRAINT_ANY;  } else   if ((fType == NSCONSTRAINT_LIST) && (wildcard.fType == NSCONSTRAINT_LIST)) {    unionWildcard.fType=NSCONSTRAINT_LIST;    unionWildcard.fNamespaceList=union2sets(fNamespaceList,wildcard.fNamespaceList);  } else   if (fType == NSCONSTRAINT_NOT && wildcard.fType == NSCONSTRAINT_NOT) {    unionWildcard.fType=NSCONSTRAINT_NOT;    unionWildcard.fNamespaceList=new String[2];    unionWildcard.fNamespaceList[0]=ABSENT;    unionWildcard.fNamespaceList[1]=ABSENT;  } else   if (((fType == NSCONSTRAINT_NOT) && (wildcard.fType == NSCONSTRAINT_LIST)) || ((fType == NSCONSTRAINT_LIST) && (wildcard.fType == NSCONSTRAINT_NOT))) {    String[] other=null;    String[] list=null;    if (fType == NSCONSTRAINT_NOT) {      other=fNamespaceList;      list=wildcard.fNamespaceList;    } else {      other=wildcard.fNamespaceList;      list=fNamespaceList;    }    boolean foundAbsent=elementInSet(ABSENT,list);    if (other[0] != ABSENT) {      boolean foundNS=elementInSet(other[0],list);      if (foundNS && foundAbsent) {        unionWildcard.fType=NSCONSTRAINT_ANY;      } else       if (foundNS && !foundAbsent) {        unionWildcard.fType=NSCONSTRAINT_NOT;        unionWildcard.fNamespaceList=new String[2];        unionWildcard.fNamespaceList[0]=ABSENT;        unionWildcard.fNamespaceList[1]=ABSENT;      } else       if (!foundNS && foundAbsent) {        return null;      } else {        unionWildcard.fType=NSCONSTRAINT_NOT;        unionWildcard.fNamespaceList=other;      }    } else {      if (foundAbsent) {        unionWildcard.fType=NSCONSTRAINT_ANY;      } else {        unionWildcard.fType=NSCONSTRAINT_NOT;        unionWildcard.fNamespaceList=other;      }    }  }  return unionWildcard;}  }
class C{  public java.lang.Boolean isEscaped(){  return escaped;}  }
class C{  public NGramDocument(int iMinGraphSize,int iMaxGraphSize,int iGraphCorrelationWindow,int iMinHistogramSize,int iMaxHistogramSize){  Graph=new DocumentNGramGraph(iMinGraphSize,iMaxGraphSize,iGraphCorrelationWindow);  Histogram=new DocumentNGramHistogram(iMinHistogramSize,iMaxHistogramSize);}  }
class C{  public CarouselOptions maxQuantity(int maxQuantity){  mMaxQuantity=maxQuantity;  return this;}  }
class C{  public static void assertAndEnsureCleanDb(DmnEngine dmnEngine){  log.debug("verifying that db is clean after test");  DmnRepositoryService repositoryService=dmnEngine.getDmnEngineConfiguration().getDmnRepositoryService();  List<DmnDeployment> deployments=repositoryService.createDeploymentQuery().list();  if (deployments != null && deployments.isEmpty() == false) {    throw new AssertionError("DmnDeployments is not empty");  }}  }
class C{  @deprecated protected void handleTransliterate(Replaceable text,Transliterator.Position index,boolean incremental){synchronized (this.data) {    int loopCount=0;    int loopLimit=index.limit - index.start << 4;    if (loopLimit < 0) {      loopLimit=Integer.MAX_VALUE;    }    while ((index.start < index.limit) && (loopCount <= loopLimit) && (this.data.ruleSet.transliterate(text,index,incremental))) {      loopCount++;    }  }}  }
class C{  public static void refresh(Project project){  BlazeExecutor.submitTask(project,null);}  }
class C{  public AlreadyOpenException(){  super("Environment has already been opened");}  }
class C{  static public void fixFunctionTags(CTTree tree){  fixFunctionTagsAux(tree.getRoot());}  }
class C{  public static void drawCircledText(Graphics2D g,String text,int x,int y){  drawCircledText(g,sSmallFont,text,x,y);}  }
class C{  public AnySpacePredicate(List<ISpacePredicate> operands){  super(operands);}  }
class C{  private void populate(List<ExtensionInterface> extensionList){  JPanel appPanel=application.getAppPanel();  JMenuBar menuBar=new JMenuBar();  application.getApplicationFrame().setJMenuBar(menuBar);  createFileMenu(appPanel,menuBar);  createEditMenu(menuBar);  createSLDMenu(appPanel,menuBar);  createToolsMenu(extensionList,menuBar);}  }
class C{  public JToggleGroup(int type,Object[] data){  this(type,new DefaultListModel(),new DefaultListSelectionModel());  DefaultListModel model=(DefaultListModel)m_data;  for (int i=0; i < data.length; ++i) {    model.addElement(data[i]);  }  initUI();}  }
class C{  public boolean isApplicable(){  RemoteServiceBrowser remoteServiceBrowser=(RemoteServiceBrowser)getViewer();  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null;}  }
class C{  public String myIpAddress(){  return getLocalAddressOfType(Inet4Address.class);}  }
class C{  public static void init(){  MATERIALS.register("logWood",Blocks.LOG,Blocks.LOG2);  MATERIALS.register("stickWood",Items.STICK);  MATERIALS.register("planksWood",Blocks.PLANKS);  MATERIALS.register("stairsWood",Blocks.ACACIA_STAIRS,Blocks.BIRCH_STAIRS,Blocks.DARK_OAK_STAIRS,Blocks.JUNGLE_STAIRS,Blocks.OAK_STAIRS,Blocks.SPRUCE_STAIRS);  MATERIALS.register("slabWood",Blocks.WOODEN_SLAB);  MATERIALS.register("ladderWood",Blocks.LADDER);  MATERIALS.register("chestWood",Blocks.CHEST);  MATERIALS.register("saplingTree",Blocks.SAPLING);  MATERIALS.register("leavesTree",Blocks.LEAVES,Blocks.LEAVES2);  MATERIALS.register("oreCoal",Blocks.COAL_ORE);  MATERIALS.register("oreDiamond",Blocks.DIAMOND_ORE);  MATERIALS.register("oreEmerald",Blocks.EMERALD_ORE);  MATERIALS.register("oreGold",Blocks.GOLD_ORE);  MATERIALS.register("oreIron",Blocks.IRON_ORE);  MATERIALS.register("oreLapiz",Blocks.LAPIS_ORE);  MATERIALS.register("oreQuartz",Blocks.QUARTZ_ORE);  MATERIALS.register("oreRedstone",Blocks.LIT_REDSTONE_ORE,Blocks.REDSTONE_ORE);  MATERIALS.register("blockCoal",Blocks.COAL_BLOCK);  MATERIALS.register("blockDiamond",Blocks.DIAMOND_BLOCK);  MATERIALS.register("blockEmerald",Blocks.EMERALD_BLOCK);  MATERIALS.register("blockGold",Blocks.GOLD_BLOCK);  MATERIALS.register("blockIron",Blocks.IRON_BLOCK);  MATERIALS.register("blockLapiz",Blocks.LAPIS_BLOCK);  MATERIALS.register("blockQuartz",Blocks.QUARTZ_BLOCK);  MATERIALS.register("blockRedstone",Blocks.REDSTONE_BLOCK);  MATERIALS.register("ingotGold",Items.GOLD_INGOT);  MATERIALS.register("ingotIron",Items.IRON_INGOT);  MATERIALS.register("gemDiamond",Items.DIAMOND);  MATERIALS.register("gemEmerald",Items.EMERALD);  MATERIALS.register("dustRedstone",Items.REDSTONE);  MATERIALS.register("record",Items.RECORD_11,Items.RECORD_13,Items.RECORD_BLOCKS,Items.RECORD_CAT,Items.RECORD_CHIRP,Items.RECORD_FAR,Items.RECORD_MALL,Items.RECORD_MELLOHI,Items.RECORD_STAL,Items.RECORD_STRAD,Items.RECORD_WAIT,Items.RECORD_WARD);  MATERIALS.register("dirt",Blocks.DIRT);  MATERIALS.register("grass",Blocks.GRASS);  MATERIALS.register("stone",Blocks.STONE);  MATERIALS.register("cobblestone",Blocks.COBBLESTONE);  MATERIALS.register("wool",Blocks.WOOL);  MATERIALS.register("dye",Items.DYE);  MATERIALS.register("glass",Blocks.GLASS,Blocks.STAINED_GLASS);  MATERIALS.register("glassClear",Blocks.GLASS);  MATERIALS.register("glassColored",Blocks.STAINED_GLASS);  MATERIALS.register("paneGlass",Blocks.GLASS_PANE,Blocks.STAINED_GLASS_PANE);  MATERIALS.register("paneGlassClear",Blocks.GLASS_PANE);  MATERIALS.register("paneGlassColored",Blocks.STAINED_GLASS_PANE);  List<IRecipe> recipes=CraftingManager.getInstance().getRecipeList();  for (ListIterator<IRecipe> recipeIterator=recipes.listIterator(); recipeIterator.hasNext(); ) {    IRecipe recipe=recipeIterator.next();    ItemStack output=recipe.getRecipeOutput();    if (output == null) {      continue;    }    Item item=output.getItem();    Block block=Block.getBlockFromItem(item);    if (block == Blocks.CHEST) {      recipeIterator.set(new ShapedMaterialRecipe(output,"PPP","P P","PPP",'P',"planksWood"));    } else     if (block == Blocks.FURNACE) {      recipeIterator.set(new ShapedMaterialRecipe(output,"CCC","C C","CCC",'C',"cobblestone"));    } else     if (block == Blocks.CRAFTING_TABLE) {      recipeIterator.set(new ShapedMaterialRecipe(output,"PP","PP",'P',"planksWood"));    } else     if (block == Blocks.WOOL && recipe instanceof ShapelessRecipes) {      recipeIterator.remove();    } else     if (block == Blocks.STAINED_HARDENED_CLAY || block == Blocks.STAINED_GLASS) {      recipeIterator.remove();    }  }  for (  EnumDyeColor dyeColor : EnumDyeColor.values()) {    String name=WordUtils.capitalize(dyeColor.toString());    String wool="wool" + name;    String glass="glass" + name;    String glassPane="paneGlass" + name;    String dye="dye" + name;    int blockMeta=dyeColor.getMetadata();    int dyeMeta=dyeColor.getDyeDamage();    MATERIALS.register(wool,new ItemStack(Blocks.WOOL,1,blockMeta));    MATERIALS.register(glass,new ItemStack(Blocks.STAINED_GLASS,1,blockMeta));    MATERIALS.register(glassPane,new ItemStack(Blocks.STAINED_GLASS_PANE,1,blockMeta));    MATERIALS.register(dye,new ItemStack(Items.DYE,1,dyeMeta));    recipes.add(new ShapelessMaterialRecipe(new ItemStack(Blocks.WOOL,1,blockMeta),dye,new ItemStack(Blocks.WOOL)));    recipes.add(new ShapedMaterialRecipe(new ItemStack(Blocks.STAINED_HARDENED_CLAY,8,blockMeta),"CCC","CDC","CCC",'C',new ItemStack(Blocks.HARDENED_CLAY),'D',dye));    recipes.add(new ShapedMaterialRecipe(new ItemStack(Blocks.STAINED_GLASS,8,blockMeta),"GGG","GDG","GGG",'G',new ItemStack(Blocks.GLASS),'D',dye));    recipes.add(new ShapelessMaterialRecipe(new ItemStack(Blocks.CARPET,3,blockMeta),"WW",'W',wool));  }}  }
class C{  private void calcFollowList(CMNode nodeCur){  if (nodeCur.type() == XSModelGroupImpl.MODELGROUP_CHOICE) {    calcFollowList(((XSCMBinOp)nodeCur).getLeft());    calcFollowList(((XSCMBinOp)nodeCur).getRight());  } else   if (nodeCur.type() == XSModelGroupImpl.MODELGROUP_SEQUENCE) {    calcFollowList(((XSCMBinOp)nodeCur).getLeft());    calcFollowList(((XSCMBinOp)nodeCur).getRight());    final CMStateSet last=((XSCMBinOp)nodeCur).getLeft().lastPos();    final CMStateSet first=((XSCMBinOp)nodeCur).getRight().firstPos();    for (int index=0; index < fLeafCount; index++) {      if (last.getBit(index))       fFollowList[index].union(first);    }  } else   if (nodeCur.type() == XSParticleDecl.PARTICLE_ZERO_OR_MORE || nodeCur.type() == XSParticleDecl.PARTICLE_ONE_OR_MORE) {    calcFollowList(((XSCMUniOp)nodeCur).getChild());    final CMStateSet first=nodeCur.firstPos();    final CMStateSet last=nodeCur.lastPos();    for (int index=0; index < fLeafCount; index++) {      if (last.getBit(index))       fFollowList[index].union(first);    }  } else   if (nodeCur.type() == XSParticleDecl.PARTICLE_ZERO_OR_ONE) {    calcFollowList(((XSCMUniOp)nodeCur).getChild());  }}  }
class C{  public static void copy(String input,OutputStream output) throws IOException {  StringReader in=new StringReader(input);  OutputStreamWriter out=new OutputStreamWriter(output);  copy(in,out);  out.flush();}  }
class C{  private byte[] read(FSDataInputStream channel,int size){  byte[] byteBffer=new byte[size];  try {    channel.readFully(byteBffer);  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  }  return byteBffer;}  }
class C{  public void unsetPeak(){  peak=Integer.MIN_VALUE;  repaint();}  }
class C{  public boolean isAttr(){  ResourceUrl url=ResourceUrl.parse(getSelectedValue().getRawXmlValue(),getSelectedValue().isFramework());  return url != null && url.type == ResourceType.ATTR;}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysCatalog other=(SysCatalog)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getCascadeId() == null ? other.getCascadeId() == null : this.getCascadeId().equals(other.getCascadeId())) && (this.getRootKey() == null ? other.getRootKey() == null : this.getRootKey().equals(other.getRootKey()))&& (this.getRootName() == null ? other.getRootName() == null : this.getRootName().equals(other.getRootName()))&& (this.getName() == null ? other.getName() == null : this.getName().equals(other.getName()))&& (this.getHotkey() == null ? other.getHotkey() == null : this.getHotkey().equals(other.getHotkey()))&& (this.getParentId() == null ? other.getParentId() == null : this.getParentId().equals(other.getParentId()))&& (this.getIsLeaf() == null ? other.getIsLeaf() == null : this.getIsLeaf().equals(other.getIsLeaf()))&& (this.getIsAutoExpand() == null ? other.getIsAutoExpand() == null : this.getIsAutoExpand().equals(other.getIsAutoExpand()))&& (this.getIconName() == null ? other.getIconName() == null : this.getIconName().equals(other.getIconName()))&& (this.getSortNo() == null ? other.getSortNo() == null : this.getSortNo().equals(other.getSortNo()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  public void action(){  Location[] lLocations;  NGramDocumentComparatorAgent aAgent=((NGramDocumentComparatorAgent)myAgent);  if ((lLocations=aAgent.getActiveContainerList()) == null)   return;  boolean bMigrate=Math.random() < aAgent.MigrationProbability;  bMigrate=bMigrate && (lLocations.length > 1);  if (bMigrate) {    int iServerIdx=(int)Math.floor(Math.random() * (double)lLocations.length);    int iCnt=0;    while (lLocations[iServerIdx].getID().equals(myAgent.here().getID())) {      ++iServerIdx;      iServerIdx%=lLocations.length;      if (++iCnt == 3)       break;    }    if (lLocations[iServerIdx].getID().equals(myAgent.here().getID())) {      myAgent.addBehaviour(new InformForCompleteMoveBehaviour());      if (!aAgent.Silent) {synchronized (System.err) {          System.err.println("Local execution...");        }      }      return;    } else     if (!aAgent.Silent)     System.err.println("Migrating to " + lLocations[iServerIdx].getName());    myAgent.doMove(lLocations[iServerIdx]);  } else {    myAgent.addBehaviour(new InformForCompleteMoveBehaviour());    if (!aAgent.Silent) {synchronized (System.err) {        System.err.println("Local execution...");      }    }    return;  }}  }
class C{  private Node nextNode(Node x,XMLWriter xml){  Node n, c;  if ((c=x.getChild(0)) != null) {  } else   if ((c=x.getNextSibling()) != null) {    xml.end();  } else {    c=x.getParent();    xml.end();    while (c != null) {      if ((n=c.getNextSibling()) != null) {        c=n;        xml.end();        break;      }      c=c.getParent();      xml.end();    }  }  return c;}  }
class C{  private boolean isDirect(final BSPTree<Sphere1D> node){  return ((LimitAngle)node.getCut().getHyperplane()).isDirect();}  }
class C{  @Override public void run(){  if (LOG.isDebugEnabled()) {    LOG.debug("Sending server heartbeat.");  }  try {    final Heartbeat heartbeat=new Heartbeat();    clusterCache.acquireWriteLockOnKey(C2monCacheLoader.aliveStatusInitialized);    clusterCache.releaseWriteLockOnKey(C2monCacheLoader.aliveStatusInitialized);    heartbeatSender.send(gson.toJson(heartbeat));    notifyListeners(heartbeat);  } catch (  Exception e) {    LOG.error("run() : Error sending heartbeat message.",e);  }}  }
class C{  public ResourceTemplateParameterContext initResource(ResourceKey resourceKey,ResourceUUID uuid){  if (!resources.containsKey(resourceKey) || !resources.get(resourceKey).contains(uuid)) {    int resourceNum=getResourceCount(resourceKey);    doAddParameter(resourceKey,uuid,ResourceContextParameters.UUID,uuid.getUuid());    doAddParameter(resourceKey,uuid,ResourceContextParameters.NUM,String.valueOf(resourceNum));    doAddParameter(resourceKey,uuid,ResourceContextParameters.REPEAT,String.valueOf(uuid.getRepeat()));  }  return this;}  }
class C{  public String evaluate(String url,String host) throws ProxyEvaluationException {  try {    StringBuilder script=new StringBuilder(this.source.getScriptContent());    String evalMethod=" ;FindProxyForURL (\"" + url + "\",\""+ host+ "\")";    script.append(evalMethod);    Object result=this.engine.eval(script.toString());    return (String)result;  } catch (  Exception e) {    Logger.log(getClass(),LogLevel.ERROR,"JS evaluation error.",e);    throw new ProxyEvaluationException("Error while executing PAC script: " + e.getMessage(),e);  }}  }
class C{  public Pokemon(PokemonGo api,PokemonData proto){  super(api,proto);  this.stamina=proto.getStamina();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200615,skillcaster,skillname);}  }
class C{  public HLDATextGenerator(HierLDAGibbs hlgModel,IGrammaticallityEvaluator igeEval,Map<Integer,String> mWordMap){  Model=hlgModel;  Evaluator=igeEval;  WordMap=mWordMap;}  }
class C{  public void encryptWallet(String password) throws WalletCallException, IOException, InterruptedException {  String response=this.executeCommandAndGetSingleStringResponse("encryptwallet",password);  System.out.println("Result of wallet encryption is: \n" + response);}  }
class C{  protected void validateConfig(final Process process) throws ConfigurationException {  processCache.acquireReadLockOnKey(process.getId());  try {    ProcessCacheObject processCacheObject=(ProcessCacheObject)process;    if (processCacheObject.getId() == null) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"id\" cannot be null");    }    if (processCacheObject.getName() == null) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"name\" cannot be null");    }    if (processCacheObject.getName().length() == 0 || processCacheObject.getName().length() > 60) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"name\" must be 1 to 60 characters long");    }    if (!ProcessCacheObject.PROCESS_NAME_PATTERN.matcher(processCacheObject.getName()).matches()) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"name\" must match the following pattern: " + ProcessCacheObject.PROCESS_NAME_PATTERN.toString());    }    if (processCacheObject.getDescription() == null) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"description\" cannot be null");    }    if (processCacheObject.getDescription().length() == 0 || processCacheObject.getDescription().length() > 100) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"description\" must be 1 to 100 characters long");    }    if (processCacheObject.getStateTagId() == null) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"stateTagId\" cannot be null");    }    if (processCacheObject.getAliveTagId() == null) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"aliveTagId\" cannot be null");    }    if (processCacheObject.getAliveInterval() < 10000) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"aliveInterval\" must be >= 10000 milliseconds");    }    if (processCacheObject.getJmsDaqCommandQueue() == null) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"JMS DAQ command queue cannot be null");    }    if (processCacheObject.getMaxMessageSize() < 1) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"maxMessageSize\" must be >= 1");    }    if (processCacheObject.getMaxMessageDelay() < 100) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"maxMessageDelay\" must be >= 100");    }    if (processCacheObject.getEquipmentIds() == null) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Collection \"equipmentIds\" cannot be null");    }  }  finally {    processCache.releaseReadLockOnKey(process.getId());  }}  }
class C{  public static boolean hasSelfPermissions(Context context,String... permissions){  for (  String permission : permissions) {    if (permissionExists(permission) && !hasSelfPermission(context,permission)) {      return false;    }  }  return true;}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;}  }
class C{  private synchronized void checkExpiredDeadlinesAndResetAlarm(){  long nextExpiryTime=Long.MAX_VALUE;  final long nowElapsedMillis=SystemClock.elapsedRealtime();  Iterator<JobStatus> it=mTrackedJobs.iterator();  while (it.hasNext()) {    JobStatus job=it.next();    if (!job.hasDeadlineConstraint()) {      continue;    }    final long jobDeadline=job.getLatestRunTimeElapsed();    if (jobDeadline <= nowElapsedMillis) {      job.deadlineConstraintSatisfied.set(true);      mStateChangedListener.onRunJobNow(job);      it.remove();    } else {      nextExpiryTime=jobDeadline;      break;    }  }  setDeadlineExpiredAlarm(nextExpiryTime);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("compute diversityRatio kmer=");  int kmer=np.getInt(1,Integer.MAX_VALUE);  np.matchIgnoreCase("step=");  int step=np.getInt(1,Integer.MAX_VALUE);  np.matchIgnoreCase("mindepth=");  int mindepth=np.getInt(1,Integer.MAX_VALUE);  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  Pair<Double,Double> kn=ComputeAlignmentProperties.computeSequenceDiversityRatio(viewer.getAlignment(),step,kmer,mindepth,((Director)getDir()).getDocument().getProgressListener());  ((Director)getDir()).getDocument().getProgressListener().close();  NotificationsInSwing.showInformation(viewer.getFrame(),"Average diversity ratio:\n" + (float)(0 + kn.getFirst()) + " / "+ (float)(0 + kn.getSecond())+ " = "+ (float)(kn.getFirst() / kn.getSecond()));}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Object value=entry.getValue();        if (value instanceof String && !((String)value).startsWith("http")) {          File file=new File((String)value);          if (!file.exists() || file.isDirectory()) {            return false;          }          spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } else {          spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }      }    }  }  return hasChanges;}  }
class C{  private int findTotalMaximumRowSize(JTable table,int row){  int maximum_height=0;  Enumeration columns=table.getColumnModel().getColumns();  while (columns.hasMoreElements()) {    TableColumn tc=(TableColumn)columns.nextElement();    TableCellRenderer cellRenderer=tc.getCellRenderer();    if (cellRenderer instanceof TextAreaRenderer) {      TextAreaRenderer tar=(TextAreaRenderer)cellRenderer;      maximum_height=Math.max(maximum_height,findMaximumRowSize(table,row));    }  }  return maximum_height;}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  @Override public void close(){  s1.close();  s2.close();}  }
class C{  public static long incrementExact(final long n) throws MathRuntimeException {  if (n == Long.MAX_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_ADDITION,n,1);  }  return n + 1;}  }
class C{  public static SpaceIndex createPathIndex(String path,SpaceIndexType indexType,boolean unique){  return createPathIndex_Impl(path,indexType,unique);}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysDicIndex other=(SysDicIndex)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getCatalogId() == null ? other.getCatalogId() == null : this.getCatalogId().equals(other.getCatalogId())) && (this.getKey() == null ? other.getKey() == null : this.getKey().equals(other.getKey()))&& (this.getName() == null ? other.getName() == null : this.getName().equals(other.getName()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  getSupportActionBar().setDisplayHomeAsUpEnabled(true);  Intent intent=getIntent();  path=intent.getStringExtra("path");  tvFilePath=(TextView)findViewById(R.id.tvFilePath);  videoListView=(RecyclerView)findViewById(R.id.videoListView);  mAdapter=new VideoListAdapter();  mLayoutManager=new LinearLayoutManager(this);  mLayoutManager.setOrientation(OrientationHelper.VERTICAL);  videoListView.setLayoutManager(mLayoutManager);  videoListView.setAdapter(mAdapter);}  }
class C{  public LinkedList<Patch> patch_make(String text1,String text2){  if (text1 == null || text2 == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  LinkedList<Diff> diffs=diff_main(text1,text2,true);  if (diffs.size() > 2) {    diff_cleanupSemantic(diffs);    diff_cleanupEfficiency(diffs);  }  return patch_make(text1,diffs);}  }
class C{  public static boolean isPresent(Rule rule){  if (rule == null) {    return false;  }  return (!isNotSet(rule.getMinScaleDenominator()) || !isNotSet(rule.getMaxScaleDenominator()));}  }
class C{  private void _writeTimeStamp(byte[] buffer,int offset,long time){  long seconds=time / 1000L;  long milliseconds=time - seconds * 1000L;  seconds+=OFFSET_1900_TO_1970;  buffer[offset++]=(byte)(seconds >> 24);  buffer[offset++]=(byte)(seconds >> 16);  buffer[offset++]=(byte)(seconds >> 8);  buffer[offset++]=(byte)(seconds >> 0);  long fraction=milliseconds * 0x100000000L / 1000L;  buffer[offset++]=(byte)(fraction >> 24);  buffer[offset++]=(byte)(fraction >> 16);  buffer[offset++]=(byte)(fraction >> 8);  buffer[offset++]=(byte)(Math.random() * 255.0);}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  private void sendBroadcastNewSyncFolder(Account account,String remotePath){  Intent added=new Intent(FileDownloader.getDownloadAddedMessage());  added.putExtra(FileDownloader.ACCOUNT_NAME,account.name);  added.putExtra(FileDownloader.EXTRA_REMOTE_PATH,remotePath);  added.putExtra(FileDownloader.EXTRA_FILE_PATH,FileStorageUtils.getSavePath(account.name) + remotePath);  mService.sendStickyBroadcast(added);}  }
class C{  static int applyMaskPenaltyRule2(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height - 1; y++) {    for (int x=0; x < width - 1; x++) {      int value=array[y][x];      if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {        penalty++;      }    }  }  return N2 * penalty;}  }
class C{  private PointF[] transformToViewCoordinates(ResultPoint[] resultPoints){  PointF[] transformedPoints=new PointF[resultPoints.length];  int index=0;  if (resultPoints != null) {    float previewX=mCameraManager.getPreviewSize().x;    float previewY=mCameraManager.getPreviewSize().y;    float scaleX=this.getWidth() / previewY;    float scaleY=this.getHeight() / previewX;    for (    ResultPoint point : resultPoints) {      PointF tmppoint=new PointF((previewY - point.getY()) * scaleX,point.getX() * scaleY);      transformedPoints[index]=tmppoint;      index++;    }  }  return transformedPoints;}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public void shutdown(){  for (int i=0; i < numberOfQueues; i++) {    executors[i].shutdown();  }}  }
class C{  public Local newLocal(String prefix,Type type){  int suffix=0;  if (prefix == this.prefix || prefix.equals(this.prefix)) {    suffix=counter;  }  while (locals.contains(prefix + suffix))   suffix++;  if (prefix == this.prefix || prefix.equals(this.prefix)) {    counter=suffix + 1;  }  String newName=prefix + suffix;  Local newLocal=Jimple.v().newLocal(newName,type);  localChain.add(newLocal);  locals.add(newName);  return newLocal;}  }
class C{  public MarketAddToAlbumQuery addToAlbum(UserActor actor,int ownerId,int itemId,List<Integer> albumIds){  return new MarketAddToAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);}  }
class C{  protected Local fetchNewLocal(Local local,Integer subscript){  Local oldLocal=local;  if (!origLocals.contains(local))   oldLocal=newLocalsToOldLocal.get(local);  if (subscript.intValue() == 0)   return oldLocal;  String name=oldLocal.getName() + "_" + subscript;  Local newLocal=newLocals.get(name);  if (newLocal == null) {    newLocal=new JimpleLocal(name,oldLocal.getType());    newLocals.put(name,newLocal);    newLocalsToOldLocal.put(newLocal,oldLocal);    body.getLocals().add(newLocal);  }  return newLocal;}  }
class C{  public void writeUTF(String value) throws JMSException {  initializeWriting();  try {    this.dataOut.writeUTF(value);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  static @Nullable ObservatoryConnector findConnector(AnActionEvent e){  final Project project=getEventProject(e);  if (project == null)   return null;  final XDebuggerManager manager=XDebuggerManager.getInstance(project);  final XDebugSession session=manager.getCurrentSession();  if (session != null) {    final XDebugProcess debugProcess=session.getDebugProcess();    if (debugProcess instanceof DartVmServiceDebugProcessZ) {      return ((DartVmServiceDebugProcessZ)debugProcess).getConnector();    }  }  return null;}  }
class C{  public boolean isCancelled(){  return useInteractedBlock() == Result.DENY;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getIndexId() == null) ? 0 : getIndexId().hashCode());  result=prime * result + ((getCode() == null) ? 0 : getCode().hashCode());  result=prime * result + ((getCodeText() == null) ? 0 : getCodeText().hashCode());  result=prime * result + ((getSortNo() == null) ? 0 : getSortNo().hashCode());  result=prime * result + ((getEditable() == null) ? 0 : getEditable().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  boolean checkout(IProgressMonitor monitor) throws TeamException, MalformedURLException {  if (fromFileSystem) {    return importExistingProject(monitor);  } else {    if (repositoryLocation == null) {      return false;    }    RemoteFolder remoteFolder=new RemoteFolder(repositoryLocation,new SVNUrl(repo),repositoryLocation.getRootFolder().getRevision());    CheckoutCommand command=new CheckoutCommand(new ISVNRemoteFolder[]{remoteFolder},new IProject[]{project});    command.run(monitor);    return true;  }}  }
class C{  @Override public Fraction negate(){  if (numerator == Integer.MIN_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_FRACTION,numerator,denominator);  }  return new Fraction(-numerator,denominator);}  }
class C{  private static String findMatchInArray(String strToMatch,String[] matchInArray,String[] returnInArray){  for (int i=0; i < matchInArray.length; i++) {    if (strToMatch.equals(matchInArray[i])) {      if (i < returnInArray.length) {        return returnInArray[i];      } else {        return null;      }    }  }  return null;}  }
class C{  public BlockletBTreeLeafNode(BTreeBuilderInfo builderInfos,int leafIndex,long nodeNumber){  BlockletMinMaxIndex minMaxIndex=builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getBlockletIndex().getMinMaxIndex();  maxKeyOfColumns=minMaxIndex.getMaxValues();  minKeyOfColumns=minMaxIndex.getMinValues();  numberOfKeys=builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getNumberOfRows();  dimensionChunksReader=new CompressedDimensionChunkFileBasedReader(builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getDimensionColumnChunk(),builderInfos.getDimensionColumnValueSize(),builderInfos.getFooterList().get(0).getBlockInfo().getTableBlockInfo().getFilePath());  ValueCompressionModel valueCompressionModel=CarbonUtil.getValueCompressionModel(builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getMeasureColumnChunk());  measureColumnChunkReader=new CompressedMeasureChunkFileBasedReader(builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getMeasureColumnChunk(),valueCompressionModel,builderInfos.getFooterList().get(0).getBlockInfo().getTableBlockInfo().getFilePath());  this.nodeNumber=nodeNumber;}  }
class C{  public static void createCodeGroupClass(ICodeUnit unit,StructureInfo struInfo){  IMetadataGroup grp=new DexMetadataGroupClass("codeAnalysisClasses",MetadataGroupType.CLASSID,struInfo);  unit.getMetadataManager().addGroup(grp);}  }
class C{  public static Uri createImageUri(Context context){  if ("Lenovo".equals(Build.MODEL.split(" ")[0])) {    Intent intent=new Intent();    intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);    String path=Environment.getExternalStorageDirectory() + "/zjb/photoCache" + System.currentTimeMillis()+ ".jpg";    imgUri=Uri.parse("file:///" + path);  } else {    String name="GetWorld" + System.currentTimeMillis();    ContentValues values=new ContentValues();    values.put(MediaStore.Images.Media.TITLE,name);    values.put(MediaStore.Images.Media.DISPLAY_NAME,name + ".jpeg");    values.put(MediaStore.Images.Media.MIME_TYPE,"image/jpeg");    imgUri=context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,values);  }  return imgUri;}  }
class C{  public QuestRewardCursor queryQuestRewardItem(long id){  return mHelper.queryQuestRewardItem(id);}  }
class C{  public String typeName(){  return "nameandtype";}  }
class C{  public PlacesSearchQuery radius(Integer value){  return unsafeParam("radius",value);}  }
class C{  @Override public boolean contains(byte item){  for (int i=0; i < data.length; ++i) {    if (data[i] == item) {      return true;    }  }  return false;}  }
class C{  public static boolean checkAllValuesForNull(Object[] row){  if (checkNullForDims(row[0]) && checkNullForMeasures(row[2]) && null == row[1]) {    return true;  }  return false;}  }
class C{  public static PrintWriter openFileForPrintWriter(final File file) throws IOException {  if (file.getName().endsWith(".gz")) {    return new PrintWriter(openFileForWriting(file));  } else {    return new PrintWriter(file);  }}  }
class C{  public ShardParseException(String message){  super(message);}  }
class C{  protected GroupsGetRequestsQueryWithFields fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isWindowsSystem()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public CatchablePokemon(PokemonGo api,FortData proto){  if (!proto.hasLureInfo()) {    throw new IllegalArgumentException("Fort does not have lure");  }  this.api=api;  this.spawnPointId=proto.getLureInfo().getFortId();  this.encounterId=proto.getLureInfo().getEncounterId();  this.pokemonId=proto.getLureInfo().getActivePokemonId();  this.pokemonIdValue=proto.getLureInfo().getActivePokemonIdValue();  this.expirationTimestampMs=proto.getLureInfo().getLureExpiresTimestampMs();  this.latitude=proto.getLatitude();  this.longitude=proto.getLongitude();  this.encounterKind=EncounterKind.DISK;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  public static String toString(String[] stringArray){  return toString(stringArray,0);}  }
class C{  @Override public Node replaceChild(Node newChild,Node oldChild) throws DOMException {  ownerDocument.replacingNode(this);  internalInsertBefore(newChild,oldChild,true);  if (newChild != oldChild) {    internalRemoveChild(oldChild,true);  }  ownerDocument.replacedNode(this);  return oldChild;}  }
class C{  public PhotosPutTagQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public final Observable.Transformer<T,T> readWithLoader(){  return null;}  }
class C{  public boolean hasReachedFullCapacity(){  return (getActiveCount() == getMaximumPoolSize());}  }
class C{  public static synchronized void indexDocument(CodeIndexDocument codeIndexDocument) throws IOException {  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<>();  queue.add(codeIndexDocument);  indexDocuments(queue);  queue=null;}  }
class C{  @SuppressWarnings("unchecked") protected TypeToken(){  this.type=getSuperclassTypeParameter(getClass());  this.rawType=(Class<? super T>)$Gson$Types.getRawType(type);  this.hashCode=type.hashCode();}  }
class C{  public Set<UserDefinedAction> isActivationRegistered(TaskActivation activation){  Set<KeyChain> keyChainCollisions=new HashSet<>();  for (  KeyChain code : activation.getHotkeys()) {    KeyChain collision=isKeyRegistered(code);    if (collision != null) {      keyChainCollisions.add(collision);    }  }  Set<UserDefinedAction> gestureCollisions=mouseGestureManager.areGesturesRegistered(activation.getMouseGestures());  Set<UserDefinedAction> output=new HashSet<>();  for (  KeyChain collision : keyChainCollisions) {    output.add(actionMap.get(collision));  }  output.addAll(gestureCollisions);  return output;}  }
class C{  public FieldConfigInlineFeature(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  public void attachTo(RecyclerView recycler,boolean headerAlreadyAligned){  validateRecycler(recycler,headerAlreadyAligned);  mRecycler=recycler;  mAlreadyAligned=headerAlreadyAligned;  mReversed=isLayoutManagerReversed(recycler);  setupAlignment(recycler);  setupHeader(recycler);}  }
class C{  public double slopeStdErr(){  return Math.sqrt(svar1);}  }
class C{  public List<LogicalTable> findByLogicalMetric(LogicalMetric logicalMetric){  return values().stream().filter(null).collect(Collectors.toList());}  }
class C{  public Transition<A> dup(){  INDArray[] dupObservation=dup(observation);  INDArray nextObs=nextObservation.dup();  return new Transition<>(dupObservation,action,reward,isTerminal,nextObs);}  }
class C{  @Override public int hashCode(){  int result=31 + MathUtils.hash(getN());  result=result * 31 + MathUtils.hash(getGeometricMean());  result=result * 31 + MathUtils.hash(getMax());  result=result * 31 + MathUtils.hash(getMean());  result=result * 31 + MathUtils.hash(getMin());  result=result * 31 + MathUtils.hash(getSum());  result=result * 31 + MathUtils.hash(getSumSq());  result=result * 31 + MathUtils.hash(getSumLog());  result=result * 31 + getCovariance().hashCode();  return result;}  }
class C{  private void calcStackSize(List<BarEntry> yVals){  for (int i=0; i < yVals.size(); i++) {    float[] vals=yVals.get(i).getYVals();    if (vals != null && vals.length > mStackSize)     mStackSize=vals.length;  }}  }
class C{  protected final double calcOverallSimilarity(GraphSimilarity gsSim){  return (gsSim.SizeSimilarity == 0) ? 0.0 : gsSim.ValueSimilarity / gsSim.SizeSimilarity;}  }
class C{  public static Map<String,Object> storeEntitySyncData(DispatchContext dctx,Map<String,Object> context){  Delegator delegator=dctx.getDelegator();  String overrideDelegatorName=(String)context.get("delegatorName");  Locale locale=(Locale)context.get("locale");  if (UtilValidate.isNotEmpty(overrideDelegatorName)) {    delegator=DelegatorFactory.getDelegator(overrideDelegatorName);    if (delegator == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtCannotFindDelegator",UtilMisc.toMap("overrideDelegatorName",overrideDelegatorName),locale));    }  }  String entitySyncId=(String)context.get("entitySyncId");  List<GenericValue> valuesToCreate=UtilGenerics.cast(context.get("valuesToCreate"));  List<GenericValue> valuesToStore=UtilGenerics.cast(context.get("valuesToStore"));  List<GenericEntity> keysToRemove=UtilGenerics.cast(context.get("keysToRemove"));  if (Debug.infoOn())   Debug.logInfo("Running storeEntitySyncData (" + entitySyncId + ") - ["+ valuesToCreate.size()+ "] to create; ["+ valuesToStore.size()+ "] to store; ["+ keysToRemove.size()+ "] to remove.",module);  try {    long toCreateInserted=0;    long toCreateUpdated=0;    long toCreateNotUpdated=0;    long toStoreInserted=0;    long toStoreUpdated=0;    long toStoreNotUpdated=0;    long toRemoveDeleted=0;    long toRemoveAlreadyDeleted=0;    for (    GenericValue valueToCreate : valuesToCreate) {      valueToCreate.setIsFromEntitySync(true);      valueToCreate.checkFks(true);      GenericValue existingValue=EntityQuery.use(delegator).from(valueToCreate.getEntityName()).where(valueToCreate.getPrimaryKey()).queryOne();      if (existingValue == null) {        delegator.create(valueToCreate);        toCreateInserted++;      } else {        if (existingValue.get(ModelEntity.STAMP_FIELD) != null && existingValue.getTimestamp(ModelEntity.STAMP_FIELD).after(valueToCreate.getTimestamp(ModelEntity.STAMP_FIELD))) {          toCreateNotUpdated++;        } else {          delegator.store(valueToCreate);          toCreateUpdated++;        }      }    }    for (    GenericValue valueToStore : valuesToStore) {      valueToStore.setIsFromEntitySync(true);      valueToStore.checkFks(true);      GenericValue existingValue=EntityQuery.use(delegator).from(valueToStore.getEntityName()).where(valueToStore.getPrimaryKey()).queryOne();      if (existingValue == null) {        delegator.create(valueToStore);        toStoreInserted++;      } else {        if (existingValue.get(ModelEntity.STAMP_FIELD) != null && existingValue.getTimestamp(ModelEntity.STAMP_FIELD).after(valueToStore.getTimestamp(ModelEntity.STAMP_FIELD))) {          toStoreNotUpdated++;        } else {          delegator.store(valueToStore);          toStoreUpdated++;        }      }    }    for (    GenericEntity pkToRemove : keysToRemove) {      pkToRemove.setIsFromEntitySync(true);      pkToRemove.remove(ModelEntity.STAMP_TX_FIELD);      pkToRemove.remove(ModelEntity.STAMP_FIELD);      pkToRemove.remove(ModelEntity.CREATE_STAMP_TX_FIELD);      pkToRemove.remove(ModelEntity.CREATE_STAMP_FIELD);      int numRemByAnd=delegator.removeByAnd(pkToRemove.getEntityName(),pkToRemove);      if (numRemByAnd == 0) {        toRemoveAlreadyDeleted++;      } else {        toRemoveDeleted++;      }    }    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("toCreateInserted",Long.valueOf(toCreateInserted));    result.put("toCreateUpdated",Long.valueOf(toCreateUpdated));    result.put("toCreateNotUpdated",Long.valueOf(toCreateNotUpdated));    result.put("toStoreInserted",Long.valueOf(toStoreInserted));    result.put("toStoreUpdated",Long.valueOf(toStoreUpdated));    result.put("toStoreNotUpdated",Long.valueOf(toStoreNotUpdated));    result.put("toRemoveDeleted",Long.valueOf(toRemoveDeleted));    result.put("toRemoveAlreadyDeleted",Long.valueOf(toRemoveAlreadyDeleted));    if (Debug.infoOn())     Debug.logInfo("Finisching storeEntitySyncData (" + entitySyncId + ") - ["+ keysToRemove.size()+ "] to remove. Actually removed: "+ toRemoveDeleted+ " already removed: "+ toRemoveAlreadyDeleted,module);    return result;  } catch (  GenericEntityException e) {    Debug.logError(e,"Exception saving Entity Sync Data for entitySyncId [" + entitySyncId + "]: "+ e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtExceptionSavingEntitySyncData",UtilMisc.toMap("entitySyncId",entitySyncId,"errorString",e.toString()),locale));  }catch (  Throwable t) {    Debug.logError(t,"Error saving Entity Sync Data for entitySyncId [" + entitySyncId + "]: "+ t.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorSavingEntitySyncData",UtilMisc.toMap("entitySyncId",entitySyncId,"errorString",t.toString()),locale));  }}  }
class C{  private void addValue(String key,String value){  if ((key == null) || key.isEmpty()) {    keyList.add("");    valueMap.put("",value);  } else {    keyList.add(key);    valueMap.put(key,value);  }}  }
class C{  public ObjectFactory(){}  }
class C{  public DirectoryAccessDeniedException(String message){  super(message);}  }
class C{  public boolean containsPrefix(String prefix){  for (int i=fNamespaceSize; i > 0; i-=2) {    if (fNamespace[i - 2] == prefix) {      return true;    }  }  return false;}  }
class C{  public static LookupLocator[] buildLookupLocators(String lookupLocatorURLs){  String locatorURL=null;  ArrayList<LookupLocator> locatorList=new ArrayList<LookupLocator>();  if (lookupLocatorURLs != null && lookupLocatorURLs.length() > 0) {    StringTokenizer st=new StringTokenizer(lookupLocatorURLs,",");    while (st.hasMoreTokens()) {      try {        locatorURL=st.nextToken().trim();        if (locatorURL.isEmpty() || locatorURL.equals("\"\""))         continue;        if (!locatorURL.startsWith("jini://"))         locatorURL="jini://" + locatorURL;        LookupLocator lookupLocator=new LookupLocator(locatorURL);        locatorList.add(lookupLocator);      } catch (      MalformedURLException ex) {        if (_logger.isLoggable(Level.WARNING)) {          _logger.log(Level.WARNING,"Unicast discovery failed for LookupService: " + locatorURL + " - "+ ex.toString(),ex);        }      }    }  }  return locatorList.toArray(new LookupLocator[locatorList.size()]);}  }
class C{  public void loadDataStringFromFile(String sFilename,boolean clearCurrentData,String sEncoding){  try {    ByteArrayOutputStream bsOut=new ByteArrayOutputStream();    FileInputStream fiIn=new FileInputStream(sFilename);    int iData=0;    while ((iData=fiIn.read()) > -1)     bsOut.write(iData);    String sDataString=bsOut.toString();    setDataString(sDataString,SourceNGramSize,clearCurrentData);  } catch (  IOException ioe) {    ioe.printStackTrace();    setDataString("",1,false);  }}  }
class C{  public boolean hasValidThemeColor(){  return mThemeColor != ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING;}  }
class C{  @TargetApi(11) public void centerViewToAnimated(float xValue,float yValue,AxisDependency axis,long duration){  if (android.os.Build.VERSION.SDK_INT >= 11) {    MPPointD bounds=getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop(),axis);    float yInView=getAxisRange(axis) / mViewPortHandler.getScaleY();    float xInView=getXAxis().mAxisRange / mViewPortHandler.getScaleX();    Runnable job=AnimatedMoveViewJob.getInstance(mViewPortHandler,xValue - xInView / 2f,yValue + yInView / 2f,getTransformer(axis),this,(float)bounds.x,(float)bounds.y,duration);    addViewportJob(job);    MPPointD.recycleInstance(bounds);  } else {    Log.e(LOG_TAG,"Unable to execute centerViewToAnimated(...) on API level < 11");  }}  }
class C{  public BOMTree(String productId,String bomTypeId,Date inDate,Delegator delegator,LocalDispatcher dispatcher,GenericValue userLogin) throws GenericEntityException {  this(productId,bomTypeId,inDate,EXPLOSION,delegator,dispatcher,userLogin);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_PROTECT_A_to_ME(String skillcaster){  return new SM_SYSTEM_MESSAGE(1201174,skillcaster);}  }
class C{  public ForceDirectedLayout(String graph){  this(graph,false,false);}  }
class C{  public DatabaseConfFrame(){  initComponents();}  }
class C{  private void determineProsodicSettings(Element prosody){  ProsodicSettings settings=new ProsodicSettings();  ProsodicSettings parentSettings=new ProsodicSettings();  Element ancestor=(Element)DomUtils.getAncestor(prosody,MaryXML.PROSODY);  if (ancestor != null) {    ProsodicSettings testSettings=prosodyMap.get(ancestor);    if (testSettings != null) {      parentSettings=testSettings;    }  }  settings.setRate(parentSettings.rate() + MaryUtils.getPercentageDelta(prosody.getAttribute("rate")));  settings.setAccentProminence(parentSettings.accentProminence() + MaryUtils.getPercentageDelta(prosody.getAttribute("accent-prominence")));  settings.setAccentSlope(parentSettings.accentSlope() + MaryUtils.getPercentageDelta(prosody.getAttribute("accent-slope")));  settings.setNumberOfPauses(parentSettings.numberOfPauses() + MaryUtils.getPercentageDelta(prosody.getAttribute("number-of-pauses")));  settings.setPauseDuration(parentSettings.pauseDuration() + MaryUtils.getPercentageDelta(prosody.getAttribute("pause-duration")));  settings.setVowelDuration(parentSettings.vowelDuration() + MaryUtils.getPercentageDelta(prosody.getAttribute("vowel-duration")));  settings.setPlosiveDuration(parentSettings.plosiveDuration() + MaryUtils.getPercentageDelta(prosody.getAttribute("plosive-duration")));  settings.setFricativeDuration(parentSettings.fricativeDuration() + MaryUtils.getPercentageDelta(prosody.getAttribute("fricative-duration")));  settings.setNasalDuration(parentSettings.nasalDuration() + MaryUtils.getPercentageDelta(prosody.getAttribute("nasal-duration")));  settings.setLiquidDuration(parentSettings.liquidDuration() + MaryUtils.getPercentageDelta(prosody.getAttribute("liquid-duration")));  settings.setGlideDuration(parentSettings.glideDuration() + MaryUtils.getPercentageDelta(prosody.getAttribute("glide-duration")));  String sVolume=prosody.getAttribute("volume");  if (sVolume.equals("")) {    settings.setVolume(parentSettings.volume());  } else   if (MaryUtils.isPercentageDelta(sVolume)) {    int newVolume=parentSettings.volume() + MaryUtils.getPercentageDelta(sVolume);    if (newVolume < 0)     newVolume=0; else     if (newVolume > 100)     newVolume=100;    settings.setVolume(newVolume);  } else   if (MaryUtils.isUnsignedNumber(sVolume)) {    settings.setVolume(MaryUtils.getUnsignedNumber(sVolume));  } else   if (sVolume.equals("silent")) {    settings.setVolume(0);  } else   if (sVolume.equals("soft")) {    settings.setVolume(25);  } else   if (sVolume.equals("medium")) {    settings.setVolume(50);  } else   if (sVolume.equals("loud")) {    settings.setVolume(75);  }  prosodyMap.put(prosody,settings);}  }
class C{  private static boolean validateNewSize(int level){  return !(level < MIN_EXPAND || level > MAX_EXPAND);}  }
class C{  public static void assertSameMembers(ThrowableSet s,RefLikeType[] included,AnySubType[] excluded){  assertTrue(ExceptionTestUtility.sameMembers(new ExceptionHashSet<RefLikeType>(Arrays.asList(included)),new ExceptionHashSet<AnySubType>(Arrays.asList(excluded)),s));}  }
class C{  public MessagesSendQuery send(Actor actor){  return new MessagesSendQuery(getClient(),actor);}  }
class C{  @VisibleForTesting public static boolean isDraggingStackInWrongDirection(float downX,float downY,float x,float y,float dx,float dy,int orientation,int stackIndex){  float switchDelta=orientation == Orientation.PORTRAIT ? x - downX : y - downY;  if (Math.abs(dx) < Math.abs(dy)) {    return false;  }  return (stackIndex == 0 && switchDelta < 0) || (stackIndex == 1 && switchDelta > 0);}  }
class C{  public static void square(double x,double y,double halfLength){  if (!(halfLength >= 0))   throw new IllegalArgumentException("half length must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfLength);  double hs=factorY(2 * halfLength);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static ListOfLongs loadQueryLocations(DAAHeader daaHeader,String classificationName,Collection<Integer> classIds) throws IOException {  for (int i=0; i < daaHeader.getBlockTypeRankArrayLength() - 1; i++) {    final int j=i + 1;    if (daaHeader.getBlockType(i) == BlockType.megan_classification_key_block && daaHeader.getBlockType(j) == BlockType.megan_classification_dump_block) {      try (InputReaderLittleEndian insKey=new InputReaderLittleEndian(new FileRandomAccessReadOnlyAdapter(daaHeader.getFileName()))){        final long keyBase=daaHeader.computeBlockStart(i);        insKey.seek(keyBase);        final String cName=insKey.readNullTerminatedBytes();        if (cName.equals(classificationName)) {          final int numberOfClasses=insKey.readInt();          final ListOfLongs list=new ListOfLongs(100000);          try (InputReaderLittleEndian insDump=new InputReaderLittleEndian(new FileRandomAccessReadOnlyAdapter(daaHeader.getFileName()))){            final long dumpBase=daaHeader.computeBlockStart(j);            insDump.seek(dumpBase);            if (!insDump.readNullTerminatedBytes().equals(classificationName))             throw new IOException("Internal error: key-dump mismatch");            for (int c=0; c < numberOfClasses; c++) {              int classId=insKey.readInt();              insKey.skip(4);              int size=insKey.readInt();              final long offset=insKey.readLong();              if (classIds.contains(classId)) {                insDump.seek(dumpBase + offset);                for (int n=0; n < size; n++) {                  list.add(insDump.readLong());                }              }            }          }           return list;        }      }     }  }  return null;}  }
class C{  @Override public final int readUnsignedShort() throws IOException {  dis.readFully(work,0,2);  return ((work[1] & 0xff) << 8 | (work[0] & 0xff));}  }
class C{  public boolean validate(String password){  if (this.isLocked())   return false;  password=encrypt(password);  return get("password") != null && get("password").equals(password);}  }
class C{  @RequestMapping(value="/rest/activiti/jobs/{jobId}",method=RequestMethod.POST,produces="application/json") @ResponseStatus(value=HttpStatus.OK) public void executeJob(@PathVariable String jobId) throws BadRequestException {  ServerConfig serverConfig=retrieveServerConfig();  try {    clientService.executeJob(serverConfig,jobId);  } catch (  ActivitiServiceException e) {    throw new BadRequestException(e.getMessage());  }}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(String.format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public MonsterHabitatCursor queryHabitatMonster(long id){  QueryHelper qh=new QueryHelper();  qh.Distinct=true;  qh.Table=S.TABLE_HABITAT;  qh.Columns=null;  qh.Selection=S.COLUMN_HABITAT_MONSTER_ID + " = ?";  qh.SelectionArgs=new String[]{String.valueOf(id)};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new MonsterHabitatCursor(wrapJoinHelper(builderHabitat(qh.Distinct),qh));}  }
class C{  public void addImageOutlineSymbolizerToRaster(Symbolizer symbolizer){  Symbolizer selectedSymbolizer=this.symbolData.getSymbolizer();  if (selectedSymbolizer == null) {    ConsoleManager.getInstance().error(this,"symbolizer == null");  } else {    if (selectedSymbolizer instanceof RasterSymbolizer) {      RasterSymbolizer rasterSymbolizer=(RasterSymbolizer)selectedSymbolizer;      rasterSymbolizer.setImageOutline(symbolizer);    }  }}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public DoubleConstantRange(Double low,boolean lowIncl,Double high,boolean highIncl){  if (low == null)   this.low=NEG_INF; else {    this.low=new DoubleConstant(low);    this.lowIncl=lowIncl;  }  if (high == null)   this.high=INF; else {    this.high=new DoubleConstant(high);    this.highIncl=highIncl;  }}  }
class C{  public static String prettyPrintStartTime(Context context,long timestamp){  Calendar now=GregorianCalendar.getInstance();  Calendar then=GregorianCalendar.getInstance();  then.setTimeInMillis(timestamp);  String formatSkeleton;  if (then.get(Calendar.YEAR) == now.get(Calendar.YEAR)) {    if (then.get(Calendar.DAY_OF_YEAR) == now.get(Calendar.DAY_OF_YEAR)) {      return context.getString(R.string.status_started_at,DateFormat.getTimeFormat(context).format(then.getTime()));    } else {      formatSkeleton="MMM d";    }  } else {    formatSkeleton="MMM d, yyyy";  }  String bestFormatString;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {    bestFormatString=DateFormat.getBestDateTimePattern(Locale.getDefault(),formatSkeleton);  } else {    bestFormatString=formatSkeleton;  }  String dateString=DateFormat.format(bestFormatString,then).toString();  String timeString=DateFormat.getTimeFormat(context).format(then.getTime());  return context.getString(R.string.status_started_on_at,dateString,timeString);}  }
class C{  public void loadAPKHashcodes(IDexUnit unit){  List<? extends IDexClass> classes=unit.getClasses();  if (classes == null || classes.size() == 0) {    return;  }  for (  IDexClass eClass : classes) {    List<? extends IDexMethod> methods=eClass.getMethods();    if (methods == null || methods.size() == 0)     continue;    for (    IDexMethod m : methods) {      if (!m.isInternal()) {        continue;      }      IDexMethodData md=m.getData();      if (md == null) {        continue;      }      IDexCodeItem ci=md.getCodeItem();      if (ci == null) {        methodHashcodes.put(m.getIndex(),new String[]{"null","null"});      } else {        methodHashcodes.put(m.getIndex(),new String[]{SignatureHandler.generateTightHashcode(ci),SignatureHandler.generateLooseHashcode(ci)});      }    }  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class defineClass0(java.lang.ClassLoader,java.lang.String,byte[],int,int)")) {    java_lang_reflect_Proxy_defineClass0(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public XPathException(String key){  super();  fKey=key;}  }
class C{  private boolean isLookupSwitch(polyglot.ast.Switch switchStmt){  int lowest=0;  int highest=0;  int counter=0;  Iterator it=switchStmt.elements().iterator();  while (it.hasNext()) {    Object next=it.next();    if (next instanceof polyglot.ast.Case) {      polyglot.ast.Case caseStmt=(polyglot.ast.Case)next;      if (caseStmt.isDefault())       continue;      int caseValue=(int)caseStmt.value();      if (caseValue <= lowest || counter == 0) {        lowest=caseValue;      }      if (caseValue >= highest || counter == 0) {        highest=caseValue;      }      counter++;    }  }  if ((counter - 1) == (highest - lowest))   return false;  return true;}  }
class C{  public void onStartAppRequested(View view){  preferences.setName(name);  if (navigator != null) {    navigator.navigateToMain();  }}  }
class C{  private void layoutChildWithAnchor(View child,View anchor,int layoutDirection){  final LayoutParams lp=(LayoutParams)child.getLayoutParams();  final Rect anchorRect=mTempRect1;  final Rect childRect=mTempRect2;  getDescendantRect(anchor,anchorRect);  getDesiredAnchoredChildRect(child,layoutDirection,anchorRect,childRect);  child.layout(childRect.left,childRect.top,childRect.right,childRect.bottom);}  }
class C{  public EntityQuery having(EntityCondition entityCondition){  this.havingEntityCondition=entityCondition;  return this;}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof DelegationRelativeTime)) {    return false;  }  DelegationRelativeTime dc=(DelegationRelativeTime)obj;  return (minStart == dc.minStart && maxStart == dc.maxStart && minStop == dc.minStop && maxStop == dc.maxStop);}  }
class C{  public LocalWordNetMeaningExtractor() throws IOException {  Process p=Runtime.getRuntime().exec("wordnet");  try {    p.waitFor();  } catch (  InterruptedException iee) {    return;  }  if (p.exitValue() == 0) {    throw new IOException("WordNet cannot be found and executed.");  }}  }
class C{  @deprecated public VariableField(String string,boolean strict){  this.canonicalIndex=DateTimePatternGenerator.getCanonicalIndex(string,strict);  if (this.canonicalIndex < 0) {    throw new IllegalArgumentException("Illegal datetime field:\t" + string);  }  this.string=string;}  }
class C{  public RedisBroadcastChannel(RedissonClient redissonClient){  this.topic=redissonClient.getTopic(REDIS_CHANNEL);  this.notifications=PublishSubject.create();  this.topicReadWriteLock=new ReentrantReadWriteLock();  listenerId=topic.addListener(null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200714,skillcaster,num0,skillname);}  }
class C{  public void prerenderUrl(String url){  if (mService == null)   return;  Message msg=Message.obtain(null,ChromePrerenderService.MSG_PRERENDER_URL,0,0);  Bundle data=new Bundle();  data.putString(ChromePrerenderService.KEY_PRERENDERED_URL,url);  msg.setData(data);  try {    mService.send(msg);  } catch (  RemoteException e) {    e.printStackTrace();  }}  }
class C{  public LookupLocatorDiscovery(LookupLocator[] locators,Configuration config) throws ConfigurationException {  if (logger.isLoggable(Level.FINE))   logger.log(Level.FINE,"Created tunable LookupLocatorDiscovery");  beginDiscovery(locators,config);}  }
class C{  private static Expression[] convertStrings(Object[] os){  Expression[] es=new Expression[os.length];  for (int i=0; i < os.length; ++i) {    if (os[i] instanceof Expression) {      es[i]=(Expression)os[i];    } else     if (os[i] instanceof String) {      es[i]=string((String)os[i]);    } else     if (os[i] instanceof CharClass) {      es[i]=charClass((CharClass)os[i]);    } else     if (os[i] instanceof Character) {      es[i]=character((Character)os[i]);    }  }  return es;}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  public DocumentNGramGaussNormSymWinGraph(){  InitGraphs();}  }
class C{  public static boolean isStarted(Object caller){  return isStarted(caller.getClass().getSimpleName());}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static boolean isValidGetId(DispatchContext ctx,Map<String,?> context){  String currentUserLoginId=null;  GenericValue userLogin=(GenericValue)context.get("userLogin");  if (userLogin == null) {    currentUserLoginId=DEFAULT_UID;  } else {    currentUserLoginId=userLogin.getString("userLoginId");  }  String userLoginIdArg=(String)context.get(LOGINID_PARAMETER_NAME);  if (!currentUserLoginId.equals(DEFAULT_UID) && !currentUserLoginId.equals(userLoginIdArg) && userLoginIdArg != null) {    Security security=ctx.getSecurity();    return security.hasPermission(ADMIN_PERMISSION,userLogin);  }  return true;}  }
class C{  public RoleAlreadyExistsException(String message,Throwable cause){  super(message,cause);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public static double calculateContrastRatio(@NotNull Color color1,@NotNull Color color2){  double color1Luminance=calculateColorLuminance(color1);  double color2Luminance=calculateColorLuminance(color2);  return (Math.max(color1Luminance,color2Luminance) + 0.05) / (Math.min(color2Luminance,color1Luminance) + 0.05);}  }
class C{  public static boolean isBoolean(String tagName,String attrName){  String[] attrNames;  attrNames=(String[])_boolAttrs.get(tagName.toUpperCase(Locale.ENGLISH));  if (attrNames == null)   return false;  for (int i=0; i < attrNames.length; ++i)   if (attrNames[i].equalsIgnoreCase(attrName))   return true;  return false;}  }
class C{  public VideoRemoveTagQuery removeTag(UserActor actor,int tagId,int videoId){  return new VideoRemoveTagQuery(getClient(),actor,tagId,videoId);}  }
class C{  public synchronized static Expression parse(String expr,boolean throwsException){  if (!s_init) {    new ExpressionParser(new StringReader(expr));    s_init=true;  } else {    ExpressionParser.ReInit(new StringReader(expr));  }  try {    Expression e=Parse();    s_error=null;    s_logger.info("Parsed Expression: " + e);    return e;  } catch (  ParseException t) {    s_error=t;    if (throwsException) {      throw t;    } else {      s_logger.warning("Expression Parse Error: " + t.getMessage() + "\n"+ StringLib.getStackTrace(t));      return null;    }  }}  }
class C{  Selfie build(){  return new Selfie(format,path,quality);}  }
class C{  public AnswerHolder newUpdateMultiple(IEntryPacket[] entries,Transaction txn,long[] leases,SpaceContext sc,long timeout,int operationModifiers) throws UnusableEntryException, UnknownTypeException, TransactionException, RemoteException, InterruptedException {  int replicationLevel=0;  try {    for (int i=0; i < entries.length; i++) {      _typeManager.loadServerTypeDesc(entries[i]);    }    XtnEntry txnEntry=null;    if (txn != null) {      txnEntry=attachToXtn((ServerTransaction)txn,false);      attachFromGatewayStateToTransactionIfNeeded(sc,txnEntry);    }    String uid=null;    if (timeout != 0)     uid=_uidFactory.createUIDFromCounter();    IResponseContext respContext=ResponseContext.getResponseContext();    final long startTime=SystemTime.timeMillis();    ITemplateHolder tHolder=TemplateHolderFactory.createTemplateHolder(getTypeManager().getServerTypeDesc(IServerTypeDesc.ROOT_TYPE_NAME),new TemplatePacket(),null,Long.MAX_VALUE,txnEntry,startTime,SpaceOperations.UPDATE,respContext,false,operationModifiers,false);    tHolder.setAnswerHolder(new AnswerHolder());    UpdateMultipleContext multipleIdsContext=new UpdateMultipleContext(tHolder,entries,leases,operationModifiers,timeout,this,txnEntry);    tHolder.setMultipleIdsContext(multipleIdsContext);    Context context=null;    try {      context=_cacheManager.getCacheContext();      if (_isSyncReplication)       context.setSyncReplFromMultipleOperation(true);      context.setMultipleOperation();      context.setMainThread(true);      setFromGatewayIfNeeded(sc,context);      if (txnEntry == null) {        if (_cacheManager.isOffHeapCachePolicy() && _cacheManager.useBlobStoreBulks() && timeout == JavaSpace.NO_WAIT) {          context.setBlobStoreBulkInfo(new BlobStoreBulkInfo(_cacheManager,false));        }        newUpdateMultipleLoop(context,tHolder,entries,leases,null,sc,operationModifiers,timeout);      } else {        txnEntry.lock();        try {          if (!txnEntry.m_Active)           throw new TransactionException("The transaction is not active: " + txnEntry.m_Transaction);          context.setTransactionalMultipleOperation(true);          newUpdateMultipleLoop(context,tHolder,entries,leases,txnEntry,sc,operationModifiers,timeout);        }  finally {          txnEntry.unlock();        }      }    }  finally {      replicationLevel=replicateAndfreeCache(context);    }    boolean callBackMode=ResponseContext.isCallBackMode();    if (!callBackMode && !tHolder.hasAnswer())     waitForBlockingAnswer(timeout,tHolder.getAnswerHolder(),startTime,tHolder);    if (tHolder.hasAnswer())     return tHolder.getAnswerHolder();    if (callBackMode) {      prepareCallBackModeAnswer(tHolder,false);      return tHolder.getAnswerHolder();    }    prepareBlockingModeAnswer(tHolder,false);    return tHolder.getAnswerHolder();  }  finally {    checkIfConsistencyLevelIsCompromised(false,replicationLevel);  }}  }
class C{  public static String dateToString(Date date,SimpleDateFormat dateFormat){  return dateFormat.format(date);}  }
class C{  @Override public void finish(){  if (mAccountAuthenticatorResponse != null) {    if (mResultBundle != null) {      mAccountAuthenticatorResponse.onResult(mResultBundle);    } else {      mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,"canceled");    }    mAccountAuthenticatorResponse=null;  }  super.finish();}  }
class C{  private Either(L left,R right,boolean isLeft){  this.left=left;  this.right=right;  this.isLeft=isLeft;}  }
class C{  private void createAssert(polyglot.ast.Assert assertStmt){  soot.Local testLocal=lg.generateLocal(soot.BooleanType.v());  soot.SootFieldRef assertField=soot.Scene.v().makeFieldRef(body.getMethod().getDeclaringClass(),"$assertionsDisabled",soot.BooleanType.v(),true);  soot.jimple.FieldRef assertFieldRef=soot.jimple.Jimple.v().newStaticFieldRef(assertField);  soot.jimple.AssignStmt fieldAssign=soot.jimple.Jimple.v().newAssignStmt(testLocal,assertFieldRef);  body.getUnits().add(fieldAssign);  soot.jimple.NopStmt nop1=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.ConditionExpr cond1=soot.jimple.Jimple.v().newNeExpr(testLocal,soot.jimple.IntConstant.v(0));  soot.jimple.IfStmt testIf=soot.jimple.Jimple.v().newIfStmt(cond1,nop1);  body.getUnits().add(testIf);  if ((assertStmt.cond() instanceof polyglot.ast.BooleanLit) && (!((polyglot.ast.BooleanLit)assertStmt.cond()).value())) {  } else {    soot.Value sootCond=base().createAggressiveExpr(assertStmt.cond(),false,false);    boolean needIf=needSootIf(sootCond);    if (!(sootCond instanceof soot.jimple.ConditionExpr)) {      sootCond=soot.jimple.Jimple.v().newEqExpr(sootCond,soot.jimple.IntConstant.v(1));    } else {      sootCond=handleDFLCond((soot.jimple.ConditionExpr)sootCond);    }    if (needIf) {      soot.jimple.IfStmt ifStmt=soot.jimple.Jimple.v().newIfStmt(sootCond,nop1);      body.getUnits().add(ifStmt);      Util.addLnPosTags(ifStmt.getConditionBox(),assertStmt.cond().position());      Util.addLnPosTags(ifStmt,assertStmt.position());    }  }  soot.Local failureLocal=lg.generateLocal(soot.RefType.v("java.lang.AssertionError"));  soot.jimple.NewExpr newExpr=soot.jimple.Jimple.v().newNewExpr(soot.RefType.v("java.lang.AssertionError"));  soot.jimple.AssignStmt newAssign=soot.jimple.Jimple.v().newAssignStmt(failureLocal,newExpr);  body.getUnits().add(newAssign);  soot.SootMethodRef methToInvoke;  ArrayList paramTypes=new ArrayList();  ArrayList params=new ArrayList();  if (assertStmt.errorMessage() != null) {    soot.Value errorExpr=base().createAggressiveExpr(assertStmt.errorMessage(),false,false);    if (errorExpr instanceof soot.jimple.ConditionExpr) {      errorExpr=handleCondBinExpr((soot.jimple.ConditionExpr)errorExpr);    }    soot.Type errorType=errorExpr.getType();    if (assertStmt.errorMessage().type().isChar()) {      errorType=soot.CharType.v();    }    if (errorType instanceof soot.IntType) {      paramTypes.add(soot.IntType.v());    } else     if (errorType instanceof soot.LongType) {      paramTypes.add(soot.LongType.v());    } else     if (errorType instanceof soot.FloatType) {      paramTypes.add(soot.FloatType.v());    } else     if (errorType instanceof soot.DoubleType) {      paramTypes.add(soot.DoubleType.v());    } else     if (errorType instanceof soot.CharType) {      paramTypes.add(soot.CharType.v());    } else     if (errorType instanceof soot.BooleanType) {      paramTypes.add(soot.BooleanType.v());    } else     if (errorType instanceof soot.ShortType) {      paramTypes.add(soot.IntType.v());    } else     if (errorType instanceof soot.ByteType) {      paramTypes.add(soot.IntType.v());    } else {      paramTypes.add(soot.Scene.v().getSootClass("java.lang.Object").getType());    }    params.add(errorExpr);  }  methToInvoke=soot.Scene.v().makeMethodRef(soot.Scene.v().getSootClass("java.lang.AssertionError"),"<init>",paramTypes,soot.VoidType.v(),false);  soot.jimple.SpecialInvokeExpr invokeExpr=soot.jimple.Jimple.v().newSpecialInvokeExpr(failureLocal,methToInvoke,params);  soot.jimple.InvokeStmt invokeStmt=soot.jimple.Jimple.v().newInvokeStmt(invokeExpr);  body.getUnits().add(invokeStmt);  if (assertStmt.errorMessage() != null) {    Util.addLnPosTags(invokeExpr.getArgBox(0),assertStmt.errorMessage().position());  }  soot.jimple.ThrowStmt throwStmt=soot.jimple.Jimple.v().newThrowStmt(failureLocal);  body.getUnits().add(throwStmt);  body.getUnits().add(nop1);}  }
class C{  public static void json(String msg){  log(Log.DEBUG,0,null,FMT_JSON,null,msg);}  }
class C{  public void onPatchServiceResult(boolean isUpgradePatch){  if (!isRetryEnable) {    TinkerLog.w(TAG,"onPatchServiceResult retry disabled, just return");    return;  }  if (!isUpgradePatch) {    TinkerLog.w(TAG,"onPatchServiceResult is not upgrade patch, just return");    return;  }  if (retryInfoFile.exists()) {    SharePatchFileUtil.safeDeleteFile(retryInfoFile);  }  if (tempPatchFile.exists()) {    SharePatchFileUtil.safeDeleteFile(tempPatchFile);  }}  }
class C{  protected GroupsReorderLinkQuery linkId(int value){  return unsafeParam("link_id",value);}  }
class C{  public int calculateNumberOfEffects(int dispelLevel){  int number=0;  for (  Effect effect : abnormalEffectMap.values()) {    DispelCategoryType dispelCat=effect.getDispelCategory();    SkillTargetSlot tragetSlot=effect.getSkillTemplate().getTargetSlot();    if (effect.getDuration() >= 86400000 && !removebleEffect(effect)) {      continue;    }    if (effect.isSanctuaryEffect()) {      continue;    }    if (tragetSlot != SkillTargetSlot.BUFF && (tragetSlot != SkillTargetSlot.DEBUFF && dispelCat != DispelCategoryType.ALL) || effect.getTargetSlotLevel() >= 2) {      continue;    }switch (dispelCat) {case ALL:case BUFF:      if (effect.getReqDispelLevel() <= dispelLevel) {        number++;      }    break;default :  break;}}return number;}  }
class C{  static int roundToPow2(int n){  int orig=n;  n>>=1;  int mask=0x8000000;  while (mask != 0 && (n & mask) == 0) {    mask>>=1;  }  while (mask != 0) {    n|=mask;    mask>>=1;  }  n+=1;  if (n != orig) {    n<<=1;  }  return n;}  }
class C{  protected int insertionIndex(short val){  int hash, probe, index, length;  final byte[] states=_states;  final short[] set=_set;  length=states.length;  hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  index=hash % length;  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL && set[index] == val) {    return -index - 1;  } else {    probe=1 + (hash % (length - 2));    if (states[index] != REMOVED) {      do {        index-=probe;        if (index < 0) {          index+=length;        }      } while (states[index] == FULL && set[index] != val);    }    if (states[index] == REMOVED) {      int firstRemoved=index;      while (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {        index-=probe;        if (index < 0) {          index+=length;        }      }      return states[index] == FULL ? -index - 1 : firstRemoved;    }    return states[index] == FULL ? -index - 1 : index;  }}  }
class C{  protected VideoReportCommentQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public final int computeHashCode(long val){  return HashFunctions.hash(val);}  }
class C{  public void onReady(Runnable runnable){  runnable.run();}  }
class C{  public OpenFileHyperlink(@NotNull String filePath,@NotNull String text,int lineNumber,int column){  super("openFile:" + filePath,text);  myFilePath=FileUtil.toSystemIndependentName(filePath);  myLineNumber=lineNumber;  myColumn=column;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201013,skilltarget,skillcaster,skillname);}  }
class C{  @Override public void endDTD(Augmentations augmentations) throws XNIException {}  }
class C{  private void processColumnValuesForOneChunk(int chunkCountForSegment) throws IOException {  deleteStorePath();  CarbonDictionaryWriterImpl writer=prepareWriter();  writer.write(convertStringListToByteArray(dataSet1));  writer.close();  writer.commit();  long end_offset=CarbonUtil.getFileSize(this.dictionaryFilePath);  List<byte[]> dictionaryData=readDictionaryFile(0L,0L);  List<String> actual=convertByteArrayListToStringValueList(dictionaryData);  compareDictionaryData(actual,dataSet1);  List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks=readDictionaryMetadataFile();  assertTrue(1 == carbonDictionaryColumnMetaChunks.size());  long start_offset=0L;  CarbonDictionaryColumnMetaChunk expected=new CarbonDictionaryColumnMetaChunk(1,2,start_offset,end_offset,1);  for (  CarbonDictionaryColumnMetaChunk chunk : carbonDictionaryColumnMetaChunks) {    validateDictionaryMetadata(chunk,expected);  }}  }
class C{  public static String parse(CommandLineParser.Parameter[] params) throws IOException {  String name=null;  for (int i=0; i < params.length; i++) {    if (params[i].getName().equalsIgnoreCase(SPACE_NAME_PARAMETER)) {      for (int j=0; j < params[i].getArguments().length; j++) {        name=params[i].getArguments()[j];        break;      }    }  }  return name;}  }
class C{  public MultivariateSummaryStatistics(int dimension,boolean covarianceBiasCorrection){  this.k=dimension;  sumImpl=new VectorialStorelessStatistic(k,new Sum());  sumSqImpl=new VectorialStorelessStatistic(k,new SumOfSquares());  minImpl=new VectorialStorelessStatistic(k,new Min());  maxImpl=new VectorialStorelessStatistic(k,new Max());  sumLogImpl=new VectorialStorelessStatistic(k,new SumOfLogs());  geoMeanImpl=new VectorialStorelessStatistic(k,new GeometricMean());  meanImpl=new VectorialStorelessStatistic(k,new Mean());  covarianceImpl=new VectorialCovariance(k,covarianceBiasCorrection);}  }
class C{  public int peek(){  return fData[fDepth - 1];}  }
class C{  public LPCAnalysisResynthesis(int p){  this.p=p;}  }
class C{  public static <T>List<T> toList(T obj1,T obj2,T obj3,T obj4,T obj5,T obj6){  List<T> list=new LinkedList<T>();  list.add(obj1);  list.add(obj2);  list.add(obj3);  list.add(obj4);  list.add(obj5);  list.add(obj6);  return list;}  }
class C{  @NotNull public ObjectProperty<File> imagePath(){  return myImagePath;}  }
class C{  private void saveDownloadedFile(){  OCFile file=mStorageManager.getFileById(mCurrentDownload.getFile().getFileId());  long syncDate=System.currentTimeMillis();  file.setLastSyncDateForProperties(syncDate);  file.setLastSyncDateForData(syncDate);  file.setNeedsUpdateThumbnail(true);  file.setModificationTimestamp(mCurrentDownload.getModificationTimestamp());  file.setModificationTimestampAtLastSyncForData(mCurrentDownload.getModificationTimestamp());  file.setEtag(mCurrentDownload.getEtag());  file.setMimetype(mCurrentDownload.getMimeType());  file.setStoragePath(mCurrentDownload.getSavePath());  file.setFileLength((new File(mCurrentDownload.getSavePath()).length()));  file.setRemoteId(mCurrentDownload.getFile().getRemoteId());  mStorageManager.saveFile(file);  mStorageManager.triggerMediaScan(file.getStoragePath());  mStorageManager.saveConflict(file,null);}  }
class C{  static int applyMaskPenaltyRule4(ByteMatrix matrix){  int numDarkCells=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    byte[] arrayY=array[y];    for (int x=0; x < width; x++) {      if (arrayY[x] == 1) {        numDarkCells++;      }    }  }  int numTotalCells=matrix.getHeight() * matrix.getWidth();  int fivePercentVariances=Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells;  return fivePercentVariances * N4;}  }
class C{  public void explodeItems(List<ShoppingCartItem> shoppingCartItems,LocalDispatcher dispatcher){  if (dispatcher == null)   return;synchronized (cartLines) {    for (    ShoppingCartItem item : shoppingCartItems) {      try {        int thisIndex=items().indexOf(item);        List<ShoppingCartItem> explodedItems=item.explodeItem(this,dispatcher);        for (        ShoppingCartItem explodedItem : explodedItems) {          String orderItemSeqId=UtilFormatOut.formatPaddedNumber(nextItemSeq,5);          explodedItem.setOrderItemSeqId(orderItemSeqId);          addItemToEnd(explodedItem);          setItemShipGroupQty(explodedItem,BigDecimal.ONE,thisIndex);          nextItemSeq++;        }      } catch (      CartItemModifyException e) {        Debug.logError(e,"Problem exploding (unitizing) item! Item not exploded.",module);      }    }  }}  }
class C{  long freeSpaceUnix(String path,boolean kb,boolean posix,long timeout) throws IOException {  if (path.length() == 0) {    throw new IllegalArgumentException("Path must not be empty");  }  String flags="-";  if (kb) {    flags+="k";  }  if (posix) {    flags+="P";  }  String[] cmdAttribs=flags.length() > 1 ? new String[]{DF,flags,path} : new String[]{DF,path};  List<String> lines=performCommand(cmdAttribs,3,timeout);  if (lines.size() < 2) {    throw new IOException("Command line '" + DF + "' did not return info as expected "+ "for path '"+ path+ "'- response was "+ lines);  }  String line2=lines.get(1);  StringTokenizer tok=new StringTokenizer(line2," ");  if (tok.countTokens() < 4) {    if (tok.countTokens() == 1 && lines.size() >= 3) {      String line3=lines.get(2);      tok=new StringTokenizer(line3," ");    } else {      throw new IOException("Command line '" + DF + "' did not return data as expected "+ "for path '"+ path+ "'- check path is valid");    }  } else {    tok.nextToken();  }  tok.nextToken();  tok.nextToken();  String freeSpace=tok.nextToken();  return parseBytes(freeSpace,path);}  }
class C{  public void updateNewUrlLoading(int pageTransType,boolean isRedirect,boolean hasUserGesture,long lastUserInteractionTime,int lastCommittedEntryIndex){  long prevNewUrlLoadingTime=mLastNewUrlLoadingTime;  mLastNewUrlLoadingTime=SystemClock.elapsedRealtime();  int pageTransitionCore=pageTransType & PageTransition.CORE_MASK;  boolean isNewLoadingStartedByUser=false;  boolean isFromIntent=pageTransitionCore == PageTransition.LINK && (pageTransType & PageTransition.FROM_API) != 0;  if (!isRedirect) {    if ((pageTransType & PageTransition.FORWARD_BACK) != 0) {      isNewLoadingStartedByUser=true;    } else     if (pageTransitionCore != PageTransition.LINK) {      isNewLoadingStartedByUser=true;    } else     if (prevNewUrlLoadingTime == INVALID_TIME || isFromIntent || lastUserInteractionTime > prevNewUrlLoadingTime) {      isNewLoadingStartedByUser=true;    }  }  if (isNewLoadingStartedByUser) {    if (isFromIntent && mInitialIntent != null) {      mInitialNavigationType=NAVIGATION_TYPE_FROM_INTENT;    } else {      clearIntentHistory();      if (pageTransitionCore == PageTransition.TYPED) {        mInitialNavigationType=NAVIGATION_TYPE_FROM_USER_TYPING;      } else       if (pageTransitionCore == PageTransition.RELOAD || (pageTransType & PageTransition.FORWARD_BACK) != 0) {        mInitialNavigationType=NAVIGATION_TYPE_FROM_RELOAD;      } else       if (pageTransitionCore == PageTransition.LINK && !hasUserGesture) {        mInitialNavigationType=NAVIGATION_TYPE_FROM_LINK_WITHOUT_USER_GESTURE;      } else {        mInitialNavigationType=NAVIGATION_TYPE_OTHER;      }    }    mIsOnEffectiveRedirectChain=false;    mLastCommittedEntryIndexBeforeStartingNavigation=lastCommittedEntryIndex;    mShouldNotOverrideUrlLoadingUntilNewUrlLoading=false;  } else   if (mInitialNavigationType != NAVIGATION_TYPE_NONE) {    mIsOnEffectiveRedirectChain=true;  }}  }
class C{  public static Bitmap normalize(Context context,Uri selectedImage){  return normalize(context,selectedImage,MAX_BITMAP_WIDTH,MAX_BITMAP_HEIGHT);}  }
class C{  public List<ShoppingCartItem> findAllCartItemsInCategory(String productCategoryId,String groupNumber){  if (productCategoryId == null)   return this.items();  Delegator delegator=this.getDelegator();  List<ShoppingCartItem> itemsToReturn=FastList.newInstance();  try {    for (    ShoppingCartItem cartItem : cartLines) {      if (UtilValidate.isNotEmpty(groupNumber) && !cartItem.isInItemGroup(groupNumber)) {        continue;      }      if (CategoryWorker.isProductInCategory(delegator,cartItem.getProductId(),productCategoryId)) {        itemsToReturn.add(cartItem);      } else {      }    }  } catch (  GenericEntityException e) {    Debug.logError(e,"Error getting cart items that are in a category: " + e.toString(),module);  }  return itemsToReturn;}  }
class C{  private boolean lessThan(VersionData maximumVersion){  if (this.majorNumber < maximumVersion.majorNumber) {    return true;  } else   if (this.majorNumber == maximumVersion.majorNumber) {    if (this.minorNumber < maximumVersion.minorNumber) {      return true;    } else     if (this.minorNumber == maximumVersion.minorNumber) {      if (this.pointNumber <= maximumVersion.pointNumber) {        return true;      }    }  }  return false;}  }
class C{  @Override public AudioInputStream synthesizeUsingImposedF0(int sourceIndex,int targetIndex,AudioFileFormat aft) throws SynthesisException {  if (!f0ContourImposeSupport) {    throw new SynthesisException("Mary configuration of this voice doesn't support intonation contour imposition");  }  int numberOfUnits=unitFileReader.getNumberOfUnits();  if (sourceIndex >= numberOfUnits || targetIndex >= numberOfUnits) {    throw new IllegalArgumentException("sourceIndex(" + sourceIndex + ") and targetIndex("+ targetIndex+ ") are should be less than number of available units ("+ numberOfUnits+ ")");  }  if (sourceIndex == targetIndex) {    return reSynthesize(sourceIndex,aft);  }  double[] sourceF0=this.vIntonationReader.getContour(sourceIndex);  double[] targetF0coeffs=this.vIntonationReader.getIntonationCoeffs(targetIndex);  double[] sourceF0coeffs=this.vIntonationReader.getIntonationCoeffs(sourceIndex);  if (targetF0coeffs == null || sourceF0coeffs == null) {    return reSynthesize(sourceIndex,aft);  }  if (targetF0coeffs.length == 0 || sourceF0coeffs.length == 0) {    return reSynthesize(sourceIndex,aft);  }  double[] targetF0=Polynomial.generatePolynomialValues(targetF0coeffs,sourceF0.length,0,1);  sourceF0=Polynomial.generatePolynomialValues(sourceF0coeffs,sourceF0.length,0,1);  assert targetF0.length == sourceF0.length;  double[] tScalesArray=new double[sourceF0.length];  double[] pScalesArray=new double[sourceF0.length];  for (int i=0; i < targetF0.length; i++) {    pScalesArray[i]=(float)(targetF0[i] / sourceF0[i]);    tScalesArray[i]=(float)(1.0);  }  return synthesizeUsingF0Modification(sourceIndex,pScalesArray,tScalesArray,aft);}  }
class C{  public void trustProxy(IJSpace proxy) throws RemoteException {  ((ISpaceProxy)proxy).login(trustedCredentialsProvider);}  }
class C{  public EntityQuery select(String... fields){  this.fieldsToSelect=UtilMisc.toSetArray(fields);  return this;}  }
class C{  public static String wordBreak(Item item) throws ProcessException {  Item ww=item.getItemAs(Relation.PHRASE);  if (ww == null || ww.getNext() != null) {    return "1";  } else {    String pname=ww.getParent().toString();    if (pname.equals("BB")) {      return "4";    } else     if (pname.equals("B")) {      return "3";    } else {      return "1";    }  }}  }
class C{  public BucketDeleteEvent(ExperimentBase experiment,Bucket bucket){  this(null,experiment,bucket);}  }
class C{  public Array2DRowFieldMatrix(final Field<T> field){  super(field);}  }
class C{  public static void loadUrl(Context context,@NonNull String url,@Nullable String defaultTitle){  load(context,url,"",defaultTitle);}  }
class C{  private Delta parseConditionalDelta(){  Condition test=parseCondition();  String then=_t.nextToken();  if (!"then".equals(then)) {    throw _t.syntaxError("Expected 'then' and instead saw '" + then + "'");  }  Delta delta=parseDelta();  String next=_t.nextToken();  if ("elif".equals(next)) {    Delta otherwise=parseConditionalDelta();    return Deltas.conditional(test,delta,otherwise);  }  Delta otherwise=Deltas.noop();  if ("else".equals(next)) {    otherwise=parseDelta();    next=_t.nextToken();  }  if (!"end".equals(next)) {    throw _t.syntaxError("Expected 'end' and instead saw '" + next + "'");  }  return Deltas.conditional(test,delta,otherwise);}  }
class C{  public Matrix3f transposeNew(){  Matrix3f ret=new Matrix3f(m00,m10,m20,m01,m11,m21,m02,m12,m22);  return ret;}  }
class C{  public static int hashWord(String sWord){  int iCnt=0, iRes=0, iLen=sWord.length();  for (iCnt=0; iCnt < iLen; iCnt++)   iRes+=(int)sWord.charAt(iCnt);  return (sWord.length() * 8192 + iRes);}  }
class C{  public static final int daysBetween(Calendar early,Calendar late){  return (int)(toJulian(late) - toJulian(early));}  }
class C{  private static ConstraintAnchor.Type lookupType(Direction dir){switch (dir) {case NORTH:    return ConstraintAnchor.Type.TOP;case SOUTH:  return ConstraintAnchor.Type.BOTTOM;case WEST:return ConstraintAnchor.Type.LEFT;case EAST:return ConstraintAnchor.Type.RIGHT;case BASE:return ConstraintAnchor.Type.BASELINE;}return ConstraintAnchor.Type.NONE;}  }
class C{  public AudioInputStream synthesize(Voice voice,AudioFileFormat aft,Element domElement) throws Exception {  if (!voice.hasVocalizationSupport())   return null;  if (domElement.hasAttribute("variant")) {    return synthesizeVariant(aft,domElement);  }  if (f0ContourImposeSupport) {    return synthesizeImposedIntonation(aft,domElement);  }  return synthesizeVocalization(aft,domElement);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200683,skillcaster,skillname);}  }
class C{  @Override public Filter createFilter(){  return new IsEqualToExtended();}  }
class C{  @Override public String toString(){  NumberFormat nf=NumberFormat.getPercentInstance();  StringBuilder outBuffer=new StringBuilder();  outBuffer.append("Value \tFreq. \tPct. \tCum Pct. \n");  Iterator<T> iter=freqTable.keySet().iterator();  while (iter.hasNext()) {    T value=iter.next();    outBuffer.append(value);    outBuffer.append('\t');    outBuffer.append(getCount(value));    outBuffer.append('\t');    outBuffer.append(nf.format(getPct(value)));    outBuffer.append('\t');    outBuffer.append(nf.format(getCumPct(value)));    outBuffer.append('\n');  }  return outBuffer.toString();}  }
class C{  private boolean attemptToExtractIdd(){  Pattern internationalPrefix=regexCache.getPatternForRegex("\\" + PhoneNumberUtil.PLUS_SIGN + "|"+ currentMetadata.getInternationalPrefix());  Matcher iddMatcher=internationalPrefix.matcher(accruedInputWithoutFormatting);  if (iddMatcher.lookingAt()) {    isCompleteNumber=true;    int startOfCountryCallingCode=iddMatcher.end();    nationalNumber.setLength(0);    nationalNumber.append(accruedInputWithoutFormatting.substring(startOfCountryCallingCode));    prefixBeforeNationalNumber.setLength(0);    prefixBeforeNationalNumber.append(accruedInputWithoutFormatting.substring(0,startOfCountryCallingCode));    if (accruedInputWithoutFormatting.charAt(0) != PhoneNumberUtil.PLUS_SIGN) {      prefixBeforeNationalNumber.append(SEPARATOR_BEFORE_NATIONAL_NUMBER);    }    return true;  }  return false;}  }
class C{  public Percentiles percentiles(ConstantRange range){  SortedSet<Constant> sorted=values();  SortedSet<Constant> contained=new TreeSet<Constant>();  Constant prev=null;  for (  Constant pct : sorted) {    if (range.contains(pct)) {      contained.add(pct);    } else     if (contained.isEmpty())     prev=pct;  }  if (contained.isEmpty())   return null;  double prevPercent=prev == null ? 0.0 : pcts.get(prev);  double totalPercent=pcts.get(contained.last()) - prevPercent;  Map<Constant,Double> newPcts=new HashMap<Constant,Double>();  for (  Constant p : contained)   newPcts.put(p,(pcts.get(p) - prevPercent) / totalPercent);  return new Percentiles(newPcts);}  }
class C{  public Schema(String[] names,Class[] types){  this(names.length);  if (names.length != types.length) {    throw new IllegalArgumentException("Input arrays should be the same length");  }  for (int i=0; i < names.length; ++i) {    addColumn(names[i],types[i],null);  }}  }
class C{  private Unit insertGotoAfter(Unit node,Unit target){  Unit newGoto=Jimple.v().newGotoStmt(target);  body.getUnits().insertAfter(newGoto,node);  return newGoto;}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  protected void ensureTX() throws IllegalStateException {  if (m_acknowledgeMode != Session.SESSION_TRANSACTED) {    throw new IllegalStateException("Forbidden call on a non transacted session.");  }}  }
class C{  public boolean dump_summaries(){  return soot.PhaseOptions.getBoolean(options,"dump-summaries");}  }
class C{  public void login(String authCode) throws LoginFailedException, RemoteServerException {  HttpUrl url=HttpUrl.parse(OAUTH_TOKEN_ENDPOINT).newBuilder().addQueryParameter("code",authCode).addQueryParameter("client_id",CLIENT_ID).addQueryParameter("client_secret",SECRET).addQueryParameter("grant_type","authorization_code").addQueryParameter("scope","openid email https://www.googleapis.com/auth/userinfo.email").addQueryParameter("redirect_uri","urn:ietf:wg:oauth:2.0:oob").build();  RequestBody reqBody=RequestBody.create(null,new byte[0]);  Request request=new Request.Builder().url(url).method("POST",reqBody).build();  Response response=null;  try {    response=client.newCall(request).execute();  } catch (  IOException e) {    throw new RemoteServerException("Network Request failed to fetch tokenId",e);  }  Moshi moshi=new Moshi.Builder().build();  GoogleAuthTokenJson googleAuth=null;  try {    googleAuth=moshi.adapter(GoogleAuthTokenJson.class).fromJson(response.body().string());    Log.d(TAG,"" + googleAuth.getExpiresIn());  } catch (  IOException e) {    throw new RemoteServerException("Failed to unmarshell the Json response to fetch tokenId",e);  }  Log.d(TAG,"Got token: " + googleAuth.getAccessToken());  expiresTimestamp=time.currentTimeMillis() + (googleAuth.getExpiresIn() * 1000 - REFRESH_TOKEN_BUFFER_TIME);  tokenId=googleAuth.getIdToken();  refreshToken=googleAuth.getRefreshToken();  authbuilder=AuthInfo.newBuilder();}  }
class C{  private double[][] copyOut(){  final int nRows=this.getRowDimension();  final double[][] out=new double[nRows][this.getColumnDimension()];  for (int i=0; i < nRows; i++) {    System.arraycopy(data[i],0,out[i],0,data[i].length);  }  return out;}  }
class C{  public static List<GenericValue> findProductsById(Delegator delegator,String idToFind,String goodIdentificationTypeId,boolean searchProductFirst,boolean searchAllId) throws GenericEntityException {  if (Debug.verboseOn())   Debug.logVerbose("Analyze goodIdentification: entered id = " + idToFind + ", goodIdentificationTypeId = "+ goodIdentificationTypeId,module);  GenericValue product=null;  List<GenericValue> productsFound=null;  if (searchProductFirst) {    product=EntityQuery.use(delegator).from("Product").where("productId",idToFind).cache().queryOne();  }  if (searchAllId || (searchProductFirst && UtilValidate.isEmpty(product))) {    Map<String,String> conditions=UtilMisc.toMap("idValue",idToFind);    if (UtilValidate.isNotEmpty(goodIdentificationTypeId)) {      conditions.put("goodIdentificationTypeId",goodIdentificationTypeId);    }    productsFound=EntityQuery.use(delegator).from("GoodIdentificationAndProduct").where(conditions).orderBy("productId").cache(true).queryList();  }  if (!searchProductFirst) {    product=EntityQuery.use(delegator).from("Product").where("productId",idToFind).cache().queryOne();  }  if (UtilValidate.isNotEmpty(product)) {    if (UtilValidate.isNotEmpty(productsFound))     productsFound.add(product); else     productsFound=UtilMisc.toList(product);  }  if (Debug.verboseOn())   Debug.logVerbose("Analyze goodIdentification: found product.productId = " + product + ", and list : "+ productsFound,module);  return productsFound;}  }
class C{  public void notifyUpdated(){  mHandler.sendEmptyMessage(MSG_DID_UPDATE);}  }
class C{  public BetweenSpacePredicate(Comparable<?> low,Comparable<?> high,boolean lowInclusive,boolean highInclusive){  this(low,high,null,lowInclusive,highInclusive);}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public GroupsEditQuery obsceneStopwords(Boolean value){  return unsafeParam("obscene_stopwords",value);}  }
class C{  protected SegmentationProfile mergeHeaderWithProfile(SegmentationProfile segmentationProfile,HttpHeaders headers){  if (segmentationProfile != null && segmentationProfile.getProfile() != null && headers != null) {    for (    String headerKey : headers.getRequestHeaders().keySet()) {      if (!segmentationProfile.hasAttribute(headerKey)) {        segmentationProfile.addAttribute(headerKey,headers.getRequestHeader(headerKey).get(0));      }    }  } else   if ((segmentationProfile == null || segmentationProfile.getProfile() == null) && headers != null) {    Map profileMap=new HashMap();    segmentationProfile=new SegmentationProfile.Builder(profileMap).build();    for (    String headerKey : headers.getRequestHeaders().keySet()) {      if (!segmentationProfile.hasAttribute(headerKey)) {        segmentationProfile.addAttribute(headerKey,headers.getRequestHeader(headerKey).get(0));      }    }  }  return segmentationProfile;}  }
class C{  protected void correctStressSymbol(LinkedList<String> phoneList){  boolean stressFound=false;  ListIterator<String> it=phoneList.listIterator(0);  while (it.hasNext()) {    String s=it.next();    if (s.endsWith("1")) {      if (this.removeTrailingOneFromPhones) {        it.set(s.substring(0,s.length() - 1));      }      if (!stressFound) {        int steps=0;        while (it.hasPrevious()) {          steps++;          String t=it.previous();          if (t.equals("-") || t.equals("_")) {            it.next();            steps--;            break;          }        }        it.add("'");        while (steps > 0) {          it.next();          steps--;        }        stressFound=true;      }    }  }  if (!stressFound) {    it=phoneList.listIterator(0);    while (it.hasNext()) {      String s=it.next();      Allophone ph=allophoneSet.getAllophone(s);      if (ph != null && ph.sonority() >= 5) {        int steps=0;        while (it.hasPrevious()) {          steps++;          String t=it.previous();          if (t.equals("-") || t.equals("_")) {            it.next();            steps--;            break;          }        }        it.add("'");        while (steps > 0) {          it.next();          steps--;        }        break;      }    }  }}  }
class C{  private synchronized void refreshPermissions(){  if (userData == null) {    return;  }  UserData ud=userData;  ud.recalculatePermissions();  ud.recalculateMeta();  getPlugin().getApiProvider().fireEventAsync(new UserPermissionRefreshEvent(new UserLink(this)));}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public PullException(){  super();}  }
class C{  public File zipTo(String file){  try {    File f=new File(file);    f.getParentFile().mkdirs();    ZipOutputStream out=new ZipOutputStream(new FileOutputStream(f));    for (    String s : source) {      addFile(out,s);    }    out.close();    return f;  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return null;}  }
class C{  public static Tailer create(File file,TailerListener listener){  return create(file,listener,DEFAULT_DELAY_MILLIS,false);}  }
class C{  @Override public void channelClosed(ChannelHandlerContext channelHandlerContext,ChannelStateEvent channelStateEvent) throws Exception {  curr_conns.decrementAndGet();  channelGroup.remove(channelHandlerContext.getChannel());}  }
class C{  public static LinkedList<MaryModule> modulesRequiredForProcessing(MaryDataType sourceType,MaryDataType targetType,Locale locale,Voice voice){  if (!registrationComplete)   throw new IllegalStateException("Cannot inquire about modules while registration is ongoing");  if (sourceType == null)   throw new NullPointerException("Received null source type");  if (targetType == null)   throw new NullPointerException("Received null target type");  LinkedList<MaryDataType> seenTypes=new LinkedList<MaryDataType>();  seenTypes.add(sourceType);  return modulesRequiredForProcessing(sourceType,targetType,locale,voice,seenTypes);}  }
class C{  private boolean containsNaNs(IntDoublePair[] ranks){  for (int i=0; i < ranks.length; i++) {    if (Double.isNaN(ranks[i].getValue())) {      return true;    }  }  return false;}  }
class C{  @Override public void startEffect(Effect effect){  if (change == null) {    return;  }  Creature effected=effect.getEffected();  CreatureGameStats<? extends Creature> cgs=effected.getGameStats();  List<IStatFunction> modifiers=getModifiers(effect);  if (modifiers.size() > 0) {    cgs.addEffect(effect,modifiers);  }  if (maxstat) {    effected.getLifeStats().increaseHp(TYPE.HP,effected.getGameStats().getMaxHp().getCurrent());    effected.getLifeStats().increaseMp(TYPE.HEAL_MP,effected.getGameStats().getMaxMp().getCurrent());  }}  }
class C{  public CART(Node rootNode,FeatureDefinition featDef){  super(rootNode,featDef);}  }
class C{  public static Matrix constructWithCopy(double[][] A){  int m=A.length;  int n=A[0].length;  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public CopyTmConfig copyTM(Long sourceRepositoryId,Long targetRepositoryId,CopyTmConfig.Mode mode){  CopyTmConfig copyTmConfig=new CopyTmConfig();  copyTmConfig.setSourceRepositoryId(sourceRepositoryId);  copyTmConfig.setTargetRepositoryId(targetRepositoryId);  if (mode != null) {    copyTmConfig.setMode(mode);  }  String exportPath=UriComponentsBuilder.fromPath(getBasePathForEntity()).pathSegment("copyTM").toUriString();  return authenticatedRestTemplate.postForObject(exportPath,copyTmConfig,CopyTmConfig.class);}  }
class C{  private void updateMembershipMatrix(){  for (int i=0; i < points.size(); i++) {    final T point=points.get(i);    double maxMembership=Double.MIN_VALUE;    int newCluster=-1;    for (int j=0; j < clusters.size(); j++) {      double sum=0.0;      final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));      if (distA != 0.0) {        for (        final CentroidCluster<T> c : clusters) {          final double distB=FastMath.abs(distance(point,c.getCenter()));          if (distB == 0.0) {            sum=Double.POSITIVE_INFINITY;            break;          }          sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));        }      }      double membership;      if (sum == 0.0) {        membership=1.0;      } else       if (sum == Double.POSITIVE_INFINITY) {        membership=0.0;      } else {        membership=1.0 / sum;      }      membershipMatrix[i][j]=membership;      if (membershipMatrix[i][j] > maxMembership) {        maxMembership=membershipMatrix[i][j];        newCluster=j;      }    }    clusters.get(newCluster).addPoint(point);  }}  }
class C{  public NewsfeedGetSuggestedSourcesQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static byte writeBool(boolean b){  if (b) {    return 0x01;  } else {    return 0x00;  }}  }
class C{  private void showCreateEditDialog(@Nullable Task task){  EditTaskDialogFragment fragment=EditTaskDialogFragment.newInstance(task);  fragment.show(getSupportFragmentManager(),EditTaskDialogFragment.TAG);}  }
class C{  public Complex(double real){  this(real,0.0);}  }
class C{  private void placeGroup(Group group){  if (group.gravity == Gravity.END) {    for (int i=group.views.length - 1; i >= 0; i--) {      placeChild(group.views[i],group.gravity);      if (group.isStacked && i != 0)       startRow();    }  } else {    for (int i=0; i < group.views.length; i++) {      placeChild(group.views[i],group.gravity);      if (group.isStacked && i != group.views.length - 1)       startRow();    }  }}  }
class C{  public static <T>Type<T> valueOf(final java.lang.reflect.Type type){  if (type instanceof Type) {    return (Type<T>)type;  } else   if (type instanceof ParameterizedType) {    return valueOf((ParameterizedType)type);  } else   if (type instanceof Class) {    return valueOf((Class<T>)type);  } else   if (type instanceof TypeVariable) {    return valueOf((TypeVariable<?>)type);  } else   if (type instanceof WildcardType) {    return valueOf((WildcardType)type);  } else {    throw new IllegalArgumentException(type + " is an unsupported type");  }}  }
class C{  public static void exitSafeRegion(boolean token){  sEnabled=token;}  }
class C{  public void addAll(ContextSet contextSet){  if (contextSet == null) {    throw new NullPointerException("contextSet");  }synchronized (this.contexts) {    this.contexts.addAll(contextSet.toSet());  }}  }
class C{  public Comment(String comment){  this.comment=comment;}  }
class C{  public void insertAfter(E toInsert,E point){  innerChain.insertAfter(toInsert,point);}  }
class C{  public boolean greaterThan(final Dfp x){  if (field.getRadixDigits() != x.field.getRadixDigits()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    final Dfp result=newInstance(getZero());    result.nans=QNAN;    dotrap(DfpField.FLAG_INVALID,GREATER_THAN_TRAP,x,result);    return false;  }  if (isNaN() || x.isNaN()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    dotrap(DfpField.FLAG_INVALID,GREATER_THAN_TRAP,x,newInstance(getZero()));    return false;  }  return compare(this,x) > 0;}  }
class C{  public SerialMessage removeAssociationMessage(int group,int node,int endpoint){  logger.debug("NODE {}: Creating new message for command MULTI_ASSOCIATIONCMD_REMOVE node {}, endpoint {}, group {}",getNode().getNodeId(),node,endpoint,group);  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);  ByteArrayOutputStream outputData=new ByteArrayOutputStream();  outputData.write(this.getNode().getNodeId());  outputData.write(6);  outputData.write(getCommandClass().getKey());  outputData.write(MULTI_ASSOCIATIONCMD_REMOVE);  outputData.write(group);  outputData.write(0);  outputData.write(node);  outputData.write(endpoint);  result.setMessagePayload(outputData.toByteArray());  return result;}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  @Override public int update(@NonNull Uri uri,ContentValues values,String selection,String[] selectionArgs){  SelectionBuilder builder=new SelectionBuilder();  final SQLiteDatabase db=mDatabaseHelper.getWritableDatabase();  final int match=sUriMatcher.match(uri);  int count;switch (match) {case ROUTE_ENTRIES:    count=builder.table(FeedContract.Entry.TABLE_NAME).where(selection,selectionArgs).update(db,values);  break;case ROUTE_ENTRIES_ID:String id=uri.getLastPathSegment();count=builder.table(FeedContract.Entry.TABLE_NAME).where(FeedContract.Entry._ID + "=?",id).where(selection,selectionArgs).update(db,values);break;default :throw new UnsupportedOperationException("Unknown uri: " + uri);}Context ctx=getContext();assert ctx != null;ctx.getContentResolver().notifyChange(uri,null,false);return count;}  }
class C{  public static final String name(String name){  return name.toLowerCase(Locale.ROOT).replaceAll("[^-a-zA-Z_0-9.]","_");}  }
class C{  public boolean isApplicable(){  megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getSelectedFiles().size() > 1;}  }
class C{  private String id(Var instance){  return instance.admin().getId().get();}  }
class C{  public static List<MerkleTreeNode> compress(List<MerkleTreeNode> nodes){  List<MerkleTreeNode> result=new ArrayList<>(nodes);  boolean hasChanged;  do {    if (result.size() <= 1)     return result;    hasChanged=false;    int leftPos, rightPos;    List<MerkleTreeNode> source=result;    result=new ArrayList<>();    int prevPos=-twoPower(source.get(0).getMerkleHeight());    for (int i=0; i < source.size(); i++) {      MerkleTreeNode left=source.get(i);      leftPos=prevPos + twoPower(left.getMerkleHeight());      if (i == source.size() - 1) {        result.add(left);        prevPos=leftPos;        continue;      }      MerkleTreeNode right=source.get(i + 1);      rightPos=leftPos + twoPower(left.getMerkleHeight());      if (isMergeableDistantPrunedNeighbours(left,leftPos,right,rightPos)) {        result.add(new PrunedNode(Hash.merge(left.getID(),mergeWithItself(right,left.getMerkleHeight() - right.getMerkleHeight())),left.getMerkleHeight() + 1));        hasChanged=true;        i++;      } else       if (isNeighbours(left,leftPos,right,rightPos)) {        if (left instanceof PrunedNode && right instanceof PrunedNode) {          result.add(new PrunedNode(Hash.merge(left.getID(),right.getID()),left.getMerkleHeight() + 1));          prevPos=rightPos;          hasChanged=true;          i++;        } else {          result.add(left);          result.add(right);          prevPos=rightPos;          i++;        }      } else {        result.add(left);        prevPos=leftPos;      }    }  } while (hasChanged);  return result;}  }
class C{  public FriendsGetMutualQuery targetUids(Integer... value){  return unsafeParam("target_uids",value);}  }
class C{  public static void renderTemplate(String templateLocation,String templateString,Map<String,Object> context,Appendable outWriter) throws TemplateException, IOException {  renderTemplate(templateLocation,templateString,context,outWriter,true);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private void onEquipmentUp(final Long pId,final Timestamp pTimestamp,final String pMessage){  if (LOGGER.isDebugEnabled()) {    StringBuffer str=new StringBuffer("onEquipmentUp(");    str.append(pId);    str.append(", ");    str.append(pTimestamp);    str.append(", ");    str.append(pMessage);    LOGGER.debug(str.toString());  }  try {    equipmentFacade.resume(pId,pTimestamp,pMessage);    Equipment equipmentCopy=equipmentCache.getCopy(pId);    Long stateTagId=equipmentCopy.getStateTagId();    Long commFaultId=equipmentCopy.getCommFaultTagId();    controlTagCache.acquireWriteLockOnKey(stateTagId);    try {      ControlTag stateTag=controlTagCache.get(stateTagId);      if (stateTag.getValue() == null || !stateTag.getValue().equals(SupervisionStatus.RUNNING.toString()) || !stateTag.isValid()) {        controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.RUNNING.toString(),pMessage,pTimestamp);      }    } catch (    CacheElementNotFoundException controlCacheEx) {      LOGGER.error("Unable to locate equipment state tag in control tag cache (id is " + stateTagId + ")",controlCacheEx);    } finally {      controlTagCache.releaseWriteLockOnKey(stateTagId);    }    ControlTag commFaultTag=controlTagCache.getCopy(commFaultId);    setCommFaultTag(commFaultId,true,commFaultTag.getValueDescription(),pTimestamp);  } catch (  CacheElementNotFoundException equipmentCacheEx) {    LOGGER.error("Unable to locate equipment in cache (id is " + pId + ") - not taking any invalidation action.",equipmentCacheEx);  }}  }
class C{  private void tryLogin(final LoginData loginData){  final BpmResult loginResult=accountManager.login(loginData);  if (loginResult.isSuccess()) {    openMainWindow();  } else {    alertFailedLogin(loginResult.getErrorMessage());  }}  }
class C{  public static boolean isWellFormedIPv6Reference(String address){  int addrLength=address.length();  int index=1;  int end=addrLength - 1;  if (!(addrLength > 2 && address.charAt(0) == '[' && address.charAt(end) == ']')) {    return false;  }  int[] counter=new int[1];  index=scanHexSequence(address,index,end,counter);  if (index == -1) {    return false;  } else   if (index == end) {    return (counter[0] == 8);  }  if (index + 1 < end && address.charAt(index) == ':') {    if (address.charAt(index + 1) == ':') {      if (++counter[0] > 8) {        return false;      }      index+=2;      if (index == end) {        return true;      }    } else {      return (counter[0] == 6) && isWellFormedIPv4Address(address.substring(index + 1,end));    }  } else {    return false;  }  int prevCount=counter[0];  index=scanHexSequence(address,index,end,counter);  return (index == end) || (index != -1 && isWellFormedIPv4Address(address.substring((counter[0] > prevCount) ? index + 1 : index,end)));}  }
class C{  public final void warn(final Object o,final Throwable t){  log(Level.WARN,o,t);}  }
class C{  private boolean parseEscapedField(int fieldUpto) throws ParseException {  int fieldStart=bufferUpto;  int writeTo=bufferUpto;  bufferUpto++;  while (bufferUpto < chars.length) {    char c=chars[bufferUpto++];    if (c == DOUBLE_QUOTE) {      if (bufferUpto == chars.length) {        return false;      }      if (chars[bufferUpto] == DOUBLE_QUOTE) {        chars[writeTo++]=DOUBLE_QUOTE;        bufferUpto++;      } else {        if (bufferUpto == chars.length) {          return false;        }        if (chars[bufferUpto] == delimChar) {          bufferUpto++;        } else         if (chars[bufferUpto] != NEWLINE) {          throw new IllegalArgumentException("doc at offset " + lastDocStart + ": closing quote must appear only at the end of the cell");        }        addOneField(fieldUpto,fieldStart,writeTo - fieldStart);        return true;      }    } else {      chars[writeTo++]=c;    }  }  return false;}  }
class C{  public ShimpleBody newBody(SootMethod m){  Map<String,String> options=PhaseOptions.v().getPhaseOptions(PHASE);  return new ShimpleBody(m,options);}  }
class C{  public Matrix zoom(float scaleX,float scaleY){  Matrix save=new Matrix();  zoom(scaleX,scaleY,save);  return save;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  ChartViewer viewer=(ChartViewer)getViewer();  np.matchIgnoreCase("hide what=");  final String what=np.getWordMatchesIgnoringCase("all none selected unselected");  final LabelsJList list;  if (np.peekMatchIgnoreCase("target=")) {    np.matchIgnoreCase("target=");    list=viewer.getLabelsJList(np.getWordMatchesIgnoringCase("series classes attributes"));  } else {    list=viewer.getActiveLabelsJList();  }  np.matchIgnoreCase(";");  if (what.equalsIgnoreCase("none")) {    list.enableLabels(list.getAllLabels());  } else   if (what.equalsIgnoreCase("selected")) {    list.disableLabels(list.getSelectedLabels());  } else   if (what.equalsIgnoreCase("unselected")) {    final Set<String> labels=new HashSet<>();    labels.addAll(list.getAllLabels());    labels.removeAll(list.getSelectedLabels());    list.disableLabels(labels);  } else {    list.disableLabels(list.getAllLabels());  }  if (list.getName().equalsIgnoreCase("series"))   viewer.getChartData().setEnabledSeries(list.getEnabledLabels());}  }
class C{  private boolean hasRemainingMaskBases(){  if (!emitUncoveredLoci) {    return false;  }  return (lastReferenceSequence < referenceSequenceMask.getMaxSequenceIndex() || (lastReferenceSequence == referenceSequenceMask.getMaxSequenceIndex() && lastPosition < referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition)));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOWER_DEFENCE_REJECT_INVITATION(String value0){  return new SM_SYSTEM_MESSAGE(1400948,value0);}  }
class C{  public int max(){  if (size() == 0) {    throw new IllegalStateException("cannot find maximum of an empty list");  }  int max=Integer.MIN_VALUE;  for (int i=0; i < _pos; i++) {    if (_data[i] > max) {      max=_data[i];    }  }  return max;}  }
class C{  private void notifyOnGroupChange(ServiceRegistrar reg,String[] oldGroups,String[] newGroups){  boolean equal=groupSetsEqual(oldGroups,newGroups);  boolean stillInterested=groupsOverlap(newGroups);  if (!equal && stillInterested) {    sendChanged(reg,newGroups);  } else   if (!stillInterested) {    sendDiscarded(reg,newGroups);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200522,skilltarget,num0,skillname);}  }
class C{  @Override public void subscribeTags(Set<Long> tagIds){  ExecutorService executorService=Executors.newSingleThreadExecutor();  executorService.execute(new AsyncTagSubscriptionTask(tagIds));}  }
class C{  public static Connection enlistConnection(XAConnection xacon) throws GenericTransactionException {  if (xacon == null) {    return null;  }  try {    XAResource resource=xacon.getXAResource();    TransactionUtil.enlistResource(resource);    return xacon.getConnection();  } catch (  SQLException e) {    throw new GenericTransactionException("SQL error, could not enlist connection in transaction even though transactions are available",e);  }}  }
class C{  public UtilsResolveScreenNameQuery(VkApiClient client,UserActor actor,String screenName){  super(client,"utils.resolveScreenName",DomainResolved.class);  accessToken(actor.getAccessToken());  screenName(screenName);}  }
class C{  void initialize(){  experimentValues=loadCache();  ListenableFuture<String> response=executor.submit(new WebExperimentsDownloader());  response.addListener(new WebExperimentsResultProcessor(response),MoreExecutors.sameThreadExecutor());}  }
class C{  public boolean isFullyZoomedOutY(){  return !(mScaleY > mMinScaleY || mMinScaleY > 1f);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  final ClusterViewer viewer=getViewer();  int maxPC=viewer.getPcoaTab().getPCoA().getNumberOfPositiveEigenValues();  np.matchIgnoreCase("set pc1=");  int pc1=np.getInt(1,maxPC);  np.matchIgnoreCase("pc2=");  int pc2=np.getInt(1,maxPC);  int pc3=Math.max(pc1,pc2) + 1;  if (np.peekMatchIgnoreCase(";")) {    viewer.getPcoaTab().set3dMode(false);  } else {    np.matchIgnoreCase("pc3=");    pc3=np.getInt(1,maxPC);    viewer.getPcoaTab().set3dMode(true);  }  np.matchIgnoreCase(";");  if (pc1 == pc2)   throw new IOException("pc1==pc2");  if (pc1 == pc3)   throw new IOException("pc1==pc3");  if (pc2 == pc3)   throw new IOException("pc2==pc3");{    viewer.getPcoaTab().setFirstPC(pc1 - 1);    viewer.getPcoaTab().setSecondPC(pc2 - 1);    viewer.getPcoaTab().setThirdPC(pc3 - 1);    final Taxa taxa=new Taxa();    java.util.List<String> pids=((Director)getDir()).getDocument().getSampleNames();    for (    String name : pids) {      taxa.add(name);    }    viewer.getPcoaTab().setData(taxa,null);    viewer.updateConvexHulls=true;    viewer.addFormatting(viewer.getPcoaTab().getGraphView());  }}  }
class C{  @Nonnull private String computeCustomPath(@Nonnull String customPath) throws IOException {  if (!isRelativePath(customPath)) {    String message=format("The custom path: %s must be a relative path",customPath);    throw new AbortException(message);  }  if (customPath.contains("${")) {    String message=format("The custom path: %s contains '${' characters. Did you resolve correctly the parameters with Build DSL?",customPath);    throw new AbortException(message);  }  return new FilePath(new File(customPath)).getRemote();}  }
class C{  public void removedFromDatasource(){  assertIsMutable();  this.clearChanged();  this.setImmutable();}  }
class C{  public String message(){  return rawResponse.message();}  }
class C{  public static Style lightGreen(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_LIGHT_GREEN);  return style;}  }
class C{  public PointF mapImageToView(PointF imagePoint){  float[] points=mTempValues;  points[0]=imagePoint.x;  points[1]=imagePoint.y;  mapRelativeToAbsolute(points,points,1);  mActiveTransform.mapPoints(points,0,points,0,1);  return new PointF(points[0],points[1]);}  }
class C{  protected Granularity generateGranularity(String granularity,GranularityParser granularityParser) throws BadApiRequestException {  try {    return granularityParser.parseGranularity(granularity);  } catch (  GranularityParseException e) {    LOG.error(UNKNOWN_GRANULARITY.logFormat(granularity),granularity);    throw new BadApiRequestException(e.getMessage());  }}  }
class C{  public void bind(List<Confetto> confetti){  this.confetti=confetti;}  }
class C{  @Override public double[] makeDensityTestValues(){  double d=1.0 / (5 - -3 + 1);  return new double[]{0,d,d,d,d,d,d,d,d,d,0};}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  registrarID=new ServiceID(in);  if (server == null) {    throw new InvalidObjectException("null server");  }}  }
class C{  public static void unsetInitializer(){  _threadId.set(null);}  }
class C{  @NotNull public static ResizePolicy scaled(){  return ourScaled;}  }
class C{  public DatabaseGetSchoolsQuery(VkApiClient client,int cityId){  super(client,"database.getSchools",GetSchoolsResponse.class);  cityId(cityId);}  }
class C{  private void handleDefaultTopBar(){  ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  setLayoutParams(params);  topBarView=iTopBarInterface.getDefaultTopBarView();  topBarView.setBackgroundColor(getColor(XUIConfig.getTopBarBgColor()));  topBarView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,(int)getDefaultTopBarHeight()));  addView(topBarView);  FrameLayout.LayoutParams userViewParams=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  userViewParams.topMargin=(int)getContentTopMargin();  addView(mContentView,userViewParams);  initLoadContainer((int)getContentTopMargin());  addView(loadContainer);  handleTopBarShadow();}  }
class C{  public MarshalledInstance(java.rmi.MarshalledObject mo){  if (mo == null)   throw new NullPointerException();  net.jini.io.MarshalledObject privateMO=null;  try {    OptimizedByteArrayOutputStream baos=new OptimizedByteArrayOutputStream();    baos.writeByte(buildFlag());    OutputStream os=baos;    if (USE_GZIP) {      os=new GZIPOutputStream(os);    }    ObjectOutputStream oos=new ObjectOutputStream(os);    oos.writeObject(mo);    oos.flush();    os.close();    byte[] bytes=baos.toByteArray();    OptimizedByteArrayInputStream bais=new OptimizedByteArrayInputStream(bytes);    byte flags=bais.readByte();    InputStream is=bais;    if (isGzip(flags)) {      is=new GZIPInputStream(is);    }    ObjectInputStream ois=new FromMOInputStream(is);    privateMO=(net.jini.io.MarshalledObject)ois.readObject();    is.close();  } catch (  IOException ioe) {    throw new AssertionError(ioe);  }catch (  ClassNotFoundException cnfe) {    throw new AssertionError(cnfe);  }  objBytes=privateMO.objBytes;  locBytes=privateMO.locBytes;  hash=privateMO.hash;}  }
class C{  private void initView(View v){  this.handler=new SafeHandler<>(this);  StatusBarView statusBar=(StatusBarView)v.findViewById(R.id.fragment_search_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  this.container=(CoordinatorLayout)v.findViewById(R.id.fragment_search_container);  this.appBar=(AppBarLayout)v.findViewById(R.id.fragment_search_appBar);  Toolbar toolbar=(Toolbar)v.findViewById(R.id.fragment_search_toolbar);  if (Mysplash.getInstance().isLightTheme()) {    toolbar.inflateMenu(R.menu.fragment_search_toolbar_light);    toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_light);  } else {    toolbar.inflateMenu(R.menu.fragment_search_toolbar_dark);    toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_dark);  }  toolbar.setOnMenuItemClickListener(this);  toolbar.setNavigationOnClickListener(this);  this.editText=(EditText)v.findViewById(R.id.fragment_search_editText);  DisplayUtils.setTypeface(getActivity(),editText);  editText.setOnEditorActionListener(this);  editText.setFocusable(true);  editText.requestFocus();  initPages(v);}  }
class C{  public boolean contains(BasenameList bnl){  if (bnl.getLength() > this.getLength())   return (false);  for (int i=0; i < bnl.getLength(); i++) {    if (!this.contains(bnl.getName(i)))     return (false);  }  return (true);}  }
class C{  public static ResponseProperties createForbiddenResponse(String statusMessage){  return new ResponseProperties(HttpServletResponse.SC_FORBIDDEN,statusMessage);}  }
class C{  private AudioMapType loadAudioMapXml(File audioMapFile) throws XmlParsingException, FileNotFoundException {  if (!audioMapFile.isFile()) {    throw new FileNotFoundException(String.format("Invalid audiomap.xml file: '%s' not found",audioMapFile.getAbsolutePath()));  }  return XmlParser.parse(audioMapFile,new String[]{AUDIOMAP_XML_SCHEME},AUDIOMAP_PACKAGE,AudioMapType.class);}  }
class C{  public String loadFile(String sID){  return getDocumentText(sID,true);}  }
class C{  @Override public final DataTagUpdate configureCacheObject(final T dataTag,final Properties properties) throws ConfigurationException, IllegalArgumentException, IllegalAccessException {  DataTagCacheObject dataTagCacheObject=(DataTagCacheObject)dataTag;  DataTagUpdate dataTagUpdate=setCommonProperties(dataTagCacheObject,properties);  String tmpStr;  if (equipmentFacade != null && !(dataTagCacheObject instanceof ControlTag)) {    if ((tmpStr=properties.getProperty("equipmentId")) != null) {      try {        dataTagCacheObject.setEquipmentId(Long.valueOf(tmpStr));        dataTagCacheObject.setProcessId(equipmentFacade.getProcessIdForAbstractEquipment(dataTagCacheObject.getEquipmentId()));      } catch (      NumberFormatException e) {        throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"NumberFormatException: " + "Unable to convert parameter \"equipmentId\" to Long: " + tmpStr);      }    } else     if ((tmpStr=properties.getProperty("subEquipmentId")) != null) {      try {        dataTagCacheObject.setSubEquipmentId(Long.valueOf(tmpStr));        dataTagCacheObject.setProcessId(subEquipmentFacade.getProcessIdForAbstractEquipment(dataTagCacheObject.getSubEquipmentId()));      } catch (      NumberFormatException e) {        throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"NumberFormatException: " + "Unable to convert parameter \"subEquipmentId\" to Long: " + tmpStr);      }    }  }  if ((tmpStr=properties.getProperty("minValue")) != null) {    if (tmpStr.equals("null")) {      dataTagCacheObject.setMinValue(null);      dataTagUpdate.setMinValue(null);    } else {      Comparable comparableMin=(Comparable)TypeConverter.cast(tmpStr,dataTagCacheObject.getDataType());      dataTagCacheObject.setMinValue(comparableMin);      dataTagUpdate.setMinValue((Number)comparableMin);    }  }  if ((tmpStr=properties.getProperty("maxValue")) != null) {    if (tmpStr.equals("null")) {      dataTagCacheObject.setMaxValue(null);      dataTagUpdate.setMaxValue(null);    } else {      Comparable comparableMax=(Comparable)TypeConverter.cast(tmpStr,dataTagCacheObject.getDataType());      dataTagCacheObject.setMaxValue(comparableMax);      dataTagUpdate.setMaxValue((Number)comparableMax);    }  }  tmpStr=properties.getProperty("address");  if (tmpStr != null) {    DataTagAddress dataTagAddress=DataTagAddress.fromConfigXML(tmpStr);    dataTagCacheObject.setAddress(dataTagAddress);    setUpdateDataTagAddress(dataTagAddress,dataTagUpdate);  }  if (dataTag.getEquipmentId() != null)   dataTagUpdate.setEquipmentId(dataTag.getEquipmentId());  return dataTagUpdate;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonGroupGate_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200729,skillcaster,value0,skillname);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public int size(){  return bytes.length;}  }
class C{  public void print(PrintWriter output,NumberFormat format,int width){  output.println();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      String s=format.format(A[i][j]);      int padding=Math.max(1,width - s.length());      for (int k=0; k < padding; k++)       output.print(' ');      output.print(s);    }    output.println();  }  output.println();}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private void cleanUpChromeRecents(boolean fromDocument){  ActivityManager am=(ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.AppTask> taskList=am.getAppTasks();  PackageManager pm=getPackageManager();  for (int i=0; i < taskList.size(); i++) {    AppTask task=taskList.get(i);    String className=DocumentUtils.getTaskClassName(task,pm);    if (className == null)     continue;    RecentTaskInfo taskInfo=DocumentUtils.getTaskInfoFromTask(task);    if (taskInfo == null)     continue;    boolean skip=!fromDocument && DocumentActivity.isDocumentActivity(className);    if (!skip && (taskInfo.id != getTaskId())) {      taskList.get(i).finishAndRemoveTask();    }  }}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public static Map<String,Object> updateCreditCard(DispatchContext ctx,Map<String,Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_UPDATE","ACCOUNTING","_UPDATE");  if (result.size() > 0)   return result;  List<GenericValue> toBeStored=FastList.newInstance();  boolean isModified=false;  GenericValue paymentMethod=null;  GenericValue newPm=null;  GenericValue creditCard=null;  GenericValue newCc=null;  String paymentMethodId=(String)context.get("paymentMethodId");  try {    creditCard=EntityQuery.use(delegator).from("CreditCard").where("paymentMethodId",paymentMethodId).queryOne();    paymentMethod=EntityQuery.use(delegator).from("PaymentMethod").where("paymentMethodId",paymentMethodId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardUpdateReadFailure",locale) + e.getMessage());  }  if (creditCard == null || paymentMethod == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardUpdateWithPaymentMethodId",locale) + paymentMethodId);  }  if (!paymentMethod.getString("partyId").equals(partyId) && !security.hasEntityPermission("PAY_INFO","_UPDATE",userLogin) && !security.hasEntityPermission("ACCOUNTING","_UPDATE",userLogin)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardUpdateWithoutPermission",UtilMisc.toMap("partyId",partyId,"paymentMethodId",paymentMethodId),locale));  }  List<String> messages=FastList.newInstance();  String updatedCardNumber=StringUtil.removeSpaces((String)context.get("cardNumber"));  if (updatedCardNumber.startsWith("*")) {    String origCardNumber=creditCard.getString("cardNumber");    String origMaskedNumber="";    int cardLength=origCardNumber.length() - 4;    for (int i=0; i < cardLength; i++) {      origMaskedNumber=origMaskedNumber + "*";    }    origMaskedNumber=origMaskedNumber + origCardNumber.substring(cardLength);    if (updatedCardNumber.equals(origMaskedNumber)) {      updatedCardNumber=origCardNumber;    }  }  context.put("cardNumber",updatedCardNumber);  if (!UtilValidate.isCardMatch((String)context.get("cardType"),(String)context.get("cardNumber"))) {    messages.add(UtilProperties.getMessage(resource,"AccountingCreditCardNumberInvalid",UtilMisc.toMap("cardType",(String)context.get("cardType"),"validCardType",UtilValidate.getCardType((String)context.get("cardNumber"))),locale));  }  if (!UtilValidate.isDateAfterToday((String)context.get("expireDate"))) {    messages.add(UtilProperties.getMessage(resource,"AccountingCreditCardExpireDateBeforeToday",UtilMisc.toMap("expireDate",(String)context.get("expireDate")),locale));  }  if (messages.size() > 0) {    return ServiceUtil.returnError(messages);  }  newPm=GenericValue.create(paymentMethod);  toBeStored.add(newPm);  newCc=GenericValue.create(creditCard);  toBeStored.add(newCc);  String newPmId=null;  try {    newPmId=delegator.getNextSeqId("PaymentMethod");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardUpdateIdGenerationFailure",locale));  }  newPm.set("partyId",partyId);  newPm.set("fromDate",context.get("fromDate"),false);  newPm.set("description",context.get("description"));  if (newPm.get("thruDate") == null) {    newPm.set("thruDate",context.get("thruDate"));  }  newCc.set("companyNameOnCard",context.get("companyNameOnCard"));  newCc.set("titleOnCard",context.get("titleOnCard"));  newCc.set("firstNameOnCard",context.get("firstNameOnCard"));  newCc.set("middleNameOnCard",context.get("middleNameOnCard"));  newCc.set("lastNameOnCard",context.get("lastNameOnCard"));  newCc.set("suffixOnCard",context.get("suffixOnCard"));  newCc.set("cardType",context.get("cardType"));  newCc.set("cardNumber",context.get("cardNumber"));  newCc.set("expireDate",context.get("expireDate"));  GenericValue newPartyContactMechPurpose=null;  String contactMechId=(String)context.get("contactMechId");  if (UtilValidate.isNotEmpty(contactMechId) && !contactMechId.equals("_NEW_")) {    newCc.set("contactMechId",contactMechId);  }  if (!newCc.equals(creditCard) || !newPm.equals(paymentMethod)) {    newPm.set("paymentMethodId",newPmId);    newCc.set("paymentMethodId",newPmId);    newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));    isModified=true;  }  if (UtilValidate.isNotEmpty(contactMechId) && !contactMechId.equals("_NEW_")) {    String contactMechPurposeTypeId="BILLING_LOCATION";    GenericValue tempVal=null;    try {      List<GenericValue> allPCWPs=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).queryList();      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"contactFromDate","contactThruDate",true);      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"purposeFromDate","purposeThruDate",true);      tempVal=EntityUtil.getFirst(allPCWPs);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      tempVal=null;    }    if (tempVal == null) {      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));    }  }  if (isModified) {    if (newPartyContactMechPurpose != null)     toBeStored.add(newPartyContactMechPurpose);    paymentMethod.set("thruDate",now);    toBeStored.add(paymentMethod);    try {      delegator.storeAll(toBeStored);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardUpdateWriteFailure",locale) + e.getMessage());    }  } else {    result.put("paymentMethodId",paymentMethodId);    result.put("oldPaymentMethodId",paymentMethodId);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    if (contactMechId == null || !contactMechId.equals("_NEW_")) {      result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"AccountingNoChangesMadeNotUpdatingCreditCard",locale));    }    return result;  }  result.put("oldPaymentMethodId",paymentMethodId);  result.put("paymentMethodId",newCc.getString("paymentMethodId"));  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static <T>int linearSearch(List<? extends T> list,Comparator<T> comparator,T key,int initialGuess){  int guess=initialGuess;  if (guess >= list.size()) {    guess=list.size() - 1;  }  int comparison=comparator.compare(list.get(guess),key);  if (comparison == 0) {    return guess;  }  if (comparison < 0) {    guess++;    while (guess < list.size()) {      comparison=comparator.compare(list.get(guess),key);      if (comparison == 0) {        return guess;      }      if (comparison > 0) {        return -(guess + 1);      }      guess++;    }    return -(list.size() + 1);  } else {    guess--;    while (guess >= 0) {      comparison=comparator.compare(list.get(guess),key);      if (comparison == 0) {        return guess;      }      if (comparison < 0) {        return -(guess + 2);      }      guess--;    }    return -1;  }}  }
class C{  public List<SootMethod> mainsOfApplicationClasses(){  List<SootMethod> ret=new ArrayList<SootMethod>();  for (Iterator<SootClass> clIt=Scene.v().getApplicationClasses().iterator(); clIt.hasNext(); ) {    final SootClass cl=clIt.next();    SootMethod m=cl.getMethodUnsafe("void main(java.lang.String[])");    if (m != null) {      if (m.isConcrete())       ret.add(m);    }  }  return ret;}  }
class C{  public <T>T inject(Class<T> clazz,WebElement scope,FramePath framePath){  final ElementLocatorFactory elementLocatorFactory=new WebElementScopedLocatorFactory(webDriver,scope);  stack.push(new PageObjectContext(elementLocatorFactory,framePath));  try {    return injector.getInstance(clazz);  }  finally {    stack.pop();  }}  }
class C{  public Boolean deleteSupplier(EntityManager em,String id){  Boolean status=true;  Supplier supplier=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    supplier=em.find(Supplier.class,id);    em.remove(supplier);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during delete of Supplier. Detailed info: " + e);  }  return status;}  }
class C{  private boolean handleInternalComment(CommentTokenizer tokenizer,StringBuilder builder,Location location){  Token beginTag=tokenizer.pollNext();  boolean shouldFilter=Strings.isNullOrEmpty(beginTag.label) || labels != null && !labels.contains(beginTag.label);  while (tokenizer.hasNext()) {switch (tokenizer.peekNext().kind) {case BEGIN_INTERNAL_COMMENT:      if (!handleInternalComment(tokenizer,builder,location)) {        return false;      }    break;case TEXT:  if (shouldFilter) {    skipText(tokenizer);  } else {    appendText(tokenizer,builder);  }break;default :Token endTag=tokenizer.pollNext();if (!shouldFilter && endTag.text.endsWith(NEW_LINE)) {builder.append(NEW_LINE);}return true;}}collectError(location,beginTag.lineNum,"Did not find associated end tag for the begin tag '(--'");return false;}  }
class C{  public List<Object> splitByTitles(String text){  Map<String,Object> modelMap=FtlDocFileParser.makeObjectMap();  modelMap.put("type","title");  return splitByPat(text,strictTitlePat,modelMap,"origText","value");}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder();  builder.append(getClass().getSimpleName());  builder.append("[file='");  builder.append(getDirectory().getPath());  builder.append('\'');  if (fileFilter != null) {    builder.append(", ");    builder.append(fileFilter.toString());  }  builder.append(", listeners=");  builder.append(listeners.size());  builder.append("]");  return builder.toString();}  }
class C{  public int hashCode(){  return host.toLowerCase().hashCode() ^ port;}  }
class C{  public static boolean isValidNamespace(String namespaceCandidate){  return NAMESPACE_PATTERN.matcher(namespaceCandidate).matches();}  }
class C{  public PhysicalTable(@NotNull String name,@NotNull ZonedTimeGrain timeGrain,@NotNull Map<String,String> logicalToPhysicalColumnNames){  super(name,timeGrain);  this.availableIntervalsRef=new AtomicReference<>();  availableIntervalsRef.set(new HashMap<>());  this.workingIntervals=Collections.synchronizedMap(new HashMap<>());  this.logicalToPhysicalColumnNames=Collections.unmodifiableMap(logicalToPhysicalColumnNames);  this.physicalToLogicalColumnNames=Collections.unmodifiableMap(this.logicalToPhysicalColumnNames.entrySet().stream().collect(StreamUtils.toLinkedMap(null,null)));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXCHANGE_CANT_ASK_WHEN_HE_IS_ASKED_QUESTION(String value0){  return new SM_SYSTEM_MESSAGE(1300356,value0);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private void showAtCalculatedPosition(){  if (mAnchorBelow) {    showAtLocation(mAnchorView.getRootView(),Gravity.TOP | Gravity.START,mXPosition,mYPosition);  } else {    showAtLocation(mAnchorView.getRootView(),Gravity.BOTTOM | Gravity.START,mXPosition,mYPosition);  }}  }
class C{  private boolean references(QueryTableData dest){  QueryTableData source=this;  while (source != null) {    if (source.equals(dest))     return true;    source=source.getJoinTable();  }  return false;}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  public IntObjectHashMap(int initialCapacity){  this(initialCapacity,defaultMinLoadFactor,defaultMaxLoadFactor);}  }
class C{  public void initialiseDoubleValues(int size){  if (size < 1) {    throw new IllegalArgumentException("Invalid array size");  }  doubleValues=new double[size];}  }
class C{  @Override public boolean equals(final Object other){  boolean ret=false;  if (this == other) {    ret=true;  } else   if (other instanceof BigFraction) {    BigFraction rhs=((BigFraction)other).reduce();    BigFraction thisOne=this.reduce();    ret=thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);  }  return ret;}  }
class C{  public boolean dump_answer(){  return soot.PhaseOptions.getBoolean(options,"dump-answer");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200994,skilltarget,num0,skillcaster,skillname);}  }
class C{  @Override public void startGroup(Augmentations augmentations) throws XNIException {}  }
class C{  public Socket(String uri,Options opts) throws URISyntaxException {  this(uri == null ? null : Uri.parse(uri),opts);}  }
class C{  public boolean isSpawned(){  return getPosition().isSpawned();}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_BID_SUCCESS(int address){  return new SM_SYSTEM_MESSAGE(1401265,address);}  }
class C{  public static void moveFile(File srcFile,File destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.exists()) {    throw new FileNotFoundException("Source '" + srcFile + "' does not exist");  }  if (srcFile.isDirectory()) {    throw new IOException("Source '" + srcFile + "' is a directory");  }  if (destFile.exists()) {    throw new FileExistsException("Destination '" + destFile + "' already exists");  }  if (destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' is a directory");  }  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile,destFile);    if (!srcFile.delete()) {      FileUtils.deleteQuietly(destFile);      throw new IOException("Failed to delete original file '" + srcFile + "' after copy to '"+ destFile+ "'");    }  }}  }
class C{  public static void decode(File source,File target) throws IOException {  InputStream inputStream=null;  OutputStream outputStream=null;  try {    inputStream=new FileInputStream(source);    outputStream=new FileOutputStream(target);    decode(inputStream,outputStream);  }  finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      Throwable t) {        ;      }    }    if (inputStream != null) {      try {        inputStream.close();      } catch (      Throwable t) {        ;      }    }  }}  }
class C{  @Override public long limit(){  try {    return length() >>> 2;  } catch (  IOException e) {    Basic.caught(e);    return 0;  }}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  protected void cancelHeightAnimation(){  cancelAnimation(this,Property.PANEL_HEIGHT);}  }
class C{  public void init(String URItoPolicyFile,String containerName) throws IOException, SAXException, Exception {  try {    FileInputStream fis=new FileInputStream(URItoPolicyFile);    byte[] byteArray=new byte[fis.available()];    fis.read(byteArray);    byteArray=m_encrypter.dencrypt(byteArray);    filterInfo=(FiltersInfo)IOUtils.objectFromByteBuffer(byteArray);    fis.close();    if (_logger.isLoggable(Level.CONFIG)) {      _logger.log(Level.CONFIG,"Loaded users security permissions file from <" + URItoPolicyFile + ">");    }  } catch (  FileNotFoundException ex) {    if (_logger.isLoggable(Level.WARNING)) {      _logger.log(Level.WARNING,"Failed to load users security permissions file: " + ex.getMessage());    }  }catch (  IOException ex) {    if (_logger.isLoggable(Level.WARNING)) {      _logger.log(Level.WARNING,"Failed to load users security permissions file: " + ex.getMessage());    }  }  init(containerName);}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  public static GridData createHVFillGridData(){  return createHVFillGridData(1);}  }
class C{  private void readParameterAnnotations(int v,final String desc,final char[] buf,final boolean visible,final MethodVisitor mv){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,buf),visible);      v=readAnnotationValues(v + 2,buf,true,av);    }  }}  }
class C{  public void bind(Activity activity){  List<IBinding> bindings=getViewBinder(activity).bind(activity);  Set<IBinding> _bindings=getBindings(activity.getClass());  _bindings.addAll(bindings);}  }
class C{  public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,skipIds);}  }
class C{  public static boolean isConfigured(){  return ds != null;}  }
class C{  public MessagesGetQuery timeOffset(Integer value){  return unsafeParam("time_offset",value);}  }
class C{  private static String format(double value){  return String.format("%s%s",SCALE_PREFIX,NumberFormat.getIntegerInstance().format((int)value));}  }
class C{  public void init$Children(){}  }
class C{  public final static int insertOrUpdate(String table,String where,Object[] args,V sets){  int i=0;  try {    if (exists(table,where,args)) {      i=updateTable(table,where,args,sets);    } else {      i=insertTable(table,sets);    }  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return i;}  }
class C{  private static Set<String> parseDelimitedParameters(Set<String> parametersToParse){  Set<String> parsedParameters=new LinkedHashSet<>();  if (parametersToParse != null && !parametersToParse.isEmpty()) {    for (    String parameterToParse : parametersToParse) {      parsedParameters.addAll(Arrays.asList(parameterToParse.split(JSON_API_PARAM_DELIMITER)));    }  }  return parsedParameters;}  }
class C{  private void DrawPrimitive(DrawSphere s,World w) throws Exception {  XMLBlockState blockType=new XMLBlockState(s.getType(),s.getColour(),null,s.getVariant());  if (!blockType.isValid())   throw new Exception("Unrecognised block type: " + s.getType().value());  int radius=s.getRadius();  for (int x=s.getX() - radius; x <= s.getX() + radius; x++) {    for (int y=s.getY() - radius; y <= s.getY() + radius; y++) {      for (int z=s.getZ() - radius; z <= s.getZ() + radius; z++) {        if ((z - s.getZ()) * (z - s.getZ()) + (y - s.getY()) * (y - s.getY()) + (x - s.getX()) * (x - s.getX()) <= (radius * radius)) {          BlockPos pos=new BlockPos(x,y,z);          setBlockState(w,pos,blockType);          List<Entity> entities=w.getEntitiesWithinAABBExcludingEntity(null,new AxisAlignedBB(pos,pos).expand(0.5,0.5,0.5));          for (          Entity ent : entities)           if (!(ent instanceof EntityPlayer))           w.removeEntity(ent);        }      }    }  }}  }
class C{  public String toString(){  return "ConnectionRelativeTime[" + time + "]";}  }
class C{  public StatelessChunkListDataIterator(SQLQuery sqlQuery,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int chunkSize){  super(sqlQuery,sessionFactory,fetchSize,performOrderById,chunkSize);}  }
class C{  private long readLines(RandomAccessFile reader) throws IOException {  StringBuilder sb=new StringBuilder();  long pos=reader.getFilePointer();  long rePos=pos;  int num;  boolean seenCR=false;  while (run && ((num=reader.read(inbuf)) != -1)) {    for (int i=0; i < num; i++) {      byte ch=inbuf[i];switch (ch) {case '\n':        seenCR=false;      listener.handle(sb.toString());    sb.setLength(0);  rePos=pos + i + 1;break;case '\r':if (seenCR) {sb.append('\r');}seenCR=true;break;default :if (seenCR) {seenCR=false;listener.handle(sb.toString());sb.setLength(0);rePos=pos + i + 1;}sb.append((char)ch);}}pos=reader.getFilePointer();}reader.seek(rePos);return rePos;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_TO_YOU(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300391,value0,value1);}  }
class C{  private TemplateDruidQuery buildOuterQuery(String metricDictionary,MetricField sourceMetric,TemplateDruidQuery innerQuery){  Aggregation sum=createSummingAggregator(sourceMetric);  Set<Aggregation> outerAggs=new LinkedHashSet<>(Arrays.asList(sum,COUNT_OUTER));  FieldAccessorPostAggregation sumPost=new FieldAccessorPostAggregation(sum);  PostAggregation average=new ArithmeticPostAggregation(metricDictionary,DIVIDE,Arrays.asList(sumPost,COUNT_FIELD_OUTER));  Set<PostAggregation> outerPostAggs=Collections.singleton(average);  return new TemplateDruidQuery(outerAggs,outerPostAggs,innerQuery);}  }
class C{  public AdsGetTargetingStatsQuery linkDomain(String value){  return unsafeParam("link_domain",value);}  }
class C{  public static String formatQuantity(int quantity){  return formatQuantity((double)quantity);}  }
class C{  public void collapse(TreePath[] paths){  for (  TreePath path : paths) {    this.collapse((DefaultMutableTreeNode)path.getLastPathComponent());  }}  }
class C{  private double drawBitmap(Canvas canvas){  double viewWidth=canvas.getWidth();  double viewHeight=canvas.getHeight();  double imageWidth=mBitmap.getWidth();  double imageHeight=mBitmap.getHeight();  double scale=Math.min(viewWidth / imageWidth,viewHeight / imageHeight);  Rect destBounds=new Rect(0,0,(int)(imageWidth * scale),(int)(imageHeight * scale));  canvas.drawBitmap(mBitmap,null,destBounds,null);  return scale;}  }
class C{  public ContextReporter(ChromeActivity activity,GSAContextReportDelegate controller){  mActivity=activity;  mDelegate=controller;  mContextInUse=new AtomicBoolean(false);  Log.d(TAG,"Created a new ContextReporter");}  }
class C{  public boolean hasRegion(){  return qualifier.getRegion() != null && !FAKE_VALUE.equals(qualifier.getRegion());}  }
class C{  public Authentication(String mobile){  this.mobile=mobile;}  }
class C{  public SphericalPolygonsSet(final double tolerance){  super(tolerance);}  }
class C{  public void ping() throws RemoteException {  _remoteSpaceProxy.ping();}  }
class C{  private void rotateLeft(Node<K,V> root){  Node<K,V> left=root.left;  Node<K,V> pivot=root.right;  Node<K,V> pivotLeft=pivot.left;  Node<K,V> pivotRight=pivot.right;  root.right=pivotLeft;  if (pivotLeft != null) {    pivotLeft.parent=root;  }  replaceInParent(root,pivot);  pivot.left=root;  root.parent=pivot;  root.height=Math.max(left != null ? left.height : 0,pivotLeft != null ? pivotLeft.height : 0) + 1;  pivot.height=Math.max(root.height,pivotRight != null ? pivotRight.height : 0) + 1;}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  @Override public ASNotationDeclaration createASNotationDeclaration(String namespaceURI,String name,String systemId,String publicId) throws DOMException {  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}  }
class C{  String internalsprintf(Object s){  String s2="";  if (conversionCharacter == 's' || conversionCharacter == 'S')   s2=printSFormat(s.toString()); else   throw new IllegalArgumentException("Cannot format a String with a format using" + " a " + conversionCharacter + " conversion character.");  return s2;}  }
class C{  public boolean isCompleteQuest(int questId){  QuestState qs=getQuestStateList().getQuestState(questId);  if (qs == null) {    return false;  }  return qs.getStatus() == QuestStatus.COMPLETE;}  }
class C{  public static long computeStartSequenceId(List<LogSegmentMetadata> logSegmentDescList,LogSegmentMetadata segment) throws UnexpectedException {  long startSequenceId=0L;  for (  LogSegmentMetadata metadata : logSegmentDescList) {    if (metadata.getLogSegmentSequenceNumber() >= segment.getLogSegmentSequenceNumber()) {      continue;    } else     if (metadata.getLogSegmentSequenceNumber() < (segment.getLogSegmentSequenceNumber() - 1)) {      break;    }    if (metadata.isInProgress()) {      throw new UnexpectedException("Should not complete log segment " + segment.getLogSegmentSequenceNumber() + " since it's previous log segment is still inprogress : "+ logSegmentDescList);    }    if (metadata.supportsSequenceId()) {      startSequenceId=metadata.getStartSequenceId() + metadata.getRecordCount();    }  }  return startSequenceId;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_JOIN_ERROR_MAX_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400985,value0);}  }
class C{  void initFromCameraParameters(OpenCamera camera){  Camera.Parameters parameters=camera.getCamera().getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  int displayRotation=display.getRotation();  int cwRotationFromNaturalToDisplay;switch (displayRotation) {case Surface.ROTATION_0:    cwRotationFromNaturalToDisplay=0;  break;case Surface.ROTATION_90:cwRotationFromNaturalToDisplay=90;break;case Surface.ROTATION_180:cwRotationFromNaturalToDisplay=180;break;case Surface.ROTATION_270:cwRotationFromNaturalToDisplay=270;break;default :if (displayRotation % 90 == 0) {cwRotationFromNaturalToDisplay=(360 + displayRotation) % 360;} else {throw new IllegalArgumentException("Bad rotation: " + displayRotation);}}Log.i(TAG,"Display at: " + cwRotationFromNaturalToDisplay);int cwRotationFromNaturalToCamera=camera.getOrientation();Log.i(TAG,"Camera at: " + cwRotationFromNaturalToCamera);if (camera.getFacing() == CameraFacing.FRONT) {cwRotationFromNaturalToCamera=(360 - cwRotationFromNaturalToCamera) % 360;Log.i(TAG,"Front camera overriden to: " + cwRotationFromNaturalToCamera);}cwRotationFromDisplayToCamera=(360 + cwRotationFromNaturalToCamera - cwRotationFromNaturalToDisplay) % 360;Log.i(TAG,"Final display orientation: " + cwRotationFromDisplayToCamera);if (camera.getFacing() == CameraFacing.FRONT) {Log.i(TAG,"Compensating rotation for front camera");cwNeededRotation=(360 - cwRotationFromDisplayToCamera) % 360;} else {cwNeededRotation=cwRotationFromDisplayToCamera;}Log.i(TAG,"Clockwise rotation from display to camera: " + cwNeededRotation);Point theScreenResolution=new Point();display.getSize(theScreenResolution);screenResolution=theScreenResolution;Log.i(TAG,"Screen resolution in current orientation: " + screenResolution);cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Camera resolution: " + cameraResolution);bestPreviewSize=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Best available preview size: " + bestPreviewSize);boolean isScreenPortrait=screenResolution.x < screenResolution.y;boolean isPreviewSizePortrait=bestPreviewSize.x < bestPreviewSize.y;if (isScreenPortrait == isPreviewSizePortrait) {previewSizeOnScreen=bestPreviewSize;} else {previewSizeOnScreen=new Point(bestPreviewSize.y,bestPreviewSize.x);}Log.i(TAG,"Preview size on screen: " + previewSizeOnScreen);}  }
class C{  @SuppressWarnings("unchecked") private T[] buildArray(final int length){  return (T[])Array.newInstance(field.getRuntimeClass(),length);}  }
class C{  @Override public boolean equals(Object other){  if (super.equals(other))   return true;  LOGGER.info("Retrying bucket comparison, maybe allocation percentages have floating point inaccuracies.");  if (!this.getClass().isInstance(other)) {    return false;  }  for (  Field field : this.getClass().getFields()) {    if (!this.getSerializationStrategy().shouldSkipField(new FieldAttributes(field))) {      try {        boolean thisFieldEquals=Objects.equals(field.get(this),field.get(other));        if (!thisFieldEquals && field.getName().equals("allocationPercent")) {          LOGGER.debug("Retrying comparison of allocation percentages: " + this.allocationPercent + " and "+ ((Bucket)other).allocationPercent);          String allocThis=String.valueOf(this.allocationPercent);          String allocOther=String.valueOf(((Bucket)other).allocationPercent);          allocThis=allocThis.substring(0,Math.min(allocThis.indexOf(".") + 6,allocThis.length()));          allocOther=allocOther.substring(0,Math.min(allocOther.indexOf(".") + 6,allocOther.length()));          LOGGER.debug("\tComparing only " + allocThis + " and "+ allocOther);          thisFieldEquals=Objects.equals(allocThis,allocOther);          LOGGER.debug("\tResult: " + (thisFieldEquals ? "" : "not ") + "equal.");        }        if (!thisFieldEquals) {          return false;        }      } catch (      IllegalAccessException ignored) {      }    }  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_HEAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201047,num0,skillname);}  }
class C{  public MeCollectionsView(Activity a){  super(a);  this.initialize(a);}  }
class C{  private void changeToFragment(@NonNull Fragment fragment){  getSupportFragmentManager().beginTransaction().setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).replace(R.id.shaky_fragment_container,fragment).addToBackStack(null).commit();}  }
class C{  private boolean removeLegionMember(String charName,boolean kick,String playerName){  LegionMemberEx legionMember=getLegionMemberEx(charName);  if (legionMember == null) {    log.error("Char name does not exist in legion member table: " + charName);    return false;  }  deleteLegionMemberFromDB(legionMember);  Player player=world.findPlayer(charName);  if (player != null) {    PacketSendUtility.broadcastPacket(player,new SM_LEGION_UPDATE_TITLE(player.getObjectId(),0,"",2),true);  }  if (kick) {    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_LEAVE_MEMBER(1300247,legionMember.getObjectId(),playerName,legionMember.getName()));  } else {    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_LEAVE_MEMBER(900699,legionMember.getObjectId(),charName));  }  return true;}  }
class C{  public boolean canBatch(Lease lease){  if (!(super.canBatch(lease) && lease instanceof RemoteMethodControl)) {    return false;  }  return ConstrainableProxyUtil.equivalentConstraints(((RemoteMethodControl)lease).getConstraints(),ConstrainableProxyUtil.translateConstraints(constraints,ConstrainableRegistrarLeaseMap.methodMappings),ConstrainableRegistrarLeaseMap.methodMappings);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set fillColor=");  Color color=null;  if (np.peekMatchIgnoreCase("null"))   np.matchIgnoreCase("null"); else   color=np.getColor();  np.matchIgnoreCase(";");  if (getViewer() instanceof GraphView) {    boolean changed=false;    GraphView viewer=(GraphView)getViewer();    for (    Node v : viewer.getSelectedNodes()) {      viewer.setBackgroundColor(v,color);      changed=true;    }    if (changed) {      viewer.repaint();    }  }}  }
class C{  public static String decrypt(String input){  if (encryptionService == null || input == null || !input.startsWith(ENCRYPTION_PREFIX)) {    return input;  }  return encryptionService.decrypt(input.replaceFirst(ENCRYPTION_PREFIX,""));}  }
class C{  public static boolean isFileNewer(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileNewer(file,date.getTime());}  }
class C{  public ListIterator<E> listIterator(){  return this.listIterator(0);}  }
class C{  public UCSReader(InputStream inputStream,int size,short encoding){  this(inputStream,new byte[size],encoding);}  }
class C{  public ConfigurationGraph(Map<Configuration,String> configurationNamePairs,Consumer<String> nameValidator){  moduleConfigurations=new HashMap<>();  moduleDependencies=new LinkedHashMap<>();  for (  Map.Entry<Configuration,String> configEntry : configurationNamePairs.entrySet()) {    addVertex(configEntry.getKey(),configEntry.getValue(),nameValidator);  }}  }
class C{  private void drawScale(Graphics2D gc,double drawWidth,int boxValue){  int x=20;  int y=topMargin - 30;  Rectangle rect=new Rectangle(x,y,(int)drawWidth,(int)drawWidth);  gc.setColor(Color.LIGHT_GRAY);  gc.fill(rect);  gc.setColor(Color.DARK_GRAY);  gc.draw(rect);  gc.setFont(getFont(ChartViewer.FontKeys.LegendFont.toString()));  gc.drawString(String.format(" = %,d",boxValue),(int)(x + rect.getWidth()),(int)(y + rect.getHeight()));}  }
class C{  private void updateNotification(int id,Notification notification){  mNotificationManager.notify(NOTIFICATION_NAMESPACE,id,notification);}  }
class C{  private boolean processRowToNextStep() throws KettleException {  if (null == this.sortDataRows) {    LOGGER.info("Record Processed For table: " + meta.getTabelName());    LOGGER.info("Number of Records was Zero");    String logMessage="Summary: Carbon Sort Key Step: Read: " + 0 + ": Write: "+ 0;    LOGGER.info(logMessage);    putRow(data.getOutputRowMeta(),new Object[0]);    setOutputDone();    return false;  }  try {    this.sortDataRows.startSorting();    this.intermediateFileMerger.finish();    LOGGER.info("Record Processed For table: " + meta.getTabelName());    String logMessage="Summary: Carbon Sort Key Step: Read: " + readCounter + ": Write: "+ writeCounter;    LOGGER.info(logMessage);    putRow(data.getOutputRowMeta(),new Object[0]);    setOutputDone();    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordSortRowsStepTotalTime(meta.getPartitionID(),System.currentTimeMillis());    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordDictionaryValuesTotalTime(meta.getPartitionID(),System.currentTimeMillis());    return false;  } catch (  CarbonSortKeyAndGroupByException e) {    throw new KettleException(e);  }}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public GroupsEditQuery events(Boolean value){  return unsafeParam("events",value);}  }
class C{  public static BigInteger sizeOfDirectoryAsBigInteger(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return BigInteger.ZERO;  }  BigInteger size=BigInteger.ZERO;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size=size.add(BigInteger.valueOf(sizeOf(file)));      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public static String appendVersionSuffix(String apiVersion,String versionSuffix){  return Strings.isNullOrEmpty(versionSuffix) ? apiVersion : apiVersion + versionSuffix;}  }
class C{  public AppsSendRequestQuery name(String value){  return unsafeParam("name",value);}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  public void onNewIntentWithGesture(Intent intent){  mIntentToken=new byte[32];  mSecureRandom.nextBytes(mIntentToken);  intent.putExtra(EXTRA_USER_GESTURE_TOKEN,mIntentToken);  mUri=IntentHandler.getUrlFromIntent(intent);}  }
class C{  public static final Date toDate(float JD){  float Z=(normalizedJulian(JD)) + 0.5f;  float W=(int)((Z - 1867216.25f) / 36524.25f);  float X=(int)(W / 4f);  float A=Z + 1 + W - X;  float B=A + 1524;  float C=(int)((B - 122.1) / 365.25);  float D=(int)(365.25f * C);  float E=(int)((B - D) / 30.6001);  float F=(int)(30.6001f * E);  int day=(int)(B - D - F);  int month=(int)(E - 1);  if (month > 12) {    month=month - 12;  }  int year=(int)(C - 4715);  if (month > 2) {    year--;  }  Calendar c=Calendar.getInstance();  c.set(Calendar.YEAR,year);  c.set(Calendar.MONTH,month - 1);  c.set(Calendar.DATE,day);  return c.getTime();}  }
class C{  default boolean hasDataForTls(){  return false;}  }
class C{  public Value newExtension(FilterListener listener,Value target,Value args){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public <T>String makeStringLiteralSQ(T value){  return (value != null) ? ("'" + makeStringValueSQ(value) + "'") : this.literalSQGeneralDefault;}  }
class C{  public UsersGetFollowersQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){  super(client,"users.getFollowers",GetFollowersFieldsResponse.class);  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public boolean checkRace(Race playerRace){  ItemTemplate template=DataManager.ITEM_DATA.getItemTemplate(id);  return template.getRace() == Race.PC_ALL && (race == null || race == playerRace) || template.getRace() != Race.PC_ALL && template.getRace() == playerRace;}  }
class C{  public synchronized boolean isPressed(){  return this.pressed;}  }
class C{  @Override public boolean isPopulating(){  return populating;}  }
class C{  public void zoomIn(){  this.scale*=0.5;}  }
class C{  public void start(){  eventLogThread.start();  LOGGER.info("Started " + eventLogThread.getName() + " with ID "+ eventLogThread.getId()+ ".");}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public void clearBasicAuth(){  this.httpClient.getCredentialsProvider().clear();}  }
class C{  private static void destroyDir(File dir,Collection errors) throws IOException {  if (!dir.isDirectory()) {    handleError(errors,dir);    return;  }  String[] names=dir.list();  for (int i=0; i < names.length; i++) {    File file=new File(dir,names[i]);    if (!file.delete())     destroyDir(file,errors);  }  if (!dir.delete())   handleError(errors,dir);}  }
class C{  private String nextTokenAsString() throws XNIException {  String s=getTokenString(nextToken());  if (s == null)   reportError("XPointerElementSchemeProcessingError",null);  return s;}  }
class C{  public byte[] download_file1(String file_id,long file_offset,long download_bytes) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(file_id,parts);  if (this.errno != 0) {    return null;  }  return this.download_file(parts[0],parts[1],file_offset,download_bytes);}  }
class C{  protected void initComparator(){  if (Comparator == null)   Comparator=new NGramCachedGraphComparator();}  }
class C{  @Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){  super.onViewCreated(view,savedInstanceState);  init(view);  setInit();  setData();}  }
class C{  public static <K,V>HashMap<K,V> hashMap(){  return new HashMap<K,V>();}  }
class C{  public MemoidOne(Function<? super Input,? extends Output> fn){  this(fn,null);}  }
class C{  public void centerViewPort(final float[] transformedPts,final View view){  Matrix save=new Matrix();  save.set(mMatrixTouch);  final float x=transformedPts[0] - offsetLeft();  final float y=transformedPts[1] - offsetTop();  save.postTranslate(-x,-y);  refresh(save,view,true);}  }
class C{  public void clear(){  _entryInfos.clear();}  }
class C{  protected MarketGetByIdQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public boolean isApplicable(){  ChartViewer viewer=(ChartViewer)getViewer();  return (viewer.isSeriesTabSelected() && viewer.getChartData().getChartSelection().getSelectedSeries().size() > 0) || (!viewer.isSeriesTabSelected() && viewer.getChartData().getChartSelection().getSelectedClasses().size() > 0);}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  public void sendResumeEvent(PluginResult resumeEvent){synchronized (messageChannelLock) {    if (messageChannel != null) {      sendEventMessage(resumeEvent);    } else {      this.pendingResume=resumeEvent;    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InvulnerableWing_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201218,skilltarget,skillname);}  }
class C{  public String splitAllophoneString(String allophoneString){  List<String> phones=splitIntoAllophoneList(allophoneString,true);  StringBuilder pronunciation=new StringBuilder();  for (  String a : phones) {    if (pronunciation.length() > 0)     pronunciation.append(" ");    pronunciation.append(a);  }  return pronunciation.toString();}  }
class C{  boolean waitForFileDone(){synchronized (waitFileSync) {    try {      while (!fileDone)       waitFileSync.wait();    } catch (    Exception e) {    }  }  return fileSuccess;}  }
class C{  public boolean bdd(){  return soot.PhaseOptions.getBoolean(options,"bdd");}  }
class C{  public static synchronized void removeInstance(String providerName){  scanProviders.remove(providerName);}  }
class C{  public GraphSimilarity(){  this.ValueSimilarity=0.0;  this.ContainmentSimilarity=0.0;  this.SizeSimilarity=0.0;}  }
class C{  @Override public Loggable convertToLogged(Tag tag){  TagShortTermLog dtSTLog=new TagShortTermLog();  dtSTLog.setTagId(tag.getId().longValue());  dtSTLog.setTagName(tag.getName());  if (tag.getValue() != null) {    try {      dtSTLog.setTagValue(mapper.writeValueAsString(tag.getValue()));    } catch (    JsonProcessingException e) {      log.error("Could nor parse the invalid states of the tag " + tag.getId() + " into a String.",e);    }  } else {    dtSTLog.setTagValue(null);  }  dtSTLog.setTagValueDesc(tag.getValueDescription());  dtSTLog.setTagDataType(tag.getDataType());  if (tag instanceof DataTag || tag instanceof ControlTag) {    dtSTLog.setSourceTimestamp(((DataTag)tag).getSourceTimestamp());    dtSTLog.setDaqTimestamp(((DataTag)tag).getDaqTimestamp());  }  dtSTLog.setServerTimestamp(tag.getCacheTimestamp());  int code=0;  if (tag.getDataTagQuality() != null) {    for (    TagQualityStatus status : tag.getDataTagQuality().getInvalidQualityStates().keySet()) {      code=(int)(code + Math.pow(2,status.getCode()));    }  }  dtSTLog.setTagQualityCode(code);  try {    dtSTLog.setTagQualityDesc(mapper.writeValueAsString(tag.getDataTagQuality().getInvalidQualityStates()));  } catch (  JsonProcessingException e) {    log.error("Could nor parse the invalid states of the tag " + tag.getId() + " into a String.",e);  }  if (dtSTLog.getTagQualityDesc() != null && dtSTLog.getTagQualityDesc().length() > MAX_LENGTH) {    dtSTLog.setTagQualityDesc("{\"UNKNOWN_REASON\":\"Invalid quality String was too long: unable to store in ShortTermLog table.\"}");  }  dtSTLog.setTagDir("I");  dtSTLog.setTagMode(tag.getMode());  return dtSTLog;}  }
class C{  @Override public EndpointStatus join(InetSocketAddress endpoint,Map<String,InetSocketAddress> additionalEndpoints,int shardId) throws Group.JoinException, InterruptedException {  throw new UnsupportedOperationException("NameServerSet does not support join");}  }
class C{  public XPathFunctionException(Throwable cause){  super(cause);}  }
class C{  public RequestHandle delete(Context context,String url,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(url);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  public boolean write(byte[] audioData){  return write(audioData,0,audioData.length);}  }
class C{  public NegExpr newNegExpr(Value op){  return new GNegExpr(op);}  }
class C{  private static boolean isHandoff(AndroidFirstRunPersistentData persistentData){  if (InstallerData.exists()) {    if (!persistentData.isSdkUpToDate() || !persistentData.isSameTimestamp(InstallerData.get().getTimestamp())) {      return InstallerData.get().isCurrentVersion();    }  }  return false;}  }
class C{  public ColorTransitioner(final List<ColorPoint> colorPoints){  if (colorPoints == null) {    throw new NullPointerException("Colors can't be null");  }  if (colorPoints.size() == 0) {    throw new IllegalArgumentException("ColorTransitioner must have at least one column");  }  colorPoints.sort(null);  if (colorPoints.get(0).point != 0 || colorPoints.get(colorPoints.size() - 1).point != 1) {    throw new IllegalArgumentException("The first and the last color must be at point 0 and point 1.");  }  this.colors=colorPoints;}  }
class C{  @Override public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  if (fPerformValidation && fDTDGrammar != null && fGrammarBucket.getStandalone()) {    checkStandaloneEntityRef(name,fDTDGrammar,fEntityDecl,fErrorReporter);  }  if (fDTDGrammar != null)   fDTDGrammar.startParameterEntity(name,identifier,encoding,augs);  if (fDTDHandler != null) {    fDTDHandler.startParameterEntity(name,identifier,encoding,augs);  }}  }
class C{  public AccountSetInfoQuery value(String value){  return unsafeParam("value",value);}  }
class C{  public void init(){  LOG.d(TAG,"init()");  isInitialized=true;  this.onPause(false);  this.onDestroy();  pluginMap.clear();  this.startupPlugins();}  }
class C{  @Override public void comment(XMLString text,Augmentations augmentations) throws XNIException {}  }
class C{  public InlineFeaturePanel(InlineFeatureUpdateInterface parent,int noOfRows){  model=new InLineFeatureModel(parent);  createUI(noOfRows);}  }
class C{  @Nullable public ProtoElement resolve(String id){  TypeRef type=lookupType(id);  if (type != null) {    if (type.isMessage()) {      return type.getMessageType();    }    if (type.isEnum()) {      return type.getEnumType();    }    throw new IllegalStateException("Unexpected type resolution.");  }  Interface iface=lookupInterface(id);  if (iface != null) {    return iface;  }  int i=id.lastIndexOf('.');  if (i < 0) {    return null;  }  String lastName=id.substring(i + 1);  id=id.substring(0,i);  ProtoElement parent=resolve(id);  if (parent != null) {    if (parent instanceof Interface) {      return ((Interface)parent).lookupMethod(lastName);    }    if (parent instanceof MessageType) {      return ((MessageType)parent).lookupField(lastName);    }    if (parent instanceof EnumType) {      return ((EnumType)parent).lookupValue(lastName);    }  }  return null;}  }
class C{  public boolean castNeverFails(Type src,Type dst){  return typeManager.castNeverFails(src,dst);}  }
class C{  private void initExpirationListener(View shareView){  mOnExpirationDateInteractionListener=new OnExpirationDateInteractionListener();  ((SwitchCompat)shareView.findViewById(R.id.shareViaLinkExpirationSwitch)).setOnCheckedChangeListener(mOnExpirationDateInteractionListener);  shareView.findViewById(R.id.shareViaLinkExpirationLabel).setOnClickListener(mOnExpirationDateInteractionListener);  shareView.findViewById(R.id.shareViaLinkExpirationValue).setOnClickListener(mOnExpirationDateInteractionListener);}  }
class C{  public ComponentCursor queryComponentCreated(long id){  return mHelper.queryComponentCreated(id);}  }
class C{  private void populateParameterDefinition(Parameter<?> parameter,ProcessFunctionParameterValue value){  if (parameter != null) {    value.name=parameter.getName();    if (parameter.getType().isEnum()) {      List<?> enumList=Arrays.asList(parameter.getType().getEnumConstants());      value.enumValueList=new ArrayList<String>();      for (      Object enumValue : enumList) {        String stringValue=enumValue.toString();        value.enumValueList.add(stringValue);      }      value.type=StringBuilder.class;      if (parameter.getDefaultValue() != null) {        value.value=ff.literal(parameter.getDefaultValue().toString());      }    } else {      value.type=parameter.getType();      if (parameter.getDefaultValue() != null) {        Object defaultValue=parameter.getDefaultValue();        value.value=ff.literal(defaultValue);      }    }    value.optional=!parameter.isRequired();    value.dataType=parameter.getType().getSimpleName();    value.minOccurences=parameter.getMinOccurs();    value.maxOccurences=parameter.getMaxOccurs();  }}  }
class C{  static Object find(String factoryId,String fallbackClassName) throws ConfigurationError {  dPrint("find factoryId =" + factoryId);  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      dPrint("found system property, value=" + systemProp);      return newInstance(systemProp,null,true);    }  } catch (  SecurityException se) {    if (debug)     se.printStackTrace();  }  try {    String factoryClassName=null;    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          String configFile=ss.getSystemProperty("java.home") + File.separator + "lib"+ File.separator+ "jaxp.properties";          File f=new File(configFile);          firstTime=false;          if (ss.doesFileExist(f)) {            dPrint("Read properties file " + f);            cacheProps.load(ss.getFileInputStream(f));          }        }      }    }    factoryClassName=cacheProps.getProperty(factoryId);    if (factoryClassName != null) {      dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);      return newInstance(factoryClassName,null,true);    }  } catch (  Exception ex) {    if (debug)     ex.printStackTrace();  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  dPrint("loaded from fallback value: " + fallbackClassName);  return newInstance(fallbackClassName,null,true);}  }
class C{  private Names(){}  }
class C{  public String stacktrace(){  return stacktrace;}  }
class C{  private static void paintConstraint(NlGraphics graphics,DependencyGraph.Constraint constraint,Set<DependencyGraph.Constraint> allConstraints,TextDirection textDirection){  DependencyGraph.ViewData source=constraint.from;  DependencyGraph.ViewData target=constraint.to;  NlComponent sourceNode=source.node;  NlComponent targetNode=target.node;  if (sourceNode == targetNode) {    return;  }  Rectangle sourceBounds=getBounds(sourceNode);  Rectangle targetBounds=getBounds(targetNode);  paintConstraint(graphics,constraint.type,sourceNode,sourceBounds,targetNode,targetBounds,allConstraints,false,textDirection);}  }
class C{  public IterationEvent(final Object source,final int iterations){  super(source);  this.iterations=iterations;}  }
class C{  public static boolean contentEquals(File file1,File file2) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.length() != file2.length()) {    return false;  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  InputStream input1=null;  InputStream input2=null;  try {    input1=new FileInputStream(file1);    input2=new FileInputStream(file2);    return IOUtils.contentEquals(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public SVNCompareEditorInput(ResourceEditionNode left,ResourceEditionNode right){  this(left,right,null);}  }
class C{  public RegulaFalsiSolver(final double relativeAccuracy,final double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy,Method.REGULA_FALSI);}  }
class C{  public PrintfFormat(String fmtArg) throws IllegalArgumentException {  this(Locale.getDefault(),fmtArg);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public synchronized static void removeLuaState(int idx){  states.add(idx,null);}  }
class C{  protected void drawYAxis(Graphics2D gc,Dimension size){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));  boolean doDraw=(size == null);  Rectangle bbox=null;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  if (!isTranspose()) {    int longest=0;    for (    String className : getChartData().getClassNames()) {      longest=Math.max(longest,Basic.getStringSize(gc,className,gc.getFont()).getSize().width);    }    int colorRectTotalWidth=gc.getFont().getSize() + 4;    int right=Math.max(leftMargin,longest + maxRadius / 2 + 2);    int numberOfClasses=getChartData().getNumberOfClasses();    double yStep=(y0 - y1) / (0.5 + numberOfClasses);    int c=0;    for (    String className : getChartData().getClassNames()) {      Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      int x=right - maxRadius / 2 - 2 - labelSize.width - colorRectTotalWidth;      int y=(int)Math.round(y0 - (c + 1) * yStep);      int height=gc.getFont().getSize();      if (doDraw) {        gc.setColor(getChartColors().getClassColor(class2HigherClassMapper.get(className),150));        gc.fillRect(right - maxRadius / 2 - colorRectTotalWidth,y - height + 4,height - 5,height - 5);        if (getChartData().getChartSelection().isSelected(null,className)) {          gc.setColor(ProgramProperties.SELECTION_COLOR);          fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);        }        gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.DARK_GRAY));        if (sgc != null)         sgc.setCurrentItem(new String[]{null,className});        gc.drawString(className,x,y);        if (sgc != null)         sgc.clearCurrentItem();      } else {        int width=labelSize.width + colorRectTotalWidth;        Rectangle rect=new Rectangle(x,y,width + 2,labelSize.height);        if (bbox == null)         bbox=rect; else         bbox.add(rect);      }      c++;    }  } else {    if (x0 >= x1)     return;    int longest=0;    for (    String series : getChartData().getSeriesNames()) {      String label=seriesLabelGetter.getLabel(series);      longest=Math.max(longest,Basic.getStringSize(gc,label,gc.getFont()).getSize().width);    }    int colorRectTotalWidth=gc.getFont().getSize() + 4;    int right=Math.max(leftMargin,longest + maxRadius / 2 + 2);    int numberOfDataSets=getChartData().getNumberOfSeries();    double yStep=(y0 - y1) / (0.5 + numberOfDataSets);    int d=0;    for (    String series : getChartData().getSeriesNames()) {      String label=seriesLabelGetter.getLabel(series);      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      int x=right - maxRadius / 2 - 2 - labelSize.width - colorRectTotalWidth;      int y=(int)Math.round(y0 - (d + 1) * yStep);      int height=gc.getFont().getSize();      if (doDraw) {        gc.setColor(getChartColors().getSampleColor(series));        gc.fillRect(right - maxRadius / 2 - colorRectTotalWidth,y - height + 4,height - 5,height - 5);        if (getChartData().getChartSelection().isSelected(series,null)) {          gc.setColor(ProgramProperties.SELECTION_COLOR);          fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);        }        gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.DARK_GRAY));        if (sgc != null)         sgc.setCurrentItem(new String[]{series,null});        gc.drawString(label,x,y);        if (sgc != null)         sgc.clearCurrentItem();      } else {        int width=labelSize.width + colorRectTotalWidth;        Rectangle rect=new Rectangle(x,y,width + 2,labelSize.height);        if (bbox == null)         bbox=rect; else         bbox.add(rect);      }      d++;    }  }  if (size != null && bbox != null) {    size.setSize(bbox.width + maxRadius / 2,bbox.height);  }}  }
class C{  public static Configuration createSubEquipmentDataTag(Long parentId){  Configuration configuration=new Configuration();  DataTag dataTag=DataTag.create("DATA_INI_TEST",Integer.class,new DataTagAddress()).subEquipmentId(parentId).id(1000L).build();  configuration.addEntity(dataTag);  return configuration;}  }
class C{  public void putAndUnlock(Object key,Object value){  String uid=String.valueOf(key);  Transaction tr=lockedUIDHashMap.get(uid);  if (tr == null) {    map.put(key,value,null,Integer.MAX_VALUE);    return;  }  try {    map.put(key,value,tr,Integer.MAX_VALUE);    tr.commit();  } catch (  Throwable t) {    logger.warn("Failed to commit transaction and unlock the key [" + key + "], ignoring",t);  } finally {    lockedUIDHashMap.remove(uid);  }}  }
class C{  public static void log(int severity,String message,Throwable e){  log(new Status(severity,PLUGIN_ID,0,message,e));}  }
class C{  public boolean intersectsSphere(BoundingSphere bs){  return ((FastMath.abs(center.x - bs.center.x) < bs.getRadius() + xExtent) && (FastMath.abs(center.y - bs.center.y) < bs.getRadius() + yExtent) && (FastMath.abs(center.z - bs.center.z) < bs.getRadius() + zExtent));}  }
class C{  public SemiVariance(final boolean biasCorrected){  this(biasCorrected,Direction.DOWNSIDE);}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  private Set<Aggregation> mergeAggregations(Set<Aggregation> set1,Set<Aggregation> set2){  Map<String,Aggregation> resultAggregationsByName=new LinkedHashMap<>();  for (  Aggregation agg : set1) {    if (resultAggregationsByName.put(agg.getName(),agg) != null) {      String message=String.format("Duplicate name %s in aggregation set %s",agg.getName(),set1);      LOG.error(message);      throw new IllegalArgumentException(message);    }  }  for (  Aggregation thatOne : set2) {    Aggregation thisOne=resultAggregationsByName.get(thatOne.getName());    if (thisOne == null || thisOne.equals(thatOne)) {      resultAggregationsByName.put(thatOne.getName(),thatOne);      continue;    }    if (thisOne.isSketch() && thatOne.isSketch() && thisOne.getFieldName().equals(thatOne.getFieldName())) {      SketchAggregation converted=FieldConverterSupplier.sketchConverter.asInnerSketch((SketchAggregation)thisOne);      resultAggregationsByName.remove(thisOne.getName());      resultAggregationsByName.put(converted.getName(),converted);      continue;    }    String message="Attempt to merge sketch aggregations with the same name, but over different field names";    LOG.error(message);    throw new IllegalArgumentException(message);  }  return new LinkedHashSet<>(resultAggregationsByName.values());}  }
class C{  public ArenaQuestCursor queryArenaQuests(){  return mHelper.queryArenaQuests();}  }
class C{  public TokenizerImpl(){}  }
class C{  public UniqueVertexGraph(){  UniqueVertices=new HashMap<String,Vertex>();}  }
class C{  public IsLessThanOrEqualToExtended(Expression expression1,Expression expression2,boolean matchCase){  super(expression1,expression2,matchCase);}  }
class C{  public static float computeDiscardScale(float amount,float range,boolean fromClick){  if (Math.abs(amount) < 1.0f)   return 1.0f;  float t=amount / range;  float endScale=fromClick ? DISCARD_END_SCALE_CLICK : DISCARD_END_SCALE_SWIPE;  return MathUtils.interpolate(1.0f,endScale,Math.abs(t));}  }
class C{  public Stroke updateStroke(boolean selected,Symbolizer symbolizer){  if (symbolizer == null) {    return null;  }  boolean currentValue=hasStroke(symbolizer);  if (currentValue != selected) {    SLDTreeLeafInterface obj=map.get(symbolizer.getClass());    if (obj != null) {      if (selected) {        logger.debug("Set stroke");        obj.createStroke(symbolizer);      } else {        logger.debug("Clear stroke");        obj.removeStroke(symbolizer);      }    }  }  return getStroke(symbolizer);}  }
class C{  @Override public DimensionsApiRequest apply(DimensionsApiRequest request,ContainerRequestContext context) throws RequestValidationException {  Set<Dimension> requestedDimensions=request.getDimensions();  for (  ApiFilter filter : request.getFilters()) {    if (!requestedDimensions.contains(filter.getDimension())) {      Dimension filterDimension=filter.getDimension();      String msg;      if (requestedDimensions.size() == 1) {        msg=FILTER_DIMENSION_MISMATCH.logFormat(filterDimension.getApiName(),requestedDimensions.iterator().next());      } else {        msg=FILTER_DIMENSION_MISMATCH.logFormat(filterDimension.getApiName(),"set");      }      LOG.error(msg);      throw new BadApiRequestException(msg);    }  }  return request;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VIDEO_BEAN'";  db.execSQL(sql);}  }
class C{  public void unloadNamespaceBundlesGracefully(){  try {    if (pulsar.getLoadManager() != null) {      pulsar.getLoadManager().disableBroker();    }    long closeTopicsStartTime=System.nanoTime();    Set<ServiceUnitId> serviceUnits=pulsar.getNamespaceService().getOwnedServiceUnits();    serviceUnits.forEach(null);    double closeTopicsTimeSeconds=TimeUnit.NANOSECONDS.toMillis((System.nanoTime() - closeTopicsStartTime)) / 1000.0;    log.info("Unloading {} namespace-bundles completed in {} seconds",serviceUnits.size(),closeTopicsTimeSeconds);  } catch (  Exception e) {    log.error("Failed to disable broker from loadbalancer list {}",e.getMessage(),e);  }}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public Split multiply(final Split b){  final Split mulBasic=new Split(full * b.full);  final double mulError=low * b.low - (((mulBasic.full - high * b.high) - low * b.high) - high * b.low);  return new Split(mulBasic.high,mulBasic.low + mulError);}  }
class C{  public TemplateDruidQuery merge(DataApiRequest request){  Set<LogicalMetric> metrics=request.getLogicalMetrics();  Set<TemplateDruidQuery> allQueries=new LinkedHashSet<>();  for (  LogicalMetric metric : metrics) {    TemplateDruidQuery query=metric.getTemplateDruidQuery();    if (query != null) {      allQueries.add(metric.getTemplateDruidQuery());    }  }  if (allQueries.isEmpty()) {    LOG.debug("No template queries selected by API request.");    throw new IllegalStateException("No template queries selected by API request.");  }  TemplateDruidQuery merged=null;  for (  TemplateDruidQuery query : allQueries) {    if (merged == null) {      merged=query;    } else {      LOG.trace("Merging TDQs: Left: {} | right: {}",merged,query);      merged=merged.merge(query);    }  }  LOG.trace("Merged template druid query: {}",merged);  return merged;}  }
class C{  public Matrix minus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] - B.A[i][j];    }  }  return X;}  }
class C{  public Counter<String> generateTags(String[] doc,int n,StringBuilder explain){  Map<String,Double> p=new Hashtable<String,Double>();  Map<String,Double> prwd=new Hashtable<String,Double>();  Counter<String> nwd=new Counter<String>();  for (  String w : doc) {    nwd.inc(w,1);  }  for (  Entry<String,Long> e : nwd) {    if (!ntw.columns().contains(e.getKey()))     continue;    double prw=prw(e.getKey());    prwd.put(e.getKey(),e.getValue() * prw);  }  Counter<String> tags=nwd;  tags.clear();  boolean warned=true;  for (int i=0; i < n; i++) {    String reason=sample(prwd);    if (reason == null) {      if (warned == false)       LOG.info("reason == null, prwd.size()=" + prwd.size() + " doc.length="+ doc.length);      warned=true;      continue;    }    p.clear();    for (    String tag : ntw.rows(reason)) {      p.put(tag,ptr(tag,reason));    }    if (p.size() > 0) {      String tag=sample(p);      tags.inc(tag,1);      if (explain != null) {        explain.append("from " + reason + " => "+ tag+ "<br>");      }    }  }  return tags;}  }
class C{  private static Map<String,List<ChartObject>> databaseDataConverter(Map<String,ComplexValue> dbData,int launches,Launch last){  DecimalFormat formatter=new DecimalFormat("###.##");  Map<String,List<ChartObject>> result=new LinkedHashMap<>();  if (dbData.keySet().isEmpty())   return result;  for (  Entry<String,ComplexValue> pair : dbData.entrySet()) {    ChartObject object=new ChartObject();    Map<String,String> values=new HashMap<>();    values.put(ALL_RUNS,String.valueOf(pair.getValue().getTotal()));    values.put(FAILED,String.valueOf(pair.getValue().getCount()));    double value=(double)pair.getValue().getCount() / pair.getValue().getTotal() * 100;    values.put(AFFECTED_BY,String.valueOf(formatter.format(value)));    values.put(LAST_FAIL_CAPTION,String.valueOf(pair.getValue().getStartTime()));    object.setValues(values);    result.put(pair.getKey(),Lists.newArrayList(object));  }  ChartObject lastLaunch=new ChartObject();  lastLaunch.setName(last.getName());  lastLaunch.setNumber(last.getNumber().toString());  lastLaunch.setId(last.getId());  result.put(LAST_FOUND_LAUNCH,Lists.newArrayList(lastLaunch));  return result;}  }
class C{  public static String shortName(Class<? extends Model> model){  if (model == null || home == null) {    return X.EMPTY;  }  return home._shortName(model);}  }
class C{  public Iterator<Node> iterator(){  if (this.nodes == null) {    this.nodes=this.dfs(this.root);  }  Iterator<Node> i=this.nodes.iterator();  return i;}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  public RMA2Modifier(File file) throws IOException {  rma2File=new RMA2File(file);  infoSection=rma2File.loadInfoSection();  io=rma2File.getFileAppender();  infoSection.read(io);  infoSection.setAuxiliaryDataStart(0);  infoSection.setAuxiliaryDataEnd(0);  infoSection.setNumberOfClassifications(0);  io.seek(infoSection.getDataIndexSectionEnd());  io.setLength(infoSection.getDataIndexSectionEnd());}  }
class C{  static protected boolean isSilence(String phone){  return phone.equals("pau");}  }
class C{  private void createInitialTab(){  String url=HomepageManager.getHomepageUri(getApplicationContext());  if (TextUtils.isEmpty(url))   url=UrlConstants.NTP_URL;  getTabCreator(false).launchUrl(url,TabLaunchType.FROM_MENU_OR_OVERVIEW);}  }
class C{  public synchronized long fileCount(){  return fileCount;}  }
class C{  public static boolean isSame(AnchorPoint defaultAnchorPoint,AnchorPoint anchorPoint){  if ((defaultAnchorPoint != null) && (anchorPoint != null)) {    return areDoubleValuesSame(defaultAnchorPoint.getAnchorPointX(),anchorPoint.getAnchorPointX()) && areDoubleValuesSame(defaultAnchorPoint.getAnchorPointY(),anchorPoint.getAnchorPointY());  }  return false;}  }
class C{  protected void closeApplicationContext(){  if (applicationContext != null) {    if (logger.isDebugEnabled()) {      logger.debug("Closing application context [" + location + "]");    }    try {      applicationContext.setParent(null);      applicationContext.close();    }  finally {      applicationContext=null;    }  }}  }
class C{  public void onPanelStateChanged(PanelState fromState,PanelState toState,StateChangeReason reason){  boolean isStartingSearch=isStartingNewContextualSearch(toState,reason);  boolean isEndingSearch=isEndingContextualSearch(fromState,toState,isStartingSearch);  boolean isChained=isStartingSearch && isOngoingContextualSearch(fromState);  boolean isSameState=fromState == toState;  boolean isFirstExitFromPeeking=fromState == PanelState.PEEKED && !mHasExitedPeeking && (!isSameState || isStartingSearch);  boolean isFirstExitFromExpanded=fromState == PanelState.EXPANDED && !mHasExitedExpanded && !isSameState;  boolean isFirstExitFromMaximized=fromState == PanelState.MAXIMIZED && !mHasExitedMaximized && !isSameState;  boolean isFirstSearchView=isFirstExitFromPeeking && toState != PanelState.CLOSED;  boolean isSearchPanelFullyPreloaded=mIsSearchPanelFullyPreloaded;  if (isEndingSearch) {    if (!mDidSearchInvolvePromo) {      long durationMs=(System.nanoTime() - mSearchStartTimeNs) / 1000000;      ContextualSearchUma.logDuration(mWasSearchContentViewSeen,isChained,durationMs);    }    if (mIsPromoActive) {      ContextualSearchUma.logPromoSeen(mWasSearchContentViewSeen,mWasActivatedByTap);    } else {      ContextualSearchUma.logResultsSeen(mWasSearchContentViewSeen,mWasActivatedByTap);    }  }  if (isStartingSearch) {    mSearchStartTimeNs=System.nanoTime();    mSearchViewStartTimeNs=0;    mIsSearchPanelFullyPreloaded=false;    mWasActivatedByTap=reason == StateChangeReason.TEXT_SELECT_TAP;  }  if (isFirstSearchView) {    onSearchPanelFirstView();  }  StateChangeReason reasonForLogging=mIsSerpNavigation ? StateChangeReason.SERP_NAVIGATION : reason;  if (isStartingSearch || isEndingSearch || (!mHasExpanded && toState == PanelState.EXPANDED)|| (!mHasMaximized && toState == PanelState.MAXIMIZED)) {    ContextualSearchUma.logFirstStateEntry(fromState,toState,reasonForLogging);  }  if ((isStartingSearch && !isChained) || isFirstExitFromPeeking || isFirstExitFromExpanded|| isFirstExitFromMaximized) {    ContextualSearchUma.logFirstStateExit(fromState,toState,reasonForLogging);  }  if (isFirstExitFromPeeking) {    mHasExitedPeeking=true;  } else   if (isFirstExitFromExpanded) {    mHasExitedExpanded=true;  } else   if (isFirstExitFromMaximized) {    mHasExitedMaximized=true;  }  if (toState == PanelState.EXPANDED) {    mHasExpanded=true;  } else   if (toState == PanelState.MAXIMIZED) {    mHasMaximized=true;  }  if (reason == StateChangeReason.SERP_NAVIGATION) {    mIsSerpNavigation=true;  }  if (isEndingSearch) {    if (mHasMaximized || mHasExpanded) {      ContextualSearchUma.logSerpLoadedOnClose(isSearchPanelFullyPreloaded);    }    mDidSearchInvolvePromo=false;    mWasSearchContentViewSeen=false;    mHasExpanded=false;    mHasMaximized=false;    mHasExitedPeeking=false;    mHasExitedExpanded=false;    mHasExitedMaximized=false;    mIsSerpNavigation=false;  }}  }
class C{  @Override public SphericalPolygonsSet wholeSpace(){  return new SphericalPolygonsSet(tolerance);}  }
class C{  public static String slashify(String s){  if (s == null) {    return null;  }  return s.replace('.','/');}  }
class C{  protected AudioGetByIdQuery audios(String... value){  return unsafeParam("audios",value);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("show taxon=");  String name=np.getWordRespectCase();  np.matchIgnoreCase(";");  if (getViewer() instanceof InspectorWindow) {    InspectorWindow inspectorWindow=(InspectorWindow)getViewer();    int taxId;    if (Basic.isInteger(name))     taxId=Integer.parseInt(name); else     taxId=TaxonomyData.getName2IdMap().get(name);    if (taxId == 0) {      NotificationsInSwing.showWarning(inspectorWindow.getFrame(),"Unknown taxon: " + name);    } else     inspectorWindow.addTopLevelNode(name,taxId,Classification.Taxonomy);  } else   NotificationsInSwing.showError(getViewer().getFrame(),"Command in invalid context");}  }
class C{  public BigReal(char[] in,int offset,int len){  d=new BigDecimal(in,offset,len);}  }
class C{  public EquipmentLoggerFactory(final String handlerClassName,final Long equipmentId,final String equipmentName,final String processName,final boolean eqLoggers,final boolean eqAppendersOnly){  this.handlerClassName=handlerClassName;  this.eqAppendersOnly=eqAppendersOnly;  this.eqNameAndId=equipmentName + "_" + equipmentId;  if (eqLoggers) {    String processLoggerFileLocation=System.getProperty("tim.log.path");    String fileName=processLoggerFileLocation + "/" + processName+ "_"+ eqNameAndId+ ".log";    try {      Appender processLoggerAppender=(Appender)Logger.getRootLogger().getAllAppenders().nextElement();      Layout processLoggerLayout=processLoggerAppender.getLayout();      PatternLayout p2=new PatternLayout(((PatternLayout)processLoggerLayout).getConversionPattern());      rollingFileAppender=new RollingFileAppender(p2,fileName);      if (processLoggerAppender instanceof RollingFileAppender) {        rollingFileAppender.setMaximumFileSize(((RollingFileAppender)processLoggerAppender).getMaximumFileSize());      } else {        rollingFileAppender.setMaxFileSize("10MB");      }      rollingFileAppender.setMaxBackupIndex(1);    } catch (    Exception ignored) {    }  }}  }
class C{  public int years(){  return this.years;}  }
class C{  public GroupsEditManagerQuery contactPhone(String value){  return unsafeParam("contact_phone",value);}  }
class C{  public static boolean checkDeniedPermissionsNeverAskAgain(Object object,String deniedPerms){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    boolean shouldShowRationale;    shouldShowRationale=shouldShowRequestPermissionRationale(object,deniedPerms);    return !shouldShowRationale;  }  return false;}  }
class C{  public static DataFrame normalize(DataFrame dataFrame,double min,double max,List<String> skipColumns){  String[] columnNames=dataFrame.columns();  for (  String columnName : columnNames) {    if (skipColumns.contains(columnName))     continue;    DataFrame minMax=dataFrame.select(columnName).agg(min(columnName),max(columnName));    Row r=minMax.collect()[0];    double dMin=((Number)r.get(0)).doubleValue();    double dMax=((Number)r.get(1)).doubleValue();    double maxSubMin=dMax - dMin;    if (maxSubMin == 0)     maxSubMin=1;    Column newCol=dataFrame.col(columnName).minus(dMin).divide(maxSubMin).multiply(max - min).plus(min);    dataFrame=dataFrame.withColumn(columnName,newCol);  }  return dataFrame;}  }
class C{  public boolean contains(String key){  return options.containsKey(key);}  }
class C{  private void createRanker(RetrieveAndRank service){  URL url=this.getClass().getClassLoader().getResource("trainingdata.csv");  File trainingFile=null;  try {    trainingFile=new File(url.toURI());  } catch (  Exception e) {    logger.error(e.getMessage());  }  Ranker ranker=service.createRanker(Constants.RANKER_NAME,trainingFile).execute();  String rankerId=ranker.getId();  logger.info(Messages.getString("SetupThread.CREATING_A_RANKER") + rankerId);  ranker=service.getRankerStatus(rankerId).execute();  logger.info(ranker.getStatus().toString());  while (ranker.getStatus().toString().equalsIgnoreCase(Messages.getString("SetupThread.TRAINING_RANKER"))) {    try {      Thread.sleep(60000);    } catch (    InterruptedException e) {      logger.error(e.getMessage());    }    ranker=service.getRankerStatus(rankerId).execute();    logger.info(Messages.getString("SetupThread.RANKER_STATUS") + ranker.getStatus());  }}  }
class C{  public MessagesGetDialogsQuery previewLength(Integer value){  return unsafeParam("preview_length",value);}  }
class C{  public T remove(Map<String,? extends Object> base){  if (this.isEmpty) {    return null;  }  T object=get(base);  if (object == null) {    return null;  }  try {    Map<String,Object> writableMap=UtilGenerics.cast(base);    UelUtil.removeValue(writableMap,getExpression(base));  } catch (  Exception e) {    Debug.logError("UEL exception while removing value: " + e + ", original = "+ this.original,module);  }  return object;}  }
class C{  public void screenshot(String message){  try {    addLogEntry(new ScreenshotEntry(webDriver,fileCreator,message));  } catch (  IOException e) {    LOG.error("Can't take screenshot",e);  }}  }
class C{  public void addProcessIds(final Collection<Long> processIds){  for (  Long processId : processIds) {    addProcessId(processId);  }}  }
class C{  public boolean strictlyNegative(){  if (isNaN()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    dotrap(DfpField.FLAG_INVALID,LESS_THAN_TRAP,this,newInstance(getZero()));    return false;  }  return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());}  }
class C{  public static int compareTimestamps(UUID uuid1,UUID uuid2){  return Longs.compare(uuid1.timestamp(),uuid2.timestamp());}  }
class C{  public void addEntry(Entry e,int dataSetIndex){  if (mDataSets.size() > dataSetIndex && dataSetIndex >= 0) {    IDataSet set=mDataSets.get(dataSetIndex);    if (!set.addEntry(e))     return;    float val=e.getVal();    if (mYValCount == 0) {      mYMin=val;      mYMax=val;      if (set.getAxisDependency() == AxisDependency.LEFT) {        mLeftAxisMax=e.getVal();        mLeftAxisMin=e.getVal();      } else {        mRightAxisMax=e.getVal();        mRightAxisMin=e.getVal();      }    } else {      if (mYMax < val)       mYMax=val;      if (mYMin > val)       mYMin=val;      if (set.getAxisDependency() == AxisDependency.LEFT) {        if (mLeftAxisMax < e.getVal())         mLeftAxisMax=e.getVal();        if (mLeftAxisMin > e.getVal())         mLeftAxisMin=e.getVal();      } else {        if (mRightAxisMax < e.getVal())         mRightAxisMax=e.getVal();        if (mRightAxisMin > e.getVal())         mRightAxisMin=e.getVal();      }    }    mYValCount+=1;    handleEmptyAxis(getFirstLeft(),getFirstRight());  } else {    Log.e("addEntry","Cannot add Entry because dataSetIndex too high or too low.");  }}  }
class C{  protected int diff_commonOverlap(String text1,String text2){  int text1_length=text1.length();  int text2_length=text2.length();  if (text1_length == 0 || text2_length == 0) {    return 0;  }  if (text1_length > text2_length) {    text1=text1.substring(text1_length - text2_length);  } else   if (text1_length < text2_length) {    text2=text2.substring(0,text1_length);  }  int text_length=Math.min(text1_length,text2_length);  if (text1.equals(text2)) {    return text_length;  }  int best=0;  int length=1;  while (true) {    String pattern=text1.substring(text_length - length);    int found=text2.indexOf(pattern);    if (found == -1) {      return best;    }    length+=found;    if (found == 0 || text1.substring(text_length - length).equals(text2.substring(0,length))) {      best=length;      length++;    }  }}  }
class C{  public FriendsSearchQuery q(String value){  return unsafeParam("q",value);}  }
class C{  private boolean isGeometryField(Class<?> fieldType){  return geometryTypeList.contains(fieldType);}  }
class C{  private IEntryCacheInfo updateEntryInCache(Context context,IEntryCacheInfo pEntry,IEntryHolder entryHolder,IEntryData newEntryData,long newExpirationTime,int modifiers){  final TypeData typeData=_typeDataMap.get(entryHolder.getServerTypeDesc());  final boolean partial_update=UpdateModifiers.isPartialUpdate(modifiers);  if (pEntry == null)   pEntry=getPEntryByUid(entryHolder.getUID());  if (!pEntry.isPinned())   throw new RuntimeException("updateEntryInCache: internal error- entry uid =" + pEntry.getUID() + " not pinned");  try {    pEntry.getEntryHolder(this).setunStable(true);    IEntryData originalEntryData=entryHolder.getEntryData();    context.setPartialUpdatedValuesIndicators(null);    if (partial_update) {      int numOfFields=originalEntryData.getNumOfFixedProperties();      boolean[] partialUpdatedValuesIndicators=new boolean[numOfFields];      boolean anyPartial=false;      for (int i=0; i < numOfFields; i++) {        if (newEntryData.getFixedPropertyValue(i) == null) {          newEntryData.setFixedPropertyValue(i,originalEntryData.getFixedPropertyValue(i));          partialUpdatedValuesIndicators[i]=true;          anyPartial=_partialUpdateReplication;        }      }      if (newEntryData.getDynamicProperties() == null)       newEntryData.setDynamicProperties(originalEntryData.getDynamicProperties());      if (anyPartial)       context.setPartialUpdatedValuesIndicators(partialUpdatedValuesIndicators);    }    if (entryHolder.getServerTypeDesc().getTypeDesc().hasSequenceNumber() && !_engine.isLocalCache()) {      int snPos=entryHolder.getServerTypeDesc().getTypeDesc().getSequenceNumberFixedPropertyID();      Object newVal=newEntryData.getFixedPropertyValue(snPos);      Object originalVal=originalEntryData.getFixedPropertyValue(snPos);      if (newVal == null)       newEntryData.setFixedPropertyValue(snPos,originalVal);      if (newVal != null && !TypeData.objectsEquality(originalVal,newVal))       throw new SequenceNumberException(entryHolder.getUID(),entryHolder.getClassName()," sequence number altered in update/change op was=" + originalVal + " new="+ newVal);    }    typeData.prepareForUpdatingIndexValues(this,pEntry,newEntryData);    long original_expiration=0;    if (context.isReRegisterLeaseOnUpdate())     original_expiration=pEntry.getEntryHolder(this).getEntryData().getExpirationTime();    entryHolder.updateEntryData(newEntryData,newExpirationTime);    typeData.updateEntryReferences(this,entryHolder,pEntry,originalEntryData);    if (context.isReRegisterLeaseOnUpdate()) {      if (!pEntry.getEntryHolder(this).hasShadow())       _leaseManager.reRegisterLease(pEntry,pEntry.getEntryHolder(this),original_expiration,newExpirationTime,ObjectTypes.ENTRY); else {        pEntry.getEntryHolder(this).getShadow().incrementNumOfLeaseUpdates();        if (pEntry.getEntryHolder(this).getShadow().getNumOfLeaseUpdates() > 1)         _leaseManager.unregister(pEntry,original_expiration);        _leaseManager.registerEntryLease(pEntry,newExpirationTime);      }      context.setWriteResult(new WriteEntryResult(pEntry.getUID(),newEntryData.getVersion(),newExpirationTime));    }    if (!pEntry.getEntryHolder(this).isOffHeapEntry())     pEntry.getEntryHolder(this).setDeleted(false);    return pEntry;  }  finally {    pEntry.getEntryHolder(this).setunStable(false);  }}  }
class C{  RingBuffer(EventFactory<E> eventFactory,Sequencer sequencer){  super(eventFactory,sequencer);}  }
class C{  public HomePhotosView(Activity a,int photosType){  super(a);  this.initialize(a,photosType);}  }
class C{  public void updateSummaries(){  PrefServiceBridge prefServiceBridge=PrefServiceBridge.getInstance();  CheckBoxPreference navigationErrorPref=(CheckBoxPreference)findPreference(PREF_NAVIGATION_ERROR);  navigationErrorPref.setChecked(prefServiceBridge.isResolveNavigationErrorEnabled());  CheckBoxPreference searchSuggestionsPref=(CheckBoxPreference)findPreference(PREF_SEARCH_SUGGESTIONS);  searchSuggestionsPref.setChecked(prefServiceBridge.isSearchSuggestEnabled());  CheckBoxPreference extendedReportingPref=(CheckBoxPreference)findPreference(PREF_SAFE_BROWSING_EXTENDED_REPORTING);  if (extendedReportingPref != null) {    extendedReportingPref.setChecked(prefServiceBridge.isSafeBrowsingExtendedReportingEnabled());  }  CheckBoxPreference safeBrowsingPref=(CheckBoxPreference)findPreference(PREF_SAFE_BROWSING);  if (safeBrowsingPref != null) {    safeBrowsingPref.setChecked(prefServiceBridge.isSafeBrowsingEnabled());  }  Preference doNotTrackPref=findPreference(PREF_DO_NOT_TRACK);  if (prefServiceBridge.isDoNotTrackEnabled()) {    doNotTrackPref.setSummary(getActivity().getResources().getText(R.string.text_on));  } else {    doNotTrackPref.setSummary(getActivity().getResources().getText(R.string.text_off));  }  Preference contextualPref=findPreference(PREF_CONTEXTUAL_SEARCH);  if (contextualPref != null) {    if (prefServiceBridge.isContextualSearchDisabled()) {      contextualPref.setSummary(getActivity().getResources().getText(R.string.text_off));    } else {      contextualPref.setSummary(getActivity().getResources().getText(R.string.text_on));    }  }  PrivacyPreferencesManager privacyPrefManager=PrivacyPreferencesManager.getInstance(getActivity());  if (privacyPrefManager.isCellularExperimentEnabled()) {    Preference usageAndCrashPref=findPreference(PREF_USAGE_AND_CRASH_REPORTING);    if (privacyPrefManager.isUsageAndCrashReportingEnabled()) {      usageAndCrashPref.setSummary(getActivity().getResources().getText(R.string.text_on));    } else {      usageAndCrashPref.setSummary(getActivity().getResources().getText(R.string.text_off));    }  }}  }
class C{  public int hashCode(){  return bytes.hashCode();}  }
class C{  public GiftsGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void closeWriterExecutionService(ExecutorService service) throws CarbonDataWriterException {  try {    service.shutdown();    service.awaitTermination(1,TimeUnit.DAYS);  } catch (  InterruptedException e) {    LOGGER.error(e,e.getMessage());    throw new CarbonDataWriterException(e.getMessage());  }}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  private void embedGraph(){  FruchtermanReingoldLayout fruchtermanReingoldLayout=new FruchtermanReingoldLayout(graph,null);  NodeArray<Point2D> coordinates=new NodeArray<>(graph);  fruchtermanReingoldLayout.apply(1000,coordinates);  boolean first=true;  for (Node v=graph.getFirstNode(); v != null; v=v.getNext()) {    NodeData nodeData=(NodeData)v.getData();    nodeData.setLocation(coordinates.get(v));    if (first) {      boundingBox.setRect(coordinates.get(v).getX(),coordinates.get(v).getY(),1,1);      first=false;    } else     boundingBox.add(coordinates.get(v));  }  boundingBox.setRect(boundingBox.getX() - maxRadius,boundingBox.getY() - maxRadius,boundingBox.getWidth() + 2 * maxRadius,boundingBox.getHeight() + 2 * maxRadius);}  }
class C{  private boolean isValidComponentName(String name){  if (name.isEmpty())   return false;  if (name.equals("true") || name.equals("false"))   return false;  if (Character.isDigit(name.charAt(0)))   return false;  if (name.startsWith("."))   return true;  return false;}  }
class C{  public static double[] apply(final double[][] points){  final int nPoints=points.length;  final double[] centroid=getMean(points);  final double xCenter=centroid[0];  final double yCenter=centroid[1];  final double[][] d1=new double[nPoints][3];  for (int i=0; i < nPoints; i++) {    final double xixC=points[i][0] - xCenter;    final double yiyC=points[i][1] - yCenter;    d1[i][0]=xixC * xixC;    d1[i][1]=xixC * yiyC;    d1[i][2]=yiyC * yiyC;  }  final Matrix D1=new Matrix(d1);  final double[][] d2=new double[nPoints][3];  for (int i=0; i < nPoints; i++) {    d2[i][0]=points[i][0] - xCenter;    d2[i][1]=points[i][1] - yCenter;    d2[i][2]=1;  }  final Matrix D2=new Matrix(d2);  final Matrix S1=D1.transpose().times(D1);  final Matrix S2=D1.transpose().times(D2);  final Matrix S3=D2.transpose().times(D2);  final Matrix T=(S3.inverse().times(-1)).times(S2.transpose());  final Matrix M=S1.plus(S2.times(T));  final double[][] m=M.getArray();  final double[][] n={{m[2][0] / 2,m[2][1] / 2,m[2][2] / 2},{-m[1][0],-m[1][1],-m[1][2]},{m[0][0] / 2,m[0][1] / 2,m[0][2] / 2}};  final Matrix N=new Matrix(n);  final EigenvalueDecomposition E=N.eig();  final Matrix eVec=E.getV();  final Matrix R1=eVec.getMatrix(0,0,0,2);  final Matrix R2=eVec.getMatrix(1,1,0,2);  final Matrix R3=eVec.getMatrix(2,2,0,2);  final Matrix cond=(R1.times(4)).arrayTimes(R3).minus(R2.arrayTimes(R2));  int firstPositiveIndex=0;  for (int i=0; i < 3; i++) {    if (cond.get(0,i) > 0) {      firstPositiveIndex=i;      break;    }  }  final Matrix A1=eVec.getMatrix(0,2,firstPositiveIndex,firstPositiveIndex);  final Matrix A=new Matrix(6,1);  A.setMatrix(0,2,0,0,A1);  A.setMatrix(3,5,0,0,T.times(A1));  final double[] a=A.getColumnPackedCopy();  final double a4=a[3] - 2 * a[0] * xCenter - a[1] * yCenter;  final double a5=a[4] - 2 * a[2] * yCenter - a[1] * xCenter;  final double a6=a[5] + a[0] * xCenter * xCenter + a[2] * yCenter * yCenter + a[1] * xCenter * yCenter - a[3] * xCenter - a[4] * yCenter;  A.set(3,0,a4);  A.set(4,0,a5);  A.set(5,0,a6);  final Matrix Anorm=A.times(1 / A.normF());  return Anorm.getColumnPackedCopy();}  }
class C{  public static String removeLast(String string,int characters){  if (string == null) {    return null;  }  if (characters < 0 || characters > string.length()) {    return EMPTY;  }  return string.substring(0,string.length() - characters);}  }
class C{  public static void initCheckpointingTask(){  taskMgr.runTask(new CheckpointTask());}  }
class C{  public static DLMetadata deserialize(URI uri,byte[] data) throws IOException {  String metadata=new String(data,UTF_8);  LOG.debug("Parsing dl metadata {}.",metadata);  BufferedReader br=new BufferedReader(new StringReader(metadata));  String versionLine=br.readLine();  if (null == versionLine) {    throw new IOException("Empty DL Metadata.");  }  int version;  try {    version=Integer.parseInt(versionLine);  } catch (  NumberFormatException nfe) {    version=-1;  }  if (METADATA_FORMAT_VERSION != version) {    throw new IOException("Metadata version not compatible. Expected " + METADATA_FORMAT_VERSION + " but got "+ version);  }  String type=br.readLine();  if (!BK_DL_TYPE.equals(type)) {    throw new IOException("Invalid DL type : " + type);  }  DLConfig dlConfig=new BKDLConfig(uri);  StringBuilder sb=new StringBuilder();  String line;  while (null != (line=br.readLine())) {    sb.append(line);  }  dlConfig.deserialize(sb.toString().getBytes(UTF_8));  return new DLMetadata(type,dlConfig,version);}  }
class C{  @Override public void notifyOnOperationComplete(){  scheduleBackgroundRead();}  }
class C{  public void groupBars(float fromX,float groupSpace,float barSpace){  int setCount=mDataSets.size();  if (setCount <= 1) {    throw new RuntimeException("BarData needs to hold at least 2 BarDataSets to allow grouping.");  }  IBarDataSet max=getMaxEntryCountSet();  int maxEntryCount=max.getEntryCount();  float groupSpaceWidthHalf=groupSpace / 2f;  float barSpaceHalf=barSpace / 2f;  float barWidthHalf=mBarWidth / 2f;  float interval=getGroupWidth(groupSpace,barSpace);  for (int i=0; i < maxEntryCount; i++) {    float start=fromX;    fromX+=groupSpaceWidthHalf;    IBarDataSet set;    final int setCountJ=mDataSets.size();    for (int j=0; j < setCountJ; j++) {      set=mDataSets.get(j);      fromX+=barSpaceHalf;      fromX+=barWidthHalf;      if (i < set.getEntryCount()) {        BarEntry entry=set.getEntryForIndex(i);        if (entry != null) {          entry.setX(fromX);        }      }      fromX+=barWidthHalf;      fromX+=barSpaceHalf;    }    fromX+=groupSpaceWidthHalf;    float end=fromX;    float innerInterval=end - start;    float diff=interval - innerInterval;    if (diff > 0 || diff < 0) {      fromX+=diff;    }  }  notifyDataChanged();}  }
class C{  public static int toShort(byte first,byte second){  return (first << 8) + (second & 0xFF);}  }
class C{  public EulerAngle(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public GenericValue findByPrimaryKey(GenericPK primaryKey) throws GenericEntityException {  if (primaryKey == null) {    return null;  }  GenericValue genericValue=GenericValue.create(primaryKey);  genericDAO.select(genericValue);  return genericValue;}  }
class C{  protected AdsDeleteTargetGroupQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public static void error(Object message,Throwable exception){  Gdx.app.error(TAG,String.valueOf(message),exception);}  }
class C{  private static void updateStroke(URL resourceLocator,Stroke stroke,List<String> externalImageList){  if (stroke != null) {    if (stroke.getGraphicFill() != null) {      updateGraphicalSymbol(resourceLocator,stroke.getGraphicFill().graphicalSymbols(),externalImageList);    }    if (stroke.getGraphicStroke() != null) {      updateGraphicalSymbol(resourceLocator,stroke.getGraphicStroke().graphicalSymbols(),externalImageList);    }  }}  }
class C{  public int indexOf(Local l,RefType t){  if (locals.indexOf(l) == -1 || types.indexOf(t) == -1) {    throw new RuntimeException("Invalid local or type in LocalTypeSet");  }  return locals.indexOf(l) * types.size() + types.indexOf(t);}  }
class C{  public Builder keepInView(Boolean keepInView){  this.keepInView=keepInView;  return this;}  }
class C{  public static int toInt(Object v){  return X.toInt(v,0);}  }
class C{  @Override public void onWindowFocusChanged(boolean hasFocus){  super.onWindowFocusChanged(hasFocus);  if (hasFocus && immersiveMode) {    final int uiOptions=View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;    getWindow().getDecorView().setSystemUiVisibility(uiOptions);  }}  }
class C{  public ReverseGeoCode(InputStream placenames,boolean majorOnly) throws IOException {  createKdTree(placenames,majorOnly);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static <T>IStoredList<T> createConcurrentList(boolean segmented,boolean supportFifoPerSegment){  return new ConcurrentSegmentedStoredList<T>(segmented,supportFifoPerSegment);}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public void registerEvent(Class<? extends Event> event,Listener listener,EventPriority priority,EventExecutor executor,Plugin plugin,boolean ignoreCancelled){  Validate.notNull(listener,"Listener cannot be null");  Validate.notNull(priority,"Priority cannot be null");  Validate.notNull(executor,"Executor cannot be null");  Validate.notNull(plugin,"Plugin cannot be null");  if (!plugin.isEnabled()) {    throw new IllegalPluginAccessException("Plugin attempted to register " + event + " while not enabled");  }  getEventListeners(event).register(new RegisteredListener(listener,executor,priority,plugin,ignoreCancelled));}  }
class C{  public static Map<String,Object> createContentMethod(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  context.put("entityOperation","_CREATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_CREATE");  if (Debug.infoOn())   Debug.logInfo("in createContentMethod, targetOperationList: " + targetOperationList,null);  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  String contentId=(String)context.get("contentId");  if (UtilValidate.isEmpty(contentId)) {    contentId=delegator.getNextSeqId("Content");  }  GenericValue content=delegator.makeValue("Content",UtilMisc.toMap("contentId",contentId));  content.setNonPKFields(context);  GenericValue userLogin=(GenericValue)context.get("userLogin");  String userLoginId=(String)userLogin.get("userLoginId");  if (UtilValidate.isEmpty(context.get("statusId"))) {    try {      GenericValue statusItem=EntityQuery.use(delegator).from("StatusItem").where("statusTypeId","CONTENT_STATUS").orderBy("sequenceId").queryFirst();      if (statusItem != null) {        content.put("statusId",statusItem.get("statusId"));      }    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(e.getMessage());    }  }  content.put("createdByUserLogin",userLoginId);  content.put("lastModifiedByUserLogin",userLoginId);  content.put("createdDate",nowTimestamp);  content.put("lastModifiedDate",nowTimestamp);  context.put("currentContent",content);  if (Debug.infoOn())   Debug.logInfo("in createContentMethod, context: " + context,null);  Map<String,Object> permResults=ContentWorker.callContentPermissionCheckResult(delegator,dispatcher,context);  String permissionStatus=(String)permResults.get("permissionStatus");  if (permissionStatus != null && permissionStatus.equalsIgnoreCase("granted")) {    try {      content.create();    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(e.getMessage());    }catch (    Exception e2) {      return ServiceUtil.returnError(e2.getMessage());    }    result.put("contentId",contentId);  } else {    String errorMsg=(String)permResults.get(ModelService.ERROR_MESSAGE);    result.put(ModelService.ERROR_MESSAGE,errorMsg);    return ServiceUtil.returnFailure(errorMsg);  }  context.remove("currentContent");  return result;}  }
class C{  public static final void release(final Summon summon,final UnsummonType unsummonType,final boolean isAttacked){  if (summon.getMode() == SummonMode.RELEASE) {    return;  }  summon.getController().cancelCurrentSkill();  summon.setMode(SummonMode.RELEASE);  final Player master=summon.getMaster();switch (unsummonType) {case COMMAND:    PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_UNSUMMON_FOLLOWER(summon.getNameId()));  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));break;case DISTANCE:PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_UNSUMMON_BY_TOO_DISTANCE);PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));break;case LOGOUT:case UNSPECIFIED:break;}summon.getObserveController().notifySummonReleaseObservers();summon.setReleaseTask(ThreadPoolManager.getInstance().schedule(new ReleaseSummonTask(summon,unsummonType,isAttacked),5000));}  }
class C{  public float[] toArray(float[] floats){  if (floats == null) {    floats=new float[2];  }  floats[0]=x;  floats[1]=y;  return floats;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return SERVICE_NAME;case 2:  return SEQUENCE_ID;case 3:return CALL_TYPE;case 4:return TIMEOUT;default :return null;}}  }
class C{  public JsonPrimitive(String string){  setValue(string);}  }
class C{  @Override public void start(){  if (!running) {    running=true;    notifyUpdateThreadHandler.start();    statusConfirmationHandler.start();  }}  }
class C{  protected static int resolvePosition(DataSource dataSource,int position,boolean savePosition){  Storage storage=dataSource.getStorage();  String positionS=storage.getCustomProperty(PROPERTY_PREFERRED_POSITION);  if (positionS != null)   try {    position=Integer.parseInt(positionS);  } catch (  NumberFormatException e) {    if (savePosition)     storage.setCustomProperty(PROPERTY_PREFERRED_POSITION,Integer.toString(position));  } else {    if (savePosition)     storage.setCustomProperty(PROPERTY_PREFERRED_POSITION,Integer.toString(position));  }  return position;}  }
class C{  public static void disableTrafficAlerts(){  getAirMapTrafficService().disconnect();  getAirMapTrafficService().removeAllListeners();}  }
class C{  @Deployment public void testTwoInterruptingUnderProcessDefinition(){  testInterruptingUnderProcessDefinition(2,4);}  }
class C{  public boolean isFifoClass(){  return serverFifoMode;}  }
class C{  @SuppressWarnings("fallthrough") private void beforeValue() throws IOException {switch (peek()) {case NONEMPTY_DOCUMENT:    if (!lenient) {      throw new IllegalStateException("JSON must have only one top-level value.");    }case EMPTY_DOCUMENT:  replaceTop(NONEMPTY_DOCUMENT);break;case EMPTY_ARRAY:replaceTop(NONEMPTY_ARRAY);newline();break;case NONEMPTY_ARRAY:out.append(',');newline();break;case DANGLING_NAME:out.append(separator);replaceTop(NONEMPTY_OBJECT);break;default :throw new IllegalStateException("Nesting problem.");}}  }
class C{  public static ExpectedCondition<Boolean> elementNotPresentOrVisible(final By bySelector){  return null;}  }
class C{  @Override public void registerExtenderCallbacks(IBurpExtenderCallbacks callbacks){  log.info("Registering the Burp Extension");  String extensionName="Burp Rest Extension";  log.info("Setting the Burp Extension Name: {}",extensionName);  callbacks.setExtensionName(extensionName);  this.callbacks=callbacks;  this.helpers=callbacks.getHelpers();  instance=this;  PrintWriter stdout=new PrintWriter(callbacks.getStdout(),true);  PrintWriter stderr=new PrintWriter(callbacks.getStderr(),true);  stdout.println("Checking output stream");  stderr.println("Checking error strem");  callbacks.issueAlert("Checking the alerts tab");}  }
class C{  public String name(){  return theName;}  }
class C{  public FriendsGetQueryWithFields(VkApiClient client,List<UserField> fields){  super(client,"friends.get",GetFieldsResponse.class);  fields(fields);}  }
class C{  public static boolean canAffectBySkill(Player player,VisibleObject target,Skill skill){  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canAffectBySkill.ordinal()]) {    if (!restrictions.canAffectBySkill(player,target,skill)) {      return false;    }  }  return true;}  }
class C{  private int compareVersions(String v1,String v2) throws SAXException {  String[] p1=v1.split("\\.");  String[] p2=v2.split("\\.");  try {    int n=p1.length;    for (int i=0; i < n; i++) {      int n1=Integer.parseInt(p1[i]);      int n2=Integer.parseInt(p2[i]);      if (n1 < n2) {        return -1;      } else       if (n1 > n2) {        return 1;      }    }  } catch (  NumberFormatException e) {    throw new SAXException(MessageFormat.format(Messages.getString("exception.persist.invalidVersionNumber"),v1,v2),e);  }  return 0;}  }
class C{  public RecurrenceInfo(GenericValue info) throws RecurrenceInfoException {  this.info=info;  if (!info.getEntityName().equals("RecurrenceInfo"))   throw new RecurrenceInfoException("Invalid RecurrenceInfo Value object.");  init();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_SUMMONED_ENEMY_ATTACK(String value1,int num2,String value0){  return new SM_SYSTEM_MESSAGE(1200004,value1,num2,value0);}  }
class C{  public ApiFilter(@NotNull String filterQuery,DimensionDictionary dimensionDictionary) throws BadFilterException {  this(filterQuery,(LogicalTable)null,dimensionDictionary);}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  public AccountGetProfileInfoQuery(VkApiClient client,UserActor actor){  super(client,"account.getProfileInfo",UserSettings.class);  accessToken(actor.getAccessToken());}  }
class C{  public void averagePoints(Vector3f[] points){  logger.info("Bounding Sphere calculated using average points.");  center=points[0];  for (int i=1; i < points.length; i++) {    center.addLocal(points[i]);  }  float quantity=1.0f / points.length;  center.multLocal(quantity);  float maxRadiusSqr=0;  for (int i=0; i < points.length; i++) {    Vector3f diff=points[i].subtract(center);    float radiusSqr=diff.lengthSquared();    if (radiusSqr > maxRadiusSqr) {      maxRadiusSqr=radiusSqr;    }  }  radius=(float)Math.sqrt(maxRadiusSqr) + RADIUS_EPSILON - 1f;}  }
class C{  public void actionPerformed(ActionEvent ev){  final ClusterViewer viewer=getViewer();  int max=viewer.getPcoaTab().getPCoA().getLoadingVectorsBiPlot().size();  int number=Math.min(max,viewer.getPcoaTab().getBiplotSize());  String result=JOptionPane.showInputDialog(viewer.getFrame(),"Number of biplot vectors (0-" + max + "): ",number);  if (result != null && Basic.isInteger(result))   executeImmediately("set biplotSize=" + Basic.parseInt(result) + ";");}  }
class C{  public static String needFilename(String property) throws NoSuchPropertyException {  String filename=expandPath(needProperty(property));  if (!new File(filename).canRead()) {    throw new NoSuchPropertyException("Cannot read file `" + filename + "'. Check property `"+ property+ "' in configuration files");  }  return filename;}  }
class C{  public static void loadContent(Context context,@NonNull String content,String defaultTitle){  load(context,"",content,defaultTitle);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public ISpaceSynchronizeReplicaState recover(boolean transientOnly,boolean memoryOnly){  List<String> excludeTargets=getExcludeTargets();  List<SpaceURL> recTargets=_space.getClusterPolicy().m_ReplicationPolicy.getRecoverableTargets(excludeTargets);  return recover(recTargets,transientOnly,memoryOnly);}  }
class C{  public static void main(String[] argv){  showDocument(argv[0]);}  }
class C{  private Optional<Secret> prepareExistingSecret(){  val annotations=ImmutableMap.of(REQUEST_ANNOTATION,"[\"existing.k8s.io\"]");  val secretMeta=Mockito.mock(ObjectMeta.class);  when(secretMeta.getName()).thenReturn(EXISTING_CERT);  when(secretMeta.getAnnotations()).thenReturn(annotations);  val secret=Mockito.mock(Secret.class);  when(secret.getMetadata()).thenReturn(secretMeta);  return Optional.of(secret);}  }
class C{  protected boolean applyRules(Node n){  Element intonation=(Element)DomUtils.getAncestor(n,MaryXML.PROSODY);  return intonation == null || !intonation.getAttribute("rules").equals("off");}  }
class C{  public static java.sql.Timestamp toTimestamp(String date,String time){  java.util.Date newDate=toDate(date,time);  if (newDate != null) {    return new java.sql.Timestamp(newDate.getTime());  } else {    return null;  }}  }
class C{  public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){  Window window=activity.getWindow();  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);  View mChildView=mContentView.getChildAt(0);  if (mChildView != null) {    ViewCompat.setFitsSystemWindows(mChildView,false);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int statusBarHeight=getStatusBarHeight(activity);    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);      if (hideStatusBarBackground) {        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.setStatusBarColor(COLOR_TRANSLUCENT);      } else {        window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));      }      if (mChildView != null) {        ViewCompat.requestApplyInsets(mChildView);      }    } else {      ViewGroup mDecorView=(ViewGroup)window.getDecorView();      if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {        mChildView=mDecorView.getChildAt(0);        mContentView.removeView(mChildView);        mChildView=mContentView.getChildAt(0);        if (mChildView != null) {          FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();          if (lp != null && lp.topMargin >= statusBarHeight) {            lp.topMargin-=statusBarHeight;            mChildView.setLayoutParams(lp);          }        }        mDecorView.setTag(false);      }    }  }}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public void add(double d){  data.add((float)d);}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public void dataSourceLoaded(DataSourceInterface dataSource){  dataSourceAttributePanel.dataSourceLoaded(dataSource);}  }
class C{  private static int memcmp(byte[] s1,int s1Size,int s1offset,byte[] s2,int s2Size,int s2offset){  int n=s1Size - s1offset;  if (n > (s2Size - s2offset)) {    n=s2Size - s2offset;  }  for (int i=0; i < n; i++) {    if (s1[i + s1offset] != s2[i + s2offset]) {      return s1[i + s1offset] < s2[i + s2offset] ? -1 : 1;    }  }  return 0;}  }
class C{  public double sampleThroughput(){  final long total=getTotal();  final long delta=total - prevTotal;  prevTotal=total;  final long currTime=System.nanoTime();  final long elapsedTime=currTime - prevTime;  prevTime=currTime;  double result=delta / (elapsedTime / NANOSEC_PER_SECOND);  if (logger.isLoggable(Level.FINEST))   logger.log(Level.FINEST,"delta=" + delta + ", period="+ (elapsedTime / NANOSEC_PER_SECOND)+ "s, TP="+ result);  return result;}  }
class C{  CSyntaxKit(Lexer lexer){  super(lexer);}  }
class C{  public PointValuePair(final double[] point,final double value){  this(point,value,true);}  }
class C{  public ClientRequestReport(){  reportType=ReportType.RESULT;  this.requestStatus=null;  this.errorMessage=null;  this.currentPart=0;  this.totalParts=0;  this.totalOperations=0;  this.currentOperation=0;  this.progressDescription=null;}  }
class C{  public FeatureSetImpl(){  featureMap=new LinkedHashMap();}  }
class C{  @Nullable private NewScopeCalculatingInfo calculateInternal(NewBindingKey key,List<NewBindingKey> trail){  if (trail.contains(key)) {    messager.printMessage(Kind.WARNING,String.format("Circle! At %s, trail: %s",key,trail));    return null;  }  NewScopeCalculatingInfo result;  trail.add(key);  if (!trailPrinted && trail.size() > 100) {    trailPrinted=true;    messager.printMessage(Kind.ERROR,"Large dependency chain found. Check for circular dependencies: " + trail);  }  NewScopeCalculatingInfo scopeCalculatingInfo=allScopes.get(key);  if (scopeCalculatingInfo != null) {    result=new NewScopeCalculatingInfo(scopeCalculatingInfo.scope,scopeCalculatingInfo.size,Lists.newArrayList(trail));  } else {    if (Utils.hasBuiltinBinding(key)) {      result=calculateInternal(Utils.getElementKeyForBuiltinBinding(key),trail);    } else {      result=new NewScopeCalculatingInfo(scopeSizer.getLargestScope().getScope(),scopeSizer.getLargestScopeSize(),trail);      Set<NewDependencyInfo> dependencies=Utils.getDependencyInfo(dependencyMap,key);      if (dependencies == null) {        errors.add("Did not find key: " + key);      } else {        for (        NewDependencyInfo dependencyInfo : dependencies) {          for (          NewBindingKey k : dependencyInfo.getDependencies()) {            NewScopeCalculatingInfo sci=calculateInternal(k,trail);            if (sci == null) {              continue;            }            if (sci.size <= result.size) {              TypeElement commonChild=scopeSizer.getLargestDependantScope(sci.scope,result.scope);              int size=scopeSizer.getScopeSize(commonChild);              result=new NewScopeCalculatingInfo(commonChild,size,sci.trail);            }          }        }      }    }    allScopes.put(key,result);  }  trail.remove(trail.size() - 1);  return result;}  }
class C{  public static JsonArray array(boolean... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  boolean value : values) {    array.add(value);  }  return array;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200564,num0,skilltarget,skillname);}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  @Override public void backgroundColourUpdate(Color backgroundColour){}  }
class C{  IntDoublePair(double value,int position){  this.value=value;  this.position=position;}  }
class C{  public GroupsBanUserQuery(VkApiClient client,UserActor actor,int groupId,int userId){  super(client,"groups.banUser",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  userId(userId);}  }
class C{  public FilterInvalidValues(){  filterAnyInvalid=true;  columnsToFilterIfInvalid=null;}  }
class C{  public static NumericEntityEscaper above(final int codepoint){  return outsideOf(0,codepoint);}  }
class C{  private void afterSave(DataSupport baseObj,List<Field> supportedFields,long id){  throwIfSaveFailed(id);  assignIdValue(baseObj,getIdField(supportedFields),id);  if (!ignoreAssociations) {    updateAssociatedTableWithFK(baseObj);    insertIntermediateJoinTableValue(baseObj,false);  }}  }
class C{  private void computeTabVisibilitySortingHelper(RectF stackRect){  int referenceIndex=mReferenceOrderIndex;  if (referenceIndex == -1) {    int centerIndex=getTabIndexAtPositon(mLayout.getWidth() / 2.0f,mLayout.getHeight() / 2.0f);    if (mCurrentScrollDirection > 0)     centerIndex++;    if (mCurrentScrollDirection < 0)     centerIndex--;    referenceIndex=MathUtils.clamp(centerIndex,0,mStackTabs.length - 1);  }  final float width=mLayout.getWidth();  final float height=mLayout.getHeight();  final float left=MathUtils.clamp(stackRect.left,0,width);  final float right=MathUtils.clamp(stackRect.right,0,width);  final float top=MathUtils.clamp(stackRect.top,0,height);  final float bottom=MathUtils.clamp(stackRect.bottom,0,height);  final float stackArea=(right - left) * (bottom - top);  final float layoutArea=Math.max(width * height,1.0f);  final float stackVisibilityMultiplier=stackArea / layoutArea;  for (int i=0; i < mStackTabs.length; i++) {    mStackTabs[i].updateStackVisiblityValue(stackVisibilityMultiplier);    mStackTabs[i].updateVisiblityValue(referenceIndex);  }}  }
class C{  private Long canPeerSyncStop(Jedis peerJedis,long startTime) throws RedisSyncException {  if (System.currentTimeMillis() - startTime > config.getMaxTimeToBootstrap()) {    logger.warn("Warm up takes more than " + config.getMaxTimeToBootstrap() / 60000 + " minutes --> moving on");    return (long)-3;  }  logger.info("Checking for peer syncing");  String peerRedisInfo=peerJedis.info();  Long masterOffset=-1L;  Long slaveOffset=-1L;  Iterable<String> result=Splitter.on('\n').split(peerRedisInfo);  for (  String line : result) {    if (line.startsWith("master_repl_offset")) {      String[] items=line.split(":");      logger.info(items[0] + ": " + items[1]);      masterOffset=Long.parseLong(items[1].trim());    }    if (line.startsWith("slave0")) {      String[] items=line.split(",");      for (      String item : items) {        if (item.startsWith("offset")) {          String[] offset=item.split("=");          logger.info(offset[0] + ": " + offset[1]);          slaveOffset=Long.parseLong(offset[1].trim());        }      }    }  }  if (slaveOffset == -1) {    logger.error("Slave offset could not be parsed --> check memory overcommit configuration");    return (long)-1;  } else   if (slaveOffset == 0) {    logger.info("Slave offset is zero ---> Redis master node still dumps data to the disk");    return (long)-2;  }  Long diff=Math.abs(masterOffset - slaveOffset);  logger.info("masterOffset: " + masterOffset + " slaveOffset: "+ slaveOffset+ " current Diff: "+ diff+ " allowable diff: "+ config.getAllowableBytesSyncDiff());  if (diff < config.getAllowableBytesSyncDiff()) {    logger.info("master and slave are in sync!");    return (long)0;  } else   if (slaveOffset == 0) {    logger.info("slave has not started syncing");  }  return diff;}  }
class C{  public static void performSaveAs(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){  try {    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void addLanguage(String languageId){  query.append(" +languageId:" + languageId);}  }
class C{  private void close(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   supportFinishAfterTransition(); else   finish();}  }
class C{  public int double_set_new(){  String s=soot.PhaseOptions.getString(options,"double-set-new");  if (s.equalsIgnoreCase("hash"))   return double_set_new_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_new_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_new_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_new_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_new_heintze;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-new");}  }
class C{  public void execute(){  InputDataItem first=(InputDataItem)dataCBox1.getSelectedItem();  InputDataItem second=(InputDataItem)dataCBox2.getSelectedItem();  IMethodItem item=(IMethodItem)methodCBox.getSelectedItem();  if (item != null && !item.isApplicable()) {    NotificationsInSwing.showError(this,"Statistical method '" + item.getName() + "' is not correctly configured");    return;  }  if (first != null && second != null && item != null) {    dir.execute("compare" + " stats=" + item.getName() + " pid1="+ first.getPID()+ " pid2="+ second.getPID()+ " "+ item.getOptionsString()+ ";",dir.getMainViewer().getCommandManager());  }}  }
class C{  public static Zpsdmat aha(Zmat A){  Zpsdmat C=new Zpsdmat(A.ncol,A.ncol);  for (int k=0; k < A.nrow; k++) {    for (int i=0; i < A.ncol; i++) {      C.re[i][i]=C.re[i][i] + A.re[k][i] * A.re[k][i] + A.im[k][i] * A.im[k][i];      C.im[i][i]=0.;      for (int j=i + 1; j < A.ncol; j++) {        C.re[i][j]=C.re[i][j] + A.re[k][i] * A.re[k][j] + A.im[k][i] * A.im[k][j];        C.im[i][j]=C.im[i][j] + A.re[k][i] * A.im[k][j] - A.im[k][i] * A.re[k][j];      }    }  }  for (int i=0; i < A.ncol; i++) {    for (int j=i + 1; j < A.ncol; j++) {      C.re[j][i]=C.re[i][j];      C.im[j][i]=-C.im[i][j];    }  }  return C;}  }
class C{  public NewtonRaphsonSolver(){  this(DEFAULT_ABSOLUTE_ACCURACY);}  }
class C{  public static void toHtml(Grid grid,Writer writer){  render(grid,null,writer,HTML_TEMPLATE);}  }
class C{  @OnClick({R.id.primary1,R.id.primary2,R.id.primary3,R.id.primary4,R.id.primary5,R.id.primary6}) void onPrimaryColorClicked(View view){  Button btn=(Button)view;  int tintColor=btn.getBackgroundTintList().getDefaultColor();  Scoop.getInstance().update(Toppings.PRIMARY,tintColor);}  }
class C{  public boolean shouldJobPauseOrTerminate(){  if (Singleton.getBackgroundJobsEnabled() == false) {    return true;  }  while (CodeIndexer.shouldPauseAdding()) {    if (Singleton.getBackgroundJobsEnabled() == false) {      return true;    }    Singleton.getLogger().info("Pausing parser.");    try {      Thread.sleep(SLEEPTIME);    } catch (    InterruptedException ex) {    }  }  return false;}  }
class C{  private void dropBacklog(PersistentTopic persistentTopic,BacklogQuota quota){  double reductionFactor=0.9;  double targetSize=reductionFactor * quota.getLimit();  ManagedLedgerImpl mLedger=(ManagedLedgerImpl)persistentTopic.getManagedLedger();  long backlogSize=mLedger.getEstimatedBacklogSize();  if (log.isDebugEnabled()) {    log.debug("[{}] target size is [{}] for quota limit [{}], backlog size is [{}]",persistentTopic.getName(),targetSize,targetSize / reductionFactor,backlogSize);  }  ManagedCursor previousSlowestConsumer=null;  while (backlogSize > targetSize) {    ManagedCursor slowestConsumer=mLedger.getSlowestConsumer();    if (slowestConsumer == null) {      if (log.isDebugEnabled()) {        log.debug("[{}] slowest consumer null.",persistentTopic.getName());      }      break;    }    double messageSkipFactor=((backlogSize - targetSize) / backlogSize);    if (slowestConsumer == previousSlowestConsumer) {      log.info("[{}] Cursors not progressing, target size is [{}] for quota limit [{}], backlog size is [{}]",persistentTopic.getName(),targetSize,targetSize / reductionFactor,backlogSize);      break;    }    long entriesInBacklog=slowestConsumer.getNumberOfEntriesInBacklog();    int messagesToSkip=(int)(messageSkipFactor * entriesInBacklog);    try {      if (messagesToSkip == 0) {        if (log.isDebugEnabled()) {          log.debug("no messages to skip for [{}]",slowestConsumer);        }        break;      }      if (log.isDebugEnabled()) {        log.debug("Skipping [{}] messages on slowest consumer [{}] having backlog entries : [{}]",messagesToSkip,slowestConsumer.getName(),entriesInBacklog);      }      slowestConsumer.skipEntries(messagesToSkip,IndividualDeletedEntries.Include);    } catch (    Exception e) {      log.error("Error skipping [{}] messages from slowest consumer : [{}]",messagesToSkip,slowestConsumer.getName());    }    backlogSize=mLedger.getEstimatedBacklogSize();    previousSlowestConsumer=slowestConsumer;    if (log.isDebugEnabled()) {      log.debug("[{}] Updated unconsumed size = [{}]. skipFactor: [{}]",persistentTopic.getName(),backlogSize,messageSkipFactor);    }  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  SearchManager searchManager=((IViewerWithFindToolBar)getViewer()).getSearchManager();  if (searchManager != null)   searchManager.applyFindNext();}  }
class C{  @Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){  return cacheOnDisk(cacheOnDisk);}  }
class C{  public void fixDynFeatOnBoundaries(){  for (int k=1; k < vSize; k++) {    setIvseq(0,k,0.0);    setIvseq(nT - 1,k,0.0);  }}  }
class C{  private void handleMultiChannelCapabilityReportResponse(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  logger.debug("NODE {}: Process Multi-channel capability Report",getNode().getNodeId());  int receivedEndpointId=serialMessage.getMessagePayloadByte(offset) & 0x7F;  boolean dynamic=((serialMessage.getMessagePayloadByte(offset) & 0x80) != 0);  int genericDeviceClass=serialMessage.getMessagePayloadByte(offset + 1);  int specificDeviceClass=serialMessage.getMessagePayloadByte(offset + 2);  logger.debug("NODE {}: Endpoints are the same device class = {}",getNode().getNodeId(),endpointsAreTheSameDeviceClass ? "true" : false);  int startId=endpointsAreTheSameDeviceClass ? 1 : receivedEndpointId;  int endId=endpointsAreTheSameDeviceClass ? endpoints.size() : receivedEndpointId;  boolean supportsBasicCommandClass=getNode().supportsCommandClass(CommandClass.BASIC);  for (int endpointId=startId; endpointId <= endId; endpointId++) {    ZWaveEndpoint endpoint=endpoints.get(endpointId);    if (endpoint == null) {      logger.error("NODE {}: Endpoint {} not found. Cannot set command classes.",getNode().getNodeId(),endpointId);      continue;    }    if (!updateDeviceClass(endpoint,genericDeviceClass,specificDeviceClass,dynamic)) {      continue;    }    if (supportsBasicCommandClass) {      ZWaveCommandClass commandClass=new ZWaveBasicCommandClass(getNode(),getController(),endpoint);      endpoint.addCommandClass(commandClass);    }    addSupportedCommandClasses(serialMessage,offset,endpoint);  }  if (!endpointsAreTheSameDeviceClass) {    for (    ZWaveEndpoint ep : endpoints.values()) {      if (ep.getDeviceClass().getBasicDeviceClass() == Basic.NOT_KNOWN) {        return;      }    }  }}  }
class C{  @Override public void warning(SAXParseException e) throws SAXException {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200890,skilltarget,skillcaster,skillname);}  }
class C{  public void java_lang_SecurityManager_currentLoadedClass0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public ISAACRandom(){  setSeed(System.currentTimeMillis() + System.identityHashCode(this));}  }
class C{  public Scoop bind(Object obj,int toppingId,View view){  return bind(obj,toppingId,view,null);}  }
class C{  public synchronized void animatePanAbs(double dx,double dy,long duration){  m_transact.pan(dx,dy,duration);}  }
class C{  @Override protected void onBoundsChange(Rect bounds){  for (int i=0; i < getNumberOfLayers() - 1; i++) {    getContentDrawable(i).setBounds(bounds.left,bounds.top,bounds.right - mStrokeSize * 2,bounds.bottom - mStrokeSize * 2);  }  getProgressDrawable().setBounds(bounds);}  }
class C{  public void destroy(){  for (  Tab tab : mRewoundTabs) {    if (tab.isInitialized())     tab.destroy();  }}  }
class C{  public static int intersectLineLine(Line2D a,Line2D b,Point2D intersect){  double a1x=a.getX1(), a1y=a.getY1();  double a2x=a.getX2(), a2y=a.getY2();  double b1x=b.getX1(), b1y=b.getY1();  double b2x=b.getX2(), b2y=b.getY2();  return intersectLineLine(a1x,a1y,a2x,a2y,b1x,b1y,b2x,b2y,intersect);}  }
class C{  protected int do_append_file(String group_name,String appender_filename,long file_size,UploadCallback callback) throws IOException, MyException {  byte[] header;  boolean bNewConnection;  Socket storageSocket;  byte[] hexLenBytes;  byte[] appenderFilenameBytes;  int offset;  long body_len;  if ((group_name == null || group_name.length() == 0) || (appender_filename == null || appender_filename.length() == 0)) {    this.errno=ProtoCommon.ERR_NO_EINVAL;    return this.errno;  }  bNewConnection=this.newUpdatableStorageConnection(group_name,appender_filename);  try {    storageSocket=this.storageServer.getSocket();    appenderFilenameBytes=appender_filename.getBytes(ClientGlobal.g_charset);    body_len=2 * ProtoCommon.FDFS_PROTO_PKG_LEN_SIZE + appenderFilenameBytes.length + file_size;    header=ProtoCommon.packHeader(ProtoCommon.STORAGE_PROTO_CMD_APPEND_FILE,body_len,(byte)0);    byte[] wholePkg=new byte[(int)(header.length + body_len - file_size)];    System.arraycopy(header,0,wholePkg,0,header.length);    offset=header.length;    hexLenBytes=ProtoCommon.long2buff(appender_filename.length());    System.arraycopy(hexLenBytes,0,wholePkg,offset,hexLenBytes.length);    offset+=hexLenBytes.length;    hexLenBytes=ProtoCommon.long2buff(file_size);    System.arraycopy(hexLenBytes,0,wholePkg,offset,hexLenBytes.length);    offset+=hexLenBytes.length;    OutputStream out=storageSocket.getOutputStream();    System.arraycopy(appenderFilenameBytes,0,wholePkg,offset,appenderFilenameBytes.length);    offset+=appenderFilenameBytes.length;    out.write(wholePkg);    if ((this.errno=(byte)callback.send(out)) != 0) {      return this.errno;    }    ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(storageSocket.getInputStream(),ProtoCommon.STORAGE_PROTO_CMD_RESP,0);    this.errno=pkgInfo.errno;    if (pkgInfo.errno != 0) {      return this.errno;    }    return 0;  } catch (  IOException ex) {    if (!bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }    throw ex;  } finally {    if (bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_MAINTAIN_SKILL_TURNED_OFF(String value0){  return new SM_SYSTEM_MESSAGE(1300053,value0);}  }
class C{  public static boolean canAttack(Player player,VisibleObject target){  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canAttack.ordinal()]) {    if (!restrictions.canAttack(player,target)) {      return false;    }  }  return true;}  }
class C{  public void initialize() throws IOException {  CsvParserSettings parserSettings=new CsvParserSettings();  parserSettings.getFormat().setDelimiter(csvParserVo.getDelimiter().charAt(0));  parserSettings.getFormat().setComment(csvParserVo.getCommentCharacter().charAt(0));  parserSettings.setLineSeparatorDetectionEnabled(true);  parserSettings.setMaxColumns(getMaxColumnsForParsing(csvParserVo.getNumberOfColumns(),csvParserVo.getMaxColumns()));  parserSettings.setNullValue("");  parserSettings.setIgnoreLeadingWhitespaces(false);  parserSettings.setIgnoreTrailingWhitespaces(false);  parserSettings.setSkipEmptyLines(false);  parserSettings.getFormat().setQuote(null == csvParserVo.getQuoteCharacter() ? '\"' : csvParserVo.getQuoteCharacter().charAt(0));  parserSettings.getFormat().setQuoteEscape(null == csvParserVo.getEscapeCharacter() ? '\\' : csvParserVo.getEscapeCharacter().charAt(0));  blockCounter++;  initializeReader();  if (csvParserVo.getBlockDetailsList().get(blockCounter).getBlockOffset() == 0) {    parserSettings.setHeaderExtractionEnabled(csvParserVo.isHeaderPresent());  }  parser=new CsvParser(parserSettings);  parser.beginParsing(inputStreamReader);}  }
class C{  public static File renameFile(File file,String newName){  String absolutePath=file.getAbsolutePath();  String fileName=file.getName();  String newAbsolutePath=absolutePath.substring(0,absolutePath.lastIndexOf(fileName)) + newName;  return new File(newAbsolutePath);}  }
class C{  private void searchClassPath() throws Exception {  URL roots;  Enumeration<URL> metas=Launch.classLoader.getResources("META-INF");  while (metas.hasMoreElements()) {    roots=metas.nextElement();    File root=new File(roots.getPath());    File[] files=root.listFiles();    if (files != null) {      for (      File file : files) {        if (file.getName().equals("MANIFEST.MF") || (OMLStrippableTransformer.getEnvironment() == Environment.DEVELOPMENT && file.getName().endsWith(".MF"))) {          FileInputStream stream=new FileInputStream(file);          registerMod(file.getParentFile().getParentFile(),new Manifest(stream));          stream.close();        } else         if (file.getName().endsWith(".at")) {          OMLAccessTransformer.loadAccessTransformers(FileUtils.readLines(file));        }      }    }  }}  }
class C{  @Override public boolean isEnabled(){  return false;}  }
class C{  public ThrowStmt newThrowStmt(Value op){  return new JThrowStmt(op);}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(this.getModifiers());}  }
class C{  public static final Edge locateEdgeInGraph(UniqueVertexGraph gGraph,String sHead,String sTail){  VertexImpl vHead=new VertexImpl();  vHead.setLabel(sHead);  VertexImpl vTail=new VertexImpl();  vTail.setLabel(sTail);  return locateEdgeInGraph(gGraph,vHead,vTail);}  }
class C{  public static void toggleFullScreen(Activity activity){  Window window=activity.getWindow();  int flagFullscreen=WindowManager.LayoutParams.FLAG_FULLSCREEN;  if (isFullScreen) {    window.clearFlags(flagFullscreen);    isFullScreen=false;  } else {    window.setFlags(flagFullscreen,flagFullscreen);    isFullScreen=true;  }}  }
class C{  private Tab createNewTab(LoadUrlParams loadUrlParams,TabModel.TabLaunchType type,Tab parent,Intent intent){  int position=TabModel.INVALID_TAB_INDEX;  int index=mTabModel.indexOf(parent);  if (index != TabModel.INVALID_TAB_INDEX)   position=index + 1;  return createNewTab(loadUrlParams,type,parent,position,intent);}  }
class C{  public static int dpToPx(float dp){  return Math.round(dp * getDensity());}  }
class C{  public int minEffectiveTotalRange(){  if (fType == XSParticleDecl.PARTICLE_EMPTY) {    return 0;  }  if (fType == PARTICLE_MODELGROUP) {    return ((XSModelGroupImpl)fValue).minEffectiveTotalRange() * fMinOccurs;  }  return fMinOccurs;}  }
class C{  public static int[] shuffle(int[] intArray,int shuffleCount){  int length;  if (intArray == null || shuffleCount < 0 || (length=intArray.length) < shuffleCount) {    return null;  }  int[] out=new int[shuffleCount];  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    out[i - 1]=intArray[random];    int temp=intArray[length - i];    intArray[length - i]=intArray[random];    intArray[random]=temp;  }  return out;}  }
class C{  private List<String> buildIntervalStringList(Collection<Interval> intervals){  return intervals.stream().map(null).collect(Collectors.toList());}  }
class C{  public static void e(String msg,Exception e){  if (LOG_ENABLE) {    Log.e(TAG,buildMsg(msg),e);  }}  }
class C{  public void initialiseLongValues(int size){  if (size < 1) {    throw new IllegalArgumentException("Invalid array size");  }  longValues=new long[size];}  }
class C{  public AggregateConfig(String[] configs) throws ConfigurationException {  specific=ConfigurationProvider.getInstance(configs);}  }
class C{  public static UInteger uint(String value) throws NumberFormatException {  return value == null ? null : UInteger.valueOf(value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200586,skillcaster,skillname);}  }
class C{  public void onContentViewDestroyed(){}  }
class C{  static private Object _invoke(final Object targetObject,final IMethod invokeMethod,Object[] args) throws Throwable {  try {    if (_logger.isLoggable(Level.FINEST))     _logger.entering("DynamicSmartStub - " + targetObject.getClass().getName(),invokeMethod.getName(),args);    Object resultInv=invokeMethod.invoke(targetObject,args);    if (_logger.isLoggable(Level.FINEST))     _logger.exiting("DynamicSmartStub - " + targetObject.getClass().getName(),invokeMethod.getName(),resultInv);    return resultInv;  } catch (  InvocationTargetException e) {    if (_logger.isLoggable(Level.FINEST)) {      _logger.log(Level.FINEST,"DynamicSmartStub - Invoke method: [" + invokeMethod + "] on "+ "["+ targetObject.getClass()+ "] thrown exception: "+ e.toString());    }    throw e.getTargetException();  }catch (  IllegalArgumentException e) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"DynamicSmartStub - Failed to invoke method: [" + invokeMethod + "] on "+ "["+ targetObject.getClass()+ "] thrown exception: "+ e.toString()+ "\nInvoke method ClassLoader: "+ invokeMethod.getDeclaringClass().getClassLoader()+ "\nTarget object instance ClassLoader: "+ targetObject.getClass().getClassLoader());    }    throw e;  }catch (  IllegalAccessException e) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"DynamicSmartStub - Failed to invoke method: " + invokeMethod + "."+ "\nMethod does not have an access to the definition of "+ targetObject.getClass()+ " class.");    }    throw e;  }}  }
class C{  public void close(){  connectionPool.freeConnection(cpeer);}  }
class C{  public static DoubleStream shiftingWindowAveragingInt(IntStream intStream,int rollingFactor){  Objects.requireNonNull(intStream);  RollingOfIntSpliterator ofIntSpliterator=RollingOfIntSpliterator.of(intStream.spliterator(),rollingFactor);  return StreamSupport.stream(ofIntSpliterator,intStream.isParallel()).onClose(null).mapToDouble(null);}  }
class C{  private AppUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public XSNamedMap4Types(String namespace,SymbolHash map,short type){  super(namespace,map);  fType=type;}  }
class C{  public AdsGetSuggestionsQuery cities(String value){  return unsafeParam("cities",value);}  }
class C{  public void cancelRequests(Context context,boolean mayInterruptIfRunning){  List<WeakReference<Future<?>>> requestList=requestMap.get(context);  if (requestList != null) {    for (    WeakReference<Future<?>> requestRef : requestList) {      Future<?> request=requestRef.get();      if (request != null) {        request.cancel(mayInterruptIfRunning);      }    }  }  requestMap.remove(context);}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public static <T>ConsList<T> concat(ConsList<T> lhs,ConsList<T> rhs){  return lhs.concat(rhs);}  }
class C{  public boolean isPaused(){  return mPaused;}  }
class C{  public DynamicClassLoader(URL[] urls,ClassLoader parent,URLStreamHandlerFactory factory){  super(urls,parent,factory);  classPath=new java.util.HashSet(urls.length);  for (int i=0; i < urls.length; i++) {    classPath.add(urls[i]);  }}  }
class C{  public <T6>Pattern6<T1,T2,T3,T4,T5,T6> and(Observable<T6> other){  if (other == null) {    throw new NullPointerException();  }  return new Pattern6<T1,T2,T3,T4,T5,T6>(o1,o2,o3,o4,o5,other);}  }
class C{  private static void sendNotModified(ChannelHandlerContext ctx){  FullHttpResponse response=new DefaultFullHttpResponse(HTTP_1_1,NOT_MODIFIED);  setDateHeader(response);  ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);}  }
class C{  public float length(int u,int v){  if (u == v)   return 0; else   return 1f / (v - u);}  }
class C{  public AudioReorderQuery reorder(UserActor actor,int audioId){  return new AudioReorderQuery(getClient(),actor,audioId);}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  @Override protected void endNamespaceScope(QName element,Augmentations augs,boolean isEmpty) throws XNIException {  String eprefix=element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;  element.uri=fNamespaceContext.getURI(eprefix);  if (element.uri != null) {    element.prefix=eprefix;  }  if (fDocumentHandler != null) {    if (!isEmpty) {      fDocumentHandler.endElement(element,augs);    }  }  fNamespaceContext.popContext();}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1 && !viewer.getPcoaTab().isIs3dMode();}  }
class C{  public void test(String sql){  ParseResult result=new ParseResult();  ExecutePlan plan=new ExecutePlan();  parser.init(sql,null);  parser.parse(result);  plan.setExecuteType(ExecuteType.PARTITION);  SQLSelectStatement stmt=(SQLSelectStatement)parser.statement;  parser.parseMysqlQueary(result,plan,(MySqlSelectQueryBlock)stmt.getSelect().getQuery());  StringBuilder out=new StringBuilder();  MySqlOutputVisitor outPutVisitor=new MySqlOutputVisitor(out);  stmt.accept(outPutVisitor);  System.out.println();  System.out.println("/***********************agg*************************/");  System.out.println(plan.getMergeColumns());  System.out.println("setHasAllColumnExpr:" + result.isHasAllColumnExpr());  System.out.println(out.toString());  PrintUtil.printFildAlisMap(result.getAliaColumns());  System.out.println("/*********************group by**********************/");  System.out.println(plan.getGroupbyColumns());  System.out.println("/*********************order by**********************/");  System.out.println(plan.getOrderbyColumns());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_WeaponStatUp_A_TO_B(String skillcaster,String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1201041,skillcaster,skilltarget,value0,skillname);}  }
class C{  @Override public int nodeSize(){  return listOfKeys.size();}  }
class C{  public void saveGraph(DirectedGraph graph,String destFile) throws IOException {  if (graph == null)   throw new NullPointerException("Cannot dump null graph");  if (destFile == null)   throw new NullPointerException("No destination file");  Log.d(Mary.LOG,"Dumping directed graph in Mary format to " + destFile + " ...");  DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destFile)));  MaryHeader hdr=new MaryHeader(MaryHeader.DIRECTED_GRAPH);  hdr.writeTo(out);  Properties props=graph.getProperties();  if (props == null) {    out.writeShort(0);  } else {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    props.store(baos,null);    byte[] propData=baos.toByteArray();    out.writeShort(propData.length);    out.write(propData);  }  graph.getFeatureDefinition().writeBinaryTo(out);  dumpBinary(graph,out);  out.close();  Log.d(Mary.LOG," ... done\n");}  }
class C{  protected void checkItemBoundsChanged(Rectangle2D prev){  if (m_bounds.equals(prev))   return;  if (m_bounders != null && m_bounders.size() > 0) {    Object[] lstnrs=m_bounders.getArray();    for (int i=0; i < lstnrs.length; ++i) {      try {        ((ItemBoundsListener)lstnrs[i]).itemBoundsChanged(this);      } catch (      Exception e) {        s_logger.warning("Exception thrown by ItemBoundsListener: " + e + "\n"+ StringLib.getStackTrace(e));      }    }  }}  }
class C{  public RoleDataAccessException(){  super();}  }
class C{  public FriendsGetAvailableForCallQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){  super(client,"friends.getAvailableForCall",GetAvailableForCallFieldsResponse.class);  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  String newValueObj=(String)undoRedoObject.getNewValue();  envVarComboBox.setSelectedItem(newValueObj);}  }
class C{  public void enableSamples(Collection<String> sampleNames){  int size=disabledSamples.size();  disabledSamples.removeAll(sampleNames);  if (size != disabledSamples.size()) {    if (originalData == null) {      originalData=new DataTable();      originalData.copy(this);    }    Set<String> newDisabled=new HashSet<>();    newDisabled.addAll(disabledSamples);    copyEnabled(newDisabled,originalData);  }}  }
class C{  @Override public void optionSelected(Class<?> fieldPanelId,String selectedItem){  setSymbolTypeVisibility(fieldPanelId,selectedItem);  selectedFillPanelId=fieldPanelId;  FieldConfigBase fieldConfig=fieldConfigManager.get(FieldIdEnum.SIZE);  if (fieldConfig.isEnabled()) {    Expression expression=fieldConfig.getExpression();    if (expression instanceof LiteralExpressionImpl) {      LiteralExpressionImpl l=(LiteralExpressionImpl)expression;      Double d=(Double)l.getValue();      if (d <= 0.0) {        fieldConfigVisitor.populateField(FieldIdEnum.SIZE,getFilterFactory().literal(1));      }    }  }  dataHasChanged();}  }
class C{  protected AdsGetTargetGroupsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  ArraySet(Object[] elements){  this.elements=elements;}  }
class C{  static AttribsExpression makeAttribsExpr(String attribsExprStr,AttribsExpression parentAttribsExpr){  FlexibleStringExpander attribsExpr;  if (attribsExprStr.isEmpty()) {    if (parentAttribsExpr != null) {      attribsExpr=parentAttribsExpr.attribsExpr;    } else {      attribsExpr=FlexibleStringExpander.getInstance("");    }  } else {    if (parentAttribsExpr != null) {      attribsExpr=FlexibleStringExpander.getInstance(concatMapExpr(parentAttribsExpr.attribsExpr.getOriginal(),attribsExprStr));    } else {      attribsExpr=FlexibleStringExpander.getInstance(stripTrimMapExprDelims(attribsExprStr));    }  }  return new AttribsExpression(attribsExpr);}  }
class C{  private void populateOptionGroup(GraphicPanelFieldManager fieldConfigManager,Box optionBox,List<GroupConfigInterface> groupConfigList){  for (  GroupConfigInterface groupConfigI : groupConfigList) {    groupConfigI.createTitle(optionBox,null);    if (groupConfigI instanceof GroupConfig) {      GroupConfig groupConfig=(GroupConfig)groupConfigI;      for (      FieldConfigBase field : groupConfig.getFieldConfigList()) {        field.createUI();        field.revertToDefaultValue();        FieldPanel component=field.getPanel();        optionBox.add(component);        fieldConfigManager.addField(field);        optionFieldList.add(field);        if (field instanceof FieldConfigVendorOption) {          ((FieldConfigVendorOption)field).addToOptionBox(optionBox);        }      }      populateOptionGroup(fieldConfigManager,optionBox,groupConfig.getSubGroupList());    } else     if (groupConfigI instanceof MultiOptionGroup) {      MultiOptionGroup multiOptionGroupConfig=(MultiOptionGroup)groupConfigI;      fieldConfigManager.addMultiOptionGroup(multiOptionGroupConfig);      multiOptionGroupConfig.createUI(fieldConfigManager,optionBox,this.panelId);    }  }}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  public void close(){  if (blk != null) {    tx.bufferMgr().unpin(currentBuff);    blk=null;    currentBuff=null;    numberOfRecords=-1;  }}  }
class C{  public static Transform valueOf(String string){  Transform result=new Transform();  String[] tokens=StringUtil.split(string,",");  double x=Double.valueOf(tokens[0]);  double y=Double.valueOf(tokens[1]);  double angle=Double.valueOf(tokens[2]);  result.setTranslation(x,y);  result.setRotation(Math.toRadians(angle));  return result;}  }
class C{  private void prelim(double[] lowerBound,double[] upperBound){  printMethod();  final int n=currentBest.getDimension();  final int npt=numberOfInterpolationPoints;  final int ndim=bMatrix.getRowDimension();  final double rhosq=initialTrustRegionRadius * initialTrustRegionRadius;  final double recip=1d / rhosq;  final int np=n + 1;  for (int j=0; j < n; j++) {    originShift.setEntry(j,currentBest.getEntry(j));    for (int k=0; k < npt; k++) {      interpolationPoints.setEntry(k,j,ZERO);    }    for (int i=0; i < ndim; i++) {      bMatrix.setEntry(i,j,ZERO);    }  }  for (int i=0, max=n * np / 2; i < max; i++) {    modelSecondDerivativesValues.setEntry(i,ZERO);  }  for (int k=0; k < npt; k++) {    modelSecondDerivativesParameters.setEntry(k,ZERO);    for (int j=0, max=npt - np; j < max; j++) {      zMatrix.setEntry(k,j,ZERO);    }  }  int ipt=0;  int jpt=0;  double fbeg=Double.NaN;  do {    final int nfm=getEvaluations();    final int nfx=nfm - n;    final int nfmm=nfm - 1;    final int nfxm=nfx - 1;    double stepa=0;    double stepb=0;    if (nfm <= 2 * n) {      if (nfm >= 1 && nfm <= n) {        stepa=initialTrustRegionRadius;        if (upperDifference.getEntry(nfmm) == ZERO) {          stepa=-stepa;        }        interpolationPoints.setEntry(nfm,nfmm,stepa);      } else       if (nfm > n) {        stepa=interpolationPoints.getEntry(nfx,nfxm);        stepb=-initialTrustRegionRadius;        if (lowerDifference.getEntry(nfxm) == ZERO) {          stepb=FastMath.min(TWO * initialTrustRegionRadius,upperDifference.getEntry(nfxm));        }        if (upperDifference.getEntry(nfxm) == ZERO) {          stepb=FastMath.max(-TWO * initialTrustRegionRadius,lowerDifference.getEntry(nfxm));        }        interpolationPoints.setEntry(nfm,nfxm,stepb);      }    } else {      final int tmp1=(nfm - np) / n;      jpt=nfm - tmp1 * n - n;      ipt=jpt + tmp1;      if (ipt > n) {        final int tmp2=jpt;        jpt=ipt - n;        ipt=tmp2;      }      final int iptMinus1=ipt - 1;      final int jptMinus1=jpt - 1;      interpolationPoints.setEntry(nfm,iptMinus1,interpolationPoints.getEntry(ipt,iptMinus1));      interpolationPoints.setEntry(nfm,jptMinus1,interpolationPoints.getEntry(jpt,jptMinus1));    }    for (int j=0; j < n; j++) {      currentBest.setEntry(j,FastMath.min(FastMath.max(lowerBound[j],originShift.getEntry(j) + interpolationPoints.getEntry(nfm,j)),upperBound[j]));      if (interpolationPoints.getEntry(nfm,j) == lowerDifference.getEntry(j)) {        currentBest.setEntry(j,lowerBound[j]);      }      if (interpolationPoints.getEntry(nfm,j) == upperDifference.getEntry(j)) {        currentBest.setEntry(j,upperBound[j]);      }    }    final double objectiveValue=computeObjectiveValue(currentBest.toArray());    final double f=isMinimize ? objectiveValue : -objectiveValue;    final int numEval=getEvaluations();    fAtInterpolationPoints.setEntry(nfm,f);    if (numEval == 1) {      fbeg=f;      trustRegionCenterInterpolationPointIndex=0;    } else     if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {      trustRegionCenterInterpolationPointIndex=nfm;    }    if (numEval <= 2 * n + 1) {      if (numEval >= 2 && numEval <= n + 1) {        gradientAtTrustRegionCenter.setEntry(nfmm,(f - fbeg) / stepa);        if (npt < numEval + n) {          final double oneOverStepA=ONE / stepa;          bMatrix.setEntry(0,nfmm,-oneOverStepA);          bMatrix.setEntry(nfm,nfmm,oneOverStepA);          bMatrix.setEntry(npt + nfmm,nfmm,-HALF * rhosq);        }      } else       if (numEval >= n + 2) {        final int ih=nfx * (nfx + 1) / 2 - 1;        final double tmp=(f - fbeg) / stepb;        final double diff=stepb - stepa;        modelSecondDerivativesValues.setEntry(ih,TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);        gradientAtTrustRegionCenter.setEntry(nfxm,(gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);        if (stepa * stepb < ZERO && f < fAtInterpolationPoints.getEntry(nfm - n)) {          fAtInterpolationPoints.setEntry(nfm,fAtInterpolationPoints.getEntry(nfm - n));          fAtInterpolationPoints.setEntry(nfm - n,f);          if (trustRegionCenterInterpolationPointIndex == nfm) {            trustRegionCenterInterpolationPointIndex=nfm - n;          }          interpolationPoints.setEntry(nfm - n,nfxm,stepb);          interpolationPoints.setEntry(nfm,nfxm,stepa);        }        bMatrix.setEntry(0,nfxm,-(stepa + stepb) / (stepa * stepb));        bMatrix.setEntry(nfm,nfxm,-HALF / interpolationPoints.getEntry(nfm - n,nfxm));        bMatrix.setEntry(nfm - n,nfxm,-bMatrix.getEntry(0,nfxm) - bMatrix.getEntry(nfm,nfxm));        zMatrix.setEntry(0,nfxm,FastMath.sqrt(TWO) / (stepa * stepb));        zMatrix.setEntry(nfm,nfxm,FastMath.sqrt(HALF) / rhosq);        zMatrix.setEntry(nfm - n,nfxm,-zMatrix.getEntry(0,nfxm) - zMatrix.getEntry(nfm,nfxm));      }    } else {      zMatrix.setEntry(0,nfxm,recip);      zMatrix.setEntry(nfm,nfxm,recip);      zMatrix.setEntry(ipt,nfxm,-recip);      zMatrix.setEntry(jpt,nfxm,-recip);      final int ih=ipt * (ipt - 1) / 2 + jpt - 1;      final double tmp=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1);      modelSecondDerivativesValues.setEntry(ih,(fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);    }  } while (getEvaluations() < npt);}  }
class C{  public static Contexts allowAll(){  return new Contexts(ContextSet.empty(),true,true,true,true,true,true);}  }
class C{  @Override public List<ProcessChange> removeSubEquipment(final Long subEquipmentId,final ConfigurationElementReport subEquipmentReport){  log.debug("Removing SubEquipment " + subEquipmentId);  subEquipmentCache.acquireWriteLockOnKey(subEquipmentId);  try {    SubEquipment subEquipment=subEquipmentCache.get(subEquipmentId);    List<ProcessChange> changes=removeSubEquipmentTags(subEquipment,subEquipmentReport);    try {      changes.addAll(subEquipmentConfigTransacted.doRemoveSubEquipment(subEquipment,subEquipmentReport));      subEquipmentCache.releaseWriteLockOnKey(subEquipmentId);      changes.addAll(removeEquipmentControlTags(subEquipment,subEquipmentReport));      subEquipmentFacade.removeAliveTimer(subEquipmentId);      subEquipmentFacade.removeCommFault(subEquipmentId);      subEquipmentCache.remove(subEquipmentId);      subEquipmentFacade.removeSubEquipmentFromEquipment(subEquipment.getParentId(),subEquipmentId);      return changes;    } catch (    RuntimeException e) {      subEquipmentReport.setFailure("Exception caught while removing Sub-equipment " + subEquipmentId);      throw new UnexpectedRollbackException("Exception caught while removing Sub-equipment",e);    }  } catch (  CacheElementNotFoundException e) {    log.debug("SubEquipment not found in cache - unable to remove it.",e);    subEquipmentReport.setWarning("SubEquipment not found in cache so cannot be removed.");    return new ArrayList<ProcessChange>();  } finally {    if (subEquipmentCache.isWriteLockedByCurrentThread(subEquipmentId)) {      subEquipmentCache.releaseWriteLockOnKey(subEquipmentId);    }  }}  }
class C{  public T dotProduct(final FieldVector3D<T> v){  return x.linearCombination(x,v.x,y,v.y,z,v.z);}  }
class C{  public IdsQuery(String typeName,Object[] ids,Object[] routings){  this(typeName,ids,null,routings,QueryResultType.DEFAULT);}  }
class C{  public Matrix timesEquals(double s){  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s * A[i][j];    }  }  return this;}  }
class C{  public void registerWith(@NotNull ScopedDataBinder binder){  assert myFormFactor != null : "register() called on FormFactorApiComboBox before init()";  binder.register(FormFactorUtils.getTargetComboBoxKey(myFormFactor),this,TARGET_COMBO_BINDING);}  }
class C{  @Override public boolean next(){  return leaf == null ? false : leaf.next();}  }
class C{  public AppsGetCatalogQuery(VkApiClient client,int count){  super(client,"apps.getCatalog",GetCatalogResponse.class);  count(count);}  }
class C{  private Dimension resolveDimensionName(String dimensionName){  Dimension dimension=dimensionDictionary.findByApiName(dimensionName);  if (dimension == null) {    String msg=ErrorMessageFormat.UNABLE_TO_FIND_DIMENSION_FROM_DICTIONARY.format(dimensionName);    LOG.error(msg);    throw new DeserializationException(msg);  }  return dimension;}  }
class C{  @Override public SLDDataInterface createRasterSLDData(File rasterFile){  if (rasterFile == null) {    return null;  }  StyledLayerDescriptor sld=null;  AbstractGridFormat format=GridFormatFinder.findFormat(rasterFile);  AbstractGridCoverage2DReader reader=null;  try {    reader=format.getReader(rasterFile);  } catch (  UnsupportedOperationException e) {    ConsoleManager.getInstance().error(this,Localisation.getField(RasterTool.class,"RasterReader.unknownFormat") + rasterFile.getAbsolutePath());    return null;  }  BufferedImage img=null;  try {    img=ImageIO.read(rasterFile);  } catch (  IOException e) {    ConsoleManager.getInstance().exception(this,e);    return null;  }  WritableRaster raster=img.getRaster();  Style style=createRGBStyle(reader,raster);  sld=sf.createStyledLayerDescriptor();  NamedLayer namedLayer=sf.createNamedLayer();  namedLayer.addStyle(style);  sld.addStyledLayer(namedLayer);  File sldFilename=ExternalFilenames.createSLDFilename(rasterFile);  StyleWrapper styleWrapper=new StyleWrapper(sldFilename.getName());  String sldContents=sldWriter.encodeSLD(null,sld);  SLDData sldData=new SLDData(styleWrapper,sldContents);  sldData.setSLDFile(sldFilename);  sldData.setReadOnly(false);  return sldData;}  }
class C{  private void updateElapsedTimeValues(long elapsedTimeMs){  elapsedTimeMs=Math.abs(elapsedTimeMs);  mTempHours=getHours(elapsedTimeMs);  mTempMins=getMins(elapsedTimeMs,mTempHours);  mTempSecs=getSecs(elapsedTimeMs,mTempHours,mTempMins);  mTempTenthsOfSecs=getTenthsOfSecs(elapsedTimeMs,mTempHours,mTempMins,mTempSecs);}  }
class C{  protected MessageReactor findMessageReactor(byte[] messageType,int offset,int length){  for (int i=0; i < messageReactors.length; i++) {    if (NodeUtil.equals(messageType,offset,length,messageReactors[i].messageType,0,messageReactors[i].messageType.length)) {      return messageReactors[i];    }  }  return null;}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  @Override public void createOrUpdateMetadata(byte[] metadata) throws IOException {  checkClosedOrInError("createOrUpdateMetadata");  String zkPath=getZKPath();  LOG.debug("Setting application specific metadata on {}",zkPath);  try {    Stat currentStat=writerZKC.get().exists(zkPath,false);    if (currentStat == null) {      if (metadata.length > 0) {        Utils.zkCreateFullPathOptimistic(writerZKC,zkPath,metadata,writerZKC.getDefaultACL(),CreateMode.PERSISTENT);      }    } else {      writerZKC.get().setData(zkPath,metadata,currentStat.getVersion());    }  } catch (  InterruptedException ie) {    throw new DLInterruptedException("Interrupted on creating or updating container metadata",ie);  }catch (  Exception exc) {    throw new IOException("Exception creating or updating container metadata",exc);  }}  }
class C{  public static boolean isDateAfterToday(String date){  if (isEmpty(date))   return defaultEmptyOK;  int dateSlash1=date.indexOf("/");  int dateSlash2=date.lastIndexOf("/");  if (dateSlash1 <= 0)   return false;  java.util.Date passed=null;  if (dateSlash1 == dateSlash2) {    String month=date.substring(0,dateSlash1);    String day="28";    String year=date.substring(dateSlash1 + 1);    if (!isDate(year,month,day))     return false;    try {      int monthInt=Integer.parseInt(month);      int yearInt=Integer.parseInt(year);      Calendar calendar=Calendar.getInstance();      calendar.set(yearInt,monthInt - 1,0,0,0,0);      calendar.add(Calendar.MONTH,1);      passed=new java.util.Date(calendar.getTime().getTime());    } catch (    Exception e) {      passed=null;    }  } else {    String month=date.substring(0,dateSlash1);    String day=date.substring(dateSlash1 + 1,dateSlash2);    String year=date.substring(dateSlash2 + 1);    if (!isDate(year,month,day))     return false;    passed=UtilDateTime.toDate(month,day,year,"0","0","0");  }  java.util.Date now=UtilDateTime.nowDate();  if (passed != null) {    return passed.after(now);  } else {    return false;  }}  }
class C{  public Set<Value> mayAliasesAtExit(Value v){  Set<Value> res=new HashSet<Value>();  for (  Unit u : graph.getTails()) {    Set<Set<Value>> flow=getFlowAfter(u);    for (    Set<Value> set : flow) {      if (set.contains(v))       res.addAll(set);    }  }  return res;}  }
class C{  public static X509Certificate decodeCertificate(InputStream inputStream) throws UaException {  Preconditions.checkNotNull(inputStream,"inputStream cannot be null");  CertificateFactory factory;  try {    factory=CertificateFactory.getInstance("X.509");  } catch (  CertificateException e) {    throw new UaException(StatusCodes.Bad_InternalError,e);  }  try {    return (X509Certificate)factory.generateCertificate(inputStream);  } catch (  CertificateException|ClassCastException e) {    throw new UaException(StatusCodes.Bad_CertificateInvalid,e);  }}  }
class C{  public DependentKeyIndex createDependentKeyIndex(CacheLoaderEngine cacheLoaderEngine,Extractor[] keyExtractors,Operation ownerObjectFilter){  DependentKeyIndex dependentKeyIndex=null;  for (  DependentKeyIndex each : this.dependentKeyIndexes) {    if (Arrays.equals(each.getKeyExtractors(),keyExtractors)) {      dependentKeyIndex=each;      break;    }  }  if (dependentKeyIndex == null) {    dependentKeyIndex=(keyExtractors.length > 1) ? new DependentTupleKeyIndex(cacheLoaderEngine,this,keyExtractors) : new DependentSingleKeyIndex(cacheLoaderEngine,this,keyExtractors);    dependentKeyIndex.setOwnerObjectFilter(ownerObjectFilter);    final LoadingTaskThreadPoolHolder threadPoolHolder=cacheLoaderEngine.getOrCreateThreadPool(this.getThreadPoolName());    dependentKeyIndex.setLoadingTaskThreadPoolHolder(threadPoolHolder);    threadPoolHolder.addDependentKeyIndex(dependentKeyIndex);    this.dependentKeyIndexes.add(dependentKeyIndex);  } else {    dependentKeyIndex.orOwnerObjectFilter(ownerObjectFilter);  }  return dependentKeyIndex;}  }
class C{  private void createExpressionParameterList(FilterNode node,int noOfExpressions,List<Expression> parameterFilter){  if (noOfExpressions <= node.getChildCount()) {    for (int index=0; index < noOfExpressions; index++) {      ExpressionNode expressionNode=(ExpressionNode)node.getChildAt(index);      Expression expression=addExpression(expressionNode);      parameterFilter.add(expression);    }  }}  }
class C{  @deprecated public CompactCharArray(char defaultValue){}  }
class C{  private void compareParserResults(String xmlFile,String oldXmlFile) throws IOException {  XMLSourceSinkParser newParser=XMLSourceSinkParser.fromFile(xmlFile);  PermissionMethodParser oldParser=PermissionMethodParser.fromFile(oldXmlFile);  if (newParser != null && oldParser != null) {    Assert.assertEquals(oldParser.getSources(),newParser.getSources());    Assert.assertEquals(oldParser.getSinks(),newParser.getSinks());  } else   Assert.fail();}  }
class C{  @Override public void onCancel(String callerTag){  ComponentsGetter cg=(ComponentsGetter)getActivity();  ArrayList<OCFile> list=new ArrayList<>();  list.add(mTargetFile);  cg.getFileOperationsHelper().removeFiles(list,true);  FileDataStorageManager storageManager=cg.getStorageManager();  boolean containsFavorite=false;  if (mTargetFile.isFolder()) {    Vector<OCFile> files=storageManager.getFolderContent(mTargetFile,false);    for (    OCFile file : files) {      containsFavorite=file.isFavorite() || containsFavorite;      if (containsFavorite)       break;    }  }  if (mTargetFile.isFavorite() || containsFavorite) {    OCFile folder=null;    if (mTargetFile.isFolder()) {      folder=mTargetFile;    } else {      folder=storageManager.getFileById(mTargetFile.getParentId());    }    folder.setEtag("");    storageManager.saveFile(folder);  }}  }
class C{  protected AppsGetCatalogQuery count(int value){  return unsafeParam("count",value);}  }
class C{  public boolean want(Edge e){  return e.isInstance();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CHAT_CMD_NEED_NAME_FIELD(String value0){  return new SM_SYSTEM_MESSAGE(1390153,value0);}  }
class C{  public void addCommunicationListener(FTPCommunicationListener listener){  communicationListeners.add(listener);}  }
class C{  public JavaRDD<String> readTextFile(String fileName){  JavaRDD<String> input=jsc.textFile(fileName);  return input.map(normalizationFunction);}  }
class C{  public static void startMe(Context _context){  Intent intent=new Intent(_context,LoginActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);  _context.startActivity(intent);}  }
class C{  public void renderVelocity(GL2 gl){  gl.glColor4fv(Preferences.getBodyVelocityColor(),0);  Vector2 c=this.getWorldCenter();  Vector2 v=this.getLinearVelocity();  double av=this.getAngularVelocity();  gl.glBegin(GL.GL_LINES);  gl.glVertex2d(c.x,c.y);  gl.glVertex2d(c.x + v.x,c.y + v.y);  gl.glEnd();  RenderUtilities.drawArc(gl,c.x,c.y,0.125,0,av);}  }
class C{  public static <T extends FieldElement<T>>void assertEquals(T[] m,T[] n){  if (m.length != n.length) {    Assert.fail("vectors not same length");  }  for (int i=0; i < m.length; i++) {    Assert.assertEquals(m[i],n[i]);  }}  }
class C{  public void init(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());  client=new EtcdClient(uris.toArray(new URI[uris.size()]));  client.setRetryHandler(retryPolicy);  initialSetAllFlagz();}  }
class C{  public boolean wantTag(Tag t){  throw new RuntimeException();}  }
class C{  @Override public double evaluate(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  return FastMath.sqrt(variance.evaluate(values,begin,length));}  }
class C{  public PhotosGetByIdQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public int flags(){  return theType.flags();}  }
class C{  public void truncate(){  setCapacity(count);}  }
class C{  public void addMember(LegionMember legionMember){  if (!legionMemberById.containsKey(legionMember.getObjectId())) {    legionMemberById.put(legionMember.getObjectId(),legionMember);  }}  }
class C{  public static Map<String,Object> createPartyContactMechPurpose(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_CREATE");  String errMsg=null;  Locale locale=(Locale)context.get("locale");  if (result.size() > 0) {    return result;  }  String contactMechId=(String)context.get("contactMechId");  String contactMechPurposeTypeId=(String)context.get("contactMechPurposeTypeId");  Timestamp fromDate=(Timestamp)context.get("fromDate");  GenericValue tempVal=null;  try {    tempVal=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).filterByDate("contactFromDate","contactThruDate","purposeFromDate","purposeThruDate").queryFirst();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    tempVal=null;  }  if (UtilValidate.isEmpty(fromDate)) {    fromDate=UtilDateTime.nowTimestamp();  }  if (tempVal != null) {    errMsg=UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_new_purpose_already_exists",locale);    errMsg+=": " + tempVal.getPrimaryKey().toString();    return ServiceUtil.returnError(errMsg);  } else {    GenericValue newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",fromDate));    try {      delegator.create(newPartyContactMechPurpose);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_add_purpose_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }  }  result.put("fromDate",fromDate);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public PrefixFileFilter(String[] prefixes,IOCase caseSensitivity){  if (prefixes == null) {    throw new IllegalArgumentException("The array of prefixes must not be null");  }  this.prefixes=new String[prefixes.length];  System.arraycopy(prefixes,0,this.prefixes,0,prefixes.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public Quaternion multiply(final double alpha){  return new Quaternion(alpha * q0,alpha * q1,alpha * q2,alpha * q3);}  }
class C{  public static int dayNumber(Timestamp stamp){  Calendar tempCal=toCalendar(stamp,TimeZone.getDefault(),Locale.getDefault());  return tempCal.get(Calendar.DAY_OF_WEEK);}  }
class C{  static boolean equal(Object v1,Object v2){  v1=maybeConvertToString(v1);  v2=maybeConvertToString(v2);  return Objects.equals(v1,v2);}  }
class C{  public void clear(){  for (int i=0; i < fTableSize; i++) {    fBuckets[i]=null;  }  fNum=0;}  }
class C{  public void loadFromFile(String sFilename){  try {    ByteArrayOutputStream bsOut=new ByteArrayOutputStream();    FileInputStream fiIn=new FileInputStream(sFilename);    int iData=0;    while ((iData=fiIn.read()) > -1)     bsOut.write(iData);    String sDataString=bsOut.toString();    setDataString(sDataString);  } catch (  IOException ioe) {    ioe.printStackTrace();    setDataString("");  }}  }
class C{  public InSpacePredicate(Set<?> inValues){  _inValues=inValues;}  }
class C{  private void openOldGui(){  SwingUtilities.invokeLater(null);}  }
class C{  public Vector3f normalize(){  float length=x * x + y * y + z * z;  if (length != 1f && length != 0f) {    length=1.0f / FastMath.sqrt(length);    return new Vector3f(x * length,y * length,z * length);  }  return clone();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200764,skillcaster,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_RETURN(int nameId){  return new SM_SYSTEM_MESSAGE(1300039,calculateNameId(nameId));}  }
class C{  public static AudioInputStream convertByteOrder(AudioInputStream in,boolean isBigEndian) throws IllegalArgumentException {  AudioInputStream converted;  AudioFormat sourceFormat, targetFormat;  if (in == null)   throw new IllegalArgumentException("the inputstream must not be null values");  converted=in;  sourceFormat=in.getFormat();  targetFormat=new AudioFormat(sourceFormat.getSampleRate(),sourceFormat.getSampleSizeInBits(),sourceFormat.getChannels(),true,isBigEndian);  if (targetFormat.isBigEndian() != sourceFormat.isBigEndian()) {    if (AudioSystem.isConversionSupported(targetFormat,sourceFormat))     converted=AudioSystem.getAudioInputStream(targetFormat,converted); else     throw new IllegalArgumentException("conversion of byte order not supported");  }  return converted;}  }
class C{  public boolean isApplicable(){  final CompareWindow viewer=(CompareWindow)getParent();  return viewer != null && viewer.getMode() == Comparer.COMPARISON_MODE.RELATIVE;}  }
class C{  protected void processThermostatSetpointReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int setpointTypeCode=serialMessage.getMessagePayloadByte(offset + 1);  int scale=(serialMessage.getMessagePayloadByte(offset + 2) >> 3) & 0x03;  try {    BigDecimal value=extractValue(serialMessage.getMessagePayload(),offset + 2);    logger.debug("NODE {}: Thermostat Setpoint report Scale = {}",this.getNode().getNodeId(),scale);    logger.debug("NODE {}: Thermostat Setpoint Value = {}",this.getNode().getNodeId(),value);    SetpointType setpointType=SetpointType.getSetpointType(setpointTypeCode);    if (setpointType == null) {      logger.error("NODE {}: Unknown Setpoint Type = {}, ignoring report.",this.getNode().getNodeId(),setpointTypeCode);      return;    }    Setpoint setpoint=setpoints.get(setpointType);    if (setpoint == null) {      setpoint=new Setpoint(setpointType);      setpoints.put(setpointType,setpoint);    }    setpoint.setInitialised();    logger.debug("NODE {}: Thermostat Setpoint Report, Type {} ({}), value = {}",this.getNode().getNodeId(),setpointType.getLabel(),setpointTypeCode,value.toPlainString());    ZWaveThermostatSetpointValueEvent zEvent=new ZWaveThermostatSetpointValueEvent(this.getNode().getNodeId(),endpoint,setpointType,scale,value);    this.getController().notifyEventListeners(zEvent);  } catch (  NumberFormatException e) {    return;  }}  }
class C{  public static Map<String,Object> executeFind(DispatchContext dctx,Map<String,?> context){  String entityName=(String)context.get("entityName");  EntityConditionList<EntityCondition> entityConditionList=UtilGenerics.cast(context.get("entityConditionList"));  List<String> orderByList=checkList(context.get("orderByList"),String.class);  boolean noConditionFind="Y".equals(context.get("noConditionFind"));  boolean distinct=UtilMisc.booleanValueVersatile(context.get("distinct"),false);  List<String> fieldList=UtilGenerics.checkList(context.get("fieldList"));  Locale locale=(Locale)context.get("locale");  Set<String> fieldSet=null;  if (fieldList != null) {    fieldSet=UtilMisc.makeSetWritable(fieldList);  }  Integer maxRows=(Integer)context.get("maxRows");  maxRows=maxRows != null ? maxRows : -1;  Delegator delegator=dctx.getDelegator();  EntityListIterator listIt=null;  int listSize=0;  try {    if (noConditionFind || (entityConditionList != null && entityConditionList.getConditionListSize() > 0)) {      listIt=EntityQuery.use(delegator).select(fieldSet).from(entityName).where(entityConditionList).orderBy(orderByList).cursorScrollInsensitive().maxRows(maxRows).distinct(distinct).queryIterator();      listSize=listIt.getResultsSizeAfterPartialList();    }  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonFindErrorRunning",UtilMisc.toMap("entityName",entityName,"errorString",e.getMessage()),locale));  }  Map<String,Object> results=ServiceUtil.returnSuccess();  results.put("listIt",listIt);  results.put("listSize",listSize);  return results;}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public int totalSize(){  int total=0;  for (  Map.Entry<K,Counter<V>> entry : counterMap.entrySet()) {    Counter<V> counter=entry.getValue();    total+=counter.size();  }  return total;}  }
class C{  synchronized void executed(RTEditText editor,Operation op){  Stack<Operation> undoStack=getUndoStack(editor);  Stack<Operation> redoStack=getRedoStack(editor);  while (!undoStack.empty() && op.canMerge(undoStack.peek())) {    Operation previousOp=undoStack.pop();    op.merge(previousOp);  }  push(op,undoStack);  redoStack.clear();}  }
class C{  private void populateResultsHeader(IVScanResult ivScanResult){  resultsPokemonName.setText(ivScanResult.pokemon.name);  resultsPokemonLevel.setText(getString(R.string.level_num,ivScanResult.estimatedPokemonLevel));}  }
class C{  public EqCommandTagException(final int code,final String descr){  super(code,descr);}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  @Override public boolean isDeprecated(){  return proto.getOptions().getDeprecated();}  }
class C{  public static boolean isUrl(String url){  Pattern pattern=Pattern.compile("^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\/])+$");  return pattern.matcher(url).matches();}  }
class C{  public int print(Graphics gc0,PageFormat format,int pagenumber) throws PrinterException {  Component panel=scrollPane.getViewport().getComponent(0);  if (panel != null && pagenumber == 0) {    Graphics2D gc=((Graphics2D)gc0);    Dimension dim=panel.getPreferredSize();    int image_w=dim.width;    int image_h=dim.height;    double paper_x=format.getImageableX() + 1;    double paper_y=format.getImageableY() + 1;    double paper_w=format.getImageableWidth() - 2;    double paper_h=format.getImageableHeight() - 2;    double scale_x=paper_w / image_w;    double scale_y=paper_h / image_h;    double scale=(scale_x <= scale_y) ? scale_x : scale_y;    double shift_x=paper_x + (paper_w - scale * image_w) / 2.0;    double shift_y=paper_y + (paper_h - scale * image_h) / 2.0;    gc.translate(shift_x,shift_y);    gc.scale(scale,scale);    panel.print(gc0);    return Printable.PAGE_EXISTS;  }  return Printable.NO_SUCH_PAGE;}  }
class C{  public void addLoadingSpinnerRotation(float rotation){  mLoadingSpinnerRotationDegrees=(mLoadingSpinnerRotationDegrees + rotation) % 1080;}  }
class C{  public void alignToFourBytesWithZeroFill(){  int alignedPos=SizeOf.roundToTimesOfFour(data.position());  ensureBufferSize((alignedPos - data.position()) * SizeOf.UBYTE);  while ((data.position() & 3) != 0) {    data.put((byte)0);  }  if (this.data.position() > this.dataBound) {    this.dataBound=this.data.position();  }}  }
class C{  public void loadBcpFile(String bcpFilename,String delimiter,List<Attribute> attributes,String dateFormatString,SourcelessConnectionManager connectionManager){  loadBcpFile(bcpFilename,delimiter,attributes,connectionManager,dateFormatString != null ? new SimpleDateFormat(dateFormatString) : null);}  }
class C{  public HectorCassandraClientConfigurer clusterName(String clusterName){  this.clusterName=clusterName;  return this;}  }
class C{  private synchronized static LRMIClassLoader createClassLoader(String className) throws LRMIClassLoaderCreationException {  final ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();  if (contextClassLoader == null)   throw new LRMIClassLoaderCreationException("attempt to create a LRMIClassLoader when there is no context class loader");  ServiceClassLoaderContext serviceClassLoaderContext=getServiceClassLoaderContext();  if (serviceClassLoaderContext == null) {    if (_logger.isLoggable(Level.FINEST))     logFinest("creating service class loader context [" + ClassLoaderHelper.getClassLoaderLogName(contextClassLoader) + "]");    serviceClassLoaderContext=new ServiceClassLoaderContext(ClassLoaderHelper.getClassLoaderLogName(contextClassLoader));    long classLoaderKey=ClassLoaderCache.getCache().putClassLoader(contextClassLoader);    serviceClassLoaderContextMap.put(classLoaderKey,serviceClassLoaderContext);  }  LRMIRemoteClassLoaderIdentifier identifier=null;  try {    identifier=LRMIConnection.getRemoteClassLoaderIdentifier();    if (identifier == null)     throw new LRMIClassLoaderCreationException("attempt to create a LRMIClassLoader when there is no remote class loader context");    LRMIClassLoader cl=serviceClassLoaderContext.getClassLoaderByRemoteId(identifier);    if (cl != null) {      if (_logger.isLoggable(Level.FINEST))       logFinest("current target has already associated LRMIClassLoader, using it");      return cl;    }    if (_logger.isLoggable(Level.FINEST))     logFinest("retrieving remote class provider [" + identifier.getRemoteLrmiRuntimeId() + "]");    IClassProvider classProvider=LRMIConnection.getClassProvider();    if (classProvider == null) {      if (_logger.isLoggable(Level.FINE))       logFine("could not get LRMIClassLoader for remote class loader [" + identifier.toString() + "]");      throw new LRMIClassLoaderCreationException("could not get LRMIClassLoader for remote class loader [" + identifier.toString() + "]");    }    if (_logger.isLoggable(Level.FINE))     logFine("creating new LRMIClassLoader connected to remote class loader [" + identifier.toString() + "]");    cl=new LRMIClassLoader(classProvider,contextClassLoader,serviceClassLoaderContext,identifier.getRemoteLrmiRuntimeId(),identifier.getRemoteClassLoaderId());    LRMIClassLoader previousClassLoader=serviceClassLoaderContext.putClassLoaderByRemoteId(identifier,cl);    if (previousClassLoader != null)     cl=previousClassLoader;    return cl;  } catch (  IOException e) {    logWarningOnExceptionCreatingLRMIClassLoader(className,identifier,e);    throw new LRMIClassLoaderCreationException("exception caught while creating LRMIClassLoader",e);  }catch (  IOFilterException e) {    logWarningOnExceptionCreatingLRMIClassLoader(className,identifier,e);    throw new LRMIClassLoaderCreationException("exception caught while creating LRMIClassLoader",e);  }}  }
class C{  public static String subString(String string,int beginIndex,int length){  if (string == null) {    return null;  }  final int endIndex=beginIndex + length;  if (beginIndex >= string.length()) {    return EMPTY;  }  if (endIndex > string.length()) {    return string.substring(beginIndex,string.length());  }  return string.substring(beginIndex,endIndex);}  }
class C{  public X509TrustManager removeDelegate(Object key){  return delegates.remove(key);}  }
class C{  @NotNull public FaceGroupingSet groupFaceListOnSingleFace(List<String> images){  List<ImageAndFace> imageAndFaces=new ArrayList<>();  for (  String image : images) {    imageAndFaces.add(new ImageAndFace<>(image,findSingleFace(image)));  }  List<String> faceIds=imageAndFaces.parallelStream().map(null).collect(Collectors.toList());  FaceGrouping groupings=faceTaskBuilder.groupFaces(faceIds).withResult();  return new FaceGroupingSet(imageAndFaces,groupings);}  }
class C{  public PolygonRenderer(int polyType){  m_polyType=polyType;}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyGreater(String propertyName,Comparable<?> value){  return property(propertyName,greater(value));}  }
class C{  public void unlockUserInput(){  locked=false;  tabbedPane.setEnabled(true);  setCursor(Cursor.getDefaultCursor());  getCommandManager().setEnableCritical(true);  getCommandManager().updateEnableState();}  }
class C{  private String createOutputFileName(String outputFileTemplate,int classId,String className,int numberOfIds){  String outputFile=null;  if (outputFileTemplate.contains("%d"))   outputFile=outputFileTemplate.replaceAll("%d","" + classId);  if (outputFileTemplate.contains("%s"))   outputFile=(outputFile == null ? outputFileTemplate : outputFile).replaceAll("%s",Basic.toCleanName(className));  if (outputFile == null && numberOfIds > 1)   outputFile=Basic.replaceFileSuffix(outputFileTemplate,"-" + classId + ".fasta");  if (outputFile == null)   outputFile=outputFileTemplate;  return outputFile;}  }
class C{  public void showOverlappingContainer(){  mFrameLayoutOverlappingViewContainer.setVisibility(VISIBLE);}  }
class C{  public AdsCreateTargetGroupQuery domain(String value){  return unsafeParam("domain",value);}  }
class C{  public SpaceEntryPathGetter(String path){  this._path=path;}  }
class C{  protected VideoRemoveFromAlbumQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  @SubscribeEvent public void postRender(RenderWorldLastEvent event){  EntityPlayerSP player=Minecraft.getMinecraft().thePlayer;  float x=(float)(player.lastTickPosX + (player.posX - player.lastTickPosX) * event.partialTicks);  float y=(float)(player.lastTickPosY + (player.posY - player.lastTickPosY) * event.partialTicks);  float z=(float)(player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * event.partialTicks);  float yaw=player.prevRotationYaw + (player.rotationYaw - player.prevRotationYaw) * event.partialTicks;  float pitch=player.prevRotationPitch + (player.rotationPitch - player.prevRotationPitch) * event.partialTicks;  long time_before_ns=System.nanoTime();  if (time_before_ns < retry_time_ns)   return;  boolean success=false;  try {    int size=this.videoProducer.getRequiredBufferSize();    this.buffer.clear();    this.headerbuffer.clear();    this.headerbuffer.putFloat(x);    this.headerbuffer.putFloat(y);    this.headerbuffer.putFloat(z);    this.headerbuffer.putFloat(yaw);    this.headerbuffer.putFloat(pitch);    this.videoProducer.getFrame(this.missionInit,this.buffer);    this.headerbuffer.flip();    ByteBuffer[] buffers={this.headerbuffer,this.buffer};    long time_after_render_ns=System.nanoTime();    success=this.connection.sendTCPBytes(buffers,size + POS_HEADER_SIZE);    long time_after_ns=System.nanoTime();    float ms_send=(time_after_ns - time_after_render_ns) / 1000000.0f;    float ms_render=(time_after_render_ns - time_before_ns) / 1000000.0f;    if (success)     this.failedTCPSendCount=0;  } catch (  Exception e) {    System.out.format(e.getMessage());  }  if (!success) {    System.out.format("Failed to send frame - will retry in %d seconds\n",RETRY_GAP_NS / 1000000000L);    retry_time_ns=time_before_ns + RETRY_GAP_NS;    this.failedTCPSendCount++;  }}  }
class C{  public boolean removeEdge(Edge e){  if (!edges.remove(e))   return false;  e.remove();  if (srcUnitToEdge.get(e.srcUnit()) == e) {    if (e.nextByUnit().srcUnit() == e.srcUnit()) {      srcUnitToEdge.put(e.srcUnit(),e.nextByUnit());    } else {      srcUnitToEdge.put(e.srcUnit(),null);    }  }  if (srcMethodToEdge.get(e.getSrc()) == e) {    if (e.nextBySrc().getSrc() == e.getSrc()) {      srcMethodToEdge.put(e.getSrc(),e.nextBySrc());    } else {      srcMethodToEdge.put(e.getSrc(),null);    }  }  if (tgtToEdge.get(e.getTgt()) == e) {    if (e.nextByTgt().getTgt() == e.getTgt()) {      tgtToEdge.put(e.getTgt(),e.nextByTgt());    } else {      tgtToEdge.put(e.getTgt(),null);    }  }  return true;}  }
