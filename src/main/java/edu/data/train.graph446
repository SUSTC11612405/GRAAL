class C{  public void parseForMethod(GenericDeclaration genericDecl,String signature,Class<?>[] rawExceptionTypes){  setInput(genericDecl,signature);  if (!eof) {    parseMethodTypeSignature(rawExceptionTypes);  } else {    Method m=(Method)genericDecl;    this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;    Class<?>[] parameterTypes=m.getParameterTypes();    if (parameterTypes.length == 0) {      this.parameterTypes=ListOfTypes.EMPTY;    } else {      this.parameterTypes=new ListOfTypes(parameterTypes);    }    Class<?>[] exceptionTypes=m.getExceptionTypes();    if (exceptionTypes.length == 0) {      this.exceptionTypes=ListOfTypes.EMPTY;    } else {      this.exceptionTypes=new ListOfTypes(exceptionTypes);    }    this.returnType=m.getReturnType();  }}  }
class C{  @GET public List<String> completeKeywords(){  return Arrays.asList("weight","height","address");}  }
class C{  public symbol the_symbol(){  return _the_symbol;}  }
class C{  public int tableLength(){  return ByteArray.readU16bit(info,0);}  }
class C{  public EnglishPossessiveFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void testDynLongMissingFunction() throws Exception {  checkSortMissingFunction("dyn_longdv","-1","4");}  }
class C{  public void insert(RectF rectF){  if (nodes[0] != null) {    int index=getIndex(rectF);    if (index != -1) {      nodes[index].insert(rectF);      return;    }  }  objects.add(rectF);  if (objects.size() > MAX_OBJECTS && level < MAX_OBJECTS) {    if (nodes[0] == null) {      split();    }    int i=0;    while (i < objects.size()) {      int index=getIndex(objects.get(i));      if (index != -1) {        nodes[index].insert(objects.remove(i));      } else {        i++;      }    }  }}  }
class C{  public ImageSource region(Rect sRegion){  this.sRegion=sRegion;  setInvariants();  return this;}  }
class C{  @Override public BNetwork reduce(Query.ReduceQuery query){  BNetwork network=query.getNetwork();  Collection<String> queryVars=query.getQueryVars();  LikelihoodWeighting isquery=new LikelihoodWeighting(query,nbSamples,maxSamplingTime);  List<Sample> samples=isquery.getSamples();  EmpiricalDistribution fullDistrib=new EmpiricalDistribution(samples);  BNetwork reduced=new BNetwork();  for (  String var : query.getSortedQueryVars()) {    Set<String> inputNodesIds=network.getNode(var).getAncestorsIds(queryVars);    for (    String inputNodeId : new ArrayList<String>(inputNodesIds)) {      ChanceNode inputNode=reduced.getChanceNode(inputNodeId);      if (inputNode.getDistrib() instanceof ContinuousDistribution) {        inputNodesIds.remove(inputNodeId);      }    }    ProbDistribution distrib=fullDistrib.getMarginal(var,inputNodesIds);    ChanceNode node=new ChanceNode(var,distrib);    for (    String inputId : inputNodesIds) {      node.addInputNode(reduced.getNode(inputId));    }    reduced.addNode(node);  }  return reduced;}  }
class C{  private void loadWaveforms(){  notifyPreloader(1,4,"Loading waveforms...");  File waveformsFile=new File(applicationFolder + File.separator + WAVEFORMS_PERSISTENCE_FILE);  Map<Integer,float[]> waveformsMap;  if (waveformsFile.exists())   waveformsMap=parseWaveformsFromJsonFile(waveformsFile); else   waveformsMap=new HashMap<>();  musicLibrary.addWaveforms(waveformsMap);}  }
class C{  public void emitLdc(int od){  if (od <= 255) {    emitop1(ldc1,od);  } else {    emitop2(ldc2,od);  }}  }
class C{  public CDisableAllViewAction(final BackEndDebuggerProvider debuggerProvider,final INaviView view){  m_debuggerProvider=Preconditions.checkNotNull(debuggerProvider,"IE01347: Manager argument can not be null");  m_view=Preconditions.checkNotNull(view,"IE01348: View argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Disable all view breakpoints");}  }
class C{  public void finish() throws Exception {}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LegendItemEntity)) {    return false;  }  LegendItemEntity that=(LegendItemEntity)obj;  if (!ObjectUtilities.equal(this.seriesKey,that.seriesKey)) {    return false;  }  if (this.seriesIndex != that.seriesIndex) {    return false;  }  if (!ObjectUtilities.equal(this.dataset,that.dataset)) {    return false;  }  return super.equals(obj);}  }
class C{  protected ChangeListener createListener(){  return new RangeSliderChangeListener();}  }
class C{  public void execute(LoggingService.Logger logger){  final long elapsedNowSecs=SystemClock.elapsedRealtime() / 1000;  if (!cancelled) {    if (executed && period == 0) {      logger.log(Log.ERROR,"Attempt to execute one off task  " + tag + " multiple "+ "times");      return;    } else {      this.executed=true;      this.executionTimes.add(elapsedNowSecs);    }  } else {    logger.log(Log.ERROR,"Attempt to execute task  " + tag + " after it was cancelled");    return;  }  final int driftAllowed=10;  if (period == 0) {    if (elapsedNowSecs > windowStopElapsedSecs + driftAllowed || elapsedNowSecs < windowStartElapsedSecs - driftAllowed) {      logger.log(Log.ERROR,"Mistimed execution for task " + tag);    } else {      logger.log(Log.INFO,"Successfully executed one-off task " + tag);    }  } else {    final int n=executionTimes.size();    if (elapsedNowSecs + driftAllowed < (createdAtElapsedSecs) + (n - 1) * this.period) {      logger.log(Log.ERROR,"Mistimed execution for task " + tag + ": run too early");    } else     if (elapsedNowSecs - driftAllowed > (createdAtElapsedSecs) + n * period) {      logger.log(Log.ERROR,"Mistimed execution for task " + tag + ": run too late");    } else {      logger.log(Log.INFO,"Successfully executed periodic task " + tag);    }  }}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=getRealCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  @Override protected NativeMemoryChunk alloc(int bucketedSize){  return new NativeMemoryChunk(bucketedSize);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  for (int i=0; i < m_exprs.length; i++) {    m_exprs[i].fixupVariables(vars,globalsSize);  }}  }
class C{  static void checkAccess(final int access,final int possibleAccess){  if ((access & ~possibleAccess) != 0) {    throw new IllegalArgumentException("Invalid access flags: " + access);  }  int pub=(access & Opcodes.ACC_PUBLIC) == 0 ? 0 : 1;  int pri=(access & Opcodes.ACC_PRIVATE) == 0 ? 0 : 1;  int pro=(access & Opcodes.ACC_PROTECTED) == 0 ? 0 : 1;  if (pub + pri + pro > 1) {    throw new IllegalArgumentException("public private and protected are mutually exclusive: " + access);  }  int fin=(access & Opcodes.ACC_FINAL) == 0 ? 0 : 1;  int abs=(access & Opcodes.ACC_ABSTRACT) == 0 ? 0 : 1;  if (fin + abs > 1) {    throw new IllegalArgumentException("final and abstract are mutually exclusive: " + access);  }}  }
class C{  public void validate() throws ConstraintViolationException {  ValidatorFactory factory=Validation.buildDefaultValidatorFactory();  Validator validator=factory.getValidator();  checkAttributeValueSerializable(this.getAttributes(),DAG.class.getName());  for (  OperatorMeta n : operators.values()) {    n.oioRoot=null;  }  for (  OperatorMeta n : operators.values()) {    n.nindex=null;    n.lowlink=null;    Set<ConstraintViolation<Operator>> constraintViolations=validator.validate(n.getOperator());    if (!constraintViolations.isEmpty()) {      Set<ConstraintViolation<?>> copySet=new HashSet<>(constraintViolations.size());      for (      ConstraintViolation<Operator> cv : constraintViolations) {        copySet.add(cv);      }      throw new ConstraintViolationException("Operator " + n.getName() + " violates constraints "+ copySet,copySet);    }    OperatorMeta.PortMapping portMapping=n.getPortMapping();    checkAttributeValueSerializable(n.getAttributes(),n.getName());    if (n.operatorAnnotation != null) {      if (!n.operatorAnnotation.partitionable()) {        for (        InputPortMeta pm : portMapping.inPortMap.values()) {          Boolean paralellPartition=pm.getValue(PortContext.PARTITION_PARALLEL);          if (paralellPartition) {            throw new ValidationException("Operator " + n.getName() + " is not partitionable but PARTITION_PARALLEL attribute is set");          }        }        if (n.getValue(OperatorContext.PARTITIONER) != null || n.attributes != null && !n.attributes.contains(OperatorContext.PARTITIONER) && Partitioner.class.isAssignableFrom(n.getOperator().getClass())) {          throw new ValidationException("Operator " + n.getName() + " provides partitioning capabilities but the annotation on the operator class declares it non partitionable!");        }      }      if (!n.operatorAnnotation.checkpointableWithinAppWindow()) {        if (n.getValue(OperatorContext.CHECKPOINT_WINDOW_COUNT) % n.getValue(OperatorContext.APPLICATION_WINDOW_COUNT) != 0) {          throw new ValidationException("Operator " + n.getName() + " cannot be check-pointed between an application window "+ "but the checkpoint-window-count "+ n.getValue(OperatorContext.CHECKPOINT_WINDOW_COUNT)+ " is not a multiple application-window-count "+ n.getValue(OperatorContext.APPLICATION_WINDOW_COUNT));        }      }    }    for (    InputPortMeta pm : portMapping.inPortMap.values()) {      checkAttributeValueSerializable(pm.getAttributes(),n.getName() + "." + pm.getPortName());      StreamMeta sm=n.inputStreams.get(pm);      if (sm == null) {        if ((pm.portAnnotation == null || !pm.portAnnotation.optional()) && pm.classDeclaringHiddenPort == null) {          throw new ValidationException("Input port connection required: " + n.name + "."+ pm.getPortName());        }      } else {        if (pm.classDeclaringHiddenPort != null) {          throw new ValidationException(String.format("Invalid port connected: %s.%s is hidden by %s.%s",pm.classDeclaringHiddenPort.getName(),pm.getPortName(),pm.operatorMeta.getOperator().getClass().getName(),pm.getPortName()));        }        DAG.Locality locality=sm.getLocality();        if (locality == DAG.Locality.THREAD_LOCAL) {          if (n.inputStreams.size() > 1) {            validateThreadLocal(n);          }        }        if (pm.portAnnotation != null && pm.portAnnotation.schemaRequired()) {          if (pm.attributes.get(PortContext.TUPLE_CLASS) == null) {            throw new ValidationException("Attribute " + PortContext.TUPLE_CLASS.getName() + " missing on port : "+ n.name+ "."+ pm.getPortName());          }        }      }    }    boolean allPortsOptional=true;    for (    OutputPortMeta pm : portMapping.outPortMap.values()) {      checkAttributeValueSerializable(pm.getAttributes(),n.getName() + "." + pm.getPortName());      if (!n.outputStreams.containsKey(pm)) {        if ((pm.portAnnotation != null && !pm.portAnnotation.optional()) && pm.classDeclaringHiddenPort == null) {          throw new ValidationException("Output port connection required: " + n.name + "."+ pm.getPortName());        }      } else {        if (pm.classDeclaringHiddenPort != null) {          throw new ValidationException(String.format("Invalid port connected: %s.%s is hidden by %s.%s",pm.classDeclaringHiddenPort.getName(),pm.getPortName(),pm.operatorMeta.getOperator().getClass().getName(),pm.getPortName()));        }        if (pm.portAnnotation != null && pm.portAnnotation.schemaRequired()) {          if (pm.attributes.get(PortContext.TUPLE_CLASS) == null) {            throw new ValidationException("Attribute " + PortContext.TUPLE_CLASS.getName() + " missing on port : "+ n.name+ "."+ pm.getPortName());          }        }      }      allPortsOptional&=(pm.portAnnotation != null && pm.portAnnotation.optional());    }    if (!allPortsOptional && n.outputStreams.isEmpty()) {      throw new ValidationException("At least one output port must be connected: " + n.name);    }  }  ValidationContext validatonContext=new ValidationContext();  for (  OperatorMeta n : operators.values()) {    if (n.nindex == null) {      findStronglyConnected(n,validatonContext);    }  }  if (!validatonContext.invalidCycles.isEmpty()) {    throw new ValidationException("Loops in graph: " + validatonContext.invalidCycles);  }  List<List<String>> invalidDelays=new ArrayList<>();  for (  OperatorMeta n : rootOperators) {    findInvalidDelays(n,invalidDelays,new Stack<OperatorMeta>());  }  if (!invalidDelays.isEmpty()) {    throw new ValidationException("Invalid delays in graph: " + invalidDelays);  }  for (  StreamMeta s : streams.values()) {    if (s.source == null) {      throw new ValidationException("Stream source not connected: " + s.getName());    }    if (s.sinks.isEmpty()) {      throw new ValidationException("Stream sink not connected: " + s.getName());    }  }  for (  OperatorMeta om : this.rootOperators) {    if (!(om.getOperator() instanceof InputOperator)) {      throw new ValidationException(String.format("Root operator: %s is not a Input operator",om.getName()));    }  }  Set<OperatorMeta> visited=Sets.newHashSet();  for (  OperatorMeta om : this.rootOperators) {    validateProcessingMode(om,visited);  }  validateAffinityRules();}  }
class C{  public NodeListImpl(Node rootNode,String tagName,boolean deepSearch){  mRootNode=rootNode;  mTagName=tagName;  mDeepSearch=deepSearch;}  }
class C{  public String encodeBody(){  StringBuffer retval=new StringBuffer(LESS_THAN).append(errorInfo.toString()).append(GREATER_THAN);  if (!parameters.isEmpty()) {    retval.append(SEMICOLON).append(parameters.encode());  }  return retval.toString();}  }
class C{  public <T>DataStream<T> applyOnNeighbors(final EdgesApply<K,EV,T> applyFunction){  return windowedStream.apply(new EdgesWindowFunction<>(applyFunction));}  }
class C{  private void drawFirstAnimation(Canvas canvas){  if (radius1 < getWidth() / 2) {    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    radius1=(radius1 >= getWidth() / 2) ? (float)getWidth() / 2 : radius1 + 1;    canvas.drawCircle(getWidth() / 2,getHeight() / 2,radius1,paint);  } else {    Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);    Canvas temp=new Canvas(bitmap);    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    temp.drawCircle(getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);    Paint transparentPaint=new Paint();    transparentPaint.setAntiAlias(true);    transparentPaint.setColor(getResources().getColor(android.R.color.transparent));    transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    if (cont >= 50) {      radius2=(radius2 >= getWidth() / 2) ? (float)getWidth() / 2 : radius2 + 1;    } else {      radius2=(radius2 >= getWidth() / 2 - dpToPx(4,getResources())) ? (float)getWidth() / 2 - dpToPx(4,getResources()) : radius2 + 1;    }    temp.drawCircle(getWidth() / 2,getHeight() / 2,radius2,transparentPaint);    canvas.drawBitmap(bitmap,0,0,new Paint());    if (radius2 >= getWidth() / 2 - dpToPx(4,getResources()))     cont++;    if (radius2 >= getWidth() / 2)     firstAnimationOver=true;  }}  }
class C{  void createLocalDevices(List<VPlexExtentInfo> extentInfoList) throws VPlexApiException {  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_CREATE_LOCAL_DEVICE);  s_logger.info("Create local device URI is {}",requestURI.toString());  Iterator<VPlexExtentInfo> extentInfoIter=extentInfoList.iterator();  while (extentInfoIter.hasNext()) {    ClientResponse response=null;    try {      VPlexExtentInfo extentInfo=extentInfoIter.next();      s_logger.info("Create local device for extent {}",extentInfo.getName());      VPlexStorageVolumeInfo storageVolumeInfo=extentInfo.getStorageVolumeInfo();      String storageVolumeName=storageVolumeInfo.getName();      Map<String,String> argsMap=new HashMap<String,String>();      argsMap.put(VPlexApiConstants.ARG_DASH_E,extentInfo.getPath());      argsMap.put(VPlexApiConstants.ARG_DASH_N,VPlexApiConstants.DEVICE_PREFIX + storageVolumeName);      argsMap.put(VPlexApiConstants.ARG_DASH_G,VPlexApiConstants.ARG_GEOMETRY_RAID0);      JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);      s_logger.info("Create local device POST data is {}",postDataObject.toString());      response=_vplexApiClient.post(requestURI,postDataObject.toString());      String responseStr=response.getEntity(String.class);      s_logger.info("Create local device response is {}",responseStr);      if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {        if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {          s_logger.info("Local device creation completing asynchronously");          _vplexApiClient.waitForCompletion(response);        } else {          String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);          throw VPlexApiException.exceptions.createLocalDeviceFailureStatus(String.valueOf(response.getStatus()),cause);        }      }      s_logger.info("Successfully created local device");    } catch (    VPlexApiException vae) {      throw vae;    }catch (    Exception e) {      throw VPlexApiException.exceptions.failedCreateLocalDevice(e);    } finally {      if (response != null) {        response.close();      }    }  }}  }
class C{  private void push(char c) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=c;  this.mode=c;  this.top+=1;}  }
class C{  public void start(){  if (!mRunning) {    mHealthEventBus.register(this);    for (    HealthCheck check : mHealthChecks) {      check.start(mHealthEventBus);    }    mRunning=true;  }}  }
class C{  public ArrowModifier(float length,float theta,Type type){  this(length,theta,type,true);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.EXACT_QUANTIFIER__MIN:    return getMin();case RegularExpressionPackage.EXACT_QUANTIFIER__MAX:  return getMax();case RegularExpressionPackage.EXACT_QUANTIFIER__UNBOUNDED_MAX:return isUnboundedMax();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void killStrategyWorker(String key){  if (m_strategyWorkers.containsKey(key)) {    StrategyRule strategy=m_strategyWorkers.get(key);    if (!strategy.isDone()) {      strategy.cancel();    }  }}  }
class C{  public final int indexOf(char c,int fromIndex){  if ((_offset + fromIndex) >= (_offset + _length))   throw new IndexOutOfBoundsException(String.format("From Index %d Is Out of Bounds",fromIndex));  for (int i=_offset + fromIndex, end=_offset + _length; i < end; i++) {    if (_array[i] == c)     return i - _offset;  }  return -1;}  }
class C{  private void initExtendedTypes(){  m_extendedTypes=new ExtendedType[m_initialSize];  for (int i=0; i < DTM.NTYPES; i++) {    m_extendedTypes[i]=m_defaultExtendedTypes[i];    m_table[i]=new HashEntry(m_defaultExtendedTypes[i],i,i,null);  }  m_nextType=DTM.NTYPES;}  }
class C{  private Module createClientModule(Classifier<?> client,Classifier<?> supplier,Class supplierFactory,Module supplierModule){  Module clientModule=new Module("ClientModule");  if (supplierFactory != null)   clientModule.addImport(supplierFactory,supplierModule); else   clientModule.addImport(supplier,supplierModule);  clientModule.addClassifier(client);  return clientModule;}  }
class C{  public static BufferedImage trimWhiteSpace(BufferedImage img){  return trimWhiteSpace(img,250,0,0,0,0);}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  double x=dataset.getXValue(series,item);  double y=dataset.getYValue(series,item);  double adjx=(this.dotWidth - 1) / 2.0;  double adjy=(this.dotHeight - 1) / 2.0;  if (!Double.isNaN(y)) {    RectangleEdge xAxisLocation=plot.getDomainAxisEdge();    RectangleEdge yAxisLocation=plot.getRangeAxisEdge();    double transX=domainAxis.valueToJava2D(x,dataArea,xAxisLocation) - adjx;    double transY=rangeAxis.valueToJava2D(y,dataArea,yAxisLocation) - adjy;    g2.setPaint(getItemPaint(series,item));    PlotOrientation orientation=plot.getOrientation();    if (orientation == PlotOrientation.HORIZONTAL) {      g2.fillRect((int)transY,(int)transX,this.dotHeight,this.dotWidth);    } else     if (orientation == PlotOrientation.VERTICAL) {      g2.fillRect((int)transX,(int)transY,this.dotWidth,this.dotHeight);    }    int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);    int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);    updateCrosshairValues(crosshairState,x,y,domainAxisIndex,rangeAxisIndex,transX,transY,orientation);  }}  }
class C{  private void backSubstitution(int p) throws ArithmeticException {  int n=rows.length;  double[] answer=new double[n];  double x;  for (int i=n - 1; i >= 0; i--) {    x=rows[i][n + p];    for (int j=i + 1; j < n; j++)     x-=answer[j] * rows[i][j];    answer[i]=x / rows[i][i];  }  solutions[p]=new Vector(answer);  return;}  }
class C{  protected long endTime(){  return timestamp + duration;}  }
class C{  public void removeAllStyleSheets(){  stylesheets.clear();}  }
class C{  public void captureVideo(ActionListener response){  impl.captureVideo(response);}  }
class C{  @Override public String toString(){  String ret="Data Type\t=" + dataType + "\n";  ret+="Prev. Tag Size\t=" + previuosTagSize + "\n";  ret+="Body size\t=" + bodySize + "\n";  ret+="timestamp\t=" + timestamp + "\n";  ret+="Body Data\t=" + body + "\n";  return ret;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:54.326 -0500",hash_original_method="C99FBA65B0D308569620507D6E099042",hash_generated_method="5CE80A6225762CA51E516040755CB8E9") @Override public void flush() throws IOException {  out.flush();}  }
class C{  public void showPerspective(final Perspective perspective){  if (perspective != null) {    Perspective oldPerspective=model.getSelectedPerspective();    if (oldPerspective == perspective) {      return;    }    model.setSelectedPerspective(perspective);    if (oldPerspective != null) {      oldPerspective.store(context);      ActionStatisticsCollector.getInstance().stopTimer(ActionStatisticsCollector.TYPE_PERSPECTIVE,oldPerspective.getName(),null);    }    perspective.apply(context);    getRestoreDefaultAction().setEnabled(!perspective.isUserDefined());    ActionStatisticsCollector.getInstance().startTimer(ActionStatisticsCollector.TYPE_PERSPECTIVE,perspective.getName(),null);    ActionStatisticsCollector.getInstance().log(ActionStatisticsCollector.TYPE_PERSPECTIVE,perspective.getName(),"show");  }}  }
class C{  public String toDebugString(){  String info="TITLE: " + title + "\n"+ "LINK: "+ link+ "\n"+ "URL: "+ url;  return info;}  }
class C{  public void printPrologStackTrace(PrintStream ps){  printPrologStackTrace(new PrintWriter(ps));}  }
class C{  public void revokeMembership(String jid) throws XMPPException {  changeAffiliationByAdmin(jid,"none",null);}  }
class C{  public AlgorithmInitializationException(Algorithm algorithm,String message){  super(algorithm,message);}  }
class C{  public LuaError(String message){  super(message);  this.level=1;}  }
class C{  public void optimize(){  double besteps=getMaxTime();  computeGeneralized(besteps);  double bestaicc=getAICC();  int GRID=1000;  double delta=besteps / GRID;  double MINEPS=1e-6;  eps=eps - delta;  while (eps > MINEPS) {    computeGeneralized(eps);    double aicc=getAICC();    if (aicc > bestaicc && params < size - 1) {      besteps=eps;      bestaicc=aicc;    }    eps=eps - delta;  }  computeGeneralized(besteps);}  }
class C{  protected void sequence_Backspace(ISerializationContext context,Backspace semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected static Vec4 computeDirectionOfMovement(DrawContext dc,Vec4 symbolPoint,Angle heading,double length){  View view=dc.getView();  Globe globe=dc.getGlobe();  double pixelSize=view.computePixelSizeAtDistance(view.getEyePoint().distanceTo3(symbolPoint));  Position position=globe.computePositionFromPoint(symbolPoint);  Matrix surfaceOrientation=globe.computeSurfaceOrientationAtPosition(position);  Vec4 dir=new Vec4(heading.sin(),heading.cos());  return dir.transformBy3(surfaceOrientation).normalize3().multiply3(length * pixelSize);}  }
class C{  @Override public ResultSet executeQuery() throws SQLException {  try {    int id=getNextId(TraceObject.RESULT_SET);    if (isDebugEnabled()) {      debugCodeAssign("ResultSet",TraceObject.RESULT_SET,id,"executeQuery()");    }synchronized (session) {      checkClosed();      closeOldResultSet();      ResultInterface result;      boolean scrollable=resultSetType != ResultSet.TYPE_FORWARD_ONLY;      boolean updatable=resultSetConcurrency == ResultSet.CONCUR_UPDATABLE;      try {        setExecutingStatement(command);        result=command.executeQuery(maxRows,scrollable);      }  finally {        setExecutingStatement(null);      }      resultSet=new JdbcResultSet(conn,this,result,id,closedByResultSet,scrollable,updatable,cachedColumnLabelMap);    }    return resultSet;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isInvert(){  return mIsInvert;}  }
class C{  public GeoDistanceRangeQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.442 -0500",hash_original_method="B5C1A087675A1945EC6C55F404B859EF",hash_generated_method="C071A397866D02A93D1A81C8028C5A31") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int helo(String hostname) throws IOException {  return sendCommand(SMTPCommand.HELO,hostname);}  }
class C{  public NominalToNumeric(DataSet dataSet){  fit(dataSet);}  }
class C{  private boolean isResponseFromLocation(Operation remotePeerResponse,String location,Collection<NodeState> nodes){  if (remotePeerResponse == null) {    return true;  }  URI remotePeerService=remotePeerResponse.getUri();  URI remoteNodeUri=UriUtils.buildUri(remotePeerService.getHost(),remotePeerService.getPort(),null,null);  String remoteNodeLocation=this.locationPerNodeURI.get(remoteNodeUri);  return location.equals(remoteNodeLocation);}  }
class C{  public NumberIsTooLargeException(Number wrong,Number max,boolean boundIsAllowed){  this(boundIsAllowed ? LocalizedFormats.NUMBER_TOO_LARGE : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,wrong,max,boundIsAllowed);}  }
class C{  public void loadMultiply(Matrix3f lhs,Matrix3f rhs){  for (int i=0; i < 3; i++) {    float ri0=0;    float ri1=0;    float ri2=0;    for (int j=0; j < 3; j++) {      float rhs_ij=rhs.get(i,j);      ri0+=lhs.get(j,0) * rhs_ij;      ri1+=lhs.get(j,1) * rhs_ij;      ri2+=lhs.get(j,2) * rhs_ij;    }    set(i,0,ri0);    set(i,1,ri1);    set(i,2,ri2);  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!klazz.isInstance(obj)) {    return false;  }  Object handler=null;  if (Proxy.isProxyClass(obj.getClass()) && (handler=Proxy.getInvocationHandler(obj)) instanceof AnnotationFactory) {    AnnotationFactory other=(AnnotationFactory)handler;    if (elements.length != other.elements.length) {      return false;    }    next:     for (    AnnotationMember el1 : elements) {      for (      AnnotationMember el2 : other.elements) {        if (el1.equals(el2)) {          continue next;        }      }      return false;    }    return true;  } else {    for (    final AnnotationMember el : elements) {      if (el.tag == AnnotationMember.ERROR) {        return false;      }      try {        if (!el.definingMethod.isAccessible()) {          el.definingMethod.setAccessible(true);        }        Object otherValue=el.definingMethod.invoke(obj);        if (otherValue != null) {          if (el.tag == AnnotationMember.ARRAY) {            if (!el.equalArrayValue(otherValue)) {              return false;            }          } else {            if (!el.value.equals(otherValue)) {              return false;            }          }        } else         if (el.value != AnnotationMember.NO_VALUE) {          return false;        }      } catch (      Throwable e) {        return false;      }    }    return true;  }}  }
class C{  public void testCreate_3args_3_1(){  System.out.println("create GroupOfPagesAuditCommand with crawler");  String siteUrl="";  List<String> pageUrlList=new ArrayList<String>();  Set<Parameter> paramSet=null;  auditCommandFactory.setAuditPageWithCrawler(true);  AuditCommand result=this.auditCommandFactory.create(siteUrl,pageUrlList,paramSet);  assertTrue(result instanceof GroupOfPagesCrawlerAuditCommandImpl);  EasyMock.verify(mockAuditDataService);  EasyMock.verify(mockAudit);}  }
class C{  @After public void tearDown() throws Exception {  testTearDown();  cleanUpDatabase();}  }
class C{  public static boolean testAarLine(double minX,double minY,double maxX,double maxY,double a,double b,double c){  double pX, pY, nX, nY;  if (a > 0.0) {    pX=maxX;    nX=minX;  } else {    pX=minX;    nX=maxX;  }  if (b > 0.0) {    pY=maxY;    nY=minY;  } else {    pY=minY;    nY=maxY;  }  double distN=c + a * nX + b * nY;  double distP=c + a * pX + b * pY;  return distN <= 0.0 && distP >= 0.0;}  }
class C{  protected int _offset(int absRank){  return absRank;}  }
class C{  public Item(String index,@Nullable String type,String id){  this.index=index;  this.type=type;  this.id=id;}  }
class C{  public JGeneralName(String title){  this.title=title;  initComponents();}  }
class C{  public static EWMA oneMinuteEWMA(){  return new EWMA(M1_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  private double calculateDistance(int pointA,int pointB){  if (pointA <= pointB) {    throw new IllegalArgumentException("pointA must be greater than pointB - A: " + pointA + " B: "+ pointB);  }  int start=getDistanceIndex(pointA);  double distance=getDistance(ntree.get(pointA),ntree.get(pointB));  distances[start + pointB]=distance;  return distance;}  }
class C{  public String toString(String pattern){  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).print(this);}  }
class C{  public void testAgainstSimple() throws Exception {  int num=atLeast(200);  for (int i=0; i < num; i++) {    Automaton a=AutomatonTestUtil.randomAutomaton(random());    a=AutomatonTestUtil.determinizeSimple(a);    Automaton b=Operations.determinize(a,Integer.MAX_VALUE);    assertTrue(Operations.sameLanguage(a,b));  }}  }
class C{  public String formatVector(List list,String delim){  return formatVector(list,delim,delim);}  }
class C{  @Override public void dispose(){  if (getParentFrame() != null) {    getParentFrame().removeChildFrame(this);    getParentFrame().createTitle("");  }  super.dispose();}  }
class C{  private void handleSendPost(String sharedUrl,String title,String description,String tags,boolean isPrivate,ShaarliAccount account){  Intent networkIntent=new Intent(this,NetworkService.class);  networkIntent.putExtra("action","postLink");  networkIntent.putExtra("sharedUrl",sharedUrl);  networkIntent.putExtra("title",title);  networkIntent.putExtra("description",description);  networkIntent.putExtra("tags",tags);  networkIntent.putExtra("privateShare",isPrivate);  networkIntent.putExtra("chosenAccountId",account.getId());  networkIntent.putExtra(NetworkService.EXTRA_MESSENGER,new Messenger(new networkHandler(this)));  startService(networkIntent);  finish();}  }
class C{  public static String convertToUTCString(int utcOffset){  int absUtcOffset=Math.abs(utcOffset);  return String.format("%s%s%02d:%02d","UTC",utcOffset >= 0 ? "+" : "-",Integer.valueOf(absUtcOffset / MILLISECONDS_PER_HOUR),Integer.valueOf((absUtcOffset / MILLISECONDS_PER_MINUTE) % MINUTES_PER_HOUR));}  }
class C{  private void algorithmDouglasPeucker(List<Entry> entries,double epsilon,int start,int end){  if (end <= start + 1) {    return;  }  int maxDistIndex=0;  double distMax=0;  Entry firstEntry=entries.get(start);  Entry lastEntry=entries.get(end);  for (int i=start + 1; i < end; i++) {    double dist=calcAngleBetweenLines(firstEntry,lastEntry,firstEntry,entries.get(i));    if (dist > distMax) {      distMax=dist;      maxDistIndex=i;    }  }  if (distMax > epsilon) {    keep[maxDistIndex]=true;    algorithmDouglasPeucker(entries,epsilon,start,maxDistIndex);    algorithmDouglasPeucker(entries,epsilon,maxDistIndex,end);  }}  }
class C{  public RandomAccessBuffer(){  super(1024);}  }
class C{  protected AbstractTranscoder(){}  }
class C{  private JSONWriter end(char mode,char c) throws JSONException {  if (this.mode != mode) {    throw new JSONException(mode == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(mode);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  public void derEncode(OutputStream out) throws IOException {  Collection<PKCS10Attribute> allAttrs=map.values();  PKCS10Attribute[] attribs=allAttrs.toArray(new PKCS10Attribute[map.size()]);  DerOutputStream attrOut=new DerOutputStream();  attrOut.putOrderedSetOf(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0),attribs);  out.write(attrOut.toByteArray());}  }
class C{  public static PrimitiveType checkIsPrimitiveType(Type type){  if (!isPrimitiveType(type)) {    throw new ODataSystemException("A primitive type is required, but '" + type.getFullyQualifiedName() + "' is not a primitive type: "+ type.getMetaType());  }  return (PrimitiveType)type;}  }
class C{  public boolean isNoCache(){  return noCache;}  }
class C{  public JMenu(String s,boolean b){  this(s);}  }
class C{  public static boolean pointInView(View v,float localX,float localY,float slop){  return localX >= -slop && localY >= -slop && localX < (v.getWidth() + slop) && localY < (v.getHeight() + slop);}  }
class C{  @Override public Set<Map.Entry<byte[],Map<String,byte[]>>> entrySet(){  throw new UnsupportedOperationException();}  }
class C{  public static List<String> enumDCEntries() throws WebssoClientException {  List<String> dcList=null;  try {    CdcSession cdcSession=null;    try {      cdcSession=CdcFactory.createCdcSessionViaIPC();      if (cdcSession == null) {        logger.error("Failed to create AFD CdcSession via IPC. ");        throw new WebssoClientException("AFD cdcSession is created null.");      } else {        dcList=cdcSession.enumDCEntries();        if (dcList == null) {          logger.error("AFD cdcSession returns null DC list.");          throw new WebssoClientException("AFD cdcSession returns null DC list.");        }      }    } catch (    Exception e) {      logger.error("Failed to create AFD CdcSession via IPC.",e);      throw new WebssoClientException("AFD client fails in getting affinitized DC.");    } finally {      if (cdcSession != null) {        cdcSession.close();      }    }  } catch (  java.lang.UnsatisfiedLinkError e) {    logger.info("Failed to init CdcSession, likly due to missing libcdcjni.so.",e);  }catch (  NoClassDefFoundError e) {    logger.info("Failed to init CdcSession, likly due to missing vmafd jar.",e);  }  return dcList;}  }
class C{  public static void resetAll(Context context){  PrefsManager.resetAll(context);}  }
class C{  public double nextGaussian(){  double result=super.nextGaussian();  println("nextGaussian=" + result);  return result;}  }
class C{  @Override public void postCall(Request request,int status,ServiceMethodInfo serviceMethodInfo) throws Exception {  HttpResponse httpResponse=new TraceableHttpServerResponse((Response)serviceMethodInfo.getAttribute(RESPONDER_ATTRIBUTE));  HttpServerResponseAdapter adapter=new HttpServerResponseAdapter(httpResponse);  respInterceptor.handle(adapter);}  }
class C{  private MediaPlayer initializeMediaPlayer(){  if (mediaPlayer == null) {    mediaPlayer=new MediaPlayer();    mediaPlayer.setWakeMode(getApplicationContext(),PowerManager.PARTIAL_WAKE_LOCK);    mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);    mediaPlayer.setOnPreparedListener(this);    mediaPlayer.setOnSeekCompleteListener(this);    mediaPlayer.setOnCompletionListener(this);  }  return mediaPlayer;}  }
class C{  public boolean isPanXEnabled(){  return mPanXEnabled;}  }
class C{  public void uninstall(ISelectionProvider selectionProvider){  if (selectionProvider == null)   return;  if (selectionProvider instanceof IPostSelectionProvider) {    IPostSelectionProvider provider=(IPostSelectionProvider)selectionProvider;    provider.removePostSelectionChangedListener(this);  } else {    selectionProvider.removeSelectionChangedListener(this);  }}  }
class C{  public static String generateSecret() throws HmacException {  try {    return Base64.encodeBase64String(generateToken().getBytes("UTF-8"));  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();    throw new HmacException("Cannot encode base64",e);  }}  }
class C{  public CachePerfStats(){  stats=null;}  }
class C{  public void addWarning(String msg){  addWarning(msg,null);}  }
class C{  public static boolean copyFile(String srcFilePath,String destFilePath) throws FileNotFoundException {  InputStream inputStream=new FileInputStream(srcFilePath);  return writeFile(destFilePath,inputStream);}  }
class C{  private void addHistoryUnitTax(PropertyImpl property,Installment installment,UnitTaxCalculationInfo unit,List<UnitTaxCalculationInfo> units,Map<Integer,UnitTaxCalculationInfo> unitsByUnitNo){  LOGGER.debug("Entered into addHistoryUnitTax");  LOGGER.debug("addHistoryUnitTax - units : " + units.size() + ", installment="+ installment);  Map<Date,Property> historyProperties=new TreeMap<Date,Property>();  for (  Property historyProperty : property.getBasicProperty().getPropertySet()) {    Date effectiveDate=historyProperty.getPropertyDetail().getDateOfCompletion() == null ? historyProperty.getEffectiveDate() : historyProperty.getPropertyDetail().getDateOfCompletion();    if (STATUS_ISHISTORY.equals(historyProperty.getStatus()) && propertyTaxUtil.between(effectiveDate,installment.getFromDate(),installment.getToDate())) {      historyProperties.put(historyProperty.getCreatedDate(),historyProperty);    }  }  LOGGER.info("addHistoryUnitTax - No of histories : " + historyProperties.size());  Map<Installment,TaxCalculationInfo> taxCalcInfoAndInstallment=null;  Boolean isAddUnit=Boolean.FALSE;  for (  Map.Entry<Date,Property> historyPropertyByDate : historyProperties.entrySet()) {    taxCalcInfoAndInstallment=new TreeMap<Installment,TaxCalculationInfo>();    Property historyProperty=historyPropertyByDate.getValue();    for (    Ptdemand ptDemand : historyProperty.getPtDemandSet()) {      if (ptDemand.getEgInstallmentMaster().equals(installment)) {        TaxCalculationInfo taxCalcInfo=propertyTaxUtil.getTaxCalInfo(ptDemand);      }    }  }  LOGGER.info("addHistoryUnitTax - units : " + units.size());  LOGGER.debug("Exiting addHistoryUnitTax");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void outdent(){  int length=indent.length();  if (length == 0) {    throw new IllegalArgumentException(" Outdent() without matching Indent().");  }  indent.delete(length - 2,length);}  }
class C{  public PSPProcessingException(){  super();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Deprecated public static boolean endCacheTransaction(){  return false;}  }
class C{  Circle2D(double x,double y,double radius){  this.x=x;  this.y=y;  this.radius=radius;}  }
class C{  public void addDenseUnit(CLIQUEUnit<V> unit){  Collection<CLIQUEInterval> intervals=unit.getIntervals();  for (  CLIQUEInterval interval : intervals) {    if (!BitsUtil.get(getDimensions(),interval.getDimension())) {      throw new IllegalArgumentException("Unit " + unit + "cannot be added to this subspace, because of wrong dimensions!");    }  }  getDenseUnits().add(unit);  coverage+=unit.numberOfFeatureVectors();}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public void addKnowledgeGroup(KnowledgeGroup group){  for (int i=0; i < this.knowledgeGroups.size(); i++) {    KnowledgeGroup g=this.knowledgeGroups.get(i);    if (group.isConflict(g)) {      throw new IllegalArgumentException("Conflict with group at index " + (i + 1));    }  }  List<KnowledgeEdge> edges=group.getEdges();  if (group.getType() == KnowledgeGroup.REQUIRED) {    for (    KnowledgeEdge edge : edges) {      this.checkAgainstForbidden(edge);    }  } else   if (group.getType() == KnowledgeGroup.FORBIDDEN) {    for (    KnowledgeEdge edge : edges) {      this.checkAgainstRequired(edge);    }  }  this.knowledgeGroups.add(group);  if (!group.isEmpty()) {    this.generateRequiredEdgeSet();  }}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.FILTER;}  }
class C{  private static int GetStaticBooleanField(JNIEnvironment env,int classJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticBooleanField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getBooleanValueUnchecked(null) ? 1 : 0;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private static void addLinesToMsg(XmppMsg msg,ArrayList<String> lines){  if (lines == null) {    return;  }  Collections.sort(lines);  for (  String line : lines) {    msg.appendLine(line);  }}  }
class C{  public DateMidnight roundFloorCopy(){  return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));}  }
class C{  public static synchronized ParticleUser fromNewCredentials(String user,String password){  Preconditions.checkArgument(truthy(user),"Username cannot be empty or null");  Preconditions.checkArgument(truthy(password),"Password cannot be empty or null");  SensitiveDataStorage sensitiveDataStorage=SDKGlobals.getSensitiveDataStorage();  sensitiveDataStorage.saveUser(user);  sensitiveDataStorage.savePassword(password);  return new ParticleUser(user,password);}  }
class C{  public void clearUnregisteredClassLoaders(){  ArrayList toUnregister=null;synchronized (registeredCLs) {    Iterator it=registeredCLs.values().iterator();    while (it.hasNext()) {      ScopedClassPool pool=(ScopedClassPool)it.next();      if (pool.isUnloadedClassLoader()) {        it.remove();        ClassLoader cl=pool.getClassLoader();        if (cl != null) {          if (toUnregister == null) {            toUnregister=new ArrayList();          }          toUnregister.add(cl);        }      }    }    if (toUnregister != null) {      for (int i=0; i < toUnregister.size(); i++) {        unregisterClassLoader((ClassLoader)toUnregister.get(i));      }    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.980 -0500",hash_original_method="9121421793EC5D37F14A312213FF0274",hash_generated_method="0E38B803B5F7EA7FC3B7A952B8C48B78") public String toString(){  return this.encode();}  }
class C{  protected void installComponents(){  arrowButton=createArrowButton();  if (arrowButton != null) {    comboBox.add(arrowButton);    configureArrowButton();  }  if (comboBox.isEditable()) {    addEditor();  }  comboBox.add(currentValuePane);}  }
class C{  private void startCameraSource() throws SecurityException {  int code=GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(getApplicationContext());  if (code != ConnectionResult.SUCCESS) {    Dialog dlg=GoogleApiAvailability.getInstance().getErrorDialog(this,code,RC_HANDLE_GMS);    dlg.show();  }  if (mCameraSource != null) {    try {      mPreview.start(mCameraSource,mGraphicOverlay);    } catch (    IOException e) {      Log.e(TAG,"Unable to start camera source.",e);      mCameraSource.release();      mCameraSource=null;    }  }}  }
class C{  @DSComment("IO movement methodName") @DSSpec(DSCat.IO_ACTION_METHOD) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:02.924 -0500",hash_original_method="602B0A8D272774ACD0101F14F2575F17",hash_generated_method="24AC78525D5C95BFCD6A262F72B1E55A") public final XmlResourceParser openXmlResourceParser(String fileName) throws IOException {  return openXmlResourceParser(0,fileName);}  }
class C{  public static double[][] deleteColumns(double[][] x,int... J){  return transpose(deleteRows(transpose(x),J));}  }
class C{  public static MessageInputStream toMessageInputStream(InputStream in){  return in instanceof MessageInputStream ? (MessageInputStream)in : new MessageInputStream(in);}  }
class C{  public void testGenerateSecret03() throws Exception {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  byte[] bb;  byte[] bb1=new byte[10];  for (int i=0; i < kAgs.length; i++) {    kAgs[i].init(privKey);    kAgs[i].doPhase(publKey,true);    bb=kAgs[i].generateSecret();    kAgs[i].init(privKey);    kAgs[i].doPhase(publKey,true);    bb1=new byte[bb.length + 10];    kAgs[i].generateSecret(bb1,9);    kAgs[i].init(privKey);    kAgs[i].doPhase(publKey,true);    kAgs[i].generateSecret("DES");  }}  }
class C{  protected void updateProjectExplorer(){  final Selection<?> selection=projectExplorerPart.getSelection();  final Collection<PathTypeFilter> filters=Collections.singleton(ALL);}  }
class C{  protected void initInfo(int record_id,String value){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;    String trxName=Trx.createTrxName();    MPayment p=new MPayment(Env.getCtx(),record_id,trxName);    fcheckReceipt.setSelected(p.isReceipt());    fcheckPayment.setSelected(!p.isReceipt());    p=null;    Trx.get(trxName,false).close();  } else {    String id;    id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",true);    if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))     fBPartner_ID.setValue(new Integer(id));    if (value != null && value.length() > 0) {      fDocumentNo.setValue(value);    } else {      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Payment_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();        String trxName=Trx.createTrxName();        MPayment p=new MPayment(Env.getCtx(),record_id,trxName);        fcheckReceipt.setSelected(p.isReceipt());        fcheckPayment.setSelected(!p.isReceipt());        p=null;        Trx.get(trxName,false).close();      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BankAccount_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))       fBankAccount_ID.setValue(new Integer(id));    }  }  return;}  }
class C{  private void trace(){  glUseProgram(rayTracingProgram);  if (mouseDown) {    currRotationAboutY=rotationAboutY + (mouseX - mouseDownX) * 0.01f;  } else {    currRotationAboutY=rotationAboutY;  }  cameraPosition.set((float)sin(-currRotationAboutY) * 3.0f,2.0f,(float)cos(-currRotationAboutY) * 3.0f);  viewMatrix.setLookAt(cameraPosition,cameraLookAt,cameraUp);  if (resetFramebuffer) {    projMatrix.setPerspective((float)Math.toRadians(60.0f),(float)width / height,1f,2f);    resizeFramebufferTexture();    resetFramebuffer=false;  }  projMatrix.invertPerspectiveView(viewMatrix,invViewProjMatrix);  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  float blendFactor=frameNumber / (frameNumber + 1.0f);  glUniform1f(blendFactorUniform,blendFactor);  glUniform1i(bounceCountUniform,bounceCount);  glUniform3f(eyeUniform,cameraPosition.x,cameraPosition.y,cameraPosition.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,-1,0)).sub(cameraPosition);  glUniform3f(ray00Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,1,0)).sub(cameraPosition);  glUniform3f(ray01Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,-1,0)).sub(cameraPosition);  glUniform3f(ray10Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,1,0)).sub(cameraPosition);  glUniform3f(ray11Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  glUniform1f(widthUniform,width);  glUniform1f(heightUniform,height);  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  glActiveTexture(GL_TEXTURE0);  glBindTexture(GL_TEXTURE_2D,tex);  glActiveTexture(GL_TEXTURE1);  glBindTexture(GL_TEXTURE_2D,boxesTexture);  glDrawArrays(GL_TRIANGLES,0,6);  glBindTexture(GL_TEXTURE_2D,0);  glActiveTexture(GL_TEXTURE0);  glBindTexture(GL_TEXTURE_2D,0);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);  glUseProgram(0);  frameNumber++;}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);}  }
class C{  public static void printOptions(Writer out,String[] names,String current) throws IOException {  for (int i=0; i < names.length; i++) {    String name=names[i];    printOption(out,name,name,name.equals(current));  }  printOption(out,"all","",current == null);}  }
class C{  public double nextDouble(){  return min + (max - min) * randomGenerator.raw();}  }
class C{  private static String normalizeSpecialCharacters(String uri){  StringBuilder sb=null;  int pos=0;  int n=uri.length();  for (int i=n; --i >= 0; ) {    char subst;switch (uri.charAt(i)) {case 0xfe13:case 0xfe55:case 0xff1a:      subst=':';    break;case 0xff0f:  subst='/';break;case 0xfe16:case 0xfe56:case 0xff1f:subst='?';break;case 0xfe5f:case 0xff03:subst='#';break;case 0x207c:case 0x208c:case 0xfe66:case 0xff1d:subst='=';break;case 0xfe60:case 0xff06:subst='&';break;case 0x2024:case 0xfe52:case 0xff0e:subst='.';break;default :continue;}if (sb == null) {sb=new StringBuilder(n);}sb.append(uri,pos,i).append(subst);pos=i + 1;}return sb == null ? uri : sb.toString();}  }
class C{  public int displaySize(){  return displaySize;}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int count=scrollingOffset / getItemHeight();  int pos=currentItem - count;  if (isCyclic && adapter.getItemsCount() > 0) {    while (pos < 0) {      pos+=adapter.getItemsCount();    }    pos%=adapter.getItemsCount();  } else   if (isScrollingPerformed) {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= adapter.getItemsCount()) {      count=currentItem - adapter.getItemsCount() + 1;      pos=adapter.getItemsCount() - 1;    }  } else {    pos=Math.max(pos,0);    pos=Math.min(pos,adapter.getItemsCount() - 1);  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * getItemHeight();  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  private void initSign(){  messDigestTrees.reset();  GMSSPrivateKeyParameters gmssPrivateKey=(GMSSPrivateKeyParameters)key;  if (gmssPrivateKey.isUsed()) {    throw new IllegalStateException("Private key already used");  }  if (gmssPrivateKey.getIndex(0) >= gmssPrivateKey.getNumLeafs(0)) {    throw new IllegalStateException("No more signatures can be generated");  }  this.gmssPS=gmssPrivateKey.getParameters();  this.numLayer=gmssPS.getNumOfLayers();  byte[] seed=gmssPrivateKey.getCurrentSeeds()[numLayer - 1];  byte[] OTSSeed=new byte[mdLength];  byte[] dummy=new byte[mdLength];  System.arraycopy(seed,0,dummy,0,mdLength);  OTSSeed=gmssRandom.nextSeed(dummy);  this.ots=new WinternitzOTSignature(OTSSeed,digestProvider.get(),gmssPS.getWinternitzParameter()[numLayer - 1]);  byte[][][] helpCurrentAuthPaths=gmssPrivateKey.getCurrentAuthPaths();  currentAuthPaths=new byte[numLayer][][];  for (int j=0; j < numLayer; j++) {    currentAuthPaths[j]=new byte[helpCurrentAuthPaths[j].length][mdLength];    for (int i=0; i < helpCurrentAuthPaths[j].length; i++) {      System.arraycopy(helpCurrentAuthPaths[j][i],0,currentAuthPaths[j][i],0,mdLength);    }  }  index=new int[numLayer];  System.arraycopy(gmssPrivateKey.getIndex(),0,index,0,numLayer);  byte[] helpSubtreeRootSig;  subtreeRootSig=new byte[numLayer - 1][];  for (int i=0; i < numLayer - 1; i++) {    helpSubtreeRootSig=gmssPrivateKey.getSubtreeRootSig(i);    subtreeRootSig[i]=new byte[helpSubtreeRootSig.length];    System.arraycopy(helpSubtreeRootSig,0,subtreeRootSig[i],0,helpSubtreeRootSig.length);  }  gmssPrivateKey.markUsed();}  }
class C{  public static boolean isVplexBackendVolume(UnManagedVolume volume){  if (null == volume || null == volume.getVolumeCharacterstics()) {    return false;  }  String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_VPLEX_BACKEND_VOLUME.toString());  return TRUE.equals(status);}  }
class C{  public ArrayIndexOutOfBoundsException(int sourceLength,int offset,int count){  super("length=" + sourceLength + "; regionStart="+ offset+ "; regionLength="+ count);}  }
class C{  public ThreadDeadlockDetector(){  this(ManagementFactory.getThreadMXBean());}  }
class C{  public void addWarnings(Collection<Warning> w){  warnings.addAll(w);}  }
class C{  public GridBagLayout(){  comptable=new Hashtable<Component,GridBagConstraints>();  defaultConstraints=new GridBagConstraints();}  }
class C{  static public void assertEquals(long expected,long actual){  assertEquals(null,expected,actual);}  }
class C{  public Options withOption(Option option){  this.options.add(option);  return this;}  }
class C{  public LocationRequestBuilder addLastLocation(@NonNull String provider,boolean isNullValid){  return addLastLocation(provider,null,isNullValid);}  }
class C{  public static Constraint<CharSequence> containsSymbol(){  return new ContainsSymbolConstraint();}  }
class C{  @Override protected void onNfcPushStateEnabled(){  toast(getString(R.string.nfcBeamAvailableEnabled));}  }
class C{  void exitPlugin(PluginResult result){  if (result.getResultType() == PluginResultType.CONTINUE) {    if (log.isDebugEnabled()) {      log.debug("Switch " + getSwitchInfoString() + " app handshake plugin {} returned {}."+ " Proceeding normally..",this.plugin.getClass().getSimpleName(),result);    }    enterNextPlugin();  } else   if (result.getResultType() == PluginResultType.DISCONNECT) {    log.error("Switch " + getSwitchInfoString() + " app handshake plugin {} returned {}. "+ "Disconnecting switch.",this.plugin.getClass().getSimpleName(),result);    mainConnection.disconnect();  } else   if (result.getResultType() == PluginResultType.QUARANTINE) {    log.warn("Switch " + getSwitchInfoString() + " app handshake plugin {} returned {}. "+ "Putting switch into quarantine state.",this.plugin.getClass().getSimpleName(),result);    setState(new QuarantineState(result.getReason()));  }}  }
class C{  public Capabilities capabilities(){  return new SocketTransportServiceCapabilities();}  }
class C{  private String replaceNBTTags(String rule,ArrayList<String> nbttags){  int openingIndex=rule.indexOf('{');  while (openingIndex != -1) {    int closingIndex=openingIndex + 1;    int bracketCounter=1;    for (; ; closingIndex++) {      if (closingIndex == rule.length()) {        System.err.println("Unbalanced brackets in Ruins template, offending rule: " + rule);        return rule;      }      if (rule.charAt(closingIndex) == '{') {        bracketCounter++;      } else       if (rule.charAt(closingIndex) == '}') {        bracketCounter--;        if (bracketCounter == 0) {          break;        }      }    }    String capture=rule.substring(openingIndex,closingIndex + 1);    nbttags.add(capture);    debugPrinter.println("template " + owner.getName() + " contains nbt tag: "+ capture);    String pre=rule.substring(0,openingIndex);    String post=rule.substring(closingIndex + 1,rule.length());    rule=pre + "NBT" + nbttags.size()+ post;    openingIndex=rule.indexOf('{');  }  return rule;}  }
class C{  public int hashCode(){  if (hashCode == Integer.MAX_VALUE) {    hashCode=0;    int len=getTabCount();    for (int i=0; i < len; i++) {      TabStop ts=getTab(i);      hashCode^=ts != null ? getTab(i).hashCode() : 0;    }    if (hashCode == Integer.MAX_VALUE) {      hashCode-=1;    }  }  return hashCode;}  }
class C{  public void copyFrom(Message o){  this.flags=o.flags & ~FLAGS_TO_CLEAR_ON_COPY_FROM;  this.what=o.what;  this.arg1=o.arg1;  this.arg2=o.arg2;  this.obj=o.obj;  this.replyTo=o.replyTo;  if (o.data != null) {    this.data=(Bundle)o.data.clone();  } else {    this.data=null;  }}  }
class C{  public SnackbarBuilder(Activity activity,SnackbarParentFinder parentFinder){  setup(activity);  parentView=parentFinder.findSnackbarParent(activity);}  }
class C{  @Override public void doRun(int run) throws Exception {  if (getRawOutput()) {    if (m_ZipDest == null) {      m_ZipDest=new OutputZipper(m_OutputFile);    }  }  if (m_Instances == null) {    throw new Exception("No Instances set");  }  Object[] seKey=m_SplitEvaluator.getKey();  Object[] key=new Object[seKey.length + 2];  key[0]=Utils.backQuoteChars(m_Instances.relationName());  key[1]="" + run;  System.arraycopy(seKey,0,key,2,seKey.length);  if (m_ResultListener.isResultRequired(this,key)) {    Instances runInstances=new Instances(m_Instances);    Instances train;    Instances test;    if (!m_randomize) {      int trainSize=Utils.round(runInstances.numInstances() * m_TrainPercent / 100);      int testSize=runInstances.numInstances() - trainSize;      train=new Instances(runInstances,0,trainSize);      test=new Instances(runInstances,trainSize,testSize);    } else {      Random rand=new Random(run);      runInstances.randomize(rand);      if (runInstances.classAttribute().isNominal()) {        int numClasses=runInstances.numClasses();        Instances[] subsets=new Instances[numClasses + 1];        for (int i=0; i < numClasses + 1; i++) {          subsets[i]=new Instances(runInstances,10);        }        Enumeration<Instance> e=runInstances.enumerateInstances();        while (e.hasMoreElements()) {          Instance inst=e.nextElement();          if (inst.classIsMissing()) {            subsets[numClasses].add(inst);          } else {            subsets[(int)inst.classValue()].add(inst);          }        }        for (int i=0; i < numClasses + 1; i++) {          subsets[i].compactify();        }        train=new Instances(runInstances,runInstances.numInstances());        test=new Instances(runInstances,runInstances.numInstances());        for (int i=0; i < numClasses + 1; i++) {          int trainSize=Utils.probRound(subsets[i].numInstances() * m_TrainPercent / 100,rand);          for (int j=0; j < trainSize; j++) {            train.add(subsets[i].instance(j));          }          for (int j=trainSize; j < subsets[i].numInstances(); j++) {            test.add(subsets[i].instance(j));          }          subsets[i]=null;        }        train.compactify();        test.compactify();        train.randomize(rand);        test.randomize(rand);      } else {        int trainSize=Utils.probRound(runInstances.numInstances() * m_TrainPercent / 100,rand);        int testSize=runInstances.numInstances() - trainSize;        train=new Instances(runInstances,0,trainSize);        test=new Instances(runInstances,trainSize,testSize);      }    }    try {      Object[] seResults=m_SplitEvaluator.getResult(train,test);      Object[] results=new Object[seResults.length + 1];      results[0]=getTimestamp();      System.arraycopy(seResults,0,results,1,seResults.length);      if (m_debugOutput) {        String resultName=("" + run + "."+ Utils.backQuoteChars(runInstances.relationName())+ "."+ m_SplitEvaluator.toString()).replace(' ','_');        resultName=Utils.removeSubstring(resultName,"weka.classifiers.");        resultName=Utils.removeSubstring(resultName,"weka.filters.");        resultName=Utils.removeSubstring(resultName,"weka.attributeSelection.");        m_ZipDest.zipit(m_SplitEvaluator.getRawResultOutput(),resultName);      }      m_ResultListener.acceptResult(this,key,results);    } catch (    Exception ex) {      throw ex;    }  }}  }
class C{  private static int correctErrors(int[] codewords,int[] erasures,int numECCodewords) throws ChecksumException {  if (erasures != null && erasures.length > numECCodewords / 2 + MAX_ERRORS || numECCodewords < 0 || numECCodewords > MAX_EC_CODEWORDS) {    throw ChecksumException.getChecksumInstance();  }  return errorCorrection.decode(codewords,numECCodewords,erasures);}  }
class C{  public final static float LaTeXLeftSpace(int n){  return Misc.stringToFloat("4.1") * n * LaTeXptSize / 10;}  }
class C{  protected boolean isRoot(String path){  for (  String root : this.roots) {    if (path.equals(root)) {      return true;    }  }  return false;}  }
class C{  private boolean updateIET(DTNHost host){  double currentTime=SimClock.getTime();  if (meetings.containsKey(host)) {    double timeDiff=currentTime - meetings.get(host);    nrofSamples++;    meanIET=(((double)nrofSamples - 1) / (double)nrofSamples) * meanIET + (1 / (double)nrofSamples) * timeDiff;    meetings.put(host,currentTime);    return true;  } else {    meetings.put(host,currentTime);    return false;  }}  }
class C{  public boolean waitForNetworkState(int networkType,State expectedState,long timeout){  long startTime=System.currentTimeMillis();  while (true) {    if ((System.currentTimeMillis() - startTime) > timeout) {      Log.v(LOG_TAG,"waitForNetworkState time out, the state of network type " + networkType + " is: "+ mCM.getNetworkInfo(networkType).getState());      if (mCM.getNetworkInfo(networkType).getState() != expectedState) {        return false;      } else {        Log.v(LOG_TAG,"networktype: " + networkType + " state: "+ mCM.getNetworkInfo(networkType));        return true;      }    }    Log.v(LOG_TAG,"Wait for the connectivity state for network: " + networkType + " to be "+ expectedState.toString());synchronized (mConnectivityMonitor) {      try {        mConnectivityMonitor.wait(SHORT_TIMEOUT);      } catch (      InterruptedException e) {        e.printStackTrace();      }      if (mNetworkInfo == null) {        Log.v(LOG_TAG,"Do not have networkInfo! Force fetch of network info.");        mNetworkInfo=mCM.getActiveNetworkInfo();      }      if (mNetworkInfo == null) {        Log.v(LOG_TAG,"Failed to force fetch networkInfo. " + "The network is still not ready. Wait for the next broadcast");        continue;      }      if ((mNetworkInfo.getType() != networkType) || (mNetworkInfo.getState() != expectedState)) {        Log.v(LOG_TAG,"network state for " + mNetworkInfo.getType() + "is: "+ mNetworkInfo.getState());        continue;      }      return true;    }  }}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public static boolean hasUID(Class<?> c){  boolean result;  result=false;  if (isSerializable(c)) {    try {      c.getDeclaredField(SERIAL_VERSION_UID);      result=true;    } catch (    Exception e) {      result=false;    }  }  return result;}  }
class C{  public static List<String> restoreIPAddresses(String s){  List<String> res=new ArrayList<String>();  if (s.length() < 4 && s.length() > 12)   return res;  backtrack(s,3,res,"");  return res;}  }
class C{  public void done(){}  }
class C{  public static byte[] encodeBase64URLSafe(final byte[] binaryData){  return encodeBase64(binaryData,false,true);}  }
class C{  public void removeSessionCookie(){  throw new MustOverrideException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:57.504 -0500",hash_original_method="DE289248E8D46F4249A96EE9032302CF",hash_generated_method="86458B42B9324AB5BD55114A8AFE5CE7") public int[] answerSubnegotiation(int suboptionData[],int suboptionLength){  if ((suboptionData != null) && (suboptionLength > 1) && (termType != null)) {    if ((suboptionData[0] == TERMINAL_TYPE) && (suboptionData[1] == TERMINAL_TYPE_SEND)) {      int response[]=new int[termType.length() + 2];      response[0]=TERMINAL_TYPE;      response[1]=TERMINAL_TYPE_IS;      for (int ii=0; ii < termType.length(); ii++) {        response[ii + 2]=(int)termType.charAt(ii);      }      return response;    }  }  return null;}  }
class C{  public void testBasicIntroducers() throws Exception {  String start="INSERT INTO foo VALUES(_";  String endSingle="')";  String endDouble="\")";  String[] introducers={"binary","latin1","sjis","cp850","utf8"};  byte[] nulls=new byte[]{0x5c,0x30,0x5c,0x30};  byte[] backslash=new byte[]{0x5c,0x5c};  byte[] tic=new byte[]{0x5c,0x27};  byte[][] middles={nulls,backslash,tic};  MySQLStatementTranslator translator=new MySQLStatementTranslator("UTF-8");  for (  String introducer : introducers) {    String fullStart=start + introducer;    String startSingle=fullStart + "'";    String startDouble=fullStart + "\"";    byte[] startSingleBytes=startSingle.getBytes("UTF-8");    byte[] startDoubleBytes=startDouble.getBytes("UTF-8");    byte[] endSingleBytes=endSingle.getBytes("UTF-8");    byte[] endDoubleBytes=endDouble.getBytes("UTF-8");    for (    byte[] middle : middles) {      String translated=translate(translator,startSingleBytes,middle,endSingleBytes);      assertTrue("Must start with start string",translated.startsWith(fullStart));      assertTrue("Must end with single quote end string",translated.endsWith(endSingle));      translated=translate(translator,startDoubleBytes,middle,endDoubleBytes);      assertTrue("Must start with start string",translated.startsWith(fullStart));      assertTrue("Must end with double quote end string",translated.endsWith(endDouble));    }  }}  }
class C{  int[] readCodewords() throws FormatException {  int width=bitMatrix.getWidth();  int height=bitMatrix.getHeight();  erasures=new int[MAX_CW_CAPACITY];  float moduleWidth=1.0f;  int[] rowCounters=new int[width];  int[] codewords=new int[MAX_CW_CAPACITY];  int next=0;  int matchingConsecutiveScans=0;  boolean rowInProgress=false;  int rowNumber=0;  int rowHeight=0;  for (int i=1; i < height; i++) {    if (rowNumber >= MAX_ROWS) {      throw FormatException.getFormatInstance();    }    int rowDifference=0;    for (int j=0; j < width; j++) {      if (bitMatrix.get(j,i) != bitMatrix.get(j,i - 1)) {        rowDifference++;      }    }    if (rowDifference <= moduleWidth * MAX_ROW_DIFFERENCE) {      for (int j=0; j < width; j++) {        if (bitMatrix.get(j,i)) {          rowCounters[j]++;        }      }      matchingConsecutiveScans++;      if ((matchingConsecutiveScans + 1) >= 2.0f * moduleWidth) {        rowInProgress=true;      }    } else {      if (rowInProgress) {        next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);        if (next == -1) {          throw FormatException.getFormatInstance();        }        for (int j=0; j < rowCounters.length; j++) {          rowCounters[j]=0;        }        rowNumber++;        rowHeight=0;      }      matchingConsecutiveScans=0;      rowInProgress=false;    }    rowHeight++;  }  if (rowInProgress) {    if (rowNumber >= MAX_ROWS) {      throw FormatException.getFormatInstance();    }    next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);    rowNumber++;    rows=rowNumber;  }  erasures=trimArray(erasures,eraseCount);  return trimArray(codewords,next);}  }
class C{  public synchronized final void incrementSecondaryProgressBy(int diff){  setSecondaryProgress(mSecondaryProgress + diff);}  }
class C{  public static URL stringToUrl(String urlString){  URL url=null;  try {    url=new URL(urlString);    final URI uri=new URI(url.getProtocol(),url.getUserInfo(),url.getHost(),url.getPort(),url.getPath(),url.getQuery(),url.getRef());    url=uri.toURL();  } catch (  Exception e) {    try {      url=new URL(urlString);    } catch (    MalformedURLException e2) {      Log.d("CHCP","Failed to transfer url string \"" + urlString + "\" to actual url",e2);    }  }  return url;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.295 -0400",hash_original_method="D498A8731A99C06BAF1ACCF96CD0CEC8",hash_generated_method="F7FEBC11CE3CAC9F2CCA27EA48D5CCF7") @Override public void close() throws IOException {  try {    super.close();  }  finally {    if (closeBranch) {      branch.close();    }  }}  }
class C{  public BatchUpdateException(String reason,String SQLState,int[] updateCounts,Throwable cause){  this(reason,SQLState,0,updateCounts,cause);}  }
class C{  private void throwExStrParam(MethodVisitor mv,Class<?> exCls){  String exSig=Type.getInternalName(exCls);  mv.visitTypeInsn(NEW,exSig);  mv.visitInsn(DUP);  mv.visitLdcInsn("mapping " + this.className + " failed to map field:");  mv.visitVarInsn(ALOAD,2);  mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/String","concat","(Ljava/lang/String;)Ljava/lang/String;");  mv.visitMethodInsn(INVOKESPECIAL,exSig,"<init>","(Ljava/lang/String;)V");  mv.visitInsn(ATHROW);}  }
class C{  public void print_array(int[] array){  print("array: size=" + array.length);  for (int i=0; i < array.length; i++) {    ps(" " + array[i],false);  }}  }
class C{  protected void pushLeftFrom(E from){  BinarySearchTreeNode<E> node=this.root;  while (node != null) {    int cmp=from.compareTo(node.comparable);    if (cmp < 0) {      this.stack.push(node);      node=node.left;    } else     if (cmp > 0) {      node=node.right;    } else {      this.stack.push(node);      break;    }  }}  }
class C{  public void deleteExport(String id,String zoneName) throws IsilonException {  String uriWithZoneName=getURIWithZoneName(id,zoneName);  delete(_baseUrl.resolve(URI_NFS_EXPORTS),uriWithZoneName,"export");}  }
class C{  public synchronized int addLog(Writer writer,LogRestarter restarter,int _verbosity,boolean postAnnouncements,boolean repostAnnouncements){  logs.addElement(new Log(writer,restarter,postAnnouncements,repostAnnouncements));  return logs.size() - 1;}  }
class C{  public void mark(long n){  tickIfNecessary();  count.add(n);  m5Rate.update(n);}  }
class C{  public void changeClassLoader(ClassLoader loader){  try {    if (rawClass != null)     rawClass=getClass(rawClass.getName(),loader);    if (type instanceof ParameterizedType) {      ParameterizedType pt=(ParameterizedType)type;      GenericClass ownerType=null;      if (pt.getOwnerType() != null) {        ownerType=new GenericClass(pt.getOwnerType());        ownerType.changeClassLoader(loader);      }      List<GenericClass> parameterClasses=new ArrayList<GenericClass>();      for (      Type parameterType : pt.getActualTypeArguments()) {        GenericClass parameter=new GenericClass(parameterType);        parameter.changeClassLoader(loader);        parameterClasses.add(parameter);      }      Type[] parameterTypes=new Type[parameterClasses.size()];      for (int i=0; i < parameterClasses.size(); i++)       parameterTypes[i]=parameterClasses.get(i).getType();      this.type=new ParameterizedTypeImpl(rawClass,parameterTypes,ownerType != null ? ownerType.getType() : null);    } else     if (type instanceof GenericArrayType) {      GenericClass componentClass=getComponentClass();      componentClass.changeClassLoader(loader);      this.type=GenericArrayTypeImpl.createArrayType(componentClass.getType());    } else     if (type instanceof WildcardType) {      Type[] oldUpperBounds=((WildcardType)type).getUpperBounds();      Type[] oldLowerBounds=((WildcardType)type).getLowerBounds();      Type[] upperBounds=new Type[oldUpperBounds.length];      Type[] lowerBounds=new Type[oldLowerBounds.length];      for (int i=0; i < oldUpperBounds.length; i++) {        GenericClass bound=new GenericClass(oldUpperBounds[i]);        bound.changeClassLoader(loader);        upperBounds[i]=bound.getType();      }      for (int i=0; i < oldLowerBounds.length; i++) {        GenericClass bound=new GenericClass(oldLowerBounds[i]);        bound.changeClassLoader(loader);        lowerBounds[i]=bound.getType();      }      this.type=new WildcardTypeImpl(upperBounds,lowerBounds);    } else     if (type instanceof TypeVariable<?>) {      for (      TypeVariable<?> newVar : rawClass.getTypeParameters()) {        if (newVar.getName().equals(((TypeVariable<?>)type).getName())) {          this.type=newVar;          break;        }      }    } else {      this.type=addTypeParameters(rawClass);    }  } catch (  ClassNotFoundException e) {    logger.warn("Class not found: " + rawClass + " - keeping old class loader ",e);  }catch (  SecurityException e) {    logger.warn("Class not found: " + rawClass + " - keeping old class loader ",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.835 -0400",hash_original_method="3524CCC20E74493FCF3DA12377ED25AE",hash_generated_method="6E2BBF96430220DFA33B2461FBBECCB2") private void onHealthDeviceChannelChanged(String devicePath,String channelPath,boolean exists){  log("Health Device : devicePath: " + devicePath + ":channelPath:"+ channelPath+ ":exists"+ exists);  mBluetoothService.onHealthDeviceChannelChanged(devicePath,channelPath,exists);}  }
class C{  @Ignore @Test public void testDodCRLCache(){  Calendar currentDate=new GregorianCalendar();  if (currentDate.after(testUtil.dodCertExpireDate)) {    return;  }  try {    KeyStore trustStore=testUtil.getTrustStore();    ClientCertPolicy certPolicy=ClientCertTestUtils.intializeCertPolicy();    X509Certificate[] certs=testUtil.getDodValidCert1();    certPolicy.setRevocationCheckEnabled(true);    certPolicy.setUseCertCRL(false);    certPolicy.setCRLUrl(testUtil.getCRLLocalCacheURL(testUtil.dodCRLCacheEMAILCA_29));    IdmCertificatePathValidator validator=new IdmCertificatePathValidator(trustStore,certPolicy,ClientCertTestUtils.tenant1,null);    validator.validate(certs[0],new Hashtable<String,String>());    return;  } catch (  CertRevocationStatusUnknownException e) {    fail("revocation check status unkown");  }catch (  Exception e) {    fail("unexpected error in validating cert");  }}  }
class C{  public synchronized void removeSeries(int index){  mSeries.remove(index);}  }
class C{  private String convertIdToBranchName(String id){  String branchName=StringUtils.EMPTY;  if (StringUtils.isEmpty(id)) {    return branchName;  }  branchName=id;  if (StringUtils.startsWith(branchName,REFS_PREFIX)) {    branchName=StringUtils.removeStart(branchName,REFS_PREFIX);  }  if (StringUtils.startsWith(branchName,HEADS_PREFIX)) {    branchName=StringUtils.removeStart(branchName,HEADS_PREFIX);  }  return branchName;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void addCheckers(){  addTextEmptinessChecker();  addBlackListChecker();  addTextNonAlphanumChecker();  addAttributeComparisonChecker();}  }
class C{  public ReplicationInfo createShadowImagePair(String replicationGroupObjId,String pairName,String arrayType,String arraySerialNumber,String pvolDevNum,String svolDevNum,String model) throws Exception {  log.info("Shadow Image pair creation started");  InputStream responseStream=null;  ReplicationInfo replicationInfoResponse=null;  String syncTaskMessageId=null;  try {    log.info("replicationGroupObjId {} ",replicationGroupObjId);    log.info("arrayType {} arraySerialNumber {}",arrayType,arraySerialNumber);    log.info(" pvolDevNum {} svolDevNum {}",pvolDevNum,svolDevNum);    Map<String,Object> attributeMap=new HashMap<String,Object>();    Add addOp=new Add(HDSConstants.REPLICATION);    ReplicationGroup replicationGroup=new ReplicationGroup();    replicationGroup.setObjectID(replicationGroupObjId);    replicationGroup.setReplicationFunction(HDSConstants.SHADOW_IMAGE);    ReplicationInfo replicationInfo=new ReplicationInfo();    replicationInfo.setPairName(pairName);    replicationInfo.setPvolArrayType(arrayType);    replicationInfo.setPvolSerialNumber(arraySerialNumber);    replicationInfo.setPvolDevNum(pvolDevNum);    replicationInfo.setSvolArrayType(arrayType);    replicationInfo.setSvolSerialNumber(arraySerialNumber);    replicationInfo.setSvolDevNum(svolDevNum);    replicationInfo.setReplicationFunction(HDSConstants.SHADOW_IMAGE);    attributeMap.put(HDSConstants.ADD,addOp);    attributeMap.put(HDSConstants.MODEL,model);    attributeMap.put(HDSConstants.REPLICATION_GROUP,replicationGroup);    attributeMap.put(HDSConstants.REPLICATION_INFO,replicationInfo);    String createShadowImagePairInputXML=InputXMLGenerationClient.getInputXMLString(HDSConstants.CREATE_SHADOW_IMAGE_PAIR_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);    log.info("Query to create shadow image pair volume: {}",createShadowImagePairInputXML);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,createShadowImagePairInputXML);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.HITACHI_SMOOKS_REPLICATION_CONFIG_FILE);      EchoCommand command=result.getBean(EchoCommand.class);      if (HDSConstants.COMPLETED_STR.equalsIgnoreCase(command.getStatus())) {        log.info("ShadowImage Pair has been created successfully");        replicationInfoResponse=result.getBean(ReplicationInfo.class);        if (null == replicationInfoResponse) {          throw HDSException.exceptions.notAbleToCreateShadowImagePair();        }      } else       if (HDSConstants.PROCESSING_STR.equalsIgnoreCase(command.getStatus())) {        syncTaskMessageId=command.getMessageID();      } else       if (HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {        Error error=result.getBean(Error.class);        log.error("Shadow Image pair creation failed status messageID: {}",command.getMessageID());        log.error("Shadow Image pair creation failed with error code: {} with message: {}",error.getCode(),error.getDescription());        throw HDSException.exceptions.notAbleToCreateVolume(error.getCode(),error.getDescription());      }    } else {      log.error("Shadow Image pair creation failed with invalid response code {}",response.getStatus());      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Shadow Image pair creation failed due to invalid response %1$s from server for system %2$s",response.getStatus(),arraySerialNumber));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("Exception occurred while close Shadow Image Pair creation response stream");      }    }  }  log.info("Shadow Image pair creation completed");  return replicationInfoResponse;}  }
class C{  public static Range iterateXYRangeBounds(XYDataset dataset){  return iterateRangeBounds(dataset);}  }
class C{  public void destroy(){  if (super.isDestroyed()) {    return;  } else {    destroyLock.lock();    try {      if (super.isDestroyed()) {        return;      }      super.destroy();      if (invokers != null) {        invokers.remove(this);      }      for (      ExchangeClient client : clients) {        try {          client.close();        } catch (        Throwable t) {          logger.warn(t.getMessage(),t);        }      }    }  finally {      destroyLock.unlock();    }  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  NamespaceMappings clone=new NamespaceMappings();  clone.m_nodeStack=(NamespaceMappings.Stack)m_nodeStack.clone();  clone.count=this.count;  clone.m_namespaces=(Hashtable)m_namespaces.clone();  clone.count=count;  return clone;}  }
class C{  public UnstartedSystemException(String message,Throwable cause){  super(message,cause);}  }
class C{  public MeasureTool(final WorldWindow wwd){  this(wwd,null);}  }
class C{  protected SparseDoubleMatrix2D(int rows,int columns,AbstractIntDoubleMap elements,int rowZero,int columnZero,int rowStride,int columnStride){  setUp(rows,columns,rowZero,columnZero,rowStride,columnStride);  this.elements=elements;  this.isNoView=false;}  }
class C{  public void findTypes(char[] prefix,final boolean findMembers,boolean camelCaseMatch,int searchFor,final ISearchRequestor storage){  findTypes(prefix,findMembers,camelCaseMatch,searchFor,storage,null);}  }
class C{  public StrTokenizer(String input,char delim,char quote){  this(input,delim);  setQuoteChar(quote);}  }
class C{  private int nextInt(StringTokenizer tok,String errorMsg) throws SAXException {  if (!tok.hasMoreTokens()) {    throw new SAXException(errorMsg);  }  try {    return Integer.parseInt(tok.nextToken());  } catch (  NumberFormatException nfe) {    throw new SAXException(errorMsg);  }}  }
class C{  public void stopPlayback(){  videoViewImpl.stopPlayback();  setKeepScreenOn(false);  if (videoControls != null) {    videoControls.updatePlaybackState(false);  }}  }
class C{  @SuppressWarnings("UnusedParameters") private static int engineCompensation(final int num,final int characteristics){  return num;}  }
class C{  protected void configurePropertiesFromAction(Action a){  AbstractAction.setEnabledFromAction(this,a);  AbstractAction.setToolTipTextFromAction(this,a);  setActionCommandFromAction(a);}  }
class C{  public static void main(String[] args){  MetaTag tester=new MetaTag();  Configuration config=ConfigurationImpl.getInstance();  boolean defaultKeywordsSetting=config.keywords;  boolean defaultTimestampSetting=config.notimestamp;  run(tester,ARGS,TEST,NEGATED_TEST);  config.keywords=defaultKeywordsSetting;  config.notimestamp=defaultTimestampSetting;  run(tester,ARGS_NO_TIMESTAMP_NO_KEYWORDS,TEST2,NEGATED_TEST2);  tester.printSummary();}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  private void writeOutTypeNormal(BytecodeContext bc) throws TransformerException {  ParseBodyVisitor pbv=new ParseBodyVisitor();  pbv.visitBegin(bc);  getBody().writeOut(bc);  pbv.visitEnd(bc);}  }
class C{  public ReplDBMSEvent eventFromRowUpdate(long seqno,String schema,String table,String[] names,Object[] values,Object[] keys,int fragNo,boolean lastFrag){  Timestamp ts=new Timestamp(System.currentTimeMillis());  return eventFromRowUpdate(seqno,schema,table,names,values,keys,fragNo,lastFrag,ts);}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  private void onDeclined(){  if (null != sRoomPreviewData) {    VectorRoomActivity.this.finish();    sRoomPreviewData=null;  }}  }
class C{  protected TraceCaseDef_Impl(){  super();}  }
class C{  public static void registerDeferral(ProfileActivator pa){  if (!deferring) {    return;  }  if (aVector == null) {    aVector=new Vector<ProfileActivator>(3,3);  }  aVector.addElement(pa);  return;}  }
class C{  public static void multiplyMM(double[] result,int resultOffset,double[] lhs,int lhsOffset,double[] rhs,int rhsOffset){  String message=null;  if (result == null) {    message="Result matrix can not be null.";  } else   if (lhs == null) {    message="Left hand side matrix can not be null.";  } else   if (rhs == null) {    message="Right hand side matrix can not be null.";  } else   if ((resultOffset + 16) > result.length) {    message="Specified result offset would overflow the passed result matrix.";  } else   if ((lhsOffset + 16) > lhs.length) {    message="Specified left hand side offset would overflow the passed lhs matrix.";  } else   if ((rhsOffset + 16) > rhs.length) {    message="Specified right hand side offset would overflow the passed rhs matrix.";  }  if (message != null) {    throw new IllegalArgumentException(message);  }  double sum=0;  for (int i=0; i < 4; ++i) {    for (int j=0; j < 4; ++j) {      sum=0;      for (int k=0; k < 4; ++k) {        sum+=lhs[i + 4 * k + lhsOffset] * rhs[4 * j + k + rhsOffset];      }      result[i + 4 * j + resultOffset]=sum;    }  }}  }
class C{  public STAXEventWriter(OutputStream stream) throws XMLStreamException {  consumer=outputFactory.createXMLEventWriter(stream);}  }
class C{  protected void moveLayer(LayerPane lp,String command){  if (lp == null) {    if (logger.isLoggable(Level.FINE)) {      logger.fine("LayerPane not represented on list");    }    if (command == LayerRemoveCmd) {      System.gc();    }    return;  }  List<LayerPane> panes=getPanes();  int row=panes.indexOf(lp);  boolean boundary=false;  int bls_row=-1;  if (backgroundLayerSeparator != null) {    bls_row=panes.indexOf(backgroundLayerSeparator);    boundary=bufferedBoundary;  }  if (command.equals(LayerTopCmd)) {    panes.remove(lp);    if (boundary && bls_row > 0 && row > bls_row + 1) {      panes.add(bls_row + 1,lp);    } else {      panes.add(0,lp);    }    rejiggerMapLayers();  } else   if (command.equals(LayerBottomCmd)) {    panes.remove(lp);    if (boundary && bls_row > 0 && row < bls_row - 1) {      panes.add(bls_row - 1,lp);    } else {      panes.add(panes.size(),lp);    }    rejiggerMapLayers();  } else   if (command.equals(LayerUpCmd)) {    if (row <= 0)     return;    panes.remove(row);    panes.add(row - 1,lp);    rejiggerMapLayers();  } else   if (command.equals(LayerDownCmd)) {    if (row < 0 || row == panes.size() - 1)     return;    panes.remove(row);    panes.add(row + 1,lp);    rejiggerMapLayers();  } else   if (command.equals(LayerRemoveCmd)) {    if (layerHandler == null || !lp.getLayer().removeConfirmed()) {      return;    }    layerHandler.removeLayer(lp.getLayer());    lp.cleanup(bg);    return;  } else   if (command.equals(LayerAddCmd)) {    if (layerAddPanel != null) {      layerAddPanel.showPanel();    }  }}  }
class C{  public void after(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  String oldValue=oldProps.getProperty(getPropertyName());  String newValue=newProps.getProperty(getPropertyName());  _log.info("old value: " + oldValue + ", newValue: "+ newValue);  if (newValue == null) {    return;  }  if (oldValue == null) {    oldValue="0";  }  if (oldValue.equals(newValue)) {    return;  }  int oldDays=Integer.parseInt(oldValue);  int newDays=Integer.parseInt(newValue);  if (oldDays == 0 && newDays != 0) {    Calendar expireDate=Calendar.getInstance();    expireDate.add(Calendar.DATE,newDays);    _log.info("turn on expire rule, set new expire date to " + expireDate.getTime());    _passwordHandler.getPasswordUtils().setExpireDateToAll(expireDate);  } else   if (newDays == 0) {    _log.info("turn off expire rule");    _passwordHandler.getPasswordUtils().setExpireDateToAll(null);    return;  } else {    _log.info("re-configure expire days from " + oldDays + " to "+ newDays);    _passwordHandler.getPasswordUtils().adjustExpireTime(newDays);  }}  }
class C{  public UpdateActionCustom(final Workspace workspace,final File file){  this.updater=workspace.getUpdater();  StringBuilder scriptText=new StringBuilder();  String newLine=System.getProperty("line.separator");  Scanner scanner=null;  try {    scanner=new Scanner(new FileInputStream(file));    while (scanner.hasNextLine()) {      scriptText.append(scanner.nextLine() + newLine);    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  } finally {    scanner.close();  }  this.scriptString=scriptText.toString();  init();}  }
class C{  public boolean canDelete(){  return true;}  }
class C{  public String testsetDirTipText(){  return "The directory containing the test sets.";}  }
class C{  @Override public void resume(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.215 -0500",hash_original_method="72067B50D522BDEF5353890C050CC074",hash_generated_method="39DB8FB2BAD3FBA7DDE4A06C2EF9F726") public static String toOctalString(int i){  String str=new String();  str.addTaint(i);  return str;}  }
class C{  public void xor(DocIdSetIterator iter) throws IOException {  assertUnpositioned(iter);  if (BitSetIterator.getFixedBitSetOrNull(iter) != null) {    final FixedBitSet bits=BitSetIterator.getFixedBitSetOrNull(iter);    xor(bits);  } else {    int doc;    while ((doc=iter.nextDoc()) < numBits) {      flip(doc);    }  }}  }
class C{  @Override public String toString(){  if (nickname != null || action != null) {    String date=(timestamp == null) ? "" : ", " + bugDateFormats[0].format(timestamp);    return text + " [" + action+ " "+ nickname+ date+ "]";  }  return text;}  }
class C{  @LayoutlibDelegate static float exp(float value){  return (float)Math.exp(value);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  EditRoomForm editRoomForm=(EditRoomForm)form;  MessageResources rsc=getResources(request);  String doit=editRoomForm.getDoit();  if (doit != null && doit.equals(rsc.getMessage("button.returnToRoomDetail"))) {    if (editRoomForm.getId() == null || editRoomForm.getId().length() == 0)     response.sendRedirect("roomList.do"); else     response.sendRedirect("roomDetail.do?id=" + editRoomForm.getId());    return null;  }  if (doit != null && (doit.equals(rsc.getMessage("button.update")) || doit.equals(rsc.getMessage("button.save")))) {    ActionMessages errors=new ActionMessages();    errors=editRoomForm.validate(mapping,request);    if (errors.size() == 0) {      if (editRoomForm.getId() == null || editRoomForm.getId().isEmpty()) {        doSave(editRoomForm,request);      } else {        doUpdate(editRoomForm,request);      }      response.sendRedirect("roomDetail.do?id=" + editRoomForm.getId());      return null;    } else {      saveErrors(request,errors);      if (editRoomForm.getId() == null || editRoomForm.getId().isEmpty())       setupDepartments(request,sessionContext); else       setupDepartments(request,sessionContext,LocationDAO.getInstance().get(Long.valueOf(editRoomForm.getId())));      setupBuildings(request);      LookupTables.setupExamTypes(request,sessionContext.getUser().getCurrentAcademicSessionId());      return mapping.findForward(editRoomForm.getId() == null || editRoomForm.getId().length() == 0 ? "showAddRoom" : "showEditRoom");    }  }  if (request.getParameter("id") != null && request.getParameter("id").length() > 0) {    Long id=Long.valueOf(request.getParameter("id"));    LocationDAO ldao=new LocationDAO();    Location location=ldao.get(id);    if (location instanceof Room) {      Room r=(Room)location;      sessionContext.checkPermission(r,Right.RoomEdit);      editRoomForm.setName(r.getRoomNumber());      editRoomForm.setBldgName(r.getBuildingAbbv());      editRoomForm.setRoom(true);    } else {      sessionContext.checkPermission((NonUniversityLocation)location,Right.NonUniversityLocationEdit);      editRoomForm.setName(((NonUniversityLocation)location).getName());      editRoomForm.setBldgName("");      editRoomForm.setRoom(false);    }    editRoomForm.setExternalId(location.getExternalUniqueId());    editRoomForm.setType(location.getRoomType().getUniqueId());    editRoomForm.setCapacity(location.getCapacity().toString());    if (location.getExamCapacity() != null && (location.hasAnyExamsEnabled() || location.getExamCapacity() != 0)) {      editRoomForm.setExamCapacity(location.getExamCapacity().toString());    }    for (    ExamType type : ExamType.findAllUsed(sessionContext.getUser().getCurrentAcademicSessionId()))     editRoomForm.setExamEnabled(type.getUniqueId().toString(),location.getExamTypes().contains(type));    editRoomForm.setIgnoreTooFar(location.isIgnoreTooFar());    editRoomForm.setIgnoreRoomCheck(location.isIgnoreRoomCheck());    editRoomForm.setCoordX(location.getCoordinateX() == null ? null : location.getCoordinateX().toString());    editRoomForm.setCoordY(location.getCoordinateY() == null ? null : location.getCoordinateY().toString());    editRoomForm.setArea(location.getArea() == null ? null : new DecimalFormat(ApplicationProperty.RoomAreaUnitsFormat.value()).format(location.getArea()));    editRoomForm.setControlDept(location.getControllingDepartment() == null ? null : location.getControllingDepartment().getUniqueId().toString());    editRoomForm.setEventDepartment(location.getEventDepartment() == null ? null : location.getEventDepartment().getUniqueId().toString());    editRoomForm.setEventStatus(location.getEventStatus() == null ? -1 : location.getEventStatus());    editRoomForm.setBreakTime(location.getBreakTime() == null ? "" : location.getBreakTime().toString());    editRoomForm.setNote(location.getNote() == null ? "" : location.getNote());    if (sessionContext.hasPermission(location,Right.RoomEditChangeExaminationStatus)) {      for (      ExamType type : ExamType.findAllUsed(sessionContext.getUser().getCurrentAcademicSessionId())) {        if (type.getType() == ExamType.sExamTypeMidterm) {          MidtermPeriodPreferenceModel epx=new MidtermPeriodPreferenceModel(location.getSession(),type);          epx.load(location);          epx.setName("mp" + type.getUniqueId());          request.setAttribute("PeriodPrefs" + type.getUniqueId(),epx.print(true));        } else {          PeriodPreferenceModel px=new PeriodPreferenceModel(location.getSession(),type.getUniqueId());          px.load(location);          px.setAllowRequired(false);          RequiredTimeTable rttPx=new RequiredTimeTable(px);          rttPx.setName("PeriodPrefs" + type.getUniqueId());          request.setAttribute("PeriodPrefs" + type.getUniqueId(),rttPx.print(true,CommonValues.VerticalGrid.eq(UserProperty.GridOrientation.get(sessionContext.getUser()))));        }      }    }    EditRoomAction.setupDepartments(request,sessionContext,location);    LookupTables.setupExamTypes(request,sessionContext.getUser().getCurrentAcademicSessionId());  } else {    sessionContext.checkPermission(Right.AddRoom);    editRoomForm.reset(mapping,request);    if (sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom) != null) {      Department d=Department.findByDeptCode((String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom),sessionContext.getUser().getCurrentAcademicSessionId());      if (d != null)       editRoomForm.setControlDept(d.getUniqueId().toString());    }    editRoomForm.setEventDepartment(null);    setupDepartments(request,sessionContext);    setupBuildings(request);    LookupTables.setupExamTypes(request,sessionContext.getUser().getCurrentAcademicSessionId());  }  return mapping.findForward(editRoomForm.getId() == null || editRoomForm.getId().length() == 0 ? "showAddRoom" : "showEditRoom");}  }
class C{  private static void s_uakp(SparseBlock a,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){  if (a.isContiguous()) {    sum(a.values(rl),a.pos(rl),(int)a.size(rl,ru),kbuff,kplus);  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i))       sum(a.values(i),a.pos(i),a.size(i),kbuff,kplus);    }  }  c[0]=kbuff._sum;  c[1]=kbuff._correction;}  }
class C{  private CompareKeysResult compareKeys(final RyaStatement key1,final RyaStatement key2) throws MutationsRejectedException, IOException, InterruptedException, TripleRowResolverException {  log.trace("key1 = " + key1);  log.trace("key2 = " + key2);  if (key1 == null && key2 == null) {    return CompareKeysResult.FINISHED;  } else   if (key1 == null) {    final Date t2=normalizeDate(new Date(key2.getTimestamp()),false);    final boolean doNothing=usesStartTime && t2.before(startTime);    return doNothing ? CompareKeysResult.ADVANCE_CHILD : CompareKeysResult.ADVANCE_CHILD_AND_ADD;  } else   if (key2 == null) {    final Date t1=normalizeDate(new Date(key1.getTimestamp()),true);    final boolean doNothing=usesStartTime && (copyToolInputTime != null && (t1.before(copyToolInputTime) || (t1.after(copyToolInputTime) && t1.after(startTime))) || (copyToolInputTime == null && t1.after(startTime)));    return doNothing ? CompareKeysResult.ADVANCE_PARENT : CompareKeysResult.ADVANCE_PARENT_AND_DELETE;  } else {    final Map<TABLE_LAYOUT,TripleRow> map1=parentRyaContext.serializeTriple(key1);    final Text row1=new Text(map1.get(TABLE_LAYOUT.SPO).getRow());    final Map<TABLE_LAYOUT,TripleRow> map2=childRyaContext.serializeTriple(key2);    final Text row2=new Text(map2.get(TABLE_LAYOUT.SPO).getRow());    final Date t1=normalizeDate(new Date(key1.getTimestamp()),true);    final Date t2=normalizeDate(new Date(key2.getTimestamp()),false);    if (row1.compareTo(row2) < 0) {      final boolean doNothing=usesStartTime && (copyToolInputTime != null && (t1.before(copyToolInputTime) || (t1.after(copyToolInputTime) && t1.after(startTime))) || (copyToolInputTime == null && t1.after(startTime)));      return doNothing ? CompareKeysResult.ADVANCE_PARENT : CompareKeysResult.ADVANCE_PARENT_AND_DELETE;    } else     if (row1.compareTo(row2) > 0) {      final boolean doNothing=usesStartTime && t2.before(startTime);      return doNothing ? CompareKeysResult.ADVANCE_CHILD : CompareKeysResult.ADVANCE_CHILD_AND_ADD;    } else {      return CompareKeysResult.ADVANCE_BOTH;    }  }}  }
class C{  LongEntry<VALUE> removeEntryForKey(long key){  int hash=hash(key);  int i=indexFor(hash,table.length);  LongEntry<VALUE> prev=table[i];  LongEntry<VALUE> e=prev;  while (e != null) {    LongEntry<VALUE> next=e.next;    if (e.hash == hash && key == e.key) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  public static List<WorkItem> collectIncremental(IResourceDelta delta){  List<WorkItem> result=new ArrayList<WorkItem>();  List<IResourceDelta> foldersDelta=new ArrayList<IResourceDelta>();  IResourceDelta affectedChildren[]=delta.getAffectedChildren();  for (int i=0; i < affectedChildren.length; i++) {    IResourceDelta childDelta=affectedChildren[i];    IResource child=childDelta.getResource();    if (child.isDerived()) {      continue;    }    int childType=child.getType();    int deltaKind=childDelta.getKind();    if (childType == IResource.FILE) {      if ((deltaKind == IResourceDelta.ADDED || deltaKind == IResourceDelta.CHANGED) && Util.isJavaFile(child)) {        result.add(new WorkItem(child));      }    } else     if (childType == IResource.FOLDER) {      if (deltaKind == IResourceDelta.ADDED) {        result.add(new WorkItem(child));      } else       if (deltaKind == IResourceDelta.REMOVED) {        IContainer parent=child.getParent();        if (parent instanceof IProject) {          result.clear();          result.add(new WorkItem(parent));          return result;        }        result.add(new WorkItem(parent));      } else       if (deltaKind != IResourceDelta.REMOVED) {        foldersDelta.add(childDelta);      }    }  }  for (  IResourceDelta childDelta : foldersDelta) {    result.addAll(collectIncremental(childDelta));  }  return result;}  }
class C{  public static <From,To>To convert(From object,Class<From> from,Class<To> to){  ConversionStrategy<From,To> converter=ConversionFactory.getConverter(from,to);  return converter.convert(object);}  }
class C{  public static double[] llaToENU(final double lon,final double lat,final double alt,double centerLon,double centerLat,final double centerAlt,double[] enu){  if (enu == null) {    enu=new double[3];  }  final double[] ecf=llaToECF(lon,lat,alt,null);  return ecfToENU(ecf[0],ecf[1],ecf[2],centerLon,centerLat,centerAlt,enu);}  }
class C{  public ObjectMatrix3D like(int slices,int rows,int columns){  return new SparseObjectMatrix3D(slices,rows,columns);}  }
class C{  private boolean isBinary(int type){switch (type) {case java.sql.Types.BINARY:case java.sql.Types.VARBINARY:case java.sql.Types.LONGVARBINARY:    return true;default :  return false;}}  }
class C{  public boolean isElementType(String elementType){  if (elementType == null)   return false;  return elementType.equals(getElementType());}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tFull class name of filter to use, followed\n" + "\tby filter options.\n" + "\teg: \"weka.filters.unsupervised.attribute.Remove -V -R 1,2\"\n"+ "(default: " + defaultFilterString() + ")","F",1,"-F <filter specification>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  protected boolean parseNodeTest(PsiBuilder builder){  final PsiBuilder.Marker marker=builder.mark();  if (!parseNameTest(builder)) {    if (!parseNodeType(builder)) {      marker.drop();      return false;    }  }  marker.done(XPathElementTypes.NODE_TEST);  return true;}  }
class C{  private boolean contextExists(String contextTypeId){  return contextTypeId != null && (getRegistry() == null || getRegistry().getContextType(contextTypeId) != null);}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArrayList(String key,ArrayList<CharSequence> value){  bundle.putCharSequenceArrayList(key,value);  return this;}  }
class C{  public static WhiteList loadWhiteListFromJson(Reader in,FilePosition src,ImportResolver resolver,MessageQueue mq) throws IOException, ParseException {  return (new JSONWhiteListLoader(src,resolver,mq)).loadFrom(in);}  }
class C{  protected void updateMostUsedValue(String attrName,String[] stringValues){  mostUsedValues.put(attrName,stringValues);}  }
class C{  public void addGCActivity(GCActivity gcActivity){  assert gcActivity != null;  add(gcActivity);  numberSeq.add(gcActivity.getDurationSec());}  }
class C{  public QueryStringDecoder(URI uri,Charset charset){  this(uri,charset,DEFAULT_MAX_PARAMS);}  }
class C{  public double variance(){  if (source != null) {    return source.variance();  } else {    throw new IllegalArgumentException("Distribution is null");  }}  }
class C{  private DocLine[] loadLines(MHRProcess process){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MHRMovement[] lines=process.getLines(true);  for (int i=0; i < lines.length; i++) {    MHRMovement line=lines[i];    DocLine_Payroll docLine=new DocLine_Payroll(line,this);    log.fine(docLine.toString());    list.add(docLine);  }  DocLine[] dls=new DocLine[list.size()];  list.toArray(dls);  return dls;}  }
class C{  public static int compare(double lhs,double rhs){  if (lhs < rhs) {    return -1;  }  if (lhs > rhs) {    return +1;  }  long lhsBits=Double.doubleToLongBits(lhs);  long rhsBits=Double.doubleToLongBits(rhs);  if (lhsBits == rhsBits) {    return 0;  }  if (lhsBits < rhsBits) {    return -1;  } else {    return +1;  }}  }
class C{  public SelectedNodes(){  update();}  }
class C{  private static final int checkMaxLgArrLongs(Memory dstMem){  int preBytes=CONST_PREAMBLE_LONGS << 3;  long cap=dstMem.getCapacity();  int maxLgArrLongs=Integer.numberOfTrailingZeros(floorPowerOf2((int)(cap - preBytes)) >>> 3);  if (maxLgArrLongs < MIN_LG_ARR_LONGS) {    throw new SketchesArgumentException("dstMem not large enough for minimum sized hash table: " + cap);  }  return maxLgArrLongs;}  }
class C{  public static SolidToast make(Activity activity,CharSequence text,int gravity){  return make(activity,text,null,DURATION_SHORT,gravity);}  }
class C{  void prune(int depth){  if (isImmutable)   throw new IllegalStateException("PolicyNode is immutable");  if (mChildren.size() == 0)   return;  Iterator<PolicyNodeImpl> it=mChildren.iterator();  while (it.hasNext()) {    PolicyNodeImpl node=it.next();    node.prune(depth);    if ((node.mChildren.size() == 0) && (depth > mDepth + 1))     it.remove();  }}  }
class C{  @Override protected Light createNewLight(String systemName,String userName){  Light lgt=null;  int nAddress=-1;  nAddress=AcelaAddress.getNodeAddressFromSystemName(systemName,_memo);  if (nAddress == -1) {    return (null);  }  int bitNum=AcelaAddress.getBitFromSystemName(systemName);  if (bitNum == -1) {    return (null);  }  if (AcelaAddress.validSystemNameFormat(systemName,'L',getSystemPrefix())) {    lgt=new AcelaLight(systemName,userName,_memo);    if (!AcelaAddress.validSystemNameConfig(systemName,'L',_memo)) {      log.warn("Light system Name does not refer to configured hardware: " + systemName);    }  } else {    log.error("Invalid Light system Name format: " + systemName);    throw new IllegalArgumentException("Invalid Light system Name format: " + systemName);  }  return lgt;}  }
class C{  public static boolean isInNYC(float lon,float lat){  return !(lon > LON_EAST || lon < LON_WEST) && !(lat > LAT_NORTH || lat < LAT_SOUTH);}  }
class C{  public CResumeAction(final JFrame parent,final IFrontEndDebuggerProvider debuggerProvider){  m_parent=Preconditions.checkNotNull(parent,"IE00301: Parent argument can not be null");  m_debuggerProvider=Preconditions.checkNotNull(debuggerProvider,"IE01536: Debugger provider argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Resume");}  }
class C{  public boolean isValidInnerArrayType(PsiType type,Project project){  if (type instanceof PsiArrayType) {    return false;  }  PsiClassType collectionType=JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("java.util.Collection");  if (collectionType.isAssignableFrom(type)) {    return false;  }  return true;}  }
class C{  public boolean isSet(){  return set;}  }
class C{  public static boolean containsConfigFileKeyword(String string){  Iterator iterator=CONFIG_KEYWORDS.iterator();  while (iterator.hasNext()) {    if (string.contains((CharSequence)iterator.next())) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:57.002 -0500",hash_original_method="AB4D7FB4B745E9B023209032D37DF18F",hash_generated_method="ED2B9CE29D09758C9886F01DAC5AACB5") public boolean hasLatitude(){  return mHasLatitude;}  }
class C{  public Object invoke(Object proxy,Method method,Object[] list) throws Throwable {  String name=method.getName();  if (name.equals(STRING)) {    return toString();  }  if (name.equals(EQUAL)) {    return equals(proxy,list);  }  if (name.equals(CLASS)) {    return type;  }  if (name.equals(REQUIRED)) {    return required;  }  if (name.equals(ATTRIBUTE)) {    return attribute;  }  return method.getDefaultValue();}  }
class C{  @SuppressWarnings("unchecked") protected void notifyDataSetAvailable(DataSetEvent e){  Vector<DataSourceListener> l;synchronized (this) {    l=(Vector<DataSourceListener>)m_dataSourceListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptDataSet(e);    }  }}  }
class C{  public SizedTextField(final int columns){  super(columns);  setPreferredSize(STANDARD_DIMENSION);  setMaximumSize(STANDARD_DIMENSION);}  }
class C{  @Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){  if (!isCurrentlyLoading) {    return;  }  LOG.d(TAG,"CordovaWebViewClient.onReceivedError: Error code=%s Description=%s URL=%s",errorCode,description,failingUrl);  this.appView.loadUrlTimeout++;  if (errorCode == WebViewClient.ERROR_UNSUPPORTED_SCHEME) {    if (view.canGoBack()) {      view.goBack();      return;    } else {      super.onReceivedError(view,errorCode,description,failingUrl);    }  }  JSONObject data=new JSONObject();  try {    data.put("errorCode",errorCode);    data.put("description",description);    data.put("url",failingUrl);  } catch (  JSONException e) {    e.printStackTrace();  }  this.appView.postMessage("onReceivedError",data);}  }
class C{  @Scheduled(fixedDelay=60000) public void controlStoragePolicyProcessorJmsMessageListener(){  try {    Boolean jmsMessageListenerEnabled=Boolean.valueOf(configurationHelper.getProperty(ConfigurationValue.STORAGE_POLICY_PROCESSOR_JMS_LISTENER_ENABLED));    JmsListenerEndpointRegistry registry=ApplicationContextHolder.getApplicationContext().getBean("org.springframework.jms.config.internalJmsListenerEndpointRegistry",JmsListenerEndpointRegistry.class);    MessageListenerContainer jmsMessageListenerContainer=registry.getListenerContainer(HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE);    LOGGER.debug("controlStoragePolicyProcessorJmsMessageListener(): {}={} jmsMessageListenerContainer.isRunning()={}",ConfigurationValue.STORAGE_POLICY_PROCESSOR_JMS_LISTENER_ENABLED.getKey(),jmsMessageListenerEnabled,jmsMessageListenerContainer.isRunning());    if (!jmsMessageListenerEnabled && jmsMessageListenerContainer.isRunning()) {      LOGGER.info("controlStoragePolicyProcessorJmsMessageListener(): Stopping the storage policy processor JMS message listener ...");      jmsMessageListenerContainer.stop();      LOGGER.info("controlStoragePolicyProcessorJmsMessageListener(): Done");    } else     if (jmsMessageListenerEnabled && !jmsMessageListenerContainer.isRunning()) {      LOGGER.info("controlStoragePolicyProcessorJmsMessageListener(): Starting the storage policy processor JMS message listener ...");      jmsMessageListenerContainer.start();      LOGGER.info("controlStoragePolicyProcessorJmsMessageListener(): Done");    }  } catch (  Exception e) {    LOGGER.error("controlStoragePolicyProcessorJmsMessageListener(): Failed to control the storage policy processor Jms message listener service.",e);  }}  }
class C{  public void snackBar(@StringRes int message){  snackBar.message(message);}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case StextPackage.ROOT:{      Root root=(Root)theEObject;      T result=caseRoot(root);      if (result == null)       result=defaultCase(theEObject);      return result;    }case StextPackage.DEF_ROOT:{    DefRoot defRoot=(DefRoot)theEObject;    T result=caseDefRoot(defRoot);    if (result == null)     result=defaultCase(theEObject);    return result;  }case StextPackage.STATECHART_ROOT:{  StatechartRoot statechartRoot=(StatechartRoot)theEObject;  T result=caseStatechartRoot(statechartRoot);  if (result == null)   result=caseDefRoot(statechartRoot);  if (result == null)   result=defaultCase(theEObject);  return result;}case StextPackage.STATE_ROOT:{StateRoot stateRoot=(StateRoot)theEObject;T result=caseStateRoot(stateRoot);if (result == null) result=caseDefRoot(stateRoot);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.TRANSITION_ROOT:{TransitionRoot transitionRoot=(TransitionRoot)theEObject;T result=caseTransitionRoot(transitionRoot);if (result == null) result=caseDefRoot(transitionRoot);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.STATECHART_SPECIFICATION:{StatechartSpecification statechartSpecification=(StatechartSpecification)theEObject;T result=caseStatechartSpecification(statechartSpecification);if (result == null) result=caseScopedElement(statechartSpecification);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.STATE_SPECIFICATION:{StateSpecification stateSpecification=(StateSpecification)theEObject;T result=caseStateSpecification(stateSpecification);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.TRANSITION_SPECIFICATION:{TransitionSpecification transitionSpecification=(TransitionSpecification)theEObject;T result=caseTransitionSpecification(transitionSpecification);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.STATECHART_SCOPE:{StatechartScope statechartScope=(StatechartScope)theEObject;T result=caseStatechartScope(statechartScope);if (result == null) result=caseScope(statechartScope);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.INTERFACE_SCOPE:{InterfaceScope interfaceScope=(InterfaceScope)theEObject;T result=caseInterfaceScope(interfaceScope);if (result == null) result=caseStatechartScope(interfaceScope);if (result == null) result=caseNamedElement(interfaceScope);if (result == null) result=caseScope(interfaceScope);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.INTERNAL_SCOPE:{InternalScope internalScope=(InternalScope)theEObject;T result=caseInternalScope(internalScope);if (result == null) result=caseStatechartScope(internalScope);if (result == null) result=caseScope(internalScope);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.IMPORT_SCOPE:{ImportScope importScope=(ImportScope)theEObject;T result=caseImportScope(importScope);if (result == null) result=caseStatechartScope(importScope);if (result == null) result=caseScope(importScope);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.EVENT_DEFINITION:{EventDefinition eventDefinition=(EventDefinition)theEObject;T result=caseEventDefinition(eventDefinition);if (result == null) result=caseEvent(eventDefinition);if (result == null) result=caseDeclaration(eventDefinition);if (result == null) result=caseTypedElement(eventDefinition);if (result == null) result=casePackageMember(eventDefinition);if (result == null) result=caseNamedElement(eventDefinition);if (result == null) result=caseAnnotatableElement(eventDefinition);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.VARIABLE_DEFINITION:{VariableDefinition variableDefinition=(VariableDefinition)theEObject;T result=caseVariableDefinition(variableDefinition);if (result == null) result=caseProperty(variableDefinition);if (result == null) result=caseDeclaration(variableDefinition);if (result == null) result=caseTypedElement(variableDefinition);if (result == null) result=casePackageMember(variableDefinition);if (result == null) result=caseNamedElement(variableDefinition);if (result == null) result=caseAnnotatableElement(variableDefinition);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.OPERATION_DEFINITION:{OperationDefinition operationDefinition=(OperationDefinition)theEObject;T result=caseOperationDefinition(operationDefinition);if (result == null) result=caseOperation(operationDefinition);if (result == null) result=caseDeclaration(operationDefinition);if (result == null) result=caseTypedElement(operationDefinition);if (result == null) result=casePackageMember(operationDefinition);if (result == null) result=caseNamedElement(operationDefinition);if (result == null) result=caseAnnotatableElement(operationDefinition);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.TYPE_ALIAS_DEFINITION:{TypeAliasDefinition typeAliasDefinition=(TypeAliasDefinition)theEObject;T result=caseTypeAliasDefinition(typeAliasDefinition);if (result == null) result=caseTypeAlias(typeAliasDefinition);if (result == null) result=caseDeclaration(typeAliasDefinition);if (result == null) result=caseTypedElement(typeAliasDefinition);if (result == null) result=caseType(typeAliasDefinition);if (result == null) result=casePackageMember(typeAliasDefinition);if (result == null) result=caseNamedElement(typeAliasDefinition);if (result == null) result=caseAnnotatableElement(typeAliasDefinition);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.LOCAL_REACTION:{LocalReaction localReaction=(LocalReaction)theEObject;T result=caseLocalReaction(localReaction);if (result == null) result=caseReaction(localReaction);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.TRANSITION_REACTION:{TransitionReaction transitionReaction=(TransitionReaction)theEObject;T result=caseTransitionReaction(transitionReaction);if (result == null) result=caseReaction(transitionReaction);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.GUARD:{Guard guard=(Guard)theEObject;T result=caseGuard(guard);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.ENTRY_POINT_SPEC:{EntryPointSpec entryPointSpec=(EntryPointSpec)theEObject;T result=caseEntryPointSpec(entryPointSpec);if (result == null) result=caseReactionProperty(entryPointSpec);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.EXIT_POINT_SPEC:{ExitPointSpec exitPointSpec=(ExitPointSpec)theEObject;T result=caseExitPointSpec(exitPointSpec);if (result == null) result=caseReactionProperty(exitPointSpec);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.EVENT_SPEC:{EventSpec eventSpec=(EventSpec)theEObject;T result=caseEventSpec(eventSpec);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.REGULAR_EVENT_SPEC:{RegularEventSpec regularEventSpec=(RegularEventSpec)theEObject;T result=caseRegularEventSpec(regularEventSpec);if (result == null) result=caseEventSpec(regularEventSpec);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.TIME_EVENT_SPEC:{TimeEventSpec timeEventSpec=(TimeEventSpec)theEObject;T result=caseTimeEventSpec(timeEventSpec);if (result == null) result=caseEventSpec(timeEventSpec);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.BUILTIN_EVENT_SPEC:{BuiltinEventSpec builtinEventSpec=(BuiltinEventSpec)theEObject;T result=caseBuiltinEventSpec(builtinEventSpec);if (result == null) result=caseEventSpec(builtinEventSpec);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.ENTRY_EVENT:{EntryEvent entryEvent=(EntryEvent)theEObject;T result=caseEntryEvent(entryEvent);if (result == null) result=caseBuiltinEventSpec(entryEvent);if (result == null) result=caseEventSpec(entryEvent);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.EXIT_EVENT:{ExitEvent exitEvent=(ExitEvent)theEObject;T result=caseExitEvent(exitEvent);if (result == null) result=caseBuiltinEventSpec(exitEvent);if (result == null) result=caseEventSpec(exitEvent);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.ALWAYS_EVENT:{AlwaysEvent alwaysEvent=(AlwaysEvent)theEObject;T result=caseAlwaysEvent(alwaysEvent);if (result == null) result=caseBuiltinEventSpec(alwaysEvent);if (result == null) result=caseEventSpec(alwaysEvent);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.SIMPLE_SCOPE:{SimpleScope simpleScope=(SimpleScope)theEObject;T result=caseSimpleScope(simpleScope);if (result == null) result=caseScope(simpleScope);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.REACTION_TRIGGER:{ReactionTrigger reactionTrigger=(ReactionTrigger)theEObject;T result=caseReactionTrigger(reactionTrigger);if (result == null) result=caseTrigger(reactionTrigger);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.DEFAULT_TRIGGER:{DefaultTrigger defaultTrigger=(DefaultTrigger)theEObject;T result=caseDefaultTrigger(defaultTrigger);if (result == null) result=caseTrigger(defaultTrigger);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.REACTION_EFFECT:{ReactionEffect reactionEffect=(ReactionEffect)theEObject;T result=caseReactionEffect(reactionEffect);if (result == null) result=caseEffect(reactionEffect);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.EVENT_RAISING_EXPRESSION:{EventRaisingExpression eventRaisingExpression=(EventRaisingExpression)theEObject;T result=caseEventRaisingExpression(eventRaisingExpression);if (result == null) result=caseExpression(eventRaisingExpression);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.EVENT_VALUE_REFERENCE_EXPRESSION:{EventValueReferenceExpression eventValueReferenceExpression=(EventValueReferenceExpression)theEObject;T result=caseEventValueReferenceExpression(eventValueReferenceExpression);if (result == null) result=caseExpression(eventValueReferenceExpression);if (result == null) result=defaultCase(theEObject);return result;}case StextPackage.ACTIVE_STATE_REFERENCE_EXPRESSION:{ActiveStateReferenceExpression activeStateReferenceExpression=(ActiveStateReferenceExpression)theEObject;T result=caseActiveStateReferenceExpression(activeStateReferenceExpression);if (result == null) result=caseExpression(activeStateReferenceExpression);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public static InternalAggregations reduce(List<InternalAggregations> aggregationsList,ReduceContext context){  if (aggregationsList.isEmpty()) {    return null;  }  Map<String,List<InternalAggregation>> aggByName=new HashMap<>();  for (  InternalAggregations aggregations : aggregationsList) {    for (    InternalAggregation aggregation : aggregations.aggregations) {      List<InternalAggregation> aggs=aggByName.get(aggregation.getName());      if (aggs == null) {        aggs=new ArrayList<>(aggregationsList.size());        aggByName.put(aggregation.getName(),aggs);      }      aggs.add(aggregation);    }  }  List<InternalAggregation> reducedAggregations=new ArrayList<>();  for (  Map.Entry<String,List<InternalAggregation>> entry : aggByName.entrySet()) {    List<InternalAggregation> aggregations=entry.getValue();    InternalAggregation first=aggregations.get(0);    reducedAggregations.add(first.reduce(aggregations,context));  }  return new InternalAggregations(reducedAggregations);}  }
class C{  private void uninstall(){  uninstallListeners();  window=null;  removeAll();}  }
class C{  public DownloadFileChangeConfiguration build(){  return new DownloadFileChangeConfiguration(this);}  }
class C{  private void doShowEditTool(TerrainTool tool){  if (terrainTool != null)   terrainTool.hideMarkers();  terrainTool=tool;  if (terrainTool != null) {    terrainTool.radiusChanged(toolRadius);    terrainTool.weightChanged(toolWeight);    terrainTool.activate(manager,toolsNode);    cameraController.setUseCameraControls(false);  } else   cameraController.setUseCameraControls(true);}  }
class C{  public boolean isExported(){  EObject _eContainer=this.eContainer();  return (_eContainer instanceof ExportDeclaration);}  }
class C{  public void clear(){  tags.clear();  functions.clear();}  }
class C{  @Override public Writer append(final char value){  this.builder.append(value);  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST__DECLARED_NAME:    return declaredName != null;}return super.eIsSet(featureID);}  }
class C{  protected void endMyTurn(){  IGame game=clientgui.getClient().getGame();  Entity next=game.getNextEntity(game.getTurnIndex());  if ((game.getPhase() == IGame.Phase.PHASE_FIRING) && (next != null) && (ce() != null)&& (next.getOwnerId() != ce().getOwnerId())) {    clientgui.setDisplayVisible(false);  }  cen=Entity.NONE;  target(null);  clientgui.getBoardView().select(null);  clientgui.getBoardView().highlight(null);  clientgui.getBoardView().cursor(null);  clientgui.bv.clearMovementData();  clientgui.bv.clearFiringSolutionData();  clientgui.bv.clearStrafingCoords();  clientgui.bv.clearFieldofF();  clientgui.setSelectedEntityNum(Entity.NONE);  disableButtons();  clientgui.switchPanel(IGame.Phase.PHASE_MOVEMENT);}  }
class C{  public static void swap(double[] array){  for (int i=0; i < array.length; i++)   array[i]=swap(array[i]);}  }
class C{  public Object onMessage(String id,Object data){  return null;}  }
class C{  public void testIsmissing(){  m_Filter=getFilter("ismissing(ATT3)");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(3,result.numInstances());}  }
class C{  public static long grayC(long v){  return v ^ (v >>> 1);}  }
class C{  @RequestMapping("/be/index") public String index(Map<String,Object> map,HttpServletResponse response){  return "be/index";}  }
class C{  public void addFload(int n){  if (n < 4)   addOpcode(34 + n); else   if (n < 0x100) {    addOpcode(FLOAD);    add(n);  } else {    addOpcode(WIDE);    addOpcode(FLOAD);    addIndex(n);  }}  }
class C{  public void actionPerformed(ActionEvent ae){  long currentTime=System.nanoTime() / 1000000;  long totalTime=currentTime - animStartTime;  if (totalTime > animationDuration) {    animStartTime=currentTime;  }  float fraction=(float)totalTime / animationDuration;  fraction=Math.min(1.0f,fraction);  int red=(int)(fraction * endColor.getRed() + (1 - fraction) * startColor.getRed());  int green=(int)(fraction * endColor.getGreen() + (1 - fraction) * startColor.getGreen());  int blue=(int)(fraction * endColor.getBlue() + (1 - fraction) * startColor.getBlue());  currentColor=new Color(red,green,blue);  repaint();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static String handleServerError(Object err,Context context){  VolleyError error=(VolleyError)err;  NetworkResponse response=error.networkResponse;  if (response != null) {switch (response.statusCode) {case 404:case 422:case 401:      try {        HashMap<String,String> result=new Gson().fromJson(new String(response.data),new TypeToken<Map<String,String>>(){        }.getType());        if (result != null && result.containsKey("error")) {          return result.get("error");        }      } catch (      Exception e) {        e.printStackTrace();      }    return error.getMessage();default :  return context.getResources().getString(R.string.generic_server_down);}}return context.getResources().getString(R.string.generic_error);}  }
class C{  public Builder enableMustBeFalse(){  annotationSpecs.mustBeFalseIsSet=true;  return this;}  }
class C{  public void prepareViews(boolean firstVisible){  if (getChildCount() != 2) {    throw new IllegalStateException("This view must have exactly two children");  }  firstView=getChildAt(0);  firstAnimator.setTarget(firstView);  lastView=getChildAt(1);  lastAnimator.setTarget(lastView);  View visibleView=firstVisible ? firstView : lastView;  visibleView.setVisibility(VISIBLE);  View hiddenView=firstVisible ? lastView : firstView;  hiddenView.setVisibility(GONE);  lastVisible=!firstVisible;}  }
class C{  private ByteArrayOutputStream sendHttpRequest(String method) throws IOException {  connection.setRequestMethod(method);  int rc=connection.getResponseCode();  if (rc != HttpURLConnection.HTTP_OK) {    throw new IOException("HTTP error " + rc);  }  InputStream inputStream=connection.getInputStream();  ByteArrayOutputStream result=new ByteArrayOutputStream();  int ch;  while ((ch=inputStream.read()) != -1) {    result.write(ch);  }  inputStream.close();  return result;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value={"UC_USELESS_CONDITION","RpC_REPEATED_CONDITIONAL_TEST"},justification="isChanged = false when called from RunSwitchListAction") protected void doAction(boolean isChanged){  if (getAutomationItem() != null) {    if (!Setup.isGenerateCsvSwitchListEnabled()) {      log.warn("Generate CSV Switch List isn't enabled!");      finishAction(false);      return;    }    if (!TrainCustomSwitchList.instance().excelFileExists()) {      log.warn("Manifest creator file not found!, directory name: {}, file name: {}",TrainCustomSwitchList.instance().getDirectoryName(),TrainCustomSwitchList.instance().getFileName());      finishAction(false);      return;    }    setRunning(true);    TrainSwitchLists trainSwitchLists=new TrainSwitchLists();    TrainCsvSwitchLists trainCsvSwitchLists=new TrainCsvSwitchLists();    if (!new TrainCustomManifest().checkProcessReady()) {      log.warn("Timeout waiting for excel manifest program to complete previous opeation, timeout value: {} seconds",Control.excelWaitTime);    }    if (!new TrainCustomSwitchList().checkProcessReady()) {      log.warn("Timeout waiting for excel switch list program to complete previous opeation, timeout value: {} seconds",Control.excelWaitTime);    }    for (    Location location : LocationManager.instance().getLocationsByNameList()) {      if (location.isSwitchListEnabled() && (!isChanged || (isChanged && location.getStatus().equals(Location.MODIFIED)))) {        if (!Setup.isSwitchListRealTime()) {          trainSwitchLists.buildSwitchList(location);        }        File csvFile=trainCsvSwitchLists.buildSwitchList(location);        if (csvFile == null || !csvFile.exists()) {          log.error("CSV switch list file was not created for location {}",location.getName());          finishAction(false);          return;        }        TrainCustomSwitchList.instance().addCVSFile(csvFile);      }    }    boolean status=TrainCustomSwitchList.instance().process();    if (status) {      try {        status=TrainCustomSwitchList.instance().waitForProcessToComplete();      } catch (      InterruptedException e) {        e.printStackTrace();      }    } else {      log.info("No switch list changes found");    }    TrainManager.instance().setTrainsSwitchListStatus(Train.PRINTED);    finishAction(status);  }}  }
class C{  public static void remove(File fileToDelete) throws IOException {  final File userRoot=playOnLinuxContext.makeUserRootPath();  if (!isInSubDirectory(userRoot,fileToDelete)) {    throw new IllegalArgumentException(format("The file (%s) must be in a the PlayOnLinux root directory (%s)",fileToDelete,userRoot));  }  FileUtils.deleteDirectory(fileToDelete);}  }
class C{  @Inline public ObjectReference traceObject(ObjectReference object,boolean root){  return traceObject(object);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void run(){  amIActive=true;  double x, y;  double z=0;  int a, intensity;  PointRecord point;  double[] entry;  int lowestPointIndex=-1;  double lowestPointZ=Double.POSITIVE_INFINITY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFile=args[0];  String outputFile=args[1];  threshold=Double.parseDouble(args[2]);  searchDist=Double.parseDouble(args[3]);  if ((inputFile.length() <= 0 || outputFile.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (inputFile.endsWith(".las")) {      LASReader las=new LASReader(inputFile);      numPoints=(int)las.getNumPointRecords();      data=new LidarData[numPoints];      done=new BooleanBitArray1D(numPoints);      pointsTree=new KdTree.SqrEuclid<>(2,numPoints);      for (a=0; a < numPoints; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          entry=new double[]{x,y};          pointsTree.addPoint(entry,a);          data[a]=new LidarData(x,y,z,intensity,a);          if (z < lowestPointZ) {            lowestPointZ=z;            lowestPointIndex=a;          }        }        progress=(int)(100f * (a + 1) / numPoints);        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Reading point data:",progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else     if (inputFile.endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputFile);      if (input.getShapeType().getDimension() != ShapeTypeDimension.Z) {        return;      }      MultiPointZ mpz=(MultiPointZ)(input.getRecord(0).getGeometry());      numPoints=mpz.getNumPoints();      data=new LidarData[numPoints];      done=new BooleanBitArray1D(numPoints);      double[][] points=mpz.getPoints();      double[] zArray=mpz.getzArray();      pointsTree=new KdTree.SqrEuclid<>(2,numPoints);      for (a=0; a < numPoints; a++) {        entry=new double[]{points[a][0],points[a][1]};        pointsTree.addPoint(entry,a);        data[a]=new LidarData(points[a][0],points[a][1],zArray[a],0,a);        if (zArray[a] < lowestPointZ) {          lowestPointZ=zArray[a];          lowestPointIndex=a;        }        progress=(int)(100f * (a + 1) / numPoints);        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Reading point data:",progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    threshold=searchDist * Math.tan(Math.toRadians(65.0));    for (a=0; a < numPoints; a++) {      z=data[a].z;      entry=new double[]{data[a].x,data[a].y};      List<KdTree.Entry<Integer>> results=pointsTree.neighborsWithinRange(entry,searchDist);      double minSlope=z;      for (int i=0; i < results.size(); i++) {        int pointNum=results.get(i).value;        if (pointNum != a) {          if (data[pointNum].z < minSlope) {            minSlope=data[pointNum].z;          }        }      }      data[a].maxDownwardAngle=(z - minSlope);      if (data[a].maxDownwardAngle > threshold) {        data[a].w=0;      } else {        data[a].w=1 - data[a].maxDownwardAngle / threshold;      }      progress=(int)(100f * a / numPoints);      if (progress != oldProgress) {        oldProgress=progress;        updateProgress("Calculating elev. diff.:",progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    DBFField fields[]=new DBFField[5];    fields[0]=new DBFField();    fields[0].setName("Z");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(3);    fields[1]=new DBFField();    fields[1].setName("I");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(8);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("CLASS");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(8);    fields[2].setDecimalCount(0);    fields[3]=new DBFField();    fields[3].setName("MAXDNANGLE");    fields[3].setDataType(DBFField.DBFDataType.NUMERIC);    fields[3].setFieldLength(8);    fields[3].setDecimalCount(4);    fields[4]=new DBFField();    fields[4].setName("WEIGHT");    fields[4].setDataType(DBFField.DBFDataType.NUMERIC);    fields[4].setFieldLength(8);    fields[4].setDecimalCount(4);    File outFile=new File(outputFile);    if (outFile.exists()) {      outFile.delete();    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);    for (a=0; a < numPoints; a++) {      whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(data[a].x,data[a].y);      Object[] rowData=new Object[5];      rowData[0]=data[a].z;      rowData[1]=(double)data[a].intensity;      rowData[2]=(double)data[a].classValue;      rowData[3]=data[a].maxDownwardAngle;      rowData[4]=data[a].w;      output.addRecord(wbGeometry,rowData);      progress=(int)(100f * (a + 1) / numPoints);      if (progress != oldProgress) {        oldProgress=progress;        updateProgress("Outputting point data:",progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    output.write();    System.out.println("Done!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean match(ClassInstanceCreation node,Object other){  if (!(other instanceof ClassInstanceCreation)) {    return false;  }  ClassInstanceCreation o=(ClassInstanceCreation)other;  int level=node.getAST().apiLevel;  if (level == AST.JLS2_INTERNAL) {    if (!safeSubtreeMatch(node.internalGetName(),o.internalGetName())) {      return false;    }  }  if (level >= AST.JLS3) {    if (!safeSubtreeListMatch(node.typeArguments(),o.typeArguments())) {      return false;    }    if (!safeSubtreeMatch(node.getType(),o.getType())) {      return false;    }  }  return safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeListMatch(node.arguments(),o.arguments()) && safeSubtreeMatch(node.getAnonymousClassDeclaration(),o.getAnonymousClassDeclaration());}  }
class C{  public void initOptions(){  CHECK_BOX.setSelected(UpdateManagerSettings.SHOW_FROSTWIRE_RECOMMENDATIONS.getValue());}  }
class C{  public static GripServer makeServer(ContextStore store,GripServer.JettyServerFactory factory,SettingsProvider settingsProvider){  return new GripServer(store,factory,settingsProvider);}  }
class C{  public PKCS1OracleRequest(byte[] encryptedKey){  this.encryptedKey=encryptedKey;}  }
class C{  public SearchBuilder<T> byTag(String tag){  return by(TAG_PARAM,tag);}  }
class C{  public KeyPair(){  final KeyGenerator generator=CryptoEngines.defaultEngine().createKeyGenerator();  final KeyPair pair=generator.generateKeyPair();  this.privateKey=pair.getPrivateKey();  this.publicKey=pair.getPublicKey();}  }
class C{  public AnnotationMemberValue(Annotation a,ConstPool cp){  super('@',cp);  value=a;}  }
class C{  private Intent makeMapsIntent(String address){  return new Intent(Intent.ACTION_VIEW,Uri.parse("geo:0,0?q=" + Uri.encode(address)));}  }
class C{  public void ifNonNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNONNULL,label);}  }
class C{  public Date(){  this(System.currentTimeMillis());}  }
class C{  public boolean contains(Namespace namespace){  String prefix=namespace.getPrefix();  Namespace current;  if ((prefix == null) || (prefix.length() == 0)) {    current=getDefaultNamespace();  } else {    current=getNamespaceForPrefix(prefix);  }  if (current == null) {    return false;  }  if (current == namespace) {    return true;  }  return namespace.getURI().equals(current.getURI());}  }
class C{  public Stream<? extends Location> references(Symbol symbol){  String key=uniqueName(symbol);  return sourcePath.values().stream().flatMap(null);}  }
class C{  public static void printJsonCodePoint(Appendable out,int codePoint) throws IOException {  printCodePoint(out,codePoint,EscapeMode.JSON);}  }
class C{  protected int calculateBestSubsampleFactor(Size imageSize,Size targetSize){  int maxSubsample=Math.min(imageSize.getWidth() / targetSize.getWidth(),imageSize.getHeight() / targetSize.getHeight());  if (maxSubsample < 1) {    return 1;  }  for (int i=maxSubsample; i >= 1; i--) {    if (((imageSize.getWidth() % (2 * i) == 0) && (imageSize.getHeight() % (2 * i) == 0))) {      return i;    }  }  return 1;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(getPath().toOSString());  buffer.append('[');switch (getEntryKind()) {case IClasspathEntry.CPE_LIBRARY:    buffer.append("CPE_LIBRARY");  break;case IClasspathEntry.CPE_PROJECT:buffer.append("CPE_PROJECT");break;case IClasspathEntry.CPE_SOURCE:buffer.append("CPE_SOURCE");break;case IClasspathEntry.CPE_VARIABLE:buffer.append("CPE_VARIABLE");break;case IClasspathEntry.CPE_CONTAINER:buffer.append("CPE_CONTAINER");break;}buffer.append("][");switch (getContentKind()) {case IPackageFragmentRoot.K_BINARY:buffer.append("K_BINARY");break;case IPackageFragmentRoot.K_SOURCE:buffer.append("K_SOURCE");break;case org.eclipse.jdt.internal.core.ClasspathEntry.K_OUTPUT:buffer.append("K_OUTPUT");break;}buffer.append(']');if (getSourceAttachmentPath() != null) {buffer.append("[sourcePath:");buffer.append(getSourceAttachmentPath());buffer.append(']');}if (getSourceAttachmentRootPath() != null) {buffer.append("[rootPath:");buffer.append(getSourceAttachmentRootPath());buffer.append(']');}buffer.append("[isExported:");buffer.append(this.isExported);buffer.append(']');IPath[] patterns=this.inclusionPatterns;int length;if ((length=patterns == null ? 0 : patterns.length) > 0) {buffer.append("[including:");for (int i=0; i < length; i++) {buffer.append(patterns[i]);if (i != length - 1) {buffer.append('|');}}buffer.append(']');}patterns=this.exclusionPatterns;if ((length=patterns == null ? 0 : patterns.length) > 0) {buffer.append("[excluding:");for (int i=0; i < length; i++) {buffer.append(patterns[i]);if (i != length - 1) {buffer.append('|');}}buffer.append(']');}if (this.accessRuleSet != null) {buffer.append('[');buffer.append(this.accessRuleSet.toString(false));buffer.append(']');}if (this.entryKind == IClasspathEntry.CPE_PROJECT) {buffer.append("[combine access rules:");buffer.append(this.combineAccessRules);buffer.append(']');}if (getOutputLocation() != null) {buffer.append("[output:");buffer.append(getOutputLocation());buffer.append(']');}if ((length=this.extraAttributes == null ? 0 : this.extraAttributes.length) > 0) {buffer.append("[attributes:");for (int i=0; i < length; i++) {buffer.append(this.extraAttributes[i]);if (i != length - 1) {buffer.append(',');}}buffer.append(']');}return buffer.toString();}  }
class C{  public void addDebugger(final DebuggerTemplate debugger) throws CouldntSaveDataException {  Preconditions.checkNotNull(debugger,"IE00237: Debugger argument can't be null");  Preconditions.checkArgument(debugger.inSameDatabase(m_provider),"IE00238: Debugger template and project are not in the same database");  m_provider.addDebugger(m_project,debugger);  m_assignedDebuggers.add(debugger);  for (  final IProjectListener listener : m_listeners) {    try {      listener.addedDebugger(m_project,debugger);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  updateModificationDate();}  }
class C{  private boolean seekAndReadNextLabel(boolean qualityLabel) throws IOException {  readInputBuffer();  final char labelChar=qualityLabel ? '+' : '@';  while (mInputBufferLength > 0 && mInputBufferPosition < mInputBufferLength) {    final byte b=mInputBuffer[mInputBufferPosition];    if (b == labelChar) {      mInputBufferPosition++;      mSequenceCount++;      return readLabel();    } else {      if (b == '>') {        throw new NoTalkbackSlimException(ErrorType.FASTA);      } else       if (!Character.isWhitespace((char)b)) {        throw new NoTalkbackSlimException(ErrorType.BAD_FASTA_LABEL,name() != null ? name() : "<none>");      }    }    mInputBufferPosition++;    readInputBuffer();  }  if (mSequenceCount == 0) {    final String filename=mSourceIt instanceof FileStreamIterator ? ((FileStreamIterator)mSourceIt).currentFile().getPath() : "<Not known>";    Diagnostic.warning(WarningType.NO_SEQUENCE,filename);  }  return false;}  }
class C{  public ActionEvent(Object source,int keyEvent,boolean longClick){  this.source=source;  this.keyEvent=keyEvent;  this.longEvent=longClick;  this.trigger=Type.KeyPress;}  }
class C{  public void start(){  coapServer.start();  LOG.info("Bootstrap server started at coap://{}, coaps://{}.",getNonSecureAddress(),getSecureAddress());}  }
class C{  public boolean isReceiveInquiryReply(){  Object oo=get_Value(COLUMNNAME_ReceiveInquiryReply);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void scheduleCollector(CollectorContext context){  model.scheduleCollector(context);}  }
class C{  @Field(36) public int intVal(){  return this.io.getIntField(this,36);}  }
class C{  public void onRead(boolean isHit){  reads.incrementAndGet();  if (isHit)   hits.incrementAndGet(); else   misses.incrementAndGet();  if (delegate != null)   delegate.onRead(isHit);}  }
class C{  public static Object makeSubViews(GroupByView groupView,String[] propertyNames,Object groupByValues,AgentInstanceViewFactoryChainContext agentInstanceContext){  if (!groupView.hasViews()) {    String message="Unexpected empty list of child nodes for group view";    log.error(".copySubViews " + message);    throw new EPException(message);  }  Object subviewHolder;  if (groupView.getViews().length == 1) {    subviewHolder=copyChildView(groupView,propertyNames,groupByValues,agentInstanceContext,groupView.getViews()[0]);  } else {    ArrayList<View> subViewList=new ArrayList<View>(4);    subviewHolder=subViewList;    for (    View originalChildView : groupView.getViews()) {      View copyChildView=copyChildView(groupView,propertyNames,groupByValues,agentInstanceContext,originalChildView);      subViewList.add(copyChildView);    }  }  return subviewHolder;}  }
class C{  public void testBug15383() throws Exception {  createTable("testBug15383","(id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,value BIGINT UNSIGNED NULL DEFAULT 0,PRIMARY KEY(id))","InnoDB");  this.stmt.executeUpdate("INSERT INTO testBug15383(value) VALUES(1)");  Statement updatableStmt=this.conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  try {    this.rs=updatableStmt.executeQuery("SELECT * from testBug15383");    assertTrue(this.rs.next());    Object bigIntObj=this.rs.getObject("value");    assertEquals("java.math.BigInteger",bigIntObj.getClass().getName());    this.rs.updateObject("value",new BigInteger("3"));    this.rs.updateRow();    assertEquals("3",this.rs.getString("value"));  }  finally {    if (this.rs != null) {      ResultSet toClose=this.rs;      this.rs=null;      toClose.close();    }    if (updatableStmt != null) {      updatableStmt.close();    }  }}  }
class C{  public void testStartClock(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.startClock();}  }
class C{  private static long computePresentationTime(int frameIndex){  return 132 + frameIndex * 1000000 / FRAME_RATE;}  }
class C{  @Override public boolean isMutable(){  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CustomParameter(String name,String value){  this.name=name;  this.value=value;}  }
class C{  public static long modInverse(long a,long mod){  return BigInteger.valueOf(a).modInverse(BigInteger.valueOf(mod)).longValue();}  }
class C{  protected String formatInstruction(Instruction inst){  if (Call.conforms(inst)) {    return "CALL " + formatCall(inst);  } else {    return inst.toString();  }}  }
class C{  private boolean removeMapping(Object key,Object value){  if (key == null) {    HashMapEntry<K,V> e=entryForNullKey;    if (e == null || !Objects.equals(value,e.value)) {      return false;    }    entryForNullKey=null;    modCount++;    size--;    postRemove(e);    return true;  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      if (!Objects.equals(value,e.value)) {        return false;      }      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      postRemove(e);      return true;    }  }  return false;}  }
class C{  public ObjectAlreadyExistsException(JobDetail offendingJob){  super("Unable to store Job : '" + offendingJob.getKey() + "', because one already exists with this identification.");}  }
class C{  public static void stopAll(){  ourExecutor.shutdown();  ourInstances.clear();  try {    ((NotificationEmitter)ManagementFactory.getMemoryMXBean()).removeNotificationListener(ourLowMemoryListener);  } catch (  ListenerNotFoundException e) {    LOG.error(e);  }}  }
class C{  public void onDestroy(boolean isChangingConfiguration){  mIsRunning=isChangingConfiguration;  mConfigurationChangeOccurred=isChangingConfiguration;  mOpsInstance.onDestroy(isChangingConfiguration);}  }
class C{  public void actionPerformed(ActionEvent evt){  System.out.println("Refresh Page triggered");}  }
class C{  private static int calcLongStrLength(long posValue){  int len=10;  long comp=TEN_BILLION_L;  while (posValue >= comp) {    if (len == 19) {      break;    }    ++len;    comp=(comp << 3) + (comp << 1);  }  return len;}  }
class C{  public String userIdDate(Object oprefixLength,String dateFormat){  int prefixLength=FunctionHandler.getInt(oprefixLength);  String prefix=randomString(alphaMixedNumeric(),prefixLength);  String date=new SimpleDateFormat(dateFormat).format(new java.util.Date());  return prefix + date;}  }
class C{  public FromMatchesFilter(String address){  if (address == null) {    throw new IllegalArgumentException("Parameter cannot be null.");  }  this.address=address.toLowerCase();  matchBareJID="".equals(StringUtils.parseResource(address));}  }
class C{  public ComparisonPredicate(int operation,Expression left,Expression right,Comparator cmp){  super(operation,LT,GTEQ,left,right);  this.m_cmp=cmp;}  }
class C{  public FLVReader(File f) throws IOException {  this(f,false);}  }
class C{  public ON ON(String columns){  return new ON(this,columns);}  }
class C{  public static void assertEquals(String message,BufferedImage image1,BufferedImage image2){  if (!isEqual(image1,image2)) {    fail((String.valueOf(message) + " Image contents are different.").trim());  }}  }
class C{  public void registerScriptType(ScriptType type){  if (typeMap.containsKey(type.getName())) {    throw new InvalidParameterException("ScriptType already registered: " + type.getName());  }  this.typeMap.put(type.getName(),type);  this.getTreeModel().addType(type);  if (shouldLoadTemplatesOnScriptTypeRegistration) {    loadScriptTemplates(type);  }}  }
class C{  protected String assertPropertyDefault(String key,String value){  if (properties.getString(key) == null) {    if (logger.isDebugEnabled())     logger.debug("Assigning default global property value: key=" + key + " default value="+ value);    properties.setString(key,value);  }  return properties.getString(key);}  }
class C{  private static Reader makeReader(String templateLocation) throws IOException {  if (UtilValidate.isEmpty(templateLocation)) {    throw new IllegalArgumentException("FreeMarker template location null or empty");  }  URL locationUrl=null;  try {    locationUrl=FlexibleLocation.resolveLocation(templateLocation);  } catch (  MalformedURLException e) {    throw new IllegalArgumentException(e.getMessage());  }  if (locationUrl == null) {    throw new IllegalArgumentException("FreeMarker file not found at location: " + templateLocation);  }  InputStream locationIs=locationUrl.openStream();  Reader templateReader=new InputStreamReader(locationIs);  String locationProtocol=locationUrl.getProtocol();  if ("file".equals(locationProtocol) && Debug.verboseOn()) {    String locationFile=locationUrl.getFile();    int lastSlash=locationFile.lastIndexOf("/");    String locationDir=locationFile.substring(0,lastSlash);    String filename=locationFile.substring(lastSlash + 1);    Debug.logVerbose("FreeMarker render: filename=" + filename + ", locationDir="+ locationDir,module);  }  return templateReader;}  }
class C{  public static void assertNotEquals(byte notExpected,byte actual){  try {    Verify.assertNotEquals("byte",notExpected,actual);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.608 -0500",hash_original_method="2A9249956792D7D287EC6DE49DBB9AA1",hash_generated_method="AA4E0CC7FC8A3431B9D334D1E230E385") public void joinGroup(InetAddress groupAddr) throws IOException {  checkJoinOrLeave(groupAddr);  impl.join(groupAddr);}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  @Override public int writeTelegram(char[] buffer){  return writeTelegram(buffer,0,null);}  }
class C{  synchronized void accept(T connection){  syncDatabase();  HostData currentPartner=getHostData(connection.getHostAddress());  currentPartner.connections.addFirst(connection);  if (!activePartners.contains(currentPartner)) {    activePartners.add(currentPartner);  }}  }
class C{  public static void validate(Source source) throws Exception {  validate(schema,source,ErrorCodes.X_MALFORMED_OPTIONAL_PARTS_CONF);}  }
class C{  public JSONObject put(String key,Collection<Object> value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  private QueryBuilderKraken parseUpdate(){  Token token;  UpdateQueryBuilder query=new UpdateQueryBuilder(_tableManager,_sql);  String tableName=parseTableName();  query.setTableName(tableName);  _query=query;  if ((token=scanToken()) != Token.SET) {    throw error(L.l("expected SET at {0}",token));  }  do {    parseSetItem(query);  } while ((token=scanToken()) == Token.COMMA);  _token=token;  ExprKraken whereExpr=null;  token=scanToken();  if (token == Token.WHERE) {    whereExpr=parseExpr();  } else   if (token != null && token != Token.EOF) {    throw error("expected WHERE at '{0}'",token);  }  ParamExpr[] params=_params.toArray(new ParamExpr[_params.size()]);  query.setParams(params);  query.setWhereExpr(whereExpr);  return query;}  }
class C{  public void testRxLifecycleKotlinOk() throws Exception {  assertEquals(NO_WARNINGS,lintClassFile("bin/classes/LifecycleOkKotlinExt.kt.class"));}  }
class C{  public static double calculateDistance(int[] edgeHistogramA,int[] edgeHistogramB){  double result=0d;  for (int i=0; i < edgeHistogramA.length; i++) {    result+=Math.abs(QuantTable[i % 5][edgeHistogramA[i]] - QuantTable[i % 5][edgeHistogramB[i]]);  }  for (int i=0; i <= 4; i++) {    result+=5d * Math.abs(edgeHistogramA[i] - edgeHistogramB[i]);  }  for (int i=5; i < 80; i++) {    result+=Math.abs(edgeHistogramA[i] - edgeHistogramB[i]);  }  return result;}  }
class C{  private static ComputeState createCompute(BaseModelTest test,ComputeDescription cd,ResourcePoolState rp) throws Throwable {  ComputeState compute=ComputeServiceTest.buildValidStartState(cd);  compute.resourcePoolLink=rp != null ? rp.documentSelfLink : null;  return test.postServiceSynchronously(ComputeService.FACTORY_LINK,compute,ComputeState.class);}  }
class C{  @Override public Statement createStatement(int resultSetType,int resultSetConcurrency) throws SQLException {  try {    int id=getNextId(TraceObject.STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("Statement",TraceObject.STATEMENT,id,"createStatement(" + resultSetType + ", "+ resultSetConcurrency+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkClosed();    return new JdbcStatement(this,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void checkPrinter(){  if (iPrinter == null) {    throw new UnsupportedOperationException("Printing not supported");  }}  }
class C{  @Override public void write(URI f,URIChooser fc) throws IOException {  new SVGOutputFormat().write(new File(f),view.getDrawing());}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) private void cancelSingleTap(){  mMaybeSingleTap=false;}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  public static boolean isCarbonIndexFile(String fileNameWithPath){  int pos=fileNameWithPath.lastIndexOf('.');  if (pos != -1) {    return fileNameWithPath.substring(pos).startsWith(INDEX_FILE_EXT);  }  return false;}  }
class C{  protected void preTaskExecution(){  checkPauseAndWait();}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  CancellationRegistry.getInstance().registerMessage(this);  resp=ObjectNamesResponse.create(dm,this.getSender());  if (cancelled) {    return null;  }  resp.buildNames(this.getRegion(dm.getSystem()));  if (cancelled) {    return null;  }  CancellationRegistry.getInstance().deregisterMessage(this);  return resp;}  }
class C{  public void reverse(){  Object[] objs=this.objs;  int numObjs=this.numObjs;  int l=numObjs / 2;  Object obj;  for (int x=0; x < l; x++) {    obj=objs[x];    objs[x]=objs[numObjs - x - 1];    objs[numObjs - x - 1]=obj;  }}  }
class C{  public boolean containsKey(Object key){  purgeBeforeRead();  Entry entry=getEntry(key);  if (entry == null) {    return false;  }  return (entry.getValue() != null);}  }
class C{  @Override protected Value copyValue(Value v){  return v.copy();}  }
class C{  static Set<Node> toNodeSet(Iterator<Node> i){  Set<Node> nodeSet=new HashSet<Node>();  while (i.hasNext()) {    Node n=i.next();    nodeSet.add(n);    if (n.getNodeType() == Node.ELEMENT_NODE) {      NamedNodeMap nnm=n.getAttributes();      for (int j=0, length=nnm.getLength(); j < length; j++) {        nodeSet.add(nnm.item(j));      }    }  }  return nodeSet;}  }
class C{  @Override public boolean canBePushed(){  return true;}  }
class C{  public Topology buildAppTopology(){  Topology t=tp.newTopology("mqttClientSubscriber");  MqttConfig config=Runner.newConfig(options);  MqttStreams mqtt=new MqttStreams(t,null);  System.out.println("Using MQTT clientId " + config.getClientId());  TStream<String> msgs=mqtt.subscribe(options.get(OPT_TOPIC),options.get(OPT_QOS));  msgs.sink(null);  return t;}  }
class C{  public void put(E e){  offer(e);}  }
class C{  public synchronized Optional<AuditLogEntry> next() throws SQLException, AuditLogEntryException {  if (auditLogEntries.size() > 0) {    return Optional.of(auditLogEntries.remove());  }  LOG.debug("Executing queries to try to get more audit log entries from the DB");  fetchMoreEntries();  if (auditLogEntries.size() > 0) {    return Optional.of(auditLogEntries.remove());  } else {    return Optional.empty();  }}  }
class C{  Node(Object item,boolean isData){  UNSAFE.putObject(this,itemOffset,item);  this.isData=isData;}  }
class C{  public void deleteAttributeAt(int position){  if ((position < 0) || (position >= m_Attributes.size())) {    throw new IllegalArgumentException("Index out of range");  }  if (position == m_ClassIndex) {    throw new IllegalArgumentException("Can't delete class attribute");  }  ArrayList<Attribute> newList=new ArrayList<Attribute>(m_Attributes.size() - 1);  newList.addAll(m_Attributes.subList(0,position));  for (int i=position + 1; i < m_Attributes.size(); i++) {    Attribute newAtt=(Attribute)m_Attributes.get(i).copy();    newAtt.setIndex(i - 1);    newList.add(newAtt);  }  m_Attributes=newList;  if (m_ClassIndex > position) {    m_ClassIndex--;  }  for (int i=0; i < numInstances(); i++) {    instance(i).setDataset(null);    instance(i).deleteAttributeAt(position);    instance(i).setDataset(this);  }}  }
class C{  private void initBackLightManagement(){  if (null != mCall) {    if (mCall.isVideo()) {      Log.d(LOG_TAG,"## initBackLightManagement(): backlight is ON");      getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);    } else {      mSensorMgr=(SensorManager)getSystemService(SENSOR_SERVICE);      if (null == (mProximitySensor=mSensorMgr.getDefaultSensor(Sensor.TYPE_PROXIMITY))) {        Log.w(LOG_TAG,"## initBackLightManagement(): Warning - proximity sensor not supported");      }    }  }}  }
class C{  public void reopen() throws IOException {  super.reopen();  Debug.message("binaryfile","JarInputReader: reopening jarFile " + jarFileName);  if (jarFile != null)   jarFile.close();  jarFile=null;  jarFile=new JarFile(URLDecoder.decode(jarFileName,"UTF-8"));  JarEntry entry=jarFile.getJarEntry(jarEntryName);  inputStream=jarFile.getInputStream(entry);  if (inputStream == null) {    Debug.error("JarInputReader: Problem getting input stream for " + jarEntryName + " in "+ jarFileName);  }}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  public void addMarker(AxisEnum axis,double position,Paint paint,int width,float[] style){  float dashPhase=0;  Stroke stroke=new BasicStroke(width,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,2,style,dashPhase);  ValueMarker marker=new ValueMarker(position,paint,stroke);switch (axis) {case X:    m_xMarker=marker;  if (m_chart != null) {    m_chart.getXYPlot().addDomainMarker(m_xMarker);  }break;case Y:m_yMarker=marker;if (m_chart != null) {m_chart.getXYPlot().addRangeMarker(m_yMarker);}break;}}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableListMultimap<K,V> of(){  return (ImmutableListMultimap<K,V>)EmptyImmutableListMultimap.INSTANCE;}  }
class C{  public byte[] readObjectAsByteArray(final PdfObject pdfObject,final boolean isCompressed,final int objectID,final int gen){  byte[] raw=null;  if (linHintTable != null) {    raw=linHintTable.getObjData(objectID);  }  if (raw == null) {    if (isCompressed) {      raw=readCompressedObjectAsByteArray(pdfObject,objectID,gen);    } else {      movePointer(offset.elementAt(objectID));      if (ObjLengthTable == null || offset.isRefTableInvalid()) {        raw=objectReader.readObjectData(-1,pdfObject);      } else       if (objectID > ObjLengthTable.length) {        return null;      } else {        raw=objectReader.readObjectData(ObjLengthTable[objectID],pdfObject);      }    }  }  int j=0;  if (raw.length > 15) {    for (int i2=0; i2 < 10; i2++) {      if (raw[i2] == 'o' && raw[i2 + 1] == 'b' && raw[i2 + 2] == 'j') {        break;      } else       if (raw[i2] == 'e' && raw[i2 + 1] == 'n' && raw[i2 + 2] == 'd' && raw[i2 + 3] == 'o' && raw[i2 + 4] == 'b' && raw[i2 + 5] == 'j') {        j=i2 + 6;        objectReader.fileIsBroken=true;        break;      }    }  }  while (raw[j] == 10 || raw[j] == 12 || raw[j] == 32) {    j++;  }  if (j > 0) {    final byte[] oldBuffer=raw;    final int newLength=raw.length - j;    raw=new byte[newLength];    System.arraycopy(oldBuffer,j,raw,0,newLength);  }  return raw;}  }
class C{  private void createYamlFile(Swagger swagger) throws MojoExecutionException {  String yamlOutputLocation=outputDirectory + "/" + outputFilename;  try {    getLog().debug("Creating output YAML file \"" + yamlOutputLocation + "\"");    ObjectMapper objectMapper=new ObjectMapper(new YAMLFactory());    objectMapper.setPropertyNamingStrategy(new SwaggerNamingStrategy());    objectMapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);    objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);    objectMapper.writeValue(new File(yamlOutputLocation),swagger);  } catch (  IOException e) {    throw new MojoExecutionException("Error creating output YAML file \"" + yamlOutputLocation + "\". Reason: "+ e.getMessage(),e);  }}  }
class C{  public LMSOfflineControlPanel(Window frame){  this.frame=frame;  noiseTri=new DropDownTriangle(UpDirection.LEFT,false,"","",frame);  noisePanel=new RandomizerPanel(frame);  noisePanel.fillDefaultValues();  init();}  }
class C{  private static void writeId(JsonGenerator gen,Object data,ResourceField idField) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException, IOException {  String sourceId=BeanUtils.getProperty(data,idField.getUnderlyingName());  gen.writeObjectField(ID_FIELD_NAME,sourceId);}  }
class C{  public boolean contains(int x,int y){  return (ui != null) ? ui.contains(this,x,y) : super.contains(x,y);}  }
class C{  public SearchAction(final CViewSearcherDialog dialog){  super("Search");  m_dialog=Preconditions.checkNotNull(dialog,"IE01295: Dialog argument can not be null");}  }
class C{  @Override public void cleanUpAndInsertEpilogue(){  Instruction inst=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();  for (; inst != null; inst=inst.nextInstructionInCodeOrder()) {switch (inst.getOpcode()) {case PPC_MOVE_opcode:case PPC_FMR_opcode:      if (MIR_Move.getResult(inst).getRegister().number == MIR_Move.getValue(inst).getRegister().number) {        inst=inst.remove();      }    break;case PPC_BLR_opcode:  if (frameIsRequired()) {    insertEpilogue(inst);  }break;case PPC_LFS_opcode:case PPC_LFD_opcode:case PPC_LInt_opcode:case PPC_LWZ_opcode:case PPC_LAddr_opcode:if (MIR_Load.getAddress(inst).getRegister() == ir.regpool.getPhysicalRegisterSet().getFP()) {Operand one=MIR_Load.getOffset(inst);if (one instanceof IntConstantOperand) {  int offset=((IntConstantOperand)one).value;  if (offset <= -256) {    if (frameIsRequired()) {      MIR_Load.setOffset(inst,IC(frameSize - offset - 256));    } else {      MIR_Load.setOffset(inst,IC(-offset - 256));    }  }}}default :break;}}}  }
class C{  private JSONStringer append(String s) throws JSONException {  if (s == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    if (this.comma && this.mode == 'a') {      this.sb.append(',');    }    this.sb.append(s);    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  updateChildren(e,a);}  }
class C{  @GetMapping @ResponseBody public ResponseEntity<Response<UserVO>> findAllUsers(){  List<UserVO> users=m.map(new ArrayList<>(service.findAll()),UserVO.class);  return buildOKResponse(users.toArray(new UserVO[users.size()]));}  }
class C{  public int descriptorIndex(int i){  return ByteArray.readU16bit(info,i * 10 + 8);}  }
class C{  @Override public void onSlotRemoved(final RPObject object,final String slotName,final RPObject sobject){}  }
class C{  protected void throttleDispose(){  log.debug("disposing of throttle (and setting slot = null)");  if (mRefreshTimer != null) {    mRefreshTimer.stop();  }  if (slot != null) {    slot.removeSlotListener(this);  }  mRefreshTimer=null;  slot=null;  network=null;  finishRecord();}  }
class C{  public void receiveResultgetSubscriptionKeysForSessionId(org.oscm.example.client.SessionServiceStub.GetSubscriptionKeysForSessionIdResponseE result){}  }
class C{  public boolean foundToken(){  return (m_foundToken);}  }
class C{  private void doDelete(DepartmentEditForm frm) throws Exception {  sessionContext.checkPermission(frm.getId(),"Department",Right.DepartmentDelete);  org.hibernate.Session hibSession=new DepartmentDAO().getSession();  Transaction tx=null;  try {    tx=hibSession.beginTransaction();    Department department=new DepartmentDAO().get(frm.getId(),hibSession);    if (department.isExternalManager().booleanValue()) {      for (Iterator i=hibSession.createQuery("select c from Class_ c where c.managingDept.uniqueId=:deptId").setLong("deptId",department.getUniqueId()).iterate(); i.hasNext(); ) {        Class_ clazz=(Class_)i.next();        if (clazz.getSchedulingSubpart().getManagingDept().equals(department)) {          for (Iterator j=clazz.getSchedulingSubpart().getPreferences().iterator(); j.hasNext(); ) {            Object pref=j.next();            if (!(pref instanceof TimePref))             j.remove();          }          clazz.getSchedulingSubpart().deleteAllDistributionPreferences(hibSession);          hibSession.saveOrUpdate(clazz.getSchedulingSubpart());        }        clazz.setManagingDept(clazz.getControllingDept(),sessionContext.getUser(),hibSession);        for (Iterator j=clazz.getPreferences().iterator(); j.hasNext(); ) {          Object pref=j.next();          if (!(pref instanceof TimePref))           j.remove();        }        clazz.deleteAllDistributionPreferences(hibSession);        hibSession.saveOrUpdate(clazz);      }    } else {      hibSession.createQuery("delete StudentClassEnrollment e where e.clazz.uniqueId in " + "(select c.uniqueId from Class_ c, CourseOffering co where " + "co.isControl=1 and "+ "c.schedulingSubpart.instrOfferingConfig.instructionalOffering=co.instructionalOffering and "+ "co.subjectArea.department.uniqueId=:deptId)").setLong("deptId",department.getUniqueId()).executeUpdate();    }    ChangeLog.addChange(hibSession,sessionContext,department,ChangeLog.Source.DEPARTMENT_EDIT,ChangeLog.Operation.DELETE,null,null);    hibSession.delete(department);    tx.commit();    HibernateUtil.clearCache();  } catch (  HibernateException e) {    try {      if (tx != null && tx.isActive())       tx.rollback();    } catch (    Exception e1) {    }    throw e;  }}  }
class C{  public void exit(){  exitCalled=true;  if (threadMap != null) {    deleteAllThreads();    log.info("----------------------------- ThreadMan exit -----------------------------");    if (DurationStatistics.collectStatistics) {      statistics.exit();      log.info(String.format("ThreadMan Statistics (%,d cycles in %.3fs):",statistics.allCycles,statistics.getDurationMillis() / 1000.0));      Collections.sort(statistics.threads);      for (      Statistics.ThreadStatistics threadStatistics : statistics.threads) {        double percentage=0;        if (statistics.allCycles != 0) {          percentage=(threadStatistics.runClocks / (double)statistics.allCycles) * 100;        }        log.info(String.format("    Thread %-30s %,12d cycles (%5.2f%%)",threadStatistics.getQuotedName(),threadStatistics.runClocks,percentage));      }    }  }}  }
class C{  private POInfo(Properties ctx,int AD_Table_ID,boolean baseLanguageOnly,String trxName){  m_ctx=ctx;  m_AD_Table_ID=AD_Table_ID;  boolean baseLanguage=baseLanguageOnly ? true : Env.isBaseLanguage(m_ctx,"AD_Table");  loadInfo(baseLanguage,trxName);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public CardEnumeration(){  super();  rank=Card.ACE;  suit=Card.CLUBS;}  }
class C{  public boolean contains(Class exType){  if (exType == null) {    return false;  }  if (exType.isInstance(this)) {    return true;  }  Throwable cause=getCause();  if (cause == this) {    return false;  }  if (cause instanceof ElasticsearchException) {    return ((ElasticsearchException)cause).contains(exType);  } else {    while (cause != null) {      if (exType.isInstance(cause)) {        return true;      }      if (cause.getCause() == cause) {        break;      }      cause=cause.getCause();    }    return false;  }}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  centerDrawable.setBounds(0,center - offset,getWidth(),center + offset);  centerDrawable.draw(canvas);}  }
class C{  public boolean hasExpired(){  if (maxAge == -1l) {    return false;  }  boolean expired=false;  if (maxAge <= 0l) {    expired=true;  }  return expired;}  }
class C{  public final Double2D resize(double dist){  if (dist == 0)   return new Double2D(0,0); else   if (dist == infinity || dist == -infinity || dist != dist)   throw new ArithmeticException("Cannot resize to distance " + dist); else   if ((x == 0 && y == 0) || x == infinity || x == -infinity || x != x || y == infinity || y == -infinity || y != y)   throw new ArithmeticException("Cannot resize a vector with infinite or NaN values, or of length 0, except to length 0");  double temp=length();  return new Double2D(x * dist / temp,y * dist / temp);}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuilder expected=new StringBuilder();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  protected void toggleSelectionList(Context ctx){  if (mDrawer != null) {    if (mDrawer.switchedDrawerContent()) {      resetDrawerContent(ctx);      mSelectionListShown=false;    } else {      buildDrawerSelectionList();      mAccountSwitcherArrow.setImageDrawable(new IconicsDrawable(ctx,MaterialDrawerFont.Icon.mdf_arrow_drop_up).sizeRes(R.dimen.material_drawer_account_header_dropdown).paddingRes(R.dimen.material_drawer_account_header_dropdown_padding).color(ColorHolder.color(mTextColor,ctx,R.attr.material_drawer_header_selection_text,R.color.material_drawer_header_selection_text)));      mSelectionListShown=true;    }  }}  }
class C{  public String decodeString(String s){  Deque<String> res=new ArrayDeque<>();  Deque<Integer> count=new ArrayDeque<>();  String decode="";  int num=0;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (Character.isDigit(c)) {      num=10 * num + c - '0';    } else     if (c == '[') {      count.push(num);      num=0;      res.push(decode);      decode="";    } else     if (c == ']') {      String tmp=decode;      decode=res.pop();      for (int j=count.pop(); j > 0; j--) {        decode+=tmp;      }    } else {      decode+=c;    }  }  return decode;}  }
class C{  public void await(int ID) throws InterruptedException {  if (parties == 1)   return;  final boolean startCondition=competitionCondition;  int competingFor=(locks.length * 2 - 1 - ID) / 2;  while (competingFor >= 0) {    final Lock node=locks[competingFor];    if (node.tryLock()) {synchronized (node) {        while (competitionCondition == startCondition)         node.wait();      }      node.unlock();      wakeUpTarget(competingFor * 2 + 1);      wakeUpTarget(competingFor * 2 + 2);      return;    } else {      if (competingFor == 0)       break;      competingFor=(competingFor - 1) / 2;    }  }  competitionCondition=!competitionCondition;  wakeUpTarget(0);}  }
class C{  public static <T>StoredValue<T> create(Class<T> clazz){  return new StoredValue<>(clazz);}  }
class C{  public static void shuffle(List<?> list){  Collections.shuffle(list,random);}  }
class C{  public boolean matchesWord(){  return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  public boolean hasFreeThis(){  return hasFreeThis;}  }
class C{  public void openDrawer(){  if (drawerLayout != null && sliderLayout != null) {    if (drawerGravity != 0) {      drawerLayout.openDrawer(drawerGravity);    } else {      drawerLayout.openDrawer(sliderLayout);    }  }}  }
class C{  public static void addPurificationChamberRecipe(ItemStack input,ItemStack output){  addRecipe(Recipe.PURIFICATION_CHAMBER,new PurificationRecipe(input,output));}  }
class C{  public void addLocalMaps(List<MyMap> localMaps){  this.localMaps.addAll(localMaps);}  }
class C{  public JActivityIndicator(){  labels=ResourceBundleUtil.getBundle("org.jhotdraw.gui.Labels");  initComponents();  setActivityManager(ActivityManager.getInstance());}  }
class C{  boolean isUserALocalAdminOrNotClosed(RequestAndResponse requestAndResponse) throws IOException {  if (isUserALocalAdmin(requestAndResponse)) {    return true;  }  if (!isUserSignedIn(requestAndResponse)) {    requestAndResponse.print(servletText.errorRequiresSignIn(false));    return false;  } else   if (isUsersAccountClosed(requestAndResponse)) {    requestAndResponse.print(servletText.errorAccountIsClosed());    return false;  }  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.894 -0500",hash_original_method="4003AFDAD418CC2ECC4A8EB9D6C4E6CA",hash_generated_method="D835F2A955986AAB23DD04ACF6C2D200") public ExecutorCompletionService(Executor executor,BlockingQueue<Future<V>> completionQueue){  if (executor == null || completionQueue == null)   throw new NullPointerException();  this.executor=executor;  this.aes=(executor instanceof AbstractExecutorService) ? (AbstractExecutorService)executor : null;  this.completionQueue=completionQueue;}  }
class C{  public long[] toNativeArray(){  return toNativeArray(0,_pos);}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public String toString(){  return this.timecodeComponentBO.toString();}  }
class C{  public CuboidClipboard(Vector size,Vector origin,Vector offset){  checkNotNull(size);  checkNotNull(origin);  checkNotNull(offset);  this.origin=origin;  this.offset=offset;  this.size=size;  this.dx=size.getBlockX();  this.dxz=dx * size.getBlockZ();  ids=new byte[dx * size.getBlockZ() * ((size.getBlockY() + 15) >> 4)][];  nbtMap=new HashMap<>();}  }
class C{  public void testLogPreparation() throws Exception {  File logDir=prepareLogDir("testLogPreparation");  DiskLog log=new DiskLog();  log.setLogDir(logDir.getAbsolutePath());  log.setReadOnly(false);  log.prepare();  log.release();}  }
class C{  private void calculatePartialsPartialsPruning(BigDecimal[] partials1,BigDecimal[] matrices1,BigDecimal[] partials2,BigDecimal[] matrices2,BigDecimal[] partials3){  BigDecimal sum1, sum2;  int u=0;  int v=0;  for (int l=0; l < matrixCount; l++) {    for (int k=0; k < patternCount; k++) {      int w=l * matrixSize;      for (int i=0; i < stateCount; i++) {        sum1=sum2=BigDecimal.ZERO;        for (int j=0; j < stateCount; j++) {          sum1=sum1.add(matrices1[w].multiply(partials1[v + j],precision),precision);          sum2=sum2.add(matrices2[w].multiply(partials2[v + j],precision),precision);          w++;        }        partials3[u]=sum1.multiply(sum2,precision);        u++;      }      v+=stateCount;    }  }}  }
class C{  public ScServer findServer(String ssn,String iqnOrWwn){  ScServer result=null;  ScServerHba hba=findServerHba(ssn,iqnOrWwn);  if (hba != null && hba.server != null) {    RestResult rr=restClient.get(String.format("StorageCenter/ScServer/%s",hba.server.instanceId));    if (checkResults(rr)) {      result=gson.fromJson(rr.getResult(),ScServer.class);    }  }  return result;}  }
class C{  public String encode(String pString){  return metaphone(pString);}  }
class C{  @Check public void checkClassDefinition(N4ClassDefinition n4ClassDefinition){  holdsNoKeywordInsteadOfComma(n4ClassDefinition);  ICompositeNode node=NodeModelUtils.findActualNodeFor(n4ClassDefinition);  ILeafNode keywordNode=findSecondLeafWithKeyword(n4ClassDefinition,"{",node,"extends",false);  if (keywordNode != null) {    TClass tclass=n4ClassDefinition.getDefinedTypeAsClass();    if (tclass == null) {      return;    }    if (StreamSupport.stream(tclass.getImplementedInterfaceRefs().spliterator(),false).allMatch(null)) {      List<? extends IdentifiableElement> interfaces=StreamSupport.stream(tclass.getImplementedInterfaceRefs().spliterator(),false).map(null).collect(Collectors.toList());      String message=getMessageForSYN_KW_EXTENDS_IMPLEMENTS_MIXED_UP(validatorMessageHelper.description(tclass),"extend","interface" + (interfaces.size() > 1 ? "s " : " ") + validatorMessageHelper.names(interfaces),"implements");      addIssue(message,n4ClassDefinition,keywordNode.getTotalOffset(),keywordNode.getLength(),SYN_KW_EXTENDS_IMPLEMENTS_MIXED_UP);    }  }}  }
class C{  public void add(Coordinate pt,boolean allowRepeatedPoints){  if (coordList == null)   coordList=new CoordinateList();  coordList.add(pt,allowRepeatedPoints);  lastPt=pt;}  }
class C{  public MariaDbProcedureStatement(String query,MariaDbConnection connection,String procedureName,String database,String arguments) throws SQLException {  super(connection,query,ResultSet.TYPE_FORWARD_ONLY);  this.parameterMetadata=new CallableParameterMetaData(connection,database,procedureName,false);  setParamsAccordingToSetArguments();  setParametersVariables();}  }
class C{  private static void populateContentRoot(@NotNull final ContentRootData contentRoot,@NotNull final ExternalSystemSourceType type,@Nullable final Iterable<? extends IdeaSourceDirectory> dirs) throws IllegalArgumentException {  if (dirs == null) {    return;  }  for (  IdeaSourceDirectory dir : dirs) {    ExternalSystemSourceType dirSourceType=type;    try {      if (dir.isGenerated() && !dirSourceType.isGenerated()) {        final ExternalSystemSourceType generatedType=ExternalSystemSourceType.from(dirSourceType.isTest(),dir.isGenerated(),dirSourceType.isResource(),dirSourceType.isExcluded());        dirSourceType=generatedType != null ? generatedType : dirSourceType;      }    } catch (    UnsupportedMethodException e) {      LOG.warn(e.getMessage());      printToolingProxyDiagnosticInfo(dir);    }catch (    Throwable e) {      LOG.debug(e);      printToolingProxyDiagnosticInfo(dir);    }    contentRoot.storePath(dirSourceType,dir.getDirectory().getAbsolutePath());  }}  }
class C{  protected void applyDrawTransform(DrawContext dc,SurfaceTileDrawContext sdc){  Vec4 point=new Vec4(this.location.getLongitude().degrees,this.location.getLatitude().degrees,1);  if (this.spansAntimeridian && Math.signum(sdc.getSector().getMinLongitude().degrees) != Math.signum(this.drawLocation.longitude.degrees)) {    point=new Vec4(this.location.getLongitude().degrees - 360,this.location.getLatitude().degrees,1);  }  point=point.transformBy4(sdc.getModelviewMatrix());  GL2 gl=dc.getGL().getGL2();  gl.glTranslated(point.x(),point.y(),point.z());  gl.glScaled(this.scale,this.scale,1d);}  }
class C{  public Matrix3f invert(){  return invert(this);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getRecentWatches(Sage.time() - getLong(stack));}  }
class C{  public DialogueState(Collection<BNode> nodes,Assignment evidence){  super(nodes);  this.evidence=new Assignment(evidence);  parameterVars=new HashSet<String>();  incrementalVars=new HashSet<String>();}  }
class C{  protected FireworkMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(FireworkMeta.class);}  }
class C{  public final void print(int i) throws IOException {  if (i == 0x80000000) {    print("-2147483648");    return;  }  if (i < 0) {    write('-');    i=-i;  } else   if (i < 9) {    write('0' + i);    return;  }  int length=0;  int exp=10;  if (i >= 1000000000)   length=9; else {    for (; i >= exp; length++) {      exp=10 * exp;    }  }  byte[] buffer=_writeBuffer;  int writeLength=_writeLength;  if (writeLength + length < buffer.length) {    writeLength+=length;    _writeLength=writeLength + 1;    for (int j=0; j <= length; j++) {      buffer[writeLength - j]=(byte)(i % 10 + '0');      i=i / 10;    }    return;  }  if (_bytes == null) {    _bytes=new byte[32];  }  int j=31;  while (i > 0) {    _bytes[--j]=(byte)((i % 10) + '0');    i/=10;  }  write(_bytes,j,31 - j);}  }
class C{  public void testCertPathValidator14() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator certPV;  for (int i=0; i < validValues.length; i++) {    try {      certPV=CertPathValidator.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect provider",certPV.getProvider(),defaultProvider);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchProviderException " + e.getMessage());    }    certPV=CertPathValidator.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect provider",certPV.getProvider(),defaultProvider);  }}  }
class C{  public void step(SimState state){}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSComment("normal android callback") @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:40.802 -0500",hash_original_method="39D3E8C83EC5D9AA90999E3A2D1BCB07",hash_generated_method="2DE8AD90C1A42DCA55687530BB5B9E78") @DSVerified("Called by Activity.droidsafe's method") @Override protected void onRestoreInstanceState(Bundle state){  ensureList();  super.onRestoreInstanceState(state);}  }
class C{  public synchronized void removeListener(final IGlobalProgressManagerListener listener){  m_listeners.removeListener(listener);}  }
class C{  private void assertNewMailCount(int count) throws Exception {  Thread.sleep(testMailDelay);  checkInbox(true,true,count);}  }
class C{  @SuppressWarnings("unchecked") public static <T>IdentityArrayAdapter<T> identityAdapter(T dummy){  return (IdentityArrayAdapter<T>)IDENTITYADAPTER;}  }
class C{  public boolean attempt(Word old,Word value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7){  return construct(e1,e2,e3,e4,e5,e6,e7);}  }
class C{  public static byte[] bytes(byte... elements){  return elements;}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof LayerHandler) {    logger.fine("LayersPanel found a LayerHandler");    setLayerHandler((LayerHandler)someObj);  }  if (someObj instanceof BufferedLayerMapBean) {    logger.fine("LayersPanel found BufferedLayerMapBean, creating separator panel");    backgroundLayerSeparator=LayerPane.getBackgroundLayerSeparator(" --- Background Layers --- ");  }  if (controls != null && someObj != this) {    controls.findAndInit(someObj);  }}  }
class C{  public boolean isHost(){  return host;}  }
class C{  public void addAllChars(FontFace face){  int min=face.getFirstChar();  int count=face.getNumGlyphs();  if (Trace.font)   Trace.trace("\tAdding " + count + " chars, starting from "+ min);  addCharset(min,count);}  }
class C{  public static double intersectRayPlane(Vector3d origin,Vector3d dir,Vector3d point,Vector3d normal,double epsilon){  return intersectRayPlane(origin.x,origin.y,origin.z,dir.x,dir.y,dir.z,point.x,point.y,point.z,normal.x,normal.y,normal.z,epsilon);}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public MutableDateTime add(long value){  iInstant.setMillis(getField().add(iInstant.getMillis(),value));  return iInstant;}  }
class C{  public static boolean unregisterService(long id){  boolean exitStatus=false;  if (ID_TO_SERVICE_MAP.get(id) == null) {    LOG.warning("Cannot deregister an unregistered service.");  } else {    Service<?> service=ID_TO_SERVICE_MAP.put(id,null);    if (service != null) {      SERVICE_TO_USER_MAP.remove(service);    }    exitStatus=true;  }  return exitStatus;}  }
class C{  public float[][] calc(int[] xpoints,int[] ypoints){  float[][] res=new float[2][0];  if (xpoints.length > 2) {    Cubic[] X=calcNaturalCubic(xpoints.length - 1,xpoints);    Cubic[] Y=calcNaturalCubic(ypoints.length - 1,ypoints);    Polygon p=new Polygon();    p.addPoint((int)Math.round(X[0].eval(0)),(int)Math.round(Y[0].eval(0)));    for (int i=0; i < X.length; i++) {      for (int j=1; j <= steps; j++) {        float u=j / (float)steps;        p.addPoint(Math.round(X[i].eval(u)),Math.round(Y[i].eval(u)));      }    }    res[0]=new float[p.npoints];    res[1]=new float[p.npoints];    for (int i=0; i < p.npoints; i++) {      res[0][i]=p.xpoints[i];      res[1][i]=p.ypoints[i];    }    p=null;  } else {    float[] xfs=new float[xpoints.length];    float[] yfs=new float[ypoints.length];    for (int i=0; i < xpoints.length; i++) {      xfs[i]=xpoints[i];      yfs[i]=ypoints[i];    }    res[0]=xfs;    res[1]=yfs;  }  return res;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.174 -0500",hash_original_method="FB75035D423229FA706BBCEA41A373A6",hash_generated_method="ECDA8D54C75B27EB12F90F5381C51966") public boolean isCompatibleWith(String version) throws NumberFormatException {  String[] requested=version.split("\\.");  String[] provided=specVersion.split("\\.");  for (int i=0; i < Math.min(requested.length,provided.length); i++) {    int reqNum=Integer.parseInt(requested[i]);    int provNum=Integer.parseInt(provided[i]);    if (reqNum > provNum) {      return false;    } else     if (reqNum < provNum) {      return true;    }  }  if (requested.length > provided.length) {    return false;  }  return true;}  }
class C{  public boolean doSendLicenseExpiration(LicenseInfoExt licenseInfo) throws Exception {  if (licenseInfo == null) {    return true;  }  String lastExpirationDate=licenseInfo.getLastLicenseExpirationDateEventDate();  if (lastExpirationDate == null || lastExpirationDate.isEmpty() || lastExpirationDate.equals(CallHomeConstants.VALUE_NOT_SET)) {    _log.info("There is no previous license-expiration event sent.");    return true;  }  _log.info("Previous license-expiration event was sent on: {}",lastExpirationDate);  SimpleDateFormat storedDate=new SimpleDateFormat(SERIALIZE_DATE_FORMAT);  Date zkDate=storedDate.parse(lastExpirationDate);  Date today=Calendar.getInstance().getTime();  int days=Days.daysBetween(new DateTime(zkDate),new DateTime(today)).getDays();  if (days > (CallHomeConstants.LICENSE_EXPIRATION_EVENT_THRESHOLD - 1)) {    _log.info("It's been {} days since last license-expiration event was sent. Sending another one now. ",days);    return true;  }  _log.info("License-expired event was sent {} days back. Will send another one in {} days.",days,(CallHomeConstants.LICENSE_EXPIRATION_EVENT_THRESHOLD - days));  return false;}  }
class C{  void clearCache(){  cache.clear();}  }
class C{  public Builder pause(){  return apply(new SetPlayWhenReady(tag,false));}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException ex) {    return null;  }}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getStatisticsDao() : null;}  }
class C{  private void checkRecoveryStatus() throws Exception {  while (true) {    InterProcessLock lock=null;    try {      lock=getRecoveryLock();      RecoveryStatus status=queryNodeRecoveryStatus();      if (isRecovering(status)) {        log.warn("This is a stale recovery request due to recovery leader change");        return;      } else       if (isTriggering(status)) {        log.info("The recovery status is triggering so run recovery directly");        return;      }      setWaitingRecoveryTriggeringFlag(true);    } catch (    Exception e) {      markRecoveryFailed(RecoveryStatus.ErrorCode.INTERNAL_ERROR);      throw e;    } finally {      releaseLock(lock);    }    log.info("Wait to be triggered");    waitOnRecoveryTriggering();  }}  }
class C{  public static String unEnclose(String s){  if (s.startsWith("(") && s.endsWith(")")) {    return s.substring(1,s.length() - 1);  }  return s;}  }
class C{  private boolean isAckRequired(){  return this.ackRequired;}  }
class C{  public NodeProbe(String host,int port,String username,String password) throws IOException {  assert username != null && !username.isEmpty() && password != null && !password.isEmpty() : "neither username nor password can be blank";  this.host=host;  this.port=port;  this.username=username;  this.password=password;  connect();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.666 -0500",hash_original_method="312B0BBDB8B9F957CA62333F3425B34A",hash_generated_method="146CA1B4249C7657C86A7CD7358090AF") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public boolean ready() throws IOException {  return getTaintBoolean();}  }
class C{  public void generateHeader(Writer out) throws java.io.IOException {  out.write("<HEAD>");  if (title != null) {    out.write("<TITLE>");    out.write(title);    out.write("</TITLE>");  }  if (base != null) {    out.write("<BASE href=\"" + "\">");  }  out.write("</HEAD>");}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  m_lastFetched=next=(DTM.NULL == m_lastFetched) ? m_context : DTM.NULL;  if (DTM.NULL != next) {    m_pos++;    return next;  } else {    m_foundLast=true;    return DTM.NULL;  }}  }
class C{  public PieChart(int width,int height,int innerOffset){  this.innerOffset=innerOffset;  this.WIDTH=width;  this.HEIGHT=height;  this.pieHeight=this.HEIGHT - this.innerOffset;  this.pieWidth=this.pieHeight;  this.halfWidth=this.WIDTH / 2;  this.graphDim=new Dimension(this.WIDTH,this.HEIGHT);  this.graphRect=new Rectangle(this.graphDim);  this.borderDim=new Dimension(this.halfWidth - 2,this.HEIGHT - 2);  this.borderRect=new Rectangle(borderDim);}  }
class C{  private void updateEnabledState(){  updateEnabledState(spinner,spinner.isEnabled());}  }
class C{  public boolean forEachKey(TObjectProcedure<K> procedure){  return forEach(procedure);}  }
class C{  public void clear(){  modCount++;  HashEntry[] data=this.data;  for (int i=data.length - 1; i >= 0; i--) {    data[i]=null;  }  size=0;}  }
class C{  private void createNewFieldsArray(){  for (int i=0; i < personFieldsOld.length; i++) {    personFieldsNew[i]=personFieldsOld[i] + "_link";  }}  }
class C{  public void restoreState(){  int[] tmp1=currentMatricesIndices;  currentMatricesIndices=storedMatricesIndices;  storedMatricesIndices=tmp1;  int[] tmp2=currentPartialsIndices;  currentPartialsIndices=storedPartialsIndices;  storedPartialsIndices=tmp2;}  }
class C{  public synchronized int addPoint(Waypoint p,int index){  if ((index == getNumberOfChildren()) || (index < 0)) {    attachChild(p);    index=getChildIndex(p);  } else {    attachChildAt(p,index);    index=getChildIndex(p);  }  updateGeometricState(0);  return (index);}  }
class C{  protected boolean[] canTakeOptions(){  boolean[] result=new boolean[2];  print("options...");  if (m_Estimator instanceof OptionHandler) {    println("yes");    if (m_Debug) {      println("\n=== Full report ===");      Enumeration<Option> enu=((OptionHandler)m_Estimator).listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        print(option.synopsis() + "\n" + option.description()+ "\n");      }      println("\n");    }    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public static String generateRandomString(){  final String characters="abcdefghijklmnopqrstuvwxyz123456789";  final int length=generateRandomNumber();  final char[] text=new char[length];  for (int i=0; i < length; i++) {    text[i]=characters.charAt(random.nextInt(characters.length()));  }  return new String(text);}  }
class C{  protected static void flagAsReadRequest(QueryOptions queryOptions){  FlagsEnabled.forQueryOptions(queryOptions).add(PersistenceFlags.READ_REQUEST);}  }
class C{  @Override public Token createToken(int tokenType,String text){  CommonToken imaginaryToken=new CommonToken(tokenType,text);  imaginaryToken.setLine(lastLine);  return imaginaryToken;}  }
class C{  public final AlertDialog shareText(CharSequence text,CharSequence type){  Intent intent=new Intent();  intent.addCategory(Intent.CATEGORY_DEFAULT);  intent.setAction(BS_PACKAGE + ".ENCODE");  intent.putExtra("ENCODE_TYPE",type);  intent.putExtra("ENCODE_DATA",text);  String targetAppPackage=findTargetAppPackage(intent);  if (targetAppPackage == null) {    return showDownloadDialog();  }  intent.setPackage(targetAppPackage);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  attachMoreExtras(intent);  if (fragment == null) {    activity.startActivity(intent);  } else {    fragment.startActivity(intent);  }  return null;}  }
class C{  public static void copyJpegMetaData(InputStream source,InputStream dest,ImageOutputStream out) throws IOException {  Iterator iter=ImageIO.getImageReadersByFormatName("jpeg");  ImageReader reader=(ImageReader)iter.next();  ImageInputStream iis=new MemoryCacheImageInputStream(source);  reader.setInput(iis);  IIOMetadata metadata=reader.getImageMetadata(0);  iis.close();  ImageInputStream outIis=new MemoryCacheImageInputStream(dest);  reader.setInput(outIis);  IIOImage image=reader.readAll(0,null);  image.setMetadata(metadata);  outIis.close();  iter=ImageIO.getImageWritersByFormatName("jpeg");  ImageWriter writer=(ImageWriter)iter.next();  writer.setOutput(out);  writer.write(image);}  }
class C{  public void callPredicateVisitors(XPathVisitor visitor){  m_expr.callVisitors(new filterExprOwner(),visitor);  super.callPredicateVisitors(visitor);}  }
class C{  public static ParsedTupleQuery parseTupleQuery(QueryLanguage ql,String query,String baseURI) throws MalformedQueryException, UnsupportedQueryLanguageException {  ParsedOperation q=parseQuery(ql,query,baseURI);  if (q instanceof ParsedTupleQuery) {    return (ParsedTupleQuery)q;  }  throw new IllegalArgumentException("query is not a tuple query: " + query);}  }
class C{  private void finish(){  NumberFormatter formatter=new NumberFormatter(8);  MCLogger[] loggers=mcLoggers[coldChain];  for (  MCLogger logger : loggers) {    logger.log(currentState);    logger.stopLogging();  }  System.out.println();  System.out.println("Time taken: " + timer.toString());  if (showOperatorAnalysis) {    System.out.println();    System.out.println("Operator analysis");    System.out.println(formatter.formatToFieldWidth("Operator",30) + formatter.formatToFieldWidth("",8) + formatter.formatToFieldWidth("Pr(accept)",11)+ " Performance suggestion");    for (int i=0; i < schedules[coldChain].getOperatorCount(); i++) {      MCMCOperator op=schedules[coldChain].getOperator(i);      double acceptanceProb=MCMCOperator.Utils.getAcceptanceProbability(op);      String message="good";      if (acceptanceProb < op.getMinimumGoodAcceptanceLevel()) {        if (acceptanceProb < (op.getMinimumAcceptanceLevel() / 10.0)) {          message="very low";        } else         if (acceptanceProb < op.getMinimumAcceptanceLevel()) {          message="low";        } else         message="slightly low";      } else       if (acceptanceProb > op.getMaximumGoodAcceptanceLevel()) {        double reallyHigh=1.0 - ((1.0 - op.getMaximumAcceptanceLevel()) / 10.0);        if (acceptanceProb > reallyHigh) {          message="very high";        } else         if (acceptanceProb > op.getMaximumAcceptanceLevel()) {          message="high";        } else         message="slightly high";      }      String suggestion=op.getPerformanceSuggestion();      String pString="        ";      if (op instanceof CoercableMCMCOperator) {        pString=formatter.formatToFieldWidth(formatter.formatDecimal(((CoercableMCMCOperator)op).getRawParameter(),3),8);      }      System.out.println(formatter.formatToFieldWidth(op.getOperatorName(),30) + pString + formatter.formatToFieldWidth(formatter.formatDecimal(acceptanceProb,4),11)+ " "+ message+ "\t"+ suggestion);    }    System.out.println();  }}  }
class C{  PorterDuffColorFilter updateTintFilter(PorterDuffColorFilter tintFilter,ColorStateList tint,PorterDuff.Mode tintMode){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(getState(),Color.TRANSPARENT);  tintFilter=new PorterDuffColorFilter(color,tintMode);  return tintFilter;}  }
class C{  public AdminException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public Version version(){  return VersionUtil.versionFor(getClass());}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public static void main(String args[]){  try {    System.out.println("Starting Convert4Gnuplot");    if (args.length < 2 && args.length > 4) {      System.out.println("Usage of Convert4Gnuplot:");      System.out.println("[input path 1] [input path 2 (optional)] [input path 3 (ptional)] [zone number]");    } else {      ArrayList<String[]> tasks=new ArrayList<String[]>();      for (int i=0; i < args.length - 1; i++) {        String task[]=new String[]{args[i],args[args.length - 1]};        tasks.add(task);      }      for (int i=0; i < tasks.size(); i++) {        init(tasks.get(i));        System.out.println("Starting queue process ...");        if (isSingleDataSet)         queueSingleDataSet(); else         queueMultipleDataSets();      }      System.out.println("Finished!");    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void unloadCube(CubePos pos){  cubeMap.remove(pos.getX(),pos.getY(),pos.getZ());  Column column=getLoadedColumn(pos.getX(),pos.getZ());  if (column != null) {    column.removeCube(pos.getY());  }}  }
class C{  private void checkTreeMLSchema(Schema s) throws DataIOException {  for (int i=0; i < s.getColumnCount(); ++i) {    Class type=s.getColumnType(i);    if (TYPES.get(type) == null) {      throw new DataIOException("Data type unsupported by the " + "TreeML format: " + type.getName());    }  }}  }
class C{  public static boolean isPowerOf2(long n){  return CountSetBits.countSetBits(n) == 1;}  }
class C{  @Override public void close() throws IOException {  while (in != null) {    nextStream();  }  e=null;}  }
class C{  public void addPayload(String bearerToken,Map<String,String> addPayload){  Map<String,String> payload=tokenMap.get(bearerToken);  if (payload != null) {    payload.putAll(addPayload);  } else {    throw new IllegalStateException("Token " + bearerToken + " is not found ");  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== RGBAPictureEssenceDescriptor ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  if (this.subdescriptors != null) {    sb.append(this.subdescriptors.toString());  }  sb.append("================== SampleRate ======================\n");  sb.append(super.sample_rate.toString());  sb.append(String.format("essence_container = %s%n",this.essence_container.toString()));  sb.append(String.format("frame_layout = %d%n",this.frame_layout));  sb.append(String.format("stored_width = %d%n",this.stored_width));  sb.append(String.format("stored_height = %d%n",this.stored_height));  sb.append("================== AspectRatio ======================\n");  sb.append(this.aspect_ratio.toString());  if (this.video_line_map != null) {    sb.append(this.video_line_map.toString());  }  sb.append(String.format("picture_essence_coding = %s%n",this.picture_essence_coding.toString()));  return sb.toString();}  }
class C{  public ArrayList<ValueNamePair> loadPaymentRule(int C_PaySelection_ID){  ArrayList<ValueNamePair> data=new ArrayList<ValueNamePair>();  int AD_Reference_ID=195;  Language language=Language.getLanguage(Env.getAD_Language(Env.getCtx()));  MLookupInfo info=MLookupFactory.getLookup_List(language,AD_Reference_ID);  String sql=info.Query.substring(0,info.Query.indexOf(" ORDER BY")) + " AND " + info.KeyColumn+ " IN (SELECT PaymentRule FROM HR_PaySelectionCheck WHERE HR_PaySelection_ID=?) "+ info.Query.substring(info.Query.indexOf(" ORDER BY"));  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_PaySelection_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      ValueNamePair pp=new ValueNamePair(rs.getString(2),rs.getString(3));      data.add(pp);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (data.size() == 0)   log.config("PaySel=" + C_PaySelection_ID + ", BAcct="+ m_C_BankAccount_ID+ " - "+ sql);  return data;}  }
class C{  public void sendToAllAround(final ModPacket packet,final NetworkRegistry.TargetPoint point){  ec.sendToAllAround(getProxyPacket(packet),point);}  }
class C{  public final boolean isAnyEnclosingThisDeref(ExpressionTree tree){  if (!TreeUtils.isUseOfElement(tree)) {    return false;  }  ExpressionTree recv=TreeUtils.getReceiverTree(tree);  if (recv == null) {    Element element=TreeUtils.elementFromUse(tree);    if (!ElementUtils.hasReceiver(element)) {      return false;    }    tree=TreeUtils.skipParens(tree);    if (tree.getKind() == Tree.Kind.IDENTIFIER) {      Name n=((IdentifierTree)tree).getName();      if ("this".contentEquals(n) || "super".contentEquals(n)) {        return false;      }    }    return true;  } else   if (!TreeUtils.isUseOfElement(recv)) {    return false;  }  Element element=TreeUtils.elementFromUse(recv);  if (!ElementUtils.hasReceiver(element)) {    return false;  }  return TreeUtils.isExplicitThisDereference(recv);}  }
class C{  public List<MarkerGroup> markers(){  return markers;}  }
class C{  public FrequencyTrackingRingBuffer(int maxSize,int sentinel){  if (maxSize < 2) {    throw new IllegalArgumentException("maxSize must be at least 2");  }  this.maxSize=maxSize;  buffer=new int[maxSize];  position=0;  frequencies=new IntBag(maxSize);  Arrays.fill(buffer,sentinel);  for (int i=0; i < maxSize; ++i) {    frequencies.add(sentinel);  }  assert frequencies.frequency(sentinel) == maxSize;}  }
class C{  private boolean hasScrollBars(){  return comboBox.getModel().getSize() > getMaximumRowCount();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.411 -0400",hash_original_method="2D3ED0AC0F4C47315DD1BD37872C7540",hash_generated_method="BADAA8FB9076D2DB6C31FE605FEA6DCD") public String foundType(){  return foundType;}  }
class C{  @Override public File retrieveFile(){  return new File(m_File);}  }
class C{  public UserNamespaceAuthorizationEntity createUserNamespaceAuthorizationEntity(String userId,NamespaceEntity namespaceEntity,List<NamespacePermissionEnum> namespacePermissions){  UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity=new UserNamespaceAuthorizationEntity();  userNamespaceAuthorizationEntity.setUserId(userId);  userNamespaceAuthorizationEntity.setNamespace(namespaceEntity);  userNamespaceAuthorizationEntity.setReadPermission(namespacePermissions.contains(NamespacePermissionEnum.READ));  userNamespaceAuthorizationEntity.setWritePermission(namespacePermissions.contains(NamespacePermissionEnum.WRITE));  userNamespaceAuthorizationEntity.setExecutePermission(namespacePermissions.contains(NamespacePermissionEnum.EXECUTE));  userNamespaceAuthorizationEntity.setGrantPermission(namespacePermissions.contains(NamespacePermissionEnum.GRANT));  return userNamespaceAuthorizationDao.saveAndRefresh(userNamespaceAuthorizationEntity);}  }
class C{  public Matrix4f reflection(float nx,float ny,float nz,float px,float py,float pz){  float invLength=1.0f / (float)Math.sqrt(nx * nx + ny * ny + nz * nz);  float nnx=nx * invLength;  float nny=ny * invLength;  float nnz=nz * invLength;  return reflection(nnx,nny,nnz,-nnx * px - nny * py - nnz * pz);}  }
class C{  public void componentResized(ComponentEvent e){  Rectangle parentNewBounds=((Component)e.getSource()).getBounds();  JInternalFrame.JDesktopIcon icon=null;  if (frame != null) {    icon=frame.getDesktopIcon();    if (frame.isMaximum()) {      frame.setBounds(0,0,parentNewBounds.width,parentNewBounds.height);    }  }  if (icon != null) {    Rectangle iconBounds=icon.getBounds();    int y=iconBounds.y + (parentNewBounds.height - parentBounds.height);    icon.setBounds(iconBounds.x,y,iconBounds.width,iconBounds.height);  }  if (!parentBounds.equals(parentNewBounds)) {    parentBounds=parentNewBounds;  }  if (frame != null)   frame.validate();}  }
class C{  public SseEvent(){}  }
class C{  @Override @Deprecated public List<Runnable> shutdownNow(){  throw new UnsupportedOperationException();}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public FractionAtom(Atom num,Atom den,boolean rule){  this(num,den,!rule,TeXConstants.UNIT_PIXEL,0f);}  }
class C{  public static double pdf(double x,double k,double theta,double shift){  x=(x - shift);  if (x <= 0.) {    return 0.;  }  return Math.pow(theta,k) / GammaDistribution.gamma(k) * Math.pow(1 + x,-(theta + 1.)) * Math.pow(Math.log1p(x),k - 1.);}  }
class C{  private WebUser(Properties ctx,int AD_User_ID,String trxName){  m_ctx=ctx;  m_AD_Client_ID=Env.getAD_Client_ID(ctx);  load(AD_User_ID);}  }
class C{  private boolean canPluralize(String typeName){  return !typeName.endsWith(PLURAL_S);}  }
class C{  public KMeansPartition run(IDoubleMatrix input){  mProblemInput=input;  if (mNumClusters == -1) {    mNumClusters=(int)Math.round(Math.sqrt(input.getRowNum()));  }  mRunSummary=new ArrayList<RunSummary>();  KMeansPartition minPartition=null;  double minScore=Double.MAX_VALUE;  for (int i=0; i < mNumRuns; i++) {    final long localSeed=mGlobalRandom.nextLong();    mRandom=new Random(localSeed);    mPartition=new KMeansPartition();    final long startTime=System.currentTimeMillis();    int j=0;    while (!mPartition.iterateOnce() && j < mMaxIterations) {      j++;    }    final long stopTime=System.currentTimeMillis();    final long duration=stopTime - startTime;    mRunSummary.add(new RunSummary(costFunction(),j,duration,localSeed));    if (minScore > costFunction()) {      minPartition=mPartition;      minScore=costFunction();    }  }  return minPartition;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:09.421 -0500",hash_original_method="6F34DF1209370488AD4C31DC9A9003CA",hash_generated_method="29A8E7DAF93426AA1001E56F42877247") @Override public void startHandshake() throws IOException {  startHandshake(true);}  }
class C{  @SuppressWarnings("unchecked") public CopyService(final CnATreeElement group,final List<CnATreeElement> elementList){  progressObserver=new DummyProgressObserver();  this.selectedGroup=group;  this.elements=elementList;}  }
class C{  public void updateFieldVisibility(NeuronUpdateRule rule){  boolean bounded=rule instanceof BoundedUpdateRule;  boolean clip=false;  setBoundsPanelVisible(bounded);  if (bounded) {    clip=rule instanceof ClippableUpdateRule;    clippingDropDown.setSelected(clip);  }  setClippingPanelVisible(clip);  setBoundsEnabled(bounded);}  }
class C{  private void paintIncreaseButtonApart(Graphics2D g,int width,int height){  paintArrowButton(g,width / 2.0 - 5,height / 2.0 - 2);}  }
class C{  public static double[] minmax(List<Double> values){  if (values.size() == 0) {    return new double[2];  }  double min=values.get(0);  double max=min;  int length=values.size();  for (int i=1; i < length; i++) {    double value=values.get(i);    min=Math.min(min,value);    max=Math.max(max,value);  }  return new double[]{min,max};}  }
class C{  public List catchClauses(){  return this.catchClauses;}  }
class C{  public boolean onKeyDown(int keyCode,KeyEvent event){  if (isShowing()) {    if (keyCode != KeyEvent.KEYCODE_SPACE && (mDropDownList.getSelectedItemPosition() >= 0 || (keyCode != KeyEvent.KEYCODE_ENTER && keyCode != KeyEvent.KEYCODE_DPAD_CENTER))) {      int curIndex=mDropDownList.getSelectedItemPosition();      boolean consumed;      final boolean below=!mPopup.isAboveAnchor();      final ListAdapter adapter=mAdapter;      boolean allEnabled;      int firstItem=Integer.MAX_VALUE;      int lastItem=Integer.MIN_VALUE;      if (adapter != null) {        allEnabled=adapter.areAllItemsEnabled();        firstItem=allEnabled ? 0 : mDropDownList.lookForSelectablePosition(0,true);        lastItem=allEnabled ? adapter.getCount() - 1 : mDropDownList.lookForSelectablePosition(adapter.getCount() - 1,false);      }      if ((below && keyCode == KeyEvent.KEYCODE_DPAD_UP && curIndex <= firstItem) || (!below && keyCode == KeyEvent.KEYCODE_DPAD_DOWN && curIndex >= lastItem)) {        clearListSelection();        mPopup.setInputMethodMode(PopupWindow.INPUT_METHOD_NEEDED);        show();        return true;      } else {        mDropDownList.mListSelectionHidden=false;      }      consumed=mDropDownList.onKeyDown(keyCode,event);      if (DEBUG)       Log.v(TAG,"Key down: code=" + keyCode + " list consumed="+ consumed);      if (consumed) {        mPopup.setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);        mDropDownList.requestFocusFromTouch();        show();switch (keyCode) {case KeyEvent.KEYCODE_ENTER:case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_DPAD_DOWN:case KeyEvent.KEYCODE_DPAD_UP:          return true;      }    } else {      if (below && keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {        if (curIndex == lastItem) {          return true;        }      } else       if (!below && keyCode == KeyEvent.KEYCODE_DPAD_UP && curIndex == firstItem) {        return true;      }    }  }}return false;}  }
class C{  public static String toString(final StackTraceElement[] stackTrace){  Preconditions.checkNotNull(stackTrace,"Invalid stack trace");  final StringBuilder sb=new StringBuilder();  for (  final StackTraceElement stackTraceElement : stackTrace) {    sb.append(stackTraceElement.toString());    sb.append(System.getProperty("line.separator"));  }  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.028 -0500",hash_original_method="2EEA7A5C566152BE0CF88964605D6DC9",hash_generated_method="20F289D021E621F6C80CD38801027034") public void writeByteArray(int bits,byte[] arr) throws AccessException {  for (int i=0; i < arr.length; i++) {    int increment=Math.min(8,bits - (i << 3));    if (increment > 0) {      write(increment,(byte)(arr[i] >>> (8 - increment)));    }  }}  }
class C{  void loadBuf(int count) throws IOException {  if (debug) {    System.out.print("loadbuf called with ");    System.out.print("count " + count + ", ");    System.out.println("bufAvail " + bufAvail + ", ");  }  if (count != 0) {    if (bufAvail >= count) {      return;    }  } else {    if (bufAvail == BUFFER_SIZE) {      return;    }  }  if ((bufAvail > 0) && (bufAvail < BUFFER_SIZE)) {    System.arraycopy(buf,bufPtr,buf,0,bufAvail);  }  int ret=iis.read(buf,bufAvail,buf.length - bufAvail);  if (debug) {    System.out.println("iis.read returned " + ret);  }  if (ret != -1) {    bufAvail+=ret;  }  bufPtr=0;  int minimum=Math.min(BUFFER_SIZE,count);  if (bufAvail < minimum) {    throw new IIOException("Image Format Error");  }}  }
class C{  public GeneralNames(GeneralName name){  this.names=new GeneralName[]{name};}  }
class C{  static TransportAddress[] parse(String hostPortString,String defaultPortRange,int perAddressLimit) throws UnknownHostException {  Objects.requireNonNull(hostPortString);  String host;  String portString=null;  if (hostPortString.startsWith("[")) {    Matcher matcher=BRACKET_PATTERN.matcher(hostPortString);    if (!matcher.matches()) {      throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString);    }    host=matcher.group(1);    portString=matcher.group(2);  } else {    int colonPos=hostPortString.indexOf(':');    if (colonPos >= 0 && hostPortString.indexOf(':',colonPos + 1) == -1) {      host=hostPortString.substring(0,colonPos);      portString=hostPortString.substring(colonPos + 1);    } else {      host=hostPortString;      if (colonPos >= 0) {        throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString);      }    }  }  if (portString == null || portString.isEmpty()) {    portString=defaultPortRange;  }  Set<InetAddress> addresses=new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)));  List<TransportAddress> transportAddresses=new ArrayList<>();  int[] ports=new PortsRange(portString).ports();  int limit=Math.min(ports.length,perAddressLimit);  for (int i=0; i < limit; i++) {    for (    InetAddress address : addresses) {      transportAddresses.add(new InetSocketTransportAddress(address,ports[i]));    }  }  return transportAddresses.toArray(new TransportAddress[transportAddresses.size()]);}  }
class C{  public final void testDEFAULTtrailerField(){  assertEquals(1,PSSParameterSpec.DEFAULT.getTrailerField());}  }
class C{  protected void startDocument() throws XMLStreamException {  this.writer.writeStartDocument();  this.writer.writeStartElement("kml");  this.writer.writeDefaultNamespace(KMLConstants.KML_NAMESPACE);  this.writer.setPrefix("gx",GXConstants.GX_NAMESPACE);  this.writer.writeNamespace("gx",GXConstants.GX_NAMESPACE);  this.writer.writeStartElement("Document");}  }
class C{  public void paintSpinnerBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public WARCFileWriter(Configuration conf,CompressionCodec codec,Path workOutputPath) throws IOException {  this(conf,codec,workOutputPath,null);}  }
class C{  public DefaultElementFilter(Collection<String> packageWhitelist){  this.packageWhitelist=packageWhitelist;}  }
class C{  public static float[] convertDoublesToFloats(double[] input,float[] output){  if (input == null || output == null)   return output;  for (int i=0; i < input.length; ++i) {    output[i]=(float)input[i];  }  return output;}  }
class C{  public long skip(long n) throws IOException {  if (n <= 0) {    return 0;  }  byte[] buffer=new byte[BUFFER_SIZE];  long remaining=Math.min(n,this.contentLength - this.pos);  long count=0;  while (remaining > 0) {    int l=read(buffer,0,(int)Math.min(BUFFER_SIZE,remaining));    if (l == -1) {      break;    }    count+=l;    remaining-=l;  }  this.pos+=count;  return count;}  }
class C{  public static String createAuthorization(final String username,final String password){  return new String(Base64.encodeBase64((username + ":" + password).getBytes()));}  }
class C{  public Blade addResources(final String... resources){  applicationConfig.addResources(resources);  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.YIELD_EXPRESSION__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void generateCode(BlockScope currentScope){  if ((this.bits & IsReachable) == 0) {    return;  }  if (this.block != null) {    this.block.generateCode(currentScope);  }}  }
class C{  protected boolean isValidUser(String user){  return USER_PATTERN.matcher(user).matches();}  }
class C{  @Override public void close() throws IOException {  if (!closed) {    try {      ChunkedInputStream.exhaustInputStream(this);    }  finally {      closed=true;    }  }}  }
class C{  protected void onListenerException(RuntimeException rte){  rte.printStackTrace();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object p=stack.pop();  if (p instanceof sage.vfs.MediaNode)   p=((sage.vfs.MediaNode)p).getDataObject();  return Boolean.valueOf(p instanceof SystemMessage);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ValidationResultScrOrg[");  buffer.append("scrOrgName = ").append(scrOrgName);  buffer.append(", scrOrgFatherName = ").append(scrOrgFatherName);  buffer.append(", scrOrgParentAcron = ").append(scrOrgParentAcron);  buffer.append(", scrOrgCode = ").append(scrOrgCode);  buffer.append(", scrOrgId = ").append(scrOrgId);  buffer.append("]");  return buffer.toString();}  }
class C{  private void parseTankCrit(Element tankCrit,Entity entity){  String sensors=tankCrit.getAttribute(SENSORS);  String engine=tankCrit.getAttribute(ENGINE);  String driver=tankCrit.getAttribute(DRIVER);  String commander=tankCrit.getAttribute(COMMANDER);  Tank t=(Tank)entity;  if (sensors.length() > 0) {    t.setSensorHits(Integer.parseInt(sensors));  }  if (engine.equalsIgnoreCase("hit")) {    t.engineHit();    t.applyDamage();  }  if (driver.equalsIgnoreCase("hit")) {    t.setDriverHit(true);  }  if (commander.equalsIgnoreCase("hit")) {    t.setCommanderHit(true);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static <K,V extends Comparable<V>>List<K> sortMapAndLimitToList(Map<K,V> map,int k,boolean keepHighest){  List<Entry<K,V>> sorted=sortByValue(map);  if (keepHighest)   Collections.reverse(sorted);  List<K> res=new ArrayList<K>();  int count=0;  for (  Map.Entry<K,V> e : sorted) {    if (count >= k)     break; else     res.add(e.getKey());    count++;  }  return res;}  }
class C{  private void offsetChildrenLeftAndRight(int offset){  for (int i=getChildCount() - 1; i >= 0; i--) {    getChildAt(i).offsetLeftAndRight(offset);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {      getChildAt(i).invalidate();    }  }}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW) @RolesAllowed("ORGANIZATION_ADMIN") public void updateActionParameters(long actionKey,List<VOTriggerProcessParameter> parameters) throws ObjectNotFoundException, OperationNotPermittedException, TriggerProcessStatusException, ValidationException {  if (parameters == null) {    throw new org.oscm.internal.types.exception.IllegalArgumentException("Parameter parameters must not be null.");  }  TriggerProcess triggerProcess=getTriggerProcess(actionKey);  verifyTriggerProcessStatus(triggerProcess,TriggerProcessStatus.WAITING_FOR_APPROVAL);  verifyTriggerDefinitionType(triggerProcess.getTriggerDefinition(),TriggerType.SUBSCRIBE_TO_SERVICE);  removeAdditionalParameters(parameters);  removeNonConfigurableParameters(parameters);  validateConfiguredParameters(parameters,triggerProcess);  updateTriggerProcessParameters(triggerProcess,parameters);  dm.merge(triggerProcess);}  }
class C{  public Entry(String tag,long millis,File data,int flags) throws IOException {  if (tag == null)   throw new NullPointerException("tag == null");  if ((flags & IS_EMPTY) != 0)   throw new IllegalArgumentException("Bad flags: " + flags);  mTag=tag;  mTimeMillis=millis;  mData=null;  mFileDescriptor=ParcelFileDescriptor.open(data,ParcelFileDescriptor.MODE_READ_ONLY);  mFlags=flags;}  }
class C{  public Object lookup(Object o) throws NoSuchVariableException, PlayerFaultException {  Object result=null;  try {    if ((result=resolveToInternalProperty(o)) != null)     ; else     if ((result=resolveToVariable(o)) != null)     ; else     if ((result=resolveToValue(o)) != null)     ; else     throw new NoSuchVariableException(o);    if ((result != null) && result instanceof VariableFacade) {      ((VariableFacade)result).setPath(getName());    }    Value resultValue=null;    if (result instanceof Variable) {      if (result instanceof VariableFacade && ((VariableFacade)result).getVariable() == null)       resultValue=null; else       resultValue=((Variable)result).getValue();    } else     if (result instanceof Value) {      resultValue=(Value)result;    }    if (resultValue != null) {      if (resultValue.isAttributeSet(ValueAttribute.IS_EXCEPTION)) {        String value=resultValue.getValueAsString();        throw new PlayerFaultException(new ExceptionFault(value,false,resultValue,resultValue.getIsolateId()));      }    }  } catch (  PlayerDebugException pde) {    result=Value.UNDEFINED;  }  return result;}  }
class C{  private static int textCompaction(int[] codewords,int codeIndex,StringBuilder result){  int[] textCompactionData=new int[codewords[0] << 1];  int[] byteCompactionData=new int[codewords[0] << 1];  int index=0;  boolean end=false;  while ((codeIndex < codewords[0]) && !end) {    int code=codewords[codeIndex++];    if (code < TEXT_COMPACTION_MODE_LATCH) {      textCompactionData[index]=code / 30;      textCompactionData[index + 1]=code % 30;      index+=2;    } else {switch (code) {case TEXT_COMPACTION_MODE_LATCH:        textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;      break;case BYTE_COMPACTION_MODE_LATCH:    codeIndex--;  end=true;break;case NUMERIC_COMPACTION_MODE_LATCH:codeIndex--;end=true;break;case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;code=codewords[codeIndex++];byteCompactionData[index]=code;index++;break;case BYTE_COMPACTION_MODE_LATCH_6:codeIndex--;end=true;break;}}}decodeTextCompaction(textCompactionData,byteCompactionData,index,result);return codeIndex;}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public Key_ createKey_(){  Key_Impl key_=new Key_Impl();  return key_;}  }
class C{  protected Barcode(){}  }
class C{  void shiftBlocksLeft(){  blocks+=1;  len+=32;  if (blocks <= value.length) {    int i;    for (i=blocks - 1; i >= 1; i--) {      value[i]=value[i - 1];    }    value[0]=0x00;  } else {    int[] result=new int[blocks];    System.arraycopy(value,0,result,1,blocks - 1);    value=null;    value=result;  }}  }
class C{  void checkInitialState(SubmissionPublisher<?> p){  assertFalse(p.hasSubscribers());  assertEquals(0,p.getNumberOfSubscribers());  assertTrue(p.getSubscribers().isEmpty());  assertFalse(p.isClosed());  assertNull(p.getClosedException());  int n=p.getMaxBufferCapacity();  assertTrue((n & (n - 1)) == 0);  assertNotNull(p.getExecutor());  assertEquals(0,p.estimateMinimumDemand());  assertEquals(0,p.estimateMaximumLag());}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassTextFieldUI();}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private int checkEventList(int position,int event){  if (position == -1) {    return -1;  }synchronized (EVENT_LOCK) {    for (int i=position; i < events.size(); i++) {      if (events.get(i) == event) {        return i;      }    }    return -1;  }}  }
class C{  public boolean equals(XMLString obj2){  if (this == obj2) {    return true;  }  int n=m_length;  if (n == obj2.length()) {    FastStringBuffer fsb=fsb();    int i=m_start;    int j=0;    while (n-- != 0) {      if (fsb.charAt(i) != obj2.charAt(j)) {        return false;      }      i++;      j++;    }    return true;  }  return false;}  }
class C{  public boolean execPreCalls() throws InterceptorException {  try {    for (    Interceptor interceptor : interceptors) {      if (!interceptor.preCall(request,response,serviceMethodInfo)) {        return false;      }    }  } catch (  Exception e) {    throw new InterceptorException("Exception while executing preCalls",e);  }  return true;}  }
class C{  private int backtrack(int position){  while (position-- > 0) {    int nextChar=seekBytesRef.byteAt(position) & 0xff;    if (nextChar++ != 0xff) {      seekBytesRef.setByteAt(position,(byte)nextChar);      seekBytesRef.setLength(position + 1);      return position;    }  }  return -1;}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  protected void parseStyleDeclaration(boolean inSheet) throws CSSException {  for (; ; ) {switch (current) {case LexicalUnits.EOF:      if (inSheet) {        throw createCSSParseException("eof");      }    return;case LexicalUnits.RIGHT_CURLY_BRACE:  if (!inSheet) {    throw createCSSParseException("eof.expected");  }nextIgnoreSpaces();return;case LexicalUnits.SEMI_COLON:nextIgnoreSpaces();continue;default :throw createCSSParseException("identifier");case LexicalUnits.IDENTIFIER:}String name=scanner.getStringValue();if (nextIgnoreSpaces() != LexicalUnits.COLON) {throw createCSSParseException("colon");}nextIgnoreSpaces();LexicalUnit exp=null;try {exp=parseExpression(false);} catch (CSSParseException e) {reportError(e);}if (exp != null) {boolean important=false;if (current == LexicalUnits.IMPORTANT_SYMBOL) {important=true;nextIgnoreSpaces();}documentHandler.property(name,exp,important);}}}  }
class C{  void afterFail(String input,String cmd,String should){  System.err.println("\nTest fails for the command ---\n" + "keytool " + cmd + "\nOr its debug version ---\n"+ "keytool -debug "+ cmd);  System.err.println("The command result should be " + should + ", but it's not. Try run the command manually and type"+ " these input into it: ");  char[] inputChars=input.toCharArray();  for (int i=0; i < inputChars.length; i++) {    char ch=inputChars[i];    if (ch == '\n')     System.err.print("ENTER "); else     if (ch == ' ')     System.err.print("SPACE "); else     System.err.print(ch + " ");  }  System.err.println("");  System.err.println("ERR is:\n" + err);  System.err.println("OUT is:\n" + out);}  }
class C{  public OIDCTokens acquireTokensByPersonUserCertificate(X509Certificate personUserCertificate,PersonUserAssertionSigner signer,TokenSpec tokenSpec) throws OIDCClientException, OIDCServerException, TokenValidationException, SSLConnectionException {  Validate.notNull(personUserCertificate,"personUserCertificate");  Validate.notNull(signer,"signer");  Validate.notNull(tokenSpec,"tokenSpec");  Date issueTime=new Date();  URI tokenEndpointURI=getTokenEndpointURI();  PersonUserAssertion personUserAssertion;  try {    personUserAssertion=new PersonUserAssertion(signer,new JWTID(),personUserCertificate.getSubjectDN().getName(),tokenEndpointURI,issueTime);  } catch (  JOSEException e) {    throw new OIDCClientException("failed to construct PersonUserAssertion",e);  }  return acquireTokens(new PersonUserCertificateGrant(personUserCertificate,personUserAssertion),tokenSpec);}  }
class C{  public boolean remove(Object o){  if (!(o instanceof GraphicsNode)) {    throw new IllegalArgumentException(o + " is not a GraphicsNode");  }  GraphicsNode node=(GraphicsNode)o;  if (node.getParent() != this) {    return false;  }  int index=0;  for (; node != children[index]; index++)   ;  remove(index);  return true;}  }
class C{  ResourceThread(String imageUrl,Component imgLabel,HTMLComponent htmlC,ResourceThreadQueue threadQueue){  this.imageUrl=imageUrl;  this.imgLabel=imgLabel;  this.handler=htmlC.getRequestHandler();  this.threadQueue=threadQueue;  this.htmlC=htmlC;}  }
class C{  public void defineNavigation(GalleryFilterParameter rootFilter,IGeoPointInfo currentSelection,GeoRectangle rectangle,int zoomlevel,SelectedItems selectedItems,Uri additionalPointsContentUri){  super.defineNavigation(rootFilter,rectangle,zoomlevel,selectedItems,additionalPointsContentUri);  if (currentSelection != null) {    updateMarker(null,NO_MARKER_ID,new GeoPoint(currentSelection.getLatitude(),currentSelection.getLongitude()),null);  }}  }
class C{  @Override public void addGraphEdge(GraphNode from,GraphNode to){  ((SpaceEffGraphNode)from).insertOut((SpaceEffGraphNode)to);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:17.045 -0500",hash_original_method="C94E0153AA9A00481672837ABFA310B4",hash_generated_method="FAE8FCC29597D474481255BC020DEE6C") private void parseRecord(byte[] record){  try {    alphaTag=IccUtils.adnStringFieldToString(record,0,record.length - FOOTER_SIZE_BYTES);    int footerOffset=record.length - FOOTER_SIZE_BYTES;    int numberLength=0xff & record[footerOffset];    if (numberLength > MAX_NUMBER_SIZE_BYTES) {      number="";      return;    }    number=PhoneNumberUtils.calledPartyBCDToString(record,footerOffset + 1,numberLength);    extRecord=0xff & record[record.length - 1];    emails=null;  } catch (  RuntimeException ex) {    Log.w(LOG_TAG,"Error parsing AdnRecord",ex);    number="";    alphaTag="";    emails=null;  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  _serviceIntent=new Intent(TalkActivity.this,TalkService.class);  startService(_serviceIntent);}  }
class C{  public synchronized void dump(){  Iterator<Map.Entry<Thread,ThreadStatus>> i=mThreadStatus.entrySet().iterator();  while (i.hasNext()) {    Map.Entry<Thread,ThreadStatus> entry=i.next();    Log.v(TAG,"[Dump] Thread " + entry.getKey() + " ("+ entry.getKey().getId()+ ")'s status is "+ entry.getValue());  }}  }
class C{  public static boolean areMappingsDifferent(final List<Workspace.Mapping> mappings1,final List<Workspace.Mapping> mappings2){  if (mappings1 == mappings2) {    return false;  }  if (mappings1 == null || mappings2 == null || mappings1.size() != mappings2.size()) {    return true;  }  final Map<String,Workspace.Mapping> map=getMappingsByServerPath(mappings1);  for (  final Workspace.Mapping mapping2 : mappings2) {    final Workspace.Mapping mapping1=map.get(getServerPathKey(mapping2.getServerPath()));    if (mapping1 == null) {      return true;    }    if (mapping1.isCloaked() != mapping2.isCloaked() || !StringUtils.equals(mapping1.getLocalPath(),mapping2.getLocalPath()) || !StringUtils.equals(mapping1.getServerPath(),mapping2.getServerPath())) {      return true;    }  }  return false;}  }
class C{  public void deleteRCSEntries(){  mLocalContentResolver.delete(AggregationData.CONTENT_URI,null,null);synchronized (mContactInfoCache) {    if (sLogger.isActivated()) {      sLogger.debug("deleteRCSEntries");    }    mContactInfoCache.clear();    mLocalContentResolver.delete(CONTENT_URI,null,null);  }}  }
class C{  public static String format(long time_secs){  if (time_secs == Constants.CRAPPY_INFINITY_AS_INT || time_secs >= Constants.CRAPPY_INFINITE_AS_LONG)   return Constants.INFINITY_STRING;  if (time_secs < 0)   return "";  int[] vals={(int)time_secs % 60,(int)(time_secs / 60) % 60,(int)(time_secs / 3600) % 24,(int)(time_secs / 86400) % 365,(int)(time_secs / 31536000)};  int end=vals.length - 1;  while (vals[end] == 0 && end > 0) {    end--;  }  String result=vals[end] + TIME_SUFFIXES[end];  end--;  if (end >= 0)   result+=" " + twoDigits(vals[end]) + TIME_SUFFIXES[end];  return result;}  }
class C{  private boolean hasTopRight(SentencePair sentencePair,int ei,int fj){  int i_p, j_p;  int tgtLen=sentencePair.targetLength();  for (i_p=ei; i_p < tgtLen; ++i_p) {    if (!sentencePair.isTargetUnaligned(i_p))     break;  }  for (j_p=fj; j_p >= 0; --j_p) {    if (!sentencePair.isSourceUnaligned(j_p))     break;  }  if (i_p == tgtLen && j_p < 0)   return false;  int[] a_i_p=e2f(sentencePair,i_p);  int[] a_j_p=f2e(sentencePair,j_p);  if (min(a_j_p) < ei || max(a_i_p) > fj)   return false;  int min_j=Math.min(j_p,min(a_i_p));  int max_i=Math.max(i_p,max(a_j_p));  while (max_i >= i_p || min_j <= j_p) {    for (; j_p >= min_j; --j_p) {      if (sentencePair.isSourceUnaligned(j_p))       continue;      a_j_p=f2e(sentencePair,j_p);      if (min(a_j_p) < ei)       return false;      max_i=Math.max(max_i,max(a_j_p));    }    for (; i_p <= max_i; ++i_p) {      if (sentencePair.isTargetUnaligned(i_p))       continue;      a_i_p=e2f(sentencePair,i_p);      if (max(a_i_p) > fj)       return false;      min_j=Math.min(min_j,min(a_i_p));    }  }  return true;}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  FieldCamera.saveDefaultsToProperties(properties);  Path.saveDefaultsToProperties(properties);  Plane.saveDefaultsToProperties(properties);  CartesianGrid.saveDefaultsToProperties(properties);  RadialGrid.saveDefaultsToProperties(properties);  Profile.saveDefaultsToProperties(properties);}  }
class C{  public static LocalDate toDate(String data){  return LocalDate.parse(data,formatter("yyyy-MM-dd"));}  }
class C{  public boolean isSingleValued(){  return index == -1 || SINGLE_VALUED[index];}  }
class C{  @Override public void onDeleteComplete(int taskId,Object cookie,int deleteCount){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.061 -0500",hash_original_method="D81BC51C8CC9A87BC96AD49CBC27557B",hash_generated_method="DD5D39A92348980EE65B4CE380CBAF60") public Chunk handleChunk(Chunk request){  if (false)   Log.v("ddm-heap","Handling " + name(request.type) + " chunk");  int type=request.type;  if (type == CHUNK_HELO) {    return handleHELO(request);  } else   if (type == CHUNK_FEAT) {    return handleFEAT(request);  } else {    throw new RuntimeException("Unknown packet " + ChunkHandler.name(type));  }}  }
class C{  public void createSubUsageScenario06() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO06_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO06_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(15);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO06_PERUNIT_MONTH",subDetails);}  }
class C{  public RTUpdateableTest(String name){  super(name);}  }
class C{  public void modifyQuery(String query){  this.queryString=query;  this.regionNames=null;}  }
class C{  @Override public void updateInt(String columnLabel,int x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateInt(" + quote(columnLabel) + ", "+ x+ ");");    }    update(columnLabel,ValueInt.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  public double score(){  return score;}  }
class C{  public static String cappedInt(final long val){  if (val >= Integer.MAX_VALUE) {    return OVER;  } else   if (val <= Integer.MIN_VALUE) {    return UNDER;  }  return Long.toString(val);}  }
class C{  public static <A>double[] toPrimitiveDoubleArray(A array,NumberArrayAdapter<?,? super A> adapter){  if (adapter == DOUBLEARRAYADAPTER) {    return ((double[])array).clone();  }  double[] ret=new double[adapter.size(array)];  for (int i=0; i < ret.length; i++) {    ret[i]=adapter.getDouble(array,i);  }  return ret;}  }
class C{  public void testNegativeRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_ar:[\u062F TO \u0698]","sort","id asc"),"//*[@numFound='0']");}  }
class C{  private GridData gridDataForText(int width){  GridData gridData=new GridData();  gridData.horizontalAlignment=SWT.END;  gridData.horizontalAlignment=SWT.FILL;  gridData.widthHint=width;  gridData.verticalIndent=10;  gridData.grabExcessHorizontalSpace=true;  return gridData;}  }
class C{  @Override public void stopRunning(){  running=false;}  }
class C{  public static int executeUpdate(String sql,int param,boolean ignoreError,String trxName,int timeOut){  return executeUpdate(sql,new Object[]{new Integer(param)},ignoreError,trxName,timeOut);}  }
class C{  public static String experimenterToString(OFInstructionExperimenter inst,Logger log){  return Long.toString(inst.getExperimenter());}  }
class C{  public String[] validOption2(){  return new String[]{""};}  }
class C{  public BucketList listBuckets(ListBucketsRequest listBucketRequest) throws OSSException, ClientException {  assertParameterNotNull(listBucketRequest,"listBucketRequest");  Map<String,String> params=new LinkedHashMap<String,String>();  if (listBucketRequest.getPrefix() != null) {    params.put(PREFIX,listBucketRequest.getPrefix());  }  if (listBucketRequest.getMarker() != null) {    params.put(MARKER,listBucketRequest.getMarker());  }  if (listBucketRequest.getMaxKeys() != null) {    params.put(MAX_KEYS,Integer.toString(listBucketRequest.getMaxKeys()));  }  if (listBucketRequest.getBid() != null) {    params.put(BID,listBucketRequest.getBid());  }  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.GET).setParameters(params).setOriginalRequest(listBucketRequest).build();  return doOperation(request,listBucketResponseParser,null,null,true);}  }
class C{  static public QuestionWidget createWidgetFromPrompt(FormEntryPrompt fep,Context context,boolean readOnlyOverride){  String appearance=fep.getAppearanceHint();  if (appearance == null)   appearance="";  appearance=appearance.toLowerCase(Locale.ENGLISH);  QuestionWidget questionWidget;switch (fep.getControlType()) {case Constants.CONTROL_INPUT:switch (fep.getDataType()) {case Constants.DATATYPE_DATE_TIME:      questionWidget=new DateTimeWidget(context,fep);    break;case Constants.DATATYPE_DATE:  questionWidget=new DateWidget(context,fep);break;case Constants.DATATYPE_TIME:questionWidget=new TimeWidget(context,fep);break;case Constants.DATATYPE_DECIMAL:if (appearance.startsWith("ex:")) {questionWidget=new ExDecimalWidget(context,fep);} else if (appearance.equals("bearing")) {questionWidget=new BearingWidget(context,fep);} else {questionWidget=new DecimalWidget(context,fep,readOnlyOverride);}break;case Constants.DATATYPE_INTEGER:if (appearance.startsWith("ex:")) {questionWidget=new ExIntegerWidget(context,fep);} else {questionWidget=new IntegerWidget(context,fep,readOnlyOverride);}break;case Constants.DATATYPE_GEOPOINT:questionWidget=new GeoPointWidget(context,fep);break;case Constants.DATATYPE_GEOSHAPE:questionWidget=new GeoShapeWidget(context,fep);break;case Constants.DATATYPE_GEOTRACE:questionWidget=new GeoTraceWidget(context,fep);break;case Constants.DATATYPE_BARCODE:questionWidget=new BarcodeWidget(context,fep);break;case Constants.DATATYPE_TEXT:String query=fep.getQuestion().getAdditionalAttribute(null,"query");if (query != null) {questionWidget=new ItemsetWidget(context,fep,readOnlyOverride);} else if (appearance.startsWith("printer")) {questionWidget=new ExPrinterWidget(context,fep);} else if (appearance.startsWith("ex:")) {questionWidget=new ExStringWidget(context,fep);} else if (appearance.equals("numbers")) {questionWidget=new StringNumberWidget(context,fep,readOnlyOverride);} else if (appearance.equals("url")) {questionWidget=new UrlWidget(context,fep);} else {questionWidget=new StringWidget(context,fep,readOnlyOverride);}break;default :questionWidget=new StringWidget(context,fep,readOnlyOverride);break;}break;case Constants.CONTROL_IMAGE_CHOOSE:if (appearance.equals("web")) {questionWidget=new ImageWebViewWidget(context,fep);} else if (appearance.equals("signature")) {questionWidget=new SignatureWidget(context,fep);} else if (appearance.equals("annotate")) {questionWidget=new AnnotateWidget(context,fep);} else if (appearance.equals("draw")) {questionWidget=new DrawWidget(context,fep);} else if (appearance.startsWith("align:")) {questionWidget=new AlignedImageWidget(context,fep);} else {questionWidget=new ImageWidget(context,fep);}break;case Constants.CONTROL_OSM_CAPTURE:questionWidget=new OSMWidget(context,fep);break;case Constants.CONTROL_AUDIO_CAPTURE:questionWidget=new AudioWidget(context,fep);break;case Constants.CONTROL_VIDEO_CAPTURE:questionWidget=new VideoWidget(context,fep);break;case Constants.CONTROL_SELECT_ONE:if (appearance.startsWith("compact") || appearance.startsWith("quickcompact")) {int numColumns=-1;try {String firstWord=appearance.split("\\s+")[0];int idx=firstWord.indexOf("-");if (idx != -1) {numColumns=Integer.parseInt(firstWord.substring(idx + 1));}} catch (Exception e) {Log.e("WidgetFactory","Exception parsing numColumns");}if (appearance.startsWith("quick")) {questionWidget=new GridWidget(context,fep,numColumns,true);} else {questionWidget=new GridWidget(context,fep,numColumns,false);}} else if (appearance.startsWith("minimal")) {questionWidget=new SpinnerWidget(context,fep);} else if (appearance.startsWith("quick")) {questionWidget=new SelectOneAutoAdvanceWidget(context,fep);} else if (appearance.equals("list-nolabel")) {questionWidget=new ListWidget(context,fep,false);} else if (appearance.equals("list")) {questionWidget=new ListWidget(context,fep,true);} else if (appearance.equals("label")) {questionWidget=new LabelWidget(context,fep);} else if (appearance.contains("search")) {questionWidget=new SelectOneSearchWidget(context,fep);} else {questionWidget=new SelectOneWidget(context,fep);}break;case Constants.CONTROL_SELECT_MULTI:if (appearance.startsWith("compact")) {int numColumns=-1;try {String firstWord=appearance.split("\\s+")[0];int idx=firstWord.indexOf("-");if (idx != -1) {numColumns=Integer.parseInt(firstWord.substring(idx + 1));}} catch (Exception e) {Log.e("WidgetFactory","Exception parsing numColumns");}questionWidget=new GridMultiWidget(context,fep,numColumns);} else if (appearance.startsWith("minimal")) {questionWidget=new SpinnerMultiWidget(context,fep);} else if (appearance.startsWith("list-nolabel")) {questionWidget=new ListMultiWidget(context,fep,false);} else if (appearance.startsWith("list")) {questionWidget=new ListMultiWidget(context,fep,true);} else if (appearance.startsWith("label")) {questionWidget=new LabelWidget(context,fep);} else {questionWidget=new SelectMultiWidget(context,fep);}break;case Constants.CONTROL_TRIGGER:questionWidget=new TriggerWidget(context,fep);break;default :questionWidget=new StringWidget(context,fep,readOnlyOverride);break;}return questionWidget;}  }
class C{  public void mouseEntered(final MouseEvent e){  final JMenu menu=(JMenu)menuItem;  if (!menu.isEnabled())   return;  final MenuSelectionManager manager=MenuSelectionManager.defaultManager();  final MenuElement selectedPath[]=manager.getSelectedPath();  if (!(selectedPath.length > 0 && selectedPath[selectedPath.length - 1] == menu.getPopupMenu())) {    if (!menu.isTopLevelMenu() || (selectedPath.length > 0 && selectedPath[0] == menu.getParent())) {      if (menu.getDelay() == 0) {        appendPath(getPath(),menu.getPopupMenu());      } else {        manager.setSelectedPath(getPath());        setupPostTimer(menu);      }    }  }}  }
class C{  private void parseHolderOfKeyConfirmation(SubjectType subject) throws MalformedTokenException {  SubjectConfirmationDataType subjectConfirmationData=subject.getSubjectConfirmation().getSubjectConfirmationData();  if (!(subjectConfirmationData instanceof KeyInfoConfirmationDataType)) {    _log.error(SUBJ_CONF_DATA_WRONG_TYPE_MSG);    throw new MalformedTokenException(SUBJ_CONF_DATA_WRONG_TYPE_MSG);  }  KeyInfoType keyInfo=getTheValue(subjectConfirmationData.getContent(),KeyInfoType.class);  X509DataType x509Data=keyInfo != null ? getTheValue(keyInfo.getContent(),X509DataType.class) : null;  byte[] cert=x509Data != null ? getTheValue(x509Data.getX509IssuerSerialOrX509SKIOrX509SubjectName(),byte[].class) : null;  if (cert != null) {    try {      CertificateFactory cf=CertificateFactory.getInstance(X509_CERT_FACTORY_TYPE);      _confirmationCertificate=(X509Certificate)cf.generateCertificate(new ByteArrayInputStream(cert));    } catch (    CertificateException e) {      _log.error(CERTIFICATE_PARSE_ERR_MSG,e);      throw new MalformedTokenException(CERTIFICATE_PARSE_ERR_MSG,e);    }  }  if (_confirmationCertificate == null) {    _log.error(SUBJ_CONF_DATA_NOT_FOUNT_MSG);    throw new MalformedTokenException(SUBJ_CONF_DATA_NOT_FOUNT_MSG);  }}  }
class C{  static BinaryTree<Integer> buildRightLinear(int n){  BinaryTree<Integer> bt=new BinaryTree<Integer>();  for (int i=0; i < n; i++) {    bt.insert(i);  }  return bt;}  }
class C{  @Override public Object invoke(MethodInvocation invocation) throws Throwable {  if (DISABLED || !SPRING_COUNTER.isDisplayed()) {    return invocation.proceed();  }  final String requestName=getRequestName(invocation);  boolean systemError=false;  try {    SPRING_COUNTER.bindContextIncludingCpu(requestName);    return invocation.proceed();  } catch (  final Error e) {    systemError=true;    throw e;  } finally {    SPRING_COUNTER.addRequestForCurrentContext(systemError);  }}  }
class C{  public Buffer read() throws Exception {  MediaSample sample=player.readSample();  if (sample == null) {    return null;  }  buffer.setData(sample.getData());  buffer.setLength(sample.getLength());  buffer.setFormat(format);  buffer.setSequenceNumber(seqNo++);  if (sample.isMarker()) {    buffer.setFlags(Buffer.FLAG_RTP_MARKER);  }  buffer.setTimeStamp(sample.getTimeStamp());  return buffer;}  }
class C{  Cubic[] calcNaturalCubic(int n,int[] x){  float[] w=new float[n + 1];  float[] v=new float[n + 1];  float[] y=new float[n + 1];  float[] D=new float[n + 1];  float z, F, G, H;  int k;  w[1]=v[1]=z=1.0f / 4.0f;  y[0]=z * 3 * (x[1] - x[n]);  H=4;  F=3 * (x[0] - x[n - 1]);  G=1;  for (k=1; k < n; k++) {    v[k + 1]=z=1 / (4 - v[k]);    w[k + 1]=-z * w[k];    y[k]=z * (3 * (x[k + 1] - x[k - 1]) - y[k - 1]);    H-=G * w[k];    F-=G * y[k - 1];    G=-v[k] * G;  }  H-=(G + 1) * (v[n] + w[n]);  y[n]=F - (G + 1) * y[n - 1];  D[n]=y[n] / H;  D[n - 1]=y[n - 1] - (v[n] + w[n]) * D[n];  for (k=n - 2; k >= 0; k--) {    D[k]=y[k] - v[k + 1] * D[k + 1] - w[k + 1] * D[n];  }  Cubic[] C=new Cubic[n + 1];  for (k=0; k < n; k++) {    C[k]=new Cubic((float)x[k],D[k],3 * (x[k + 1] - x[k]) - 2 * D[k] - D[k + 1],2 * (x[k] - x[k + 1]) + D[k] + D[k + 1]);  }  C[n]=new Cubic((float)x[n],D[n],3 * (x[0] - x[n]) - 2 * D[n] - D[0],2 * (x[n] - x[0]) + D[n] + D[0]);  return C;}  }
class C{  public Offer createOffer(final Player offerer,Item item,final Integer money,final Integer number){  if (item == null || item.isBound()) {    return null;  }  if (item instanceof StackableItem) {    if (!offerer.equals(item.getBaseContainer())) {      return null;    }    item=((StackableItem)item).splitOff(number);    if (item == null) {      return null;    }  } else   if (!offerer.drop(item)) {    return null;  }  Offer offer=new Offer(item,money,offerer);  RPSlot slot=this.getSlot(OFFERS_SLOT_NAME);  slot.add(offer);  getZone().storeToDatabase();  new ItemLogger().addLogItemEventCommand(new LogSimpleItemEventCommand(item,offerer,"slot-to-market",item.get("name"),Integer.toString(getQuantity(item)),"new offer",OFFERS_SLOT_NAME));  return offer;}  }
class C{  public ServiceNotFoundException(Throwable arg0){  super(arg0);}  }
class C{  public UserBuilder(String firstname,String lastname){  this.firstname=firstname;  this.lastname=lastname;}  }
class C{  public boolean forEach(TLongProcedure procedure){  for (int i=0; i < _pos; i++) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  public void exit(){  cancel();  final float radius=lerp(0,mOuterRadius,mTweenRadius);  final float remaining;  if (mAnimRadius != null && mAnimRadius.isRunning()) {    remaining=mOuterRadius - radius;  } else {    remaining=mOuterRadius;  }  final int radiusDuration=(int)(1000 * Math.sqrt(remaining / (WAVE_TOUCH_UP_ACCELERATION + WAVE_TOUCH_DOWN_ACCELERATION) * mDensity) + 0.5);  final int opacityDuration=(int)(1000 * mOpacity / WAVE_OPACITY_DECAY_VELOCITY + 0.5f);  exitSoftware(radiusDuration,opacityDuration);}  }
class C{  public static boolean checksumTest(byte[] d,int pageId,int pageSize){  int ps=pageSize;  int s1=255 + (d[0] & 255), s2=255 + s1;  s2+=s1+=d[6] & 255;  s2+=s1+=d[(ps >> 1) - 1] & 255;  s2+=s1+=d[ps >> 1] & 255;  s2+=s1+=d[ps - 2] & 255;  s2+=s1+=d[ps - 1] & 255;  if (d[1] != (byte)(((s1 & 255) + (s1 >> 8)) ^ pageId) || d[2] != (byte)(((s2 & 255) + (s2 >> 8)) ^ (pageId >> 8))) {    return false;  }  return true;}  }
class C{  public static int uninstallSilent(Context context,String packageName,boolean isKeepData){  if (packageName == null || packageName.length() == 0) {    return DELETE_FAILED_INVALID_PACKAGE;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm uninstall").append(isKeepData ? " -k " : " ").append(packageName.replace(" ","\\ "));  ShellUtils.CommandResult commandResult=ShellUtils.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.successMsg != null && (commandResult.successMsg.contains("Success") || commandResult.successMsg.contains("success"))) {    return DELETE_SUCCEEDED;  }  Log.e(TAG,new StringBuilder().append("uninstallSilent successMsg:").append(commandResult.successMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return DELETE_FAILED_INTERNAL_ERROR;  }  if (commandResult.errorMsg.contains("Permission denied")) {    return DELETE_FAILED_PERMISSION_DENIED;  }  return DELETE_FAILED_INTERNAL_ERROR;}  }
class C{  public LengthField(long value,long sizeOfLengthField){  this.value=value;  this.sizeOfLengthField=sizeOfLengthField;}  }
class C{  private void attachVolumesToInitiators(StorageSystem storage,List<Volume> volumes,List<Initiator> initiators,Map<URI,Integer> volumeToTargetLunMap,Map<Volume,Map<String,List<String>>> volumeToInitiatorTargetMap,ExportMask exportMask) throws Exception {  CinderEndPointInfo ep=CinderUtils.getCinderEndPoint(storage.getActiveProviderURI(),dbClient);  log.debug("Getting the cinder APi for the provider with id  {}",storage.getActiveProviderURI());  CinderApi cinderApi=cinderApiFactory.getApi(storage.getActiveProviderURI(),ep);  List<Initiator> iSCSIInitiators=new ArrayList<Initiator>();  List<Initiator> fcInitiators=new ArrayList<Initiator>();  splitInitiatorsByProtocol(initiators,iSCSIInitiators,fcInitiators);  String host=getHostNameFromInitiators(initiators);  Map<String,String[]> mapSettingVsValues=getFCInitiatorsArray(fcInitiators);  String[] fcInitiatorsWwpns=mapSettingVsValues.get(WWPNS);  String[] fcInitiatorsWwnns=mapSettingVsValues.get(WWNNS);  for (  Volume volume : volumes) {    String volumeId=volume.getNativeId();    int targetLunId=-1;    VolumeAttachResponse attachResponse=null;    for (    Initiator initiator : iSCSIInitiators) {      String initiatorPort=initiator.getInitiatorPort();      log.debug(String.format("Attaching volume %s ( %s ) to initiator %s on Openstack cinder node",volumeId,volume.getId(),initiatorPort));      attachResponse=cinderApi.attachVolume(volumeId,initiatorPort,null,null,host);      log.info("Got response : {}",attachResponse.connection_info.toString());      targetLunId=attachResponse.connection_info.data.target_lun;    }    if (fcInitiatorsWwpns.length > 0) {      log.debug(String.format("Attaching volume %s ( %s ) to initiators %s on Openstack cinder node",volumeId,volume.getId(),fcInitiatorsWwpns));      attachResponse=cinderApi.attachVolume(volumeId,null,fcInitiatorsWwpns,fcInitiatorsWwnns,host);      log.info("Got response : {}",attachResponse.connection_info.toString());      targetLunId=attachResponse.connection_info.data.target_lun;      Map<String,List<String>> initTargetMap=attachResponse.connection_info.data.initiator_target_map;      if (null != initTargetMap && !initTargetMap.isEmpty()) {        volumeToInitiatorTargetMap.put(volume,attachResponse.connection_info.data.initiator_target_map);      }    }    volumeToTargetLunMap.put(volume.getId(),targetLunId);    CinderStoragePortOperations storagePortOperationsInstance=CinderStoragePortOperations.getInstance(storage,dbClient);    storagePortOperationsInstance.invoke(attachResponse);  }  storeITLMappingInVolume(volumeToTargetLunMap,exportMask);}  }
class C{  private void init(){  mPaint=new Paint();  mPaint.setAntiAlias(true);  mPaint.setStyle(Paint.Style.FILL);  mPath=new Path();}  }
class C{  public static RefactoringStatus checkCompilationUnitName(String name,IJavaElement context){  return checkName(name,JavaConventionsUtil.validateCompilationUnitName(name,context));}  }
class C{  public ObjectMatrix1D like(int size){  return new SparseObjectMatrix1D(size);}  }
class C{  public float[] justify(float delta){  float[] deltas=new float[info.length * 2];  boolean grow=delta > 0;  if (DEBUG)   System.out.println("delta: " + delta);  int fallbackPriority=-1;  for (int p=0; delta != 0; p++) {    boolean lastPass=p > MAX_PRIORITY;    if (lastPass)     p=fallbackPriority;    float weight=0;    float gslimit=0;    float absorbweight=0;    for (int i=start; i < limit; i++) {      GlyphJustificationInfo gi=info[i];      if ((grow ? gi.growPriority : gi.shrinkPriority) == p) {        if (fallbackPriority == -1) {          fallbackPriority=p;        }        if (i != start) {          weight+=gi.weight;          if (grow) {            gslimit+=gi.growLeftLimit;            if (gi.growAbsorb) {              absorbweight+=gi.weight;            }          } else {            gslimit+=gi.shrinkLeftLimit;            if (gi.shrinkAbsorb) {              absorbweight+=gi.weight;            }          }        }        if (i + 1 != limit) {          weight+=gi.weight;          if (grow) {            gslimit+=gi.growRightLimit;            if (gi.growAbsorb) {              absorbweight+=gi.weight;            }          } else {            gslimit+=gi.shrinkRightLimit;            if (gi.shrinkAbsorb) {              absorbweight+=gi.weight;            }          }        }      }    }    if (!grow) {      gslimit=-gslimit;    }    boolean hitLimit=(weight == 0) || (!lastPass && ((delta < 0) == (delta < gslimit)));    boolean absorbing=hitLimit && absorbweight > 0;    float weightedDelta=delta / weight;    float weightedAbsorb=0;    if (hitLimit && absorbweight > 0) {      weightedAbsorb=(delta - gslimit) / absorbweight;    }    if (DEBUG) {      System.out.println("pass: " + p + ", d: "+ delta+ ", l: "+ gslimit+ ", w: "+ weight+ ", aw: "+ absorbweight+ ", wd: "+ weightedDelta+ ", wa: "+ weightedAbsorb+ ", hit: "+ (hitLimit ? "y" : "n"));    }    int n=start * 2;    for (int i=start; i < limit; i++) {      GlyphJustificationInfo gi=info[i];      if ((grow ? gi.growPriority : gi.shrinkPriority) == p) {        if (i != start) {          float d;          if (hitLimit) {            d=grow ? gi.growLeftLimit : -gi.shrinkLeftLimit;            if (absorbing) {              d+=gi.weight * weightedAbsorb;            }          } else {            d=gi.weight * weightedDelta;          }          deltas[n]+=d;        }        n++;        if (i + 1 != limit) {          float d;          if (hitLimit) {            d=grow ? gi.growRightLimit : -gi.shrinkRightLimit;            if (absorbing) {              d+=gi.weight * weightedAbsorb;            }          } else {            d=gi.weight * weightedDelta;          }          deltas[n]+=d;        }        n++;      } else {        n+=2;      }    }    if (!lastPass && hitLimit && !absorbing) {      delta-=gslimit;    } else {      delta=0;    }  }  if (DEBUG) {    float total=0;    for (int i=0; i < deltas.length; i++) {      total+=deltas[i];      System.out.print(deltas[i] + ", ");      if (i % 20 == 9) {        System.out.println();      }    }    System.out.println("\ntotal: " + total);    System.out.println();  }  return deltas;}  }
class C{  public SimpleQueryStringBuilder field(String field){  this.fields.put(field,null);  return this;}  }
class C{  public VerletSpring3D lockB(boolean s){  isBLocked=s;  return this;}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  wwd.setWorldWindowController(new PickNavigateController());  RenderableLayer layer=new RenderableLayer("Placemarks");  wwd.getLayers().addLayer(layer);  layer.addRenderable(createAirportPlacemark(Position.fromDegrees(34.2000,-119.2070,0),"Oxnard Airport"));  layer.addRenderable(createAirportPlacemark(Position.fromDegrees(34.2138,-119.0944,0),"Camarillo Airport"));  layer.addRenderable(createAirportPlacemark(Position.fromDegrees(34.1193,-119.1196,0),"Pt Mugu Naval Air Station"));  layer.addRenderable(createAircraftPlacemark(Position.fromDegrees(34.15,-119.15,2000)));  LookAt lookAt=new LookAt().set(34.15,-119.15,0,WorldWind.ABSOLUTE,2e4,0,45,0);  wwd.getNavigator().setAsLookAt(wwd.getGlobe(),lookAt);  return wwd;}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  if (bottom - top != right - left) {    right=left + (bottom - top);  }  int matrixWidth=Math.round((right - left + 1) / moduleSize);  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  if (matrixHeight != matrixWidth) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=(int)(moduleSize / 2.0f);  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + (int)(y * moduleSize);    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + (int)(x * moduleSize),iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public int lengthSKI(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_X509SKI);}  }
class C{  private void removeDelimiterAndNode(Delimiter delim){  Text node=delim.node;  node.unlink();  removeDelimiter(delim);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double hasLowerNeighbour=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          hasLowerNeighbour=1;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 < z && z2 != noData) {              hasLowerNeighbour=noData;            }          }          output.setValue(row,col,hasLowerNeighbour);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.443 -0500",hash_original_method="365415518ECAE79EAD0CD2C9D4462A78",hash_generated_method="9046C8C3606C809CC0BBD6C2974A7439") public void removePendingTransaction(SIPServerTransaction tr){  if (this.stackLogger.isLoggingEnabled()) {    this.stackLogger.logDebug("removePendingTx: " + tr.getTransactionId());  }  this.pendingTransactions.remove(tr.getTransactionId());}  }
class C{  public void loadHeader() throws IOException {  luacVersion=is.readByte();  luacFormat=is.readByte();  luacLittleEndian=(0 != is.readByte());  luacSizeofInt=is.readByte();  luacSizeofSizeT=is.readByte();  luacSizeofInstruction=is.readByte();  luacSizeofLuaNumber=is.readByte();  luacNumberFormat=is.readByte();  for (int i=0; i < LUAC_TAIL.length; ++i)   if (is.readByte() != LUAC_TAIL[i])   throw new LuaError("Unexpeted byte in luac tail of header, index=" + i);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  if (mf == null)   return Boolean.FALSE;  return Ministry.getInstance().isValidSourceFormat(mf.getFileFormat()) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void testRadix24Neg(){  String value="-287628a88gmn3451b8ijk00865c67e8d7ff20";  int radix=24;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  protected void sequence_ExpressionList(ISerializationContext context,ExpressionList semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public ReverseListIterator(ListIterator listIterator){  if (listIterator == null)   throw new IllegalArgumentException();  fListIterator=listIterator;}  }
class C{  public int binarySearchFromTo(long key,int from,int to){  return cern.colt.Sorting.binarySearchFromTo(this.elements,key,from,to);}  }
class C{  @Override public TokenFilter create(TokenStream input){  CommonGramsFilter commonGrams=(CommonGramsFilter)super.create(input);  return new CommonGramsQueryFilter(commonGrams);}  }
class C{  public void testAdvanceVaryingNumberOfTerms() throws Exception {  List<String> termsList=new ArrayList<>();  termsList.addAll(Arrays.asList(commonTerms));  termsList.addAll(Arrays.asList(mediumTerms));  termsList.addAll(Arrays.asList(rareTerms));  Collections.shuffle(termsList,random());  for (int amount=25; amount < 200; amount+=25) {    for (int numTerms=2; numTerms <= termsList.size(); numTerms++) {      String terms[]=termsList.subList(0,numTerms).toArray(new String[0]);      for (int minNrShouldMatch=1; minNrShouldMatch <= terms.length; minNrShouldMatch++) {        Scorer expected=scorer(terms,minNrShouldMatch,Mode.DOC_VALUES);        Scorer actual=scorer(terms,minNrShouldMatch,Mode.SCORER);        assertAdvance(expected,actual,amount);        expected=scorer(terms,minNrShouldMatch,Mode.DOC_VALUES);        actual=scorer(terms,minNrShouldMatch,Mode.SCORER);        assertAdvance(expected,actual,amount);      }    }  }}  }
class C{  public void success(int message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  public synchronized void expire(){  expired=true;}  }
class C{  public void spin(){  lastTimeAnimated=SystemClock.uptimeMillis();  isSpinning=true;  invalidate();}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public ChunkedArrayIterator(final int n,final E[] a){  this(n,a,null);}  }
class C{  private void loadMetadata(Document doc){  Element head=DOMUtil.getChild(doc.getDocumentElement(),"head");  if (head != null) {    List l=DOMUtil.getChildren(head,"meta");    if (l != null) {      for (Iterator i=l.iterator(); i.hasNext(); ) {        Element e=(Element)i.next();        String name=e.getAttribute("name");        if (name != null) {          String content=e.getAttribute("content");          Metadata m=new Metadata(name,content);          _metadata.add(m);        }      }    }    String title=getMetadataByName("title");    if (title == null) {      Element t=DOMUtil.getChild(head,"title");      if (t != null) {        title=DOMUtil.getText(t).trim();        Metadata m=new Metadata("title",title);        _metadata.add(m);      }    }  }}  }
class C{  public void reset(){  index=0;  if (file != null) {    listIndex=0;    if (!written) {      writeAllRows();      written=true;    }    list.clear();    file.seek(FileStore.HEADER_LENGTH);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.924 -0500",hash_original_method="172017F5B780130A5E2B4C50427437CE",hash_generated_method="BAF0A1CF7EF8BA29691E3C8313FFA064") private boolean isDeclaredAnnotationPresent(Class<? extends Annotation> annotationClass){  return (((getTaintInt() + annotationClass.getTaintInt())) == 1);}  }
class C{  private boolean formatPassword(AccessibilityEvent event,Context context,Utterance utterance){  final AccessibilityRecordCompat record=AccessibilityEventCompat.asRecord(event);  final int fromIndex=event.getFromIndex();  final int toIndex=record.getToIndex();  if (toIndex <= fromIndex) {    return false;  }  final CharSequence formattedText=context.getString(R.string.template_password_selected,fromIndex,toIndex);  utterance.addSpoken(formattedText);  return true;}  }
class C{  protected void rawBufferRecieved(IoBuffer in,IoSession session){  final RTMP rtmp=(RTMP)session.getAttribute(ProtocolState.SESSION_KEY);  log.debug("state: {}",rtmp);  final RTMPMinaConnection conn=(RTMPMinaConnection)session.getAttribute(RTMPConnection.RTMP_CONNECTION_KEY);  RTMPHandshake handshake=(RTMPHandshake)session.getAttribute(RTMPConnection.RTMP_HANDSHAKE);  if (handshake != null) {    IoBuffer out=null;    conn.getWriteLock().lock();    try {      if (rtmp.getMode() == RTMP.MODE_SERVER) {        if (rtmp.getState() != RTMP.STATE_HANDSHAKE) {          log.warn("Raw buffer after handshake, something odd going on");        }        log.debug("Handshake - server phase 1 - size: {}",in.remaining());      } else {        log.debug("Handshake - client phase 2 - size: {}",in.remaining());      }      out=handshake.doHandshake(in);    }  finally {      conn.getWriteLock().unlock();      if (out != null) {        session.write(out);        if (rtmp.getState() == RTMP.STATE_CONNECTED) {          if (handshake.getHandshakeType() == RTMPConnection.RTMP_ENCRYPTED) {            log.debug("Adding ciphers to the session");            session.setAttribute(RTMPConnection.RTMPE_CIPHER_IN,handshake.getCipherIn());            session.setAttribute(RTMPConnection.RTMPE_CIPHER_OUT,handshake.getCipherOut());          }        }      }    }  } else {    log.warn("Handshake was not found for this connection: {}",conn);    log.debug("RTMP state: {} Session: {}",rtmp,session);  }}  }
class C{  public static boolean testToken(String token){  int[] tokenInts=bytesToInt(bigIntToByte(token));  long seed=findSeed(reverseByteOrder(tokenInts[1]),reverseByteOrder(tokenInts[2]));  ReplayRandom random=new ReplayRandom(seed);  int[] nextInts=new int[4];  for (int i=0; i < nextInts.length; i++) {    nextInts[i]=reverseByteOrder(random.nextInt());  }  boolean match1=tokenInts[2] == nextInts[0];  boolean match2=tokenInts[3] == nextInts[1];  boolean match3=tokenInts[4] == nextInts[2];  return match1 && match2 && match3;}  }
class C{  private void emitDeserializerImpl(List<Type> expandedTypes,int depth,StringBuilder builder,String inVar,String outVar,String i){  Type type=expandedTypes.get(depth);  String childInVar=inVar + "_";  String childOutVar=outVar + "_";  Class<?> rawClass=getRawClass(type);  if (isList(rawClass)) {    String inVarIterator=inVar + "Iterator";    builder.append(i).append(getImplName(type,false)).append(" ").append(outVar).append(" = null;\n");    builder.append(i).append("if (").append(inVar).append(" != null && !").append(inVar).append(".isJsonNull()) {\n");    builder.append(i).append("  ").append(outVar).append(" = new ").append(getImplName(type,true)).append("();\n");    builder.append(i).append("  ").append(getImplName(Iterator.class,false)).append("<JsonElement> ").append(inVarIterator).append(" = ").append(inVar).append(".getAsJsonArray().iterator();\n");    builder.append(i).append("  while (").append(inVarIterator).append(".hasNext()) {\n");    builder.append(i).append("    JsonElement ").append(childInVar).append(" = ").append(inVarIterator).append(".next();\n");    emitDeserializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "    ");    builder.append(i).append("    ").append(outVar).append(".add(").append(childOutVar).append(");\n");    builder.append(i).append("  }\n");    builder.append(i).append("}\n");  } else   if (isMap(rawClass)) {    String entryVar="entry" + depth;    String entriesVar="entries" + depth;    builder.append(i).append(getImplName(type,false)).append(" ").append(outVar).append(" = null;\n");    builder.append(i).append("if (").append(inVar).append(" != null && !").append(inVar).append(".isJsonNull()) {\n");    builder.append(i).append("  ").append(outVar).append(" = new ").append(getImplName(type,true)).append("();\n");    builder.append(i).append("  java.util.Set<java.util.Map.Entry<String, JsonElement>> ").append(entriesVar).append(" = ").append(inVar).append(".getAsJsonObject().entrySet();\n");    builder.append(i).append("  for (java.util.Map.Entry<String, JsonElement> ").append(entryVar).append(" : ").append(entriesVar).append(") {\n");    builder.append(i).append("    JsonElement ").append(childInVar).append(" = ").append(entryVar).append(".getValue();\n");    emitDeserializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "    ");    builder.append(i).append("    ").append(outVar).append(".put(").append(entryVar).append(".getKey(), ").append(childOutVar).append(");\n");    builder.append(i).append("  }\n");    builder.append(i).append("}\n");  } else   if (getEnclosingTemplate().isDtoInterface(rawClass)) {    String className=getImplName(rawClass,false);    builder.append(i).append(className).append(" ").append(outVar).append(" = ").append(getImplNameForDto(rawClass)).append(".fromJsonElement(").append(inVar).append(", ").append(COPY_JSONS_PARAM).append(");\n");  } else   if (rawClass.isPrimitive()) {    String primitiveName=rawClass.getSimpleName();    String primitiveNameCap=primitiveName.substring(0,1).toUpperCase() + primitiveName.substring(1);    builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".getAs").append(primitiveNameCap).append("();\n");  } else   if (isAny(rawClass)) {    builder.append(i).append("JsonElement ").append(outVar).append(" = ");    appendCopyJsonExpression(inVar,builder).append(";\n");  } else {    final Class<?> dtoImplementation=getEnclosingTemplate().getDtoImplementation(rawClass);    if (dtoImplementation != null) {      String className=getImplName(rawClass,false);      builder.append(i).append(className).append(" ").append(outVar).append(" = ").append(dtoImplementation.getCanonicalName()).append(".fromJsonElement(").append(inVar).append(", ").append(COPY_JSONS_PARAM).append(");\n");    } else {      String rawClassName=rawClass.getName().replace('$','.');      builder.append(i).append(rawClassName).append(" ").append(outVar).append(" = gson.fromJson(").append(inVar).append(", ").append(rawClassName).append(".class);\n");    }  }}  }
class C{  public static boolean isAutoLandscape(){  return LocalStorageUtil.getBoolean("is_tablet",false);}  }
class C{  public static void rotateReversal(int[] a,int k){  ReverseArray.reverseRecursive(a,0,k - 1);  ReverseArray.reverseRecursive(a,k,a.length - 1);  ReverseArray.reverseRecursive(a,0,a.length - 1);}  }
class C{  public void onDestroy(){}  }
class C{  protected List<String> organizeFrames(String rpfDir){  RpfTocHandler toc=new RpfTocHandler(rpfDir);  List<String> frameList=new LinkedList<String>();  if (toc.isValid()) {    RpfTocEntry[] entries=toc.getEntries();    if (verbose) {      Debug.output("Figuring out which frames fit the criteria...");    }    for (int i=0; i < entries.length; i++) {      RpfTocEntry entry=entries[i];      toc.loadFrameInformation(entry);      double udinterval=(entry.coverage.nw_lat - entry.coverage.se_lat) / entry.vertFrames;      double rlinterval=(entry.coverage.se_lon - entry.coverage.nw_lon) / entry.horizFrames;      if (scale > 0) {        float rectScale=(float)RpfTocHandler.textScaleToLong(entry.scale);        if (rectScale == RpfProductInfo.UK.scale) {          if (verbose) {            Debug.output("  RpfTocEntry[" + i + "] scale unknown ("+ entry.coverage.chartCode+ "), skipping");          }          continue;        }switch (scaleDelim) {case SCALE_EQUALS:          if (scale == rectScale)           frameList.addAll(getFrameList(entry,rlinterval,udinterval));        break;case SCALE_GREATERTHAN:      if (scale >= rectScale)       frameList.addAll(getFrameList(entry,rlinterval,udinterval));    break;case SCALE_LESSTHAN:  if (scale <= rectScale)   frameList.addAll(getFrameList(entry,rlinterval,udinterval));break;case SCALE_NOTEQUALS:if (scale != rectScale) frameList.addAll(getFrameList(entry,rlinterval,udinterval));default :break;}} else {frameList.addAll(getFrameList(entry,rlinterval,udinterval));}}}return frameList;}  }
class C{  public int stackSize(){  return stackSize;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,int nbatches,int ncycles) throws Exception {  for (int i=0; i < nbatches; i++) {    sbuf.reset();    for (int j=0; j < ncycles; j++) {      oout.writeShort(0);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readShort();    }  }}  }
class C{  protected Integer wrapValue(int k){  return new Integer(k);}  }
class C{  public static void log(final Level level,final String message,final Throwable t){  if (t == null) {    ProAI.getLogger().log(level,addIndentationCompensation(message,level));  } else {    ProAI.getLogger().log(level,addIndentationCompensation(message,level),t);  }  if (!ProLogSettings.loadSettings().EnableAILogging) {    return;  }  final Level logDepth=ProLogSettings.loadSettings().AILoggingDepth;  if (logDepth.equals(Level.FINE) && (level.equals(Level.FINER) || level.equals(Level.FINEST))) {    return;  }  if (logDepth.equals(Level.FINER) && level.equals(Level.FINEST)) {    return;  }  ProLogUI.notifyAILogMessage(level,addIndentationCompensation(message,level));}  }
class C{  public static void tick(){  if (Bukkit.getPluginManager().useTimings()) {    for (    CustomTimingsHandler timings : HANDLERS) {      if (timings.curTickTotal > 50000000) {        timings.violations+=Math.ceil((double)timings.curTickTotal / 50000000);      }      timings.curTickTotal=0;      timings.timingDepth=0;    }  }}  }
class C{  int readCorner1(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  protected void deleteStatus() throws IOException {  final File statusFile=new File(workingDirectory,statusFileName);  if (statusFile.exists() && !statusFile.delete()) {    throw new IOException("Could not delete status file (" + statusFile.getAbsolutePath() + ")");  }}  }
class C{  public boolean canPerformEdits(){  try {    fRoot.dispatchCheckIntegrity(this);    fChecked=true;  } catch (  MalformedTreeException e) {    fException=e;    return false;  }  return true;}  }
class C{  private void handleJsonMakeSiblings(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  String[] movedIds;  String targetId;  String placement;  boolean justTheEntry;  String csrft;  try {    final JsonNodeHelper json=getJsonNode(requestAndResponse);    movedIds=json.getStringArray("movedIds");    targetId=json.getString("targetId");    placement=json.getString("placement");    justTheEntry=json.getBoolean("justTheEntry");    csrft=json.getString("csrft");  } catch (  final IOException e) {    returnJson400(requestAndResponse,servletText.errorJson());    return;  }  if (isTheCsrftWrong(requestAndResponse,csrft)) {    returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));    return;  }  if (placement == null || !(placement.equals("next") || placement.equals("previous"))) {    returnJson400(requestAndResponse,servletText.errorInvalidPlacementValue());    return;  }  if (!dbLogic.getIdGenerator().isIdWellFormed(targetId)) {    returnJson400(requestAndResponse,servletText.errorTargetIdInvalidFormat());    return;  }  try {    final Errors errors=new Errors();    final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));    if (user == null) {      returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));      return;    }    if (user.getIsAccountClosed()) {      returnJson400(requestAndResponse,servletText.errorAccountIsClosed());    }    final Entry sibling=dbLogic.getEntryById(targetId);    if (sibling == null) {      returnJson400(requestAndResponse,servletText.errorTargetNoteCouldNotBeFound());      return;    }    final LinkedList<EntryAndIsFromList> entriesToMove=new LinkedList<EntryAndIsFromList>();    final String errorMessage=validateEntriesParentsBeforeChildren(requestAndResponse,movedIds,entriesToMove);    if (errorMessage != null) {      returnJson400(requestAndResponse,errorMessage);      return;    }    final StringBuilder result=new StringBuilder();    result.append("[");    boolean isFirst=true;    for (    final EntryAndIsFromList entryToMove : entriesToMove) {      if (sibling.getId().equals(entryToMove.entry.getId())) {        returnJson400(requestAndResponse,servletText.errorTargetAndObjectCanNotBeTheSame());        return;      }      if (!dbLogic.makeEntrySiblingOfAnother(user,sibling,entryToMove.entry,justTheEntry,placement,isUserAnAdmin(requestAndResponse),errors)) {        returnJson400(requestAndResponse,errors);        return;      }      if (entryToMove.isFromList) {        if (!isFirst) {          result.append(",");        }        result.append("{");        result.append("\"id\":\"" + entryToMove.entry.getId() + "\",\n");        addJsonForEntry(result,entryToMove.entry,false,false,false,true);        result.append("}");        isFirst=false;      }    }    result.append("]");    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    logger.log(Level.INFO,"Exception",e);    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String toString(){  return m_str;}  }
class C{  private void showError(String message,OutputStream output){  try {    byte[] buffer=ResponseUtils.generateJavaScriptLogReportDoc(message).getBytes(UTF_8);    IOUtils.copy(new BufferedInputStream(new ByteArrayInputStream(buffer)),output);  } catch (  IOException e) {    _logger.fatal("Error en ShowError",e);  }}  }
class C{  public boolean isMatch(Geometry geom,String opName,Object[] args,Result actualResult,Result expectedResult,double tolerance){  if (!opName.equalsIgnoreCase("buffer"))   return defaultMatcher.isMatch(geom,opName,args,actualResult,expectedResult,tolerance);  double distance=Double.parseDouble((String)args[0]);  return isBufferResultMatch(((GeometryResult)actualResult).getGeometry(),((GeometryResult)expectedResult).getGeometry(),distance);}  }
class C{  public Statement parseStatement() throws ParseException {  Mark m=tq.mark();  Token<JsTokenType> t=tq.peek();  if (JsTokenType.WORD == t.type) {    String label=parseIdentifier(false);    FilePosition labelPos=t.pos;    if (tq.checkToken(Punctuation.COLON)) {      t=tq.peek();      AbstractStatement s=null;      if (JsTokenType.KEYWORD == t.type) {switch (Keyword.fromString(t.text)) {case FOR:case DO:case WHILE:case SWITCH:          s=parseLoopOrSwitch(labelPos,label);        break;default :      break;  }}if (null == s) {  Statement labelless=parseStatementWithoutLabel();  s=new LabeledStmtWrapper(posFrom(m),label,labelless);}finish(s,m);return s;}tq.rewind(m);}return parseStatementWithoutLabel();}  }
class C{  synchronized void receive(char[] chars,int offset,int count) throws IOException {  Arrays.checkOffsetAndCount(chars.length,offset,count);  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (lastReader != null && !lastReader.isAlive()) {    throw new IOException("Pipe broken");  }  lastWriter=Thread.currentThread();  while (count > 0) {    try {      while (buffer != null && out == in) {        notifyAll();        wait(1000);        if (lastReader != null && !lastReader.isAlive()) {          throw new IOException("Pipe broken");        }      }    } catch (    InterruptedException e) {      IoUtils.throwInterruptedIoException();    }    if (buffer == null) {      throw new IOException("Pipe is closed");    }    if (in == -1) {      in=0;    }    if (in >= out) {      int length=buffer.length - in;      if (count < length) {        length=count;      }      System.arraycopy(chars,offset,buffer,in,length);      offset+=length;      count-=length;      in+=length;      if (in == buffer.length) {        in=0;      }    }    if (count > 0 && in != out) {      int length=out - in;      if (count < length) {        length=count;      }      System.arraycopy(chars,offset,buffer,in,length);      offset+=length;      count-=length;      in+=length;    }  }}  }
class C{  private void replaceFragment(Fragment newFragment,String transactionTag){  if (newFragment != null) {    FragmentManager frgManager=getSupportFragmentManager();    FragmentTransaction fragmentTransaction=frgManager.beginTransaction();    fragmentTransaction.addToBackStack(transactionTag);    fragmentTransaction.replace(R.id.main_content_frame,newFragment).commit();    frgManager.executePendingTransactions();  } else {    Timber.e(new RuntimeException(),"Replace fragments with null newFragment parameter.");  }}  }
class C{  public Object nextElement(){  if (rootValue != null) {    Object tem=rootValue;    rootValue=null;    return tem;  }  if (otherValue != null) {    Object tem=otherValue;    otherValue=null;    return tem;  }  prep();  if (subMapValues == null)   throw new NoSuchElementException();  return subMapValues.nextElement();}  }
class C{  public static int decodeFromOpN(byte opcode) throws IllegalArgumentException {  return decodeFromOpN((int)opcode);}  }
class C{  private static Polynomial[] lptobpFactors(Polynomial P,double BW,double prod){  Polynomial[] retval=new Polynomial[2];  double[] p=P.coefficients();  double c=p[0] / p[2];  double b=p[1] / p[2];  double discriminant=b * b - 4 * c;  if (discriminant >= 0.0) {    double root=(-b + Math.sqrt(discriminant)) / 2.0;    double f1=root * BW / 2.0;    double f2=f1 * f1 - prod;    Complex C=new Complex(f1).plus(Complex.sqrt(new Complex(f2)));    double[] t0={C.conjugate().times(C).real(),-2.0 * C.real(),1.0};    retval[0]=new Polynomial(t0);    root=(-b - Math.sqrt(discriminant)) / 2.0;    f1=root * BW / 2.0;    f2=f1 * f1 - prod;    C=new Complex(f1).plus(Complex.sqrt(new Complex(f2)));    double[] t1={C.conjugate().times(C).real(),-2.0 * C.real(),1.0};    retval[1]=new Polynomial(t1);  } else {    Complex root=new Complex(-b / 2.0,Math.sqrt(-discriminant) / 2.0);    Complex f1=root.times(BW / 2.0);    Complex f2=(f1.times(f1)).minus(prod);    Complex C=f1.plus(Complex.sqrt(f2));    double[] t0={C.conjugate().times(C).real(),-2.0 * C.real(),1.0};    retval[0]=new Polynomial(t0);    C=f1.minus(Complex.sqrt(f2));    double[] t1={C.conjugate().times(C).real(),-2.0 * C.real(),1.0};    retval[1]=new Polynomial(t1);  }  return retval;}  }
class C{  public GF2Matrix(byte[] enc){  if (enc.length < 9) {    throw new ArithmeticException("given array is not an encoded matrix over GF(2)");  }  numRows=LittleEndianConversions.OS2IP(enc,0);  numColumns=LittleEndianConversions.OS2IP(enc,4);  int n=((numColumns + 7) >>> 3) * numRows;  if ((numRows <= 0) || (n != (enc.length - 8))) {    throw new ArithmeticException("given array is not an encoded matrix over GF(2)");  }  length=(numColumns + 31) >>> 5;  matrix=new int[numRows][length];  int q=numColumns >> 5;  int r=numColumns & 0x1f;  int count=8;  for (int i=0; i < numRows; i++) {    for (int j=0; j < q; j++, count+=4) {      matrix[i][j]=LittleEndianConversions.OS2IP(enc,count);    }    for (int j=0; j < r; j+=8) {      matrix[i][q]^=(enc[count++] & 0xff) << j;    }  }}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public void receiveRtpPacket(RtpPacket packet){  if (baseSeq == -1) {    initSeq(packet.seqnum);  }  updateSeq(packet.seqnum);}  }
class C{  public static void dump(DocFlavor docFlavor){  System.out.println();  System.out.println("DocFlavor=" + docFlavor);  PrintRequestAttributeSet pras=new HashPrintRequestAttributeSet();  PrintService[] pss=PrintServiceLookup.lookupPrintServices(docFlavor,pras);  for (int i=0; i < pss.length; i++) {    PrintService ps=pss[i];    System.out.println("- " + ps);    System.out.println("  Factory=" + ps.getServiceUIFactory());    ServiceUIFactory uiF=pss[i].getServiceUIFactory();    if (uiF != null) {      System.out.println("about");      JDialog about=(JDialog)uiF.getUI(ServiceUIFactory.ABOUT_UIROLE,ServiceUIFactory.JDIALOG_UI);      about.setVisible(true);      System.out.println("admin");      JDialog admin=(JDialog)uiF.getUI(ServiceUIFactory.ADMIN_UIROLE,ServiceUIFactory.JDIALOG_UI);      admin.setVisible(true);      System.out.println("main");      JDialog main=(JDialog)uiF.getUI(ServiceUIFactory.MAIN_UIROLE,ServiceUIFactory.JDIALOG_UI);      main.setVisible(true);      System.out.println("reserved");      JDialog res=(JDialog)uiF.getUI(ServiceUIFactory.RESERVED_UIROLE,ServiceUIFactory.JDIALOG_UI);      res.setVisible(true);    }    DocFlavor dfs[]=pss[i].getSupportedDocFlavors();    System.out.println("  - Supported Doc Flavors");    for (int j=0; j < dfs.length; j++)     System.out.println("    -> " + dfs[j]);    Class[] attCat=pss[i].getSupportedAttributeCategories();    System.out.println("  - Supported Attribute Categories");    for (int j=0; j < attCat.length; j++)     System.out.println("    -> " + attCat[j].getName() + " = "+ pss[i].getDefaultAttributeValue((Class<? extends Attribute>)attCat[j]));  }}  }
class C{  @Override public String toString(){  String s="";switch (type) {case STATIC:    s+="static";  break;case SPECIAL:s+="special";break;case VIRTUAL:s+="virtual";break;case INTERFACE:s+="interface";break;}if (isPreciseTarget && (type != STATIC)) {s+="_exact";}if (hasSpecialVersion()) {return s + "\"" + spMethod+ "\"";}if (target != null) {return s + "\"" + target+ "\"";} else {return s + "<" + memRef+ ">";}}  }
class C{  public void testSetProperty(){  UnboundBean instance=new UnboundBeanImpl();  instance.setProperty(STRING_PROPERTY,NEW_VALUE);  instance.setProperty(MAPPED_STRING,NEW_VALUE);  assertEquals(NEW_VALUE,instance.getProperty(STRING_PROPERTY));  assertNull(instance.getProperty(MAPPED_STRING));  assertNull(instance.getProperty(NEW_PROPERTY));  instance.setProperty(NEW_PROPERTY,OLD_VALUE);  assertNull(instance.getProperty(NEW_PROPERTY));  instance.setProperty(NEW_PROPERTY,NEW_VALUE);  assertNull(instance.getProperty(NEW_PROPERTY));}  }
class C{  public Element(final CharSequence name,final boolean breaksFlow,final boolean isSimple){  this(name,breaksFlow,isSimple,false);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:16.018 -0500",hash_original_method="6FF32DF773E2792C41FA7AD13FDCFDDC",hash_generated_method="FA7A2FC4F704693B139DE1009428863C") public BindException(String detailMessage){  super(detailMessage);}  }
class C{  public static String formatTimeDelta(long time,CharSequence sep){  final StringBuilder sb=new StringBuilder();  final Formatter fmt=new Formatter(sb);  for (int i=TIME_UNIT_SIZES.length - 1; i >= 0; --i) {    if (i == 0 && sb.length() > 4) {      continue;    }    if (sb.length() > 0) {      sb.append(sep);    }    final long acValue=time / TIME_UNIT_SIZES[i];    time=time % TIME_UNIT_SIZES[i];    if (!(acValue == 0 && sb.length() == 0)) {      fmt.format("%0" + TIME_UNIT_DIGITS[i] + "d%s",Long.valueOf(acValue),TIME_UNIT_NAMES[i]);    }  }  fmt.close();  return sb.toString();}  }
class C{  private void logMessage(String msg,Object[] obj){  if (_monitoringPropertiesLoader.isToLogIndications()) {    _logger.debug("-> " + msg,obj);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.927 -0500",hash_original_method="A2DF67CCEC020DAA7F7D1228AFE48AE4",hash_generated_method="A5A8B841741A4AB961D7D9F00DC863C3") public boolean hasEphemeris(){  return mHasEphemeris;}  }
class C{  public static void decode(File source,File target) throws IOException {  InputStream inputStream=null;  OutputStream outputStream=null;  try {    inputStream=new FileInputStream(source);    outputStream=new FileOutputStream(target);    decode(inputStream,outputStream);  }  finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      Throwable t) {        ;      }    }    if (inputStream != null) {      try {        inputStream.close();      } catch (      Throwable t) {        ;      }    }  }}  }
class C{  public LuaString substring(int beginIndex,int endIndex){  return valueOf(m_bytes,m_offset + beginIndex,endIndex - beginIndex);}  }
class C{  public void addItems(int howMany){  if (howMany > 0) {    for (int i=lastInsertedIndex + 1; i <= lastInsertedIndex + howMany; i++) {      items.add("Item " + i);      notifyItemInserted(items.size() - 1);    }    lastInsertedIndex=lastInsertedIndex + howMany;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected LR1State createStartState(){  return new LR1State(toHashSet(new LR1Item(grammar.getStartProduction(),0,grammarInfo.getTerminalSet(Placeholder))));}  }
class C{  public static String convertObjectToString(Object obj) throws IOException {  ByteArrayOutputStream baos=null;  GZIPOutputStream gos=null;  ObjectOutputStream oos=null;  try {    baos=new ByteArrayOutputStream();    gos=new GZIPOutputStream(baos);    oos=new ObjectOutputStream(gos);    oos.writeObject(obj);  }  finally {    try {      if (oos != null) {        oos.close();      }      if (gos != null) {        gos.close();      }      if (baos != null) {        baos.close();      }    } catch (    IOException e) {      LOG.error(e);    }  }  return new String(Base64.encodeBase64(baos.toByteArray()),"UTF-8");}  }
class C{  public void shutdown(){  reporter.shutdown();}  }
class C{  public CurrencyValue(long amount,String currencyCode){  this.amount=amount;  this.currencyCode=currencyCode;}  }
class C{  @SuppressWarnings("unchecked") public static void sortPersons(final Population population){  Map<Id<Person>,Person> map=(Map<Id<Person>,Person>)population.getPersons();  if (map instanceof SortedMap)   return;  Map<Id<Person>,Person> treeMap=new TreeMap<>(map);  map.clear();  map.putAll(treeMap);}  }
class C{  public void testConfiguratorProperties() throws Exception {  System.setProperty(JonasPropertySet.CONFIGURATOR_PREFIX + "ajpPort","123456");  System.setProperty(JonasPropertySet.CONFIGURATOR_PREFIX + "ajpConnectorActivation","true");  checkForValue("123456",true);  System.getProperties().remove(JonasPropertySet.CONFIGURATOR_PREFIX + "ajpPort");  System.getProperties().remove(JonasPropertySet.CONFIGURATOR_PREFIX + "ajpConnectorActivation");  checkForValue("123456",false);}  }
class C{  public IdentityHashMap(){  this(DEFAULT_MAX_SIZE);}  }
class C{  protected void initMatrixStorage(){  this.A=new float[this.n][this.n];}  }
class C{  public DevicePicker(Activity activity){  this.activity=activity;}  }
class C{  private static int byteCompaction(int mode,int[] codewords,Charset encoding,int codeIndex,StringBuilder result){  ByteArrayOutputStream decodedBytes=new ByteArrayOutputStream();  if (mode == BYTE_COMPACTION_MODE_LATCH) {    int count=0;    long value=0;    int[] byteCompactedCodewords=new int[6];    boolean end=false;    int nextCode=codewords[codeIndex++];    while ((codeIndex < codewords[0]) && !end) {      byteCompactedCodewords[count++]=nextCode;      value=900 * value + nextCode;      nextCode=codewords[codeIndex++];      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      } else {        if ((count % 5 == 0) && (count > 0)) {          for (int j=0; j < 6; ++j) {            decodedBytes.write((byte)(value >> (8 * (5 - j))));          }          value=0;          count=0;        }      }    }    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {      byteCompactedCodewords[count++]=nextCode;    }    for (int i=0; i < count; i++) {      decodedBytes.write((byte)byteCompactedCodewords[i]);    }  } else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {    int count=0;    long value=0;    boolean end=false;    while (codeIndex < codewords[0] && !end) {      int code=codewords[codeIndex++];      if (code < TEXT_COMPACTION_MODE_LATCH) {        count++;        value=900 * value + code;      } else {        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {          codeIndex--;          end=true;        }      }      if ((count % 5 == 0) && (count > 0)) {        for (int j=0; j < 6; ++j) {          decodedBytes.write((byte)(value >> (8 * (5 - j))));        }        value=0;        count=0;      }    }  }  result.append(new String(decodedBytes.toByteArray(),encoding));  return codeIndex;}  }
class C{  protected <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {  BigInteger p, q, g, x, y;  if (key != null) {    if (keySpec == null) {      throw new NullPointerException("keySpec == null");    }    if (key instanceof DSAPrivateKey) {      DSAPrivateKey privateKey=(DSAPrivateKey)key;      if (keySpec.equals(DSAPrivateKeySpec.class)) {        x=privateKey.getX();        DSAParams params=privateKey.getParams();        p=params.getP();        q=params.getQ();        g=params.getG();        return (T)(new DSAPrivateKeySpec(x,p,q,g));      }      if (keySpec.equals(PKCS8EncodedKeySpec.class)) {        return (T)(new PKCS8EncodedKeySpec(key.getEncoded()));      }      throw new InvalidKeySpecException("'keySpec' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");    }    if (key instanceof DSAPublicKey) {      DSAPublicKey publicKey=(DSAPublicKey)key;      if (keySpec.equals(DSAPublicKeySpec.class)) {        y=publicKey.getY();        DSAParams params=publicKey.getParams();        p=params.getP();        q=params.getQ();        g=params.getG();        return (T)(new DSAPublicKeySpec(y,p,q,g));      }      if (keySpec.equals(X509EncodedKeySpec.class)) {        return (T)(new X509EncodedKeySpec(key.getEncoded()));      }      throw new InvalidKeySpecException("'keySpec' is neither DSAPublicKeySpec nor X509EncodedKeySpec");    }  }  throw new InvalidKeySpecException("'key' is neither DSAPublicKey nor DSAPrivateKey");}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public LocalVariableAttribute(ConstPool cp){  super(cp,tag,new byte[2]);  ByteArray.write16bit(0,info,0);}  }
class C{  public static DecomposableMatchBuilder1<String,String> caseString(MatchesAny s){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(any());  return new DecomposableMatchBuilder1<>(matchers,0,new PrimitiveFieldExtractor<>(String.class));}  }
class C{  final void putInt(int offset,int value){  unsafe.putInt(offset + address,value);}  }
class C{  public void addFloatingNode(ValueNode node,@SuppressWarnings("unused") String cause){  add("add floating node",null);}  }
class C{  public void unregisterByContainer(String containerId){  rwLock.readLock().lock();  try {    ServiceInstance<ModelEndpoint> ep=containerToEndpoint.get(containerId);    if (ep != null) {      serviceDiscovery.unregisterService(ep);      LOG.info("Unregistered endpoint " + ep.getPayload());    } else {      LOG.warn("Unable to find registered model associated with container " + containerId);    }  } catch (  Exception e) {    LOG.error("Unable to unregister container " + containerId + " due to: "+ e.getMessage(),e);  } finally {    rwLock.readLock().unlock();  }}  }
class C{  @HLEFunction(nid=0x7663CB5C,version=150) public int sceMp4AacDecode(TPointer32 aac,TPointer auAddr,TPointer bufferAddr,int init,int frequency){  SceMpegAu au=new SceMpegAu();  au.read(auAddr);  if (log.isTraceEnabled()) {    log.trace(String.format("sceMp4AacDecode au=%s, esBuffer:%s",au,Utilities.getMemoryDump(au.esBuffer,au.esSize)));  }  int result=audioCodec.decode(au.esBuffer,au.esSize,bufferAddr.getAddress());  if (result < 0) {    log.error(String.format("sceMp4AacDecode audio codec returned 0x%08X",result));    result=SceKernelErrors.ERROR_MP4_AAC_DECODE_ERROR;  } else {    result=0;  }  if (log.isDebugEnabled()) {    log.debug(String.format("sceMp4AacDecode returning 0x%X",result));  }  return result;}  }
class C{  public TransferTransaction(final DeserializationOptions options,final Deserializer deserializer){  super(TransactionTypes.TRANSFER,options,deserializer);  this.recipient=Account.readFrom(deserializer,"recipient");  this.amount=Amount.readFrom(deserializer,"amount");  this.attachment=new TransferTransactionAttachment();  final Message message=deserializer.readOptionalObject("message",null);  this.attachment.setMessage(normalizeMessage(message));  final ExtendedData extendedData=new ExtendedData();  SERIALIZATION_EXTENSIONS.deserialize(deserializer,this.getEntityVersion(),extendedData);  extendedData.mosaics.forEach(null);  VALIDATION_EXTENSIONS.validate(this);}  }
class C{  public void valueChanged(ListSelectionEvent event){  try {    if (!event.getValueIsAdjusting()) {      ListSelectionModel model=(ListSelectionModel)event.getSource();      if (model.getLeadSelectionIndex() > -1) {        org.trade.core.valuetype.Date openDate=(org.trade.core.valuetype.Date)m_tradingdayModel.getValueAt(m_tradingdayTable.convertRowIndexToModel(model.getLeadSelectionIndex()),0);        org.trade.core.valuetype.Date closeDate=(org.trade.core.valuetype.Date)m_tradingdayModel.getValueAt(m_tradingdayTable.convertRowIndexToModel(model.getLeadSelectionIndex()),1);        Tradingday transferObject=m_tradingdayModel.getData().getTradingday(openDate.getZonedDateTime(),closeDate.getZonedDateTime());        m_tradestrategyModel.setData(transferObject);        m_tradestrategyTable.enablePopupMenu(true);        enableTradestrategyButtons(null);      } else {        m_tradestrategyModel.setData(null);        m_tradestrategyTable.enablePopupMenu(false);      }    }  } catch (  Exception ex) {    setErrorMessage("Exception changing value.",ex.getMessage(),ex);  }}  }
class C{  public ServiceCall<SpeechSession> createSession(final String model){  final RequestBuilder request=RequestBuilder.post(PATH_SESSIONS);  if (model != null) {    request.query(MODEL,model);  }  return createServiceCall(request.build(),ResponseConverterUtils.getObject(SpeechSession.class));}  }
class C{  public XYEntry<K,V> removeByIndex(int index){  K key=indexList.remove(index);  return new XYEntry<K,V>(key,this.remove(key));}  }
class C{  @Override public void paint(Graphics g){  Color bColor;  Icon currentI=getIcon();  if (selected) {    bColor=SELECTED_BACKGROUND_COLOR;  } else   if (getParent() != null) {    bColor=getParent().getBackground();  } else {    bColor=getBackground();  }  g.setColor(bColor);  if (currentI != null && getText() != null) {    int offset=(currentI.getIconWidth() + getIconTextGap());    if (getComponentOrientation().isLeftToRight()) {      g.fillRect(offset,0,getWidth() - 1 - offset,getHeight() - 1);    } else {      g.fillRect(0,0,getWidth() - 1 - offset,getHeight() - 1);    }  } else {    g.fillRect(0,0,getWidth() - 1,getHeight() - 1);  }  super.paint(g);}  }
class C{  public UnsupportedClassTypeException(String message){  super(message);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public Integer put(Integer key,Integer value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public static long moduloSignedPowerOfTwo(long value,long spot){  if (ASSERTIONS)   assert (isSignedPowerOfTwo(spot));  if (spot == Long.MIN_VALUE) {    return (value != Long.MIN_VALUE) ? value : 0;  } else {    long s=(value >> 63);    return ((((value + s) ^ s) & (abs(spot) - 1)) + s) ^ s;  }}  }
class C{  public static byte readByte(){  return scanner.nextByte();}  }
class C{  public void testSize0SharedMode() throws Exception {  processSize0Test(DeploymentMode.SHARED);}  }
class C{  public UndirectedSparseGraph(){  super(EdgeType.UNDIRECTED);  vertices=new HashMap<V,Map<V,E>>();  edges=new HashMap<E,Pair<V>>();}  }
class C{  public Boolean isWindowsBasedAuthenticationEnabled(){  return windowsBasedAuthenticationEnabled;}  }
class C{  @Override public AnnotationMirror leastUpperBound(AnnotationMirror a1,AnnotationMirror a2){  if (!AnnotationUtils.areSameIgnoringValues(getTopAnnotation(a1),getTopAnnotation(a2))) {    return null;  } else   if (isSubtype(a1,a2)) {    return a2;  } else   if (isSubtype(a2,a1)) {    return a1;  } else   if (AnnotationUtils.areSameIgnoringValues(a1,a2)) {    List<Object> a1Values=AnnotationUtils.getElementValueArray(a1,"value",Object.class,true);    List<Object> a2Values=AnnotationUtils.getElementValueArray(a2,"value",Object.class,true);    HashSet<Object> newValues=new HashSet<Object>(a1Values.size() + a2Values.size());    newValues.addAll(a1Values);    newValues.addAll(a2Values);    return createAnnotation(a1.getAnnotationType().toString(),newValues);  } else {    if (!((AnnotationUtils.areSameByClass(a1,IntVal.class) || AnnotationUtils.areSameByClass(a1,DoubleVal.class)) && (AnnotationUtils.areSameByClass(a2,IntVal.class) || AnnotationUtils.areSameByClass(a2,DoubleVal.class)))) {      return UNKNOWNVAL;    } else {      AnnotationMirror doubleAnno;      AnnotationMirror intAnno;      if (AnnotationUtils.areSameByClass(a2,DoubleVal.class)) {        doubleAnno=a2;        intAnno=a1;      } else {        doubleAnno=a1;        intAnno=a2;      }      List<Long> intVals=getIntValues(intAnno);      List<Double> doubleVals=getDoubleValues(doubleAnno);      for (      Long n : intVals) {        doubleVals.add(n.doubleValue());      }      return createDoubleValAnnotation(doubleVals);    }  }}  }
class C{  private void finalizeDestinationFile(State state) throws StopRequest {  syncDestination(state);  String tempFilename=state.mFilename;  String finalFilename=Helpers.generateSaveFileName(mService,mInfo.mFileName);  if (!state.mFilename.equals(finalFilename)) {    File startFile=new File(tempFilename);    File destFile=new File(finalFilename);    if (mInfo.mTotalBytes != -1 && mInfo.mCurrentBytes == mInfo.mTotalBytes) {      if (!startFile.renameTo(destFile)) {        throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"unable to finalize destination file");      }    } else {      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,"file delivered with incorrect size. probably due to network not browser configured");    }  }}  }
class C{  public JdbcConnection(String url,Properties props) throws SQLException {  assert url != null;  assert props != null;  this.url=url;  cacheName=props.getProperty(PROP_CACHE);  String nodeIdProp=props.getProperty(PROP_NODE_ID);  if (nodeIdProp != null)   nodeId=UUID.fromString(nodeIdProp);  try {    GridClientConfiguration cfg=new GridClientConfiguration(props);    cfg.setServers(Collections.singleton(props.getProperty(PROP_HOST) + ":" + props.getProperty(PROP_PORT)));    String user=props.getProperty("user");    String passwd=props.getProperty("password");    if (!F.isEmpty(user)) {      SecurityCredentials creds=new SecurityCredentials(user,passwd);      cfg.setSecurityCredentialsProvider(new SecurityCredentialsBasicProvider(creds));    }    cfg.setEnableMetricsCache(false);    cfg.setEnableAttributesCache(false);    cfg.setAutoFetchMetrics(false);    cfg.setAutoFetchAttributes(false);    client=GridClientFactory.start(cfg);  } catch (  GridClientException e) {    throw new SQLException("Failed to start Ignite client.",e);  }  if (!isValid(2))   throw new SQLException("Client is invalid. Probably cache name is wrong.");}  }
class C{  public void cancelAll(){  endpoint.cancelAll();}  }
class C{  private void initValues(GLSurfaceView mGlSurfaceView){  mWidth=mGlSurfaceView.getWidth();  mHeight=mGlSurfaceView.getHeight();}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public MInOutLineConfirm(MInOutConfirm header){  this(header.getCtx(),0,header.get_TrxName());  setClientOrg(header);  setM_InOutConfirm_ID(header.getM_InOutConfirm_ID());}  }
class C{  public void addComponentLeftBefore(Component comp,Button button){  if (!buttonMap.containsKey(button.getId()))   buttonMap.put(button.getId(),button);  pnlBtnLeft.insertBefore(comp,button);}  }
class C{  public XPathFunctionException(String message){  super(message);}  }
class C{  public static long OS2LIP(byte[] input,int inOff){  long result=input[inOff++] & 0xff;  result|=(input[inOff++] & 0xff) << 8;  result|=(input[inOff++] & 0xff) << 16;  result|=((long)input[inOff++] & 0xff) << 24;  result|=((long)input[inOff++] & 0xff) << 32;  result|=((long)input[inOff++] & 0xff) << 40;  result|=((long)input[inOff++] & 0xff) << 48;  result|=((long)input[inOff++] & 0xff) << 56;  return result;}  }
class C{  public boolean passesTest(Instance inst) throws Exception {  if (inst.isMissing(m_AttIndex)) {    return false;  }  boolean isNominal=inst.attribute(m_AttIndex).isNominal();  double attribVal=inst.value(m_AttIndex);  if (!m_Not) {    if (isNominal) {      if (((int)attribVal) != ((int)m_Split)) {        return false;      }    } else     if (attribVal >= m_Split) {      return false;    }  } else {    if (isNominal) {      if (((int)attribVal) == ((int)m_Split)) {        return false;      }    } else     if (attribVal < m_Split) {      return false;    }  }  return true;}  }
class C{  public Class toClass(CtClass ct,ClassLoader loader,ProtectionDomain domain) throws CannotCompileException {  lockInCache(ct);  return super.toClass(ct,getClassLoader0(),domain);}  }
class C{  private CompletableFuture<QueryResponse> queryBoundedLinearizable(QueryEntry entry){  ServerSessionContext session=context.getStateMachine().executor().context().sessions().getSession(entry.getSession());  if (session == null) {    return CompletableFuture.completedFuture(logResponse(QueryResponse.builder().withStatus(Response.Status.ERROR).withError(CopycatError.Type.UNKNOWN_SESSION_ERROR).build()));  }  CompletableFuture<QueryResponse> future=new CompletableFuture<>();  sequenceBoundedLinearizableQuery(entry,session,future);  return future;}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return expr.costInline(thresh,env,ctx);}  }
class C{  public int compareTo(RatNum rn){  checkRep();  if (this.isNaN() && rn.isNaN()) {    checkRep();    return 0;  } else   if (this.isNaN()) {    checkRep();    return 1;  } else   if (rn.isNaN()) {    checkRep();    return -1;  } else {    RatNum diff=this.sub(rn);    checkRep();    return diff.numer;  }}  }
class C{  public static SubRegionRequest create(){  SubRegionRequest m=new SubRegionRequest();  return m;}  }
class C{  protected void addProfileEvent(MouseEvent event){  LatLonPoint llp=proj.inverse(event.getX(),event.getY(),new LatLonPoint.Double());  if (lastMouse != null) {    if ((Math.abs(lastMouse.getX() - event.getX()) > MAX_SPACE_BETWEEN_PIXELS) || (Math.abs(lastMouse.getY() - event.getY()) > MAX_SPACE_BETWEEN_PIXELS)) {      addGreatCirclePoints(lastMouse,event);      coords.addElement(llp);      xypoints.addElement(event.getPoint());    }  } else {    coords.addElement(llp);    xypoints.addElement(event.getPoint());  }  lastMouse=event;  profileLine.setLocation(setLLPoints(),OMGraphic.RADIANS);  profileLine.generate(proj);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void println(int x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).println(x);  flush();}  }
class C{  public int hashCode(){  return p.hashCode();}  }
class C{  public double normInf(){  double f=0;  for (int i=0; i < m; i++) {    double s=0;    for (int j=0; j < n; j++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public void randomizeFanIn(){  for (  Synapse synapse : getFanIn()) {    synapse.randomize();  }}  }
class C{  public boolean isPointInsideShape(Point2D point){  for (int i=0; i < shapes.size(); i++) {    if (boundaries.get(i).isInside(point)) {      if (shapes.get(i).isInside(point)) {        return true;      }    }  }  return false;}  }
class C{  public WaitingThread(Condition cond,RouteSpecificPool pool){  if (cond == null) {    throw new IllegalArgumentException("Condition must not be null.");  }  this.cond=cond;  this.pool=pool;}  }
class C{  private boolean lastPatternInSet(){  return ((getIteration() % bptt.getStepsPerSequences()) == (bptt.getStepsPerSequences() - 1));}  }
class C{  public static char int2hex(int i){  return HEX_CHARS[i];}  }
class C{  private static void emitTest(int argNumber,ArgumentType argEncoding){  if (argEncoding.isSize())   emit("is" + argEncoding.getOptName() + "(inst)"); else   emit("is" + argEncoding.getOptName() + "("+ getOperand(argNumber)+ ")");}  }
class C{  public void dispose(){  m_manager.removeListener(m_internalListener);  for (  final DebuggerTemplate debuggerTemplate : m_debuggerTemplates) {    debuggerTemplate.dispose();  }}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  }  if (!(o instanceof KnowledgeGroup)) {    return false;  }  KnowledgeGroup thatGroup=(KnowledgeGroup)o;  return this.type == thatGroup.type && this.fromGroup.equals(thatGroup.fromGroup) && this.toGroup.equals(thatGroup.toGroup);}  }
class C{  public static FilterParamIndexBase createIndex(FilterSpecLookupable lookupable,FilterServiceGranularLockFactory lockFactory,FilterOperator filterOperator){  FilterParamIndexBase index;  Class returnValueType=lookupable.getReturnType();  if (filterOperator == FilterOperator.EQUAL) {    index=new FilterParamIndexEquals(lookupable,lockFactory.obtainNew());    return index;  }  if (filterOperator == FilterOperator.NOT_EQUAL) {    index=new FilterParamIndexNotEquals(lookupable,lockFactory.obtainNew());    return index;  }  if (filterOperator == FilterOperator.IS) {    index=new FilterParamIndexEqualsIs(lookupable,lockFactory.obtainNew());    return index;  }  if (filterOperator == FilterOperator.IS_NOT) {    index=new FilterParamIndexNotEqualsIs(lookupable,lockFactory.obtainNew());    return index;  }  if ((filterOperator == FilterOperator.GREATER) || (filterOperator == FilterOperator.GREATER_OR_EQUAL) || (filterOperator == FilterOperator.LESS)|| (filterOperator == FilterOperator.LESS_OR_EQUAL)) {    if (returnValueType != String.class) {      index=new FilterParamIndexCompare(lookupable,lockFactory.obtainNew(),filterOperator);    } else {      index=new FilterParamIndexCompareString(lookupable,lockFactory.obtainNew(),filterOperator);    }    return index;  }  if (filterOperator.isRangeOperator()) {    if (returnValueType != String.class) {      index=new FilterParamIndexDoubleRange(lookupable,lockFactory.obtainNew(),filterOperator);    } else {      index=new FilterParamIndexStringRange(lookupable,lockFactory.obtainNew(),filterOperator);    }    return index;  }  if (filterOperator.isInvertedRangeOperator()) {    if (returnValueType != String.class) {      return new FilterParamIndexDoubleRangeInverted(lookupable,lockFactory.obtainNew(),filterOperator);    } else {      return new FilterParamIndexStringRangeInverted(lookupable,lockFactory.obtainNew(),filterOperator);    }  }  if (filterOperator == FilterOperator.IN_LIST_OF_VALUES) {    return new FilterParamIndexIn(lookupable,lockFactory.obtainNew());  }  if (filterOperator == FilterOperator.NOT_IN_LIST_OF_VALUES) {    return new FilterParamIndexNotIn(lookupable,lockFactory.obtainNew());  }  if (filterOperator == FilterOperator.BOOLEAN_EXPRESSION) {    return new FilterParamIndexBooleanExpr(lockFactory.obtainNew());  }  throw new IllegalArgumentException("Cannot create filter index instance for filter operator " + filterOperator);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String idrisiHeaderFile=null;  String idrisiDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      idrisiDataFile=imageFiles[i];      if (!((new File(idrisiDataFile)).exists())) {        showFeedback("IDRISI raster file does not exist.");        break;      }      idrisiHeaderFile=idrisiDataFile.replace(".rst",".rdc");      if (!idrisiHeaderFile.contains(".rdc")) {        idrisiHeaderFile=idrisiDataFile.replace(".RST",".rdc");      }      whiteboxHeaderFile=idrisiHeaderFile.replace(".rdc",".dep");      whiteboxDataFile=idrisiHeaderFile.replace(".rdc",".tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      if (!createHeaderFile(idrisiHeaderFile,whiteboxHeaderFile)) {        showFeedback("IDRISI header file was not read properly. " + "Tool failed to import");        return;      }      int length;      byte[] buffer=new byte[1024];      if (!idrisiFileIsByteDataType && !idrisiFileIsRGB) {        File fromfile=new File(idrisiDataFile);        inStream=new FileInputStream(fromfile);        File tofile=new File(whiteboxDataFile);        outStream=new FileOutputStream(tofile);        while ((length=inStream.read(buffer)) > 0) {          outStream.write(buffer,0,length);        }        outStream.close();        inStream.close();      } else       if (!idrisiFileIsRGB) {        RandomAccessFile rIn=null;        FileChannel inChannel=null;        int numBytesToRead=nrows * ncols;        ByteBuffer buf=ByteBuffer.allocate(numBytesToRead);        rIn=new RandomAccessFile(idrisiDataFile,"r");        inChannel=rIn.getChannel();        inChannel.position(0);        inChannel.read(buf);        java.nio.ByteOrder byteorder=java.nio.ByteOrder.nativeOrder();        buf.order(byteorder);        buf.rewind();        byte[] ba=new byte[numBytesToRead];        buf.get(ba);        WhiteboxRaster wr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        double z;        int row=0, col=0;        for (int j=0; j < numBytesToRead; j++) {          z=(double)(ba[j] & 0xff);          wr.setValue(row,col,z);          col++;          if (col == ncols) {            col=0;            row++;          }        }        wr.close();        inChannel.close();      } else {        RandomAccessFile rIn=null;        FileChannel inChannel=null;        int numBytesToRead=nrows * ncols * 3;        ByteBuffer buf=ByteBuffer.allocate(numBytesToRead);        rIn=new RandomAccessFile(idrisiDataFile,"r");        inChannel=rIn.getChannel();        inChannel.position(0);        inChannel.read(buf);        java.nio.ByteOrder byteorder=java.nio.ByteOrder.nativeOrder();        buf.order(byteorder);        buf.rewind();        byte[] ba=new byte[numBytesToRead];        buf.get(ba);        int r, g, b;        WhiteboxRaster wr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        double z;        int row=0, col=0;        for (int j=0; j < numBytesToRead; j+=3) {          b=(int)(ba[j] & 0xff);          g=(int)(ba[j + 1] & 0xff);          r=(int)(ba[j + 2] & 0xff);          z=(double)((255 << 24) | (b << 16) | (g << 8)| r);          wr.setValue(row,col,z);          col++;          if (col == ncols) {            col=0;            row++;          }        }        wr.close();        inChannel.close();      }      output=new WhiteboxRaster(whiteboxHeaderFile,"r");      output.findMinAndMaxVals();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.writeHeaderFile();      output.close();      returnData(whiteboxHeaderFile);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected boolean isPlainFlavor(DataFlavor flavor){  DataFlavor[] flavors=plainFlavors;  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor)) {      return true;    }  }  return false;}  }
class C{  public Property millisOfSecond(){  return new Property(this,getChronology().millisOfSecond());}  }
class C{  public int read() throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (eof) {    return -1;  }  if (pos >= chunkSize) {    nextChunk();    if (eof) {      return -1;    }  }  pos++;  return in.read();}  }
class C{  public void addPortUniqueId(java.lang.String param){  if (localPortUniqueId == null) {    localPortUniqueId=new java.lang.String[]{};  }  localPortUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localPortUniqueId);  list.add(param);  this.localPortUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  @Override public int compareTo(PlottableEntity o){  return this.getAlias().getName().compareTo(o.getAlias().getName());}  }
class C{  public SparseArray(int initialCapacity){  mKeys=new int[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  public RamProvisionerSimple(int availableRam){  super(availableRam);  setRamTable(new HashMap<String,Integer>());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:43.017 -0500",hash_original_method="5FCC8E6F7C9E5A23FBCB0A1615F5BC2D",hash_generated_method="DFEE05ADF9E6215BBB23E3CCF38B1D3F") public boolean collect(){  try {    VMDebug.stopInstructionCounting();    VMDebug.getInstructionCount(mCounts);  } catch (  UnsupportedOperationException uoe) {    return false;  }  return true;}  }
class C{  public boolean isIgnoreWhiteSpace(){  return ignoreWhiteSpace;}  }
class C{  public boolean supports(Capabilities c){  if (doNotCheckCapabilities()) {    return true;  }  boolean result;  result=true;  for (  Capability cap : Capability.values()) {    if (c.handles(cap) && !handles(cap)) {      result=false;      break;    }  }  return result;}  }
class C{  public static StructuralTypingResult result(TypeRef left,TypeRef right,List<String> missingMembers,List<String> wrongMembersErrors){  if (missingMembers.isEmpty() && wrongMembersErrors.isEmpty()) {    return success();  } else {    String msg=left.getTypeRefAsString() + " is not a structural subtype of " + right.getTypeRefAsString()+ ": ";    if (!missingMembers.isEmpty()) {      msg+="missing " + missingMembers.get(0);      if (missingMembers.size() > 1) {        msg+=" and " + (missingMembers.size() - 1) + " more";      }    }    if (!wrongMembersErrors.isEmpty()) {      if (!missingMembers.isEmpty()) {        msg+="; ";      }      msg+=wrongMembersErrors.get(0);      if (wrongMembersErrors.size() > 1) {        msg+=" and " + (wrongMembersErrors.size() - 1) + " more problems";      }    }    return failure(msg);  }}  }
class C{  public void testLockFileExists() throws IOException {  Path tempDir=createTempDir();  Path lockFile=tempDir.resolve("test.lock");  Files.createFile(lockFile);  Directory dir=getDirectory(tempDir);  Lock l=dir.obtainLock("test.lock");  l.close();  dir.close();}  }
class C{  public final char readChar() throws IOException {  int ch1=in.read();  int ch2=in.read();  if ((ch1 | ch2) < 0)   throw new EOFException();  return (char)((ch1 << 8) + (ch2 << 0));}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  @ObjectiveCName("changeNotificationSoundWithSound:") public void changeNotificationSound(String sound){  modules.getSettingsModule().changeNotificationSound(sound);}  }
class C{  public AssociationEnd_ createAssociationEnd_(){  AssociationEnd_Impl associationEnd_=new AssociationEnd_Impl();  return associationEnd_;}  }
class C{  public static void traverse(final File directory,final IDirectoryTraverselCallback callback,final Comparator<File> sorter){  final File[] files=directory.listFiles();  if (files == null) {    return;  }  Arrays.sort(files,sorter);  callback.entering(directory);  for (  final File file : files) {    if (!file.isDirectory()) {      callback.nextFile(file);    }  }  for (  final File file : files) {    if (file.isDirectory()) {      traverse(file,callback);    }  }  callback.leaving(directory);}  }
class C{  public boolean isActualCase(){  return isSwitch && targetCaseValue != null;}  }
class C{  static public String escapeTags(final String input){  if (input == null || input.length() == 0 || (input.indexOf('"') == -1 && input.indexOf('&') == -1 && input.indexOf('<') == -1 && input.indexOf('>') == -1)) {    return input;  }  StringBuilder buf=new StringBuilder(input.length() + 6);  char ch;  int len=input.length();  for (int i=0; i < len; i++) {    ch=input.charAt(i);    if (ch > '>') {      buf.append(ch);    } else     if (ch == '<') {      buf.append("&lt;");    } else     if (ch == '>') {      buf.append("&gt;");    } else     if (ch == '&') {      buf.append("&amp;");    } else     if (ch == '"') {      buf.append("&quot;");    } else {      buf.append(ch);    }  }  return buf.toString();}  }
class C{  public QuotaExceededException(String message,Throwable cause){  super(message,cause);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.STATE_ENTITY___ENTRY_OR_EXIT_ACTION_1:    getEntryOrExitAction_1().clear();  getEntryOrExitAction_1().addAll((Collection<? extends EntryOrExitAction_>)newValue);return;case UmplePackage.STATE_ENTITY___AUTO_TRANSITION_1:getAutoTransition_1().clear();getAutoTransition_1().addAll((Collection<? extends AutoTransition_>)newValue);return;case UmplePackage.STATE_ENTITY___TRANSITION_1:getTransition_1().clear();getTransition_1().addAll((Collection<? extends Transition_>)newValue);return;case UmplePackage.STATE_ENTITY___ACTIVITY_1:getActivity_1().clear();getActivity_1().addAll((Collection<? extends Activity_>)newValue);return;case UmplePackage.STATE_ENTITY___STATE_1:getState_1().clear();getState_1().addAll((Collection<? extends State_>)newValue);return;case UmplePackage.STATE_ENTITY___TRACE_1:getTrace_1().clear();getTrace_1().addAll((Collection<? extends Trace_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean hasOnDisk(final String key){synchronized (mEntries) {    return mEntries.contains(sanitizeKey(key));  }}  }
class C{  public Enumeration<MessageHeader> entries(){  return entries.elements();}  }
class C{  public InputLocationMessageContent.InputLocationMessageContentBuilder longitude(double longitude){  this.longitude=longitude;  return this;}  }
class C{  public boolean hasMoreEntries(){  return this.hasMoreEntries;}  }
class C{  public boolean succeeded(){  return value != null;}  }
class C{  public void load(Element element,Object o){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.339 -0500",hash_original_method="7E775FC9F6A4D9C80906C236555098C0",hash_generated_method="BD7058BF2ECD242BC1E243CF5F2162F9") public static void cursorIntToContentValues(Cursor cursor,String field,ContentValues values){  cursorIntToContentValues(cursor,field,values,field);}  }
class C{  public final CC growPrio(int... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  growPrioY(widthHeight[1]);case 1:growPrioX(widthHeight[0]);}return this;}  }
class C{  public DDSCompressor(){}  }
class C{  public boolean isQueryEmpty(){  return query == null || EMPTY_QUERY.equals(query);}  }
class C{  public TimingHit pageDownloadTime(Integer value){  setInteger(PAGE_DOWNLOAD_TIME,value);  return this;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public MultiMineClient(){  instance=this;  mc=FMLClientHandler.instance().getClient();  partiallyMinedBlocksArray=new PartiallyMinedBlock[30];  arrayOverWriteIndex=0;  curBlock=BlockPos.ORIGIN;  lastBlockCompletion=0F;  lastCloudTickReading=0;  MultiMine.instance().debugPrint("Multi Mine about to hack vanilla RenderMap");  for (  Field f : RenderGlobal.class.getDeclaredFields()) {    if (f.getType().equals(Map.class)) {      f.setAccessible(true);      try {        vanillaDestroyBlockProgressMap=(Map)f.get(mc.renderGlobal);        MultiMine.instance().debugPrint("Multi Mine vanilla RenderMap invasion successful, field: " + f.getName());        break;      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  public void messageAcked(MessageType type,Short nodeId){  if (nodeId == null)   return;  if (!windowedTypes.contains(type))   return;  MessageWindow mw=messageWindows.get(nodeId);  if (mw == null)   return;  int pending=mw.pending.decrementAndGet();  if (pending < MAX_PENDING_MESSAGES) {    mw.lock.lock();    try {      mw.full.signalAll();    }  finally {      mw.lock.unlock();    }  }}  }
class C{  public int memberWeight(){  int result=0;  InternalDistributedMember lead=getLeadMember();  for (  InternalDistributedMember mbr : this.members) {    result+=mbr.getNetMember().getMemberWeight();switch (mbr.getVmKind()) {case DistributionManager.NORMAL_DM_TYPE:      result+=10;    if (lead != null && mbr.equals(lead)) {      result+=5;    }  break;case DistributionManager.LOCATOR_DM_TYPE:result+=3;break;case DistributionManager.ADMIN_ONLY_DM_TYPE:break;default :throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());}}return result;}  }
class C{  public NullLiteral newNullLiteral(){  return new NullLiteral(this);}  }
class C{  public static double[] coalesce_points(double[] radians,double eps,boolean ispolyg){  int write=2;  int len=radians.length;  for (int i=write - 2, j=write; j < len; j+=2) {    double lat1=ProjMath.radToDeg(radians[i]);    double lon1=ProjMath.radToDeg(radians[i + 1]);    double lat2=ProjMath.radToDeg(radians[j]);    double lon2=ProjMath.radToDeg(radians[j + 1]);    if (MoreMath.approximately_equal(lat1,lat2,eps) && MoreMath.approximately_equal(lon1,lon2,eps)) {      continue;    }    i=write;    radians[write++]=radians[j];    radians[write++]=radians[j + 1];  }  if (ispolyg && (write == 6) && MoreMath.approximately_equal(radians[0],radians[4],eps)&& MoreMath.approximately_equal(radians[1],radians[5],eps)) {    write-=2;  }  double[] newrads=new double[write];  System.arraycopy(radians,0,newrads,0,write);  return newrads;}  }
class C{  public boolean isResellerDisabled(){  return isReseller() && isPersistedRole(OrganizationRoleType.RESELLER);}  }
class C{  @Override public void updateCharacterStream(String columnLabel,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateCharacterStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public final void increaseWrittenMessages(long currentTime){  throughputCalculationLock.lock();  try {    writtenMessages++;    lastWriteTime=currentTime;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public int testPrepGeomNotCached(int iter,Geometry g,List lines){  if (iter == 0)   System.out.println("Using NON-CACHED Prepared Geometry");  PreparedGeometryFactory pgFact=new PreparedGeometryFactory();  int count=0;  for (Iterator i=lines.iterator(); i.hasNext(); ) {    LineString line=(LineString)i.next();    PreparedGeometry prepGeom=pgFact.create(g);    if (prepGeom.intersects(line))     count++;  }  return count;}  }
class C{  private void dump(String who,Event e){  StringBuffer sb=new StringBuffer("--- [ContentProposalAdapter]\n");  sb.append(who);  sb.append(" - e: keyCode=" + e.keyCode + hex(e.keyCode));  sb.append("; character=" + e.character + hex(e.character));  sb.append("; stateMask=" + e.stateMask + hex(e.stateMask));  sb.append("; doit=" + e.doit);  sb.append("; detail=" + e.detail + hex(e.detail));  sb.append("; widget=" + e.widget);  System.out.println(sb);}  }
class C{  public static void main(String[] argv){  runEvaluator(new PrincipalComponents(),argv);}  }
class C{  public void addIceServers(List<PeerConnection.IceServer> iceServers){  if (this.iceServers != null) {    iceServers.addAll(this.iceServers);  }  this.iceServers=iceServers;}  }
class C{  private void nearDestroy() throws Exception {  grid(0).getOrCreateCache(getNearConfig());  grid(2).getOrCreateNearCache(CACHE_NAME_NEAR,new NearCacheConfiguration());  assertNull(grid(0).cache(CACHE_NAME_NEAR).get(KEY_VAL));  assertNull(grid(2).cache(CACHE_NAME_NEAR).get(KEY_VAL));  grid(2).cache(CACHE_NAME_NEAR).put(KEY_VAL,KEY_VAL);  grid(0).cache(CACHE_NAME_NEAR).put(KEY_VAL,"near-test");  assertEquals("near-test",grid(2).cache(CACHE_NAME_NEAR).localPeek(KEY_VAL));  IgniteCache<Object,Object> cache=grid(2).cache(CACHE_NAME_NEAR);  cache.destroy();  checkDestroyed(cache);}  }
class C{  protected void drawRangeGridlines(Graphics2D g2,Rectangle2D dataArea,List ticks){  if (!isRangeGridlinesVisible() && !isRangeMinorGridlinesVisible()) {    return;  }  ValueAxis axis=getRangeAxis();  if (axis == null) {    return;  }  CategoryItemRenderer r=getRenderer();  if (r == null) {    return;  }  Stroke gridStroke=null;  Paint gridPaint=null;  boolean paintLine;  Iterator iterator=ticks.iterator();  while (iterator.hasNext()) {    paintLine=false;    ValueTick tick=(ValueTick)iterator.next();    if ((tick.getTickType() == TickType.MINOR) && isRangeMinorGridlinesVisible()) {      gridStroke=getRangeMinorGridlineStroke();      gridPaint=getRangeMinorGridlinePaint();      paintLine=true;    } else     if ((tick.getTickType() == TickType.MAJOR) && isRangeGridlinesVisible()) {      gridStroke=getRangeGridlineStroke();      gridPaint=getRangeGridlinePaint();      paintLine=true;    }    if (((tick.getValue() != 0.0) || !isRangeZeroBaselineVisible()) && paintLine) {      if (r instanceof AbstractCategoryItemRenderer) {        AbstractCategoryItemRenderer aci=(AbstractCategoryItemRenderer)r;        aci.drawRangeLine(g2,this,axis,dataArea,tick.getValue(),gridPaint,gridStroke);      } else {        r.drawRangeGridline(g2,this,axis,dataArea,tick.getValue());      }    }  }}  }
class C{  public static void bincellOpInPlace(MatrixBlock m1ret,MatrixBlock m2,BinaryOperator op) throws DMLRuntimeException {  if (op.sparseSafe || isSparseSafeDivide(op,m2))   safeBinaryInPlace(m1ret,m2,op); else   unsafeBinaryInPlace(m1ret,m2,op);  if (m1ret.isEmptyBlock(false))   m1ret.examSparsity();}  }
class C{  public APIActiveConnection(ActiveConnection connection){  this.identifier=connection.getIdentifier();  this.connectionIdentifier=connection.getConnectionIdentifier();  this.startDate=connection.getStartDate();  this.remoteHost=connection.getRemoteHost();  this.username=connection.getUsername();}  }
class C{  public static void main(String[] args) throws IOException {  InputStream input=Knapsack.class.getResourceAsStream("knapsack.100.2");  if (input == null) {    System.err.println("Unable to find the file knapsack.100.2");    System.exit(-1);  }  NondominatedPopulation result=new Executor().withProblemClass(Knapsack.class,input).withAlgorithm("NSGAII").withMaxEvaluations(50000).distributeOnAllCores().run();  for (int i=0; i < result.size(); i++) {    Solution solution=result.get(i);    double[] objectives=solution.getObjectives();    objectives=Vector.negate(objectives);    System.out.println("Solution " + (i + 1) + ":");    System.out.println("    Sack 1 Profit: " + objectives[0]);    System.out.println("    Sack 2 Profit: " + objectives[1]);    System.out.println("    Binary String: " + solution.getVariable(0));  }}  }
class C{  public boolean isSentOK(){  return m_sentMsg != null && SENT_OK.equals(m_sentMsg);}  }
class C{  public void onLoadResource(WebView view,String url){}  }
class C{  public boolean addSharedTurnout(OPath key,OBlock block,OPath path){  if (log.isDebugEnabled()) {    log.debug("Path " + key.getName() + " in block \""+ getDisplayName()+ "\" has turnouts shared with path "+ path.getName()+ " in block "+ block.getDisplayName());  }  List<HashMap<OBlock,List<OPath>>> blockList=_sharedTO.get(key.getName());  if (blockList != null) {    Iterator<HashMap<OBlock,List<OPath>>> iter=blockList.iterator();    while (iter.hasNext()) {      HashMap<OBlock,List<OPath>> map=iter.next();      Iterator<Entry<OBlock,List<OPath>>> it=map.entrySet().iterator();      while (it.hasNext()) {        Entry<OBlock,List<OPath>> entry=it.next();        OBlock b=entry.getKey();        if (b.equals(block)) {          List<OPath> pathList=entry.getValue();          if (pathList.contains(path)) {            return false;          } else {            pathList.add(path);            return true;          }        } else {          List<OPath> pathList=new ArrayList<OPath>();          pathList.add(path);          map.put(block,pathList);          return true;        }      }    }    HashMap<OBlock,List<OPath>> map=new HashMap<OBlock,List<OPath>>();    List<OPath> pathList=new ArrayList<OPath>();    pathList.add(path);    map.put(block,pathList);    blockList.add(map);    return true;  } else {    List<OPath> pathList=new ArrayList<OPath>();    pathList.add(path);    HashMap<OBlock,List<OPath>> map=new HashMap<OBlock,List<OPath>>();    map.put(block,pathList);    blockList=new ArrayList<HashMap<OBlock,List<OPath>>>();    blockList.add(map);    _sharedTO.put(key.getName(),blockList);    return true;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.646 -0500",hash_original_method="91EEF8AA1623C8BE2C536A6D8B3A0F15",hash_generated_method="8F86C0D5E5F61D0CDA67404F7AD0D4E7") public boolean removeParameter(String name){  throw new UnsupportedOperationException("Removing parameters in a stack is not supported.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:40:20.410 -0400",hash_original_method="560E2BF09A0132513DD81769D9F4599B",hash_generated_method="A924751863A408B26B5F2B63FD19E47B") public AtCommandResult handleBasicCommand(String arg){  return new AtCommandResult(AtCommandResult.ERROR);}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  public OperationNotSupportException(String arg0){  super(arg0);}  }
class C{  public static void saveToSdCard(List<Entry> entries,String path){  File sdcard=Environment.getExternalStorageDirectory();  File saved=new File(sdcard,path);  if (!saved.exists()) {    try {      saved.createNewFile();    } catch (    IOException e) {      Log.e(LOG,e.toString());    }  }  try {    BufferedWriter buf=new BufferedWriter(new FileWriter(saved,true));    for (    Entry e : entries) {      buf.append(e.getVal() + "#" + e.getXIndex());      buf.newLine();    }    buf.close();  } catch (  IOException e) {    Log.e(LOG,e.toString());  }}  }
class C{  public void insert(int index,Node root){  insert(roots,index,root);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("");  doPost(request,response);}  }
class C{  @Action(value="/commonAjax-populateDivisions") public String populateDivisions(){  try {    final Boundary boundary=boundaryService.getBoundaryById(Long.valueOf(zoneId));    final String cityName=licenseUtils.getAllCity().get(0).getName();    if (!boundary.getName().equals(cityName))     divisionList=boundaryService.getChildBoundariesByBoundaryId(Long.valueOf(zoneId));  } catch (  final Exception e) {    LOGGER.error("populateDivisions() - Error while loading divisions ." + e.getMessage());    addFieldError(LOCATION,"Unable to load division information");    throw new ApplicationRuntimeException("Unable to load division information",e);  }  return "ward";}  }
class C{  public static void v(String tag,String msg){  v(tag,msg,null);}  }
class C{  void lissyReport(LocoNetMessage l){  int unit=(l.getElement(4) & 0x7F);  if (unit != getNumber()) {    return;  }  int loco=(l.getElement(6) & 0x7F) + 128 * (l.getElement(5) & 0x7F);  boolean north=((l.getElement(3) & 0x20) == 0);  setReport("" + loco + " seen "+ (north ? "northbound" : "southbound"));}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Map<String,RawProtein<PfamHmmer3RawMatch>> rawMatches=rawMatchDAO.getRawMatchesForProteinIdsInRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),getSignatureLibraryRelease());  Utilities.verboseLog(10,"Pfam_A_PostProcessingStep : stepinstance:" + stepInstance.toString());  if (rawMatches.size() == 0) {    Long sequenceCout=stepInstance.getTopProtein() - stepInstance.getBottomProtein();    Utilities.verboseLog(10,"Zero matches found: on " + sequenceCout + " proteins stepinstance:"+ stepInstance.toString());    int waitTimeFactor=2;    if (!Utilities.isRunningInSingleSeqMode()) {      waitTimeFactor=Utilities.getWaitTimeFactorLogE(10 * sequenceCout.intValue()).intValue();    }    Utilities.sleep(waitTimeFactor * 1000);    rawMatches=rawMatchDAO.getRawMatchesForProteinIdsInRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),getSignatureLibraryRelease());    Utilities.verboseLog(10,"matches after waitTimeFactor: " + waitTimeFactor + " - "+ rawMatches.size());  }  int matchCount=0;  for (  final RawProtein rawProtein : rawMatches.values()) {    matchCount+=rawProtein.getMatches().size();  }  Utilities.verboseLog(10," PfamA: Retrieved " + rawMatches.size() + " proteins to post-process.");  Utilities.verboseLog(10," PfamA: A total of " + matchCount + " raw matches.");  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("PfamA: Retrieved " + rawMatches.size() + " proteins to post-process.");    LOGGER.debug("PfamA: A total of " + matchCount + " raw matches.");  }  try {    Map<String,RawProtein<PfamHmmer3RawMatch>> filteredMatches=getPostProcessor().process(rawMatches);    matchCount=0;    for (    final RawProtein rawProtein : filteredMatches.values()) {      matchCount+=rawProtein.getMatches().size();    }    Utilities.verboseLog(10," PfamA: " + filteredMatches.size() + " proteins passed through post processing.");    Utilities.verboseLog(10," PfamA: A total of " + matchCount + " matches PASSED.");    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("PfamA: " + filteredMatches.size() + " proteins passed through post processing.");      LOGGER.debug("PfamA: A total of " + matchCount + " matches PASSED.");    }    filteredMatchDAO.persist(filteredMatches.values());    Utilities.verboseLog(10," PfamA: filteredMatches persisted");  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to post process filtered matches.",e);  }}  }
class C{  public void activateTx(final Tx localState) throws IllegalStateException {  if (localState == null)   throw new IllegalArgumentException();  localState.lock.lock();  try {    if (activeTx.putIfAbsent(localState.getStartTimestamp(),localState) != null) {      throw new IllegalStateException("Already in local table: tx=" + localState);    }  }  finally {    localState.lock.unlock();  }}  }
class C{  public boolean doMouseDragged(Positionable selection,MouseEvent event){  if (_editCircuitFrame != null || _editPathsFrame != null) {    return true;  }  if (_editPortalFrame != null || _editDirectionFrame != null) {    if (selection instanceof PortalIcon) {      _editor.highlight(selection);      return false;    }    return true;  }  return false;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public AttrValueDTO updateEntityAttributeValue(final AttrValueDTO attrValueDTO){  final Matcher matcher=CONTENT_BODY.matcher(attrValueDTO.getAttributeDTO().getCode());  if (matcher.find()) {    final String locale=matcher.group(1);    final String keyStart="CONTENT_BODY_" + locale;    final String keyLike=keyStart + "_%";    final String val=attrValueDTO.getVal();    final List<Object> bodyAttrs=attrValueEntityCategoryDao.findQueryObjectByNamedQuery("CONTENTBODY.ATTRIBUTES",keyLike);    if (val.length() > bodyAttrs.size() * CHUNK_SIZE) {      throw new IllegalArgumentException("There are " + bodyAttrs.size() + " body parts attributes for "+ keyLike+ " which limits content to "+ bodyAttrs.size() * CHUNK_SIZE + " characters. Your input (" + val.length() + ") exceeds this limit. Add more body attributes.");    }    final Category content=service.findById(((AttrValueCategoryDTO)attrValueDTO).getCategoryId());    final Iterator<AttrValueCategory> itOld=content.getAttributes().iterator();    while (itOld.hasNext()) {      final AttrValueCategory old=itOld.next();      if (old.getAttribute().getCode().startsWith(keyStart)) {        itOld.remove();        attrValueEntityCategoryDao.delete(old);      }    }    int pos=0;    int chunkCount=0;    String part;    do {      part=pos + CHUNK_SIZE > val.length() ? val.substring(pos) : val.substring(pos,pos + CHUNK_SIZE);      Attribute atr=(Attribute)bodyAttrs.get(chunkCount);      AttrValueCategory valueEntityCategory=getPersistenceEntityFactory().getByIface(AttrValueCategory.class);      valueEntityCategory.setAttribute(atr);      valueEntityCategory.setCategory(content);      valueEntityCategory.setVal(part);      attrValueEntityCategoryDao.create((AttrValueEntityCategory)valueEntityCategory);      chunkCount++;      pos+=CHUNK_SIZE;    } while (pos < val.length());  } else {    final AttrValueEntityCategory valueEntityCategory=attrValueEntityCategoryDao.findById(attrValueDTO.getAttrvalueId());    attrValueAssembler.assembleEntity(attrValueDTO,valueEntityCategory,getAdaptersRepository(),dtoFactory);    attrValueEntityCategoryDao.update(valueEntityCategory);  }  return attrValueDTO;}  }
class C{  public Builder(Entitlement entitlement){  super(entitlement);  type=entitlement.type;}  }
class C{  public static boolean canOcclude(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canOcclude())     return false;  }  return true;}  }
class C{  protected Graph loadGraphFromResource(final String resource) throws RDFParseException, RDFHandlerException, IOException {  final Graph g=readGraphFromFile(new File(resource));  return g;}  }
class C{  public String name(){  return this.name;}  }
class C{  public static Function<List<Map.Entry<String,String>>,Map<String,List<String>>> foldErrs(){  return null;}  }
class C{  public BitVector toBitVector(){  return new BitVector(this.bits,this.capacity * bitsPerElement);}  }
class C{  public static int columnsNumber(char c,int x,int prevX,int plainSpaceSize){  if (c != '\t') {    return 1;  }  int result=(x - prevX) / plainSpaceSize;  if ((x - prevX) % plainSpaceSize > 0) {    result++;  }  return result;}  }
class C{  public static String formatNumber(float number,int digitCount,boolean separateThousands){  char[] out=new char[35];  boolean neg=false;  if (number == 0) {    return "0";  }  boolean zero=false;  if (number < 1 && number > -1) {    zero=true;  }  if (number < 0) {    neg=true;    number=-number;  }  if (digitCount > POW_10.length) {    digitCount=POW_10.length - 1;  }  number*=POW_10[digitCount];  long lval=Math.round(number);  int ind=out.length - 1;  int charCount=0;  boolean decimalPointAdded=false;  while (lval != 0 || charCount < (digitCount + 1)) {    int digit=(int)(lval % 10);    lval=lval / 10;    out[ind--]=(char)(digit + '0');    charCount++;    if (charCount == digitCount) {      out[ind--]=',';      charCount++;      decimalPointAdded=true;    } else     if (separateThousands && lval != 0 && charCount > digitCount) {      if (decimalPointAdded) {        if ((charCount - digitCount) % 4 == 0) {          out[ind--]='.';          charCount++;        }      } else {        if ((charCount - digitCount) % 4 == 3) {          out[ind--]='.';          charCount++;        }      }    }  }  if (zero) {    out[ind--]='0';    charCount+=1;  }  if (neg) {    out[ind--]='-';    charCount+=1;  }  int start=out.length - charCount;  return String.valueOf(out,start,out.length - start);}  }
class C{  public final void mul(GVector v1,GMatrix m1){  if (m1.getNumRow() != v1.length) {    throw new MatrixSizeException();  }  if (length != m1.getNumCol()) {    throw new MatrixSizeException();  }  double v[];  if (v1 != this) {    v=v1.values;  } else {    v=values.clone();  }  for (int j=length - 1; j >= 0; j--) {    values[j]=0.0;    for (int i=v1.length - 1; i >= 0; i--) {      values[j]+=m1.values[i][j] * v[i];    }  }}  }
class C{  private void requestReset(){  try {    requestedReset=true;    antInterface.ANTResetSystem();    configureAntRadio();  } catch (  AntInterfaceException e) {    Log.e(TAG,"Unable to reset ant.",e);    requestedReset=false;  }}  }
class C{  public static int murmurhash3_x86_32(byte[] data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int roundedEnd=offset + (len & 0xfffffffc);  for (int i=offset; i < roundedEnd; i+=4) {    int k1=(data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16)| (data[i + 3] << 24);    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;    h1=(h1 << 13) | (h1 >>> 19);    h1=h1 * 5 + 0xe6546b64;  }  int k1=0;switch (len & 0x03) {case 3:    k1=(data[roundedEnd + 2] & 0xff) << 16;case 2:  k1|=(data[roundedEnd + 1] & 0xff) << 8;case 1:k1|=(data[roundedEnd] & 0xff);k1*=c1;k1=(k1 << 15) | (k1 >>> 17);k1*=c2;h1^=k1;}h1^=len;h1^=h1 >>> 16;h1*=0x85ebca6b;h1^=h1 >>> 13;h1*=0xc2b2ae35;h1^=h1 >>> 16;return h1;}  }
class C{  public ConditionIn(Database database,Expression left,ArrayList<Expression> values){  this.database=database;  this.left=left;  this.valueList=values;}  }
class C{  public Builder resourceServers(List<String> resourceServers){  this.resourceServers=resourceServers;  return this;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addViewOnShadow(View view){  eraseViewIfNeeded(shadowView);  shadowView.addView(view);}  }
class C{  public static void UF6(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double prod1=1.0;  double prod2=1.0;  double yj;  double hj;  double pj;  double N=2.0;  double E=0.1;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    pj=Math.cos(20.0 * yj * PI / Math.sqrt(j + 0.0));    if (j % 2 == 0) {      sum2+=yj * yj;      prod2*=pj;      count2++;    } else {      sum1+=yj * yj;      prod1*=pj;      count1++;    }  }  hj=2.0 * (0.5 / N + E) * Math.sin(2.0 * N * PI* x[0]);  if (hj < 0.0) {    hj=0.0;  }  f[0]=x[0] + hj + 2.0 * (4.0 * sum1 - 2.0 * prod1 + 2.0) / (double)count1;  f[1]=1.0 - x[0] + hj + 2.0 * (4.0 * sum2 - 2.0 * prod2 + 2.0) / (double)count2;}  }
class C{  public void success(byte[] message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  public void onSaveInstanceState(Bundle outState){  if (!showsBottomSheet) {    outState.putBoolean(SAVED_SHOWS_BOTTOM_SHEET,false);  }  if (backStackId != -1) {    outState.putInt(SAVED_BACK_STACK_ID,backStackId);  }  if (bottomSheetLayoutId != View.NO_ID) {    outState.putInt(SAVED_BOTTOM_SHEET_LAYOUT_ID,bottomSheetLayoutId);  }}  }
class C{  public java.lang.StringBuffer insert(int offset,long l){  internal.insert(offset,l);  return this;}  }
class C{  public String toHtml(Node node,Appendable appendable){  NodeVisitor renderer=createRenderer(appendable);  node.visit(renderer);  return appendable.toString();}  }
class C{  private String encodeUri(String path){  return encodeUri ? new GridUriDeploymentUriParser(path).parse() : path;}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public void addAvatar(String file,InstanceConfig config){  config.addCredentials(this);  POSTIMAGE(this.url + "/add-avatar",file,"image.jpg",config.toXML());}  }
class C{  public void registerNewSearcherListener(SolrEventListener listener){  newSearcherListeners.add(listener);}  }
class C{  public Period plusYears(int years){  if (years == 0) {    return this;  }  int[] values=getValues();  getPeriodType().addIndexedField(this,PeriodType.YEAR_INDEX,values,years);  return new Period(values,getPeriodType());}  }
class C{  private boolean mirrorIsPausable(List<BlockMirror> mirrorList){  for (  BlockMirror mirror : mirrorList) {    try {      boolean hasPausableMirror=mirror != null && mirror.getInactive() == false && !SynchronizationState.FRACTURED.toString().equals(mirror.getSyncState()) && !SynchronizationState.RESYNCHRONIZING.toString().equals(mirror.getSyncState());      if (hasPausableMirror) {        return hasPausableMirror;      }    } catch (    NumberFormatException nfe) {      _log.warn("Failed to parse sync state ({}) for mirror {}",mirror.getSyncState(),mirror.getId());    }  }  return false;}  }
class C{  private static Class<?> forName(String name) throws SuperReflectException {  try {    return Class.forName(name);  } catch (  Exception e) {    throw new SuperReflectException(e);  }}  }
class C{  public static Toast quickToast(Context context,String message){  return quickToast(context,message,false);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.209 -0400",hash_original_method="DCBEE465DD3926071830F127744C5E49",hash_generated_method="1C63B0B77DDC92AC97F47BC440ED9AC2") public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  public StunException(int id){  setID(id);}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void resume(){synchronized (threadRefs) {    for (    Thread thread : threads) {      thread.resume();    }  }synchronized (groups) {    for (    ThreadGroup group : groups) {      group.resume();    }  }}  }
class C{  @Override public void draw(Graphics2D g){  if (getEditor().getTool().supportsHandleInteraction()) {    if (getOwner().isTransformable()) {      drawRectangle(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.RESIZE_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.RESIZE_HANDLE_STROKE_COLOR));    } else {      drawRectangle(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_STROKE_COLOR));    }  } else {    drawRectangle(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.HANDLE_FILL_COLOR_DISABLED),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.HANDLE_STROKE_COLOR_DISABLED));  }}  }
class C{  public void appendPacket(Buffer otherBuffer){  byte[] newBuffer=new byte[limit - position + otherBuffer.limit];  System.arraycopy(buf,position,newBuffer,0,remaining());  System.arraycopy(otherBuffer.buf,0,newBuffer,limit - position,otherBuffer.limit);  buf=newBuffer;  limit=limit - position + otherBuffer.limit;  position=0;}  }
class C{  @Inject public N4JSEclipseCore(N4JSEclipseModel model){  this.model=model;}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrime1();  this.primeQ=key.getPrime2();  this.primeExponentP=key.getExponent1();  this.primeExponentQ=key.getExponent2();  this.crtCoefficient=key.getCoefficient();}  }
class C{  public static Pair<Point2D[],Point2D[]> calcCurveControlPoints(Point2D[] dataPoints){  Point2D[] firstControlPoints;  Point2D[] secondControlPoints;  int n=dataPoints.length - 1;  if (n == 1) {    firstControlPoints=new Point2D[1];    firstControlPoints[0]=new Point2D((2 * dataPoints[0].getX() + dataPoints[1].getX()) / 3,(2 * dataPoints[0].getY() + dataPoints[1].getY()) / 3);    secondControlPoints=new Point2D[1];    secondControlPoints[0]=new Point2D(2 * firstControlPoints[0].getX() - dataPoints[0].getX(),2 * firstControlPoints[0].getY() - dataPoints[0].getY());    return new Pair<Point2D[],Point2D[]>(firstControlPoints,secondControlPoints);  }  double[] rhs=new double[n];  for (int i=1; i < n - 1; ++i) {    rhs[i]=4 * dataPoints[i].getX() + 2 * dataPoints[i + 1].getX();  }  rhs[0]=dataPoints[0].getX() + 2 * dataPoints[1].getX();  rhs[n - 1]=(8 * dataPoints[n - 1].getX() + dataPoints[n].getX()) / 2.0;  double[] x=GetFirstControlPoints(rhs);  for (int i=1; i < n - 1; ++i) {    rhs[i]=4 * dataPoints[i].getY() + 2 * dataPoints[i + 1].getY();  }  rhs[0]=dataPoints[0].getY() + 2 * dataPoints[1].getY();  rhs[n - 1]=(8 * dataPoints[n - 1].getY() + dataPoints[n].getY()) / 2.0;  double[] y=GetFirstControlPoints(rhs);  firstControlPoints=new Point2D[n];  secondControlPoints=new Point2D[n];  for (int i=0; i < n; ++i) {    firstControlPoints[i]=new Point2D(x[i],y[i]);    if (i < n - 1) {      secondControlPoints[i]=new Point2D(2 * dataPoints[i + 1].getX() - x[i + 1],2 * dataPoints[i + 1].getY() - y[i + 1]);    } else {      secondControlPoints[i]=new Point2D((dataPoints[n].getX() + x[n - 1]) / 2,(dataPoints[n].getY() + y[n - 1]) / 2);    }  }  return new Pair<Point2D[],Point2D[]>(firstControlPoints,secondControlPoints);}  }
class C{  public List<IMessage> reverse(){  List<IMessage> messages=copy();  messages.sort(MessageComparator.DEFAULT);  return messages;}  }
class C{  @Override public Object score(AlignmentTemplate alTemp){  int idx=alTemp.getKey();  int idxF=alTemp.getFKey();  int idxE=alTemp.getEKey();  if (!(feCounts.contains(idx) && eCounts.contains(idxE) && fCounts.contains(idxF))) {    throw new RuntimeException("Unknown alignment template");  }  double pairCount=feCounts.count(idx);  double eCount=eCounts.count(idxE);  double fCount=fCounts.count(idxF);  double phi_f_e=pairCount * 1.0 / eCount;  double phi_e_f=pairCount * 1.0 / fCount;  if (phiFilter > phi_e_f)   return null;  double lex_f_e;  double lex_e_f;  if (ibmLexModel) {    lex_f_e=getIBMLexScore(alTemp);    lex_e_f=getIBMLexScoreInv(alTemp);  } else {    lex_f_e=getLexScore(alTemp);    lex_e_f=getLexScoreInv(alTemp);  }  if (lexFilter > lex_e_f)   return null;  if (PRINT_COUNTS) {    return new double[]{phi_f_e,lex_f_e,phi_e_f,lex_e_f,pairCount,eCount,fCount};  } else   if (onlyPhi) {    return new double[]{phi_f_e,phi_e_f};  } else {    return new double[]{phi_f_e,lex_f_e,phi_e_f,lex_e_f};  }}  }
class C{  public boolean isAttributeNameSpecified(){  if (userDefinedAttributeName == null) {    return false;  }  return !userDefinedAttributeName.equals(originalAttributeName);}  }
class C{  public static boolean isEmpty(final byte[] array){  return array == null || array.length == 0;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == REQUEST_CODE && resultCode == RESULT_OK) {    ArrayList<String> matches=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);    if (Config.IS_DEV_BUILD && matches.contains("hello")) {      Toast.makeText(this,"Hi!",Toast.LENGTH_LONG).show();    }  }  super.onActivityResult(requestCode,resultCode,data);}  }
class C{  public void factCheck(){  if (this.facts == null || this.getKind() == UseKind) {    return;  }  ;  for (int i=0; i < this.facts.length; i++) {    if ((this.facts[i].getKind() == OpApplKind) && (((OpApplNode)this.facts[i]).operator.getKind() != ThmOrAssumpDefKind)) {      errors.addError(this.facts[i].stn.getLocation(),"The only expression allowed as a fact in a HIDE " + "is \nthe name of a theorem, assumption, or step.");    }    ;  }}  }
class C{  public DocumentCharacterIterator(IDocument document,int first,int last) throws BadLocationException {  if (document == null)   throw new NullPointerException();  if (first < 0 || first > last)   throw new BadLocationException();  if (last > document.getLength()) {    throw new BadLocationException();  }  fDocument=document;  fFirst=first;  fLast=last;  fIndex=first;  invariant();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (codeLang_1: ");  result.append(codeLang_1);  result.append(')');  return result.toString();}  }
class C{  public Value readValue() throws IOException {  int type=readInt();switch (type) {case Value.NULL:    return ValueNull.INSTANCE;case Value.BYTES:  return ValueBytes.getNoCopy(readBytes());case Value.UUID:return ValueUuid.get(readLong(),readLong());case Value.JAVA_OBJECT:return ValueJavaObject.getNoCopy(null,readBytes(),session.getDataHandler());case Value.BOOLEAN:return ValueBoolean.get(readBoolean());case Value.BYTE:return ValueByte.get(readByte());case Value.DATE:if (version >= Constants.TCP_PROTOCOL_VERSION_9) {return ValueDate.fromDateValue(readLong());} else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {return ValueDate.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readLong()));}return ValueDate.fromMillis(readLong());case Value.TIME:if (version >= Constants.TCP_PROTOCOL_VERSION_9) {return ValueTime.fromNanos(readLong());} else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {return ValueTime.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readLong()));}return ValueTime.fromMillis(readLong());case Value.TIMESTAMP:{if (version >= Constants.TCP_PROTOCOL_VERSION_9) {return ValueTimestamp.fromDateValueAndNanos(readLong(),readLong());} else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {return ValueTimestamp.fromMillisNanos(DateTimeUtils.getTimeUTCWithoutDst(readLong()),readInt() % 1000000);}return ValueTimestamp.fromMillisNanos(readLong(),readInt() % 1000000);}case Value.TIMESTAMP_TZ:{return ValueTimestampTimeZone.fromDateValueAndNanos(readLong(),readLong(),(short)readInt());}case Value.DECIMAL:return ValueDecimal.get(new BigDecimal(readString()));case Value.DOUBLE:return ValueDouble.get(readDouble());case Value.FLOAT:return ValueFloat.get(readFloat());case Value.INT:return ValueInt.get(readInt());case Value.LONG:return ValueLong.get(readLong());case Value.SHORT:return ValueShort.get((short)readInt());case Value.STRING:return ValueString.get(readString());case Value.STRING_IGNORECASE:return ValueStringIgnoreCase.get(readString());case Value.STRING_FIXED:return ValueStringFixed.get(readString());case Value.BLOB:{long length=readLong();if (version >= Constants.TCP_PROTOCOL_VERSION_11) {if (length == -1) {int tableId=readInt();long id=readLong();byte[] hmac;if (version >= Constants.TCP_PROTOCOL_VERSION_12) {hmac=readBytes();} else {hmac=null;}long precision=readLong();return ValueLobDb.create(Value.BLOB,session.getDataHandler(),tableId,id,hmac,precision);}}Value v=session.getDataHandler().getLobStorage().createBlob(in,length);int magic=readInt();if (magic != LOB_MAGIC) {throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"magic=" + magic);}return v;}case Value.CLOB:{long length=readLong();if (version >= Constants.TCP_PROTOCOL_VERSION_11) {if (length == -1) {int tableId=readInt();long id=readLong();byte[] hmac;if (version >= Constants.TCP_PROTOCOL_VERSION_12) {hmac=readBytes();} else {hmac=null;}long precision=readLong();return ValueLobDb.create(Value.CLOB,session.getDataHandler(),tableId,id,hmac,precision);}if (length < 0 || length > Integer.MAX_VALUE) {throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"length=" + length);}DataReader reader=new DataReader(in);int len=(int)length;char[] buff=new char[len];IOUtils.readFully(reader,buff,len);int magic=readInt();if (magic != LOB_MAGIC) {throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"magic=" + magic);}byte[] small=new String(buff).getBytes(Constants.UTF8);return ValueLobDb.createSmallLob(Value.CLOB,small,length);}Value v=session.getDataHandler().getLobStorage().createClob(new DataReader(in),length);int magic=readInt();if (magic != LOB_MAGIC) {throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"magic=" + magic);}return v;}case Value.ARRAY:{int len=readInt();Class<?> componentType=Object.class;if (len < 0) {len=-(len + 1);componentType=JdbcUtils.loadUserClass(readString());}Value[] list=new Value[len];for (int i=0; i < len; i++) {list[i]=readValue();}return ValueArray.get(componentType,list);}case Value.RESULT_SET:{SimpleResultSet rs=new SimpleResultSet();rs.setAutoClose(false);int columns=readInt();for (int i=0; i < columns; i++) {rs.addColumn(readString(),readInt(),readInt(),readInt());}while (true) {if (!readBoolean()) {break;}Object[] o=new Object[columns];for (int i=0; i < columns; i++) {o[i]=readValue().getObject();}rs.addRow(o);}return ValueResultSet.get(rs);}case Value.GEOMETRY:if (version >= Constants.TCP_PROTOCOL_VERSION_14) {return ValueGeometry.get(readBytes());}return ValueGeometry.get(readString());default :throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"type=" + type);}}  }
class C{  protected GithubUrl(){}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  public Builder vertexKeyTypes(final Map<String,String> vertexKeyTypes){  this.vertexKeyTypes=vertexKeyTypes;  return this;}  }
class C{  void acc_normalize(int length){  if (digits.length >= length) {    return;  }  while (digits.length < length) {    acc_expand();  }}  }
class C{  @Deprecated public List<Reference> list(){  return doList();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isUnderlineTriple(Node x,Node y,Node z){  return getGraph().isUnderlineTriple(x,y,z);}  }
class C{  public Listeners createListeners(){  listeners=new Listeners(this);  return listeners;}  }
class C{  public AngularObject addAndNotifyRemoteProcess(String name,Object o,String noteId,String paragraphId){  Gson gson=new Gson();  RemoteInterpreterProcess remoteInterpreterProcess=getRemoteInterpreterProcess();  if (!remoteInterpreterProcess.isRunning()) {    return super.add(name,o,noteId,paragraphId,true);  }  Client client=null;  boolean broken=false;  try {    client=remoteInterpreterProcess.getClient();    client.angularObjectAdd(name,noteId,paragraphId,gson.toJson(o));    return super.add(name,o,noteId,paragraphId,true);  } catch (  TException e) {    broken=true;    logger.error("Error",e);  }catch (  Exception e) {    logger.error("Error",e);  } finally {    if (client != null) {      remoteInterpreterProcess.releaseClient(client,broken);    }  }  return null;}  }
class C{  private void clearColumns(){  ((WListItemRenderer)getItemRenderer()).clearColumns();  getModel().setNoColumns(0);  return;}  }
class C{  protected void buoyancy(float[] buoy){  float avgTemperature=0;  for (int i=1, idx=1 + totalWidth, j=1; j <= height; ) {    avgTemperature+=d[idx];    if (i < width) {      i++;      idx++;    } else {      i=1;      j++;      idx+=3;    }  }  avgTemperature/=(width * height);  for (int i=1, idx=1 + totalWidth, j=1; j <= height; ) {    float currD=d[idx];    buoy[idx]=buoyancyA * currD - buoyancyB * (currD - avgTemperature);    if (i < width) {      i++;      idx++;    } else {      i=1;      j++;      idx+=3;    }  }}  }
class C{  public String[] readPassAndKeyFromEmail(String userName) throws MessagingException {  return readPassAndKeyFromEmail(true,userName);}  }
class C{  protected void clearOutEvents(){}  }
class C{  private void barAdd(){  MTreeNode nd=(MTreeNode)tree.getSelectionPath().getLastPathComponent();  if (barDBupdate(true,nd.getNode_ID()))   addToBar(nd,getParentToolBar(nd),false); else   if (DBException.isUniqueContraintError(CLogger.retrieveException()))   ADialog.error(0,this,"BookmarkExist",null);}  }
class C{  public int indexOfOutermostNode(){  if (outer == -1) {    Point2D.Double ctr=getCenter();    outer=0;    double dist=0;    for (int i=0, n=size(); i < n; i++) {      Node cp=get(i);      double d=Geom.length2(ctr.x,ctr.y,cp.x[0],cp.y[0]);      if (d > dist) {        dist=d;        outer=i;      }    }  }  return outer;}  }
class C{  public boolean isPanEnabled(){  return mPanEnabled;}  }
class C{  private boolean isImageBaseModified(){  final String imageBaseText=m_debuggerPanel.getImageBase();  if ("".equals(imageBaseText)) {    return true;  }  final CAddress enteredAddress=new CAddress(Convert.hexStringToLong(imageBaseText));  if (m_addressSpace == null) {    return !enteredAddress.equals(m_module.getConfiguration().getImageBase());  } else {    return !enteredAddress.equals(m_addressSpace.getContent().getImageBase(m_module));  }}  }
class C{  @BeforeClass public void startJetty() throws Exception {  this.server=new Server(0);  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.SESSIONS);  context.setContextPath("/");  context.addServlet(new ServletHolder(new MyServlet()),"/");  this.server.setHandler(context);  this.server.start();  this.port=((ServerConnector)server.getConnectors()[0]).getLocalPort();}  }
class C{  public void debug(Object message){}  }
class C{  protected String makeCachePath(URL url,String contentType){  if ("jar".equals(url.getProtocol()))   return this.makeJarURLCachePath(url,contentType);  return this.makeGenericURLCachePath(url,contentType);}  }
class C{  @Override public void haveSpace(String user,String name,long size) throws QuotaExceededException, StorageException {  long usedSpace=0;  for (  File file : getUserDirectory(user).listFiles()) {    if (!(file.getName().equals(name) || SYSTEM_FILES.contains(file.getName()))) {      usedSpace=usedSpace + file.length();    }  }  long quota=Long.MAX_VALUE;  File file=getQuotaFile(user);  if (!file.exists()) {    file=getQuotaFile();  }  if (file.exists()) {    Scanner scanner=null;    try {      scanner=new Scanner(file,UTF_8);      quota=scanner.nextLong();    } catch (    FileNotFoundException ex) {    }catch (    NoSuchElementException ex) {    } finally {      if (null != scanner) {        scanner.close();      }    }  }  if ((usedSpace + size) > quota) {    throw new QuotaExceededException(" Quota: " + quota + " Used: "+ usedSpace+ " Requested: "+ size);  }}  }
class C{  public Vertex nextMostConscious(Primitive type,Vertex ignoring,float min){  return nextMostConscious(this.network.createVertex(type),ignoring,min);}  }
class C{  private void fillPicks() throws Exception {  Language language=Language.getLoginLanguage();  MLookup orderL=MLookupFactory.get(Env.getCtx(),m_WindowNo,MColumn.getColumn_ID(MDDOrder.Table_Name,MDDOrder.COLUMNNAME_DD_Order_ID),DisplayType.Search,language,MDDOrder.COLUMNNAME_DD_Order_ID,0,false,"DocStatus='CO' AND IsInTransit='Y'");  fOrder=new VLookup(MDDOrder.COLUMNNAME_DD_Order_ID,true,false,true,orderL);  lOrder.setText(Msg.translate(Env.getCtx(),MDDOrder.COLUMNNAME_DD_Order_ID));  fOrder.addVetoableChangeListener(this);  Timestamp today=new Timestamp(System.currentTimeMillis());  m_MovementDate=today;  fMovementDate.setValue(today);  fMovementDate.addVetoableChangeListener(this);}  }
class C{  @Override public <T>T instance(Key<T> key){  Objects.requireNonNull(key);  Class<T> type=(Class)key.rawClass();  if (type.equals(Provider.class)) {    TypeRef typeRef=TypeRef.of(key.type());    TypeRef param=typeRef.param(0);    return (T)provider(Key.of(param.type()));  }  Provider<T> provider=provider(key);  if (provider != null) {    return provider.get();  } else {    return null;  }}  }
class C{  public void remove(symbol_set other) throws internal_error {  not_null(other);  for (Enumeration e=other.all(); e.hasMoreElements(); )   remove((symbol)e.nextElement());}  }
class C{  public GroupSizeFunction(String group){  super(group);}  }
class C{  public static boolean isPresent(){  return m_Present;}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  public String toFormattedString(){  return "2D memory copy setup:\n    " + createString("\n    ");}  }
class C{  public void configureManagers(){  jmri.InstanceManager.setProgrammerManager(getProgrammerManager());}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.098 -0500",hash_original_method="336EB9AA03C5B902D3CE726BD69F433F",hash_generated_method="0687F2D6ADC2467547D72E32B4897227") @Override public void flush(){}  }
class C{  public void append(CharSequence s){  text.append(s);}  }
class C{  public static boolean testSaveLocationExists(){  String sDCardStatus=Environment.getExternalStorageState();  boolean status;  if (sDCardStatus.equals(Environment.MEDIA_MOUNTED)) {    status=true;  } else {    status=false;  }  return status;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.069 -0500",hash_original_method="17D65811F27D632AD8074884F8FAAE6B",hash_generated_method="1E8A2A076D95CC120933A0AE6B79F807") public static void sendWAIT(int reason){  byte[] data=new byte[]{(byte)reason};  Chunk waitChunk=new Chunk(CHUNK_WAIT,data,0,1);  DdmServer.sendChunk(waitChunk);}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();synchronized (bcsListeners) {    serialize(oos,bcsListeners);  }}  }
class C{  private void handleExecException(Exception e) throws SQLException {  log.debug("Handling Exception from Statement method.",e);  Connection c=delegate.getConnection().unwrap(Connection.class);  if (c.isClosed()) {    return;  }  try {    log.debug("Issuing rollback on connection.");    c.rollback();  } catch (  SQLException sqe) {    log.error("Transaction roll back threw exception.",sqe);  } finally {    c.close();  }}  }
class C{  public static void main(String[] args){  try {    java.net.URL url=new java.net.URL("http://cs.armstrong.edu/liang/data/Lincoln.txt");    int count=0;    Scanner input=new Scanner(url.openStream());    while (input.hasNext()) {      if (Character.isLetter((input.next()).charAt(0))) {        count++;      }    }    System.out.println("Number of words in President Abraham Lincoln's Gettysburg address: " + count);  } catch (  java.net.MalformedURLException ex) {    System.out.println("Invalid URL");  }catch (  java.io.IOException ex) {    System.out.println("I/0 Errors: no such file");  }}  }
class C{  public DriversView(DriverConfiguration driverConfig){  this.driverTableModel=new DriverTableModel(driverConfig);  initComponents();  setVisible(true);}  }
class C{  public static Bitmap decodeBitmapFromStream(Context context,Uri uri,int reqWidth,int reqHeight){  try {    InputStream input=context.getContentResolver().openInputStream(uri);    BitmapFactory.Options onlyBoundsOptions=new BitmapFactory.Options();    onlyBoundsOptions.inJustDecodeBounds=true;    BitmapFactory.decodeStream(input,null,onlyBoundsOptions);    if (input != null) {      input.close();    }    if ((onlyBoundsOptions.outWidth == -1) || (onlyBoundsOptions.outHeight == -1))     return null;    BitmapFactory.Options bitmapOptions=new BitmapFactory.Options();    bitmapOptions.inSampleSize=calculateInSampleSize(onlyBoundsOptions,reqWidth,reqHeight);    bitmapOptions.inDither=true;    bitmapOptions.inPreferredConfig=Bitmap.Config.ARGB_8888;    input=context.getContentResolver().openInputStream(uri);    Bitmap bitmap=BitmapFactory.decodeStream(input,null,bitmapOptions);    if (input != null) {      input.close();    }    return bitmap;  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  private void nextToken(){  nextToken(fPosition);}  }
class C{  private BitSet findPreviouslyDeadBlocks() throws DataflowAnalysisException, CFGBuilderException {  BitSet deadBlocks=new BitSet();  ValueNumberDataflow vnaDataflow=classContext.getValueNumberDataflow(method);  for (Iterator<BasicBlock> i=vnaDataflow.getCFG().blockIterator(); i.hasNext(); ) {    BasicBlock block=i.next();    ValueNumberFrame vnaFrame=vnaDataflow.getStartFact(block);    if (vnaFrame.isTop()) {      deadBlocks.set(block.getLabel());    }  }  return deadBlocks;}  }
class C{  @Override public GamaCoordinateSequence create(final Coordinate[] coordinates){  return new GamaCoordinateSequence(coordinates);}  }
class C{  @Override public int hashCode(){  return Float.floatToIntBits(getBoost()) ^ slop ^ termArraysHashCode()^ positions.hashCode()^ 0x4AC65113;}  }
class C{  public static void applyProxyConfig(final ISettingChangeEvent event){  if (event.get(LSettings.ENABLE_NETWORK_PROXY)) {    System.setProperty("http.proxyHost",event.get(LSettings.HTTP_PROXY_HOST));    System.setProperty("http.proxyPort",event.get(LSettings.HTTP_PROXY_PORT).toString());    System.setProperty("https.proxyHost",event.get(LSettings.HTTPS_PROXY_HOST));    System.setProperty("https.proxyPort",event.get(LSettings.HTTPS_PROXY_PORT).toString());    System.setProperty("socksProxyHost",event.get(LSettings.SOCKS_PROXY_HOST));    System.setProperty("socksProxyPort",event.get(LSettings.SOCKS_PROXY_PORT).toString());  } else {    System.setProperty("http.proxyHost","");    System.setProperty("http.proxyPort","");    System.setProperty("https.proxyHost","");    System.setProperty("https.proxyPort","");    System.setProperty("socksProxyHost","");    System.setProperty("socksProxyPort","");  }}  }
class C{  public GameDownloadPanel(GameSettingsPanel gsp){  initComponents();  this.gsp=gsp;}  }
class C{  public void testPartitionedLoadFromClient() throws Exception {  cacheMode=CacheMode.PARTITIONED;  factory=new Factory3();  startGrids(2);  Ignite client=startGrid("client-1");  IgniteCache cache=client.cache(CACHE_NAME);  cache.loadCache(null);  assertEquals(0,cache.localSize(CachePeekMode.ALL));  assertEquals(10,grid(0).cache(CACHE_NAME).localSize(CachePeekMode.ALL));  assertEquals(10,grid(1).cache(CACHE_NAME).localSize(CachePeekMode.ALL));  assert !loadedFromClient : "Loaded data from client!";}  }
class C{  private Screen packScreen(Cursor c){  Screen screen=new Screen();  screen.id=c.getLong(ID_INDEX);  screen.rank=c.getInt(SCREEN_RANK_INDEX);  return screen;}  }
class C{  public void pause(){  play=false;}  }
class C{  public int hashCode(){  if (!isHashValueSet) {    hashValue=super.hashCode();    isHashValueSet=true;  }  return hashValue;}  }
class C{  public void afterRegionClear(RegionEvent event){}  }
class C{  public void addSocket(IceSocketWrapper sock){  netAccessManager.addSocket(sock);}  }
class C{  private void updateButtonStates(){  if (linesList.getSelectedValues().length == 0) {    deleteSelectedLinesButton.setEnabled(false);    modifySelectedLineButton.setEnabled(false);    return;  } else   if (linesList.getSelectedValues().length == 1) {    deleteSelectedLinesButton.setEnabled(true);    modifySelectedLineButton.setEnabled(true);  } else   if (linesList.getSelectedValues().length > 1) {    deleteSelectedLinesButton.setEnabled(true);    modifySelectedLineButton.setEnabled(false);  }}  }
class C{  public static void main(String[] args){  final int NUMBER_OF_PENTAGONALS=100;  final int NUMBER_PER_LINE=10;  System.out.println("The first 100 pentagonal numbers, ten per line: ");  for (int i=1; i <= NUMBER_OF_PENTAGONALS; i++) {    if (i % NUMBER_PER_LINE == 0)     System.out.printf("%7d\n",getPentagonalNumber(i)); else     System.out.printf("%7d",getPentagonalNumber(i));  }}  }
class C{  @Override public String id(){  return resourcePoolId;}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean xslAttribute) throws SAXException {  if (m_elemContext.m_startTagOpen) {    boolean was_added=addAttributeAlways(uri,localName,rawName,type,value,xslAttribute);    if (was_added && !xslAttribute && !rawName.startsWith("xmlns")) {      String prefixUsed=ensureAttributesNamespaceIsDeclared(uri,localName,rawName);      if (prefixUsed != null && rawName != null && !rawName.startsWith(prefixUsed)) {        rawName=prefixUsed + ":" + localName;      }    }    addAttributeAlways(uri,localName,rawName,type,value,xslAttribute);  } else {    String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_ATTRIBUTE_POSITION,new Object[]{localName});    try {      Transformer tran=super.getTransformer();      ErrorListener errHandler=tran.getErrorListener();      if (null != errHandler && m_sourceLocator != null)       errHandler.warning(new TransformerException(msg,m_sourceLocator)); else       System.out.println(msg);    } catch (    TransformerException e) {      SAXException se=new SAXException(e);      throw se;    }  }}  }
class C{  public boolean waitForPreviousCompletion(){synchronized (this.completionGuard) {    if (!this.completionStarted) {      return false;    }    while (this.commitMessage == null && !this.closed) {      if (logger.isDebugEnabled()) {        logger.debug("Waiting for previous completion for transaction {}",getTransactionId());      }      try {        this.completionGuard.wait();      } catch (      InterruptedException e) {        this.proxy.getCache().getCancelCriterion().checkCancelInProgress(e);        Thread.currentThread().interrupt();        return true;      }    }  }  return true;}  }
class C{  public static Discretization discretize(double[] _data,double[] cutoffs,String variableName,List<String> categories){  if (cutoffs == null) {    throw new NullPointerException();  }  for (int i=0; i < cutoffs.length - 1; i++) {    if (!(cutoffs[i] <= cutoffs[i + 1])) {      throw new NullPointerException("Cutoffs must be in nondecreasing order.");    }  }  if (variableName == null) {    throw new NullPointerException();  }  int numCategories=cutoffs.length + 1;  if (categories != null && categories.size() != numCategories) {    throw new IllegalArgumentException("If specified, the list of " + "categories names must be one longer than the length of " + "the cutoffs array.");  }  DiscreteVariable variable;  if (categories == null) {    variable=new DiscreteVariable(variableName,numCategories);  } else {    variable=new DiscreteVariable(variableName,categories);  }  int[] discreteData=new int[_data.length];  loop:   for (int i=0; i < _data.length; i++) {    if (Double.isNaN(_data[i])) {      discreteData[i]=DiscreteVariable.MISSING_VALUE;      continue;    }    for (int j=0; j < cutoffs.length; j++) {      if (_data[i] > Double.NEGATIVE_INFINITY && _data[i] < Double.POSITIVE_INFINITY && _data[i] < cutoffs[j]) {        discreteData[i]=j;        continue loop;      }    }    discreteData[i]=cutoffs.length;  }  return new Discretization(variable,discreteData);}  }
class C{  public static String normalizeWwn(String wwn){  wwn=StringUtils.lowerCase(wwn);  wwn=StringUtils.replace(wwn,":","");  wwn=StringUtils.leftPad(wwn,16,'0');  return wwn;}  }
class C{  public CMSSignedData generate(String eContentType,CMSProcessable content,boolean encapsulate,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return generate(eContentType,content,encapsulate,CMSUtils.getProvider(sigProvider),true);}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,byte[][] arrays,int nbatches) throws Exception {  int ncycles=arrays.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(arrays[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  private Attribute findNextUndeclaredAttribute(){  if (attributeIterator != null) {    while (attributeIterator.hasNext()) {      Entry<QName,Attribute> entry=attributeIterator.next();      Attribute attribute=entry.getValue();      if (isUndeclared(attribute.getAttributeKey())) {        return entry.getValue();      }    }    attributeIterator=null;  }  mode=metadataIterator != null && metadataIterator.hasNext() ? Mode.DECLARED : Mode.DONE;  return null;}  }
class C{  @Override public Object remove(Object key){  throw new UnsupportedOperationException("ProtectedProperties cannot be modified!");}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public static boolean streamReadBoolean(ActiveMQBuffer buff){  byte type=buff.readByte();switch (type) {case DataConstants.BOOLEAN:    return buff.readBoolean();case DataConstants.STRING:  String s=buff.readNullableString();return Boolean.valueOf(s);default :throw new IllegalStateException("Invalid conversion, type byte was " + type);}}  }
class C{  @Override boolean isActive(){  return true;}  }
class C{  @UninterruptibleNoWarn private AddressArray growReferenceTable(){  int newLength=STRESS ? references.length() + 1 : (int)(references.length() * GROWTH_FACTOR);  if (TRACE)   VM.sysWriteln("Expanding reference type table ",semanticsStr," to ",newLength);  AddressArray newReferences=AddressArray.create(newLength);  for (int i=0; i < references.length(); i++)   newReferences.set(i,references.get(i));  return newReferences;}  }
class C{  private boolean isHardcodedFilenameString(String string){  if (string == null) {    return false;  }  if (string.indexOf((int)'/') == -1 && string.indexOf((int)'\\') == -1) {    return false;  }  final char startChar=string.charAt(0);  if (Character.isLetter(startChar) && string.charAt(1) == ':') {    return true;  }  if (isXMLString(string)) {    return false;  }  if (isDateFormatString(string)) {    return false;  }  if (isURLString(string)) {    return false;  }  if (isMediaTypeString(string)) {    return false;  }  return !isTimeZoneIdString(string);}  }
class C{  public static TextSprite createTextSprite(String text,final Color textColor){  final GraphicsConfiguration gc=getGC();  FontMetrics metrics=graphics.getFontMetrics();  LineMetrics lm=metrics.getLineMetrics(text,graphics);  final Image image=gc.createCompatibleImage(metrics.stringWidth(text) + 2,Math.round(lm.getHeight()) + 2,TransparencyMode.TRANSPARENCY);  drawOutlineString(image,textColor,text,1,Math.round(lm.getAscent()));  return new TextSprite(image);}  }
class C{  public byte[] toByteArray(){  final int preLongs, outBytes;  final boolean empty=isEmpty();  final int activeItems=getNumActiveItems();  if (empty) {    preLongs=1;    outBytes=8;  } else {    preLongs=Family.FREQUENCY.getMaxPreLongs();    outBytes=(preLongs + 2 * activeItems) << 3;  }  final byte[] outArr=new byte[outBytes];  final Memory mem=new NativeMemory(outArr);  long pre0=0L;  pre0=insertPreLongs(preLongs,pre0);  pre0=insertSerVer(SER_VER,pre0);  pre0=insertFamilyID(Family.FREQUENCY.getID(),pre0);  pre0=insertLgMaxMapSize(lgMaxMapSize,pre0);  pre0=insertLgCurMapSize(hashMap.getLgLength(),pre0);  pre0=(empty) ? insertFlags(EMPTY_FLAG_MASK,pre0) : insertFlags(0,pre0);  pre0=insertSerDeId(ARRAY_OF_LONGS_SERDE_ID,pre0);  if (empty) {    mem.putLong(0,pre0);  } else {    final long pre=0;    final long[] preArr=new long[preLongs];    preArr[0]=pre0;    preArr[1]=insertActiveItems(activeItems,pre);    preArr[2]=this.streamLength;    preArr[3]=this.offset;    mem.putLongArray(0,preArr,0,preLongs);    final int preBytes=preLongs << 3;    mem.putLongArray(preBytes,hashMap.getActiveValues(),0,activeItems);    mem.putLongArray(preBytes + (activeItems << 3),hashMap.getActiveKeys(),0,activeItems);  }  return outArr;}  }
class C{  public static String format(double[][] d,String pre,String pos,String csep,NumberFormat nf){  return d == null ? "null" : (d.length == 0) ? "" : formatTo(new StringBuilder(),d,pre,pos,csep,nf).toString();}  }
class C{  public PvXMLWriter(OutputStream oStream){  this();  setOutputStream(oStream);}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=execStatusDAO.totalRecordCount().intValue();    List<ExecStatus> execStatuses=new ArrayList<ExecStatus>();    List<com.wipro.ats.bdre.md.dao.jpa.ExecStatus> jpaExecStatuses=execStatusDAO.list(startPage,pageSize);    for (    com.wipro.ats.bdre.md.dao.jpa.ExecStatus execStatus : jpaExecStatuses) {      ExecStatus returnExecStatus=new ExecStatus();      returnExecStatus.setExecStateId(execStatus.getExecStateId());      returnExecStatus.setDescription(execStatus.getDescription());      returnExecStatus.setCounter(counter);      execStatuses.add(returnExecStatus);    }    restWrapper=new RestWrapper(execStatuses,RestWrapper.OK);    LOGGER.info("All records listed from ExecStatus by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private static String hextetsToIPv6String(int[] hextets){  StringBuilder buf=new StringBuilder(39);  boolean lastWasNumber=false;  for (int i=0; i < hextets.length; i++) {    boolean thisIsNumber=hextets[i] >= 0;    if (thisIsNumber) {      if (lastWasNumber) {        buf.append(':');      }      buf.append(Integer.toHexString(hextets[i]));    } else {      if (i == 0 || lastWasNumber) {        buf.append("::");      }    }    lastWasNumber=thisIsNumber;  }  return buf.toString();}  }
class C{  private void notifyNoActivity(){  logger.debug("No activity notified, sending enquireLink");  if (sessionContext().getSessionState().isBound()) {    enquireLinkSender.enquireLink();  }}  }
class C{  public void testUpdateThroughput() throws RepositoryException, IOException {  final IObjectManager om=new NanoSparqlObjectManager(m_repo.getRepositoryForDefaultNamespace(),m_namespace);  final ValueFactory vf=om.getValueFactory();  final int transCounter=om.beginNativeTransaction();  final URI name=vf.createURI("attr:/test#name");  final URI ni=vf.createURI("attr:/test#ni");  final URI age=vf.createURI("attr:/test#age");  final URI mob=vf.createURI("attr:/test#mobile");  final URI gender=vf.createURI("attr:/test#mail");  try {    for (int i=0; i < 10000; i++) {      final IGPO tst=om.createGPO();      tst.setValue(name,vf.createLiteral("Test" + i));    }    final long start=System.currentTimeMillis();    final int creates=20000;    for (int i=0; i < creates; i++) {      final IGPO tst=om.createGPO();      tst.setValue(name,vf.createLiteral("Name" + i));      tst.setValue(ni,vf.createLiteral("NI" + i));      tst.setValue(age,vf.createLiteral(i));      tst.setValue(mob,vf.createLiteral("0123-" + i));      tst.setValue(gender,vf.createLiteral(1 % 3 == 0));    }    om.commitNativeTransaction(transCounter);    final long duration=(System.currentTimeMillis() - start);    if (log.isInfoEnabled()) {      log.info("Creation rate of " + (creates * 1000 / duration) + " objects per second");      log.info("Creation rate of " + (creates * 5 * 1000 / duration) + " statements per second");    }  } catch (  Throwable t) {    t.printStackTrace();    om.rollbackNativeTransaction();    throw new RuntimeException(t);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ATTRIBUTE___SIMPLE_ATTRIBUTE_1:    getSimpleAttribute_1().clear();  getSimpleAttribute_1().addAll((Collection<? extends SimpleAttribute_>)newValue);return;case UmplePackage.ATTRIBUTE___AUTOUNIQUE_ATTRIBUTE_1:getAutouniqueAttribute_1().clear();getAutouniqueAttribute_1().addAll((Collection<? extends AutouniqueAttribute_>)newValue);return;case UmplePackage.ATTRIBUTE___DERIVED_ATTRIBUTE_1:getDerivedAttribute_1().clear();getDerivedAttribute_1().addAll((Collection<? extends DerivedAttribute_>)newValue);return;case UmplePackage.ATTRIBUTE___COMPLEX_ATTRIBUTE_1:getComplexAttribute_1().clear();getComplexAttribute_1().addAll((Collection<? extends ComplexAttribute_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean stringIsNullOrEmpty(@Nullable CharSequence string){  return string == null || string.length() == 0;}  }
class C{  public ReferenceSyntaxException(String message){  super(message);}  }
class C{  public void onDidBeginCameraAnimation(PLIView view,Object sender,PLICamera camera,PLCameraAnimationType type){}  }
class C{  public void layoutContainer(Container parent){  JViewport vp=(JViewport)parent;  Component view=vp.getView();  Scrollable scrollableView=null;  if (view == null) {    return;  } else   if (view instanceof Scrollable) {    scrollableView=(Scrollable)view;  }  Insets insets=vp.getInsets();  Dimension viewPrefSize=view.getPreferredSize();  Dimension vpSize=vp.getSize();  Dimension extentSize=vp.toViewCoordinates(vpSize);  Dimension viewSize=new Dimension(viewPrefSize);  if (scrollableView != null) {    if (scrollableView.getScrollableTracksViewportWidth()) {      viewSize.width=vpSize.width;    }    if (scrollableView.getScrollableTracksViewportHeight()) {      viewSize.height=vpSize.height;    }  }  Point viewPosition=vp.getViewPosition();  if (scrollableView == null || vp.getParent() == null || vp.getParent().getComponentOrientation().isLeftToRight()) {    if ((viewPosition.x + extentSize.width) > viewSize.width) {      viewPosition.x=Math.max(0,viewSize.width - extentSize.width);    }  } else {    if (extentSize.width > viewSize.width) {      viewPosition.x=viewSize.width - extentSize.width;    } else {      viewPosition.x=Math.max(0,Math.min(viewSize.width - extentSize.width,viewPosition.x));    }  }  if ((viewPosition.y + extentSize.height) > viewSize.height) {    viewPosition.y=Math.max(0,viewSize.height - extentSize.height);  }  if (scrollableView == null) {    if ((viewPosition.x == 0) && (vpSize.width > viewPrefSize.width)) {      viewSize.width=vpSize.width;    }    if ((viewPosition.y == 0) && (vpSize.height > viewPrefSize.height)) {      viewSize.height=vpSize.height;    }  }  vp.setViewPosition(viewPosition);  vp.setViewSize(viewSize);}  }
class C{  public DtoCountryServiceImpl(final DtoFactory dtoFactory,final GenericService<Country> countryGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,countryGenericService,adaptersRepository);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  returnNumberToInterpolate=args[2].toLowerCase();  resolution=Double.parseDouble(args[3]);  excludeNeverClassified=Boolean.parseBoolean(args[4]);  excludeUnclassified=Boolean.parseBoolean(args[5]);  excludeBareGround=Boolean.parseBoolean(args[6]);  excludeLowVegetation=Boolean.parseBoolean(args[7]);  excludeMediumVegetation=Boolean.parseBoolean(args[8]);  excludeHighVegetation=Boolean.parseBoolean(args[9]);  excludeBuilding=Boolean.parseBoolean(args[10]);  excludeLowPoint=Boolean.parseBoolean(args[11]);  excludeModelKeyPoint=Boolean.parseBoolean(args[12]);  excludeWater=Boolean.parseBoolean(args[13]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    maxDist=(resolution * 2) * (resolution * 2);    PointRecord point;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < las.getNumPointRecords(); a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      str1="Data Scale:\tcontinuous";      out.println(str1);      str1="Preferred Palette:\t" + "spectrum.pal";      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      int numPointsToUse=10;      int numPointsInArea=0;      boolean flag=false;      int maxIteration=20;      int k=0;      double halfResolution=resolution / 2;      double area=Math.PI * maxDist;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          numPointsToUse=10;          flag=false;          k=0;          do {            k++;            results=pointsTree.nearestNeighbor(entry,numPointsToUse,true);            for (i=0; i < results.size(); i++) {              if (results.get(i).distance > maxDist) {                flag=true;              }            }            if (!flag) {              numPointsToUse=numPointsToUse * 2;            }          } while (!flag && k < maxIteration);          numPointsInArea=0;          for (i=0; i < results.size(); i++) {            if (results.get(i).distance <= maxDist) {              numPointsInArea++;            }          }          image.setValue(row,col,numPointsInArea / area);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Calculating point density:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ServiceInfo(String name,String title,String url,String version){  this.name=name;  this.title=title;  this.url=url;  this.version=version;}  }
class C{  public LoggingOutputStream(Logger cat,Level priority) throws IllegalArgumentException {  if (cat == null) {    throw new IllegalArgumentException("cat == null");  }  if (priority == null) {    throw new IllegalArgumentException("priority == null");  }  this.priority=priority;  category=cat;  bufLength=DEFAULT_BUFFER_LENGTH;  buf=new byte[DEFAULT_BUFFER_LENGTH];  count=0;}  }
class C{  public boolean containsAll(Collection<?> c){  if (!(c instanceof RegularEnumSet))   return super.containsAll(c);  RegularEnumSet<?> es=(RegularEnumSet<?>)c;  if (es.elementType != elementType)   return es.isEmpty();  return (es.elements & ~elements) == 0;}  }
class C{  protected CUdeviceptr(CUdeviceptr other,long byteOffset){  super(other,byteOffset);}  }
class C{  public void fireTaskCompleter(TaskCompleter completer,String stepId){  completer.ready(_dbClient);}  }
class C{  protected void prepareOutgoingSearchResponse(OutgoingSearchResponse message){}  }
class C{  public int simpleLogWarnings(Context cx,boolean logAsErrors){  CompilerHandler handler=cx.getHandler();  if (handler == null) {    handler=cx.statics.handler;  }  int count=0;  for (  TreeMap<Integer,Set<WarningRecord>> locMap : warningsByLoc.values()) {    for (    Set<WarningRecord> records : locMap.values()) {      for (      WarningRecord record : records) {        StringBuilder sb=new StringBuilder();        InputBuffer input=record.loc.input;        createErrorMessage(record,sb,record.code);        String source=input.getLineText(record.loc.pos);        if (logAsErrors) {          handler.error(input.origin,record.lineNum,record.colNum,sb.toString(),source,record.code);        } else {          handler.warning(input.origin,record.lineNum,record.colNum,sb.toString(),source,record.code);        }        count++;      }    }  }  return count;}  }
class C{  public void shutdown(){  if (running.compareAndSet(true,false)) {    logger.debug("Stopping the thread monitoring replica sets");    try {      this.interrupt();    } catch (    Throwable t) {      logger.warn("Unable to interrupt the thread monitoring replica sets",t);    }  }}  }
class C{  public boolean isExternal(){  return this.external;}  }
class C{  public void recordType(CtClass t){  dollarType=t;}  }
class C{  @Nullable public static <K,V>V addIfAbsent(Map<? super K,V> map,@Nullable K key,@Nullable Callable<? extends V> c){  A.notNull(map,"map");  try {    if (!map.containsKey(key)) {      V v=c == null ? null : c.call();      map.put(key,v);      return v;    } else     return map.get(key);  } catch (  Exception e) {    throw wrap(e);  }}  }
class C{  public WrappedByteBuffer slice(){  return WrappedByteBuffer.wrap(_buf.slice());}  }
class C{  public static String buildChatSDP(String ipAddress,int localPort,String protocol,String acceptTypes,String wrapperTypes,String setup,String path,String direction){  return buildSDP(ipAddress,localPort,protocol,acceptTypes,wrapperTypes,null,null,null,setup,path,direction,null,0);}  }
class C{  @SuppressFBWarnings("DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED") static Throwing.Function<String,String> createRule(String version,Project project) throws Exception {  Dependency googleJavaFormatJar=project.getDependencies().create(MAVEN_COORDINATE + version);  Configuration configuration=project.getConfigurations().detachedConfiguration(googleJavaFormatJar);  configuration.setDescription("google-java-format");  Set<File> jars;  try {    jars=configuration.resolve();  } catch (  Exception e) {    System.err.println("You probably need to add a repository containing the `google-java-format` artifact to your buildscript,");    System.err.println("e.g.: repositories { mavenCentral() }");    throw e;  }  URL[] jarUrls=jars.stream().map(Errors.rethrow().wrapFunction(null)).toArray(null);  URLClassLoader classLoader=new URLClassLoader(jarUrls);  Class<?> formatterClazz=classLoader.loadClass(FORMATTER_CLASS);  Object formatter=formatterClazz.getConstructor().newInstance();  Method method=formatterClazz.getMethod(FORMATTER_METHOD,String.class);  return null;}  }
class C{  private void prepareProtectionSystemData() throws Exception {  ProtectionSystem protectionSystem=new ProtectionSystem();  protectionSystemURI=URIUtil.createId(ProtectionSystem.class);  protectionSystem.setId(protectionSystemURI);  _dbClient.createObject(protectionSystem);}  }
class C{  public int next(){  if (index >= bits.length)   throw new NoSuchElementException();  long k=(save & (save - 1));  long diff=save ^ k;  save=k;  int result=(diff < 0) ? 64 * index + 63 : 64 * index + lookup[(int)(diff % 67)];  if (save == 0) {    index++;    while (index < bits.length && bits[index] == 0L)     index++;    if (index < bits.length)     save=bits[index];  }  return result;}  }
class C{  public final void clear(){  if (current_item > 0) {    for (int i=0; i < current_item; i++) {      items[i]=0f;    }  } else {    for (int i=0; i < max_size; i++) {      items[i]=0f;    }  }  current_item=0;}  }
class C{  public PreOrPostCondition_ createPreOrPostCondition_(){  PreOrPostCondition_Impl preOrPostCondition_=new PreOrPostCondition_Impl();  return preOrPostCondition_;}  }
class C{  static void checkMethodDesc(final String desc){  if (desc == null || desc.length() == 0) {    throw new IllegalArgumentException("Invalid method descriptor (must not be null or empty)");  }  if (desc.charAt(0) != '(' || desc.length() < 3) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }  int start=1;  if (desc.charAt(start) != ')') {    do {      if (desc.charAt(start) == 'V') {        throw new IllegalArgumentException("Invalid descriptor: " + desc);      }      start=checkDesc(desc,start,false);    } while (start < desc.length() && desc.charAt(start) != ')');  }  start=checkDesc(desc,start + 1,true);  if (start != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  private void writeParameter(String name,String value,StringBuilder sb){  sb.append(';').append(name).append('=').append(encodeParameterValue(value));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected RuleWildcardsPair matchWithRule(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  FirewallRule matched_rule=null;  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  WildcardsPair wildcards=new WildcardsPair();synchronized (rules) {    Iterator<FirewallRule> iter=this.rules.iterator();    FirewallRule rule=null;    while (iter.hasNext()) {      rule=iter.next();      if (rule.matchesFlow(sw.getId(),pi.getInPort(),eth,wildcards) == true) {        matched_rule=rule;        break;      }    }  }  RuleWildcardsPair ret=new RuleWildcardsPair();  ret.rule=matched_rule;  if (matched_rule == null || matched_rule.action == FirewallRule.FirewallAction.DENY) {    ret.wildcards=wildcards.drop;  } else {    ret.wildcards=wildcards.allow;  }  return ret;}  }
class C{  public void configure(){  XNetTrafficController packets=new ZTC640XNetPacketizer(new LenzCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setXNetTrafficController(packets);  new XNetInitializationManager(this.getSystemConnectionMemo());}  }
class C{  @Override public void projectClosed(){  CompilerManager.getInstance(_project).removeCompilationStatusListener(this);  setAnalyzeAfterAutomake(_project,false);}  }
class C{  @SideEffectFree public void exiting(@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable Object result){  throw new RuntimeException();}  }
class C{  @Nullable public static Class<?> classForName(@Nullable String cls,@Nullable Class<?> dflt,boolean includePrimitiveTypes){  Class<?> clazz;  if (cls == null)   clazz=dflt; else   if (!includePrimitiveTypes || cls.length() > 7 || (clazz=primitiveMap.get(cls)) == null) {    try {      clazz=Class.forName(cls);    } catch (    ClassNotFoundException ignore) {      clazz=dflt;    }  }  return clazz;}  }
class C{  public Server(){  this(NetworkConfig.DEFAULT_TCP_PORT,NetworkConfig.DEFAULT_UDP_PORT);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public void accept(final ClassVisitor cv){  String[] interfaces=new String[this.interfaces.size()];  this.interfaces.toArray(interfaces);  cv.visit(version,access,name,signature,superName,interfaces);  if (sourceFile != null || sourceDebug != null) {    cv.visitSource(sourceFile,sourceDebug);  }  if (outerClass != null) {    cv.visitOuterClass(outerClass,outerMethod,outerMethodDesc);  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    cv.visitAttribute(attrs.get(i));  }  for (i=0; i < innerClasses.size(); ++i) {    innerClasses.get(i).accept(cv);  }  for (i=0; i < fields.size(); ++i) {    fields.get(i).accept(cv);  }  for (i=0; i < methods.size(); ++i) {    methods.get(i).accept(cv);  }  cv.visitEnd();}  }
class C{  public static PartialMerkleTree buildFromLeaves(NetworkParameters params,byte[] includeBits,List<Sha256Hash> allLeafHashes){  int height=0;  while (getTreeWidth(allLeafHashes.size(),height) > 1)   height++;  List<Boolean> bitList=new ArrayList<Boolean>();  List<Sha256Hash> hashes=new ArrayList<Sha256Hash>();  traverseAndBuild(height,0,allLeafHashes,includeBits,bitList,hashes);  byte[] bits=new byte[(int)Math.ceil(bitList.size() / 8.0)];  for (int i=0; i < bitList.size(); i++)   if (bitList.get(i))   Utils.setBitLE(bits,i);  return new PartialMerkleTree(params,bits,hashes,allLeafHashes.size());}  }
class C{  public int compareTo(Point2D that){  if (this.y < that.y)   return -1;  if (this.y > that.y)   return +1;  if (this.x < that.x)   return -1;  if (this.x > that.x)   return +1;  return 0;}  }
class C{  private float caretToPointDistance(float[] caretInfo,float x,float y){  float lineDistance=isVerticalLine ? y : x;  float distanceOffBaseline=isVerticalLine ? -x : y;  return lineDistance - caretInfo[0] + (distanceOffBaseline * caretInfo[1]);}  }
class C{  public Iterable<PatchSetApproval> addApprovalsForNewPatchSet(ReviewDb db,ChangeUpdate update,LabelTypes labelTypes,PatchSet ps,ChangeControl changeCtl,Map<String,Short> approvals) throws OrmException {  Account.Id accountId=changeCtl.getUser().getAccountId();  checkArgument(accountId.equals(ps.getUploader()),"expected user %s to match patch set uploader %s",accountId,ps.getUploader());  if (approvals.isEmpty()) {    return Collections.emptyList();  }  checkApprovals(approvals,changeCtl);  List<PatchSetApproval> cells=new ArrayList<>(approvals.size());  Date ts=update.getWhen();  for (  Map.Entry<String,Short> vote : approvals.entrySet()) {    LabelType lt=labelTypes.byLabel(vote.getKey());    cells.add(newApproval(ps.getId(),changeCtl.getUser(),lt.getLabelId(),vote.getValue(),ts));  }  for (  PatchSetApproval psa : cells) {    update.putApproval(psa.getLabel(),psa.getValue());  }  db.patchSetApprovals().insert(cells);  return cells;}  }
class C{  public void updateUsers(GHPullRequest remotePr) throws IOException {  PagedIterable<GHIssueComment> ghIssueComments=remotePr.listComments();  for (  GHIssueComment comment : ghIssueComments) {    if (isNull(whitelistUserPattern)) {      whitelistUserPattern=Pattern.compile(whitelistUserMsg);    }  }}  }
class C{  public void sendSipBye(SipDialogPath dialog) throws PayloadException, NetworkException {  mSipInterface.sendSipBye(dialog);}  }
class C{  public boolean toggle(){  return toggle(screwState == 0);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static void xml(String xml){  printer.xml(xml);}  }
class C{  public String globalInfo(){  return "Reads a source that is in comma separated format (the default). " + "One can also change the column separator from comma to tab or " + "another character, specify string enclosures, specify whether a"+ "header row is present or not and specify which attributes are to be"+ "forced to be nominal or date. Can operate in batch or incremental mode. "+ "In batch mode, a buffer is used to process a fixed number of rows in "+ "memory at any one time and the data is dumped to a temporary file. This "+ "allows the legal values for nominal attributes to be automatically "+ "determined. The final ARFF file is produced in a second pass over the "+ "temporary file using the structure determined on the first pass. In "+ "incremental mode, the first buffer full of rows is used to determine "+ "the structure automatically. Following this all rows are read and output "+ "incrementally. An error will occur if a row containing nominal values not "+ "seen in the initial buffer is encountered. In this case, the size of the "+ "initial buffer can be increased, or the user can explicitly provide the "+ "legal values of all nominal attributes using the -L (setNominalLabelSpecs) "+ "option.";}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public LazyReact(final Executor executor){  this.executor=executor;  retrier=null;  async=true;  maxActive=MaxActive.IO;  streamOfFutures=false;  poolingActive=false;  autoOptimize=true;  autoMemoize=false;  memoizeCache=null;}  }
class C{  public ServerSocket socket() throws IOException {  final String port=this.map.get("port");  if (port == null) {    throw new IllegalArgumentException("--port must be specified");  }  final ServerSocket socket;  if (port.matches("\\d+")) {    socket=new ServerSocket(Integer.parseInt(port));  } else {    final File file=new File(port);    if (file.exists()) {      final Reader reader=new Utf8InputStreamReader(new FileInputStream(file));      try {        final char[] chars=new char[8];        final int length=reader.read(chars);        socket=new ServerSocket(Integer.parseInt(new String(chars,0,length)));      }  finally {        reader.close();      }    } else {      socket=new ServerSocket(0);      final Writer writer=new Utf8OutputStreamWriter(new FileOutputStream(file));      try {        writer.append(Integer.toString(socket.getLocalPort()));      }  finally {        writer.close();      }    }  }  return socket;}  }
class C{  public void removeSpec(final Spec spec,final IProgressMonitor aMonitor,boolean isForget){  this.lifecycleManager.sendEvent(new SpecEvent(spec,SpecEvent.TYPE_DELETE));  ResourceHelper.deleteProject(spec.getProject(),aMonitor,isForget);  specStorage.remove(spec.getName());  if (loadedSpec == spec) {    loadedSpec=null;  }}  }
class C{  public boolean tryToRestoreTabStateForId(int id){  if (!isSessionRestoreInProgress())   return false;  return mTabSaver.restoreTabStateForId(id);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.PROGRAM___ANONYMOUS_PROGRAM_11:    return ((InternalEList<?>)getAnonymous_program_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isAllocated(){  int res=this.getQtyAllocated().getMeasurable().compareTo(this.getQtyOrdered().getMeasurable());  return res < 0 ? true : false;}  }
class C{  public static <I,F,V>SimpleFastFeatureData<I,F,V> load(Stream<Tuple3<I,F,V>> tuples,FastItemIndex<I> iIndex,FastFeatureIndex<F> fIndex){  List<List<Tuple2io<V>>> iidxList=new ArrayList<>();  for (int iidx=0; iidx < iIndex.numItems(); iidx++) {    iidxList.add(null);  }  List<List<Tuple2io<V>>> fidxList=new ArrayList<>();  for (int fidx=0; fidx < fIndex.numFeatures(); fidx++) {    fidxList.add(null);  }  tuples.forEach(null);  return new SimpleFastFeatureData<>(iidxList,fidxList,iIndex,fIndex);}  }
class C{  public boolean equals(Object obj){  return (obj instanceof AllPermission);}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public void close(){  if (processorIterator != null && processorIterator instanceof ServiceIterator) {    ((ServiceIterator)processorIterator).close();  }}  }
class C{  protected String encodeCookie(SerializableHttpCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=37 * result + this.category.hashCode();  result=37 * result + this.categoryAnchor.hashCode();  long temp=Double.doubleToLongBits(this.value);  result=37 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public final CC gapY(String before,String after){  if (before != null)   ver.setGapBefore(ConstraintParser.parseBoundSize(before,true,false));  if (after != null)   ver.setGapAfter(ConstraintParser.parseBoundSize(after,true,false));  return this;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.390 -0500",hash_original_method="5E7EA6E1821501C5972B7C7CC639145B",hash_generated_method="D260892D300891C4FE19BE87A93B10A6") public ContentValues(){  mValues=new HashMap<String,Object>(8);}  }
class C{  private void populateTable(Connection connection,String sql,int maxLength) throws SQLException {  Random rnd=new Random();  PreparedStatement ps=connection.prepareStatement(sql);  try {    for (int i=0; i < RECORD_COUNT; i++) {      int length=rnd.nextInt(maxLength);      byte[] data=new byte[length];      rnd.nextBytes(data);      ps.setInt(1,i);      ps.setBytes(2,data);      ps.execute();    }  }  finally {    ps.close();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Set<URI> checkForActiveUserMappingUsingGroup(String domain,String label){  Set<URI> tenantsUsingUserGroup=null;  Map<URI,List<UserMapping>> mappings=getAllUserMappingsForDomain(domain);  if (CollectionUtils.isEmpty(mappings)) {    _log.debug("Could not find any user mappings from domain {}",domain);    return tenantsUsingUserGroup;  }  tenantsUsingUserGroup=new HashSet<URI>();  for (  Map.Entry<URI,List<BasePermissionsHelper.UserMapping>> entry : mappings.entrySet()) {    if (CollectionUtils.isEmpty(entry.getValue())) {      continue;    }    for (    UserMapping userMapping : entry.getValue()) {      if (userMapping == null || CollectionUtils.isEmpty(userMapping.getGroups())) {        continue;      }      for (      String group : userMapping.getGroups()) {        if (StringUtils.isNotBlank(group) && group.equalsIgnoreCase(label)) {          tenantsUsingUserGroup.add(entry.getKey());        }      }    }  }  return tenantsUsingUserGroup;}  }
class C{  public synchronized static ArrayList<MBeanServer> findMBeanServer(String agentId){  checkPermission("findMBeanServer");  if (agentId == null)   return new ArrayList<MBeanServer>(mBeanServerList);  ArrayList<MBeanServer> result=new ArrayList<MBeanServer>();  for (  MBeanServer mbs : mBeanServerList) {    String name=mBeanServerId(mbs);    if (agentId.equals(name))     result.add(mbs);  }  return result;}  }
class C{  public DividerBuilder erase(Direction direction){  return with(Divider.ERASER,direction);}  }
class C{  public boolean isSwitchableTo(SoftwareVersion to) throws IOException {  if (equals(to)) {    return false;  }  if (isNaturallySwitchableTo(to)) {    return true;  }  try {    if (compareTo(to) < 0) {      SoftwareVersionMetadata versionMetadata=SoftwareVersionMetadata.getInstance(to);      for (      SoftwareVersion v : versionMetadata.upgradeFromVersionsList) {        if (this.weakEquals(v)) {          return true;        }      }    } else {      SoftwareVersionMetadata versionMetadata=SoftwareVersionMetadata.getInstance(this);      for (      SoftwareVersion v : versionMetadata.downgradeToVersionsList) {        if (v.weakEquals(to)) {          return true;        }      }    }    return false;  } catch (  FileNotFoundException e) {    log.info("Version " + to + " not found on the system.  Switching to this version is not possible.");    return false;  }}  }
class C{  public MarkerAnnotation newMarkerAnnotation(){  MarkerAnnotation result=new MarkerAnnotation(this);  return result;}  }
class C{  @Override public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  m_NumClasses=instances.numClasses();  m_Instances=new Instances(instances);  if (m_UseDiscretization) {    m_Disc=new weka.filters.supervised.attribute.Discretize();    m_Disc.setInputFormat(m_Instances);    m_Instances=weka.filters.Filter.useFilter(m_Instances,m_Disc);  } else {    m_Disc=null;  }  m_Distributions=new Estimator[m_Instances.numAttributes() - 1][m_Instances.numClasses()];  m_ClassDistribution=new DiscreteEstimator(m_Instances.numClasses(),true);  int attIndex=0;  Enumeration<Attribute> enu=m_Instances.enumerateAttributes();  while (enu.hasMoreElements()) {    Attribute attribute=enu.nextElement();    double numPrecision=DEFAULT_NUM_PRECISION;    if (attribute.type() == Attribute.NUMERIC) {      m_Instances.sort(attribute);      if ((m_Instances.numInstances() > 0) && !m_Instances.instance(0).isMissing(attribute)) {        double lastVal=m_Instances.instance(0).value(attribute);        double currentVal, deltaSum=0;        int distinct=0;        for (int i=1; i < m_Instances.numInstances(); i++) {          Instance currentInst=m_Instances.instance(i);          if (currentInst.isMissing(attribute)) {            break;          }          currentVal=currentInst.value(attribute);          if (currentVal != lastVal) {            deltaSum+=currentVal - lastVal;            lastVal=currentVal;            distinct++;          }        }        if (distinct > 0) {          numPrecision=deltaSum / distinct;        }      }    }    for (int j=0; j < m_Instances.numClasses(); j++) {switch (attribute.type()) {case Attribute.NUMERIC:        if (m_UseKernelEstimator) {          m_Distributions[attIndex][j]=new KernelEstimator(numPrecision);        } else {          m_Distributions[attIndex][j]=new NormalEstimator(numPrecision);        }      break;case Attribute.NOMINAL:    m_Distributions[attIndex][j]=new DiscreteEstimator(attribute.numValues(),true);  break;default :throw new Exception("Attribute type unknown to NaiveBayes");}}attIndex++;}Enumeration<Instance> enumInsts=m_Instances.enumerateInstances();while (enumInsts.hasMoreElements()) {Instance instance=enumInsts.nextElement();updateClassifier(instance);}m_Instances=new Instances(m_Instances,0);}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  doReallyStop(false);  mFragments.dispatchDestroy();  if (mLoaderManager != null) {    mLoaderManager.doDestroy();  }}  }
class C{  @SuppressWarnings("BusyWait") private Collection<Integer> checkClientThrowsCorrectExceptionUponServerKilling() throws Exception {  ProcessStartResult srvStartRes=startSharedMemoryTestServer();  Collection<Integer> shmemIds=new ArrayList<>();  IpcSharedMemoryClientEndpoint client=null;  int interactionsCntBeforeSrvKilling=5;  int i=1;  try {    client=(IpcSharedMemoryClientEndpoint)IpcEndpointFactory.connectEndpoint("shmem:" + IpcSharedMemoryServerEndpoint.DFLT_IPC_PORT,log);    OutputStream os=client.outputStream();    shmemIds.add(client.inSpace().sharedMemoryId());    shmemIds.add(client.outSpace().sharedMemoryId());    for (; i < interactionsCntBeforeSrvKilling * 2; i++) {      info("Write: 123");      os.write(123);      Thread.sleep(RW_SLEEP_TIMEOUT);      if (i == interactionsCntBeforeSrvKilling) {        info("Going to kill server.");        srvStartRes.proc().kill();        info("Write 512k array to hang write procedure.");        os.write(new byte[512 * 1024]);      }    }    fail("Client should throw IOException upon server killing.");  } catch (  IOException e) {    assertTrue(i >= interactionsCntBeforeSrvKilling);    assertTrue(X.hasCause(e,IgniteCheckedException.class));    assertTrue(X.cause(e,IgniteCheckedException.class).getMessage().contains("Shared memory segment has been closed"));  } finally {    U.closeQuiet(client);  }  srvStartRes.isKilledLatch().await();  return shmemIds;}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public applet addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void remove(int priority){synchronized (lock) {    queue.remove(priority);    highestPriority=queue.isEmpty() ? Integer.MAX_VALUE : queue.peek();    lock.notifyAll();  }}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  public static void fillCol(Matrix A,int j,int from,int to,double val){  for (int i=from; i < to; i++)   A.set(i,j,val);}  }
class C{  public int search(Object o){  int i=lastIndexOf(o);  if (i >= 0) {    return size() - i;  }  return -1;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public int readLittleEndianInt24(){  return (data[position++] & 0xFF) | (data[position++] & 0xFF) << 8 | (data[position++] & 0xFF) << 16;}  }
class C{  public void insert(final String collectionName,final Map<String,Object> data,final ResultListener listener){  call("/" + collectionName + "/insert",new Object[]{data},listener);}  }
class C{  private void init(InetAddressAcl acl,int p,InetAddress a){  root=new SnmpMibTree();  root.setDefaultAgent(new SnmpErrorHandlerAgent());  startUpTime=java.lang.System.currentTimeMillis();  maxActiveClientCount=10;  pduFactory=new SnmpPduFactoryBER();  port=p;  ipacl=acl;  address=a;  if ((ipacl == null) && (useAcl == true))   throw new IllegalArgumentException("ACL object cannot be null");  threadService=new ThreadService(threadNumber);}  }
class C{  public int compareTo(XMLString xstr){  int len1=this.length();  int len2=xstr.length();  int n=Math.min(len1,len2);  int i=0;  int j=0;  while (n-- != 0) {    char c1=this.charAt(i);    char c2=xstr.charAt(j);    if (c1 != c2) {      return c1 - c2;    }    i++;    j++;  }  return len1 - len2;}  }
