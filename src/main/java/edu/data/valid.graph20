class C{  public void removeService(String name) throws Exception {  if (!(container instanceof Server)) {    throw new Exception();  }  ObjectName oname=new ObjectName(name);  Service service=getService(oname);  ((Server)container).removeService(service);}  }
class C{  @Override public int compare(BaseDNDescriptor desc1,BaseDNDescriptor desc2){  int result=0;  if (sortColumn == 0) {    result=compareDns(desc1,desc2);    if (result == 0) {      result=compareBackendIDs(desc1,desc2);    }    if (result == 0) {      result=compareEntries(desc1,desc2);    }    if (result == 0) {      result=compareRepl(desc1,desc2);    }    if (result == 0) {      result=compareMissingChanges(desc1,desc2);    }    if (result == 0) {      result=compareAgeOfOldestMissingChange(desc1,desc2);    }  }  if (sortColumn == 1) {    result=compareBackendIDs(desc1,desc2);    if (result == 0) {      result=compareDns(desc1,desc2);    }    if (result == 0) {      result=compareEntries(desc1,desc2);    }    if (result == 0) {      result=compareRepl(desc1,desc2);    }    if (result == 0) {      result=compareMissingChanges(desc1,desc2);    }    if (result == 0) {      result=compareAgeOfOldestMissingChange(desc1,desc2);    }  } else   if (sortColumn == 2) {    result=compareEntries(desc1,desc2);    if (result == 0) {      result=compareBackendIDs(desc1,desc2);    }    if (result == 0) {      result=compareDns(desc1,desc2);    }    if (result == 0) {      result=compareRepl(desc1,desc2);    }    if (result == 0) {      result=compareMissingChanges(desc1,desc2);    }    if (result == 0) {      result=compareAgeOfOldestMissingChange(desc1,desc2);    }  } else   if (sortColumn == 3) {    result=compareRepl(desc1,desc2);    if (result == 0) {      result=compareBackendIDs(desc1,desc2);    }    if (result == 0) {      result=compareDns(desc1,desc2);    }    if (result == 0) {      result=compareEntries(desc1,desc2);    }    if (result == 0) {      result=compareMissingChanges(desc1,desc2);    }    if (result == 0) {      result=compareAgeOfOldestMissingChange(desc1,desc2);    }  } else   if (sortColumn == 4) {    result=compareMissingChanges(desc1,desc2);    if (result == 0) {      result=compareBackendIDs(desc1,desc2);    }    if (result == 0) {      result=compareDns(desc1,desc2);    }    if (result == 0) {      result=compareEntries(desc1,desc2);    }    if (result == 0) {      result=compareRepl(desc1,desc2);    }    if (result == 0) {      result=compareAgeOfOldestMissingChange(desc1,desc2);    }  } else   if (sortColumn == 5) {    result=compareAgeOfOldestMissingChange(desc1,desc2);    if (result == 0) {      result=compareBackendIDs(desc1,desc2);    }    if (result == 0) {      result=compareDns(desc1,desc2);    }    if (result == 0) {      result=compareEntries(desc1,desc2);    }    if (result == 0) {      result=compareRepl(desc1,desc2);    }    if (result == 0) {      result=compareMissingChanges(desc1,desc2);    }  }  if (!sortAscending) {    result=-result;  }  return result;}  }
class C{  public StreamChunk(final GUID streamType,final BigInteger chunkLen){  super(GUID.GUID_STREAM,chunkLen);  assert GUID.GUID_AUDIOSTREAM.equals(streamType) || GUID.GUID_VIDEOSTREAM.equals(streamType);  this.type=streamType;}  }
class C{  private CartEvent wrapCartEvent(JsonObject raw){  return new CartEvent(raw).setUserId(raw.getString("user_id")).setProductId(raw.getString("product_id")).setCreatedAt(raw.getLong("created_at")).setCartEventType(CartEventType.valueOf(raw.getString("type")));}  }
class C{  public NightModeHelper(Activity activity,int theme,int defaultUiMode){  init(activity,theme,defaultUiMode);}  }
class C{  private static int bfsSearch(Class<?> current,Class<?> required){  Set<Class<?>> visited=new HashSet<>();  Queue<Class<?>> queue=new ArrayDeque<>();  List<Class<?>> ready=new LinkedList<>();  queue.add(current);  visited.add(current);  int count=0;  while (!queue.isEmpty() || !ready.isEmpty()) {    if (queue.isEmpty()) {      queue.addAll(ready);      ready.clear();      ++count;    }    Class<?> c=queue.remove();    if (c.equals(required))     return count;    if (c.getSuperclass() != null && !visited.contains(c.getSuperclass())) {      ready.add(c.getSuperclass());      visited.add(c.getSuperclass());    }    for (    Class<?> i : c.getInterfaces()) {      if (!visited.contains(i)) {        ready.add(i);        visited.add(i);      }    }  }  throw new LtBug(required + " is not assignable from " + current);}  }
class C{  public NSNumber(int i){  doubleValue=longValue=i;  type=INTEGER;}  }
class C{  public final void test_createSocket_05() throws Exception {  SocketFactory sf=SocketFactory.getDefault();  int sport=new ServerSocket(0).getLocalPort();  int[] invalidPorts={Integer.MIN_VALUE,-1,65536,Integer.MAX_VALUE};  Socket s=sf.createSocket(InetAddress.getLocalHost().getHostName(),sport,InetAddress.getLocalHost(),0);  assertNotNull(s);  assertTrue("1: Failed to create socket",s.getPort() == sport);  try {    sf.createSocket("bla-bla",sport,InetAddress.getLocalHost(),0);    fail("UnknownHostException wasn't thrown");  } catch (  UnknownHostException expected) {  }  for (int i=0; i < invalidPorts.length; i++) {    try {      sf.createSocket(InetAddress.getLocalHost().getHostName(),invalidPorts[i],InetAddress.getLocalHost(),0);      fail("IllegalArgumentException wasn't thrown for " + invalidPorts[i]);    } catch (    IllegalArgumentException expected) {    }    try {      sf.createSocket(InetAddress.getLocalHost().getHostName(),sport,InetAddress.getLocalHost(),invalidPorts[i]);      fail("IllegalArgumentException wasn't thrown for " + invalidPorts[i]);    } catch (    IllegalArgumentException expected) {    }  }  try {    sf.createSocket(InetAddress.getLocalHost().getHostName(),8081,InetAddress.getLocalHost(),8082);    fail("IOException wasn't thrown ...");  } catch (  IOException expected) {  }}  }
class C{  private static JsonValue toConfigExportJson(RecordProperties recordProperties){  JsonObject configExportProperties=JsonValueBuilder.jsonValue();  configExportProperties.put(RecordConstants.CONFIG_EXPORT_ENABLE_LABEL,recordProperties.configExportEnable);  if (recordProperties.configExportEnable) {    if (recordProperties.configExportSharePassword) {      configExportProperties.put(RecordConstants.CONFIG_EXPORT_PASSWORD_LABEL,recordProperties.configExportPassword);    } else {      configExportProperties.put(RecordConstants.CONFIG_EXPORT_PASSWORD_LABEL,NOT_SHARED_PASSWORD);    }    configExportProperties.put(RecordConstants.CONFIG_EXPORT_SHARE_PASSWORD_LABEL,recordProperties.configExportSharePassword);  }  return configExportProperties.build();}  }
class C{  public void testGcdFirstLonger(){  byte aBytes[]={-15,24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  byte bBytes[]={-12,1,0,0,0,23,44,55,66};  int aSign=1;  int bSign=1;  byte rBytes[]={7};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static RequirementsBuilder newInstance(String description){  return new RequirementsBuilder(BuilderType.JSON_SCHEMA,description);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.wedding.com/";  String qualifiedName;  Document doc;  boolean done;  Element newElement;  String charact;  java.util.List illegalQNames=new java.util.ArrayList();  illegalQNames.add("person:{");  illegalQNames.add("person:}");  illegalQNames.add("person:~");  illegalQNames.add("person:'");  illegalQNames.add("person:!");  illegalQNames.add("person:@");  illegalQNames.add("person:#");  illegalQNames.add("person:$");  illegalQNames.add("person:%");  illegalQNames.add("person:^");  illegalQNames.add("person:&");  illegalQNames.add("person:*");  illegalQNames.add("person:(");  illegalQNames.add("person:)");  illegalQNames.add("person:+");  illegalQNames.add("person:=");  illegalQNames.add("person:[");  illegalQNames.add("person:]");  illegalQNames.add("person:\\");  illegalQNames.add("person:/");  illegalQNames.add("person:;");  illegalQNames.add("person:`");  illegalQNames.add("person:<");  illegalQNames.add("person:>");  illegalQNames.add("person:,");  illegalQNames.add("person:a ");  illegalQNames.add("person:\"");  doc=(Document)load("staffNS",false);  for (int indexN10098=0; indexN10098 < illegalQNames.size(); indexN10098++) {    qualifiedName=(String)illegalQNames.get(indexN10098);{      boolean success=false;      try {        newElement=doc.createElementNS(namespaceURI,qualifiedName);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  @Override public boolean hasEntitlementDITs(){  try {    new ServiceSchemaManager(SERVICE_NAME,EntitlementUtils.getAdminToken());    return true;  } catch (  SMSException ex) {    return false;  }catch (  SSOException ex) {    return false;  }}  }
class C{  private static void writeContent(String fName,String content) throws IOException {  FileWriter fout=null;  try {    Files.write(Paths.get(fName),content.getBytes(UTF_8));    chmodFileReadOnly(new File(fName));  } catch (  IOException ioex) {    Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupServlet.writeContent: Exception in creating password files:",ioex);    throw ioex;  } finally {    if (fout != null) {      try {        fout.close();      } catch (      Exception ex) {      }    }  }}  }
class C{  public String toString(){  return this.encode();}  }
class C{  public Object clone(){  StyledEditorKit o=(StyledEditorKit)super.clone();  o.currentRun=o.currentParagraph=null;  o.createInputAttributeUpdated();  o.createInputAttributes();  return o;}  }
class C{  public static byte[] stringToByteArray(String input){  char chars[]=input.toCharArray();  byte bytes[]=new byte[chars.length];  for (int i=0; i < chars.length; i++) {    bytes[i]=(byte)chars[i];  }  return bytes;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns01.class,args);}  }
class C{  public VLVRequestControl(int beforeCount,int afterCount,ByteString greaterThanOrEqual){  this(false,beforeCount,afterCount,greaterThanOrEqual,null);}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#internalEntityDecl: " + name + ", "+ value);  if (null != m_declHandler) {    m_declHandler.internalEntityDecl(name,value);  }}  }
class C{  public PWResetServlet(){  super();}  }
class C{  private void readAllRecordsFiles(){  File logRecordDir=Constants.getRecordDir(mContext);  mLogRecordsFiles=logRecordDir.listFiles();  if (mLogRecordsFiles == null) {    mLogRecordsFiles=new File[0];  }}  }
class C{  public void stop(){}  }
class C{  @Deprecated public Operation(String op){  operation=op;}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public String toString(){  return toString(true,false);}  }
class C{  private static int min(int a,int b){  if (a < b)   return a;  return b;}  }
class C{  static TextLine obtain(){  TextLine tl;synchronized (sCached) {    for (int i=sCached.length; --i >= 0; ) {      if (sCached[i] != null) {        tl=sCached[i];        sCached[i]=null;        return tl;      }    }  }  tl=new TextLine();  if (DEBUG) {    Log.v("TLINE","new: " + tl);  }  return tl;}  }
class C{  public void reset(){  cache.clear();  cacheStart=0;  length=0L;}  }
class C{  @Override public int compareTo(EntryID that) throws ClassCastException {  final long result=this.id - that.id;  if (result < 0) {    return -1;  } else   if (result > 0) {    return 1;  }  return 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforenodename.class,args);}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  protected HashAttributeSet(Attribute attribute,Class<?> interfaceName){  if (interfaceName == null) {    throw new NullPointerException("null interface");  }  myInterface=interfaceName;  add(attribute);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.LocalizedNameType createLocalizedNameType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.LocalizedNameTypeImpl();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(who.getName());  sb.append(':');  for (  AclEntryPermission perm : perms) {    sb.append(perm.name());    sb.append('/');  }  sb.setLength(sb.length() - 1);  sb.append(':');  if (!flags.isEmpty()) {    for (    AclEntryFlag flag : flags) {      sb.append(flag.name());      sb.append('/');    }    sb.setLength(sb.length() - 1);    sb.append(':');  }  sb.append(type.name());  return sb.toString();}  }
class C{  @Override public void close() throws IOException {  try {    super.close();  }  finally {    if (closeBranch) {      branch.close();    }  }}  }
class C{  @Override public long end() throws IOException {  buffer.doWrite(END_CHUNK);  return 0;}  }
class C{  public BasicCredentials(ByteChunk input) throws IllegalArgumentException {  authorization=input;  initialOffset=input.getOffset();  parseMethod();  byte[] decoded=parseBase64();  parseCredentials(decoded);}  }
class C{  public static Foo findByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_Last(uuid,orderByComparator);}  }
class C{  public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  public boolean isEmailEnabled(){  return emailEnabled;}  }
class C{  public byte[] encode(byte[] bytes){  return encodeUrl(WWW_FORM_URL,bytes);}  }
class C{  public EasyBluetoothMod(final Context context){  this.context=context;}  }
class C{  public boolean isEqual(AttributeSet attr){  if (attr instanceof SmallAttributeSet) {    return attr == this;  }  return ((getAttributeCount() == attr.getAttributeCount()) && containsAttributes(attr));}  }
class C{  public PrintConversionEventImpl(int _severity,String _message,ValidationEventLocator _locator,Throwable _linkedException){  super(_severity,_message,_locator,_linkedException);}  }
class C{  public Observable<DriveId> createFile(DriveFolder folder,final Uri uri,String title,String mimeType){  try {    return createFile(folder,getContentResolver().openInputStream(uri),title,mimeType);  } catch (  FileNotFoundException e) {    return Observable.error(e);  }}  }
class C{  public TransformerException(String message,SourceLocator locator,Throwable e){  super(message);  this.containedException=e;  this.locator=locator;}  }
class C{  public static ArgumentException incompatiblePropertyModification(String arg){  LocalizableMessage msg=ERR_DSCFG_ERROR_INCOMPATIBLE_PROPERTY_MOD.get(arg);  return new ArgumentException(msg);}  }
class C{  static void checkAccess(final int access,final int possibleAccess){  if ((access & ~possibleAccess) != 0) {    throw new IllegalArgumentException("Invalid access flags: " + access);  }  int pub=(access & Opcodes.ACC_PUBLIC) == 0 ? 0 : 1;  int pri=(access & Opcodes.ACC_PRIVATE) == 0 ? 0 : 1;  int pro=(access & Opcodes.ACC_PROTECTED) == 0 ? 0 : 1;  if (pub + pri + pro > 1) {    throw new IllegalArgumentException("public private and protected are mutually exclusive: " + access);  }  int fin=(access & Opcodes.ACC_FINAL) == 0 ? 0 : 1;  int abs=(access & Opcodes.ACC_ABSTRACT) == 0 ? 0 : 1;  if (fin + abs > 1) {    throw new IllegalArgumentException("final and abstract are mutually exclusive: " + access);  }}  }
class C{  public NoSuchPageException(IOException cause){  this.cause=cause;}  }
class C{  public void adjust(ClearanceMatrix p_new_clearance_matrix){  int old_index=this.get_selected_class_index();  this.class_arr=new GuiClearanceClass[p_new_clearance_matrix.get_class_count()];  for (int i=0; i < this.class_arr.length; ++i) {    this.class_arr[i]=new GuiClearanceClass(p_new_clearance_matrix.get_name(i),i);  }  this.setModel(new DefaultComboBoxModel<GuiClearanceClass>(this.class_arr));  this.setSelectedIndex(Math.min(old_index,this.class_arr.length - 1));}  }
class C{  public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(16,8);  childData=child.getData();  assertEquals("characterdataDeleteDataMiddleAssert","1230 North Ave. Texas 98551",childData);}  }
class C{  public void split(){  if (!needsSplitting()) {    return;  }  Node parent=getParentNode();  String[] parts=getData().split("\\]\\]>");  parent.insertBefore(new CDATASectionImpl(document,parts[0] + "]]"),this);  for (int p=1; p < parts.length - 1; p++) {    parent.insertBefore(new CDATASectionImpl(document,">" + parts[p] + "]]"),this);  }  setData(">" + parts[parts.length - 1]);}  }
class C{  public void process(CommandManager mgr) throws CLIException {  if (argv.length == 0) {    UsageFormatter.getInstance().format(mgr);  } else   if (argv.length == 1) {    process(mgr,argv[0],null);  } else {    process(mgr,argv,null);  }}  }
class C{  public XMLString fixWhiteSpace(boolean trimHead,boolean trimTail,boolean doublePunctuationSpaces){  int len=this.length();  char[] buf=new char[len];  this.getChars(0,len,buf,0);  boolean edit=false;  int s;  for (s=0; s < len; s++) {    if (isSpace(buf[s])) {      break;    }  }  int d=s;  boolean pres=false;  for (; s < len; s++) {    char c=buf[s];    if (isSpace(c)) {      if (!pres) {        if (' ' != c) {          edit=true;        }        buf[d++]=' ';        if (doublePunctuationSpaces && (s != 0)) {          char prevChar=buf[s - 1];          if (!((prevChar == '.') || (prevChar == '!') || (prevChar == '?'))) {            pres=true;          }        } else {          pres=true;        }      } else {        edit=true;        pres=true;      }    } else {      buf[d++]=c;      pres=false;    }  }  if (trimTail && 1 <= d && ' ' == buf[d - 1]) {    edit=true;    d--;  }  int start=0;  if (trimHead && 0 < d && ' ' == buf[0]) {    edit=true;    start++;  }  XMLStringFactory xsf=XMLStringFactoryImpl.getFactory();  return edit ? xsf.newstr(new String(buf,start,d - start)) : this;}  }
class C{  public final void testGetMGFParameters02(){  PSSParameterSpec pssps=new PSSParameterSpec("SHA-1","MGF1",null,20,1);  assertNull(pssps.getMGFParameters());}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.CanonicalizationMethodElement createCanonicalizationMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.CanonicalizationMethodElementImpl();}  }
class C{  public org.omg.CORBA.TypeCode type(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("type",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    return $self.type();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public final void testGetEncoded04() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.algName0[i][0],EncryptedPrivateKeyInfoData.encryptedData);      byte[] ec1=epki.getEncoded();      byte[] ec2=epki.getEncoded();      byte[] ec3=epki.getEncoded();      assertNotSame(ec1,ec2);      assertNotSame(ec2,ec3);      assertNotSame(ec1,ec3);      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  private void toString(StringBuilder buffer){  toPOSIXString(this,buffer,"Owner=",", Group=",", Other=");}  }
class C{  protected void fireActionPerformed(String command){  Object[] listeners=listenerList.getListenerList();  long mostRecentEventTime=EventQueue.getMostRecentEventTime();  int modifiers=0;  AWTEvent currentEvent=EventQueue.getCurrentEvent();  if (currentEvent instanceof InputEvent) {    modifiers=((InputEvent)currentEvent).getModifiers();  } else   if (currentEvent instanceof ActionEvent) {    modifiers=((ActionEvent)currentEvent).getModifiers();  }  ActionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      if (e == null) {        e=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,command,mostRecentEventTime,modifiers);      }      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  public boolean isPureJAAS(){  return jaasCheck;}  }
class C{  public Pair<Boolean,LocalizableMessage> includeEntry(Entry entry) throws DirectoryException {  if (!excludeFilters.isEmpty()) {    for (    SearchFilter excludeFilter : excludeFilters) {      if (excludeFilter.matchesEntry(entry)) {        return Pair.of(FALSE,ERR_LDIF_SKIP_EXCLUDE_FILTER.get(entry.getName(),excludeFilter));      }    }  }  if (!includeFilters.isEmpty()) {    for (    SearchFilter includeFilter : includeFilters) {      if (includeFilter.matchesEntry(entry)) {        return Pair.of(TRUE,null);      }    }    return Pair.of(FALSE,ERR_LDIF_SKIP_NOT_IN_INCLUDED_FILTERS.get(entry.getName()));  }  return Pair.of(TRUE,null);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  private void stopMonitoringPublisher(){  final MonitoringPublisher thread=monitoringPublisher.get();  if (thread != null && monitoringPublisher.compareAndSet(thread,null)) {    thread.shutdown();    thread.waitForShutdown();  }}  }
class C{  public synchronized void removeServiced(String name){  serviced.remove(name);}  }
class C{  private void writeDataInChunks(FileChannel fileReadChannel,FileChannel fileWriteChannel) throws IOException, CannotWriteException {  long amountToBeWritten=fileReadChannel.size() - fileReadChannel.position();  long written=0;  long chunksize=TagOptionSingleton.getInstance().getWriteChunkSize();  long count=amountToBeWritten / chunksize;  long mod=amountToBeWritten % chunksize;  for (int i=0; i < count; i++) {    written+=fileWriteChannel.transferFrom(fileReadChannel,fileWriteChannel.position(),chunksize);    fileWriteChannel.position(fileWriteChannel.position() + chunksize);  }  written+=fileWriteChannel.transferFrom(fileReadChannel,fileWriteChannel.position(),mod);  if (written != amountToBeWritten) {    throw new CannotWriteException("Was meant to write " + amountToBeWritten + " bytes but only written "+ written+ " bytes");  }}  }
class C{  public static GenericExtendedResult copyOfGenericExtendedResult(final GenericExtendedResult result){  return new GenericExtendedResultImpl(result);}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {}  }
class C{  public R visitIPAddressMask(IPAddressMaskPropertyDefinition pd,AddressMask v,P p){  return visitUnknown(pd,v,p);}  }
class C{  public static BigInteger bigIntSqRootCeil(BigInteger x) throws IllegalArgumentException {  if (x.compareTo(BigInteger.ZERO) < 0) {    throw new IllegalArgumentException("Negative argument.");  }  if (x.equals(BigInteger.ZERO) || x.equals(BigInteger.ONE)) {    return x;  }  BigInteger two=BigInteger.valueOf(2L);  BigInteger y;  for (y=x.divide(two); y.compareTo(x.divide(y)) > 0; y=((x.divide(y)).add(y)).divide(two))   ;  if (x.compareTo(y.multiply(y)) == 0) {    return y;  } else {    return y.add(BigInteger.ONE);  }}  }
class C{  public static void main(String[] args){  LocalizableMessage description=INFO_BASE64_TOOL_DESCRIPTION.get();  SubCommandArgumentParser argParser=new SubCommandArgumentParser(Base64.class.getName(),description,false);  argParser.setShortToolDescription(REF_SHORT_DESC_BASE64.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  BooleanArgument showUsage=null;  StringArgument encodedData=null;  StringArgument encodedFile=null;  StringArgument rawData=null;  StringArgument rawFile=null;  StringArgument toEncodedFile=null;  StringArgument toRawFile=null;  SubCommand decodeSubCommand=null;  SubCommand encodeSubCommand=null;  try {    decodeSubCommand=new SubCommand(argParser,"decode",INFO_BASE64_DECODE_DESCRIPTION.get());    encodeSubCommand=new SubCommand(argParser,"encode",INFO_BASE64_ENCODE_DESCRIPTION.get());    encodedData=StringArgument.builder("encodedData").shortIdentifier('d').description(INFO_BASE64_ENCODED_DATA_DESCRIPTION.get()).valuePlaceholder(INFO_DATA_PLACEHOLDER.get()).buildAndAddToSubCommand(decodeSubCommand);    encodedFile=StringArgument.builder("encodedDataFile").shortIdentifier('f').description(INFO_BASE64_ENCODED_FILE_DESCRIPTION.get()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToSubCommand(decodeSubCommand);    toRawFile=StringArgument.builder("toRawFile").shortIdentifier('o').description(INFO_BASE64_TO_RAW_FILE_DESCRIPTION.get()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToSubCommand(decodeSubCommand);    rawData=StringArgument.builder("rawData").shortIdentifier('d').description(INFO_BASE64_RAW_DATA_DESCRIPTION.get()).valuePlaceholder(INFO_DATA_PLACEHOLDER.get()).buildAndAddToSubCommand(encodeSubCommand);    rawFile=StringArgument.builder("rawDataFile").shortIdentifier('f').description(INFO_BASE64_RAW_FILE_DESCRIPTION.get()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToSubCommand(encodeSubCommand);    toEncodedFile=StringArgument.builder("toEncodedFile").shortIdentifier('o').description(INFO_BASE64_TO_ENCODED_FILE_DESCRIPTION.get()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToSubCommand(encodeSubCommand);    ArrayList<SubCommand> subCommandList=new ArrayList<>(2);    subCommandList.add(decodeSubCommand);    subCommandList.add(encodeSubCommand);    showUsage=showUsageArgument();    argParser.addGlobalArgument(showUsage);    argParser.setUsageGroupArgument(showUsage,subCommandList);    argParser.setUsageArgument(showUsage,NullOutputStream.printStream());  } catch (  ArgumentException ae) {    System.err.println(ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    System.exit(1);  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(System.err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    System.exit(1);  }  SubCommand subCommand=argParser.getSubCommand();  if (argParser.isUsageArgumentPresent()) {    if (subCommand == null) {      System.out.println(argParser.getUsage());    } else {      final StringBuilder messageBuilder=new StringBuilder();      argParser.getSubCommandUsage(messageBuilder,subCommand);      System.out.println(messageBuilder.toString());    }    return;  }  if (argParser.isVersionArgumentPresent()) {    System.exit(0);  }  if (subCommand == null) {    System.err.println(argParser.getUsage());    System.exit(1);  }  if (subCommand.getName().equals(encodeSubCommand.getName())) {    byte[] dataToEncode=null;    if (rawData.isPresent()) {      try {        dataToEncode=rawData.getValue().getBytes("UTF-8");      } catch (      UnsupportedEncodingException ex) {        System.err.println(ERR_UNEXPECTED.get(ex));        System.exit(1);      }    } else {      try {        boolean shouldClose;        InputStream inputStream;        if (rawFile.isPresent()) {          inputStream=new FileInputStream(rawFile.getValue());          shouldClose=true;        } else {          inputStream=System.in;          shouldClose=false;        }        ByteArrayOutputStream baos=new ByteArrayOutputStream();        byte[] buffer=new byte[8192];        while (true) {          int bytesRead=inputStream.read(buffer);          if (bytesRead < 0) {            break;          } else {            baos.write(buffer,0,bytesRead);          }        }        if (shouldClose) {          inputStream.close();        }        dataToEncode=baos.toByteArray();      } catch (      Exception e) {        System.err.println(ERR_BASE64_CANNOT_READ_RAW_DATA.get(getExceptionMessage(e)));        System.exit(1);      }    }    String base64Data=encode(dataToEncode);    if (toEncodedFile.isPresent()) {      try {        BufferedWriter writer=new BufferedWriter(new FileWriter(toEncodedFile.getValue()));        writer.write(base64Data);        writer.newLine();        writer.close();      } catch (      Exception e) {        System.err.println(ERR_BASE64_CANNOT_WRITE_ENCODED_DATA.get(getExceptionMessage(e)));        System.exit(1);      }    } else {      System.out.println(base64Data);    }  } else   if (subCommand.getName().equals(decodeSubCommand.getName())) {    String dataToDecode=null;    if (encodedData.isPresent()) {      dataToDecode=encodedData.getValue();    } else {      try {        boolean shouldClose;        BufferedReader reader;        if (encodedFile.isPresent()) {          reader=new BufferedReader(new FileReader(encodedFile.getValue()));          shouldClose=true;        } else {          reader=new BufferedReader(new InputStreamReader(System.in));          shouldClose=false;        }        StringBuilder buffer=new StringBuilder();        while (true) {          String line=reader.readLine();          if (line == null) {            break;          }          StringTokenizer tokenizer=new StringTokenizer(line);          while (tokenizer.hasMoreTokens()) {            buffer.append(tokenizer.nextToken());          }        }        if (shouldClose) {          reader.close();        }        dataToDecode=buffer.toString();      } catch (      Exception e) {        System.err.println(ERR_BASE64_CANNOT_READ_ENCODED_DATA.get(getExceptionMessage(e)));        System.exit(1);      }    }    byte[] decodedData=null;    try {      decodedData=decode(dataToDecode);    } catch (    ParseException pe) {      System.err.println(pe.getMessage());      System.exit(1);    }    try {      if (toRawFile.isPresent()) {        FileOutputStream outputStream=new FileOutputStream(toRawFile.getValue());        outputStream.write(decodedData);        outputStream.close();      } else {        System.out.write(decodedData);        System.out.println();        System.out.flush();      }    } catch (    Exception e) {      System.err.println(ERR_BASE64_CANNOT_WRITE_RAW_DATA.get(getExceptionMessage(e)));      System.exit(1);    }  } else {    System.err.println(ERR_BASE64_UNKNOWN_SUBCOMMAND.get(subCommand.getName()));    System.exit(1);  }}  }
class C{  public static ByteString valueOfBase64(final String s){  if (s.length() == 0) {    return EMPTY;  }  return Base64.decode(s);}  }
class C{  public void initializeEntryCache() throws ConfigException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addEntryCacheAddListener(this);  rootConfiguration.addEntryCacheDeleteListener(this);  Entry entryCacheBase;  try {    DN configEntryDN=DN.valueOf(ConfigConstants.DN_ENTRY_CACHE_BASE);    entryCacheBase=DirectoryServer.getConfigEntry(configEntryDN);  } catch (  Exception e) {    logger.traceException(e);    logger.warn(WARN_CONFIG_ENTRYCACHE_NO_CONFIG_ENTRY);    return;  }  if (entryCacheBase == null) {    logger.error(WARN_CONFIG_ENTRYCACHE_NO_CONFIG_ENTRY);    return;  }  for (  String cacheName : rootConfiguration.listEntryCaches()) {    EntryCacheCfg configuration=rootConfiguration.getEntryCache(cacheName);    configuration.addChangeListener(this);    if (!cacheOrderMap.isEmpty() && cacheOrderMap.containsKey(configuration.getCacheLevel())) {      logger.error(ERR_CONFIG_ENTRYCACHE_CONFIG_LEVEL_NOT_ACCEPTABLE,configuration.dn(),configuration.getCacheLevel());      continue;    }    if (configuration.isEnabled()) {      String className=configuration.getJavaClass();      try {        loadAndInstallEntryCache(className,configuration);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());      }    }  }}  }
class C{  void reset(Component owner,Component contents,int ownerX,int ownerY){  super.reset(owner,contents,ownerX,ownerY);  Component component=getComponent();  component.setLocation(ownerX,ownerY);  rootPane.getContentPane().add(contents,BorderLayout.CENTER);  contents.invalidate();  component.validate();  pack();}  }
class C{  public final void init(AlgorithmParameterSpec genParamSpec,SecureRandom random) throws InvalidAlgorithmParameterException {  paramGenSpi.engineInit(genParamSpec,random);}  }
class C{  public void removeAccessibleSelection(int i){  JList.this.removeSelectionInterval(i,i);}  }
class C{  public static CancelExtendedRequest unmodifiableCancelExtendedRequest(final CancelExtendedRequest request){  if (request instanceof UnmodifiableCancelExtendedRequestImpl) {    return request;  }  return new UnmodifiableCancelExtendedRequestImpl(request);}  }
class C{  public MimeTypeParseException(String s){  super(s);}  }
class C{  public static void write(File file,NSObject root) throws IOException {  OutputStream out=new FileOutputStream(file);  write(out,root);  out.close();}  }
class C{  public void print(boolean bool){  print(String.valueOf(bool));}  }
class C{  @DataProvider(name="createSuperiorTestData") public Object[][] createSuperiorTestData(){  return new Object[][]{{"","",true},{"","dc=org",true},{"","dc=opendj,dc=org",true},{"","dc=foo,dc=opendj,dc=org",true},{"dc=org","",false},{"dc=org","dc=org",true},{"dc=org","dc=opendj,dc=org",true},{"dc=org","dc=foo,dc=opendj,dc=org",true},{"dc=opendj,dc=org","",false},{"dc=opendj,dc=org","dc=org",false},{"dc=opendj,dc=org","dc=opendj,dc=org",true},{"dc=opendj,dc=org","dc=foo,dc=opendj,dc=org",true},{"dc=foo,dc=opendj,dc=org","",false},{"dc=foo,dc=opendj,dc=org","dc=org",false},{"dc=foo,dc=opendj,dc=org","dc=opendj,dc=org",false},{"dc=foo,dc=opendj,dc=org","dc=foo,dc=opendj,dc=org",true},{"dc=org","dc=com",false},{"dc=opendj,dc=org","dc=foo,dc=org",false},{"dc=opendj,dc=org","dc=opendj,dc=com",false}};}  }
class C{  public Set<ResourceSetLabel> forResourceSet(String realm,String username,String resourceSetId,boolean includeResourceSets) throws ResourceException {  return query(realm,username,and(equality("objectClass",OBJECT_CLASS),equality(RESOURCE_SET_ATTR,resourceSetId)),includeResourceSets);}  }
class C{  public CacheEntry(Entry entry,String backendID,long entryID){  this.entry=entry;  this.backendID=backendID;  this.entryID=entryID;}  }
class C{  public TestAlertGenerator() throws Exception {  configEntryDN=DN.valueOf("cn=Test Alert Generator,cn=config");  alertType="org.opends.server.TestAlert";  alertDescription="This is a test alert.";}  }
class C{  public JMXProviderException(){}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public void addExtension(DERObjectIdentifier oid,boolean critical,byte[] value){  extGenerator.addExtension(new ASN1ObjectIdentifier(oid.getId()),critical,value);}  }
class C{  public NASClassAttribute(String theClass){  super(OctetUtils.toOctets(AttributeType.NAS_CLASS,theClass));  this.theClass=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  public ImageGraphicAttribute(Image image,int alignment,float originX,float originY){  super(alignment);  fImage=image;  fImageWidth=image.getWidth(null);  fImageHeight=image.getHeight(null);  fOriginX=originX;  fOriginY=originY;}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeVariables(this);}  }
class C{  public Session readSession(SessionID sessionID){  Reject.ifNull(sessionID);  return sessionTable.get(sessionID);}  }
class C{  public void printMultiLn(String s){  int index=0;  while ((index=s.indexOf('\n',index)) > -1) {    javaLine++;    index++;  }  writer.print(s);}  }
class C{  public PlaDelTriTriangle other_neighbour(PlaDelTriTriangle p_triangle){  PlaDelTriTriangle result;  if (p_triangle == left_triangle) {    result=right_triangle;  } else   if (p_triangle == right_triangle) {    result=left_triangle;  } else {    System.out.println("Edge.other_neighbour: inconsistant neigbour triangle");    result=null;  }  return result;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.writeObject(mySyntax);  s.writeInt(size());  Enumeration<String> comps=getAll();  while (comps.hasMoreElements()) {    s.writeObject(comps.nextElement());  }}  }
class C{  public boolean isWrapperFor(Class<?> interfaces) throws SQLException {  return interfaces.isInstance(this);}  }
class C{  public static void write_scope(DsnWriteScopeParameter p_par,int p_layer_no,boolean p_write_rule) throws java.io.IOException {  p_par.file.start_scope();  p_par.file.write("layer ");  BrdLayer board_layer=p_par.board.layer_structure.get(p_layer_no);  p_par.identifier_type.write(board_layer.name,p_par.file);  p_par.file.new_line();  p_par.file.write("(type ");  if (board_layer.is_signal)   p_par.file.write("signal)"); else   p_par.file.write("power)");  if (p_write_rule) {    DsnRule.write_default_rule(p_par,p_layer_no);  }  p_par.file.end_scope();}  }
class C{  public static void scan(final Class<? extends Annotation> clas,final String[] basePackage,final AnnotationHandler handler){  final ClassPathScanningCandidateComponentProvider scanner=new ClassPathScanningCandidateComponentProvider(false);  scanner.setResourceLoader(new PathMatchingResourcePatternResolver(Thread.currentThread().getContextClassLoader()));  scanner.addIncludeFilter(new AnnotationTypeFilter(clas));  for (  final String pck : basePackage) {    for (    final BeanDefinition bd : scanner.findCandidateComponents(pck)) {      handler.handleAnnotationFound(bd.getBeanClassName());    }  }}  }
class C{  public static void addEntry(Entry entry) throws Exception {  AddOperation addOperation=getRootConnection().processAdd(entry);  assertEquals(addOperation.getResultCode(),ResultCode.SUCCESS);}  }
class C{  public void removeAttributes(AttributeSet attr){  Enumeration names=attr.getAttributeNames();  while (names.hasMoreElements()) {    Object name=names.nextElement();    Object value=attr.getAttribute(name);    removeSearchAttribute(name,value);  }}  }
class C{  int divideOneWord(int divisor,MutableBigInteger quotient){  long divisorLong=divisor & LONG_MASK;  if (intLen == 1) {    long dividendValue=value[offset] & LONG_MASK;    int q=(int)(dividendValue / divisorLong);    int r=(int)(dividendValue - q * divisorLong);    quotient.value[0]=q;    quotient.intLen=(q == 0) ? 0 : 1;    quotient.offset=0;    return r;  }  if (quotient.value.length < intLen)   quotient.value=new int[intLen];  quotient.offset=0;  quotient.intLen=intLen;  int shift=Integer.numberOfLeadingZeros(divisor);  int rem=value[offset];  long remLong=rem & LONG_MASK;  if (remLong < divisorLong) {    quotient.value[0]=0;  } else {    quotient.value[0]=(int)(remLong / divisorLong);    rem=(int)(remLong - (quotient.value[0] * divisorLong));    remLong=rem & LONG_MASK;  }  int xlen=intLen;  while (--xlen > 0) {    long dividendEstimate=(remLong << 32) | (value[offset + intLen - xlen] & LONG_MASK);    int q;    if (dividendEstimate >= 0) {      q=(int)(dividendEstimate / divisorLong);      rem=(int)(dividendEstimate - q * divisorLong);    } else {      long tmp=divWord(dividendEstimate,divisor);      q=(int)(tmp & LONG_MASK);      rem=(int)(tmp >>> 32);    }    quotient.value[intLen - xlen]=q;    remLong=rem & LONG_MASK;  }  quotient.normalize();  if (shift > 0)   return rem % divisor; else   return rem;}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeStartSequence(OP_TYPE_COMPARE_REQUEST);  stream.writeOctetString(dn);  stream.writeStartSequence();  stream.writeOctetString(attributeType);  stream.writeOctetString(assertionValue);  stream.writeEndSequence();  stream.writeEndSequence();}  }
class C{  @SuppressWarnings("unused") public static double parseDouble(byte[] bytes){  return parseDouble(bytes,0,bytes.length);}  }
class C{  public static String printDateTime(java.util.Calendar val){  if (theConverter == null)   initConverter();  return theConverter.printDateTime(val);}  }
class C{  protected DataSource createDataSource() throws SQLException {  if (closed) {    throw new SQLException("Data source is closed");  }  if (dataSource != null) {    return dataSource;  }synchronized (this) {    if (dataSource != null) {      return dataSource;    }    jmxRegister();    final ConnectionFactory driverConnectionFactory=createConnectionFactory();    boolean success=false;    PoolableConnectionFactory poolableConnectionFactory;    try {      poolableConnectionFactory=createPoolableConnectionFactory(driverConnectionFactory);      poolableConnectionFactory.setPoolStatements(poolPreparedStatements);      poolableConnectionFactory.setMaxOpenPrepatedStatements(maxOpenPreparedStatements);      success=true;    } catch (    final SQLException se) {      throw se;    }catch (    final RuntimeException rte) {      throw rte;    }catch (    final Exception ex) {      throw new SQLException("Error creating connection factory",ex);    }    if (success) {      createConnectionPool(poolableConnectionFactory);    }    DataSource newDataSource;    success=false;    try {      newDataSource=createDataSourceInstance();      newDataSource.setLogWriter(logWriter);      success=true;    } catch (    final SQLException se) {      throw se;    }catch (    final RuntimeException rte) {      throw rte;    }catch (    final Exception ex) {      throw new SQLException("Error creating datasource",ex);    } finally {      if (!success) {        closeConnectionPool();      }    }    try {      for (int i=0; i < initialSize; i++) {        connectionPool.addObject();      }    } catch (    final Exception e) {      closeConnectionPool();      throw new SQLException("Error preloading the connection pool",e);    }    startPoolMaintenance();    dataSource=newDataSource;    return dataSource;  }}  }
class C{  public HeartbeatMsg(){}  }
class C{  public void updateBorder(){  boolean displayBorder=scroll.getVerticalScrollBar().isVisible() || scroll.getHorizontalScrollBar().isVisible();  if (displayBorder) {    scroll.setBorder(etchedBorder);  } else {    scroll.setBorder(emptyBorder);  }}  }
class C{  private static String rdocifyCloudMarkdownLinks(String comment){  StringBuffer sb=new StringBuffer();  Matcher m=CommentPatterns.CLOUD_LINK_PATTERN.matcher(comment);  if (!m.find()) {    return comment;  }  do {    String url="https://cloud.google.com" + m.group(2);    m.appendReplacement(sb,String.format("{%s}[%s]",m.group(1),url));  } while (m.find());  m.appendTail(sb);  return sb.toString();}  }
class C{  @Deprecated public static byte matchColor(int r,int g,int b){  return matchColor(new Color(r,g,b));}  }
class C{  void takeIndexWrapped(){  cycles++;  for (Node o=null, p=head; p != null; ) {    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.takeIndexWrapped()) {      p.clear();      p.next=null;      if (o == null)       head=next; else       o.next=next;    } else {      o=p;    }    p=next;  }  if (head == null)   itrs=null;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic128Sha256Rsa15Element createBasic128Sha256Rsa15Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic128Sha256Rsa15ElementImpl();}  }
class C{  protected void log(String s){  if (mLog) {    Logger.global.fine(s);  }}  }
class C{  static void usePreReadRequestControl(Connection connection) throws LdapException {  if (isSupported(PreReadRequestControl.OID)) {    final String dn="uid=bjensen,ou=People,dc=example,dc=com";    final ModifyRequest request=Requests.newModifyRequest(dn).addControl(PreReadRequestControl.newControl(true,"mail")).addModification(ModificationType.REPLACE,"mail","modified@example.com");    final Result result=connection.modify(request);    try {      final PreReadResponseControl control=result.getControl(PreReadResponseControl.DECODER,new DecodeOptions());      final Entry entry=control.getEntry();      final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);      writer.writeEntry(entry);      writer.close();    } catch (    final DecodeException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());    }catch (    final IOException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    }  } else {    System.err.println("PreReadRequestControl not supported");  }}  }
class C{  @Override public String toString(){  return filename + ": " + text;}  }
class C{  private static void createRealmAdminPolicy(PolicyManager policyManager,String orgDN,String orgID){  String classMethod="UpgradeUtils:createRealmAdminPolicy";  try {    String policyName=orgID + "^^RealmAdmin";    Policy realmPolicy=new Policy(policyName,null,false,true);    String resourceName="sms://*" + orgDN + "/*";    Rule rule=getRule(DELEGATION_SERVICE,resourceName);    if (rule != null) {      realmPolicy.addRule(rule);    }    String universalID=getUniversalID(orgDN,ORG_ADMIN_ROLE);    Subject subject=getSubject(policyManager,universalID);    if (subject != null) {      realmPolicy.addSubject(DELEGATION_SUBJECT,subject,false);    }    policyManager.addPolicy(realmPolicy);  } catch (  Exception e) {    debug.error(classMethod + "Error creating realm admin policy",e);  }}  }
class C{  @Override public void close() throws IOException {  closed=true;  def.end();  in.close();}  }
class C{  public void testIsNamespaceAware(){  try {    spf.setNamespaceAware(true);    assertTrue(spf.newSAXParser().isNamespaceAware());    spf.setNamespaceAware(false);    assertFalse(spf.newSAXParser().isNamespaceAware());  } catch (  Exception e) {    throw new RuntimeException("Unexpected exception",e);  }}  }
class C{  void writeExternal(DataOutput out) throws IOException {  Ser.writeEpochSec(toEpochSecond(),out);  Ser.writeOffset(offsetBefore,out);  Ser.writeOffset(offsetAfter,out);}  }
class C{  public static void switchSerializerIfHTML(TransformerImpl transformer,String ns,String localName) throws TransformerException {  if (null == transformer)   return;  if (((null == ns) || (ns.length() == 0)) && localName.equalsIgnoreCase("html")) {    if (null != transformer.getOutputPropertyNoDefault(OutputKeys.METHOD))     return;    Properties prevProperties=transformer.getOutputFormat().getProperties();    OutputProperties htmlOutputProperties=new OutputProperties(Method.HTML);    htmlOutputProperties.copyFrom(prevProperties,true);    Properties htmlProperties=htmlOutputProperties.getProperties();    try {      Serializer oldSerializer=null;      if (null != oldSerializer) {        Serializer serializer=SerializerFactory.getSerializer(htmlProperties);        Writer writer=oldSerializer.getWriter();        if (null != writer)         serializer.setWriter(writer); else {          OutputStream os=oldSerializer.getOutputStream();          if (null != os)           serializer.setOutputStream(os);        }        ContentHandler ch=serializer.asContentHandler();        transformer.setContentHandler(ch);      }    } catch (    java.io.IOException e) {      throw new TransformerException(e);    }  }}  }
class C{  boolean useRESTProtocol(){  return useRESTProtocolFlag;}  }
class C{  public void waitTransformThread() throws SAXException {  Thread transformThread=this.getTransformThread();  if (null != transformThread) {    try {      ThreadControllerWrapper.waitThread(transformThread,this);      if (!this.hasTransformThreadErrorCatcher()) {        Exception e=this.getExceptionThrown();        if (null != e) {          e.printStackTrace();          throw new org.xml.sax.SAXException(e);        }      }      this.setTransformThread(null);    } catch (    InterruptedException ie) {    }  }}  }
class C{  @Override public void close() throws StorageRuntimeException {  closeSilently(attrIndexMap.values());  closeSilently(vlvIndexMap.values());  config.removePluggableChangeListener(this);  config.removeBackendIndexAddListener(attributeIndexCfgManager);  config.removeBackendIndexDeleteListener(attributeIndexCfgManager);  config.removeBackendVLVIndexAddListener(vlvIndexCfgManager);  config.removeBackendVLVIndexDeleteListener(vlvIndexCfgManager);}  }
class C{  @Override public void OnRtcJoinMeetOK(String strAnyrtcId){}  }
class C{  @Override public boolean isLeaf(){  return isLeaf;}  }
class C{  public static File createTemporaryDirectory(String prefix){  while (true) {    String candidateName=prefix + TEMPORARY_DIRECTORY_PRNG.nextInt();    File result=new File(System.getProperty("java.io.tmpdir"),candidateName);    if (result.mkdir()) {      return result;    }  }}  }
class C{  protected void endTag(Element elem) throws IOException {  if (synthesizedElement(elem)) {    return;  }  closeOutUnwantedEmbeddedTags(elem.getAttributes());  if (inContent) {    if (!newlineOutputed && !inPre) {      writeLineSeparator();    }    newlineOutputed=false;    inContent=false;  }  if (!inPre) {    indentSmart();  }  if (matchNameAttribute(elem.getAttributes(),HTML.Tag.PRE)) {    inPre=false;  }  write('<');  write('/');  write(elem.getName());  write('>');  writeLineSeparator();}  }
class C{  private void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (oldValue != null && newValue != null && oldValue.equals(newValue)) {    return;  }  getCurrentChangeSupport().firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  public AciException(){  super();}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  public int hashCode(){  return hashCode;}  }
class C{  public String[][] logRecRead(String tableName,LogQuery logQuery,java.util.logging.LogManager logMgr,boolean sourceData) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, SQLException, Exception {  String sortField=null;  this.cleaner();  tableName=tableName.replace('.','_');  try {    this.databaseURL=logMgr.getProperty(LogConstants.LOG_LOCATION);    this.dbDriver=logMgr.getProperty(LogConstants.DB_DRIVER);    this.dbUserName=logMgr.getProperty(LogConstants.DB_USER);    this.dbPassWord=logMgr.getProperty(LogConstants.DB_PASSWORD);    this.maxRecordsStr=logMgr.getProperty(LogConstants.MAX_RECORDS);  } catch (  Exception e) {    Debug.error("DBLogRecRead:config: ",e);    throw e;  }  if (this.dbDriver.toLowerCase().indexOf("oracle") != -1) {    isMySQL=false;  } else   if (this.dbDriver.toLowerCase().indexOf("mysql") != -1) {    isMySQL=true;  } else {    isMySQL=false;    Debug.warning("DBlogRecRead:assuming driver: '" + this.dbDriver + "' is Oracle-compatible.");  }  String selectStr;  if (sourceData == true) {    String temps=logQuery.getSortingField();    if (temps != null) {      sortField=temps.trim();    }    String columns="*";    ArrayList sCol=logQuery.getColumns();    if (sCol != null) {      StringBuilder colSB=new StringBuilder();      int sSize=sCol.size();      for (int i=0; i < sSize; i++) {        colSB.append((String)sCol.get(i));        if ((i + 1) < sSize) {          colSB.append(", ");        }      }      columns=colSB.toString();    }    selectStr=lq2Select(tableName,columns,logQuery);    if (Debug.messageEnabled()) {      Debug.message("logRecRead/4:selectStr = " + selectStr);    }  } else {    selectStr=lq2Select(tableName,null,null);    if (Debug.messageEnabled()) {      Debug.message("logRecRead/4.2:selectStr = " + selectStr);    }  }  try {    this.maxRecords=Integer.parseInt(maxRecordsStr);  } catch (  NumberFormatException nfe) {    if (Debug.warningEnabled()) {      Debug.warning("DBlogRecRead: maxRecords error (" + maxRecordsStr + "), set to MAX");    }    this.maxRecords=LogConstants.MAX_RECORDS_DEFAULT_INT;  }  String[][] tableResults;  try {    connectToDatabase(dbUserName,dbPassWord);  } catch (  SQLException sqe) {    Debug.error("DBlogRecRead:connect:SQE:code=" + sqe.getErrorCode() + ", msg="+ sqe.getMessage());    throw sqe;  }catch (  ClassNotFoundException cnfe) {    throw cnfe;  }  String selStr=selectStr;  Statement stmt=null;  int numberOfRows=0;  try {    stmt=conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);    if (Debug.messageEnabled()) {      Debug.message("DBlogRecRead:about to execute: " + selStr);    }    ResultSet rs=stmt.executeQuery(selStr);    ResultSetMetaData rsmd=rs.getMetaData();    int numberOfColumns=rsmd.getColumnCount();    if (Debug.messageEnabled()) {      Debug.message("DBlogRecRead:#columns = " + numberOfColumns);    }    String[] spltHdrStr=new String[numberOfColumns];    for (int i=1; i <= numberOfColumns; i++) {      String tempstr=rsmd.getColumnName(i);      if (Debug.messageEnabled()) {        Debug.message("DBlogRecRead:col #" + i + " name = "+ tempstr);      }      spltHdrStr[i - 1]=tempstr;    }    listOfValidRecords.add(spltHdrStr);    while (rs.next()) {      numberOfRows++;    }    if (Debug.messageEnabled()) {      Debug.message("DBlogRecRead:#rows = " + numberOfRows);    }    if (numberOfRows == 0) {      stmt.close();      try {        conn.close();      } catch (      SQLException ex) {        Debug.error("DBlogRecRead:rows=0:conn.close (" + ex.getErrorCode() + "): "+ ex.getMessage());      }      int recSize=listOfValidRecords.size();      if (recSize <= 0) {        return null;      }      queryResult=new String[recSize][];      for (int i=0; i < recSize; i++) {        queryResult[i]=(String[])listOfValidRecords.get(i);      }      return queryResult;    }    if (numberOfRows > this.maxRecords) {      stmt.close();      try {        conn.close();      } catch (      SQLException ex) {        Debug.error("DBlogRecRead:conn.close (" + ex.getErrorCode() + "): "+ ex.getMessage());      }      throw new AMLogException(AMLogException.LOG_DB_TOOMANYRECORDS);    }    boolean isFirst=rs.first();    if (isFirst == false) {      Debug.error("DBlogRecRead:first() is false!");    }    int rowsToAlloc=numberOfRows;    if (logQuery.getNumRecordsWanted() == LogQuery.MOST_RECENT_MAX_RECORDS) {      if (numberOfRows > this.maxRecords) {        rowsToAlloc=this.maxRecords;      }    }    tableResults=new String[rowsToAlloc][numberOfColumns];    String result=null;    int rowCount=0;    int skipThisManyRecords=0;    if (logQuery.getNumRecordsWanted() == LogQuery.MOST_RECENT_MAX_RECORDS) {      if (numberOfRows > this.maxRecords) {        skipThisManyRecords=numberOfRows - this.maxRecords;      }    }    if (Debug.messageEnabled()) {      Debug.message("DBlogRecRead:skipThisMany = " + skipThisManyRecords);    }    for (int i=0; i < numberOfColumns; i++) {      result=rs.getString(i + 1);      tableResults[0][i]=result;    }    rowCount=1;    while (rs.next()) {      if (skipThisManyRecords-- <= 0) {        for (int i=0; i < numberOfColumns; i++) {          result=rs.getString(i + 1);          tableResults[rowCount][i]=result;        }        rowCount++;      }    }    stmt.close();  } catch (  SQLException se) {    Debug.error("DBlogRecRead:query:SQE:code=" + se.getErrorCode() + ", msg="+ se.getMessage());    throw se;  }  try {    this.getRecords(tableResults,sourceData);  } catch (  IOException e) {    throw e;  }catch (  IllegalArgumentException e) {    throw e;  }catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw e;  }  int recSize=listOfValidRecords.size();  if (recSize <= 0) {    return null;  }  try {    conn.close();  } catch (  SQLException ex) {    Debug.error("DBlogRecRead:conn.close (" + ex.getErrorCode() + "): "+ ex.getMessage());  }  queryResult=new String[recSize][];  for (int i=0; i < recSize; i++) {    queryResult[i]=(String[])listOfValidRecords.get(i);  }  return queryResult;}  }
class C{  public DynamicGroup(CreationTemplate template,AttrSet attrSet) throws UMSException {  super(template,attrSet);}  }
class C{  public boolean matchesBaseAndScope(DN baseDN,SearchScope scope){  return dn.isInScopeOf(baseDN,scope);}  }
class C{  public Period minusMonths(long monthsToSubtract){  return (monthsToSubtract == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-monthsToSubtract));}  }
class C{  public ClientFaultException(final String messageCode,final String detail){  super(null,messageCode,detail);}  }
class C{  public PdfXObject createPdfForm(PdfDocument document){  PdfFormXObject pdfForm=new PdfFormXObject(new Rectangle(0,0,wmf.getWidth(),wmf.getHeight()));  PdfCanvas canvas=new PdfCanvas(pdfForm,document);  InputStream is=null;  try {    if (wmf.getData() == null) {      is=wmf.getUrl().openStream();    } else {      is=new java.io.ByteArrayInputStream(wmf.getData());    }    MetaDo meta=new MetaDo(is,canvas);    meta.readAll();  } catch (  IOException e) {    throw new PdfException(PdfException.WmfImageException,e);  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException ignored) {      }    }  }  return pdfForm;}  }
class C{  boolean accessAllowedEntry(AciContainer container){  container.setIsFirstAttribute(true);  for (  AttributeType attrType : getAllAttrs(container.getResourceEntry())) {    container.setCurrentAttributeType(attrType);    if (accessAllowed(container)) {      if (container.hasEntryTestRule()) {        container.setCurrentAttributeType(null);        if (!accessAllowed(container) && container.isDenyEval()) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public synchronized boolean containsAll(Collection<?> c){  return super.containsAll(c);}  }
class C{  @Override public int hashCode(){  return getChronology().getId().hashCode() ^ isoDate.hashCode();}  }
class C{  public FrameBodyTBPM(){}  }
class C{  public DefaultMutableTreeNode(Object userObject){  this(userObject,true);}  }
class C{  public Image scaleToFit(float fitWidth,float fitHeight){  float horizontalScaling=fitWidth / xObject.getWidth();  float verticalScaling=fitHeight / xObject.getHeight();  return scale(Math.min(horizontalScaling,verticalScaling),Math.min(horizontalScaling,verticalScaling));}  }
class C{  public void test_addILjava_lang_Object(){  Object o;  ll.add(50,o="Test");  assertTrue("Failed to add Object>: " + ll.get(50).toString(),ll.get(50) == o);  assertTrue("Failed to fix up list after insert",ll.get(51) == objArray[50] && (ll.get(52) == objArray[51]));  ll.add(50,null);  assertNull("Did not add null correctly",ll.get(50));}  }
class C{  public SessionExpiresHeader createSessionExpiresHeader(int expires) throws InvalidArgumentException {  if (expires < 0)   throw new InvalidArgumentException("bad value " + expires);  SessionExpires s=new SessionExpires();  s.setExpires(expires);  return s;}  }
class C{  public AttributeCertificate toASN1Structure(){  return attrCert;}  }
class C{  public boolean addAll(Set s){  if (s == null || s.isEmpty()) {    return false;  }  Iterator it=s.iterator();  boolean changed=false;  while (it.hasNext()) {    boolean c=add(it.next());    if (c) {      changed=true;    }  }  return changed;}  }
class C{  public Folder(Context context,AttributeSet attrs){  super(context,attrs);  setAlwaysDrawnWithCacheEnabled(false);  mInputMethodManager=(InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE);  Resources res=getResources();  mExpandDuration=res.getInteger(R.integer.config_folderExpandDuration);  mMaterialExpandDuration=res.getInteger(R.integer.config_materialFolderExpandDuration);  mMaterialExpandStagger=res.getInteger(R.integer.config_materialFolderExpandStagger);  if (sDefaultFolderName == null) {    sDefaultFolderName=res.getString(R.string.folder_name);  }  if (sHintText == null) {    sHintText=res.getString(R.string.folder_hint_text);  }  mLauncher=(Launcher)context;  setFocusableInTouchMode(true);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  Object[] elements=getArray();  s.writeInt(elements.length);  for (  Object element : elements)   s.writeObject(element);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignaturePropertyElement createSignaturePropertyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignaturePropertyElementImpl();}  }
class C{  @Override public String toString(){  StringBuilder risul=new StringBuilder(1000);  risul.append("IteraBoard \n");  risul.append("objects: itera_settings \n");  risul.append("methods: get_routing_board() \n");  return risul.toString();}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  Log.i(TAG,"Upgrading database from version " + oldVersion + " to "+ newVersion+ ", which will destroy all old data");  db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);  onCreate(db);}  }
class C{  static RSEvaluations computeBestReplicationServer(boolean firstConnection,int rsServerId,ServerState myState,Map<Integer,ReplicationServerInfo> rsInfos,int localServerId,byte groupId,long generationId){  final RSEvaluations evals=new RSEvaluations(localServerId,rsInfos);  if (evals.foundBestRS()) {    return evals;  }  filterServersLocallyConfigured(evals,localServerId);  filterServersWithSameGroupId(evals,localServerId,groupId);  final boolean rssWithSameGenerationIdExist=filterServersWithSameGenerationId(evals,localServerId,generationId);  if (rssWithSameGenerationIdExist) {    filterServersWithAllLocalDSChanges(evals,myState,localServerId);  }  filterServersOnSameHost(evals,localServerId);  if (evals.foundBestRS()) {    return evals;  }  if (firstConnection) {    computeBestServerForWeight(evals,-1,-1);  } else {    computeBestServerForWeight(evals,rsServerId,localServerId);  }  return evals;}  }
class C{  @DataProvider(name="stateMachineStatusAnalyzerTestProvider") public Object[][] stateMachineStatusAnalyzerTestProvider() throws Exception {  return new Object[][]{{1},{10},{50},{120}};}  }
class C{  public static String generateMixPassword(final int n){  final char[] pw=new char[n];  int c='A';  int r1=0;  for (int i=0; i < n; i++) {    r1=(int)(Math.random() * 3);switch (r1) {case 0:      c='0' + (int)(Math.random() * 10);    break;case 1:  c='a' + (int)(Math.random() * 26);break;case 2:c='A' + (int)(Math.random() * 26);break;}pw[i]=(char)c;}return new String(pw);}  }
class C{  public Set searchChildren(NodeNameFilter filter,boolean recursive){  Set set=new HashSet();  getChildren(recursive,set);  Set results=new HashSet();  for (Iterator i=set.iterator(); i.hasNext(); ) {    SMSFlatFileTreeNode node=(SMSFlatFileTreeNode)i.next();    if ((filter == null) || filter.accept(node.getName())) {      results.add(node);    }  }  return results;}  }
class C{  public void paintMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  public static void configAgentGroups(String realm,Map<String,Map<String,String>> agtAttrs){  String classMethod="Agent.configAgentGroups:";  if ((agtAttrs == null) || agtAttrs.isEmpty()) {    if (debug.messageEnabled()) {      debug.message(classMethod + "got null attr map for realm " + realm);    }    return;  }  SsoServerPolicyAgents sss=sunMib.getPolicyAgentsGroup();  TableSsoServerPolicyJ2EEGroupTable j2eetab=null;  TableSsoServerPolicyWebGroupTable wgtab=null;  SsoServerWSSAgents ssa=sunMib.getWssAgentsGroup();  TableSsoServerWSSAgentsSTSAgtGrpTable ststab=null;  TableSsoServerWSSAgentsWSPAgtGrpTable wsptab=null;  TableSsoServerWSSAgentsWSCAgtGrpTable wsctab=null;  TableSsoServerWSSAgentsDSCAgtGrpTable dsctab=null;  if (sss != null) {    try {      j2eetab=sss.accessSsoServerPolicyJ2EEGroupTable();      wgtab=sss.accessSsoServerPolicyWebGroupTable();    } catch (    SnmpStatusException ex) {      debug.error(classMethod + "getting Agent Groups tables: ",ex);      return;    }  }  if (ssa != null) {    try {      ststab=ssa.accessSsoServerWSSAgentsSTSAgtGrpTable();      wsptab=ssa.accessSsoServerWSSAgentsWSPAgtGrpTable();      wsctab=ssa.accessSsoServerWSSAgentsWSCAgtGrpTable();      dsctab=ssa.accessSsoServerWSSAgentsDSCAgtGrpTable();    } catch (    SnmpStatusException ex) {      debug.error(classMethod + "getting WSS Agent Groups tables: ",ex);      return;    }  }  StringBuilder sb=new StringBuilder(classMethod);  if (debug.messageEnabled()) {    sb.append("agents for realm ").append(realm).append(", # = ").append(agtAttrs.size()).append("\n");  }  int wai=1;  int j2eei=1;  int stsi=1;  int wspi=1;  int wsci=1;  int dsci=1;  Integer ri=getRealmIndexFromName(realm);  if (ri == null) {    debug.error(classMethod + "didn't find index for realm " + realm);    return;  }  for (  Map.Entry<String,Map<String,String>> entry : agtAttrs.entrySet()) {    String agtname=entry.getKey();    Map<String,String> hm=entry.getValue();    String atype=hm.get(Constants.ATTR_NAME_AGENT_TYPE);    if (debug.messageEnabled()) {      sb.append("  agent group name = ").append(agtname).append(", type = ").append(atype).append("\n");    }    agtname=getEscapedString(agtname);    if (atype.equals("WebAgent")) {      if (wgtab == null) {        continue;      }      String lurl=hm.get("com.sun.identity.agents.config.login.url");      SsoServerPolicyWebGroupEntryImpl aei=new SsoServerPolicyWebGroupEntryImpl(sunMib);      aei.SsoServerRealmIndex=ri;      aei.PolicyWebGroupIndex=new Integer(wai++);      aei.PolicyWebGroupName=agtname;      aei.PolicyWebGroupServerURL=lurl;      ObjectName aname=aei.createSsoServerPolicyWebGroupEntryObjectName(server);      if (aname == null) {        debug.error(classMethod + "Error creating object for Policy Web Agent Group '" + agtname+ "'");        continue;      }      try {        wgtab.addEntry(aei,aname);        if ((server != null) && (aei != null)) {          server.registerMBean(aei,aname);        }      } catch (      JMException ex) {        debug.error(classMethod + agtname + ": "+ ex.getMessage());      }catch (      SnmpStatusException ex) {        debug.error(classMethod + agtname + ": "+ ex.getMessage());      }    } else     if (atype.equals("J2EEAgent")) {      if (j2eetab == null) {        continue;      }      SsoServerPolicyJ2EEGroupEntryImpl aei=new SsoServerPolicyJ2EEGroupEntryImpl(sunMib);      String lurl=hm.get("com.sun.identity.agents.config.login.url");      aei.PolicyJ2EEGroupServerURL=lurl;      aei.PolicyJ2EEGroupName=agtname;      aei.PolicyJ2EEGroupIndex=new Integer(j2eei++);      aei.SsoServerRealmIndex=ri;      ObjectName aname=aei.createSsoServerPolicyJ2EEGroupEntryObjectName(server);      if (aname == null) {        debug.error(classMethod + "Error creating object for Policy J2EE Agent Group '" + agtname+ "'");        continue;      }      try {        j2eetab.addEntry(aei,aname);        if ((server != null) && (aei != null)) {          server.registerMBean(aei,aname);        }      } catch (      JMException ex) {        debug.error(classMethod + agtname + ": "+ ex.getMessage());      }catch (      SnmpStatusException ex) {        debug.error(classMethod + agtname + ": "+ ex.getMessage());      }    } else     if (atype.equals("SharedAgent")) {    } else {      debug.error(classMethod + "agent group type = " + atype+ ", agent group name = "+ agtname+ " not supported.");    }  }  if (debug.messageEnabled()) {    debug.message(sb.toString());  }}  }
class C{  public static int collectDefaults(){  int flags=0;  for (  Feature f : values()) {    if (f.enabledByDefault()) {      flags|=f.getMask();    }  }  return flags;}  }
class C{  public void testDivideRoundHalfDownNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public XMLString toLowerCase(Locale locale){  return new XMLStringDefault(m_str.toLowerCase(locale));}  }
class C{  private ReturnCode(int code){  this.code=code;}  }
class C{  public final boolean is_clearance_compensation_used(){  return compensated_clearance_class_no > 0;}  }
class C{  public DoubleArraySpliterator(double[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  public void testCase10(){  byte aBytes[]={1,100,56,7,98,-1,39,-128,127,5,6,7,8,9};  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=-1;  int bSign=-1;  byte rBytes[]={23,115,11,78,35,-11};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public Identifier(Object... components){  super();  add(components);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null) {    return false;  }  if (!(o instanceof Entry)) {    return false;  }  Entry e=(Entry)o;  return dn.equals(e.dn) && objectClasses.keySet().equals(e.objectClasses.keySet()) && equals(userAttributes,e.userAttributes)&& equals(operationalAttributes,e.operationalAttributes);}  }
class C{  public ValidationException(Throwable t){  super(t);}  }
class C{  public static boolean hasImageSyntax(String attrName,Schema schema){  if ("photo".equals(AttributeDescription.valueOf(attrName).getNameOrOID())) {    return true;  }  if (schema != null) {    AttributeType attrType=AttributeDescription.valueOf(attrName,schema).getAttributeType();    if (!attrType.isPlaceHolder()) {      String syntaxOID=attrType.getSyntax().getOID();      return SchemaConstants.SYNTAX_JPEG_OID.equals(syntaxOID);    }  }  return false;}  }
class C{  public boolean isDestroyed(){  return cert == null && key == null && alias == null;}  }
class C{  public void access(Level level,String messageId,String data[],Object session,Map props) throws LogException {  if (isAccessLoggable(level)) {    SSOToken authSSOToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());    LogRecord lr=getLogRecord(messageId,data,session,props,authSSOToken);    if (lr != null) {      accessLogger.log(lr,authSSOToken);    }  }}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  public FrameBodyTPRO(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public AMInvalidDNException(String msg,String errorCode){  super(msg,errorCode);}  }
class C{  @Override public long skip(long n) throws IOException {  return fInputStream.skip(n);}  }
class C{  public String toString(){  if (array != null) {    return new String(array,offset,count);  }  return "";}  }
class C{  public static Color fromBGR(int bgr) throws IllegalArgumentException {  Validate.isTrue((bgr >> 24) == 0,"Extrenuous data in: ",bgr);  return fromBGR(bgr >> 16 & BIT_MASK,bgr >> 8 & BIT_MASK,bgr >> 0 & BIT_MASK);}  }
class C{  public synchronized void disableType(String prefix){  enabledTypes.remove(prefix);}  }
class C{  public void error(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.error(e);  }}  }
class C{  private E unlinkLast(Node<E> l){  final E element=l.item;  final Node<E> prev=l.prev;  l.item=null;  l.prev=null;  last=prev;  if (prev == null)   first=null; else   prev.next=null;  size--;  modCount++;  return element;}  }
class C{  private static boolean isConfigBackend(String backendId){  return "tasks".equalsIgnoreCase(backendId) || "schema".equalsIgnoreCase(backendId) || "config".equalsIgnoreCase(backendId)|| "monitor".equalsIgnoreCase(backendId)|| "backup".equalsIgnoreCase(backendId)|| "ads-truststore".equalsIgnoreCase(backendId);}  }
class C{  public static boolean containsCaseInsensitive(String s1,String s2){  if (s1 == null || s2 == null) {    return false;  }  return s1.toLowerCase().contains(s2.toLowerCase());}  }
class C{  @Override public NamingEnumeration<NameClassPair> list(Name name) throws NamingException {  if (log.isDebugEnabled()) {    log.debug(sm.getString("selectorContext.methodUsingName","list",name));  }  return getBoundContext().list(parseName(name));}  }
class C{  public static void unregisterAll(Plugin plugin){synchronized (allLists) {    for (    HandlerList h : allLists) {      h.unregister(plugin);    }  }}  }
class C{  public Object push(Object i){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=i;  m_firstFree++;  return i;}  }
class C{  @Override public void cacheResult(Foo foo){  entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey(),foo);  finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,new Object[]{foo.getUuid(),foo.getGroupId()},foo);  foo.resetOriginalValues();}  }
class C{  public static boolean isDomainOrSubDomain(String domainName,List<String> domainNames){  if (CollectionUtils.isEmpty(domainNames)) {    return false;  }  for (  String domainToCheck : domainNames) {    if (domainName.equals(domainToCheck) || (domainName.endsWith(domainToCheck) && domainName.endsWith("." + domainToCheck))) {      return true;    }  }  return false;}  }
class C{  public NotConfiguration(Throwable cause){  super(cause);}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.ServiceInstanceUpdateType.CredentialType createServiceInstanceUpdateTypeCredentialType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.ServiceInstanceUpdateTypeImpl.CredentialTypeImpl();}  }
class C{  public static DeleteSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,InstantiableRelationDefinition<?,?> r) throws ArgumentException {  return new DeleteSubCommandHandler(parser,p,r,p.child(r,"DUMMY"));}  }
class C{  public void namespaceAfterStartElement(String prefix,String uri) throws SAXException {  if (m_elemContext.m_elementURI == null) {    String prefix1=getPrefixPart(m_elemContext.m_elementName);    if (prefix1 == null && EMPTYSTRING.equals(prefix)) {      m_elemContext.m_elementURI=uri;    }  }  startPrefixMapping(prefix,uri,false);}  }
class C{  public static IntroFragment newInstance(String title,String description,int resourceId,int resourceIdType){  Bundle args=new Bundle();  args.putString(TITLE,title);  args.putString(DESCRIPTION,description);  args.putInt(RESOURCE_ID_TYPE,resourceIdType);  args.putInt(resourceIdType == RESOURCE_TYPE_LAYOUT ? LAYOUT_ID : DRAWABLE_ID,resourceId);  IntroFragment fragment=new IntroFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public void displayRefreshIcon(boolean display){  if (display != displayRefreshIcon) {    displayRefreshIcon=display;    repaint();  }}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (contentHandler != null) {    contentHandler.startPrefixMapping(prefix,uri);  }}  }
class C{  public final void reuse_entries_after_cutout(BrdTracep p_from_trace,BrdTracep p_start_piece,BrdTracep p_end_piece){  AwtreeNodeLeaf[] start_piece_leaf_arr=new AwtreeNodeLeaf[p_start_piece.polyline().plaline_len(-2)];  AwtreeNodeLeaf[] from_trace_entries=p_from_trace.get_search_tree_entries(this);  for (int i=0; i < start_piece_leaf_arr.length - 1; ++i) {    start_piece_leaf_arr[i]=from_trace_entries[i];    start_piece_leaf_arr[i].object=p_start_piece;    start_piece_leaf_arr[i].shape_index_in_object=i;    from_trace_entries[i]=null;  }  start_piece_leaf_arr[start_piece_leaf_arr.length - 1]=insert(p_start_piece,start_piece_leaf_arr.length - 1);  AwtreeNodeLeaf[] end_piece_leaf_arr=new AwtreeNodeLeaf[p_end_piece.polyline().plaline_len(-2)];  end_piece_leaf_arr[0]=insert(p_end_piece,0);  for (int i=1; i < end_piece_leaf_arr.length; ++i) {    int from_index=from_trace_entries.length - end_piece_leaf_arr.length + i;    end_piece_leaf_arr[i]=from_trace_entries[from_index];    end_piece_leaf_arr[i].object=p_end_piece;    end_piece_leaf_arr[i].shape_index_in_object=i;    from_trace_entries[from_index]=null;  }  p_start_piece.set_search_tree_entries(this,start_piece_leaf_arr);  p_end_piece.set_search_tree_entries(this,end_piece_leaf_arr);}  }
class C{  public void drawString(AttributedCharacterIterator iterator,int x,int y){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing text: \"" + iterator+ "\" at: "+ new Point(x,y));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawString(iterator,x,y);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawString(iterator,x,y);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawString(iterator,x,y);}  }
class C{  public ZoneFieldParser(String zoneField){  lexer=new Lexer("charLexer",zoneField);}  }
class C{  public static String readStream(InputStream is) throws IOException {  return readStream(is,DEFAULT_ENCODING);}  }
class C{  public static void createRealmPrivileges(SSOToken token,String realmName) throws SSOException, DelegationException {  String realmId=DNMapper.orgNameToDN(realmName);  DelegationManager dm=new DelegationManager(token,realmName);  Set privs=dm.getConfiguredPrivilegeNames();  if ((privs == null) || privs.isEmpty()) {    return;  }  if (debug.messageEnabled()) {    debug.message("DelegationUtils:Getting global privileges");  }  Iterator it=privs.iterator();  while (it.hasNext()) {    ServiceConfig perm=null;    String privName=(String)it.next();    if (getRevisionNumber() == AM70_DELEGATION_REVISION) {      perm=DelegationUtils.getPermissionConfig(null,privName,true);    } else {      perm=DelegationUtils.getPrivilegeConfig(null,privName,true);    }    Map attrs=perm.getAttributes();    if ((attrs == null) || attrs.isEmpty()) {      throw new DelegationException(ResBundleUtils.rbName,"get_privilege_attrs_failed",null,null);    }    Set subjects=null;    Set configSubjects=(Set)attrs.get(SUBJECTS_IN_LEGACY_MODE);    if ((configSubjects != null) && (!configSubjects.isEmpty())) {      Iterator sIter=configSubjects.iterator();      subjects=new HashSet();      while (sIter.hasNext()) {        String sv=(String)sIter.next();        subjects.add(swapRealmTag(realmId,sv));      }    }    DelegationPrivilege priv=new DelegationPrivilege(privName,subjects,realmName);    dm.addPrivilege(priv);    if (debug.messageEnabled()) {      debug.message("added " + privName + " privilege in realm "+ realmName);    }  }}  }
class C{  public void testReceive_UnconnectedBufEmpty() throws Exception {  this.channel1.configureBlocking(false);  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_NORMAL);  assertNull(this.channel1.receive(dst));}  }
class C{  public final void testNextBytesbyteArray04() throws NoSuchAlgorithmException, NoSuchProviderException {  SecureRandom sr1;  SecureRandom sr2;  byte[] myBytes;  byte[] myBytes1;  byte[] myBytes2;  for (int i=1; i < LENGTH / 2; i+=INCR) {    sr1=SecureRandom.getInstance(algorithm,provider);    sr2=SecureRandom.getInstance(algorithm,provider);    sr1.nextBytes(new byte[0]);    sr2.nextBytes(new byte[0]);    boolean flag=true;    myBytes1=new byte[i];    myBytes2=new byte[i];    sr1.nextBytes(myBytes1);    sr2.nextBytes(myBytes2);    for (int j=0; j < i; j++) {      flag&=myBytes1[j] == myBytes2[j];    }    sr1.nextBytes(myBytes1);    sr2.nextBytes(myBytes2);    for (int j=0; j < i; j++) {      flag&=myBytes1[j] == myBytes2[j];    }    if (flag) {      fail("TESTING RANDOM NUMBER GENERATOR QUALITY: IGNORE THIS FAILURE IF INTERMITTENT :: i=" + i);    }  }  myBytes=new byte[]{(byte)0};  for (int n=1; n < LENGTH; n+=INCR) {    byte[][] bytes1=new byte[2][n];    byte[][] bytes2=new byte[2][n];    sr1=SecureRandom.getInstance(algorithm,provider);    sr2=SecureRandom.getInstance(algorithm,provider);    sr1.setSeed(myBytes);    sr2.setSeed(myBytes);    sr1.nextBytes(bytes1[0]);    sr1.nextBytes(bytes1[1]);    sr2.nextBytes(bytes2[0]);    sr2.nextBytes(new byte[0]);    sr2.nextBytes(bytes2[1]);    for (int k=0; k < 2; k++) {      for (int j=0; j < n; j++) {        assertTrue("non-equality: k=" + k + " j="+ j+ " bytes1[k][j]="+ bytes1[k][j]+ " bytes2[k][j]="+ bytes2[k][j],bytes1[k][j] == bytes2[k][j]);      }    }  }}  }
class C{  public static EntryHistorical newInstanceFromEntry(Entry entry){  Iterable<Attribute> histAttrWithOptionsFromEntry=getHistoricalAttr(entry);  final EntryHistorical newHistorical=new EntryHistorical();  if (isEmpty(histAttrWithOptionsFromEntry)) {    return newHistorical;  }  try {    for (    Attribute histAttrFromEntry : histAttrWithOptionsFromEntry) {      for (      ByteString histAttrValueFromEntry : histAttrFromEntry) {        final HistoricalAttributeValue histVal=new HistoricalAttributeValue(histAttrValueFromEntry.toString());        final CSN csn=histVal.getCSN();        newHistorical.updateOldestCSN(csn);        if (histVal.isADDOperation()) {          newHistorical.entryADDDate=csn;        } else         if (histVal.isMODDNOperation()) {          newHistorical.entryMODDNDate=csn;        } else {          final AttributeDescription attrDesc=histVal.getAttributeDescription();          if (attrDesc == null) {            logger.error(ERR_UNKNOWN_ATTRIBUTE_IN_HISTORICAL,entry.getName(),histVal.getAttrString());            continue;          }          AttrHistorical attrInfo=newHistorical.attributesHistorical.get(attrDesc);          if (attrInfo == null) {            attrInfo=AttrHistorical.createAttributeHistorical(attrDesc.getAttributeType());            newHistorical.attributesHistorical.put(attrDesc,attrInfo);          }          attrInfo.assign(histVal);        }      }    }  } catch (  Exception e) {    logger.error(ERR_BAD_HISTORICAL,entry.getName());  }  return newHistorical;}  }
class C{  public static String urlEncode(String text){  try {    return URLEncoder.encode(text,"utf-8");  } catch (  Exception ex) {    LOG.warn("Error encoding " + text,ex);  }  return text;}  }
class C{  public static Attribute create(AttributeType attributeType,String name,String valueString){  return create(attributeType,name,ByteString.valueOfUtf8(valueString));}  }
class C{  protected void diagnoseMultistepList(int matchCount,int lengthToTest,boolean isGlobal){  if (matchCount > 0) {    System.err.print("Found multistep matches: " + matchCount + ", "+ lengthToTest+ " length");    if (isGlobal)     System.err.println(" (global)"); else     System.err.println();  }}  }
class C{  public RealmOAuth2ProviderSettings(OpenAMSettings settings,String realm,ResourceSetStore resourceSetStore,ServiceConfigManagerFactory serviceConfigManagerFactory){  this.settings=settings;  this.realm=realm;  this.resourceSetStore=resourceSetStore;  this.serviceConfigManagerFactory=serviceConfigManagerFactory;  addServiceListener();}  }
class C{  public boolean trace_tails_in_shape(){  return shape_contains_trace_tails;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("processAck");}  }
class C{  @Override public void service(org.apache.coyote.Request req,org.apache.coyote.Response res) throws Exception {  Request request=(Request)req.getNote(ADAPTER_NOTES);  Response response=(Response)res.getNote(ADAPTER_NOTES);  if (request == null) {    request=connector.createRequest();    request.setCoyoteRequest(req);    response=connector.createResponse();    response.setCoyoteResponse(res);    request.setResponse(response);    response.setRequest(request);    req.setNote(ADAPTER_NOTES,request);    res.setNote(ADAPTER_NOTES,response);    req.getParameters().setQueryStringEncoding(connector.getURIEncoding());  }  if (connector.getXpoweredBy()) {    response.addHeader("X-Powered-By",POWERED_BY);  }  boolean async=false;  boolean postParseSuccess=false;  try {    req.getRequestProcessor().setWorkerThreadName(THREAD_NAME.get());    postParseSuccess=postParseRequest(req,request,res,response);    if (postParseSuccess) {      request.setAsyncSupported(connector.getService().getContainer().getPipeline().isAsyncSupported());      connector.getService().getContainer().getPipeline().getFirst().invoke(request,response);    }    if (request.isAsync()) {      async=true;      ReadListener readListener=req.getReadListener();      if (readListener != null && request.isFinished()) {        ClassLoader oldCL=null;        try {          oldCL=request.getContext().bind(false,null);          if (req.sendAllDataReadEvent()) {            req.getReadListener().onAllDataRead();          }        }  finally {          request.getContext().unbind(false,oldCL);        }      }      Throwable throwable=(Throwable)request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);      if (!request.isAsyncCompleting() && throwable != null) {        request.getAsyncContextInternal().setErrorState(throwable,true);      }    } else {      request.finishRequest();      response.finishResponse();    }  } catch (  IOException e) {  } finally {    if (!async && postParseSuccess) {      request.getMappingData().context.logAccess(request,response,System.currentTimeMillis() - req.getStartTime(),false);    }    req.getRequestProcessor().setWorkerThreadName(null);    AtomicBoolean error=new AtomicBoolean(false);    res.action(ActionCode.IS_ERROR,error);    if (!async || error.get()) {      request.recycle();      response.recycle();    }  }}  }
class C{  private static boolean isSingleList(Map<String,?> args){  if (args.size() != 1)   return false;  Object v=args.values().iterator().next();  return v instanceof List;}  }
class C{  public final void testRead03() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      dis.on(false);      for (int i=0; i < MY_MESSAGE_LEN; i++) {        dis.read();      }      assertTrue(Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void dispatchEvent(AWTEvent event){}  }
class C{  public void replaceAll(Attribute attribute){  clear();  addAll(attribute);}  }
class C{  public static String toString(short[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public OpenSSOUserSubject(){  super();}  }
class C{  public void remove(int pos){  if (pos < 0) {    throw new IllegalArgumentException("index less than zero.");  }  if (pos > getComponentCount() - 1) {    throw new IllegalArgumentException("index greater than the number of items.");  }  super.remove(pos);}  }
class C{  public java.util.Iterator<HDR> iterator(){  return this.hlist.listIterator();}  }
class C{  @Override public FSResponse processSAMLRequest(FSSAMLRequest samlRequest){  FSUtils.debug.message("FSSSOBrowserArtifactProfileHandler.processSAMLRequest: Called");  try {    return createSAMLResponse(samlRequest);  } catch (  Exception e) {    FSUtils.debug.error("FSSSOBrowserArtifactProfileHandler." + "processSAMLRequest: Fatal error, " + "cannot create status or response: ",e);    return null;  }}  }
class C{  private void updateCheck(){  try {    String uuid=getInstallUuid();    if (uuid == null) {      return;    }    long lastCheckTime=getLastUpdateCheckTime();    if (System.currentTimeMillis() - lastCheckTime < 6 * 60 * 60* 1000) {      return;    }    updateLastUpdateCheckTime();    String osName=System.getProperty("os.name","Unknown");    String osArch=System.getProperty("os.arch","Unknown");    String osVersion=System.getProperty("os.version","Unknown");    UpdateChecker t=new UpdateChecker("http://download.robovm.org/version?" + "uuid=" + URLEncoder.encode(uuid,"UTF-8") + "&"+ "version="+ URLEncoder.encode(Version.getVersion(),"UTF-8")+ "&"+ "osName="+ URLEncoder.encode(osName,"UTF-8")+ "&"+ "osArch="+ URLEncoder.encode(osArch,"UTF-8")+ "&"+ "osVersion="+ URLEncoder.encode(osVersion,"UTF-8"));    t.start();    t.join(5 * 1000);    JSONObject result=t.result;    if (result != null) {      String version=(String)result.get("version");      if (version != null && Version.isOlderThan(version)) {        config.getLogger().info("A new version of RoboVM is available. " + "Current version: %s. New version: %s.",Version.getVersion(),version);      }    }  } catch (  Throwable t) {    if (config.getHome().isDev()) {      t.printStackTrace();    }  }}  }
class C{  protected void init(String owner,MethodNode m) throws AnalyzerException {}  }
class C{  public byte[] writeByteArray(){  byte[] arr;  arr=new byte[size];  if (value != null) {    long temp=ID3Tags.getWholeNumber(value);    for (int i=size - 1; i >= 0; i--) {      arr[i]=(byte)(temp & 0xFF);      temp>>=8;    }  }  return arr;}  }
class C{  public void testMultiplyScalePosPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="92000312286217574978643009574114545567010139156902666284589309.1880727173060570190220616";  int cScale=25;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.multiply(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  private Locale createLocale(String language,String country){  Locale locale;  if (country != null) {    locale=new Locale(language,country);  } else {    DEBUG.message("country not set. Only using localeLanguage");    locale=new Locale(language);  }  return locale;}  }
class C{  AddMsg(PostOperationAddOperation op){  super((AddContext)op.getAttachment(SYNCHROCONTEXT),op.getEntryDN());  AddContext ctx=(AddContext)op.getAttachment(SYNCHROCONTEXT);  this.parentEntryUUID=ctx.getParentEntryUUID();  this.encodedAttributes=encodeAttributes(op.getObjectClasses(),op.getUserAttributes(),op.getOperationalAttributes());}  }
class C{  public static DiscoveryImporter parse(Reader reader) throws IOException {  ObjectMapper mapper=new ObjectMapper();  JsonNode disco=mapper.readTree(reader);  DiscoveryImporter importer=new DiscoveryImporter();  for (  Map.Entry<String,JsonNode> field : iterFields(disco.get("schemas"))) {    importer.addType(field.getKey(),field.getValue());  }  importer.addMethods(disco);  Service.Builder builder=Service.newBuilder().setName(disco.get("baseUrl").asText());  Documentation.Builder docs=Documentation.newBuilder();  if (disco.get("documentationLink") != null) {    docs.setDocumentationRootUrl(disco.get("documentationLink").asText());  }  String title=disco.get("title").asText();  builder.setTitle(title);  if (disco.get("canonicalName") != null) {    docs.setSummary(disco.get("canonicalName").asText());  } else {    docs.setSummary(title);  }  if (disco.get("revision") != null) {    docs.setOverview(disco.get("revision").asText());  } else {    docs.setOverview("0");  }  builder.setDocumentation(docs.build());  for (  Type type : importer.types.values()) {    builder.addTypes(type);  }  String apiName=disco.get("name").asText();  String apiVersion=disco.get("version").asText();  Api.Builder apiBuilder=Api.newBuilder().setName(apiName).setVersion(apiVersion);  for (  Method method : importer.methods.values()) {    apiBuilder.addMethods(method);  }  Service serv=builder.addApis(apiBuilder).build();  importer.service=serv;  importer.config.setApiTitle(serv.getTitle());  importer.config.setApiName(serv.getApis(0).getName());  importer.config.setApiVersion(serv.getApis(0).getVersion());  importer.config.getTypes().putAll(importer.types);  for (  Type type : importer.types.values()) {    for (    Field field : type.getFieldsList()) {      importer.config.getFields().put(type,field.getName(),field);    }  }  if (disco.get("canonicalName") != null) {    importer.config.setServiceCanonicalName(disco.get("canonicalName").asText());  } else {    importer.config.setServiceCanonicalName(apiName);  }  importer.config.setServiceVersion(apiVersion);  return importer;}  }
class C{  public boolean shove_trace_insert(ShapeTile p_trace_shape,BrdFromSide p_from_side,int p_layer,NetNosList p_net_no_arr,int p_cl_type,Collection<BrdItem> p_ignore_items,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){  if (p_trace_shape.is_empty()) {    System.out.println("ShoveTraceAux.insert: p_trace_shape is empty");    return true;  }  if (!p_trace_shape.is_contained_in(r_board.get_bounding_box())) {    r_board.shove_fail_obstacle_set(r_board.get_outline());    return false;  }  if (!r_board.move_drill_algo.shove_vias(p_trace_shape,p_from_side,p_layer,p_net_no_arr,p_cl_type,p_ignore_items,p_max_recursion_depth,p_max_via_recursion_depth,true)) {    return false;  }  AlgoShoveTraceEntries shape_entries=new AlgoShoveTraceEntries(p_trace_shape,p_layer,p_net_no_arr,p_cl_type,p_from_side,r_board);  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  Collection<BrdItem> obstacles=search_tree.find_overlap_items_with_clearance(p_trace_shape,p_layer,NetNosList.EMPTY,p_cl_type);  obstacles.removeAll(get_ignore_items_at_tie_pins(p_trace_shape,p_layer,p_net_no_arr));  boolean obstacles_shovable=shape_entries.store_items(obstacles,false,true);  if (!shape_entries.shove_via_list.isEmpty()) {    obstacles_shovable=false;    r_board.shove_fail_obstacle_set(shape_entries.shove_via_list.iterator().next());    return false;  }  if (!obstacles_shovable) {    r_board.shove_fail_obstacle_set(shape_entries.get_found_obstacle());    return false;  }  int trace_piece_count=shape_entries.substitute_trace_count();  if (trace_piece_count == 0)   return true;  if (p_max_recursion_depth <= 0) {    r_board.shove_fail_obstacle_set(shape_entries.get_found_obstacle());    return false;  }  boolean tails_exist_before=r_board.contains_trace_tails(obstacles,p_net_no_arr);  shape_entries.cutout_traces(obstacles);  for (; ; ) {    BrdTracep curr_substitute_trace=shape_entries.next_substitute_trace_piece();    if (curr_substitute_trace == null)     break;    if (curr_substitute_trace.corner_first().equals(curr_substitute_trace.corner_last())) {      continue;    }    if (p_max_spring_over_recursion_depth > 0) {      Polyline new_polyline=spring_over(curr_substitute_trace.polyline(),curr_substitute_trace.get_compensated_half_width(search_tree),p_layer,curr_substitute_trace.net_nos,curr_substitute_trace.clearance_idx(),false,p_max_spring_over_recursion_depth,null);      if (new_polyline == null) {        return false;      }      if (new_polyline != curr_substitute_trace.polyline()) {        --p_max_spring_over_recursion_depth;        curr_substitute_trace.change_polyline(new_polyline);      }    }    NetNosList curr_net_no_arr=curr_substitute_trace.net_nos;    for (int index=0; index < curr_substitute_trace.tile_shape_count(); ++index) {      BrdShapeAndFromSide curr=new BrdShapeAndFromSide(curr_substitute_trace,index,false);      if (!shove_trace_insert(curr.shape,curr.from_side,p_layer,curr_net_no_arr,curr_substitute_trace.clearance_idx(),p_ignore_items,p_max_recursion_depth - 1,p_max_via_recursion_depth,p_max_spring_over_recursion_depth)) {        return false;      }    }    for (int index=0; index < curr_substitute_trace.corner_count(); ++index) {      r_board.changed_area_join(curr_substitute_trace.polyline().corner_approx(index),p_layer);    }    PlaPoint[] end_corners=null;    if (!tails_exist_before) {      end_corners=new PlaPoint[2];      end_corners[0]=curr_substitute_trace.corner_first();      end_corners[1]=curr_substitute_trace.corner_last();    }    r_board.insert_item(curr_substitute_trace);    curr_substitute_trace.normalize(r_board.changed_area.get_area(p_layer));    if (tails_exist_before)     continue;    for (int index=0; index < 2; ++index) {      BrdTracep tail=r_board.get_trace_tail(end_corners[index],p_layer,curr_net_no_arr);      if (tail == null)       continue;      r_board.remove_items_unfixed(tail.get_connection_items(BrdStopConnection.VIA));      for (      int curr_net_no : curr_net_no_arr)       r_board.combine_traces(curr_net_no);    }  }  return true;}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new BatikTestDocumentBuilderFactory(new DocumentBuilderSetting[0]);  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public static void write(File file,CharSequence data,boolean append) throws IOException {  write(file,data,Charset.defaultCharset(),append);}  }
class C{  public static Component createVerticalStrut(int height){  return new Filler(new Dimension(0,height),new Dimension(0,height),new Dimension(Short.MAX_VALUE,height));}  }
class C{  public static SoapSTSKeystoreConfig fromJson(JsonValue json) throws IllegalStateException {  if (json.get(KEYSTORE_FILENAME).isNull()) {    return null;  }  try {    return SoapSTSKeystoreConfig.builder().keystoreFileName(json.get(KEYSTORE_FILENAME).asString()).keystorePassword(json.get(KEYSTORE_PASSWORD).asString().getBytes(AMSTSConstants.UTF_8_CHARSET_ID)).signatureKeyAlias(!json.get(SIGNATURE_KEY_ALIAS).isNull() ? json.get(SIGNATURE_KEY_ALIAS).asString() : null).encryptionKeyAlias(!json.get(ENCRYPTION_KEY_ALIAS).isNull() ? json.get(ENCRYPTION_KEY_ALIAS).asString() : null).signatureKeyPassword(!json.get(SIGNATURE_KEY_PASSWORD).isNull() ? json.get(SIGNATURE_KEY_PASSWORD).asString().getBytes(AMSTSConstants.UTF_8_CHARSET_ID) : null).encryptionKeyPassword(!json.get(ENCRYPTION_KEY_PASSWORD).isNull() ? json.get(ENCRYPTION_KEY_PASSWORD).asString().getBytes(AMSTSConstants.UTF_8_CHARSET_ID) : null).build();  } catch (  UnsupportedEncodingException e) {    throw new IllegalStateException("Unsupported encoding when marshalling from String to to byte[]: " + e,e);  }}  }
class C{  public void parse(String systemId) throws SAXException, IOException {  parse(new InputSource(systemId));}  }
class C{  DiscoveryFilter(final Handler handler,final Heap heap){  this.discoveryHandler=handler;  this.heap=heap;}  }
class C{  private void saveWorkFolderShortcuts(long workFolderId,int startingRank){  for (  ItemInfo info : mWorkFolderApps) {    info.rank=startingRank++;    LauncherModel.addItemToDatabase(mContext,info,workFolderId,0,0,0);  }}  }
class C{  public void configChanged(ConfigurationActionEvent e){  debug.message("DiscoServiceManager.configChanged.");  setValues();}  }
class C{  public static Map<String,List<String>> toMultimap(Headers headers,String valueForNullKey){  Map<String,List<String>> result=new TreeMap<>(FIELD_NAME_COMPARATOR);  for (int i=0, size=headers.size(); i < size; i++) {    String fieldName=headers.name(i);    String value=headers.value(i);    List<String> allValues=new ArrayList<>();    List<String> otherValues=result.get(fieldName);    if (otherValues != null) {      allValues.addAll(otherValues);    }    allValues.add(value);    result.put(fieldName,Collections.unmodifiableList(allValues));  }  if (valueForNullKey != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(valueForNullKey)));  }  return Collections.unmodifiableMap(result);}  }
class C{  @Deprecated public RMISecurityException(String name){  super(name);}  }
class C{  public TransformException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  @Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){  templateValue.getValue().append(nextValue++);  return TagResult.SUCCESS_RESULT;}  }
class C{  @Override public void clear(){  if (locked)   throw new IllegalStateException(sm.getString("resourceSet.locked"));  super.clear();}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public static void resetRandom(){  random=new Random(DEFAULT_RANDOM_SEED);}  }
class C{  public SAMLVersionMismatchException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public ScriptObject(final String name,final String script,final ScriptingLanguage language){  this(name,script,language,null);}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {  if (m_inExternalDTD)   return;  try {    DTDprolog();    outputEntityDecl(name,value);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public NameIdentifier(String name,String nameQualifier,String format) throws SAMLException {  if ((name == null) || (name.length() == 0)) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("NameIdentifier: null input specified");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (nameQualifier == null) {    _nameQualifier="";  } else {    _nameQualifier=nameQualifier;  }  if (format == null) {    _format="";  } else {    _format=format;  }  _name=name;}  }
class C{  public void remove(Component c){  if (popupMenu != null)   popupMenu.remove(c);}  }
class C{  public static StringArgument bindDNArgument(final String defaultBindDN) throws ArgumentException {  return bindDNArgument(defaultBindDN,INFO_DESCRIPTION_BINDDN.get());}  }
class C{  boolean cover(CSN covered){  return state.cover(covered);}  }
class C{  public void test_getAttributesLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() throws SQLException {}  }
class C{  private Builder(){  super(Event35Log.SCHEMA$);}  }
class C{  public StateInteractive mouse_wheel_moved(int p_rotation){  Point2D screen_mouse_pos=i_brd.gdi_context.coordinate_transform.board_to_screen(i_brd.get_current_mouse_position());  i_brd.get_panel().zoom_with_mouse_wheel(screen_mouse_pos,p_rotation);  return this;}  }
class C{  public boolean isShowing(){  return getTextComponent().isShowing();}  }
class C{  public Attr createAttributeNS(String namespaceURI,String qualifiedName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public SessionContext(Element element) throws SAMLException {  if (element == null) {    SAMLUtils.debug.message("AttributeStatement: null input.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  boolean valid=SAMLUtils.checkStatement(element,"SessionContext");  if (!valid) {    SAMLUtils.debug.message("SessionContext: Wrong input.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));  }  String authInstant=element.getAttribute("AuthenticationInstant");  String issueInstant=element.getAttribute("AssertionIssueInstant");  if ((authInstant == null) || (issueInstant == null)) {    SAMLUtils.debug.message("SessionContext: AuthenticationInstant " + "or AssertionIssueInstant is missing!");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  try {    _issueInstant=DateUtils.stringToDate(issueInstant);    _authenticationInstant=DateUtils.stringToDate(authInstant);  } catch (  ParseException e) {  }  NodeList nodes=element.getChildNodes();  int nodeCount=nodes.getLength();  if (nodeCount > 0) {    for (int i=0; i < nodeCount; i++) {      Node currentNode=nodes.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {        String tagName=currentNode.getLocalName();        String tagNS=currentNode.getNamespaceURI();        if ((tagName == null) || tagName.length() == 0 || tagNS == null || tagNS.length() == 0) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("SessionContext: The tag name" + " or tag namespace of child element is" + " either null or empty.");          }          throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));        }        if (tagName.equals("SessionSubject") && tagNS.equals("urn:liberty:sec:2003-08")) {          if (_sessionSubject != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("SessionContext:" + " should only contain one SessionSubject");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          } else {            try {              _sessionSubject=new SessionSubject((Element)currentNode);            } catch (            Exception e) {              if (SAMLUtils.debug.messageEnabled()) {                SAMLUtils.debug.message("SessionContext:" + "could not new SessionSubject" + " object.");              }              throw new SAMLRequesterException(SAMLUtils.bundle.getString("SessionSubject"));            }          }        } else         if (tagName.equals("ProviderID") && tagNS.equals("urn:liberty:sec:2003-08")) {          if (_providerID != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("SessionContext:" + " should at most contain one" + " ProviderID.");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          } else {            _providerID=currentNode.getChildNodes().item(0).getNodeValue();          }        } else         if (tagName.equals("AuthnContext") && tagNS.equals("urn:liberty:iff:2003-08")) {          if (_authnContext != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("SessionContext: " + "should at most contain one " + "AuthnContext");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          } else {            try {              _authnContext=new AuthnContext((Element)currentNode);            } catch (            Exception e) {              if (SAMLUtils.debug.messageEnabled()) {                SAMLUtils.debug.message("SessionContext:" + "could not new AuthnContext" + " object.",e);              }              throw new SAMLRequesterException(SAMLUtils.bundle.getString("AuthnContext"));            }          }        } else {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("SessionContext: " + "Wrong element " + tagName + " included.");          }          throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));        }      }    }  }  if ((_sessionSubject == null) || (_authnContext == null)) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SessionContext should contain " + "one SessionSubject and one " + " one AuthnContext.");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("missingElement"));  }}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding,boolean append) throws IOException {  FileOutputStream out=null;  try {    out=openOutputStream(file,append);    final BufferedOutputStream buffer=new BufferedOutputStream(out);    IOUtils.writeLines(lines,lineEnding,buffer,encoding);    buffer.flush();    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  protected void _skip7BitBinary() throws IOException {  int origBytes=_readUnsignedVInt();  int chunks=origBytes / 7;  int encBytes=chunks * 8;  origBytes-=7 * chunks;  if (origBytes > 0) {    encBytes+=1 + origBytes;  }  _skipBytes(encBytes);}  }
class C{  public void testGetSigAlgParams(){  if (this.cert == null) {    return;  }  assertTrue("The byte array with encoded algorithm parameters " + "is not correct.",Arrays.equals(tbt_cert.getSigAlgParams(),cert.getSigAlgParams()));}  }
class C{  private static void formatTwoDigits(int n,StringBuilder buf){  if (n < 10) {    buf.append('0');  }  buf.append(n);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementretrieveallattributes.class,args);}  }
class C{  public void updateBytesRead(int bytesRead){  this.bytesRead.getAndAdd(bytesRead);}  }
class C{  public void startNonText(StylesheetHandler handler) throws org.xml.sax.SAXException {}  }
class C{  public boolean verifySignature(java.lang.String data,byte[] signature,java.lang.String algorithm,java.security.cert.X509Certificate cert) throws FSSignatureException {  return sp.verifySignature(data,signature,algorithm,cert);}  }
class C{  public boolean matches(Line.Info info){  if (!(super.matches(info))) {    return false;  }  if (!(name.equals(((Info)info).getName()))) {    return false;  }  if (!(isSource == ((Info)info).isSource())) {    return false;  }  return true;}  }
class C{  public boolean isAdvancedMode(){  return false;}  }
class C{  public boolean remove(Object attrval){  int i=find(attrval);  if (i >= 0) {    values.removeElementAt(i);    return true;  }  return false;}  }
class C{  public static byte[] decodeBase64(String base64String) throws XMPException {  try {    return Base64.decode(base64String.getBytes());  } catch (  Throwable e) {    throw new XMPException("Invalid base64 string",XMPError.BADVALUE,e);  }}  }
class C{  public boolean containsActionName(String actionName){  return (getActionNames().contains(actionName));}  }
class C{  private String fieldTypeCardinalityComment(Field field,PythonImportHandler importHandler){  return typeCardinalityComment(field.getType(),importHandler);}  }
class C{  protected void paintDragWindow(Graphics g){  g.setColor(dragWindow.getBackground());  int w=dragWindow.getWidth();  int h=dragWindow.getHeight();  g.fillRect(0,0,w,h);  g.setColor(dragWindow.getBorderColor());  g.drawRect(0,0,w - 1,h - 1);}  }
class C{  public FileAlterationMonitor(){  this(10000);}  }
class C{  public static int classModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| FINAL| STRICT;}  }
class C{  public PersistentCookieModuleWrapper(){  this(new ServletJwtSessionModule(),new AMKeyProvider());}  }
class C{  public CoreAttributesModelImpl(HttpServletRequest req,String serviceName,Map map) throws AMConsoleException {  super(req,serviceName,map);  currentRealm=(String)map.get(AMAdminConstants.CURRENT_REALM);  if (currentRealm == null) {    debug.warning("resetting realm in CoreAttributeModel");    currentRealm="/";  }}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  private void checkForClearedConflict(PostOperationOperation op){  OperationType type=op.getOperationType();  if (op.getResultCode() != ResultCode.SUCCESS) {    return;  }  DN freedDN;  if (type == OperationType.DELETE) {    freedDN=((PostOperationDeleteOperation)op).getEntryDN();  } else   if (type == OperationType.MODIFY_DN) {    freedDN=((PostOperationModifyDNOperation)op).getEntryDN();  } else {    return;  }  SearchFilter filter;  try {    filter=LDAPFilter.createEqualityFilter(DS_SYNC_CONFLICT,ByteString.valueOfUtf8(freedDN.toString())).toSearchFilter();  } catch (  DirectoryException e) {    logger.traceException(e);    return;  }  SearchRequest request=newSearchRequest(getBaseDN(),SearchScope.WHOLE_SUBTREE,filter).addAttribute(USER_AND_REPL_OPERATIONAL_ATTRS);  InternalSearchOperation searchOp=conn.processSearch(request);  Entry entryToRename=null;  CSN entryToRenameCSN=null;  for (  SearchResultEntry entry : searchOp.getSearchEntries()) {    EntryHistorical history=EntryHistorical.newInstanceFromEntry(entry);    if (entryToRename == null) {      entryToRename=entry;      entryToRenameCSN=history.getDNDate();    } else     if (!history.addedOrRenamedAfter(entryToRenameCSN)) {      entryToRename=entry;      entryToRenameCSN=history.getDNDate();    }  }  if (entryToRename != null) {    DN entryDN=entryToRename.getName();    ModifyDNOperation newOp=renameEntry(entryDN,freedDN.rdn(),freedDN.parent(),false);    ResultCode res=newOp.getResultCode();    if (res != ResultCode.SUCCESS) {      logger.error(ERR_COULD_NOT_SOLVE_CONFLICT,entryDN,res);    }  }}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSAuthnResponse.signXML: Called");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponse.signXML: the assertion is " + "already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() == 0) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,IFSConstants.DEF_SIG_ALGO,IFSConstants.ID,this.id,false);    } else     if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,IFSConstants.DEF_SIG_ALGO,IFSConstants.RESPONSE_ID,this.getResponseID(),false);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("invalid minor version.");      }    }    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;    xmlString=this.toXMLString(true,true);  } catch (  Exception e) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"signFailed",null);  }}  }
class C{  public int count(){  return vinfo_list.size();}  }
class C{  private Polyline skip_lines(Polyline p_polyline){  for (int index=1; index < p_polyline.plaline_len(-3); ++index) {    for (int jndex=0; jndex <= 1; ++jndex) {      PlaPointFloat corner1;      PlaPointFloat corner2;      PlaLineInt curr_line;      if (jndex == 0) {        curr_line=p_polyline.plaline(index + 2);        corner1=p_polyline.corner_approx(index);        corner2=p_polyline.corner_approx(index - 1);      } else {        curr_line=p_polyline.plaline(index);        corner1=p_polyline.corner_approx(index + 1);        corner2=p_polyline.corner_approx(index + 2);      }      PlaSide side1=curr_line.side_of(corner1);      PlaSide side2=curr_line.side_of(corner2);      if (side1 != side2) {        Polyline reduced_polyline=new Polyline(p_polyline.plaline_skip(index + 1,index + 1));        if (reduced_polyline.plaline_len() == p_polyline.plaline_len(-1)) {          int shape_no=index - 1;          if (jndex == 0) {            ++shape_no;          }          ShapeTile shape_to_check=reduced_polyline.offset_shape(curr_half_width,shape_no);          if (r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins)) {            r_board.changed_area.join(corner1,curr_layer);            r_board.changed_area.join(corner2,curr_layer);            return reduced_polyline;          }        }      }      if (index >= p_polyline.plaline_len(-4))       break;      PlaPointFloat corner3;      if (jndex == 1) {        corner3=p_polyline.corner_approx(index + 3);      } else {        corner3=p_polyline.corner_approx(index + 1);      }      if (jndex == 0) {        curr_line=p_polyline.plaline(index + 3);        side1=curr_line.side_of(corner1);        side2=curr_line.side_of(corner2);      } else {        side1=curr_line.side_of(corner3);      }      if (side1 != side2) {        Polyline reduced_polyline=new Polyline(p_polyline.plaline_skip(index + 1,index + 2));        if (reduced_polyline.plaline_len() == p_polyline.plaline_len(-2)) {          int shape_no=index - 1;          if (jndex == 0)           ++shape_no;          ShapeTile shape_to_check=reduced_polyline.offset_shape(curr_half_width,shape_no);          if (r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins)) {            r_board.changed_area.join(corner1,curr_layer);            r_board.changed_area.join(corner2,curr_layer);            r_board.changed_area.join(corner3,curr_layer);            return reduced_polyline;          }        }      }    }  }  return p_polyline;}  }
class C{  public int markInputPosition(){  return ptr;}  }
class C{  private SessionIDCorrector generateAutocorrect(String mapping){  Map<String,String> serverToSite=new HashMap<>();  for (  String line : mapping.split("\\|")) {    if (line.isEmpty()) {      continue;    }    String[] parts=line.trim().split(",");    serverToSite.put(parts[0],parts[1].equals("--") ? null : parts[1]);  }  return new SessionIDCorrector(serverToSite);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzPushbackPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead < 0) {    return true;  } else {    zzEndRead+=numRead;    return false;  }}  }
class C{  public AMModelBase(HttpServletRequest req,Map map){  mapUserInfo=map;  initialize(req,null);}  }
class C{  public final boolean equals(Object node){  try {    return equals((Node)node);  } catch (  ClassCastException cce) {    return false;  }}  }
class C{  public static void main(String args[]) throws Exception {  if (args.length != 1) {    System.out.println("Usage: java HexToBase64 <Hex_encoded_id>");    return;  }  Base64 encoder=new Base64();  String hexString=args[0];  int read=hexString.length();  byte[] byteArray=new byte[read / 2];  for (int i=0, j=0; i < read; i++, j++) {    String part=hexString.substring(i,i + 2);    byteArray[j]=new Short(Integer.toString(Integer.parseInt(part,16))).byteValue();    i++;  }  try {    String encodedID=encoder.encode(byteArray).trim();    System.out.println(encodedID);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void startElement(){  nss.pushContext();  inCollectingMode=true;}  }
class C{  private E unlinkFirst(Node<E> f){  final E element=f.item;  final Node<E> next=f.next;  f.item=null;  f.next=null;  first=next;  if (next == null)   last=null; else   next.prev=null;  size--;  modCount++;  return element;}  }
class C{  public String put(String url,String json,Map<String,String> headers,final int expectedStatusCode){  HttpPut put=new HttpPut(url);  if (json != null) {    put.setEntity(new StringEntity(json,ContentType.APPLICATION_JSON));  }  setHeaders(put,headers);  return method(put,expectedStatusCode);}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  address.encode(retval);  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty()) {    retval=retval.append(SEMICOLON);    retval=this.parameters.encode(retval);  }  return retval;}  }
class C{  protected void decodeHeader(byte allowedType,ByteArrayScanner scanner) throws DataFormatException {  final byte msgType=scanner.nextByte();  if (allowedType != msgType) {    throw new DataFormatException("byte[] is not a valid update msg: " + msgType);  }  protocolVersion=scanner.nextByte();  csn=scanner.nextCSNUTF8();  assuredFlag=scanner.nextBoolean();  assuredMode=AssuredMode.valueOf(scanner.nextByte());  safeDataLevel=scanner.nextByte();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  String childValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.setNodeValue("Marilyn Martin");  childData=child.getData();  assertEquals("data","Marilyn Martin",childData);  childValue=child.getNodeValue();  assertEquals("value","Marilyn Martin",childValue);}  }
class C{  public static String byteArrayToHexString(byte[] byteArray){  int readBytes=byteArray.length;  StringBuffer hexData=new StringBuffer();  int onebyte;  for (int i=0; i < readBytes; i++) {    onebyte=((0x000000ff & byteArray[i]) | 0xffffff00);    hexData.append(Integer.toHexString(onebyte).substring(6));  }  return hexData.toString();}  }
class C{  @SuppressWarnings("unchecked") private EnvironmentCondition matchEnvironment(Map env,SSOToken token) throws EntitlementException, SSOException {  if (debug.messageEnabled()) {    localDebugName=debugName + ".matchEnvironment(): ";  }  EnvironmentCondition matchingCondition=null;  final List<EnvironmentCondition> conditions=parseConditions(resourceEnvIPConditionValue);  for (  EnvironmentCondition condition : conditions) {    final String envParamName=condition.paramName;    final String envParamValue=condition.paramValue;    Set<String> envSet=(Set<String>)env.get(envParamName);    if (!CollectionUtils.isEmpty(envSet)) {      for (      String strEnv : envSet) {        if ((strEnv != null) && (strEnv.equalsIgnoreCase(envParamValue))) {          matchingCondition=condition;          break;        }      }    } else {      String strIP=null;      Object object=env.get(REQUEST_IP);      if (object instanceof Set) {        Set ipSet=(Set)object;        if (ipSet.isEmpty()) {          if (token != null) {            strIP=token.getIPAddress().getHostAddress();          } else {            throw new EntitlementException(CLIENT_IP_EMPTY);          }        } else {          Iterator names=ipSet.iterator();          strIP=(String)names.next();        }      } else       if (object instanceof String) {        strIP=(String)object;        if (StringUtils.isBlank(strIP)) {          if (token != null) {            strIP=token.getIPAddress().getHostAddress();          } else {            throw new EntitlementException(CLIENT_IP_EMPTY);          }        }      }      long requestIpV4=0;      IPv6Address requestIpV6=null;      if (ValidateIPaddress.isIPv4(strIP)) {        requestIpV4=stringToIp(strIP);      } else       if (ValidateIPaddress.isIPv6(strIP)) {        requestIpV6=IPv6Address.fromString(strIP);      } else {        if (debug.messageEnabled()) {          debug.message(localDebugName + "invalid strIP : " + strIP);        }        continue;      }      int bIndex=envParamValue.indexOf("[");      int lIndex=envParamValue.indexOf("]");      String ipVal=envParamValue.substring(bIndex + 1,lIndex);      if (ipVal.contains("-")) {        StringTokenizer stIP=new StringTokenizer(ipVal,"-");        int tokenCnt=stIP.countTokens();        if (tokenCnt > 2) {          throw new EntitlementException(INVALID_PROPERTY_VALUE,new String[]{ipVal});        }        String startIp=stIP.nextToken();        String endIp=startIp;        if (tokenCnt == 2) {          endIp=stIP.nextToken();        }        if (ValidateIPaddress.isIPv4(strIP) && ValidateIPaddress.isIPv4(startIp) && ValidateIPaddress.isIPv4(endIp)) {          long lStartIP=stringToIp(startIp);          long lEndIP=stringToIp(endIp);          if ((requestIpV4 >= lStartIP) && (requestIpV4 <= lEndIP)) {            matchingCondition=condition;            break;          }        } else         if (ValidateIPaddress.isIPv6(strIP) && ValidateIPaddress.isIPv6(startIp) && ValidateIPaddress.isIPv6(endIp)) {          IPv6AddressRange ipv6Range=IPv6AddressRange.fromFirstAndLast(IPv6Address.fromString(startIp),IPv6Address.fromString(endIp));          if (requestIpV6 != null && ipv6Range.contains(requestIpV6)) {            matchingCondition=condition;            break;          }        } else {          if (debug.errorEnabled()) {            debug.error(debugName + ".matchEnvironment(): invalid property value, " + strIP);          }          throw new EntitlementException(INVALID_PROPERTY_VALUE,new String[]{strIP});        }      } else       if (requestIpV4 != 0 && ValidateIPaddress.isIPv4(ipVal)) {        long longIp=stringToIp(ipVal);        if (requestIpV4 == longIp) {          matchingCondition=condition;          break;        }      } else       if (requestIpV6 != null && ValidateIPaddress.isIPv6(ipVal)) {        IPv6Address iPv6AddressIpVal=IPv6Address.fromString(ipVal);        if (iPv6AddressIpVal.compareTo(requestIpV6) == 0) {          matchingCondition=condition;          break;        }      } else       if (ipVal.contains("*")) {        matchingCondition=condition;        break;      } else {        throw new EntitlementException(RESOURCE_ENV_NOT_KNOWN,new String[]{ipVal});      }    }  }  return matchingCondition;}  }
class C{  protected void addImports(Stylesheet stylesheet,boolean addToList,Vector importList){  int n=stylesheet.getImportCount();  if (n > 0) {    for (int i=0; i < n; i++) {      Stylesheet imported=stylesheet.getImport(i);      addImports(imported,true,importList);    }  }  n=stylesheet.getIncludeCount();  if (n > 0) {    for (int i=0; i < n; i++) {      Stylesheet included=stylesheet.getInclude(i);      addImports(included,false,importList);    }  }  if (addToList)   importList.addElement(stylesheet);}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    Collection<? extends GrantedAuthority> authorities=authentication.getAuthorities();    if (authorities != null) {      for (      GrantedAuthority authority : authorities) {        if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  public static HostPort toHostPort(String ldapUrl) throws LdapException {  try {    URI uri=new URI(ldapUrl);    return new HostPort(uri.getHost(),uri.getPort());  } catch (  URISyntaxException e) {    throw newLdapException(CLIENT_SIDE_PARAM_ERROR,e.getLocalizedMessage() + ". LDAP URL was: \"" + ldapUrl+ "\"");  }}  }
class C{  public boolean isSignificant(){  Enumeration cursor=edits.elements();  while (cursor.hasMoreElements()) {    if (((UndoableEdit)cursor.nextElement()).isSignificant()) {      return true;    }  }  return false;}  }
class C{  public UndoableEditEvent(Object source,UndoableEdit edit){  super(source);  myEdit=edit;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattributens03.class,args);}  }
class C{  protected String toXML(){  StringBuilder sb=new StringBuilder(100);  sb.append("\n").append(SUBJECTS_ELEMENT_BEGIN).append(XMLUtils.escapeSpecialCharacters(name)).append(SUBJECTS_DESCRIPTION).append(XMLUtils.escapeSpecialCharacters(description)).append("\">");  Iterator items=users.keySet().iterator();  while (items.hasNext()) {    String subjectName=(String)items.next();    QualifiedSubject qualifiedSubject=(QualifiedSubject)users.get(subjectName);    boolean realmSubject=qualifiedSubject.isRealmSubject();    if (realmSubject) {      sb.append("\n").append(REALM_SUBJECT_ELEMENT).append(XMLUtils.escapeSpecialCharacters(subjectName)).append("\" ").append(INCLUDE_TYPE).append("=\"").append(qualifiedSubject.isExclusive() ? EXCLUSIVE_TYPE : INCLUSIVE_TYPE).append(REALM_SUBJECT_ELEMENT_END);    } else {      Subject subject=qualifiedSubject.getSubject();      sb.append("\n").append(SUBJECT_ELEMENT).append(XMLUtils.escapeSpecialCharacters(subjectName)).append(SUBJECT_TYPE).append(XMLUtils.escapeSpecialCharacters(SubjectTypeManager.subjectTypeName(subject))).append("\" ").append(INCLUDE_TYPE).append("=\"").append(qualifiedSubject.isExclusive() ? EXCLUSIVE_TYPE : INCLUSIVE_TYPE).append("\">");      Set v=subject.getValues();      if ((v != null) && !v.isEmpty()) {        sb.append("\n").append(ATTR_VALUE_BEGIN);        Iterator values=v.iterator();        while (values.hasNext()) {          sb.append(VALUE_BEGIN).append(XMLUtils.escapeSpecialCharacters((String)values.next())).append(VALUE_END);        }        sb.append("\n").append(ATTR_VALUE_END);      }      sb.append("\n").append(SUBJECT_ELEMENT_END);    }  }  sb.append("\n").append(SUBJECTS_ELEMENT_END);  return (sb.toString());}  }
class C{  public void processLocalSearch(LocalBackendWorkflowElement wfe) throws CanceledOperationException {  this.backend=wfe.getBackend();  this.clientConnection=getClientConnection();  checkIfCanceled(false);  try {    AtomicBoolean executePostOpPlugins=new AtomicBoolean(false);    processSearch(executePostOpPlugins);    checkIfCanceled(false);    if (executePostOpPlugins.get()) {      processOperationResult(this,getPluginConfigManager().invokePostOperationSearchPlugins(this));    }  }  finally {    LocalBackendWorkflowElement.filterNonDisclosableMatchedDN(this);  }}  }
class C{  public static Feature fromGeometry(Geometry geometry,JsonObject properties){  return new Feature(geometry,properties,null);}  }
class C{  public String unmarshal(String text){  if (text == null)   return null;  int len=text.length();  int s=0;  while (s < len) {    if (isWhiteSpace(text.charAt(s)))     break;    s++;  }  if (s == len)   return text;  StringBuilder result=new StringBuilder(len);  if (s != 0) {    for (int i=0; i < s; i++)     result.append(text.charAt(i));    result.append(' ');  }  boolean inStripMode=true;  for (int i=s + 1; i < len; i++) {    char ch=text.charAt(i);    boolean b=isWhiteSpace(ch);    if (inStripMode && b)     continue;    inStripMode=b;    if (inStripMode)     result.append(' '); else     result.append(ch);  }  len=result.length();  if (len > 0 && result.charAt(len - 1) == ' ')   result.setLength(len - 1);  return result.toString();}  }
class C{  public boolean isAlive(){  return !socket.isClosed() && !socket.isInputShutdown() && !socket.isOutputShutdown();}  }
class C{  public void clearPasswordHistory(){  logger.trace("Clearing password history for user %s",userDNString);  clearAttribute(OP_ATTR_PWPOLICY_HISTORY_LC);}  }
class C{  public void test_wrap_ByteBuffer$ByteBuffer_02(){  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10).asReadOnlyBuffer();  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbA,bb);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of ReadOnlyBufferException");  }}  }
class C{  private void execute(Operation operation) throws CanceledOperationException {switch (operation.getOperationType()) {case BIND:    new LocalBackendBindOperation((BindOperation)operation).processLocalBind(this);  break;case SEARCH:new LocalBackendSearchOperation((SearchOperation)operation).processLocalSearch(this);break;case ADD:new LocalBackendAddOperation((AddOperation)operation).processLocalAdd(this);break;case DELETE:new LocalBackendDeleteOperation((DeleteOperation)operation).processLocalDelete(this);break;case MODIFY:new LocalBackendModifyOperation((ModifyOperation)operation).processLocalModify(this);break;case MODIFY_DN:new LocalBackendModifyDNOperation((ModifyDNOperation)operation).processLocalModifyDN(this);break;case COMPARE:new LocalBackendCompareOperation((CompareOperation)operation).processLocalCompare(this);break;case ABANDON:break;default :throw new AssertionError("Attempted to execute an invalid operation type: " + operation.getOperationType() + " ("+ operation+ ")");}}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiTableHeaderUI();  return MultiLookAndFeel.createUIs(mui,((MultiTableHeaderUI)mui).uis,a);}  }
class C{  public void scrollToTop(){  if (mScrollbar.isThumbDetached()) {    mScrollbar.reattachThumbToScroll();  }  scrollToPosition(0);}  }
class C{  public int hashCode(){  return impl.hashCode();}  }
class C{  public boolean clickedOnMarker(float x,float y,float pointClickRadius,OverScroller scroller,int duration){  for (int i=0; i < pointsCountWithinXRange * 2; i+=2) {    float pointX=getDrawX(xRangePoints[i]);    float pointY=getDrawY(xRangePoints[i + 1]);    float xDiff=Math.abs(x - pointX);    float yDiff=Math.abs(y - pointY);    if (xDiff < pointClickRadius && yDiff < pointClickRadius) {      scrollXTo(scroller,pointX,duration);      return true;    }  }  return false;}  }
class C{  public boolean isChunked(){  return (buffer == null) && wrappedEntity.isChunked();}  }
class C{  public AddMsg(CSN csn,DN dn,String uniqueId,String parentId,Attribute objectClass,Iterable<Attribute> userAttributes,Iterable<Attribute> operationalAttributes){  super(csn,uniqueId,dn);  this.parentEntryUUID=parentId;  this.encodedAttributes=encodeAttributes(objectClass,userAttributes,operationalAttributes);}  }
class C{  void logSearchResultReference(SearchOperation searchOperation,SearchResultReference searchReference){}  }
class C{  public Scroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  if (interpolator == null) {    mInterpolator=new ViscousFluidInterpolator();  } else {    mInterpolator=interpolator;  }  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;  mPhysicalCoeff=computeDeceleration(0.84f);}  }
class C{  @SuppressWarnings("unused") protected void onDraw(Canvas canvas){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS07.class,args);}  }
class C{  private boolean removeRepoListName(String name,String id,String list) throws JobPersistenceException, ResourceException {synchronized (lock) {    logger.trace("Removing name: {} from {}",name,id);    JsonValue map=getOrCreateRepo(id);    String rev=map.get("_rev").asString();    List<String> names=map.get(list).asList(String.class);    if (names == null) {      names=new ArrayList<>();      map.put(list,names);    }    boolean result=names.remove(name);    if (result) {      getRepositoryService().update(Requests.newUpdateRequest(id,map).setRevision(rev));    }    return result;  }}  }
class C{  public void reset(){  allowToChange=true;}  }
class C{  private String[] newLDIFEntries(int entriesCnt){  char bigAttributeValue[]=new char[30240];  for (int i=0; i < bigAttributeValue.length; i++) {    bigAttributeValue[i]=Integer.toString(i).charAt(0);  }  String[] entries=new String[entriesCnt + 2];  entries[0]="dn: " + EXAMPLE_DN + "\n"+ "objectClass: top\n"+ "objectClass: domain\n"+ "dc: example\n"+ "entryUUID: 21111111-1111-1111-1111-111111111111\n"+ "\n";  entries[1]="dn: ou=People," + EXAMPLE_DN + "\n"+ "objectClass: top\n"+ "objectClass: organizationalUnit\n"+ "ou: People\n"+ "entryUUID: 21111111-1111-1111-1111-111111111112\n"+ "\n";  String filler="000000000000000000000000000000000000";  for (int i=0; i < entriesCnt; i++) {    String useri="0000" + i;    entries[i + 2]="dn: cn=" + useri + ",ou=people,"+ EXAMPLE_DN+ "\n"+ "objectclass: top\n"+ "objectclass: person\n"+ "objectclass: organizationalPerson\n"+ "objectclass: inetOrgPerson\n"+ "cn: "+ useri+ "_cn"+ "\n"+ "sn: "+ useri+ "_sn"+ "\n"+ "uid: "+ useri+ "_uid"+ "\n"+ "description:: "+ Base64.encode(new String(bigAttributeValue).getBytes())+ "\n"+ "entryUUID: 21111111-1111-1111-1111-"+ useri+ filler.substring(0,12 - useri.length())+ "\n"+ "\n";  }  return entries;}  }
class C{  public static void updateStationToDb(Context context,String stationName,int oldStationFreq,int newStationFreq,int stationType){  final int size=3;  ContentValues values=new ContentValues(size);  values.put(Station.COLUMN_STATION_NAME,stationName);  values.put(Station.COLUMN_STATION_FREQ,newStationFreq);  values.put(Station.COLUMN_STATION_TYPE,stationType);  context.getContentResolver().update(Station.CONTENT_URI,values,Station.COLUMN_STATION_FREQ + "=? AND " + Station.COLUMN_STATION_TYPE+ "=?",new String[]{String.valueOf(oldStationFreq),String.valueOf(stationType)});  Log.d(TAG,"FmRadioStation.updateStationToDb: name = " + stationName + ", new freq = "+ newStationFreq);}  }
class C{  public void testIntValueNegative2(){  byte aBytes[]={-12,56,100};  int result=-771996;  int aNumber=new BigInteger(aBytes).intValue();  assertTrue(aNumber == result);}  }
class C{  public FakeReplicationServer(int port,int serverId,boolean assured,AssuredMode assuredMode,int safeDataLevel,int groupId,DN baseDN,long generationId){  this.port=port;  this.serverId=serverId;  this.baseDN=baseDN;  this.generationId=generationId;  this.groupId=(byte)groupId;  this.isAssured=assured;  this.assuredMode=assuredMode;  this.safeDataLevel=(byte)safeDataLevel;  gen=new CSNGenerator(serverId + 10,0L);}  }
class C{  @Inject public ConnectClientRegistration(OpenIdConnectClientRegistrationService clientRegistrationService,OAuth2RequestFactory requestFactory,ExceptionHandler exceptionHandler,JacksonRepresentationFactory jacksonRepresentationFactory){  this.clientRegistrationService=clientRegistrationService;  this.requestFactory=requestFactory;  this.exceptionHandler=exceptionHandler;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  public static void importServiceData(List<String> fileList) throws UpgradeException {  String classMethod="UpgradeUtils:importServiceData : ";  if (debug.messageEnabled()) {    debug.message(classMethod + "Import Service Data :" + fileList);  }  System.out.println(bundle.getString("upg-import-service-data") + fileList);  int len=fileList.size();  String[] args=new String[7 + len];  args[0]="--runasdn";  args[1]=bindDN;  args[2]="-w";  args[3]=bindPasswd;  args[4]="-c";  args[5]="-v";  args[6]="-t";  for (int i=0; i < len; i++) {    args[7 + i]=fileList.get(i);  }  invokeAdminCLI(args);}  }
class C{  public synchronized void ensureTestDocussandraRunning(boolean mockCassandra) throws Exception {  if (restExpressRunning == false) {    LOGGER.info("Starting RestExpress server...");    if (mockCassandra) {      Fixtures.ensureMockCassandraRunningAndEstablished("docussandra");      String[] params=new String[1];      params[0]="local_test";      server=Main.initializeServer(params,null);    } else {      server=Main.initializeServer(new String[0],null);    }    restExpressRunning=true;  }}  }
class C{  private ContextHolder startAuthProcess(ContextHolder holder,RadiusResponse response,UserNameAttribute usrAtt,String credential){  LOG.message("Entering OpenAMAuthHandler.startAuthProcess");  try {    holder.setAuthContext(amAuthFactory.getAuthContext(realm));  } catch (  final AuthLoginException e) {    LOG.error("Unable to start create " + AuthContext.class.getName() + ". Denying Access.",e);    rejectAccessAndTerminateProcess(response,holder);    LOG.message("Leaving OpenAMAuthHandler.startAuthProcess");    return holder;  }  try {    holder.getAuthContext().login(AuthContext.IndexType.SERVICE,authChain);  } catch (  final AuthLoginException e) {    LOG.error("Unable to start login process. Denying Access.",e);    rejectAccessAndTerminateProcess(response,holder);    LOG.message("Leaving OpenAMAuthHandler.startAuthProcess");    return holder;  }  if (!isNextCallbackSetAvailable(response,holder)) {    if (holder.getAuthPhase() != ContextHolder.AuthPhase.TERMINATED) {      LOG.error("Unable to start login process. No callbacks available. Denying Access.");      rejectAccessAndTerminateProcess(response,holder);    }    LOG.message("Leaving OpenAMAuthHandler.startAuthProcess");    return holder;  }  boolean injectedUsr=false;  boolean injectedPwd=false;  final Callback[] callbacks=holder.getCallbacks();  for (int i=holder.getIdxOfCurrentCallback(); i < callbacks.length; i++) {    if (callbacks[i] instanceof NameCallback) {      holder.incrementIdxOfCurrentCallback();      final NameCallback nm=(NameCallback)callbacks[i];      nm.setName(usrAtt.getName());      injectedUsr=true;    } else     if (callbacks[i] instanceof PasswordCallback) {      holder.incrementIdxOfCurrentCallback();      final PasswordCallback pc=(PasswordCallback)callbacks[i];      pc.setPassword(credential.toCharArray());      injectedPwd=true;    } else {      holder.incrementIdxOfCurrentCallback();    }  }  if (injectedUsr && injectedPwd) {    holder.getAuthContext().submitRequirements(callbacks);    holder.setCallbacks(null);  } else {    final String msg="First callback set for first module" + (holder.getModuleName() != null ? " '" + holder.getModuleName() + "'" : "") + " in authentication chain '"+ this.authChain+ "' does not support Username and Password callbacks. Denying Access.";    LOG.error(msg);    rejectAccessAndTerminateProcess(response,holder);  }  holder.setAuthPhase(ContextHolder.AuthPhase.GATHERING_INPUT);  LOG.message("Leaving OpenAMAuthHandler.startAuthProcess");  return holder;}  }
class C{  private void changePositionInList(int i,int j){  Point p=listViews.get(i).getPoint();  listViews.get(i).setPoint(listViews.get(j).getPoint());  listViews.get(j).setPoint(new Point(p.x,p.y));}  }
class C{  static final int hash(Object key){  int h;  return (key == null) ? 0 : (h=key.hashCode()) ^ (h >>> 16);}  }
class C{  public void changePwd(String userId,String oldpwd,String newpwd) throws AMConsoleException {  String[] params={userId,AMAdminConstants.ATTR_USER_OLD_PASSWORD};  try {    logEvent("ATTEMPT_MODIFY_IDENTITY_ATTRIBUTE_VALUE",params);    AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),userId);    amid.changePassword(oldpwd,newpwd);    logEvent("SUCCEED_MODIFY_IDENTITY_ATTRIBUTE_VALUE",params);  } catch (  SSOException e) {    String strError=getErrorString(e);    String[] paramsEx={userId,AMAdminConstants.ATTR_USER_OLD_PASSWORD,strError};    logEvent("SSO_EXCEPTION_MODIFY_IDENTITY_ATTRIBUTE_VALUE",paramsEx);    throw new AMConsoleException(strError);  }catch (  IdRepoException e) {    String strError=getErrorString(e);    String[] paramsEx={userId,AMAdminConstants.ATTR_USER_OLD_PASSWORD,strError};    logEvent("IDM_EXCEPTION_MODIFY_IDENTITY_ATTRIBUTE_VALUE",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public AffineTransform(double m00,double m10,double m01,double m11,double m02,double m12){  this.m00=m00;  this.m10=m10;  this.m01=m01;  this.m11=m11;  this.m02=m02;  this.m12=m12;  updateState();}  }
class C{  public static boolean isEqual(byte[] digesta,byte[] digestb){  if (digesta.length != digestb.length) {    return false;  }  for (int i=0; i < digesta.length; i++) {    if (digesta[i] != digestb[i]) {      return false;    }  }  return true;}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public CHAPChallengeAttribute(String challenge){  super(OctetUtils.toOctets(AttributeType.CHAP_CHALLENGE,challenge));  str=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public void insertNodeInto(MutableTreeNode newChild,MutableTreeNode parent,int index){  parent.insert(newChild,index);  int[] newIndexs=new int[1];  newIndexs[0]=index;  nodesWereInserted(parent,newIndexs);}  }
class C{  protected void createMBeans(String name,UserDatabase database) throws Exception {  if (log.isDebugEnabled()) {    log.debug("Creating UserDatabase MBeans for resource " + name);    log.debug("Database=" + database);  }  try {    MBeanUtils.createMBean(database);  } catch (  Exception e) {    throw new IllegalArgumentException("Cannot create UserDatabase MBean for resource " + name,e);  }  Iterator<Role> roles=database.getRoles();  while (roles.hasNext()) {    Role role=roles.next();    if (log.isDebugEnabled()) {      log.debug("  Creating Role MBean for role " + role);    }    try {      MBeanUtils.createMBean(role);    } catch (    Exception e) {      throw new IllegalArgumentException("Cannot create Role MBean for role " + role,e);    }  }  Iterator<Group> groups=database.getGroups();  while (groups.hasNext()) {    Group group=groups.next();    if (log.isDebugEnabled()) {      log.debug("  Creating Group MBean for group " + group);    }    try {      MBeanUtils.createMBean(group);    } catch (    Exception e) {      throw new IllegalArgumentException("Cannot create Group MBean for group " + group,e);    }  }  Iterator<User> users=database.getUsers();  while (users.hasNext()) {    User user=users.next();    if (log.isDebugEnabled()) {      log.debug("  Creating User MBean for user " + user);    }    try {      MBeanUtils.createMBean(user);    } catch (    Exception e) {      throw new IllegalArgumentException("Cannot create User MBean for user " + user,e);    }  }}  }
class C{  public Fragment createFragment(Context context,String type,Bundle arguments){  String fragmentName=mTypeFragmentNameMap.get(type);  Fragment fragment=null;  if (fragmentName != null && fragmentName.length() > 0) {    fragment=Fragment.instantiate(context,fragmentName);    if (arguments != null) {      fragment.setArguments(arguments);    }  }  return fragment;}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (tabSize == 0)   return x;  int ntabs=((int)x - tabBase) / tabSize;  return tabBase + ((ntabs + 1) * tabSize);}  }
class C{  public void reset(){  mLabelCache.clear();}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  private void handleRequestControls() throws DirectoryException {  LocalBackendWorkflowElement.evaluateProxyAuthControls(this);  LocalBackendWorkflowElement.removeAllDisallowedControls(entryDN,this);  for (  Control c : getRequestControls()) {    final String oid=c.getOID();    if (OID_LDAP_ASSERTION.equals(oid)) {      LDAPAssertionRequestControl assertControl=getRequestControl(LDAPAssertionRequestControl.DECODER);      SearchFilter filter;      try {        filter=assertControl.getSearchFilter();      } catch (      DirectoryException de) {        logger.traceException(de);        throw newDirectoryException(entry,de.getResultCode(),ERR_COMPARE_CANNOT_PROCESS_ASSERTION_FILTER.get(entryDN,de.getMessageObject()));      }      if (!getAccessControlHandler().isAllowed(this,entry,filter)) {        throw new DirectoryException(ResultCode.INSUFFICIENT_ACCESS_RIGHTS,ERR_CONTROL_INSUFFICIENT_ACCESS_RIGHTS.get(oid));      }      try {        if (!filter.matchesEntry(entry)) {          throw newDirectoryException(entry,ResultCode.ASSERTION_FAILED,ERR_COMPARE_ASSERTION_FAILED.get(entryDN));        }      } catch (      DirectoryException de) {        if (de.getResultCode() == ResultCode.ASSERTION_FAILED) {          throw de;        }        logger.traceException(de);        throw newDirectoryException(entry,de.getResultCode(),ERR_COMPARE_CANNOT_PROCESS_ASSERTION_FILTER.get(entryDN,de.getMessageObject()));      }    } else     if (LocalBackendWorkflowElement.isProxyAuthzControl(oid)) {      continue;    } else     if (c.isCritical() && (backend == null || !backend.supportsControl(oid))) {      throw new DirectoryException(ResultCode.UNAVAILABLE_CRITICAL_EXTENSION,ERR_COMPARE_UNSUPPORTED_CRITICAL_CONTROL.get(entryDN,oid));    }  }}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  @Override public ThaiBuddhistDate dateYearDay(int prolepticYear,int dayOfYear){  return new ThaiBuddhistDate(LocalDate.ofYearDay(prolepticYear - YEARS_DIFFERENCE,dayOfYear));}  }
class C{  public NSNumber(double d){  longValue=(long)(doubleValue=d);  type=REAL;}  }
class C{  private void configureButton(JButton button){  Font buttonFont=(Font)DefaultLookup.get(optionPane,this,"OptionPane.buttonFont");  if (buttonFont != null) {    button.setFont(buttonFont);  }}  }
class C{  private static Attribute makeAttrFromServerProperty(ServerProperty property,Object value){switch (property) {case INSTANCE_PUBLIC_KEY_CERTIFICATE:    return null;case GROUPS:  return new LinkedAttribute(ServerProperty.GROUPS.getAttributeName(),((Collection<?>)value));default :return new LinkedAttribute(property.getAttributeName(),value);}}  }
class C{  public DLSequence(ASN1EncodableVector v){  super(v);}  }
class C{  private void updateSchemaFromConfiguration(final SchemaBuilder schemaBuilder,final CoreSchemaCfg configuration){  schemaBuilder.setOption(ALLOW_ZERO_LENGTH_DIRECTORY_STRINGS,configuration.isAllowZeroLengthValuesDirectoryString()).setOption(STRICT_FORMAT_FOR_COUNTRY_STRINGS,configuration.isStrictFormatCountryString()).setOption(STRIP_UPPER_BOUND_FOR_ATTRIBUTE_TYPE,configuration.isStripSyntaxMinUpperBoundAttributeTypeDescription()).setOption(ALLOW_MALFORMED_JPEG_PHOTOS,!configuration.isStrictFormatJPEGPhotos()).setOption(ALLOW_MALFORMED_CERTIFICATES,!configuration.isStrictFormatCertificates()).setOption(ALLOW_NON_STANDARD_TELEPHONE_NUMBERS,!configuration.isStrictFormatTelephoneNumbers()).setOption(ALLOW_ATTRIBUTE_TYPES_WITH_NO_SUP_OR_SYNTAX,configuration.isAllowAttributeTypesWithNoSupOrSyntax());switch (configuration.getJsonValidationPolicy()) {case DISABLED:    schemaBuilder.setOption(VALIDATION_POLICY,DISABLED);  break;case LENIENT:schemaBuilder.setOption(VALIDATION_POLICY,LENIENT);break;case STRICT:schemaBuilder.setOption(VALIDATION_POLICY,STRICT);break;}for (final String oid : configuration.getDisabledMatchingRule()) {if (!oid.equals(NONE_ELEMENT)) {schemaBuilder.removeMatchingRule(oid);}}for (final String oid : configuration.getDisabledSyntax()) {if (!oid.equals(NONE_ELEMENT)) {schemaBuilder.removeSyntax(oid);}}}  }
class C{  public Builder names(final String... names){  return names(Arrays.asList(names));}  }
class C{  public ValidationEventLocatorImpl(){}  }
class C{  public boolean isReady(){  return frameworkStatus == FrameworkEvent.STARTED || frameworkStatus == FrameworkEvent.PACKAGES_REFRESHED || frameworkStatus == FrameworkEvent.STARTLEVEL_CHANGED || frameworkStatus == FrameworkEvent.WARNING || frameworkStatus == FrameworkEvent.INFO;}  }
class C{  public static boolean warningEnabled(){  return debugInst.warningEnabled();}  }
class C{  public void writeSearchRequest(final int messageID,final SearchRequest request) throws IOException {  logger.trace("ENCODE LDAP SEARCH REQUEST(messageID=%d, request=%s)",messageID,request);  writeMessageHeader(messageID);{    writer.writeStartSequence(LDAP.OP_TYPE_SEARCH_REQUEST);{      writer.writeOctetString(request.getName().toString());      writer.writeEnumerated(request.getScope().intValue());      writer.writeEnumerated(request.getDereferenceAliasesPolicy().intValue());      writer.writeInteger(request.getSizeLimit());      writer.writeInteger(request.getTimeLimit());      writer.writeBoolean(request.isTypesOnly());      LDAP.writeFilter(writer,request.getFilter());      writer.writeStartSequence();{        for (        final String attribute : request.getAttributes()) {          writer.writeOctetString(attribute);        }      }      writer.writeEndSequence();    }    writer.writeEndSequence();  }  writeMessageFooter(request.getControls());}  }
class C{  public static Map<String,String> makeMap(String... keyValuePairs){  Map<String,String> map=new LinkedHashMap<>();  for (int i=0; i < keyValuePairs.length; i+=2) {    map.put(keyValuePairs[i],keyValuePairs[i + 1]);  }  return map;}  }
class C{  public boolean canDelete(DN dn){  try {    return !dn.equals(DN.rootDN()) && !nonDeletable.contains(dn) && isDescendantOfAny(dn,parentReadOnly);  } catch (  Throwable t) {    throw new RuntimeException("Error decoding DNs: " + t,t);  }}  }
class C{  public void processRegistrationRequest(HttpServletRequest request,HttpServletResponse response,FSNameRegistrationRequest regisRequest){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Entered FSNameRegistrationHandler::" + "processRegistrationRequest...");  }  this.request=request;  this.response=response;  this.regisRequest=regisRequest;  this.relayState=regisRequest.getRelayState();  setRegistrationURL();  if (managerInst == null) {    FSUtils.debug.error("FSNameRegistrationHandler " + FSUtils.bundle.getString(IFSConstants.FEDERATION_FAILED_ACCOUNT_INSTANCE));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::handleNameRegistration" + "failed to get Account Manager instance");    }    sendRegistrationResponse();    return;  }  boolean bUserStatus=setUserDN(regisRequest);  if (!bUserStatus) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Failed to get UserDN. Invalid " + "Name registration request");    }    sendRegistrationResponse();    return;  }  boolean retStatus=doCommonRegistration();  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("doCommonRegistration returns " + retStatus);  }  if (retStatus) {    StatusCode statusCode;    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::handleNameRegistration" + "registration in DS completed successfully");    }    try {      statusCode=new StatusCode(IFSConstants.SAML_SUCCESS);      regisResponse=new FSNameRegistrationResponse(null,regisRequest.getRequestID(),new Status(statusCode),hostedEntityId,relayState);      regisResponse.setMinorVersion(regisRequest.getMinorVersion());      if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {        FSUtils.debug.message("processRegistration IDP/HTTP");        callPostRegisterNameIdentifierSuccess(request,response,userID,regisRequest,regisResponse,IFSConstants.NAME_REGISTRATION_IDP_HTTP_PROFILE);      }    } catch (    FSMsgException e) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response",e);      }    }catch (    SAMLException e) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response",e);      }    }  } else {    StatusCode statusCode;    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::handleNameRegistration" + "registration in DS failed");    }    try {      statusCode=new StatusCode(IFSConstants.REGISTRATION_FAILURE_STATUS);      regisResponse=new FSNameRegistrationResponse(null,regisRequest.getRequestID(),new Status(statusCode),hostedEntityId,relayState);      regisResponse.setMinorVersion(regisRequest.getMinorVersion());    } catch (    FSMsgException e) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response",e);      }    }catch (    SAMLException e) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response, e");      }    }  }  sendRegistrationResponse();  return;}  }
class C{  public Scroller(Context context){  this(context,null);}  }
class C{  public void printTagArray(PrintWriter aWriter,String tag,int indent,String[] elements) throws Exception {  if (elements != null) {    for (int i=0; i < elements.length; i++) {      printIndent(aWriter,indent);      printTagContent(aWriter,tag,elements[i]);    }  }}  }
class C{  private void applyPropertyConfig(){  String reqBundlesProp=IdentityServer.getInstance().getProperty("openidm.healthservice.reqbundles");  if (reqBundlesProp != null) {    requiredBundles=parseProp(reqBundlesProp);  }  String reqServicesProp=IdentityServer.getInstance().getProperty("openidm.healthservice.reqservices");  if (reqServicesProp != null) {    requiredServices=parseProp(reqServicesProp);  }  String additionalReqBundlesProp=IdentityServer.getInstance().getProperty("openidm.healthservice.additionalreqbundles");  if (additionalReqBundlesProp != null) {    requiredBundles.addAll(parseProp(additionalReqBundlesProp));  }  String additionalReqServicesProp=IdentityServer.getInstance().getProperty("openidm.healthservice.additionalreqservices");  if (additionalReqServicesProp != null) {    requiredServices.addAll(parseProp(additionalReqServicesProp));  }  String serviceStartMaxProp=IdentityServer.getInstance().getProperty("openidm.healthservice.servicestartmax");  if (serviceStartMaxProp != null) {    serviceStartMax=Long.parseLong(serviceStartMaxProp);  }}  }
class C{  public String toBASE64EncodedString() throws FSMsgException {  if ((assertionConsumerServiceURL == null) || (assertionConsumerServiceURL.length() == 0)) {    FSUtils.debug.error("FSAuthnRequestEnvelope.toBASE64EncodedString:" + "assertionConsumerServiceURL is null in the " + "FSAuthnRequestEnvelope");    throw new FSMsgException("noAssertionConsumerServiceURLElement",null);  }  if (authnRequest == null) {    FSUtils.debug.error("FSAuthnRequestEnvelope.toBASE64EncodedString:" + "authnRequest is null in the FSAuthnRequestEnvelope");    throw new FSMsgException("noAuthnRequestElement",null);  }  return Base64.encode(this.toXMLString().getBytes());}  }
class C{  public CommandEnvironment(String cmdpath,String[] argv){  this.command=cmdpath;  if (argv == null) {    this.options=new String[0];  } else {    this.options=new String[argv.length];    System.arraycopy(argv,0,this.options,0,argv.length);  }}  }
class C{  private void update(DbEntry item){  mTempValues.clear();  item.addToContentValues(mTempValues);  mUpdateOperations.add(ContentProviderOperation.newUpdate(LauncherSettings.Favorites.getContentUri(item.id)).withValues(mTempValues).build());}  }
class C{  public Scanner skip(String pattern){  return skip(patternCache.forName(pattern));}  }
class C{  public Assertion createAssertion(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION,xml);  if (obj == null) {    return new AssertionImpl(xml);  } else {    return (Assertion)obj;  }}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/management/jhipster/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  protected Object generateAnonymousToken(HttpServletResponse response) throws SessionException {  FSUtils.debug.message("FSAssertionArtifactHandler.generateAnonymous");  try {    Map valueMap=new HashMap();    valueMap.put(SessionProvider.PRINCIPAL_NAME,ANONYMOUS_PRINCIPAL);    valueMap.put(SessionProvider.REALM,realm);    valueMap.put(SessionProvider.AUTH_LEVEL,"0");    valueMap.put(SessionProvider.AUTH_INSTANT,getAuthInstant());    valueMap.put("idpEntityID",idpEntityId);    SessionProvider sessionProvider=SessionManager.getProvider();    Object ssoSession=sessionProvider.createSession(valueMap,request,response,new StringBuffer(this.relayState));    try {      sessionProvider.addListener(ssoSession,new FSTokenListener(hostMetaAlias));    } catch (    Exception e) {      FSUtils.debug.error("FSAssertionArtifactHandler.generateAnonymousToken:" + "Couldn't add listener to session:",e);    }    return ssoSession;  } catch (  SessionException se) {    FSUtils.debug.error("FSAssertionArtifactHandler.genAnonymousToken failed.",se);    throw se;  }catch (  Exception ae) {    FSUtils.debug.error("FSAssertionArtifactHandler.generateAnonymousToken failed.",ae);    return null;  }}  }
class C{  public NASIPAddressAttribute(InetAddress ip){  super(NASIPAddressAttribute.toOctets(ip));  this.ip=ip;}  }
class C{  public static boolean isFileOlder(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileOlder(file,date.getTime());}  }
class C{  public java.awt.Image createAwtImage(java.awt.Color foreground,java.awt.Color background){  int f=foreground.getRGB();  int g=background.getRGB();  java.awt.Canvas canvas=new java.awt.Canvas();  byte[] bars=getBarsCodabar(generateChecksum ? calculateChecksum(code) : code);  int wide=0;  for (int k=0; k < bars.length; ++k) {    wide+=bars[k];  }  int narrow=bars.length - wide;  int fullWidth=narrow + wide * (int)n;  boolean print=true;  int ptr=0;  int height=(int)barHeight;  int[] pix=new int[fullWidth * height];  for (int k=0; k < bars.length; ++k) {    int w=(bars[k] == 0 ? 1 : (int)n);    int c=g;    if (print) {      c=f;    }    print=!print;    for (int j=0; j < w; ++j) {      pix[ptr++]=c;    }  }  for (int k=fullWidth; k < pix.length; k+=fullWidth) {    System.arraycopy(pix,0,pix,k,fullWidth);  }  return canvas.createImage(new java.awt.image.MemoryImageSource(fullWidth,height,pix,0,fullWidth));}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4});}  }
class C{  protected ShortMessage(byte[] data){  super(data);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.writeLong(getTimeImpl());}  }
class C{  public Object clone(){  return this;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnResponseElement createAuthnResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnResponseElementImpl();}  }
class C{  public Textifier visitTypeAnnotation(final int typeRef,final TypePath typePath,final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  buf.setLength(0);  buf.append(") : ");  appendTypeReference(typeRef);  buf.append(", ").append(typePath);  buf.append(visible ? "\n" : " // invisible\n");  text.add(buf.toString());  return t;}  }
class C{  private void validatePropertyNames(final Reference ref,final Name name,final List<String> warnings,final List<String> infoMessages){  final List<String> allPropsAsList=Arrays.asList(ALL_PROPERTIES);  final String nameString=name != null ? "Name = " + name.toString() + " " : "";  if (NUPROP_WARNTEXT != null && !NUPROP_WARNTEXT.keySet().isEmpty()) {    for (    final String propertyName : NUPROP_WARNTEXT.keySet()) {      final RefAddr ra=ref.get(propertyName);      if (ra != null && !allPropsAsList.contains(ra.getType())) {        final StringBuilder stringBuilder=new StringBuilder(nameString);        final String propertyValue=ra.getContent().toString();        stringBuilder.append(NUPROP_WARNTEXT.get(propertyName)).append(" You have set value of \"").append(propertyValue).append("\" for \"").append(propertyName).append("\" property, which is being ignored.");        warnings.add(stringBuilder.toString());      }    }  }  final Enumeration<RefAddr> allRefAddrs=ref.getAll();  while (allRefAddrs.hasMoreElements()) {    final RefAddr ra=allRefAddrs.nextElement();    final String propertyName=ra.getType();    if (!(allPropsAsList.contains(propertyName) || NUPROP_WARNTEXT.keySet().contains(propertyName) || SILENT_PROPERTIES.contains(propertyName))) {      final String propertyValue=ra.getContent().toString();      final StringBuilder stringBuilder=new StringBuilder(nameString);      stringBuilder.append("Ignoring unknown property: ").append("value of \"").append(propertyValue).append("\" for \"").append(propertyName).append("\" property");      infoMessages.add(stringBuilder.toString());    }  }}  }
class C{  public Resource createResource(String xml) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESOURCE,xml);  if (obj == null) {    return new ResourceImpl(xml);  } else {    return (Resource)obj;  }}  }
class C{  public RASInputStream(IRandomAccessSource source){  this.source=source;}  }
class C{  private void recalculateHashCode(){  String s="" + getType() + getAgeOfOldestMissingChange()+ getDn()+ getBackend().getBackendID()+ getMissingChanges();  hashCode=s.hashCode();}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  B64OutputStream bos=null;  try {    bos=new B64OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public void deactivate() throws AMException, SSOException {  setStringAttribute(statusAN,"inactive");  store();}  }
class C{  @Override public PlaPointFloat to_float(){  double xd=rp_x.doubleValue();  double yd=rp_y.doubleValue();  double zd=rp_z.doubleValue();  if (is_nan) {    xd=Float.MAX_VALUE;    yd=Float.MAX_VALUE;    new IllegalArgumentException("RationalPoint: to_float NAN").printStackTrace();  } else {    xd/=zd;    yd/=zd;  }  return new PlaPointFloat(xd,yd);}  }
class C{  public void relayoutToAlign(){  int childCount=this.getChildCount();  if (0 == childCount) {    return;  }  int count=0;  for (int i=0; i < childCount; i++) {    View v=getChildAt(i);    if (v instanceof BlankView) {      continue;    }    count++;  }  View[] childs=new View[count];  int[] spaces=new int[count];  int n=0;  for (int i=0; i < childCount; i++) {    View v=getChildAt(i);    if (v instanceof BlankView) {      continue;    }    childs[n]=v;    LayoutParams childLp=v.getLayoutParams();    int childWidth=v.getMeasuredWidth();    if (childLp instanceof MarginLayoutParams) {      MarginLayoutParams mlp=(MarginLayoutParams)childLp;      spaces[n]=mlp.leftMargin + childWidth + mlp.rightMargin;    } else {      spaces[n]=childWidth;    }    n++;  }  int lineTotal=0;  int start=0;  this.removeAllViews();  for (int i=0; i < count; i++) {    if (lineTotal + spaces[i] > usefulWidth) {      int blankWidth=usefulWidth - lineTotal;      int end=i - 1;      int blankCount=end - start;      if (blankCount >= 0) {        if (blankCount > 0) {          int eachBlankWidth=blankWidth / blankCount;          MarginLayoutParams lp=new MarginLayoutParams(eachBlankWidth,0);          for (int j=start; j < end; j++) {            this.addView(childs[j]);            BlankView blank=new BlankView(mContext);            this.addView(blank,lp);          }        }        this.addView(childs[end]);        start=i;        i--;        lineTotal=0;      } else {        this.addView(childs[i]);        start=i + 1;        lineTotal=0;      }    } else {      lineTotal+=spaces[i];    }  }  for (int i=start; i < count; i++) {    this.addView(childs[i]);  }}  }
class C{  public long timeout(){  return timeoutMs;}  }
class C{  public XPathException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;  if (cause == null) {    throw new NullPointerException("cause == null");  }}  }
class C{  public boolean entryExists(SSOToken token,String dn){  dn=DN.valueOf(dn).toString().toLowerCase();  if (SMSNotificationManager.isCacheEnabled() && entriesPresent.contains(dn)) {    if (debug.messageEnabled()) {      debug.message("SMSLdapObject: entry present in cache: " + dn);    }    return (true);  } else   if (SMSNotificationManager.isCacheEnabled() && entriesNotPresent.contains(dn)) {    if (debug.messageEnabled()) {      debug.message("SMSLdapObject: entry present in " + "not-present-cache: " + dn);    }    return (false);  }  boolean entryExists=false;  try {    String[] objs={token.getTokenID().toString(),dn};    Boolean b=(Boolean)client.send(client.encodeMessage("entryExists",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null);    entryExists=b.booleanValue();  } catch (  Exception re) {    debug.error("SMSJAXRPCObject:entryExists -- Exception:",re);    return (false);  }  if (entryExists && SMSNotificationManager.isCacheEnabled()) {    initializeNotification();    entriesPresent.add(dn);    if (entriesPresent.size() > entriesPresentCacheSize) {synchronized (entriesPresent) {        Iterator items=entriesPresent.iterator();        if (items.hasNext()) {          items.remove();        }      }    }  } else   if (SMSNotificationManager.isCacheEnabled()) {    initializeNotification();    entriesNotPresent.add(dn);    if (entriesNotPresent.size() > entriesPresentCacheSize) {synchronized (entriesNotPresent) {        Iterator items=entriesNotPresent.iterator();        if (items.hasNext()) {          items.remove();        }      }    }  }  return (entryExists);}  }
class C{  public WalkingIteratorSorted(PrefixResolver nscontext){  super(nscontext);}  }
class C{  public boolean allowsAllContentTypes(){  if (mediaRange == null)   return false; else   return mediaRange.type.compareTo(STAR) == 0;}  }
class C{  public final boolean isNfcPresent(){  return nfcAdapter != null;}  }
class C{  public void paintTreeCellFocus(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void detach(){  super.detach();  m_exprObj.detach();  m_exprObj=null;}  }
class C{  private Map<File,String> importVerificationFile(File verificationFile,HashType hashType,File baseFolder) throws IOException {  VerificationFileReader parser=new VerificationFileReader(createTextReader(verificationFile),hashType.getFormat());  Map<File,String> result=new HashMap<File,String>();  try {    while (parser.hasNext()) {      Entry<File,String> entry=parser.next();      result.put(new File(baseFolder,entry.getKey().getPath()),new String(entry.getValue()));    }  }  finally {    parser.close();  }  return result;}  }
class C{  public static void copyFile(File src,File dst) throws IOException {  copyOrAppend(src,dst,false);}  }
class C{  public synchronized void startPreview(){  OpenCamera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.getCamera().startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,theCamera.getCamera());  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public void testConstructorBytesException(){  byte aBytes[]={};  try {    new BigInteger(aBytes);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public ServiceSchemaUpgradeWrapper(ServiceSchemaModificationWrapper aAdded,ServiceSchemaModificationWrapper aModed,ServiceSchemaModificationWrapper aDeleted){  attributesAdded=aAdded;  attributesModified=aModed;  attributesDeleted=aDeleted;}  }
class C{  public FileExistsException(String message){  super(message);}  }
class C{  @SuppressWarnings("rawtypes") public XPathType(String expression,Filter filter,Map namespaceMap){  this(expression,filter);  if (namespaceMap == null) {    throw new NullPointerException("namespaceMap cannot be null");  }  Map<?,?> copy=new HashMap<>((Map<?,?>)namespaceMap);  Iterator<? extends Map.Entry<?,?>> entries=copy.entrySet().iterator();  while (entries.hasNext()) {    Map.Entry<?,?> me=entries.next();    if (!(me.getKey() instanceof String) || !(me.getValue() instanceof String)) {      throw new ClassCastException("not a String");    }  }  @SuppressWarnings("unchecked") Map<String,String> temp=(Map<String,String>)copy;  nsMap=Collections.unmodifiableMap(temp);}  }
class C{  protected int addNodeInDocOrder(int node){  assertion(hasCache(),"addNodeInDocOrder must be done on a mutable sequence!");  int insertIndex=-1;  NodeVector vec=getVector();  int size=vec.size(), i;  for (i=size - 1; i >= 0; i--) {    int child=vec.elementAt(i);    if (child == node) {      i=-2;      break;    }    DTM dtm=m_dtmMgr.getDTM(node);    if (!dtm.isNodeAfter(node,child)) {      break;    }  }  if (i != -2) {    insertIndex=i + 1;    vec.insertElementAt(node,insertIndex);  }  return insertIndex;}  }
class C{  private float calculateTranslationHeightAfterFieldRot(Rectangle bBox,double pageRotation,double relFieldRotation){  if (relFieldRotation == 0) {    return 0.0f;  }  if (pageRotation == 0) {    if (relFieldRotation == Math.PI / 2) {      return bBox.getHeight();    }    if (relFieldRotation == Math.PI) {      return bBox.getHeight();    }  }  if (pageRotation == -Math.PI / 2) {    if (relFieldRotation == -Math.PI / 2) {      return bBox.getWidth() - bBox.getHeight();    }    if (relFieldRotation == Math.PI / 2) {      return bBox.getHeight();    }    if (relFieldRotation == Math.PI) {      return bBox.getWidth();    }  }  if (pageRotation == -Math.PI) {    if (relFieldRotation == -1 * Math.PI) {      return bBox.getHeight();    }    if (relFieldRotation == -1 * Math.PI / 2) {      return bBox.getHeight() - bBox.getWidth();    }    if (relFieldRotation == Math.PI / 2) {      return bBox.getWidth();    }  }  if (pageRotation == -3 * Math.PI / 2) {    if (relFieldRotation == -3 * Math.PI / 2) {      return bBox.getWidth();    }    if (relFieldRotation == -Math.PI) {      return bBox.getWidth();    }  }  return 0.0f;}  }
class C{  public static String lowerTrail(String self){  return replaceHeadTail(self,null,null);}  }
class C{  private KeyFactorySpi nextSpi(KeyFactorySpi oldSpi){synchronized (lock) {    if ((oldSpi != null) && (oldSpi != spi)) {      return spi;    }    if (serviceIterator == null) {      return null;    }    while (serviceIterator.hasNext()) {      Service s=serviceIterator.next();      try {        Object obj=s.newInstance(null);        if (obj instanceof KeyFactorySpi == false) {          continue;        }        KeyFactorySpi spi=(KeyFactorySpi)obj;        provider=s.getProvider();        this.spi=spi;        return spi;      } catch (      NoSuchAlgorithmException e) {      }    }    serviceIterator=null;    return null;  }}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String componentName,int type){  organizationConfigChanged(serviceName,version,null,groupName,componentName,type);}  }
class C{  static int applyMaskPenaltyRule2(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height - 1; y++) {    for (int x=0; x < width - 1; x++) {      int value=array[y][x];      if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {        penalty++;      }    }  }  return N2 * penalty;}  }
class C{  public void start() throws Exception {  if (catalinaDaemon == null)   init();  Method method=catalinaDaemon.getClass().getMethod("start",(Class[])null);  method.invoke(catalinaDaemon,(Object[])null);}  }
class C{  @Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {  String resp=null;  ensureValidToken();  String spec=MessageFormat.format("/webhdfs/v1/{0}?op=APPEND&user.name={1}",URLUtil.encodePath(path),this.principal);  String redirectUrl=null;  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);  conn.setRequestMethod("POST");  conn.setInstanceFollowRedirects(false);  conn.connect();  logger.info("Location:" + conn.getHeaderField("Location"));  resp=result(conn,true);  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField("Location");  conn.disconnect();  if (redirectUrl != null) {    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);    conn.setRequestMethod("POST");    conn.setDoOutput(true);    conn.setDoInput(true);    conn.setUseCaches(false);    conn.setRequestProperty("Content-Type","application/octet-stream");    final int _SIZE=is.available();    conn.setRequestProperty("Content-Length","" + _SIZE);    conn.setFixedLengthStreamingMode(_SIZE);    conn.connect();    OutputStream os=conn.getOutputStream();    copy(is,os);    is.close();    os.close();    resp=result(conn,true);    conn.disconnect();  }  return resp;}  }
class C{  public void testCase17(){  byte aBytes[]={0};  byte bBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={1,2,3,4,5,6,7};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void debugMessage(String message){  debug.message(message);}  }
class C{  public PWResetUserValidationViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  registerChildren();}  }
class C{  void move(int touchX,int touchY){  setTranslationX(touchX - mRegistrationX + (int)mOffsetX);  setTranslationY(touchY - mRegistrationY + (int)mOffsetY);}  }
class C{  protected boolean computeBlit(int dx,int dy,Point blitFrom,Point blitTo,Dimension blitSize,Rectangle blitPaint){  int dxAbs=Math.abs(dx);  int dyAbs=Math.abs(dy);  Dimension extentSize=getExtentSize();  if ((dx == 0) && (dy != 0) && (dyAbs < extentSize.height)) {    if (dy < 0) {      blitFrom.y=-dy;      blitTo.y=0;      blitPaint.y=extentSize.height + dy;    } else {      blitFrom.y=0;      blitTo.y=dy;      blitPaint.y=0;    }    blitPaint.x=blitFrom.x=blitTo.x=0;    blitSize.width=extentSize.width;    blitSize.height=extentSize.height - dyAbs;    blitPaint.width=extentSize.width;    blitPaint.height=dyAbs;    return true;  } else   if ((dy == 0) && (dx != 0) && (dxAbs < extentSize.width)) {    if (dx < 0) {      blitFrom.x=-dx;      blitTo.x=0;      blitPaint.x=extentSize.width + dx;    } else {      blitFrom.x=0;      blitTo.x=dx;      blitPaint.x=0;    }    blitPaint.y=blitFrom.y=blitTo.y=0;    blitSize.width=extentSize.width - dxAbs;    blitSize.height=extentSize.height;    blitPaint.width=dxAbs;    blitPaint.height=extentSize.height;    return true;  } else {    return false;  }}  }
class C{  public IntHashtable(int initialCapacity,float loadFactor){  super();  if (initialCapacity < 0) {    throw new IllegalArgumentException(MessageFormat.format("Illegal Capacity: {0}",initialCapacity));  }  if (loadFactor <= 0) {    throw new IllegalArgumentException(MessageFormat.format("Illegal Load: {0}",loadFactor));  }  if (initialCapacity == 0) {    initialCapacity=1;  }  this.loadFactor=loadFactor;  table=new Entry[initialCapacity];  threshold=(int)(initialCapacity * loadFactor);}  }
class C{  public MetadataBlockDataPicture(ByteBuffer rawdata) throws IOException, InvalidFrameException {  initFromByteBuffer(rawdata);}  }
class C{  public void addChooserPanel(AbstractColorChooserPanel panel){  AbstractColorChooserPanel[] oldPanels=getChooserPanels();  AbstractColorChooserPanel[] newPanels=new AbstractColorChooserPanel[oldPanels.length + 1];  System.arraycopy(oldPanels,0,newPanels,0,oldPanels.length);  newPanels[newPanels.length - 1]=panel;  setChooserPanels(newPanels);}  }
class C{  private PromptTrustManager(){}  }
class C{  protected void fireAdjustmentValueChanged(int id,int type,int value){  fireAdjustmentValueChanged(id,type,value,getValueIsAdjusting());}  }
class C{  public static boolean[] copyOfRange(boolean[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  boolean[] copy=new boolean[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public static String prependXMLProperty(String xml,String propertyXML){  int idx=xml.indexOf(PropertyTemplate.START_TAG);  idx+=PropertyTemplate.START_TAG.length();  return xml.substring(0,idx) + propertyXML + xml.substring(idx);}  }
class C{  private static SampleConfig override(SampleConfig sampleConfig,JsonNode sampleConfigOverrides){  if (sampleConfigOverrides != null) {    ObjectMapper mapper=new ObjectMapper().registerModule(new GuavaModule());    JsonNode tree=mapper.valueToTree(sampleConfig);    merge((ObjectNode)tree,(ObjectNode)sampleConfigOverrides);    try {      return mapper.treeToValue(tree,SampleConfig.class);    } catch (    Exception e) {      throw new RuntimeException("failed to parse config to node: " + e.getMessage());    }  }  return sampleConfig;}  }
class C{  public X509CRLImpl(CertificateList crl){  this.crl=crl;  this.tbsCertList=crl.getTbsCertList();  this.extensions=tbsCertList.getCrlExtensions();}  }
class C{  @Override public boolean genStringAsCharArray(){  return this.genStringAsCharArray;}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final PrecedingIterator clone=(PrecedingIterator)super.clone();    final int[] stackCopy=new int[_stack.length];    System.arraycopy(_stack,0,stackCopy,0,_stack.length);    clone._stack=stackCopy;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  public PWResetException(Throwable t){  super(t);  errList=new ArrayList(1);  errList.add(t.getMessage());}  }
class C{  public static ReadableByteChannel newChannel(final InputStream in){  checkNotNull(in,"in");  if (in instanceof FileInputStream && FileInputStream.class.equals(in.getClass())) {    return ((FileInputStream)in).getChannel();  }  return new ReadableByteChannelImpl(in);}  }
class C{  public void doDeferredDelete(){  if (sipStack.getTimer() == null)   this.setState(TERMINATED_STATE); else {    this.dialogDeleteTask=new DialogDeleteTask();    if (sipStack.getTimer() != null && sipStack.getTimer().isStarted()) {      int delay=SIPTransactionStack.BASE_TIMER_INTERVAL;      if (lastTransaction != null) {        delay=lastTransaction.getBaseTimerInterval();      }      sipStack.getTimer().schedule(this.dialogDeleteTask,SIPTransaction.TIMER_H * delay);    } else {      this.delete();    }  }}  }
class C{  void fireActiveDescendantPropertyChange(TreePath oldPath,TreePath newPath){  if (oldPath != newPath) {    Accessible oldLSA=(oldPath != null) ? new AccessibleJTreeNode(JTree.this,oldPath,null) : null;    Accessible newLSA=(newPath != null) ? new AccessibleJTreeNode(JTree.this,newPath,null) : null;    firePropertyChange(AccessibleContext.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY,oldLSA,newLSA);  }}  }
class C{  public void preferenceChanged(View child,boolean width,boolean height){  super.preferenceChanged(child,width,height);  if (TableView.this.multiRowCells && height) {    for (int i=rowIndex - 1; i >= 0; i--) {      RowView rv=TableView.this.getRow(i);      if (rv.multiRowCells) {        rv.preferenceChanged(null,false,true);        break;      }    }  }}  }
class C{  private static String parseStringValue(String parseString,String openTag,String closeTag,DataTypeValidationException exception) throws DataTypeValidationException {  String tagValue;  tagValue=parseTagValue(parseString,openTag,closeTag);  if (tagValue == null) {    throw exception;  }  return tagValue;}  }
class C{  public Caret createCaret(){  return null;}  }
class C{  public static String showInputDialog(Object message,Object initialSelectionValue){  return showInputDialog(null,message,initialSelectionValue);}  }
class C{  public synchronized void startProduction(ImageConsumer ic){  addConsumer(ic);  Thread thread=new Thread(this,"RenderableImageProducer Thread");  thread.start();}  }
class C{  public String substituteVariables(String val){  if (val.indexOf('$') < 0 && val.indexOf('&') < 0)   return val;  val=val.replace("&lt;","<");  val=val.replace("&gt;",">");  val=val.replace("&quot;","\"");  val=val.replace("&amp;","&");  StringBuilder sb=new StringBuilder(val);  int charStart=sb.indexOf("&#");  while (charStart > -1) {    int charEnd=sb.indexOf(";",charStart);    if (charEnd > -1) {      char c=(char)Integer.parseInt(sb.substring(charStart + 2,charEnd));      sb.delete(charStart,charEnd + 1);      sb.insert(charStart,c);      charStart=sb.indexOf("&#");    } else {      break;    }  }  for (int i=0; i < sb.length(); ) {    for (; i < sb.length(); i++) {      if (sb.charAt(i) == '$') {        i++;        break;      }    }    if (i == sb.length())     break;    if (i > 1 && sb.charAt(i - 2) == '\\') {      sb.deleteCharAt(i - 2);      i--;      continue;    }    int nameStart=i;    int start=i - 1;    int end=-1;    int nameEnd=-1;    char endChar=' ';    if (sb.charAt(i) == '{') {      nameStart++;      endChar='}';    }    for (; i < sb.length(); i++) {      if (sb.charAt(i) == endChar)       break;    }    end=i;    nameEnd=end;    if (endChar == '}')     end++;    String varName=sb.substring(nameStart,nameEnd);    String value=getVariableValue(varName);    if (value == null)     value="";    sb.replace(start,end,value);    i=start + value.length();  }  return sb.toString();}  }
class C{  public Object clone() throws CloneNotSupportedException {  SHA1_MessageDigestImpl cloneObj=(SHA1_MessageDigestImpl)super.clone();  cloneObj.buffer=buffer.clone();  cloneObj.oneByte=oneByte.clone();  return cloneObj;}  }
class C{  @Override public void run(){  Collector lc=null;  try {    lc=Collector.build(config);    if (lc == null) {      log.info("thread collector failed: " + config.name);    } else {      log.info("thread collector process success: " + config.name);      if (ZkMonitorPath.instance.register(config.name)) {        lc.process();      } else {        log.info("register failed and exit:" + config.name);      }      lc.close();    }  } catch (  ExecutionException|IOException e) {    e.printStackTrace();  } finally {    ZkMonitorPath.instance.cancel(config.name);    countDownLatch.countDown();  }}  }
class C{  public E poll(long timeout,TimeUnit unit) throws InterruptedException {  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null) {        if (nanos <= 0)         return null; else         nanos=available.awaitNanos(nanos);      } else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        if (nanos <= 0)         return null;        first=null;        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            long timeLeft=available.awaitNanos(delay);            nanos-=delay - timeLeft;          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  public TagField createField(String vorbisCommentFieldKey,String value){  if (vorbisCommentFieldKey.equals(VorbisCommentFieldKey.COVERART.getFieldName())) {    throw new UnsupportedOperationException(ErrorMessage.ARTWORK_CANNOT_BE_CREATED_WITH_THIS_METHOD.getMsg());  }  return tag.createField(vorbisCommentFieldKey,value);}  }
class C{  public boolean isInitializeReplicationSubcommand(){  return isSubcommand(INITIALIZE_REPLICATION_SUBCMD_NAME);}  }
class C{  public void paintInternalFrameBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public Rectangle placeBarcode(PdfCanvas canvas,Color foreground,float moduleSide){  int width=bm.getWidth();  int height=bm.getHeight();  byte[][] mt=bm.getArray();  if (foreground != null) {    canvas.setFillColor(foreground);  }  for (int y=0; y < height; ++y) {    byte[] line=mt[y];    for (int x=0; x < width; ++x) {      if (line[x] == 0) {        canvas.rectangle(x * moduleSide,(height - y - 1) * moduleSide,moduleSide,moduleSide);      }    }  }  canvas.fill();  return getBarcodeSize(moduleSide);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue08.class,args);}  }
class C{  public SAML2ConfigBuilder customSubjectProviderClassName(String customSubjectProviderClassName){  this.customSubjectProviderClassName=customSubjectProviderClassName;  return this;}  }
class C{  static Promise<Double> promiseDouble(){  return new BasePromise<>();}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public AMSearchResults searchGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  String filter="(|" + getSearchFilter(AMObject.GROUP) + getSearchFilter(AMObject.DYNAMIC_GROUP)+ getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP)+ ")";  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),filter,wildcard,avPairs,searchControl);}  }
class C{  public ActivateFailedException(String s){  super(s);}  }
class C{  public int slowQueryThreshold(){  return values.slowQueryThresholdInMilliseconds;}  }
class C{  private boolean findAndRenameChild(DN entryDN,Operation conflictOp){  boolean conflict=false;  final SearchRequest request=newSearchRequest(entryDN,SearchScope.SINGLE_LEVEL).addAttribute(ENTRYUUID_ATTRIBUTE_NAME,HISTORICAL_ATTRIBUTE_NAME);  InternalSearchOperation op=conn.processSearch(request);  if (op.getResultCode() == ResultCode.SUCCESS) {    for (    SearchResultEntry entry : op.getSearchEntries()) {      conflict=true;      renameConflictEntry(conflictOp,entry.getName(),getEntryUUID(entry));    }  } else {    logger.error(ERR_CANNOT_RENAME_CONFLICT_ENTRY,entryDN,conflictOp,op.getResultCode());  }  return conflict;}  }
class C{  public final Map<ObjectClass,String> decodeObjectClasses(final ByteSequenceReader reader) throws DirectoryException {  final int ocId=decodeId(reader);  final Mappings mappings=reloadMappingsIfSchemaChanged();  Map<ObjectClass,String> ocMap=mappings.ocDecodeMap.get(ocId);  if (ocMap == null) {    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),ERR_COMPRESSEDSCHEMA_UNKNOWN_OC_TOKEN.get(ocId));  }  return ocMap;}  }
class C{  private boolean isFirstGreaterThanLast(Number greater,Number less,NumericalType type){switch (type) {case INTEGER:case BYTE:case SHORT:case LONG:    return (greater.longValue() >= less.longValue());case FLOAT:case DOUBLE:  return (greater.doubleValue() >= less.doubleValue());default :MONITOR_LOGGER.logp(Level.FINEST,GaugeMonitor.class.getName(),"isFirstGreaterThanLast","the threshold type is invalid");return false;}}  }
class C{  @BindingAdapter("bind:userList") public static void loadUserList(RecyclerView recyclerView,List<User> users){  Log.i(TAG,"loadUserList: " + users);  RecyclerView.LayoutManager layoutManager=recyclerView.getLayoutManager();  if (layoutManager == null) {    recyclerView.setLayoutManager(new LinearLayoutManager(recyclerView.getContext()));  }  RecyclerView.Adapter adapter=recyclerView.getAdapter();  if (adapter == null) {    adapter=new UserAdapter(recyclerView.getContext());    recyclerView.setAdapter(adapter);  }  UserAdapter userAdapter=(UserAdapter)adapter;  userAdapter.setUserList(users);}  }
class C{  protected AlgorithmParameters(AlgorithmParametersSpi paramSpi,Provider provider,String algorithm){  this.paramSpi=paramSpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  public IllegalMonitorStateException(){  super();}  }
class C{  public PackedIntVector(int columns){  mColumns=columns;  mRows=0;  mRowGapStart=0;  mRowGapLength=mRows;  mValues=null;  mValueGap=new int[2 * columns];}  }
class C{  private void uninstall(){  uninstallListeners();  window=null;  removeAll();}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    Response response=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());    }    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    reSendSt=st;    reSendResponse=response;    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    AckReTransmissionTest.fail(s);  }}  }
class C{  public void testAbsPositive(){  byte aBytes[]={1,2,3,4,5,6,7};  int aSign=1;  byte rBytes[]={1,2,3,4,5,6,7};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.abs();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static GenericIntermediateResponse copyOfGenericIntermediateResponse(final GenericIntermediateResponse result){  return new GenericIntermediateResponseImpl(result);}  }
class C{  public void traverse(Node pos) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  Node top=pos;  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if (top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || (top.equals(pos))) {          if (null != pos)           endNode(pos);          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.m_contentHandler.endDocument();}  }
class C{  public final boolean validate(ArtEngine p_autoroute_engine){  boolean result=true;  NetNosList net_no_arr=new NetNosList(p_autoroute_engine.get_net_no());  Collection<AwtreeFindEntry> overlap=p_autoroute_engine.art_search_tree.find_overlap_tree_entries(get_shape(),get_layer(),net_no_arr);  for (  AwtreeFindEntry curr_entry : overlap) {    if (curr_entry.object == this)     continue;    AwtreeObject curr_object=curr_entry.object;    if (!curr_object.is_trace_obstacle(p_autoroute_engine.get_net_no()))     continue;    if (curr_object.shape_layer(curr_entry.shape_index_in_object) != get_layer())     continue;    ShapeTile curr_shape=curr_object.get_tree_shape(p_autoroute_engine.art_search_tree,curr_entry.shape_index_in_object);    ShapeTile intersection=get_shape().intersection(curr_shape);    if (!intersection.dimension().is_empty()) {      System.out.println("ExpansionRoom overlap conflict");      result=false;    }  }  return result;}  }
class C{  public boolean isEqualNode(Node arg){  if (arg == this) {    return true;  }  if (arg.getNodeType() != getNodeType()) {    return false;  }  if (getNodeName() == null) {    if (arg.getNodeName() != null) {      return false;    }  } else   if (!getNodeName().equals(arg.getNodeName())) {    return false;  }  if (getLocalName() == null) {    if (arg.getLocalName() != null) {      return false;    }  } else   if (!getLocalName().equals(arg.getLocalName())) {    return false;  }  if (getNamespaceURI() == null) {    if (arg.getNamespaceURI() != null) {      return false;    }  } else   if (!getNamespaceURI().equals(arg.getNamespaceURI())) {    return false;  }  if (getPrefix() == null) {    if (arg.getPrefix() != null) {      return false;    }  } else   if (!getPrefix().equals(arg.getPrefix())) {    return false;  }  if (getNodeValue() == null) {    if (arg.getNodeValue() != null) {      return false;    }  } else   if (!getNodeValue().equals(arg.getNodeValue())) {    return false;  }  return true;}  }
class C{  public ServiceUnavailableException(){  super();}  }
class C{  @Override public void write(char[] chr) throws IOException {  out.write(chr);}  }
class C{  public boolean isQuestionAvailable(String uuid,String realm){  Map map=getSecretQuestions(uuid,realm);  return (map != null) && !map.isEmpty();}  }
class C{  protected JViewport createViewport(){  return new JViewport();}  }
class C{  private void evalScript(Script script,JsonPointer filterPath,ScriptName scriptName) throws ResourceException {  try {    script.eval();  } catch (  Exception e) {    logger.debug("Filter/{} script {} encountered exception at {}",filterPath,scriptName,e);    ResourceException re=Utils.adapt(e);    logger.debug("ResourceException detail: " + re.getDetail());    throw re;  }}  }
class C{  protected void updateConfig(ScriptContext context){  final Map<String,Set<String>> config=getEngineConfigurationSchema(context);  int coreThreadSize=parseInt(getMapAttr(config,THREAD_POOL_CORE_SIZE),DEFAULT_CORE_THREADS);  int maxThreadSize=parseInt(getMapAttr(config,THREAD_POOL_MAX_SIZE),DEFAULT_MAX_THREADS);  int queueSize=parseInt(getMapAttr(config,THREAD_POOL_QUEUE_SIZE),DEFAULT_QUEUE_SIZE);  long idleTimeout=parseLong(getMapAttr(config,THREAD_POOL_IDLE_TIMEOUT),DEFAULT_IDLE_TIMEOUT_SECONDS);  long scriptTimeout=parseLong(getMapAttr(config,SCRIPT_TIMEOUT),ScriptEngineConfiguration.NO_TIMEOUT);  boolean useSystemSecurityManager=getBooleanMapAttr(config,USE_SECURITY_MANAGER,true);  SecurityManager securityManager=useSystemSecurityManager ? System.getSecurityManager() : null;  Set<String> whiteList=config.get(WHITE_LIST);  Set<String> blackList=config.get(BLACK_LIST);  ScriptEngineConfiguration configuration=ScriptEngineConfiguration.builder().withSecurityManager(securityManager).withThreadPoolCoreSize(coreThreadSize).withThreadPoolMaxSize(maxThreadSize).withThreadPoolQueueSize(queueSize).withThreadPoolIdleTimeout(idleTimeout,TimeUnit.SECONDS).withTimeout(scriptTimeout,TimeUnit.SECONDS).withWhiteList(compilePatternList(whiteList)).withBlackList(compilePatternList(blackList)).build();  getScriptEngineManager(context).setConfiguration(configuration);}  }
class C{  public static FontProgram createRegisteredFont(String fontName,int style,boolean cached) throws java.io.IOException {  return fontRegisterProvider.getFont(fontName,style,cached);}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthTreeUI();}  }
class C{  public void init(String realm,Map<String,Set<String>> configMap){  this.realm=realm;  if (configMap != null) {    Set<String> values=configMap.get(GROUP_MEMBERSHIP_SEARCH_INDEX_ENABLED_ATTR);    if ((values != null) && (!values.isEmpty())) {      groupMembershipSearchIndexEnabled=Boolean.valueOf(values.iterator().next()).booleanValue();    }  }}  }
class C{  public HttpServletResponseWrapper(HttpServletResponse response){  super(response);}  }
class C{  private void calculateColors(int pointCount,FloatBuffer pointCloudBuffer){  float[] points=new float[pointCount * 3];  pointCloudBuffer.rewind();  pointCloudBuffer.get(points);  pointCloudBuffer.rewind();  int color;  int colorIndex;  float z;  for (int i=0; i < pointCount; i++) {    z=points[i * 3 + 2];    colorIndex=(int)Math.min(z / CLOUD_MAX_Z * mPalette.length,mPalette.length - 1);    colorIndex=Math.max(colorIndex,0);    color=mPalette[colorIndex];    mColorArray[i * 4]=Color.red(color) / 255f;    mColorArray[i * 4 + 1]=Color.green(color) / 255f;    mColorArray[i * 4 + 2]=Color.blue(color) / 255f;    mColorArray[i * 4 + 3]=Color.alpha(color) / 255f;  }}  }
class C{  public final void testEqualsObject02(){  ECPoint p2=null, p1=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ONE);  assertFalse(p1.equals(p2));  p1=new ECPoint(BigInteger.valueOf(-23457L),BigInteger.ONE);  p2=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.valueOf(1L));  assertFalse(p1.equals(p2) || p2.equals(p1));  p1=new ECPoint(BigInteger.valueOf(-23457L),BigInteger.ONE);  p2=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ZERO);  assertFalse(p1.equals(p2) || p2.equals(p1));  p1=ECPoint.POINT_INFINITY;  p2=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ZERO);  assertFalse(p1.equals(p2) || p2.equals(p1));}  }
class C{  public void test_ConstructorIF(){  HashMap hm2=new HashMap(5,(float)0.5);  assertEquals("Created incorrect HashMap",0,hm2.size());  try {    new HashMap(0,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  HashMap empty=new HashMap(0,0.75f);  assertNull("Empty hashtable access",empty.get("nothing"));  empty.put("something","here");  assertTrue("cannot get element",empty.get("something") == "here");}  }
class C{  @SuppressWarnings("unchecked") protected void rehash(){  int oldCapacity=table.length;  Entry<?,?>[] oldMap=table;  int newCapacity=(oldCapacity << 1) + 1;  if (newCapacity - MAX_ARRAY_SIZE > 0) {    if (oldCapacity == MAX_ARRAY_SIZE)     return;    newCapacity=MAX_ARRAY_SIZE;  }  Entry<?,?>[] newMap=new Entry<?,?>[newCapacity];  modCount++;  threshold=(int)Math.min(newCapacity * loadFactor,MAX_ARRAY_SIZE + 1);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry<K,V> old=(Entry<K,V>)oldMap[i]; old != null; ) {      Entry<K,V> e=old;      old=old.next;      int index=(e.hash & 0x7FFFFFFF) % newCapacity;      e.next=(Entry<K,V>)newMap[index];      newMap[index]=e;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnodeancestor.class,args);}  }
class C{  public void removeTrigger(String triggerId){  if (triggers.contains(triggerId)) {    triggers.remove(triggerId);  }}  }
class C{  public void printError(String str){  buff.append(str).append("\n");}  }
class C{  public static String createSummary(AciEvalContext evalCtx,boolean evalRet){  String srcStr="main";  String accessStatus=evalRet ? ALLOWED : NOT_ALLOWED;  String accessReason=getEvalReason(evalCtx.getEvalReason());  StringBuilder decideAci=getDecidingAci(evalCtx.getEvalReason(),evalCtx.getDecidingAciName());  if (!evalCtx.isTargAttrFilterMatchAciEmpty() && !evalCtx.hasRights(ACI_SELF)) {    if (evalCtx.getAllowList().isEmpty()) {      evalCtx.setTargAttrFiltersAciName(null);    } else     if (evalRet) {      if (!evalCtx.hasTargAttrFiltersMatchOp(ACL_TARGATTR_DENY_MATCH)) {        evalCtx.setTargAttrFiltersAciName(null);      }    } else {      if (evalCtx.getEvalReason() == EnumEvalReason.EVALUATED_DENY_ACI) {        evalCtx.setTargAttrFiltersAciName(null);      } else       if (!evalCtx.hasTargAttrFiltersMatchOp(ACL_TARGATTR_ALLOW_MATCH)) {        evalCtx.setTargAttrFiltersAciName(null);      }    }  }  String user=anonymous;  if (!evalCtx.getClientDN().isRootDN()) {    user=evalCtx.getClientDN().toString();  }  String right=evalCtx.rightToString();  AttributeType aType=evalCtx.getCurrentAttributeType();  String attrStr="NULL";  if (aType != null) {    attrStr=aType.getNameOrOID();  }  if (evalCtx.getTargAttrFiltersAciName() != null) {    decideAci.append(", access depends on attr value");  }  return String.format(summaryFormatStr,srcStr,accessStatus,right,evalCtx.getResourceDN().toString(),attrStr,user,accessReason,decideAci.toString());}  }
class C{  public WrappedRuntimeException(Exception e){  super(e.getMessage());  m_exception=e;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(-5,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public boolean remove(BrdViaInfo p_via_info){  return vinfo_list.remove(p_via_info);}  }
class C{  public void testDivideRoundHalfEvenNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public boolean isCancelable(){  TaskState state=getTaskState();  if (state != null) {    Task task=getTask();    return TaskState.isPending(state) || TaskState.isRecurring(state) || (TaskState.isRunning(state) && task != null && task.isInterruptable());  }  return false;}  }
class C{  public DestroyFailedException(String msg){  super(msg);}  }
class C{  public boolean mustCreateAdministrator(){  return createAdministrator;}  }
class C{  protected Tag(String id,boolean causesBreak,boolean isBlock){  name=id;  this.breakTag=causesBreak;  this.blockTag=isBlock;}  }
class C{  public Certificate[] certificates(){  if (certificates == null) {    return new Certificate[0];  }  int len=certificates.size();  Certificate[] certs=new Certificate[len];  certificates.copyInto(certs);  return certs;}  }
class C{  public String replaceListTokens(String queryString,Map<String,Integer> numberOfReplacements,String replacement){  Matcher matcher=tokenPattern.matcher(queryString);  StringBuffer buf=new StringBuffer();  while (matcher.find()) {    String origToken=matcher.group(1);    if (origToken != null) {      matcher.appendReplacement(buf,"");      Integer length=numberOfReplacements.get(origToken);      if (length != null) {        for (int i=0; i < length; i++) {          buf.append(replacement);          if (i != length - 1) {            buf.append(", ");          }        }      } else {        buf.append("${" + origToken + "}");      }    }  }  matcher.appendTail(buf);  return buf.toString();}  }
class C{  private void parseStartTag(boolean xmldecl,boolean throwOnResolveFailure) throws IOException, XmlPullParserException {  if (!xmldecl) {    read('<');  }  name=readName();  attributeCount=0;  while (true) {    skip();    if (position >= limit && !fillBuffer(1)) {      checkRelaxed(UNEXPECTED_EOF);      return;    }    int c=buffer[position];    if (xmldecl) {      if (c == '?') {        position++;        read('>');        return;      }    } else {      if (c == '/') {        degenerated=true;        position++;        skip();        read('>');        break;      } else       if (c == '>') {        position++;        break;      }    }    String attrName=readName();    int i=(attributeCount++) * 4;    attributes=ensureCapacity(attributes,i + 4);    attributes[i]="";    attributes[i + 1]=null;    attributes[i + 2]=attrName;    skip();    if (position >= limit && !fillBuffer(1)) {      checkRelaxed(UNEXPECTED_EOF);      return;    }    if (buffer[position] == '=') {      position++;      skip();      if (position >= limit && !fillBuffer(1)) {        checkRelaxed(UNEXPECTED_EOF);        return;      }      char delimiter=buffer[position];      if (delimiter == '\'' || delimiter == '"') {        position++;      } else       if (relaxed) {        delimiter=' ';      } else {        throw new XmlPullParserException("attr value delimiter missing!",this,null);      }      attributes[i + 3]=readValue(delimiter,true,throwOnResolveFailure,ValueContext.ATTRIBUTE);      if (delimiter != ' ' && peekCharacter() == delimiter) {        position++;      }    } else     if (relaxed) {      attributes[i + 3]=attrName;    } else {      checkRelaxed("Attr.value missing f. " + attrName);      attributes[i + 3]=attrName;    }  }  int sp=depth++ * 4;  elementStack=ensureCapacity(elementStack,sp + 4);  elementStack[sp + 3]=name;  if (depth >= nspCounts.length) {    int[] bigger=new int[depth + 4];    System.arraycopy(nspCounts,0,bigger,0,nspCounts.length);    nspCounts=bigger;  }  nspCounts[depth]=nspCounts[depth - 1];  if (processNsp) {    adjustNsp();  } else {    namespace="";  }  if (defaultAttributes != null) {    Map<String,String> elementDefaultAttributes=defaultAttributes.get(name);    if (elementDefaultAttributes != null) {      for (      Map.Entry<String,String> entry : elementDefaultAttributes.entrySet()) {        if (getAttributeValue(null,entry.getKey()) != null) {          continue;        }        int i=(attributeCount++) * 4;        attributes=ensureCapacity(attributes,i + 4);        attributes[i]="";        attributes[i + 1]=null;        attributes[i + 2]=entry.getKey();        attributes[i + 3]=entry.getValue();      }    }  }  elementStack[sp]=namespace;  elementStack[sp + 1]=prefix;  elementStack[sp + 2]=name;}  }
class C{  public void detach(){  if (m_allowDetach) {    if (m_axis > -1)     m_iterator=null;    super.detach();  }}  }
class C{  public static OptionList createOptionList(SSOToken token,Locale userLocale,AMViewBeanBase viewBean,Collection values){  OptionList optList=new OptionList();  if ((values != null) && !values.isEmpty()) {    Collection amIdentity=(values.iterator().next() instanceof String) ? getAMIdentity(token,values) : values;    Map entries=new HashMap(values.size() * 2);    for (Iterator iter=amIdentity.iterator(); iter.hasNext(); ) {      AMIdentity identity=(AMIdentity)iter.next();      entries.put(IdUtils.getUniversalId(identity),PolicyUtils.getDNDisplayString(identity.getName()));    }    optList=viewBean.createOptionList(entries,userLocale);  }  return optList;}  }
class C{  public static void unregisterAll(){synchronized (allLists) {    for (    HandlerList h : allLists) {synchronized (h) {        for (        List<RegisteredListener> list : h.handlerslots.values()) {          list.clear();        }        h.handlers=null;      }    }  }}  }
class C{  public static void registerImportTaskListener(ImportTaskListener listener){  directoryServer.importTaskListeners.addIfAbsent(listener);}  }
class C{  public void testCertificateFactory14() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  List<Certificate> list=null;  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCertPath(list);      fail("generateCertificate must thrown CertificateException when list is null");    } catch (    NullPointerException e) {    }  }}  }
class C{  public boolean isToggleOff(){  return !getFieldFlag(FF_NO_TOGGLE_TO_OFF);}  }
class C{  public SQLInputImpl(Object[] attributes,Map<String,Class<?>> map) throws SQLException {  if ((attributes == null) || (map == null)) {    throw new SQLException("Cannot instantiate a SQLInputImpl " + "object with null parameters");  }  attrib=Arrays.copyOf(attributes,attributes.length);  idx=-1;  this.map=map;}  }
class C{  public FSLogoutStatus handleSingleLogout(HttpServletRequest request,HttpServletResponse response,Object ssoToken,String sourceCheck){  this.request=request;  setLogoutURL();  FSUtils.debug.message("Entered FSPreLogoutHandler::handleSingleLogout");  try {    this.response=response;    this.ssoToken=ssoToken;    this.userID=SessionManager.getProvider().getPrincipalName(ssoToken);    String acceptString=request.getHeader("Accept");    if ((acceptString != null) && (acceptString.indexOf("text/vnd.wap.wml") != -1)) {      isWMLAgent=true;    }    FSSessionManager sMgr=FSSessionManager.getInstance(metaAlias);    FSSession session=sMgr.getSession(ssoToken);    String sessionIndex=null;    List partners=null;    if (session != null) {      sessionIndex=session.getSessionIndex();      partners=session.getSessionPartners();    }    if (FSUtils.debug.messageEnabled()) {      if (partners != null && partners.size() != 0) {        Iterator iter=partners.iterator();        while (iter.hasNext()) {          FSSessionPartner partner=(FSSessionPartner)iter.next();          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("PARTNER:" + partner.getPartner());          }        }      }    }    if (FSLogoutUtil.liveConnectionsExist(userID,metaAlias)) {      HashMap providerMap=FSLogoutUtil.getCurrentProvider(userID,metaAlias,ssoToken);      if (providerMap != null) {        FSSessionPartner currentSessionProvider=(FSSessionPartner)providerMap.get(IFSConstants.PARTNER_SESSION);        sessionIndex=(String)providerMap.get(IFSConstants.SESSION_INDEX);        if (currentSessionProvider != null) {          FSUtils.debug.message("creating IDP handler");          FSSingleLogoutHandler handlerObj=new FSSingleLogoutHandler();          handlerObj.setHostedDescriptor(hostedDescriptor);          handlerObj.setHostedDescriptorConfig(hostedConfig);          handlerObj.setRealm(realm);          handlerObj.setHostedEntityId(hostedEntityId);          handlerObj.setHostedProviderRole(hostedRole);          handlerObj.setMetaAlias(metaAlias);          handlerObj.setRelayState(relayState);          return handlerObj.handleSingleLogout(response,request,currentSessionProvider,userID,sessionIndex,isWMLAgent,ssoToken);        }      }      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("No more providers, nothing to broadcast " + "\ndestroy user session call destroyPrincipalSession");      }      FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,sessionIndex,request,response);      FSLogoutUtil.destroyLocalSession(ssoToken,request,response);      returnToPostLogout(IFSConstants.SAML_SUCCESS);      return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("No live connections, destroy user" + " session call destroyPrincipalSession. source=" + sourceCheck);      }      FSLogoutResponse logoutResponse=null;      FederationSPAdapter spAdapter=null;      if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP) && sourceCheck.equals("remote")) {        spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);        if (spAdapter != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSPreLogoutHandler, " + "call preSingleLogoutProcess, SP/HTTP");          }          try {            logoutResponse=FSLogoutResponse.parseURLEncodedRequest(request);            relayState=logoutResponse.getRelayState();            spAdapter.preSingleLogoutProcess(hostedEntityId,request,response,userID,null,logoutResponse,IFSConstants.LOGOUT_SP_REDIRECT_PROFILE);          } catch (          Exception e) {            FSUtils.debug.error("preSingleLogoutProcess.SP/HTTP",e);          }        }      }      FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,sessionIndex,request,response);      if (SessionManager.getProvider().isValid(ssoToken)) {        FSLogoutUtil.destroyLocalSession(ssoToken,request,response);      }      if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP) && sourceCheck.equals("remote")) {        if (spAdapter != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSPreLogoutHandler, " + "call postSingleLogoutProcess, SP/HTTP");          }          try {            spAdapter.postSingleLogoutSuccess(hostedEntityId,request,response,userID,null,logoutResponse,IFSConstants.LOGOUT_SP_REDIRECT_PROFILE);          } catch (          Exception e) {            FSUtils.debug.error("postSingleLogoutSuccess.SP/HTTP:",e);          }        }      }      returnToPostLogout(IFSConstants.SAML_SUCCESS);      return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);    }  } catch (  SessionException e) {    FSUtils.debug.error("SessionException in liveConnectionsExist" + " So destroy self and exit");    FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,null,request,response);    returnToPostLogout(IFSConstants.SAML_SUCCESS);    return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);  }}  }
class C{  public static ApplicationFilterChain createFilterChain(ServletRequest request,Wrapper wrapper,Servlet servlet){  if (servlet == null)   return null;  ApplicationFilterChain filterChain=null;  if (request instanceof Request) {    Request req=(Request)request;    if (Globals.IS_SECURITY_ENABLED) {      filterChain=new ApplicationFilterChain();    } else {      filterChain=(ApplicationFilterChain)req.getFilterChain();      if (filterChain == null) {        filterChain=new ApplicationFilterChain();        req.setFilterChain(filterChain);      }    }  } else {    filterChain=new ApplicationFilterChain();  }  filterChain.setServlet(servlet);  filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());  StandardContext context=(StandardContext)wrapper.getParent();  FilterMap filterMaps[]=context.findFilterMaps();  if ((filterMaps == null) || (filterMaps.length == 0))   return (filterChain);  DispatcherType dispatcher=(DispatcherType)request.getAttribute(Globals.DISPATCHER_TYPE_ATTR);  String requestPath=null;  Object attribute=request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);  if (attribute != null) {    requestPath=attribute.toString();  }  String servletName=wrapper.getName();  for (int i=0; i < filterMaps.length; i++) {    if (!matchDispatcher(filterMaps[i],dispatcher)) {      continue;    }    if (!matchFiltersURL(filterMaps[i],requestPath))     continue;    ApplicationFilterConfig filterConfig=(ApplicationFilterConfig)context.findFilterConfig(filterMaps[i].getFilterName());    if (filterConfig == null) {      continue;    }    filterChain.addFilter(filterConfig);  }  for (int i=0; i < filterMaps.length; i++) {    if (!matchDispatcher(filterMaps[i],dispatcher)) {      continue;    }    if (!matchFiltersServlet(filterMaps[i],servletName))     continue;    ApplicationFilterConfig filterConfig=(ApplicationFilterConfig)context.findFilterConfig(filterMaps[i].getFilterName());    if (filterConfig == null) {      continue;    }    filterChain.addFilter(filterConfig);  }  return filterChain;}  }
class C{  private final void addOrder(int ch,int anOrder){  int order=mapping.elementAt(ch);  if (order >= RBCollationTables.CONTRACTCHARINDEX) {    int length=1;    if (Character.isSupplementaryCodePoint(ch)) {      length=Character.toChars(ch,keyBuf,0);    } else {      keyBuf[0]=(char)ch;    }    addContractOrder(new String(keyBuf,0,length),anOrder);  } else {    mapping.setElementAt(ch,anOrder);  }}  }
class C{  public static String convertUPCAtoUPCE(String text){  if (text.length() != 12 || !(text.startsWith("0") || text.startsWith("1")))   return null;  if (text.substring(3,6).equals("000") || text.substring(3,6).equals("100") || text.substring(3,6).equals("200")) {    if (text.substring(6,8).equals("00")) {      return text.substring(0,1) + text.substring(1,3) + text.substring(8,11)+ text.substring(3,4)+ text.substring(11);    }  } else   if (text.substring(4,6).equals("00")) {    if (text.substring(6,9).equals("000")) {      return text.substring(0,1) + text.substring(1,4) + text.substring(9,11)+ "3"+ text.substring(11);    }  } else   if (text.substring(5,6).equals("0")) {    if (text.substring(6,10).equals("0000")) {      return text.substring(0,1) + text.substring(1,5) + text.substring(10,11)+ "4"+ text.substring(11);    }  } else   if (text.charAt(10) >= '5') {    if (text.substring(6,10).equals("0000")) {      return text.substring(0,1) + text.substring(1,6) + text.substring(10,11)+ text.substring(11);    }  }  return null;}  }
class C{  public CertPath engineGenerateCertPath(List certs) throws CertificateException {  ArrayList<Certificate> validCerts=new ArrayList<Certificate>();  for (Iterator i=certs.iterator(); i.hasNext(); ) {    Certificate c=(Certificate)i.next();    if (!(c instanceof X509Certificate)) {      throw new CertificateException("Not X509: " + c);    }    if (c instanceof TestInvalidX509Certificate) {      throw new CertificateException("Invalid (test) X509: " + c);    }    validCerts.add(c);  }  Certificate[] acerts=new Certificate[validCerts.size()];  validCerts.toArray(acerts);  return new TestCertPath(acerts);}  }
class C{  public void flush(){  Logger logger=this;  Handler targets[]=logger.getHandlers();  if (targets != null) {    for (int i=0; i < targets.length; i++) {      targets[i].flush();    }  }}  }
class C{  public static boolean isEmailAddress(String addr){  return addr != null && addr.contains("@") && addr.contains(".");}  }
class C{  private List<Control> createCookieControl(String cookie) throws DirectoryException {  final MultiDomainServerState state=new MultiDomainServerState(cookie);  final Control cookieControl=new ExternalChangelogRequestControl(true,state);  return newArrayList(cookieControl);}  }
class C{  public boolean isReadable(){  return isReadable;}  }
class C{  @Override public int read(char[] array,int offset,int length){  if (idx >= charSequence.length()) {    return -1;  }  if (array == null) {    throw new NullPointerException("Character array is missing");  }  if (length < 0 || offset < 0 || offset + length > array.length) {    throw new IndexOutOfBoundsException("Array Size=" + array.length + ", offset="+ offset+ ", length="+ length);  }  int count=0;  for (int i=0; i < length; i++) {    int c=read();    if (c == -1) {      return count;    }    array[offset + i]=(char)c;    count++;  }  return count;}  }
class C{  TransferableProxy(Transferable t,boolean local){  proxy=new sun.awt.datatransfer.TransferableProxy(t,local);  transferable=t;  isLocal=local;}  }
class C{  public PropertyEditorSupport(Object source){  if (source == null) {    throw new NullPointerException();  }  setSource(source);}  }
class C{  public void testFloatValueNegInfinity(){  String a="-123809648392384755735.63567887678287E+200";  BigDecimal aNumber=new BigDecimal(a);  float result=Float.NEGATIVE_INFINITY;  assertTrue("incorrect value",aNumber.floatValue() == result);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof MembershipPrincipal)) {    return false;  }  MembershipPrincipal that=(MembershipPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  public HttpRoute(HttpHost target,InetAddress local,HttpHost[] proxies,boolean secure,TunnelType tunnelled,LayerType layered){  this(local,target,toChain(proxies),secure,tunnelled,layered);}  }
class C{  public boolean next(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("next",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    return $self.next();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected static final int findClosest(CharChunk name,CharEntry[] array,int len){  int a=0;  int b=len - 1;  if (b == -1) {    return -1;  }  if (compare(name,array[0].name) < 0) {    return -1;  }  if (b == 0) {    return 0;  }  int i=0;  while (true) {    i=(b + a) >>> 1;    int result=compare(name,array[i].name);    if (result == 1) {      a=i;    } else     if (result == 0) {      return i;    } else {      b=i;    }    if ((b - a) == 1) {      int result2=compare(name,array[b].name);      if (result2 < 0) {        return a;      } else {        return b;      }    }  }}  }
class C{  public SortKey(String attrID){  this.attrID=attrID;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  FSUtils.debug.message("FSTerminationReturnServlet Initializing...");  this.config=config;  metaManager=FSUtils.getIDFFMetaManager();}  }
class C{  @BeforeClass public void startServerAndCreatePasswordFiles() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.dsconfig("set-sasl-mechanism-handler-prop","--handler-name","DIGEST-MD5","--set","server-fqdn:" + "127.0.0.1");  File pwFile=File.createTempFile("valid-bind-password-",".txt");  pwFile.deleteOnExit();  FileWriter fileWriter=new FileWriter(pwFile);  fileWriter.write("password" + System.getProperty("line.separator"));  fileWriter.close();  validPasswordFile=pwFile.getAbsolutePath();  pwFile=File.createTempFile("invalid-bind-password-",".txt");  pwFile.deleteOnExit();  fileWriter=new FileWriter(pwFile);  fileWriter.write("wrongPassword" + System.getProperty("line.separator"));  fileWriter.close();  invalidPasswordFile=pwFile.getAbsolutePath();  modifyFilePath=TestCaseUtils.createTempFile("dn: o=test","changetype: modify","replace: description","description: foo");}  }
class C{  public void convert(CharChunk mb,boolean query) throws IOException {  int start=mb.getOffset();  char buff[]=mb.getBuffer();  int cend=mb.getEnd();  int idx=CharChunk.indexOf(buff,start,cend,'%');  int idx2=-1;  if (query) {    idx2=CharChunk.indexOf(buff,start,(idx >= 0 ? idx : cend),'+');  }  if (idx < 0 && idx2 < 0) {    return;  }  if ((idx2 >= 0 && idx2 < idx) || idx < 0) {    idx=idx2;  }  final boolean noSlash=!(ALLOW_ENCODED_SLASH || query);  for (int j=idx; j < cend; j++, idx++) {    if (buff[j] == '+' && query) {      buff[idx]=(' ');    } else     if (buff[j] != '%') {      buff[idx]=buff[j];    } else {      if (j + 2 >= cend) {        throw EXCEPTION_EOF;      }      char b1=buff[j + 1];      char b2=buff[j + 2];      if (!isHexDigit(b1) || !isHexDigit(b2)) {        throw EXCEPTION_NOT_HEX_DIGIT;      }      j+=2;      int res=x2c(b1,b2);      if (noSlash && (res == '/')) {        throw EXCEPTION_SLASH;      }      buff[idx]=(char)res;    }  }  mb.setEnd(idx);}  }
class C{  public int evaluate(){  return Condition.INDETERMINATE;}  }
class C{  private static boolean isCased(int ch){  int type=Character.getType(ch);  if (type == Character.LOWERCASE_LETTER || type == Character.UPPERCASE_LETTER || type == Character.TITLECASE_LETTER) {    return true;  } else {    if ((ch >= 0x02B0) && (ch <= 0x02B8)) {      return true;    } else     if ((ch >= 0x02C0) && (ch <= 0x02C1)) {      return true;    } else     if ((ch >= 0x02E0) && (ch <= 0x02E4)) {      return true;    } else     if (ch == 0x0345) {      return true;    } else     if (ch == 0x037A) {      return true;    } else     if ((ch >= 0x1D2C) && (ch <= 0x1D61)) {      return true;    } else     if ((ch >= 0x2160) && (ch <= 0x217F)) {      return true;    } else     if ((ch >= 0x24B6) && (ch <= 0x24E9)) {      return true;    } else {      return false;    }  }}  }
class C{  public static float wallpaperTravelToScreenWidthRatio(int width,int height){  float aspectRatio=width / (float)height;  final float ASPECT_RATIO_LANDSCAPE=16 / 10f;  final float ASPECT_RATIO_PORTRAIT=10 / 16f;  final float WALLPAPER_WIDTH_TO_SCREEN_RATIO_LANDSCAPE=1.5f;  final float WALLPAPER_WIDTH_TO_SCREEN_RATIO_PORTRAIT=1.2f;  final float x=(WALLPAPER_WIDTH_TO_SCREEN_RATIO_LANDSCAPE - WALLPAPER_WIDTH_TO_SCREEN_RATIO_PORTRAIT) / (ASPECT_RATIO_LANDSCAPE - ASPECT_RATIO_PORTRAIT);  final float y=WALLPAPER_WIDTH_TO_SCREEN_RATIO_PORTRAIT - x * ASPECT_RATIO_PORTRAIT;  return x * aspectRatio + y;}  }
class C{  public Task create(Token token,ResultHandler<Token,?> handler){  return new CreateTask(token,handler);}  }
class C{  public String toString(){  return String.valueOf(get());}  }
class C{  private void releaseWaiters(int phase){  QNode q;  Thread t;  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  while ((q=head.get()) != null && q.phase != (int)(root.state >>> PHASE_SHIFT)) {    if (head.compareAndSet(q,q.next) && (t=q.thread) != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  @Override public Map<String,MappedClass> read(BufferedReader fileReader) throws Exception {  Map<String,MappedClass> origNameMap=new HashMap<String,MappedClass>();  Map<String,MappedClass> newNameMap=new HashMap<String,MappedClass>();  String line=null;  MappedClass curClass=null;  while ((line=fileReader.readLine()) != null) {    if (!line.contains("->")) {      continue;    }    String[] parts=line.trim().split(" ");    try {      if (line.trim().endsWith(":")) {        curClass=readClass(parts);        if (curClass != null) {          origNameMap.put(curClass.getOriginalName(),curClass);          newNameMap.put(curClass.getNewName(),curClass);        }      } else       if (curClass != null) {        if (isMethod(line.trim())) {          addMethod(curClass,parts);        } else {          addField(curClass,parts);        }      }    } catch (    ArrayIndexOutOfBoundsException|IllegalArgumentException ex) {      throw new Exception("Malformed line:\n" + line);    }  }  Set<String> origMapSet=new HashSet<String>();  origMapSet.addAll(origNameMap.keySet());  for (  String className : origMapSet) {    MappedClass mappedClass=origNameMap.get(className);    origNameMap=MappingFactory.linkMappings(mappedClass,origNameMap);  }  for (  String className : origMapSet) {    MappedClass mappedClass=origNameMap.get(className);    for (    MappedMember field : mappedClass.getFields()) {      field.setDesc(StringUtils.fixDescReverse(field.getDesc(),origNameMap,newNameMap));    }    for (    MappedMember method : mappedClass.getMethods()) {      method.setDesc(StringUtils.fixDescReverse(method.getDesc(),origNameMap,newNameMap));    }    origNameMap.put(className,mappedClass);  }  return origNameMap;}  }
class C{  public static int diffChanges(ServerState ss1,ServerState ss2) throws IllegalArgumentException {  if (ss1 == null || ss2 == null) {    throw new IllegalArgumentException("Null server state(s)");  }  int diff=0;  for (  Integer serverId : ss1.serverIdToCSN.keySet()) {    CSN csn1=ss1.serverIdToCSN.get(serverId);    if (csn1 != null) {      CSN csn2=ss2.serverIdToCSN.get(serverId);      if (csn2 != null) {        diff+=CSN.diffSeqNum(csn1,csn2);      } else {        diff+=csn1.getSeqnum();      }    }  }  return diff;}  }
class C{  protected Process launch(final CommandLine command,final Map<String,String> env,final File dir) throws IOException {  if (this.launcher == null) {    throw new IllegalStateException("CommandLauncher can not be null");  }  if (dir != null && !dir.exists()) {    throw new IOException(dir + " doesn't exist.");  }  return this.launcher.exec(command,env,dir);}  }
class C{  public void put(String hostname,InetAddress[] addresses){  cache.put(hostname,new AddressCacheEntry(addresses));}  }
class C{  public void addOperation(UndoOperation<?> op,int mergeMode){  if (mWorking == null) {    throw new IllegalStateException("Must be called during an update");  }  UndoOwner owner=op.getOwner();  if (owner.mManager != this) {    throw new IllegalArgumentException("Given operation's owner is not in this undo manager.");  }  if (mergeMode != MERGE_MODE_NONE && !mMerged && !mWorking.hasData()) {    UndoState state=getTopUndo(null);    if (state != null && (mergeMode == MERGE_MODE_ANY || !state.hasMultipleOwners()) && state.canMerge() && state.hasOperation(op.getOwner())) {      mWorking.destroy();      mWorking=state;      mUndos.remove(state);      mMerged=true;    }  }  mWorking.addOperation(op);}  }
class C{  private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){  StringBuilder tmp=new StringBuilder(count);  int submode=initialSubmode;  int idx=0;  while (true) {    char ch=msg.charAt(startpos + idx);switch (submode) {case SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {        if (ch == ' ') {          tmp.append((char)26);        } else {          tmp.append((char)(ch - 65));        }      } else {        if (isAlphaLower(ch)) {          submode=SUBMODE_LOWER;          tmp.append((char)27);          continue;        } else         if (isMixed(ch)) {          submode=SUBMODE_MIXED;          tmp.append((char)28);          continue;        } else {          tmp.append((char)29);          tmp.append((char)PUNCTUATION[ch]);          break;        }      }    break;case SUBMODE_LOWER:  if (isAlphaLower(ch)) {    if (ch == ' ') {      tmp.append((char)26);    } else {      tmp.append((char)(ch - 97));    }  } else {    if (isAlphaUpper(ch)) {      tmp.append((char)27);      tmp.append((char)(ch - 65));      break;    } else     if (isMixed(ch)) {      submode=SUBMODE_MIXED;      tmp.append((char)28);      continue;    } else {      tmp.append((char)29);      tmp.append((char)PUNCTUATION[ch]);      break;    }  }break;case SUBMODE_MIXED:if (isMixed(ch)) {tmp.append((char)MIXED[ch]);} else {if (isAlphaUpper(ch)) {  submode=SUBMODE_ALPHA;  tmp.append((char)28);  continue;} else if (isAlphaLower(ch)) {  submode=SUBMODE_LOWER;  tmp.append((char)27);  continue;} else {  if (startpos + idx + 1 < count) {    char next=msg.charAt(startpos + idx + 1);    if (isPunctuation(next)) {      submode=SUBMODE_PUNCTUATION;      tmp.append((char)25);      continue;    }  }  tmp.append((char)29);  tmp.append((char)PUNCTUATION[ch]);}}break;default :if (isPunctuation(ch)) {tmp.append((char)PUNCTUATION[ch]);} else {submode=SUBMODE_ALPHA;tmp.append((char)29);continue;}}idx++;if (idx >= count) {break;}}char h=0;int len=tmp.length();for (int i=0; i < len; i++) {boolean odd=(i % 2) != 0;if (odd) {h=(char)((h * 30) + tmp.charAt(i));sb.append(h);} else {h=tmp.charAt(i);}}if ((len % 2) != 0) {sb.append((char)((h * 30) + 29));}return submode;}  }
class C{  private boolean isMonitorConfigAttribute(final Attribute attribute){  final AttributeType attrType=attribute.getAttributeDescription().getAttributeType();  return attrType.hasName(ATTR_COMMON_NAME) || attrType.hasName(ATTR_BACKEND_ENABLED) || attrType.hasName(ATTR_BACKEND_CLASS)|| attrType.hasName(ATTR_BACKEND_BASE_DN)|| attrType.hasName(ATTR_BACKEND_ID)|| attrType.hasName(ATTR_BACKEND_WRITABILITY_MODE);}  }
class C{  public PageAction(String nm,boolean left,boolean select){  super(nm);  this.select=select;  this.left=left;}  }
class C{  public SkipPageException(String message){  super(message);}  }
class C{  public static boolean isValidCharacterValue(int c){  return (c == 0x9 || c == 0xA || c == 0xD || c >= 0x20 && c <= 0xD7FF || c >= 0xE000 && c <= 0xFFFD || c >= 0x10000 && c <= 0x10FFFF);}  }
class C{  public JAXBElement(QName name,Class<T> declaredType,T value){  this(name,declaredType,GlobalScope.class,value);}  }
class C{  public void insertAt(int row,int[] values){  if ((row < 0) || (row > size())) {    throw new IndexOutOfBoundsException("row " + row);  }  if ((values != null) && (values.length < width())) {    throw new IndexOutOfBoundsException("value count " + values.length);  }  moveRowGapTo(row);  if (mRowGapLength == 0) {    growBuffer();  }  mRowGapStart++;  mRowGapLength--;  if (values == null) {    for (int i=mColumns - 1; i >= 0; i--) {      setValueInternal(row,i,0);    }  } else {    for (int i=mColumns - 1; i >= 0; i--) {      setValueInternal(row,i,values[i]);    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  ((ActionListener)a).actionPerformed(e);  ((ActionListener)b).actionPerformed(e);}  }
class C{  public static Event35Id.Builder newBuilder(Event35Id.Builder other){  return new Event35Id.Builder(other);}  }
class C{  public IncompatibleClassChangeError(String s){  super(s);}  }
class C{  void removeAt(final int removeIndex){  final Object[] items=this.items;  if (removeIndex == takeIndex) {    items[takeIndex]=null;    takeIndex=inc(takeIndex);    count--;    if (itrs != null)     itrs.elementDequeued();  } else {    final int putIndex=this.putIndex;    for (int i=removeIndex; ; ) {      int next=inc(i);      if (next != putIndex) {        items[i]=items[next];        i=next;      } else {        items[i]=null;        this.putIndex=i;        break;      }    }    count--;    if (itrs != null)     itrs.removedAt(removeIndex);  }  notFull.signal();}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiTreeUI();  return MultiLookAndFeel.createUIs(mui,((MultiTreeUI)mui).uis,a);}  }
class C{  public void zoomOutImage(float deltaScale){  zoomOutImage(deltaScale,mCropRect.centerX(),mCropRect.centerY());}  }
class C{  public AttributeQuery createAttributeQuery(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE_QUERY,value);  if (obj == null) {    return new AttributeQueryImpl(value);  } else {    return (AttributeQuery)obj;  }}  }
class C{  @Override public void sendNotification(Notification notification) throws MBeanException, RuntimeOperationsException {  if (notification == null)   throw new RuntimeOperationsException(new IllegalArgumentException("Notification is null"),"Notification is null");  if (generalBroadcaster == null)   return;  generalBroadcaster.sendNotification(notification);}  }
class C{  @Override public ProtobufGenerator useDefaultPrettyPrinter(){  return this;}  }
class C{  public static <T>ObjectPool<T> erodingPool(final ObjectPool<T> pool,final float factor){  if (pool == null) {    throw new IllegalArgumentException("pool must not be null.");  }  if (factor <= 0f) {    throw new IllegalArgumentException("factor must be positive.");  }  return new ErodingObjectPool<>(pool,factor);}  }
class C{  public String toString(){  return (index);}  }
class C{  LDAPManagedObject(LDAPDriver driver,ManagedObjectDefinition<T,? extends Configuration> d,ManagedObjectPath<T,? extends Configuration> path,PropertySet properties,boolean existsOnServer,PropertyDefinition<?> namingPropertyDefinition){  super(d,path,properties,existsOnServer,namingPropertyDefinition);  this.driver=driver;}  }
class C{  public int hashCode(){  if (stubDelegate == null) {    setDefaultDelegate();  }  if (stubDelegate != null) {    return stubDelegate.hashCode(this);  }  return 0;}  }
class C{  public PdfCanvas openTag(CanvasTag tag){  if (tag.getRole() == null)   return this;  return beginMarkedContent(tag.getRole(),tag.getProperties());}  }
class C{  public boolean hasNameOrOID(final String value){  return hasName(value) || getOID().equals(value);}  }
class C{  private boolean end_points_matching(BrdTracep p_trace,BrdItem p_from_item){  if (p_from_item == p_trace)   return true;  if (!p_trace.shares_net(p_from_item))   return false;  if (p_from_item instanceof BrdAbit) {    PlaPointInt from_center=((BrdAbit)p_from_item).center_get();    if (from_center.equals(p_trace.corner_first()))     return true;    if (from_center.equals(p_trace.corner_last()))     return true;  } else   if (p_from_item instanceof BrdTracep) {    BrdTracep from_trace=(BrdTracep)p_from_item;    if (p_trace.corner_first().equals(from_trace.corner_first()))     return true;    if (p_trace.corner_first().equals(from_trace.corner_last()))     return true;    if (p_trace.corner_last().equals(from_trace.corner_first()))     return true;    if (p_trace.corner_last().equals(from_trace.corner_last()))     return true;  }  return false;}  }
class C{  public KeyException(String msg){  super(msg);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PageRanges);}  }
class C{  Process openProcess(String[] cmdAttribs) throws IOException {  return Runtime.getRuntime().exec(cmdAttribs);}  }
class C{  public void insert_double(double value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_double",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_double(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public int compareTo(ModelLog anotherItem){  if (anotherItem.timestamp > this.timestamp) {    return 1;  } else   if (anotherItem.timestamp < this.timestamp) {    return -1;  } else {    return 0;  }}  }
class C{  public HashDocAttributeSet(){  super(DocAttribute.class);}  }
class C{  public String toString(){  return _type;}  }
class C{  public AuthnSvcException(String s){  super(s);  fillInStackTrace();}  }
class C{  @NonNull public static Interpolator linearOutSlowIn(){  return new LinearOutSlowInInterpolator();}  }
class C{  private static void addTestUser() throws Exception {  TestCaseUtils.addEntry("dn: uid=test.user,o=test","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: test.user","givenName: Test","sn: User","cn: Test User","ds-privilege-name: bypass-acl","userPassword: password");}  }
class C{  private static String[] collationMatchingRuleNames(final List<String> localeNames,final int numSuffix,final String symbolicSuffix){  final List<String> names=new ArrayList<>();  for (  String localeName : localeNames) {    if (symbolicSuffix.isEmpty()) {      names.add(localeName);    } else {      names.add(localeName + "." + numSuffix);      names.add(localeName + "." + symbolicSuffix);    }  }  return names.toArray(new String[names.size()]);}  }
class C{  public String createRole(String rolename,String description){  UserDatabase database=(UserDatabase)this.resource;  Role role=database.createRole(rolename,description);  try {    MBeanUtils.createMBean(role);  } catch (  Exception e) {    IllegalArgumentException iae=new IllegalArgumentException("Exception creating role [" + rolename + "] MBean");    iae.initCause(e);    throw iae;  }  return (findRole(rolename));}  }
class C{  public static String replaceString(String originalString,String token,String newString){  int lenToken=token.length();  int idx=originalString.indexOf(token);  while (idx != -1) {    originalString=originalString.substring(0,idx) + newString + originalString.substring(idx + lenToken);    idx=originalString.indexOf(token,idx + lenToken);  }  return originalString;}  }
class C{  public FuncExtFunction(java.lang.String namespace,java.lang.String extensionName,Object methodKey){  m_namespace=namespace;  m_extensionName=extensionName;  m_methodKey=methodKey;}  }
class C{  public boolean isPropertyPattern(){  return _property_list_pattern || _property_value_pattern;}  }
class C{  @Override public void dump(final String prefix,final FileDescriptor fd,final PrintWriter writer,final String[] args){  delegate.dump(prefix,fd,writer,args);}  }
class C{  public Set createOrganizations(Map organizationsMap) throws AMException, SSOException {  Iterator iter=organizationsMap.keySet().iterator();  Set orgs=new HashSet();  while (iter.hasNext()) {    String orgName=(String)iter.next();    String orgDN=AMNamingAttrManager.getNamingAttr(ORGANIZATION) + "=" + orgName+ ","+ super.entryDN;    Map attributes=(Map)organizationsMap.get(orgName);    AMOrganizationImpl orgImpl=new AMOrganizationImpl(super.token,orgDN);    orgImpl.setAttributes(attributes);    orgImpl.create();    orgs.add(orgImpl);  }  return orgs;}  }
class C{  public void testConstrStringWithExponentWithoutPoint2(){  String a="-238768787678287e-214";  int aScale=214;  BigInteger bA=new BigInteger("-238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public void paint(Graphics g){  boolean shouldClearPaintFlags=false;  if ((getWidth() <= 0) || (getHeight() <= 0)) {    return;  }  Graphics componentGraphics=getComponentGraphics(g);  Graphics co=componentGraphics.create();  try {    RepaintManager repaintManager=RepaintManager.currentManager(this);    Rectangle clipRect=co.getClipBounds();    int clipX;    int clipY;    int clipW;    int clipH;    if (clipRect == null) {      clipX=clipY=0;      clipW=getWidth();      clipH=getHeight();    } else {      clipX=clipRect.x;      clipY=clipRect.y;      clipW=clipRect.width;      clipH=clipRect.height;    }    if (clipW > getWidth()) {      clipW=getWidth();    }    if (clipH > getHeight()) {      clipH=getHeight();    }    if (getParent() != null && !(getParent() instanceof JComponent)) {      adjustPaintFlags();      shouldClearPaintFlags=true;    }    int bw, bh;    boolean printing=getFlag(IS_PRINTING);    if (!printing && repaintManager.isDoubleBufferingEnabled() && !getFlag(ANCESTOR_USING_BUFFER)&& isDoubleBuffered()&& (getFlag(IS_REPAINTING) || repaintManager.isPainting())) {      repaintManager.beginPaint();      try {        repaintManager.paint(this,this,co,clipX,clipY,clipW,clipH);      }  finally {        repaintManager.endPaint();      }    } else {      if (clipRect == null) {        co.setClip(clipX,clipY,clipW,clipH);      }      if (!rectangleIsObscured(clipX,clipY,clipW,clipH)) {        if (!printing) {          paintComponent(co);          paintBorder(co);        } else {          printComponent(co);          printBorder(co);        }      }      if (!printing) {        paintChildren(co);      } else {        printChildren(co);      }    }  }  finally {    co.dispose();    if (shouldClearPaintFlags) {      setFlag(ANCESTOR_USING_BUFFER,false);      setFlag(IS_PAINTING_TILE,false);      setFlag(IS_PRINTING,false);      setFlag(IS_PRINTING_ALL,false);    }  }}  }
class C{  public ModifyDnContext(CSN csn,String entryUUID,String newSuperiorEntryUUID){  super(csn,entryUUID);  this.newSuperiorEntryUUID=newSuperiorEntryUUID;}  }
class C{  protected void paint(SynthContext context,Graphics g){  JProgressBar pBar=(JProgressBar)context.getComponent();  int x=0, y=0, width=0, height=0;  if (!pBar.isIndeterminate()) {    Insets pBarInsets=pBar.getInsets();    double percentComplete=pBar.getPercentComplete();    if (percentComplete != 0.0) {      if (pBar.getOrientation() == JProgressBar.HORIZONTAL) {        x=pBarInsets.left + progressPadding;        y=pBarInsets.top + progressPadding;        width=(int)(percentComplete * (pBar.getWidth() - (pBarInsets.left + progressPadding + pBarInsets.right+ progressPadding)));        height=pBar.getHeight() - (pBarInsets.top + progressPadding + pBarInsets.bottom+ progressPadding);        if (!SynthLookAndFeel.isLeftToRight(pBar)) {          x=pBar.getWidth() - pBarInsets.right - width- progressPadding;        }      } else {        x=pBarInsets.left + progressPadding;        width=pBar.getWidth() - (pBarInsets.left + progressPadding + pBarInsets.right+ progressPadding);        height=(int)(percentComplete * (pBar.getHeight() - (pBarInsets.top + progressPadding + pBarInsets.bottom+ progressPadding)));        y=pBar.getHeight() - pBarInsets.bottom - height- progressPadding;      }    }  } else {    boxRect=getBox(boxRect);    x=boxRect.x + progressPadding;    y=boxRect.y + progressPadding;    width=boxRect.width - progressPadding - progressPadding;    height=boxRect.height - progressPadding - progressPadding;  }  if (tileWhenIndeterminate && pBar.isIndeterminate()) {    double percentComplete=(double)getAnimationIndex() / (double)getFrameCount();    int offset=(int)(percentComplete * tileWidth);    Shape clip=g.getClip();    g.clipRect(x,y,width,height);    if (pBar.getOrientation() == JProgressBar.HORIZONTAL) {      for (int i=x - tileWidth + offset; i <= width; i+=tileWidth) {        context.getPainter().paintProgressBarForeground(context,g,i,y,tileWidth,height,pBar.getOrientation());      }    } else {      for (int i=y - offset; i < height + tileWidth; i+=tileWidth) {        context.getPainter().paintProgressBarForeground(context,g,x,i,width,tileWidth,pBar.getOrientation());      }    }    g.setClip(clip);  } else {    context.getPainter().paintProgressBarForeground(context,g,x,y,width,height,pBar.getOrientation());  }  if (pBar.isStringPainted()) {    paintText(context,g,pBar.getString());  }}  }
class C{  public NSDate(Date d){  if (d == null)   throw new IllegalArgumentException("Date cannot be null");  date=d;}  }
class C{  public AlertHandlerConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  alertHandlers=new ConcurrentHashMap<>();}  }
class C{  public static String formatMessage(String formatStr,Object[] objs){  return MessageFormat.format(formatStr,objs);}  }
class C{  public void addStyleSheet(StyleSheet ss){synchronized (this) {    if (linkedStyleSheets == null) {      linkedStyleSheets=new Vector<StyleSheet>();    }    if (!linkedStyleSheets.contains(ss)) {      int index=0;      if (ss instanceof javax.swing.plaf.UIResource && linkedStyleSheets.size() > 1) {        index=linkedStyleSheets.size() - 1;      }      linkedStyleSheets.insertElementAt(ss,index);      linkStyleSheetAt(ss,index);    }  }}  }
class C{  @SuppressWarnings("unused") public static long parseLong(byte[] bytes){  return parseLong(bytes,0,bytes.length);}  }
class C{  public void onSearchBoxTextChanged(String searchText,boolean forceReloadEventIfSameText){  if (!forceReloadEventIfSameText && Utility.stringsEqualOrEmpty(this.searchText,searchText)) {    return;  }  if (TextUtils.isEmpty(searchText)) {    searchText=null;  }  this.searchText=searchText;  hasSearchTextChangedSinceLastQuery=true;  if (searchTextTimer == null) {    searchTextTimer=createSearchTextTimer();  }}  }
class C{  public boolean hasBinaryAttributes(){  return false;}  }
class C{  protected void callSubtreeVisitors(XPathVisitor visitor){  if (null != m_predicates) {    int n=m_predicates.length;    for (int i=0; i < n; i++) {      ExpressionOwner predOwner=new PredOwner(i);      if (visitor.visitPredicate(predOwner,m_predicates[i])) {        m_predicates[i].callVisitors(predOwner,visitor);      }    }  }  if (null != m_relativePathPattern) {    m_relativePathPattern.callVisitors(this,visitor);  }}  }
class C{  public XPathProcessorException(String message,Exception e){  super(message,e);}  }
class C{  public boolean hasDisplayName(){  return (displayName != null);}  }
class C{  public void initialize(String pdpEntityId,String pepEntityId,Map properties) throws XACMLException {}  }
class C{  public void testZigZagInt(){  assertEquals(0,SmileUtil.zigzagEncode(0));  assertEquals(1,SmileUtil.zigzagEncode(-1));  assertEquals(2,SmileUtil.zigzagEncode(1));  assertEquals(0xFFFFFFFF,SmileUtil.zigzagEncode(Integer.MIN_VALUE));  assertEquals(0xFFFFFFFE,SmileUtil.zigzagEncode(Integer.MAX_VALUE));  assertEquals(0,SmileUtil.zigzagDecode(0));  assertEquals(-1,SmileUtil.zigzagDecode(1));  assertEquals(1,SmileUtil.zigzagDecode(2));  assertEquals(0x7fffFFFF,SmileUtil.zigzagDecode(0xFFFFFFFE));  assertEquals(Integer.MIN_VALUE,SmileUtil.zigzagDecode(0xFFFFFFFF));  assertEquals(Integer.MIN_VALUE,SmileUtil.zigzagDecode(SmileUtil.zigzagEncode(Integer.MIN_VALUE)));  assertEquals(Integer.MAX_VALUE,SmileUtil.zigzagDecode(SmileUtil.zigzagEncode(Integer.MAX_VALUE)));}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public ObjectStreamField(String name,Class<?> cl){  if (name == null) {    throw new NullPointerException("name == null");  } else   if (cl == null) {    throw new NullPointerException("cl == null");  }  this.name=name;  this.type=new WeakReference<Class<?>>(cl);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (resourceBundleName != null) {    try {      rb=ResourceBundle.getBundle(resourceBundleName);    } catch (    MissingResourceException e) {      rb=null;    }  }}  }
class C{  public FSAuthDomainsModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  protected TreeCellRenderer createDefaultCellRenderer(){  return new DefaultTreeCellRenderer();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  Node retval;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);{      boolean success=false;      try {        retval=notations.removeNamedItem("notation1");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);      }      assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);    }  }}  }
class C{  public void clear(){  options=null;  name=null;  value=null;  children=null;  qualifier=null;}  }
class C{  protected boolean Step() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  boolean doubleSlash=tokenIs('/');  if (doubleSlash) {    nextToken();    appendOp(2,OpCodes.FROM_DESCENDANTS_OR_SELF);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.NODETYPE_NODE);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  }  if (tokenIs(".")) {    nextToken();    if (tokenIs('[')) {      error(XPATHErrorResources.ER_PREDICATE_ILLEGAL_SYNTAX,null);    }    appendOp(4,OpCodes.FROM_SELF);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_NODE);  } else   if (tokenIs("..")) {    nextToken();    appendOp(4,OpCodes.FROM_PARENT);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_NODE);  } else   if (tokenIs('*') || tokenIs('@') || tokenIs('_')|| (m_token != null && Character.isLetter(m_token.charAt(0)))) {    Basis();    while (tokenIs('[')) {      Predicate();    }    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);  } else {    if (doubleSlash) {      error(XPATHErrorResources.ER_EXPECTED_LOC_STEP,null);    }    return false;  }  return true;}  }
class C{  private PlaPointInt try_neckdown_at_start(PlaPointInt p_to_corner){  if (!(start_item instanceof BrdAbitPin))   return prev_corner;  BrdAbitPin start_pin=(BrdAbitPin)start_item;  if (!start_pin.is_on_layer(layer_active_no))   return prev_corner;  PlaPointFloat pin_center=start_pin.center_get().to_float();  double curr_clearance=r_board.brd_rules.clearance_matrix.value_at(clearance_class,start_pin.clearance_idx(),layer_active_no);  double pin_neck_down_distance=2 * (0.5 * start_pin.get_max_width(layer_active_no) + curr_clearance);  if (pin_center.distance(prev_corner.to_float()) >= pin_neck_down_distance)   return prev_corner;  int neck_down_halfwidth=start_pin.get_trace_neckdown_halfwidth(layer_active_no);  if (neck_down_halfwidth >= pen_half_width_arr[layer_active_no])   return prev_corner;  if (!prev_corner.equals(start_pin.center_get())) {    BrdItem picked_item=r_board.pick_nearest_routing_item(prev_corner,layer_active_no,null);    if (picked_item instanceof BrdTracep) {      if (((BrdTracep)picked_item).get_half_width() > neck_down_halfwidth) {        return prev_corner;      }    }  }  TimeLimit time_limit=new TimeLimit(s_CHECK_FORCED_TRACE_TIME_MAX);  PlaPointInt ok_point=r_board.insert_trace(prev_corner,p_to_corner,neck_down_halfwidth,layer_active_no,net_nos,clearance_class,max_shove_trace_recursion_depth,max_shove_via_recursion_depth,max_spring_over_recursion_depth,itera_settings.trace_pullt_min_move,!is_stitch_mode,time_limit);  return ok_point;}  }
class C{  public E poll(){  if (isEmpty()) {    return null;  }  E result=elements[0];  removeAt(0);  return result;}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public GuiConfigScanner(java.io.Reader in){  this.zzReader=in;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.DemographicsElement createDemographicsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DemographicsElementImpl();}  }
class C{  public static void doAsPrivilege(final String methodName,final Filter targetObject,final Class<?>[] targetType,final Object[] targetArguments) throws Exception {  doAsPrivilege(methodName,targetObject,targetType,targetArguments,null);}  }
class C{  public Object clone() throws CloneNotSupportedException {  return (ObjectStack)super.clone();}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  private void decodeHeader(BufferedReader in,Properties pre,Properties parms,Properties header){  try {    String inLine=in.readLine();    if (inLine == null) {      sendError(HTTP_BADREQUEST,"BAD REQUEST: Syntax error. Usage: GET /example/file.html");      return;    }    StringTokenizer st=new StringTokenizer(inLine);    if (!st.hasMoreTokens()) {      sendError(HTTP_BADREQUEST,"BAD REQUEST: Syntax error. Usage: GET /example/file.html");      return;    }    String method=st.nextToken();    pre.put("method",method);    if (!st.hasMoreTokens()) {      sendError(HTTP_BADREQUEST,"BAD REQUEST: Missing URI. Usage: GET /example/file.html");      return;    }    String uri=st.nextToken();    int qmi=uri.indexOf('?');    if (qmi >= 0) {      StringTokenizer tokenizer=new StringTokenizer(uri.substring(qmi + 1),"&");      while (tokenizer.hasMoreTokens()) {        String e=tokenizer.nextToken();        int sep=e.indexOf('=');        if (sep >= 0)         parms.put(e.substring(0,sep).trim(),e.substring(sep + 1));      }      uri=uri.substring(0,qmi);    }    if (st.hasMoreTokens()) {      String line=in.readLine();      while (line != null && line.trim().length() > 0) {        int p=line.indexOf(':');        if (p >= 0)         header.put(line.substring(0,p).trim().toLowerCase(Locale.ENGLISH),line.substring(p + 1).trim());        line=in.readLine();      }    }    pre.put("uri",uri);  } catch (  IOException ioe) {    showText("Error: " + ioe.toString());    sendError(HTTP_INTERNALERROR,"SERVER INTERNAL ERROR: IOException: " + ioe.getMessage());  }}  }
class C{  void resetForm(){  Element parent=getFormElement();  if (parent != null) {    ElementIterator it=new ElementIterator(parent);    Element next;    while ((next=it.next()) != null) {      if (isControl(next)) {        AttributeSet elemAttr=next.getAttributes();        Object m=elemAttr.getAttribute(StyleConstants.ModelAttribute);        if (m instanceof TextAreaDocument) {          TextAreaDocument doc=(TextAreaDocument)m;          doc.reset();        } else         if (m instanceof PlainDocument) {          try {            PlainDocument doc=(PlainDocument)m;            doc.remove(0,doc.getLength());            if (HTMLDocument.matchNameAttribute(elemAttr,HTML.Tag.INPUT)) {              String value=(String)elemAttr.getAttribute(HTML.Attribute.VALUE);              if (value != null) {                doc.insertString(0,value,null);              }            }          } catch (          BadLocationException e) {          }        } else         if (m instanceof OptionListModel) {          OptionListModel model=(OptionListModel)m;          int size=model.getSize();          for (int i=0; i < size; i++) {            model.removeIndexInterval(i,i);          }          BitSet selectionRange=model.getInitialSelection();          for (int i=0; i < selectionRange.size(); i++) {            if (selectionRange.get(i)) {              model.addSelectionInterval(i,i);            }          }        } else         if (m instanceof OptionComboBoxModel) {          OptionComboBoxModel model=(OptionComboBoxModel)m;          Option option=model.getInitialSelection();          if (option != null) {            model.setSelectedItem(option);          }        } else         if (m instanceof JToggleButton.ToggleButtonModel) {          boolean checked=((String)elemAttr.getAttribute(HTML.Attribute.CHECKED) != null);          JToggleButton.ToggleButtonModel model=(JToggleButton.ToggleButtonModel)m;          model.setSelected(checked);        }      }    }  }}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data,FacebookDialog.Callback facebookDialogCallback){  Session session=Session.getActiveSession();  if (session != null) {    session.onActivityResult(activity,requestCode,resultCode,data);  }  if (LikeActionController.handleOnActivityResult(activity,requestCode,resultCode,data)) {    return;  }  handleFacebookDialogActivityResult(requestCode,resultCode,data,facebookDialogCallback);}  }
class C{  public static void displayManagedObjectDecodingException(ConsoleApplication app,ManagedObjectDecodingException e){  AbstractManagedObjectDefinition<?,?> d=e.getPartialManagedObject().getManagedObjectDefinition();  LocalizableMessage ufn=d.getUserFriendlyName();  LocalizableMessage msg=e.getCauses().size() == 1 ? ERR_GET_HEADING_MODE_SINGLE.get(ufn) : ERR_GET_HEADING_MODE_PLURAL.get(ufn);  app.errPrintln(msg);  app.errPrintln();  TableBuilder builder=new TableBuilder();  for (  PropertyException pe : e.getCauses()) {    ArgumentException ae=adaptPropertyException(pe,d);    builder.startRow();    builder.appendCell("*");    builder.appendCell(ae.getMessage());  }  TextTablePrinter printer=new TextTablePrinter(app.getErrorStream());  printer.setDisplayHeadings(false);  printer.setColumnWidth(1,0);  printer.setIndentWidth(4);  builder.print(printer);}  }
class C{  public DOMSource(Node node,String systemID){  setNode(node);  setSystemId(systemID);}  }
class C{  public static boolean isValidAttributeName(String s){  return isValidObjectclassName(s);}  }
class C{  public void removeEnvironment(String name){  try {    envCtx.unbind(name);  } catch (  NamingException e) {    log.error(sm.getString("naming.unbindFailed",e));  }}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.lang.String idAttrName,java.lang.String id,boolean includeCert,java.lang.String xpath) throws XMLSignatureException {  return sp.signXML(doc,certAlias,algorithm,idAttrName,id,includeCert,xpath);}  }
class C{  public TimeStampNaming(File file){  this.file=file;  this.filter=new TimeStampNamingFilter();}  }
class C{  @Override public boolean isReady(){  return false;}  }
class C{  @Deprecated protected String normalizeMimeTypeParameter(String parameterName,String parameterValue){  return parameterValue;}  }
class C{  private BuildVersion(final int major,final int minor,final int point,final String rev){  this.major=major;  this.minor=minor;  this.point=point;  this.rev=rev;}  }
class C{  @Override public void onPropertyChanged(Observable sender,int propertyId){  if (propertyId == Conversation.STATE_PROPERTY_ID) {    updateConversationState();  }}  }
class C{  public boolean mayUseGraceLogin(){  refreshIfUndefined(mayUseGraceLogin);  return mayUseGraceLogin == ConditionResult.TRUE;}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  if (applicationName != null) {    result=37 * result + applicationName.hashCode();  }  if (resourceNames != null) {    result=37 * result + resourceNames.hashCode();  }  if (actions != null) {    result=37 * result + actions.hashCode();  }  return result;}  }
class C{  public void display(){  getDialog().packAndShow();}  }
class C{  public void clearTempi(){  ((List<EventTimingCode>)getObjectValue(DataTypes.OBJ_SYNCHRONISED_TEMPO_LIST)).clear();}  }
class C{  public void initManager(){  Properties clientProps=new Properties();  InputStream is=null;  try {    is=this.getClass().getResourceAsStream(PROPS_FILE);    clientProps.load(is);  } catch (  Exception ex) {    debug.error(CLASS_NAME + " unable to load properties file" + PROPS_FILE,ex);  } finally {    try {      is.close();    } catch (    IOException ioe) {      debug.error(CLASS_NAME + " unable to close property file");    }  }  if (clientProps != null && !clientProps.isEmpty()) {    try {      processProps(clientProps);    } catch (    InvalidPropertiesFormatException ipfe) {      debug.error(CLASS_NAME + " init unable to process properties file",ipfe);      return;    }  }  if (debug.messageEnabled()) {    debug.message(CLASS_NAME + " basic CDM framework loaded with " + clientsData);  }}  }
class C{  public String isRelation(ObjectName objectName) throws IllegalArgumentException {  if (objectName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"isRelation",objectName);  String result=null;synchronized (myRelMBeanObjName2RelIdMap) {    String relId=myRelMBeanObjName2RelIdMap.get(objectName);    if (relId != null) {      result=relId;    }  }  return result;}  }
class C{  public void addSessionInfo(SessionInfo info){  sessionInfoSet.add(info);}  }
class C{  public Class<? extends Enum> enumType(){  return enumType;}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public boolean isServicesSupported(){  return isServicesSupported;}  }
class C{  public Collection<ResourceSetDescription> filterPolicies(Set<ResourceSetDescription> resourceSets,ResourceSetWithPolicyQuery query){  Collection<ResourceSetDescription> filteredResourceSets=new HashSet<>();  filteredResourceSets.addAll(query.getResourceSetQuery().accept(RESOURCE_SET_QUERY_EVALUATOR,resourceSets));  return filteredResourceSets;}  }
class C{  static Promise<Float> blockingPromiseFloat(final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs && (null != m_selectPattern))   m_selectPattern.getExpression().callVisitors(m_selectPattern,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public boolean updateResponse(PushNotificationServiceConfig config,JsonValue content){  if (content.get(DATA_JSON_POINTER) == null) {    return false;  }  Jwt jwt=new JwtReconstruction().reconstructJwt(content.get(DATA_JSON_POINTER).asString(),Jwt.class);  JwtClaimsSet claimsSet=jwt.getClaimsSet();  updateBasicJsonContent(content,claimsSet);  return updateCommunicationId(content,claimsSet,config);}  }
class C{  public static DecodeException fatalError(final LocalizableMessage message,final Throwable cause){  return new DecodeException(message,true,cause);}  }
class C{  public SIPHeader parse() throws ParseException {  headerName(TokenTypes.PROXY_AUTHENTICATE);  ProxyAuthenticate proxyAuthenticate=new ProxyAuthenticate();  super.parse(proxyAuthenticate);  return proxyAuthenticate;}  }
class C{  public synchronized void push(){  for (int i=0; i < count; i++) {    int ix=(start + i) % buffer.length;    LogRecord record=buffer[ix];    target.publish(record);  }  start=0;  count=0;}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeLengthMismatchArrayAsInteger() throws Exception {  super.testDecodeLengthMismatchArrayAsInteger();}  }
class C{  public String member_name() throws org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("member_name",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.member_name();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public IntrospectionException(String mess){  super(mess);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  protected final void cullCache(){  if (maxCacheSize < 0) {    return;  }  if (cacheSize >= maxCacheSize * .97) {    deleteExpiredEntries();    int desiredSize=(int)(maxCacheSize * .90);    while (cacheSize > desiredSize) {      remove(lastAccessedList.getLast().object);    }  }}  }
class C{  Organization(Principal principal,Guid guid) throws UMSException {  super(principal,guid);  verifyClass();}  }
class C{  public Code39Reader(boolean usingCheckDigit){  this(usingCheckDigit,false);}  }
class C{  public static Map<String,Object> params(String key1,Object value1,String key2,Object value2,String key3,Object value3){  return map(key1,value1,key2,value2,key3,value3);}  }
class C{  private void removeEntityFromCOT(String realm,String entityID) throws IDFFMetaException {  IDPDescriptorConfigElement idpConfig=getIDPDescriptorConfig(realm,entityID);  if (idpConfig != null) {    removeFromCircleOfTrust(idpConfig,realm,entityID);  }  SPDescriptorConfigElement spConfig=getSPDescriptorConfig(realm,entityID);  if (spConfig != null) {    removeFromCircleOfTrust(spConfig,realm,entityID);  }  AffiliationDescriptorConfigElement affiConfig=getAffiliationDescriptorConfig(realm,entityID);  if (affiConfig != null) {    removeFromCircleOfTrust(affiConfig,realm,entityID);  }}  }
class C{  public static String toString(Object value){  return value != null ? value.toString() : null;}  }
class C{  public Set<String> search(SSOToken token,String startDN,String filter,int numOfEntries,int timeLimit,boolean sortResults,boolean ascendingOrder) throws SSOException, SMSException {  if (debug.messageEnabled()) {    debug.message("SMSLdapObject: search filter: " + filter);  }  Set<String> answer=new LinkedHashSet<>();  try (Connection conn=getConnection(token.getPrincipal())){    ConnectionEntryReader results=searchObjects(token,startDN,filter,numOfEntries,timeLimit,sortResults,ascendingOrder,conn);    while (results != null && results.hasNext()) {      try {        if (results.isEntry()) {          answer.add(results.readEntry().getName().toString());        } else {          debug.warning("SMSLdapObject.search(): ignoring reference",results.readReference());        }      } catch (      SearchResultReferenceIOException e) {        debug.error("SMSLdapObject.search: reference should already be handled",e);      }    }  } catch (  LdapException e) {    ResultCode errorCode=e.getResult().getResultCode();    if (errorCode.equals(ResultCode.SIZE_LIMIT_EXCEEDED)) {      debug.warning("SMSLdapObject.search: size limit {} exceeded",numOfEntries);    } else {      debug.warning("SMSLdapObject.search(): Error in searching for filter match: {}",filter,e);      throw new SMSException(e,"sms-error-in-searching");    }  }  if (debug.messageEnabled()) {    debug.message("SMSLdapObject.search() returned successfully: " + filter + "\n\tObjects: "+ answer);  }  return answer;}  }
class C{  public void paint(Graphics g,Shape a){  load();  super.paint(g,a);}  }
class C{  private String toRefSect2(String scriptName,SubCommand subCommand){  Map<String,Object> map=new HashMap<>();  map.put("id",scriptName + "-" + subCommand.getName());  final String name=scriptName + " " + subCommand.getName();  map.put("name",name);  map.put("description",eolToNewPara(subCommand.getDescription()));  map.put("optionsTitle",REF_TITLE_OPTIONS.get());  map.put("optionsIntro",REF_INTRO_OPTIONS.get(name));  map.put("info",subCommand.getDocDescriptionSupplement());  setSubCommandOptionsInfo(map,subCommand);  StringBuilder sb=new StringBuilder();  applyTemplate(sb,"refSect2.ftl",map);  return sb.toString();}  }
class C{  public void test_addPathToNameLintLjava_lang_String2() throws Exception {  setupEnvironment();  byte[] bytes, bytesName;  bytes=new byte[]{-127,8,56,50,50,46,78,97,109,101};  bytesName=new byte[]{22,8,56,50,50,46,78,97,109,101};  assertNotNull(bytes);  byte[] b=new byte[bytes.length];  b=bytes;  b[bytes.length - 3]=(byte)200;  try {    theCertSelector.addPathToName(1,new String(b));  } catch (  IOException e) {  }  theCertSelector.setPathToNames(null);  theCertSelector.addPathToName(1,new String(bytesName));  assertNotNull(theCertSelector.getPathToNames());  CertPath p=buildCertPath();  assertNull(p);  theCertSelector.setPathToNames(null);  theCertSelector.addPathToName(1,rootCertificate.getIssuerX500Principal().getName());  assertNotNull(theCertSelector.getPathToNames());}  }
class C{  @Override public boolean isReady(){  return false;}  }
class C{  protected void updateDamage(DocumentEvent changes,Shape a,ViewFactory f){  Component host=getContainer();  updateMetrics();  Element elem=getElement();  DocumentEvent.ElementChange ec=changes.getChange(elem);  Element[] added=(ec != null) ? ec.getChildrenAdded() : null;  Element[] removed=(ec != null) ? ec.getChildrenRemoved() : null;  if (((added != null) && (added.length > 0)) || ((removed != null) && (removed.length > 0))) {    if (added != null) {      int currWide=getLineWidth(longLine);      for (int i=0; i < added.length; i++) {        int w=getLineWidth(added[i]);        if (w > currWide) {          currWide=w;          longLine=added[i];        }      }    }    if (removed != null) {      for (int i=0; i < removed.length; i++) {        if (removed[i] == longLine) {          calculateLongestLine();          break;        }      }    }    preferenceChanged(null,true,true);    host.repaint();  } else {    Element map=getElement();    int line=map.getElementIndex(changes.getOffset());    damageLineRange(line,line,a,host);    if (changes.getType() == DocumentEvent.EventType.INSERT) {      int w=getLineWidth(longLine);      Element e=map.getElement(line);      if (e == longLine) {        preferenceChanged(null,true,false);      } else       if (getLineWidth(e) > w) {        longLine=e;        preferenceChanged(null,true,false);      }    } else     if (changes.getType() == DocumentEvent.EventType.REMOVE) {      if (map.getElement(line) == longLine) {        calculateLongestLine();        preferenceChanged(null,true,false);      }    }  }}  }
class C{  @Override public void writeObjectData(ObjectOutputStream stream) throws IOException {  writeObjectData((ObjectOutput)stream);}  }
class C{  @Override public void put(final int index,final Scriptable start,final Object value){}  }
class C{  public static Intent buildStartInTerminalIntent(File script){  final ComponentName componentName=Constants.SL4A_SERVICE_LAUNCHER_COMPONENT_NAME;  Intent intent=new Intent();  intent.setComponent(componentName);  intent.setAction(Constants.ACTION_LAUNCH_FOREGROUND_SCRIPT);  intent.putExtra(Constants.EXTRA_SCRIPT_PATH,script.getAbsolutePath());  return intent;}  }
class C{  @Override public int read(char ch[],int offset,int length) throws IOException {  int byteLength=length << ((fEncoding >= 4) ? 2 : 1);  if (byteLength > fBuffer.length) {    byteLength=fBuffer.length;  }  int count=fInputStream.read(fBuffer,0,byteLength);  if (count == -1)   return -1;  if (fEncoding >= 4) {    int numToRead=(4 - (count & 3) & 3);    for (int i=0; i < numToRead; i++) {      int charRead=fInputStream.read();      if (charRead == -1) {        for (int j=i; j < numToRead; j++)         fBuffer[count + j]=0;        break;      } else {        fBuffer[count + i]=(byte)charRead;      }    }    count+=numToRead;  } else {    int numToRead=count & 1;    if (numToRead != 0) {      count++;      int charRead=fInputStream.read();      if (charRead == -1) {        fBuffer[count]=0;      } else {        fBuffer[count]=(byte)charRead;      }    }  }  int numChars=count >> ((fEncoding >= 4) ? 2 : 1);  int curPos=0;  for (int i=0; i < numChars; i++) {    int b0=fBuffer[curPos++] & 0xff;    int b1=fBuffer[curPos++] & 0xff;    if (fEncoding >= 4) {      int b2=fBuffer[curPos++] & 0xff;      int b3=fBuffer[curPos++] & 0xff;      if (fEncoding == UCS4BE)       ch[offset + i]=(char)((b0 << 24) + (b1 << 16) + (b2 << 8)+ b3); else       ch[offset + i]=(char)((b3 << 24) + (b2 << 16) + (b1 << 8)+ b0);    } else {      if (fEncoding == UCS2BE)       ch[offset + i]=(char)((b0 << 8) + b1); else       ch[offset + i]=(char)((b1 << 8) + b0);    }  }  return numChars;}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return decode((byte[])pObject);  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be URL decoded");  }}  }
class C{  public ParseException(String s,int errorOffset){  super(s);  this.errorOffset=errorOffset;}  }
class C{  public Lease(VMID id,long duration){  vmid=id;  value=duration;}  }
class C{  public ReplicationServerListenThread(ReplicationServer server){  super("Replication server RS(" + server.getServerId() + ") connection listener on port "+ server.getReplicationPort());  this.server=server;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix05.class,args);}  }
class C{  public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  if (orientation == JTabbedPane.LEFT) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBackground(context,g,y,x,h,w,transform);  } else   if (orientation == JTabbedPane.RIGHT) {    AffineTransform transform=new AffineTransform();    transform.rotate(Math.toRadians(90));    transform.translate(0,-(x + w));    paintBackground(context,g,y,0,h,w,transform);  } else   if (orientation == JTabbedPane.BOTTOM) {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(1,-1);    transform.translate(0,-h);    paintBackground(context,g,0,0,w,h,transform);  } else {    paintBackground(context,g,x,y,w,h,null);  }}  }
class C{  private void unwrapResponse(State state){  if (state.wrapResponse == null)   return;  if (state.outerRequest.isAsyncStarted()) {    if (!state.outerRequest.getAsyncContext().hasOriginalRequestAndResponse()) {      return;    }  }  ServletResponse previous=null;  ServletResponse current=state.outerResponse;  while (current != null) {    if ((current instanceof Response) || (current instanceof ResponseFacade))     break;    if (current == state.wrapResponse) {      ServletResponse next=((ServletResponseWrapper)current).getResponse();      if (previous == null)       state.outerResponse=next; else       ((ServletResponseWrapper)previous).setResponse(next);      break;    }    previous=current;    current=((ServletResponseWrapper)current).getResponse();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  DocumentFragment newdocFragment;  Node newChild1;  Node newChild2;  Node child;  String childName;  Node appendedChild;  Node insertedNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(3);  newdocFragment=doc.createDocumentFragment();  newChild1=doc.createElement("br");  newChild2=doc.createElement("b");  appendedChild=newdocFragment.appendChild(newChild1);  appendedChild=newdocFragment.appendChild(newChild2);  insertedNode=employeeNode.insertBefore(newdocFragment,refChild);  child=childList.item(3);  childName=child.getNodeName();  assertEqualsAutoCase("element","childName3","br",childName);  child=childList.item(4);  childName=child.getNodeName();  assertEqualsAutoCase("element","childName4","b",childName);}  }
class C{  private static void initializeInstalledLAFs(Properties swingProps){  String ilafsString=swingProps.getProperty(installedLAFsKey);  if (ilafsString == null) {    return;  }  Vector<String> lafs=new Vector<String>();  StringTokenizer st=new StringTokenizer(ilafsString,",",false);  while (st.hasMoreTokens()) {    lafs.addElement(st.nextToken());  }  Vector<LookAndFeelInfo> ilafs=new Vector<LookAndFeelInfo>(lafs.size());  for (  String laf : lafs) {    String name=swingProps.getProperty(makeInstalledLAFKey(laf,"name"),laf);    String cls=swingProps.getProperty(makeInstalledLAFKey(laf,"class"));    if (cls != null) {      ilafs.addElement(new LookAndFeelInfo(name,cls));    }  }  LookAndFeelInfo[] installedLAFs=new LookAndFeelInfo[ilafs.size()];  for (int i=0; i < ilafs.size(); i++) {    installedLAFs[i]=ilafs.elementAt(i);  }  getLAFState().installedLAFs=installedLAFs;}  }
class C{  public synchronized boolean ready() throws IOException {  if (!connected) {    throw new IOException("Pipe not connected");  } else   if (closedByReader) {    throw new IOException("Pipe closed");  } else   if (writeSide != null && !writeSide.isAlive() && !closedByWriter && (in < 0)) {    throw new IOException("Write end dead");  }  if (in < 0) {    return false;  } else {    return true;  }}  }
class C{  public void terminate(){  this.terminated=true;  executorService.shutdown();  boolean finished=false;  boolean interrupted=false;  while (!finished) {    try {      LOG.warning("Waiting for RADIUS thread pool's request handler(s) to finish processing.");      finished=executorService.awaitTermination(RadiusServerConstants.THREAD_POOL_SHUTDOWN_WAIT_SECONDS,TimeUnit.SECONDS);    } catch (    final InterruptedException e) {      LOG.warning("InterruptedException caught while waiting for executorService to terminate.");      interrupted=true;    }  }  final Thread t=listenerThread;  if (t != null) {    t.interrupt();    while (listenerThread != null) {      LOG.warning("Waiting for RADIUS Listener to exit.");      try {        Thread.sleep(200);      } catch (      final InterruptedException e) {      }    }  }}  }
class C{  private boolean hasTable(){  return (table != null);}  }
class C{  public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintTabbedPaneTabAreaBorder(context,g,x,y,w,h);}  }
class C{  protected boolean compareCredentials(DirContext context,User info,String credentials) throws NamingException {  if (containerLog.isTraceEnabled())   containerLog.trace("  validating credentials");  if (info == null || credentials == null)   return false;  String password=info.getPassword();  return getCredentialHandler().matches(credentials,password);}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  public java.lang.String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public int dimCheck(Pnt p){  int len=this.coordinates.length;  if (len != p.coordinates.length)   throw new IllegalArgumentException("Dimension mismatch");  return len;}  }
class C{  public void configChanged(ConfigurationActionEvent e){  if (Utils.debug.messageEnabled()) {    Utils.debug.message("Utils.configChanged");  }  setValues();}  }
class C{  protected void addImpl(Component x,Object constraints,int index){  if (x.getParent() == this) {    return;  } else {    super.addImpl(x,constraints,index);  }}  }
class C{  private void checkLogMessagesAreInTheRightLogFiles(Set<String> messages,String[] filesListContainsTheMessages,String[] filesListDoesntContainsTheMessages) throws IOException {  for (  String message : messages) {    for (    String file : filesListContainsTheMessages) {      Assert.assertTrue(checkLogMessageExist(file,message),"message starting with '" + message + "' "+ "should be in the file '"+ file+ "'");    }    for (    String file : filesListDoesntContainsTheMessages) {      Assert.assertFalse(checkLogMessageExist(file,message),"message starting with '" + message + "' "+ "should not be in the file '"+ file+ "'");    }  }}  }
class C{  private void enableComponents(){  for (  JComponent comp : comps) {    comp.setEnabled(true);  }  lInitContents.setVisible(false);  argumentsScroll.setVisible(true);  setEnabledOK(true);}  }
class C{  public boolean isApplicableAddDel(AciTargetMatchContext matchCtx){  TargAttrFilterList attrFilterList=getTargAttrFilterList(matchCtx);  if (attrFilterList == null) {    return true;  }  Map<AttributeType,SearchFilter> filterList=attrFilterList.getAttributeTypeFilterList();  Entry resEntry=matchCtx.getResourceEntry();  for (  Map.Entry<AttributeType,SearchFilter> e : filterList.entrySet()) {    AttributeType attrType=e.getKey();    SearchFilter f=e.getValue();    if (!matchFilterAttributeType(resEntry,attrType,f)) {      return revertForInequalityOperator(op,false);    }  }  return revertForInequalityOperator(op,true);}  }
class C{  private static String modifyFilter(String filter,int objectType){switch (objectType) {case AMObject.ROLE:case AMObject.FILTERED_ROLE:    StringBuilder sb=new StringBuilder();  sb.append("(&").append(filter);sb.append("(objectClass=ldapsubentry)").append("(!(cn=");sb.append(AMConstants.CONTAINER_DEFAULT_TEMPLATE_ROLE);sb.append(")))");return sb.toString();}return filter;}  }
class C{  public boolean isSizeLimitReached(){  return sizeLimitReached;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  String systemId;  int index;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation2");  systemId=notationNode.getSystemId();  assertURIEquals("uriEquals",null,null,null,"notation2File",null,null,null,null,systemId);}  }
class C{  protected GenericObject first(){  myListIterator=this.listIterator(0);  try {    return (GenericObject)myListIterator.next();  } catch (  NoSuchElementException ex) {    return null;  }}  }
class C{  public SearchControls(){  searchScope=ONELEVEL_SCOPE;  timeLimit=0;  countLimit=0;  derefLink=false;  returnObj=false;  attributesToReturn=null;}  }
class C{  private static void putPreferencesInXml(Element elt,Document doc,Preferences prefs,boolean subTree) throws BackingStoreException {  Preferences[] kidsCopy=null;  String[] kidNames=null;synchronized (((AbstractPreferences)prefs).lock) {    if (((AbstractPreferences)prefs).isRemoved()) {      elt.getParentNode().removeChild(elt);      return;    }    String[] keys=prefs.keys();    Element map=(Element)elt.appendChild(doc.createElement("map"));    for (int i=0; i < keys.length; i++) {      Element entry=(Element)map.appendChild(doc.createElement("entry"));      entry.setAttribute("key",keys[i]);      entry.setAttribute("value",prefs.get(keys[i],null));    }    if (subTree) {      kidNames=prefs.childrenNames();      kidsCopy=new Preferences[kidNames.length];      for (int i=0; i < kidNames.length; i++)       kidsCopy[i]=prefs.node(kidNames[i]);    }  }  if (subTree) {    for (int i=0; i < kidNames.length; i++) {      Element xmlKid=(Element)elt.appendChild(doc.createElement("node"));      xmlKid.setAttribute("name",kidNames[i]);      putPreferencesInXml(xmlKid,doc,kidsCopy[i],subTree);    }  }}  }
class C{  public boolean contains(RxAction action){  Pair<Integer,Subscription> old=mMap.get(action.getType());  return (old != null && old.first == action.hashCode() && !old.second.isUnsubscribed());}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignedInfoElement createSignedInfoElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignedInfoElementImpl();}  }
class C{  public void testToEngineeringStringNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E-501";  BigDecimal aNumber=new BigDecimal(a);  String result="-123.80964839238475457356735674573563567890295784902768787678287E-471";  assertEquals("incorrect value",result,aNumber.toEngineeringString());}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (retryAfter != null)   retval.append(retryAfter);  if (comment != null)   retval.append(SP + LPAREN + comment+ RPAREN);  if (!parameters.isEmpty()) {    retval.append(SEMICOLON);    parameters.encode(retval);  }  return retval;}  }
class C{  public PolicyException(String message,Throwable nestedException){  super(message,nestedException);}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public boolean sendSearchReference(SearchResultReference searchReference) throws DirectoryException {  addSearchReference(searchReference);  return true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.AgreementMethodType.KANonce createAgreementMethodTypeKANonce(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.AgreementMethodTypeImpl.KANonceImpl(value);}  }
class C{  @Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(Foo foo){  return fooPersistence.remove(foo);}  }
class C{  public void delete(DeleteRequest request) throws LdapException {  addControls(request);  conn.getConnection().delete(request);}  }
class C{  public static void sendResponseWithStatus(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String requestID,String idpMetaAlias,String hostEntityID,String realm,String firstlevelStatusCodeValue,String secondlevelStatusCodeValue) throws SAML2Exception {  AuthnRequest origRequest=(AuthnRequest)IDPCache.proxySPAuthnReqCache.remove(requestID);  String relayState=(String)IDPCache.relayStateCache.remove(origRequest.getID());  IDPSSOUtil.sendResponseWithStatus(request,response,out,idpMetaAlias,hostEntityID,realm,origRequest,relayState,origRequest.getIssuer().getValue(),firstlevelStatusCodeValue,secondlevelStatusCodeValue);}  }
class C{  @Override public void cacheResult(Foo foo){  entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey(),foo);  finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,new Object[]{foo.getUuid(),foo.getGroupId()},foo);  foo.resetOriginalValues();}  }
class C{  public void testmodInverseException(){  byte aBytes[]={1,2,3,4,5,6,7};  byte mBytes[]={1,2,3};  int aSign=1;  int mSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  try {    aNumber.modInverse(modulus);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public int hashCode(){  return (((int)keyChar) + 1) * (2 * (keyCode + 1)) * (modifiers + 1) + (onKeyRelease ? 1 : 2);}  }
class C{  public void testRemainderKnuthMultiDigitsByOneDigit(){  byte aBytes[]={113,-83,123,-5,18,-34,67,39,-29};  byte bBytes[]={2,-3,-4,-50};  int aSign=1;  int bSign=-1;  byte rBytes[]={2,-37,-60,59};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.xpath.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public boolean remove(Object obj){  return this.hlist.remove(obj);}  }
class C{  private void updateProjectLookup(Project project){  if (project == null) {    throw new IllegalArgumentException("project cannot be null.");  }  Template<Project> template=new Template<>(Project.class,null,project);  if (projectLookup != null && projectLookup.lookupItem(template) == null) {    clearProjectLookup();    content.add(project);    logger.fine(String.format("updateProjectLookup: added [%s] to the proxy lookup.",ProjectUtils.getInformation(lastProject).getDisplayName()));  }}  }
class C{  private Resolvers(){}  }
class C{  public IntArraySpliterator(int[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  public static void deleteAgentGroups(SSOToken ssoToken,String realm,Set agentGroups) throws IdRepoException, SSOException, SMSException {  if ((agentGroups != null) && !agentGroups.isEmpty()) {    for (Iterator i=agentGroups.iterator(); i.hasNext(); ) {      AMIdentity group=(AMIdentity)i.next();      unheritPropertyValues(group);    }    AMIdentityRepository repo=new AMIdentityRepository(ssoToken,realm);    repo.deleteIdentities(agentGroups);  }}  }
class C{  public boolean equals(Object obj){  boolean result=true;  debug.message("ISPermission:: equals(Object) called ");  if (obj == this) {    if (debug.messageEnabled()) {      debug.message("ISPermission::equals::this " + result);    }    return true;  }  if (obj instanceof ISPermission) {    ISPermission perm=(ISPermission)obj;    Subject subject=perm.getSubject();    if (subject != null) {      result=subject.equals(this.subject);    } else {      if (this.subject != null) {        result=false;      }    }    if (debug.messageEnabled()) {      debug.message("ISPermission::subject equals:" + result);    }    if (result) {      CodeSource codesource=perm.getCodeSource();      if (codesource != null) {        result=codesource.equals(this.codesource);        if (debug.messageEnabled()) {          debug.message("ISPermission::codesource equals:" + codesource.equals(this.codesource));        }      } else {        if (this.codesource != null) {          result=false;        }      }    }    if (result) {      ProtectionDomain protectionDomain=perm.getProtectionDomain();      if (protectionDomain != null) {        result=protectionDomain.equals(this.protectionDomain);        if (debug.messageEnabled()) {          debug.message("ISPermission::protectionDomain equals:" + protectionDomain.equals(this.protectionDomain));        }      } else {        if (this.protectionDomain != null) {          result=false;        }      }    }    if (result) {      String serviceName=perm.getServiceName();      if (serviceName != null) {        result=serviceName.equals(this.serviceName);        if (debug.messageEnabled()) {          debug.message("ISPermission::servicename equals:" + serviceName.equals(this.serviceName));        }      } else {        if (this.serviceName != null) {          result=false;        }      }    }    if (result) {      String resourceName=perm.getResourceName();      if (resourceName != null) {        result=resourceName.equals(this.resourceName);        if (debug.messageEnabled()) {          debug.message("ISPermission::resourceName equals:" + resourceName.equals(this.resourceName));        }      } else {        if (this.resourceName != null) {          result=false;        }      }    }    if (result) {      String actions=perm.getActions();      if (actions != null) {        result=actionEquals(actions,this.actions);        if (debug.messageEnabled()) {          debug.message("ISPermission::Actions equals:" + actionEquals(actions,this.actions));        }      } else {        if (this.actions != null) {          result=false;        }      }    }    if (result) {      Map envParams=perm.getEnvParams();      if (envParams != null && !envParams.isEmpty()) {        result=envParams.equals(this.envParams);        if (debug.messageEnabled()) {          debug.message("ISPermission::equals::envMap" + envParams.equals(this.envParams));        }      } else {        if (this.envParams != null && !this.envParams.isEmpty()) {          result=false;        }      }    }  }  if (debug.messageEnabled()) {    debug.message("ISPermission::equals::returning " + result);  }  return result;}  }
class C{  public JTableHeader(TableColumnModel cm){  super();  if (cm == null)   cm=createDefaultColumnModel();  setColumnModel(cm);  initializeLocalVars();  updateUI();}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public boolean visitUnaryOperation(ExpressionOwner owner,UnaryOperation op){  return true;}  }
class C{  public CertificateVerify(byte[] hash){  if (hash == null || hash.length == 0) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR: incorrect certificate verify hash");  }  this.signedHash=hash;  length=hash.length + 2;}  }
class C{  public static int showConfirmDialog(Component parentComponent,Object message,String title,int optionType,int messageType,Icon icon) throws HeadlessException {  return showOptionDialog(parentComponent,message,title,optionType,messageType,icon,null,null);}  }
class C{  public ModifyMsg(CSN csn,DN dn,List<Modification> mods,String entryUUID){  super(new ModifyContext(csn,entryUUID),dn);  this.encodedMods=encodeMods(mods);}  }
class C{  public void decompileFromArchive(String archivePath,String packege,String className){  start=System.currentTimeMillis();  File workingDir=new File(JavaDecompilerPlugin.getDefault().getPreferenceStore().getString(JavaDecompilerPlugin.TEMP_DIR) + "/" + System.currentTimeMillis());  try {    workingDir.mkdirs();    JarClassExtractor.extract(archivePath,packege,className,true,workingDir.getAbsolutePath());    decompile(workingDir.getAbsolutePath(),"",className);  } catch (  Exception e) {    JavaDecompilerPlugin.logError(e,e.getMessage());    return;  } finally {    deltree(workingDir);  }}  }
class C{  public static boolean hasIdRepoSchema(String idRepoType){  if (idRepoType == null) {    return false;  }  String schemaFiles=getSchemaFiles(idRepoType);  return ((schemaFiles != null) && (schemaFiles.trim().length() > 0));}  }
class C{  public Session createClientSession(final Socket socket,final int soTimeout) throws ConfigException, IOException {  boolean hasCompleted=false;  SSLSocket secureSocket=null;  try {    final CryptoManager cryptoManager=DirectoryConfig.getCryptoManager();    final SSLContext sslContext=cryptoManager.getSslContext(REPLICATION_CLIENT_NAME,sslCertNicknames);    final SSLSocketFactory sslSocketFactory=sslContext.getSocketFactory();    secureSocket=(SSLSocket)sslSocketFactory.createSocket(socket,socket.getInetAddress().getHostName(),socket.getPort(),false);    secureSocket.setUseClientMode(true);    secureSocket.setSoTimeout(soTimeout);    if (sslProtocols != null) {      secureSocket.setEnabledProtocols(sslProtocols);    }    if (sslCipherSuites != null) {      secureSocket.setEnabledCipherSuites(sslCipherSuites);    }    secureSocket.startHandshake();    hasCompleted=true;    return new Session(socket,secureSocket);  }  finally {    if (!hasCompleted) {      close(socket);      close(secureSocket);    }  }}  }
class C{  public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end){  return create(file,listener,delayMillis,end,DEFAULT_BUFSIZE);}  }
class C{  public ReconAuditEventBuilder entryType(String entryType){  jsonValue.put(ENTRY_TYPE,entryType);  return self();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicSpinnerUI();}  }
class C{  public HTMLFrameHyperlinkEvent(Object source,EventType type,URL targetURL,Element sourceElement,String targetFrame){  super(source,type,targetURL,null,sourceElement);  this.targetFrame=targetFrame;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.NoPasswordElement createNoPasswordElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.NoPasswordElementImpl();}  }
class C{  public String toXMLString() throws PAOSException {  return toXMLString(true,false);}  }
class C{  public static int readUINT16(InputStream stream) throws IOException {  int result=stream.read();  result|=stream.read() << 8;  return result;}  }
class C{  public PdfPagesTree(PdfCatalog pdfCatalog){  this.document=pdfCatalog.getDocument();  this.pageRefs=new ArrayList<>();  this.parents=new ArrayList<>();  this.pages=new ArrayList<>();  if (pdfCatalog.getPdfObject().containsKey(PdfName.Pages)) {    PdfDictionary pages=pdfCatalog.getPdfObject().getAsDictionary(PdfName.Pages);    if (pages == null)     throw new PdfException(PdfException.InvalidPageStructurePagesPagesMustBePdfDictionary);    this.root=new PdfPages(0,Integer.MAX_VALUE,pages,null);    parents.add(this.root);    for (int i=0; i < this.root.getCount(); i++) {      this.pageRefs.add(null);      this.pages.add(null);    }  } else {    this.root=null;    this.parents.add(new PdfPages(0,this.document));  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.w3.org/2000/xmlns/";  String localName="local1";  Document doc;  NodeList elementList;  Node testAddress;  NodeList nList;  Node child;  NodeList n2List;  Node child2;  NamedNodeMap attributes;  Node removedNode;  int nodeType;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("gender");  testAddress=elementList.item(2);  nList=testAddress.getChildNodes();  child=nList.item(0);  nodeType=(int)child.getNodeType();  if (equals(1,nodeType)) {    child=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",child);  }  n2List=child.getChildNodes();  child2=n2List.item(0);  assertNotNull("notnull",child2);  attributes=child2.getAttributes();{    boolean success=false;    try {      removedNode=attributes.removeNamedItemNS(namespaceURI,localName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  static public void assertTrue(boolean condition){  assertTrue(null,condition);}  }
class C{  public PlaDirection rotate_45_deg(int p_factor){  long new_x;  long new_y;switch (p_factor % 8) {case 0:    return this;case 1:  return new PlaDirection(dir_x - dir_y,dir_x + dir_y,is_NaN);case 2:return new PlaDirection(-dir_y,dir_x,is_NaN);case 3:new_x=-dir_x - dir_y;new_y=dir_x - dir_y;break;case 4:new_x=-dir_x;new_y=-dir_y;break;case 5:new_x=dir_y - dir_x;new_y=-dir_x - dir_y;break;case 6:new_x=dir_y;new_y=-dir_x;break;case 7:new_x=dir_x + dir_y;new_y=dir_y - dir_x;break;default :return new PlaDirection(0,0,true);}return new PlaDirection(new_x,new_y,is_NaN);}  }
class C{  public static void initializeVerifier(AMPassword verPass,Object token){  try {    setVerPassword(verPass,token);    LogManager lmanager=LogManagerUtil.getLogManager();    String logPath=lmanager.getProperty(LogConstants.LOG_LOCATION);    if (!logPath.endsWith("/"))     logPath+="/";    LogManager manager=LogManagerUtil.getLogManager();    Enumeration e=manager.getLoggerNames();    while (e.hasMoreElements()) {      String FileName=(String)e.nextElement();      String verifierFileName=logPath + PREFIX + "ver."+ FileName;      SecureLogHelper helper=getSecureLogHelper(FileName);      AMPassword logPassword=getLogPassword();      if (helper != null) {        helper.initializeVerifier(verifierFileName,logPassword,verPassword);        try {          Debug.message(FileName + ":Trying to start the Verifier Thread");          Logger logger=(com.sun.identity.log.Logger)Logger.getLogger(FileName);          Handler[] handlers=logger.getHandlers();          ((com.sun.identity.log.handlers.SecureFileHandler)handlers[0]).startVerifierThread();          Debug.message(FileName + ":Started Log Verifier thread");        } catch (        Exception ex) {          Debug.error(FileName + ":Unable to start Verifier Thread",ex);        }      }      verificationInitialized=true;    }  } catch (  Exception e) {    Debug.error("Error initializing Verification",e);  }}  }
class C{  public AgentGroupMembersViewBean(){  super("AgentGroupMembers");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public final void calculate_target_doors(AwtreeFindEntry p_own_net_object,int p_net_no,AwtreeShapeSearch p_autoroute_search_tree){  set_net_dependent();  if (!(p_own_net_object.object instanceof BrdItem))   return;  BrdItem an_item=(BrdItem)p_own_net_object.object;  if (!an_item.contains_net(p_net_no))   return;  if (!(an_item instanceof BrdConnectable))   return;  BrdConnectable a_conn=(BrdConnectable)an_item;  ShapeTile curr_connection_shape=a_conn.get_trace_connection_shape(p_autoroute_search_tree,p_own_net_object.shape_index_in_object);  if (curr_connection_shape == null)   return;  if (!get_shape().intersects(curr_connection_shape))   return;  ExpandDoorItem new_target_door=new ExpandDoorItem(an_item,p_own_net_object.shape_index_in_object,this,p_autoroute_search_tree);  add_target_door(new_target_door);}  }
class C{  @Override public ServerResource create(Request request,Response response){  final ServerResource resource=InjectorHolder.getInstance(serverResource);  resource.init(getContext(),request,response);  return resource;}  }
class C{  public PdfCanvas moveText(double x,double y){  contentStream.getOutputStream().writeDouble(x).writeSpace().writeDouble(y).writeSpace().writeBytes(Td);  return this;}  }
class C{  public InvalidPathException(String input,String reason,int index){  super(reason);  if ((input == null) || (reason == null))   throw new NullPointerException();  if (index < -1)   throw new IllegalArgumentException();  this.input=input;  this.index=index;}  }
class C{  public Node removeChild(Node oldChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public AtomicLongArray(int length){  array=new long[length];}  }
class C{  public int size(){  if (size == 0)   return 0;  expungeStaleEntries();  return size;}  }
class C{  boolean compareMethods(Method a,Method b){  if ((a == null) != (b == null)) {    return false;  }  if (a != null && b != null) {    if (!a.equals(b)) {      return false;    }  }  return true;}  }
class C{  public JKNotAllowedOperationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void decompileFromArchive(String archivePath,String packege,String className){  start=System.currentTimeMillis();  File workingDir=new File(JavaDecompilerPlugin.getDefault().getPreferenceStore().getString(JavaDecompilerPlugin.TEMP_DIR) + "/" + System.currentTimeMillis());  try {    workingDir.mkdirs();    JarClassExtractor.extract(archivePath,packege,className,true,workingDir.getAbsolutePath());    decompile(workingDir.getAbsolutePath(),"",className);  } catch (  Exception e) {    JavaDecompilerPlugin.logError(e,e.getMessage());    return;  } finally {    FileUtil.deltree(workingDir);  }}  }
class C{  public ConnectionHandlerConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  connectionHandlers=new ConcurrentHashMap<>();}  }
class C{  protected void exiting(String methodName){  logger.exiting(className,methodName);}  }
class C{  public boolean containsValue(String val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSString.class)) {      NSString str=(NSString)o;      if (str.getContent().equals(val))       return true;    }  }  return false;}  }
class C{  public IllegalPluginAccessException(String msg){  super(msg);}  }
class C{  public PlaDirection(PlaVectorInt p_vector){  this(BigInteger.valueOf(p_vector.v_x),BigInteger.valueOf(p_vector.v_y));}  }
class C{  private static boolean isIdempotent(Method method){  HttpAttribute httpAttr=method.getAttribute(HttpAttribute.KEY);  if (httpAttr == null) {    return false;  }  MethodKind methodKind=httpAttr.getMethodKind();  return methodKind.isIdempotent();}  }
class C{  public static boolean isValidIPv4(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ".";  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf('.',start)) > start) {    if (octets == 4) {      return false;    }    try {      octet=Integer.parseInt(temp.substring(start,pos));    } catch (    NumberFormatException ex) {      return false;    }    if (octet < 0 || octet > 255) {      return false;    }    start=pos + 1;    octets++;  }  return octets == 4;}  }
class C{  public PrintServiceAttributeEvent(PrintService source,PrintServiceAttributeSet attributes){  super(source);  this.attributes=AttributeSetUtilities.unmodifiableView(attributes);}  }
class C{  public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  if (m_tracer != null) {    super.fireStartElem(name);    this.firePseudoAttributes();  }  return;}  }
class C{  public WebServicePermission(String name,String actions){  super(name,actions);}  }
class C{  @NonNull static Map<Class<?>,List<EventHandler>> findAllEventHandlersForSubscriber(@NonNull final Object subscriber){  Map<Class<?>,List<EventHandler>> result=new HashMap<>();  Class<?> currentSubscriberClass=subscriber.getClass();  while (currentSubscriberClass != Object.class) {    Map<Class<?>,EventHandlersCacheItem> cachedEventHandlers=mEventHandlersCache.get(currentSubscriberClass);    if (cachedEventHandlers == null) {synchronized (mEventHandlersCache) {        cachedEventHandlers=mEventHandlersCache.get(currentSubscriberClass);        if (cachedEventHandlers == null) {          cachedEventHandlers=scanForEventHandlers(currentSubscriberClass);          mEventHandlersCache.put(currentSubscriberClass,cachedEventHandlers);        }      }    }    for (    Map.Entry<Class<?>,EventHandlersCacheItem> entry : cachedEventHandlers.entrySet()) {      List<EventHandler> eventHandlersByEventClass=result.get(entry.getKey());      if (eventHandlersByEventClass == null) {        eventHandlersByEventClass=new ArrayList<>(1);        result.put(entry.getKey(),eventHandlersByEventClass);      }      for (EventHandlersCacheItem cacheItem=entry.getValue(); cacheItem != null; cacheItem=cacheItem.nextItem) {        eventHandlersByEventClass.add(new EventHandler(subscriber,cacheItem.eventHandlerMethod,cacheItem.dispatchingMethod));      }    }    currentSubscriberClass=currentSubscriberClass.getSuperclass();  }  return result;}  }
class C{  public static GetPropSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> path,SetRelationDefinition<?,?> r) throws ArgumentException {  return new GetPropSubCommandHandler(parser,path.child(r),r);}  }
class C{  private Attributes(){}  }
class C{  public Object clone(){  PropertyOptions newOptions;  try {    newOptions=new PropertyOptions(getOptions().getOptions());  } catch (  XMPException e) {    newOptions=new PropertyOptions();  }  XMPNode newNode=new XMPNode(name,value,newOptions);  cloneSubtree(newNode);  return newNode;}  }
class C{  public synchronized long fileCount(){  return fileCount;}  }
class C{  public static boolean containsServerFinishedMessage(TlsContext tlsContext){  return (getServerFinishedMessagePosition(tlsContext) != -1);}  }
class C{  public boolean maxCachingTimeReached(){  long cachingtime=currentTimeMillis() / 1000 - latestRefreshTime;  return cachingtime > maxCachingTime * 60;}  }
class C{  public Boolean isMustUnderstand(){  return mustUnderstand;}  }
class C{  public boolean hasNext(){  if (nextItem != null)   return true;  noNext();  return false;}  }
class C{  public void generateWebMapping(String file,JspCompilationContext clctxt) throws IOException {  if (log.isDebugEnabled()) {    log.debug("Generating web mapping for file " + file + " using compilation context "+ clctxt);  }  String className=clctxt.getServletClassName();  String packageName=clctxt.getServletPackageName();  String thisServletName;  if ("".equals(packageName)) {    thisServletName=className;  } else {    thisServletName=packageName + '.' + className;  }  if (servletout != null) {    servletout.write("\n    <servlet>\n        <servlet-name>");    servletout.write(thisServletName);    servletout.write("</servlet-name>\n        <servlet-class>");    servletout.write(thisServletName);    servletout.write("</servlet-class>\n    </servlet>\n");  }  if (mappingout != null) {    mappingout.write("\n    <servlet-mapping>\n        <servlet-name>");    mappingout.write(thisServletName);    mappingout.write("</servlet-name>\n        <url-pattern>");    mappingout.write(file.replace('\\','/'));    mappingout.write("</url-pattern>\n    </servlet-mapping>\n");  }}  }
class C{  private void sleepIfNecessary(long splashDisplayStartTime){  long t2=System.currentTimeMillis();  long sleepTime=MIN_SPLASH_DISPLAY - (t2 - splashDisplayStartTime);  if (sleepTime > 0) {    try {      Thread.sleep(sleepTime);    } catch (    Exception ex) {    }  }}  }
class C{  public MyChangeRecordEntry(DN dn){  super(dn);}  }
class C{  protected void sendMessage(byte[] msg,InetAddress peerAddress,int peerPort,boolean reConnect) throws IOException {  if (logger.isLoggingEnabled(LogLevels.TRACE_INFO) && this.sipStack.isLogStackTraceOnMessageSend()) {    this.logger.logStackTrace(StackLogger.TRACE_INFO);  }  if (peerPort == -1) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      this.logger.logDebug(getClass().getName() + ":sendMessage: Dropping reply!");    }    throw new IOException("Receiver port not set ");  } else {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      this.logger.logDebug("sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n"+ "messageSize =  "+ msg.length+ " message = "+ new String(msg));      this.logger.logDebug("*******************\n");    }  }  DatagramPacket reply=new DatagramPacket(msg,msg.length,peerAddress,peerPort);  try {    DatagramSocket sock;    boolean created=false;    if (sipStack.udpFlag) {      sock=((UDPMessageProcessor)messageProcessor).sock;    } else {      sock=new DatagramSocket();      created=true;    }    sock.send(reply);    if (created)     sock.close();  } catch (  IOException ex) {    throw ex;  }catch (  Exception ex) {    InternalErrorHandler.handleException(ex);  }}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ContentEncodingParser.parse");  ContentEncodingList list=new ContentEncodingList();  try {    headerName(TokenTypes.CONTENT_ENCODING);    while (lexer.lookAhead(0) != '\n') {      ContentEncoding cl=new ContentEncoding();      cl.setHeaderName(SIPHeaderNames.CONTENT_ENCODING);      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      cl.setEncoding(token.getTokenValue());      this.lexer.SPorHT();      list.add(cl);      while (lexer.lookAhead(0) == ',') {        cl=new ContentEncoding();        this.lexer.match(',');        this.lexer.SPorHT();        this.lexer.match(TokenTypes.ID);        this.lexer.SPorHT();        token=lexer.getNextToken();        cl.setEncoding(token.getTokenValue());        this.lexer.SPorHT();        list.add(cl);      }    }    return list;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("ContentEncodingParser.parse");  }}  }
class C{  public static Option file(Path value){  return new FileOption(value);}  }
class C{  public XMLEncoder(OutputStream out,String charset,boolean declaration,int indentation){  if (out == null) {    throw new IllegalArgumentException("the output stream cannot be null");  }  if (indentation < 0) {    throw new IllegalArgumentException("the indentation must be >= 0");  }  Charset cs=Charset.forName(charset);  this.encoder=cs.newEncoder();  this.charset=charset;  this.declaration=declaration;  this.indentation=indentation;  this.out=new OutputStreamWriter(out,cs.newEncoder());  valueToExpression=new IdentityHashMap<>();  targetToStatementList=new IdentityHashMap<>();  nameGenerator=new NameGenerator();}  }
class C{  protected ListSelectionListener createListSelectionListener(){  return null;}  }
class C{  @Override public void put(String name,double value){  emulatedFields.put(name,value);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  ListIterator li=request.getHeaders("Route");  if (li == null || !li.hasNext()) {    return;  }  li.next();  if (!li.hasNext()) {    return;  }  RouteHeader route=(RouteHeader)li.next();  Shootist shootist=new Shootist();  shootist.makeCall("mockserver","testingSystem",route);  try {    System.out.println("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.RINGING,request);    if (setToTagOn180) {      ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);      toHeader.setTag("4321");    }    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    sendInviteOK();    new Timer().schedule(new ByeTimer(this),5000);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public String debugDump(){  return debugDump(0);}  }
class C{  private String local_number() throws ParseException {  StringBuilder s=new StringBuilder();  if (debug)   dbg_enter("local_number");  try {    int lc=0;    while (lexer.hasMoreChars()) {      char la=lexer.lookAhead(0);      if (la == '*' || la == '#' || la == '-' || la == '.' || la == '(' || la == ')' || Lexer.isHexDigit(la)) {        lexer.consume(1);        s.append(la);        lc++;      } else       if (lc > 0)       break; else       throw createParseException("unexepcted " + la);    }    return s.toString();  }  finally {    if (debug)     dbg_leave("local_number");  }}  }
class C{  public synchronized void initialize(){  if (cacheDir == null) {    throw new RuntimeException("No cache directory has been specified.");  }  if (gson == null) {    gson=createGson();  }  Storo.initialize(this);}  }
class C{  public String transformUntToSAML2(String username,String password,SAML2SubjectConfirmation subjectConfirmation,X509Certificate hokProofCert) throws IOException {  UsernameTokenState untState=UsernameTokenState.builder().username(username.getBytes(AMSTSConstants.UTF_8_CHARSET_ID)).password(password.getBytes(AMSTSConstants.UTF_8_CHARSET_ID)).build();  RestSTSTokenTranslationInvocationState invocationState=RestSTSTokenTranslationInvocationState.builder().inputTokenState(untState.toJson()).outputTokenState(buildSAML2TokenCreationState(subjectConfirmation,hokProofCert).toJson()).build();  return invokeTokenTranslation(invocationState.toJson().toString());}  }
class C{  public String toString(){  return ("HTTPBasicPrincipal:  " + name);}  }
class C{  public void test_formatLjava_util_Date(){  try {    DateFormat format=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,Locale.US);    Date current=new Date();    String dtf=format.format(current);    SimpleDateFormat sdf=new SimpleDateFormat("M/d/yy h:mm a",Locale.US);    assertTrue("Incorrect date format",sdf.format(current).equals(dtf));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public final double cumulative_trace_length(){  double result=0;  Iterator<UndoObjectNode> it=undo_items.start_read_object();  for (; ; ) {    UndoObjectStorable curr_item=undo_items.read_next(it);    if (curr_item == null)     break;    if (curr_item instanceof BrdTracep) {      result+=((BrdTracep)curr_item).get_length();    }  }  return result;}  }
class C{  public void testFlipBitNegativeInside3(){  String as="-18446744073709551615";  String res="-18446744073709551611";  int number=2;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.flipBit(number);  assertEquals(res,result.toString());}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void loadArgs(final int arg,final int count){  int index=getArgIndex(arg);  for (int i=0; i < count; ++i) {    Type t=argumentTypes[arg + i];    loadInsn(t,index);    index+=t.getSize();  }}  }
class C{  private static File findNativeLibrary(){  final Properties props=Utils.getDefaultProperties();  String nativeLibraryPath=props.getProperty(Crypto.LIB_PATH_KEY);  String nativeLibraryName=props.getProperty(Crypto.LIB_NAME_KEY);  if (nativeLibraryName == null) {    nativeLibraryName=System.mapLibraryName("commons-crypto");  }  if (nativeLibraryPath != null) {    File nativeLib=new File(nativeLibraryPath,nativeLibraryName);    if (nativeLib.exists()) {      return nativeLib;    }  }  nativeLibraryPath="/org/apache/commons/crypto/native/" + OsInfo.getNativeLibFolderPathForCurrentOS();  boolean hasNativeLib=hasResource(nativeLibraryPath + "/" + nativeLibraryName);  if (!hasNativeLib) {    String altName="libcommons-crypto.jnilib";    if (OsInfo.getOSName().equals("Mac") && hasResource(nativeLibraryPath + "/" + altName)) {      nativeLibraryName=altName;      hasNativeLib=true;    }  }  if (!hasNativeLib) {    String errorMessage=String.format("no native library is found for os.name=%s and os.arch=%s",OsInfo.getOSName(),OsInfo.getArchName());    throw new RuntimeException(errorMessage);  }  String tempFolder=new File(props.getProperty(Crypto.LIB_TEMPDIR_KEY,System.getProperty("java.io.tmpdir"))).getAbsolutePath();  return extractLibraryFile(nativeLibraryPath,nativeLibraryName,tempFolder);}  }
class C{  private static boolean addConstantsToGenerator(StringArgument constants,EntryGenerator generator,final ConsoleApplication app){  for (  final String constant : constants.getValues()) {    final String[] chunks=constant.split("=");    if (chunks.length != 2) {      app.errPrintln(ERR_CONSTANT_ARG_CANNOT_DECODE.get(constant));      return false;    }    generator.setConstant(chunks[0],chunks[1]);  }  return true;}  }
class C{  public Element current(){  if (elementStack == null) {    return first();  }  if (!elementStack.empty()) {    StackItem item=elementStack.peek();    Element elem=item.getElement();    int index=item.getIndex();    if (index == -1) {      return elem;    }    return elem.getElement(index);  }  return null;}  }
class C{  @Override protected Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public static OAuth2BearerWWWAuthenticateHeader valueOf(final Message message){  return valueOf(parseSingleValuedHeader(message,NAME));}  }
class C{  static <T extends Configuration>Pair<ConfigAddListenerAdaptor<T>,ConfigurationAddListener<T>> extractInitialListener(ConfigAddListener configListener){  Pair<ConfigAddListenerAdaptor<T>,ServerManagedObjectAddListener<T>> pair=extractIntermediateListener(configListener);  if (!pair.equals(Pair.EMPTY) && pair.getSecond() instanceof ServerManagedObjectAddListenerAdaptor) {    ServerManagedObjectAddListenerAdaptor<T> adaptor2=(ServerManagedObjectAddListenerAdaptor<T>)pair.getSecond();    return Pair.of(pair.getFirst(),adaptor2.getConfigurationAddListener());  }  return Pair.empty();}  }
class C{  protected byte[] AssembleIndex(int[] NewOffsets,byte[] NewObjects){  char Count=(char)(NewOffsets.length - 1);  int Size=NewOffsets[NewOffsets.length - 1];  byte Offsize;  if (Size <= 0xff) {    Offsize=1;  } else   if (Size <= 0xffff) {    Offsize=2;  } else   if (Size <= 0xffffff) {    Offsize=3;  } else {    Offsize=4;  }  byte[] NewIndex=new byte[2 + 1 + Offsize * (Count + 1) + NewObjects.length];  int Place=0;  NewIndex[Place++]=(byte)(Count >> 8 & 0xff);  NewIndex[Place++]=(byte)(Count & 0xff);  NewIndex[Place++]=Offsize;  for (  int newOffset : NewOffsets) {    int Num=newOffset - NewOffsets[0] + 1;    for (int i=Offsize; i > 0; i--) {      NewIndex[Place++]=(byte)(Num >>> ((i - 1) << 3) & 0xff);    }  }  for (  byte newObject : NewObjects) {    NewIndex[Place++]=newObject;  }  return NewIndex;}  }
class C{  protected String createNodeVersion(String nodeId) throws GroundException {  return this.factories.getNodeVersionFactory().create(new HashMap<>(),null,null,new HashMap<>(),nodeId,new ArrayList<>()).getId();}  }
class C{  public byte[] encodePassword(IdType type,Set<String> passwordValues){  if (type.equals(IdType.USER)) {    if (passwordValues != null && !passwordValues.isEmpty()) {      return encodePassword(passwordValues.iterator().next());    }  }  return null;}  }
class C{  private FileHelper(){}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.ActionElement createActionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.ActionElementImpl();}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  final long fullyRelease(Node node){  boolean failed=true;  try {    long savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  public void testValueOfNegZeroScale(){  long a=-98374823947823578L;  BigDecimal aNumber=BigDecimal.valueOf(a);  String result="-98374823947823578";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterName);}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(ZonedDateTime.class,new ZonedDateTimeSerializer(ISO_FIXED_FORMAT));  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  protected List<String> prepareSortKeyStatements(List<SortKey> sortKeys){  List<String> keys=new ArrayList<String>();  for (int i=0; i < sortKeys.size(); i++) {    SortKey sortKey=sortKeys.get(i);    keys.add(explicitMapping.getDbColumnName(sortKey.getField()) + (sortKey.isAscendingOrder() ? " ASC" : " DESC"));  }  return keys;}  }
class C{  public NSData(byte[] bytes){  this.bytes=bytes;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapsetnameditemreturnvalue.class,args);}  }
class C{  public void remove(@IdRes final int itemId){  if (map.remove(itemId)) {    navigation.invalidateBadge(itemId);  }}  }
class C{  public boolean isHostname(){  return addressType == HOSTNAME;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:case Constants.ELEMNAME_APPLY_TEMPLATES:case Constants.ELEMNAME_APPLY_IMPORTS:case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_FOREACH:case Constants.ELEMNAME_VALUEOF:case Constants.ELEMNAME_COPY_OF:case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_CHOOSE:case Constants.ELEMNAME_IF:case Constants.ELEMNAME_TEXT:case Constants.ELEMNAME_COPY:case Constants.ELEMNAME_VARIABLE:case Constants.ELEMNAME_MESSAGE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public String toString(){  removeUnusedSets();  String s="";  for (  SmallAttributeSet set : attributesPool.keySet()) {    s=s + set + "\n";  }  return s;}  }
class C{  public XMPDateTimeImpl(String strValue) throws XMPException {  ISO8601Converter.parse(strValue,this);}  }
class C{  private static String buildGlobalAciValue(String... aciFields){  return _buildAciValue(ATTR_AUTHZ_GLOBAL_ACI + ": ",aciFields);}  }
class C{  public GenericConstraint(AbstractManagedObjectDefinition<?,?> definition,int id,Condition condition){  this.definition=definition;  this.id=id;  this.condition=condition;}  }
class C{  @DataProvider(name="decodeValueData") Object[][] createDecodeValueData(){  return new Object[][]{{"ONE",TestEnum.ONE}};}  }
class C{  public void test_setEntry() throws Exception {  String type="DSA";  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  keyTest.load(null,pssWord);  Certificate[] chain={new MyCertificate(type,testEncoding),new MyCertificate(type,testEncoding)};  DSAPrivateKey privateKey1=(DSAPrivateKey)KeyFactory.getInstance(type).generatePrivate(new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4")));  KeyStore.PasswordProtection pp=new KeyStore.PasswordProtection(pssWord);  KeyStore.PrivateKeyEntry pke=new KeyStore.PrivateKeyEntry(getPrivateKey(),chain);  KeyStore.PrivateKeyEntry pke1=new KeyStore.PrivateKeyEntry(privateKey1,chain);  try {    keyTest.setEntry("alias",pke,null);    assertFalse(StandardNames.IS_RI);  } catch (  KeyStoreException e) {    assertTrue(StandardNames.IS_RI);  }  keyTest.setEntry("alias",pke,pp);  KeyStore.PrivateKeyEntry pkeActual=(KeyStore.PrivateKeyEntry)keyTest.getEntry("alias",pp);  assertTrue(Arrays.equals(chain,pkeActual.getCertificateChain()));  assertEquals(getPrivateKey(),pkeActual.getPrivateKey());  assertEquals(new MyCertificate(type,testEncoding),pkeActual.getCertificate());  assertTrue(keyTest.entryInstanceOf("alias",KeyStore.PrivateKeyEntry.class));  keyTest.setEntry("alias",pke1,pp);  pkeActual=(KeyStore.PrivateKeyEntry)keyTest.getEntry("alias",pp);  assertTrue(Arrays.equals(chain,pkeActual.getCertificateChain()));  DSAPrivateKey actualPrivateKey=(DSAPrivateKey)pkeActual.getPrivateKey();  assertEquals(privateKey1.getX(),actualPrivateKey.getX());  assertEquals(privateKey1.getParams().getG(),actualPrivateKey.getParams().getG());  assertEquals(privateKey1.getParams().getP(),actualPrivateKey.getParams().getP());  assertEquals(privateKey1.getParams().getQ(),actualPrivateKey.getParams().getQ());  assertEquals(new MyCertificate(type,testEncoding),pkeActual.getCertificate());  assertTrue(keyTest.entryInstanceOf("alias",KeyStore.PrivateKeyEntry.class));  keyTest.setEntry("alias2",pke1,pp);  pkeActual=(KeyStore.PrivateKeyEntry)keyTest.getEntry("alias2",pp);  assertTrue(Arrays.equals(chain,pkeActual.getCertificateChain()));  actualPrivateKey=(DSAPrivateKey)pkeActual.getPrivateKey();  assertEquals(privateKey1.getX(),actualPrivateKey.getX());  assertEquals(privateKey1.getParams().getG(),actualPrivateKey.getParams().getG());  assertEquals(privateKey1.getParams().getP(),actualPrivateKey.getParams().getP());  assertEquals(privateKey1.getParams().getQ(),actualPrivateKey.getParams().getQ());  assertEquals(new MyCertificate(type,testEncoding),pkeActual.getCertificate());  assertTrue(keyTest.entryInstanceOf("alias2",KeyStore.PrivateKeyEntry.class));  try {    keyTest.setEntry(null,null,null);    fail();  } catch (  NullPointerException expected) {  }}  }
class C{  public void paintTabbedPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public AuthenticationStatement(String authMethod,Date authInstant,Subject subject) throws SAMLException {  _authenticationMethod=authMethod;  _authenticationInstant=authInstant;  if (subject == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AuthenticationStatement:missing the subject.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingElement"));  } else   this._subject=subject;}  }
class C{  Vector processQNAMES(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nQNames=tokenizer.countTokens();  Vector qnames=new Vector(nQNames);  for (int i=0; i < nQNames; i++) {    qnames.addElement(new QName(tokenizer.nextToken(),handler));  }  return qnames;}  }
class C{  public MethodTypeValue(List<STypeDef> parameters,STypeDef returnType,STypeDef type){  this.parameters=parameters;  this.returnType=returnType;  this.type=type;}  }
class C{  public void writeIntermediateResponse(final int messageID,final IntermediateResponse response) throws IOException {  logger.trace("ENCODE LDAP INTERMEDIATE RESPONSE(messageID=%d, response=%s)",messageID,response);  writeMessageHeader(messageID);{    writer.writeStartSequence(LDAP.OP_TYPE_INTERMEDIATE_RESPONSE);{      final String responseName=response.getOID();      if (responseName != null) {        writer.writeOctetString(LDAP.TYPE_INTERMEDIATE_RESPONSE_OID,response.getOID());      }      final ByteString responseValue=response.getValue();      if (responseValue != null) {        writer.writeOctetString(LDAP.TYPE_INTERMEDIATE_RESPONSE_VALUE,response.getValue());      }    }    writer.writeEndSequence();  }  writeMessageFooter(response.getControls());}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void testIssue562() throws IOException {  JsonFactory factory=new SmileFactory();  ByteArrayOutputStream bos=new ByteArrayOutputStream();  JsonGenerator gen=factory.createGenerator(bos);  gen.writeStartObject();  gen.writeFieldName("z_aaaabbbbccccddddee");  gen.writeString("end");  gen.writeFieldName("a_aaaabbbbccccddddee");  gen.writeString("start");  gen.writeEndObject();  gen.close();  JsonParser parser=factory.createParser(bos.toByteArray());  assertToken(JsonToken.START_OBJECT,parser.nextToken());  assertToken(JsonToken.FIELD_NAME,parser.nextToken());  assertEquals("z_aaaabbbbccccddddee",parser.getCurrentName());  assertToken(JsonToken.VALUE_STRING,parser.nextToken());  assertEquals("end",parser.getText());  assertToken(JsonToken.FIELD_NAME,parser.nextToken());  assertEquals("a_aaaabbbbccccddddee",parser.getCurrentName());  assertToken(JsonToken.VALUE_STRING,parser.nextToken());  assertEquals("start",parser.getText());  assertToken(JsonToken.END_OBJECT,parser.nextToken());  parser.close();}  }
class C{  public void put(UpdateMsg updateMsg,ServerHandler sourceHandler) throws IOException {  sourceHandler.updateServerState(updateMsg);  sourceHandler.incrementInCount();  setGenerationIdIfUnset(sourceHandler.getGenerationId());  final PreparedAssuredInfo preparedAssuredInfo=getPreparedAssuredInfo(updateMsg,sourceHandler);  if (!publishUpdateMsg(updateMsg)) {    return;  }  final List<Integer> assuredServers=getAssuredServers(updateMsg,preparedAssuredInfo);  final NotAssuredUpdateMsg notAssuredUpdateMsg=preparedAssuredInfo != null ? new NotAssuredUpdateMsg(updateMsg) : null;  if (sourceHandler.isDataServer()) {    for (    ReplicationServerHandler rsHandler : connectedRSs.values()) {      if (!isDifferentGenerationId(rsHandler,updateMsg)) {        addUpdate(rsHandler,updateMsg,notAssuredUpdateMsg,assuredServers);      }    }  }  for (  DataServerHandler dsHandler : connectedDSs.values()) {    if (dsHandler != sourceHandler && !isUpdateMsgFiltered(updateMsg,dsHandler)) {      addUpdate(dsHandler,updateMsg,notAssuredUpdateMsg,assuredServers);    }  }}  }
class C{  public UnbindOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls){  super(clientConnection,operationID,messageID,requestControls);  cancelResult=new CancelResult(ResultCode.CANNOT_CANCEL,ERR_CANNOT_CANCEL_UNBIND.get());}  }
class C{  StringVector processPREFIX_LIST(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nStrings=tokenizer.countTokens();  StringVector strings=new StringVector(nStrings);  for (int i=0; i < nStrings; i++) {    String prefix=tokenizer.nextToken();    String url=handler.getNamespaceForPrefix(prefix);    if (prefix.equals(Constants.ATTRVAL_DEFAULT_PREFIX) || url != null)     strings.addElement(prefix); else     throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANT_RESOLVE_NSPREFIX,new Object[]{prefix}));  }  return strings;}  }
class C{  public AbstractUndoableEdit(){  super();  hasBeenDone=true;  alive=true;}  }
class C{  public String compress(String imageUri,boolean deleteSourceImage){  String compressUri=compressImage(imageUri);  if (deleteSourceImage) {    File source=new File(getRealPathFromURI(imageUri));    if (source.exists()) {      boolean isdeleted=source.delete();      Log.d(LOG_TAG,(isdeleted) ? "SourceImage File deleted" : "SourceImage File not deleted");    }  }  return compressUri;}  }
class C{  public final SIPRequest createErrorAck(To responseToHeader) throws SipException, ParseException {  SIPRequest newRequest=new SIPRequest();  newRequest.setRequestLine((RequestLine)this.requestLine.clone());  newRequest.setMethod(Request.ACK);  newRequest.setHeader((Header)this.callIdHeader.clone());  newRequest.setHeader((Header)this.maxForwardsHeader.clone());  newRequest.setHeader((Header)this.fromHeader.clone());  newRequest.setHeader((Header)responseToHeader.clone());  newRequest.addFirst((Header)this.getTopmostVia().clone());  newRequest.setHeader((Header)cSeqHeader.clone());  newRequest.getCSeq().setMethod(Request.ACK);  if (this.getRouteHeaders() != null) {    newRequest.setHeader((SIPHeaderList)this.getRouteHeaders().clone());  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());}  }
class C{  TraceSettings(Level level,boolean noArgs,boolean noRetVal,int stackDepth,boolean includeCause){  this.level=level;  this.noArgs=noArgs;  this.noRetVal=noRetVal;  this.stackDepth=stackDepth;  this.includeCause=includeCause;}  }
class C{  public void reply(List<String> responseHeaders,boolean out) throws IOException {  assert (!Thread.holdsLock(SpdyStream.this));  int flags=0;synchronized (this) {    if (responseHeaders == null) {      throw new NullPointerException("responseHeaders == null");    }    if (isLocallyInitiated()) {      throw new IllegalStateException("cannot reply to a locally initiated stream");    }    if (this.responseHeaders != null) {      throw new IllegalStateException("reply already sent");    }    this.responseHeaders=responseHeaders;    if (!out) {      this.out.finished=true;      flags|=SpdyConnection.FLAG_FIN;    }  }  connection.writeSynReply(id,flags,responseHeaders);}  }
class C{  public NodeVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=0;}  }
class C{  @Override public void checkServerTrusted(X509Certificate[] chain,String authType){}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Number must be non-null");  }  double doubleValue=number.doubleValue();  JSON.checkDouble(doubleValue);  if (number.equals(NEGATIVE_ZERO)) {    return "-0";  }  long longValue=number.longValue();  if (doubleValue == (double)longValue) {    return Long.toString(longValue);  }  return number.toString();}  }
class C{  public static PatternIP decode(String expr) throws AciException {  IPType ipType=IPType.IPv4;  byte[] prefixBytes;  String addrStr;  if (expr.indexOf(':') != -1) {    ipType=IPType.IPv6;  }  if (expr.indexOf('/') != -1) {    String prefixStr=null;    String[] s=expr.split("[/]",-1);    if (s.length == 2) {      prefixStr=s[1];    }    int prefix=getPrefixValue(ipType,s.length,expr,prefixStr);    prefixBytes=getPrefixBytes(prefix,ipType);    addrStr=s[0];  } else   if (expr.indexOf('+') != -1) {    String netMaskStr=null;    String[] s=expr.split("[+]",-1);    if (s.length == 2) {      netMaskStr=s[1];    }    prefixBytes=getNetmaskBytes(netMaskStr,s.length,expr);    addrStr=s[0];  } else {    int prefix=getPrefixValue(ipType,1,expr,null);    prefixBytes=getPrefixBytes(prefix,ipType);    addrStr=expr;  }  BitSet wildCardBitSet=new BitSet(IN6ADDRSZ);  byte[] addrBytes;  if (ipType == IPType.IPv4) {    addrBytes=procIPv4Addr(addrStr,wildCardBitSet,expr);  } else {    addrBytes=procIPv6Addr(addrStr,expr);    if (addrBytes.length == IN4ADDRSZ) {      ipType=IPType.IPv4;      prefixBytes=getPrefixBytes(IPV4MAXPREFIX,ipType);    }  }  return new PatternIP(ipType,addrBytes,prefixBytes,wildCardBitSet);}  }
class C{  private String generateCRAMMD5Digest(ByteSequence password,ByteSequence challenge) throws ClientException {  if (md5Digest == null) {    try {      md5Digest=MessageDigest.getInstance("MD5");    } catch (    Exception e) {      LocalizableMessage message=ERR_LDAPAUTH_CANNOT_INITIALIZE_MD5_DIGEST.get(getExceptionMessage(e));      throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message,e);    }  }  if (iPad == null) {    iPad=new byte[HMAC_MD5_BLOCK_LENGTH];    oPad=new byte[HMAC_MD5_BLOCK_LENGTH];    Arrays.fill(iPad,CRAMMD5_IPAD_BYTE);    Arrays.fill(oPad,CRAMMD5_OPAD_BYTE);  }  byte[] p=password.toByteArray();  byte[] c=challenge.toByteArray();  if (password.length() > HMAC_MD5_BLOCK_LENGTH) {    p=md5Digest.digest(p);  }  byte[] iPadAndData=new byte[HMAC_MD5_BLOCK_LENGTH + c.length];  System.arraycopy(iPad,0,iPadAndData,0,HMAC_MD5_BLOCK_LENGTH);  System.arraycopy(c,0,iPadAndData,HMAC_MD5_BLOCK_LENGTH,c.length);  byte[] oPadAndHash=new byte[HMAC_MD5_BLOCK_LENGTH + MD5_DIGEST_LENGTH];  System.arraycopy(oPad,0,oPadAndHash,0,HMAC_MD5_BLOCK_LENGTH);  for (int i=0; i < p.length; i++) {    iPadAndData[i]^=p[i];    oPadAndHash[i]^=p[i];  }  System.arraycopy(md5Digest.digest(iPadAndData),0,oPadAndHash,HMAC_MD5_BLOCK_LENGTH,MD5_DIGEST_LENGTH);  byte[] digestBytes=md5Digest.digest(oPadAndHash);  StringBuilder hexDigest=new StringBuilder(2 * digestBytes.length);  for (  byte b : digestBytes) {    hexDigest.append(byteToLowerHex(b));  }  return hexDigest.toString();}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.initializeTestBackend(true);}  }
class C{  public Object encode(Object raw) throws EncoderException {  if (!(raw instanceof byte[])) {    throw new EncoderException("argument not a byte array");  }  return toAsciiChars((byte[])raw);}  }
class C{  public void readMessage(final LDAPMessageHandler handler) throws DecodeException, IOException {  reader.readStartSequence();  try {    final int messageID=(int)reader.readInteger();    readProtocolOp(messageID,handler);  }  finally {    reader.readEndSequence();  }}  }
class C{  public DummyAlertHandler(){  super();}  }
class C{  public void testNegPosSameLength(){  String numA="-283746278342837476784564875684767";  String numB="293478573489347658763745839457637";  String res="-71412358434940908477702819237628";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  private Border createNonRolloverToggleBorder(){  return createNonRolloverBorder();}  }
class C{  public static String appendXMLProperty(String xml,String propertyXML){  int idx=xml.lastIndexOf(PropertyTemplate.SECTION_END_TAG);  if (idx != -1) {    xml=xml.substring(0,idx) + propertyXML + xml.substring(idx);  }  return xml;}  }
class C{  public void test_subListII(){  List sl=tVector.subList(10,25);  assertEquals("Returned sublist of incorrect size",15,sl.size());  for (int i=10; i < 25; i++)   assertTrue("Returned incorrect sublist",sl.contains(tVector.get(i)));  assertEquals("Not synchronized random access","java.util.Collections$SynchronizedRandomAccessList",sl.getClass().getName());  try {    tVector.subList(-10,25);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    tVector.subList(10,tVector.size() + 1);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    tVector.subList(25,10);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public TreeSelectionEvent(Object source,TreePath path,boolean isNew,TreePath oldLeadSelectionPath,TreePath newLeadSelectionPath){  super(source);  paths=new TreePath[1];  paths[0]=path;  areNew=new boolean[1];  areNew[0]=isNew;  this.oldLeadSelectionPath=oldLeadSelectionPath;  this.newLeadSelectionPath=newLeadSelectionPath;}  }
class C{  public void addItem(String key,PdfDate d){  PdfCollectionField field=schema.getField(key);  if (field.subType == PdfCollectionField.DATE) {    getPdfObject().put(new PdfName(key),d.getPdfObject());  }}  }
class C{  public InvalidCredentialsException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void testChooseClientAlias_Combinations() throws Exception {  test_ChooseClientAlias_KeyType("RSA","RSA","RSA",true);  test_ChooseClientAlias_KeyType("RSA","EC","RSA",true);  test_ChooseClientAlias_KeyType("RSA","EC","EC",false);  test_ChooseClientAlias_KeyType("EC","RSA","EC_RSA",true);  test_ChooseClientAlias_KeyType("EC","EC","EC_RSA",false);  test_ChooseClientAlias_KeyType("EC","EC","EC_EC",true);  test_ChooseClientAlias_KeyType("EC","RSA","EC_EC",false);  test_ChooseClientAlias_KeyType("EC","RSA","RSA",false);}  }
class C{  protected FilterWriter(Writer out){  super(out);  this.out=out;}  }
class C{  @Override public void pause(){}  }
class C{  public JToolTip createToolTip(){  JToolTip tip=new JToolTip();  tip.setComponent(this);  return tip;}  }
class C{  protected void startDocumentInternal() throws SAXException {  if (m_needToCallStartDocument) {    super.startDocumentInternal();    m_saxHandler.startDocument();    m_needToCallStartDocument=false;  }}  }
class C{  public Attribute(String name,Object value){  if (name == null) {    throw new RuntimeOperationsException(new IllegalArgumentException("Attribute name cannot be null "));  }  this.name=name;  this.value=value;}  }
class C{  public void execute(String[] args){  int configArg=1;  if (args.length < 2) {    System.out.println(rb.getString("usage"));    System.exit(-1);  }  for (int i=0; i < args.length; i++) {    if ((i < args.length - 1) && ("--file".equals(args[i]) || "--f".equals(args[i]))) {      configArg=i + 1;    } else     if (args[i].equals("--acceptLicense")) {      acceptLicense=true;    }  }  Properties config=new Properties();  FileInputStream fis=null;  try {    fis=new FileInputStream(args[configArg]);    config.load(fis);  } catch (  IOException ex) {    System.out.println(rb.getString("errorConfig"));    System.exit(-1);  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException ex) {        System.out.println(rb.getString("errorConfig"));        System.exit(-1);      }    }  }  String openAmURL=configure(config);  try {    licensePresenter.presentLicenses(acceptLicense);  } catch (  LicenseRejectedException e) {    System.out.println(licensePresenter.getNotice());    System.exit(-1);  }  if (postBodySB.length() > 0) {    postBodySB.append("&");  }  postBodySB.append(ACCEPT_LICENSES_PARAM).append("=").append("true");  StatusChecker sc=new StatusChecker(openAmURL,STATUS_LOCATION);  Thread readProgressThread=new Thread(sc);  readProgressThread.start();  boolean success=postRequestToServer(readProgressThread,openAmURL);  if (success) {    System.exit(0);  } else {    System.exit(-1);  }}  }
class C{  private void sendUnSubscribeMessage(){  currWSstateLock.lock();  currWSstate=WSstate.WS_UNSUBSCRIBED;  currWSstateLock.unlock();  String instrumentString=getInstrumentString(instrumentList);  String msg="{\"a\": \"unsubscribe\", \"v\": [" + instrumentString + "]}";  System.out.println("WebsocketThread.sendUnSubscribeMessage(): WS UnSubscribe msg: " + msg);  clientEndPoint.sendMessage(msg);}  }
class C{  void removeClientConnection(ClientConnection clientConnection){  clientConnections.remove(clientConnection);}  }
class C{  public BERTaggedObject(int tagNo){  super(false,tagNo,new BERSequence());}  }
class C{  public ColorModel coerceData(WritableRaster raster,boolean isAlphaPremultiplied){  if ((supportsAlpha == false) || (this.isAlphaPremultiplied == isAlphaPremultiplied)) {    return this;  }  int w=raster.getWidth();  int h=raster.getHeight();  int aIdx=raster.getNumBands() - 1;  float normAlpha;  int rminX=raster.getMinX();  int rY=raster.getMinY();  int rX;  if (isAlphaPremultiplied) {switch (transferType) {case DataBuffer.TYPE_BYTE:{        byte pixel[]=null;        byte zpixel[]=null;        float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));        for (int y=0; y < h; y++, rY++) {          rX=rminX;          for (int x=0; x < w; x++, rX++) {            pixel=(byte[])raster.getDataElements(rX,rY,pixel);            normAlpha=(pixel[aIdx] & 0xff) * alphaScale;            if (normAlpha != 0.0f) {              for (int c=0; c < aIdx; c++) {                pixel[c]=(byte)((pixel[c] & 0xff) * normAlpha + 0.5f);              }              raster.setDataElements(rX,rY,pixel);            } else {              if (zpixel == null) {                zpixel=new byte[numComponents];                java.util.Arrays.fill(zpixel,(byte)0);              }              raster.setDataElements(rX,rY,zpixel);            }          }        }      }    break;case DataBuffer.TYPE_USHORT:{    short pixel[]=null;    short zpixel[]=null;    float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));    for (int y=0; y < h; y++, rY++) {      rX=rminX;      for (int x=0; x < w; x++, rX++) {        pixel=(short[])raster.getDataElements(rX,rY,pixel);        normAlpha=(pixel[aIdx] & 0xffff) * alphaScale;        if (normAlpha != 0.0f) {          for (int c=0; c < aIdx; c++) {            pixel[c]=(short)((pixel[c] & 0xffff) * normAlpha + 0.5f);          }          raster.setDataElements(rX,rY,pixel);        } else {          if (zpixel == null) {            zpixel=new short[numComponents];            java.util.Arrays.fill(zpixel,(short)0);          }          raster.setDataElements(rX,rY,zpixel);        }      }    }  }break;case DataBuffer.TYPE_INT:{int pixel[]=null;int zpixel[]=null;float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));for (int y=0; y < h; y++, rY++) {  rX=rminX;  for (int x=0; x < w; x++, rX++) {    pixel=(int[])raster.getDataElements(rX,rY,pixel);    normAlpha=pixel[aIdx] * alphaScale;    if (normAlpha != 0.0f) {      for (int c=0; c < aIdx; c++) {        pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);      }      raster.setDataElements(rX,rY,pixel);    } else {      if (zpixel == null) {        zpixel=new int[numComponents];        java.util.Arrays.fill(zpixel,0);      }      raster.setDataElements(rX,rY,zpixel);    }  }}}break;case DataBuffer.TYPE_SHORT:{short pixel[]=null;short zpixel[]=null;float alphaScale=1.0f / 32767.0f;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(short[])raster.getDataElements(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0.0f) {  for (int c=0; c < aIdx; c++) {    pixel[c]=(short)(pixel[c] * normAlpha + 0.5f);  }  raster.setDataElements(rX,rY,pixel);} else {  if (zpixel == null) {    zpixel=new short[numComponents];    java.util.Arrays.fill(zpixel,(short)0);  }  raster.setDataElements(rX,rY,zpixel);}}}}break;case DataBuffer.TYPE_FLOAT:{float pixel[]=null;float zpixel[]=null;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(float[])raster.getDataElements(rX,rY,pixel);normAlpha=pixel[aIdx];if (normAlpha != 0.0f) {for (int c=0; c < aIdx; c++) {pixel[c]*=normAlpha;}raster.setDataElements(rX,rY,pixel);} else {if (zpixel == null) {zpixel=new float[numComponents];java.util.Arrays.fill(zpixel,0.0f);}raster.setDataElements(rX,rY,zpixel);}}}}break;case DataBuffer.TYPE_DOUBLE:{double pixel[]=null;double zpixel[]=null;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(double[])raster.getDataElements(rX,rY,pixel);double dnormAlpha=pixel[aIdx];if (dnormAlpha != 0.0) {for (int c=0; c < aIdx; c++) {pixel[c]*=dnormAlpha;}raster.setDataElements(rX,rY,pixel);} else {if (zpixel == null) {zpixel=new double[numComponents];java.util.Arrays.fill(zpixel,0.0);}raster.setDataElements(rX,rY,zpixel);}}}}break;default :throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);}} else {switch (transferType) {case DataBuffer.TYPE_BYTE:{byte pixel[]=null;float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(byte[])raster.getDataElements(rX,rY,pixel);normAlpha=(pixel[aIdx] & 0xff) * alphaScale;if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(byte)((pixel[c] & 0xff) * invAlpha + 0.5f);}raster.setDataElements(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_USHORT:{short pixel[]=null;float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(short[])raster.getDataElements(rX,rY,pixel);normAlpha=(pixel[aIdx] & 0xffff) * alphaScale;if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(short)((pixel[c] & 0xffff) * invAlpha + 0.5f);}raster.setDataElements(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_INT:{int pixel[]=null;float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(int[])raster.getDataElements(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(int)(pixel[c] * invAlpha + 0.5f);}raster.setDataElements(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_SHORT:{short pixel[]=null;float alphaScale=1.0f / 32767.0f;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(short[])raster.getDataElements(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(short)(pixel[c] * invAlpha + 0.5f);}raster.setDataElements(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_FLOAT:{float pixel[]=null;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(float[])raster.getDataElements(rX,rY,pixel);normAlpha=pixel[aIdx];if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]*=invAlpha;}raster.setDataElements(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_DOUBLE:{double pixel[]=null;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(double[])raster.getDataElements(rX,rY,pixel);double dnormAlpha=pixel[aIdx];if (dnormAlpha != 0.0) {double invAlpha=1.0 / dnormAlpha;for (int c=0; c < aIdx; c++) {pixel[c]*=invAlpha;}raster.setDataElements(rX,rY,pixel);}}}}break;default :throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);}}if (!signed) {return new ComponentColorModel(colorSpace,nBits,supportsAlpha,isAlphaPremultiplied,transparency,transferType);} else {return new ComponentColorModel(colorSpace,supportsAlpha,isAlphaPremultiplied,transparency,transferType);}}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  return new SinglePixelPackedSampleModel(transferType,w,h,maskArray);}  }
class C{  public final EntryInformation readEntry(Map<DN,EntryContainer> suffixesMap) throws IOException, LDIFException {  final boolean checkSchema=importConfig.validateSchema();  while (true) {    LinkedList<StringBuilder> lines;    DN entryDN;    EntryID entryID;    final EntryContainer entryContainer;synchronized (this) {      lines=readEntryLines();      if (lines == null) {        return null;      }      lastEntryBodyLines=lines;      lastEntryHeaderLines=new LinkedList<>();      try {        entryDN=readDN(lines);      } catch (      LDIFException e) {        logger.traceException(e);        continue;      }      if (entryDN == null) {        continue;      }      entriesRead.incrementAndGet();      final Pair<Boolean,LocalizableMessage> includeResult=importConfig.includeEntry(entryDN);      if (!includeResult.getFirst()) {        logToSkipWriter(lines,includeResult.getSecond());        continue;      }      entryContainer=getEntryContainer(entryDN,suffixesMap);      if (entryContainer == null) {        logger.trace("Skipping entry %s because the DN is not one that " + "should be included based on a suffix match check.",entryDN);        logToSkipWriter(lines,ERR_LDIF_SKIP.get(entryDN));        continue;      }      entryID=rootContainer.getNextEntryID();      if (!addPending(entryDN)) {        logger.trace("Skipping entry %s because the DN already exists.",entryDN);        logToSkipWriter(lines,ERR_IMPORT_DUPLICATE_ENTRY.get(entryDN));        continue;      }    }    final Entry entry=createEntry(lines,entryDN,checkSchema);    if (entry == null || !isIncludedInImport(entry,lines) || !invokeImportPlugins(entry,lines) || (checkSchema && !isValidAgainstSchema(entry,lines))) {      removePending(entryDN);      continue;    }    return new EntryInformation(entry,entryID,entryContainer);  }}  }
class C{  public final void testHashCode(){  CertPath cp1=new MyCertPath(testEncoding);  CertPath cp2=new MyCertPath(testEncoding);  CertPath cp3=new MyCertPath(testEncoding1);  assertTrue(cp1.hashCode() == cp2.hashCode());  assertTrue(cp1.hashCode() != cp3.hashCode());}  }
class C{  public Environment createEnvironment(){  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ENVIRONMENT);  if (obj == null) {    return new EnvironmentImpl();  } else {    return (Environment)obj;  }}  }
class C{  public final String convert(String str,boolean query){  if (str == null) {    return null;  }  if ((!query || str.indexOf('+') < 0) && str.indexOf('%') < 0) {    return str;  }  final boolean noSlash=!(ALLOW_ENCODED_SLASH || query);  StringBuilder dec=new StringBuilder();  int strPos=0;  int strLen=str.length();  dec.ensureCapacity(str.length());  while (strPos < strLen) {    int laPos;    for (laPos=strPos; laPos < strLen; laPos++) {      char laChar=str.charAt(laPos);      if ((laChar == '+' && query) || (laChar == '%')) {        break;      }    }    if (laPos > strPos) {      dec.append(str.substring(strPos,laPos));      strPos=laPos;    }    if (strPos >= strLen) {      break;    }    char metaChar=str.charAt(strPos);    if (metaChar == '+') {      dec.append(' ');      strPos++;      continue;    } else     if (metaChar == '%') {      char res=(char)Integer.parseInt(str.substring(strPos + 1,strPos + 3),16);      if (noSlash && (res == '/')) {        throw new IllegalArgumentException("noSlash");      }      dec.append(res);      strPos+=3;    }  }  return dec.toString();}  }
class C{  private ResultPoint[] centerEdges(ResultPoint y,ResultPoint z,ResultPoint x,ResultPoint t){  float yi=y.getX();  float yj=y.getY();  float zi=z.getX();  float zj=z.getY();  float xi=x.getX();  float xj=x.getY();  float ti=t.getX();  float tj=t.getY();  if (yi < width / 2.0f) {    return new ResultPoint[]{new ResultPoint(ti - CORR,tj + CORR),new ResultPoint(zi + CORR,zj + CORR),new ResultPoint(xi - CORR,xj - CORR),new ResultPoint(yi + CORR,yj - CORR)};  } else {    return new ResultPoint[]{new ResultPoint(ti + CORR,tj + CORR),new ResultPoint(zi + CORR,zj - CORR),new ResultPoint(xi - CORR,xj + CORR),new ResultPoint(yi - CORR,yj - CORR)};  }}  }
class C{  public void convert(CharChunk cc,ByteChunk bc) throws IOException {  if ((bb == null) || (bb.array() != bc.getBuffer())) {    bb=ByteBuffer.wrap(bc.getBuffer(),bc.getEnd(),bc.getBuffer().length - bc.getEnd());  } else {    bb.limit(bc.getBuffer().length);    bb.position(bc.getEnd());  }  if ((cb == null) || (cb.array() != cc.getBuffer())) {    cb=CharBuffer.wrap(cc.getBuffer(),cc.getStart(),cc.getLength());  } else {    cb.limit(cc.getEnd());    cb.position(cc.getStart());  }  CoderResult result=null;  if (leftovers.position() > 0) {    int pos=bb.position();    do {      leftovers.put((char)cc.substract());      leftovers.flip();      result=encoder.encode(leftovers,bb,false);      leftovers.position(leftovers.limit());      leftovers.limit(leftovers.array().length);    } while (result.isUnderflow() && (bb.position() == pos));    if (result.isError() || result.isMalformed()) {      result.throwException();    }    cb.position(cc.getStart());    leftovers.position(0);  }  result=encoder.encode(cb,bb,false);  if (result.isError() || result.isMalformed()) {    result.throwException();  } else   if (result.isOverflow()) {    bc.setEnd(bb.position());    cc.setOffset(cb.position());  } else   if (result.isUnderflow()) {    bc.setEnd(bb.position());    cc.setOffset(cb.position());    if (cc.getLength() > 0) {      leftovers.limit(leftovers.array().length);      leftovers.position(cc.getLength());      cc.substract(leftovers.array(),0,cc.getLength());    }  }}  }
class C{  private static boolean statusDropsConnection(int status){  return status == 400 || status == 408 || status == 411 || status == 413 || status == 414 || status == 500 || status == 503 || status == 501;}  }
class C{  public NotBoundException(String s){  super(s);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map<String,Set<String>> attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  attributeValues=processFileAttributes(attributeValues);  try {    String[] params={realm,serviceName};    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    Set assignedServices=ocm.getAssignedServices(true);    AMIdentityRepository repo=new AMIdentityRepository(adminSSOToken,realm);    AMIdentity ai=repo.getRealmIdentity();    Set servicesFromIdRepo=ai.getAssignedServices();    boolean modified=false;    if (assignedServices.contains(serviceName)) {      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MODIFY_SERVICE_REALM",params);      ocm.modifyService(serviceName,attributeValues);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_MODIFY_SERVICE_REALM",params);      modified=true;    }    if (servicesFromIdRepo.contains(serviceName)) {      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MODIFY_SERVICE_REALM",params);      ai.modifyService(serviceName,attributeValues);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_MODIFY_SERVICE_REALM",params);      modified=true;    }    if (modified) {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("modify-service-of-realm-succeed"),(Object[])params));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("modify-service-of-realm-not-assigned"),(Object[])params));    }  } catch (  IdRepoException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmModifyService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_SERVICE_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmModifyService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_SERVICE_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmModifyService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_SERVICE_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node clonedNode;  NodeList clonedList;  Node clonedChild;  String clonedChildName;  int length;  java.util.List result=new java.util.ArrayList();  java.util.List expectedWhitespace=new java.util.ArrayList();  expectedWhitespace.add("#text");  expectedWhitespace.add("employeeId");  expectedWhitespace.add("#text");  expectedWhitespace.add("name");  expectedWhitespace.add("#text");  expectedWhitespace.add("position");  expectedWhitespace.add("#text");  expectedWhitespace.add("salary");  expectedWhitespace.add("#text");  expectedWhitespace.add("gender");  expectedWhitespace.add("#text");  expectedWhitespace.add("address");  expectedWhitespace.add("#text");  java.util.List expectedNoWhitespace=new java.util.ArrayList();  expectedNoWhitespace.add("employeeId");  expectedNoWhitespace.add("name");  expectedNoWhitespace.add("position");  expectedNoWhitespace.add("salary");  expectedNoWhitespace.add("gender");  expectedNoWhitespace.add("address");  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  clonedNode=employeeNode.cloneNode(true);  clonedList=clonedNode.getChildNodes();  for (int indexN100AE=0; indexN100AE < clonedList.getLength(); indexN100AE++) {    clonedChild=(Node)clonedList.item(indexN100AE);    clonedChildName=clonedChild.getNodeName();    result.add(clonedChildName);  }  if (equals(6,length)) {    assertEquals("nowhitespace",expectedNoWhitespace,result);  } else {    assertEquals("whitespace",expectedWhitespace,result);  }}  }
class C{  public static final void partialUpdateAllWidgets(Context context){  updateAllWidgets(context,false);}  }
class C{  public void deleteRows(final int[] rows){  for (int i=rows.length - 1; i >= 0; i--) {    deleteRow(rows[i]);  }}  }
class C{  @Override public boolean isInGroup(Group group){synchronized (groups) {    return (groups.contains(group));  }}  }
class C{  public NotFoundException(final String message){  super(404,"not_found",message);}  }
class C{  public static ResultCode valueOf(int code){  ResultCode resultCode=codeMap.get(code);  if (resultCode == null) {    return UNKNOW;  }  return resultCode;}  }
class C{  private static synchronized boolean isUpdatePending(){  return updatePending;}  }
class C{  public void insert_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_any",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public SAML2ResponseData(String sessionIndex,Subject subject,Assertion assertion,ResponseInfo responseInfo){  Reject.ifNull(sessionIndex,subject,assertion,responseInfo);  this.subject=subject;  this.assertion=assertion;  this.sessionIndex=sessionIndex;  this.responseInfo=responseInfo;}  }
class C{  @Override public StringBuffer format(Date date,StringBuffer toAppendTo,FieldPosition pos){  pos.beginIndex=pos.endIndex=0;  return format(date,toAppendTo,pos.getFieldDelegate());}  }
class C{  public void testSetScaleGreater(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=18;  int newScale=28;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertEquals("incorrect value",0,bNumber.compareTo(aNumber));}  }
class C{  public static void unregister(ActivationID id) throws UnknownObjectException, ActivationException, RemoteException {  ActivationGroup.getSystem().unregisterObject(id);}  }
class C{  public void mail() throws IOException {  checkAWTPermission();  checkExec();  checkActionSupport(Action.MAIL);  URI mailtoURI=null;  try {    mailtoURI=new URI("mailto:?");    peer.mail(mailtoURI);  } catch (  URISyntaxException e) {  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  DocumentType doc1Type;  NamedNodeMap entityList;  Entity entity2;  Entity entity1;  Document ownerDocument;  DocumentType docType;  String system;  String entityName;  String publicVal;  String notationName;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  docType=aNewDoc.getDoctype();  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  entity2=(Entity)entityList.getNamedItem("ent6");  entity1=(Entity)doc.importNode(entity2,false);  ownerDocument=entity1.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  entityName=entity1.getNodeName();  assertEquals("entityName","ent6",entityName);  publicVal=entity1.getPublicId();  assertEquals("entityPublicId","uri",publicVal);  system=entity1.getSystemId();  assertURIEquals("entitySystemId",null,null,null,"file",null,null,null,null,system);  notationName=entity1.getNotationName();  assertEquals("notationName","notation2",notationName);}  }
class C{  public void addDirtyRegion(JComponent c,int x,int y,int w,int h){  RepaintManager delegate=getDelegate(c);  if (delegate != null) {    delegate.addDirtyRegion(c,x,y,w,h);    return;  }  addDirtyRegion0(c,x,y,w,h);}  }
class C{  public void delete(SSOToken token,String objName) throws SMSException, SSOException {  if ((objName == null) || (objName.length() == 0)) {    throw new IllegalArgumentException("SMSEnhancedFlatFileObject.delete: object name is null or empty.");  }  mRWLock.writeRequest();  try {    SMSFlatFileTreeNode node=root.getChild(objName);    if (node != null) {      node.getParentNode().removeChild(node,mRootDir);      saveDirectoryTree();    }  }  finally {    mRWLock.writeDone();  }}  }
class C{  public E push(E item){  add(item);  return item;}  }
class C{  public void stopJump(){  jump=false;}  }
class C{  public final String exceptionExpand(String message,Exception exc){  StringBuffer aBuffer=new StringBuffer(1000);  if (message != null) {    aBuffer.append("User Message=");    aBuffer.append(message);    aBuffer.append("\n");  }  if (exc == null) {    aBuffer.append("Exception=(null)\n");  } else {    aBuffer.append("Exception Class=" + exc.getClass());    aBuffer.append("\n");    aBuffer.append("--> toString=");    aBuffer.append(exc.toString());    aBuffer.append("\n");    aBuffer.append("--> Stack=");    fillStackTrace(aBuffer,exc.getStackTrace());    aBuffer.append("\n");  }  return aBuffer.toString();}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof Attribute)) {    Attribute target=(Attribute)obj;    if (isOrdered() != target.isOrdered()) {      return false;    }    int len;    if (attrID.equals(target.getID()) && (len=size()) == target.size()) {      try {        if (isOrdered()) {          for (int i=0; i < len; i++) {            if (!valueEquals(get(i),target.get(i))) {              return false;            }          }        } else {          Enumeration<?> theirs=target.getAll();          while (theirs.hasMoreElements()) {            if (find(theirs.nextElement()) < 0)             return false;          }        }      } catch (      NamingException e) {        return false;      }      return true;    }  }  return false;}  }
class C{  public boolean isSharped(){  byte note=getToneByte();  return Tone.getById(note).isSharped(note);}  }
class C{  protected boolean findNextValidParent(){  if (parent == root) {    parent=null;    return false;  }  while (parent != null) {    FHTreeStateNode newParent=(FHTreeStateNode)parent.getParent();    if (newParent != null) {      nextIndex=parent.childIndex;      parent=newParent;      childCount=treeModel.getChildCount(parent.getUserObject());      if (updateNextIndex())       return true;    } else     parent=null;  }  return false;}  }
class C{  @Override public int countByField2(boolean field2){  FinderPath finderPath=FINDER_PATH_COUNT_BY_FIELD2;  Object[] finderArgs=new Object[]{field2};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(2);    query.append(_SQL_COUNT_FOO_WHERE);    query.append(_FINDER_COLUMN_FIELD2_FIELD2_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      qPos.add(field2);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  @Override protected void doPut(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  if (isLocked(req)) {    resp.sendError(WebdavStatus.SC_LOCKED);    return;  }  super.doPut(req,resp);  String path=getRelativePath(req);  lockNullResources.remove(path);}  }
class C{  public Segment(char[] array,int offset,int count){  this.array=array;  this.offset=offset;  this.count=count;  partialReturn=false;}  }
class C{  public static <E>List<List<E>> split(Collection<E> input,int size){  List<List<E>> master=new ArrayList<>();  if (input != null && input.size() > 0) {    List<E> col=new ArrayList<>(input);    boolean done=false;    int startIndex=0;    int endIndex=col.size() > size ? size : col.size();    while (!done) {      master.add(col.subList(startIndex,endIndex));      if (endIndex == col.size()) {        done=true;      } else {        startIndex=endIndex;        endIndex=col.size() > (endIndex + size) ? (endIndex + size) : col.size();      }    }  }  return master;}  }
class C{  public AsynchronousCloseException(){}  }
class C{  public boolean isGeneral(){  return (type & GENERAL) != 0;}  }
class C{  public PerlinNoiseGenerator(Random rand){  offsetX=rand.nextDouble() * 256;  offsetY=rand.nextDouble() * 256;  offsetZ=rand.nextDouble() * 256;  for (int i=0; i < 256; i++) {    perm[i]=rand.nextInt(256);  }  for (int i=0; i < 256; i++) {    int pos=rand.nextInt(256 - i) + i;    int old=perm[i];    perm[i]=perm[pos];    perm[pos]=old;    perm[i + 256]=perm[i];  }}  }
class C{  public final int readUnsignedByte() throws IOException {  int ch=in.read();  if (ch < 0)   throw new EOFException();  return ch;}  }
class C{  private int convertLocationToModel(int x,int y){  int row=convertLocationToRow(x,y,true);  int column=convertLocationToColumn(x,y);  if (row >= 0 && column >= 0) {    return getModelIndex(column,row);  }  return -1;}  }
class C{  public static Boolean StringToBoolean(String str) throws SAML2Exception {  if (str == null) {    return null;  }  if (str.equals("true") || str.equals("1")) {    return Boolean.TRUE;  }  if (str.equals("false") || str.equals("0")) {    return Boolean.FALSE;  }  throw new SAML2Exception(SAML2SDKUtils.bundle.getString("invalidXMLBooleanValue"));}  }
class C{  public final void testSetMaxPathLength() throws Exception {  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  keyTest.load(null,null);  ByteArrayInputStream certArray=new ByteArrayInputStream(certificate.getBytes());  ByteArrayInputStream certArray2=new ByteArrayInputStream(certificate2.getBytes());  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert[]=new X509Certificate[2];  cert[0]=(X509Certificate)cf.generateCertificate(certArray);  cert[1]=(X509Certificate)cf.generateCertificate(certArray2);  keyTest.setCertificateEntry("alias1",cert[0]);  keyTest.setCertificateEntry("alias2",cert[0]);  keyTest.setCertificateEntry("alias3",cert[1]);  PKIXBuilderParameters p=new PKIXBuilderParameters(keyTest,new X509CertSelector());  assertEquals(5,p.getMaxPathLength());  p.setMaxPathLength(10);  assertEquals(10,p.getMaxPathLength());  p.setMaxPathLength(0);  assertEquals(0,p.getMaxPathLength());  p.setMaxPathLength(-1);  assertEquals(-1,p.getMaxPathLength());  int[] maxPathLength={-2,-10,Integer.MIN_VALUE};  for (int i=0; i < maxPathLength.length; i++) {    try {      p.setMaxPathLength(maxPathLength[i]);      fail("InvalidParameterException expected ");    } catch (    InvalidParameterException e) {    }  }}  }
class C{  private static void executeSearchOnSubordinates(SearchOperation searchOp,LocalBackendWorkflowElement workflow) throws CanceledOperationException {  SearchScope originalScope=searchOp.getScope();  if (originalScope == SearchScope.BASE_OBJECT) {    return;  }  SearchScope newScope=elaborateScopeForSearchInSubordinates(originalScope);  searchOp.setScope(newScope);  SearchResultCode searchResultCode=new SearchResultCode(searchOp.getResultCode(),searchOp.getErrorMessage());  DN originalBaseDN=searchOp.getBaseDN();  for (  LocalBackendWorkflowElement subordinate : getSubordinates(workflow)) {    DN subordinateDN=subordinate.getBaseDN();    if (newScope == SearchScope.BASE_OBJECT && !subordinateDN.parent().equals(originalBaseDN)) {      continue;    }    if (!originalBaseDN.isSuperiorOrEqualTo(subordinateDN)) {      continue;    }    searchOp.setBaseDN(subordinateDN);    execute(searchOp,subordinateDN);    boolean sendReferenceEntry=searchResultCode.elaborateGlobalResultCode(searchOp.getResultCode(),searchOp.getErrorMessage());    if (sendReferenceEntry) {    }  }  searchOp.setBaseDN(originalBaseDN);  searchOp.setScope(originalScope);  searchOp.setResultCode(searchResultCode.resultCode);  searchOp.setErrorMessage(searchResultCode.errorMessage);}  }
class C{  public boolean addOperation(Operation operation){  if (isRunning) {    if (operationHandlerThreadHandler == null)     return false;    return operationHandlerThreadHandler.post(new AndroidOperation(this,operation));  } else {    return operationQueue.add(new AndroidOperation(this,operation));  }}  }
class C{  public void dragExit(DragSourceEvent dse){  ((DragSourceListener)a).dragExit(dse);  ((DragSourceListener)b).dragExit(dse);}  }
class C{  protected boolean StepPattern(boolean isLeadingSlashPermitted) throws javax.xml.transform.TransformerException {  return AbbreviatedNodeTestStep(isLeadingSlashPermitted);}  }
class C{  public void test_getClientSessionContext() throws NoSuchAlgorithmException, KeyManagementException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  SSLContext[] sslC=createSSLCon();  assertNotNull("SSLContext objects were not created",sslC);  for (int i=0; i < sslC.length; i++) {    sslC[i].init(null,null,null);    assertNotNull("Client session is incorrectly instantiated: " + i,sslC[i].getClientSessionContext());    assertNotNull("Server session is incorrectly instantiated: " + i,sslC[i].getServerSessionContext());  }}  }
class C{  public Yytoken yylex() throws java.io.IOException, ParseException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{        sb.append(yytext());      }case 25:    break;case 4:{    sb.delete(0,sb.length());    yybegin(STRING_BEGIN);  }case 26:break;case 16:{sb.append('\b');}case 27:break;case 6:{return new Yytoken(Yytoken.TYPE_RIGHT_BRACE,null);}case 28:break;case 23:{Boolean val=Boolean.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 29:break;case 22:{return new Yytoken(Yytoken.TYPE_VALUE,null);}case 30:break;case 13:{yybegin(YYINITIAL);return new Yytoken(Yytoken.TYPE_VALUE,sb.toString());}case 31:break;case 12:{sb.append('\\');}case 32:break;case 21:{Double val=Double.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 33:break;case 1:{throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_CHAR,new Character(yycharat(0)));}case 34:break;case 8:{return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE,null);}case 35:break;case 19:{sb.append('\r');}case 36:break;case 15:{sb.append('/');}case 37:break;case 10:{return new Yytoken(Yytoken.TYPE_COLON,null);}case 38:break;case 14:{sb.append('"');}case 39:break;case 5:{return new Yytoken(Yytoken.TYPE_LEFT_BRACE,null);}case 40:break;case 17:{sb.append('\f');}case 41:break;case 24:{try {int ch=Integer.parseInt(yytext().substring(2),16);sb.append((char)ch);} catch (Exception e) {throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_EXCEPTION,e);}}case 42:break;case 20:{sb.append('\t');}case 43:break;case 7:{return new Yytoken(Yytoken.TYPE_LEFT_SQUARE,null);}case 44:break;case 2:{Long val=Long.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 45:break;case 18:{sb.append('\n');}case 46:break;case 9:{return new Yytoken(Yytoken.TYPE_COMMA,null);}case 47:break;case 3:{}case 48:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void add(String method,Object... args){  Object[] argsCopy=new Object[args.length];  System.arraycopy(args,0,argsCopy,0,args.length);  methods.add(method);  argLists.add(argsCopy);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"ORDERS\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"DATE\" INTEGER,"+ "\"CUSTOMER_ID\" INTEGER NOT NULL );");}  }
class C{  private float handleText(TextPaint wp,int start,int end,int contextStart,int contextEnd,boolean runIsRtl,Canvas c,float x,int top,int y,int bottom,FontMetricsInt fmi,boolean needWidth){  if (fmi != null) {    expandMetricsFromPaint(fmi,wp);  }  int runLen=end - start;  if (runLen == 0) {    return 0f;  }  float ret=0;  int contextLen=contextEnd - contextStart;  if (needWidth || (c != null && (wp.bgColor != 0 || wp.underlineColor != 0 || runIsRtl))) {    if (mCharsValid) {      ret=TextPaintCompat.getTextRunAdvances(wp,mChars,start,runLen,contextStart,contextLen,runIsRtl,null,0);    } else {      int delta=mStart;      ret=TextPaintCompat.getTextRunAdvances(wp,mText,delta + start,delta + end,delta + contextStart,delta + contextEnd,runIsRtl,null,0);    }  }  if (c != null) {    if (runIsRtl) {      x-=ret;    }    if (wp.bgColor != 0) {      int previousColor=wp.getColor();      Paint.Style previousStyle=wp.getStyle();      wp.setColor(wp.bgColor);      wp.setStyle(Paint.Style.FILL);      c.drawRect(x,top,x + ret,bottom,wp);      wp.setStyle(previousStyle);      wp.setColor(previousColor);    }    if (TextPaintCompat.getUnderlineColor(wp) != 0) {      float underlineTop=y + wp.baselineShift + (1.0f / 9.0f) * wp.getTextSize();      int previousColor=wp.getColor();      Paint.Style previousStyle=wp.getStyle();      boolean previousAntiAlias=wp.isAntiAlias();      wp.setStyle(Paint.Style.FILL);      wp.setAntiAlias(true);      wp.setColor(TextPaintCompat.getUnderlineColor(wp));      c.drawRect(x,underlineTop,x + ret,underlineTop + TextPaintCompat.getUnderlineThickness(wp),wp);      wp.setStyle(previousStyle);      wp.setColor(previousColor);      wp.setAntiAlias(previousAntiAlias);    }    drawTextRun(c,wp,start,end,contextStart,contextEnd,runIsRtl,x,y + wp.baselineShift);  }  return runIsRtl ? -ret : ret;}  }
class C{  protected void maximizeFrame(JInternalFrame f){  BasicLookAndFeel.playSound(frame,"InternalFrame.maximizeSound");  getDesktopManager().maximizeFrame(f);}  }
class C{  public static String shuffle(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  String[] chars=chars(value);  Random random=new Random();  for (int i=0; i < chars.length; i++) {    int r=random.nextInt(chars.length);    String tmp=chars[i];    chars[i]=chars[r];    chars[r]=tmp;  }  return Arrays.stream(chars).collect(joining());}  }
class C{  private boolean isOpen(){  return str != null;}  }
class C{  public void addExtraLine(TemplateLine line){  TemplateLine[] newExtraLines=new TemplateLine[extraLines.length + 1];  System.arraycopy(extraLines,0,newExtraLines,0,extraLines.length);  newExtraLines[extraLines.length]=line;  extraLines=newExtraLines;}  }
class C{  public void onLogout(HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {  OAuthUtil.debugMessage("OAuth2PostAuthnPlugin:onLogout called " + request.getRequestURL());  String gotoParam=request.getParameter(PARAM_GOTO);  String serviceURI=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);  try {    String loginURL=OAuthUtil.findCookie(request,COOKIE_PROXY_URL);    String accessToken=ssoToken.getProperty(SESSION_OAUTH_TOKEN);    OAuthUtil.debugMessage("OAuth2PostAuthnPlugin: OAUTH2 Token is: " + accessToken);    String logoutBehaviour=ssoToken.getProperty(SESSION_LOGOUT_BEHAVIOUR);    if (logoutBehaviour.equalsIgnoreCase("donotlogout")) {      return;    }    if (accessToken != null && !accessToken.isEmpty()) {      OAuthUtil.debugMessage("OAuth2PostAuthnPlugin: OAuth2 logout");      String logoutURL=OAuthUtil.findCookie(request,COOKIE_LOGOUT_URL);      if (logoutURL.toLowerCase().contains("facebook")) {        OAuthUtil.debugMessage("OAuth2PostAuthnPlugin: facebook");        String origUrl=URLEncoder.encode(loginURL,"UTF-8");        String query="";        if (accessToken.contains("\\|")) {          String[] tokenParts=accessToken.split("\\|");          String api_key=tokenParts[0];          String session_key=tokenParts[1];          query=FB_API_KEY + "=" + api_key+ "&"+ FB_SESSION_KEY+ "="+ session_key+ "&"+ FB_NEXT+ "="+ origUrl;        } else {          query=FB_NEXT + "=" + origUrl+ "&"+ PARAM_ACCESS_TOKEN+ "="+ accessToken;        }        logoutURL+="?" + query;      }      logoutURL=serviceURI + "/oauth2c/OAuthLogout.jsp?" + PARAM_LOGOUT_URL+ "="+ URLEncoder.encode(logoutURL,"UTF-8");      ;      if (logoutBehaviour.equalsIgnoreCase("logout")) {        logoutURL+="&" + PARAM_LOGGEDOUT + "=logmeout";      }      if (gotoParam != null && !gotoParam.isEmpty()) {        logoutURL=logoutURL + "&" + PARAM_GOTO+ "="+ URLEncoder.encode(gotoParam,"UTF-8");      }      OAuthUtil.debugMessage("OAuth2PostAuthnPlugin: redirecting to: " + logoutURL);      request.setAttribute(AMPostAuthProcessInterface.POST_PROCESS_LOGOUT_URL,logoutURL);    }  } catch (  Exception ex) {    OAuthUtil.debugError("OAuth2PostAuthnPlugin: onLogout exception " + "while setting the logout property :",ex);  }}  }
class C{  public static KeyStoreParameters newKeyStoreParameters(final ConnectionFactory factory,final DN baseDN,final Options options){  return new KeyStoreParameters(factory,baseDN,options);}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[62];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 52; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }      }    }  }  for (int i=0; i < 62; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  private void initAuthConfig() throws AuthLoginException {  if (options == null || options.isEmpty()) {    debug.error("options is null or empty");    throw new AuthLoginException(amAuthMembership,"unable-to-initialize-options",null);  }  try {    String authLevel=CollectionHelper.getMapAttr(options,"iplanet-am-auth-membership-auth-level");    if (authLevel != null) {      try {        int tmp=Integer.parseInt(authLevel);        setAuthLevel(tmp);      } catch (      NumberFormatException e) {        debug.error("invalid auth level " + authLevel,e);      }    }    regEx=CollectionHelper.getMapAttr(options,INVALID_CHARS);    serviceStatus=CollectionHelper.getMapAttr(options,"iplanet-am-auth-membership-default-user-status","Active");    if (getNumberOfStates() >= ModuleState.DISCLAIMER.intValue()) {      isDisclaimerExist=true;    } else {      isDisclaimerExist=false;    }    defaultRoles=(Set)options.get("iplanet-am-auth-membership-default-roles");    if (debug.messageEnabled()) {      debug.message("defaultRoles is : " + defaultRoles);    }    String tmp=CollectionHelper.getMapAttr(options,"iplanet-am-auth-membership-min-password-length");    if (tmp != null) {      requiredPasswordLength=Integer.parseInt(tmp);    }  } catch (  Exception ex) {    debug.error("unable to initialize in initAuthConfig(): ",ex);    throw new AuthLoginException(amAuthMembership,"Membershipex",null,ex);  }}  }
class C{  @Inject public OpenIDConnectDiscovery(OAuth2RequestFactory requestFactory,OpenIDConnectProviderDiscovery providerDiscovery,ExceptionHandler exceptionHandler,BaseURLProviderFactory baseUrlProviderFactory){  this.requestFactory=requestFactory;  this.providerDiscovery=providerDiscovery;  this.exceptionHandler=exceptionHandler;  this.baseUrlProviderFactory=baseUrlProviderFactory;}  }
class C{  public ReplicatedMap(MapOwner owner,Channel channel,long timeout,String mapContextName,int initialCapacity,float loadFactor,ClassLoader[] cls){  super(owner,channel,timeout,mapContextName,initialCapacity,loadFactor,Channel.SEND_OPTIONS_DEFAULT,cls,true);}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(timeout).toString();}  }
class C{  public static int mainSearch(String[] args){  return mainSearch(args,true,true,System.out,System.err);}  }
class C{  public Set<String> subEntries(SSOToken token,String dn,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws SMSException, SSOException {  if (filter == null) {    filter="*";  }  if (debug.messageEnabled()) {    debug.message("SMSEmbeddedLdapObject: SubEntries search: " + dn);  }  String sfilter="(objectClass=*)";  if (!filter.equals("*")) {    String[] objs={filter};    sfilter=MessageFormat.format(getSearchFilter(),(Object[])objs);  }  return getSubEntries(token,dn,sfilter,numOfEntries,sortResults,ascendingOrder);}  }
class C{  private static Collection<ShapeSegments> separate_holes(Collection<ShapeSegments> p_outline_shapes){  DsnStructureOutlineShape shape_arr[]=new DsnStructureOutlineShape[p_outline_shapes.size()];  Iterator<ShapeSegments> it=p_outline_shapes.iterator();  for (int i=0; i < shape_arr.length; ++i) {    shape_arr[i]=new DsnStructureOutlineShape(it.next());  }  for (int i=0; i < shape_arr.length; ++i) {    DsnStructureOutlineShape curr_shape=shape_arr[i];    for (int j=0; j < shape_arr.length; ++j) {      DsnStructureOutlineShape other_shape=shape_arr[j];      if (i == j || other_shape.is_hole) {        continue;      }      if (!other_shape.bounding_box.contains(curr_shape.bounding_box)) {        continue;      }      curr_shape.is_hole=other_shape.contains_all_corners(curr_shape);    }  }  Collection<ShapeSegments> hole_list=new LinkedList<ShapeSegments>();  for (int i=0; i < shape_arr.length; ++i) {    if (shape_arr[i].is_hole) {      p_outline_shapes.remove(shape_arr[i].shape);      hole_list.add(shape_arr[i].shape);    }  }  return hole_list;}  }
class C{  public Guid(String dn){  _dn=DN.valueOf(dn);  _uniqueId=-1;}  }
class C{  protected void fireVetoableChange(String propertyName,Object oldValue,Object newValue) throws java.beans.PropertyVetoException {  if (vetoableChangeSupport == null) {    return;  }  vetoableChangeSupport.fireVetoableChange(propertyName,oldValue,newValue);}  }
class C{  public final void lazySet(V newValue){  unsafe.putOrderedObject(this,valueOffset,newValue);}  }
class C{  public void insert_longlong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_longlong",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_longlong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void firePropertyChange(String propertyName,int oldValue,int newValue){  firePropertyChange(propertyName,Integer.valueOf(oldValue),Integer.valueOf(newValue));}  }
class C{  public PrintableCircle(PlaPointFloat p_center,double p_radius,java.util.Locale p_locale){  super(p_locale);  center=p_center;  radius=p_radius;}  }
class C{  @Override public Image createAwtImage(java.awt.Color foreground,java.awt.Color background){  int f=foreground.getRGB();  int g=background.getRGB();  java.awt.Canvas canvas=new java.awt.Canvas();  String bCode=code;  if (extended) {    bCode=getCode39Ex(code);  }  if (generateChecksum) {    bCode+=getChecksum(bCode);  }  int len=bCode.length() + 2;  int nn=(int)n;  int fullWidth=len * (6 + 3 * nn) + (len - 1);  byte[] bars=getBarsCode39(bCode);  boolean print=true;  int ptr=0;  int height=(int)barHeight;  int[] pix=new int[fullWidth * height];  for (int k=0; k < bars.length; ++k) {    int w=(bars[k] == 0 ? 1 : nn);    int c=g;    if (print) {      c=f;    }    print=!print;    for (int j=0; j < w; ++j) {      pix[ptr++]=c;    }  }  for (int k=fullWidth; k < pix.length; k+=fullWidth) {    System.arraycopy(pix,0,pix,k,fullWidth);  }  return canvas.createImage(new java.awt.image.MemoryImageSource(fullWidth,height,pix,0,fullWidth));}  }
class C{  private void shrinkSize(){  int i=longCount - 1;  while (i >= 0 && bits[i] == 0) {    --i;  }  this.longCount=i + 1;}  }
class C{  public JMenu(String s){  super(s);}  }
class C{  ResponseProviderTypeManager() throws SSOException {  token=ServiceTypeManager.getSSOToken();  String lstr;  lstr=token.getProperty("Locale");  java.util.Locale loc=com.sun.identity.shared.locale.Locale.getLocale(lstr);  rb=amCache.getResBundle(ResBundleUtils.rbName,loc);}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_cdataStartCalled=true;}  }
class C{  protected Set<String> collectChangesFromCache(int time,ConcurrentSkipListMap<Long,Set<String>> cache){  Set<String> answer=new HashSet<String>();  if (cacheSize > 0) {    long cacheIndex=getCacheIndex();    for (    Set<String> modDNs : idrepoCache.tailMap(cacheIndex - time - 2).values()) {      answer.addAll(modDNs);    }  }  return answer;}  }
class C{  private boolean split_avoid_this_item(int my_shape_index,AwtreeFindEntry overlap_entry,BrdItem overlap_item){  if (overlap_item != this)   return false;  int shape_index_in_object=overlap_entry.shape_index_in_object;  if (shape_index_in_object >= my_shape_index - 1 && shape_index_in_object <= my_shape_index + 1) {    return true;  }  if (my_shape_index < shape_index_in_object) {    if (polyline.corner(my_shape_index + 1).equals(polyline.corner(shape_index_in_object))) {      return true;    }  } else   if (shape_index_in_object < my_shape_index) {    if (polyline.corner(shape_index_in_object + 1).equals(polyline.corner(my_shape_index))) {      return true;    }  }  return false;}  }
class C{  public void parse(final SetCookie cookie,String domain) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (domain == null) {    throw new MalformedCookieException("Missing value for domain attribute");  }  if (domain.trim().length() == 0) {    throw new MalformedCookieException("Blank value for domain attribute");  }  domain=domain.toLowerCase(Locale.ENGLISH);  if (!domain.startsWith(".")) {    domain='.' + domain;  }  cookie.setDomain(domain);}  }
class C{  @DataProvider(name="dataForAttributeDescriptions") public Object[][] dataForAttributeDescriptions(){  return new Object[][]{{"cn"},{"CN"},{"objectClass"},{"cn;foo"},{"cn;FOO"},{"cn;bar"},{"cn;BAR"},{"cn;foo;bar"},{"cn;FOO;bar"}};}  }
class C{  public JSplitPane(int newOrientation,boolean newContinuousLayout){  this(newOrientation,newContinuousLayout,null,null);}  }
class C{  public void pop2(){  mv.visitInsn(Opcodes.POP2);}  }
class C{  public void addLayoutComponent(String place,Component component){  boolean isValid=true;  if (place != null) {    if (place.equals(JSplitPane.DIVIDER)) {      components[2]=component;      sizes[2]=getSizeForPrimaryAxis(component.getPreferredSize());    } else     if (place.equals(JSplitPane.LEFT) || place.equals(JSplitPane.TOP)) {      components[0]=component;      sizes[0]=0;    } else     if (place.equals(JSplitPane.RIGHT) || place.equals(JSplitPane.BOTTOM)) {      components[1]=component;      sizes[1]=0;    } else     if (!place.equals(BasicSplitPaneUI.NON_CONTINUOUS_DIVIDER))     isValid=false;  } else {    isValid=false;  }  if (!isValid)   throw new IllegalArgumentException("cannot add to layout: " + "unknown constraint: " + place);  doReset=true;}  }
class C{  public TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_any);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentnodeattribute.class,args);}  }
class C{  public String toString(){  StringBuilder a=new StringBuilder();  String separator=",";  for (  CoreTokenField field : getReturnFields()) {    a.append(field.toString()).append(separator);  }  return MessageFormat.format("TokenFilter: Filter: [{0}] Attributes: {1}",query,a);}  }
class C{  private InstanceState checkIn(){  final InstanceState state;  try {    logger.debug("Getting instance state for {}",instanceId);    state=getInstanceState(instanceId);  } catch (  ResourceException e) {    logger.info("Error retrieving instance state for {}",instanceId);    return null;  }  try {    if (firstCheckin) {      state.updateStartup();      state.clearShutdown();      firstCheckin=false;    }switch (state.getState()) {case InstanceState.STATE_RUNNING:      state.updateTimestamp();    break;case InstanceState.STATE_DOWN:  state.setState(InstanceState.STATE_RUNNING);logger.debug("Instance {} state changing from {} to {}",instanceId,InstanceState.STATE_DOWN,InstanceState.STATE_RUNNING);state.updateTimestamp();break;case InstanceState.STATE_PROCESSING_DOWN:logger.debug("Instance {} is in state {}, waiting for recovery attempt to finish",instanceId,state.getState());return state;}updateInstanceState(instanceId,state);logger.debug("Instance {} state updated successfully",instanceId);} catch (ResourceException e) {if (e.getCode() != ResourceException.CONFLICT) {logger.warn("Error updating instance timestamp",e);} else {logger.info("Failed to set this instance state to {}",state.getState());return null;}}return state;}  }
class C{  private void checkIfFrameSizeThatIsNotSyncSafe(ByteBuffer byteBuffer) throws InvalidFrameException {  if (frameSize > ID3SyncSafeInteger.MAX_SAFE_SIZE) {    int currentPosition=byteBuffer.position();    byteBuffer.position(currentPosition - getFrameIdSize());    int nonSyncSafeFrameSize=byteBuffer.getInt();    byteBuffer.position(currentPosition - getFrameIdSize());    boolean isNotSyncSafe=ID3SyncSafeInteger.isBufferNotSyncSafe(byteBuffer);    byteBuffer.position(currentPosition);    if (isNotSyncSafe) {      logger.warning(getLoggingFilename() + ":" + "Frame size is NOT stored as a sync safe integer:"+ identifier);      if (nonSyncSafeFrameSize > (byteBuffer.remaining() - -getFrameFlagsSize())) {        logger.warning(getLoggingFilename() + ":" + "Invalid Frame size larger than size before mp3 audio:"+ identifier);        throw new InvalidFrameException(identifier + " is invalid frame");      } else {        frameSize=nonSyncSafeFrameSize;      }    } else {      byte[] readAheadbuffer=new byte[getFrameIdSize()];      byteBuffer.position(currentPosition + frameSize + getFrameFlagsSize());      if (byteBuffer.remaining() < getFrameIdSize()) {        byteBuffer.position(currentPosition);      } else {        byteBuffer.get(readAheadbuffer,0,getFrameIdSize());        byteBuffer.position(currentPosition);        String readAheadIdentifier=new String(readAheadbuffer);        if (isValidID3v2FrameIdentifier(readAheadIdentifier)) {        } else         if (ID3SyncSafeInteger.isBufferEmpty(readAheadbuffer)) {        } else {          if (nonSyncSafeFrameSize > byteBuffer.remaining() - getFrameFlagsSize()) {            byteBuffer.position(currentPosition);          } else {            readAheadbuffer=new byte[getFrameIdSize()];            byteBuffer.position(currentPosition + nonSyncSafeFrameSize + getFrameFlagsSize());            if (byteBuffer.remaining() >= getFrameIdSize()) {              byteBuffer.get(readAheadbuffer,0,getFrameIdSize());              readAheadIdentifier=new String(readAheadbuffer);              byteBuffer.position(currentPosition);              if (isValidID3v2FrameIdentifier(readAheadIdentifier)) {                frameSize=nonSyncSafeFrameSize;                logger.warning(getLoggingFilename() + ":" + "Assuming frame size is NOT stored as a sync safe integer:"+ identifier);              } else               if (ID3SyncSafeInteger.isBufferEmpty(readAheadbuffer)) {                frameSize=nonSyncSafeFrameSize;                logger.warning(getLoggingFilename() + ":" + "Assuming frame size is NOT stored as a sync safe integer:"+ identifier);              } else {              }            } else {              byteBuffer.position(currentPosition);              if (byteBuffer.remaining() == 0) {                frameSize=nonSyncSafeFrameSize;              } else {              }            }          }        }      }    }  }}  }
class C{  @Override protected boolean doAuthenticate(Request request,HttpServletResponse response) throws IOException {  if (checkForCachedAuthentication(request,response,false)) {    return true;  }  Principal principal=null;  String authorization=request.getHeader("authorization");  DigestInfo digestInfo=new DigestInfo(getOpaque(),getNonceValidity(),getKey(),nonces,isValidateUri());  if (authorization != null) {    if (digestInfo.parse(request,authorization)) {      if (digestInfo.validate(request)) {        principal=digestInfo.authenticate(context.getRealm());      }      if (principal != null && !digestInfo.isNonceStale()) {        register(request,response,principal,HttpServletRequest.DIGEST_AUTH,digestInfo.getUsername(),null);        return true;      }    }  }  String nonce=generateNonce(request);  setAuthenticateHeader(request,response,nonce,principal != null && digestInfo.isNonceStale());  response.sendError(HttpServletResponse.SC_UNAUTHORIZED);  return false;}  }
class C{  public static String URLEncodeField(String input,String enc,Debug debug){  int inputLen=input.length();  byte[] byteOut;  try {    byteOut=input.getBytes(enc);  } catch (  UnsupportedEncodingException ex) {    if (debug != null) {      debug.error("Locale.URLEncodeField: Unsupported Encoding " + enc,ex);    }    return input;  }  StringBuffer result=new StringBuffer(inputLen * 4);  for (int i=0; i < byteOut.length; i++) {    int c=byteOut[i] & 0xff;    if (dontEncode.get(c)) {      if (c == ' ') {        c='+';      }      result.append((char)c);    } else {      result.append('%');      char ch=Character.forDigit((c >> 4) & 0xF,16);      if (('a' <= ch) && (ch <= 'f')) {        ch-=caseDiff;      }      result.append(ch);      ch=Character.forDigit(c & 0xF,16);      if (('a' <= ch) && (ch <= 'f')) {        ch-=caseDiff;      }      result.append(ch);    }  }  return result.toString();}  }
class C{  private static char[] substitute(Matcher match,char[] end,boolean escape){  StringBuilder buf=new StringBuilder();  for (int i=0; i < end.length; i++) {    char ch=end[i];    if (ch == '$' || ch == '~') {      if (i == end.length - 1)       buf.append(ch); else {        char digit=end[i + 1];        if (!Character.isDigit(digit))         buf.append(ch); else         if (ch == '$') {          String text=match.group(digit - '0');          if (escape)           text=TextUtilities.escapeText(text);          buf.append(text);          i++;        } else {          String s=match.group(digit - '0');          if (s.length() == 1) {            char b=TextUtilities.getComplementaryBracket(s.charAt(0),null);            if (b == '\0')             b=s.charAt(0);            buf.append(b);          } else           buf.append(ch);          i++;        }      }    } else     buf.append(ch);  }  char[] returnValue=new char[buf.length()];  buf.getChars(0,buf.length(),returnValue,0);  return returnValue;}  }
class C{  @Override public void addWatchedResource(String name){synchronized (watchedResourcesLock) {    String results[]=new String[watchedResources.length + 1];    for (int i=0; i < watchedResources.length; i++)     results[i]=watchedResources[i];    results[watchedResources.length]=name;    watchedResources=results;  }  fireContainerEvent("addWatchedResource",name);}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateCrtKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrimeP();  this.primeQ=key.getPrimeQ();  this.primeExponentP=key.getPrimeExponentP();  this.primeExponentQ=key.getPrimeExponentQ();  this.crtCoefficient=key.getCrtCoefficient();}  }
class C{  private Promise<ActionResponse,ResourceException> idFromSession(final Context context,final ActionRequest request){  JsonValue result=new JsonValue(new LinkedHashMap<String,Object>(1));  SSOToken ssotok;  AMIdentity amIdentity;  try {    SSOTokenManager mgr=SSOTokenManager.getInstance();    ssotok=mgr.createSSOToken(getCookieFromServerContext(context));    amIdentity=new AMIdentity(ssotok);    result.put("id",amIdentity.getName());    result.put("realm",com.sun.identity.sm.DNMapper.orgNameToRealmName(amIdentity.getRealm()));    result.put("dn",amIdentity.getUniversalId());    result.put("successURL",ssotok.getProperty(ISAuthConstants.SUCCESS_URL,false));    result.put("fullLoginURL",ssotok.getProperty(ISAuthConstants.FULL_LOGIN_URL,false));    if (debug.messageEnabled()) {      debug.message("IdentityResource.idFromSession() :: Retrieved ID for user={}",amIdentity.getName());    }    return newResultPromise(newActionResponse(result));  } catch (  SSOException e) {    debug.error("IdentityResource.idFromSession() :: Cannot retrieve SSO Token",e);    return new ForbiddenException("SSO Token cannot be retrieved.",e).asPromise();  }catch (  IdRepoException ex) {    debug.error("IdentityResource.idFromSession() :: Cannot retrieve user from IdRepo",ex);    return new ForbiddenException("Cannot retrieve id from session.",ex).asPromise();  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AssertionIDReferenceElement createAssertionIDReferenceElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AssertionIDReferenceElementImpl(value);}  }
class C{  public static HtmlOutputLabel createLabel(final String labelId){  final HtmlOutputLabel label=(HtmlOutputLabel)JSFComponentFactory.createComponent(OutputLabel.COMPONENT_TYPE);  label.setValueExpression(TagAttributeConstants.VALUE,JSFComponentFactory.createLabelValueExpression(labelId));  return label;}  }
class C{  public boolean implies(Permission perm){  boolean allowed=false;  debug.message("calling implies in ISPermissionCollection....");  if (debug.messageEnabled()) {    debug.message("ISPC::implies:: perm:" + perm.toString());  }  for (Enumeration e=perms.elements(); e.hasMoreElements(); ) {    if (((Permission)e.nextElement()).implies(perm)) {      allowed=true;      break;    }  }  if (debug.messageEnabled()) {    debug.message("ISPermssionCollection:: returning: " + allowed);  }  return allowed;}  }
class C{  private void writeBaseDNTableModel(BaseDNTableModel tableModel,ServerDescriptor desc){  boolean isRunning=desc.getStatus() == ServerDescriptor.ServerStatus.STARTED;  int labelWidth=0;  int labelWidthWithoutReplicated=0;  LocalizableMessage[] labels=new LocalizableMessage[tableModel.getColumnCount()];  for (int i=0; i < tableModel.getColumnCount(); i++) {    LocalizableMessage header=LocalizableMessage.raw(tableModel.getColumnName(i));    labels[i]=new LocalizableMessageBuilder(header).append(":").toMessage();    labelWidth=Math.max(labelWidth,labels[i].length());    if (i != 4 && i != 5) {      labelWidthWithoutReplicated=Math.max(labelWidthWithoutReplicated,labels[i].length());    }  }  LocalizableMessage replicatedLabel=INFO_BASEDN_REPLICATED_LABEL.get();  for (int i=0; i < tableModel.getRowCount(); i++) {    if (isScriptFriendly()) {      println(LocalizableMessage.raw("-"));    } else     if (i > 0) {      println();    }    for (int j=0; j < tableModel.getColumnCount(); j++) {      Object v=tableModel.getValueAt(i,j);      String value=getValue(desc,isRunning,v);      boolean doWrite=true;      boolean isReplicated=replicatedLabel.toString().equals(String.valueOf(tableModel.getValueAt(i,3)));      if (j == 4 || j == 5) {        doWrite=isReplicated;      }      if (doWrite) {        writeLabelValue(labels[j],value,isReplicated ? labelWidth : labelWidthWithoutReplicated);      }    }  }}  }
class C{  public MemoryNotificationInfo(String poolName,MemoryUsage usage,long count){  if (poolName == null) {    throw new NullPointerException("Null poolName");  }  if (usage == null) {    throw new NullPointerException("Null usage");  }  this.poolName=poolName;  this.usage=usage;  this.count=count;}  }
class C{  public void testAlgorithmParameterGenerator05() throws NoSuchProviderException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  try {    AlgorithmParameterGenerator.getInstance(null,validProviderName);    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i],validProviderName);      fail("NoSuchAlgorithmException must be thrown when (algorithm: ".concat(invalidValues[i].concat(")")));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeShortArrayAsSequence() throws Exception {  super.testDecodeShortArrayAsSequence();}  }
class C{  private static void copyResource(ClassLoader loader,String resourceName,File destination) throws IOException {  if (destination.exists()) {    return;  }  InputStream in=loader.getResourceAsStream(PACKAGE_PATH + resourceName);  FileOutputStream out=new FileOutputStream(destination);  Streams.copy(in,out);  in.close();  out.close();}  }
class C{  public Builder removeName(final String name){  this.names.remove(name);  return this;}  }
class C{  public void deleteAt(int row,int count){  if (((row | count) < 0) || (row + count > size())) {    throw new IndexOutOfBoundsException(row + ", " + count);  }  moveRowGapTo(row + count);  mRowGapStart-=count;  mRowGapLength+=count;}  }
class C{  private boolean validateProperties() throws PolicyException {  if ((properties == null) || (properties.keySet() == null)) {    throw new PolicyException(ResBundleUtils.rbName,"properties_can_not_be_null_or_empty",null,null);  }  Set keySet=properties.keySet();  if (!keySet.contains(AUTHENTICATE_TO_REALM)) {    String args[]={AUTHENTICATE_TO_REALM};    throw new PolicyException(ResBundleUtils.rbName,"property_value_not_defined",args,null);  }  Iterator keys=keySet.iterator();  while (keys.hasNext()) {    String key=(String)keys.next();    if (!AUTHENTICATE_TO_REALM.equals(key)) {      String args[]={key};      throw new PolicyException(ResBundleUtils.rbName,"attempt_to_set_invalid_property ",args,null);    }  }  Set authnToRealmSet=null;  try {    authnToRealmSet=(Set)properties.get(AUTHENTICATE_TO_REALM);  } catch (  ClassCastException e) {    String args[]={REQUEST_AUTHENTICATED_TO_REALMS};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_Set",args,e);  }  if (authnToRealmSet != null) {    validateAuthnToRealms(authnToRealmSet);  }  return true;}  }
class C{  public boolean isSpecified(String uri,String localName){  int index=getIndex(uri,localName);  if (index < 0)   throw new IllegalArgumentException("No such attribute: local=" + localName + ", namespace="+ uri);  return specified[index];}  }
class C{  private BackupProtos.Favorite packFavorite(Cursor c){  BackupProtos.Favorite favorite=new BackupProtos.Favorite();  favorite.id=c.getLong(ID_INDEX);  favorite.screen=c.getInt(SCREEN_INDEX);  favorite.container=c.getInt(CONTAINER_INDEX);  favorite.cellX=c.getInt(CELLX_INDEX);  favorite.cellY=c.getInt(CELLY_INDEX);  favorite.spanX=c.getInt(SPANX_INDEX);  favorite.spanY=c.getInt(SPANY_INDEX);  favorite.iconType=c.getInt(ICON_TYPE_INDEX);  favorite.rank=c.getInt(RANK_INDEX);  String title=c.getString(TITLE_INDEX);  if (!TextUtils.isEmpty(title)) {    favorite.title=title;  }  String intentDescription=c.getString(INTENT_INDEX);  Intent intent=null;  if (!TextUtils.isEmpty(intentDescription)) {    try {      intent=Intent.parseUri(intentDescription,0);      intent.removeExtra(ItemInfo.EXTRA_PROFILE);      favorite.intent=intent.toUri(0);    } catch (    URISyntaxException e) {      Log.e(TAG,"Invalid intent",e);    }  }  favorite.itemType=c.getInt(ITEM_TYPE_INDEX);  if (favorite.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET) {    favorite.appWidgetId=c.getInt(APPWIDGET_ID_INDEX);    String appWidgetProvider=c.getString(APPWIDGET_PROVIDER_INDEX);    if (!TextUtils.isEmpty(appWidgetProvider)) {      favorite.appWidgetProvider=appWidgetProvider;    }  } else   if (favorite.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT) {    if (favorite.iconType == LauncherSettings.Favorites.ICON_TYPE_RESOURCE) {      String iconPackage=c.getString(ICON_PACKAGE_INDEX);      if (!TextUtils.isEmpty(iconPackage)) {        favorite.iconPackage=iconPackage;      }      String iconResource=c.getString(ICON_RESOURCE_INDEX);      if (!TextUtils.isEmpty(iconResource)) {        favorite.iconResource=iconResource;      }    }    byte[] blob=c.getBlob(ICON_INDEX);    if (blob != null && blob.length > 0) {      favorite.icon=blob;    }  }  if (isReplaceableHotseatItem(favorite)) {    if (intent != null && intent.getComponent() != null) {      PackageManager pm=mContext.getPackageManager();      ActivityInfo activity=null;      ;      try {        activity=pm.getActivityInfo(intent.getComponent(),0);      } catch (      NameNotFoundException e) {        Log.e(TAG,"Target not found",e);      }      if (activity == null) {        return favorite;      }      for (int i=0; i < mItemTypeMatchers.length; i++) {        if (mItemTypeMatchers[i] == null) {          mItemTypeMatchers[i]=new ItemTypeMatcher(CommonAppTypeParser.getResourceForItemType(i));        }        if (mItemTypeMatchers[i].matches(activity,pm)) {          favorite.targetType=i;          break;        }      }    }  }  return favorite;}  }
class C{  @Override public Future<Integer> write(ByteBuffer src){  return new FutureWrite(src);}  }
class C{  public int skipBytes(int count) throws IOException, EOFException {  return (int)in.skip(count);}  }
class C{  public boolean next(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("next",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    return $self.next();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public EasyIdMod(final Context context){  this.context=context;}  }
class C{  private DesignFile open_dialog(Stat stat,String p_design_dir_name){  JFileChooser file_chooser=new JFileChooser(p_design_dir_name);  FileFilter file_filter=new FileFilter(DesignFile.all_file_extensions);  file_chooser.setFileFilter(file_filter);  file_chooser.showOpenDialog(null);  File curr_design_file=file_chooser.getSelectedFile();  if (curr_design_file == null)   return null;  return new DesignFile(stat,curr_design_file,file_chooser);}  }
class C{  public static void massiveLdc(MethodNode mn){  if (mn.name.contains("<") || AccessHelper.isAbstract(mn.access)) {    return;  }  for (int i=0; i < 3; i++) {    mn.instructions.insert(new InsnNode(Opcodes.POP2));    mn.instructions.insert(new LdcInsnNode(s));    mn.instructions.insert(new InsnNode(Opcodes.POP));    mn.instructions.insert(new InsnNode(Opcodes.SWAP));    mn.instructions.insert(new InsnNode(Opcodes.POP));    mn.instructions.insert(new LdcInsnNode(s));    mn.instructions.insert(new LdcInsnNode(s));    mn.instructions.insert(new LdcInsnNode(s));  }}  }
class C{  public Scroller(Context context){  this(context,null);}  }
class C{  @Override public <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return _fooLocalService.dynamicQuery(dynamicQuery);}  }
class C{  private void doRequestProcessing(HttpServletRequest request,HttpServletResponse response,ProviderDescriptorType hostedDescriptor,BaseConfigType hostedConfig,String hostedRole,String realm,String hostedEntityId,String metaAlias,FSLogoutNotification reqLogout,String commonErrorPage,String userID,Object ssoToken){  FSUtils.debug.message("Entered FSProcessLogoutServlet::doRequestProcessing");  int minorVersion=reqLogout.getMinorVersion();  String remoteEntityId=reqLogout.getProviderId();  ProviderDescriptorType remoteDesc=null;  boolean isIDP=false;  try {    if (hostedRole != null) {      if (hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {        remoteDesc=metaManager.getSPDescriptor(realm,remoteEntityId);      } else       if (hostedRole.equalsIgnoreCase(IFSConstants.SP)) {        remoteDesc=metaManager.getIDPDescriptor(realm,remoteEntityId);        isIDP=true;      }    }    if (remoteDesc == null) {      throw new IDFFMetaException((String)null);    }  } catch (  IDFFMetaException e) {    FSUtils.debug.error("Remote provider metadata not found.");    String[] data={remoteEntityId,realm};    LogUtil.error(Level.INFO,LogUtil.INVALID_PROVIDER,data,ssoToken);    FSLogoutUtil.returnToSource(response,remoteDesc,IFSConstants.SAML_RESPONDER,commonErrorPage,minorVersion,hostedConfig,hostedEntityId,userID);    return;  }  boolean bVerify=true;  if (FSServiceUtils.isSigningOn()) {    try {      FSUtils.debug.message("Calling verifyLogoutSignature");      bVerify=verifyLogoutSignature(request,remoteDesc,remoteEntityId,isIDP);    } catch (    FSException e) {      FSUtils.debug.error("FSProcessLogoutServlet::doRequestProcessing " + "Signature on Logout request is invalid" + "Cannot proceed federation Logout");      String[] data={userID};      LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data,ssoToken);      FSLogoutUtil.returnToSource(response,remoteDesc,IFSConstants.SAML_REQUESTER,commonErrorPage,minorVersion,hostedConfig,hostedEntityId,userID);      return;    }catch (    SAMLException e) {      FSUtils.debug.error("FSProcessLogoutServlet::doRequestProcessing(SAML) " + "Signature on Logout request is invalid" + "Cannot proceed federation Logout");      String[] data={userID};      LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data,ssoToken);      FSLogoutUtil.returnToSource(response,remoteDesc,IFSConstants.SAML_REQUESTER,commonErrorPage,minorVersion,hostedConfig,hostedEntityId,userID);      return;    }  }  String errorStatus=IFSConstants.SAML_RESPONDER;  if (bVerify) {    if (metaManager.isTrustedProvider(realm,hostedEntityId,remoteEntityId)) {      if (ssoToken != null) {        FSServiceManager instSManager=FSServiceManager.getInstance();        if (instSManager != null) {          FSUtils.debug.message("FSServiceManager Instance not null");          callPreSingleLogoutProcess(request,response,hostedRole,hostedConfig,hostedEntityId,userID,reqLogout);          FSPreLogoutHandler handlerObj=instSManager.getPreLogoutHandler();          if (handlerObj != null) {            handlerObj.setLogoutRequest(reqLogout);            handlerObj.setHostedDescriptor(hostedDescriptor);            handlerObj.setHostedDescriptorConfig(hostedConfig);            handlerObj.setRealm(realm);            handlerObj.setHostedEntityId(hostedEntityId);            handlerObj.setHostedProviderRole(hostedRole);            handlerObj.setMetaAlias(metaAlias);            handlerObj.setRemoteEntityId(remoteEntityId);            handlerObj.setRemoteDescriptor(remoteDesc);            handlerObj.processHttpSingleLogoutRequest(request,response,ssoToken);            return;          }        } else {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSServiceManager Instance null. Cannot" + " continue logout");          }          String[] data={userID};          LogUtil.error(Level.INFO,LogUtil.LOGOUT_FAILED,data,ssoToken);          FSLogoutUtil.returnToSource(response,remoteDesc,IFSConstants.SAML_RESPONDER,commonErrorPage,minorVersion,hostedConfig,hostedEntityId,userID);          return;        }      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Invalid session in request processing. " + "Nothing to logout");        }        userID=FSLogoutUtil.getUserFromRequest(reqLogout,realm,hostedEntityId,hostedRole,hostedConfig,metaAlias);        if (userID != null) {          FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,reqLogout.getSessionIndex(),request,response);          FSLogoutUtil.returnToSource(response,remoteDesc,IFSConstants.SAML_RESPONDER,commonErrorPage,minorVersion,hostedConfig,hostedEntityId,userID);          return;        }      }    } else {      FSUtils.debug.error("Remote provider not in trusted list");    }  } else {    FSUtils.debug.error("FSProcessLogoutServlet::doRequestProcesing " + "Signature on Logout request is invalid" + "Cannot proceed federation Logout");    String[] data={userID};    LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data,ssoToken);    errorStatus=IFSConstants.SAML_REQUESTER;  }  FSLogoutUtil.returnToSource(response,remoteDesc,errorStatus,commonErrorPage,minorVersion,hostedConfig,hostedEntityId,userID);  return;}  }
class C{  public JSONObject toJSONObject() throws JSONException {  JSONObject jo=new JSONObject();  jo.put("propertyName",propertyName);  jo.put("propertyValues",propertyValues);  jo.put("pResponseProviderName",pResponseProviderName);  return jo;}  }
class C{  Snapshot snapshot(){  if (!Thread.holdsLock(DiskLruCache.this))   throw new AssertionError();  Source[] sources=new Source[valueCount];  long[] lengths=this.lengths.clone();  try {    for (int i=0; i < valueCount; i++) {      sources[i]=fileSystem.source(cleanFiles[i]);    }    return new Snapshot(key,sequenceNumber,sources,lengths);  } catch (  FileNotFoundException e) {    for (int i=0; i < valueCount; i++) {      if (sources[i] != null) {        Util.closeQuietly(sources[i]);      } else {        break;      }    }    return null;  }}  }
class C{  public final boolean exceptionShow(String message,Exception exc){  if (exc == null)   return false;  String showMsg=exceptionExpand(message,exc);  JTextArea msgArea=new JTextArea(showMsg,10,75);  msgArea.setLineWrap(true);  JScrollPane scrollPane=new JScrollPane(msgArea);  if (SwingUtilities.isEventDispatchThread())   JOptionPane.showMessageDialog(logFrame,scrollPane,"Copiate questo errore",JOptionPane.ERROR_MESSAGE); else   SwingUtilities.invokeLater(new SwingShowMessage(scrollPane,JOptionPane.ERROR_MESSAGE));  return true;}  }
class C{  private void whenLoginReturnTrue(LoginModule... modules) throws LoginException {  for (  LoginModule module : modules) {    when(module.login()).thenReturn(true);  }}  }
class C{  public void removePort(){  if (hostPort != null)   hostPort.removePort();}  }
class C{  public void layoutAfter(){}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(Integer.toString(majorVersion)).append(DOT).append(Integer.toString(minorVersion));}  }
class C{  public Matcher useAnchoringBounds(boolean b){  anchoringBounds=b;  return this;}  }
class C{  public CancelException(String message,File file,int depth){  super(message);  this.file=file;  this.depth=depth;}  }
class C{  public void deregisterChangeListener(ServerManagedObjectChangeListener<? super S> listener){  for (  ConfigChangeListener l : configRepository.getChangeListeners(configDN)) {    if (l instanceof ConfigChangeListenerAdaptor) {      ConfigChangeListenerAdaptor<?> adaptor=(ConfigChangeListenerAdaptor<?>)l;      if (adaptor.getServerManagedObjectChangeListener() == listener) {        adaptor.finalizeChangeListener();        configRepository.deregisterChangeListener(configDN,adaptor);      }    }  }}  }
class C{  public net.aimeizi.person.Person.Builder clearSalary(){  fieldSetFlags()[3]=false;  return this;}  }
class C{  protected AbstractIntSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  public void addIndexModifiedListener(IndexModifiedListener listener){  indexListeners.add(listener);}  }
class C{  public int compare(Object obj1,Object obj2){  if (obj1 == obj2) {    return 0;  }  AttributeTypeAndValue atav1=(AttributeTypeAndValue)obj1;  AttributeTypeAndValue atav2=(AttributeTypeAndValue)obj2;  String kw1=atav1.getType().getName();  String kw2=atav2.getType().getName();  if (kw1 != null && kw2 == null) {    return -1;  }  if (kw1 == null && kw2 != null) {    return 1;  }  if (kw1 != null && kw2 != null) {    return kw1.compareTo(kw2);  }  return compateOids(atav1.getType(),atav2.getType());}  }
class C{  public boolean equals(Object resourceMatch){  if (resourceMatch instanceof ResourceMatch) {    ResourceMatch rm=(ResourceMatch)resourceMatch;    return (rm.resourceMatch.equals(this.resourceMatch));  }  return (false);}  }
class C{  public String toString(){  String initState="";switch (state) {case UNINITIALIZED:    initState="<not initialized>";  break;case VERIFY:initState="<initialized for verifying>";break;case SIGN:initState="<initialized for signing>";break;}return "Signature object: " + getAlgorithm() + initState;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LElement createLElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LElementImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetprefix03.class,args);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  allocateElements(size);  head=0;  tail=size;  for (int i=0; i < size; i++)   elements[i]=s.readObject();}  }
class C{  public String toXML(){  StringBuilder buff=new StringBuilder();  buff.append("<").append(DSConfigMgr.SERVER).append(" ").append(DSConfigMgr.NAME).append("=\"").append(name).append("\"").append(" ").append(DSConfigMgr.HOST).append("=\"").append(host).append("\"").append(" ").append(DSConfigMgr.PORT).append("=\"").append(port).append("\"").append(" ").append(DSConfigMgr.AUTH_TYPE).append("=\"").append(type).append("\"").append(" />\n");  return buff.toString();}  }
class C{  public void initializeArguments() throws ArgumentException {  cliArg=cliArgument();  addArgument(cliArg);  progNameArg=StringArgument.builder("programName").shortIdentifier('P').description(INFO_INSTALLDS_DESCRIPTION_PROGNAME.get()).hidden().defaultValue(Installation.getSetupFileName()).valuePlaceholder(INFO_PROGRAM_NAME_PLACEHOLDER.get()).buildArgument();  addArgument(progNameArg);  noPromptArg=noPromptArgument();  addArgument(noPromptArg);  quietArg=quietArgument();  addArgument(quietArg);  verboseArg=verboseArgument();  addArgument(verboseArg);  propertiesFileArgument=StringArgument.builder(OPTION_LONG_PROP_FILE_PATH).description(INFO_DESCRIPTION_PROP_FILE_PATH.get()).valuePlaceholder(INFO_PROP_FILE_PATH_PLACEHOLDER.get()).buildArgument();  addArgument(propertiesFileArgument);  setFilePropertiesArgument(propertiesFileArgument);  noPropertiesFileArgument=BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildArgument();  addArgument(noPropertiesFileArgument);  setNoPropertiesFileArgument(noPropertiesFileArgument);  baseDNArg=StringArgument.builder(OPTION_LONG_BASEDN).shortIdentifier(OPTION_SHORT_BASEDN).description(INFO_INSTALLDS_DESCRIPTION_BASEDN.get()).multiValued().valuePlaceholder(INFO_BASEDN_PLACEHOLDER.get()).buildArgument();  addArgument(baseDNArg);  addBaseEntryArg=BooleanArgument.builder("addBaseEntry").shortIdentifier('a').description(INFO_INSTALLDS_DESCRIPTION_ADDBASE.get()).buildArgument();  addArgument(addBaseEntryArg);  importLDIFArg=StringArgument.builder(OPTION_LONG_LDIF_FILE).shortIdentifier(OPTION_SHORT_LDIF_FILE).description(INFO_INSTALLDS_DESCRIPTION_IMPORTLDIF.get()).multiValued().valuePlaceholder(INFO_LDIFFILE_PLACEHOLDER.get()).buildArgument();  addArgument(importLDIFArg);  rejectedImportFileArg=StringArgument.builder("rejectFile").shortIdentifier('R').description(INFO_INSTALLDS_DESCRIPTION_REJECTED_FILE.get()).valuePlaceholder(INFO_REJECT_FILE_PLACEHOLDER.get()).buildArgument();  addArgument(rejectedImportFileArg);  skippedImportFileArg=StringArgument.builder("skipFile").description(INFO_INSTALLDS_DESCRIPTION_SKIPPED_FILE.get()).valuePlaceholder(INFO_SKIP_FILE_PLACEHOLDER.get()).buildArgument();  addArgument(skippedImportFileArg);  sampleDataArg=IntegerArgument.builder("sampleData").shortIdentifier('d').description(INFO_INSTALLDS_DESCRIPTION_SAMPLE_DATA.get()).lowerBound(0).defaultValue(0).valuePlaceholder(INFO_NUM_ENTRIES_PLACEHOLDER.get()).buildArgument();  addArgument(sampleDataArg);  int defaultLdapPort=UserData.getDefaultPort();  if (defaultLdapPort == -1) {    defaultLdapPort=389;  }  ldapPortArg=IntegerArgument.builder("ldapPort").shortIdentifier(OPTION_SHORT_PORT).description(INFO_INSTALLDS_DESCRIPTION_LDAPPORT.get()).range(1,65535).defaultValue(defaultLdapPort).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildArgument();  addArgument(ldapPortArg);  int defaultAdminPort=UserData.getDefaultAdminConnectorPort();  if (defaultAdminPort == -1) {    defaultAdminPort=AdministrationConnector.DEFAULT_ADMINISTRATION_CONNECTOR_PORT;  }  adminConnectorPortArg=IntegerArgument.builder("adminConnectorPort").description(INFO_INSTALLDS_DESCRIPTION_ADMINCONNECTORPORT.get()).range(1,65535).defaultValue(defaultAdminPort).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildArgument();  addArgument(adminConnectorPortArg);  jmxPortArg=IntegerArgument.builder("jmxPort").shortIdentifier('x').description(INFO_INSTALLDS_DESCRIPTION_JMXPORT.get()).range(1,65535).defaultValue(CliConstants.DEFAULT_JMX_PORT).valuePlaceholder(INFO_JMXPORT_PLACEHOLDER.get()).buildArgument();  addArgument(jmxPortArg);  skipPortCheckArg=BooleanArgument.builder("skipPortCheck").shortIdentifier('S').description(INFO_INSTALLDS_DESCRIPTION_SKIPPORT.get()).buildArgument();  addArgument(skipPortCheckArg);  directoryManagerDNArg=StringArgument.builder(OPTION_LONG_ROOT_USER_DN).shortIdentifier(OPTION_SHORT_ROOT_USER_DN).description(INFO_INSTALLDS_DESCRIPTION_ROOTDN.get()).defaultValue("cn=Directory Manager").valuePlaceholder(INFO_ROOT_USER_DN_PLACEHOLDER.get()).buildArgument();  addArgument(directoryManagerDNArg);  directoryManagerPwdStringArg=StringArgument.builder("rootUserPassword").shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_INSTALLDS_DESCRIPTION_ROOTPW.get()).valuePlaceholder(INFO_ROOT_USER_PWD_PLACEHOLDER.get()).buildArgument();  addArgument(directoryManagerPwdStringArg);  directoryManagerPwdFileArg=FileBasedArgument.builder("rootUserPasswordFile").shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_INSTALLDS_DESCRIPTION_ROOTPWFILE.get()).valuePlaceholder(INFO_ROOT_USER_PWD_FILE_PLACEHOLDER.get()).buildArgument();  addArgument(directoryManagerPwdFileArg);  enableWindowsServiceArg=BooleanArgument.builder("enableWindowsService").shortIdentifier('e').description(INFO_INSTALLDS_DESCRIPTION_ENABLE_WINDOWS_SERVICE.get()).buildArgument();  if (isWindows()) {    addArgument(enableWindowsServiceArg);  }  doNotStartArg=BooleanArgument.builder("doNotStart").shortIdentifier('O').description(INFO_INSTALLDS_DESCRIPTION_DO_NOT_START.get()).buildArgument();  addArgument(doNotStartArg);  enableStartTLSArg=BooleanArgument.builder("enableStartTLS").shortIdentifier(OPTION_SHORT_START_TLS).description(INFO_INSTALLDS_DESCRIPTION_ENABLE_STARTTLS.get()).buildArgument();  addArgument(enableStartTLSArg);  int defaultSecurePort=UserData.getDefaultSslPort(defaultLdapPort);  if (defaultSecurePort == -1) {    defaultSecurePort=636;  }  ldapsPortArg=IntegerArgument.builder("ldapsPort").shortIdentifier(OPTION_SHORT_USE_SSL).description(INFO_INSTALLDS_DESCRIPTION_LDAPSPORT.get()).range(1,65535).defaultValue(defaultSecurePort).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildArgument();  addArgument(ldapsPortArg);  generateSelfSignedCertificateArg=BooleanArgument.builder("generateSelfSignedCertificate").description(INFO_INSTALLDS_DESCRIPTION_USE_SELF_SIGNED.get()).buildArgument();  addArgument(generateSelfSignedCertificateArg);  hostNameArg=StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(INFO_INSTALLDS_DESCRIPTION_HOST_NAME.get()).defaultValue(UserData.getDefaultHostName()).valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildArgument();  addDefaultArgument(hostNameArg);  usePkcs11Arg=BooleanArgument.builder("usePkcs11Keystore").description(INFO_INSTALLDS_DESCRIPTION_USE_PKCS11.get()).buildArgument();  addArgument(usePkcs11Arg);  useJavaKeyStoreArg=StringArgument.builder("useJavaKeystore").description(INFO_INSTALLDS_DESCRIPTION_USE_JAVAKEYSTORE.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildArgument();  addArgument(useJavaKeyStoreArg);  useJCEKSArg=StringArgument.builder("useJCEKS").description(INFO_INSTALLDS_DESCRIPTION_USE_JCEKS.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildArgument();  addArgument(useJCEKSArg);  usePkcs12Arg=StringArgument.builder("usePkcs12keyStore").description(INFO_INSTALLDS_DESCRIPTION_USE_PKCS12.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildArgument();  addArgument(usePkcs12Arg);  keyStorePasswordArg=StringArgument.builder(OPTION_LONG_KEYSTORE_PWD).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD).description(INFO_INSTALLDS_DESCRIPTION_KEYSTOREPASSWORD.get()).valuePlaceholder(INFO_KEYSTORE_PWD_PLACEHOLDER.get()).buildArgument();  addDefaultArgument(keyStorePasswordArg);  keyStorePasswordFileArg=FileBasedArgument.builder(OPTION_LONG_KEYSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD_FILE).description(INFO_INSTALLDS_DESCRIPTION_KEYSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_KEYSTORE_PWD_FILE_PLACEHOLDER.get()).buildArgument();  addDefaultArgument(keyStorePasswordFileArg);  certNicknameArg=StringArgument.builder(OPTION_LONG_CERT_NICKNAME).shortIdentifier(OPTION_SHORT_CERT_NICKNAME).description(INFO_INSTALLDS_DESCRIPTION_CERT_NICKNAME.get()).multiValued().valuePlaceholder(INFO_NICKNAME_PLACEHOLDER.get()).buildArgument();  addDefaultArgument(certNicknameArg);  connectTimeoutArg=connectTimeOutHiddenArgument();  addArgument(connectTimeoutArg);  acceptLicense=acceptLicenseArgument();  addArgument(acceptLicense);  showUsageArg=showUsageArgument();  addArgument(showUsageArg);  setUsageArgument(showUsageArg);  backendTypeArg=StringArgument.builder(OPTION_LONG_BACKEND_TYPE).shortIdentifier(OPTION_SHORT_BACKEND_TYPE).description(INFO_INSTALLDS_DESCRIPTION_BACKEND_TYPE.get()).defaultValue(BackendTypeHelper.filterSchemaBackendName(new BackendTypeHelper().getBackendTypes().get(0).getName())).valuePlaceholder(INFO_INSTALLDS_BACKEND_TYPE_PLACEHOLDER.get()).buildArgument();  addArgument(backendTypeArg);}  }
class C{  private void ensureArchiveExistsAndIsUpToDate(DirectoryEnvironmentConfig environment,File configFileToUse) throws InitializationException {  maintainConfigArchive=environment.maintainConfigArchive();  maxConfigArchiveSize=environment.getMaxConfigArchiveSize();  if (maintainConfigArchive && !useLastKnownGoodConfig) {    try {      configurationDigest=calculateConfigDigest();    } catch (    DirectoryException e) {      throw new InitializationException(e.getMessageObject(),e.getCause());    }    File archiveDirectory=new File(configFileToUse.getParent(),CONFIG_ARCHIVE_DIR_NAME);    if (archiveDirectory.exists()) {      try {        byte[] lastDigest=getLastConfigDigest(archiveDirectory);        if (!Arrays.equals(configurationDigest,lastDigest)) {          writeConfigArchive();        }      } catch (      DirectoryException e) {        throw new InitializationException(e.getMessageObject(),e.getCause());      }    } else {      writeConfigArchive();    }  }}  }
class C{  public void manageApp(Context context){  String contextName=context.getName();  if (deployed.containsKey(contextName))   return;  DeployedApplication deployedApp=new DeployedApplication(contextName,false);  boolean isWar=false;  if (context.getDocBase() != null) {    File docBase=new File(context.getDocBase());    if (!docBase.isAbsolute()) {      docBase=new File(host.getAppBaseFile(),context.getDocBase());    }    deployedApp.redeployResources.put(docBase.getAbsolutePath(),Long.valueOf(docBase.lastModified()));    if (docBase.getAbsolutePath().toLowerCase(Locale.ENGLISH).endsWith(".war")) {      isWar=true;    }  }  host.addChild(context);  boolean unpackWAR=unpackWARs;  if (unpackWAR && context instanceof StandardContext) {    unpackWAR=((StandardContext)context).getUnpackWAR();  }  if (isWar && unpackWAR) {    File docBase=new File(host.getAppBaseFile(),context.getBaseName());    deployedApp.redeployResources.put(docBase.getAbsolutePath(),Long.valueOf(docBase.lastModified()));    addWatchedResources(deployedApp,docBase.getAbsolutePath(),context);  } else {    addWatchedResources(deployedApp,null,context);  }  deployed.put(contextName,deployedApp);}  }
class C{  public int hashCode(){  if (init_with_ip || wildcard) {    return this.getName().hashCode();  }  try {    getCanonName();  } catch (  UnknownHostException uhe) {  }  if (invalid || cname == null)   return this.getName().hashCode(); else   return this.cname.hashCode();}  }
class C{  public void mergeWithRegistry(ADSContext adsCtx) throws ADSContextException {  try {    mergeAdministrators(adsCtx);    mergeServerGroups(adsCtx);    mergeServers(adsCtx);  } catch (  ADSContextException adce) {    LocalizableMessage msg=ERR_ADS_MERGE.get(getHostPort(),adsCtx.getHostPort(),adce.getMessageObject());    throw new ADSContextException(ErrorType.ERROR_MERGING,msg,adce);  }}  }
class C{  public void stress_test_TestSSLSocketPair_create(){  final boolean verbose=true;  while (true) {    TestSSLSocketPair test=TestSSLSocketPair.create();    if (verbose) {      System.out.println("client=" + test.client.getLocalPort() + " server="+ test.server.getLocalPort());    } else {      System.out.print("X");    }  }}  }
class C{  public synchronized void paintIcon(Component c,Graphics g,int x,int y){  if (imageObserver == null) {    g.drawImage(image,x,y,c);  } else {    g.drawImage(image,x,y,imageObserver);  }}  }
class C{  public void square(){  c=Polynomial25519.innerSquare(c);  reduceDegree();  reduceCoefficients();}  }
class C{  private void buildLogicOr(MethodVisitor methodVisitor,CodeInfo info,Ins.LogicOr logicOr){  buildValueAccess(methodVisitor,info,logicOr.v1(),true);  methodVisitor.visitInsn(Opcodes.DUP);  info.push(CodeInfo.Size._1);  SMethodDef castToBool=logicOr.getCastToBool();  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,typeToInternalName(castToBool.declaringType()),castToBool.name(),methodDesc(castToBool.getReturnType(),castToBool.getParameters().stream().map(null).collect(Collectors.toList())),false);  info.pop(1);  info.push(CodeInfo.Size._1);  Label flag=new Label();  methodVisitor.visitJumpInsn(Opcodes.IFNE,flag);  info.pop(1);  methodVisitor.visitInsn(Opcodes.POP);  info.pop(1);  buildValueAccess(methodVisitor,info,logicOr.v2(),true);  methodVisitor.visitLabel(flag);  methodVisitor.visitInsn(Opcodes.NOP);}  }
class C{  private Map<String,Set<String>> attributesToMap(Attribute[] attributes){  Map<String,Set<String>> result=new HashMap<>();  for (  Attribute attribute : attributes) {    result.put(attribute.getName(),new HashSet<>(Arrays.asList(attribute.getValues())));  }  return result;}  }
class C{  private void promptIfRequiredForDirectoryManager(UserData uData) throws UserDataException, ClientException {  final LinkedList<String> dns=promptIfRequiredForDNs(argParser.directoryManagerDNArg,lastResetDirectoryManagerDN,INFO_INSTALLDS_PROMPT_ROOT_DN.get(),true);  uData.setDirectoryManagerDn(DN.valueOf(dns.getFirst()));  int nTries=0;  String pwd=argParser.getDirectoryManagerPassword();  while (pwd == null) {    if (nTries >= CONFIRMATION_MAX_TRIES) {      throw new UserDataException(null,ERR_TRIES_LIMIT_REACHED.get(CONFIRMATION_MAX_TRIES));    }    char[] pwd1=readPassword(INFO_INSTALLDS_PROMPT_ROOT_PASSWORD.get());    while (pwd1 == null || pwd1.length == 0) {      println();      println(INFO_EMPTY_PWD.get());      println();      pwd1=readPassword(INFO_INSTALLDS_PROMPT_ROOT_PASSWORD.get());    }    final char[] pwd2=readPassword(INFO_INSTALLDS_PROMPT_CONFIRM_ROOT_PASSWORD.get());    if (Arrays.equals(pwd1,pwd2)) {      pwd=String.valueOf(pwd1);    } else {      println();      println(ERR_INSTALLDS_PASSWORDS_DONT_MATCH.get());    }    nTries++;  }  uData.setDirectoryManagerPwd(pwd);}  }
class C{  private void grantFileReadWritePermissions(Intent intent,Uri uri){  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {    List<ResolveInfo> resInfoList=targetUi.getContext().getPackageManager().queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);    for (    ResolveInfo resolveInfo : resInfoList) {      String packageName=resolveInfo.activityInfo.packageName;      targetUi.getContext().grantUriPermission(packageName,uri,READ_WRITE_PERMISSIONS);    }  }}  }
class C{  public boolean isLocalTransfer(){  return isLocalTx;}  }
