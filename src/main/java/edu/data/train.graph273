class C{  private static void addBlockSwapper(World world,EntityPlayer player,ItemStack stack,BlockPos origCoords,int steps,boolean leaves){  BlockSwapper swapper=new BlockSwapper(world,player,stack,origCoords,steps,leaves);  if (world.isRemote)   return;  int dim=world.provider.getDimension();  if (!blockSwappers.containsKey(dim))   blockSwappers.put(dim,new HashSet<>());  blockSwappers.get(dim).add(swapper);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  setContentView(R.layout.activity_cameratest);  opmode=new CameraTestVisionOpMode();  initializeVision(R.id.surfaceView,opmode);}  }
class C{  public WebAppDebugModelEvent(T element){  this.element=element;}  }
class C{  public void removeActor(TvShowActor obj){  actors.remove(obj);  firePropertyChange(ACTORS,null,this.getActors());}  }
class C{  @Override public void recordSuccess(){  stateReference.get().recordSuccess();}  }
class C{  public CToggleButton(Icon icon,boolean selected){  this(null,icon,selected);}  }
class C{  final public void disable_tracing(){}  }
class C{  public static Document toDocument(InputStream in) throws SAXException, IOException {  return toDocument(new InputSource(in));}  }
class C{  public boolean isCycle(){  return derivation != null && derivation.hasSource(this);}  }
class C{  private ShowQueryBuilder parseShow(ShowQueryBuilder query){  Token token=scanToken();  if (token == Token.TABLE) {  } else   if (token == Token.IDENTIFIER && _lexeme.equalsIgnoreCase("tableinfo")) {    query.method("tableinfo");  } else {    throw error("Expected TABLE at {0}",token);  }  token=scanToken();  if (token != Token.IDENTIFIER) {    throw error("Expected IDENTIFIER at {0}",token);  }  String pod=_lexeme;  String name;  if (peekToken() == Token.DOT) {    scanToken();    if ((token=scanToken()) != Token.IDENTIFIER) {      throw error("Expected IDENTIFIER at {0}",token);    }    name=_lexeme;  } else {    name=pod;    pod=getPodName();  }  query.setTableName(pod + '.' + name);  return query;}  }
class C{  private HashMutableDirectedGraph simpleConservativeInfoFlowAnalysis(SootMethod sm){  if (!sm.isConcrete())   return triviallyConservativeInfoFlowAnalysis(sm);  Body b=sm.retrieveActiveBody();  UnitGraph g=new ExceptionalUnitGraph(b);  HashSet<EquivalentValue> fieldsStaticsParamsAccessed=new HashSet<EquivalentValue>();  Iterator stmtIt=g.iterator();  while (stmtIt.hasNext()) {    Stmt s=(Stmt)stmtIt.next();    if (s instanceof IdentityStmt) {      IdentityStmt is=(IdentityStmt)s;      IdentityRef ir=(IdentityRef)is.getRightOp();      if (ir instanceof ParameterRef) {        ParameterRef pr=(ParameterRef)ir;        fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForParameterRef(sm,pr.getIndex()));      }    }    if (s.containsFieldRef()) {      FieldRef ref=s.getFieldRef();      if (ref instanceof StaticFieldRef) {        StaticFieldRef sfr=(StaticFieldRef)ref;        fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForFieldRef(sm,sfr.getField()));      } else       if (ref instanceof InstanceFieldRef) {        InstanceFieldRef ifr=(InstanceFieldRef)ref;        Value base=ifr.getBase();        if (base instanceof Local) {          if (dfa.includesInnerFields() || ((!sm.isStatic()) && base.equivTo(b.getThisLocal())))           fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForFieldRef(sm,ifr.getField()));        }      }    }  }  HashMutableDirectedGraph dataFlowGraph=new MemoryEfficientGraph();  Iterator<EquivalentValue> accessedIt1=fieldsStaticsParamsAccessed.iterator();  while (accessedIt1.hasNext()) {    Object o=accessedIt1.next();    dataFlowGraph.addNode(o);  }  for (int i=0; i < sm.getParameterCount(); i++) {    EquivalentValue parameterRefEqVal=InfoFlowAnalysis.getNodeForParameterRef(sm,i);    if (!dataFlowGraph.containsNode(parameterRefEqVal))     dataFlowGraph.addNode(parameterRefEqVal);  }  for (Iterator it=sm.getDeclaringClass().getFields().iterator(); it.hasNext(); ) {    SootField sf=(SootField)it.next();    if (sf.isStatic() || !sm.isStatic()) {      EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,sf);      if (!dataFlowGraph.containsNode(fieldRefEqVal))       dataFlowGraph.addNode(fieldRefEqVal);    }  }  SootClass superclass=sm.getDeclaringClass();  if (superclass.hasSuperclass())   superclass=sm.getDeclaringClass().getSuperclass();  while (superclass.hasSuperclass()) {    Iterator scFieldsIt=superclass.getFields().iterator();    while (scFieldsIt.hasNext()) {      SootField scField=(SootField)scFieldsIt.next();      if (scField.isStatic() || !sm.isStatic()) {        EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,scField);        if (!dataFlowGraph.containsNode(fieldRefEqVal))         dataFlowGraph.addNode(fieldRefEqVal);      }    }    superclass=superclass.getSuperclass();  }  ParameterRef returnValueRef=null;  if (sm.getReturnType() != VoidType.v()) {    returnValueRef=new ParameterRef(sm.getReturnType(),-1);    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForReturnRef(sm));  }  if (!sm.isStatic()) {    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForThisRef(sm));    fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForThisRef(sm));  }  accessedIt1=fieldsStaticsParamsAccessed.iterator();  while (accessedIt1.hasNext()) {    Object r=accessedIt1.next();    Ref rRef=(Ref)((EquivalentValue)r).getValue();    if (!(rRef.getType() instanceof RefLikeType) && !dfa.includesPrimitiveInfoFlow())     continue;    Iterator<EquivalentValue> accessedIt2=fieldsStaticsParamsAccessed.iterator();    while (accessedIt2.hasNext()) {      Object s=accessedIt2.next();      Ref sRef=(Ref)((EquivalentValue)s).getValue();      if (rRef instanceof ThisRef && sRef instanceof InstanceFieldRef)       ; else       if (sRef instanceof ThisRef && rRef instanceof InstanceFieldRef)       ; else       if (sRef instanceof ParameterRef && dfa.includesInnerFields())       ; else       if (sRef.getType() instanceof RefLikeType)       dataFlowGraph.addEdge(r,s);    }    if (returnValueRef != null && (returnValueRef.getType() instanceof RefLikeType || dfa.includesPrimitiveInfoFlow()))     dataFlowGraph.addEdge(r,InfoFlowAnalysis.getNodeForReturnRef(sm));  }  return dataFlowGraph;}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public void paint(Graphics g){  Graphics2D g2=(Graphics2D)g;  FontMetrics fm=getFontMetrics(DisplayNodeUtils.getFont());  int width=getPreferredSize().width;  int stringWidth=fm.stringWidth(getName());  int stringX=(width - stringWidth) / 2;  int stringY=fm.getAscent() + DisplayNodeUtils.getPixelGap();  g2.setColor(isSelected() ? DisplayNodeUtils.getNodeSelectedFillColor() : DisplayNodeUtils.getNodeFillColor());  g2.fill(getShape());  g2.setColor(isSelected() ? DisplayNodeUtils.getNodeSelectedEdgeColor() : DisplayNodeUtils.getNodeEdgeColor());  g2.draw(getShape());  g2.setColor(DisplayNodeUtils.getNodeTextColor());  g2.setFont(DisplayNodeUtils.getFont());  g2.drawString(getName(),stringX,stringY);}  }
class C{  public static BottomSheetDialog newInstance(@LayoutRes int layoutResId,@Nullable Fragment fragment){  BottomSheetDialog bottomSheetFragment=new BottomSheetDialog();  Bundle args=new Bundle();  args.putInt(ARG_LAYOUT,layoutResId);  bottomSheetFragment.setArguments(args);  if (fragment != null)   bottomSheetFragment.setTargetFragment(fragment,0);  return bottomSheetFragment;}  }
class C{  protected void implReset(){  numNonStandardChars=nonStandardEncodingLen=0;  nonStandardCharsetBuffer=null;  byteBuf=null;  try {    encoder=Charset.forName("ISO8859_1").newEncoder();  } catch (  IllegalArgumentException cannotHappen) {  }  initEncoder(encoder);}  }
class C{  public void dumpLogMessages(LogSystem newLogger){synchronized (this) {    if (!pendingMessages.isEmpty()) {      for (Enumeration e=pendingMessages.elements(); e.hasMoreElements(); ) {        Object[] data=(Object[])e.nextElement();        newLogger.logVelocityMessage(((Integer)data[0]).intValue(),(String)data[1]);      }    }  }}  }
class C{  public void reportThatAOSIsInNonAdaptiveMode(){  if (Controller.options.LOGGING_LEVEL >= 1) {    printlnToLogWithTimePrefix("AOS: In non-adaptive mode; controller thread exiting.");  }}  }
class C{  public static ColorScheme create(Supplier<Integer> primaryColor,Supplier<Integer> secondaryColor){  return new ColorScheme(primaryColor,secondaryColor);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == GamlDefinition.class) {switch (baseFeatureID) {case GamlPackage.GAML_DEFINITION__NAME:      return GamlPackage.SSPECIES__NAME;default :    return -1;}}if (baseClass == VarDefinition.class) {switch (baseFeatureID) {default :  return -1;}}if (baseClass == S_Declaration.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == ActionDefinition.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == TypeDefinition.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  protected final void scanClass(Class<?> c){  for (  Class<? extends Annotation> cAnnotation : supportedClassAnnotations) {    if (c.isAnnotationPresent(cAnnotation)) {      annotatedClasses.add(c);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.144 -0500",hash_original_method="05673170CC0D0E023F5651E2EFB2043A",hash_generated_method="45CCF4926380A2CEB56B7EE47CF351E8") @Override public void close() throws IOException {synchronized (lock) {    out.close();  }}  }
class C{  @Override public String findToken(){  IRequestInfo iri=super.getCallbacks().getHelpers().analyzeRequest(getMessage());  List<IParameter> list=iri.getParameters();  for (  IParameter p : list) {    if (p.getName().equals(ID)) {      return decode(p.getValue());    }  }  return "Not Found!";}  }
class C{  public WriteMemorySynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public PercolateRequest documentType(String type){  this.documentType=type;  return this;}  }
class C{  public synchronized static boolean smellsLikeAnEC2(){  if (RUNNING_ON_EC2 == null) {    RUNNING_ON_EC2=doTestEc2();  }  return RUNNING_ON_EC2;}  }
class C{  protected void processContainerMigrate(SimEvent ev,boolean ack){  Object tmp=ev.getData();  if (!(tmp instanceof Map<?,?>)) {    throw new ClassCastException("The data object must be Map<String, Object>");  }  @SuppressWarnings("unchecked") Map<String,Object> migrate=(HashMap<String,Object>)tmp;  Container container=(Container)migrate.get("container");  ContainerVm containerVm=(ContainerVm)migrate.get("vm");  getContainerAllocationPolicy().deallocateVmForContainer(container);  if (containerVm.getContainersMigratingIn().contains(container)) {    containerVm.removeMigratingInContainer(container);  }  boolean result=getContainerAllocationPolicy().allocateVmForContainer(container,containerVm);  if (!result) {    Log.printLine("[Datacenter.processContainerMigrate]Container allocation to the destination vm failed");    System.exit(0);  }  if (containerVm.isInWaiting()) {    containerVm.setInWaiting(false);  }  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=container.getId();    if (result) {      data[2]=CloudSimTags.TRUE;    } else {      data[2]=CloudSimTags.FALSE;    }    sendNow(ev.getSource(),containerCloudSimTags.CONTAINER_CREATE_ACK,data);  }  Log.formatLine("%.2f: Migration of container #%d to Vm #%d is completed",CloudSim.clock(),container.getId(),container.getVm().getId());  container.setInMigration(false);}  }
class C{  public void copyToClipboard(OsmElement e,int lat,int lon){  dirty=true;  if (e instanceof Node) {    Node newNode=factory.createNodeWithNewId(((Node)e).getLat(),((Node)e).getLon());    newNode.setTags(e.getTags());    clipboard.copyTo(newNode,lat,lon);  } else   if (e instanceof Way) {    Way newWay=factory.createWayWithNewId();    newWay.setTags(e.getTags());    for (    Node nd : ((Way)e).getNodes()) {      Node newNode=factory.createNodeWithNewId(nd.getLat(),nd.getLon());      newNode.setTags(nd.getTags());      newWay.addNode(nd);    }    clipboard.copyTo(newWay,lat,lon);  }}  }
class C{  protected TomcatCopyingInstalledLocalDeployer createDeployer(LocalContainer container){  return new TomcatCopyingInstalledLocalDeployer(container);}  }
class C{  @Override protected Instance process(Instance instance) throws Exception {  Instance result;  double[] values;  int i;  values=new double[m_Indices.length];  for (i=0; i < m_Indices.length; i++) {    values[i]=instance.value(m_Indices[i]);  }  result=new DenseInstance(instance.weight(),values);  result.setDataset(getOutputFormat());  copyValues(result,false,instance.dataset(),getOutputFormat());  result.setDataset(getOutputFormat());  return result;}  }
class C{  public static void register(Connection conn) throws SQLException {  String[] init={"UNIX_TIMESTAMP","unixTimestamp","FROM_UNIXTIME","fromUnixTime","DATE","date"};  Statement stat=conn.createStatement();  for (int i=0; i < init.length; i+=2) {    String alias=init[i], method=init[i + 1];    stat.execute("CREATE ALIAS IF NOT EXISTS " + alias + " FOR \""+ FunctionsMySQL.class.getName()+ "."+ method+ "\"");  }}  }
class C{  public static <T>Permutations<T> create(T[] in,T[] out,int m){  return new Permutations<T>(in,out,m);}  }
class C{  public Pattern indexContentMustNotMatchPattern(){  if (this.indexcontentmustnotmatch == null) {    final String r=get(CrawlAttribute.INDEXING_CONTENT_MUSTNOTMATCH.key);    try {      this.indexcontentmustnotmatch=(r == null || r.equals(CrawlProfile.MATCH_NEVER_STRING)) ? CrawlProfile.MATCH_NEVER_PATTERN : Pattern.compile(r,Pattern.CASE_INSENSITIVE);    } catch (    final PatternSyntaxException e) {      this.indexcontentmustnotmatch=CrawlProfile.MATCH_NEVER_PATTERN;    }  }  return this.indexcontentmustnotmatch;}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  public static void validateEncode(byte[] info,DexFile file,CstMethodRef ref,DalvCode code,boolean isStatic){  PositionList pl=code.getPositions();  LocalList ll=code.getLocals();  DalvInsnList insns=code.getInsns();  int codeSize=insns.codeSize();  int countRegisters=insns.getRegistersSize();  try {    validateEncode0(info,codeSize,countRegisters,isStatic,ref,file,pl,ll);  } catch (  RuntimeException ex) {    System.err.println("instructions:");    insns.debugPrint(System.err,"  ",true);    System.err.println("local list:");    ll.debugPrint(System.err,"  ");    throw ExceptionWithContext.withContext(ex,"while processing " + ref.toHuman());  }}  }
class C{  @Override public void bounce(Mail mail,String message) throws MessagingException {  bounce(mail,message,getPostmaster());}  }
class C{  public String toString(){  String interpolation=null;  if (interpolationType == NO_INTERPOLATION)   interpolation="NO_INTERPOLATION";  if (interpolationType == LINEAR_INTERPOLATION)   interpolation="LINEAR_INTERPOLATION";  return this.getClass().getName() + "(" + ((cdf != null) ? cdf.length : 0)+ ","+ interpolation+ ")";}  }
class C{  public final int popAndTop(){  m_firstFree--;  m_map[m_firstFree]=DTM.NULL;  return (m_firstFree == 0) ? DTM.NULL : m_map[m_firstFree - 1];}  }
class C{  @NotNull @Override public Result changeIndent(@NotNull Project project,@NotNull Editor editor,@NotNull PsiFile file){  SelectionModel selectionModel=editor.getSelectionModel();  if (selectionModel.hasSelection()) {    return Result.CONTINUE;  }  Document document=editor.getDocument();  int caretOffset=editor.getCaretModel().getOffset();  int caretLine=document.getLineNumber(caretOffset);  if (caretLine == 0 || isLineContainsWhiteSpacesOnlyEmpty(document,caretLine)) {    return Result.CONTINUE;  }  ChangeIndentContext context=new ChangeIndentContext(project,file,editor,document,caretLine);  if (defineSoleIndentIfPossible(context)) {    return Result.STOP;  }switch (tryToIndentToRight(context)) {case STOP_SUCCESSFUL:    return Result.STOP;case STOP_UNSUCCESSFUL:  return Result.CONTINUE;case CONTINUE:break;}if (tryToIndentToLeft(context)) {return Result.STOP;}return Result.CONTINUE;}  }
class C{  public LuaPrint buildOpCode(StringBuffer ps,Prototype f,int pc){  int[] code=f.code;  int i=code[pc];  int o=GET_OPCODE(i);  int a=GETARG_A(i);  int b=GETARG_B(i);  int c=GETARG_C(i);  int bx=GETARG_Bx(i);  int sbx=GETARG_sBx(i);  int line=getline(f,pc);  ps.append("  " + (pc + 1) + "  ");  if (line > 0)   ps.append("[" + line + "]  "); else   ps.append("[-]  ");  ps.append(OPNAMES[o] + "  ");switch (getOpMode(o)) {case iABC:    ps.append(a);  if (getBMode(o) != OpArgN)   ps.append(" " + (ISK(b) ? (-1 - INDEXK(b)) : b));if (getCMode(o) != OpArgN) ps.append(" " + (ISK(c) ? (-1 - INDEXK(c)) : c));break;case iABx:if (getBMode(o) == OpArgK) {ps.append(a + " " + (-1 - bx));} else {ps.append(a + " " + (bx));}break;case iAsBx:if (o == OP_JMP) ps.append(sbx); else ps.append(a + " " + sbx);break;}switch (o) {case OP_LOADK:ps.append("  ; ");buildConstant(ps,f,bx);break;case OP_GETUPVAL:case OP_SETUPVAL:ps.append("  ; ");buildUpvalue(ps,f.upvalues[b]);break;case OP_GETTABUP:ps.append("  ; ");buildUpvalue(ps,f.upvalues[b]);ps.append(" ");if (ISK(c)) buildConstant(ps,f,INDEXK(c)); else ps.append("-");break;case OP_SETTABUP:ps.append("  ; ");buildUpvalue(ps,f.upvalues[a]);ps.append(" ");if (ISK(b)) buildConstant(ps,f,INDEXK(b)); else ps.append("-");ps.append(" ");if (ISK(c)) buildConstant(ps,f,INDEXK(c)); else ps.append("-");break;case OP_GETTABLE:case OP_SELF:if (ISK(c)) {ps.append("  ; ");buildConstant(ps,f,INDEXK(c));}break;case OP_SETTABLE:case OP_ADD:case OP_SUB:case OP_MUL:case OP_DIV:case OP_POW:case OP_EQ:case OP_LT:case OP_LE:if (ISK(b) || ISK(c)) {ps.append("  ; ");if (ISK(b)) buildConstant(ps,f,INDEXK(b)); else ps.append("-");ps.append(" ");if (ISK(c)) buildConstant(ps,f,INDEXK(c)); else ps.append("-");}break;case OP_JMP:case OP_FORLOOP:case OP_FORPREP:ps.append("  ; to " + (sbx + pc + 2));break;case OP_CLOSURE:ps.append("  ; " + f.p[bx].getClass().getName());break;case OP_SETLIST:if (c == 0) ps.append("  ; " + ((int)code[++pc])); else ps.append("  ; " + ((int)c));break;case OP_VARARG:ps.append("  ; is_vararg=" + f.is_vararg);break;default :break;}return this;}  }
class C{  static void checkMethodIdentifier(int version,final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if ((version & 0xFFFF) >= Opcodes.V1_5) {    for (int i=0; i < name.length(); ++i) {      if (".;[/<>".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }    return;  }  if (!Character.isJavaIdentifierStart(name.charAt(0))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a '<init>', '<clinit>' or a valid Java identifier): "+ name);  }  for (int i=1; i < name.length(); ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be '<init>' or '<clinit>' or a valid Java identifier): "+ name);    }  }}  }
class C{  public static NlpExtractor buildOperator(Map<String,String> operatorProperties) throws PlanGenException, DataFlowException, IOException {  String nlpTypeStr=OperatorBuilderUtils.getRequiredProperty(NLP_TYPE,operatorProperties);  PlanGenUtils.planGenAssert(isValidNlpType(nlpTypeStr),"invalid NlpType");  List<Attribute> attributeList=OperatorBuilderUtils.constructAttributeList(operatorProperties);  NlpPredicate predicate=new NlpPredicate(convertToNlpType(nlpTypeStr),attributeList);  NlpExtractor operator=new NlpExtractor(predicate);  Integer limitInt=OperatorBuilderUtils.findLimit(operatorProperties);  if (limitInt != null) {    operator.setLimit(limitInt);  }  Integer offsetInt=OperatorBuilderUtils.findOffset(operatorProperties);  if (offsetInt != null) {    operator.setOffset(offsetInt);  }  return operator;}  }
class C{  public synchronized int engineSize(){  token.ensureValid();  return aliasMap.size();}  }
class C{  private void display(PrintStream output){  output.println("Parameter	Sensitivity [Confidence]");  output.println("First-Order Effects");  for (int j=0; j < P; j++) {    double[] a0=new double[N];    double[] a1=new double[N];    double[] a2=new double[N];    for (int i=0; i < N; i++) {      a0[i]=A[i];      a1[i]=C_A[i][j];      a2[i]=B[i];    }    output.print("  ");    output.print(parameterFile.get(j).getName());    output.print(' ');    output.print(computeFirstOrder(a0,a1,a2,N));    output.print(" [");    output.print(computeFirstOrderConfidence(a0,a1,a2,N,resamples));    output.println(']');  }  output.println("Total-Order Effects");  for (int j=0; j < P; j++) {    double[] a0=new double[N];    double[] a1=new double[N];    double[] a2=new double[N];    for (int i=0; i < N; i++) {      a0[i]=A[i];      a1[i]=C_A[i][j];      a2[i]=B[i];    }    output.print("  ");    output.print(parameterFile.get(j).getName());    output.print(' ');    output.print(computeTotalOrder(a0,a1,a2,N));    output.print(" [");    output.print(computeTotalOrderConfidence(a0,a1,a2,N,resamples));    output.println(']');  }  output.println("Second-Order Effects");  for (int j=0; j < P; j++) {    for (int k=j + 1; k < P; k++) {      double[] a0=new double[N];      double[] a1=new double[N];      double[] a2=new double[N];      double[] a3=new double[N];      double[] a4=new double[N];      for (int i=0; i < N; i++) {        a0[i]=A[i];        a1[i]=C_B[i][j];        a2[i]=C_A[i][k];        a3[i]=C_A[i][j];        a4[i]=B[i];      }      output.print("  ");      output.print(parameterFile.get(j).getName());      output.print(" * ");      output.print(parameterFile.get(k).getName());      output.print(' ');      output.print(computeSecondOrder(a0,a1,a2,a3,a4,N));      output.print(" [");      output.print(computeSecondOrderConfidence(a0,a1,a2,a3,a4,N,resamples));      output.println(']');    }  }}  }
class C{  private void deleteChildren(Element container){  while (container.hasChildNodes()) {    container.removeChild(container.getLastChild());  }}  }
class C{  public static void initForCurrentThread(){  log.trace("initForCurrentThread()");  if (instance == null) {    log.trace("create new GlobalConfImpl");    instance=new GlobalConfImpl(false);  }  reloadIfChanged();  THREAD_LOCAL.set(instance);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:51.979 -0500",hash_original_method="5F86FAE7117D2E108E68CEB80BF49DA7",hash_generated_method="6ED7733ABB42EB8D1CAB516377E36AA4") public static boolean putInt(ContentResolver cr,String name,int value){  return putString(cr,name,Integer.toString(value));}  }
class C{  protected void paint(SynthContext context,Graphics g){  super.paint(g,getComponent());}  }
class C{  public void stopSounds() throws IOException {  print("stopSounds",null);}  }
class C{  @Override public boolean supportsANSI92EntryLevelSQL(){  debugCodeCall("supportsANSI92EntryLevelSQL");  return true;}  }
class C{  public Track queue(URL url) throws IOException, UnsupportedAudioFileException {  Track track=new Track(new URLProvider(url));  track.getMetadata().put("url",url);  queue(track);  return track;}  }
class C{  public static final HashSet readSetXml(InputStream in) throws XmlPullParserException, java.io.IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (HashSet)readValueXml(parser,new String[1]);}  }
class C{  @Override protected void buildRepresentation(IEntity entity){  final SpriteStore store=SpriteStore.get();  ZoneInfo info=ZoneInfo.get();  Sprite sprite=store.getModifiedSprite(translate(getClassResourcePath()),info.getZoneColor(),info.getColorMethod());  setSprite(sprite);}  }
class C{  protected void firePropertyChange(PropertyChangeEvent event){  if (listenerList == null)   return;  PropertyChangeListener listener;  Iterator<PropertyChangeListener> it=listenerList.iterator();  while (it.hasNext()) {    listener=it.next();    listener.propertyChange(event);  }}  }
class C{  public String name(){  return name;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  private void processAnsiCommand_G(){}  }
class C{  public static JScrollPane createScrollPane(Component view,int vsbPolicy,int hsbPolicy){  if (LnfUtil.usingMacLnf()) {    if (vsbPolicy == ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED) {      vsbPolicy=ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS;    }    if (hsbPolicy == ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED) {      hsbPolicy=ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS;    }  }  JScrollPane scrollPane;  if (view != null) {    scrollPane=new JScrollPane(view,vsbPolicy,hsbPolicy);  } else {    scrollPane=new JScrollPane(vsbPolicy,hsbPolicy);  }  return scrollPane;}  }
class C{  protected int[] readIndex() throws IOException {  if (this.shxChannel == null)   return null;  ByteBuffer buffer=ByteBuffer.allocate(HEADER_LENGTH);  WWIO.readChannelToBuffer(this.shxChannel,buffer);  if (buffer.remaining() < HEADER_LENGTH)   return null;  Header indexHeader=this.readHeaderFromBuffer(buffer);  int numRecords=(indexHeader.fileLength - HEADER_LENGTH) / 8;  int numElements=2 * numRecords;  int indexLength=8 * numRecords;  int[] array;  try {    buffer=ByteBuffer.allocate(indexLength);    array=new int[numElements];  } catch (  OutOfMemoryError e) {    Logging.logger().log(Level.WARNING,Logging.getMessage("SHP.OutOfMemoryAllocatingIndex",this.getStringValue(AVKey.DISPLAY_NAME)),e);    return null;  }  buffer.order(ByteOrder.BIG_ENDIAN);  WWIO.readChannelToBuffer(this.shxChannel,buffer);  buffer.asIntBuffer().get(array);  for (int i=0; i < numElements; i++) {    array[i]*=2;  }  return array;}  }
class C{  public static TextEncodingDetails countGsmSeptets(CharSequence s,boolean use7bitOnly){  if (!sDisableCountryEncodingCheck) {    enableCountrySpecificEncodings();  }  if (sEnabledSingleShiftTables.length + sEnabledLockingShiftTables.length == 0) {    TextEncodingDetails ted=new TextEncodingDetails();    int septets=GsmAlphabet.countGsmSeptetsUsingTables(s,use7bitOnly,0,0);    if (septets == -1) {      return null;    }    ted.codeUnitSize=SmsConstants.ENCODING_7BIT;    ted.codeUnitCount=septets;    if (septets > SmsConstants.MAX_USER_DATA_SEPTETS) {      ted.msgCount=(septets + (SmsConstants.MAX_USER_DATA_SEPTETS_WITH_HEADER - 1)) / SmsConstants.MAX_USER_DATA_SEPTETS_WITH_HEADER;      ted.codeUnitsRemaining=(ted.msgCount * SmsConstants.MAX_USER_DATA_SEPTETS_WITH_HEADER) - septets;    } else {      ted.msgCount=1;      ted.codeUnitsRemaining=SmsConstants.MAX_USER_DATA_SEPTETS - septets;    }    ted.codeUnitSize=SmsConstants.ENCODING_7BIT;    return ted;  }  int maxSingleShiftCode=sHighestEnabledSingleShiftCode;  List<LanguagePairCount> lpcList=new ArrayList<LanguagePairCount>(sEnabledLockingShiftTables.length + 1);  lpcList.add(new LanguagePairCount(0));  for (  int i : sEnabledLockingShiftTables) {    if (i != 0 && !sLanguageTables[i].isEmpty()) {      lpcList.add(new LanguagePairCount(i));    }  }  int sz=s.length();  for (int i=0; i < sz && !lpcList.isEmpty(); i++) {    char c=s.charAt(i);    if (c == GSM_EXTENDED_ESCAPE) {      Rlog.w(TAG,"countGsmSeptets() string contains Escape character, ignoring!");      continue;    }    for (    LanguagePairCount lpc : lpcList) {      int tableIndex=sCharsToGsmTables[lpc.languageCode].get(c,-1);      if (tableIndex == -1) {        for (int table=0; table <= maxSingleShiftCode; table++) {          if (lpc.septetCounts[table] != -1) {            int shiftTableIndex=sCharsToShiftTables[table].get(c,-1);            if (shiftTableIndex == -1) {              if (use7bitOnly) {                lpc.septetCounts[table]++;                lpc.unencodableCounts[table]++;              } else {                lpc.septetCounts[table]=-1;              }            } else {              lpc.septetCounts[table]+=2;            }          }        }      } else {        for (int table=0; table <= maxSingleShiftCode; table++) {          if (lpc.septetCounts[table] != -1) {            lpc.septetCounts[table]++;          }        }      }    }  }  TextEncodingDetails ted=new TextEncodingDetails();  ted.msgCount=Integer.MAX_VALUE;  ted.codeUnitSize=SmsConstants.ENCODING_7BIT;  int minUnencodableCount=Integer.MAX_VALUE;  for (  LanguagePairCount lpc : lpcList) {    for (int shiftTable=0; shiftTable <= maxSingleShiftCode; shiftTable++) {      int septets=lpc.septetCounts[shiftTable];      if (septets == -1) {        continue;      }      int udhLength;      if (lpc.languageCode != 0 && shiftTable != 0) {        udhLength=UDH_SEPTET_COST_LENGTH + UDH_SEPTET_COST_TWO_SHIFT_TABLES;      } else       if (lpc.languageCode != 0 || shiftTable != 0) {        udhLength=UDH_SEPTET_COST_LENGTH + UDH_SEPTET_COST_ONE_SHIFT_TABLE;      } else {        udhLength=0;      }      int msgCount;      int septetsRemaining;      if (septets + udhLength > SmsConstants.MAX_USER_DATA_SEPTETS) {        if (udhLength == 0) {          udhLength=UDH_SEPTET_COST_LENGTH;        }        udhLength+=UDH_SEPTET_COST_CONCATENATED_MESSAGE;        int septetsPerMessage=SmsConstants.MAX_USER_DATA_SEPTETS - udhLength;        msgCount=(septets + septetsPerMessage - 1) / septetsPerMessage;        septetsRemaining=(msgCount * septetsPerMessage) - septets;      } else {        msgCount=1;        septetsRemaining=SmsConstants.MAX_USER_DATA_SEPTETS - udhLength - septets;      }      int unencodableCount=lpc.unencodableCounts[shiftTable];      if (use7bitOnly && unencodableCount > minUnencodableCount) {        continue;      }      if ((use7bitOnly && unencodableCount < minUnencodableCount) || msgCount < ted.msgCount || (msgCount == ted.msgCount && septetsRemaining > ted.codeUnitsRemaining)) {        minUnencodableCount=unencodableCount;        ted.msgCount=msgCount;        ted.codeUnitCount=septets;        ted.codeUnitsRemaining=septetsRemaining;        ted.languageTable=lpc.languageCode;        ted.languageShiftTable=shiftTable;      }    }  }  if (ted.msgCount == Integer.MAX_VALUE) {    return null;  }  return ted;}  }
class C{  public boolean hasUndeclaredException(){  if (test == null)   return false;  for (  Integer i : exceptions.keySet()) {    Throwable t=exceptions.get(i);    assert i >= 0 && i <= test.size() : "Exception " + t + " at position "+ i+ " in test of length "+ test.size()+ ": "+ test.toCode(exceptions);    if (i >= test.size())     continue;    if (!test.getStatement(i).getDeclaredExceptions().contains(t.getClass()))     return true;  }  return false;}  }
class C{  private void rehash(){  java.util.Set<Entry<K,V>> set=entrySet();  capacity<<=1;  size=0;  table.clear();  for (int i=0; i < capacity; i++)   table.add(null);  for (  Entry<K,V> entry : set) {    put(entry.getKey(),entry.getValue());  }}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public void deleteBreakPoint(BreakPoint breakPoint) throws DebuggerException {  final String className=breakPoint.getLocation().getClassName();  final int lineNumber=breakPoint.getLocation().getLineNumber();  EventRequestManager requestManager=getEventManager();  List<BreakpointRequest> snapshot=new ArrayList<>(requestManager.breakpointRequests());  for (  BreakpointRequest breakpointRequest : snapshot) {    com.sun.jdi.Location location=breakpointRequest.location();    if (location.declaringType().name().equals(className) && location.lineNumber() == lineNumber) {      requestManager.deleteEventRequest(breakpointRequest);      LOG.debug("Delete breakpoint: {}",location);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrreplacedataoffsetgreater.class,args);}  }
class C{  public DoubleComplexNumberType clone(){  DoubleComplexNumberType result=new DoubleComplexNumberType();  result.Real=Real;  result.Imaginary=Imaginary;  return result;}  }
class C{  public static CoverageInformationItem parse(String outputMessage,String modelName){  outputMessage=outputMessage.trim();  int index=outputMessage.indexOf(COLON);  return new CoverageInformationItem(Location.parseLocation(outputMessage.substring(0,index)),Long.parseLong(outputMessage.substring(index + COLON.length())),modelName);}  }
class C{  public Enumeration unused(){  Vector unUsed=new Vector();  Enumeration names=used.keys();  while (names.hasMoreElements()) {    String name=(String)names.nextElement();    Boolean isUsed=(Boolean)used.get(name);    if (!isUsed.booleanValue())     unUsed.addElement(name);  }  return unUsed.elements();}  }
class C{  private void handleDescriptors(final StatementInfo info) throws SQLException {  info.currentIndex++;  int descriptorCount=readIntValue(info);  if (descriptorCount == 0) {    return;  }switch (info.currentItem) {case ISCConstants.isc_info_sql_select:    if (info.fieldBuilder == null) {      info.fieldBuilder=new RowDescriptorBuilder(descriptorCount,database.getDatatypeCoder());    }  processDescriptors(info,info.fieldBuilder);break;case ISCConstants.isc_info_sql_bind:if (info.parameterBuilder == null) {info.parameterBuilder=new RowDescriptorBuilder(descriptorCount,database.getDatatypeCoder());}processDescriptors(info,info.parameterBuilder);break;}}  }
class C{  public SpecialInvokeExpr newSpecialInvokeExpr(Local base,SootMethodRef method,List args){  return new JSpecialInvokeExpr(base,method,args);}  }
class C{  public void treeExpanded(TreeExpansionEvent event){  getHandler().treeExpanded(event);}  }
class C{  public BooksSubCatalog(List<Book> books){  super(books);}  }
class C{  private boolean traverse(Tree tree,NodeRef node){  boolean update=false;  int nodeNum=node.getNumber();  NodeRef parent=tree.getParent(node);  if (parent != null && updateNode[nodeNum]) {    final double branchRate=branchRateModel.getBranchRate(tree,node);    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));    if (branchTime < 0.0) {      throw new RuntimeException("Negative branch length: " + branchTime);    }    likelihoodCore.setNodeMatrixForUpdate(nodeNum);    precisionLikelihoodCore.setNodeMatrixForUpdate(nodeNum);    for (int i=0; i < categoryCount; i++) {      double branchLength=siteModel.getRateForCategory(i) * branchTime;      siteModel.getSubstitutionModel().getTransitionProbabilities(branchLength,probabilities);      likelihoodCore.setNodeMatrix(nodeNum,i,probabilities);      precisionLikelihoodCore.setNodeMatrix(nodeNum,i,probabilities);    }    update=true;  }  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    final boolean update1=traverse(tree,child1);    NodeRef child2=tree.getChild(node,1);    final boolean update2=traverse(tree,child2);    if (update1 || update2) {      final int childNum1=child1.getNumber();      final int childNum2=child2.getNumber();      likelihoodCore.setNodePartialsForUpdate(nodeNum);      precisionLikelihoodCore.setNodePartialsForUpdate(nodeNum);      likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum);      precisionLikelihoodCore.calculatePartials(childNum1,childNum2,nodeNum);      if (parent == null) {        double[] frequencies=frequencyModel.getFrequencies();        double[] partials=getRootPartials();        likelihoodCore.calculateLogLikelihoods(partials,frequencies,patternLogLikelihoods);        BigDecimal[] precisionPartials=getPrecisionRootPartials();        precisionLikelihoodCore.calculateLogLikelihoods(precisionPartials,frequencies,precisionPatternLogLikelihoods);      }      update=true;    }  }  return update;}  }
class C{  private static boolean paramsEqual(final int p1,final int p2){  return p1 == p2;}  }
class C{  public void writeTo(OutputStream os) throws IOException {  os.write(getEncoded());}  }
class C{  protected IsA_Impl(){  super();}  }
class C{  public void startMonitoring(Context context,Handler target){  mContext=context;  mCsHandler=target;  IBinder b=ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);  mNMService=INetworkManagementService.Stub.asInterface(b);  mInterfaceObserver=new InterfaceObserver(this);  sIfaceMatch=context.getResources().getString(com.android.internal.R.string.config_ethernet_iface_regex);  try {    final String[] ifaces=mNMService.listInterfaces();    for (    String iface : ifaces) {      if (iface.matches(sIfaceMatch)) {        mIface=iface;        mNMService.setInterfaceUp(iface);        InterfaceConfiguration config=mNMService.getInterfaceConfig(iface);        mLinkUp=config.hasFlag("up");        if (config != null && mHwAddr == null) {          mHwAddr=config.getHardwareAddress();          if (mHwAddr != null) {            mNetworkInfo.setExtraInfo(mHwAddr);          }        }        NetworkUtils.stopDhcp(mIface);        reconnect();        break;      }    }  } catch (  RemoteException e) {    Log.e(TAG,"Could not get list of interfaces " + e);  }  try {    mNMService.registerObserver(mInterfaceObserver);  } catch (  RemoteException e) {    Log.e(TAG,"Could not register InterfaceObserver " + e);  }}  }
class C{  public void onItemClicked(int position){  final Fragment fragment=getSupportFragmentManager().findFragmentByTag(FRAGMENT_LIST_VIEW);  AbstractDataProvider.Data data=getDataProvider().getItem(position);  if (data.isPinned()) {    data.setPinned(false);    ((DraggableSwipeableExampleFragment)fragment).notifyItemChanged(position);  }}  }
class C{  public void trace(String msg){  log(Log.VERBOSE,msg,null);}  }
class C{  @Override public final boolean incrementToken() throws java.io.IOException {  if (!input.incrementToken()) {    return false;  }  final char[] buffer=termAtt.buffer();  final int bufferLength=termAtt.length();  final String type=typeAtt.type();  if (type == APOSTROPHE_TYPE && bufferLength >= 2 && buffer[bufferLength - 2] == '\'' && (buffer[bufferLength - 1] == 's' || buffer[bufferLength - 1] == 'S')) {    termAtt.setLength(bufferLength - 2);  } else   if (type == ACRONYM_TYPE) {    int upto=0;    for (int i=0; i < bufferLength; i++) {      char c=buffer[i];      if (c != '.')       buffer[upto++]=c;    }    termAtt.setLength(upto);  }  return true;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_Timer:    return stateVector[0] == State.main_region_Timer;default :  return false;}}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  DocumentType newDocType;  Document ownerDocument;  String publicId="http://www.w3.org/DOM/Test/dom2.dtd";  String systemId="dom2.dtd";  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("_:_");  qualifiedNames.add("_:h0");  qualifiedNames.add("_:test");  qualifiedNames.add("_:_.");  qualifiedNames.add("_:a-");  qualifiedNames.add("l_:_");  qualifiedNames.add("ns:_0");  qualifiedNames.add("ns:a0");  qualifiedNames.add("ns0:test");  qualifiedNames.add("ns:EEE.");  qualifiedNames.add("ns:_-");  qualifiedNames.add("a.b:c");  qualifiedNames.add("a-b:c.j");  qualifiedNames.add("a-b:c");  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  for (int indexN10077=0; indexN10077 < qualifiedNames.size(); indexN10077++) {    qualifiedName=(String)qualifiedNames.get(indexN10077);    newDocType=domImpl.createDocumentType(qualifiedName,publicId,systemId);    assertNotNull("domimplementationcreatedocumenttype02_newDocType",newDocType);    ownerDocument=newDocType.getOwnerDocument();    assertNull("domimplementationcreatedocumenttype02_ownerDocument",ownerDocument);  }}  }
class C{  public synchronized void notifyBand(final int times,final int onTime,final int offTime,final int flashColour){  final List<BLEAction> list=new ArrayList<>();  byte[] colors=convertRgb(flashColour);  list.add(new WaitAction(150));  list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,Protocol.VIBRATION_WITHOUT_LED));  list.add(new WaitAction(300));  list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,colors));  queue(list);}  }
class C{  private DeferredResult<List<String>> fetchLocalDocumentLinks(){  Operation query=Operation.createGet(this,this.docFactoryPath);  DeferredResult<List<String>> result=this.sendWithDeferredResult(query,ServiceDocumentQueryResult.class).thenApply(null).whenComplete(null);  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static boolean copyFile(final File source,final File target){  final int BUFFER=10 * 1024;  FileInputStream inStream=null;  OutputStream outStream=null;  FileChannel inChannel=null;  FileChannel outChannel=null;  try {    inStream=new FileInputStream(source);    if (FileHelper.isWritable(target)) {      outStream=new FileOutputStream(target);      inChannel=inStream.getChannel();      outChannel=((FileOutputStream)outStream).getChannel();      inChannel.transferTo(0,inChannel.size(),outChannel);    } else {      if (Helper.isAtLeastAPI(LOLLIPOP)) {        DocumentFile targetDocument=getDocumentFile(target,false);        if (targetDocument != null) {          Context cxt=HentoidApp.getAppContext();          outStream=cxt.getContentResolver().openOutputStream(targetDocument.getUri());        }      } else {        return false;      }      if (outStream != null) {        byte[] buffer=new byte[BUFFER];        int bytesRead;        while ((bytesRead=inStream.read(buffer)) != -1) {          outStream.write(buffer,0,bytesRead);        }      }    }  } catch (  Exception e) {    LogHelper.e(TAG,e,"Error while copying file from " + source.getAbsolutePath() + " to "+ target.getAbsolutePath());    return false;  } finally {    try {      if (inStream != null) {        inStream.close();      }      if (outStream != null) {        outStream.close();      }      if (inChannel != null) {        inChannel.close();      }      if (outChannel != null) {        outChannel.close();      }    } catch (    Exception e) {    }  }  return true;}  }
class C{  public boolean isValidSimpleAssignmentTarget(){  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.411 -0500",hash_original_method="B76F89F97A3E0D25504A6F7E11289FEA",hash_generated_method="92193E589D668832E187B7EE4320092C") private int nativeGetContentLength(){  return getTaintInt();}  }
class C{  public void deleteCG(URI vplexSystemURI,URI cgUri,String cgName,String clusterName,Boolean setInactive,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    log.info(String.format("Executing workflow step deleteCG. Storage System: %s, CG Name: %s, Cluster Name: %s",vplexSystemURI,cgName,clusterName));    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexSystemURI,dbClient);    VPlexApiClient client=getVPlexAPIClient(vplexApiFactory,vplexSystem,dbClient);    log.info("Got VPlex API client for VPlex system {}",vplexSystemURI);    client.deleteConsistencyGroup(cgName);    log.info(String.format("Deleted consistency group %s",cgName));    VPlexDeleteCGRollbackData rbData=new VPlexDeleteCGRollbackData();    rbData.setVplexSystemURI(vplexSystemURI);    rbData.setCgName(cgName);    rbData.setClusterName(clusterName);    rbData.setIsDistributed(new Boolean(getIsCGDistributed(client,cgName,clusterName)));    workflowService.storeStepData(stepId,rbData);    BlockConsistencyGroup cg=getDataObject(BlockConsistencyGroup.class,cgUri,dbClient);    List<String> cgRefsToDelete=new ArrayList<String>();    StringSetMap sysCgs=cg.getSystemConsistencyGroups();    if (sysCgs != null && !sysCgs.isEmpty()) {      StringSet cgsForVplex=sysCgs.get(vplexSystemURI.toString());      if (cgsForVplex != null && !cgsForVplex.isEmpty()) {        Iterator<String> itr=cgsForVplex.iterator();        while (itr.hasNext()) {          String clusterCgName=itr.next();          if (BlockConsistencyGroupUtils.fetchCgName(clusterCgName).equals(cgName)) {            cgRefsToDelete.add(clusterCgName);          }        }      }    }    if (!cgRefsToDelete.isEmpty()) {      for (      String cgRef : cgRefsToDelete) {        log.info(String.format("Removing system consistency group %s from storage system %s",cgRef,vplexSystemURI.toString()));        cg.removeSystemConsistencyGroup(vplexSystemURI.toString(),cgRef);      }      dbClient.updateObject(cg);    }    if ((setInactive) && (!BlockConsistencyGroupUtils.referencesVPlexCGs(cg,dbClient))) {      dbClient.markForDeletion(cg);      log.info(String.format("Marking consistency group %s for deletion",cg.getId()));    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    log.error("Exception deleting consistency group: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    log.error("Exception deleting consistency group: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.DELETE_CONSISTENCY_GROUP.getName();    ServiceError serviceError=VPlexApiException.errors.deleteCGFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public static int isNegativeConstantTime(final int b){  return (b >> 8) & 1;}  }
class C{  public void show(){  comboBox.firePopupMenuWillBecomeVisible();  setListSelection(comboBox.getSelectedIndex());  Point location=getPopupLocation();  show(comboBox,location.x,location.y);}  }
class C{  public static void showInfoNotification(Project project,String text){  showNotification(project,MessageType.INFO,text);}  }
class C{  public void selected(SelectEvent event){  if (event == null) {    String msg=Logging.getMessage("nullValue.EventIsNull");    Logging.logger().log(java.util.logging.Level.FINE,msg);    throw new IllegalArgumentException(msg);  }  this.currentEvent=event;  if (event.getEventAction().equals(SelectEvent.DRAG_END)) {    this.active=false;    this.activeOperation=NONE;    this.previousPosition=null;    ((Component)this.getWwd()).setCursor(null);    this.removeShadowShape();    this.updateAnnotation(null);  } else   if (event.getEventAction().equals(SelectEvent.ROLLOVER)) {    if (!(this.getWwd() instanceof Component))     return;    Cursor cursor=null;    if (this.activeOperation == MOVING)     cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR); else     if (this.getActiveOperation() == SIZING)     cursor=Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR); else     if (event.getTopObject() != null && event.getTopObject() == this.getShape())     cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR); else     if (event.getTopObject() != null && event.getTopObject() instanceof Marker)     cursor=Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);    ((Component)this.getWwd()).setCursor(cursor);    if (this.getActiveOperation() == MOVING && event.getTopObject() == this.getShape())     this.updateShapeAnnotation(); else     if (this.getActiveOperation() == SIZING)     this.updateAnnotation(this.getCurrentSizingMarker()); else     if (event.getTopObject() != null && event.getTopObject() == this.getShape())     this.updateShapeAnnotation(); else     if (event.getTopObject() != null && event.getTopObject() instanceof ControlPointMarker)     this.updateAnnotation((ControlPointMarker)event.getTopObject()); else     this.updateAnnotation(null);  } else   if (event.getEventAction().equals(SelectEvent.LEFT_PRESS)) {    this.active=true;    PickedObjectList objectsUnderCursor=this.getWwd().getObjectsAtCurrentPosition();    if (objectsUnderCursor != null) {      PickedObject terrainObject=objectsUnderCursor.getTerrainObject();      if (terrainObject != null)       this.previousPosition=terrainObject.getPosition();    }  } else   if (event.getEventAction().equals(SelectEvent.LEFT_CLICK)) {    Object topObject=event.getTopObject();    if (topObject == null)     return;    if (event.getTopPickedObject().getParentLayer() == this.getControlPointLayer()) {      this.reshapeShape((ControlPointMarker)topObject);      this.updateControlPoints();      this.updateAnnotation(this.getCurrentSizingMarker());      event.consume();    } else     if ((event.getTopObject() == this.getShape()) && (this.getCurrentEvent().getMouseEvent().getModifiersEx() & MouseEvent.SHIFT_DOWN_MASK) != 0) {      this.reshapeShape(null);      this.updateControlPoints();      event.consume();    }  } else   if (event.getEventAction().equals(SelectEvent.DRAG)) {    if (!this.isActive())     return;    DragSelectEvent dragEvent=(DragSelectEvent)event;    Object topObject=dragEvent.getTopObject();    if (topObject == null)     return;    if (this.getActiveOperation() == NONE)     this.makeShadowShape();    if (topObject == this.getShape() || this.getActiveOperation() == MOVING) {      this.activeOperation=MOVING;      this.dragWholeShape(dragEvent);      this.updateControlPoints();      this.updateShapeAnnotation();      event.consume();    } else     if (dragEvent.getTopPickedObject().getParentLayer() == this.getControlPointLayer() || this.getActiveOperation() == SIZING) {      this.activeOperation=SIZING;      this.reshapeShape((ControlPointMarker)topObject);      this.updateControlPoints();      this.updateAnnotation(this.getCurrentSizingMarker());      event.consume();    }    this.getWwd().redraw();  }}  }
class C{  public boolean isReady(){  return isReady;}  }
class C{  private synchronized void notifyListeners(boolean status,boolean log,boolean finished,String message){  if (m_listeners.size() > 0) {    for (int i=0; i < m_listeners.size(); i++) {      RemoteExperimentListener r=(m_listeners.get(i));      r.remoteExperimentStatus(new RemoteExperimentEvent(status,log,finished,message));    }  } else {    System.err.println(message);  }}  }
class C{  public boolean applyOptions() throws IOException {  final boolean skip=!CHECK_BOX.isSelected();  if (skip) {    if (DialogOption.parseInt(skipWarning) != DialogOption.YES)     QuestionsHandler.SKIP_FIRST_DOWNLOAD_WARNING.setValue(DialogOption.YES.toInt());  } else {    if (DialogOption.parseInt(skipWarning) == DialogOption.YES)     QuestionsHandler.SKIP_FIRST_DOWNLOAD_WARNING.setValue(0);  }  return false;}  }
class C{  public void testBadlyStructuredDefinitionsFile() throws Exception {  DropOnValueFilter dovf=new DropOnValueFilter();  dovf.setTungstenSchema("tungsten_foo");  dovf.setDefinitionsFile(definitionsFile);  try {    PrintWriter out=new PrintWriter(new FileWriter(definitionsFile));    out.println("[");    out.println("{");    out.println("  \"schema\": \"vip\",");    out.println("  \"table\": \"clients\",");    out.println("  \"columns\": [");    out.println("    \"personal_code\",");    out.println("    \"birth_date\",");    out.println("    \"email\"");    out.println("    ]");    out.println("}");    out.println("]");    out.close();    filterHelper.setContext(replicatorContext);    filterHelper.setFilter(dovf);    filterHelper.done();    fail("Exception not thrown during preparation though definitions file is structured incorrectly");  } catch (  ReplicatorException e) {    logger.info("Expected error received: " + e);  }}  }
class C{  private RandomUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  static void extract(String s,int start,ExtractFloatResult result){  int currentIndex=start;  boolean foundSeparator=false;  result.mEndWithNegOrDot=false;  boolean secondDot=false;  boolean isExponential=false;  for (; currentIndex < s.length(); currentIndex++) {    boolean isPrevExponential=isExponential;    isExponential=false;    char currentChar=s.charAt(currentIndex);switch (currentChar) {case ' ':case ',':      foundSeparator=true;    break;case '-':  if (currentIndex != start && !isPrevExponential) {    foundSeparator=true;    result.mEndWithNegOrDot=true;  }break;case '.':if (!secondDot) {secondDot=true;} else {foundSeparator=true;result.mEndWithNegOrDot=true;}break;case 'e':case 'E':isExponential=true;break;}if (foundSeparator) {break;}}result.mEndPosition=currentIndex;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isValid(String value){  if (value == null) {    return false;  }  for (int i=0; i < patterns.length; i++) {    if (patterns[i].matcher(value).matches()) {      return true;    }  }  return false;}  }
class C{  public static <T,E>AtomFeedParser<T,E> create(HttpResponse response,XmlNamespaceDictionary namespaceDictionary,Class<T> feedClass,Class<E> entryClass) throws IOException, XmlPullParserException {  InputStream content=response.getContent();  try {    Atom.checkContentType(response.getContentType());    XmlPullParser parser=Xml.createParser();    parser.setInput(content,null);    AtomFeedParser<T,E> result=new AtomFeedParser<T,E>(namespaceDictionary,parser,content,feedClass,entryClass);    content=null;    return result;  }  finally {    if (content != null) {      content.close();    }  }}  }
class C{  public StringBuffer outputKeyCreation(boolean kekOnly,String kekTest){  return this.outputKeyCreation(0,kekOnly,kekTest);}  }
class C{  public GameEventEntryIterator(final ResultSet resultSet){  super(resultSet);}  }
class C{  protected RTextAreaUI createRTextAreaUI(){  return new RSyntaxTextAreaUI(this);}  }
class C{  public UnimplementedError(java.lang.String detailMessage){  super(detailMessage + ": not implemented");}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  public int size(String key){  List<Serializable> entries=data.get(key);  if (entries == null) {    throw new IllegalArgumentException(MessageFormat.format(INVALID_KEY,key));  } else {    return entries.size();  }}  }
class C{  public final String join(@Nullable Object first,@Nullable Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  public void add(Throwable cause){  causes.add(cause);}  }
class C{  private boolean addAllMechsFromProvider(Provider p){  String prop;  boolean retVal=false;  Enumeration<Object> props=p.keys();  while (props.hasMoreElements()) {    prop=(String)props.nextElement();    if (isMechFactoryProperty(prop)) {      try {        Oid mechOid=getOidFromMechFactoryProperty(prop);        mechs.add(mechOid);        retVal=true;      } catch (      GSSException e) {        GSSUtil.debug("Ignore the invalid property " + prop + " from provider "+ p.getName());      }    }  }  return retVal;}  }
class C{  private void writeDocument(File outputDir,Document xmlDoc,Transformer transformer,String name,String currentDateString) throws TransformerException, IOException {  DOMSource source=new DOMSource(xmlDoc);  File outputFile=new File(outputDir,"workflow.xml");  StreamResult result=new StreamResult(outputFile);  transformer.transform(source,result);  BufferedReader reader=new BufferedReader(new FileReader(outputFile));  List<String> lines=new ArrayList<>();  String line;  while ((line=reader.readLine()) != null) {    lines.add(line);  }  reader.close();  BufferedWriter writer=new BufferedWriter(new FileWriter(outputFile));  for (int i=0; i < lines.size(); i++) {    line=lines.get(i);    if (i == 1) {      writer.write(String.format("<!-- %s workflow autogenerated by Arbiter on %s -->\n",name,currentDateString));    }    writer.write(line + "\n");  }  writer.close();}  }
class C{  public void distributedJoins(boolean distributedJoins){  this.distributedJoins=distributedJoins;}  }
class C{  private static int checkFormalTypeParameter(final String signature,int pos){  pos=checkIdentifier(signature,pos);  pos=checkChar(':',signature,pos);  if ("L[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkFieldTypeSignature(signature,pos);  }  while (getChar(signature,pos) == ':') {    pos=checkFieldTypeSignature(signature,pos + 1);  }  return pos;}  }
class C{  public static <R,C,V>Cell<R,C,V> immutableCell(@Nullable R rowKey,@Nullable C columnKey,@Nullable V value){  return new ImmutableCell<R,C,V>(rowKey,columnKey,value);}  }
class C{  public void verifyTransactions(final int height,final EnumSet<VerifyFlag> flags) throws VerificationException {  if (transactions.isEmpty())   throw new VerificationException("Block had no transactions");  if (this.getOptimalEncodingMessageSize() > MAX_BLOCK_SIZE)   throw new VerificationException("Block larger than MAX_BLOCK_SIZE");  checkTransactions(height,flags);  checkMerkleRoot();  checkSigOps();  for (  Transaction transaction : transactions)   transaction.verify();}  }
class C{  public String toString(){  String result="DN Conditional Estimator. " + m_Estimators.length + " sub-estimators:\n";  for (int i=0; i < m_Estimators.length; i++) {    result+="Sub-estimator " + i + ": "+ m_Estimators[i];  }  result+="Weights of each estimator given by " + m_Weights;  return result;}  }
class C{  @Override public int hashCode(){  return hashcode;}  }
class C{  public static void learn(final StringBuilder word){  if (word == null) {    return;  }  if (word.length() < commonWordsMinLength) {    return;  }  commonWords.inc(word);  if (!(commonWords.sizeSmaller(commonWordsMaxSize))) {    commonWords.shrinkToMaxSize(commonWordsMaxSize / 2);  }}  }
class C{  public KerberosKey(KerberosPrincipal principal,char[] password,String algorithm){  this.principal=principal;  key=new KeyImpl(principal,password,algorithm);}  }
class C{  private CDatabaseLoader(){}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected void delay(long delayMs,String desc){  try {    Thread.sleep(delayMs);  } catch (  InterruptedException intExc) {    LOG.warn("sleep interrupted: " + desc,intExc);  }}  }
class C{  public Observable<Beacon> observe(){  if (!isBleSupported()) {    return Observable.empty();  }  if (isAtLeastAndroidLollipop()) {    scanStrategy=new LollipopScanStrategy(bluetoothAdapter);  } else {    scanStrategy=new PreLollipopScanStrategy(bluetoothAdapter);  }  return scanStrategy.observe();}  }
class C{  public static TickUnitSource createIntegerTickUnits(Locale locale){  NumberFormat numberFormat=NumberFormat.getNumberInstance(locale);  return new NumberTickUnitSource(true,numberFormat);}  }
class C{  private void releaseConnection(Connection conn){  if (conn != null)   try {    conn.close();  } catch (  SQLException e) {    logger.warn("Unable to close database connection: " + url);  }}  }
class C{  public void write(int c) throws IOException {  if (_output == null)   throw new IOException("Writer closed");  _output.append((char)c);}  }
class C{  public static ServiceAccountCredentials fromPkcs8(String clientId,String clientEmail,String privateKeyPkcs8,String privateKeyId,Collection<String> scopes) throws IOException {  return fromPkcs8(clientId,clientEmail,privateKeyPkcs8,privateKeyId,scopes,null,null);}  }
class C{  public Key select(int k){  if (k < 0 || k >= n)   return null;  return keys[k];}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  ipBox.mouseClicked(par1,par2,par3);  maxThreadsBox.mouseClicked(par1,par2,par3);}  }
class C{  public void end(){  Operation op=currOp.get();  assert op != null : "must be called after begin in the same thread";  if (op.reentries != 0) {    assert op.reentries > 0 : op.reentries;    op.reentries--;    return;  }  currOp.remove();  op.allowDeallocate();  op=tail.get();  int state;  while ((state=op.state) != Operation.STATE_ACTIVE) {    if (state == Operation.STATE_MAY_DEALLOCATE)     op.finish();    Operation next=op.next;    if (next == null)     break;    op=next;  }  for (; ; ) {    Operation t=tail.get();    if (op.id <= t.id || tail.compareAndSet(t,op))     break;  }}  }
class C{  protected boolean isOutlier(Instance inst,int index){  boolean result;  double value;  value=inst.value(m_AttributeIndices[index]);  result=((m_UpperOutlier[index] < value) && (value <= m_UpperExtremeValue[index])) || ((m_LowerExtremeValue[index] <= value) && (value < m_LowerOutlier[index]));  return result;}  }
class C{  public SettingsFactory(File settingsFile){  this(settingsFile,"");}  }
class C{  public void restart(){  thread.resume();}  }
class C{  private void initAndCheckEnvironment() throws Exception {  Class<?> ibmOperatingSystemMxBeanClass=Class.forName(IBM_OPERATING_SYSTEM_MX_BEAN_CLASS);  if (null != ibmOperatingSystemMxBeanClass) {    Method getInstanceMethod=ibmOperatingSystemMxBeanClass.getDeclaredMethod("getInstance");    getInstanceMethod.setAccessible(true);    if (null != getInstanceMethod) {      ibmOperatingSystemMxBeanInstance=getInstanceMethod.invoke(null);    }    if (null != ibmOperatingSystemMxBeanInstance) {      committedVirtualMemorySizeMethod=getMethod(ibmOperatingSystemMxBeanClass,"getProcessVirtualMemorySize");      Object result=getValueFromMethodInvocation(ibmOperatingSystemMxBeanInstance,committedVirtualMemorySizeMethod);      if (!(result instanceof Number)) {        throw new Exception("Result of getProcessVirtualMemorySize() method invocation is not a number. Result was: " + result);      }      freePhysicalMemorySizeMethod=getMethod(ibmOperatingSystemMxBeanClass,"getFreePhysicalMemorySize");      result=getValueFromMethodInvocation(ibmOperatingSystemMxBeanInstance,freePhysicalMemorySizeMethod);      if (!(result instanceof Number)) {        throw new Exception("Result of getFreePhysicalMemorySize() method invocation is not a number. Result was: " + result);      }      processCpuTimeMethod=getMethod(ibmOperatingSystemMxBeanClass,"getProcessCpuTime");      result=getValueFromMethodInvocation(ibmOperatingSystemMxBeanInstance,processCpuTimeMethod);      if (!(result instanceof Number)) {        throw new Exception("Result of getProcessCpuTime() method invocation is not a number. Result was: " + result);      }      totalPhysicalMemorySizeMethod=getMethod(ibmOperatingSystemMxBeanClass,"getTotalPhysicalMemory");      result=getValueFromMethodInvocation(ibmOperatingSystemMxBeanInstance,totalPhysicalMemorySizeMethod);      if (!(result instanceof Number)) {        throw new Exception("Result of getTotalPhysicalMemory() method invocation is not a number. Result was: " + result);      }    }  }}  }
class C{  protected void executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto){  boolean cleanUpDestinationS3BucketOnFailure=false;  S3FileTransferRequestParamsDto destinationS3FileTransferRequestParamsDto=null;  try {    S3FileTransferRequestParamsDto sourceS3FileTransferRequestParamsDto=storageHelper.getS3FileTransferRequestParamsDto();    sourceS3FileTransferRequestParamsDto.setS3BucketName(storagePolicyTransitionParamsDto.getSourceBucketName());    sourceS3FileTransferRequestParamsDto.setS3Endpoint(configurationHelper.getProperty(ConfigurationValue.S3_ENDPOINT));    sourceS3FileTransferRequestParamsDto.setS3KeyPrefix(StringUtils.appendIfMissing(storagePolicyTransitionParamsDto.getSourceS3KeyPrefix(),"/"));    List<S3ObjectSummary> actualSourceS3Files=s3Service.listDirectory(sourceS3FileTransferRequestParamsDto,true);    storageFileHelper.validateSourceS3Files(storagePolicyTransitionParamsDto.getSourceStorageFiles(),actualSourceS3Files,storagePolicyTransitionParamsDto.getSourceStorageName(),storagePolicyTransitionParamsDto.getBusinessObjectDataKey());    destinationS3FileTransferRequestParamsDto=storageHelper.getS3FileTransferRequestParamsDto();    destinationS3FileTransferRequestParamsDto.setS3BucketName(storagePolicyTransitionParamsDto.getDestinationBucketName());    destinationS3FileTransferRequestParamsDto.setS3Endpoint(configurationHelper.getProperty(ConfigurationValue.S3_ENDPOINT));    destinationS3FileTransferRequestParamsDto.setS3KeyPrefix(String.format("%s/%s",storagePolicyTransitionParamsDto.getDestinationS3KeyBasePrefix(),StringUtils.appendIfMissing(storagePolicyTransitionParamsDto.getSourceS3KeyPrefix(),"/")));    if (s3Service.listDirectory(destinationS3FileTransferRequestParamsDto).isEmpty()) {      cleanUpDestinationS3BucketOnFailure=true;    } else {      throw new IllegalStateException(String.format("The destination S3 key prefix is not empty. S3 bucket name: {%s}, S3 key prefix: {%s}",destinationS3FileTransferRequestParamsDto.getS3BucketName(),destinationS3FileTransferRequestParamsDto.getS3KeyPrefix()));    }    S3FileCopyRequestParamsDto s3FileCopyRequestParamsDto=storageHelper.getS3FileCopyRequestParamsDto();    s3FileCopyRequestParamsDto.setSourceBucketName(storagePolicyTransitionParamsDto.getSourceBucketName());    s3FileCopyRequestParamsDto.setTargetBucketName(storagePolicyTransitionParamsDto.getDestinationBucketName());    List<StorageFile> expectedDestinationS3Files=new ArrayList<>();    for (    S3ObjectSummary sourceS3File : actualSourceS3Files) {      String destinationS3FilePath=String.format("%s/%s",storagePolicyTransitionParamsDto.getDestinationS3KeyBasePrefix(),sourceS3File.getKey());      expectedDestinationS3Files.add(new StorageFile(destinationS3FilePath,sourceS3File.getSize(),null));      s3FileCopyRequestParamsDto.setSourceObjectKey(sourceS3File.getKey());      s3FileCopyRequestParamsDto.setTargetObjectKey(destinationS3FilePath);      try {        s3Dao.copyFile(s3FileCopyRequestParamsDto);      } catch (      Exception e) {        throw new IllegalStateException(String.format("Failed to copy S3 file. Source storage: {%s}, source S3 bucket name: {%s}, source S3 object key: {%s}, " + "target storage: {%s}, target S3 bucket name: {%s}, target S3 object key: {%s}, " + "business object data: {%s}",storagePolicyTransitionParamsDto.getSourceStorageName(),s3FileCopyRequestParamsDto.getSourceBucketName(),s3FileCopyRequestParamsDto.getSourceObjectKey(),storagePolicyTransitionParamsDto.getDestinationStorageName(),s3FileCopyRequestParamsDto.getTargetBucketName(),s3FileCopyRequestParamsDto.getTargetObjectKey(),businessObjectDataHelper.businessObjectDataKeyToString(storagePolicyTransitionParamsDto.getBusinessObjectDataKey())),e);      }    }    List<S3ObjectSummary> actualDestinationS3Files=s3Service.listDirectory(destinationS3FileTransferRequestParamsDto,true);    storageFileHelper.validateCopiedS3Files(expectedDestinationS3Files,actualDestinationS3Files,storagePolicyTransitionParamsDto.getDestinationStorageName(),storagePolicyTransitionParamsDto.getBusinessObjectDataKey());    if (LOGGER.isInfoEnabled()) {      LOGGER.info("Copied S3 files to the destination S3 bucket. s3KeyCount={} s3BucketName=\"{}\"",actualDestinationS3Files.size(),destinationS3FileTransferRequestParamsDto.getS3BucketName());      for (      S3ObjectSummary s3File : actualDestinationS3Files) {        LOGGER.info("s3Key=\"{}\"",s3File.getKey());      }    }  } catch (  RuntimeException e) {    if (cleanUpDestinationS3BucketOnFailure) {      LOGGER.info("Rolling back the S3 copy operation by deleting all keys matching the S3 key prefix... s3KeyPrefix=\"{}\" s3BucketName=\"{}\"",destinationS3FileTransferRequestParamsDto.getS3KeyPrefix(),destinationS3FileTransferRequestParamsDto.getS3BucketName());      s3Service.deleteDirectoryIgnoreException(destinationS3FileTransferRequestParamsDto);    }    throw e;  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.pictureIV=this.findView(R.id.picture_iv);  ViewCompat.setTransitionName(this.pictureIV,SHARED_ELEMENT_NAME);}  }
class C{  private Object[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  public static void flush(){  try {    getPrefs().flush();  } catch (  BackingStoreException e) {    throw new IllegalStateException("Failed to persist",e);  }}  }
class C{  public boolean forEachKey(TIntProcedure procedure){  return forEach(procedure);}  }
class C{  private void correctErrors(int[] codewords,int[] erasures,int numECCodewords) throws ChecksumException {  if (erasures.length > numECCodewords / 2 + MAX_ERRORS || numECCodewords < 0 || numECCodewords > MAX_EC_CODEWORDS) {    throw ChecksumException.getChecksumInstance();  }  errorCorrection.decode(codewords,numECCodewords,erasures);}  }
class C{  private Request makeRequest(DataSpec dataSpec){  long position=dataSpec.position;  long length=dataSpec.length;  boolean allowGzip=(dataSpec.flags & DataSpec.FLAG_ALLOW_GZIP) != 0;  HttpUrl url=HttpUrl.parse(dataSpec.uri.toString());  Request.Builder builder=new Request.Builder().url(url);  if (cacheControl != null) {    builder.cacheControl(cacheControl);  }synchronized (requestProperties) {    for (    Map.Entry<String,String> property : requestProperties.entrySet()) {      builder.addHeader(property.getKey(),property.getValue());    }  }  if (!(position == 0 && length == C.LENGTH_UNBOUNDED)) {    String rangeRequest="bytes=" + position + "-";    if (length != C.LENGTH_UNBOUNDED) {      rangeRequest+=(position + length - 1);    }    builder.addHeader("Range",rangeRequest);  }  builder.addHeader("User-Agent",userAgent);  if (!allowGzip) {    builder.addHeader("Accept-Encoding","identity");  }  if (dataSpec.postBody != null) {    builder.post(RequestBody.create(null,dataSpec.postBody));  }  return builder.build();}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public <U extends T>OngoingMatchingR0<T,U,R> when(DecomposableMatchBuilder0<U> decomposableMatchBuilder){  return new OngoingMatchingR0<>(this,decomposableMatchBuilder.build());}  }
class C{  private void validate() throws Exception {  for (  String name : write) {    MethodPart part=write.get(name);    if (part != null) {      validate(part,name);    }  }}  }
class C{  protected void add(long bytesIn,long bytesOut){  totalBytesIn.addAndGet(bytesIn);  totalBytesOut.addAndGet(bytesOut);}  }
class C{  private static void decodeC40Segment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < C40_BASIC_SET_CHARS.length) {          char c40char=C40_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(c40char + 128));            upperShift=false;          } else {            result.append(c40char);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (upperShift) {result.append((char)(cValue + 224));upperShift=false;} else {result.append((char)(cValue + 96));}shift=0;break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  private BackupStatus performIncremental(){  return incremental(Host.getHost(0).getVM(1));}  }
class C{  public void post(CoapHandler handler,byte[] payload,int format){  asynchronous(format(newPost().setURI(uri).setPayload(payload),format),handler);}  }
class C{  public static JPopupMenu leftShift(JPopupMenu self,Action action){  self.add(action);  return self;}  }
class C{  private void prepareADB(){  try {    startADB();    portForwarding();    Thread.sleep(1500);  } catch (  InterruptedException ex1) {  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  protected boolean loadEmoticons(boolean useFileEvenIfExpired){  String fromFile=loadEmoticonsFromFile(useFileEvenIfExpired);  if (fromFile != null) {    Set<Emoticon> parsed=parseEmoticons(fromFile);    if (parsed == null) {      return false;    }    listener.receivedEmoticons(parsed);    LOGGER.info("Using emoticons list from file." + (useFileEvenIfExpired ? " (forced)" : ""));    return true;  }  return false;}  }
class C{  public static void close(Iterator<?> iter){  ObjectIterator.close(iter);}  }
class C{  @Override public final void preTearDown() throws Exception {  client1.invoke(null);  server1.invoke(null);  server2.invoke(null);}  }
class C{  @Override public void updateBlob(int columnIndex,InputStream x) throws SQLException {  updateBlob(columnIndex,x,-1);}  }
class C{  public void chainSwing(MowzieModelRenderer[] boxes,float speed,float degree,double rootOffset,float f,float f1){  int numberOfSegments=boxes.length;  float offset=(float)((rootOffset * Math.PI) / (2 * numberOfSegments));  for (int i=0; i < numberOfSegments; i++)   boxes[i].rotateAngleY+=MathHelper.cos(f * speed + offset * i) * f1 * degree;}  }
class C{  public void processEvent(Monitor mon){  double value=mon.getLastValue();  getFrequencyDist(value).add(value);}  }
class C{  public Node importNode(Node importedNode,boolean deep) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  @Override protected void clearCaches(){  if (Boolean.FALSE.equals(myIsCollected)) {    myIsCollected=null;  }}  }
class C{  private static PackingPlan doScalingTest(TopologyAPI.Topology topology,Map<String,Integer> componentChanges,long boltRam,int boltParallelism,long spoutRam,int spoutParallelism,int numContainersBeforeRepack,int totalInstancesExpected){  PackingPlan packingPlan=getFirstFitDecreasingPackingPlan(topology);  Assert.assertEquals(numContainersBeforeRepack,packingPlan.getContainers().size());  Assert.assertEquals(totalInstancesExpected,(int)packingPlan.getInstanceCount());  AssertPacking.assertContainers(packingPlan.getContainers(),BOLT_NAME,SPOUT_NAME,boltRam,spoutRam,null);  AssertPacking.assertNumInstances(packingPlan.getContainers(),BOLT_NAME,boltParallelism);  AssertPacking.assertNumInstances(packingPlan.getContainers(),SPOUT_NAME,spoutParallelism);  PackingPlan newPackingPlan=getFirstFitDecreasingPackingPlanRepack(topology,packingPlan,componentChanges);  AssertPacking.assertContainerRam(newPackingPlan.getContainers(),packingPlan.getMaxContainerResources().getRam());  return newPackingPlan;}  }
class C{  private boolean passesLucasLehmer(){  BigInteger thisPlusOne=this.add(ONE);  int d=5;  while (jacobiSymbol(d,this) != -1) {    d=(d < 0) ? Math.abs(d) + 2 : -(d + 2);  }  BigInteger u=lucasLehmerSequence(d,thisPlusOne,this);  return u.mod(this).equals(ZERO);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.335 -0500",hash_original_method="32D22A17AA82ABC9781B01DDEE5FEF29",hash_generated_method="30C4EAA09D022FFC63275F8841A9834B") public static boolean isUnicodeIdentifierStart(char c){  return isUnicodeIdentifierStartImpl(c);}  }
class C{  @VisibleForTesting static DeployOutput parseDeployOutput(String jsonOutput) throws JsonParseException {  Type deployOutputType=new TypeToken<DeployOutput>(){  }.getType();  DeployOutput deployOutput=new Gson().fromJson(jsonOutput,deployOutputType);  if (deployOutput == null || deployOutput.versions == null || deployOutput.versions.size() != 1) {    throw new JsonParseException("Cannot get app version: unexpected gcloud JSON output format");  }  return deployOutput;}  }
class C{  public static OpenIDToken createFromXmlToken(String xmlToken) throws InfocardException {  if (xmlToken == null)   throw new InfocardException("Error processing xmlToken: null value");  if (DEBUG)   _log.debug("Processing xmlToken: " + xmlToken);  try {    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();    documentBuilderFactory.setNamespaceAware(true);    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();    Document document=documentBuilder.parse(new ByteArrayInputStream(xmlToken.getBytes("utf-8")));    String keyValueForm;    try {      keyValueForm=document.getElementsByTagNameNS(Message.OPENID2_NS,"OpenIDToken").item(0).getFirstChild().getNodeValue();    } catch (    Exception e) {      throw new InfocardException("Error extracting OpenID message from the xmlToken",e);    }    Message message=Message.createMessage(ParameterList.createFromKeyValueForm(keyValueForm));    return new OpenIDToken(message);  } catch (  ParserConfigurationException e) {    throw new InfocardException("Parser configuration error",e);  }catch (  SAXException e) {    throw new InfocardException("Error parsing XML token document",e);  }catch (  IOException e) {    throw new InfocardException("Error reading xmlToken document",e);  }catch (  OpenIDException e) {    throw new InfocardException("Error building OpenID message from xmlToken",e);  }}  }
class C{  public void put(String fieldName,long v){  _put(fieldName,numberNode(v));}  }
class C{  @Override public String toString(){  String str=super.toString();  if (!evidence.isEmpty()) {    str+="[evidence=" + evidence.toString() + "]";  }  return str;}  }
class C{  public String flatten(){  StringBuilder builder=new StringBuilder();  flatten(builder,object);  return builder.toString();}  }
class C{  private static String deCamelCaseify(String identifier){  StringBuffer out=new StringBuffer();  for (int i=0; i < identifier.length(); i++) {    char currentChar=identifier.charAt(i);    if (i == 0) {      out.append(Character.toLowerCase(currentChar));    } else     if (Character.isUpperCase(currentChar)) {      out.append('_').append(Character.toLowerCase(currentChar));    } else {      out.append(currentChar);    }  }  return out.toString();}  }
class C{  private void resetMainPanel(){  removeAll();  revalidate();  init(runningAsJConsolePlugin,runningAsVisualVMPlugin);  revalidate();  getMainMenu().getLongMenuItem().setEnabled(false);  getMainMenu().getCloseMenuItem().setEnabled(false);  getMainMenu().getSaveSessionMenuItem().setEnabled(false);  getMainMenu().getCloseToolBarButton().setEnabled(false);  getMainMenu().getExpandButton().setEnabled(false);  getMainMenu().getCollapseButton().setEnabled(false);  getMainMenu().getFindLRThreadsToolBarButton().setEnabled(false);  getMainMenu().getCloseAllMenuItem().setEnabled(false);  getMainMenu().getExpandAllMenuItem().setEnabled(false);  getMainMenu().getCollapseAllMenuItem().setEnabled(false);}  }
class C{  public void dispose(){  this.domTreeManager.removeGroupManager(this.domGroupManager);}  }
class C{  public static void line(double x0,double y0,double x1,double y1){  offscreen.draw(new Line2D.Double(scaleX(x0),scaleY(y0),scaleX(x1),scaleY(y1)));  draw();}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  private void attemptLogin(){  mUsernameView.setError(null);  String username=mUsernameView.getText().toString().trim();  if (TextUtils.isEmpty(username)) {    mUsernameView.setError(getString(R.string.error_field_required));    mUsernameView.requestFocus();    return;  }  mUsername=username;  mSocket.emit("add user",username);}  }
class C{  public void bind_app(InstalledApp app,Context ctx){  _set_name(app);  _set_version(app,ctx);  _set_date(app,ctx);  _set_icon(app,ctx);  _set_action_icon(app,ctx);  _package_name=app.get_package_name();}  }
class C{  public long position(final byte[] pattern,final long start) throws SQLException {  if (start < 1) {    throw ExceptionMapper.getSqlException("Start should be > 0, first position is 1.");  }  if (start > actualSize) {    throw ExceptionMapper.getSqlException("Start should be <= " + actualSize);  }  final long actualStart=start - 1;  for (int i=(int)actualStart; i < actualSize; i++) {    if (blobContent[i] == pattern[0]) {      boolean isEqual=true;      for (int j=1; j < pattern.length; j++) {        if (i + j >= actualSize) {          return -1;        }        if (blobContent[i + j] != pattern[j]) {          isEqual=false;        }      }      if (isEqual) {        return i + 1;      }    }  }  return -1;}  }
class C{  @Override public Object firstValue(final IScope scope) throws GamaRuntimeException {  return key;}  }
class C{  protected void applyFilter(SiteNode node){  if (filter != null) {    boolean filtered=this.setFilter(filter,node);    SiteNode parent=node.getParent();    if (parent != null && !filtered && parent.isFiltered()) {      this.clearParentFilter(parent);    }  } else {    node.setFiltered(false);  }}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public GVTACIImpl(){  simpleString="";  buildAttributeTables();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void calculateTypesToConsider(){  for (  IAllocNode node : RCFG.v().getRecOrArgsForAPICalls()) {    if (!(node.getType() instanceof RefType))     continue;    SootClass clz=((RefType)node.getType()).getSootClass();    typesToConsider.add(node.getType());    for (    SootClass parent : SootUtils.getParents(clz)) {      typesToConsider.add(RefType.v(parent));    }  }}  }
class C{  private List<RecipeImpl> loadRecipes(String recipesPath) throws ServerException {  try (InputStream is=getResource(recipesPath)){    return firstNonNull(GSON.fromJson(new InputStreamReader(is),new TypeToken<List<RecipeImpl>>(){    }.getType()),emptyList());  } catch (  IOException|JsonIOException|JsonSyntaxException e) {    throw new ServerException("Failed to get recipes from specified path " + recipesPath,e);  }}  }
class C{  public void formExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  setInTemporalSession(request,PrestamosConstants.CHECKFONDOYSIGNATURA,new Boolean(true));  DetallePrestamoForm detallePrestamoForm=(DetallePrestamoForm)form;  detallePrestamoForm.reset(mappings,request);  removeInTemporalSession(request,PrestamosConstants.LISTADO_BUSQUEDA_UDOCS);  request.removeAttribute(PrestamosConstants.LISTADO_BUSQUEDA_UDOCS);  setReturnActionFordward(request,mappings.findForward("load_page"));}  }
class C{  private void initToolbar(){  Toolbar toolbar=(Toolbar)findViewById(R.id.activity_settings_toolbar);  toolbar.setTitle(getString(R.string.action_settings));  toolbar.setNavigationIcon(R.drawable.ic_toolbar_back);  toolbar.setNavigationOnClickListener(this);}  }
class C{  public ByteChunks(final long length){  this(length,CHUNK_BITS);}  }
class C{  public NCExplosion(World world,Entity exploder,double x,double y,double z,float explosionSize){  super(world,exploder,x,y,z,explosionSize);  this.worldObj=world;}  }
class C{  public void abort(){  try {    if (writer != null)     jobConf.getOutputCommitter().abortTask(new TaskAttemptContextImpl(jobConf,attempt));  } catch (  IOException ignore) {  }}  }
class C{  public LabeledOMSpline(int[] xypoints){  super(xypoints);}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  return m_view.viewToModel(x,y,a,bias);}  }
class C{  public static void prefetchData(List<Subscription> subscription,LocalizerFacade facade){  List<Long> objectKeys=new ArrayList<Long>();  for (  Subscription sub : subscription) {    objectKeys.add(Long.valueOf(sub.getKey()));    TechnicalProduct techProd=sub.getProduct().getTechnicalProduct();    objectKeys.add(Long.valueOf(techProd.getKey()));    for (    TechnicalProductOperation opperation : techProd.getTechnicalProductOperations()) {      objectKeys.add(Long.valueOf(opperation.getKey()));    }  }  facade.prefetch(objectKeys,Arrays.asList(new LocalizedObjectTypes[]{LocalizedObjectTypes.TECHNICAL_PRODUCT_OPERATION_NAME,LocalizedObjectTypes.TECHNICAL_PRODUCT_OPERATION_DESCRIPTION,LocalizedObjectTypes.SUBSCRIPTION_PROVISIONING_PROGRESS,LocalizedObjectTypes.TEC_PRODUCT_LOGIN_ACCESS_DESC}));}  }
class C{  OptionsPane createOptionsPane(OptionsTreeNode node){  Class<? extends AbstractPaneItem>[] clazzes=node.getClasses();  if (clazzes != null) {    final OptionsPane pane=new OptionsPaneImpl(node.getTitleKey());    for (    Class<? extends AbstractPaneItem> clazz : clazzes) {      try {        pane.add(clazz.newInstance());      } catch (      Exception e) {        ErrorService.error(e);      }    }    return pane;  } else {    throw new IllegalArgumentException("no options pane for this key: " + node.getTitleKey());  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (singular_1: ");  result.append(singular_1);  result.append(", plural_1: ");  result.append(plural_1);  result.append(')');  return result.toString();}  }
class C{  public static void assertResourceEquals(final String resource,final String actual){  final String expected;  try {    expected=FileHelper.resourceToString(resource).trim();  } catch (  final IOException e) {    throw new RuntimeException(e);  }  final String exp=StringUtils.convertLineEndings(expected);  Assert.assertEquals(exp,actual.trim());}  }
class C{  public static Number cosh(Number a){  return Math.cosh(a.doubleValue());}  }
class C{  public String write(Locale locale){  return locale.toString();}  }
class C{  public String cardRevealed(int i,String s){  return top.getString(R.string.revealed,showCard(i,s,CardAnimator.ShowCardType.REVEALED));}  }
class C{  public Edge(int u,int v){  this.u=u;  this.v=v;}  }
class C{  static private int LOCO_ADR(int a1,int a2){  return (((a1 & 0x7f) * 128) + (a2 & 0x7f));}  }
class C{  public LauncherDiscoveryRequestBuilder configurationParameter(String key,String value){  Preconditions.notBlank(key,"configuration parameter key must not be null or blank");  this.configurationParameters.put(key,value);  return this;}  }
class C{  private void write(OutputNode node,Collection list) throws Exception {  for (  Object item : list) {    if (item != null) {      Class real=item.getClass();      Label label=group.getLabel(real);      if (label == null) {        throw new UnionException("Entry of %s not declared in %s with annotation %s",real,type,group);      }      write(node,item,label);    }  }}  }
class C{  public EqualsBuilder append(long lhs,long rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  public boolean decodeContentType(int startIndex){  int mediaPrefixLength;  long mediaFieldLength;  if (decodeValueLength(startIndex) == false) {    return decodeConstrainedEncoding(startIndex);  }  mediaPrefixLength=getDecodedDataLength();  mediaFieldLength=getValue32();  if (decodeIntegerValue(startIndex + mediaPrefixLength) == true) {    dataLength+=mediaPrefixLength;    stringValue=null;    return true;  }  if (decodeExtensionMedia(startIndex + mediaPrefixLength) == true) {    dataLength+=mediaPrefixLength;    return true;  }  return false;}  }
class C{  synchronized protected void doEndOfProgramming(){  if (progState == 0) {    if (mServiceMode) {      log.debug("end service-mode programming: turn power on");      try {        jmri.InstanceManager.getDefault(jmri.PowerManager.class).setPower(jmri.PowerManager.ON);      } catch (      jmri.JmriException e) {        log.error("exception during power on at end of programming: " + e);      }    } else {      log.debug("end ops-mode programming: no power change");    }  }}  }
class C{  protected void handleException(Exception err){  if (killed || failSilently) {    failureException=err;    return;  }  err.printStackTrace();  if (silentRetryCount > 0) {    silentRetryCount--;    NetworkManager.getInstance().resetAPN();    retry();    return;  }  if (Display.isInitialized() && !Display.getInstance().isMinimized() && Dialog.show("Exception",err.toString() + ": for URL " + url+ "\n"+ err.getMessage(),"Retry","Cancel")) {    retry();  } else {    retrying=false;    killed=true;  }}  }
class C{  int checkValidYear(long prolepticYear){  if (prolepticYear < getMinimumYear() || prolepticYear > getMaximumYear()) {    throw new DateTimeException("Invalid Hijrah year: " + prolepticYear);  }  return (int)prolepticYear;}  }
class C{  private void createRecordHolderQueue(File[] listFiles){  this.recordHolderHeapLocal=new PriorityQueue<SortTempFileChunkHolder>(listFiles.length);}  }
class C{  public void startError(String errorName) throws IOException {  endUpdateIfNecessary();  endChangesIfNecessary();  ResponseWriter writer=getWrapped();  writer.startElement("error",null);  writer.startElement("error-name",null);  writer.write(errorName);  writer.endElement("error-name");  writer.startElement("error-message",null);  writer.startCDATA();}  }
class C{  @SuppressWarnings("unchecked") public RhythmOverlay inflateOverlay(List<String> configStrings){  return inflateOverlayInternal(configStrings,Collections.EMPTY_MAP,0);}  }
class C{  public Bundler putFloat(String key,float value){  bundle.putFloat(key,value);  return this;}  }
class C{  @Override public void tick(){  if (this.updatedVerticalViewDistance != this.verticalViewDistance) {    this.setPlayerViewDistance(getWorld().getMinecraftServer().getPlayerList().getViewDistance(),this.updatedVerticalViewDistance);  }  getWorld().getProfiler().startSection("playerCubeMapTick");  long currentTime=this.getWorldServer().getTotalWorldTime();  getWorld().getProfiler().startSection("tickEntries");  if (currentTime - this.previousWorldTime > 8000L) {    this.previousWorldTime=currentTime;    for (    CubeWatcher playerInstance : this.cubeWatchers) {      playerInstance.update();      playerInstance.updateInhabitedTime();    }  }  for (  CubeWatcher playerInstance : this.cubeWatchersToUpdate) {    playerInstance.update();  }  this.cubeWatchersToUpdate.clear();  getWorld().getProfiler().endStartSection("sortToGenerate");  if (this.toGenerateNeedSort && currentTime % 4L == 0L) {    this.toGenerateNeedSort=false;    Collections.sort(this.cubesToGenerate,CUBE_ORDER);    Collections.sort(this.columnsToGenerate,COLUMN_ORDER);  }  getWorld().getProfiler().endStartSection("sortToSend");  if (this.toSendToClientNeedSort && currentTime % 4L == 2L) {    this.toSendToClientNeedSort=false;    Collections.sort(this.cubesToSendToClients,CUBE_ORDER);    Collections.sort(this.columnsToSendToClients,COLUMN_ORDER);  }  getWorld().getProfiler().endStartSection("generate");  if (!this.columnsToGenerate.isEmpty()) {    getWorld().getProfiler().startSection("columns");    Iterator<ColumnWatcher> iter=this.columnsToGenerate.iterator();    while (iter.hasNext()) {      ColumnWatcher entry=iter.next();      getWorld().getProfiler().startSection("column[" + entry.getPos().chunkXPos + ","+ entry.getPos().chunkZPos+ "]");      boolean success=entry.getColumn() != null;      if (!success) {        boolean canGenerate=entry.hasPlayerMatching(CAN_GENERATE_CHUNKS);        getWorld().getProfiler().startSection("generate");        success=entry.providePlayerChunk(canGenerate);        getWorld().getProfiler().endSection();      }      if (success) {        iter.remove();        if (entry.sentToPlayers()) {          this.columnsToSendToClients.remove(entry);        }      }      getWorld().getProfiler().endSection();    }    getWorld().getProfiler().endSection();  }  if (!this.cubesToGenerate.isEmpty()) {    getWorld().getProfiler().startSection("cubes");    long stopTime=System.nanoTime() + 50000000L;    int chunksToGenerate=maxGeneratedCubesPerTick;    Iterator<CubeWatcher> iterator=this.cubesToGenerate.iterator();    while (iterator.hasNext() && chunksToGenerate >= 0 && System.nanoTime() < stopTime) {      CubeWatcher watcher=iterator.next();      CubePos pos=watcher.getCubePos();      getWorld().getProfiler().startSection("chunk=" + pos);      boolean success=watcher.getCube() != null && watcher.getCube().isFullyPopulated() && watcher.getCube().isInitialLightingDone();      if (!success) {        boolean canGenerate=watcher.hasPlayerMatching(CAN_GENERATE_CHUNKS);        getWorld().getProfiler().startSection("generate");        success=watcher.providePlayerCube(canGenerate);        getWorld().getProfiler().endSection();      }      if (success) {        iterator.remove();        if (watcher.sendToPlayers()) {          this.cubesToSendToClients.remove(watcher);        }        --chunksToGenerate;      }      getWorld().getProfiler().endSection();    }    getWorld().getProfiler().endSection();  }  getWorld().getProfiler().endStartSection("send");  if (!this.columnsToSendToClients.isEmpty()) {    getWorld().getProfiler().startSection("columns");    Iterator<ColumnWatcher> iter=this.columnsToSendToClients.iterator();    while (iter.hasNext()) {      ColumnWatcher next=iter.next();      if (next.sentToPlayers()) {        iter.remove();      }    }    getWorld().getProfiler().endSection();  }  if (!this.cubesToSendToClients.isEmpty()) {    getWorld().getProfiler().startSection("cubes");    int toSend=81 * 8;    Iterator<CubeWatcher> it=this.cubesToSendToClients.iterator();    while (it.hasNext() && toSend >= 0) {      CubeWatcher playerInstance=it.next();      if (playerInstance.sendToPlayers()) {        it.remove();        --toSend;      }    }    getWorld().getProfiler().endSection();  }  getWorld().getProfiler().endStartSection("unload");  if (this.players.isEmpty()) {    WorldProvider worldprovider=this.getWorldServer().provider;    if (!worldprovider.canRespawnHere()) {      this.getWorldServer().getChunkProvider().unloadAllChunks();    }  }  getWorld().getProfiler().endSection();  getWorld().getProfiler().endSection();}  }
class C{  public static IMarker createQuickFixMarker(String markerID,IGdtProblemType problemType,String problemTypeData,IResource resource,String... messageArgs) throws CoreException {  IMarker marker=createMarker(markerID,problemType,resource,messageArgs);  if (marker != null) {    marker.setAttribute(PROBLEM_TYPE_ID,problemType.getProblemId());    marker.setAttribute(PROBLEM_TYPE_DATA,problemTypeData);    return marker;  }  return null;}  }
class C{  public void comment(String comment) throws SAXException {  flushPending();  if (m_lexHandler != null) {    final int len=comment.length();    if (len > m_charsBuff.length) {      m_charsBuff=new char[len * 2 + 1];    }    comment.getChars(0,len,m_charsBuff,0);    m_lexHandler.comment(m_charsBuff,0,len);    if (m_tracer != null)     super.fireCommentEvent(m_charsBuff,0,len);  }}  }
class C{  public ImageSource tilingEnabled(){  return tiling(true);}  }
class C{  private static int checkChar(final char c,final String signature,int pos){  if (getChar(signature,pos) == c) {    return pos + 1;  }  throw new IllegalArgumentException(signature + ": '" + c+ "' expected at index "+ pos);}  }
class C{  public static Object assertThreadIdToSequenceIdMapHasEntryId(){  Map map=pool.getThreadIdToSequenceIdMap();  assertNotNull(map);  assertTrue(map.size() != 0);  Map.Entry entry=null;  for (Iterator threadIdToSequenceIdMapIterator=map.entrySet().iterator(); threadIdToSequenceIdMapIterator.hasNext(); ) {    entry=(Map.Entry)threadIdToSequenceIdMapIterator.next();  }  ThreadIdentifier tid=(ThreadIdentifier)entry.getKey();  SequenceIdAndExpirationObject seo=(SequenceIdAndExpirationObject)entry.getValue();  long sequenceId=seo.getSequenceId();  EventID evId=new EventID(tid.getMembershipID(),tid.getThreadID(),sequenceId);synchronized (map) {    map.clear();  }  return evId;}  }
class C{  private static boolean isThinPoolLessUtilized(StoragePool pool,long preAllocationSize,CoordinatorClient coordinator){  final boolean isPoolUtilizedLess=(100 - getThinPoolFreeCapacityPercentage(pool,preAllocationSize)) <= getMaxPoolUtilizationPercentage(pool,coordinator);  return isPoolUtilizedLess;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String tagname;  doc=(Document)load("staffNS",false);  element=doc.getElementById("CANADA");  tagname=element.getTagName();  assertEquals("throw_Equals","emp:address",tagname);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void writeChunk(long length,boolean isFinal){  long chunk;  if (isFinal) {    chunk=length << 1;  } else {    chunk=(length << 1) + 1;  }  writeUnsigned(chunk);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  protected void onPauseWebRender(boolean fastPause){  if (publicWebRender != null) {    publicWebRender.pauseTimers();    publicWebRender.onHide();    if (!fastPause)     readyToLoadUrl="";  }}  }
class C{  public static void updateIncognitoNotification(PendingIntent intent){  Context context=ApplicationStatus.getApplicationContext();  String actionMessage=context.getResources().getString(R.string.close_all_incognito_notification);  String title=context.getResources().getString(R.string.app_name);  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setContentTitle(title).setContentIntent(intent).setContentText(actionMessage).setOngoing(true).setVisibility(Notification.VISIBILITY_SECRET).setSmallIcon(R.drawable.incognito_statusbar).setLocalOnly(true);  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  nm.notify(INCOGNITO_TABS_OPEN_TAG,INCOGNITO_TABS_OPEN_ID,builder.build());}  }
class C{  private void process(final int value){  drawCall[state.ordinal()]=(byte)value;  state=state.getNext();  if (state == State.COLOR) {    applyDrawCall(drawCall);    sendDrawCall();  }}  }
class C{  public Vector3f add(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  return new Vector3f(x + vec.x,y + vec.y,z + vec.z);}  }
class C{  protected void addFromChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_fromChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_fromChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__FROM_CHANNELS,true,false,true,null,null,null));}  }
class C{  void checkTimeout(){  if (!requestPending)   return;synchronized (this) {    if (!requestPending)     return;    long now=System.nanoTime();    if (now - this.roleSubmitTimeNs > roleTimeoutNs) {      switchManagerCounters.roleReplyTimeout.increment();      setSwitchRole(pendingRole,RoleRecvStatus.NO_REPLY);    }  }}  }
class C{  public boolean validate(Class type,String source) throws Exception {  return validate(type,source,true);}  }
class C{  public static String requestStringFromUrl(String url,String userAgent){  HttpConnection connection=new HttpConnection();  if (userAgent != null)   connection.setUserAgent(userAgent);  connection.doGet(url);  String result=connection.getContentAsString();  connection.close();  return result;}  }
class C{  private int parseHeaderTag(final byte[] b,final int off) throws ParseException {  final int len=b.length - off;  final CryptoAlgorithm cryptoAlgo=CryptoAlgorithm.deserialize(cryptoAlgoVal_);  final int tagLen=cryptoAlgo.getTagLen();  if (len >= tagLen) {    headerTag_=Arrays.copyOfRange(b,off,off + tagLen);    return tagLen;  } else {    throw new ParseException("Not enough bytes to parse header tag");  }}  }
class C{  public ConfigurationInfo(){  this.argcount=-2;  this.argnames=null;}  }
class C{  protected static List<String> detectClassPathResourcesToStage(ClassLoader classLoader){  if (!(classLoader instanceof URLClassLoader)) {    String message=String.format("Unable to use ClassLoader to detect classpath elements. " + "Current ClassLoader is %s, only URLClassLoaders are supported.",classLoader);    LOG.error(message);    throw new IllegalArgumentException(message);  }  List<String> files=new ArrayList<>();  for (  URL url : ((URLClassLoader)classLoader).getURLs()) {    try {      files.add(new File(url.toURI()).getAbsolutePath());    } catch (    IllegalArgumentException|URISyntaxException e) {      String message=String.format("Unable to convert url (%s) to file.",url);      LOG.error(message);      throw new IllegalArgumentException(message,e);    }  }  return files;}  }
class C{  public ThumbnailSetRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  public void next(){  index++;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.zoomFillPaint=SerialUtilities.readPaint(stream);  this.zoomOutlinePaint=SerialUtilities.readPaint(stream);  this.chartMouseListeners=new EventListenerList();  if (this.chart != null) {    this.chart.addChangeListener(this);  }}  }
class C{  protected String loadDocumentDetails(){  MBankStatement bs=(MBankStatement)getPO();  setDateDoc(bs.getStatementDate());  setDateAcct(bs.getStatementDate());  m_C_BankAccount_ID=bs.getC_BankAccount_ID();  setAmount(AMTTYPE_Gross,bs.getStatementDifference());  MBankAccount ba=MBankAccount.get(getCtx(),m_C_BankAccount_ID);  setC_Currency_ID(ba.getC_Currency_ID());  p_lines=loadLines(bs);  log.fine("Lines=" + p_lines.length);  return null;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public RoleException(){}  }
class C{  private String buildPresenceInfoDocument(PresenceInfo info){  String document=new StringBuilder("<?xml version=\"1.0\" encoding=\"").append(UTF8_STR).append("\"?>").append(SipUtils.CRLF).append("<presence xmlns=\"urn:ietf:params:xml:ns:pidf\"").append(" xmlns:op=\"urn:oma:xml:prs:pidf:oma-pres\"").append(" xmlns:opd=\"urn:oma:xml:pde:pidf:ext\"").append(" xmlns:pdm=\"urn:ietf:params:xml:ns:pidf:data-model\"").append(" xmlns:ci=\"urn:ietf:params:xml:ns:pidf:cipid\"").append(" xmlns:rpid=\"urn:ietf:params:xml:ns:pidf:rpid\"").append(" xmlns:gp=\"urn:ietf:params:xml:ns:pidf:geopriv10\"").append(" xmlns:gml=\"urn:opengis:specification:gml:schema-xsd:feature:v3.0\"").append(" entity=\"").append(ImsModule.getImsUserProfile().getPublicUri()).append("\">").append(SipUtils.CRLF).toString();  String timestamp=DateUtils.encodeDate(info.getTimestamp());  document+=buildCapabilities(timestamp,mRcsSettings.getMyCapabilities());  document+=buildGeoloc(timestamp,info.getGeoloc());  document+="<pdm:person id=\"p1\">" + SipUtils.CRLF + buildPersonInfo(info)+ "  <pdm:timestamp>"+ timestamp+ "</pdm:timestamp>"+ SipUtils.CRLF+ "</pdm:person>"+ SipUtils.CRLF;  document+="</presence>" + SipUtils.CRLF;  return document;}  }
class C{  private void println(int logLevel,Object[] array){  if (logLevel < XLog.sLogLevel) {    return;  }  printlnInternal(logLevel,Arrays.deepToString(array));}  }
class C{  public V value(){  return _map._values[_index];}  }
class C{  public String sql_delete(String vendorName,String catalogName,String schemaName,String tableName,String tableAlias,ArrayList<String> conditions,Integer daysOld){  if (tableAlias == null || tableAlias.length() == 0)   tableAlias="t";  if (daysOld != null)   daysOld=new Integer(daysOld.intValue() - 1);  return m_interfaces.get(getDBVendorID(vendorName)).sql_delete(catalogName,schemaName,tableName,tableAlias,conditions,daysOld);}  }
class C{  public void testAppThread() throws Exception {  epService=EPServiceProviderManager.getProvider("testExistingTypeNoOptions",makeConfig("TypeA"));  epService.initialize();  EPStatement stmt=epService.getEPAdministrator().createEPL("select symbol, price, volume from TypeA.win:length(100)");  SupportUpdateListener listener=new SupportUpdateListener();  stmt.addListener(listener);  CSVInputAdapterSpec spec=new CSVInputAdapterSpec(new AdapterInputSource(CSV_FILENAME_ONELINE_TRADE),"TypeA");  spec.setEventsPerSec(1000);  InputAdapter inputAdapter=new CSVInputAdapter(epService,spec);  inputAdapter.start();  assertEquals(1,listener.getNewDataList().size());}  }
class C{  public synchronized void finishInitialization() throws FormatException {  internTableName();  try {    inputFile=new BinaryBufferedFile(filename);  } catch (  IOException e) {    throw new FormatException(e.toString());  }  try {    byte preHeaderLen[]=inputFile.readBytes(4,false);    char delim=inputFile.readChar();switch (delim) {case 'L':case 'l':      delim=inputFile.readChar();case ';':    byteorder=false;  inputFile.byteOrder(byteorder);break;case 'M':case 'm':byteorder=true;inputFile.byteOrder(byteorder);delim=inputFile.readChar();break;default :throw new FormatException("Invalid Byte Encoding Format");}headerLength+=MoreMath.BuildInteger(preHeaderLen,byteorder);if (delim != ';') {throw new FormatException("Unexpected character in header");}tableDescription=inputFile.readToDelimiter(';');documentationFileName=inputFile.readToDelimiter(';');if ("-".equals(documentationFileName)) {documentationFileName=null;}ArrayList<Object> tmpcols=new ArrayList<Object>();try {while (true) {DcwColumnInfo dci=new DcwColumnInfo(inputFile);int collen=dci.fieldLength();if ((collen == -1) || (recordLength == -1)) {recordLength=-1;} else {recordLength+=collen;}tmpcols.add(dci);}} catch (EOFException e) {}columnInfo=new DcwColumnInfo[tmpcols.size()];tmpcols.toArray(columnInfo);cursorRow=1;} catch (EOFException e) {throw new FormatException("Caught EOFException: " + e.getMessage());}catch (NullPointerException npe) {}}  }
class C{  protected void initTitle(){  if (targetBean != null) {    Class beanClass=targetBean.getClass();    try {      BeanInfo bi=Introspector.getBeanInfo(beanClass);      String label=bi.getBeanDescriptor().getDisplayName();      setTitle(label + " Properties");    } catch (    Exception ex) {      System.err.println("GenericPropertySheet: couldn't find BeanInfo for " + beanClass);      ex.printStackTrace();    }  }}  }
class C{  public static String innerTrim(String str){  if (str.isEmpty())   return "";  StringBuilder sb=new StringBuilder();  boolean previousSpace=false;  boolean previousBreak=false;  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (c == ' ' || (int)c == 9) {      previousSpace=true;      continue;    } else     if (c == '\r' || c == '\n') {      previousBreak=true;      continue;    }    if (previousSpace) {      sb.append(' ');    }    if (previousBreak) {      sb.append('\n');    }    previousBreak=false;    previousSpace=false;    sb.append(c);  }  return sb.toString().trim();}  }
class C{  public static void main(String[] args){  int n=Integer.parseInt(args[0]);  int trials=Integer.parseInt(args[1]);  Counter[] hits=new Counter[n];  for (int i=0; i < n; i++) {    hits[i]=new Counter("counter" + i);  }  for (int t=0; t < trials; t++) {    hits[StdRandom.uniform(n)].increment();  }  for (int i=0; i < n; i++) {    StdOut.println(hits[i]);  }}  }
class C{  public ul removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void startFlipDetection(FlipListener flipListener){  startLibrarySensorDetection(new FlipDetector(flipListener),flipListener);}  }
class C{  public static String showInputDialog(Object message) throws HeadlessException {  return showInputDialog(null,message);}  }
class C{  public StrBuilder append(char ch){  int len=length();  ensureCapacity(len + 1);  buffer[size++]=ch;  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @NotNull @ObjectiveCName("doSendCodeViaCall:") public Promise<Boolean> doSendCodeViaCall(String transactionHash){  return modules.getAuthModule().doSendCall(transactionHash);}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  public Cell(int x,int y,C content){  this.x=x;  this.y=y;  this.content=content;}  }
class C{  public SignerInformationStore generateCounterSigners(SignerInformation signer,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return this.generate(null,new CMSProcessableByteArray(signer.getSignature()),false,CMSUtils.getProvider(sigProvider)).getSignerInfos();}  }
class C{  public void test_parkUntil_1() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(2);  Parker parker=new Parker(barrier,true,500);  Thread parkerThread=new Thread(parker);  Thread waiterThread=new Thread(new WaitAndUnpark(barrier,1000,parkerThread));  parkerThread.start();  waiterThread.start();  parker.assertDurationIsInRange(500);  waiterThread.join();  parkerThread.join();}  }
class C{  private void removeCheckpoint(int stringId){  getDelegator().getUndo().removeCheckpoint(Application.mainActivity.getResources().getString(stringId));}  }
class C{  private void sendStoragePolicySelectionToSqsQueue(String sqsQueueName,List<StoragePolicySelection> storagePolicySelections){  AwsParamsDto awsParamsDto=awsHelper.getAwsParamsDto();  for (  StoragePolicySelection storagePolicySelection : storagePolicySelections) {    String messageText=null;    try {      messageText=jsonHelper.objectToJson(storagePolicySelection);      sqsDao.sendSqsTextMessage(awsParamsDto,sqsQueueName,messageText);    } catch (    Exception e) {      LOGGER.error("Failed to publish message to the JMS queue. jmsQueueName=\"{}\" jmsMessagePayload={}",sqsQueueName,messageText);      throw new IllegalStateException(e.getMessage(),e);    }  }}  }
class C{  public void load(Element element,Object o){  Editor p=(Editor)o;  IndicatorTrackIcon l=new IndicatorTrackIcon(p);  Element elem=element.getChild("iconmap");  if (elem != null) {    List<Element> status=elem.getChildren();    if (status.size() > 0) {      for (int i=0; i < status.size(); i++) {        String msg="IndicatorTrack \"" + l.getNameString() + "\" icon \""+ status.get(i).getName()+ "\" ";        NamedIcon icon=loadIcon(l,status.get(i).getName(),elem,msg,p);        if (icon != null) {          l.setIcon(status.get(i).getName(),icon);        } else {          log.info(msg + " removed for url= " + status.get(i).getName());          return;        }      }    }    Attribute attr=elem.getAttribute("family");    if (attr != null) {      l.setFamily(attr.getValue());    }  }  Element name=element.getChild("occupancyblock");  if (name != null) {    l.setOccBlock(name.getText());  } else {    name=element.getChild("occupancysensor");    if (name != null) {      l.setOccSensor(name.getText());    }  }  l.setShowTrain(false);  name=element.getChild("showTrainName");  if (name != null) {    if ("yes".equals(name.getText())) {      l.setShowTrain(true);    }  }  elem=element.getChild("paths");  if (elem != null) {    ArrayList<String> paths=new ArrayList<String>();    List<Element> pth=elem.getChildren();    for (int i=0; i < pth.size(); i++) {      paths.add(pth.get(i).getText());    }    l.setPaths(paths);  }  l.displayState(l.getStatus());  l.updateSize();  p.putItem(l);  loadCommonAttributes(l,Editor.TURNOUTS,element);}  }
class C{  private ZyGraphHelpers(){}  }
class C{  public SolrConfigs(final List<String> solrConfigs){  this.solrConfigs=solrConfigs;}  }
class C{  public static double pdf(double x,double shape,double scale,double factor){  if (x <= 0)   return 0.0;  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));  return factor * a;}  }
class C{  @CanIgnoreReturnValue public Builder<K,V> put(Range<K> range,V value){  checkNotNull(range);  checkNotNull(value);  checkArgument(!range.isEmpty(),"Range must not be empty, but was %s",range);  if (!keyRanges.complement().encloses(range)) {    for (    Entry<Range<K>,V> entry : rangeMap.asMapOfRanges().entrySet()) {      Range<K> key=entry.getKey();      if (key.isConnected(range) && !key.intersection(range).isEmpty()) {        throw new IllegalArgumentException("Overlapping ranges: range " + range + " overlaps with entry "+ entry);      }    }  }  keyRanges.add(range);  rangeMap.put(range,value);  return this;}  }
class C{  public ClosestShapePickSupport(VisualizationServer<V,E> vv){  this.vv=vv;}  }
class C{  public ColumnAutoIncrementChange(Table table,Column column){  super(table);  _column=column;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  throw new UnsupportedOperationException();}  }
class C{  public TableResult(int maxrows){  this.maxrows=maxrows;  clear();}  }
class C{  protected void loadContributedTemplates() throws IOException {  Collection contributed=readContributedTemplates();  for (Iterator it=contributed.iterator(); it.hasNext(); ) {    TemplatePersistenceData data=(TemplatePersistenceData)it.next();    internalAdd(data);  }}  }
class C{  public int padLength(int len){  int paddingOctet=blockSize - (len % blockSize);  return paddingOctet;}  }
class C{  public MinimumSpanningForest(Graph<V,E> graph,Forest<V,E> forest,V root,Map<E,Double> weights){  if (forest.getVertexCount() != 0) {    throw new IllegalArgumentException("Supplied Forest must be empty");  }  this.graph=graph;  this.forest=forest;  if (weights != null) {    this.weights=Functions.forMap(weights);  }  Set<E> unfinishedEdges=new HashSet<E>(graph.getEdges());  if (graph.getVertices().contains(root)) {    this.forest.addVertex(root);  }  updateForest(forest.getVertices(),unfinishedEdges);}  }
class C{  public void start(){  managedPorts.add(createPort());  fixNames();  ports.addObserver(observer,false);}  }
class C{  public RelationalVal parse(String raw_input){  raw_input=raw_input.trim();  if (Character.isLetter(raw_input.charAt(raw_input.length() - 1))) {    raw_input+=".";  }  String[] taggedInput=tagger.tagString(raw_input).split(" ");  List<String[]> taggedTokens=Stream.of(taggedInput).map(null).collect(Collectors.toList());  String[] lines=new String[taggedTokens.size()];  for (int i=0; i < taggedTokens.size(); i++) {    String[] token=taggedTokens.get(i);    lines[i]=(i + 1) + "\t" + token[0]+ "\t_\t"+ token[1]+ "\t"+ token[1]+ "\t_";  }  try {    ConcurrentDependencyGraph graph=maltparser.parse(lines);    Map<Integer,FactoredNode> nodes=new HashMap<Integer,FactoredNode>();    for (int i=1; i < graph.nTokenNodes(); i++) {      ConcurrentDependencyNode node=graph.getTokenNode(i);      int index=node.getIndex();      String word=node.getLabel(1);      String posTag=node.getLabel(3);      nodes.put(index,new FactoredNode(word,posTag));    }    FactoredNode root=null;    for (int i=1; i < graph.nTokenNodes(); i++) {      ConcurrentDependencyNode node=graph.getTokenNode(i);      int index=node.getIndex();      int head=node.getHeadIndex();      String headRelation=node.getLabel(7);      if (head == 0) {        root=nodes.get(index);      } else {        nodes.get(head).addChild(nodes.get(index),headRelation);      }    }    if (root != null) {      return new RelationalVal(root.toString());    } else {      throw new RuntimeException("root could not be found");    }  } catch (  MaltChainedException e) {    throw new RuntimeException("Could not start the malt parser: " + e);  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public int indexOf(Object elem,int index){  if (!(elem instanceof CheckBoxListItem)) {    return super.indexOf(new CheckBoxListItem(elem),index);  } else {    return super.indexOf(elem,index);  }}  }
class C{  public void reload(SolrCore core,SolrIndexSearcher searcher) throws IOException {  LOG.info("SolrSuggester.reload(" + name + ")");  if (dictionary == null && storeDir != null) {    File lookupFile=getStoreFile();    if (lookupFile.exists()) {      FileInputStream is=new FileInputStream(lookupFile);      try {        if (lookup.load(is)) {          return;        }      }  finally {        IOUtils.closeWhileHandlingException(is);      }    } else {      LOG.info("lookup file doesn't exist");    }  }}  }
class C{  public static BigDecimal multiply(final BigDecimal x,double factor){  BigDecimal multiplicand=new BigDecimal(factor,MathContext.DECIMAL64);  BigDecimal multiplicationResult=x.multiply(multiplicand);  return multiplicationResult;}  }
class C{  public AbMenuItem(int id,String text){  super();  this.id=id;  this.text=text;}  }
class C{  public void addPanel(AbstractPanel panel,PanelType panelType){  validateNotNull(panel,"panel");  validateNotNull(panelType,"panelType");  addPanel(getTabbedFull(),panel);switch (panelType) {case SELECT:    addPanel(getTabbedSelect(),panel);  getTabbedSelect().revalidate();break;case STATUS:addPanel(getTabbedStatus(),panel);getTabbedStatus().revalidate();break;case WORK:addPanel(getTabbedWork(),panel);getTabbedWork().revalidate();break;default :break;}if (layout == Layout.FULL) {getTabbedFull().setVisiblePanels(getTabbedFull().getVisiblePanels());}}  }
class C{  public void addUDM(UserDefinedMetrics udm) throws UserDefinedMetrics.UserDefinedMetricsException {  if (udm == null)   return;synchronized (udmUpdateLock) {    if (this.udms.containsKey(udm.getName()))     throw new UserDefinedMetrics.UserDefinedMetricsException("UDM " + udm.getName() + " already exists.");    this.storeUDM(udm);    this.udms.put(udm.getName(),udm);    String src=udm.getSource();    if (!"SQL".equalsIgnoreCase(src)) {      if (!this.builtinMapping.containsKey(src))       this.builtinMapping.put(src,new ArrayList<String>());      this.builtinMapping.get(src).add(udm.getName());    }  }}  }
class C{  public static UCrop of(@NonNull Uri source,@NonNull Uri destination){  return new UCrop(source,destination);}  }
class C{  private static int yy_unpack(String packed,int offset,int[] trans){  int i=0;  int j=offset;  int l=packed.length();  while (i < l) {    int count=packed.charAt(i++);    int value=packed.charAt(i++);    value--;    do     trans[j++]=value; while (--count > 0);  }  return j;}  }
class C{  public boolean retainEntries(TLongIntProcedure procedure){  boolean modified=false;  byte[] states=_states;  long[] keys=_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private void optimizeDatabase(){  s_logger.log(Level.FINE,"optimizeDatabase",getDirection());  String vendor=getVendor();  String catalog=getCatalog();  String schema=getSchema();  int step=0;  int errors=0;  String sql="";  Statement stmt=setStatement();  sql=s_dbEngine.sqlAdmin_optimizeDatabase(step,vendor,catalog,schema);  while (sql != null) {    step++;    if (executeUpdate(stmt,sql,false,false) == null)     errors++;    sql=s_dbEngine.sqlAdmin_optimizeDatabase(step,vendor,catalog,schema);  }  releaseStatement(stmt);  s_logger.log(Level.FINE,"databaseOptimized",new Object[]{Integer.toString(step - errors),Integer.toString(step)});  s_logger.flush();}  }
class C{  public DestinationWrapper<Queue> lookupQueue(String uri,JMSContext context) throws JMSException, NamingException {  if (usingJNDI || context == null) {    return lookupQueueFromJNDI(uri);  } else {    return new DestinationWrapper<Queue>(uri,context.createQueue(uri));  }}  }
class C{  public GroupedInspector(SimpleProperties properties,GUIState state,String name,String[][] PropertiesNames,String[] groupNames,boolean showExtraProperties){  buildGroupedInspector(properties,state,name,PropertiesNames,groupNames,showExtraProperties);}  }
class C{  public static Vector3 transformVector(Matrix4x4 mat,Vector3 v){  Vector3 trans=multiplyMV(mat,v);  float[] m=mat.mValues;  float w=m[3] * v.x + m[7] * v.y + m[11] * v.z + m[15];  float oneOverW=1.0f / w;  trans.x*=oneOverW;  trans.y*=oneOverW;  return trans;}  }
class C{  public static IgniteBiTuple<Collection<IgniteConfiguration>,? extends GridSpringResourceContext> loadConfigurations(InputStream springCfgStream) throws IgniteCheckedException {  IgniteSpringHelper spring=SPRING.create(false);  return spring.loadConfigurations(springCfgStream);}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  public void render(java.awt.Graphics graphics){  State state=getStateMachine().getState();  if (!(state instanceof GraphicUndefinedState)) {    if (text == null) {      Debug.message("eomg","EditableOMText.render: null point.");      return;    }    text.setVisible(true);    text.render(graphics);    text.setVisible(false);    int renderType=text.getRenderType();    if (state instanceof GraphicSelectedState || state instanceof GraphicEditState) {      for (int i=0; i < gPoints.length; i++) {        GrabPoint gp=gPoints[i];        if (gp != null) {          if ((i == OFFSET_POINT_INDEX && renderType == OMGraphic.RENDERTYPE_OFFSET && movingPoint == gpo) || (state instanceof GraphicSelectedState && ((i != OFFSET_POINT_INDEX && renderType != OMGraphic.RENDERTYPE_OFFSET) || (renderType == OMGraphic.RENDERTYPE_OFFSET)))) {            gp.setVisible(true);            gp.render(graphics);            gp.setVisible(false);          }        }      }    }  }}  }
class C{  public void destroy(){  log.info("destroy");}  }
class C{  @Override public int compareTo(Object obj){  int result=0;  if (obj instanceof PieLabelRecord) {    PieLabelRecord plr=(PieLabelRecord)obj;    if (this.baseY < plr.baseY) {      result=-1;    } else     if (this.baseY > plr.baseY) {      result=1;    }  }  return result;}  }
class C{  public void close(){  try {    if (mySock != null)     mySock.close();    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Closing message Channel " + this);  } catch (  IOException ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Error closing socket " + ex);  }}  }
class C{  private void killRat(Creature rat,int count){  do {    player.setHP(10000);    if (player.hasStatus(StatusType.POISONED)) {      player.getStatusList().removeAll(PoisonStatus.class);    }    player.teleport(rat.getZone(),rat.getX() + 1,rat.getY(),null,player);    player.setTarget(rat);    MockStendlRPWorld.get().nextTurn();    MockStendhalRPRuleProcessor.get().beginTurn();    MockStendhalRPRuleProcessor.get().endTurn();  } while (player.isAttacking());  MockStendhalRPRuleProcessor.get().beginTurn();  MockStendhalRPRuleProcessor.get().endTurn();  logger.debug("killed " + rat.getName() + ". #"+ count);}  }
class C{  public NodeSetDTM(DTMManager dtmManager){  super();  m_manager=dtmManager;}  }
class C{  public static ESRIPoint readPoint(byte[] b,int off){  ESRIPoint point=new ESRIPoint();  point.x=readLEDouble(b,off);  point.y=readLEDouble(b,off + 8);  return point;}  }
class C{  public GitHub connect() throws ServerException, UnauthorizedException {  try {    return GitHub.connectUsingOAuth(getToken());  } catch (  IOException e) {    throw new ServerException(e.getMessage());  }}  }
class C{  private long[] verifyFillInExceptions(SegmentedTimeline timeline,String[] exceptionString,Format fmt) throws ParseException {  timeline.setExceptionSegments(new java.util.ArrayList());  assertEquals(0,timeline.getExceptionSegments().size());  ArrayList exceptionList=new ArrayList();  for (int i=0; i < exceptionString.length; i++) {    long e;    if (fmt instanceof NumberFormat) {      e=((NumberFormat)fmt).parse(exceptionString[i]).longValue();    } else {      e=timeline.getTime(((SimpleDateFormat)fmt).parse(exceptionString[i]));    }    SegmentedTimeline.Segment segment=timeline.getSegment(e);    if (segment.inIncludeSegments()) {      timeline.addException(e);      exceptionList.add(new Long(e));      assertEquals(exceptionList.size(),timeline.getExceptionSegments().size());      assertTrue(segment.inExceptionSegments());    }  }  long[] exception=new long[exceptionList.size()];  int i=0;  for (Iterator iter=exceptionList.iterator(); iter.hasNext(); ) {    Long l=(Long)iter.next();    exception[i++]=l.longValue();  }  return (exception);}  }
class C{  private static <T extends GlowStructure>void bind(StructureStore<T> store){  idTable.put(store.getId(),store);  classTable.put(store.getType(),store);}  }
class C{  public JFXDrawer(){  super();  initialize();  overlayPane.setBackground(new Background(new BackgroundFill(Color.rgb(0,0,0,0.1),CornerRadii.EMPTY,Insets.EMPTY)));  overlayPane.getStyleClass().add("jfx-drawer-overlay-pane");  overlayPane.setOpacity(0);  sidePane.getStyleClass().add("jfx-drawer-side-pane");  sidePane.setBackground(new Background(new BackgroundFill(Color.rgb(255,255,255,1),CornerRadii.EMPTY,Insets.EMPTY)));  sidePane.setPickOnBounds(false);  this.getChildren().add(content);  overlayPane.setOnMouseClicked(null);  initListeners();  setDefaultDrawerSize(100);}  }
class C{  protected Function<Object[],Object> createKeyGenerator(Schema schema,TableId columnSetName,List<Column> columns){  if (schema != null) {    int[] recordIndexes=indexesForColumns(columns);    Field[] fields=fieldsForColumns(schema,columns);    int numFields=recordIndexes.length;    ValueConverter[] converters=convertersForColumns(schema,columnSetName,columns,null,null);    return null;  }  return null;}  }
class C{  public XBLOMDefinitionElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public String rootID(){  return "[PRJ]" + this.getFullPath();}  }
class C{  @Override public int read(byte[] abData,int nOffset,int nLength) throws IOException {  if (isClosed()) {    return -1;  }  int frameCount=nLength / getFrameSize();  if (writeBuffer == null) {    writeBuffer=new FloatSampleBuffer(getFormat().getChannels(),frameCount,getFormat().getSampleRate());  } else {    writeBuffer.changeSampleCount(frameCount,false);  }  read(writeBuffer);  if (writeBuffer.getSampleCount() == 0 && eofReached) {    return -1;  }  int written=writeBuffer.convertToByteArray(abData,nOffset,getFormat());  return written;}  }
class C{  @NoInline public final void pushOOL(ObjectReference object){  push(object);}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  static byte[] concatLengthPrefixed(List<Protocol> protocols){  Buffer result=new Buffer();  for (int i=0, size=protocols.size(); i < size; i++) {    Protocol protocol=protocols.get(i);    if (protocol == Protocol.HTTP_1_0)     continue;    result.writeByte(protocol.toString().length());    result.writeUtf8(protocol.toString());  }  return result.readByteArray();}  }
class C{  public void beforeReleasingPrimaryLockDuringDemotion(){}  }
class C{  public synchronized int hashCode(){  return startMonth ^ startDay ^ startDayOfWeek^ startTime^ endMonth^ endDay^ endDayOfWeek^ endTime^ rawOffset;}  }
class C{  public boolean stem(char[] wordBuffer,int offset,int wordLen){  reset();  if (b.length < wordLen) {    b=new char[ArrayUtil.oversize(wordLen,NUM_BYTES_CHAR)];  }  System.arraycopy(wordBuffer,offset,b,0,wordLen);  i=wordLen;  return stem(0);}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public NbtTagShort(String name,short value){  super(name);  this.value=value;}  }
class C{  public <T extends ServiceDocument>Operation sendPostAndWaitForReplication(String serviceUri,T parameters) throws Throwable {  Operation op=sendPostAndWait(serviceUri,parameters);  String serviceLink=op.getBody(ServiceDocument.class).documentSelfLink;  waitForReplication(serviceUri,serviceLink);  return op;}  }
class C{  public Builder addMember(String memberId){  MemberRef newGroup=new MemberRef.Builder().setValue(memberId).build();  members.add(newGroup);  return this;}  }
class C{  public static void main(String[] args){  Holder holder=new Holder();  Blah blah=new Blah();  holder.mValue=blah;  System.out.println("Assignment was allowed");  try {    holder.mValue.run();    System.err.println("ERROR: did not get expected ICCE");  } catch (  IncompatibleClassChangeError icce) {    System.out.println("Got expected IncompatibleClassChangeError");  }  Comparable cmp=(Comparable)holder.mValue;  cmp.compareTo(cmp);  System.out.println("Done");}  }
class C{  public ViewEdge(final INaviEdge edge,final ViewNode source,final ViewNode target){  super(source,target);  m_edge=Preconditions.checkNotNull(edge,"Error: edge argument can not be null");}  }
class C{  private java.util.concurrent.Future<?> schedule(Runnable runnable,long delayMs){  closeLock.readLock().lock();  try {    if (closed) {      return null;    } else     if (delayMs > 0) {      return executorService.schedule(runnable,delayMs,TimeUnit.MILLISECONDS);    } else {      return executorService.submit(runnable);    }  } catch (  RejectedExecutionException ree) {    logger.error("Failed to schedule task {} in {} ms : ",new Object[]{runnable,delayMs,ree});    return null;  } finally {    closeLock.readLock().unlock();  }}  }
class C{  public SimpleTimePeriod(Date start,Date end){  this(start.getTime(),end.getTime());}  }
class C{  @PUT @Path("setting/restart/{settingId}") @ZeppelinApi public Response restartSetting(@PathParam("settingId") String settingId){  logger.info("Restart interpreterSetting {}",settingId);  try {    interpreterFactory.restart(settingId);  } catch (  InterpreterException e) {    logger.error("Exception in InterpreterRestApi while restartSetting ",e);    return new JsonResponse<>(Status.NOT_FOUND,e.getMessage(),ExceptionUtils.getStackTrace(e)).build();  }  InterpreterSetting setting=interpreterFactory.get(settingId);  if (setting == null) {    return new JsonResponse<>(Status.NOT_FOUND,"",settingId).build();  }  return new JsonResponse<>(Status.OK,"",setting).build();}  }
class C{  public CostMatrix(Reader reader) throws Exception {  LineNumberReader lnr=new LineNumberReader(reader);  String line;  int currentRow=-1;  while ((line=lnr.readLine()) != null) {    if (line.startsWith("%")) {      continue;    }    StringTokenizer st=new StringTokenizer(line);    if (!st.hasMoreTokens()) {      continue;    }    if (currentRow < 0) {      int rows=Integer.parseInt(st.nextToken());      if (!st.hasMoreTokens()) {        throw new Exception("Line " + lnr.getLineNumber() + ": expected number of columns");      }      int cols=Integer.parseInt(st.nextToken());      if (rows != cols) {        throw new Exception("Trying to create a non-square cost " + "matrix");      }      m_size=rows;      initialize();      currentRow++;      continue;    } else {      if (currentRow == m_size) {        throw new Exception("Line " + lnr.getLineNumber() + ": too many rows provided");      }      for (int i=0; i < m_size; i++) {        if (!st.hasMoreTokens()) {          throw new Exception("Line " + lnr.getLineNumber() + ": too few matrix elements provided");        }        String nextTok=st.nextToken();        Double val=null;        try {          val=new Double(nextTok);        } catch (        Exception ex) {          val=null;        }        if (val == null) {          setCell(currentRow,i,nextTok);        } else {          setCell(currentRow,i,val);        }      }      currentRow++;    }  }  if (currentRow == -1) {    throw new Exception("Line " + lnr.getLineNumber() + ": expected number of rows");  } else   if (currentRow != m_size) {    throw new Exception("Line " + lnr.getLineNumber() + ": too few rows provided");  }}  }
class C{  public TempDynamicClassLoader(DynamicClassLoader owner){  super(owner.getParent());  _owner=owner;}  }
class C{  @Beta public static String toString(byte x){  return toString(x,10);}  }
class C{  private static String determineFreebsdLibrary(final String library,final String osName,final String osArch){  String resourceName;  String platform=null;  String fileExtension="so";switch (osArch) {case "amd64":case "x86_64":    platform="freebsd-x64";  break;default :unsupportedPlatform(osName,osArch);}resourceName="/" + platform + "/"+ library+ "."+ fileExtension;return resourceName;}  }
class C{  private void initializePrefixes(){  if (namespaceMap == null) {    System.err.println("Cannot use whitespace filter without initializing the namespace-prefix map for the current Wikipedia language version. DISABLING FILTER.");  } else {    prefixesToAllow=new HashSet<String>();    prefixesToReject=new HashSet<String>();    for (    Entry<Integer,String> namespace : namespaceMap.entrySet()) {      if (allowedNamespaces.contains(namespace.getKey())) {        prefixesToAllow.add(namespace.getValue() + ":");      } else {        prefixesToReject.add(namespace.getValue() + ":");      }    }  }}  }
class C{  PBMAC1Core(String kdfAlgo,String hashAlgo,int blockLength) throws NoSuchAlgorithmException {  super(hashAlgo,blockLength);  this.kdfAlgo=kdfAlgo;  this.hashAlgo=hashAlgo;  this.blockLength=blockLength;}  }
class C{  private static void loadUOMs(Properties ctx){  List<MUOM> list=new Query(ctx,Table_Name,"IsActive='Y'",null).setApplyAccessFilter(MRole.SQL_NOTQUALIFIED,MRole.SQL_RO).list();  for (  MUOM uom : list) {    s_cache.put(uom.get_ID(),uom);  }}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public DERSequence(ASN1Encodable obj){  super(obj);}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case InformationModelPackage.INFORMATION_MODEL:    return createInformationModel();case InformationModelPackage.FUNCTIONBLOCK_PROPERTY:  return createFunctionblockProperty();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public CreateSnapshotRequest snapshot(String snapshot){  this.snapshot=snapshot;  return this;}  }
class C{  public void drawText(@NonNull Canvas canvas,RectF bounds,float percentComplete){  if (mText != null && mText.length() > 0) {    mPaintText.setTextSize(100 * percentComplete);    mPaintText.setAlpha(MAX_ALPHA);    final float startFadePercent=0.7f;    if (percentComplete > startFadePercent) {      int alphaText=(int)(MAX_ALPHA - (MAX_ALPHA * ((percentComplete - startFadePercent) / (1.0f - startFadePercent))));      mPaintText.setAlpha(alphaText);    }    final float xPos=bounds.left + (bounds.width() / 2);    final float yPos=(bounds.top + (bounds.height() / 2)) - ((mPaintText.descent() + mPaintText.ascent()) / 2);    canvas.drawText(mText,xPos,yPos,mPaintText);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void maybeCheckForGooglePlayServices(){  Log.d(TAG,"Google Play Services check");  if (preferences.getBoolean(LocationController.NO_AUTO_LOCATE,false)) {    Log.d(TAG,"Auto location disabled - not checking for GMS");    return;  }  int googlePlayServicesAvailability=apiAvailability.isGooglePlayServicesAvailable(parent);  if (googlePlayServicesAvailability == ConnectionResult.SUCCESS) {    Log.d(TAG,"Google Play Services is available and up to date");  } else {    Log.d(TAG,"Google Play Status availability: " + googlePlayServicesAvailability);    if (apiAvailability.isUserResolvableError(googlePlayServicesAvailability)) {      Log.d(TAG,"...but we can fix it");      apiAvailability.getErrorDialog(parent,googlePlayServicesAvailability,DynamicStarMapActivity.GOOGLE_PLAY_SERVICES_REQUEST_CODE).show();    } else {      Log.d(TAG,"...and we can't fix it");      Toast.makeText(parent,R.string.play_services_error,Toast.LENGTH_LONG).show();    }  }  checkLocationServicesEnabled();}  }
class C{  public DataIOException(){  super();}  }
class C{  protected RTAMouseListener createMouseListener(){  return new RSyntaxTextAreaMutableCaretEvent(this);}  }
class C{  public static Object cast(Class c,Object object){  if (object == null || c.isInstance(object)) {    return object;  } else {    throw new ClassCastException(c.getName());  }}  }
class C{  boolean sendStartupMessage(Set recipients,long timeout,Set interfaces,String redundancyZone,boolean enforceUniqueZone) throws InterruptedException, ReplyException, java.net.UnknownHostException, IOException {  if (Thread.interrupted())   throw new InterruptedException();  StartupMessageReplyProcessor proc=new StartupMessageReplyProcessor(dm,recipients);  boolean isSharedConfigurationEnabled=false;  if (InternalLocator.hasLocator()) {    isSharedConfigurationEnabled=InternalLocator.getLocator().isSharedConfigurationEnabled();  }  StartupMessage msg=new StartupMessage(InternalLocator.getLocatorStrings(),isSharedConfigurationEnabled);  msg.setInterfaces(interfaces);  msg.setDistributedSystemId(dm.getConfig().getDistributedSystemId());  msg.setRedundancyZone(redundancyZone);  msg.setEnforceUniqueZone(enforceUniqueZone);  msg.setMcastEnabled(transport.isMcastEnabled());  msg.setMcastPort(dm.getSystem().getOriginalConfig().getMcastPort());  msg.setMcastHostAddress(dm.getSystem().getOriginalConfig().getMcastAddress());  msg.setTcpDisabled(transport.isTcpDisabled());  msg.setRecipients(recipients);  msg.setReplyProcessorId(proc.getProcessorId());  this.newlyDeparted=dm.sendOutgoing(msg);  if (this.newlyDeparted != null && !this.newlyDeparted.isEmpty()) {    for (Iterator it=this.newlyDeparted.iterator(); it.hasNext(); ) {      InternalDistributedMember id=(InternalDistributedMember)it.next();      this.dm.handleManagerDeparture(id,false,LocalizedStrings.StartupOperation_LEFT_THE_MEMBERSHIP_VIEW.toLocalizedString());      proc.memberDeparted(id,true);    }  }  if (proc.stillWaiting() && logger.isDebugEnabled()) {    logger.debug("Waiting {} milliseconds to receive startup responses",timeout);  }  boolean timedOut=true;  Set unresponsive=null;  try {    timedOut=!proc.waitForReplies(timeout);  }  finally {    if (timedOut) {      unresponsive=new HashSet();      proc.collectUnresponsiveMembers(unresponsive);      if (!unresponsive.isEmpty()) {        for (Iterator it=unresponsive.iterator(); it.hasNext(); ) {          InternalDistributedMember um=(InternalDistributedMember)it.next();          if (!dm.getViewMembers().contains(um)) {            it.remove();            dm.handleManagerDeparture(um,true,LocalizedStrings.StartupOperation_DISAPPEARED_DURING_STARTUP_HANDSHAKE.toLocalizedString());          } else           if (dm.isCurrentMember(um)) {            logger.warn(LocalizedMessage.create(LocalizedStrings.StartupOperation_MEMBERSHIP_RECEIVED_CONNECTION_FROM_0_BUT_RECEIVED_NO_STARTUP_RESPONSE_AFTER_1_MS,new Object[]{um,Long.valueOf(timeout)}));          }        }        this.dm.setUnfinishedStartups(unresponsive);        if (!unresponsive.isEmpty()) {          logger.warn(LocalizedMessage.create(LocalizedStrings.StartupOperation_MEMBERSHIP_STARTUP_TIMED_OUT_AFTER_WAITING_0_MILLISECONDS_FOR_RESPONSES_FROM_1,new Object[]{Long.valueOf(timeout),unresponsive}));        }      }    }  }  boolean problems;  problems=this.newlyDeparted != null && this.newlyDeparted.size() > 0;  return !problems;}  }
class C{  static void mark(AbstractBURS_TreeNode tn,byte goalnt){  if (VM.BuildForIA32) {    if (VM.BuildFor32Addr) {      org.jikesrvm.compilers.opt.lir2mir.ia32_32.BURS_STATE.mark(tn,goalnt);    } else {      org.jikesrvm.compilers.opt.lir2mir.ia32_64.BURS_STATE.mark(tn,goalnt);    }  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerPC);    if (VM.BuildFor32Addr) {      org.jikesrvm.compilers.opt.lir2mir.ppc_32.BURS_STATE.mark(tn,goalnt);    } else {      org.jikesrvm.compilers.opt.lir2mir.ppc_64.BURS_STATE.mark(tn,goalnt);    }  }}  }
class C{  private void removeFromSession(){  lock.lock();  try {    final String namespace=JoinTaskFactoryTask.getJoinTaskNamespace(masterUUID,orderIndex,partitionId);    dataService.getSession().remove(namespace,this);  }  finally {    lock.unlock();  }}  }
class C{  private boolean areArchiveFileChecksumsEqual(){  if (swcFileChecksums == null) {    if (Trace.swcChecksum) {      Trace.trace("areArchiveFileChecksumsEqual: no file checksum map, not equal");    }    return false;  }  Set<Map.Entry<String,Long>> dataSet=archiveFileChecksums.entrySet();  for (  Map.Entry<String,Long> entry : dataSet) {    String filename=entry.getKey();    Long dataFileLastModified=entry.getValue();    Long localFileLastModified=null;    LocalFile localFile=new LocalFile(new File(filename));    localFileLastModified=new Long(localFile.getLastModified());    if (!dataFileLastModified.equals(localFileLastModified)) {      if (Trace.swcChecksum) {        Trace.trace("areArchiveFileChecksumsEqual: not equal");        Trace.trace("filename = " + filename);        Trace.trace("last modified1 = " + dataFileLastModified);        Trace.trace("last modified2 = " + localFileLastModified);      }      return false;    }  }  if (Trace.swcChecksum) {    Trace.trace("areArchiveFileChecksumsEqual: equal");  }  return true;}  }
class C{  public String toString(DoubleMatrix1D matrix){  DoubleMatrix2D easy=matrix.like2D(1,matrix.size());  easy.viewRow(0).assign(matrix);  return toString(easy);}  }
class C{  private void addValueToRow(String key,Object value,Heading heading,List<Object> row){  if (heading.hasLabel(key)) {    Column col=heading.getColumnByLabel(key);    row.set(col.getIndex(),value);  } else   if (heading.hasAllCols()) {    int type=Heading.getTypeIdForObject(value);    Column newCol=new Column(key).setSqlType(type);    heading.add(newCol);    row.set(newCol.getIndex(),value);  }}  }
class C{  @Override public void onAction(Object actionData){  mSnackbarManager.dismissSnackbar(false);  mTab.reloadIgnoringCache();  DataReductionProxySettings.getInstance().incrementLoFiUserRequestsForImages();  DataReductionProxyUma.dataReductionProxyLoFiUIAction(DataReductionProxyUma.ACTION_LOAD_IMAGES_SNACKBAR_CLICKED);}  }
class C{  public void bind(){  int direction=this.builder.getBindDirection();  Object modelObject=getModelObject();  bind(direction,modelObject);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:33.622 -0500",hash_original_method="B80645FD27258B59A3B650E166B00E17",hash_generated_method="A5B61089733833334EA5476745C29883") public void onStorageStateChanged(String path,String oldState,String newState){}  }
class C{  public GuacamoleHTTPTunnel remove(String uuid){  return tunnelMap.remove(uuid);}  }
class C{  public static void fromString(OFFlowMod.Builder fmb,String bigString,Logger log){  List<OFAction> actions=new LinkedList<OFAction>();  if (bigString != null && !bigString.trim().isEmpty()) {    bigString=bigString.toLowerCase();    String[] bigStringSplit=bigString.split(",");    String[] tmp;    ArrayDeque<String[]> actionToDecode=new ArrayDeque<String[]>();    for (int i=0; i < bigStringSplit.length; i++) {      tmp=bigStringSplit[i].split("=");      if (tmp.length != 2) {        log.debug("Token " + bigStringSplit[i] + " does not have form 'key=value' parsing "+ bigString);      }      actionToDecode.add(tmp);    }    while (!actionToDecode.isEmpty()) {      String[] keyPair=actionToDecode.pollFirst();      String key;      String pair;      if (keyPair.length != 2) {        log.debug("[Key, Value] {} does not have form 'key=value' parsing, which is okay for some actions e.g. 'pop_vlan'.",keyPair);        key=keyPair[0];        pair="";      } else {        key=keyPair[0];        pair=keyPair[1];      }      OFAction a=null;      try {switch (key) {case STR_OUTPUT:          a=decode_output(pair,fmb.getVersion(),log);        break;case STR_ENQUEUE:      a=decode_enqueue(pair,fmb.getVersion(),log);    break;case STR_DL_SRC_SET:  a=decode_set_src_mac(pair,fmb.getVersion(),log);break;case STR_DL_DST_SET:a=decode_set_dst_mac(pair,fmb.getVersion(),log);break;case STR_EXPERIMENTER:log.error("OFAction EXPERIMENTER not implemented.");break;case STR_FIELD_SET:String[] actionData=pair.split(MatchUtils.SET_FIELD_DELIM);if (actionData.length != 2) {throw new IllegalArgumentException("[Action, Data] " + keyPair + " does not have form 'action=data'"+ actionData);}switch (actionData[0]) {case MatchUtils.STR_ARP_OPCODE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpOp().setValue(ArpOpcode.of(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpOp().setValue(ArpOpcode.of(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_ARP_SHA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpSha().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_ARP_DHA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpTha().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_ARP_SPA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpSpa().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_ARP_DPA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpTpa().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_ND_SSL:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6NdSll().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_ND_TTL:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6NdTll().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_ND_TARGET:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6NdTarget().setValue(IPv6Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_DL_TYPE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthType().setValue(EthType.of(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthType().setValue(EthType.of(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_DL_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthSrc().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_DL_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthDst().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_DL_VLAN:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanVid().setValue(OFVlanVidMatch.ofVlan(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanVid().setValue(OFVlanVidMatch.ofVlan(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_DL_VLAN_PCP:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanPcp().setValue(VlanPcp.of(Byte.parseByte(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanPcp().setValue(VlanPcp.of(Byte.parseByte(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMP_CODE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Code().setValue(ICMPv4Code.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Code().setValue(ICMPv4Code.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMP_TYPE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Type().setValue(ICMPv4Type.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Type().setValue(ICMPv4Type.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMPV6_CODE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Code().setValue(U8.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Code().setValue(U8.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMPV6_TYPE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Type().setValue(U8.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Type().setValue(U8.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_PROTO:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpProto().setValue(IpProtocol.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpProto().setValue(IpProtocol.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv4Src().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_NW_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv4Dst().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Src().setValue(IPv6Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Dst().setValue(IPv6Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_FLOW_LABEL:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Flabel().setValue(IPv6FlowLabel.of(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Flabel().setValue(IPv6FlowLabel.of(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_ECN:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpEcn().setValue(IpEcn.of(Byte.parseByte(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpEcn().setValue(IpEcn.of(Byte.parseByte(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_DSCP:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpDscp().setValue(IpDscp.of(Byte.parseByte(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpDscp().setValue(IpDscp.of(Byte.parseByte(actionData[1]))).build()).build();}break;case MatchUtils.STR_SCTP_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildSctpSrc().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_SCTP_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildSctpDst().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_TCP_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildTcpSrc().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_TCP_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildTcpDst().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_UDP_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildUdpSrc().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_UDP_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildUdpDst().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_MPLS_LABEL:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsLabel().setValue(U32.of(Long.parseLong(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsLabel().setValue(U32.of(Long.parseLong(actionData[1]))).build()).build();}break;case MatchUtils.STR_MPLS_TC:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsTc().setValue(U8.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsTc().setValue(U8.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_MPLS_BOS:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsBos().setValue(OFBooleanValue.of(Boolean.parseBoolean(actionData[1]))).build()).build();break;case MatchUtils.STR_METADATA:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMetadata().setValue(OFMetadata.of(U64.of(Long.parseLong(actionData[1].replaceFirst("0x",""),16)))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMetadata().setValue(OFMetadata.of(U64.of(Long.parseLong(actionData[1])))).build()).build();}break;default :log.error("UNEXPECTED OF1.3 SET-FIELD '{}'",actionData);break;}break;case STR_GROUP:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildGroup().setGroup(OFGroup.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildGroup().setGroup(OFGroup.of(Integer.parseInt(pair))).build();}break;case STR_MPLS_LABEL_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsLabel().setMplsLabel(Long.parseLong(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsLabel().setMplsLabel(Long.parseLong(pair)).build();}break;case STR_MPLS_POP:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPopMpls().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPopMpls().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_MPLS_PUSH:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushMpls().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushMpls().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_MPLS_TC_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTc().setMplsTc(Short.parseShort(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTc().setMplsTc(Short.parseShort(pair)).build();}break;case STR_MPLS_TTL_DEC:a=OFFactories.getFactory(fmb.getVersion()).actions().decMplsTtl();break;case STR_MPLS_TTL_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTtl().setMplsTtl(Short.parseShort(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTtl().setMplsTtl(Short.parseShort(pair)).build();}break;case STR_NW_TOS_SET:a=decode_set_tos_bits(pair,fmb.getVersion(),log);break;case STR_NW_SRC_SET:a=decode_set_src_ip(pair,fmb.getVersion(),log);break;case STR_NW_DST_SET:a=decode_set_dst_ip(pair,fmb.getVersion(),log);break;case STR_NW_ECN_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwEcn().setNwEcn(IpEcn.of(Byte.parseByte(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwEcn().setNwEcn(IpEcn.of(Byte.parseByte(pair))).build();}break;case STR_NW_TTL_DEC:a=OFFactories.getFactory(fmb.getVersion()).actions().decNwTtl();break;case STR_NW_TTL_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwTtl().setNwTtl(Short.parseShort(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwTtl().setNwTtl(Short.parseShort(pair)).build();}break;case STR_PBB_POP:a=OFFactories.getFactory(fmb.getVersion()).actions().popPbb();break;case STR_PBB_PUSH:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushPbb().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushPbb().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_QUEUE_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetQueue().setQueueId(Long.parseLong(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetQueue().setQueueId(Long.parseLong(pair)).build();}break;case STR_TP_SRC_SET:a=decode_set_src_port(pair,fmb.getVersion(),log);break;case STR_TP_DST_SET:a=decode_set_dst_port(pair,fmb.getVersion(),log);break;case STR_TTL_IN_COPY:a=OFFactories.getFactory(fmb.getVersion()).actions().copyTtlIn();break;case STR_TTL_OUT_COPY:a=OFFactories.getFactory(fmb.getVersion()).actions().copyTtlOut();break;case STR_VLAN_POP:a=OFFactories.getFactory(fmb.getVersion()).actions().popVlan();break;case STR_VLAN_PUSH:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushVlan().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushVlan().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_VLAN_STRIP:a=OFFactories.getFactory(fmb.getVersion()).actions().stripVlan();break;case STR_VLAN_SET_VID:a=decode_set_vlan_id(pair,fmb.getVersion(),log);break;case STR_VLAN_SET_PCP:a=decode_set_vlan_priority(pair,fmb.getVersion(),log);break;default :log.error("UNEXPECTED ACTION KEY '{}'",keyPair);break;}} catch (Exception e) {log.error("Illegal Action: " + e.getMessage());}if (a != null) {actions.add(a);}}log.debug("actions: {}",actions);fmb.setActions(actions);} else {log.debug("actions not found --> drop");}return;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(", name_2: ");  result.append(name_2);  result.append(')');  return result.toString();}  }
class C{  public List<Node> select(Collection<List<CssSelector>> selectorsCollection){  List<Node> results=new ArrayList<>();  for (  List<CssSelector> selectors : selectorsCollection) {    processSelectors(results,selectors);  }  return results;}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public RequestHandle delete(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpDelete(URI.create(url).normalize()),entity),contentType,responseHandler,context);}  }
class C{  public QueryRuleset(final String query) throws QueryRulesetException {  this.query=query;  setRules();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ServiceStateException(String message){  super(message);}  }
class C{  private void checkClasses(){  final int paramsModifiers=mParams.getModifiers();  final boolean paramsFinal=Modifier.isFinal(paramsModifiers);  final int builderModifiers=mBuilder.getModifiers();  final boolean builderFinal=Modifier.isFinal(builderModifiers);  error(paramsFinal == builderFinal,"Params,Builder: final modifier does not agree.");}  }
class C{  private void advanceRunState(int targetState){  for (; ; ) {    int c=ctl.get();    if (runStateAtLeast(c,targetState) || ctl.compareAndSet(c,ctlOf(targetState,workerCountOf(c))))     break;  }}  }
class C{  @Timed @ExceptionMetered @POST @Path("{name}") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public ClientDetailResponseV2 modifyClient(@Auth AutomationClient automationClient,@PathParam("name") String currentName,@Valid ModifyClientRequestV2 request){  Client client=clientDAO.getClient(currentName).orElseThrow(null);  String newName=request.name();  throw new NotImplementedException(format("Need to implement mutation methods in DAO to rename %s to %s",client.getName(),newName));}  }
class C{  public WordWrap append(String s){  s=collapseWs(s);  String prependNext=s.endsWith(" ") ? " " : "";  s=prepend + trimRight(s);  prepend=prependNext;  BreakIterator bi=BreakIterator.getLineInstance();  bi.setText(s);  int endOfLast=0;  int ii;  for (ii=0; ii < s.length(); ii++) {    if (exceedsWidth(endOfLast,ii)) {      endOfLast=addLineBreak(s,bi,endOfLast,ii);    }  }  if (exceedsWidth(endOfLast,ii)) {    ii--;    endOfLast=addLineBreak(s,bi,endOfLast,ii);  }  s=s.substring(endOfLast);  out.append(s);  return this;}  }
class C{  protected void validateTenantVcenter(VcenterParam param,Vcenter vcenter,Boolean validateConnection){  validateVcenterCommon(param,vcenter,validateConnection);  updateTenantVcenterCascadeTenancy(param,vcenter);  if (vcenter != null && vcenter.getCascadeTenancy().booleanValue() != param.getCascadeTenancy().booleanValue()) {    throw APIException.forbidden.tenantAdminCannotModifyCascadeTenancy(getUserFromContext().getName(),vcenter.getLabel());  }}  }
class C{  public boolean isCpuTime(){  return m_UseCpuTime && m_CanMeasureCpuTime;}  }
class C{  public Circle(){  numberOfObjects++;}  }
class C{  @SuppressWarnings("unchecked") public InputStream fetchVolumeStats(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating volume stats query");  InputStream iStream=null;  List<QueryStats> statList=new ArrayList<QueryStats>();  try {    Set<String> movers=(Set<String>)keyMap.get(VNXFileConstants.MOVERLIST);    if (null != movers && !movers.isEmpty()) {      for (      String moverID : movers) {        QueryStats queryStats=new QueryStats();        VolumeStatsSetQueryParams params=new VolumeStatsSetQueryParams();        params.setStatsSet(VolumeStatsSetType.ALL);        params.setMover(moverID);        queryStats.setVolumeStats(params);        statList.add(queryStats);      }      iStream=_vnxFileInputRequestBuilder.getMultiRequestQueryStatsPacket(statList);    } else {      _logger.error("No movers found to construct volumeStats query.");    }  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while fetching fileSystem info",jaxbException.getCause());  }  return iStream;}  }
class C{  public Assignment update(Border border){  Arrays.sort(cs);  int j=1;  boolean found=(cs[0].core == border.core);  for (int i=1; i < cs.length; i++) {    if (cs[i].core != cs[i - 1].core) {      cs[j++]=cs[i];    }    found|=(cs[i].core == border.core);  }  if (found) {    if (j == 1) {      Border r=cs[0];      cs=null;      return r;    }    if (j < cs.length) {      cs=Arrays.copyOf(cs,j);    }    return this;  }  if (j + 1 != cs.length) {    cs=Arrays.copyOf(cs,j + 1);  }  cs[j]=border;  return this;}  }
class C{  @Override public void writeData(CarbonMessage carbonMessage,File file,String mediaType,int chunkSize,CarbonCallback cb){  if (mediaType == null || mediaType.equals(MediaType.WILDCARD)) {    try {      mediaType=MimeMapper.getMimeType(FilenameUtils.getExtension(file.getName()));    } catch (    MimeMappingException e) {      mediaType=MediaType.WILDCARD;    }  }  try {    FileChannel fileChannel=new FileInputStream(file).getChannel();    if (chunkSize == Response.NO_CHUNK || chunkSize == Response.DEFAULT_CHUNK_SIZE) {      chunkSize=DEFAULT_CHUNK_SIZE;    }    carbonMessage.setHeader(Constants.HTTP_TRANSFER_ENCODING,CHUNKED);    carbonMessage.setHeader(Constants.HTTP_CONTENT_TYPE,mediaType);    carbonMessage.setBufferContent(false);    cb.done(carbonMessage);    ByteBuffer buffer=ByteBuffer.allocate(chunkSize);    while (fileChannel.read(buffer) != -1) {      buffer.flip();      carbonMessage.addMessageBody(buffer);    }    fileChannel.close();    carbonMessage.setEndOfMsgAdded(true);  } catch (  IOException e) {    throw new RuntimeException("Error occurred while reading from file",e);  }}  }
class C{  boolean isVariablePrecision(){  return variablePrecision;}  }
class C{  public SendablePhotoMessage.SendablePhotoMessageBuilder replyTo(Message replyTo){  this.replyTo=replyTo != null ? replyTo.getMessageId() : 0;  return this;}  }
class C{  @Override public boolean needsSolrIndexSearcher(){  return false;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public boolean execute(IGameState gameState){  boolean rc=super.execute(gameState);  if (!rc)   return false;  TicTacToeState state=(TicTacToeState)gameState;  SlideLogic logic=(SlideLogic)state.logic();  logic.doneTurn();  return true;}  }
class C{  public ClusterUpdateSettingsRequest transientSettings(Settings.Builder settings){  this.transientSettings=settings.build();  return this;}  }
class C{  private TimeSeries createSeries(){  RegularTimePeriod t=new Day();  TimeSeries series=new TimeSeries("Test");  series.add(t,1.0);  t=t.next();  series.add(t,2.0);  t=t.next();  series.add(t,null);  t=t.next();  series.add(t,4.0);  return series;}  }
class C{  public int lastIndexOfFromTo(int element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  int[] theElements=elements;  for (int i=to; i >= from; i--) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  public Hits search(String query) throws ParseException, IOException {  if (m_readMode) {    Query q;    if (fields.length == 1) {      q=QueryParser.parse(query,fields[0],analyzer);    } else {      q=MultiFieldQueryParser.parse(query,fields,analyzer);    }    return searcher.search(q);  } else {    throw new IllegalStateException("Searches can only be performed when " + "the LuceneSearcher is in read mode");  }}  }
class C{  public void indent(int n) throws SAXException {}  }
class C{  public SelectAllAction(final NetworkPanel networkPanel){  super("Select All");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SHORT_DESCRIPTION,"Select all network items");  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_A,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  networkPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke('a'),this);  networkPanel.getActionMap().put(this,this);}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public synchronized void delay(int ms){  checkDelayArgument(ms);  try {    Thread.sleep(ms);  } catch (  InterruptedException ite) {    ite.printStackTrace();  }}  }
class C{  public boolean acceptElement(){  probability*=((double)notRequiredElementsCounter) / ((double)populationCounter);  if (probability > randomValue) {    populationCounter--;    notRequiredElementsCounter--;    return false;  } else {    populationCounter--;    probability=1;    randomValue=1 - randomGenerator.nextDouble();    return true;  }}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_03(){  String host="new host";  int port=8080;  ByteBuffer bbR=ByteBuffer.allocate(100).asReadOnlyBuffer();  ByteBuffer[] bbA={bbR,ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer bb=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bb,bbA,0,bbA.length);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of ReadOnlyBufferException");  }}  }
class C{  public static byte[] copyToByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(BUFFER_SIZE);  copy(in,out);  return out.toByteArray();}  }
class C{  public ServerKeyExchange(BigInteger par1,BigInteger par2,BigInteger par3,byte[] hash){  this.par1=par1;  this.par2=par2;  this.par3=par3;  this.hash=hash;  bytes1=toUnsignedByteArray(this.par1);  bytes2=toUnsignedByteArray(this.par2);  length=4 + bytes1.length + bytes2.length;  if (hash != null) {    length+=2 + hash.length;  }  if (par3 == null) {    bytes3=null;    return;  }  bytes3=toUnsignedByteArray(this.par3);  length+=2 + bytes3.length;}  }
class C{  public Integer resultsTtl(){  return resultsTtl;}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public static String formatPeriod(final long startMillis,final long endMillis,final String format,final boolean padWithZeros,final TimeZone timezone){  Validate.isTrue(startMillis <= endMillis,"startMillis must not be greater than endMillis");  final Token[] tokens=lexx(format);  final Calendar start=Calendar.getInstance(timezone);  start.setTime(new Date(startMillis));  final Calendar end=Calendar.getInstance(timezone);  end.setTime(new Date(endMillis));  int milliseconds=end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);  int seconds=end.get(Calendar.SECOND) - start.get(Calendar.SECOND);  int minutes=end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);  int hours=end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);  int days=end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);  int months=end.get(Calendar.MONTH) - start.get(Calendar.MONTH);  int years=end.get(Calendar.YEAR) - start.get(Calendar.YEAR);  while (milliseconds < 0) {    milliseconds+=1000;    seconds-=1;  }  while (seconds < 0) {    seconds+=60;    minutes-=1;  }  while (minutes < 0) {    minutes+=60;    hours-=1;  }  while (hours < 0) {    hours+=24;    days-=1;  }  if (Token.containsTokenWithValue(tokens,M)) {    while (days < 0) {      days+=start.getActualMaximum(Calendar.DAY_OF_MONTH);      months-=1;      start.add(Calendar.MONTH,1);    }    while (months < 0) {      months+=12;      years-=1;    }    if (!Token.containsTokenWithValue(tokens,y) && years != 0) {      while (years != 0) {        months+=12 * years;        years=0;      }    }  } else {    if (!Token.containsTokenWithValue(tokens,y)) {      int target=end.get(Calendar.YEAR);      if (months < 0) {        target-=1;      }      while (start.get(Calendar.YEAR) != target) {        days+=start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);        if (start instanceof GregorianCalendar && start.get(Calendar.MONTH) == Calendar.FEBRUARY && start.get(Calendar.DAY_OF_MONTH) == 29) {          days+=1;        }        start.add(Calendar.YEAR,1);        days+=start.get(Calendar.DAY_OF_YEAR);      }      years=0;    }    while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {      days+=start.getActualMaximum(Calendar.DAY_OF_MONTH);      start.add(Calendar.MONTH,1);    }    months=0;    while (days < 0) {      days+=start.getActualMaximum(Calendar.DAY_OF_MONTH);      months-=1;      start.add(Calendar.MONTH,1);    }  }  if (!Token.containsTokenWithValue(tokens,d)) {    hours+=24 * days;    days=0;  }  if (!Token.containsTokenWithValue(tokens,H)) {    minutes+=60 * hours;    hours=0;  }  if (!Token.containsTokenWithValue(tokens,m)) {    seconds+=60 * minutes;    minutes=0;  }  if (!Token.containsTokenWithValue(tokens,s)) {    milliseconds+=1000 * seconds;    seconds=0;  }  return format(tokens,years,months,days,hours,minutes,seconds,milliseconds,padWithZeros);}  }
class C{  public static final TColor newGrayAlpha(float gray,float alpha){  TColor c=new TColor();  c.setRGB(new float[]{gray,gray,gray});  c.alpha=alpha;  return c;}  }
class C{  protected double smallestAngleBetweenWeights(int index){  double smallestAngle=Double.POSITIVE_INFINITY;  for (int i=0; i < weights.size(); i++) {    if (i != index) {      smallestAngle=Math.min(smallestAngle,acosine(weights.get(index),weights.get(i)));    }  }  return smallestAngle;}  }
class C{  private Base64(){}  }
class C{  protected Request(URI uri,String service) throws URISyntaxException {  if (uri != null) {    try {      this.setUri(uri);    } catch (    URISyntaxException e) {      Logging.logger().fine(Logging.getMessage("generic.URIInvalid",uri.toString()));      throw e;    }  }  this.initialize(service);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void clearRequestProperty(String name){  Assertions.checkNotNull(name);synchronized (requestProperties) {    requestProperties.remove(name);  }}  }
class C{  public static int printDocumentWordWrap(Graphics g,JTextComponent textComponent,Font font,int pageIndex,PageFormat pageFormat,int tabSize){  g.setColor(Color.BLACK);  g.setFont(font != null ? font : textComponent.getFont());  tabSizeInSpaces=tabSize;  fm=g.getFontMetrics();  int fontHeight=fm.getHeight();  final int LINE_LENGTH_IN_PIXELS=(int)pageFormat.getImageableWidth();  final int MAX_LINES_PER_PAGE=(int)pageFormat.getImageableHeight() / fontHeight;  final int STARTING_LINE_NUMBER=MAX_LINES_PER_PAGE * pageIndex;  RPrintTabExpander tabExpander=new RPrintTabExpander();  xOffset=(int)pageFormat.getImageableX();  int y=(int)pageFormat.getImageableY() + fm.getAscent() + 1;  int numPrintedLines=0;  Document doc=textComponent.getDocument();  rootElement=doc.getDefaultRootElement();  numDocLines=rootElement.getElementCount();  currentDocLineNumber=0;  int startingOffset=0;  while (currentDocLineNumber < numDocLines) {    Segment currentLineSeg=new Segment();    Element currentLine=rootElement.getElement(currentDocLineNumber);    int currentLineStart=currentLine.getStartOffset();    int currentLineEnd=currentLine.getEndOffset();    try {      doc.getText(currentLineStart + startingOffset,currentLineEnd - (currentLineStart + startingOffset),currentLineSeg);    } catch (    BadLocationException ble) {      System.err.println("BadLocationException in print (where there shouldn't be one!): " + ble);      return Printable.NO_SUCH_PAGE;    }    currentLineSeg=removeEndingWhitespace(currentLineSeg);    int currentLineLengthInPixels=Utilities.getTabbedTextWidth(currentLineSeg,fm,0,tabExpander,0);    if (currentLineLengthInPixels <= LINE_LENGTH_IN_PIXELS) {      currentDocLineNumber+=1;      startingOffset=0;    } else {      int currentPos=-1;      while (currentLineLengthInPixels > LINE_LENGTH_IN_PIXELS) {        currentLineSeg=removeEndingWhitespace(currentLineSeg);        currentPos=-1;        String currentLineString=currentLineSeg.toString();        for (int i=0; i < breakChars.length; i++) {          int pos=currentLineString.lastIndexOf(breakChars[i]) + 1;          if (pos > 0 && pos > currentPos & pos != currentLineString.length())           currentPos=pos;        }        if (currentPos == -1) {          currentPos=0;          do {            currentPos++;            try {              doc.getText(currentLineStart + startingOffset,currentPos,currentLineSeg);            } catch (            BadLocationException ble) {              System.err.println(ble);              return Printable.NO_SUCH_PAGE;            }            currentLineLengthInPixels=Utilities.getTabbedTextWidth(currentLineSeg,fm,0,tabExpander,0);          } while (currentLineLengthInPixels <= LINE_LENGTH_IN_PIXELS);          currentPos--;        }        try {          doc.getText((currentLineStart + startingOffset),currentPos,currentLineSeg);        } catch (        BadLocationException ble) {          System.err.println("BadLocationException in print (a):");          System.err.println("==> currentLineStart: " + currentLineStart + "; startingOffset: "+ startingOffset+ "; currentPos: "+ currentPos);          System.err.println("==> Range: " + (currentLineStart + startingOffset) + " - "+ (currentLineStart + startingOffset + currentPos));          ble.printStackTrace();          return Printable.NO_SUCH_PAGE;        }        currentLineLengthInPixels=Utilities.getTabbedTextWidth(currentLineSeg,fm,0,tabExpander,0);      }      startingOffset+=currentPos;    }    numPrintedLines++;    if (numPrintedLines > STARTING_LINE_NUMBER) {      Utilities.drawTabbedText(currentLineSeg,xOffset,y,g,tabExpander,0);      y+=fontHeight;      if (numPrintedLines == STARTING_LINE_NUMBER + MAX_LINES_PER_PAGE)       return Printable.PAGE_EXISTS;    }  }  if (numPrintedLines > STARTING_LINE_NUMBER)   return Printable.PAGE_EXISTS;  return Printable.NO_SUCH_PAGE;}  }
class C{  public boolean isCached(String url){  checkNotNull(url,"Url can't be null!");  return getCacheFile(url).exists();}  }
class C{  @UiHandler("cancelButton") public void handleCancelClick(final ClickEvent event){  this.actionDelegate.cancelled();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.799 -0500",hash_original_method="3C215F763D4714C2B1E8B4A6445CBFDE",hash_generated_method="DAAA573F0655E75EC0107C9511603F80") private static void runForkMode() throws MethodAndArgsCaller {  while (true) {    ZygoteConnection peer=acceptCommandPeer();    int pid;    pid=Zygote.fork();    if (pid == 0) {      try {        sServerSocket.close();      } catch (      IOException ex) {        Log.e(TAG,"Zygote Child: error closing sockets",ex);      } finally {        sServerSocket=null;      }      peer.run();      break;    } else     if (pid > 0) {      peer.closeSocket();    } else {      throw new RuntimeException("Error invoking fork()");    }  }}  }
class C{  public void free(Endpoint ep){  if (ep instanceof TCPEndpoint) {synchronized (channelTable) {      Reference<TCPChannel> ref=channelTable.remove(ep);      if (ref != null) {        TCPChannel channel=ref.get();        if (channel != null) {          channel.shedCache();        }      }    }  }}  }
class C{  public int totalIncludeRules(){  return includesCount;}  }
class C{  private void showUploadTaskDialog(){  if (mUploadProgress == null) {    throw new IllegalArgumentException("Export progress dialog must not be null");  }  if (mUploadTaskFragment.isExecuting()) {    mUploadTaskFragment.restoreProgress(mUploadProgress);    if (!mUploadProgress.isShowing()) {      mUploadProgress.show();    }  }}  }
class C{  public boolean isRenamed(Object element){  return fNewNames.keySet().contains(element);}  }
class C{  public TextEditingTool(TextHolderFigure typingTarget){  this.typingTarget=typingTarget;}  }
class C{  public MixedRadixNumber(long value,int[] radices){  this.value=value;  this.radices=new int[radices.length];  System.arraycopy(radices,0,this.radices,0,radices.length);  calculateMaxValue();}  }
class C{  public LogWindow(){  initComponents();  movingEnd=true;  setLocationRelativeTo(null);  txtLog.setEditable(false);  DoubleOutputStream out=new DoubleOutputStream(new LogWindowOutputStream(this,Level.INFO),System.out);  System.setOut(new LauncherPrintStream(out));  DoubleOutputStream err=new DoubleOutputStream(new LogWindowOutputStream(this,Level.ERROR),System.err);  System.setErr(new LauncherPrintStream(err));}  }
class C{  public double distance(final Double2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static weka.core.Instance tcInstanceToMekaInstance(Instance instance,Instances trainingData,List<String> allClassLabels) throws Exception {  AttributeStore attributeStore=new AttributeStore();  List<Attribute> outcomeAttributes=createOutcomeAttributes(allClassLabels);  for (  Attribute attribute : outcomeAttributes) {    attributeStore.addAttributeAtBegin(attribute.name(),attribute);  }  for (int i=outcomeAttributes.size(); i < trainingData.numAttributes(); i++) {    attributeStore.addAttribute(trainingData.attribute(i).name(),trainingData.attribute(i));  }  double[] featureValues=getFeatureValues(attributeStore,instance);  SparseInstance sparseInstance=new SparseInstance(1.0,featureValues);  trainingData.setClassIndex(outcomeAttributes.size());  sparseInstance.setDataset(trainingData);  return sparseInstance;}  }
class C{  public MSession(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public void write(String s,int off,int len){  if (text != null) {    text.append(s.substring(off,off + len));    if ((col+=len) > wrap)     println();  } else {    super.write(s,off,len);    flush();  }}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames) throws RuntimeCopyException {  try {    return new CodeAttribute(newCp,this,classnames);  } catch (  BadBytecode e) {    throw new RuntimeCopyException("bad bytecode. fatal?");  }}  }
class C{  protected boolean calculateSize(){  if (p_sizeCalculated)   return true;  FontRenderContext frc=new FontRenderContext(null,true,true);  TextLayout layout=null;  p_height=0f;  p_width=0f;  if (p_maxWidth == 0f && p_maxHeight == 0f) {    for (int i=0; i < m_string_paper.length; i++) {      AttributedCharacterIterator iter=m_string_paper[i].getIterator();      if (iter.getBeginIndex() == iter.getEndIndex())       continue;      int tabPos=-1;      for (char c=iter.first(); c != CharacterIterator.DONE && tabPos == -1; c=iter.next()) {        if (c == '\t')         tabPos=iter.getIndex();      }      if (tabPos == -1) {        layout=new TextLayout(iter,frc);        p_height+=layout.getAscent() + layout.getDescent() + layout.getLeading();        if (p_width < layout.getAdvance())         p_width=layout.getAdvance();      } else {        LineBreakMeasurer measurer=new LineBreakMeasurer(iter,frc);        layout=measurer.nextLayout(9999,tabPos,false);        p_height+=layout.getAscent() + layout.getDescent() + layout.getLeading();        float width=getTabPos(0,layout.getAdvance());        layout=measurer.nextLayout(9999,iter.getEndIndex(),true);        width+=layout.getAdvance();        if (p_width < width)         p_width=width;      }    }    if (m_check != null) {      p_width+=LayoutEngine.IMAGE_SIZE.width;      if (p_height < LayoutEngine.IMAGE_SIZE.height)       p_height=LayoutEngine.IMAGE_SIZE.height;    }  } else {    p_width=p_maxWidth;    for (int i=0; i < m_string_paper.length; i++) {      AttributedCharacterIterator iter=m_string_paper[i].getIterator();      if (iter.getBeginIndex() == iter.getEndIndex())       continue;      LineBreakMeasurer measurer=new LineBreakMeasurer(iter,frc);      while (measurer.getPosition() < iter.getEndIndex()) {        layout=measurer.nextLayout(p_maxWidth);        float lineHeight=layout.getAscent() + layout.getDescent() + layout.getLeading();        if (p_maxHeight == -1f && i == 0)         p_maxHeight=lineHeight;        if (p_maxHeight == 0f || (p_height + lineHeight) <= p_maxHeight)         p_height+=lineHeight;      }    }    if (m_check != null) {      if (p_height < LayoutEngine.IMAGE_SIZE.height)       p_height=LayoutEngine.IMAGE_SIZE.height;    }  }  if (p_FieldAlignmentType != null) {    boolean changed=false;    if (p_height < p_maxHeight) {      p_height=p_maxHeight;      changed=true;    }    if (p_width < p_maxWidth) {      p_width=p_maxWidth;      changed=true;    }  }  return true;}  }
class C{  public void run(String outdir){  TransitLine line;  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  sc.getConfig().transit().setUseTransit(true);  this.newSchedule=sc.getTransitSchedule();  this.newVehicles=((MutableScenario)sc).getTransitVehicles();  TransitScheduleFactory factory=this.newSchedule.getFactory();  for (  VehicleType t : this.vehicles.getVehicleTypes().values()) {    this.newVehicles.addVehicleType(t);  }  for (  Vehicle v : this.vehicles.getVehicles().values()) {    this.newVehicles.addVehicle(v);  }  for (  TransitStopFacility facility : this.schedule.getFacilities().values()) {    this.newSchedule.addStopFacility(facility);  }  for (  TransitLine oldLine : this.schedule.getTransitLines().values()) {    if (!this.ptMode2LineSetter.getLineId2ptModeMap().containsKey(oldLine.getId())) {      this.newSchedule.addTransitLine(oldLine);      continue;    }    if (!this.modes2Cut.contains(this.ptMode2LineSetter.getLineId2ptModeMap().get(oldLine.getId()))) {      this.newSchedule.addTransitLine(oldLine);      continue;    }    line=factory.createTransitLine(oldLine.getId());    for (    TransitRoute newRoute : handleRoutes(factory,oldLine.getRoutes().values())) {      line.addRoute(newRoute);    }    if (line.getRoutes().isEmpty()) {      log.warn("line " + oldLine.getId().toString() + " seems to be covered completely by the ``area to cut''. Thus, the line is completely deleted...");    } else {      this.newSchedule.addTransitLine(line);    }  }  if (!(outdir == null)) {    new TransitScheduleWriter(this.newSchedule).writeFile(outdir + "cuttedSchedule.xml.gz");    new VehicleWriterV1(this.newVehicles).writeFile(outdir + "cuttedScheduleVehicles.xml.gz");  }}  }
class C{  @Override public void previous(Long maxId,Callback<TimelineResult<Tweet>> cb){  createUserTimelineRequest(null,decrementMaxId(maxId)).enqueue(new TweetsCallback(cb));}  }
class C{  public final long consumption(){  return ((long)pages.size()) << 12;}  }
class C{  public DataFilterCriterion.Builder<Select<T>> and(){  return new DataFilterCriterion.Builder<>(this,DataFilterClause.DataFilterConjunction.AND);}  }
class C{  public final void addElements(int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_firstFree+=numberOfElements;}  }
class C{  public Date(long date){}  }
class C{  public OperationDefinitionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  mLastResponse=response;}  }
class C{  public EvalStateNodeNumber newChildNum(int newStateNumber){  int[] num=new int[stateNumber.length + 1];  System.arraycopy(stateNumber,0,num,0,stateNumber.length);  num[stateNumber.length]=newStateNumber;  return new EvalStateNodeNumber(num);}  }
class C{  public TestCase replaceTest(String targetClass,List<TestCase> otherTests,TestCase test){  Properties.ALGORITHM=Algorithm.MONOTONICGA;  Properties.STRATEGY=Strategy.ONEBRANCH;  ExecutionTracer.enableTraceCalls();  PropertiesTestGAFactory algorithmFactory=new PropertiesTestGAFactory();  GeneticAlgorithm<TestChromosome> ga=algorithmFactory.getSearchAlgorithm();  List<TestFitnessFactory<? extends TestFitnessFunction>> factories=TestSuiteGenerator.getFitnessFactories();  Collection<TestFitnessFunction> fitnessFunctions=new ArrayList<TestFitnessFunction>();  for (  TestFitnessFactory<? extends TestFitnessFunction> factory : factories) {    DifferenceFitnessFunction fitnessFunction=new DifferenceFitnessFunction(test,otherTests,factory);    fitnessFunctions.add(fitnessFunction);    ga.addFitnessFunction(fitnessFunction);  }  ga.generateSolution();  TestChromosome testChromosome=(TestChromosome)ga.getBestIndividual();  TestCaseMinimizer minimizer=new TestCaseMinimizer(fitnessFunctions);  minimizer.minimize(testChromosome);  System.out.println("Best individual has fitness: " + testChromosome.getFitness());  return testChromosome.getTestCase();}  }
class C{  private Metric predictAnomalies(Map<Long,String> metricData){  Metric predictions=new Metric(getResultScopeName(),getResultMetricName());  Map<Long,String> predictionDatapoints=new HashMap<>();  for (  Map.Entry<Long,String> entry : metricData.entrySet()) {    Long timestamp=entry.getKey();    double value=Double.parseDouble(entry.getValue());    try {      double anomalyScore=calculateAnomalyScore(value);      predictionDatapoints.put(timestamp,String.valueOf(anomalyScore));    } catch (    ArithmeticException e) {      continue;    }  }  predictions.setDatapoints(predictionDatapoints);  return predictions;}  }
class C{  @SuppressWarnings("deprecation") private DataResultSet createExcel2007ResultSet(Operator operator,XlsxReadMode readMode,DateFormatProvider provider) throws OperatorException {  if (operator == null || operator.getCompatibilityLevel().isAbove(ExcelExampleSource.CHANGE_6_2_0_OLD_XLSX_IMPORT)) {    return createXLSXResultSet(operator,readMode,provider);  } else {    return new Excel2007ResultSet(operator,this);  }}  }
class C{  protected final void outputLineSep() throws IOException {  m_writer.write(m_lineSep,0,m_lineSepLen);}  }
class C{  private boolean testMailServer(InetAddress mailServer,InternetAddress adminEMail,String mailUser,String mailPassword){  boolean isGmail=mailServer.getHostName().equalsIgnoreCase("smtp.gmail.com");  boolean smtpOK=false;  boolean imapOK=false;  if (testPort(mailServer,isGmail ? 587 : 25,true)) {    log.config("OK: SMTP Server contacted");    smtpOK=true;  } else   log.info("SMTP Server NOT available");  if (testPort(mailServer,isGmail ? 995 : 110,true))   log.config("OK: POP3 Server contacted"); else   log.info("POP3 Server NOT available");  if (testPort(mailServer,isGmail ? 993 : 143,true)) {    log.config("OK: IMAP4 Server contacted");    imapOK=true;  } else   log.info("IMAP4 Server NOT available");  if (!smtpOK) {    String error="No active Mail Server";    if (p_panel != null)     p_panel.signalOK(p_panel.okMailServer,"ErrorMailServer",false,false,error);    log.warning(error);    return false;  }  try {    EMail email=new EMail(new Properties(),mailServer.getHostName(),adminEMail.toString(),adminEMail.toString(),"Adempiere Server Setup Test","Test: " + getProperties());    email.createAuthenticator(mailUser,mailPassword);    if (EMail.SENT_OK.equals(email.send())) {      log.info("OK: Send Test Email to " + adminEMail);    } else {      log.warning("Could NOT send Email to " + adminEMail);    }  } catch (  Exception ex) {    log.severe(ex.getLocalizedMessage());    return false;  }  if (!imapOK)   return false;  Properties props=new Properties();  props.put("mail.store.protocol","smtp");  props.put("mail.transport.protocol","smtp");  props.put("mail.host",mailServer.getHostName());  props.put("mail.user",mailUser);  props.put("mail.smtp.auth","true");  if (isGmail) {    props.put("impa.smtp.port","993");    props.put("mail.store.protocol","imaps");  }  log.config("Connecting to " + mailServer.getHostName());  Session session=null;  Store store=null;  try {    EMailAuthenticator auth=new EMailAuthenticator(mailUser,mailPassword);    session=Session.getDefaultInstance(props,auth);    session.setDebug(CLogMgt.isLevelFinest());    log.config("Session=" + session);    store=session.getStore(isGmail ? "imaps" : "imap");    log.config("Store=" + store);  } catch (  NoSuchProviderException nsp) {    log.warning("Mail IMAP Provider - " + nsp.getMessage());    return false;  }catch (  Exception e) {    log.warning("Mail IMAP - " + e.getMessage());    return false;  }  try {    store.connect(mailServer.getHostName(),mailUser,mailPassword);    log.config("Store - connected");    Folder folder=store.getDefaultFolder();    Folder inbox=folder.getFolder("INBOX");    log.info("OK: Mail Connect to " + inbox.getFullName() + " #Msg="+ inbox.getMessageCount());    store.close();  } catch (  MessagingException mex) {    log.severe("Mail Connect " + mex.getMessage());    return false;  }  return true;}  }
class C{  public ModuleUnloadedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public void testBug23304() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  Connection connShow=null;  Connection connInfoSchema=null;  ResultSet rsShow=null;  ResultSet rsInfoSchema=null;  try {    Properties noInfoSchemaProps=new Properties();    noInfoSchemaProps.setProperty("useInformationSchema","false");    Properties infoSchemaProps=new Properties();    infoSchemaProps.setProperty("useInformationSchema","true");    infoSchemaProps.setProperty("dumpQueriesOnException","true");    connShow=getConnectionWithProps(noInfoSchemaProps);    connInfoSchema=getConnectionWithProps(infoSchemaProps);    DatabaseMetaData dbmdUsingShow=connShow.getMetaData();    DatabaseMetaData dbmdUsingInfoSchema=connInfoSchema.getMetaData();    assertNotSame(dbmdUsingShow.getClass(),dbmdUsingInfoSchema.getClass());    rsShow=dbmdUsingShow.getSchemas();    rsInfoSchema=dbmdUsingInfoSchema.getSchemas();    compareResultSets(rsShow,rsInfoSchema);    createTable("t_testBug23304","(field1 int primary key not null, field2 tinyint, field3 mediumint, field4 mediumint, field5 bigint, field6 float, field7 double, field8 decimal, field9 char(32), field10 varchar(32), field11 blob, field12 mediumblob, field13 longblob, field14 text, field15 mediumtext, field16 longtext, field17 date, field18 time, field19 datetime, field20 timestamp)");    rsShow=dbmdUsingShow.getColumns(connShow.getCatalog(),null,"t_testBug23304","%");    rsInfoSchema=dbmdUsingInfoSchema.getColumns(connInfoSchema.getCatalog(),null,"t_testBug23304","%");    compareResultSets(rsShow,rsInfoSchema);  }  finally {    if (rsShow != null) {      rsShow.close();    }    if (rsInfoSchema != null) {      rsInfoSchema.close();    }  }}  }
class C{  public void addCertificate(X509CertificateHolder certificate) throws CMSException {  certs.add(certificate.toASN1Structure());}  }
class C{  public void addCertStore(CertStore store){  if (store == null) {    return;  }  if (certStores == null) {    certStores=new ArrayList<CertStore>();  }  certStores.add(store);}  }
class C{  protected ImportDeclarationImpl(){  super();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  Agent a=(Agent)stack.pop();  int newMask=a.getAgentMask();  if (s != null && s.length() > 0)   newMask=newMask | Agent.RATED_MASK; else   newMask=newMask & (~Agent.RATED_MASK);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,a.getTitle(),a.getCategory(),a.getSubCategory(),a.getPersonObj(),a.getRole(),s,a.getYear(),a.getPR(),a.getNetwork(),a.getChannelName(),a.getSlotType(),a.getTimeslots(),a.getKeyword());    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.279 -0500",hash_original_method="E06F0431A63DD6BC92462DEC6B607411",hash_generated_method="818FFFC000C1E64D94E8782637F58CAD") @SuppressWarnings("unchecked") private static int countRunAndMakeAscending(Object[] a,int lo,int hi){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public void remove(@Nullable String spaceName,SwapKey key,@Nullable IgniteInClosure<byte[]> c,@Nullable ClassLoader ldr) throws IgniteCheckedException {  assert key != null;  try {    getSpi().remove(spaceName,key,c,context(ldr));  } catch (  IgniteSpiException e) {    throw new IgniteCheckedException("Failed to remove from swap space [space=" + spaceName + ", key="+ key+ ']',e);  }}  }
class C{  final void performAppGcLocked(ProcessRecord app){  try {    app.lastRequestedGc=SystemClock.uptimeMillis();    if (app.thread != null) {      if (app.reportLowMemory) {        app.reportLowMemory=false;        app.thread.scheduleLowMemory();      } else {        app.thread.processInBackground();      }    }  } catch (  Exception e) {  }}  }
class C{  private void validateTableMetaDataNoRow(String tableNamePattern,String[] types) throws Exception {  try (ResultSet tables=dbmd.getTables(null,null,tableNamePattern,types)){    assertFalse(String.format("Expected empty result set for requesting %s with types %s",tableNamePattern,Arrays.toString(types)),tables.next());  } }  }
class C{  public final TextBuilder append(char c){  if (_length >= _capacity)   increaseCapacity();  _high[_length >> B1][_length & M1]=c;  _length++;  return this;}  }
class C{  public void releaseAnyConnection(Connection connection) throws SQLException {  try {    connection.close();  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  public MessageBuilder appendMention(Role role){  builder.append("<@&").append(role.getId()).append('>');  mentionedRoles.add(role);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.466 -0400",hash_original_method="127897D68763B06BD1F47963952B8B27",hash_generated_method="C6EE54D192402F087B5D936DEF643E7F") static int difference(StringEncoder encoder,String s1,String s2) throws EncoderException {  return differenceEncoded(encoder.encode(s1),encoder.encode(s2));}  }
class C{  private static boolean updateNote(String host,String hash,Note note) throws IOException, JSONException, AuthenticatorException {  HttpURLConnection urlConnection=null;  BufferedReader reader=null;  String jsonStr;  String path=host + "/api/v1/notebooks/" + note.getNotebookId()+ "/notes/"+ note.getId();  try {    URL url=new URL(path);    urlConnection=(HttpURLConnection)url.openConnection();    urlConnection.setRequestProperty("Content-Type","application/json; charset=UTF-8");    urlConnection.setRequestProperty("Accept","application/json");    urlConnection.setRequestProperty("Authorization","Basic " + hash);    urlConnection.setConnectTimeout(10000);    urlConnection.setReadTimeout(15000);    urlConnection.setRequestMethod("PUT");    urlConnection.connect();    JSONObject jsonNote=new JSONObject();    jsonNote.put("title",note.getTitle());    jsonNote.put("content",note.getContent());    OutputStream outputStream=urlConnection.getOutputStream();    outputStream.write(jsonNote.toString().getBytes());    outputStream.flush();    outputStream.close();    InputStream inputStream=urlConnection.getInputStream();    StringBuilder builder=new StringBuilder();    reader=new BufferedReader(new InputStreamReader(inputStream));    String line;    while ((line=reader.readLine()) != null) {      builder.append(line).append("\n");    }    jsonStr=builder.toString();    int responseCode=urlConnection.getResponseCode();    if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {      throw new AuthenticatorException("Authentication failed");    } else     if (responseCode != HttpURLConnection.HTTP_OK) {      Log.d(LOG_TAG,"Error while creating note, response code: " + urlConnection.getResponseCode());      throw new ConnectException();    } else {      JSONObject json=new JSONObject(jsonStr);      if (json.getBoolean("success")) {        return true;      } else {        throw new ConnectException();      }    }  }  finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    if (reader != null) {      try {        reader.close();      } catch (      final IOException e) {        Log.e(LOG_TAG,"Error closing stream",e);      }    }  }}  }
class C{  public static void writeSignedVarintLong(ByteBuffer buffer,long val){  writeUnsignedVarintLong(buffer,(val << 1) ^ (val >> 63));}  }
class C{  public void makeClass(char singleChar,boolean caseless){  makeClass(new IntCharSet(singleChar),caseless);}  }
class C{  void addEdge(MethodParameter in,MethodParameter out){  Set<MethodParameter> outs=graph.get(in);  if (outs == null) {    outs=new HashSet<>();    graph.put(in,outs);  }  outs.add(out);}  }
class C{  public boolean hasDetail(){  return hasValue();}  }
class C{  protected Class loadClass(final String name,boolean resolve) throws ClassNotFoundException {  return loadClass(name,true,true,resolve);}  }
class C{  public boolean hasQueries(){  return hasRepeatingExtension(QueryParameter.class);}  }
class C{  public static boolean isNumeric(String text){  try {    Double.parseDouble(text);  } catch (  NumberFormatException e) {    return false;  }  return true;}  }
class C{  public boolean isPolygon(){  return isPolygon;}  }
class C{  public RunConfigState(){}  }
class C{  private JPopupMenu createPopupMenu(final IconNode selectedNode){  final JPopupMenu menu=new JPopupMenu();  if (selectedNode instanceof TypeMemberTreeNode) {    menu.add(new EditMemberAction(graphModel.getParent(),getTypeManager(),((TypeMemberTreeNode)selectedNode).getTypeMember()));    return menu;  }  if (selectedNode instanceof BaseTypeTreeNode) {    menu.add(new EditTypeAction(graphModel.getParent(),getTypeManager(),((BaseTypeTreeNode)selectedNode).getBaseType()));    return menu;  }  if (selectedNode instanceof InstructionNode) {    final ViewReferencesTableModel model=(ViewReferencesTableModel)referencesTable.getModel();    if (model.getTypeInstanceReference((InstructionNode)selectedNode) != null) {      menu.add(new EditTypeInstanceAction(graphModel.getParent(),getTypeManager(),model.getTypeInstanceReference((InstructionNode)selectedNode).getTypeInstance(),getTypeInstanceContainer()));    }    if (model.getTypeSubstitution((InstructionNode)selectedNode) != null) {      try {        menu.add(TypeSubstitutionAction.instantiateEditTypeSubstitution(graphModel.getParent(),getTypeManager(),graphModel.getGraph().getRawView().getConfiguration().getModule().getContent().getFunctionContainer().getFunction(graphModel.getGraph().getRawView().getConfiguration().getName()).getStackFrame(),model.getTypeSubstitution((InstructionNode)selectedNode).getOperandTreeNode()));      } catch (      MaybeNullException exception) {        exception.printStackTrace();      }    }    return menu;  }  return null;}  }
class C{  private void checkAndReconfigSiteZKModes(){  List<String> readOnlyNodes=new ArrayList<>();  List<String> observerNodes=new ArrayList<>();  int numOnline=0;  for (  String node : coordinatorExt.getAllNodeIds()) {    String nodeState=drUtil.getCoordinatorMode(node);    if (nodeState == null) {      log.debug("State for {}: null",node);      continue;    } else     if (DrUtil.ZOOKEEPER_MODE_READONLY.equals(nodeState)) {      readOnlyNodes.add(node);    } else     if (DrUtil.ZOOKEEPER_MODE_OBSERVER.equals(nodeState)) {      observerNodes.add(node);    }    log.debug("State for {}: {}",node,nodeState);    numOnline++;  }  int numParticipants=numOnline - readOnlyNodes.size() - observerNodes.size();  int quorum=coordinatorExt.getNodeCount() / 2 + 1;  log.debug("Observer nodes: {}",observerNodes.size());  log.debug("Read Only nodes: {}",readOnlyNodes.size());  log.debug("Participant nodes: {}",numParticipants);  log.debug("nodes Online: {}",numOnline);  if (0 < numParticipants && numParticipants < numOnline) {    log.info("Nodes must have consistent zk mode. Reconfiguring all nodes to participant: {}",observerNodes.addAll(readOnlyNodes));    reconfigZKToWritable(observerNodes,readOnlyNodes);  } else   if (readOnlyNodes.size() == numOnline && numOnline >= quorum) {    log.info("A quorum of nodes are read-only, Reconfiguring nodes to participant: {}",readOnlyNodes);    reconfigZKToWritable(observerNodes,readOnlyNodes);  }}  }
class C{  private void InitConsole(){  jLabConsole=new gExec.gui.gLabConsole();  gExec.Interpreter.GlobalValues.userConsole=jLabConsole;  int xSize=GlobalValues.gLabMainFrame.getSize().width;  Font consoleFont=GlobalValues.consoleOutputWindow.output.getFont();  int pts=consoleFont.getSize();  GlobalValues.consoleCharsPerLine=(int)(0.8 * (xSize / pts));  SwingUtilities.invokeLater(null);}  }
class C{  public MyTableModel(SwingGui debugGui){  this.debugGui=debugGui;  expressions=Collections.synchronizedList(new ArrayList<String>());  values=Collections.synchronizedList(new ArrayList<String>());  expressions.add("");  values.add("");}  }
class C{  public void update(){  if (parseStyle == ParseStyle.CHARACTER) {    wrapText();    int begin=getPosition();    int end=getPosition() + 1;    setCurrentItem(new TextItem(begin,end,getText().substring(begin,end)));    setPosition(end);  } else   if (parseStyle == ParseStyle.WORD) {    if (matcher == null) {      return;    }    wrapText();    boolean matchFound=findNextToken();    if (matchFound) {      selectCurrentToken();    } else {      setPosition(0);      updateMatcher();      if (findNextToken()) {        selectCurrentToken();      }    }  }}  }
class C{  public void addProperty(VCardProperty property){  properties.put(property.getClass(),property);}  }
class C{  private Object writeReplace(){  return new SerializationProxy(this);}  }
class C{  static Thread currentThread(){  return RVMThread.getCurrentThread().getJavaLangThread();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-19 13:30:38.250 -0400",hash_original_method="27AB5F2A5A8B2AC4357EE65702D51A87",hash_generated_method="5F18116A5451AEF5520523E56814353B") private void updateAppearance(){  if (mAdapter.getCount() > 0) {    mExpandActivityOverflowButton.setEnabled(true);  } else {    mExpandActivityOverflowButton.setEnabled(false);  }  final int activityCount=mAdapter.getActivityCount();  final int historySize=mAdapter.getHistorySize();  if (activityCount == 1 || activityCount > 1 && historySize > 0) {    mDefaultActivityButton.setVisibility(VISIBLE);    ResolveInfo activity=mAdapter.getDefaultActivity();    PackageManager packageManager=getContext().getPackageManager();    mDefaultActivityButtonImage.setImageDrawable(activity.loadIcon(packageManager));    if (mDefaultActionButtonContentDescription != 0) {      CharSequence label=activity.loadLabel(packageManager);      String contentDescription=getContext().getString(mDefaultActionButtonContentDescription,label);      mDefaultActivityButton.setContentDescription(contentDescription);    }  } else {    mDefaultActivityButton.setVisibility(View.GONE);  }  if (mDefaultActivityButton.getVisibility() == VISIBLE) {    mActivityChooserContent.setBackgroundDrawable(mActivityChooserContentBackground);  } else {    mActivityChooserContent.setBackgroundDrawable(null);  }}  }
class C{  public Observable<ReactiveXCameraData> successiveDataRequest(){  return new SuccessiveDataRequest(reactiveXCamera).get();}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.TYPE_FAKE_DEFINITION;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public RecordSetPage(Input input){  Deserializer deserizalizer=new Deserializer();  Map mapResult=deserizalizer.deserialize(input,Map.class);  cursor=(Integer)mapResult.get("Cursor");  data=(List<List<Object>>)mapResult.get("Page");}  }
class C{  @Override public void mapClickAction(){}  }
class C{  public XYAreaRenderer(int type){  this(type,null,null);}  }
class C{  public CacheRuntimeException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static NeuralNetwork readFrom(String filename) throws IOException, ClassNotFoundException {  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(filename));  NeuralNetwork net=(NeuralNetwork)ois.readObject();  ois.close();  return net;}  }
class C{  static void closeQuietly(Closeable closeable){  try {    if (closeable != null) {      closeable.close();    }  } catch (  IOException ioe) {  }}  }
class C{  public static double mean(final List<Double> list){  double sum=0;  for (  Double number : list) {    sum+=number;  }  return sum / list.size();}  }
class C{  public void addComponentSelectionListener(final ComponentSelectionListener l){  myListenerList.add(ComponentSelectionListener.class,l);}  }
class C{  public final void testGetPublicExponent(){  RSAPublicKeySpec rpks=new RSAPublicKeySpec(BigInteger.valueOf(3L),BigInteger.valueOf(1234567890L));  assertTrue(BigInteger.valueOf(1234567890L).equals(rpks.getPublicExponent()));}  }
class C{  public static boolean hasValidJarContent(final File jarFile){  try {    return hasValidJarContent(new FileInputStream(jarFile));  } catch (  IOException ioex) {    return false;  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 194) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final MkMaxLeafEntry that=(MkMaxLeafEntry)o;  return Double.compare(knnDistance,that.knnDistance) == 0;}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  synchronized void retainLocalIdOnDisk(String localId){  MapEntry entry=getMapEntry(localId);  entry.retainCount++;  putMapEntry(localId,entry);}  }
class C{  public static List<MediaType> toMediaTypes(List<MimeType> mimeTypes){  return mimeTypes.stream().map(null).collect(Collectors.toList());}  }
class C{  public void vrule(long timestamp,Paint color){  vrule(timestamp,color,null,1.0F);}  }
class C{  public static void uploadAsync(String url,String key,File file,HttpCallback callback){  uploadAsync(url,null,callback,new IOParam(key,file));}  }
class C{  @Override public synchronized void updateLong(int columnIndex,long x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setLong(columnIndex,x);  } else {    this.inserter.setLong(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  protected static int toDigit(char ch,int index) throws DecoderException {  int digit=Character.digit(ch,16);  if (digit == -1) {    throw new DecoderException("Illegal hexadecimal charcter " + ch + " at index "+ index);  }  return digit;}  }
class C{  private final void dispatachChars(Node node) throws org.xml.sax.SAXException {  if (fSerializer != null) {    this.fSerializer.characters(node);  } else {    String data=((Text)node).getData();    this.fSerializer.characters(data.toCharArray(),0,data.length());  }}  }
class C{  public boolean checkAndPerformStylusEvent(MotionEvent event){  final float slop=ViewConfiguration.get(mView.getContext()).getScaledTouchSlop();  if (!mView.isLongClickable()) {    return false;  }  final boolean stylusButtonPressed=isStylusButtonPressed(event);switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    mIsButtonPressed=false;  if (stylusButtonPressed && mView.performLongClick()) {    mIsButtonPressed=true;    return true;  }break;case MotionEvent.ACTION_MOVE:if (Utilities.pointInView(mView,event.getX(),event.getY(),slop)) {if (!mIsButtonPressed && stylusButtonPressed && mView.performLongClick()) {  mIsButtonPressed=true;  return true;} else if (mIsButtonPressed && !stylusButtonPressed) {  mIsButtonPressed=false;}}break;case MotionEvent.ACTION_UP:case MotionEvent.ACTION_CANCEL:mIsButtonPressed=false;break;}return false;}  }
class C{  protected void returnError(String message){  ownerMessage.addEvent(Type.CLIENT_STATUS,"error",message);}  }
class C{  public static void assertAlmostEquals(double expected,double actual,int decimals){  assertAlmostEquals(null,new Double(expected),new Double(actual),decimals);}  }
class C{  public final T timeout(String timeout){  return timeout(TimeValue.parseTimeValue(timeout,null,getClass().getSimpleName() + ".timeout"));}  }
class C{  @SuppressWarnings("unused") public static void printTree(OptionScanNode tree,PrintStream printStream,String prefix){  String treeClassName=tree.getClass().getSimpleName();  if (tree instanceof AccessibilityNodeActionNode) {    Iterator<Rect> rects=tree.getRectsForNodeHighlight().iterator();    if (rects.hasNext()) {      Rect rect=rects.next();      printStream.println(prefix + treeClassName + " with rect: "+ rect.toString());    }    return;  }  printStream.println(prefix + treeClassName);  if (tree instanceof OptionScanSelectionNode) {    OptionScanSelectionNode selectionNode=(OptionScanSelectionNode)tree;    for (int i=0; i < selectionNode.getChildCount(); ++i) {      printTree(selectionNode.getChild(i),printStream,prefix + "-");    }  }}  }
class C{  @Override public ResourceProvider init(String scheme,Map arguments){  if (!StringUtil.isEmpty(scheme))   this.scheme=scheme;  if (arguments != null) {    this.arguments=arguments;    Object oCaseSensitive=arguments.get("case-sensitive");    if (oCaseSensitive != null) {      caseSensitive=Caster.toBooleanValue(oCaseSensitive,true);    }    Object oTimeout=arguments.get("lock-timeout");    if (oTimeout != null) {      lockTimeout=Caster.toLongValue(oTimeout,lockTimeout);    }  }  lock.setLockTimeout(lockTimeout);  lock.setCaseSensitive(caseSensitive);  root=new RamResourceCore(null,RamResourceCore.TYPE_DIRECTORY,"");  return this;}  }
class C{  public Size(String widthMode,double widthParam,String widthUnits,String heightMode,double heightParam,String heightUnits){  this.setWidth(widthMode,widthParam,widthUnits);  this.setHeight(heightMode,heightParam,heightUnits);}  }
class C{  @Override public byte[] lindex(final byte[] key,final long index){  checkIsInMultiOrPipeline();  client.lindex(key,index);  return client.getBinaryBulkReply();}  }
class C{  public PostalAddress(String value){  this();  setValue(value);}  }
class C{  public static int bitLength(long l){  int i=(int)(l >> 32);  if (i > 0)   return (i < 1 << 16) ? (i < 1 << 8) ? BIT_LENGTH[i] + 32 : BIT_LENGTH[i >>> 8] + 40 : (i < 1 << 24) ? BIT_LENGTH[i >>> 16] + 48 : BIT_LENGTH[i >>> 24] + 56;  if (i < 0)   return bitLength(-++l);  i=(int)l;  return (i < 0) ? 32 : (i < 1 << 16) ? (i < 1 << 8) ? BIT_LENGTH[i] : BIT_LENGTH[i >>> 8] + 8 : (i < 1 << 24) ? BIT_LENGTH[i >>> 16] + 16 : BIT_LENGTH[i >>> 24] + 24;}  }
class C{  public boolean steepDown(double ixi){  if (!next.valid()) {    return false;  }  if (co.reachability.doubleValue(next) >= Double.POSITIVE_INFINITY) {    return false;  }  return co.reachability.doubleValue(cur) * ixi >= co.reachability.doubleValue(next);}  }
class C{  public ScaleComm(String sPortPrinter){  m_sPortScale=sPortPrinter;  m_out=null;  m_in=null;  m_iStatusScale=SCALE_READY;  m_dWeightBuffer=0.0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target){  return toHit(game,attackerId,target,Entity.GRAPPLE_BOTH,false);}  }
class C{  public String dump(byte[] der) throws Asn1Exception, IOException {  try {    ASN1Primitive derObject=ASN1Primitive.fromByteArray(der);    if (derObject.getEncoded().length < der.length) {      throw new Asn1Exception(res.getString("NoAsn1DumpObject.exception.message"));    }    return dump(derObject);  } catch (  IOException ex) {    throw new Asn1Exception(res.getString("NoAsn1DumpObject.exception.message"),ex);  }}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  protected ArrayList<KeyNamePair> loadRMAData(int C_BPartner_ID){  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();  String sqlStmt="SELECT r.M_RMA_ID, r.DocumentNo || '-' || r.Amt from M_RMA r " + "WHERE ISSOTRX='Y' AND r.DocStatus in ('CO', 'CL') " + "AND r.C_BPartner_ID=? "+ "AND r.M_RMA_ID in (SELECT rl.M_RMA_ID FROM M_RMALine rl "+ "WHERE rl.M_RMA_ID=r.M_RMA_ID AND rl.QtyDelivered < rl.Qty "+ "AND rl.M_InOutLine_ID IS NOT NULL)";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sqlStmt,null);    pstmt.setInt(1,C_BPartner_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));    }    rs.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sqlStmt.toString(),e);  } finally {    if (pstmt != null) {      try {        pstmt.close();      } catch (      Exception ex) {        log.severe("Could not close prepared statement");      }    }  }  return list;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DefaultIntervalCategoryDataset)) {    return false;  }  DefaultIntervalCategoryDataset that=(DefaultIntervalCategoryDataset)obj;  if (!Arrays.equals(this.seriesKeys,that.seriesKeys)) {    return false;  }  if (!Arrays.equals(this.categoryKeys,that.categoryKeys)) {    return false;  }  if (!equal(this.startData,that.startData)) {    return false;  }  if (!equal(this.endData,that.endData)) {    return false;  }  return true;}  }
class C{  private void saveTaskMetadata(String taskName) throws IgniteCheckedException {  if (ctx.isDaemon())   return;  assert ctx.security().enabled();  int nameHash=taskName.hashCode();  if (nameHash == 0)   nameHash=1;  GridTaskNameHashKey key=new GridTaskNameHashKey(nameHash);  IgniteInternalCache<GridTaskNameHashKey,String> tasksMetaCache=taskMetaCache();  String existingName=tasksMetaCache.get(key);  if (existingName == null)   existingName=tasksMetaCache.getAndPutIfAbsent(key,taskName);  if (existingName != null && !F.eq(existingName,taskName))   throw new IgniteCheckedException("Task name hash collision for security-enabled node " + "[taskName=" + taskName + ", existing taskName="+ existingName+ ']');}  }
class C{  private void checkPreload() throws Exception {  assert cacheMode == PARTITIONED;  startUp();  Collection<IgfsFile> files=write();  Map<UUID,Integer> expSizes=new HashMap<>(GRID_CNT,1.0f);  for (  IgfsFile file : files) {    for (    IgfsBlock block : file.blocks()) {      Collection<UUID> ids=primaryOrBackups(block.key());      for (      UUID id : ids) {        if (expSizes.get(id) == null)         expSizes.put(id,block.length()); else         expSizes.put(id,expSizes.get(id) + block.length());      }    }  }  info("Size map before node start: " + expSizes);  for (int i=0; i < GRID_CNT; i++) {    UUID id=grid(i).localNode().id();    GridCacheAdapter<IgfsBlockKey,byte[]> cache=cache(id);    int expSize=expSizes.get(id) != null ? expSizes.get(id) : 0;    assertEquals(expSize,cache.igfsDataSpaceUsed());  }  Ignite g=startGrid(GRID_CNT);  info("Started grid: " + g.cluster().localNode().id());  awaitPartitionMapExchange();  expSizes.clear();  for (  IgfsFile file : files) {    for (    IgfsBlock block : file.blocks()) {      Collection<UUID> ids=primaryOrBackups(block.key());      assert !ids.isEmpty();      for (      UUID id : ids) {        if (expSizes.get(id) == null)         expSizes.put(id,block.length()); else         expSizes.put(id,expSizes.get(id) + block.length());      }    }  }  info("Size map after node start: " + expSizes);  for (int i=0; i < GRID_CNT - 1; i++) {    UUID id=grid(i).localNode().id();    GridCacheAdapter<IgfsBlockKey,byte[]> cache=cache(id);    int expSize=expSizes.get(id) != null ? expSizes.get(id) : 0;    assertEquals("For node: " + id,expSize,cache.igfsDataSpaceUsed());  }}  }
class C{  public void uninstallUI(JComponent c){  uninstallDefaults();  uninstallListeners();  this.spinner=null;  c.removeAll();}  }
class C{  private void parseJars(String[] files) throws IOException {  if (files == null) {    return;  }  String currentJar=null;  for (int i=0; i < files.length; i++) {    currentJar=files[i];    ZipFile zrf=new ZipFile(currentJar.replace('/',File.separatorChar));    Enumeration<? extends ZipEntry> entries=zrf.entries();    while (entries.hasMoreElements()) {      ZipEntry entry=entries.nextElement();      String fileName=entry.getName();      if (fileName.equals("META-INF/") || fileName.equals(INDEX_NAME) || fileName.equals(JarFile.MANIFEST_NAME))       continue;      if (!metaInfFilenames || !fileName.startsWith("META-INF/")) {        add(fileName,currentJar);      } else       if (!entry.isDirectory()) {        addMapping(fileName,currentJar);      }    }    zrf.close();  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  process(response);}  }
class C{  public void bind(Class type,Transform transform){  transforms.cache(type,transform);}  }
class C{  @Override public void send(HandshakeIODataStream out){}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public void writeData(final NextFilter nextFilter,final IoSession session,final WriteRequest writeRequest,final boolean isHandshakeData){  ProxyLogicHandler handler=getProxyHandler(session);synchronized (handler) {    if (handler.isHandshakeComplete()) {      nextFilter.filterWrite(session,writeRequest);    } else     if (isHandshakeData) {      LOGGER.debug("   handshake data: {}",writeRequest.getMessage());      nextFilter.filterWrite(session,writeRequest);    } else {      if (!session.isConnected()) {        LOGGER.debug(" Write request on closed session. Request ignored.");      } else {        LOGGER.debug(" Handshaking is not complete yet. Buffering write request.");        handler.enqueueWriteRequest(nextFilter,writeRequest);      }    }  }}  }
class C{  public WriteRequestWrapper(WriteRequest parentRequest){  if (parentRequest == null) {    throw new IllegalArgumentException("parentRequest");  }  this.parentRequest=parentRequest;}  }
class C{  @Nonnull public BugInstance addAnnotations(Collection<? extends BugAnnotation> annotationCollection){  for (  BugAnnotation annotation : annotationCollection) {    add(annotation);  }  return this;}  }
class C{  public static void sort(float[] array){  sort(0,array.length,array);}  }
class C{  private VariableReference createArray(TestCase test,GenericClass arrayClass,int position,int recursionDepth) throws ConstructionFailedException {  logger.debug("Creating array of type " + arrayClass.getTypeName());  if (arrayClass.hasWildcardOrTypeVariables()) {    arrayClass=arrayClass.getGenericInstantiation();    logger.debug("Setting generic array to type " + arrayClass.getTypeName());  }  ArrayStatement statement=new ArrayStatement(test,arrayClass.getType());  VariableReference reference=test.addStatement(statement,position);  position++;  logger.debug("Array length: " + statement.size());  logger.debug("Array component type: " + reference.getComponentType());  List<VariableReference> objects=test.getObjects(reference.getComponentType(),position);  Iterator<VariableReference> iterator=objects.iterator();  while (iterator.hasNext()) {    VariableReference current=iterator.next();    if (current instanceof ArrayIndex) {      ArrayIndex index=(ArrayIndex)current;      if (index.getArray().equals(statement.getReturnValue()))       iterator.remove(); else       if (index.getArray().getType().equals(arrayClass.getType()))       iterator.remove();    }  }  objects.remove(statement.getReturnValue());  logger.debug("Found assignable objects: " + objects.size());  Set<GenericAccessibleObject<?>> currentArrayRecursion=new HashSet<>(currentRecursion);  for (int i=0; i < statement.size(); i++) {    currentRecursion.clear();    currentRecursion.addAll(currentArrayRecursion);    logger.debug("Assigning array index " + i);    int oldLength=test.size();    assignArray(test,reference,i,position,objects);    position+=test.size() - oldLength;  }  reference.setDistance(recursionDepth);  return reference;}  }
class C{  protected void createX_axis(int i){  if (largest_value_set.get(0).getLabels() != null)   horizontal_width=((graphwidth / size) * i) + horstart; else   horizontal_width=((graphwidth / label_size) * i) + horstart;  horizontal_width_list.add(horizontal_width);  if (i == 0) {    canvas.drawLine(horizontal_width,graphheight + border,horizontal_width,border,paint);  } else {    canvas.drawLine(horizontal_width,graphheight + border,horizontal_width,graphheight + (2 * border),paint);  }  if (largest_value_set.get(0).getLabels() != null)   DrawLabels(i); else   DrawExplicitLabels(i);}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  if (m_ResultProducer instanceof AdditionalMeasureProducer) {    Enumeration<String> en=((AdditionalMeasureProducer)m_ResultProducer).enumerateMeasures();    while (en.hasMoreElements()) {      String mname=en.nextElement();      newVector.addElement(mname);    }  }  return newVector.elements();}  }
class C{  @RequestProcessing(value="/activity/daily-checkin",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void dailyCheckin(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final JSONObject user=(JSONObject)request.getAttribute(User.USER);  final String userId=user.optString(Keys.OBJECT_ID);  activityMgmtService.dailyCheckin(userId);  response.sendRedirect("/member/" + user.optString(User.USER_NAME) + "/points");}  }
class C{  public static String dumpProperties(Properties props,String name){  StringBuffer propStr=new StringBuffer();  Enumeration propsE=props.propertyNames();  propStr.append(lineSep + separator + " "+ name+ " "+ separator+ lineSep);  while (propsE.hasMoreElements()) {    String key=(String)propsE.nextElement();    propStr.append(left(key,28,' ') + ":  " + props.get(key)+ lineSep);  }  propStr.append(separator + separator + separator+ lineSep);  return propStr.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    int n=size;    size=0;    for (int i=0; i < n; i++)     array[i]=null;  }  finally {    lock.unlock();  }}  }
class C{  private void readDocumentStylesElement(IXMLElement elem) throws IOException {  if (DEBUG) {    System.out.println("ODGStylesReader <" + elem.getName() + " ...>");  }  for (  IXMLElement child : elem.getChildren()) {    String ns=child.getNamespace();    String name=child.getName();    if (name.equals("styles") && (ns == null || ns.equals(OFFICE_NAMESPACE))) {      readStylesElement(child);    } else     if (name.equals("automatic-styles") && (ns == null || ns.equals(OFFICE_NAMESPACE))) {      readAutomaticStylesElement(child);    } else     if (name.equals("master-styles") && (ns == null || ns.equals(OFFICE_NAMESPACE))) {      readMasterStylesElement(child);    } else {      if (DEBUG) {        System.out.println("ODGStylesReader unsupported <" + elem.getName() + "> child "+ child);      }    }  }  if (DEBUG) {    System.out.println("ODGStylesReader </" + elem.getName() + ">");  }}  }
class C{  boolean isDummyAnimation(){  return mAppAnimator != null && mAppAnimator.animation == AppWindowAnimator.sDummyAnimation;}  }
class C{  public void stop(){  ServerSocket socket;synchronized (this) {    running=listening=false;    socket=this.socket;  }  if (socket != null) {    try {      socket.close();    } catch (    IOException ex) {    }  }  Collection<PostgresServerConnection> conns;synchronized (this) {    conns=new ArrayList<>(connections.values());  }  for (  PostgresServerConnection connection : conns) {    connection.stop();  }  if (thread != null) {    try {      thread.join(500);      if (thread.isAlive())       logger.warn("Server still running.");    } catch (    InterruptedException ex) {      Thread.currentThread().interrupt();    }    thread=null;  }}  }
class C{  public NativeMemory(ByteBuffer byteBuf){  if (byteBuf.isDirect()) {    objectBaseOffset_=0L;    memArray_=null;    nativeRawStartAddress_=((sun.nio.ch.DirectBuffer)byteBuf).address();  } else {    objectBaseOffset_=ARRAY_BYTE_BASE_OFFSET;    memArray_=byteBuf.array();    nativeRawStartAddress_=0L;  }  byteBuf_=byteBuf;  capacityBytes_=byteBuf.capacity();}  }
class C{  static boolean isUseRemoteUiEnvVarFalse(ILaunchConfiguration configuration) throws CoreException {  String[] environmentVariables=DebugPlugin.getDefault().getLaunchManager().getEnvironment(configuration);  if (environmentVariables != null) {    for (    String environmentVariable : environmentVariables) {      if (environmentVariable.matches("\\s*USE_REMOTE_UI\\s*=\\s*false\\s*")) {        return true;      }    }  }  return false;}  }
class C{  public void output(Vertex output){  getBot().mood().evaluateOutput(output);  getBot().avatar().evaluateOutput(output);  for (  Sense sense : getSenses().values()) {    try {      sense.output(output);    } catch (    Throwable ignore) {      getBot().log(this,ignore);    }  }}  }
class C{  public byte[] page(){  final String m=this.record.get("page");  final byte[] b;  return (m != null && (b=Base64Order.enhancedCoder.decode(m)) != null) ? b : new byte[0];}  }
class C{  protected final void registerProblem(@NotNull final PsiElement psiElement,@NotNull final String descriptionTemplate,final ProblemHighlightType highlightType,@Nullable final HintAction hintAction,@Nullable final TextRange rangeInElement,final LocalQuickFix... fixes){  if (myHolder != null) {    myHolder.registerProblem(new ProblemDescriptorImpl(psiElement,psiElement,descriptionTemplate,fixes,highlightType,false,rangeInElement,hintAction,myHolder.isOnTheFly()));  }}  }
class C{  public void addOrder(Order order){  if (order != null) {    this.order=order;    notifyDataSetChanged();  } else {    Timber.e("Setting null order object.");  }}  }
class C{  public static List<String> convertToCsvLines(Map<Tuple<Integer,Integer>,String> keyTable,char separator){  int maxCol=0;  Map<Integer,Map<Integer,String>> lin_colVal=new TreeMap<>();  for (  Map.Entry<Tuple<Integer,Integer>,String> entry : keyTable.entrySet()) {    Map<Integer,String> line=MapUtils.getMap(entry.getKey().getFirst(),lin_colVal);    line.put(entry.getKey().getSecond(),entry.getValue());    if (entry.getKey().getSecond() > maxCol) {      maxCol=entry.getKey().getSecond();    }  }  Map<Integer,String> csvLines=new TreeMap<>();  for (  Map.Entry<Integer,Map<Integer,String>> entry : lin_colVal.entrySet()) {    String line="";    Map<Integer,String> cols=entry.getValue();    for (int i=1; i <= maxCol; i++) {      String value=(cols.get(i) == null ? "" : cols.get(i));      line+=value + separator;    }    csvLines.put(entry.getKey(),line.substring(0,line.length() - 1));  }  return new LinkedList<>(csvLines.values());}  }
class C{  public static void d(String msg,Throwable cause){  if (BuildConfig.DEBUG) {    Log.d(LOG_TAG,msg,cause);  }}  }
class C{  public boolean exists(World world){  return world.getChunkProvider().chunkExists(xCoord,zCoord);}  }
class C{  public static void copyToHost(CSRPointer src,int rows,long nnz,int[] rowPtr,int[] colInd,double[] values){  CSRPointer r=src;  long t0=System.nanoTime();  cudaMemcpy(Pointer.to(rowPtr),r.rowPtr,(rows + 1) * Sizeof.INT,cudaMemcpyDeviceToHost);  cudaMemcpy(Pointer.to(colInd),r.colInd,nnz * Sizeof.INT,cudaMemcpyDeviceToHost);  cudaMemcpy(Pointer.to(values),r.val,nnz * Sizeof.DOUBLE,cudaMemcpyDeviceToHost);  Statistics.cudaFromDevTime.addAndGet(System.nanoTime() - t0);  Statistics.cudaFromDevCount.addAndGet(3);}  }
class C{  synchronized V put(K key,int hash,V value,int memory){  if (value == null) {    throw new NullPointerException("The value may not be null");  }  V old;  Entry<K,V> e=find(key,hash);  if (e == null) {    old=null;  } else {    old=e.value;    remove(key,hash);  }  if (memory > maxMemory) {    return old;  }  e=new Entry<K,V>();  e.key=key;  e.value=value;  e.memory=memory;  int index=hash & mask;  e.mapNext=entries[index];  entries[index]=e;  usedMemory+=memory;  if (usedMemory > maxMemory) {    evict();    if (stackSize > 0) {      addToQueue(queue,e);    }  }  mapSize++;  addToStack(e);  return old;}  }
class C{  public static final Parameter base(){  return new Parameter(P_VECTOR);}  }
class C{  public TMessage readMessageBegin() throws TException {  return EMPTY_MESSAGE;}  }
class C{  protected void saveBuffer(String name){  StringBuffer sb=m_History.getNamedBuffer(name);  if (sb != null) {    if (m_SaveOut.save(sb)) {      m_Log.logMessage("Save succesful.");    }  }}  }
class C{  protected final void recoverBackup() throws IOException {  backup=false;  if (!backupTokens.isEmpty()) {    addTokens(backupTokens);    backupTokens.clear();    getToken();  }}  }
class C{  public RegexValidator(String regex,boolean caseSensitive){  this(new String[]{regex},caseSensitive);}  }
class C{  public void validate(){  final ModelDescription model=buildCompleteDescription();  if (model == null) {    updateWith(null,true);    return;  }  final boolean edited=GamlResourceServices.isEdited(this.getURI());  try {    model.validate(edited);    updateWith(model,true);  }  finally {    if (!MEMOIZE_DESCRIPTION)     if (edited) {      GamlResourceServices.getResourceDocumenter().addCleanupTask(model);    } else {      model.dispose();    }  }}  }
class C{  public void test_PropertiesBlackList() throws Exception {  String namespace="newNamespace";  Properties properties=new Properties();  properties.put(RemoteRepository.OPTION_CREATE_KB_NAMESPACE,namespace);  assertTrue(MultiTenancyServlet.PROPERTIES_BLACK_LIST.contains(Journal.Options.FILE));  properties.put(Journal.Options.FILE,Boolean.TRUE.toString());  final Properties p=m_mgr.getPreparedProperties(namespace,properties);  for (  String property : MultiTenancyServlet.PROPERTIES_BLACK_LIST) {    assertFalse(p.containsKey(property));  }}  }
class C{  public void clear(){  root=null;  size=0;}  }
class C{  public void addPermission(String queueUrl,String label,List<String> aWSAccountIds,List<String> actions) throws AmazonServiceException, AmazonClientException {  amazonSqsToBeExtended.addPermission(queueUrl,label,aWSAccountIds,actions);}  }
class C{  public boolean isIsIntercept(){  if (isIntercept == null) {    return false;  } else {    return isIntercept;  }}  }
class C{  @Nonnull public BugInstance addSourceLine(BytecodeScanningDetector visitor,int pc){  SourceLineAnnotation sourceLineAnnotation=SourceLineAnnotation.fromVisitedInstruction(visitor.getClassContext(),visitor,pc);  if (sourceLineAnnotation != null) {    add(sourceLineAnnotation);  }  return this;}  }
class C{  public RegExp anyChar(){  Vector list=new Vector();  list.addElement(new Interval((char)0,CharClasses.maxChar));  return new RegExp1(sym.CCLASS,list);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.718 -0400",hash_original_method="0EBBB65C00DFAFB7B6E0400F5755712C",hash_generated_method="94B188BA634D9793A5790601BA8B7F45") public String soundex(String str){  if (str == null) {    return null;  }  str=SoundexUtils.clean(str);  if (str.length() == 0) {    return str;  }  char out[]={'0','0','0','0'};  char last, mapped;  int incount=1, count=1;  out[0]=str.charAt(0);  last=getMappingCode(str,0);  while ((incount < str.length()) && (count < out.length)) {    mapped=getMappingCode(str,incount++);    if (mapped != 0) {      if ((mapped != '0') && (mapped != last)) {        out[count++]=mapped;      }      last=mapped;    }  }  return new String(out);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  return object.toString();}  }
class C{  public static String stripSAMHeader(final String sam) throws IOException {  return stripLines(sam,"@","\n");}  }
class C{  private static void addAccessControl(CalendarService service,String userEmail,AclRole role) throws ServiceException, IOException {  AclEntry entry=new AclEntry();  entry.setScope(new AclScope(AclScope.Type.USER,userEmail));  entry.setRole(role);  AclEntry insertedEntry=service.insert(aclFeedUrl,entry);  System.out.println("Added user to access control list:");  System.out.println("\tScope: Type=" + insertedEntry.getScope().getType() + " ("+ insertedEntry.getScope().getValue()+ ")");  System.out.println("\tRole: " + insertedEntry.getRole().getValue());}  }
class C{  public ArgsDaemon createChild(String[] args){  return new ArgsDaemon(envCli(),args,getProgramInfo());}  }
class C{  public void render(Graphics graphics){  if (getNeedToRegenerate() || getNeedToReposition() || !isVisible()) {    return;  }  boolean smallWorld=bitmap != null && corners != null && corners.size() >= 4;  if (smallWorld) {    float[] xs=corners.get(2);    float[] ys=corners.get(3);    Point point1=new Point();    point1.setLocation((double)xs[0],(double)ys[0]);    Point point2=new Point();    point2.setLocation((double)xs[2],(double)ys[2]);    Graphics g=graphics.create();    if (g instanceof Graphics2D && renderRotationAngle != null) {      rotate((Graphics2D)g);    }    renderImage(g,bitmap,point1);  }  super.render(graphics);}  }
class C{  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){  if (entity != null) {    requestBase.setEntity(entity);  }  return requestBase;}  }
class C{  public BaseDateTime(long instant){  this(instant,ISOChronology.getInstance());}  }
class C{  public long optLong(int index){  return optLong(index,0);}  }
class C{  public void clearFavoritesList(){  favoriteVideos.clear();  videoListAdapter.notifyDataSetChanged();}  }
class C{  public TSink<String> sendString(TStream<String> stream){  Objects.requireNonNull(stream,"stream");  return sendText(stream,null);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  double backgroundValue=Double.parseDouble(args[1]);  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    double[] data;    for (int a=0; a < numFiles; a++) {      WhiteboxRaster inputFile=new WhiteboxRaster(imageFiles[a],"rw");      int rows=inputFile.getNumberRows();      int cols=inputFile.getNumberColumns();      double noData=inputFile.getNoDataValue();      for (row=0; row < rows; row++) {        data=inputFile.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] == backgroundValue) {            inputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Processing image " + (a + 1) + " of "+ numFiles+ ":",progress);      }      inputFile.close();    }    showFeedback("Operation complete");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  flavorMap=(FlavorMap)s.readObject();  if (flavorMap == null) {    flavorMap=SystemFlavorMap.getDefaultFlavorMap();  }  Object keyOrNull;  while (null != (keyOrNull=s.readObject())) {    String key=((String)keyOrNull).intern();    if (dragSourceListenerK == key) {      addDragSourceListener((DragSourceListener)(s.readObject()));    } else     if (dragSourceMotionListenerK == key) {      addDragSourceMotionListener((DragSourceMotionListener)(s.readObject()));    } else {      s.readObject();    }  }}  }
class C{  private void writeOutputFile(StringBuilder builder) throws IOException {  PrintWriter writer=new PrintWriter(getOutputFile(),"UTF-8");  writer.write(builder.toString());  writer.flush();  writer.close();}  }
class C{  public Builder<T> store(final ChunkedHashStore<T> chunkedHashStore){  this.chunkedHashStore=chunkedHashStore;  return this;}  }
class C{  @NoInline public static void bugReportMessage(){  VM.sysWriteln("********************************************************************************");  VM.sysWriteln("*                      Abnormal termination of Jikes RVM                       *\n" + "* Jikes RVM terminated abnormally indicating a problem in the virtual machine. *\n" + "* Jikes RVM relies on community support to get debug information. Help improve *\n"+ "* Jikes RVM for everybody by reporting this error. Please see:                 *\n"+ "*                    http://www.jikesrvm.org/ReportingBugs/                    *");  VM.sysWriteln("********************************************************************************");}  }
class C{  public static void fill(byte[] a,int fromIndex,int toIndex,byte val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  final public MutableString append(final String s){  if (s == null)   return append(NULL);  final int l=s.length();  if (l == 0)   return this;  final int newLength=length() + l;  expand(newLength);  s.getChars(0,l,array,newLength - l);  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  private void processNetworkDevice(LogicalNetworkDevice logicalNetworkDevice,Map<String,List<String>> interfacePortMap){  List<String> logicalNetworkList=logicalNetworkDevice.getInterfaces();  if (logicalNetworkList != null && !logicalNetworkList.isEmpty()) {    List<String> portList=null;    for (    String interfaceIP : logicalNetworkList) {      portList=interfacePortMap.get(interfaceIP);      if (portList == null) {        portList=new ArrayList<String>();      }      if (logicalNetworkDevice.getType() != LogicalDeviceType.PHYSICAL_ETHERNET) {        NameList nameList=logicalNetworkDevice.getVirtualDeviceData().getDevices();        if (nameList != null) {          List<String> deviceList=nameList.getLi();          if (!deviceList.isEmpty()) {            portList.addAll(new ArrayList<>(deviceList));            interfacePortMap.put(interfaceIP,portList);          }        }      } else {        String networkName=logicalNetworkDevice.getName();        if (networkName != null) {          portList.add(new String(networkName));          interfacePortMap.put(interfaceIP,portList);        }      }    }  }}  }
class C{  @Override public boolean add(Line1D e){  if (contains(e)) {    return false;  } else {    ListIterator<Line1D> listIter=list.listIterator();    while (listIter.hasNext()) {      if (listIter.next().getHigh() >= e.getLow()) {        listIter.previous();        break;      }    }    if (!listIter.hasNext()) {      list.add(e);      return true;    } else {      int insertIndex=listIter.nextIndex();      Line1D tmpLine=listIter.next();      if (tmpLine.getLow() <= e.getHigh()) {        double low=Math.min(tmpLine.getLow(),e.getLow());        double high=tmpLine.getHigh();        while (listIter.hasNext()) {          tmpLine=listIter.next();          if (e.isIntersecting(tmpLine)) {            listIter.remove();            high=tmpLine.getHigh();          } else {            break;          }        }        list.set(insertIndex,new Line1D(low,Math.max(e.getHigh(),high)));      } else {        list.add(insertIndex,e);      }      return true;    }  }}  }
class C{  public Stoppable scheduleRepeating(final double time,final int ordering,final Steppable event,final double interval){  if (interval <= 0)   throw new IllegalArgumentException("The steppable " + event + " was scheduled repeating with an impossible interval ("+ interval+ ")");  Schedule.Key k=new Schedule.Key(time,ordering);  IterativeRepeat r=new IterativeRepeat(event,interval,k);synchronized (lock) {    if (_scheduleOnce(k,r))     return r; else     return null;  }}  }
class C{  public final double length(){  return Math.sqrt(x * x + y * y + z * z);}  }
class C{  public AuthorityKeyIdentifier(byte[] keyIdentifier){  this.keyidentifier=new DEROctetString(keyIdentifier);  this.certissuer=null;  this.certserno=null;}  }
class C{  private void doChangeKeyPasswd(String alias) throws Exception {  if (alias == null) {    alias=keyAlias;  }  Pair<Key,char[]> objs=recoverKey(alias,storePass,keyPass);  Key privKey=objs.fst;  if (keyPass == null) {    keyPass=objs.snd;  }  if (keyPassNew == null) {    MessageFormat form=new MessageFormat(rb.getString("key.password.for.alias."));    Object[] source={alias};    keyPassNew=getNewPasswd(form.format(source),keyPass);  }  keyStore.setKeyEntry(alias,privKey,keyPassNew,keyStore.getCertificateChain(alias));}  }
class C{  public InstancesContentEvent(InstanceContentEvent event){  this.add(event.getInstanceContent());}  }
class C{  public AttributeLocator(Instances data,int type,int fromIndex,int toIndex){  super();  int[] indices=new int[toIndex - fromIndex + 1];  for (int i=0; i < indices.length; i++)   indices[i]=fromIndex + i;  initialize(data,type,indices);}  }
class C{  public static INaviView createCombinedCallgraph(final INaviProject project,final INaviAddressSpace addressSpace){  final INaviView view=project.getContent().createView("Combined Callgraph","");  final Map<INaviFunction,CFunctionNode> nodeMap=new HashMap<INaviFunction,CFunctionNode>();  final Map<INaviFunction,INaviFunction> resolvedMap=new HashMap<INaviFunction,INaviFunction>();  final List<INaviModule> modules=addressSpace.getContent().getModules();  for (  final INaviModule module : modules) {    final CCallgraph callgraph=module.getContent().getNativeCallgraph();    for (    final ICallgraphNode callgraphNode : callgraph) {      final INaviFunction function=callgraphNode.getFunction();      final INaviFunction resolvedFunction=getResolvedFunction(function,modules);      if (resolvedFunction == null) {        final CFunctionNode node=view.getContent().createFunctionNode(function);        node.setColor(CFunctionNodeColorizer.getFunctionColor(function.getType()));        nodeMap.put(function,node);      } else {        resolvedMap.put(function,resolvedFunction);      }    }  }  for (  final INaviModule module : modules) {    final CCallgraph callgraph=module.getContent().getNativeCallgraph();    for (    final ICallgraphEdge callgraphEdge : callgraph.getEdges()) {      final INaviFunction source=resolvedMap.containsKey(callgraphEdge.getSource().getFunction()) ? resolvedMap.get(callgraphEdge.getSource().getFunction()) : callgraphEdge.getSource().getFunction();      final INaviFunction target=resolvedMap.containsKey(callgraphEdge.getTarget().getFunction()) ? resolvedMap.get(callgraphEdge.getTarget().getFunction()) : callgraphEdge.getTarget().getFunction();      view.getContent().createEdge(nodeMap.get(source),nodeMap.get(target),EdgeType.JUMP_UNCONDITIONAL);    }  }  return view;}  }
class C{  public static String removeUrlScheme(String aUrl){  String urlRetValue=aUrl;  if (null != aUrl) {    if (aUrl.startsWith(HTTP_SCHEME)) {      urlRetValue=aUrl.substring(HTTP_SCHEME.length());    } else     if (aUrl.startsWith(HTTPS_SCHEME)) {      urlRetValue=aUrl.substring(HTTPS_SCHEME.length());    }  }  return urlRetValue;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.SubjectAreas);  List<SubjectArea> subjects=SubjectArea.getSubjectAreaList(sessionContext.getUser().getCurrentAcademicSessionId());  boolean dispLastChanges=CommonValues.Yes.eq(UserProperty.DisplayLastChanges.get(sessionContext.getUser()));  if ("Export PDF".equals(request.getParameter("op"))) {    PdfWebTable webTable=new PdfWebTable((dispLastChanges ? 5 : 4),"Subject Area List - " + sessionContext.getUser().getCurrentAuthority().getQualifiers("Session").get(0).getQualifierLabel(),"subjectList.do?ord=%%",(dispLastChanges ? new String[]{"Abbv","Title","Department","Managers","Last Change"} : new String[]{"Abbv","Title","Departmnet","Managers"}),new String[]{"left","left","left","left","right"},new boolean[]{true,true,true,true,false});    for (    SubjectArea s : subjects) {      Department d=s.getDepartment();      String sdName="";      for (Iterator it=s.getManagers().iterator(); it.hasNext(); ) {        TimetableManager mgr=(TimetableManager)it.next();        if (sdName.length() > 0)         sdName=sdName + "\n";        sdName=sdName + mgr.getFirstName() + " "+ mgr.getLastName();      }      String lastChangeStr=null;      Long lastChangeCmp=null;      if (dispLastChanges) {        List changes=ChangeLog.findLastNChanges(d.getSession().getUniqueId(),null,null,d.getUniqueId(),1);        ChangeLog lastChange=(changes == null || changes.isEmpty() ? null : (ChangeLog)changes.get(0));        lastChangeStr=(lastChange == null ? "" : ChangeLog.sDFdate.format(lastChange.getTimeStamp()) + " by " + lastChange.getManager().getShortName());        lastChangeCmp=new Long(lastChange == null ? 0 : lastChange.getTimeStamp().getTime());      }      webTable.addLine(null,new String[]{s.getSubjectAreaAbbreviation(),s.getTitle(),(d == null) ? "" : d.getDeptCode() + (d.getAbbreviation() == null ? "" : ": " + d.getAbbreviation().trim()),(sdName == null || sdName.trim().length() == 0) ? "" : sdName,lastChangeStr},new Comparable[]{s.getSubjectAreaAbbreviation(),s.getTitle(),(d == null) ? "" : d.getDeptCode(),sdName,lastChangeCmp});    }    ExportUtils.exportPDF(webTable,WebTable.getOrder(sessionContext,"SubjectList.ord"),response,"subjects");    return null;  }  WebTable webTable=new WebTable((dispLastChanges ? 5 : 4),"","subjectList.do?ord=%%",(dispLastChanges ? new String[]{"Abbv","Title","Department","Managers","Last Change"} : new String[]{"Abbv","Title","Department","Managers"}),new String[]{"left","left","left","left","right"},new boolean[]{true,true,true,true,false});  webTable.enableHR("#9CB0CE");  webTable.setRowStyle("white-space: nowrap");  WebTable.setOrder(sessionContext,"SubjectList.ord",request.getParameter("ord"),1);  for (  SubjectArea s : subjects) {    Department d=s.getDepartment();    String sdName="";    for (Iterator it=s.getManagers().iterator(); it.hasNext(); ) {      TimetableManager mgr=(TimetableManager)it.next();      if (sdName.length() > 0)       sdName=sdName + "<BR>";      sdName=sdName + mgr.getFirstName() + " "+ mgr.getLastName();    }    String lastChangeStr=null;    Long lastChangeCmp=null;    if (dispLastChanges) {      List changes=ChangeLog.findLastNChanges(d.getSession().getUniqueId(),null,null,d.getUniqueId(),1);      ChangeLog lastChange=(changes == null || changes.isEmpty() ? null : (ChangeLog)changes.get(0));      lastChangeStr=(lastChange == null ? "&nbsp;" : "<span title='" + lastChange.getLabel() + "'>"+ ChangeLog.sDFdate.format(lastChange.getTimeStamp())+ " by "+ lastChange.getManager().getShortName()+ "</span>");      lastChangeCmp=new Long(lastChange == null ? 0 : lastChange.getTimeStamp().getTime());    }    webTable.addLine("onClick=\"document.location.href='subjectAreaEdit.do?op=edit&id=" + s.getUniqueId() + "'\"",new String[]{"<A name='" + s.getUniqueId() + "'>"+ s.getSubjectAreaAbbreviation()+ "</A>",s.getTitle(),(d == null) ? "&nbsp;" : "<span title='" + d.getHtmlTitle() + "'>"+ d.getDeptCode()+ (d.getAbbreviation() == null ? "" : ": " + d.getAbbreviation().trim())+ "</span>",(sdName == null || sdName.trim().length() == 0) ? "&nbsp;" : sdName,lastChangeStr},new Comparable[]{s.getSubjectAreaAbbreviation(),s.getTitle(),(d == null) ? "" : d.getDeptCode(),sdName,lastChangeCmp});  }  request.setAttribute("table",webTable.printTable(WebTable.getOrder(sessionContext,"SubjectList.ord")));  return mapping.findForward("showSubjectList");}  }
class C{  public void tokenizeLines(int start,int len){  if (tokenMarker == null || !tokenMarker.supportsMultilineTokens())   return;  Segment lineSegment=new Segment();  Element map=getDefaultRootElement();  len+=start;  try {    for (int i=start; i < len; i++) {      Element lineElement=map.getElement(i);      int lineStart=lineElement.getStartOffset();      getText(lineStart,lineElement.getEndOffset() - lineStart - 1,lineSegment);      tokenMarker.markTokens(lineSegment,i);    }  } catch (  BadLocationException bl) {    bl.printStackTrace();  }}  }
class C{  public static <T>EfficiencyRun determineEfficiency(Map<T,T> cache,List<T> workingSet){  int hits=0;  for (  T key : workingSet) {    if (cache.get(key) == null) {      cache.put(key,key);    } else {      hits++;    }  }  return EfficiencyRun.of(hits,workingSet.size());}  }
class C{  public FullPrunedBlockChain(Context context,List<Wallet> listeners,FullPrunedBlockStore blockStore) throws BlockStoreException {  super(context,listeners,blockStore);  this.blockStore=blockStore;  this.chainHead=blockStore.getVerifiedChainHead();}  }
class C{  public double max(){  double maxVal=this.vector[0];  for (  final double val : this.vector) {    maxVal=Math.max(maxVal,val);  }  return maxVal;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  doc=(Document)load("staffNS",false);  childList=doc.getElementsByTagNameNS("null","elementId");  assertSize("documentgetelementsbytagnameNS05",0,childList);}  }
class C{  public Builder addEngineSettings(final String engineName,final List<String> imports,final List<String> staticImports,final List<String> scripts,final Map<String,Object> config){  if (null == imports)   throw new IllegalArgumentException("imports cannot be null");  if (null == staticImports)   throw new IllegalArgumentException("staticImports cannot be null");  if (null == scripts)   throw new IllegalArgumentException("scripts cannot be null");  final Map<String,Object> m=null == config ? Collections.emptyMap() : config;  settings.put(engineName,new EngineSettings(imports,staticImports,scripts,m));  return this;}  }
class C{  public int returnValue(){  return returnValue;}  }
class C{  public static void assertFeature(String expectedName,Object expectedValue,Feature actualFeature){  Assert.assertNotNull(actualFeature);  Assert.assertEquals(expectedName,actualFeature.getName());  Assert.assertEquals(expectedValue,actualFeature.getValue());}  }
class C{  private void addButton(JToggleButton button,String name){  button.setIcon(new ImageIcon(ImageUtils.getImage(this,name + "3.gif")));  button.setMaximumSize(new Dimension(80,40));  button.setPreferredSize(new Dimension(80,40));  buttonsPanel.add(button);  buttonsPanel.add(Box.createVerticalStrut(5));  group.add(button);}  }
class C{  @Override public void startDrawingQuads(){  this.startDrawing(7);}  }
class C{  private void postProcess(StaticDefinitions staticDefs,DefinitionsSpec spec){  staticDefs.postProcess(spec);}  }
class C{  protected String generateDotGraph(ControlFlowGraph cfg,Block entry,Analysis<A,S,T> analysis){  this.sbDigraph.setLength(0);  Set<Block> visited=new HashSet<>();  this.sbDigraph.append("digraph {\n");  Block cur=entry;  Queue<Block> worklist=new LinkedList<>();  visited.add(entry);  while (true) {    if (cur == null) {      break;    }    if (cur.getType() == BlockType.CONDITIONAL_BLOCK) {      ConditionalBlock ccur=((ConditionalBlock)cur);      Block thenSuccessor=ccur.getThenSuccessor();      addDotEdge(ccur.getId(),thenSuccessor.getId(),"then\\n" + ccur.getThenFlowRule());      if (!visited.contains(thenSuccessor)) {        visited.add(thenSuccessor);        worklist.add(thenSuccessor);      }      Block elseSuccessor=ccur.getElseSuccessor();      addDotEdge(ccur.getId(),elseSuccessor.getId(),"else\\n" + ccur.getElseFlowRule());      if (!visited.contains(elseSuccessor)) {        visited.add(elseSuccessor);        worklist.add(elseSuccessor);      }    } else {      assert cur instanceof SingleSuccessorBlock;      Block b=((SingleSuccessorBlock)cur).getSuccessor();      if (b != null) {        addDotEdge(cur.getId(),b.getId(),((SingleSuccessorBlock)cur).getFlowRule().name());        if (!visited.contains(b)) {          visited.add(b);          worklist.add(b);        }      }    }    if (cur.getType() == BlockType.EXCEPTION_BLOCK) {      ExceptionBlock ecur=(ExceptionBlock)cur;      for (      Entry<TypeMirror,Set<Block>> e : ecur.getExceptionalSuccessors().entrySet()) {        Set<Block> blocks=e.getValue();        TypeMirror cause=e.getKey();        String exception=cause.toString();        if (exception.startsWith("java.lang.")) {          exception=exception.replace("java.lang.","");        }        for (        Block b : blocks) {          addDotEdge(cur.getId(),b.getId(),exception);          if (!visited.contains(b)) {            visited.add(b);            worklist.add(b);          }        }      }    }    cur=worklist.poll();  }  generateDotNodes(visited,cfg,analysis);  this.sbDigraph.append("}\n");  return this.sbDigraph.toString();}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public Builder penaltyFlashScreen(){  return enable(PENALTY_FLASH);}  }
class C{  public void onReduce() throws IOException {}  }
class C{  public static Method findSuperClassMethod(Class clazz,String name,String desc){  Method m=findSuperMethod2(clazz.getSuperclass(),name,desc);  if (m == null)   m=searchInterfaces(clazz,name,desc);  if (m == null)   error(clazz,name,desc);  return m;}  }
class C{  public int nextInt(){  if (m_modCount != m_table.getModificationCount())   throw new ConcurrentModificationException();  m_cur=m_rows.nextInt();  return m_cur;}  }
class C{  public static String concat(String... strings){  int totalLength=0;  for (  String s : strings) {    totalLength+=s.length();  }  StringBuilder result=new StringBuilder(totalLength);  for (  String string : strings) {    result.append(string);  }  return result.toString();}  }
class C{  public void remove(RxAction action){  Pair<Integer,Subscription> old=mMap.remove(action.getType());  if (old != null && !old.second.isUnsubscribed())   old.second.unsubscribe();}  }
class C{  public static double quantile(double y,double n){  return quantile(y,n / 2.0,2.0);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private void launchAnimBackup(){  if (backupRoundTripFirstLaunched) {    reverse=(AnimatedVectorDrawable)getResources().getDrawable(R.drawable.animated_ic_check_box_black_24dp_reverse,getTheme());    initial=(AnimatedVectorDrawable)getResources().getDrawable(R.drawable.animated_ic_check_box_black_24dp,getTheme());    backupRoundTripFirstLaunched=false;  }  if (reverseState) {    imageView2.setImageDrawable(reverse);  } else {    imageView2.setImageDrawable(initial);  }  reverseState=!reverseState;  ((AnimatedVectorDrawable)imageView2.getDrawable()).start();}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static Set<Runner> toRunnerList(Vector<Object> runnersParams){  Set<Runner> runners=new TreeSet<Runner>();  for (  Object runnerParams : runnersParams) {    runners.add(toRunner((Vector<Object>)runnerParams));  }  return runners;}  }
class C{  private void refreshParentId(int parentId,int newParentId) throws Exception {  FolderTokenDividers divs=null;  int i;  FolderTokenDivider div=null;  divs=getChildren(parentId,true);  for (i=0; i < divs.count(); i++) {    div=divs.get(i);    div.changeParentId(newParentId);  }}  }
class C{  public ZyGraphLayoutSettings(final GraphSettingsConfigItem type){  Preconditions.checkNotNull(type,"IE02023: Type argument can't be null");  m_type=type;  m_circularSettings=new ZyGraphCircularSettings(type);  m_hierarchicalSettings=new ZyGraphHierarchicalSettings(type);  m_orthogonalSettings=new ZyGraphOrthogonalSettings(type);}  }
class C{  int sizeInBitsConsideringVolatileOrOrderedPuts(int rawSizeInBits){  int minBits=setOrdered != null ? 32 : 8;  return setVolatile != null || setOrdered != null ? Maths.nextPower2(rawSizeInBits,minBits) : rawSizeInBits;}  }
class C{  public ThaiTokenizer(){  this(DEFAULT_TOKEN_ATTRIBUTE_FACTORY);}  }
class C{  public boolean canDelete(ReviewDb db,Change.Status status) throws OrmException {  if (!isVisible(db)) {    return false;  }switch (status) {case DRAFT:    return (isOwner() || getRefControl().canDeleteDrafts());case NEW:case ABANDONED:  return isAdmin();case MERGED:default :return false;}}  }
class C{  protected String asDecorator(){  return " AS ";}  }
class C{  public final void skipInstruction(int opcode,boolean wide){  if (VM.VerifyAssertions)   VM._assert(bcIndex < bcLength);  int len=JBC_length(opcode) - 1;  if (wide)   len+=len;  if (len >= 0) {    bcIndex+=len;  } else {    skipSpecialInstruction(opcode);  }}  }
class C{  private Iterable<Method> methodsWithAnnotation(Class<?> cls){synchronized (mux) {    List<Method> mtds=mtdCache.get(cls);    if (mtds == null) {      mtds=new ArrayList<>();      for (      Method mtd : cls.getDeclaredMethods()) {        Annotation ann=mtd.getAnnotation(annCls);        if (ann != null)         mtds.add(mtd);      }      if (!mtds.isEmpty())       mtdCache.put(cls,mtds);    }    return mtds;  }}  }
class C{  public ExtensionModule(Environment environment){  this.environment=environment;  this.languageResourceService=new LanguageResourceService(environment);  this.patchResourceService=new PatchResourceService();}  }
class C{  public void runJavascriptRaw(String rawJavascript){  TurbolinksHelper.runJavascriptRaw(applicationContext,webView,rawJavascript);}  }
class C{  private void match(int ttype,String token) throws IOException, SyntaxException {  if ((currentToken.ttype == ttype) && (currentToken.sval.compareTo(token) == 0)) {    logln("matched type: " + ttype + " and token = "+ currentToken.sval);    nextToken();  } else {    throw new SyntaxException(st.lineno());  }}  }
class C{  protected Script(RandomAccessFile raf,int offset) throws IOException {  raf.seek(offset);  defaultLangSysOffset=raf.readUnsignedShort();  langSysCount=raf.readUnsignedShort();  if (langSysCount > 0) {    langSysRecords=new LangSysRecord[langSysCount];    for (int i=0; i < langSysCount; i++) {      langSysRecords[i]=new LangSysRecord(raf);    }  }  if (langSysCount > 0) {    langSys=new LangSys[langSysCount];    for (int i=0; i < langSysCount; i++) {      raf.seek(offset + langSysRecords[i].getOffset());      langSys[i]=new LangSys(raf);    }  }  if (defaultLangSysOffset > 0) {    raf.seek(offset + defaultLangSysOffset);    defaultLangSys=new LangSys(raf);  }}  }
class C{  public static void scheduleAlarm(Context context,AlarmManagerInterface manager,long alarmTime){  scheduleAlarmHelper(context,manager,alarmTime,false);}  }
class C{  public Graph search(){  this.logger.log("info","Starting VCCPC algorithm");  this.logger.log("info","Independence test = " + getIndependenceTest() + ".");  this.allTriples=new HashSet<>();  this.ambiguousTriples=new HashSet<>();  this.colliderTriples=new HashSet<>();  this.noncolliderTriples=new HashSet<>();  Vcfas fas=new Vcfas(getIndependenceTest());  definitelyNonadjacencies=new HashSet<>();  markovInAllPatterns=new HashSet<>();  long startTime=System.currentTimeMillis();  if (getIndependenceTest() == null) {    throw new NullPointerException();  }  List<Node> allNodes=getIndependenceTest().getVariables();  fas.setKnowledge(getKnowledge());  fas.setDepth(getDepth());  fas.setVerbose(verbose);  graph=fas.search();  apparentlyNonadjacencies=fas.getApparentlyNonadjacencies();  if (isDoOrientation()) {    if (verbose) {      System.out.println("CPC orientation...");    }    SearchGraphUtils.pcOrientbk(knowledge,graph,allNodes);    orientUnshieldedTriples(knowledge,getIndependenceTest(),getDepth());    MeekRules meekRules=new MeekRules();    meekRules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);    meekRules.setKnowledge(knowledge);    meekRules.orientImplied(graph);  }  List<Triple> ambiguousTriples=new ArrayList(graph.getAmbiguousTriples());  int[] dims=new int[ambiguousTriples.size()];  for (int i=0; i < ambiguousTriples.size(); i++) {    dims[i]=2;  }  List<Graph> patterns=new ArrayList<>();  Map<Graph,List<Triple>> newColliders=new IdentityHashMap<>();  Map<Graph,List<Triple>> newNonColliders=new IdentityHashMap<>();  CombinationGenerator generator=new CombinationGenerator(dims);  int[] combination;  while ((combination=generator.next()) != null) {    Graph _graph=new EdgeListGraph(graph);    newColliders.put(_graph,new ArrayList<Triple>());    newNonColliders.put(_graph,new ArrayList<Triple>());    for (    Graph graph : newColliders.keySet()) {    }    for (int k=0; k < combination.length; k++) {      Triple triple=ambiguousTriples.get(k);      _graph.removeAmbiguousTriple(triple.getX(),triple.getY(),triple.getZ());      if (combination[k] == 0) {        newColliders.get(_graph).add(triple);        Node x=triple.getX();        Node y=triple.getY();        Node z=triple.getZ();        _graph.setEndpoint(x,y,Endpoint.ARROW);        _graph.setEndpoint(z,y,Endpoint.ARROW);      }      if (combination[k] == 1) {        newNonColliders.get(_graph).add(triple);      }    }    patterns.add(_graph);  }  List<Graph> _patterns=new ArrayList<>(patterns);  GRAPH:   for (  Graph graph : new ArrayList<>(patterns)) {    List<Triple> colliders=newColliders.get(graph);    List<Triple> nonColliders=newNonColliders.get(graph);    for (    Triple triple : colliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      if (graph.getEdge(x,y).pointsTowards(x) || (graph.getEdge(y,z).pointsTowards(z))) {        patterns.remove(graph);        continue GRAPH;      }    }    for (    Triple triple : colliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      graph.setEndpoint(x,y,Endpoint.ARROW);      graph.setEndpoint(z,y,Endpoint.ARROW);    }    for (    Triple triple : nonColliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      if (graph.getEdge(x,y).pointsTowards(y)) {        graph.removeEdge(y,z);        graph.addDirectedEdge(y,z);      }      if (graph.getEdge(y,z).pointsTowards(y)) {        graph.removeEdge(x,y);        graph.addDirectedEdge(y,x);      }    }    for (    Edge edge : graph.getEdges()) {      Node x=edge.getNode1();      Node y=edge.getNode2();      if (Edges.isBidirectedEdge(edge)) {        graph.removeEdge(x,y);        graph.addUndirectedEdge(x,y);      }    }    MeekRules rules=new MeekRules();    rules.orientImplied(graph);    if (graph.existsDirectedCycle()) {      patterns.remove(graph);      continue GRAPH;    }  }  MARKOV:   for (  Edge edge : apparentlyNonadjacencies.keySet()) {    Node x=edge.getNode1();    Node y=edge.getNode2();    for (    Graph _graph : new ArrayList<>(patterns)) {      List<Node> boundaryX=new ArrayList<>(boundary(x,_graph));      List<Node> boundaryY=new ArrayList<>(boundary(y,_graph));      List<Node> futureX=new ArrayList<>(future(x,_graph));      List<Node> futureY=new ArrayList<>(future(y,_graph));      if (y == x) {        continue;      }      if (boundaryX.contains(y) || boundaryY.contains(x)) {        continue;      }      IndependenceTest test=independenceTest;      if (!futureX.contains(y)) {        if (!test.isIndependent(x,y,boundaryX)) {          continue MARKOV;        }      }      if (!futureY.contains(x)) {        if (!test.isIndependent(y,x,boundaryY)) {          continue MARKOV;        }      }    }    definitelyNonadjacencies.add(edge);  }  for (  Edge edge : definitelyNonadjacencies) {    if (apparentlyNonadjacencies.keySet().contains(edge)) {      apparentlyNonadjacencies.keySet().remove(edge);    }  }  setSemIm(semIm);  System.out.println(semIm.getEdgeCoef());  List<Double> squaredDifference=new ArrayList<>();  int numNullEdges=0;  Regression sampleRegression=new RegressionDataset(dataSet);  System.out.println(sampleRegression.getGraph());  graph=GraphUtils.replaceNodes(graph,dataSet.getVariables());  Map<Edge,double[]> sampleRegress=new HashMap<>();  Map<Edge,Double> edgeCoefs=new HashMap<>();  ESTIMATION:   for (  Node z : graph.getNodes()) {    Set<Edge> adj=getAdj(z,graph);    for (    Edge edge : apparentlyNonadjacencies.keySet()) {      if (z == edge.getNode1() || z == edge.getNode2()) {        for (        Edge adjacency : adj) {          sampleRegress.put(adjacency,null);          Node a=adjacency.getNode1();          Node b=adjacency.getNode2();          if (semIm.existsEdgeCoef(a,b)) {            Double c=semIm.getEdgeCoef(a,b);            edgeCoefs.put(adjacency,c);          } else {            edgeCoefs.put(adjacency,0.0);          }        }        continue ESTIMATION;      }    }    for (    Edge nonadj : definitelyNonadjacencies) {      if (nonadj.getNode1() == z || nonadj.getNode2() == z) {        double[] d={0,0};        sampleRegress.put(nonadj,d);        Node a=nonadj.getNode1();        Node b=nonadj.getNode2();        if (semIm.existsEdgeCoef(a,b)) {          Double c=semIm.getEdgeCoef(a,b);          edgeCoefs.put(nonadj,c);        } else {          edgeCoefs.put(nonadj,0.0);        }      }    }    Set<Edge> parentsOfZ=new HashSet<>();    Set<Edge> _adj=getAdj(z,graph);    for (    Edge _adjacency : _adj) {      if (!_adjacency.isDirected()) {        for (        Edge adjacency : adj) {          sampleRegress.put(adjacency,null);          Node a=adjacency.getNode1();          Node b=adjacency.getNode2();          if (semIm.existsEdgeCoef(a,b)) {            Double c=semIm.getEdgeCoef(a,b);            edgeCoefs.put(adjacency,c);          } else {            edgeCoefs.put(adjacency,0.0);          }        }      }      if (_adjacency.pointsTowards(z)) {        parentsOfZ.add(_adjacency);      }    }    for (    Edge edge : parentsOfZ) {      if (edge.pointsTowards(edge.getNode2())) {        RegressionResult result=sampleRegression.regress(edge.getNode2(),edge.getNode1());        System.out.println(result);        double[] d=result.getCoef();        sampleRegress.put(edge,d);        Node a=edge.getNode1();        Node b=edge.getNode2();        if (semIm.existsEdgeCoef(a,b)) {          Double c=semIm.getEdgeCoef(a,b);          edgeCoefs.put(edge,c);        } else {          edgeCoefs.put(edge,0.0);        }      }    }  }  System.out.println("All IM: " + semIm + "Finish");  System.out.println("Just IM coefs: " + semIm.getEdgeCoef());  System.out.println("IM Coef Map: " + edgeCoefs);  System.out.println("Regress Coef Map: " + sampleRegress);  for (  Edge edge : sampleRegress.keySet()) {    System.out.println(" Sample Regression: " + edge + java.util.Arrays.toString(sampleRegress.get(edge)));  }  for (  Edge edge : graph.getEdges()) {    System.out.println("Sample edge: " + java.util.Arrays.toString(sampleRegress.get(edge)));  }  System.out.println("Sample VCPC:");  System.out.println("# of patterns: " + patterns.size());  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - startTime;  System.out.println("Search Time (seconds):" + (elapsedTime) / 1000 + " s");  System.out.println("Search Time (milli):" + elapsedTime + " ms");  System.out.println("# of Apparent Nonadj: " + apparentlyNonadjacencies.size());  System.out.println("# of Definite Nonadj: " + definitelyNonadjacencies.size());  TetradLogger.getInstance().log("apparentlyNonadjacencies","\n Apparent Non-adjacencies" + apparentlyNonadjacencies);  TetradLogger.getInstance().log("definitelyNonadjacencies","\n Definite Non-adjacencies" + definitelyNonadjacencies);  TetradLogger.getInstance().log("patterns","Disambiguated Patterns: " + patterns);  TetradLogger.getInstance().log("graph","\nReturning this graph: " + graph);  TetradLogger.getInstance().log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  TetradLogger.getInstance().log("info","Finishing CPC algorithm.");  logTriples();  TetradLogger.getInstance().flush();  return graph;}  }
class C{  public void crossProduct(Vector3f inputVec,Vector3f outputVec){  outputVec.setX(points[1] * inputVec.points[2] - points[2] * inputVec.points[1]);  outputVec.setY(points[2] * inputVec.points[0] - points[0] * inputVec.points[2]);  outputVec.setZ(points[0] * inputVec.points[1] - points[1] * inputVec.points[0]);}  }
class C{  @JsonProperty("query") void query(ConditionBuilder<?,?> queryBuilder){  builder.query(queryBuilder);}  }
class C{  public BinaryWriterExImpl newWriter(int typeId){  BinaryWriterExImpl res=new BinaryWriterExImpl(ctx,out,schema,handles());  res.typeId(typeId);  return res;}  }
class C{  public boolean commit() throws LoginException {  if (succeeded == false) {    return false;  } else {    if (subject.isReadOnly()) {      cleanState();      throw new LoginException("Subject is read-only");    }    if (!subject.getPrincipals().contains(user)) {      subject.getPrincipals().add(user);    }    if (logger.debugOn()) {      logger.debug("commit","Authentication has completed successfully");    }  }  cleanState();  commitSucceeded=true;  return true;}  }
class C{  public T caseInferenceVariable(InferenceVariable object){  return null;}  }
class C{  public void adjustStaticCertificate(Certificate copyFrom){  if (this != UNSIGNED && this != EXPIRED) {    throw new UnsupportedOperationException("Cannot adjust a non-static certificate's values");  }  commonName=copyFrom.commonName;  organization=copyFrom.organization;  validFrom=copyFrom.validFrom;  validTo=copyFrom.validTo;  valid=false;}  }
class C{  public T vspace(String value){  return attr("vspace",value);}  }
class C{  @Inline protected final boolean checkDequeue(int arity){  if (bufferOffset(head).isZero()) {    return dequeueUnderflow(arity);  } else {    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(bufferOffset(head).sGE(Word.fromIntZeroExtend(arity).lsh(LOG_BYTES_IN_ADDRESS).toOffset()));    return true;  }}  }
class C{  public boolean containsWordBreakingChar(final @NonNull CharSequence input){  if (!TextUtils.isEmpty(input)) {    for (int i=0; i < input.length(); i++) {      char c=input.charAt(i);      if (isWordBreakingChar(c)) {        return true;      }    }  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.INLINE_COMMENT___INLINE_COMMENT_1:    setInlineComment_1(INLINE_COMMENT_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  Object resolveThisFieldReference(CallStack callstack,NameSpace thisNameSpace,Interpreter interpreter,String varName,boolean specialFieldsVisible) throws UtilEvalError {  if (varName.equals("this")) {    if (specialFieldsVisible)     throw new UtilEvalError("Redundant to call .this on This type");    This ths=thisNameSpace.getThis(interpreter);    thisNameSpace=ths.getNameSpace();    Object result=ths;    NameSpace classNameSpace=getClassNameSpace(thisNameSpace);    if (classNameSpace != null) {      if (isCompound(evalName))       result=classNameSpace.getThis(interpreter); else       result=classNameSpace.getClassInstance();    }    return result;  }  if (varName.equals("super")) {    This ths=thisNameSpace.getSuper(interpreter);    thisNameSpace=ths.getNameSpace();    if (thisNameSpace.getParent() != null && thisNameSpace.getParent().isClass)     ths=thisNameSpace.getParent().getThis(interpreter);    return ths;  }  Object obj=null;  if (varName.equals("global"))   obj=thisNameSpace.getGlobal(interpreter);  if (obj == null && specialFieldsVisible) {    if (varName.equals("namespace"))     obj=thisNameSpace; else     if (varName.equals("variables"))     obj=thisNameSpace.getVariableNames(); else     if (varName.equals("methods"))     obj=thisNameSpace.getMethodNames(); else     if (varName.equals("interpreter"))     if (lastEvalName.equals("this"))     obj=interpreter; else     throw new UtilEvalError("Can only call .interpreter on literal 'this'");  }  if (obj == null && specialFieldsVisible && varName.equals("caller")) {    if (lastEvalName.equals("this") || lastEvalName.equals("caller")) {      if (callstack == null)       throw new InterpreterError("no callstack");      obj=callstack.get(++callstackDepth).getThis(interpreter);    } else     throw new UtilEvalError("Can only call .caller on literal 'this' or literal '.caller'");    return obj;  }  if (obj == null && specialFieldsVisible && varName.equals("callstack")) {    if (lastEvalName.equals("this")) {      if (callstack == null)       throw new InterpreterError("no callstack");      obj=callstack;    } else     throw new UtilEvalError("Can only call .callstack on literal 'this'");  }  if (obj == null)   obj=thisNameSpace.getVariable(varName,evalBaseObject == null);  if (obj == null)   throw new InterpreterError("null this field ref:" + varName);  return obj;}  }
class C{  public CurrencyValue(long amount,String currencyCode){  this.amount=amount;  this.currencyCode=currencyCode;}  }
class C{  public List<Operation> sendAndWait(List<Operation> ops,boolean checkResponse){  Operation[] response=new Operation[ops.size()];  String callerStackMessage="Received Failure response. (See suppressed exception for detail)";  Exception callerStack=new RuntimeException(callerStackMessage);  TestContext waitContext=new TestContext(ops.size(),this.timeout);  for (int i=0; i < ops.size(); i++) {    int index=i;    Operation op=ops.get(i);    op.appendCompletion(null);    sendRequest(op);  }  waitContext.await();  return Arrays.asList(response);}  }
class C{  public void onProduction(Player player){  getAndCheckAchievementsInCategory(player,Category.PRODUCTION);}  }
class C{  public Collection<File> mapped(){  return mMapped;}  }
class C{  @Override public void updateBigDecimal(String columnLabel,BigDecimal x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBigDecimal(" + quote(columnLabel) + ", "+ quoteBigDecimal(x)+ ");");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueDecimal.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public VmArgumentData(String vmName,String vmValue){  this.vmName=vmName;  this.vmValue=vmValue;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF__DECLARED_TYPE:    setDeclaredType((Type)null);  return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF__TYPE_ARGS:getTypeArgs().clear();return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF__ARRAY_TYPE_LITERAL:setArrayTypeLiteral(ARRAY_TYPE_LITERAL_EDEFAULT);return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF__DEFINED_TYPING_STRATEGY:setDefinedTypingStrategy(DEFINED_TYPING_STRATEGY_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public DefaultODGFigureFactory(){}  }
class C{  public void addGeneratedFile(File file){  generatedFiles.add(file);}  }
class C{  public void testEdgeCase(){  final int bits=3;  final int size=1 << bits;  final ObjectIndex<Integer> ix0=new ObjectChunks<>(size - 1,bits);  ix0.integrity();  final ObjectIndex<Integer> ix1=new ObjectChunks<>(size,bits);  ix1.integrity();  final ObjectIndex<Integer> ix2=new ObjectChunks<>(size + 1,bits);  ix2.integrity();}  }
class C{  public static TrieStructure createForDict(Dictionary aDict){  TrieStructure t=new TrieStructure();  for (  String word : aDict.getAll()) {    t.addWord(word);  }  return t;}  }
class C{  public BasicMapPanel(PropertyHandler propertyHandler,boolean delayCreation){  MapHandler mh=getMapHandler();  mh.add(this);  setPropertyHandler(propertyHandler);  if (!delayCreation) {    create();  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x40F8F435,version=150) public int sceNetAdhocMatchingGetPoolMaxAlloc(){  checkInitialized();  return 0;}  }
class C{  public HdfsConnection(HdfsFileIO fileIO,CsvSpecification csvSpecification){  this.hdfsFileIO=fileIO;  this.csvSpecification=csvSpecification;}  }
class C{  void removeServerTransaction(StunServerTransaction tran){synchronized (serverTransactions) {    serverTransactions.remove(tran.getTransactionID());  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  private ActionErrors comprobarDuplicados(GestionDescripcionBI descripcionService,HttpServletRequest request,ActionErrors errors,FichaVO fichaVO,String guid){  if (errors == null) {    errors=new ActionErrors();  }  comprobarExistenciaRegistroByKey(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADFICHA_TABLE,guid,LABEL_FICHA,Constants.ETIQUETA_GUID);  comprobarExistenciaRegistroByValue(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADFICHA_TABLE,fichaVO.getId(),fichaVO.getNombre(),LABEL_FICHA,Constants.ETIQUETA_NOMBRE);  return errors;}  }
class C{  public void invokeDynamic(String name,String desc,Handle bsm,Object... bsmArgs){  mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);}  }
class C{  public MGRSPoint(double northing,double easting,int zoneNumber,char zoneLetter){  super(northing,easting,zoneNumber,zoneLetter);}  }
class C{  private void reset(String homepath,String filename){  File file;  try {    file=new File(homepath + SEP + filename);    if (file.isFile()) {      file.delete();    } else     if (file.isDirectory()) {      File[] files=file.listFiles();      for (int i=0; i < files.length; i++) {        files[i].delete();      }      file.delete();    }  } catch (  Exception e) {    e.printStackTrace();  }  try {    file=new File(homepath + SEP + filename+ ".lck");    file.delete();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.306 -0500",hash_original_method="801E6F065AC6A60CFB0DADB1E074F98E",hash_generated_method="FE89B3D9E111D9452617D72FD1A81EFB") public boolean isFillViewport(){  return mFillViewport;}  }
class C{  private static ConditionFlag toIntConditionFlag(Condition cond){switch (cond) {case EQ:    return ConditionFlag.EQ;case NE:  return ConditionFlag.NE;case LT:return ConditionFlag.LT;case LE:return ConditionFlag.LE;case GT:return ConditionFlag.GT;case GE:return ConditionFlag.GE;case AE:return ConditionFlag.HS;case BE:return ConditionFlag.LS;case AT:return ConditionFlag.HI;case BT:return ConditionFlag.LO;default :throw GraalError.shouldNotReachHere();}}  }
class C{  @Override protected boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion r,long startTime){  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"ManageBucketMessage operateOnRegion: {}",r.getFullPath());  }  if (!r.isInitialized()) {    ManageBackupBucketReplyMessage.sendStillInitializing(getSender(),getProcessorId(),dm);    return false;  }  r.checkReadiness();  PartitionedRegionDataStore prDs=r.getDataStore();  boolean managingBucket=prDs.grabBucket(this.bucketId,this.moveSource,this.forceCreation,replaceOfflineData,this.isRebalance,null,false) == CreateBucketResult.CREATED;  r.getPrStats().endPartitionMessagesProcessing(startTime);  if (managingBucket) {    ManageBackupBucketReplyMessage.sendAcceptance(getSender(),getProcessorId(),dm);  } else {    ManageBackupBucketReplyMessage.sendRefusal(getSender(),getProcessorId(),dm);  }  return false;}  }
class C{  public static JavaRunnerOptions fromConfig(){  return fromConfig(CeylonConfig.get());}  }
class C{  public boolean isAutomaticReconnect(){  return automaticReconnect;}  }
class C{  public static void resizeArchive(String sourcePath,String destPath,ConsolFun consolFun,int numSteps,int newRows) throws IOException {  if (Util.sameFilePath(sourcePath,destPath)) {    throw new IllegalArgumentException(SOURCE_AND_DESTINATION_PATHS_ARE_THE_SAME);  }  if (newRows < 2) {    throw new IllegalArgumentException("New archive size must be at least 2");  }  RrdDb rrdSource=new RrdDb(sourcePath);  try {    RrdDef rrdDef=rrdSource.getRrdDef();    ArcDef arcDef=rrdDef.findArchive(consolFun,numSteps);    if (arcDef.getRows() != newRows) {      arcDef.setRows(newRows);      rrdDef.setPath(destPath);      RrdDb rrdDest=new RrdDb(rrdDef);      try {        rrdSource.copyStateTo(rrdDest);      }  finally {        rrdDest.close();      }    }  }  finally {    rrdSource.close();  }}  }
class C{  public final boolean has(Class<?> componentType){  return keySet().stream().anyMatch(null);}  }
class C{  public final byte[] buffer(){  return _buf;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected Frame<V> newFrame(final Frame<? extends V> src){  return new Frame<V>(src);}  }
class C{  public void insertChild(FlexibleNode n,int pos){  int numChildren=getChildCount();  FlexibleNode[] newChild=new FlexibleNode[numChildren + 1];  for (int i=0; i < pos; i++) {    newChild[i]=child[i];  }  newChild[pos]=n;  for (int i=pos; i < numChildren; i++) {    newChild[i + 1]=child[i];  }  child=newChild;  n.setParent(this);}  }
class C{  @Override public void addToWorld(){  createHallOfFameSign();}  }
class C{  protected SplitterImpl(){  super();}  }
class C{  @SuppressWarnings("unchecked") public static <T>Flux<T> instance(){  return (Flux<T>)INSTANCE;}  }
class C{  @SuppressWarnings("unchecked") public <T extends WebMediumConfig>T updateIcon(String file,T config){  config.addCredentials(this);  String xml=POSTIMAGE(this.url + "/update-" + config.getType()+ "-icon",file,"image.jpg",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=(T)config.getClass().newInstance();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PROMISIFY_EXPRESSION__EXPRESSION:    return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Clusterer(){  setLayout(new BorderLayout());  add(m_visual,BorderLayout.CENTER);  setClusterer(m_Clusterer);}  }
class C{  private void clearCallbackState(){  this.clLastEvent=null;  this.clInvokeCount=0;  this.clClosed=false;  this.cwLastEvent=null;  this.cwInvokeCount=0;  this.cwClosed=false;  this.tlLastEvents=null;  this.tlInvokeCount=0;  this.tlClosed=false;}  }
class C{  public final void removeField(String fieldName){  if (fieldName != null && fieldIndex(fieldName) >= 0)   unsupported();}  }
class C{  synchronized public void releaseXMLReader(XMLReader reader){  if (m_readerManager != null) {    m_readerManager.releaseXMLReader(reader);  }}  }
class C{  public Scanner(InputStream source,String charsetName){  this(makeReadable(Objects.requireNonNull(source,"source"),toCharset(charsetName)),WHITESPACE_PATTERN);}  }
class C{  protected boolean isPlatoon(){  return true;}  }
class C{  public boolean hasVariableArgumentsNumber(){  if (knownArguments != null) {    for (    KnownArgument arg : knownArguments) {      if (arg.isOptional() || arg.canBeMultiple())       return true;    }    return false;  } else   return false;}  }
class C{  @Override public void sessionIdle(NextFilter nextFilter,IoSession session,IdleStatus status) throws Exception {  if (profileSessionIdle) {    long start=timeNow();    nextFilter.sessionIdle(session,status);    long end=timeNow();    sessionIdleTimerWorker.addNewDuration(end - start);  } else {    nextFilter.sessionIdle(session,status);  }}  }
class C{  public int fieldId(int typeId,String fieldName){  A.notNull(fieldName,"fieldName");  int id=isLowerCase ? lowerCaseHashCode(fieldName) : fieldName.hashCode();  if (id != 0)   return id; else {    throw new BinaryObjectException("Binary ID mapper resolved field ID to zero " + "(either change filed's name or use custom ID mapper) " + "[name=" + fieldName + ", isLowerCase="+ isLowerCase+ "]");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  double threshold=0;  double centreValue=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      threshold=Double.parseDouble(args[i]);    } else     if (i == 5) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 6) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPointX) && (y != midPointY)) {              z=inputFile.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];                sumOfTheSquares+=(z * filterShape[a]) * z;              }            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares / n) - (average * average);            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);            }            if (Math.abs((centreValue - average) / stdDev) > threshold) {              outputFile.setValue(row,col,average);            } else {              outputFile.setValue(row,col,centreValue);            }          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void updateViewToolbar(){  boolean remoteStoragesShown=remoteStorageSelection.getSelection();  filterByRepositoryMenu.removeAll();  for (  CmrRepositoryDefinition cmrRepositoryDefinition : cmrRepositoryManager.getCmrRepositoryDefinitions()) {    filterByRepositoryMenu.add(new FilterRepositoriesAction(cmrRepositoryDefinition));  }  filterByRepositoryMenu.getParent().update(false);  filterByRepositoryMenu.setVisible(remoteStoragesShown);  filterByStateMenu.setVisible(remoteStoragesShown);  Set<AbstractStorageLabelType<?>> availableLabelTypes=new HashSet<>();  if (remoteStoragesShown) {    for (    StorageData storageData : storageRepositoryMap.keySet()) {      for (      AbstractStorageLabel<?> label : storageData.getLabelList()) {        availableLabelTypes.add(label.getStorageLabelType());      }    }  } else {    for (    LocalStorageData localStorageData : downloadedStorages) {      for (      AbstractStorageLabel<?> label : localStorageData.getLabelList()) {        availableLabelTypes.add(label.getStorageLabelType());      }    }  }  groupByLabelMenu.removeAll();  if (remoteStoragesShown) {    groupByLabelMenu.add(new LabelOrderAction("CMR Repository",InspectIT.getDefault().getImageDescriptor(InspectITImages.IMG_SERVER_ONLINE_SMALL),null,null == orderingLabelType));  } else {    groupByLabelMenu.add(new LabelOrderAction("None",InspectIT.getDefault().getImageDescriptor(InspectITImages.IMG_STORAGE_DOWNLOADED),null,null == orderingLabelType));  }  for (  AbstractStorageLabelType<?> labelType : availableLabelTypes) {    if (labelType.isGroupingEnabled()) {      groupByLabelMenu.add(new LabelOrderAction(TextFormatter.getLabelName(labelType),ImageFormatter.getImageDescriptorForLabel(labelType),labelType,ObjectUtils.equals(labelType,orderingLabelType)));    }  }}  }
class C{  public void onRequestPermissionResult(int requestCode,String[] permissions,int[] grantResults) throws JSONException {  if (requestCode == REQUEST_LOCATION_PERMS_CODE && grantResults.length > 1) {    if (grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED) {      Log.d(TAG,"GEO PERMISSIONS GRANTED.");      _permissionsController.handleOnRequestAllowed();    } else {      Log.w(TAG,"GEO PERMISSIONS DENIED.");      _permissionsController.handleOnRequestDenied();      if (_permissionsController.getShowRationale() == _permissionsController.DENIED_NOASK) {        Log.w(TAG,"requestPermissions() Callback: " + ErrorMessages.LOCATION_SERVICES_DENIED_NOASK().message);        setSharedPreferences(_permissionsController.SHARED_PREFS_LOCATION_KEY,_permissionsController.SHARED_PREFS_GEO_DENIED_NOASK);      }    }  }}  }
class C{  @Override public void clear(){  this.callStack.clear();  super.clear();}  }
class C{  private static String toHexString(byte[] b){  StringBuilder buffer=new StringBuilder(b.length * 2);  for (int i=0; i < b.length; i++) {    buffer.append(HEX[((b[i] >> 4) & 0xF)]).append(HEX[b[i] & 0xF]);  }  return buffer.toString();}  }
class C{  public void disableAllAttributes(){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (cap.isAttribute()) {      disable(cap);    }  }}  }
class C{  public void addRateLimit(RateLimitType type,Server server,long retryAfter){  if (server == null) {    rateLimits.put(type,System.currentTimeMillis() + retryAfter);  } else {    HashMap<RateLimitType,Long> rateLimits=serverRateLimits.get(server);    if (rateLimits == null) {      rateLimits=new HashMap<>();      serverRateLimits.put(server,rateLimits);    }    rateLimits.put(type,System.currentTimeMillis() + retryAfter);  }}  }
class C{  public IndexingThread(LireDemoFrame parent){  this.parent=parent;}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  public void checkStateErrors(MediaRecorderStateErrors stateErrors){  assertTrue(!stateErrors.errorInDataSourceConfiguredState);  assertTrue(stateErrors.errorInPreparedState);  assertTrue(stateErrors.errorInRecordingState);  assertTrue(stateErrors.errorInInitialState);  assertTrue(stateErrors.errorInInitialStateAfterReset);  assertTrue(stateErrors.errorInInitialStateAfterStop);  assertTrue(stateErrors.errorInInitializedState);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  private boolean trySignature(String buf,String headerSignature,SignatureKeyType type){  String signature=_keyGenerator.sign(buf.toString(),type);  _log.debug("signature: " + (signature != null ? signature : "null"));  _log.debug("headerSignature: " + (headerSignature != null ? headerSignature : "null"));  if (StringUtils.isNotBlank(headerSignature) && StringUtils.isNotBlank(signature) && headerSignature.equals(signature)) {    return true;  }  return false;}  }
class C{  public boolean login(String username,String password) throws IOException {  user(username);  if (FTPReply.isPositiveCompletion(getReplyCode()))   return true;  if (!FTPReply.isPositiveIntermediate(getReplyCode()))   return false;  return FTPReply.isPositiveCompletion(pass(password));}  }
class C{  @SuppressWarnings("unchecked") private void addError(HttpServletRequest request,String text){  List<String> list=(List<String>)request.getAttribute(Constants.ERROR_LIST);  if (list == null) {    list=new ArrayList<String>();  }  list.add(text);  request.setAttribute(Constants.ERROR_LIST,list);}  }
class C{  private static <T>int gallopLeft(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (c.compare(key,a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  private static String collectionToDelimitedString(final Collection<String> coll,final String delim){  return collectionToDelimitedString(coll,delim,EMPTY,EMPTY);}  }
class C{  private ArrayList<URLCrawlDatum> readContents(Path fetchlist) throws IOException {  SequenceFile.Reader reader=new SequenceFile.Reader(fs,fetchlist,conf);  ArrayList<URLCrawlDatum> l=new ArrayList<URLCrawlDatum>();  READ:   do {    Text key=new Text();    CrawlDatum value=new CrawlDatum();    if (!reader.next(key,value)) {      break READ;    }    l.add(new URLCrawlDatum(key,value));  } while (true);  reader.close();  return l;}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  public static Element addTag(Element fatherElement,String tagName){  Element createElement=fatherElement.getOwnerDocument().createElement(tagName);  fatherElement.appendChild(createElement);  return createElement;}  }
class C{  public SingleAssetFilePanel(FileDescription desc){  initComponents();  this.desc=desc;  updateInfo();}  }
class C{  public Offset(Offset offset){  if (offset == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Offset","constructor","missingOffset"));  }  this.x=offset.x;  this.y=offset.y;  this.xUnits=offset.xUnits;  this.yUnits=offset.yUnits;}  }
class C{  public boolean resolve(Set<UnitInterface> allUnits){  Set<UnitInterface> includedUnits=callerUnit.getIncludedUnits(allUnits);  for (  UnitInterface unit : includedUnits) {    FunctionInterface[] unitFunctions=unit.getAllFunctions();    for (    FunctionInterface function : unitFunctions) {      if (function.getName().toLowerCase().endsWith(called.getName().toLowerCase())) {        caller.addCalledFunction(function);        return true;      }    }  }  return false;}  }
class C{  public static void changeNameBeforeExecute(Thread t,Runnable r){  String addMe=(r instanceof NamedTask) ? ((NamedTask<?>)r).getName() : r.getClass().getSimpleName();  if (StringUtils.isBlank(addMe)) {    addMe=ANONYMOUS_NAME;  }  t.setName(t.getName() + TASK_DELIMITER + addMe);}  }
class C{  public void testStatistic() throws Exception {  BoundaryStatisticImpl stat=new BoundaryStatisticImpl("myBoundaryStat","seconds","myBoundaryStatDesc",1000,2000);  assertStatistic(stat,"myBoundaryStat","seconds","myBoundaryStatDesc");  assertEquals(1000,stat.getLowerBound());  assertEquals(2000,stat.getUpperBound());  LOG.info("Stat is: " + stat);}  }
class C{  private void initialize() throws JSONException {  schema=new JSONObject();  if (schemaKeys != null) {    schema.put(Schema.FIELD_SCHEMA_KEYS,SchemaUtils.createJSONObject(schemaKeys));  }  schema.put(SnapshotSchema.FIELD_SCHEMA_TYPE,DimensionalSchema.SCHEMA_TYPE);  schema.put(SnapshotSchema.FIELD_SCHEMA_VERSION,DimensionalSchema.SCHEMA_VERSION);  if (responseDelayMillis > 0) {    schema.put(FIELD_RESPONSE_DELAY_MILLS,responseDelayMillis);  }  if (!configurationSchema.getTags().isEmpty()) {    schema.put(FIELD_TAGS,new JSONArray(configurationSchema.getTags()));  }  time=new JSONObject();  schema.put(FIELD_TIME,time);  JSONArray bucketsArray=new JSONArray(configurationSchema.getBucketsString());  time.put(FIELD_TIME_BUCKETS,bucketsArray);  time.put(FIELD_SLIDING_AGGREGATE_SUPPORTED,true);  keys=new JSONArray(configurationSchema.getKeysString());  for (int keyIndex=0; keyIndex < keys.length(); keyIndex++) {    JSONObject keyJo=keys.getJSONObject(keyIndex);    String keyName=keyJo.getString(DimensionalConfigurationSchema.FIELD_KEYS_NAME);    List<String> tags=configurationSchema.getKeyToTags().get(keyName);    if (!tags.isEmpty()) {      keyJo.put(FIELD_TAGS,new JSONArray(tags));    }  }  schema.put(DimensionalConfigurationSchema.FIELD_KEYS,keys);  JSONArray values=new JSONArray();  schema.put(SnapshotSchema.FIELD_VALUES,values);  FieldsDescriptor inputValuesDescriptor=configurationSchema.getInputValuesDescriptor();  Map<String,Map<String,Type>> allValueToAggregator=configurationSchema.getSchemaAllValueToAggregatorToType();  for (  Map.Entry<String,Map<String,Type>> entry : allValueToAggregator.entrySet()) {    String valueName=entry.getKey();    for (    Map.Entry<String,Type> entryAggType : entry.getValue().entrySet()) {      String aggregatorName=entryAggType.getKey();      Type outputValueType=entryAggType.getValue();      JSONObject value=new JSONObject();      String combinedName=valueName + DimensionalConfigurationSchema.ADDITIONAL_VALUE_SEPERATOR + aggregatorName;      value.put(SnapshotSchema.FIELD_VALUES_NAME,combinedName);      value.put(SnapshotSchema.FIELD_VALUES_TYPE,outputValueType.getName());      List<String> tags=configurationSchema.getValueToTags().get(valueName);      if (!tags.isEmpty()) {        value.put(FIELD_TAGS,new JSONArray(tags));      }      values.put(value);    }  }  JSONArray dimensions=new JSONArray();  for (int combinationID=0; combinationID < configurationSchema.getDimensionsDescriptorIDToKeys().size(); combinationID++) {    Fields fields=configurationSchema.getDimensionsDescriptorIDToKeys().get(combinationID);    Map<String,Set<String>> fieldToAggregatorAdditionalValues=configurationSchema.getDimensionsDescriptorIDToFieldToAggregatorAdditionalValues().get(combinationID);    JSONObject combination=new JSONObject();    JSONArray combinationArray=new JSONArray();    for (    String field : fields.getFields()) {      combinationArray.put(field);    }    combination.put(DimensionalConfigurationSchema.FIELD_DIMENSIONS_COMBINATIONS,combinationArray);    if (!fieldToAggregatorAdditionalValues.isEmpty()) {      JSONArray additionalValueArray=new JSONArray();      for (      Map.Entry<String,Set<String>> entry : fieldToAggregatorAdditionalValues.entrySet()) {        String valueName=entry.getKey();        for (        String aggregatorName : entry.getValue()) {          JSONObject additionalValueObject=new JSONObject();          String combinedName=valueName + DimensionalConfigurationSchema.ADDITIONAL_VALUE_SEPERATOR + aggregatorName;          Type inputValueType=inputValuesDescriptor.getType(valueName);          if (!configurationSchema.getAggregatorRegistry().isAggregator(aggregatorName)) {            if (aggregatorName == null) {              LOG.error("{} is not a valid aggregator.",aggregatorName);            }          }          Type outputValueType;          if (configurationSchema.getAggregatorRegistry().isIncrementalAggregator(aggregatorName)) {            IncrementalAggregator aggregator=configurationSchema.getAggregatorRegistry().getNameToIncrementalAggregator().get(aggregatorName);            outputValueType=aggregator.getOutputType(inputValueType);          } else {            outputValueType=configurationSchema.getAggregatorRegistry().getNameToOTFAggregators().get(aggregatorName).getOutputType();          }          additionalValueObject.put(DimensionalConfigurationSchema.FIELD_VALUES_NAME,combinedName);          additionalValueObject.put(DimensionalConfigurationSchema.FIELD_VALUES_TYPE,outputValueType.getName());          additionalValueArray.put(additionalValueObject);        }      }      combination.put(DimensionalConfigurationSchema.FIELD_DIMENSIONS_ADDITIONAL_VALUES,additionalValueArray);    }    dimensions.put(combination);  }  schema.put(DimensionalConfigurationSchema.FIELD_DIMENSIONS,dimensions);  this.schemaJSON=this.schema.toString();}  }
class C{  @Override protected void addToFrontier(Node node){  frontier.add(node);  updateMetrics(frontier.size());}  }
class C{  public ProcessParameterPanel(int WindowNo,ProcessInfo pi){  this(WindowNo,pi,"100%");}  }
class C{  public boolean isPeekInitialized(){  return HARegionQueue.peekedEventsContext.get() != null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public short rollBackTransaction(EntityManager em){  if (em != null) {    if (em.getTransaction().isActive()) {      em.getTransaction().rollback();    }  }  return 1;}  }
class C{  public boolean isStatic(){  return operation.isStatic();}  }
class C{  @Dev public TimeReachedCondition(final String questname,final int index){  this.questname=checkNotNull(questname);  this.index=index;}  }
class C{  public static Matrix arbitrariness(Matrix source,Matrix inverse){  Matrix intermediate=inverse.mtimes(source);  return DenseDoubleMatrix2D.Factory.eye(intermediate.getRowCount(),intermediate.getColumnCount()).minus(intermediate);}  }
class C{  public NotificationChain basicSetAnnotationList(PropertyAssignmentAnnotationList newAnnotationList,NotificationChain msgs){  PropertyAssignmentAnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static <T,U extends InputStream>T withStream(U stream,@ClosureParams(value=FirstParam.class) Closure<T> closure) throws IOException {  try {    T result=closure.call(stream);    InputStream temp=stream;    stream=null;    temp.close();    return result;  }  finally {    closeWithWarning(stream);  }}  }
class C{  private void checkGraphMLSchema(Schema s) throws DataIOException {  for (int i=0; i < s.getColumnCount(); ++i) {    Class type=s.getColumnType(i);    if (TYPES.get(type) == null) {      throw new DataIOException("Data type unsupported by the " + "GraphML format: " + type.getName());    }  }}  }
class C{  public boolean containsWord(Predicate<WordToken> filter){  if (words != null && !words.isEmpty()) {    final boolean result=words.stream().anyMatch(filter);    if (result) {      return true;    }  }  if (children != null) {    return children.stream().anyMatch(null);  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.PRIMITIVE_TYPE__DECLARED_ELEMENT_TYPE:    setDeclaredElementType((TypeRef)null);  return;case TypesPackage.PRIMITIVE_TYPE__ASSIGNMENT_COMPATIBLE:setAssignmentCompatible((PrimitiveType)null);return;case TypesPackage.PRIMITIVE_TYPE__AUTOBOXED_TYPE:setAutoboxedType((TClassifier)null);return;}super.eUnset(featureID);}  }
class C{  boolean isAnimating(){  return mAnimation != null || (mAttachedWinAnimator != null && mAttachedWinAnimator.mAnimation != null) || (mAppAnimator != null && (mAppAnimator.animation != null || mAppAnimator.mAppToken.inPendingTransaction));}  }
class C{  public void walk(MowzieModelRenderer box,float speed,float degree,boolean invert,float offset,float weight,float f,float f1){  int inverted=1;  if (invert)   inverted=-1;  box.rotateAngleX+=MathHelper.cos(f * speed + offset) * degree * inverted* f1 + weight * f1;}  }
class C{  private static boolean isOverridable(Method method,Class<?> targetClass){  if (Modifier.isPrivate(method.getModifiers())) {    return false;  }  if (Modifier.isPublic(method.getModifiers()) || Modifier.isProtected(method.getModifiers())) {    return true;  }  return getPackageName(method.getDeclaringClass()).equals(getPackageName(targetClass));}  }
class C{  public boolean userCanMoveDept(int connectedUserId,int DeptId,int dstDeptId,String entidad) throws Exception {  boolean can=false;  int parentId=ISicresAdminDefsKeys.NULL_ID;  int parentDeptMgrId=ISicresAdminDefsKeys.NULL_ID;  int dstDeptMgrId=ISicresAdminDefsKeys.NULL_ID;  try {    parentId=getDeptParentId(DeptId,entidad);    if (parentId == ISicresAdminDefsKeys.ROOT_DEPT_ID)     parentDeptMgrId=0; else     parentDeptMgrId=getDeptMgrId(DeptId,entidad);    if (dstDeptId == ISicresAdminDefsKeys.NULL_ID || dstDeptId == ISicresAdminDefsKeys.ROOT_DEPT_ID)     dstDeptMgrId=0; else     dstDeptMgrId=getDeptMgrId(dstDeptId,entidad);    can=hasUserDeptAuth(connectedUserId,USER_ACTION_ID_EDIT,ISicresAdminDefsKeys.NULL_ID,parentDeptMgrId,dstDeptMgrId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public void opc_if_icmpeq(Label l){  short instrBCI=getLength();  emitByte(opc_if_icmpeq);  l.add(this,instrBCI,getLength(),getStack() - 2);  emitShort((short)-1);}  }
class C{  public static AbstractList<String> propertyNameList(Entity entity){  final AbstractList<String> propertyNameList=new ArrayList<>(entity.getProperties().size());  for (  Property property : entity.getProperties()) {    propertyNameList.add(property.getPropertyName());  }  return propertyNameList;}  }
class C{  public long count(){  return count;}  }
class C{  @BeforeMethod public void initMocks(){  MockitoAnnotations.initMocks(this);  MethodIdent methodIdent=mock(MethodIdent.class);  when(methodIdent.getId()).thenReturn(1L);  when(methodIdent.getFQN()).thenReturn("");  when(methodIdent.getMethodName()).thenReturn("");  when(methodIdent.getParameters()).thenReturn(Collections.<String>emptyList());  CachedDataService cachedDataService=mock(CachedDataService.class);  when(repositoryDefinition.getCachedDataService()).thenReturn(cachedDataService);  when(cachedDataService.getMethodIdentForId(1L)).thenReturn(methodIdent);}  }
class C{  public void addPublicationLabel(String label){  PublicationLabelConstruct val=new PublicationLabelConstruct();  val.setValue(label);  this.addRepeatingExtension(val);}  }
class C{  public final boolean isFlushed(){  return tail.EQ(Deque.TAIL_INITIAL_VALUE);}  }
class C{  public Fas(Graph initialGraph,IndependenceTest test){  if (initialGraph != null) {    this.initialGraph=new EdgeListGraph(initialGraph);  }  this.test=test;  this.nodes=test.getVariables();}  }
class C{  public DerivedFont(String key,float sizeOffset,Boolean bold,Boolean italic){  if (key == null) {    throw new IllegalArgumentException("You must specify a key");  }  this.parentKey=key;  this.sizeOffset=sizeOffset;  this.bold=bold;  this.italic=italic;}  }
class C{  public static boolean asBoolean(Number number){  return number.doubleValue() != 0;}  }
class C{  public synchronized void exiting(String sourceClass,String sourceMethod,Object[] params){  LogRecord record=new LogRecord(Level.CONFIG,"Exiting method");  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  log(record);}  }
class C{  public final boolean within(Element element){  return within(element,false);}  }
class C{  public Element simulate(final List<Element> arguments,final List<Instruction> instructions,final MethodIdentifier identifier){  if (EXECUTED_PATH_METHODS.contains(identifier))   return new Element();  lock.lock();  EXECUTED_PATH_METHODS.add(identifier);  try {    injectArguments(arguments,identifier);    return simulateInternal(instructions);  }  finally {    EXECUTED_PATH_METHODS.remove(identifier);    lock.unlock();  }}  }
class C{  public synchronized boolean hasDraft(){  if (mThreadId <= 0)   return false;  return DraftCache.getInstance().hasDraft(mThreadId);}  }
class C{  public SingleRequestSender(CloseableHttpAsyncClient client,Integer timeoutSec){  this(client);  this.timeoutSec=timeoutSec;}  }
class C{  public static int compare(float lhs,float rhs){  if (lhs < rhs) {    return -1;  }  if (lhs > rhs) {    return +1;  }  int lhsBits=Float.floatToIntBits(lhs);  int rhsBits=Float.floatToIntBits(rhs);  if (lhsBits == rhsBits) {    return 0;  }  if (lhsBits < rhsBits) {    return -1;  } else {    return +1;  }}  }
class C{  public static void quickSelect(ModifiableDoubleDBIDList data,int start,int end,int rank){  DoubleDBIDListIter refi=data.iter(), refj=data.iter(), pivot=data.iter();  while (true) {    if (start + SMALL > end) {      insertionSort(data,start,end,refi,refj);      return;    }    final int len=end - start;    final int seventh=(len >> 3) + (len >> 6) + 1;    final int m3=(start + end) >> 1;    final int m2=m3 - seventh;    final int m1=m2 - seventh;    final int m4=m3 + seventh;    final int m5=m4 + seventh;    if (refi.seek(m1).doubleValue() > refj.seek(m2).doubleValue()) {      data.swap(m1,m2);    }    if (refi.seek(m1).doubleValue() > refj.seek(m3).doubleValue()) {      data.swap(m1,m3);    }    if (refi.seek(m2).doubleValue() > refj.seek(m3).doubleValue()) {      data.swap(m2,m3);    }    if (refi.seek(m4).doubleValue() > refj.seek(m5).doubleValue()) {      data.swap(m4,m5);    }    if (refi.seek(m1).doubleValue() > refj.seek(m4).doubleValue()) {      data.swap(m1,m4);    }    if (refi.seek(m3).doubleValue() > refj.seek(m4).doubleValue()) {      data.swap(m3,m4);    }    if (refi.seek(m2).doubleValue() > refj.seek(m5).doubleValue()) {      data.swap(m2,m5);    }    if (refi.seek(m2).doubleValue() > refj.seek(m3).doubleValue()) {      data.swap(m2,m3);    }    if (refi.seek(m4).doubleValue() > refj.seek(m5).doubleValue()) {      data.swap(m4,m5);    }    int best=bestPivot(rank,m1,m2,m3,m4,m5);    data.swap(best,end - 1);    final double pivotv=pivot.seek(end - 1).doubleValue();    int i=start, j=end - 2;    while (true) {      while (i <= j && refi.seek(i).doubleValue() <= pivotv) {        i++;      }      while (j >= i && refj.seek(j).doubleValue() >= pivotv) {        j--;      }      if (i >= j) {        break;      }      data.swap(i,j);    }    data.swap(i,end - 1);    pivot.seek(i);    while (rank < i && refi.seek(i - 1).doubleValue() == pivotv) {      --i;    }    while (rank > i && refi.seek(i + 1).doubleValue() == pivotv) {      ++i;    }    if (rank < i) {      end=i;    } else     if (rank > i) {      start=i + 1;    } else {      break;    }  }}  }
class C{  public static void notNull(String argumentName,Object objectToTest){  if (objectToTest == null) {    throw new IllegalArgumentException(argumentName + " cannot be null");  }}  }
class C{  public void addMutedMac(final String mac){  addMutedMac(mac,null);}  }
class C{  public static <T>T createService(final Class<T> clazz,final String baseUrl){  Retrofit retrofit=new Retrofit.Builder().baseUrl(baseUrl).addConverterFactory(GsonConverterFactory.create()).build();  return retrofit.create(clazz);}  }
class C{  public void reset(){  m_NumQueries=0;  m_SumP=m_SumSqP=m_PointCount=0;  m_MinP=Integer.MAX_VALUE;  m_MaxP=Integer.MIN_VALUE;  m_SumC=m_SumSqC=m_CoordCount=0;  m_MinC=Integer.MAX_VALUE;  m_MaxC=Integer.MIN_VALUE;}  }
class C{  public void updateFmtPrefFicha(FmtPrefFichaVO fmtPrefFicha){  try {    DbConnection conn=getConnection();    final String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID_FICHA,fmtPrefFicha.getIdFicha())).append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_ID_USUARIO,fmtPrefFicha.getIdUsuario())).append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_TIPO_FMT,fmtPrefFicha.getTipoFmt())).toString();    DbUpdateFns.update(conn,TABLE_NAME,COLUM_NAMES_LIST,new SigiaDbInputRecord(COL_DEFS,fmtPrefFicha),qual.toString());  } catch (  Exception e) {    logger.error("Error modificando formato de ficha preferente: " + fmtPrefFicha,e);    throw new DBException("modificando formato de ficha preferente",e);  }}  }
class C{  @Override public void dispose(){  isClosed=true;  if (mSender != null) {    mSender.dispose();  }  if (mReceiver != null) {    mReceiver.dispose();  }  if (mSendDispatcher != null)   mSendDispatcher.dispose();  if (mReceiveDispatcher != null)   mReceiveDispatcher.dispose();  SelectorFactory.tryDispose();}  }
class C{  private void updateValidationMessages(){  if (!mainComposite.isDisposed()) {    for (    AbstractPropertyControl<?,?> propertyControl : propertyControls) {      propertyControl.displayValidationErrors(getValidationErrors());    }  }}  }
class C{  public StatementBuilder(){}  }
class C{  public static Distribution guessDegree(DataSet d){  return new UniformDiscrete(2,9);}  }
class C{  public void testDouble() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new DoublePoint("value",30.1));  doc.add(new StoredField("value",30.1));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",-1.3));  doc.add(new StoredField("value",-1.3));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",4.2333333333333));  doc.add(new StoredField("value",4.2333333333333));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",4.2333333333332));  doc.add(new StoredField("value",4.2333333333332));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.DOUBLE_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertEquals("30.1",searcher.doc(td.scoreDocs[3].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public void sqlOccured(Spy spy,String methodCall,String sql){  if (!DriverSpy.DumpSqlFilteringOn || shouldSqlBeLogged(sql)) {    if (sqlOnlyLogger.isDebugEnabled()) {      sqlOnlyLogger.debug(getDebugInfo() + nl + spy.getConnectionNumber()+ ". "+ processSql(sql));    } else     if (sqlOnlyLogger.isInfoEnabled()) {      sqlOnlyLogger.info(processSql(sql));    }  }}  }
class C{  protected final void LOWTABLESWITCH(Instruction s){  RegisterOperand newIndex=regpool.makeTempInt();  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,newIndex,LowTableSwitch.getClearIndex(s))));  RegisterOperand methodStart=regpool.makeTemp(TypeReference.Address);  EMIT(CPOS(s,MIR_Nullary.create(IA32_METHODSTART,methodStart)));  int number=LowTableSwitch.getNumberOfTargets(s);  Instruction s2=CPOS(s,MIR_LowTableSwitch.create(MIR_LOWTABLESWITCH,newIndex.copyRO(),methodStart.copyD2U(),number * 2));  for (int i=0; i < number; i++) {    MIR_LowTableSwitch.setTarget(s2,i,LowTableSwitch.getClearTarget(s,i));    MIR_LowTableSwitch.setBranchProfile(s2,i,LowTableSwitch.getClearBranchProfile(s,i));  }  EMIT(s2);}  }
class C{  private static void enableAllView(final BreakpointManager manager,final INaviView view){  final Set<BreakpointAddress> addressesToEnable=new HashSet<BreakpointAddress>();  for (int i=0; i < manager.getNumberOfBreakpoints(BreakpointType.REGULAR); i++) {    final BreakpointAddress address=manager.getBreakpoint(BreakpointType.REGULAR,i).getAddress();    if (CViewHelpers.containsAddress(view,address.getAddress())) {      addressesToEnable.add(address);    }  }  manager.setBreakpointStatus(addressesToEnable,BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_ENABLED);}  }
class C{  @Override public void shutdown(){  getBot().log(this,"Shutdown",Bot.FINE);  setIsEnabled(false);}  }
class C{  public final void transform(Vec3D t,Vec3D result){  float x, y, z;  x=(float)(m00 * t.x + m01 * t.y + m02 * t.z);  y=(float)(m10 * t.x + m11 * t.y + m12 * t.z);  result.z=(float)(m20 * t.x + m21 * t.y + m22 * t.z);  result.x=x;  result.y=y;}  }
class C{  public Expression copyInline(Context ctx){  if (implementation != null)   return implementation.copyInline(ctx);  AssignExpression e=(AssignExpression)clone();  e.left=left.copyInline(ctx);  e.right=right.copyInline(ctx);  if (updater != null) {    e.updater=updater.copyInline(ctx);  }  return e;}  }
class C{  public int read() throws IOException {  if (optional(1) == 0)   return -1;  return buffer[position++] & 0xFF;}  }
class C{  public Filter addAttribute(String attribute,Object entity){  put(attribute,entity);  return (this);}  }
class C{  private void propagateCurrentNodes(HostChangeListener listener){  for (  ChildData child : childrenCache.getCurrentData()) {    String hostId=ZKPaths.getNodeFromPath(child.getPath());    HostConfig config=deserialize(hostId,child.getData());    listener.onHostAdded(hostId,config);  }}  }
class C{  private void logResults(){  logResult("VA Results: \n\n");  for (  Map.Entry<IAllocNode,RefVAModel> entry : allocNodeToVAModelMap.entrySet()) {    logResult("AllocNode: " + entry.getKey());    logResult("Model: " + entry.getValue().toStringPretty());  }}  }
class C{  public void initWechat(String wechatAppId,String wechatSecret){  mWechatAppId=wechatAppId;  mWechatSecret=wechatSecret;}  }
class C{  public boolean isRoot(){  return "ROOT".equals(getName());}  }
class C{  private boolean shellIsFocused(){  final Control focusControl=getDisplay().getFocusControl();  if (focusControl == null) {    return false;  }  final Shell focusedShell=ShellUtils.getParentShell(focusControl);  final Shell ourShell=ShellUtils.getParentShell(this);  return (focusedShell == ourShell);}  }
class C{  public TaskBuilder name(String name){  this.name=name + "@" + System.identityHashCode(this.runnable);  return this;}  }
class C{  static void testCopyFileToFile(Path dir1,Path dir2,boolean supportsLinks) throws IOException {  Path source, target, link, entry;  source=createSourceFile(dir1);  target=getTargetFile(dir2);  copyAndVerify(source,target);  delete(source);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  createFile(target);  try {    copyAndVerify(source,target);    throw new RuntimeException("FileAlreadyExistsException expected");  } catch (  FileAlreadyExistsException x) {  }  delete(target);  createDirectory(target);  try {    copyAndVerify(source,target);    throw new RuntimeException("FileAlreadyExistsException expected");  } catch (  FileAlreadyExistsException x) {  }  delete(source);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  copyAndVerify(source,target,REPLACE_EXISTING);  delete(source);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  createFile(target);  copyAndVerify(source,target,REPLACE_EXISTING);  delete(source);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  createDirectory(target);  copyAndVerify(source,target,REPLACE_EXISTING);  delete(source);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  createDirectory(target);  entry=target.resolve("foo");  createFile(entry);  try {    copyAndVerify(source,target);    throw new RuntimeException("FileAlreadyExistsException expected");  } catch (  FileAlreadyExistsException x) {  }  delete(entry);  delete(source);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  copyAndVerify(source,target,COPY_ATTRIBUTES);  delete(source);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  copyAndVerify(source,target);  delete(source);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  createFile(target);  try {    copyAndVerify(source,target);    throw new RuntimeException("FileAlreadyExistsException expected");  } catch (  FileAlreadyExistsException x) {  }  delete(target);  createDirectory(target);  try {    copyAndVerify(source,target);    throw new RuntimeException("FileAlreadyExistsException expected");  } catch (  FileAlreadyExistsException x) {  }  delete(source);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  copyAndVerify(source,target,REPLACE_EXISTING);  delete(source);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  createFile(target);  copyAndVerify(source,target,REPLACE_EXISTING);  delete(source);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  createDirectory(target);  copyAndVerify(source,target,REPLACE_EXISTING);  delete(source);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  createDirectory(target);  entry=target.resolve("foo");  createFile(entry);  try {    copyAndVerify(source,target,REPLACE_EXISTING);    throw new RuntimeException("DirectoryNotEmptyException expected");  } catch (  DirectoryNotEmptyException x) {  }  delete(entry);  delete(source);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  copyAndVerify(source,target,COPY_ATTRIBUTES);  delete(source);  delete(target);  if (supportsLinks) {    source=createSourceFile(dir1);    link=dir1.resolve("link");    createSymbolicLink(link,source);    target=getTargetFile(dir2);    copyAndVerify(link,target);    delete(link);    delete(source);  }  if (supportsLinks) {    source=createSourceFile(dir1);    link=dir1.resolve("link");    createSymbolicLink(link,source);    target=getTargetFile(dir2);    copyAndVerify(link,target,NOFOLLOW_LINKS);    delete(link);    delete(source);  }  if (supportsLinks) {    source=dir1.resolve("mydir");    createDirectory(source);    link=dir1.resolve("link");    createSymbolicLink(link,source);    target=getTargetFile(dir2);    copyAndVerify(link,target,NOFOLLOW_LINKS);    delete(link);    delete(source);  }  if (supportsLinks) {    assertTrue(notExists(source));    link=dir1.resolve("link");    createSymbolicLink(link,source);    target=getTargetFile(dir2);    copyAndVerify(link,target,NOFOLLOW_LINKS);    delete(link);  }  if (supportsLinks && System.getProperty("os.name").startsWith("Windows")) {    Path unc=Paths.get("\\\\rialto\\share\\file");    link=dir1.resolve("link");    createSymbolicLink(link,unc);    target=getTargetFile(dir2);    copyAndVerify(link,target,NOFOLLOW_LINKS);    delete(link);  }  source=createSourceFile(dir1);  target=getTargetFile(dir2);  try {    copy(source,null);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException x) {  }  try {    copy(source,target,(CopyOption[])null);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException x) {  }  try {    CopyOption[] opts={REPLACE_EXISTING,null};    copy(source,target,opts);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException x) {  }  delete(source);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  try {    copy(source,target,new CopyOption(){    });  } catch (  UnsupportedOperationException x) {  }  try {    copy(source,target,REPLACE_EXISTING,new CopyOption(){    });  } catch (  UnsupportedOperationException x) {  }  delete(source);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.244 -0500",hash_original_method="7256751168A905EF802B1EFF88D64306",hash_generated_method="6684F3DAAD8CDC40AFAE4177FC4EA7E1") public void addCircle(float x,float y,float radius,Direction dir){  isSimplePath=false;  addTaint(x + y + radius+ dir.getTaintInt());}  }
class C{  @Override public void putAll(Map<? extends Object,? extends Object> t){  throw new UnsupportedOperationException("ProtectedProperties cannot be modified!");}  }
class C{  public boolean isBeingInstantiated(){  return beingInstantiated;}  }
class C{  public void remove(ExampleSetBasedIndividual individual){  individuals.remove(individual);}  }
class C{  @Override public void sync(){}  }
class C{  private List<String> checkAndFilterRemoveEndPoints(Network network,List<String> remEps){  List<String> removedEp=new ArrayList<String>();  for (  String str : remEps) {    if (network.getEndpointsMap() != null && network.getEndpointsMap().containsKey(EndpointUtility.changeCase(str))) {      removedEp.add(str);    }  }  checkNotRemovingDiscoveredEndpoints(network,removedEp);  checkEndPointsForExports(removedEp);  return removedEp;}  }
class C{  @Override public void postAddInit(){  rasterPanel.init();}  }
class C{  public double recall(){  return pairconfuse[0] / (double)(pairconfuse[0] + pairconfuse[1]);}  }
class C{  public static void storeLocation(Context context,LatLng location){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  SharedPreferences.Editor editor=prefs.edit();  editor.putLong(PREFERENCES_LAT,Double.doubleToRawLongBits(location.latitude));  editor.putLong(PREFERENCES_LNG,Double.doubleToRawLongBits(location.longitude));  editor.apply();}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (tabSize == 0)   return x;  int ntabs=((int)x - tabBase) / tabSize;  return tabBase + ((ntabs + 1) * tabSize);}  }
class C{  public final void remove(){  if (this.menu != null) {    this.menu.close();    this.menu=null;  }  if (this.toucharea != null) {    this.toucharea.remove();  }  this.anchor.setWireInProgress(null);  this.anchor.localToSceneTransformProperty().removeListener(this);  this.anchor.getPane().removeWire(this);}  }
class C{  public Master(String filename) throws IOException {  this(new File(filename),null,-1);}  }
class C{  public Tasks<VolumeRestRep> deactivate(List<URI> ids){  return deactivate(ids,VolumeDeleteTypeEnum.FULL);}  }
class C{  protected Tag(String name){  super();  this.name=name;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.STRING_EVALUATOR__EXPR:    return basicSetExpr(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean transactionWide(){  return !(!properties.isEmpty() || !correlationIds.isEmpty() || hostName != null || uri != null || operation != null);}  }
class C{  protected String engineGetURI(){  return implementedTransformURI;}  }
class C{  public Map<String,String> asMap(){  return asProperties().hashMap();}  }
class C{  @Bean public MappingJackson2HttpMessageConverter jackson2Converter(){  MappingJackson2HttpMessageConverter converter=new MappingJackson2HttpMessageConverter();  converter.setSupportedMediaTypes(MediaType.parseMediaTypes("application/hal+json"));  converter.setObjectMapper(converterObjectMapper());  return converter;}  }
class C{  public boolean isEmpty(){  return this.partialMatches.isEmpty();}  }
class C{  public BarChartSeriesAttributes(ChartGenerator generator,String name,int index,SeriesChangeListener stoppable){  super(generator,name,index,stoppable);}  }
class C{  private static void persistUpdatedVpoolList(List<VirtualPool> updatedVpoolList,DbClient dbClient){  if (!updatedVpoolList.isEmpty()) {    dbClient.updateAndReindexObject(updatedVpoolList);  }}  }
class C{  private void handleHtmlClearForm(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleClearDb();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,true).setPaneId("clear");  pageWrapper.addHeader();  if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    requestAndResponse.print("<table class=\"nopadding\"><tr><td>");    requestAndResponse.print(servletText.pageTitleClearDbTooltip());    requestAndResponse.print("<br><br>");    requestAndResponse.print(servletText.clearAreYouSure());    requestAndResponse.print("</td></tr><tr><td>");    requestAndResponse.print("<form action=\"/doClear/" + "\" method=\"POST\">" + "<input type=\"hidden\" name=\"csrft\" value=\"" + getCsrft(requestAndResponse) + "\">"+ "<button onclick=\"replacePaneForForm(event, '"+ servletText.pageTitleClearDb()+ "'); return false;\" class=\"specialbutton withTopMargin\">"+ servletText.pageTitleClearDb()+ "</button></form>");    requestAndResponse.print("</td></tr></table>");  }  pageWrapper.addFooter();}  }
class C{  protected void clearSearch(){  if (m_LastSearch.length() > 0) {    m_LastSearch="";    notifySearchListeners(new SearchEvent(SearchPanel.this,"",isRegularExpression()));  }}  }
class C{  private static void SetCharField(JNIEnvironment env,int objJREF,int fieldID,char value){  if (traceJNI)   VM.sysWrite("JNI called: SetCharField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setCharValueUnchecked(obj,value);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public void testSetGetAudit(){  System.out.println("getAudit");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  instance.setAudit(mockAudit);  assertEquals(mockAudit,instance.getAudit());}  }
class C{  public JTicker(TickerModel model,TickerRenderer renderer){  setRenderer(renderer);  setModel(model);}  }
class C{  public void startSpan(SpanBuilder spanBuilder){  doStartSpanWithParent(spanBuilder,null);}  }
class C{  public boolean hasFeature(int feature){  return ((feature >= MODE_FIRST && feature <= MODE_LAST) || (feature >= FEATURE_FIRST && feature <= FEATURE_LAST)) && (feature == MODE_OFF || mCapabilities.get(feature));}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public String toString(){  return ToStringBuilder.reflectionToString(this,ToStringStyle.SHORT_PREFIX_STYLE);}  }
class C{  public Boolean isRuleSupport(){  return ruleSupport;}  }
class C{  public void dispose() throws GSSException {  try {    destroy();  } catch (  javax.security.auth.DestroyFailedException e) {    GSSException gssException=new GSSException(GSSException.FAILURE,-1,"Could not destroy credentials - " + e.getMessage());    gssException.initCause(e);  }}  }
class C{  private String json(final ServiceErrorRestRep error) throws JsonGenerationException, JsonMappingException, IOException {  final ObjectMapper mapper=new ObjectMapper();  final AnnotationIntrospector introspector=new JaxbAnnotationIntrospector();  mapper.getSerializationConfig().withAnnotationIntrospector(introspector);  mapper.getDeserializationConfig().withAnnotationIntrospector(introspector);  return mapper.writeValueAsString(error);}  }
class C{  @SuppressWarnings("unchecked") public void putMessage(IEncodeable s) throws EncodingException {  Class<IEncodeable> clazz=(Class<IEncodeable>)s.getClass();  try {    putNodeId(null,ctx.getEncodeableNodeId(clazz,EncodeType.Binary));  } catch (  ServiceResultException e) {    throw new EncodingException("Could not get BinaryEncodeId for the class",e);  }  ctx.encodeableSerializer.calcEncodeable(clazz,s,this);}  }
class C{  private String createFileFullPath(){  String fullPath=url.toString();  fullPath=fullPath.replaceFirst("://([^:]+)(?:.+)@","://$1@");  return fullPath;}  }
class C{  public ReaderGuacamoleReader(Reader input){  this.input=input;}  }
class C{  public boolean isTestable(final URI location){  if (null == location) {    return false;  }  if (isProject(location)) {    final IN4JSProject p=n4jsCore.create(location);    return p.getSourceContainers().stream().anyMatch(null);  } else {    if (location.hasFragment()) {      return isTestable(location.trimFragment());    }    final IN4JSSourceContainer c=n4jsCore.findN4JSSourceContainer(location).orNull();    if (c == null || !c.isTest())     return false;    final ResourceSet resourceSet=n4jsCore.createResourceSet(Optional.of(c.getProject()));    final IResourceDescriptions index=n4jsCore.getXtextIndex(resourceSet);    final IResourceDescription rdesc=index.getResourceDescription(location);    if (rdesc != null) {      return stream(rdesc.getExportedObjectsByType(T_CLASS)).anyMatch(null);    } else {      return true;    }  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public Matrix(byte[][] initData){  rows=initData.length;  columns=initData[0].length;  data=new byte[rows][];  for (int r=0; r < rows; r++) {    if (initData[r].length != columns) {      throw new IllegalArgumentException("Not all rows have the same number of columns");    }    data[r]=new byte[columns];    for (int c=0; c < columns; c++) {      data[r][c]=initData[r][c];    }  }}  }
class C{  public String serializedClassifierFileTipText(){  return "A file containing the serialized model of a trained classifier.";}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  void initDemandAndCollectionMap(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {    demand.put(fieldName,BigDecimal.ZERO);    collection.put(fieldName,BigDecimal.ZERO);    rebates.put(fieldName,BigDecimal.ZERO);  }}  }
class C{  public static boolean testRayCircle(Vector2dc origin,Vector2dc dir,Vector2dc center,double radiusSquared){  return testRayCircle(origin.x(),origin.y(),dir.x(),dir.y(),center.x(),center.y(),radiusSquared);}  }
class C{  public boolean undo(){  if (this.historyPointer > 1) {    this.historyPointer--;    this.invalidate();    return true;  } else {    return false;  }}  }
class C{  public BoxView(Element elem,int axis){  super(elem);  tempRect=new Rectangle();  this.majorAxis=axis;  majorOffsets=new int[0];  majorSpans=new int[0];  majorReqValid=false;  majorAllocValid=false;  minorOffsets=new int[0];  minorSpans=new int[0];  minorReqValid=false;  minorAllocValid=false;}  }
class C{  @Override public <T>ServiceBuilderAmp newService(Class<T> type,Supplier<? extends T> supplier){  Objects.requireNonNull(type);  Objects.requireNonNull(supplier);  return new ServiceBuilderImpl<>(this,type,supplier);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ADDRESS_ITEM'";  db.execSQL(sql);}  }
class C{  @Override public void addAttribute(String name,float value){  String str=Float.toString(value);  if (str.endsWith(".0"))   str=str.substring(0,str.length() - 2);  current.setAttribute(name,str);}  }
class C{  public TemplateLiteral createTemplateLiteral(){  TemplateLiteralImpl templateLiteral=new TemplateLiteralImpl();  return templateLiteral;}  }
class C{  private boolean updateVOParameters(List<VOParameter> parameters) throws SQLException {  boolean wasUpdated=false;  for (  VOParameter parameter : parameters) {    boolean configurable=isConfigurable(parameter.getKey());    if (parameter.isConfigurable() != configurable) {      wasUpdated=true;      parameter.setConfigurable(configurable);    }  }  return wasUpdated;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.add(new Option("\tThe filter to use. (default: weka.unsupervised.attribute.RandomProjection","F",1,"-F"));  result.addElement(new Option("\tThe distance function to use. (default: weka.core.EuclideanDistance","E",0,"-E"));  if (m_Filter instanceof OptionHandler) {    result.addElement(new Option("","",0,"\nOptions specific to filter " + m_Filter.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_Filter).listOptions()));  }  if (m_Distance instanceof OptionHandler) {    result.addElement(new Option("","",0,"\nOptions specific to distance function " + m_Distance.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_Distance).listOptions()));  }  result.addElement(new Option("\tSpecifies list of columns to used in the calculation of the \n" + "\tdistance. 'first' and 'last' are valid indices.\n" + "\t(default: first-last)","R",1,"-R <col1,col2-col4,...>"));  result.addElement(new Option("\tInvert matching sense of column indices.","V",0,"-V"));  return result.elements();}  }
class C{  public ESHistory(){}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public int compareTo(VCardProperty that){  Integer pref0=this.getParameters().getPref();  Integer pref1=that.getParameters().getPref();  if (pref0 == null && pref1 == null) {    return 0;  }  if (pref0 == null) {    return 1;  }  if (pref1 == null) {    return -1;  }  return pref1.compareTo(pref0);}  }
class C{  @Override public ISBNParsedResult parse(Result result){  BarcodeFormat format=result.getBarcodeFormat();  if (format != BarcodeFormat.EAN_13) {    return null;  }  String rawText=getMassagedText(result);  int length=rawText.length();  if (length != 13) {    return null;  }  if (!rawText.startsWith("978") && !rawText.startsWith("979")) {    return null;  }  return new ISBNParsedResult(rawText);}  }
class C{  private void fillAddressWithGeoIpData(final Address address){}  }
class C{  public static List<DialogueState> extractDialogue(String dataFile){  Document doc=XMLUtils.getXMLDocument(dataFile);  Node mainNode=XMLUtils.getMainNode(doc);  File f=new File(dataFile);  String rootpath=f.getParent();  List<DialogueState> sample=new LinkedList<DialogueState>();  for (int j=0; j < mainNode.getChildNodes().getLength(); j++) {    Node node=mainNode.getChildNodes().item(j);    if (node.getNodeName().contains("Turn")) {      DialogueState state=new DialogueState(XMLStateReader.getBayesianNetwork(node));      sample.add(state);      if (node.getNodeName().equals("systemTurn") && state.hasChanceNode("a_m")) {        Assignment assign=new Assignment("a_m",state.queryProb("a_m").getBest());        state.addEvidence(assign);      }    } else     if (node.getNodeName().equals("wizard")) {      Assignment assign=Assignment.createFromString(node.getFirstChild().getNodeValue().trim());      sample.get(sample.size() - 1).addEvidence(assign);    } else     if (node.getNodeName().equals("import")) {      String fileName=mainNode.getAttributes().getNamedItem("href").getNodeValue();      List<DialogueState> points=extractDialogue(rootpath + "/" + fileName);      sample.addAll(points);    }  }  return sample;}  }
class C{  private static String fileName(String host,int port){  if (host == null) {    throw new NullPointerException("host == null");  }  return host + "." + port;}  }
class C{  public TextEditBasedChangeGroup(TextEditBasedChange change,TextEditGroup group){  Assert.isNotNull(change);  Assert.isNotNull(group);  fChange=change;  fIsEnabled=true;  fTextEditGroup=group;}  }
class C{  public static void writeLines(File file,Collection<?> lines,boolean append) throws IOException {  writeLines(file,null,lines,null,append);}  }
class C{  private DataSet simulateDataHelper(int sampleSize,RandomUtil randomUtil,boolean latentDataSaved){  int numMeasured=0;  int[] map=new int[nodes.length];  List<Node> variables=new LinkedList<>();  for (int j=0; j < nodes.length; j++) {    if (!latentDataSaved && nodes[j].getNodeType() != NodeType.MEASURED) {      continue;    }    int numCategories=bayesPm.getNumCategories(nodes[j]);    List<String> categories=new LinkedList<>();    for (int k=0; k < numCategories; k++) {      categories.add(bayesPm.getCategory(nodes[j],k));    }    DiscreteVariable var=new DiscreteVariable(nodes[j].getName(),categories);    variables.add(var);    int index=++numMeasured - 1;    map[index]=j;  }  DataSet dataSet=new ColtDataSet(sampleSize,variables);  constructSample(sampleSize,randomUtil,numMeasured,dataSet,map);  return dataSet;}  }
class C{  public ByteOrder order(ByteOrder o){  _isBigEndian="BIG_ENDIAN".equals(o.toString());  _buf.order(o);  return o;}  }
class C{  public void testCreateUpdateNoClose() throws Exception {  if (dual)   return;  if (!propertiesSupported())   return;  Map<String,String> props=properties("owner","group","0555");  create(igfs,paths(DIR,SUBDIR),null);  IgfsOutputStream os=null;  try {    os=igfs.create(FILE,true);    igfs.update(FILE,props);    os.close();  }  finally {    U.closeQuiet(os);  }}  }
class C{  protected MetaData(Wikipedia wiki){  this.wiki=wiki;  Session session=this.wiki.__getHibernateSession();  session.beginTransaction();  hibernateMetaData=(de.tudarmstadt.ukp.wikipedia.api.hibernate.MetaData)session.createQuery("from MetaData").uniqueResult();  session.getTransaction().commit();}  }
class C{  private static int lf_delta0(int x){  return lf_S(x,7) ^ lf_S(x,18) ^ lf_R(x,3);}  }
class C{  private void cancelObsoleteTimer(TimerService timerService,TimerType timerType){  for (  Timer timer : ParameterizedTypes.iterable(timerService.getTimers(),Timer.class)) {    Serializable info=timer.getInfo();    if (info != null && info instanceof TimerType && timerType == info) {      TimerType type=(TimerType)info;      timer.cancel();      logger.logInfo(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.INFO_TIMER_REMOVED,String.valueOf(type));    }  }}  }
class C{  public CatalogSearchBuilder path(String path){  String[] segments=path.split("/");  for (  String segment : segments) {    if (segment != null && !segment.equals("")) {      this.segments.add(segment);    }  }  return this;}  }
class C{  public static GeneralPath createArrowHeads(int arrowDirectionType,int location,OMAbstractLine line,int wingTip,int wingLength){  Point2D[] locPoints=locateArrowHeads(arrowDirectionType,location,line);  if (locPoints == null) {    return null;  }  Stroke stroke=line.getStroke();  float lineWidth=1f;  if (stroke instanceof BasicStroke) {    lineWidth=((BasicStroke)stroke).getLineWidth();    wingTip+=lineWidth;    wingLength+=lineWidth * 2;  }  GeneralPath shape=createArrowHead(locPoints[0],locPoints[1],wingTip,wingLength);  int numLocPoints=locPoints.length;  for (int i=2; i < numLocPoints - 1; i+=2) {    shape.append(createArrowHead(locPoints[i],locPoints[i + 1],wingTip,wingLength),false);  }  return shape;}  }
class C{  @Override public Settings overrideSettings(final Settings settings){  try {    final String tinkerGraphConfig=TestHelper.generateTempFileFromResource(this.getClass(),"tinkergraph-empty.properties",".tmp").getAbsolutePath();    settings.graphs.put("g",tinkerGraphConfig);    return settings;  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static long toLong(short[] shorts,int start){  return toLong(shorts[start],shorts[start + 1],shorts[start + 2],shorts[start + 3]);}  }
class C{  private void persistUnManagedVolumes(List<UnManagedVolume> unManagedVolumesToCreate,List<UnManagedVolume> unManagedVolumesToUpdate,boolean flush){  if (null != unManagedVolumesToCreate) {    if (flush || (unManagedVolumesToCreate.size() >= BATCH_SIZE)) {      _partitionManager.insertInBatches(unManagedVolumesToCreate,BATCH_SIZE,_dbClient,UNMANAGED_VOLUME);      unManagedVolumesToCreate.clear();    }  }  if (null != unManagedVolumesToUpdate) {    if (flush || (unManagedVolumesToUpdate.size() >= BATCH_SIZE)) {      _partitionManager.updateAndReIndexInBatches(unManagedVolumesToUpdate,BATCH_SIZE,_dbClient,UNMANAGED_VOLUME);      unManagedVolumesToUpdate.clear();    }  }}  }
class C{  public static double approximateLowerBoundOnP(long n,long k,double numStdDevs){  checkInputs(n,k);  if (n == 0) {    return 0.0;  } else   if (k == 0) {    return 0.0;  } else   if (k == 1) {    return (exactLowerBoundOnPForKequalsOne(n,deltaOfNumStdevs(numStdDevs)));  } else   if (k == n) {    return (exactLowerBoundOnPForKequalsN(n,deltaOfNumStdevs(numStdDevs)));  } else {    double x=abramowitzStegunFormula26p5p22(n - k + 1,k,(-1.0 * numStdDevs));    return (1.0 - x);  }}  }
class C{  public boolean moveEntry(User user,Entry entry,String direction,boolean isAdmin,Errors errors){  if (direction == null) {    Errors.add(errors,errorMessages.errorDirectionIsNull());    return false;  }  if (entry == null) {    Errors.add(errors,errorMessages.errorEntryIsNull());    return false;  }  if (!canUserModifyEntry(user,entry,isAdmin)) {    Errors.add(errors,errorMessages.errorUserIsNotEntitledToMoveTheEntry());    return false;  }  final String parentId=entry.getParentId();  String parentFirstChildId=null;  String parentLastChildId=null;  final Entry parent=getEntryById(parentId);  if (parent == null) {    Errors.add(errors,errorMessages.errorTheEntryHadNoParentSoItCouldNotBeMoved());    return false;  }  parentFirstChildId=parent.getFirstChildId();  parentLastChildId=parent.getLastChildId();  if (direction.equals("before")) {    final String previousId=entry.getPreviousSiblingId();    if (previousId == null) {      Errors.add(errors,errorMessages.errorThereIsNoEntryToMoveBefore());      return false;    }    final Entry previous=getEntryById(previousId);    final String previousPreviousId=previous.getPreviousSiblingId();    if (previousPreviousId != null) {      final Entry previousPrevious=getEntryById(previousPreviousId);      if (previousPrevious != null) {        previousPrevious.setNextSiblingId(entry.getId());      }    }    final String nextId=entry.getNextSiblingId();    if (nextId != null) {      final Entry next=getEntryById(nextId);      if (next != null) {        next.setPreviousSiblingId(previousId);      }    }    entry.setPreviousSiblingId(previousPreviousId);    entry.setNextSiblingId(previousId);    previous.setPreviousSiblingId(entry.getId());    previous.setNextSiblingId(nextId);    if (parentFirstChildId != null && previousId != null && parentFirstChildId.equals(previousId)) {      parent.setFirstChildId(entry.getId());    }    if (parentLastChildId != null && parentLastChildId.equals(entry.getId())) {      parent.setLastChildId(previousId);    }  } else   if (direction.equals("after")) {    final String nextId=entry.getNextSiblingId();    if (nextId == null) {      Errors.add(errors,errorMessages.errorThereIsNoEntryToMoveAfter());      return false;    }    final Entry next=getEntryById(nextId);    final String nextNextId=next.getNextSiblingId();    if (nextNextId != null) {      final Entry nextNext=getEntryById(nextNextId);      if (nextNext != null) {        nextNext.setPreviousSiblingId(entry.getId());      }    }    final String previousId=entry.getPreviousSiblingId();    if (previousId != null) {      final Entry previous=getEntryById(previousId);      if (previousId != null) {        previous.setNextSiblingId(nextId);      }    }    entry.setPreviousSiblingId(nextId);    entry.setNextSiblingId(nextNextId);    next.setPreviousSiblingId(previousId);    next.setNextSiblingId(entry.getId());    if (parentFirstChildId != null && parentFirstChildId.equals(entry.getId())) {      parent.setFirstChildId(nextId);    }    if (parentLastChildId != null && nextId != null && parentLastChildId.equals(nextId)) {      parent.setLastChildId(entry.getId());    }  } else   if (direction.equals("left")) {    final String parentParentId=parent.getParentId();    if (parentParentId == null) {      Errors.add(errors,errorMessages.errorThereIsNoParentOfTheParent());      return false;    }    snipOutEntry(entry,parent,true);    insertEntryAfter(entry,parent,true);  } else   if (direction.equals("right")) {    final String previousId=entry.getPreviousSiblingId();    if (previousId == null) {      Errors.add(errors,errorMessages.errorThereIsNoPreviousEntryToUseAsAParent());      return false;    }    snipOutEntry(entry,parent,true);    final Entry previous=getEntryById(previousId);    final String previousLastChildId=previous.getLastChildId();    if (previousLastChildId != null) {      final Entry previousLastChild=getEntryById(previousLastChildId);      previousLastChild.setNextSiblingId(entry.getId());    }    entry.setPreviousSiblingId(previousLastChildId);    entry.setNextSiblingId(null);    previous.setLastChildId(entry.getId());    if (!previous.hasFirstChildId()) {      previous.setFirstChildId(entry.getId());    }    previous.setLastChildId(entry.getId());    entry.setParentId(previous.getId());  } else {    Errors.add(errors,errorMessages.errorTheDirectionIsInvalid());    return false;  }  return true;}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool: " + ComputeCooccurrenceMatrixPairs.class.getSimpleName());  LOG.info(" - input path: " + args.input);  LOG.info(" - output path: " + args.output);  LOG.info(" - window: " + args.window);  LOG.info(" - number of reducers: " + args.numReducers);  Job job=Job.getInstance(getConf());  job.setJobName(ComputeCooccurrenceMatrixStripes.class.getSimpleName());  job.setJarByClass(ComputeCooccurrenceMatrixStripes.class);  Path outputDir=new Path(args.output);  FileSystem.get(getConf()).delete(outputDir,true);  job.getConfiguration().setInt("window",args.window);  job.setNumReduceTasks(args.numReducers);  FileInputFormat.setInputPaths(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setMapOutputKeyClass(Text.class);  job.setMapOutputValueClass(HMapStIW.class);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(HMapStIW.class);  job.setMapperClass(MyMapper.class);  job.setCombinerClass(MyReducer.class);  job.setReducerClass(MyReducer.class);  long startTime=System.currentTimeMillis();  job.waitForCompletion(true);  System.out.println("Job Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");  return 0;}  }
class C{  public void endGatherMode() throws Exception {  gatherMode=false;  gatheringElement=null;  for (Iterator it=gatherBuffer.iterator(); it.hasNext(); ) {    Object[] elem=(Object[])it.next();    SaxHandlerBase.ElementType type=(SaxHandlerBase.ElementType)elem[0];    if (type == null) {      continue;    }    if (elem[1] == null) {      type.endElement();    } else     if (elem[1] instanceof String) {      String charstring=(String)elem[1];      char[] chars=charstring.toCharArray();      type.characters(chars,0,chars.length);    } else {      Attributes atts=(Attributes)elem[1];      type.startElement(atts);    }  }  gatherBuffer=null;}  }
class C{  protected StringBytesType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public Millisecond(Date time,TimeZone zone){  this(time,zone,Locale.getDefault());}  }
class C{  @Override public boolean hasNext(){  checkTokenized();  return tokenPos < tokens.length;}  }
class C{  public boolean hasWorkbook(){  return workbookJXL != null;}  }
class C{  public static boolean isMobile(String phoneNum){  if (phoneNum != null) {    Pattern p=Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0-9]))\\d{8}$");    Matcher m=p.matcher(phoneNum);    return m.matches();  } else {    return false;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected Layer createShapefileLayer(Element domElement,AVList params){  return (Layer)BasicFactory.create(AVKey.SHAPEFILE_LAYER_FACTORY,domElement,params);}  }
class C{  public HashCode append(final float value){  iTotal=iTotal * iConstant + Float.floatToIntBits(value);  return this;}  }
class C{  @Override public void lostOwnership(Clipboard aClipboard,Transferable aContents){}  }
class C{  public void mouseExited(MouseEvent e){  AbstractButton b=(AbstractButton)e.getSource();  ButtonModel model=b.getModel();  if (b.isRolloverEnabled()) {    model.setRollover(false);  }}  }
class C{  public void updateServer(int serverId,Server server,int identityId){  ContentValues values=new ContentValues();  values.put(ServerConstants.TITLE,server.getTitle());  values.put(ServerConstants.HOST,server.getHost());  values.put(ServerConstants.PORT,server.getPort());  values.put(ServerConstants.PASSWORD,server.getPassword());  values.put(ServerConstants.AUTOCONNECT,false);  values.put(ServerConstants.USE_SSL,server.useSSL());  values.put(ServerConstants.IDENTITY,identityId);  values.put(ServerConstants.CHARSET,server.getCharset());  Authentication authentication=server.getAuthentication();  values.put(ServerConstants.NICKSERV_PASSWORD,authentication.getNickservPassword());  values.put(ServerConstants.SASL_USERNAME,authentication.getSaslUsername());  values.put(ServerConstants.SASL_PASSWORD,authentication.getSaslPassword());  this.getWritableDatabase().update(ServerConstants.TABLE_NAME,values,ServerConstants._ID + " = " + serverId,null);}  }
class C{  public void putCellStyle(String name,Map<String,Object> style){  styles.put(name,style);}  }
class C{  private void emitReturn(Name onStack){  Class<?> rclass=invokerType.returnType();  BasicType rtype=lambdaForm.returnType();  assert (rtype == basicType(rclass));  if (rtype == V_TYPE) {    mv.visitInsn(Opcodes.RETURN);  } else {    LambdaForm.Name rn=lambdaForm.names[lambdaForm.result];    if (rn != onStack) {      emitLoadInsn(rtype,lambdaForm.result);    }    emitImplicitConversion(rtype,rclass,rn);    emitReturnInsn(rtype);  }}  }
class C{  private void addEntryHtmlToList(Entry entry,StringBuilder result,int resultNumber,String rootId,SourceEmbedContext embedContext) throws IOException {  startItemListItem(result,rootId,entry.getId());  result.append("<table class=\"magic nopadding\"><tr><td class=\"resultNumber\">");  result.append(getItemMetaDataJsonHtml(entry.getType(),entry.getId())).toString();  result.append(resultNumber + ".</td>");  result.append("<td><input type=\"checkbox\" class=\"justDrag aloneCheckbox mousetrap\" onclick=\"checkboxOnClick(event); return true;\"></td>");  result.append("<td class=\"listItem\">");  if (entry.hasQuotation()) {    result.append("<div class=\"quotation\" title=\"" + servletText.quotationInListTooltip() + "\">");    result.append(getQuotationHtml(entry,true));    result.append("</div><br>");  }  String noteHtml=getNoteHtml(entry,true,entry.hasQuotation(),true);  if (!noteHtml.isEmpty()) {    result.append("<div class=\"note mousetrap\" title=\"" + servletText.noteInListTooltip(entry.getType()) + "\">");    result.append(noteHtml);    result.append("</div>");  }  final StringBuilder atString=new StringBuilder();  atString.append("<div class=\"listModTime\" title=\"" + servletText.modTimeInListTooltip(entry.getType()) + "\">"+ servletText.fragmentLastModified()+ " <span>");  atString.append(formatDateAndTime(entry.getModTime()) + "<span class=\"rawDateTime\">" + entry.getModTime()+ "</span></span></div>");  boolean sourceIncluded=false;  if (embedContext != SourceEmbedContext.InSourceQuotations) {    final Entry source=dbLogic.getEntryById(entry.getSourceId());    if (source != null) {      addSourceHtml(source,result,embedContext,atString.toString(),-1,null);      sourceIncluded=true;    }  }  if (!sourceIncluded) {    result.append("<div class=\"listItemFooter\">" + atString.toString() + "</div>");  }  result.append("</td></tr></table>");  finishItemListItem(result);}  }
class C{  public void doneButtonActionPerformed(){  if (editMode) {    editMode=false;    curNode=null;    addButton.setVisible(true);    editButton.setVisible(true);    deleteButton.setVisible(true);    doneButton.setVisible(true);    updateButton.setVisible(false);    cancelButton.setVisible(false);    nodeAddrField.setVisible(true);    nodeAddrStatic.setVisible(false);  }  if (changedNode) {    javax.swing.JOptionPane.showMessageDialog(this,rb.getString("Reminder1") + "\n" + rb.getString("Reminder2"),rb.getString("ReminderTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);  }  setVisible(false);  dispose();}  }
class C{  private boolean processTempoChange(@NonNull final MetaMessage metaMessage){  if (metaMessage.getLength() == 6 && metaMessage.getStatus() == MetaMessage.META) {    final byte[] message=metaMessage.getMessage();    if (message != null && (message[1] & 0xff) == MetaMessage.TYPE_TEMPO && message[2] == 3) {      final int tempo=(message[5] & 0xff) | ((message[4] & 0xff) << 8) | ((message[3] & 0xff) << 16);      setTempoInMPQ(tempo);      return true;    }  }  return false;}  }
class C{  private static void threeValueCmp(Instruction s,IR ir){  PowerPCConditionOperand firstCond=PowerPCConditionOperand.LESS_EQUAL();  int firstConst=1;switch (s.getOpcode()) {case DOUBLE_CMPG_opcode:case FLOAT_CMPG_opcode:    firstCond=PowerPCConditionOperand.GREATER_EQUAL();  firstConst=-1;break;case DOUBLE_CMPL_opcode:case FLOAT_CMPL_opcode:break;default :if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);break;}Register res=Binary.getClearResult(s).getRegister();RegisterOperand one=(RegisterOperand)Binary.getClearVal1(s);RegisterOperand two=(RegisterOperand)Binary.getClearVal2(s);res.setSpansBasicBlock();BasicBlock BB1=s.getBasicBlock();BasicBlock BB6=BB1.splitNodeAt(s,ir);s=s.remove();BasicBlock BB2=BB1.createSubBlock(0,ir);BasicBlock BB3=BB1.createSubBlock(0,ir);BasicBlock BB4=BB1.createSubBlock(0,ir);BasicBlock BB5=BB1.createSubBlock(0,ir);RegisterOperand t=ir.regpool.makeTempInt();t.getRegister().setCondition();BB1.appendInstruction(MIR_Binary.create(PPC_FCMPU,t,one,two));BB1.appendInstruction(MIR_CondBranch.create(PPC_BCOND,t.copyD2U(),firstCond,BB3.makeJumpTarget(),new BranchProfileOperand(0.5f)));BB2.appendInstruction(MIR_Unary.create(PPC_LDI,I(res),IC(firstConst)));BB2.appendInstruction(MIR_Branch.create(PPC_B,BB6.makeJumpTarget()));BB3.appendInstruction(MIR_CondBranch.create(PPC_BCOND,t.copyD2U(),PowerPCConditionOperand.EQUAL(),BB5.makeJumpTarget(),BranchProfileOperand.unlikely()));BB4.appendInstruction(MIR_Unary.create(PPC_LDI,I(res),IC(-firstConst)));BB4.appendInstruction(MIR_Branch.create(PPC_B,BB6.makeJumpTarget()));BB5.appendInstruction(MIR_Unary.create(PPC_LDI,I(res),IC(0)));BB1.insertOut(BB2);BB1.insertOut(BB3);BB2.insertOut(BB6);BB3.insertOut(BB4);BB3.insertOut(BB5);BB4.insertOut(BB6);BB5.insertOut(BB6);ir.cfg.linkInCodeOrder(BB1,BB2);ir.cfg.linkInCodeOrder(BB2,BB3);ir.cfg.linkInCodeOrder(BB3,BB4);ir.cfg.linkInCodeOrder(BB4,BB5);ir.cfg.linkInCodeOrder(BB5,BB6);}  }
class C{  public EqualsBuilder append(final long lhs,final long rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  private static Map<String,String> decodeParametersFromJSON(String json){  try {    JSONParser parser=new JSONParser();    JSONObject root=(JSONObject)parser.parse(json);    Map<String,String> result=new HashMap<>();    for (    Object key : root.keySet()) {      result.put((String)key,(String)root.get(key));    }    return result;  } catch (  Exception ex) {    return new HashMap();  }}  }
class C{  public MockVerifiableEntity(final DeserializationOptions options,final Deserializer deserializer){  super(deserializer.readInt("type"),options,deserializer);  this.customField=deserializer.readInt("customField");}  }
class C{  public static String encodeHighLevel(String msg){  return encodeHighLevel(msg,SymbolShapeHint.FORCE_NONE,null,null);}  }
class C{  private void initProperties(){  mActionBarHeaderPullingProgressLayout=(PullingProgressLayout)findViewById(R.id.pulling_progress);  mActionBarHeaderRefreshingProgressBar=(ProgressBar)findViewById(R.id.refreshing_progress);}  }
class C{  public ARFFConverter(){  super();}  }
class C{  public synchronized ITag readTag(){  if (!firstTags.isEmpty()) {    return firstTags.removeFirst();  }  MP4Frame frame=frames.get(currentFrame);  log.debug("Playback #{} {}",currentFrame,frame);  int sampleSize=frame.getSize();  int time=(int)Math.round(frame.getTime() * 1000.0);  long samplePos=frame.getOffset();  byte type=frame.getType();  int pad=5;  if (type == TYPE_AUDIO) {    pad=2;  }  ByteBuffer data=ByteBuffer.allocate(sampleSize + pad);  try {    if (type == TYPE_VIDEO) {      if (frame.isKeyFrame()) {        data.put(PREFIX_VIDEO_KEYFRAME);      } else {        data.put(PREFIX_VIDEO_FRAME);      }      int timeOffset=prevVideoTS != -1 ? time - prevVideoTS : 0;      data.put((byte)((timeOffset >>> 16) & 0xff));      data.put((byte)((timeOffset >>> 8) & 0xff));      data.put((byte)(timeOffset & 0xff));      if (log.isTraceEnabled()) {        byte[] prefix=new byte[5];        int p=data.position();        data.position(0);        data.get(prefix);        data.position(p);        log.trace("{}",prefix);      }      videoCount++;      prevVideoTS=time;    } else {      data.put(PREFIX_AUDIO_FRAME);      audioCount++;    }    channel.position(samplePos);    channel.read(data);  } catch (  IOException e) {    log.error("Error on channel position / read",e);  }  IoBuffer payload=IoBuffer.wrap(data.array());  ITag tag=new Tag(type,time,payload.limit(),payload,prevFrameSize);  currentFrame++;  prevFrameSize=tag.getBodySize();  return tag;}  }
class C{  public static final JSONPointer forURL(final SchemaClient schemaClient,final String url){  int poundIdx=url.indexOf('#');  String fragment;  String toBeQueried;  if (poundIdx == -1) {    toBeQueried=url;    fragment="";  } else {    fragment=url.substring(poundIdx);    toBeQueried=url.substring(0,poundIdx);  }  return new JSONPointer(null,fragment);}  }
class C{  public Interval overlap(ReadableInterval interval){  interval=DateTimeUtils.getReadableInterval(interval);  if (overlaps(interval) == false) {    return null;  }  long start=Math.max(getStartMillis(),interval.getStartMillis());  long end=Math.min(getEndMillis(),interval.getEndMillis());  return new Interval(start,end,getChronology());}  }
class C{  public boolean shouldCorrect(Vertex input,Vertex speaker){  boolean isAdmin=false;  boolean isAnonymous=true;  if (speaker != null) {    isAdmin=speaker.hasRelationship(Primitive.ASSOCIATED,Primitive.ADMINISTRATOR);    isAnonymous=speaker.hasRelationship(Primitive.ASSOCIATED,Primitive.ANONYMOUS);  }  if (this.correctionMode == CorrectionMode.Disabled) {    return false;  } else   if (!isAdmin && (this.correctionMode == CorrectionMode.Administrators)) {    return false;  } else   if (isAnonymous && (this.correctionMode == CorrectionMode.Users)) {    return false;  }  return true;}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.FEATURE_TYPE__PARAMETERS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getParameters()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public void stateChanged(ChangeEvent e){  JSpinner spinner=(JSpinner)(e.getSource());  getTextField().setValue(spinner.getValue());}  }
class C{  @SuppressWarnings("unchecked") public <T extends PO>T first() throws DBException {  T po=null;  String sql=buildSQL(null,true);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    rs=createResultSet(pstmt);    if (rs.next()) {      po=(T)table.getPO(rs,trxName);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return po;}  }
class C{  public static double[][] newMatrix(int m,int n,double val){  double[][] res=new double[m][];  for (int i=0; i < m; ++i) {    res[i]=new double[n];    for (int j=0; j < n; ++j) {      res[i][j]=val;    }  }  return (res);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.LITERAL_OR_COMPUTED_PROPERTY_NAME;}  }
class C{  public Vec3 normalize(){  double magnitude=this.magnitude();  if (magnitude != 0) {    this.x/=magnitude;    this.y/=magnitude;    this.z/=magnitude;  }  return this;}  }
class C{  protected static double distance(Solution s1,Solution s2){  double distance=0.0;  for (int i=0; i < s1.getNumberOfObjectives(); i++) {    distance+=Math.pow(s1.getObjective(i) - s2.getObjective(i),2.0);  }  return Math.sqrt(distance);}  }
class C{  public Builder bodyLocKey(String value){  bodyLocKey=value;  return this;}  }
class C{  void onScheduled(SchedulerFuture<?> fut){  assert fut != null;  schedFuts.add(fut);}  }
class C{  public void addPage(@NotNull WizardPage<T> page,int index,boolean replace){  if (index >= wizardPages.size()) {    addPage(page);    return;  }  if (replace) {    setPage(page,index);  } else {    List<WizardPage<T>> before=ListHelper.slice(wizardPages,0,index);    WizardPage<T> currentPage=wizardPages.get(index);    List<WizardPage<T>> after=ListHelper.slice(wizardPages,index + 1,wizardPages.size());    wizardPages.clear();    wizardPages.addAll(before);    addPage(page);    wizardPages.add(currentPage);    wizardPages.addAll(after);  }}  }
class C{  public void remove(Number x,String seriesName,boolean notify){  this.values.removeValue((Comparable)x,seriesName);  if (notify) {    fireDatasetChanged();  }}  }
class C{  @RequestProcessing(value="/verifycode/email",method=HTTPRequestMethod.GET) public void sendEmailRegisterVerifycode(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String key=Symphonys.get("keyOfSymphony");  if (!key.equals(request.getParameter("key"))) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  verifycodeMgmtService.sendEmailVerifycode();  context.renderJSON().renderTrueResult();}  }
class C{  public Extractors with(Extractor extractor){  Validate.notNull(prevField,"must call extract method first!");  List<Extractor> extractors=extractorsMap.getOrDefault(prevField,new LinkedList<>());  extractors.add(extractor);  extractorsMap.put(prevField,extractors);  return this;}  }
class C{  private static synchronized void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(original,0,combined,0,original.length);  System.arraycopy(extraElements,0,combined,original.length,extraElements.length);  jlrField.set(instance,combined);}  }
class C{  public ScalarTestType clone(){  ScalarTestType result=new ScalarTestType();  result.Boolean=Boolean;  result.SByte=SByte;  result.Byte=Byte;  result.Int16=Int16;  result.UInt16=UInt16;  result.Int32=Int32;  result.UInt32=UInt32;  result.Int64=Int64;  result.UInt64=UInt64;  result.Float=Float;  result.Double=Double;  result.String=String;  result.DateTime=DateTime;  result.Guid=Guid;  result.ByteString=ByteString;  result.XmlElement=XmlElement;  result.NodeId=NodeId;  result.ExpandedNodeId=ExpandedNodeId;  result.StatusCode=StatusCode;  result.DiagnosticInfo=DiagnosticInfo;  result.QualifiedName=QualifiedName;  result.LocalizedText=LocalizedText;  result.ExtensionObject=ExtensionObject;  result.DataValue=DataValue;  result.EnumeratedValue=EnumeratedValue;  return result;}  }
class C{  @Override public RSAAMResult authenticateRsaSecurId(String tenantName,String sessionId,String principal,String passcode,IIdmServiceContext serviceContext) throws RemoteException, IDMException {  try (IDiagnosticsContextScope ctxt=getDiagnosticsContext(tenantName,serviceContext,"authenticate")){    IIdmAuthStatRecorder idmAuthStatRecorder=this.createIdmAuthStatRecorderInstance(tenantName,IdentityManager.PROVIDER_TYPE_RSA_SECURID,IdentityManager.PROVIDER_TYPE_RSA_SECURID,0,ActivityKind.AUTHENTICATE,EventLevel.INFO,principal);    idmAuthStatRecorder.start();    try {      RSAAMResult result=this.authenticateRsaSecurId(tenantName,sessionId,principal,passcode);      idmAuthStatRecorder.end();      return result;    } catch (    Exception ex) {      throw ServerUtils.getRemoteException(ex);    }  } }  }
class C{  public AccountHeaderBuilder withTextColorRes(@ColorRes int textColorRes){  this.mTextColor=ColorHolder.fromColorRes(textColorRes);  return this;}  }
class C{  public ScheduledThreadPoolExecutor(int corePoolSize,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,NANOSECONDS,new DelayedWorkQueue(),handler);}  }
class C{  protected boolean enabledForChrome(Context context){  if (mAndroidPermission.isEmpty())   return true;  return permissionOnInAndroid(mAndroidPermission,context);}  }
class C{  public void testDoConfigureSetsConfigurationVersion() throws Exception {  configuration.setProperty(WebLogicPropertySet.CONFIGURATION_VERSION,CONFIGURATION_VERSION);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(CONFIGURATION_VERSION,"//weblogic:configuration-version",config);}  }
class C{  protected void uploadTestDataFilesToS3(String s3KeyPrefix,List<ManifestFile> manifestFiles,List<String> directoryPaths) throws Exception {  createTestDataFiles(LOCAL_TEMP_PATH_INPUT,manifestFiles);  String s3KeyPrefixWithTrailingSlash=s3KeyPrefix + "/";  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=getTestS3FileTransferRequestParamsDto();  s3FileTransferRequestParamsDto.setS3KeyPrefix(s3KeyPrefixWithTrailingSlash);  s3FileTransferRequestParamsDto.setLocalPath(LOCAL_TEMP_PATH_INPUT.toString());  s3FileTransferRequestParamsDto.setRecursive(true);  S3FileTransferResultsDto results=s3Service.uploadDirectory(s3FileTransferRequestParamsDto);  assertEquals(Long.valueOf(manifestFiles.size()),results.getTotalFilesTransferred());  for (  String directoryPath : directoryPaths) {    s3FileTransferRequestParamsDto.setS3KeyPrefix(s3KeyPrefix + "/" + directoryPath);    s3Service.createDirectory(s3FileTransferRequestParamsDto);  }  s3FileTransferRequestParamsDto.setS3KeyPrefix(s3KeyPrefixWithTrailingSlash);  assertEquals(manifestFiles.size() + directoryPaths.size(),s3Service.listDirectory(s3FileTransferRequestParamsDto).size());}  }
class C{  public void remove(String key){  unparcel();  mMap.remove(key);}  }
class C{  public List<CodeType> findAll(){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<CodeType> query=builder.createQuery(CodeType.class);    Root<CodeType> from=query.from(CodeType.class);    query.select(from);    List<CodeType> items=entityManager.createQuery(query).getResultList();    for (    CodeType codeType : items) {      codeType.getCodeAttribute().size();    }    entityManager.getTransaction().commit();    return items;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public String toString(){  return string;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PieSectionEntity)) {    return false;  }  PieSectionEntity that=(PieSectionEntity)obj;  if (!ObjectUtilities.equal(this.dataset,that.dataset)) {    return false;  }  if (this.pieIndex != that.pieIndex) {    return false;  }  if (this.sectionIndex != that.sectionIndex) {    return false;  }  if (!ObjectUtilities.equal(this.sectionKey,that.sectionKey)) {    return false;  }  return super.equals(obj);}  }
class C{  void timeout(){  long time=System.currentTimeMillis();  Iterator<Map.Entry<Long,ContextualFuture>> iterator=responseFutures.entrySet().iterator();  while (iterator.hasNext()) {    ContextualFuture future=iterator.next().getValue();    if (future.time + requestTimeout < time) {      iterator.remove();      future.context.executor().execute(null);    } else {      break;    }  }}  }
class C{  public void onServiceConnected(ComponentName className,IBinder iservice){  Log.d(TAG,"Connected to Face Unlock service");  mService=IFaceLockInterface.Stub.asInterface(iservice);  mHandler.sendEmptyMessage(MSG_SERVICE_CONNECTED);}  }
class C{  private int findNextNonDeletedIndex(int index){  int next=index + 1;  while (next < inputLine.length && isDeleted[next] == DELETE)   next++;  return next;}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (Malevich.Utils.hasHoneycomb()) {    mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));  }}  }
class C{  public static boolean isNonCombatMove(final GameData data,final boolean doNotThrowErrorIfNotMoveDelegate){  final boolean isNonCombatMove;  data.acquireReadLock();  try {    final String prop=data.getSequence().getStep().getProperties().getProperty(GameStep.PROPERTY_nonCombatMove);    if (prop != null) {      isNonCombatMove=Boolean.parseBoolean(prop);    } else     if (isNonCombatDelegate(data)) {      isNonCombatMove=true;    } else     if (isCombatDelegate(data)) {      isNonCombatMove=false;    } else     if (doNotThrowErrorIfNotMoveDelegate) {      isNonCombatMove=false;    } else {      throw new IllegalStateException("Cannot determine combat or not: " + data.getSequence().getStep().getName());    }  }  finally {    data.releaseReadLock();  }  return isNonCombatMove;}  }
class C{  public boolean removeDataRow(DataRow dataRow){  return dataList.remove(dataRow);}  }
class C{  @Override public void toggleAutoTick(){  super.toggleAutoTick();  if (isAutoTickUnitSelection()) {    this.manualTickUnit.setText(Double.toString(this.manualTickUnitValue));    this.manualTickUnit.setEnabled(false);  } else {    this.manualTickUnit.setEnabled(true);  }}  }
class C{  @Override public void accept(DexFileVisitor dv,int config){  for (int cid=0; cid < class_defs_size; cid++) {    accept(dv,cid,config);  }  dv.visitEnd();}  }
class C{  public void export(String mimeType,Object output) throws IOException {  if (mimeType == null) {    String message=Logging.getMessage("nullValue.Format");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (output == null) {    String message=Logging.getMessage("nullValue.OutputBufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (KMLConstants.KML_MIME_TYPE.equalsIgnoreCase(mimeType)) {    try {      exportAsKML(output);    } catch (    XMLStreamException e) {      Logging.logger().throwing(getClass().getName(),"export",e);      throw new IOException(e);    }  } else {    String message=Logging.getMessage("Export.UnsupportedFormat",mimeType);    Logging.logger().warning(message);    throw new UnsupportedOperationException(message);  }}  }
class C{  static public void dump(final AbstractTripleStore store,final Writer w,final boolean showBlobs){  final LexiconRelation r=store.getLexiconRelation();  try {{      w.write(r.getFQN(LexiconKeyOrder.TERM2ID) + " (forward mapping)\n");      final IIndex ndx=store.getLexiconRelation().getTerm2IdIndex();      final ITupleIterator<?> itr=ndx.rangeIterator();      while (itr.hasNext()) {        final ITuple<?> tuple=itr.next();        final byte[] key=tuple.getKey();        final TermId<?> iv=(TermId<?>)IVUtility.decode(tuple.getValue());        w.write(BytesUtil.toString(key) + ":" + iv+ "\n");      }    }{      w.write(r.getFQN(LexiconKeyOrder.ID2TERM) + " (reverse mapping)\n");      final IIndex ndx=store.getLexiconRelation().getId2TermIndex();      @SuppressWarnings("unchecked") final ITupleIterator<BigdataValue> itr=ndx.rangeIterator();      while (itr.hasNext()) {        final ITuple<BigdataValue> tuple=itr.next();        final BigdataValue term=tuple.getObject();        w.write(term.getIV() + ":" + term+ " (iv="+ term.getIV()+ ")\n");      }    }    w.write(r.getFQN(LexiconKeyOrder.BLOBS) + " (large values)\n");    dumpBlobs(w,showBlobs,r.getNamespace(),r.getBlobsIndex());  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public DistributionSquare(int minY,int maxY,float chance){  super(DistributionHelpers.getSquareDistribution(Math.max(minY,0),Math.min(maxY,255),chance));  this.bestHeight=(minY + maxY) / 2;}  }
class C{  public static boolean contains(Scope outer,Scope inner){  if (outer != null) {    while (inner != null) {      if (inner.equals(outer)) {        return true;      }      inner=inner.getScope();    }  }  return false;}  }
class C{  private void closeDestination(State state){  try {    if (state.mStream != null) {      state.mStream.close();      state.mStream=null;    }  } catch (  IOException ex) {    if (Constants.LOGV) {      Log.v(Constants.TAG,"exception when closing the file after download : " + ex);    }  }}  }
class C{  protected static Object primitiveArrayPut(Object self,int idx,Object newValue){  Array.set(self,normaliseIndex(idx,Array.getLength(self)),newValue);  return newValue;}  }
class C{  public static String processSingleLine(String normalized){  String deNormalized=normalized;  deNormalized=capitalizeNameTitleAbbrvs(deNormalized);  deNormalized=replaceBracketTokens(deNormalized);  deNormalized=joinPunctuationMarks(deNormalized);  deNormalized=joinHyphen(deNormalized);  deNormalized=joinContractions(deNormalized);  deNormalized=capitalizeLineFirstLetter(deNormalized);  return deNormalized;}  }
class C{  public final double pctUnclassified(){  return m_delegate.pctUnclassified();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.461 -0400",hash_original_method="D49BF75E5653B3A60DB1C3ABCF118E80",hash_generated_method="C6A02D5F4B9BA9B3FA838ED2F4665239") private int handleSC(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 2) == 'H') {    if (contains(value,index + 3,2,"OO","ER","EN","UY","ED","EM")) {      if (contains(value,index + 3,2,"ER","EN")) {        result.append("X","SK");      } else {        result.append("SK");      }    } else {      if (index == 0 && !isVowel(charAt(value,3)) && charAt(value,3) != 'W') {        result.append('X','S');      } else {        result.append('X');      }    }  } else   if (contains(value,index + 2,1,"I","E","Y")) {    result.append('S');  } else {    result.append("SK");  }  return index + 3;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoFileRecAc[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_volId = ").append(m_volId);  buffer.append(", m_loc = ").append(m_loc);  buffer.append(", m_extId1 = ").append(m_extId1);  buffer.append(", m_extId2 = ").append(m_extId2);  buffer.append(", m_extId3 = ").append(m_extId3);  buffer.append(", m_flags = ").append(m_flags);  buffer.append(", m_stat = ").append(m_stat);  buffer.append(", m_ts = ").append(m_ts);  buffer.append(", m_size = ").append(m_size);  buffer.append("]");  return buffer.toString();}  }
class C{  protected void listFromMenuExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  CamposDatoForm camposDatoForm=(CamposDatoForm)form;  camposDatoForm.reset();  setReturnActionFordward(request,mapping.findForward("listFromMenu"));}  }
class C{  public Projection create(Properties props) throws ProjectionException {  try {    LatLonPoint llp=convertToLLP((Point2D)props.get(ProjectionFactory.CENTER));    float scale=PropUtils.floatFromProperties(props,ProjectionFactory.SCALE,10000000);    int height=PropUtils.intFromProperties(props,ProjectionFactory.HEIGHT,100);    int width=PropUtils.intFromProperties(props,ProjectionFactory.WIDTH,100);    return new CADRG(llp,scale,width,height);  } catch (  Exception e) {    if (Debug.debugging("proj")) {      Debug.output("CADRGLoader: problem creating CADRG projection " + e.getMessage());    }  }  throw new ProjectionException("CADRGLoader: problem creating CADRG projection");}  }
class C{  public static void removeFromCache(final int AD_Table_ID){  final POInfo cachedValue=s_cache.get(AD_Table_ID);  if (cachedValue == null) {    return;  }  s_cache.remove(AD_Table_ID);  s_cacheByTableName.remove(cachedValue.getTableName());}  }
class C{  public void addValue(int v,int x,int y){  setValue(new Double(v),new Integer(x),new Integer(y));}  }
class C{  private long computeAge(long nowMillis){  long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0;  long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,TimeUnit.SECONDS.toMillis(ageSeconds)) : apparentReceivedAge;  long responseDuration=receivedResponseMillis - sentRequestMillis;  long residentDuration=nowMillis - receivedResponseMillis;  return receivedAge + responseDuration + residentDuration;}  }
class C{  public static void generateFileFromTemplate(File templateFile,File outputFile,Map<String,Object> parameters){  try {    Template template=getTemplate(templateFile);    Writable finishedTemplate=template.make(parameters);    try {      IOUtils.copy(new ByteArrayInputStream(finishedTemplate.toString().getBytes()),new FileOutputStream(outputFile));    } catch (    Exception e) {      throw new RuntimeException("Error writing to file " + outputFile,e);    }  } catch (  Exception e) {    DocReporter.printError("Error whilst generating page from file " + outputFile + " from template "+ templateFile);    DocReporter.printError(e.getMessage());    throw new RuntimeException("Unable to process template" + templateFile,e);  }}  }
class C{  public ClassDefinitionBuilder defs(List<JCTree> defs){  if (defs != null) {    this.defs.appendList(defs);  }  return this;}  }
class C{  public ins addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override protected ElevationModel doCreateFromElement(Element domElement,AVList params) throws Exception {  Element element=WWXML.getElement(domElement,".",null);  if (element == null)   return null;  String href=WWXML.getText(element,"@href");  if (href != null && href.length() > 0)   return (ElevationModel)this.createFromConfigSource(href,params);  Element[] elements=WWXML.getElements(element,"./ElevationModel",null);  String modelType=WWXML.getText(element,"@modelType");  if (modelType != null && modelType.equalsIgnoreCase("compound"))   return this.createCompoundModel(elements,params);  String localName=WWXML.getUnqualifiedName(domElement);  if (elements != null && elements.length > 0)   return this.createCompoundModel(elements,params); else   if (localName != null && localName.equals("ElevationModel"))   return this.createNonCompoundModel(domElement,params);  return null;}  }
class C{  public PrintStream toPrintStream(Charset charset){  return Errors.rethrow().get(null);}  }
class C{  @Override public void run(){  amIActive=true;  String ouptutFile=null;  String shapefileName=null;  int i=0;  int row, col, rows, cols;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  Geometry[] JTSGeometries;  WKTWriter wktWriter=new WKTWriter();  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  if (inputFilesString.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  try {    for (i=0; i < numFiles; i++) {      if (numFiles > 1) {        progress=(int)(100f * i / (numFiles - 1));        updateProgress("Loop " + (i + 1) + " of "+ numFiles+ ":",progress);      }      shapefileName=imageFiles[i];      if (!((new File(shapefileName)).exists())) {        showFeedback("Vector file does not exist.");        break;      }      ShapeFile shapefile=new ShapeFile(shapefileName);      ouptutFile=shapefileName.replace(".shp",".wkt");      (new File(ouptutFile)).delete();      fw=new FileWriter(ouptutFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=0;      int n=0;      int onePercentOfRecs=shapefile.getNumberOfRecords() / 100;      for (      ShapeFileRecord record : shapefile.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          JTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < JTSGeometries.length; a++) {            str1=wktWriter.write(JTSGeometries[a]);            out.println(str1);          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        if (n == onePercentOfRecs) {          n=0;          progress++;          updateProgress("Exporting shapefile data:",progress);        }      }      showFeedback("Operation complete!");    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public <T>T read(Class<? extends T> type,InputStream source,boolean strict) throws Exception {  return read(type,NodeBuilder.read(source),strict);}  }
class C{  public void testNextLongBoundNonPositive(){  ThreadLocalRandom rnd=ThreadLocalRandom.current();  for (  long bound : new long[]{0L,-17L,Long.MIN_VALUE}) {    try {      rnd.nextLong(bound);      shouldThrow();    } catch (    IllegalArgumentException success) {    }  }}  }
class C{  public int queryEqualsCount(String type,int index,String value,int visibilityScope) throws CloudException {  return ((Integer)queryImpl(type,value,index,0,0,visibilityScope,1,0,false,true,false,null)).intValue();}  }
class C{  @SideOnly(Side.CLIENT) public void performHurtAnimation(){  this.setForwardDirection(-this.getForwardDirection());  this.setTimeSinceHit(10);  this.setDamageTaken(this.getDamageTaken() * 11.0F);}  }
class C{  public void testBEB1() throws IOException {  SimilarityBase sim=new DFRSimilarity(new BasicModelBE(),new AfterEffectB(),new NormalizationH1());  float tfn=FREQ * AVG_FIELD_LENGTH / DOC_LEN;  float b=(TOTAL_TERM_FREQ + 1 + 1) / ((DOC_FREQ + 1) * (tfn + 1));  double f=TOTAL_TERM_FREQ + 1 + tfn;  double n=f + NUMBER_OF_DOCUMENTS;  double n1=n + f - 1;  double m1=n + f - tfn - 2;  double n2=f;  double m2=f - tfn;  float be=(float)(-SimilarityBase.log2(n - 1) - SimilarityBase.log2(Math.E) + ((m1 + 0.5f) * SimilarityBase.log2(n1 / m1) + (n1 - m1) * SimilarityBase.log2(n1)) - ((m2 + 0.5f) * SimilarityBase.log2(n2 / m2) + (n2 - m2) * SimilarityBase.log2(n2)));  float gold=b * be;  correctnessTestCore(sim,gold);}  }
class C{  public void removeAllSections(){  mTransitSectionList.clear();}  }
class C{  public MultipleCategorySeries(String title){  mTitle=title;}  }
class C{  private final boolean isTextType(int type){  return (DTM.TEXT_NODE == type || DTM.CDATA_SECTION_NODE == type);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addEvent(SimEvent newEvent){  double eventTime=newEvent.eventTime();  if (eventTime >= maxTime) {    list.add(newEvent);    maxTime=eventTime;    return;  }  ListIterator<SimEvent> iterator=list.listIterator();  SimEvent event;  while (iterator.hasNext()) {    event=iterator.next();    if (event.eventTime() > eventTime) {      iterator.previous();      iterator.add(newEvent);      return;    }  }  list.add(newEvent);}  }
class C{  public Annotation clone(){  Annotation result=new Annotation();  result.Message=Message;  result.UserName=UserName;  result.AnnotationTime=AnnotationTime;  return result;}  }
class C{  private void sendResponseOnFailedMessage(UUID nodeId,GridCacheMessage res,GridCacheSharedContext cctx,byte plc){  try {    cctx.io().send(nodeId,res,plc);  } catch (  IgniteCheckedException e) {    U.error(log,"Failed to send response to node (is node still alive?) [nodeId=" + nodeId + ",res="+ res+ ']',e);  }}  }
class C{  protected boolean isIgnoredMember(TMember m){  if (m.isStatic() && m.getContainingType() instanceof TInterface && m.getContainingType() != bottomType) {    return true;  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Object[] updateRow(RowState rowState,RowIdImpl rowId,Object... row) throws IOException {  requireValidRowId(rowId);  getPageChannel().startWrite();  try {    ByteBuffer rowBuffer=positionAtRowData(rowState,rowId);    int oldRowSize=rowBuffer.remaining();    requireNonDeletedRow(rowState,rowId);    if ((row.length < _columns.size()) || (row.getClass() != Object[].class)) {      row=dupeRow(row,_columns.size());    }    Map<ColumnImpl,byte[]> keepRawVarValues=(!_varColumns.isEmpty() ? new HashMap<ColumnImpl,byte[]>() : null);    for (    ColumnImpl column : _columns) {      if (column.isAutoNumber()) {        continue;      }      Object rowValue=column.getRowValue(row);      if (rowValue == Column.KEEP_VALUE) {        rowValue=getRowColumn(getFormat(),rowBuffer,column,rowState,keepRawVarValues);      } else {        Object oldValue=Column.KEEP_VALUE;        if (_indexColumns.contains(column)) {          oldValue=getRowColumn(getFormat(),rowBuffer,column,rowState,null);        } else {          oldValue=rowState.getRowCacheValue(column.getColumnIndex());        }        if (oldValue != rowValue) {          rowValue=column.validate(rowValue);        }      }      column.setRowValue(row,rowValue);    }    handleAutoNumbersForUpdate(row,rowBuffer,rowState);    ByteBuffer newRowData=createRow(row,_writeRowBufferH.getPageBuffer(getPageChannel()),oldRowSize,keepRawVarValues);    if (newRowData.limit() > getFormat().MAX_ROW_SIZE) {      throw new IOException(withErrorContext("Row size " + newRowData.limit() + " is too large"));    }    if (!_indexDatas.isEmpty()) {      IndexData.PendingChange idxChange=null;      try {        Object[] oldRowValues=rowState.getRowCacheValues();        _fkEnforcer.updateRow(oldRowValues,row);        for (        IndexData indexData : _indexDatas) {          idxChange=indexData.prepareUpdateRow(oldRowValues,rowId,row,idxChange);        }        IndexData.commitAll(idxChange);      } catch (      ConstraintViolationException ce) {        IndexData.rollbackAll(idxChange);        throw ce;      }    }    rowBuffer.reset();    int rowSize=newRowData.remaining();    ByteBuffer dataPage=null;    int pageNumber=PageChannel.INVALID_PAGE_NUMBER;    if (oldRowSize >= rowSize) {      rowBuffer.put(newRowData);      dataPage=rowState.getFinalPage();      pageNumber=rowState.getFinalRowId().getPageNumber();    } else {      dataPage=findFreeRowSpace(rowSize,null,PageChannel.INVALID_PAGE_NUMBER);      pageNumber=_addRowBufferH.getPageNumber();      RowIdImpl headerRowId=rowState.getHeaderRowId();      ByteBuffer headerPage=rowState.getHeaderPage();      if (pageNumber == headerRowId.getPageNumber()) {        dataPage=headerPage;      }      int rowNum=addDataPageRow(dataPage,rowSize,getFormat(),DELETED_ROW_MASK);      dataPage.put(newRowData);      rowBuffer=PageChannel.narrowBuffer(headerPage,findRowStart(headerPage,headerRowId.getRowNumber(),getFormat()),findRowEnd(headerPage,headerRowId.getRowNumber(),getFormat()));      rowBuffer.put((byte)rowNum);      ByteUtil.put3ByteInt(rowBuffer,pageNumber);      ByteUtil.clearRemaining(rowBuffer);      int headerRowIndex=getRowStartOffset(headerRowId.getRowNumber(),getFormat());      headerPage.putShort(headerRowIndex,(short)(headerPage.getShort(headerRowIndex) | OVERFLOW_ROW_MASK));      if (pageNumber != headerRowId.getPageNumber()) {        writeDataPage(headerPage,headerRowId.getPageNumber());      }    }    writeDataPage(dataPage,pageNumber);    updateTableDefinition(0);  }  finally {    getPageChannel().finishWrite();  }  return row;}  }
class C{  protected static void assertNotSerializable(Class<?> serClass) throws Exception {  Field field=serClass.getDeclaredField("serialVersionUID");  field.setAccessible(true);  long serVer=(Long)field.get(null);  ByteArrayOutputStream baos=new ByteArrayOutputStream();  try (DataOutputStream out=new DataOutputStream(baos)){    out.writeShort(ObjectStreamConstants.STREAM_MAGIC);    out.writeShort(ObjectStreamConstants.STREAM_VERSION);    out.writeByte(ObjectStreamConstants.TC_OBJECT);    out.writeByte(ObjectStreamConstants.TC_CLASSDESC);    out.writeUTF(serClass.getName());    out.writeLong(serVer);    out.writeByte(ObjectStreamConstants.SC_SERIALIZABLE);    out.writeShort(0);    out.writeByte(ObjectStreamConstants.TC_ENDBLOCKDATA);    out.writeByte(ObjectStreamConstants.TC_NULL);  }   byte[] bytes=baos.toByteArray();  try (ByteArrayInputStream bis=new ByteArrayInputStream(bytes);ObjectInputStream in=new ObjectInputStream(bis)){    Object o=in.readObject();  } catch (  Exception ioe) {    return;  }  fail("Class should not be deserializable " + serClass.getName());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:05.007 -0500",hash_original_method="193A05B6A3D6926494D4F0030FC865D1",hash_generated_method="6B6E8ECDD5832732E8CAB74DA3C4FFDC") @Override protected void shutdown(){  Arrays.fill(mac_write_secret,(byte)0);  Arrays.fill(mac_read_secret,(byte)0);  super.shutdown();}  }
class C{  protected boolean allKeyFieldsPresent(Entity e,EnumSet<DeviceField> keyFields){  for (  DeviceField f : keyFields) {switch (f) {case MAC:      break;case IPv4:case IPv6:    if (e.ipv4Address.equals(IPv4Address.NONE) && e.ipv6Address.equals(IPv6Address.NONE)) {      return false;    }  break;case SWITCH:if (e.switchDPID.equals(DatapathId.NONE)) {  return false;}break;case PORT:if (e.switchPort.equals(OFPort.ZERO)) {return false;}break;case VLAN:if (e.vlan == null) {return false;}break;default :throw new IllegalStateException();}}return true;}  }
class C{  public static byte[] transceiveAndRequireStatus(byte[] command,IsoCard isoCard,String expectedApduStatus) throws IOException {  byte[] response=isoCard.transceive(command);  if (hasStatus(response,expectedApduStatus)) {    return response;  } else {    throw new IOException("Require APDU status: " + expectedApduStatus + ", got "+ response);  }}  }
class C{  public String encode(){  return uriString;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean removeAccept(Accept accept){  return super.removeElement(Accept.KEY,accept);}  }
class C{  private void testLobStaysOpenUntilCommitted() throws Exception {  Connection conn=getConnection(getTestName());  stat=conn.createStatement();  stat.execute("create table test(id identity, c clob, b blob)");  PreparedStatement prep=conn.prepareStatement("insert into test values(null, ?, ?)");  prep.setString(1,"");  prep.setBytes(2,new byte[0]);  prep.execute();  Random r=new Random(1);  char[] chars=new char[100000];  for (int i=0; i < chars.length; i++) {    chars[i]=(char)r.nextInt(10000);  }  String d=new String(chars);  prep.setCharacterStream(1,new StringReader(d),-1);  byte[] bytes=new byte[100000];  r.nextBytes(bytes);  prep.setBinaryStream(2,new ByteArrayInputStream(bytes),-1);  prep.execute();  conn.setAutoCommit(false);  ResultSet rs=stat.executeQuery("select * from test order by id");  rs.next();  Clob c1=rs.getClob(2);  Blob b1=rs.getBlob(3);  rs.next();  Clob c2=rs.getClob(2);  Blob b2=rs.getBlob(3);  assertFalse(rs.next());  rs.close();  assertEquals(0,c1.length());  assertEquals(0,b1.length());  assertEquals(chars.length,c2.length());  assertEquals(bytes.length,b2.length());  assertEquals("",c1.getSubString(1,0));  assertEquals(new byte[0],b1.getBytes(1,0));  assertEquals(d,c2.getSubString(1,(int)c2.length()));  assertEquals(bytes,b2.getBytes(1,(int)b2.length()));  stat.execute("drop table test");  conn.close();}  }
class C{  protected void createInputAttributes(Element element,MutableAttributeSet set){  if (element.getAttributes().getAttributeCount() > 0 || element.getEndOffset() - element.getStartOffset() > 1 || element.getEndOffset() < element.getDocument().getLength()) {    set.removeAttributes(set);    set.addAttributes(element.getAttributes());    set.removeAttribute(StyleConstants.ComponentAttribute);    set.removeAttribute(StyleConstants.IconAttribute);    set.removeAttribute(AbstractDocument.ElementNameAttribute);    set.removeAttribute(StyleConstants.ComposedTextAttribute);  }}  }
class C{  public boolean isReboot(){  return reboot;}  }
class C{  public void addFirst(E u){  innerChain.addFirst(u);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public IoSpyRule checkCharIoMaxCalls(int value){  checkArgument(value >= 0,"value >= 0");  checkCharIoMaxCalls=value;  return this;}  }
class C{  Table randomTable(){  return dbState.randomTable();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.280 -0500",hash_original_method="F8FE3E2E9328224EF7348B82C4E16D5E",hash_generated_method="AFAE8ADCD6DB00463035671A4D87ECE4") protected GenericObject next(){  if (myListIterator == null) {    myListIterator=this.listIterator(0);  }  try {    return (GenericObject)myListIterator.next();  } catch (  NoSuchElementException ex) {    myListIterator=null;    return null;  }}  }
class C{  public OverpassFilterQuery filterQuery(){  return new OverpassFilterQuery(this);}  }
class C{  public void addTab(String name,Icon icon,JComponent component){  component.setOpaque(false);  TabInfo tabInfo=new TabInfo(name,icon,component);  tabInfo.getHeader().getButton().addActionListener(this);  this.tabs.put(name,tabInfo);  render();}  }
class C{  public int lgR(){  int lgR=0;  for (int t=R - 1; t >= 1; t/=2)   lgR++;  return lgR;}  }
class C{  public BufferedImage filter(){  BufferedImage gray;  double[][] gx, gy;  double[][] gd, gm;  gray=grayscale.filter(bimg,null);  gray=gaussian.filter(gray,null);  gx=sobelFilterX(gray);  gy=sobelFilterY(gray);  int width=gray.getWidth();  int height=gray.getHeight();  gd=new double[width][height];  gm=new double[width][height];  for (int x=0; x < width; x++) {    for (int y=0; y < height; y++) {      if (gx[x][y] != 0) {        gd[x][y]=Math.atan(gy[x][y] / gx[x][y]);      } else {        gd[x][y]=Math.PI / 2d;      }      gm[x][y]=Math.sqrt(gy[x][y] * gy[x][y] + gx[x][y] * gx[x][y]);    }  }  for (int x=0; x < width; x++) {    gray.getRaster().setPixel(x,0,new int[]{255});    gray.getRaster().setPixel(x,height - 1,new int[]{255});  }  for (int y=0; y < height; y++) {    gray.getRaster().setPixel(0,y,new int[]{255});    gray.getRaster().setPixel(width - 1,y,new int[]{255});  }  for (int x=1; x < width - 1; x++) {    for (int y=1; y < height - 1; y++) {      if (gd[x][y] < (Math.PI / 8d) && gd[x][y] >= (-Math.PI / 8d)) {        if (gm[x][y] > gm[x + 1][y] && gm[x][y] > gm[x - 1][y])         setPixel(x,y,gray,gm[x][y]); else         gray.getRaster().setPixel(x,y,tmp255);      } else       if (gd[x][y] < (3d * Math.PI / 8d) && gd[x][y] >= (Math.PI / 8d)) {        if (gm[x][y] > gm[x - 1][y - 1] && gm[x][y] > gm[x + 1][y + 1])         setPixel(x,y,gray,gm[x][y]); else         gray.getRaster().setPixel(x,y,tmp255);      } else       if (gd[x][y] < (-3d * Math.PI / 8d) || gd[x][y] >= (3d * Math.PI / 8d)) {        if (gm[x][y] > gm[x][y + 1] && gm[x][y] > gm[x][y - 1])         setPixel(x,y,gray,gm[x][y]); else         gray.getRaster().setPixel(x,y,tmp255);      } else       if (gd[x][y] < (-Math.PI / 8d) && gd[x][y] >= (-3d * Math.PI / 8d)) {        if (gm[x][y] > gm[x + 1][y - 1] && gm[x][y] > gm[x - 1][y + 1])         setPixel(x,y,gray,gm[x][y]); else         gray.getRaster().setPixel(x,y,tmp255);      } else {        gray.getRaster().setPixel(x,y,tmp255);      }    }  }  int[] tmp={0};  for (int x=1; x < width - 1; x++) {    for (int y=1; y < height - 1; y++) {      if (gray.getRaster().getPixel(x,y,tmp)[0] < 50) {        trackWeakOnes(x,y,gray);      }    }  }  for (int x=2; x < width - 2; x++) {    for (int y=2; y < height - 2; y++) {      if (gray.getRaster().getPixel(x,y,tmp)[0] > 50) {        gray.getRaster().setPixel(x,y,tmp255);      }    }  }  return gray;}  }
class C{  protected HARegionQueue createHARegionQueue(String name,HARegionQueueAttributes attrs) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,attrs,HARegionQueue.NON_BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  public void enterInterrupt(Dim.StackFrame lastFrame,String threadTitle,String alertMessage){  if (SwingUtilities.isEventDispatchThread()) {    enterInterruptImpl(lastFrame,threadTitle,alertMessage);  } else {    RunProxy proxy=new RunProxy(this,RunProxy.ENTER_INTERRUPT);    proxy.lastFrame=lastFrame;    proxy.threadTitle=threadTitle;    proxy.alertMessage=alertMessage;    SwingUtilities.invokeLater(proxy);  }}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public void eatSeparators() throws IOException {  while (isSeparator(ch)) {    readChar();  }}  }
class C{  private void createQuitDialog(){  FormController formController=Collect.getInstance().getFormController();  String[] items;  String[] two={getString(R.string.keep_changes),getString(R.string.do_not_save)};  items=two;  Collect.getInstance().getActivityLogger().logInstanceAction(this,"createQuitDialog","show");  showAlertDialog();}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  @Deprecated public String readLine() throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.readLine()");  assertOpen();  try {    return HttpParser.readLine(inputStream);  } catch (  final Throwable t) {    LOG.debug("",t);    if (t instanceof IOException) {      throw (IOException)t;    }    if (t instanceof IllegalStateException) {      throw (IllegalStateException)t;    }    throw new Error(t);  }}  }
class C{  public synchronized void onSettingsLoaded(){  if (!isSettingsLoaded) {    isSettingsLoaded=true;    context.getPreferences().putBool("app.settings.loaded",true);    updateLoaded();  }}  }
class C{  public ResourceLintReport(){}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException, java.io.InvalidObjectException {  Object a=s.readFields().get("array",null);  if (a == null || !a.getClass().isArray())   throw new java.io.InvalidObjectException("Not array type");  if (a.getClass() != Object[].class)   a=Arrays.copyOf((Object[])a,Array.getLength(a),Object[].class);  unsafe.putObjectVolatile(this,arrayFieldOffset,a);}  }
class C{  public static void clearProperty(String key){  RuntimeSingleton.clearProperty(key);}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,Serializable value){  if (extras == null) {    extras=new Bundle();  }  extras.putSerializable(name,value);  return this;}  }
class C{  static public String generateSaveFileName(Context c,String fileName){  String path=getSaveFilePath(c) + File.separator + fileName;  return path;}  }
class C{  static boolean onSamePage(Address addr1,Address addr2){  return addr2.toWord().xor(addr1.toWord()).LT(Word.fromIntSignExtend(BYTES_IN_PAGE));}  }
class C{  final public int bytesConsumed(){  return bytesConsumed;}  }
class C{  public boolean isSecondaryKey(){  return (type == Unique || type == NonUnique);}  }
class C{  private boolean matchesAnyTag(String tagName){  return tagNames.contains(tagName);}  }
class C{  public String toString(){synchronized (lock) {    return new String(buf,0,count);  }}  }
class C{  public void write(FastPreferenceData<?,?> prefData,String up,String ip) throws FileNotFoundException, IOException {  write(prefData,new FileOutputStream(up),new FileOutputStream(ip));}  }
class C{  public int indexOfFromTo(long element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  long[] theElements=elements;  for (int i=from; i <= to; i++) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  public Set<AsciiString> allowedRequestHeaders(){  ensureEnabled();  return allowedRequestHeaders;}  }
class C{  private static Address newId(){  return Address.fromIntZeroExtend(idGenerator++);}  }
class C{  public void writeLogln(String logdata){  writeLog(logdata + System.getProperty("line.separator"));}  }
class C{  public void testSkipRawBytesPastEndOfBufferWithLimit() throws Exception {  byte[] rawBytes=new byte[]{1,2,3,4,5};  CodedInputStream input=CodedInputStream.newInstance(new SmallBlockInputStream(rawBytes,3));  int limit=input.pushLimit(4);  assertEquals(1,input.readRawByte());  input.skipRawBytes(3);  assertTrue(input.isAtEnd());  input.popLimit(limit);  assertEquals(5,input.readRawByte());}  }
class C{  @Override public void chartMouseClicked(ChartMouseEventFX event){  System.out.println(event);}  }
class C{  public WMatch(){  log.info("WinNo=" + m_WindowNo + " - AD_Client_ID="+ m_AD_Client_ID+ ", AD_Org_ID="+ m_AD_Org_ID+ ", By="+ m_by);  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","N");  try {    onlyVendor=WSearchEditor.createBPartner(m_WindowNo);    onlyProduct=WSearchEditor.createProduct(m_WindowNo);    zkInit();    dynInit();    southPanel.appendChild(new Separator());    southPanel.appendChild(statusBar);    LayoutUtils.addSclass("status-border",statusBar);    MMatchPO.consolidate(Env.getCtx());    cmd_matchTo();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  private void showSaveGpxTaskDialog(){  if (mSaveGpxProgress == null) {    throw new IllegalArgumentException("Export progress dialog must not be null");  }  if (mSaveGpxTaskFragment.isExecuting()) {    mSaveGpxTaskFragment.restoreProgress(mSaveGpxProgress);    if (!mSaveGpxProgress.isShowing()) {      mSaveGpxProgress.show();    }  }}  }
class C{  private static void enableFileAccess(SAXParser parser) throws SAXNotSupportedException {  try {    parser.setProperty("http://javax.xml.XMLConstants/property/accessExternalDTD","file");  } catch (  SAXNotRecognizedException ignore) {  }}  }
class C{  public SVGGraphics2D(SVGGeneratorContext generatorCtx,boolean textAsShapes){  super(textAsShapes);  if (generatorCtx == null)   throw new SVGGraphics2DRuntimeException(ERR_CONTEXT_NULL);  setGeneratorContext(generatorCtx);}  }
class C{  protected void closePopupMenu(){  if (popupMenu != null) {    popupMenu.removeFromParent();    popupMenu=null;  }  if (lockLayer != null) {    lockLayer.removeFromParent();    lockLayer=null;  }  panel.setStyleName(toolbarResources.toolbar().popupButtonPanel());}  }
class C{  public boolean hasPage(int pageNum){  return pages.containsKey(pageNum);}  }
class C{  public boolean rowInserted() throws SQLException {  checkUpdatable();  return rowUpdater.rowUpdated();}  }
class C{  public String format(final List<String> lines){  return lines.stream().collect(joining("\n"));}  }
class C{  private static String stripDotSuffix(final String value){  if (value == null) {    return null;  }  final int index=value.indexOf(".");  if (index != -1)   return value.substring(0,index);  return value;}  }
class C{  @Override public void paint(Graphics g){  Graphics2D g2d=(Graphics2D)g;  g2d.setFont(gui_font);synchronized (main_img) {    g2d.drawImage(main_img,0,0,null);  }  for (  MapMarker marker : markers) {    int x=(int)((shift_x + marker.x * 4) * zoom_level) + 2;    int y=(int)((shift_y + marker.z * 4) * zoom_level) + 2;    g2d.setColor(marker.color);    g2d.drawLine(x - 3,y - 3,x + 3,y + 3);    g2d.drawLine(x + 3,y - 3,x - 3,y + 3);  }  int z_p=100 - (zoom_level_pos * 100 / (zoom_levels.length - 1));  int mx=getWidth() / 2;  int my=getHeight() / 2;  int px=(int)((mx / zoom_level - shift_x) / 4);  int py=(int)((my / zoom_level - shift_y) / 4);  FontMetrics metrics=g2d.getFontMetrics(gui_font);  int fw;  int fh=metrics.getHeight();  g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,gui_bg_alpha));  if (selection_start_x != selection_end_x && selection_start_z != selection_end_z) {    screen_sx=(int)((shift_x + selection_start_x * 4) * zoom_level);    screen_sz=(int)((shift_y + selection_start_z * 4) * zoom_level);    screen_ex=(int)((shift_x + selection_end_x * 4) * zoom_level);    screen_ez=(int)((shift_y + selection_end_z * 4) * zoom_level);    int t;    if (screen_ex < screen_sx) {      t=screen_sx;      screen_sx=screen_ex;      screen_ex=t;    }    if (screen_ez < screen_sz) {      t=screen_sz;      screen_sz=screen_ez;      screen_ez=t;    }    g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,gui_bg_alpha));    g2d.setColor(Color.red);    g2d.fillRect(screen_sx,screen_sz,screen_ex - screen_sx,screen_ez - screen_sz);    g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1));    g2d.setColor(Color.black);    g2d.drawRect(screen_sx,screen_sz,screen_ex - screen_sx,screen_ez - screen_sz);    g2d.setColor(Color.white);    g2d.fillRect(screen_sx - 2,screen_sz - 2,4,4);    g2d.fillRect(screen_sx - 2,screen_ez - 2,4,4);    g2d.fillRect(screen_ex - 2,screen_sz - 2,4,4);    g2d.fillRect(screen_ex - 2,screen_ez - 2,4,4);    g2d.setColor(Color.black);    g2d.drawRect(screen_sx - 2,screen_sz - 2,4,4);    g2d.drawRect(screen_sx - 2,screen_ez - 2,4,4);    g2d.drawRect(screen_ex - 2,screen_sz - 2,4,4);    g2d.drawRect(screen_ex - 2,screen_ez - 2,4,4);  } else {    screen_sx=-1;    screen_ex=-1;    screen_sz=-1;    screen_ez=-1;  }  g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,gui_bg_alpha));  gui_text.clear();  gui_text.add(zoom_level + "x");  gui_text.add("(" + px + ","+ py+ ")");  gui_text.add(Messages.getString("PreviewPanel.SELECTION"));  gui_text.add("(" + selection_start_x + ","+ selection_start_z+ ")");  gui_text.add("(" + selection_end_x + ","+ selection_end_z+ ")");  g2d.setColor(gui_bg_color);  g2d.fillRect(0,0,100,130 + gui_text.size() * (fh + 5));  g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1));  g2d.setColor(gui_color);  g2d.drawRect(40,20,20,100);  g2d.drawRect(37,18 + z_p,26,5);  int start=125 + fh;  for (  String s : gui_text) {    fw=metrics.stringWidth(s);    g2d.drawString(s,50 - fw / 2,start);    start+=5 + fh;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.957 -0500",hash_original_method="B9FE8E2780DEC5F83DA892CAE9192499",hash_generated_method="CB7E2A92B217AFDBB96A3BB381AD5B3F") private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  public VcpcAltRunner(Graph graph,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graph,params,knowledgeBoxModel);}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(1);  newVector.addElement("measureOutOfBagError");  return newVector.elements();}  }
class C{  public ScaledThumbnailMaker scale(double widthFactor,double heightFactor){  if (ready.isSet(PARAM_SCALE)) {    throw new IllegalStateException("The scaling factor has already been set.");  }  if (widthFactor <= 0 || heightFactor <= 0) {    throw new IllegalArgumentException("The scaling factor must be greater than zero.");  }  this.widthFactor=widthFactor;  this.heightFactor=heightFactor;  ready.set(PARAM_SCALE);  return this;}  }
class C{  public String post(String url,String postBody,Bundle headers) throws ParseException, ClientProtocolException, IOException {  return post(url,postBody,headers,false);}  }
class C{  public EncodedField(CstFieldRef field,int accessFlags){  super(accessFlags);  if (field == null) {    throw new NullPointerException("field == null");  }  this.field=field;}  }
class C{  public RecognitionListener innerRecognitionListener(){  return innerRecognitionListener;}  }
class C{  public void testMapTypesSneaky(){  TypeFactory tf=TypeFactory.defaultInstance();  JavaType type=tf.constructType(IntLongMap.class);  MapType mapType=(MapType)type;  assertEquals(tf.constructType(Integer.class),mapType.getKeyType());  assertEquals(tf.constructType(Long.class),mapType.getContentType());}  }
class C{  public static void pln(String text){  System.out.println(text);}  }
class C{  public static final Polygon minkowskiSum(Polygon polygon,double radius,int count){  if (polygon == null)   throw new NullPointerException(Messages.getString("geometry.nullMinkowskiSumPolygon"));  if (radius <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidMinkowskiSumRadius"));  if (count <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidMinkowskiSumCount"));  Vector2[] vertices=polygon.vertices;  Vector2[] normals=polygon.normals;  int size=vertices.length;  Vector2[] nVerts=new Vector2[size * 2 + size * count];  int j=0;  for (int i=0; i < size; i++) {    Vector2 v1=vertices[i];    Vector2 v2=vertices[i + 1 == size ? 0 : i + 1];    Vector2 normal=normals[i];    Vector2 nv1=normal.product(radius).add(v1);    Vector2 nv2=normal.product(radius).add(v2);    Vector2 cv1=null;    if (i == 0) {      Vector2 tn=normals[size - 1];      cv1=v1.to(tn.product(radius).add(v1));    } else {      cv1=v1.to(nVerts[j - 1]);    }    Vector2 cv2=v1.to(nv1);    final double theta=cv1.getAngleBetween(cv2);    final double pin=theta / (count + 1);    final double c=Math.cos(pin);    final double s=Math.sin(pin);    double t=0;    double sTheta=Vector2.X_AXIS.getAngleBetween(normals[i - 1 < 0 ? size - 1 : i - 1]);    if (sTheta < 0) {      sTheta+=Geometry.TWO_PI;    }    double x=radius * Math.cos(sTheta);    double y=radius * Math.sin(sTheta);    for (int k=0; k < count; k++) {      t=x;      x=c * x - s * y;      y=s * t + c * y;      nVerts[j++]=new Vector2(x,y).add(v1);    }    nVerts[j++]=nv1;    nVerts[j++]=nv2;  }  return new Polygon(nVerts);}  }
class C{  public int selectedRelationsCount(){  return selectedRelations == null ? 0 : selectedRelations.size();}  }
class C{  @Override public boolean isInside(int x,int y){  boolean result=LatinKeyboard.this.isInside(this,x,y);  return result;}  }
class C{  public static XMLTableDefinition load(Document definition){  return load(definition.getRootElement());}  }
class C{  public static String exportReservedTerms(Registry registry){  StringBuilder termsBuilder=new StringBuilder(RegistryEnvironment.get().config().getReservedTermsExportDisclaimer());  Set<String> reservedTerms=new TreeSet<>();  for (  Key<ReservedList> key : registry.getReservedLists()) {    ReservedList reservedList=ReservedList.load(key).get();    if (reservedList.getShouldPublish()) {      for (      ReservedListEntry entry : reservedList.getReservedListEntries().values()) {        if (entry.getValue() != UNRESERVED) {          reservedTerms.add(entry.getLabel());        }      }    }  }  Joiner.on("\n").appendTo(termsBuilder,reservedTerms);  return termsBuilder.append("\n").toString();}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[] numbers=new double[10];  System.out.print("Enter ten numbers: ");  for (int i=0; i < numbers.length; i++)   numbers[i]=input.nextDouble();  System.out.println("The mean is " + mean(numbers));  System.out.println("The standard deviation is " + deviation(numbers));}  }
class C{  private ByteBuffer generateBallTexture(){  byte[] buf=new byte[TEX_SIZE * TEX_SIZE * BYTES_PER_PIXEL];  int left[]=new int[TEX_SIZE - 1];  int right[]=new int[TEX_SIZE - 1];  computeCircleEdges(TEX_SIZE / 2 - 1,left,right);  for (int y=0; y < left.length; y++) {    int xleft=left[y];    int xright=right[y];    for (int x=xleft; x <= xright; x++) {      int offset=(y * TEX_SIZE + x) * BYTES_PER_PIXEL;      buf[offset]=(byte)0xff;      buf[offset + 1]=(byte)0xff;      buf[offset + 2]=(byte)0xff;      buf[offset + 3]=(byte)0xff;    }  }  ByteBuffer byteBuf=ByteBuffer.allocateDirect(buf.length);  byteBuf.put(buf);  byteBuf.position(0);  return byteBuf;}  }
class C{  public Builder reset(){  this.innerDataBaseName="";  this.innerServerId=-1;  this.innerBinLogPos=-1;  this.innerBinLogFileName="";  this.innerTxId=null;  this.innerStartTimeInNanos=0L;  this.innerEndTimeInNanos=0L;  this.innerTxState=TransactionState.NONE;  this.innerDataEventList=new ArrayList<DataEvent>();  return this;}  }
class C{  public Bundler putShort(String key,short value){  bundle.putShort(key,value);  return this;}  }
class C{  public static double truncate(double value){  int temp=(int)(value * SCALE_FACTOR);  return ((double)temp) / SCALE_FACTOR;}  }
class C{  public int month(){  return month;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
