class C{  public IndexMaintenanceException(Throwable cause){  super(cause);}  }
class C{  public void removeListener(final ITagListener listener){  m_listeners.removeListener(listener);}  }
class C{  private Workflow.Method createSetCGPropertiesMethod(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs){  return new Workflow.Method(SET_CG_PROPERTIES_METHOD_NAME,vplexURI,cgURI,vplexVolumeURIs);}  }
class C{  public String read(String filename) throws IOException {  return ProcFile.readFile(String.format("/proc/%d/%s",pid,filename));}  }
class C{  public DocumentEvent(){}  }
class C{  public static CIdaSelectionDialog show(final Window parent,final String initialDirectory){  final CIdaSelectionDialog dlg=new CIdaSelectionDialog(parent,initialDirectory);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);  return dlg;}  }
class C{  public String toString(){  return Double.toString(get());}  }
class C{  public ConcurrentWriteLockedOffHeapClockCache(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,long tableSize,int concurrency){  super(new WriteLockedOffHeapClockCacheFactory<K,V>(tableSource,storageEngineFactory,(int)(tableSize / concurrency)),concurrency);}  }
class C{  public static void main(String[] args){  int n=args.length;  In[] streams=new In[n];  for (int i=0; i < n; i++)   streams[i]=new In(args[i]);  merge(streams);}  }
class C{  public void testBug61150() throws Exception {  NonRegisteringDriver driver=new NonRegisteringDriver();  Properties oldProps=driver.parseURL(BaseTestCase.dbUrl,null);  String host=driver.host(oldProps);  int port=driver.port(oldProps);  StringBuilder newUrlToTestNoDB=new StringBuilder("jdbc:mysql://");  if (host != null) {    newUrlToTestNoDB.append(host);  }  newUrlToTestNoDB.append(":").append(port).append("/");  Statement savedSt=this.stmt;  Properties props=getHostFreePropertiesFromTestsuiteUrl();  props.remove(NonRegisteringDriver.DBNAME_PROPERTY_KEY);  Connection conn1=DriverManager.getConnection(newUrlToTestNoDB.toString(),props);  this.stmt=conn1.createStatement();  createDatabase("TST1");  createProcedure("TST1.PROC","(x int, out y int)\nbegin\ndeclare z int;\nset z = x+1, y = z;\nend\n");  CallableStatement cStmt=null;  cStmt=conn1.prepareCall("{call `TST1`.`PROC`(?, ?)}");  cStmt.setInt(1,5);  cStmt.registerOutParameter(2,Types.INTEGER);  cStmt.execute();  assertEquals(6,cStmt.getInt(2));  cStmt.clearParameters();  cStmt.close();  conn1.setCatalog("TST1");  cStmt=null;  cStmt=conn1.prepareCall("{call TST1.PROC(?, ?)}");  cStmt.setInt(1,5);  cStmt.registerOutParameter(2,Types.INTEGER);  cStmt.execute();  assertEquals(6,cStmt.getInt(2));  cStmt.clearParameters();  cStmt.close();  conn1.setCatalog("mysql");  cStmt=null;  cStmt=conn1.prepareCall("{call `TST1`.`PROC`(?, ?)}");  cStmt.setInt(1,5);  cStmt.registerOutParameter(2,Types.INTEGER);  cStmt.execute();  assertEquals(6,cStmt.getInt(2));  cStmt.clearParameters();  cStmt.close();  this.stmt=savedSt;}  }
class C{  public GlobalVectorListElementSizeConstraint(DoubleArrayListParameter vector,IntParameter sizeConstraint){  this.vector=vector;  this.size=sizeConstraint;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:12:13.874 -0400",hash_original_method="37683A0367984FFADD961BF374D117C6",hash_generated_method="E4030BC1B6AB5B23AE126640083B4594") public UlawEncoderInputStream(InputStream in,int max){  mIn=in;  mMax=max;}  }
class C{  private void computeBounds(){  m_boundaryPanel.computeMinMaxAtts();  String xName=(String)m_xAttBox.getSelectedItem();  if (xName == null) {    return;  }  xName=Utils.removeSubstring(xName,"X: ");  xName=Utils.removeSubstring(xName," (Num)");  String yName=(String)m_yAttBox.getSelectedItem();  yName=Utils.removeSubstring(yName,"Y: ");  yName=Utils.removeSubstring(yName," (Num)");  m_xIndex=-1;  m_yIndex=-1;  for (int i=0; i < m_trainingInstances.numAttributes(); i++) {    if (m_trainingInstances.attribute(i).name().equals(xName)) {      m_xIndex=i;    }    if (m_trainingInstances.attribute(i).name().equals(yName)) {      m_yIndex=i;    }  }  m_minX=m_boundaryPanel.getMinXBound();  m_minY=m_boundaryPanel.getMinYBound();  m_maxX=m_boundaryPanel.getMaxXBound();  m_maxY=m_boundaryPanel.getMaxYBound();  m_xAxisPanel.repaint(0,0,0,m_xAxisPanel.getWidth(),m_xAxisPanel.getHeight());  m_yAxisPanel.repaint(0,0,0,m_yAxisPanel.getWidth(),m_yAxisPanel.getHeight());}  }
class C{  private void readRow(Map<String,Object> rowMap,Map<String,AwsAccountDetailDto> monthlyBill,List<String> tagHeaders,Collection<String> ignorableInvoiceCharge){  final String linkedAccountId=getStringFieldValue(rowMap,DetailedCsvHeaders.LINKED_ACCOUNT_ID);  String serviceName=getStringFieldValue(rowMap,DetailedCsvHeaders.PRODUCT_NAME);  String subscriptionId=getStringFieldValue(rowMap,DetailedCsvHeaders.SUBSCRIPTION_ID);  if (subscriptionId == null || subscriptionId.length() == 0 || serviceName == null || serviceName.length() == 0) {    readSummaryRow(rowMap,linkedAccountId,serviceName,monthlyBill,ignorableInvoiceCharge);    return;  }  AwsAccountDetailDto accountDeatils=createOrGetAccountDetailObject(monthlyBill,linkedAccountId);  AwsServiceDetailDto serviceDetail=createOrGetServiceDetailObject(accountDeatils,serviceName);  Double resourceCost=getResourceCost(rowMap);  String resourceId=getStringFieldValue(rowMap,DetailedCsvHeaders.RESOURCE_ID);  if (resourceId == null || resourceId.length() == 0) {    if (rowMap.get(DetailedCsvHeaders.USAGE_START_DATE) != null) {      LocalDateTime usageStartTimeFromCsv=(LocalDateTime)rowMap.get(DetailedCsvHeaders.USAGE_START_DATE);      Long millisForBillHour=getMillisForHour(usageStartTimeFromCsv);      serviceDetail.addToOtherCosts(millisForBillHour,resourceCost);      serviceDetail.addToDirectCosts(millisForBillHour,0d);    } else {      serviceDetail.addToRemainingCost(resourceCost);    }    return;  }  LocalDateTime usageStartTimeFromCsv=(LocalDateTime)rowMap.get(DetailedCsvHeaders.USAGE_START_DATE);  Long millisForBillHour=getMillisForHour(usageStartTimeFromCsv);  serviceDetail.addToDirectCosts(millisForBillHour,resourceCost);  AwsResourceDetailDto resourceDetail=createOrGetResourceDetailObject(rowMap,serviceDetail,resourceId);  resourceDetail.addToDirectCosts(millisForBillHour,resourceCost);  setLatestResourceValues(rowMap,tagHeaders,resourceDetail);}  }
class C{  public long count(){  return bits.count();}  }
class C{  public void testConstructorSignBytesPositive6(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,23,-101};  int aSign=1;  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,23,-101};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public void doMouseClicked(java.awt.event.MouseEvent e){  if (!_editor.getFlag(Editor.OPTION_CONTROLS,isControlling())) {    return;  }  performMouseClicked(e);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void handleContentProperty(HTMLElement element,CSSElement selector,HTMLComponent htmlC){  boolean after=((selector.getSelectorPseudoClass() & CSSElement.PC_AFTER) != 0);  String content=selector.getAttributeById(CSSElement.CSS_CONTENT);  if (content != null) {    Component cmp=after ? (Component)element.getUi().lastElement() : (Component)element.getUi().firstElement();    Component styleCmp=cmp;    Container parent=null;    int pos=0;    if (cmp instanceof Container) {      parent=((Container)cmp);      while ((parent.getComponentCount() > 0) && (parent.getComponentAt(after ? parent.getComponentCount() - 1 : 0) instanceof Container)) {        parent=(Container)parent.getComponentAt(after ? parent.getComponentCount() - 1 : 0);      }      if (parent.getComponentCount() > 0) {        pos=after ? parent.getComponentCount() - 1 : 0;        styleCmp=parent.getComponentAt(pos);      }    } else {      parent=cmp.getParent();      pos=cmp.getParent().getComponentIndex(cmp);    }    if (after) {      pos++;    }    int initPos=pos;    String str="";    content=content + " ";    boolean segment=false;    for (int i=0; i < content.length(); i++) {      char c=content.charAt(i);      Label lbl=null;      if (c == '"') {        segment=!segment;        if ((!segment) && (str.length() > 0)) {          lbl=new Label(str);          str="";        }      } else       if (CSSParser.isWhiteSpace(c)) {        if (segment) {          str+=c;          lbl=new Label(str);        } else         if (str.length() > 0) {          lbl=evalContentExpression(htmlC,str,element,selector);          if (lbl == null) {            int removeQuoteType=-1;            boolean removeAll=false;            if ((str.equals("none")) || (str.equals("normal"))) {              removeAll=true;            } else             if (str.equals("no-open-quote")) {              removeQuoteType=0;            } else             if (str.equals("no-close-quote")) {              removeQuoteType=1;            }            if ((removeAll) || (removeQuoteType != -1)) {              Vector v=element.getUi();              if (v != null) {                Vector toRemove=new Vector();                for (Enumeration e=v.elements(); e.hasMoreElements(); ) {                  Component ui=(Component)e.nextElement();                  String conStr=(String)ui.getClientProperty(CLIENT_PROPERTY_CSS_CONTENT);                  if ((conStr != null) && (((after) && (conStr.equals("a"))) || ((!after) && (conStr.equals("b"))))) {                    boolean remove=true;                    if (removeQuoteType != -1) {                      Object obj=ui.getClientProperty(HTMLComponent.CLIENT_PROPERTY_QUOTE);                      if (obj != null) {                        int quoteType=((Integer)obj).intValue();                        remove=(quoteType == removeQuoteType);                      } else {                        remove=false;                      }                    }                    if (remove) {                      parent.removeComponent(ui);                      toRemove.addElement(ui);                    }                  }                }                for (Enumeration e=toRemove.elements(); e.hasMoreElements(); ) {                  v.removeElement(e.nextElement());                }              }              return;            }          }        }        str="";      } else {        str+=c;      }      if (lbl != null) {        if (after) {          element.addAssociatedComponent(lbl);        } else {          element.addAssociatedComponentAt(pos - initPos,lbl);        }        lbl.setUnselectedStyle(new Style(styleCmp.getUnselectedStyle()));        lbl.putClientProperty(CLIENT_PROPERTY_CSS_CONTENT,after ? "a" : "b");        if (parent.getComponentCount() == 0) {          parent.addComponent(lbl);        } else {          parent.addComponent(pos,lbl);        }        pos++;        applyStyleToUIElement(lbl,selector,element,htmlC);      }    }  }}  }
class C{  private void buildPointLists(String sourceFolder,String shapefile,int idField) throws IOException {  MyMultiFeatureReader mfr=new MyMultiFeatureReader();  mfr.readMultizoneShapefile(shapefile,idField);  List<MyZone> zoneList=mfr.getAllZones();  LOG.info(" Building QuadTree from zones...");  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  for (  MyZone mz : zoneList) {    minX=Math.min(minX,mz.getEnvelope().getCoordinates()[0].x);    maxX=Math.max(maxX,mz.getEnvelope().getCoordinates()[2].x);    minY=Math.min(minY,mz.getEnvelope().getCoordinates()[0].y);    maxY=Math.max(maxY,mz.getEnvelope().getCoordinates()[2].y);  }  QuadTree<MyZone> zoneQT=new QuadTree<MyZone>(minX,minY,maxX,maxY);  for (  MyZone mz : zoneList) {    zoneQT.put(mz.getEnvelope().getCentroid().getX(),mz.getEnvelope().getCentroid().getY(),mz);  }  LOG.info("Done building QuadTree.");  long startTime=System.currentTimeMillis();  File folder=new File(sourceFolder);  List<File> vehicleList=FileUtils.sampleFiles(folder,Integer.MAX_VALUE,FileUtils.getFileFilter("xml.gz"));  int inActivities=0;  int outActivities=0;  ExecutorService threadExecutor=null;  List<DigicoreActivityReaderRunnable> threadList=null;  int vehicleCounter=0;  Counter counter=new Counter("   Vehicles completed: ");  zoneMap=new HashMap<Id<MyZone>,List<Coord>>();  for (  MyZone mz : zoneList) {    zoneMap.put(mz.getId(),new ArrayList<Coord>());  }  Map<Id<MyZone>,List<Coord>> theMap=null;  while (vehicleCounter < vehicleList.size()) {    int blockCounter=0;    threadExecutor=Executors.newFixedThreadPool(this.numberOfThreads);    threadList=new ArrayList<DigicoreActivityReaderRunnable>();    while (blockCounter++ < BLOCK_SIZE && vehicleCounter < vehicleList.size()) {      File vehicleFile=vehicleList.get(vehicleCounter++);      DigicoreActivityReaderRunnable rdar=new DigicoreActivityReaderRunnable(vehicleFile,zoneQT,counter);      threadList.add(rdar);      threadExecutor.execute(rdar);    }    threadExecutor.shutdown();    while (!threadExecutor.isTerminated()) {    }    for (    DigicoreActivityReaderRunnable rdar : threadList) {      theMap=rdar.getMap();      for (      Id<MyZone> id : theMap.keySet()) {        zoneMap.get(id).addAll(theMap.get(id));      }      inActivities+=rdar.getInCount();      outActivities+=rdar.getOutCount();    }  }  counter.printCounter();  long time=(System.currentTimeMillis() - startTime) / 1000;  int totalPoints=inActivities + outActivities;  LOG.info("Total number of activities checked: " + totalPoints);  LOG.info("   In: " + inActivities);  LOG.info("  Out: " + outActivities);  LOG.info("Time (s): " + time);}  }
class C{  public static Package mostRecentVersionWithRespectToConstraint(PackageConstraint toCheck) throws Exception {  Package target=toCheck.getPackage();  Package result=null;  List<Object> availableVersions=PACKAGE_MANAGER.getRepositoryPackageVersions(target.getName());  for (  Object version : availableVersions) {    Package candidate=PACKAGE_MANAGER.getRepositoryPackageInfo(target.getName(),version);    if (toCheck.checkConstraint(candidate)) {      result=candidate;      break;    }  }  if (result == null) {    throw new Exception("[WekaPackageManager] unable to find a version of " + "package " + target.getName() + " that meets constraint "+ toCheck.toString());  }  return result;}  }
class C{  public boolean equalType(HttpMessage msg){  boolean result=false;  if (!this.getRequestHeader().getMethod().equalsIgnoreCase(msg.getRequestHeader().getMethod())) {    return false;  }  URI uri1=this.getRequestHeader().getURI();  URI uri2=msg.getRequestHeader().getURI();  try {    if (uri1.getHost() == null || uri2.getHost() == null || !uri1.getHost().equalsIgnoreCase(uri2.getHost())) {      return false;    }    if (uri1.getPort() != uri2.getPort()) {      return false;    }    String path1=uri1.getPath();    String path2=uri2.getPath();    if (path1 == null && path2 == null) {      return true;    }    if (path1 != null && path2 != null && !path1.equalsIgnoreCase(path2)) {      return false;    } else {      if (path1 == null || path2 == null) {        return false;      }    }    if (!queryEquals(msg)) {      return false;    }    result=true;  } catch (  URIException e) {    log.error(e.getMessage(),e);  }  return result;}  }
class C{  AlignmentPattern find() throws NotFoundException {  int startX=this.startX;  int height=this.height;  int maxJ=startX + width;  int middleI=startY + (height / 2);  int[] stateCount=new int[3];  for (int iGen=0; iGen < height; iGen++) {    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) / 2 : -((iGen + 1) / 2));    stateCount[0]=0;    stateCount[1]=0;    stateCount[2]=0;    int j=startX;    while (j < maxJ && !image.get(j,i)) {      j++;    }    int currentState=0;    while (j < maxJ) {      if (image.get(j,i)) {        if (currentState == 1) {          stateCount[currentState]++;        } else {          if (currentState == 2) {            if (foundPatternCross(stateCount)) {              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);              if (confirmed != null) {                return confirmed;              }            }            stateCount[0]=stateCount[2];            stateCount[1]=1;            stateCount[2]=0;            currentState=1;          } else {            stateCount[++currentState]++;          }        }      } else {        if (currentState == 1) {          currentState++;        }        stateCount[currentState]++;      }      j++;    }    if (foundPatternCross(stateCount)) {      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);      if (confirmed != null) {        return confirmed;      }    }  }  if (!possibleCenters.isEmpty()) {    return possibleCenters.get(0);  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  public static void checkFieldMaximum(final long value,final long maximum,final String fieldName){  checkFieldMaximum(value,maximum,"",fieldName);}  }
class C{  private static void readField(DatabaseFieldConfig config,String field,String value){  if (field.equals(FIELD_NAME_FIELD_NAME)) {    config.setFieldName(value);  } else   if (field.equals(FIELD_NAME_COLUMN_NAME)) {    config.setColumnName(value);  } else   if (field.equals(FIELD_NAME_DATA_PERSISTER)) {    config.setDataPersister(DataType.valueOf(value).getDataPersister());  } else   if (field.equals(FIELD_NAME_DEFAULT_VALUE)) {    config.setDefaultValue(value);  } else   if (field.equals(FIELD_NAME_WIDTH)) {    config.setWidth(Integer.parseInt(value));  } else   if (field.equals(FIELD_NAME_CAN_BE_NULL)) {    config.setCanBeNull(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_ID)) {    config.setId(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_GENERATED_ID)) {    config.setGeneratedId(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_GENERATED_ID_SEQUENCE)) {    config.setGeneratedIdSequence(value);  } else   if (field.equals(FIELD_NAME_FOREIGN)) {    config.setForeign(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_USE_GET_SET)) {    config.setUseGetSet(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_UNKNOWN_ENUM_VALUE)) {    String[] parts=value.split("#",-2);    if (parts.length != 2) {      throw new IllegalArgumentException("Invalid value for unknownEnumValue which should be in class#name format: " + value);    }    Class<?> enumClass;    try {      enumClass=Class.forName(parts[0]);    } catch (    ClassNotFoundException e) {      throw new IllegalArgumentException("Unknown class specified for unknownEnumValue: " + value);    }    Object[] consts=enumClass.getEnumConstants();    if (consts == null) {      throw new IllegalArgumentException("Invalid class is not an Enum for unknownEnumValue: " + value);    }    @SuppressWarnings("rawtypes") Enum[] enumConstants=(Enum[])consts;    boolean found=false;    for (    Enum<?> enumInstance : enumConstants) {      if (enumInstance.name().equals(parts[1])) {        config.setUnknownEnumValue(enumInstance);        found=true;      }    }    if (!found) {      throw new IllegalArgumentException("Invalid enum value name for unknownEnumvalue: " + value);    }  } else   if (field.equals(FIELD_NAME_THROW_IF_NULL)) {    config.setThrowIfNull(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_FORMAT)) {    config.setFormat(value);  } else   if (field.equals(FIELD_NAME_UNIQUE)) {    config.setUnique(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_UNIQUE_COMBO)) {    config.setUniqueCombo(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_INDEX)) {    config.setIndex(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_INDEX_NAME)) {    config.setIndex(true);    config.setIndexName(value);  } else   if (field.equals(FIELD_NAME_UNIQUE_INDEX)) {    config.setUniqueIndex(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_UNIQUE_INDEX_NAME)) {    config.setUniqueIndex(true);    config.setUniqueIndexName(value);  } else   if (field.equals(FIELD_NAME_FOREIGN_AUTO_REFRESH)) {    config.setForeignAutoRefresh(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_MAX_FOREIGN_AUTO_REFRESH_LEVEL)) {    config.setMaxForeignAutoRefreshLevel(Integer.parseInt(value));  } else   if (field.equals(FIELD_NAME_PERSISTER_CLASS)) {    try {      @SuppressWarnings("unchecked") Class<? extends DataPersister> clazz=(Class<? extends DataPersister>)Class.forName(value);      config.setPersisterClass(clazz);    } catch (    ClassNotFoundException e) {      throw new IllegalArgumentException("Could not find persisterClass: " + value);    }  } else   if (field.equals(FIELD_NAME_ALLOW_GENERATED_ID_INSERT)) {    config.setAllowGeneratedIdInsert(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_COLUMN_DEFINITION)) {    config.setColumnDefinition(value);  } else   if (field.equals(FIELD_NAME_FOREIGN_AUTO_CREATE)) {    config.setForeignAutoCreate(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_VERSION)) {    config.setVersion(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_FOREIGN_COLUMN_NAME)) {    config.setForeignColumnName(value);  } else   if (field.equals(FIELD_NAME_READ_ONLY)) {    config.setReadOnly(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_FOREIGN_COLLECTION)) {    config.setForeignCollection(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_FOREIGN_COLLECTION_EAGER)) {    config.setForeignCollectionEager(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL_OLD)) {    config.setForeignCollectionMaxEagerLevel(Integer.parseInt(value));  } else   if (field.equals(FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL)) {    config.setForeignCollectionMaxEagerLevel(Integer.parseInt(value));  } else   if (field.equals(FIELD_NAME_FOREIGN_COLLECTION_COLUMN_NAME)) {    config.setForeignCollectionColumnName(value);  } else   if (field.equals(FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME_OLD)) {    config.setForeignCollectionOrderColumnName(value);  } else   if (field.equals(FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME)) {    config.setForeignCollectionOrderColumnName(value);  } else   if (field.equals(FIELD_NAME_FOREIGN_COLLECTION_ORDER_ASCENDING)) {    config.setForeignCollectionOrderAscending(Boolean.parseBoolean(value));  } else   if (field.equals(FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME_OLD)) {    config.setForeignCollectionForeignFieldName(value);  } else   if (field.equals(FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME)) {    config.setForeignCollectionForeignFieldName(value);  }}  }
class C{  public HostCommandResults executeFailFast(final RequestBuilder requestBuilder,Set<Host> hosts,String environmentId){  return executeParallel(requestBuilder,hosts,true,environmentId);}  }
class C{  protected Anonymous_derivedAttribute_1_Impl(){  super();}  }
class C{  public Builder withDrawable(final Drawable drawable){  this.drawable=drawable;  return this;}  }
class C{  @Override public boolean contains(Point2D.Double p){  if (get(TRANSFORM) != null) {    try {      p=(Point2D.Double)get(TRANSFORM).inverseTransform(p,new Point2D.Double());    } catch (    NoninvertibleTransformException ex) {      ex.printStackTrace();    }  }  Rectangle2D r=getTextShape().getBounds2D();  return r.isEmpty() ? getBounds().contains(p) : r.contains(p);}  }
class C{  public String[] toArray() throws Exception {  return Utils.splitOptions(toCommandLine());}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_MinArray == null) {    bufferInput(instance);    return false;  } else {    convertInstance(instance);    return true;  }}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  MessageResources rsc=getResources(request);  RollForwardSessionForm rollForwardSessionForm=(RollForwardSessionForm)form;  String op=request.getParameter("op");  if (op != null && op.equals(rsc.getMessage("button.rollForward"))) {    sessionContext.checkPermission(Right.SessionRollForward);    ActionMessages errors=rollForwardSessionForm.validate(mapping,request);    if (errors.isEmpty()) {      QueueProcessor.getInstance().add(new RollForwardQueueItem(SessionDAO.getInstance().get(rollForwardSessionForm.getSessionToRollForwardTo()),sessionContext.getUser(),(RollForwardSessionForm)rollForwardSessionForm.clone()));    } else {      saveErrors(request,errors);    }  }  if (request.getParameter("remove") != null) {    QueueProcessor.getInstance().remove(Long.valueOf(request.getParameter("remove")));  }  WebTable table=getQueueTable(request,rollForwardSessionForm);  if (table != null) {    request.setAttribute("table",table.printTable(WebTable.getOrder(sessionContext,"rollForwardSession.ord")));  }  setToFromSessionsInForm(rollForwardSessionForm);  rollForwardSessionForm.setSubjectAreas(getSubjectAreas(rollForwardSessionForm.getSessionToRollForwardTo()));  rollForwardSessionForm.setDepartments(getDepartments(rollForwardSessionForm.getSessionToRollForwardTo()));  if (op == null)   setExpirationDates(rollForwardSessionForm);  if (rollForwardSessionForm.getSubpartLocationPrefsAction() == null) {    rollForwardSessionForm.setSubpartLocationPrefsAction(SessionRollForward.ROLL_PREFS_ACTION);  }  if (rollForwardSessionForm.getSubpartTimePrefsAction() == null) {    rollForwardSessionForm.setSubpartTimePrefsAction(SessionRollForward.ROLL_PREFS_ACTION);  }  if (rollForwardSessionForm.getClassPrefsAction() == null) {    rollForwardSessionForm.setClassPrefsAction(SessionRollForward.DO_NOT_ROLL_ACTION);  }  if (rollForwardSessionForm.getCancelledClassAction() == null) {    rollForwardSessionForm.setCancelledClassAction(SessionRollForward.CancelledClassAction.REOPEN.name());  }  if (rollForwardSessionForm.getMidtermExamsPrefsAction() == null)   rollForwardSessionForm.setMidtermExamsPrefsAction(SessionRollForward.EXAMS_ROOM_PREFS);  if (rollForwardSessionForm.getFinalExamsPrefsAction() == null)   rollForwardSessionForm.setFinalExamsPrefsAction(SessionRollForward.EXAMS_ROOM_PREFS);  return mapping.findForward("displayRollForwardSessionForm");}  }
class C{  public Matrix3f scaleLocal(float x,float y,float z){  return scaleLocal(x,y,z,this);}  }
class C{  public synchronized Object push(Object item){  QueueNode newNode=new QueueNode(item);  if (m_Head == null) {    m_Head=m_Tail=newNode;  } else {    m_Tail=m_Tail.next(newNode);  }  m_Size++;  return item;}  }
class C{  public h4 addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public Soap parse(InputStream is){  return parse(TEXT_XML,UTF8,is);}  }
class C{  public static boolean assertEquals(final Object a,final Object b){  if (a == b) {    return true;  }  if (a == null || !a.equals(b)) {    throw new ExamException(a + " != " + b);  }  return true;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 7:    return MAP_FIELD;default :  return null;}}  }
class C{  private String nToStr(String str){  if (str == null)   return ""; else   return str;}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple8<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6,final WindowSpecification<T> specification7,final WindowSpecification<T> specification8){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6,specification7,specification8));}  }
class C{  private boolean isValidEngine(){  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {    problem.append("Flags:" + engineFlags);    return false;  }  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {    problem.append("Invalid Engine type for support vehicle engines!");    return false;  }  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {    problem.append("Rating:" + engineRating);    return false;  }  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {    engineFlags|=LARGE_ENGINE;  }switch (engineType) {case COMBUSTION_ENGINE:case NORMAL_ENGINE:case XL_ENGINE:case XXL_ENGINE:case FUEL_CELL:case NONE:case MAGLEV:case BATTERY:case SOLAR:    break;case COMPACT_ENGINE:  if (hasFlag(LARGE_ENGINE)) {    problem.append(Messages.getString("Engine.invalidCompactLarge"));    return false;  }break;case LIGHT_ENGINE:case FISSION:if (hasFlag(CLAN_ENGINE)) {problem.append(Messages.getString("Engine.invalidSphereOnly"));return false;}break;default :problem.append("Type:" + engineType);return false;}return true;}  }
class C{  public RelNode decorrelate(SqlNode query,RelNode rootRel){  if (!enableDecorrelation()) {    return rootRel;  }  final RelNode result=decorrelateQuery(rootRel);  if (result != rootRel) {    checkConvertedType(query,result);  }  return result;}  }
class C{  public boolean isFocused(){  return field_146213_o;}  }
class C{  public boolean isWaitlist(){  return iWaitlist;}  }
class C{  private boolean partOfURL(int index){  if (inURL != null)   return inURL[index];  inURL=new boolean[text.length()];  Matcher m=pURLs.matcher(text);  while (m.find())   for (int i=m.start(); i < m.end(); ++i)   inURL[i]=true;  return inURL[index];}  }
class C{  public static String randomUUID(int length){  String chars="ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789";  String uuid="";  for (int i=0; i < length; i++) {    uuid+=chars.charAt((int)(Math.random() * chars.length()));  }  return uuid;}  }
class C{  @Timed @ExceptionMetered @PUT public Response allowAccess(@Auth AutomationClient automationClient,@PathParam("secretId") LongParam secretId,@PathParam("groupId") LongParam groupId){  logger.info("Client '{}' allowing groupId={} access to secretId={}",automationClient,secretId,groupId);  try {    Map<String,String> extraInfo=new HashMap<>();    extraInfo.put("deprecated","true");    aclDAO.findAndAllowAccess(secretId.get(),groupId.get(),auditLog,automationClient.getName(),extraInfo);  } catch (  IllegalStateException e) {    throw new NotFoundException();  }  return Response.ok().build();}  }
class C{  private float updateRotation(float p_70663_1_,float p_70663_2_,float p_70663_3_){  float f3=MathHelper.wrapAngleTo180_float(p_70663_2_ - p_70663_1_);  if (f3 > p_70663_3_) {    f3=p_70663_3_;  }  if (f3 < -p_70663_3_) {    f3=-p_70663_3_;  }  return p_70663_1_ + f3;}  }
class C{  protected void delete(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {}  }
class C{  public Analyzer printAnalysis() throws IOException {  printAnalysis(System.out);  return this;}  }
class C{  @SuppressWarnings("rawtypes") public void invokeMethod(StorageSystem storageDevice,CIMObjectPath objectPath,String methodName,CIMArgument[] inArgs,CIMArgument[] outArgs) throws Exception {  CimConnection connection=getConnection(storageDevice);  WBEMClient client=connection.getCimClient();  int index=0;  StringBuilder inputInfoBuffer=new StringBuilder();  inputInfoBuffer.append("\nSMI-S Provider: ").append(connection.getHost()).append(" -- Attempting invokeMethod ").append(methodName).append(" on\n").append("  objectPath=").append(objectPath.toString()).append(" with arguments: \n");  for (  CIMArgument arg : inArgs) {    inputInfoBuffer.append("    inArg[").append(index++).append("]=").append(arg.toString()).append('\n');  }  _log.info(inputInfoBuffer.toString());  long start=System.nanoTime();  Object obj=null;  int retryCount=0;  while (true) {    try {      _log.info("Invoke method {}, attempt {}",methodName,retryCount);      obj=client.invokeMethod(objectPath,methodName,inArgs,outArgs);    } catch (    WBEMException e) {      if (CIM_BAD_REQUEST.equals(e.getMessage())) {        if (retryCount < CIM_MAX_RETRY_COUNT) {          _log.warn("Encountered 'request-not-well-formed' error. Retry...");          retryCount++;          try {            Thread.sleep(CIM_RETRY_WAIT_INTERVAL);          } catch (          InterruptedException ie) {            _log.warn("Thread: " + Thread.currentThread().getName() + " interrupted.");            throw e;          }          continue;        }        _log.warn("Exhausted {} retries",CIM_MAX_RETRY_COUNT);      }      throw e;    }    break;  }  String total=String.format("%2.6f",((System.nanoTime() - start) / 1000000000.0));  StringBuilder outputInfoBuffer=new StringBuilder();  outputInfoBuffer.append("\nSMI-S Provider: ").append(connection.getHost()).append(" -- Completed invokeMethod ").append(methodName).append(" on\n").append("  objectPath=").append(objectPath.toString()).append("\n  Returned: ").append(obj.toString()).append(" with output arguments: \n");  int returnCode=NumberUtils.toInt(obj.toString(),INVALID_RETURN_CODE);  for (  CIMArgument arg : outArgs) {    if (arg != null) {      if (returnCode == CIM_SUCCESS_CODE) {        outputInfoBuffer.append("    outArg=").append(arg.toString()).append('\n');      } else {        outputInfoBuffer.append("    outArg=").append(arg.getName()).append("=").append(arg.getValue()).append(" (Type ").append(arg.getDataType()).append(")\n");      }    }  }  outputInfoBuffer.append("  Execution time: ").append(total).append(" seconds.\n");  _log.info(outputInfoBuffer.toString());  if (returnCode == CIM_MAPPING_NOT_DEFINED && methodName.equals(HIDE_PATHS)) {  } else   if (returnCode == this.CIM_DUPLICATED_HOST_NAME && methodName.equals(CREATE_HARDWARE_ID_COLLECTION)) {    outArgs[0]=null;  } else   if (returnCode == this.CIM_OPERATION_PARTIALLY_SUCCEEDED && methodName.equals(ADD_HARDWARE_IDS_TO_COLLECTION)) {    outArgs[0]=null;  } else   if (returnCode == CIM_DUPLICATED_CG_NAME_CODE) {    throw new Exception(DUPLICATED_CG_NAME_ERROR);  } else   if (returnCode == CIM_ONLY_ALLOWED_ON_EMPTY_CG_CODE && methodName.equals(REMOVE_MEMBERS)) {    throw new Exception("Failed with return code: " + obj);  } else   if (returnCode != CIM_SUCCESS_CODE && methodName.equals(CREATE_OR_MODIFY_ELEMENTS_FROM_STORAGE_POOL) && checkIfVolumeSizeExceedingPoolSize(inArgs,outArgs)) {    throw DeviceControllerException.exceptions.volumeSizeExceedingPoolSize(getVolumeName(inArgs));  } else   if (returnCode != CIM_SUCCESS_CODE) {    throw new Exception("Failed with return code: " + obj);  }}  }
class C{  protected void sequence_BitwiseANDExpression_BitwiseXORExpression(ISerializationContext context,BinaryBitwiseExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected Rectangle computeBounds(boolean showVerticalScrollBar,boolean showHorizontalScrollBar){  int hScrollBarSize=(showHorizontalScrollBar ? this.scrollBarSize : 0);  int vScrollBarSize=(showVerticalScrollBar ? this.scrollBarSize : 0);  int titleBarHeight=this.isDrawTitleBar() ? this.titleBarHeight : 0;  int inset=2 * this.frameLineWidth;  return new Rectangle(this.innerBounds.x + inset,this.innerBounds.y + hScrollBarSize + inset,this.innerBounds.width - vScrollBarSize - inset * 2,this.innerBounds.height - titleBarHeight - hScrollBarSize- inset);}  }
class C{  public void toWGS84(){  double a=RefEll.AIRY_1830.getMaj();  double eSquared=RefEll.AIRY_1830.getEcc();  double phi=Math.toRadians(lat);  double lambda=Math.toRadians(lng);  double v=a / (Math.sqrt(1 - eSquared * Util.sinSquared(phi)));  double H=0;  double x=(v + H) * Math.cos(phi) * Math.cos(lambda);  double y=(v + H) * Math.cos(phi) * Math.sin(lambda);  double z=((1 - eSquared) * v + H) * Math.sin(phi);  double tx=446.448;  double ty=-124.157;  double tz=542.060;  double s=-0.0000204894;  double rx=Math.toRadians(0.00004172222);  double ry=Math.toRadians(0.00006861111);  double rz=Math.toRadians(0.00023391666);  double xB=tx + (x * (1 + s)) + (-rx * y)+ (ry * z);  double yB=ty + (rz * x) + (y * (1 + s))+ (-rx * z);  double zB=tz + (-ry * x) + (rx * y)+ (z * (1 + s));  a=RefEll.WGS84.getMaj();  eSquared=RefEll.WGS84.getEcc();  double lambdaB=Math.toDegrees(Math.atan(yB / xB));  double p=Math.sqrt((xB * xB) + (yB * yB));  double phiN=Math.atan(zB / (p * (1 - eSquared)));  for (int i=1; i < 10; i++) {    v=a / (Math.sqrt(1 - eSquared * Util.sinSquared(phiN)));    double phiN1=Math.atan((zB + (eSquared * v * Math.sin(phiN))) / p);    phiN=phiN1;  }  double phiB=Math.toDegrees(phiN);  lat=phiB;  lng=lambdaB;}  }
class C{  public boolean matches(final Expression other){  if (other != null) {    if (other.matcher == null) {      if (original.equals(other.original)) {        return true;      }    } else {      if (matcher != null) {        if (!matcher.equals(other.matcher)) {          return false;        }      }      return other.matcher.match(this,other);    }  }  return false;}  }
class C{  public WrappedRuntimeException(Exception e){  super(e.getMessage());  m_exception=e;}  }
class C{  @Override public boolean qualifyForComparison(Element control,Element test){  boolean isElementsComparable=recursiveElementQualifier.qualifyForComparison(control,test);  boolean isAttributesComparable=super.areAttributesComparable(control,test);  return (isElementsComparable && isAttributesComparable);}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  byte[] src=info;  int num=src.length;  byte[] dest=new byte[num];  for (int i=0; i < num; ++i)   dest[i]=src[i];  LineNumberAttribute attr=new LineNumberAttribute(newCp,dest);  return attr;}  }
class C{  @Override public void text(CharSequence text){  if (strip == false) {    super.text(text);    return;  }  int textLength=text.length();  char[] dest=new char[textLength];  int ndx=0;  boolean regularChar=true;  for (int i=0; i < textLength; i++) {    char c=text.charAt(i);    if (CharUtil.isWhitespace(c)) {      if (regularChar) {        regularChar=false;        c=' ';      } else {        continue;      }    } else {      regularChar=true;    }    dest[ndx]=c;    ndx++;  }  if (regularChar || (ndx != 1)) {    super.text(CharBuffer.wrap(dest,0,ndx));    strippedCharsCount+=textLength - ndx;  } else {    strippedCharsCount+=textLength;  }}  }
class C{  public boolean removeProperty(String key,boolean defaultValue){  String x=removeProperty(key,null);  return x == null ? defaultValue : Boolean.parseBoolean(x);}  }
class C{  public void encode(String type,String data){  Intent intentEncode=new Intent(ENCODE_INTENT);  intentEncode.putExtra(ENCODE_TYPE,type);  intentEncode.putExtra(ENCODE_DATA,data);  intentEncode.setPackage(this.cordova.getActivity().getApplicationContext().getPackageName());  this.cordova.getActivity().startActivity(intentEncode);}  }
class C{  @SuppressWarnings("unchecked") public static List<CnameConfiguration> parseGetBucketCname(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    List<CnameConfiguration> cnames=new ArrayList<CnameConfiguration>();    List<Element> cnameElements=root.getChildren("Cname");    for (    Element cnameElem : cnameElements) {      CnameConfiguration cname=new CnameConfiguration();      cname.setDomain(cnameElem.getChildText("Domain"));      cname.setStatus(CnameConfiguration.CnameStatus.valueOf(cnameElem.getChildText("Status")));      cname.setLastMofiedTime(DateUtil.parseIso8601Date(cnameElem.getChildText("LastModified")));      cnames.add(cname);    }    return cnames;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Rsp request(Req req) throws SolrServerException, IOException {  Rsp rsp=new Rsp();  Exception ex=null;  boolean isNonRetryable=req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());  List<ServerWrapper> skipped=null;  long timeAllowedNano=getTimeAllowedInNanos(req.getRequest());  long timeOutTime=System.nanoTime() + timeAllowedNano;  for (  String serverStr : req.getServers()) {    if (isTimeExceeded(timeAllowedNano,timeOutTime)) {      break;    }    serverStr=normalize(serverStr);    ServerWrapper wrapper=zombieServers.get(serverStr);    if (wrapper != null) {      final int numDeadServersToTry=req.getNumDeadServersToTry();      if (numDeadServersToTry > 0) {        if (skipped == null) {          skipped=new ArrayList<>(numDeadServersToTry);          skipped.add(wrapper);        } else         if (skipped.size() < numDeadServersToTry) {          skipped.add(wrapper);        }      }      continue;    }    try {      MDC.put("LBHttpSolrClient.url",serverStr);      HttpSolrClient client=makeSolrClient(serverStr);      ex=doRequest(client,req,rsp,isNonRetryable,false,null);      if (ex == null) {        return rsp;      }    }  finally {      MDC.remove("LBHttpSolrClient.url");    }  }  if (skipped != null) {    for (    ServerWrapper wrapper : skipped) {      if (isTimeExceeded(timeAllowedNano,timeOutTime)) {        break;      }      ex=doRequest(wrapper.client,req,rsp,isNonRetryable,true,wrapper.getKey());      if (ex == null) {        return rsp;      }    }  }  if (ex == null) {    throw new SolrServerException("No live SolrServers available to handle this request");  } else {    throw new SolrServerException("No live SolrServers available to handle this request:" + zombieServers.keySet(),ex);  }}  }
class C{  public boolean validate(InputNode node) throws Exception {  String name=node.getName();  String element=path.getElement(name);  Label label=elements.get(element);  Converter converter=label.getConverter(context);  return converter.validate(node);}  }
class C{  public String toString(){  String retval="Queue Contents " + m_Size + " elements\n";  QueueNode current=m_Head;  if (current == null) {    return retval + "Empty\n";  } else {    while (current != null) {      retval+=current.contents().toString() + "\n";      current=current.next();    }  }  return retval;}  }
class C{  public void complete(){  complete(null);}  }
class C{  protected List<Position> computeArrowheadPositions(DrawContext dc,Position startPosition,Position endPosition){  Globe globe=dc.getGlobe();  Vec4 p1=globe.computePointFromPosition(startPosition);  Vec4 pB=globe.computePointFromPosition(endPosition);  Vec4 vB1=p1.subtract3(pB);  double arrowLengthFraction=this.getArrowLength();  Vec4 arrowBase=pB.add3(vB1.multiply3(arrowLengthFraction));  Vec4 normal=globe.computeSurfaceNormalAtPoint(arrowBase);  double arrowLength=vB1.getLength3() * arrowLengthFraction;  double arrowHalfWidth=arrowLength * this.getArrowAngle().tanHalfAngle();  Vec4 perpendicular=vB1.cross3(normal);  perpendicular=perpendicular.normalize3().multiply3(arrowHalfWidth);  Vec4 pA=arrowBase.add3(perpendicular);  Vec4 pC=arrowBase.subtract3(perpendicular);  return TacticalGraphicUtil.asPositionList(globe,pA,pB,pC);}  }
class C{  public void localTransactionRolledback(ConnectionEvent event){}  }
class C{  public static void main(String[] args) throws Exception {  final String cfg="modules/yardstick/config/ignite-localhost-config.xml";  final Class<? extends BenchmarkDriver> benchmark=IgniteSqlQueryBenchmark.class;  final int threads=1;  final boolean clientDriverNode=true;  final int extraNodes=2;  final int warmUp=5;  final int duration=5;  final int range=100_000;  final boolean throughputLatencyProbe=false;  for (int i=0; i < extraNodes; i++) {    IgniteConfiguration nodeCfg=Ignition.loadSpringBean(cfg,"grid.cfg");    nodeCfg.setGridName("node-" + i);    nodeCfg.setMetricsLogFrequency(0);    Ignition.start(nodeCfg);  }  ArrayList<String> args0=new ArrayList<>();  addArg(args0,"-t",threads);  addArg(args0,"-w",warmUp);  addArg(args0,"-d",duration);  addArg(args0,"-r",range);  addArg(args0,"-dn",benchmark.getSimpleName());  addArg(args0,"-sn","IgniteNode");  addArg(args0,"-cfg",cfg);  if (throughputLatencyProbe)   addArg(args0,"-pr","ThroughputLatencyProbe");  if (clientDriverNode)   args0.add("-cl");  BenchmarkDriverStartUp.main(args0.toArray(new String[args0.size()]));}  }
class C{  protected boolean shouldSpawnThreadForPrepare(){  if (layer != null && !alwaysSpawnThread) {    OMGraphicList list=layer.getList();    if (list != null) {      return layer.getList().size() > graphicCutoff;    }  }  return true;}  }
class C{  private SelectPrinter(java.awt.Dialog parent,boolean modal){  super(parent,modal);}  }
class C{  public static String parseBssid(byte[] bssidBytes){  StringBuilder sb=new StringBuilder();  int k;  String hexK;  String str;  for (int i=0; i < bssidBytes.length; i++) {    k=0xff & bssidBytes[i];    hexK=Integer.toHexString(k);    str=((k < 16) ? ("0" + hexK) : (hexK));    System.out.println(str);    sb.append(str);  }  return sb.toString();}  }
class C{  public static String formatDurationISO(final long durationMillis){  return formatDuration(durationMillis,ISO_EXTENDED_FORMAT_PATTERN,false);}  }
class C{  protected boolean[] runBasicTest(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int missingLevel,boolean predictorMissing,boolean classMissing,int numTrain,int numClasses,ArrayList<String> accepts){  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,TestInstances.CLASS_IS_LAST,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  public static float clip(float value,float maximum){  if (value > maximum) {    return maximum;  } else   if (value < -maximum) {    return -maximum;  }  return value;}  }
class C{  public final void suicide(){  base.destroyAgent(name);}  }
class C{  public void createROCPlotDialog(ROCData data,boolean showSlope,boolean showThresholds){  SimplePlotterDialog plotter=new SimplePlotterDialog(createDataTable(data,showSlope,showThresholds));  plotter.setXAxis(0);  plotter.plotColumn(1,true);  if (showSlope) {    plotter.plotColumn(2,true);  }  if (showThresholds) {    plotter.plotColumn(3,true);  }  plotter.setDrawRange(0.0d,1.0d,0.0d,1.0d);  plotter.setPointType(ScatterPlotter.LINES);  plotter.setSize(500,500);  plotter.setLocationRelativeTo(plotter.getOwner());  plotter.setVisible(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:52.989 -0400",hash_original_method="2701BC26AA1CE42F778C037C4B6D7CAD",hash_generated_method="BE0EC71A9AF8CDF3877BE4D49EE24869") public DrmErrorEvent(int uniqueId,int type,String message,HashMap<String,Object> attributes){  super(uniqueId,type,message,attributes);}  }
class C{  public void optimizeLineSection(){  int i=0;  while (i < lineData.size() - 1) {    LineInfo li=lineData.get(i);    LineInfo liNext=lineData.get(i + 1);    if (!liNext.lineFileIDSet && liNext.inputStartLine == li.inputStartLine && liNext.inputLineCount == 1 && li.inputLineCount == 1 && liNext.outputStartLine == li.outputStartLine + li.inputLineCount * li.outputLineIncrement) {      li.setOutputLineIncrement(liNext.outputStartLine - li.outputStartLine + liNext.outputLineIncrement);      lineData.remove(i + 1);    } else {      i++;    }  }  i=0;  while (i < lineData.size() - 1) {    LineInfo li=lineData.get(i);    LineInfo liNext=lineData.get(i + 1);    if (!liNext.lineFileIDSet && liNext.inputStartLine == li.inputStartLine + li.inputLineCount && liNext.outputLineIncrement == li.outputLineIncrement && liNext.outputStartLine == li.outputStartLine + li.inputLineCount * li.outputLineIncrement) {      li.setInputLineCount(li.inputLineCount + liNext.inputLineCount);      lineData.remove(i + 1);    } else {      i++;    }  }}  }
class C{  public static void logException(final Exception exception){  CUtilityFunctions.logException(exception);}  }
class C{  public T campaignContent(String value){  setString(CAMPAIGN_CONTENT,value);  return (T)this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int value;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          z=data.get(0);          value=1;          for (a=1; a < dataSize; a++) {            if (data.get(a) != z) {              z=data.get(a);              value++;            }          }          outputFile.setValue(row,col,value);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public ReturnStatement createReturnStatement(){  ReturnStatementImpl returnStatement=new ReturnStatementImpl();  return returnStatement;}  }
class C{  @Override public boolean isActive(){  return true;}  }
class C{  public static int parseInt(String string,int radix) throws NumberFormatException {  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    throw new NumberFormatException("Invalid radix: " + radix);  }  if (string == null) {    throw invalidInt(string);  }  int length=string.length(), i=0;  if (length == 0) {    throw invalidInt(string);  }  boolean negative=string.charAt(i) == '-';  if (negative && ++i == length) {    throw invalidInt(string);  }  return parse(string,i,radix,negative);}  }
class C{  public boolean supportsAc3(){  return Util.SDK_INT >= 21;}  }
class C{  private void collectClassFiles(List<WorkItem> resources,Map<IPath,IPath> outLocations,Project fbProject){  for (  WorkItem workItem : resources) {    workItem.addFilesToProject(fbProject,outLocations);  }}  }
class C{  public void testAddValue(){  DefaultCategoryDataset d1=new DefaultCategoryDataset();  d1.addValue(null,"R1","C1");  assertNull(d1.getValue("R1","C1"));  d1.addValue(new Double(1.0),"R2","C1");  assertEquals(new Double(1.0),d1.getValue("R2","C1"));  boolean pass=false;  try {    d1.addValue(new Double(1.1),null,"C2");  } catch (  IllegalArgumentException e) {    pass=true;  }  assertTrue(pass);}  }
class C{  private void heapifyDown(double cur,long val){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    double best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best > twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur <= best) {      break;    }    twoheap[twopos]=best;    twovals[twopos]=twovals[bestchild];    twopos=bestchild;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  public Options resourceRootName(String resourceRootName){  resourceRoot=resourceRootName;  return this;}  }
class C{  @SuppressWarnings("unchecked") private void updateConnectedDevices(){  AdbHelper helper=AdbHelper.getInstance();  String selectedSerial=null;  Object selectedItem=devicesComboBox.getSelectedItem();  if (selectedItem != null && selectedItem instanceof IDevice) {    selectedSerial=((IDevice)selectedItem).getSerialNumber();  }  devices_=helper.getDevices();  if (devices_.length == 0) {    String[] emptyList={"Devices not found"};    devicesComboBox.setModel(new DefaultComboBoxModel<String>(emptyList));    toggleStartButtonsAvailability(false);  } else {    devicesComboBox.setModel(new DefaultComboBoxModel<IDevice>(devices_));    devicesComboBox.setSelectedIndex(findSelectionIndex(selectedSerial));    toggleStartButtonsAvailability(true);  }}  }
class C{  private static StringField str(String key){  return new StringField(key);}  }
class C{  private static void run(Recurrence recur,DateValue start,DateValue advanceTo,DateValue[] expected){  run(recur,start,UTC,advanceTo,expected);}  }
class C{  public synchronized void add(String category,double minValue,double maxValue){  super.add(category,minValue);  mMaxValues.add(maxValue);}  }
class C{  public static ArrayList<DataSet> makeDataSets(ArrayList<Double[]> yValues){  ArrayList<DataSet> dataSets=new ArrayList<DataSet>();  for (int i=0; i < yValues.size(); i++) {    Double[] curValues=yValues.get(i);    ArrayList<Entry> entries=new ArrayList<Entry>();    for (int j=0; j < curValues.length; j++) {      entries.add(new Entry(curValues[j].floatValue(),j));    }    dataSets.add(new DataSet(entries,i));  }  return dataSets;}  }
class C{  public void unsetType(){  this.type=null;}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  protected void testGet() throws Throwable {  Operation op=Operation.createGet(URI.create(echoServiceUri));  testEchoOperation(op);}  }
class C{  public static void uiImpl_cross(){  UIManager.put("FileChooserUI",org.jb2011.lnf.beautyeye.ch20_filechooser.BEFileChooserUICross.class.getName());}  }
class C{  public static void main(String args[]){  PrintStream fileStream;  try {    ApplicationDataDirectoryLocator applicationDataDirectoryLocator=new ApplicationDataDirectoryLocator();    String outputDirectory;    String consoleOutputFilename;    if ("".equals(applicationDataDirectoryLocator.getApplicationDataDirectory())) {      outputDirectory=OUTPUT_DIRECTORY;      consoleOutputFilename=OUTPUT_DIRECTORY + File.separator + CONSOLE_OUTPUT_FILENAME;    } else {      outputDirectory=applicationDataDirectoryLocator.getApplicationDataDirectory() + File.separator + OUTPUT_DIRECTORY;      consoleOutputFilename=applicationDataDirectoryLocator.getApplicationDataDirectory() + File.separator + OUTPUT_DIRECTORY+ File.separator+ CONSOLE_OUTPUT_FILENAME;    }    log=LoggerFactory.getLogger(MultiBitInExecutableJar.class);    (new File(outputDirectory)).mkdir();    (new File(consoleOutputFilename)).createNewFile();    fileStream=new PrintStream(new FileOutputStream(consoleOutputFilename,true));    if (fileStream != null) {      System.setOut(fileStream);      System.setErr(fileStream);    }  } catch (  FileNotFoundException e) {    if (log != null) {      log.error("Error in IO Redirection",e);    }  }catch (  Exception e) {    if (log != null) {      log.debug("Error in redirecting output & exceptions to file",e);    }  } finally {    MultiBit.main(args);  }}  }
class C{  @Override public void onCommentSelected(int id){  cf=(CommentFragment)getSupportFragmentManager().findFragmentByTag(COMMENT_FRAGMENT_TAG);  Bundle args=new Bundle();  args.putInt("id",id);  cf.setUIArguments(args);  FragmentTransaction ft=fm.beginTransaction();  ft.setCustomAnimations(android.R.anim.slide_in_left,android.R.anim.slide_out_right,android.R.anim.slide_in_left,android.R.anim.slide_out_right);  ft.hide(pf);  ft.show(cf);  ft.addToBackStack(null);  ft.commit();}  }
class C{  private String createSfxMomentWithFictionalProgressXML(String momentId,String nextMomentId,String pathToResource,String progressDescription){  String xml="";  xml+=createStartMomentXml("sfx",momentId);  xml+=createNextMomentXml(nextMomentId);  xml+="<uri>" + pathToResource + "</uri>";  xml+=createFictionalProgressXml(progressDescription);  xml+=createEndMomentXml();  return xml;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TANNOTATION_STRING_ARGUMENT__VALUE:    setValue((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private Start build(Start event){  NamedNodeMap list=event.getAttributes();  int length=list.getLength();  for (int i=0; i < length; i++) {    Node node=list.item(i);    Attribute value=attribute(node);    if (!value.isReserved()) {      event.add(value);    }  }  return event;}  }
class C{  @Override protected void initListeners(){  this.valueTv.setOnClickListener(this);  this.alphaTv.setOnClickListener(this);  this.rotationTv.setOnClickListener(this);  this.translationTv.setOnClickListener(this);  this.scaleTv.setOnClickListener(this);  this.setTv.setOnClickListener(this);  this.evaluatorTv.setOnClickListener(this);  this.propertyTv.setOnClickListener(this);}  }
class C{  public void memberLeft(MembershipEvent event){}  }
class C{  public ImplementationEventListenerMememto(EventTarget t,String s,EventListener l,boolean b,BridgeContext c){  super(t,s,l,b,c);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public final void writeInt(int v){  tempBuffer[0]=(byte)((v >>> 24) & 0xFF);  tempBuffer[1]=(byte)((v >>> 16) & 0xFF);  tempBuffer[2]=(byte)((v >>> 8) & 0xFF);  tempBuffer[3]=(byte)((v >>> 0) & 0xFF);  write(tempBuffer,0,4);}  }
class C{  public static void checkNotUsedByActiveFileExport(String endpoint,DbClient dbClient){  Network network=NetworkUtil.getEndpointNetwork(endpoint,dbClient);  if (network != null) {    Set<String> netVArrayIds=network.getConnectedVirtualArrays();    if ((netVArrayIds != null) && (!netVArrayIds.isEmpty())) {      Iterator<String> netVArrayIdsIter=netVArrayIds.iterator();      while (netVArrayIdsIter.hasNext()) {        String varrayId=netVArrayIdsIter.next();        List<FileShare> fileShares=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,FileShare.class,AlternateIdConstraint.Factory.getConstraint(FileShare.class,"varray",varrayId));        for (        FileShare fileShare : fileShares) {          FSExportMap fsExports=fileShare.getFsExports();          if (fsExports != null) {            Iterator<FileExport> it=fsExports.values().iterator();            while (it.hasNext()) {              FileExport fileExport=it.next();              if (fileExport.getClients().contains(endpoint) || fileExport.getStoragePort().contains(endpoint)) {                throw APIException.badRequests.endpointsCannotBeUpdatedActiveExport(endpoint);              }            }          }        }      }    }  }}  }
class C{  public DefaultRiskAnalysis.RuleViolation isStandard(){  return DefaultRiskAnalysis.isInputStandard(this);}  }
class C{  public void appendSubElement(String name,String value){  if (value != null) {    if (subElements == null) {      subElements=HashMultimap.create();    }    subElements.put(name,value);  }}  }
class C{  @Override public int length(){  return maxInt;}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/metrics/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public void copyReader(String encoding,Reader r) throws IOException {  super.setContentEncoding(encoding);  String s=readString(r);  content=s.getBytes(encoding);}  }
class C{  @Override public void undo() throws CannotRedoException {  super.undo();  try {    getSetter().invoke(source,oldValue);  } catch (  Exception e) {    InternalError ie=new InternalError("Couldn't invoke setter for property \"" + propertyName + "\" in "+ source);    ie.initCause(e);    throw ie;  }}  }
class C{  public String computeAuthorizationUrl(){  String redirectUri=getRedirectUrl();  String authorizationUrl=new AuthorizationCodeRequestUrl(authorizationServerUrl,clientId).setRedirectUri(redirectUri).setScopes(scopes).build();  return authorizationUrl;}  }
class C{  public void testFloats() throws Exception {  float[] values=new float[]{Float.NEGATIVE_INFINITY,-2.3E25f,-1.0E15f,-1.0f,-1.0E-1f,-1.0E-2f,-0.0f,+0.0f,1.0E-2f,1.0E-1f,1.0f,1.0E15f,2.3E25f,Float.POSITIVE_INFINITY,Float.NaN};  int[] encoded=new int[values.length];  for (int i=0; i < values.length; i++) {    encoded[i]=NumericUtils.floatToSortableInt(values[i]);    assertTrue("forward and back conversion should generate same float",Float.compare(values[i],NumericUtils.sortableIntToFloat(encoded[i])) == 0);  }  for (int i=1; i < encoded.length; i++) {    assertTrue("check sort order",encoded[i - 1] < encoded[i]);  }}  }
class C{  @NoInline private void handleMicrocontention(int n){  Magic.pause();  if (n <= 0)   return;  if (n > 100) {    VM.sysWriteln("Unexpectedly large spin lock contention on ",Magic.objectAsAddress(this));    RVMThread t=latestContender;    if (t == null) {      VM.sysWriteln("Unexpectedly large spin lock contention in ",RVMThread.getCurrentThreadSlot(),"; lock held by nobody");    } else {      VM.sysWriteln("Unexpectedly large spin lock contention in ",RVMThread.getCurrentThreadSlot(),"; lock held by ",t.getThreadSlot());      if (t != RVMThread.getCurrentThread()) {        VM.sysWriteln("But -- at least the spin lock is held by a different thread.");      }    }    RVMThread.dumpStack();    VM.sysFail("Unexpectedly large spin lock contention");  }  int pid=RVMThread.getCurrentThread().getThreadSlot();  delayIndex=(delayIndex + pid) % delayCount.length;  int delay=delayCount[delayIndex] * delayMultiplier;  delay+=delayBase << (n - 1);  for (int i=delay; i > 0; i--)   ;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:40.078 -0500",hash_original_method="12AE735753CC1F454105371651D9BBA1",hash_generated_method="A81B33F763D33088121941BE1E8C1B6E") public boolean requiresNetwork(){  return mRequiresNetwork;}  }
class C{  public static void checkNeedForArgumentCasts(BlockScope scope,Expression receiver,TypeBinding receiverType,MethodBinding binding,Expression[] arguments,TypeBinding[] argumentTypes,final InvocationSite invocationSite){  if (scope.compilerOptions().getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) {    return;  }  int length=argumentTypes.length;  TypeBinding[] rawArgumentTypes=argumentTypes;  for (int i=0; i < length; i++) {    Expression argument=arguments[i];    if (argument instanceof CastExpression) {      if ((argument.bits & ASTNode.UnnecessaryCast) == 0 && argument.resolvedType.isBaseType()) {        continue;      }      TypeBinding castedExpressionType=((CastExpression)argument).expression.resolvedType;      if (castedExpressionType == null) {        return;      }      if (castedExpressionType == argumentTypes[i]) {        scope.problemReporter().unnecessaryCast((CastExpression)argument);      } else       if (castedExpressionType == TypeBinding.NULL) {        continue;      } else       if ((argument.implicitConversion & TypeIds.BOXING) != 0) {        continue;      } else {        if (rawArgumentTypes == argumentTypes) {          System.arraycopy(rawArgumentTypes,0,rawArgumentTypes=new TypeBinding[length],0,length);        }        rawArgumentTypes[i]=castedExpressionType;      }    }  }  if (rawArgumentTypes != argumentTypes) {    checkAlternateBinding(scope,receiver,receiverType,binding,arguments,argumentTypes,rawArgumentTypes,invocationSite);  }}  }
class C{  public char charAt(int index){  return chars[index];}  }
class C{  public void afterCall(PageContext pc,Variables parent) throws ApplicationException {  afterConstructor(pc,parent);}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("prepareStatement(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    return prepareStatement(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public String likelihoodThresholdTipText(){  return "Threshold on improvement in likelihood.";}  }
class C{  public boolean hasParentUrl(){  return fieldSetFlags()[5];}  }
class C{  private void onOrderClicked(){  String coffee;  String message;  String number=etNumber.getText().toString();  boolean cream=chkCream.isChecked();  boolean sugar=chkSugar.isChecked();  if (optExpresso.isChecked()) {    coffee="Expresso";  } else   if (optColombian.isChecked()) {    coffee="Colombian";  } else {    coffee="Decaf";  }  if (cream && sugar) {    message=coffee + " with cream and sugar.";  } else   if (cream) {    message=coffee + " with cream.";  } else   if (sugar) {    message=coffee + " with sugar.";  } else {    message=coffee + ".";  }  showMessage(number,message);}  }
class C{  private double sumOfConstraintViolations(Solution solution){  double result=0.0;  for (int i=0; i < solution.getNumberOfConstraints(); i++) {    result+=Math.abs(solution.getConstraint(i));  }  return result;}  }
class C{  private void test(Algorithm algorithm){  Assert.assertTrue(algorithm instanceof PISAAlgorithm);  Assert.assertEquals(0,algorithm.getNumberOfEvaluations());  Assert.assertEquals(0,algorithm.getResult().size());  Assert.assertFalse(algorithm.isTerminated());  while (algorithm.getNumberOfEvaluations() < 1000) {    algorithm.step();  }  algorithm.terminate();  Assert.assertEquals(1000,algorithm.getNumberOfEvaluations());  Assert.assertTrue(algorithm.getResult().size() > 0);  Assert.assertTrue(algorithm.isTerminated());}  }
class C{  public boolean isAccept(int state){  return isAccept.get(state);}  }
class C{  public boolean hasFileAs(){  return hasExtension(FileAs.class);}  }
class C{  void hide(){  if (mShowing) {    if (DEBUG)     Slog.v(TAG,"hide: immediate");    hide(0);  }}  }
class C{  public int countNumElements(){  return regSpillList.size();}  }
class C{  public static byte[] randomBytes(byte len){  char u8=convertByte2Uint8(len);  return randomBytes(u8);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public boolean hasUnterminatedLine(){  return end == -1;}  }
class C{  private static void hookLoadPatch(PatchCallback callback){synchronized (loadedPatchCallbacks) {    loadedPatchCallbacks.add(callback);  }}  }
class C{  public LeaderZookeeperStateMachineEnsemble(CuratorFramework curatorClient,String basePath){  super(curatorClient,basePath);  this.curatorClient=curatorClient;  this.basePath=basePath;}  }
class C{  public boolean intersects(int left,int top,int right,int bottom){  return this.left < right && left < this.right && this.top < bottom && top < this.bottom;}  }
class C{  public final static String encodeToString(byte[] sArr,boolean lineSep){  return new String(encodeToChar(sArr,lineSep));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.695 -0400",hash_original_method="9EF81A5837AC6374818AE9B0FFBE4DBD",hash_generated_method="8418DF9A0B6FBA3ECC06BA0A07F498F5") public SuffixFileFilter(String[] suffixes,IOCase caseSensitivity){  if (suffixes == null) {    throw new IllegalArgumentException("The array of suffixes must not be null");  }  this.suffixes=new String[suffixes.length];  System.arraycopy(suffixes,0,this.suffixes,0,suffixes.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public boolean isConverted(){  return this.converted;}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec04(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public void toBinFile(final OutputStream out) throws IOException {  final Charset cs=Charset.forName("UTF-8");  final String header=String.format("%d %d\n",vocab.size(),layerSize);  out.write(header.getBytes(cs));  final double[] vector=new double[layerSize];  final ByteBuffer buffer=ByteBuffer.allocate(4 * layerSize);  buffer.order(ByteOrder.LITTLE_ENDIAN);  for (int i=0; i < vocab.size(); ++i) {    out.write(String.format("%s ",vocab.get(i)).getBytes(cs));    vectors.position(i * layerSize);    vectors.get(vector);    buffer.clear();    for (int j=0; j < layerSize; ++j)     buffer.putFloat((float)vector[j]);    out.write(buffer.array());    out.write('\n');  }  out.flush();}  }
class C{  public void putInteger(int i) throws IOException {  write(DerValue.tag_Integer);  putIntegerContents(i);}  }
class C{  public Input(String name,@InputType int type,String alignString,Connection connection){  this(name,type,stringToAlignment(alignString),connection);}  }
class C{  public void reportCompileTimeRatio(int compiler1,int compiler2,double rate){  if (Controller.options.LOGGING_LEVEL >= 1) {    printlnToLogWithTimePrefix("Compile Time Ratio of " + CompilerDNA.getCompilerString(compiler1) + " compiler to "+ CompilerDNA.getCompilerString(compiler2)+ " compiler: "+ rate);  }}  }
class C{  public static String addTags(Object object,String msg,String tagList){  return hashCodeTag(object) + mainThreadTag() + formatTags(tagList)+ " "+ msg;}  }
class C{  @Override public void cleanupPointers(){  maps.cleanupPointers();  maps=null;  if (mapId < 0) {    ReferenceMaps.jsrLock.unlock();  }  bridgeTarget=null;  bridgeParameterTypes=null;}  }
class C{  public K relativeKey(K key,long offset){  K k=offset > 0 ? map.ceilingKey(key) : map.floorKey(key);  if (k == null) {    return k;  }  long index=map.getKeyIndex(k);  return map.getKey(index + offset);}  }
class C{  public void run(){  _setRunning(true);  while (_keepRunning()) {    if (_activityCount() > 0) {      long currentTime=System.currentTimeMillis();      long t=-1;synchronized (this) {        for (int i=0; i < m_activities.size(); i++) {          Activity a=(Activity)m_activities.get(i);          m_tmp.add(a);          if (currentTime >= a.getStopTime()) {            m_activities.remove(i--);            a.setScheduled(false);          }        }        if (m_activities.size() == 0) {          m_nextTime=Long.MAX_VALUE;        }      }      for (int i=0; i < m_tmp.size(); i++) {        Activity a=(Activity)m_tmp.get(i);        long s=a.runActivity(currentTime);        t=(s < 0 ? t : t < 0 ? s : Math.min(t,s));      }      m_tmp.clear();      if (t == -1)       continue;      try {synchronized (this) {          wait(t);        }      } catch (      InterruptedException e) {      }    } else {      try {synchronized (this) {          wait();        }      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public boolean isInitialRangeSet(int scale){  return initialRange.get(scale) != null;}  }
class C{  public static boolean equals(String s1,String s2){  return (s1 == null && s2 == null) || (s1 != null && s2 != null && s1.equals(s2));}  }
class C{  public void testLongValueNegative2(){  byte aBytes[]={-12,56,100,45,-101,45,98};  long result=-3315696807498398L;  long aNumber=new BigInteger(aBytes).longValue();  assertTrue(aNumber == result);}  }
class C{  public boolean hasReminder(){  return super.hasElement(Reminder.KEY);}  }
class C{  public CSaveToFileAction(){  super("Save to file");  putValue(MNEMONIC_KEY,(int)"SaveLogToFileMnemonic".charAt(0));}  }
class C{  public static ReuseResult loadReuseExact(byte[] data,Bitmap dest) throws ImageLoadException {  return loadBitmapReuseExact(new MemorySource(data),dest);}  }
class C{  public static double blackFormulaImpliedStdDev(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@Real final double blackPrice,@DiscountFactor final double discount,@Real final double guess,@Real final double accuracy){  return blackFormulaImpliedStdDev(payoff.optionType(),strike,forward,blackPrice,discount,guess,accuracy,0.0);}  }
class C{  public static boolean timeStampChanged(String location){synchronized (installLock) {    if (fgHasChanged.contains(location)) {      return true;    }    File file=new File(location);    if (file.exists()) {      if (fgInstallTimeMap == null) {        readInstallInfo();      }      Long stamp=fgInstallTimeMap.get(location);      long fstamp=file.lastModified();      if (stamp != null) {        if (stamp.longValue() == fstamp) {          return false;        }      }      stamp=new Long(fstamp);      fgInstallTimeMap.put(location,stamp);      writeInstallInfo();      fgHasChanged.add(location);      return true;    }  }  return false;}  }
class C{  private void populateFromInputStream(InputStream source,HashMap<String,Long> types){  numTokens=Double.NEGATIVE_INFINITY;  for (  String line : new LineReader(source)) {    String[] toks=Regex.spaces.split(line);    if ((toks.length < 2) || (toks.length > ngramOrder + 1))     continue;    int[] ngram=new int[toks.length - 1];    StringBuilder history=new StringBuilder();    for (int i=0; i < toks.length - 1; i++) {      ngram[i]=Vocabulary.id(toks[i]);      if (i < toks.length - 2)       history.append(toks[i]).append(" ");    }    long cnt=Long.parseLong(toks[toks.length - 1]);    add(ngram,cnt,countFuncs);    if (toks.length == 2) {      numTokens=logAdd(numTokens,Math.log(cnt));      continue;    }    if (types.get(history) == null)     types.put(history.toString(),1L); else {      long x=types.get(history);      types.put(history.toString(),x + 1);    }  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private Path createScaledPath(Path path){  PathData p=path.getPathData();  for (int i=0; i < p.points.length; i+=2) {    p.points[i]=(float)(p.points[i] * zoom + fractionalX);    p.points[i + 1]=(float)(p.points[i + 1] * zoom + fractionalY);  }  Path scaledPath=new Path(path.getDevice());  int index=0;  for (int i=0; i < p.types.length; i++) {    byte type=p.types[i];switch (type) {case SWT.PATH_MOVE_TO:      scaledPath.moveTo(p.points[index],p.points[index + 1]);    index+=2;  break;case SWT.PATH_LINE_TO:scaledPath.lineTo(p.points[index],p.points[index + 1]);index+=2;break;case SWT.PATH_CUBIC_TO:scaledPath.cubicTo(p.points[index],p.points[index + 1],p.points[index + 2],p.points[index + 3],p.points[index + 4],p.points[index + 5]);index+=6;break;case SWT.PATH_QUAD_TO:scaledPath.quadTo(p.points[index],p.points[index + 1],p.points[index + 2],p.points[index + 3]);index+=4;break;case SWT.PATH_CLOSE:scaledPath.close();break;}}return scaledPath;}  }
class C{  @Override public void autoFocus(){  if (mCameraDevice != null) {    mCameraDevice.autoFocus(mHandler,mAutoFocusCallback);  }}  }
class C{  public static AsyncOperationStatus createdCompleted(final String seeOther){  final AsyncOperationStatus completedStatus=new AsyncOperationStatus();  completedStatus.seeOther=seeOther;  completedStatus.percentageComplete=100d;  completedStatus.status="Completed";  return completedStatus;}  }
class C{  public synchronized TradeOrder persistTradeOrder(final TradeOrder tradeOrder) throws PersistentModelException {  try {    if (null == tradeOrder.getOrderKey()) {      throw new PersistentModelException("Order key cannot be null.");    }    if (null == tradeOrder.getIdTradeOrder() && null == tradeOrder.getStatus()) {      tradeOrder.setStatus(OrderStatus.UNSUBMIT);    }    if (!tradeOrder.getIsFilled() && CoreUtils.nullSafeComparator(tradeOrder.getQuantity(),tradeOrder.getFilledQuantity()) == 0) {      tradeOrder.setIsFilled(true);      tradeOrder.setStatus(OrderStatus.FILLED);    }    if (OrderStatus.CANCELLED.equals(tradeOrder.getStatus()) && !tradeOrder.getIsFilled() && CoreUtils.nullSafeComparator(tradeOrder.getFilledQuantity(),new Integer(0)) == 1) {      tradeOrder.setIsFilled(true);      tradeOrder.setStatus(OrderStatus.FILLED);    }    Integer tradestrategyId=null;    if (null == tradeOrder.getTradestrategyId()) {      tradestrategyId=tradeOrder.getTradestrategy().getIdTradeStrategy();      tradeOrder.setTradestrategyId(this.findTradestrategyLiteById(tradestrategyId));    } else {      tradestrategyId=tradeOrder.getTradestrategyId().getIdTradeStrategy();    }    TradePosition tradePosition=null;    TradestrategyOrders tradestrategyOrders=null;    if (!tradeOrder.hasTradePosition()) {      if (CoreUtils.nullSafeComparator(tradeOrder.getFilledQuantity(),new Integer(0)) == 1) {        tradestrategyOrders=this.findPositionOrdersByTradestrategyId(tradestrategyId);        if (tradestrategyOrders.hasOpenTradePosition()) {          tradePosition=this.findTradePositionById(tradestrategyOrders.getContract().getTradePosition().getIdTradePosition());          if (!tradePosition.containsTradeOrder(tradeOrder)) {            tradePosition.addTradeOrder(tradeOrder);          }        } else {          ZonedDateTime positionOpenDate=tradeOrder.getFilledDate();          if (null == positionOpenDate) {            positionOpenDate=TradingCalendar.getDateTimeNowMarketTimeZone();          }          tradePosition=new TradePosition(tradestrategyOrders.getContract(),positionOpenDate,(Action.BUY.equals(tradeOrder.getAction()) ? Side.BOT : Side.SLD));          tradeOrder.setIsOpenPosition(true);          tradestrategyOrders.setStatus(TradestrategyStatus.OPEN);          tradestrategyOrders.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());          this.persistAspect(tradestrategyOrders);          tradePosition.addTradeOrder(tradeOrder);          tradePosition=this.persistAspect(tradePosition);        }        tradeOrder.setTradePosition(tradePosition);      } else {        return this.persistAspect(tradeOrder);      }    } else {      tradePosition=this.findTradePositionById(tradeOrder.getTradePosition().getIdTradePosition());      tradeOrder.setTradePosition(tradePosition);    }    boolean allOrdersCancelled=true;    int totalBuyQuantity=0;    int totalSellQuantity=0;    double totalCommission=0;    double totalBuyValue=0;    double totalSellValue=0;    for (    TradeOrder order : tradePosition.getTradeOrders()) {      if (order.getOrderKey().equals(tradeOrder.getOrderKey())) {        order=tradeOrder;      }      if (!OrderStatus.CANCELLED.equals(order.getStatus())) {        allOrdersCancelled=false;      }      if (null != order.getFilledQuantity()) {        if (Action.BUY.equals(order.getAction())) {          totalBuyQuantity=totalBuyQuantity + order.getFilledQuantity();          totalBuyValue=totalBuyValue + (order.getAverageFilledPrice().doubleValue() * order.getFilledQuantity().doubleValue());        } else {          totalSellQuantity=totalSellQuantity + order.getFilledQuantity();          totalSellValue=totalSellValue + (order.getAverageFilledPrice().doubleValue() * order.getFilledQuantity().doubleValue());        }        if (null != order.getCommission()) {          totalCommission=totalCommission + order.getCommission().doubleValue();        }      }    }    Money comms=new Money(totalCommission);    if (CoreUtils.nullSafeComparator(new Integer(totalBuyQuantity),tradePosition.getTotalBuyQuantity()) != 0 || CoreUtils.nullSafeComparator(new Integer(totalSellQuantity),tradePosition.getTotalSellQuantity()) != 0) {      int openQuantity=totalBuyQuantity - totalSellQuantity;      tradePosition.setOpenQuantity(openQuantity);      tradePosition.setTotalBuyQuantity(totalBuyQuantity);      tradePosition.setTotalBuyValue((new BigDecimal(totalBuyValue)).setScale(SCALE_5,BigDecimal.ROUND_HALF_EVEN));      tradePosition.setTotalSellQuantity(totalSellQuantity);      tradePosition.setTotalSellValue((new BigDecimal(totalSellValue)).setScale(SCALE_5,BigDecimal.ROUND_HALF_EVEN));      tradePosition.setTotalNetValue((new BigDecimal(totalSellValue - totalBuyValue)).setScale(SCALE_5,BigDecimal.ROUND_HALF_EVEN));      tradePosition.setTotalCommission(comms.getBigDecimalValue());      if (openQuantity > 0) {        tradePosition.setSide(Side.BOT);      }      if (openQuantity < 0) {        tradePosition.setSide(Side.SLD);      }      if (tradePosition.equals(tradePosition.getContract().getTradePosition())) {        if (openQuantity == 0) {          tradePosition.setPositionCloseDate(tradeOrder.getFilledDate());          tradePosition.getContract().setTradePosition(null);          this.persistAspect(tradePosition.getContract());        }      } else {        tradePosition.getContract().setTradePosition(tradePosition);        this.persistAspect(tradePosition.getContract());      }      if (null == tradestrategyOrders) {        tradestrategyOrders=this.findPositionOrdersByTradestrategyId(tradestrategyId);      }      if (!tradePosition.isOpen() && !TradestrategyStatus.CLOSED.equals(tradestrategyOrders.getStatus())) {        for (        TradeOrder item : tradePosition.getTradeOrders()) {          if (!item.getTradestrategyId().getIdTradeStrategy().equals(tradestrategyOrders.getIdTradeStrategy())) {            item.getTradestrategyId().setStatus(TradestrategyStatus.CLOSED);            item.getTradestrategyId().setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());            this.persistAspect(item.getTradestrategyId());          }        }        tradestrategyOrders.setStatus(TradestrategyStatus.CLOSED);        tradestrategyOrders.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());        this.persistAspect(tradestrategyOrders);      }      tradePosition.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());      tradePosition=this.persistAspect(tradePosition);    } else {      if (allOrdersCancelled) {        if (null == tradestrategyOrders) {          tradestrategyOrders=this.findPositionOrdersByTradestrategyId(tradestrategyId);        }        if (!TradestrategyStatus.CANCELLED.equals(tradestrategyOrders.getStatus())) {          if (null == tradestrategyOrders.getStatus()) {            tradestrategyOrders.setStatus(TradestrategyStatus.CANCELLED);            tradestrategyOrders.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());            this.persistAspect(tradestrategyOrders);          }        }      }      if (CoreUtils.nullSafeComparator(comms.getBigDecimalValue(),tradePosition.getTotalCommission()) == 1) {        tradePosition.setTotalCommission(comms.getBigDecimalValue());        tradePosition.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());        tradePosition=this.persistAspect(tradePosition);      }    }    return this.persistAspect(tradeOrder);  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error saving TradeOrder please refresh before save.");  }catch (  Exception e) {    throw new PersistentModelException("Error saving TradeOrder: " + tradeOrder.getOrderKey() + "\n Msg: "+ e.getMessage());  }}  }
class C{  public static boolean cleanup(HttpSession session){  if (session == null) {    return false;  }  List<Long> list=null;  Map<?,?> map=(Map<?,?>)session.getAttribute(Constants.SESS_ATTR_ACTIVE_SUB_MAP);  if (map != null) {synchronized (map) {      SessionService service=ServiceAccess.getServiceAcccessFor(session).getService(SessionService.class);      list=service.getSubscriptionKeysForSessionId(session.getId());      if (list == null || list.isEmpty()) {        map.clear();      } else {        for (Iterator<?> it=map.keySet().iterator(); it.hasNext(); ) {          String subKey=(String)it.next();          boolean found=false;          for (          Long subTkey : list) {            if (subTkey != null && Long.toHexString(subTkey.longValue()).equals(subKey)) {              found=true;              break;            }          }          if (!found) {            it.remove();          }        }      }    }  }  if (session.getAttribute(Constants.SESS_ATTR_USER) == null) {    if (list == null || list.isEmpty()) {      session.invalidate();      return false;    }  }  return true;}  }
class C{  @Override public synchronized void updateCharacterStream(int columnIndex,java.io.Reader x,int length) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setCharacterStream(columnIndex,x,length);  } else {    this.inserter.setCharacterStream(columnIndex,x,length);    if (x == null) {      this.thisRow.setColumnValue(columnIndex - 1,null);    } else {      this.thisRow.setColumnValue(columnIndex - 1,STREAM_DATA_MARKER);    }  }}  }
class C{  public Builder keyAlgorithms(String... keyAlgorithms){  this.keyAlgorithms=keyAlgorithms;  return this;}  }
class C{  @Override public NativePooledByteBuffer toByteBuffer(){  ensureValid();  return new NativePooledByteBuffer(mBufRef,mCount);}  }
class C{  private void arcTo(RectF oval,float startAngle,float sweepAngle,boolean forceMoveTo){  Arc2D arc=new Arc2D.Float(oval.left,oval.top,oval.width(),oval.height(),-startAngle,-sweepAngle,Arc2D.OPEN);  mPath.append(arc,true);  resetLastPointFromPath();}  }
class C{  public void keyReleased(KeyEvent e){  if (e.isAltDown() && e.getKeyCode() == NEXT_THROTTLE_KEY) {    log.debug("next");    nextThrottleFrame();  } else   if (e.isAltDown() && e.getKeyCode() == PREV_THROTTLE_KEY) {    log.debug("previous");    previousThrottleFrame();  }}  }
class C{  private int calcTotalAttempts(ArrayList<Delay> delayList){  int sum=0;  for (  Delay delay : delayList) {    sum+=delay.getAttempts();  }  return sum;}  }
class C{  public Source<Integer> allPositive(){  return between(1,Integer.MAX_VALUE);}  }
class C{  private static void formatNames(Iterable<List<String>> names){  if (names != null) {    for (    List<String> list : names) {      String name=list.get(0);      String[] components=new String[5];      int start=0;      int end;      int componentIndex=0;      while (componentIndex < components.length - 1 && (end=name.indexOf(';',start)) > 0) {        components[componentIndex]=name.substring(start,end);        componentIndex++;        start=end + 1;      }      components[componentIndex]=name.substring(start);      StringBuilder newName=new StringBuilder(100);      maybeAppendComponent(components,3,newName);      maybeAppendComponent(components,1,newName);      maybeAppendComponent(components,2,newName);      maybeAppendComponent(components,0,newName);      maybeAppendComponent(components,4,newName);      list.set(0,newName.toString().trim());    }  }}  }
class C{  public static Word fromIntSignExtend(int val){  return new Word(val);}  }
class C{  public GradientDrawable(Orientation orientation,int[] colors){  this(new GradientState(orientation,colors));}  }
class C{  public DataModelPipeline(Regressor baseRegressor,DataTransformProcess dtp){  this.baseDtp=dtp;  this.baseRegressor=baseRegressor;  if (baseRegressor instanceof Classifier)   this.baseClassifier=(Classifier)baseRegressor;}  }
class C{  public void disconnect(){  delegate.disconnect();}  }
class C{  public StopWatch(){  this.id="";}  }
class C{  public static void uiImpl(){  UIManager.put("Viewport.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("Viewport.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("ScrollPane.border",new BorderUIResource(new org.jb2011.lnf.beautyeye.ch4_scroll.ScrollPaneBorder()));  UIManager.put("ScrollPane.background",new ColorUIResource(Color.white));  UIManager.put("ScrollPane.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("ScrollPaneUI",org.jb2011.lnf.beautyeye.ch4_scroll.BEScrollPaneUI.class.getName());  UIManager.put("ScrollBar.thumb",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ScrollBar.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("ScrollBar.background",new ColorUIResource(new Color(250,250,250)));  UIManager.put("ScrollBar.trackForeground",new ColorUIResource(new Color(250,250,250)));  UIManager.put("scrollbar",new ColorUIResource(new Color(250,250,250)));  UIManager.put("ScrollBarUI",org.jb2011.lnf.beautyeye.ch4_scroll.BEScrollBarUI.class.getName());}  }
class C{  protected Object resolveWrapper(VariableWrapper variableWrapper,Locale locale,TimeZone tz){  return variableWrapper.resolve();}  }
class C{  public DatabaseConnectionDialog(Frame parentFrame,String url,String uname,boolean debug){  super(parentFrame,"Database Connection Parameters",true);  DbConnectionDialog(url,uname,debug);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:51:00.129 -0400",hash_original_method="B49C6B2E83F2DCB55E37911881CD4AF6",hash_generated_method="9235383EF0F54745C5E594F02936B401") public PageRange(int start,int end){  if (start < 0) {    throw new IllegalArgumentException("start cannot be less than zero.");  }  if (end < 0) {    throw new IllegalArgumentException("end cannot be less than zero.");  }  if (start > end) {    throw new IllegalArgumentException("start must be lesser than end.");  }  mStart=start;  mEnd=end;}  }
class C{  public WeatherEntity(){  setRPClass("weather_entity");  thunderer=new Thunderer();  setResistance(0);}  }
class C{  protected void printResponse(final String command,final List<String> output,final List<String> errors){  ensureViewOpened();  if (command != null) {    printCommand(command);  }  if (output != null) {    for (    final String line : output) {      boolean found=false;      if (!line.trim().isEmpty()) {        String prefix=line.trim().substring(0,1);        for (        String[] stcol : STATUS_COLORS) {          if (stcol[0].equals(prefix)) {            console.print("<span style=\"color:" + stcol[1] + ";\">"+ SafeHtmlUtils.htmlEscape(line)+ "</span>");            found=true;            break;          }        }      }      if (!found) {        console.print(SafeHtmlUtils.htmlEscape(line));      }    }  }  if (errors != null) {    for (    final String line : errors) {      console.print("<span style=\"color:red;\">" + SafeHtmlUtils.htmlEscape(line) + "</span>");    }  }  console.print("");}  }
class C{  public static Bitmap applyColor(Bitmap bitmap,int tintColor){  int r=Color.red(tintColor);  int g=Color.green(tintColor);  int b=Color.blue(tintColor);  int width=bitmap.getWidth();  int height=bitmap.getHeight();  int[] pixels=new int[width * height];  bitmap.getPixels(pixels,0,width,0,0,width,height);  for (int i=0; i < pixels.length; i++) {    int color=pixels[i];    int alpha=Color.alpha(color);    pixels[i]=Color.argb(alpha,r,g,b);  }  return Bitmap.createBitmap(pixels,width,height,Bitmap.Config.ARGB_8888);}  }
class C{  @Override public Publisher<Payload> requestResponse(final Payload payload){  assertRequester();  return requester.requestResponse(payload);}  }
class C{  public GestionPrevisionesBI lookupGestionPrevisionesBI(){  IDBEntityFactory dbEntityFactory=DBEntityFactory.getInstance(serviceClient.getDBFactoryClass());  IServiceBase service=new GestionPrevisionesBIImpl(dbEntityFactory.getPrevisionDBEntity(serviceSession.getTransactionManager()),dbEntityFactory.getArchivoDbEntity(serviceSession.getTransactionManager()),dbEntityFactory.getNSecDBEntity(serviceSession.getTransactionManager()),dbEntityFactory.getDetallePrevisionDBEntity(serviceSession.getTransactionManager()),dbEntityFactory.getRelacionDBEntity(serviceSession.getTransactionManager()),dbEntityFactory.getProductorSerieDBEntity(serviceSession.getTransactionManager()),dbEntityFactory.getOrganoProductorDBEntity(serviceSession.getTransactionManager()),dbEntityFactory.getSerieDBEntity(serviceSession.getTransactionManager()));  service.attachToSession(this.serviceSession);  service.setSecurityManager(SecurityManagerLocator.loockupTransferenciasSM());  return (GestionPrevisionesBI)configureService(GestionPrevisionesBI.class,service);}  }
class C{  @RequestMapping(value="/container/{containerId}/application/{applicationName}",method=RequestMethod.POST,consumes={"multipart/form-data"}) @ResponseBody @ResponseStatus(HttpStatus.OK) public JsonResponse uploadFile(@PathVariable final String applicationName,@RequestPart("file") MultipartFile fileUpload,@PathVariable final String containerId,@RequestParam("path") String path,HttpServletRequest request,HttpServletResponse response) throws IOException, ServiceException, CheckException {  if (logger.isDebugEnabled()) {    logger.debug("-- CALL UPLOAD FILE TO CONTAINER FS --");    logger.debug("applicationName = " + applicationName);    logger.debug("containerId = " + containerId);    logger.debug("pathFile = " + path);  }  User user=authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  this.authentificationUtils.canStartNewAction(user,application,locale);  try {    applicationService.setStatus(application,Status.PENDING);    fileService.sendFileToContainer(containerId,path,fileUpload,null,null);  }  finally {    applicationService.setStatus(application,Status.START);  }  return new HttpOk();}  }
class C{  public boolean certifiedValue(int timestamp,byte[] value,HashSet<CollectData> collects){  if (collects == null || value == null)   return false;  boolean certified=false;  int count=0;  for (  CollectData c : collects) {    for (    TimestampValuePair pv : c.getWriteSet()) {      if (pv.getTimestamp() >= timestamp && Arrays.equals(value,pv.getHashedValue()))       count++;    }  }  if (SVController.getStaticConf().isBFT()) {    certified=count > SVController.getCurrentViewF();  } else {    certified=count > 0;  }  if (certified)   bftsmart.tom.util.Logger.println("(LCManager.certifiedValue) timestamp/value pair (" + timestamp + " , "+ Arrays.toString(value)+ ") has been written by at least "+ count+ " replica(s)");  return certified;}  }
class C{  private void addLineMouseListener(Waypoint wp,Polyline p){  if (wp != null) {    System.out.println("Adding listener for waypoint: " + wp.getMarker().getMarkerOptions().getIcon());    addObjectEventHandler((MapObject)p,MapEventType.RIGHTCLICK,null);  }}  }
class C{  public BerInputStream(byte[] encoded) throws IOException {  this(encoded,0,encoded.length);}  }
class C{  private static void dumpRow(PrintData pd,int row){  log.info("Row #" + row);  if (row < 0 || row >= pd.getRowCount()) {    log.warning("- invalid -");    return;  }  pd.setRowIndex(row);  if (pd.getNodeCount() == 0) {    log.config("- n/a -");    return;  }  for (int i=0; i < pd.getNodeCount(); i++) {    Object obj=pd.getNode(i);    if (obj == null)     log.config("- NULL -"); else     if (obj instanceof PrintData) {      log.config("- included -");      dump((PrintData)obj);    } else     if (obj instanceof PrintDataElement) {      log.config(((PrintDataElement)obj).toStringX());    } else     log.config("- INVALID: " + obj);  }}  }
class C{  public static ExtensionRegistryLite newInstance(){  return new ExtensionRegistryLite();}  }
class C{  public static BecomePrimaryBucketResponse send(InternalDistributedMember recipient,PartitionedRegion pr,int bid,boolean isRebalance){  Assert.assertTrue(recipient != null,"BecomePrimaryBucketMessage NULL recipient");  BecomePrimaryBucketResponse response=new BecomePrimaryBucketResponse(pr.getSystem(),recipient,pr);  BecomePrimaryBucketMessage msg=new BecomePrimaryBucketMessage(recipient,pr.getPRId(),response,bid,isRebalance);  Set<InternalDistributedMember> failures=pr.getDistributionManager().putOutgoing(msg);  if (failures != null && failures.size() > 0) {    return null;  }  pr.getPrStats().incPartitionMessagesSent();  return response;}  }
class C{  public static Ignite start(@Nullable String springCfgPath,@Nullable String gridName) throws IgniteCheckedException {  if (springCfgPath == null) {    IgniteConfiguration cfg=new IgniteConfiguration();    if (cfg.getGridName() == null && !F.isEmpty(gridName))     cfg.setGridName(gridName);    return start(cfg);  } else   return start(springCfgPath,gridName,null,null);}  }
class C{  public int lineno(){  return LINENO;}  }
class C{  private MathUtilities(){}  }
class C{  public AsyncRunner(FilterContext context){  super(context);  mSchedulerClass=SimpleScheduler.class;  mLogVerbose=Log.isLoggable(TAG,Log.VERBOSE);}  }
class C{  protected Angle computeCenterSectorAngle(Angle finalLeftAzimuth,Angle finalRightAzimuth){  return finalLeftAzimuth.add(finalRightAzimuth).divide(2.0);}  }
class C{  protected void processSelectors(List<Node> results,List<CssSelector> selectors){  List<Node> selectedNodes=select(rootNode,selectors);  for (  Node selectedNode : selectedNodes) {    if (!results.contains(selectedNode)) {      results.add(selectedNode);    }  }}  }
class C{  public static void main(String... a) throws Exception {  System.setProperty("h2.check2","true");  TestBase.createCaller().init().test();}  }
class C{  public void addSavepoint(String name){  if (savepoints == null) {    savepoints=database.newStringMap();  }  Savepoint sp=new Savepoint();  savepoints.put(name,sp);}  }
class C{  protected void indentOut(){  currentIndent-=indentStep;  if (currentIndent < 0)   currentIndent=0;}  }
class C{  public void handlePotentialCommitFailure(HashMap<InternalDistributedMember,RegionCommitList> msgMap){  if (fatalExceptions.size() > 0) {    StringBuffer errorMessage=new StringBuffer("Incomplete commit of transaction ").append(id).append(".  Caused by the following exceptions: ");    for (Iterator i=fatalExceptions.entrySet().iterator(); i.hasNext(); ) {      Map.Entry me=(Map.Entry)i.next();      DistributedMember mem=(DistributedMember)me.getKey();      errorMessage.append(" From member: ").append(mem).append(" ");      List exceptions=(List)me.getValue();      for (Iterator ei=exceptions.iterator(); ei.hasNext(); ) {        Exception e=(Exception)ei.next();        errorMessage.append(e);        for (        StackTraceElement ste : e.getStackTrace()) {          errorMessage.append("\n\tat ").append(ste);        }        if (ei.hasNext()) {          errorMessage.append("\nAND\n");        }      }      errorMessage.append(".");    }    throw new CommitIncompleteException(errorMessage.toString());  }  handleClosedMembers(msgMap);  handleRegionDestroyed(msgMap);}  }
class C{  private void createGui(final List<INaviView> views){  setLayout(new BorderLayout());  final JTextArea field=new JTextArea("The debugger stopped at an instruction that does not belong to any open graphs.\nPlease select a graph from the list to continue debugging.");  field.setEditable(false);  add(field,BorderLayout.NORTH);  m_table=new JTable(new CGraphSelectionTableModel(views));  m_table.addMouseListener(m_listener);  add(new JScrollPane(m_table),BorderLayout.CENTER);  final CPanelTwoButtons panel=new CPanelTwoButtons(m_listener,"OK","Cancel");  add(panel,BorderLayout.SOUTH);  setSize(500,300);}  }
class C{  public void clear(){  modCount++;  HashEntry[] data=this.data;  for (int i=data.length - 1; i >= 0; i--) {    data[i]=null;  }  size=0;}  }
class C{  public static Mapper<Integer> singleInteger(){  return singleInteger;}  }
class C{  public PaymentResponse sendMany(Map<String,Long> recipients,String fromAddress,Long fee,String note) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  String method;  if (recipients.size() == 1) {    method="payment";    Entry<String,Long> e=recipients.entrySet().iterator().next();    params.put("to",e.getKey());    params.put("amount",e.getValue().toString());  } else {    method="sendmany";    params.put("recipients",new Gson().toJson(recipients));  }  if (fromAddress != null) {    params.put("from",fromAddress);  }  if (fee != null) {    params.put("fee",fee.toString());  }  if (note != null) {    params.put("note",note);  }  String response=HttpClient.getInstance().post(String.format("merchant/%s/%s",identifier,method),params);  JsonObject topElem=parseResponse(response);  return new PaymentResponse(topElem.get("message").getAsString(),topElem.get("tx_hash").getAsString(),topElem.has("notice") ? topElem.get("notice").getAsString() : null);}  }
class C{  public boolean isVisiting(long time){  if (mCursor.isAfterLast()) {    return false;  }  return time >= mCursor.getLong(mCursor.getColumnIndex(COLUMN_NAME_ARRIVAL)) && time <= mCursor.getLong(mCursor.getColumnIndex(COLUMN_NAME_DEPARTURE));}  }
class C{  public IntVector crossProduct(IntVector v){  int px=y * v.z - v.z * y;  int py=z * v.x - x * v.z;  int pz=x * v.y - y * v.x;  return new IntVector(px,py,pz);}  }
class C{  public boolean acceptsURL(String url) throws SQLException {  if (url == null) {    throw SQLError.createSQLException(Messages.getString("NonRegisteringDriver.1"),SQLError.SQL_STATE_UNABLE_TO_CONNECT_TO_DATASOURCE,null);  }  return (parseURL(url,null) != null);}  }
class C{  public StatusChangeNotification clone(){  StatusChangeNotification result=new StatusChangeNotification();  result.Status=Status;  result.DiagnosticInfo=DiagnosticInfo;  return result;}  }
class C{  public Constraint verticalSpan(int span){  setVerticalSpan(span);  return this;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private void parseMaterialProperties(String line){  int colonIdx=line.indexOf(":");  if (colonIdx != -1) {    line=line.replaceFirst("Material","");    line=line.replace("{","");    String[] lines=line.split(":");    setName(lines[0].trim());    setMatDefName(lines[1].trim());  }}  }
class C{  public int compareTo(Vector3 o){  return Vector3.compareTo(this,o);}  }
class C{  public DoubleSparseArrayDataRow(){  this(0);}  }
class C{  public void clearTestProviderLocation(String provider){  try {    mService.clearTestProviderLocation(provider);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException",e);  }}  }
class C{  public static void execute(String url,String user,String password,String fileName,Charset charset,boolean continueOnError) throws SQLException {  new RunScript().process(url,user,password,fileName,charset,continueOnError);}  }
class C{  public void testCopy() throws Exception {  String fileName="file";  String fileContents="helloworld";  File file1=createFile(configFileDirectory,fileName,fileContents);  FileConfig configFile=new FileConfig();  configFile.setFile(getAbsolutePath(file1));  testCopy(configFile,fileName,fileContents);  configFile.setToFile("file1");  testCopy(configFile,"file1",fileContents);  configFile.setToFile("dir1/file2");  testCopy(configFile,"dir1/file2",fileContents);  configFile.setToFile(null);  configFile.setToDir("dir2");  testCopy(configFile,"dir2/file",fileContents);  configFile.setToFile("file3");  configFile.setToDir("dir3");  testCopy(configFile,"dir3/file3",fileContents);  configFile.setToFile("/dir4/file4");  configFile.setToDir("/dir5");  testCopy(configFile,"dir5/dir4/file4",fileContents);}  }
class C{  private static void queryPortfolioEntry(FinanceService service,String entryUrl) throws IOException, MalformedURLException, ServiceException {  System.out.println("Requesting Entry at location: " + entryUrl);  PortfolioEntry portfolioEntry=service.getEntry(new URL(entryUrl),PortfolioEntry.class);  printPortfolioEntry(portfolioEntry);}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {  OutHeader outHeader=outHttp.getOutHeader();  int streamId=streamId(outHttp);  outHeader.openHeaders(streamId,getPad(),getPriorityDependency(),getPriorityWeight(),isPriorityExclusive(),getFlagsHttp());  writeHeaders(outHeader);  outHeader.closeHeaders();}  }
class C{  public static String toString(long x){  return toString(x,10);}  }
class C{  public void ReInit(CharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public void testPlusPositive(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String c="92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.plus());}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,screenResolution);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  public HibernatePersistentCollectionConverter(final Mapper mapper){  super(mapper);}  }
class C{  private boolean checkMatch(InventoryCrafting matrix,int x,int y,boolean mirrored){  for (int k=0; k < 9; ++k) {    for (int l=0; l < 9; ++l) {      int i1=k - x;      int j1=l - y;      ItemStack itemstack=null;      if (i1 >= 0 && j1 >= 0 && i1 < this.recipeWidth && j1 < this.recipeHeight) {        if (mirrored) {          itemstack=this.recipeItems[this.recipeWidth - i1 - 1 + j1 * this.recipeWidth];        } else {          itemstack=this.recipeItems[i1 + j1 * this.recipeWidth];        }      }      ItemStack itemstack1=matrix.getStackInRowAndColumn(k,l);      if (itemstack1 != null || itemstack != null) {        if (itemstack1 == null && itemstack != null || itemstack1 != null && itemstack == null) {          return false;        }        if (itemstack.getItem() != itemstack1.getItem()) {          return false;        }        if (itemstack.getItemDamage() != 32767 && itemstack.getItemDamage() != itemstack1.getItemDamage()) {          return false;        }      }    }  }  return true;}  }
class C{  public TriGWriter(Writer writer){  super(writer);}  }
class C{  public boolean isAutoAcceptModeChangeable() throws RcsGenericException {  try {    return mIFtServiceConfig.isAutoAcceptModeChangeable();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public void updateRow(Value[] current,Value[] updateRow) throws SQLException {  StatementBuilder buff=new StatementBuilder("UPDATE ");  appendTableName(buff);  buff.append(" SET ");  appendColumnList(buff,true);  appendKeyCondition(buff);  PreparedStatement prep=conn.prepareStatement(buff.toString());  int j=1;  for (int i=0; i < columnCount; i++) {    Value v=updateRow[i];    if (v == null) {      v=current[i];    }    v.set(prep,j++);  }  setKey(prep,j,current);  int count=prep.executeUpdate();  if (count != 1) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }}  }
class C{  @Override protected void emit_lxor(){  if (VM.BuildFor32Addr) {    asm.emitPOP_Reg(T0);    asm.emitPOP_Reg(S0);    asm.emitXOR_RegInd_Reg(SP,T0);    asm.emitXOR_RegDisp_Reg(SP,ONE_SLOT,S0);  } else {    asm.emitPOP_Reg(T0);    asm.emitPOP_Reg(S0);    asm.emitXOR_RegInd_Reg_Quad(SP,T0);  }}  }
class C{  public void removeLast(){  if (hlist.size() != 0)   hlist.remove(hlist.size() - 1);}  }
class C{  public Vector2f mul(Vector2fc v){  x*=v.x();  y*=v.y();  return this;}  }
class C{  @Override void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if (length != 8) {    throw new StunException("Length mismatch!");  }  reservationToken=new byte[8];  System.arraycopy(attributeValue,offset,reservationToken,0,8);}  }
class C{  private void appendInitialEntries(){  final long term=context.getTerm();  try (InitializeEntry entry=context.getLog().create(InitializeEntry.class)){    entry.setTerm(term).setTimestamp(appender.time());    assert context.getLog().append(entry) == appender.index();    LOGGER.debug("{} - Appended {}",context.getCluster().member().address(),entry);  }   configure(context.getCluster().members());}  }
class C{  public void findAndUndo(Object obj){}  }
class C{  public UploadSingleInitiationRequest createUploadSingleInitiationRequest(String sourceNamespaceCode,String sourceBusinessObjectDefinitionName,String sourceBusinessObjectFormatUsage,String sourceBusinessObjectFormatFileType,Integer sourceBusinessObjectFormatVersion,String targetNamespaceCode,String targetBusinessObjectDefinitionName,String targetBusinessObjectFormatUsage,String targetBusinessObjectFormatFileType,Integer targetBusinessObjectFormatVersion){  return createUploadSingleInitiationRequest(sourceNamespaceCode,sourceBusinessObjectDefinitionName,sourceBusinessObjectFormatUsage,sourceBusinessObjectFormatFileType,sourceBusinessObjectFormatVersion,targetNamespaceCode,targetBusinessObjectDefinitionName,targetBusinessObjectFormatUsage,targetBusinessObjectFormatFileType,targetBusinessObjectFormatVersion,AbstractServiceTest.FILE_NAME);}  }
class C{  protected void buildExceptionalEdges(Map unitToSuccs,Map unitToPreds){  for (Iterator trapIt=body.getTraps().iterator(); trapIt.hasNext(); ) {    Trap trap=(Trap)trapIt.next();    Unit first=trap.getBeginUnit();    Unit last=(Unit)unitChain.getPredOf(trap.getEndUnit());    Unit catcher=trap.getHandlerUnit();    for (Iterator unitIt=unitChain.iterator(first,last); unitIt.hasNext(); ) {      Unit trapped=(Unit)unitIt.next();      addEdge(unitToSuccs,unitToPreds,trapped,catcher);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.879 -0500",hash_original_method="6DA3793B1F4C3B72942152784A23C545",hash_generated_method="A66B37B2F23E2B67959A8F5C71554A72") public ComposeShader(Shader shaderA,Shader shaderB,PorterDuff.Mode mode){  mShaderA=shaderA;  mShaderB=shaderB;  native_instance=nativeCreate2(shaderA.native_instance,shaderB.native_instance,mode.nativeInt);  native_shader=nativePostCreate2(native_instance,shaderA.native_shader,shaderB.native_shader,mode.nativeInt);}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public static boolean isTransient(int mod){  return Modifier.isTransient(mod);}  }
class C{  public TypefaceCollection create(){  if (mDefaultTypeface == null) {    throw new IllegalStateException("At least one typeface style have to be set!");  }  if (mCollection.mTypefaces.get(Typeface.NORMAL) == null) {    mCollection.mTypefaces.put(Typeface.NORMAL,mDefaultTypeface);  }  if (mCollection.mTypefaces.get(Typeface.BOLD) == null) {    mCollection.mTypefaces.put(Typeface.BOLD,mDefaultTypeface);  }  if (mCollection.mTypefaces.get(Typeface.ITALIC) == null) {    mCollection.mTypefaces.put(Typeface.ITALIC,mDefaultTypeface);  }  if (mCollection.mTypefaces.get(Typeface.BOLD_ITALIC) == null) {    mCollection.mTypefaces.put(Typeface.BOLD_ITALIC,mDefaultTypeface);  }  TypefaceCollection collection=mCollection;  mCollection=null;  return collection;}  }
class C{  public String generate(){  return name().toLowerCase();}  }
class C{  private JToggleButton constructButton(ButtonInfo buttonInfo){  String imagePrefix=buttonInfo.getImagePrefix();  if (imagePrefix == null) {    throw new NullPointerException("Image prefix must not be null.");  }  JToggleButton button=new JToggleButton();  if ("Select".equals(buttonInfo.getNodeTypeName())) {    button.setIcon(new ImageIcon(ImageUtils.getImage(this,"move.gif")));  } else {    button.setName(buttonInfo.getNodeTypeName());    button.setText("<html><center>" + buttonInfo.getDisplayName() + "</center></html>");  }  button.setMaximumSize(new Dimension(100,40));  button.setToolTipText(buttonInfo.getToolTipText());  this.nodeTypes.put(button,buttonInfo.getNodeTypeName());  return button;}  }
class C{  @Override public void onReceivedHttpAuthRequest(WebView view,HttpAuthHandler handler,String host,String realm){  PluginManager pluginManager=null;  try {    Method gpm=webView.getClass().getMethod("getPluginManager");    pluginManager=(PluginManager)gpm.invoke(webView);  } catch (  NoSuchMethodException e) {  }catch (  IllegalAccessException e) {  }catch (  InvocationTargetException e) {  }  if (pluginManager == null) {    try {      Field pmf=webView.getClass().getField("pluginManager");      pluginManager=(PluginManager)pmf.get(webView);    } catch (    NoSuchFieldException e) {    }catch (    IllegalAccessException e) {    }  }  if (pluginManager != null && pluginManager.onReceivedHttpAuthRequest(webView,new CordovaHttpAuthHandler(handler),host,realm)) {    return;  }  super.onReceivedHttpAuthRequest(view,handler,host,realm);}  }
class C{  public static void main(String[] args){  runFilter(new PrincipalComponents(),args);}  }
class C{  PlainClient(String authorizationID,String authenticationID,byte[] pw) throws SaslException {  if (authenticationID == null || pw == null) {    throw new SaslException("PLAIN: authorization ID and password must be specified");  }  this.authorizationID=authorizationID;  this.authenticationID=authenticationID;  this.pw=pw;}  }
class C{  public static short invElem(short x){  if (x == 0) {    return 0;  }  return (exps[255 - logs[x]]);}  }
class C{  public void logInfo(String message){  LogUtils.log(log,IStatus.INFO,IStatus.OK,message,null);}  }
class C{  public DtoEtypeServiceImpl(final EtypeService etypeService,final DtoFactory dtoFactory,final AdaptersRepository adaptersRepository){  super(dtoFactory,etypeService,adaptersRepository);}  }
class C{  public static void main(String args[]){  if (args.length < 1) {    System.out.println("XBMFile:  Need a path/filename");    System.exit(0);  }  System.out.println("XBMFile: " + args[0]);  XBMFile xbm=new XBMFile(args[0]);  xbm.printout();}  }
class C{  public CloudSqlDao(final String url) throws SQLException {  dataSource.setUrl(url);  final String createTableSql="CREATE TABLE IF NOT EXISTS books3 ( id INT NOT NULL " + "AUTO_INCREMENT, author VARCHAR(255), createdBy VARCHAR(255), createdById VARCHAR(255), " + "description VARCHAR(255), publishedDate VARCHAR(255), title VARCHAR(255), imageUrl "+ "VARCHAR(255), PRIMARY KEY (id))";  try (Connection conn=dataSource.getConnection()){    conn.createStatement().executeUpdate(createTableSql);  } }  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y, z;  int progress;  int i, n;  double[][] vertices=null;  int pointNum=0;  int numPoints=0;  int numFeatures;  int oneHundredthTotal;  double neighbourhoodRadius;  ShapeType shapeType, outputShapeType;  List<KdTree.Entry<Double>> results;  double[] entry;  double nodeGapThreshold=5;  int[] parts={0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  neighbourhoodRadius=Double.parseDouble(args[2]);  nodeGapThreshold=Integer.parseInt(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POLYLINE;    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("VALUE");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(4);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      vertices=record.getGeometry().getPoints();      numPoints=vertices.length;      KdTree<Double> pointsTree=new KdTree.SqrEuclid(2,new Integer(numPoints));      for (i=0; i < numPoints; i++) {        x=vertices[i][0];        y=vertices[i][1];        entry=new double[]{y,x};        z=i;        pointsTree.addPoint(entry,z);      }      ArrayList<ShapefilePoint> pnts=new ArrayList<>();      int lineLength=0;      for (i=0; i < numPoints; i++) {        x=vertices[i][0];        y=vertices[i][1];        entry=new double[]{y,x};        results=pointsTree.neighborsWithinRange(entry,neighbourhoodRadius);        double maxVal=0;        double minVal=numPoints;        double range=0;        double j;        double[] values=new double[results.size()];        int k=0;        for (        KdTree.Entry entry2 : results) {          j=(double)entry2.value;          values[k]=j;          k++;          if (j > maxVal) {            maxVal=j;          }          if (j < minVal) {            minVal=j;          }        }        range=maxVal - minVal;        if (range == numPoints - 1) {          maxVal=0;          minVal=numPoints;          values=new double[results.size()];          k=0;          for (          KdTree.Entry entry2 : results) {            j=(double)entry2.value;            if (j < numPoints / 2) {              j+=numPoints;            }            if (j > maxVal) {              maxVal=j;            }            if (j < minVal) {              minVal=j;            }            values[k]=j;            k++;          }          range=maxVal - minVal;        }        Arrays.sort(values);        double maxGap=0;        for (int a=1; a < k; a++) {          if (values[a] - values[a - 1] > maxGap) {            maxGap=values[a] - values[a - 1];          }        }        if (maxGap >= nodeGapThreshold) {          pnts.add(new ShapefilePoint(x,y));          lineLength++;          if (i == numPoints - 1) {            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbPoly=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            Object[] rowData=new Object[1];            rowData[0]=new Double(recordNum);            output.addRecord(wbPoly,rowData);            pnts.clear();            lineLength=0;          }        } else         if (lineLength > 1) {          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbPoly=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          Object[] rowData=new Object[1];          rowData[0]=new Double(recordNum);          output.addRecord(wbPoly,rowData);          pnts.clear();          lineLength=0;        } else {          pnts.clear();          lineLength=0;        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress(progress);      }    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void requestQuit(){  if (client.getConnectionState() || !offline) {    quitDialog.requestQuit(this.lastuser);  } else {    System.exit(0);  }}  }
class C{  private List<BigtableSource> splitKeyRangeIntoBundleSizedSubranges(long sampleSizeBytes,long desiredBundleSizeBytes,ByteKeyRange range){  logger.debug("Subsplit for sampleSizeBytes {} and desiredBundleSizeBytes {}",sampleSizeBytes,desiredBundleSizeBytes);  if (sampleSizeBytes <= desiredBundleSizeBytes) {    return Collections.singletonList(this.withStartKey(range.getStartKey()).withEndKey(range.getEndKey()));  }  checkArgument(sampleSizeBytes > 0,"Sample size %s bytes must be greater than 0.",sampleSizeBytes);  checkArgument(desiredBundleSizeBytes > 0,"Desired bundle size %s bytes must be greater than 0.",desiredBundleSizeBytes);  int splitCount=(int)Math.ceil(((double)sampleSizeBytes) / (desiredBundleSizeBytes));  List<ByteKey> splitKeys=range.split(splitCount);  ImmutableList.Builder<BigtableSource> splits=ImmutableList.builder();  Iterator<ByteKey> keys=splitKeys.iterator();  ByteKey prev=keys.next();  while (keys.hasNext()) {    ByteKey next=keys.next();    splits.add(this.withStartKey(prev).withEndKey(next).withEstimatedSizeBytes(sampleSizeBytes / splitCount));    prev=next;  }  return splits.build();}  }
class C{  public static void fd(String filePath,Object... msg){  if (LuaViewConfig.isDebug()) {    toFile(filePath,msg);  }}  }
class C{  public void replyToMessage(Message srcMsg,int what,int arg1){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  replyToMessage(srcMsg,msg);}  }
class C{  public JavaPairRDD<Envelope,HashSet<Envelope>> SpatialJoinQuery(RectangleRDD objectRDD,RectangleRDD rectangleRDD){  if (objectRDD.gridRectangleRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  JavaPairRDD<Integer,Tuple2<Iterable<Envelope>,Iterable<Envelope>>> cogroupResult=objectRDD.gridRectangleRDD.cogroup(this.rectangleRDD.gridRectangleRDD);  JavaPairRDD<Envelope,HashSet<Envelope>> joinResultWithDuplicates=cogroupResult.flatMapToPair(new RectangleByRectangleJudgement(objectRDD.grids.size()));  JavaPairRDD<Envelope,HashSet<Envelope>> joinListResultAfterAggregation=aggregateJoinResultRectangleByRectangle(joinResultWithDuplicates);  return joinListResultAfterAggregation;}  }
class C{  public static byte[] generateRandomBytes(){  return generateRandomBytes(214);}  }
class C{  @Override public void process(K tuple){  processTuple(tuple);}  }
class C{  @Override public View onCreateFloatView(int position){  View v=mListView.getChildAt(position + mListView.getHeaderViewsCount() - mListView.getFirstVisiblePosition());  if (v == null) {    return null;  }  v.setPressed(false);  v.setDrawingCacheEnabled(true);  mFloatBitmap=Bitmap.createBitmap(v.getDrawingCache());  v.setDrawingCacheEnabled(false);  if (mImageView == null) {    mImageView=new ImageView(mListView.getContext());  }  mImageView.setBackgroundColor(mFloatBGColor);  mImageView.setPadding(0,0,0,0);  mImageView.setImageBitmap(mFloatBitmap);  mImageView.setLayoutParams(new ViewGroup.LayoutParams(v.getWidth(),v.getHeight()));  return mImageView;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static MProduct forS_Resource_ID(Properties ctx,int S_Resource_ID,String trxName){  if (S_Resource_ID <= 0) {    return null;  }  if (trxName == null) {    for (    MProduct p : s_cache.values()) {      if (p.getS_Resource_ID() == S_Resource_ID) {        return p;      }    }  }  MProduct p=new Query(ctx,Table_Name,COLUMNNAME_S_Resource_ID + "=?",trxName).setParameters(new Object[]{S_Resource_ID}).firstOnly();  if (p != null && trxName == null) {    s_cache.put(p.getM_Product_ID(),p);  }  return p;}  }
class C{  @NotNull public RunnerRequestCallBackBuilder<T> unmarshaller(@NotNull Class<T> clazz){  this.clazz=clazz;  return this;}  }
class C{  public PublishedStateUpdater(Article article,int articleState){  this.article=article;  this.articleState=articleState;}  }
class C{  void requestCallBack(int fromMemberId,int toMemberId) throws IOException {  assert fromMemberId < toMemberId;  outgoing(false,fromMemberId,toMemberId);}  }
class C{  public KMLGroundOverlayPolygonImpl(KMLTraversalContext tc,KMLGroundOverlay overlay){  if (tc == null) {    String msg=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (overlay == null) {    String msg=Logging.getMessage("nullValue.ParentIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.parent=overlay;  String altMode=overlay.getAltitudeMode();  if (!WWUtil.isEmpty(altMode)) {    if ("relativeToGround".equals(altMode))     this.setAltitudeMode(WorldWind.RELATIVE_TO_GROUND); else     if ("absolute".equals(altMode)) {      this.setAltitudeMode(WorldWind.ABSOLUTE);    }  }  Position.PositionList corners=overlay.getPositions();  this.setOuterBoundary(corners.list);  KMLLatLonBox box=overlay.getLatLonBox();  if (box != null) {    this.setRotation(box.getRotation());  }  if (overlay.getName() != null)   this.setValue(AVKey.DISPLAY_NAME,overlay.getName());  if (overlay.getDescription() != null)   this.setValue(AVKey.BALLOON_TEXT,overlay.getDescription());  if (overlay.getSnippetText() != null)   this.setValue(AVKey.SHORT_DESCRIPTION,overlay.getSnippetText());  if (this.parent.getIcon() == null || this.parent.getIcon().getHref() == null) {    String colorStr=overlay.getColor();    if (!WWUtil.isEmpty(colorStr)) {      Color color=WWUtil.decodeColorABGR(colorStr);      ShapeAttributes attributes=new BasicShapeAttributes();      attributes.setDrawInterior(true);      attributes.setInteriorMaterial(new Material(color));      this.setAttributes(attributes);    }  }}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  protected void checkSAXVersion(Hashtable h){  if (null == h)   h=new Hashtable();  final String SAX_VERSION1_CLASS="org.xml.sax.Parser";  final String SAX_VERSION1_METHOD="parse";  final String SAX_VERSION2_CLASS="org.xml.sax.XMLReader";  final String SAX_VERSION2_METHOD="parse";  final String SAX_VERSION2BETA_CLASSNF="org.xml.sax.helpers.AttributesImpl";  final String SAX_VERSION2BETA_METHODNF="setAttributes";  final Class oneStringArg[]={java.lang.String.class};  final Class attributesArg[]={org.xml.sax.Attributes.class};  try {    Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2BETA_CLASSNF,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(SAX_VERSION2BETA_METHODNF,attributesArg);    h.put(VERSION + "SAX","2.0");  } catch (  Exception e) {    h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString());    h.put(ERROR,ERROR_FOUND);    try {      Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2_CLASS,ObjectFactory.findClassLoader(),true);      Method method=clazz.getMethod(SAX_VERSION2_METHOD,oneStringArg);      h.put(VERSION + "SAX-backlevel","2.0beta2-or-earlier");    } catch (    Exception e2) {      h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString());      h.put(ERROR,ERROR_FOUND);      try {        Class clazz=ObjectFactory.findProviderClass(SAX_VERSION1_CLASS,ObjectFactory.findClassLoader(),true);        Method method=clazz.getMethod(SAX_VERSION1_METHOD,oneStringArg);        h.put(VERSION + "SAX-backlevel","1.0");      } catch (      Exception e3) {        h.put(ERROR + VERSION + "SAX-backlevel","ERROR attempting to load SAX version 1 class: " + e3.toString());      }    }  }}  }
class C{  @Transactional public void delete(T persistentObject){  if (!entityManager.contains(persistentObject)) {    persistentObject=entityManager.merge(persistentObject);  }  entityManager.remove(persistentObject);}  }
class C{  XMLEncoder(Mode mode){  _mode=mode;  _validMask=mode.validMask();}  }
class C{  private static boolean checkFont(String fontName,String newName,String testString,boolean force){  boolean displayable=true;  Font f=UIManager.getFont(fontName);  if (f != null && !newName.equalsIgnoreCase(f.getName())) {    if (!GUIUtils.canDisplay(f,testString) || force) {      f=new Font(newName,f.getStyle(),f.getSize());      if (GUIUtils.canDisplay(f,testString))       UIManager.put(fontName,f); else       displayable=false;    }  } else   if (f != null) {    displayable=GUIUtils.canDisplay(f,testString);  } else {    displayable=false;  }  return displayable;}  }
class C{  public MappedExampleSet(ExampleSet parent,int[] mapping,boolean useMappedExamples){  this(parent,mapping,useMappedExamples,true);}  }
class C{  public void updatePointCount(int n){  m_PointCount+=n;}  }
class C{  public BaseItemCollectionRequest(final String requestUrl,IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options,BaseItemCollectionResponse.class,IItemCollectionPage.class);}  }
class C{  public GetFieldMappingsRequestBuilder includeDefaults(boolean includeDefaults){  request.includeDefaults(includeDefaults);  return this;}  }
class C{  public boolean matches(String input){  TrieNode node=root;  for (int i=input.length() - 1; i >= 0; i--) {    node=node.getChild(input.charAt(i));    if (node == null)     return false;    if (node.isTerminal())     return true;  }  return false;}  }
class C{  private static String removeFileNameExtension(String fileName){  if (fileName.lastIndexOf(".") == -1)   return fileName;  return fileName.substring(0,fileName.lastIndexOf("."));}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.LocaleType buildLocaleType(org.smpte_ra.schemas.st2067_2_2013.UserTextType annotationText,List<String> languages,List<String> regions,List<org.smpte_ra.schemas.st2067_2_2013.ContentMaturityRatingType> contentMaturityRatings){  org.smpte_ra.schemas.st2067_2_2013.LocaleType localeType=new org.smpte_ra.schemas.st2067_2_2013.LocaleType();  localeType.setAnnotation(annotationText);  org.smpte_ra.schemas.st2067_2_2013.LocaleType.LanguageList languageList=new org.smpte_ra.schemas.st2067_2_2013.LocaleType.LanguageList();  languageList.getLanguage().addAll(languages);  localeType.setLanguageList(languageList);  org.smpte_ra.schemas.st2067_2_2013.LocaleType.RegionList regionList=new org.smpte_ra.schemas.st2067_2_2013.LocaleType.RegionList();  regionList.getRegion().addAll(regions);  localeType.setRegionList(regionList);  org.smpte_ra.schemas.st2067_2_2013.LocaleType.ContentMaturityRatingList contentMaturityRatingList=new org.smpte_ra.schemas.st2067_2_2013.LocaleType.ContentMaturityRatingList();  contentMaturityRatingList.getContentMaturityRating().addAll(contentMaturityRatings);  return localeType;}  }
class C{  public static TransportUnit createTransportUnit(String unitId){  return new TransportUnit(unitId);}  }
class C{  @SuppressWarnings("unchecked") protected Response doCoreCmd(SMTPSession session,String command,String parameters){  Collection<MailAddress> rcptColl=(Collection<MailAddress>)session.getAttachment(SMTPSession.RCPT_LIST,State.Transaction);  if (rcptColl == null) {    rcptColl=new ArrayList<MailAddress>();  }  MailAddress recipientAddress=(MailAddress)session.getAttachment(CURRENT_RECIPIENT,State.Transaction);  rcptColl.add(recipientAddress);  session.setAttachment(SMTPSession.RCPT_LIST,rcptColl,State.Transaction);  StringBuilder response=new StringBuilder();  response.append(DSNStatus.getStatus(DSNStatus.SUCCESS,DSNStatus.ADDRESS_VALID)).append(" Recipient <").append(recipientAddress).append("> OK");  return new SMTPResponse(SMTPRetCode.MAIL_OK,response);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="invalidlocalname";  Document doc;  NodeList elementList;  Element testAddr;  Attr attribute;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  attribute=testAddr.getAttributeNodeNS(namespaceURI,localName);  assertNull("throw_Null",attribute);}  }
class C{  public synchronized void removeIconsForPkg(String packageName,UserHandleCompat user){  removeFromMemCacheLocked(packageName,user);  long userSerial=mUserManager.getSerialNumberForUser(user);  mIconDb.delete(IconDB.COLUMN_COMPONENT + " LIKE ? AND " + IconDB.COLUMN_USER+ " = ?",new String[]{packageName + "/%",Long.toString(userSerial)});}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void deleteRequestHeaders(SQLiteDatabase db,String where,String[] whereArgs){  String[] projection=new String[]{DownloadContract.Downloads._ID};  Cursor cursor=db.query(DownloadContract.Downloads.DOWNLOADS_TABLE_NAME,projection,where,whereArgs,null,null,null,null);  try {    for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {      long id=cursor.getLong(0);      String idWhere=DownloadContract.RequestHeaders.COLUMN_DOWNLOAD_ID + "=" + id;      db.delete(DownloadContract.RequestHeaders.HEADERS_DB_TABLE,idWhere,null);    }  }  finally {    cursor.close();  }}  }
class C{  private void disconnect() throws MqttException {  if (sampleClientSub != null) {    sampleClientSub.disconnect();    sampleClientSub=null;  }}  }
class C{  public static boolean isAttacking(char[] board){  return isSameRow(board) || isSameColumn(board) || isSameDiagonal(board);}  }
class C{  public void addRow(int index){  m_data.rows.add(index,new ArrayList<Object>());  m_data.rowsMeta.add(index,null);}  }
class C{  public int drawLine(final Pattern pattern,final Vector pos1,final Vector pos2,final double radius,final boolean filled,boolean flat) throws MaxChangedBlocksException {  Set<Vector> vset=new HashSet<Vector>();  boolean notdrawn=true;  final int x1=pos1.getBlockX(), y1=pos1.getBlockY(), z1=pos1.getBlockZ();  final int x2=pos2.getBlockX(), y2=pos2.getBlockY(), z2=pos2.getBlockZ();  int tipx=x1, tipy=y1, tipz=z1;  final int dx=Math.abs(x2 - x1), dy=Math.abs(y2 - y1), dz=Math.abs(z2 - z1);  if ((dx + dy + dz) == 0) {    vset.add(new Vector(tipx,tipy,tipz));    notdrawn=false;  }  if ((Math.max(Math.max(dx,dy),dz) == dx) && notdrawn) {    for (int domstep=0; domstep <= dx; domstep++) {      tipx=x1 + (domstep * ((x2 - x1) > 0 ? 1 : -1));      tipy=(int)Math.round(y1 + (((domstep * ((double)dy)) / (dx)) * ((y2 - y1) > 0 ? 1 : -1)));      tipz=(int)Math.round(z1 + (((domstep * ((double)dz)) / (dx)) * ((z2 - z1) > 0 ? 1 : -1)));      vset.add(new Vector(tipx,tipy,tipz));    }    notdrawn=false;  }  if ((Math.max(Math.max(dx,dy),dz) == dy) && notdrawn) {    for (int domstep=0; domstep <= dy; domstep++) {      tipy=y1 + (domstep * ((y2 - y1) > 0 ? 1 : -1));      tipx=(int)Math.round(x1 + (((domstep * ((double)dx)) / (dy)) * ((x2 - x1) > 0 ? 1 : -1)));      tipz=(int)Math.round(z1 + (((domstep * ((double)dz)) / (dy)) * ((z2 - z1) > 0 ? 1 : -1)));      vset.add(new Vector(tipx,tipy,tipz));    }    notdrawn=false;  }  if ((Math.max(Math.max(dx,dy),dz) == dz) && notdrawn) {    for (int domstep=0; domstep <= dz; domstep++) {      tipz=z1 + (domstep * ((z2 - z1) > 0 ? 1 : -1));      tipy=(int)Math.round(y1 + (((domstep * ((double)dy)) / (dz)) * ((y2 - y1) > 0 ? 1 : -1)));      tipx=(int)Math.round(x1 + (((domstep * ((double)dx)) / (dz)) * ((x2 - x1) > 0 ? 1 : -1)));      vset.add(new Vector(tipx,tipy,tipz));    }  }  if (flat) {    vset=this.getStretched(vset,radius);    if (!filled) {      vset=this.getOutline(vset);    }  } else {    vset=this.getBallooned(vset,radius);    if (!filled) {      vset=this.getHollowed(vset);    }  }  return this.setBlocks(vset,pattern);}  }
class C{  String baseTypeHelper(String type){  return type;}  }
class C{  public static TellerData instance(final Long id,final Long officeId,final Long debitAccountId,final Long creditAccountId,final String name,final String description,final LocalDate startDate,final LocalDate endDate,final TellerStatus status,final String officeName,final Boolean hasTransactions,final Boolean hasMappedCashiers){  TellerData tellerData=new TellerData(id,officeId,debitAccountId,creditAccountId,name,description,startDate,endDate,status,hasTransactions,hasMappedCashiers);  tellerData.officeName=officeName;  return tellerData;}  }
class C{  @Override protected void drawGuiContainerBackgroundLayer(float par1,int par2,int par3){  FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE);  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);  containerWidth=(this.width - this.xSize) / 2;  containerHeight=(this.height - this.ySize) / 2;  this.drawTexturedModalRect(containerWidth,containerHeight,0,0,this.xSize,this.ySize);}  }
class C{  public void advance(double time){  clockTime+=time;}  }
class C{  public double[][] eigenVectors(int n){  double[][] eigenVectors=new double[eigenPairs.length][n];  for (int i=0; i < n; i++) {    EigenPair eigenPair=eigenPairs[i];    VMath.setCol(eigenVectors,i,eigenPair.getEigenvector());  }  return eigenVectors;}  }
class C{  public String format(final Map<String,Object> content) throws IOException {  return mapper.writeValueAsString(content);}  }
class C{  public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos,int noOfNodesInput,List<String> activeNodes){  Map<String,List<Distributable>> nodeBlocksMap=new HashMap<String,List<Distributable>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  List<NodeBlockRelation> flattenedList=new ArrayList<NodeBlockRelation>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  Set<Distributable> uniqueBlocks=new HashSet<Distributable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  Set<String> nodes=new HashSet<String>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  createFlattenedListFromMap(blockInfos,flattenedList,uniqueBlocks,nodes);  int noofNodes=(-1 == noOfNodesInput) ? nodes.size() : noOfNodesInput;  if (null != activeNodes) {    noofNodes=activeNodes.size();  }  int blocksPerNode=blockInfos.size() / noofNodes;  Collections.sort(flattenedList);  Map<String,List<Distributable>> nodeAndBlockMapping=new LinkedHashMap<String,List<Distributable>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  createNodeVsBlockMapping(flattenedList,nodeAndBlockMapping);  createOutputMap(nodeBlocksMap,blocksPerNode,uniqueBlocks,nodeAndBlockMapping,activeNodes);  assignLeftOverBlocks(nodeBlocksMap,uniqueBlocks,blocksPerNode);  return nodeBlocksMap;}  }
class C{  public static WorkflowState makeState(WorkflowStateConstant stateConstant){  return new WorkflowState(stateConstant.name.get());}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.501 -0500",hash_original_method="2FF709A9E88600F14AEB34FA372FB7A3",hash_generated_method="BEF718C3C1F07F62E8C1D81C8B2729AD") public void putShortArray(String key,short[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public boolean inMinVertexCover(int v){  validate(v);  return inMinVertexCover[v];}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  boolean state;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  state=domesticAttr.getSpecified();  assertTrue("domesticSpecified",state);}  }
class C{  protected void sequence_PromisifyExpression(ISerializationContext context,PromisifyExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.PROMISIFY_EXPRESSION__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.PROMISIFY_EXPRESSION__EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0(),semanticObject.getExpression());  feeder.finish();}  }
class C{  public TextAnnotation buildTextAnnotation(String corpusId,String id,String text,String[] tokens,int[] sentenceEndPositions){  return TokenizerTextAnnotationBuilder.buildTextAnnotation(corpusId,id,text,tokens,sentenceEndPositions,"UserSpecified",1.0d);}  }
class C{  public static void useLnf(String lnfClassName){  try {    if (lnfClassName.equals(Plastic3DLookAndFeel.class.getName())) {      MetalLookAndFeel.setCurrentTheme(new SkyBlue());      UIManager.put("jgoodies.useNarrowButtons",Boolean.FALSE);    } else     if (lnfClassName.equals(com.jgoodies.looks.windows.WindowsLookAndFeel.class.getName())) {      UIManager.put("jgoodies.useNarrowButtons",Boolean.FALSE);    } else     if (lnfClassName.equals(MetalLookAndFeel.class.getName())) {      MetalLookAndFeel.setCurrentTheme(new LightOceanTheme());    }    UIManager.setLookAndFeel(lnfClassName);  } catch (  UnsupportedLookAndFeelException e) {  }catch (  ClassNotFoundException e) {  }catch (  InstantiationException e) {  }catch (  IllegalAccessException e) {  }}  }
class C{  public Cosh(){  super(Number.class,Number.class);}  }
class C{  public boolean hasCommand(String notificationName){  return controller.hasCommand(notificationName);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.mainactivity);  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);  setSupportActionBar(toolbar);}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public boolean hasAvailableAddresses(){  if (isPoolFull() || getPoolAvailability() == 0)   return false; else   return true;}  }
class C{  public static String encodeString(String s){  return new String(encode(s.getBytes()));}  }
class C{  long readDWord() throws IOException {  int b0=m_in.read();  int b1=m_in.read();  int b2=m_in.read();  int b3=m_in.read();  long value=((b3 << 24) & 0xff000000) | ((b2 << 16) & 0xff0000) | ((b1 << 8) & 0xff00)| (b0 & 0xff);  return value;}  }
class C{  DefaultMutableTreeNode insertNode(DefaultMutableTreeNode pChild,DefaultMutableTreeNode pParent){  int index;  index=getIndexOfChild(pParent,pChild);  if (index >= 0) {    return (DefaultMutableTreeNode)getChild(pParent,index);  }  index=pParent.getChildCount();  insertNodeInto(pChild,pParent,index);  return pChild;}  }
class C{  private void updateVariations(){  for (  MoveListVariation var : vars) {    StringBuilder buff=new StringBuilder();    String toAdd="";    int deltaLength=0;    int mNumber=var.getStartingMove();    if (var.getTotalLength() == 0) {      buff.append("  [");      var.increaseTotalLengthBy(6);      deltaLength+=6;    }    int paintedCntr=var.getPaintedMovesCounter();    int start=moveNodes.get(mNumber);    int length=moveNodesLengths.get(mNumber);    for (int i=paintedCntr + mNumber; i < var.getMoveSans().size() + mNumber; i++) {      String number;      if (var.getPaintedMovesCounter() < 1)       number=(i % 2 == 0) ? getMoveNumber(i) : getMoveNumberBlack(i - 1); else       number=getMoveNumber(i);      toAdd=" " + number + var.getMoveSans().get(i - mNumber);      buff.append(toAdd);      var.getMoveNodes().add(var.getNextNodeOffset() + 1);      var.getMoveNodesLengths().add(toAdd.length());      var.increaseTotalLengthBy(toAdd.length());      deltaLength+=toAdd.length();      var.increasePaintedMovesCounter();    }    if (buff.toString().startsWith("  [")) {      textPanel.setCaretOffset(start + length);      final String delim=textPanel.getLineDelimiter();      textPanel.insert(delim);      textPanel.setCaretOffset(textPanel.getCaretOffset() + delim.length());      textPanel.insert(delim);      textPanel.insert(buff + "]");      var.setNextNodeOffset(textPanel.getCaretOffset() + buff.toString().length());    } else     if (buff.length() != 0) {      textPanel.setCaretOffset(var.getNextNodeOffset());      textPanel.insert(buff.toString());      var.setNextNodeOffset(textPanel.getCaretOffset() + buff.length());    } else     continue;    int moveIndex=mNumber + 1;    while (moveIndex < moveNodes.size()) {      moveNodes.set(moveIndex,moveNodes.get(moveIndex) + deltaLength);      moveIndex++;    }  }}  }
class C{  @Override public void config(XStream xstream){  xstream.alias("ruby-class",ClassElement.class);  xstream.alias("ruby-class_method",ClassMethodElement.class);  xstream.alias("ruby-instance_method",InstanceMethodElement.class);  xstream.alias("ruby-singleton_method",SingletonMethodElement.class);  xstream.alias("ruby-relation",RubyRelation.class);}  }
class C{  public void testRemoveNonExistentTransformer(){  boolean result;  ClassFileTransformer moreThanMeetsTheEye=new MyClassFileTransformer("NonExistent");  addTransformerToManager(fInst,moreThanMeetsTheEye);  removeTransformerFromManager(fInst,moreThanMeetsTheEye);  result=fInst.removeTransformer(new MyClassFileTransformer("NonExistent2"));  assertTrue(!result);  result=fInst.removeTransformer(moreThanMeetsTheEye);  assertTrue(!result);  verifyTransformers(fInst);}  }
class C{  public void markError(final int from,final int to){  if (highlight != null) {    highlighter.removeHighlight(highlight);  }  if (from >= 0) {    try {      highlight=highlighter.addHighlight(from,to,this);    } catch (    BadLocationException ble) {      ble.printStackTrace();    }  }}  }
class C{  public final boolean parentOf(ThreadGroup g){  for (; g != null; g=g.parent) {    if (g == this) {      return true;    }  }  return false;}  }
class C{  public PairModel(final PropertyModel propertyModel,final List<Pair<String,String>> options){  this.propertyModel=propertyModel;  final String singleSelectedKey=(String)propertyModel.getObject();  if (StringUtils.isNotBlank(singleSelectedKey)) {    for (    Pair<String,String> option : options) {      if (singleSelectedKey.equals(option.getFirst())) {        pair=option;        break;      }    }  }}  }
class C{  void prepareKeyStore(){  try {    Key key=keyStore.getKey(keyAlias,null);    Certificate certificate=keyStore.getCertificate(keyAlias);    if (key != null && certificate != null) {      try {        createCipher().init(Cipher.DECRYPT_MODE,key);        return;      } catch (      KeyPermanentlyInvalidatedException e) {        Log.d(TAG,"Key invalidated.");      }    }    storage.clear();    keyGenerator.initialize(new KeyGenParameterSpec.Builder(keyAlias,KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT).setBlockModes(KeyProperties.BLOCK_MODE_ECB).setUserAuthenticationRequired(true).setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1).build());    keyGenerator.generateKeyPair();  } catch (  GeneralSecurityException e) {    throw new RuntimeException(e);  }}  }
class C{  private String nodeToString(Node node){  StringWriter stringWriter=new StringWriter();  try {    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");    transformer.setOutputProperty(OutputKeys.INDENT,"no");    transformer.transform(new DOMSource(node),new StreamResult(stringWriter));  } catch (  TransformerException e) {    throw new IllegalArgumentException("Cannot convert node to string. Transformer exception ",e);  }  return stringWriter.toString();}  }
class C{  @Override public String toString(){  return "Quadratic Probe[" + c1 + ","+ c2+ "] for table of size "+ tableSize;}  }
class C{  public final void removeZeros(){  final Iterator<Entry<K,Integer>> it=mCount.entrySet().iterator();  while (it.hasNext()) {    final Map.Entry<K,Integer> pairs=it.next();    if (pairs.getValue() == 0) {      it.remove();    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.SHIFT_EXPRESSION__LHS:    setLhs((Expression)null);  return;case N4JSPackage.SHIFT_EXPRESSION__OP:setOp(OP_EDEFAULT);return;case N4JSPackage.SHIFT_EXPRESSION__RHS:setRhs((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public RestResponse put() throws RestException {  return postOrPutImpl(false);}  }
class C{  public boolean sharesVariableWith(BytecodeInstruction instruction){  if (!instruction.isDefUse())   return false;  return varName.equals(instruction.getVariableName());}  }
class C{  public static byte[] toBytes(long x){  return toBytes(x,new byte[8],0);}  }
class C{  @Override public int hashCode(){  return this.getMBeanName().hashCode();}  }
class C{  public Class toClass(ClassLoader loader,ProtectionDomain domain) throws CannotCompileException {  ClassPool cp=getClassPool();  if (loader == null)   loader=cp.getClassLoader();  return cp.toClass(this,loader,domain);}  }
class C{  @Override public void clearBatch() throws SQLException {  try {    debugCodeCall("clearBatch");    checkClosed();    batchParameters=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void displayModelSize(int position){  try {    DataStorage data=mDataList.get(position);    DecimalFormatSymbols otherSymbols=new DecimalFormatSymbols(Locale.ENGLISH);    otherSymbols.setDecimalSeparator('.');    otherSymbols.setGroupingSeparator(',');    DecimalFormat df=new DecimalFormat("##.##",otherSymbols);    String width=df.format((data.getMaxX() - data.getMinX()));    String depth=df.format((data.getMaxY() - data.getMinY()));    String height=df.format((data.getMaxZ() - data.getMinZ()));    Log.i("Scale","Vamos a petar " + width);    ((TextView)mSizeText.findViewById(R.id.print_panel_x_size)).setText(width);    ((TextView)mSizeText.findViewById(R.id.print_panel_y_size)).setText(depth);    ((TextView)mSizeText.findViewById(R.id.print_panel_z_size)).setText(height);    if (mScaleLayout.getVisibility() == View.VISIBLE) {      mScaleEditX.removeTextChangedListener(mTextWatcherX);      mScaleEditY.removeTextChangedListener(mTextWatcherY);      mScaleEditZ.removeTextChangedListener(mTextWatcherZ);      mScaleEditX.setText(width);      mScaleEditX.setSelection(mScaleEditX.getText().length());      mScaleEditY.setText(depth);      mScaleEditY.setSelection(mScaleEditY.getText().length());      mScaleEditZ.setText(height);      mScaleEditZ.setSelection(mScaleEditZ.getText().length());      mScaleEditX.addTextChangedListener(mTextWatcherX);      mScaleEditY.addTextChangedListener(mTextWatcherY);      mScaleEditZ.addTextChangedListener(mTextWatcherZ);    }  } catch (  ArrayIndexOutOfBoundsException e) {    e.printStackTrace();  }}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ARRAY_ELEMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  private void checkAttributeWithValuePresence(Elements elements,TestSolutionHandler testSolutionHandler){  if (elements.isEmpty()) {    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);    return;  }  TestSolution testSolution=TestSolution.PASSED;  for (  Element el : elements) {    if (!el.hasAttr(attributeName) || (el.hasAttr(attributeName) && !el.attr(attributeName).equals(attributeValue))) {      testSolution=setTestSolution(testSolution,getFailureSolution());      createSourceCodeRemark(getFailureSolution(),el,getFailureMsgCode());    } else     if (StringUtils.isNotBlank(getSuccessMsgCode())) {      testSolution=setTestSolution(testSolution,getSuccessSolution());      createSourceCodeRemark(getSuccessSolution(),el,getSuccessMsgCode());    }  }  testSolutionHandler.addTestSolution(testSolution);}  }
class C{  protected void selectFileFromLocal(){  Intent intent=null;  if (Build.VERSION.SDK_INT < 19) {    intent=new Intent(Intent.ACTION_GET_CONTENT);    intent.setType("*/*");    intent.addCategory(Intent.CATEGORY_OPENABLE);  } else {    intent=new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);  }  startActivityForResult(intent,REQUEST_CODE_SELECT_FILE);}  }
class C{  private static void groupCorrespodingInfoBasedOnTask(TableBlockInfo info,TaskBlockInfo taskBlockMapping,String taskNo){  List<TableBlockInfo> blockLists=taskBlockMapping.getTableBlockInfoList(taskNo);  if (null != blockLists) {    blockLists.add(info);  } else {    blockLists=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);    blockLists.add(info);    taskBlockMapping.addTableBlockInfoList(taskNo,blockLists);  }}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  private void specialisedFunctions(){  Function<Integer,Employee> empFunction=null;  IntFunction<Employee> empFunction2=null;  DoubleFunction<String> doubleFunction=null;  doubleFunction.apply(3.14);  LongFunction<Patient> longFunction=null;  longFunction.apply(10L);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);  this.backgroundPaint=SerialUtilities.readPaint(stream);  this.outlinePaint=SerialUtilities.readPaint(stream);  this.outlineStroke=SerialUtilities.readStroke(stream);}  }
class C{  public void remove(final String key){  final Optional<Metadata> metadata=getMetadata(key);  if (metadata.isPresent()) {    metadata.get().removeFromIndexes();  }}  }
class C{  protected void installListeners(){  super.installListeners();  splitPane.addPropertyChangeListener(this);}  }
class C{  private String diff_linesToCharsMunge(String text,List<String> lineArray,Map<String,Integer> lineHash){  int lineStart=0;  int lineEnd=-1;  String line;  StringBuilder chars=new StringBuilder();  while (lineEnd < text.length() - 1) {    lineEnd=text.indexOf('\n',lineStart);    if (lineEnd == -1) {      lineEnd=text.length() - 1;    }    line=text.substring(lineStart,lineEnd + 1);    lineStart=lineEnd + 1;    if (lineHash.containsKey(line)) {      chars.append(String.valueOf((char)(int)lineHash.get(line)));    } else {      lineArray.add(line);      lineHash.put(line,lineArray.size() - 1);      chars.append(String.valueOf((char)(lineArray.size() - 1)));    }  }  return chars.toString();}  }
class C{  public boolean areLastThreeNonRight(){  if (!hasThree())   return false;  double x1, y1, x2, y2, x3, y3;  int pos=points.size() - 3;  x1=points.get(pos).getX();  y1=points.get(pos).getY();  x2=points.get(pos + 1).getX();  y2=points.get(pos + 1).getY();  x3=points.get(pos + 2).getX();  y3=points.get(pos + 2).getY();  double val1=(x2 - x1) * (y3 - y1);  double val2=(y2 - y1) * (x3 - x1);  double diff=FloatingPoint.value(val1 - val2);  if (diff >= 0)   return true;  return false;}  }
class C{  @Override public void displayUsage(Usage usage){  this.dataUsage=usage;}  }
class C{  private void doHandleInstanceProvisioning(ServiceInstance serviceInstance){  try {    ProvisioningService provisioningService=provServFact.getInstance(serviceInstance);    provisioningService.sendPing("Availability check");    serviceInstance.setInstanceProvisioning(false);    em.persist(serviceInstance);    String instanceId=serviceInstance.getInstanceId();    String subscriptionId=serviceInstance.getSubscriptionId();    String organizationId=serviceInstance.getOrganizationId();    BaseResult baseResult=null;    InstanceResult instanceResult=null;switch (serviceInstance.getProvisioningStatus()) {case WAITING_FOR_SYSTEM_CREATION:      instanceResult=createServiceInstance(serviceInstance,provisioningService);    if (instanceResult == null) {      BadResultException be=new BadResultException("Service returned null as instance result");      throw be;    }  InstanceInfo instance=instanceResult.getInstance();if (instance == null) {  throw new BadResultException(String.format("Returned object of type InstanceInfo is null for service '%s'",Long.valueOf(serviceInstance.getTkey())));}if (instance.getAccessInfo() != null) {serviceInstance.setServiceAccessInfo(instance.getAccessInfo());}if (instance.getBaseUrl() != null) {String serviceBaseURL=getBaseUrlWithPublicIp(serviceInstance,instance);serviceInstance.setServiceBaseURL(serviceBaseURL);instance.setBaseUrl(serviceBaseURL);}if (instance.getLoginPath() != null) {serviceInstance.setServiceLoginPath(instance.getLoginPath());}baseResult=instanceResult;break;case WAITING_FOR_SYSTEM_DELETION:baseResult=provisioningService.deleteInstance(instanceId,organizationId,subscriptionId,null);break;case WAITING_FOR_SYSTEM_ACTIVATION:baseResult=provisioningService.activateInstance(instanceId,null);break;case WAITING_FOR_SYSTEM_DEACTIVATION:baseResult=provisioningService.deactivateInstance(instanceId,null);break;case WAITING_FOR_SYSTEM_MODIFICATION:baseResult=provisioningService.modifySubscription(instanceId,serviceInstance.getSubscriptionId(),InstanceParameterFilter.getFilteredInstanceParametersForService(serviceInstance),null);break;case WAITING_FOR_SYSTEM_UPGRADE:baseResult=provisioningService.upgradeSubscription(instanceId,serviceInstance.getSubscriptionId(),InstanceParameterFilter.getFilteredInstanceParametersForService(serviceInstance),null);break;case WAITING_FOR_USER_CREATION:case WAITING_FOR_USER_MODIFICATION:case WAITING_FOR_USER_DELETION:baseResult=new BaseResult();baseResult.setRc(0);break;default :return;}if (baseResult == null) {BadResultException be=new BadResultException("Service returned null as base result");throw be;}try {if (baseResult.getRc() == 0) {if (serviceInstance.isControllerReady()) {if (instanceResult != null) {notifyOnProvisioningCompletion(serviceInstance,instanceResult);}serviceInstance.setProvisioningStatus(ProvisioningStatus.COMPLETED);}} else {if (instanceResult != null) {notifyOnProvisioningAbortion(serviceInstance,instanceResult,new APPlatformException(instanceResult.getDesc()));}serviceInstance.setProvisioningStatus(ProvisioningStatus.COMPLETED);}} catch (BESNotificationException bne) {if (besDAO.isCausedByConnectionException(bne)) {suspendApp(serviceInstance,"mail_bes_notification_error_app_admin");} else {suspendServiceInstance(serviceInstance,bne.getCause(),"mail_create_beserror",false);}}em.persist(serviceInstance);} catch (BadResultException e) {logger.warn("Failure during processing for service instance '{}' with message '{}'",Long.valueOf(serviceInstance.getTkey()),e.getMessage());}catch (Exception e) {try {ProvisioningStatus instanceProvStatus=serviceInstance.getProvisioningStatus();if (instanceProvStatus.isWaitingForCreation()) {besDAO.notifyOnProvisioningStatusUpdate(serviceInstance,getErrorMessages());}} catch (BESNotificationException bne) {if (besDAO.isCausedByConnectionException(bne)) {suspendApp(serviceInstance,"mail_bes_notification_error_app_admin");} else {suspendServiceInstance(serviceInstance,bne.getCause(),"mail_create_beserror",false);}}}}  }
class C{  public static void applyRenderingHints(final Graphics g){  Graphics2D g2d=(Graphics2D)g;  Toolkit tk=Toolkit.getDefaultToolkit();  Map map=(Map)tk.getDesktopProperty("awt.font.desktophints");  if (map != null) {    g2d.addRenderingHints(map);  }}  }
class C{  public ConcurrentModificationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void switchToRightCamera(final Renderer r){  ContextManager.getCurrentContext().enforceState(cyanColorMask);  _rightCamera.update();  _rightCamera.apply(r);}  }
class C{  public void testAllocationReserves(){  final int cReserve16K=16 * 1024;  final int cReserve128K=32 * 1024;  showAllocReserve(false,64,cReserve16K,cReserve16K);  showAllocReserve(false,128,cReserve16K,cReserve16K);  showAllocReserve(false,1024,cReserve16K,cReserve16K);  showAllocReserve(false,2048,cReserve16K,cReserve16K);  showAllocReserve(false,3072,cReserve16K,cReserve16K);  showAllocReserve(false,4096,cReserve16K,cReserve16K);  showAllocReserve(false,8192,cReserve16K,cReserve16K);  showAllocReserve(true,64,cReserve128K,cReserve16K);  showAllocReserve(true,128,cReserve128K,cReserve16K);  showAllocReserve(true,1024,cReserve128K,cReserve16K);  showAllocReserve(true,2048,cReserve128K,cReserve16K);  showAllocReserve(true,3072,cReserve128K,cReserve16K);  showAllocReserve(true,4096,cReserve128K,cReserve16K);  showAllocReserve(true,8192,cReserve128K,cReserve16K);}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output);  return output.toCharArray();}  }
class C{  public UpdateCoupling(Coupling<?> coupling){  this.coupling=coupling;}  }
class C{  public Zipper<A> modifyBefore(UnaryOperator<A> operator) throws NoSuchElementException {  return new Zipper<>(front.tail().plus(operator.apply(front.head())),back,position);}  }
class C{  @Override public boolean isCancelled(){  return cancelled;}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (_table == null || _updateButton == null) {    return;  }  int row=_table.getSelectedRow();  if (log.isDebugEnabled()) {    log.debug("Table valueChanged: row= " + row);  }  if (row >= 0) {    _updateButton.setEnabled(true);    _updateButton.setToolTipText(null);  } else {    _updateButton.setEnabled(false);    _updateButton.setToolTipText(Bundle.getMessage("ToolTipPickFromTable"));  }  hideIcons();}  }
class C{  ResultLimitPanel(Color backgroundColor,LicenseConstraintViolation<Integer,Integer> violation){  limit=violation.getConstraintValue();  initGUI(backgroundColor,violation);}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  doneButtonActionPerformed();}  }
class C{  public String wrap(String text,int width,int height){  if (text == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  String[] lines=text.split("\n");  StringBuffer wrappedText=new StringBuffer();  for (int i=0; i < lines.length; i++) {    lines[i]=this.wrapLine(lines[i],width);  }  int currentHeight=0;  boolean heightExceeded=false;  double maxLineHeight=getMaxLineHeight(this.textRenderer);  for (int i=0; i < lines.length && !heightExceeded; i++) {    String[] subLines=lines[i].split("\n");    for (int j=0; j < subLines.length && !heightExceeded; j++) {      if (height <= 0 || currentHeight + maxLineHeight <= height) {        wrappedText.append(subLines[j]);        currentHeight+=maxLineHeight + this.lineSpacing;        if (j < subLines.length - 1)         wrappedText.append('\n');      } else {        heightExceeded=true;      }    }    if (i < lines.length - 1 && !heightExceeded)     wrappedText.append('\n');  }  if (heightExceeded) {    if (wrappedText.length() > 0)     wrappedText.deleteCharAt(wrappedText.length() - 1);    wrappedText.append(this.continuationString);  }  return wrappedText.toString();}  }
class C{  public ProgramRewriter(HopRewriteRule rewrite){  _dagRuleSet=new ArrayList<HopRewriteRule>();  _dagRuleSet.add(rewrite);  _sbRuleSet=new ArrayList<StatementBlockRewriteRule>();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechild.class,args);}  }
class C{  public void banUser(String jid,String reason) throws XMPPException {  changeAffiliationByAdmin(jid,"outcast",reason);}  }
class C{  public boolean addNode(ServiceNode node){  try {    return nodes.add(node);  } catch (  Exception e) {    return false;  }}  }
class C{  public static SolidToast make(Activity activity,CharSequence text,int duration,int gravity){  return make(activity,text,null,duration,gravity);}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRANSITION___GUARD_1:    getGuard_1().clear();  getGuard_1().addAll((Collection<? extends Guard_>)newValue);return;case UmplePackage.TRANSITION___EVENT_DEFINITION_1:getEventDefinition_1().clear();getEventDefinition_1().addAll((Collection<? extends EventDefinition_>)newValue);return;case UmplePackage.TRANSITION___ACTION_1:getAction_1().clear();getAction_1().addAll((Collection<? extends Action_>)newValue);return;case UmplePackage.TRANSITION___STATE_NAME_1:setStateName_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void close(){  service.shutdown();}  }
class C{  public void push(){  top++;  if (top >= stack.length) {    Mapping newstack[]=new Mapping[stack.length * 2];    System.arraycopy(stack,0,newstack,0,stack.length);    stack=newstack;  }  stack[top]=null;}  }
class C{  @SuppressWarnings({"unchecked"}) public static void mergeDefaults(Map<String,Object> content,Map<String,Object> defaults){  for (  Map.Entry<String,Object> defaultEntry : defaults.entrySet()) {    if (!content.containsKey(defaultEntry.getKey())) {      content.put(defaultEntry.getKey(),defaultEntry.getValue());    } else {      if (content.get(defaultEntry.getKey()) instanceof Map && defaultEntry.getValue() instanceof Map) {        mergeDefaults((Map<String,Object>)content.get(defaultEntry.getKey()),(Map<String,Object>)defaultEntry.getValue());      } else       if (content.get(defaultEntry.getKey()) instanceof List && defaultEntry.getValue() instanceof List) {        List defaultList=(List)defaultEntry.getValue();        List contentList=(List)content.get(defaultEntry.getKey());        List mergedList=new ArrayList();        if (allListValuesAreMapsOfOne(defaultList) && allListValuesAreMapsOfOne(contentList)) {          Map<String,Map<String,Object>> processed=Maps.newLinkedHashMap();          for (          Object o : contentList) {            Map<String,Object> map=(Map<String,Object>)o;            Map.Entry<String,Object> entry=map.entrySet().iterator().next();            processed.put(entry.getKey(),map);          }          for (          Object o : defaultList) {            Map<String,Object> map=(Map<String,Object>)o;            Map.Entry<String,Object> entry=map.entrySet().iterator().next();            if (processed.containsKey(entry.getKey())) {              mergeDefaults(processed.get(entry.getKey()),map);            } else {              processed.put(entry.getKey(),map);            }          }          for (          Map<String,Object> map : processed.values()) {            mergedList.add(map);          }        } else {          mergedList.addAll(defaultList);          for (          Object o : contentList) {            if (!mergedList.contains(o)) {              mergedList.add(o);            }          }        }        content.put(defaultEntry.getKey(),mergedList);      }    }  }}  }
class C{  public static void copy(File from,Charset charset,Appendable to) throws IOException {  asCharSource(from,charset).copyTo(to);}  }
class C{  public static PlayerProfile lookupOptimistically(String name){  return lookup(name).orElseThrow(null);}  }
class C{  public SignerInfo verify(SignerInfo info,byte[] bytes) throws NoSuchAlgorithmException, SignatureException {  return info.verify(this,bytes);}  }
class C{  public int markAll(String toMark,boolean matchCase,boolean wholeWord,boolean regex){  Highlighter h=getHighlighter();  int numMarked=0;  if (toMark != null && !toMark.equals(markedWord) && h != null) {    if (markAllHighlights != null)     clearMarkAllHighlights(); else     markAllHighlights=new ArrayList(10);    int caretPos=getCaretPosition();    markedWord=toMark;    setCaretPosition(0);    boolean found=SearchEngine.find(this,toMark,true,matchCase,wholeWord,regex);    while (found) {      int start=getSelectionStart();      int end=getSelectionEnd();      try {        markAllHighlights.add(h.addHighlight(start,end,markAllHighlightPainter));      } catch (      BadLocationException ble) {        ble.printStackTrace();      }      numMarked++;      found=SearchEngine.find(this,toMark,true,matchCase,wholeWord,regex);    }    setCaretPosition(caretPos);    repaint();  }  return numMarked;}  }
class C{  @Inline public void addEvent(EventType et,int ival1,int ival2,int ival3){  if (!enabled)   return;  addEventInternal(et,ival1,ival2,ival3);}  }
class C{  public boolean isValidLocalTimeOffset(){  return !mMessage.get(LOCAL_TIME_OFFSET_VALID);}  }
class C{  public static String map2OID(String algName){  checkCacheVersion();  String result=alg2OidMap.get(algName.toUpperCase(Locale.US));  if (result != null) {    return result;  }  AlgNameMapperSource s=source;  if (s != null) {    return s.mapNameToOid(algName);  }  return null;}  }
class C{  public static PortfolioEntry makePortfolioEntry(String portfolioName,String currencyCode){  PortfolioEntry entry=new PortfolioEntry();  if (!portfolioName.equals(""))   entry.setTitle(new PlainTextConstruct(portfolioName));  PortfolioData data=new PortfolioData();  if (!currencyCode.equals(""))   data.setCurrencyCode(currencyCode);  entry.setPortfolioData(data);  return entry;}  }
class C{  public SslToServiceNoAuth(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  private void validateExportPathParmPorts(ExportPathParameters param,ExportGroup exportGroup,Collection<URI> storageArrays){  if (param.getClass() == null || param.getStoragePorts() == null || param.getStoragePorts().isEmpty()) {    return;  }  Map<URI,Set<StoragePort>> arrayToStoragePorts=new HashMap<URI,Set<StoragePort>>();  for (  URI portURI : param.getStoragePorts()) {    StoragePort port=_dbClient.queryObject(StoragePort.class,portURI);    ArgValidator.checkEntityNotNull(port,portURI,false);    URI arrayURI=port.getStorageDevice();    if (!arrayToStoragePorts.containsKey(arrayURI)) {      arrayToStoragePorts.put(arrayURI,new HashSet<StoragePort>());    }    arrayToStoragePorts.get(arrayURI).add(port);  }  for (  URI storageArray : storageArrays) {    if (!arrayToStoragePorts.containsKey(storageArray)) {      throw APIException.badRequests.pathParameterPortsDoNotIncludeArray(storageArray);    }  }  for (  Map.Entry<URI,Set<StoragePort>> entry : arrayToStoragePorts.entrySet()) {    if (entry.getValue().size() < param.getMaxPaths()) {      throw APIException.badRequests.notEnoughPortsForMaxpath(entry.getKey(),entry.getValue().size(),param.getMaxPaths());    }  }}  }
class C{  public static void main(String[] argv){  String version=null;  try {    final Properties pomProperties=new Properties();    pomProperties.load(JmDNSImpl.class.getResourceAsStream("/META-INF/maven/javax.jmdns/jmdns/pom.properties"));    version=pomProperties.getProperty("version");  } catch (  Exception e) {    version="RUNNING.IN.IDE.FULL";  }  System.out.println("JmDNS version \"" + version + "\"");  System.out.println(" ");  System.out.println("Running on java version \"" + System.getProperty("java.version") + "\""+ " (build "+ System.getProperty("java.runtime.version")+ ")"+ " from "+ System.getProperty("java.vendor"));  System.out.println("Operating environment \"" + System.getProperty("os.name") + "\""+ " version "+ System.getProperty("os.version")+ " on "+ System.getProperty("os.arch"));  System.out.println("For more information on JmDNS please visit http://jmdns.org");}  }
class C{  public Type createType(){  TypeImpl type=new TypeImpl();  return type;}  }
class C{  private void checkHoldability(int resultSetType,int resultSetHoldability) throws SQLException {  boolean holdable=resultSetHoldability == ResultSet.HOLD_CURSORS_OVER_COMMIT;  boolean notScrollable=resultSetType != ResultSet.TYPE_SCROLL_INSENSITIVE;  if (holdable && notScrollable)   throw new FBDriverNotCapableException("Holdable cursors are supported only " + "for scrollable insensitive result sets.");}  }
class C{  @Override protected void registerNewSelector() throws IOException {synchronized (selector) {    Set<SelectionKey> keys=selector.keys();    Selector newSelector=null;    if (selectorProvider == null) {      newSelector=Selector.open();    } else {      newSelector=selectorProvider.openSelector();    }    for (    SelectionKey key : keys) {      SelectableChannel ch=key.channel();      NioSession session=(NioSession)key.attachment();      SelectionKey newKey=ch.register(newSelector,key.interestOps(),session);      session.setSelectionKey(newKey);    }    selector.close();    selector=newSelector;  }}  }
class C{  private Callable<Void> newRunIteratorsTask(final BlockingBuffer<ISPO> buffer){  return new RunIteratorsTask(buffer);}  }
class C{  public void removeUserRole(UserRoleType userRole){  userRoles.remove(userRole);}  }
class C{  public static boolean isSystemApplication(Context context,String packageName){  PackageManager packageManager=context.getPackageManager();  if (packageManager == null || packageName == null || packageName.length() == 0) {    return false;  }  try {    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public void shutdown(){  if (isInited) {    logger.info("shutting down JOAL");    deleteAll();    alc.alcMakeContextCurrent(null);    alc.alcDestroyContext(context);    alc.alcCloseDevice(device);    context=null;    device=null;    alc=null;    al=null;    buffers=null;    sources=null;    isInited=false;  }}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  AbstractNotation an=(AbstractNotation)n;  an.nodeName=nodeName;  an.publicId=publicId;  an.systemId=systemId;  return n;}  }
class C{  public void put(String key,Float value){  mValues.put(key,value);}  }
class C{  public boolean leftClick(OMGraphic omg,MouseEvent me){  if (DEBUG) {    Debug.output("leftClick(" + omg.getClass().getName() + ") at "+ me.getX()+ ", "+ me.getY());  }  return false;}  }
class C{  public static String unqualify(String qualifiedName,char separator){  return qualifiedName.substring(qualifiedName.lastIndexOf(separator) + 1);}  }
class C{  public static int asInt(long datum,int n){  long[] data={datum};  return asInteger(data,n);}  }
class C{  public boolean hasAnyPermissionConsulta(String[] rights){  if (ArrayUtils.isEmpty(rights))   return false;  Arrays.sort(permissions);  if (Arrays.binarySearch(permissions,AppPermissions.CONSULTA_TOTAL_SISTEMA) >= 0)   return true;  for (int i=0; i < rights.length; i++)   if (Arrays.binarySearch(permissions,rights[i]) >= 0)   return true;  return false;}  }
class C{  @Override public <T extends Persistent<PK>,PK extends GenericPK>Optional<T> read(AppContext ctx,Class<T> type,PK objectId){  T object=null;  if (objectId != null) {    Cache<PK,T> cache=CacheFactoryEHCache.getCacheFactory().getCache(type);    object=cache.get(objectId);    if (object == null) {      Optional<T> daoObject=ds.read(ctx,type,objectId);      if (daoObject.isPresent()) {        object=daoObject.get();        cache.put(objectId,object);      }    }  }  if (object != null) {    AccessRightsUtils.getInstance().setRole(ctx,object);    return Optional.of(object);  } else {    return Optional.absent();  }}  }
class C{  public void insertValue(int position,Comparable key,Number value){  if (position < 0 || position > getItemCount()) {    throw new IllegalArgumentException("'position' out of bounds.");  }  ParamChecks.nullNotPermitted(key,"key");  int pos=getIndex(key);  if (pos == position) {    this.keys.set(pos,key);    this.values.set(pos,value);  } else {    if (pos >= 0) {      this.keys.remove(pos);      this.values.remove(pos);    }    this.keys.add(position,key);    this.values.add(position,value);    rebuildIndex();  }}  }
class C{  public void calcBinSurface(SemivariogramType Type,double DistanseRatio,int NumberOfLags,boolean Anisotropic){  this.NumberOfLags=NumberOfLags;  try {    CalPairs4Map();  } catch (  FileNotFoundException ex) {    Logger.getLogger(Kriging.class.getName()).log(Level.SEVERE,null,ex);  }  if (this.LagSize == 0) {    this.LagSize=(this.MaximumDistance * DistanseRatio) / this.NumberOfLags;  }  CalcBins4Map(this.LagSize * this.NumberOfLags);}  }
class C{  private void processControlNames(){  for (  ControlFontPair control : controls) {    if (!control.control.box.getElement().hasAttribute("name")) {      continue;    }    String name=control.control.box.getElement().getAttribute("name");    if (!name.contains(".")) {      Field f=new Field();      f.partialName=name;      f.qualifiedName=name;      f.isTerminal=true;      allFieldMap.put(name,f);    } else {      String[] partials=name.split(Pattern.quote("."));      for (int i=1; i <= partials.length; i++) {        String[] parent=new String[i];        System.arraycopy(partials,0,parent,0,i);        String parentQualifiedName=join(parent,".");        Field f=allFieldMap.get(parentQualifiedName);        if (f == null) {          Field fCreated=new Field();          fCreated.qualifiedName=parentQualifiedName;          fCreated.partialName=parent[i - 1];          fCreated.isTerminal=(i == partials.length);          allFieldMap.put(parentQualifiedName,fCreated);        }      }    }  }}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.out.println("Usage: java Exercise_13_16 String");    System.exit(0);  }  String output=args[0];  String[] str=(args[0].replaceAll(" ","/")).split("/");  Rational r1=new Rational(Integer.parseInt(str[0]),Integer.parseInt(str[1]));  Rational r2=new Rational(Integer.parseInt(str[3]),Integer.parseInt(str[4]));switch (str[2].charAt(0)) {case '+':    output+=" = " + r1.add(r2);  break;case '-':output+=" = " + r1.subtract(r2);break;case '.':output+=" = " + r1.multiply(r2);break;case '/':output+=" = " + r1.divide(r2);break;default :System.out.println("Illegal Argument: + - . /");System.exit(0);}System.out.println(output);}  }
class C{  public void removeCq(String cqName){synchronized (cqQueryMapLock) {    HashMap<String,CqQueryImpl> tmpCqQueryMap=new HashMap<String,CqQueryImpl>(cqQueryMap);    tmpCqQueryMap.remove(cqName);    this.cqNameToUserAttributesMap.remove(cqName);    cqQueryMap=tmpCqQueryMap;  }}  }
class C{  public boolean updateRelation(String fieldName,Set<PersistentResource> resourceIdentifiers){  RelationshipType type=getRelationshipType(fieldName);  Set<PersistentResource> resources=filter(ReadPermission.class,(Set)getRelationUncheckedUnfiltered(fieldName));  if (type.isToMany()) {    checkFieldAwareDeferPermissions(UpdatePermission.class,fieldName,resourceIdentifiers.stream().map(null).collect(Collectors.toList()),resources.stream().map(null).collect(Collectors.toList()));    return updateToManyRelation(fieldName,resourceIdentifiers,resources);  } else {    PersistentResource resource=(resources.isEmpty()) ? null : resources.iterator().next();    Object original=(resource == null) ? null : resource.getObject();    PersistentResource modifiedResource=(resourceIdentifiers == null || resourceIdentifiers.isEmpty()) ? null : resourceIdentifiers.iterator().next();    Object modified=(modifiedResource == null) ? null : modifiedResource.getObject();    checkFieldAwareDeferPermissions(UpdatePermission.class,fieldName,modified,original);    return updateToOneRelation(fieldName,resourceIdentifiers,resources);  }}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public ValueEncoder(DexFile file,AnnotatedOutput out){  if (file == null) {    throw new NullPointerException("file == null");  }  if (out == null) {    throw new NullPointerException("out == null");  }  this.file=file;  this.out=out;}  }
class C{  private void unSSAGuardsDetermineReg(IR ir){  Instruction inst=guardPhis;  while (inst != null) {    Register r=Phi.getResult(inst).asRegister().getRegister();    int values=Phi.getNumberOfValues(inst);    for (int i=0; i < values; ++i) {      Operand op=Phi.getValue(inst,i);      if (op instanceof RegisterOperand) {        guardUnion(op.asRegister().getRegister(),r);      } else {        if (VM.VerifyAssertions) {          VM._assert(op instanceof TrueGuardOperand || op instanceof UnreachableOperand);        }      }    }    inst=inst2guardPhi.get(inst);  }}  }
class C{  public void testDataSourceXASupport(){  AbstractLocalConfiguration configuration=new LocalConfigurationThatSupportsProperty(Arrays.asList(new String[]{DatasourcePropertySet.DATASOURCE,DatasourcePropertySet.CONNECTION_TYPE}));  configuration.getDataSources().add(ConfigurationFixtureFactory.createDataSource().buildDataSource());  configuration.getDataSources().add(ConfigurationFixtureFactory.createXADataSourceConfiguredDataSource().buildDataSource());  configuration.collectUnsupportedDataSourcesAndThrowException();  assertEquals(2,configuration.getDataSources().size());}  }
class C{  public void focusOnKeyStore(KeyStore keyStore){  int index=findKeyStoreIndex(keyStore);  if (index >= 0) {    jkstpKeyStores.setSelectedIndex(index);  }}  }
class C{  public void addCommonHeader(){  addLine(VERSION_LINE);  final Calendar cal=Calendar.getInstance();  final SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd");  addLine(META_STRING + "fileDate=" + sdf.format(cal.getTime()));  addLine(META_STRING + "source=" + Environment.getVersion());  addRunInfo();}  }
class C{  public synchronized void cacheReposts(List<Long> newRepostIds){  TreeSet<Long> reposts=new TreeSet<>();  reposts.addAll(Longs.asList(repostCache.get()));  reposts.addAll(newRepostIds);  repostCache.set(Longs.toArray(reposts));}  }
class C{  public static <K,V>SynchronizedBiMap<K,V> of(MutableBiMap<K,V> map){  if (map == null) {    throw new IllegalArgumentException("cannot create a SynchronizedBiMap for null");  }  return new SynchronizedBiMap<>(map);}  }
class C{  private void testSpecificValues(){  logger.info("Test specific values...");  GeometryFactory factory=new GeometryFactory();  Point peak=factory.createPoint(new Coordinate(this.sg.getXmin(),this.sg.getYmin()));  boolean specificValueInterpUseful=testSpecificValue(peak.getX(),peak.getY(),this.sg.getValue(peak),this.interpolation.interpolate(peak.getX(),peak.getY()));  if ((this.interpolation.getInterpolationMethod() == 0) && (this.sg.getXmax() > this.sg.getXmin())) {    Point nearpeak=factory.createPoint(new Coordinate(this.sg.getXmin() + 0.5 * this.sg.getResolution(),this.sg.getYmin()));    specificValueInterpUseful=testSpecificValue(nearpeak.getX(),nearpeak.getY(),50,this.interpolation.interpolate(nearpeak.getX(),nearpeak.getY()));    if (this.sg.getYmax() > this.sg.getYmin()) {      Point nearvalley=factory.createPoint(new Coordinate(this.sg.getXmin() + 0.5 * this.sg.getResolution(),this.sg.getYmin() + 0.5 * this.sg.getResolution()));      specificValueInterpUseful=testSpecificValue(nearvalley.getX(),nearvalley.getY(),25,this.interpolation.interpolate(nearvalley.getX(),nearvalley.getY()));    }  }  if (!specificValueInterpUseful) {    logger.warn("The tested specific values are not interpolated useful!");    this.interpolationUseful=false;  }}  }
class C{  public void open(){  database=dbHelper.getWritableDatabase();}  }
class C{  private InetSocketAddress nextInetSocketAddress() throws IOException {  if (!hasNextInetSocketAddress()) {    throw new SocketException("No route to " + address.url().host() + "; exhausted inet socket addresses: "+ inetSocketAddresses);  }  return inetSocketAddresses.get(nextInetSocketAddressIndex++);}  }
class C{  public static DayOfWeek dayOfWeek(DateValue date){  int dayIndex=fixedFromGregorian(date.year(),date.month(),date.day()) % 7;  if (dayIndex < 0) {    dayIndex+=7;  }  return DAYS_OF_WEEK[dayIndex];}  }
class C{  public static byte[] readUrl(URL url) throws IOException {  return readInputStream(new BufferedInputStream(WebServiceTools.openStreamFromURL(url)));}  }
class C{  public void doRefreshTradingdayTable(final Tradingday tradingday){  try {    this.clearStatusBarMessage();    int selectedRow=m_tradingdayTable.getSelectedRow();    m_tradingdayModel.setData(m_tradingdays);    for (int i=0; i < m_tradingdayModel.getRowCount(); i++) {      ZonedDateTime open=((org.trade.core.valuetype.Date)m_tradingdayModel.getValueAt(i,0)).getZonedDateTime();      ZonedDateTime close=((org.trade.core.valuetype.Date)m_tradingdayModel.getValueAt(i,1)).getZonedDateTime();      if (tradingday.getOpen().equals(open) && tradingday.getClose().equals(close)) {        selectedRow=m_tradingdayTable.convertRowIndexToView(i);        break;      }    }    if (selectedRow > -1) {      m_tradingdayTable.setRowSelectionInterval(selectedRow,selectedRow);    } else {      m_tradingdayTable.setRowSelectionInterval(0,0);      enableTradestrategyButtons(null);    }  } catch (  Exception ex) {    this.setErrorMessage("Error refreshing Tradingday.",ex.getMessage(),ex);  }}  }
class C{  private synchronized void receiveFromChannel(SocketChannel channel,DatagramPacket p) throws IOException {  while (frameLengthByteBuffer.hasRemaining()) {    int read=channel.read(frameLengthByteBuffer);    if (read == -1) {      throw new SocketException("Failed to receive data from socket.");    }  }  frameLengthByteBuffer.flip();  int b0=frameLengthByteBuffer.get();  int b1=frameLengthByteBuffer.get();  int frameLength=((b0 & 0xFF) << 8) | (b1 & 0xFF);  frameLengthByteBuffer.flip();  byte[] data=p.getData();  if (data == null || data.length < frameLength)   data=new byte[frameLength];  ByteBuffer byteBuffer=ByteBuffer.wrap(data,0,frameLength);  while (byteBuffer.hasRemaining()) {    int read=channel.read(byteBuffer);    if (read == -1) {      throw new SocketException("Failed to receive data from socket.");    }  }  p.setAddress(getInetAddress());  p.setData(data,0,frameLength);  p.setPort(getPort());}  }
class C{  public void componentResized(ComponentEvent e){  if (AWTEventMonitor.componentListener_private != null) {    AWTEventMonitor.componentListener_private.componentResized(e);  }}  }
class C{  private void buildDefinition(String definitionName,Model model){  if (config.isSeparatedDefinitionsEnabled()) {    MarkupDocBuilder defDocBuilder=copyMarkupDocBuilder();    buildDefinition(definitionName,model,defDocBuilder);    Path definitionFile=outputPath.resolve(resolveDefinitionDocument(definitionName));    defDocBuilder.writeToFileWithoutExtension(definitionFile,StandardCharsets.UTF_8);    if (logger.isInfoEnabled()) {      logger.info("Separate definition file produced : '{}'",definitionFile);    }    definitionRef(definitionName,this.markupDocBuilder);  } else {    buildDefinition(definitionName,model,this.markupDocBuilder);  }}  }
class C{  protected void emit_FunctionTypeExpressionOLD_PrimaryTypeExpression_LeftParenthesisKeyword_0_0_0_1_or___LeftParenthesisKeyword_3_0_q_LeftCurlyBracketKeyword_1_FunctionKeyword_3_LeftParenthesisKeyword_5__(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  try {    InputSource is=null;    if (this.getEntityResolver() != null)     is=this.getEntityResolver().resolveEntity(publicId,systemId);    if (is != null)     return is;    is=new InputSource(new URL(systemId).openStream());    is.setSystemId(systemId);    is.setPublicId(publicId);    return is;  } catch (  IOException e) {    SAXParseException spe=new SAXParseException(Messages.format(Messages.ERR_ENTITY_RESOLUTION_FAILURE,systemId,e.toString()),locator,e);    if (this.getErrorHandler() != null)     this.getErrorHandler().fatalError(spe);    throw spe;  }}  }
class C{  public X509Attribute(String oid,ASN1EncodableVector value){  this.attr=new Attribute(new ASN1ObjectIdentifier(oid),new DERSet(value));}  }
class C{  public void requestBluetoothAccess(Activity activity){  checkNotNull(accessRequester,MSG_BLE_NOT_SUPPORTED);  accessRequester.requestBluetoothAccess(activity);}  }
class C{  protected JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException {switch (c) {case '\'':    if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {      return _handleApostropheValue();    }  break;case 'N':_matchToken("NaN",1);if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {return resetAsNaN("NaN",Double.NaN);}_reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");break;case '+':if (_inputPtr >= _inputEnd) {if (!loadMore()) {_reportInvalidEOFInValue();}}return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF,false);}_reportUnexpectedChar(c,"expected a valid value (number, String, array, object, 'true', 'false' or 'null')");return null;}  }
class C{  public void testLast() throws Exception {  int upper=10;  Range index=getRange("last",upper);  assertEquals("last",index.getRanges());  assertEquals(1,index.getSelection().length);  assertEquals(upper,index.getSelection()[0]);}  }
class C{  private void init(String target){  StringTokenizer t=null;  if (!target.startsWith("\"")) {    throw new IllegalArgumentException("service principal [" + target + "] syntax invalid: "+ "improperly quoted");  } else {    t=new StringTokenizer(target,"\"",false);    subordinate=t.nextToken();    if (t.countTokens() == 2) {      t.nextToken();      service=t.nextToken();    } else     if (t.countTokens() > 0) {      throw new IllegalArgumentException("service principal [" + t.nextToken() + "] syntax invalid: "+ "improperly quoted");    }  }}  }
class C{  protected TaskResourceRep doDiscoverHost(Host host){  String taskId=UUID.randomUUID().toString();  if (host.getDiscoverable() != null && !host.getDiscoverable()) {    host.setDiscoveryStatus(DataCollectionJobStatus.COMPLETE.name());    _dbClient.persistObject(host);  }  if ((host.getDiscoverable() == null || host.getDiscoverable())) {    ComputeSystemController controller=getController(ComputeSystemController.class,"host");    DiscoveredObjectTaskScheduler scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new DiscoverJobExec(controller));    ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);    tasks.add(new AsyncTask(Host.class,host.getId(),taskId));    TaskList taskList=scheduler.scheduleAsyncTasks(tasks);    return taskList.getTaskList().iterator().next();  } else {    Operation op=new Operation();    op.setResourceType(ResourceOperationTypeEnum.DISCOVER_HOST);    op.ready("Host is not discoverable");    _dbClient.createTaskOpStatus(Host.class,host.getId(),taskId,op);    return toTask(host,taskId,op);  }}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  private void heredarInfoValoracionDictaminada(String idSerie,ValoracionSerieVO valoracion){  int[] estados=new int[]{ValoracionSerieVO.ESTADO_EVALUACION_RECHAZADA,ValoracionSerieVO.ESTADO_DICTAMINADA,ValoracionSerieVO.ESTADO_DICTAMEN_RECHAZADO};  ValoracionSerieVO vo=valoracionDBEntity.getValoracionMasReciente(valoracion.getIdSerie(),estados);  if (vo == null)   return;  vo.setListaPlazos(plazosDBEntity.getPlazosValoracion(vo.getId()));  valoracion.setOrdenacionSerie1(vo.getOrdenacionSerie1());  valoracion.setOrdenacionSerie2(vo.getOrdenacionSerie2());  valoracion.setOrdenacionSerie1(vo.getOrdenacionSerie1());  valoracion.setSeriesPrecedentes(vo.getSeriesPrecedentes());  valoracion.setSeriesRelacionadas(vo.getSeriesRelacionadas());  valoracion.setDocumentosRecopilatorios(vo.getDocumentosRecopilatorios());  valoracion.setTipoValorAdministrativo(vo.getTipoValorAdministrativo());  valoracion.setAnosVigenciaAdministrativa(vo.getAnosVigenciaAdministrativa());  valoracion.setValorAdministrativo(vo.getValorAdministrativo());  valoracion.setTipoValorLegal(vo.getTipoValorLegal());  valoracion.setAnosVigenciaLegal(vo.getAnosVigenciaLegal());  valoracion.setValorLegal(vo.getValorLegal());  valoracion.setTipoValorInformativo(vo.getTipoValorInformativo());  valoracion.setValorInformativo(vo.getValorInformativo());  valoracion.setTecnicaMuestreo(vo.getTecnicaMuestreo());  int nSecuencia=nSecValoracion.incrementarNumeroSec();  valoracion.setNumRegistro(nSecuencia);  valoracion.setValorDictamen(vo.getValorDictamen());  valoracion.setValorDictamenValue(vo.getValorDictamenValue());  valoracion.setValorCientifico(vo.getValorCientifico());  valoracion.setTipoValorCientifico(vo.getTipoValorCientifico());  valoracion.setValorTecnologico(vo.getValorTecnologico());  valoracion.setTipoValorTecnologico(vo.getTipoValorTecnologico());  valoracion.setValorCultural(vo.getValorCultural());  valoracion.setTipoValorCultural(vo.getTipoValorCultural());  valoracion.setTipoRegimenAcceso(vo.getTipoRegimenAcceso());  valoracion.setRegimenAcceso(vo.getRegimenAcceso());  valoracion.setAnosRegimenAcceso(vo.getAnosRegimenAcceso());  valoracion.setTipoRegimenAccesoTemporal(vo.getTipoRegimenAccesoTemporal());  valoracion.setListaPlazos(vo.getListaPlazos());}  }
class C{  private void copyBufferedUpdates(File tlogSrc,long offsetSrc,long latestVersion){  recoveryInfo=new RecoveryInfo();  recoveryInfo.positionOfStart=tlog == null ? 0 : tlog.snapshot();  state=State.BUFFERING;  operationFlags|=FLAG_GAP;  ModifiableSolrParams params=new ModifiableSolrParams();  params.set(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM,DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());  SolrQueryRequest req=new LocalSolrQueryRequest(uhandler.core,params);  CdcrTransactionLog src=new CdcrTransactionLog(tlogSrc,null,true);  TransactionLog.LogReader tlogReader=src.getReader(offsetSrc);  try {    int operationAndFlags=0;    for (; ; ) {      Object o=tlogReader.next();      if (o == null)       break;      List entry=(List)o;      operationAndFlags=(Integer)entry.get(0);      int oper=operationAndFlags & OPERATION_MASK;      long version=(Long)entry.get(1);      if (version <= latestVersion) {        log.debug("Dropping buffered operation - version {} < {}",version,latestVersion);        continue;      }switch (oper) {case UpdateLog.ADD:{          SolrInputDocument sdoc=(SolrInputDocument)entry.get(entry.size() - 1);          AddUpdateCommand cmd=new AddUpdateCommand(req);          cmd.solrDoc=sdoc;          cmd.setVersion(version);          cmd.setFlags(UpdateCommand.BUFFERING);          this.add(cmd);          break;        }case UpdateLog.DELETE:{        byte[] idBytes=(byte[])entry.get(2);        DeleteUpdateCommand cmd=new DeleteUpdateCommand(req);        cmd.setIndexedId(new BytesRef(idBytes));        cmd.setVersion(version);        cmd.setFlags(UpdateCommand.BUFFERING);        this.delete(cmd);        break;      }case UpdateLog.DELETE_BY_QUERY:{      String query=(String)entry.get(2);      DeleteUpdateCommand cmd=new DeleteUpdateCommand(req);      cmd.query=query;      cmd.setVersion(version);      cmd.setFlags(UpdateCommand.BUFFERING);      this.deleteByQuery(cmd);      break;    }default :  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Invalid Operation! " + oper);}}} catch (Exception e) {throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to copy buffered updates",e);} finally {try {tlogReader.close();}  finally {this.doClose(src);}}}  }
class C{  public static boolean start(RootDoc root){  KnownPaths.init(contentDirectory,outputDirectory);  init();  loadServiceBlackList();  loadMethodBlackList();  List<ApiService> apiServices=findApiServices(root.classes());  List<ApiErrorCode> errorCodes=findErrorCodes(root.classes());  cleanupMethods(apiServices);  saveMetaData(apiServices);  ApiDifferences apiDifferences=calculateDifferences(apiServices);  generateFiles(apiDifferences,apiServices,errorCodes);  return true;}  }
class C{  public Image modifyAlpha(byte alpha){  int w=getWidth();  int h=getHeight();  int size=w * h;  int[] arr=getRGB();  int alphaInt=(((int)alpha) << 24) & 0xff000000;  for (int iter=0; iter < size; iter++) {    int currentAlpha=(arr[iter] >> 24) & 0xff;    if (currentAlpha != 0) {      arr[iter]=(arr[iter] & 0xffffff) | alphaInt;    }  }  Image i=new Image(arr,w,h);  i.opaqueTested=true;  i.opaque=false;  return i;}  }
class C{  public static CCAccelDeccelAmplitude action(CCIntervalAction action,float d){  return new CCAccelDeccelAmplitude(action,d);}  }
class C{  public static boolean testAarCircle(Vector2dc min,Vector2dc max,Vector2dc center,double radiusSquared){  return testAarCircle(min.x(),min.y(),max.x(),max.y(),center.x(),center.y(),radiusSquared);}  }
class C{  public Intent toIntent(){  return intent;}  }
class C{  @HLELogging(level="info") @HLEFunction(nid=0x1C1FBFE7,version=150) public int sceKernelCreateHeap(int partitionId,int size,int flags,String name){  HeapInformation info=new HeapInformation(partitionId,size,flags,name);  if (info.uid >= 0) {    heaps.put(info.uid,info);  }  return info.uid;}  }
class C{  public void crossValidateModel(Classifier classifier,Instances data,int numFolds,Random random,Object... forPredictionsPrinting) throws Exception {  data=new Instances(data);  data.randomize(random);  if (data.classAttribute().isNominal()) {    data.stratify(numFolds);  }  AbstractOutput classificationOutput=null;  if (forPredictionsPrinting.length > 0) {    classificationOutput=(AbstractOutput)forPredictionsPrinting[0];    classificationOutput.setHeader(data);    classificationOutput.printHeader();  }  for (int i=0; i < numFolds; i++) {    Instances train=data.trainCV(numFolds,i,random);    setPriors(train);    Classifier copiedClassifier=AbstractClassifier.makeCopy(classifier);    copiedClassifier.buildClassifier(train);    Instances test=data.testCV(numFolds,i);    evaluateModel(copiedClassifier,test,forPredictionsPrinting);  }  m_NumFolds=numFolds;  if (classificationOutput != null) {    classificationOutput.printFooter();  }}  }
class C{  @SuppressLint("MissingPermission") public static void showLogin(Context context,AlertDialogBuilder alertDialogBuilder){  Account[] accounts=AccountManager.get(context).getAccountsByType(BuildConfig.APPLICATION_ID);  if (accounts.length == 0) {    context.startActivity(new Intent(context,LoginActivity.class));  } else   if (!TextUtils.isEmpty(Preferences.getUsername(context))) {    context.startActivity(new Intent(context,LoginActivity.class));  } else {    showAccountChooser(context,alertDialogBuilder,accounts);  }}  }
class C{  public static ModifiableDBIDs randomSample(DBIDs source,int k,Random random){  if (k < 0 || k > source.size()) {    throw new IllegalArgumentException("Illegal value for size of random sample: " + k + " > "+ source.size()+ " or < 0");  }  if (random == null) {    random=new FastNonThreadsafeRandom();  }  if (k < source.size() >> 1) {    ArrayDBIDs aids=DBIDUtil.ensureArray(source);    DBIDArrayIter iter=aids.iter();    HashSetModifiableDBIDs sample=DBIDUtil.newHashSet(k);    while (sample.size() < k) {      iter.seek(random.nextInt(aids.size()));      sample.add(iter);    }    return sample;  } else {    ArrayModifiableDBIDs sample=DBIDUtil.newArray(source);    randomShuffle(sample,random,k);    for (int i=sample.size() - 1; i >= k; i--) {      sample.remove(i);    }    return sample;  }}  }
class C{  public static boolean isSupportedFileReplicationCreate(FileShare fs,VirtualPool currentVpool,StringBuffer notSuppReasonBuff){  _log.info(String.format("Checking isSupportedFileReplicationCreate for Fs [%s] with vpool [%s]...",fs.getLabel(),currentVpool.getLabel()));  if (!doBasicMirrorValidation(fs,currentVpool,notSuppReasonBuff)) {    return false;  }  if (fs.getPersonality() != null && fs.getPersonality().equalsIgnoreCase(PersonalityTypes.SOURCE.name()) && !MirrorStatus.DETACHED.name().equalsIgnoreCase(fs.getMirrorStatus())) {    notSuppReasonBuff.append(String.format("File system given in request is an active source file system %s.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  if (fs.getMirrorfsTargets() != null && !fs.getMirrorfsTargets().isEmpty()) {    notSuppReasonBuff.append(String.format("File system given in request has active target file system %s.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  return true;}  }
class C{  private void showNotification(Notification n){  checkQueueSize();  GraphicsConfiguration config=getGraphicsConfig();  Point location=calculateLocation(position,getSafeBounds(config),n.getSize(),getCurrentOffset());  n.setLocation(location);  n.setTimeout(displayTime + (displayTime / 4 * displayed.size()));  if (queue.size() > maxQueueSize && displayed.size() == 0) {    n.setFallbackTimeout(shortMaxDisplayTime);  }  displayed.add(n);  n.show();}  }
class C{  final public MutableString append(final Object o){  return append(String.valueOf(o));}  }
class C{  @Override public boolean canBeShortAddress(int address){  return !isLongAddress(address);}  }
class C{  private void createACL(UnManagedCifsShareACL origACL,List<CifsShareACL> shareACLList,FileShare fileshare){  CifsShareACL shareACL=null;  shareACL=new CifsShareACL();  shareACL.setId(URIUtil.createId(CifsShareACL.class));  String user=origACL.getUser();  if (user != null) {    shareACL.setUser(user);  } else {    shareACL.setGroup(origACL.getGroup());  }  String permissionText=null;switch (origACL.getPermission().toLowerCase()) {case "read":    permissionText=FileControllerConstants.CIFS_SHARE_PERMISSION_READ;  break;case "change":permissionText=FileControllerConstants.CIFS_SHARE_PERMISSION_CHANGE;break;case "full":case "fullcontrol":permissionText=FileControllerConstants.CIFS_SHARE_PERMISSION_FULLCONTROL;break;}shareACL.setPermission(permissionText);shareACL.setShareName(origACL.getShareName());shareACL.setFileSystemId(fileshare.getId());shareACLList.add(shareACL);_logger.info("share ACLs details {}",shareACL.toString());}  }
class C{  public Object clone(){  byte[] newData=new byte[length];  System.arraycopy(data,0,newData,0,newData.length);  ShortMessage msg=new ShortMessage(newData);  return msg;}  }
class C{  private NumericShaper(int ranges,int defaultContext,boolean isContextual){  this.fRanges=ranges;  this.fDefaultContextIndex=getIndexFromRange(defaultContext);  this.fContextual=isContextual;  if (!fContextual) {    fSingleRangeIndex=getIndexFromRange(ranges);  }}  }
class C{  protected ModuleFilterImpl(){  super();}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  public TreeNodeIterator(Node root,boolean preorder){  m_preorder=preorder;  m_root=root;  m_stack=new ArrayList();  m_stack.add(root);  if (!preorder) {    for (Node n=root.getChild(0); n != null; n=n.getChild(0))     m_stack.add(n);  }}  }
class C{  public int indexOf(int elem,int index){  if (index >= m_firstFree)   return -1;  int bindex=index >>> m_SHIFT;  int boffset=index & m_MASK;  int maxindex=m_firstFree >>> m_SHIFT;  int[] block;  for (; bindex < maxindex; ++bindex) {    block=m_map[bindex];    if (block != null)     for (int offset=boffset; offset < m_blocksize; ++offset)     if (block[offset] == elem)     return offset + bindex * m_blocksize;    boffset=0;  }  int maxoffset=m_firstFree & m_MASK;  block=m_map[maxindex];  for (int offset=boffset; offset < maxoffset; ++offset)   if (block[offset] == elem)   return offset + maxindex * m_blocksize;  return -1;}  }
class C{  public <T>T updateAndProcessGeneratedKeys(@NotNull ResultSetProcessor<T> generatedKeysProcessor,@NotNull List<String> columnNames,@NotNull SqlQuery query){  return withCurrentTransaction(query,null);}  }
class C{  public double doubleValue(){  assertDefined();  return m_value.doubleValue();}  }
class C{  public ChannelItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private boolean isLogLibraryAvailable(String name,String classname){  if (isDiagnosticsEnabled()) {    logDiagnostic("Checking for '" + name + "'.");  }  try {    Log log=createLogFromClass(classname,this.getClass().getName(),false);    if (log == null) {      if (isDiagnosticsEnabled()) {        logDiagnostic("Did not find '" + name + "'.");      }      return false;    } else {      if (isDiagnosticsEnabled()) {        logDiagnostic("Found '" + name + "'.");      }      return true;    }  } catch (  LogConfigurationException e) {    if (isDiagnosticsEnabled()) {      logDiagnostic("Logging system '" + name + "' is available but not useable.");    }    return false;  }}  }
class C{  void forgetAllOpeners(){  TabModel currentModel=mTabModelSelector.getCurrentModel();  int count=currentModel.getCount();  for (int i=0; i < count; i++) {    currentModel.getTabAt(i).setGroupedWithParent(false);  }}  }
class C{  public Builder withComplete(boolean complete){  request.complete=complete;  return this;}  }
class C{  static double lg(double x){  return (Math.log(x) / Math.log(2.0));}  }
class C{  public void nullCall(){}  }
class C{  public static int fastApproximateWordCount(String string){  Matcher m=PATTERN.matcher(string);  int count=1;  while (m.find()) {    count++;  }  return count;}  }
class C{  public NodeList allElements(Element e){  ArrayList theElements=new ArrayList();  treeWalk(e,theElements);  return new NodeList(theElements,false);}  }
class C{  public void open(){  Shell shell=new Shell(getParent(),getStyle());  shell.setText(getText());  createContents(shell);  shell.pack();  SWTUtils.center(shell);  shell.open();  Display display=getParent().getDisplay();  while (!shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  public static void submitGraphOptimizerJob(OptimizableBipartiteGraph graph,OptimizableBipartiteGraphSegment segment){  OPTIMIZER_SERVICE.submit(new GraphOptimizerJob(graph,segment));}  }
class C{  protected Double wrapValue(double k){  return new Double(k);}  }
class C{  public static byte[] toBytes(Bitmap bmp){  ByteArrayOutputStream stream=new ByteArrayOutputStream();  bmp.compress(Bitmap.CompressFormat.PNG,100,stream);  return stream.toByteArray();}  }
class C{  private void validateMasterInstanceDefinition(MasterInstanceDefinition masterInstanceDefinition){  InstanceDefinition instanceDefinition=new InstanceDefinition();  instanceDefinition.setInstanceCount(masterInstanceDefinition.getInstanceCount());  instanceDefinition.setInstanceMaxSearchPrice(masterInstanceDefinition.getInstanceMaxSearchPrice());  instanceDefinition.setInstanceOnDemandThreshold(masterInstanceDefinition.getInstanceOnDemandThreshold());  instanceDefinition.setInstanceSpotPrice(masterInstanceDefinition.getInstanceSpotPrice());  instanceDefinition.setInstanceType(masterInstanceDefinition.getInstanceType());  validateInstanceDefinition("master",instanceDefinition,1);}  }
class C{  public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  buildTree(data,m_subtreeRaising || !m_cleanup);  if (m_collapseTheTree) {    collapse();  }  if (m_pruneTheTree) {    prune();  }  if (m_cleanup) {    cleanup(new Instances(data,0));  }}  }
class C{  private ManagedResourceType(String name,Class clazz){  this.name=name;  this.clazz=clazz;}  }
class C{  public UncheckedExecutionException(@Nullable String message,@Nullable Throwable cause){  super(message,cause);}  }
class C{  public short nextShort(){  return nextShort(defaultRadix);}  }
class C{  public static double[] readDoubles(String filename){  return new In(filename).readAllDoubles();}  }
class C{  public String addDays(Object odays,String format){  int days=FunctionHandler.getInt(odays);  Calendar now=Calendar.getInstance();  now.add(Calendar.DAY_OF_YEAR,days);  DateFormat formatter=getFormatter(format);  return formatter.format(now.getTime());}  }
class C{  public E last(){  return backingMap.lastKey();}  }
class C{  @Override public boolean mayIntersect(S2Cell cell){  S2LatLngRect cellBound=cell.getRectBound();  if (!bound.intersects(cellBound)) {    return false;  }  return new S2Loop(cell,cellBound).intersects(this);}  }
class C{  static Object newInstance(ClassLoader classLoader,String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException {  Class driverClass;  if (classLoader == null) {    driverClass=Class.forName(className);  } else {    driverClass=classLoader.loadClass(className);  }  return driverClass.newInstance();}  }
class C{  private void createLicenseObject(List<LicenseInfoExt> licenseInfoExts,License license){  if (licenseInfoExts.isEmpty()) {    return;  }  for (  LicenseInfoExt licenseExt : licenseInfoExts) {    LicenseFeature licenseFeature=createLicenseFeatureFromLicenseInfoExt(licenseExt);    license.addLicenseFeature(licenseFeature);  }}  }
class C{  public MalformedChallengeException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public static double uniform(double a,double b){  if (!(a < b))   throw new IllegalArgumentException("Invalid range");  return a + uniform() * (b - a);}  }
class C{  public Builder timestamps(Boolean timestamps){  this.timestamps=timestamps;  return this;}  }
class C{  public void test() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter riw=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new TextField("eng",new BugReproTokenStream()));  riw.addDocument(doc);  riw.close();  dir.close();}  }
class C{  @Inline public static boolean wordTryCompareAndSwap(Object ref,Offset offset,Word old,Word value){  if (NEEDS_WORD_GC_WRITE_BARRIER || NEEDS_WORD_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().wordTryCompareAndSwap(src,src.toAddress().plus(offset),old,value,offset.toWord(),Word.zero(),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  protected String encodeBody(){  return encode(new StringBuffer()).toString();}  }
class C{  public void printVariable(Vertex variable,Writer writer,String indent,Set<Vertex> elements,Network network) throws IOException {  boolean hasComments=printComments(variable,writer,indent,false,network);  Iterator<Relationship> iterator=variable.allRelationships();  if (!hasComments && variable.totalRelationships() <= 1) {    return;  }  List<Vertex> localElements=new ArrayList<Vertex>();  writer.write(indent);  printElement(variable,writer,indent,null,null,elements,network);  writer.write(" {\r\n");  writer.write(indent);  while (iterator.hasNext()) {    Relationship relationship=iterator.next();    Vertex type=relationship.getType();    Vertex target=relationship.getTarget();    if ((type.is(Primitive.INSTANTIATION) && (target.is(Primitive.VARIABLE)))) {      continue;    }    if (type.instanceOf(Primitive.VARIABLE) && !elements.contains(type)) {      localElements.add(type);      elements.add(type);    }    if (target.instanceOf(Primitive.VARIABLE) && !elements.contains(target)) {      localElements.add(target);      elements.add(target);    }    boolean equality=type.is(Primitive.EQUALS);    if (relationship.isInverse()) {      writer.write("\texclude ");    } else     if (equality) {      writer.write("\tinclude ");    } else {      writer.write("\tset ");    }    if (equality) {      printElement(target,writer,indent,null,null,elements,network);    } else {      printElement(type,writer,indent,null,null,elements,network);      if (relationship.isInverse()) {        writer.write(" from ");      } else {        writer.write(" to ");      }      printElement(target,writer,indent,null,null,elements,network);    }    writer.write(";\r\n");    writer.write(indent);  }  writer.write("}\r\n");  for (  Vertex element : localElements) {    printVariable(element,writer,indent,elements,network);  }}  }
class C{  @Inject public ProfileExtension(ActionManager actionManager,RedirectToDashboardAccountAction redirectToDashboardAccountAction,ProfileLocalizationConstant localizationConstant){  actionManager.registerAction(localizationConstant.redirectToDashboardAccountAction(),redirectToDashboardAccountAction);  Constraints constraint=new Constraints(Anchor.FIRST,null);  DefaultActionGroup profileActionGroup=(DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_PROFILE);  profileActionGroup.add(redirectToDashboardAccountAction,constraint);}  }
class C{  public ShingleFilter(TokenStream input){  this(input,DEFAULT_MIN_SHINGLE_SIZE,DEFAULT_MAX_SHINGLE_SIZE);}  }
class C{  public void put(double val){  min=val < min ? val : min;  max=val > max ? val : max;}  }
class C{  private void updateListsForTotals(){  if (total.get(0) != null) {    total.get(0).setAccountNumber("Total (A)");    total.get(0).setBankName(" ");    total.get(0).setGlcode(null);    receiptList.add(total.get(0));  }  if (total.get(1) != null) {    total.get(1).setAccountNumber("Total (B)");    total.get(1).setBankName(" ");    total.get(1).setGlcode(null);    paymentList.add(total.get(1));  }  total.get(2).setAccountNumber("Grand Total (A+B)");  total.get(2).setBankName(" ");  total.get(2).setGlcode(null);  total.get(2).setCurrentReceipt(null);  total.get(2).setBtbPayment(null);  total.get(2).setBtbReceipt(null);  total.get(2).setConcurranceBPV(null);  paymentList.add(total.get(2));}  }
class C{  public static Set<Emoticon> parseGlobalEmotes(String json){  try {    JSONParser parser=new JSONParser();    JSONObject o=(JSONObject)parser.parse(json);    JSONArray defaultSets=(JSONArray)o.get("default_sets");    JSONObject sets=(JSONObject)o.get("sets");    for (    Object setObject : defaultSets) {      int set=((Number)setObject).intValue();      JSONObject setData=(JSONObject)sets.get(String.valueOf(set));      return parseEmoteSet(setData,null,null);    }  } catch (  ParseException|ClassCastException|NullPointerException ex) {    LOGGER.warning("Error parsing global FFZ emotes: " + ex);  }  return new HashSet<>();}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("TextCriterion ( ").append("operator = ").append(this.operator).append(TAB).append("type = ").append(this.type).append(TAB).append(" )");  return retValue.toString();}  }
class C{  public LoanApplicationTestBuilder withSyncDisbursementWithMeetin(){  this.syncDisbursementWithMeeting=true;  return this;}  }
class C{  public static ElementOccurrenceCount emptyElement(){  return empty;}  }
class C{  public static Geometry octagonalEnvelope(Geometry geom){  return (new OctagonalEnvelope(geom)).toGeometry(geom.getFactory());}  }
class C{  protected void updateMenu(){  boolean present;  present=(m_Statistics != null) && (m_Statistics.size() > 0);  m_MenuItemOpen.setEnabled(true);  m_MenuItemSaveAsRaw.setEnabled(present);  m_MenuItemSaveAsAggregated.setEnabled(present);  m_MenuItemSaveAsMeasurement.setEnabled(present);}  }
class C{  @Override protected FluidTank[] createTanks(){  return new FluidTank[]{new FluidTank(1000),new FluidTank(1000),new FluidTank(1000)};}  }
class C{  public RateLimitedException(String message,long retryAfter,RateLimitType type,Server server,RateLimitManager manager){  super(message);  this.retryAfter=retryAfter;  this.type=type;  this.server=server;  this.manager=manager;}  }
class C{  public void scanJarFile(){  fileCombo.removeAllItems();  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    while ((entry=zin.getNextJarEntry()) != null) {      String nameOfEntry=entry.getName();      if (nameOfEntry.endsWith(".wav-gsci"))       fileCombo.addItem(nameOfEntry);      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean containsGameChatTab(Connector connector,String gameId){  boolean result=false;  for (  RaptorTabFolder folder : folders) {    for (int i=0; i < folder.getItemCount(); i++) {      if (folder.getRaptorTabItemAt(i).raptorItem instanceof ChatConsoleWindowItem) {        ChatConsoleWindowItem item=(ChatConsoleWindowItem)folder.getRaptorTabItemAt(i).raptorItem;        if (item.getController().getConnector() == connector && item.getController() instanceof GameChatController) {          GameChatController controller=(GameChatController)item.getController();          if (StringUtils.equalsIgnoreCase(controller.getGameId(),gameId)) {            result=true;            break;          }        }      }    }  }  return result;}  }
class C{  private void fixUseCFMergePolicyInitArg(Class c){  if (null == mergePolicyInfo || null == mergePolicyInfo.initArgs)   return;  Object useCFSArg=mergePolicyInfo.initArgs.remove("useCompoundFile");  if (null != useCFSArg) {    log.warn("Ignoring 'useCompoundFile' specified as an init arg for the <mergePolicy> since it is no directly longer supported by " + c.getSimpleName());    if (useCFSArg instanceof Boolean) {      boolean cfs=((Boolean)useCFSArg).booleanValue();      log.warn("Please update your config to specify <useCompoundFile>" + cfs + "</useCompoundFile> directly in your <indexConfig> settings.");      effectiveUseCompountFileSetting=cfs;    } else {      log.error("MergePolicy's 'useCompoundFile' init arg is not a boolean, can not apply back compat logic to apply to the IndexWriterConfig: " + useCFSArg.toString());    }  }}  }
class C{  private void parseSkinAttr(Context context,AttributeSet attrs,View view){  List<SkinAttr> viewAttrs=new ArrayList<SkinAttr>();  for (int i=0; i < attrs.getAttributeCount(); i++) {    String attrName=attrs.getAttributeName(i);    String attrValue=attrs.getAttributeValue(i);    if (!AttrFactory.isSupportedAttr(attrName)) {      continue;    }    if (attrValue.startsWith("@")) {      try {        int id=Integer.parseInt(attrValue.substring(1));        String entryName=context.getResources().getResourceEntryName(id);        String typeName=context.getResources().getResourceTypeName(id);        SkinAttr mSkinAttr=AttrFactory.get(attrName,id,entryName,typeName);        if (mSkinAttr != null) {          viewAttrs.add(mSkinAttr);        }      } catch (      NumberFormatException e) {        e.printStackTrace();      }catch (      NotFoundException e) {        e.printStackTrace();      }    }  }  if (!ListUtils.isEmpty(viewAttrs)) {    SkinItem skinItem=new SkinItem();    skinItem.view=view;    skinItem.attrs=viewAttrs;    mSkinItems.add(skinItem);    if (SkinManager.getInstance().isExternalSkin()) {      skinItem.apply();    }  }}  }
class C{  public static boolean isInterestingObligation(ObligationStatus status){  int obState=status.getObligationState();  String[] proverStatuses=ColorPredicate.proverStatuses(obState);  boolean oneSucceeded=false;  boolean oneFailed=false;  boolean oneStopped=false;  for (int i=0; i < proverStatuses.length; i++) {    if (proverStatuses[i].equals(ColorPredicate.PROVING_STATUS)) {      return true;    } else     if (proverStatuses[i].equals(ColorPredicate.FAILED_STATUS)) {      oneFailed=true;    } else     if (proverStatuses[i].equals(ColorPredicate.STOPPED_STATUS)) {      oneStopped=true;    } else     if (proverStatuses[i].equals(ColorPredicate.PROVED_STATUS)) {      oneSucceeded=true;    }  }  return !oneSucceeded && (oneFailed || oneStopped);}  }
class C{  public LabelProviderClient(Context context,String authority){  mLabelsContentUri=new Uri.Builder().scheme("content").authority(authority).path(LABELS_PATH).build();  mPackageSummaryContentUri=new Uri.Builder().scheme("content").authority(authority).path(PACKAGE_SUMMARY_PATH).build();  final ContentResolver contentResolver=context.getContentResolver();  mClient=contentResolver.acquireContentProviderClient(mLabelsContentUri);  if (mClient == null) {    LogUtils.log(this,Log.WARN,"Failed to acquire content provider client.");  }}  }
class C{  public Polygon2D(Rectangle2D rec){  if (rec == null) {    throw new IndexOutOfBoundsException("null Rectangle");  }  npoints=4;  xpoints=new float[4];  ypoints=new float[4];  xpoints[0]=(float)rec.getMinX();  ypoints[0]=(float)rec.getMinY();  xpoints[1]=(float)rec.getMaxX();  ypoints[1]=(float)rec.getMinY();  xpoints[2]=(float)rec.getMaxX();  ypoints[2]=(float)rec.getMaxY();  xpoints[3]=(float)rec.getMinX();  ypoints[3]=(float)rec.getMaxY();  calculatePath();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Config(SolrResourceLoader loader,String name) throws ParserConfigurationException, IOException, SAXException {  this(loader,name,null,null);}  }
class C{  @Override public void flush() throws IOException {  getDelegate().flush();  logStream().flush();}  }
class C{  public static void zoomNode(final ZyGraph graph,final NaviNode node){  checkArguments(graph);  ZoomFunctions.zoomToNode(graph,node);}  }
class C{  private static void addFld(String id,String text,Element parent){  Element fld=parent.addElement(XML_FLD_UPPERF_TEXT);  fld.addElement(XML_ID_TEXT).addText(id);  fld.addElement(XML_TEXT_TEXT).add(DocumentHelper.createCDATA(text));}  }
class C{  public void tryToDeleteFileTransfer(String transferId){  if (mMessagingLog.isGroupFileTransfer(transferId)) {    mImDeleteOperationHandler.post(new GroupFileTransferDeleteTask(mFileTransferService,this,mLocalContentResolver,mMessagingLog.getFileTransferChatId(transferId),transferId));  } else {    mImDeleteOperationHandler.post(new OneToOneFileTransferDeleteTask(mFileTransferService,this,mLocalContentResolver,transferId));  }}  }
class C{  protected StepInstance(){}  }
class C{  protected ReceivingOrder(){}  }
class C{  public void solve2(){  final Vec2 w1=m_v1.w;  final Vec2 w2=m_v2.w;  e12.set(w2).subLocal(w1);  float d12_2=-Vec2.dot(w1,e12);  if (d12_2 <= 0.0f) {    m_v1.a=1.0f;    m_count=1;    return;  }  float d12_1=Vec2.dot(w2,e12);  if (d12_1 <= 0.0f) {    m_v2.a=1.0f;    m_count=1;    m_v1.set(m_v2);    return;  }  float inv_d12=1.0f / (d12_1 + d12_2);  m_v1.a=d12_1 * inv_d12;  m_v2.a=d12_2 * inv_d12;  m_count=2;}  }
class C{  @PostConstruct void init(){  super.init(swModuleTableHeader,swModuleTable,swModuleDetails);}  }
class C{  public String toString(){  StringBuffer b=new StringBuffer();  if (isChildListProperty()) {    b.append("ChildList");  }  if (isChildProperty()) {    b.append("Child");  }  if (isSimpleProperty()) {    b.append("Simple");  }  b.append("Property[");  if (this.nodeClass != null) {    b.append(this.nodeClass.getName());  }  b.append(",");  if (this.propertyId != null) {    b.append(this.propertyId);  }  b.append("]");  return b.toString();}  }
class C{  protected void onSetPrivate(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  @SuppressWarnings("PMD.CompareObjectsWithEquals") private static int compareSockets(OutputSocket<?> a,OutputSocket<?> b,ImmutableList<Step> steps,ImmutableList<Source> sources){  if (a.getStep().isPresent() && b.getStep().isPresent()) {    final Step stepA=a.getStep().get();    final Step stepB=b.getStep().get();    if (stepA == stepB) {      return stepA.getOutputSockets().stream().filter(null).findFirst().get() == a ? -1 : 1;    } else {      return steps.stream().filter(null).findFirst().get() == stepA ? -1 : 1;    }  }  if (a.getSource().isPresent() && b.getSource().isPresent()) {    final Source sourceA=a.getSource().get();    final Source sourceB=b.getSource().get();    if (sourceA == sourceB) {      return sourceA.getOutputSockets().stream().filter(null).findFirst().get() == a ? -1 : 1;    } else {      return sources.stream().filter(null).findFirst().get() == sourceA ? -1 : 1;    }  }  return b.getStep().isPresent() ? -1 : 1;}  }
class C{  public ChooseSpreadsheetFrame(SpreadsheetService spreadsheetService){  service=spreadsheetService;  factory=FeedURLFactory.getDefault();  initializeGui();}  }
class C{  public StorageUnitEntity createStorageUnitEntity(StorageEntity storageEntity,BusinessObjectDataEntity businessObjectDataEntity,StorageUnitStatusEntity storageUnitStatusEntity,String directoryPath){  StorageUnitEntity storageUnitEntity=new StorageUnitEntity();  storageUnitEntity.setStorage(storageEntity);  storageUnitEntity.setBusinessObjectData(businessObjectDataEntity);  storageUnitEntity.setDirectoryPath(directoryPath);  storageUnitEntity.setStatus(storageUnitStatusEntity);  return storageUnitDao.saveAndRefresh(storageUnitEntity);}  }
class C{  public String sensorEventId(String sensorId,String eventId){  return sensorId + "." + eventId;}  }
class C{  public void registerCoprhdInKeystone(String managerDN,StringSet serverUrls,String managerPassword){  _log.debug("START - register CoprHD in Keystone");  KeystoneApiClient keystoneApi=getKeystoneApi(managerDN,serverUrls,managerPassword);  String cinderv2ServiceId=findServiceId(keystoneApi,KeystoneUtils.OPENSTACK_CINDER_V2_NAME);  String cinderServiceId=findServiceId(keystoneApi,KeystoneUtils.OPENSTACK_CINDER_V1_NAME);  if (cinderv2ServiceId == null) {    ServiceV2 service=prepareNewCinderService(true);    CreateServiceResponse response=keystoneApi.createKeystoneService(service);    cinderv2ServiceId=response.getService().getId();  } else {    deleteKeystoneEndpoint(keystoneApi,cinderv2ServiceId);  }  if (cinderServiceId == null) {    ServiceV2 service=prepareNewCinderService(false);    CreateServiceResponse response=keystoneApi.createKeystoneService(service);    cinderServiceId=response.getService().getId();  } else {    deleteKeystoneEndpoint(keystoneApi,cinderServiceId);  }  String region=getRegionForService(keystoneApi,cinderv2ServiceId);  if (region == null) {    region=KeystoneUtils.OPENSTACK_DEFAULT_REGION;  }  EndpointV2 newEndpointV2=prepareNewCinderEndpoint(region,cinderv2ServiceId,true);  EndpointV2 newEndpointV1=prepareNewCinderEndpoint(region,cinderServiceId,false);  keystoneApi.createKeystoneEndpoint(newEndpointV2);  keystoneApi.createKeystoneEndpoint(newEndpointV1);  _log.debug("END - register CoprHD in Keystone");}  }
class C{  public static void removeNotUsedTransitLinks(TransitSchedule schedule,Network network,Set<String> modesToKeep,boolean keepOppositeLinks){  log.info("... Removing links that are not used by public transit");  Set<Id<Link>> usedTransitLinkIds=new HashSet<>();  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      if (route.getRoute() != null)       usedTransitLinkIds.addAll(ScheduleTools.getTransitRouteLinkIds(route));    }  }  Map<Id<Link>,? extends Link> links=network.getLinks();  if (keepOppositeLinks) {    for (    Id<Link> linkId : new HashSet<>(usedTransitLinkIds)) {      Link oppositeLink=NetworkTools.getOppositeLink(links.get(linkId));      if (oppositeLink != null)       usedTransitLinkIds.add(oppositeLink.getId());    }  }  int linksRemoved=0;  for (  Link link : new HashSet<>(network.getLinks().values())) {    if (!contrib.publicTransitMapping.tools.MiscUtils.setsShareMinOneStringEntry(link.getAllowedModes(),modesToKeep) && !usedTransitLinkIds.contains(link.getId())) {      network.removeLink(link.getId());      linksRemoved++;    } else     if (contrib.publicTransitMapping.tools.MiscUtils.setsShareMinOneStringEntry(link.getAllowedModes(),modesToKeep) && !usedTransitLinkIds.contains(link.getId())) {      link.setAllowedModes(MiscUtils.getSharedSetStringEntries(link.getAllowedModes(),modesToKeep));    }  }  for (  Node n : new HashSet<>(network.getNodes().values())) {    if (n.getOutLinks().size() == 0 && n.getInLinks().size() == 0) {      network.removeNode(n.getId());    }  }  log.info("    " + linksRemoved + " links removed");}  }
class C{  public FloatDataBox(float[][] data){  int length=data[0].length;  for (  float[] datum : data) {    if (datum.length != length) {      throw new IllegalArgumentException("All rows must have same length.");    }  }  this.data=data;}  }
class C{  public SyncMessage(SyncMessage other){  if (other.isSetType()) {    this.type=other.type;  }  if (other.isSetHello()) {    this.hello=new HelloMessage(other.hello);  }  if (other.isSetError()) {    this.error=new ErrorMessage(other.error);  }  if (other.isSetEchoRequest()) {    this.echoRequest=new EchoRequestMessage(other.echoRequest);  }  if (other.isSetEchoReply()) {    this.echoReply=new EchoReplyMessage(other.echoReply);  }  if (other.isSetGetRequest()) {    this.getRequest=new GetRequestMessage(other.getRequest);  }  if (other.isSetGetResponse()) {    this.getResponse=new GetResponseMessage(other.getResponse);  }  if (other.isSetPutRequest()) {    this.putRequest=new PutRequestMessage(other.putRequest);  }  if (other.isSetPutResponse()) {    this.putResponse=new PutResponseMessage(other.putResponse);  }  if (other.isSetDeleteRequest()) {    this.deleteRequest=new DeleteRequestMessage(other.deleteRequest);  }  if (other.isSetDeleteResponse()) {    this.deleteResponse=new DeleteResponseMessage(other.deleteResponse);  }  if (other.isSetSyncValue()) {    this.syncValue=new SyncValueMessage(other.syncValue);  }  if (other.isSetSyncValueResponse()) {    this.syncValueResponse=new SyncValueResponseMessage(other.syncValueResponse);  }  if (other.isSetSyncOffer()) {    this.syncOffer=new SyncOfferMessage(other.syncOffer);  }  if (other.isSetSyncRequest()) {    this.syncRequest=new SyncRequestMessage(other.syncRequest);  }  if (other.isSetFullSyncRequest()) {    this.fullSyncRequest=new FullSyncRequestMessage(other.fullSyncRequest);  }  if (other.isSetCursorRequest()) {    this.cursorRequest=new CursorRequestMessage(other.cursorRequest);  }  if (other.isSetCursorResponse()) {    this.cursorResponse=new CursorResponseMessage(other.cursorResponse);  }  if (other.isSetRegisterRequest()) {    this.registerRequest=new RegisterRequestMessage(other.registerRequest);  }  if (other.isSetRegisterResponse()) {    this.registerResponse=new RegisterResponseMessage(other.registerResponse);  }  if (other.isSetClusterJoinRequest()) {    this.clusterJoinRequest=new ClusterJoinRequestMessage(other.clusterJoinRequest);  }  if (other.isSetClusterJoinResponse()) {    this.clusterJoinResponse=new ClusterJoinResponseMessage(other.clusterJoinResponse);  }}  }
class C{  public final void pushNamespaceContext(PrefixResolver pr){  m_prefixResolvers.push(pr);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public Table.Builder<? extends Table> newTableBuilder(int tag,ReadableFontData srcData){  WritableFontData data;  data=WritableFontData.createWritableFontData(srcData.length());  srcData.copyTo(data);  Header header=new Header(tag,data.length());  Table.Builder<? extends Table> builder=Table.Builder.getBuilder(header,data);  this.tableBuilders.put(tag,builder);  return builder;}  }
class C{  public static int nullSafeHashCode(long[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + hashCode(array[i]);  }  return hash;}  }
class C{  ChildTestIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);}  }
class C{  static float smooth(float prevValue,float newValue,float a){  return a * newValue + (1 - a) * prevValue;}  }
class C{  public static final void fillRectangleFromStartToEnd(GL2 gl,double sx,double sy,double ex,double ey){  gl.glBegin(GL2.GL_QUADS);  gl.glVertex2d(sx,sy);  gl.glVertex2d(ex,sy);  gl.glVertex2d(ex,ey);  gl.glVertex2d(sx,ey);  gl.glEnd();}  }
class C{  @SuppressWarnings("deprecation") public static BinaryMatrixCharacteristics readBlocksFromSequenceFile(String directory,int rowsInBlock,int colsInBlock){  try {    FileSystem fs=FileSystem.get(conf);    FileStatus[] files=fs.listStatus(new Path(directory));    HashMap<MatrixIndexes,Double> valueMap=new HashMap<MatrixIndexes,Double>();    int rowsInLastBlock=-1;    int colsInLastBlock=-1;    int rows=0;    int cols=0;    MatrixIndexes indexes=new MatrixIndexes();    MatrixBlock value=new MatrixBlock();    for (    FileStatus file : files) {      SequenceFile.Reader reader=new SequenceFile.Reader(FileSystem.get(conf),file.getPath(),conf);      while (reader.next(indexes,value)) {        if (value.getNumRows() < rowsInBlock) {          if (rowsInLastBlock == -1)           rowsInLastBlock=value.getNumRows(); else           if (rowsInLastBlock != value.getNumRows())           fail("invalid block sizes");          rows=(int)((indexes.getRowIndex() - 1) * rowsInBlock + value.getNumRows());        } else         if (value.getNumRows() == rowsInBlock) {          if (rows <= (indexes.getRowIndex() * rowsInBlock + value.getNumRows())) {            if (rowsInLastBlock == -1)             rows=(int)((indexes.getRowIndex() - 1) * rowsInBlock + value.getNumRows()); else             fail("invalid block sizes");          }        } else {          fail("invalid block sizes");        }        if (value.getNumColumns() < colsInBlock) {          if (colsInLastBlock == -1)           colsInLastBlock=value.getNumColumns(); else           if (colsInLastBlock != value.getNumColumns())           fail("invalid block sizes");          cols=(int)((indexes.getColumnIndex() - 1) * colsInBlock + value.getNumColumns());        } else         if (value.getNumColumns() == colsInBlock) {          if (cols <= (indexes.getColumnIndex() * colsInBlock + value.getNumColumns())) {            if (colsInLastBlock == -1)             cols=(int)((indexes.getColumnIndex() - 1) * colsInBlock + value.getNumColumns()); else             fail("invalid block sizes");          }        } else {          fail("invalid block sizes");        }        if (value.isInSparseFormat()) {          Iterator<IJV> iter=value.getSparseBlockIterator();          while (iter.hasNext()) {            IJV cell=iter.next();            valueMap.put(new MatrixIndexes(((indexes.getRowIndex() - 1) * rowsInBlock + cell.getI()),(int)((indexes.getColumnIndex() - 1) * colsInBlock + cell.getJ())),cell.getV());          }        } else {          double[] valuesInBlock=value.getDenseBlock();          for (int i=0; i < value.getNumRows(); i++) {            for (int j=0; j < value.getNumColumns(); j++) {              valueMap.put(new MatrixIndexes(((indexes.getRowIndex() - 1) * rowsInBlock + i),(int)((indexes.getColumnIndex() - 1) * colsInBlock + j)),valuesInBlock[i * value.getNumColumns() + j]);            }          }        }      }      reader.close();    }    long nonZeros=0;    double[][] values=new double[rows][cols];    for (    MatrixIndexes index : valueMap.keySet()) {      values[(int)index.getRowIndex()][(int)index.getColumnIndex()]=valueMap.get(index);      if (valueMap.get(index) != 0)       nonZeros++;    }    return new BinaryMatrixCharacteristics(values,rows,cols,rowsInBlock,rowsInLastBlock,colsInBlock,colsInLastBlock,nonZeros);  } catch (  IOException e) {    e.printStackTrace();    fail("unable to read sequence file in " + directory);  }  return null;}  }
class C{  public static double logSum(double[] logInputs){  return logSum(logInputs,logInputs.length);}  }
class C{  static <T>void accept(Sink<T> this_,double value){  throw new IllegalStateException("called wrong accept method");}  }
class C{  public synchronized static void configure(String location,HGConfiguration config){  location=normalize(location);  configs.put(location,config);}  }
class C{  private boolean isIdle(){  return mTelephonyManager != null && mTelephonyManager.getCallState() == TelephonyManager.CALL_STATE_IDLE;}  }
class C{  private void stageVersionCheck(){  if (serverReply == CheckResult.UNKNOWN) {    final String user=PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(Preferences.KEY_CREDENTIALS_USER,null);    final String password=PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(Preferences.KEY_CREDENTIALS_PASSWORD,null);    final String[] params={RadioBeacon.VERSION_COMPATIBILITY,user,password};    new CheckServerTask(getActivity(),this).execute(params);  } else   if (serverReply == CheckResult.PASSED) {    stageLocalChecks();  }}  }
class C{  public void stop(){  mContext.unregisterReceiver(mReceiver);}  }
class C{  public synchronized <InputT,InterT,OutputT>Aggregator<InputT,OutputT> createAggregator(Accumulator<NamedAggregators> accum,String named,Combine.CombineFn<? super InputT,InterT,OutputT> combineFn){  @SuppressWarnings("unchecked") Aggregator<InputT,OutputT> aggregator=(Aggregator<InputT,OutputT>)aggregators.get(named);  if (aggregator == null) {    @SuppressWarnings("unchecked") NamedAggregators.CombineFunctionState<InputT,InterT,OutputT> state=new NamedAggregators.CombineFunctionState<>((Combine.CombineFn<InputT,InterT,OutputT>)combineFn,(Coder<InputT>)getCoder(combineFn),this);    accum.add(new NamedAggregators(named,state));    aggregator=new SparkAggregator<>(named,state);    aggregators.put(named,aggregator);  }  return aggregator;}  }
class C{  public AbstractPersistentConcurrentOffHeapCache(Factory<? extends PinnableSegment<K,V>> segmentFactory){  super(segmentFactory);}  }
class C{  private int[][] mutateCombinations(int partition[][],Random r){  int from=r.nextInt(partition.length);  int i=r.nextInt(partition[from].length);  int to=r.nextInt(partition.length);  if (to == from) {    partition=Arrays.copyOf(partition,partition.length + 1);    partition[partition.length - 1]=new int[]{partition[from][i]};    to=partition.length + 1;    partition[from]=A.delete(partition[from],i);  } else {    partition[to]=A.append(partition[to],partition[from][i]);    partition[from]=A.delete(partition[from],i);  }  if (partition[from].length <= 0) {    partition[from]=partition[partition.length - 1];    partition=Arrays.copyOf(partition,partition.length - 1);  }  return partition;}  }
class C{  public void waitResponse(){synchronized (this) {    try {      super.wait(mRcsSettings.getMsrpTransactionTimeout());    } catch (    InterruptedException e) {    }  }}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + this.text.hashCode();  result=37 * result + this.font.hashCode();  result=37 * result + HashUtilities.hashCodeForPaint(this.paint);  long temp=Double.doubleToLongBits(this.x);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.y);  result=37 * result + (int)(temp ^ (temp >>> 32));  result=37 * result + this.textAnchor.hashCode();  result=37 * result + this.rotationAnchor.hashCode();  temp=Double.doubleToLongBits(this.rotationAngle);  result=37 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String_java_security_Provider() throws Exception {  Provider[] providers=Security.getProviders("Signature.DSA");  for (int i=0; i < providers.length; i++) {    Signature signature=Signature.getInstance("DSA",providers[i]);    assertEquals("DSA",signature.getAlgorithm());    assertEquals(providers[i],signature.getProvider());  }  try {    Signature.getInstance((String)null,(Provider)null);    fail();  } catch (  NullPointerException expected) {  }  try {    Signature.getInstance("DSA",(Provider)null);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    Signature.getInstance((String)null,providers[0]);    fail();  } catch (  NullPointerException expected) {  }  try {    Signature.getInstance("bogus",providers[0]);    fail();  } catch (  NoSuchAlgorithmException expected) {  }}  }
class C{  public boolean oneOutgoingTransitionLeavesCompositeWithExitActions(State state){  Set<State> sourceParentStates=new HashSet<State>(getParentStates(state));  for (  Transition transition : state.getOutgoingTransitions()) {    Set<State> targetParentStates=getParentStates(transition.getTarget());    Set<State> crossedStates=new HashSet<State>(sourceParentStates);    crossedStates.removeAll(targetParentStates);    for (    State crossedCompositeState : crossedStates) {      if (hasExitAction(crossedCompositeState))       return true;    }  }  return false;}  }
class C{  public static void showCode(Instruction inst,cp_info constant_pool[]){  showCode(inst,0,constant_pool);}  }
class C{  public double transProb(){  double transProb=0.0;  if (m_Cache.containsKey(m_Test.value(m_AttrIndex))) {    KStarCache.TableEntry te=m_Cache.getCacheValues(m_Test.value(m_AttrIndex));    m_Stop=te.value;    m_MissingProb=te.pmiss;  } else {    generateAttrDistribution();    if (m_BlendMethod == B_ENTROPY) {      m_Stop=stopProbUsingEntropy();    } else {      m_Stop=stopProbUsingBlend();    }    m_Cache.store(m_Test.value(m_AttrIndex),m_Stop,m_MissingProb);  }  if (m_Train.isMissing(m_AttrIndex)) {    transProb=m_MissingProb;  } else {    try {      transProb=(1.0 - m_Stop) / m_Test.attribute(m_AttrIndex).numValues();      if ((int)m_Test.value(m_AttrIndex) == (int)m_Train.value(m_AttrIndex)) {        transProb+=m_Stop;      }    } catch (    Exception e) {      e.printStackTrace();    }  }  return transProb;}  }
class C{  public static String removeInvalidCharacterDataChars(String s){  boolean hasInvalidChars=false;  int length=s.length();  for (int i=0; i < length; i++) {    if (!isValidCharacterDataChar(s.charAt(i))) {      hasInvalidChars=true;      break;    }  }  if (hasInvalidChars) {    StringBuilder buffer=new StringBuilder(length);    for (int i=0; i < length; i++) {      char c=s.charAt(i);      if (isValidCharacterDataChar(c)) {        buffer.append(c);      }    }    return buffer.toString();  } else {    return s;  }}  }
class C{  private int debugSegmentIndex(WriteStream out,ReadStream is,byte[] buffer,long segmentAddress,long ptr,int head,TableEntry table) throws IOException {  int sublen=1 + 4 * 4;  int typeCode=buffer[head] & 0xff;  head++;  if (typeCode <= 0) {    return 0;  }  Type type=Type.valueOf(typeCode);  int pid=BitsUtil.readInt(buffer,head);  head+=4;  int nextPid=BitsUtil.readInt(buffer,head);  head+=4;  int offset=BitsUtil.readInt(buffer,head);  head+=4;  int length=BitsUtil.readInt(buffer,head);  head+=4;switch (type) {case LEAF:    out.print("  " + type);  debugLeaf(out,is,segmentAddress,offset,table);break;case LEAF_DELTA:out.print("  " + type);break;case BLOB:case BLOB_FREE:out.print("  " + type);break;default :out.print("  unk(" + type + ")");break;}out.println(" pid:" + pid + " next:"+ nextPid+ " offset:"+ offset+ " length:"+ length);return head;}  }
class C{  public CreateIndexRequest mapping(String type,Object... source){  mapping(type,PutMappingRequest.buildFromSimplifiedDef(type,source));  return this;}  }
class C{  public static void main(String[] args){  runFilter(new AddID(),args);}  }
class C{  @Override public synchronized void removeTrainingSetListener(TrainingSetListener tsl){  m_trainingListeners.removeElement(tsl);}  }
class C{  public void load(Entity unit) throws IllegalArgumentException {  if (!canLoad(unit)) {    throw new IllegalArgumentException("Can not load " + unit.getShortName() + " into this bay.");  }  currentSpace-=1;  troops.addElement(unit.getId());}  }
class C{  public Tree(final ITreeNode<ObjectType> rootNode){  m_rootNode=rootNode;}  }
class C{  public boolean isArray(){  return array;}  }
class C{  private Node<K,V> findNode(Comparable<? super K> key){  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c == 0)       return n;      if (c < 0)       return null;      b=n;      n=f;    }  }}  }
class C{  protected Map<String,Object> readSimpleObject(Deserializer deserializer){  Map<String,Object> result=new ObjectMap<String,Object>();  readKeyValues(result,deserializer);  storeReference(result);  return result;}  }
class C{  public static String rightPad(String s,int minLength,String filling){  int ln=s.length();  if (minLength <= ln) {    return s;  }  StringBuilder res=new StringBuilder(minLength);  res.append(s);  int dif=minLength - ln;  int fln=filling.length();  if (fln == 0) {    throw new IllegalArgumentException("The \"filling\" argument can't be 0 length string.");  }  int start=ln % fln;  int end=fln - start <= dif ? fln : start + dif;  for (int i=start; i < end; i++) {    res.append(filling.charAt(i));  }  dif-=end - start;  int cnt=dif / fln;  for (int i=0; i < cnt; i++) {    res.append(filling);  }  cnt=dif % fln;  for (int i=0; i < cnt; i++) {    res.append(filling.charAt(i));  }  return res.toString();}  }
class C{  public int next(){  final int node=_currentNode;  _currentNode=NULL;  return returnNode(node);}  }
class C{  public boolean hasChildren(){  return !components.isEmpty();}  }
class C{  @Override public BigdataSailRepositoryConnection cxn(){  if (closed)   throw new IllegalStateException();  return cxn;}  }
class C{  public BytesRestResponse(RestStatus status,String contentType,byte[] content){  this(status,contentType,new BytesArray(content));}  }
class C{  public void shutdown(){  interrupt();}  }
class C{  static public DccAddressType extractAddressType(byte[] packet){  if (packet[0] == 0x00) {    return DccAddressType.BROADCAST;  }  if ((packet[0] & 0xFF) == 0xFF) {    return DccAddressType.IDLE;  }  if ((0x80 & packet[0]) == 0x00) {    return DccAddressType.LOCO_SHORT_ADDRESS;  }  if ((0xC0 & packet[0]) == 0xC0) {    return DccAddressType.LOCO_LONG_ADDRESS;  }  if ((0xC0 & packet[0]) == 0x80) {    return DccAddressType.ACCESSORY_ADDRESS;  }  return DccAddressType.NO_ADDRESS;}  }
class C{  public Object produceEvent() throws InvocationTargetException {  if (!valid) {    throw new IllegalStateException(toString() + " has been invalidated and can no longer produce events.");  }  try {    return method.invoke(target);  } catch (  IllegalAccessException e) {    throw new AssertionError(e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof Error) {      throw (Error)e.getCause();    }    throw e;  }}  }
class C{  public static int remainder(int dividend,int divisor){  return (int)(toLong(dividend) % toLong(divisor));}  }
class C{  protected BS[] vector(final IBindingSet[] leftSolutions,final IVariable<?>[] joinVars,final IVariable<?>[] selectVars,final boolean ignoreUnboundVariables,final AtomicInteger vectorSize){  final BS[] a=new BS[leftSolutions.length];  int n=0;  int ndropped=0;  for (int i=0; i < a.length; i++) {    final IBindingSet bset=selectVars == null ? leftSolutions[i] : leftSolutions[i].copy(selectVars);    int hashCode=ONE;    try {      hashCode=HTreeHashJoinUtility.hashCode(joinVars,bset,ignoreUnboundVariables);    } catch (    JoinVariableNotBoundException ex) {      if (!optional) {        if (log.isTraceEnabled())         log.trace(ex);        ndropped++;        continue;      }    }    a[n++]=new BS(hashCode,bset);  }  Arrays.sort(a,0,n);  vectorSize.set(n);  if (log.isTraceEnabled())   log.trace("Vectoring chunk for HTree locality: naccepted=" + n + ", ndropped="+ ndropped);  return a;}  }
class C{  public void createFromGeomField(GeomVectorField field){  Bag geometries=field.getGeometries();  for (int i=0; i < geometries.numObjs; i++) {    if (((MasonGeometry)geometries.get(i)).geometry instanceof LineString) {      addLineString((MasonGeometry)geometries.get(i));    }  }}  }
class C{  public static void openDatabase(final Window parent,final IDatabase database){  openDatabaseThreaded(parent,null,database);}  }
class C{  private void assertRoleDetails(UserAssignmentDetails details,Long roleKey,double expectedFactor,UsagePeriod... expectedUsagePeriod){  assertNotNull(details);  UsageDetails usageDetails=details.getUsageDetails(roleKey);  List<UsagePeriod> usagePeriods=usageDetails.getUsagePeriods();  assertEquals("Wrong number of usage periods",expectedUsagePeriod.length,usagePeriods.size());  for (int i=0; i < usagePeriods.size(); i++) {    assertEquals("Wrong usage period",expectedUsagePeriod[i],usagePeriods.get(i));  }  assertEquals("Wrong factor",expectedFactor,usageDetails.getFactor(),ASSERT_DOUBLE_DELTA);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static boolean sendUdpPacket(EvoSuiteLocalAddress sutAddress,byte[] data){  return sendUdpPacket(sutAddress,new EvoSuiteRemoteAddress(DEFAULT_REMOTE_ADDRESS,VirtualNetwork.getInstance().getNewRemoteEphemeralPort()),data);}  }
class C{  public static boolean recursiveDelete(File file){  if (file.isDirectory()) {    String[] children=file.list();    if (children == null)     return false;    for (    String child : children) {      recursiveDelete(new File(file,child));    }  }  return file.delete();}  }
class C{  public void print(String value) throws IOException {  print(value,true);}  }
class C{  public VectorLoader(Schema schema,FieldVector root){  super();  this.fields=schema.getFields();  root.initializeChildrenFromFields(fields);  this.fieldVectors=root.getChildrenFromFields();  if (this.fieldVectors.size() != fields.size()) {    throw new IllegalArgumentException("The root vector did not create the right number of children. found " + fieldVectors.size() + " expected "+ fields.size());  }}  }
class C{  protected void createDefaultAxes(){}  }
class C{  public E peekForward(){  int nextPos=(pos + 1) % size;  if (nextPos >= data.size() || pos == end) {    return null;  }  return data.get(nextPos);}  }
class C{  private void refreshPreferences(){  final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  SharedPreferences.Editor editor=preferences.edit();  editor.putString(this.getResources().getString(R.string.settings_display_name),mSession.getMyUser().displayname);  editor.putString(this.getResources().getString(R.string.settings_version),VectorUtils.getApplicationVersion(getActivity()));  BingRuleSet mBingRuleSet=mSession.getDataHandler().pushRules();  if (null != mBingRuleSet) {    for (    String resourceText : mPushesRuleByResourceId.keySet()) {      String ruleId=mPushesRuleByResourceId.get(resourceText);      BingRule rule=mBingRuleSet.findDefaultRule(ruleId);      boolean isEnabled=((null != rule) && rule.isEnabled);      if (TextUtils.equals(ruleId,BingRule.RULE_ID_DISABLE_ALL) || TextUtils.equals(ruleId,BingRule.RULE_ID_SUPPRESS_BOTS_NOTIFICATIONS)) {        isEnabled=!isEnabled;      } else       if (isEnabled) {        List<JsonElement> actions=rule.actions;        if ((null == actions) || (0 == actions.size())) {          isEnabled=false;        } else         if (1 == actions.size()) {          try {            isEnabled=!TextUtils.equals(actions.get(0).getAsString(),BingRule.ACTION_DONT_NOTIFY);          } catch (          Exception e) {            Log.e(LOG_TAG,"## refreshPreferences failed " + e.getMessage());          }        }      }      editor.putBoolean(resourceText,isEnabled);    }  }  editor.commit();}  }
class C{  public Module findSimilarModule(Module module,List<Module> listOfModules){  for (  Module current : listOfModules) {    if (similarForModules(module,current))     return current;  }  return null;}  }
class C{  @RequestMapping(method=RequestMethod.GET,value="/{region}",produces=MediaType.APPLICATION_JSON_UTF8_VALUE) @ApiOperation(value="read all data for region",notes="Read all data for region. Use limit param to get fixed or limited number of entries.",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK."),@ApiResponse(code=400,message="Bad request."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="Region does not exist."),@ApiResponse(code=500,message="GemFire throws an error or exception.")}) @PreAuthorize("@securityService.authorize('DATA', 'READ', #region)") public ResponseEntity<?> read(@PathVariable("region") String region,@RequestParam(value="limit",defaultValue=DEFAULT_GETALL_RESULT_LIMIT) final String limit){  logger.debug("Reading all data in Region ({})...",region);  region=decode(region);  Map<Object,Object> valueObjs=null;  final RegionData<Object> data=new RegionData<Object>(region);  final HttpHeaders headers=new HttpHeaders();  String keyList=null;  int regionSize=getRegion(region).size();  List<Object> keys=new ArrayList<Object>(regionSize);  List<Object> values=new ArrayList<Object>(regionSize);  for (  Map.Entry<Object,Object> entry : getValues(region).entrySet()) {    Object value=entry.getValue();    if (value != null) {      keys.add(entry.getKey());      values.add(value);    }  }  if ("ALL".equalsIgnoreCase(limit)) {    data.add(values);    keyList=StringUtils.collectionToDelimitedString(keys,",");  } else {    try {      int maxLimit=Integer.valueOf(limit);      if (maxLimit < 0) {        String errorMessage=String.format("Negative limit param (%1$s) is not valid!",maxLimit);        return new ResponseEntity<String>(convertErrorAsJson(errorMessage),HttpStatus.BAD_REQUEST);      }      int mapSize=keys.size();      if (maxLimit > mapSize) {        maxLimit=mapSize;      }      data.add(values.subList(0,maxLimit));      keyList=StringUtils.collectionToDelimitedString(keys.subList(0,maxLimit),",");    } catch (    NumberFormatException e) {      String errorMessage=String.format("limit param (%1$s) is not valid!",limit);      return new ResponseEntity<String>(convertErrorAsJson(errorMessage),HttpStatus.BAD_REQUEST);    }  }  headers.set("Content-Location",toUri(region,keyList).toASCIIString());  return new ResponseEntity<RegionData<?>>(data,headers,HttpStatus.OK);}  }
class C{  public CreateNewNoteIntentBuilder addTags(String... tags){  return addTags(new ArrayList<>(Arrays.asList(tags)));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void optimize() throws Exception {  int numChanged=0;  int examineAll=1;  int sigFig=-100;  int loopCounter=0;  while ((numChanged > 0 || (examineAll > 0)) | (sigFig < 3)) {    loopCounter++;    numChanged=0;    int numSamples=0;    if (examineAll > 0) {      for (int i=0; i < m_nInstances; i++) {        numChanged+=examineExample(i);      }    } else {      for (int i=0; i < m_target.length; i++) {        if ((m_alpha[i] > 0 && m_alpha[i] < m_C * m_data.instance(i).weight()) || (m_alphaStar[i] > 0 && m_alphaStar[i] < m_C * m_data.instance(i).weight())) {          numSamples++;          numChanged+=examineExample(i);        }      }    }    int minimumNumChanged=1;    if (loopCounter % 2 == 0) {      minimumNumChanged=(int)Math.max(1,0.1 * numSamples);    }    if (examineAll == 1) {      examineAll=0;    } else     if (numChanged < minimumNumChanged) {      examineAll=1;    }    if (loopCounter == 2500) {      break;    }  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:45.279 -0500",hash_original_method="6C56C11F8A570F150FD118B6F4CE07D0",hash_generated_method="BAC7665F566F0E3CFE16276162A7B9FB") public BasicHttpEntity(){  super();  this.length=-1;}  }
class C{  public VisorGridDiscoveryEventV2(int typeId,IgniteUuid id,String name,UUID nid,long ts,@Nullable String msg,String shortDisplay,UUID evtNodeId,String addr,boolean isDaemon,long topVer){  super(typeId,id,name,nid,ts,msg,shortDisplay,evtNodeId,addr,isDaemon);  this.topVer=topVer;}  }
class C{  public void unsubscribe(String jid,String subscriptionId) throws XMPPException {  sendPubsubPacket(Type.SET,new UnsubscribeExtension(jid,getId(),subscriptionId));}  }
class C{  TreeGazetteers(int phrase_length,String pathToDictionaries) throws IOException {  init(phrase_length,pathToDictionaries);}  }
class C{  @Override public Value copy(){  return new ArrayVal(array);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return IM_TRUE;case 2:  return IM_FALSE;default :return null;}}  }
class C{  protected int _columnRank(int rank){  return columnZero + rank * columnStride;}  }
class C{  public static void modifyBooleanMatrix(int[][] a){  int rowFlag=0, colFlag=0;  for (int i=0; i < a.length; i++) {    for (int j=0; j < a[0].length; j++) {      if (i == 0 || j == 0) {        if (a[i][0] == 1) {          rowFlag=1;        }        if (a[0][j] == 1) {          colFlag=1;        }      } else       if (a[i][j] == 1) {        a[0][j]=1;        a[i][0]=1;      }    }  }  for (int i=1; i < a.length; i++) {    for (int j=1; j < a[0].length; j++) {      if (a[0][j] == 1 || a[i][0] == 1) {        a[i][j]=1;      }    }  }  if (rowFlag == 1) {    for (int j=0; j < a[0].length; j++) {      a[0][j]=1;    }  }  if (colFlag == 1) {    for (int i=0; i < a.length; i++) {      a[i][0]=1;    }  }}  }
class C{  public VersionException(String s,Throwable cause){  super(s,cause);}  }
class C{  public IRI selectSavedQuery(final HTTPRepository repository,final String owner,final String queryName) throws RDF4JException, BadRequestException {  final QueryStringBuilder select=new QueryStringBuilder(SELECT_URI);  select.replaceQuote(QueryStorage.USER_NAME,owner);  select.replaceURI(REPOSITORY,repository.getRepositoryURL());  select.replaceQuote(QUERY_NAME,queryName);  final RepositoryConnection connection=this.queries.getConnection();  final TupleQuery query=connection.prepareTupleQuery(QueryLanguage.SPARQL,select.toString());  try {    final TupleQueryResult result=query.evaluate();    if (result.hasNext()) {      return (IRI)(result.next().getValue("query"));    } else {      throw new BadRequestException("Could not find query entry in storage.");    }  }  finally {    connection.close();  }}  }
class C{  private Connection createShaarliConnection(String url,boolean isPost){  Connection jsoupConnection=Jsoup.connect(url);  Connection.Method connectionMethod=isPost ? Connection.Method.POST : Connection.Method.GET;  if (!"".equals(this.mBasicAuth)) {    jsoupConnection=jsoupConnection.header("Authorization","Basic " + this.mBasicAuth);  }  if (this.mCookies != null) {    jsoupConnection=jsoupConnection.cookies(this.mCookies);  }  return jsoupConnection.validateTLSCertificates(this.mValidateCert).timeout(this.mTimeout).followRedirects(true).method(connectionMethod);}  }
class C{  public boolean isFullScreen(){  return fullscreen;}  }
class C{  public SuggestionsAdapter(Context context,SearchView searchView,SearchableInfo searchable,WeakHashMap<String,Drawable.ConstantState> outsideDrawablesCache){  super(context,R.layout.abs__search_dropdown_item_icons_2line,null,true);  mSearchManager=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  mSearchable=searchable;  mProviderContext=mContext;  mSearchView=searchView;  mOutsideDrawablesCache=outsideDrawablesCache;}  }
class C{  public static ArrayList<Instruction> recompileHopsDag2Forced(StatementBlock sb,ArrayList<Hop> hops,long tid,ExecType et) throws DMLRuntimeException, HopsException, LopsException, IOException {  ArrayList<Instruction> newInst=null;synchronized (hops) {    LOG.debug("\n**************** Optimizer (Recompile) *************\nMemory Budget = " + OptimizerUtils.toMB(OptimizerUtils.getLocalMemBudget()) + " MB");    Hop.resetVisitStatus(hops);    for (    Hop hopRoot : hops)     rClearLops(hopRoot);    Hop.resetVisitStatus(hops);    for (    Hop hopRoot : hops)     rSetExecType(hopRoot,et);    Hop.resetVisitStatus(hops);    Dag<Lop> dag=new Dag<Lop>();    for (    Hop hopRoot : hops) {      Lop lops=hopRoot.constructLops();      lops.addToDag(dag);    }    newInst=dag.getJobs(sb,ConfigurationManager.getDMLConfig());  }  if (tid != 0)   newInst=ProgramConverter.createDeepCopyInstructionSet(newInst,tid,-1,null,null,null,false,false);  return newInst;}  }
class C{  @LargeTest public void testEnforceSelectionDoesNotCrossAnchorBoundary2() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<div>First</div>"+ "<a href=\"#\">Second</a>"+ "&nbsp;"+ "<a href=\"#\">Third</a>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<a href=\"#\">Second</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("&nbsp;");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<a href=\"#\">Third</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<a href=\"#\">Third</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("&nbsp;");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<a href=\"#\">Second</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");}  }
class C{  public boolean isDeprecatedSetting(String setting){  return parseFieldMatcher.match(setting,CACHE) || parseFieldMatcher.match(setting,CACHE_KEY);}  }
class C{  public int indexOf(AbstractPlugin plugin){  return plugins.indexOf(plugin);}  }
class C{  public void processChallenge(final String challenge) throws MalformedChallengeException {  String s=AuthChallengeParser.extractScheme(challenge);  if (!s.equalsIgnoreCase(getSchemeName())) {    throw new MalformedChallengeException("Invalid NTLM challenge: " + challenge);  }  int i=challenge.indexOf(' ');  if (i != -1) {    s=challenge.substring(i,challenge.length());    this.ntlmchallenge=s.trim();    this.state=TYPE2_MSG_RECEIVED;  } else {    this.ntlmchallenge="";    if (this.state == UNINITIATED) {      this.state=INITIATED;    } else {      this.state=FAILED;    }  }}  }
class C{  public void writeObjectFieldValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException {  if (_spacesInObjectEntries) {    jg.writeRaw(" : ");  } else {    jg.writeRaw(':');  }}  }
class C{  @Override public BNetwork reduce(Query.ReduceQuery query){  InferenceAlgorithm algo=selectBestAlgorithm(query);  BNetwork result=algo.reduce(query);  return result;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_BEFORE_CODE_2__MORE_CODE_1:    return ((InternalEList<?>)getMoreCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void run(){  int loopCount=0;  float oldPos=0;  float[] newPos=new float[1];  JoalAudioSource.al.alSourcei(sourceBuffer[0],AL.AL_LOOPING,AL.AL_TRUE);  while (!dying()) {    JoalAudioSource.al.alGetSourcef(sourceBuffer[0],AL.AL_SEC_OFFSET,newPos,0);    if (oldPos > newPos[0]) {      loopCount++;      log.debug("Loop count " + loopCount);    }    oldPos=newPos[0];    if (loopCount >= numLoops) {      die();    }    snooze(20);  }  JoalAudioSource.al.alSourcei(sourceBuffer[0],AL.AL_LOOPING,AL.AL_FALSE);  if (log.isDebugEnabled()) {    log.debug("Clean up thread " + this.getName());  }  cleanup();}  }
class C{  private void adjustForBottomFadingEdge(View childInSelectedRow,int topSelectionPixel,int bottomSelectionPixel){  if (childInSelectedRow.getBottom() > bottomSelectionPixel) {    int spaceAbove=childInSelectedRow.getTop() - topSelectionPixel;    int spaceBelow=childInSelectedRow.getBottom() - bottomSelectionPixel;    int offset=Math.min(spaceAbove,spaceBelow);    offsetChildrenTopAndBottom(-offset);  }}  }
class C{  private void nudge(){  final TwilightState twilight=mTwilightManager.getCurrentState();  if (!mAwaitingNudge || twilight == null) {    return;  }  int counter=getSunsetCounter();  boolean transition=twilight.isNight() && !mSunset;  mSunset=twilight.isNight();  if (!transition) {    return;  }  if (counter <= 0) {    counter++;    updateSunsetCounter(counter);  }  if (counter == 0) {    final Intent intent=new Intent(CMSettings.ACTION_LIVEDISPLAY_SETTINGS);    PendingIntent result=PendingIntent.getActivity(mContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);    Notification.Builder builder=new Notification.Builder(mContext).setContentTitle(mContext.getResources().getString(org.cyanogenmod.platform.internal.R.string.live_display_title)).setContentText(mContext.getResources().getString(org.cyanogenmod.platform.internal.R.string.live_display_hint)).setSmallIcon(org.cyanogenmod.platform.internal.R.drawable.ic_livedisplay_notif).setStyle(new Notification.BigTextStyle().bigText(mContext.getResources().getString(org.cyanogenmod.platform.internal.R.string.live_display_hint))).setContentIntent(result).setAutoCancel(true);    NotificationManager nm=(NotificationManager)mContext.getSystemService(Context.NOTIFICATION_SERVICE);    nm.notifyAsUser(null,1,builder.build(),UserHandle.CURRENT);    updateSunsetCounter(1);  }}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  public void registerVirtualKeyboard(VirtualKeyboardInterface vkb){  virtualKeyboards.put(vkb.getVirtualKeyboardName(),vkb);}  }
class C{  private void inorder(){  inorder(root);}  }
class C{  protected void plotGray(SVGPlot plot,Element parent,double x,double y,double size){  Element marker=plot.svgCircle(x,y,size * .5);  SVGUtil.setStyle(marker,SVGConstants.CSS_FILL_PROPERTY + ":" + greycolor);  parent.appendChild(marker);}  }
class C{  public TelnetTerminalServer(int port) throws IOException {  this(ServerSocketFactory.getDefault(),port);}  }
class C{  private Path createPath(MotionEvent event){  Path path=new Path();  this.startX=event.getX();  this.startY=event.getY();  path.moveTo(this.startX,this.startY);  return path;}  }
class C{  public void checkLocalsAverageCorrectly(int algNumber,String numThreads) throws Exception {  PredictiveInfoCalculatorKraskov piCalc=getNewCalc(algNumber);  String kraskov_K="4";  piCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  piCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,numThreads);  super.testLocalsAverageCorrectly(piCalc,2,10000);}  }
class C{  protected void ping(int expectedReturnCode){  int returnCode=-1;  long timeout=System.currentTimeMillis() + this.getTimeout();  while (System.currentTimeMillis() < timeout) {    JvmLauncher ping=createJvmLauncher(false);    doAction(ping);    doServerAndDomainNameArgs(ping);    ping.addAppArguments("-ping");    ping.addAppArguments("-timeout");    ping.addAppArguments("2000");    doUsernameAndPasswordArgs(ping);    ping.setTimeout(10000);    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {      throw new ContainerException("Thread.sleep failed",e);    }    returnCode=ping.execute();    if (returnCode != -1 && returnCode != 0 && returnCode != 1 && returnCode != 2) {      throw new ContainerException("JonasAdmin ping returned " + returnCode + ", the only values allowed are -1, 0, 1 and 2");    }    if (returnCode == expectedReturnCode) {      return;    }  }  throw new ContainerException("Server did not reach wanted state after " + Long.toString(this.getTimeout()) + " milliseconds: last ping return code was "+ returnCode+ ", expected return code was "+ expectedReturnCode);}  }
class C{  public boolean isSameRM(XAResource xares) throws XAException {  if (xares instanceof MysqlXAConnection) {    return this.underlyingConnection.isSameResource(((MysqlXAConnection)xares).underlyingConnection);  }  return false;}  }
class C{  public int assignIDs(int lastID){  int currLastID=lastID + 1;  m_id=currLastID;  if (m_sons != null) {    for (    ClassifierTree m_son : m_sons) {      currLastID=m_son.assignIDs(currLastID);    }  }  return currLastID;}  }
class C{  public static XMPMeta extractOrCreateXMPMeta(String filename){  XMPMeta meta=extractXMPMeta(filename);  return meta == null ? createXMPMeta() : meta;}  }
class C{  public void reset(){  cipher.reset();}  }
class C{  public static <A extends Annotation>A createAnnotation(Class<? extends Annotation> annotationType,AnnotationMember[] elements){  AnnotationFactory factory=new AnnotationFactory(annotationType,elements);  return (A)Proxy.newProxyInstance(annotationType.getClassLoader(),new Class[]{annotationType},factory);}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  data=rotatedData;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(data,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  private void fetchSnapShotDetails(final Stat stat,final List<Object> snapshotList){  int snapCount=0;  long snapCapacity=0;  Checkpoint checkPoint=null;  Iterator<Object> snapshotItr=snapshotList.iterator();  snapshotItr.next();  while (snapshotItr.hasNext()) {    checkPoint=(Checkpoint)snapshotItr.next();    if (fetchNativeId(stat.getNativeGuid()).equals(checkPoint.getCheckpointOf())) {      snapCount++;      snapCapacity+=(Long.valueOf(checkPoint.getFileSystemSize()) * 1024);    }  }  stat.setSnapshotCount(snapCount);  stat.setSnapshotCapacity(snapCapacity);}  }
class C{  public static boolean isValidKeyCodeWithoutModifier(int keyCode){switch (keyCode) {case SWT.ESC:    return true;case SWT.F1:  return true;case SWT.F2:return true;case SWT.F3:return true;case SWT.F4:return true;case SWT.F5:return true;case SWT.F6:return true;case SWT.F7:return true;case SWT.F8:return true;case SWT.F9:return true;case SWT.F10:return true;case SWT.F11:return true;case SWT.F12:return true;case SWT.SCROLL_LOCK:return true;default :return false;}}  }
class C{  private void validateBusinessObjectDefinitionTagCreateRequest(BusinessObjectDefinitionTagCreateRequest request){  Assert.notNull(request,"A business object definition tag create request must be specified.");  validateBusinessObjectDefinitionTagKey(request.getBusinessObjectDefinitionTagKey());}  }
class C{  public Manifest(InputStream is) throws IOException {  read(is);}  }
class C{  @Override public boolean isActive(){  return mFocusState != FocusState.STATE_INACTIVE;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if ("editorClosing".equals(e.getPropertyName())) {    this.firePropertyChange("editorClosing",null,getName());  } else   if ("closeFrame".equals(e.getPropertyName())) {    this.firePropertyChange("closeFrame",null,null);    this.firePropertyChange("editorClosing",true,true);  } else   if ("updatedBayesImWizardTab".equals(e.getPropertyName())) {    this.updatedBayesImWizardTab=((Integer)(e.getNewValue()));  }}  }
class C{  public void clear(){  graphics.removeAllElements();}  }
class C{  public final float sin(float theta){  while (theta < 0) {    theta+=MathUtils.TWO_PI;  }  return sinLUT[(int)(theta * rad2deg) % period];}  }
class C{  public UIGraphicTestCase(String name){  super(name);}  }
class C{  private DD computePiByMachin(){  DD t1=DD.valueOf(1.0).divide(DD.valueOf(5.0));  DD t2=DD.valueOf(1.0).divide(DD.valueOf(239.0));  DD pi4=(DD.valueOf(4.0).multiply(arctan(t1))).subtract(arctan(t2));  DD pi=DD.valueOf(4.0).multiply(pi4);  return pi;}  }
class C{  private Object[] newElementArray(int s){  return new Object[s];}  }
class C{  public final boolean isFulfilling(LNEven promise){  return !this.member(promise) || this.member(promise.getBody());}  }
class C{  public ResourceFilter include(){  return addFilter(ResourceFilter.include());}  }
class C{  public final void testCodeSigner_01(){  try {    CodeSigner cs=new CodeSigner(cpath,null);    assertNotNull(cs);  } catch (  Exception e) {    fail("Unexpected exception");  }}  }
class C{  @Override public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  protected void rejectBlacklistedRecipient(MailAddress recipient) throws MessagingException {  if (!isLeaveBlacklisted())   setMessageDeleted();  if (isMarkBlacklistedSeen())   setMessageSeen();  StringBuilder messageBuffer=new StringBuilder("Rejected mail intended for blacklisted recipient: ");  messageBuffer.append(recipient);  messageBuffer.append('.');  logStatusInfo(messageBuffer.toString());}  }
class C{  public void testNextDoubleBadBound(){  ThreadLocalRandom r=ThreadLocalRandom.current();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);}  }
class C{  protected CCallsDescription(){  super(new Color(42,143,255),"Highlights function calls");}  }
class C{  public void rectValueToPixel(RectF r){  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public void throttleTimedOut(){  _handle=-1;  cs=null;  mRefreshTimer.stop();  mRefreshTimer=null;  cs=null;}  }
class C{  EndpointService(ArgusHttpClient client){  if (client == null) {    throw new IllegalArgumentException("The HTTP client cannot be null.");  }  _client=client;}  }
class C{  @Override protected void handleDisconnect(Connector start,Connector end){  TaskFigure sf=(TaskFigure)start.getOwner();  TaskFigure ef=(TaskFigure)end.getOwner();  sf.removeDependency(this);  ef.removeDependency(this);}  }
class C{  public IgniteException(){}  }
class C{  public FBManagedConnectionFactory(){  this(GDSFactory.getDefaultGDSType(),new FBConnectionProperties());}  }
class C{  public synchronized long lookup(long offset){  Map.Entry<Long,Long> entry=terms.floorEntry(offset);  return entry != null ? entry.getValue() : 0;}  }
class C{  private void insertCCLNFA(RegExp regExp,int start,int end){switch (regExp.type) {case sym.BAR:    RegExp2 r=(RegExp2)regExp;  insertCCLNFA(r.r1,start,end);insertCCLNFA(r.r2,start,end);return;case sym.CCLASS:insertClassNFA((List<Interval>)((RegExp1)regExp).content,start,end);return;case sym.CCLASSNOT:insertNotClassNFA((List<Interval>)((RegExp1)regExp).content,start,end);return;case sym.CHAR:insertLetterNFA(false,(Integer)((RegExp1)regExp).content,start,end);return;case sym.CHAR_I:insertLetterNFA(true,(Integer)((RegExp1)regExp).content,start,end);return;case sym.MACROUSE:insertCCLNFA(macros.getDefinition((String)((RegExp1)regExp).content),start,end);return;}throw new Error("Unknown expression type " + regExp.type + " in NFA construction");}  }
class C{  public boolean isSelf(){  ServerBartender server=_server;  return server != null && server.isSelf();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrgetownerelement05.class,args);}  }
class C{  private void disconnectInternal(){  responseCode=-1;  inputStream=null;  if (pi != null) {    pi.finishTracking();    pi=null;  }  if (http != null) {    http.closeServer();    http=null;    connected=false;  }}  }
class C{  private HashMap<String,List<StorageHADomain>> discoverPortGroups(StorageSystem system,List<StorageVirtualMachineInfo> vServerList) throws NetAppCException {  HashMap<String,List<StorageHADomain>> portGroups=new HashMap<String,List<StorageHADomain>>();  List<StorageHADomain> newPortGroups=new ArrayList<StorageHADomain>();  List<StorageHADomain> existingPortGroups=new ArrayList<StorageHADomain>();  _logger.info("Start port group discovery (vfilers) for storage system {}",system.getId());  NetAppClusterApi netAppCApi=new NetAppClusterApi.Builder(system.getIpAddress(),system.getPortNumber(),system.getUsername(),system.getPassword()).https(true).build();  StorageHADomain portGroup=null;  List<StorageVirtualMachineInfo> svms=netAppCApi.listSVM();  if (null == svms || svms.isEmpty()) {    URIQueryResultList results=new URIQueryResultList();    String adapterNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,DEFAULT_SVM,NativeGUIDGenerator.ADAPTER);    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageHADomainByNativeGuidConstraint(adapterNativeGuid),results);    if (results.iterator().hasNext()) {      StorageHADomain tmpGroup=_dbClient.queryObject(StorageHADomain.class,results.iterator().next());      if (tmpGroup.getStorageDeviceURI().equals(system.getId())) {        portGroup=tmpGroup;        _logger.debug("Found existing port group {} ",tmpGroup.getName());      }    }    if (portGroup == null) {      portGroup=new StorageHADomain();      portGroup.setId(URIUtil.createId(StorageHADomain.class));      portGroup.setName("NetAppC");      portGroup.setVirtual(false);      portGroup.setNativeGuid(adapterNativeGuid);      portGroup.setStorageDeviceURI(system.getId());      StringSet protocols=new StringSet();      protocols.add(StorageProtocol.File.NFS.name());      protocols.add(StorageProtocol.File.CIFS.name());      portGroup.setFileSharingProtocols(protocols);      newPortGroups.add(portGroup);    } else {      existingPortGroups.add(portGroup);    }  } else {    _logger.debug("Number svms found: {}",svms.size());    vServerList.addAll(svms);    StringSet protocols=new StringSet();    protocols.add(StorageProtocol.File.NFS.name());    protocols.add(StorageProtocol.File.CIFS.name());    for (    StorageVirtualMachineInfo vs : svms) {      _logger.debug("SVM name: {}",vs.getName());      URIQueryResultList results=new URIQueryResultList();      String adapterNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,vs.getName(),NativeGUIDGenerator.ADAPTER);      _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageHADomainByNativeGuidConstraint(adapterNativeGuid),results);      portGroup=null;      if (results.iterator().hasNext()) {        StorageHADomain tmpGroup=_dbClient.queryObject(StorageHADomain.class,results.iterator().next());        if (tmpGroup.getStorageDeviceURI().equals(system.getId())) {          portGroup=tmpGroup;          _logger.debug("Found duplicate {} ",vs.getName());        }      }      if (portGroup == null) {        portGroup=new StorageHADomain();        portGroup.setId(URIUtil.createId(StorageHADomain.class));        portGroup.setName(vs.getName());        portGroup.setVirtual(true);        portGroup.setAdapterType(StorageHADomain.HADomainType.VIRTUAL.toString());        portGroup.setNativeGuid(adapterNativeGuid);        portGroup.setStorageDeviceURI(system.getId());        portGroup.setFileSharingProtocols(protocols);        newPortGroups.add(portGroup);      } else {        existingPortGroups.add(portGroup);      }    }  }  portGroups.put(NEW,newPortGroups);  portGroups.put(EXISTING,existingPortGroups);  return portGroups;}  }
class C{  public boolean stepAnimators(){  boolean didStep=false;  Collection<Animator> animators=this.values();  for (  Animator a : animators) {    if (a.hasNext()) {      didStep=true;      a.next();    }  }  return didStep;}  }
class C{  public static boolean isPEM(byte[] byteArray){  try {    String startPEM="-----BEGIN";    int headerLength=100;    byte[] preamble=new byte[headerLength];    System.arraycopy(byteArray,0,preamble,0,headerLength);    String startArray=new String(preamble);    return startArray.startsWith(startPEM);  } catch (  Exception e) {    throw new DSSException("Unable to read InputStream");  }}  }
class C{  public void waitForRequest(){synchronized (this) {    if (collectedRequest != null)     return;    try {      wait(50);    } catch (    InterruptedException e) {      logger.log(Level.INFO,"oops",e);    }  }}  }
class C{  static int hash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public boolean isUpdateReferences(){  return fUpdateReferences;}  }
class C{  public TreeDepthItemSorter(boolean childrenAbove){  if (childrenAbove) {    m_childrenAbove=1;    m_hover=13;    m_highlight=12;    m_depth=14;  } else {    m_childrenAbove=-1;    m_hover=24;    m_highlight=23;    m_depth=12;  }}  }
class C{  public void execute(){  try {    invocation.invoke(targetCallback);  } catch (  Exception e) {  }}  }
class C{  public void dispose(){  m_text=null;  m_button=null;  m_mPAttribute.dispose();  m_mPAttribute=null;  m_GridField=null;  m_GridTab=null;}  }
class C{  public void error(Object message){  ri.error(message);}  }
class C{  @Override protected Void doTask() throws Exception {  t.set(Thread.currentThread());  ran.compareAndSet(false,true);  while (true) {    try {      Thread.sleep(Long.MAX_VALUE);    } catch (    InterruptedException ex) {      if (log.isInfoEnabled())       log.info("Ignoring interrupt: " + ex);      break;    }  }  return null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void merge_contents(){  if (contents.length == 0)   return;  Arrays.sort(contents);  List<CallChainInfo> unique_calls=new ArrayList<CallChainInfo>();  unique_calls.add(contents[0]);  for (int ii=1; ii < contents.length; ii++) {    CallChainInfo top=unique_calls.get(unique_calls.size() - 1);    if (contents[ii].method == top.method)     top.merge(contents[ii]); else     unique_calls.add(contents[ii]);  }  logger.info("merge_contents {}: old {} elems, new {} elems",method,contents.length,unique_calls.size());  contents=unique_calls.toArray(new CallChainInfo[0]);}  }
class C{  private void updateStatus(){  TextView text=(TextView)findViewById(R.id.pwd_status);  if (testPin(2,4,6,1)) {    text.setText("Congratulation!");  } else {    text.setText("Invalid PIN");  }}  }
class C{  public Builder withText(String text){  action.setText(text);  return this;}  }
class C{  public static ActivityFacilitiesImpl createGridLayerByGridSizeByBoundingBoxV2(double minX,double minY,double maxX,double maxY,double gridSize){  log.info("Setting statring points for accessibility measure ...");  int skippedPoints=0;  int setPoints=0;  ActivityFacilitiesImpl measuringPoints=(ActivityFacilitiesImpl)FacilitiesUtils.createActivityFacilities("accessibility measuring points");  for (double x=minX; x < maxX; x+=gridSize) {    for (double y=minY; y < maxY; y+=gridSize) {      double centerX=x + (gridSize / 2);      double centerY=y + (gridSize / 2);      if (centerX <= maxX && centerX >= minX && centerY <= maxY && centerY >= minY) {        Coord center=new Coord(centerX,centerY);        measuringPoints.createAndAddFacility(Id.create(setPoints,ActivityFacility.class),center);        setPoints++;      } else       skippedPoints++;    }  }  log.info("Having " + setPoints + " inside the shape file boundary (and "+ skippedPoints+ " outside).");  log.info("Done with setting starting points!");  return measuringPoints;}  }
class C{  public CCTMXObjectGroup objectGroupNamed(String groupName){  for (  CCTMXObjectGroup objectGroup : objectGroups) {    if (objectGroup.groupName.equals(groupName))     return objectGroup;  }  return null;}  }
class C{  public Collection<String> listAttributeDescriptions(){  List<String> list=new ArrayList<String>();  try {    MBeanAttributeInfo[] attrs=beanInfo.getAttributes();    for (    MBeanAttributeInfo attr : attrs) {      list.add(describeAttribute(attr));    }  } catch (  Exception e) {    throwException("Could not list attribute descriptions. Reason: ",e);  }  return list;}  }
class C{  protected void addNode(Node nodeToInsert,Node insertBeforeNode){  nodeToInsert.next=insertBeforeNode;  nodeToInsert.previous=insertBeforeNode.previous;  insertBeforeNode.previous.next=nodeToInsert;  insertBeforeNode.previous=nodeToInsert;}  }
class C{  public boolean authorizeSend(Object token,String channel){  return true;}  }
class C{  public void updateProjectionStackStatus(boolean containsBackProjections,boolean containsForwardProjections){}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public final String join(@Nullable Object first,@Nullable Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  public RandomAccessStream openRandomAccess() throws IOException {  return getWrappedPath().openRandomAccess();}  }
class C{  private TaskList createVolumeTaskList(String size,Project project,VirtualArray varray,VirtualPool vpool,String label,String task,Integer volumeCount){  TaskList taskList=new TaskList();  try {    long lsize=SizeUtil.translateSize(size);    for (int i=0; i < volumeCount; i++) {      Volume volume=StorageScheduler.prepareEmptyVolume(_dbClient,lsize,project,varray,vpool,label,i,volumeCount);      Operation op=_dbClient.createTaskOpStatus(Volume.class,volume.getId(),task,ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME);      volume.getOpStatus().put(task,op);      TaskResourceRep volumeTask=toTask(volume,task,op);      taskList.getTaskList().add(volumeTask);      _log.info(String.format("Volume and Task Pre-creation Objects [Init]--  Source Volume: %s, Task: %s, Op: %s",volume.getId(),volumeTask.getId(),task));    }  } catch (  APIException ex) {    String errMsg="Caught Exception while creating Volume and Task objects. Marking pre-created Objects inactive";    _log.error(errMsg,ex);    for (    TaskResourceRep taskObj : taskList.getTaskList()) {      taskObj.setMessage(String.format("%s. %s",errMsg,ex.getMessage()));      taskObj.setState(Operation.Status.error.name());      URI volumeURI=taskObj.getResource().getId();      _dbClient.error(Volume.class,volumeURI,task,ex);      Volume volume=_dbClient.queryObject(Volume.class,volumeURI);      volume.setInactive(true);      _dbClient.updateObject(volume);    }    throw ex;  }  return taskList;}  }
class C{  public Map<String,Integer> coveredLengths(){  final Map<String,Integer> map=new HashMap<>();  for (  Map.Entry<String,MergedIntervals> entry : mSequences.entrySet()) {    map.put(entry.getKey(),entry.getValue().totalLength());  }  return map;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.726 -0400",hash_original_method="3A1E34D05E51ADA7E2716E6B82EE32B2",hash_generated_method="279608E87D608D9F7F5726FAA1CD3212") public FileWriterWithEncoding(File file,Charset encoding,boolean append) throws IOException {  super();  this.out=initWriter(file,encoding,append);}  }
class C{  public void load() throws FileNotFoundException, IOException {  BufferedReader is=new BufferedReader(new InputStreamReader(new FileInputStream(file)));  ArrayList<String> buf=new ArrayList<>();  while (is.ready()) {    String line=is.readLine();    if (line.startsWith(COMMENT_PREFIX)) {      continue;    }    if (line.length() == 0 && !buf.isEmpty()) {      String title=buf.remove(0);      store.add(new Pair<>(title,buf));      buf=new ArrayList<>();    } else {      buf.add(line);    }  }  if (!buf.isEmpty()) {    String title=buf.remove(0);    store.add(new Pair<>(title,buf));    buf=new ArrayList<>();  }  is.close();}  }
class C{  public PercolateSourceBuilder addAggregation(AbstractAggregationBuilder aggregationBuilder){  if (aggregations == null) {    aggregations=new ArrayList<>();  }  aggregations.add(aggregationBuilder);  return this;}  }
class C{  static public PVector div(PVector v,float n,PVector target){  if (target == null) {    target=new PVector(v.x / n,v.y / n,v.z / n);  } else {    target.set(v.x / n,v.y / n,v.z / n);  }  return target;}  }
class C{  public static byte opaque(byte value){  return value;}  }
class C{  public static Bound<String> withNumShards(int numShards){  return new Bound<>(DEFAULT_TEXT_CODER).withNumShards(numShards);}  }
class C{  public final boolean isSubtypeOf(TypeDescriptor<?> parent){  return token.isSubtypeOf(parent.token);}  }
class C{  private static double distance(Point p1,Point p2){  double x=p1.x - p2.x;  double y=p1.y - p2.y;  return Math.sqrt(x * x + y * y);}  }
class C{  public HttpErrorResponseException(String message,Throwable cause,int statusCode,String statusDescription,String responseMessage){  super(message,cause);  this.statusCode=statusCode;  this.statusDescription=statusDescription;  this.responseMessage=responseMessage;}  }
class C{  public String loadReviewToString(int index) throws IOException {  File f;  if (index % 2 == 0)   f=positiveFiles[index / 2]; else   f=negativeFiles[index / 2];  return FileUtils.readFileToString(f);}  }
class C{  public MemberList(int initialCapacity){  super(initialCapacity);}  }
class C{  private String cleanupPathElement(String path){  return path.endsWith(File.separator) ? path : (path + File.separator);}  }
class C{  public boolean checkPassword(TextView passwordTV,TextView passwordAgainTV){  final String password=passwordTV.getText().toString();  final String passwordAgain=passwordAgainTV.getText().toString();  if (password.length() < PASSOWRD_WORDS_NUMBER_MIN) {    Toast.makeText(this,R.string.esp_register_input_password,Toast.LENGTH_LONG).show();    return false;  }  if (password.equals(passwordAgain)) {    return true;  } else {    Toast.makeText(this,R.string.esp_register_same_password_toast,Toast.LENGTH_LONG).show();    return false;  }}  }
class C{  public static TestRun runTest(String originalTest){  if (originalTest.contains("#")) {    originalTest=originalTest.substring(0,originalTest.indexOf("#"));  }  try {    ExecutionTracer.enable();    Class<?> forName=null;    forName=Class.forName(originalTest);    logger.debug("Running against JUnit test suite " + originalTest);    Result result=JUnitCore.runClasses(forName);    assert result.getFailureCount() == 1 : "Cannot handle more or less than exactly one failure at a time.";    Throwable failure=result.getFailures().get(0).getException();    ExecutionTrace trace=ExecutionTracer.getExecutionTracer().getTrace();    return new TestRun(trace,failure);  } catch (  ClassNotFoundException exc) {    throw new RuntimeException(exc);  }}  }
class C{  @Override public boolean load(Element sharedSections,Element perNodeSections){  loadSections(sharedSections,perNodeSections);  return true;}  }
class C{  private final void touchBlock(int i,int value){  hashes[i]=(hashes[i] + (value << 1)) | 1;}  }
class C{  public final void addEditorListener(EditorListener l){  listeners.add(EditorListener.class,l);}  }
class C{  private void sequenceBoundedLinearizableQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){  if (entry.getSequence() > session.getCommandSequence()) {    session.registerSequenceQuery(entry.getSequence(),null);  } else {    applyQuery(entry,future);  }}  }
class C{  private void fetchFlowScalar(char style){  savePossibleSimpleKey();  this.allowSimpleKey=false;  Token tok=scanFlowScalar(style);  this.tokens.add(tok);}  }
class C{  public static Number count(byte[] self,Object value){  return count(InvokerHelper.asIterator(self),value);}  }
class C{  private static void usage(){  System.out.println("Syntax: CalendarFeedDemo <username> <password>");  System.out.println("\nThe username and password are used for " + "authentication.  The sample application will modify the specified " + "user's calendars so you may want to use a test account.");}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=opt(key);  if (value == null) {    put(key,1);  } else {    if (value instanceof Integer) {      put(key,((Integer)value).intValue() + 1);    } else     if (value instanceof Long) {      put(key,((Long)value).longValue() + 1);    } else     if (value instanceof Double) {      put(key,((Double)value).doubleValue() + 1);    } else     if (value instanceof Float) {      put(key,((Float)value).floatValue() + 1);    } else {      throw new JSONException("Unable to increment [" + key + "].");    }  }  return this;}  }
class C{  private void removeSelected(){  boolean allSelected=true;  for (  ExpressionEditor e : this.editors) {    if (!e.removeSelected()) {      allSelected=false;    }  }  if (allSelected) {    JOptionPane.showMessageDialog(this,"Cannot delete all expression editors.");  } else {    for (int i=editors.size() - 1; 0 <= i; i--) {      ExpressionEditor e=editors.get(i);      if (e.removeSelected()) {        this.editors.remove(i);      }    }    createExpressionEditors();    expressionsPanel.revalidate();    expressionsPanel.repaint();  }}  }
class C{  public synchronized boolean sendReply(int type) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  int bytesReceived;  long id=mListener.getConnectionId();  if (id == -1) {    replyHeader.mConnectionID=null;  } else {    replyHeader.mConnectionID=ObexHelper.convertToByteArray(id);  }  byte[] headerArray=ObexHelper.createHeader(replyHeader,true);  int bodyLength=-1;  int orginalBodyLength=-1;  if (mPrivateOutput != null) {    bodyLength=mPrivateOutput.size();    orginalBodyLength=bodyLength;  }  if ((ObexHelper.BASE_PACKET_LENGTH + headerArray.length) > mMaxPacketLength) {    int end=0;    int start=0;    while (end != headerArray.length) {      end=ObexHelper.findHeaderEnd(headerArray,start,mMaxPacketLength - ObexHelper.BASE_PACKET_LENGTH);      if (end == -1) {        mClosed=true;        if (mPrivateInput != null) {          mPrivateInput.close();        }        if (mPrivateOutput != null) {          mPrivateOutput.close();        }        mParent.sendResponse(ResponseCodes.OBEX_HTTP_INTERNAL_ERROR,null);        throw new IOException("OBEX Packet exceeds max packet size");      }      byte[] sendHeader=new byte[end - start];      System.arraycopy(headerArray,start,sendHeader,0,sendHeader.length);      mParent.sendResponse(type,sendHeader);      start=end;    }    if (bodyLength > 0) {      return true;    } else {      return false;    }  } else {    out.write(headerArray);  }  if (mGetOperation && type == ResponseCodes.OBEX_HTTP_OK) {    finalBitSet=true;  }  if ((finalBitSet) || (headerArray.length < (mMaxPacketLength - 20))) {    if (bodyLength > 0) {      if (bodyLength > (mMaxPacketLength - headerArray.length - 6)) {        bodyLength=mMaxPacketLength - headerArray.length - 6;      }      byte[] body=mPrivateOutput.readBytes(bodyLength);      if ((finalBitSet) || (mPrivateOutput.isClosed())) {        if (mEndofBody) {          out.write(0x49);          bodyLength+=3;          out.write((byte)(bodyLength >> 8));          out.write((byte)bodyLength);          out.write(body);        }      } else {        out.write(0x48);        bodyLength+=3;        out.write((byte)(bodyLength >> 8));        out.write((byte)bodyLength);        out.write(body);      }    }  }  if ((finalBitSet) && (type == ResponseCodes.OBEX_HTTP_OK) && (orginalBodyLength <= 0)) {    if (mEndofBody) {      out.write(0x49);      orginalBodyLength=3;      out.write((byte)(orginalBodyLength >> 8));      out.write((byte)orginalBodyLength);    }  }  mResponseSize=3;  mParent.sendResponse(type,out.toByteArray());  if (type == ResponseCodes.OBEX_HTTP_CONTINUE) {    int headerID=mInput.read();    int length=mInput.read();    length=(length << 8) + mInput.read();    if ((headerID != ObexHelper.OBEX_OPCODE_PUT) && (headerID != ObexHelper.OBEX_OPCODE_PUT_FINAL) && (headerID != ObexHelper.OBEX_OPCODE_GET)&& (headerID != ObexHelper.OBEX_OPCODE_GET_FINAL)) {      if (length > 3) {        byte[] temp=new byte[length - 3];        bytesReceived=mInput.read(temp);        while (bytesReceived != temp.length) {          bytesReceived+=mInput.read(temp,bytesReceived,temp.length - bytesReceived);        }      }      if (headerID == ObexHelper.OBEX_OPCODE_ABORT) {        mParent.sendResponse(ResponseCodes.OBEX_HTTP_OK,null);        mClosed=true;        isAborted=true;        mExceptionString="Abort Received";        throw new IOException("Abort Received");      } else {        mParent.sendResponse(ResponseCodes.OBEX_HTTP_BAD_REQUEST,null);        mClosed=true;        mExceptionString="Bad Request Received";        throw new IOException("Bad Request Received");      }    } else {      if ((headerID == ObexHelper.OBEX_OPCODE_PUT_FINAL)) {        finalBitSet=true;      } else       if (headerID == ObexHelper.OBEX_OPCODE_GET_FINAL) {        mRequestFinished=true;      }      if (length > ObexHelper.MAX_PACKET_SIZE_INT) {        mParent.sendResponse(ResponseCodes.OBEX_HTTP_REQ_TOO_LARGE,null);        throw new IOException("Packet received was too large");      }      if (length > 3) {        byte[] data=new byte[length - 3];        bytesReceived=mInput.read(data);        while (bytesReceived != data.length) {          bytesReceived+=mInput.read(data,bytesReceived,data.length - bytesReceived);        }        byte[] body=ObexHelper.updateHeaderSet(requestHeader,data);        if (body != null) {          mHasBody=true;        }        if (mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null) {          mListener.setConnectionId(ObexHelper.convertToLong(requestHeader.mConnectionID));        } else {          mListener.setConnectionId(1);        }        if (requestHeader.mAuthResp != null) {          if (!mParent.handleAuthResp(requestHeader.mAuthResp)) {            mExceptionString="Authentication Failed";            mParent.sendResponse(ResponseCodes.OBEX_HTTP_UNAUTHORIZED,null);            mClosed=true;            requestHeader.mAuthResp=null;            return false;          }          requestHeader.mAuthResp=null;        }        if (requestHeader.mAuthChall != null) {          mParent.handleAuthChall(requestHeader);          replyHeader.mAuthResp=new byte[requestHeader.mAuthResp.length];          System.arraycopy(requestHeader.mAuthResp,0,replyHeader.mAuthResp,0,replyHeader.mAuthResp.length);          requestHeader.mAuthResp=null;          requestHeader.mAuthChall=null;        }        if (body != null) {          mPrivateInput.writeBytes(body,1);        }      }    }    return true;  } else {    return false;  }}  }
class C{  public SimpleMultiPartRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,listener,errorListener);  mListener=listener;}  }
class C{  protected String promptForScale(String query){  try {    String answer=null;    System.out.println(query);    InputStreamReader isr=new InputStreamReader(System.in);    BufferedReader bufr=new BufferedReader(isr);    answer=bufr.readLine();    return answer;  } catch (  IOException ioe) {    Debug.error("MakeToc: IOException trying to get an answer from you.  Dang.");    return null;  }}  }
class C{  public ValidationResult validateScoping(AuthnRequestState t){  ValidationResult vr=null;  IdmAccessor accessor=t.getIdmAccessor();  String tenant=accessor.getTenant();  List<String> eligibleLocalIdpList=getEligibleLocalIdpList(t);  boolean isIDPSelectionEnabled=t.isIDPSelectionEnabled(tenant);  List<String> eligibleExternalIdpList=getEligibleExternalIdpList(t);  if (eligibleLocalIdpList.isEmpty() && eligibleExternalIdpList.isEmpty()) {    return new ValidationResult(OasisNames.REQUESTER,OasisNames.NO_SUPPORTED_IDP);  }  if (eligibleExternalIdpList.isEmpty()) {    log.debug("No eligible external idps. Do local authentication.");    t.setProxying(false);    t.setNeedChooseIDPView(false);  } else   if (!isIDPSelectionEnabled) {    t.setProxying(true);    if (eligibleExternalIdpList.size() == 1) {      String entityId=eligibleExternalIdpList.iterator().next();      IDPConfig idpConfig=accessor.getExternalIdpConfigForTenant(tenant,entityId);      t.setExtIDPToUse(idpConfig);      t.setNeedChooseIDPView(false);    } else {      log.error("Requested websso proxying, tenant has more than one trusted IDP registered," + " no IPD specified in IDPList element of the request scoping specification.");      vr=new ValidationResult(OasisNames.REQUESTER,OasisNames.NO_SUPPORTED_IDP);    }  } else {    vr=discoverIdentityProvidersForSelectionList(eligibleLocalIdpList,eligibleExternalIdpList,t);  }  log.info("Authn request proxyCount= " + t.getProxyCount() + " set isProxying="+ t.isProxying());  return vr;}  }
class C{  public static void repaintState(){  if (SimulationGUI.INSTANCE != null)   SimulationGUI.INSTANCE.repaintState();}  }
class C{  public static String unescapeJava(String str){  char[] chars=str.toCharArray();  StringBuilder sb=new StringBuilder(str.length());  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c != '\\') {      sb.append(c);      continue;    }    i++;    c=chars[i];switch (c) {case 'b':      sb.append('\b');    break;case 't':  sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case '"':sb.append('\"');break;case '\\':sb.append('\\');break;case 'u':char hex=(char)Integer.parseInt(new String(chars,i + 1,4),16);sb.append(hex);i+=4;break;default :throw new IllegalArgumentException("Invalid escaping character: " + c);}}return sb.toString();}  }
class C{  public Map<URI,Double> computeStoragePoolsAvgPortMetrics(List<StoragePool> storagePools){  Map<URI,Double> storageSystemAvgPortMetricsMap=new HashMap<URI,Double>();  for (  StoragePool storagePool : storagePools) {    URI storageSystemURI=storagePool.getStorageDevice();    storagePool.setAvgStorageDevicePortMetrics(null);    if (!storageSystemAvgPortMetricsMap.containsKey(storageSystemURI)) {      Double avgPortMetrics=computeStorageSystemAvgPortMetrics(storageSystemURI);      storageSystemAvgPortMetricsMap.put(storageSystemURI,avgPortMetrics);    }    storagePool.setAvgStorageDevicePortMetrics(storageSystemAvgPortMetricsMap.get(storageSystemURI));  }  return storageSystemAvgPortMetricsMap;}  }
class C{  public static boolean isPrimitiveArrayType(PsiType type){  return type instanceof PsiArrayType && isPrimitiveType(((PsiArrayType)type).getComponentType());}  }
class C{  public boolean includes(int index){  if (isDeleted)   return false;  return (this.offset <= index) && (index < this.offset + length);}  }
class C{  public static Range parseOffsetRange(char option,String rangeString) throws ParsingException {  StringTokenizer rangeTokenizer=new StringTokenizer(rangeString.replace(":","="),"-,=",true);  if (rangeTokenizer.countTokens() != 5) {    throw new ParsingException("-" + option + " has an malformed range : "+ rangeString);  }  int start=Format.parseUnsigned(rangeTokenizer.nextToken().trim());  String sep=rangeTokenizer.nextToken();  int end=Format.parseUnsigned(rangeTokenizer.nextToken().trim()) + ("-".equals(sep) ? 0 : start);  String nextSep=rangeTokenizer.nextToken();  if (!"=".equals(nextSep)) {    throw new ParsingException("-" + option + " has an malformed range : "+ rangeString+ " (expected '=' or ':' before last address)");  }  int offset=Format.parseUnsigned(rangeTokenizer.nextToken().trim());  return new Range(start,end,offset);}  }
class C{  public static boolean isTimeSeries(Class<? extends TaggedLogAPIEntity> clazz){  TimeSeries ts=clazz.getAnnotation(TimeSeries.class);  return ts != null && ts.value();}  }
class C{  public boolean isSetMessage(){  return this.message != null;}  }
class C{  public static void addSurpriseMember(DistributedSystem sys,DistributedMember mbr,long birthTime){  ((Manager)getMembershipManager(sys)).addSurpriseMemberForTesting(mbr,birthTime);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList emList;  Node emNode;  Node textNode;  NodeList textList;  int length;  doc=(Document)load("hc_staff",false);  emList=doc.getElementsByTagName("em");  emNode=emList.item(2);  textNode=emNode.getFirstChild();  textList=textNode.getChildNodes();  length=(int)textList.getLength();  assertEquals("length",0,length);}  }
class C{  public int[] selectedAttributes() throws Exception {  if (m_selectedAttributeSet == null) {    throw new Exception("Attribute selection has not been performed yet!");  }  return m_selectedAttributeSet;}  }
class C{  public Snippet[] highlightField(String field,Query query,IndexSearcher searcher,int docId,int maxPassages) throws IOException {  Map<String,Object[]> fieldsAsObjects=super.highlightFieldsAsObjects(new String[]{field},query,searcher,new int[]{docId},new int[]{maxPassages});  Object[] snippetObjects=fieldsAsObjects.get(field);  if (snippetObjects != null) {    assert snippetObjects.length == 1;    Object snippetObject=snippetObjects[0];    if (snippetObject != null && snippetObject instanceof Snippet[]) {      return (Snippet[])snippetObject;    }  }  return EMPTY_SNIPPET;}  }
class C{  public boolean hasGroupMembershipInfos(){  return hasRepeatingExtension(GroupMembershipInfo.class);}  }
class C{  WhoisReader(Reader reader,DateTime now){  this.reader=checkNotNull(reader,"reader");  this.now=checkNotNull(now,"now");}  }
class C{  public void addDataPoint(Vec numerical,int[] categories,double val){  if (numerical.length() != numNumerVals)   throw new RuntimeException("Data point does not contain enough numerical data points");  if (categories.length != categories.length)   throw new RuntimeException("Data point does not contain enough categorical data points");  for (int i=0; i < categories.length; i++)   if (!this.categories[i].isValidCategory(categories[i]) && categories[i] >= 0)   throw new RuntimeException("Categoriy value given is invalid");  DataPoint dp=new DataPoint(numerical,categories,this.categories);  addDataPoint(dp,val);}  }
class C{  public void addLload(int n){  if (n < 4)   addOpcode(30 + n); else   if (n < 0x100) {    addOpcode(LLOAD);    add(n);  } else {    addOpcode(WIDE);    addOpcode(LLOAD);    addIndex(n);  }}  }
class C{  public Collection<CIMObjectPath> filterActiveLinks(Collection<CIMObjectPath> synchronizations,StorageSystem provider){  return filter(synchronizations,activeLinkPredicate(provider));}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  static public Formatter doubleFormatter(){  return doubleFormatter;}  }
class C{  @Override public net.floodlightcontroller.core.IListener.Command reconcileFlows(ArrayList<OFMatchReconcile> ofmRcList){  if (lds != null) {    links=new HashMap<Link,LinkInfo>();    if (lds.getLinks() != null)     links.putAll(lds.getLinks());    for (    OFMatchReconcile ofmr : ofmRcList) {      if (ofmr.rcAction.equals(OFMatchReconcile.ReconcileAction.UPDATE_PATH)) {        IOFSwitch sw=switchService.getSwitch(ofmr.ofmWithSwDpid.getDpid());        Map<OFPort,List<Match>> invalidBaseIngressAndMatches=new HashMap<OFPort,List<Match>>();        List<OFFlowStatsReply> flows=getFlows(sw,ofmr.outPort);        for (        OFFlowStatsReply flow : flows) {          for (          OFFlowStatsEntry entry : flow.getEntries()) {            Match match=entry.getMatch();            if (invalidBaseIngressAndMatches.containsKey(match.get(MatchField.IN_PORT)))             invalidBaseIngressAndMatches.get(match.get(MatchField.IN_PORT)).add(match); else {              List<Match> matches=new ArrayList<Match>();              matches.add(match);              invalidBaseIngressAndMatches.put(match.get(MatchField.IN_PORT),matches);            }          }        }        if (!flows.isEmpty()) {          log.debug("Removing flows on switch : " + sw.getId() + " with outport: "+ ofmr.outPort);          clearFlowMods(sw,ofmr.outPort);        }        Map<IOFSwitch,Map<OFPort,List<Match>>> neighborSwitches=new HashMap<IOFSwitch,Map<OFPort,List<Match>>>();        for (        Link link : links.keySet()) {          if (link.getDst() == sw.getId()) {            for (            Entry<OFPort,List<Match>> invalidBaseIngressAndMatch : invalidBaseIngressAndMatches.entrySet()) {              if (link.getDstPort() == invalidBaseIngressAndMatch.getKey()) {                Map<OFPort,List<Match>> invalidNeighborOutportAndMatch=new HashMap<OFPort,List<Match>>();                invalidNeighborOutportAndMatch.put(link.getSrcPort(),invalidBaseIngressAndMatch.getValue());                neighborSwitches.put(switchService.getSwitch(link.getSrc()),invalidNeighborOutportAndMatch);              }            }          }        }        log.debug("We have " + neighborSwitches.size() + " neighboring switches to deal with!");        for (        IOFSwitch neighborSwitch : neighborSwitches.keySet()) {          log.debug("NeighborSwitch ID : " + neighborSwitch.getId());          if (neighborSwitches.get(neighborSwitch) != null)           deleteInvalidFlows(neighborSwitch,neighborSwitches.get(neighborSwitch));        }      }      return Command.CONTINUE;    }  } else {    log.error("Link Discovery Service Is Null");  }  return Command.CONTINUE;}  }
class C{  public static boolean testLineSegmentSphere(Vector3fc p0,Vector3fc p1,Vector3fc center,float radiusSquared){  return testLineSegmentSphere(p0.x(),p0.y(),p0.z(),p1.x(),p1.y(),p1.z(),center.x(),center.y(),center.z(),radiusSquared);}  }
class C{  @Override public XMLEventReader createXMLEventReader(XMLStreamReader reader) throws XMLStreamException {  return new WbXmlEventReader((WbXmlStreamReader)reader);}  }
class C{  private Intent[] buildIntentsToViewsLists(){  Intent[] intents=new Intent[3];  intents[0]=Intent.makeRestartActivityTask(new ComponentName(this,com.example.android.apis.ApiDemos.class));  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.setClass(IntentActivityFlags.this,com.example.android.apis.ApiDemos.class);  intent.putExtra("com.example.android.apis.Path","Views");  intents[1]=intent;  intent=new Intent(Intent.ACTION_MAIN);  intent.setClass(IntentActivityFlags.this,com.example.android.apis.ApiDemos.class);  intent.putExtra("com.example.android.apis.Path","Views/Lists");  intents[2]=intent;  return intents;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return CITY;case 2:  return STATE;case 3:return COUNTRY;default :return null;}}  }
class C{  @Override public void config(XStream xstream){  xstream.alias("mvn-artifact",ArtifactElement.class);  xstream.alias("mvn-property",PropertyElement.class);}  }
class C{  public final boolean canGet(String field,Class type){  return m_table.canGet(field,type);}  }
class C{  public boolean isArray(){  return array;}  }
class C{  protected Size2D arrangeFN(BlockContainer container,Graphics2D g2,double width){  double[] w=new double[5];  double[] h=new double[5];  RectangleConstraint c1=new RectangleConstraint(width,null,LengthConstraintType.FIXED,0.0,null,LengthConstraintType.NONE);  if (this.topBlock != null) {    Size2D size=this.topBlock.arrange(g2,c1);    w[0]=size.width;    h[0]=size.height;  }  if (this.bottomBlock != null) {    Size2D size=this.bottomBlock.arrange(g2,c1);    w[1]=size.width;    h[1]=size.height;  }  RectangleConstraint c2=new RectangleConstraint(0.0,new Range(0.0,width),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);  if (this.leftBlock != null) {    Size2D size=this.leftBlock.arrange(g2,c2);    w[2]=size.width;    h[2]=size.height;  }  if (this.rightBlock != null) {    double maxW=Math.max(width - w[2],0.0);    RectangleConstraint c3=new RectangleConstraint(0.0,new Range(Math.min(w[2],maxW),maxW),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);    Size2D size=this.rightBlock.arrange(g2,c3);    w[3]=size.width;    h[3]=size.height;  }  h[2]=Math.max(h[2],h[3]);  h[3]=h[2];  if (this.centerBlock != null) {    RectangleConstraint c4=new RectangleConstraint(width - w[2] - w[3],null,LengthConstraintType.FIXED,0.0,null,LengthConstraintType.NONE);    Size2D size=this.centerBlock.arrange(g2,c4);    w[4]=size.width;    h[4]=size.height;  }  double height=h[0] + h[1] + Math.max(h[2],Math.max(h[3],h[4]));  return arrange(container,g2,new RectangleConstraint(width,height));}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public static boolean isPositiveInteger(String number){  if (isNullOrEmpty(number)) {    return false;  }  try {    return Integer.parseInt(number) >= 0;  } catch (  NumberFormatException ex) {    return false;  }}  }
class C{  public KeyStoreEntryTransferable(DragEntry dragEntry){  this.dragEntry=dragEntry;}  }
class C{  public DetectorResult detect() throws NotFoundException, FormatException {  return detect(null);}  }
class C{  public DViewPublicKey(JDialog parent,String title,PublicKey publicKey) throws CryptoException {  super(parent,title,ModalityType.DOCUMENT_MODAL);  this.publicKey=publicKey;  initComponents();}  }
class C{  public void findAndInit(Iterator<?> it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  public void send(Object message) throws RemotingException {  client.send(message);}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  public static void uncontribute(ComponentAddon component){  contributedComponents.remove(component);  if (currentAddon != null) {    component.uninitialize(currentAddon);  }}  }
class C{  public boolean isEqualOrAbove(int requiredMajorVersion,int requiredMinorVersion){  return majorVersion > requiredMajorVersion || (majorVersion == requiredMajorVersion && minorVersion >= requiredMinorVersion);}  }
class C{  void _m21(float m21){  this.m21=m21;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testAddMissingJmsResourcesJmsModule() throws Exception {  Resource jmsServerResource=new Resource("TestJmsServer",WebLogicConfigurationEntryType.JMS_SERVER);  jmsServerResource.setParameter("priority","10");  Resource jmsSubdeploymentResource=new Resource("TestJmsSubdeployment",WebLogicConfigurationEntryType.JMS_SUBDEPLOYMENT);  jmsSubdeploymentResource.setParameter("priority","30");  Resource jmsQueueResource=new Resource("jms/queue/REQUEST",WebLogicConfigurationEntryType.JMS_QUEUE);  configuration.addResource(jmsServerResource);  configuration.addResource(jmsSubdeploymentResource);  configuration.addResource(jmsQueueResource);  WebLogicResourceRules.addMissingJmsResources(configuration);  List<Resource> resources=configuration.getResources();  assertEquals(4,resources.size());  Resource jmsServer=null;  Resource jmsModule=null;  Resource jmsSubdeployment=null;  Resource jmsQueue=null;  for (  Resource resource : configuration.getResources()) {    if (WebLogicConfigurationEntryType.JMS_SERVER.equals(resource.getType())) {      jmsServer=resource;    } else     if (WebLogicConfigurationEntryType.JMS_MODULE.equals(resource.getType())) {      jmsModule=resource;    } else     if (WebLogicConfigurationEntryType.JMS_SUBDEPLOYMENT.equals(resource.getType())) {      jmsSubdeployment=resource;    } else     if (WebLogicConfigurationEntryType.JMS_QUEUE.equals(resource.getType())) {      jmsQueue=resource;    }  }  assertNotNull(jmsServer);  assertNotNull(jmsModule);  assertNotNull(jmsSubdeployment);  assertNotNull(jmsQueue);}  }
class C{  public final Set<K> keySet(){  return mCount.keySet();}  }
class C{  @RequestMapping(value="/tags/tagTypes/{tagTypeCode}/tagCodes/{tagCode}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_TAGS_PUT) public Tag updateTag(@PathVariable("tagTypeCode") String tagTypeCode,@PathVariable("tagCode") String tagCode,@RequestBody TagUpdateRequest tagUpdateRequest){  TagKey tagKey=new TagKey(tagTypeCode,tagCode);  return tagService.updateTag(tagKey,tagUpdateRequest);}  }
class C{  public final AC size(String size,int... indexes){  BoundSize bs=ConstraintParser.parseBoundSize(size,false,true);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setSize(bs);  }  return this;}  }
class C{  protected BridgeContext createBridgeContext(String svgVersion){  if ("1.2".equals(svgVersion)) {    return new SVG12BridgeContext(userAgent);  } else {    return new BridgeContext(userAgent);  }}  }
class C{  public BBR(int maxIterations){}  }
class C{  static void checkManifest(Manifest manifest,Path jar){  String targetVersion=manifest.getMainAttributes().getValue("X-Compile-Target-JDK");  if (targetVersion != null) {    checkVersionFormat(targetVersion);    checkJavaVersion(jar.toString(),targetVersion);  }  String systemESVersion=Version.CURRENT.toString();  String targetESVersion=manifest.getMainAttributes().getValue("X-Compile-Elasticsearch-Version");  if (targetESVersion != null && targetESVersion.equals(systemESVersion) == false) {    throw new IllegalStateException(jar + " requires Elasticsearch " + targetESVersion+ ", your system: "+ systemESVersion);  }}  }
class C{  public int insert(String table,String key,HashMap<String,ByteIterator> values){  long st=System.nanoTime();  int res=_db.insert(table,key,values);  long en=System.nanoTime();  _measurements.measure("INSERT",(int)((en - st) / 1000));  _measurements.reportReturnCode("INSERT",res);  return res;}  }
class C{  @Inject public StatusFeClient(@BackendTaskExecutor ExecutorService executor,@ScheduledTaskExecutor ScheduledExecutorService scheduledExecutorService,@PhotonControllerServerSet ServerSet photonControllerServerSet,StatusConfig statusConfig){  this.executor=executor;  this.components=statusConfig.getComponents();  statusProviderFactories=Maps.newEnumMap(Component.class);  statusProviderFactories.put(Component.PHOTON_CONTROLLER,new XenonStatusProviderFactory(photonControllerServerSet,this.executor,scheduledExecutorService));}  }
class C{  @SuppressWarnings("unchecked") private void includeStuckComponents(Map<IDIYComponent<?>,Set<Integer>> controlPointMap){  int oldSize=controlPointMap.size();  LOG.trace("Expanding selected component map");  for (  IDIYComponent<?> component : currentProject.getComponents()) {    ComponentType componentType=ComponentProcessor.getInstance().extractComponentTypeFrom((Class<? extends IDIYComponent<?>>)component.getClass());    for (int i=0; i < component.getControlPointCount(); i++) {      if ((!controlPointMap.containsKey(component) || !controlPointMap.get(component).contains(i)) && !isComponentLocked(component)) {        if (component.isControlPointSticky(i)) {          boolean componentMatches=false;          for (          Map.Entry<IDIYComponent<?>,Set<Integer>> entry : controlPointMap.entrySet()) {            if (componentMatches) {              break;            }            for (            Integer j : entry.getValue()) {              Point firstPoint=component.getControlPoint(i);              if (entry.getKey().isControlPointSticky(j)) {                Point secondPoint=entry.getKey().getControlPoint(j);                if (firstPoint.distance(secondPoint) < DrawingManager.CONTROL_POINT_SIZE) {                  componentMatches=true;                  break;                }              }            }          }          if (componentMatches) {            LOG.trace("Including component: " + component);            Set<Integer> indices=new HashSet<Integer>();            if (componentType.isStretchable()) {              indices.add(i);            } else {              for (int k=0; k < component.getControlPointCount(); k++) {                indices.add(k);              }            }            if (controlPointMap.containsKey(component)) {              controlPointMap.get(component).addAll(indices);            } else {              controlPointMap.put(component,indices);            }          }        }      }    }  }  int newSize=controlPointMap.size();  if (newSize > oldSize) {    LOG.trace("Component count changed, trying one more time.");    includeStuckComponents(controlPointMap);  } else {    LOG.trace("Component count didn't change, done with expanding.");  }}  }
class C{  public boolean isSupported(){  return iField.isSupported();}  }
class C{  public NetworkLinkDistanceFilter(final double distance,final Node centerNode){  this.distanceFilter=distance;  this.distanceFilterNode=centerNode;}  }
class C{  @Override public int executeUpdate() throws SQLException {  try {    checkClosed();    if (command.isQuery()) {      super.executeQuery();      return 0;    }    return super.executeUpdate();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void addReferenceTablePanel(String refTableClass){  try {    m_aspects=m_tradePersistentModel.findAspectsByClassName("org.trade.persistent.dao." + refTableClass);    Vector<Object> parm=new Vector<Object>();    m_tableModel=(AspectTableModel)ClassFactory.getCreateClass("org.trade.ui.models." + refTableClass + "TableModel",parm,this);    m_tableModel.setData(m_aspects);    m_table=new ConfigurationTable(m_tableModel);    m_table.setFont(new Font("Monospaced",Font.PLAIN,12));    m_table.setPreferredScrollableViewportSize(new Dimension(300,200));    m_table.setFillsViewportHeight(true);    m_table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);    m_table.getSelectionModel().addListSelectionListener(new TableRowListener());    m_jScrollPane.getViewport().add(m_table,BorderLayout.CENTER);    m_jScrollPane.setBorder(new BevelBorder(BevelBorder.LOWERED));    m_jScrollPane.addMouseListener(m_table);    if (m_aspects.getAspect().size() > 0) {      m_table.setRowSelectionInterval(0,0);    }  } catch (  Exception ex) {    this.setErrorMessage("Error deleting Strategy.",ex.getMessage(),ex);  }}  }
class C{  private byte[] encode(final RevisionCodecData codecData,final Diff diff) throws UnsupportedEncodingException, EncodingException {  this.data=new BitWriter(codecData.totalSizeInBits());  encodeCodecData(codecData);  DiffPart part;  Iterator<DiffPart> partIt=diff.iterator();  while (partIt.hasNext()) {    part=partIt.next();switch (part.getAction()) {case FULL_REVISION_UNCOMPRESSED:      encodeFullRevisionUncompressed(part);    break;case INSERT:  encodeInsert(part);break;case DELETE:encodeDelete(part);break;case REPLACE:encodeReplace(part);break;case CUT:encodeCut(part);break;case PASTE:encodePaste(part);break;default :throw new RuntimeException();}}return data.toByteArray();}  }
class C{  private boolean listsEqual(Collection<Address> left,Collection<Address> right){  if (left.size() != right.size())   return false;  for (  Address address : left) {    if (!right.contains(address)) {      return false;    }  }  return true;}  }
class C{  protected boolean isCalloutActive(){  return m_mTab != null ? m_mTab.getActiveCallouts().length > 1 : false;}  }
class C{  public static String encodeJavaMIMEType(String mimeType){  return (mimeType != null) ? JavaMIME + mimeType : null;}  }
class C{  @Override public boolean supportsSubqueriesInComparisons(){  debugCodeCall("supportsSubqueriesInComparisons");  return true;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.026 -0500",hash_original_method="0C685B50A598B045820F5EF901D2AED6",hash_generated_method="0C685B50A598B045820F5EF901D2AED6") void reExecutePeriodic(RunnableScheduledFuture<?> task){  if (canRunInCurrentRunState(true)) {    super.getQueue().add(task);    if (!canRunInCurrentRunState(true) && remove(task))     task.cancel(false); else     prestartCoreThread();  }}  }
class C{  @Bean(initMethod="start",destroyMethod="stop") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {  return Server.createTcpServer("-tcp","-tcpAllowOthers");}  }
class C{  public CannotCompileException(CompileError e){  this("[source error] " + e.getMessage(),e);}  }
class C{  @Override public void messageSent(IoSession session,Object message) throws Exception {  MessageHandler<Object> handler=findSentMessageHandler(message.getClass());  if (handler != null) {    handler.handleMessage(session,message);  } else {    throw new UnknownMessageTypeException("No handler found for message type: " + message.getClass().getSimpleName());  }}  }
class C{  public boolean onIsMultiPane(){  boolean preferMultiPane=getResources().getBoolean(com.android.internal.R.bool.preferences_prefer_dual_pane);  return preferMultiPane;}  }
class C{  @DSComment("Backup subsystem") @DSSpec(DSCat.BACKUP_SUBSYSTEM) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:48.168 -0500",hash_original_method="7CBA866E381731475421534F9512B87B",hash_generated_method="34184F7083DF5923092C9E735C13DE99") public FileBackupHelper(Context context,String... files){  super(context);  mContext=context;  mFilesDir=context.getFilesDir();  mFiles=files;}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  Expression e=(expr != null) ? expr.copyInline(ctx) : null;  if ((!valNeeded) && (e != null)) {    Statement body[]={new ExpressionStatement(where,e),new InlineReturnStatement(where,null)};    return new CompoundStatement(where,body);  }  return new InlineReturnStatement(where,e);}  }
class C{  public AxisAngle4f(){  this.x=0.0f;  this.y=0.0f;  this.z=1.0f;  this.angle=0.0f;}  }
class C{  private void synchronizeWith(InternalDistributedMember target,VersionSource versionMember,InternalDistributedMember lostMember){  InitialImageOperation op=new InitialImageOperation(this,this.entries);  op.synchronizeWith(target,versionMember,lostMember);}  }
class C{  private static String[] toTrimmedTokens(String s,char sep){  int toks=0, sSize=s.length();  boolean disregardDoubles=sep == ' ';  int p=0;  for (int i=0; i < sSize; i++) {    char c=s.charAt(i);    if (c == '(') {      p++;    } else     if (c == ')') {      p--;    } else     if (p == 0 && c == sep) {      toks++;      while (disregardDoubles && i < sSize - 1 && s.charAt(i + 1) == ' ')       i++;    }    if (p < 0)     throw new IllegalArgumentException("Unbalanced parentheses: '" + s + "'");  }  if (p != 0)   throw new IllegalArgumentException("Unbalanced parentheses: '" + s + "'");  if (toks == 0)   return new String[]{s.trim()};  String[] retArr=new String[toks + 1];  int st=0, pNr=0;  p=0;  for (int i=0; i < sSize; i++) {    char c=s.charAt(i);    if (c == '(') {      p++;    } else     if (c == ')') {      p--;    } else     if (p == 0 && c == sep) {      retArr[pNr++]=s.substring(st,i).trim();      st=i + 1;      while (disregardDoubles && i < sSize - 1 && s.charAt(i + 1) == ' ')       i++;    }  }  retArr[pNr++]=s.substring(st,sSize).trim();  return retArr;}  }
class C{  public void update(){  if (amplitude > 0) {    long elapsed=System.currentTimeMillis() - timestamp;    double delta=amplitude * Math.exp(-elapsed / timeConstant);    if (Math.abs(delta) > 0.5) {      viewpointNode.drag(lastDx * delta,lastDy * delta);    } else {      amplitude=0;      updateLookAt();    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.STATE_INTERNAL___COMMENT_1:    return getComment_1();case UmplePackage.STATE_INTERNAL___CHANGE_TYPE_1:  return getChangeType_1();case UmplePackage.STATE_INTERNAL___STATE_ENTITY_1:return getStateEntity_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static float ccpCalcRotate(final CGPoint from,final CGPoint to){  float o=to.x - from.x;  float a=to.y - from.y;  float at=ccMacros.CC_RADIANS_TO_DEGREES((float)Math.atan(o / a));  if (a < 0) {    if (o < 0)     at=180 + Math.abs(at); else     at=180 - Math.abs(at);  }  return at;}  }
class C{  public static String extractId(String clientId){  if (StringUtils.contains(clientId,':')) {    clientId=StringUtils.substringAfterLast(clientId,":");  }  return clientId;}  }
class C{  public AppEvent(EventType type,Object data){  super(type);  this.data=data;}  }
class C{  @Override public synchronized int read(){  return pos < count ? buffer.charAt(pos++) & 0xFF : -1;}  }
class C{  private void createSceneSSBO(){  this.ssbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,ssbo);  ByteBuffer ssboData=BufferUtils.createByteBuffer(4 * (4 + 4) * boxes.length / 2);  FloatBuffer fv=ssboData.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    Vector3f min=boxes[i];    Vector3f max=boxes[i + 1];    fv.put(min.x).put(min.y).put(min.z).put(0.0f);    fv.put(max.x).put(max.y).put(max.z).put(0.0f);  }  glBufferData(GL_ARRAY_BUFFER,ssboData,GL_STATIC_DRAW);  glBindBuffer(GL_ARRAY_BUFFER,0);}  }
class C{  public InputStream openInputStream(final Request request,final CacheStrategy cacheStrategy,BlacklistType blacklistType,final ClientIdentification.Agent agent) throws IOException {  final int maxFileSize=protocolMaxFileSize(request.url());  InputStream stream=null;  Semaphore check=this.loaderSteering.get(request.url());  if (check != null && cacheStrategy != CacheStrategy.NOCACHE) {    long t=System.currentTimeMillis();    try {      check.tryAcquire(5,TimeUnit.SECONDS);    } catch (    final InterruptedException e) {    }    ConcurrentLog.info("LoaderDispatcher","waited " + (System.currentTimeMillis() - t) + " ms for "+ request.url().toNormalform(true));  }  this.loaderSteering.put(request.url(),new Semaphore(0));  try {    stream=openInputStreamInternal(request,cacheStrategy,maxFileSize,blacklistType,agent);  } catch (  IOException ioe) {    throw ioe;  }catch (  final Throwable e) {    throw new IOException(e);  } finally {    check=this.loaderSteering.remove(request.url());    if (check != null) {      check.release(1000);    }  }  return stream;}  }
class C{  public T cursorNext(long id){  ArrayCursor cursor=getCursor(id);  if (cursor.index < size()) {    if (buffer != null) {      return buffer.get(cursor.index++);    } else {      try {        if (cursor.byteInput == null) {          cursor.byteInput=getByteCache().allocateStream(getKey());        }        ObjectInputStream objectInput=new ObjectInputStream(cursor.byteInput);        @SuppressWarnings("unchecked") T nextObject=(T)objectInput.readObject();        cursor.index++;        return nextObject;      } catch (      IOException e) {        throw new RuntimeException("Unable to deserialize next object: count=" + cursor.index,e);      }catch (      ClassNotFoundException e) {        throw new RuntimeException("Unable to deserialize next object: count=" + cursor.index,e);      }    }  } else   throw new NoSuchElementException("Cursor exceeded array size: size=" + size() + " cursor index="+ cursor.index);}  }
class C{  @Override public String nativeSQL(String sql) throws SQLException {  try {    debugCodeCall("nativeSQL",sql);    checkClosed();    return translateSQL(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String installPackageFromArchive(String packageArchivePath,PrintStream... progress) throws Exception {  useCacheOrOnlineRepository();  Package toInstall=PACKAGE_MANAGER.getPackageArchiveInfo(packageArchivePath);  Object specialInstallMessage=toInstall.getPackageMetaDataElement("MessageToDisplayOnInstallation");  if (specialInstallMessage != null && specialInstallMessage.toString().length() > 0) {    String siM=specialInstallMessage.toString();    try {      siM=Environment.getSystemWide().substitute(siM);    } catch (    Exception ex) {    }    String message="**** Special installation message ****\n" + siM + "\n**** Special installation message ****";    for (    PrintStream p : progress) {      p.println(message);    }  }  PACKAGE_MANAGER.installPackageFromArchive(packageArchivePath,progress);  boolean loadIt=checkForMissingClasses(toInstall,progress);  if (loadIt) {    File packageRoot=new File(PACKAGE_MANAGER.getPackageHome() + File.separator + toInstall.getName());    loadIt=checkForMissingFiles(toInstall,packageRoot,progress);    if (loadIt) {      loadPackageDirectory(packageRoot,false,null,false);    }  }  return toInstall.getName();}  }
class C{  public static String translateWebServiceConstraint(License license){  String limit;  try {    limit=license.getConstraints().getConstraintValue(ProductConstraintManager.INSTANCE.getWebServiceLimitConstraint());    try {      limit=NumberFormat.getInstance().format(Integer.parseInt(limit));    } catch (    NumberFormatException e) {    }  } catch (  ConstraintNotRestrictedException e) {    limit=I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.value.unlimited.label");  }  return I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.web_service.label",limit);}  }
class C{  protected boolean looks_nullable() throws internal_error {  for (Enumeration e=productions(); e.hasMoreElements(); )   if (((production)e.nextElement()).check_nullable())   return true;  return false;}  }
class C{  public void reset(){  validState=null;  if (markedState != null) {    markedState=null;    unmark();  }}  }
class C{  public Message editMessageCaption(Message oldMessage,String caption,InlineReplyMarkup inlineReplyMarkup){  return this.editMessageCaption(oldMessage.getChat().getId(),oldMessage.getMessageId(),caption,inlineReplyMarkup);}  }
class C{  public static String block(Stream<String> rows){  return block(rows.collect(joining(nl())));}  }
class C{  private void init(){  this.setOrientation(LinearLayout.VERTICAL);  mLayoutParams=new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);}  }
class C{  public boolean isValueTypeDuration(){  return valueType == ParameterValueType.DURATION;}  }
class C{  @Override public void init(String url){  System.out.println("Initializing the event listener for database " + url);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return Boolean.valueOf(node != null && node.isHierarchyRealized());}  }
class C{  @Override public void processRow(ResultSet rs) throws SQLException {}  }
class C{  @Override public void emitIntegerTestBranch(Value left,Value right,LabelRef trueDestination,LabelRef falseDestination,double trueSuccessorProbability){  assert ((AArch64Kind)left.getPlatformKind()).isInteger() && left.getPlatformKind() == right.getPlatformKind();  ((AArch64ArithmeticLIRGenerator)getArithmetic()).emitBinary(LIRKind.combine(left,right),AArch64ArithmeticOp.ANDS,true,left,right);  append(new AArch64ControlFlow.BranchOp(ConditionFlag.EQ,trueDestination,falseDestination,trueSuccessorProbability));}  }
class C{  public int size(){  return super.size();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) protected void populateAffectedBlocksList(){  HashSet hashset=new HashSet();  float radius=Math.min(explosionSize * restrictExplosion,500.0F);  for (int i=0; i < MAX_RADIUS; ++i) {    for (int j=0; j < MAX_RADIUS; ++j) {      for (int k=0; k < MAX_RADIUS; ++k) {        if (i == 0 || i == MAX_RADIUS - 1 || j == 0 || j == MAX_RADIUS - 1 || k == 0 || k == MAX_RADIUS - 1) {          double d3=(double)((float)i / ((float)MAX_RADIUS - 1.0F) * 2.0F - 1.0F);          double d4=(double)((float)j / ((float)MAX_RADIUS - 1.0F) * 2.0F - 1.0F);          double d5=(double)((float)k / ((float)MAX_RADIUS - 1.0F) * 2.0F - 1.0F);          double d6=Math.sqrt(d3 * d3 + d4 * d4 + d5 * d5);          d3/=d6;          d4/=d6;          d5/=d6;          float f1=radius * (0.7F + worldObj.rand.nextFloat() * 0.6F);          double d0=explosionX;          double d1=explosionY;          double d2=explosionZ;          for (float f2=0.3F; f1 > 0.0F; f1-=f2 * 0.75F) {            int l=MathHelper.floor_double(d0);            int i1=MathHelper.floor_double(d1);            int j1=MathHelper.floor_double(d2);            Block block=worldObj.getBlock(l,i1,j1);            if (block.getMaterial() != Material.air) {              boolean flag=!block.getMaterial().isLiquid() || !ignoreLiquids || !(ignoreLiquidType != 0 && ((ignoreLiquidType == 1 && block.getMaterial() == Material.water) || (ignoreLiquidType == 2 && block.getMaterial() == Material.lava)));              if (flag) {                float f3=exploder != null ? exploder.func_145772_a(this,worldObj,l,i1,j1,block) : block.getExplosionResistance(exploder,worldObj,l,i1,j1,explosionX,explosionY,explosionZ);                f1-=(f3 + 0.3F) * f2;              }            }            if (f1 > 0.0F && (targetBlock == null || block == targetBlock || block instanceof NCExplodable) && (exploder == null || exploder.func_145774_a(this,worldObj,l,i1,j1,block,f1))) {              hashset.add(new ChunkPosition(l,i1,j1));            }            d0+=d3 * (double)f2;            d1+=d4 * (double)f2;            d2+=d5 * (double)f2;          }        }      }    }  }  affectedBlockPositions.addAll(hashset);}  }
class C{  public static String createIntersectionTypeSignature(char[][] typeSignatures){  StringBuffer buffer=new StringBuffer();  buffer.append(Signature.C_INTERSECTION);  for (int i=0, max=typeSignatures.length; i < max; i++) {    if (i > 0) {      buffer.append(Signature.C_COLON);    }    buffer.append(typeSignatures[i]);  }  return String.valueOf(buffer);}  }
class C{  public CControlsPanel(final ZyGraphViewSettings settings){  super(new GridLayout(3,1));  setBorder(new TitledBorder("Controls"));  CSettingsPanelBuilder.addComboBox(this,mouseWheelBehaviorBox,"Mousewheel Action" + ":","Specifies whether the mousewheel is used for zooming or scrolling in graph windows.",new String[]{"Zoom","Scroll"},settings.getMouseSettings().getMouseWheelAction().ordinal());  CSettingsPanelBuilder.addDoubleSlider(this,m_tfScrollSensitivity,"Scroll Sensitivity" + ":","Mouse sensitivity during scroll operations.",settings.getMouseSettings().getScrollSensitivity() / 5);  CSettingsPanelBuilder.addDoubleSlider(this,m_tfZoomSensitivity,"Zoom Sensitivity" + ":","Mouse sensitivity during zoom operations.",settings.getMouseSettings().getZoomSensitivity() / 5);}  }
class C{  public Complex sin(){  return new Complex(Math.sin(re) * Math.cosh(im),Math.cos(re) * Math.sinh(im));}  }
class C{  @Override public DataSource createDataSource(Properties properties) throws SQLException {  Properties propertiesCopy=new Properties();  if (properties != null) {    propertiesCopy.putAll(properties);  }  rejectUnsupportedOptions(propertiesCopy);  rejectPoolingOptions(propertiesCopy);  JdbcDataSource dataSource=new JdbcDataSource();  setupH2DataSource(dataSource,propertiesCopy);  return dataSource;}  }
class C{  private static long bit(int bitIndex){  return 1L << (bitIndex & ((1 << 6) - 1));}  }
class C{  public static void d(String tag,String s,Object... args){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,String.format(s,args));}  }
class C{  private int expandBeam(Beam<Derivation<TK,FV>>[] beams,int beamId,int sourceSz,RuleGrid<TK,FV> optionGrid,OutputSpace<TK,FV> outputSpace,int sourceInputId){  int optionsApplied=0;  int hypPos=-1;  int totalHypothesesGenerated=0;  for (  Derivation<TK,FV> hyp : beams[beamId]) {    hypPos++;    if (hyp == null)     continue;    int localOptionsApplied=0;    int firstCoverageGap=hyp.sourceCoverage.nextClearBit(0);    int priorStartPos=(hyp.featurizable == null ? 0 : hyp.featurizable.sourcePosition);    int priorEndPos=(hyp.featurizable == null ? 0 : hyp.featurizable.sourcePosition + hyp.featurizable.sourcePhrase.size());    for (int startPos=firstCoverageGap; startPos < sourceSz; startPos++) {      int endPosMax=hyp.sourceCoverage.nextSetBit(startPos);      if (DETAILED_DEBUG)       System.err.printf("Current startPos: %d, endPosMax: %d\n",startPos,endPosMax);      if (endPosMax < 0) {        if (maxDistortion >= 0 && startPos != firstCoverageGap) {          endPosMax=Math.min(firstCoverageGap + maxDistortion + 1,sourceSz);        } else {          endPosMax=sourceSz;        }        if (DETAILED_DEBUG)         System.err.printf("after checking distortion limit, endPosMax: %d\n",endPosMax);      }      if (useITGConstraints) {        boolean ITGOK=true;        if (startPos > priorStartPos) {          for (int pos=priorEndPos + 1; pos < startPos; pos++) {            if (hyp.sourceCoverage.get(pos) && !hyp.sourceCoverage.get(pos - 1)) {              ITGOK=false;              break;            }          }        } else {          for (int pos=startPos; pos < priorStartPos; pos++) {            if (hyp.sourceCoverage.get(pos) && !hyp.sourceCoverage.get(pos + 1)) {              ITGOK=false;              break;            }          }        }        if (DETAILED_DEBUG)         System.err.printf("after ITG constraints check, ITGOK=%b\n",ITGOK);        if (!ITGOK)         continue;      }      for (int endPos=startPos; endPos < endPosMax; endPos++) {        List<ConcreteRule<TK,FV>> applicableOptions=optionGrid.get(startPos,endPos);        if (applicableOptions == null)         continue;        for (        ConcreteRule<TK,FV> option : applicableOptions) {          if (!outputSpace.allowableContinuation(hyp.featurizable,option)) {            continue;          }          Derivation<TK,FV> newHyp=new Derivation<TK,FV>(sourceInputId,option,hyp.length,hyp,featurizer,scorer,heuristic,outputSpace);          if (DETAILED_DEBUG) {            System.err.printf("creating hypothesis %d from %d\n",newHyp.id,hyp.id);            System.err.printf("hyp: %s\n",newHyp.featurizable.targetSequence);            System.err.printf("coverage: %s\n",newHyp.sourceCoverage);            if (hyp.featurizable != null) {              System.err.printf("par: %s\n",hyp.featurizable.targetSequence);              System.err.printf("coverage: %s\n",hyp.sourceCoverage);            }            System.err.printf("\tbase score: %.3f\n",hyp.score);            System.err.printf("\tcovering: %s\n",newHyp.rule.sourceCoverage);            System.err.printf("\tforeign: %s\n",newHyp.rule.abstractRule.source);            System.err.printf("\ttranslated as: %s\n",newHyp.rule.abstractRule.target);            System.err.printf("\tscore: %.3f + future cost %.3f = %.3f\n",newHyp.score,newHyp.h,newHyp.score());          }          totalHypothesesGenerated++;          if (newHyp.score == Double.NEGATIVE_INFINITY || newHyp.score == Double.POSITIVE_INFINITY || newHyp.score != newHyp.score) {            continue;          }          if (newHyp.featurizable.numUntranslatedSourceTokens == 0 && !outputSpace.allowableFinal(newHyp.featurizable)) {            continue;          }          int sourceWordsCovered=newHyp.sourceCoverage.cardinality();          beams[sourceWordsCovered].put(newHyp);          optionsApplied++;          localOptionsApplied++;        }      }    }    if (DETAILED_DEBUG) {      System.err.printf("local options applied(%d): %d%n",hypPos,localOptionsApplied);    }  }  if (DEBUG) {    System.err.printf("Options applied: %d%n",optionsApplied);  }  return totalHypothesesGenerated;}  }
class C{  public static boolean isValidIfd(int ifdId){  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;}  }
class C{  private synchronized void bufferChange() throws ReadFailedException {  ByteBuffer current=super.getByteBuffer();  if (null != current) {    current.clear();    emptyBuffers.add(current);  }  int tries=0;  while (true) {    try {      ByteBuffer buffer=fullBuffers.poll(100,TimeUnit.MILLISECONDS);      if (null != buffer) {        super.setByteBuffer(buffer);        break;      } else {        tries++;        if (readFailed || (tries > MAX_BUFFER_POOL_TRIES)) {          throw new ReadFailedException("Time-out trying to get the full byte buffer to read from.");        }      }    } catch (    InterruptedException e) {      Thread.interrupted();    }  }}  }
class C{  private void actionSave(){  if (PermissionsHelper.ensurePermissions(this,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE}))   actionSave_do();}  }
class C{  protected Status readStatus() throws InterruptedException, IOException {  final File statusFile=new File(workingDir,statusName);  FileInputStream fileInput=null;  ObjectInputStream objectInput=null;  try {    fileInput=new FileInputStream(statusFile);    objectInput=new ObjectInputStream(fileInput);    Status status=(Status)objectInput.readObject();    if (!isExistingProcess(status.pid)) {      status=createStatus(this.baseName,SHUTDOWN,status.pid);    }    return status;  } catch (  ClassNotFoundException e) {    throw new RuntimeException(e);  }catch (  FileNotFoundException e) {    Thread.sleep(500);    if (statusFile.exists()) {      return readStatus();    } else {      throw e;    }  } finally {    IOUtils.close(objectInput);    IOUtils.close(fileInput);  }}  }
class C{  protected void mergeClusterInformation(ModifiableDBIDs cellids,WritableIntegerDataStore temporary,WritableDataStore<Assignment> clusterids){  FiniteProgress mprog=LOG.isVerbose() ? new FiniteProgress("Collecting result",cellids.size(),LOG) : null;  for (DBIDIter id=cellids.iter(); id.valid(); id.advance()) {    int nclus=temporary.intValue(id);    if (nclus > NOISE) {      Core core=cores[nclus];      assert (core.num > NOISE);      Assignment oclus=clusterids.get(id);      if (oclus == null) {        clusterids.put(id,core);      } else       if (oclus instanceof Core) {        core.mergeWith((Core)oclus);      } else       if (oclus instanceof Border) {        core.mergeWith(((Border)oclus).core);        clusterids.put(id,core);      } else {        assert (oclus instanceof MultiBorder);        if (LOG.isDebuggingFinest()) {          LOG.debugFinest("Multi-Merge: " + nclus + " - "+ oclus+ " -> "+ core);        }        int m=core.num, m2=((MultiBorder)oclus).getCore().num;        m=m < m2 ? m : m2;        assert (m > NOISE);        for (        Border b : ((MultiBorder)oclus).cs) {          cores[b.core.num].num=m;        }        core.num=m;        clusterids.put(id,core);      }    } else     if (nclus < 0) {      Border border=borders[-nclus];      Assignment oclus=clusterids.get(id);      if (oclus == null) {        clusterids.put(id,border);      } else       if (oclus instanceof Core) {        ((Core)oclus).mergeWith(border.core);      } else       if (oclus instanceof Border) {        if (((Border)oclus).core.num != border.core.num) {          clusterids.put(id,new MultiBorder((Border)oclus,border));        }      } else {        assert (oclus instanceof MultiBorder);        clusterids.put(id,((MultiBorder)oclus).update(border));      }    } else {      assert (nclus == NOISE);    }    LOG.incrementProcessed(mprog);  }  LOG.ensureCompleted(mprog);}  }
class C{  public void verifyValueNotNull(V value){  if (value == null) {    throw new NullPointerException("null value is not allowed. cache=" + id);  }}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  return new SVGTransformDescriptor(toSVGTransform(gc));}  }
class C{  public boolean addCSSAttributeFromHTML(MutableAttributeSet attr,CSS.Attribute key,String value){  Object iValue=css.getCssValue(key,value);  if (iValue != null) {    attr.addAttribute(key,iValue);    return true;  }  return false;}  }
class C{  static float cosineDistance(float[] vector1,float[] vector2){  float sum=0;  int len=vector1.length;  for (int i=0; i < len; i++) {    sum+=vector1[i] * vector2[i];  }  return (float)Math.acos(sum);}  }
class C{  private void reset(){  ivs=null;  size=0;}  }
class C{  public static final RuntimeException unchecked(Throwable e){  if (e instanceof RuntimeException) {    throw (RuntimeException)e;  } else   if (e instanceof Exception) {    throw new ExceptionAdapter((Exception)e);  } else   if (e instanceof Error) {    throw (Error)e;  } else {    assertFail("uncheck: Unsupported Throwable: " + e);    return null;  }}  }
class C{  private void assignViews(){  viewPager=(ViewPager)findViewById(R.id.viewPager);}  }
class C{  public GeneralConditionAdapter(Context context,String[] conditions,@Nullable String selectedConditionUuid){  super(context,VIEW_RESOURCE,conditions);  mConditions=conditions;  mSelectedConditionUuid=selectedConditionUuid;}  }
class C{  public boolean isUpdate(){  return this.opType == OP_TYPE_UPDATE && isEntry();}  }
class C{  private void checkWsConnection(){  if (messageBus != null) {    messageBus.cancelReconnection();  }  messageBus=messageBusProvider.createMachineMessageBus(devMachine.getWsAgentWebSocketUrl());  messageBus.addOnCloseHandler(this);  messageBus.addOnErrorHandler(this);  messageBus.addOnOpenHandler(this);}  }
class C{  public boolean applyOptions() throws IOException {  SearchSettings.SMART_SEARCH_ENABLED.setValue(smartSearchEnabled.isSelected());  return true;}  }
class C{  public static void insertData(String dbSourceFileLocation) throws IOException, DataSetException, DatabaseUnitException, SQLException {  if (dbSourceFileLocation == null) {    return;  }  ReplacementDataSet dataSet=new ReplacementDataSet(new FlatXmlDataSetBuilder().build(new File(dbSourceFileLocation)));  dataSet.addReplacementObject("[NULL]",null);  Date now=new Date();  dataSet.addReplacementObject("[SYSDATE]",Long.valueOf(now.getTime()));  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");  dataSet.addReplacementObject("[SYSTIMESTAMP]",sdf.format(now));  DatabaseOperation.INSERT.execute(dbConn,dataSet);}  }
class C{  public void testLocalsAverageCorrectly() throws Exception {  TransferEntropyCalculatorKraskov teCalc=new TransferEntropyCalculatorKraskov();  String kraskov_K="4";  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  super.testLocalsAverageCorrectly(teCalc,100,1);}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);      for (int i=0; i < IV.length - iv.length; i++) {        IV[i]=0;      }    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    if (ivParam.getParameters() != null) {      cipher.init(true,ivParam.getParameters());    }  } else {    reset();    if (params != null) {      cipher.init(true,params);    }  }}  }
class C{  public EdgeListGraph(Graph graph) throws IllegalArgumentException {  this();  if (graph == null) {    throw new NullPointerException("Graph must not be null.");  }  transferNodesAndEdges(graph);  this.ambiguousTriples=graph.getAmbiguousTriples();  this.underLineTriples=graph.getUnderLines();  this.dottedUnderLineTriples=graph.getDottedUnderlines();  for (  Edge edge : graph.getEdges()) {    if (graph.isHighlighted(edge)) {      setHighlighted(edge,true);    }  }  for (  Node node : nodes) {    namesHash.put(node.getName(),node);  }}  }
class C{  private static void analyzeLocalMachine(){  _localPar=Runtime.getRuntime().availableProcessors();  _localJVMMaxMem=Runtime.getRuntime().maxMemory();  String version=System.getProperty("java.version");  _isLtJDK8=(UtilFunctions.compareVersion(version,"1.8") < 0);}  }
class C{  public final boolean hasDataType(String type){  return mDataTypes != null && findMimeType(type);}  }
class C{  public static void addPrimitiveDistanceCheck(InsnList distance,Type type,InsnList mutant){  distance.add(cast(type,Type.DOUBLE_TYPE));  distance.add(copy(mutant));  distance.add(cast(type,Type.DOUBLE_TYPE));  distance.add(new MethodInsnNode(Opcodes.INVOKESTATIC,PackageInfo.getNameWithSlash(ReplaceVariable.class),"getDistance","(DD)D",false));}  }
class C{  public void deleteDictItemById(long dictItemId) throws SystemException, NoSuchDictItemException {  List<DictItem> dictItems=dictItemPersistence.findByTreeIndex(dictItemId + StringPool.PERIOD);  if (dictItems == null || dictItems.isEmpty()) {    dictItemPersistence.remove(dictItemId);  }}  }
class C{  @SuppressWarnings("unused") public GeneratingClassLoader(ClassLoader parent){  super(parent);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double SMALL_NUM=0.0001d;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  SMALL_NUM=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    updateProgress("Initializing: ",-1);    int row_n, col_n;    int row, col;    double z_n;    long k=0;    GridCell gc=null;    double z;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    int progress=0;    int oldProgress;    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int rowsLessOne=rows - 1;    int cols=image.getNumberColumns();    int numCells=0;    String preferredPalette=image.getPreferredPalette();    double noData=image.getNoDataValue();    double[][] output=new double[rows][cols];    double[][] input=new double[rows + 2][cols + 2];    for (row=0; row < rows + 2; row++) {      input[row][0]=noData;      input[row][cols + 1]=noData;    }    for (col=0; col < cols + 2; col++) {      input[0][col]=noData;      input[rows + 1][col]=noData;    }    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        output[row][col]=-999;        input[row + 1][col + 1]=data[col];      }    }    image.close();    updateProgress("Loop 1: ",-1);    int numCellsTotal=rows * cols;    int numSolvedCells=0;    PriorityQueue<GridCell> queue=new PriorityQueue<>((2 * rows + 2 * cols) * 2);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=input[row + 1][col + 1];        if (z != noData) {          numCells++;          for (int i=0; i < 8; i++) {            row_n=row + Dy[i];            col_n=col + Dx[i];            z_n=input[row_n + 1][col_n + 1];            if (z_n == noData) {              gc=new GridCell(row,col,z);              queue.add(gc);              output[row][col]=z;              numCellsTotal++;              break;            }          }        } else {          numSolvedCells++;          output[row][col]=noData;        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    }    updateProgress("Loop 2: ",0);    oldProgress=(int)(100f * numSolvedCells / numCellsTotal);    do {      gc=queue.poll();      row=gc.row;      col=gc.col;      z=gc.z;      for (int i=0; i < 8; i++) {        row_n=row + Dy[i];        col_n=col + Dx[i];        z_n=input[row_n + 1][col_n + 1];        if ((z_n != noData) && (output[row_n][col_n] == -999)) {          if (z_n <= z) {            z_n=z + SMALL_NUM;          }          output[row_n][col_n]=z_n;          numSolvedCells++;          gc=new GridCell(row_n,col_n,z_n);          queue.add(gc);        }      }      progress=(int)(100f * numSolvedCells / numCellsTotal);      if ((progress - oldProgress) == 1) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    } while (queue.isEmpty() == false);    updateProgress("Saving Data: ",0);    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.DOUBLE,-999);    outputFile.setPreferredPalette(preferredPalette);    oldProgress=-1;    for (row=0; row < rows; row++) {      outputFile.setRowValues(row,output[row]);      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void calculateCategoryRates(){  double propVariable=1.0;  int cat=0;  if (invarParameter != null) {    categoryRates[0]=0.0;    categoryProportions[0]=invarParameter.getParameterValue(0);    propVariable=1.0 - categoryProportions[0];    cat=1;  }  if (shapeParameter != null) {    final double a=shapeParameter.getParameterValue(0);    double mean=0.0;    final int gammaCatCount=categoryCount - cat;    for (int i=0; i < gammaCatCount; i++) {      categoryRates[i + cat]=GammaDistribution.quantile((2.0 * i + 1.0) / (2.0 * gammaCatCount),a,1.0 / a);      mean+=categoryRates[i + cat];      categoryProportions[i + cat]=propVariable / gammaCatCount;    }    mean=(propVariable * mean) / gammaCatCount;    for (int i=0; i < gammaCatCount; i++) {      categoryRates[i + cat]/=mean;    }  } else {    categoryRates[cat]=1.0 / propVariable;    categoryProportions[cat]=propVariable;  }  if (muParameter != null) {    double mu=muParameter.getParameterValue(0);    for (int i=0; i < categoryCount; i++)     categoryRates[i]*=mu;  }  ratesKnown=true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.ENUM_SOURCE__MODEL:    setModel((org.eclipse.vorto.core.api.model.datatype.Enum)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean unexport(Remote obj,boolean force) throws RemoteException {  WeakReference iref=(WeakReference)implTable.get(obj);  if (iref == null)   return false;  Remote impl=(Remote)iref.get();  if (impl == null)   return false;  return UnicastRemoteObject.unexportObject(impl,force);}  }
class C{  void addNonIntersectingInterval(CompoundInterval i,BasicInterval stop){  SortedSet<BasicInterval> headSet=i.headSetInclusive(stop);  addAll(headSet);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public void addFilterInfo(FilterRoutingInfo eventRouting){  for (  Map.Entry<InternalDistributedMember,FilterInfo> entry : eventRouting.serverFilterInfo.entrySet()) {    FilterInfo existing=this.serverFilterInfo.get(entry.getKey());    if (existing == null) {      existing=new FilterInfo();      this.serverFilterInfo.put(entry.getKey(),existing);    }    existing.addFilterInfo(entry.getValue());  }  if (eventRouting.localFilterInfo != null) {    if (this.localFilterInfo == null) {      this.localFilterInfo=new FilterInfo();    }    this.localFilterInfo.addFilterInfo(eventRouting.localFilterInfo);  }  this.memberWithFilterInfoExists|=eventRouting.memberWithFilterInfoExists;}  }
class C{  public static void isNotNull(Object object){  isNotNull(object,"");}  }
class C{  public boolean isEmpty(){  return (classAnnotations == null) && (fieldAnnotations == null) && (methodAnnotations == null)&& (parameterAnnotations == null);}  }
class C{  protected float number(boolean positive){  try {    float sgn=(positive) ? 1 : -1;    String val=scanner.getStringValue();    nextIgnoreSpaces();    return sgn * Float.parseFloat(val);  } catch (  NumberFormatException e) {    throw createCSSParseException("number.format");  }}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXECUTION_NODE;}  }
class C{  private static Locale createConstant(String lang,String country){  BaseLocale base=BaseLocale.createInstance(lang,country);  return getInstance(base,null);}  }
class C{  @PostConstruct public void init(){  if (!_isSkipInit) {    initImpl();  }}  }
class C{  @Deprecated public static int[] decodeValue(String a){  return toIntArray(a.split("\\+"));}  }
class C{  public void resolvePrimaries(AnnotatedTypeMirror from,AnnotatedTypeMirror to){  if (from.getKind() == TypeKind.WILDCARD || from.getKind() == TypeKind.TYPEVAR) {    if (top != null) {      if (from.getAnnotationInHierarchy(top) == null) {        to.removeAnnotationInHierarchy(top);      }    } else {      for (      final AnnotationMirror toPrimaryAnno : to.getAnnotations()) {        if (from.getAnnotationInHierarchy(toPrimaryAnno) == null) {          to.removeAnnotation(toPrimaryAnno);        }      }    }  } else {    ErrorReporter.errorAbort("ResolvePrimaries' from argument should be a type variable OR wildcard\n" + "from=" + from.toString(true) + "\n"+ "to="+ to.toString(true));  }}  }
class C{  @Override public void processEvent(SystemEvent event) throws AbortProcessingException {  UIComponent root=(UIComponent)event.getSource();  FacesContext jsf=FacesContext.getCurrentInstance();  EnumSet<VisitHint> hints=EnumSet.of(VisitHint.SKIP_ITERATION);  VisitContext visitContext=VisitContext.createVisitContext(jsf,null,hints);  root.visitTree(visitContext,new ValidateFormNestingCallback());}  }
class C{  public void addService(Class<? extends IFloodlightService> clazz,IFloodlightService service){  serviceMap.put(clazz,service);}  }
class C{  public NotificationChain basicSetAnnotationList(AnnotationList newAnnotationList,NotificationChain msgs){  AnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private DateFormatSymbols(boolean flag){}  }
class C{  @DSComment("constructor") @DSVerified("Callback called") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:19.310 -0500",hash_original_method="EBD25CFA864782219EF130D05DE406FC",hash_generated_method="7BD296EDBFF52128CD69A980B4707200") public FutureTask(Callable<V> callable){  if (callable == null)   throw new NullPointerException();  sync=new Sync(callable);  try {    callable.call();  } catch (  Exception ex) {  }}  }
class C{  public static <NodeType extends ZyGraphNode<?> & ISelectableNode & IViewableNode & IYNode & IRawNodeAccessible,EdgeType extends ZyGraphEdge<?,?,?>>void centerNodes(final AbstractZyGraph<NodeType,?> graph,final Set<NodeType> nodes){  Preconditions.checkNotNull(nodes,"Error: Nodes argument is null");  Preconditions.checkArgument(!nodes.isEmpty(),"Error: Nodes argument is empty");  final Rectangle2D box=GraphHelpers.calculateBoundingBox(nodes);  graph.getView().setCenter(box.getX() + (box.getWidth() / 2.),box.getY() + (box.getHeight() / 2.));  graph.updateViews();}  }
class C{  public static String stripAndCollapse(String str){  return collapseWhitespace(strip(str));}  }
class C{  public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  try {    elemType=(SaxHandlerBase.ElementType)elementTypes.get(localName);    if (gatherMode) {      if (gatheringElement.gatherElement(localName,atts)) {        gatherBuffer.add(new Object[]{elemType,new AttributesImpl(atts)});      }    } else {      if (elemType == null) {        return;      }      elemType.startElement(atts);    }    elems.add(elemType);  } catch (  SAXException saxex) {    throw saxex;  }catch (  Exception ex) {    throw new SAXException(ex);  }}  }
class C{  public static Workflow.Method rollbackLinkBlockSnapshotSessionTargetMethod(URI systemURI,URI snapSessionURI,URI snapshotURI){  return new Workflow.Method(RB_LINK_SNAPSHOT_SESSION_TARGET_METHOD,systemURI,snapSessionURI,snapshotURI);}  }
class C{  public EPServiceIsolationException(final Throwable cause){  super(cause);}  }
class C{  public static void validateSchemaFieldsAreSimple(Schema schema){  for (  Schema.Field field : schema.getFields()) {    if (!field.getSchema().isSimpleOrNullableSimple()) {      throw new IllegalArgumentException(String.format("Field '%s' is not of simple type, All fields for table sink should of simple type",field.getName()));    }  }}  }
class C{  public CacheRuntimeException(){}  }
class C{  private void applyL2Reg(final double eta_t){  if (lambda0 > 0)   for (  Vec v : ws)   v.mutableMultiply(1 - eta_t * lambda0);}  }
class C{  protected Object addStepToClusterImpl(Object request) throws Exception {  EmrStepHelper stepHelper=emrStepHelperFactory.getStepHelper(request.getClass().getName());  validateAddStepToClusterRequest(request,stepHelper);  stepHelper.validateAddStepRequest(request);  NamespaceEntity namespaceEntity=namespaceDaoHelper.getNamespaceEntity(stepHelper.getRequestNamespace(request));  EmrClusterDefinitionEntity emrClusterDefinitionEntity=emrClusterDefinitionDaoHelper.getEmrClusterDefinitionEntity(stepHelper.getRequestNamespace(request),stepHelper.getRequestEmrClusterDefinitionName(request));  stepHelper.setRequestNamespace(request,namespaceEntity.getCode());  stepHelper.setRequestEmrClusterDefinitionName(request,emrClusterDefinitionEntity.getName());  String clusterName=emrHelper.buildEmrClusterName(namespaceEntity.getCode(),emrClusterDefinitionEntity.getName(),stepHelper.getRequestEmrClusterName(request));  Object emrStep=stepHelper.buildResponseFromRequest(request);  try {    String clusterId=emrHelper.getActiveEmrClusterId(stepHelper.getRequestEmrClusterId(request),clusterName);    stepHelper.setRequestEmrClusterId(request,clusterId);    String stepId=emrDao.addEmrStep(clusterId,stepHelper.getEmrStepConfig(emrStep),emrHelper.getAwsParamsDto());    stepHelper.setStepId(emrStep,stepId);  } catch (  AmazonServiceException ex) {    handleAmazonException(ex,"An Amazon exception occurred while adding EMR step \"" + stepHelper.getRequestStepName(request) + "\" to cluster with name \""+ clusterName+ "\".");  }  return emrStep;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:38.759 -0500",hash_original_method="95B16C7C7F13DC470BDCDB52F2D23BFD",hash_generated_method="3F2164BF4140B2783EB98206D805F67C") private static void applyOverrides(){  InputStream stream=getContentTypesPropertiesStream();  if (stream == null) {    return;  }  try {    try {      Properties overrides=new Properties();      overrides.load(stream);      for (      Map.Entry<Object,Object> entry : overrides.entrySet()) {        String extension=(String)entry.getKey();        String mimeType=(String)entry.getValue();        add(mimeType,extension);      }    }  finally {      stream.close();    }  } catch (  IOException ignored) {  }}  }
class C{  public boolean hasNotification(int entryId){  return CENTER.hasEntry(entryId);}  }
class C{  public boolean addJournalRollbackStep(URI rpSystemId,String token) throws WorkflowException {  WorkflowStepCompleter.stepSucceded(token);  return true;}  }
class C{  protected Frame<V> newFrame(final Frame<? extends V> src){  return new Frame<V>(src);}  }
class C{  public void reset(EvolutionState state,int thread){  IntegerVectorSpecies s=(IntegerVectorSpecies)species;  for (int x=0; x < genome.length; x++)   genome[x]=(short)randomValueFromClosedInterval((short)s.minGene(x),(short)s.maxGene(x),state.random[thread]);}  }
class C{  private void ensureFDCapacity(int idx){  if (idx >= failureDetectionPorts.length) {    int[] p=new int[idx + 10];    if (failureDetectionPorts.length > 0) {      System.arraycopy(failureDetectionPorts,0,p,0,failureDetectionPorts.length);    }    Arrays.fill(p,idx,idx + 9,-1);    failureDetectionPorts=p;  }}  }
class C{  public boolean isDefaultValue(){  return defaultValue;}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  public T caseFunctionblockProperty(FunctionblockProperty object){  return null;}  }
class C{  @EventHandler public void onPlayerChangeTeam(PlayerContainerChangeStateEvent event){  Player player=event.getPlayer();  if (event.getNewData().getPlaying() != null && event.getNewData().getPlaying().equals(team)) {    addPlayer(player);  } else {    removePlayer(player);  }}  }
class C{  public static <T>T[] removeAll(T[] array,T objToRemove){  int removeCount=0;  for (  T elem : array) {    if (areEqual(elem,objToRemove)) {      removeCount++;    }  }  if (removeCount == 0) {    return array;  }  int ix=0;  T[] newArray=createWithSameComponentType(array.length - removeCount,array);  for (  T elem : array) {    if (areEqual(elem,objToRemove)) {      continue;    }    newArray[ix]=elem;    ix++;  }  return newArray;}  }
class C{  public void disableEL(){  this.supportsEL=false;}  }
class C{  @IntRange(from=MIN_CHILD_ID,to=MAX_CHILD_ID) public static long extractExpandableChildIdPart(long composedId){  if ((composedId == RecyclerView.NO_ID) || isExpandableGroup(composedId)) {    return RecyclerView.NO_ID;  }  return (composedId << (64 - BIT_WIDTH_CHILD_ID - BIT_OFFSET_CHILD_ID)) >> (64 - BIT_WIDTH_CHILD_ID);}  }
class C{  public Algorithm(Element el){  requiredKey=el.getAttribute("RequiredKey");  jceName=el.getAttribute("JCEName");  algorithmClass=el.getAttribute("AlgorithmClass");  if (el.hasAttribute("KeyLength")) {    keyLength=Integer.parseInt(el.getAttribute("KeyLength"));  } else {    keyLength=0;  }}  }
class C{  public void logInWithReadPermissions(Activity activity,Collection<String> permissions){  validateReadPermissions(permissions);  LoginClient.Request loginRequest=createLoginRequest(permissions);  startLogin(new ActivityStartActivityDelegate(activity),loginRequest);}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  private int RS_MDS_Encode(int k0,int k1){  int r=k1;  for (int i=0; i < 4; i++) {    r=RS_rem(r);  }  r^=k0;  for (int i=0; i < 4; i++) {    r=RS_rem(r);  }  return r;}  }
class C{  @Override public void dispose(){  getTreeTableModel().delete();}  }
class C{  public PathLock acquire(){  PathLockFactory.this.acquire(path,permits);  return this;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  LegendItemCollection clone=(LegendItemCollection)super.clone();  clone.items=(List)ObjectUtilities.deepClone(this.items);  return clone;}  }
class C{  public int size(){  return arguments.length;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  boolean found=false;  for (ElemTemplateElement childElem=getFirstChildElem(); childElem != null; childElem=childElem.getNextSiblingElem()) {    int type=childElem.getXSLToken();    if (Constants.ELEMNAME_WHEN == type) {      found=true;      ElemWhen when=(ElemWhen)childElem;      XPathContext xctxt=transformer.getXPathContext();      int sourceNode=xctxt.getCurrentNode();      if (when.getTest().bool(xctxt,sourceNode,when)) {        transformer.executeChildTemplates(when,true);        return;      }    } else     if (Constants.ELEMNAME_OTHERWISE == type) {      found=true;      transformer.executeChildTemplates(childElem,true);      return;    }  }  if (!found)   transformer.getMsgMgr().error(this,XSLTErrorResources.ER_CHOOSE_REQUIRES_WHEN);}  }
class C{  protected DefaultErrorHandler(){}  }
class C{  public void append(StringBuffer buffer,String fieldName,double value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public boolean hasSkyLight(){  return skyLight != null;}  }
class C{  public static LogisticRegression serializableInstance(){  return new LogisticRegression(ColtDataSet.serializableInstance());}  }
class C{  public boolean isEmpty(){  return head == null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.709 -0400",hash_original_method="4DEFC33B4F4669D519B2C732A89B9C70",hash_generated_method="4DEFC33B4F4669D519B2C732A89B9C70") void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    for (int i=0, n=size; i < n; i++) {      if (o == array[i]) {        removeAt(i);        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  public static void main(String[] args){  double[][] matrix=getMatrix();  for (int col=0; col < matrix[0].length; col++) {    System.out.println("Sum of the elements at column " + col + " is "+ sumColumn(matrix,col));  }}  }
class C{  public Element store(Object o){  Element e=new Element("perform");  e.setAttribute("name",((TriggerRouteModel)o).getName());  e.setAttribute("type","Action");  e.setAttribute("class",this.getClass().getName());  return e;}  }
class C{  public void changeEncryptionPassword(CharSequence currentPassword,CharSequence newPassword){  keyChainGroupLock.lock();  try {    decrypt(currentPassword);    encrypt(newPassword);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  public static float convertAlphaIntToFloat(int alphaInt){  if (alphaInt >= 255)   return 1f;  if (alphaInt <= 0f)   return 0;  return (float)alphaInt / Constant.DEFAULT_ALPHA;}  }
class C{  private void createRasterizerTextures(){  this.positionTexture=glCreateTextures(GL_TEXTURE_2D);  glTextureStorage2D(this.positionTexture,1,GL_RGBA32F,width,height);  this.normalTexture=glCreateTextures(GL_TEXTURE_2D);  glTextureStorage2D(this.normalTexture,1,GL_RGBA16F,width,height);}  }
class C{  public void check(final Predicate4<A,B,C,D> property){  final TheoryRunner<Tuple4<A,B,C,D>,Tuple4<A,B,C,D>> qc=TheoryRunner.runner(this.state.get(),combine(),convertPredicate());  qc.check(null);}  }
class C{  private static void sort(short[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        short ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        short a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      short last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    short t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    short t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    short t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    short t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    short pivot1=a[e2];    short pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      short ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        short ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    short pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      short ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  @LargeTest public void testSelectionOfInputElements4() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "Start"+ "<span>"+ "<span>"+ "<input type=\"submit\">"+ "</span>"+ "</span>"+ "<input type=\"text\" size=\"30\">"+ "<span>"+ "<span>"+ "<input type=\"submit\" size=\"30\">"+ "</span>"+ "</span>"+ "End"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Start");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"submit\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"text\" size=\"30\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"submit\" size=\"30\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("End");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("End");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<input type=\"submit\" size=\"30\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<input type=\"text\" size=\"30\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<input type=\"submit\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("Start");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Start");}  }
class C{  public void removeAllArrows(){  removeAllArrows(true);}  }
class C{  @Path("commit") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputWithRevisionResponse commit(final CommitRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.commit(request);}  }
class C{  public String id(){  return id;}  }
class C{  public boolean isEndsWith3Points(){  return endsWith3Points;}  }
class C{  public CTutorialStartDialog(final JFrame owner,final List<CTutorial> tutorials){  super(owner,"Tutorial Selection",true);  Preconditions.checkNotNull(owner,"IE02080: Owner argument can not be null");  Preconditions.checkNotNull(tutorials,"IE02081: Tutorials argument can not be null");  new CDialogEscaper(this);  final JPanel panel=new JPanel(new BorderLayout());  panel.setBorder(new TitledBorder("Please select the tutorial you want to run"));  tutorialList=new JList<CTutorial>(tutorials.toArray(new CTutorial[tutorials.size()]));  tutorialList.addListSelectionListener(new InternalSelectionListener());  tutorialDescription.setBorder(new TitledBorder(""));  tutorialDescription.setContentType("text/html");  tutorialDescription.setEditable(false);  if (!tutorials.isEmpty()) {    tutorialList.setSelectedIndex(0);  }  final JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,new JScrollPane(tutorialList),new JScrollPane(tutorialDescription));  splitPane.setDividerLocation(200);  panel.add(splitPane);  final JPanel bottomPanel=new JPanel(new BorderLayout());  final JPanel buttonPanel=new JPanel();  final JButton closeButton=new JButton(new CancelAction());  final JButton startButton=new JButton(new StartAction());  buttonPanel.add(closeButton);  buttonPanel.add(startButton);  bottomPanel.add(buttonPanel,BorderLayout.EAST);  add(panel);  add(bottomPanel,BorderLayout.SOUTH);  setSize(new Dimension(600,400));  GuiHelper.centerChildToParent(owner,this,true);}  }
class C{  public void testJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.524 -0500",hash_original_method="138E7D6C6B15213658AC13EABF129E3A",hash_generated_method="A9BFE4F88C6D703CA9290EE77B65E0C4") public LinearGradient(float x0,float y0,float x1,float y1,int color0,int color1,TileMode tile){  native_instance=nativeCreate2(x0,y0,x1,y1,color0,color1,tile.nativeInt);  native_shader=nativePostCreate2(native_instance,x0,y0,x1,y1,color0,color1,tile.nativeInt);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof PeriodAxisLabelInfo) {    PeriodAxisLabelInfo info=(PeriodAxisLabelInfo)obj;    if (!info.periodClass.equals(this.periodClass)) {      return false;    }    if (!info.dateFormat.equals(this.dateFormat)) {      return false;    }    if (!info.padding.equals(this.padding)) {      return false;    }    if (!info.labelFont.equals(this.labelFont)) {      return false;    }    if (!info.labelPaint.equals(this.labelPaint)) {      return false;    }    if (info.drawDividers != this.drawDividers) {      return false;    }    if (!info.dividerStroke.equals(this.dividerStroke)) {      return false;    }    if (!info.dividerPaint.equals(this.dividerPaint)) {      return false;    }    return true;  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRasterInfo image;  WhiteboxRaster output;  int cols, rows, col, row, a, progress;  double noData;  String inputHeader;  String outputHeader;  double[] data;  double reclassInterval=0;  double startingValue=0;  double endingValue=Float.POSITIVE_INFINITY;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  reclassInterval=Double.parseDouble(args[2]);  startingValue=Double.parseDouble(args[3]);  if (!args[4].isEmpty() && !args[4].toLowerCase().contains("not specified")) {    endingValue=Double.parseDouble(args[4]);  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRasterInfo(inputHeader);    noData=image.getNoDataValue();    rows=image.getNumberRows();    cols=image.getNumberColumns();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          if (isBetween(data[col],startingValue,endingValue)) {            z=Math.floor(data[col] / reclassInterval) * reclassInterval;            output.setValue(row,col,z);          } else {            output.setValue(row,col,data[col]);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public float calculateISIG(int value,short adjustment){  float isig=(float)value / (MedtronicConstants.SENSOR_CONVERSION_CONSTANT_VALUE - ((float)value * (float)MedtronicConstants.SENSOR_CONVERSION_CONSTANT_VALUE2));  isig+=((float)adjustment * (float)value * (MedtronicConstants.SENSOR_CONVERSION_CONSTANT_VALUE3 + (MedtronicConstants.SENSOR_CONVERSION_CONSTANT_VALUE4 * (float)value / (float)MedtronicConstants.SENSOR_CONVERSION_CONSTANT_VALUE5)));  return isig;}  }
class C{  @Override public Invocation.Builder accept(MediaType... mediaTypes){  clientRequestContext.setAcceptResponseTypes(Arrays.asList(mediaTypes));  return this;}  }
class C{  @Override public void sawOpcode(int seen){  if (seenReturn && seenTransferOfControl && seenStateChange) {    return;  }  if (DEBUG) {    System.out.println(stack);    System.out.println(getPC() + " : " + OPCODE_NAMES[seen]);  }  if ((seen == INVOKEVIRTUAL || seen == INVOKEINTERFACE) && "add".equals(getNameConstantOperand()) && "(Ljava/lang/Object;)Z".equals(getSigConstantOperand())&& stack.getStackDepth() >= 2) {    OpcodeStack.Item it0=stack.getStackItem(0);    int r0=it0.getRegisterNumber();    OpcodeStack.Item it1=stack.getStackItem(1);    int r1=it1.getRegisterNumber();    if (r0 == r1 && r0 > 0) {      bugReporter.reportBug(new BugInstance(this,"IL_CONTAINER_ADDED_TO_ITSELF",NORMAL_PRIORITY).addClassAndMethod(this).addSourceLine(this));    }  }  if ((seen == INVOKEVIRTUAL || seen == INVOKESPECIAL || seen == INVOKEINTERFACE || seen == INVOKESTATIC) && getNameConstantOperand().equals(getMethodName()) && getSigConstantOperand().equals(getMethodSig())&& (seen == INVOKESTATIC) == getMethod().isStatic() && (seen == INVOKESPECIAL) == (getMethod().isPrivate() && !getMethod().isStatic() || "<init>".equals(getMethodName()))) {    Type arguments[]=getMethod().getArgumentTypes();    int parameters=arguments.length;    if (!getMethod().isStatic()) {      parameters++;    }    XMethod xMethod=XFactory.createReferencedXMethod(this);    if (DEBUG) {      System.out.println("IL: Checking...");      System.out.println(xMethod);      System.out.println("vs. " + getClassName() + "."+ getMethodName()+ " : "+ getMethodSig());    }    if (xMethod.getClassName().replace('.','/').equals(getClassName()) || seen == INVOKEINTERFACE) {      int firstParameter=0;      if ("<init>".equals(getMethodName())) {        firstParameter=1;      }      boolean match1=!seenStateChange;      for (int i=firstParameter; match1 && i < parameters; i++) {        OpcodeStack.Item it=stack.getStackItem(parameters - 1 - i);        if (!it.isInitialParameter() || it.getRegisterNumber() != i) {          match1=false;        }      }      boolean sameMethod=seen == INVOKESTATIC || "<init>".equals(getNameConstantOperand());      if (!sameMethod) {        if (DEBUG) {          System.out.println("Stack is " + stack);        }        OpcodeStack.Item p=stack.getStackItem(parameters - 1);        if (DEBUG) {          System.out.println("parameters = " + parameters + ", Item is "+ p);        }        String sig=p.getSignature();        sameMethod=p.isInitialParameter() && p.getRegisterNumber() == 0 && sig.equals("L" + getClassName() + ";");      }      boolean match2=sameMethod && !seenTransferOfControl;      boolean match3=sameMethod && !seenReturn && largestBranchTarget < getPC();      if (match1 || match2 || match3) {        if (DEBUG) {          System.out.println("IL: " + sameMethod + " "+ match1+ " "+ match2+ " "+ match3);        }        bugReporter.reportBug(new BugInstance(this,"IL_INFINITE_RECURSIVE_LOOP",HIGH_PRIORITY).addClassAndMethod(this).addSourceLine(this));      }    }  }switch (seen) {case ARETURN:case IRETURN:case LRETURN:case RETURN:case DRETURN:case FRETURN:    seenReturn=true;  seenTransferOfControl=true;break;case ATHROW:seenTransferOfControl=true;break;case PUTSTATIC:case PUTFIELD:case IASTORE:case AASTORE:case DASTORE:case FASTORE:case LASTORE:case SASTORE:case CASTORE:case BASTORE:seenStateChange=true;break;case INVOKEVIRTUAL:case INVOKESPECIAL:case INVOKEINTERFACE:case INVOKESTATIC:if ("print".equals(getNameConstantOperand()) || "println".equals(getNameConstantOperand()) || "log".equals(getNameConstantOperand())|| "toString".equals(getNameConstantOperand())) {break;}seenStateChange=true;break;default :break;}}  }
class C{  public MutualInformationCalculatorDiscrete(int base) throws Exception {  this(base,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.856 -0500",hash_original_method="AA1BAEFA825191F183CB3AF9DE3464B2",hash_generated_method="AA1BAEFA825191F183CB3AF9DE3464B2") boolean _stateIsWill(int option){  return ((_options[option] & _WILL_MASK) != 0);}  }
class C{  public static Typeface droidSerifBold(Context context){  sDroidSerifBold=getFontFromRes(R.raw.droidserif_bold,context);  return sDroidSerifBold;}  }
class C{  protected void verifyObb2Contents(String filename){  String path=null;  path=doWaitForPath(filename);  doValidateTextContents(path,"sample.txt",SAMPLE1_TEXT);  doValidateTextContents(path,"sample2.txt",SAMPLE2_TEXT);}  }
class C{  private static Shape scale(final Shape currentPolygon,final double xScaleFactor,final double yScaleFactor){  final Point2D centroid=getCentroid(currentPolygon);  final AffineTransform transform=AffineTransform.getTranslateInstance((1.0 - xScaleFactor) * centroid.getX(),(1.0 - yScaleFactor) * centroid.getY());  transform.scale(xScaleFactor,yScaleFactor);  final Shape shape=transform.createTransformedShape(currentPolygon);  return shape;}  }
class C{  public static Editor removeAll(){  final Editor editor=getOptimusPref().edit().clear();  editor.apply();  return editor;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public boolean canContain(ElementType other){  return (theModel & other.theMemberOf) != 0;}  }
class C{  public void create(final Properties properties) throws InterruptedException, ExecutionException {  if (properties == null)   throw new IllegalArgumentException();  AbstractApiTask.submitApiTask(indexManager,new CreateKBTask(namespace,properties)).get();}  }
class C{  static String bin2HexStr(byte[] data){  StringBuffer sb=new StringBuffer();  for (  byte b : data) {    String s=null;    try {      s=Integer.toHexString(b & 0xff);    } catch (    Exception e) {      e.printStackTrace();      return null;    }    if (s.length() == 1) {      sb.append('0');    }    sb.append(s);  }  return sb.toString();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.SDEFINITION__TKEY:    setTkey((Expression)newValue);  return;case GamlPackage.SDEFINITION__ARGS:setArgs((ActionArguments)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public AccountId(final String address){  this(Address.fromEncoded(address));}  }
class C{  private void validateAttributesAgainstFormat(BusinessObjectDataCreateRequest request,BusinessObjectFormatEntity businessObjectFormatEntity){  Map<String,String> attributeMap=new HashMap<>();  if (!org.apache.commons.collections4.CollectionUtils.isEmpty(request.getAttributes())) {    for (    Attribute attribute : request.getAttributes()) {      attributeMap.put(attribute.getName().toLowerCase(),attribute.getValue());    }  }  for (  BusinessObjectDataAttributeDefinitionEntity attributeDefinitionEntity : businessObjectFormatEntity.getAttributeDefinitions()) {    String attributeDefinitionName=attributeDefinitionEntity.getName().toLowerCase();    if ((attributeDefinitionEntity.isRequired()) && ((!attributeMap.containsKey(attributeDefinitionName)) || (StringUtils.isBlank(attributeMap.get(attributeDefinitionName))))) {      throw new IllegalArgumentException(String.format("The business object format has a required attribute \"%s\" which was not specified or has a value which is blank.",attributeDefinitionEntity.getName()));    }  }}  }
class C{  public WeightedMultiClassPerformance(int type){  this.type=type;}  }
class C{  @Override public JsonSerialize.Inclusion findSerializationInclusion(Annotated a,JsonSerialize.Inclusion defValue){  XmlElementWrapper w=a.getAnnotation(XmlElementWrapper.class);  if (w != null) {    return w.nillable() ? JsonSerialize.Inclusion.ALWAYS : JsonSerialize.Inclusion.NON_NULL;  }  XmlElement e=a.getAnnotation(XmlElement.class);  if (e != null) {    return e.nillable() ? JsonSerialize.Inclusion.ALWAYS : JsonSerialize.Inclusion.NON_NULL;  }  return defValue;}  }
class C{  public static void quietAndInfo(IgniteLogger log,String msg){  if (log.isQuiet())   U.quiet(false,msg);  if (log.isInfoEnabled())   log.info(msg);}  }
class C{  private static boolean extractFinally(MethodNode mth,ExceptionHandler handler){  int count=handler.getBlocks().size();  BitSet bs=new BitSet(count);  List<BlockNode> blocks=new ArrayList<BlockNode>(count);  for (  BlockNode block : handler.getBlocks()) {    List<InsnNode> insns=block.getInstructions();    if (!insns.isEmpty()) {      if (insns.get(0).getType() != InsnType.MOVE_EXCEPTION) {        blocks.add(block);      }      bs.set(block.getId());    }  }  if (blocks.isEmpty()) {    return false;  }  List<BlocksRemoveInfo> removes=new LinkedList<BlocksRemoveInfo>();  Set<BlockNode> splitters=new HashSet<BlockNode>();  TryCatchBlock tryBlock=handler.getTryBlock();  if (tryBlock.getHandlersCount() > 1) {    for (    ExceptionHandler otherHandler : tryBlock.getHandlers()) {      if (otherHandler == handler) {        continue;      }      for (      BlockNode hb : otherHandler.getBlocks()) {        BlocksRemoveInfo removeInfo=removeInsns(mth,hb,blocks,bs);        if (removeInfo != null) {          removes.add(removeInfo);          break;        }      }    }    if (removes.size() != tryBlock.getHandlersCount() - 1) {      return false;    }  }  for (  ExceptionHandler otherHandler : tryBlock.getHandlers()) {    SplitterBlockAttr splitterAttr=otherHandler.getHandlerBlock().get(AType.SPLITTER_BLOCK);    if (splitterAttr != null) {      BlockNode splBlock=splitterAttr.getBlock();      if (!splBlock.getCleanSuccessors().isEmpty()) {        splitters.add(splBlock);      }    }  }  boolean removed=false;  for (  BlockNode splitter : splitters) {    BlockNode start=splitter.getCleanSuccessors().get(0);    List<BlockNode> list=BlockUtils.collectBlocksDominatedBy(splitter,start);    for (    BlockNode block : list) {      if (bs.get(block.getId())) {        continue;      }      BlocksRemoveInfo removeInfo=removeInsns(mth,block,blocks,bs);      if (removeInfo != null) {        removes.add(removeInfo);        removed=true;        break;      }    }  }  if (!removed) {    return false;  }  LiveVarAnalysis laBefore=null;  boolean runReMap=isReMapNeeded(removes);  if (runReMap) {    laBefore=new LiveVarAnalysis(mth);    laBefore.runAnalysis();  }  for (  BlocksRemoveInfo removeInfo : removes) {    if (!applyRemove(mth,removeInfo)) {      return false;    }  }  LiveVarAnalysis laAfter=null;  BlockNode handlerBlock=handler.getHandlerBlock();  InsnNode me=BlockUtils.getLastInsn(handlerBlock);  if (me != null && me.getType() == InsnType.MOVE_EXCEPTION) {    boolean replaced=false;    List<InsnNode> insnsList=handlerBlock.getInstructions();    if (!handlerBlock.getCleanSuccessors().isEmpty()) {      laAfter=new LiveVarAnalysis(mth);      laAfter.runAnalysis();      RegisterArg resArg=me.getResult();      BlockNode succ=handlerBlock.getCleanSuccessors().get(0);      if (laAfter.isLive(succ,resArg.getRegNum())) {        InsnNode kill=new InsnNode(InsnType.NOP,0);        kill.setResult(resArg);        kill.add(AFlag.REMOVE);        insnsList.set(insnsList.size() - 1,kill);        replaced=true;      }    }    if (!replaced) {      insnsList.remove(insnsList.size() - 1);      handlerBlock.add(AFlag.SKIP);    }  }  if (runReMap) {    if (laAfter == null) {      laAfter=new LiveVarAnalysis(mth);      laAfter.runAnalysis();    }    performVariablesReMap(mth,removes,laBefore,laAfter);  }  handler.setFinally(true);  return true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.LABELLED_STATEMENT__NAME:    setName((String)newValue);  return;case N4JSPackage.LABELLED_STATEMENT__STATEMENT:setStatement((Statement)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void handleSpreadsheetSelection(){  int selected=spreadsheetListBox.getSelectedIndex();  if (spreadsheetEntries != null && selected >= 0) {    SpreadsheetEntry entry=spreadsheetEntries.get(selected);    ajaxLinkField.setText(entry.getHtmlLink().getHref());    worksheetsFeedUrlField.setText(entry.getWorksheetFeedUrl().toExternalForm());  }}  }
class C{  public void detach(){  if (m_allowDetach) {    AxesWalker walker=m_firstWalker;    while (null != walker) {      walker.detach();      walker=walker.getNextWalker();    }    m_lastUsedWalker=null;    super.detach();  }}  }
class C{  public DateTimeColumn atTime(TimeColumn c){  DateTimeColumn newColumn=DateTimeColumn.create(this.name() + " " + c.name());  for (int r=0; r < this.size(); r++) {    int c1=this.getInt(r);    int c2=c.getInt(r);    if (c1 == MISSING_VALUE || c2 == TimeColumn.MISSING_VALUE) {      newColumn.add(DateTimeColumn.MISSING_VALUE);    } else {      LocalDate value1=PackedLocalDate.asLocalDate(c1);      LocalTime time=PackedLocalTime.asLocalTime(c2);      newColumn.add(PackedLocalDateTime.pack(value1,time));    }  }  return newColumn;}  }
class C{  @Override protected void keyTyped(char par1,int par2){  proxyBox.textboxKeyTyped(par1,par2);  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(1));}  }
class C{  @SuppressWarnings("unchecked") private void grow(final int capacity){  if (wrapped)   a=ObjectArrays.grow(a,capacity,size); else {    if (capacity > a.length) {      final int newLength=(int)Math.max(Math.min(2L * a.length,it.unimi.dsi.fastutil.Arrays.MAX_ARRAY_SIZE),capacity);      final Object t[]=new Object[newLength];      System.arraycopy(a,0,t,0,size);      a=(K[])t;    }  }  if (ASSERTS)   assert size <= a.length;}  }
class C{  private AppViewConnection(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:47:59.762 -0500",hash_original_method="FC447FA34EAD1A15520CE5D8778BF36F",hash_generated_method="CC69E4A6765A9668C67296C98FBE0BCE") @DSVerified @DSSafe(DSCat.GUI) public void addContentView(View view,ViewGroup.LayoutParams params){  getWindow().addContentView(view,params);  initActionBar();}  }
class C{  public boolean isValidValue(long value){  return (value >= getMinimum() && value <= getMaximum());}  }
class C{  public MailOperationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void pushTreeChangedEvent(Node node,Parameter parameter,int index){  pushTreeChangedEvent(new TreeChangedEvent(node,parameter,index));}  }
class C{  public PropertyHandler(){  super();  m_Ignored=new Hashtable<Object,HashSet<String>>();  m_Allowed=new Hashtable<Object,HashSet<String>>();}  }
class C{  public void loop(double ellapsedMillis){  for (  SpringSystemListener listener : mListeners) {    listener.onBeforeIntegrate(this);  }  advance(ellapsedMillis);  if (mActiveSprings.isEmpty()) {    mIdle=true;  }  for (  SpringSystemListener listener : mListeners) {    listener.onAfterIntegrate(this);  }  if (mIdle) {    mSpringLooper.stop();  }}  }
class C{  public void testInit_EnablesEventBusListener(){  mController.init();  assertEquals(1,mFakeEventBus.countRegisteredReceivers());}  }
class C{  protected void updateList(){  CheckBoxListModel model;  model=(CheckBoxListModel)m_List.getModel();  for (  Capability cap : Capability.values()) {    model.setChecked(model.indexOf(cap),m_Capabilities.handles(cap));  }}  }
class C{  public void addPullRequestReviewer(String project,String repository,String pullRequestId,String user,StashClient stashClient){  try {    StashPullRequest pullRequest=stashClient.getPullRequest(project,repository,pullRequestId);    StashUser reviewer=pullRequest.getReviewer(user);    if (reviewer == null) {      ArrayList<StashUser> reviewers=new ArrayList<>(pullRequest.getReviewers());      reviewers.add(stashClient.getUser(user));      stashClient.addPullRequestReviewer(project,repository,pullRequestId,pullRequest.getVersion(),reviewers);      LOGGER.info("User \"{}\" is now a reviewer of the pull-request {} #{}",user,pullRequestId,project,repository);    }  } catch (  StashClientException e) {    LOGGER.error("Unable to add a new reviewer to the pull-request",e);  }}  }
class C{  private void onItemFocused(RadialMenuItem item){  if (mFocusedItem == item) {    return;  }  final RadialMenu menu=(mSubMenu != null) ? mSubMenu : mRootMenu;  mFocusedItem=item;  invalidate();  if (item == null) {    menu.clearSelection(0);  } else   if (item.isCorner()) {    mRootMenu.selectMenuItem(item,0);  } else {    menu.selectMenuItem(item,0);  }  sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);}  }
class C{  public static void renameFile(final ServerContext context,final String oldName,final String newName){  final Command<String> command=new RenameCommand(context,oldName,newName);  command.runSynchronously();}  }
class C{  public LinearDiscretizer(double binwidth){  this.binwidth=binwidth;}  }
class C{  public static final void writeListXml(List val,String name,XmlSerializer out) throws XmlPullParserException, IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"list");  if (name != null) {    out.attribute(null,"name",name);  }  int N=val.size();  int i=0;  while (i < N) {    writeValueXml(val.get(i),null,out);    i++;  }  out.endTag(null,"list");}  }
class C{  public void run(){  if (name.endsWith("2"))   return;  IRequest r=base.launch("RANDOM",new Talker(job,"2"),null);  while (r.getStatus() == IRequest.WAITING) {    try {      Thread.currentThread().sleep(100);    } catch (    Exception e) {    }  }  if (r.getStatus() != IRequest.DONE)   return;  Address a=(Address)r.getInfo("address");  r=fireMessage(a,"test","How are you?");  while (r.getStatus() == IRequest.WAITING) {    try {      Thread.currentThread().sleep(100);    } catch (    Exception e) {    }  }  if (r.getStatus() == IRequest.DONE)   System.out.println("Answer: " + r.getInfo("reply"));}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static void checkKeyLengths(int modulusLen,BigInteger exponent,int minModulusLen,int maxModulusLen) throws InvalidKeyException {  if ((minModulusLen > 0) && (modulusLen < (minModulusLen))) {    throw new InvalidKeyException("RSA keys must be at least " + minModulusLen + " bits long");  }  int maxLen=Math.min(maxModulusLen,MAX_MODLEN);  if (modulusLen > maxLen) {    throw new InvalidKeyException("RSA keys must be no longer than " + maxLen + " bits");  }  if (restrictExpLen && (exponent != null) && (modulusLen > MAX_MODLEN_RESTRICT_EXP)&& (exponent.bitLength() > MAX_RESTRICTED_EXPLEN)) {    throw new InvalidKeyException("RSA exponents can be no longer than " + MAX_RESTRICTED_EXPLEN + " bits "+ " if modulus is greater than "+ MAX_MODLEN_RESTRICT_EXP+ " bits");  }}  }
class C{  public VSELP1Message(BinaryMessage message,DataUnitID duid,AliasList aliasList){  super(message,duid,aliasList);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static int EL3RST(){  return 47;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.180 -0400",hash_original_method="EBBC480BA94BD3D79D683AB555C9F857",hash_generated_method="CBF7C94BC9CFD995420B236C0E481D7C") @Override protected void onPause(){  super.onPause();  mResumed=false;  if (mHandler.hasMessages(MSG_RESUME_PENDING)) {    mHandler.removeMessages(MSG_RESUME_PENDING);    onResumeFragments();  }  mFragments.dispatchPause();}  }
class C{  private void computeThreshold(){  threshold=(int)(elementData.length * loadFactor);}  }
class C{  protected int x(Point2D xyW){  return x(xyW.getX());}  }
class C{  private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (c.compare(a[cursor2],tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  @Override public final void process(final DM dm,final ReplyProcessor21 p){  if (logger.isDebugEnabled()) {    logger.debug("Processor id is : {}",this.processorId);  }  IndexCreationResponse processor=(IndexCreationResponse)p;  if (processor != null) {    processor.setResponse(this.result,this.indexBucketsMap,this.numTotalBuckets);    processor.process(this);  }}  }
class C{  public void print(){  print(System.out);}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  w.simpleElement(GoogleBaseNamespaces.GM,"disapproved",null,null);}  }
class C{  static final double nectarToHoney(double nectar){  return nectar * honeyShrinkFactor;}  }
class C{  public static Response createBindingErrorResponse(char errorCode){  return createBindingErrorResponse(errorCode,null,null);}  }
class C{  public boolean isNot(){  return isNot;}  }
class C{  public void blacklistApps(String code,String data){  ArrayList<DeviceAppInfo> apps=appList.getInstalledApps();  JSONArray appList=new JSONArray();  String identity=null;  try {    JSONObject resultApp=new JSONObject(data);    if (!resultApp.isNull(resources.getString(R.string.intent_extra_data))) {      resultApp=(JSONObject)resultApp.get(resources.getString(R.string.intent_extra_data));    }    identity=(String)resultApp.get(resources.getString(R.string.intent_extra_identity));  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e);  }  for (  DeviceAppInfo app : apps) {    JSONObject result=new JSONObject();    try {      result.put(resources.getString(R.string.intent_extra_name),app.getAppname());      result.put(resources.getString(R.string.intent_extra_package),app.getPackagename());      if (identity.trim().equals(app.getPackagename())) {        result.put(resources.getString(R.string.intent_extra_not_violated),false);        result.put(resources.getString(R.string.intent_extra_package),app.getPackagename());      } else {        result.put(resources.getString(R.string.intent_extra_not_violated),true);      }    } catch (    JSONException e) {      Log.e(TAG,"Invalid JSON format." + e);    }    appList.put(result);  }  resultBuilder.build(code,appList);}  }
class C{  public static void init(AnalyticsService i){  instance=i;}  }
class C{  public void testLocalInstances_distribution(){  MatsimRandom.reset(123L);  Random local1a=MatsimRandom.getLocalInstance();  double value1=local1a.nextDouble();  MatsimRandom.reset(234L);  Random local2a=MatsimRandom.getLocalInstance();  double value2a=local2a.nextDouble();  Random local2b=MatsimRandom.getLocalInstance();  double value2b=local2b.nextDouble();  assertTrue(Math.abs(value1 - value2a) > EPSILON);  assertTrue(Math.abs(value2a - value2b) > EPSILON);  assertTrue(Math.abs(value1 - value2b) > EPSILON);}  }
class C{  public void select(int start,int end){  int newStart, newEnd;  boolean newBias;  if (start <= end) {    newStart=start;    newEnd=end;    newBias=false;  } else {    newStart=end;    newEnd=start;    newBias=true;  }  if (newStart < 0 || newEnd > getDocumentLength()) {    throw new IllegalArgumentException("Bounds out of" + " range: " + newStart + ","+ newEnd);  }  if (newStart != selectionStart || newEnd != selectionEnd || newBias != biasLeft) {    int newStartLine=getLineOfOffset(newStart);    int newEndLine=getLineOfOffset(newEnd);    if (painter.isBracketHighlightEnabled()) {      if (bracketLine != -1)       painter.invalidateLine(bracketLine);      updateBracketHighlight(end);      if (bracketLine != -1)       painter.invalidateLine(bracketLine);    }    painter.invalidateLineRange(selectionStartLine,selectionEndLine);    painter.invalidateLineRange(newStartLine,newEndLine);    document.addUndoableEdit(new CaretUndo(selectionStart,selectionEnd));    selectionStart=newStart;    selectionEnd=newEnd;    selectionStartLine=newStartLine;    selectionEndLine=newEndLine;    biasLeft=newBias;    fireCaretEvent();  }  blink=true;  caretTimer.restart();  if (selectionStart == selectionEnd)   rectSelect=false;  magicCaret=-1;  scrollToCaret();}  }
class C{  public void deleteLogicalPort(String id,FutureCallback<Void> responseCallback,boolean forceDetach) throws IOException {  String url=LOGICAL_PORTS_BASE_PATH + "/" + id;  if (forceDetach) {    url+="?detach=true";  }  deleteAsync(url,HttpStatus.SC_OK,responseCallback);}  }
class C{  public void close(){  SparkExecutionContext.resetSparkContextStatic();  MLContextProxy.setActive(false);  activeMLContext=null;  try {    DMLScript.cleanupHadoopExecution(ConfigurationManager.getDMLConfig());  } catch (  Exception ex) {    throw new MLContextException("Failed to cleanup working directories.",ex);  }  for (  Script script : scripts.values())   script.clearAll();  scripts.clear();  scriptHistoryStrings.clear();  resetConfig();  sc=null;}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public final void externalValidate(String text){  newSubnet.setText(text);  validate(text);}  }
class C{  protected void preorder(TreeNode<E> root){  if (root == null)   return;  Stack<TreeNode<E>> stack=new Stack<>();  stack.push(root);  while (!stack.empty()) {    TreeNode<E> node=stack.pop();    System.out.print(node.element + " ");    if (node.right != null) {      stack.push(node.right);    }    if (node.left != null) {      stack.push(node.left);    }  }}  }
class C{  private static void padInt(StringBuilder buffer,int value,int length){  String strValue=Integer.toString(value);  for (int i=length - strValue.length(); i > 0; i--) {    buffer.append('0');  }  buffer.append(strValue);}  }
class C{  boolean hasActionListener(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      return true;    }  }  return false;}  }
class C{  ByteBuffer read(final long addr,final int nbytes){  final Integer writeCachePosition=writeCacheIndex.get(addr);  if (writeCachePosition == null) {    return null;  }  final int pos=writeCachePosition;  final ByteBuffer tmp=buf.buffer().duplicate();  tmp.limit(pos + nbytes);  tmp.position(pos);  return tmp.slice();}  }
class C{  @Override public Operand copy(){  return new BranchProfileOperand(takenProbability);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof IVector2D))   return false;  IVector2D v=(IVector2D)o;  if (vector.length != v.vector.length || !sizes.equals(v.sizes))   return false;  for (int i=0; i < vector.length; ++i)   if (!Arrays.equals(vector[i],v.vector[i]))   return false;  return true;}  }
class C{  private void updateVolume(Volume volumeObj,DbClient dbClient,StringBuilder logMsgBuilder,VNXeApiClient vnxeApiClient){  VNXeLun vnxeLun=null;  vnxeLun=vnxeApiClient.getLun(volumeObj.getNativeId());  if (vnxeLun != null) {    volumeObj.setCapacity(vnxeLun.getSizeTotal());    volumeObj.setAllocatedCapacity(vnxeLun.getSizeAllocated());    volumeObj.setProvisionedCapacity(vnxeLun.getSizeTotal());    logMsgBuilder.append(String.format("Expand volume successfully for NativeId: %s, URI: %s",volumeObj.getNativeId(),getTaskCompleter().getId()));    dbClient.updateObject(volumeObj);  } else {    logMsgBuilder.append("Could not find corresponding volume in the VNXe, using the resource ID: ");    logMsgBuilder.append(volumeObj.getNativeId());  }}  }
class C{  public void addActionListener(ActionListener listener){  textField.addActionListener(listener);}  }
class C{  public long start(){  return start;}  }
class C{  public ToStringBuilder append(final String fieldName,final float[] array,final boolean fullDetail){  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 2: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2: ",(int)progress);    }    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (int i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (int i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    updateProgress("Loop 2 of 2: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          outputFile.setValue(row,col,cdf[binNum]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  EntityState(Targetable target){  if (target instanceof Entity) {    Entity entity=(Entity)target;    position=entity.getPosition();    facing=entity.getFacing();    hexesMoved=entity.delta_distance;    heat=entity.heat;    prone=entity.isProne() || entity.isHullDown();    immobile=entity.isImmobile();    jumping=(entity.moved == EntityMovementType.MOVE_JUMP);    movementType=entity.moved;    setSecondaryFacing(entity.getSecondaryFacing());    building=false;    aero=(target instanceof Aero);    airborne=entity.isAirborne() || entity.isAirborneVTOLorWIGE();    naturalAptGun=entity.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_GUNNERY);    naturalAptPilot=entity.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING);  } else {    position=target.getPosition();    facing=0;    hexesMoved=0;    heat=0;    prone=false;    immobile=true;    jumping=false;    movementType=EntityMovementType.MOVE_NONE;    setSecondaryFacing(0);    building=(target instanceof BuildingTarget);    aero=false;    naturalAptGun=false;    naturalAptPilot=false;  }}  }
class C{  protected NodeResult compareComments(final XNode xControl,final XNode xTest){  Differences differences=new Differences();  NodeResult nodeResult=new NodeResult(xControl,xTest,differences);  Comment control=(Comment)xControl.getNode();  Comment test=(Comment)xTest.getNode();  if (!XMLUtil.nodesEqual(control,test,isIgnoringWhitespace())) {    if (!_config.isCustomDifference()) {      differences.add("Different Comment Node: Current Node" + xTest.getXPath() + " --> Golden Node "+ xControl.getXPath());    } else {      Difference diff=new Difference(DifferenceConstants.COMMENT_VALUE,xControl,xTest);      differences.add(diff);    }  } else {    nodeResult.setIfExactMatch(true);  }  return nodeResult;}  }
class C{  Env<AttrContext> enclosingInitEnv(Env<AttrContext> env){  while (true) {switch (env.tree.getTag()) {case VARDEF:      JCVariableDecl vdecl=(JCVariableDecl)env.tree;    if (vdecl.sym.owner.kind == TYP) {      return env;    }  break;case BLOCK:if (env.next.tree.hasTag(CLASSDEF)) {  return env;}break;case METHODDEF:case CLASSDEF:case TOPLEVEL:return null;}Assert.checkNonNull(env.next);env=env.next;}}  }
class C{  public void createFloors(final Property property,final String mutationCode,final String propUsageId,final String propOccId){  LOGGER.debug("Entered into createFloors");  LOGGER.debug("createFloors: Property: " + property + ", mutationCode: "+ mutationCode+ ", propUsageId: "+ propUsageId+ ", propOccId: "+ propOccId);  final Area totBltUpArea=new Area();  Float totBltUpAreaVal=new Float(0);  if (!property.getPropertyDetail().getPropertyTypeMaster().getCode().equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND)) {    property.getPropertyDetail().getFloorDetails().clear();    int floorUid=1;    for (    final Floor floor : property.getPropertyDetail().getFloorDetailsProxy())     if (floor != null) {      totBltUpAreaVal=totBltUpAreaVal + floor.getBuiltUpArea().getArea();      PropertyTypeMaster unitType=null;      PropertyUsage usage=null;      PropertyOccupation occupancy=null;      if (floor.getUnitType() != null)       unitType=(PropertyTypeMaster)getPropPerServ().find("from PropertyTypeMaster utype where utype.id = ?",floor.getUnitType().getId());      if (floor.getPropertyUsage() != null)       usage=(PropertyUsage)getPropPerServ().find("from PropertyUsage pu where pu.id = ?",floor.getPropertyUsage().getId());      if (floor.getPropertyOccupation() != null)       occupancy=(PropertyOccupation)getPropPerServ().find("from PropertyOccupation po where po.id = ?",floor.getPropertyOccupation().getId());      StructureClassification structureClass=null;      if (floor.getStructureClassification() != null)       structureClass=(StructureClassification)getPropPerServ().find("from StructureClassification sc where sc.id = ?",floor.getStructureClassification().getId());      if (floor.getOccupancyDate() != null && floor.getConstructionDate() != null) {        floor.setDepreciationMaster(propertyTaxUtil.getDepreciationByDate(floor.getConstructionDate(),floor.getOccupancyDate()));      }      LOGGER.debug("createFloors: PropertyUsage: " + usage + ", PropertyOccupation: "+ occupancy+ ", StructureClass: "+ structureClass);      if (unitType != null && unitType.getCode().equalsIgnoreCase(PropertyTaxConstants.UNITTYPE_OPEN_PLOT))       floor.setFloorNo(OPEN_PLOT_UNIT_FLOORNUMBER);      floor.setUnitType(unitType);      floor.setPropertyUsage(usage);      floor.setPropertyOccupation(occupancy);      floor.setStructureClassification(structureClass);      floor.setPropertyDetail(property.getPropertyDetail());      floor.setCreatedDate(new Date());      floor.setModifiedDate(new Date());      floor.setFloorUid(floorUid++);      final User user=userService.getUserById(ApplicationThreadLocals.getUserId());      floor.setCreatedBy(user);      floor.setModifiedBy(user);      property.getPropertyDetail().getFloorDetails().add(floor);      totBltUpArea.setArea(totBltUpAreaVal);      totBltUpArea.setLength(floor.getBuiltUpArea().getLength());      totBltUpArea.setBreadth(floor.getBuiltUpArea().getBreadth());      property.getPropertyDetail().setTotalBuiltupArea(totBltUpArea);    }    property.getPropertyDetail().setNoofFloors(property.getPropertyDetail().getFloorDetailsProxy().size());  } else {    property.getPropertyDetail().setNoofFloors(0);    property.getPropertyDetail().getFloorDetails().clear();    totBltUpArea.setArea(totBltUpAreaVal);    property.getPropertyDetail().setTotalBuiltupArea(totBltUpArea);  }  LOGGER.debug("Exiting from createFloors");}  }
class C{  void notifyAcceptBind(Bind bindParameter) throws IllegalStateException {  lock.lock();  try {    if (request == null) {      request=new BindRequest(bindParameter,responseHandler);      requestCondition.signal();    } else {      throw new IllegalStateException("Already waiting for acceptance bind");    }  }  finally {    lock.unlock();  }}  }
class C{  public void writeConfiguration(String fileName){  StringBuffer buffer=new StringBuffer();  buffer.append("CP=");  buffer.append(ClassPathHandler.getInstance().getTargetProjectClasspath().replace("\\","/"));  buffer.append("\nPROJECT_PREFIX=");  if (Properties.PROJECT_PREFIX != null)   buffer.append(Properties.PROJECT_PREFIX);  buffer.append("\n");  Map<String,Set<Parameter>> fieldMap=new HashMap<String,Set<Parameter>>();  for (  Field f : Properties.class.getFields()) {    if (f.isAnnotationPresent(Parameter.class)) {      Parameter p=f.getAnnotation(Parameter.class);      if (!fieldMap.containsKey(p.group()))       fieldMap.put(p.group(),new HashSet<Parameter>());      fieldMap.get(p.group()).add(p);    }  }  for (  String group : fieldMap.keySet()) {    if (group.equals("Runtime"))     continue;    buffer.append("#--------------------------------------\n");    buffer.append("# ");    buffer.append(group);    buffer.append("\n#--------------------------------------\n\n");    for (    Parameter p : fieldMap.get(group)) {      buffer.append("# ");      buffer.append(p.description());      buffer.append("\n");      if (!changedFields.contains(p.key()))       buffer.append("#");      buffer.append(p.key());      buffer.append("=");      try {        buffer.append(getStringValue(p.key()));      } catch (      Exception e) {        logger.error("Exception " + e.getMessage(),e);      }      buffer.append("\n\n");    }  }  FileIOUtils.writeFile(buffer.toString(),fileName);}  }
class C{  private void helpTestIndexForQuery(String query,String indexedExpression,String regionPath) throws Exception {  QueryService qs=CacheUtils.getQueryService();  QueryObserverImpl observer=new QueryObserverImpl();  QueryObserverHolder.setInstance(observer);  SelectResults nonIndexedResults=(SelectResults)qs.newQuery(query).execute();  assertFalse(observer.isIndexesUsed);  qs.createIndex("newIndex",indexedExpression,regionPath);  SelectResults indexedResults=(SelectResults)qs.newQuery(query).execute();  assertEquals(nonIndexedResults.size(),indexedResults.size());  assertTrue(observer.isIndexesUsed);}  }
class C{  public void addValue(Field field,Object value){  fieldMap.put(field,value);}  }
class C{  public void forEachDstOut(Allocation ain,Allocation aout){  blend(8,ain,aout);}  }
class C{  private void commentIndentAfterNewLine(IDocument d,DocumentCommand c){  if (c.offset == -1 || d.getLength() == 0) {    return;  }  try {    int p=(c.offset == d.getLength() ? c.offset - 1 : c.offset);    IRegion info=d.getLineInformationOfOffset(p);    int start=info.getOffset();    int end=findEndOfWhiteSpace(d,start,c.offset);    StringBuilder buf=new StringBuilder(c.text);    if (end >= start) {      String indentation=commentExtractLinePrefix(d,d.getLineOfOffset(c.offset));      buf.append(indentation);      if (end < c.offset) {        if (d.getChar(end) == '/' && d.getChar(end + 1) != '/') {          buf.append(" * ");          if (DBeaverCore.getGlobalPreferenceStore().getBoolean(SQLPreferenceConstants.SQLEDITOR_CLOSE_COMMENTS) && isNewComment(d,c.offset,partitioning)) {            String lineDelimiter=getLineDelimiter(d);            String endTag=lineDelimiter + indentation + " */";            d.replace(c.offset,0,endTag);          }        }      }    }    c.text=buf.toString();  } catch (  BadLocationException excp) {  }}  }
class C{  @Override public void cancelRowUpdates() throws SQLException {  try {    debugCodeCall("cancelRowUpdates");    checkClosed();    if (insertRow != null) {      throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);    }    updateRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public TProtocolDecorator(TProtocol protocol){  super(protocol.getTransport());  concreteProtocol=protocol;}  }
class C{  public long create_visual_sample_entry_atom(MP4DataStream bitstream) throws IOException {  log.trace("Visual entry atom contains wxh");  bitstream.skipBytes(24);  width=(int)bitstream.readBytes(2);  log.trace("Width: {}",width);  height=(int)bitstream.readBytes(2);  log.trace("Height: {}",height);  bitstream.skipBytes(50);  readed+=78;  MP4Atom child=MP4Atom.createAtom(bitstream);  this.children.add(child);  readed+=child.getSize();  return readed;}  }
class C{  public final void addPropertyChangeListener(PropertyChangeListener l){  getPcs().addPropertyChangeListener(l);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (isNetworkedPlaylistCall(stack,1)) {    return makeNetworkedCall(stack);  }  String s=getString(stack);  Playlist p=getPlaylist(stack);  if (p == null)   return null;  if (!Permissions.hasPermission(Permissions.PERMISSION_PLAYLIST,stack.getUIMgr()) && p != stack.getUIMgrSafe().getVideoFrame().getNowPlayingList())   return null;  p.setName(s);  sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.PLAYLIST_MODIFIED,new Object[]{sage.plugin.PluginEventManager.VAR_PLAYLIST,p,sage.plugin.PluginEventManager.VAR_UICONTEXT,(stack.getUIMgr() != null ? stack.getUIMgr().getLocalUIClientName() : null)});  return null;}  }
class C{  private void action_treeAdd(ListItem item){  log.info("Item=" + item);  if (item != null) {    SimpleTreeModel model=(SimpleTreeModel)centerTree.getModel();    SimpleTreeNode stn=model.find(model.getRoot(),item.id);    if (stn != null) {      MTreeNode tNode=(MTreeNode)stn.getData();      tNode.setName(item.name);      tNode.setAllowsChildren(item.isSummary);      tNode.setImageIndicator(item.imageIndicator);      model.nodeUpdated(stn);      Treeitem ti=centerTree.renderItemByPath(model.getPath(model.getRoot(),stn));      ti.setTooltiptext(item.description);    } else {      stn=new SimpleTreeNode(new MTreeNode(item.id,0,item.name,item.description,0,item.isSummary,item.imageIndicator,false,null),new ArrayList<Object>());      model.addNode(stn);    }    addNode(item);  }}  }
class C{  protected final LeafDocLookup doc(){  return lookup.doc();}  }
